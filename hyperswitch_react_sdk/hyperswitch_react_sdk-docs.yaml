resources:
- name: payment_intent
  endpoint:
    path: /payment_intents
    method: POST
- name: payment_methods
  endpoint:
    path: /v1/payment_methods
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: payments
  endpoint:
    path: /api/v1/payments
    method: GET
    data_selector: data
    params: {}
- name: payouts
  endpoint:
    path: /api/v1/payouts
    method: GET
    data_selector: data
    params: {}
- name: tokenization
  endpoint:
    path: /vault/tokenization
    method: POST
    data_selector: data
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/payment_methods
    method: GET
    data_selector: data
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
- name: payment_methods
  endpoint:
    path: /v1/payment_methods
    method: GET
    data_selector: data
    params: {}
- name: payment_methods
  endpoint:
    path: /api/v1/payment_methods
    method: GET
    data_selector: methods
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: transactions
- name: payment
  endpoint:
    path: /api/v1/payments
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/payment_methods
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /services/data/v1/payments
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: payment_methods
  endpoint:
    path: /v1/payment_methods
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: payouts
  endpoint:
    path: /explore-hyperswitch/payment-orchestration/payouts
    method: GET
- name: payouts
  endpoint:
    path: /explore-hyperswitch/payment-orchestration/payouts
    method: GET
- name: payment
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /payments/create
    method: POST
    params:
      profile_id: required
- name: payment
  endpoint:
    path: /api/v1/payments
    method: POST
    data_selector: data
    params: {}
- name: email.smtp
  endpoint:
    path: /hyperswitch/config/docker_compose.toml
    method: UPDATE
    data_selector: smtp_config
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: payment_methods
  endpoint:
    path: /services/data/v1/payment_methods
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /services/data/v1/transactions
    method: GET
    data_selector: records
- name: payment_methods
  endpoint:
    path: /api/payment_methods
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /api/transactions
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: payments
  endpoint:
    path: /api/v1/payments
    method: GET
    data_selector: records
    params: {}
- name: hyperswitch
  endpoint:
    path: /hyperswitch/hyperswitch-stack
    method: GET
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: hyperswitch
  endpoint:
    path: /hyperswitch
    method: GET
    data_selector: records
    params: {}
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: records
    params: {}
- name: payout
  endpoint:
    path: /payout
    method: POST
    data_selector: records
    params: {}
- name: hyperswitch
  endpoint:
    path: /hyperswitch
    method: GET
- name: merchant_account
  endpoint:
    path: /accounts
    method: POST
    data_selector: merchant_id
    params: {}
- name: api_key
  endpoint:
    path: /api_keys/<your_merchant_id>
    method: POST
    data_selector: api_key
    params: {}
- name: payment_connector
  endpoint:
    path: /account/<your merchant id>/connectors
    method: POST
    data_selector: connector_name
    params: {}
- name: test_utils
  endpoint:
    path: /test_utils
    method: GET
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: data
    params: {}
- name: payouts
  endpoint:
    path: /v1/payouts
    method: POST
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: paymentDetails
- name: payment
  endpoint:
    path: /v1/payments
    method: GET
    data_selector: data
- name: confirmPayment
  endpoint:
    path: /confirmPayment
    method: POST
- name: elements
  endpoint:
    path: /elements
    method: POST
- name: confirmCardPayment
  endpoint:
    path: /confirmCardPayment
    method: POST
- name: retrievePaymentIntent
  endpoint:
    path: /retrievePaymentIntent
    method: GET
- name: paymentRequest
  endpoint:
    path: /paymentRequest
    method: POST
- name: initiateUpdateIntent
  endpoint:
    path: /initiateUpdateIntent
    method: POST
- name: completeUpdateIntent
  endpoint:
    path: /completeUpdateIntent
    method: POST
- name: payment_methods
  endpoint:
    path: /api/v1/payment_methods
    method: GET
    data_selector: methods
    params: {}
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: payment
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: data
    params: {}
- name: payout
  endpoint:
    path: /v1/payouts
    method: POST
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /api/v1/payments
    method: POST
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: data
    params: {}
- name: routing_rules
  endpoint:
    path: /routing
    method: GET
    data_selector: rules
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: payment_transactions
  endpoint:
    path: /api/v1/payments
    method: GET
    data_selector: transactions
- name: payment_methods
  endpoint:
    path: /api/v1/payment_methods
    method: GET
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /v1/payments
    method: GET
    data_selector: records
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/payment_methods
    method: GET
    data_selector: data
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Requires setup of connected app in hyperswitch
- Some endpoints may return paginated results
- To authenticate API requests, you’ll need a username and password from either the
  Cloud Sandbox or your Docker setup.
- Uses OAuth2 with refresh token — requires setup of connected app in hyperswitch
- Payment Orchestration – Unified API and no-code integrations for all 60+ payment
  processors and numerous payment methods.
- Checkout Experience – Seamless, fast, and intuitive checkout experience for end
  users, improving conversions.
- Payment Operations – Simplifies management of all payment workflows and operations
  from a centralized dashboard.
- Merchants can configure Revenue Recovery entirely through the dashboard without
  writing any code.
- Server to Server Vault tokenization requires setup
- PCI DSS v4.0 Certified
- ISO 27001:2022 Certified
- GDPR Compliant
- SOC 2 Type II Compliant
- Allows you to tokenize and secure your customers' card data in a PCI-compliant vault.
- Uses Auth Rate Based Routing, Least Cost Routing, Elimination Routing, and Contracts-Based
  Routing strategies.
- Ensure to handle rate limiting as per API guidelines.
- Intelligent Routing module augments your payment processing by dynamically switching
  between processors in real-time.
- Some objects may return nulls in deeply nested fields
- Automates financial reconciliation, providing businesses with greater accuracy and
  control over their financial processes.
- Simplifies transaction matching for financial operations (FinOps) teams, ensuring
  seamless verification of payments, settlements, and ledger entries with 99% reconciliation
  accuracy.
- Merchants can choose whether they want to do Manual reconciliation or Automated
  reconciliation.
- It usually takes 2-5 days for the team to configure the module as per your requirements
  depending on the file formats and other specifications.
- Requires OAuth2 setup and app registration.
- One time effort of 2-weeks to enable all existing APMs and new innovations via the
  same integration.
- Requires OAuth2 authentication setup for API access.
- Ensure to handle rate limits to avoid throttling.
- Requires setup of connected app in Hyperswitch
- Some API responses may vary based on user permissions
- Some objects like Contact may return nulls in deeply nested fields
- Our Roadmap typically pans out over a 3-month period and we establish topics we
  work on upfront.
- Before the beginning of every quarter we come together to develop the next roadmap
  based on our core values.
- Uses OAuth2 with refresh token.
- Ensure proper setup for connected app.
- Our roadmap typically pans out over a 3-month period and we establish topics we
  work on upfront.
- We listen to your feedback and adapt our plans if needed.
- Responses from AI tools can be incorrect, use with caution.
- Requires setup of connected app in API
- This MCP server is only meant for product exploration while using sandbox environment.
- DO NOT USE Hyperswitch API Key from the PRODUCTION ENVIRONMENT.
- Requires setup of connected app in api
- Some endpoints may return nulls in deeply nested fields
- Smart Router for Payouts
- Smart Retries in Payout
- Methods marked with * are supported but not enabled by default.
- Methods marked with ** are in beta.
- Ensure PCI-compliance and secure handling of sensitive payment information.
- Currently, Hyperswitch supports Smart retries as an out-of-the-box capability.
- Uses OAuth2 with refresh token — requires setup of connected app in Hyperswitch
- API may have rate limits on requests
- Flexibility with Payment Processors
- Global Market Expansion
- Optimized Recurring Payments
- Unified Payment Management
- Merchants will setup their account and generate API keys with the subscription provider
  and Hyperswitch as well as integrate with both of them.
- API documentation includes various modules and integrations.
- Frontend SDKs handle secure payment collection, user authentication, and seamless
  checkout experiences while maintaining PCI compliance.
- Custom roles can only be created at merchant roles.
- Hyperswitch provides sandbox environments for tenants to experiment with any features
  or customisations safely.
- Ensure to handle token expiration properly.
- API rate limits may apply.
- Migration of data is a crucial step in ensuring business continuity without any
  interruptions.
- Hyperswitch upgraded to allow pluggable support for any SMTP-compliant email service
  provider.
- Configuration for smtp, applicable when the active email client is SMTP
- Supports both StartTls (recommended) and Plaintext (insecure) connections.
- Hyperswitch Cloud provides out-of-the-box PCI DSS Level 1 compliance
- Compliance with PCI DSS 4.0 and ISO 27001:2022 standards for data protection.
- All sensitive data remains masked during transmission and is never permanently stored
  on local systems.
- Database instances in cloud-hosted environments are encrypted to protect sensitive
  information.
- Prioritizes data security and adheres to PCI DSS standards to protect sensitive
  information.
- GDPR compliance
- We support the right to erasure through a permanent deletion of personal data upon
  request.
- Requires OAuth2 setup for API access.
- Ensure to use the correct OAuth scopes for accessing resources.
- Authentication Methodology for Hyperswitch APIs
- Juspay's Hypercheckout - for accepting payments in India (in compliance with Financial
  data residency requirements)
- Juspay's Hyperswitch - for Global payment acceptance
- To enable collecting shipping details from Express checkout wallets, enable 'Collect
  shipping details from wallets' toggle.
- These setup guides are meant for development.
- Some operations may have rate limits
- 'Ensure nodes meet the minimum requirements: 4 CPUs and 6GB memory.'
- Ensure the correct API version is used.
- Monitor API usage to avoid rate limits.
- 'Ensure the following tools are installed and configured: Azure CLI, kubectl, Helm.'
- Use Helm to deploy Hyperswitch into your Kubernetes cluster.
- Update charts/incubator/hyperswitch-stack/values.yaml to point to the most recent
  nightly release for the router, consumer, producer and drainer.
- Manually update configs based on the output of git diff command.
- Ensure that you download or copy the API key as it will be available only once through
  the dashboard for security reasons.
- Secure the API Key as it is essential for authenticating API requests from your
  merchant server.
- Hyperswitch provides a deep health check endpoint to check if the various components
  involved are up and running.
- Test payments through CLI version of Postman, Newman which resides in a Rust wrapper
  called as Rustman
- Admin API Key is required for running tests.
- Custom headers can be added to requests.
- Uses OAuth2 with refresh token
- Secure your api-keys
- The connector configurations set up in the sandbox need to be replicated on the
  Hyperswitch production account.
- Ensure that the Hyperswitch services agreement is signed and shared with the Hyperswitch
  team.
- If you need further assistance, you can email at hyperswitch@juspay.in.
- Make sure your secret key (api-key) is not exposed on the front-end (website/mobile
  app).
- Ensure that your workflow avoids the duplication or storage of your API keys in
  multiple locations.
- Ensure correct API key is used for authentication
- Last updated 6 months ago
- A 30,000 feet view of Hyperswitch's architecture
- 'Hyperswitch comprises two distinct app services: Router and Scheduler which in
  turn consists of Producer and Consumer'
- Hyperswitch eliminates network latency, leading to quicker transaction processing.
- Different connectors implement preprocessing differently.
- Use this pattern if the connector issues temporary session credentials.
- API Reference available at https://api-reference.hyperswitch.io/introduction
- Quickly install Hyperswitch with minimal setup
- Try your first hello world by making a payment
- Learn about Hyperswitch’s modular architecture
- Improve and streamline your checkout experience
- See how Hyperswitch embeds security, reliability, and scalability into its core
  architecture
- 'To authenticate API requests, you’ll need a username and password from either:
  Cloud Sandbox or your Docker setup.'
- Requires setup of OAuth2 connected app.
- Hyperswitch Smart Router Engine evaluates every payment request against predefined
  routing logic.
- Requires OAuth2 setup for authentication
- Requires OAuth2 authentication.
- Ensure all API calls are within rate limits.
- Some endpoints may have rate limits
- Ensure to set up OAuth2 credentials in Hyperswitch
- Rate limits apply on API calls
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check request parameters'
- '404 Not Found: Verify endpoint URL'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of API calls'
- 'INVALID_REQUEST: Check the request parameters and formatting'
- '401 Unauthorized: Check client credentials.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Check your credentials and permissions.'
- '404 Not Found: Ensure the endpoint URL is correct.'
- '500 Internal Server Error: Try again later.'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of API calls.'
- '401 Unauthorized: Check your OAuth2 token.'
- '403 Forbidden: Check user permissions for accessing the resource'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Recheck OAuth token.'
- '404 Not Found: Ensure the endpoint exists.'
- '401 Unauthorized: Check OAuth scopes or token expiration'
- 'INVALID_REQUEST: Check the request parameters.'
- 'AUTHENTICATION_FAILED: Verify client credentials.'
- 'RATE_LIMIT_EXCEEDED: Too many requests in a short time.'
- '401 Unauthorized: Check OAuth token.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Check your authorization credentials.'
- '404 Not Found: Verify the endpoint path.'
- skip_external_tax_calculation (boolean) is optional for payments create calls and
  defaults to 'false'.
- '429 Too Many Requests: Reduce the frequency of requests.'
- '401 Unauthorized: Check your credentials.'
- 'Database health check failed with error: Error while connecting to database'
- 'INVALID_API_KEY: Check if the API key is correct'
- 'RATE_LIMIT_EXCEEDED: Reduce request frequency'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Check token validity.'
- '403 Forbidden: Insufficient permissions.'
- '401 Unauthorized: Check OAuth token validity'
- '401 Unauthorized: Check authentication credentials.'
- '401 Unauthorized: Verify OAuth token'
- '429 Too Many Requests: Rate limit exceeded'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api-reference.hyperswitch.io
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
