resources:
- name: Electricity
  endpoint:
    path: /api/electricity
    method: GET
    data_selector: records
- name: Fried
  endpoint:
    path: /api/fried
    method: GET
    data_selector: records
- name: Electricity
  endpoint:
    path: /datasets/Electricity
    method: GET
    data_selector: records
    params: {}
- name: ElectricityTiny
  endpoint:
    path: /datasets/ElectricityTiny
    method: GET
    data_selector: records
    params: {}
- name: Electricity
  endpoint:
    path: /datasets/Electricity
    method: GET
    data_selector: records
- name: ElectricityTiny
  endpoint:
    path: /datasets/ElectricityTiny
    method: GET
    data_selector: records
- name: learners
  endpoint:
    path: /learners
    method: POST
    data_selector: results
    params: {}
- name: Electricity
  endpoint:
    path: /datasets/Electricity
    method: GET
    data_selector: records
- name: Fried
  endpoint:
    path: /datasets/Fried
    method: GET
    data_selector: records
- name: Electricity
  endpoint:
    path: /datasets/Electricity
    method: GET
    data_selector: records
    params: {}
- name: ElectricityTiny
  endpoint:
    path: /datasets/ElectricityTiny
    method: GET
    data_selector: records
    params: {}
- name: prequential_evaluation
  endpoint:
    params:
      window_size: 5000
      store_predictions: true
      store_y: true
- name: plot_predictions_vs_ground_truth
  endpoint:
    params:
      plot_interval: null
- name: Electricity
  endpoint:
    path: /datasets/Electricity
    method: GET
    data_selector: records
    params: {}
- name: Fried
  endpoint:
    path: /datasets/Fried
    method: GET
    data_selector: records
    params: {}
- name: Electricity
  endpoint:
    path: /datasets/electricity
    method: GET
    data_selector: records
- name: Fried
  endpoint:
    path: /datasets/fried
    method: GET
    data_selector: records
- name: Electricity
  endpoint:
    path: /datasets/Electricity
    method: GET
    data_selector: records
- name: Fried
  endpoint:
    path: /datasets/Fried
    method: GET
    data_selector: records
- name: ElectricityTiny
  endpoint:
    path: /datasets/electricity_tiny
    method: GET
    data_selector: records
    params: {}
- name: FashionMNIST
  endpoint:
    path: /datasets/fashion_mnist
    method: GET
    data_selector: records
    params: {}
- name: ElectricityTiny
  endpoint:
    path: /datasets/electricity_tiny
    method: GET
    data_selector: records
    params: {}
- name: ElectricityTiny
  endpoint:
    path: /datasets/ElectricityTiny
    method: GET
    data_selector: records
- name: FashionMNIST
  endpoint:
    path: /datasets/FashionMNIST
    method: GET
    data_selector: records
- name: ElectricityTiny
  endpoint:
    path: /datasets/electricity_tiny
    method: GET
    data_selector: records
    params: {}
- name: FashionMNIST
  endpoint:
    path: /datasets/fashion_mnist
    method: GET
    data_selector: records
    params: {}
- name: ElectricityTiny
  endpoint:
    path: /electricity_tiny
    method: GET
    data_selector: records
- name: ElectricityTiny
  endpoint:
    path: /ElectricityTiny
    method: GET
    data_selector: instances
    params: {}
- name: FashionMNIST
  endpoint:
    path: /FashionMNIST
    method: GET
    data_selector: instances
    params: {}
- name: ElectricityTiny
  endpoint:
    path: /electricity/tiny
    method: GET
    data_selector: records
- name: FashionMNIST
  endpoint:
    path: /fashion/mnist
    method: GET
    data_selector: records
- name: DriftStream
  endpoint:
    path: /api/driftstream
    method: POST
    data_selector: stream
- name: CustomOnlineBagging
  endpoint:
    path: /capymoa/classifier/CustomOnlineBagging
    method: POST
    data_selector: results
    params: {}
- name: HoeffdingTree
  endpoint:
    path: /capymoa/classifier/HoeffdingTree
    method: POST
    data_selector: results
    params: {}
- name: SGDClassifier
  endpoint:
    path: /capymoa/classifier/SGDClassifier
    method: POST
    data_selector: results
    params: {}
- name: Electricity
  endpoint:
    path: /capymoa/datasets/Electricity
    method: GET
    data_selector: records
    params: {}
- name: RBFm_100k
  endpoint:
    path: /capymoa/datasets/RBFm_100k
    method: GET
    data_selector: records
    params: {}
- name: Electricity
  endpoint:
    path: /datasets/electricity
    method: GET
    data_selector: records
    params: {}
- name: CovtypeTiny
  endpoint:
    path: /datasets/covtype_tiny
    method: GET
    data_selector: records
    params: {}
- name: NeuralNetwork
  endpoint:
    path: /services/data/vXX.X/sobjects/NeuralNetwork
    method: GET
    data_selector: records
    params: {}
- name: PyTorchClassifier
  endpoint:
    path: /services/data/vXX.X/sobjects/PyTorchClassifier
    method: GET
    data_selector: records
    params: {}
- name: Electricity
  endpoint:
    path: /electricity
    method: GET
    data_selector: records
- name: RBFm_100k
  endpoint:
    path: /rbfm_100k
    method: GET
    data_selector: records
- name: TransformerPipelineElement
  endpoint:
    path: /api/pipeline/transformer
    method: POST
    data_selector: transformer
    params: {}
- name: ClassifierPipelineElement
  endpoint:
    path: /api/pipeline/classifier
    method: POST
    data_selector: classifier
    params: {}
- name: RegressorPipelineElement
  endpoint:
    path: /api/pipeline/regressor
    method: POST
    data_selector: regressor
    params: {}
- name: DriftDetectorPipelineElement
  endpoint:
    path: /api/pipeline/drift_detector
    method: POST
    data_selector: drift_detector
    params: {}
- name: NeuralNetwork
  endpoint:
    path: /services/data/vXX.X/sobjects/NeuralNetwork
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: PyTorchClassifier
  endpoint:
    path: /services/data/vXX.X/sobjects/PyTorchClassifier
    method: GET
    data_selector: records
    params: {}
- name: Pipelines and Transformers
  endpoint:
    path: /pipelines-and-transformers
    method: GET
    data_selector: records
- name: pipeline
  endpoint:
    path: /pipeline
    method: GET
    data_selector: records
- name: Fried
  endpoint:
    path: /datasets/Fried
    method: GET
    data_selector: schema
    params: {}
- name: SOKNL
  endpoint:
    path: /regressor/SOKNL
    method: GET
    data_selector: schema
    params: {}
- name: MVE
  endpoint:
    path: /prediction_interval/MVE
    method: GET
    data_selector: schema
    params: {}
- name: AdaPI
  endpoint:
    path: /prediction_interval/AdaPI
    method: GET
    data_selector: schema
    params: {}
- name: PredictionIntervalEvaluator
  endpoint:
    path: /evaluation/PredictionIntervalEvaluator
    method: GET
    data_selector: schema
    params: {}
- name: PredictionIntervalWindowedEvaluator
  endpoint:
    path: /evaluation/PredictionIntervalWindowedEvaluator
    method: GET
    data_selector: schema
    params: {}
- name: prediction_intervals
  endpoint:
    path: /capymoa/prediction_intervals
    method: GET
    data_selector: results
    params: {}
- name: fried_stream
  endpoint:
    path: /datasets/Fried
    method: GET
    data_selector: records
    params: {}
- name: mve_evaluator
  endpoint:
    path: /evaluation/MVE
    method: GET
    data_selector: records
    params: {}
- name: adapi_evaluator
  endpoint:
    path: /evaluation/AdaPI
    method: GET
    data_selector: records
    params: {}
- name: Electricity
  endpoint:
    path: /datasets/electricity
    method: GET
    data_selector: records
- name: prediction_intervals
  endpoint:
    path: /prediction_intervals
    method: GET
    data_selector: results
    params: {}
- name: ReservoirSampler
  endpoint:
    path: /reservoir/sampler
    method: POST
    data_selector: records
- name: ExperienceReplay
  endpoint:
    path: /experience/replay
    method: POST
    data_selector: records
- name: SimpleMLP
  endpoint:
    path: /simple/mlp
    method: POST
    data_selector: records
- name: Electricity
  endpoint:
    path: /datasets/electricity
    method: GET
    data_selector: records
- name: AdaptiveRandomForest
  endpoint:
    path: /api/adaptive_random_forest
    method: GET
    data_selector: records
- name: LeveragingBagging
  endpoint:
    path: /api/leveraging_bagging
    method: GET
    data_selector: records
- name: OzaBagAdwin
  endpoint:
    path: /api/oza_bag_adwin
    method: GET
    data_selector: records
- name: OnlineBaggingSequential
  endpoint:
    path: /api/online_bagging/sequential
    method: POST
    data_selector: results
    params:
      ensembleSize: 10
- name: OnlineBaggingParallel
  endpoint:
    path: /api/online_bagging/parallel
    method: POST
    data_selector: results
    params:
      ensembleSize: 10
      numCores: 1
      batchSize: 1
- name: Clustream_with_kmeans
  endpoint:
    path: /api/clustream_with_kmeans
    method: GET
    data_selector: records
    params: {}
- name: Denstream_with_dbscan
  endpoint:
    path: /api/denstream_with_dbscan
    method: GET
    data_selector: records
    params: {}
- name: Clustream
  endpoint:
    path: /api/clustream
    method: GET
    data_selector: records
    params: {}
- name: ClusTree
  endpoint:
    path: /api/clustree
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: HalfSpaceTrees
  endpoint:
    path: api/modules/capymoa/anomaly/HalfSpaceTrees.html
    method: GET
- name: HDDMAverage
  endpoint:
    path: api/modules/capymoa/drift/detectors/HDDMAverage.html
    method: GET
- name: HDDMWeighted
  endpoint:
    path: api/modules/capymoa/drift/detectors/HDDMWeighted.html
    method: GET
- name: HoeffdingAdaptiveTree
  endpoint:
    path: api/modules/capymoa/classifier/HoeffdingAdaptiveTree.html
    method: GET
- name: HoeffdingTree
  endpoint:
    path: api/modules/capymoa/classifier/HoeffdingTree.html
    method: GET
- name: Hyper100k
  endpoint:
    path: api/modules/capymoa/datasets/Hyper100k.html
    method: GET
- name: IndexedCycle
  endpoint:
    path: api/modules/capymoa/stream/drift/IndexedCycle.html
    method: GET
- name: InfoGainSplitCriterion
  endpoint:
    path: api/modules/capymoa/splitcriteria/InfoGainSplitCriterion.html
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: SKClassifier
  endpoint:
    path: /api/skclassifier
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: BatchRegressor
  endpoint:
    path: /capymoa/base/BatchRegressor
    method: GET
- name: SKRegressor
  endpoint:
    path: /capymoa/base/SKRegressor
    method: GET
- name: MOAAnomalyDetector
  endpoint:
    path: /capymoa/base/MOAAnomalyDetector
    method: GET
    data_selector: instance
    params: {}
- name: MOAClassifier
  endpoint:
    path: /capymoa/base/MOAClassifier
    method: GET
    data_selector: records
- name: Instance
  endpoint:
    path: /instance
    method: GET
    data_selector: records
- name: LabeledInstance
  endpoint:
    path: /instance/LabeledInstance
    method: GET
- name: BatchRegressor
  endpoint:
    path: /base/BatchRegressor
    method: GET
    data_selector: records
- name: RegressionInstance
  endpoint:
    path: /capymoa/instance/RegressionInstance
    method: GET
    data_selector: instances
    params: {}
- name: batch_predict
  endpoint:
    path: /batch_predict
    method: POST
    data_selector: predictions
- name: batch_train
  endpoint:
    path: /batch_train
    method: POST
    data_selector: training_result
- name: SKRegressor
  endpoint:
    path: /capymoa/base/SKRegressor
    method: GET
- name: ElectricityTiny
  endpoint:
    path: /datasets/ElectricityTiny
    method: GET
    data_selector: records
- name: Bike
  endpoint:
    path: /datasets/Bike
    method: GET
    data_selector: records
- name: CovtFD
  endpoint:
    path: /datasets/CovtFD
    method: GET
    data_selector: records
- name: Covtype
  endpoint:
    path: /datasets/Covtype
    method: GET
    data_selector: records
- name: CovtypeNorm
  endpoint:
    path: /datasets/CovtypeNorm
    method: GET
    data_selector: records
- name: CovtypeTiny
  endpoint:
    path: /datasets/CovtypeTiny
    method: GET
    data_selector: records
- name: Electricity
  endpoint:
    path: /datasets/Electricity
    method: GET
    data_selector: records
- name: Fried
  endpoint:
    path: /datasets/Fried
    method: GET
    data_selector: records
- name: FriedTiny
  endpoint:
    path: /datasets/FriedTiny
    method: GET
    data_selector: records
- name: Hyper100k
  endpoint:
    path: /datasets/Hyper100k
    method: GET
    data_selector: records
- name: RBFm_100k
  endpoint:
    path: /datasets/RBFm_100k
    method: GET
    data_selector: records
- name: RTG_2abrupt
  endpoint:
    path: /datasets/RTG_2abrupt
    method: GET
    data_selector: records
- name: Sensor
  endpoint:
    path: /datasets/Sensor
    method: GET
    data_selector: records
- name: Instance
  endpoint:
    path: /instance
    method: GET
    data_selector: records
    params: {}
- name: LabeledInstance
  endpoint:
    path: /labeled_instance
    method: GET
    data_selector: records
    params: {}
- name: RegressionInstance
  endpoint:
    path: /regression_instance
    method: GET
    data_selector: records
    params: {}
- name: bike
  endpoint:
    path: /datasets/bike
    method: GET
    data_selector: instances
    params: {}
- name: CovtFD
  endpoint:
    path: /datasets/CovtFD
    method: GET
    data_selector: instances
    params: {}
- name: LabeledInstance
  endpoint:
    path: /instance/labeled
    method: GET
    data_selector: records
- name: Covtype
  endpoint:
    path: /covtype
    method: GET
- name: RegressionInstance
  endpoint:
    path: /capymoa/instance/RegressionInstance
    method: GET
    data_selector: instance
    params: {}
- name: CovtypeNorm
  endpoint:
    path: /datasets/CovtypeNorm
    method: GET
    data_selector: instances
    params: {}
- name: CovtypeTiny
  endpoint:
    path: /datasets/CovtypeTiny
    method: GET
- name: Electricity
  endpoint:
    path: /datasets/Electricity
    method: GET
    data_selector: instances
- name: Bike
  endpoint:
    path: /datasets/Bike
    method: GET
    data_selector: data
- name: CovtFD
  endpoint:
    path: /datasets/CovtFD
    method: GET
    data_selector: data
- name: Covtype
  endpoint:
    path: /datasets/Covtype
    method: GET
    data_selector: data
- name: CovtypeNorm
  endpoint:
    path: /datasets/CovtypeNorm
    method: GET
    data_selector: data
- name: CovtypeTiny
  endpoint:
    path: /datasets/CovtypeTiny
    method: GET
    data_selector: data
- name: Electricity
  endpoint:
    path: /datasets/Electricity
    method: GET
    data_selector: data
- name: ElectricityTiny
  endpoint:
    path: /datasets/ElectricityTiny
    method: GET
    data_selector: data
- name: Fried
  endpoint:
    path: /datasets/Fried
    method: GET
    data_selector: data
- name: FriedTiny
  endpoint:
    path: /datasets/FriedTiny
    method: GET
    data_selector: data
- name: Hyper100k
  endpoint:
    path: /datasets/Hyper100k
    method: GET
    data_selector: data
- name: RBFm_100k
  endpoint:
    path: /datasets/RBFm_100k
    method: GET
    data_selector: data
- name: RTG_2abrupt
  endpoint:
    path: /datasets/RTG_2abrupt
    method: GET
    data_selector: data
- name: Sensor
  endpoint:
    path: /datasets/Sensor
    method: GET
    data_selector: data
- name: ElectricityTiny
  endpoint:
    path: /datasets/ElectricityTiny
    method: GET
    data_selector: instances
- name: get_download_dir
  endpoint:
    path: /capymoa/datasets/get_download_dir
    method: GET
    data_selector: download_dir
    params: {}
- name: download_unpacked
  endpoint:
    path: /capymoa/datasets/download_unpacked
    method: GET
    data_selector: unpacked_directory
    params: {}
- name: Fried
  endpoint:
    path: /datasets/Fried
    method: GET
    data_selector: instances
    params: {}
- name: Bike
  endpoint:
    path: /datasets/Bike
    method: GET
    data_selector: instances
    params: {}
- name: FriedTiny
  endpoint:
    path: /datasets/FriedTiny
    method: GET
    data_selector: instances
- name: CovtFD
  endpoint:
    path: /datasets/CovtFD
    method: GET
    data_selector: instances
    params: {}
- name: Hyper100k
  endpoint:
    path: /datasets/Hyper100k
    method: GET
    data_selector: instances
    params: {}
- name: Covtype
  endpoint:
    path: /covtype
    method: GET
- name: RBFm_100k
  endpoint:
    path: /datasets/RBFm_100k
    method: GET
    data_selector: instances
- name: CovtypeNorm
  endpoint:
    path: /datasets/CovtypeNorm
    method: GET
    data_selector: instances
- name: CovtypeTiny
  endpoint:
    path: /capymoa/datasets/CovtypeTiny
    method: GET
    data_selector: instances
    params: {}
- name: RTG_2abrupt
  endpoint:
    path: /datasets/RTG_2abrupt
    method: GET
    data_selector: instances
    params: {}
- name: Electricity
  endpoint:
    path: /datasets/Electricity
    method: GET
    data_selector: instances
    params: {}
- name: Sensor
  endpoint:
    path: /datasets/Sensor
    method: GET
    data_selector: instances
- name: stream
  endpoint:
    path: /stream
    method: GET
    data_selector: data
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: data
    params: {}
- name: fried
  endpoint:
    path: /datasets/Fried
    method: GET
    data_selector: instances
    params: {}
- name: drift
  endpoint:
    path: /stream/drift
    method: GET
    data_selector: drift_classes
    params: {}
- name: FriedTiny
  endpoint:
    path: /datasets/FriedTiny
    method: GET
    data_selector: instances
    params: {}
- name: Hyper100k
  endpoint:
    path: /datasets/hyper100k
    method: GET
    data_selector: instances
    params: {}
- name: Drift
  endpoint:
    path: /drift
    method: GET
    data_selector: records
- name: RBFm_100k
  endpoint:
    path: /capymoa/datasets/RBFm_100k
    method: GET
    data_selector: records
    params: {}
- name: DriftStream
  endpoint:
    path: capymoa.stream.drift.DriftStream
    method: GET
    data_selector: null
    params: {}
- name: GradualDrift
  endpoint:
    path: /capymoa/stream/drift/GradualDrift
    method: GET
    data_selector: records
    params: {}
- name: sensor
  endpoint:
    path: /datasets/Sensor
    method: GET
    data_selector: instances
- name: Stream
  endpoint:
    path: /stream
    method: GET
    data_selector: instance
- name: Schema
  endpoint:
    path: /schema
    method: GET
    data_selector: instance
- name: ARFFStream
  endpoint:
    path: /arffstream
    method: GET
    data_selector: instance
- name: TorchClassifyStream
  endpoint:
    path: /torchclassifystream
    method: GET
    data_selector: instance
- name: CSVStream
  endpoint:
    path: /csvstream
    method: GET
    data_selector: instance
- name: NumpyStream
  endpoint:
    path: /numpystream
    method: GET
    data_selector: instance
- name: MOAStream
  endpoint:
    path: /moastream
    method: GET
    data_selector: instance
- name: ConcatStream
  endpoint:
    path: /concatstream
    method: GET
    data_selector: instance
- name: AgrawalGenerator
  endpoint:
    path: /AgrawalGenerator
    method: GET
    data_selector: records
- name: HyperPlaneClassification
  endpoint:
    path: /HyperPlaneClassification
    method: GET
    data_selector: records
- name: HyperPlaneRegression
  endpoint:
    path: /HyperPlaneRegression
    method: GET
    data_selector: records
- name: LEDGenerator
  endpoint:
    path: /LEDGenerator
    method: GET
    data_selector: records
- name: RandomRBFGenerator
  endpoint:
    path: /RandomRBFGenerator
    method: GET
    data_selector: records
- name: RandomTreeGenerator
  endpoint:
    path: /RandomTreeGenerator
    method: GET
    data_selector: records
- name: SEA
  endpoint:
    path: /SEA
    method: GET
    data_selector: records
- name: STAGGERGenerator
  endpoint:
    path: /STAGGERGenerator
    method: GET
    data_selector: records
- name: SineGenerator
  endpoint:
    path: /SineGenerator
    method: GET
    data_selector: records
- name: WaveformGenerator
  endpoint:
    path: /WaveformGenerator
    method: GET
    data_selector: records
- name: Drift
  endpoint:
    path: /drift
    method: GET
    data_selector: records
- name: AbruptDrift
  endpoint:
    path: /drift/AbruptDrift
    method: GET
    data_selector: records
- name: GradualDrift
  endpoint:
    path: /drift/GradualDrift
    method: GET
    data_selector: records
- name: IndexedCycle
  endpoint:
    path: /drift/IndexedCycle
    method: GET
    data_selector: records
- name: RecurrentConceptDriftStream
  endpoint:
    path: /drift/RecurrentConceptDriftStream
    method: GET
    data_selector: records
- name: AbruptDrift
  endpoint:
    path: /capymoa/stream/drift/AbruptDrift
    method: GET
    data_selector: records
    params: {}
- name: HyperPlaneClassification
  endpoint:
    path: /stream/generator/HyperPlaneClassification
    method: GET
    data_selector: instances
- name: HyperPlaneRegression
  endpoint:
    path: /capymoa/stream/generator/HyperPlaneRegression
    method: GET
    data_selector: records
- name: LEDGenerator
  endpoint:
    path: /stream/generator/LEDGenerator
    method: GET
    data_selector: instances
- name: RecurrentConceptDriftStream
  endpoint:
    path: /stream/drift/RecurrentConceptDriftStream
    method: GET
    data_selector: records
    params: {}
- name: LEDGeneratorDrift
  endpoint:
    path: /stream/generator/LEDGeneratorDrift
    method: GET
    data_selector: instances
- name: RandomRBFGenerator
  endpoint:
    path: /randomrbfgenerator
    method: GET
    data_selector: instances
- name: RandomRBFGeneratorDrift
  endpoint:
    path: /capymoa/stream/generator/RandomRBFGeneratorDrift
    method: GET
- name: RandomTreeGenerator
  endpoint:
    path: /capymoa/stream/generator/RandomTreeGenerator
    method: GET
- name: AgrawalGenerator
  endpoint:
    path: /generator/AgrawalGenerator
    method: GET
    data_selector: records
- name: HyperPlaneClassification
  endpoint:
    path: /generator/HyperPlaneClassification
    method: GET
    data_selector: records
- name: HyperPlaneRegression
  endpoint:
    path: /generator/HyperPlaneRegression
    method: GET
    data_selector: records
- name: LEDGenerator
  endpoint:
    path: /generator/LEDGenerator
    method: GET
    data_selector: records
- name: RandomRBFGenerator
  endpoint:
    path: /generator/RandomRBFGenerator
    method: GET
    data_selector: records
- name: RandomTreeGenerator
  endpoint:
    path: /generator/RandomTreeGenerator
    method: GET
    data_selector: records
- name: SEA
  endpoint:
    path: /generator/SEA
    method: GET
    data_selector: records
- name: STAGGERGenerator
  endpoint:
    path: /generator/STAGGERGenerator
    method: GET
    data_selector: records
- name: SineGenerator
  endpoint:
    path: /generator/SineGenerator
    method: GET
    data_selector: records
- name: WaveformGenerator
  endpoint:
    path: /generator/WaveformGenerator
    method: GET
    data_selector: records
- name: SEA
  endpoint:
    path: /capymoa/stream/generator/SEA
    method: GET
    data_selector: instances
    params: {}
- name: HyperPlaneRegression
  endpoint:
    path: /stream/generator/HyperPlaneRegression
    method: GET
- name: SineGenerator
  endpoint:
    path: /capymoa/stream/generator/SineGenerator
    method: GET
    data_selector: instances
    params: {}
- name: BasePipeline
  endpoint:
    path: /basepipeline
    method: GET
    data_selector: records
- name: SEA
  endpoint:
    path: /stream/generator/SEA
    method: GET
    data_selector: instances
- name: PipelineElement
  endpoint:
    path: /capymoa/stream/preprocessing/PipelineElement
    method: GET
- name: BasePipeline
  endpoint:
    path: /capymoa/stream/preprocessing/BasePipeline
    method: GET
- name: Transformer
  endpoint:
    path: /capymoa/stream/preprocessing/Transformer
    method: GET
- name: BaseDriftDetector
  endpoint:
    path: /capymoa/drift/base_detector/BaseDriftDetector
    method: GET
- name: Classifier
  endpoint:
    path: /capymoa/base/Classifier
    method: GET
- name: SineGenerator
  endpoint:
    path: /stream/generator/SineGenerator
    method: GET
    data_selector: instances
- name: WaveformGenerator
  endpoint:
    path: /capymoa/stream/generator/WaveformGenerator
    method: GET
- name: pass_forward
  endpoint:
    path: /pass_forward
    method: GET
    data_selector: instance
    params: {}
- name: pass_forward_predict
  endpoint:
    path: /pass_forward_predict
    method: GET
    data_selector: instance
    params: {}
- name: predict
  endpoint:
    path: /predict
    method: GET
    data_selector: instance
    params: {}
- name: predict_proba
  endpoint:
    path: /predict_proba
    method: GET
    data_selector: instance
    params: {}
- name: train
  endpoint:
    path: /train
    method: GET
    data_selector: instance
    params: {}
- name: ClassifierPipelineElement
  endpoint:
    path: /capymoa/stream/preprocessing/ClassifierPipelineElement
    method: GET
    data_selector: data
    params: {}
- name: DriftDetectorPipelineElement
  endpoint:
    path: /drift_detector_pipeline_element
    method: GET
- name: instance
  endpoint:
    path: /pass_forward_predict
    method: POST
    data_selector: Tuple[Instance, Any]
    params: {}
- name: RandomSearchClassifierPE
  endpoint:
    path: /capymoa/stream/preprocessing/RandomSearchClassifierPE
    method: GET
    data_selector: records
- name: classifier_pipeline
  endpoint:
    path: /capymoa/stream/preprocessing/ClassifierPipeline
    method: GET
- name: predict_proba
  endpoint:
    path: /predict_proba
    method: GET
    data_selector: probabilities
- name: train
  endpoint:
    path: /train
    method: POST
    data_selector: training_data
- name: RegressorPipeline
  endpoint:
    path: /capymoa/stream/preprocessing/RegressorPipeline
    method: GET
    data_selector: records
- name: instance
  endpoint:
    path: /pass_forward
    method: POST
    data_selector: instance
    params: {}
- name: instance_with_prediction
  endpoint:
    path: /pass_forward_predict
    method: POST
    data_selector: Tuple[Instance, Any]
    params: {}
- name: prediction
  endpoint:
    path: /predict
    method: POST
    data_selector: Optional[LabelIndex]
    params: {}
- name: probability_estimates
  endpoint:
    path: /predict_proba
    method: POST
    data_selector: ndarray[Any, dtype[float64]]
    params: {}
- name: training_instance
  endpoint:
    path: /train
    method: POST
    data_selector: None
    params: {}
- name: pass_forward
  endpoint:
    path: /pass_forward
    method: POST
    data_selector: Instance
    params: {}
- name: pass_forward_predict
  endpoint:
    path: /pass_forward_predict
    method: POST
    data_selector: Tuple[Instance, Any]
    params: {}
- name: predict
  endpoint:
    path: /predict
    method: POST
    data_selector: TargetValue
    params: {}
- name: train
  endpoint:
    path: /train
    method: POST
    data_selector: None
    params: {}
- name: RegressorPipelineElement
  endpoint:
    path: /capymoa/stream/preprocessing/RegressorPipelineElement
    method: GET
- name: DriftDetectorPipelineElement
  endpoint:
    path: /drift_detector_pipeline_element
    method: GET
    data_selector: records
- name: TransformerPipelineElement
  endpoint:
    path: /capymoa/stream/preprocessing/TransformerPipelineElement
    method: GET
- name: RandomSearchClassifier
  endpoint:
    path: /capymoa/stream/preprocessing/RandomSearchClassifierPE
    method: GET
    data_selector: records
- name: predict_proba
  endpoint:
    path: /predict_proba
    method: GET
    data_selector: array of probabilities
    params:
      instance: LabeledInstance
- name: train
  endpoint:
    path: /train
    method: POST
    data_selector: none
    params:
      instance: LabeledInstance
- name: RegressorPipeline
  endpoint:
    path: /capymoa/stream/preprocessing/RegressorPipeline
    method: GET
    data_selector: records
- name: pass_forward
  endpoint:
    path: /pass_forward
    method: POST
    data_selector: Instance
    params: {}
- name: pass_forward_predict
  endpoint:
    path: /pass_forward_predict
    method: POST
    data_selector: Tuple[Instance, Any]
    params: {}
- name: predict
  endpoint:
    path: /predict
    method: POST
    data_selector: float64
    params: {}
- name: train
  endpoint:
    path: /train
    method: POST
    data_selector: None
    params: {}
- name: get_label_values
  endpoint:
    path: get_label_values
    method: GET
- name: get_moa_header
  endpoint:
    path: get_moa_header
    method: GET
- name: get_nominal_attributes
  endpoint:
    path: get_nominal_attributes
    method: GET
- name: get_num_attributes
  endpoint:
    path: get_num_attributes
    method: GET
- name: get_num_classes
  endpoint:
    path: get_num_classes
    method: GET
- name: get_num_nominal_attributes
  endpoint:
    path: get_num_nominal_attributes
    method: GET
- name: get_num_numeric_attributes
  endpoint:
    path: get_num_numeric_attributes
    method: GET
- name: get_numeric_attributes
  endpoint:
    path: get_numeric_attributes
    method: GET
- name: get_value_for_index
  endpoint:
    path: get_value_for_index
    method: GET
- name: is_classification
  endpoint:
    path: is_classification
    method: GET
- name: is_regression
  endpoint:
    path: is_regression
    method: GET
- name: is_y_index_in_range
  endpoint:
    path: is_y_index_in_range
    method: GET
- name: dataset_name
  endpoint:
    path: dataset_name
    method: GET
- name: shape
  endpoint:
    path: shape
    method: GET
- name: RegressorPipelineElement
  endpoint:
    path: /capymoa/stream/preprocessing/RegressorPipelineElement
    method: GET
- name: ARFFStream
  endpoint:
    path: /ARFFStream
    method: GET
- name: TransformerPipelineElement
  endpoint:
    path: /capymoa/stream/preprocessing/TransformerPipelineElement
    method: GET
- name: PytorchDataset
  endpoint:
    path: /torch_classify_stream
    method: GET
    data_selector: instances
- name: Schema
  endpoint:
    path: /schema
    method: GET
    data_selector: attributes
- name: NumpyStream
  endpoint:
    path: /capymoa/stream/NumpyStream
    method: GET
    data_selector: LabeledInstance
    params: {}
- name: MOAStream
  endpoint:
    path: /moastream
    method: GET
- name: ConcatStream
  endpoint:
    path: /capymoa/stream/ConcatStream
    method: GET
- name: label_values
  endpoint:
    path: /get_label_values
    method: GET
    data_selector: records
- name: moa_header
  endpoint:
    path: /get_moa_header
    method: GET
    data_selector: records
- name: nominal_attributes
  endpoint:
    path: /get_nominal_attributes
    method: GET
    data_selector: records
- name: num_attributes
  endpoint:
    path: /get_num_attributes
    method: GET
    data_selector: records
- name: num_classes
  endpoint:
    path: /get_num_classes
    method: GET
    data_selector: records
- name: num_nominal_attributes
  endpoint:
    path: /get_num_nominal_attributes
    method: GET
    data_selector: records
- name: num_numeric_attributes
  endpoint:
    path: /get_num_numeric_attributes
    method: GET
    data_selector: records
- name: numeric_attributes
  endpoint:
    path: /get_numeric_attributes
    method: GET
    data_selector: records
- name: value_for_index
  endpoint:
    path: /get_value_for_index
    method: GET
    data_selector: records
- name: is_classification
  endpoint:
    path: /is_classification
    method: GET
    data_selector: records
- name: is_regression
  endpoint:
    path: /is_regression
    method: GET
    data_selector: records
- name: y_index_in_range
  endpoint:
    path: /is_y_index_in_range
    method: GET
    data_selector: records
- name: ARFFStream
  endpoint:
    path: /path/to/arff
    method: GET
    data_selector: instances
- name: PytorchDataset
  endpoint:
    path: /stream/TorchClassifyStream
    method: GET
    data_selector: LabeledInstance
    params: {}
- name: NumpyStream
  endpoint:
    path: /capymoa/stream/NumpyStream
    method: GET
    data_selector: LabeledInstance
- name: MOAStream
  endpoint:
    path: /moastream
    method: GET
- name: ConcatStream
  endpoint:
    path: /capymoa/stream/ConcatStream
    method: GET
    data_selector: records
- name: AdaptiveRandomForestClassifier
  endpoint:
    path: /capymoa/classifier/AdaptiveRandomForestClassifier
    method: GET
- name: CSMOTE
  endpoint:
    path: /capymoa/classifier/CSMOTE
    method: GET
- name: DynamicWeightedMajority
  endpoint:
    path: /capymoa/classifier/DynamicWeightedMajority
    method: GET
- name: EFDT
  endpoint:
    path: /capymoa/classifier/EFDT
    method: GET
- name: Finetune
  endpoint:
    path: /capymoa/classifier/Finetune
    method: GET
- name: HoeffdingAdaptiveTree
  endpoint:
    path: /capymoa/classifier/HoeffdingAdaptiveTree
    method: GET
- name: HoeffdingTree
  endpoint:
    path: /capymoa/classifier/HoeffdingTree
    method: GET
- name: KNN
  endpoint:
    path: /capymoa/classifier/KNN
    method: GET
- name: LeveragingBagging
  endpoint:
    path: /capymoa/classifier/LeveragingBagging
    method: GET
- name: MajorityClass
  endpoint:
    path: /capymoa/classifier/MajorityClass
    method: GET
- name: NaiveBayes
  endpoint:
    path: /capymoa/classifier/NaiveBayes
    method: GET
- name: NoChange
  endpoint:
    path: /capymoa/classifier/NoChange
    method: GET
- name: OnlineAdwinBagging
  endpoint:
    path: /capymoa/classifier/OnlineAdwinBagging
    method: GET
- name: OnlineBagging
  endpoint:
    path: /capymoa/classifier/OnlineBagging
    method: GET
- name: OnlineSmoothBoost
  endpoint:
    path: /capymoa/classifier/OnlineSmoothBoost
    method: GET
- name: OzaBoost
  endpoint:
    path: /capymoa/classifier/OzaBoost
    method: GET
- name: PassiveAggressiveClassifier
  endpoint:
    path: /capymoa/classifier/PassiveAggressiveClassifier
    method: GET
- name: SAMkNN
  endpoint:
    path: /capymoa/classifier/SAMkNN
    method: GET
- name: SGDClassifier
  endpoint:
    path: /capymoa/classifier/SGDClassifier
    method: GET
- name: ShrubsClassifier
  endpoint:
    path: /capymoa/classifier/ShrubsClassifier
    method: GET
- name: StreamingGradientBoostedTrees
  endpoint:
    path: /capymoa/classifier/StreamingGradientBoostedTrees
    method: GET
- name: StreamingRandomPatches
  endpoint:
    path: /capymoa/classifier/StreamingRandomPatches
    method: GET
- name: WeightedkNN
  endpoint:
    path: /capymoa/classifier/WeightedkNN
    method: GET
- name: AdaptiveRandomForestClassifier
  endpoint: {}
- name: CSMOTE
  endpoint: {}
- name: DynamicWeightedMajority
  endpoint: {}
- name: EFDT
  endpoint: {}
- name: Finetune
  endpoint: {}
- name: HoeffdingAdaptiveTree
  endpoint: {}
- name: HoeffdingTree
  endpoint: {}
- name: KNN
  endpoint: {}
- name: LeveragingBagging
  endpoint: {}
- name: MajorityClass
  endpoint: {}
- name: NaiveBayes
  endpoint: {}
- name: NoChange
  endpoint: {}
- name: OnlineAdwinBagging
  endpoint: {}
- name: OnlineBagging
  endpoint: {}
- name: OnlineSmoothBoost
  endpoint: {}
- name: OzaBoost
  endpoint: {}
- name: PassiveAggressiveClassifier
  endpoint: {}
- name: SAMkNN
  endpoint: {}
- name: SGDClassifier
  endpoint: {}
- name: ShrubsClassifier
  endpoint: {}
- name: StreamingGradientBoostedTrees
  endpoint: {}
- name: StreamingRandomPatches
  endpoint: {}
- name: WeightedkNN
  endpoint: {}
- name: AdaptiveRandomForestClassifier
  endpoint:
    path: /classifier/AdaptiveRandomForestClassifier
    method: GET
    data_selector: records
- name: AdaptiveRandomForestClassifier
  endpoint:
    path: /capymoa/classifier/AdaptiveRandomForestClassifier
    method: GET
    data_selector: records
    params: {}
- name: AdaptiveRandomForestClassifier
  endpoint:
    path: /adaptive/random/forest/classifier
    method: GET
    data_selector: instances
- name: instance
  endpoint:
    path: /predict
    method: POST
    data_selector: predictions
- name: CSMOTE
  endpoint:
    path: /capymoa/classifier/CSMOTE
    method: GET
    data_selector: schema
    params: {}
- name: Dynamic Weighted Majority
  endpoint:
    path: /capymoa/classifier/DynamicWeightedMajority
    method: GET
    data_selector: records
- name: DynamicWeightedMajority
  endpoint:
    path: /dynamicweightedmajority
    method: GET
    data_selector: records
- name: EFDT
  endpoint:
    path: /capymoa/classifier/EFDT
    method: GET
    data_selector: records
- name: ElectricityTiny
  endpoint:
    path: capymoa.datasets.ElectricityTiny
    method: GET
    data_selector: results
    params: {}
- name: batch_predict_proba
  endpoint:
    path: batch_predict_proba
    method: POST
    data_selector: predicted probabilities
- name: batch_train
  endpoint:
    path: batch_train
    method: POST
    data_selector: none
- name: predict
  endpoint:
    path: predict
    method: POST
    data_selector: predicted label
- name: predict_proba
  endpoint:
    path: predict_proba
    method: POST
    data_selector: predicted probabilities
- name: train
  endpoint:
    path: train
    method: POST
    data_selector: none
- name: HoeffdingAdaptiveTree
  endpoint:
    path: /capymoa/classifier/HoeffdingAdaptiveTree
    method: GET
    data_selector: records
    params: {}
- name: batch_predict_proba
  endpoint:
    path: /batch_predict_proba
    method: POST
    data_selector: predicted_probabilities
- name: batch_train
  endpoint:
    path: /batch_train
    method: POST
    data_selector: training_result
- name: predict
  endpoint:
    path: /predict
    method: POST
    data_selector: predicted_label
- name: predict_proba
  endpoint:
    path: /predict_proba
    method: POST
    data_selector: predicted_probabilities
- name: train
  endpoint:
    path: /train
    method: POST
    data_selector: training_result
- name: HoeffdingTree
  endpoint:
    path: /capymoa/classifier/HoeffdingTree
    method: GET
- name: HoeffdingAdaptiveTree
  endpoint:
    path: /capymoa/classifier/HoeffdingAdaptiveTree
    method: GET
    data_selector: records
    params: {}
- name: KNN
  endpoint:
    path: /capymoa/classifier/KNN
    method: GET
    data_selector: records
    params: {}
- name: HoeffdingTree
  endpoint:
    path: /capymoa/classifier/HoeffdingTree
    method: GET
    data_selector: records
- name: LeveragingBagging
  endpoint:
    path: /capymoa/classifier/LeveragingBagging
    method: GET
    data_selector: records
    params: {}
- name: KNN
  endpoint:
    path: /capymoa/classifier/KNN
    method: GET
- name: ElectricityTiny
  endpoint:
    path: /datasets/ElectricityTiny
    method: GET
    data_selector: stream
    params: {}
- name: MajorityClass
  endpoint:
    path: /majorityclass
    method: GET
    data_selector: records
    params: {}
- name: NaiveBayes
  endpoint:
    path: /capymoa/classifier/NaiveBayes
    method: GET
    data_selector: results
    params: {}
- name: NaiveBayes
  endpoint:
    path: /capymoa/classifier/NaiveBayes
    method: GET
    data_selector: class
- name: OnlineAdwinBagging
  endpoint:
    path: /classifier/OnlineAdwinBagging
    method: GET
    data_selector: records
- name: OnlineBagging
  endpoint:
    path: /capymoa/classifier/OnlineBagging
    method: GET
- name: SGDClassifier
  endpoint:
    path: /classifier/SGDClassifier
    method: GET
    data_selector: schema
    params: {}
- name: ElectricityTiny
  endpoint:
    path: /datasets/ElectricityTiny
    method: GET
    data_selector: records
- name: ShrubsClassifier
  endpoint:
    path: /api/shrubs_classifier
    method: GET
- name: PassiveAggressiveClassifier
  endpoint:
    path: /capymoa/classifier/PassiveAggressiveClassifier
    method: GET
    data_selector: records
- name: StreamingGradientBoostedTrees
  endpoint:
    path: /capymoa/classifier/StreamingGradientBoostedTrees
    method: GET
    data_selector: records
- name: predict_proba
  endpoint:
    path: /predict_proba
    method: GET
    data_selector: probabilities
- name: train
  endpoint:
    path: /train
    method: POST
    data_selector: training_result
- name: SGDClassifier
  endpoint:
    path: /capymoa/classifier/SGDClassifier
    method: GET
    data_selector: schema
    params: {}
- name: ShrubsClassifier
  endpoint:
    path: /capymoa/classifier/ShrubsClassifier
    method: GET
- name: random_seed
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: schema
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: StreamingGradientBoostedTrees
  endpoint:
    path: /capymoa/classifier/StreamingGradientBoostedTrees
    method: GET
    data_selector: records
- name: WeightedkNN
  endpoint:
    path: /api/weightedknn
    method: GET
    data_selector: results
    params: {}
- name: regressor
  endpoint:
    path: /regressor
    method: GET
- name: predict
  endpoint:
    path: /predict
    method: POST
    data_selector: predicted_label
    params:
      instance: input_instance
- name: predict_proba
  endpoint:
    path: /predict_proba
    method: POST
    data_selector: probabilities
    params:
      instance: input_instance
- name: train
  endpoint:
    path: /train
    method: POST
    data_selector: training_result
    params:
      instance: labeled_instance
- name: Fried
  endpoint:
    path: /datasets/Fried
    method: GET
    data_selector: records
    params: {}
- name: schema
  endpoint:
    path: /stream/schema
    method: GET
- name: random_seed
  endpoint:
    path: /classifier/random_seed
    method: GET
- name: WeightedkNN
  endpoint:
    path: /capymoa/classifier/WeightedkNN
    method: GET
    data_selector: records
- name: KNNRegressor
  endpoint:
    path: /capymoa/regressor/KNNRegressor
    method: GET
    data_selector: records
- name: regressor
  endpoint:
    path: /regressor
    method: GET
    data_selector: records
- name: FIMTDD
  endpoint:
    path: /fimtdd
    method: GET
    data_selector: records
    params: {}
- name: SOKNLBT
  endpoint:
    path: /capymoa/regressor/SOKNLBT
    method: GET
    data_selector: records
- name: ARFFIMTDD
  endpoint:
    path: /capymoa/regressor/ARFFIMTDD
    method: GET
    data_selector: records
    params: {}
- name: SOKNL
  endpoint:
    path: /capymoa/regressor/SOKNL
    method: GET
    data_selector: records
- name: AdaptiveRandomForestRegressor
  endpoint:
    path: /capymoa/regressor/AdaptiveRandomForestRegressor
    method: GET
    data_selector: records
- name: ORTO
  endpoint:
    path: /capymoa/regressor/ORTO
    method: GET
    data_selector: records
- name: PassiveAggressiveRegressor
  endpoint:
    path: /capymoa/regressor/PassiveAggressiveRegressor
    method: GET
    data_selector: records
- name: KNNRegressor
  endpoint:
    path: /capymoa/regressor/KNNRegressor
    method: GET
    data_selector: records
    params: {}
- name: SGDRegressor
  endpoint:
    path: /capymoa/regressor/SGDRegressor
    method: GET
    data_selector: records
- name: ShrubsRegressor
  endpoint:
    path: /capymoa/regressor/ShrubsRegressor
    method: GET
    data_selector: records
- name: FIMTDD
  endpoint:
    path: /capymoa/regressor/FIMTDD
    method: GET
    data_selector: records
    params: {}
- name: StreamingGradientBoostedRegression
  endpoint:
    path: /regressor/StreamingGradientBoostedRegression
    method: GET
    data_selector: results
    params: {}
- name: ARFFIMTDD
  endpoint:
    path: /capymoa/regressor/ARFFIMTDD
    method: GET
    data_selector: records
    params: {}
- name: FadingTargetMean
  endpoint:
    path: /capymoa/regressor/FadingTargetMean
    method: GET
    data_selector: ''
    params: {}
- name: anomaly_detector
  endpoint:
    path: /anomaly
    method: GET
    data_selector: classes
    params: {}
- name: PassiveAggressiveRegressor
  endpoint:
    path: /passive_aggressive_regressor
    method: GET
    data_selector: schema
    params: {}
- name: HalfSpaceTrees
  endpoint:
    path: /capymoa/anomaly/HalfSpaceTrees
    method: GET
    data_selector: records
- name: SGDRegressor
  endpoint:
    path: /capymoa/regressor/SGDRegressor
    method: GET
- name: OnlineIsolationForest
  endpoint:
    path: /capymoa/anomaly/OnlineIsolationForest
    method: GET
    data_selector: records
- name: StreamingGradientBoostedRegression
  endpoint:
    path: /capymoa/regressor/StreamingGradientBoostedRegression
    method: GET
    data_selector: records
- name: Autoencoder
  endpoint:
    path: /capymoa/anomaly/Autoencoder
    method: GET
    data_selector: instance
    params: {}
- name: anomaly_detector
  endpoint:
    path: /anomaly
    method: GET
    data_selector: records
- name: HalfSpaceTrees
  endpoint:
    path: /capymoa/anomaly/HalfSpaceTrees
    method: GET
- name: ElectricityTiny
  endpoint:
    path: /datasets/ElectricityTiny
    method: GET
    data_selector: records
- name: OnlineIsolationForest
  endpoint:
    path: /capymoa/anomaly/OnlineIsolationForest
    method: GET
    data_selector: records
    params: {}
- name: Autoencoder
  endpoint:
    path: /capymoa/anomaly/Autoencoder
    method: GET
- name: classifier
  endpoint:
    path: /classifier
    method: GET
    data_selector: classes
    params: {}
- name: OSNN
  endpoint:
    path: /capymoa/ssl/classifier/OSNN
    method: GET
- name: StreamRHF
  endpoint:
    path: /capymoa/anomaly/StreamRHF
    method: GET
    data_selector: instances
- name: OCLMetrics
  endpoint:
    path: /capymoa/ocl/evaluation/OCLMetrics
    method: GET
    data_selector: metrics
    params: {}
- name: StreamingIsolationForest
  endpoint:
    path: /capymoa/anomaly/StreamingIsolationForest
    method: GET
    data_selector: records
    params:
      window_size: 256
      n_trees: 100
- name: ElectricityTiny
  endpoint:
    path: /datasets/ElectricityTiny
    method: GET
    data_selector: instances
    params: {}
- name: SplitMNIST
  endpoint:
    path: /datasets/SplitMNIST
    method: GET
    data_selector: tasks
- name: SplitCIFAR10
  endpoint:
    path: /datasets/SplitCIFAR10
    method: GET
    data_selector: tasks
- name: SplitCIFAR100
  endpoint:
    path: /datasets/SplitCIFAR100
    method: GET
    data_selector: tasks
- name: SplitFashionMNIST
  endpoint:
    path: /datasets/SplitFashionMNIST
    method: GET
    data_selector: tasks
- name: TinySplitMNIST
  endpoint:
    path: /datasets/TinySplitMNIST
    method: GET
    data_selector: tasks
- name: SplitCIFAR10
  endpoint:
    path: /capymoa/ocl/datasets/SplitCIFAR10
    method: GET
    data_selector: records
    params: {}
- name: TinySplitMNIST
  endpoint:
    path: /capymoa/ocl/datasets/TinySplitMNIST
    method: GET
    data_selector: records
- name: HoeffdingTree
  endpoint:
    path: /capymoa/classifier/HoeffdingTree
    method: GET
    data_selector: records
- name: train_loaders
  endpoint:
    path: /train_loaders
    method: GET
    data_selector: data
    params:
      batch_size: int
      shuffle: bool
- name: OCLMetrics
  endpoint:
    path: /capymoa/ocl/evaluation/OCLMetrics
    method: GET
    data_selector: metrics
    params: {}
- name: SplitCIFAR10
  endpoint:
    path: /datasets/SplitCIFAR10
    method: GET
- name: SplitCIFAR100
  endpoint:
    path: /datasets/SplitCIFAR100
    method: GET
- name: SplitCIFAR100ViT
  endpoint:
    path: /datasets/SplitCIFAR100ViT
    method: GET
- name: SplitCIFAR10ViT
  endpoint:
    path: /datasets/SplitCIFAR10ViT
    method: GET
- name: SplitFashionMNIST
  endpoint:
    path: /datasets/SplitFashionMNIST
    method: GET
- name: SplitMNIST
  endpoint:
    path: /datasets/SplitMNIST
    method: GET
- name: TinySplitMNIST
  endpoint:
    path: /datasets/TinySplitMNIST
    method: GET
- name: train_loaders
  endpoint:
    path: /train_loaders
    method: GET
    data_selector: data
    params:
      batch_size: int
      shuffle: bool
- name: default_task_count
  endpoint:
    path: /default_task_count
    method: GET
    data_selector: data
    params: {}
- name: default_test_transform
  endpoint:
    path: /default_test_transform
    method: GET
    data_selector: data
    params: {}
- name: default_train_transform
  endpoint:
    path: /default_train_transform
    method: GET
    data_selector: data
    params: {}
- name: mean
  endpoint:
    path: /mean
    method: GET
    data_selector: data
    params: {}
- name: num_classes
  endpoint:
    path: /num_classes
    method: GET
    data_selector: data
    params: {}
- name: schema
  endpoint:
    path: /schema
    method: GET
    data_selector: data
    params: {}
- name: shape
  endpoint:
    path: /shape
    method: GET
    data_selector: data
    params: {}
- name: std
  endpoint:
    path: /std
    method: GET
    data_selector: data
    params: {}
- name: stream
  endpoint:
    path: /stream
    method: GET
    data_selector: data
    params: {}
- name: task_schedule
  endpoint:
    path: /task_schedule
    method: GET
    data_selector: data
    params: {}
- name: SplitCIFAR100ViT
  endpoint:
    path: /datasets/SplitCIFAR100ViT
    method: GET
    data_selector: data
- name: SplitCIFAR10
  endpoint:
    path: /datasets/SplitCIFAR10
    method: GET
    data_selector: data
    params: {}
- name: default_task_count
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: num_classes
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: shape
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: SplitCIFAR10ViT
  endpoint:
    path: /capymoa/ocl/datasets/SplitCIFAR10ViT
    method: GET
- name: default_task_count
  endpoint:
    path: /default_task_count
    method: GET
    data_selector: '5'
- name: mean
  endpoint:
    path: /mean
    method: GET
    data_selector: '[0.491, 0.482, 0.447]'
- name: num_classes
  endpoint:
    path: /num_classes
    method: GET
    data_selector: '10'
- name: shape
  endpoint:
    path: /shape
    method: GET
    data_selector: '[3, 32, 32]'
- name: std
  endpoint:
    path: /std
    method: GET
    data_selector: '[0.247, 0.243, 0.262]'
- name: train_loaders
  endpoint:
    path: /train_loaders
    method: GET
    data_selector: data
    params:
      batch_size: int
- name: test_loaders
  endpoint:
    path: /test_loaders
    method: GET
    data_selector: data
    params:
      batch_size: int
- name: SplitCIFAR100
  endpoint:
    path: /capymoa/ocl/datasets/SplitCIFAR100
    method: GET
    data_selector: dataset
    params: {}
- name: SplitFashionMNIST
  endpoint:
    path: /capymoa/ocl/datasets/SplitFashionMNIST
    method: GET
    data_selector: records
- name: SplitCIFAR100
  endpoint:
    path: /capymoa/ocl/datasets/SplitCIFAR100
    method: GET
    data_selector: records
- name: SplitMNIST
  endpoint:
    path: /datasets/SplitMNIST
    method: GET
    data_selector: data
    params: {}
- name: SplitMNIST
  endpoint:
    path: /capymoa/ocl/datasets/SplitMNIST
    method: GET
    data_selector: tasks
    params: {}
- name: SplitCIFAR100ViT
  endpoint:
    path: /capymoa/ocl/datasets/SplitCIFAR100ViT
    method: GET
    data_selector: data
    params: {}
- name: TinySplitMNIST
  endpoint:
    path: /datasets/TinySplitMNIST
    method: GET
    data_selector: data
    params: {}
- name: TinySplitMNIST
  endpoint:
    path: /capymoa/ocl/datasets/TinySplitMNIST
    method: GET
- name: train_loaders
  endpoint:
    path: /train_loaders
    method: GET
    data_selector: task
    params:
      batch_size: int
      shuffle: bool
- name: test_loaders
  endpoint:
    path: /test_loaders
    method: GET
    data_selector: task
    params:
      batch_size: int
- name: SplitCIFAR10
  endpoint:
    path: /capymoa/ocl/datasets/SplitCIFAR10
    method: GET
    data_selector: records
    params: {}
- name: default_task_count
  endpoint:
    path: /default/task/count
    method: GET
    data_selector: count
    params: {}
- name: num_classes
  endpoint:
    path: /num/classes
    method: GET
    data_selector: classes
    params: {}
- name: shape
  endpoint:
    path: /shape
    method: GET
    data_selector: dimensions
    params: {}
- name: SplitFashionMNIST
  endpoint:
    path: /capymoa/ocl/datasets/SplitFashionMNIST
    method: GET
    data_selector: records
    params: {}
- name: batch_predict_proba
  endpoint:
    path: /batch_predict_proba
    method: GET
    data_selector: predicted_probabilities
- name: batch_train
  endpoint:
    path: /batch_train
    method: POST
    data_selector: training_results
- name: predict
  endpoint:
    path: /predict
    method: GET
    data_selector: predicted_label
- name: SplitMNIST
  endpoint:
    path: /capymoa/ocl/datasets/SplitMNIST
    method: GET
    data_selector: records
    params: {}
- name: default_task_count
  endpoint:
    path: /default_task_count
    method: GET
    data_selector: records
- name: default_test_transform
  endpoint:
    path: /default_test_transform
    method: GET
    data_selector: records
- name: default_train_transform
  endpoint:
    path: /default_train_transform
    method: GET
    data_selector: records
- name: mean
  endpoint:
    path: /mean
    method: GET
    data_selector: records
- name: num_classes
  endpoint:
    path: /num_classes
    method: GET
    data_selector: records
- name: shape
  endpoint:
    path: /shape
    method: GET
    data_selector: records
- name: std
  endpoint:
    path: /std
    method: GET
    data_selector: records
- name: TestTaskAware
  endpoint:
    path: /capymoa/ocl/base/TestTaskAware
    method: GET
    data_selector: records
- name: TinySplitMNIST
  endpoint:
    path: /datasets/TinySplitMNIST
    method: GET
    data_selector: data
    params: {}
- name: TinySplitMNIST
  endpoint:
    path: /capymoa/ocl/datasets/TinySplitMNIST
    method: GET
    data_selector: default_task_count
    params: {}
- name: ExperienceReplay
  endpoint:
    path: /capymoa/ocl/strategy/ExperienceReplay
    method: GET
    data_selector: records
- name: SLDA
  endpoint:
    path: /capymoa/ocl/strategy/SLDA
    method: GET
    data_selector: records
- name: NCM
  endpoint:
    path: /capymoa/ocl/strategy/NCM
    method: GET
    data_selector: records
- name: GDumb
  endpoint:
    path: /capymoa/ocl/strategy/GDumb
    method: GET
    data_selector: records
- name: ExperienceReplay
  endpoint:
    path: /capymoa/ocl/strategy/ExperienceReplay
    method: GET
    data_selector: records
- name: BaseDriftDetector
  endpoint:
    path: /drift/base_detector
    method: GET
    data_selector: records
- name: MOADriftDetector
  endpoint:
    path: /drift/base_detector/MOADriftDetector
    method: GET
    data_selector: records
- name: TinySplitMNIST
  endpoint:
    path: /path/to/tinysplitmnist
    method: GET
    data_selector: results
- name: batch_train
  endpoint:
    path: /batch_train
    method: POST
    data_selector: None
    params: {}
- name: predict
  endpoint:
    path: /predict
    method: POST
    data_selector: None
    params: {}
- name: predict_proba
  endpoint:
    path: /predict_proba
    method: POST
    data_selector: None
    params: {}
- name: train
  endpoint:
    path: /train
    method: POST
    data_selector: None
    params: {}
- name: CUSUM
  endpoint:
    path: /capymoa/drift/detectors/CUSUM
    method: GET
    data_selector: detector
    params: {}
- name: drift_detector
  endpoint:
    path: /capymoa/drift/detectors/DDM
    method: GET
    data_selector: detector
    params: {}
- name: TrainTaskAware
  endpoint:
    path: /capymoa/ocl/base/TrainTaskAware
    method: GET
    data_selector: records
- name: EWMAChart
  endpoint:
    path: /capymoa/drift/detectors/EWMAChart
    method: GET
    data_selector: detectors
- name: HDDMAverage
  endpoint:
    path: /capymoa/drift/detectors/HDDMAverage
    method: GET
    data_selector: detectors
    params: {}
- name: class_incremental_schedule
  endpoint:
    path: /capymoa/ocl/util/data/class_incremental_schedule
    method: GET
    data_selector: returns
    params: {}
- name: class_incremental_split
  endpoint:
    path: /capymoa/ocl/util/data/class_incremental_split
    method: GET
    data_selector: returns
    params: {}
- name: class_schedule_to_task_mask
  endpoint:
    path: /capymoa/ocl/util/data/class_schedule_to_task_mask
    method: GET
    data_selector: returns
    params: {}
- name: get_class_indices
  endpoint:
    path: /capymoa/ocl/util/data/get_class_indices
    method: GET
    data_selector: returns
    params: {}
- name: get_targets
  endpoint:
    path: /capymoa/ocl/util/data/get_targets
    method: GET
    data_selector: returns
    params: {}
- name: partition_by_schedule
  endpoint:
    path: /capymoa/ocl/util/data/partition_by_schedule
    method: GET
    data_selector: returns
    params: {}
- name: HDDMWeighted
  endpoint:
    path: /capymoa/drift/detectors/HDDMWeighted
    method: GET
    data_selector: detector
    params: {}
- name: MOADriftDetector
  endpoint:
    path: /capymoa/drift/base_detector/MOADriftDetector
    method: GET
    data_selector: detector_info
    params: {}
- name: detectors
  endpoint:
    path: /drift/detectors
    method: GET
    data_selector: detectors
    params: {}
- name: OPTWIN
  endpoint:
    path: /capymoa/drift/OPTWIN
    method: GET
    data_selector: detected_changes
    params: {}
- name: PageHinkley
  endpoint:
    path: /capymoa/drift/detectors/PageHinkley
    method: GET
- name: ABCD
  endpoint:
    path: /capymoa/drift/detectors/ABCD
    method: GET
- name: RDDM
  endpoint:
    path: /capymoa/drift/detectors/RDDM
    method: GET
    data_selector: detector
    params: {}
- name: detected_change
  endpoint:
    path: /capymoa/drift/detectors/ABCD/detected_change
    method: GET
- name: detected_warning
  endpoint:
    path: /capymoa/drift/detectors/ABCD/detected_warning
    method: GET
- name: get_dims_p_values
  endpoint:
    path: /capymoa/drift/detectors/ABCD/get_dims_p_values
    method: GET
- name: get_drift_dims
  endpoint:
    path: /capymoa/drift/detectors/ABCD/get_drift_dims
    method: GET
- name: get_params
  endpoint:
    path: /capymoa/drift/detectors/ABCD/get_params
    method: GET
- name: get_severity
  endpoint:
    path: /capymoa/drift/detectors/ABCD/get_severity
    method: GET
- name: loss
  endpoint:
    path: /capymoa/drift/detectors/ABCD/loss
    method: GET
- name: pre_train
  endpoint:
    path: /capymoa/drift/detectors/ABCD/pre_train
    method: GET
- name: reset
  endpoint:
    path: /capymoa/drift/detectors/ABCD/reset
    method: POST
- name: ADWIN
  endpoint:
    path: /capymoa/drift/detectors/ADWIN
    method: GET
    data_selector: detector_data
    params: {}
- name: moa_detector
  endpoint:
    path: /adwin/moa_detector
    method: GET
    data_selector: detector
    params: {}
- name: STUDD
  endpoint:
    path: /studd
    method: GET
    data_selector: detected_change
    params: {}
- name: CUSUM
  endpoint:
    path: /capymoa/drift/detectors/CUSUM
    method: GET
    data_selector: detector
    params: {}
- name: get_params
  endpoint:
    path: /get_params
    method: GET
    data_selector: detector_parameters
    params: {}
- name: instance_from_arr
  endpoint:
    path: /instance_from_arr
    method: GET
    data_selector: LabeledInstance
    params: {}
- name: reset
  endpoint:
    path: /reset
    method: POST
    data_selector: reset_status
    params: {}
- name: DriftDetectionMetrics
  endpoint:
    path: /drift/eval_detector/DriftDetectionMetrics
    method: GET
    data_selector: metrics
    params: {}
- name: EvaluateDriftDetector
  endpoint:
    path: /drift/eval_detector/EvaluateDriftDetector
    method: GET
    data_selector: evaluation
    params: {}
- name: DDM
  endpoint:
    path: /capymoa/drift/detectors/ddm
    method: GET
    data_selector: detectors
- name: EvaluateDriftDetector
  endpoint:
    path: /capymoa/drift/eval_detector/EvaluateDriftDetector
    method: GET
- name: EWMAChart
  endpoint:
    path: /capymoa/drift/detectors/EWMAChart
    method: GET
    data_selector: detector
    params: {}
- name: EvaluateDriftDetector
  endpoint:
    path: /drift/eval_detector
    method: GET
- name: Clustream
  endpoint:
    path: /capymoa/clusterers/Clustream
    method: GET
- name: Clustream_with_kmeans
  endpoint:
    path: /capymoa/clusterers/Clustream_with_kmeans
    method: GET
- name: ClusTree
  endpoint:
    path: /capymoa/clusterers/ClusTree
    method: GET
- name: Denstream_with_dbscan
  endpoint:
    path: /capymoa/clusterers/Denstream_with_dbscan
    method: GET
- name: Clustream
  endpoint:
    path: /clustream
    method: GET
- name: Clustream
  endpoint:
    path: /capymoa/clusterers/Clustream_with_kmeans
    method: GET
    data_selector: records
- name: __init__
  endpoint:
    path: /capymoa/drift/detectors/ewma_chart/__init__
    method: GET
    data_selector: parameters
    params:
      min_n_instances: 30
      lambda_: 0.2
      CLI: null
- name: add_element
  endpoint:
    path: /capymoa/drift/detectors/ewma_chart/add_element
    method: POST
    data_selector: element
    params: {}
- name: detected_change
  endpoint:
    path: /capymoa/drift/detectors/ewma_chart/detected_change
    method: GET
    data_selector: detected_change
    params: {}
- name: detected_warning
  endpoint:
    path: /capymoa/drift/detectors/ewma_chart/detected_warning
    method: GET
    data_selector: detected_warning
    params: {}
- name: get_params
  endpoint:
    path: /capymoa/drift/detectors/ewma_chart/get_params
    method: GET
    data_selector: params
    params: {}
- name: reset
  endpoint:
    path: /capymoa/drift/detectors/ewma_chart/reset
    method: POST
    data_selector: reset
    params:
      clean_history: false
- name: ClusTree
  endpoint:
    path: /clustree
    method: GET
- name: GeometricMovingAverage
  endpoint:
    path: /capymoa/drift/detectors/geometric_ma
    method: GET
- name: Denstream_with_dbscan
  endpoint:
    path: Denstream_with_dbscan
    method: GET
- name: OPTWIN
  endpoint:
    path: /capymoa/drift/detectors/OPTWIN
    method: GET
    data_selector: detector
    params: {}
- name: OPTWIN
  endpoint:
    path: /capymoa/drift/OPTWIN
    method: GET
- name: PageHinkley
  endpoint:
    path: /capymoa/drift/detectors/PageHinkley
    method: GET
    data_selector: detector
    params: {}
- name: prequential_evaluation
  endpoint:
    path: /capymoa/evaluation/prequential_evaluation
    method: POST
    data_selector: results
    params:
      max_instances: null
      window_size: 1000
      store_predictions: false
      store_y: false
      restart_stream: true
      progress_bar: false
- name: prequential_ssl_evaluation
  endpoint:
    path: /capymoa/evaluation/prequential_ssl_evaluation
    method: POST
    data_selector: results
    params:
      max_instances: null
      window_size: 1000
      initial_window_size: 0
      delay_length: 0
      label_probability: 0.01
      random_seed: 1
      store_predictions: false
      store_y: false
      restart_stream: true
      progress_bar: false
- name: prequential_evaluation_multiple_learners
  endpoint:
    path: /capymoa/evaluation/prequential_evaluation_multiple_learners
    method: POST
    data_selector: results
    params:
      max_instances: null
      window_size: 1000
      store_predictions: false
      store_y: false
      progress_bar: false
- name: prequential_evaluation_anomaly
  endpoint:
    path: /capymoa/evaluation/prequential_evaluation_anomaly
    method: POST
    data_selector: results
    params:
      max_instances: null
      window_size: 1000
      optimise: true
      store_predictions: false
      store_y: false
      progress_bar: false
- name: SEED
  endpoint:
    path: /capymoa/drift/detectors/SEED
    method: GET
    data_selector: detector
    params: {}
- name: ClassificationWindowedEvaluator
  endpoint:
    path: /capymoa/evaluation/ClassificationWindowedEvaluator
    method: GET
- name: moa_detector
  endpoint:
    path: /capymoa/drift/detectors/stepd
    method: GET
    data_selector: detectors
    params: {}
- name: RegressionEvaluator
  endpoint:
    path: /capymoa/evaluation/RegressionEvaluator
    method: GET
    data_selector: records
- name: STUDD
  endpoint:
    path: /capymoa/drift/detectors/STUDD
    method: GET
    data_selector: detectors
    params: {}
- name: PredictionIntervalEvaluator
  endpoint:
    path: /capymoa/evaluation/PredictionIntervalEvaluator
    method: GET
- name: PredictionIntervalWindowedEvaluator
  endpoint:
    path: /capymoa/evaluation/PredictionIntervalWindowedEvaluator
    method: GET
- name: drift_detection_metrics
  endpoint:
    path: /drift_detection_metrics
    method: GET
    data_selector: metrics
    params: {}
- name: evaluate_drift_detector
  endpoint:
    path: /evaluate_drift_detector
    method: GET
    data_selector: evaluation_results
    params: {}
- name: AnomalyDetectionEvaluator
  endpoint:
    path: /capymoa/evaluation/AnomalyDetectionEvaluator
    method: GET
    data_selector: metrics
- name: ClusteringEvaluator
  endpoint:
    path: /capymoa/evaluation/ClusteringEvaluator
    method: GET
- name: calc_performance
  endpoint:
    path: /calc_performance
    method: POST
    data_selector: metrics
    params:
      trues: Array-like of true drift points
      preds: Array-like of predicted drift points
      tot_n_instances: Total number of instances
      drift_episodes: Optional list of drift episodes
- name: Clustream
  endpoint:
    path: /clusterers/clustream
    method: GET
    data_selector: records
- name: Clustream_with_kmeans
  endpoint:
    path: /clusterers/clustream_with_kmeans
    method: GET
    data_selector: records
- name: ClusTree
  endpoint:
    path: /clusterers/clustree
    method: GET
    data_selector: records
- name: Denstream_with_dbscan
  endpoint:
    path: /clusterers/denstream_with_dbscan
    method: GET
    data_selector: records
- name: Clustream
  endpoint:
    path: /capymoa/clusterers/Clustream
    method: GET
    data_selector: records
    params: {}
- name: GiniSplitCriterion
  endpoint:
    path: /module-capymoa.splitcriteria.GiniSplitCriterion
    method: GET
    data_selector: Goodness of split using Gini impurity.
- name: InfoGainSplitCriterion
  endpoint:
    path: /module-capymoa.splitcriteria.InfoGainSplitCriterion
    method: GET
    data_selector: Goodness of split using information gain.
- name: SplitCriterion
  endpoint:
    path: /module-capymoa.splitcriteria.SplitCriterion
    method: GET
    data_selector: Split criteria are used to evaluate the quality of a split in a
      decision tree.
- name: VarianceReductionSplitCriterion
  endpoint:
    path: /module-capymoa.splitcriteria.VarianceReductionSplitCriterion
    method: GET
    data_selector: Goodness of split criterion based on variance reduction.
- name: Clustream
  endpoint:
    path: /capymoa/clusterers/Clustream_with_kmeans
    method: GET
- name: InfoGainSplitCriterion
  endpoint:
    path: /capymoa/splitcriteria/InfoGainSplitCriterion
    method: GET
    data_selector: records
    params: {}
- name: ClusTree
  endpoint:
    path: /capymoa/clusterers/ClusTree
    method: GET
- name: Denstream_with_dbscan
  endpoint:
    path: /capymoa/clusterers/Denstream_with_dbscan
    method: GET
    data_selector: records
- name: AutoClass
  endpoint:
    path: /capymoa/automl/AutoClass
    method: GET
    data_selector: records
- name: ClassificationEvaluator
  endpoint:
    path: /evaluation/ClassificationEvaluator
    method: GET
    data_selector: ''
    params: {}
- name: ClassificationWindowedEvaluator
  endpoint:
    path: /evaluation/ClassificationWindowedEvaluator
    method: GET
    data_selector: ''
    params: {}
- name: RegressionWindowedEvaluator
  endpoint:
    path: /evaluation/RegressionWindowedEvaluator
    method: GET
    data_selector: ''
    params: {}
- name: RegressionEvaluator
  endpoint:
    path: /evaluation/RegressionEvaluator
    method: GET
    data_selector: ''
    params: {}
- name: PredictionIntervalEvaluator
  endpoint:
    path: /evaluation/PredictionIntervalEvaluator
    method: GET
    data_selector: ''
    params: {}
- name: PredictionIntervalWindowedEvaluator
  endpoint:
    path: /evaluation/PredictionIntervalWindowedEvaluator
    method: GET
    data_selector: ''
    params: {}
- name: AnomalyDetectionEvaluator
  endpoint:
    path: /evaluation/AnomalyDetectionEvaluator
    method: GET
    data_selector: ''
    params: {}
- name: ClusteringEvaluator
  endpoint:
    path: /evaluation/ClusteringEvaluator
    method: GET
    data_selector: ''
    params: {}
- name: results
  endpoint:
    path: /evaluation/results
    method: GET
    data_selector: records
- name: PrequentialResults
  endpoint:
    path: /capymoa/evaluation/results/PrequentialResults
    method: GET
- name: ClassificationWindowedEvaluator
  endpoint:
    path: /capymoa/evaluation/ClassificationWindowedEvaluator
    method: GET
- name: ClassificationWindowedEvaluator
  endpoint:
    path: /capymoa/evaluation/ClassificationWindowedEvaluator
    method: GET
    data_selector: metrics
- name: RegressionWindowedEvaluator
  endpoint:
    path: /capymoa/evaluation/RegressionWindowedEvaluator
    method: GET
    data_selector: metrics
    params: {}
- name: RegressionEvaluator
  endpoint:
    path: /evaluation/RegressionEvaluator
    method: GET
    data_selector: performance_metrics
- name: PredictionIntervalEvaluator
  endpoint:
    path: /capymoa/evaluation/PredictionIntervalEvaluator
    method: GET
- name: PredictionIntervalWindowedEvaluator
  endpoint:
    path: /capymoa/evaluation/PredictionIntervalWindowedEvaluator
    method: GET
    data_selector: records
- name: AnomalyDetectionEvaluator
  endpoint:
    path: /evaluation/AnomalyDetectionEvaluator
    method: GET
- name: Perceptron
  endpoint:
    path: /ann/Perceptron
    method: GET
    data_selector: records
    params: {}
- name: GiniSplitCriterion
  endpoint:
    path: /capymoa/splitcriteria/GiniSplitCriterion
    method: GET
    data_selector: Goodness of split using Gini impurity.
- name: InfoGainSplitCriterion
  endpoint:
    path: /capymoa/splitcriteria/InfoGainSplitCriterion
    method: GET
    data_selector: Goodness of split using information gain.
- name: SplitCriterion
  endpoint:
    path: /capymoa/splitcriteria/SplitCriterion
    method: GET
    data_selector: Split criteria are used to evaluate the quality of a split in a
      decision tree.
- name: VarianceReductionSplitCriterion
  endpoint:
    path: /capymoa/splitcriteria/VarianceReductionSplitCriterion
    method: GET
    data_selector: Goodness of split criterion based on variance reduction.
- name: InfoGainSplitCriterion
  endpoint:
    path: /capymoa/splitcriteria/InfoGainSplitCriterion
    method: GET
    data_selector: parameters
    params:
      min_branch_frac: 0.01
notes:
- -p, --port maps port 8888 in the container to port 10000 on the host machine. If
  you do change the port on the host machine, make sure to change the port in the
  URL above.
- -v flag lets the container access the ./work and ./data directories on the host
  machine as /home/jovyan/work and /home/jovyan/data in the container, respectively.
  You can change the host directories to any directory on your machine.
- CapyMOA requires Java to be installed and accessible in your environment.
- Ensure that you have Pandoc installed on your system.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Regression algorithms have its API usage very similar to classification algorithms.
- In CapyMOA, we designed the simplest and most complete API for simulating, visualizing
  and assessing concept drifts.
- Uses synthetic data streams for simulations
- Supports classification and regression tasks
- Common evaluation functions include prequential_evaluation, cumulative_evaluation,
  and windowed_evaluation.
- More information about CapyMOA can be found in https://www.capymoa.org
- Uses prequential evaluation for multiple learners
- prequential_evaluation() allows specifying a max_instances parameter
- The results returned from prequential_evaluation() allows accessing the Evaluator
  objects
- The evaluation functions are designed to handle infinite streams of data.
- Uses various classifiers and evaluators for supervised learning.
- Prequential evaluation method is recommended for processing streams.
- Evaluating supervised learners in CapyMOA — CapyMOA
- The prequential evaluation functions can also be used for regression tasks.
- In Regression it is sometimes desirable to plot predictions vs. ground truth to
  observe what is happening with the Stream.
- To make people’s life easier plot_predictions_vs_ground_truth function can be used.
- For massive streams with millions of instances it can be unbearable to plot all
  at once.
- The results dictionaries do not contain the keys 'wallclock' and 'cpu_time'.
- In Regression it is sometimes desirable to plot predictions vs. ground truth.
- Last update on 25/07/2024
- Uses CPU device for training.
- Sets random seed for reproducibility.
- This notebook demonstrates how to use Pytorch with CapyMOA.
- Model is initialized after receiving the first instance
- Uses PyTorch with CapyMOA for machine learning tasks.
- Model initialization occurs after receiving the first instance.
- 'More advanced examples can be found in Tutorial 6: Exploring Advanced Features,
  such as configuring and manipulating MOA streams directly'
- The API adds concept meta information for plotting which is not available in the
  previous example.
- Using a learner like Online Bagging without any feature extraction is not going
  to yield meaningful performance
- This API helps in simulating concept drifts using synthetic data generators.
- Last update on 27/07/2024
- CapyMOA gives you access to any MOA classifier or regressor
- MOA has over a hundred learners, and more are added constantly
- Uses torch with cpu as the device
- Default learning rate is set to 1e-3
- Uses TensorBoard for logging and visualization of metrics during training.
- This feature is still under development; some functionality might not yet be available
  or change in future releases.
- Some objects like NeuralNetwork may return nulls in deeply nested fields
- Uses TensorBoard for logging and visualization
- Concept drift can be simulated using specific streams
- Detected change indices are logged during processing.
- An example of the use case of prediction interval in CapyMOA
- Current available prediction interval learners require a regressive base model to
  work
- Detected change at index 3487
- Detected change at index 8735
- Detected change at index 10399
- Detected change at index 10559
- Detected change at index 10751
- Detected change at index 11039
- Detected change at index 13343
- Detected change at index 13855
- Detected change at index 17247
- Detected change at index 17343
- Detected change at index 18623
- Detected change at index 18719
- Detected change at index 18975
- Detected change at index 19295
- Detected change at index 21215
- Detected change at index 21375
- Detected change at index 23359
- Detected change at index 23391
- Detected change at index 24127
- Detected change at index 25023
- Detected change at index 25119
- Detected change at index 35327
- Detected change at index 35487
- Detected change at index 39999
- Detected change at index 40127
- Detected change at index 40991
- Detected change at index 41439
- We have to set optimise to Flase to avoid subscribing problems
- 'Two methods for obtaining prediction intervals are currently available in CapyMOA:
  MVE and AdaPI'
- Uses AutoML features for model selection and hyperparameter optimization.
- Includes handling of simulated concept drift.
- We have to set optimise to False to avoid subscribing problems
- Reservoir sampling is used to construct random samples incrementally from a data
  stream.
- Uses AutoML algorithms for model selection and evaluation.
- Supports concept drift simulations.
- Preparing and executing partially and delayed labeling experiments
- Some objects like Contact may return nulls in deeply nested fields
- Results yield more information in comparison to prequential_evaluation()
- Uses prequential_ssl_evaluation() for semi-supervised learning
- This is an experimental API might change significantly in the near future.
- CapyMOA chooses between the standard and the mini-batch version based on parameter
  configuration.
- Uses SEA synthetic generator for data source
- Trained model is saved to a file named 'capymoa_ARF_model.pkl'
- Base class for batch processing in CapyMOA
- When implementing a classifier ensure random number generators are seeded.
- 'A word of caution: even compatible scikit-learn classifiers are not necessarily
  designed for online learning and might require some tweaking to work well in an
  online setting.'
- Wrapper for using MOA semi-supervised learning classifiers.
- The random seed for reproducibility defaults to 1.
- Compatible scikit-learn classifiers are not necessarily designed for online learning
  and might require some tweaking to work well in an online setting.
- Returns probability estimates for each label in a batch.
- Compatible scikit-learn regressors are not necessarily designed for online learning
  and might require some tweaking to work well in an online setting.
- Dataset contains hourly and daily count of rental bikes between years 2011 and 2012.
- This version of the dataset has been normalised (AKA elecNormNew) and it is the
  one most commonly used in benchmarks.
- This should only be used for quick tests, not for benchmarking algorithms.
- CovtFD is an adaptation from the classic Covtype classification problem with added
  feature drifts.
- 'Number of instances: 581,011 (30m^2 cells)'
- 'Number of attributes: 104 (10 continuous, 44 categorical, 50 dummy)'
- 'Number of classes: 7 (forest cover types)'
- Hyper100k is a classification problem based on the moving hyperplane generator.
- 'Number of instances: 100,000'
- 'Number of attributes: 10'
- 'Number of classes: 2'
- RTG_2abrupt is a synthetic classification problem based on the Random Tree generator
  with 2 abrupt drifts.
- 'Number of attributes: 30'
- 'Number of classes: 5'
- The Electricity data set has been normalised (AKA elecNormNew) and it is the one
  most commonly used in benchmarks.
- If moa_stream is specified, it takes precedence, and the stream will be instantiated
  directly from the provided ConceptDriftStream object.
- The CLI and moa_stream parameters allow users to specify the stream using a ConceptDriftStream
  from MOA alongside its CLI. This provides flexibility for users familiar with MOA’s
  configuration style.
- In the future, we might remove the functionality associated with CLI and moa_stream
  to simplify the code, focusing on other methods of stream configuration.
- This is a snapshot (100k instances with 2 simulated abrupt drifts) of the synthetic
  generator.
- Sensor stream is a classification problem based on indoor sensor data.
- 'Number of instances: 2,219,803'
- 'Number of attributes: 5'
- 'Number of classes: 54'
- 'Defaults: instance_random_seed=1, number_of_classes=2, number_of_attributes=10,
  number_of_drifting_attributes=2, magnitude_of_change=0.0, noise_percentage=10, sigma_percentage=10'
- An LED Generator that can generate instances with customizable noise and data reduction
  settings.
- An Random RBF Generator
- Generates SEA concepts functions.
- Construct a SineGenerator with instance_random_seed, classification_function, suppress_irrelevant_attributes,
  and balance_classes parameters
- Generates SEA concepts functions
- Returns labeled instances or regression depending on the schema.
- Ensure random number generators are seeded.
- The classifier may return None if unable to make a prediction.
- Pipeline element that wraps around a regressor
- A datastream that can be learnt instance by instance.
- Adaptive Random Forest (ARF) is a decision tree ensemble classifier.
- Dynamic Weighted Majority is a meta-strategy.
- The base learner defaults to 'NaiveBayes'.
- EFDT is somewhat robust to concept drifts as it continually revisits and updates
  its internal decision tree structure.
- Uses PyTorch for model training and evaluation.
- K-Nearest Neighbors is a lazy classifier that stores a window of the most recent
  instances.
- Majority class classifier - always predicts the class that has been observed most
  frequently in the training data.
- Naive Bayes incremental learner — performs classic Bayesian prediction.
- Naive Bayes incremental learner.
- Performs classic Bayesian prediction while making the naive assumption that all
  inputs are independent.
- ADWIN is parameter- and assumption-free in the sense that it automatically detects
  and adapts to the current rate of change.
- Online Smooth Boost is an ensemble classifier. Incremental on-line boosting with
  Theoretical Justifications of Shang-Tse Chen.
- Uses incremental on-line boosting classifier of Oza and Russell.
- Streaming Passive Aggressive Classifier wraps PassiveAggressiveClassifier for ease
  of use in the streaming context.
- Weighted k-Nearest Neighbour is a lazy classifier.
- The default number of neighbors (k) is set to 3 instead of 10.
- FIMT-DD is implemented in MOA (Massive Online Analysis) and provides several parameters
  for customization.
- Adaptive Random Forest Fast Incremental Model Tree with Drift Detection.
- SOKNL extends the AdaptiveRandomForestRegressor by limiting the number of base trees
  involved in predicting a given instance.
- The default number of neighbors (k) is set to 3 instead of 10 (as in MOA)
- There is no specific publication for online KNN
- Implementation of the FIMT-DD tree as described by Ikonomovska et al.
- Maintains a fading mean of the target values to make predictions.
- The fading factor must be in (0, 1]. Defaults to 0.99.
- This wraps sklearn.linear_model.PassiveAggressiveRegressor for ease of use in the
  streaming context.
- HS-Trees is implemented in MOA and provides several parameters for customization.
- This class implements the Online Isolation Forest (oIFOR) algorithm, which is an
  ensemble anomaly detector capable of adapting to concept drift.
- A simple autoencoder anomaly detector that uses a single hidden layer.
- StreamRHF is an unsupervised anomaly detection algorithm tailored for real-time
  data streams.
- Scores are scaled between 0 and 1, with higher values indicating greater anomaly
  likelihood.
- A high score is indicative of an anomaly.
- Combines the power of tree-based partitioning with kurtosis-driven feature selection.
- Anomalies are defined non-parametrically in terms of the 'externality' a new point
  imposes on the existing data.
- Online Semi-Supervised Neural Network designed for semi-supervised learning in non-stationary
  data streams.
- Dataset is used for online class incremental learning.
- Features can be normalized after transformations.
- The order of the tasks is fixed and does not change between iterations.
- The datasets themselves are shuffled if shuffle_data is set to True.
- Evaluate online continual learning in classification tasks.
- Preloading the test dataset is recommended since it is small and is used multiple
  times in evaluation.
- In online continual learning your learner may not have access to the task_schedule
  attribute. It is provided for evaluation and debugging.
- Preloading the test dataset is recommended since it is small.
- The order of the tasks is fixed and does not change between iterations
- The datasets themselves are shuffled if shuffle_data is set to True
- Encoded using the vit_base_patch16_224_augreg_in21k pre-trained backbone.
- 768 dimensional features (extracted from the last layer of the ViT).
- 100 classes.
- 50,000 training samples.
- 10,000 testing samples.
- Useful for developing and evaluating prototype based continual learning algorithms.
- The datasets themselves are shuffled in __init__() if shuffle_data is set to True.
- Datasets are shuffled in __init__() if shuffle_data is set to True.
- Streaming Linear Discriminant Analysis (SLDA) does not gracefully forget and may
  not handle concept drift well.
- Ensure random number generators are seeded for reproducibility.
- A lower resolution and smaller version of the SplitMNIST dataset for testing.
- This dataset is intended for testing and documentation purposes.
- In online continual learning your learner may not have access to task_schedule.
- Uses a replay buffer to store past experiences and samples from it during training
  to mitigate catastrophic forgetting.
- The replay buffer is implemented using reservoir sampling, which allows for uniform
  sampling over the entire stream.
- Streaming Linear Discriminant Analysis (SLDA) is a prototype classifier that incrementally
  accumulates the mean of each class and the mean and covariance across all classes.
- This method does not gracefully forget and may not handle concept drift well.
- NCM is a prototype based classifier that uses the mean of each class as a prototype.
- ADWIN Drift Detector
- CUSUM Drift Detector
- Greedy sampler and a dumb learner (GDumb) is a baseline replay strategy.
- GDumb remains a useful baseline.
- Drift Detection Method (DDM) for detecting changes in data streams.
- Interface for learners that are aware of the transition between tasks.
- Average Hoeffding’s bounds Drift Detector
- The command-line interface (CLI) configuration for the MOA drift detector, defaults
  to None
- Weighted Hoeffding’s bounds Drift Detector
- Includes various drift detection algorithms such as ADWIN, CUSUM, and DDM.
- STUDD is a concept drift detection method that uses a student-teacher approach.
- The max_delay parameter is important for evaluating both the accuracy and timing
  of drift detection.
- Clustream clustering algorithm without Macro-clustering
- Denstream clustering algorithm with DBSCAN Macro-clustering
- Configuration json file reading is delegated to the MOA object, thus in the configuration
  file the name of the learners should correspond to the MOA class full name.
- Optimal Window Concept Drift Detector
- Drift Identification with Optimal Sub-Windows (OPTWIN) is a drift detection method.
- Evaluates drift detection performance by comparing predicted drift points against
  true drift points.
- Use CAPYMOA_DATASETS_DIR to specify a custom directory where datasets will be stored.
- Use CAPYMOA_JVM_ARGS to specify custom JVM arguments.
- Use CAPYMOA_MOA_JAR to specify a custom MOA jar file.
- Use JAVA_HOME to specify the path to your Java installation.
- AutoClass automl algorithm by Bahri and Georgantas.
- If the classifier abstains from making a prediction, y_pred_index can be None.
- Wrapper for the Regression Performance Evaluator from MOA.
- Clustering evaluation at this point is very simple and only uses the unsupervised
  metrics.
errors:
- Accuracy may vary depending on the training setup and data
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Invalid parameters: Check input values for correctness'
- 'ValueError: If the machine learning task is neither a regression nor a classification
  task.'
- 'ValueError: If the machine learning task is neither a regression nor a classification
  task'
- 'Invalid batch size: Ensure batch_size is a positive integer.'
- 'ValueError: If max_delay is not a positive integer.'
- 'ValueError: If arrays are not ordered or contain invalid values, if tot_n_instances
  is not positive, or if neither drift_episodes nor (trues and preds) are provided.'
- 'AssertionError: If no drift points are given.'
- 'ValueError: If the values are not valid indexes in the schema.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Schema
  - Instance
  - LabeledInstance
  - MOARegressor
  - TestTaskAware
  - TrainTaskAware
  - NoChange
  - BaseDriftDetector
  - MOADriftDetector
client:
  base_url: https://github.com/adaptive-machine-learning/CapyMOA
source_metadata: null
