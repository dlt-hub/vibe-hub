resources:
- name: post
  endpoint:
    path: /posts
    method: GET
    data_selector: records
    params: {}
- name: Post
  endpoint:
    path: /db
    method: POST
    data_selector: createdPost
    params: {}
- name: Post
  endpoint:
    path: /posts
    method: GET
    data_selector: records
- name: Comment
  endpoint:
    path: /comments
    method: GET
    data_selector: records
- name: Post
  endpoint:
    path: /services/data/vXX.X/sobjects/Post
    method: GET
    data_selector: records
    params: {}
- name: Comment
  endpoint:
    path: /services/data/vXX.X/sobjects/Comment
    method: GET
    data_selector: records
    params: {}
- name: post
  endpoint:
    path: /client/Post
    method: GET
    data_selector: posts
    params: {}
- name: comment
  endpoint:
    path: /client/Comment
    method: GET
    data_selector: comments
    params: {}
- name: post
  endpoint:
    path: /posts
    method: GET
    data_selector: records
    params: {}
- name: comment
  endpoint:
    path: /comments
    method: GET
    data_selector: records
    params: {}
- name: Post
  endpoint:
    path: /posts
    method: GET
    data_selector: records
    params: {}
- name: Post
  endpoint:
    path: /create/post
    method: POST
    data_selector: created
    params: {}
- name: Comment
  endpoint:
    path: /create/comment
    method: POST
    data_selector: created
    params: {}
- name: Post
  endpoint:
    path: /client/Post
    method: UPDATE
    data_selector: updated
    params: {}
- name: Comment
  endpoint:
    path: /client/Comment
    method: UPDATE
    data_selector: updated
    params: {}
- name: Post
  endpoint:
    path: /posts
    method: DELETE
    data_selector: deleted
    params: {}
- name: Comment
  endpoint:
    path: /comments
    method: DELETE
    data_selector: deleted
    params: {}
- name: User
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: Post
  endpoint:
    path: /posts
    method: GET
    data_selector: records
- name: Comment
  endpoint:
    path: /comments
    method: GET
    data_selector: records
- name: post
  endpoint:
    path: /upsert
    method: POST
    data_selector: post
    params: {}
- name: Post
  endpoint:
    path: /Post
    method: GET
    data_selector: records
    params: {}
- name: Comment
  endpoint:
    path: /Comment
    method: GET
    data_selector: records
    params: {}
- name: Post
  endpoint:
    path: /Post
    method: GET
    data_selector: records
- name: Comment
  endpoint:
    path: /Comment
    method: GET
    data_selector: records
- name: Post
  endpoint:
    path: /posts
    method: POST
    data_selector: data
    params: {}
- name: Comment
  endpoint:
    path: /comments
    method: POST
    data_selector: data
    params: {}
- name: Post
  endpoint:
    path: /posts
    method: POST
    data_selector: result
    params: {}
- name: Comment
  endpoint:
    path: /comments
    method: POST
    data_selector: result
    params: {}
- name: Organization
  endpoint:
    path: /composite/organization
    method: GET
    data_selector: org
    params: {}
- name: Repository
  endpoint:
    path: /composite/repository
    method: GET
    data_selector: repo
    params: {}
notes:
- The Prisma Go client is going to be deprecated and won’t receive upgrades to Prisma
  v7+.
- Uses SQLite as the database
- The Prisma Client Go client is automatically generated in your project.
- Whenever you make changes to your model, migrate your database and re-generate your
  prisma code
- When using the go client, always use 'go run github.com/steebchen/prisma-client-go
  ...' for commands.
- The Prisma Go client aims to be fully type-safe wherever possible, even for complex
  queries.
- Optional fields are hard to represent in Go, since SQL has NULLs but Go does not
  have nullable types.
- If no records are found, the query returns a slice without returning an error.
- Last updated on October 22, 2024
- You can order by any field in either direction, but it’s recommended to use an index
  on fields you order.
- It’s recommended to use an index on fields you order.
- To delete a record, query for a field using FindUnique or FindMany, and then chain
  it by invoking .Delete().
- Use UpsertOne to query for a document, define what to write when creating the document,
  and what to update if the document already exists.
- When defining your return type structure, you have to use the native database type.
- To ensure compatibility with database and go types, you can use raw types.
- You can use the raw API when there’s something you can’t do with the current go
  client features.
- The query will be redirected to the underlying database, so everything supported
  by the database should work.
- A transaction refers to a sequence of read/write operations that are guaranteed
  to either succeed or fail as a whole.
- Transactions are guaranteed to either succeed or fail as a whole.
- You can query for composite keys using the composite key id, whether it is a unique
  or primary key.
- You can only select or omit fields in a query, not both.
- Prisma Go client is in alpha status right now, missing a lot of features compared
  to the javascript client.
- The Prisma Go client is in alpha status right now, and I’m actively working towards
  a beta and eventually a production-ready version.
- It’s missing a lot of features compared to the javascript client, but the core works
  robustly, as the same Prisma query engine is used under the hood.
errors:
- 'ErrNotFound: No record found.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://goprisma.org/docs
  headers:
    Accept: application/json
source_metadata: null
