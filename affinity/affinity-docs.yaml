resources:
- name: list_entries
  endpoint:
    path: /lists/{list_id}/list-entries
    method: GET
    data_selector: records
- name: field_values_changes
  endpoint:
    path: /field-values-changes
    method: GET
    data_selector: records
- name: organizations
  endpoint:
    path: /organizations/{organization_id}
    method: GET
    data_selector: records
- name: relationships_strengths
  endpoint:
    path: /relationships-strengths
    method: GET
    data_selector: records
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: lists
    params: {}
- name: opportunities
  endpoint:
    path: /opportunities
    method: GET
    data_selector: opportunities
- name: lists
  endpoint:
    path: /lists
    method: GET
    data_selector: organizations
    params: {}
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
    params: {}
- name: persons
  endpoint:
    path: /persons
    method: GET
    data_selector: persons
    params: {}
- name: opportunities
  endpoint:
    path: /opportunities
    method: GET
    data_selector: opportunities
    params: {}
- name: list_entries
  endpoint:
    path: /lists/{list_id}/list-entries
    method: POST
    data_selector: list_entry
    params:
      list_id: required
- name: fields
  endpoint:
    path: /fields
    method: GET
    data_selector: fields
    params: {}
- name: field_values
  endpoint:
    path: /field-values
    method: GET
    data_selector: '[]'
- name: create_field_value
  endpoint:
    path: /field-values
    method: POST
    data_selector: '{}'
- name: update_field_value
  endpoint:
    path: /field-values/{field_value_id}
    method: PUT
    data_selector: '{}'
- name: field_value_changes
  endpoint:
    path: /field-value-changes
    method: GET
    data_selector: records
    params:
      field_id: '236333'
- name: persons
  endpoint:
    path: /persons
    method: GET
    data_selector: persons
    params: {}
- name: persons
  endpoint:
    path: /persons/{person_id}
    method: DELETE
    data_selector: success
- name: interactions
  endpoint:
    path: /interactions
    method: GET
    data_selector: records
    params:
      page_size: 100
- name: organization
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
    params:
      with_interaction_dates: 'true'
- name: specific_organization
  endpoint:
    path: /organizations/{organization_id}
    method: GET
    data_selector: organization
    params:
      with_interaction_dates: 'true'
- name: opportunity
  endpoint:
    path: /opportunities/{opportunity_id}
    method: GET
    data_selector: opportunities
- name: interactions
  endpoint:
    path: /interactions
    method: GET
    data_selector: emails
    params: {}
- name: email_type
  endpoint:
    params:
      type: integer
      start_time: string
      end_time: string
- name: interactions
  endpoint:
    path: /interactions
    method: POST
    data_selector: reminder object
- name: update_interaction
  endpoint:
    path: /interactions/{id}
    method: PUT
    data_selector: updated interaction object
- name: relationship_strength
  endpoint:
    path: /relationship_strength
    method: GET
    data_selector: relationship strength resource
- name: note
  endpoint:
    path: /notes
    method: GET
    data_selector: records
- name: notes
  endpoint:
    path: /notes
    method: POST
    data_selector: note
    params: {}
- name: interactions
  endpoint:
    path: /interactions
    method: GET
    data_selector: records
    params:
      page_size: 100
- name: reminders
  endpoint:
    path: /reminders
    method: POST
    data_selector: records
    params: {}
- name: create_reminder
  endpoint:
    path: /reminders
    method: POST
- name: update_reminder
  endpoint:
    path: /reminders/{reminder_id}
    method: PUT
- name: delete_webhook_subscription
  endpoint:
    path: /webhook/{webhook_subscription_id}
    method: DELETE
- name: get_all_webhook_subscriptions
  endpoint:
    path: /webhook
    method: GET
- name: whoami
  endpoint:
    path: /whoami
    method: GET
    data_selector: user
notes:
- The maximum page size for interactions is 100.
- Requests are authenticated using HTTP Basic Auth.
- Provide your API key as the basic auth password.
- Added the ability to create HTML notes.
- Added the ability to create a note within a thread.
- The absence of a next_page_token indicates that all the records have been fetched.
- Requests use HTTP basic auth with API key as password.
- Only one key per user is supported.
- Webhooks allow you to be notified of events that happen on your Affinity instance.
- Maximum page size for interactions is 100.
- Supports creating HTML notes.
- Parent note should not have a parent_id.
- Currently, we support one key per user on your team.
- Restricts the duration between start_time and end_time to a maximum of one year.
- Ensures that the provided start_time is before the provided end_time.
errors:
- 401 Unauthorized -- Your API key is invalid.
- 403 Forbidden -- Insufficient rights to a resource.
- 404 Not Found -- Requested resource does not exist.
- 422 Unprocessable Entity -- Malformed parameters supplied.
- 429 Too Many Requests -- You have exceeded the rate limit.
- 500 Internal Server Error -- We had a problem with our server.
- 503 Service Unavailable -- This shouldn't generally happen.
- 'Invalid page_token variable: Ensure that the same query parameters are used except
  for page_token.'
- '401 Unauthorized: Your API key is invalid.'
- '403 Forbidden: Insufficient rights to a resource.'
- '404 Not Found: Requested resource does not exist.'
- '422 Unprocessable Entity: Malformed parameters supplied.'
- '429 Too Many Requests: You have exceeded the rate limit.'
- '500 Internal Server Error: We had a problem with our server.'
- '503 Service Unavailable: This shouldn''t generally happen. Either a deploy is in
  process, or Affinity services are down.'
- '503 Service Unavailable: This shouldn''t generally happen.'
- '400 Bad Request: Check required parameters and formatting.'
- '401 Unauthorized: Recheck API key.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://your-instance.api-name.com
  auth:
    type: api_key
    location: header
    flow: refresh_token
    token_url: https://login.api.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    header_name: Authorization
  headers:
    Accept: application/json
    Content-Type: application/json
  paginator:
    type: page
    page_size_param: page_size
    default_page_size: 100
source_metadata: null
