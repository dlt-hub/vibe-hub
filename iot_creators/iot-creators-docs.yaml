resources:
- name: delete_device_by_imei
  endpoint:
    path: /scs-api/{imei}
    method: DELETE
- name: delete_device_by_imei
  endpoint:
    path: /scs-api/{imei}
    method: DELETE
- name: Register application URL
  endpoint:
    path: /reference/register-application-url
    method: PUT
- name: Create subscription
  endpoint:
    path: /reference/register-subscription-1
    method: POST
- name: Get my subscriptions
  endpoint:
    path: /reference/get-subscription-overview
    method: GET
- name: Get devices of subscription
  endpoint:
    path: /reference/get-devs-of-subscription
    method: GET
- name: Get all devices
  endpoint:
    path: /reference/get-all-devices
    method: GET
- name: application_url
  endpoint:
    path: /reference/register-application-url
    method: PUT
- name: subscription
  endpoint:
    path: /reference/register-subscription
    method: POST
- name: get_subscriptions
  endpoint:
    path: /reference/get-subscription-overview
    method: GET
- name: get_device
  endpoint:
    path: /reference/get-device
    method: GET
- name: add_device
  endpoint:
    path: /reference/add-device
    method: POST
- name: reports
  endpoint:
    path: /reports
    method: POST
    data_selector: reports
    params: {}
- name: reports
  endpoint:
    path: /reports
    method: POST
    data_selector: reports
- name: register_application_url
  endpoint:
    path: /m2m/applications/registration
    method: PUT
- name: register_application
  endpoint:
    path: /m2m/applications/registration
    method: PUT
- name: subscriptions
  endpoint:
    path: /register-subscription
    method: POST
- name: devices
  endpoint:
    path: /get-all-devices
    method: GET
- name: file_objects
  endpoint:
    path: /list-all-files-for-an-account
    method: GET
- name: create_subscription
  endpoint:
    path: /m2m/subscriptions
    method: POST
- name: create_subscription
  endpoint:
    path: /m2m/subscriptions
    method: POST
    params:
      type: '{type}'
- name: create_subscription
  endpoint:
    path: /reference/register-subscription-1
    method: POST
- name: get_my_subscriptions
  endpoint:
    path: /reference/get-subscription-overview
    method: GET
- name: create_subscription
  endpoint:
    path: /reference/register-subscription-1
    method: POST
    data_selector: subscriptionType
    params: {}
- name: get_my_subscriptions
  endpoint:
    path: /reference/get-subscription-overview
    method: GET
    data_selector: subscriptions
    params: {}
- name: my_subscriptions
  endpoint:
    path: /m2m/mysubscriptions
    method: GET
- name: my_subscriptions
  endpoint:
    path: /m2m/mysubscriptions
    method: GET
- name: subscription
  endpoint:
    path: /subscriptions/{id}
    method: GET
- name: subscription
  endpoint:
    path: /m2m/subscriptions/{id}
    method: GET
- name: delete_subscription
  endpoint:
    path: /m2m/subscriptions/{id}
    method: DELETE
- name: delete_subscription
  endpoint:
    path: /m2m/subscriptions/{id}
    method: DELETE
- name: add_devices_to_subscription
  endpoint:
    path: /m2m/subscriptions/{id}/serialNumbers
    method: POST
- name: add_devices_to_subscription
  endpoint:
    path: /m2m/subscriptions/{id}/serialNumbers
    method: POST
- name: delete_devices_from_subscription
  endpoint:
    path: /m2m/subscriptions/{id}/serialNumbers
    method: DELETE
- name: devices_of_subscription
  endpoint:
    path: /m2m/subscriptions/{id}/serialNumbers
    method: GET
- name: delete_devices_from_subscription
  endpoint:
    path: /m2m/subscriptions/{id}/serialNumbers
    method: DELETE
- name: devices
  endpoint:
    path: /rest/device
    method: GET
    data_selector: response
    params:
      iDisplayLength: '{displayLength}'
      iDisplayStart: '{displayStart}'
- name: devices_of_subscription
  endpoint:
    path: /m2m/subscriptions/{id}/serialNumbers
    method: GET
- name: device
  endpoint:
    path: /rest/device/{id}
    method: GET
- name: read_lwm2m_resource
  endpoint:
    path: /m2m/endpoints/{imei}/{obj_id}/{instance}/{resource_id}
    method: GET
- name: devices
  endpoint:
    path: /rest/device
    method: GET
    params:
      iDisplayLength: '{displayLength}'
      iDisplayStart: '{displayStart}'
- name: device_by_imei
  endpoint:
    path: /scs-api/device/{imei}
    method: GET
- name: device
  endpoint:
    path: /rest/device/{id}
    method: GET
- name: downlink_queue
  endpoint:
    path: /scs-api/device/{imei}/queue
    method: GET
- name: Read LWM2M resource
  endpoint:
    path: /m2m/endpoints/{imei}/{obj_id}/{instance}/{resource_id}
    method: GET
- name: get_registered_application_url
  endpoint:
    path: /scs-api/application
    method: GET
- name: device_by_imei
  endpoint:
    path: /scs-api/device/{imei}
    method: GET
- name: uplinks_message_history
  endpoint:
    path: /uplnkmsgstore/messages/{id}
    method: GET
- name: downlink_queue
  endpoint:
    path: /scs-api/device/{imei}/queue
    method: GET
- name: add_device
  endpoint:
    path: /m2m/endpoints
    method: POST
- name: add_lwm2m_device
  endpoint:
    path: /add-lwm2m-device
    method: POST
    data_selector: null
    params: {}
- name: add_device
  endpoint:
    path: /add-device
    method: POST
    data_selector: data
    params: {}
- name: uplinks_message_history
  endpoint:
    path: /uplnkmsgstore/messages/{id}
    method: GET
- name: add_mqtt_device
  endpoint:
    path: /add-mqtt-device-tls-ca
    method: POST
    data_selector: MQTT body request
    params: {}
- name: add_device
  endpoint:
    path: /m2m/endpoints
    method: POST
- name: delete_device
  endpoint:
    path: /rest/device/{id}
    method: DELETE
- name: add_lwm2m_device
  endpoint:
    path: /add-lwm2m-device
    method: POST
- name: add_coap_dtls_device
  endpoint:
    path: /add-device
    method: POST
- name: empty_downlink_queue
  endpoint:
    path: /m2m/endpoints/{serialNumber}/downlink/0/emptyqueue
    method: PUT
- name: add_mqtt_device
  endpoint:
    path: /add-mqtt-device-tls-ca
    method: POST
    data_selector: MQTT body request
    params: {}
- name: delete_device
  endpoint:
    path: /rest/device/{id}
    method: DELETE
- name: write_lwm2m_resource
  endpoint:
    path: /m2m/endpoints/{serialNumber}/{object_id}/{instance}/{resource_id}
    method: PUT
- name: empty_downlink_queue
  endpoint:
    path: /m2m/endpoints/{serialNumber}/downlink/0/emptyqueue
    method: PUT
- name: send_downlink_message
  endpoint:
    path: /m2m/endpoints/{serialNumber}/downlinkMsg/0/data
    method: PUT
- name: enable_disable_udp_acks
  endpoint:
    path: /m2m/endpoints/{serialNumber}/uplinkMsg/0/ack
    method: PUT
- name: send_base64_downlink_message
  endpoint:
    path: /m2m/endpoints/{serialNumber}/downlinkMsgBase64/0/data
    method: PUT
- name: write_lwm2m_resource
  endpoint:
    path: /m2m/endpoints/{serialNumber}/{object_id}/{instance}/{resource_id}
    method: PUT
- name: send_base64_edrx_downlink_message
  endpoint:
    path: /m2m/endpoints/{serialNumber}/downlinkMsgBase64Drx/0/data
    method: PUT
- name: send_downlink_message
  endpoint:
    path: /m2m/endpoints/{serialNumber}/downlinkMsg/0/data
    method: PUT
- name: add_a_new_file
  endpoint:
    path: /reference/add-a-new-file
    method: POST
- name: upload_binary_content_of_file
  endpoint:
    path: /reference/upload-binary-content-of-file
    method: PUT
- name: add_file
  endpoint:
    path: /downloadsvr/file
    method: POST
- name: send_base64_downlink_message
  endpoint:
    path: /m2m/endpoints/{serialNumber}/downlinkMsgBase64/0/data
    method: PUT
- name: file_object
  endpoint:
    path: /downloadsvr/file/{id}
    method: GET
    data_selector: file
    params: {}
- name: send_base64_eDRX_downlink_message
  endpoint:
    path: /m2m/endpoints/{serialNumber}/downlinkMsgBase64Drx/0/data
    method: PUT
- name: file_objects
  endpoint:
    path: /downloadsvr/file
    method: GET
    data_selector: array of json objects
- name: delete_file
  endpoint:
    path: /downloadsvr/file/{id}
    method: DELETE
- name: upload_binary_content
  endpoint:
    path: /downloadsvr/file/{id}/upload
    method: PUT
- name: add_a_new_file
  endpoint:
    path: /reference/add-a-new-file
    method: POST
- name: upload_binary_content_of_file
  endpoint:
    path: /reference/upload-binary-content-of-file
    method: PUT
- name: get_file_object_by_id
  endpoint:
    path: /reference/download-file-object-by-id
    method: GET
- name: list_all_file_objects_for_an_account
  endpoint:
    path: /reference/list-all-files-for-an-account
    method: GET
- name: delete_a_file_by_id
  endpoint:
    path: /reference/delete-file-by-id
    method: DELETE
- name: download_file_binary_content_by_id
  endpoint:
    path: /reference/download-file-binary-content-by-id
    method: GET
- name: download_file_metadata_by_id
  endpoint:
    path: /reference/download-file-metadata-by-id
    method: GET
- name: download_file_binary_content_by_hashname
  endpoint:
    path: /reference/download-file-binary-content-by-hashname
    method: GET
- name: download_file_meta_by_hashname
  endpoint:
    path: /reference/download-file-meta-by-hashname
    method: GET
- name: download_file_binary_content
  endpoint:
    path: /downloadsvr/file/{id}/content
    method: GET
- name: add_file
  endpoint:
    path: /downloadsvr/file
    method: POST
- name: download_file_metadata
  endpoint:
    path: /downloadsvr/file/{id}/meta
    method: GET
    data_selector: file_metadata
- name: file_object
  endpoint:
    path: /downloadsvr/file/{id}
    method: GET
    data_selector: file
    params: {}
- name: download_file_binary_content_by_hashname
  endpoint:
    path: /downloadsvr/{tenantId}/{fileHashName}/content
    method: GET
- name: file_objects
  endpoint:
    path: /downloadsvr/file
    method: GET
    data_selector: json
    params: {}
- name: download_file_meta_by_hashname
  endpoint:
    path: /downloadsvr/{tenantId}/{fileHashName}/meta
    method: GET
    data_selector: id
    params: {}
- name: delete_file_by_id
  endpoint:
    path: /downloadsvr/file/{id}
    method: DELETE
- name: upload_binary_content_of_file
  endpoint:
    path: /downloadsvr/file/{id}/upload
    method: PUT
- name: download_file_binary_content
  endpoint:
    path: /downloadsvr/file/{id}/content
    method: GET
- name: public_apn
  endpoint:
    path: /docs/nb-iot-network-information/public-apn
    method: GET
    data_selector: apn_info
    params: {}
- name: download_file_metadata
  endpoint:
    path: /downloadsvr/file/{id}/meta
    method: GET
    data_selector: response
    params: {}
- name: download_file_binary_content_by_hashname
  endpoint:
    path: /downloadsvr/{tenantId}/{fileHashName}/content
    method: GET
- name: download_file_meta_by_hashname
  endpoint:
    path: /downloadsvr/{tenantId}/{fileHashName}/meta
    method: GET
    data_selector: fileMeta
- name: APN configuration
  endpoint:
    path: /apn-configuration
    method: GET
    data_selector: data
    params: {}
- name: Power-Saving Features
  endpoint:
    path: /power-saving-features
    method: GET
    data_selector: data
    params: {}
- name: Data Packet Buffering
  endpoint:
    path: /data-packet-buffering
    method: GET
    data_selector: data
    params: {}
- name: SMS support
  endpoint:
    path: /sms-support
    method: GET
    data_selector: data
    params: {}
- name: Voice Support
  endpoint:
    path: /voice-support
    method: GET
    data_selector: data
    params: {}
- name: Coverage Enhancement Mode
  endpoint:
    path: /coverage-enhancement-mode
    method: GET
    data_selector: data
    params: {}
- name: Roaming
  endpoint:
    path: /roaming
    method: GET
    data_selector: data
    params: {}
- name: low_power_modes
  endpoint:
    path: /low-power-features
    method: GET
    data_selector: low_power_modes
    params: {}
- name: nidd
  endpoint:
    path: /non-ip-data-delivery
    method: GET
    data_selector: nidd_info
    params: {}
- name: APN Configuration
  endpoint:
    path: /docs/nb-iot-network-information#apn-configuration
    method: GET
    data_selector: APN details
    params: {}
- name: Power-Saving Features
  endpoint:
    path: /docs/nb-iot-network-information#power-saving-features
    method: GET
    data_selector: Power-saving details
    params: {}
- name: Data Packet Buffering
  endpoint:
    path: /docs/nb-iot-network-information#data-packet-buffering
    method: GET
    data_selector: Buffering details
    params: {}
- name: Coverage Enhancement Levels
  endpoint:
    path: /docs/nb-iot-network-information#coverage-enhancement-levels
    method: GET
    data_selector: Coverage enhancement details
    params: {}
- name: APN Configuration
  endpoint:
    path: /docs/apn-configuration
    method: GET
    data_selector: data
    params: {}
- name: Power-Saving Features
  endpoint:
    path: /docs/power-saving-features
    method: GET
    data_selector: data
    params: {}
- name: Data Packet Buffering
  endpoint:
    path: /docs/data-packet-buffering
    method: GET
    data_selector: data
    params: {}
- name: SMS Support
  endpoint:
    path: /docs/sms-support
    method: GET
    data_selector: data
    params: {}
- name: Voice Support
  endpoint:
    path: /docs/voice-support
    method: GET
    data_selector: data
    params: {}
- name: Coverage Enhancement Mode
  endpoint:
    path: /docs/coverage-enhancement-mode
    method: GET
    data_selector: data
    params: {}
- name: Roaming
  endpoint:
    path: /docs/roaming
    method: GET
    data_selector: data
    params: {}
- name: lte_m_europe
  endpoint:
    path: /lte-m/europe
    method: GET
    data_selector: records
- name: nb_iot_europe
  endpoint:
    path: /nb-iot/europe
    method: GET
    data_selector: records
- name: lte_m_non_europe
  endpoint:
    path: /lte-m/non-europe
    method: GET
    data_selector: records
- name: nb_iot_non_europe
  endpoint:
    path: /nb-iot/non-europe
    method: GET
    data_selector: records
- name: bands_and_frequencies
  endpoint:
    path: /bands-frequencies
    method: GET
    data_selector: records
- name: Neul Connector
  endpoint:
    path: /neul
    method: GET
    data_selector: records
    params:
      ip: 172.27.131.100
      port: '5683'
- name: UDP Device Connector
  endpoint:
    path: /udp
    method: GET
    data_selector: records
    params:
      ip: 172.27.131.100
      port: '15683'
- name: CoAP Connector without DTLS
  endpoint:
    path: /coap
    method: GET
    data_selector: records
    params:
      ip: 172.27.130.105
      port: '6683'
- name: CoAP Connector with DTLS
  endpoint:
    path: /coap/dtls
    method: GET
    data_selector: records
    params:
      url: coap.scs.iot.telekom.com
      port: '6684'
- name: LWM2M Server with DTLS
  endpoint:
    path: /lwm2m/dtls
    method: GET
    data_selector: records
    params:
      ip: 172.27.130.105
      port: '5684'
- name: LWM2M Server without DTLS
  endpoint:
    path: /lwm2m
    method: GET
    data_selector: records
    params:
      ip: 172.27.130.105
      port: '5683'
- name: LWM2M Server via public internet with DTLS
  endpoint:
    path: /lwm2m/public/dtls
    method: GET
    data_selector: records
    params:
      url: lwm2m.scs.iot.telekom.com
      port: '5684'
- name: MQTT Server without TLS
  endpoint:
    path: /mqtt
    method: GET
    data_selector: records
    params:
      ip: 172.27.130.105
      port: '1883'
- name: MQTT Server via public internet with TLS
  endpoint:
    path: /mqtt/public/tls
    method: GET
    data_selector: records
    params:
      url: mqtt.scs.iot.telekom.com
      port: '8883'
- name: NTP Time Service
  endpoint:
    path: /ntp
    method: GET
    data_selector: records
    params:
      ip: 172.27.130.105, 172.27.131.106, 172.22.193.105
      port: '123'
- name: PING service
  endpoint:
    path: /ping
    method: GET
    data_selector: records
    params:
      ip: 172.27.131.239
- name: IoT Creators Application API
  endpoint:
    path: /api
    method: GET
    data_selector: records
    params:
      url: https://api.scs.iot.telekom.com
- name: IoT Creators WebHook source IP
  endpoint:
    path: /webhook
    method: GET
    data_selector: records
    params:
      ip: 18.197.119.162, 18.195.17.174, 3.125.141.127
- name: standard_sim
  endpoint:
    path: /docs/sim-cards/standard
    method: GET
    data_selector: records
- name: industrial_sim
  endpoint:
    path: /docs/sim-cards/industrial
    method: GET
    data_selector: records
- name: esim
  endpoint:
    path: /docs/sim-cards/esim
    method: GET
    data_selector: records
- name: nusim
  endpoint:
    path: /docs/sim-cards/nusim
    method: GET
    data_selector: records
- name: sim_card_formats
  endpoint:
    path: /docs/sim-cards/formats
    method: GET
    data_selector: records
- name: product_information
  endpoint:
    path: /api/product/information
    method: GET
    data_selector: product_info
- name: imei
  endpoint:
    path: /api/device/imei
    method: GET
    data_selector: imei
- name: last_error
  endpoint:
    path: /api/device/error
    method: GET
    data_selector: last_error
- name: network_configuration
  endpoint:
    path: /network/configuration
    method: POST
    data_selector: configuration
    params:
      band: 1,8
      apn: scs.telekom.tma.iot
      operator: '20416'
- name: send_hello_world
  endpoint:
    path: /send_message
    method: POST
    data_selector: response
    params: {}
- name: forward_message
  endpoint:
    path: /forward/message
    method: POST
    data_selector: reports
    params: {}
- name: Neul Connector
  endpoint:
    path: /coap
    method: GET
    data_selector: parameters
    params:
      ip: 172.27.131.100
      port: '5683'
- name: UDP Device Connector
  endpoint:
    path: /udp
    method: GET
    data_selector: parameters
    params:
      ip: 172.27.131.100
      port: '15683'
- name: CoAP Connector without DTLS
  endpoint:
    path: /coap_no_dtls
    method: GET
    data_selector: parameters
    params:
      ip: 172.27.130.105
      port: '6683'
- name: CoAP Connector with DTLS
  endpoint:
    path: /coap_with_dtls
    method: GET
    data_selector: parameters
    params:
      url: coap.scs.iot.telekom.com
      port: '6684'
- name: LWM2M Server with DTLS
  endpoint:
    path: /lwm2m_with_dtls
    method: GET
    data_selector: parameters
    params:
      ip: 172.27.130.105
      port: '5684'
- name: LWM2M Server without DTLS
  endpoint:
    path: /lwm2m_no_dtls
    method: GET
    data_selector: parameters
    params:
      ip: 172.27.130.105
      port: '5683'
- name: LWM2M Server via public internet with DTLS
  endpoint:
    path: /lwm2m_public_with_dtls
    method: GET
    data_selector: parameters
    params:
      url: lwm2m.scs.iot.telekom.com
      port: '5684'
- name: MQTT Server without TLS
  endpoint:
    path: /mqtt_no_tls
    method: GET
    data_selector: parameters
    params:
      ip: 172.27.130.105
      port: '1883'
- name: MQTT Server via public internet with TLS
  endpoint:
    path: /mqtt_public_with_tls
    method: GET
    data_selector: parameters
    params:
      url: mqtt.scs.iot.telekom.com
      port: '8883'
- name: NTP Time Service
  endpoint:
    path: /ntp
    method: GET
    data_selector: parameters
    params:
      ip:
      - 172.27.130.105
      - 172.27.131.106
      - 172.22.193.105
      port: '123'
- name: PING service
  endpoint:
    path: /ping
    method: GET
    data_selector: parameters
    params:
      ip: 172.27.131.239
- name: downlink_message
  endpoint:
    path: /m2m/endpoints/<My Device Id>/downlinkMsg/0/data
    method: PUT
    data_selector: msg
    params: {}
- name: network_configuration
  endpoint:
    path: /attach-to-nb-iot-network
    method: GET
    data_selector: records
    params: {}
- name: send_message
  endpoint:
    path: /send/message
    method: POST
    data_selector: response
    params: {}
- name: forward_message
  endpoint:
    path: /your/application/url
    method: POST
    data_selector: reports
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: response
    params: {}
- name: udp_socket
  endpoint:
    path: /udp_socket
    method: POST
    data_selector: response
    params: {}
- name: downlink_message
  endpoint:
    path: /m2m/endpoints/<My Device Id>/downlinkMsg/0/data
    method: PUT
    data_selector: resourceValue
    params: {}
- name: ping_udp_server
  endpoint:
    path: /ping
    method: GET
    data_selector: records
- name: device_information
  endpoint:
    path: /device/information
    method: GET
    data_selector: records
- name: network_configuration
  endpoint:
    path: /network/configuration
    method: GET
    data_selector: records
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: response
- name: send_message
  endpoint:
    path: /send
    method: POST
    data_selector: response
- name: device_information
  endpoint:
    path: /device-information
    method: GET
    data_selector: device_info
- name: network_attachment
  endpoint:
    path: /network-attachment
    method: GET
    data_selector: network_info
- name: send_hello_world
  endpoint:
    path: /send_hello_world
    method: POST
    data_selector: response
    params: {}
- name: receive_hello_device
  endpoint:
    path: /receive_hello_device
    method: GET
    data_selector: response
    params: {}
- name: ping_udp_server
  endpoint:
    path: /ping
    method: GET
    data_selector: response
    params: {}
- name: send_hello_world
  endpoint:
    path: /send
    method: POST
    data_selector: response
    params:
      message: 48656c6c6f20576f726c64
- name: receive_message
  endpoint:
    path: /receive
    method: GET
    data_selector: message
    params: {}
- name: downlink_message
  endpoint:
    path: /downlink/message
    method: GET
    data_selector: queued_message
    params: {}
- name: network_info
  endpoint:
    path: /api/network_info
    method: GET
    data_selector: data
    params: {}
- name: ping_udp_server
  endpoint:
    path: /ping
    method: GET
    data_selector: response
    params:
      ip_address: 172.27.131.100
- name: send_hello_world
  endpoint:
    path: /send
    method: POST
    data_selector: response
    params:
      message: 48656c6c6f20576f726c64
      destination: 172.27.131.100
      port: 15683
- name: receive_hello_device
  endpoint:
    path: /receive
    method: GET
    data_selector: response
    params: {}
- name: UDP Server
  endpoint:
    path: /SNPING4
    method: GET
    data_selector: response
- name: device_information
  endpoint:
    path: /api/device/information
    method: GET
    data_selector: device_info
- name: network_configuration
  endpoint:
    path: /api/network/configuration
    method: GET
    data_selector: network_config
- name: ping_udp_server
  endpoint:
    path: /ping
    method: GET
    data_selector: response
    params:
      ip_address: 172.27.131.100
      timeout: 20000
- name: send_hello_world
  endpoint:
    path: /send
    method: POST
    data_selector: response
    params:
      message: 48656c6c6f20576f726c64
      socket_id: 0
- name: device_information
  endpoint:
    path: /device-information
    method: GET
    data_selector: records
    params: {}
- name: network_configuration
  endpoint:
    path: /network-configuration
    method: POST
    data_selector: records
    params: {}
- name: device_registration
  endpoint:
    path: /device/register
    method: POST
    data_selector: registration_status
    params: {}
- name: send_udp_message
  endpoint:
    path: /udp/send
    method: POST
    data_selector: send_status
    params: {}
- name: receive_downlink_message
  endpoint:
    path: /downlink/receive
    method: GET
    data_selector: received_messages
    params: {}
- name: device_information
  endpoint:
    path: /dev/device_information
    method: GET
    data_selector: records
    params: {}
- name: network_configuration
  endpoint:
    path: /dev/network_configuration
    method: GET
    data_selector: records
    params: {}
- name: ping_service
  endpoint:
    path: /dev/ping_service
    method: GET
    data_selector: records
    params: {}
- name: network_configuration
  endpoint:
    path: /network/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: response
    params: {}
- name: device_information
  endpoint:
    path: /device-information
    method: GET
    data_selector: device_info
- name: network_information
  endpoint:
    path: /network-information
    method: GET
    data_selector: network_info
- name: network_attach
  endpoint:
    path: /network/attach
    method: POST
    data_selector: response
    params: {}
- name: send_message
  endpoint:
    path: /messages/send
    method: POST
    data_selector: response
    params: {}
- name: receive_message
  endpoint:
    path: /messages/receive
    method: GET
    data_selector: response
    params: {}
- name: device_information
  endpoint:
    path: /device/information
    method: GET
    data_selector: device_info
- name: network_configuration
  endpoint:
    path: /network/configuration
    method: GET
    data_selector: records
    params: {}
- name: udp_server
  endpoint:
    path: /udp/server
    method: GET
    data_selector: records
    params: {}
- name: device_information
  endpoint:
    path: /dev/ttyACM0
    method: GET
    data_selector: device_info
    params: {}
- name: device_information
  endpoint:
    path: /device/info
    method: GET
    data_selector: device_info
- name: network_configuration
  endpoint:
    path: /network/config
    method: POST
    data_selector: network_config
- name: network_configuration
  endpoint:
    path: /network/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping_response
    params: {}
- name: heartbeat
  endpoint:
    path: /heartbeat
    method: POST
    data_selector: response
    params: {}
- name: hello_device
  endpoint:
    path: /hello_device
    method: GET
    data_selector: response
    params: {}
- name: network_configuration
  endpoint:
    path: /network/configuration
    method: GET
    data_selector: configuration
    params: {}
- name: assigned_ip
  endpoint:
    path: /network/ip
    method: GET
    data_selector: ip_address
    params: {}
- name: device_info
  endpoint:
    path: /device_info
    method: GET
    data_selector: records
    params: {}
- name: device_information
  endpoint:
    path: /query/device/information
    method: GET
    data_selector: device_info
- name: network_attachment
  endpoint:
    path: /attach/network
    method: POST
    data_selector: network_response
- name: network_configuration
  endpoint:
    path: /commands/network_configuration
    method: GET
    data_selector: commands
    params: {}
- name: udp_communication
  endpoint:
    path: /commands/udp_communication
    method: GET
    data_selector: commands
    params: {}
- name: dns_configuration
  endpoint:
    path: /commands/dns_configuration
    method: GET
    data_selector: commands
    params: {}
- name: device_information
  endpoint:
    path: /device/information
    method: GET
    data_selector: device_info
    params: {}
- name: network_configuration
  endpoint:
    path: /AT+UMNOPROF=1
    method: SET
    data_selector: ''
    params: {}
- name: set_URAT_LTE_M
  endpoint:
    path: /AT+URAT=7
    method: SET
    data_selector: ''
    params: {}
- name: set_URAT_NB_IoT
  endpoint:
    path: /AT+URAT=8
    method: SET
    data_selector: ''
    params: {}
- name: set_APN
  endpoint:
    path: /AT+CGDCONT=0,"IP","m2m.public.nl"
    method: SET
    data_selector: ''
    params: {}
- name: set_network_registration_status
  endpoint:
    path: /AT+CEREG=3
    method: SET
    data_selector: ''
    params: {}
- name: select_network_operator
  endpoint:
    path: /AT+COPS=1,2,"26201"
    method: SET
    data_selector: ''
    params: {}
- name: network_configuration
  endpoint:
    path: /network/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: ping_server
  endpoint:
    path: /network/ping
    method: GET
    data_selector: ping_response
    params: {}
- name: device_information
  endpoint:
    path: /api/device/information
    method: GET
    data_selector: device_info
- name: network_attachment
  endpoint:
    path: /api/network/attach
    method: POST
    data_selector: network_status
- name: send_heartbeat
  endpoint:
    path: /send/heartbeat
    method: POST
    data_selector: message
    params: {}
- name: receive_message
  endpoint:
    path: /receive/message
    method: GET
    data_selector: message
    params: {}
- name: network_configuration
  endpoint:
    path: /network/configuration
    method: SET
    data_selector: configuration
    params:
      apn: cdp.iot.t-mobile.nl
- name: ping_server
  endpoint:
    path: /ping
    method: GET
    data_selector: response
    params:
      address: 172.27.131.100
- name: send_message
  endpoint:
    path: /send
    method: POST
    data_selector: response
    params:
      message: Hello World
- name: receive_message
  endpoint:
    path: /receive
    method: GET
    data_selector: message
    params: {}
- name: device_information
  endpoint:
    path: /device/information
    method: GET
    data_selector: device_data
- name: udp_socket
  endpoint:
    path: /send
    method: POST
    data_selector: response
    params: {}
- name: network_configuration
  endpoint:
    path: /network/configuration
    method: GET
    data_selector: configuration
    params:
      APN: m2m.public.nl
      MNO: '26201'
- name: mqtt_broker
  endpoint:
    path: /mqtt/broker
    method: GET
    data_selector: broker
    params:
      port: 1883
      server_name: your_broker_url
      server_ip: your_broker_IP
- name: device_information
  endpoint:
    path: /device/information
    method: GET
    data_selector: information
    params: {}
- name: network_attachment
  endpoint:
    path: /network/attachment
    method: POST
    data_selector: attachment
    params: {}
- name: network_configuration
  endpoint:
    path: /setup/network/configuration
    method: POST
- name: ping
  endpoint:
    path: /network/ping
    method: GET
- name: udp_message
  endpoint:
    path: /messages/udp
    method: POST
- name: M-Bus to NB-IoT converter
  endpoint:
    path: /docs/acrios-mbus-nbiot-gateway
    method: GET
- name: LoRaWAN Vibration sensor WISE-2410
  endpoint:
    path: /docs/advantech-lorawan-vibration-sensor-wise-2410
    method: GET
- name: Sensor platform box
  endpoint:
    path: /docs/akkr8-sensor-platform
    method: GET
- name: Distance Detection sensor
  endpoint:
    path: /docs/dragino-distance-detection-sensor-ndds75
    method: GET
- name: Soil and moisture&EC sensor NSE01
  endpoint:
    path: /docs/dragino-soil-moisture-ec-sensor-nse01
    method: GET
- name: Soil PH sensor NSPH01
  endpoint:
    path: /docs/dragino-soil-ph-sensor-nsph01
    method: GET
- name: Open/close outdoor door sensor NDS03A
  endpoint:
    path: /docs/dragino-outdoor-door-sensor-nds03a
    method: GET
- name: Leaf moisture sensor NLMS01
  endpoint:
    path: /docs/dragino-leaf-moisture-sensor-nlms01
    method: GET
- name: Temperature/moisture sensor N95S31B
  endpoint:
    path: /docs/dragino-temperature-moisture-sensor-n95s31b
    method: GET
- name: Dry-contact/open-close sensor CPN01
  endpoint:
    path: /docs/dragino-dry-contact-open-close-sensor-cpn01
    method: GET
- name: open/close sensor
  endpoint:
    path: /docs/efento-sensors
    method: GET
- name: Pulse counter
  endpoint:
    path: /docs/efento-sensors
    method: GET
- name: Soil moisture & temperature sensor
  endpoint:
    path: /docs/efento-sensors
    method: GET
- name: PTD2-N pressure sensor
  endpoint:
    path: /docs/ellenex-pressure-sensor-ptd2-n
    method: GET
- name: PLS2-N liquid level transmitter
  endpoint:
    path: /docs/ellenex-pls2-n-liquid-level-transmitter
    method: GET
- name: DUS2-N ultrasonic level sensor
  endpoint:
    path: /docs/ellenex-dus2-n-ultrasonic-level-sensor
    method: GET
- name: Comfort sensor
  endpoint:
    path: /docs/imbuildings-comfort-sensor
    method: GET
- name: Mood box
  endpoint:
    path: /docs/imbuildings-comfort-sensor
    method: GET
- name: NB-IoT Button
  endpoint:
    path: /docs/imbuildings-comfort-sensor
    method: GET
- name: Waste meter sensor
  endpoint:
    path: /docs/iot-solutions-waste-meter-sensor
    method: GET
- name: Ring buoy sensor
  endpoint:
    path: /docs/iot-solutions-ring-buoy-sensor
    method: GET
- name: Parking sensor
  endpoint:
    path: /docs/iot-solutions-ltd-iot-park-sensor
    method: GET
- name: Miro Click
  endpoint:
    path: /docs/miromico-miro-click
    method: GET
- name: AMPSENSE
  endpoint:
    path: /docs/nanosensorics-ampsense
    method: GET
- name: Carbonless
  endpoint:
    path: /docs/nanosensorics-carbonless
    method: GET
- name: PIKKSENSE
  endpoint:
    path: /docs/pikk-systems-pikksense-ps-280
    method: GET
- name: Asset tracker Astra-1b
  endpoint:
    path: /docs/stm-asset-tracker-astra-ab
    method: GET
- name: vM-Bus NB-IOT gateway SWAN2-c
  endpoint:
    path: /docs/weptech-wm-bus-nbiot-gateway-swan2-c
    method: GET
- name: NB-IoT pulse counter
  endpoint:
    path: /docs/x-logic-nb-iot-pulse-meter
    method: GET
- name: M-Bus IoT converter
  endpoint:
    path: /api/configuration
    method: POST
    data_selector: configuration
    params:
      APN: auto
      PLMNID: '0'
      ip: 172.27.131.100
      port: 15683
      protocol: UDP
- name: Device Configuration
  endpoint:
    path: /configure/device
    method: POST
    data_selector: device_parameters
- name: Payload Decoder
  endpoint:
    path: /decode/payload
    method: POST
    data_selector: decoded_payload
- name: M-Bus to NB-IoT converter
  endpoint:
    path: /docs/acrios-mbus-nbiot-gateway
    method: GET
- name: LoRaWAN Vibration sensor WISE-2410
  endpoint:
    path: /docs/advantech-lorawan-vibration-sensor-wise-2140
    method: GET
- name: Sensor platform box
  endpoint:
    path: /docs/akkr8-sensor-platform
    method: GET
- name: Distance Detection sensor
  endpoint:
    path: /docs/dragino-distance-detection-sensor-ndds75
    method: GET
- name: Soil and moisture&EC sensor NSE01
  endpoint:
    path: /docs/dragino-soil-moisture-ec-sensor-nse01
    method: GET
- name: Soil PH sensor NSPH01
  endpoint:
    path: /docs/dragino-soil-ph-sensor-nsph01
    method: GET
- name: Open/close outdoor door sensor NDS03A
  endpoint:
    path: /docs/dragino-outdoor-door-sensor-nds03a
    method: GET
- name: Leaf moisture sensor NLMS01
  endpoint:
    path: /docs/dragino-leaf-moisture-sensor-nlms01
    method: GET
- name: Temperature/moisture sensor N95S31B
  endpoint:
    path: /docs/dragino-temperature-moisture-sensor-n95s31b
    method: GET
- name: Dry-contact/open-close sensor CPN01
  endpoint:
    path: /docs/dragino-dry-contact-open-close-sensor-cpn01
    method: GET
- name: open/close sensor
  endpoint:
    path: /docs/efento-sensors
    method: GET
- name: Pulse counter
  endpoint:
    path: /docs/efento-sensors
    method: GET
- name: Soil moisture & temperature sensor
  endpoint:
    path: /docs/efento-sensors
    method: GET
- name: PTD2-N pressure sensor
  endpoint:
    path: /docs/ellenex-pressure-sensor-ptd2-n
    method: GET
- name: PLS2-N liquid level transmitter
  endpoint:
    path: /docs/ellenex-pls2-n-liquid-level-transmitter
    method: GET
- name: DUS2-N ultrasonic level sensor
  endpoint:
    path: /docs/ellenex-dus2-n-ultrasonic-level-sensor
    method: GET
- name: Comfort sensor
  endpoint:
    path: /docs/imbuildings-comfort-sensor
    method: GET
- name: Mood box
  endpoint:
    path: /docs/imbuildings-comfort-sensor
    method: GET
- name: NB-IoT Button
  endpoint:
    path: /docs/imbuildings-comfort-sensor
    method: GET
- name: Waste meter sensor
  endpoint:
    path: /docs/iot-solutions-waste-meter-sensor
    method: GET
- name: Ring buoy sensor
  endpoint:
    path: /docs/iot-solutions-ring-buoy-sensor
    method: GET
- name: Parking sensor
  endpoint:
    path: /docs/iot-solutions-ltd-iot-park-sensor
    method: GET
- name: Miro Click
  endpoint:
    path: /docs/miromico-miro-click
    method: GET
- name: AMPSENSE
  endpoint:
    path: /docs/nanosensorics-ampsense
    method: GET
- name: Carbonless
  endpoint:
    path: /docs/nanosensorics-carbonless
    method: GET
- name: PIKKSENSE
  endpoint:
    path: /docs/pikk-systems-pikksense-ps-280
    method: GET
- name: Asset tracker Astra-1b
  endpoint:
    path: /docs/stm-asset-tracker-astra-ab
    method: GET
- name: vM-Bus NB-IOT gateway SWAN2-c
  endpoint:
    path: /docs/weptech-wm-bus-nbiot-gateway-swan2-c
    method: GET
- name: NB-IoT pulse counter
  endpoint:
    path: /docs/x-logic-nb-iot-pulse-meter
    method: GET
- name: device_report
  endpoint:
    path: /iotcreators
    method: POST
    data_selector: reports
- name: add_device
  endpoint:
    path: /reference/add-device
    method: POST
    data_selector: serialNumber
    params: {}
- name: create_subscription
  endpoint:
    path: /reference/register-subscription-1
    method: POST
    data_selector: subscriptionType
    params: {}
- name: configuration
  endpoint:
    path: /configuration
    method: POST
    data_selector: configurations
    params:
      APN: auto
      PLMNID: '0'
      ip: 172.27.131.100
      port: 15683
      protocol: UDP
- name: sensor_data
  endpoint:
    path: /uplinkMsg
    method: POST
    data_selector: reports
    params: {}
- name: device_reports
  endpoint:
    path: /iotcreators
    method: POST
- name: Akkr8
  endpoint:
    path: /integration
    method: POST
- name: device_registration
  endpoint:
    path: /register_device
    method: POST
    data_selector: response
    params: {}
- name: send_data
  endpoint:
    path: /send_data
    method: POST
    data_selector: response
    params: {}
- name: Add device
  endpoint:
    path: /reference/add-device
    method: POST
    data_selector: response
    params: {}
- name: Create subscription
  endpoint:
    path: /reference/register-subscription-1
    method: POST
    data_selector: response
    params: {}
- name: device_data
  endpoint:
    path: /data
    method: POST
    data_selector: payload
- name: sensor_data
  endpoint:
    path: /uplinkMsg
    method: POST
    data_selector: reports
    params: {}
- name: device_data
  endpoint:
    path: /path/to/device/data
    method: POST
    data_selector: data
    params: {}
- name: temperature_humidity_sensor
  endpoint:
    path: /dragino-n95s31b
    method: GET
    data_selector: payload
    params: {}
- name: device_registration
  endpoint:
    path: /docs/3-register-devkit
    method: GET
    data_selector: records
    params: {}
- name: send_data
  endpoint:
    path: /docs/5-forward-message-to-application
    method: POST
    data_selector: records
    params: {}
- name: dragino_nse01
  endpoint:
    path: /dragino/nse01
    method: POST
    data_selector: data
    params: {}
- name: device_data
  endpoint:
    path: /data/upload
    method: POST
    data_selector: payload
    params: {}
- name: device_data
  endpoint:
    path: /data
    method: POST
    data_selector: payload
    params: {}
- name: register_application
  endpoint:
    path: /m2m/applications/registration
    method: PUT
    data_selector: msg
    params: {}
- name: create_device
  endpoint:
    path: /m2m/endpoints
    method: POST
    data_selector: msg
    params: {}
- name: create_subscription
  endpoint:
    path: /m2m/subscriptions
    method: POST
    data_selector: subscriptionId
    params:
      type: resources
- name: device_status
  endpoint:
    path: /device/status
    method: GET
    data_selector: status
    params: {}
- name: device_data
  endpoint:
    path: /api/upload
    method: POST
    data_selector: payload
- name: comfort_sensor_data
  endpoint:
    path: /uplinkMsg/0/data
    method: GET
- name: device_data
  endpoint:
    path: /data
    method: POST
    data_selector: payload
    params: {}
- name: sensor_data
  endpoint:
    path: /uplinkMsg
    method: POST
    data_selector: reports
    params: {}
- name: sensor_data
  endpoint:
    path: /uplinkMsg
    method: POST
    data_selector: reports
    params: {}
- name: device_registration
  endpoint:
    path: /register_device
    method: POST
    params:
      udp_address: 172.27.131.100
      port: 15683
- name: application_registration
  endpoint:
    path: /m2m/applications/registration
    method: PUT
    data_selector: msg
    params: {}
- name: create_coap_device
  endpoint:
    path: /m2m/endpoints
    method: POST
    data_selector: msg
    params: {}
- name: create_subscription
  endpoint:
    path: /m2m/subscriptions
    method: POST
    data_selector: subscriptionId
    params:
      type: resources
- name: device_registration
  endpoint:
    path: /path/to/device/registration
    method: POST
    data_selector: registration_data
- name: forward_data
  endpoint:
    path: /path/to/forward/data
    method: POST
    data_selector: forward_data
- name: device_registration
  endpoint:
    path: /register_device
    method: POST
    data_selector: data
    params:
      incremental: device_id
- name: send_data
  endpoint:
    path: /send_data
    method: POST
    data_selector: data
    params: {}
- name: sensor_data
  endpoint:
    path: /uplinkMsg/0/data
    method: GET
    data_selector: reports
- name: register_device
  endpoint:
    path: /docs/3-register-devkit
    method: GET
- name: forward_data
  endpoint:
    path: /docs/5-forward-message-to-application
    method: GET
- name: ampsense_device
  endpoint:
    path: /register_device
    method: POST
    data_selector: device_info
    params: {}
- name: comfort_sensor_data
  endpoint:
    path: /uplinkMsg/0/data
    method: GET
    data_selector: reports
- name: sensor_data
  endpoint:
    path: uplinkMsg/0/data
    method: POST
    data_selector: reports
- name: gateway_configuration
  endpoint:
    path: /config/gateway
    method: POST
    data_selector: configuration
    params:
      server_address: cth-lorawan-connector.loriot.io
      server_port_up: 1780
      server_port_down: 1780
      push_timeout: 200ms
      keep_alive_interval: 5 seconds
- name: device_registration
  endpoint:
    path: /register/device
    method: POST
    data_selector: registration
    params:
      device_class: A
- name: sensor_data
  endpoint:
    path: /uplinkMsg/0/data
    method: POST
    data_selector: reports
    params: {}
- name: device_registration
  endpoint:
    path: /reference/add-lwm2m-device
    method: POST
    data_selector: registration msg
- name: create_subscription
  endpoint:
    path: /reference/register-subscription-1
    method: POST
    data_selector: subscription creation
- name: update_registration_deregistration
  endpoint:
    path: /reference/create-update-registration-deregistration-subscription
    method: POST
    data_selector: update, registration and deregistration
- name: device_registration
  endpoint:
    path: /register_device
    method: POST
    data_selector: data
    params: {}
- name: data_forwarding
  endpoint:
    path: /forward_data
    method: POST
    data_selector: data
    params: {}
- name: temperature
  endpoint:
    path: /3303/0/5700
    method: GET
    data_selector: responses
    params: {}
- name: humidity
  endpoint:
    path: /3304/0/5700
    method: GET
    data_selector: responses
    params: {}
- name: iotcreators_udp_server
  endpoint:
    path: /reference/send-standard-downlink
    method: GET
    data_selector: data
    params:
      udp_address: 172.27.131.100
      port: '15683'
- name: lorawan_gateway
  endpoint:
    path: /register_gateway
    method: POST
    data_selector: gateway
    params: {}
- name: device_registration
  endpoint:
    path: /register_device
    method: POST
    data_selector: device
    params:
      registration_type: Lorawan (managed by iotcreators.com)
- name: sensor_data
  endpoint:
    path: /uplinkMsg
    method: POST
    data_selector: reports
- name: uplinks
  endpoint:
    path: /uplinks
    method: POST
    data_selector: data
- name: ampsense
  endpoint:
    path: /ampsense
    method: GET
    data_selector: records
- name: uplinks
  endpoint:
    path: /forward/uplinks
    method: POST
    data_selector: uplink_data
- name: lorawan_gateway
  endpoint:
    path: /register_gateway
    method: POST
    data_selector: gateway_info
    params: {}
- name: device_registration
  endpoint:
    path: /register_device
    method: POST
    data_selector: device_info
    params: {}
- name: timestream
  endpoint:
    path: /timestream
    method: GET
- name: device_registration
  endpoint:
    path: /reference/add-lwm2m-device
    method: POST
    data_selector: registration msg
- name: create_subscription
  endpoint:
    path: /reference/register-subscription-1
    method: POST
- name: create_update_registration_deregistration_subscription
  endpoint:
    path: /reference/create-update-registration-deregistration-subscription
    method: POST
- name: temperature
  endpoint:
    path: /3303/0/5700
    method: GET
    data_selector: responses[0].resources[0].value
- name: humidity
  endpoint:
    path: /3304/0/5700
    method: GET
    data_selector: responses[0].resources[0].value
- name: database
  endpoint:
    path: /databases
    method: POST
    data_selector: databaseName
    params: {}
- name: table
  endpoint:
    path: /tables
    method: POST
    data_selector: tableName
    params: {}
- name: lambda_function
  endpoint:
    path: /functions
    method: POST
    data_selector: functionName
    params: {}
- name: lorawan_gateway
  endpoint:
    path: /register_lorawan_gateway
    method: POST
    data_selector: gateway_info
    params: {}
- name: device_registration
  endpoint:
    path: /register_device
    method: POST
    data_selector: device_info
    params: {}
- name: sensor_device_registration
  endpoint:
    path: /register/device
    method: POST
    data_selector: device_registration
    params: {}
- name: grafana_client_user
  endpoint:
    path: /create/user
    method: POST
    data_selector: grafana_user_creation
    params:
      user_name: myGrafanaClient
      access_type: Programmatic access
- name: network_configuration
  endpoint:
    path: /docs/general-settings
    method: GET
    data_selector: APN info
- name: protocol_info
  endpoint:
    path: /docs/general-settings
    method: GET
    data_selector: Address
    params: {}
- name: Timestream Database
  endpoint:
    path: /databases/myIoTDB
    method: POST
    data_selector: database
    params: {}
- name: Timestream Table
  endpoint:
    path: /databases/myIoTDB/tables/myIoTTable
    method: POST
    data_selector: table
    params: {}
- name: Lambda Function
  endpoint:
    path: /functions/myIoTInjector
    method: POST
    data_selector: function
    params: {}
- name: device_configuration
  endpoint:
    path: /api/device/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: myIoTInjector
  endpoint:
    path: /myIoTAPI
    method: POST
    data_selector: reports
    params: {}
- name: uplink
  endpoint:
    path: /uplink
    method: POST
    data_selector: data
    params: {}
- name: myIoTInjector
  endpoint:
    path: /myIoTInjector
    method: POST
    data_selector: reports
    params: {}
- name: myIoTAuthorizer
  endpoint:
    path: /myIoTAuthorizer
    method: POST
    data_selector: authorization
    params: {}
- name: sensor_device
  endpoint:
    path: /projects/register_device
    method: POST
    data_selector: device_registration
    params: {}
- name: timestream_db
  endpoint:
    path: /timestream/create_db
    method: POST
    data_selector: db_creation
    params: {}
- name: grafana_client
  endpoint:
    path: /iam/add_user
    method: POST
    data_selector: user_creation
    params:
      user_name: myGrafanaClient
      access_type: Programmatic access
- name: myIoTInjector
  endpoint:
    path: /myIoTInjector
    method: ANY
- name: Database
  endpoint:
    path: /databases
    method: POST
    data_selector: database
    params:
      name: myIoTDB
- name: Table
  endpoint:
    path: /databases/myIoTDB/tables
    method: POST
    data_selector: table
    params:
      name: myIoTTable
      memory_store_retention: 1 Week
      magnetic_store_retention: 3 Months
- name: Lambda Function
  endpoint:
    path: /functions
    method: POST
    data_selector: function
    params:
      function_name: myIoTInjector
      runtime: Python 3.8
      role: IoTCreatorsDataInjectorToTimestream
- name: IoT Access Policy
  endpoint:
    path: /secure/policies
    method: POST
    data_selector: policy
    params:
      policy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iot:Publish
          - iot:Receive
          - iot:RetainPublish
          Resource:
          - arn:aws:iot:eu-central-1:975338518200:topic/*
        - Effect: Allow
          Action:
          - iot:Subscribe
          Resource:
          - arn:aws:iot:eu-central-1:975338518200:topicfilter/*
        - Effect: Allow
          Action:
          - iot:Connect
          Resource:
          - arn:aws:iot:eu-central-1:975338518200:client/*
- name: Timestream DB
  endpoint:
    path: /timestream
    method: POST
    data_selector: data
    params: {}
- name: IoTCoreCustomAuthorizer
  endpoint:
    method: POST
- name: myIoTDB
  endpoint:
    path: /timestream/databases
    method: POST
    data_selector: databaseName
    params:
      name: myIoTDB
- name: myIoTTable
  endpoint:
    path: /timestream/databases/myIoTDB/tables
    method: POST
    data_selector: tableName
    params:
      name: myIoTTable
      memory_store_retention: 1 Week
      magnetic_store_retention: 3 Months
- name: myIoTInjector
  endpoint:
    path: /myIoTAPI
    method: POST
    data_selector: reports
    params: {}
- name: DecodeUplinkMessage
  endpoint:
    path: /rules/DecodeUplinkMessage
    method: POST
    data_selector: out
    params: {}
- name: sensor_data
  endpoint:
    path: /path/to/sensor/data
    method: POST
    data_selector: data
    params: {}
- name: IoTDB
  endpoint:
    path: /CreateDatabase
    method: POST
    data_selector: database
    params: {}
- name: IoTTable
  endpoint:
    path: /CreateTable
    method: POST
    data_selector: table
    params: {}
- name: myIoTTable
  endpoint:
    path: /myIoTDB/myIoTTable
    method: POST
    data_selector: reports
    params: {}
- name: device_template
  endpoint:
    path: /deviceTemplates
    method: POST
    data_selector: deviceTemplate
    params: {}
- name: myIoTInjector
  endpoint:
    path: /myIoTInjector
    method: ANY
- name: DDD Service
  endpoint:
    path: /api/decode
    method: GET
    data_selector: device
    params: {}
- name: IoT Device Bridge
  endpoint:
    path: /api/IoTCIntegration
    method: POST
    data_selector: device
    params: {}
- name: iot_access_policy
  endpoint:
    path: /iot/secure/policies
    method: POST
    data_selector: Statement
    params: {}
- name: IoTCoreCustomAuthorizer
  endpoint:
    path: /path/to/your/lambda/function
    method: POST
- name: IoTCIntegration
  endpoint:
    path: /az-iot-device-bridge-uplink-adapter
    method: POST
    data_selector: reports
    params: {}
- name: function_app
  endpoint:
    path: /api/function
    method: POST
    data_selector: body
    params: {}
- name: Power BI Template
  endpoint:
    path: /powerbi/T-Mobile%20Template.pbix
    method: GET
- name: DecodeUplinkMessage
  endpoint:
    path: /+uplink
    method: POST
    data_selector: out
    params: {}
- name: device_profiles
  endpoint:
    path: /inventory/managedObjects
    method: POST
    data_selector: self
    params: {}
- name: IoTDB
  endpoint:
    path: /databases/IoTDB
    method: CREATE
    data_selector: database
    params: {}
- name: IoTTable
  endpoint:
    path: /databases/IoTDB/tables/IoTTable
    method: CREATE
    data_selector: table
    params:
      memory_store_retention: 1 Week
      magnetic_store_retention: 3 Months
- name: Device Template
  endpoint:
    path: /api/deviceTemplates
    method: POST
    data_selector: template
    params: {}
- name: Device Registration
  endpoint:
    path: /api/devices
    method: POST
    data_selector: device
    params: {}
- name: DDD Service
  endpoint:
    path: /api/decode
    method: GET
    data_selector: body
- name: IoT Device Bridge
  endpoint:
    path: /api/IoTCIntegration
    method: POST
    data_selector: body
- name: function_app
  endpoint:
    path: /function-app
    method: POST
    data_selector: payload
    params: {}
- name: webhook
  endpoint:
    path: /device-access/webhooks
    method: POST
- name: device_type
  endpoint:
    path: /device-types
    method: POST
- name: report_type
  endpoint:
    path: /report-types
    method: POST
- name: claim_device_tokens
  endpoint:
    path: /devices/claim
    method: POST
- name: device_profile
  endpoint:
    path: /inventory/managedObjects
    method: POST
    data_selector: self
    params: {}
- name: register_device
  endpoint:
    path: /m2m/endpoints
    method: POST
    data_selector: null
- name: lifecycle_subscription
  endpoint:
    path: /m2m/subscriptions?type=lifecycleEvents
    method: POST
    data_selector: null
- name: connect_to_IMPACT
  endpoint:
    path: /QLWCONFIG
    method: GET
    data_selector: null
- name: decoder
  endpoint:
    path: /decoder
    method: POST
    data_selector: datacakeFields
- name: temperature_sensor_read
  endpoint:
    path: /<YOUR IMEI>/3303/0/5700
    method: GET
- name: temperature_sensor_write
  endpoint:
    path: /<YOUR IMEI>/3303/0/5700
    method: PUT
    data_selector: resourceValue
- name: temperature_sensor_observe
  endpoint:
    path: /subscriptions?type=resources
    method: POST
- name: register_device
  endpoint:
    path: /m2m/endpoints
    method: POST
    data_selector: ''
    params: {}
- name: register_application
  endpoint:
    path: /m2m/applications/registration
    method: PUT
    data_selector: ''
    params: {}
- name: lifecycle_subscription
  endpoint:
    path: /m2m/subscriptions?type=lifecycleEvents
    method: POST
    data_selector: ''
    params: {}
- name: sdi_decoder
  endpoint:
    path: /sdi/decoder
    method: POST
    data_selector: telemetry
- name: read_request
  endpoint:
    path: /3/0/0
    method: GET
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload
    params: {}
- name: device_type
  endpoint:
    path: /device_types
    method: POST
    data_selector: payload
    params: {}
- name: report_type
  endpoint:
    path: /report_types
    method: POST
    data_selector: payload
    params: {}
- name: device_registration
  endpoint:
    path: /m2m/endpoints
    method: POST
    data_selector: serialNumber
    params: {}
- name: application_registration
  endpoint:
    path: /m2m/applications/registration
    method: PUT
    data_selector: url
    params: {}
- name: lifecycle_subscription
  endpoint:
    path: /m2m/subscriptions?type=lifecycleEvents
    method: POST
    data_selector: criteria
    params: {}
- name: cpu_temperature
  endpoint:
    path: /endpoints/IoTeropCustomClient_1/3303/0/7500
    method: GET
    data_selector: temperature
- name: resource_subscription
  endpoint:
    path: /subscriptions?type=resources
    method: POST
    data_selector: subscriptionDetails
- name: uplink_message
  endpoint:
    path: us/<IMEI>
    method: POST
    data_selector: reports
    params: {}
- name: downlink_message
  endpoint:
    path: ds/<IMEI>/request
    method: SUBSCRIBE
    data_selector: downlinkMsg/0/data
    params: {}
- name: uplink_message
  endpoint:
    path: /us/{IMEI}
    method: POST
    data_selector: reports
    params: {}
- name: downlink_message
  endpoint:
    path: /ds/{IMEI}/request
    method: POST
    data_selector: downlinkMsg/0/data
    params: {}
- name: device_registration
  endpoint:
    path: /m2m/endpoints
    method: POST
    data_selector: ''
    params: {}
- name: lifecycle_subscription
  endpoint:
    path: /m2m/subscriptions?type=lifecycleEvents
    method: POST
    data_selector: ''
    params: {}
- name: connect_to_IMPACT
  endpoint:
    path: /QLWCONFIG
    method: POST
    data_selector: ''
    params: {}
- name: register_device
  endpoint:
    path: /m2m/endpoints/{device_id}/downlinkMsg/0/data
    method: PUT
    data_selector: resourceValue
    params: {}
- name: temperature_sensor_read
  endpoint:
    path: /m2m/endpoints/<YOUR IMEI>/3303/0/5700
    method: GET
    headers:
      Content-Type: application/json
      Authorization: Basic <YOUR BASE64 STRING>
- name: temperature_sensor_write
  endpoint:
    path: /m2m/endpoints/<YOUR IMEI>/3303/0/5700
    method: PUT
    headers:
      Content-Type: application/json
      Authorization: Basic <YOUR BASE64 STRING>
    body:
      resourceValue: '10.0'
- name: temperature_sensor_observe
  endpoint:
    path: /m2m/subscriptions?type=resources
    method: POST
    headers:
      Content-Type: application/json
      Accept: application/json
    body:
      criteria:
        serialNumbers:
        - <YOUR IMEI>
      deletionPolicy: 0
      groupName: <YOUR GROUP NAME>
      resources:
      - resourcePath: 3303/0/5700
      - resourcePath: 3/0/0
      subscriptionType: resources
- name: uplink
  endpoint:
    path: /ttn-integration-adapter/uplink
    method: POST
    data_selector: message
    params: {}
- name: register_device
  endpoint:
    path: /m2m/endpoints
    method: POST
    data_selector: ''
    params: {}
- name: register_application
  endpoint:
    path: /m2m/applications/registration
    method: PUT
    data_selector: ''
    params: {}
- name: lifecycle_subscription
  endpoint:
    path: /m2m/subscriptions?type=lifecycleEvents
    method: POST
    data_selector: ''
    params: {}
- name: AT commands
  endpoint:
    path: /docs/ublox-sara-n2-series-at-commands
    method: GET
    data_selector: commands
    params: {}
- name: General AT Commands
  endpoint:
    path: /quectel-bg95-at-commands
    method: GET
    data_selector: commands
    params: {}
- name: AT Commands for Communication Protocols
  endpoint:
    path: /quectel-bg95-at-commands
    method: GET
    data_selector: commands
    params: {}
- name: read_request
  endpoint:
    path: /3/0/0
    method: GET
- name: register_device
  endpoint:
    path: /m2m/endpoints
    method: POST
    data_selector: ''
    params: {}
- name: register_application
  endpoint:
    path: /m2m/applications/registration
    method: PUT
    data_selector: ''
    params: {}
- name: lifecycle_subscription
  endpoint:
    path: /m2m/subscriptions?type=lifecycleEvents
    method: POST
    data_selector: ''
    params: {}
- name: endpoints
  endpoint:
    path: /api/endpoints
    method: GET
    data_selector: resources
- name: cpu_temperature
  endpoint:
    path: /m2m/endpoints/IoTeropCustomClient_1/3303/0/7500
    method: GET
    data_selector: temperature
- name: resource_subscription
  endpoint:
    path: /m2m/subscriptions?type=resources
    method: POST
    data_selector: subscription
- name: uplink_message
  endpoint:
    path: /us/{IMEI}
    method: POST
    data_selector: reports
    params: {}
- name: downlink_message
  endpoint:
    path: /ds/{IMEI}/request
    method: SUBSCRIBE
    data_selector: downlinkMsg/0/data
    params: {}
- name: List all Endpoints
  endpoint:
    path: /endpoints
    method: GET
    data_selector: serialNumbers
    params:
      start: 0
      end: 0
- name: List Endpoints for a gateway
  endpoint:
    path: /endpoints/gateway
    method: GET
    data_selector: serialNumbers
    params: {}
- name: Get Endpoint details
  endpoint:
    path: /endpoint/details
    method: GET
    data_selector: details
    params: {}
- name: mqtt_connection
  endpoint:
    path: /mqtt/connect
    method: POST
    data_selector: connection
    params: {}
- name: mqtt_publish
  endpoint:
    path: /mqtt/publish
    method: POST
    data_selector: publish
    params: {}
- name: mqtt_subscribe
  endpoint:
    path: /mqtt/subscribe
    method: POST
    data_selector: subscribe
    params: {}
- name: Google Cloud IoT Core
  endpoint:
    path: /cloudiot/v1/projects/{project-id}/locations/{location}/registries/{registry-id}/devices
    method: GET
    data_selector: devices
    params: {}
- name: AWS IoT Core
  endpoint:
    path: /things
    method: GET
    data_selector: things
    params: {}
- name: Azure IoT Hub
  endpoint:
    path: /devices
    method: GET
    data_selector: devices
    params: {}
- name: IBM Watson IoT
  endpoint:
    path: /api/v0002/devices
    method: GET
    data_selector: devices
    params: {}
- name: register_device
  endpoint:
    path: /m2m/endpoints/{device_id}/downlinkMsg/0/data
    method: PUT
    data_selector: resourceValue
- name: application_registration
  endpoint:
    path: /m2m/applications/registration
    method: PUT
    data_selector: ''
    params: {}
- name: data_forwarding
  endpoint:
    path: /ttn-integration-adapter/uplink
    method: POST
    data_selector: json
- name: General AT Commands
  endpoint:
    path: /quectel/bc95-g/bc68/general-at-commands
    method: GET
    data_selector: commands
    params: {}
- name: AT Commands for Communication Protocols
  endpoint:
    path: /quectel/bc95-g/bc68/communication-protocols-at-commands
    method: GET
    data_selector: commands
    params: {}
- name: AT Commands
  endpoint:
    path: /thales/cinterion/ens22-e/at-commands
    method: GET
    data_selector: commands
    params: {}
- name: endpoints
  endpoint:
    path: /api/endpoints
    method: POST
    data_selector: data
    params: {}
- name: subscriptions
  endpoint:
    path: /api/subscriptions
    method: POST
    data_selector: data
    params: {}
- name: endpoints
  endpoint:
    path: /api/endpoints
    method: GET
    data_selector: reports
    params:
      start_offset: 0
      end_offset: 0
- name: endpoint_details
  endpoint:
    path: /api/endpoint/details
    method: GET
    data_selector: responses
    params: {}
- name: all_things_talk
  endpoint:
    path: https://www.allthingstalk.com/
    method: GET
- name: thingsboard
  endpoint:
    path: https://thingsboard.io/
    method: GET
- name: node_red
  endpoint:
    path: https://nodered.org/
    method: GET
- name: google_cloud_platform
  endpoint:
    path: https://cloud.google.com/iot-core/
    method: GET
- name: aws_iot_core
  endpoint:
    path: https://aws.amazon.com/iot-core/?nc2=h_iot
    method: GET
- name: ms_azure
  endpoint:
    path: https://azure.microsoft.com/en-us/services/iot-hub/
    method: GET
- name: ibm_bluemix
  endpoint:
    path: https://www.ibm.com/internet-of-things
    method: GET
- name: application_registration
  endpoint:
    path: /m2m/applications/registration
    method: PUT
    data_selector: ''
    params: {}
- name: device_registration
  endpoint:
    path: /api/v1/devices/bulk_registration
    method: POST
    data_selector: response
    params: {}
- name: cake_dependencies
  endpoint:
    path: /docs/utas-rainbow-cake#dependencies
    method: GET
    data_selector: dependencies
    params: {}
- name: cake_instructions
  endpoint:
    path: /docs/utas-rainbow-cake#instructions
    method: GET
    data_selector: instructions
    params: {}
notes:
- In every of your API requests you need to add a base64 encoded 'prj-username:prj-password'
  string as Basic authorization header field to the HTTP request.
- Application URL required — this function requires that an application URL is registered
  for the API user.
- This function requires that an application URL is registered for the API user.
- Application URL required for the API user.
- Application URL required — requires that an application URL is registered for the
  API user
- 'This function requires that an application URL is registered for the API user with
  this API call: https://docs.iotcreators.com/reference/register-application-url'
- 'Application URL required: This function requires that an application URL is registered
  for the API user.'
- Application URL required
- Not more than 10 downlink messages can be queued before they are delivered to the
  device.
- The max. size of a downlink message is currently 512 bytes.
- Every received json is composed of fields such as id, updatedOn, createdOn, name,
  version, tenantId, etc.
- Customers can specify the T3412 value to be applied in the network, this value must
  be set between 1 hour and 310 hours.
- Customers can specify the T3324 value to be applied in the network, this value must
  be set between 0 second and 11.160 seconds (186 min).
- Customers can specify the T eDRX between 20.48s and 10485.76s (~175min) and T PTW
  between 2.56s and 40.96s.
- All parameters provided above are subjected to change and are therefore only indicative
  and provided without guarantee.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some features may have limited support on local networks
- All DT’s NB-IoT networks support all three Coverage Enhancement Levels 0, 1 and
  2.
- In order to help customers and partners bring more resilient products to our networks,
  we've compiled guidelines to assist during their development.
- All parameters provided are subjected to change and are therefore only indicative
  and provided without guarantee.
- Some objects like Contact may return nulls in deeply nested fields
- Mobile IoT networks use dedicated spectrum bands under the terms of the licences
  issued by regulators.
- Roaming availability of individual partners is contract-specific and all network
  information details below are provided without guarantee.
- Register your device with its IMEI at the IoT Creators portal before you send your
  first message.
- Use hex or base64 encoding format of data when sending messages.
- Be aware that not every time only single messages are forwarded. Sometimes messages
  are forwarded as a bulk due to performance issues.
- The device falls asleep after some seconds. To stop the device from doing so you
  can input the AT command AT+QSCLK=0.
- You should only continue with the next steps if you seen the IP address of the network
  attachment displayed on the console.
- 'Set mobile operation band: AT+QBAND=1,8'
- 'Switch off radio functionality: AT+CFUN=0'
- Setup APN for iotcreators protocol server "scs.telekom.tma.iot"
- 'Restart device after network setup: AT+QRST=1'
- 'Disable auto-sleep and enable echo of inputs: AT+QSCLK=0 and ATE1'
- Make sure that you have registered your device with its IMEI at the IoT Creators
  portal BEFORE you send your first message to the UDP or CoAP server of IoT Creators.
- Register your device with its IMEI at the IoT Creators portal before sending messages.
- It's recommended to encode data in hex or base64 format when sending.
- Be aware that the nRF9160 modem converts your String message into binary/hex format
  before sending it to the server.
- Sending some dummy data to the IoT Creators portal is required in order to trigger
  the transmission of the downlink message from the server queue to the end device.
- Be aware that not everytime only single messages are forwarded. Sometimes messages
  are forwarded as a bulk due to performance issues.
- nuSIM devices do not need a SIM card like other NB-IoT DevKits.
- The command below represent an example, different sim cards can have different APNs.
- Before you send any UDP message to IoT Creators make sure you registered the device
  IMEI before.
- Device must be registered with the correct IMEI in the IoT Creators Portal
- 'Auto-sleep must be deactivated with AT command: AT+QSCLK=0'
- 'Echo of console inputs must be activated with AT command: ATE1'
- Check the correct ping address in the IoT Configuration Parameter
- Make sure your SIM card has active roaming in case you are not in the home country
  of your network operator
- Uses AT commands to query device and network information.
- Be aware that the nRF9160 modem converts your String message into binary/hex format
  before sending it to the server. This means your message or data will arrive in
  hex format at the IoT creators portal and be displayed as such.
- Sending some dummy data to the IoT Creators portal is required in order to trigger
  the transmission of the downlink message from the server queue to the end device,
  our Thingy:91.
- Make sure that you have registered your device with its IMEI at the IoT Creators
  portal before sending messages.
- Maybe you have to send the first message twice. The first message will be considered
  as a registration message.
- Before you send any UDP or COAP message to IoT Creators make sure you registered
  the device IMEI before.
- If you forget, you will have problems to register your device afterwards.
- nuSIM devices do not need a SIM card like other NB-IoT DevKits. The information
  which is usually stored on the SIM card is already integrated in the chipset of
  the nuSIM device.
- Maybe you have to send the first message twice. The first message will be considered
  as a registration message, so it will not be forwarded to the GUI.
- Messages should be in hex format when sent via UDP.
- Before sending any UDP or COAP message to IoT Creators, make sure you registered
  the device IMEI.
- Ensure the correct frequency band and APN are configured.
- Check for active roaming if outside home country.
- First message may be considered as a registration message and not forwarded to GUI.
- Downlink only possible after uplink.
- DNS should be automatically retrieved by the local network, just make sure that
  the ePCO (extended protocol configuration options) is enabled
- If DNS are not automatically retrieved by the network, it could be possible that
  the local network is not providing those.
- Before sending any UDP or COAP message to IoT Creators make sure you registered
  the device IMEI before.
- After the device is initially powered up it is in the status 'switched off'.
- By default the device falls after some seconds automatically into sleep.
- Device needs to be registered with IMEI before sending messages
- Consider sending the first message twice as it may be treated as a registration
  message
- Activate echo of console input using ATE1.
- Deactivate auto-sleep using AT+QSCLK=0.
- Device must be registered with correct IMEI before sending messages.
- Ensure device IMEI is registered before sending messages.
- Different SIM cards may require different APNs.
- Before sending a message, make sure your device has an IP address assigned and can
  ping the UDP server.
- It is recommended to send messages in hex or base64 encoding format.
- UDP socket is used for communication
- Heartbeat message should be sent in hex format
- Ensure correct APN settings for your SIM card.
- UDP server communication requires proper socket setup.
- Ensure device IMEI is registered before sending UDP or COAP messages to IoT Creators.
- DNS should be automatically retrieved by the local network, just make sure that
  the ePCO (extended protocol configuration options) is enabled with command
- If you are only interested in the conclusion of the AT commands to configure the
  network setup go to chapter 'AT Setup Commands' end of this document.
- Device must be registered before sending messages.
- Downlink messages are only sent after an uplink message.
- The DNS configuration only makes sense only when using the public APN to reach the
  external internet.
- Device falls into sleep mode after some seconds by default.
- Use AT+QSCLK=0 to deactivate auto-sleep.
- After setting the APN and the network operator you should reboot your devkit by
  power off and on again.
- Device must be connected to a power source before operation.
- Ensure the correct APN is configured based on your SIM card.
- You should only continue with the next steps if you have seen the IP address of
  the network attachment displayed on the console.
- If you don't see the IP address unfortunatelly you have to start trouble shooting
  now.
- Make sure you registered the device IMEI before sending any messages.
- Device must be registered with IMEI at the IoT Creators portal before sending messages.
- Downlink messages can only be received after sending an uplink message.
- Ensure correct APN is configured for your SIM card.
- Device registration must occur before sending messages.
- The DNS configuration only makes sense only when using the public APN to reach the
  external internet, when using the private APN, please use the direct IP for the
  service of your choice.
- DNS should be automatically retrieved by the local network, just make sure that
  the ePCO (extended protocol configuration options) is enabled.
- Configure Arduino IDE for SODAQ SARA AFF R410M
- After configuring minicom for your SODAQ devkit you can start minicom with the configuration
  'r410m'
- Configured DNS should be automatically retrieved by the local network.
- If DNS are not automatically retrieved, configure them manually.
- To execute AT commands, use a terminal program such as minicom on Linux.
- Currently we are still working on a LTE-M supporting server which means that you
  can not send any message to your Starterkit Overview like usually with a NB-IoT
  device.
- Choosing the correct APN for your sim card
- Make sure the device IMEI is registered before sending messages.
- Different SIM cards may have different APNs.
- Device must be registered with IMEI before sending messages
- Ensure device has IP address assigned and can ping server
- Ensure the device is registered with its IMEI at the IoT Creators portal before
  sending messages.
- Configure Arduino IDE with Board Files for the SODAQ SARA AFF R410M.
- Do not power up the board without having connected Antennas before!
- Register your device with its IMEI at the IoT Creators portal BEFORE sending your
  first message.
- 'Choosing the correct APN for your sim card: The command below represent an example,
  different sim cards can have different APNs.'
- 'Message payload must be in next line in respect to the command, and must be in
  the form of: {"uplinkMsg/0/data": "<message_payload>"}'
- Ensure the correct APN is set for your SIM card.
- Check network operator settings before sending messages.
- 'Message payload must be in the form of: {"uplinkMsg/0/data": "<message_payload>"}'
- 'Make sure that the NB-IoT configuration is: APN = ''auto'', PLMNID = ''0'', ip
  = ''172.27.131.100'', port = 15683, protocol = ''UDP'''
- Uses UDP via NB-IoT protocol
- Payload is in HEX format
- DeviceType must be set to 'Acrios Mbus'
- Device supports OTAA mode for easier key management.
- The function assumes a device group name called 'Akkr8'.
- If you modify the converter, you can change the group name that Akkr8 devices are
  put in.
- 'Make sure that the NB-IoT configuration is: APN = ''auto'', PLMNID = ''0'', ip
  = ''172.27.131.100'', port = 15683, protocol = ''UDP''.'
- Before sending UDP message, register the device IMEI in your project.
- LoRaWAN has the concept of 'duty cycle' regarding the transmission time. Therefore,
  the device can only send for a certain, very limited, amount of time (a typical
  value is 0,1% of total time), and must remain silent for the rest of the time.
- The device automatically sends data at the specified interval of time.
- Remember to register the device before sending data to iotcreators.
- Device reports data in JSON format including keys like Temperature, Humidity, and
  others.
- Device automatically sends data at a specified interval.
- Payload structure for firmware version >= 1.3.2 is 123 bytes.
- Uses OAuth2 with Bearer token for authorization
- The probe is IP68 waterproof.
- Device ID can be set with command AT+DEUI.
- Register the device through the API instead of the portal due to the lack of IMEI.
- The device will send periodically data every 4 hours as well as for each door open/close
  action.
- Users can disable the uplink for each open/close event.
- Before sending any UDP message to IoT Creators, register the device IMEI in your
  project.
- Device requires registration before connecting to the network.
- Ensure correct voltage level when connecting to a computer.
- Before you can enter AT commands you have to authorize yourself with a password.
  To do this, simply type 12345678 into your Terminal and press enter.
- Device automatically sends data at specified intervals.
- The device must be registered before sending data.
- Device must be registered before sending data
- Ensure correct APN for the SIM card
- Device must be registered before sending data.
- CPN01 has Open-Alarm feature, user can set an alarm if the contact has been open
  exceeds a certain time.
- Device will automatically send data at specified intervals, which can be configured.
- Device supports sending data through UDP, MQTT and COAP over NB-IoT.
- Payload structure is 87 bytes in total by default.
- The NDS03A will send periodically data every 4 hours as well as for each door open/close
  action.
- Users can also disable the uplink for each open/close event.
- Compatible with most standard communication protocols (UDP, LwM2M, MQTT, NIDD, etc.)
- Designed to meet outdoor applications
- Device uses UDP to send data.
- IMEI can be found on the top cover of the device.
- Device must be registered before connecting to the network.
- Payload structure varies based on firmware version.
- The sensor provides its measurement values as a single data package in hex format.
- You need to decode the hex data of the value element to the actual measurement values.
- The device will automatically send data at the specified interval of time.
- The device can count each open event and uplink periodically.
- CoAP protocol integration is still in a test phase.
- Device can be configured through Bluetooth communication with the companion app,
  IoT Solutions, available for Android.
- Device sends data every 24 hours by default.
- The sensor provides the value as a single data package in hex format.
- Different messages with different types of payloads are sent after button presses.
- Device can be powered on through a double 3.7 volts lithium batteries.
- The device must be set to send data to iotcreators.
- Long-term durable performance in harsh environment
- Data decoding is required to convert hex data into actual measurement values.
- To get the measurement values of the sensor into your application you need to decode
  the hex data of the value element.
- Device powered by two 3.7 volts lithium batteries.
- Device can send data at specified intervals.
- To get the measurement values of the sensor into your application you need to decode
  the hex data of the value element to the actual measurement values.
- Device must be registered through the API, since the portal does not support LWM2M
  registration yet.
- Device sends data every hour by default, can be changed in the companion application.
- The device can be configured through Bluetooth communication with the companion
  app, IoT Solutions, available for Android.
- Payload sent by the Astra-1B is in cayenne LLP format.
- The device will then register to the network and start to send data to the specified
  server and port.
- The device is configured via the NFC interface.
- The device will switch to receive mode at adjustable intervals.
- The incoming wireless M-Bus meter telegrams are stored in a non-volatile memory.
- Keep in mind that the miro Click sends different messages with different types of
  payloads.
- Device will be shipped in deactivated mode, to preserve the battery.
- Until a pulse is detected, the device will not send regular nor tamper uplinks.
- Compatible with LoRaWAN® specification 1.0.3
- Calibration is not needed for the AMPSENSE.
- Device must be registered before turning it on to avoid blacklisting.
- Device will not send regular nor tamper uplinks until a pulse is detected.
- Downlinks length must not be longer than 8 bytes.
- Device can operate up to 10 years depending on configuration.
- Payload contains data about CO2 level, humidity, temperature, and device battery
  level.
- Device must be registered through the API, the portal does not support LWM2M registration
  yet.
- Lambda functions are NOT accessible from the internet by default.
- An AWS API Gateway is needed to make the Lambda function accessible.
- The device supports OTAA for LoRaWAN.
- Payload sent by the Astra-1B is in Cayenne LLP format.
- The APN must be set accordingly to your sim card.
- Lambda function requires setup to be accessible from the internet.
- Use DeviceType header to select decoding function in the POST request.
- Device must be provisioned on the iotcreators portal as UDP device before turning
  it on.
- Static token authorization is required for the Lambda function.
- Register the device to iotcreators before turning it on, otherwise it will be blacklisted
  for 10 minutes.
- First register than activate your device in IoT Creators
- It is important to register your device before it sends messages to avoid being
  blacklisted
- CLIENTS is a global dictionary for client registration with names and tokens
- Uses Lambda Authorizer for API Gateway
- 'Authorization header value format: iotCreators.Starterkit:<token>'
- First register than activate the device in IoT Creators.
- Devices sending messages before registration will be blacklisted.
- Uses custom authentication with a Lambda function.
- Lambda function requires static token authorization with Authorization header.
- Make sure that the IoT Rule DecodeUplinkMessages is enabled.
- Device must be registered before activation to avoid blacklisting.
- Create a database named IoTDB and a table named IoTTable
- Memory store retention is set to 1 Week
- Magnetic store retention is set to 3 Months
- Use DeviceType Header field to select the decoding function in your POST request
- Custom authentication method is used for AWS IoT Core integration.
- Uses custom authentication with a Lambda function for AWS IoT Core.
- 'Deploy the app in location: ''West Europe'''
- Any valid json message will work and will be stored as a blob in the storage account
  you created.
- An open IoT access policy was created, which is not open to the public internet.
- Cumulocity authenticates the API request by a Basic Authorization which requires
  ':' as base64 coded string.
- 'SQL expression for IoT Rule: SELECT out.decoded.* FROM ''timestream/in'''
- Use deviceId and deviceType as dimension names with respective values.
- Requires device specific data decoding to transform it into an easy-to-handle format.
- Device template must be published to register devices.
- Webhook connection between iotcreators and Datacake is now set up.
- Decoder works when device sends data via iotcreators in the form of a hex string.
- Use https://dev-integr.scs.iot.telekom.com/az-iot-device-bridge-uplink-adapter as
  URL. This is our integration service for Azure IoT Central via IoT Device Bridge.
- For security reasons, it is recommended to add an Authorization header with a generated
  value.
- First register than activate the device. It is important that you first register
  your device in a project of IoT Creators and than you take the device into operation.
  If the device sends messages to IoT Creators before your registered it will be put
  on the blacklist.
- To check if everything worked, go to your Device groups and select IMBUILDING, click
  on your device, and check your decoded data in Latest telemetry.
- 'Make sure you deploy the app in location: ''West Europe'''
- 'You need to enter the following App-Settings: StorageAccessKey, StorageAccountName'
- To be able to share the dashboard and schedule data refresh you need to upload the
  template to Powerbi.com.
- Usage costs for Azure will be minimal because of low usage/storage.
- Webhook URL is generated after creating a new webhook.
- Unique device ID is referred to as hashID.
- Device profiles need to match the Uplink Message Tag.
- Unfortunately, the portal does not support lwm2m device creation yet, so everything
  will need to be done through the api.
- Firmware should be at least A10
- Settings are stored in NVDM and are therefore persistent
- Make sure to enter the IMEI of your device in Datacake with the prefix IMEI:.
- The decoder works when the device sends data via iotcreators in the form of a hex
  string.
- You need to adapt your decoder to the structure of your device.
- Add Authorization header with a generated value for security.
- Requires a base64 encoded username and password for authentication.
- First register than activate your device in IoT Creators.
- Ensure the device is registered before it sends messages to avoid blacklisting.
- Webhook URL is generated upon creation and used for integration with IoT Creators.
- Each device type will receive a unique hashID upon creation.
- To add a device into the monitoring environment, navigate to Devices, click +, and
  enter the previously copied claim token. Click ADD.
- To install a device, navigate to the created location (ACME Headquarters) and select
  Devices.
- In Link to a device, select the Dragino - N95S31B. Finally, we would like to track
  the Internal Sensor port onto which measurements are pushed. Click +PORT to select
  the port with temperature and humidity measurements. Finalize the device installation
  with SET.
- 'From this point on, all measurements pushed to the Internal Sensor channel of Dragino
  - N95S31B sensor with IMEI: 457031052442731 will be available in the monitoring
  environments ready to be visualized in graphs.'
- Provisioning the device is similar to what happens with the other protocols, except
  when using bootstrap.
- The portal does not support lwm2m device creation yet, so everything will need to
  be done through the api.
- Requires MQTT client setup with registered device and callback URL
- Uses SSL for secure communication
- After opening the TCP Socket with AT+QMTOPEN there is a timeout of around 5-6 seconds
  in which the TCP socket is closed server side, if there is no MQTT CONNECT message.
- Your firmware should be at least A10
- 'If everything works fine the BC66 shows the URC +QLWREG: 0. If anything went wrong
  during the register, the BC66 shows the URC +QLWREG: 1.'
- Only for non-commercial and validation use
- At the current state of development the delete operation for devices is not propagated
  from the IoT Creators platform to the LNS.
- The BC66 supports only TCP/IP protocol for reliable communication.
- Always refer to the official technical documentation provided by Quectel regarding
  TCP/IP native stack support.
- This software expects a Content-Length header in http response to work properly.
- Please be aware that we cannot guarantee for the completeness and accuracy of this
  page. For detailed information and latest versions of the AT command guides, please
  always refer to the supplier's specifications and manuals.
- Please be aware that we cannot guarantee for the completeness and accuracy of this
  page.
- For detailed information and latest versions of the AT command guides, please always
  refer to the supplier's specifications and manuals.
- No security layer!
- Use a real username and password for some ISPs.
- CDP platform supports HTTP for devices.
- Some ISP's do require you to use a real username and password.
- We only allow MQTT secured communication over SSL over the public internet.
- CDP APIs are device and protocol agnostic.
- Data is exchanged through the sGI interface or the MME’s T6 interface.
- Ensure the device is registered in the project before connecting.
- The APN used is cdp.iot.t-mobile.nl for network communication.
- Only for non-commercial and validation use.
- Securing node-red requires special attention by default your flow will be accessible
  to the public.
- BC66 natively supports only TCP/IP protocol for reliable communication.
- Some coding will be required on your host machine to handle http data out/incoming.
- Easy data access via webhooks/API
- Highly secure due to VPN tunnel to our backend
- Data needs to be processed by own protocol server and message broker
- No webhooks
- Exposed to public internet
- Recommended only for advanced users
- The first line - header - is optional. Separator is comma.
- Sometimes you might get an email from our team, with a warning, that the queue of
  your project reached a size of more than 200 messages. This usually happens when
  the application endpoint is unreachable or responds with an HTTP code other than
  200 and 202.
- We cannot guarantee for the completeness and accuracy of this page.
- Be aware that we cannot guarantee for the completeness and accuracy of this page.
- API requires registration of callback URL for notifications.
- Securing the application endpoint requires special attention.
- Ensure device is connected via APN cdp.iot.t-mobile.nl for webhooks project.
- Ensure device is connected via APN m2m.public.nl for public internet access.
- As soon as your application endpoint processes the uplink messages properly again,
  we'll inform you as well that things are back to normal.
- In case that there is a permanent problem with devices sending data but no consumer
  retrieves them from our queues, we ask you to take action.
- This vibrant, six-tiered rainbow creation is a guaranteed showstopper.
errors:
- '400'
- '401'
- '403'
- '404'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Ensure device is registered and credentials are correct.'
- 552,invalid parameters
- '202 Accepted: Message successfully posted'
- '400 Bad Request: Check your payload format'
- '401 Unauthorized: Check your authentication credentials'
- 'REQUEST_FAILED: Check if the device is registered and connected.'
- 'INVALID_DATA: Ensure the message format is correct.'
- '202 Accepted: Message accepted for delivery'
- '401 Unauthorized: Check username and password'
- '400 Bad Request: Check the request format and parameters'
- 'Network attachment issues: Check frequency band and APN configuration.'
- If DNS not retrieved, configure manually.
- '552,invalid parameters: Check your command syntax.'
- If unable to attach to network, check APN and operator configuration.
- If network connection fails, check SIM card roaming status.
- 'Serial number not found: Occurs if attempting to send a downlink message to a device
  that has not sent any uplink messages.'
- 'Serial number not found: Ensure device has sent an uplink message before downlink.'
- 'ERROR: Incorrect APN settings can lead to network attachment failures.'
- '401 Unauthorized: Ensure device is correctly registered and has active roaming
  if needed.'
- 'Serial number not found: Device has not sent any uplink messages.'
- 0 means that everything was fine. A value different from 0 identifies an error.
- '552: invalid parameters'
- 'Connection timeout: Check device connection and settings.'
- If DNS are not automatically retrieved by the network, it could be possible that
  the local network is not providing those.
- 'ERROR: Check APN or network operator configuration.'
- 'Serial number not found: Attempted to send downlink message without prior uplink.'
- 'Serial number not found: Device must send an uplink message first.'
- AT command should return 'OK' for successful execution
- 'If you are not able to get established a network attachment double check the following:
  Did you configure the correct APN? Did you configure the correct mobile network
  operator in your country? Did you make sure your SIM card has active roaming in
  case you are not in the home country of your network operator?'
- 'ERROR: Device IMEI not registered.'
- 'ERROR: Incorrect APN configuration.'
- 'ERROR: Network not reachable.'
- Device will be temporarily blocked if not registered before sending messages.
- 'DNS not configured: If DNS are not automatically retrieved by the network, it could
  be possible that the local network is not providing those.'
- 'Serial number not found: Ensure device has sent an uplink message.'
- 'CSQ=99,99: Device not registering to the network.'
- '400 Bad Request: Check the request body format.'
- '401 Unauthorized: Verify the username and password.'
- 'CSQ=99,99: Device not registered to network.'
- 'CSQ=99,99: Device not registering to the network'
- 'CSQ=99,99: Indicates the device may not be registering to the network.'
- 'CSQ=99,99: Device may not be connected to the network.'
- 'CSQ=99,99: Troubleshoot the issue as per Dragino''s documentation.'
- '1000: Success'
- '3000: Device added successfully'
- 'DEVICE_NOT_REGISTERED: Ensure the device is registered before sending data.'
- Remember to register the device before sending data to iotcreators
- blacklisted for 10 minutes after failed registration
- Device blacklisted for 10 minutes if not registered before turning on.
- 'Blacklisted device: Contact support if device was used before registration.'
- No iotcr-awsiot-authtoken token defined in authorization header.
- Authorization format is invalid.
- No authorization token defined in authorization header.
- Unknown client.
- scsType %s not supported. Currently only report type is supported.
- Could not decode message.
- No iotcr-awsiot-authtoken token iotcr-awsiot-authtoken defined in authorization
  header.
- 'HttpStatusCode.OK: Successful execution'
- 'HttpStatusCode.BadRequest: Invalid request data'
- 'HttpStatusCode.Unauthorized: Invalid authorization key'
- '401 Unauthorized: Check username and password for CoT/Cumulocity account.'
- '+QLWREG: 1: Registration failed'
- '+CEREG: 5,5: Not attached to the network'
- Check if your Authorization header is correct.
- Check Authorization header if connection fails.
- '1002: Accepted'
- '400: Invalid callback URL'
- '+QMTSTAT: 0,7: Indicates the TCP socket has been closed.'
- '400: Invalid callback URL during registration'
- '401 Unauthorized: Check authorization header.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - Application data decoder service
  - VIF/DIF values
  - NamedCredential
client:
  base_url: https://api.scs.iot.telekom.com
  auth:
    type: Basic
source_metadata: null
