resources:
- name: GetProducts
  endpoint:
    path: /
    method: GET
    params:
      Action: GetProducts
      Format: XML
      Version: '1.0'
- name: GetProducts
  endpoint:
    path: /?Action=GetProducts
    method: GET
    data_selector: Products
    params: {}
- name: GetProducts
  endpoint:
    path: /
    method: GET
    data_selector: SuccessResponse.Body.Products.Product
    params:
      Action: GetProducts
      Filter: sold-out
      Format: XML
      Timestamp: '2015-07-21T05:14:49+02:00'
      UserID: maintenance@sellercenter.net
      Version: '1.0'
      Signature: dee80841b2aa0ad1fb517f196c56a5e5b9c78627c9256a11df11da76a3f84503
- name: GetProducts
  endpoint:
    path: /reference/getproducts
    method: GET
- name: ProductCreate
  endpoint:
    path: /reference/productcreate
    method: POST
- name: ProductUpdate
  endpoint:
    path: /reference/productupdate
    method: POST
- name: ProductRemove
  endpoint:
    path: /reference/productremove
    method: POST
- name: Image
  endpoint:
    path: /reference/image
    method: POST
- name: GetBrands
  endpoint:
    path: /reference/getbrands
    method: GET
- name: GetCategoryTree
  endpoint:
    path: /reference/getcategorytree
    method: GET
- name: GetCategoryAttributes
  endpoint:
    path: /reference/getcategoryattributes
    method: GET
- name: GetCategoriesByAttributeSet
  endpoint:
    path: /reference/getcategoriesbyattributeset
    method: GET
- name: GetBrandMappedAttributes
  endpoint:
    path: /reference/getbrandmappedattributes
    method: GET
- name: GetMappedAttributeOptions
  endpoint:
    path: /reference/getmappedattributeoptions
    method: GET
- name: FeedList
  endpoint:
    path: /reference/feedlist
    method: GET
- name: FeedOffsetList
  endpoint:
    path: /reference/feedoffsetlist
    method: GET
- name: FeedCount
  endpoint:
    path: /reference/feedcount
    method: GET
- name: FeedCancel
  endpoint:
    path: /reference/feedcancel
    method: POST
- name: GetFeedRawInput
  endpoint:
    path: /reference/getfeedrawinput
    method: GET
- name: FeedStatus
  endpoint:
    path: /reference/feedstatus
    method: GET
- name: GetOrders
  endpoint:
    path: /reference/getorders
    method: GET
- name: GetOrder
  endpoint:
    path: /reference/getorder
    method: GET
- name: GetOrderComments
  endpoint:
    path: /reference/getordercomments
    method: GET
- name: GetOrderItems
  endpoint:
    path: /reference/getorderitems
    method: GET
- name: GetMultipleOrderItems
  endpoint:
    path: /reference/getmultipleorderitems
    method: GET
- name: SetStatusToCanceled
  endpoint:
    path: /reference/setstatustocanceled
    method: POST
- name: SetStatusToPackedByMarketplace
  endpoint:
    path: /reference/setstatustopackedbymarketplace
    method: POST
- name: SetStatusToReadyToShip
  endpoint:
    path: /reference/setstatustoreadytoship
    method: POST
- name: SetStatusToShipped
  endpoint:
    path: /reference/setstatustoshipped
    method: POST
- name: SetStatusToFailedDelivery
  endpoint:
    path: /reference/setstatustofaileddelivery
    method: POST
- name: SetStatusToDelivered
  endpoint:
    path: /reference/setstatustodelivered
    method: POST
- name: GetDocument
  endpoint:
    path: /reference/getdocument
    method: GET
- name: GetFailureReasons
  endpoint:
    path: /reference/getfailurereasons
    method: GET
- name: SetInvoiceAccessKey
  endpoint:
    path: /reference/setinvoiceaccesskey
    method: POST
- name: GetShipmentProviders
  endpoint:
    path: /reference/getshipmentproviders
    method: GET
- name: GetMetrics
  endpoint:
    path: /reference/getmetrics
    method: GET
- name: GetPayoutStatus
  endpoint:
    path: /reference/getpayoutstatus
    method: GET
- name: GetStatistics
  endpoint:
    path: /reference/getstatistics
    method: GET
- name: SellerUpdate
  endpoint:
    path: /reference/sellerupdate
    method: POST
- name: UserUpdate
  endpoint:
    path: /reference/userupdate
    method: POST
- name: GetSellerByUser
  endpoint:
    path: /reference/getsellerbyuser
    method: GET
- name: GetManifestList
  endpoint:
    path: /reference/getmanifestlist
    method: GET
- name: CreateForwardManifest
  endpoint:
    path: /reference/createforwardmanifest
    method: POST
- name: GetManifestDocument
  endpoint:
    path: /reference/getmanifestdocument
    method: GET
- name: SetManifestStatusToShipped
  endpoint:
    path: /reference/setmanifeststatustoshipped
    method: POST
- name: GetQcStatus
  endpoint:
    path: /reference/getqcstatus
    method: GET
- name: GetWebhooks
  endpoint:
    path: /reference/getwebhooks
    method: GET
- name: GetWebhookEntities
  endpoint:
    path: /reference/getwebhookentities
    method: GET
- name: CreateWebhook
  endpoint:
    path: /reference/createwebhook
    method: POST
- name: DeleteWebhook
  endpoint:
    path: /reference/deletewebhook
    method: POST
- name: FeedList
  endpoint:
    path: /reference/feedlist
    method: GET
    data_selector: records
    params: {}
- name: GetShipmentProviders
  endpoint:
    path: /GetShipmentProviders
    method: GET
- name: GetProducts
  endpoint:
    path: /GetProducts
    method: GET
- name: ProductCreate
  endpoint:
    path: /ProductCreate
    method: POST
- name: ProductUpdate
  endpoint:
    path: /ProductUpdate
    method: POST
- name: ProductRemove
  endpoint:
    path: /ProductRemove
    method: POST
- name: FeedList
  endpoint:
    path: /?Action=FeedList
    method: GET
    data_selector: Body.FeedList
    params: {}
- name: FeedStatus
  endpoint:
    path: /?Action=FeedStatus
    method: GET
    data_selector: Body.FeedDetail
    params: {}
- name: ProductCreate
  endpoint:
    path: /?Action=ProductCreate
    method: POST
    data_selector: Body
    params: {}
- name: products
  endpoint:
    path: /
    method: GET
    data_selector: products
    params:
      Action: GetProducts
      Format: JSON
      Version: '1.0'
- name: ProductCreate
  endpoint:
    path: /?Action=ProductCreate
    method: POST
    data_selector: Body
- name: ProductCreate
  endpoint:
    path: /ProductCreate
    method: POST
    data_selector: Result
    params:
      Action: ProductCreate
      Timestamp: 2015-07-01T11:11+0000
      UserID: maintenance@sellercenter.net
      Version: '1.0'
      Signature: 7cd3bf58ba87e2928c8fbb93acab0fa9e88cd8086231977d5cd78c4c495bedb5
- name: ProductUpdate
  endpoint:
    path: /?Action=ProductUpdate
    method: POST
- name: ProductRemove
  endpoint:
    path: /?Action=ProductRemove
    method: POST
    data_selector: null
    params: {}
- name: Image
  endpoint:
    path: /?Action=Image
    method: POST
    data_selector: response
    params: {}
- name: brands
  endpoint:
    path: /
    method: GET
    data_selector: brands
    params:
      Action: GetBrands
      Format: JSON
      Version: '1.0'
- name: category_tree
  endpoint:
    path: /
    method: GET
    data_selector: Categories
    params:
      Action: GetCategoryTree
      Format: JSON
      Version: '1.0'
- name: category_attributes
  endpoint:
    path: /?Action=GetCategoryAttributes
    method: GET
    data_selector: attributes
    params:
      Action: GetCategoryAttributes
      Version: '1.0'
- name: GetCategoriesByAttributeSet
  endpoint:
    path: /?Action=GetCategoriesByAttributeSet
    method: GET
    data_selector: response
    params:
      Action: GetCategoriesByAttributeSet
      Format: JSON
      Timestamp: 2015-07-01T11:11+0000
      UserID: maintenance@sellercenter.net
      Version: '1.0'
      Signature: 1a497a8bc55c08b9c124ea3f23b1af44ec7f4a2a5f20e2eae9080d6db25f3c36
- name: brand_mapped_attributes
  endpoint:
    path: /
    method: GET
    data_selector: response
    params:
      Action: GetBrandMappedAttributes
      Format: JSON
      Version: '1.0'
- name: GetMappedAttributeOptions
  endpoint:
    path: /
    method: GET
    data_selector: MappedAttributeOptions
    params:
      Action: GetMappedAttributeOptions
      Version: '1.0'
- name: FeedList
  endpoint:
    path: /
    method: GET
    data_selector: feeds
    params:
      Action: FeedList
      Version: '1.0'
- name: FeedOffsetList
  endpoint:
    path: /
    method: GET
    data_selector: feeds
    params:
      Action: FeedOffsetList
      Version: '1.0'
- name: FeedCount
  endpoint:
    path: /
    method: GET
    data_selector: results
    params:
      Action: FeedCount
      Timestamp: 2015-07-01T11:11+0000
      UserID: maintenance@sellercenter.net
      Version: '1.0'
- name: FeedCancel
  endpoint:
    path: /?Action=FeedCancel
    method: POST
    data_selector: result
    params:
      Action: FeedCancel
      Format: XML
      Timestamp: '2015-04-01T10:00:00+02:00'
      UserID: maintenance@sellercenter.net
      Version: '1.0'
      Signature: 6b71278e279c0d1b069e16fb7fac3687bc8073f6660bcc06abc42df261821da1
- name: FeedRawInput
  endpoint:
    path: /
    method: GET
    data_selector: FeedRawInput
    params:
      Action: GetFeedRawInput
      Format: XML
      Timestamp: 2015-07-01T11:11+0000
      UserID: maintenance@sellercenter.net
      Version: '1.0'
- name: feed_status
  endpoint:
    path: /
    method: GET
    data_selector: FeedStatus
    params:
      Action: FeedStatus
      Version: '1.0'
- name: orders
  endpoint:
    path: /
    method: GET
    data_selector: orders
    params:
      Action: GetOrders
      Version: '1.0'
- name: order
  endpoint:
    path: /
    method: GET
    data_selector: response
    params:
      Action: GetOrder
      Version: '1.0'
- name: order_comments
  endpoint:
    path: /?Action=GetOrderComments
    method: GET
    data_selector: comments
    params:
      OrderId: '1'
      Timestamp: 2015-07-01T11:11+0000
      UserID: maintenance@sellercenter.net
      Version: '1.0'
- name: GetOrderItems
  endpoint:
    path: /
    method: GET
    data_selector: response
    params:
      Action: GetOrderItems
      Format: XML
      Timestamp: 2015-07-01T11:11+0000
      UserID: maintenance@sellercenter.net
      Version: '1.0'
- name: GetMultipleOrderItems
  endpoint:
    path: /?Action=GetMultipleOrderItems
    method: GET
    data_selector: ''
    params:
      Action: GetMultipleOrderItems
      Format: XML
      Timestamp: ''
      UserID: ''
      Version: '1.0'
      Signature: ''
      OrderIdList: []
- name: SetStatusToCanceled
  endpoint:
    path: /?Action=SetStatusToCanceled
    method: POST
    data_selector: response
    params: {}
- name: SetStatusToPackedByMarketplace
  endpoint:
    path: /
    method: POST
    data_selector: response
    params:
      Action: SetStatusToPackedByMarketplace
      Format: XML
      Timestamp: 2015-07-01T11:11+0000
      UserID: maintenance@sellercenter.net
      Version: '1.0'
- name: SetStatusToReadyToShip
  endpoint:
    path: /
    method: POST
    data_selector: Response
    params:
      Action: SetStatusToReadyToShip
      Version: '1.0'
- name: set_status_to_shipped
  endpoint:
    path: /?Action=SetStatusToShipped
    method: POST
    data_selector: response
    params:
      Action: SetStatusToShipped
      Version: '1.0'
- name: SetStatusToFailedDelivery
  endpoint:
    path: /?Action=SetStatusToFailedDelivery
    method: POST
- name: SetStatusToDelivered
  endpoint:
    path: ?Action=SetStatusToDelivered
    method: POST
- name: SetInvoiceAccessKey
  endpoint:
    path: /?Action=SetInvoiceAccessKey
    method: POST
- name: GetDocument
  endpoint:
    path: /?Action=GetDocument
    method: GET
    data_selector: File
- name: GetFailureReasons
  endpoint:
    path: /
    method: GET
    data_selector: response
    params:
      Action: GetFailureReasons
- name: SetInvoiceNumber
  endpoint:
    path: /?Action=SetInvoiceNumber
    method: POST
- name: CreatePickupRequest
  endpoint:
    path: /
    method: POST
    data_selector: response
    params:
      Action: CreatePickupRequest
      Version: '1.0'
- name: shipment_provider
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: metrics
  endpoint:
    path: /?Action=GetMetrics
    method: GET
    data_selector: metrics
- name: GetPayoutStatus
  endpoint:
    path: ?Action=GetPayoutStatus
    method: GET
    data_selector: response
    params: {}
- name: statistics
  endpoint:
    path: /?Action=GetStatistics
    method: GET
- name: SellerUpdate
  endpoint:
    path: /?Action=SellerUpdate
    method: POST
    data_selector: null
    params: {}
- name: user_update
  endpoint:
    path: /?Action=UserUpdate
    method: POST
    data_selector: Request
- name: GetSellerByUser
  endpoint:
    path: /
    method: GET
- name: manifest
  endpoint:
    path: /?Action=GetManifestList&Format=XML
    method: GET
    data_selector: Manifests
    params:
      Action: GetManifestList
      Format: XML
- name: create_forward_manifest
  endpoint:
    path: /?Action=CreateForwardManifest
    method: POST
    data_selector: Request
    params: {}
- name: manifest_document
  endpoint:
    path: /?Action=GetManifestDocument
    method: GET
    data_selector: DocumentType
    params: {}
- name: SetManifestStatusToShipped
  endpoint:
    path: /?Action=SetManifestStatusToShipped
    method: POST
    data_selector: Request
    params: {}
- name: set_manifest_status_to_shipped
  endpoint:
    path: /?Action=SetManifestStatusToShipped
    method: POST
    data_selector: Request
    params: {}
- name: GetQcStatus
  endpoint:
    path: ?Action=GetQcStatus
    method: GET
    data_selector: ''
    params: {}
- name: Feed
  endpoint:
    path: /reference/feedlist
    method: GET
    data_selector: records
- name: Product
  endpoint:
    path: /reference/getproducts
    method: GET
    data_selector: records
- name: Order
  endpoint:
    path: /reference/getorders
    method: GET
    data_selector: records
- name: Metrics
  endpoint:
    path: /reference/getmetrics
    method: GET
    data_selector: records
- name: Statistics
  endpoint:
    path: /reference/getstatistics
    method: GET
    data_selector: records
- name: webhook_entities
  endpoint:
    path: /?Action=GetWebhookEntities
    method: GET
- name: create_webhook
  endpoint:
    path: /?Action=CreateWebhook
    method: POST
    data_selector: Request
    params: {}
- name: GetProducts
  endpoint:
    path: /?Action=GetProducts
    method: GET
    data_selector: Products
    params: {}
- name: FeedList
  endpoint:
    path: /reference/feedlist
    method: GET
    data_selector: ''
    params: {}
- name: GetOrders
  endpoint:
    path: /reference/getorders
    method: GET
    data_selector: ''
    params: {}
- name: GetMetrics
  endpoint:
    path: /reference/getmetrics
    method: GET
    data_selector: ''
    params: {}
- name: GetProducts
  endpoint:
    path: /?Action=GetProducts
    method: GET
    data_selector: SuccessResponse.Body.Products.Product
    params: {}
- name: GetProducts
  endpoint:
    path: /v200.0.0/reference/getproducts
    method: GET
    data_selector: SuccessResponse
    params: {}
- name: ProductUpdate
  endpoint:
    path: /v200.0.0/reference/productupdate
    method: POST
    data_selector: SuccessResponse
    params:
      Action: ProductUpdate
      Timestamp: ISO8601
      UserID: user_id
      Version: version_number
      Signature: signature
- name: GetQcStatus
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params:
      Action: GetQcStatus
      SkuSellerList: array
- name: Feed
  endpoint:
    path: /reference/feedlist
    method: GET
    data_selector: payload
    params: {}
- name: Product
  endpoint:
    path: /reference/getproducts
    method: GET
    data_selector: payload
    params: {}
- name: Order
  endpoint:
    path: /reference/getorders
    method: GET
    data_selector: payload
    params: {}
- name: Statistics
  endpoint:
    path: /reference/getstatistics
    method: GET
    data_selector: payload
    params: {}
- name: webhooks
  endpoint:
    path: /?Action=GetWebhooks
    method: GET
    data_selector: WebhookId
    params: {}
- name: FeedList
  endpoint:
    path: /v200.0.0/reference/feedlist
    method: GET
    data_selector: records
    params: {}
- name: ProductUpdate
  endpoint:
    path: /v200.0.0/reference/productupdate
    method: POST
    data_selector: records
    params: {}
- name: webhook_entities
  endpoint:
    path: /?Action=GetWebhookEntities
    method: GET
    data_selector: Entities
- name: create_webhook
  endpoint:
    path: /?Action=CreateWebhook
    method: POST
    data_selector: Request
    params: {}
- name: GetShipmentProviders
  endpoint:
    path: /v200.0.0/reference/getshipmentproviders
    method: GET
- name: FeedList
  endpoint:
    path: /v200.0.0/reference/feedlist
    method: GET
- name: FeedOffsetList
  endpoint:
    path: /v200.0.0/reference/feedoffsetlist
    method: GET
- name: GetOrders
  endpoint:
    path: /v200.0.0/reference/getorders
    method: GET
- name: DeleteWebhook
  endpoint:
    path: /?Action=DeleteWebhook
    method: POST
    data_selector: Request
    params: {}
- name: FeedList
  endpoint:
    path: /v200.0.0/reference/feedlist
    method: GET
- name: FeedStatus
  endpoint:
    path: /v200.0.0/reference/feedstatus
    method: GET
- name: GetProducts
  endpoint:
    path: /?Action=GetProducts&Filter=sold-out&Format=XML&Timestamp=2015-07-21T05%3A14%3A49%2B02%3A00&UserID=maintenance%40sellercenter.net&Version=1.0&Signature=dee80841b2aa0ad1fb517f196c56a5e5b9c78627c9256a11df11da76a3f84503
    method: GET
    data_selector: Products
    params: {}
- name: products
  endpoint:
    path: ?Action=GetProducts
    method: GET
    data_selector: products
    params: {}
- name: ProductCreate
  endpoint:
    path: /
    method: POST
    data_selector: Body
- name: GetProducts
  endpoint:
    path: /
    method: GET
    data_selector: SuccessResponse.Body.Products.Product
    params:
      Action: GetProducts
      Filter: sold-out
      Format: XML
      Timestamp: 2015-07-21T05%3A14%3A49%2B02%3A00
      UserID: maintenance@sellercenter.net
      Version: '1.0'
      Signature: dee80841b2aa0ad1fb517f196c56a5e5b9c78627c9256a11df11da76a3f84503
- name: ProductUpdate
  endpoint:
    path: /
    method: POST
- name: ProductRemove
  endpoint:
    path: /?Action=ProductRemove
    method: POST
    data_selector: Request
    params: {}
- name: GetProducts
  endpoint:
    path: /v200.0.0/reference/getproducts
    method: GET
    data_selector: SuccessResponse
    params:
      Action: GetProducts
      Timestamp: ''
      UserID: ''
      Version: ''
      Signature: ''
- name: ProductUpdate
  endpoint:
    path: /v200.0.0/reference/productupdate
    method: POST
    data_selector: SuccessResponse
    params:
      Action: ProductUpdate
      Timestamp: ''
      UserID: ''
      Version: ''
      Signature: ''
- name: image
  endpoint:
    path: /?Action=Image
    method: POST
    data_selector: result
    params: {}
- name: brands
  endpoint:
    path: /
    method: GET
    data_selector: Brands
    params:
      Action: GetBrands
- name: categories
  endpoint:
    path: ?Action=GetCategoryTree
    method: GET
    data_selector: Categories
    params: {}
- name: FeedList
  endpoint:
    path: /v200.0.0/reference/feedlist
    method: GET
    data_selector: records
    params: {}
- name: ProductUpdate
  endpoint:
    path: /v200.0.0/reference/productupdate
    method: POST
    data_selector: response
    params: {}
- name: category_attributes
  endpoint:
    path: ?Action=GetCategoryAttributes
    method: GET
    data_selector: attributes
    params: {}
- name: GetShipmentProviders
  endpoint:
    path: /v200.0/reference/getshipmentproviders
    method: GET
- name: GetCategoriesByAttributeSet
  endpoint:
    path: ''
    method: GET
    data_selector: ''
    params:
      Action: GetCategoriesByAttributeSet
      Format: XML
      Version: '1.0'
- name: brand_mapped_attributes
  endpoint:
    path: /?Action=GetBrandMappedAttributes
    method: GET
    data_selector: attributes
    params: {}
- name: mapped_attribute_options
  endpoint:
    path: ?Action=GetMappedAttributeOptions
    method: GET
    data_selector: MappedAttributeOptions
    params: {}
- name: FeedList
  endpoint:
    path: /
    method: GET
    data_selector: feeds
- name: FeedStatus
  endpoint:
    path: /?Action=FeedStatus
    method: GET
    data_selector: FeedDetail
    params: {}
- name: ProductCreate
  endpoint:
    path: /?Action=ProductCreate
    method: POST
    data_selector: SuccessResponse
    params: {}
- name: products
  endpoint:
    path: /
    method: GET
    data_selector: results
- name: feed_offset_list
  endpoint:
    path: /?Action=FeedOffsetList
    method: GET
    data_selector: feeds
    params: {}
- name: feed_count
  endpoint:
    path: /
    method: GET
    data_selector: statistics
- name: ProductCreate
  endpoint:
    path: /?Action=ProductCreate
    method: POST
    data_selector: Body
- name: ProductUpdate
  endpoint:
    path: /
    method: POST
    data_selector: Request
- name: FeedRawInput
  endpoint:
    path: /
    method: GET
    data_selector: FeedRawInput
    params: {}
- name: ProductRemove
  endpoint:
    path: /
    method: POST
    data_selector: Request
- name: feed_status
  endpoint:
    path: /?Action=FeedStatus
    method: GET
    data_selector: FeedStatus
    params: {}
- name: image
  endpoint:
    path: /?Action=Image
    method: POST
    data_selector: Result
- name: brands
  endpoint:
    path: /?Action=GetBrands
    method: GET
    data_selector: brands
    params: {}
- name: orders
  endpoint:
    path: ?Action=GetOrders
    method: GET
    data_selector: records
- name: categories
  endpoint:
    path: /?Action=GetCategoryTree
    method: GET
    data_selector: Categories
    params: {}
- name: get_order
  endpoint:
    path: /?Action=GetOrder
    method: GET
    data_selector: Order
- name: category_attributes
  endpoint:
    path: /?Action=GetCategoryAttributes
    method: GET
    data_selector: attributes
    params: {}
- name: GetOrderItems
  endpoint:
    path: /
    method: GET
    data_selector: artículos
    params: {}
- name: GetCategoriesByAttributeSet
  endpoint:
    path: /
    method: GET
    data_selector: categories
    params:
      Action: GetCategoriesByAttributeSet
      Version: '1.0'
- name: GetBrandMappedAttributes
  endpoint:
    path: /?Action=GetBrandMappedAttributes
    method: GET
    data_selector: ''
    params: {}
- name: mapped_attribute_options
  endpoint:
    path: /?Action=GetMappedAttributeOptions
    method: GET
    data_selector: MappedAttributeOptions
    params: {}
- name: SetStatusToCanceled
  endpoint:
    path: /?Action=SetStatusToCanceled
    method: POST
- name: FeedList
  endpoint:
    path: /?Action=FeedList
    method: GET
    data_selector: feeds
- name: feed_offset_list
  endpoint:
    path: /?Action=FeedOffsetList
    method: GET
    data_selector: feeds
- name: FeedCount
  endpoint:
    path: /?Action=FeedCount
    method: GET
- name: SetStatusToPackedByMarketplace
  endpoint:
    path: ?Action=SetStatusToPackedByMarketplace
    method: POST
- name: feed_cancel
  endpoint:
    path: /
    method: POST
    data_selector: null
    params: {}
- name: SetStatusToReadyToShip
  endpoint:
    path: /?Action=SetStatusToReadyToShip
    method: POST
    data_selector: response
    params: {}
- name: FeedRawInput
  endpoint:
    path: /?Action=GetFeedRawInput
    method: GET
    data_selector: FeedRawInput
    params: {}
- name: FeedStatus
  endpoint:
    path: /?Action=FeedStatus
    method: GET
    data_selector: FeedStatus
- name: orders
  endpoint:
    path: /
    method: GET
    data_selector: TotalCount
    params: {}
- name: GetOrder
  endpoint:
    path: /?Action=GetOrder
    method: GET
    data_selector: Order
    params: {}
- name: SetStatusToDelivered
  endpoint:
    path: /?Action=SetStatusToDelivered
    method: POST
    data_selector: null
    params: {}
- name: order_comments
  endpoint:
    path: ?Action=GetOrderComments
    method: GET
    data_selector: comments
    params: {}
- name: SetInvoiceAccessKey
  endpoint:
    path: /?Action=SetInvoiceAccessKey
    method: POST
- name: get_document
  endpoint:
    path: ?Action=GetDocument
    method: GET
    data_selector: File
- name: GetMultipleOrderItems
  endpoint:
    path: ?Action=GetMultipleOrderItems
    method: GET
    data_selector: items
- name: GetFailureReasons
  endpoint:
    path: /?Action=GetFailureReasons
    method: GET
    data_selector: response
    params: {}
- name: SetStatusToCanceled
  endpoint:
    path: /?Action=SetStatusToCanceled
    method: POST
- name: SetInvoiceNumber
  endpoint:
    path: /?Action=SetInvoiceNumber
    method: POST
- name: SetStatusToPackedByMarketplace
  endpoint:
    path: /?Action=SetStatusToPackedByMarketplace
    method: POST
- name: SetImei
  endpoint:
    path: /?Action=SetImei
    method: POST
- name: shipment_providers
  endpoint:
    path: /?Action=GetShipmentProviders
    method: GET
    data_selector: response
    params: {}
- name: metrics
  endpoint:
    path: /?Action=GetMetrics
    method: GET
    data_selector: ''
- name: SetStatusToReadyToShip
  endpoint:
    path: /?Action=SetStatusToReadyToShip
    method: POST
- name: GetStatistics
  endpoint:
    path: /?Action=GetStatistics
    method: GET
- name: seller_update
  endpoint:
    path: /?Action=SellerUpdate
    method: POST
    data_selector: Request
    params: {}
- name: SetStatusToDelivered
  endpoint:
    path: /?Action=SetStatusToDelivered
    method: POST
    data_selector: ''
    params: {}
- name: UserUpdate
  endpoint:
    path: /?Action=UserUpdate
    method: POST
    data_selector: ''
    params: {}
- name: SetInvoiceAccessKey
  endpoint:
    path: /?Action=SetInvoiceAccessKey
    method: POST
    data_selector: Request
- name: GetSellerByUser
  endpoint:
    path: /
    method: GET
    params: {}
- name: GetDocument
  endpoint:
    path: ?Action=GetDocument
    method: GET
    data_selector: <File>
- name: manifest
  endpoint:
    path: /
    method: GET
    data_selector: Body/Manifests/Manifest
    params:
      ManifestType: forward
      Status: forward_shipped
      Limit: 50
      Offset: 0
- name: create_forward_manifest
  endpoint:
    path: ?Action=CreateForwardManifest
    method: POST
    data_selector: Request
    params: {}
- name: GetFailureReasons
  endpoint:
    path: /
    method: GET
    data_selector: response
    params:
      Action: GetFailureReasons
- name: get_manifest_document
  endpoint:
    path: /?Action=GetManifestDocument
    method: GET
- name: CreatePickupRequest
  endpoint:
    path: /?Action=CreatePickupRequest
    method: POST
- name: set_manifest_status_to_shipped
  endpoint:
    path: /?Action=SetManifestStatusToShipped
    method: POST
    data_selector: Request
    params: {}
- name: SetImei
  endpoint:
    path: /?Action=SetImei
    method: POST
- name: shipment_providers
  endpoint:
    path: /?Action=GetShipmentProviders
    method: GET
    data_selector: providers
    params: {}
- name: qc_status
  endpoint:
    path: /
    method: GET
    data_selector: QcStatus
    params:
      Limit: 100
      Offset: 0
      SkuSellerList: []
- name: metrics
  endpoint:
    path: /
    method: GET
    data_selector: metrics
- name: Feed
  endpoint:
    path: /v200.0.0/reference/feedlist
    method: GET
    data_selector: Feed
    params: {}
- name: Product
  endpoint:
    path: /v200.0.0/reference/getproducts
    method: GET
    data_selector: SellerSkus
    params: {}
- name: Order
  endpoint:
    path: /v200.0.0/reference/getorders
    method: GET
    data_selector: OrderId
    params: {}
- name: Statistics
  endpoint:
    path: /v200.0.0/reference/getstatistics
    method: GET
    data_selector: statistics
    params: {}
- name: payout_status
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: webhooks
  endpoint:
    path: /?Action=GetWebhooks
    method: GET
- name: statistics
  endpoint:
    path: /?Action=GetStatistics
    method: GET
    data_selector: ''
- name: webhook_entities
  endpoint:
    path: /?Action=GetWebhookEntities
    method: GET
    data_selector: entities
    params: {}
- name: SellerUpdate
  endpoint:
    path: /?Action=SellerUpdate
    method: POST
    data_selector: Request
- name: create_webhook
  endpoint:
    path: /?Action=CreateWebhook
    method: POST
    data_selector: Request
    params: {}
- name: UserUpdate
  endpoint:
    path: /?Action=UserUpdate
    method: POST
    data_selector: Request
    params: {}
- name: GetSellerByUser
  endpoint:
    path: /?Action=GetSellerByUser
    method: GET
- name: DeleteWebhook
  endpoint:
    path: /?Action=DeleteWebhook
    method: POST
    data_selector: Request
    params: {}
- name: manifests
  endpoint:
    path: /?Action=GetManifestList
    method: GET
    data_selector: Manifests.Manifest
    params:
      ManifestType: forward
      Status: forward_shipped
      Limit: 50
      Offset: 0
- name: Get Products
  endpoint:
    path: /?Action=GetProducts
    method: GET
- name: Get Brands
  endpoint:
    path: /?Action=GetBrands
    method: GET
- name: Get Categories
  endpoint:
    path: /?Action=GetCategory
    method: GET
- name: Get Attributes
  endpoint:
    path: /?Action=GetAttributes
    method: GET
- name: Get Orders
  endpoint:
    path: /?Action=GetOrders
    method: GET
- name: Get Order
  endpoint:
    path: /?Action=GetOrder
    method: GET
- name: CreateForwardManifest
  endpoint:
    path: /?Action=CreateForwardManifest
    method: POST
- name: GetManifestDocument
  endpoint:
    path: /
    method: GET
    params:
      Action: GetManifestDocument
- name: set_manifest_status_to_shipped
  endpoint:
    path: /?Action=SetManifestStatusToShipped
    method: POST
    data_selector: Request
    params: {}
- name: Get Products
  endpoint:
    path: /?Action=GetProducts
    method: GET
- name: Get Orders
  endpoint:
    path: /v600/reference/getorders
    method: GET
- name: Get Order
  endpoint:
    path: /v600/reference/getorder
    method: GET
- name: Get Items
  endpoint:
    path: /v600/reference/getorderitems
    method: GET
- name: Get Shipping Label
  endpoint:
    path: /v600/reference/getdocument
    method: GET
- name: qc_status
  endpoint:
    path: /
    method: GET
    data_selector: statesQc
    params:
      Limit: 100
      Offset: 0
      SkuSellerList: []
- name: Feed
  endpoint:
    path: /v200.0.0/reference/feedstatus
    method: GET
    data_selector: payload
    params: {}
- name: Product
  endpoint:
    path: /v200.0.0/reference/productcreate
    method: POST
    data_selector: payload
    params: {}
- name: Order
  endpoint:
    path: /v200.0.0/reference/getorders
    method: GET
    data_selector: payload
    params: {}
- name: Statistics
  endpoint:
    path: /v200.0.0/reference/getstatistics
    method: GET
    data_selector: payload
    params: {}
- name: webhook
  endpoint:
    path: ?Action=GetWebhooks
    method: GET
    data_selector: WebhookId
- name: webhook_entities
  endpoint:
    path: /?Action=GetWebhookEntities
    method: GET
    data_selector: entities
- name: feed_list
  endpoint:
    path: /v600.0.0/reference/feedlist
    method: GET
    data_selector: records
    params:
      UserID: look@me.com
      Version: '1.0'
      Action: FeedList
      Format: XML
- name: product_create
  endpoint:
    path: /v600.0.0/reference/productcreate
    method: POST
    data_selector: records
    params:
      UserID: look@me.com
      Version: '1.0'
      Action: ProductCreate
- name: CreateWebhook
  endpoint:
    path: /?Action=CreateWebhook
    method: POST
    data_selector: Request
    params: {}
- name: product
  endpoint:
    path: /
    method: GET
    data_selector: Request/Product
    params:
      UserID: example@example.com
      Action: GetShipmentProviders
      Timestamp: '2014-07-24T20:06:33+02:00'
      Version: '1.0'
- name: delete_webhook
  endpoint:
    path: /?Action=DeleteWebhook
    method: POST
    data_selector: Request
    params: {}
- name: feeds
  endpoint:
    path: /?Action=FeedStatus
    method: GET
    data_selector: FeedDetail
    params: {}
- name: Get Products
  endpoint:
    path: /?Action=GetProducts
    method: GET
- name: webhook_responses
  endpoint:
    path: /v600.0.0/reference/entities-payload-definition
    method: GET
- name: create_webhook
  endpoint:
    path: /v600.0.0/reference/createwebhook
    method: POST
- name: get_webhooks
  endpoint:
    path: /v600.0.0/reference/getwebhooks
    method: GET
- name: delete_webhook
  endpoint:
    path: /v600.0.0/reference/deletewebhook
    method: POST
- name: list_events
  endpoint:
    path: /v600.0.0/reference/getwebhookentities
    method: GET
- name: Get Products
  endpoint:
    path: /v600.0.0/reference/getproducts
    method: GET
- name: Create Products
  endpoint:
    path: /v600.0.0/reference/productcreate
    method: POST
- name: Update Products
  endpoint:
    path: /v600.0.0/reference/productupdate
    method: POST
- name: Delete Products
  endpoint:
    path: /v600.0.0/reference/productremove
    method: POST
- name: Get Feeds
  endpoint:
    path: /v600.0.0/reference/feedlist
    method: GET
- name: Get Orders
  endpoint:
    path: /v600.0.0/reference/getorders
    method: GET
- name: GetBrands
  endpoint:
    path: /v600.0.0/reference/getbrands
    method: GET
- name: GetCategoryTree
  endpoint:
    path: /v600.0.0/reference/getcategorytree
    method: GET
- name: GetCategoryAttributes
  endpoint:
    path: /v600.0.0/reference/getcategoryattributes
    method: GET
- name: GetContentScore
  endpoint:
    path: /v600.0.0/reference/get-content-score
    method: GET
- name: ProductCreate
  endpoint:
    path: /v600.0.0/reference/productcreate
    method: POST
- name: Image
  endpoint:
    path: /v600.0.0/reference/image
    method: POST
- name: ProductUpdate
  endpoint:
    path: /v600.0.0/reference/productupdate
    method: POST
- name: GetProducts
  endpoint:
    path: /v600.0.0/reference/getproducts
    method: GET
- name: ProductRemove
  endpoint:
    path: /v600.0.0/reference/productremove
    method: POST
- name: FeedList
  endpoint:
    path: /v600.0.0/reference/feedlist
    method: GET
- name: FeedOffsetList
  endpoint:
    path: /v600.0.0/reference/feedoffsetlist
    method: GET
- name: FeedStatus
  endpoint:
    path: /v600.0.0/reference/feedstatus
    method: GET
- name: FeedCancel
  endpoint:
    path: /v600.0.0/reference/feedcancel
    method: POST
- name: FeedCount
  endpoint:
    path: /v600.0.0/reference/feedcount
    method: GET
- name: GetFeedRawInput
  endpoint:
    path: /v600.0.0/reference/getfeedrawinput
    method: GET
- name: feeds
  endpoint:
    path: /?Action=FeedStatus
    method: GET
    data_selector: FeedDetail
- name: GetOrders
  endpoint:
    path: /v600.0/reference/getorders
    method: GET
- name: GetOrder
  endpoint:
    path: /v600.0/reference/getorder
    method: GET
- name: GetOrderItems
  endpoint:
    path: /v600.0/reference/getorderitems
    method: GET
- name: GetMultipleOrderItems
  endpoint:
    path: /v600.0/reference/getmultipleorderitems
    method: GET
- name: SetStatusToPackedByMarketplace
  endpoint:
    path: /v600.0/reference/setstatustopackedbymarketplace
    method: POST
- name: GetTrackingCode
  endpoint:
    path: /v600.0/reference/gettrackingcode
    method: GET
- name: GetDocument
  endpoint:
    path: /v600.0/reference/getdocument
    method: GET
- name: SetStatusToReadyToShip
  endpoint:
    path: /v600.0/reference/setstatustoreadytoship
    method: POST
- name: SetInvoicePDF
  endpoint:
    path: /v600.0/reference/setinvoicepdf
    method: POST
- name: SetStatusToCanceled
  endpoint:
    path: /v600.0/reference/setstatustocanceled
    method: POST
- name: Create Webhook
  endpoint:
    path: /v600.0.0/reference/createwebhook
    method: POST
- name: Get Webhooks
  endpoint:
    path: /v600.0.0/reference/getwebhooks
    method: GET
- name: Delete Webhook
  endpoint:
    path: /v600.0.0/reference/deletewebhook
    method: POST
- name: List Events
  endpoint:
    path: /v600.0.0/reference/getwebhookentities
    method: GET
- name: GetBrands
  endpoint:
    path: /v600.0.0/reference/getbrands
    method: GET
- name: GetCategoryTree
  endpoint:
    path: /v600.0.0/reference/getcategorytree
    method: GET
- name: GetCategoryAttributes
  endpoint:
    path: /v600.0.0/reference/getcategoryattributes
    method: GET
- name: GetContentScore
  endpoint:
    path: /v600.0.0/reference/get-content-score
    method: GET
- name: ProductCreate
  endpoint:
    path: /v600.0.0/reference/productcreate
    method: POST
- name: Image
  endpoint:
    path: /v600.0.0/reference/image
    method: POST
- name: ProductUpdate
  endpoint:
    path: /v600.0.0/reference/productupdate
    method: POST
- name: GetProducts
  endpoint:
    path: /v600.0.0/reference/getproducts
    method: GET
- name: ProductRemove
  endpoint:
    path: /v600.0.0/reference/productremove
    method: POST
- name: FeedList
  endpoint:
    path: /v600.0.0/reference/feedlist
    method: GET
- name: FeedOffsetList
  endpoint:
    path: /v600.0.0/reference/feedoffsetlist
    method: GET
- name: FeedStatus
  endpoint:
    path: /v600.0.0/reference/feedstatus
    method: GET
- name: FeedCancel
  endpoint:
    path: /v600.0.0/reference/feedcancel
    method: POST
- name: Get Brands
  endpoint:
    path: /v600.0.0/reference/getbrands
    method: GET
- name: Get Category
  endpoint:
    path: /v600.0.0/reference/getcategorytree
    method: GET
- name: Get Attributes
  endpoint:
    path: /v600.0.0/reference/getcategoryattributes
    method: GET
- name: Get Content Score
  endpoint:
    path: /v600.0.0/reference/get-content-score
    method: GET
- name: Creating Products
  endpoint:
    path: /v600.0.0/reference/productcreate
    method: POST
- name: Upload and Update Images
  endpoint:
    path: /v600.0.0/reference/image
    method: POST
- name: Update Products
  endpoint:
    path: /v600.0.0/reference/productupdate
    method: POST
- name: Get Products
  endpoint:
    path: /v600.0.0/reference/getproducts
    method: GET
- name: Delete Products
  endpoint:
    path: /v600.0.0/reference/productremove
    method: POST
- name: Get Feeds
  endpoint:
    path: /v600.0.0/reference/feedlist
    method: GET
- name: Get Feeds with Filters
  endpoint:
    path: /v600.0.0/reference/feedoffsetlist
    method: GET
- name: Feed Details
  endpoint:
    path: /v600.0.0/reference/feedstatus
    method: GET
- name: Feed Statistics
  endpoint:
    path: /v600.0.0/reference/feedcount
    method: GET
- name: Cancel Feeds
  endpoint:
    path: /v600.0.0/reference/feedcancel
    method: POST
- name: Get Feed Request
  endpoint:
    path: /v600.0.0/reference/getfeedrawinput
    method: GET
- name: Get Order
  endpoint:
    path: /v600.0.0/reference/getorder
    method: GET
- name: Get Orders
  endpoint:
    path: /v600.0.0/reference/getorders
    method: GET
- name: Get Items
  endpoint:
    path: /v600.0.0/reference/getorderitems
    method: GET
- name: Get Items for Multiple Orders
  endpoint:
    path: /v600.0.0/reference/getmultipleorderitems
    method: GET
- name: Cancel Order
  endpoint:
    path: /v600.0.0/reference/setstatustocanceled
    method: POST
- name: Set a Product as Packed
  endpoint:
    path: /v600.0.0/reference/setstatustopackedbymarketplace
    method: POST
- name: Get Shipping Label
  endpoint:
    path: /v600.0.0/reference/getdocument
    method: GET
- name: Get Tracking Code
  endpoint:
    path: /v600.0.0/reference/gettrackingcode
    method: GET
- name: Set Ready for Shipment
  endpoint:
    path: /v600.0.0/reference/setstatustoreadytoship
    method: POST
- name: Upload Invoice in pdf
  endpoint:
    path: /v600.0.0/reference/setinvoicepdf
    method: POST
- name: Webhook Responses
  endpoint:
    path: /v600.0.0/reference/entities-payload-definition
    method: GET
- name: Create Webhook
  endpoint:
    path: /v600.0.0/reference/createwebhook
    method: POST
- name: Get Webhooks
  endpoint:
    path: /v600.0.0/reference/getwebhooks
    method: GET
- name: Delete Webhook
  endpoint:
    path: /v600.0.0/reference/deletewebhook
    method: POST
- name: List Events
  endpoint:
    path: /v600.0.0/reference/getwebhookentities
    method: GET
- name: GetDocument
  endpoint:
    path: /v600.0.0/reference/getdocument
    method: GET
- name: GetOrder
  endpoint:
    path: /v600.0.0/reference/getorder
    method: GET
- name: GetOrders
  endpoint:
    path: /v600.0.0/reference/getorders
    method: GET
- name: GetOrderItems
  endpoint:
    path: /v600.0.0/reference/getorderitems
    method: GET
- name: GetMultipleOrderItems
  endpoint:
    path: /v600.0.0/reference/getmultipleorderitems
    method: GET
- name: GetOrders
  endpoint:
    path: /v600.0.0/reference/getorders
    method: GET
    data_selector: orders
    params:
      status: pending
- name: GetOrder
  endpoint:
    path: /v600.0.0/reference/getorder
    method: GET
    data_selector: order
    params: {}
- name: GetOrderItems
  endpoint:
    path: /v600.0.0/reference/getorderitems
    method: GET
    data_selector: items
    params: {}
- name: GetMultipleOrderItems
  endpoint:
    path: /v600.0.0/reference/getmultipleorderitems
    method: GET
    data_selector: items
    params: {}
- name: SetStatusToPackedByMarketplace
  endpoint:
    path: /v600.0.0/reference/setstatustopackedbymarketplace
    method: POST
    data_selector: packedStatus
    params: {}
- name: GetTrackingCode
  endpoint:
    path: /v600.0.0/reference/gettrackingcode
    method: GET
    data_selector: trackingCode
    params: {}
- name: GetDocument
  endpoint:
    path: /v600.0.0/reference/getdocument
    method: GET
    data_selector: document
    params: {}
- name: SetStatusToReadyToShip
  endpoint:
    path: /v600.0.0/reference/setstatustoreadytoship
    method: POST
    data_selector: readyStatus
    params: {}
- name: SetInvoicePDF
  endpoint:
    path: /v600.0.0/reference/setinvoicepdf
    method: POST
    data_selector: invoice
    params: {}
- name: SetStatusToCanceled
  endpoint:
    path: /v600.0.0/reference/setstatustocanceled
    method: POST
    data_selector: canceledStatus
    params:
      status: pending
- name: brands
  endpoint:
    path: /
    method: GET
    data_selector: brands
- name: category
  endpoint:
    path: /?Action=GetCategoryTree
    method: GET
    data_selector: Categories
    params: {}
- name: get_category_attributes
  endpoint:
    path: /?Action=GetCategoryAttributes
    method: GET
- name: content_score
  endpoint:
    path: /?Action=GetContentScore
    method: GET
    data_selector: scores
    params: {}
- name: Get Brands
  endpoint:
    path: /v600.0.0/reference/getbrands
    method: GET
- name: Get Category
  endpoint:
    path: /v600.0.0/reference/getcategorytree
    method: GET
- name: Get Attributes
  endpoint:
    path: /v600.0.0/reference/getcategoryattributes
    method: GET
- name: Get Content Score
  endpoint:
    path: /v600.0.0/reference/get-content-score
    method: GET
- name: Creating Products
  endpoint:
    path: /v600.0.0/reference/productcreate
    method: POST
- name: Upload and Update Images
  endpoint:
    path: /v600.0.0/reference/image
    method: POST
- name: Update Products
  endpoint:
    path: /v600.0.0/reference/productupdate
    method: POST
- name: Get Products
  endpoint:
    path: /v600.0.0/reference/getproducts
    method: GET
- name: Delete Products
  endpoint:
    path: /v600.0.0/reference/productremove
    method: POST
- name: Get Feeds
  endpoint:
    path: /v600.0.0/reference/feedlist
    method: GET
- name: Get Orders
  endpoint:
    path: /v600.0.0/reference/getorders
    method: GET
- name: Get Items for Multiple Orders
  endpoint:
    path: /v600.0.0/reference/getmultipleorderitems
    method: GET
- name: Get Shipping Label
  endpoint:
    path: /v600.0.0/reference/getdocument
    method: GET
- name: Get Tracking Code
  endpoint:
    path: /v600.0.0/reference/gettrackingcode
    method: GET
- name: Get Webhooks
  endpoint:
    path: /v600.0.0/reference/getwebhooks
    method: GET
- name: Create Products
  endpoint:
    path: /
    method: POST
    data_selector: Request
- name: GetOrder
  endpoint:
    path: /v600.0.0/reference/getorder
    method: GET
- name: GetOrders
  endpoint:
    path: /v600.0.0/reference/getorders
    method: GET
- name: GetOrderItems
  endpoint:
    path: /v600.0.0/reference/getorderitems
    method: GET
- name: GetDocument
  endpoint:
    path: /v600.0.0/reference/getdocument
    method: GET
- name: ProductCreate
  endpoint:
    path: /v600.0.0/reference/feedstatus
    method: GET
    data_selector: Body
    params: {}
- name: brands
  endpoint:
    path: /?Action=GetBrands
    method: GET
    data_selector: brands
    params: {}
- name: upload_and_update_images
  endpoint:
    path: /?Action=Image
    method: POST
- name: category
  endpoint:
    path: /?Action=GetCategoryTree
    method: GET
    data_selector: Categories
    params: {}
- name: update_product
  endpoint:
    path: /?Action=ProductUpdate
    method: POST
- name: get_category_attributes
  endpoint:
    path: /?Action=GetCategoryAttributes
    method: GET
- name: content_score
  endpoint:
    path: /?Action=GetContentScore
    method: GET
    data_selector: response
    params: {}
- name: get_products
  endpoint:
    path: /?Action=GetProducts
    method: GET
    data_selector: products
- name: Create Products
  endpoint:
    path: /?Action=ProductCreate
    method: POST
    data_selector: Request
- name: delete_product
  endpoint:
    path: /?Action=ProductRemove
    method: POST
- name: feeds
  endpoint:
    path: /?Action=FeedList
    method: GET
    data_selector: feeds
    params: {}
- name: Upload and Update Images
  endpoint:
    path: /?Action=Image
    method: POST
- name: Get Feeds with Filters
  endpoint:
    path: /v600.0.0/reference/feedoffsetlist
    method: GET
    data_selector: feeds
    params: {}
- name: Get Feeds
  endpoint:
    path: /v600.0.0/reference/feedlist
    method: GET
    data_selector: feeds
    params: {}
- name: Update Products
  endpoint:
    path: /
    method: POST
    data_selector: Feed
    params: {}
- name: feed_details
  endpoint:
    path: /v600.0.0/reference/feedstatus
    method: GET
    data_selector: Feed
    params: {}
- name: feed_list
  endpoint:
    path: /v600.0.0/reference/feedlist
    method: GET
    data_selector: Feeds
    params: {}
- name: get_products
  endpoint:
    path: /?Action=GetProducts
    method: GET
    data_selector: products
- name: feed_statistics
  endpoint:
    path: /v600.0.0/reference/feedcount
    method: GET
    data_selector: Total
- name: delete_product
  endpoint:
    path: /?Action=ProductRemove
    method: POST
    data_selector: Request
    params: {}
- name: feed_list
  endpoint:
    path: /?Action=FeedList
    method: GET
    data_selector: feeds
- name: get_feed_request
  endpoint:
    path: /?Action=GetFeedRawInput
    method: GET
    data_selector: FeedRawInput
- name: feeds
  endpoint:
    path: /v600.0.0/reference/feedoffsetlist
    method: GET
    data_selector: feeds
    params: {}
- name: get_order
  endpoint:
    path: /?Action=GetOrder
    method: GET
- name: Get Feeds
  endpoint:
    path: /v600.0.0/reference/feedlist
    method: GET
- name: Get Feed Details
  endpoint:
    path: /v600.0.0/reference/feedstatus
    method: GET
- name: get_orders
  endpoint:
    path: /?Action=GetOrders
    method: GET
    data_selector: orders
- name: feed_statistics
  endpoint:
    path: /v600.0.0/reference/feedcount
    method: GET
    data_selector: Total
    params: {}
- name: cancel_feeds
  endpoint:
    path: /?Action=FeedCancel
    method: POST
- name: order_items
  endpoint:
    path: /?Action=GetOrderItems
    method: GET
    data_selector: items
    params: {}
- name: Get Feed Raw Input
  endpoint:
    path: /?Action=GetFeedRawInput
    method: GET
    data_selector: FeedRawInput
    params: {}
- name: get_multiple_order_items
  endpoint:
    path: ?Action=GetMultipleOrderItems
    method: GET
    data_selector: ''
    params: {}
- name: GetOrder
  endpoint:
    path: /?Action=GetOrder
    method: GET
    data_selector: response
    params: {}
- name: orders
  endpoint:
    path: /?Action=GetOrders
    method: GET
    data_selector: orders
    params:
      limit: 100
- name: cancel_order
  endpoint:
    path: /?Action=SetStatusToCanceled
    method: POST
- name: get_order_items
  endpoint:
    path: /?Action=GetOrderItems
    method: GET
    data_selector: items
- name: set_product_as_packed
  endpoint:
    path: /?Action=SetStatusToPackedByMarketplace
    method: POST
- name: get_multiple_order_items
  endpoint:
    path: /?Action=GetMultipleOrderItems
    method: GET
    data_selector: items
    params: {}
- name: get_shipping_label
  endpoint:
    path: /?Action=GetDocument
    method: GET
    data_selector: DocumentType
    params: {}
- name: cancel_order
  endpoint:
    path: /?Action=SetStatusToCanceled
    method: POST
- name: SetStatusToReadyToShip
  endpoint:
    path: /?Action=SetStatusToReadyToShip
    method: POST
- name: shipping_label
  endpoint:
    path: /?Action=GetDocument
    method: GET
    data_selector: File
    params: {}
- name: invoice_upload
  endpoint:
    path: /v1/marketplace-sellers/invoice/pdf
    method: POST
- name: Get Tracking Code
  endpoint:
    path: /?Action=GetTrackingCode
    method: GET
    data_selector: shipping_code
    params: {}
- name: Feed Created
  endpoint:
    path: /v600.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: Feed Completed
  endpoint:
    path: /v600.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: Product Created
  endpoint:
    path: /v600.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: Product Updated
  endpoint:
    path: /v600.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: Order Created
  endpoint:
    path: /v600.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: Order Item Statuses Modified
  endpoint:
    path: /v600.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: CreateWebhook
  endpoint:
    path: /?Action=CreateWebhook
    method: POST
- name: GetWebhooks
  endpoint:
    path: /getwebhooks
    method: GET
- name: upload_invoice
  endpoint:
    path: /v1/marketplace-sellers/invoice/pdf
    method: POST
    data_selector: response
    params: {}
- name: webhooks
  endpoint:
    path: /?Action=GetWebhooks
    method: GET
    data_selector: Webhook
    params: {}
- name: delete_webhook
  endpoint:
    path: /?Action=DeleteWebhook
    method: POST
    data_selector: Request
    params: {}
- name: feed_created
  endpoint:
    path: /v600.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: feed_completed
  endpoint:
    path: /v600.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: product_created
  endpoint:
    path: /v600.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: product_updated
  endpoint:
    path: /v600.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: order_created
  endpoint:
    path: /v600.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: order_items_status_changed
  endpoint:
    path: /v600.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: webhook_events
  endpoint:
    path: /?Action=GetWebhookEntities
    method: GET
- name: Create Webhook
  endpoint:
    path: /?Action=CreateWebhook
    method: POST
- name: Get Webhooks
  endpoint:
    path: /reference/getwebhooks
    method: GET
- name: Delete Webhook
  endpoint:
    path: /reference/deletewebhook
    method: POST
- name: List Events
  endpoint:
    path: /reference/getwebhookentities
    method: GET
- name: webhooks
  endpoint:
    path: /?Action=GetWebhooks
    method: GET
    data_selector: WebhookId
    params: {}
- name: brands
  endpoint:
    path: /v500/reference/getbrands
    method: GET
- name: categories
  endpoint:
    path: /v500/reference/getcategorytree
    method: GET
- name: products
  endpoint:
    path: /v500/reference/getproducts
    method: GET
- name: stock
  endpoint:
    path: /v500/reference/getstock
    method: GET
- name: orders
  endpoint:
    path: /v500/reference/getorders
    method: GET
- name: delete_webhook
  endpoint:
    path: /?Action=DeleteWebhook
    method: POST
- name: list_events
  endpoint:
    path: /?Action=GetWebhookEntities
    method: GET
- name: feed_list
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params:
      UserID: look@me.com
      Version: '1.0'
      Action: FeedList
      Format: XML
      Timestamp: ''
- name: get_products
  endpoint:
    path: /?Action=GetProducts
    method: GET
    data_selector: ''
    params: {}
- name: get_orders
  endpoint:
    path: /v500/reference/getorders
    method: GET
    data_selector: ''
    params: {}
- name: Product
  endpoint:
    path: /
    method: GET
    data_selector: Request/Product
    params:
      UserID: example@example.com
      Action: GetShipmentProviders
      Timestamp: '2014-07-24T20:06:33+02:00'
      Version: '1.0'
- name: feeds
  endpoint:
    path: /?Action=FeedStatus
    method: GET
    data_selector: FeedDetail
- name: GetProducts
  endpoint:
    path: /v500.0/reference/getproducts
    method: GET
- name: ProductCreate
  endpoint:
    path: /v500.0/reference/productcreate
    method: POST
- name: ProductUpdate
  endpoint:
    path: /v500.0/reference/productupdate
    method: POST
- name: ProductRemove
  endpoint:
    path: /v500.0/reference/productremove
    method: POST
- name: GetOrders
  endpoint:
    path: /v500.0/reference/getorders
    method: GET
- name: GetOrder
  endpoint:
    path: /v500.0/reference/getorder
    method: GET
- name: create_webhook
  endpoint:
    path: /v500.0.0/reference/createwebhook
    method: POST
- name: delete_webhook
  endpoint:
    path: /v500.0.0/reference/deletewebhook
    method: POST
- name: get_webhooks
  endpoint:
    path: /v500.0.0/reference/getwebhooks
    method: GET
- name: get_webhook_entities
  endpoint:
    path: /v500.0.0/reference/getwebhookentities
    method: GET
- name: feed_list
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params:
      UserID: look@me.com
      Version: '1.0'
      Action: FeedList
      Format: XML
      Timestamp: ''
- name: Product
  endpoint:
    path: /
    method: GET
    data_selector: Request
    params: {}
- name: feeds
  endpoint:
    path: /?Action=FeedStatus
    method: GET
    data_selector: FeedDetail
    params: {}
- name: GetBrands
  endpoint:
    path: /v500.0.0/reference/getbrands
    method: GET
- name: GetCategoryTree
  endpoint:
    path: /v500.0.0/reference/getcategorytree
    method: GET
- name: GetCategoryAttributes
  endpoint:
    path: /v500.0.0/reference/getcategoryattributes
    method: GET
- name: GetContentScore
  endpoint:
    path: /v500.0.0/reference/get-content-score
    method: GET
- name: ProductCreate
  endpoint:
    path: /v500.0.0/reference/productcreate
    method: POST
- name: Image
  endpoint:
    path: /v500.0.0/reference/image
    method: POST
- name: ProductUpdate
  endpoint:
    path: /v500.0.0/reference/productupdate
    method: POST
- name: GetProducts
  endpoint:
    path: /v500.0.0/reference/getproducts
    method: GET
- name: ProductRemove
  endpoint:
    path: /v500.0.0/reference/productremove
    method: POST
- name: FeedList
  endpoint:
    path: /v500.0.0/reference/feedlist
    method: GET
- name: FeedOffsetList
  endpoint:
    path: /v500.0.0/reference/feedoffsetlist
    method: GET
- name: FeedStatus
  endpoint:
    path: /v500.0.0/reference/feedstatus
    method: GET
- name: FeedCancel
  endpoint:
    path: /v500.0.0/reference/feedcancel
    method: POST
- name: webhook_responses
  endpoint:
    path: /v500.0.0/reference/entities-payload-definition
    method: GET
- name: create_webhook
  endpoint:
    path: /v500.0.0/reference/createwebhook
    method: POST
- name: get_webhooks
  endpoint:
    path: /v500.0.0/reference/getwebhooks
    method: GET
- name: delete_webhook
  endpoint:
    path: /v500.0.0/reference/deletewebhook
    method: POST
- name: list_events
  endpoint:
    path: /v500.0.0/reference/getwebhookentities
    method: GET
- name: GetOrders
  endpoint:
    path: /v500.0.0/reference/getorders
    method: GET
- name: GetOrder
  endpoint:
    path: /v500.0.0/reference/getorder
    method: GET
- name: GetOrderItems
  endpoint:
    path: /v500.0.0/reference/getorderitems
    method: GET
- name: GetMultipleOrderItems
  endpoint:
    path: /v500.0.0/reference/getmultipleorderitems
    method: GET
- name: SetstatustopacketbyMaketplace
  endpoint:
    path: /v500.0.0/reference/setstatustopackedbymarketplace
    method: POST
- name: GetTrackingCode
  endpoint:
    path: /v500.0.0/reference/gettrackingcode
    method: GET
- name: GetDocument
  endpoint:
    path: /v500.0.0/reference/getdocument
    method: GET
- name: SetStatusToReadyToShip
  endpoint:
    path: /v500.0.0/reference/setstatustoreadytoship
    method: POST
- name: SetInvoicePDF
  endpoint:
    path: /v500.0.0/reference/setinvoicepdf
    method: POST
- name: SetStatustoCanceled
  endpoint:
    path: /v500.0.0/reference/setstatustocanceled
    method: POST
- name: GetProducts
  endpoint:
    path: /v500.0.0/reference/getproducts
    method: GET
- name: GetCategoryAttributes
  endpoint:
    path: /v500.0.0/reference/getcategoryattributes
    method: GET
- name: GetContentScore
  endpoint:
    path: /v500.0.0/reference/get-content-score
    method: GET
- name: GetBrands
  endpoint:
    path: /v500.0.0/reference/getbrands
    method: GET
- name: GetCategoryTree
  endpoint:
    path: /v500.0.0/reference/getcategorytree
    method: GET
- name: GetCategoryAttributes
  endpoint:
    path: /v500.0.0/reference/getcategoryattributes
    method: GET
- name: GetContentScore
  endpoint:
    path: /v500.0.0/reference/get-content-score
    method: GET
- name: ProductCreate
  endpoint:
    path: /v500.0.0/reference/productcreate
    method: POST
- name: Image
  endpoint:
    path: /v500.0.0/reference/image
    method: POST
- name: ProductUpdate
  endpoint:
    path: /v500.0.0/reference/productupdate
    method: POST
- name: GetProducts
  endpoint:
    path: /v500.0.0/reference/getproducts
    method: GET
- name: ProductRemove
  endpoint:
    path: /v500.0.0/reference/productremove
    method: POST
- name: FeedList
  endpoint:
    path: /v500.0.0/reference/feedlist
    method: GET
- name: FeedOffsetList
  endpoint:
    path: /v500.0.0/reference/feedoffsetlist
    method: GET
- name: FeedStatus
  endpoint:
    path: /v500.0.0/reference/feedstatus
    method: GET
- name: FeedCancel
  endpoint:
    path: /v500.0.0/reference/feedcancel
    method: POST
- name: GetDocument
  endpoint:
    path: /v500.0.0/reference/getdocument
    method: GET
    data_selector: records
    params: {}
- name: GetOrder
  endpoint:
    path: /v500.0.0/reference/getorder
    method: GET
    data_selector: records
    params: {}
- name: GetOrders
  endpoint:
    path: /v500.0.0/reference/getorders
    method: GET
    data_selector: records
    params: {}
- name: GetOrderItems
  endpoint:
    path: /v500.0.0/reference/getorderitems
    method: GET
    data_selector: records
    params: {}
- name: GetMultipleOrderItems
  endpoint:
    path: /v500.0.0/reference/getmultipleorderitems
    method: GET
    data_selector: records
    params: {}
- name: brands
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: GetOrders
  endpoint:
    path: /v500.0.0/reference/getorders
    method: GET
    data_selector: orders
- name: GetOrder
  endpoint:
    path: /v500.0.0/reference/getorder
    method: GET
    data_selector: order
- name: GetOrderItems
  endpoint:
    path: /v500.0.0/reference/getorderitems
    method: GET
    data_selector: orderItems
- name: GetMultipleOrderItems
  endpoint:
    path: /v500.0.0/reference/getmultipleorderitems
    method: GET
    data_selector: multipleOrderItems
- name: SetStatustoCanceled
  endpoint:
    path: /v500.0.0/reference/setstatustocanceled
    method: POST
    data_selector: cancellation
- name: SetStatusToReadyToShip
  endpoint:
    path: /v500.0.0/reference/setstatustoreadytoship
    method: POST
    data_selector: readyToShip
- name: GetTrackingCode
  endpoint:
    path: /v500.0.0/reference/gettrackingcode
    method: GET
    data_selector: trackingCode
- name: GetDocument
  endpoint:
    path: /v500.0.0/reference/getdocument
    method: GET
    data_selector: document
- name: SetInvoicePDF
  endpoint:
    path: /v500.0.0/reference/setinvoicepdf
    method: POST
    data_selector: invoice
- name: SetstatustopacketbyMaketplace
  endpoint:
    path: /v500.0.0/reference/setstatustopackedbymarketplace
    method: POST
    data_selector: packing
- name: categories
  endpoint:
    path: /
    method: GET
    data_selector: Categories
    params:
      Action: GetCategoryTree
- name: GetCategorySuggestion
  endpoint:
    path: ?Action=GetCategorySuggestion
    method: GET
    data_selector: response
    params: {}
- name: GetProducts
  endpoint:
    path: /v500.0.0/reference/getproducts
    method: GET
- name: ProductCreate
  endpoint:
    path: /v500.0.0/reference/productcreate
    method: POST
- name: UpdateProducts
  endpoint:
    path: /v500.0.0/reference/productupdate
    method: POST
- name: GetCategoryAttributes
  endpoint:
    path: /v500.0.0/reference/getcategoryattributes
    method: GET
- name: GetContentScore
  endpoint:
    path: /v500.0.0/reference/get-content-score
    method: GET
- name: GetCategoryAttributes
  endpoint:
    path: /?Action=GetCategoryAttributes
    method: GET
- name: GetContentScore
  endpoint:
    path: /?Action=GetContentScore
    method: GET
    data_selector: response
- name: GetDocument
  endpoint:
    path: /v500.0.0/reference/getdocument
    method: GET
    data_selector: null
    params: {}
- name: GetOrder
  endpoint:
    path: /v500.0.0/reference/getorder
    method: GET
    data_selector: null
    params: {}
- name: GetOrders
  endpoint:
    path: /v500.0.0/reference/getorders
    method: GET
    data_selector: null
    params: {}
- name: GetOrderItems
  endpoint:
    path: /v500.0.0/reference/getorderitems
    method: GET
    data_selector: null
    params: {}
- name: GetMultipleOrderItems
  endpoint:
    path: /v500.0.0/reference/getmultipleorderitems
    method: GET
    data_selector: null
    params: {}
- name: Create Products
  endpoint:
    path: /?Action=ProductCreate
    method: POST
- name: Get Category Attributes
  endpoint:
    path: /getcategoryattributes
    method: GET
- name: brands
  endpoint:
    path: /?Action=GetBrands
    method: GET
    data_selector: brands
    params: {}
- name: category
  endpoint:
    path: /?Action=GetCategoryTree
    method: GET
    data_selector: Categories
- name: cargar_y_actualizar_imagenes
  endpoint:
    path: /?Action=Image
    method: POST
    data_selector: Request
    params: {}
- name: GetCategorySuggestion
  endpoint:
    path: /?Action=GetCategorySuggestion
    method: GET
    data_selector: response
    params: {}
- name: GetCategoryAttributes
  endpoint:
    path: /?Action=GetCategoryAttributes
    method: GET
    data_selector: attributes
    params: {}
- name: Actualizar Productos
  endpoint:
    path: /?Action=ProductUpdate
    method: POST
    data_selector: Request
- name: GetContentScore
  endpoint:
    path: /?Action=GetContentScore
    method: GET
    data_selector: response
    params: {}
- name: products
  endpoint:
    path: /
    method: GET
    data_selector: products
    params:
      Action: GetProducts
- name: product_create
  endpoint:
    path: /?Action=ProductCreate
    method: POST
- name: get_category_attributes
  endpoint:
    path: /reference/getcategoryattributes
    method: GET
- name: stock
  endpoint:
    path: /GetStock
    method: GET
    data_selector: stock
    params: {}
- name: Cargar y Actualizar Imágenes
  endpoint:
    path: /?Action=Image
    method: POST
    data_selector: Request
    params: {}
- name: Actualizar Stock
  endpoint:
    path: /?Action=UpdateStock
    method: POST
    data_selector: Request
- name: Actualizar Productos
  endpoint:
    path: /?Action=ProductUpdate
    method: POST
    data_selector: Feed
    params: {}
- name: feed_list
  endpoint:
    path: /?Action=FeedList
    method: GET
    data_selector: feeds
    params: {}
- name: FeedOffsetList
  endpoint:
    path: /?Action=FeedOffsetList
    method: GET
    data_selector: feeds
    params: {}
- name: productos
  endpoint:
    path: /?Action=GetProducts
    method: GET
    data_selector: products
    params: {}
- name: FeedStatus
  endpoint:
    path: /?Action=FeedStatus
    method: GET
    data_selector: Feed
    params: {}
- name: feed_statistics
  endpoint:
    path: /?Action=FeedCount
    method: GET
    data_selector: Total, Queued, Processing, Finished, Canceled
    params: {}
- name: stock
  endpoint:
    path: /GetStock
    method: GET
    data_selector: response
    params:
      limit: 1000
- name: update_stock
  endpoint:
    path: /?Action=UpdateStock
    method: POST
    data_selector: Request
- name: GetFeedRawInput
  endpoint:
    path: /?Action=GetFeedRawInput
    method: GET
    data_selector: FeedRawInput
- name: feed_list
  endpoint:
    path: /?Action=FeedList
    method: GET
    data_selector: feeds
    params: {}
- name: get_order
  endpoint:
    path: /?Action=GetOrder
    method: GET
    data_selector: Order
    params: {}
- name: FeedOffsetList
  endpoint:
    path: /?Action=FeedOffsetList
    method: GET
    data_selector: feeds
    params: {}
- name: get_orders
  endpoint:
    path: /?Action=GetOrders
    method: GET
    data_selector: TotalCount
    params:
      limit: '100'
- name: feed_status
  endpoint:
    path: /?Action=FeedStatus
    method: GET
    data_selector: FeedStatus
- name: order_items
  endpoint:
    path: /?Action=GetOrderItems
    method: GET
    data_selector: OrderItems
    params: {}
- name: feed_count
  endpoint:
    path: /?Action=FeedCount
    method: GET
    data_selector: Total
    params: {}
- name: multiple_order_items
  endpoint:
    path: /?Action=GetMultipleOrderItems
    method: GET
- name: get_feed_raw_input
  endpoint:
    path: /?Action=GetFeedRawInput
    method: GET
    data_selector: FeedRawInput
    params: {}
- name: cancel_order
  endpoint:
    path: /?Action=SetStatusToCanceled
    method: POST
    data_selector: response
    params:
      Action: SetStatusToCanceled
      Version: '1.0'
- name: GetOrder
  endpoint:
    path: /?Action=GetOrder
    method: GET
    data_selector: OrderId
    params: {}
- name: get_orders
  endpoint:
    path: /?Action=GetOrders
    method: GET
    data_selector: Orders
- name: set_statustopackedbymarketplace
  endpoint:
    path: /?Action=SetStatusToPackedByMarketplace
    method: POST
    data_selector: response
    params:
      Action: SetStatusToPackedByMarketplace
      Format: XML
      Timestamp: 2015-07-01T11:11+0000
      UserID: maintenance@sellercenter.net
      Version: '1.0'
- name: get_order_items
  endpoint:
    path: /?Action=GetOrderItems
    method: GET
    data_selector: OrderItems
    params: {}
- name: get_multiple_order_items
  endpoint:
    path: /?Action=GetMultipleOrderItems
    method: GET
    data_selector: OrderItems
- name: GetDocument
  endpoint:
    path: /
    method: GET
    data_selector: File
    params:
      Action: GetDocument
      DocumentType: shippingParcel
      UserID: maintenance@sellercenter.net
      Version: '1.0'
- name: cancel_order
  endpoint:
    path: /?Action=SetStatusToCanceled
    method: POST
    data_selector: response
    params: {}
- name: tracking_code
  endpoint:
    path: /?Action=GetTrackingCode
    method: GET
- name: SetStatusToPackedByMarketplace
  endpoint:
    path: /?Action=SetStatusToPackedByMarketplace
    method: POST
    data_selector: ''
    params:
      Action: SetStatusToPackedByMarketplace
      Format: XML
      Timestamp: ''
      UserID: ''
      Version: '1.0'
      Signature: ''
      OrderItemIds: ''
- name: SetStatusToReadyToShip
  endpoint:
    path: /?Action=SetStatusToReadyToShip
    method: POST
- name: get_document
  endpoint:
    path: /
    method: GET
    data_selector: response
    params:
      Action: GetDocument
      DocumentType: shippingParcel
      Version: '1.0'
- name: Cargar Documento Tributario
  endpoint:
    path: /v1/marketplace-sellers/invoice/pdf
    method: POST
- name: get_tracking_code
  endpoint:
    path: /?Action=GetTrackingCode
    method: GET
    data_selector: items
    params: {}
- name: feed_created
  endpoint:
    path: /v500.0.0/reference/entities-payload-definition
    method: GET
    data_selector: Feed
    params: {}
- name: feed_completed
  endpoint:
    path: /v500.0.0/reference/entities-payload-definition
    method: GET
    data_selector: Feed
    params: {}
- name: product_created
  endpoint:
    path: /v500.0.0/reference/entities-payload-definition
    method: GET
    data_selector: SellerSkus
    params: {}
- name: product_updated
  endpoint:
    path: /v500.0.0/reference/entities-payload-definition
    method: GET
    data_selector: SellerSkus
    params: {}
- name: order_created
  endpoint:
    path: /v500.0.0/reference/entities-payload-definition
    method: GET
    data_selector: OrderId
    params: {}
- name: order_items_status_changed
  endpoint:
    path: /v500.0.0/reference/entities-payload-definition
    method: GET
    data_selector: OrderItemIds
    params: {}
- name: set_status_to_ready_to_ship
  endpoint:
    path: /?Action=SetStatusToReadyToShip
    method: POST
- name: create_webhook
  endpoint:
    path: /?Action=CreateWebhook
    method: POST
- name: get_webhooks
  endpoint:
    path: /getwebhooks
    method: GET
- name: delete_webhook
  endpoint:
    path: /deletewebhook
    method: POST
- name: get_webhook_entities
  endpoint:
    path: /getwebhookentities
    method: GET
- name: Cargar Documento Tributario
  endpoint:
    path: /v1/marketplace-sellers/invoice/pdf
    method: POST
- name: webhook
  endpoint:
    path: /?Action=GetWebhooks
    method: GET
    data_selector: webhooks
    params:
      Action: GetWebhooks
      Version: '1.0'
- name: delete_webhook
  endpoint:
    path: /?Action=DeleteWebhook
    method: POST
    data_selector: Request
    params: {}
- name: feed_created
  endpoint:
    path: /v500.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: feed_completed
  endpoint:
    path: /v500.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: product_created
  endpoint:
    path: /v500.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: product_updated
  endpoint:
    path: /v500.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: order_created
  endpoint:
    path: /v500.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: order_items_status_changed
  endpoint:
    path: /v500.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: statistics_updated
  endpoint:
    path: /v500.0.0/reference/entities-payload-definition
    method: GET
    data_selector: payload
    params: {}
- name: webhook_events
  endpoint:
    path: /
    method: GET
    data_selector: WebhookEntities
- name: GetWebhooks
  endpoint:
    path: /
    method: GET
    data_selector: webhooks
    params:
      Action: GetWebhooks
      Version: '1.0'
- name: categories
  endpoint:
    path: /docs/categories
    method: GET
    data_selector: categories
    params: {}
- name: webhook_events
  endpoint:
    path: /?Action=GetWebhookEntities
    method: GET
    data_selector: events
- name: órdenes
  endpoint:
    path: /v200.0.0/docs/orders
    method: GET
- name: categories
  endpoint:
    path: /categories
    method: GET
- name: categorías
  endpoint:
    path: /v200.0.0/docs/categories
    method: GET
    data_selector: categorías
    params: {}
notes:
- As of 30th November 2022, all requests must have the User-Agent header set in a
  specific format.
- All JSON values are strings.
- As of 30th November 2022, all requests must have the User-Agent header set in the
  specified format.
- All JSON values are returned as strings.
- All calls always take the Action, Timestamp, UserID, Version and Signature parameters.
- POST request size limitations according to the SC standard web server setup maximum
  POST request body size is 128MB.
- All requests posted to the server must be cryptographically signed.
- Each seller is allowed to create 50 feeds per day.
- Only Queued feeds can be canceled.
- Invoice will be changed for all order items in the package.
- The returned metrics are not computed in real-time, but are pre-calculated at regular
  intervals.
- SkuSellerList can ONLY be sent as an array, even with one element
- A partir del 30 de noviembre de 2022, todas las solicitudes deben tener el encabezado
  User-Agent configurado.
- Todos los valores JSON son cadenas (strings)
- El tamaño máximo del cuerpo de la solicitud POST es 128MB.
- SkuSellerList can ONLY be sent as an array
- No hay llamadas anónimas a la API. Cada llamada a la API se realiza como un usuario
  específico de Seller Center.
- 'The XML tags have the following meaning: WebhookId, CallbackUrl, WebhookSource,
  Events.'
- La clave de API es una cadena
- El parámetro de firma requerido es el HMAC de la cadena de solicitud con el algoritmo
  de resumen SHA256.
- Los feeds con cualquier estado que no sea 'Queued' se eliminarán automáticamente
  del sistema 30 días después de su creación.
- Sólo se pueden cancelar los feeds en cola.
- 'Hay límites en la cantidad de llamadas que puede realizar por segundo (throttling):
  si realiza más de 30 solicitudes en 3 segundos, obtendrá una respuesta de error
  ''E429: Too many requests'''
- KAM será su aliado estratégico para el éxito!
- A partir del 30 de noviembre de 2022, todas las solicitudes deberán tener el encabezado
  User-Agent configurado.
- Todos los valores JSON son cadenas (strings).
- No anonymous calls to the API. Each call is made as a specific Seller Center user.
- All requests must be cryptographically signed.
- API key should be treated as a string.
- Issue requests with XML body for certain APIs.
- Sólo se consideran los últimos 30 días (recuerde que los feeds que no están en cola
  se eliminan después de 30 días a partir de la fecha de creación).
- La factura se modificará para todos los artículos del pedido en el paquete.
- Las métricas devueltas no se calculan en tiempo real, sino que se calculan previamente
  a intervalos regulares.
- The SkuSellerList parameter must be sent as an array.
- Inicie sesión en su cuenta de SC para acceder a la documentación.
- The API key never leaves your computer and is only used to sign the request.
- For APIs that need XML request body, like xxxxProduct APIs
- Each merchant has a limitation on the use of feeds with a maximum of 770 calls per
  day.
- To optimize feed usage, group your products into batches. It is recommended to send
  between 500 and 1,000 products per request.
- Each merchant has a limitation on the use of feeds. The first 50 calls can be made
  without restriction, after which calls must have an interval of at least 2 minutes.
- Continuous Improvement - important to have webhooks for instant notifications on
  changes.
- 'Important for International Model: For sellers operating under the international
  model, it is mandatory to include the local language name due to customs import
  regulations.'
- Always check the feed details to confirm whether the product was successfully created
  or if it has any warnings or rejections.
- For sellers operating under the international model, it is mandatory to include
  the local language name when creating products.
- To optimize feed usage, it is recommended to submit products in batches of up to
  500 products per request.
- This API works asynchronously. Receiving a 200 OK response only confirms the request
  was accepted, not that the products were successfully created.
- Only the last 30 days are considered (feeds not in the queue are deleted after 30
  days from the creation date).
- The body transmitted by the POST is an XML structure.
- Límite máximo del cuerpo de una solicitud POST es de 128MB.
- Todos los valores en JSON deben tratarse como strings.
- All requests to the server must be cryptographically signed.
- Parameters must be sorted alphabetically and URL encoded.
- Cada comercio tiene una limitación en el uso de feeds. Los primeros 50 llamados
  para estas 4 APIs se pueden realizar sin restricción.
- Lotes muy grandes pueden provocar que el tiempo de ejecución de tus requerimientos
  sea elevado, especialmente durante eventos.
- Requests can be in XML or JSON format, configured via input parameters.
- Every request must include Action, Timestamp, UserID, Version, and Signature.
- Es importante siempre contar con los webhook en tu integración, así que te podrás
  enterar de forma casi instantánea de diferentes cambios en tu producto y/o órdenes
- Cada comercio tiene una limitación en el uso de feeds. Los primeros 50 llamados
  para las APIs se pueden realizar sin restricción.
- Se sugiere trabajar en lotes de aproximadamente 500 registros para un mejor rendimiento.
- Se recomienda enviar entre 500 y 1.000 productos por solicitud.
- Recuerda que los productos con menos de 30 puntos serán rechazados automáticamente.
- Webhook notifications are important for real-time updates on product and order changes.
- Esta sección de la documentación solo aplica para vendedores internacionales que
  realizan modelo de venta cross border.
- Para los vendedores que operan bajo el modelo internacional, es obligatorio incluir
  en la creación de productos el nombre en el idioma local (NameEn = USA, NameCN =
  China) en complemento al nombre de publicación (Name), debido a razones aduaneras
  de importación de productos.
- Se recomienda enviar entre 500 y 1.000 productos por solicitud, dependiendo del
  tamaño y complejidad de los datos incluidos.
- 'Las siguientes acciones ya no están disponibles en la nueva API de Falabella: GetOrderComments,
  GetPayoutStatus, SetStatusToDelivered, SetStatusToShipped, GetShipmentProviders,
  GetStatistics.'
- Órdenes solo pueden ser canceladas en estado pending
- Se recomienda generar actualizaciones a esta tabla.
- API is asynchronous and generates a feed upon product creation.
- For international model sellers, including local name is mandatory.
- Para un uso eficiente de los feeds, agrupa tus productos en lotes. Se recomienda
  enviar entre 500 y 1.000 productos por solicitud, dependiendo del tamaño y complejidad
  de los datos incluidos.
- API is asynchronous and generates the creation of a Feed.
- It is mandatory to include the name in the local language for international model
  sellers.
- La API funciona de forma asíncrona. Aunque recibas una respuesta 200 OK, esto solo
  indica que la solicitud fue aceptada, no que los productos fueron creados con éxito.
- El número máximo de SKUs por respuesta es de 1000.
- Se recomienda el uso de limit y offset para recorrer todo el catálogo de productos.
- Sólo se consideran los últimos 30 días
- SC credentials must be obtained from the API tab in Integration Management.
- When sending the products to SC, they must have a minimum score for these to be
  published automatically.
- The price must be represented in decimal format (example 100.00, 50.00)
- Timestamp is mandatory and must be in ISO8601 format.
- We always recommend using the inner level category, since its attributes are more
  specific and avoid inconvenience in the integration process.
- Para un webhookId, elimina un webhook asociado al comercio
- Si se tiene más de un webhook creado con la misma URL, y desea eliminar esa URL,
  debe eliminar todos los webhook que esten relacionados a esta URL
- Some objects may return nulls in deeply nested fields
- Obtiene todos los eventos disponibles
- KAM will be your strategic ally for success!
- At any time you can easily consult the Seller Center documentation.
- 'Los formatos admitidos son los siguientes: jpg, png, gif.'
- El precio debe representarse en formato decimal (ejemplo 100,00, 50,00).
- SC credentials must be obtained from the integration management settings.
- Have a minimum size of 200x200 and a maximum of 2000x2000
- The supported formats are the following jpg, png, gif
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Recuerda que también puedes utilizar la sección de preguntas frecuentes, donde encontrarás
  información útil.
- Remember that you can also use the FAQ section where you will find useful information.
errors:
- 'E429:Too many requests: if you make more than 30 requests per 3 seconds.'
- E429:Too many requests
- 'E429:Too many requests: If you make more than 30 requests per 3 seconds.'
- '1000: Format Error Detected'
- 'E001: Parameter %s is mandatory'
- 'E002: Invalid Version'
- 'E003: Timestamp has expired'
- 'E004: Invalid Timestamp format'
- 'E005: Invalid Request Format'
- 'E006: Unexpected internal error'
- 'E007: Login failed. Signature mismatching'
- 'E008: Invalid Action'
- 'E009: Access Denied'
- 'E010: Insecure Channel'
- 'E011: Request too Big'
- 'E429: Too many requests'
- '1000: Internal Application Error'
- 'E030: Empty Request'
- '0: Field PrimaryCategory with value ''4'' has a problem: Primary category Id is
  invalid'
- '1: Field Brand with value ''ASM'' has a problem: This brand does not exist in our
  database. Please contact our support.'
- '2: Field TaxClass with value ''default'' has a problem: ''default'' is an invalid
  Tax Class'
- 'E001: Parameter Action is mandatory'
- 'E007: Login failed. Signature mismatch'
- '1000: Could not save product: %s'
- '8888: Feed rows exceeded, max size allowed is %d and you uploaded %d items.'
- '1000: Could not remove product: %s'
- 'E001: Parameter Timestamp is mandatory'
- 'E001: Parameter Version is mandatory'
- 'E001: Parameter Signature is mandatory'
- 'E064: No categories linked to provided attribute sets.'
- 'E013: Invalid Feed Status'
- 'E014: Invalid Offset'
- 'E015: Invalid PageSize'
- 'E046: Invalid CreationDate value'
- 'E047: Invalid UpdatedDate value'
- 'E012: Invalid Feed ID'
- 'E018: Either CreatedAfter or UpdatedAfter is mandatory'
- 'E074: Invalid sort direction.'
- 'E075: Invalid sort filter.'
- 'E016: Invalid Order ID'
- 'E037: One or more order id in the list are incorrect'
- 'E038: Too many orders were requested'
- 'E039: No orders were found'
- 'E056: Invalid OrdersIdList format. Must use array format [1,2]'
- 'E020: "%s" Invalid Order Item ID'
- 'E021: OMS Api Error Occurred'
- 'E023: "%s" Invalid Order Item IDs'
- 'E025: "%s" Invalid Shipping Provider'
- 'E026: "%s" Invalid Tracking Number'
- 'E029: Order items must be from the same order'
- 'E031: Tracking ID incorrect. Example tracking ID: "%s"'
- 'E073: All order items must have status Pending or Ready To Ship. (%s)'
- 'E063: The tracking code %s has already been used'
- 'E091: You are not allowed to set the shipment provider and tracking number and
  the delivery type is wrong. Please use send_to_warehouse'
- 'E119: Some order items are not yet ready to be processed, please try again later.
  (%s).'
- 'E121: Invalid Packing ID'
- 'E028: It is not possible to set the order to the status "%s"'
- 'E093: This api call "SetStatusToShipped" is currently not allowed.'
- 'E022: "%s" Invalid Reason'
- 'E093: This api call "SetStatusToFailedDelivery" is currently not allowed.'
- 'E093: This api call "SetStatusToDelivered" is currently not allowed.'
- 'E020: "%s" Invalid Order Item IDs'
- 'E032: Document type "%s" is not valid'
- 'E034: Order Item must be packed. Please call setStatusToReadyToShip before'
- 'E035: "%s" was not found'
- 'E101: All order items must have status Ready To Ship.'
- 'E102: Pickup Request was already sent for following order items: %s.'
- '4: E004: Invalid Timestamp format'
- '62: E062 No seller was found by e-mail %s'
- '1000: Could not update seller'
- '1000: Invalid Email'
- 'E001: Parameter NewEmail, OldEmail is mandatory'
- 'E300: The passed email "%s" for "%s" for is not valid.'
- 'E301: You are not allowed to change the email.'
- 'E302: The passed email "%s" is already in use.'
- '0: Invalid Manifest Type: %s'
- '0: Invalid Manifest Status: %s'
- '87: E087: Manifest feature is not enabled'
- '88: E088: Manifest was not found'
- 'E087: Manifest feature is not enabled'
- 'E088: Manifest was not found'
- 'E089: Required field ManifestCode is missing'
- 'E090: Manifest status can not set to shipped'
- '89: E089: Required field ManifestCode s is missing'
- '90: E090: Manifest status can not set to shipped'
- '5: Invalid Request Format'
- '6: Unexpected internal error (may mean feature is not configured or unknown error
  occurred)'
- '89: Required field is missing'
- '98: Invalid Webhook Callback Url, "Given url is invalid."'
- '99: Invalid Webhook Event Alias, "Events alias are not matching"'
- 'E089: Required field %s is missing'
- 'E097: Field %s has a wrong value'
- 'E100: Invalid Webhook ID'
- 'E1000: Format Error Detected'
- 'ErrorType: Sender'
- 'ErrorMessage: Could not save product'
- 'E001: Parameter %s is mandatory (El parámetro es obligatorio)'
- 'E002: Invalid Version (Versión inválida)'
- 'E003: Timestamp has expired (Timestamp expiró)'
- 'E004: Invalid Timestamp format (Formato de Timestamp inválido)'
- 'E005: Invalid Request Format (Formato de solicitud inválido)'
- 'E006: Unexpected internal error (Error interno inesperado)'
- 'E007: Login failed. Signature mismatching (falló inicio de sesión. No coincide
  la firma)'
- 'E008: Invalid Action (Acción inválida)'
- 'E009: Access Denied (Acceso denegado)'
- 'E010: Insecure Channel (Canal inseguro)'
- 'E011: Request too Big (Solicitud demasiado grande)'
- 'E429: Too many requests (Demasiadas solicitudes)'
- Internal Application Error (Error interno de la aplicación)
- 'E030: Empty Request (Solicitud vacía)'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Check API key or authentication setup'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'E017: "%s" Invalid Date Format (Formato de fecha inválido)'
- 'E019: "%s" Invalid Limit (Limite inválido)'
- 'E014: "%s" Invalid Offset (Offset inválido)'
- 'E036: Invalid status filter (Filtro de estado inválido)'
- 'E070: You have corrupt data in your sku seller list (Tiene datos corruptos en su
  lista de vendedores de sku)'
- '1000: Could not save product: %s (No se pudo guardar el producto)'
- '1000: Format Error Detected (Error de formato detectado)'
- '1000: Could not remove product: %s (No se pudo eliminar el producto)'
- 'ErrorCode: 1000 - Format Error Detected'
- 'ErrorCode: 1000 - Could not save product: 0, A exact match of the document is being
  processed'
- 'E007: Login failed'
- '57: E057: No attribute sets linked to that category (No hay conjuntos de atributos
  vinculados a esa categoría).'
- 'E013: Invalid Feed Status (Estado de feed no válido)'
- 'E014: Invalid Offset (Offset no válido)'
- 'E015: Invalid PageSize (PageSize no válido)'
- 'E046: Invalid CreationDate value (Valor de CreationDate no válido)'
- 'E047: Invalid UpdatedDate value (Valor de UpdatedDate no válido)'
- 'E012: Invalid Feed ID (ID de feed no válido)'
- '53: E053: Invalid FeedIdList format. Must use array format [1,2]'
- '54: E054: Invalid FeedIdList format. Must be array of FeedIds'
- '1000: No se encontraron feeds'
- '12: E012: Invalid Feed ID (ID de feed no válido)'
- 'E014: "%s" Invalid Offset (Compensación inválida)'
- 'E017: "%s" Invalid Date Format (Formato de fecha no válido)'
- 'E019: "%s" Invalid Limit (Límite inválido)'
- 'E074: Invalid sort direction. (Dirección de ordenación no válida)'
- 'E075: Invalid sort filter. (Filtro de ordenación no válido)'
- 'E016: "%s" Invalid Order ID'
- 'E016: "%s" Invalid Order ID (ID de pedido inválido)'
- '16: E016: "%s" Invalid Order ID (ID de pedido inválido)'
- 'E037: One or more order id in the list are incorrect (Uno o varios identificadores
  de pedido de la lista son incorrectos)'
- 'E038: Too many orders were requested (Se solicitaron demasiados pedidos)'
- 'E039: No orders were found (No se han encontrado pedidos)'
- 'E056: Invalid OrdersIdList format. Must use array format [1,2] (Formato inválido
  de OrdersIdList. Debe utilizar el formato de matriz [1,2])'
- 'E020: "%s" Invalid Order Item ID (ID de artículo de pedido inválido)'
- 'E021: E021: OMS Api Error Occurred (Se ha producido un error en la API)'
- 'E022: "%s" Invalid Reason (Razón inválida)'
- 'E028: E028: It is not possible to set the order to the status "%s" (No es posible
  poner la orden en el estado "%s")'
- 'E021: OMS Api Error Occurred (Se ha producido un error en la API)'
- 'E023: "%s" Invalid Order Item IDs (ID de artículo de pedido no válidos)'
- 'E024: "%s" Invalid Delivery Type (Tipo de entrega inválido)'
- 'E025: "%s" Invalid Shipping Provider (Proveedor de envíos inválido)'
- 'E029: Order items must be from the same order (Los artículos del pedido deben ser
  del mismo pedido)'
- 'E073: All order items must have status Pending or Ready To Ship. (Todos los artículos
  del pedido deben tener el estado Pendiente o Listo para enviar)'
- 'E091: You are not allowed to set the shipment provider and tracking number and
  the delivery type is wrong. Please use send_to_warehouse (No puede establecer el
  proveedor de envíos y el número de seguimiento y el tipo de entrega es incorrecto.
  Por favor, utilice send_to_warehouse)'
- 'E094: Serial numbers specified incorrectly (Números de serie especificados incorrectamente)'
- 'E095: Invalid serial number format (Formato de número de serie no válido)'
- 'E096: Duplicate serial number among order items (Número de serie duplicado entre
  los artículos del pedido)'
- 'E119: Some order items are not yet ready to be processed, please try again later.
  (Algunos artículos del pedido aún no están listos para ser procesados, por favor
  inténtelo más tarde)'
- 'E024: "%s" Invalid Delivery Type'
- 'E094: Serial numbers specified incorrectly'
- 'E095: Invalid serial number format (%s)'
- 'E096: Duplicate serial number among order items (%s)'
- 'E053: Invalid FeedIdList format. Must use array format [1,2]'
- 'E054: Invalid FeedIdList format. Must be array of FeedIds'
- No se encontraron feeds
- 'E021: OMS Api Error Occurred (Se ha producido un error en la API de OMS)'
- 'E028: It is not possible to set the order to the status "%s" (No es posible poner
  la orden en el estado "%s")'
- 'E093: This api call "SetStatusToShipped" is currently not allowed. (Esta llamada
  api "SetStatusToShipped" no está actualmente permitida)'
- 'E093: This api call "SetStatusToFailedDelivery" is currently not allowed. (Esta
  llamada api "SetStatusToFailedDelivery" no está actualmente permitida)'
- 'E093: This api call "SetStatusToDelivered" is currently not allowed. (Esta llamada
  api "SetStatusToDelivered" no está actualmente permitida)'
- 'E020: "%s" Invalid Order Item IDs (ID de artículo de pedido no válidos)'
- 'E032: E032: Document type "%s" is not valid (El tipo de documento "%s" no es válido)'
- 'E034: E034: Order Item must be packed. Please call setStatusToReadyToShip before
  (El artículo del pedido debe estar embalado. Por favor, llame a setStatusToReadyToShip)'
- 'E035: E035: "%s" was not found ( "%s" no fue encontrado)'
- 'E101: All order items must have status Ready To Ship. (Todos los artículos del
  pedido deben tener el estado Listo para enviar)'
- 'E102: Pickup Request was already sent for following order items: %s. (La solicitud
  de recogida ya fue enviada para los siguientes artículos del pedido: %s)'
- 'E004: Invalid Timestamp format (Formato inválido de la marca de tiempo)'
- E062 No seller was found by e-mail %s (No se ha encontrado ningún vendedor por correo
  electrónico %s)
- '1000: Could not update seller (No se ha podido actualizar el vendedor)'
- '1000: Invalid Email (Correo electrónico inválido)'
- 'E001: Parameter NewEmail, OldEmail is mandatory (Los parámetros NewEmail, OldEmail
  son obligatorios)'
- 'E300: The passed email "%s" for "%s" for is not valid. (El correo electrónico pasado
  "%s" para "%s" para no es válido)'
- 'E301: You are not allowed to change the email. (No está permitido cambiar el correo
  electrónico)'
- 'E302: The passed email "%s" is already in use. (El correo electrónico pasado "%s"
  ya está en uso)'
- '0: Invalid manifest type: %s'
- '0: Invalid manifest status: %s'
- '87: E087: Manifest feature is not enabled (La función de manifiesto no está activada)'
- '88: E088: Manifest was not found (No se ha encontrado el manifiesto)'
- '400: Sending a string instead of an array for SkuSellerList will cause an error.'
- '6: Unexpected internal error'
- '98: Invalid Webhook Callback Url, ''Given url is invalid'''
- '99: Invalid Webhook Event Alias, ''Events alias are not matching'''
- 'E089: Required %s field is missing (Falta el campo obligatorio)'
- 'E097: Field %s has a wrong value (El campo %s tiene un valor incorrecto)'
- 'E100: Invalid Webhook ID (ID de Webhook inválido)'
- 'E1000: Format Error Detected (Error de formato detectado)'
- '0: Tipo de manifiesto inválido: %s'
- '0: Estado del manifiesto inválido: %s'
- '400: Bad Request'
- 'E001: Parameter %s is mandatory (The parameter is mandatory)'
- 'E002: Invalid Version (Invalid version)'
- 'E003: Timestamp has expired (Timestamp has expired)'
- 'E004: Invalid Timestamp format (Invalid timestamp format)'
- 'E005: Invalid Request Format (Invalid request format)'
- 'E006: Unexpected internal error (Unexpected internal error)'
- 'E007: Login failed. Signature mismatching (Login failed. Signature does not match)'
- 'E008: Invalid Action (Invalid action)'
- 'E009: Access Denied (Access denied)'
- 'E010: Insecure Channel (Insecure channel)'
- 'E011: Request too Big (Request too large)'
- 'E429: Too many requests (Too many requests)'
- '1000: Internal Application Error (Internal application error)'
- 'E030: Empty Request (Empty request)'
- '401 Unauthorized: Check API key or UserID.'
- '98: Invalid Webhook Callback Url'
- '99: Invalid Webhook Event Alias'
- 'E089: Required %s field is missing'
- '429: Too many attempts to create feeds.'
- 'StatusCode 429: Too many attempts to create feeds.'
- 'E057: No attribute sets linked to that category (No hay conjuntos de atributos
  vinculados a esa categoría).'
- 'E018: No Rule is set for Given CategoryId : XXXX'
- '1000: Could not save product: %s (Could not save the product)'
- '8888: Feed rows exceeded, max size allowed is %d and you uploaded %d items. Please
  next time try to upload less items'
- 'E017: "%s" Invalid Date Format (Invalid date format)'
- 'E019: "%s" Invalid Limit (Invalid limit)'
- 'E014: "%s" Invalid Offset (Invalid offset)'
- 'E036: Invalid status filter (Invalid status filter)'
- 'E070: You have corrupt data in your sku seller list (You have corrupt data in your
  sku seller list)'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '8888: Feed rows exceeded, max size allowed is %d and you uploaded %d items. Please
  next time try to upload less items (Feed row limit exceeded. Please try to upload
  fewer items next time)'
- 'E012: Invalid Feed ID (Invalid feed ID)'
- '12: E012: Invalid Feed ID (Invalid Feed ID)'
- 'E054: Invalid FeedIdList format. Must be an array of FeedIds'
- '1000: No feeds were found'
- 'E016: "%s" Invalid Order ID (Invalid order ID)'
- 'E014: "%s" Invalid Offset'
- 'E017: "%s" Invalid Date Format'
- 'E019: "%s" Invalid Limit'
- 'E036: Invalid status filter'
- 'E012: Invalid Feed ID (Invalid Feed ID)'
- No feeds were found
- 'E016: "Invalid Order ID"'
- 'E020: "%s" Invalid Order Item ID (Invalid order item ID)'
- 'E021: OMS Api Error Occurred (An error occurred in the API)'
- 'E023: "%s" Invalid Order Item IDs (Invalid order item IDs)'
- 'E024: "%s" Invalid Delivery Type (Invalid delivery type)'
- 'E025: "%s" Invalid Shipping Provider (Invalid shipping provider)'
- 'E029: Order items must be from the same order (Order items must be from the same
  order)'
- 'E073: All order items must have status Pending or Ready To Ship. (All order items
  must have the status Pending or Ready To Ship)'
- 'E091: You are not allowed to set the shipment provider and tracking number and
  the delivery type is wrong. Please use send_to_warehouse (You cannot set the shipping
  provider and tracking number when the delivery type is incorrect. Please use send_to_warehouse)'
- 'E094: Serial numbers specified incorrectly (Serial numbers specified incorrectly)'
- 'E095: Invalid serial number format (Invalid serial number format)'
- 'E096: Duplicate serial number among order items (Duplicate serial number among
  order items)'
- 'E119: Some order items are not yet ready to be processed, please try again later.
  (Some order items are not yet ready to be processed, please try again later.)'
- 'E020: "%s" Invalid Order Item IDs (Invalid order item IDs)'
- 'E021: E021: OMS Api Error Occurred (An error occurred in the API)'
- 'E032: Document type "%s" is not valid (The document type "%s" is not valid)'
- 'E034: Order Item must be packed. Please call setStatusToReadyToShip before (The
  order item must be packed. Please call setStatusToReadyToShip)'
- 'E035: "%s" was not found ("%s" was not found)'
- 'E084: Digital order items are not allowed!'
- The action cannot be proceeded because the order number you provided contains multiple
  packages; please provide order item ids from one package.
- Shipment Provider not found.
- 'E118: Crossdocking order items are not allowed to be set to shipped status'
- 'E004: Invoice with invoice number %s already exists'
- 'E004: Max limit reached. Total number of invoice documents should be less than
  or equal to total items in an order'
- 'E004: Invalid seller order item status for document %s'
- 'E004: Order contains FBF items. PDF upload only supports FBS orders.'
- 'E004: Invoice date must be less than or equal to current date'
- 'E004: OrderItem(s) not found %s'
- 'E1000: Internal Application Error'
- '98: Invalid Webhook Callback Url, "Given url is invalid"'
- '429: too many attempts to create feeds'
- '401 Unauthorized: Check API key and user ID.'
- '429: StatusCode too many attempts to create feeds'
- '1000: E1000: Input Name Is Missing/Invalid'
- 'InvalidRequest: Review request format and required fields'
- 'ProductCreationFailed: Check feed details for errors or rejections'
- 'E1000: Input Name Is Missing/Invalid'
- '8888: Feed rows exceeded, max size allowed is %d and you uploaded %d items. Please
  next time try to upload less items (Se superó el tamaño máximo de filas de Feeds.
  Tratar de subir menos elementos la próxima vez)'
- '1000:00: Internal application error: Corregir estructura del payload.'
- '1000:02:Format Error Detected: The limit of SellerSkus is 500: Crear o actualizar
  igual o menos de 500 SKU'
- '1000:03:Format Error Detected: Facility in Stock (?): Generar ticket a soporte'
- '1000:04:Format Error Detected: SellerSku in Node (?): Consultar por SKU que este
  asociado a las bodegas o validar que se está escribiendo correctamente el SKU'
- '1000:05:Format Error Detected: Quantity in Node (?): Agregar valor de stock en
  request'
- 'E020: Invalid Order Item ID'
- 'E022: Invalid Reason'
- 'E028: It is not possible to set the order to the status'
- 'E020: Invalid Order Item ID (ID de artículo de pedido inválido)'
- 'E023: Invalid Order Item IDs (ID de artículo de pedido no válidos)'
- 'E024: Invalid Delivery Type (Tipo de entrega inválido)'
- 'E025: Invalid Shipping Provider (Proveedor de envíos inválido)'
- 'E020: Invalid Order Item IDs'
- 'E032: Document type is not valid'
- 'E035: was not found'
- The action cannot be proceeded because the order number you provided contains multiple
  packages, please provide order item ids from one package.
- 'E020: "Invalid Order Item ID (ID de artículo de pedido inválido)"'
- 'E021: "OMS Api Error Occurred (Se ha producido un error en la API)"'
- 'E023: "Invalid Order Item IDs (ID de artículo de pedido no válidos)"'
- 'E024: "Invalid Delivery Type (Tipo de entrega inválido)"'
- 'E025: "Invalid Shipping Provider (Proveedor de envíos inválido)"'
- 'E029: "Order items must be from the same order (Los artículos del pedido deben
  ser del mismo pedido)"'
- 'E073: "All order items must have status Pending or Ready To Ship. (Todos los artículos
  del pedido deben tener el estado Pendiente o Listo para enviar)"'
- 'E091: "You are not allowed to set the shipment provider and tracking number and
  the delivery type is wrong. Please use send_to_warehouse (No puede establecer el
  proveedor de envíos y el número de seguimiento y el tipo de entrega es incorrecto.
  Por favor, utilice send_to_warehouse)"'
- 'E094: "Serial numbers specified incorrectly (Números de serie especificados incorrectamente)"'
- 'E095: "Invalid serial number format (Formato de número de serie no válido)"'
- 'E096: "Duplicate serial number among order items (Número de serie duplicado entre
  los artículos del pedido)"'
- 'E119: "Some order items are not yet ready to be processed, please try again later.
  (Algunos artículos del pedido aún no están listos para ser procesados, por favor
  inténtelo más tarde)"'
- 'E119: Some order items are not yet ready to be processed, please try again later.
  (%s)'
- 'E034: Order Item must be packed'
- 'E001: La marca de tiempo del parámetro es obligatoria'
- 'E001: Parameter Action is mandatory.'
- 'E001: Parameter Version is mandatory.'
- 'E001: Parameter Signature is mandatory.'
- 'E003: Timestamp has expired.'
auth_info:
  mentioned_objects:
  - UserId
  - ApiKey
client:
  base_url: https://sellercenter-api.linio.com.mx
  headers:
    User-Agent: Linio_SellerId/Programming_language/programming_language_version
source_metadata: null
