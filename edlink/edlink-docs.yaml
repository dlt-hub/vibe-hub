resources:
- name: List Integrations
  endpoint:
    path: /docs/api/v2.0/integrations/meta-list-integrations
    method: GET
- name: Get Integration
  endpoint:
    path: /docs/api/v2.0/integrations/meta-get-integration
    method: GET
- name: List Jobs
  endpoint:
    path: /docs/api/v2.0/jobs/graph-list-jobs
    method: GET
- name: Get Job
  endpoint:
    path: /docs/api/v2.0/jobs/graph-get-job
    method: GET
- name: List Licenses
  endpoint:
    path: /docs/api/v2.0/licenses/graph-list-licenses
    method: GET
- name: List Materializations
  endpoint:
    path: /docs/api/v2.0/materializations/graph-list-materializations
    method: GET
- name: List Requests
  endpoint:
    path: /docs/api/v2.0/requests/graph-list-requests
    method: GET
- name: List Tasks
  endpoint:
    path: /docs/api/v2.0/tasks/graph-list-tasks
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: incident_updates
  endpoint:
    path: /api/v1/incidents
    method: GET
    data_selector: incidents
- name: system_status
  endpoint:
    path: /api/v1/status
    method: GET
    data_selector: status
- name: incident_updates
  endpoint:
    path: /incidents
    method: GET
    data_selector: incidents
- name: system_status
  endpoint:
    path: /status
    method: GET
    data_selector: systems
- name: students
  endpoint:
    path: /api/v2.0/students
    method: GET
    data_selector: data
    params: {}
- name: attendance
  endpoint:
    path: /api/v2.0/attendance
    method: GET
    data_selector: data
    params: {}
- name: demographics
  endpoint:
    path: /api/v2.0/people/demographics
    method: GET
    data_selector: records
- name: attendance
  endpoint:
    path: /api/v2.0/attendance
    method: GET
    data_selector: records
- name: incidents
  endpoint:
    path: /api/v2.0/incidents
    method: GET
    data_selector: records
- name: assets
  endpoint:
    path: /api/v2.0/assets
    method: GET
    data_selector: records
- name: assignment
  endpoint:
    path: /docs/api/v2.0/assignments/user-create-assignment
    method: POST
    data_selector: assignment
    params: {}
- name: submission
  endpoint:
    path: /docs/api/v2.0/submissions/user-grade-submission
    method: POST
    data_selector: submission
    params: {}
- name: files
  endpoint:
    path: /api/files
    method: GET
    data_selector: records
    params: {}
- name: rubrics
  endpoint:
    path: /api/rubrics
    method: GET
    data_selector: records
    params: {}
- name: embedded_onboarding
  endpoint:
    path: /api/onboarding
    method: POST
    data_selector: data
- name: lms_files
  endpoint:
    path: /api/lms/files
    method: GET
    data_selector: files
- name: rubrics
  endpoint:
    path: /api/rubrics
    method: GET
    data_selector: rubric_data
- name: infinite_campus
  endpoint:
    path: /api/infinite-campus
    method: GET
    data_selector: extended_data
- name: troubleshooting_tools
  endpoint:
    path: /api/troubleshooting
    method: GET
    data_selector: tools
- name: google_classroom_addons
  endpoint:
    path: /api/google-classroom/addons
    method: POST
    data_selector: addons
- name: ai_chatbot
  endpoint:
    path: /api/ai/chatbot
    method: GET
    data_selector: chatbot_data
- name: permissions_sharing
  endpoint:
    path: /api/permissions
    method: GET
    data_selector: permissions_data
- name: data_validation_reports
  endpoint:
    path: /api/validation/reports
    method: GET
    data_selector: validation_reports
- name: new_integrations
  endpoint:
    path: /api/integrations
    method: GET
    data_selector: integrations_list
- name: developer_cookbooks
  endpoint:
    path: /api/cookbooks
    method: GET
    data_selector: cookbook_data
- name: ai_transformation_tools
  endpoint:
    path: /api/ai/transformation
    method: POST
    data_selector: transformation_results
- name: csv_parsing
  endpoint:
    path: /api/csv/parsing
    method: POST
    data_selector: parsed_data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: course
  endpoint:
    path: /api/v1/courses
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: course
  endpoint:
    path: /api/v1/courses
    method: GET
    data_selector: records
- name: assignment
  endpoint:
    path: /api/v1/assignments
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: courses
  endpoint:
    path: /api/v1/courses
    method: GET
    data_selector: courses
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: courses
  endpoint:
    path: /v1/courses
    method: GET
    data_selector: courses
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: course
  endpoint:
    path: /api/v1/courses
    method: GET
    data_selector: data
- name: assignment
  endpoint:
    path: /api/v1/assignments
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: assignment
  endpoint:
    path: /docs/api/v2.0/assignments/user-create-assignment
    method: POST
- name: submission
  endpoint:
    path: /docs/api/v2.0/submissions/user-grade-submission
    method: POST
- name: assignment
  endpoint:
    path: /docs/api/v2.0/assignments/overview
    method: POST
    data_selector: assignment
- name: providers
  endpoint:
    path: /api/v1/providers
- name: assignment
  endpoint:
    path: /docs/api/v2.0/assignments/overview
    method: POST
    data_selector: assignments
notes:
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Edlink's onboarding flow is simple, taking less than 5 minutes for most setups.
- Edlink is a technology company first. Our product is our API and we have put a lot
  of effort into designing it to be clear and easy to implement.
- Some objects like Contact may return nulls in deeply nested fields
- All systems operational with 100% uptime over the past 90 days
- Out of the box support for LTI, Clever, and Classlink.
- Edlink can handle complex SSO requirements from districts.
- OAuth2 authentication required for access.
- Data may vary based on the permissions set for the authenticated user.
- Requires setup of connected app in Edlink
- Eliminate copy and pasting. Sync coursework and grades directly to the LMS or SIS.
- Some objects may return nulls in deeply nested fields
- Deliver better student experiences and save teachers tons of manual effort by syncing
  coursework and grades directly to the LMS or SIS.
- Data is encrypted both at rest and in transit using advanced standards like AES-256.
- Meets SOC 2 standards and international regulations.
- Links for partners to get more information on how we can work better together.
- Edlink API requires OAuth2 authentication
- We consider Student Data to be confidential and do not use such data for any purpose
  other than to provide the services on the School's behalf.
- We do not rent or sell information for marketing purposes and we will never share
  or sell Student Data with third parties for marketing purposes.
- Edlink extracts data from a school's data platform on a regular basis. By default
  updates occur multiple times per day, although the schedule can be tailored to the
  schools requirements.
- Edlink only shares personal information in a few limited circumstances.
- Schools are responsible for determining whether data is ever shared with applications
  through Edlink.
- Edlink retains data backups for 7 days, and retains audit logs for up to 30 days.
- Schools can revoke access to a third-party with immediate effect.
- Uses OAuth2 with refresh token â€” requires setup of connected app in Edlink
- API endpoints for accessing LMS files are new and under development.
- Rubrics support will be added before the back-to-school season.
- Uses OAuth 2.0
- Edlink connects your product to trusted authentication providers like Google, Microsoft,
  Clever, and ClassLink.
- API supports OAuth2 authentication.
- Requires setup of connected app in Schoology
- Some objects may return nulls in certain fields
- Some endpoints may require additional permissions.
- Rate limits apply to API usage.
- Uses OAuth2 with refresh token â€” requires setup of application in Schoology
- Some endpoints may return paginated data
- Developers integrating with Infinite Campus must understand OneRoster 1.1, 1.2,
  OAuth 1.0, OAuth 2.0, and JSON.
- Scaling integrations across institutions means understanding multiple OneRoster
  versions.
- The user will have to signed in via Edlink at least once before.
- Most developers will have to work within the constraints of OneRoster - the only
  integration option that doesnâ€™t require a commitment.
- Scaling integrations requires adapting to different versions and requirements.
- The widget uses a cookie that is set during the SSO process.
- Always implement proper error handling in the onError callback or via events to
  provide feedback to users when something goes wrong.
- Call destroy() when the onboarding component is no longer needed to prevent memory
  leaks.
- The Authentication plugin supports any SSO provider in Edlink.
- The Assignment Builder plugin will only work with systems that Edlink can create/modify
  assignments in.
- Schools may use the Services to authorize you and other third-party Developers to
  securely access Student Data.
- Edlink abstracts complexities and inconsistencies inherent in different educational
  platforms.
- Not all SIS platforms support grade passback, and not all LMS platforms expose detailed
  attendance data.
- You may designate one or more third-party Developers to securely access or modify
  Student Data via our API.
- SOC 2 compliant
- Aligns with GDPR and FERPA
- Edlink is SOC-2 compliant, which means we follow strict controls to keep your data
  secure, available, and confidential.
- We use AES-256 encryptionâ€”the gold standardâ€”for all data, whether it's at rest or
  in transit.
- Ensure your application layout accommodates the onboarding modal appropriately.
- Consider pre-filling the email field when the user's information is already known
  to reduce friction.
- Only specify a provider parameter when you want to skip the provider selection screen
  and direct users to a specific integration.
- Use the theme option to match the onboarding flow to your brand colors for a consistent
  user experience.
- You authorize us to access Student Data and will provide a way for us to access
  the information stored in your SIS, LMS, or other Data Source.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: The requested resource does not exist.'
- '500 Internal Server Error: Contact support for assistance.'
- '401 Unauthorized: Check your access token and permissions.'
- 'INVALID_REQUEST: Check the request parameters.'
- 'UNAUTHORIZED: Verify the OAuth token.'
- 'FORBIDDEN: You do not have permission to access this resource.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Recheck OAuth token'
- '404 Not Found: Verify endpoint path'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuthToken
client:
  base_url: https://ed.link
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.ed.link/oauth2/token
    client_id: '{{ dlt.secrets[''edlink_client_id''] }}'
    client_secret: '{{ dlt.secrets[''edlink_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''edlink_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
