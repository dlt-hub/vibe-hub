resources:
- name: feedback
  endpoint:
    path: /feedback
    method: POST
- name: train
  endpoint:
    path: /train/<model name>
    method: POST
- name: ranking
  endpoint:
    path: /rank/<model name>
    method: POST
- name: recommendations
  endpoint:
    path: /recommend/<model-name>
    method: POST
- name: inference_encoder
  endpoint:
    path: /inference/encoder/<name>
    method: POST
- name: inference_cross
  endpoint:
    path: /inference/cross/<name>
    method: POST
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: events
- name: train
  endpoint:
    path: /train/<model name>
    method: POST
    data_selector: none
- name: ranking
  endpoint:
    path: /rank/<model name>
    method: POST
    data_selector: items
- name: recommend
  endpoint:
    path: /recommend/<model-name>
    method: POST
    data_selector: items
- name: inference_encoder
  endpoint:
    path: /inference/encoder/<name>
    method: POST
    data_selector: embeddings
- name: inference_cross
  endpoint:
    path: /inference/cross/<name>
    method: POST
    data_selector: scores
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
- name: rank
  endpoint:
    path: /rank/xgboost
    method: POST
    data_selector: items
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: items
- name: ranking
  endpoint:
    path: /rank/xgboost
    method: POST
- name: feedback
  endpoint:
    path: /feedback
    method: POST
- name: rank
  endpoint:
    path: /rank/xgboost
    method: POST
    data_selector: items
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: items
- name: rank
  endpoint:
    path: /rank/xgboost
    method: POST
    data_selector: items
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: items
- name: ranking
  endpoint:
    path: /rank/xgboost
    method: POST
    data_selector: items
    params: {}
- name: ranking
  endpoint:
    path: /rank/xgboost
    method: POST
    data_selector: items
- name: inference
  endpoint:
    path: /inference/cross/msmarco
    method: POST
    data_selector: scores
- name: inference
  endpoint:
    path: /inference/cross/msmarco
    method: POST
    data_selector: scores
- name: interaction_event
  endpoint:
    path: /event/interaction
    method: POST
    data_selector: event
- name: item_metadata_event
  endpoint:
    path: /event/item_metadata
    method: POST
    data_selector: event
- name: user_metadata_event
  endpoint:
    path: /event/user_metadata
    method: POST
    data_selector: event
- name: ranking_event
  endpoint:
    path: /event/ranking
    method: POST
    data_selector: event
- name: interaction_event
  endpoint:
    path: /event/interaction
    method: POST
    data_selector: event
    params: {}
- name: item_metadata_event
  endpoint:
    path: /event/item_metadata
    method: POST
    data_selector: event
    params: {}
- name: user_metadata_event
  endpoint:
    path: /event/user_metadata
    method: POST
    data_selector: event
    params: {}
- name: ranking_event
  endpoint:
    path: /event/ranking
    method: POST
    data_selector: event
    params: {}
- name: import
  endpoint:
    path: /import
    method: POST
- name: train
  endpoint:
    path: /train
    method: POST
- name: serve
  endpoint:
    path: /serve
    method: POST
- name: standalone
  endpoint:
    path: /standalone
    method: POST
- name: validate
  endpoint:
    path: /validate
    method: POST
- name: sort
  endpoint:
    path: /sort
    method: POST
- name: autofeature
  endpoint:
    path: /autofeature
    method: POST
- name: export
  endpoint:
    path: /export
    method: POST
- name: termfreq
  endpoint:
    path: /termfreq
    method: POST
- name: term_freq
  endpoint:
    path: /termfreq
    method: POST
    data_selector: terms
    params:
      fields: title,description
      language: en
- name: term_freq
  endpoint:
    path: /termfreq
    method: GET
    data_selector: terms
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: records
- name: feature_extractors
  endpoint:
    path: /reference/overview/feature-extractors
    method: GET
    data_selector: feature_extractors
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: events
    params: {}
- name: models
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: docker_image
  endpoint:
    path: /data
    method: GET
    data_selector: resources
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: event
    params: {}
- name: data
  endpoint:
    path: /data
    method: POST
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: null
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: records
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
- name: item_metadata
  endpoint:
    path: /ai.metarank/item/1-0-0
    method: POST
    data_selector: payload
- name: user_metadata
  endpoint:
    path: /ai.metarank/user/1-0-0
    method: POST
    data_selector: payload
- name: ranking_event
  endpoint:
    path: /ai.metarank/ranking/1-0-0
    method: POST
    data_selector: payload
- name: interaction_event
  endpoint:
    path: /ai.metarank/interaction/1-0-0
    method: POST
    data_selector: payload
- name: item_metadata
  endpoint:
    path: /reference/event-schema#item-metadata-event
    method: GET
    data_selector: records
- name: user_metadata
  endpoint:
    path: /reference/event-schema#user-metadata-event
    method: GET
    data_selector: records
- name: ranking
  endpoint:
    path: /reference/event-schema#ranking-event
    method: GET
    data_selector: records
- name: interaction
  endpoint:
    path: /reference/event-schema#interaction-event
    method: GET
    data_selector: records
- name: item_metadata
  endpoint:
    path: /events/item
    method: POST
    data_selector: event
    params: {}
- name: user_metadata
  endpoint:
    path: /events/user
    method: POST
    data_selector: event
    params: {}
- name: ranking
  endpoint:
    path: /events/ranking
    method: POST
    data_selector: event
    params: {}
- name: interaction
  endpoint:
    path: /events/interaction
    method: POST
    data_selector: event
    params: {}
- name: bootstrap
  endpoint:
    path: bootstrap
    method: GET
    data_selector: source
    params:
      type: file
      offset: earliest
      format: snowplow:tsv
- name: item_metadata
  endpoint:
    path: /reference/event-schema/item
    method: GET
    data_selector: event
    params: {}
- name: user_metadata
  endpoint:
    path: /reference/event-schema/user
    method: GET
    data_selector: event
    params: {}
- name: ranking_event
  endpoint:
    path: /reference/event-schema/ranking
    method: GET
    data_selector: event
    params: {}
- name: interaction_event
  endpoint:
    path: /reference/event-schema/interaction
    method: GET
    data_selector: event
    params: {}
- name: bootstrap
  endpoint:
    path: s3://acme-snowplow-output/enriched/
    method: GET
    data_selector: events
    params:
      offset: earliest
      format: snowplow:tsv
- name: ranking
  endpoint:
    path: /rank/xgboost
    method: POST
    data_selector: items
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: null
- name: ranking
  endpoint:
    path: /rank/xgboost
    method: POST
    data_selector: items
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: items
- name: ranking
  endpoint:
    path: /rank/xgboost
    method: POST
    data_selector: items
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: items
notes:
- 'Re-ranking latency: 10-30 ms'
- 'Redis memory usage: 1-10 GiB'
- 'Data import throughput: 1000-3000 events/second'
- 'Metarank is a secondary re-ranker: it''s an extra non-free step in your retrieval
  process.'
- Response latency depends on request size.
- Metarank only tracks aggregated data required for the re-ranking and does not store
  raw events.
- Metarank docker images are published on DockerHub as metarank/metarank
- official Metarank images are multi-arch and support both amd64 and arm64/v8
- latest tag may point to pre-release versions, use an exact pinned version for stability
- On Mac M1 you can use x86_64 docker images, or try running the JAR file directly
- Metarank CLI has a set of command-line options to control its behavior.
- All ML feature extractors in Metarank have a scope option in their configuration.
- Requires setup of connected app in API
- Anonymous usage reporting is helpful and should be enabled.
- A shuffle model is used as a baseline model in a/b tests as a worst-case ranking
  scenario.
- maxPositionChange controls the amount of randomness that shuffle can introduce in
  the original ranking.
- Feature values are stored not as atomic values but as a time-based changelog.
- LambdaMART is a Learn-to-Rank model, optimizing the NDCG metric.
- A shuffle is a baseline model, which may be used in the a/b tests as a 'worst-case'
  ranking scenario, when the order of items is random. The shuffle model is configured
  with maxPositionChange parameter.
- Standalone mode is useful for testing Metarank without deployment.
- Feedback ingestion and inference throughput are limited by a single node.
- AWS Kinesis has a hard limit on max retention time of 7 days.
- 'Official docker images are multi-arch, and cross-built for the following platforms:
  linux/amd64, linux/arm64/v8.'
- In-memory persistence has zero service dependencies.
- Metarank requires Helm to install the chart.
- Redis is required as an almost-persistent data store for inference.
- Official docker images are multi-arch, and cross-built for linux/amd64 and linux/arm64/v8.
- Metarank docker container uses 1Gb of JVM heap by default.
- Metarank uses the following entrypoint for the docker container
- env variable JAVA_OPTS can be used to pass custom JVM flags, like path to a custom
  logger configuration.
- Metarank requires deployment in a Kubernetes cluster.
- Event import can be done via HTTP POST to /feedback endpoint.
- Uses environment variable JAVA_OPTS to pass custom JVM flags
- Metarank schemas are available on a public Iglu server.
- Metarank can be integrated into existing Snowplow Analytics setup.
- Snowplow enrich emits processed records in TSV format.
- Metarank requires integration with Snowplow for event tracking.
- Supports AWS Kinesis and Kafka for event delivery.
- Historical events can only be loaded from S3 Loader.
- For production setup, it is recommended to use Redis persistence as it operates
  separately from running Metarank instances.
- Standalone mode cannot be used for production deployment.
- For production deployment, only use the 'serve' mode.
- Metarank provides several Persistence options, however for production setup we recommend
  using only Redis persistence as it operates separately from running Metarank instances.
- Metarank does not provide clustering capabilities out of the box, so you will need
  to use an external load balancer when deploying multiple API instances.
- Kinesis source can be used as an event source, but has max 7 day data retention.
- 'Kinesis source: on par with Kafka and Pulsar'
- Uses standalone mode that combines training and running the API into one command
- The demo itself and the data used are open-source
- official Metarank images are multi-arch and support both amd64 and arm64/v8 (so
  will natively work on Mac M1/M2 without emulation)
errors: []
auth_info:
  mentioned_objects: []
client:
  base_url: http://localhost:8080
source_metadata: null
