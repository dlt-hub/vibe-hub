resources:
- name: workbook
  endpoint:
    path: /v2/workbooks
    method: GET
    data_selector: records
    params: {}
- name: export
  endpoint:
    path: /v2/workbooks/{workbookId}/export
    method: POST
    data_selector: exportDetails
    params: {}
- name: workbooks
  endpoint:
    path: /v2/workbooks/{workbookId}/swapSources
    method: POST
    data_selector: records
- name: export_workbook
  endpoint:
    path: /v2/workbooks/{workbookId}/export
    method: POST
    data_selector: records
- name: add_workbook_schedule
  endpoint:
    path: /v2/workbooks/{workbookId}/schedules
    method: POST
    data_selector: records
- name: download_query
  endpoint:
    path: /v2/query/{queryId}/download
    method: GET
    data_selector: records
- name: data_element
  endpoint:
    path: /api/data_elements
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: HUBSPOT_CONTACTS
  endpoint:
    path: /contacts
    method: GET
- name: HUBSPOT_EMAIL_CAMPAIGNS
  endpoint:
    path: /email_campaigns
    method: GET
- name: HUBSPOT_EMAIL_SENDS
  endpoint:
    path: /email_sends
    method: GET
- name: HUBSPOT_CONTACTS
  endpoint:
    path: /services/data/vXX.X/sobjects/HUBSPOT_CONTACTS
    method: GET
    data_selector: records
- name: HUBSPOT_EMAIL_CAMPAIGNS
  endpoint:
    path: /services/data/vXX.X/sobjects/HUBSPOT_EMAIL_CAMPAIGNS
    method: GET
    data_selector: records
- name: HUBSPOT_EMAIL_SENDS
  endpoint:
    path: /services/data/vXX.X/sobjects/HUBSPOT_EMAIL_SENDS
    method: GET
    data_selector: records
- name: Cost Monitoring
  endpoint:
    path: /snowflake/usage/cost_monitoring
    method: GET
    data_selector: data
    params:
      access: SELECT on ORGANIZATION_USAGE schema
- name: Performance Monitoring
  endpoint:
    path: /snowflake/usage/performance_monitoring
    method: GET
    data_selector: data
    params:
      access: SELECT on ACCOUNT_USAGE schema
- name: User Activity
  endpoint:
    path: /snowflake/usage/user_activity
    method: GET
    data_selector: data
    params:
      access: SELECT on ACCOUNT_USAGE schema
- name: Reader Cost
  endpoint:
    path: /snowflake/usage/reader_cost
    method: GET
    data_selector: data
    params:
      access: SELECT on READER_ACCOUNT_USAGE schema
- name: Cost Monitoring
  endpoint:
    path: /snowflake/usage/cost
    method: GET
    data_selector: data
    params:
      access: SELECT on ORGANIZATION_USAGE
- name: Performance Monitoring
  endpoint:
    path: /snowflake/usage/performance
    method: GET
    data_selector: data
    params:
      access: SELECT on ACCOUNT_USAGE
- name: User Activity
  endpoint:
    path: /snowflake/usage/user_activity
    method: GET
    data_selector: data
    params:
      access: SELECT on ACCOUNT_USAGE
- name: Reader Cost
  endpoint:
    path: /snowflake/usage/reader_cost
    method: GET
    data_selector: data
    params:
      access: SELECT on READER_ACCOUNT_USAGE
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Flight Delay Times
  endpoint:
    path: /workbooks/FlightDelayTimes
    method: POST
    data_selector: records
- name: data_sources
  endpoint:
    path: /data/sources
    method: GET
    data_selector: sources
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: flights
  endpoint:
    path: /flights
    method: GET
    data_selector: records
    params: {}
- name: FLIGHTS
  endpoint:
    path: /flights
    method: GET
    data_selector: records
    params: {}
- name: flights
  endpoint:
    path: /flights
    method: GET
    data_selector: records
    params: {}
- name: flights
  endpoint:
    path: /flights
    method: GET
    data_selector: records
    params: {}
- name: FLIGHTS
  endpoint:
    path: /services/data/vXX.X/sobjects/FLIGHTS
    method: GET
    data_selector: records
- name: FLIGHTS
  endpoint:
    path: /api/v1/FLIGHTS
    method: GET
- name: FLIGHTS - Delay Breakdown
  endpoint:
    path: /api/v1/FLIGHTS/DelayBreakdown
    method: GET
- name: data_elements
  endpoint:
    path: /api/data_elements
    method: GET
    data_selector: data
    params: {}
- name: workbooks
  endpoint:
    path: /api/workbooks
    method: GET
    data_selector: workbooks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: flights
  endpoint:
    path: /api/flights
    method: GET
    data_selector: records
- name: Filters
  endpoint:
    path: /filters
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: FLIGHTS
  endpoint:
    path: /raw_data/flights
    method: GET
    data_selector: records
- name: FLIGHTS - Delay Breakdown
  endpoint:
    path: /raw_data/flights_delay_breakdown
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Filters
  endpoint:
    path: /modal/Filters
    method: GET
    data_selector: settings
    params: {}
- name: Airport Locations
  endpoint:
    path: /docs/intro-to-input-tables
    method: POST
    data_selector: input_table_data
- name: FLIGHTS
  endpoint:
    path: /docs/join-types
    method: GET
    data_selector: flights_data
- name: New Flight Entries
  endpoint:
    path: /NewFlightEntries
    method: POST
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: input_tables
  endpoint:
    path: /api/v1/input_tables
    method: GET
    data_selector: data
    params: {}
- name: airport_locations
  endpoint:
    path: /api/airport_locations
    method: POST
    data_selector: records
- name: flights
  endpoint:
    path: /api/flights
    method: GET
    data_selector: records
- name: input_table_access
  endpoint:
    path: /restore/input/table/access
    method: POST
- name: New Flight Entries
  endpoint:
    path: /NewFlightEntries
    method: POST
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: connection
  endpoint:
    path: /connections
    method: POST
    data_selector: data
- name: connection
  endpoint:
    path: /add_connection
    method: POST
    data_selector: connection
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: BigQuery Data Viewer
  endpoint:
    path: /projects/{project_id}/datasets/{dataset_id}/tables/{table_id}
    method: GET
- name: BigQuery Job User
  endpoint:
    path: /projects/{project_id}/jobs
    method: POST
- name: BigQuery Data Editor
  endpoint:
    path: /projects/{project_id}/datasets/{dataset_id}/tables/{table_id}/insert
    method: POST
- name: alloydb_connection
  endpoint:
    path: /connect/alloydb
    method: POST
    data_selector: connection_details
    params: {}
- name: example_resource
  endpoint:
    path: /api/v1/example
    method: GET
    data_selector: data
    params: {}
- name: mysql_connection
  endpoint:
    path: /mysql/connect
    method: POST
    data_selector: connection
    params: {}
- name: data
  endpoint:
    path: /query
    method: POST
    data_selector: results
- name: StarburstConnection
  endpoint:
    path: /connections
    method: POST
    data_selector: connection
    params: {}
- name: connection
  endpoint:
    path: /create-redshift-connection
    method: POST
    data_selector: connection_details
- name: Azure SQL DB
  endpoint:
    path: /connect-to-azure-sql-database
    method: GET
    data_selector: connection_details
- name: BigQuery Data Viewer
  endpoint:
    params: {}
- name: BigQuery Job User
  endpoint:
    params: {}
- name: BigQuery Data Editor
  endpoint:
    params: {}
- name: MySQL
  endpoint:
    path: /connect
    method: POST
    data_selector: connection
    params: {}
- name: connection
  endpoint:
    path: /connections
    method: POST
    data_selector: connection_details
    params: {}
- name: Starburst Galaxy
  endpoint:
    path: /
    method: GET
    data_selector: results
    params: {}
- name: database
  endpoint:
    path: /services/data/vXX.X/sobjects/Database
    method: GET
    data_selector: records
    params: {}
- name: table
  endpoint:
    path: /services/data/vXX.X/sobjects/Table
    method: GET
    data_selector: records
    params: {}
- name: SSH
  endpoint:
    params: {}
- name: Snowflake
  endpoint:
    path: /aws-privatelink-connections#snowflake
    method: GET
    data_selector: records
- name: Redshift
  endpoint:
    path: /aws-privatelink-connections#redshift
    method: GET
    data_selector: records
- name: Snowflake
  endpoint:
    path: /services/data/vXX.X/sobjects/Snowflake
    method: POST
    data_selector: records
    params: {}
- name: Databricks
  endpoint:
    path: /services/data/vXX.X/sobjects/Databricks
    method: POST
    data_selector: records
    params: {}
- name: PostgreSQL
  endpoint:
    path: /services/data/vXX.X/sobjects/PostgreSQL
    method: POST
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Snowflake
  endpoint:
    path: /services/data/snowflake
    method: POST
    data_selector: data
    params: {}
- name: Databricks
  endpoint:
    path: /services/data/databricks
    method: POST
    data_selector: data
    params: {}
- name: PostgreSQL
  endpoint:
    path: /services/data/postgresql
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data_model
  endpoint:
    path: /services/data/vXX.X/sobjects/DataModel
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: F_POINT_OF_SALE
  endpoint:
    path: /services/data/vXX.X/sobjects/F_POINT_OF_SALE
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: F_POINT_OF_SALE
  endpoint:
    path: /services/data/vXX.X/sobjects/F_POINT_OF_SALE
    method: GET
    data_selector: records
    params: {}
- name: F_SALES
  endpoint:
    path: /services/data/vXX.X/sobjects/F_SALES
    method: GET
    data_selector: records
    params: {}
- name: D_STORE
  endpoint:
    path: /services/data/vXX.X/sobjects/D_STORE
    method: GET
    data_selector: records
    params: {}
- name: D_PRODUCT
  endpoint:
    path: /services/data/vXX.X/sobjects/D_PRODUCT
    method: GET
    data_selector: records
    params: {}
- name: D_CUSTOMER
  endpoint:
    path: /services/data/vXX.X/sobjects/D_CUSTOMER
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: F_POINT_OF_SALE
  endpoint:
    path: /services/data/vXX.X/sobjects/F_POINT_OF_SALE
    method: GET
    data_selector: records
- name: F_POINT_OF_SALE
  endpoint:
    path: /services/data/vXX.X/sobjects/F_POINT_OF_SALE
    method: GET
    data_selector: records
    params: {}
- name: F_SALES
  endpoint:
    path: /services/data/vXX.X/sobjects/F_SALES
    method: GET
    data_selector: records
    params: {}
- name: D_STORE
  endpoint:
    path: /services/data/vXX.X/sobjects/D_STORE
    method: GET
    data_selector: records
    params: {}
- name: D_PRODUCT
  endpoint:
    path: /services/data/vXX.X/sobjects/D_PRODUCT
    method: GET
    data_selector: records
    params: {}
- name: D_CUSTOMER
  endpoint:
    path: /services/data/vXX.X/sobjects/D_CUSTOMER
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: datasets
  endpoint:
    path: /v1/datasets
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dataset_controls
  endpoint:
    path: /docs/dataset-worksheet-controls
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dataset
  endpoint:
    path: /datasets
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dataset_parameters
  endpoint:
    path: /services/data/vXX.X/dataset_parameters
    method: GET
    data_selector: records
    params: {}
- name: dataset_totals
  endpoint:
    path: /docs/dataset-totals
    method: GET
- name: dataset_filters
  endpoint:
    path: /docs/dataset-filters
    method: GET
- name: dataset_parameters
  endpoint:
    path: /docs/dataset-parameters
    method: GET
- name: dataset
  endpoint:
    path: /services/data/vXX.X/sobjects/Dataset
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dataset_columns
  endpoint:
    path: /services/data/vXX.X/sobjects/DatasetColumns
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dataset_columns
  endpoint:
    path: /services/data/vXX.X/sobjects/DatasetColumns
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dataset
  endpoint:
    path: /api/v1/datasets
    method: GET
    data_selector: records
- name: upload_csv_data
  endpoint:
    path: /upload/csv
    method: POST
    data_selector: data
    params: {}
- name: dataset_warehouse_views
  endpoint:
    path: /api/v1/dataset_warehouse_views
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: current_worksheet
  endpoint:
    path: /current/worksheet
    method: GET
- name: joined_data
  endpoint:
    path: /joined/data
    method: GET
- name: left_outer_join
  endpoint:
    path: /services/data/vXX.X/sobjects/LeftOuterJoin
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbook
  endpoint:
    path: /api/v1/workbooks
    method: GET
    data_selector: workbooks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbooks
  endpoint:
    path: /api/v1/workbooks
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbooks
  endpoint:
    path: /workbooks
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbook
  endpoint:
    path: /services/data/vXX.X/sobjects/Workbook
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbook
  endpoint:
    path: /api/v1/workbooks
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbook
  endpoint:
    path: /services/data/vXX.X/sobjects/Workbook
    method: GET
    data_selector: records
    params: {}
- name: workbook
  endpoint:
    path: /workbooks
    method: GET
    data_selector: records
    params: {}
- name: data_model
  endpoint:
    path: /data_models
    method: GET
    data_selector: records
    params: {}
- name: data_element
  endpoint:
    path: /create-a-data-element
    method: POST
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbook
  endpoint:
    path: /workbooks
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: analysis
  endpoint:
    path: /api/v1/analysis
    method: GET
    data_selector: data
    params: {}
- name: tables
  endpoint:
    path: /api/tables
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data_element
  endpoint:
    path: /data/elements
    method: GET
    data_selector: elements
- name: pivot_table
  endpoint:
    path: /api/pivot_tables
    method: GET
    data_selector: data
    params: {}
- name: pokemon
  endpoint:
    path: /pokemon/
    method: GET
    data_selector: results
    params: {}
- name: Customize grouped table subtotals
  endpoint:
    path: /docs/create-and-manage-tables#show-totals-in-a-grouped-table
    method: GET
    data_selector: records
    params: {}
- name: Calculate a percentage for subtotals in a pivot table
  endpoint:
    path: /docs/percentoftotal
    method: GET
    data_selector: records
    params: {}
- name: Calculate a percentage for row subtotals
  endpoint:
    path: /docs/subtotal
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: current_exchange_rates
  endpoint:
    path: /latest
    method: GET
    data_selector: rates
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: control_value
  endpoint:
    path: /control_value
    method: GET
    data_selector: control_values
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: POST
    data_selector: metrics
    params: {}
- name: dimensions
  endpoint:
    path: /dimensions
    method: POST
    data_selector: dimensions
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: semantic_view
  endpoint:
    path: /api/semantic_views
    method: GET
    data_selector: views
- name: workbook
  endpoint:
    path: /workbooks
    method: GET
    data_selector: data
    params: {}
- name: data_model
  endpoint:
    path: /data-models
    method: GET
    data_selector: data
    params: {}
- name: pokemon
  endpoint:
    path: /pokemon
    method: GET
    data_selector: results
    params: {}
- name: pokemon
  endpoint:
    path: /pokemon
    method: GET
    data_selector: results
- name: current_exchange_rates
  endpoint:
    path: /latest
    method: GET
    data_selector: rates
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbook_control_values
  endpoint:
    path: /api/v1/workbook/control_values
    method: GET
    data_selector: data
    params: {}
- name: dataset
  endpoint:
    path: /services/data/vXX.X/sobjects/Dataset
    method: GET
    data_selector: records
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: dimensions
  endpoint:
    path: /dimensions
    method: GET
- name: workbook_templates
  endpoint:
    path: /docs/get-started-with-workbook-templates
    method: GET
    data_selector: templates
    params: {}
- name: workbook
  endpoint:
    path: /api/v1/workbooks
    method: GET
    data_selector: records
- name: semantic_view
  endpoint:
    path: /path/to/semantic/view
    method: GET
    data_selector: semantic_view_data
    params: {}
- name: workbook
  endpoint:
    path: /api/v1/workbooks
    method: GET
    data_selector: workbooks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbook
  endpoint:
    path: /workbooks
    method: GET
    data_selector: workbooks
    params: {}
- name: data_model
  endpoint:
    path: /data-models
    method: GET
    data_selector: dataModels
    params: {}
- name: workbook
  endpoint:
    path: /workbook/My-Workbook-{workbook_id}/tag/{tag_name}
    method: GET
- name: embed
  endpoint:
    path: /embed/{embed_id}/tag/{tag_name}
    method: GET
- name: workbook_translation
  endpoint:
    path: /workbook/translation
    method: GET
    data_selector: translations
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbook
  endpoint:
    path: /services/data/v1.0/workbooks
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbook_templates
  endpoint:
    path: /api/v1/workbook_templates
    method: GET
    data_selector: data
- name: workbook_templates
  endpoint:
    path: /workbook/templates
    method: GET
    data_selector: templates
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dataset_query
  endpoint:
    path: /examine/dataset/queries
    method: GET
    data_selector: records
    params: {}
- name: workbook_versions
  endpoint:
    path: /services/data/vXX.X/workbookVersions
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbooks
  endpoint:
    path: /api/v1/workbooks
    method: GET
    data_selector: workbooks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: bar_chart_format_options
  endpoint:
    path: /docs/all-bar-chart-format-options
    method: GET
    data_selector: format_options
    params: {}
- name: line_chart
  endpoint:
    path: /docs/create-a-data-element
    method: GET
    data_selector: chart_properties
    params: {}
- name: kpi_chart
  endpoint:
    path: /services/data/vXX.X/sobjects/KPIChart
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: warehouse_views
  endpoint:
    path: /create-and-manage-warehouse-views
    method: GET
- name: sankey_diagram
  endpoint:
    path: /sankey-diagram
    method: POST
    data_selector: data
- name: funnel_chart
  endpoint:
    path: /docs/build-a-funnel-chart
    method: GET
    data_selector: funnel_chart
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: geography_map
  endpoint:
    path: /build/a/geography/map
    method: GET
    data_selector: records
- name: geography_data
  endpoint:
    path: /geography/data
    method: GET
    data_selector: geospatial_objects
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: data_elements
  endpoint:
    path: /data/elements
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: scatter_plot
  endpoint:
    path: /api/scatter_plot
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: funnel_chart
  endpoint:
    path: /services/data/vXX.X/sobjects/FunnelChart
    method: GET
    data_selector: records
    params: {}
- name: funnel_chart
  endpoint:
    path: /docs/create-a-data-element
    method: GET
    data_selector: funnel_chart_data
    params: {}
- name: gauge_chart
  endpoint:
    path: /gauge_chart
    method: GET
    data_selector: charts
    params: {}
- name: geography_map
  endpoint:
    path: /build/geography/map
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: geography_map
  endpoint:
    path: /geography-map
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: waterfall_chart
  endpoint:
    path: /services/data/vXX.X/sobjects/WaterfallChart
    method: GET
    data_selector: records
- name: datasets
  endpoint:
    path: /api/v1/datasets
    method: GET
    data_selector: records
- name: workbooks
  endpoint:
    path: /api/v1/workbooks
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbook
  endpoint:
    path: /services/data/vX.X/sobjects/Workbook
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data_element
  endpoint:
    path: /api/v1/data_elements
    method: GET
    data_selector: elements
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data_element
  endpoint:
    path: /data/elements
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data_source
  endpoint:
    path: /api/v1/data_source
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: input_table
  endpoint:
    path: /docs/manage-input-table
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: input_table
  endpoint:
    path: /input-tables
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbooks
  endpoint:
    path: /v1/workbooks
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: input_table
  endpoint:
    path: /input/tables
    method: GET
    data_selector: tables
    params: {}
- name: input_table
  endpoint:
    path: /configure/single-select-multi-select
    method: POST
    data_selector: data
    params: {}
- name: select_tab
  endpoint:
    path: /docs/create-and-configure-tabbed-containers-beta
    method: GET
    data_selector: actions
    params: {}
- name: input_table
  endpoint:
    path: /api/v1/input_table
    method: GET
    data_selector: data
    params: {}
- name: input_table_columns
  endpoint:
    path: /services/data/vXX.X/sobjects/InputTableColumns
    method: GET
    data_selector: records
    params: {}
- name: export_to_slack
  endpoint:
    path: /export/slack
    method: POST
    data_selector: response
    params: {}
- name: export_to_microsoft_teams
  endpoint:
    path: /export/microsoft_teams
    method: POST
    data_selector: response
    params: {}
- name: export_to_sharepoint
  endpoint:
    path: /export/sharepoint
    method: POST
    data_selector: response
    params: {}
- name: export_to_webhook
  endpoint:
    path: /export/webhook
    method: POST
    data_selector: response
    params: {}
- name: export_to_cloud_storage
  endpoint:
    path: /export/cloud_storage
    method: POST
    data_selector: response
    params: {}
- name: embed_iframe_event
  endpoint:
    path: /services/data/vXX.X/actions/iframe
    method: POST
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: estimate_budget
  endpoint:
    path: /stored_procedures/ESTIMATE_BUDGET
    method: POST
    data_selector: output
    params: {}
- name: tabbed_container
  endpoint:
    path: /docs/manage-authentication
    method: GET
    data_selector: tabs
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: workbook_actions
  endpoint:
    path: /actions
    method: POST
    data_selector: actions
- name: input_table_data
  endpoint:
    path: /api/v1/input_table_data
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: embed_iframe_events
  endpoint:
    path: /create-actions-that-generate-embed-iframe-events
    method: POST
- name: plugins
  endpoint:
    path: /services/data/plugins
    method: POST
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: estimate_budget
  endpoint:
    path: /stored_procedures/ESTIMATE_BUDGET
    method: CALL
    data_selector: output
    params:
      arg1: Materials cost
      arg2: Headcount
      arg3: Weeks
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbook
  endpoint:
    path: /workbooks
    method: GET
    data_selector: records
    params: {}
- name: workbook_comments
  endpoint:
    path: /api/v1/workbooks/{workbook_id}/comments
    method: GET
    data_selector: comments
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: files
  endpoint:
    path: /search/files
    method: GET
    data_selector: documents
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: action_sequence
  endpoint:
    path: /services/data/vXX.X/sobjects/ActionSequence
    method: GET
    data_selector: records
- name: workbooks
  endpoint:
    path: /api/v1/workbooks
    method: GET
    data_selector: data
- name: data_models
  endpoint:
    path: /api/v1/data_models
    method: GET
    data_selector: data
- name: folders
  endpoint:
    path: /api/v1/folders
    method: GET
    data_selector: folders
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: workbook_templates
  endpoint:
    path: /workbook/templates
    method: GET
    data_selector: templates
- name: workbook
  endpoint:
    path: /api/v1/workbooks
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: export_to_google_drive
  endpoint:
    path: /docs/export-to-google-drive
    method: GET
    data_selector: export_details
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbook
  endpoint:
    path: /api/workbook
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: export
  endpoint:
    path: /l/channel/<channel-ID-and-name>
    method: GET
    data_selector: exports
    params: {}
- name: workbook_export
  endpoint:
    path: /exports/workbooks
    method: POST
    data_selector: exports
    params: {}
- name: export_to_sharepoint
  endpoint:
    path: /export/microsoft-sharepoint
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workbook_data
  endpoint:
    path: /workbooks/data
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dataset
  endpoint:
    path: /services/data/vXX.X/sobjects/Dataset
    method: GET
    data_selector: records
- name: Export to cloud storage
  endpoint:
    path: /export-to-cloud-storage
    method: POST
    data_selector: exports
    params: {}
- name: AvgIf
  endpoint:
    path: /docs/avg
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Count
  endpoint:
    path: /docs/count
    method: GET
    data_selector: examples
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: export_to_teams
  endpoint:
    path: /docs/export-to-microsoft-teams
    method: GET
- name: manage_microsoft_integration
  endpoint:
    path: /docs/manage-microsoft-integration
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: aggregate
  endpoint:
    path: /docs/aggregate-functions-overview
    method: GET
    data_selector: aggregate
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dataset
  endpoint:
    path: /datasets
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: MinFunction
  endpoint:
    path: /docs/min-function
    method: GET
    data_selector: function_args
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: PercentileCont
  endpoint:
    path: /docs/percentilecont
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: StdDev
  endpoint:
    path: /docs/stddev
    method: GET
    data_selector: StdDev
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: ListAggDistinct
  endpoint:
    path: /docs/listagg
    method: GET
    data_selector: examples
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Array Function
  endpoint:
    path: /docs/array-functions
    method: GET
    data_selector: values
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: PercentileDisc
  endpoint:
    path: /docs/connect-to-bigquery
    method: GET
    data_selector: resource
    params: {}
- name: PercentileDisc
  endpoint:
    path: /docs/connect-to-postgresql
    method: GET
    data_selector: resource
    params: {}
- name: PercentileDisc
  endpoint:
    path: /docs/connect-to-databricks
    method: GET
    data_selector: resource
    params: {}
- name: PercentileDisc
  endpoint:
    path: /docs/connect-to-snowflake
    method: GET
    data_selector: resource
    params: {}
- name: PercentileDisc
  endpoint:
    path: /docs/connect-to-redshift
    method: GET
    data_selector: resource
    params: {}
- name: PercentileDisc
  endpoint:
    path: /docs/connect-to-mysql
    method: GET
    data_selector: resource
    params: {}
- name: PercentileDisc
  endpoint:
    path: /docs/connect-to-alloydb
    method: GET
    data_selector: resource
    params: {}
- name: ArrayLength
  endpoint:
    path: /docs/arraylength
    method: GET
    data_selector: entries
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: StdDev
  endpoint:
    path: /docs/stddev
    method: GET
    data_selector: results
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Subtotal
  endpoint:
    path: /api/subtotal
    method: POST
    data_selector: results
    params: {}
- name: dataset
  endpoint:
    path: /services/data/vXX.X/sobjects/Dataset
    method: GET
    data_selector: records
    params: {}
- name: ConvertTimezone
  endpoint:
    path: /docs/convert-timezone
    method: GET
    data_selector: examples
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dataset
  endpoint:
    path: /api/v1/datasets
    method: GET
    data_selector: data
    params: {}
- name: Variance
  endpoint:
    path: /docs/variance
    method: GET
    data_selector: records
    params: {}
- name: VariancePop
  endpoint:
    path: /docs/variancepop
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: variance_pop
  endpoint:
    path: /docs/variance-pop
    method: GET
    data_selector: function
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: ArrayLength
  endpoint:
    path: /ArrayLength
    method: GET
    data_selector: entries
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: ConvertTimezone
  endpoint:
    path: /docs/convert-timezone
    method: GET
    data_selector: function_arguments
    params: {}
- name: DateAdd
  endpoint:
    path: /docs/manage-authentication
    method: GET
    data_selector: function arguments
    params: {}
- name: input_table
  endpoint:
    path: /api/input_table
    method: GET
    data_selector: data
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in Sigma
- Some objects may return nulls in deeply nested fields
- Audit logs now record events and metadata related to input table activity.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Sigma does not store the data itself; it accesses the data through a connection.
- Some objects like Contact may return nulls in deeply nested fields
- Workbook templates allow users to templatize and share workbook structures for quick
  and consistent reuse.
- Slow load times and query timeouts are common when the warehouse struggles to respond
  to a request.
- Snowflake sometimes provides an ORGANIZATION_USAGE schema for secondary Snowflake
  accounts, but leaves it empty.
- Snowflake Usage Templates provide current data with up to few hours latency.
- Access to the ORGANIZATION_USAGE schema is only available in the primary Snowflake
  account.
- This course doesn’t focus on administration or under-the-hood technical details.
- Sigma doesn’t store any data from your data platform.
- Custom views are helpful when one workbook has several users with competing preferences.
- Uses custom views for user-specific filter settings.
- Columns representing time are stored as numbers, limiting future options for manipulation.
- Data transformation is necessary for filtering, sorting, and visualization.
- Each record in this table is one US domestic flight from the year 2015.
- Data types determine which functions can be used on a column and certain filter
  behavior.
- Columns that express a specific time of day include Scheduled Departure, Departure
  Time, Wheels Off, Wheels On, Scheduled Arrival, Arrival Time
- Columns that express an elapsed time in minutes include Departure Delay, Taxi Out,
  Scheduled Time, Elapsed Time, Air Time, Taxi In, Arrival Delay
- Columns that express a part of a date include Year, Month, Day, Day of Week
- Columns that express either an elapsed time in minutes, or a null value include
  Air System Delay, Security Delay, Airline Delay, Late Aircraft Delay, Weather Delay
- Controls can filter parent tables and affect child elements.
- Control IDs are customizable unique identifiers for control elements.
- Some design choices ultimately come down to personal preference
- Other design choices play important roles in making a clear, accessible user experience
- Modals are distinct from any page in the workbook and can be opened from any page.
- Users can’t directly navigate to modals in the published workbook like they would
  with a page.
- Users can filter the visualizations by Date, Airline, and Airport.
- You might not have the necessary permissions to save your current workbook settings
  as a theme available to all users in your organization.
- Modals can be reused across different pages.
- Sigma never stores your data in Sigma, including data entered in input tables.
- Input table data is stored in a specific write-back schema in your data platform.
- Requires setup of control values for flight information.
- All input fields must be populated to create a new record.
- Admin privileges in your Sigma organization are required to connect to a data source.
- Query timeouts are set to 120 seconds (2 minutes) by default.
- Snowflake will no longer be supporting username/password authentication, and recommends
  using key pair authentication or OAuth for programmatic service users.
- Themes are a powerful tool for styling one or more workbooks quickly.
- You must be assigned an account type with the Manage all workbook themes and fonts
  permissions enabled.
- Sigma Computing recommends transitioning away from using basic authentication when
  connecting to Snowflake.
- Snowflake will block all users, including service users, from using single-factor
  authentication by August 2026.
- The export warehouse inherits the primary warehouse’s connection queue size. To
  set a different queue size for the export warehouse, contact Support.
- Insufficient role privileges can interrupt input table access and prevent users
  from creating new input tables or saving edits to existing ones.
- The resolution to restore input table access depends on the connection's authentication
  method.
- The modal is titled Enter Details on a New Flight.
- Users must select one and only one non-null option for list values controls.
- You must have access to a Databricks workspace with Databricks SQL access enabled.
- You must have access to a Databricks SQL warehouse or have the ability to create
  one.
- By default, Sigma sets query timeouts to 120 seconds (2 minutes).
- You must have a write-back destination set up to use Python, but your write-back
  destination cannot use default storage.
- Set a reasonable automatic termination policy for the all-purpose compute. Sigma
  recommends a policy of at least 3 hours, based on your expected usage.
- You must be assigned the Admin account type.
- A node size of ra3.4xlarge or larger is recommended if you are using input tables
  on this connection.
- Service account must be granted the BigQuery Data Viewer role for each project's
  datasets.
- BigQuery Data Editor role is required if write access is enabled.
- The export warehouse inherits the primary warehouse’s connection queue size.
- Must restore input table access for user.
- The role used by the connection cannot access tables containing input table data
  and the edit log
- The role assigned to the user cannot access the tables containing input table data
- Admin privileges in your Sigma organization are required.
- Avoid granting excessive permissions to the account used for connecting.
- A MySQL account with READ privileges for the relevant databases and tables is required.
- Default port for PostgreSQL is 5432
- Connection timeout defaults to 120 seconds
- Requires setup of connected app in Databricks
- Requires service account with Select from table privilege and Use cluster privilege.
- A node size of ra3.4xlarge or larger is recommended.
- Azure SQL Database connections don’t support OAuth connections
- Feature limitations include no support for dataset warehouse views created in Sigma,
  export to cloud storage, and various SQL functions
- Avoid granting excessive permissions. The account does not require SYSADMIN-level
  access.
- The service account must be granted the BigQuery Data Viewer role for each project's
  datasets.
- Currently, SQL Server 2022/Azure SQL Managed Instance connections don’t support
  OAuth connections.
- Recommended to avoid granting excessive permissions to the account used for connecting.
- If your organization uses OAuth to authenticate your connection, there are additional
  configuration steps.
- By design, the destination that you configure for write access is not visible in
  the Sigma connection explorer pane. The data that Sigma writes to this destination
  is not formatted in a way that can be browsed and used.
- Sigma supports MySQL version 8.0 and higher.
- MySQL on Azure does not have named timezones by default, so you must load the timezone
  data into your MySQL database for Sigma to operate properly.
- Configure OAuth with write access
- The destination that you configure for write access is not visible in the Sigma
  connection explorer pane.
- Tables created by the write access validation process can be easily identified by
  object names prepended with `SIGDS_`. To ensure proper functionality of write-access
  features, avoid modifying any table with the `SIGDS_` prefix.
- In Snowflake, write permissions can be granted to users through their primary or
  secondary roles in Snowflake.
- Sigma recommends not granting excessive permissions to the account used to connect
  to your data store.
- OAuth tokens can expire if the owner goes a significant amount of time without logging
  in to Sigma.
- You need the credentials for a Starburst Galaxy service account with Select from
  table privilege for all tables that Sigma needs to access and the Use cluster privilege
  on the cluster.
- You can only use this option with key pair authentication. If you connect Sigma
  to your data platform using OAuth, you cannot use this option.
- Write access requires setting up a dedicated database and schema and granting the
  necessary privileges
- SSH channels use public key cryptography to authenticate the client.
- For most servers, the SSH default port is 22.
- Your Sigma organization must be on the same cloud as your data platform to use private
  link.
- This feature does not support BigQuery warehouses or self-managed warehouses running
  on Azure, GCP, or VMWare clouds.
- Your Databricks platform must be Enterprise tier.
- Your Databricks workspace cannot be in the us-west-1 region.
- Your Databricks workspace must be customer-managed, not Databricks-managed.
- Requires setup of connected app in Sigma API
- By design, the destination that you configure for write access is not visible in
  the Sigma connection explorer pane.
- Private Link can only be enabled for Azure Database for MySQL flexible server instances
  that are created with public access.
- Reach to out to your Sigma Account Executive for more information on setting up
  Private Link for Azure SQL Database, Azure SQL Managed Instance or SQL Server 2022
  connections.
- The Run as service account option is only available on workbooks that use an OAuth
  connection.
- Dynamically assign roles used by a connection
- In some cases, you might need to add Sigma's IP addresses to the allowlist to successfully
  connect to your data.
- Sigma automatically syncs your connection's metadata on a nightly basis to index
  various information from your data warehouse.
- Admin privileges in your Sigma organization are required to use SSH.
- Data models provide a semantic layer for your data, letting you organize and store
  data in a structured governed way without modifying raw data.
- With a well-designed data model, users can easily access the data they need for
  analysis, reducing the time and effort required to analyze data.
- Sigma organizations running on Azure can securely connect to their data using Azure's
  Private Link.
- Private Link approval steps must be followed for each data warehouse.
- Future data-level changes applied to the source can be reflected in the data model.
- Reusable elements created from copy/paste are not synced with the original copied
  element.
- Sigma must be authenticated either at the Network level, or through Client Authentication.
- If the connection uses OAuth, the connection inherits the permissions for each member
  of the organization directly from Snowflake.
- Troubleshoot input table connection issues
- Input table errors are treated as fatal errors and not retried.
- Editing restrictions apply to users affected by input table errors.
- Relationships between data model tables only support many-to-one or one-to-one joins.
- Sigma does not automatically create relationships between tables from a connected
  data source.
- Data models make it easier to work with data and increase user confidence in the
  results of their analysis.
- Hiding columns and tables in a data model limits the availability, but not your
  users' ability to access the data.
- Users with edit access to the data model can choose which metrics to highlight.
- Metrics do not propagate through joins or unions, or to child elements.
- You can only define metrics in one data source.
- Metric formulas do not support window functions or join functions.
- You cannot directly reference metrics in dynamic text.
- You can only define relationships between elements on the same connection.
- Metrics define aggregate calculations.
- Users cannot see or modify the original calculations, but they can reference them
  or nest them within their calculations.
- Models key sales data, including a total revenue metric
- Metrics do not propagate through joins or unions.
- Creating a dataset allows you to bundle formulas, data transformations, filters,
  groupings, and parameters into a rich data source.
- You must be assigned an account type with the Create, edit, and publish datasets
  permission enabled.
- If the preview displays a null value, your formula might be missing an aggregate
  function, such as `Sum()`, `Avg()`, or `Count()`.
- Requires setup of connected app in Sigma
- Dataset worksheets allow you to structure and manipulate its data.
- A dataset’s worksheet must contain at least one data source.
- To create and manage datasets, you must be assigned an account type with the Create,
  edit, and publish datasets permission enabled.
- API may have rate limits
- Dataset parameters can improve performance for expensive workbook queries.
- The CSV upload feature must be enabled for your organization.
- You must be assigned an account type with the Upload CSV permission enabled.
- You must be the dataset owner or be granted Can edit dataset permission.
- Totals can be created in your worksheet’s right hand panel, under the column view
  tab.
- Users can request access through the error page if they don't have permissions.
- The ability to create, edit, delete, and use parameters in datasets requires the
  account type with the Create, edit, and publish datasets permission enabled.
- The ability to view parameters in a dataset requires the account type with the View
  datasets permission enabled.
- Data added through links always appear in a Left Join. Links only support Many-to-One
  or One-to-One relationships.
- To use this feature, you must be assigned an account type with the Write SQL and
  Create, edit, and publish datasets permissions enabled.
- The SQL editor only appears if you have connection-level access to at least one
  connection in your organization.
- This feature isn't supported by all data platform connections.
- You can share a Sigma dataset with other people in your organization.
- Data added through links always appear in a Left Join.
- Links only support Many-to-One or One-to-One relationships.
- The maximum file size for uploading a CSV-formatted file is 200MB.
- If you upload a CSV file to a workbook, the data in your file is only accessible
  from the Sigma workbook that uses the CSV file.
- To run custom SQL, you must have Can use access to the entire connection.
- OAuth2 authentication is required for API access.
- The geography data type is available with Snowflake and BigQuery connections only.
- Joins and lookups in workbooks and datasets must use sources from the same connection.
- All elements involved in a lookup join must be on the same data connection.
- This action is only available in edit mode.
- This document specifically refers to custom datetime formatting in the Sigma UI.
- Set up row-level security requires configuration.
- If your organization uses OAuth for a connection, any existing RLS rules in your
  data platform are respected by Sigma.
- Configure column-level security to restrict access to or mask column-level data
  in a data model or dataset.
- To configure user attributes and create teams, you must be assigned the Admin account
  type.
- To configure column-level security in a data model, you must be granted Can edit
  access to the data model.
- To reference existing user attributes in a dataset, you must be granted Can edit
  access to the dataset.
- Child elements inherit column-level security rules from parent elements.
- To prevent unintentional results or errors, avoid using user attributes in a materialized
  dataset.
- Members of Team A require access to the Domain column in the Customer dataset.
- Members of Team B need to be restricted from viewing the Domain column.
- Define custom datetime formats
- Record formulas improve data processing and interaction by enabling you to generate
  structured objects directly in workbooks and data models.
- Users with Can view, Can explore or Can edit permissions can view and navigate workbooks
  in their published state.
- Users need Can edit permission to edit a workbook.
- Collaborate with Live Edit in workbooks
- Only users with Can edit access to the workbook can contribute.
- Configure column-level security
- Workbook editors define elements and can individually configure them for viewer
  interaction.
- Column-level security can restrict access based on user attributes or team membership.
- Workbooks are a Sigma document type designed to support both ad hoc data exploration
  and complex long-term reporting.
- Explorations can be accessed from the Sigma home page for 30 days after creation.
- Queries from the document run with the user's personal OAuth credentials configured
  for the data platform if the connection is configured to use OAuth without a service
  account.
- Plugins only have access to the first 25,000 rows in a data source.
- When any editor discards a draft, Sigma discards all unpublished edits made by any
  editor.
- Requires setup of OAuth in the Sigma application
- Uses OAuth2 for authentication
- Linked input tables don't currently support copy-and-paste functionality. However,
  you can copy empty input tables and all data, UI, and control elements.
- Workbook layout customization includes adding pages, elements, and managing themes.
- The data source must be a table element in a data model with one or more relationships
  defined.
- You must be the workbook or data model owner or be granted Can explore or Can edit
  access to the document.
- Links are column-based relationships created between two data sources in Sigma.
- Child elements of a data element that inherited links from its CDW or dataset parent
  will not continue to inherit those links.
- To draft and publish new workbook versions, you must have Can edit access to the
  individual workbook.
- When copy and pasting between workbooks, both workbooks must belong to the same
  organization.
- When copy and pasting between workbooks, both workbooks must use the same layout
  style.
- Sigma copies the whole page, plus dependent sources for elements on the page.
- Folders created in a source element after the child element was created do not automatically
  appear.
- Linked input tables don't currently support copy-and-paste functionality.
- Some endpoints may have rate limits
- Consider reusability of a data source when building a workbook and creating data
  elements.
- You must have Can Explore or Can Edit access to the individual workbook.
- Cloud Data Warehouse (CDW) tables can be linked to other CDW tables.
- Sigma datasets can be linked to other datasets.
- A data source can have links to multiple other data sources.
- The list of extracted columns is retrieved from the first 1,000 rows of the table.
  Key-value pairs in later rows are not extracted.
- Requires OAuth2 authentication setup.
- 'The ability to format pivot table totals requires the following: You must be assigned
  an account type with the Explore workbooks or Create, edit, and publish workbooks
  permission enabled. You must be the workbook owner or be granted Can explore or
  Can edit workbook permission.'
- Admins can define a default table style in an organization-wide workbook theme.
- Hierarchies can only be used in pivot tables.
- Hierarchies exist in singular workbooks and cannot be passed to datasets or other
  workbooks.
- When you update a hierarchy, Sigma does not apply those changes to pivot tables
  that currently use it.
- Transposing input tables is not supported.
- Transposing calculated columns is not supported.
- When transposing rows to columns, a limit of 200 unique row values can be transposed
  from a single column.
- API may have restrictions on data size.
- Requires setup of OAuth credentials in Sigma
- Make sure that the totals that you want to adjust are visible.
- Renamed subtotal and grand total labels are not updated downstream.
- This documentation describes one or more public beta features that are in development.
- Running this example requires an API key from fixer.io.
- Ensure that your planned usage meets the restrictions for the free tier.
- Hierarchies exist in singular workbooks and cannot be not passed to datasets or
  other workbooks.
- Sigma converts all timestamps to your organization’s timezone.
- 'Sigma does not recommend using the #raw configuration value for use cases outside
  of dynamic schema selection. When used improperly, it can pose security risks, such
  as allowing users to bypass row-level security.'
- If changing the value of a control results in a statement that queries a table with
  a different schema, the query produces different columns than expected, resulting
  in errors.
- Ask Sigma can't perform joins.
- Ask Sigma can only answer data questions based on data sources in your data platform
  that your admin has made available to the AI model.
- Ask Sigma won't generate Observations about your data if the data set is too large.
- Tagged versions of data models aren't highlighted in Ask Sigma.
- If you want to embed Ask Sigma in your own portal or site, you must sign your secure
  embed URLs with JWTs.
- To work with API endpoints in your Python code, your Databricks cluster must allow
  egress to the public Internet or the relevant API endpoints.
- Some API responses may contain nested objects
- To view data lineage, you must have Can Edit access to the workbook or data model.
- If your workbook contains input tables or custom SQL elements, the data source and
  connection for those elements is not swapped.
- You cannot change the data source for an input table or an element that uses SQL
  to directly query the connected data warehouse.
- Manage workbook refresh options
- Running this example requires an API key from fixer.io. Ensure that your planned
  usage meets the restrictions for the free tier.
- Sigma does not store data. Every refresh re-queries the data in the warehouse. Setting
  an auto-refresh can burden the connection and result in significant warehouse costs.
- Any user with a workbook preview or embed URL and a valid locale definition can
  view a translated workbook.
- A translation file is not required to apply a locale.
- This documentation describes one or more public beta features that are in development.
  Beta features are subject to quick, iterative changes.
- You cannot add a shortcut to a shortcut, and you cannot add a shortcut to your "My
  Documents" folder to another folder or workspace.
- API requires setup of connected app in Sigma
- Requires setup of connected app in api
- To create a new template from an existing workbook, you must be assigned an account
  type with Create, edit, and publish workbooks permission and have at least Can view
  access to the existing workbook.
- To edit an existing template, you must be the template owner or be granted Can edit
  template permission.
- Ask Sigma selects a single data source with which to answer a data question and
  cannot combine data from multiple tables, data models, or metrics.
- Beta features are subject to quick, iterative changes.
- Metrics defined in the semantic view are available only to the element directly
  sourced from the semantic view.
- Workbook lifecycle involves exploration, drafting, and publishing.
- Published workbooks can be accessed in Edit, Explore, and View modes.
- The ability to set or delete a badge requires the Manage all badges permission enabled.
- Badges are visible to any user granted access to the document.
- Edit history is not available for changes made prior to December 13, 2022. Beginning
  on December 13, 2022, all organizations with Live Edit enabled track edits in the
  edit history. Edits made prior to Live Edit being enabled remain untracked.
- You must have Can Edit permissions on the workbook to view the version history.
- Tagged versions of data models are not available to Ask Sigma
- Translations for a custom view of a workbook are not supported.
- Number and date formats are not supported.
- Materialization writes a copy of a dataset or data element back to your warehouse
  as a table, or in some cases, a dynamic table.
- Materialized data is stored in your cloud data warehouse in a schema managed by
  the Sigma service.
- Page visibility is not a security feature. If you need to restrict access to data,
  use row-level security or column-level security.
- At least one page in a workbook must not have any page visibility restrictions applied.
- Page visibility settings apply in View and Explore mode only. The workbook owner
  and any user granted Can edit permission for the particular workbook can access
  all pages in Edit mode, regardless of page visibility settings.
- When a user with Save as permissions saves a copy of a workbook, all pages are visible
  in the copy, regardless of page visibility settings in the original workbook.
- When a secure embed user saves a copy of an embedded workbook, all pages are visible
  in the copy, regardless of page visibility settings in the original workbook.
- Materialization of data elements in workbooks is in public beta.
- The materialization run starts immediately using the latest published version of
  the workbook.
- Write access must be enabled on your connection.
- User must be assigned an account type with Schedule materializations and Create,
  edit, and publish datasets permissions.
- You cannot add a shortcut to a shortcut, and you cannot add a shortcut to your 'My
  Documents' folder to another folder or workspace.
- To use this feature, you must be assigned an account type with the permission to
  materialize data.
- To materialize a data element, the connection for the data source must have write-back
  enabled.
- Requires OAuth2 with refresh token.
- API requires setup of connected app in Sigma.
- Requires setup of connected app in Sigma.
- Guest users cannot access external templates.
- Reduce the amount of unneeded data returned in a workbook query by using filters
  at the dataset level.
- Materialization enhances query performance by allowing your data warehouse to avoid
  recomputing the dataset when it's used by an element or a in descendant Sigma analysis.
- The ability to create and edit templates requires an account type with Create, edit,
  and publish workbooks permission.
- Warehouse views are created from the published version of a document.
- 'Workbook lifecycle: explore, draft, and publish'
- Workbooks support both ad hoc data exploration and complex long-term reporting.
- Edits made to a workbook are automatically saved as a shared, live draft.
- 'The ability to set or delete a badge requires the following: You must be assigned
  an account type with the Manage all badges permission enabled.'
- By default, Sigma sets query timeouts to 120 seconds (2 minutes). Organization admins
  have the option to customize this per connection.
- Set a query ID cache duration
- Workbook versions and version history are available.
- Only users with Can Edit permission can restore old versions and changes of a workbook.
- Edit history is not available for changes made prior to December 13, 2022.
- The default query ID cache duration is 10 minutes.
- The actual query results are cached in the data platform, not in Sigma. Typically,
  the cache is in the form of a copy of results and is stored for 24 hours.
- Manual refresh or scheduled refresh bypasses all caching options.
- Every data refresh re-queries the data in the warehouse. Setting an auto-refresh
  might burden the connection and result in significant warehouse costs.
- Requires OAuth setup in Sigma admin panel.
- Admins can create and manage version tags, including creating protected tags that
  require an approval flow.
- Charts feature various properties and formatting options that determine how your
  data is represented.
- Materialization enhances query performance and can help reduce compute costs.
- Materialized tables are prepended by `t_mat` or `T_ID` or appended with `_MAT`.
- Tooltip formatting is supported by stacked bar charts only.
- If you use OAuth to authenticate to your data platform, the materialization job
  runs as the user who scheduled the materialization.
- Line charts support up to 25,000 data points. If the configurations result in a
  data set that exceeds this limit, the chart displays the first 25,000 data points,
  and a warning message indicates that the chart is incomplete.
- You must be assigned an account type with the Schedule materializations and Create,
  edit, and publish datasets permissions enabled.
- You must have Can Edit access to the dataset.
- KPI charts require an account type with Edit Workbook and/or Explore Workbook permission.
- Configuring a column in the Timeline property automatically engages the Comparison
  property.
- By default, a comparison value displays as a percentage.
- The Color property (including conditional formatting) applies to the metric value
  only and doesn’t affect the element title or comparison font.
- The Value format settings apply to the metric value only and don’t affect the element
  title or comparison font.
- Scatter plots support up to 25,000 data points.
- Uses datasets to centralize data definitions and provide source data for workbooks.
- Materializations allows you to write datasets and workbook elements back to your
  warehouse as tables which can reduce compute costs.
- Sankey diagrams support up to 25,000 data points. If the configurations result in
  a data set that exceeds this limit, the chart displays the first 25,000 data points.
- Query timeouts are set to 120 seconds by default, but can be customized by organization
  admins.
- Requires account type with Edit Workbook and/or Explore Workbook permission enabled.
- If granted Can explore access, can create and modify chart properties but cannot
  publish changes.
- If you're granted Can explore access to the workbook, you can create and modify
  chart properties and formatting in Explore mode, but you cannot publish your changes.
- If you don't configure a value in the Minimum property, the value defaults to zero.
- Geography maps require geography data in WKT format or variant data in GeoJSON format.
- Sigma does not store query results, only the query ID returned by the warehouse.
  Every data refresh re-queries the data in the warehouse.
- You must be assigned an account type with the Edit Workbook and/or Explore Workbook
  permission enabled.
- If you’re granted Can explore access to the workbook, you can create and modify
  chart properties and formatting in Explore mode, but you cannot publish your changes.
- To build a KPI chart that highlights the period value of a metric without displaying
  a comparison, ensure the dropdown is set to None.
- Customize the comparison display in the Element format panel.
- To create a data element, you must have Can Edit access to the individual workbook
  and be in Edit mode.
- Many exploratory actions are also supported in Explore mode.
- To map geography data, you must use valid latitude and longitude coordinates.
- Supports up to 25,000 data points.
- Sankey diagrams support up to 25,000 data points. If the configurations result in
  a data set that exceeds this limit, the chart displays the first 25,000 data points,
  and a warning message indicates that the chart is incomplete.
- Funnel charts are used to measure values across sequential stages in a linear process.
- Tooltips are featured in all visualization types but are not customizable in gauge
  charts and Sankey diagrams.
- Users must have Edit Workbook and/or Explore Workbook permission enabled.
- Default minimum value is zero if not configured.
- The ability to format chart legends requires an account type with Full explore and/or
  Create, edit, and publish workbooks permission.
- Geography maps support datasets with geography data (WKT format) or variant data
  (GeoJSON format).
- Ensure OAuth scopes are correctly assigned.
- Rate limit applies to API calls.
- To use this feature, you must have Can edit or Can explore access to the individual
  workbook.
- The chart must support trend lines. Trellised charts, stacked charts, and charts
  with values plotted on the Color field do not support trend lines.
- When adding filters, controls, or parameters to your workbook, data model, or dataset,
  consider best practices for consistency and lineage.
- On Databricks connections, the longitude value `180` is not valid. It is equivalent
  to the longitude value `-180`.
- The ability to create and format trellis charts requires Can edit or Can explore
  access to the individual workbook.
- The ability to format chart legends requires the user to be assigned an account
  type with the Full explore and/or Create, edit, and publish workbooks permission
  enabled.
- The user must be the workbook owner or be granted Can explore or Can edit workbook
  permission.
- You must specify the target before a control can filter relevant data elements.
- You must have Can edit or Can explore access to the workbook.
- To create a drill control, your account must have Can Edit access to the workbook.
- The activities described on this page are only available in Edit mode.
- Sigma requires an aggregated column for Top N.
- Top N applies only to columns of type text, number, or date.
- Must have Can Edit access to the workbook.
- Assigned an account type with the Create, edit, and publish workbooks permission
  enabled.
- Add a filter to parent or source elements to keep data filtering consistent and
  lineage clear.
- Target controls to child elements of materialized data to avoid invalidating a materialization.
- You must be assigned an account type with the Full explore or Create, edit, and
  publish workbooks permission enabled.
- You must be the workbook owner or be granted Can explore or Can edit access to the
  workbook.
- You cannot apply more than one data element filter to a column.
- If you want to filter one column multiple times, you must combine a data element
  filter with other filters.
- A drill down control cannot be required.
- Users must specify the target before a control can filter relevant data elements.
- 'The ability to customize the style of workbook elements requires the following:
  You must be assigned an account type with the Explore workbook and/or Create, edit,
  and publish workbooks permission enabled.'
- You must be editing or customizing the workbook to configure custom sort.
- You can only limit the display values of Text columns. Other data types, such as
  Number or Date, are not supported.
- If you change the sort order of the column used for to limit the display values,
  the values in the 'Others' category change according to the sort because the Rank
  and RankDense functions rely on the sort order.
- Requires OAuth2 configuration for app
- Some fields may be nullable
- Do not use a calculated column as a primary key column.
- If using input tables on an OAuth-enabled connection, see Configure OAuth with write
  access for additional requirements.
- If using input tables on an Amazon Redshift connection, the enable_case_sensitive_identifier
  configuration value in Redshift must be set to false.
- Data entry permission affects the ability to add or edit data in existing input
  table columns.
- Input table edits can be unsuccessful due to configuration or availability issues
  in the connection or data platform.
- Data governance features allow you to preserve data integrity and enhance the security
  of input tables.
- Sigma only supports data validation for text, number, and date columns. Data validation
  doesn’t apply to checkbox data columns because Sigma already restricts the values
  to true (selected) or false (cleared).
- Sigma supports data validation against up to 100,000 values.
- Customize data entry permission on input tables
- System-generated row IDs are irrelevant to linked input tables and only available
  for empty and CSV input tables.
- You must be the owner or have Can edit or Can explore permissions on the workbook.
- When you nest containers or tabbed containers, you can only nest four levels deep.
- Hiding individual tabs is not supported.
- When exporting from a workbook with a tabbed container, the export always renders
  the first tab.
- Must be editing or customizing the workbook to configure custom sort.
- Sigma does not currently support nesting popovers inside other popovers.
- Input tables are dynamic workbook elements that support structured data entry.
- Actions are user-defined interactivity that you can configure within and across
  workbook elements.
- Actions are not initiated when a trigger element is maximized. This behavior prevents
  users from triggering action effects that are not visible while the maximized element
  spans the full browser window.
- This feature isn't supported by all data platform connections. To check if your
  connection supports it, see Supported data platforms and feature compatibility.
- API requires authentication
- Users must be assigned an account type with the Full explore or Create, edit, and
  publish workbooks permission enabled.
- 'The ability to configure actions requires the following: You must be assigned an
  account type with the Full explore or Create, edit, and publish workbooks permission
  enabled.'
- Input table edits can be unsuccessful due to configuration or availability issues
  in the connection or data platform
- Some API calls may return nulls in certain fields
- Data governance features (data validation and data entry permissions) allow you
  to preserve data integrity and enhance the security of input tables.
- You can also include system-generated columns (row edit history and row ID) to surface
  input table metadata for auditing and other data management purposes.
- Create actions that modify input table data
- The Update row(s) and Delete row(s) actions are public beta features that are currently
  in development. The sections describing the Update row(s) and Delete row(s) actions
  should not be considered official published documentation until Sigma removes this
  notice and the beta flags on the corresponding features in the Sigma service.
- Sigma only supports data validation for text, number, and date columns.
- Data validation doesn’t apply to checkbox data columns because Sigma already restricts
  the values to true (selected) or false (cleared).
- This documentation describes one or more public beta features that are in development.
  Beta features are subject to quick, iterative changes; therefore the current user
  experience in the Sigma service can differ from the information provided in this
  page.
- The ability to create and build input tables is always restricted to the draft version,
  meaning only users granted **Can edit** workbook permission can add new input tables
  to the workbook and modify the table structure.
- Add system-generated columns to input tables
- This action can only be configured and triggered by users assigned an account type
  with the Export to Slack permission enabled.
- This action can only be configured and triggered by users assigned an account type
  with the Export to Microsoft Teams and SharePoint permission enabled.
- This action can only be configured and triggered by users assigned an account type
  with the Export to webhook permission enabled.
- This action can only be configured and triggered by users assigned an account type
  with the Export to cloud permission enabled.
- This workbook action is only relevant for embedded workbooks.
- Users must be assigned an account type with Full explore or Create, edit, and publish
  workbooks permission enabled.
- Only BigQuery, PostgreSQL, Redshift, and Snowflake are supported.
- The stored procedure must be contained in a schema that is indexed by Sigma (available
  through the connection in the data catalog). Do not place any stored procedures
  in the same schema used for write back.
- Requires setup of Redshift connection and stored procedure access.
- The Trigger plugin action is not guaranteed to execute sequentially.
- Paused sequences automatically resume when the workbook is refreshed.
- You must be in Edit or Explore mode for the workbook.
- You must be the workbook owner or have Can explore or Can edit workbook access.
- Interacting users can only view the destination document if granted permission to
  access it.
- Custom views allow you to interact with your workbook and make changes, without
  affecting the published version of your workbook.
- All users can create custom views, but the options available depend on individual
  account permissions.
- This action doesn’t refresh the data if the element is materialized.
- Saved views are not recommended as a version control tool.
- There is a limit of 10 shared views for each version of a workbook.
- Users must have Can view access to a workbook or data model to see column details.
- The Update row(s) and Delete row(s) actions are public beta features that are currently
  in development.
- Create actions that generate embed iframe events
- The ability to configure actions requires an account type with Full explore or Create,
  edit, and publish workbooks permission.
- API requires authentication for access.
- To avoid causing an infinite loop, do not configure an action sequence containing
  the same plugin as both the trigger and target element.
- Keyboard navigation as a trigger interaction can disrupt the user experience.
- Only users with Can edit or Can explore access to the workbook can drill up or down
  into a chart.
- To customize the drill down column list for a chart, you must have Can edit access.
- The stored procedure must be contained in a schema that is indexed by Sigma.
- Users must be assigned an account type with Can comment on workbooks permission
  enabled.
- Annotated images expire after 90 days by default.
- Sigma deletes images within 24 hours of expiration.
- These requirements only apply to users who configure cross-element filters. Configured
  cross-element filters are applied to the interactions of any user who can view the
  workbook.
- Any user can search for documents, but you can only see documents you have been
  granted at least Can view access to.
- Ensure that you have configured AI features for your organization.
- Build if/else control flow in an action sequence (Beta)
- Custom views allow ad hoc data analysis without affecting the published version.
- Users can create custom views but options depend on individual account permissions.
- You must be assigned an account type with the Share documents permission enabled.
- You must be the folder owner or be granted Can manage access to the folder.
- Saved views depend on the underlying workbook.
- There is a limit of 10 shared views for each version of a workbook. There is no
  limit on personal views.
- The ability to share workbook templates requires an account type with the Share
  documents permission enabled.
- Some API responses may include null values
- Admin account type required for sharing or accepting templates.
- When executing a scheduled export or direct download to PDF or PNG formats, Sigma
  may store applicable control values as URL parameters in trace logs used for debugging
  and troubleshooting purposes. Exercise caution when exporting or downloading workbook
  content that uses controls to filter sensitive data.
- Additional requirements might apply depending on the export destination.
- To use drill anywhere, you must have Can edit or Can explore access to the workbook.
- If your organization restricts email traffic sent from specific IP addresses, add
  198.37.153.185 and 134.128.103.81 to the allowlist.
- The size limit for emailed exports is 30MB.
- The Slack integration must be enabled for your organization.
- One Sigma organization can only connect to one Slack workspace.
- If you want to send notifications to a private channel, you must also add Sigma
  to the private channel.
- Exports overwrite the same sheet each time the schedule runs.
- Only workbook elements are supported for export.
- To view and add comments in workbooks, you must be assigned an account type with
  the Can comment on workbooks permission enabled.
- The ability to export to Google Drive requires an account type with the Export to
  Google Drive permission enabled.
- You must be a Manager, Content manager, or Contributor of the specified Google Drive
  folder.
- By default, images expire after 90 days.
- Comments with deleted annotated images show a placeholder where the images used
  to be.
- Data exported from Sigma is directly unloaded from Snowflake or Redshift to your
  cloud storage destination as a single file. As a result, the data does not have
  the same formatting visible in Sigma.
- The use of AI features is subject to the following disclaimer.
- This feature does not currently support export to authenticated endpoints.
- When you share a document with someone, they are also granted View access to the
  data in the connection data sources.
- The control that you split by must be a list control with values sourced from a
  column.
- Unsubscribing to email bursts with dynamic recipients is not supported.
- The size limit for exports to Microsoft Teams is 1GB per file.
- You cannot send a notification to a private channel.
- The Microsoft integration must be enabled for your organization.
- To send notifications to a channel, you must also add Sigma to the channel.
- Cross-org sharing requires admin account type.
- You cannot export directly to a document or page library in a Site, but you can
  export to a folder within a document library.
- You cannot export to a personal SharePoint folder.
- When executing a scheduled export or direct download to PDF or PNG formats, Sigma
  may store applicable control values as URL parameters in trace logs used for debugging
  and troubleshooting purposes.
- Export frequency might be restricted for your organization.
- If a scheduled export fails more than 10 times consecutively, Sigma pauses the export
  schedule and the owner of the schedule receives an email notification.
- The ability to add conditions to scheduled exports requires specific account permissions.
- You must be assigned an account type with the Full explore permission enabled.
- You must be the workbook owner or be granted Can explore or Can edit workbook permission.
- 1 million row export limit for most exports.
- If you export a pivot table, the 1 million row limit applies to the flattened table.
- If you export to cloud storage, the 1 million row limit does not apply.
- Uses OAuth2 for authentication.
- The size limit for emailed exports is 30MB. This is the total limit for all attachments
  when combined.
- The size limit for exports to Slack is 1GB per file.
- This function isn't compatible with all data platform connections.
- Exports to Google Sheets overwrite the same sheet each time the schedule runs.
- If you don't have the option to set a specific frequency, export frequency might
  be restricted for your organization.
- You must be assigned an account type with the Export to Google Drive permission
  enabled.
- Data exported from Sigma is directly unloaded from Snowflake or Redshift to your
  cloud storage destination as a single file.
- The export contains published workbook content only. Draft changes aren't reflected.
- Counts number of rows in a table.
- The CountDistinctIf function returns the number of unique values within a column
  or group for which all given conditions are true. Duplicate and Null or empty values
  are skipped.
- 'You cannot export to a personal SharePoint folder. Personal SharePoint folder URLs
  are formatted like: -my.sharepoint.com.'
- Options that are not applicable based on your export configurations will appear
  greyed out.
- If you don't have the option to set a custom frequency, export frequency might be
  restricted for your organization.
- Staggering schedules helps to reduce the load on Sigma and on the data warehouse.
- Sort the initial input column of values to subsequently sort the resulting aggregated
  list. If no sort is applied to the initial column, the resulting list's order of
  values will be unpredictable.
- 'The ability to format PDF exports requires the following: You must be assigned
  an account type with the Full explore permission enabled.'
- The maximum for strings is determined by sort order, which is affected by your database
  settings.
- Sort order is most often blank spaces > special characters > numbers > uppercase
  letters > lowercase letters.
- Sigma has a 1 million row export limit for most exports.
- If your data exceeds the limit, Sigma truncates the data to 1 million rows.
- The 1 million row limit does not apply when exporting to cloud storage.
- For PDFs, the maximum of 1,000 rows per table applies to tables and pivot tables.
- By default, table and pivot tables in exported PDFs only display the number of rows
  that appear on a dashboard.
- If there is an even number of values, Median interpolates between the middle values.
- The minimum of strings is determined by sort order, which is affected by your database
  settings.
- The PercentileDisc function calculates the discrete kth percentile value for a column
  or group.
- This function must be used with aggregated data in a grouped table.
- The function returns null if the arguments used provide only a single data point.
- This function is not available for use in datasets.
- When performing numeric operations on values, such as using the addition operator
  + to sum together values, if one value is Null then the result of the entire numeric
  operation will be Null.
- Sort the initial input column of values to subsequently sort the resulting aggregated
  list.
- If no sort is applied to the initial column, the resulting list's order of values
  will be unpredictable.
- Sigma calls the underlying CDW or DBMS function that uses the statistical sample
  variance definition. Refer to your CDW or DBMS provider’s documentation for details
  about the called function.
- VariancePop assumes your dataset represents an entire population. If the dataset
  is a sample of a larger population, use the Variance function to estimate unbiased
  variance.
- The maximum for strings is determined by sort order, which is affected by your database
  settings. Sort order is most often blank spaces > special characters > numbers >
  uppercase letters > lowercase letters.
- For numbers, preceding and trailing zeroes often have no affect on sort order.
- This function isn't compatible with all data platform connections. To check if your
  connection supports it, see Supported data platforms and feature compatibility.
- The function isn't compatible with all data platform connections. To check if your
  connection supports it, see Supported data platforms and feature compatibility.
- The ArrayLength function returns the number of entries in a list.
- This feature isn't supported in all regions. To check if it is supported in your
  region, see Supported data platforms and feature compatibility.
- OAuth2 requires setup of connected app in Sigma
- When the amount argument is a decimal value, the function rounds the input to the
  nearest integer.
- Sigma rounds the result to the nearest integer.
- If the ending date precedes the starting date, the output is a negative integer.
- This feature isn't supported in all regions.
errors:
- '401 unauthorized: We cannot verify your identity. Please try again later.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Timeout: Request times out if still running after 2 minutes.'
- Ensure that the tables you swap are from the same connection and correct schema.
- Slow load times and query timeouts are common when the warehouse struggles to respond.
- Ensure tables swapped in templates are from the same connection and correct schema.
- 'SQL compilation error: object doesn''t exist or is not authorized'
- '403 Forbidden: Check user access permissions.'
- '404 Not Found: Verify the provided Snowflake connection details.'
- 'execution error: failed to execute query: unexpected operation state ERROR_STATE:
  [INSUFFICIENT_PERMISSIONS] Insufficient privileges: User does not have <REQUIRED_PRIVILEGE>
  on <OBJECT_TYPE><OBJECT_NAME>. SQLSTATE: 42501'
- Databricks access token is invalid or expired.
- Invalid Databricks access token.
- enable_case_sensitive_identifier must be off
- Role does not exist
- '000606 (57P03): No active warehouse selected in the current session. Select an
  active warehouse with the ''use warehouse'' command.'
- '002003 (42S02): SQL compilation error: Object <OBJECT_NAME> does not exist or not
  authorized.'
- '003001 (42501): SQL access control error: Insufficient privileges to operate on
  schema <SCHEMA_NAME>'
- '390101 (08004): User access disabled. Contact your local system administrator.'
- 'Unknown column [columnID]: Check if the column exists.'
- 'Column [ColumnID] does not exist: Verify the column name.'
- 'Reference to errored column: [columnID]: Ensure correct mapping.'
- 'INSUFFICIENT_PERMISSIONS: User does not have <REQUIRED_PRIVILEGE> on <OBJECT_TYPE><OBJECT_NAME>.'
- enable_case_sensitive_identifier must be off.
- Role does not exist.
- No active warehouse selected in the current session.
- 'SQL compilation error: Object <OBJECT_NAME> does not exist or not authorized.'
- 'SQL access control error: Insufficient privileges to operate on schema <SCHEMA_NAME>.'
- User access disabled. Contact your local system administrator.
- 'Unknown column [columnID]: Check the data model for changes.'
- 'Column [ColumnID] does not exist: Ensure the column is present in the source.'
- 'No access: Restricted columns are not visible to users without appropriate permissions.'
- '401 Unauthorized: Check OAuth token and permissions'
- 'RATE_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Check API key and permissions.'
- '403 Forbidden: Access to the resource is not allowed.'
- '500 Internal Server Error: Try again later.'
- An error appears if selected column has more than 200 unique values.
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Ensure API key is valid.'
- Limit of 200 unique row values can be transposed from a single column.
- '404 Not Found: Check the endpoint path.'
- '500 Internal Server Error: Retry or contact support.'
- If you receive this error, consider narrowing your question parameters.
- If your semantic view defines two dimensions with the same name, attempts to query
  it fail with an error.
- Some data structures cannot be materialized.
- Materialization fails to run if your data contains one or more columns that use
  a system function.
- '401 Unauthorized: Check OAuth token.'
- '403 Forbidden: Check permissions.'
- '404 Not Found: Verify endpoint path.'
- '401 Unauthorized: Check your authentication credentials.'
- 'Failed: The view couldn’t be created or updated.'
- '401 Unauthorized: Check your OAuth token.'
- '403 Forbidden: Ensure you have the correct permissions.'
- 'error Errored: An error has occurred when running the query.'
- '25,000 data point limit exceeded: reaggregate or apply data filters to reduce data
  points.'
- '400 Bad Request: Check your input data and parameters.'
- '401 Unauthorized: Verify your OAuth token.'
- '429 Too Many Requests: Rate limit exceeded.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify credentials.'
- 'INVALID_CREDENTIALS: Check your client ID and secret'
- 'TOKEN_EXPIRED: Refresh your access token'
- '403 FORBIDDEN: Ensure you have the necessary permissions'
- 'Editing restricted: Contact your Sigma organization admin to resolve the issue.'
- '403 Forbidden: Check your permissions.'
- '404 Not Found: Verify the endpoint or resource ID.'
- Cannot nest more than 4 levels of layouts
- Cannot nest more than 4 levels of layouts.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'Request for access: User requests access to content they do not have permissions
  for.'
- Scheduled exports that repeatedly exceed the export limit are automatically paused
  and their owner notified.
- If the Slack option is not available, the workbook is in Edit mode. Either publish
  your draft or return to the latest published or tagged version of the workbook before
  attempting to export.
- Export limit of 1 million rows.
- If an export exceeds the size limit, the entire export fails and the owner of the
  scheduled export is notified.
- Scheduled exports that repeatedly exceed the size limit are automatically paused.
- Document export failed. Sigma has paused one of your scheduled exports.
- An error occurs if the limit is exceeded.
- An error occurs if the export leads the Google Sheet to become larger than 10 million
  cells.
- An error occurs if the limit is exceeded for Slack and Microsoft Teams files.
- No users found in organization for the provided email recipients
- 'EXPORT_LIMIT_EXCEEDED: Throttle export frequency or reduce size'
- '401 Unauthorized: Recheck permissions or role configuration'
- 'Export exceeds size limit: The entire export fails and the owner of the scheduled
  export is notified.'
- 'Email address contains a domain that''s not allowed: Sigma notifies you if an email
  address contains a domain that''s not allowed.'
- An error occurs if the limit is exceeded for email attachments.
- An error occurs if the limit is exceeded for Google Sheets.
- An error occurs if the limit is exceeded for Slack files.
- An error occurs if the limit is exceeded for Microsoft Teams files.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuthToken
  - UserAttribute
  - Team
  - DataModel
client:
  base_url: https://www.sigmacomputing.com
  auth:
    type: oauth2
source_metadata: null
