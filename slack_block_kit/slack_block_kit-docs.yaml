resources:
- name: video
  endpoint:
    path: /services/data/vXX.X/sobjects/Video
    method: GET
    data_selector: records
- name: Actions block
  endpoint:
    path: /blocks/actions
    method: GET
    data_selector: blocks
    params: {}
- name: Context block
  endpoint:
    path: /blocks/context
    method: GET
    data_selector: blocks
    params: {}
- name: Divider block
  endpoint:
    path: /blocks/divider
    method: GET
    data_selector: blocks
    params: {}
- name: File block
  endpoint:
    path: /blocks/file
    method: GET
    data_selector: blocks
    params: {}
- name: Header block
  endpoint:
    path: /blocks/header
    method: GET
    data_selector: blocks
    params: {}
- name: Image block
  endpoint:
    path: /blocks/image
    method: GET
    data_selector: blocks
    params: {}
- name: Input block
  endpoint:
    path: /blocks/input
    method: GET
    data_selector: blocks
    params: {}
- name: Markdown block
  endpoint:
    path: /blocks/markdown
    method: GET
    data_selector: blocks
    params: {}
- name: Rich text block
  endpoint:
    path: /blocks/rich_text
    method: GET
    data_selector: blocks
    params: {}
- name: Section block
  endpoint:
    path: /blocks/section
    method: GET
    data_selector: blocks
    params: {}
- name: Video block
  endpoint:
    path: /blocks/video
    method: GET
    data_selector: blocks
    params: {}
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: video_data
- name: rich_text
  endpoint:
    path: /rich_text
    method: GET
    data_selector: rich_text_data
- name: section
  endpoint:
    path: /section
    method: GET
    data_selector: section_data
- name: events
  endpoint:
    path: /events-api
    method: POST
- name: web
  endpoint:
    path: /web
    method: POST
- name: conversations
  endpoint:
    path: /conversations-api
    method: POST
- name: oauth.v2.exchange
  endpoint:
    path: /api/oauth.v2.exchange
    method: POST
    data_selector: ok
    params: {}
- name: oauth.v2.access
  endpoint:
    path: /api/oauth.v2.access
    method: POST
    data_selector: authed_user
    params: {}
- name: auth.revoke
  endpoint:
    path: /api/auth.revoke
    method: POST
    data_selector: ok
    params: {}
- name: apps.uninstall
  endpoint:
    path: /api/apps.uninstall
    method: POST
    data_selector: ok
    params: {}
- name: OAuth Authorization
  endpoint:
    path: /oauth/v2/authorize
    method: GET
- name: openid_authorize
  endpoint:
    path: /openid/connect/authorize
    method: GET
    data_selector: response
    params:
      scope: openid profile email
      response_type: code
- name: openid_token
  endpoint:
    path: /openid.connect.token
    method: POST
    data_selector: response
    params: {}
- name: openid_userinfo
  endpoint:
    path: /api/openid.connect.userInfo
    method: GET
    data_selector: response
    params: {}
- name: links.accountLinkedResult
  endpoint:
    path: /api/links.accountLinkedResult
    method: POST
    data_selector: result
- name: openid.connect.token
  endpoint:
    path: /openid.connect.token
    method: POST
    data_selector: id_token
- name: GetSlackChannelAction
  endpoint:
    path: /auth.teams.list
    method: GET
- name: SendSlackMessageAction
  endpoint:
    path: /chat.postMessage
    method: POST
- name: Slack API
  endpoint:
    path: /api
    method: GET
    data_selector: records
- name: get_channel
  endpoint:
    path: /methods/conversations.list
    method: GET
    data_selector: channels
- name: send_message
  endpoint:
    path: /methods/chat.postMessage
    method: POST
    data_selector: message
- name: assistant_thread_started
  endpoint:
    path: /events/assistant_thread_started
    method: POST
- name: assistant_thread_context_changed
  endpoint:
    path: /events/assistant_thread_context_changed
    method: POST
- name: message.im
  endpoint:
    path: /events/message.im
    method: POST
- name: assistant.search.context
  endpoint:
    path: /methods/assistant.search.context
    method: POST
    data_selector: results.messages
- name: conversations
  endpoint:
    path: /conversations.list
    method: GET
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: result
- name: chat_deleteScheduledMessage
  endpoint:
    path: /chat.deleteScheduledMessage
    method: POST
    data_selector: result
- name: chat_scheduleMessage
  endpoint:
    path: /chat.scheduleMessage
    method: POST
    data_selector: scheduled_message_id
- name: chat_scheduledMessages_list
  endpoint:
    path: /chat.scheduledMessages.list
    method: POST
    data_selector: scheduled_messages
- name: chat_deleteScheduledMessage
  endpoint:
    path: /chat.deleteScheduledMessage
    method: POST
    data_selector: ok
- name: conversations_list
  endpoint:
    path: /conversations.list
    method: GET
    data_selector: channels
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: ok
- name: chat_scheduleMessage
  endpoint:
    path: /chat.scheduleMessage
    method: POST
    data_selector: ok
- name: chat.scheduleMessage
  endpoint:
    path: /chat.scheduleMessage
    method: POST
    data_selector: ok
    params: {}
- name: chat.scheduledMessages.list
  endpoint:
    path: /chat.scheduledMessages.list
    method: POST
    data_selector: scheduled_messages
    params: {}
- name: chat.deleteScheduledMessage
  endpoint:
    path: /chat.deleteScheduledMessage
    method: POST
    data_selector: ok
    params: {}
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: result
- name: chat_deleteScheduledMessage
  endpoint:
    path: /chat.deleteScheduledMessage
    method: POST
    data_selector: result
- name: send_message
  endpoint:
    path: /api/chat.postMessage
    method: POST
- name: chat.scheduleMessage
  endpoint:
    path: /chat.scheduleMessage
    method: POST
    data_selector: ok
    params: {}
- name: chat.scheduledMessages.list
  endpoint:
    path: /chat.scheduledMessages.list
    method: POST
    data_selector: scheduled_messages
    params: {}
- name: chat.deleteScheduledMessage
  endpoint:
    path: /chat.deleteScheduledMessage
    method: POST
    data_selector: ok
    params: {}
- name: conversations_list
  endpoint:
    path: /conversations.list
    method: GET
    data_selector: channels
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: ok
- name: chat_scheduleMessage
  endpoint:
    path: /chat.scheduleMessage
    method: POST
    data_selector: ok
- name: conversations_list
  endpoint:
    path: /api/conversations.list
    method: GET
- name: chat_postMessage
  endpoint:
    path: /api/chat.postMessage
    method: POST
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: message
    params:
      channel: YOUR_CHANNEL_ID
      text: Hey, team. Don't forget about breakfast catered by John Hughes Bistro
        today.
- name: chat_scheduleMessage
  endpoint:
    path: /chat.scheduleMessage
    method: POST
    data_selector: scheduled_message
    params:
      channel: C12345
      text: Looking towards the future
      post_at: Unix Epoch timestamp
- name: conversations_list
  endpoint:
    path: /conversations.list
    method: GET
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
- name: chat_scheduleMessage
  endpoint:
    path: /chat.scheduleMessage
    method: POST
- name: conversations_list
  endpoint:
    path: /api/conversations.list
    method: GET
- name: chat_postMessage
  endpoint:
    path: /api/chat.postMessage
    method: POST
- name: chat_scheduleMessage
  endpoint:
    path: /api/chat.scheduleMessage
    method: POST
- name: chat.scheduleMessage
  endpoint:
    path: /chat.scheduleMessage
    method: POST
    data_selector: ok
- name: chat.scheduledMessages.list
  endpoint:
    path: /chat.scheduledMessages.list
    method: POST
    data_selector: scheduled_messages
- name: chat.deleteScheduledMessage
  endpoint:
    path: /chat.deleteScheduledMessage
    method: POST
    data_selector: ok
- name: chat_scheduleMessage
  endpoint:
    path: /chat.scheduleMessage
    method: POST
    data_selector: scheduled_message_id
- name: scheduled_messages_list
  endpoint:
    path: /chat.scheduledMessages.list
    method: GET
    data_selector: scheduled_messages
    params: {}
- name: delete_scheduled_message
  endpoint:
    path: /chat.deleteScheduledMessage
    method: POST
    data_selector: result
    params: {}
- name: conversations_list
  endpoint:
    path: /conversations.list
    method: GET
    data_selector: channels
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: ok
- name: chat_scheduleMessage
  endpoint:
    path: /chat.scheduleMessage
    method: POST
    data_selector: ok
- name: chat.scheduleMessage
  endpoint:
    path: /chat.scheduleMessage
    method: POST
    data_selector: result
- name: chat.scheduledMessages.list
  endpoint:
    path: /chat.scheduledMessages.list
    method: POST
    data_selector: scheduled_messages
- name: chat.deleteScheduledMessage
  endpoint:
    path: /chat.deleteScheduledMessage
    method: POST
    data_selector: result
- name: scheduled_messages
  endpoint:
    path: /chat/scheduledMessages/list
    method: GET
    data_selector: result
    params:
      latest: latest
      oldest: oldest
- name: delete_message
  endpoint:
    path: /chat.scheduledMessages.delete
    method: POST
    data_selector: result
    params:
      message_id: U12345
- name: messages
  endpoint:
    path: /api/conversations.history
    method: GET
- name: conversations_list
  endpoint:
    path: /conversations.list
    method: GET
    data_selector: channels
- name: conversations_history
  endpoint:
    path: /conversations.history
    method: GET
    data_selector: messages
- name: messages
  endpoint:
    path: /conversations.replies
    method: GET
    data_selector: messages
- name: chat_delete
  endpoint:
    path: /methods/chat.delete
    method: POST
- name: chat.update
  endpoint:
    path: /api/chat.update
    method: POST
- name: chat.update
  endpoint:
    path: /api/chat.update
    method: POST
- name: chat.delete
  endpoint:
    path: /chat.delete
    method: POST
    data_selector: result
- name: files
  endpoint:
    path: /api/files.upload
    method: POST
    data_selector: file
    params: {}
- name: files.remote.add
  endpoint:
    path: /files.remote.add
    method: POST
    data_selector: file
    params: {}
- name: files.remote.share
  endpoint:
    path: /files.remote.share
    method: POST
    data_selector: file
    params: {}
- name: files.remote.update
  endpoint:
    path: /files.remote.update
    method: POST
    data_selector: file
    params: {}
- name: files.remote.remove
  endpoint:
    path: /files.remote.remove
    method: POST
    data_selector: file
    params: {}
- name: files.remote.info
  endpoint:
    path: /files.remote.info
    method: GET
    data_selector: file
    params: {}
- name: chat_postMessage
  endpoint:
    path: /api/chat.postMessage
    method: POST
    data_selector: messages
    params: {}
- name: conversations_history
  endpoint:
    path: /api/conversations.history
    method: GET
    data_selector: messages
    params:
      include_all_metadata: 'true'
- name: metadata
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: event_payload
    params: {}
- name: webhook
  endpoint:
    path: /services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX
    method: POST
    data_selector: text
- name: link_shared_event
  endpoint:
    path: /events/link_shared
    method: POST
    data_selector: event
- name: chat_unfurl
  endpoint:
    path: /methods/chat.unfurl
    method: POST
    data_selector: ok
- name: interaction_payloads
  endpoint:
    path: /api/interaction_payloads
    method: POST
    data_selector: payload
    params: {}
- name: shortcuts
  endpoint:
    path: /interactivity/shortcuts
    method: POST
    data_selector: shortcuts
- name: shortcuts
  endpoint:
    path: /api/shortcuts
    method: POST
    data_selector: shortcuts
- name: slash_command
  endpoint:
    path: /apps/slash_commands
    method: POST
    data_selector: command
    params:
      token: gIkuvaNzQIHg97ATvDxqgjtO
      team_id: T0001
      enterprise_id: E0001
      channel_id: C2147483705
      user_id: U2147483697
      command: /weather
      text: '94070'
      response_url: https://hooks.slack.com/commands/1234/5678
      trigger_id: 13345224609.738474920.8088930838d88f008e0
      api_app_id: A123456
- name: usergroups_addChannels
  endpoint:
    path: /methods/admin.usergroups.addChannels
    method: POST
    data_selector: response
- name: usergroups_removeChannels
  endpoint:
    path: /methods/admin.usergroups.removeChannels
    method: POST
    data_selector: response
- name: usergroups_listChannels
  endpoint:
    path: /methods/admin.usergroups.listChannels
    method: GET
    data_selector: response
- name: usergroups_addTeams
  endpoint:
    path: /methods/admin.usergroups.addTeams
    method: POST
    data_selector: response
- name: users_session_reset
  endpoint:
    path: /methods/admin.users.session.reset
    method: POST
    data_selector: response
- name: admin.teams.create
  endpoint:
    path: /methods/admin.teams.create
    method: POST
- name: invite_user
  endpoint:
    path: /admin.users.invite
    method: POST
    params:
      channel_ids: ''
      is_restricted: ''
      is_ultra_restricted: ''
- name: assign_user
  endpoint:
    path: /admin.users.assign
    method: POST
    params:
      is_restricted: ''
      is_ultra_restricted: ''
- name: remove_user
  endpoint:
    path: /admin.users.remove
    method: POST
- name: set_admin
  endpoint:
    path: /admin.users.setAdmin
    method: POST
- name: set_owner
  endpoint:
    path: /admin.users.setOwner
    method: POST
- name: set_regular_user
  endpoint:
    path: /admin.users.setRegular
    method: POST
- name: list_owners
  endpoint:
    path: /admin.teams.owners.list
    method: GET
- name: list_admins
  endpoint:
    path: /admin.teams.admins.list
    method: GET
- name: list_regular_users
  endpoint:
    path: /admin.users.list
    method: GET
- name: add_role_assignment
  endpoint:
    path: /admin.roles.addAssignments
    method: POST
- name: remove_role_assignment
  endpoint:
    path: /admin.roles.removeAssignments
    method: POST
- name: list_role_assignments
  endpoint:
    path: /admin.roles.listAssignments
    method: GET
- name: add_private_channel_allowlist
  endpoint:
    path: /admin.conversations.restrictAccess.addGroup
    method: POST
- name: remove_private_channel_allowlist
  endpoint:
    path: /admin.conversations.restrictAccess.removeGroup
    method: POST
- name: list_private_channel_allowlists
  endpoint:
    path: /admin.conversations.restrictAccess.listGroups
    method: GET
- name: create_channel
  endpoint:
    path: /methods/admin.conversations.create
    method: POST
- name: delete_channel
  endpoint:
    path: /methods/admin.conversations.delete
    method: POST
- name: invite_users
  endpoint:
    path: /methods/admin.conversations.invite
    method: POST
- name: archive_channel
  endpoint:
    path: /methods/admin.conversations.archive
    method: POST
- name: unarchive_channel
  endpoint:
    path: /methods/admin.conversations.unarchive
    method: POST
- name: rename_channel
  endpoint:
    path: /methods/admin.conversations.rename
    method: POST
- name: search_channel
  endpoint:
    path: /methods/admin.conversations.search
    method: GET
- name: convert_to_private
  endpoint:
    path: /methods/admin.conversations.convertToPrivate
    method: POST
- name: convert_to_public
  endpoint:
    path: /methods/admin.conversations.convertToPublic
    method: POST
- name: set_permissions
  endpoint:
    path: /methods/admin.conversations.setConversationPrefs
    method: POST
- name: get_permissions
  endpoint:
    path: /methods/admin.conversations.getConversationPrefs
    method: GET
- name: set_teams
  endpoint:
    path: /methods/admin.conversations.setTeams
    method: POST
- name: get_teams
  endpoint:
    path: /methods/admin.conversations.getTeams
    method: GET
- name: disconnect_shared
  endpoint:
    path: /methods/admin.conversations.disconnectShared
    method: POST
- name: approve_app
  endpoint:
    path: /api/admin.apps.approve
    method: POST
- name: restrict_app
  endpoint:
    path: /api/admin.apps.restrict
    method: POST
- name: list_app_requests
  endpoint:
    path: /api/admin.apps.requests.list
    method: POST
- name: apps.activities
  endpoint:
    path: /methods/admin.apps.activities.list
    method: GET
- name: apps.approve
  endpoint:
    path: /methods/admin.apps.approve
    method: POST
- name: apps.clearResolution
  endpoint:
    path: /methods/admin.apps.clearResolution
    method: POST
- name: apps.restrict
  endpoint:
    path: /methods/admin.apps.restrict
    method: POST
- name: apps.uninstall
  endpoint:
    path: /methods/admin.apps.uninstall
    method: POST
- name: apps.approved.list
  endpoint:
    path: /methods/admin.apps.approved.list
    method: GET
- name: apps.requests.cancel
  endpoint:
    path: /methods/admin.apps.requests.cancel
    method: POST
- name: apps.requests.list
  endpoint:
    path: /methods/admin.apps.requests.list
    method: GET
- name: apps.restricted.list
  endpoint:
    path: /methods/admin.apps.restricted.list
    method: GET
- name: apps.config.lookup
  endpoint:
    path: /methods/admin.apps.config.lookup
    method: GET
- name: apps.config.set
  endpoint:
    path: /methods/admin.apps.config.set
    method: POST
- name: workflows.search
  endpoint:
    path: /methods/admin.workflows.search
    method: GET
- name: workflows.permissions.lookup
  endpoint:
    path: /methods/admin.workflows.permissions.lookup
    method: GET
- name: workflows.unpublish
  endpoint:
    path: /methods/admin.workflows.unpublish
    method: POST
- name: workflows.collaborators.add
  endpoint:
    path: /methods/admin.workflows.collaborators.add
    method: POST
- name: workflows.collaborators.remove
  endpoint:
    path: /methods/admin.workflows.collaborators.remove
    method: POST
- name: functions.list
  endpoint:
    path: /methods/admin.functions.list
    method: GET
- name: functions.permissions.lookup
  endpoint:
    path: /methods/admin.functions.permissions.lookup
    method: GET
- name: functions.permissions.set
  endpoint:
    path: /methods/admin.functions.permissions.set
    method: POST
- name: invite_requests
  endpoint:
    path: /api/invite.requests
    method: POST
- name: invite_requests
  endpoint:
    path: /api/admin.inviteRequests.list
    method: POST
- name: approve_invite_request
  endpoint:
    path: /api/admin.inviteRequests.approve
    method: POST
- name: deny_invite_request
  endpoint:
    path: /api/admin.inviteRequests.deny
    method: POST
- name: approved_invite_requests
  endpoint:
    path: /api/admin.inviteRequests.approved.list
    method: POST
- name: denied_invite_requests
  endpoint:
    path: /api/admin.inviteRequests.denied.list
    method: POST
- name: oversight.enterprise.info
  endpoint:
    path: /oversight.enterprise.info
    method: GET
- name: oversight.user.conversations
  endpoint:
    path: /oversight.user.conversations
    method: GET
- name: oversight.user.info
  endpoint:
    path: /oversight.user.info
    method: GET
- name: oversight.users.list
  endpoint:
    path: /oversight.users.list
    method: GET
- name: oversight.conversations.info
  endpoint:
    path: /oversight.conversations.info
    method: GET
- name: oversight.conversations.list
  endpoint:
    path: /oversight.conversations.list
    method: GET
- name: oversight.chat.info
  endpoint:
    path: /oversight.chat.info
    method: GET
- name: oversight.chat.delete
  endpoint:
    path: /oversight.chat.delete
    method: POST
- name: oversight.chat.tombstone
  endpoint:
    path: /oversight.chat.tombstone
    method: POST
- name: oversight.chat.restore
  endpoint:
    path: /oversight.chat.restore
    method: POST
- name: oversight.chat.update
  endpoint:
    path: /oversight.chat.update
    method: POST
- name: oversight.chat.tombstone
  endpoint:
    path: /oversight.chat.tombstone
    method: GET
    data_selector: message
    params:
      channel: C0123ABC456
      ts: '1569520591.000500'
      text: This message has been quarantined per DLP Policy 2.1.1
- name: oversight.chat.update
  endpoint:
    path: /oversight.chat.tombstone
    method: GET
    data_selector: message
    params:
      channel: C0123ABC456
      ts: '1569520591.000500'
      text: This message has been quarantined per DLP Policy 2.1.1
- name: legal_holds
  endpoint:
    path: /enterprise/legal-holds
    method: POST
    data_selector: legal_holds
    params: {}
- name: legal_holds_policies_info
  endpoint:
    path: /admin.legalHolds.policies.info
    method: POST
- name: legal_holds_policies_list
  endpoint:
    path: /admin.legalHolds.policies.list
    method: POST
- name: legal_holds_entities_list
  endpoint:
    path: /admin.legalHolds.entities.list
    method: POST
- name: legal_holds_policies_activate
  endpoint:
    path: /admin.legalHolds.policies.activate
    method: POST
- name: legal_holds_policies_create
  endpoint:
    path: /admin.legalHolds.policies.create
    method: POST
- name: legal_holds_policies_release
  endpoint:
    path: /admin.legalHolds.policies.release
    method: POST
- name: legal_holds_policies_set
  endpoint:
    path: /admin.legalHolds.policies.set
    method: POST
- name: legal_holds_entities_add
  endpoint:
    path: /admin.legalHolds.entities.add
    method: POST
- name: legal_holds_entities_remove
  endpoint:
    path: /admin.legalHolds.entities.remove
    method: POST
- name: activate_policy
  endpoint:
    path: /admin.legalHold.policies.activate
    method: POST
    data_selector: ok
    params:
      token: xxxx-xxxxxxxxx-xxxx
      policy_id: Hxxxxxxxxx
- name: create_policy
  endpoint:
    path: /admin.legalHold.policies.create
    method: POST
    data_selector: ok
    params:
      token: xxxx-xxxxxxxxx-xxxx
- name: info_policy
  endpoint:
    path: /admin.legalHold.policies.info
    method: POST
    data_selector: ok
    params:
      token: xxxx-xxxxxxxxx-xxxx
      policy_id: Hxxxxxxxxx
- name: list_policies
  endpoint:
    path: /admin.legalHold.policies.list
    method: POST
    data_selector: ok
    params:
      token: xxxx-xxxxxxxxx-xxxx
- name: release_policy
  endpoint:
    path: /admin.legalHold.policies.release
    method: POST
    data_selector: ok
    params:
      token: xxxx-xxxxxxxxx-xxxx
      policy_id: Hxxxxxxxxx
- name: set_policy
  endpoint:
    path: /admin.legalHold.policies.set
    method: POST
    data_selector: ok
    params:
      token: xxxx-xxxxxxxxx-xxxx
      policy_id: Hxxxxxxxxx
- name: add_entities
  endpoint:
    path: /admin.legalHold.entities.add
    method: POST
    data_selector: ok
    params:
      token: xxxx-xxxxxxxxx-xxxx
      policy_id: Hxxxxxxxxx
- name: list_entities
  endpoint:
    path: /admin.legalHold.entities.list
    method: POST
    data_selector: ok
    params:
      token: xxxx-xxxxxxxxx-xxxx
      policy_id: Hxxxxxxxxx
- name: remove_entities
  endpoint:
    path: /admin.legalHold.entities.remove
    method: POST
    data_selector: ok
    params:
      token: xxxx-xxxxxxxxx-xxxx
      policy_id: Hxxxxxxxxx
- name: admin.audit.anomaly.allow.updateItem
  endpoint:
    path: /admin.audit.anomaly.allow.updateItem
    method: POST
    params:
      token: xoxb-...
      trusted_asn: []
      trusted_cidr: []
- name: admin.audit.anomaly.allow.getItem
  endpoint:
    path: /admin.audit.anomaly.allow.getItem
    method: POST
    params:
      token: xoxb-...
- name: audit_logs
  endpoint:
    path: /admins/audit-logs
    method: GET
- name: logs
  endpoint:
    path: /audit/v1/logs
    method: GET
    params: {}
- name: Users
  endpoint:
    path: /Users
    method: POST
    data_selector: schemas
- name: users
  endpoint:
    path: /scim/v1/Users
    method: GET
    data_selector: Users
    params:
      startIndex: 1
      count: 10
- name: groups
  endpoint:
    path: /scim/v1/Groups
    method: GET
    data_selector: Groups
    params:
      startIndex: 1
      count: 10
- name: users
  endpoint:
    path: /Users
    method: GET
    data_selector: Resources
    params:
      count: '1000'
      startIndex: '4'
- name: user
  endpoint:
    path: /Users/<id>
    method: GET
    data_selector: Resource
    params: {}
- name: create_user
  endpoint:
    path: /Users
    method: POST
    data_selector: Resource
    params: {}
- name: update_user
  endpoint:
    path: /Users/<id>
    method: PATCH
    data_selector: Resource
    params: {}
- name: delete_user
  endpoint:
    path: /Users/<id>
    method: DELETE
    data_selector: Resource
    params: {}
- name: groups
  endpoint:
    path: /Groups
    method: GET
    data_selector: Resources
    params: {}
- name: group
  endpoint:
    path: /Groups/<id>
    method: GET
    data_selector: Resource
    params: {}
- name: create_group
  endpoint:
    path: /Groups
    method: POST
    data_selector: Resource
    params: {}
- name: update_group
  endpoint:
    path: /Groups/<id>
    method: PATCH
    data_selector: Resource
    params: {}
- name: delete_group
  endpoint:
    path: /Groups/<id>
    method: DELETE
    data_selector: Resource
    params: {}
- name: groups
  endpoint:
    path: /scim/v1/Groups
    method: PATCH
    data_selector: members
    params: {}
- name: groups
  endpoint:
    path: /scim/v1/Groups
    method: PUT
    data_selector: members
    params: {}
- name: groups
  endpoint:
    path: /scim/v1/Groups
    method: DELETE
    data_selector: null
    params: {}
- name: users
  endpoint:
    path: /Users
    method: GET
    data_selector: resources
- name: groups
  endpoint:
    path: /Groups
    method: GET
    data_selector: resources
- name: Users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: Resources
    params:
      startIndex: 1
      count: 1
- name: User by ID
  endpoint:
    path: /scim/v2/Users/<id>
    method: GET
    data_selector: Resources
- name: Create User
  endpoint:
    path: /scim/v2/Users
    method: POST
    data_selector: Resources
- name: Update User
  endpoint:
    path: /scim/v2/Users/<id>
    method: PUT
    data_selector: Resources
- name: PatchOp
  endpoint:
    path: /urn:ietf:params:scim:api:messages:2.0:PatchOp
    method: PATCH
    data_selector: schemas
    params: {}
- name: User
  endpoint:
    path: /urn:ietf:params:scim:schemas:extension:slack:profile:2.0:User
    method: PATCH
    data_selector: schemas
    params: {}
- name: Users
  endpoint:
    path: /Users/<id>
    method: PATCH
    data_selector: Operations
- name: groups
  endpoint:
    path: /scim/v2/Groups
    method: GET
    data_selector: Resources
    params:
      startIndex: '1'
      count: '1'
- name: group
  endpoint:
    path: /scim/v2/Groups/{id}
    method: GET
    data_selector: Resources
- name: create_group
  endpoint:
    path: /scim/v2/Groups
    method: POST
    data_selector: Resources
- name: update_group
  endpoint:
    path: /scim/v2/Groups/{id}
    method: PUT
    data_selector: Resources
- name: patch_group
  endpoint:
    path: /scim/v2/Groups/{id}
    method: PATCH
    data_selector: Resources
- name: delete_group
  endpoint:
    path: /scim/v2/Groups/{id}
    method: DELETE
    data_selector: Resources
- name: oauth_access
  endpoint:
    path: /api/oauth.access
    method: POST
    data_selector: access_token
- name: users_identity
  endpoint:
    path: /api/users.identity
    method: GET
    data_selector: user
- name: message
  endpoint:
    path: /messages
    method: POST
    data_selector: attachments
    params: {}
- name: interactive_message
  endpoint:
    path: /api/chat.postMessage
    method: POST
    data_selector: attachments
- name: interactive_messages
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: message
    params: {}
- name: bot_user_oauth_access_token
  endpoint:
    path: /auth.test
    method: GET
    data_selector: ok
- name: bot_info
  endpoint:
    path: /bots.info
    method: GET
    data_selector: bot
- name: api_test
  endpoint:
    path: /api.test
    method: GET
    data_selector: ok
- name: dialog_open
  endpoint:
    path: /api/dialog.open
    method: POST
    data_selector: ok
- name: select_element
  endpoint:
    path: /dialog/select
    method: POST
    data_selector: options
    params: {}
- name: dialog_submission
  endpoint:
    path: /dialog/submit
    method: POST
    data_selector: submission
    params: {}
- name: api_test
  endpoint:
    path: /methods/api.test
    method: GET
- name: auth_revoke
  endpoint:
    path: /methods/auth.revoke
    method: POST
- name: auth_test
  endpoint:
    path: /methods/auth.test
    method: GET
- name: bots_info
  endpoint:
    path: /methods/bots.info
    method: GET
- name: calls_add
  endpoint:
    path: /methods/calls.add
    method: POST
- name: calls_end
  endpoint:
    path: /methods/calls.end
    method: POST
- name: calls_info
  endpoint:
    path: /methods/calls.info
    method: GET
- name: calls_participants_add
  endpoint:
    path: /methods/calls.participants.add
    method: POST
- name: calls_participants_remove
  endpoint:
    path: /methods/calls.participants.remove
    method: POST
- name: calls_update
  endpoint:
    path: /methods/calls.update
    method: POST
- name: outgoing_webhooks
  endpoint:
    path: /legacy/custom-integrations/outgoing-webhooks
    method: GET
- name: workflow_step_execute
  endpoint:
    path: /events/workflow_step_execute
    method: POST
- name: workflow_step_edit
  endpoint:
    path: /events/workflow_step_edit
    method: POST
- name: workflows.updateStep
  endpoint:
    path: /methods/workflows.updateStep
    method: POST
- name: workflows.stepCompleted
  endpoint:
    path: /methods/workflows.stepCompleted
    method: POST
- name: workflows.stepFailed
  endpoint:
    path: /methods/workflows.stepFailed
    method: POST
- name: conversations.kick
  endpoint:
    path: /methods/conversations.kick
    method: GET
- name: conversations.leave
  endpoint:
    path: /methods/conversations.leave
    method: GET
- name: conversations.listConnectInvites
  endpoint:
    path: /methods/conversations.listConnectInvites
    method: GET
- name: conversations.mark
  endpoint:
    path: /methods/conversations.mark
    method: GET
- name: conversations.open
  endpoint:
    path: /methods/conversations.open
    method: GET
- name: conversations.rename
  endpoint:
    path: /methods/conversations.rename
    method: GET
- name: conversations.requestSharedInvite.approve
  endpoint:
    path: /methods/conversations.requestSharedInvite.approve
    method: GET
- name: conversations.requestSharedInvite.deny
  endpoint:
    path: /methods/conversations.requestSharedInvite.deny
    method: GET
- name: conversations.requestSharedInvite.list
  endpoint:
    path: /methods/conversations.requestSharedInvite.list
    method: GET
- name: conversations.setPurpose
  endpoint:
    path: /methods/conversations.setPurpose
    method: GET
- name: conversations.setTopic
  endpoint:
    path: /methods/conversations.setTopic
    method: GET
- name: conversations.unarchive
  endpoint:
    path: /methods/conversations.unarchive
    method: GET
- name: dialog.open
  endpoint:
    path: /methods/dialog.open
    method: GET
- name: dnd.endDnd
  endpoint:
    path: /methods/dnd.endDnd
    method: GET
- name: dnd.endSnooze
  endpoint:
    path: /methods/dnd.endSnooze
    method: GET
- name: dnd.setSnooze
  endpoint:
    path: /methods/dnd.setSnooze
    method: GET
- name: files.comments.delete
  endpoint:
    path: /methods/files.comments.delete
    method: GET
- name: files.completeUploadExternal
  endpoint:
    path: /methods/files.completeUploadExternal
    method: GET
- name: files.delete
  endpoint:
    path: /methods/files.delete
    method: GET
- name: files.revokePublicURL
  endpoint:
    path: /methods/files.revokePublicURL
    method: GET
- name: files.sharedPublicURL
  endpoint:
    path: /methods/files.sharedPublicURL
    method: GET
- name: functions.completeError
  endpoint:
    path: /methods/functions.completeError
    method: GET
- name: functions.completeSuccess
  endpoint:
    path: /methods/functions.completeSuccess
    method: GET
- name: functions.distributions.permissions.add
  endpoint:
    path: /methods/functions.distributions.permissions.add
    method: GET
- name: functions.distributions.permissions.list
  endpoint:
    path: /methods/functions.distributions.permissions.list
    method: GET
- name: functions.distributions.permissions.remove
  endpoint:
    path: /methods/functions.distributions.permissions.remove
    method: GET
- name: functions.distributions.permissions.set
  endpoint:
    path: /methods/functions.distributions.permissions.set
    method: GET
- name: functions.workflows.steps.list
  endpoint:
    path: /methods/functions.workflows.steps.list
    method: GET
- name: functions.workflows.steps.responses.export
  endpoint:
    path: /methods/functions.workflows.steps.responses.export
    method: GET
- name: groups.mark
  endpoint:
    path: /methods/groups.mark
    method: GET
- name: im.mark
  endpoint:
    path: /methods/im.mark
    method: GET
- name: mpim.mark
  endpoint:
    path: /methods/mpim.mark
    method: GET
- name: pins.add
  endpoint:
    path: /methods/pins.add
    method: GET
- name: pins.remove
  endpoint:
    path: /methods/pins.remove
    method: GET
- name: reactions.add
  endpoint:
    path: /methods/reactions.add
    method: GET
- name: reactions.remove
  endpoint:
    path: /methods/reactions.remove
    method: GET
- name: reminders.add
  endpoint:
    path: /methods/reminders.add
    method: GET
- name: reminders.complete
  endpoint:
    path: /methods/reminders.complete
    method: GET
- name: reminders.delete
  endpoint:
    path: /methods/reminders.delete
    method: GET
- name: slackLists.access.delete
  endpoint:
    path: /methods/slackLists.access.delete
    method: GET
- name: slackLists.access.set
  endpoint:
    path: /methods/slackLists.access.set
    method: GET
- name: slackLists.create
  endpoint:
    path: /methods/slackLists.create
    method: GET
- name: slackLists.download.get
  endpoint:
    path: /methods/slackLists.download.get
    method: GET
- name: slackLists.download.start
  endpoint:
    path: /methods/slackLists.download.start
    method: GET
- name: slackLists.items.create
  endpoint:
    path: /methods/slackLists.items.create
    method: GET
- name: slackLists.items.delete
  endpoint:
    path: /methods/slackLists.items.delete
    method: GET
- name: slackLists.items.deleteMultiple
  endpoint:
    path: /methods/slackLists.items.deleteMultiple
    method: GET
- name: slackLists.items.info
  endpoint:
    path: /methods/slackLists.items.info
    method: GET
- name: slackLists.items.list
  endpoint:
    path: /methods/slackLists.items.list
    method: GET
- name: slackLists.items.update
  endpoint:
    path: /methods/slackLists.items.update
    method: GET
- name: slackLists.update
  endpoint:
    path: /methods/slackLists.update
    method: GET
- name: stars.add
  endpoint:
    path: /methods/stars.add
    method: GET
- name: stars.remove
  endpoint:
    path: /methods/stars.remove
    method: GET
- name: team.info
  endpoint:
    path: /methods/team.info
    method: GET
- name: usergroups.create
  endpoint:
    path: /methods/usergroups.create
    method: GET
- name: usergroups.disable
  endpoint:
    path: /methods/usergroups.disable
    method: GET
- name: usergroups.enable
  endpoint:
    path: /methods/usergroups.enable
    method: GET
- name: usergroups.update
  endpoint:
    path: /methods/usergroups.update
    method: GET
- name: usergroups.users.update
  endpoint:
    path: /methods/usergroups.users.update
    method: GET
- name: users.discoverableContacts.lookup
  endpoint:
    path: /methods/users.discoverableContacts.lookup
    method: GET
- name: users.profile.set
  endpoint:
    path: /methods/users.profile.set
    method: GET
- name: users.setActive
  endpoint:
    path: /methods/users.setActive
    method: GET
- name: users.setPresence
  endpoint:
    path: /methods/users.setPresence
    method: GET
- name: views.open
  endpoint:
    path: /methods/views.open
    method: GET
- name: views.publish
  endpoint:
    path: /methods/views.publish
    method: GET
- name: views.push
  endpoint:
    path: /methods/views.push
    method: GET
- name: views.update
  endpoint:
    path: /methods/views.update
    method: GET
- name: workflows.featured.add
  endpoint:
    path: /methods/workflows.featured.add
    method: GET
- name: workflows.featured.list
  endpoint:
    path: /methods/workflows.featured.list
    method: GET
- name: workflows.featured.remove
  endpoint:
    path: /methods/workflows.featured.remove
    method: GET
- name: workflows.featured.set
  endpoint:
    path: /methods/workflows.featured.set
    method: GET
- name: workflows.stepCompleted
  endpoint:
    path: /methods/workflows.stepCompleted
    method: GET
- name: workflows.stepFailed
  endpoint:
    path: /methods/workflows.stepFailed
    method: GET
- name: workflows.triggers.permissions.add
  endpoint:
    path: /methods/workflows.triggers.permissions.add
    method: GET
- name: workflows.triggers.permissions.list
  endpoint:
    path: /methods/workflows.triggers.permissions.list
    method: GET
- name: workflows.triggers.permissions.remove
  endpoint:
    path: /methods/workflows.triggers.permissions.remove
    method: GET
- name: workflows.triggers.permissions.set
  endpoint:
    path: /methods/workflows.triggers.permissions.set
    method: GET
- name: workflows.updateStep
  endpoint:
    path: /methods/workflows.updateStep
    method: GET
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: calls
    params: {}
- name: calls_add
  endpoint:
    path: /methods/calls.add
    method: POST
- name: chat_postMessage
  endpoint:
    path: /methods/chat.postMessage
    method: POST
- name: calls_update
  endpoint:
    path: /methods/calls.update
    method: POST
- name: calls_end
  endpoint:
    path: /methods/calls.end
    method: POST
- name: calls_participants_add
  endpoint:
    path: /methods/calls.participants.add
    method: POST
- name: calls_participants_remove
  endpoint:
    path: /methods/calls.participants.remove
    method: POST
- name: chat_unfurl
  endpoint:
    path: /methods/chat.unfurl
    method: POST
- name: user_profile
  endpoint:
    path: /methods/users.profile.set
    method: POST
    data_selector: profile
    params:
      scope: users.profile:write
- name: user_profile_get
  endpoint:
    path: /api/users.profile.get
    method: GET
    data_selector: profile
- name: user_profile_set
  endpoint:
    path: /api/users.profile.set
    method: POST
    data_selector: profile
- name: user_getPresence
  endpoint:
    path: /api/users.getPresence
    method: GET
    data_selector: presence
- name: user_setPresence
  endpoint:
    path: /api/users.setPresence
    method: POST
    data_selector: presence
- name: url_verification
  endpoint:
    path: /api/events/url_verification
    method: POST
    data_selector: token, challenge, type
    params: {}
- name: channels
  endpoint:
    path: /apis/connect
    method: GET
- name: shared_channel_invite_received
  endpoint:
    path: /events/shared_channel_invite_received
    method: POST
- name: conversations.inviteShared
  endpoint:
    path: /methods/conversations.inviteShared
    method: POST
- name: conversations.acceptSharedInvite
  endpoint:
    path: /methods/conversations.acceptSharedInvite
    method: POST
- name: conversations.connect:read
  endpoint:
    path: /scopes/conversations.connect:read
    method: GET
- name: conversations.connect:write
  endpoint:
    path: /scopes/conversations.connect:write
    method: GET
- name: conversations.connect:manage
  endpoint:
    path: /scopes/conversations.connect:manage
    method: GET
- name: admin.conversations:write
  endpoint:
    path: /scopes/admin.conversations:write
    method: GET
- name: team.externalTeams.list
  endpoint:
    path: /methods/team.externalTeams.list
    method: GET
- name: users.discoverableContacts.lookup
  endpoint:
    path: /methods/users.discoverableContacts.lookup
    method: GET
- name: admin.conversations.disconnectShared
  endpoint:
    path: /methods/admin.conversations.disconnectShared
    method: POST
- name: conversations.acceptSharedInvite
  endpoint:
    path: /methods/conversations.acceptSharedInvite
    method: POST
- name: conversations.approveSharedInvite
  endpoint:
    path: /methods/conversations.approveSharedInvite
    method: POST
- name: conversations.declineSharedInvite
  endpoint:
    path: /methods/conversations.declineSharedInvite
    method: POST
- name: conversations.externalInvitePermissions.set
  endpoint:
    path: /methods/conversations.externalInvitePermissions.set
    method: POST
- name: conversations.inviteShared
  endpoint:
    path: /methods/conversations.inviteShared
    method: POST
- name: conversations.listConnectInvites
  endpoint:
    path: /methods/conversations.listConnectInvites
    method: GET
- name: conversations.requestSharedInvite.approve
  endpoint:
    path: /methods/conversations.requestSharedInvite.approve
    method: POST
- name: conversations.requestSharedInvite.deny
  endpoint:
    path: /methods/conversations.requestSharedInvite.deny
    method: POST
- name: conversations.requestSharedInvite.list
  endpoint:
    path: /methods/conversations.requestSharedInvite.list
    method: GET
- name: team.externalTeams.disconnect
  endpoint:
    path: /methods/team.externalTeams.disconnect
    method: POST
- name: team.externalTeams.list
  endpoint:
    path: /methods/team.externalTeams.list
    method: GET
- name: users.discoverableContacts.lookup
  endpoint:
    path: /methods/users.discoverableContacts.lookup
    method: GET
- name: current_status
  endpoint:
    path: /current
    method: GET
    data_selector: status
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: incidents
- name: status_updates
  endpoint:
    path: /feed/atom
    method: GET
    data_selector: entries
- name: blocks
  endpoint:
    path: /block-kit/blocks
    method: GET
    data_selector: blocks
    params: {}
- name: blocks
  endpoint:
    path: /reference/block-kit/blocks
    method: GET
- name: block_elements
  endpoint:
    path: /reference/block-kit/block-elements
    method: GET
- name: composition_objects
  endpoint:
    path: /reference/block-kit/composition-objects
    method: GET
- name: workflow_button
  endpoint:
    path: /reference/block-kit/composition-objects#workflow_button
    method: GET
    data_selector: records
- name: file_input
  endpoint:
    path: /reference/block-kit/composition-objects#file_input
    method: GET
    data_selector: records
- name: multi_static_select
  endpoint:
    path: /reference/block-kit/composition-objects#multi_static_select
    method: GET
    data_selector: records
- name: multi_external_select
  endpoint:
    path: /reference/block-kit/composition-objects#multi_external_select
    method: GET
    data_selector: records
- name: multi_users_select
  endpoint:
    path: /reference/block-kit/composition-objects#multi_users_select
    method: GET
    data_selector: records
- name: multi_conversations_select
  endpoint:
    path: /conversations.list
    method: GET
- name: multi_channels_select
  endpoint:
    path: /channels.list
    method: GET
- name: Button
  endpoint:
    path: /reference/block-kit/block-elements#button
    method: GET
    data_selector: elements
    params: {}
- name: Checkboxes
  endpoint:
    path: /reference/block-kit/block-elements#checkboxes
    method: GET
    data_selector: elements
    params: {}
- name: Date picker
  endpoint:
    path: /reference/block-kit/block-elements#datepicker
    method: GET
    data_selector: elements
    params: {}
- name: Datetime picker
  endpoint:
    path: /reference/block-kit/block-elements#datetimepicker
    method: GET
    data_selector: elements
    params: {}
- name: Email input
  endpoint:
    path: /reference/block-kit/block-elements#email
    method: GET
    data_selector: elements
    params: {}
- name: workflow_button
  endpoint:
    path: /reference/block-kit/composition-objects/workflow_button
    method: GET
    data_selector: fields
    params: {}
- name: select_menu_static_options
  endpoint:
    path: /reference/block-kit/composition-objects#select_menu_static_options
    method: GET
    data_selector: fields
    params: {}
- name: select_menu_external_data_source
  endpoint:
    path: /reference/block-kit/composition-objects#select_menu_external_data_source
    method: GET
    data_selector: fields
    params: {}
- name: select_menu_users
  endpoint:
    path: /reference/block-kit/composition-objects#select_menu_users
    method: GET
    data_selector: fields
    params: {}
- name: select_menu_conversations
  endpoint:
    path: /reference/block-kit/composition-objects#select_menu_conversations
    method: GET
    data_selector: fields
    params: {}
- name: select_menu_channels
  endpoint:
    path: /reference/block-kit/composition-objects#select_menu_channels
    method: GET
    data_selector: fields
    params: {}
- name: dialog
  endpoint:
    path: /confirmation_dialog
    method: POST
    data_selector: dialog
    params: {}
- name: option_groups
  endpoint:
    path: /reference/block-kit/block-elements#select
    method: GET
    data_selector: option_groups
- name: company_business
  endpoint:
    path: /reference/block-kit/blocks#rich_text
    method: GET
- name: read_about_our_culture
  endpoint:
    path: /reference/block-kit/blocks#rich_text
    method: GET
- name: inspirational_quote
  endpoint:
    path: /reference/block-kit/blocks#rich_text
    method: GET
- name: header
  endpoint:
    path: /reference/block-kit/blocks#header
    method: GET
    data_selector: blocks
    params: {}
- name: context
  endpoint:
    path: /reference/block-kit/blocks#context
    method: GET
    data_selector: blocks
    params: {}
- name: section
  endpoint:
    path: /reference/block-kit/blocks#section
    method: GET
    data_selector: blocks
    params: {}
- name: divider
  endpoint:
    path: /reference/block-kit/blocks#divider
    method: GET
    data_selector: blocks
    params: {}
- name: rich_text
  endpoint:
    path: /reference/block-kit/blocks#rich_text
    method: GET
    data_selector: blocks
    params: {}
- name: input
  endpoint:
    path: /reference/block-kit/blocks#input
    method: GET
    data_selector: blocks
    params: {}
- name: actions
  endpoint:
    path: /reference/block-kit/blocks#actions
    method: GET
    data_selector: blocks
    params: {}
- name: auth.test
  endpoint:
    path: /methods/auth.test
    method: GET
    data_selector: result
- name: conversations.info
  endpoint:
    path: /methods/conversations.info
    method: GET
    data_selector: channel
- name: team.info
  endpoint:
    path: /methods/team.info
    method: GET
    data_selector: team
- name: users.info
  endpoint:
    path: /methods/users.info
    method: GET
    data_selector: user
- name: users.list
  endpoint:
    path: /methods/users.list
    method: GET
    data_selector: members
- name: migration.exchange
  endpoint:
    path: /methods/migration.exchange
    method: POST
    data_selector: user_ids
- name: views.open
  endpoint:
    path: /views.open
    method: POST
    data_selector: view
    params: {}
- name: views.update
  endpoint:
    path: /views.update
    method: POST
    data_selector: view
    params: {}
- name: views.push
  endpoint:
    path: /views.push
    method: POST
    data_selector: view
    params: {}
- name: block_actions
  endpoint:
    path: /reference/interaction-payloads/block-actions
    method: GET
- name: view_submission
  endpoint:
    path: /reference/interaction-payloads/views#view_submission
    method: GET
- name: view_closed
  endpoint:
    path: /reference/interaction-payloads/views#view_closed
    method: GET
- name: views.update
  endpoint:
    path: /methods/views.update
    method: POST
- name: views.push
  endpoint:
    path: /methods/views.push
    method: POST
- name: views.publish
  endpoint:
    path: /views.publish
    method: POST
    data_selector: ok
- name: canvases.create
  endpoint:
    path: /conversations.canvases.create
    method: POST
    data_selector: canvas_id
- name: canvases
  endpoint:
    path: /methods?query=canvas
    method: GET
- name: canvases
  endpoint:
    path: /canvases.create
    method: POST
- name: files
  endpoint:
    path: /files.list
    method: GET
    params:
      types: canvas
- name: modal_view
  endpoint:
    path: /methods/views.open
    method: POST
    data_selector: view
    params: {}
- name: home_tab_view
  endpoint:
    path: /methods/views.publish
    method: POST
    data_selector: view
    params: {}
- name: modals
  endpoint:
    path: /methods/views.open
    method: POST
    data_selector: view
    params: {}
- name: view_submission
  endpoint:
    path: /methods/views.submit
    method: POST
    data_selector: view_submission
    params: {}
- name: workflow_step
  endpoint:
    path: /api/workflow.steps
    method: POST
    data_selector: functions
    params: {}
- name: create-issue
  endpoint:
    path: /functions/create-issue
    method: POST
    data_selector: input_parameters
    params: {}
- name: get-projects
  endpoint:
    path: /functions/get-projects
    method: POST
    data_selector: output_parameters
    params: {}
- type: workflow_step
  blocks:
  - type: section
    block_id: section1
    accessory:
      type: button
      action_id: button_abc
      value: Button value
      style: danger
  - type: input
    element:
      action_id: input1
      multiline: false
    optional: false
  private_metadata: Shhhhhhhh
  callback_id: view_identifier_12
- name: workflow_step
  endpoint:
    path: /events/workflow_step_execute
    method: GET
    data_selector: workflow_steps
    params: {}
- name: workflow_step_edit
  endpoint:
    path: /interactivity/handling#payloads
    method: POST
    data_selector: workflow_step
    params: {}
- name: workflow_step_execute
  endpoint:
    path: /api/events/workflow_step_execute
    method: POST
    data_selector: event
    params: {}
- name: workflow_published
  endpoint:
    path: /events/workflow_published
    method: POST
    data_selector: workflow_published_configuration
- name: workflow_published
  endpoint:
    path: /events/workflow_published
    method: GET
- name: workflow_unpublished
  endpoint:
    path: /events/workflow_unpublished
    method: POST
    data_selector: workflow_draft_configuration
- name: workflow_deleted
  endpoint:
    path: /events/workflow_deleted
    method: GET
- name: workflow_deleted
  endpoint:
    path: /events/workflow_deleted
    method: POST
- name: workflow_step_deleted
  endpoint:
    path: /events/workflow_step_deleted
    method: GET
- name: workflow_step_deleted
  endpoint:
    path: /events/workflow_step_deleted
    method: POST
    data_selector: event
- name: apps.activities.list
  endpoint:
    path: /apps.activities.list
    method: GET
    data_selector: activities
    params: {}
- name: apps.approved.list
  endpoint:
    path: /apps.approved.list
    method: GET
    data_selector: apps
    params: {}
- name: apps.uninstall
  endpoint:
    path: /apps.uninstall
    method: POST
    data_selector: response
    params: {}
- name: permissions_add
  endpoint:
    path: /methods/functions.distributions.permissions.add
    method: POST
- name: permissions_list
  endpoint:
    path: /methods/functions.distributions.permissions.list
    method: GET
- name: permissions_remove
  endpoint:
    path: /methods/functions.distributions.permissions.remove
    method: POST
- name: permissions_set
  endpoint:
    path: /methods/functions.distributions.permissions.set
    method: POST
- name: steps_list
  endpoint:
    path: /methods/functions.workflows.steps.list
    method: GET
- name: responses_export
  endpoint:
    path: /methods/functions.workflows.steps.responses.export
    method: GET
- name: conversations.info
  endpoint:
    path: /conversations.info
    method: GET
- name: conversations.history
  endpoint:
    path: /conversations.history
    method: GET
- name: channel
  endpoint:
    path: /api/channels
    method: GET
    data_selector: channel
    params: {}
- name: group
  endpoint:
    path: /types/conversation
    method: GET
    data_selector: id
    params: {}
- name: im
  endpoint:
    path: /im
    method: GET
    data_selector: records
- name: mpim
  endpoint:
    path: /mpim
    method: GET
    data_selector: members
    params: {}
- name: event
  endpoint:
    path: /events/api
    method: POST
    data_selector: event
- name: event
  endpoint:
    path: /events/api
    method: GET
    data_selector: events
- name: file
  endpoint:
    path: /files
    method: GET
    data_selector: files
- name: user
  endpoint:
    path: /users.info
    method: GET
    data_selector: user
- name: user_group
  endpoint:
    path: /usergroups.list
    method: GET
    data_selector: usergroups
    params: {}
- name: interactivity
  endpoint:
    path: /interaction/payloads
    method: POST
    data_selector: interactor
    params: {}
- name: global_shortcut
  endpoint:
    path: /interactivity/shortcuts/global
    method: POST
    data_selector: records
- name: message_shortcut
  endpoint:
    path: /interactivity/shortcuts/message
    method: POST
    data_selector: records
- name: block_actions_event
  endpoint:
    path: /block_actions
    method: POST
    data_selector: actions
    params: {}
- name: block_suggestion
  endpoint:
    path: /block_suggestion
    method: POST
    data_selector: payload
    params: {}
- name: block_suggestion
  endpoint:
    path: /reference/block-kit/block-elements#external_select
    method: GET
    data_selector: options
    params: {}
- name: view_submission
  endpoint:
    path: /view_submission
    method: POST
- name: view_closed
  endpoint:
    path: /view_closed
    method: POST
- name: view_submission
  endpoint:
    path: /interactivity/handling
    method: POST
    data_selector: payload
- name: view_closed
  endpoint:
    path: /interactivity/handling
    method: POST
    data_selector: payload
- name: workflows.featured
  endpoint:
    path: /api/workflows.featured.add
    method: POST
    data_selector: response
    params: {}
- name: workflows.featured.list
  endpoint:
    path: /api/workflows.featured.list
    method: GET
    data_selector: response
    params: {}
- name: workflows.featured.remove
  endpoint:
    path: /api/workflows.featured.remove
    method: POST
    data_selector: response
    params: {}
- name: workflows.featured.set
  endpoint:
    path: /api/workflows.featured.set
    method: POST
    data_selector: response
    params: {}
- name: dm_user_added
  endpoint:
    path: /admin/audit-logs/dm_user_added
    method: GET
- name: user_change
  endpoint:
    path: /users.change
    method: POST
- name: conversations
  endpoint:
    path: /api/conversations.list
    method: GET
    data_selector: channels
    params: {}
- name: users
  endpoint:
    path: /api/users.list
    method: GET
    data_selector: members
    params: {}
- name: audit_logs
  endpoint:
    path: /audit-logs
    method: GET
    data_selector: logs
    params: {}
- name: create_candidate
  endpoint:
    path: /tools/deno-slack-sdk/reference/connector-functions/smartrecruiters/create_candidate
    method: POST
- name: create_candidate_and_assign_to_job
  endpoint:
    path: /tools/deno-slack-sdk/reference/connector-functions/smartrecruiters/create_candidate_and_assign_to_job
    method: POST
- name: give_candidate_review
  endpoint:
    path: /tools/deno-slack-sdk/reference/connector-functions/smartrecruiters/give_candidate_review
    method: POST
- name: add_record
  endpoint:
    path: /tools/deno-slack-sdk/reference/connector-functions/airtable/add_record
    method: POST
- name: delete_record
  endpoint:
    path: /tools/deno-slack-sdk/reference/connector-functions/airtable/delete_record
    method: DELETE
- name: select_record
  endpoint:
    path: /tools/deno-slack-sdk/reference/connector-functions/airtable/select_record
    method: GET
- name: update_record
  endpoint:
    path: /tools/deno-slack-sdk/reference/connector-functions/airtable/update_record
    method: PATCH
- name: drafts
  endpoint:
    path: /datastores/drafts
    method: POST
    data_selector: item
    params: {}
- name: manifest
  endpoint:
    path: /tools/deno-slack-sdk/guides/using-the-app-manifest
    method: GET
    data_selector: Manifest properties
- name: events_api
  endpoint:
    path: /api/events
    method: POST
- name: web_api
  endpoint:
    path: /api/web
    method: POST
- name: conversations_api
  endpoint:
    path: /api/conversations
    method: POST
- name: socket_mode
  endpoint:
    path: /api/socket-mode
    method: POST
- name: conversations
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: channels
    params: {}
- name: app_mention_event
  endpoint:
    path: /events/app_mention
    method: POST
    data_selector: event
    params: {}
- name: app_mention
  endpoint:
    path: /events-api#app_events
    method: GET
    data_selector: type
    params:
      required_scopes: app_mentions:read
- name: app_home_opened
  endpoint:
    path: /events-api#app_events
    method: POST
    data_selector: event
    params: {}
- name: conversations
  endpoint:
    path: /api/conversations.list
    method: GET
    data_selector: channels
    params: {}
- name: views.publish
  endpoint:
    path: /views.publish
    method: POST
    data_selector: ok
- name: events_api
  endpoint:
    path: /api/apps.connections.open
    method: POST
- name: dynamic_menus
  endpoint:
    path: /api/apps.connections.open
    method: POST
    data_selector: payload
    params: {}
- name: command
  endpoint:
    path: /commands
    method: POST
    data_selector: commands
- name: event
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: apps.connections.open
  endpoint:
    path: /apps.connections.open
    method: POST
    data_selector: url
    params:
      token: required
- name: workflows_featured_add
  endpoint:
    path: /workflows.featured.add
    method: POST
    data_selector: response
    params: {}
- name: workflows
  endpoint:
    path: /workflows/featured.add
    method: POST
    data_selector: ok
    params:
      token: Required
      channel_id: Required
      trigger_ids: Required
- name: workflows_featured_add
  endpoint:
    path: /workflows.featured.add
    method: POST
    data_selector: response
- name: featured_workflows
  endpoint:
    path: /workflows/featured.add
    method: POST
    data_selector: ok
    params:
      channel_id: C1234567890
      trigger_ids:
      - Ft012345
      - Ft02468
- name: bookmarks
  endpoint:
    path: /methods/bookmarks.add
    method: POST
- name: bookmarks_edit
  endpoint:
    path: /methods/bookmarks.edit
    method: POST
- name: bookmarks_remove
  endpoint:
    path: /methods/bookmarks.remove
    method: POST
- name: workflows_featured_add
  endpoint:
    path: /methods/workflows.featured.add
    method: POST
- name: workflows_featured_remove
  endpoint:
    path: /methods/workflows.featured.remove
    method: POST
- name: workflows_featured_set
  endpoint:
    path: /methods/workflows.featured.set
    method: POST
- name: workflows_featured_list
  endpoint:
    path: /workflows.featured.list
    method: POST
    data_selector: data
    params:
      token: required
      channel_ids: required
- name: featured_channels
  endpoint:
    path: /workflows/featured/list
    method: POST
    data_selector: example
    params:
      channel_ids: C012345678,C987654321
- name: workflows_featured_list
  endpoint:
    path: /workflows.featured.list
    method: POST
- name: channels
  endpoint:
    path: /workflows/featured/list
    method: POST
    data_selector: example
    params:
      channel_ids: C012345678,C987654321
- name: bookmarks.list
  endpoint:
    path: /methods/bookmarks.list
    method: GET
- name: workflows.featured.list
  endpoint:
    path: /methods/workflows.featured.list
    method: GET
- name: workflows_featured_remove
  endpoint:
    path: /workflows.featured.remove
    method: POST
    data_selector: response
- name: remove_featured_workflows
  endpoint:
    path: /api/workflows/featured/remove
    method: POST
    data_selector: ok
    params:
      channel_id: C1234567890
      trigger_ids:
      - Ft012345
      - Ft02468
- name: remove_featured_workflows
  endpoint:
    path: /workflows.featured.remove
    method: POST
    data_selector: response
    params:
      token: required
      channel_id: required
      trigger_ids: required
- name: remove_featured_workflows
  endpoint:
    path: /workflows.featured.remove
    method: POST
    data_selector: ok
    params:
      channel_id: C1234567890
      trigger_ids:
      - Ft012345
      - Ft02468
- name: workflows.featured.set
  endpoint:
    path: /workflows.featured.set
    method: POST
- name: featured_workflows
  endpoint:
    path: /workflows/featured.set
    method: POST
    data_selector: ok
    params:
      channel_id: C1234567890
      trigger_ids:
      - Ft012345
      - Ft02468
- name: workflows.featured.set
  endpoint:
    path: /workflows.featured.set
    method: POST
- name: featured_workflows
  endpoint:
    path: /workflows.featured.set
    method: POST
    data_selector: ok
    params:
      channel_id: C1234567890
      trigger_ids:
      - Ft012345
      - Ft02468
- name: button
  endpoint:
    path: /reference/block-kit/block-elements#button
    method: GET
    data_selector: elements
    params: {}
- name: checkboxes
  endpoint:
    path: /reference/block-kit/block-elements#checkboxes
    method: GET
    data_selector: elements
    params: {}
- name: date_picker
  endpoint:
    path: /reference/block-kit/block-elements#datepicker
    method: GET
    data_selector: elements
    params: {}
- name: datetime_picker
  endpoint:
    path: /reference/block-kit/block-elements#datetimepicker
    method: GET
    data_selector: elements
    params: {}
- name: email_input
  endpoint:
    path: /reference/block-kit/block-elements#email
    method: GET
    data_selector: elements
    params: {}
- name: block_elements
  endpoint:
    path: /reference/block-kit/blocks
    method: GET
    data_selector: records
    params: {}
- name: interactive_components
  endpoint:
    path: /reference/block-kit/blocks
    method: GET
    data_selector: records
    params: {}
- name: workflow_button
  endpoint:
    path: /reference/block-kit/composition-objects#text
    method: GET
    data_selector: workflow_button
    params: {}
- name: file_input
  endpoint:
    path: /scopes/files:read
    method: GET
    data_selector: file_input
    params: {}
- name: multi_static_select
  endpoint:
    path: /reference/messaging/composition-objects#option
    method: GET
    data_selector: multi_static_select
    params: {}
- name: multi_external_select
  endpoint:
    path: /reference/messaging/composition-objects#option
    method: GET
    data_selector: multi_external_select
    params: {}
- name: multi_users_select
  endpoint:
    path: /reference/messaging/composition-objects#option
    method: GET
    data_selector: multi_users_select
    params: {}
- name: multi_conversations_select
  endpoint:
    path: /conversations/select
    method: GET
    data_selector: conversations
- name: multi_channels_select
  endpoint:
    path: /channels/select
    method: GET
    data_selector: channels
- name: number_input_element
  endpoint:
    path: /number/input
    method: POST
    data_selector: number_input
- name: overflow_menu_element
  endpoint:
    path: /overflow/menu
    method: POST
    data_selector: overflow_menu
- name: plain_text_input_element
  endpoint:
    path: /plain/text/input
    method: POST
    data_selector: plain_text_input
- name: radio_button_group_element
  endpoint:
    path: /radio/button/group
    method: POST
    data_selector: radio_button_group
- name: rich_text_input_element
  endpoint:
    path: /rich/text/input
    method: POST
    data_selector: rich_text_input
- name: select_menu_element
  endpoint:
    path: /select/menu
    method: POST
    data_selector: select_menu
- name: workflow_button
  endpoint:
    path: /reference/block-kit/composition-objects
    method: GET
    data_selector: elements
    params: {}
- name: static_select_menu
  endpoint:
    path: /api/static_select
    method: POST
    data_selector: options
    params: {}
- name: external_select_menu
  endpoint:
    path: /api/external_select
    method: POST
    data_selector: options
    params: {}
- name: users_select_menu
  endpoint:
    path: /api/users_select
    method: POST
    data_selector: users
    params: {}
- name: conversations_select_menu
  endpoint:
    path: /api/conversations_select
    method: POST
    data_selector: conversations
    params: {}
- name: channels_select_menu
  endpoint:
    path: /api/channels_select
    method: POST
    data_selector: channels
    params: {}
- name: workflow_button
  endpoint:
    path: /api/workflow_button
    method: POST
    data_selector: workflow
    params: {}
- name: files.info
  endpoint:
    path: /methods/files.info
    method: GET
- name: files.list
  endpoint:
    path: /methods/files.list
    method: GET
- name: files_info
  endpoint:
    path: /files.info
    method: GET
    data_selector: file
    params:
      token: Required
      file: Required
      count: ''
      cursor: ''
      limit: ''
      page: ''
- name: file
  endpoint:
    path: /files.info
    method: POST
    data_selector: file
    params:
      token: required
      file: required
      limit: optional
      cursor: optional
      page: optional
- name: files_list
  endpoint:
    path: /files.list
    method: GET
    data_selector: files
    params:
      incremental: ts_from
- name: files.info
  endpoint:
    path: /methods/files.info
    method: GET
    data_selector: file
    params:
      file: F2147483862
- name: file_comment_deleted
  endpoint:
    path: /events/file_comment_deleted
    method: POST
    data_selector: event
    params:
      required_scopes: files:read
- name: files.info
  endpoint:
    path: /files.info
    method: POST
    data_selector: file
    params:
      file_id: F2147483862
- name: file_deleted
  endpoint:
    path: /api/events
    method: POST
    data_selector: event
    params:
      required: files:read
- name: file_public
  endpoint:
    path: /methods/files.info
    method: GET
    data_selector: file
    params:
      file_id: F2147483862
- name: file_shared
  endpoint:
    path: /methods/files.info
    method: POST
    data_selector: file
    params:
      scope: files:read
- name: file_unshared
  endpoint:
    path: /methods/files.info
    method: GET
    data_selector: file
    params:
      file_id: F2147483862
notes:
- Blocks are a series of components that can be combined to create visually rich and
  compellingly interactive messages.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Use the Events API to create a dynamic App Home.
- The Slack developer docs are moving! We've been working hard at building out a new
  docs experience at docs.slack.dev — now in beta! You can start using the new docs
  today, but we'll keep the content on both sites up to date during the transition.
- Developing automations requires a paid plan.
- Both workflow apps and Workflow Builder require that you be on a paid plan.
- Developer sandboxes are intended for development and application testing purposes.
- You can provision up to 10 sandboxes over the course of 30 days.
- Slack apps can't post to any public channel by default; they gain that ability by
  asking for permission explicitly with the use of scopes.
- Apps listen and respond to events using the Events API.
- Redirect URI must use HTTPS.
- Each installation can result in additive scopes.
- With token rotation, it expires every 12 hours.
- New access and refresh tokens need to be rotated throughout the lifespan of the
  app for it to continue to function.
- Token rotation may not be turned off once it's turned on.
- Refresh tokens are designed to be used once.
- Slack signs its requests using a secret unique to your app.
- We strongly recommend you only use the Signing Secret from now on.
- Use the callback URL 'https://oauth.pstmn.io/v1/browser-callback' for OAuth.
- Add at least one bot scope within your app's settings.
- The Sign in with Slack flow is based on the OpenID Connect standard, built on top
  of OAuth 2.0.
- Redirect URL must match the service setup.
- Each set of scopes must be requested in separate OAuth flows.
- Sign in with Slack links is a paid feature.
- The Sign in With Slack link allows a user to share their Slack information without
  your app being installed in a workspace.
- Enable public distribution. This is required for using an OAuth flow.
- Interested parties should fill out the interest form or reach out to partnersupport@slack-corp.com
  for more information.
- Using Front Channel may result in cookies not being sent due to SameSite restriction.
- New bot user API access tokens may not access RTM.
- Slack apps may not access the legacy RTM API.
- Ensure that you request only the scopes absolutely necessary to enable your app’s
  features in Slack.
- Requires setup of Slack app for authentication
- Workspace guests are not permitted to access AI apps.
- Best practices for developing AI Apps.
- This API is currently in a limited access stage.
- You may be able to obtain a token and call the API, but to get a valid response,
  you must be enrolled in the program.
- The action_token is short-lived, so it’s important to use it soon after your app
  receives it.
- Formatting in the search string can cause unexpected results, so be sure to strip
  any formatting from the search string before sending to the Data Access API.
- Requires scopes `channels:read` and `chat:write` to function correctly.
- Each Slack app starts off without permission to do very much at all.
- You will have to grant your app the correct scopes required in order for you to
  publish messages.
- Requires setup of connected app in Slack
- Messages can only be scheduled up to 120 days in advance.
- Requires scopes for OAuth permissions such as channels:read and chat:write.
- Requires scopes such as chat:write and channels:read for posting messages and retrieving
  channel lists.
- The first is `channels:read`. The second is `chat:write`.
- You need the channels:read permission granted to your app to list conversations.
- Use chat:write.customize scope for sending messages as other users.
- Scopes required include `channels:read` for reading channels and `chat:write` for
  posting messages.
- Each Slack app starts off without permission to do very much at all. You will have
  to grant your app the correct scopes required in order for you to publish messages.
- 'Requires OAuth scopes: channels:read and chat:write to send messages.'
- Apps must request specific permissions to access certain API methods.
- Some API methods require OAuth scopes to be set before they can be used.
- You'll need a Slack app if you don't already.
- 'Requires scopes: channels:read, channels:history'
- Returns a messages array that first contains the parent message object, followed
  by message objects for all the threaded replies.
- Ephemeral messages can't be updated in this way.
- 'The right for an app to delete a message depends on a few caveats: If using a standard
  user''s user token, only messages posted by that user, or those posted as the app,
  may be deleted. If using a Workspace Admin user''s user token, most messages in
  that workspace can be deleted. If using a bot user token, only messages posted by
  that bot user, or those posted as the app, may be deleted. Ephemeral messages can''t
  be deleted in this way.'
- Prepare your app to receive interaction payloads.
- Remote files must be added before they can be shared.
- Use the metadata parameter to attach structured payloads to messages
- Events API can be subscribed to for real-time updates on message metadata
- Metadata Events are structured data payloads that contain information about events
  occurring in your Slack-connected application.
- Incoming webhooks require a Slack app to be created.
- Incoming webhooks do not allow you to delete a message after it's been posted.
- You cannot override the default channel, username, or icon when using incoming webhooks.
- Ensure that the links:write scope is added to your app settings for apps that will
  be performing app unfurling.
- Links will only unfurl if the message they appear in contains a fully-qualified
  URL.
- As you register additional domains, workspaces will need to install your Slack app
  again for changes to take effect on that workspace.
- Use new elements to simplify messages
- Consider mobile layouts of blocks and elements
- Free your messages from layout constraints
- Prototype with Block Kit Builder
- Include text in objects rather than as fields
- Watch out for changes to field limits
- Prepare for the new structure of interaction payloads
- Use block_id and action_id instead of callback_id
- Specify fallback text for message notifications
- Use only response_url to publish messages in response to interactions
- Request URL must be HTTPS if distributing app, otherwise HTTP is acceptable.
- Trigger IDs expire in three seconds and may only be used once.
- Global shortcuts are not visible for all types of guest users.
- An app responding to a shortcut from a threaded message cannot publish a message
  back to that thread.
- Apps intended for commercial distribution should be submitted and approved for listing
  in the Slack Marketplace.
- Once distributed, your app could potentially be installed to a Slack organization
  on Enterprise Grid.
- Onboarding is about proactively helping people use your app.
- Workflow automations are currently not eligible for listing in the Slack Marketplace.
- Your app must be fully functional, publicly available, and can be installed correctly.
- Apps that do not meet the requirement of having been installed on 5 or more active
  workspaces will be blocked from submitting to the Marketplace.
- Apps unsuitable for Slack Marketplace include those that export or backup message
  data.
- Apps must not use legacy/restricted scopes or methods.
- Adhere to the ‘principle of least privilege’ when thinking about the scopes your
  app will use.
- Be aware of unintentionally circumventing Slack's product limitations as they relate
  to access to data.
- Apps that do not follow these terms will not be accepted in the Slack Marketplace.
- The process for getting apps published in the Slack Marketplace involves a manual
  review by our Slack Marketplace team.
- The following list of features and APIs are available in Enterprise Grid workspaces
  only.
- OAuth installation must be initiated by an Enterprise Grid admin or owner.
- Installation must take place on the Enterprise Grid org, not on an individual workspace.
- This API can only be used by Enterprise Grid orgs.
- The token is required, and must be imbued with the `admin.apps:write` scope.
- Each of the methods outlined here accepts an OAuth user token with the specified
  scope.
- The invite request management APIs may only be used by Enterprise Grid orgs.
- This API is not intended for bulk message collection.
- Rate-limited to 100 messages per hour.
- Tokens with `admin.legalHolds:*` scopes are granted at the enterprise level.
- OAuth tokens are associated with the user who authorizes an application.
- If you're sending a POST request to the Legal Holds API, you need to send the input
  below as `application/x-www-form-urlencoded` data.
- For the best customer experience, please instruct the Org Owner to log into their
  Slack organization within their browser before initiating the OAuth flow.
- The Audit Logs API is only available to Slack workspaces on an Enterprise Grid plan.
- These API methods will not work for workspaces on a Free, Pro, or Business+ plan.
- Apps requesting the `auditlogs:read` scope must be installed by the Owner of an
  Enterprise Grid organization.
- Audit Logs events work across an entire Enterprise Grid organization, not individual
  workspaces.
- The token must be a Slack user token (beginning with `xoxp`) associated with an
  Enterprise Grid organization owner.
- The SCIM API is only available to Slack workspaces on the Business+ or Enterprise
  Grid plans.
- Provisioning multi-channel guest users with the SCIM API is only available to Enterprise
  Grid customers.
- Pagination will be required as of August 30, 2019.
- Requires an OAuth token with admin scope for access.
- The token-generating account must remain an Admin or Owner.
- The base URL for all calls to the SCIM API is https://api.slack.com/scim/v2/
- While we’d prefer you to use our newest features, we still maintain documentation
  for a number of so-called legacy features still made available to developers.
- Access tokens for all apps are also known as bearer tokens.
- Slack apps can be installed multiple times by the same user and additional users
  on the same workspace.
- Certain scopes cannot be asked for in combination with each other.
- New Sign in with Slack apps using this outdated protocol may no longer be created
  after July 22, 2021.
- Sign in with Slack extends our existing OAuth 2.0 application approval flow to simplify
  logging in users to your website, service, or application.
- Users can revoke tokens at any time.
- These docs describe an outmoded approach to composing messages and interactive experiences.
- Incoming webhooks are ideal for sending notifications.
- Interactive messages require a Slack app to be created.
- Messages should contain no more than 20 attachments.
- The callback_id is required for interactive messages.
- Configure a Slack app with interactive message Request URL.
- Use the correct OAuth scopes for required interactions.
- Avoid cluttering up the conversation for everyone by using ephemeral messages in
  conversations when displaying items as an intermediary step of an action.
- We recommend you stick with layout blocks, but if you still want to use attachments,
  read our caveats.
- Beginning March 31, 2025, we will discontinue support for legacy custom bots.
- Legacy bot users can only use a restricted set of Web API methods.
- Dialogs are designed to help you gather multi-part input from end-users in a structured
  way.
- The `trigger_id` expires in 3 seconds.
- Use the select element for multiple choice selections allowing users to pick a single
  item from a list.
- The requests between your app and Slack are still OK after all, so don't use any
  kind of error response.
- Using legacy custom integrations is an outdated way for teams to integrate with
  Slack.
- We do not recommend their use.
- Legacy custom integrations lack newer features and will be deprecated and possibly
  removed in the future.
- Legacy custom integration bot users cannot be created after June 4, 2024.
- Legacy bots do not have access to interactive messages features.
- Outgoing webhooks are limited to no more than one message per second.
- Build a Slack app instead.
- Steps from Apps are now deprecated! We don't recommend using or creating Steps from
  Apps for the legacy workflow builder.
- There is a limit of 100 shortcut-triggered workflows per channel.
- Organizations with admin-approved apps turned on will need to approve any re-authentication.
- This API is ancient and the ways to access it have grown more limited over time.
- Many workspace administrators will not allow apps and integrations using the RTM
  API due to the overly permissive permission scopes.
- Websocket URLs provided by `rtm.connect` are single-use and are only valid for 30
  seconds
- Clients should be able to handle unexpected event types
- RTM API Presence is now only available via subscription.
- Clients should not send more than one message per second sustained.
- Must use HTTPS, SSL, and TLS v1.2 or above.
- Broadly, you'll encounter limits like these, applied on a 'per API method per app
  per workspace' basis.
- Rate limits are subject to change.
- All newly-created Slack apps that have not been approved for the Slack Marketplace
  will be subject to new rate limits effective May 29, 2025.
- The types of channels you interface with in the Conversations API are governed by
  corresponding permission scopes.
- 'Each channel has a unique-to-the-team ID that begins with a single letter prefix:
  either C, G, or D.'
- Channel IDs can become unstable in certain situations.
- Integrates calls with Slack for interactive features.
- Users of non-partnered apps will need to initiate Calls using a slash command.
- 'You''ll need two scopes for interacting with calls: calls:read and calls:write.'
- Setting status requires the users.profile:write scope.
- Bot users do not have a user profile and do not have a status.
- The Events API is a streamlined way to build apps and bots that respond to activities
  in Slack.
- Maintain a response success rate of at least 5% of events per 60 minutes to prevent
  automatic disabling.
- If your app is a bot, you need to use the `bot` OAuth scope.
- We'll knock knock knock on your server's door, retrying a failed request up to 3
  times in a gradually increasing timetable.
- Your request URL will receive JSON-based payloads containing wrapped event types.
- Socket Mode apps currently can't be listed in the Slack Marketplace.
- You can turn off Socket Mode at any time to return to the direct HTTP protocol for
  events and interactive features.
- Generate an app-level token for authentication.
- Channels connect you to people working at other companies and organizations.
- Channels between organizations and workspaces can be made private on a per-workspace
  basis.
- Receive updates on the health of Slack services by subscribing to Atom or RSS feeds.
- Be cautious with sending direct messages as they generate push notifications.
- Use more than just color to convey meaning.
- Provide sufficient contrast for text and important visual indicators.
- Sometimes faces can be better than names, or maps better than addresses.
- Use interactive components to break workflows into steps.
- Save people work wherever you can by minimizing the choices they have to make.
- Be considerate and update your message after the interactive flow or the conversation
  expires.
- A screen reader is a tool used that helps people who have difficulties seeing with
  accessing and interacting with digital content.
- Describe your images.
- Do not add more than three large flashes per second in animations.
- Maximum length for title is 100 characters.
- Maximum length for text is 300 characters.
- Maximum length for confirm button text is 30 characters.
- Maximum length for deny button text is 30 characters.
- Your app might not know what to do with messages and users originating from enterprise
  shared channels.
- Your app may have trouble dealing with object IDs beginning with atypical characters,
  like user IDs starting with W.
- Your bot could blindly reply multiple times to messages, not recognizing a unique
  message delivery scenario introduced by shared channels.
- Workspaces on Enterprise Grid are often large and some API responses, like channel
  memberships, can grow immense.
- Support global user IDs in Enterprise Grid workspaces.
- Handle unknown users gracefully in shared channels.
- Apps that contain custom steps intended for use in Workflow Builder must be organization-wide.
- Deno-based workflow automation apps are required and automatically organization-wide.
- Webhooks aren't supported with organization-ready apps. Use chat.postMessage and
  our other messaging tools.
- If you have an existing single-workspace app ready for Enterprise Grid, you may
  want to make it available for organization-wide deployment.
- The sandbox isn’t intended for normal use; it is for testing purposes only.
- Slack will retain messages and files shared in the sandbox for only three days after
  they're created.
- App Home is not available for workflow apps.
- Messages can be sent to public channels, private channels, and direct message conversations.
- Ephemeral messages do not persist across sessions.
- You must possess a valid, unexpired trigger_id to open a modal.
- Apps must return a required acknowledgment response back to the HTTP request that
  sent the payload.
- Ensure you provide clear instruction to the user that a message will be posted to
  the conversation they choose.
- Users should not be prompted for confidential information like passwords within
  modals.
- Your app needs at least one permission scope to enable the Home tab.
- Subscribing to the app_home_opened event will notify you when a user clicks into
  your App Home.
- Canvases can either exist attached to a channel or all on their own.
- Currently, Block Kit is not supported in canvases.
- Block Kit is not supported in canvases.
- These are developer-focused instructions that cover posting messages to Slack via
  APIs.
- Text containing a date or time should display that date in the local timezone of
  the person seeing the text.
- The displayed time will be based on the timezone setting of the device used to observe
  the text, not the timezone set within Preferences in the Slack client being used
  to observe it.
- Non-standard characters (including characters with diacritics) within view objects
  are converted and sent in unicode format when you receive the view callback payloads.
- Modals are the replacement for dialogs, which are outmoded.
- Modals can contain up to 100 blocks.
- When any input blocks are present, a submit element must be passed.
- Your application might live outside of Slack. Perhaps it includes a website, or
  a mobile application.
- Users will be sent to the Slack Marketplace if the app ID is invalid.
- Bot tokens represent a bot associated with an app installed in a workspace.
- Workflow tokens expire, but cannot be refreshed.
- User tokens represent workspace members.
- Adding workflow steps to your app requires it to be an org-ready app.
- Dynamic options support synchronous handling of function_executed events.
- The 'xoxp' token used by the CLI has a time-to-live of 12 hours and must be refreshed
  using the provided refresh token.
- Workflow Builder is a paid feature.
- Steps from Apps is deprecated
- Configuration modals are used in Workflow Builder
- Requires setup of Slack app with OAuth2.
- Ensure proper scopes are granted for the app.
- Conversations can be channels, groups, or direct messages.
- Ensure proper permissions are set for accessing conversation data.
- Private channels created before March 2021 have IDs starting with 'G'.
- Uses OAuth2 for authentication
- Authentication is required to retrieve file URLs.
- Editable-mode files will also have a url_private_download parameter.
- The user group may contain a list of users if the include_users option is enabled.
- Requires setup of OAuth app on Slack
- Each app configuration token will expire 12 hours after it has been generated.
- It's strongly suggested that you refresh your token before it expires.
- Read our guide to handling payloads from user interactions to learn how your app
  should process and respond to these payloads.
- A block_actions payload is received when a user interacts with a Block Kit interactive
  component.
- Deselecting the currently selected option of a Block Kit static option will return
  a null value.
- If a user doesn't interact with a form field — for example, they don't select a
  value from a drop-down field on a modal — the value of that field is returned as
  None.
- Uses OAuth2 with refresh token — requires setup of connected app in Slack
- GovSlack does not run on the slack.com domain.
- Use Granular Bot Permissions (GBP) and V2 OAuth 2.0.
- Starting June 11, 2024, we are enforcing admin restrictions on built-in steps and
  webhook triggers in coded workflows.
- Some methods may have limitations on usage frequency.
- Keep your user data secret and safe. Both versions of the SCIM API now support restricting
  token usage by IP address.
- Users may mute and unmute their conversations with apps.
- Slash command invocations include an api_app_id parameter.
- All Slack apps must use the Conversations API.
- Legacy tokens may be deprecated.
- Workspace apps may now continuously rotate shorter-lived tokens without downtime.
- Deprecation of file comments in favor of file threads.
- Web API methods will be enhanced with tiered rate limiting beginning March 7, 2018.
- More granular OAuth scopes are here! Now your apps can ask for the exact level of
  access you need.
- Authorization headers are now required for most Web API requests involving file
  URLs as of January 4th, 2016.
- Existing Slack apps will continue working as expected.
- Authorization codes must be exchanged for an access token within 10 minutes.
- Apps using beta features may not be submitted to the Slack Marketplace.
- This Code of Conduct only applies to events, discussions, and interactions that
  occur within the Slack Community workspace.
- Diversity and inclusion make our community strong.
- Slack platform API documentation is moving to a new home on docs.slack.dev
- The Slack developer docs are moving! We've been working hard at building out a new
  docs experience at docs.slack.dev — now in beta!
- You cannot bring entire coded workflows into Workflow Builder — you can only bring
  in custom functions.
- You cannot run a workflow on an event (for example, 'Workflow A executed').
- You cannot run non-link triggers in Workflow Buttons.
- For self-hosted apps, you'll want to go with the Bolt SDK.
- Slack apps can access various APIs to provide enhanced functionality.
- Slack apps cannot access the Real Time Messaging (RTM) API
- The Events API is recommended over the RTM API for most use cases.
- Retries count against the failure limits mentioned below.
- If your server is having trouble handling our requests or you'd rather we not retry
  failed deliveries, provide an HTTP header in your responses indicating that you'd
  prefer no further attempts.
- Slack calls you with events when using the Events API.
- Workflow apps require a paid plan
- Datastores are a Slack-hosted way to store data for your workflow apps.
- Your app's profile picture will appear in the Slack client.
- Violations of this policy may result in removal from the Slack Marketplace, token
  revocation, developer suspension, User notification, legal action or any other action
  deemed necessary by Slack.
- Messages are at the core of how you communicate in Slack.
- Messages can be sent to various types of conversations including public channels,
  private channels, and direct messages.
- Ephemeral messages do not persist across sessions and cannot be retrieved via APIs.
- Channel IDs can become unstable in certain situations
- MPIM events and channel types may dispatch incorrect values
- The Slack Conversations API provides a unified interface for all channel-like things
  in Slack.
- Monitor your app's channel membership separately from this event.
- Consider subscribing to member_joined_channel events too.
- Your Slack app must have a bot user configured and installed to use this event.
- Messages sent to your app in direct message conversations are not dispatched via
  app_mention.
- app_home_opened events are sent each time a user enters into the App Home space.
- Respond to events with an HTTP 200 OK as soon as you can.
- Uses OAuth2 with refresh token – requires setup of connected app in Slack
- Home tab can be updated dynamically with personalized user data
- Socket Mode is only available for apps using granular permissions.
- App setup requires generating an app-level token.
- Acknowledge incoming requests using the ack() method.
- We use cookies to make your interactions with our website more meaningful.
- In November 2026, we will discontinue support for classic apps.
- Slack apps are only available internally within the workspace they were created.
- Slack apps do not support the legacy RTM API.
- Existing classic apps and legacy custom integration bot users will continue operating.
- After June 4, 2024 if you enter a situation where you typically would create a classic
  app or custom bot, you won't be able to.
- Your best alternative is to use these same updated techniques, though you'll find
  that some of the quirks of the legacy RTM API, like presence subscriptions, do not
  have modern equivalents.
- This API method uses an app-level token to generate a dynamic WebSocket URL.
- This will make a real API request. Beware of using it with live workspaces.
- Bot tokens ascribe to a granular permission model to request only the scopes you
  need.
- User tokens allow you to work directly on behalf of users when necessary.
- Configuration tokens are per-workspace tokens used with App Manifest APIs to create
  and configure your apps.
- App-level tokens represent your app across organizations.
- Service tokens are long-lived, non-rotatable user tokens that won't expire.
- Both non-workflow apps and workflow apps make use of access tokens.
- Requires `bookmarks:read` scope for both bot and user tokens
- 'Content types: application/x-www-form-urlencoded, application/json'
- 'Required scopes: bookmarks:read'
- Select a tokenNo tokenInvalid tokenOr, provide your own token:Need a token? Create
  and install a Slack app to begin.
- Requires `bookmarks:write` scope for both bot and user tokens.
- Rate limits apply based on Tier 2.
- Beware of using it with live workspaces.
- 'All block elements are interactive components except for one: the static image
  element.'
- 'Requires scopes: files:read for Bot and User tokens'
- Requires `files:read` scope for both bot and user tokens.
- Rate limits apply as per Tier 3.
- The file_change event is sent when any property of a file is changed.
- This event is no longer served. File comments have been phased out in favor of regular
  messages and threads.
- The file_created event is sent to all connected clients for a user when that user
  uploads a file to Slack.
- This event is not raised if the reason for a file's removal is due to a workspace's
  file retention policy.
- The file_public event is sent when a file is made public.
- The file_shared event is sent when a file is shared.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'bad_redirect_uri: Occurs when there are multiple redirect_url parameter values
  configured and they do not match.'
- 'invalid_scope: Occurs if requesting a non-existent scope or requesting a set of
  scopes that are in conflict with each other.'
- 'invalid_team_for_non_distributed_app: Occurs when attempting to install/authorize
  an undistributed Slack API app on a team where the app was not created.'
- '2 active token limit: If you refresh your credentials repeatedly before expiration,
  we will enforce a limit of 2 active tokens.'
- 'Invalid client_id or client_secret: Ensure correct credentials are used.'
- 'invalid_scope: Check that requested scopes are valid.'
- 'invalid_app_icon: Check your app setup above.'
- 'invalid_app_icon_background: Check your app setup above.'
- 'invalid_app_privacy_link: Check your app setup above.'
- 'invalid_app_tos: Check your app setup above.'
- 'uri_not_handled_by_app: Contact Slack.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'INVALID_AUTH: Check your API credentials'
- 'NOT_AUTHORIZED: Ensure app has required permissions'
- Low relevance results excluded from the results
- Non-text files excluded from the results
- Google Drive links excluded from the results if it is not installed
- 'Unauthorized: Ensure your app has the correct scopes.'
- 'error: message not found'
- 'error: invalid_auth'
- 'channel_not_found: The specified channel could not be found.'
- 'invalid_auth: Invalid authentication token.'
- 'not_in_channel: The bot is not a member of the channel.'
- 'Invalid_auth: The authentication token is invalid.'
- 'channel_not_found: The specified channel does not exist.'
- 'channel_not_found: Ensure the channel ID is correct.'
- 'invalid_auth: Check the OAuth token.'
- 'not_in_channel: The bot must be a member of the channel.'
- 'Insufficient permissions: Ensure your app has the required scopes like channels:read
  and chat:write.'
- 'Invalid_auth: Check if the bot token is correct.'
- 'channel_not_found: Ensure the channel ID is valid.'
- 'message_not_found: The scheduled message ID does not exist.'
- '400: Invalid_arguments'
- '401: Unauthorized'
- 'invalid_auth: The provided token is invalid.'
- 'not_authed: No authentication token provided.'
- 'channel_not_found: The specified channel was not found.'
- '401 Unauthorized: Check your OAuth token'
- '400 Bad Request: Check your request parameters'
- 'action_prohibited: An admin has restricted this avenue of posting messages.'
- 'channel_is_archived: The specified channel has been archived.'
- 'invalid_payload: The request is malformed.'
- 'invalid_token: The token used was expired, invalid, or missing.'
- 'no_active_hooks: The incoming webhook is disabled.'
- 'no_service: The incoming webhook is either disabled or invalid.'
- 'no_team: The Slack workspace was missing or invalid.'
- 'no_text: The text attribute was missing from the payload.'
- 'invalid_blocks: Error when passing a valid Block Kit message containing a rich
  text section element to the chat.unfurl API method.'
- 'trigger_expired: Trigger ID is expired.'
- 'trigger_exchanged: Trigger ID has already been used.'
- Your app will be returned if it's not ready for review.
- If your app is submitted with bugs, poor user experience, or issues of low quality,
  we will return it and ask you to develop it further before resubmitting.
- non_tombstoned_message_not_allowed
- external_update_not_allowed
- invalid_auth
- message_not_found
- not_authed
- team_not_found
- unknown_method
- 'non_tombstoned_message_not_allowed: Only tombstoned message are allowed to be restored.'
- 'external_update_not_allowed: Message specified was authored by a user on an external
  team.'
- 'invalid_auth: Some aspect of authentication cannot be validated. Either the provided
  token is invalid or the request originates from an IP address disallowed from making
  the request.'
- 'message_not_found: Message not found.'
- 'team_not_found: Team passed in was not found.'
- 'unknown_method: Method not found.'
- invalid_cursor
- legal_hold_not_found
- released_policy_edit_not_allowed
- too_many_entities
- max_active_entities_reached
- 'bad_endpoint: The endpoint URL does not exist.'
- 'feature_not_enabled: Audit Logs are not available on your workspace, probably because
  it is not part of an Enterpise Grid organization.'
- 'invalid_action: The action is not supported.'
- 'invalid_authentication: The authentication token is not valid. Check that the token
  is associated with an Enterprise Grid owner and that it has the auditlogs:read scope.'
- 'invalid_cursor: The pagination cursor is invalid. Check that it matches the cursor
  that was returned by the previous request.'
- 'invalid_range: The range specified in the filter is not valid. This may indicate
  a date from before the feature was enabled or at some point in the future.'
- 'invalid_workspace: The Audit Logs API can not be used with this workspace, most
  likely because it not a part of an Enterprise Grid.'
- 'method_not_allowed: This method is not allowed on the workspace or with the token
  used.'
- 'missing_authentication: The OAuth token is either missing from the header of the
  request or malformed.'
- 'rate_limited: The app is calling the API too often. Please slow down.'
- 'team_not_authorized: The app is installed on a Slack workspace but needs to be
  installed on an Enterprise Grid organization.'
- 'user_not_authorized: The user who installed the app is not an Enterprise Grid owner
  — they must be an Enterprise Grid owner.'
- 'missing_primary_email: Primary email cannot be deleted without a replacement.'
- '429 Too Many Requests: Exceeded rate limits, retry after specified time.'
- addresses_invalid
- bad_email_address
- bad_endpoint
- cannot_make_user_guest
- cannot_decode_user_id
- cannot_modify_owner
- cannot_modify_gdpr
- cannot_disable_bot_user_with_scim
- cannot_disable_primary_owner
- email_empty
- email_invalid
- email_taken
- emails_invalid
- failed_to_remove_users_for_linked_subteam
- group_members_create_failed
- group_member_max_exceeded
- group_creation_failed
- groups_invalid
- idp_group_linked_to_channels
- improper_enterprise_schema_format
- incomplete_filter
- invalid_attribute_format
- invalid_authentication
- invalid_display_name
- invalid_emoji_not_allowed
- invalid_filter_group
- invalid_name_maxlength
- invalid_name_specials
- invalid_name_required
- invalid_query
- invalid_request_payload
- invalid_reserved_word
- invalid_starts_with_at
- invalid_sort_order
- long_nickname
- method_not_allowed
- missing_authentication
- missing_primary_email
- missing_schema_element
- missing_group_id
- missing_user_id
- no_filters
- no_such_group
- no_such_group_members
- no_such_user
- non_org_teams_only
- query_building_failed
- database_query_failure
- password_change_not_allowed
- permission_denied
- phoneNumbers_invalid
- photos_invalid
- plus_teams_only
- primary_owner_check_failure
- resource_locked
- roles_invalid
- too_many_requests
- too_many_users
- truncation_error
- unable_to_add_deleted_or_guest_to_group
- unable_to_create_team_profile_fields
- unknown_user
- unsupported_version
- user_creation_failed
- username_empty
- username_invalid
- username_not_allowed
- username_required
- username_taken
- username_too_long
- 'HTTP 429: Rate limit exceeded - parse the Retry-After header and retry your request'
- 'access_denied: User denied the request.'
- '400 Bad Request: Check the request format and required fields.'
- '401 Unauthorized: Verify your app''s OAuth token.'
- '404 Not Found: Ensure the Request URL is correct.'
- 'invalid_auth: Verify your authentication credentials.'
- 'channel_not_found: Ensure the channel ID is correct and accessible.'
- 'message_not_found: The specified message could not be found.'
- 'INVALID_AUTH: Check your bot token is valid.'
- 'NOT_AUTHORIZED: Check that your bot has the necessary scopes.'
- 'trigger_expired: Use a valid trigger_id when opening a dialog.'
- There is a minor, visual issue with validation errors under input blocks.
- Socket URL has expired
- message text is missing
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Message length exceeds 16 kilobytes: Limit messages sent to channels to 4000 characters.'
- 'invalid_json: The JSON you''ve included in your POST body cannot be parsed.'
- 'json_not_object: Not actually a JSON hash of attribute key/value pairs.'
- 'HTTP 429 Too Many Requests: Wait for the number of seconds indicated in the Retry-After
  header.'
- Channel IDs can become unstable in certain situations
- MPIM events and channel types may dispatch an incorrect value for channel_type
- IM formats may differ from other channel objects
- 'invalid_auth: Invalid authentication credentials'
- 'call_not_found: The specified call does not exist'
- 'app_rate_limited: Your app has exceeded the event delivery limit.'
- 'http_timeout: Your server took longer than 3 seconds to respond to the previous
  event delivery attempt.'
- 'too_many_redirects: We''ll follow you down the rabbit hole of HTTP redirects only
  so far.'
- 'connection_failed: We just couldn''t seem to connect to your server.'
- 'ssl_error: We couldn''t verify the veracity of your SSL certificate.'
- 'http_error: We encountered an HTTP status code that was not in the HTTP 200 OK
  range.'
- 'unknown_error: We didn''t anticipate this condition arising, but prepared for it
  nonetheless.'
- 'channel_not_found: The channel ID does not exist.'
- 'rate_limited: Reduce frequency of requests.'
- 'invalid_auth: The authentication token is invalid.'
- 'missing_trigger_id: No trigger_id was provided.'
- 'view_not_found: The view could not be found.'
- 'ok: false: Invalid token'
- 'ok: false: User not found'
- '404: If the user does not have access to the channel or the channel does not exist.'
- 'invalid_auth: Invalid authentication credentials provided.'
- 'rate_limited: Rate limit exceeded, retry after the specified time.'
- 'not_in_channel: The API token is not a member of the channel.'
- 'invalid_auth: The provided authentication token is invalid'
- 'not_in_channel: The bot is not in the channel'
- 'invalid_manifest: The manifest you supplied didn''t match the correct schema.'
- 'token_expired: Token has expired and needs to be refreshed.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'rate_limited: Too many requests, please try again later.'
- 'invalid_auth: The provided authentication is invalid.'
- 'cli_update_required: Attempt to log in with an older version; run slack upgrade
  to get the latest version.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'rate_limit_exceeded: Throttle API calls or reduce frequency'
- 'method_deprecated: Migrate to newer methods'
- 'invalid_auth: Token is invalid or expired.'
- 'limit_required: Limit required error when calling methods for teams with large
  responses.'
- 'cli_update_required: Update Slack CLI version'
- 'app_rate_limited: Your application has exceeded the rate limit for events.'
- 'too_many_redirects: We''ll follow you down the rabbit hole of HTTP redirects only
  so far. If we encounter more than 2, we''ll retry the request in hopes it won''t
  be that many this time.'
- 'connection_failed: We just couldn''t seem to connect to your server. Maybe we couldn''t
  find it in DNS or maybe your host is unreachable.'
- access_token_exchange_failed
- external_user_identity_not_found
- internal_error
- invalid_identity_config_response
- invalid_token_response
- missing_client_secret
- no_refresh_token
- oauth2_callback_error
- oauth2_exchange_error
- scope_mismatch_error
- token_not_found
- 'PermissionDenied: Detected missing network permissions'
- 'Invalid channel: Ensure the channel ID is correct.'
- 'not_in_channel: The user is not in the channel.'
- 'Rate limiting: max out at 30,000 events per workspace per app per 60 minutes.'
- Failure conditions include SSL certificate issues, long response times, excessive
  redirects, or non-200 responses.
- 'unknown_error: We didn''t anticipate this condition arising.'
- 'request_failed: Check the request parameters or try again later'
- 'invalid_auth: Verify the authentication credentials'
- 'ok: false: Invalid token: Ensure the token is valid and has not expired'
- '400: Bad Request - The request was unacceptable.'
- '401: Unauthorized - Invalid authentication credentials.'
- '404: Not Found - The requested resource could not be found.'
- API calls made from the app will be rejected.
- 'Invalid token: Ensure the token has the required scopes.'
- 'forbidden_team: The authenticated team cannot use this API'
- 'insecure_request: The method was not called via a POST request.'
- 'internal_error: The server could not complete your operation(s) without encountering
  an error, likely due to a transient issue on our end. It''s possible some aspect
  of the operation succeeded before the error was raised.'
- 'missing_args: An app-level token wasn''t provided.'
- 'access_denied: Access to a resource specified in the request is denied.'
- 'account_inactive: Authentication token is for a deleted user or workspace when
  using a bot token.'
- 'deprecated_endpoint: The endpoint has been deprecated.'
- 'ekm_access_denied: Administrators have suspended the ability to post a message.'
- 'enterprise_is_restricted: The method cannot be called from an Enterprise.'
- 'is_bot: This method cannot be called by a legacy bot.'
- 'method_deprecated: The method has been deprecated.'
- 'missing_scope: The token used is not granted the specific scope permissions required
  to complete this request.'
- 'not_allowed_token_type: The token type used in this request is not allowed.'
- 'no_permission: The workspace token used in this request does not have the permissions
  necessary to complete the request. Make sure your app is a member of the conversation
  it''s attempting to post a message to.'
- 'org_login_required: The workspace is undergoing an enterprise migration and will
  not be available until migration is complete.'
- 'token_expired: Authentication token has expired'
- 'token_revoked: Authentication token is for a deleted user or workspace or the app
  has been removed when using a user token.'
- 'two_factor_setup_required: Two factor setup is required.'
- 'accesslimited: Access to this method is limited on the current network'
- 'fatal_error: The server could not complete your operation(s) without encountering
  a catastrophic error. It''s possible some aspect of the operation succeeded before
  the error was raised.'
- 'invalid_arg_name: The method was passed an argument whose name falls outside the
  bounds of accepted or expected values. This includes very long names and names with
  non-alphanumeric characters other than _.'
- 'invalid_arguments: The method was either called with invalid arguments or some
  detail about the arguments passed is invalid, which is more likely when using complex
  arguments like blocks or attachments.'
- 'invalid_array_arg: The method was passed an array as an argument. Please only input
  valid strings.'
- 'invalid_charset: The method was called via a POST request, but the charset specified
  in the Content-Type header was invalid. Valid charset names are: utf-8 iso-8859-1.'
- 'invalid_form_data: The method was called via a POST request with Content-Type application/x-www-form-urlencoded
  or multipart/form-data, but the form data was either missing or syntactically invalid.'
- 'invalid_post_type: The method was called via a POST request, but the specified
  Content-Type was invalid. Valid types are: application/json application/x-www-form-urlencoded
  multipart/form-data text/plain.'
- 'missing_post_type: The method was called via a POST request and included a data
  payload, but the request did not include a Content-Type header.'
- 'ratelimited: The request has been ratelimited. Refer to the Retry-After header
  for when to retry the request.'
- 'request_timeout: The method was called via a POST request, but the POST data was
  either missing or truncated.'
- 'service_unavailable: The service is temporarily unavailable'
- 'team_added_to_org: The workspace associated with your request is currently undergoing
  migration to an Enterprise Organization. Web API and other platform operations will
  be intermittently unavailable until the transition is complete.'
- Invalid token
- method_not_supported
- restricted_action
- error_modifying_workflows
- access_denied
- account_inactive
- deprecated_endpoint
- ekm_access_denied
- enterprise_is_restricted
- is_bot
- method_deprecated
- missing_scope
- not_allowed_token_type
- no_permission
- org_login_required
- token_expired
- token_revoked
- two_factor_setup_required
- team_access_not_granted
- accesslimited
- fatal_error
- invalid_arg_name
- invalid_arguments
- invalid_array_arg
- invalid_charset
- invalid_form_data
- invalid_post_type
- missing_post_type
- ratelimited
- request_timeout
- service_unavailable
- team_added_to_org
- 'No token: Provide a valid token'
- 'Invalid token: Ensure the token is correct'
- 'Rate limit exceeded: Adhere to rate limits for Tier 2'
- channel_not_found
- error_invalid_channels
- 'token: Required'
- No token
- No token provided
- file_deleted
- file_not_found
- not_visible
- 'missing_argument: A required argument is missing.'
- 'Invalid token: Provide a valid token.'
- Need a token? Create and install a Slack app to begin.
- 'Invalid file ID: Ensure the file ID is correct.'
- 'Invalid_auth: Check your authentication credentials.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Signing Secret
  - verification tokens
  - openid
  - profile
  - email
  - SLACK_BOT_TOKEN
  - SlackApiException
  - WebClient
  - admin.teams:write
  - admin.teams:read
  - admin.users:write
  - admin.conversations:read
  - admin.conversations:write
  - admin.invites:read
  - admin.invites:write
  - Slack app
  - OAuth token
  - admin scope
  - OAuth authorization request
  - Slack apps
  - Web API
  - Events API
  - RTM API
  - Slash Commands
  - incoming webhooks
  - workflow.steps:execute
  - Bearer token
  - OAuth 2.0
  - OAuth scope
  - Bot User OAuth Access Token
  - users:read.email
  - User
  - Legacy bot
  - Bot
  - Granular bot
  - token_url
  - account_identifier
  - identity_config
  - files:read
client:
  base_url: https://slack.com/api
  auth:
    type: oauth2
source_metadata: null
