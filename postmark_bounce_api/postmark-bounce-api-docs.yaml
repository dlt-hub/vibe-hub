resources:
- name: bounces
  endpoint:
    path: /bounces
    method: GET
    data_selector: Bounces
    params: {}
- name: send_email
  endpoint:
    path: /email
    method: POST
    data_selector: Message
    params: {}
- name: delivery_stats
  endpoint:
    path: /deliverystats
    method: GET
    data_selector: InactiveMails
    params: {}
- name: bounces
  endpoint:
    path: /bounces
    method: GET
    data_selector: Bounces
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
    params: {}
- name: bounces
  endpoint:
    path: /bounce
    method: GET
    data_selector: records
    params: {}
- name: bounces
  endpoint:
    path: /bounces
    method: GET
    data_selector: Bounces
    params:
      count: required
      offset: required
      type: ''
      inactive: ''
      emailFilter: ''
      tag: ''
      messageID: ''
      fromdate: ''
      todate: ''
      messagestream: ''
- name: single_bounce
  endpoint:
    path: /bounces/{bounceid}
    method: GET
    data_selector: ''
    params: {}
- name: bounce_dump
  endpoint:
    path: /bounces/{bounceid}/dump
    method: GET
    data_selector: ''
    params: {}
- name: activate_bounce
  endpoint:
    path: /bounces/{bounceid}/activate
    method: PUT
    data_selector: ''
    params: {}
- name: delivery_stats
  endpoint:
    path: /deliverystats
    method: GET
    data_selector: InactiveMails
    params: {}
- name: bounces
  endpoint:
    path: /bounces
    method: GET
    data_selector: Bounces
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: Message
    params: {}
- name: bounces
  endpoint:
    path: /bounces
    method: GET
    data_selector: Bounces
    params:
      count: '50'
      offset: '0'
- name: single_bounce
  endpoint:
    path: /bounces/{bounceid}
    method: GET
    data_selector: Bounce
- name: bounce_dump
  endpoint:
    path: /bounces/{bounceid}/dump
    method: GET
    data_selector: Body
- name: activate_bounce
  endpoint:
    path: /bounces/{bounceid}/activate
    method: PUT
    data_selector: Bounce
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: response
    params: {}
- name: Email API
  endpoint:
    path: /email-api
    method: GET
    data_selector: records
    params: {}
- name: SMTP Service
  endpoint:
    path: /smtp-service
    method: GET
    data_selector: records
    params: {}
- name: Message Streams
  endpoint:
    path: /message-streams
    method: GET
    data_selector: records
    params: {}
- name: Transactional Email
  endpoint:
    path: /transactional-email
    method: GET
    data_selector: records
    params: {}
- name: Email Delivery
  endpoint:
    path: /email-delivery
    method: GET
    data_selector: records
    params: {}
- name: Email Templates
  endpoint:
    path: /email-templates
    method: GET
    data_selector: records
    params: {}
- name: Inbound Email
  endpoint:
    path: /inbound-email
    method: GET
    data_selector: records
    params: {}
- name: Analytics & Retention
  endpoint:
    path: /email-analytics
    method: GET
    data_selector: records
    params: {}
- name: Integrations
  endpoint:
    path: /integrations
    method: GET
    data_selector: records
    params: {}
- name: email_api
  endpoint:
    path: /email-api
    method: GET
- name: smtp_service
  endpoint:
    path: /smtp-service
    method: GET
- name: message_streams
  endpoint:
    path: /message-streams
    method: GET
- name: transactional_email
  endpoint:
    path: /transactional-email
    method: GET
- name: email_delivery
  endpoint:
    path: /email-delivery
    method: GET
- name: email_templates
  endpoint:
    path: /email-templates
    method: GET
- name: inbound_email
  endpoint:
    path: /inbound-email
    method: GET
- name: analytics
  endpoint:
    path: /email-analytics
    method: GET
- name: webhooks
  endpoint:
    path: /email-webhooks
    method: GET
- name: security
  endpoint:
    path: /security
    method: GET
- name: email_experts
  endpoint:
    path: /email-experts
    method: GET
- name: rebound
  endpoint:
    path: /rebound
    method: GET
- name: email_api
  endpoint:
    path: /email-api
    method: GET
    data_selector: records
- name: smtp_service
  endpoint:
    path: /smtp-service
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: templates
  endpoint:
    path: /templates
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: response
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: send_email
  endpoint:
    path: /email
    method: POST
    data_selector: message
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: response
    params: {}
- name: message_stream
  endpoint:
    path: /message-streams
    method: GET
    data_selector: MessageStreams
    params: {}
- name: send_email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: Transactional Emails
  endpoint:
    path: /email-api
    method: POST
    data_selector: emails
    params: {}
- name: message_streams
  endpoint:
    path: /message-streams
    method: GET
    data_selector: MessageStreams
    params: {}
- name: emails
  endpoint:
    path: /email
    method: POST
    data_selector: Emails
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: Message
    params: {}
- name: email_templates
  endpoint:
    path: /email-templates
    method: GET
    data_selector: templates
- name: transactional_emails
  endpoint:
    path: /transactional-email
    method: GET
    data_selector: emails
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: inbound_email
  endpoint:
    path: /email/inbound
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: email_activity
  endpoint:
    path: /email/activity
    method: GET
    data_selector: records
- name: message_streams
  endpoint:
    path: /message-streams
    method: GET
    data_selector: records
- name: email_templates
  endpoint:
    path: /email-templates
    method: GET
- name: email_api
  endpoint:
    path: /email-api
    method: GET
- name: smtp_service
  endpoint:
    path: /smtp-service
    method: GET
- name: inbound_email
  endpoint:
    path: /inbound-email
    method: POST
    data_selector: json
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: data
    params: {}
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: data
    params: {}
- name: email_activity
  endpoint:
    path: /email/activity
    method: GET
    data_selector: activity_records
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: message_records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: inbound
  endpoint:
    path: /inbound
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: response
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: null
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
    params: {}
- name: email_api
  endpoint:
    path: /email-api
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: Message Streams
  endpoint:
    path: /message-streams
    method: GET
    data_selector: streams
    params: {}
- name: Email API
  endpoint:
    path: /email-api
    method: GET
    data_selector: emails
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: email_api
  endpoint:
    path: /email-api
    method: GET
- name: smtp_service
  endpoint:
    path: /smtp-service
    method: GET
- name: Email API
  endpoint:
    path: /email-api
    method: POST
    data_selector: messages
    params: {}
- name: SMTP Service
  endpoint:
    path: /smtp
    method: GET
    data_selector: smtp_data
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: inbound_email
  endpoint:
    path: /inbound
    method: GET
    data_selector: records
- name: email_api
  endpoint:
    path: /email-api
    method: POST
    data_selector: records
- name: smtp_service
  endpoint:
    path: /smtp-service
    method: POST
    data_selector: records
- name: Email API
  endpoint:
    path: /email/api
    method: POST
    data_selector: records
- name: SMTP Service
  endpoint:
    path: /smtp/api
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: Email
  endpoint:
    path: /email-api
    method: POST
    data_selector: records
- name: Bulk
  endpoint:
    path: /bulk
    method: POST
    data_selector: records
- name: Bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: records
- name: Template
  endpoint:
    path: /templates
    method: GET
    data_selector: records
- name: Server
  endpoint:
    path: /server
    method: GET
    data_selector: records
- name: Message Streams
  endpoint:
    path: /message-streams
    method: GET
    data_selector: records
- name: Messages
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: Domains
  endpoint:
    path: /domains
    method: GET
    data_selector: records
- name: Sender signatures
  endpoint:
    path: /signatures
    method: GET
    data_selector: records
- name: Stats
  endpoint:
    path: /stats
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: data
    params: {}
- name: bulk_email
  endpoint:
    path: /bulk-email
    method: POST
    data_selector: data
    params: {}
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: data
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
    params: {}
- name: bounce
  endpoint:
    path: /bounces
    method: GET
    data_selector: records
    params: {}
- name: send_email
  endpoint:
    path: /email
    method: POST
    data_selector: response
    params: {}
- name: Email API
  endpoint:
    path: /email-api
    method: GET
- name: Bulk Email
  endpoint:
    path: /bulk-email
    method: GET
- name: Bounce API
  endpoint:
    path: /bounce-api
    method: GET
- name: Templates API
  endpoint:
    path: /templates-api
    method: GET
- name: Server API
  endpoint:
    path: /server-api
    method: GET
- name: Servers API
  endpoint:
    path: /servers-api
    method: GET
- name: Message Streams API
  endpoint:
    path: /message-streams-api
    method: GET
- name: Messages API
  endpoint:
    path: /messages-api
    method: GET
- name: Domains API
  endpoint:
    path: /domains-api
    method: GET
- name: Sender signatures API
  endpoint:
    path: /signatures-api
    method: GET
- name: Stats API
  endpoint:
    path: /stats-api
    method: GET
- name: Inbound rules triggers API
  endpoint:
    path: /inbound-rules-triggers-api
    method: GET
- name: Webhooks API
  endpoint:
    path: /webhooks-api
    method: GET
- name: Suppressions API
  endpoint:
    path: /suppressions-api
    method: GET
- name: Data Removal API
  endpoint:
    path: /data-removals-api
    method: GET
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounces
    method: GET
    data_selector: Bounces
    params: {}
- name: delivery
  endpoint:
    path: /deliveries
    method: GET
    data_selector: Deliveries
    params: {}
- name: open_tracking
  endpoint:
    path: /open-tracking
    method: GET
    data_selector: OpenTracking
    params: {}
- name: click_tracking
  endpoint:
    path: /click-tracking
    method: GET
    data_selector: ClickTracking
    params: {}
- name: spam_complaint
  endpoint:
    path: /spam-complaints
    method: GET
    data_selector: SpamComplaints
    params: {}
- name: subscription_change
  endpoint:
    path: /subscription-changes
    method: GET
    data_selector: SubscriptionChanges
    params: {}
- name: send_email
  endpoint:
    path: /email
    method: POST
    data_selector: ''
    params: {}
- name: send_email_with_template
  endpoint:
    path: /email/withTemplate
    method: POST
    data_selector: Message
    params: {}
- name: send_batch_with_templates
  endpoint:
    path: /email/withTemplate
    method: POST
    data_selector: Messages
    params: {}
- name: bounce_webhook
  endpoint:
    path: /webhooks/bounce
    method: POST
    data_selector: RecordType
    params: {}
- name: delivery_webhook
  endpoint:
    path: /webhooks/delivery
    method: POST
    data_selector: RecordType
    params: {}
- name: open_tracking_webhook
  endpoint:
    path: /webhooks/open
    method: POST
    data_selector: RecordType
    params: {}
- name: click_tracking_webhook
  endpoint:
    path: /webhooks/click
    method: POST
    data_selector: RecordType
    params: {}
- name: spam_complaint_webhook
  endpoint:
    path: /webhooks/spam-complaint
    method: POST
    data_selector: RecordType
    params: {}
- name: subscription_change_webhook
  endpoint:
    path: /webhooks/subscription-change
    method: POST
    data_selector: RecordType
    params: {}
- name: send_email
  endpoint:
    path: /email/withTemplate
    method: POST
    data_selector: Message
    params: {}
- name: send_batch_emails
  endpoint:
    path: /batch-email
    method: POST
    data_selector: Messages
    params: {}
- name: bounce
  endpoint:
    path: /webhooks/bounce
    method: POST
    data_selector: RecordType
    params: {}
- name: delivery
  endpoint:
    path: /webhooks/delivery
    method: POST
    data_selector: RecordType
    params: {}
- name: open_tracking
  endpoint:
    path: /webhooks/open
    method: POST
    data_selector: RecordType
    params: {}
- name: click_tracking
  endpoint:
    path: /webhooks/click
    method: POST
    data_selector: RecordType
    params: {}
- name: spam_complaint
  endpoint:
    path: /webhooks/spam-complaint
    method: POST
    data_selector: RecordType
    params: {}
- name: subscription_change
  endpoint:
    path: /webhooks/subscription-change
    method: POST
    data_selector: RecordType
    params: {}
- name: templates
  endpoint:
    path: /templates/push
    method: PUT
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: inbound_messages
  endpoint:
    path: /inbound
    method: POST
    data_selector: messages
- name: send_email
  endpoint:
    path: /email
    method: POST
    data_selector: Message
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: Message
    params: {}
- name: stats
  endpoint:
    path: /stats/outbound/opens
    method: GET
    data_selector: opens
    params: {}
- name: bounce
  endpoint:
    path: /webhooks/bounce
    method: POST
    data_selector: RecordType
    params: {}
- name: delivery
  endpoint:
    path: /webhooks/delivery
    method: POST
    data_selector: RecordType
    params: {}
- name: open
  endpoint:
    path: /webhooks/open
    method: POST
    data_selector: RecordType
    params: {}
- name: click
  endpoint:
    path: /webhooks/click
    method: POST
    data_selector: RecordType
    params: {}
- name: spam_complaint
  endpoint:
    path: /webhooks/spam-complaint
    method: POST
    data_selector: RecordType
    params: {}
- name: subscription_change
  endpoint:
    path: /webhooks/subscription-change
    method: POST
    data_selector: RecordType
    params: {}
- name: inbound_messages
  endpoint:
    path: /webhook
    method: POST
    data_selector: messages
- name: Email API
  endpoint:
    path: /email-api
    method: GET
- name: SMTP Service
  endpoint:
    path: /smtp-service
    method: GET
- name: Message Streams
  endpoint:
    path: /message-streams
    method: GET
- name: Transactional Email
  endpoint:
    path: /transactional-email
    method: GET
- name: Email Delivery
  endpoint:
    path: /email-delivery
    method: GET
- name: Email Templates
  endpoint:
    path: /email-templates
    method: GET
- name: Inbound Email
  endpoint:
    path: /inbound-email
    method: GET
- name: Analytics & Retention
  endpoint:
    path: /email-analytics
    method: GET
- name: Integrations
  endpoint:
    path: /integrations
    method: GET
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: stats
  endpoint:
    path: /stats/outbound/opens
    method: GET
    data_selector: opens
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: Email API
  endpoint:
    path: /email-api
    method: GET
- name: SMTP Service
  endpoint:
    path: /smtp-service
    method: GET
- name: Message Streams
  endpoint:
    path: /message-streams
    method: GET
- name: Transactional Email
  endpoint:
    path: /transactional-email
    method: GET
- name: Email Delivery
  endpoint:
    path: /email-delivery
    method: GET
- name: Email Templates
  endpoint:
    path: /email-templates
    method: GET
- name: Inbound Email
  endpoint:
    path: /inbound-email
    method: GET
- name: Analytics & Retention
  endpoint:
    path: /email-analytics
    method: GET
- name: Integrations
  endpoint:
    path: /integrations
    method: GET
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
- name: templates
  endpoint:
    path: /templates
    method: GET
    data_selector: templates
- name: Email API
  endpoint:
    path: /email-api
    method: GET
- name: SMTP Service
  endpoint:
    path: /smtp-service
    method: GET
- name: Message Streams
  endpoint:
    path: /message-streams
    method: GET
- name: Transactional Email
  endpoint:
    path: /transactional-email
    method: GET
- name: Email Delivery
  endpoint:
    path: /email-delivery
    method: GET
- name: Email Templates
  endpoint:
    path: /email-templates
    method: GET
- name: Inbound Email
  endpoint:
    path: /inbound-email
    method: GET
- name: Analytics & Retention
  endpoint:
    path: /email-analytics
    method: GET
- name: Integrations
  endpoint:
    path: /integrations
    method: GET
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: templates
  endpoint:
    path: /templates
    method: GET
    data_selector: records
- name: email_api
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: smtp_service
  endpoint:
    path: /smtp
    method: POST
    data_selector: records
- name: Email API
  endpoint:
    path: /email-api
    method: GET
- name: SMTP Service
  endpoint:
    path: /smtp-service
    method: GET
- name: Message Streams
  endpoint:
    path: /message-streams
    method: GET
- name: Transactional Email
  endpoint:
    path: /transactional-email
    method: GET
- name: Email Delivery
  endpoint:
    path: /email-delivery
    method: GET
- name: Email Templates
  endpoint:
    path: /email-templates
    method: GET
- name: Inbound Email
  endpoint:
    path: /inbound-email
    method: GET
- name: Analytics & Retention
  endpoint:
    path: /email-analytics
    method: GET
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email/send
    method: POST
    data_selector: message
- name: templates
  endpoint:
    path: /templates
    method: GET
    data_selector: templates
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: data
    params: {}
- name: bounce_webhook
  endpoint:
    path: /webhooks/bounce
    method: POST
    data_selector: bounce_webhook
- name: delivery_webhook
  endpoint:
    path: /webhooks/delivery
    method: POST
    data_selector: delivery_webhook
- name: spam_complaint_webhook
  endpoint:
    path: /webhooks/spam-complaint
    method: POST
    data_selector: spam_complaint_webhook
- name: open_tracking_webhook
  endpoint:
    path: /webhooks/open
    method: POST
    data_selector: open_tracking_webhook
- name: click_tracking_webhook
  endpoint:
    path: /webhooks/click
    method: POST
    data_selector: click_tracking_webhook
- name: rebound
  endpoint:
    path: /rebound
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: templates
  endpoint:
    path: /templates
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email-api
    method: POST
    data_selector: data
    params: {}
- name: smtp
  endpoint:
    path: /smtp-service
    method: POST
    data_selector: data
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bounce_webhook
  endpoint:
    path: /webhooks/bounce
    method: POST
    data_selector: records
- name: delivery_webhook
  endpoint:
    path: /webhooks/delivery
    method: POST
    data_selector: records
- name: spam_complaint_webhook
  endpoint:
    path: /webhooks/spam
    method: POST
    data_selector: records
- name: open_tracking_webhook
  endpoint:
    path: /webhooks/open
    method: POST
    data_selector: records
- name: click_tracking_webhook
  endpoint:
    path: /webhooks/click
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: dedicated_ips
  endpoint:
    path: /dedicated-ips
    method: GET
- name: rebound
  endpoint:
    path: /rebound
    method: GET
    data_selector: data
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: templates
  endpoint:
    path: /templates
    method: GET
    data_selector: templates
    params: {}
- name: Email API
  endpoint:
    path: /email-api
    method: POST
    data_selector: messages
    params: {}
- name: SMTP Service
  endpoint:
    path: /smtp-service
    method: POST
    data_selector: messages
    params: {}
- name: email_with_template
  endpoint:
    path: /email/withTemplate
    method: POST
    data_selector: records
- name: email_batch
  endpoint:
    path: /email/batch
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: templates
  endpoint:
    path: /templates
    method: GET
    data_selector: templates
- name: email_with_template
  endpoint:
    path: /email/withTemplate
    method: POST
    data_selector: response
    params: {}
- name: email_batch
  endpoint:
    path: /email/batch
    method: POST
    data_selector: response
    params: {}
- name: email
  endpoint:
    path: /email-api
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounce-api
    method: GET
    data_selector: records
- name: template
  endpoint:
    path: /templates-api
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
- name: bounce
  endpoint:
    path: /bounces
    method: GET
    data_selector: bounces
- name: email_api
  endpoint:
    path: /email-api
    method: GET
- name: smtp_service
  endpoint:
    path: /smtp-service
    method: GET
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: Message
    params: {}
- name: stats
  endpoint:
    path: /stats
    method: GET
    data_selector: Statistics
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
- name: bulk_email
  endpoint:
    path: /bulk
    method: POST
    data_selector: messages
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: bounces
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: bounces
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bulk_email
  endpoint:
    path: /bulk-email
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
- name: bounces
  endpoint:
    path: /bounces
    method: GET
    data_selector: bounces
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bulk_email
  endpoint:
    path: /bulk-email
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email-api
    method: POST
- name: bulk_email
  endpoint:
    path: /bulk
    method: POST
- name: bounce
  endpoint:
    path: /bounce-api
    method: GET
- name: templates
  endpoint:
    path: /templates-api
    method: GET
- name: server
  endpoint:
    path: /server-api
    method: GET
- name: stats
  endpoint:
    path: /stats-api
    method: GET
- name: send_email
  endpoint:
    path: /email
    method: POST
    data_selector: response
    params: {}
- name: bulk_email
  endpoint:
    path: /bulk-email
    method: POST
    data_selector: response
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounces
    method: GET
    data_selector: records
- name: send_email
  endpoint:
    path: /email
    method: POST
    data_selector: MessageID
- name: send_batch_emails
  endpoint:
    path: /email/batch
    method: POST
    data_selector: MessageID
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: bounces
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email-api
    method: POST
    data_selector: records
- name: bulk_email
  endpoint:
    path: /bulk
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: records
- name: templates
  endpoint:
    path: /templates
    method: GET
    data_selector: records
- name: stats
  endpoint:
    path: /stats
    method: GET
    data_selector: records
- name: send_email
  endpoint:
    path: /email/send
    method: POST
    data_selector: null
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: MessageID
- name: email_batch
  endpoint:
    path: /email/batch
    method: POST
    data_selector: MessageID
- name: Email
  endpoint:
    path: /email-api
    method: POST
- name: Bulk
  endpoint:
    path: /bulk
    method: POST
- name: Bounce
  endpoint:
    path: /bounce
    method: GET
- name: inbound_messages
  endpoint:
    path: /inbound
    method: POST
    data_selector: messages
- name: email
  endpoint:
    path: /email/send
    method: POST
    data_selector: results
    params: {}
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: bounces
    params: {}
- name: template
  endpoint:
    path: /templates
    method: GET
    data_selector: templates
    params: {}
- name: tracking_opens
  endpoint:
    path: /developer/user-guide/tracking-opens
    method: GET
- name: inbound_email
  endpoint:
    path: /inbound
    method: POST
    data_selector: payload
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bulk_email
  endpoint:
    path: /bulk
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: records
- name: Tracking opens
  endpoint:
    path: /developer/user-guide/tracking-opens
    method: GET
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: records
- name: templates
  endpoint:
    path: /templates
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
    params: {}
- name: bulk_email
  endpoint:
    path: /bulk
    method: POST
    data_selector: records
    params: {}
- name: servers
  endpoint:
    path: /developer/api/servers-api
    method: GET
    data_selector: records
- name: sender_signatures
  endpoint:
    path: /developer/api/signatures-api
    method: GET
    data_selector: records
- name: link_tracking
  endpoint:
    path: /email/track
    method: POST
    data_selector: links
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
    params: {}
- name: bulk_email
  endpoint:
    path: /bulk-email
    method: POST
    data_selector: records
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bulk_email
  endpoint:
    path: /bulk
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: records
- name: templates
  endpoint:
    path: /templates
    method: GET
    data_selector: records
- name: server
  endpoint:
    path: /server
    method: GET
    data_selector: records
- name: servers
  endpoint:
    path: /servers
    method: GET
    data_selector: servers
- name: sender_signatures
  endpoint:
    path: /sender-signatures
    method: GET
    data_selector: senderSignatures
- name: email
  endpoint:
    path: /email-api
    method: POST
    data_selector: records
- name: bulk_email
  endpoint:
    path: /bulk-email
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounce-api
    method: GET
    data_selector: records
- name: templates
  endpoint:
    path: /templates-api
    method: GET
    data_selector: records
- name: server
  endpoint:
    path: /server-api
    method: GET
    data_selector: records
- name: stats
  endpoint:
    path: /stats-api
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: bulk_email
  endpoint:
    path: /bulk
    method: POST
    data_selector: messages
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: stats
  endpoint:
    path: /stats
    method: GET
    data_selector: records
- name: Email
  endpoint:
    path: /email
    method: POST
    data_selector: data
- name: Bulk
  endpoint:
    path: /bulk
    method: POST
    data_selector: data
- name: Bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: data
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: bulk_email
  endpoint:
    path: /bulk/email
    method: POST
    data_selector: message
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: Message
    params: {}
- name: batch_email
  endpoint:
    path: /email/batch
    method: POST
    data_selector: MessageBatch
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounces
    method: GET
    data_selector: records
- name: batch_email
  endpoint:
    path: /email/batch
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bulk_email
  endpoint:
    path: /bulk-email
    method: POST
    data_selector: records
- name: send_email
  endpoint:
    path: /email
    method: POST
    data_selector: response
    params: {}
- name: send_batch_emails
  endpoint:
    path: /email/batch
    method: POST
    data_selector: response
    params: {}
- name: bulk_email
  endpoint:
    path: /bulk-email
    method: POST
- name: email_batch
  endpoint:
    path: /email/batch
    method: POST
    data_selector: records
- name: bulk_email
  endpoint:
    path: /email/bulk
    method: POST
    data_selector: Messages
    params: {}
- name: bulk_request_status
  endpoint:
    path: /email/bulk/{bulk-request-id}
    method: GET
    data_selector: Status
    params: {}
- name: Email
  endpoint:
    path: /email-api
    method: POST
    data_selector: records
- name: Bulk
  endpoint:
    path: /bulk-email
    method: POST
    data_selector: records
- name: Bounce
  endpoint:
    path: /bounce-api
    method: GET
    data_selector: records
- name: Templates
  endpoint:
    path: /templates-api
    method: GET
    data_selector: records
- name: Server
  endpoint:
    path: /server-api
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: messages
- name: templates
  endpoint:
    path: /templates
    method: GET
    data_selector: templates
- name: bulk_email
  endpoint:
    path: /bulk-email
    method: POST
- name: Send email with template
  endpoint:
    path: /email/withTemplate
    method: POST
    data_selector: response
    params: {}
- name: Send batch with templates
  endpoint:
    path: /email/batchWithTemplate
    method: POST
    data_selector: response
    params: {}
- name: batchWithTemplates
  endpoint:
    path: /email/batchWithTemplates
    method: POST
    data_selector: Messages
- name: pushTemplates
  endpoint:
    path: /templates/push
    method: PUT
    data_selector: Templates
- name: getTemplate
  endpoint:
    path: /templates/{templateIdOrAlias}
    method: GET
    data_selector: Template
- name: validateTemplate
  endpoint:
    path: /templates
    method: POST
    data_selector: Template
- name: deleteTemplate
  endpoint:
    path: /templates/{templateIdOrAlias}
    method: DELETE
    data_selector: Template
- name: validate_template
  endpoint:
    path: /templates/validate
    method: POST
    data_selector: AllContentIsValid
- name: delete_template
  endpoint:
    path: /templates/{templateIdOrAlias}
    method: DELETE
    data_selector: Message
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: stats
  endpoint:
    path: /stats
    method: GET
    data_selector: records
- name: bulk_email
  endpoint:
    path: /email/bulk
    method: POST
    data_selector: Messages
- name: bulk_request_status
  endpoint:
    path: /email/bulk/{bulk-request-id}
    method: GET
    data_selector: ID
- name: server
  endpoint:
    path: /server
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
- name: templates
  endpoint:
    path: /templates
    method: GET
- name: server
  endpoint:
    path: /server
    method: PUT
    data_selector: records
    params: {}
- name: send_email_with_template
  endpoint:
    path: /email/withTemplate
    method: POST
    data_selector: ''
    params: {}
- name: servers
  endpoint:
    path: /servers
    method: GET
    data_selector: '[]'
- name: messages
  endpoint:
    path: /email
    method: POST
    data_selector: '[]'
- name: server
  endpoint:
    path: /servers/{serverid}
    method: GET
    data_selector: records
- name: list_servers
  endpoint:
    path: /servers
    method: GET
    data_selector: records
- name: batchWithTemplates
  endpoint:
    path: /email/batchWithTemplates
    method: POST
    data_selector: Messages
- name: pushTemplates
  endpoint:
    path: /templates/push
    method: PUT
    data_selector: SourceServerID
- name: getTemplate
  endpoint:
    path: /templates/{templateIdOrAlias}
    method: GET
    data_selector: TemplateId
- name: validateTemplate
  endpoint:
    path: /templates
    method: POST
    data_selector: Name
- name: deleteTemplate
  endpoint:
    path: /templates/{templateIdOrAlias}
    method: DELETE
    data_selector: Name
- name: servers
  endpoint:
    path: /servers
    method: POST
    data_selector: ''
    params: {}
- name: list_servers
  endpoint:
    path: /servers
    method: GET
    data_selector: Servers
    params:
      count: 50
      offset: 0
- name: update_server
  endpoint:
    path: /servers/{serverid}
    method: PUT
    data_selector: ''
    params: {}
- name: templates
  endpoint:
    path: /templates/{templateIdOrAlias}
    method: DELETE
    data_selector: ErrorCode
    params: {}
- name: validate_template
  endpoint:
    path: /templates/validate
    method: POST
    data_selector: AllContentIsValid
    params: {}
- name: servers
  endpoint:
    path: /servers/{serverid}
    method: DELETE
    data_selector: Message
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bulk_email
  endpoint:
    path: /bulk-email
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: messages
    params: {}
- name: bulk_email
  endpoint:
    path: /bulk-email
    method: POST
    data_selector: bulkMessages
    params: {}
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: bounces
    params: {}
- name: server
  endpoint:
    path: /server
    method: GET
    data_selector: records
- name: message_streams
  endpoint:
    path: /message-streams
    method: GET
- name: server
  endpoint:
    path: /server
    method: PUT
    data_selector: ''
    params: {}
- name: message_streams
  endpoint:
    path: /message-streams
    method: POST
    data_selector: ID
    params: {}
- name: message_stream_detail
  endpoint:
    path: /message-streams/{stream_ID}
    method: GET
    data_selector: ID
    params: {}
- name: archive_message_stream
  endpoint:
    path: /message-streams/{stream_ID}/archive
    method: POST
    data_selector: ID
    params: {}
- name: unarchive_message_stream
  endpoint:
    path: /message-streams/{stream_ID}/unarchive
    method: POST
    data_selector: ID
    params: {}
- name: servers
  endpoint:
    path: /servers
    method: GET
    data_selector: Servers
- name: messages
  endpoint:
    path: /email
    method: POST
    data_selector: Message
- name: email
  endpoint:
    path: /email-api
    method: POST
- name: bulk_email
  endpoint:
    path: /bulk-email
    method: POST
- name: bounce
  endpoint:
    path: /bounce-api
    method: GET
- name: template
  endpoint:
    path: /templates-api
    method: GET
- name: server
  endpoint:
    path: /server-api
    method: GET
- name: stats
  endpoint:
    path: /stats-api
    method: GET
- name: webhooks
  endpoint:
    path: /webhooks-api
    method: GET
- name: get_server
  endpoint:
    path: /servers/{serverid}
    method: GET
    data_selector: records
- name: list_servers
  endpoint:
    path: /servers
    method: GET
    data_selector: records
- name: servers
  endpoint:
    path: /servers
    method: POST
    data_selector: ''
    params: {}
- name: outbound_messages
  endpoint:
    path: /messages/outbound
    method: GET
    data_selector: Messages
    params:
      count: required
      offset: required
      recipient: ''
      fromemail: ''
      tag: ''
      status: ''
      todate: ''
      fromdate: ''
      subject: ''
      messagestream: ''
      metadata_: ''
- name: servers
  endpoint:
    path: /servers/{serverid}
    method: DELETE
- name: outbound_message_details
  endpoint:
    path: /messages/outbound/{messageid}/details
    method: GET
    data_selector: records
- name: outbound_message_dump
  endpoint:
    path: /messages/outbound/{messageid}/dump
    method: GET
    data_selector: records
- name: inbound_messages
  endpoint:
    path: /messages/inbound
    method: GET
    data_selector: records
    params:
      count: required
      offset: required
      recipient: ''
      fromemail: ''
      tag: ''
      subject: ''
      mailboxhash: ''
      status: processed
      todate: ''
      fromdate: ''
- name: inbound_message_details
  endpoint:
    path: /messages/inbound/{messageid}/details
    method: GET
    data_selector: records
- name: bypass_rules_for_inbound_message
  endpoint:
    path: /messages/inbound/{messageid}/bypass
    method: PUT
    data_selector: records
- name: retry_inbound_message_processing
  endpoint:
    path: /messages/inbound/{messageid}/retry
    method: PUT
    data_selector: records
- name: email
  endpoint:
    path: /email-api
    method: POST
- name: servers
  endpoint:
    path: /servers-api
    method: GET
- name: message_streams
  endpoint:
    path: /message-streams-api
    method: GET
- name: message_streams
  endpoint:
    path: /message-streams
    method: GET
    data_selector: MessageStreams
    params:
      MessageStreamType: All
      IncludeArchivedStreams: 'false'
- name: retry_failed_message
  endpoint:
    path: /messages/inbound/{messageid}/retry
    method: PUT
    data_selector: ''
- name: message_opens
  endpoint:
    path: /messages/outbound/opens
    method: GET
    data_selector: ''
    params:
      count: '50'
      offset: '0'
- name: opens_for_single_message
  endpoint:
    path: /messages/outbound/opens/{messageid}
    method: GET
    data_selector: ''
    params:
      count: '10'
      offset: '0'
- name: message_clicks
  endpoint:
    path: /messages/outbound/clicks
    method: GET
    data_selector: ''
    params:
      count: '50'
      offset: '0'
- name: clicks_for_single_message
  endpoint:
    path: /messages/outbound/clicks/{messageid}
    method: GET
    data_selector: ''
    params: {}
- name: message_stream
  endpoint:
    path: /message-streams/{stream_ID}
    method: GET
    data_selector: ID
    params: {}
- name: create_message_stream
  endpoint:
    path: /message-streams
    method: POST
    data_selector: ID
    params: {}
- name: archive_message_stream
  endpoint:
    path: /message-streams/{stream_ID}/archive
    method: POST
    data_selector: ID
    params: {}
- name: unarchive_message_stream
  endpoint:
    path: /message-streams/{stream_ID}/unarchive
    method: POST
    data_selector: ID
    params: {}
- name: outbound_clicks
  endpoint:
    path: /messages/outbound/clicks/{messageid}
    method: GET
    data_selector: Clicks
    params:
      count: '10'
      offset: '0'
- name: domains
  endpoint:
    path: /domains
    method: GET
    data_selector: domains
- name: messages
  endpoint:
    path: /email/messages
    method: POST
    data_selector: messages
- name: outbound_message_search
  endpoint:
    path: /messages/outbound
    method: GET
    data_selector: Messages
    params:
      count: required
      offset: required
- name: outbound_message_details
  endpoint:
    path: /messages/outbound/{id}
    method: GET
    data_selector: Messages
    params: {}
- name: domains
  endpoint:
    path: /domains
    method: GET
    data_selector: Domains
    params:
      count: 50
      offset: 0
- name: outbound_message_details
  endpoint:
    path: /messages/outbound/{messageid}/details
    method: GET
    data_selector: records
- name: outbound_message_dump
  endpoint:
    path: /messages/outbound/{messageid}/dump
    method: GET
    data_selector: records
- name: inbound_messages
  endpoint:
    path: /messages/inbound
    method: GET
    data_selector: InboundMessages
- name: inbound_message_details
  endpoint:
    path: /messages/inbound/{messageid}/details
    method: GET
    data_selector: records
- name: domains
  endpoint:
    path: /domains
    method: POST
    data_selector: records
    params: {}
- name: domain_details
  endpoint:
    path: /domains/{domainid}
    method: GET
    data_selector: records
    params: {}
- name: verify_dkim_status
  endpoint:
    path: /domains/{domainid}
    method: PUT
    data_selector: records
    params: {}
- name: delete_domain
  endpoint:
    path: /domains/{domainid}
    method: DELETE
    data_selector: records
    params: {}
- name: inbound_message_retry
  endpoint:
    path: /messages/inbound/{messageid}/retry
    method: PUT
    data_selector: ErrorCode
    params: {}
- name: outbound_message_opens
  endpoint:
    path: /messages/outbound/opens
    method: GET
    data_selector: Opens
    params:
      count: '50'
      offset: '0'
- name: outbound_message_clicks
  endpoint:
    path: /messages/outbound/clicks
    method: GET
    data_selector: Clicks
    params:
      count: '50'
      offset: '0'
- name: verify_dkim
  endpoint:
    path: /domains/{domainid}/verifyDkim
    method: PUT
    data_selector: Name
    params: {}
- name: verify_return_path
  endpoint:
    path: /domains/{domainid}/verifyReturnPath
    method: PUT
    data_selector: Name
    params: {}
- name: verify_spf
  endpoint:
    path: /domains/{domainid}/verifyspf
    method: POST
    data_selector: SPFHost
    params: {}
- name: rotated_dkim
  endpoint:
    path: /domains/{domainid}/rotatedkim
    method: POST
    data_selector: records
- name: outbound_clicks
  endpoint:
    path: /messages/outbound/clicks/{messageid}
    method: GET
    data_selector: Clicks
    params:
      count: 10
      offset: 0
- name: sender_signatures
  endpoint:
    path: /signatures
    method: GET
    data_selector: signatures
- name: stats
  endpoint:
    path: /stats
    method: GET
    data_selector: stats
- name: domains
  endpoint:
    path: /domains
    method: GET
    data_selector: Domains
- name: messages
  endpoint:
    path: /email
    method: POST
    data_selector: Message
- name: senders
  endpoint:
    path: /senders
    method: GET
    data_selector: SenderSignatures
    params:
      count: '50'
      offset: '0'
- name: list_domains
  endpoint:
    path: /domains
    method: GET
    data_selector: Domains
    params:
      count: 50
      offset: 0
- name: senders
  endpoint:
    path: /senders
    method: POST
    data_selector: records
    params: {}
- name: specific_sender_signature
  endpoint:
    path: /senders/{signatureid}
    method: GET
    data_selector: records
    params: {}
- name: resend_confirmation
  endpoint:
    path: /senders/{signatureid}
    method: POST
    data_selector: records
    params: {}
- name: edit_signature
  endpoint:
    path: /senders/{signatureid}
    method: PUT
    data_selector: records
    params: {}
- name: delete_signature
  endpoint:
    path: /senders/{signatureid}
    method: DELETE
    data_selector: records
    params: {}
- name: domains
  endpoint:
    path: /domains/{domainid}
    method: GET
    data_selector: ''
    params: {}
- name: create_domain
  endpoint:
    path: /domains
    method: POST
    data_selector: ''
    params: {}
- name: edit_domain
  endpoint:
    path: /domains/{domainid}
    method: PUT
    data_selector: ''
    params: {}
- name: delete_domain
  endpoint:
    path: /domains/{domainid}
    method: DELETE
    data_selector: ''
    params: {}
- name: verifyDkim
  endpoint:
    path: /domains/{domainid}/verifyDkim
    method: PUT
    data_selector: records
- name: verifyReturnPath
  endpoint:
    path: /domains/{domainid}/verifyReturnPath
    method: PUT
    data_selector: records
- name: verifyspf
  endpoint:
    path: /domains/{domainid}/verifyspf
    method: POST
    data_selector: records
- name: resend_signature
  endpoint:
    path: /senders/{signatureid}/resend
    method: POST
- name: verify_spf
  endpoint:
    path: /senders/{signatureid}/verifyspf
    method: POST
- name: request_new_dkim
  endpoint:
    path: /senders/{signatureid}/requestnewdkim
    method: POST
- name: rotated_dkim
  endpoint:
    path: /domains/{domainid}/rotatedkim
    method: POST
    data_selector: Name
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: stats
  endpoint:
    path: /stats
    method: GET
    data_selector: records
- name: sender_signatures
  endpoint:
    path: /signatures
    method: GET
    data_selector: signatures
- name: messages
  endpoint:
    path: /email
    method: POST
    data_selector: message
- name: outbound_overview
  endpoint:
    path: /stats/outbound
    method: GET
    data_selector: response
    params: {}
- name: sent_counts
  endpoint:
    path: /stats/outbound/sends
    method: GET
    data_selector: response
    params: {}
- name: bounce_counts
  endpoint:
    path: /stats/outbound/bounces
    method: GET
    data_selector: response
    params: {}
- name: sender_signatures
  endpoint:
    path: /senders
    method: GET
    data_selector: SenderSignatures
    params:
      count: '50'
      offset: '0'
- name: senders
  endpoint:
    path: /senders
    method: POST
    data_selector: records
- name: senders_signature
  endpoint:
    path: /senders/{signatureid}
    method: GET
    data_selector: records
- name: resend_confirmation
  endpoint:
    path: /senders/{signatureid}
    method: POST
    data_selector: records
- name: edit_signature
  endpoint:
    path: /senders/{signatureid}
    method: PUT
    data_selector: records
- name: delete_signature
  endpoint:
    path: /senders/{signatureid}
    method: DELETE
    data_selector: records
- name: outbound_bounces
  endpoint:
    path: /stats/outbound/bounces
    method: GET
    data_selector: Days
    params: {}
- name: outbound_spam
  endpoint:
    path: /stats/outbound/spam
    method: GET
    data_selector: Days
    params: {}
- name: outbound_tracked
  endpoint:
    path: /stats/outbound/tracked
    method: GET
    data_selector: Days
    params: {}
- name: outbound_opens
  endpoint:
    path: /stats/outbound/opens
    method: GET
    data_selector: Days
    params: {}
- name: outbound_opens_platforms
  endpoint:
    path: /stats/outbound/opens/platforms
    method: GET
    data_selector: Days
    params: {}
- name: outbound_opens_emailclients
  endpoint:
    path: /stats/outbound/opens/emailclients
    method: GET
    data_selector: Days
    params: {}
- name: outbound_clicks
  endpoint:
    path: /stats/outbound/clicks
    method: GET
    data_selector: Days
    params: {}
- name: outbound_clicks_browserfamilies
  endpoint:
    path: /stats/outbound/clicks/browserfamilies
    method: GET
    data_selector: Days
    params: {}
- name: resend_signature
  endpoint:
    path: /senders/{signatureid}/resend
    method: POST
    data_selector: ErrorCode
    params: {}
- name: verify_spf
  endpoint:
    path: /senders/{signatureid}/verifyspf
    method: POST
    data_selector: SPFVerified
    params: {}
- name: request_new_dkim
  endpoint:
    path: /senders/{signatureid}/requestnewdkim
    method: POST
    data_selector: ErrorCode
    params: {}
- name: Email
  endpoint:
    path: /email-api
    method: POST
    data_selector: records
- name: Stats
  endpoint:
    path: /stats-api
    method: GET
    data_selector: records
- name: clicks_platforms
  endpoint:
    path: /stats/outbound/clicks/platforms
    method: GET
    data_selector: Days
    params:
      fromdate: '2014-01-01'
      todate: '2014-02-01'
- name: clicks_location
  endpoint:
    path: /stats/outbound/clicks/location
    method: GET
    data_selector: Days
    params:
      fromdate: '2014-01-01'
      todate: '2014-02-01'
- name: inbound_rule_triggers
  endpoint:
    path: /inbound-rules/triggers
    method: GET
    data_selector: triggers
- name: outbound_overview
  endpoint:
    path: /stats/outbound
    method: GET
    data_selector: records
    params: {}
- name: sent_counts
  endpoint:
    path: /stats/outbound/sends
    method: GET
    data_selector: Days
    params: {}
- name: bounce_counts
  endpoint:
    path: /stats/outbound/bounces
    method: GET
    data_selector: records
    params: {}
- name: inbound_rules_triggers
  endpoint:
    path: /triggers/inboundrules
    method: GET
    data_selector: InboundRules
    params:
      count: '50'
      offset: '0'
- name: inbound_rules
  endpoint:
    path: /triggers/inboundrules/{triggerid}
    method: DELETE
- name: outbound_bounces
  endpoint:
    path: /stats/outbound/bounces
    method: GET
    data_selector: Days
    params: {}
- name: outbound_spam
  endpoint:
    path: /stats/outbound/spam
    method: GET
    data_selector: Days
    params: {}
- name: outbound_tracked
  endpoint:
    path: /stats/outbound/tracked
    method: GET
    data_selector: Days
    params: {}
- name: outbound_opens
  endpoint:
    path: /stats/outbound/opens
    method: GET
    data_selector: Days
    params: {}
- name: outbound_opens_platforms
  endpoint:
    path: /stats/outbound/opens/platforms
    method: GET
    data_selector: Days
    params: {}
- name: outbound_opens_emailclients
  endpoint:
    path: /stats/outbound/opens/emailclients
    method: GET
    data_selector: Days
    params: {}
- name: outbound_clicks
  endpoint:
    path: /stats/outbound/clicks
    method: GET
    data_selector: Days
    params: {}
- name: outbound_clicks_browserfamilies
  endpoint:
    path: /stats/outbound/clicks/browserfamilies
    method: GET
    data_selector: Days
    params: {}
- name: clicks_platforms
  endpoint:
    path: /stats/outbound/clicks/platforms
    method: GET
    data_selector: Days
    params:
      fromdate: '2014-01-01'
      todate: '2014-02-01'
- name: clicks_location
  endpoint:
    path: /stats/outbound/clicks/location
    method: GET
    data_selector: Days
    params:
      fromdate: '2014-01-01'
      todate: '2014-02-01'
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: webhooks
- name: messages
  endpoint:
    path: /email/messages
    method: POST
    data_selector: message
- name: inbound_rule_triggers
  endpoint:
    path: /inbound-rules/triggers
    method: GET
    data_selector: triggers
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: Webhooks
- name: edit_webhook
  endpoint:
    path: /webhooks/{Id}
    method: PUT
- name: delete_webhook
  endpoint:
    path: /webhooks/{Id}
    method: DELETE
- name: inbound_rule_triggers
  endpoint:
    path: /triggers/inboundrules
    method: GET
    data_selector: InboundRules
    params:
      count: 50
      offset: 0
- name: inbound_rules
  endpoint:
    path: /triggers/inboundrules/{triggerid}
    method: DELETE
    data_selector: ''
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
    data_selector: ''
    params: {}
- name: edit_webhook
  endpoint:
    path: /webhooks/{Id}
    method: PUT
    data_selector: ''
    params: {}
- name: delete_webhook
  endpoint:
    path: /webhooks/{Id}
    method: DELETE
    data_selector: ''
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bulk_email
  endpoint:
    path: /bulk
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounces
    method: GET
    data_selector: records
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: Webhooks
- name: suppression_dump
  endpoint:
    path: /message-streams/{stream_id}/suppressions/dump
    method: GET
    data_selector: Suppressions
- name: create_suppression
  endpoint:
    path: /message-streams/{stream_id}/suppressions
    method: POST
    data_selector: Suppressions
- name: delete_suppression
  endpoint:
    path: /message-streams/{stream_id}/suppressions
    method: POST
    data_selector: Suppressions
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
    data_selector: ''
    params: {}
- name: edit_webhook
  endpoint:
    path: /webhooks/{Id}
    method: PUT
    data_selector: ''
    params: {}
- name: delete_webhook
  endpoint:
    path: /webhooks/{Id}
    method: DELETE
    data_selector: ''
    params: {}
- name: suppressions_delete
  endpoint:
    path: /message-streams/{stream_id}/suppressions/delete
    method: POST
    data_selector: Suppressions
- name: data_removal
  endpoint:
    path: /developer/api/data-removals-api
    method: POST
    data_selector: data
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: records
- name: data_removal_request
  endpoint:
    path: /data-removals
    method: POST
    data_selector: null
    params: {}
- name: data_removal_request_status
  endpoint:
    path: /data-removals
    method: GET
    data_selector: null
    params: {}
- name: suppression_dump
  endpoint:
    path: /message-streams/{stream_id}/suppressions/dump
    method: GET
- name: create_suppression
  endpoint:
    path: /message-streams/{stream_id}/suppressions
    method: POST
- name: delete_suppression
  endpoint:
    path: /message-streams/{stream_id}/suppressions
    method: POST
- name: data_removal
  endpoint:
    path: /data-removals/{id}
    method: GET
    data_selector: ID
    params: {}
- name: suppressions_delete
  endpoint:
    path: /message-streams/{stream_id}/suppressions/delete
    method: POST
    data_selector: Suppressions
- name: Data Removal
  endpoint:
    path: /developer/api/data-removals-api
    method: POST
    data_selector: data_removals
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: records
- name: data_removal_request
  endpoint:
    path: /data-removals
    method: POST
    data_selector: ID
    params: {}
- name: data_removal_status
  endpoint:
    path: /data-removals
    method: GET
    data_selector: Status
    params: {}
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: bounces
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: messages
- name: data_removal
  endpoint:
    path: /data-removals/{id}
    method: GET
    data_selector: ID
    params: {}
- name: bounce
  endpoint:
    path: /bounces
    method: GET
    data_selector: Bounces
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bulk_email
  endpoint:
    path: /bulk-email
    method: POST
    data_selector: records
- name: bounce_webhook
  endpoint:
    path: /developer/webhooks/bounce-webhook
    method: POST
    data_selector: ID
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
- name: bulk_email
  endpoint:
    path: /bulk
    method: POST
- name: bounce
  endpoint:
    path: /bounce
    method: GET
- name: template
  endpoint:
    path: /templates
    method: GET
- name: bounce_webhook
  endpoint:
    path: /developer/webhooks/bounce-webhook
    method: GET
- name: inbound_webhook
  endpoint:
    path: /developer/webhooks/inbound-webhook
    method: GET
- name: open_tracking_webhook
  endpoint:
    path: /developer/webhooks/open-tracking-webhook
    method: GET
- name: delivery_webhook
  endpoint:
    path: /developer/webhooks/delivery-webhook
    method: GET
- name: click_webhook
  endpoint:
    path: /developer/webhooks/click-webhook
    method: GET
- name: spam_complaint_webhook
  endpoint:
    path: /developer/webhooks/spam-complaint-webhook
    method: GET
- name: subscription_change_webhook
  endpoint:
    path: /developer/webhooks/subscription-change-webhook
    method: GET
- name: inbound_webhook
  endpoint:
    path: /developer/webhooks/inbound-webhook
    method: POST
    data_selector: Inbound webhook data
- name: inbound_webhook
  endpoint:
    path: /inbound
    method: POST
    data_selector: data
- name: bounce
  endpoint:
    path: /webhooks/bounce
    method: POST
    data_selector: RecordType
    params: {}
- name: bounce_webhook
  endpoint:
    path: /webhooks/bounce
    method: POST
    data_selector: records
- name: email
  endpoint:
    path: /email-api
    method: POST
- name: bulk
  endpoint:
    path: /bulk
    method: POST
- name: bounce
  endpoint:
    path: /bounce
    method: GET
- name: email
  endpoint:
    path: /developer/api/email-api
    method: POST
    data_selector: records
- name: bulk_email
  endpoint:
    path: /developer/api/bulk-email
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /developer/api/bounce-api
    method: GET
    data_selector: records
- name: templates
  endpoint:
    path: /developer/api/templates-api
    method: GET
    data_selector: records
- name: server
  endpoint:
    path: /developer/api/server-api
    method: GET
    data_selector: records
- name: message_streams
  endpoint:
    path: /developer/api/message-streams-api
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /developer/api/messages-api
    method: GET
    data_selector: records
- name: domains
  endpoint:
    path: /developer/api/domains-api
    method: GET
    data_selector: records
- name: sender_signatures
  endpoint:
    path: /developer/api/signatures-api
    method: GET
    data_selector: records
- name: stats
  endpoint:
    path: /developer/api/stats-api
    method: GET
    data_selector: records
- name: webhooks
  endpoint:
    path: /developer/api/webhooks-api
    method: GET
    data_selector: records
- name: open_tracking_webhook
  endpoint:
    path: /developer/webhooks/open-tracking-webhook
    method: POST
    data_selector: RecordType
    params: {}
- name: inbound_webhook
  endpoint:
    path: /webhooks/inbound
    method: POST
    data_selector: ''
- name: email
  endpoint:
    path: /email-api
    method: POST
    data_selector: messages
    params: {}
- name: bulk
  endpoint:
    path: /bulk
    method: POST
    data_selector: bulkMessages
    params: {}
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: bounces
    params: {}
- name: inbound_webhook
  endpoint:
    path: /inbound
    method: POST
    data_selector: records
- name: delivery_webhook
  endpoint:
    path: /developer/webhooks/delivery-webhook
    method: POST
    data_selector: webhook_data
- name: email
  endpoint:
    path: /email-api
    method: POST
- name: bulk_email
  endpoint:
    path: /bulk
    method: POST
- name: bounce
  endpoint:
    path: /bounce
    method: GET
- name: templates
  endpoint:
    path: /templates
    method: GET
- name: open_tracking_webhook
  endpoint:
    path: /developer/webhooks/open-tracking-webhook
    method: POST
    data_selector: RecordType
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: data
    params: {}
- name: bulk_email
  endpoint:
    path: /bulk
    method: POST
    data_selector: data
    params: {}
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: data
    params: {}
- name: email
  endpoint:
    path: /email-api
    method: POST
- name: bounce
  endpoint:
    path: /bounce-api
    method: GET
- name: templates
  endpoint:
    path: /templates-api
    method: GET
- name: stats
  endpoint:
    path: /stats-api
    method: GET
- name: click_webhook
  endpoint:
    path: /webhooks/click
    method: POST
    data_selector: RecordType
- name: delivery_webhook
  endpoint:
    path: /developer/webhooks/delivery-webhook
    method: POST
    data_selector: Delivery webhook data
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
    params: {}
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: records
    params: {}
- name: click_webhook
  endpoint:
    path: /developer/webhooks/click-webhook
    method: POST
    data_selector: RecordType
    params: {}
- name: spam_complaint_webhook
  endpoint:
    path: /developer/webhooks/spam-complaint-webhook
    method: POST
    data_selector: spam_complaint_data
- name: bounce_webhook
  endpoint:
    path: /developer/webhooks/bounce-webhook
    method: POST
    data_selector: bounce_data
- name: inbound_webhook
  endpoint:
    path: /developer/webhooks/inbound-webhook
    method: POST
    data_selector: inbound_data
- name: delivery_webhook
  endpoint:
    path: /developer/webhooks/delivery-webhook
    method: POST
    data_selector: delivery_data
- name: click_webhook
  endpoint:
    path: /developer/webhooks/click-webhook
    method: POST
    data_selector: click_data
- name: subscription_change_webhook
  endpoint:
    path: /developer/webhooks/subscription-change-webhook
    method: POST
    data_selector: subscription_change_data
- name: webhook
  endpoint:
    path: /developer/webhooks/spam-complaint-webhook
    method: GET
- name: spam_complaint_webhook
  endpoint:
    path: /developer/webhooks/spam-complaint-webhook
    method: POST
    data_selector: SpamComplaint
- name: spam_complaint
  endpoint:
    path: /developer/webhooks/spam-complaint-webhook
    method: POST
    data_selector: SpamComplaint
- name: subscription_change_webhook
  endpoint:
    path: /developer/webhooks/subscription-change-webhook
    method: GET
- name: email
  endpoint:
    path: /email-api
    method: POST
    data_selector: data
- name: bulk_email
  endpoint:
    path: /bulk-email
    method: POST
    data_selector: data
- name: bounce
  endpoint:
    path: /bounce-api
    method: GET
    data_selector: data
- name: templates
  endpoint:
    path: /templates-api
    method: GET
    data_selector: data
- name: server
  endpoint:
    path: /server-api
    method: GET
    data_selector: data
- name: subscription_change
  endpoint:
    path: /developer/webhooks/subscription-change-webhook
    method: POST
    data_selector: RecordType
- name: subscription_change
  endpoint:
    path: /developer/webhooks/subscription-change-webhook
    method: POST
    data_selector: RecordType
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: email
    params: {}
- name: bulk_email
  endpoint:
    path: /bulk
    method: POST
    data_selector: bulk_email
    params: {}
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: bounce
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: bulk_email
  endpoint:
    path: /bulk
    method: POST
    data_selector: records
- name: bounce
  endpoint:
    path: /bounce
    method: GET
    data_selector: records
- name: template
  endpoint:
    path: /templates
    method: GET
    data_selector: records
- name: server
  endpoint:
    path: /servers
    method: GET
    data_selector: records
- name: servers
  endpoint:
    path: /servers/SERVERID
    method: PUT
    data_selector: ''
    params: {}
- name: API Tokens
  endpoint:
    path: /servers/api-tokens
    method: GET
- name: SMTP Tokens
  endpoint:
    path: /settings/smtp-tokens
    method: GET
- name: Server API token
  endpoint:
    path: /servers/api/tokens
    method: GET
- name: Account API token
  endpoint:
    path: /account/api/tokens
    method: GET
- name: SMTP Token
  endpoint:
    path: /settings/outbound_streams/smtp/tokens
    method: GET
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: records
- name: emails
  endpoint:
    path: /email
    method: POST
    data_selector: records
    params: {}
notes:
- Requires an API key for authentication.
- Rate limits may apply.
- Count + Offset cannot exceed 10,000 bounces.
- Bounces are available for your retention period, which is 45 days by default.
- Uses API key for authentication
- Uses API key for authentication.
- Uses OAuth2 for authentication
- The MCP server is completely free and open-source (MIT licensed). You only need
  an active Postmark account for sending emails, which follows standard Postmark pricing.
- At the end of each billing period the plan contract will automatically renew indefinitely
  until explicitly cancelled by the User.
- Cancellation must be issued via the Service.
- You will incur additional charges for the billing period if you exceed the monthly
  email send limit.
- You will have the option to upgrade or downgrade Your subscription at any time.
- Your spam complaint rate has to be lower than 1 in 1,000 emails (0.1%). If you exceed
  this limit your account might get paused while we work with you to figure out what’s
  going on.
- Your bounce rate has to be lower than 10% of all emails sent. Anything higher than
  that and inbox providers will start to think that you’re sending to poorly qualified
  recipients.
- Email lists must be permission-based subscriptions.
- Spam complaint rate must be lower than 1 in 1,000 emails (0.1%).
- Bounce rate has to be lower than 10% of all emails sent.
- Postmark provides a reliable email delivery service.
- Inactivity does not constitute automatic cancellation.
- Any unused emails from the monthly email send limit included in the chosen plan
  expire at the end of the month, and do not roll over to subsequent periods.
- AC PM has a zero tolerance policy for chargebacks.
- By providing a credit card or other payment method that We accept, You represent
  and warrant that You are authorized to use the designated payment method.
- Easy integration, reliable delivery.
- Email authentication made easy.
- Postmark is GDPR compliant.
- Postmark supports TLS to secure data sent between your application and our servers.
- Message Streams can help you easily integrate email into your apps, reliably deliver
  that email, and quickly diagnose any issues.
- Postmark supports TLS to secure data sent between your application and their servers.
- Up to 10 streams can be created in a server to separate and organize sending.
- Delivery shouldn’t be an add-on or up-charge.
- Great delivery is included as part of the service.
- Expect high delivery rates for transactional emails
- Extensive parsing and spam scoring give you easy-to-use structured JSON.
- By default, Postmark stores insights for 45 days, adjustable to 0-365 days.
- Postmark includes pre-built templates for common types of transactional emails.
- MailMason provides tools for managing email templates.
- Postmark converts the email into an orderly bundle of JSON to make it incredibly
  easy for your application to consume.
- Requires API key for authentication.
- Postmark stores data for 45 days by default.
- Retention can be adjusted from 0 to 365 days with the Retention Add-on.
- Fast and reliable email delivery for agencies
- Reaching the inbox isn’t enough. Your clients’ customers expect transactional emails
  to arrive immediately—not eventually.
- GDPR friendly
- Secure and GDPR friendly
- Great deliverability, simple monthly pricing, and 45 days of email history as standard.
- Supports transactional email delivery
- Requires setup for API access
- Fast and reliable email delivery for bootstrapped startups
- Fast and reliable email delivery for side projects
- Postmark provides a full 45 days of detailed message activity from the activity
  feed.
- Great deliverability and reliable support with every Postmark plan.
- Postmark provides 45 days of message events and full content rendering.
- All new accounts start off on our free developer plan with 100 emails per month.
  Use it for however long you need, it doesn’t expire.
- All new accounts start off on our free developer plan with 100 emails per month.
- All new accounts start off on the free developer plan with 100 emails per month.
- Great support is included. There are no extra costs for Postmark support.
- Extra emails on our paid plans are calculated at the end of your billing cycle and
  included with your plan cost for the upcoming month.
- To comply with industry best-practices and to maintain our high deliverability,
  it's important that transactional and marketing emails never mix.
- Postmark offers a full set of pre-built and exhaustively tested email templates.
- Great support at no extra cost
- 'Customer Happiness Rating: 86%'
- Transactional and marketing emails should never mix.
- Pre-built and fully-tested email templates
- Dedicated IPs are available to high-volume senders.
- Ensure the API key is valid and has appropriate permissions.
- Transactional and marketing emails must not mix.
- Transactional Email service
- API documentation is available at https://postmarkapp.com/developer
- Postmark separates emails by Message Streams. Transactional Message Streams are
  for one to one emails triggered by a user action like a welcome email, password
  reset, or order confirmation.
- Maximum email size is 10 MB. This includes email content, headers, and attachments.
- The maximum number of recipients for each email is 50, including all To, CC, and
  BCC recipients.
- A confirmed email address is required to start sending.
- Maximum email size is 10 MB.
- The maximum number of recipients for each email is 50.
- Use X-Postmark-Server-Token for API key authentication
- SMTP is enabled by default so all you have to do is add the required credentials
  to your application to start sending.
- Free developer plan provides 100 free emails per month.
- Using the API allows access to the complete feature set.
- SMTP is enabled by default for easier integration.
- Sandbox mode allows for safe testing without sending real emails.
- New customers can take advantage of our free developer plan, which provides you
  with 100 free emails per month.
- Domain Verification will allow you to send from any email address on a particular
  domain.
- Each outbound Postmark message can be up to 10 MB in size.
- DMARC ensures emails get blocked before you even see them in your inbox.
- The requirement for passing SPF with DMARC is also more strict.
- Postmark supports outbound email sending and inbound processing.
- Sandbox mode allows you to safely test out different parts of Postmark without accidentally
  sending email to real recipients.
- Templates allow for you to repeatedly use an HTML/CSS layout while only having to
  pass up the dynamic data for the email in your API call.
- Postmark provides a robust API for transactional and broadcast emails.
- Each Postmark Server comes with an associated inbound message stream.
- You can receive emails as JSON at your inbound webhook URL.
- Uses Server API Token for authentication.
- Can send transactional and broadcast emails.
- Supports tracking of opens and links in emails.
- Tags can be added to categorize outgoing emails.
- Webhook notifications can be received in real-time.
- Templates are unique to each Postmark Server.
- Ensure to use the correct server token for API requests
- 'Use GUID format for inbound email address: GUID@inbound.postmarkapp.com'
- Raw email content can be included by checking the option in settings
- Open tracking requires HTML emails to be sent.
- Ensure proper setup of API key for access.
- API requires authentication to access data.
- Requires an API key for access
- API key is required for authentication.
- Some endpoints may have rate limits.
- Ensure to use the correct server token for authentication.
- We monitor every aspect of Postmark around the clock.
- API key required for authentication
- Requires setup of API key in Postmark account
- Use webhooks to notify users about email delivery issues, or find out when a customer
  opens an important email.
- You have detailed control over which message events get sent to each of your webhook
  URLs.
- Some customers experienced intermittent latency and timeout errors for some non-sending
  related API endpoints.
- Time to Inbox data is refreshed every 5 minutes.
- Postmark supports opportunistic TLS for all outbound email.
- Email standards like DKIM, SPF, and DMARC are fully supported.
- Postmark is built for transactional email.
- Requires an API key for authentication
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Use webhooks to notify users about email delivery issues.
- Each request contains a JSON object with information about the event.
- Uses OAuth2 for authentication.
- Ensure proper setup for API access.
- To qualify for a dedicated IP, you must send at least 300,000 messages a month.
- You'll qualify for an additional dedicated IP if sending 100,000 or more messages
  a day.
- $50/IP/month
- Rebound prompts customers to update their email address if an email hard bounces.
- Commissions will be paid via PayPal from the ActiveCampaign PayPal account.
- The cookie life for each visitor is 60 days.
- Ensure to validate your API requests as invalid requests will be rejected.
- Postmark provides high deliverability and tracking for transactional emails.
- Ensure 'Accept' and 'Content-Type' headers are set correctly to avoid 415 errors.
- Invalid JSON structure can lead to 422 errors.
- You’ll qualify for an additional dedicated IP if sending 100,000 or more messages
  a day.
- Starting on November 30th, Postmark will no longer support API requests over HTTP.
- Promote Postmark, 'the email delivery service that developers actually like,' and
  earn 20% recurring commissions for every new customer you refer.
- We are disabling TLSv1.0 on February 1, 2020.
- API requests must match the expected schema to avoid validation errors.
- We are going to disable TLSv1.0 on February 1, 2020
- TLSv1.0 will be disabled on February 1, 2020. Ensure your SMTP client supports TLSv1.1
  or TLSv1.2.
- Make sure your request body is valid JSON and has the correct field types.
- 'Ensure that headers include Accept: application/json and Content-Type: application/json.'
- Starting on November 30th, we will no longer be supporting HTTP connections to our
  API.
- Uses OAuth2 — requires setup of connected app in Postmark
- Deprecation and removal of TLSv1.0 support — only supports TLSv1.1 or TLSv1.2 going
  forward.
- We are going to disable TLSv1.0 on February 1, 2020. Please perform all testing
  and make any necessary code changes before this date.
- TLSv1.0 will be disabled on February 1, 2020.
- Test with future-smtp.postmarkapp.com before cutover.
- API requires a server token for authentication.
- Use the Email API for sending transactional emails
- SMTP Service allows sending emails via SMTP protocol
- Ensure to handle rate limits as per documentation
- Requires setup of API key in Postmark
- Your Postmark Server Token and Message Stream ID can also be set using environment
  variables.
- Email API and SMTP Service available
- Postmark requires an API key for authentication.
- Rate limits apply to API calls.
- Requires Postmark Server API token for authentication
- API requires API key for access
- Rate limits apply to API usage
- API requires a valid server token for authentication.
- Requires a valid server token for authentication
- API key is required for authentication
- Each Postmark server has its own API token.
- 'Messages have size limitations: TextBody and HtmlBody can be up to 5MB each, total
  message size can be up to 10MB.'
- Requires a Postmark API key for authentication.
- API requires server token for authentication.
- SMTP Tokens are unique for each message stream.
- The Secret Key should be stored in a safe place since after it has been generated,
  it's no longer visible.
- Due to the nature of the SMTP protocol it is not possible for us to return an error
  to the SMTP client when we find out something is wrong with the message.
- The Postmark SMTP service may not be compatible with all SMTP clients.
- Please make sure you are using your transactional message stream's API token as
  both the SMTP user name and password.
- By default, Postmark will replace all Message-ID headers for outbound SMTP messages.
- You must have a registered and confirmed sender signature with the sender email.
- Messages have some size limitations, which if exceeded will cause the message to
  be rejected.
- Inbound processing allows you to send inbound emails to Postmark, which are then
  processed and delivered via a webhook.
- SMTP access can be enabled or disabled for a server via the server's Settings page.
- Use TLS for secure connections.
- Inbound processing allows you to send inbound emails to Postmark, which we then
  process and deliver via a webhook in nicely formatted JSON.
- API requires an API key for authentication.
- API calls require a valid server token in the header.
- Uses HTTPS for link tracking
- Links must be well-formed according to RFC-3986
- No links will be replaced or tracked by default.
- Links can be tracked at server-level or message-level.
- Ensure to handle rate limits.
- Postmark has a set of API endpoints built for managing account level features.
- Links tracked by Postmark do not expire.
- All links tracked by Postmark are routed through our servers using HTTPS/TLS.
- Uses API key authentication — requires setup of API token in account
- Rate limits apply to API requests
- Requires API key for authentication
- Ensure to check the API rate limits in the documentation.
- Sandbox mode allows testing without sending real emails.
- Refer to the API documentation for detailed usage instructions.
- Requires setup of API key in your account
- Requires a valid Postmark API key for authentication
- This request requires server level privileges.
- Postmark API requires an API key for authentication.
- Batch endpoint accepts up to 500 messages per API call, and up to 50 MB payload
  size, including attachments.
- The /batch endpoint will return a 200-level http status, even when validation for
  individual messages may fail.
- API rate limits apply.
- Templates can be managed through the API.
- This endpoint is available to early access customers only.
- A Server may have up to 100 templates. Requests that exceed this limit won't be
  processed.
- Uses API key authentication — requires setup of API token in account settings.
- This request requires account level privileges. Only accessible by the account owner.
- This request requires account level privileges.
- Some features may not be enabled for all accounts.
- Requires a valid server token for authentication.
- Postmark API requires an API token for authentication.
- A Server may have up to 10 Streams, including the default ones.
- Default Streams cannot be deleted, and Servers can only have 1 Inbound Stream.
- This request requires server level privileges. This token can be found from the
  API Tokens tab under your Postmark server.
- API supports sending transactional emails
- Requires setup of an API token
- This request requires account level privileges. Only accessible by the account owner,
  this token can be found on the API Tokens tab of your Postmark account.
- API requires a server token for authorization.
- Requires a server token for authentication.
- Uses API key for authentication — ensure to generate a server token in the Postmark
  account.
- Check rate limits in the API documentation.
- Use API key for authentication
- Requires an API key for access.
- SpamComplaint suppressions cannot be deleted.
- An array of email addresses to delete a suppression on. Max of 50 suppressions that
  can be removed in one call.
- This endpoint allows you to manage view, create, and delete suppressions in your
  Message Stream.
- Max of 50 suppressions that can be removed in one call.
- API requires API key for authentication.
- The datetimes within webhook data will be in ISO 8601 format.
- This endpoint is available by request only.
- Bounce webhooks are triggered for bounces that resulted from outgoing email.
- Datetime for the `BouncedAt` field will be in ISO 8601 format.
- API requires server token for authentication
- To ensure your data is encrypted, we highly recommend using HTTPS (ssl) for your
  webhook url.
- The format of the datetime in the Date field will be based on the format provided
  by the message's sending mailserver. Postmark currently does not have a way to set
  a default for these formats.
- If Postmark does not receive a 200 response from a webhook server, retries will
  be made.
- Authentication required for sending emails via API.
- An open webhook can instantly notify your application of message opens by POSTing
  the data in a JSON document to the webhook URL that you specify.
- The datetime for the ReceivedAt field will be in ISO 8601 format.
- If Postmark does not receive a 200 response from a webhook server, retries will
  occur.
- The Delivery webhook is a way for Postmark to notify your application that an email
  was successfully delivered.
- Requires configuration of API keys for authentication.
- Ensure to handle rate limits when sending emails.
- Click webhook pushes data in easily parsable JSON format.
- Retention period for click events is 45 days by default.
- An email is considered successfully delivered when the destination email server
  returns an OK response after delivery is attempted.
- A spam complaint is recorded when a user clicks 'This is Spam' or 'Mark as Spam'.
- Once a spam complaint is recorded, Postmark will deactivate this address.
- A spam complaint is recorded when a user clicks 'This is Spam' or 'Mark as Spam'
  from email clients.
- Set the subscription change webhook URL
- The datetime for the ChangedAt field is in ISO 8601 format.
- API requires authenticated access to send emails
- SMTP API Error is an internal rejection error when sending to a suppressed recipient.
- Enabling SMTP API Errors must be done via API for each server.
- SMTP API Error is an internal rejection error that Postmark will respond with when
  you attempt to send via SMTP to a recipient who was previously suppressed.
- An API Token is a randomly generated alphanumeric string used to authenticate different
  things in Postmark.
- A server can have up to 3 API Tokens associated with it.
- The Access Key and Secret Key can only be used with the other value they were generated
  with.
- An API Token is a randomly generated alphanumeric string that’s used to authenticate
  different things in Postmark.
- Requires setup of API tokens in Postmark.
- Open tracking can be enabled in the plugin settings.
- Click tracking can be used but should be enabled in the Postmark UI.
errors:
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify your API key.'
- '404 Not Found: The requested resource does not exist.'
- '401 Unauthorized: Check if the API key is correct.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: This request requires server level privileges. This token can
  be found from the API Tokens tab under your Postmark server.'
- '401 Unauthorized: Check your API token'
- '400 Bad Request: Verify your request parameters'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck server token'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Check API key.'
- '401 Unauthorized: Ensure your API key is correct.'
- '401 Unauthorized: Recheck API key or permissions.'
- '401 Unauthorized: Check your API token.'
- '400 Bad Request: Invalid request format.'
- '401 Unauthorized: Check API key'
- '400 Bad Request: Check request format and parameters'
- '429 Too Many Requests: Rate limit exceeded, please retry later.'
- 'Invalid API token: Recheck your API token.'
- 'Rate limit exceeded: Throttle requests to the API.'
- 'INVALID_API_KEY: Check the server token provided.'
- 'MESSAGE_TOO_LARGE: Reduce the size of the email message.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Verify API key'
- '500 Internal Server Error: Retry later'
- '400 Bad Request: Check the request structure and parameters'
- '429 Too Many Requests: Rate limit exceeded'
- '400 Bad Request: Check your request format and data'
- '401 Unauthorized: Verify API key or permissions'
- '404 Not Found: Confirm the endpoint and resource'
- '401 Unauthorized: Recheck API key validity'
- '429 Too Many Requests: Throttle API calls'
- '400 Bad Request: Check the request format'
- '401 Unauthorized: Verify API key or OAuth token'
- '404 Not Found: Ensure the endpoint is correct'
- '401 Unauthorized: Invalid API key provided.'
- '401 Unauthorized: Recheck API token or account status'
- '404 Not Found: Check the endpoint path'
- '401 Unauthorized: Recheck API token'
- '400 Bad Request: Check request format and required fields'
- '422 Unprocessable Entity: Check request parameters'
- '401 Unauthorized: Check the API key provided in the header.'
- '429 Too Many Requests: Throttle your requests to avoid exceeding the rate limit.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400 Bad Request: Check the request format and required fields.'
- '401 Unauthorized: Verify API key.'
- '404 Not Found: Check the endpoint path.'
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Verify the API key.'
- '400 Bad Request: Check your request syntax and parameters.'
- '401 Unauthorized: Check your API key.'
- '429 Too Many Requests: Throttle your requests.'
- '400 Bad Request: Check your request format'
- '401 Unauthorized: Check your API key'
- '404 Not Found: Check the endpoint URL'
- 'Maximum email size exceeded: The email size exceeds 10 MB.'
- 'Too many recipients: The email has more than 50 recipients.'
- '401 Unauthorized: Recheck API key or token expiration'
- '422 Unprocessable Entity: Check for required fields or invalid data'
- '403 Forbidden: Ensure server token is correct'
- '404 Not Found: Verify endpoint path is correct'
- '401 Unauthorized: Recheck API token or permissions'
- '400 Bad Request: Check the request format and required fields'
- '400 Bad Request: Check your request format.'
- '429 Too Many Requests: Reduce the frequency of your requests.'
- '401 Unauthorized: Check your API key or authentication setup.'
- 'Invalid API Key: Check the API key being used.'
- 'Rate limit exceeded: Throttle your requests.'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck your API token'
- '401 Unauthorized: Recheck API token or credentials'
- '400 Bad Request: Check your request body for errors.'
- '404 Not Found: Ensure the endpoint is correct.'
- 'Inbound Error: Indicates all retries have failed.'
- '401 Unauthorized: Recheck Server API Token.'
- '403 Forbidden: Ensure you have permission to access this resource.'
- '400 Bad Request: Check the format of the request payload.'
- '404 Not Found: Verify the endpoint URL.'
- '401 Unauthorized: Ensure valid server API token.'
- 'InvalidServerToken: Check if the server token is correct'
- 'InvalidAPIKey: Ensure the API key is valid'
- 'Inbound Error: Indicates that all retry attempts for the webhook have failed.'
- '400 Bad Request: Check your request format and parameters.'
- '500 Internal Server Error: Retry the request after some time.'
- '401 Unauthorized: Invalid API key'
- '400 Bad Request: Check request formatting and parameters'
- '400 Bad Request: Check your request syntax and data.'
- '400 Bad Request: Check request parameters and payload.'
- '404 Not Found: Resource does not exist.'
- '400 Bad Request: Check the request body for errors'
- '401 Unauthorized: Ensure the API key is correct'
- '404 Not Found: The requested resource does not exist'
- '401 Unauthorized: Check the API key'
- '400 Bad Request: Check your request parameters'
- '400 Bad Request: Check the request body for errors.'
- 'Invalid API key: Check your API key and try again.'
- 'Rate limit exceeded: Reduce the number of requests.'
- '401 Unauthorized: Check your authentication credentials.'
- '400 Bad Request: Ensure the request body is formatted correctly.'
- API Latency and Timeout Errors
- '401 Unauthorized: Check server token.'
- '422 Unprocessable Entity: Check request parameters.'
- 'ErrorCode: 406, Message: You tried to send to a recipient that has been marked
  as inactive.'
- '400 Bad Request: Check the request format and parameters'
- '401 Unauthorized: Verify API key or token'
- '400 Bad Request: Check your request body and parameters'
- '401 Unauthorized: Verify your API key'
- '422 Unprocessable Entity: Check the request parameters.'
- '406: You tried to send to a recipient that has been marked as inactive.'
- 'HTTP 400: Bad Request - Check request parameters'
- 'HTTP 401: Unauthorized - Recheck API key'
- 'HTTP 429: Too Many Requests - Throttle API calls'
- '400 Bad Request: Check your request payload for validation errors.'
- '401 Unauthorized: Check your API key or token.'
- '400 Bad Request: Check required fields in the request.'
- '415: Unsupported Media Type - Check Content-Type header'
- '422: Unprocessable Entity - Check JSON request body'
- Consistent blacklistings and major blocks are not normal.
- '400 Bad Request: Check request payload for validation errors.'
- '401 Unauthorized: Verify API key and permissions.'
- 'Unable to connect: Change your SMTP client configuration to use TLSv1.1 or TLSv1.2.'
- '415: Unsupported Media Type - Check Content-Type and Accept headers.'
- '422: Unprocessable Entity - Check JSON request body format.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Invalid server token.'
- '500 Internal Server Error: Try again later'
- '422 Unprocessable Entity: Check your request payload'
- '401 Unauthorized: Verify server token'
- '401 Unauthorized: Check API key validity'
- '400 Bad Request: Check the request format.'
- '400 Bad Request: Check request format and parameters.'
- '400 Bad Request: Check your request payload.'
- '401 Unauthorized: Invalid API key or server token.'
- '401 Unauthorized: Invalid API key or server token'
- '422 Unprocessable Entity: Validation error with request data'
- '400 Bad Request: Verify request parameters'
- '401 Unauthorized: Recheck API token.'
- '422 Unprocessable Entity: Ensure sender signature is registered and confirmed.'
- '403 Forbidden: Check if your server token is correct.'
- '400 Bad Request: Ensure required fields are filled.'
- '400 Bad Request: Check the request parameters'
- '422 Unprocessable Entity: Check your request parameters'
- '401 Unauthorized: Invalid server token or insufficient permissions'
- '401 Unauthorized: Recheck API token or SMTP token'
- 'SMTPApiError: Bounce description will contain a short message containing an error
  description.'
- '401 Unauthorized: Incorrect or missing X-Postmark-Server-Token'
- '422 Unprocessable Entity: Invalid sender signature or malformed request'
- '401 Unauthorized: Recheck API Token or SMTP Token.'
- 'SMTPApiError: Check the bounce raw source for error description.'
- '403 Forbidden: Invalid API key'
- '400 Bad Request: Check request parameters.'
- '400 Bad Request: Ensure links are properly encoded'
- '403 Forbidden: Confirm account approval for link tracking'
- '401 Unauthorized: Check API key validity.'
- '401 Unauthorized: Ensure your API token is valid.'
- '400 Bad Request: Check for malformed URLs.'
- '400 Bad Request: Check the request payload for errors'
- '429 Too Many Requests: Rate limit exceeded, try again later'
- '400 Bad Request: Check your input data'
- '404 Not Found: Endpoint does not exist'
- '401 Unauthorized: Check the API key.'
- '500 Internal Server Error: Retry the request later.'
- '401 — Unauthorized: Missing or incorrect API token in header.'
- '404 — Entity doesn''t exist: You made a request for a resource/entity that does
  not exist.'
- '429 — Rate Limit Exceeded: We have detected that you are making requests at a rate
  that exceeds acceptable use of the API.'
- '401 Unauthorized: Ensure valid API token.'
- '404 Not Found: Verify endpoint path.'
- '413 — Payload Too Large: The request exceeded Postmark''s size limit.'
- '415 — Unsupported Media Type: The API request is missing the expected request headers.'
- '422 — Unprocessable Entity: Something with the message isn’t quite right.'
- '500 — Internal Server Error: This is an issue with Postmark’s servers processing
  your request.'
- '503 — Service Unavailable: During planned service outages.'
- 10 — Bad or missing API token
- '11 - Multiple errors occurred:'
- '12 - Resource not found:'
- '13 - Invalid pagination key:'
- 100 — Maintenance
- 300 — Invalid email request
- 400 — Sender Signature not found
- 401 — Sender signature not confirmed
- 402 — Invalid JSON
- 403 — Invalid request fields(s) - {FIELD_NAME}
- 405 — Not allowed to send
- 406 — Inactive recipient
- 409 — JSON required
- 410 — Too many batch messages
- 411 — Forbidden attachment type
- 412 — Account is Pending
- 413 — Account May Not Send
- 500 — Sender signature query exception
- 501 — Sender Signature not found by id
- 502 — No updated Sender Signature data received
- 503 — You cannot use a public domain
- 504 — Sender Signature already exists
- 505 — DKIM already scheduled for renewal
- 506 — This Sender Signature already confirmed
- 507 — You do not own this Sender Signature
- 510 — This domain was not found
- 511 — Invalid fields supplied
- 512 — Domain already exists
- 513 — You do not own this Domain
- 514 — Name is a required field to create a Domain
- 515 — Name field must be less than or equal to 255 characters
- 516 — Name format is invalid
- 520 — You are missing a required field to create a Sender Signature.
- 521 — A field in the Sender Signature request is too long.
- 522 — Value for field is invalid.
- 600 — Server query exception
- 602 — Duplicate Inbound Domain
- 603 — Server name already exists
- 604 — You don’t have delete access
- 605 — Unable to delete Server
- 606 — Invalid webhook URL
- 607 — Invalid Server color
- 608 — Server name missing or invalid
- 609 — No updated Server data received
- 610 — Invalid MX record for Inbound Domain
- 611 — InboundSpamThreshold value is invalid. Please use a number between 0 and 30
  in increments of 5.
- 700 — Messages query exception
- 701 — Message doesn’t exist
- 702 — Could not bypass this blocked inbound message, please contact support.
- 703 — Could not retry this failed inbound message, please contact support.
- 800 — Trigger query exception
- 809 — No trigger data received
- 810 — This inbound rule already exists.
- 811 — Unable to remove this inbound rule, please contact support.
- 812 — This inbound rule was not found.
- 813 — Not a valid email address or domain.
- 900 — Stats query exception
- 1000 — Bounces query exception
- 1001 — Bounce was not found.
- 1002 — BounceID parameter required.
- 1003 — Cannot activate bounce.
- 1100 — Template query exception.
- 1101 — Template not found.
- 1105 — Template limit would be exceeded.
- 1109 — No Template data received.
- 1120 — A required Template field is missing.
- 1121 — Template field is too large.
- 1122 — A Templated field has been submitted that is invalid.
- 1123 — A field was included in the request body that is not allowed.
- 1125 — The template types don't match on the source and destination servers.
- 1130 - The layout template cannot be deleted because it has dependent templates
  using it.
- 1131 - The layout content placeholder must be present in the layout HTML and/or
  Text body exactly once.
- 1221 - The 'MessageStreamType' associated with this request was invalid.
- 1222 - A valid 'ID' must be provided.
- 1223 - A valid 'Name' must be provided.
- 1224 - The 'Name' is too long, it is limited to 100 characters.
- 1225 - You have reached the maximum number of message streams for this server.
- 1226 - The message stream for the provided 'ID' was not found.
- 1227 - The 'ID' must be a non-empty string starting with a letter of the English
  alphabet.
- 1228 - A server can only have one inbound stream.
- 1229 - You cannot archive the default transactional and inbound streams.
- 1230 - The 'ID' provided already exists for this server.
- 1231 - The 'Description' is too long, it is limited to 1000 characters.
- 1232 - You cannot unarchive this message stream anymore.
- 1233 - The 'ID' must not start with the 'pm-' prefix.
- 1234 - The 'Description' must not contain HTML tags.
- 1235 - The 'MessageStream' provided does not exist on this server.
- 1236 - Sending is not supported on the supplied 'MessageStream'.
- 1237 - This 'ID' is reserved.
- 1300 - Invalid Data Removal request.
- 1301 - Invalid ID.
- 1302 - You don’t have Data Removal request access.
- '429 Too Many Requests: Reduce request frequency'
- '10 — Bad or missing API token: Your request did not contain the correct API token
  in the header.'
- '11 - Multiple errors occurred: Multiple errors occurred. Inspect the Errors property
  on the response for more detailed information.'
- '12 - Resource not found: The item you are trying to access was not found.'
- '13 - Invalid pagination key: The pagination key provided in the request was invalid.'
- '100 — Maintenance: The Postmark API is offline for maintenance.'
- '300 — Invalid email request: Validation failed for the email request JSON data
  that you provided.'
- '400 — Sender Signature not found: You’re trying to send email with a From address
  that doesn’t have a sender signature.'
- '401 — Sender signature not confirmed: You’re trying to send email with a From address
  that doesn’t have a confirmed sender signature.'
- '402 — Invalid JSON: The JSON data you provided is syntactically incorrect.'
- '403 — Invalid request fields(s) - {FIELD_NAME}: The JSON data you provided is invalid
  in some way.'
- '405 — Not allowed to send: Your account has run out of credits.'
- '406 — Inactive recipient: You tried to send email to a recipient that has been
  marked as inactive.'
- '409 — JSON required: Your HTTP request doesn’t have the Accept and Content-Type
  headers set to application/json.'
- '410 — Too many batch messages: Your batched request contains more than 500 messages.'
- '411 — Forbidden attachment type: The file type of the attachment isn’t allowed.'
- '412 — Account is Pending: The account that is associated with the send request
  is still pending approval.'
- '413 — Account May Not Send: The account that is associated with the send request
  is not approved for sending.'
- '500 — Sender signature query exception: You provided invalid querystring parameters
  in your request.'
- '501 — Sender Signature not found by id: We couldn’t locate the Sender Signature
  you’re trying to manage from the id passed in.'
- '502 — No updated Sender Signature data received: You didn’t pass in any valid updated
  Sender Signature data.'
- '503 — You cannot use a public domain: You tried to create a Sender Signature with
  a public domain which isn’t allowed.'
- '504 — Sender Signature already exists: You tried to create a Sender Signature that
  already exists on Postmark.'
- '505 — DKIM already scheduled for renewal: The DKIM you tried to renew is already
  scheduled to be renewed.'
- '506 — This Sender Signature already confirmed: The signature you tried to resend
  a confirmation to has already been confirmed by a user.'
- '507 — You do not own this Sender Signature: This Sender Signature cannot be found
  using your credentials.'
- '510 — This domain was not found: We couldn’t locate the Domain you’re trying to
  manage from the id passed in.'
- '511 — Invalid fields supplied: You didn’t pass in any valid Domain data.'
- '512 — Domain already exists: You tried to create a Domain that already exists on
  your account.'
- '513 — You do not own this Domain: This Domain cannot be found using your credentials.'
- '514 — Name is a required field to create a Domain: You must set the Name parameter
  to create a Domain.'
- '515 — Name field must be less than or equal to 255 characters: The Name you have
  specified for this Domain is too long.'
- '516 — Name format is invalid: The Name you have specified for this Domain is formatted
  incorrectly.'
- '520 — You are missing a required field to create a Sender Signature: When creating
  a Sender Signature, you must supply a value for Name and FromEmail.'
- '521 — A field in the Sender Signature request is too long: View the Message property
  of the response for details.'
- '522 — Value for field is invalid: Value might be an invalid email address or domain.'
- '600 — Server query exception: You provided invalid querystring parameters in your
  request.'
- '602 — Duplicate Inbound Domain: The Inbound Domain you specified is already in
  use on Postmark.'
- '603 — Server name already exists: You tried to create a Server name that already
  exists in your list.'
- '604 — You don’t have delete access: You don’t have permission to delete Servers
  through the API.'
- '605 — Unable to delete Server: We couldn’t delete this Server.'
- '606 — Invalid webhook URL: The webhook URL you’re trying to use is invalid or contains
  an internal IP range.'
- '607 — Invalid Server color: The server color you specified isn''t supported.'
- '608 — Server name missing or invalid: The Server name you provided is invalid or
  missing.'
- '609 — No updated Server data received: You didn’t pass in any valid updated Server
  data.'
- '610 — Invalid MX record for Inbound Domain: The Inbound Domain provided doesn’t
  have an MX record value of inbound.postmarkapp.com.'
- '611 — InboundSpamThreshold value is invalid: Please use a number between 0 and
  30 in increments of 5.'
- '700 — Messages query exception: You provided invalid querystring parameters in
  your request.'
- '701 — Message doesn’t exist: This message doesn’t exist.'
- '702 — Could not bypass this blocked inbound message, please contact support: There
  was a problem processing this bypass request.'
- '703 — Could not retry this failed inbound message, please contact support: There
  was a problem processing this retry request.'
- '800 — Trigger query exception: You provided invalid querystring parameters in your
  request.'
- '809 — No trigger data received: You didn’t provide JSON body parameters in your
  request.'
- '810 — This inbound rule already exists: You tried to add a rule that already exists
  for the server.'
- '811 — Unable to remove this inbound rule, please contact support: We weren''t able
  to remove this rule from your server.'
- '812 — This inbound rule was not found: The inbound rule you are trying to administer
  does not exist for this server.'
- '813 — Not a valid email address or domain: Please use a valid email address or
  valid domain to setup an inbound domain rule.'
- '900 — Stats query exception: You provided invalid querystring parameters in your
  request.'
- '1000 — Bounces query exception: You provided invalid querystring parameters in
  your request.'
- '1001 — Bounce was not found: The BounceID or MessageID you are searching with is
  invalid.'
- '1002 — BounceID parameter required: You must supply a BounceID to get the bounce
  dump.'
- '1003 — Cannot activate bounce: Certain bounces and SPAM complaints cannot be activated
  by the user.'
- '1100 — Template query exception: The value of a GET parameter for the request is
  not valid.'
- '1101 — Template not found: The TemplateId, LayoutTemplate, or Alias references
  a Template that does not exist.'
- '1105 — Template limit would be exceeded: A Server may have up to 100 templates.'
- '1109 — No Template data received: You didn’t provide JSON body parameters in your
  request.'
- '1120 — A required Template field is missing: A required field is missing from the
  body of the POST request.'
- '1121 — Template field is too large: One of the values of the request''s body exceeds
  our size restrictions for that field.'
- '1122 — A Templated field has been submitted that is invalid: One of the fields
  of the request body is invalid.'
- '1123 — A field was included in the request body that is not allowed: A field is
  included in the request that will be ignored.'
- '1125 — The template types don''t match on the source and destination servers: The
  template alias is a layout on one server and a standard template on the other.'
- '1130 - The layout template cannot be deleted because it has dependent templates
  using it: A layout cannot be deleted when there are associated templates using the
  layout.'
- '1131 - The layout content placeholder must be present in the layout HTML and/or
  Text body exactly once: A single content placeholder is required for every layout.'
- '1221 - The ''MessageStreamType'' associated with this request was invalid: Please
  make sure to interact with a Message Stream that supports the function you''re trying.'
- '1222 - A valid ''ID'' must be provided: Postmark was unable to find a Message Stream
  with the provided Message Stream ID.'
- '1223 - A valid ''Name'' must be provided: A Stream name cannot be null or whitespace.'
- '1224 - The ''Name'' is too long: Please create a shorter name.'
- '1225 - You have reached the maximum number of message streams for this server:
  A stream can have up to 10 Message Streams.'
- '1226 - The message stream for the provided ''ID'' was not found: Postmark was unable
  to find a Message Stream with the provided Message Stream ID.'
- '1227 - The ''ID'' must be a non-empty string starting with a letter of the English
  alphabet: It is limited to lowercase letters of the English alphabet, numbers, and
  ''-'', ''_'' characters.'
- '1228 - A server can only have one inbound stream: If more Inbound Streams are needed,
  please create a new Server.'
- '1229 - You cannot archive the default transactional and inbound streams: The default
  Transaction and Inbound streams cannot be deleted.'
- '1230 - The ''ID'' provided already exists for this server: ID''s must be unique.'
- '1231 - The ''Description'' is too long: Please create a shorter description.'
- '1232 - You cannot unarchive this message stream anymore: The Message Stream is
  either deleted is no longer archived.'
- '1233 - The ''ID'' must not start with the ''pm-'' prefix: It is not possible to
  create Message Streams that start with ''pm-''.'
- '1234 - The ''Description'' must not contain HTML tags: The characters ''<'' and
  ''>'' are not allowed.'
- '1235 - The ''MessageStream'' provided does not exist on this server: Postmark was
  unable to find a Message Stream with the provided Message Stream that was used with
  the API Token.'
- '1236 - Sending is not supported on the supplied ''MessageStream'': Sending is not
  possible with Inbound Message Streams.'
- '1237 - This ''ID'' is reserved: The ID all is reserved, please use a different
  ID.'
- '1300 - Invalid Data Removal request: Refer to the Data Removal API reference.'
- '1301 - Invalid ID: Missing or incorrect data removal request ID.'
- '1302 - You don’t have Data Removal request access: You don’t have permission to
  process or review data removal requests through the API.'
- API Error Codes reference available in documentation.
- 'ErrorCode: 406: You tried to send to a recipient that has been marked as inactive.'
- '422 Unprocessable Content: Multiple errors occurred. Inspect the Errors property
  for more information.'
- '422 Unprocessable Entity: Check the request format and data.'
- '401 Unauthorized: Verify API key or token.'
- 'InvalidTemplateId: The specified TemplateId does not exist.'
- 'InvalidSenderSignature: The sender email address must have a registered and confirmed
  Sender Signature.'
- 'ErrorCode: integer'
- 'Message: Associated success or error message.'
- '401 Unauthorized: This request requires server level privileges.'
- '400 Bad Request: Invalid input provided.'
- '401 Unauthorized: Recheck account token'
- '400 Bad Request: Invalid request format or parameters.'
- '401 Unauthorized: Invalid or missing authentication token.'
- '404 Not Found: The specified template does not exist.'
- '401 Unauthorized: Check account token and privileges'
- '404 Not Found: Ensure the endpoint exists'
- '400 Bad Request: The request was malformed.'
- '401 Unauthorized: Invalid API key.'
- '404 Not Found: The requested resource could not be found.'
- '403 Forbidden: Check if the server token is valid.'
- '404 Not Found: Endpoint does not exist.'
- '400 Bad Request: Verify the request format and parameters.'
- 'REQUEST_LIMIT_EXCEEDED: Count + Offset cannot exceed 10,000 messages.'
- '401 Unauthorized: Invalid API token'
- '422 Unprocessable Entity: Check request body for errors'
- '401 Unauthorized: Check your account token.'
- 'ErrorCode: 0 - Successfully bypassed message'
- Blocked - Inbound request blocked by domain rule
- '401 Unauthorized: Check your server token.'
- '401 Unauthorized: This request requires account level privileges.'
- 'Message: string'
- '401 Unauthorized: Invalid API key or insufficient permissions.'
- '400 Bad Request: Check your request format and required fields.'
- An error is thrown instead of an empty webhooks array if a non existing stream is
  provided.
- 'Failed: You do not have the required authority to change this suppression.'
- '401 Unauthorized: Invalid API key or token.'
- '403: Retries stopped.'
- 'Inbound Error: Message shown if all retries have failed.'
- '401 Unauthorized: Verify the API key'
- '403: Stop retries if received.'
- 'INVALID_API_KEY: Check your API key'
- 'RATE_LIMIT_EXCEEDED: Reduce frequency of requests'
- 'INVALID_REQUEST: Verify your request format'
- 'SMTP API Error: Occurs when attempting to send to a suppressed recipient.'
- 'SMTP API Error: Attempting to send to a suppressed recipient.'
- '401 Unauthorized: Check API token validity.'
- '401 Unauthorized: Confirm server API token is correct.'
- '400 Bad Request: Verify required fields are included in the request.'
- '401 Unauthorized: Check API token or permissions'
- '500 Internal Server Error: Retry the request after some time'
auth_info:
  mentioned_objects:
  - PostmarkServerToken
  - PostmarkAccountToken
  - X-Postmark-Server-Token
  - X-Postmark-Account-Token
client:
  base_url: https://api.postmarkapp.com
  auth:
    type: apikey
    location: header
    header_name: X-Postmark-Server-Token
  headers:
    Accept: application/json
source_metadata: null
