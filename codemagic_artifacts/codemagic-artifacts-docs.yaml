resources:
- name: get_authenticated_download_url
  endpoint:
    path: /artifacts/:secureFilename
    method: GET
- name: create_public_download_url
  endpoint:
    path: /artifacts/:secureFilename/public-url
    method: POST
    params:
      expiresAt: integer
- name: get_authenticated_download_url
  endpoint:
    path: /artifacts/:secureFilename
    method: GET
- name: create_public_download_url
  endpoint:
    path: /artifacts/:secureFilename/public-url
    method: POST
    params:
      expiresAt: integer
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: records
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
    data_selector: records
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: records
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
    data_selector: records
- name: signup
  endpoint:
    path: /signup
    method: POST
    data_selector: user
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: workflows
  endpoint:
    path: /yaml-quick-start/migrating-from-app-center/
    method: GET
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
- name: android_workflow
  endpoint:
    path: /workflows/android-workflow
    method: POST
    data_selector: artifacts
    params: {}
- name: ios_workflow
  endpoint:
    path: /workflows/ios-workflow
    method: POST
    data_selector: artifacts
    params: {}
- name: workflows
  endpoint:
    path: /yaml-quick-start/migrating-from-app-center/
    method: GET
    data_selector: workflows
    params: {}
- name: app_store_connect
  endpoint:
    path: /yaml-publishing/app-store-connect/
    method: GET
    data_selector: records
- name: android_code_signing
  endpoint:
    path: /distribution/android_code_signing
    method: POST
    data_selector: signingFiles
- name: ios_code_signing
  endpoint:
    path: /distribution/ios_code_signing
    method: POST
    data_selector: signingFiles
- name: app_store_connect
  endpoint:
    path: /rest-api/app-store-connect/
    method: POST
    data_selector: results
- name: environment_variables
  endpoint:
    path: /environment-variables
    method: POST
    data_selector: variables
    params: {}
- name: ios_workflow
  endpoint:
    path: /workflows/ios-workflow
    method: POST
- name: artifacts
  endpoint:
    path: /artifacts
    method: GET
    data_selector: artifacts
    params: {}
- name: app_store_connect
  endpoint:
    path: /publishing/app_store_connect
    method: POST
    data_selector: publish
    params:
      api_key: $APP_STORE_CONNECT_PRIVATE_KEY
      key_id: 3MD9688D9K
      issuer_id: 21d78e2f-b8ad-...
- name: app_store_connect
  endpoint:
    path: /app_store_connect
    method: POST
- name: google_play
  endpoint:
    path: /google_play
    method: POST
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
    data_selector: artifacts
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
    data_selector: caches
- name: google_play
  endpoint:
    path: /google_play
    method: POST
    data_selector: google_play
    params:
      credentials: $GOOGLE_PLAY_SERVICE_ACCOUNT_CREDENTIALS
      track: internal
      submit_as_draft: true
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
    data_selector: artifacts
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: google_play
  endpoint:
    path: /google_play
    method: POST
    data_selector: ''
    params:
      credentials: $GOOGLE_PLAY_SERVICE_ACCOUNT_CREDENTIALS
      track: internal
      submit_as_draft: true
- name: app_store_connect
  endpoint:
    path: /access/integrations/api
    method: POST
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: App Store Connect API key
  endpoint:
    path: /access/integrations/api
    method: POST
- name: applications
  endpoint:
    path: /rest-api/applications
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds
    method: GET
    data_selector: builds
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
    data_selector: artifacts
    params: {}
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
    data_selector: caches
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
    data_selector: artifacts
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
    data_selector: caches
- name: android
  endpoint:
    path: /android
    method: POST
    data_selector: artifacts
    params: {}
- name: ios
  endpoint:
    path: /ios
    method: POST
    data_selector: artifacts
    params: {}
- name: macos
  endpoint:
    path: /macos
    method: POST
    data_selector: artifacts
    params: {}
- name: windows
  endpoint:
    path: /windows
    method: POST
    data_selector: artifacts
    params: {}
- name: web
  endpoint:
    path: /web
    method: POST
    data_selector: artifacts
    params: {}
- name: android-workflow
  endpoint:
    path: /workflows/android-workflow
    method: POST
    data_selector: workflow
    params: {}
- name: ios-workflow
  endpoint:
    path: /workflows/ios-workflow
    method: POST
    data_selector: workflow
    params: {}
- name: windows-workflow
  endpoint:
    path: /workflows/windows-workflow
    method: POST
    data_selector: workflow
    params: {}
- name: windows-release-workflow
  endpoint:
    path: /workflows/windows-release-workflow
    method: POST
    data_selector: workflow
    params: {}
- name: build_artifacts
  endpoint:
    path: /build/artifacts
    method: GET
    data_selector: artifacts
    params: {}
- name: android-workflow
  endpoint:
    path: /workflows/android-workflow
    method: GET
- name: ios-workflow
  endpoint:
    path: /workflows/ios-workflow
    method: GET
- name: windows-workflow
  endpoint:
    path: /workflows/windows-workflow
    method: GET
- name: windows-release-workflow
  endpoint:
    path: /workflows/windows-release-workflow
    method: GET
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
    data_selector: artifacts
- name: google_play
  endpoint:
    path: /google_play
    method: POST
    data_selector: credentials
    params:
      track: internal
      submit_as_draft: true
- name: app_store_connect
  endpoint:
    path: /app_store_connect
    method: POST
    data_selector: auth
    params:
      submit_to_app_store: false
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: google_play
  endpoint:
    path: /google_play
    method: POST
    data_selector: credentials
    params:
      track: internal
      submit_as_draft: true
- name: app_store_connect
  endpoint:
    path: /app_store_connect
    method: POST
    data_selector: auth
    params:
      submit_to_app_store: false
- name: app_store_connect
  endpoint:
    path: /v1/apps
    method: POST
    data_selector: data
- name: google_play
  endpoint:
    path: /google_play/v1/apps
    method: POST
    data_selector: data
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
- name: app_store_connect
  endpoint:
    path: /v1/apps
    method: POST
    data_selector: data
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
    data_selector: artifacts
    params: {}
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
    data_selector: caches
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
- name: android-workflow
  endpoint:
    path: /android/workflow
    method: POST
    data_selector: workflow_data
    params: {}
- name: ios-workflow
  endpoint:
    path: /ios/workflow
    method: POST
    data_selector: workflow_data
    params: {}
- name: snap
  endpoint:
    path: /snap
    method: POST
    data_selector: results
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
- name: snap-package
  endpoint:
    path: /api/snap-package
    method: POST
    data_selector: results
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
    data_selector: artifacts
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: unity_license_activation
  endpoint:
    path: /activate/unity/license
    method: POST
    data_selector: response
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
    data_selector: artifacts
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: email_publishing
  endpoint:
    path: /publishing/email
    method: POST
    data_selector: recipients
    params: {}
- name: google_play_publishing
  endpoint:
    path: /publishing/google_play
    method: POST
    data_selector: credentials
    params:
      submit_as_draft: true
- name: app_store_connect_publishing
  endpoint:
    path: /publishing/app_store_connect
    method: POST
    data_selector: auth
    params:
      submit_to_testflight: true
- name: unity-macos-workflow
  endpoint:
    path: /workflows/unity-macos-workflow
    method: POST
    data_selector: workflow
- name: unity-windows-workflow
  endpoint:
    path: /workflows/unity-windows-workflow
    method: POST
    data_selector: workflow
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
    data_selector: artifacts
- name: email_publishing
  endpoint:
    path: /api/v1/email
    method: POST
    data_selector: recipients
    params: {}
- name: google_play_publishing
  endpoint:
    path: /api/v1/google_play
    method: POST
    data_selector: track
    params:
      incremental: package_name
- name: app_store_connect
  endpoint:
    path: /api/v1/app_store
    method: POST
    data_selector: app_id
    params: {}
- name: build_script
  endpoint:
    path: /Assets/Editor/Build.cs
    method: GET
    data_selector: records
- name: codemagic_yaml
  endpoint:
    path: /codemagic.yaml
    method: GET
    data_selector: records
- name: signing_files
  endpoint:
    path: /fetch-signing-files
    method: POST
- name: certificates
  endpoint:
    path: /certificates
    method: GET
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
- name: Build Android
  endpoint:
    path: /Assets/Editor/Build.cs
    method: POST
    data_selector: records
- name: app_store_connect
  endpoint:
    path: /app_store_connect/publish
    method: POST
- name: google_play
  endpoint:
    path: /google_play/publish
    method: POST
- name: codemagic.yaml
  endpoint:
    path: /yaml-basic-configuration/
    method: GET
    data_selector: workflows
    params: {}
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
- name: variable_groups
  endpoint:
    path: /variable-groups
    method: POST
    data_selector: variable_groups
- name: google_play
  endpoint:
    path: /google_play
    method: POST
    data_selector: artifacts
    params:
      track: internal
      submit_as_draft: true
- name: app_store_connect
  endpoint:
    path: /app_store_connect
    method: POST
    data_selector: artifacts
    params:
      auth: integration
      submit_to_app_store: true
- name: trigger_builds
  endpoint:
    path: /builds
    method: POST
    data_selector: builds
- name: client_assets
  endpoint:
    path: /api/v3/variable-groups/{variable_group_id}/variables
    method: POST
    data_selector: variables
    params: {}
- name: workflows
  endpoint:
    path: /rest-api/workflows
    method: GET
    data_selector: workflows
- name: builds
  endpoint:
    path: /rest-api/builds
    method: POST
    data_selector: builds
- name: Trigger Build
  endpoint:
    path: /builds
    method: POST
    data_selector: build
    params: {}
- name: workflows
  endpoint:
    path: /yaml-basic-configuration/
    method: GET
    data_selector: workflows
    params: {}
- name: workflows
  endpoint:
    path: /yaml-basic-configuration/yaml-getting-started/
    method: GET
    data_selector: workflows
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: workflows
  endpoint:
    path: /yaml-basic-configuration/
    method: GET
    data_selector: workflows
    params: {}
- name: triggering
  endpoint:
    path: triggering
    method: GET
    data_selector: events
    params:
      events:
      - push
      - pull_request
      - pull_request_labeled
      - tag
      branch_patterns:
      - pattern: '*'
        include: true
        source: true
      - pattern: excluded-target
        include: false
        source: false
      - pattern: included-source
        include: true
        source: true
      tag_patterns:
      - pattern: '*'
        include: true
      - pattern: excluded-tag
        include: false
      - pattern: included-tag
        include: true
      cancel_previous_builds: false
- name: workflows
  endpoint:
    path: /rest-api/workflows/
    method: GET
    data_selector: workflows
    params: {}
- name: workflows
  endpoint:
    path: /rest-api/workflows
    method: GET
    data_selector: workflows
- name: applications
  endpoint:
    path: /rest-api/applications
    method: GET
    data_selector: applications
- name: builds
  endpoint:
    path: /rest-api/builds
    method: GET
    data_selector: builds
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
    params: {}
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
    params: {}
- name: android_builds
  endpoint:
    path: /common/android_variables
    method: GET
- name: ios_builds
  endpoint:
    path: /common/ios_variables
    method: GET
- name: environment_variables
  endpoint:
    path: /yaml-basic-configuration/configuring-environment-variables/
    method: GET
    data_selector: variables
    params: {}
- name: variable_groups
  endpoint:
    path: /yaml-basic-configuration/yaml-getting-started#environment
    method: GET
    data_selector: groups
    params: {}
- name: environment_variables
  endpoint:
    path: /yaml-basic-configuration/using-environment-variables
    method: GET
    data_selector: variables
    params: {}
- name: built_in_environment_variables
  endpoint:
    path: /built-in-environment-variables
    method: GET
    data_selector: variables
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /builds
    method: GET
    data_selector: builds
    params: {}
- name: environment_variables
  endpoint:
    path: /built-in-environment-variables
    method: GET
    data_selector: variables
    params: {}
- name: webhook
  endpoint:
    path: /hooks/<appId>
    method: POST
- name: build_triggering
  endpoint:
    path: /yaml-running-builds/starting-builds-automatically
    method: GET
    data_selector: events
    params: {}
- name: webhooks
  endpoint:
    path: /hooks/<appId>
    method: POST
    data_selector: payload
- name: flutter_unit_tests
  endpoint:
    path: /scripts/flutter/test
    method: POST
    data_selector: test-results
    params: {}
- name: flutter_integration_tests
  endpoint:
    path: /scripts/flutter/integration_test
    method: POST
    data_selector: test-results
    params: {}
- name: Flutter unit tests
  endpoint:
    path: /scripts
    method: POST
    data_selector: test_results
    params: {}
- name: Flutter integration tests
  endpoint:
    path: /scripts
    method: POST
    data_selector: test_results
    params: {}
- name: flutter_unit_tests
  endpoint:
    path: /flutter/tests/unit
    method: POST
    data_selector: test_results
    params: {}
- name: flutter_integration_tests
  endpoint:
    path: /flutter/tests/integration
    method: POST
    data_selector: test_results
    params: {}
- name: react_native_unit_tests
  endpoint:
    path: /react_native/tests/unit
    method: POST
    data_selector: test_results
    params: {}
- name: Unit tests
  endpoint:
    path: /yaml-testing/testing/
    method: GET
    data_selector: scripts
    params: {}
- name: Integration tests
  endpoint:
    path: /yaml-testing/testing/
    method: GET
    data_selector: scripts
    params: {}
- name: flutter_unit_tests
  endpoint:
    path: /yaml-testing/testing/
    method: GET
    data_selector: scripts
    params: {}
- name: flutter_integration_tests
  endpoint:
    path: /yaml-testing/testing/
    method: GET
    data_selector: scripts
    params: {}
- name: react_native_unit_tests
  endpoint:
    path: /yaml-testing/testing/
    method: GET
    data_selector: scripts
    params: {}
- name: Emulator Setup
  endpoint:
    path: /emulator/setup
    method: POST
    data_selector: setup
    params: {}
- name: WebDriver Test Suite
  endpoint:
    path: /webdriver/test
    method: POST
    data_selector: tests
    params: {}
- name: iOS Test
  endpoint:
    path: /ios/test
    method: POST
    data_selector: tests
    params: {}
- name: macOS Test
  endpoint:
    path: /macos/test
    method: POST
    data_selector: tests
    params: {}
- name: Android Test
  endpoint:
    path: /android/test
    method: POST
    data_selector: tests
    params: {}
- name: test_run
  endpoint:
    path: /tests/run
    method: POST
    data_selector: results
- name: detox-test
  endpoint:
    path: /yaml-testing/detox-testing/
    method: GET
    data_selector: scripts
- name: detox-test
  endpoint:
    path: /detox-test
    method: POST
    data_selector: result
    params: {}
- name: signing_files
  endpoint:
    path: /fetch-signing-files
    method: POST
    data_selector: files
- name: environment_variables
  endpoint:
    path: /environment_variables
    method: POST
- name: android_signing
  endpoint:
    path: /yaml-code-signing/signing-android
    method: GET
    data_selector: keystores
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
- name: environment_variables
  endpoint:
    path: /environment/variables
    method: GET
    data_selector: variables
- name: app_store_connect_api
  endpoint:
    path: /rest-api/app_store_connect_api
    method: POST
- name: signing_files
  endpoint:
    path: /app-store-connect/fetch-signing-files
    method: POST
- name: fetch_signing_files
  endpoint:
    path: /fetch-signing-files
    method: POST
- name: signing_files
  endpoint:
    path: /fetch-signing-files
    method: POST
- name: keystore
  endpoint:
    path: /codemagic/keystore
    method: POST
    data_selector: records
- name: code_signing
  endpoint:
    path: /rest-api/codemagic-rest-api/
    method: GET
    data_selector: signing_methods
- name: iOS code signing
  endpoint:
    path: /flutter-code-signing/ios-code-signing
    method: GET
- name: Android code signing
  endpoint:
    path: /flutter-code-signing/android-code-signing
    method: GET
- name: macOS code signing
  endpoint:
    path: /flutter-code-signing/macos-code-signing
    method: GET
- name: signing_files
  endpoint:
    path: /fetch-signing-files
    method: POST
- name: code_signing
  endpoint:
    path: /yaml-code-signing/alternative-code-signing-methods
    method: GET
- name: fetch_signing_files
  endpoint:
    path: /fetch-signing-files
    method: POST
- name: fetch_signing_files
  endpoint:
    path: /fetch-signing-files
    method: POST
    data_selector: signingFiles
- name: app_store_connect_fetch_signing_files
  endpoint:
    path: /app-store-connect/fetch-signing-files
    method: POST
- name: environment_variables
  endpoint:
    path: /environment/variables
    method: GET
    data_selector: variables
- name: keystore_setup
  endpoint:
    path: /keystore/setup
    method: POST
    data_selector: setup
- name: simulator-native-ios
  endpoint:
    path: /yaml-code-signing/ios-simulator-builds/
    method: GET
    data_selector: workflows
    params: {}
- name: maui-ios-simulator-build
  endpoint:
    path: /yaml-code-signing/ios-simulator-builds/
    method: GET
    data_selector: workflows
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
- name: app_store_connect_api_key
  endpoint:
    path: /access/integrations/api
    method: POST
- name: iOS simulator builds
  endpoint:
    path: /yaml-code-signing/ios-simulator-builds/
    method: GET
    data_selector: records
- name: Maui .NET7 iOS app
  endpoint:
    path: /yaml-code-signing/ios-simulator-builds/
    method: GET
    data_selector: records
- name: app_store_connect
  endpoint:
    path: /services/AppStoreConnect
    method: POST
    data_selector: upload
- name: App Store Connect API
  endpoint:
    path: /access/integrations/api
    method: POST
- name: app_store_connect
  endpoint:
    path: /v1/apps
    method: POST
- name: post_processing
  endpoint:
    path: /post-processing
    method: POST
    data_selector: results
- name: app_store_connect
  endpoint:
    path: /users/access/integrations/api
    method: POST
- name: publishing
  endpoint:
    path: /publishing/app_store_connect
    method: POST
    data_selector: results
- name: publishing
  endpoint:
    path: /publishing/app_store_connect
    method: POST
    data_selector: publishing
    params: {}
- name: post_processing
  endpoint:
    path: /post_processing
    method: POST
    data_selector: results
    params:
      submit_to_app_store: true
      submit_to_testflight: true
      release_type: SCHEDULED
      expire_build_submitted_for_review: true
      cancel_previous_submissions: true
      earliest_release_date: '2021-12-01T14:00:00+00:00'
      copyright: 2021 Nevercode Ltd
- name: app_store_connect
  endpoint:
    path: /app_store_connect_api
    method: POST
    data_selector: app_store_data
- name: publishing
  endpoint:
    path: /google_play/publishing
    method: POST
    data_selector: results
- name: publishing
  endpoint:
    path: /publishing/app_store_connect
    method: POST
    data_selector: publishing_data
- name: tester_groups
  endpoint:
    path: /tester-groups
    method: POST
    data_selector: tester_groups
    params: {}
- name: partner_center
  endpoint:
    path: /partner_center
    method: POST
    data_selector: submissions
    params:
      store_id: 1D4VKTPG38SA
      tenant_id: ab80a389-41e3-55a8-ae12-bb7430667e04
- name: publishing
  endpoint:
    path: /publishing/google_play
    method: POST
    data_selector: credentials
    params:
      track: internal
      release_name: Custom release name
      in_app_update_priority: 3
      rollout_fraction: 0.25
      changes_not_sent_for_review: true
      promote_as_draft: true
- name: build_dashboards
  endpoint:
    path: /knowledge-others/build-dashboards/
    method: GET
    data_selector: build dashboards data
- name: firebase_distribution
  endpoint:
    path: /publishing/firebase
    method: POST
    data_selector: publishing
    params: {}
- name: tester_groups
  endpoint:
    path: /publishing/tester_groups
    method: POST
    data_selector: tester_groups
- name: partner_center
  endpoint:
    path: /partner_center
    method: POST
    data_selector: result
    params:
      store_id: 1D4VKTPG38SA
- name: huawei_appgallery_connect
  endpoint:
    path: /huawei/appgallery/connect
    method: POST
- name: publishing
  endpoint:
    path: /publishing/firebase
    method: POST
    data_selector: firebase_service_account
    params: {}
- name: API Client
  endpoint:
    path: /api-client
    method: POST
- name: App ID
  endpoint:
    path: /app-id
    method: GET
- name: GitHub Releases
  endpoint:
    path: /github/releases
    method: POST
- name: app_build
  endpoint:
    path: steam/app_build.vdf
    method: POST
- name: depot_build
  endpoint:
    path: steam/depot_build.vdf
    method: POST
- name: publish
  endpoint:
    path: /publish
    method: POST
    data_selector: success
    params: {}
- name: s3_bucket_update
  endpoint:
    path: /aws/s3/sync
    method: POST
    data_selector: result
- name: github_releases
  endpoint:
    path: /repos/{owner}/{repo}/releases
    method: POST
    data_selector: release
    params: {}
- name: publish_to_google_cloud
  endpoint:
    path: /publishing/scripts
    method: POST
    data_selector: scripts
    params: {}
- name: publish
  endpoint:
    path: /publish
    method: POST
    data_selector: result
    params: {}
- name: aws_credentials
  endpoint:
    path: /
    method: POST
    data_selector: variables
    params:
      variable_name: AWS_ACCESS_KEY_ID
      variable_value: <Variable Value>
      variable_group: aws_credentials
- name: web-workflow
  endpoint:
    path: /publish
    method: POST
- name: Google Cloud Storage
  endpoint:
    path: /
    method: POST
    data_selector: ''
    params: {}
- name: email_notifications
  endpoint:
    path: /yaml-notification/email/
    method: GET
    data_selector: recipients
    params: {}
- name: web-workflow
  endpoint:
    path: /publish
    method: POST
- name: email_notifications
  endpoint:
    path: /yaml-notification/email/
    method: POST
    data_selector: recipients
    params: {}
- name: telegram_notifications
  endpoint:
    path: /api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage
    method: POST
    data_selector: response
    params: {}
- name: send_message
  endpoint:
    path: /bot{TELEGRAM_BOT_TOKEN}/sendMessage
    method: POST
    data_selector: response
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
- name: slack_notifications
  endpoint:
    path: /api/chat.postMessage
    method: POST
    data_selector: response
    params:
      channel: '#channel-name'
      notify_on_build_start: true
      notify:
        success: false
        failure: false
- name: slack_notifications
  endpoint:
    path: /api/slack
    method: POST
    data_selector: notifications
    params: {}
- name: build_status_badge
  endpoint:
    path: /apps/<app-id>/<workflow-id>/status_badge.svg
    method: GET
- name: build_status_badge
  endpoint:
    path: /apps/<app-id>/<workflow-id>/status_badge.svg
    method: GET
    data_selector: ''
- name: upload_apk
  endpoint:
    path: /v1/apps/{APP_PUBLIC_KEY}
    method: POST
    data_selector: file
    params: {}
- name: upload_ios_app
  endpoint:
    path: /v1/apps/{APP_PUBLIC_KEY}
    method: POST
    data_selector: file
    params: {}
- name: environment_variable
  endpoint:
    path: /environment_variables
    method: POST
    data_selector: variables
    params: {}
- name: appknox_binary_installation
  endpoint:
    path: /appknox_binary_installation
    method: POST
    data_selector: scripts
    params: {}
- name: upload_binary
  endpoint:
    path: /upload_binary
    method: POST
    data_selector: upload
    params: {}
- name: check_vulnerability_risk_level
  endpoint:
    path: /check_vulnerability_risk_level
    method: POST
    data_selector: risk_level
    params: {}
- name: Appknox binary installation
  endpoint:
    path: /usr/local/bin/appknox
    method: POST
    data_selector: binary installation
    params: {}
- name: Upload binary to Appknox
  endpoint:
    path: appknox upload PATH_TO_APP_BINARY
    method: POST
    data_selector: upload
    params: {}
- name: Check vulnerability risk level
  endpoint:
    path: appknox cicheck <file-id>
    method: GET
    data_selector: risk level
    params:
      risk_threshold: <low|medium|high|critical>
- name: App Live
  endpoint:
    path: /app-live/upload
    method: POST
- name: App Automate
  endpoint:
    path: /app-automate/upload
    method: POST
- name: App Live
  endpoint:
    path: /app-live/upload
    method: POST
    data_selector: response
    params: {}
- name: App Automate
  endpoint:
    path: /app-automate/upload
    method: POST
    data_selector: response
    params: {}
- name: Capawesome Cloud CLI
  endpoint:
    path: /cloud/capawesome-cli
    method: POST
    data_selector: scripts
- name: Capgo
  endpoint:
    path: /api/capgo
    method: POST
    data_selector: updates
    params:
      channel: production
- name: Capgo integration
  endpoint:
    path: /api/v1/capgo
    method: POST
    data_selector: data
    params: {}
- name: coverage_report
  endpoint:
    path: /upload
    method: POST
- name: coverage_report
  endpoint:
    path: /upload
    method: POST
    data_selector: coverage
    params: {}
- name: CodePush
  endpoint:
    path: /codepush
    method: POST
    data_selector: response
    params: {}
- name: Dart Code Metrics API Key
  endpoint:
    path: /dcm/api/key
    method: POST
    data_selector: apiKey
    params: {}
- name: Dart Code Metrics
  endpoint:
    path: /dcm/analyze
    method: POST
    data_selector: results
- name: Discord Notification
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload_json
    params: {}
- name: Teams Webhook
  endpoint:
    path: /
    method: POST
    data_selector: ''
    params: {}
- name: webhook
  endpoint:
    path: /teams/webhook
    method: POST
    data_selector: notification
    params: {}
- name: Emerge Tools API Key
  endpoint:
    path: /profile
    method: GET
    data_selector: api_key
- name: codemagic
  endpoint:
    path: /api/v1/codemagic
    method: POST
    data_selector: data
    params: {}
- name: artifacts
  endpoint:
    path: /artifacts
    method: GET
    data_selector: artifacts
- name: environment_variables
  endpoint:
    path: /path/to/environment/variables
    method: POST
    data_selector: variables
    params: {}
- name: issue
  endpoint:
    path: /rest/api/3/issue/{{ dlt.secrets['JIRA_ISSUE'] }}
    method: POST
    data_selector: body
    params: {}
- name: comments
  endpoint:
    path: /rest/api/3/issue/{issueIdOrKey}/comment
    method: POST
    data_selector: id
    params: {}
- name: transitions
  endpoint:
    path: /rest/api/3/issue/{issueIdOrKey}/transitions
    method: GET
    data_selector: transitions
    params: {}
- name: issue_comment
  endpoint:
    path: /rest/api/3/issue/$JIRA_ISSUE/comment
    method: POST
- name: issue_transitions
  endpoint:
    path: /rest/api/3/issue/$JIRA_ISSUE/transitions
    method: POST
- name: issue_attachments
  endpoint:
    path: /rest/api/3/issue/$JIRA_ISSUE/attachments
    method: POST
- name: issue_comment
  endpoint:
    path: /rest/api/3/issue/$JIRA_ISSUE/comment
    method: POST
- name: issue_transitions
  endpoint:
    path: /rest/api/3/issue/$JIRA_ISSUE/transitions
    method: POST
- name: issue_attachments
  endpoint:
    path: /rest/api/3/issue/$JIRA_ISSUE/attachments
    method: POST
- name: testops-config
  endpoint:
    path: /testops-config.json
    method: POST
    data_selector: data
- name: upload_app
  endpoint:
    path: /v1/apps/uploadUrl
    method: POST
    data_selector: ''
    params: {}
- name: create_revisit_plan
  endpoint:
    path: /v1/revisitPlans/create
    method: POST
    data_selector: ''
    params: {}
- name: upload_app
  endpoint:
    path: /v1/apps/uploadUrl
    method: POST
    data_selector: ''
    params: {}
- name: create_revisit_plan
  endpoint:
    path: /v1/revisitPlans/create
    method: POST
    data_selector: ''
    params: {}
- name: LambdaTest Real Time
  endpoint:
    path: /app/upload/realDevice
    method: POST
- name: Real Time Testing
  endpoint:
    path: /app/upload/realDevice
    method: POST
    data_selector: ''
    params: {}
- name: App Automation
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: maestro_cloud
  endpoint:
    path: /cloud/mobile.dev/
    method: POST
    data_selector: results
- name: Maestro Cloud API Key
  endpoint:
    params:
      Variable name: MDEV_API_KEY
      Variable group name: maestro
- name: patrol_tests
  endpoint:
    path: /api/v1/patrol/tests
    method: POST
    data_selector: tests
    params: {}
- name: patrol_android_build
  endpoint:
    path: /yaml-basic-configuration
    method: POST
    data_selector: definitions
    params: {}
- name: upload_file
  endpoint:
    path: /api/upload_file
    method: POST
- name: access
  endpoint:
    path: /api/access
    method: GET
- name: upload_file
  endpoint:
    path: /api/upload_file
    method: POST
- name: access_token
  endpoint:
    path: /api/access
    method: GET
- name: Upload to Perfecto
  endpoint:
    path: /repository/api/v1/artifacts
    method: POST
    data_selector: artifacts
- name: PerfectoRunAndroid
  endpoint:
    path: /repository/api/v1/artifacts
    method: POST
    data_selector: artifacts
    params: {}
- name: PerfectoRunIos
  endpoint:
    path: /repository/api/v1/artifacts
    method: POST
    data_selector: artifacts
    params: {}
- name: upload_dSYM
  endpoint:
    path: /upload-dif
    method: POST
    data_selector: dsymPath
- name: upload_app
  endpoint:
    path: /parser-microservice/build-upload
    method: POST
- name: schedule_test
  endpoint:
    path: /scheduler-microservice/scheduled-runs/:scheduledRunGuid/execute
    method: POST
- name: fetch_test_run_group_ids
  endpoint:
    path: /scheduler-microservice/scheduled-runs/$SOFY_SCHEDULE_GUID/test-run-groups
    method: GET
- name: check_test_status
  endpoint:
    path: /scheduler-microservice/scheduled-runs/$SOFY_SCHEDULE_GUID/status/:testRunGroupId
    method: GET
- name: SonarCloud Integration
  endpoint:
    path: /integrations/sonarcloud-integration
    method: GET
- name: sonarcloud_integration
  endpoint:
    path: /api/projects/create
    method: POST
    data_selector: project
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
    params: {}
- name: Android
  endpoint:
    path: /flutter-configuration/building-android-apps
    method: GET
- name: iOS
  endpoint:
    path: /flutter-configuration/building-ios-apps
    method: GET
- name: web
  endpoint:
    path: /flutter-configuration/building-web-apps
    method: GET
- name: macOS
  endpoint:
    path: /flutter-configuration/building-macos-apps
    method: GET
- name: Linux
  endpoint:
    path: /flutter-configuration/building-linux-apps
    method: GET
- name: Windows
  endpoint:
    path: /flutter-configuration/building-windows-apps
    method: GET
- name: build_msix_package
  endpoint:
    path: /create/msix/package
    method: POST
    data_selector: package
    params: {}
- name: run_tests_only
  endpoint:
    path: /run/tests
    method: POST
    data_selector: tests
    params: {}
- name: start_builds
  endpoint:
    path: /start/build
    method: POST
    data_selector: build
    params: {}
- name: multiple_flutter_projects
  endpoint:
    path: /detect/projects
    method: GET
    data_selector: projects
    params: {}
- name: set_flutter_version
  endpoint:
    path: /set/flutter/version
    method: POST
    data_selector: version
    params: {}
- name: environment_variables
  endpoint:
    path: /yaml-basic-configuration/configuring-environment-variables/
    method: GET
- name: binary_files
  endpoint:
    path: /yaml-basic-configuration/using-environment-variables/
    method: GET
- name: environment_variables
  endpoint:
    path: /api/environment_variables
    method: GET
    data_selector: variables
    params: {}
- name: built_in_environment_variables
  endpoint:
    path: /built-in-environment-variables
    method: GET
    data_selector: variables
    params: {}
- name: custom_build_steps
  endpoint:
    path: /flutter-configuration/custom-scripts/
    method: GET
    data_selector: scripts
- name: applications
  endpoint:
    path: /v1/applications
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /v1/builds
    method: GET
    data_selector: builds
    params: {}
- name: built_in_environment_variables
  endpoint:
    path: /built-in-variables
    method: GET
    data_selector: variables
- name: scheduled_builds
  endpoint:
    path: /scheduled_builds
    method: GET
    data_selector: schedules
- name: webhooks
  endpoint:
    path: /hooks/<appId>
    method: POST
    data_selector: results
- name: scheduled_builds
  endpoint:
    path: /api/v1/scheduled_builds
    method: GET
    data_selector: builds
    params: {}
- name: build_triggers
  endpoint:
    path: /app/settings/build/triggers
    method: GET
    data_selector: triggers
- name: webhooks
  endpoint:
    path: /hooks/<appId>
    method: POST
    data_selector: payload
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
- name: build_triggers
  endpoint:
    path: /api/build_triggers
    method: POST
    data_selector: triggers
    params: {}
- name: watched_branch_patterns
  endpoint:
    path: /api/watched_branch_patterns
    method: GET
    data_selector: patterns
    params: {}
- name: watched_tag_patterns
  endpoint:
    path: /api/watched_tag_patterns
    method: GET
    data_selector: patterns
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
- name: flutter_analyze
  endpoint:
    path: /flutter/analyze
    method: POST
    data_selector: results
- name: automated_tests
  endpoint:
    path: /yaml-testing/testing/
    method: GET
    data_selector: tests
    params: {}
- name: static_code_analysis
  endpoint:
    path: /flutter-testing/static-code-analysis
    method: GET
    data_selector: results
- name: widget_tests
  endpoint:
    path: /widget/tests
    method: GET
    data_selector: tests
    params: {}
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
- name: builds
  endpoint:
    path: /builds
    method: GET
    data_selector: builds
- name: artifacts
  endpoint:
    path: /artifacts
    method: GET
    data_selector: artifacts
- name: app_preview
  endpoint:
    path: /yaml-testing/app-preview
    method: GET
- name: macOS code signing
  endpoint:
    path: /macos/code-signing
    method: POST
    data_selector: data
    params: {}
- name: App Store Connect API
  endpoint:
    path: /access/integrations/api
    method: GET
- name: android_code_signing
  endpoint:
    path: /code-signing/android
    method: POST
    data_selector: result
    params: {}
- name: Google Play API
  endpoint:
    path: /services/data/v1/google_play_api
    method: POST
    data_selector: data
    params: {}
- name: release_notes
  endpoint:
    path: /v1/betaBuildLocalizations
    method: POST
    data_selector: data
    params: {}
- name: Microsoft Partner Center
  endpoint:
    path: /partner-center/submissions
    method: POST
- name: Google Play API
  endpoint:
    path: /apis/api/androidpublisher.googleapis.com/
    method: POST
    data_selector: credentials
    params: {}
- name: Microsoft Partner Center
  endpoint:
    path: /partner-center/authentication
    method: POST
- name: snapcraft_publishing
  endpoint:
    path: /snapcraft/publish
    method: POST
- name: snap_package
  endpoint:
    path: /snapcraft/snap
    method: POST
    data_selector: snap
    params: {}
- name: aws_s3_bucket
  endpoint:
    path: /s3/bucket
    method: POST
    data_selector: artifact
    params:
      aws_access_key_id: AWS access key ID
      aws_secret_access_key: AWS secret access Key
      bucket_name: Bucket name
- name: email_notifications
  endpoint:
    path: /notifications/email
    method: POST
    data_selector: notifications
    params: {}
- name: slack_notifications
  endpoint:
    path: /notifications/slack
    method: POST
    data_selector: notifications
    params: {}
- name: email_notifications
  endpoint:
    path: /yaml-notification/email/
    method: GET
    data_selector: notifications
- name: slack_notifications
  endpoint:
    path: /yaml-notification/slack/
    method: GET
    data_selector: notifications
- name: build_machine_type
  endpoint:
    path: /knowledge-codemagic/machine-type/
    method: GET
    data_selector: instance_type
- name: build_versioning
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: records
- name: App Store Connect API
  endpoint:
    path: /app-store-connect/api
    method: POST
    data_selector: build_number
    params: {}
- name: Google Play API
  endpoint:
    path: /google-play/api
    method: POST
    data_selector: build_number
    params: {}
- name: Firebase App Distribution
  endpoint:
    path: /firebase-app-distribution/api
    method: POST
    data_selector: build_version
    params: {}
- name: build_inputs
  endpoint:
    path: /rest-api/builds
    method: GET
    data_selector: inputs
    params: {}
- name: App Store or TestFlight latest build number
  endpoint:
    path: /get-latest-app-store-build-number
    method: GET
- name: Google Play latest build number
  endpoint:
    path: /get-latest-build-number
    method: GET
- name: Firebase App Distribution latest build version
  endpoint:
    path: /get-latest-build-version
    method: GET
- name: inputs
  endpoint:
    path: /viewing/inputs
    method: GET
    data_selector: inputs
    params: {}
- name: build_inputs
  endpoint:
    path: /yaml-basic-configuration/using-environment-variables/
    method: GET
    data_selector: inputs
    params: {}
- name: inputs
  endpoint:
    path: /yaml-schema-for-inputs
    method: GET
    data_selector: inputs
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: app_store_connect
  endpoint:
    path: ./app_store_connect.json
    method: POST
    data_selector: ''
    params: {}
- name: google_play_store
  endpoint:
    path: android/google-play-store.json
    method: POST
    data_selector: ''
    params: {}
- name: app_store_connect
  endpoint:
    path: /app_store_connect
    method: POST
    data_selector: api_key_path
    params:
      app_identifier: com.example.app
      apple_id: yourlogin@icloud.com
      itc_team_id: '123456789'
      team_id: 123A4P567S
- name: GITHUB_TOKEN
  endpoint:
    path: /settings/tokens
    method: GET
    data_selector: tokens
    params: {}
- name: github_credentials
  endpoint:
    path: /environment-variables
    method: POST
    data_selector: variable_groups
    params: {}
- name: private_dependencies
  endpoint:
    path: /knowledge-git/access-private-git-submodules
    method: GET
    data_selector: content
- name: applications
  endpoint:
    path: /applications
    method: GET
- name: artifacts
  endpoint:
    path: /artifacts
    method: GET
- name: builds
  endpoint:
    path: /builds
    method: GET
- name: caches
  endpoint:
    path: /caches
    method: GET
- name: git_lfs_install
  endpoint:
    path: /git/lfs/install
    method: POST
    data_selector: scripts
    params: {}
- name: dSYM Upload
  endpoint:
    path: /knowledge-firebase/firebase-crashlytics-dsym-uploading/
    method: POST
    data_selector: artifacts
    params: {}
- name: private_packages
  endpoint:
    path: /settings/tokens
    method: POST
    data_selector: access_token
    params: {}
- name: aws_credentials
  endpoint:
    path: /services/secrets
    method: POST
    data_selector: secrets
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds
    method: GET
    data_selector: builds
    params: {}
- name: settings_env
  endpoint:
    path: /knowledge-others/import-variables-from-env-file
    method: GET
    data_selector: variables
    params: {}
- name: dSYM upload
  endpoint:
    path: /knowledge-firebase/firebase-crashlytics-dsym-uploading
    method: POST
    data_selector: artifacts
    params: {}
- name: firebase_configuration
  endpoint:
    path: /firebase/configuration
    method: POST
    data_selector: environment_variables
    params: {}
- name: iOS
  endpoint:
    path: /knowledge-others/binary-names-update/iOS
    method: GET
    data_selector: info
    params: {}
- name: Android
  endpoint:
    path: /knowledge-others/binary-names-update/Android
    method: GET
    data_selector: info
    params: {}
- name: AWS Secrets Manager
  endpoint:
    path: /secretsmanager/get-secret-value
    method: POST
- name: settings_env
  endpoint:
    path: /knowledge-others/import-variables-from-env-file
    method: GET
    data_selector: variables
    params: {}
- name: build_script
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: custom_artifacts
  endpoint:
    path: /knowledge-others/upload-custom-artifacts/
    method: GET
    data_selector: content
    params: {}
- name: applications
  endpoint:
    path: /applications
    method: GET
- name: builds
  endpoint:
    path: /builds
    method: GET
- name: artifacts
  endpoint:
    path: /artifacts
    method: GET
- name: caches
  endpoint:
    path: /caches
    method: GET
- name: iOS
  endpoint:
    path: /knowledge-others/binary-names-update/ios
    method: GET
    data_selector: CFBundleDisplayName
    params: {}
- name: Android
  endpoint:
    path: /knowledge-others/binary-names-update/android
    method: GET
    data_selector: archiveBaseName
    params: {}
- name: Flutter
  endpoint:
    path: /knowledge-others/binary-names-update/flutter
    method: GET
    data_selector: mv_command
    params: {}
- name: slack_integration
  endpoint:
    path: /api/slack/integration
    method: POST
    data_selector: attachments
    params: {}
- name: install_unity
  endpoint:
    path: /knowledge-others/install-unity-version
    method: GET
    data_selector: content
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
    params: {}
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
    data_selector: artifacts
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
    data_selector: caches
    params: {}
- name: android_signing
  endpoint:
    path: /android/signing
    method: POST
    data_selector: records
    params: {}
- name: Flutter Shader Compilation
  endpoint:
    path: /knowledge-others/flutter-shader-generation/
    method: GET
    data_selector: content
    params: {}
- name: retrieve_all_applications
  endpoint:
    path: /apps
    method: GET
    data_selector: applications
- name: retrieve_an_application
  endpoint:
    path: /apps/:id
    method: GET
    data_selector: application
- name: add_a_new_application
  endpoint:
    path: /apps
    method: POST
    data_selector: _id
- name: add_a_new_application_from_private_repository
  endpoint:
    path: /apps/new
    method: POST
    data_selector: application
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
- name: builds
  endpoint:
    path: /builds
    method: GET
    data_selector: builds
- name: slack_webhook
  endpoint:
    path: /api/slack/webhook
    method: POST
    data_selector: attachments
    params: {}
- name: start_build
  endpoint:
    path: /builds
    method: POST
    data_selector: buildId
    params: {}
- name: cancel_build
  endpoint:
    path: /builds/:id/cancel
    method: POST
    data_selector: null
    params: {}
- name: settings
  endpoint:
    path: /importing-variables-from-json
    method: GET
    data_selector: variables
- name: list_caches
  endpoint:
    path: /apps/:id/caches
    method: GET
    data_selector: caches
- name: delete_all_caches
  endpoint:
    path: /apps/:id/caches
    method: DELETE
- name: delete_specific_cache
  endpoint:
    path: /apps/:id/caches/:cacheId
    method: DELETE
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
- name: retrieve_all_applications
  endpoint:
    path: /apps
    method: GET
    data_selector: applications
- name: retrieve_application
  endpoint:
    path: /apps/:id
    method: GET
    data_selector: application
- name: add_new_application
  endpoint:
    path: /apps
    method: POST
    data_selector: ''
    params:
      repositoryUrl: string
      teamId: string
- name: add_new_application_from_private_repository
  endpoint:
    path: /apps/new
    method: POST
    data_selector: ''
    params:
      repositoryUrl: string
      sshKey: JSON
      projectType: string
      teamId: string
- name: start_build
  endpoint:
    path: /builds
    method: POST
    data_selector: null
    params:
      appId: string
      workflowId: string
      branch: string
      tag: string
      environment: object
      labels: list
- name: cancel_build
  endpoint:
    path: /builds/:id/cancel
    method: POST
    data_selector: null
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
- name: list_caches
  endpoint:
    path: /apps/:id/caches
    method: GET
    data_selector: caches
- name: delete_all_caches
  endpoint:
    path: /apps/:id/caches
    method: DELETE
- name: delete_specific_cache
  endpoint:
    path: /apps/:id/caches/:cacheId
    method: DELETE
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: common_android_issues
  endpoint:
    path: /troubleshooting/common-android-issues/
    method: GET
    data_selector: issues
    params: {}
- name: CodePush Pricing
  endpoint:
    path: /pricing/codepush
    method: GET
    data_selector: pricing_details
- name: Free Plan
  endpoint:
    path: /pricing/free
    method: GET
    data_selector: plan_details
- name: Buying Additional Minutes
  endpoint:
    path: /pricing/additional_minutes
    method: GET
    data_selector: additional_minutes_details
- name: Team Pricing
  endpoint:
    path: /pricing/team
    method: GET
    data_selector: team_pricing_details
- name: Fixed Annual Plans
  endpoint:
    path: /pricing/fixed_annual
    method: GET
    data_selector: annual_plan_details
- name: Burstable Concurrencies
  endpoint:
    path: /pricing/burstable_concurrencies
    method: GET
    data_selector: burstable_concurrencies_details
- name: repository_cloning_issue
  endpoint:
    path: /troubleshooting/common-issues/repository-cloning-issue
    method: GET
    data_selector: response
    params: {}
- name: unauthorized_access
  endpoint:
    path: /troubleshooting/common-issues/unauthorized-access
    method: GET
    data_selector: response
    params: {}
- name: github_integration
  endpoint:
    path: /troubleshooting/common-issues/github-integration
    method: GET
    data_selector: response
    params: {}
- name: macos_publishing_failed
  endpoint:
    path: /troubleshooting/common-issues/macos-publishing-failed
    method: GET
    data_selector: response
    params: {}
- name: changing_repository
  endpoint:
    path: /troubleshooting/common-issues/changing-repository
    method: GET
    data_selector: response
    params: {}
- name: flutter_build_error
  endpoint:
    path: /troubleshooting/common-issues/flutter-build-error
    method: GET
    data_selector: response
    params: {}
- name: app_stuck_on_splash_screen
  endpoint:
    path: /troubleshooting/common-issues/app-stuck-on-splash-screen
    method: GET
    data_selector: response
    params: {}
- name: billing
  endpoint:
    path: /billing
    method: GET
    data_selector: billing_info
    params: {}
- name: installed_sdk_packages
  endpoint:
    path: /list_installed
    method: GET
    data_selector: installed_packages
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: data
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: data
    params: {}
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
    data_selector: data
    params: {}
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
    data_selector: data
    params: {}
- name: sdk_manager
  endpoint:
    path: /usr/local/share/android-sdk/cmdline-tools/latest/bin/sdkmanager
    method: GET
    data_selector: installed_packages
    params: {}
- name: installed_sdk_packages
  endpoint:
    path: /usr/local/share/android-sdk/cmdline-tools/latest/bin/sdkmanager --list_installed
    method: GET
    data_selector: installed_packages
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: records
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: records
- name: installed_packages
  endpoint:
    path: /usr/local/share/android-sdk/cmdline-tools/latest/bin/sdkmanager
    method: GET
    data_selector: installed_packages
- name: sdk_manager
  endpoint:
    path: /usr/local/share/android-sdk/cmdline-tools/latest/bin/sdkmanager
    method: GET
    data_selector: installed_packages
    params: {}
- name: ndk
  endpoint:
    path: /usr/local/share/android-sdk/ndk/25.1.8937393
    method: GET
    data_selector: ndk_version
    params: {}
- name: java_versions
  endpoint:
    path: /Library/Java/JavaVirtualMachines
    method: GET
    data_selector: java_versions
    params: {}
- name: gradle_versions
  endpoint:
    path: /Users/builder/programs
    method: GET
    data_selector: gradle_versions
    params: {}
- name: installed_sdk_packages
  endpoint:
    path: /usr/local/share/android-sdk/cmdline-tools/latest/bin/sdkmanager --list_installed
    method: GET
    data_selector: installed_packages
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: installed_sdk_packages
  endpoint:
    path: /usr/local/share/android-sdk/cmdline-tools/latest/bin/sdkmanager
    method: GET
    data_selector: installed_packages
- name: Android emulators
  endpoint:
    path: /usr/local/share/android-sdk/cmdline-tools/latest/bin/avdmanager
    method: GET
    data_selector: Available Android Virtual Devices
    params: {}
- name: Java versions
  endpoint:
    path: /usr/lib/jvm/
    method: GET
    data_selector: Java versions
    params: {}
- name: Gradle versions
  endpoint:
    path: /home/builder/programs/
    method: GET
    data_selector: Gradle versions
    params: {}
- name: Other pre-installed tools
  endpoint:
    path: /usr/bin/
    method: GET
    data_selector: Other pre-installed tools
    params: {}
- name: installed_sdk_packages
  endpoint:
    path: /sdk/packages
    method: GET
    data_selector: packages
    params: {}
- name: Linux virtual machine
  endpoint:
    path: /specs-linux/ubuntu-20.04/
    method: GET
    data_selector: tools
    params: {}
- name: installed_packages
  endpoint:
    path: /usr/local/share/android-sdk/cmdline-tools/latest/bin/sdkmanager
    method: GET
    data_selector: installed_packages
- name: installed_packages
  endpoint:
    path: /installed
    method: GET
    data_selector: packages
    params: {}
- name: installed_sdk_packages
  endpoint:
    path: /usr/local/share/android-sdk/cmdline-tools/latest/bin/sdkmanager --list_installed
    method: GET
    data_selector: installed_packages
- name: android_ndk
  endpoint:
    path: /usr/local/share/android-sdk/ndk/25.1.8937393
    method: GET
    data_selector: ndk_version
- name: java_versions
  endpoint:
    path: /Library/Java/JavaVirtualMachines
    method: GET
    data_selector: java_versions
- name: gradle_versions
  endpoint:
    path: /Users/builder/programs
    method: GET
    data_selector: gradle_versions
- name: pre_installed_tools
  endpoint:
    path: /usr/local/share/tools
    method: GET
    data_selector: tools
- name: installed_sdk_packages
  endpoint:
    path: /usr/local/share/android-sdk/cmdline-tools/latest/bin/sdkmanager
    method: GET
    data_selector: installed_packages
- name: ndk
  endpoint:
    path: /usr/local/share/android-sdk/ndk/25.1.8937393
    method: GET
    data_selector: ndk_version
- name: java_versions
  endpoint:
    path: /Library/Java/JavaVirtualMachines
    method: GET
    data_selector: java_versions
- name: gradle_versions
  endpoint:
    path: /Users/builder/programs
    method: GET
    data_selector: gradle_versions
- name: other_pre_installed_tools
  endpoint:
    path: /usr/local/share/android-sdk/tools
    method: GET
    data_selector: pre_installed_tools
- name: start_build
  endpoint:
    path: /builds
    method: POST
    data_selector: null
    params:
      appId: string
      workflowId: string
      branch: string
      tag: string
      environment: object
      labels: list
- name: cancel_build
  endpoint:
    path: /builds/:id/cancel
    method: POST
    data_selector: null
    params: {}
- name: applications
  endpoint:
    path: /rest-api/applications/
    method: GET
    data_selector: applications
    params: {}
- name: builds
  endpoint:
    path: /rest-api/builds/
    method: GET
    data_selector: builds
    params: {}
- name: artifacts
  endpoint:
    path: /rest-api/artifacts/
    method: GET
    data_selector: artifacts
    params: {}
- name: caches
  endpoint:
    path: /rest-api/caches/
    method: GET
    data_selector: caches
    params: {}
- name: Android Emulators
  endpoint:
    path: /usr/local/share/android-sdk/cmdline-tools/latest/bin/avdmanager
    method: GET
    data_selector: Available Android Virtual Devices
    params: {}
- name: Java Versions
  endpoint:
    path: /usr/lib/jvm/
    method: GET
    data_selector: Java versions
    params: {}
- name: Gradle Versions
  endpoint:
    path: /home/builder/programs/
    method: GET
    data_selector: Gradle versions
    params: {}
- name: linux_machines
  endpoint:
    path: /specs-linux/ubuntu-20.04/
    method: GET
    data_selector: tools
- name: Android SDK Build-Tools
  endpoint:
    path: /usr/local/share/android-sdk/cmdline-tools/latest/bin/sdkmanager
    method: GET
    data_selector: installed_packages
- name: Android NDK
  endpoint:
    path: /usr/local/share/android-sdk/ndk
    method: GET
    data_selector: ndk_versions
- name: Android Emulators
  endpoint:
    path: /usr/local/share/android-sdk/cmdline-tools/latest/bin/avdmanager
    method: GET
    data_selector: available_emulators
- name: Java Versions
  endpoint:
    path: /usr/lib/jvm
    method: GET
    data_selector: java_versions
- name: Gradle Versions
  endpoint:
    path: /home/builder/programs
    method: GET
    data_selector: gradle_versions
- name: Other Pre-installed Tools
  endpoint:
    path: /usr/local/bin
    method: GET
    data_selector: installed_tools
- name: hardware
  endpoint:
    path: /specs/versions-windows/hardware
    method: GET
    data_selector: hardware
    params: {}
- name: system
  endpoint:
    path: /specs/versions-windows/system
    method: GET
    data_selector: system
    params: {}
- name: android_studio
  endpoint:
    path: /specs/versions-windows/android-studio
    method: GET
    data_selector: android_studio
    params: {}
- name: android_sdk
  endpoint:
    path: /specs/versions-windows/android-sdk
    method: GET
    data_selector: android_sdk
    params: {}
- name: java_versions
  endpoint:
    path: /specs/versions-windows/java-versions
    method: GET
    data_selector: java_versions
    params: {}
- name: gradle_versions
  endpoint:
    path: /specs/versions-windows/gradle-versions
    method: GET
    data_selector: gradle_versions
    params: {}
- name: other_tools
  endpoint:
    path: /specs/versions-windows/other-tools
    method: GET
    data_selector: other_tools
    params: {}
- name: linux_machine
  endpoint:
    path: /specs/linux/ubuntu-20.04/
    method: GET
    data_selector: hardware
- name: start_build
  endpoint:
    path: /builds
    method: POST
    data_selector: buildId
- name: cancel_build
  endpoint:
    path: /builds/:id/cancel
    method: POST
notes:
- Please take extra care when sharing public download URLs so as to not expose them.
- Codemagic automates the process of app building, testing, and deployment.
- Codemagic uses a cloud-based CI/CD product specifically designed for mobile developers.
- Unused authentication key expires in 10 minutes.
- Supports multi-factor authentication (MFA) on OAuth provider side.
- Unused authentication keys expire in 10 minutes.
- MFA can be enabled on the OAuth provider side.
- Codemagic uses the Codemagic CI/CD GitHub App to integrate with GitHub.
- The GitHub App integration can be connected separately for your personal account
  and each team.
- The GitHub App integration can be connected separately for personal accounts and
  teams.
- For the best integration with the Git provider, it’s recommended to connect your
  GitLab repositories using the repository integration built in to Codemagic.
- For the best integration with the Git provider, it’s recommended to connect your
  Bitbucket repositories using the repository integration built in to Codemagic.
- If your repository is hosted on GitHub, GitLab or Bitbucket, add the public key
  to your repository’s access/deployment keys.
- Don’t close the module before you have finished adding the app, otherwise, you’ll
  need to start over and generate a new SSH key.
- Teams is a paid feature on Codemagic.
- Teams is a paid feature on Codemagic
- Free build minutes are reserved for personal and hobby projects.
- The annual subscription grants you 2 months of free usage for the whole plan.
- Codemagic uses your source control system, such as GitHub, Bitbucket, or Gitlab,
  to get read-only access to the CI/CD features.
- Codemagic allows you to integrate with Sentry and Firebase Crashlytics for analytics
  and uploading debug symbols
- Codemagic allows publishing without manually answering the question about encryption
- You can automatically fetch the provisioning profiles from the Apple Developer Portal
  based on your team’s App Store Connect API key.
- Codemagic offers community support in GitHub Discussions and Discord Community Server.
- Codemagic makes use of codemagic.yaml for configuring your workflow.
- Automatic code signing requires an App Store Connect API key.
- Codemagic allows you to trigger builds on pull_request, pull_request_labeled, push
  and tag events.
- Codemagic requires a service account to deploy to Google Play.
- Codemagic requires setup of App Store Connect API key for publishing.
- You can allow creating resources if existing are not found with `--create` flag
- Codemagic requires you to add all of your signing files (profiles, certificates,
  etc.) as environment variables.
- Environment variables have to be added to the workflow either individually or as
  a group.
- The content of the base64 encoded files needs to be decoded before it can be used.
- Requires adding signing files as environment variables.
- You can allow creating resources if existing are not found with `--create` flag.
- Unlike with the Bitrise `Certificate and profile installer` step, you must reference
  the added files in your scripts section.
- Codemagic requires an App Store Connect API key for deployment.
- The uploaded keystore cannot be downloaded from Codemagic.
- Email publishing sends release notes and generated artifacts on build success, and
  build logs on failure.
- Uses OAuth2 with refresh token — requires setup of connected app in Codemagic
- You can have more than one workflow in the same codemagic.yaml file.
- If the build fails, an email with a link to build logs will be sent.
- To avoid email notifications, set `success` to `false` or `failure` to `false`.
- For App Store Connect publishing, the provided key needs to have App Manager permission.
- You will need to create an app record in App Store Connect before you can automate
  publishing with Codemagic.
- This action is performed during post-processing.
- The codemagic.yaml file must be located in the root directory of the repository.
- The key can only be downloaded once.
- Apple limits the number of Apple Distribution certificates to 3.
- The 'codemagic.yaml' file must be located in the root directory of the repository.
- codemagic.yaml must be located in the root directory of the repository.
- The name of the configuration file must be `codemagic.yaml` and it must be located
  in the root directory of the repository.
- The possible Flutter versions are `stable`, `beta`, and `master`, along with any
  specific versions, e.g., `3.7.6`.
- It is recommended to create a dedicated App Store Connect API key for Codemagic
  in App Store Connect.
- The name of the file must be codemagic.yaml and it must be located in the root directory
  of the repository.
- Signing iOS applications requires Apple Developer Program membership.
- The name of the configuration file must be codemagic.yaml and it must be located
  in the root directory of the repository.
- 'To build an .apk version for debug, replace the build command with: flutter build
  apk --debug'
- 'To build an unsigned .app version for debug, replace the build command with: flutter
  build ios --debug --no-codesign'
- Requires configuration of environment variables for build versioning.
- Support for various platforms including Android, iOS, macOS, Windows, and web.
- If you don’t have a workspace, use -project "MyXcodeProject.xcodeproj" instead of
  the -workspace "MyXcodeWorkspace.xcworkspace" option.
- This workflow is for building apps using Codemagic CI/CD.
- Ensure to configure your email recipients for publishing notifications.
- In order to submit your iOS application to App Store Connect, it must be code signed
  with a distribution certificate.
- All applications have to be digitally signed before they are made available to the
  public.
- The provided key needs to have App Manager permission.
- The iOS application must be code signed with a distribution certificate.
- You need to create an app record in App Store Connect before automating publishing.
- Requires setup of app record in App Store Connect before automating publishing.
- The name of the file must be `codemagic.yaml` and it must be located in the root
  directory of the repository.
- Builds marked as TestFlight Internal Only will display 'internal' next to the build
  number and can exclusively be added to internal tester groups.
- Requires App Manager permission for API key
- App must be code signed with a distribution certificate
- The app must be code signed with a distribution certificate to submit to App Store
  Connect.
- 'Snap is only available on Linux instances. Make sure to have instance_type: linux
  or instance_type: linux_x2 in your codemagic.yaml.'
- Building Unity apps in a cloud CI/CD environment requires a Unity Plus or a Pro
  license.
- The license is returned during the publishing step of the workflow which is always
  run except if the build is cancelled.
- If your app contains app extensions, an additional provisioning profile is required
  for each extension.
- When you make essential changes to a provisioning profile, the provisioning profile
  becomes invalid.
- Builds marked as TestFlight Internal Only will display “internal” next to the build
  number and can exclusively be added to internal tester groups.
- Snap is only available on Linux instances.
- 'Make sure to have instance_type: linux or instance_type: linux_x2 in your codemagic.yaml.'
- When you make essential changes to a provisioning profile, such as modifying the
  app ID, adding/removing capabilities from the profile identifier, or changing the
  certificates assigned to that profile, the provisioning profile becomes invalid.
- Running Unity commands requires a specified Unity version installed on the build
  machine.
- Building Unity apps requires a Unity Plus or Pro license.
- Requires setup of connected app in Codemagic
- Some tasks may require specific permissions to execute
- Uses Codemagic for building Unity applications.
- If a build is manually cancelled before reaching the publishing section, the license
  WILL NOT BE RETURNED automatically.
- Ensure to set up service account in Google Play Console for publishing.
- App Store Connect API key is required for iOS app publishing.
- Ensure to set the build number using NEW_BUILD_NUMBER environment variable
- Use of Oculus Platform Utility is recommended for distribution
- Uses API key for authentication.
- If you are publishing to the App Store or you are using TestFlight to distribute
  your app to test users, set the distribution_type to app_store.
- When using a third party app distribution service such as Firebase App Distribution,
  set the distribution_type to ad_hoc.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- To submit your iOS application to App Store Connect, it must be code signed with
  a distribution certificate.
- You can find a complete project showcasing these steps in our sample projects repository.
- The access token is available in the Codemagic UI under Teams > Personal Account
  > Integrations > Codemagic API > Show.
- Manual configuration may be required after the build is complete.
- API access token is available in the Codemagic UI under Teams > Personal Account
  > Integrations > Codemagic API > Show.
- You must create and upload the first version of each app manually.
- YAML configuration must be committed to the repository.
- API does not allow app creation programmatically, first version must be uploaded
  manually.
- codemagic.yaml must be committed to the root directory of the repository.
- Builds can also be started manually by clicking **Start new build** in Codemagic.
- Configure all your workflows in a single file
- When detected in the repository, codemagic.yaml is automatically used for configuring
  builds
- Instance types `linux_x2` and `windows_x2` are only available for teams and users
  with billing enabled.
- Currently, only the above-mentioned software versions can be customized via the
  environment section in the yaml file.
- Using a non-default version of Ruby for macOS builds will increase the time of your
  `Preparing build machine` step significantly.
- Codemagic doesn’t support caching symlinks.
- Each workflow has its own cache.
- Labels serve as additional information about the workflow.
- Working directory paths are relative to the repository clone directory.
- Environment variables are the recommended way to store configuration settings and
  sensitive data.
- Sensitive information should never be committed to your Git repository.
- Marking a variable **Secret** will encrypt the variable and hide its value.
- It is required to use quotation marks with multi-line variables when you are referencing
  them in custom scripts.
- Uses OAuth2 for authentication.
- Codemagic exports several built-in environment variables during the build that you
  can use in scripts to customize the build process.
- Builds that are triggered from a schedule are marked with 'Schedule' as the trigger
  in the build overview page.
- Useful variables exported during builds
- Environment variables added by user will override Codemagic defaults
- By default, Codemagic builds are set to time out after 60 minutes.
- The minimum build duration is 30 min and the maximum is 120 min.
- The build may be delayed up to 15 minutes during peak hours.
- Webhooks are necessary to trigger builds automatically in response to events in
  the repository.
- Webhook triggers might not be supported for all repository providers.
- When starting workflows using webhooks, Codemagic uses the codemagic.yaml file from
  the source branch.
- After `changeset` setting is configured in `codemagic.yaml`, builds will be skipped
  according to the `changeset` condition.
- Adding one or more `includes` keys will disable the default 'include all' behavior.
- Skipping a build means that the build will be triggered and only after fetching
  app sources and meeting the `changeset` condition, the build will be stopped.
- Condition expression is evaluated only after cloning the repository so the builds
  will be started regardless of the `condition`.
- After changeset setting is configured in codemagic.yaml, the subsequent build will
  be triggered regardless of the condition and only after that successful build, builds
  will be skipped according to the changeset condition.
- Adding one or more includes keys will disable the default 'include all' behavior.
  Remember to add the '.' pattern if needed.
- Skipping a build means that the build will be triggered and only after fetching
  app sources and meeting the changeset condition, the build will be stopped.
- Condition expression is evaluated only after cloning the repository so the builds
  will be started regardless of the condition. However, if a condition is not met,
  the build will terminate early and will be marked as skipped.
- Supports various test runners including Flutter.
- Results can be visually displayed in the build overview.
- Supports every test runner, including GoTest, RSpec, PHPUnit, Karma, PyTest, ESLint,
  Cucumber, ExUnit, Mocha, CargoTest, and JUnit.
- Supports various test runners including GoTest, RSpec, PHPUnit, etc.
- Machine readable output for integration tests can be generated using the --machine
  flag.
- Due to limitations by Apple silicon, the Apple Virtualization API doesn’t support
  nested virtualization required for Android emulators.
- macOS UI Testing is only supported on Xcode 13 images and above as it requires System
  Integrity Protection (SIP) to be disabled in order to access the accessibility permissions.
- macOS UI Testing is only supported on Xcode 13 images and above as it requires System
  Integrity Protection (SIP) to be disabled.
- Codemagic machines come with gcloud CLI tools preinstalled.
- Obtain an emulator.wtf API token and save it as an environment variable in Codemagic
- You need to obtain an emulator.wtf API token and save it as an environment variable
  in Codemagic.
- This feature is available for teams only.
- Teams on the Pay as you go plan can enable the feature via the App Preview page
  on the left sidebar and will get 100 free trial minutes.
- Once used up, further app preview minutes will be billed at the rate of $0.095/min
  and included in your monthly invoice.
- Teams on annual plans can try out App Preview by contacting us.
- Codemagic machines already have the software ready to use, so there is no need to
  install it manually.
- Detox provides a gray box testing solution for React Native apps.
- The email contains a QR code and the Register device button to download a configuration
  profile that must be installed on the device.
- It is important to choose the actual bundle identifier when building and not use
  any XC Wildcards.
- Team admin permissions are required to upload and edit files under the Code signing
  identities section.
- Builds marked as TestFlight Internal Only will display “internal” next to the build
  number and can exclusively be added to internal tester groups. They cannot be submitted
  for external testing or distributed to customers.
- Signing macOS applications requires Apple Developer Program membership.
- In Automatic code signing, Codemagic takes care of Certificate and Provisioning
  profile management.
- Codemagic takes care of Certificate and Provisioning profile management for you
  in Automatic code signing.
- Use App Store Connect integration
- Define environment variables by yourself
- Integration will take care of the App Store Connect API authentication part, but
  additionally the certificate private key has to be exported too.
- All Android applications have to be digitally signed before they are made available
  to the public to confirm their author and guarantee that the code has not been altered
  or corrupted since it was signed.
- Keep the keystore file private and do not check it into a public repository.
- Environment variables added with the Secret option checked are transferred to the
  build machine encrypted and are available only while the build is running.
- Automatic code signing requires access to your Apple Developer portal account.
- Codemagic takes care of Certificate and Provisioning profile management for you.
- Store all the of these variables in the same group so they can be imported to codemagic.yaml
  workflow at once.
- Provisioning profiles and code signing certificates are obtained from Apple Developer
  portal.
- For automatic code signing, Codemagic needs access to your Apple Developer portal
  account.
- Store all environment variables in the same group for Codemagic YAML workflow.
- Store all of these variables in the same group so they can be imported to codemagic.yaml
  workflow at once.
- Keep the keystore and the key.properties files private; do not check them into public
  source control.
- Signing iOS applications requires Apple Developer Program membership
- Codemagic takes care of Certificate and Provisioning profile management for you
  in automatic code signing
- Uses App Store Connect API key for authentication and signing
- Environment variables added with the Secret option checked are transferred to the
  build machine encrypted and are available only while the build is running. The build
  machine is destroyed at the end.
- To test your app on simulators, Apple requires you to create an unsigned iOS app
  (with the .app extension).
- Create an app record in App Store Connect before automating publishing with Codemagic.
- Your artifact will be generated at the default Xcode path.
- First app version must be uploaded manually before automation
- Create a dedicated App Store Connect API key for Codemagic in App Store Connect.
- Post-processing actions will not be triggered unless using the new way of publishing.
- 'Post-processing has a two-step timeout: 15 minutes for build availability and 120
  minutes for overall processing.'
- Requires App Manager permission for the provided key.
- App must be code signed with a distribution certificate.
- It is recommended to upload the very first version of the app manually.
- Publishing to App Store Connect through app_specific_password has been deprecated.
- Post-processing does not consume any build minutes.
- Please note that you will need to create an app record in App Store Connect before
  you can automate publishing with Codemagic.
- The very first version of your app must be uploaded to Google Play manually.
- Ensure that each new build uploaded to Google Play has a higher version code than
  the previously uploaded one.
- The build dashboards feature is available for teams only. It is not possible to
  create build dashboards for apps on personal accounts.
- Share dashboard will be available only when a team with build dashboards enabled
  is selected in the Builds page.
- Anyone with the public link can access the build dashboard and download build artifacts.
- Publishing to App Store Connect through app_specific_password has been deprecated
  and post-processing actions will not be triggered unless using the new way of publishing
  as explained above.
- Tester groups are only available for teams and apps using the codemagic.yaml configuration.
- The artifact download links in build dashboards are valid for 24 hours.
- Build dashboards feature is available for teams only.
- Firebase has marked authentication via token as deprecated.
- Tester groups receive an email only when the workflow builds successfully.
- Make sure you have added the FIREBASE_SERVICE_ACCOUNT and GOOGLE_APPLICATION_CREDENTIALS
  variables as described above.
- The path is already saved in GOOGLE_APPLICATION_CREDENTIALS variable
- Publishing to Codemagic static pages is not available when using YAML configuration
  in Codemagic.
- If you are building a Flutter project and would like to publish to Codemagic static
  pages, consider switching your configuration to Flutter workflow editor.
- Set Project to N/A to define the API client as a team-level one. Otherwise, the
  result code 403 will be returned during API calls.
- Firebase has marked authentication via token as deprecated and might disable it
  in future versions of firebase tool.
- This guide only applies to workflows configured with the codemagic.yaml.
- Make sure to mark the GOOGLE_APPLICATION_CREDENTIALS variable as Secret.
- A Unity Plus or Pro license is required to activate Unity on the Codemagic build
  server.
- A Steam Partner account is required to publish to Steam.
- Keep the sentry files private; do not check them into public source control.
- Set Project to N/A to define the API client as a team-level one.
- Publishing to Firebase Hosting with Codemagic is a straightforward process as the
  Firebase CLI is already pre-installed on our virtual machines.
- Publishing to GitHub releases is available only for apps hosted in GitHub repositories.
- The publishing happens only for successful builds triggered on tag creation and
  is unavailable for manual builds.
- A Unity Plus or Pro license is required.
- In order to get publishing permissions, you first need to log in to pub.dev locally.
- Make sure the Secret option is selected when adding the environment variable.
- Each time you build the workflow, the app artifact will be published to your Amazon
  S3 bucket.
- Configure your codemagic.yaml by adding the publishing script for Google Cloud Storage
- Ensure the service account has Storage Object Creator role for the bucket
- Credentials will be created in the pub cache directory (`~/.pub-cache/credentials.json`
  on macOS and Linux, `%APPDATA%\Pub\Cache\credentials.json` on Windows).
- Post-publish scripts will be executed even if a build fails. They will stop from
  being executed only when a build is canceled or times out.
- Make sure the Secret option is selected for AWS credentials.
- Requires a Cloudflare API token and Account ID to be configured as environment variables.
- Make sure the Secret option is selected for the variable.
- If the build finishes successfully, release notes and the generated artifacts will
  be published to the provided email address(es).
- Requires Cloudflare API token and Account ID.
- Artifact download links are valid for 24 hours by default.
- Requires a Telegram Bot Token and Chat ID to send notifications.
- Requires a Telegram Bot Token and Chat ID for sending messages.
- In order to publish to private channels, invite the Codemagic app to the channels.
- Artifact download links in Slack notifications are valid for 24 hours by default.
- To publish to private channels, invite the Codemagic app to the channels.
- Artifact download links in Slack notifications are valid for 24 hours.
- If builds are set to public (or the user has logged in and has access to the build),
  then clicking on the link will open up the build page on Codemagic.
- Apple does not support `<` and `>` symbols in `release_notes` file. Uploading a
  file with such symbols will cause the App Store Connect API to return `409` error
  and description that text contains invalid characters.
- Reporting to GitHub Checks is available for repositories connected via Codemagic
  GitHub App integration.
- Checks can be set up in GitHub when configuring branch protection rules for a repository.
- Apple does not support '<' and '>' symbols in 'release_notes' file.
- Setting CM_CLONE_DEPTH to a greater number might increase the time it takes to clone
  the repository during the build.
- Failed checks will block merging the pull request.
- All users with admin or developer roles may request an API token after logging in
  to your Appetize account page.
- To get a public key for your app, you first have to upload your app manually at
  least once to Appetize.
- Users must generate an Appetize API token and a public key for the app.
- The app must be uploaded manually at least once to Appetize to obtain the public
  key.
- Signing up with Appknox is required to generate your personal access token.
- Make sure the script for uploading binary is executed in the post-build script.
- Make sure to execute the Appknox binary installation script in the post-build script
  after your app binary is built.
- Make sure that you add the cURL request after building the .ipa and .apk.
- Signing up with BrowserStack is required to get the username and access token.
- Make sure to add the cURL request after building the .ipa and .apk.
- Make sure the Secret option is selected.
- Make sure to select the Secret option for environment variables.
- Requires Capgo token for authentication.
- Codecov accepts .xml, .json, and .txt coverage report formats.
- After successfully uploading code coverage to Codecov, line-by-line coverage will
  be displayed on your GitHub pull requests via GitHub Checks.
- $CODEPUSH_TOKEN for authentication will be provided by the Codemagic team and it
  needs to be added as an environment variable and then imported in codemagic.yaml.
- Requires a Team Plan API key to authorize usage.
- Requires a Team Plan API key saved as an environment variable in Codemagic.
- The variable name for the API key is DCM_KEY.
- 'One environment variable needs to be added to your workflow for the Discord integration:
  WEBHOOK_URL which is the webhook URL you created in the steps above.'
- 'One environment variable needs to be added to your workflow for the Discord integration:
  WEBHOOK_URL which is the webhook URL you created.'
- Requires setup of Incoming Webhook in Teams.
- Webhook URL must be stored as a secret in Codemagic.
- To receive messages in a Teams channel, configure an Incoming Webhook
- Use the Webhook URL in environment variables for notifications
- Ensure to save the API key as it cannot be viewed again on the site.
- Make sure to save the API key, as you cannot view it again on the site.
- Fastlane is preinstalled on the Codemagic build servers.
- Uses the fastlane plugins for additional functionality.
- The JIRA_AUTH environment variable is a base64 encoded string consisting of the
  email address and Jira API token.
- The JIRA_BASE_URL environment variable is the subdomain for your Jira account.
- Authorization header requires base64 encoded string of email and API token.
- Requires setup of environment variables for JIRA_BASE_URL and JIRA_AUTH
- Katalon requires that you create a testops-config.json file in your project root.
- To avoid exposing your API key in the repository, add a script to create the required
  file during build time.
- Make sure the Secret option is selected for environment variables.
- The process of uploading your artifacts to Kobiton requires setting the APP_URL
  and APP_PATH.
- The generated session will be visible to you only.
- 'Kobiton supports wildcard character *, with 3 formats: *text, text* and *text*.'
- The LAMBDATEST_AUTH environment variable is a base64 encoded string which consists
  of the username and LambdaTest API token.
- You can encode these credentials using macOS Terminal or an online tool.
- The LAMBDATEST_AUTH environment variable is a base64 encoded string of username:api_token.
- You need to signup for Maestro Cloud and get the API Key from your console.
- Make sure the Secret option is selected for the API Key environment variable.
- Integrates with Firebase Test Lab for cloud testing
- Patrol documentation provides setup guidance
- Patrol can be seamlessly integrated with Codemagic CI/CD to enable comprehensive
  automated testing workflows.
- A sample project that shows how to configure Patrol integration is available in
  Codemagic’s patrol-demo-project.
- Refer to the sample project’s README and configuration files for detailed setup
  instructions and integration examples.
- Signing up with pCloudy is required in order to be able to get the username and
  access token.
- Get the Perfecto access token from the Perfecto UI.
- The uploaded files can be directly used to start your automation testing.
- Requires signing up with Perfecto to get credentials
- Environment variable for Perfecto token must be set
- dSYM is used to symbolicate your crash reports.
- The above-mentioned dsymPath is React Native and Native iOS specific and it could
  change depending on what platform the app is built.
- dSYM is used to symbolicate crash reports.
- The dsymPath is platform-specific and may vary.
- :scheduledRunGuid will be replaced by the SOFY_SCHEDULE_GUID variable which can
  be found in your Sofy account, appHash will be fetched from the app upload API response
  mentioned above.
- :testRunGroupId will be replaced by test run group ID fetched from the response
  of the Fetching test run group IDs step above.
- :scheduledRunGuid will be replaced by the SOFY_SCHEDULE_GUID variable which can
  be found in your Sofy account
- appHash will be fetched from the app upload API response
- Requires a SonarCloud account
- Add environment variables SONAR_TOKEN, SONAR_PROJECT_KEY, and SONAR_ORG_KEY to your
  workflow
- Requires setup of a SonarCloud account and project.
- To build a MSIX package, select the Create a Windows MSIX package checkbox in the
  Build section of your Windows workflow.
- In order to configure any other package attributes, install the package to your
  project and add a msix_config to your pubspec.yaml.
- Workflows allow full control over your CI/CD pipeline.
- Have full control over your CI/CD pipeline with workflows.
- Environment variables are useful for making available for Codemagic the credentials,
  configuration files or API keys that are required for successful building or integration
  with external services.
- Custom scripts can be run in post-clone, pre-test, post-test, pre-build, post-build,
  pre-publish and post-publish phases.
- Scripts are executed from the absolute path to the cloned repository located at
  /Users/builder/clone.
- Uses OAuth2 with refresh token for authentication.
- Converting workflow settings to yaml cannot be done directly at the moment.
- Environment variables added by user will override Codemagic defaults.
- 'Payload URL format: https://api.codemagic.io/hooks/<appId>'
- All received webhooks are visible in the Codemagic UI under the Webhooks tab.
- By default, Codemagic builds are set to time out after 60 minutes. You can decrease
  or increase the maximum build duration per workflow.
- Webhooks are necessary in order to be able to trigger builds automatically in response
  to events in the repository.
- API requires OAuth2 with refresh token.
- Codemagic supports running unit, integration and widget tests as well as static
  code analysis.
- When testing is enabled, tests are run automatically every time your project is
  built.
- Codemagic automatically adds webhooks to repositories added via GitHub app or from
  GitHub, GitLab or Bitbucket via OAuth integration.
- Ensure to handle API rate limits appropriately.
- By default, Flutter Analyze is disabled and has to be enabled in App settings >
  Tests > Static code analysis by checking the Enable Flutter analyzer option.
- If you check Stop build if tests or analysis fail, the build will stop after finishing
  all the enabled tests or analysis runs when any of them fail.
- A Flutter project without `ios` and `android` folders is required.
- A `test` folder containing at least one test is required.
- If there are failing tests, you will receive the test report in your email.
- During the first build of your app, Codemagic will scan the repository’s content
  and automatically detect the tests according to the project structure.
- Flutter Analyze is disabled by default and needs to be enabled in App settings >
  Tests > Static code analysis.
- A Flutter project without ios and android folders is required.
- A test folder containing at least one test is required.
- Requires Apple Developer Program membership for code signing.
- The preview session remains active for a maximum of 20 minutes and is limited to
  one concurrent session by default.
- This guide only applies to workflows configured with the Flutter workflow editor.
- Codemagic only supports code signing the app for publishing to the Mac App Store.
- Codemagic will now create a signed .pkg file with every build.
- You must also set up publishing to App Store Connect to submit the app to App Store
  Connect and distribute it via Mac App Store.
- Currently, Codemagic only supports code signing the app for publishing to the Mac
  App Store.
- Every app must be signed using the same key throughout its lifespan.
- Publishing to App Store Connect requires that the app is code signed with a distribution
  certificate.
- Each uploaded binary must have a different version.
- Manual device UDID registration in Apple Developer Program account is required for
  testing iOS apps.
- The very first version of the app must be added to Google Play manually.
- The very first version of the app must be submitted in the Partner Center manually.
- Applications are not allowed to have a version with a revision number (last digit
  of the version) other than zero.
- Shorebird needs to be initialized for your Flutter project
- The Shorebird token is a secret and should not be shared publicly or checked in
  to source control
- Firebase has marked authentication via token as deprecated and might disable it
  in future versions of `firebase tool`.
- Upload your Snapcraft login credentials file.
- Select a channel for publishing the snap package.
- Select the Enable Snapcraft publishing checkbox to enable publishing to the Snapcraft
  Snap Store.
- This feature is intended for testing purposes only. Production apps should be deployed
  to production-grade web hosting services such as Firebase Hosting or Cloudflare
  pages.
- Minimal required permission policy for AWS IAM allows s3:PutObject for the specified
  bucket.
- The minimal required permission policy attached to the AWS IAM allows s3:PutObject
  action.
- Publishing GitHub releases is available for GitHub repositories only.
- Publishing to GitHub happens only for successful builds triggered on tag creation
  and is unavailable for manual builds.
- The UI section for setting up publishing GitHub releases is deprecated in Flutter
  workflow editor.
- Email publishing is enabled by default. Multiple email addresses can be added.
- Artifact download links in email are valid for 24 hours.
- Slack notifications require connecting the Slack workspace.
- Default email is used for notifications based on the login service.
- Release notes can be published to email, Slack, App Store Connect, Google Play,
  and Firebase App Distribution.
- Release notes can be published to email, Slack, App Store Connect, Google Play,
  Firebase App Distribution.
- It is advisable to set your build version in the pubspec.yaml version property and
  commit this to version control.
- Consider having your CI/CD pipeline increment and set build number automatically.
- Each uploaded artifact must have a new version satisfying each app store’s requirements.
- Best to increment build version number automatically in CI/CD pipeline.
- Use Codemagic CLI tools to retrieve build numbers from App Store, Google Play, and
  Firebase.
- API access requires specific environment variable configuration.
- In order to allow Codemagic to connect to your App Store Connect account, you need
  to provide API access to App Store Connect API.
- You will need to set up a service account in Google Play Console and create a JSON
  key with credentials.
- It is advisable to save the service account credentials file to an environment variable
  so that it can be accessed during a build without committing it to version control.
- Build inputs are customizable parameters you can define within your workflow to
  make it more adaptable to different scenarios.
- Build inputs are defined in codemagic.yaml as a mapping workflows.<workflow_id>.inputs
  where keys are input IDs and values are inputs.
- Caching can improve the efficiency of your build and deployment processes on Codemagic
  by reusing components that are generated or fetched during the build.
- Cache is stored for a maximum of 14 days.
- 'Requires: Python ≥ 3.8'
- To better distinguish builds based on their input values, you can display the chosen
  value in the Build overview or on the builds page by using labels.
- Maximum cache size is limited to 10GB per workflow for teams, and 3GB per workflow
  for personal accounts.
- Caching $HOME/Library/Developer/Xcode/DerivedData won’t help to speed up iOS builds
  with Xcode 10.2 or later.
- Uses Fastlane for deployment and screenshot upload.
- Specific sizes required for App Store Connect.
- Screenshots are generated for Flutter apps.
- The Google Play Store is more permissive with screenshot sizes.
- Fastlane is pre-installed in Codemagic and is a set of open-source tools and scripts
  that automates building, testing, and deploying mobile apps for both iOS and Android.
- At that point, you might need to change the owners of the generated files, since
  we used `sudo`.
- Add app_store_connect.json to your .gitignore file.
- Add google-play-store.json to your .gitignore file.
- Some issues may arise when using the RSA SHA-1 hash algorithm for generating the
  key pair as it is being quickly deprecated across operating systems and SSH clients
  due to various vulnerabilities.
- Fastlane is pre-installed in Codemagic and automates building, testing, and deploying
  mobile apps for both iOS and Android.
- For testing purposes, save the API Key JSON file in the android directory and add
  it to .gitignore.
- SSH key cannot be password-protected.
- All environment variables whose name has the _SSH_KEY suffix will be automatically
  added to the SSH agent.
- Pushing Git tags from Codemagic to your repository requires write access to the
  repository.
- Make sure to use the https repository URL for pushing. Using the ssh format is not
  supported with app passwords or personal access tokens.
- API Key is stored in app_store_connect.json
- Ensure to add app_store_connect.json to your .gitignore
- Add `git lfs install --skip-smudge` in a post-clone script when working with the
  Flutter workflow editor and at the very top of the scripts section in the yaml file.
- Accessing private dependencies and Git submodules
- Plastic SCM supports the https:// and git:// protocols for pushing and pulling changesets.
- dSYM files store the debug symbols for your app.
- The path for dSYM files may vary depending on the platform used.
- Accessing GitHub packages for private dependencies requires creating a personal
  access token.
- Save the contents of Firebase config files as environment variables, e.g. ANDROID_FIREBASE_SECRET
  and IOS_FIREBASE_SECRET in Codemagic UI.
- Plastic SCM can push and pull changes directly to any remote Git server.
- Supports https:// and git:// protocols for pushing and pulling changesets.
- It’s not currently possible to rerun failed checks (builds) from GitHub UI.
- Make sure that any secrets you store are in the same region as your AWS config file.
- Requires setup of OAuth application in Codemagic
- Ensure RSA keys in settings.env preserve line breaks.
- In order to generate debug symbols, Firebase Crashlytics must be installed using
  the script in your codemagic.yaml.
- You can use a script to upload custom artifacts, such as screenshots, to $CM_EXPORT_DIR
  and include them in the build artifacts ZIP file generated by Codemagic.
- Instead of committing the Firebase configuration files to your repository, you can
  upload them to Codemagic as environment variables and reference them in a custom
  script.
- To change the file name for the generated .ipa artifact, edit the CFBundleDisplayName
  key in the Info.plist file.
- To change the artifact file name for Android apps, edit the archiveBaseName property
  in the app/build.gradle file.
- You can create a .env file during the build process by adding a script in the pre-build
  phase of the Workflow editor or within your yaml file.
- 'NOTE: using >> after the first line appends lines to the file'
- Make sure any secrets you store are in the same region as your AWS config file.
- These versions are the Unity Editor (macOS x86_64), and have only the macOS, Android,
  and iOS modules.
- Mac machines with Apple silicon support Unity built for x86_64 architecture.
- Make sure that if you include any RSA keys that you add them to the file and preserve
  the line breaks.
- It is important that a valid service account is configured in the UI before overriding
  with another.
- The flutter profile mode is available only on actual iOS/Android Devices. It might
  not run properly on the simulator/emulator.
- An Azure Active Directory (Azure AD) tenant is required when setting up publishing
  to Microsoft Store.
- The Tenant ID, Client ID and client secret parameters are used when connecting the
  Partner Center integration.
- Refer to the API Overview for details on how to authenticate and use the API.
- Customize Slack notifications for publishing into your Codemagic build pipeline
  by building a Slack app from scratch via webhooks.
- For Windows, Powershell requires a different command for this case.
- Avoid including sensitive values such as API keys in your application whenever possible.
- Neither Apple nor Google provide APIs that allow you to add a new application programmatically
  in their stores.
- Uses Unity version 2021.3.3f1
- Includes UNITY_HOME, UNITY_SERIAL, UNITY_EMAIL and UNITY_PASSWORD
- APIs for managing applications are currently available for developers to preview.
  During the preview period, the API may change without advance notice.
- Response for successful cache deletion request is `202 Accepted` and contains identifiers
  of the caches that are to be deleted. Actual deletion is completed asynchronously.
- No extra charge for setting up white label workflows with Codemagic.
- Using different workflows on different branches allows for actions such as producing
  a build for devs only to try on their own device.
- Each client version build is triggered by the Codemagic REST API.
- If you're a paying customer, use the in-app chat widget to get support.
- Remote access has to be enabled manually for each new build from Codemagic UI.
- New credentials will be generated every time you run the build, so previous credentials
  cannot be reused.
- We are transitioning to our new API. For up-to-date information, please refer to
  the new Codemagic REST API documentation
- To avoid disruptions to your build pipelines, start migrating to a new hosting solution
  like mavenCentral(), rather than using JCenter or Bintray.
- Builds succeed locally but fail on Codemagic due to plugin or gradle version differences.
- To avoid disruptions, migrate to mavenCentral() instead of using JCenter.
- Using REST API will not fetch information about workflows when configuring with
  codemagic.yaml.
- You can’t access the variable directly by using $VAR_NAME.
- When PowerShell sees a command starting with a string, it just evaluates the string.
- Scripts fail when using base64 encoded variables or use incorrect values.
- SSH and VNC access is not available on Windows build machines.
- The unique key and user credentials are valid for the duration of the build only
  and are revoked after the build is finished.
- Builds not starting at all even though the team has access to the mac_mini_m2 instance.
- This error occurs on M2 machines when the xcode property is set to a version that
  is not supported. Please configure your workflow to use Xcode version 15 or above.
- Builds are intermittently failing without a clear reason.
- This issue can be caused by an earlier version of Xcode. Please use version 13.4.1
  or newer, if possible.
- 'When building iOS apps with an adhoc profile you might get an error: Provisioning
  profile ''XXXX'' doesn''t include the currently selected device ''builder''s Virtual
  Machine''. Add the following to the end of your xcode-project build-ipa command:
  --archive-flags="-destination ''generic/platform=iOS''"'
- The most common reason for this error message is using your Apple ID password instead
  of app-specific password in App Store Connect publishing settings.
- Publishing iOS apps with app-specific-password is deprecated.
- The uploaded certificate is in a wrong format or corrupt. Codemagic looks for a
  certificate in Personal Information Exchange (.p12) format.
- The uploaded certificate and provisioning profile do not match. Make sure the certificate
  and the provisioning profile types match.
- Missing entitlements in the Apple Developer portal can cause errors about an existing
  provisioning profile's missing entitlements.
- When building a Flutter project, a code signing error could be thrown due to missing
  code signing settings on Xcode project step.
- Confirm that you have set the correct bundle identifiers for all targets in Xcode.
- Verify that the bundle identifier set in Xcode matches the bundle identifier set
  in the Flutter workflow editor under code signing.
- Outdated Provisioning profile that does not include Associated Domains can cause
  errors.
- You’ll have to completely upgrade all dependencies that require JCenter to avoid
  failed builds.
- 'Set JAVA_TOOL_OPTIONS: “-Xmx5g” as an environment variable to allow the JVM to
  use up to 5 GB of memory, which can help prevent memory allocation errors.'
- Builds succeed locally but fail on Codemagic may be due to plugin or gradle version
  differences.
- Java Heap space error may require setting JAVA_TOOL_OPTIONS to use more memory.
- In order to update your existing apps and submit new apps to the App Store, the
  Account Holder must review and accept the updated agreement by signing in to their
  account on the Apple Developer website.
- Rest assured, Codemagic simplifies the certificate management process for you.
- SSH and VNC access is not available on Windows build machines. You can access them
  using an RDP client instead.
- Publishing iOS apps with app-specific-password is deprecated, refer to the documentation
  that explains how to publish iOS apps to App Store Connect.
- Uses OAuth2
- In XCode 13 CODE_SIGNING_ALLOWED was set to NO by default for resource bundles.
  While in Xcode 14 they changed this to default to YES, which might be causing the
  problems.
- 'Builds are failing with the message: A required agreement is missing or has expired.
  - This request requires an in-effect agreement that has not been signed or has expired.'
- Distribution certificates issued by Apple have a validity period of one year from
  the date of issuance. After one year, they expire, which means they can no longer
  be used to sign and distribute apps.
- Codemagic simplifies the certificate management process for you.
- Explicitly specify your app’s .xcodeproj file when running the xcode-project use-profiles
  command to ensure that code signing settings are applied only to the main project.
- When building iOS apps with an adhoc profile you might get an error related to provisioning
  profile.
- 'Add the following to the end of your xcode-project build-ipa command: --archive-flags="-destination
  ''generic/platform=iOS''".'
- The most common reason for authentication session errors is using your Apple ID
  password instead of app-specific password in App Store Connect publishing settings.
- 'Common issues that may cause iOS code signing errors include: uploaded certificate
  is in a wrong format or corrupt, uploaded certificate and provisioning profile do
  not match, missing entitlements in the Apple Developer portal, iOS scheme not specified
  for the archive action of an Xcode build, bundle ID mismatch, outdated provisioning
  profile, and iOS deployment target issue.'
- When uploading a provisioning profile, ensure the certificate uploaded is included
  in that provisioning profile.
- Using app-specific password in App Store Connect publishing settings is deprecated.
- The uploaded certificate must be in Personal Information Exchange (.p12) format.
- Make sure the certificate and provisioning profile types match.
- Ensure proper bundle identifiers are set for all targets in Xcode.
- A required agreement is missing or has expired. - This request requires an in-effect
  agreement that has not been signed or has expired.
- Certificate will no longer be valid in 30 days. Your Distribution Certificate will
  no longer be valid in 30 days. To generate a new certificate, sign in and visit
  Certificates, Identifiers & Profiles.
- Did not find xcodeproj from /Users/builder/clone/ios. Codemagic is not able to locate
  the Xcode project file (xcodeproj) in the expected directory.
- This error may have caused due to Account permission issues. Try setting admin access
  for Account permissions on google play console.
- After granting access, Google may take 24-48 hours to propagate all access rights
  for all APIs or new users.
- This error usually occurs when there are parallel builds running, as in 2 builds
  triggered at the same time.
- You need to upload your keystore to Play App Signing.
- You should use ./gradlew bundleRelease to generate .aab file. And don’t forget to
  mention the artifact path app/build/outputs/bundle/**/*.aab in the artifacts section
  in your codemagic.yaml.
- Publishing iOS apps with app-specific-password is deprecated
- In XCode 13 CODE_SIGNING_ALLOWED was set to NO by default for resource bundles.
  While in Xcode 14 they changed this to default to YES.
- Google requires you to declare your storage permissions
- You must sign your APK or Android App Bundle in release mode instead of debug mode
- APK submission is no longer allowed; use Android App Bundles (.aab) instead
- The very first version of the app must be added to Google Play manually
- Common Google Play errors
- Check the status and uptime of the Codemagic web app and build machines on the Codemagic
  status page.
- Repositories can be added to Codemagic from multiple sources such as Github, Gitlab,
  Bitbucket, and others.
- In order to solve it, try an SSH connection instead.
- Confirm that the relevant IP addresses are whitelisted.
- Add the LSApplicationCategoryType key in Info.plist file accordingly.
- Include the flutter gen-l10n command in your pre-build script.
- Billing is managed separately for personal accounts and teams.
- 'Solution is to use set cancel_previous_builds: true in your triggers, but it doesn’t
  work when builds are triggered using API.'
- This usually indicates that you have already published a .aab with version code
  ‘x’, and now you are trying to publish the .aab with the same version code.
- Check version and version code. This error is possible when your version code is
  the same as the .aab already uploaded on google play.
- If an app has already been sent to a specific track, you cannot re-upload it.
- You can change its track or increment the version code.
- Google requires you to declare your storage permissions.
- The error message is because your new APK has a lower version code than the previous
  APK.
- The error ‘Package not found’ means that an application with the package name from
  the artifact generated during the builds doesn’t exist in your Google Play account.
- Check code signing. Use the same keystore while uploading your artifacts.
- As per the error, You need to upload your keystore to Play App Signing.
- You need to sign your APK or Android App Bundle in release mode instead of debug
  mode.
- It is no longer possible to submit new apps to Google Play using the APK format.
- You should use ./gradlew bundleRelease to generate .aab file.
- 'If an app/track is in a “rejected” state, then you need to submit the app with
  changesNotSentForReview: true.'
- Common errors may occur if the application does not meet the release criteria.
- Google may take 24-48 hours to propagate all access rights for all APIs or new users.
- Newer APKs must always have a higher version code than the previous version.
- Codemagic is SOC 2 Type II audited and the report is available on request.
- Codemagic offers multiple build machines with different specifications and pre-installed
  tools.
- Android emulators are unavailable on Apple silicon machines due to the Apple Virtualization
  Framework not supporting nested virtualization.
- Build time usage is counted separately for your personal account and each team.
- Billing is managed separately for your personal account and each team.
- Individuals receive 500 free minutes per month on macOS M2 machines on a personal
  account.
- These 500 free minutes are reset on the 1st of each month.
- You can choose between them by specifying the required Xcode version.
- Android emulators are unavailable on Apple silicon machines due to the Apple Virtualization
  Framework not supporting nested virtualization. Please use a Linux instance.
- A list of tools available out-of-the-box on Codemagic Linux Ubuntu 20.04
- 'Windows virtual machine: 8 vCPUs, 32 GB memory'
- System version Microsoft Windows Server 2022 Datacenter (OS Build 20348.643)
- 'Disk 150GB (Free Space: 66GB)'
- Android Studio Iguana 2023.2.1 installed at C:\Program Files\Android\Android Studio\
- Codemagic macOS build machines come with a range of Xcode versions and runtimes
  preinstalled.
- New versions are usually rolled out over the weekend.
- SDK Manager at /usr/local/share/android-sdk/cmdline-tools/latest/bin/sdkmanager
- Codemagic uses two aliases for Xcode versions – latest and edge.
- AVD Manager at /usr/local/share/android-sdk/cmdline-tools/latest/bin/avdmanager
- Available emulators include emulator and emulator-34
- The workflow and branch information is passed with the curl request when starting
  builds from an API request.
errors:
- If you chose to grant access to select repositories only as opposed to all repositories
  when setting up the GitHub App, make sure you have also granted access to the repository
  in question.
- Make sure you have connected the GitHub App integration to the right team.
- If you build apps from different GitHub accounts or organizations, make sure that
  you have installed the GitHub App on the account that has the repository available.
- Private GitHub repositories can be shared with Codemagic only when the GitHub App
  is installed on the account that owns the repository.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- There is a problem with the request entity - You already have a current Distribution
  certificate or a pending certificate request.
- '404 Not Found: The requested resource could not be found.'
- '401 Unauthorized: Invalid authentication credentials.'
- '400 Bad Request: The request was malformed.'
- '401 Unauthorized: Check API key permissions.'
- '403 Forbidden: Ensure correct API key usage.'
- '401 Unauthorized: Recheck API token or permissions'
- '401 Unauthorized: Recheck API key permissions or expiration'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '429 Too Many Requests: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Check your Snapcraft credentials.'
- 'REQUEST_ENTITY_ERROR: There is a problem with the request entity - You already
  have a current Distribution certificate or a pending certificate request.'
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Check the request format and parameters'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'INVALID_CREDENTIALS: Check your API key and permissions.'
- 'RESOURCE_NOT_FOUND: Ensure the specified resource exists.'
- 'UNAUTHORIZED: Verify your access rights.'
- 'BUILD_FAILED: Check the logs for more information'
- 'INVALID_CREDENTIALS: Verify your Oculus app ID and secret'
- '401 Unauthorized: Check API key and permissions.'
- '401 Unauthorized: Check API key permissions and validity.'
- '401 Unauthorized: Recheck API access token.'
- '401 Unauthorized: Recheck API key permissions'
- '401 Unauthorized: Check API token or permissions.'
- '401 Unauthorized: Check your API access token'
- '404 Not Found: Verify the application ID and workflow ID'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Check API key or permissions.'
- '401 Unauthorized: Check App Store Connect API key and access rights'
- '401 Unauthorized: Recheck API key and permissions'
- 'Build not found: Check the uploaded artifact for issues.'
- Ensure all required fields are filled out before submission.
- 'Unauthorized: Check your API key and permissions.'
- 'INVALID_CREDENTIALS: Check the service account credentials.'
- 'TRACK_NOT_FOUND: Ensure the specified track exists.'
- Ensure API key and identifiers are correctly referenced in environment variables.
- If the uploaded build cannot be found in App Store Connect in 15 minutes, the step
  times out.
- The overall timeout for post-processing is 120 minutes.
- Not a tag build, will not publish GitHub release
- '409: Invalid characters in release notes'
- '409: error and description that text contains invalid characters'
- The "CFBundleShortVersionString" key in the "ios/Codemagic_RN/Info.plist" file needs
  to specify a valid semver string, containing both a major and minor version (e.g.
  1.3.2, 1.1).
- '401 Unauthorized: Check JIRA_AUTH, ensure it is correctly formatted.'
- '404 Not Found: Verify the JIRA_ISSUE is correct.'
- '400 Bad Request: Review the payload structure or required fields.'
- Failed at the Maestro cloud step indicates that your tests have failed.
- 'Coverage FILE NOT FOUND AT PATH: $xccovarchive_file'
- '401 Unauthorized: Check your access token.'
- '404 Not Found: Verify the endpoint and parameters.'
- '401 Unauthorized: Check your API token.'
- '404 Not Found: Verify the endpoint path.'
- '404 Not Found: Ensure the endpoint URL is correct.'
- '429 Too Many Requests: Rate limit exceeded, slow down requests.'
- '401 Unauthorized: Check Slack integration settings.'
- Unable to send notifications if the Slack app is not invited to private channels.
- 'Invalid build number: Ensure build number is between 1 and 2100000000.'
- Fallback in case no build number was found from Google Play.
- Alternatively, you can `exit 1` to fail the build.
- If your dependencies have any warnings or errors when trying to cache them, the
  caching process will not complete successfully.
- '401 Unauthorized: Check client ID, secret, or token'
- '202 Accepted: Cache deletion was started asynchronously, it will be completed in
  a moment'
- '208 Already Reported: The build has already finished.'
- 'Unauthorized: Check your authentication credentials.'
- Gradle task bundleRelease failed with exit code 1
- Could not find method firebaseAppDistribution() for arguments
- Unable to validate your application. We are unable to create an authentication session.
- Provisioning profile doesn't support the Associated Domains capability.
- The uploaded certificate is in a wrong format or corrupt
- The uploaded certificate and provisioning profile do not match
- Did not find xcodeproj from /Users/builder/clone/ios
- 'error: Provisioning profile "XXXX" doesn''t include the currently selected device
  "builder''s Virtual Machine" (identifier XXXXXXXX-XXXXXXXXXXXXXXXX).'
- 'Builds not starting: Configure your workflow to use Xcode version 15 or above.'
- 'Builds failing intermittently: Use version 13.4.1 or newer.'
- 'Provisioning profile error: Adjust xcode-project build-ipa command with archive
  flags.'
- 'Authentication session error: Use app-specific password instead of Apple ID password.'
- 'Code signing error: Ensure certificate and provisioning profile types match.'
- 'Bundle ID mismatch error: Confirm bundle identifiers are set correctly.'
- 'Outdated provisioning profile error: Verify associated domains entitlement.'
- The iOS deployment target is set lower than required.
- Builds not starting when using unsupported Xcode version.
- 'PERMISSION_DENIED: This error may have caused due to Account permission issues.
  Try setting admin access for Account permissions on google play console.'
- 'Cannot replace a bundle of version code X with an APK: This usually indicates that
  you have already published a .aab with version code ‘x’, and now you are trying
  to publish the .aab with the same version code.'
- 'APK specifies a version code that has already been used: Check version and version
  code.'
- 'Cannot update a published APK: If an app has already been sent to a specific track,
  you cannot re-upload it.'
- 'Your scoped storage permission declaration needs to be updated: Google requires
  you to declare your storage permissions.'
- 'You cannot rollout this release because it does not allow any existing users to
  upgrade to the newly added APKs: Newer APKs must always have a higher version code
  than the previous version.'
- 'Package not found: com.xxxxx.app: The error ‘Package not found’ means that an application
  with the package name from the artifact generated during the builds doesn’t exist
  in your Google Play account.'
- 'APK has not been signed with the upload certificate: Check code signing.'
- 'You uploaded an APK or Android App Bundle that was signed in debug mode: You need
  to sign your APK or Android App Bundle in release mode instead of debug mode.'
- 'APKs are not allowed for this application: It is no longer possible to submit new
  apps to Google Play using the APK format.'
- 'Only releases with status draft may be created on draft app: 400 error is related
  to the app being in draft status.'
- 'changesNotSentForReview Errors: Indicates that the changes in this edit will not
  be reviewed until they are explicitly sent for review from the Google Play Console
  UI.'
- Unable to validate your application. We are unable to create an authentication session
- Missing entitlements in the Apple Developer portal
- iOS scheme not specified for the archive action of an Xcode build
- Bundle ID mismatch
- Outdated Provisioning profile that does not include Associated Domains.
- The iOS deployment target 'IPHONEOS_DEPLOYMENT_TARGET' is set to 8.0, but the range
  of supported deployment target versions is 9.0 to 14.4.99
- 'A required agreement is missing or has expired: This request requires an in-effect
  agreement that has not been signed or has expired.'
- Your Distribution Certificate will no longer be valid in 30 days. To generate a
  new certificate, sign in and visit Certificates, Identifiers & Profiles.
- '403: The caller does not have permission. status: PERMISSION_DENIED'
- 'The current user has insufficient permissions to perform the requested operation.
  status: PERMISSION_DENIED'
- Google Play failed to upload artefacts. This Edit has been deleted.
- Cannot replace a bundle of version code X with an APK.
- APK specifies a version code that has already been used
- Cannot update a published APK
- Your scoped storage permission declaration needs to be updated
- You cannot rollout this release because it does not allow any existing users to
  upgrade to the newly added APKs
- 'Package not found: com.xxxxx.app'
- APK has not been signed with the upload certificate
- For uploading an AppBundle you must be enrolled in Play Signing
- You uploaded an APK or Android App Bundle that was signed in debug mode
- APKs are not allowed for this application
- Only releases with status draft may be created on draft app
- changesNotSentForReview Errors
- 'Error 502 (Server Error): The solution is to try again after some time.'
- Common issues
- 'The requested URL returned error: 403'
- Cannot access the repository. Request is unauthorized (401). Please check your credentials
  to access ...
- Repository is not accessible. Check access credentials and firewall settings...
- The product archive is invalid. The Info.plist must contain a LSApplicationCategoryType
  key.
- APK specifies a version code that has already been used.
- Cannot update a published APK.
- Your scoped storage permission declaration needs to be updated.
- You cannot rollout this release because it does not allow any existing users to
  upgrade to the newly added APKs.
- 'Package not found: com.xxxxx.app.'
- APK has not been signed with the upload certificate.
- For uploading an AppBundle you must be enrolled in Play Signing.
- You uploaded an APK or Android App Bundle that was signed in debug mode.
- APKs are not allowed for this application.
- Only releases with status draft may be created on draft app.
- changesNotSentForReview Errors.
- '5xx: errors are from the Google Play servers. The solution is to try again after
  some time.'
- '403: The requested URL returned error'
- '401: Cannot access the repository. Request is unauthorized.'
- 'Invalid Info.plist: The product archive is invalid.'
- 'Overdue: Invoices that have not been paid on the due date.'
- 'Failed: Invoices that have issues with charging the card.'
- '208 Already Reported: Build has already finished.'
auth_info:
  mentioned_objects:
  - GitHub
  - Bitbucket
  - GitLab
  - SSO
  - OauthToken
  - AuthProvider
  - App Store Connect API key
  - Google Play Service Account Credentials
  - OCULUS_APP_ID
  - OCULUS_APP_SECRET
  - OCULUS_USER_TOKEN
  - CM_API_KEY
  - APP_STORE_CONNECT_KEY_IDENTIFIER
  - APP_STORE_CONNECT_ISSUER_ID
  - APP_STORE_CONNECT_PRIVATE_KEY
  - CERTIFICATE_PRIVATE_KEY
  - CM_CERTIFICATE
  - CM_PROVISIONING_PROFILE
  - INSTALLER_CERTIFICATE
  - CM_CERTIFICATE_PASSWORD
  - INSTALLER_CERTIFICATE_PASSWORD
  - Certificate private key
  - App Store Connect API
  - Provisioning profile
  - Issuer ID
  - Key ID
  - Directory (tenant) ID
  - Application (client) ID
  - client secret
client:
  base_url: https://codemagic.io
  auth:
    type: oauth2
source_metadata: null
