resources:
- name: text_completion
  endpoint:
    path: /1.0.0/completion
    method: POST
- name: chat_completion
  endpoint:
    path: /1.0.0/chat-completion
    method: POST
- name: list_available_models
  endpoint:
    path: /1.0.0/list-available-models
    method: GET
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: model_routing
  endpoint:
    path: /model-routing
    method: POST
    data_selector: model
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: structured_outputs
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: get_weather
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices[0].message.content
    params: {}
- name: calculate_distance
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices[0].message.content
    params: {}
- name: get_weather
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices[0].message
    params: {}
- name: calculate_distance
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices[0].message
    params: {}
- name: web_search
  endpoint:
    path: /web-search
    method: POST
    data_selector: message.annotations
    params: {}
- name: web_search_results
  endpoint:
    path: /web-search
    method: GET
    data_selector: message.annotations
    params: {}
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params:
      model: anthropic/claude-3.7-sonnet
      max_tokens: 10000
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: messages
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: audio_input
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: image_generation
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: audio_input
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: models
  endpoint:
    path: /models
    method: GET
    data_selector: data
    params: {}
- name: image_generation
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params:
      modalities: image,text
- name: models
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: available_models
  endpoint:
    path: /models
    method: GET
    data_selector: data
    params: {}
- name: completion
  endpoint:
    path: /v1/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: ''
- name: models
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
- name: completions
  endpoint:
    path: /v1/completions
    method: POST
    data_selector: choices
    params: {}
- name: multimodal_embeddings
  endpoint:
    path: /v1/multimodalembeddings
    method: POST
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
    data_selector: data
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
- name: multimodal_embeddings
  endpoint:
    path: /multimodalembeddings
    method: POST
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
    data_selector: data
    params: {}
notes:
- The API also supports streaming.
- Most providers enable prompt caching automatically.
- Some providers require you to enable this feature on a per-message basis.
- Structured outputs allow for JSON Schema validation on model responses
- Streaming responses support structured output
- Knox Chat supports both streaming and non-streaming tool calls.
- Supports both streaming and non-streaming tool calls.
- 'Supports tool choice strategies: ''auto'', ''none'', ''required'', specific tool'
- Uses API key for authentication.
- All Knox Chat endpoints with a context length no greater than 8k (8,192 tokens)
  will use `middle-out` by default.
- 'All Knox Chat endpoints with a context length no greater than 8k (8,192 tokens)
  will use `middle-out` by default. To disable this feature, set `transforms: []`
  in the request body.'
- This web search plugin is powered by Exa and utilizes its auto method.
- Web search results from all models are standardized by Knox Chat.
- Web plugin uses a default search prompt with the current date.
- Zero-output generation protection is automatically applied to all requests across
  all models and providers.
- Interacting with MCP servers is more complex than calling REST endpoints.
- The MCP protocol is stateful and requires session management.
- MCP protocol is stateful and requires session management.
- Reasoning tokens are considered part of the output tokens and will be billed accordingly.
- Some reasoning models do not return reasoning tokens.
- Using inference feature increases token consumption but improves response quality.
- Multiple images can be sent in a single request depending on the provider and model.
- If the model does not natively support file input, Knox Chat will parse the file
  and pass the parsed results to the requested model.
- Multiple images can be sent by adding multiple entries in the content array.
- Multiple PDFs can be sent as separate content array entries.
- The number of images that can be sent in a single request varies depending on the
  provider and model.
- The number of PDFs that can be sent in a single request depends on the service provider
  and model.
- Recommended to send text prompts first before sending images or PDFs.
- Audio files must be base64-encoded - direct URLs are not supported for audio content.
- Supported audio formats are wav and mp3.
- Multiple images or PDFs can be sent in a single request depending on the provider
  and model.
- Authorization requires Bearer token
- RAG systems rely on diverse, distributed data across formats and platforms, making
  consistency and accuracy difficult to maintain.
- RAG is currently limited to answering queries and cannot perform complex actions.
- Access to the Service or certain features of the Service may require you to pay
  fees for prepaid top-ups linked to your account.
- Currently, Knox Chat requires users to top up credits to make API calls and access
  the Service, with minimum and maximum purchase amounts of ¥100 and ¥100,000 respectively
  per transaction.
- Images are returned as base64-encoded data URLs
- Rate limits may vary for image generation compared to text generation
- Requires setup of connected app in Knox Chat
- Authorization requires Bearer token.
errors:
- '400: Invalid or missing request parameters'
- '401: Authentication failed (invalid or expired API key)'
- '402: Insufficient account balance'
- '404: Requested resource not found'
- '429: Rate limit exceeded'
- '500: Internal server error'
- '401 Unauthorized: Check API Key'
- 'Model does not support structured output: The request will fail with an error indicating
  that it is not supported'
- 'Invalid schema: If your JSON schema is invalid, the model will return an error'
- 'Model does not support structured output: The request will fail with an error indicating
  that it is not supported.'
- 'Invalid schema: If your JSON schema is invalid, the model will return an error.'
- 'Invalid API Key: Check your API key and try again.'
- '401 Unauthorized: Recheck API key.'
- 'Invalid timezone: {timezone}'
- 'Unknown tool: {tool_name}'
- No reader available
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key or token expiration'
- 4xx series are client-side errors
- 5xx series are server-side errors
auth_info:
  mentioned_objects:
  - YOUR_KNOX_API_KEY
client:
  base_url: https://knox.chat/v1
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
