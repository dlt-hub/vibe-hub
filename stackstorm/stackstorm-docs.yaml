resources:
- name: action
  endpoint:
    path: /api/v1/actions
    method: GET
    data_selector: actions
    params: {}
- name: send_sms
  endpoint:
    path: /actions/send_sms
    method: GET
    data_selector: records
- name: send_to_syslog
  endpoint:
    path: /actions/send_to_syslog
    method: GET
    data_selector: records
- name: echo_action
  endpoint:
    path: /my_echo_action
    method: POST
    data_selector: results
    params:
      message: string
- name: rsync
  endpoint:
    path: /actions/rsync
    method: POST
    data_selector: result
    params: {}
- name: send_to_syslog
  endpoint:
    path: /actions/send_to_syslog
    method: POST
    data_selector: result
    params: {}
- name: echo_action
  endpoint:
    path: /actions/echo_action
    method: POST
    data_selector: result
    params: {}
- name: action_trigger
  endpoint:
    path: /api/v1/action_trigger
    method: GET
    data_selector: triggers
    params: {}
- name: sensor
  endpoint:
    path: /api/v1/sensor
    method: GET
    data_selector: sensors
    params: {}
- name: hello_sensor
  endpoint:
    path: /sensors/hello_sensor
    method: POST
    data_selector: triggers
    params: {}
- name: event1
  endpoint:
    path: /triggers/event1
    method: POST
    data_selector: payload
    params: {}
- name: rules
  endpoint:
    path: /rules
    method: GET
    data_selector: rules
    params: {}
- name: webhooks
  endpoint:
    path: /api/v1/webhooks
    method: POST
- name: executions
  endpoint:
    path: /executions
    method: POST
    data_selector: action
    params: {}
- name: key_value_pairs
  endpoint:
    path: /keys
    method: GET
    data_selector: keys
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
- name: role
  endpoint:
    path: /api/v1/roles
    method: GET
- name: permission
  endpoint:
    path: /api/v1/permissions
    method: GET
- name: user_permissions
  endpoint:
    path: /api/user_permissions
    method: GET
    data_selector: permissions
    params: {}
- name: roles
  endpoint:
    path: /api/roles
    method: GET
    data_selector: roles
    params: {}
- name: assignments
  endpoint:
    path: /api/assignments
    method: GET
    data_selector: assignments
    params: {}
- name: User
  endpoint:
    path: /v1.0/users
    method: GET
- name: Role
  endpoint:
    path: /v1.0/roles
    method: GET
- name: Permission
  endpoint:
    path: /v1.0/permissions
    method: GET
- name: my_action_2
  endpoint:
    path: action:dummy_pack_1:my_action_2
    method: execute
    data_selector: permission_grants
    params: {}
- name: my_action_1
  endpoint:
    path: action:dummy_pack_1:my_action_1
    method: execute
    data_selector: permission_grants
    params: {}
- name: roles
  endpoint:
    path: /v1.0/rbac/roles
    method: GET
- name: permissions
  endpoint:
    path: /v1.0/rbac/permissions
    method: GET
- name: users
  endpoint:
    path: /v1.0/rbac/users
    method: GET
- name: my_action_2
  endpoint:
    path: action:dummy_pack_1:my_action_2
    method: GET
    data_selector: permission_grants
- name: my_action_1
  endpoint:
    path: action:dummy_pack_1:my_action_1
    method: GET
    data_selector: permission_grants
- name: rules
  endpoint:
    path: /rules
    method: GET
    data_selector: records
    params: {}
- name: rbac_user1
  endpoint:
    path: /opt/stackstorm/rbac/assignments/rbac_user1.yaml
    method: GET
    data_selector: roles
- name: core.ask
  endpoint:
    path: /actions/core.ask
    method: GET
    data_selector: result
    params: {}
- name: inquiry
  endpoint:
    path: /exp/inquiries
    method: GET
    data_selector: inquiries
    params: {}
- name: action_parameters
  endpoint:
    path: /api/v1/actions/views/parameters/{action_id}
    method: GET
    data_selector: parameters
    params: {}
- name: action_clone
  endpoint:
    path: /api/v1/actions/{ref_or_id}/clone
    method: POST
    data_selector: clone
    params: {}
- name: action
  endpoint:
    path: /v1/actions
    method: GET
    data_selector: actions
- name: rule
  endpoint:
    path: /v1/rules
    method: GET
    data_selector: rules
- name: action
  endpoint:
    path: /api/v1/actions
    method: GET
    data_selector: actions
- name: trigger
  endpoint:
    path: /api/v1/triggers
    method: GET
    data_selector: triggers
- name: executions
  endpoint:
    path: /v1/executions/<execution id>/output
    method: GET
    data_selector: output
- name: st2auth
  endpoint:
    path: /auth
    method: GET
- name: st2api
  endpoint:
    path: /api
    method: GET
- name: st2
  endpoint:
    path: /install/st2
    method: GET
    data_selector: records
    params: {}
- name: actions
  endpoint:
    path: /api/v1/actions
    method: GET
- name: auth
  endpoint:
    path: /auth/v1/
    method: GET
- name: actions
  endpoint:
    path: /api/v1/actions
    method: GET
    data_selector: actions
- name: auth
  endpoint:
    path: /auth/v1/
    method: GET
    data_selector: auth
- name: mongodb
  endpoint:
    path: /etc/yum.repos.d/mongodb-org-4.repo
    method: GET
    data_selector: records
- name: actions
  endpoint:
    path: /api/v1/actions
    method: GET
- name: actions
  endpoint:
    path: /api/v1/actions
    method: GET
    data_selector: records
- name: Vagrant
  endpoint:
    path: /vagrant
    method: GET
    data_selector: records
- name: Virtual Appliance
  endpoint:
    path: /virtual-appliance
    method: GET
    data_selector: records
- name: st2
  endpoint:
    path: /services/data/vXX.X/sobjects/st2
    method: GET
    data_selector: records
    params: {}
- name: auth_user
  endpoint:
    path: /auth/user
    method: GET
- name: kv
  endpoint:
    path: /kv
    method: GET
- name: pack
  endpoint:
    path: /pack
    method: GET
- name: user
  endpoint:
    path: /user
    method: GET
- name: st2auth
  endpoint:
    path: /st2auth
    method: GET
- name: st2web
  endpoint:
    path: /st2web
    method: GET
- name: st2auth
  endpoint:
    path: /st2auth
    method: GET
- name: st2api
  endpoint:
    path: /st2api
    method: GET
- name: st2stream
  endpoint:
    path: /st2stream
    method: GET
- name: st2rulesengine
  endpoint:
    path: /st2rulesengine
    method: GET
- name: st2timersengine
  endpoint:
    path: /st2timersengine
    method: GET
- name: st2workflowengine
  endpoint:
    path: /st2workflowengine
    method: GET
- name: st2notifier
  endpoint:
    path: /st2notifier
    method: GET
- name: st2sensorcontainer
  endpoint:
    path: /st2sensorcontainer
    method: GET
- name: st2actionrunner
  endpoint:
    path: /st2actionrunner
    method: GET
- name: st2scheduler
  endpoint:
    path: /st2scheduler
    method: GET
- name: st2garbagecollector
  endpoint:
    path: /st2garbagecollector
    method: GET
- name: st2chatops
  endpoint:
    path: /st2chatops
    method: GET
- name: local-shell-cmd
  endpoint:
    path: /action/runners/local-shell-cmd
    method: GET
    data_selector: runner_parameters
    params: {}
- name: local-shell-script
  endpoint:
    path: /action/runners/local-shell-script
    method: GET
    data_selector: runner_parameters
    params: {}
- name: winrm-cmd
  endpoint:
    path: /action/runners/winrm-cmd
    method: GET
    data_selector: runner_parameters
    params: {}
- name: winrm-ps-cmd
  endpoint:
    path: /action/runners/winrm-ps-cmd
    method: GET
    data_selector: runner_parameters
    params: {}
- name: st2api
  endpoint:
    path: /api/v1/
    method: GET
    data_selector: records
- name: st2auth
  endpoint:
    path: /auth/v1/
    method: GET
    data_selector: records
- name: st2stream
  endpoint:
    path: /stream/v1/
    method: GET
    data_selector: records
- name: st2sensorcontainer
  endpoint:
    path: /sensor/v1/
    method: GET
    data_selector: records
- name: st2rulesengine
  endpoint:
    path: /rules/v1/
    method: GET
    data_selector: records
- name: st2timersengine
  endpoint:
    path: /timers/v1/
    method: GET
    data_selector: records
- name: st2workflowengine
  endpoint:
    path: /workflow/v1/
    method: GET
    data_selector: records
- name: st2actionrunner
  endpoint:
    path: /action/v1/
    method: GET
    data_selector: records
- name: st2scheduler
  endpoint:
    path: /scheduler/v1/
    method: GET
    data_selector: records
- name: st2notifier
  endpoint:
    path: /notifier/v1/
    method: GET
    data_selector: records
- name: st2garbagecollector
  endpoint:
    path: /garbagecollector/v1/
    method: GET
    data_selector: records
- name: st2api
  endpoint:
    path: /api/
    method: GET
- name: st2auth
  endpoint:
    path: /auth/
    method: GET
- name: actions
  endpoint:
    path: /v1/actions
    method: GET
    data_selector: actions
    params: {}
- name: post_message
  endpoint:
    path: /actions/post_message
    method: GET
    data_selector: results
    params: {}
- name: orquesta-sequential
  endpoint:
    path: /opt/stackstorm/packs/examples/actions/orquesta-sequential.yaml
    method: POST
    data_selector: result
    params: {}
- name: workflow
  endpoint:
    path: /
    method: GET
    data_selector: workflows
- name: action_chain
  endpoint:
    path: /opt/stackstorm/packs/<pack>/actions/
    method: GET
    data_selector: chains
    params: {}
- name: echochain
  endpoint:
    path: /opt/stackstorm/packs/examples/actions/echochain.meta.yaml
    method: POST
    data_selector: ''
    params: {}
- name: Slack
  endpoint:
    path: /services/data/vXX.X/sobjects/Slack
    method: GET
    data_selector: records
    params: {}
- name: Microsoft Teams
  endpoint:
    path: /services/data/vXX.X/sobjects/MicrosoftTeams
    method: GET
    data_selector: records
    params: {}
- name: notify_slack
  endpoint:
    path: /notifications
    method: POST
    data_selector: trigger
    params: {}
- name: configuration
  endpoint:
    path: /opt/stackstorm/packs/<mypack>/config.schema.yaml
    method: GET
- name: api_key
  endpoint:
    path: /opt/stackstorm/configs/
    method: GET
    data_selector: api_key
    params: {}
- name: api_secret
  endpoint:
    path: /opt/stackstorm/configs/
    method: GET
    data_selector: api_secret
    params: {}
- name: region
  endpoint:
    path: /opt/stackstorm/configs/
    method: GET
    data_selector: region
    params: {}
- name: private_key_path
  endpoint:
    path: /opt/stackstorm/configs/
    method: GET
    data_selector: private_key_path
    params: {}
- name: actions
  endpoint:
    path: /actions/
    method: GET
- name: rules
  endpoint:
    path: /rules/
    method: GET
- name: sensors
  endpoint:
    path: /sensors/
    method: GET
- name: aliases
  endpoint:
    path: /aliases/
    method: GET
- name: policies
  endpoint:
    path: /policies/
    method: GET
- name: test_content_version
  endpoint:
    path: https://github.com/StackStorm-Exchange/stackstorm-test-content-version
    method: GET
    data_selector: records
- name: action.concurrency
  endpoint:
    path: /actions/concurrency
    method: GET
    data_selector: policies
    params: {}
- name: action.retry
  endpoint:
    path: /actions/retry
    method: GET
    data_selector: policies
    params: {}
- name: traces
  endpoint:
    path: /v1/traces
    method: GET
    data_selector: traces
    params: {}
- name: executions
  endpoint:
    path: /executions
    method: POST
    data_selector: status
    params: {}
- name: execution_status
  endpoint:
    path: /executions/{id}
    method: GET
    data_selector: status
    params: {}
- name: sensorcontainer
  endpoint:
    path: /etc/st2/partition_file.yaml
    method: GET
- name: metrics_configuration
  endpoint:
    path: /etc/st2/st2.conf
    method: GET
    data_selector: metrics
    params: {}
- name: metrics
  endpoint:
    path: /api/v1/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: action_executions
  endpoint:
    path: st2.action.executions
    method: GET
    data_selector: counter
    params: {}
- name: rule_processed
  endpoint:
    path: st2.rule.processed
    method: GET
    data_selector: counter
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: records
- name: st2-statsd-metrics
  endpoint:
    path: /scrape_configs
    method: GET
    data_selector: targets
- name: remote_action
  endpoint:
    path: /core.remote
    method: POST
    data_selector: result
    params:
      cmd: whoami
      hosts: localhost
- name: action_runner
  endpoint:
    path: /actionrunner
    method: GET
    data_selector: pool_sizes
    params:
      workflows_pool_size: 40
      actions_pool_size: 60
notes:
- For security reasons, the installer script enables authentication and generates
  random passwords for dependent services such as MongoDB.
- Uses basic authentication — default username & password is st2admin/Ch@ngeMe
- Script should exit with `0` status code on success and non-zero on error.
- All log messages should be printed to standard error.
- Clone operation clones action from source pack to destination pack and renames them
  appropriately.
- Sensors are pieces of Python code that either periodically poll some external system,
  or passively wait for inbound events.
- Triggers are StackStorm constructs that identify the incoming events to StackStorm.
- Rules not working as expected? Check the Rules Troubleshooting documentation.
- Rules are defined in YAML.
- Each rule can only have one single action section.
- Usage of the `search` operator should largely be limited to trying to match a small
  number of child criteria, and a small number of expected payload list items.
- It is a good practice to always edit the original rule file, so that keep your infrastructure
  in code.
- Installing a pack from a directory that is a git repository will only install the
  latest commit, and ignores any subsequent uncommitted changes to the files.
- Running `st2 pack install` on an already installed pack will replace it with the
  requested version or upgrade to latest if the version is not specified.
- 'The override facility is currently restricted to allowing the enabled property
  to be overridden only for resources of type: action, alias, rule and sensor.'
- Packs are placed in the system pack directory - by default /opt/stackstorm/packs.
- API keys are recommended for webhooks, as they do not expire.
- Tokens have a fixed expiry.
- The StackStorm administrator is responsible for generating the symmetric key used
  for encryption/decryption.
- If an admin has not setup an encryption key, you will not be allowed to save secrets
  in the key-value store.
- By default, the StackStorm configuration file is located at /etc/st2/st2.conf.
- The service can be configured with different backends (i.e. PAM, LDAP, etc.) to
  handle authentication.
- If your password contains special characters such as '$', they may be interpreted
  by the shell.
- Using HTTP header is preferred since some web servers and third party services log
  query parameters.
- RBAC is available in StackStorm Open Source since version 3.4.
- Supports user permissions defined in YAML files
- Resource UID format is <resource type>:<resource specific identifier value>
- RBAC is available in StackStorm Open Source since 3.4.
- The support of key value pairs is only available in StackStorm v3.7.0 and above.
- This functionality is only available in StackStorm v3.7.0 and above.
- This functionality is disabled by default and is only available in StackStorm v2.7.0
  and above.
- User management is kept outside of StackStorm.
- Each permission must be explicitly assigned to a user.
- Only after running the command does StackStorm know of the latest changes to RBAC
  permission grants.
- Some of these coordination backends also require corresponding client libraries
  to be installed in StackStorm virtualenv.
- Inquiry garbage collection is not enabled by default, so the ttl field does nothing
  unless it is turned on.
- Inquiries are marked as 'timed out' after their TTL expires without a response.
- The default TTL for inquiries is 1440 minutes.
- Common problems you might encounter while using the StackStorm platform, and how
  to debug and troubleshoot them.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects may return nulls in deeply nested fields
- Uses OAuth2 with refresh token — requires setup of connected app in StackStorm
- Uses OAuth2 with refresh token — requires setup of connected app in st2
- If you have RBAC enabled and any workflows access the datastore, then any user with
  execute permissions for those workflows will need to be assigned an RBAC role with
  the appropriate key_value_pair permissions.
- If you need to change cookie attributes, you can do that using api.auth_cookie_secure
  and api.auth_cookie_same_site config options.
- Trigger parameters and payload schema validation is now enabled by default.
- Please do not report security issues using our public Github repository or Slack
  chat. Use the private mailing list described bellow.
- If you believe you found a security issue or a vulnerability, please send a description
  of it to our private mailing list at info [at] stackstorm [dot] com
- Only 64-bit architecture is supported.
- StackStorm on Ubuntu 18.04 runs all services, actions and sensors using Python 3
  only.
- It does not support Python2 actions.
- If using a different user, or path to their SSH key, you will need to change this
  section in /etc/st2/st2.conf.
- Ensure communication between services is encrypted. Enable SSL/TLS for MongoDB and
  RabbitMQ
- Configure services to only listen on localhost, and where needed, internal IP addresses.
- Configure a firewall and set up a whitelist.
- StackStorm on Ubuntu 20.04 runs all services, actions and sensors using Python 3.
- File-based authentication provider is used for simplicity.
- Ensure passwordless SSH is configured for remote actions.
- StackStorm on RHEL 7/CentOS 7 runs all services, actions and sensors using Python
  3 only.
- The currently supported version of MongoDB is 4.0.
- The Key-value store allows users to store encrypted values (secrets). These are
  stored using symmetric encryption (AES256).
- Make sure only st2 user can read the file.
- The reference deployment uses a file-based authentication provider for simplicity.
- By default, when MongoDB and RabbitMQ are installed, they have authentication disabled
  or use a default static password.
- If you use the StackStorm installation script, this is done automatically for you.
- StackStorm on RHEL 8/RockyLinux/CentOS 8 runs all services, actions and sensors
  using Python 3 only.
- StackStorm is verified on RHEL/RockyLinux 8.x distributions, but our RPMs should
  be compatible with other RHEL 8.x derivatives, e.g. CentOS 8 Stream.
- If SELinux is in Enforcing mode, adjust SELinux policies.
- 'Linux login credentials: Username: vagrant, Password: vagrant'
- 'StackStorm login details: Username: st2admin, Password: Ch@ngeMe'
- If using OVA in production environment, don’t forget to change the default credentials
  and delete SSH authorized keys for vagrant linux user.
- If you use Kubernetes, check the StackStorm HA Cluster in Kubernetes - BETA for
  more information.
- 'Default StackStorm login credentials are: testu:testp. Change them to more secure
  settings.'
- By default the flat_file backend is used.
- This deployment method is in beta. Documentation and code may still be substantially
  modified and/or refactored.
- Uses unsafe default values. We recommend changing them for production via Helm values.yaml.
- Uses shared volumes sacrifices the stateless infrastructure model.
- By default, st2web is a NodePort Service and is not exposed to the public net.
- If your Kubernetes cluster setup supports the LoadBalancer service type, you can
  configure st2web as a LoadBalancer service.
- If you are upgrading an existing system that has the old keys installed, it will
  need updating.
- Yammer support has been removed.
- The instructions given here will delete data.
- If you are trying to recover from a failed installation, some of these steps may
  fail. Proceed with all instructions, and ignore any errors.
- Proceed with caution if you have other applications running on this system, especially
  if you are re-using components such as RabbitMQ, MongoDB, Nginx or PostgreSQL. You
  will need to manually delete the relevant databases & configurations.
- Removing the StackStorm packages will not automatically remove all dependencies
  that may have been installed. Because we don’t know exactly which applications were
  installed originally, we can’t know for sure which dependencies are safe to remove.
  These can be left on your system.
- Windows runners are DEPRECATED as of version 2.9.
- The legacy Windows runners will be REMOVED in version 3.1.
- Multiple instances of st2api, st2auth, and st2stream can be run behind a load balancer
  for high availability.
- Ensure user configuration on all boxes running st2auth is identical.
- Uses API key for authentication. A username and password can also be used.
- A basic sequential workflow.
- The Orquesta workflow DSL is derived from OpenStack Mistral.
- The fail fast design of Orquesta is different to Mistral workflows.
- Workflow execution can be paused by running `st2 execution pause <execution-id>`.
- A workflow execution can be cancelled by running `st2 execution cancel <execution-id>`.
- A workflow execution can be re-run from the beginning using `st2 execution re-run
  <execution-id>`.
- If you need more complex workflow logic, such as forks, joins, retries, delays and
  policies for error handling, use Orquesta instead.
- Configuring st2chatops with Microsoft Teams is a more involved process.
- All other chat providers can be configured in st2chatops.env.
- There are multiple hubot adapters for Microsoft Teams and/or BotFramework.
- Microsoft BotFramework’s 'push model' requires bots to have an open port open to
  the internet.
- Users MUST explicitly at-mention the bot user to send any messages to the bot.
- Notifications require an action that is registered with StackStorm.
- This feature is turned off by default to avoid potential issues that might arise
  due to existing pack structures and lib imports.
- Pack configuration follows an infrastructure as code approach, and is stored in
  a YAML format file in a special directory.
- Configuration files are not read dynamically at run-time.
- Pack configuration files are loaded at registration.
- Dynamic values are resolved during run-time.
- Site-specific pack configuration files are stored at /opt/stackstorm/configs/
- Pack management has received a significant overhaul in StackStorm 2.1.
- Output streaming only works with the remote runner when you run the command/script
  on a single host at once.
- This functionality can be restricted via RBAC. To access the execution stdout and
  stderr API endpoint, `EXECUTION_VIEW` permission type is required.
- You are also strongly encouraged to modify your actions to mask/hide any potentially
  sensitive data inside the action output if it’s not needed for further processing
  inside StackStorm.
- If your actions produce a lot of output, enabling real-time output streaming for
  each action execution can result large amounts of data being passed around and stored
  in the database. This data is stored in the special write ahead database collections
  (`action_execution_stdout_output_d_b`, `action_execution_stderr_output_d_b`).
- Garbage collection is enabled by default for execution stdout and stderr objects
  - they are deleted automatically after 7 days.
- Right now only the content (code, metadata) inside the pack directory which is a
  git repository is versioned.
- Currently, all data in the datastore is represented as strings.
- To represent complex data structures like dicts and lists the standard approach
  is to convert the data structure into JSON when storing the data, then parse it
  when retrieving the data.
- The concurrency policy type is not enabled by default and requires a backend coordination
  service such as ZooKeeper or Redis to work.
- By default all ActionExecutions and TriggerInstances are traced.
- 'Monitoring guidelines are just that: guidelines, and may need to be modified for
  specific environments.'
- If the life-cycle of your StackStorm services is handled by a third party orchestrator
  such as Kubernetes, you will likely need to manually create sensor node assignments.
- Partitioning sensors across multiple sensor nodes is desirable for load management
  or security purposes.
- Check out the LogStash configuration and Kibana dashboard for pretty logging and
  audit at exchange-misc/logstash
- Masking can be disabled on a per-API request basis, by passing the ?show_secrets=True
  query parameter to all of the supported API endpoints. This is only available to
  users with the admin role.
- You are strongly encouraged to not rely on secret masking functionality alone, but
  use it in combination with other security related primitives available in StackStorm
  such as RBAC and encrypted datastore values (defense in depth principle).
- In addition to that, you should be careful to not use DEBUG log level or debug mode
  in production deployments. When debug mode is enabled, log verbosity is increased.
  This provides a lot of data which is helpful when debugging, but could also contain
  sensitive information. No masking is performed.
- This feature was added and is available in StackStorm v2.9.0 and above.
- By default metrics collection is disabled.
- Metrics collection is disabled by default. To enable it, configure metrics.driver,
  metrics.host, and metrics.port in /etc/st2/st2.conf.
- The only supported driver is statsd.
- Various metrics documented in this section are only available in StackStorm v2.9.0
  and above.
- By default metrics collection is disabled. To enable it, you need to configure `metrics.driver`
  and depending on the driver, also `metrics.host` and `metrics.port` option in `/etc/st2/st2.conf`.
- Right now, the only supported driver is `statsd`.
- Running self-check script may pollute your StackStorm environment
- By default, st2-self-check will run Orquesta tests, but will not run Windows tests
- The recommended way to install st2chatops is using the steps mentioned in Installation
  Section for your OS.
- Common issues include typos and syntax errors in the sensor class code, uncaught
  exceptions being thrown that causes the sensor to exit.
- Default username is 'stanley' and default ssh_key_file is '/home/stanley/.ssh/stanley_rsa'.
- If you are changing system_user or ssh_key_file configuration values in /etc/st2/st2.conf,
  you must restart StackStorm for your changes to take effect.
- 'If you are trying to access the API from outside the server, note that the URL
  will look like: https://${EXTERNAL_IP}/api/v1/${REST_ENDPOINT}.'
- From the server itself, you can use localhost instead of ${EXTERNAL_IP}.
- You can tune pool sizes by changing these settings in st2.conf
- Garbage collection is disabled by default, with the exception of Real-Time Streaming
  Action Output.
- The lowest supported TTL is 1 day.
- If you are installing StackStorm on a host you do not have direct (or VPN) network
  access to, you may have some difficulty connecting to the Web UI.
- Simply creating an SSH tunnel through a bastion host, and then using a URL on localhost
  will fail.
- This is due to the way the Web UI authentication works, where the browser will be
  provided with URLs for the authentication service that do not map to your tunnel
  address.
- If you do not have the ability to set up a VPN between your networks, the simplest
  solution is to use SSH as a proxy.
- Enabling debug mode can be done by starting a service with the --debug command line
  flag.
- After making changes to the config file, restart all services with sudo st2ctl restart.
- You may also be running StackStorm with a self-signed certificate.
- The vast majority of webhook issues fall into one of these two buckets, and these
  log files should help point you in the right direction.
errors:
- '403 Forbidden: Check your authentication token'
- '404 Not Found: Ensure the endpoint is correct'
- '500 Internal Server Error: Server-side issue, retry later'
- 'Rules not working as expected: Check the Rules Troubleshooting documentation.'
- '401 Unauthorized: Check API key or token.'
- '401 Unauthorized: Recheck username or password'
- '400 Client Error: Bad Request - Response did not pass schema validation.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '404 Not Found: Check the endpoint path or resource ID'
- 'ValueError: "enterprise" RBAC backend is not available. Make sure "bwc-enterprise"
  and "st2-rbac-backend" system packages are installed.'
- Trigger payload validation failed and validation is enabled, not dispatching a trigger.
- '401 Unauthorized: Check if the user exists and verify password.'
- '404 Not Found: Endpoint may not exist or require authentication.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '503 Service Unavailable: Ensure all services are running'
- '500 Internal Server Error: Check logs for more details'
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Check the request parameters'
- 'Failed to run task: Parameter rendering failed: ''s1'' is undefined'
- 'status: ''failed'': Indicates a failed execution.'
- Error handling and masking limitations not explicitly defined in the documentation.
- 'Connection error. Error connecting to host ma-box with connection parameters {''username'':
  u''stanley'', ''key_filename'': ''/home/stanley/.ssh/id_rsa'', ''allow_agent'':
  False, ''hostname'': u''ma-box'', ''look_for_keys'': False, ''timeout'': 60, ''port'':
  22}.'
- Trigger not found for %s
auth_info:
  mentioned_objects:
  - ApiKey
  - X-Auth-Token
  - st2auth
  - PAM
  - LDAP
  - OauthToken
  - AuthProvider
  - flat file auth backend
  - st2admin
  - htpasswd
  - flat_file
  - RBAC
  - st2
  - keystone
  - ldap
  - mongodb
  - pam
client:
  base_url: https://stackstorm.com
  auth:
    type: oauth2
source_metadata: null
