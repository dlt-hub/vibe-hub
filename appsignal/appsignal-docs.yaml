resources:
- name: create_sourcemap
  endpoint:
    path: /api/sourcemaps
    method: POST
    data_selector: response
    params:
      push_api_key: Your organization's Push API key
      app_name: Name of the application in AppSignal
      environment: Environment of the application in AppSignal
      revision: Deploy marker revision reference
      name: List of filenames that the sourcemap covers
- name: anomaly_detection
  endpoint:
    path: /anomaly-detection
    method: GET
    data_selector: alerts
- name: anomaly_detection
  endpoint:
    path: /anomaly-detection
    method: GET
    data_selector: alerts
- name: filter_parameters
  endpoint:
    path: /application/parameter-filtering.html
    method: GET
    data_selector: parameters
    params: {}
- name: session_data_filtering
  endpoint:
    path: /application/session-data-filtering.html
    method: GET
    data_selector: session_data
    params: {}
- name: session_data_filtering
  endpoint:
    path: /application/session-data-filtering.html
    method: GET
    data_selector: session_data
    params: {}
- name: custom_instrumentation
  endpoint:
    path: /elixir/instrumentation
    method: GET
    data_selector: records
- name: custom_instrumentation
  endpoint:
    path: /elixir/instrumentation
    method: GET
    data_selector: records
- name: working_directory_path
  endpoint:
    path: /tmp/project_1/
    method: SET
    data_selector: config
- name: opentelemetry_port
  endpoint:
    path: '9001'
    method: SET
    data_selector: config
- name: custom_instrumentation
  endpoint:
    path: /elixir/instrumentation
    method: GET
    data_selector: instrumentation
    params: {}
- name: error_tracking
  endpoint:
    path: /tour/errors/
    method: GET
    data_selector: errors
    params: {}
- name: performance_monitoring
  endpoint:
    path: /tour/performance
    method: GET
    data_selector: performance
    params: {}
- name: host_monitoring
  endpoint:
    path: /tour/hosts
    method: GET
    data_selector: hosts
    params: {}
- name: anomaly_detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
    data_selector: anomaly_detection
    params: {}
- name: uptime_monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
    data_selector: uptime_monitoring
    params: {}
- name: metric_dashboards
  endpoint:
    path: /tour/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: log_management
  endpoint:
    path: /tour/log-management
    method: GET
    data_selector: log_management
    params: {}
- name: check_ins
  endpoint:
    path: /tour/check-ins
    method: GET
    data_selector: check_ins
    params: {}
- name: workflow
  endpoint:
    path: /tour/workflow
    method: GET
    data_selector: workflow
    params: {}
- name: automated_dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
    data_selector: automated_dashboards
    params: {}
- name: time_detective
  endpoint:
    path: /tour/time-detective
    method: GET
    data_selector: time_detective
    params: {}
- name: Ruby
  endpoint:
    path: /ruby/configuration/options.html#option-working_directory_path
    data_selector: working_directory_path
    params:
      working_directory_path: /tmp/project_1/
- name: Elixir
  endpoint:
    path: /elixir/configuration/options.html#option-working_directory_path
    data_selector: working_directory_path
    params:
      working_directory_path: /tmp/project_1/
- name: Node.js
  endpoint:
    path: /nodejs/3.x/configuration/options.html#option-workingdirectorypath
    data_selector: workingDirectoryPath
    params:
      workingDirectoryPath: /tmp/project_1
- name: Python
  endpoint:
    path: /python/configuration/options.html#option-working_directory_path
    data_selector: working_directory_path
    params:
      working_directory_path: /tmp/project_1
      opentelemetry_port: 9001
- name: applications
  endpoint:
    path: /sites/new
    method: GET
- name: error_tracking
  endpoint:
    path: /errors
    method: GET
    data_selector: errors
- name: performance_monitoring
  endpoint:
    path: /performance
    method: GET
    data_selector: performance
- name: deploy_markers
  endpoint:
    path: /application/markers/deploy-markers.html
    method: GET
    data_selector: deploys
    params: {}
- name: namespaces
  endpoint:
    path: /application/namespaces
    method: GET
    data_selector: namespaces
- name: web
  endpoint:
    path: /application/namespaces.html
    method: GET
- name: frontend
  endpoint:
    path: /front-end/span.html
    method: GET
- name: background
  endpoint:
    path: /application/namespaces.html
    method: GET
- name: appsignal
  endpoint:
    path: /api/v1/appsignal
    method: GET
    data_selector: data
    params: {}
- name: slow_queries
  endpoint:
    path: /redirect-to/app?to=improve/queries
    method: GET
    data_selector: queries
    params: {}
- name: deploy_markers
  endpoint:
    path: /application/markers/deploy-markers
    method: POST
    data_selector: deploys
    params: {}
- name: namespaces
  endpoint:
    path: /application/namespaces.html
    method: GET
    data_selector: records
- name: namespaces
  endpoint:
    path: /application/namespaces.html
    method: GET
    data_selector: namespaces
    params: {}
- name: action_names
  endpoint:
    path: /guides/actions
    method: GET
    data_selector: actions
    params: {}
- name: Payments
  endpoint:
    path: /payments
    method: POST
- name: applications
  endpoint:
    path: /appsignal.com/redirect-to/app?to=edit
    method: DELETE
    data_selector: app
    params: {}
- name: slow_queries
  endpoint:
    path: /redirect-to/app?to=improve/queries
    method: GET
    data_selector: queries
- name: application
  endpoint:
    path: /api/v1/applications
    method: GET
    data_selector: data
    params: {}
- name: default
  endpoint:
    path: /config/appsignal.yml
    method: GET
- name: Push API
  endpoint:
    path: /api/push
    method: POST
    data_selector: data
    params:
      api_key: organization-level Push API key
- name: delete_application
  endpoint:
    path: /redirect-to/app?to=edit
    method: GET
- name: appsignal
  endpoint:
    path: /api/v1/appsignal
    method: GET
    data_selector: data
    params: {}
- name: appsignal_config
  endpoint:
    path: /appsignal/config
    method: GET
    data_selector: config
    params: {}
- name: appsignal_env
  endpoint:
    path: /appsignal/env
    method: GET
    data_selector: env
    params: {}
- name: appsignal_revision
  endpoint:
    path: /appsignal/revision
    method: GET
    data_selector: revision
    params: {}
- name: appsignal_user
  endpoint:
    path: /appsignal/user
    method: GET
    data_selector: user
    params: {}
- name: appsignal_config
  endpoint:
    path: /config
    method: GET
    data_selector: config
    params: {}
- name: default
  endpoint:
    params: {}
- name: production
  endpoint:
    params: {}
- name: development
  endpoint:
    params: {}
- name: staging
  endpoint:
    params: {}
- name: test
  endpoint:
    params: {}
- name: Delayed::Job
  endpoint:
    path: /delayed_job
    method: GET
    data_selector: jobs
    params: {}
- name: Active Job
  endpoint:
    path: /active_job
    method: GET
    data_selector: metrics
    params: {}
- name: appsignal_config
  endpoint:
    path: /ruby/configuration.html
    method: GET
    data_selector: configurations
    params: {}
- name: global_vm_lock
  endpoint:
    path: /ruby/integrations/global-vm-lock
    method: GET
    data_selector: metrics
- name: appsignal_config
  endpoint:
    path: /appsignal/config
    method: GET
    data_selector: config
- name: appsignal_env
  endpoint:
    path: /appsignal/env
    method: GET
    data_selector: env
- name: appsignal_revision
  endpoint:
    path: /appsignal/revision
    method: GET
    data_selector: revision
- name: appsignal_user
  endpoint:
    path: /appsignal/user
    method: GET
    data_selector: user
- name: delayed_job
  endpoint:
    path: /delayed_job
    method: GET
    data_selector: jobs
- name: Global VM Lock
  endpoint:
    path: /ruby/integrations/global-vm-lock.html
    method: GET
    data_selector: metrics
    params: {}
- name: Padrino
  endpoint:
    path: /ruby/integrations/padrino.html
    method: GET
    data_selector: null
    params: {}
- name: global_vm_lock_metrics
  endpoint:
    path: /ruby/global-vm-lock
    method: GET
    data_selector: metrics
    params: {}
- name: puma_metrics
  endpoint:
    path: /puma/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: Que
  endpoint:
    path: /ruby/integrations/que.html
    method: GET
    data_selector: events
    params: {}
- name: MongoDB
  endpoint:
    path: /mongo
    method: GET
    data_selector: metrics
- name: multiple_rack_libraries
  endpoint:
    path: /ruby/integrations/rack-libraries.html
    method: GET
    data_selector: records
    params: {}
- name: error_tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: performance_monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: host_monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: anomaly_detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: uptime_monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: metric_dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: log_management
  endpoint:
    path: /tour/log-management
    method: GET
- name: check_ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: puma_metrics
  endpoint:
    path: /puma/metrics
    method: GET
- name: error_tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: performance_monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: host_monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: anomaly_detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: uptime_monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: metric_dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: log_management
  endpoint:
    path: /tour/log-management
    method: GET
- name: check_ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: workflow
  endpoint:
    path: /tour/workflow
    method: GET
- name: automated_dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
- name: time_detective
  endpoint:
    path: /tour/time-detective
    method: GET
- name: Rack Instrumentation Middleware
  endpoint:
    path: /rack/instrumentation
    method: GET
    data_selector: features
    params: {}
- name: sequel
  endpoint:
    path: /ruby/integrations/sequel.html
    method: GET
    data_selector: records
- name: Rake task monitoring
  endpoint:
    path: /rake/tasks
    method: POST
    data_selector: tasks
    params: {}
- name: shoryuken
  endpoint:
    path: /ruby/integrations/shoryuken.html
    method: GET
    data_selector: records
- name: error_tracking
  endpoint:
    path: /api/error_tracking
    method: GET
    data_selector: errors
- name: performance_monitoring
  endpoint:
    path: /api/performance_monitoring
    method: GET
    data_selector: performance
- name: host_monitoring
  endpoint:
    path: /api/host_monitoring
    method: GET
    data_selector: hosts
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: install
  endpoint:
    path: /ruby/command-line/install.html
    method: GET
    data_selector: records
- name: diagnose
  endpoint:
    path: /ruby/command-line/diagnose.html
    method: GET
    data_selector: records
- name: demo
  endpoint:
    path: /ruby/command-line/demo.html
    method: GET
    data_selector: records
- name: Shoryuken
  endpoint:
    path: /ruby/integrations/shoryuken.html
    method: GET
    data_selector: data
    params: {}
- name: sidekiq
  endpoint:
    path: /sidekiq
    method: GET
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: Workflow
  endpoint:
    path: /tour/workflow
    method: GET
- name: Automated Dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
- name: Time Detective
  endpoint:
    path: /tour/time-detective
    method: GET
- name: install
  endpoint:
    path: /ruby/command-line/install.html
    method: GET
- name: diagnose
  endpoint:
    path: /ruby/command-line/diagnose.html
    method: GET
- name: demo
  endpoint:
    path: /ruby/command-line/demo.html
    method: GET
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: Workflow
  endpoint:
    path: /tour/workflow
    method: GET
- name: Automated Dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
- name: Time Detective
  endpoint:
    path: /tour/time-detective
    method: GET
- name: Ruby APM
  endpoint:
    path: /ruby
    method: GET
    data_selector: data
    params: {}
- name: Elixir APM
  endpoint:
    path: /elixir
    method: GET
    data_selector: data
    params: {}
- name: Node.js APM
  endpoint:
    path: /nodejs
    method: GET
    data_selector: data
    params: {}
- name: JavaScript Error Tracking
  endpoint:
    path: /javascript
    method: GET
    data_selector: data
    params: {}
- name: Python APM
  endpoint:
    path: /python
    method: GET
    data_selector: data
    params: {}
- name: OpenTelemetry
  endpoint:
    path: /opentelemetry
    method: GET
    data_selector: data
    params: {}
- name: appsignal
  endpoint:
    path: /config/appsignal
    method: GET
    data_selector: records
    params: {}
- name: appsignal
  endpoint:
    path: /api/v1/appsignal
    method: GET
    data_selector: data
    params: {}
- name: appsignal_config
  endpoint:
    path: /config
    method: GET
    data_selector: config
- name: default
  endpoint: {}
- name: development
  endpoint: {}
- name: production
  endpoint: {}
- name: test
  endpoint: {}
- name: error_tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: performance_monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: host_monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: anomaly_detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: uptime_monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: metric_dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: log_management
  endpoint:
    path: /tour/log-management
    method: GET
- name: check_ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: Automated Dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
- name: Time Detective
  endpoint:
    path: /tour/time-detective
    method: GET
- name: exception_handling
  endpoint:
    path: /ruby/instrumentation/exception-handling.html
    method: GET
    data_selector: content
- name: error_tracking
  endpoint:
    path: /api/v1/errors
    method: GET
    data_selector: errors
    params: {}
- name: performance_monitoring
  endpoint:
    path: /api/v1/performance
    method: GET
    data_selector: performance
    params: {}
- name: event_formatters
  endpoint:
    path: /event_formatters
    method: GET
    data_selector: events
    params: {}
- name: error_tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: performance_monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: host_monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: anomaly_detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: uptime_monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: metric_dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: log_management
  endpoint:
    path: /tour/log-management
    method: GET
- name: check_ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: workflow
  endpoint:
    path: /tour/workflow
    method: GET
- name: automated_dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
- name: time_detective
  endpoint:
    path: /tour/time-detective
    method: GET
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: Workflow
  endpoint:
    path: /tour/workflow
    method: GET
- name: Automated Dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
- name: Time Detective
  endpoint:
    path: /tour/time-detective
    method: GET
- name: background_job_library_probe
  endpoint:
    path: /background_job_library/probe
    method: POST
    data_selector: probe
    params: {}
- name: error_tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: performance_monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: host_monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: anomaly_detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: uptime_monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: metric_dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: log_management
  endpoint:
    path: /tour/log-management
    method: GET
- name: check_ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: workflow
  endpoint:
    path: /tour/workflow
    method: GET
- name: automated_dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
- name: time_detective
  endpoint:
    path: /tour/time-detective
    method: GET
- name: request_queue_time
  endpoint:
    path: /ruby/instrumentation/request-queue-time.html
    method: GET
    data_selector: queue_times
- name: custom_markers
  endpoint:
    path: /api/markers.html
    method: POST
    data_selector: markers
    params: {}
- name: public_endpoint_custom_markers
  endpoint:
    path: /api/public-endpoint/custom-markers.html
    method: POST
    data_selector: custom_markers
    params: {}
- name: appsignal_config
  endpoint:
    path: /config/test.exs
    method: GET
    data_selector: config
- name: Absinthe
  endpoint:
    path: /elixir/integrations/absinthe.html
- name: Phoenix
  endpoint:
    path: /elixir/integrations/phoenix.html
- name: Plug
  endpoint:
    path: /elixir/integrations/plug.html
- name: Ecto
  endpoint:
    path: /elixir/integrations/ecto.html
- name: Erlang
  endpoint:
    path: /elixir/integrations/erlang.html
- name: Finch
  endpoint:
    path: /elixir/integrations/finch.html
- name: Oban
  endpoint:
    path: /elixir/integrations/oban.html
- name: Tesla
  endpoint:
    path: /elixir/integrations/tesla.html
- name: Ecto
  endpoint:
    path: /elixir/integrations/ecto.html
    method: GET
    data_selector: queries
    params: {}
- name: error_tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: performance_monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: host_monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: anomaly_detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: uptime_monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: metric_dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: log_management
  endpoint:
    path: /tour/log-management
    method: GET
- name: check_ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: workflow
  endpoint:
    path: /tour/workflow
    method: GET
- name: automated_dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
- name: time_detective
  endpoint:
    path: /tour/time-detective
    method: GET
- name: user_comments
  endpoint:
    path: /v2/users/:user/comments
    method: GET
    data_selector: null
    params: {}
- name: appsignal_config
  endpoint:
    path: /config/test.exs
    method: GET
    data_selector: config
    params: {}
- name: live_view_instrumentation
  endpoint:
    path: /elixir/integrations/phoenix.html
    method: GET
    data_selector: data
    params: {}
- name: error_tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: performance_monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: host_monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: anomaly_detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: uptime_monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: metric_dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: log_management
  endpoint:
    path: /tour/log-management
    method: GET
- name: check_ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: appsignal
  endpoint:
    path: /appsignal/config
    method: POST
    data_selector: config
    params: {}
- name: error_tracking
  endpoint:
    path: /errors
    method: GET
    data_selector: errors
- name: performance_monitoring
  endpoint:
    path: /performance
    method: GET
    data_selector: performance
- name: user_comments
  endpoint:
    path: /:user/comments
    method: GET
    data_selector: ''
    params: {}
- name: install
  endpoint:
    path: /elixir/command-line/install.html
    method: GET
    data_selector: records
    params: {}
- name: diagnose
  endpoint:
    path: /elixir/command-line/diagnose.html
    method: GET
    data_selector: records
    params: {}
- name: demo
  endpoint:
    path: /elixir/command-line/demo.html
    method: GET
    data_selector: records
    params: {}
- name: check_install
  endpoint:
    path: /elixir/command-line/check-install.html
    method: GET
    data_selector: records
    params: {}
- name: appsignal
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: Workflow
  endpoint:
    path: /tour/workflow
    method: GET
- name: Automated Dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
- name: Time Detective
  endpoint:
    path: /tour/time-detective
    method: GET
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: minutely_probes
  endpoint:
    path: /elixir/instrumentation/minutely-probes
    method: GET
    data_selector: records
- name: appsignal
  endpoint:
    path: /api/v1/appsignal
    method: POST
    data_selector: data
- name: custom_metrics
  endpoint:
    path: /metrics/custom
    method: POST
    data_selector: metrics
    params: {}
- name: sign_ups
  endpoint:
    path: /metrics/sign_ups
    method: POST
    data_selector: records
- name: database_size
  endpoint:
    path: /metrics/database_size
    method: POST
    data_selector: records
- name: install
  endpoint:
    path: /elixir/command-line/install.html
    method: GET
    data_selector: null
    params: {}
- name: diagnose
  endpoint:
    path: /elixir/command-line/diagnose.html
    method: GET
    data_selector: null
    params: {}
- name: demo
  endpoint:
    path: /elixir/command-line/demo.html
    method: GET
    data_selector: null
    params: {}
- name: check_install
  endpoint:
    path: /elixir/command-line/check-install.html
    method: GET
    data_selector: null
    params: {}
- name: install
  endpoint:
    path: /elixir/command-line/install.html
    method: GET
- name: diagnose
  endpoint:
    path: /elixir/command-line/diagnose.html
    method: GET
- name: demo
  endpoint:
    path: /elixir/command-line/demo.html
    method: GET
- name: check_install
  endpoint:
    path: /elixir/command-line/check-install.html
    method: GET
- name: demo
  endpoint:
    path: /elixir/command-line/demo.html
    method: GET
    data_selector: samples
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: Workflow
  endpoint:
    path: /tour/workflow
    method: GET
- name: Automated Dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
- name: Time Detective
  endpoint:
    path: /tour/time-detective
    method: GET
- name: check_install
  endpoint:
    path: /elixir/command-line/check-install.html
    method: POST
    data_selector: exit_codes
- name: error_tracking
  endpoint:
    path: /error_tracking
    method: GET
    data_selector: errors
- name: performance_monitoring
  endpoint:
    path: /performance_monitoring
    method: GET
    data_selector: performance
- name: error_tracking
  endpoint:
    path: /errors
    method: GET
    data_selector: errors
- name: performance_monitoring
  endpoint:
    path: /performance
    method: GET
    data_selector: performance
- name: host_monitoring
  endpoint:
    path: /hosts
    method: GET
    data_selector: hosts
- name: uptime_monitoring
  endpoint:
    path: /uptime
    method: GET
    data_selector: uptime
- name: metric_dashboards
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
- name: log_management
  endpoint:
    path: /logs
    method: GET
    data_selector: logs
- name: application_environment
  endpoint:
    path: /python/configuration
    method: GET
    data_selector: environment
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: celery_instrumentation
  endpoint:
    path: /python/instrumentations/celery.html
    method: GET
    data_selector: records
    params: {}
- name: metrics
  endpoint:
    path: /api/metrics
    method: GET
    data_selector: data
- name: django_instrumentation
  endpoint:
    path: /python/instrumentations/django
    method: GET
    data_selector: features
- name: FastAPI
  endpoint:
    path: /python/instrumentations/fastapi
    method: GET
    data_selector: data
    params: {}
- name: error_tracking
  endpoint:
    path: /tour/errors/
    method: GET
    data_selector: errors
    params: {}
- name: performance_monitoring
  endpoint:
    path: /tour/performance
    method: GET
    data_selector: performance
    params: {}
- name: host_monitoring
  endpoint:
    path: /tour/hosts
    method: GET
    data_selector: hosts
    params: {}
- name: uptime_monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
    data_selector: uptime
    params: {}
- name: log_management
  endpoint:
    path: /tour/log-management
    method: GET
    data_selector: logs
    params: {}
- name: mysql
  endpoint:
    path: /python/instrumentations/mysql.html
    method: GET
    data_selector: records
    params: {}
- name: pymysql
  endpoint:
    path: /python/instrumentations/pymysql.html
    method: GET
    data_selector: records
    params: {}
- name: appsignal
  endpoint:
    path: /appsignal
    method: POST
    data_selector: data
- name: custom_metrics
  endpoint:
    path: /metrics/custom
    method: POST
    data_selector: metrics
- name: sign_ups
  endpoint:
    path: /increment_counter
    method: POST
    data_selector: data
    params: {}
- name: database_size
  endpoint:
    path: /set_gauge
    method: POST
    data_selector: data
    params: {}
- name: Redis
  endpoint:
    path: /python/instrumentations/redis.html
    method: GET
    data_selector: records
- name: SQLAlchemy Instrumentation
  endpoint:
    path: /python/instrumentations/sqlalchemy.html
    method: GET
    data_selector: records
    params: {}
- name: error_tracking
  endpoint:
    path: /errors
    method: GET
    data_selector: errors
    params: {}
- name: performance_monitoring
  endpoint:
    path: /performance
    method: GET
    data_selector: performance
    params: {}
- name: host_monitoring
  endpoint:
    path: /hosts
    method: GET
    data_selector: hosts
    params: {}
- name: uptime_monitoring
  endpoint:
    path: /uptime
    method: GET
    data_selector: uptime
    params: {}
- name: metric_dashboards
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: log_management
  endpoint:
    path: /logs
    method: GET
    data_selector: logs
    params: {}
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: Python Instrumentations
  endpoint:
    path: /python/instrumentations
    method: GET
    data_selector: records
- name: FastAPI
  endpoint:
    path: /python/instrumentations/fastapi
    method: GET
- name: error_tracking
  endpoint:
    path: /errors
    method: POST
    data_selector: error
    params: {}
- name: performance_monitoring
  endpoint:
    path: /performance
    method: GET
    data_selector: performance
    params: {}
- name: uptime_monitoring
  endpoint:
    path: /uptime
    method: GET
    data_selector: uptime
    params: {}
- name: span
  endpoint:
    path: /front-end/span
    method: GET
    data_selector: span
    params: {}
- name: Jinja2
  endpoint:
    path: /python/instrumentations/jinja2.html
    method: GET
    data_selector: records
- name: hooks
  endpoint:
    path: /front-end/hooks
    method: GET
    data_selector: hooks
    params: {}
- name: PostgreSQL Instrumentation
  endpoint:
    path: /python/instrumentations/postgresql.html
    method: GET
    data_selector: records
    params: {}
- name: Redis
  endpoint:
    path: /python/instrumentations/redis.html
    method: GET
    data_selector: records
    params: {}
- name: Starlette
  endpoint:
    path: /python/instrumentations/starlette
    method: GET
    data_selector: records
    params: {}
- name: SQLAlchemy
  endpoint:
    path: /python/instrumentations/sqlalchemy
    method: GET
    data_selector: instrumentations
    params: {}
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: Automated Dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
- name: Time Detective
  endpoint:
    path: /tour/time-detective
    method: GET
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: Workflow
  endpoint:
    path: /tour/workflow
    method: GET
- name: Automated Dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
- name: Time Detective
  endpoint:
    path: /tour/time-detective
    method: GET
- name: log_source
  endpoint:
    path: /logging/sources
    method: POST
    data_selector: source
    params: {}
- name: S3-Compatible Storage
  endpoint:
    path: /long-term-log-storage
    method: POST
    data_selector: storage_configuration
    params: {}
- name: Python Instrumentations
  endpoint:
    path: /python/instrumentations
    method: GET
    data_selector: instrumentations
- name: span
  endpoint:
    path: /createSpan
    method: POST
    data_selector: span
    params: {}
- name: hooks
  endpoint:
    path: /front-end/hooks
    method: GET
    data_selector: hooks
    params: {}
- name: Logger
  endpoint:
    path: /logging/configuration.html
    method: GET
- name: plugin-window-events
  endpoint:
    path: /front-end/plugins/plugin-window-events
    method: GET
    data_selector: plugin
    params: {}
- name: error_tracking
  endpoint:
    path: /error_tracking
    method: GET
    data_selector: records
    params: {}
- name: performance_monitoring
  endpoint:
    path: /performance_monitoring
    method: GET
    data_selector: records
    params: {}
- name: host_monitoring
  endpoint:
    path: /host_monitoring
    method: GET
    data_selector: records
    params: {}
- name: uptime_monitoring
  endpoint:
    path: /uptime_monitoring
    method: GET
    data_selector: records
    params: {}
- name: metric_dashboards
  endpoint:
    path: /metric_dashboards
    method: GET
    data_selector: records
    params: {}
- name: log_management
  endpoint:
    path: /log_management
    method: GET
    data_selector: records
    params: {}
- name: check_ins
  endpoint:
    path: /check_ins
    method: GET
    data_selector: records
    params: {}
- name: business_add_ons
  endpoint:
    path: /support/business-add-ons.html
    method: GET
    data_selector: business_add_ons
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: Workflow
  endpoint:
    path: /tour/workflow
    method: GET
- name: Automated Dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
- name: Time Detective
  endpoint:
    path: /tour/time-detective
    method: GET
- name: host_metrics
  endpoint:
    path: /heroku/host-metrics
    method: GET
    data_selector: metrics
    params: {}
- name: error_tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: performance_monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: host_monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: anomaly_detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: uptime_monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: metric_dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: log_management
  endpoint:
    path: /tour/log-management
    method: GET
- name: check_ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: workflow
  endpoint:
    path: /tour/workflow
    method: GET
- name: automated_dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
- name: time_detective
  endpoint:
    path: /tour/time-detective
    method: GET
- name: container_host_metrics
  endpoint:
    path: /metrics/host-metrics/containers
    method: GET
    data_selector: metrics
    params: {}
- name: log_sources
  endpoint:
    path: /logging/sources
    method: POST
    data_selector: sources
    params: {}
- name: logging_platforms
  endpoint:
    path: /logging/platforms
    method: GET
    data_selector: platforms
    params: {}
- name: logging_endpoints
  endpoint:
    path: /logging/endpoints
    method: GET
    data_selector: endpoints
    params: {}
- name: appsignal_agent
  endpoint:
    path: /
    method: GET
    data_selector: data
- name: appsignal
  endpoint:
    path: /agent
    method: GET
    data_selector: metrics
    params: {}
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: records
- name: StatsD
  endpoint:
    path: /standalone-agent/statsd
    method: UDP
    data_selector: metrics
    params: {}
- name: samples
  endpoint:
    path: /api/[app_id]/samples.json
    method: GET
    data_selector: records
- name: graphs
  endpoint:
    path: /graphs.json
    method: GET
    params: {}
- name: marker_create
  endpoint:
    path: /api/[app_id]/markers.json
    method: POST
    data_selector: marker
- name: marker_index
  endpoint:
    path: /api/[app_id]/markers.json
    method: GET
    data_selector: markers
- name: samples
  endpoint:
    path: /api/[app_id]/samples.json
    method: GET
    data_selector: log_entries
    params:
      limit: 10
- name: performance_samples
  endpoint:
    path: /api/[app_id]/samples/performance.json
    method: GET
    data_selector: log_entries
    params: {}
- name: error_samples
  endpoint:
    path: /api/[app_id]/samples/errors.json
    method: GET
    data_selector: log_entries
    params: {}
- name: exception_incidents
  endpoint:
    path: /graphql
    method: POST
    data_selector: app.exceptionIncidents
    params:
      limit: 200
- name: deploy_markers
  endpoint:
    path: /graphql
    method: POST
    data_selector: app.deployMarkers
    params:
      limit: 25
- name: nginx_metrics
  endpoint:
    path: /nginx/metrics
    method: GET
    data_selector: metrics
- name: search_incidents_by_tag
  endpoint:
    path: /search/incidents
    method: POST
    data_selector: organization.search
    params:
      organizationSlug: APPLICATION-SLUG
      sampleType: EXCEPTION
      query: tag:value
- name: fetch_error_count
  endpoint:
    path: /metrics/list
    method: POST
    data_selector: app.metrics.list
    params:
      appId: YOUR-APP-ID
      start: '2021-06-04T13:00:00.000Z'
      end: '2021-12-21T14:00:00.000Z'
      query:
      - name: transaction_exception_count
        tags:
        - key: namespace
          value: '*'
        fields:
        - field: COUNTER
          aggregate: SUM
- name: fetch_mean_timeseries
  endpoint:
    path: /metrics/timeseries
    method: POST
    data_selector: app.metrics.timeseries
    params:
      appId: YOUR-APP-ID
      start: '2022-01-10T11:00:00Z'
      end: '2022-01-10T11:05:00Z'
      query:
      - name: transaction_duration
        tags:
        - key: namespace
          value: web
        fields:
        - field: MEAN
- name: fetch_mean_aggregated
  endpoint:
    path: /metrics/aggregation
    method: POST
    data_selector: app.metrics.list
    params:
      appId: YOUR-APP-ID
      start: '2022-01-10T11:00:00Z'
      end: '2022-01-10T11:05:00Z'
      query:
      - name: transaction_duration
        tags:
        - key: namespace
          value: web
        fields:
        - field: mean
          aggregate: AVG
- name: fetch_incident_with_sample
  endpoint:
    path: /incident
    method: POST
    data_selector: app.incident
    params:
      appId: YOUR-APP-ID
      incidentNumber: ID-OF-INCIDENT
      sampleId: SAMPLE-ID-STRING
      timestamp: SAMPLE-TIME-STAMP
      timerange: SAMPLE-TIME-RANGE
- name: fetch_uptime_monitors_and_alerts
  endpoint:
    path: /uptimeMonitors
    method: POST
    data_selector: app.uptimeMonitors
    params:
      appId: YOUR-APP-ID
- name: fetch_uptime_monitors_status
  endpoint:
    path: /uptimeMonitors/status
    method: POST
    data_selector: app.metrics.timeseries
    params:
      appId: YOUR-APP-ID
      timeframe: R1H
      query:
      - name: uptime_monitor_error_count
        tags:
        - key: name
          value: NAME-OF-UPTIME-MONITOR
        - key: region
          value: '*'
        fields:
        - field: COUNTER
- name: Discord Webhook
  endpoint:
    path: /api/webhooks
    method: POST
    data_selector: data
- name: nginx_status
  endpoint:
    path: /metrics/nginx_status
    method: GET
    data_selector: metrics
    params: {}
- name: nginx_request_time
  endpoint:
    path: /metrics/nginx_request_time
    method: GET
    data_selector: metrics
    params: {}
- name: nginx_request_length
  endpoint:
    path: /metrics/nginx_request_length
    method: GET
    data_selector: metrics
    params: {}
- name: nginx_bytes_sent
  endpoint:
    path: /metrics/nginx_bytes_sent
    method: GET
    data_selector: metrics
    params: {}
- name: nginx_upstream_time
  endpoint:
    path: /metrics/nginx_upstream_time
    method: GET
    data_selector: metrics
    params: {}
- name: nginx_upstream_status
  endpoint:
    path: /metrics/nginx_upstream_status
    method: GET
    data_selector: metrics
    params: {}
- name: nginx_upstream_cache_status
  endpoint:
    path: /metrics/nginx_upstream_cache_status
    method: GET
    data_selector: metrics
    params: {}
- name: nginx_connections
  endpoint:
    path: /metrics/nginx_connections
    method: GET
    data_selector: metrics
    params: {}
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
    params: {}
- name: host_metrics
  endpoint:
    path: /heroku/host-metrics
    method: GET
    data_selector: metrics
    params: {}
- name: default_namespaces
  endpoint:
    path: /application/namespaces
    method: GET
    data_selector: namespaces
- name: container_host_metrics
  endpoint:
    path: /metrics/host-metrics/containers
    method: GET
    data_selector: metrics
    params: {}
- name: tags
  endpoint:
    path: /api/tags
    method: GET
    data_selector: tags
- name: session_data_filtering
  endpoint:
    path: /application/session-data-filtering
    method: GET
    data_selector: session_data
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: Workflow
  endpoint:
    path: /tour/workflow
    method: GET
- name: Automated Dashboards
  endpoint:
    path: /tour/automated-dashboards
    method: GET
- name: Time Detective
  endpoint:
    path: /tour/time-detective
    method: GET
- name: agent_installation
  endpoint:
    path: /standalone-agent/installation/linux-package
    method: GET
    data_selector: installation_steps
- name: error_tracking
  endpoint:
    path: /api/v1/errors
    method: GET
    data_selector: data
- name: performance_monitoring
  endpoint:
    path: /api/v1/performance
    method: GET
    data_selector: data
- name: host_monitoring
  endpoint:
    path: /api/v1/hosts
    method: GET
    data_selector: data
- name: uptime_monitoring
  endpoint:
    path: /api/v1/uptime
    method: GET
    data_selector: data
- name: log_management
  endpoint:
    path: /api/v1/logs
    method: GET
    data_selector: data
- name: metrics
  endpoint:
    path: /api/v1/metrics
    method: GET
    data_selector: data
- name: errors
  endpoint:
    path: /redirect-to/app?to=exceptions
    method: GET
- name: performance
  endpoint:
    path: /redirect-to/app?to=performance
    method: GET
- name: notifications
  endpoint:
    path: /application/integrations/
    method: GET
- name: StatsD
  endpoint:
    path: /standalone-agent/statsd.html
    method: GET
- name: samples
  endpoint:
    path: /api/[app_id]/samples.json
    method: GET
    data_selector: records
    params: {}
- name: tagging_requests
  endpoint:
    path: /guides/tagging.html
    method: GET
    data_selector: tags
    params: {}
- name: log_attributes
  endpoint:
    path: /logging.html
    method: GET
    data_selector: logs
    params: {}
- name: link_templates
  endpoint:
    path: /application/link-templates.html
    method: GET
    data_selector: link_templates
    params: {}
- name: samples
  endpoint:
    path: /api/[app_id]/samples.json
    method: GET
    data_selector: data
    params: {}
- name: graphs
  endpoint:
    path: /api/[app_id]/graphs.json
    method: GET
    data_selector: data
    params: {}
- name: marker_create
  endpoint:
    path: /api/[app_id]/markers.json
    method: POST
- name: marker_index
  endpoint:
    path: /api/[app_id]/markers.json
    method: GET
- name: samples
  endpoint:
    path: /api/[app_id]/samples.json
    method: GET
    data_selector: log_entries
- name: performance_samples
  endpoint:
    path: /api/[app_id]/samples/performance.json
    method: GET
    data_selector: log_entries
- name: error_samples
  endpoint:
    path: /api/[app_id]/samples/errors.json
    method: GET
    data_selector: log_entries
- name: webhook
  endpoint:
    path: /api/hangouts/chat/webhook
    method: POST
    data_selector: response
    params: {}
- name: exception_incidents
  endpoint:
    path: /graphql
    method: POST
    data_selector: exceptionIncidents
    params:
      limit: 200
- name: deploy_markers
  endpoint:
    path: /graphql
    method: POST
    data_selector: deployMarkers
    params:
      limit: 25
- name: search_incidents_by_tag
  endpoint:
    path: /search
    method: POST
    data_selector: organization.search
    params: {}
- name: fetch_error_count
  endpoint:
    path: /metrics/list
    method: POST
    data_selector: app.metrics.list
    params: {}
- name: fetch_mean_timeseries
  endpoint:
    path: /metrics/timeseries
    method: POST
    data_selector: app.metrics.timeseries
    params: {}
- name: fetch_mean_aggregated
  endpoint:
    path: /metrics/aggregation
    method: POST
    data_selector: app.metrics.list
    params: {}
- name: fetch_incident_with_sample
  endpoint:
    path: /incident
    method: POST
    data_selector: app.incident
    params: {}
- name: fetch_uptime_monitors_and_alerts
  endpoint:
    path: /uptimeMonitors
    method: POST
    data_selector: app.uptimeMonitors
    params: {}
- name: fetch_uptime_monitors_status
  endpoint:
    path: /metrics/timeseries
    method: POST
    data_selector: app.metrics.timeseries
    params: {}
- name: MS Teams Integration
  endpoint:
    path: /application/integrations/teams
    method: GET
    data_selector: integration_details
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: notifications
- name: alert
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
- name: schedule
  endpoint:
    path: /v2/schedules
    method: GET
    data_selector: data
- name: default_namespaces
  endpoint:
    path: /application/namespaces
    method: GET
    data_selector: namespaces
- name: custom_namespaces
  endpoint:
    path: /application/custom-namespaces
    method: GET
    data_selector: custom_namespaces
- name: tags
  endpoint:
    path: /application/tagging
    method: GET
    data_selector: tags
    params: {}
- name: webhooks
  endpoint:
    path: /application/integrations/webhooks
    method: GET
- name: trello
  endpoint:
    path: /application/integrations/trello
    method: GET
- name: teams
  endpoint:
    path: /application/integrations/teams
    method: GET
- name: squadcast
  endpoint:
    path: /application/integrations/squadcast
    method: GET
- name: slack
  endpoint:
    path: /application/integrations/slack
    method: GET
- name: shortcut
  endpoint:
    path: /application/integrations/shortcut
    method: GET
- name: pivotal_tracker
  endpoint:
    path: /application/integrations/pivotal-tracker
    method: GET
- name: phabricator
  endpoint:
    path: /application/integrations/phabricator
    method: GET
- name: pagerduty
  endpoint:
    path: /application/integrations/pagerduty
    method: GET
- name: linear
  endpoint:
    path: /application/integrations/linear
    method: GET
- name: jira
  endpoint:
    path: /application/integrations/jira
    method: GET
- name: intercom
  endpoint:
    path: /application/integrations/intercom
    method: GET
- name: google_hangouts_chat
  endpoint:
    path: /application/integrations/hangouts
    method: GET
- name: gitlab
  endpoint:
    path: /application/integrations/gitlab
    method: GET
- name: geckoboard
  endpoint:
    path: /application/integrations/geckoboard
    method: GET
- name: discord
  endpoint:
    path: /application/integrations/discord
    method: GET
- name: asana
  endpoint:
    path: /application/integrations/asana
    method: GET
- name: PagerDuty Integration
  endpoint:
    path: /service-directory/new-service
    method: POST
    data_selector: Integration Key
- name: Error Tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: Performance Monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: Host Monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: Anomaly Detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: Uptime Monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: Metric Dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: Log Management
  endpoint:
    path: /tour/log-management
    method: GET
- name: Check-ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: errors
  endpoint:
    path: /redirect-to/app?to=exceptions
    method: GET
- name: performance
  endpoint:
    path: /redirect-to/app?to=performance
    method: GET
- name: notifiers
  endpoint:
    path: /application/integrations/
    method: GET
- name: webhooks
  endpoint:
    path: /application/integrations/webhooks
    method: GET
- name: squadcast
  endpoint:
    path: /application/integrations/squadcast
    method: GET
- name: webhook
  endpoint:
    path: /notifications
    method: POST
- name: integration
  endpoint:
    path: /integration/asana
    method: POST
    data_selector: data
- name: exception
  endpoint:
    path: /webhooks/exception
    method: POST
    data_selector: exception
- name: performance
  endpoint:
    path: /webhooks/performance
    method: POST
    data_selector: performance
- name: webhook
  endpoint:
    path: /api/v1/webhooks
    method: POST
- name: exception
  endpoint:
    path: /webhooks/exception
    method: POST
    data_selector: exception
- name: performance
  endpoint:
    path: /webhooks/performance
    method: POST
    data_selector: performance
- name: webhook
  endpoint:
    path: /api/webhook
    method: POST
    data_selector: message
    params: {}
- name: webhooks
  endpoint:
    path: /api/v1/webhooks
    method: POST
    data_selector: alerts
    params: {}
- name: webhooks
  endpoint:
    path: /application/integrations/webhooks
    method: GET
- name: squadcast
  endpoint:
    path: /application/integrations/squadcast
    method: GET
- name: Shortcut stories
  endpoint:
    path: /api/v1/stories
    method: POST
    data_selector: story
    params: {}
- name: PagerDuty Integration
  endpoint:
    path: /services/integration
    method: POST
    data_selector: integration
    params: {}
- name: MS Teams Integration
  endpoint:
    path: /application/integrations/teams
    method: GET
    data_selector: ''
- name: alert
  endpoint:
    path: /v2/alerts
    method: GET
    data_selector: data
    params: {}
- name: OpsGenie
  endpoint:
    path: /application/integrations/opsgenie
    method: GET
- name: pagerduty_integration
  endpoint:
    path: /services/data/pagerduty/integration
    method: POST
- name: webhook
  endpoint:
    path: /application/integrations/hangouts
    method: POST
    data_selector: webhook_response
- name: webhooks
  endpoint:
    path: /application/integrations/webhooks
    method: GET
- name: trello
  endpoint:
    path: /application/integrations/trello
    method: GET
- name: microsoft_teams
  endpoint:
    path: /application/integrations/teams
    method: GET
- name: squadcast
  endpoint:
    path: /application/integrations/squadcast
    method: GET
- name: slack
  endpoint:
    path: /application/integrations/slack
    method: GET
- name: shortcut
  endpoint:
    path: /application/integrations/shortcut
    method: GET
- name: pivotal_tracker
  endpoint:
    path: /application/integrations/pivotal-tracker
    method: GET
- name: pagerduty
  endpoint:
    path: /application/integrations/pagerduty
    method: GET
- name: opsgenie
  endpoint:
    path: /application/integrations/opsgenie
    method: GET
- name: linear
  endpoint:
    path: /application/integrations/linear
    method: GET
- name: jira
  endpoint:
    path: /application/integrations/jira
    method: GET
- name: intercom
  endpoint:
    path: /application/integrations/intercom
    method: GET
- name: google_hangouts_chat
  endpoint:
    path: /application/integrations/hangouts
    method: GET
- name: gitlab
  endpoint:
    path: /application/integrations/gitlab
    method: GET
- name: geckoboard
  endpoint:
    path: /application/integrations/geckoboard
    method: GET
- name: discord
  endpoint:
    path: /application/integrations/discord
    method: GET
- name: asana
  endpoint:
    path: /application/integrations/asana
    method: GET
- name: Discord Notifications
  endpoint:
    path: /api/webhooks
    method: POST
    data_selector: notifications
- name: Asana Integration
  endpoint:
    path: /api/asana
    method: POST
- name: link_appsignal_to_repo
  endpoint:
    path: /application/integrations/github/link-to-repo.html
    method: GET
- name: link_backtraces_to_revisions_and_lines
  endpoint:
    path: /application/integrations/github/link-backtraces-to-revisions-and-lines.html
    method: GET
- name: create_github_issues_for_incidents
  endpoint:
    path: /application/integrations/github/create-github-issue.html
    method: GET
- name: webhooks
  endpoint:
    path: /application/integrations/webhooks
    method: GET
- name: trello
  endpoint:
    path: /application/integrations/trello
    method: GET
- name: microsoft_teams
  endpoint:
    path: /application/integrations/teams
    method: GET
- name: squadcast
  endpoint:
    path: /application/integrations/squadcast
    method: GET
- name: slack
  endpoint:
    path: /application/integrations/slack
    method: GET
- name: shortcut
  endpoint:
    path: /application/integrations/shortcut
    method: GET
- name: pivotal_tracker
  endpoint:
    path: /application/integrations/pivotal-tracker
    method: GET
- name: phabricator
  endpoint:
    path: /application/integrations/phabricator
    method: GET
- name: pagerduty
  endpoint:
    path: /application/integrations/pagerduty
    method: GET
- name: opsgenie
  endpoint:
    path: /application/integrations/opsgenie
    method: GET
- name: linear
  endpoint:
    path: /application/integrations/linear
    method: GET
- name: jira
  endpoint:
    path: /application/integrations/jira
    method: GET
- name: intercom
  endpoint:
    path: /application/integrations/intercom
    method: GET
- name: google_hangouts_chat
  endpoint:
    path: /application/integrations/hangouts
    method: GET
- name: gitlab
  endpoint:
    path: /application/integrations/gitlab
    method: GET
- name: geckoboard
  endpoint:
    path: /application/integrations/geckoboard
    method: GET
- name: discord
  endpoint:
    path: /application/integrations/discord
    method: GET
- name: asana
  endpoint:
    path: /application/integrations/asana
    method: GET
- name: Slack App
  endpoint:
    path: /redirect-to/app?to=notifiers/new/slack
    method: POST
- name: webhooks
  endpoint:
    path: /application/integrations/webhooks
    method: POST
- name: deploy_markers
  endpoint:
    path: /api/markers
    method: POST
    data_selector: data
    params: {}
- name: exception
  endpoint:
    path: /webhooks/exception
    method: POST
    data_selector: exception
- name: performance
  endpoint:
    path: /webhooks/performance
    method: POST
    data_selector: performance
- name: anomaly_detection
  endpoint:
    path: /webhooks/anomaly_detection
    method: POST
    data_selector: anomaly_detection
- name: markers
  endpoint:
    path: /api/markers
    method: POST
- name: public_markers
  endpoint:
    path: /api/public-endpoint/custom-markers
    method: POST
- name: exception
  endpoint:
    path: /webhooks/exception
    method: POST
    data_selector: exception
- name: performance
  endpoint:
    path: /webhooks/performance
    method: POST
    data_selector: performance
- name: anomaly_detection
  endpoint:
    path: /webhooks/anomaly_detection
    method: POST
    data_selector: anomaly_detection
- name: error_tracking
  endpoint:
    path: /errors
    method: GET
    data_selector: records
- name: performance_monitoring
  endpoint:
    path: /performance
    method: GET
    data_selector: records
- name: host_monitoring
  endpoint:
    path: /hosts
    method: GET
    data_selector: records
- name: uptime_monitoring
  endpoint:
    path: /uptime
    method: GET
    data_selector: records
- name: Webhook
  endpoint:
    path: /application/integrations/teams
    method: POST
    data_selector: webhook
    params: {}
- name: webhooks
  endpoint:
    path: /application/integrations/webhooks
    method: GET
- name: Shortcut Stories
  endpoint:
    path: /api/v1/stories
    method: POST
    data_selector: story
    params: {}
- name: error_tracking
  endpoint:
    path: /tour/errors/
    method: GET
- name: performance_monitoring
  endpoint:
    path: /tour/performance
    method: GET
- name: host_monitoring
  endpoint:
    path: /tour/hosts
    method: GET
- name: anomaly_detection
  endpoint:
    path: /tour/anomaly-detection
    method: GET
- name: uptime_monitoring
  endpoint:
    path: /tour/uptime-monitoring
    method: GET
- name: metric_dashboards
  endpoint:
    path: /tour/metrics
    method: GET
- name: log_management
  endpoint:
    path: /tour/log-management
    method: GET
- name: check_ins
  endpoint:
    path: /tour/check-ins
    method: GET
- name: webhooks
  endpoint:
    path: /application/integrations/webhooks
    method: GET
- name: trello
  endpoint:
    path: /application/integrations/trello
    method: GET
- name: microsoft_teams
  endpoint:
    path: /application/integrations/teams
    method: GET
- name: squadcast
  endpoint:
    path: /application/integrations/squadcast
    method: GET
- name: slack
  endpoint:
    path: /application/integrations/slack
    method: GET
- name: shortcut
  endpoint:
    path: /application/integrations/shortcut
    method: GET
- name: pivotal_tracker
  endpoint:
    path: /application/integrations/pivotal-tracker
    method: GET
- name: pagerduty
  endpoint:
    path: /application/integrations/pagerduty
    method: GET
- name: opsgenie
  endpoint:
    path: /application/integrations/opsgenie
    method: GET
- name: linear
  endpoint:
    path: /application/integrations/linear
    method: GET
- name: jira
  endpoint:
    path: /application/integrations/jira
    method: GET
- name: intercom
  endpoint:
    path: /application/integrations/intercom
    method: GET
- name: google_hangouts_chat
  endpoint:
    path: /application/integrations/hangouts
    method: GET
- name: gitlab
  endpoint:
    path: /application/integrations/gitlab
    method: GET
- name: geckoboard
  endpoint:
    path: /application/integrations/geckoboard
    method: GET
- name: discord
  endpoint:
    path: /application/integrations/discord
    method: GET
- name: asana
  endpoint:
    path: /application/integrations/asana
    method: GET
- name: pagerduty_integration
  endpoint:
    path: /services/integration
    method: POST
    data_selector: integration_key
    params: {}
- name: OpsGenie
  endpoint:
    path: /application/integrations/opsgenie
    method: GET
- name: AppSignal
  endpoint:
    path: /
    method: GET
- name: Google Hangouts Chat
  endpoint:
    path: /application/integrations/hangouts
    method: GET
- name: gitlab_integration
  endpoint:
    path: /application/integrations/gitlab
    method: GET
    data_selector: integration_data
- name: notifications
  endpoint:
    path: /webhooks
    method: POST
    data_selector: notifications
    params: {}
- name: tasks
  endpoint:
    path: /tasks
    method: POST
    data_selector: data
- name: deploy_markers
  endpoint:
    path: /api/markers
    method: POST
    data_selector: data
    params: {}
- name: custom_marker
  endpoint:
    path: /api/markers
    method: POST
- name: public_custom_marker
  endpoint:
    path: /api/public-endpoint/custom-markers
    method: POST
notes:
- Private sourcemaps will not be used to resolve Node.js backtraces.
- The maximum upload size allowed for a sourcemap file is 100MB.
- Currently the AppSignal Push API uses specific IP addresses that might change.
- Anomaly detection works by detecting changes in metric values on a minutely basis.
- AppSignal is located in the beautiful Netherlands.
- We don't recommend allowlisting specific IP addresses. They might change, and more
  may be added in the future.
- You can define warm-ups and cooldowns to control when a new alert is opened.
- By default, appsignal-wrap will report any failure exit statuses of the process
  it monitors as errors to AppSignal.
- The errors will be grouped by the name provided as the first argument.
- AppSignal Wrap helps monitor any processes running on your server.
- The tool integrates with AppSignal's cron and heartbeat check-ins, logging, and
  error reporting.
- The AppSignal MCP server is currently in beta.
- Make sure to set 'MCP servers in Copilot' to 'Enabled' under your organization settings
  > Copilot > Policies.
- By default, appsignal-wrap will report the standard output and standard error of
  the process as logs to AppSignal.
- To disable sending logs altogether, you can use the --no-log command-line option.
- Uncaught exceptions are not captured by default.
- Ignoring actions will ignore error and performance data from those actions.
- Join our Discord community to help test and shape this implementation.
- Uncaught exceptions are not captured by default. You can enable this functionality
  by enabling the plugin-window-events plugin.
- Uses OAuth2 with refresh token — requires setup of connected app in AppSignal.
- Action names are used to group errors and performance issues.
- Your application should not collect user-identifiable information (such as personal
  names, email addresses, passwords, etc.).
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Do not send Personal Identifiable Information (PII) to AppSignal. Filter PII (e.g.,
  names, emails) and use an ID, hash, or pseudonymized identifier instead.
- For HIPAA-covered entities, more info on signing a Business Associate Agreement
  (BAA) is available in our Business Add-Ons documentation.
- Your application should not collect user-identifiable information (such as personal
  names, email addresses, passwords, etc.). Use the tools described in this guide
  to limit and filter out this data.
- AppSignal collects headers for HTTP requests by default for supported frameworks.
- To comply with GDPR rules, collecting no user identifiable data, AppSignal collects
  a very limited amount of headers by default.
- This feature requires AppSignal for Ruby version 1.3.0 or higher.
- Make sure you've integrated AppSignal before adding custom instrumentation to your
  application if it's not automatically integrated by one of our supported integrations.
- This page only describes how to add performance instrumentation to your code. To
  track errors please read our exception handling guide.
- Make sure you've integrated AppSignal before adding custom instrumentation.
- 'Warning: Please make sure the body payloads are sanitized (sensitive/dynamic data
  is removed). Non-sanitized body events will be discarded if they reach a certain
  limit.'
- This page only describes how to add performance instrumentation to your code.
- AppSignal integrations for Ruby, Elixir & Node.js contain native extensions and
  a separate lightweight agent process.
- Go and Python integrations only use the agent process and don't require additional
  packages to be installed.
- Our Go and Python integrations only use our agent process and don't require additional
  packages to be installed.
- macOS (OS X) 10.14.x and up is supported by AppSignal for Ruby, Elixir & Node.js.
- The configuration is key. It's important, because without it the AppSignal agent
  won't know which application it's instrumenting and in which environment.
- Not all known issues are documented here. Only those that are taking some time to
  get fixed, remain an issue in some way after they have been fixed or benefit from
  a separate support page.
- To allow AppSignal to be used for multiple applications on one host we need to set
  the 'working directory path' configuration option.
- Using this configuration option, we need to set a unique working directory path
  per application for AppSignal to store its (temporary) files.
- AppSignal provides two-factor authentication (2FA) to add an extra level of security
  to your account.
- AppSignal tries to support Linux as best as possible, but some changes in our build
  process have caused some problems with supporting certain Linux distributions and
  versions.
- If your app is unable to call the `ldd` program or the detection is off for some
  reason, you can force the Alpine Linux compatible build by providing a special environment
  variable on install.
- Getting your application up-and-running with AppSignal is easy and shouldn't take
  more than ten minutes.
- After changing your AppSignal configuration, your application needs to be restarted
  or deployed for the configuration changes to be detected by AppSignal.
- macOS (OS X) 10.14.x and up is supported by AppSignal for Ruby, Elixir & Node.js.
  It currently does not support the host metrics feature.
- Uses API key for authentication — ensure not to expose sensitive information.
- Supports multiple languages including Ruby, Elixir, Node.js, Python, and others.
- Configuration can be done via environment variables or config files.
- The configuration is key, because without it the AppSignal agent won't know which
  application it's instrumenting.
- By default, agents log 'info'-level logs and higher.
- The `revision` config option is required configuration for PHP applications.
- AppSignal can automatically report a deploy when using platforms such as Heroku
  or Render.
- 'Warning: AppSignal is not able to help you gain access to your user account again
  if you lose your phone and haven''t saved your backup codes.'
- AppSignal can take you from an error backtrace to the line of code from which a
  specific error originated.
- AppSignal has always had a strong focus on protecting any data we collect and process.
- As a European owned and operated business we appreciate the solidification of this
  through the General Data Protection Regulation (GDPR) laws that enter into effect
  on May 25, 2018.
- Namespaces are defined by your application's code.
- Namespace names may only contain letters (a-z) and underscores.
- AppSignal will only detect and register new Ruby, Elixir, Node.js and Python applications
  once it receives data from your application.
- Namespaces may only contain letters (a-z) and underscores
- We do not recommend having more than 15 namespaces per application.
- Uses API key for authentication
- Ensure environment variables are set for sensitive information
- Always use static strings for action names. Never interpolate variables, user input,
  or dynamic data into action names.
- Uses static strings for action names.
- Avoid using variables in action names to prevent too many unique action names.
- For PHP applications the `appsignal.config.revision` config option is required configuration.
- The revision config option is configured differently per integration language.
- Requests and background jobs can be slow for various reasons, but a common cause
  are slow database queries.
- AppSignal will automatically report a deploy when using platforms such as Heroku
  or Render.
- Namespaces are a way to group error incidents, performance incidents and metrics
  from actions.
- Namespace names may only contain letters (a-z) and underscores
- Do not send Personal Identifiable Information (PII) to AppSignal. Filter PII and
  use an ID, hash, or pseudonymized identifier instead.
- Avoid using dynamic values in action names.
- The organization-level Push API key needs to be changed in an app to migrate an
  app.
- Some things are organization specific, such as certain integration such as Jira/GitHub
  or notifiers such as Slack.
- You can only remove/delete one environment at a time through the UI.
- Apps are automatically recreated when our servers receive data from your app.
- Large tables and missing indexes may cause database queries to take longer than
  needed.
- Tags that do not meet these limitations are dropped without warning.
- AppSignal for Ruby version 4.2.0 or higher is required.
- Make sure these environment variables are configured in the way that's compatible
  with your Operating System and that the values get loaded before your app with AppSignal
  is started.
- This feature requires AppSignal for Ruby version 2.11.0 or higher.
- This feature requires AppSignal for Ruby version 3.7.3 or higher.
- This feature requires Active Job version 7.1.0 or higher.
- This feature requires AppSignal for Ruby version 1.3 or higher.
- This feature requires Capistrano version 2 or higher.
- For Rails apps you do not have to configure your application name, AppSignal will
  use the name of your application by default.
- If you use a framework that is aware of environments and is supported by the AppSignal
  gem, the environment is detected automatically.
- This method of reporting deploy markers is deprecated and may be removed at any
  time in the future.
- AppSignal requires configuration for application name and environment.
- The AppSignal gem works out of the box with DataMapper! Nothing to do. Lucky!
- Multiple app environments can be configured using root-level keys.
- Every environment needs to be configured in the YAML file with a root-level key.
- The AppSignal gem detects Delayed Job when it's present and hooks into the standard
  Delayed Job callbacks.
- Some methods may have some limitations and customization options.
- This feature requires AppSignal for Ruby version 3.1.4 or higher.
- This feature requires AppSignal for Ruby version 3.3.9 or higher.
- This feature requires Ruby version 3.2 or higher.
- This feature requires gvltools version 0.2 or higher.
- This feature requires AppSignal for Ruby version 1.1 or higher.
- This feature requires Grape version 1.0 or higher.
- Mounting Grape applications on Ruby on Rails applications is supported. The Ruby
  gem needs to be a recent version to properly instrument requests for mounted Grape
  apps.
- AppSignal supports the GraphQL gem through the built-in instrumentation module in
  the GraphQL gem.
- This method of reporting deploy markers is deprecated.
- This feature requires AppSignal for Ruby version 3.3.0 or higher.
- This feature requires Hanami version 2 or higher.
- This feature requires AppSignal for Ruby version 3.2.0 or higher.
- If you wish to disable our integration with the HTTP.rb gem, set the [`instrument_http_rb`
  config option](/ruby/configuration/options.html#option-instrument_http_rb) to false
  to disable it.
- Reporting of jobs using perform method is supported since AppSignal Ruby gem version
  2.11.0.
- Job name detection was added in Ruby gem version 2.11.0.
- This feature requires AppSignal for Ruby version 1.0 or higher.
- This feature requires AppSignal for Ruby version 3.12.0 or higher.
- Events for HTTP requests performed by your application using Net::HTTP will appear
  in the event timeline of your application's performance actions, as well as in the
  'Slow queries' performance panel.
- Instrumenting Padrino applications requires some manual setup.
- The `gvltools` library is only compatible with the official Ruby interpreter.
- JRuby is not supported.
- This feature requires AppSignal for Ruby version 3.0.7 or higher.
- This feature requires Puma version 3.11.4 or higher.
- Mounting Grape applications on Ruby on Rails applications is supported.
- Puma metrics plugin requires AppSignal for Ruby version 3.0.7 or higher.
- Puma version 3.11.4 or higher is required.
- This feature requires AppSignal for Ruby version 2.4.1 or higher.
- Job names are automatically detected based on the Que worker class name and are
  suffixed with the `run` method name.
- Events for HTTP requests performed by your application using HTTP.rb will appear
  in the event timeline of your application's performance actions, as well as in the
  'Slow queries' performance panel.
- To instrument Rack applications, AppSignal provides a Rack instrumentation middleware.
- Ensure the EventMiddleware and InstrumentationMiddleware are registered in the application
  middleware stack as early as possible.
- AppSignal activates Mongo Ruby Driver instrumentation automatically if it is detected
  in the project.
- This feature requires AppSignal for Ruby version 0.11.13 or higher.
- There is no performance monitoring for Rake tasks.
- When a Rake task is run on a container that starts to run this Rake task and shuts
  down when the Rake task exits, it is required to stop the AppSignal Ruby gem before
  the Rake process exits.
- This feature requires redis version 4.0.0 or higher.
- This feature requires redis-client version 0.14.0 or higher.
- By default, it's not possible to configure AppSignal from a Rails initializer, because
  AppSignal loads before your application's initializers.
- AppSignal integration for Rails works by tracking exceptions and performance in
  requests.
- Performance issues will be based on the duration of a request and create a timeline
  of events detailing which parts of the application took the longest.
- Puma may require additional configuration to load your application's secrets.
- If using `preload_app!`, configure AppSignal to report metrics correctly.
- Requires AppSignal for Ruby version 4.7.0 or higher.
- AppSignal supports Sequel automatically and no manual instrumentation is needed.
- When using the sequel-rails gem the instrumentation from the sequel-rails gem and
  AppSignal gem can conflict when running migrations.
- For Rake tasks running on short-lived hosts, it is required to stop the AppSignal
  Ruby gem before the Rake process exits.
- Instrumentation for Shoryuken is enabled automatically if the Shoryuken gem is detected
  on AppSignal start.
- Report errors on job discard requires AppSignal for Ruby version 3.9.0 or higher
  and Sidekiq version 5.1.0 or higher.
- Rails error reporting requires setup in the application.
- In version 2.11.0 of the Ruby gem, the `SidekiqProbe` constant was moved to its
  own module.
- Update to the new constant name `Appsignal::Probes::SidekiqProbe` to remove the
  warning.
- Uses OAuth2 with refresh token — requires setup of connected app in AppSignal
- Sinatra applications are officially supported. Instrumenting Sinatra applications
  requires some manual setup.
- Requires AppSignal for Ruby version 2.11.0 or higher for Active Job.
- Requires AppSignal for Ruby version 2.3.0 or higher for Action Cable.
- Backtrace cleaner allows customization of backtrace filtering.
- AppSignal provides many ways to provide more insights in your application by adding
  more instrumentation or tagging the data that appears in the UI at AppSignal.com.
- We have a configuration option to disable instrumentation for Sequel.
- Tools make it easier to install AppSignal in an application, send deploy notifications
  and diagnose any problems with the installation.
- Consult the maintenance policy per language we integrate with.
- We may drop support for some versions of programming languages and packages over
  time.
- This feature requires AppSignal for Ruby version 1.2.0 or higher.
- No manual installation is required if Shoryuken is part of a Rails app.
- Please follow the installation guide first, when adding a new application to AppSignal.
- Uses Push API key for authentication
- AppSignal for Ruby 4.0 is a major release that introduces multiple error support,
  amendable sample data, changes to how it instruments other gems, how custom instrumentation
  works, and the removal of previously deprecated modules.
- AppSignal will not start if loading the config/appsignal.yml file causes an error.
  Check the application output or the appsignal.log file for any warnings.
- Instrumenting Sinatra applications requires some manual setup.
- To ignore a specific Sinatra error, set the Sinatra.skip_appsignal_error flag in
  the request environment.
- This feature requires AppSignal for Ruby version 3.7.5 or higher.
- Uses Push API key for integration.
- Uses Push API key for configuration
- The AppSignal Ruby gem configuration is frozen after `Appsignal.start` is called.
- AppSignal will not start if loading the `config/appsignal.yml` file causes an error.
- AppSignal will not start if loading the config/appsignal.yml file causes an error.
- AppSignal for Ruby 4.0 introduces multiple error support and changes to instrumentation.
- AppSignal works with most popular Ruby frameworks and gems out-of-the-box such as
  Active Job, Capistrano, DataMapper, Delayed::Job, and others.
- The 3.x series of the Ruby gem will no longer support Ruby 1.9 and older versions.
- If an app starts encountering issues with the AppSignal for Ruby 3.x series, upgrade
  other APM and error reporting gems in the app.
- AppSignal works with most popular Ruby frameworks and gems out-of-the-box.
- Some might require some manual configuration steps.
- Configuration is required for the AppSignal Ruby gem to report data.
- For Rails apps, application name is automatically derived.
- Environment is detected automatically or can be set with an environment variable.
- Important, because without it the AppSignal Ruby gem won't know which application
  it's instrumenting or in which environment.
- Requires setup of environment variables for application name and push API key
- AppSignal can also be configured using system environment variables on the host
  the application AppSignal is monitoring.
- Configuration is essential for AppSignal Ruby gem to function correctly.
- Environment detection is automatic for supported frameworks.
- By default AppSignal tries to record as many exceptions (errors) as possible.
- Simply ignoring an error will silence notifications, but could potentially hide
  a bigger problem.
- Ignoring an error will silence notifications, but could potentially hide a bigger
  problem.
- AppSignal provides a single interface to report exceptions with Appsignal.report_error.
- Breadcrumbs are available since Ruby gem version 2.11.2.
- It's possible that AppSignal does not provide automatic integration for your framework
  of choice, or maybe you're using your own application setup.
- This feature requires AppSignal for Ruby version 3.11.0 or higher.
- It's possible to add exception handling to your code or even let AppSignal entirely
  ignore specific errors.
- Uses OAuth2 with refresh token
- Requires setup of connected app in AppSignal
- This feature is available since Ruby gem version 1.3 and only works for classes.
- Ruby 3.0 support for keyword arguments was added in Ruby gem 2.11.4.
- Event formatters are helpers classes to format event metadata for AppSignal transactions.
- No event formatter will be needed either, as AppSignal.instrument accepts the metadata
  to be set directly.
- Minutely probes are a mechanism to periodically send custom metrics to AppSignal.
- This feature requires AppSignal for Ruby version 2.9.0 or higher.
- Not always should a probe be added to the list of probes by default.
- AppSignal’s Elixir integration does not require any extra configuration for apps
  deployed through Distillery or Elixir 1.9’s releases feature, but the agent needs
  to be built on a machine with the same architecture as the machine you'll be hosting
  your application on.
- AppSignal for Elixir doesn't support cross-compilation at this time.
- For scripts running on short-lived hosts, it is required to stop the AppSignal Ruby
  gem before the script exits.
- Ensures the AppSignal agent has enough time to send the data to the AppSignal servers
- If there are no other reasons to use ActiveSupport::Notifications instrumentation
  than AppSignal instrumentation, we recommend using the Appsignal.instrument helper
  for instrumentation.
- Some objects like Contact may return nulls in deeply nested fields
- By default, the AppSignal Ruby gem enables probes for libraries that are detected
  for your app.
- Only start the probe if the BackgroundJobLibrary version is higher or equal to 1.0.0.
- AppSignal automatically tracks the queue time on Heroku.
- NGINX requires the correct headers for queue time tracking to work.
- Installing the AppSignal package in your Elixir application requires a couple of
  manual steps.
- If AppSignal does not support your use-case or if you find a problem with the documentation,
  don't hesitate to contact us.
- Without configuration, AppSignal will not send any data.
- This feature requires AppSignal for Elixir version 2.7.0 or higher.
- This feature requires Absinthe version 1.6 or higher.
- The LiveView Telemetry integration is available from AppSignal for Phoenix version
  2.1.0 onward.
- AppSignal’s Elixir integration does not require any extra configuration for apps
  deployed through Distillery or Elixir 1.9’s releases feature, but the agent needs
  to be built on a machine with the same architecture as the machine you'll be hosting
  your application on. AppSignal for Elixir doesn't support cross-compilation at this
  time.
- Support for custom namespaces was added in version 1.3.0 of the AppSignal for Elixir
  package.
- Using a NIF has inherent risks, but reduces potential issues due to a single code
  base.
- This feature requires AppSignal for Elixir version 2.5.1 or higher.
- This feature requires AppSignal for Elixir version 2.8.2 or higher.
- Minutely probe activated by default since AppSignal Elixir package 1.10.1
- This feature requires AppSignal for Elixir version 2.3.0 or higher.
- This feature requires Finch version 0.12.0 or higher.
- This feature requires AppSignal for Elixir version 2.5.0 or higher.
- This feature requires Oban version 2.0 or higher.
- make sure Telemetry appears before any other middleware!
- Configuration is important; without it, the AppSignal Elixir package won't know
  which application it's instrumenting or in which environment.
- The AppSignal instrumentation for Phoenix is part of a separate package, which depends
  on the primary `appsignal` package.
- AppSignal's LiveView Telemetry integration automatically instruments live view events.
- Manual instrumentation is available for LiveView actions.
- Exceptions in included Plugs are automatically caught by AppSignal.
- The dependency should be added to each nested application inside the umbrella.
- The configuration should be added to the umbrella's main configuration file.
- Requires AppSignal for Elixir version 2.5.1 or higher for certain features.
- Ecto preloads require AppSignal for Elixir version 2.8.2 or higher.
- In most applications some errors will get raised that aren't related to possible
  bugs in your code
- To avoid these errors from being raised as problems in AppSignal it's possible to
  add exception handling to your code
- By default the AppSignal Elixir package enables a probe for the ErlangVM.
- We recommend using AppSignal Elixir package 1.10.1 and up when using this feature.
- Finch is automatically instrumented, requiring no configuration.
- AppSignal for Elixir doesn't automatically instrument mix tasks, but you can set
  up manual instrumentation and error handling using custom instrumentation.
- A sleep of 35 seconds was added to the end of the Mix task. This is recommended
  for tasks that are run on one-off containers.
- Make sure Telemetry appears before any other middleware!
- Currently, AppSignal supports Phoenix, Plug, and pure Elixir apps.
- Use of APPSIGNAL_PUSH_API_KEY environment variable is recommended.
- Each nested application in an umbrella uses the main umbrella configuration.
- The AppSignal for Elixir package ships with a self diagnostic tool.
- This tool can be used to debug your AppSignal installation.
- This tool is available since version 0.11.0 of the AppSignal for Elixir package.
- AppSignal will not send any data to AppSignal.com without valid Push API Key, OTP
  app name, application name, application environment, and active set to true.
- Our package does not error or fail builds when the extension is not installed correctly.
- If you want the build to fail when our extension isn't installed correctly, you
  can run the check installation task in your CI.
- AppSignal was primarily designed for use on a server
- Don't panic! The @appsignal/javascript library does not require the agent and will
  work where @appsignal/nodejs doesn't currently work, however only error tracking
  is supported at the moment.
- If you run into any issues while upgrading your application, be sure to contact
  us for support.
- For the AppSignal integration to work correctly, the appsignal.cjs file must be
  required before any other dependencies.
- In most applications some errors will get raised that aren't related to possible
  bugs in your code, they just happen when your app gets into contact with the real
  world.
- In a small percentage of browsers, a Promise polyfill may be required to use this
  library.
- By default, the AppSignal Elixir package enables a probe for the ErlangVM.
- Requires API key for integration.
- 'The minimal required configuration needed by AppSignal for Node.js includes a valid
  Push API Key, an application name, an application environment (development/production/test),
  and the setting active: true.'
- Custom metrics allow you to track anything in your application, from newly registered
  users to database disk usage.
- Metrics only support numbers as valid values.
- Custom metric tags require specific AppSignal package versions.
- Command line tools make it easier to install AppSignal in an application, send deploy
  notifications and diagnose any problems with the installation.
- Be consistent with tagging for optimal tracking and graph legibility.
- Always use the same metric tags when reporting a metric.
- Use a limited range of values for metric tags to avoid overly complex graphs.
- The AppSignal for Elixir package ships with several command line tools.
- We do not recommend checking this key into version control (git/svn/mercurial/etc).
  Instead, use a APPSIGNAL_PUSH_API_KEY environment variable or a secrets management
  tool for your application.
- The diagnostic report outputs useful information to debug issues.
- This command line tool is useful when testing AppSignal on a system and validating
  the local configuration.
- It tests if the installation of AppSignal has succeeded and if the AppSignal agent
  is able to run on the machine's architecture and communicate with the AppSignal
  servers.
- AppSignal supports Python applications through OpenTelemetry.
- This feature requires AppSignal for Elixir version 2.15.3 or higher.
- Our package does not error or fail builds when the extension is not installed correctly.
  This behavior is by design.
- AppSignal package does not automatically instrument any libraries.
- By default, the AppSignal for Python integration will report the current application
  in the 'development' environment.
- The package supports pure JavaScript and TypeScript applications.
- AppSignal for Python integration will report the current application in the 'development'
  environment by default.
- Uses OpenTelemetry tracer objects for instrumentation
- Do not send Personal Identifiable Information (PII) to AppSignal
- Requires AppSignal for Python version 0.1.0 or higher.
- Requires Celery version 4.0 or higher.
- Requires setup of AppSignal account before use.
- This feature requires AppSignal for Python version 0.1.0 or higher.
- This feature requires Django version 1.10 or higher.
- This feature requires AppSignal for Python version 0.1.4 or higher.
- This feature requires FastAPI version 0.58 or higher.
- This feature requires Jinja2 version 2.7 or higher.
- AppSignal is fully compatible with TypeScript.
- This feature requires AppSignal for Python version 1.3.2 or higher.
- This feature requires mysql-connector-python version 8.0.0 or higher.
- The minimal required configuration includes an application name, a valid Push API
  Key, application environment, and active setting.
- This feature requires Appsignal for Python version 1.3.7 or higher.
- This feature requires Pika version 0.12.0 or higher.
- Custom metrics allow tracking specific application data over time.
- Do not install instrumentation packages when using SQLAlchemy as it will automatically
  instrument queries.
- Use a limited range of values for metric tags to avoid complex graphs.
- This feature requires Requests version 2.0 or higher.
- This feature requires AppSignal for Python version 1.3.1 or higher.
- Do not install the instrumentation packages for the underlying database adapter.
- AppSignal works with many popular Node.js frameworks and libraries out-of-the-box.
- ASGI support was added in version 0.1.4 of the AppSignal for Python package.
- AppSignal supports instrumentation for generic WSGI and ASGI web applications through
  OpenTelemetry.
- Includes custom instrumentation using OpenTelemetry tracer objects.
- AppSignal tries to record as many Python exceptions as possible.
- To avoid these errors from being raised as problems in AppSignal it's possible to
  add exception handling to your code or even let AppSignal completely ignore certain
  errors.
- AppSignal for Python integration will report the current application in the 'development'
  environment by default. You can use the `environment` configuration option to set
  a different environment.
- This feature requires AppSignal for Python version 1.2.0 or higher.
- Do not send Personal Identifiable Information (PII) to AppSignal.
- This feature requires Celery version 4.0 or higher.
- Create a Push API key on the 'Push and deploy' section of your App settings page.
- Integration recommended for better exception handling.
- Span objects cannot be nested nor can multiple Spans be passed to appsignal.send()
  at once.
- Hooks are applied in a plugin.
- Hooks can augment any outgoing Span with additional information.
- By default, no breadcrumbs are tracked, but it's really easy to track your own.
- Enhancing backtraces with sourcemaps requires each sample to be tagged with a `revision`
  of your application.
- Content Security Policy (CSP) is an added layer of security that helps to detect
  and mitigate certain types of attacks, including Cross Site Scripting (XSS) and
  data injection attacks.
- The plugin binds to the window.onerror and window.onunhandledrejection event handlers.
- The AppSignal for Python integration will automatically use this instrumentation
  when the corresponding package is installed.
- This feature requires Redis version 2.6 or higher.
- This feature requires Starlette version 0.13.0 or higher.
- This feature requires Preact version 10.0.0 or higher.
- Do not send Personal Identifiable Information (PII) to AppSignal. Filter PII (e.g.,
  names, emails) from logs and use an ID, hash, or pseudonymized identifier instead.
- For HIPAA-covered entities, more information about signing a Business Associate
  Agreement (BAA) can be found in our Business Add-Ons documentation.
- Supports up to 500k log lines per minute per app
- Log lines can be up to 10,000 characters, with any excess being truncated
- Deeply nested JSON payloads are not supported
- Retention will vary depending on your plan.
- We support up to 500k log lines per minute per app.
- Log lines can be up to 10,000 characters, with any excess being truncated.
- Deeply nested JSON payloads are not supported.
- For HIPAA-covered entities, more information about signing a Business Associate
  Agreement (BAA) can be found in the Business Add-Ons documentation.
- AppSignal specific attributes must be added to a span in order for it to be successfully
  parsed by AppSignal.
- To avoid these errors from being raised as problems, you can add exception handling.
- AppSignal Logging Triggers are currently only available to Beta Testers.
- A 'DebugLevel' of '2' activates always-on debug mode, while a level of '0' turns
  debug mode off.
- Minutely probe functions are ran asynchronously.
- Long-term Log Storage is a paid-for Business Add-On.
- AppSignal will continue to store your logs for 30 days.
- This feature requires AppSignal for Ruby version 4.3.0 or higher.
- This feature requires AppSignal for Ruby version 4.2.0 or higher.
- Create a Push API Key on the 'Push and deploy' section of your App settings page.
- Span cannot be nested and cannot be passed multiple spans to send at once.
- Hooks are applied from right to left, last added hooks are applied first.
- This feature requires AppSignal for Elixir version 2.6.0 or higher.
- This feature requires Elixir version 1.15 or higher.
- No breadcrumbs are tracked by default.
- Sourcemaps are a way to convert backtraces from minified or transpiled JavaScript
  files to their original representation in your source code.
- Content Security Policy (CSP) may prevent the error tracking library from sending
  data to the endpoint.
- An 'application' log source will be created automatically.
- The `@appsignal/plugin-window-events` plugin binds to the `window.onerror` and `window.onunhandledrejection`
  event handlers to catch any errors that are otherwise not caught elsewhere in your
  code.
- Do not send Personal Identifiable Information (PII) to AppSignal. Filter PII from
  logs and use an ID, hash, or pseudonymized identifier instead.
- You do not need to create a log source to send logs from the AppSignal for Java
  integration. An 'application' log source will be created automatically.
- Do not send Personal Identifiable Information (PII) to AppSignal. Filter PII from
  logs.
- You do not need to create a log source to send logs from the AppSignal for PHP integration.
  An 'application' log source will be created automatically.
- Integrations include React, Vue, Angular, Ember, Preact, and Stimulus
- Business Add-Ons are AppSignal features that are available for an additional fee.
- This feature is available in Ruby gem version 1.2 and newer. Enabled by default
  since version 1.3.
- This feature is available in Elixir package version 0.10.0 and newer. Enabled by
  default since version 0.10.0.
- 'This feature is available in Node.js: all package versions.'
- This feature is not available on macOS/OSX (darwin) and FreeBSD.
- Enabling NGINX metrics will open a server for NGINX to send metrics to.
- By default, this server is bound to localhost and listens on port 27649.
- 'This feature is available in these packages: Ruby: gem version `1.2` and newer.
  Enabled by default since version `1.3`. Elixir: package version `0.10.0` and newer.
  Enabled by default since version `0.10.0`. Node.js: all package versions. JavaScript
  for Front-end: none package versions.'
- 'This feature is not available on the following architectures: macOS/OSX (`darwin`),
  FreeBSD.'
- The AppSignal host metrics feature does not work reliably on Heroku as it doesn't
  directly expose runtime metrics for LXC containers in which their Dynos run.
- To get accurate metrics from your containers, container limits are required for
  your monitored containers.
- Our OpenTelemetry support is relatively new and we haven't tested it yet with all
  the different setups out there.
- Some features may not work with OpenTelemetry data yet.
- For HIPAA-covered entities, sign a Business Associate Agreement (BAA).
- The agent has been tested on Ubuntu LTS and Debian.
- Configuration file is located at /etc/appsignal-agent.conf.
- AppSignal standalone agent is available as a Docker image that can be run as a container
  in Docker (Compose) and Kubernetes infrastructure.
- AppSignal's powerful log filtering system allows you to quickly search and filter
  through your application logs using an intuitive query syntax.
- A `DebugLevel` of `2` activates always-on debug mode, while a level of `0` turns
  debug mode off.
- To apply the configuration changes, restart the RSyslog daemon process.
- The standalone AppSignal Agent runs a StatsD server over UDP on localhost port 8125
  by default.
- Make sure all requests to endpoints end with the .json extension
- All requests to AppSignal API endpoints require a personal API token given as an
  URL query parameter for authentication.
- Either provide the `action_name` or `kind` parameter.
- You can either specify the from and to values, or the timeframe value.
- Requires a personal API token given as an URL query parameter for authentication.
- This feature requires AppSignal Collector version 0.7.0 or higher.
- This feature requires Go version 1.21 or higher.
- All times are UTC
- You will need your app ID found in your app's settings screen.
- They don't modify our core features, and the experience of using AppSignal remains
  the same on all plans.
- This feature is available in Ruby gem version 1.2 and newer.
- This feature is available in Elixir package version 0.10.0 and newer.
- Dokku support is available in packages Ruby gem 3.0.13, Elixir package 2.2.0, Node.js
  package 2.0.0 and newer.
- Enabling NGINX metrics will open a server for NGINX to send metrics to. By default,
  this server is bound to localhost and listens on port 27649.
- Integration relies on the slack compatible webhook endpoint on Discord
- Metrics sent to AppSignal from NGINX server will create an automated dashboard.
- Applications are monitored by AppSignal.
- Every app needs to have four key configuration options set for AppSignal to report
  data for it.
- Some data is better understood if the graph is rendered in a different way.
- By default AppSignal gathers relevant data for errors and performance measurements
  to help you find the cause of the issue.
- You can configure AppSignal to gather more, or less, information than it does by
  default by tagging your transactions and configuring the request headers, parameter
  filtering, etc.
- For HIPAA-covered entities, sign a Business Associate Agreement (BAA) for compliance.
- The agent has been tested on Ubuntu LTS 14.04/16.04/18.04/20.04/22.04/24.04 and
  Debian 8/9/10/11/12.
- On Ubuntu 14.04 use `service appsignal-agent restart`
- On Centos/Redhat and Ubuntu 16.04 and up use `systemctl restart appsignal-agent`
- AppSignal offers various monitoring features including error tracking and performance
  monitoring.
- To monitor host metrics from the host machine which runs Docker containers, you
  need to install our Linux package on the host machine.
- If you're using Kubernetes, we recommend monitoring host metrics using our Kubernetes
  integration.
- AppSignal can send out notifications whenever a new incident, or new instances of
  an already existing incident, is detected.
- Make sure all requests to endpoints end with the .json extension.
- AppSignal supports tagging of requests as described in the tagging guide.
- Link templates can be defined on AppSignal.com per application.
- Asana is a personal integration set up per user.
- Use Geckoboard to build clear, effective data dashboards for your business that
  keep teams informed, motivated and aligned around your KPIs.
- This integration does not automatically create issues on GitLab, to prevent story-overload.
- Fill out the form and paste the webhook url in the 'webhook url' field.
- AppSignal can be integrated into Jira for the automatic ticketing of incidents.
- 'AppSignal requires four fields to be present in Jira: Labels, Environment, Summary,
  Description.'
- The Linear integration must be set up individually for each user in AppSignal who
  wishes to use it with their AppSignal apps.
- Adding the integration consists of two steps, one on Microsoft Teams and one on
  AppSignal.
- Our Discord integration relies on the slack compatible webhook endpoint on Discord
- OpsGenie is an alerting and on-call management solution that provides Dev & Ops
  teams with flexible schedule management, escalations and alerting via email, SMS,
  and mobile app notifications.
- Every app needs to have four key configuration options set for AppSignal to report
  data.
- The app name as it is reported and shown on AppSignal.com.
- The app environment as it is reported and shown on AppSignal.com.
- 'AppSignal provides three default namespaces: ''web'', ''background'', and ''frontend''.'
- AppSignal requires a Integration Key from PagerDuty to send error and performance
  notifications.
- Make sure that for Integrations 'Events API V2' is selected.
- AppSignal can send alert for a number of events.
- Configure when a notification is sent on this page.
- The Shortcut integration does not automatically create issues on Shortcut, to prevent
  story-overload.
- AppSignal notifications can be sent to Squadcast via webhooks.
- Backtrace links make every line to source code in your app link to your app's source
  code on your source code hosting platform of choice.
- Webhook verification token must be configured for security.
- To disable environment metadata, set the `send_environment_metadata` config option
  to `false`.
- Webhook verification token is used to validate that the webhook request is from
  AppSignal.
- Google Hangouts Chat is a global integration set up per App.
- Fill out the form and paste the webhook url from step one in the 'webhook ur' field.
- Check-ins BETA
- Microsoft Teams is a global integration set up per App.
- This integration does not automatically create issues on Shortcut, to prevent story-overload.
- AppSignal requires a `Integration Key` from PagerDuty to send error and performance
  notifications.
- Supports flexible schedule management, escalations and alerting via email, SMS,
  and mobile app notifications.
- OpsGenie provides alerting and on-call management solutions.
- You'll be returned to AppSignal after completing Linear's authorization flow.
- OpsGenie is an alerting and on-call management solution.
- AppSignal must be configured to communicate with your Jira project.
- Some objects may return nulls in deeply nested fields
- This integration was deprecated since October 1st, 2022, and permanently removed
  on July 16th, 2024.
- Head to the chat options and select 'Configure webhooks'.
- 'Fill out the fields, for ''Avatar url'' we suggest: https://appsignal.com/assets/appsignal-icon-square.png.'
- Integration relies on the slack compatible webhook endpoint on Discord.
- AppSignal runs exclusively on secure (SSL) connections and is hosted in a top tier
  data center.
- All payments are handled through Stripe. We do not store or log any credit card
  information on our servers.
- AppSignal consists of many different systems working together.
- The working directory is used for several things that the AppSignal agent needs
  to keep operating.
- AppSignal is eventually consistent.
- Select a channel to which AppSignal should post notifications about errors, performance
  measurements and other Anomaly detection alerts you have set up.
- API key is required for authentication.
- A deploy marker indicates a change in the deployed version of an application.
- Trello makes it easy to organize anything with anyone.
- Deploy markers indicate a change in the deployed version of an application.
- The `revision` config option is the recommended approach for reporting new deploys.
- To receive a webhook, go to the 'Notifications' tab the site's sidebar, click the
  'Add integration' and fill out the URL where you'd like to receive your webhook
  data.
- Custom markers can be created through the UI or API.
- To disable the feature, set the `send_environment_metadata` config option to `false`.
- To receive a webhook, go to the "Notifications" tab the site's sidebar, click the
  "Add integration" and fill out the URL where you'd like to receive your webhook
  data.
- AppSignal notifications can be sent to Squadcast via webhooks. Refer the official
  Squadcast support documentation for configuring these webhooks.
- Slack brings all your communication together in one place. It's real-time messaging,
  archiving and search for modern teams.
- Our Discord integration relies on the slack compatible webhook endpoint on Discord.
- It can take up to *90 seconds* for transaction and metrics data to appear.
- It takes *180 seconds* (3 minutes) for metrics graphs and Anomaly detection alerts
  to be created/updated.
- API key is necessary for authentication.
- Ideally we receive as little metadata for samples as possible, and only data that
  is needed to debug an exception or performance issue.
- AppSignal will automatically set the `revision` config option to the value of the
  `RENDER_GIT_COMMIT` system environment variable.
- The first method (`revision` config option) is our recommended approach, because
  it's the most reliable method and works better for applications with more than one
  host.
- Custom markers can be created through the UI on AppSignal.com or with requests to
  the API.
errors:
- '400: Validation error occurred'
- '404: No app exists for the given app name, environment and Push API key combination'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API key or token expiration'
- 'Invalid session data: Ensure that session data keys are correctly configured for
  filtering.'
- 'DNS timeouts: no data is being received by AppSignal.'
- 'INVALID_API_KEY: Check that the API key is correctly set.'
- 'RESOURCE_NOT_FOUND: Verify the endpoint and resource exist.'
- '401 Unauthorized: Check API key validity'
- '404 Not Found: Verify endpoint URL'
- Using dynamic values creates too many action names.
- '401 Unauthorized: Check API key or permissions.'
- '401 Unauthorized: Recheck API key or configuration'
- '401 Unauthorized: Check API key or app name'
- If an error is rescued in the app using rescue_from, AppSignal will not receive
  and track it.
- 'stack level too deep (SystemStackError): This can occur when incompatible instrumentation
  methods are used on the same Ruby methods.'
- '401 Unauthorized: Check API key.'
- '403 Forbidden: Check API key permissions.'
- 'INVALID_API_KEY: Check the API key provided'
- 'RATE_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Check your API key.'
- '403 Forbidden: Insufficient permissions for this action.'
- 'RecordNotFound: Could not find post'
- 'ActionController::InvalidAuthenticityToken: Invalid authenticity token'
- 'Hash::DisallowedType: Security exploit attempt'
- 'RangeError: Security exploit attempt'
- '404: Resource not found'
- '422: Unprocessable Entity'
- '403: Forbidden'
- '401 Unauthorized: Recheck API key or permissions'
- If using Oban version 2.3.1 or below, the information about the state of the job
  is not available.
- Exits with status code 1 if the extension installation was unsuccessful.
- '404 Not Found: Check endpoint path'
- Exits with status code `0` if the command has completed successfully.
- Exits with status code `1` if the command has completed with an error.
- Exits with status code 0 if the extension installation was successful.
- '401 Unauthorized: Check API key validity.'
- '401 Unauthorized: Invalid API key'
- '400 Bad Request: Check the request payload'
- 'RecordNotFound: Handle this in your application to avoid 404 errors.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- Cross-domain or eval script error detected, error ignored
- Content Security Policy may prevent sending data to the endpoint.
- Host metrics feature may not provide metrics limited to your Dynos.
- '401 Unauthorized: Recheck API key'
- 'Error installing agent: Check package repository configuration.'
- '401 Unauthorized: Recheck provided token'
- '401 Unauthorized: Recheck API token'
- AppSignal will show an error message on completion of setup if fields are missing
  and specify which ones must be added in Jira.
- '401 Unauthorized: Recheck the Integration Key'
- 'AppSignal requires four fields to be present in Jira: Labels, Environment, Summary,
  Description.'
- '401 Unauthorized: Check your Integration Key'
- 'AppSignal requires four fields to be present in Jira: Labels, Environment, Summary,
  Description'
- 'Integration not found: Verify the Integration Key used.'
- 'Unauthorized: Check API key permissions.'
- 'Error: No response was received from the URL you entered'
- 'Error: Missing required fields in Jira'
- Creating a deploy marker manually is a method only really useful for small applications
  that use one host.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - Consumer Key
  - Consumer Name
  - Public Key
  - read_user
  - api
client:
  base_url: https://www.appsignal.com
  auth:
    type: oauth2
source_metadata: null
