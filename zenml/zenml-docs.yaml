resources:
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
- name: artifacts
  endpoint:
    path: /artifacts
    method: GET
- name: run_templates
  endpoint:
    path: /run_templates
    method: GET
- name: step_runs
  endpoint:
    path: /step_runs
    method: GET
- name: schedules
  endpoint:
    path: /schedules
    method: GET
- name: builds
  endpoint:
    path: /builds
    method: GET
- name: code_repositories
  endpoint:
    path: /code_repositories
    method: GET
- name: stacks
  endpoint:
    path: /stacks
    method: GET
- name: stack_components
  endpoint:
    path: /stack_components
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: secrets
  endpoint:
    path: /secrets
    method: GET
- name: service_connectors
  endpoint:
    path: /service_connectors
    method: GET
- name: ML workflows
  endpoint:
    path: /api/workflows
    method: GET
- name: simple_ml_pipeline
  endpoint:
    path: /user-guides/starter-guide/create-an-ml-pipeline
    method: GET
    data_selector: pipeline
    params: {}
- name: simple_ml_pipeline
  endpoint:
    path: /api/simple_ml_pipeline
    method: POST
    data_selector: results
- name: training_data_loader
  endpoint:
    path: /user-guides/starter-guide/create-an-ml-pipeline
    method: POST
    data_selector: outputs
    params: {}
- name: svc_trainer
  endpoint:
    method: POST
    params:
      gamma: 0.001
- name: training_data_loader
  endpoint:
    method: GET
    params: {}
- name: artifacts
  endpoint:
    path: /artifacts
    method: GET
    data_selector: artifacts
    params: {}
- name: artifacts
  endpoint:
    path: /artifacts
    method: GET
    data_selector: artifacts
    params: {}
- name: artifact_versions
  endpoint:
    path: /artifacts/versions
    method: GET
    data_selector: versions
    params: {}
- name: ExternalArtifact
  endpoint:
    path: /external_artifact
    method: GET
    data_selector: records
    params: {}
- name: Client
  endpoint:
    path: /client
    method: GET
    data_selector: records
    params: {}
- name: artifact_metadata
  endpoint:
    path: /artifact/metadata
    method: GET
    data_selector: run_metadata
    params: {}
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: model_versions
  endpoint:
    path: /models/{model_name}/versions
    method: GET
    data_selector: versions
- name: stack
  endpoint:
    path: /stacks
    method: GET
    data_selector: stacks
    params: {}
- name: artifact_store
  endpoint:
    path: /artifact-stores
    method: GET
    data_selector: artifact_stores
    params: {}
- name: orchestrator
  endpoint:
    path: /orchestrators
    method: GET
    data_selector: orchestrators
    params: {}
- name: S3 Artifact Store
  endpoint:
    path: /register/s3
    method: POST
    data_selector: result
    params:
      path: s3://bucket-name
- name: GCS Artifact Store
  endpoint:
    path: /register/gcp
    method: POST
    data_selector: result
    params:
      path: gs://bucket-name
- name: Azure Artifact Store
  endpoint:
    path: /register/azure
    method: POST
    data_selector: result
    params:
      path: az://container-name
- name: cloud_connector
  endpoint:
    path: /cloud_connector
    method: POST
- name: artifact_store
  endpoint:
    path: /artifact_store
    method: POST
- name: container_registry
  endpoint:
    path: /container-registry
    method: POST
    data_selector: registry
    params:
      flavor: azure
      uri: <REGISTRY_NAME>.azurecr.io
- name: orchestrator
  endpoint:
    path: /orchestrator
    method: POST
    data_selector: orchestrator
    params:
      flavor: kubernetes
- name: stack
  endpoint:
    path: /stack
    method: POST
    data_selector: stack
    params:
      orchestrator: cloud_orchestrator
      artifact_store: cloud_artifact_store
      container_registry: cloud_container_registry
- name: training_pipeline
  endpoint:
    path: /training_rf.yaml
    method: GET
    data_selector: settings
    params: {}
- name: training_pipeline
  endpoint:
    path: /user-guides/starter-guide/create-an-ml-pipeline
    method: POST
    data_selector: records
    params: {}
- name: repository
  endpoint:
    path: /user/repos
    method: POST
    data_selector: repository
    params: {}
- name: e2e_batch
  endpoint:
    path: /api/v1/e2e_batch
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: retrieval_evaluation
  endpoint:
    path: /user-guides/llmops-guide/evaluation/retrieval
    method: GET
- name: generation_evaluation
  endpoint:
    path: /user-guides/llmops-guide/evaluation/generation
    method: GET
- name: evaluation_in_practice
  endpoint:
    path: /user-guides/llmops-guide/evaluation/evaluation-in-practice
    method: GET
- name: daily_data_pipeline
  endpoint:
    path: /user-guides/tutorial/managing-scheduled-pipelines
    method: GET
    data_selector: pipeline
    params: {}
- name: daily_data_pipeline
  endpoint:
    path: /api/schedules
    method: POST
    data_selector: schedule
    params:
      name: daily-data-processing
      cron_expression: 0 9 * * *
- name: schedule
  endpoint:
    path: /schedules
    method: GET
    data_selector: schedules
    params: {}
- name: daily-data-processing
  endpoint:
    path: /api/v1/schedules/daily-data-processing
    method: GET
    data_selector: schedules
    params:
      cron_expression: 0 9 * * *
- name: daily-data-processing
  endpoint:
    path: /user-guides/tutorial/managing-scheduled-pipelines
    method: GET
    data_selector: schedules
    params: {}
- name: daily-data-processing
  endpoint:
    path: /api/schedule
    method: POST
    data_selector: schedules
    params:
      cron_expression: 0 9 * * *
- name: daily_data_pipeline
  endpoint:
    path: /user-guides/tutorial/managing-scheduled-pipelines
    method: GET
    data_selector: schedules
    params: {}
- name: schedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: records
- name: daily_data_pipeline
  endpoint:
    path: /api/v1/pipelines/daily_data_pipeline
    method: POST
    data_selector: pipeline_run
    params: {}
- name: daily_data_pipeline
  endpoint:
    path: /zenml/pipeline/daily_data_pipeline
    method: POST
    data_selector: results
    params:
      cron_expression: 0 9 * * *
- name: schedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: schedules
    params: {}
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: runs
    params: {}
- name: schedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: schedules
    params: {}
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: runs
    params: {}
- name: schedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: schedules
    params: {}
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: runs
    params: {}
- name: training_pipeline
  endpoint:
    path: /api/v1/pipelines/training_pipeline
    method: POST
    data_selector: data
    params: {}
- name: pipelines
  endpoint:
    path: /api/v1/pipelines
    method: GET
    data_selector: pipelines
    params:
      name: training_pipeline
- name: run_templates
  endpoint:
    path: /api/v1/run_templates
    method: GET
    data_selector: run_templates
    params:
      pipeline_id: <PIPELINE_ID>
- name: trigger_pipeline
  endpoint:
    path: /api/v1/run_templates/<TEMPLATE_ID>/runs
    method: POST
    data_selector: runs
    params: {}
- name: training_pipeline
  endpoint:
    path: /trigger/training_pipeline
    method: POST
    data_selector: result
- name: pipelines
  endpoint:
    path: /api/v1/pipelines
    method: GET
    data_selector: pipelines
- name: run_templates
  endpoint:
    path: /api/v1/run_templates
    method: GET
    data_selector: run_templates
- name: trigger_runs
  endpoint:
    path: /api/v1/run_templates/<TEMPLATE_ID>/runs
    method: POST
    data_selector: run
- name: training_pipeline
  endpoint:
    path: /api/pipelines/training_pipeline
    method: POST
    data_selector: result
    params: {}
- name: training_pipeline
  endpoint:
    path: /api/v1/pipelines/training_pipeline
    method: GET
- name: pipelines
  endpoint:
    path: /api/v1/pipelines
    method: GET
    data_selector: records
- name: run_templates
  endpoint:
    path: /api/v1/run_templates
    method: GET
    data_selector: records
- name: trigger_pipeline
  endpoint:
    path: /api/v1/run_templates/<TEMPLATE_ID>/runs
    method: POST
    data_selector: records
- name: training_pipeline
  endpoint:
    path: /api/pipelines/training_pipeline
    method: POST
    data_selector: data
    params: {}
- name: pipelines
  endpoint:
    path: /api/v1/pipelines
    method: GET
    data_selector: pipelines
    params:
      name: training_pipeline
- name: run_templates
  endpoint:
    path: /api/v1/run_templates
    method: GET
    data_selector: run_templates
    params:
      pipeline_id: <PIPELINE_ID>
- name: pipelines
  endpoint:
    path: /api/v1/pipelines
    method: GET
    data_selector: records
- name: run_templates
  endpoint:
    path: /api/v1/run_templates
    method: GET
    data_selector: records
- name: trigger_pipeline
  endpoint:
    path: /api/v1/run_templates/<TEMPLATE_ID>/runs
    method: POST
    data_selector: results
- name: run_template
  endpoint:
    path: /run_templates
    method: GET
    data_selector: templates
- name: pipeline
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
- name: pipelines
  endpoint:
    path: /api/v1/pipelines
    method: GET
    data_selector: pipelines
- name: run_templates
  endpoint:
    path: /api/v1/run_templates
    method: GET
    data_selector: run_templates
- name: trigger_pipeline
  endpoint:
    path: /api/v1/run_templates/<TEMPLATE_ID>/runs
    method: POST
    data_selector: run
- name: pipelines
  endpoint:
    path: /api/v1/pipelines
    method: GET
    data_selector: pipelines
- name: run_templates
  endpoint:
    path: /api/v1/run_templates
    method: GET
    data_selector: run_templates
- name: run
  endpoint:
    path: /api/v1/run_templates/<TEMPLATE_ID>/runs
    method: POST
    data_selector: runs
- name: trigger_pipeline
  endpoint:
    path: /trigger
    method: POST
- name: training_pipeline
  endpoint:
    path: /api/v1/pipelines/training_pipeline
    method: POST
    data_selector: data
    params: {}
- name: pipeline_run_template
  endpoint:
    path: /api/v1/run_templates
    method: POST
    data_selector: data
    params: {}
- name: trigger_pipeline
  endpoint:
    path: /trigger
    method: POST
    data_selector: null
    params: {}
- name: pipelines
  endpoint:
    path: /api/v1/pipelines
    method: GET
    data_selector: records
- name: run_templates
  endpoint:
    path: /api/v1/run_templates
    method: GET
    data_selector: records
- name: run_template_runs
  endpoint:
    path: /api/v1/run_templates/<TEMPLATE_ID>/runs
    method: POST
    data_selector: results
- name: trigger_pipeline
  endpoint:
    path: /trigger
    method: POST
- name: training_pipeline
  endpoint:
    path: /api/pipelines/training_pipeline
    method: POST
    data_selector: data
    params: {}
- name: run_template
  endpoint:
    path: /api/run_templates
    method: POST
    data_selector: data
- name: pipeline_run
  endpoint:
    path: /api/pipeline_runs
    method: POST
    data_selector: data
- name: pipelines
  endpoint:
    path: /api/v1/pipelines
    method: GET
    data_selector: pipelines
- name: run_templates
  endpoint:
    path: /api/v1/run_templates
    method: GET
    data_selector: templates
- name: trigger_pipeline
  endpoint:
    path: /trigger
    method: POST
    data_selector: status
- name: pipeline
  endpoint:
    path: /api/v1/pipelines
    method: GET
    data_selector: pipelines
- name: run_templates
  endpoint:
    path: /api/v1/run_templates
    method: GET
    data_selector: templates
- name: trigger_pipeline
  endpoint:
    path: /trigger
    method: POST
    data_selector: status
- name: training_pipeline
  endpoint:
    path: /trigger-pipeline
    method: POST
    data_selector: result
    params: {}
- name: run_template
  endpoint:
    path: /api/run_templates
    method: GET
    data_selector: templates
- name: pipeline
  endpoint:
    path: /api/pipelines
    method: GET
    data_selector: pipelines
- name: trigger_pipeline
  endpoint:
    path: /trigger
    method: POST
    data_selector: null
    params: {}
- name: pipelines
  endpoint:
    path: /api/v1/pipelines
    method: GET
    data_selector: records
- name: run_templates
  endpoint:
    path: /api/v1/run_templates
    method: GET
    data_selector: records
- name: trigger_pipeline
  endpoint:
    path: /trigger
    method: POST
    data_selector: status
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
- name: pipeline_runs
  endpoint:
    path: /pipelines/{pipeline_id}/runs
    method: GET
    data_selector: runs
- name: training_pipeline
  endpoint:
    path: /pipelines/training_pipeline
    method: POST
    data_selector: run
    params: {}
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: runs
- name: pipelines
  endpoint:
    path: /api/v1/pipelines
    method: GET
    data_selector: pipelines
- name: run_templates
  endpoint:
    path: /api/v1/run_templates
    method: GET
    data_selector: templates
- name: trigger_pipeline
  endpoint:
    path: /trigger
    method: POST
    data_selector: status
- name: pipeline
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: runs
- name: pipeline_trigger
  endpoint:
    path: /trigger
    method: POST
    data_selector: null
    params: {}
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: runs
- name: hp_tuning_pipeline
  endpoint:
    path: /user-guides/tutorial/hyper-parameter-tuning
    method: GET
    data_selector: pipeline
    params: {}
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
    params: {}
- name: pipeline_runs
  endpoint:
    path: /pipelines/{pipeline_id}/runs
    method: GET
    data_selector: runs
    params: {}
- name: artifact
  endpoint:
    path: /get_artifact
    method: GET
    data_selector: versions
    params: {}
- name: pipeline_run
  endpoint:
    path: /get_pipeline_run
    method: GET
    data_selector: current_run
    params: {}
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: runs
- name: pipeline_run
  endpoint:
    path: /pipeline_runs/{run_id}
    method: GET
    data_selector: run
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: runs
- name: output_artifacts
  endpoint:
    path: /outputs
    method: GET
    data_selector: outputs
    params: {}
- name: input_artifacts
  endpoint:
    path: /inputs
    method: GET
    data_selector: inputs
    params: {}
- name: fetch_artifacts
  endpoint:
    path: /artifacts/{artifact_name}
    method: GET
    data_selector: artifact
    params: {}
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: runs
- name: artifact_metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: run_metadata
- name: pipeline_run
  endpoint:
    path: /pipeline/runs
    method: GET
    data_selector: pipeline_runs
- name: pipeline
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: runs
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
    params: {}
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: runs
    params: {}
- name: output_artifacts
  endpoint:
    path: /outputs
    method: GET
    data_selector: outputs
    params: {}
- name: input_artifacts
  endpoint:
    path: /inputs
    method: GET
    data_selector: inputs
    params: {}
- name: training_step
  endpoint:
    path: /user-guides/tutorial/train-with-gpus
    method: GET
    data_selector: resources
    params: {}
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
    params: {}
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: runs
    params: {}
- name: outputs
  endpoint:
    path: /outputs
    method: GET
    data_selector: outputs
    params: {}
- name: inputs
  endpoint:
    path: /inputs
    method: GET
    data_selector: inputs
    params: {}
- name: CSVDataset
  endpoint:
    path: /csv
    method: GET
    data_selector: data
    params: {}
- name: BigQueryDataset
  endpoint:
    path: /bigquery
    method: GET
    data_selector: data
    params: {}
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
    params: {}
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: runs
    params: {}
- name: pipeline
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
    params: {}
- name: pipeline_run
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: runs
    params: {}
- name: artifact
  endpoint:
    path: /get_artifact
    method: GET
    data_selector: output
    params: {}
- name: pipeline_run
  endpoint:
    path: /get_pipeline_run
    method: GET
    data_selector: run
    params: {}
- name: chunked_csv
  endpoint:
    path: /chunked/csv
    method: GET
    data_selector: data
    params: {}
- name: big_query
  endpoint:
    path: /bigquery/data
    method: GET
    data_selector: data
    params: {}
- name: dask_dataframe
  endpoint:
    path: /dask/dataframe
    method: GET
    data_selector: data
    params: {}
- name: spark_data
  endpoint:
    path: /spark/data
    method: GET
    data_selector: data
    params: {}
- name: ray_data
  endpoint:
    path: /ray/data
    method: GET
    data_selector: data
    params: {}
- name: CSVDataset
  endpoint:
    path: /api/csv_dataset
    method: GET
    data_selector: data
    params: {}
- name: BigQueryDataset
  endpoint:
    path: /api/bigquery_dataset
    method: GET
    data_selector: data
    params: {}
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: pipeline
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
    params: {}
- name: metadata_logging
  endpoint:
    path: /user-guides/best-practices/quick-wins#id-1-log-rich-metadata-on-every-run
    method: GET
    data_selector: metadata
    params: {}
- name: experiment_comparison
  endpoint:
    path: /user-guides/best-practices/quick-wins#id-2-activate-the-experiment-comparison-view-zenml-pro
    method: GET
    data_selector: experiments
    params: {}
- name: autologging
  endpoint:
    path: /user-guides/best-practices/quick-wins#id-3-drop-in-experiment-tracker-autologging
    method: GET
    data_selector: autologging
    params: {}
- name: alerter_notifications
  endpoint:
    path: /user-guides/best-practices/quick-wins#id-4-instant-alerter-notifications-for-successesfailures
    method: GET
    data_selector: alerters
    params: {}
- name: fraud_detection_pipeline
  endpoint:
    path: /fraud_detection_pipeline
    method: POST
    data_selector: pipeline
    params:
      tags:
      - fraud-detection
      - training
      - development
- name: fraud_detection_pipeline
  endpoint:
    path: /api/pipelines/fraud_detection
    method: POST
    data_selector: pipeline_runs
    params:
      tags:
      - fraud-detection
      - training
      - development
- name: slack_alerter
  endpoint:
    path: /zenml/alerter/slack
    method: POST
    data_selector: response.data
    params: {}
- name: sagemaker_orchestrator
  endpoint:
    path: /zenml/orchestrator/sagemaker
    method: POST
    data_selector: response.data
    params:
      use_warm_pools: 'True'
- name: vertex_step_operator
  endpoint:
    path: /zenml/step-operator/vertex
    method: POST
    data_selector: response.data
    params:
      persistent_resource_id: my-resource-id
- name: secret_management
  endpoint:
    path: /zenml/secret
    method: POST
    data_selector: response.data
    params: {}
- name: docker_orchestrator
  endpoint:
    path: /zenml/orchestrator/local_docker
    method: POST
    data_selector: response.data
    params: {}
- name: html_report
  endpoint:
    path: /zenml/report/html
    method: POST
    data_selector: response.data
    params: {}
- name: model_control_plane
  endpoint:
    path: /zenml/model
    method: POST
    data_selector: response.data
    params: {}
- name: pipeline_runs
  endpoint:
    path: /api/pipeline_runs
    method: GET
    data_selector: items
- name: models
  endpoint:
    path: /api/models
    method: GET
    data_selector: items
- name: artifacts
  endpoint:
    path: /api/artifacts
    method: GET
    data_selector: items
- name: custom_flavors
  endpoint:
    path: /custom/flavors
    method: GET
    data_selector: records
- name: custom_steps
  endpoint:
    path: /custom/steps
    method: GET
    data_selector: records
- name: custom_materializers
  endpoint:
    path: /custom/materializers
    method: GET
    data_selector: records
- name: shared_private_wheels
  endpoint:
    path: /shared/private/wheels
    method: GET
    data_selector: records
- name: docker_settings
  endpoint:
    path: /docker/settings
    method: GET
    data_selector: records
- name: fraud_detection_pipeline
  endpoint:
    path: /pipelines/fraud_detection_pipeline
    method: POST
    data_selector: pipeline
    params:
      tags:
      - fraud-detection
      - training
      - development
- name: pipelines
  endpoint:
    path: /api/pipelines
    method: GET
    data_selector: data
    params: {}
- name: artifacts
  endpoint:
    path: /api/artifacts
    method: GET
    data_selector: data
    params: {}
- name: models
  endpoint:
    path: /api/models
    method: GET
    data_selector: data
    params: {}
- name: fraud_detection_pipeline
  endpoint:
    path: /fraud_detection_pipeline
    method: POST
    data_selector: pipeline_runs
    params:
      tags:
      - fraud-detection
      - training
      - development
- name: fraud_detection_pipeline
  endpoint:
    path: /pipelines/fraud_detection
    method: POST
    data_selector: pipeline_run
    params: {}
- name: fraud_detection_pipeline
  endpoint:
    path: /pipelines/fraud_detection
    method: POST
    data_selector: pipeline_runs
    params: {}
- name: fraud_detection_pipeline
  endpoint:
    path: /pipelines/fraud_detection
    method: POST
    data_selector: pipeline_runs
    params:
      tags:
      - fraud-detection
      - training
      - development
- name: pipeline_runs
  endpoint:
    path: /api/pipelines/runs
    method: GET
    data_selector: items
- name: artifacts
  endpoint:
    path: /api/artifacts
    method: GET
    data_selector: items
- name: models
  endpoint:
    path: /api/models
    method: GET
    data_selector: items
- name: pipeline_runs
  endpoint:
    path: /api/pipeline_runs
    method: GET
    data_selector: items
    params: {}
- name: artifacts
  endpoint:
    path: /api/artifacts
    method: GET
    data_selector: items
    params: {}
- name: models
  endpoint:
    path: /api/models
    method: GET
    data_selector: items
    params: {}
- name: base_stack
  endpoint:
    path: /stacks/base
    method: POST
    data_selector: stack
    params: {}
- name: training_stack
  endpoint:
    path: /stacks/training
    method: POST
    data_selector: stack
    params: {}
- name: fraud_detection_pipeline
  endpoint:
    path: /pipelines/fraud_detection
    method: POST
    data_selector: pipeline_runs
    params: {}
- name: model_training_pipeline
  endpoint:
    path: /pipelines/model_training
    method: POST
    data_selector: pipeline_runs
    params: {}
- name: infrastructure
  endpoint:
    path: terraform/infrastructure
    method: GET
- name: state_management
  endpoint:
    path: terraform/state
    method: GET
- name: starter_template
  endpoint:
    path: /template/starter
    method: GET
    data_selector: records
- name: e2e_training_template
  endpoint:
    path: /template/e2e_batch
    method: GET
    data_selector: records
- name: nlp_training_template
  endpoint:
    path: /template/nlp
    method: GET
    data_selector: records
- name: project_management
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
    params: {}
- name: stack_visualization
  endpoint:
    path: /api/stacks
    method: GET
    data_selector: stacks
    params: {}
- name: base_stack
  endpoint:
    path: /stacks/base
    method: GET
    data_selector: stacks
    params: {}
- name: training_stack
  endpoint:
    path: /stacks/training
    method: GET
    data_selector: stacks
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
- name: stacks
  endpoint:
    path: /api/v1/stacks
    method: GET
    data_selector: data
- name: pipelines
  endpoint:
    path: /api/v1/pipelines
    method: GET
    data_selector: data
- name: pipeline_runs
  endpoint:
    path: /api/v1/pipeline_runs
    method: GET
    data_selector: data
- name: pipeline_steps
  endpoint:
    path: /api/v1/pipeline_steps
    method: GET
    data_selector: data
- name: services
  endpoint:
    path: /api/v1/services
    method: GET
    data_selector: data
- name: stack_components
  endpoint:
    path: /api/v1/stack_components
    method: GET
    data_selector: data
- name: flavors
  endpoint:
    path: /api/v1/flavors
    method: GET
    data_selector: data
- name: pipeline_run_templates
  endpoint:
    path: /api/v1/pipeline_run_templates
    method: GET
    data_selector: data
- name: schedules
  endpoint:
    path: /api/v1/schedules
    method: GET
    data_selector: data
- name: artifacts
  endpoint:
    path: /api/v1/artifacts
    method: GET
    data_selector: data
- name: service_connectors
  endpoint:
    path: /api/v1/service_connectors
    method: GET
    data_selector: data
- name: step_code
  endpoint:
    path: /api/v1/step_code
    method: GET
    data_selector: data
- name: step_logs
  endpoint:
    path: /api/v1/step_logs
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: document_analysis
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
- name: document_analysis
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
- name: zenml_server
  endpoint:
    path: /zenml/server
    method: GET
    data_selector: records
- name: zenml
  endpoint:
    path: /zenml
    method: GET
    data_selector: records
    params: {}
- name: ingress
  endpoint:
    path: /zenml
    method: GET
    data_selector: records
    params: {}
- name: secretsStore
  endpoint:
    path: /zenml/secretsStore
    method: GET
    data_selector: secrets
    params: {}
- name: backupSecretsStore
  endpoint:
    path: /zenml/backupSecretsStore
    method: GET
    data_selector: backups
    params: {}
- name: azure
  endpoint:
    path: /secrets/azure
    method: GET
- name: hashicorp
  endpoint:
    path: /secrets/hashicorp
    method: GET
- name: custom
  endpoint:
    path: /secrets/custom
    method: GET
- name: zenml
  endpoint:
    path: /zenml
    method: GET
- name: zenml
  endpoint:
    path: /zenml
    method: GET
    data_selector: records
    params: {}
- name: zenml
  endpoint:
    path: /zenml
    method: GET
- name: secrets_store
  endpoint:
    path: /zenml/secrets_store
    method: GET
- name: database
  endpoint:
    path: /zenml/database
    method: GET
- name: zenml_server
  endpoint:
    path: /api/zenml
    method: GET
- name: secretsStore
  endpoint:
    path: /secrets/store
    method: GET
    data_selector: records
- name: backupSecretsStore
  endpoint:
    path: /backup/secrets/store
    method: GET
    data_selector: records
- name: zenml
  endpoint:
    path: /zenml
    method: GET
    data_selector: records
    params: {}
- name: secretsStore
  endpoint:
    path: /zenml/secretsStore
    method: GET
- name: backupSecretsStore
  endpoint:
    path: /zenml/backupSecretsStore
    method: GET
- name: database
  endpoint:
    path: /zenml/database
    method: GET
- name: secretsStore
  endpoint:
    path: /zenml/secrets
    method: GET
    data_selector: records
- name: database
  endpoint:
    path: /zenml/database
    method: GET
    data_selector: records
- name: database
  endpoint:
    path: /services/data/vXX.X/sobjects/Database
    method: GET
    data_selector: records
    params: {}
- name: secrets_manager
  endpoint:
    path: /services/data/vXX.X/sobjects/SecretsManager
    method: GET
    data_selector: records
    params: {}
- name: secrets_store
  endpoint:
    path: /zenml/?(.*)
    method: GET
- name: zenml
  endpoint:
    path: /zenml
    method: GET
    data_selector: records
    params: {}
- name: secretsStore
  endpoint:
    path: /zenml/secretsStore
    method: POST
    data_selector: store
    params: {}
- name: secrets_store
  endpoint:
    path: /zenml/secrets
    method: GET
    data_selector: records
- name: zenml
  endpoint:
    path: /zenml
    method: GET
- name: secrets_store
  endpoint:
    path: /zenml/secrets
    method: GET
    data_selector: records
- name: secrets_store
  endpoint:
    path: /zenml/secrets_store
    method: GET
    data_selector: records
- name: secretsStore
  endpoint:
    path: /zenml/secretsStore
    method: GET
    data_selector: records
    params: {}
- name: zenml
  endpoint:
    path: /zenml
    method: GET
    data_selector: records
    params: {}
- name: secretsStore
  endpoint:
    path: /zenml/secrets-store
    method: GET
    data_selector: records
- name: database
  endpoint:
    path: /zenml/database
    method: GET
    data_selector: records
- name: zenml_server
  endpoint:
    path: /zenml
    method: GET
    data_selector: records
    params: {}
- name: secrets_store
  endpoint:
    path: /zenml/secretsStore
    method: GET
- name: database
  endpoint:
    path: /zenml/database
    method: GET
- name: secrets_store
  endpoint:
    path: /zenml/secrets-store
    method: GET
    data_selector: records
- name: database
  endpoint:
    path: /zenml/database
    method: GET
    data_selector: records
- name: zenml
  endpoint:
    path: /zenml
    method: GET
    data_selector: records
    params: {}
- name: zenml
  endpoint:
    path: /
    method: GET
- name: secretsStore
  endpoint:
    path: /zenml/secretsStore
    method: GET
- name: secrets_store
  endpoint:
    path: /zenml/secretsStore
    method: GET
    data_selector: records
- name: database
  endpoint:
    path: /zenml/database
    method: GET
    data_selector: records
- name: zenml
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: secretsStore
  endpoint:
    path: /secrets/store
    method: GET
    data_selector: records
- name: zenml
  endpoint:
    path: /zenml
    method: GET
    data_selector: records
    params: {}
- name: secrets_store
  endpoint:
    path: /secrets/store
    method: POST
    data_selector: store
    params: {}
- name: steps
  endpoint:
    path: /api/steps
    method: GET
    data_selector: records
    params: {}
- name: pipelines
  endpoint:
    path: /api/pipelines
    method: GET
    data_selector: records
    params: {}
- name: simple_ml_pipeline
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: train_model
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: load_data
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: train_model
  endpoint:
    path: /train_model
    method: POST
    data_selector: output
    params:
      resources:
        gpu_count: 1
        memory: 2GB
- name: simple_ml_pipeline
  endpoint:
    path: /simple_ml_pipeline
    method: POST
    data_selector: output
    params:
      resources:
        cpu_count: 2
        memory: 1GB
- name: step
  endpoint:
    path: /steps
    method: GET
    data_selector: records
- name: pipeline
  endpoint:
    path: /pipelines
    method: GET
    data_selector: records
- name: get_data
  endpoint:
    path: /get_data
    method: GET
    data_selector: records
    params: {}
- name: process_data
  endpoint:
    path: /process_data
    method: POST
    data_selector: records
    params: {}
- name: train_and_evaluate
  endpoint:
    path: /train_and_evaluate
    method: POST
    data_selector: records
    params: {}
- name: scheduling
  endpoint:
    path: /scheduling
    method: GET
    data_selector: schedules
    params: {}
- name: step
  endpoint:
    path: /steps
    method: GET
    data_selector: steps
- name: pipeline
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
- name: train_model
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      resources:
        gpu_count: 1
        memory: 2GB
- name: simple_ml_pipeline
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      resources:
        cpu_count: 2
        memory: 1GB
- name: chunk_processing_pipeline
  endpoint:
    path: /trigger_chunk_processing
    method: POST
- name: scheduling
  endpoint:
    path: /scheduling
    method: GET
    data_selector: schedules
    params: {}
- name: chunk_processing_pipeline
  endpoint:
    path: /pipelines/chunk_processing_pipeline
    method: POST
    data_selector: results
    params: {}
- name: fan_out_fan_in_pipeline
  endpoint:
    path: /pipelines/fan_out_fan_in_pipeline
    method: POST
    data_selector: results
    params: {}
- name: steps
  endpoint:
    path: /steps
    method: GET
    data_selector: steps
- name: process_chunk
  endpoint:
    method: POST
    data_selector: output
- name: fan_out_fan_in_pipeline
  endpoint:
    method: POST
    data_selector: results
- name: chunk_processing_pipeline
  endpoint:
    path: /pipelines/chunk_processing_pipeline
    method: POST
    data_selector: results
- name: fan_out_fan_in_pipeline
  endpoint:
    path: /pipelines/fan_out_fan_in_pipeline
    method: POST
    data_selector: results
- name: train_model
  endpoint:
    path: /api/train_model
    method: POST
- name: train_model
  endpoint:
    path: /train_model
    method: GET
    data_selector: parameters
    params: {}
- name: preprocessing
  endpoint:
    path: /preprocessing
    method: GET
    data_selector: parameters
    params: {}
- name: create_data
  endpoint:
    path: /create_data
    method: POST
    data_selector: data
    params: {}
- name: process_data
  endpoint:
    path: /process_data
    method: POST
    data_selector: data
    params: {}
- name: create_prompt_template
  endpoint:
    path: /create_prompt_template
    method: POST
    data_selector: template
    params: {}
- name: test_agent_response
  endpoint:
    path: /test_agent_response
    method: POST
    data_selector: response
    params: {}
- name: execution_control
  endpoint:
    path: /execution/control
    method: GET
    data_selector: data
    params: {}
- name: caching
  endpoint:
    path: /caching
    method: GET
    data_selector: data
    params: {}
- name: individual_steps
  endpoint:
    path: /individual/steps
    method: GET
    data_selector: data
    params: {}
- name: asynchronous_execution
  endpoint:
    path: /asynchronous/execution
    method: GET
    data_selector: data
    params: {}
- name: step_execution_order
  endpoint:
    path: /step/execution/order
    method: GET
    data_selector: data
    params: {}
- name: execution_modes
  endpoint:
    path: /execution/modes
    method: GET
    data_selector: data
    params: {}
- name: data_output_management
  endpoint:
    path: /data/output/management
    method: GET
    data_selector: data
    params: {}
- name: type_annotations
  endpoint:
    path: /type/annotations
    method: GET
    data_selector: data
    params: {}
- name: step_output_names
  endpoint:
    path: /step/output/names
    method: GET
    data_selector: data
    params: {}
- name: pipeline_composition
  endpoint:
    path: /pipeline/composition
    method: GET
    data_selector: data
    params: {}
- name: fan_out_fan_in
  endpoint:
    path: /fan/out/fan/in
    method: GET
    data_selector: data
    params: {}
- name: dynamic_fan_out_fan_in
  endpoint:
    path: /dynamic/fan/out/fan/in
    method: GET
    data_selector: data
    params: {}
- name: artifacts
  endpoint:
    path: /artifacts
    method: GET
    data_selector: records
    params: {}
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: records
    params: {}
- name: steps
  endpoint:
    path: /steps
    method: GET
    data_selector: steps
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
- name: artifacts
  endpoint:
    path: /api/artifacts
    method: GET
    data_selector: records
    params: {}
- name: artifacts
  endpoint:
    path: /artifacts
    method: GET
    data_selector: artifacts
    params: {}
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
    params: {}
- name: my_model_artifact
  endpoint:
    path: /register_artifact
    method: POST
    data_selector: artifact
    params: {}
- name: lightning_checkpoints
  endpoint:
    path: /register_artifact
    method: POST
    data_selector: artifact
    params: {}
- name: artifact
  endpoint:
    path: /register_artifact
    method: POST
    data_selector: result
- name: materializers
  endpoint:
    path: /materializers
    method: GET
    data_selector: materializers
- name: materializers
  endpoint:
    path: /api/materializers
    method: GET
    data_selector: materializers
    params: {}
- name: unmaterialized_artifact
  endpoint:
    path: /zenml/artifacts/unmaterialized_artifact
    method: GET
    data_selector: artifacts
    params: {}
- name: custom_materializer
  endpoint:
    path: /zenml/materializers/custom
    method: POST
    data_selector: materializers
    params: {}
- name: artifacts
  endpoint:
    path: /artifacts
    method: GET
    data_selector: artifacts
    params: {}
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
    params: {}
- name: artifacts
  endpoint:
    path: /artifacts
    method: GET
    data_selector: records
- name: stacks
  endpoint:
    path: /stacks
    method: GET
- name: model_artifact
  endpoint:
    path: /register_artifact
    method: POST
    data_selector: artifact
    params:
      folder_or_file_uri: existing_file
      name: my_model_artifact
- name: lightning_checkpoints
  endpoint:
    path: /register_artifact
    method: POST
    data_selector: artifact
    params:
      folder_or_file_uri: checkpoint_dir
      name: lightning_checkpoints
- name: stacks
  endpoint:
    path: /stacks
    method: GET
    data_selector: stacks
    params: {}
- name: built_in_materializers
  endpoint:
    path: /api/materializers/built_in
    method: GET
    data_selector: materializers
    params: {}
- name: integration_specific_materializers
  endpoint:
    path: /api/materializers/integrations
    method: GET
    data_selector: materializers
    params: {}
- name: materializers
  endpoint:
    path: /api/materializers
    method: GET
    data_selector: materializers
    params: {}
- name: tags
  endpoint:
    path: /api/tags
    method: GET
    data_selector: records
- name: steps
  endpoint:
    path: /steps
    method: GET
    data_selector: records
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: records
- name: artifacts
  endpoint:
    path: /artifacts
    method: GET
    data_selector: records
- name: models
  endpoint:
    path: /models
    method: GET
    data_selector: records
- name: repository
  endpoint:
    path: /repos/{owner}/{repo}
    method: GET
    data_selector: data
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: records
    params: {}
- name: metadata
  endpoint:
    path: /api/v1/metadata
    method: GET
    data_selector: records
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: models
  endpoint:
    path: /api/models
    method: GET
    data_selector: records
    params: {}
- name: metadata
  endpoint:
    path: /api/v1/metadata
    method: GET
    data_selector: records
    params: {}
- name: customer_service_agent
  endpoint:
    path: /models/customer_service_agent
    method: POST
    data_selector: model
    params: {}
- name: iris_classifier
  endpoint:
    path: /models/iris_classifier
    method: POST
    data_selector: model
    params: {}
- name: run_templates
  endpoint:
    path: /api/v1/run_templates/daily-retraining/runs
    method: POST
- name: metadata
  endpoint:
    path: /api/metadata
    method: GET
    data_selector: records
- name: run_template
  endpoint:
    path: /api/v1/run_templates
    method: POST
    data_selector: templates
- name: customer_service_agent
  endpoint:
    path: /models/customer_service_agent
    method: POST
    data_selector: model
    params: {}
- name: iris_classifier
  endpoint:
    path: /models/iris_classifier
    method: POST
    data_selector: model
    params: {}
- name: models
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: run_templates
  endpoint:
    path: /api/v1/run_templates/{template_id}/runs
    method: POST
    data_selector: steps
- name: models
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: run_templates
  endpoint:
    path: /api/v1/run_templates
    method: GET
    data_selector: run_templates
- name: pipelines
  endpoint:
    path: /api/v1/pipelines
    method: GET
    data_selector: pipelines
- name: models
  endpoint:
    path: /api/models
    method: GET
    data_selector: models
- name: model_versions
  endpoint:
    path: /api/models/{model_id}/versions
    method: GET
    data_selector: versions
- name: run_templates
  endpoint:
    path: /api/v1/run_templates/daily-retraining/runs
    method: POST
    data_selector: steps
- name: run_templates
  endpoint:
    path: /api/v1/run_templates
    method: GET
    data_selector: templates
    params: {}
- name: pipeline_runs
  endpoint:
    path: /api/v1/runs
    method: POST
    data_selector: run
    params: {}
- name: pipeline_runs
  endpoint:
    path: /pipeline_runs
    method: GET
    data_selector: pipeline_runs
- name: local_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/local
    method: GET
- name: local_docker_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/local-docker
    method: GET
- name: kubernetes_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/kubernetes
    method: GET
- name: kubeflow_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/kubeflow
    method: GET
- name: vertex_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/vertex
    method: GET
- name: sagemaker_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/sagemaker
    method: GET
- name: azureml_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/azureml
    method: GET
- name: tekton_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/tekton
    method: GET
- name: airflow_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/airflow
    method: GET
- name: skypilot_aws_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
- name: skypilot_gcp_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
- name: skypilot_azure_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
- name: hyperai_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/hyperai
    method: GET
- name: custom_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/custom
    method: GET
- name: local_artifact_store
  endpoint:
    path: /stacks/stack-components/artifact-stores/local
    method: GET
    data_selector: records
- name: amazon_s3_artifact_store
  endpoint:
    path: /stacks/stack-components/artifact-stores/s3
    method: GET
    data_selector: records
- name: google_cloud_storage_artifact_store
  endpoint:
    path: /stacks/stack-components/artifact-stores/gcp
    method: GET
    data_selector: records
- name: azure_artifact_store
  endpoint:
    path: /stacks/stack-components/artifact-stores/azure
    method: GET
    data_selector: records
- name: DefaultContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/default
    method: GET
    data_selector: ''
    params: {}
- name: DockerHubContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/dockerhub
    method: GET
    data_selector: ''
    params: {}
- name: GCPContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/gcp
    method: GET
    data_selector: ''
    params: {}
- name: AzureContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/azure
    method: GET
    data_selector: ''
    params: {}
- name: GitHubContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/github
    method: GET
    data_selector: ''
    params: {}
- name: AWSContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/aws
    method: GET
    data_selector: ''
    params: {}
- name: local
  endpoint:
    path: /stacks/stack-components/orchestrators/local
    method: GET
- name: local_docker
  endpoint:
    path: /stacks/stack-components/orchestrators/local-docker
    method: GET
- name: kubernetes
  endpoint:
    path: /stacks/stack-components/orchestrators/kubernetes
    method: GET
- name: kubeflow
  endpoint:
    path: /stacks/stack-components/orchestrators/kubeflow
    method: GET
- name: vertex
  endpoint:
    path: /stacks/stack-components/orchestrators/vertex
    method: GET
- name: sagemaker
  endpoint:
    path: /stacks/stack-components/orchestrators/sagemaker
    method: GET
- name: azureml
  endpoint:
    path: /stacks/stack-components/orchestrators/azureml
    method: GET
- name: tekton
  endpoint:
    path: /stacks/stack-components/orchestrators/tekton
    method: GET
- name: airflow
  endpoint:
    path: /stacks/stack-components/orchestrators/airflow
    method: GET
- name: vm_aws
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
- name: vm_gcp
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
- name: vm_azure
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
- name: hyperai
  endpoint:
    path: /stacks/stack-components/orchestrators/hyperai
    method: GET
- name: custom
  endpoint:
    path: /stacks/stack-components/orchestrators/custom
    method: GET
- name: SageMaker
  endpoint:
    path: /stacks/stack-components/step-operators/sagemaker
    method: GET
- name: AzureML
  endpoint:
    path: /stacks/stack-components/step-operators/azureml
    method: GET
- name: Vertex
  endpoint:
    path: /stacks/stack-components/step-operators/vertex
    method: GET
- name: Kubernetes
  endpoint:
    path: /stacks/stack-components/step-operators/kubernetes
    method: GET
- name: Modal
  endpoint:
    path: /stacks/stack-components/step-operators/modal
    method: GET
- name: Spark
  endpoint:
    path: /stacks/stack-components/step-operators/spark-kubernetes
    method: GET
- name: local_artifact_store
  endpoint:
    path: /stacks/stack-components/artifact-stores/local
    method: GET
    data_selector: records
- name: s3_artifact_store
  endpoint:
    path: /stacks/stack-components/artifact-stores/s3
    method: GET
    data_selector: records
- name: gcp_artifact_store
  endpoint:
    path: /stacks/stack-components/artifact-stores/gcp
    method: GET
    data_selector: records
- name: azure_artifact_store
  endpoint:
    path: /stacks/stack-components/artifact-stores/azure
    method: GET
    data_selector: records
- name: custom_artifact_store
  endpoint:
    path: /stacks/stack-components/artifact-stores/custom
    method: GET
    data_selector: records
- name: Comet
  endpoint:
    path: /stacks/stack-components/experiment-trackers/comet
    method: GET
- name: MLflow
  endpoint:
    path: /stacks/stack-components/experiment-trackers/mlflow
    method: GET
- name: Neptune
  endpoint:
    path: /stacks/stack-components/experiment-trackers/neptune
    method: GET
- name: Weights & Biases
  endpoint:
    path: /stacks/stack-components/experiment-trackers/wandb
    method: GET
- name: Custom Implementation
  endpoint:
    path: /stacks/stack-components/experiment-trackers/custom
    method: GET
- name: DefaultContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/default
    method: GET
    data_selector: ''
    params: {}
- name: DockerHubContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/dockerhub
    method: GET
    data_selector: ''
    params: {}
- name: GCPContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/gcp
    method: GET
    data_selector: ''
    params: {}
- name: AzureContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/azure
    method: GET
    data_selector: ''
    params: {}
- name: GitHubContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/github
    method: GET
    data_selector: ''
    params: {}
- name: AWSContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/aws
    method: GET
    data_selector: ''
    params: {}
- name: LocalImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/local
    method: GET
- name: KanikoImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/kaniko
    method: GET
- name: GCPImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/gcp
    method: GET
- name: AWSImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/aws
    method: GET
- name: Custom Implementation
  endpoint:
    path: /stacks/stack-components/image-builders/custom
    method: GET
- name: slack
  endpoint:
    path: /stacks/stack-components/alerters/slack
    method: GET
- name: discord
  endpoint:
    path: /stacks/stack-components/alerters/discord
    method: GET
- name: custom
  endpoint:
    path: /stacks/stack-components/alerters/custom
    method: GET
- name: slack
  endpoint:
    path: /stacks/stack-components/alerters/slack
    method: GET
    data_selector: records
    params: {}
- name: discord
  endpoint:
    path: /stacks/stack-components/alerters/discord
    method: GET
    data_selector: records
    params: {}
- name: azureml
  endpoint:
    path: /stacks/stack-components/step-operators/azureml
    method: GET
- name: kubernetes
  endpoint:
    path: /stacks/stack-components/step-operators/kubernetes
    method: GET
- name: modal
  endpoint:
    path: /stacks/stack-components/step-operators/modal
    method: GET
- name: sagemaker
  endpoint:
    path: /stacks/stack-components/step-operators/sagemaker
    method: GET
- name: spark
  endpoint:
    path: /stacks/stack-components/step-operators/spark-kubernetes
    method: GET
- name: vertex
  endpoint:
    path: /stacks/stack-components/step-operators/vertex
    method: GET
- name: custom
  endpoint:
    path: /stacks/stack-components/step-operators/custom
    method: GET
- name: slack
  endpoint:
    path: /stacks/stack-components/alerters/slack
    method: GET
    data_selector: records
- name: discord
  endpoint:
    path: /stacks/stack-components/alerters/discord
    method: GET
    data_selector: records
- name: experiment_trackers
  endpoint:
    path: /api/v1/experiment_trackers
    method: GET
    data_selector: data
    params: {}
- name: Comet
  endpoint:
    path: /stacks/stack-components/experiment-trackers/comet
    method: GET
- name: MLflow
  endpoint:
    path: /stacks/stack-components/experiment-trackers/mlflow
    method: GET
- name: Neptune
  endpoint:
    path: /stacks/stack-components/experiment-trackers/neptune
    method: GET
- name: Weights & Biases
  endpoint:
    path: /stacks/stack-components/experiment-trackers/wandb
    method: GET
- name: Custom Implementation
  endpoint:
    path: /stacks/stack-components/experiment-trackers/custom
    method: GET
- name: ArgillaAnnotator
  endpoint:
    path: /stacks/stack-components/annotators/argilla
    method: GET
    data_selector: records
- name: LabelStudioAnnotator
  endpoint:
    path: /stacks/stack-components/annotators/label-studio
    method: GET
    data_selector: records
- name: PigeonAnnotator
  endpoint:
    path: /stacks/stack-components/annotators/pigeon
    method: GET
    data_selector: records
- name: ProdigyAnnotator
  endpoint:
    path: /stacks/stack-components/annotators/prodigy
    method: GET
    data_selector: records
- name: Custom Implementation
  endpoint:
    path: /stacks/stack-components/annotators/custom
    method: GET
    data_selector: records
- name: great_expectations
  endpoint:
    path: /stacks/stack-components/data-validators/great-expectations
    method: GET
- name: deepchecks
  endpoint:
    path: /stacks/stack-components/data-validators/deepchecks
    method: GET
- name: evidently
  endpoint:
    path: /stacks/stack-components/data-validators/evidently
    method: GET
- name: whylogs
  endpoint:
    path: /stacks/stack-components/data-validators/whylogs
    method: GET
- name: LocalImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/local
    method: GET
- name: KanikoImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/kaniko
    method: GET
- name: GCPImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/gcp
    method: GET
- name: AWSImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/aws
    method: GET
- name: Custom Implementation
  endpoint:
    path: /stacks/stack-components/image-builders/custom
    method: GET
- name: slack_alerter
  endpoint:
    path: /stacks/stack-components/alerters/slack
    method: GET
    data_selector: records
- name: discord_alerter
  endpoint:
    path: /stacks/stack-components/alerters/discord
    method: GET
    data_selector: records
- name: deepchecks
  endpoint:
    path: /stacks/stack-components/data-validators/deepchecks
    method: GET
    data_selector: records
- name: evidently
  endpoint:
    path: /stacks/stack-components/data-validators/evidently
    method: GET
    data_selector: records
- name: great_expectations
  endpoint:
    path: /stacks/stack-components/data-validators/great-expectations
    method: GET
    data_selector: records
- name: whylogs
  endpoint:
    path: /stacks/stack-components/data-validators/whylogs
    method: GET
    data_selector: records
- name: slack_alerter
  endpoint:
    path: /stacks/stack-components/alerters/slack
    method: GET
    data_selector: integration
    params: {}
- name: discord_alerter
  endpoint:
    path: /stacks/stack-components/alerters/discord
    method: GET
    data_selector: integration
    params: {}
- name: feature_store
  endpoint:
    path: /feature_stores
    method: GET
    data_selector: features
    params: {}
- name: Feast
  endpoint:
    path: /stacks/stack-components/feature-stores/feast
    method: GET
- name: slack
  endpoint:
    path: /stacks/stack-components/alerters/slack
    method: GET
- name: discord
  endpoint:
    path: /stacks/stack-components/alerters/discord
    method: GET
- name: model_deployers
  endpoint:
    path: /model_deployers
    method: GET
    data_selector: data
    params: {}
- name: ArgillaAnnotator
  endpoint:
    path: /stacks/stack-components/annotators/argilla
    method: GET
- name: LabelStudioAnnotator
  endpoint:
    path: /stacks/stack-components/annotators/label-studio
    method: GET
- name: PigeonAnnotator
  endpoint:
    path: /stacks/stack-components/annotators/pigeon
    method: GET
- name: ProdigyAnnotator
  endpoint:
    path: /stacks/stack-components/annotators/prodigy
    method: GET
- name: Custom Implementation
  endpoint:
    path: /stacks/stack-components/annotators/custom
    method: GET
- name: MLflow
  endpoint:
    path: /stacks/stack-components/model-deployers/mlflow
    method: GET
    data_selector: records
    params: {}
- name: BentoML
  endpoint:
    path: /stacks/stack-components/model-deployers/bentoml
    method: GET
    data_selector: records
    params: {}
- name: Seldon
  endpoint:
    path: /stacks/stack-components/model-deployers/seldon
    method: GET
    data_selector: records
    params: {}
- name: Hugging Face
  endpoint:
    path: /stacks/stack-components/model-deployers/huggingface
    method: GET
    data_selector: records
    params: {}
- name: Databricks
  endpoint:
    path: /stacks/stack-components/model-deployers/databricks
    method: GET
    data_selector: records
    params: {}
- name: vLLM
  endpoint:
    path: /stacks/stack-components/model-deployers/vllm
    method: GET
    data_selector: records
    params: {}
- name: Custom Implementation
  endpoint:
    path: /stacks/stack-components/model-deployers/custom
    method: GET
    data_selector: records
    params: {}
- name: Deepchecks
  endpoint:
    path: /stacks/stack-components/data-validators/deepchecks
    method: GET
- name: Evidently
  endpoint:
    path: /stacks/stack-components/data-validators/evidently
    method: GET
- name: Great Expectations
  endpoint:
    path: /stacks/stack-components/data-validators/great-expectations
    method: GET
- name: Whylogs/WhyLabs
  endpoint:
    path: /stacks/stack-components/data-validators/whylogs
    method: GET
- name: feast
  endpoint:
    path: /stacks/stack-components/feature-stores/feast
    method: GET
    data_selector: features
    params: {}
- name: RegisteredModel
  endpoint:
    path: /model/registered
    method: GET
    data_selector: models
- name: RegistryModelVersion
  endpoint:
    path: /model/version
    method: GET
    data_selector: versions
- name: ModelVersionStage
  endpoint:
    path: /model/version/stage
    method: GET
    data_selector: stages
- name: kubernetes-cluster
  endpoint:
    method: GET
- name: aws-generic
  endpoint:
    method: GET
- name: s3-bucket
  endpoint:
    method: GET
- name: docker-registry
  endpoint:
    method: GET
- name: MLflow
  endpoint:
    path: /stacks/stack-components/model-deployers/mlflow
    method: GET
- name: BentoML
  endpoint:
    path: /stacks/stack-components/model-deployers/bentoml
    method: GET
- name: Seldon
  endpoint:
    path: /stacks/stack-components/model-deployers/seldon
    method: GET
- name: Hugging Face
  endpoint:
    path: /stacks/stack-components/model-deployers/huggingface
    method: GET
- name: Databricks
  endpoint:
    path: /stacks/stack-components/model-deployers/databricks
    method: GET
- name: vLLM
  endpoint:
    path: /stacks/stack-components/model-deployers/vllm
    method: GET
- name: Custom Implementation
  endpoint:
    path: /stacks/stack-components/model-deployers/custom
    method: GET
- name: model_service
  endpoint:
    path: /seldon/zenml-workloads/zenml-8cbe671b-9fce-4394-a051-68e001f92765/api/v0.1/predictions
    method: GET
- name: docker-registry
  endpoint:
    path: /docker-registry
    method: GET
    data_selector: repositories
    params: {}
- name: s3-bucket
  endpoint:
    path: /s3-bucket
    method: GET
    data_selector: buckets
    params: {}
- name: kubernetes-cluster
  endpoint:
    path: /kubernetes-cluster
    method: GET
    data_selector: clusters
    params: {}
- name: kubernetes-cluster
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: gcs-bucket
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: docker-registry
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: MLflow
  endpoint:
    path: /stacks/stack-components/model-registries/mlflow
    method: GET
- name: Custom Implementation
  endpoint:
    path: /stacks/stack-components/model-registries/custom
    method: GET
- name: gcs-bucket
  endpoint:
    path: /gcs-bucket
    method: GET
    data_selector: resources
    params: {}
- name: kubernetes-cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/kubernetes-cluster
    method: GET
- name: s3-bucket
  endpoint:
    path: /services/data/vXX.X/sobjects/s3-bucket
    method: GET
- name: s3-bucket
  endpoint:
    path: /services/data/vXX.X/sobjects/s3-bucket
    method: GET
    data_selector: records
- name: kubernetes-cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/kubernetes-cluster
    method: GET
    data_selector: records
- name: docker-registry
  endpoint:
    path: /services/data/vXX.X/sobjects/docker-registry
    method: GET
    data_selector: records
- name: gcp-multi
  endpoint:
    path: /gcp
    method: GET
    data_selector: resources
    params: {}
- name: aws-multi-type
  endpoint:
    path: /aws
    method: GET
    data_selector: resources
    params: {}
- name: aws-s3-multi-instance
  endpoint:
    path: /aws/s3
    method: GET
    data_selector: resources
    params: {}
- name: aws-s3-zenfiles
  endpoint:
    path: /aws/s3/zenfiles
    method: GET
    data_selector: resources
    params: {}
- name: docker-registry
  endpoint:
    path: 715803424590.dkr.ecr.us-east-1.amazonaws.com
    method: GET
- name: s3-bucket
  endpoint:
    path: s3://public-flavor-logos
    method: GET
- name: s3-bucket
  endpoint:
    path: s3://sagemaker-us-east-1-715803424590
    method: GET
- name: s3-bucket
  endpoint:
    path: s3://spark-artifact-store
    method: GET
- name: s3-bucket
  endpoint:
    path: s3://spark-demo-as
    method: GET
- name: s3-bucket
  endpoint:
    path: s3://spark-demo-dataset
    method: GET
- name: docker-registry
  endpoint:
    path: 715803424590.dkr.ecr.eu-central-1.amazonaws.com
    method: GET
- name: kubernetes-cluster
  endpoint:
    path: zenhacks-cluster
    method: GET
- name: kubernetes-cluster
  endpoint:
    path: kubeflowmultitenant
    method: GET
- name: kubernetes-cluster
  endpoint:
    path: zenbox
    method: GET
- name: kubernetes-cluster
  endpoint:
    path: A5F8F4142FB12DDCDE9F21F6E9B07A18.gr7.us-east-1.eks.amazonaws.com
    method: GET
- name: kubernetes-cluster
  endpoint:
    params: {}
- name: gcs-bucket
  endpoint:
    params: {}
- name: gcp-generic
  endpoint:
    params: {}
- name: docker-registry
  endpoint:
    params: {}
- name: kubernetes-cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/kubernetes-cluster
    method: GET
- name: gcs-bucket
  endpoint:
    path: gs://zenml-datasets
    method: GET
- name: gcs-bucket
  endpoint:
    path: gs://zenml-bucket-sl
    method: GET
- name: kubernetes-cluster
  endpoint:
    path: /services/data/vXX.X/kubernetes-cluster
    method: GET
    data_selector: resources
    params: {}
- name: docker-registry
  endpoint:
    path: /services/data/vXX.X/docker-registry
    method: GET
    data_selector: resources
    params: {}
- name: artifact_store
  endpoint:
    path: /artifact-store
    method: POST
    data_selector: data
    params:
      path: s3://your-bucket-name
      connector: aws_connector
- name: gcp-multi
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: aws-multi-type
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: aws-s3-multi-instance
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: aws-s3-zenfiles
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: sagemaker_orchestrator
  endpoint:
    path: /sagemaker/orchestrator
    method: POST
- name: ecr_container_registry
  endpoint:
    path: /ecr/container_registry
    method: POST
- name: s3_artifact_store
  endpoint:
    path: /s3/artifact_store
    method: POST
- name: AzureML Orchestrator
  endpoint:
    path: /services/azureml/orchestrator
    method: POST
    data_selector: jobs
    params: {}
- name: Azure Blob Storage Artifact Store
  endpoint:
    path: /services/azure/blobstorage
    method: GET
    data_selector: containers
    params: {}
- name: Azure Container Registry
  endpoint:
    path: /services/azure/acr
    method: GET
    data_selector: registries
    params: {}
- name: kubernetes-cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/kubernetes-cluster
    method: GET
- name: zenml-bucket-sl
  endpoint:
    path: /storage/v1/b/zenml-bucket-sl
    method: GET
- name: gcs_artifact_store
  endpoint:
    path: gs://<YOUR_BUCKET_NAME>
    method: POST
- name: gcp_container_registry
  endpoint:
    path: <GCR-URI>
    method: POST
- name: artifact_store
  endpoint:
    path: /s3
    method: POST
    data_selector: artifact_store
    params:
      path: s3://bucket-name
      connector: aws_connector
- name: Kubernetes Orchestrator
  endpoint:
    path: /stacks/orchestrators/kubernetes
    method: POST
    data_selector: resources
    params: {}
- name: AzureML Orchestrator
  endpoint:
    path: /azureml/orchestrator
    method: POST
    data_selector: jobs
    params:
      role_assignments:
      - AzureML Data Scientist
      - AzureML Compute Operator
- name: Azure Blob Storage Artifact Store
  endpoint:
    path: /azure_blob_storage/artifact_store
    method: POST
    data_selector: containers
    params:
      role_assignments:
      - Storage Blob Data Contributor
      - Reader and Data Access
- name: Azure Container Registry
  endpoint:
    path: /azure_container_registry
    method: POST
    data_selector: registries
    params:
      role_assignments:
      - AcrPush
      - AcrPull
      - Contributor
- name: artifact_store
  endpoint:
    path: /artifact-store
    method: POST
- name: container_registry
  endpoint:
    path: /container-registry
    method: POST
- name: stack
  endpoint:
    path: /stack
    method: POST
- name: orchestrator
  endpoint:
    path: /stacks/orchestrators/kubernetes
    method: GET
    data_selector: resources
    params: {}
- name: gcp_connector
  endpoint:
    path: /zenml_service_connector
    method: POST
    data_selector: id
    params: {}
- name: existing-artifact-store
  endpoint:
    path: /zenml_stack_component
    method: POST
    data_selector: id
    params: {}
- name: gcp_connector
  endpoint:
    path: /zenml_service_connector
    method: POST
    data_selector: id
    params: {}
- name: existing_artifact_store
  endpoint:
    path: /zenml_stack_component
    method: POST
    data_selector: id
    params: {}
- name: artifacts
  endpoint:
    path: /google_storage_bucket
    method: CREATE
    data_selector: artifacts
    params: {}
- name: containers
  endpoint:
    path: /google_artifact_registry_repository
    method: CREATE
    data_selector: containers
    params: {}
- name: gcp_service_connector
  endpoint:
    path: /zenml_service_connector
    method: CREATE
    data_selector: gcp_service_connector
    params: {}
- name: stack_component
  endpoint:
    path: /zenml_stack_component
    method: CREATE
    data_selector: stack_component
    params: {}
- name: stack
  endpoint:
    path: /zenml_stack
    method: CREATE
    data_selector: stack
    params: {}
- name: azure_artifact_store
  endpoint:
    path: /services/azure/artifact_store
    method: POST
    data_selector: artifact_store
    params:
      orchestrator: <your-orchestrator-type>
- name: acr_container_registry
  endpoint:
    path: /services/azure/acr_container_registry
    method: POST
    data_selector: container_registry
    params: {}
- name: gcs-artifact-store
  endpoint:
    path: /artifacts
    method: POST
    data_selector: artifacts
    params: {}
- name: artifact_store
  endpoint:
    path: /zenml/artifact_store
    method: POST
    data_selector: data
    params: {}
- name: container_registry
  endpoint:
    path: /${var.region}-docker.pkg.dev/${var.project_id}/${google_artifact_registry_repository.containers.repository_id}
    method: GET
    data_selector: configuration
    params: {}
- name: orchestrator
  endpoint:
    path: /${var.region}
    method: GET
    data_selector: configuration
    params:
      synchronous: 'true'
- name: gcp_connector
  endpoint:
    path: /zenml_service_connector
    method: POST
    data_selector: id
    params: {}
- name: artifact_store
  endpoint:
    path: /zenml_stack_component
    method: POST
    data_selector: id
    params: {}
- name: service_connector
  endpoint:
    path: /zenml_service_connector
    method: POST
    data_selector: id
- name: stack_component
  endpoint:
    path: /zenml_stack_component
    method: POST
    data_selector: id
- name: stack
  endpoint:
    path: /zenml_stack
    method: POST
    data_selector: id
- name: gcp_connector
  endpoint:
    path: /zenml_service_connector
    method: POST
    data_selector: id
- name: artifact_store
  endpoint:
    path: /zenml_stack_component
    method: POST
    data_selector: id
- name: container_registry
  endpoint:
    path: /zenml_stack_component
    method: POST
    data_selector: id
- name: orchestrator
  endpoint:
    path: /zenml_stack_component
    method: POST
    data_selector: id
- name: artifact_store
  endpoint:
    path: /stack_components/artifact_store
    method: POST
    data_selector: id
- name: gcp_connector
  endpoint:
    path: /zenml/service/connectors/gcp
    method: POST
    data_selector: connector
    params: {}
- name: artifact_store
  endpoint:
    path: /zenml/stacks/components
    method: POST
    data_selector: component
    params: {}
- name: container_registry
  endpoint:
    path: /container_registry
    method: GET
- name: orchestrator
  endpoint:
    path: /orchestrator
    method: GET
- name: local_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/local
    method: GET
- name: local_docker_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/local-docker
    method: GET
- name: kubernetes_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/kubernetes
    method: GET
- name: kubeflow_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/kubeflow
    method: GET
- name: vertex_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/vertex
    method: GET
- name: sagemaker_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/sagemaker
    method: GET
- name: azureml_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/azureml
    method: GET
- name: tekton_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/tekton
    method: GET
- name: airflow_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/airflow
    method: GET
- name: skypilot_aws_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
- name: skypilot_gcp_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
- name: skypilot_azure_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
- name: hyperai_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/hyperai
    method: GET
- name: stack_components
  endpoint:
    path: /stacks/stack-components
    method: GET
- name: service_connectors
  endpoint:
    path: /stacks/service-connectors
    method: GET
- name: docker_settings
  endpoint:
    path: /docker/settings
    method: GET
    data_selector: settings
    params: {}
- name: docker_settings
  endpoint:
    path: /docker/settings
    method: GET
    data_selector: settings
    params: {}
- name: step_operator
  endpoint:
    path: /stacks/stack-components/step-operators
    method: GET
    data_selector: operators
    params: {}
- name: kubeflow_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/kubeflow
    method: GET
- name: LocalOrchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/local
    method: GET
    data_selector: records
- name: LocalDockerOrchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/local-docker
    method: GET
    data_selector: records
- name: KubernetesOrchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/kubernetes
    method: GET
    data_selector: records
- name: KubeflowOrchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/kubeflow
    method: GET
    data_selector: records
- name: VertexOrchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/vertex
    method: GET
    data_selector: records
- name: SagemakerOrchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/sagemaker
    method: GET
    data_selector: records
- name: AzureMLOrchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/azureml
    method: GET
    data_selector: records
- name: TektonOrchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/tekton
    method: GET
    data_selector: records
- name: AirflowOrchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/airflow
    method: GET
    data_selector: records
- name: SkypilotAWSOrchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
    data_selector: records
- name: SkypilotGCPOrchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
    data_selector: records
- name: SkypilotAzureOrchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
    data_selector: records
- name: HyperAIOrchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/hyperai
    method: GET
    data_selector: records
- name: Custom Implementation
  endpoint:
    path: /stacks/stack-components/orchestrators/custom
    method: GET
    data_selector: records
- name: kubeflow_orchestrator
  endpoint:
    path: /kubeflow/orchestrator
    method: POST
    data_selector: settings
- name: workspaces
  endpoint:
    path: /organizations
    method: POST
    data_selector: workspace
    params: {}
- name: docker_settings
  endpoint:
    path: /docker/settings
    method: GET
- name: zenml_pro_api
  endpoint:
    path: /zenml-pro-api
    method: GET
- name: zenml_pro_dashboard
  endpoint:
    path: /zenml-pro-dashboard
    method: GET
- name: zenml_pro_server
  endpoint:
    path: /zenml-pro-server
    method: GET
- name: AzureML
  endpoint:
    path: /stacks/stack-components/step-operators/azureml
    method: GET
- name: Kubernetes
  endpoint:
    path: /stacks/stack-components/step-operators/kubernetes
    method: GET
- name: Modal
  endpoint:
    path: /stacks/stack-components/step-operators/modal
    method: GET
- name: SageMaker
  endpoint:
    path: /stacks/stack-components/step-operators/sagemaker
    method: GET
- name: Spark
  endpoint:
    path: /stacks/stack-components/step-operators/spark-kubernetes
    method: GET
- name: Vertex
  endpoint:
    path: /stacks/stack-components/step-operators/vertex
    method: GET
- name: Custom Implementation
  endpoint:
    path: /stacks/stack-components/step-operators/custom
    method: GET
- name: zenml_pro_api
  endpoint:
    path: /zenml-pro-api
    method: GET
    data_selector: records
- name: zenml_pro_dashboard
  endpoint:
    path: /zenml-pro-dashboard
    method: GET
    data_selector: records
- name: zenml_pro_server
  endpoint:
    path: /zenml-pro-server
    method: GET
    data_selector: records
- name: pipelines
  endpoint:
    path: /api/pipelines
    method: GET
    data_selector: data
- name: steps
  endpoint:
    path: /api/steps
    method: GET
    data_selector: data
- name: zenml-pro-api
  endpoint:
    path: /zenml-pro-api
    method: GET
    data_selector: records
    params: {}
- name: zenml-pro-dashboard
  endpoint:
    path: /zenml-pro-dashboard
    method: GET
    data_selector: records
    params: {}
- name: zenml-pro-server
  endpoint:
    path: /zenml-pro-server
    method: GET
    data_selector: records
    params: {}
- name: zenml-client
  endpoint:
    path: /zenml-client
    method: GET
    data_selector: records
    params: {}
- name: zenml-pro-api
  endpoint:
    path: /zenml-pro-api
    method: GET
- name: zenml-pro-dashboard
  endpoint:
    path: /zenml-pro-dashboard
    method: GET
- name: zenml-pro-server
  endpoint:
    path: /zenml-pro-server
    method: GET
- name: kubeflow_orchestrator
  endpoint:
    path: /register
    method: POST
    data_selector: response
    params:
      flavor: kubeflow
      kubeflow_hostname: <KUBEFLOW_HOSTNAME>
- name: zenml-pro-api
  endpoint:
    path: /zenml-pro-api
    method: GET
- name: zenml-pro-dashboard
  endpoint:
    path: /zenml-pro-dashboard
    method: GET
- name: zenml-pro-server
  endpoint:
    path: /zenml-pro-server
    method: GET
- name: zenml-client
  endpoint:
    path: /zenml-client
    method: GET
- name: zenml_pro_control_plane
  endpoint:
    path: /api/v1/control_plane
    method: GET
    data_selector: records
- name: zenml_pro_workspace
  endpoint:
    path: /api/v1/workspaces
    method: GET
    data_selector: records
- name: ZenML Pro
  endpoint:
    path: /pro
    method: GET
    data_selector: workspaces
- name: Docker
  endpoint:
    path: /deploy-with-docker
    method: GET
    data_selector: docker
- name: Helm
  endpoint:
    path: /deploy-with-helm
    method: GET
    data_selector: helm
- name: HuggingFace Spaces
  endpoint:
    path: /deploy-using-huggingface-spaces
    method: GET
    data_selector: huggingface
- name: zenml_pro_api
  endpoint:
    path: /zenml-pro/api
    method: GET
- name: zenml_pro_dashboard
  endpoint:
    path: /zenml-pro/dashboard
    method: GET
- name: zenml_pro_server
  endpoint:
    path: /zenml-pro/server
    method: GET
- name: workspace
  endpoint:
    path: /organizations
    method: POST
    data_selector: workspaces
    params: {}
- name: zenml_pro_api
  endpoint:
    path: /zenml-pro-api
    method: GET
- name: zenml_pro_dashboard
  endpoint:
    path: /zenml-pro-dashboard
    method: GET
- name: zenml-pro-api
  endpoint:
    path: 715803424590.dkr.ecr.eu-west-1.amazonaws.com/zenml-pro-api
    method: GET
- name: zenml-pro-dashboard
  endpoint:
    path: 715803424590.dkr.ecr.eu-west-1.amazonaws.com/zenml-pro-dashboard
    method: GET
- name: zenml-pro-server
  endpoint:
    path: 715803424590.dkr.ecr.eu-central-1.amazonaws.com/zenml-pro-server
    method: GET
- name: zenml-client
  endpoint:
    path: zenmldocker
    method: GET
- name: zenml_pro_api
  endpoint:
    path: /zenml/pro/api
    method: GET
    data_selector: records
- name: zenml_pro_dashboard
  endpoint:
    path: /zenml/pro/dashboard
    method: GET
    data_selector: records
- name: zenml_pro_server
  endpoint:
    path: /zenml/pro/server
    method: GET
    data_selector: records
- name: zenml_pro_api
  endpoint:
    path: /zenml/pro/api
    method: GET
- name: zenml_pro_dashboard
  endpoint:
    path: /zenml/pro/dashboard
    method: GET
- name: zenml_pro_server
  endpoint:
    path: /zenml/pro/server
    method: GET
- name: zenml-pro-api
  endpoint:
    path: /zenml-pro-api
    method: GET
- name: zenml-pro-dashboard
  endpoint:
    path: /zenml-pro-dashboard
    method: GET
- name: zenml-pro-server
  endpoint:
    path: /zenml-pro-server
    method: GET
- name: zenml-client
  endpoint:
    path: /zenml-client
    method: GET
- name: auth_login
  endpoint:
    path: /auth/login
    method: POST
- name: users
  endpoint:
    path: /users
    method: POST
- name: zenml_pro
  endpoint:
    path: /api/v1/zenml_pro
    method: GET
    data_selector: records
- name: zenml-pro
  endpoint:
    path: /zenml-pro
    method: GET
    data_selector: records
    params: {}
- name: zenml_pro
  endpoint:
    path: /api/v1/zenml
    method: GET
    data_selector: records
    params: {}
- name: login
  endpoint:
    path: /api/v1/auth/login
    method: POST
    data_selector: token
- name: create_user
  endpoint:
    path: /api/v1/users
    method: POST
    data_selector: user
- name: organizations
  endpoint:
    path: /organizations
    method: GET
- name: workspaces
  endpoint:
    path: /workspaces
    method: GET
- name: zenml_pro_api
  endpoint:
    path: /zenml-pro-api
    method: GET
- name: zenml_pro_dashboard
  endpoint:
    path: /zenml-pro-dashboard
    method: GET
- name: zenml_pro_server
  endpoint:
    path: /zenml-pro-server
    method: GET
- name: zenml-pro-api
  endpoint:
    path: /zenml-pro-api
    method: GET
- name: zenml-pro-dashboard
  endpoint:
    path: /zenml-pro-dashboard
    method: GET
- name: zenml-pro-server
  endpoint:
    path: /zenml-pro-server
    method: GET
- name: zenml-client
  endpoint:
    path: /zenml
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: POST
    data_selector: ''
    params: {}
- name: login
  endpoint:
    path: /api/v1/auth/login
    method: POST
    data_selector: ''
    params: {}
- name: organizations
  endpoint:
    path: /api/v1/organizations
    method: GET
    data_selector: ''
    params: {}
- name: workspaces
  endpoint:
    path: /api/v1/workspaces
    method: GET
    data_selector: ''
    params: {}
- name: workspace
  endpoint:
    path: /workspaces
    method: POST
    data_selector: workspace
    params: {}
- name: zenml_pro_api
  endpoint:
    path: /zenml-pro-api
    method: GET
    data_selector: data
    params: {}
- name: zenml_pro_dashboard
  endpoint:
    path: /zenml-pro-dashboard
    method: GET
    data_selector: data
    params: {}
- name: zenml_pro_server
  endpoint:
    path: /zenml-pro-server
    method: GET
    data_selector: data
    params: {}
- name: run_templates
  endpoint:
    path: /run-templates
    method: GET
    data_selector: templates
- name: zenml_pro_api
  endpoint:
    path: /zenml-pro-api
    method: GET
- name: zenml_pro_dashboard
  endpoint:
    path: /zenml-pro-dashboard
    method: GET
- name: zenml_pro_server
  endpoint:
    path: /zenml-pro-server
    method: GET
- name: auth_login
  endpoint:
    path: /auth/login
    method: POST
- name: users
  endpoint:
    path: /users
    method: POST
- name: zenml-pro
  endpoint:
    path: /api/v1/zenml-pro
    method: GET
    data_selector: records
    params: {}
- name: zenml-dashboard
  endpoint:
    path: /api/v1/zenml-dashboard
    method: GET
    data_selector: records
    params: {}
- name: workspace
  endpoint:
    path: /workspaces
    method: POST
    data_selector: workspace
- name: login
  endpoint:
    path: /api/v1/auth/login
    method: POST
    data_selector: token
- name: create_user
  endpoint:
    path: /api/v1/users
    method: POST
    data_selector: user_created
- name: workspace
  endpoint:
    path: /api/v1/workspaces
    method: GET
- name: organization
  endpoint:
    path: /api/v1/organizations
    method: GET
- name: zenml_pro_api
  endpoint:
    path: /zenml-pro/api
    method: GET
- name: zenml_pro_dashboard
  endpoint:
    path: /zenml-pro/dashboard
    method: GET
- name: zenml_pro_server
  endpoint:
    path: /zenml-pro/server
    method: GET
- name: LocalImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/local
    method: GET
    data_selector: records
    params: {}
- name: KanikoImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/kaniko
    method: GET
    data_selector: records
    params: {}
- name: GCPImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/gcp
    method: GET
    data_selector: records
    params: {}
- name: AWSImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/aws
    method: GET
    data_selector: records
    params: {}
- name: Custom Implementation
  endpoint:
    path: /stacks/stack-components/image-builders/custom
    method: GET
    data_selector: records
    params: {}
- name: zenml_pro
  endpoint:
    path: /zenml-pro
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /api/v1/users
    method: POST
    data_selector: user
    params: {}
- name: login
  endpoint:
    path: /api/v1/auth/login
    method: POST
    data_selector: token
    params: {}
- name: workspaces
  endpoint:
    path: /api/v1/workspaces
    method: POST
    data_selector: workspace
    params: {}
- name: organizations
  endpoint:
    path: /api/v1/organizations
    method: GET
    data_selector: organization
    params: {}
- name: run_templates
  endpoint:
    path: /run-templates
    method: POST
- name: local_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/local
    method: GET
    data_selector: ''
    params: {}
- name: local_docker_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/local-docker
    method: GET
    data_selector: ''
    params: {}
- name: kubernetes_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/kubernetes
    method: GET
    data_selector: ''
    params: {}
- name: kubeflow_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/kubeflow
    method: GET
    data_selector: ''
    params: {}
- name: vertex_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/vertex
    method: GET
    data_selector: ''
    params: {}
- name: sagemaker_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/sagemaker
    method: GET
    data_selector: ''
    params: {}
- name: azureml_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/azureml
    method: GET
    data_selector: ''
    params: {}
- name: tekton_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/tekton
    method: GET
    data_selector: ''
    params: {}
- name: airflow_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/airflow
    method: GET
    data_selector: ''
    params: {}
- name: skypilot_aws_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
    data_selector: ''
    params: {}
- name: skypilot_gcp_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
    data_selector: ''
    params: {}
- name: skypilot_azure_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
    data_selector: ''
    params: {}
- name: hyperai_orchestrator
  endpoint:
    path: /stacks/stack-components/orchestrators/hyperai
    method: GET
    data_selector: ''
    params: {}
- name: zenml_pro_api
  endpoint:
    path: /api/v1/zenml_pro
    method: GET
    data_selector: data
- name: zenml_pro_dashboard
  endpoint:
    path: /api/v1/zenml_dashboard
    method: GET
    data_selector: data
- name: zenml_pro_api
  endpoint:
    path: /zenml-pro-api
    method: GET
    data_selector: records
- name: zenml_pro_dashboard
  endpoint:
    path: /zenml-pro-dashboard
    method: GET
    data_selector: records
- name: MLflow
  endpoint:
    path: /stacks/stack-components/model-deployers/mlflow
    method: GET
    data_selector: records
    params: {}
- name: BentoML
  endpoint:
    path: /stacks/stack-components/model-deployers/bentoml
    method: GET
    data_selector: records
    params: {}
- name: Seldon
  endpoint:
    path: /stacks/stack-components/model-deployers/seldon
    method: GET
    data_selector: records
    params: {}
- name: Hugging Face
  endpoint:
    path: /stacks/stack-components/model-deployers/huggingface
    method: GET
    data_selector: records
    params: {}
- name: Databricks
  endpoint:
    path: /stacks/stack-components/model-deployers/databricks
    method: GET
    data_selector: records
    params: {}
- name: vLLM
  endpoint:
    path: /stacks/stack-components/model-deployers/vllm
    method: GET
    data_selector: records
    params: {}
- name: Custom Implementation
  endpoint:
    path: /stacks/stack-components/model-deployers/custom
    method: GET
    data_selector: records
    params: {}
- name: model_service
  endpoint:
    path: /seldon/zenml-workloads/zenml-8cbe671b-9fce-4394-a051-68e001f92765/api/v0.1/predictions
    method: GET
    data_selector: MODEL_SERVICE_PROPERTY
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: POST
    data_selector: user
    params: {}
- name: workspaces
  endpoint:
    path: /api/v1/workspaces
    method: POST
    data_selector: workspace
    params: {}
- name: organizations
  endpoint:
    path: /api/v1/organizations
    method: GET
    data_selector: organizations
    params: {}
- name: local_artifact_store
  endpoint:
    path: /stacks/stack-components/artifact-stores/local
    method: GET
    data_selector: artifact_store
    params: {}
- name: s3_artifact_store
  endpoint:
    path: /stacks/stack-components/artifact-stores/s3
    method: GET
    data_selector: artifact_store
    params: {}
- name: gcp_artifact_store
  endpoint:
    path: /stacks/stack-components/artifact-stores/gcp
    method: GET
    data_selector: artifact_store
    params: {}
- name: azure_artifact_store
  endpoint:
    path: /stacks/stack-components/artifact-stores/azure
    method: GET
    data_selector: artifact_store
    params: {}
- name: custom_artifact_store
  endpoint:
    path: /stacks/stack-components/artifact-stores/custom
    method: GET
    data_selector: artifact_store
    params: {}
- name: LocalImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/local
    method: GET
- name: KanikoImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/kaniko
    method: GET
- name: GCPImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/gcp
    method: GET
- name: AWSImageBuilder
  endpoint:
    path: /stacks/stack-components/image-builders/aws
    method: GET
- name: Custom Implementation
  endpoint:
    path: /stacks/stack-components/image-builders/custom
    method: GET
- name: data_validator
  endpoint:
    path: /stacks/stack-components/data-validators
    method: GET
- name: ge_data_validator
  endpoint:
    path: /stacks/stack-components/data-validators/great_expectations
    method: POST
    data_selector: validation_results
    params: {}
- name: great_expectations_profiler_step
  endpoint:
    path: /great_expectations/profiler
    method: POST
    data_selector: expectation_suite
    params:
      expectation_suite_name: steel_plates_suite
      data_asset_name: steel_plates_train_df
- name: great_expectations_validator_step
  endpoint:
    path: /great_expectations/validator
    method: POST
    data_selector: checkpoint_result
    params:
      expectation_suite_name: steel_plates_suite
      data_asset_name: steel_plates_train_df
- name: data_validator
  endpoint:
    path: /stacks/stack-components/data-validators/great_expectations
    method: POST
    data_selector: data_validators
- name: local
  endpoint:
    path: /stacks/stack-components/orchestrators/local
    method: GET
- name: local_docker
  endpoint:
    path: /stacks/stack-components/orchestrators/local-docker
    method: GET
- name: kubernetes
  endpoint:
    path: /stacks/stack-components/orchestrators/kubernetes
    method: GET
- name: kubeflow
  endpoint:
    path: /stacks/stack-components/orchestrators/kubeflow
    method: GET
- name: vertex
  endpoint:
    path: /stacks/stack-components/orchestrators/vertex
    method: GET
- name: sagemaker
  endpoint:
    path: /stacks/stack-components/orchestrators/sagemaker
    method: GET
- name: azureml
  endpoint:
    path: /stacks/stack-components/orchestrators/azureml
    method: GET
- name: tekton
  endpoint:
    path: /stacks/stack-components/orchestrators/tekton
    method: GET
- name: airflow
  endpoint:
    path: /stacks/stack-components/orchestrators/airflow
    method: GET
- name: vm_aws
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
- name: vm_gcp
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
- name: vm_azure
  endpoint:
    path: /stacks/stack-components/orchestrators/skypilot-vm
    method: GET
- name: hyperai
  endpoint:
    path: /stacks/stack-components/orchestrators/hyperai
    method: GET
- name: custom
  endpoint:
    path: /stacks/stack-components/orchestrators/custom
    method: GET
- name: great_expectations_profiler_step
  endpoint:
    path: /great_expectations/profiler
    method: POST
    data_selector: ExpectationSuite
    params:
      expectation_suite_name: steel_plates_suite
      data_asset_name: steel_plates_train_df
- name: great_expectations_validator_step
  endpoint:
    path: /great_expectations/validator
    method: POST
    data_selector: CheckpointResult
    params:
      expectation_suite_name: steel_plates_suite
      data_asset_name: steel_plates_train_df
- name: ge_data_validator
  endpoint:
    path: /stacks/stack-components/data-validators/great_expectations
    method: POST
    data_selector: data_validator
    params: {}
- name: MLflow
  endpoint:
    path: /stacks/stack-components/model-deployers/mlflow
    method: GET
- name: BentoML
  endpoint:
    path: /stacks/stack-components/model-deployers/bentoml
    method: GET
- name: Seldon
  endpoint:
    path: /stacks/stack-components/model-deployers/seldon
    method: GET
- name: Hugging Face
  endpoint:
    path: /stacks/stack-components/model-deployers/huggingface
    method: GET
- name: Databricks
  endpoint:
    path: /stacks/stack-components/model-deployers/databricks
    method: GET
- name: vLLM
  endpoint:
    path: /stacks/stack-components/model-deployers/vllm
    method: GET
- name: Custom Implementation
  endpoint:
    path: /stacks/stack-components/model-deployers/custom
    method: GET
- name: great_expectations_profiler_step
  endpoint:
    path: /great_expectations/profiler
    method: POST
    data_selector: expectation_suite
    params:
      expectation_suite_name: steel_plates_suite
      data_asset_name: steel_plates_train_df
- name: great_expectations_validator_step
  endpoint:
    path: /great_expectations/validator
    method: POST
    data_selector: validation_results
    params:
      expectation_suite_name: steel_plates_suite
      data_asset_name: steel_plates_train_df
- name: model_service
  endpoint:
    path: /seldon/zenml-workloads/zenml-8cbe671b-9fce-4394-a051-68e001f92765/api/v0.1/predictions
    method: GET
    data_selector: MODEL_NAME
    params: {}
- name: data_validator
  endpoint:
    path: /stacks/stack-components/data-validators/great_expectations
    method: GET
    data_selector: data_validators
    params: {}
- name: great_expectations_profiler_step
  endpoint:
    path: /great_expectations/profiler
    method: POST
    data_selector: expectation_suite
    params:
      expectation_suite_name: steel_plates_suite
      data_asset_name: steel_plates_train_df
- name: great_expectations_validator_step
  endpoint:
    path: /great_expectations/validator
    method: POST
    data_selector: checkpoint_result
    params:
      expectation_suite_name: steel_plates_suite
      data_asset_name: steel_plates_train_df
- name: artifact_store
  endpoint:
    path: /stacks/stack-components/artifact-stores
    method: GET
    data_selector: artifacts
    params: {}
- name: data_validator
  endpoint:
    path: /data-validator
    method: POST
- name: DefaultContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/default
    method: GET
- name: DockerHubContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/dockerhub
    method: GET
- name: GCPContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/gcp
    method: GET
- name: AzureContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/azure
    method: GET
- name: GitHubContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/github
    method: GET
- name: AWSContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/aws
    method: GET
- name: data_validator
  endpoint:
    path: /data-validator
    method: POST
    data_selector: results
    params: {}
- name: great_expectations_profiler_step
  endpoint:
    params:
      expectation_suite_name: steel_plates_suite
      data_asset_name: steel_plates_train_df
- name: great_expectations_validator_step
  endpoint:
    params:
      expectation_suite_name: steel_plates_suite
      data_asset_name: steel_plates_train_df
- name: ge_data_validator
  endpoint:
    path: /stacks/stack-components/data-validators/great_expectations
    method: POST
    data_selector: data_validators
    params: {}
- name: secrets
  endpoint:
    path: /api/secrets
    method: GET
    data_selector: secrets
    params: {}
- name: great_expectations_profiler_step
  endpoint:
    path: /great_expectations/profiler
    method: POST
    data_selector: expectation_suite
    params: {}
- name: great_expectations_validator_step
  endpoint:
    path: /great_expectations/validator
    method: POST
    data_selector: validation_results
    params: {}
- name: load_data
  endpoint:
    path: /load_data
    method: GET
    data_selector: data
    params: {}
- name: process_data
  endpoint:
    path: /process_data
    method: POST
    data_selector: data
    params: {}
- name: great_expectations_profiler_step
  endpoint:
    path: /great_expectations/profiler
    method: POST
    data_selector: expectation_suite_name
    params: {}
- name: great_expectations_validator_step
  endpoint:
    path: /great_expectations/validator
    method: POST
    data_selector: expectation_suite_name
    params: {}
- name: get_data
  endpoint:
    path: /get_data
    method: GET
    data_selector: X, y
    params: {}
- name: process_data
  endpoint:
    path: /process_data
    method: POST
    data_selector: X_processed, y
    params: {}
- name: train_and_evaluate
  endpoint:
    path: /train_and_evaluate
    method: POST
    data_selector: accuracy
    params: {}
- name: steps
  endpoint:
    path: /steps
    method: GET
    data_selector: records
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: records
- name: data_validator
  endpoint:
    path: /stacks/stack-components/data-validators
    method: GET
    data_selector: records
- name: great_expectations_profiler_step
  endpoint:
    path: /great_expectations/profiler_step
    method: POST
    data_selector: expectation_suite_name
    params: {}
- name: great_expectations_validator_step
  endpoint:
    path: /great_expectations/validator_step
    method: POST
    data_selector: expectation_suite_name
    params: {}
- name: DefaultContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/default
    method: GET
- name: DockerHubContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/dockerhub
    method: GET
- name: GCPContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/gcp
    method: GET
- name: AzureContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/azure
    method: GET
- name: GitHubContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/github
    method: GET
- name: AWSContainerRegistry
  endpoint:
    path: /stacks/stack-components/container-registries/aws
    method: GET
- name: load_data
  endpoint:
    path: /load_data
    method: GET
    data_selector: records
- name: process_data
  endpoint:
    path: /process_data
    method: POST
    data_selector: records
- name: simple_ml_pipeline
  endpoint:
    path: /simple_ml_pipeline
    method: POST
    data_selector: records
- name: get_data
  endpoint:
    path: /get_data
    method: GET
    data_selector: data
    params: {}
- name: process_data
  endpoint:
    path: /process_data
    method: POST
    data_selector: processed_data
    params: {}
- name: train_and_evaluate
  endpoint:
    path: /train_and_evaluate
    method: POST
    data_selector: accuracy
    params: {}
- name: steps
  endpoint:
    path: /steps
    method: GET
    data_selector: records
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: records
- name: pipeline
  endpoint:
    path: /api/v1/pipelines
    method: GET
    data_selector: data
- name: project
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: create_service_connector
  endpoint:
    path: /create_service_connector
    method: POST
    data_selector: response
    params: {}
- name: create_stack
  endpoint:
    path: /create_stack
    method: POST
    data_selector: response
    params: {}
- name: create_stack_component
  endpoint:
    path: /create_stack_component
    method: POST
    data_selector: response
    params: {}
- name: create_tag
  endpoint:
    path: /create_tag
    method: POST
    data_selector: response
    params: {}
- name: create_trigger
  endpoint:
    path: /create_trigger
    method: POST
    data_selector: response
    params: {}
- name: create_user
  endpoint:
    path: /create_user
    method: POST
    data_selector: response
    params: {}
- name: deactivate_user
  endpoint:
    path: /deactivate_user
    method: POST
    data_selector: response
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: DELETE
    data_selector: records
    params:
      incremental: updated_at
- name: action
  endpoint:
    path: /api/v1/actions
    method: DELETE
    data_selector: records
    params: {}
- name: delete_pipeline
  endpoint:
    path: /delete_pipeline
    method: DELETE
    data_selector: pipeline
- name: delete_pipeline_run
  endpoint:
    path: /delete_pipeline_run
    method: DELETE
    data_selector: pipeline_run
- name: delete_project
  endpoint:
    path: /delete_project
    method: DELETE
    data_selector: project
- name: delete_run_template
  endpoint:
    path: /delete_run_template
    method: DELETE
    data_selector: run_template
- name: delete_schedule
  endpoint:
    path: /delete_schedule
    method: DELETE
    data_selector: schedule
- name: delete_secret
  endpoint:
    path: /delete_secret
    method: DELETE
    data_selector: secret
- name: delete_service
  endpoint:
    path: /delete_service
    method: DELETE
    data_selector: service
- name: delete_service_account
  endpoint:
    path: /delete_service_account
    method: DELETE
    data_selector: service_account
- name: delete_service_connector
  endpoint:
    path: /delete_service_connector
    method: DELETE
    data_selector: service_connector
- name: delete_stack
  endpoint:
    path: /delete_stack
    method: DELETE
    data_selector: stack
- name: delete_stack_component
  endpoint:
    path: /delete_stack_component
    method: DELETE
    data_selector: stack_component
- name: delete_tag
  endpoint:
    path: /delete_tag
    method: DELETE
    data_selector: tag
- name: delete_trigger
  endpoint:
    path: /delete_trigger
    method: DELETE
    data_selector: trigger
- name: delete_trigger_execution
  endpoint:
    path: /delete_trigger_execution
    method: DELETE
    data_selector: trigger_execution
- name: delete_user
  endpoint:
    path: /delete_user
    method: DELETE
    data_selector: user
- name: detach_tag
  endpoint:
    path: /detach_tag
    method: POST
    data_selector: response
    params: {}
- name: find_repository
  endpoint:
    path: /find_repository
    method: GET
    data_selector: response
    params: {}
- name: get_action
  endpoint:
    path: /get_action
    method: GET
    data_selector: response
    params: {}
- name: get_api_key
  endpoint:
    path: /get_api_key
    method: GET
    data_selector: response
    params: {}
- name: get_artifact
  endpoint:
    path: /get_artifact
    method: GET
    data_selector: response
    params: {}
- name: get_artifact_version
  endpoint:
    path: /get_artifact_version
    method: GET
    data_selector: response
    params: {}
- name: get_authorized_device
  endpoint:
    path: /get_authorized_device
    method: GET
    data_selector: response
    params: {}
- name: get_build
  endpoint:
    path: /get_build
    method: GET
    data_selector: response
    params: {}
- name: build
  endpoint:
    path: /builds
    method: GET
- name: code_repository
  endpoint:
    path: /code_repositories
    method: GET
- name: deployment
  endpoint:
    path: /deployments
    method: GET
- name: event_source
  endpoint:
    path: /event_sources
    method: GET
- name: flavor
  endpoint:
    path: /flavors
    method: GET
- name: model
  endpoint:
    path: /models
    method: GET
- name: model_version
  endpoint:
    path: /model_versions
    method: GET
- name: list_actions
  endpoint:
    method: GET
- name: list_api_keys
  endpoint:
    method: GET
- name: list_artifact_versions
  endpoint:
    method: GET
- name: builds
  endpoint:
    path: /list_builds
    method: GET
    data_selector: records
    params:
      sort_by: created
      page: PAGINATION_STARTING_PAGE
      size: PAGE_SIZE_DEFAULT
      logical_operator: AND
- name: code_repositories
  endpoint:
    path: /list_code_repositories
    method: GET
    data_selector: records
    params:
      sort_by: created
      page: PAGINATION_STARTING_PAGE
      size: PAGE_SIZE_DEFAULT
      logical_operator: AND
- name: deployments
  endpoint:
    path: /list_deployments
    method: GET
    data_selector: records
    params:
      sort_by: created
      page: PAGINATION_STARTING_PAGE
      size: PAGE_SIZE_DEFAULT
      logical_operator: AND
- name: event_sources
  endpoint:
    path: /list_event_sources
    method: GET
    data_selector: records
    params:
      sort_by: created
      page: PAGINATION_STARTING_PAGE
      size: PAGE_SIZE_DEFAULT
      logical_operator: AND
- name: flavors
  endpoint:
    path: /list_flavors
    method: GET
    data_selector: records
    params:
      sort_by: created
      page: PAGINATION_STARTING_PAGE
      size: PAGE_SIZE_DEFAULT
      logical_operator: AND
- name: flavor
  endpoint:
    path: /list_flavors
    method: GET
    data_selector: flavors
- name: model_version_artifact_links
  endpoint:
    path: /list_model_version_artifact_links
    method: GET
    data_selector: links
- name: model_version_pipeline_run_links
  endpoint:
    path: /list_model_version_pipeline_run_links
    method: GET
    data_selector: links
- name: model_versions
  endpoint:
    path: /list_model_versions
    method: GET
    data_selector: versions
- name: models
  endpoint:
    path: /list_models
    method: GET
    data_selector: models
- name: list_models
  endpoint:
    method: GET
- name: list_pipeline_runs
  endpoint:
    method: GET
- name: list_pipelines
  endpoint:
    method: GET
- name: pipelines
  endpoint:
    path: /list_pipelines
    method: GET
    data_selector: Page[PipelineResponse]
    params: {}
- name: projects
  endpoint:
    path: /list_projects
    method: GET
    data_selector: Page[ProjectResponse]
    params: {}
- name: run_steps
  endpoint:
    path: /list_run_steps
    method: GET
    data_selector: Page[StepRunResponse]
    params: {}
- name: run_templates
  endpoint:
    path: /list_run_templates
    method: GET
    data_selector: Page[RunTemplateResponse]
    params: {}
- name: stack_components
  endpoint:
    path: /list_stack_components
    method: GET
    data_selector: records
    params:
      sort_by: created
      page: PAGINATION_STARTING_PAGE
      size: PAGE_SIZE_DEFAULT
      logical_operator: AND
- name: stacks
  endpoint:
    path: /list_stacks
    method: GET
    data_selector: records
    params:
      sort_by: created
      page: PAGINATION_STARTING_PAGE
      size: PAGE_SIZE_DEFAULT
      logical_operator: AND
- name: tags
  endpoint:
    path: /list_tags
    method: GET
    data_selector: records
    params:
      sort_by: created
      page: PAGINATION_STARTING_PAGE
      size: PAGE_SIZE_DEFAULT
      logical_operator: AND
- name: trigger_executions
  endpoint:
    path: /list_trigger_executions
    method: GET
    data_selector: records
    params:
      sort_by: created
      page: PAGINATION_STARTING_PAGE
      size: PAGE_SIZE_DEFAULT
      logical_operator: AND
- name: triggers
  endpoint:
    path: /list_triggers
    method: GET
    data_selector: records
    params:
      sort_by: created
      page: PAGINATION_STARTING_PAGE
      size: PAGE_SIZE_DEFAULT
      logical_operator: AND
- name: triggers
  endpoint:
    method: GET
- name: users
  endpoint:
    method: GET
notes:
- Discover how to build production-ready ML pipelines with ZenML through our curated
  learning resources.
- Service Connectors abstract away complexity and implement security best practices
- See docstrings for ZenML Code
- Uses OAuth2 with refresh token — requires setup of connected app in api
- ZenML pipelines facilitate the development and integration of modular Steps.
- ZenML pipelines facilitate modular development and integration of steps.
- Always nest the actual execution of the pipeline inside an `if __name__ == '__main__'`
  condition.
- Caching is enabled by default.
- Caching does not automatically detect changes within the file system or on external
  APIs.
- Managing and versioning this data correctly is essential for reproducibility and
  traceability within your ML pipelines.
- Assign custom names to artifacts for better discoverability.
- ZenML takes a proactive approach to data versioning.
- Artifacts are automatically versioned and stored in the artifact store.
- ZenML takes a proactive approach to data versioning, ensuring that every artifact
  is automatically tracked and versioned upon pipeline execution.
- ZenML automatically logs metadata for pandas.Series and pandas.DataFrame objects.
- Models can be viewed within ZenML OSS (CLI) and Cloud (Dashboard).
- The starter template is the same as the ZenML mlops starter example.
- ZenML simplifies development of MLOps pipelines that can span multiple production
  stacks.
- ZenML is based on a local configuration using SQLite for metadata.
- ZenML can be deployed using a managed SaaS solution or self-hosted on a cloud provider.
- Stack configuration allows separation of code and infrastructure.
- The only configuration parameter mandatory for registering an S3 Artifact Store
  is the root path URI.
- The only configuration parameter mandatory for registering a GCS Artifact Store
  is the root path URI.
- The only configuration parameter mandatory for registering an Azure Artifact Store
  is the root path URI.
- Requires setup of connected app in ZenML
- Components such as orchestrators and container registries often require you to set
  up the right permissions.
- The Docker section can be populated with many different options.
- Configuration YAML is used to control the execution of the pipeline.
- Requires a GitHub Personal Access Token (PAT) with contents read-only access.
- Set up API key for machine-to-machine connection
- Use GitHub secrets to store API key securely
- Ensure to set up a connected app in ZenML for OAuth2.
- Some objects like Contact may return nulls in deeply nested fields
- Retrieval-Augmented Generation (RAG) is a powerful technique that combines the strengths
  of retrieval-based and generation-based models.
- Finetune embeddings on custom synthetic data to improve retrieval performance.
- ZenML doesn't implement its own scheduler but acts as a wrapper around the scheduling
  capabilities of supported orchestrators like Vertex AI, Airflow, Kubeflow, and others.
- 'Best Practice: Use Descriptive Schedule Names'
- ZenML doesn't implement its own scheduler but acts as a wrapper around the scheduling
  capabilities of supported orchestrators.
- When creating schedules, follow a consistent naming pattern to better organize them.
- ZenML acts as a wrapper around the scheduling capabilities of supported orchestrators
  like Vertex AI, Airflow, Kubeflow.
- A common issue with scheduled pipelines is timezone confusion.
- If you provide a datetime without timezone information, ZenML assumes it's in your
  local timezone and converts it to UTC for storage and communication with orchestrators.
- For cloud orchestrators like Vertex AI, schedules typically run in the orchestrator's
  timezone, which is usually UTC.
- ZenML doesn't implement its own scheduler but wraps around the scheduling capabilities
  of supported orchestrators.
- Cron expressions themselves don't have timezone information - they're interpreted
  in the timezone of the system executing them (which for cloud orchestrators is usually
  UTC).
- If you provide a timezone-aware datetime, ZenML will use it as is.
- To ensure your schedule runs at the expected time, use your local timezone or UTC
  explicitly for clarity.
- Cron expressions themselves don't have timezone information - they're interpreted
  in the timezone of the system executing them.
- Run Templates use your Workspace API for triggering pipelines externally.
- If you provide a timezone-aware datetime, ZenML will use it as is
- If you provide a datetime without timezone information, ZenML assumes it's in your
  local timezone and converts it to UTC for storage and communication with orchestrators
- Cron expressions themselves don't have timezone information - they're interpreted
  in the timezone of the system executing them
- Use Workspace API, Not ZenML Pro API
- When using the REST API, specify parameters at the step level.
- Run Templates use Workspace API credentials, not ZenML Pro API tokens.
- Production automation prefers organization-level service accounts and API keys.
- 'API Keys: Always use API keys or tokens for authentication'
- 'Principle of Least Privilege: Grant only necessary permissions to service accounts'
- 'Key Rotation: Rotate API keys regularly'
- 'Secure Storage: Store credentials in secure locations (not in code)'
- 'TLS: Use HTTPS for all API endpoints'
- Production automation in Pro prefers organization-level service accounts and API
  keys.
- 'Best Practice: Use Service Accounts for Automation'
- Uses OAuth2 with refresh token — requires setup of connected app in ZenML
- Ensure to use Workspace API credentials for authentication
- Production automation prefers organization-level service accounts and API keys over
  temporary user tokens.
- Always use API keys or tokens for authentication
- Grant only necessary permissions to service accounts
- Rotate API keys regularly
- Store credentials in secure locations (not in code)
- Use HTTPS for all API endpoints
- Always use service accounts with API keys instead of personal access tokens.
- Tokens don't expire automatically like user tokens (1 hour).
- Workspace API credentials are needed for authentication.
- Run Templates use your Workspace API, not the ZenML Pro API.
- For production automation in Pro, prefer organization‑level service accounts and
  API keys.
- When using the REST API, you need to specify parameters at the step level, not at
  the pipeline level.
- Tokens for service accounts do not expire automatically.
- Use Workspace API, not ZenML Pro API.
- 'Best practice: Use service accounts for automation.'
- Run Templates use your Workspace API, not ZenML Pro API.
- Run Templates use your Workspace API, which requires Workspace API credentials.
- For production automation, prefer organization-level service accounts and API keys.
- Use Workspace API for triggering pipelines.
- Service accounts with API keys are recommended for automation.
- When using the REST API, specify parameters at the step level
- Production authentication prefers organization-level service accounts and API keys.
- Uses organization-level service accounts and API keys for production automation.
- Always use service accounts with API keys for automation
- When using the REST API, specify parameters at the step level, not at the pipeline
  level.
- Run Templates use your Workspace API credentials, not ZenML Pro API tokens.
- Uses API keys for authentication.
- Always use service accounts with API keys instead of personal access tokens for
  automation.
- Tokens should be stored securely.
- Prefer organization-level service accounts and API keys over temporary user tokens.
- Workspace API requires organization-level service accounts and API keys for production
  automation.
- Always use service accounts with API keys instead of personal access tokens
- ZenML prevents concurrent pipeline execution.
- For production environments, consider deploying pipeline triggers through container
  orchestration platforms.
- For production run template triggering, always use service accounts with API keys
  instead of personal access tokens.
- Currently ZenML doesn't allow passing a variable number of inputs into a step. The
  workaround shown above queries the artifacts after the fact via the Client.
- Production authentication requires organization-level service accounts and API keys.
- Use workspace API credentials for triggering run templates.
- Each pipeline can be executed many times, resulting in several Runs.
- Always use service accounts with API keys instead of personal access tokens for
  automation
- Each pipeline can be executed many times, resulting in several runs.
- The status of a pipeline run can be initialized, failed, completed, running, or
  cached.
- ZenML prevents concurrent pipeline execution
- Requires ZenML installed and configured
- List pipelines and discover their runs in Python or via the CLI
- Each step of a pipeline run can have multiple output and input artifacts
- The outputs of a step are accessible by name
- If there is only one output, you can use the `.output` property instead
- If there is only one output, you can use the .output property instead
- Check out the documentation to see what the output names of your steps are and how
  to customize them
- Output artifacts contain metadata specific to their data types.
- Visualizations for many common data types can be accessed via the ZenML dashboard.
- Component-specific metadata may vary based on stack components used.
- Ensure ZenML is installed and configured before using the API.
- The API provides methods to list pipelines and runs and access their details.
- Use the outputs attribute to inspect output artifacts of a step.
- Use the inputs attribute to get the input artifacts of a step.
- Artifact metadata accessible via the run_metadata attribute.
- If you're not sure what the output name of a step is, use the provided code to list
  all outputs of a step.
- Check your orchestrator's docs; some expose dedicated settings instead of ResourceSettings.
- Use the official CUDA images for TensorFlow/PyTorch or the pre‑built ones offered
  by AWS, GCP or Azure.
- When calling a step or pipeline from a notebook, ZenML needs to export the cell
  code into a standalone Python module.
- Access a specific input artifact using the inputs property
- Custom Dataset classes encapsulate data loading, processing, and saving logic.
- Best practices include using a common base class and modular step design.
- Data ingestion and preprocessing strategies for big data.
- ZenML allows for scaling data processing workflows with different techniques depending
  on dataset size.
- 'Environment Setup: Ensure that your execution environment (local or remote) has
  the necessary frameworks (Spark or Ray) installed.'
- 'Resource Management: When using these frameworks within ZenML steps, be mindful
  of resource allocation.'
- Output artifacts can be accessed via the outputs attribute.
- Input artifacts can be accessed via the inputs attribute.
- Progressively scaling ZenML pipelines is essential as datasets grow.
- Dask can be used for parallel computing with large datasets.
- If your orchestrator supports it you can reserve CPU, GPU and RAM directly on a
  ZenML @step.
- Accelerate‑decorated steps must be called with keyword arguments and cannot be wrapped
  a second time inside the pipeline definition.
- Start with simpler strategies for smaller datasets and move to more complex solutions
  as your data grows.
- Simple aggregations might be handled by BigQuery, while complex ML preprocessing
  might require Spark or Ray.
- Ensure you have the necessary compute resources for distributed processing.
- Consider how often your data changes and how frequently you need to reprocess it.
- Choose technologies that your team is comfortable with or can quickly learn.
- ZenML provides various strategies for handling big data.
- When calling a step or pipeline from a notebook, ZenML needs to export the cell
  code into a standalone Python module that gets packaged into a Docker image.
- Ensure that your execution environment (local or remote) has the necessary frameworks
  (Spark or Ray) installed.
- When using these frameworks within ZenML steps, be mindful of resource allocation.
- Implement proper error handling and cleanup, especially for shutting down Spark
  sessions or Ray runtime.
- Consider how data will be passed into and out of the distributed processing step.
  You might need to use intermediate storage (like cloud storage) for large datasets.
- While these frameworks allow for distributed processing, you'll need to ensure your
  infrastructure can support the scale of computation you're attempting.
- ZenML allows for the integration of distributed computing frameworks like Apache
  Spark or Ray.
- Some objects may return nulls in deeply nested fields
- ZenML allows handling of big data through scalable pipelines.
- ZenML does not have built-in integrations for distributed computing frameworks like
  Apache Spark or Ray.
- Uses ZenML for orchestrating and managing machine learning pipelines.
- Allows for integration with various alerters, orchestrators, and scheduling tools.
- Consider how data will be passed into and out of the distributed processing step.
- Create models with meaningful names that reflect the ML capability or business feature
  they represent
- Use consistent metadata keys across versions for better comparison and tracking
- When developing pipelines, it's common to run and debug them multiple times.
- To avoid cluttering the server with these development runs, ZenML provides several
  options.
- Unlisted runs are not displayed on the pipeline's page in the dashboard.
- Pipelines can be given unique names each time they are run to uniquely identify
  them.
- ZenML deployments often involve multiple environments.
- The client environment typically follows these key steps when starting a pipeline.
- Use version control for shared code repositories.
- Implement proper access controls for private PyPI servers or shared repositories.
- Maintain clear documentation for shared components and libraries.
- Regularly update shared libraries and communicate changes to the team.
- Consider setting up continuous integration for shared libraries to ensure quality
  and compatibility.
- 'ZenML provides two powerful organization mechanisms: Tags and Projects.'
- Use a dedicated secret store in production instead of the default file-based store
- Dramatically faster builds - Only project-specific packages need installation
- Consistent environments - Everyone uses the same base libraries
- Simplified dependency management - Core dependencies defined once
- Reduced cloud costs - Spend less on compute for image building
- Lower network usage - Download common large packages just once
- One of the easiest ways to avoid cluttering a shared server / dashboard is to disconnect
  your client from the remote server and simply spin up a local server.
- 'If you want to delete a specific pipeline run, you can use a script like this:
  zenml pipeline runs delete <PIPELINE_RUN_NAME_OR_ID>.'
- This allows you to start fresh with a new pipeline, removing all previous runs associated
  with the deleted pipeline.
- Pipeline tagging is flexible and can be applied during runtime.
- Sharing code libraries allows for incremental improvements, increased robustness,
  and standardization across projects.
- Implement and share custom components as described in ZenML documentation.
- Requires ZenML Pro account for Projects functionality
- Tags can be used to organize pipelines, artifacts, and models
- Uses tags for organizing ML assets.
- Requires ZenML Pro account for project organization.
- Uses OAuth2 with refresh token — requires setup of connected app in zenml
- Effective organization of ML assets using tags and projects
- Requires ZenML Pro account for project features
- A well-designed tagging strategy helps maintain organization as your ML project
  grows
- Use consistent tag naming conventions - Create a tag registry to ensure consistency
- Apply tags at all levels - Tag pipelines, runs, artifacts, and models
- Create meaningful tag categories - Environment, domain, status, algorithm type,
  etc.
- Use exclusive tags for state management - Perfect for tracking current production
  models
- Combine tags with projects for complete organization - Use projects for major boundaries,
  tags for cross-cutting concerns
- Document your tagging strategy - Ensure everyone on the team follows the same conventions
- 'Regular Audits: Conduct periodic reviews of user access and permissions.'
- 'Role-Based Access Control (RBAC): Implement RBAC to streamline permission management.'
- 'Least Privilege: Grant minimal necessary permissions to each role.'
- 'Documentation: Maintain clear documentation of roles, responsibilities, and access
  policies.'
- Recommended project structure includes separate folders for steps and pipelines.
- ZenML records logging output into the artifact store.
- ZenML provides organization mechanisms like Tags and Projects.
- Flexible service connector setup adapts to environment
- Pipelines can be tagged for better organization.
- Projects provide logical separation between different initiatives.
- A well-architected ZenML project is crucial for the success of your machine learning
  operations (MLOps).
- Proper access management ensures that team members have the right permissions and
  responsibilities.
- ZenML uses Copier to manage its project templates.
- Ensure your ZenML library and extension versions are compatible
- Check your server connection settings
- Verify that your authentication credentials are correct
- Different ML projects often require strict isolation of data and security.
- Keep configurations DRY using locals and variables
- Use consistent naming conventions across resources
- Document all required configuration fields
- Consider component dependencies when organizing stacks
- Separate infrastructure and ZenML registration state
- Use Terraform workspaces for different environments
- Ensure that the ML operations team manages the registration state to maintain control
  over the ZenML stack components and their configurations.
- ZenML project templates cover major use cases of ZenML.
- For the best experience, we recommend using the latest version of both the ZenML
  library and the extension
- MCP follows a client-server architecture where MCP Clients access data through MCP.
- Debugging and Solving Issues
- A guide to debug common issues and get help.
- ZenML MCP Server allows triggering new pipeline runs through existing run templates.
- First-time users will need to set up a workspace and project.
- Uses FastAPI app for triggering ZenML pipeline
- 'All data remains on customer infrastructure: both ML metadata in OSS Metadata Store
  and actual ML data artifacts in customer Artifact Store'
- Data stays within customer boundary; moves between pipeline steps via the Orchestrator
- Accessible only through customer infrastructure; no ZenML-managed components have
  access
- Complete data isolation from ZenML-managed services
- Metadata flows to ZenML Pro Control Plane; ML data artifacts stay on customer infrastructure;
  ZenML services access customer infrastructure using stored credentials
- ZenML Pro has access to the customer secrets that are explicitly stored; Workspace
  optionally needs read access to artifact store for dashboard display; No actual
  ML data moves to ZenML infrastructure unless explicitly shared
- Only metadata and credentials are stored on ZenML infrastructure; actual ML data
  remains isolated on customer infrastructure
- Control Plane on ZenML infrastructure; Workspace, DB, Secret Store, Orchestrator,
  and Artifact Store on customer infrastructure
- Only authentication/authorization data flows to ZenML; All ML data and metadata
  stays on customer infrastructure
- ZenML Control Plane has limited access to user management data; No access to actual
  ML data or metadata; Customer maintains all data access controls
- Strong data isolation with only authentication events crossing boundary. Allows
  securing access via VPN/private networks
- All components run on customer infrastructure
- All data movement contained within customer infrastructure boundary
- No external access to any data; completely air-gapped operation possible
- Complete data isolation; ZenML has no access to any customer data
- Production environments are designed to handle large-scale workloads, allowing your
  models to process more data and deliver faster results.
- A shared production environment enables seamless collaboration between team members,
  making it easier to iterate on models and share insights.
- Uses FastAPI to trigger a ZenML pipeline
- The ZenML server container image is available at `zenmldocker/zenml-server`.
- ZenML Pro offers many additional features to increase your team's productivity.
- This architecture strikes a balance between convenience and control, making it a
  popular choice for enterprises looking to standardize their MLOps practices while
  maintaining sovereignty.
- If none of the ZENML_STORE_* variables are set, the container will default to creating
  and using an SQLite database file stored at /zenml/.zenconfig/local_stores/default_zen_store/zenml.db
  inside the container.
- You need to visit the ZenML dashboard at http://localhost:8080 to activate the server
  by creating an initial admin user account.
- ML metadata in ZenML-hosted DB; Actual ML data artifacts in customer Artifact Store;
  Secrets in ZenML-managed Secret Store
- Strong data isolation with only authentication events crossing boundary. Allows
  securing access via VPN/private networks.
- Using an external MySQL-compatible database service is optional, but is recommended
  for production deployments.
- If omitted, ZenML will default to using an embedded SQLite database.
- Moving your ZenML Server to a production environment offers several benefits over
  staying local.
- This method does not work if your Ingress controller is behind a load balancer that
  uses a hostname mapped to several IP addresses instead of an IP address.
- The ZenML UI does not support URL rewriting and will not work properly if you use
  a dedicated Ingress URL path.
- The ZenML server container image is available at zenmldocker/zenml.
- Uses an external MySQL-compatible database for production deployments.
- ZenML defaults to using an embedded SQLite database if no external database is provided.
- The ZenML server container image is available at `zenmldocker/zenml-server`
- The SQL database is used as the default secret store location.
- If you configure encryption for your SQL database secrets store, you should keep
  the encryptionKey value somewhere safe and secure.
- The minimum set of permissions must be attached to the implicit or configured AWS
  credentials.
- The SQLite database is not persisted, meaning that it will be lost if the ZenML
  server pod is restarted or deleted.
- Using an external MySQL-compatible database is optional, but recommended for production
  deployments.
- 'This method has one current limitation: the ZenML UI does not support URL rewriting
  and will not work properly if you use a dedicated Ingress URL path.'
- ZenML will default to using an embedded SQLite database, which has limitations.
- use the GCP project NUMBER, not the project ID in the condition
- SQLite database is not persisted, meaning that it will be lost if the ZenML server
  pod is restarted or deleted.
- Using an externally managed secrets management service is optional, but is recommended
  if you are already using those cloud service providers.
- The ZenML UI does not support URL rewriting.
- Using an external database is recommended for production deployments.
- Using an external secrets management service is optional.
- It is recommended to use an external MySQL-compatible database service for production
  deployments.
- Limit access to secrets with prefix zenml
- Uses a temporary SQLite database for minimal deployments.
- SQLite database is not persisted, meaning that it will be lost if the ZenML server
  pod is restarted or deleted
- SQLite database does not scale horizontally
- Default to using an embedded SQLite database, which has limitations.
- Set to false to disable the secrets store.
- The SQL database is used as the default location where the ZenML secrets store keeps
  the secret values.
- A backup secrets store back-end may be configured for high-availability and backup
  purposes.
- If omitted, ZenML will default to using an embedded SQLite database, which has limitations.
- Default secrets store backend is SQL database.
- Encryption at rest is recommended for SQL database.
- ZenML can use an external MySQL-compatible database for production deployments.
- Embedded SQLite database is not persisted and does not scale horizontally.
- The SQLite database is not persisted, meaning that it will be lost if the ZenML
  server pod is restarted or deleted
- The SQLite database does not scale horizontally, meaning that you will not be able
  to use more than one replica at a time for the ZenML server pod
- ZenML defaults to using an embedded SQLite database, which is not persisted and
  does not scale horizontally.
- Uses a Kubernetes cluster for deployment
- Recommended to use an external MySQL-compatible database for production
- Automatically backs up the database before every upgrade.
- Uses an external MySQL-compatible database for production deployments
- Default to SQLite if no external database is provided
- Make sure you have persistent storage turned on to prevent loss of data.
- The space visibility needs to be set to 'Public' to connect to the ZenML server
  from your local machine.
- Deploying ZenML with custom Docker images is only possible for Docker or Helm deployments.
- Use credentials with the documented minimum required permissions to access the secrets
  store back-end.
- If you lose the encryption key, you will not be able to decrypt the secrets anymore
  and will have to reset them.
- 'Automation fails after 1 hour: switch from temporary API tokens to service accounts
  + API keys.'
- Using an external MySQL-compatible database service is recommended for production
  deployments.
- If using SSL, you may need to prepare additional SSL certificates and keys.
- Using the ZenML CLI is a secure and comfortable way to interact with your ZenML
  servers. It's important to always ensure that only trusted devices are used to maintain
  security and privacy.
- API tokens provide a way to authenticate with the ZenML server for temporary automation
  tasks.
- These tokens are scoped to your user account and are valid for a maximum of 1 hour.
- If you configure encryption for your SQL database secrets store, keep the encryptionKey
  value safe.
- API keys don't have an expiration date.
- For increased security, regularly rotate the API keys to prevent unauthorized access.
- If you are planning to use HuggingFace Spaces for production use, make sure you
  have persistent storage turned on so as to prevent loss of data.
- The default ZenML application will be configured to use an SQLite non-persistent
  database.
- Downgrading is not supported
- Client-server version alignment should be maintained
- Two workspaces keep upgrades safe.
- GitOps makes them repeatable.
- A simple pipeline test suite keeps you honest.
- Setting up a ZenML server for production requires best practices.
- 'Can’t find Run Template endpoints: they exist on the Workspace/OSS API, not on
  `cloudapi.zenml.io`.'
- 'If you see an error like `ERROR 1045 (28000): Access denied for user <USER> using
  password YES`, it means that the username or password is incorrect.'
- 'If you see an error like `ERROR 2003 (HY000): Can''t connect to MySQL server on
  <HOST> (<IP>)`, it means that the host is incorrect.'
- Using the ZenML CLI is a secure and comfortable way to interact with your ZenML
  servers.
- Migrations are necessary for ZenML releases that include breaking changes
- Follow each migration guide in order if there is more than one migration guide
- Steps and Pipelines are the core building blocks of ZenML
- Service accounts are not available in ZenML Pro
- API keys don't have an expiration date
- 'Two environments: Production and Staging.'
- 'ZenML Pro users: use two workspaces.'
- 'ZenML OSS users: run two ZenML servers.'
- Configuring the pipeline with .configure() modifies the configuration in-place.
- Using .with_options() creates a new copy with the applied configuration.
- Setting up a ZenML server for testing is a quick process.
- Most people have to move beyond so-called 'day zero' operations.
- Configurations in code override configurations made inside of the yaml file
- Configurations at the step level override those made at the pipeline level
- ZenML provides several approaches to configure your pipelines and steps.
- If you want to generate a template yaml file of your specific pipeline, you can
  do so by using the .write_run_configuration_template() method.
- This will generate a yaml file with all options commented out. This way you can
  pick and choose the settings that are relevant to you.
- ZenML allows for creating reusable steps and pipelines.
- Schedules don't work for all orchestrators.
- Check out our tutorial on scheduling for a practical guide on how to schedule a
  pipeline.
- Steps and Pipelines are the core building blocks of ZenML.
- Setting environment variables on your local machine only affects local pipeline
  runs
- For remote pipeline runs, you must set these variables in the pipeline's execution
  environment using Docker settings
- Uses ZenML for pipeline configuration.
- Steps are automatically cached based on their inputs.
- By default, pipelines run synchronously, with terminal logs displaying as the pipeline
  builds and runs.
- Hooks allow you to execute custom code at specific points in the pipeline or step
  lifecycle.
- Some orchestrators may ignore resource settings.
- ZenML determines step execution order based on data dependencies.
- Step-level hooks take precedence over pipeline-level hooks.
- Logs collected from your ZenML client while triggering and waiting for a pipeline
  to run.
- Logs collected from the execution of individual steps.
- This pattern enables dynamic scaling, true parallelism, and database-driven workflows.
- Key advantages include fault tolerance and separate monitoring for each chunk.
- Consider resource management and proper error handling when implementing.
- Pipeline run names must be unique.
- Retries happen at the step level, not the pipeline level.
- Cache invalidation happens automatically when step inputs change, step code changes,
  or step configuration changes.
- Cache invalidation happens automatically when Step inputs change.
- You can control caching behavior at the step level.
- Cache invalidation happens automatically when step inputs change.
- This pattern enables dynamic scaling, true parallelism, and database-driven workflows.
  Key advantages include fault tolerance and separate monitoring for each chunk. Consider
  resource management and proper error handling when implementing.
- ZenML provides configuration capabilities through YAML files that allow you to customize
  pipeline and step behavior without changing your code.
- You can run a single step directly.
- Pipelines run synchronously by default.
- YAML configuration allows customization of pipeline and step behavior without changing
  code.
- Fan-out/fan-in pipeline that orchestrates dynamic chunk processing
- Chunk processing pipeline template creation is typically done once during setup
- Steps run sequentially rather than in parallel if the underlying orchestrator does
  not support parallel step runs
- This hierarchy allows you to define base configurations at the pipeline level and
  override them for specific steps as needed.
- Use caching for steps if enabled in configuration
- YAML configuration allows customization without changing code.
- ZenML supports various execution control features.
- Tracks versioning and lineage of artifacts.
- Supports multiple output types from steps.
- ZenML supports many common data types out of the box.
- ZenML provides configuration capabilities through YAML files.
- This allows you to change pipeline behavior without modifying your code.
- When using Docker-based orchestrators, you must specify the appropriate integrations
  in your DockerSettings to ensure the materializers are available inside the container.
- Skipping materialization might have unintended consequences for downstream tasks
  that rely on materialized artifacts.
- Only skip materialization if there is no other way to do what you want to do.
- Always use self.artifact_store.open() rather than direct file I/O to ensure compatibility
  with different artifact stores.
- Artifacts are tracked, versioned, and stored in the artifact store.
- Prefer structured formats over pickle or other binary formats for better cross-environment
  compatibility.
- Test your materializer with different artifact stores (local, S3, etc.) to ensure
  it works consistently.
- Consider versioning if your data structure might change over time.
- Create visualizations to help users understand your artifacts in the dashboard.
- Extract useful metadata to make artifacts easier to find and understand.
- Be explicit about materializer assignments for clarity, even if ZenML can detect
  them automatically.
- Avoid using the CloudpickleMaterializer in production as it's not reliable across
  different Python versions.
- Visualizing artifacts is a powerful way to gain insights from your ML pipelines.
- You can control whether visualizations are generated at the pipeline or step level.
- Uses local stack by default — requires no additional setup.
- Skipping materialization might have unintended consequences for downstream tasks
  that rely on materialized artifacts. Only skip materialization if there is no other
  way to do what you want to do.
- Service connectors abstract away complexity and implement security best practices
- An unmaterialized artifact is a zenml.materializers.UnmaterializedArtifact.
- ZenML executes pipeline steps sequentially in the active Python environment when
  running locally.
- With remote orchestrators, ZenML builds Docker images to run your pipeline in an
  isolated environment.
- Materializers should in most cases be used to control how artifacts are returned
  and consumed from pipeline steps.
- With remote orchestrators or step operators, ZenML builds Docker images to run your
  pipeline in an isolated, well-defined environment.
- ZenML provides built-in capabilities to visualize artifacts.
- Stacks provide environment flexibility and infrastructure separation.
- ZenML stacks provide environment flexibility, infrastructure separation, specialized
  resources, team collaboration, and reproducibility.
- ZenML provides built-in support for using GitHub as a code repository for your ZenML
  pipelines.
- ZenML also provides built-in support for using GitLab as a code repository for your
  ZenML pipelines.
- Secrets are groupings of key-value pairs which are securely stored in the ZenML
  secrets store.
- If any of the options regarding requirements, environment variables, or copying
  files require us to build an image, ZenML will build this image.
- ZenML secrets are groupings of key-value pairs which are securely stored in the
  ZenML secrets store.
- Some components in your stack require you to configure them with sensitive information
  like passwords or tokens.
- When a pipeline is run with a remote orchestrator, a Dockerfile is dynamically generated
  at runtime.
- ZenML allows logging of metadata using the log_metadata function.
- Requires a GitHub Personal Access Token with appropriate permissions.
- Metadata in ZenML provides critical context to your ML workflows, allowing you to
  track additional information about your steps, runs, artifacts, and models.
- Metadata in ZenML provides critical context to your ML workflows.
- Tags are visible in the ZenML Dashboard
- OAuth2 with refresh token is required for authentication.
- Ensure to set up the API token for seamless integration.
- The primary way to log metadata in ZenML is through the `log_metadata` function.
- 'Consistent Naming: Use consistent naming conventions for models and versions'
- 'Rich Metadata: Log comprehensive metadata to provide context for each model version'
- 'Promotion Strategy: Develop a clear strategy for promoting models through stages'
- 'Model Association: Associate pipelines with models to maintain lineage and enable
  artifact sharing'
- 'Versioning Strategy: Choose between explicit versioning and template-based versioning
  based on your needs'
- Visual dashboard for exploring and managing models is only available in ZenML Pro.
- The visual dashboard for exploring and managing models is only available in ZenML
  Pro.
- Run Templates are a ZenML Pro-only feature.
- Visual dashboard for model management only available in ZenML Pro.
- 'Important: You need to recreate your run templates after upgrading your ZenML server.'
- ZenML Pro feature includes visual dashboard for model management.
- You need to recreate your run templates after upgrading your ZenML server.
- You need to recreate your run templates after upgrading your ZenML server. Templates
  are tied to specific server versions and may not work correctly after an upgrade.
- Model Control Plane is a ZenML Pro feature.
- Visual dashboard for exploring models is only available in ZenML Pro.
- Pipeline templates are a ZenML Pro-only feature.
- To create a template, you need to have an active remote stack.
- 'Use Tags: Apply consistent tags to pipelines, runs, and artifacts to make filtering
  more effective'
- 'Naming Conventions: Create clear naming conventions for pipelines and artifacts'
- 'Regular Cleanup: Archive or delete unnecessary runs to maintain dashboard performance'
- 'Capture Rich Metadata: The more metadata you track, the more valuable your dashboard
  visualizations become'
- The visual dashboard for model management is only available in ZenML Pro.
- The dashboard provides essential capabilities to enhance your ML workflow management.
- Creating ML infrastructure stacks through the dashboard is intuitive and visual.
- You need to select a pipeline run that was executed on a remote stack when creating
  the template.
- ZenML will install and look for its repository at the path set by the ZENML_REPOSITORY_PATH
  environment variable.
- Setting ZENML_ANALYTICS_OPT_IN to false opts out of analytics.
- Setting ZENML_DEBUG to true switches to developer mode.
- Setting ZENML_ACTIVE_STACK_ID to a specific UUID makes the corresponding stack the
  active stack.
- Setting ZENML_PREVENT_PIPELINE_EXECUTION to true prevents a pipeline from executing.
- Setting ZENML_ENABLE_RICH_TRACEBACK to false disables the rich traceback.
- Setting ZENML_LOGGING_COLORS_DISABLED to true disables colorful logging.
- Setting ZENML_SKIP_STACK_VALIDATION to true disables stack validation.
- Setting ZENML_CODE_REPOSITORY_IGNORE_UNTRACKED_FILES to True allows ignoring untracked
  files.
- Setting ZENML_CONFIG_PATH defines the global config file path.
- Run Templates are a ZenML Pro-only feature
- You need to recreate your run templates after upgrading your ZenML server
- Point the LLM to the `docs.zenml.io/llms.txt` URL when asking questions about ZenML
- While prompting, instruct the LLM to only provide answers based on information contained
  in the file to avoid hallucinations
- For best results, use models with sufficient context window to process the entire
  file
- Pipeline templates (Run Templates) are a ZenML Pro-only feature.
- Use version control for your template configurations when storing them as YAML files
- Pipelines automatically generate visualizations in the dashboard
- The ZenML dashboard provides visualization and management capabilities for ML workflows.
- Main gathering point for the community is the ZenML Slack channel.
- The local orchestrator is part of your default stack when you're first getting started
  with ZenML.
- Due to it running locally on your machine, it requires no additional setup and is
  easy to use and debug.
- Choose from INFO, WARN, ERROR, CRITICAL, DEBUG for logging verbosity.
- ZenML stores step logs in the artifact store, but this can sometimes cause performance
  bottlenecks.
- ZenML officially supports Windows if you're using WSL.
- ZenML does support Macs running on Apple Silicon.
- Manually altering or deleting the files and folders stored under the ZenML global
  config directory is not recommended, as this can break the internal consistency
  of the ZenML configuration.
- The active stack is not set. Setting the active stack to the default stack.
- It requires no additional setup and is easy to use and debug.
- The Artifact Store is a mandatory component in the ZenML stack.
- ZenML provides higher-level APIs that can be used as an alternative to store and
  access artifacts.
- Every Artifact Store has a path attribute that must be configured.
- Builds your Docker images locally.
- 'Builds your Docker images in Kubernetes using Kaniko. **Note: Kaniko project was
  archived in June 2025.**'
- Builds your Docker images using Google Cloud Build.
- Builds your Docker images using AWS Code Build.
- Extend the image builder abstraction and provide your own implementation
- Currently, the SlackAlerter and DiscordAlerter are the available alerter integrations.
- It is straightforward to extend ZenML and build an alerter for other chat services.
- Alerters allow you to send messages to chat services.
- Each alerter integration comes with specific standard steps.
- Uses AzureML to execute steps
- Uses Kubernetes Pods to execute steps
- Uses Modal to execute steps
- Uses SageMaker to execute steps
- Uses Spark on Kubernetes to execute steps in a distributed manner
- Uses Vertex AI to execute steps
- Extend the step operator abstraction and provide your own implementation
- All alerters provide an ask() method for human-in-the-loop workflows.
- Response keywords are case-sensitive.
- Requires OAuth2 authentication with a connected app setup in ZenML.
- Kaniko project was archived in June 2025.
- Alerters allow sending messages to chat services.
- No authentication required for accessing feature stores.
- Response keywords are case-sensitive (except Slack, which converts to lowercase)
- Ensure your bot has permissions to read messages in the target channel
- OAuth2 with refresh token is required
- Connect ZenML with already existing Feast
- Extend the feature store abstraction and provide your own implementation
- Model registries are centralized storage solutions for managing and tracking machine
  learning models.
- They provide a visual way to manage and track model metadata.
- Long-lived AWS credentials consisting of an AWS access key ID and secret access
  key associated with an AWS IAM user or AWS account root user (not recommended).
- An AWS region is required and the connector may only be used to access AWS resources
  in the specified region.
- Supports multiple resource types
- Requires AWS IAM permissions for access
- Supports auto-configuration
- Available locally and remotely
- Model registries are optional stack components provided by integrations.
- Allows access to GCS buckets with specific permissions.
- Requires AWS IAM permissions for EKS clusters
- Service Connectors can be verified after registration.
- Avoid using primary account password as authentication credentials.
- Implicit authentication gives immediate access to some cloud resources.
- The connector provides support for various authentication methods, including GCP
  user accounts, service accounts, short-lived OAuth 2.0 tokens and implicit authentication.
- 'The configured credentials must have at least the following GCP permissions associated
  with the GKE clusters that it can access: container.clusters.list, container.clusters.get.'
- Uses temporary credentials for CLI access.
- The SageMaker orchestrator utilizes the AWS configuration for operation and does
  not require direct connection via a service connector for authentication.
- Implicit authentication is disabled by default.
- Create role assignments following the principle of least privilege.
- Attaching automated workloads like ML pipelines to service accounts instead of user
  accounts acts as an extra layer of protection.
- Create a custom service account with only the minimum required permissions instead
  of using broad predefined roles.
- Always adhere to the principle of least privilege when setting up IAM roles.
- Implement a consistent labeling strategy for your GCP resources.
- Use Google Cloud's Cost Management tools to monitor and manage your spending.
- Regularly backup your critical data and configurations.
- The SageMaker orchestrator utilizes the AWS configuration for operation and does
  not require direct connection via a service connector for authentication, as it
  relies on your AWS CLI configurations or environment variables.
- Follow the principle of least privilege for role assignments.
- Make a note of the configuration values provided to you in the ZenML dashboard.
- These role assignments provide the minimum permissions required for ZenML operations.
- Avoid using broader roles like Contributor or Owner at the resource group level,
  as they grant unnecessary permissions.
- Terraform requires you to manage your infrastructure as code yourself.
- If you prefer a more automated approach, you can use the 1-click stack deployment
  feature.
- Create a dedicated service account with least privilege permissions.
- Use IAM and the least privilege principle.
- Regularly review and audit your IAM roles to ensure they remain appropriate and
  secure.
- The Kubernetes orchestrator requires a Kubernetes cluster in order to run.
- Recommended to use a Service Connector to connect to the remote cluster.
- The API key is shown only once during creation. Make sure to save it securely, as
  you cannot retrieve it later.
- Deploy a cloud stack from scratch with a single click
- If you have the required infrastructure pieces already deployed on your cloud, you
  can use the stack wizard to seamlessly register your stack.
- Ensure to save the API key securely as it cannot be retrieved later.
- For Pro users, the ZENML_SERVER_URL should be your Workspace URL, which can be found
  in your dashboard.
- An Azure Artifact Store linked to an Azure Storage Account and Blob Container via
  an Azure Service Connector configured with Azure Service Principal credentials
- An ACR Container Registry linked to an Azure Container Registry via an Azure Service
  Connector configured with Azure Service Principal credentials
- The ZENML_SERVER_URL should be your Workspace URL from the dashboard.
- If you select `aws` as your cloud provider, and you haven't selected a connector
  or declined auto-configuration, you will be prompted to select an authentication
  method for your cloud connector.
- API key is shown only once during creation.
- Remember to never commit sensitive files to version control
- Use appropriate IAM roles and permissions
- Follow your organization's security practices for handling credentials
- The API key is shown only once during creation. Make sure to save it securely.
- For Pro users, ZENML_SERVER_URL should be your Workspace URL from the dashboard
- API key is generated only once during service account creation.
- 'For ZenML Pro users: The `ZENML_SERVER_URL` should be your Workspace URL.'
- Remember to never commit sensitive variables to version control
- A Dockerfile is dynamically generated at runtime.
- ZenML is built around the values of composability and reusability.
- If any options regarding requirements, environment variables, or copying files require
  an image, ZenML will build this image.
- ZenML builds Docker images to run your pipeline in an isolated environment.
- Ensure your image contains everything necessary to run your pipeline.
- Uses OAuth2 authentication.
- A step operator should be used if one or more steps of a pipeline require resources
  that are not available in the runtime environments provided by the orchestrator.
- This component is only meant to be used within the context of a remote ZenML deployment
  scenario. Usage with a local ZenML deployment may lead to unexpected behavior!
- This component is only meant to be used within the context of a remote ZenML deployment
  scenario.
- If one or more of the deployments are not in the Running state, try increasing the
  number of nodes in your cluster.
- Make sure the Kubernetes service is called exactly ml-pipeline.
- Kubeflow has a notion of multi-tenancy built into its deployment.
- Using the ZenML Kubeflow orchestrator on a multi-tenant deployment without settings
  will result in an error.
- Dockerfile is dynamically generated at runtime.
- ZenML Pro offers managed deployment with workspaces.
- Users can deploy ZenML using Docker, Helm, or HuggingFace Spaces.
- Deploying ZenML Server is crucial for production-grade environment
- Access to powerful features for stacks with remote components
- Workspaces were previously called 'Tenants' in earlier versions of ZenML Pro.
- SSO feature is currently not available in the on-prem version of ZenML Pro.
- Multi-tenancy support may require additional configuration.
- Remember to maintain the same version tags when copying images to your internal
  registry to ensure compatibility between components.
- Kubeflow's multi-user isolation simplifies user operations because each user only
  views and edited the Kubeflow components and model artifacts defined in their configuration.
- Ensure that you use the pass the right settings before triggering a pipeline run.
- Users can run the `zenml login --local` command to spin up a local ZenML OSS server
  to serve the dashboard.
- Deploying the ZenML Server is a crucial step towards transitioning to a production-grade
  environment for your machine learning projects.
- Both managed and self-hosted deployment options are available.
- The workspace ID must be globally unique across all ZenML instances and cannot be
  changed after creation.
- In the API documentation and some error messages, you might still see references
  to 'tenant' instead of 'workspace'.
- The ZenML Pro Control Plane can only be connected to a MySQL database (no Postgres
  support is available).
- The SSO feature is currently not available in the on-prem version of ZenML Pro.
- 'Use the following credentials: Username: admin, Password: fetch the password by
  running: kubectl get secret --namespace zenml-pro zenml-pro -o jsonpath=''{.data.ZENML_CLOUD_ADMIN_PASSWORD}''
  | base64 --decode; echo'
- Ensure the Ingress provider is properly configured to expose the cluster's services
  externally.
- Requires a Kubernetes cluster and external database setup.
- Only the admin account will be able to reset the password.
- Container images must be tagged correctly when pushed to the internal registry.
- Use the default administrator user account provisioned on installation.
- 'Fetch the password by running: kubectl get secret --namespace zenml-pro zenml-pro
  -o jsonpath=''{.data.ZENML_CLOUD_ADMIN_PASSWORD}'' | base64 --decode; echo'
- Run Templates feature is only available from ZenML workspace server version 0.81.0
  onwards.
- Creating user accounts is not currently supported in the ZenML Pro dashboard.
- SSO (Single Sign-On) feature is currently not available in the on-prem version of
  ZenML Pro.
- Ensure Kubernetes cluster is functional.
- Use separate database for each ZenML Pro Workspace.
- The workspace will remain in a 'provisioning' state and won't be accessible until
  you actually install it using Helm.
- Installing and updating on-prem ZenML Pro workspace servers is not automated.
- SSO feature is currently not available in the on-prem version of ZenML Pro
- Ensure you have a valid username and password for the different ZenML Pro services.
- Don't use the same database name for multiple workspaces.
- Don't reuse the control plane database name for the workspace server database.
- Minimum required settings include database credentials, server URL, and Ingress
  hostname.
- Ensure proper configuration for connector types.
- Requires setup of connected app in api
- Builds your Docker images in Kubernetes using Kaniko.
- Extend the image builder abstraction and provide your own implementation.
- The Great Expectations Data Validator flavor is included in the Great Expectations
  ZenML integration
- Default Data Validator setup plugs Great Expectations directly into the Artifact
  Store
- Great Expectations works with tabular data in a variety of formats and data sources,
  of which ZenML currently supports only pandas.DataFrame as part of its pipelines.
- Some Great Expectations CLI commands will not work well with the deployment methods
  that puts ZenML in charge of your Great Expectations configuration.
- Secrets are essential for both traditional ML workflows and AI agent development.
- The default Data Validator setup plugs Great Expectations directly into the Artifact
  Store component that is part of the same stack.
- Secrets are essential for both traditional ML workflows and AI agent development
- Type annotations are highly recommended for better artifact handling, type validation,
  and documentation.
- The step configuration expects a name to be used for the Expectation Suite.
- The Great Expectations Data Validator flavor is included in the Great Expectations
  ZenML integration.
- If you have an existing Great Expectations configuration that you would like to
  reuse with your ZenML pipelines, the Data Validator allows you to do so.
- Secrets are essential for both traditional ML workflows (database credentials, model
  registry access) and AI agent development (LLM API keys, third-party service credentials).
- Some components in your stack require you to configure them with sensitive information
  like passwords or tokens, so they can connect to the underlying infrastructure.
- Pipelines orchestrate steps, allowing outputs from one step to flow as inputs to
  others.
- Any artifacts will be saved as a zip file to the given path.
- Some API calls may have rate limits
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Check your OAuth token.'
- '429 Too Many Requests: Rate limit exceeded.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Ensure correct API key is provided.'
- '401 Unauthorized: Ensure proper API key usage.'
- '404 Not Found: Check the pipeline name and endpoint'
- '400 Bad Request: Ensure the request payload is formatted correctly'
- '401 Unauthorized: Recheck API key or permissions.'
- '401 Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Check API key or service account permissions.'
- '401 Unauthorized: Recheck API key or token permissions'
- '401 Unauthorized: Use service accounts with API keys for automation'
- '401 Unauthorized: Invalid API key'
- '401 Unauthorized: Use service accounts with API keys instead of personal access
  tokens.'
- '401 Unauthorized: Check your API key or permissions.'
- '401 Unauthorized: Check API key or permissions.'
- '401 Unauthorized: Recheck API key or service account credentials.'
- '401 Unauthorized: Check your API key and permissions.'
- '404 Not Found: The specified pipeline or template does not exist.'
- '404 Not Found: Pipeline not found'
- '404 Not Found: Check if the pipeline or run ID exists.'
- '500 Internal Server Error: Try again later or contact support.'
- Preventing execution of pipeline '<pipeline_name>'. If this is not intended behavior,
  make sure to unset the environment variable 'ZENML_PREVENT_PIPELINE_EXECUTION'.
- 'Run Not Found: Ensure the run ID is correct.'
- 'RUN_NOT_FOUND: Ensure correct run ID format.'
- 'RUN_NOT_FOUND: Ensure the run ID is correct.'
- 'INVALID_PIPELINE: Check if the pipeline exists or is registered.'
- '400 Bad Request: Check the request parameters for validity.'
- '401 Unauthorized: Verify your authentication credentials.'
- '404 Not Found: The requested resource does not exist.'
- 'GPU is unused: Verify CUDA toolkit inside container (nvcc --version), check driver
  compatibility'
- 'OOM even after cache reset: Reduce batch size, use gradient accumulation, or request
  more GPU memory'
- 'Accelerate hangs: Make sure ports are open between nodes; pass main_process_port
  explicitly'
- 'Run Not Found: Ensure you are using the correct run ID format.'
- '404 Not Found: Check the model or pipeline name'
- '400 Bad Request: Check the request parameters'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '404 Not Found: Check the endpoint URL or resource ID'
- '401 Unauthorized: Verify authentication credentials or token expiration'
- '400 Bad Request: Validate request parameters and body'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'INVALID_ARGUMENT: Check your input parameters'
- 'PERMISSION_DENIED: Ensure the right permissions are granted'
- 'NOT_FOUND: Resource does not exist'
- '400 Bad Request: Check your input parameters.'
- '404 Not Found: The requested resource could not be found.'
- Error initializing rest store
- Column 'step_configuration' cannot be null
- '''NoneType'' object has no attribute ''name'''
- '401 Unauthorized: verify you’re using the correct base URL, the token hasn’t expired,
  and the header is `Authorization: Bearer <token>`.'
- 'Revision not found: Drop the database and create a new one with the same name.'
- 'ERROR 1045 (28000): Access denied for user <USER> using password YES'
- 'ERROR 2003 (HY000): Can''t connect to MySQL server on <HOST> (<IP>)'
- ZENML_LOGGING_FORMAT='%(asctime)s %(message)s'
- ZENML_ENABLE_RICH_TRACEBACK=false
- ZENML_LOGGING_COLORS_DISABLED=true
- ZENML_DISABLE_STEP_LOGS_STORAGE=true takes precedence over the enable_step_logs
  parameter
- ZENML_DISABLE_PIPELINE_LOGS_STORAGE=true takes precedence over parameters set in
  the decorator or runtime configuration
- 'ZENML_DISABLE_STEP_LOGS_STORAGE=true: disables logging for this step'
- 'ZENML_DISABLE_PIPELINE_LOGS_STORAGE=true: disables client-side logging for this
  pipeline'
- Transient failures may occur due to network issues or resource limitations.
- Error handling is based on the execution mode configured.
- Steps may fail if dependencies are not met.
- '404 Not Found: Check if the endpoint is correct.'
- '401 Unauthorized: Check your access token and permissions'
- '404 Not Found: Verify the repository path'
- '401 Unauthorized: Check your OAuth scopes or token expiration.'
- '403 Forbidden: You do not have permission to access this resource.'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: The model or version you are trying to access does not exist.'
- If you want to configure whether logged output from steps is stored or not, set
  the ZENML_DISABLE_STEP_LOGS_STORAGE environment variable to true.
- 'Invalid URI schema: Ensure the URI schema matches the Artifact Store flavor.'
- Deployment cancelled by user
- '400 Bad Request: Check request parameters and body.'
- '401 Unauthorized: Ensure valid OAuth tokens are used.'
- '404 Not Found: Verify endpoint URL and resource existence.'
- 'ACCESS_DENIED: Check IAM permissions'
- 'RESOURCE_NOT_FOUND: Verify resource name and type'
- 'Invalid credentials: Check your service connector configuration.'
- 'Access denied: Ensure you have permission to access the resource.'
- '401 Unauthorized: Recheck authorization credentials'
- '401 Unauthorized: Recheck credentials or permissions.'
- '401 Unauthorized: Recheck access permissions.'
- '401 Unauthorized: Check your API key.'
- '401 Unauthorized: Recheck API key or service account.'
- 'Invalid API key: Check that the API key is correct'
- 'Service account invalid: Ensure the service account has the correct permissions'
- '401 Unauthorized: Recheck API key validity.'
- '401 Unauthorized: Recheck API key or authentication method.'
- 'Invalid input error: Invalid resource references for experiment. ListExperiment
  requires filtering by namespace.'
- '401 Unauthorized: Check your credentials and permissions.'
- '404 Not Found: Verify the endpoint path.'
- '401 Unauthorized: Check your image-pull-secret configuration.'
- '401 Unauthorized: Recheck credentials.'
- '404 Not Found: Verify endpoint paths.'
- '403 Forbidden: Check your access permissions'
- '404 Not Found: Ensure the endpoint exists'
- 'ValueError: If the path does not end with ''.zip''.'
- 'KeyError: If no secret exists for the given name in the given scope.'
auth_info:
  mentioned_objects:
  - Personal Access Token
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Workspace API
  - organization-level service accounts
  - Client
  - zenml_service_connector
  - zenml_stack_component
  - PersonalAccessToken
  - Model
  - pipeline
  - aws_access_key_id
  - aws_secret_access_key
  - region
  - aws-session
  - aws-key
  - service_account_json
  - project_id
  - ServiceConnector
  - kubernetes-cluster
  - IAM role
  - Service Account
  - Managed Identity
  - service-account
  - service_account
  - zenml_server_url
  - zenml_api_key
  - ZenMLProvider
  - ServiceAccount
  - image-pull-secret
  - SecretResponse
  - ServiceResponse
  - ServiceAccountResponse
  - ServiceConnectorResponse
client:
  base_url: https://zenml.io
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
