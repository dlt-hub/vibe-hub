resources:
- name: Application
  endpoint:
    path: /api/phalcon_mvc/#mvcapplication
    method: GET
    data_selector: records
    params: {}
- name: invoices
  endpoint:
    path: /co_invoices
    method: INSERT
    data_selector: records
    params: {}
- name: assets
  endpoint:
    path: /assets
    method: GET
    data_selector: assets
    params: {}
- name: Inline CSS
  endpoint:
    path: /assets/inline/css
    method: POST
    data_selector: assets
    params: {}
- name: Inline JS
  endpoint:
    path: /assets/inline/js
    method: POST
    data_selector: assets
    params: {}
- name: roles
  endpoint:
    path: /acl/roles
    method: GET
    data_selector: roles
- name: components
  endpoint:
    path: /acl/components
    method: GET
    data_selector: components
- name: admin
  endpoint:
    path: /admin
    method: GET
- name: reports
  endpoint:
    path: /reports
    method: GET
- name: session
  endpoint:
    path: /session
    method: GET
- name: cache_operations
  endpoint:
    path: /cache/operations
    method: GET
    data_selector: operations
- name: cache_exceptions
  endpoint:
    path: /cache/exceptions
    method: GET
    data_selector: exceptions
- name: cache_serializers
  endpoint:
    path: /cache/serializers
    method: GET
    data_selector: serializers
- name: cache_adapters
  endpoint:
    path: /cache/adapters
    method: GET
    data_selector: adapters
- name: cache_set
  endpoint:
    path: /set
    method: POST
    data_selector: result
    params:
      key: my-key
      value: data
- name: cache_set_multiple
  endpoint:
    path: /setMultiple
    method: POST
    data_selector: value
    params:
      keys:
        my-key1: data1
        my-key2: data2
      ttl: 9600
- name: cache_delete
  endpoint:
    path: /delete
    method: DELETE
    data_selector: result
    params:
      key: my-key
- name: cache_delete_multiple
  endpoint:
    path: /deleteMultiple
    method: DELETE
    data_selector: result
    params:
      keys:
      - my-key1
      - my-key2
- name: cache_clear
  endpoint:
    path: /clear
    method: POST
    data_selector: result
- name: nginx_configuration
  endpoint:
    path: /nginx
    method: GET
    data_selector: configuration
- name: php_fpm_configuration
  endpoint:
    path: /php-fpm
    method: GET
    data_selector: configuration
- name: Apache
  endpoint:
    path: /webserver-setup/#apache
    method: GET
    data_selector: none
- name: Lighttpd
  endpoint:
    path: /webserver-setup/#lighttpd
    method: GET
    data_selector: none
- name: WAMP
  endpoint:
    path: /webserver-setup/#wamp
    method: GET
    data_selector: none
- name: XAMPP
  endpoint:
    path: /webserver-setup/#xampp
    method: GET
    data_selector: none
- name: Cherokee
  endpoint:
    path: /webserver-setup/#cherokee
    method: GET
    data_selector: none
- name: Caddy
  endpoint:
    path: /webserver-setup/#caddy
    method: GET
    data_selector: none
- name: nginx_configuration
  endpoint:
    path: /webserver-setup/#phalcon-configuration
    method: GET
    data_selector: configuration
- name: my-phalcon
  endpoint:
    path: /shared/httpd/my-phalcon
    method: GET
- name: project
  endpoint:
    path: /shared/httpd/my-phalcon
    method: GET
    data_selector: directory_structure
    params: {}
- name: project_skeleton
  endpoint:
    path: /create-project
    method: POST
    data_selector: project
    params: {}
- name: controller
  endpoint:
    path: /create-controller
    method: POST
    data_selector: controller
    params: {}
- name: database_settings
  endpoint:
    path: /database-settings
    method: POST
    data_selector: database
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: records
- name: migrations
  endpoint:
    path: /db/migrations
    method: GET
    data_selector: migrations
    params: {}
- name: migrations
  endpoint:
    path: /migrations
    method: GET
    data_selector: records
- name: unit_test
  endpoint:
    path: /unit-testing
    method: GET
    data_selector: tests
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: config
  endpoint:
    path: /config/config.php
    method: GET
    data_selector: config
- name: session
  endpoint:
    path: /session/register
    method: GET
- name: session
  endpoint:
    path: /session/start
    method: POST
    data_selector: auth
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: session
  endpoint:
    path: /session/start
    method: POST
    data_selector: auth
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: products
  endpoint:
    path: /products/search
    method: GET
    data_selector: products
    params: {}
- name: products
  endpoint:
    path: /invo/products/search
    method: POST
    data_selector: products
    params: {}
- name: products
  endpoint:
    path: /products
    method: POST
    data_selector: products
- name: products
  endpoint:
    path: /products
    method: POST
    data_selector: product
    params: {}
- name: robots
  endpoint:
    path: /api/robots
    method: GET
    data_selector: null
    params: {}
- name: robots_search
  endpoint:
    path: /api/robots/search/{name}
    method: GET
    data_selector: null
    params: {}
- name: robots_by_id
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: GET
    data_selector: null
    params: {}
- name: add_robot
  endpoint:
    path: /api/robots
    method: POST
    data_selector: null
    params: {}
- name: update_robot
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: PUT
    data_selector: null
    params: {}
- name: delete_robot
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: DELETE
    data_selector: null
    params: {}
- name: robots
  endpoint:
    path: /api/robots
    method: GET
    data_selector: null
    params: {}
- name: search_robots
  endpoint:
    path: /api/robots/search/{name}
    method: GET
    data_selector: null
    params: {}
- name: get_robot
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: GET
    data_selector: null
    params: {}
- name: add_robot
  endpoint:
    path: /api/robots
    method: POST
    data_selector: null
    params: {}
- name: update_robot
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: PUT
    data_selector: null
    params: {}
- name: delete_robot
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: DELETE
    data_selector: null
    params: {}
- name: robots
  endpoint:
    path: /api/robots
    method: GET
    data_selector: data
    params: {}
- name: robots_search
  endpoint:
    path: /api/robots/search/{name}
    method: GET
    data_selector: data
    params: {}
- name: robots_id
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: GET
    data_selector: data
    params: {}
- name: robots_insert
  endpoint:
    path: /api/robots
    method: POST
    data_selector: data
    params: {}
- name: robots_update
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: PUT
    data_selector: data
    params: {}
- name: robots_delete
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: DELETE
    data_selector: data
    params: {}
- name: robots
  endpoint:
    path: /api/robots
    method: GET
    data_selector: data
    params: {}
- name: robot_search
  endpoint:
    path: /api/robots/search/{name}
    method: GET
    data_selector: data
    params: {}
- name: robot_by_id
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: GET
    data_selector: data
    params: {}
- name: insert_robot
  endpoint:
    path: /api/robots
    method: POST
    data_selector: data
    params: {}
- name: update_robot
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: PUT
    data_selector: data
    params: {}
- name: delete_robot
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: DELETE
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: records
    params: {}
- name: Session
  endpoint:
    path: /session/signup
    method: POST
    data_selector: form
- name: session
  endpoint:
    path: /session/signup
    method: POST
    data_selector: form
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: records
- name: users
  endpoint:
    path: /session/signup
    method: POST
    data_selector: user
    params: {}
- name: login
  endpoint:
    path: /session/login
    method: GET
- name: logout
  endpoint:
    path: /session/logout
    method: GET
- name: invoices_list
  endpoint:
    path: /portal/invoices/list
    method: GET
- name: invoices_view
  endpoint:
    path: /portal/invoices/view/{0-9}
    method: GET
- name: invoices_pay
  endpoint:
    path: /portal/invoices/pay/{0-9}
    method: POST
- name: reports_list
  endpoint:
    path: /portal/reports/list
    method: GET
- name: reports_view
  endpoint:
    path: /portal/reports/view/{0-9}
    method: GET
- name: accounting_invoices_add
  endpoint:
    path: /accounting/invoices/add
    method: POST
- name: accounting_invoices_edit
  endpoint:
    path: /accounting/invoices/edit/{0-9}
    method: PUT
- name: accounting_invoices_view
  endpoint:
    path: /accounting/invoices/view/{0-9}
    method: GET
- name: accounting_invoices_list
  endpoint:
    path: /accounting/invoices/list
    method: GET
- name: accounting_invoices_void
  endpoint:
    path: /accounting/invoices/void/{0-9}
    method: DELETE
- name: admin_cache_view
  endpoint:
    path: /admin/cache/view
    method: GET
- name: admin_cache_delete
  endpoint:
    path: /admin/cache/delete/{0-9}
    method: DELETE
- name: admin_cache_void
  endpoint:
    path: /admin/cache/void
    method: POST
- name: admin_permissions_list
  endpoint:
    path: /admin/permissions/list
    method: GET
- name: admin_permissions_add
  endpoint:
    path: /admin/permissions/add
    method: POST
- name: admin_permissions_edit
  endpoint:
    path: /admin/permissions/edit/{0-9}
    method: PUT
- name: admin_products_list
  endpoint:
    path: /admin/products/list
    method: GET
- name: admin_products_add
  endpoint:
    path: /admin/products/add
    method: POST
- name: admin_products_edit
  endpoint:
    path: /admin/products/edit/{0-9}
    method: PUT
- name: admin_products_delete
  endpoint:
    path: /admin/products/delete/{0-9}
    method: DELETE
- name: admin_products_view
  endpoint:
    path: /admin/products/view/{0-9}
    method: GET
- name: admin_users_list
  endpoint:
    path: /admin/users/list
    method: GET
- name: admin_users_add
  endpoint:
    path: /admin/users/add
    method: POST
- name: admin_users_edit
  endpoint:
    path: /admin/users/edit/{0-9}
    method: PUT
- name: admin_users_delete
  endpoint:
    path: /admin/users/delete/{0-9}
    method: DELETE
- name: admin_users_view
  endpoint:
    path: /admin/users/view/{0-9}
    method: GET
- name: login
  endpoint:
    path: /session/login
    method: GET
    data_selector: records
    params: {}
- name: logout
  endpoint:
    path: /session/logout
    method: GET
    data_selector: records
    params: {}
- name: invoices_list
  endpoint:
    path: /portal/invoices/list
    method: GET
    data_selector: records
    params: {}
- name: invoice_view
  endpoint:
    path: /portal/invoices/view/{0-9}
    method: GET
    data_selector: records
    params: {}
- name: invoice_pay
  endpoint:
    path: /portal/invoices/pay/{0-9}
    method: POST
    data_selector: records
    params: {}
- name: reports_list
  endpoint:
    path: /portal/reports/list
    method: GET
    data_selector: records
    params: {}
- name: report_view
  endpoint:
    path: /portal/reports/view/{0-9}
    method: GET
    data_selector: records
    params: {}
- name: add_invoice
  endpoint:
    path: /accounting/invoices/add
    method: POST
    data_selector: records
    params: {}
- name: edit_invoice
  endpoint:
    path: /accounting/invoices/edit/{0-9}
    method: PUT
    data_selector: records
    params: {}
- name: view_invoice
  endpoint:
    path: /accounting/invoices/view/{0-9}
    method: GET
    data_selector: records
    params: {}
- name: list_invoices
  endpoint:
    path: /accounting/invoices/list
    method: GET
    data_selector: records
    params: {}
- name: void_invoice
  endpoint:
    path: /accounting/invoices/void/{0-9}
    method: DELETE
    data_selector: records
    params: {}
- name: view_cache_items
  endpoint:
    path: /admin/cache/view
    method: GET
    data_selector: records
    params: {}
- name: delete_cache_item
  endpoint:
    path: /admin/cache/delete/{0-9}
    method: DELETE
    data_selector: records
    params: {}
- name: void_cache
  endpoint:
    path: /admin/cache/void
    method: DELETE
    data_selector: records
    params: {}
- name: list_permissions
  endpoint:
    path: /admin/permissions/list
    method: GET
    data_selector: records
    params: {}
- name: add_permission
  endpoint:
    path: /admin/permissions/add
    method: POST
    data_selector: records
    params: {}
- name: edit_permission
  endpoint:
    path: /admin/permissions/edit/{0-9}
    method: PUT
    data_selector: records
    params: {}
- name: list_products
  endpoint:
    path: /admin/products/list
    method: GET
    data_selector: records
    params: {}
- name: add_product
  endpoint:
    path: /admin/products/add
    method: POST
    data_selector: records
    params: {}
- name: edit_product
  endpoint:
    path: /admin/products/edit/{0-9}
    method: PUT
    data_selector: records
    params: {}
- name: delete_product
  endpoint:
    path: /admin/products/delete/{0-9}
    method: DELETE
    data_selector: records
    params: {}
- name: view_product
  endpoint:
    path: /admin/products/view/{0-9}
    method: GET
    data_selector: records
    params: {}
- name: list_users
  endpoint:
    path: /admin/users/list
    method: GET
    data_selector: records
    params: {}
- name: add_user
  endpoint:
    path: /admin/users/add
    method: POST
    data_selector: records
    params: {}
- name: edit_user
  endpoint:
    path: /admin/users/edit/{0-9}
    method: PUT
    data_selector: records
    params: {}
- name: delete_user
  endpoint:
    path: /admin/users/delete/{0-9}
    method: DELETE
    data_selector: records
    params: {}
- name: view_user
  endpoint:
    path: /admin/users/view/{0-9}
    method: GET
    data_selector: records
    params: {}
- name: invoices
  endpoint:
    path: /invoices/view/{id}
    method: GET
    data_selector: null
    params: {}
- name: products
  endpoint:
    path: /api/products
    method: GET
    data_selector: null
    params: {}
- name: invoices
  endpoint:
    path: /invoices/view/{id}
    method: GET
    data_selector: id
    params: {}
- name: invoices
  endpoint:
    path: /invoices/get/{id}
    method: GET
- name: invoices_add
  endpoint:
    path: /invoices/add/{payload}
    method: GET
- name: invoices_update
  endpoint:
    path: /invoices/update/{id}
    method: GET
- name: invoices_delete
  endpoint:
    path: /invoices/delete/{id}
    method: GET
- name: invoices_view
  endpoint:
    path: /invoices/view/{id}
    method: GET
- name: invoices_list
  endpoint:
    path: /invoices/list
    method: GET
- name: invoices_contact
  endpoint:
    path: /contact
    method: POST
- name: invoices
  endpoint:
    path: /invoices/view/{id}
    method: GET
    data_selector: ''
    params: {}
- name: products
  endpoint:
    path: /api/products
    method: GET
    data_selector: ''
    params: {}
- name: tasks
  endpoint:
    path: /src/tasks/MainTask.php
    method: GET
    data_selector: tasks
    params: {}
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: users
    method: GET
    data_selector: ''
    params: {}
- name: InvoiceComponent
  endpoint:
    path: /calculate
    method: POST
    data_selector: invoice
    params: {}
- name: users_task
  endpoint:
    path: /users
    method: GET
    data_selector: mainAction
    params: {}
- name: regenerate_action
  endpoint:
    path: /users/regenerate
    method: GET
    data_selector: regenerateAction
    params: {}
- name: add_action
  endpoint:
    path: /users/add
    method: GET
    data_selector: addAction
    params: {}
- name: print_action
  endpoint:
    path: /users/print
    method: GET
    data_selector: printAction
    params: {}
- name: services_php
  endpoint:
    path: /app/config/services.php
    method: GET
    data_selector: services
    params: {}
- name: services_yaml
  endpoint:
    path: /app/config/services.yml
    method: GET
    data_selector: services
    params: {}
- name: services_php
  endpoint:
    path: services.php
    method: GET
    data_selector: services
    params: {}
- name: services_yaml
  endpoint:
    path: services.yml
    method: GET
    data_selector: services
    params: {}
- name: Invoices
  endpoint:
    path: /Invoices
    method: GET
    data_selector: '*'
    params: {}
- name: Customers
  endpoint:
    path: /Customers
    method: GET
    data_selector: '*'
    params: {}
- name: models
  endpoint:
    path: /models
    method: GET
- name: views
  endpoint:
    path: /views
    method: GET
- name: controllers
  endpoint:
    path: /controllers
    method: GET
- name: Invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
- name: Customers
  endpoint:
    path: /customers
    method: GET
    data_selector: records
- name: Invoices
  endpoint:
    path: /Invoices
    method: GET
    data_selector: records
    params: {}
- name: Customers
  endpoint:
    path: /Customers
    method: GET
    data_selector: records
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: UPDATE
    data_selector: records
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: records
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
    params: {}
- name: Invoices
  endpoint:
    path: /api/invoices
    method: POST
    data_selector: record
    params: {}
- name: invoices
  endpoint:
    path: /models/invoices
    method: GET
    data_selector: records
    params: {}
- name: invoices
  endpoint:
    path: /models/invoices
    method: GET
    data_selector: records
- name: addFrom
  endpoint:
    path: /addFrom
    method: POST
- name: andHaving
  endpoint:
    path: /andHaving
    method: POST
- name: andWhere
  endpoint:
    path: /andWhere
    method: POST
- name: betweenHaving
  endpoint:
    path: /betweenHaving
    method: POST
- name: betweenWhere
  endpoint:
    path: /betweenWhere
    method: POST
- name: columns
  endpoint:
    path: /columns
    method: POST
- name: distinct
  endpoint:
    path: /distinct
    method: POST
- name: forUpdate
  endpoint:
    path: /forUpdate
    method: POST
- name: from
  endpoint:
    path: /from
    method: POST
- name: groupBy
  endpoint:
    path: /groupBy
    method: POST
- name: having
  endpoint:
    path: /having
    method: POST
- name: inHaving
  endpoint:
    path: /inHaving
    method: POST
- name: innerJoin
  endpoint:
    path: /innerJoin
    method: POST
- name: inWhere
  endpoint:
    path: /inWhere
    method: POST
- name: join
  endpoint:
    path: /join
    method: POST
- name: leftJoin
  endpoint:
    path: /leftJoin
    method: POST
- name: limit
  endpoint:
    path: /limit
    method: POST
- name: notBetweenHaving
  endpoint:
    path: /notBetweenHaving
    method: POST
- name: notBetweenWhere
  endpoint:
    path: /notBetweenWhere
    method: POST
- name: notInHaving
  endpoint:
    path: /notInHaving
    method: POST
- name: notInWhere
  endpoint:
    path: /notInWhere
    method: POST
- name: offset
  endpoint:
    path: /offset
    method: POST
- name: orderBy
  endpoint:
    path: /orderBy
    method: POST
- name: orHaving
  endpoint:
    path: /orHaving
    method: POST
- name: orWhere
  endpoint:
    path: /orWhere
    method: POST
- name: rightJoin
  endpoint:
    path: /rightJoin
    method: POST
- name: invoices
  endpoint:
    path: /models/invoices
    method: GET
    data_selector: records
    params: {}
- name: Guestbook
  endpoint:
    path: /models/Guestbook
    method: GET
    data_selector: records
- name: Invoices
  endpoint:
    path: /models/Invoices
    method: GET
    data_selector: records
- name: Invoices
  endpoint:
    path: /models/invoices
    method: POST
    data_selector: result
    params: {}
- name: Invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
- name: invoices
  endpoint:
    path: /models/invoices
    method: GET
    data_selector: records
- name: Guestbook
  endpoint:
    path: /models/guestbook
    method: GET
    data_selector: records
- name: Invoices
  endpoint:
    path: /models/invoices
    method: GET
    data_selector: records
- name: Invoices
  endpoint:
    path: /models/invoices
    method: GET
    data_selector: records
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: records
- name: Invoices
  endpoint:
    path: /models/invoices
    method: POST
    data_selector: records
- name: invoices
  endpoint:
    path: /co_invoices
    method: INSERT
    data_selector: records
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: records
    params: {}
- name: Invoices
  endpoint:
    path: /model/invoices
    method: GET
    data_selector: metaData
    params: {}
- name: Invoices
  endpoint:
    path: /invoices
    method: POST
    data_selector: invoices
    params: {}
- name: Invoices
  endpoint:
    path: /api/invoices
    method: GET
    data_selector: records
- name: Invoices
  endpoint:
    path: /
    method: GET
    data_selector: attributes
    params: {}
- name: Invoices
  endpoint:
    path: /model/Invoices
    method: GET
    data_selector: metaData
    params: {}
- name: Invoices
  endpoint:
    path: /invoices
    method: GET
- name: Companies
  endpoint:
    path: /companies
    method: GET
- name: Products
  endpoint:
    path: /products
    method: GET
- name: pagination
  endpoint:
    path: /db-pagination
    method: GET
    data_selector: results
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
- name: companies
  endpoint:
    path: /companies
    method: GET
    data_selector: records
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: records
- name: invoices_products
  endpoint:
    path: /invoices_products
    method: GET
    data_selector: records
- name: co_invoices
  endpoint:
    path: /co_invoices
    method: DELETE
    data_selector: records
    params: {}
- name: insert
  endpoint:
    path: /insert
    method: POST
    data_selector: records
- name: insert
  endpoint:
    path: /datamapper/insert
    method: POST
    data_selector: results
- name: co_invoices
  endpoint:
    path: /co_invoices
    method: UPDATE
    data_selector: records
- name: flash
  endpoint:
    path: /flash
    method: GET
    data_selector: messages
- name: direct
  endpoint:
    path: /api/phalcon/flash/direct
    method: GET
    data_selector: messages
    params: {}
- name: session
  endpoint:
    path: /api/phalcon/flash/session
    method: GET
    data_selector: messages
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: image_operations
  endpoint:
    path: /image/operations
    method: GET
    data_selector: operations
    params: {}
- name: CustomersForm
  endpoint:
    path: /forms/customers
    method: POST
    data_selector: customers
    params: {}
- name: Preferences
  endpoint:
    path: /forms/preferences
    method: POST
    data_selector: preferences
    params: {}
- name: background
  endpoint:
    path: /image/background
    method: POST
    data_selector: response
    params: {}
- name: blur
  endpoint:
    path: /image/blur
    method: POST
    data_selector: response
    params: {}
- name: crop
  endpoint:
    path: /image/crop
    method: POST
    data_selector: response
    params: {}
- name: flip
  endpoint:
    path: /image/flip
    method: POST
    data_selector: result
- name: liquidRescale
  endpoint:
    path: /image/liquidRescale
    method: POST
    data_selector: result
- name: mask
  endpoint:
    path: /image/mask
    method: POST
    data_selector: result
- name: pixelate
  endpoint:
    path: /image/pixelate
    method: POST
    data_selector: result
- name: reflection
  endpoint:
    path: /image/reflection
    method: POST
    data_selector: result
- name: render
  endpoint:
    path: /image/render
    method: GET
    data_selector: result
- name: resize
  endpoint:
    path: /image/resize
    method: POST
    data_selector: result
- name: rotate
  endpoint:
    path: /image/rotate
    method: POST
    data_selector: result
- name: save
  endpoint:
    path: /image/save
    method: POST
    data_selector: result
- name: sharpen
  endpoint:
    path: /image/sharpen
    method: POST
    data_selector: result
- name: text
  endpoint:
    path: /image/text
    method: POST
    data_selector: result
- name: watermark
  endpoint:
    path: /image/watermark
    method: POST
    data_selector: result
- name: flip
  endpoint:
    path: /image/flip
    method: POST
    data_selector: result
- name: liquidRescale
  endpoint:
    path: /image/liquidRescale
    method: POST
    data_selector: result
- name: mask
  endpoint:
    path: /image/mask
    method: POST
    data_selector: result
- name: pixelate
  endpoint:
    path: /image/pixelate
    method: POST
    data_selector: result
- name: reflection
  endpoint:
    path: /image/reflection
    method: POST
    data_selector: result
- name: render
  endpoint:
    path: /image/render
    method: GET
    data_selector: result
- name: resize
  endpoint:
    path: /image/resize
    method: POST
    data_selector: result
- name: rotate
  endpoint:
    path: /image/rotate
    method: POST
    data_selector: result
- name: save
  endpoint:
    path: /image/save
    method: POST
    data_selector: result
- name: sharpen
  endpoint:
    path: /image/sharpen
    method: POST
    data_selector: result
- name: text
  endpoint:
    path: /image/text
    method: POST
    data_selector: result
- name: watermark
  endpoint:
    path: /image/watermark
    method: POST
    data_selector: result
- name: html
  endpoint:
    path: /html
    method: GET
    data_selector: records
- name: attributes
  endpoint:
    path: /attributes
    method: GET
    data_selector: records
- name: urls
  endpoint:
    path: /urls
    method: GET
    data_selector: records
- name: css
  endpoint:
    path: /css
    method: GET
    data_selector: records
- name: Escaper
  endpoint:
    path: /html-escaper
    method: GET
    data_selector: methods
    params: {}
- name: Link
  endpoint:
    path: /api/phalcon_html/#htmllinklink
    method: GET
    data_selector: links
- name: EvolvableLink
  endpoint:
    path: /api/phalcon_html/#htmllinkevolvablelink
    method: GET
    data_selector: evolvable_links
- name: LinkProvider
  endpoint:
    path: /api/phalcon_html/#htmllinklinkprovider
    method: GET
    data_selector: link_providers
- name: EvolvableLinkProvider
  endpoint:
    path: /api/phalcon_html/#htmllinkevolvablelinkprovider
    method: GET
    data_selector: evolvable_link_providers
- name: SerializerHeader
  endpoint:
    path: /api/phalcon_html/#htmllinkserializerheader
    method: GET
    data_selector: serializers_headers
- name: CustomSerializer
  endpoint:
    path: /api/phalcon_html/#htmllinkserializerserializerinterface
    method: GET
    data_selector: custom_serializers
- name: body
  endpoint:
    path: /html/body
    method: GET
    data_selector: attributes
- name: button
  endpoint:
    path: /html/button
    method: GET
    data_selector: attributes
- name: close
  endpoint:
    path: /html/close
    method: GET
    data_selector: text
- name: doctype
  endpoint:
    path: /html/doctype
    method: GET
    data_selector: flag
- name: element
  endpoint:
    path: /html/element
    method: GET
    data_selector: attributes
- name: form
  endpoint:
    path: /html/form
    method: GET
    data_selector: attributes
- name: img
  endpoint:
    path: /html/img
    method: GET
    data_selector: attributes
- name: inputCheckbox
  endpoint:
    path: /html/input/checkbox
    method: GET
    data_selector: attributes
- name: inputColor
  endpoint:
    path: /html/input/color
    method: GET
    data_selector: attributes
- name: inputDate
  endpoint:
    path: /html/input/date
    method: GET
    data_selector: attributes
- name: inputDatetime
  endpoint:
    path: /html/input/datetime
    method: GET
    data_selector: attributes
- name: inputDatetimeLocal
  endpoint:
    path: /html/input/datetime-local
    method: GET
    data_selector: attributes
- name: inputEmail
  endpoint:
    path: /html/input/email
    method: GET
    data_selector: attributes
- name: inputFile
  endpoint:
    path: /html/input/file
    method: GET
    data_selector: attributes
- name: inputHidden
  endpoint:
    path: /html/tagfactory/inputHidden
    method: GET
    data_selector: records
- name: inputImage
  endpoint:
    path: /html/tagfactory/inputImage
    method: GET
    data_selector: records
- name: inputMonth
  endpoint:
    path: /html/tagfactory/inputMonth
    method: GET
    data_selector: records
- name: input
  endpoint:
    path: /html/tagfactory/input
    method: GET
    data_selector: records
- name: inputNumeric
  endpoint:
    path: /html/tagfactory/inputNumeric
    method: GET
    data_selector: records
- name: inputPassword
  endpoint:
    path: /html/tagfactory/inputPassword
    method: GET
    data_selector: records
- name: inputRadio
  endpoint:
    path: /html/tagfactory/inputRadio
    method: GET
    data_selector: records
- name: inputRange
  endpoint:
    path: /html/tagfactory/inputRange
    method: GET
    data_selector: records
- name: inputSearch
  endpoint:
    path: /html/tagfactory/inputSearch
    method: GET
    data_selector: records
- name: inputSelect
  endpoint:
    path: /html/tagfactory/inputSelect
    method: GET
    data_selector: records
- name: inputSubmit
  endpoint:
    path: /html/tagfactory/inputSubmit
    method: GET
    data_selector: records
- name: inputTel
  endpoint:
    path: /html/tagfactory/inputTel
    method: GET
    data_selector: records
- name: inputText
  endpoint:
    path: /html/tagfactory/inputText
    method: GET
    data_selector: records
- name: inputTextarea
  endpoint:
    path: /html/tagfactory/inputTextarea
    method: GET
    data_selector: records
- name: inputTime
  endpoint:
    path: /html/tagfactory/inputTime
    method: GET
    data_selector: records
- name: inputUrl
  endpoint:
    path: /html/tagfactory/inputUrl
    method: GET
    data_selector: records
- name: inputWeek
  endpoint:
    path: /html/tagfactory/inputWeek
    method: GET
    data_selector: records
- name: label
  endpoint:
    path: /html/tagfactory/label
    method: GET
    data_selector: records
- name: link
  endpoint:
    path: /html/tagfactory/link
    method: GET
    data_selector: records
- name: doctype
  endpoint:
    path: /tag/doctype
    method: GET
    data_selector: doctype
    params: {}
- name: title
  endpoint:
    path: /tag/title
    method: GET
    data_selector: title
    params: {}
- name: input
  endpoint:
    path: /tag/input
    method: GET
    data_selector: input
    params: {}
- name: body
  endpoint:
    path: /html/body
    method: GET
    data_selector: attributes
- name: button
  endpoint:
    path: /html/button
    method: GET
    data_selector: attributes
- name: close
  endpoint:
    path: /html/close
    method: GET
    data_selector: text
- name: doctype
  endpoint:
    path: /html/doctype
    method: GET
    data_selector: flag
- name: element
  endpoint:
    path: /html/element
    method: GET
    data_selector: attributes
- name: form
  endpoint:
    path: /html/form
    method: GET
    data_selector: attributes
- name: img
  endpoint:
    path: /html/img
    method: GET
    data_selector: attributes
- name: inputCheckbox
  endpoint:
    path: /html/input/checkbox
    method: GET
    data_selector: attributes
- name: inputColor
  endpoint:
    path: /html/input/color
    method: GET
    data_selector: attributes
- name: inputDate
  endpoint:
    path: /html/input/date
    method: GET
    data_selector: attributes
- name: inputDatetime
  endpoint:
    path: /html/input/datetime
    method: GET
    data_selector: attributes
- name: inputDatetimeLocal
  endpoint:
    path: /html/input/datetime-local
    method: GET
    data_selector: attributes
- name: inputEmail
  endpoint:
    path: /html/input/email
    method: GET
    data_selector: attributes
- name: inputFile
  endpoint:
    path: /html/input/file
    method: GET
    data_selector: attributes
- name: weekField
  endpoint:
    path: /tag/weekField
    method: GET
    data_selector: records
    params: {}
- name: image
  endpoint:
    path: /tag/image
    method: GET
    data_selector: records
    params: {}
- name: select
  endpoint:
    path: /tag/select
    method: GET
    data_selector: records
    params: {}
- name: selectStatic
  endpoint:
    path: /tag/selectStatic
    method: GET
    data_selector: records
    params: {}
- name: tagHtml
  endpoint:
    path: /tag/tagHtml
    method: GET
    data_selector: records
    params: {}
- name: stylesheetLink
  endpoint:
    path: /tag/stylesheetLink
    method: GET
    data_selector: records
    params: {}
- name: javascriptInclude
  endpoint:
    path: /tag/javascriptInclude
    method: GET
    data_selector: records
    params: {}
- name: linkTo
  endpoint:
    path: /tag/linkTo
    method: GET
    data_selector: records
    params: {}
- name: form
  endpoint:
    path: /tag/form
    method: GET
    data_selector: records
    params: {}
- name: setDefault
  endpoint:
    path: /tag/setDefault
    method: GET
    data_selector: records
    params: {}
- name: setDefaults
  endpoint:
    path: /tag/setDefaults
    method: GET
    data_selector: records
    params: {}
- name: getValue
  endpoint:
    path: /tag/getValue
    method: GET
    data_selector: records
    params: {}
- name: hasValue
  endpoint:
    path: /tag/hasValue
    method: GET
    data_selector: records
    params: {}
- name: doctype
  endpoint:
    path: /tag/doctype
    method: GET
    data_selector: doctypes
    params: {}
- name: title
  endpoint:
    path: /tag/title
    method: GET
    data_selector: titles
    params: {}
- name: input
  endpoint:
    path: /tag/input
    method: GET
    data_selector: inputs
    params: {}
- name: Invoices
  endpoint:
    path: /MyApp/Controllers/Invoices
    method: GET
    data_selector: actions
    params: {}
- name: BaseController
  endpoint:
    path: /MyApp/Controllers/BaseController
    method: GET
    data_selector: actions
    params: {}
- name: invoices
  endpoint:
    path: /invoices/list/:page/:perPage
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users/login
    method: GET
    data_selector: records
    params: {}
- name: weekField
  endpoint:
    path: /tag/weekField
    method: GET
    data_selector: attributes
    params: {}
- name: image
  endpoint:
    path: /tag/image
    method: GET
    data_selector: attributes
    params: {}
- name: select
  endpoint:
    path: /tag/select
    method: GET
    data_selector: attributes
    params: {}
- name: selectStatic
  endpoint:
    path: /tag/selectStatic
    method: GET
    data_selector: attributes
    params: {}
- name: tagHtml
  endpoint:
    path: /tag/tagHtml
    method: GET
    data_selector: attributes
    params: {}
- name: stylesheetLink
  endpoint:
    path: /tag/stylesheetLink
    method: GET
    data_selector: attributes
    params: {}
- name: javascriptInclude
  endpoint:
    path: /tag/javascriptInclude
    method: GET
    data_selector: attributes
    params: {}
- name: linkTo
  endpoint:
    path: /tag/linkTo
    method: GET
    data_selector: attributes
    params: {}
- name: form
  endpoint:
    path: /tag/form
    method: GET
    data_selector: attributes
    params: {}
- name: dispatcher
  endpoint:
    path: /dispatcher
    method: GET
    data_selector: records
    params: {}
- name: custom_helpers
  endpoint:
    path: /custom/helpers
    method: GET
    data_selector: helpers
    params: {}
- name: views
  endpoint:
    path: /views
    method: GET
    data_selector: records
- name: events_manager
  endpoint:
    path: /events/
    method: GET
    data_selector: events
    params: {}
- name: Filter
  endpoint:
    path: /filter
    method: GET
    data_selector: filters
    params: {}
- name: FilterFactory
  endpoint:
    path: /filter/factory
    method: GET
    data_selector: filterFactories
    params: {}
- name: invoices
  endpoint:
    path: /admin/invoices
    method: GET
    data_selector: route
    params: {}
- name: login
  endpoint:
    path: /login
    method: GET
    data_selector: route
    params: {}
- name: invoices
  endpoint:
    path: /myapp/controllers/invoices
    method: GET
    data_selector: annotations
    params: {}
- name: base_controller
  endpoint:
    path: /myapp/controllers/basecontroller
    method: GET
    data_selector: annotations
    params: {}
- name: InvoicesController
  endpoint:
    path: /invoices/list/:page/:perPage
    method: GET
    data_selector: action
    params: {}
- name: session_manager
  endpoint:
    path: /session/manager
    method: GET
    data_selector: sessions
    params: {}
- name: session
  endpoint:
    path: /session
    method: GET
    data_selector: sessionData
    params: {}
- name: Url
  endpoint:
    path: /mvc/url/
    method: GET
    data_selector: records
- name: dispatcher
  endpoint:
    path: /dispatch
    method: GET
    data_selector: results
- name: logger
  endpoint:
    path: /logger
    method: GET
    data_selector: records
- name: response
  endpoint:
    path: /response
    method: GET
    data_selector: content
    params: {}
- name: apcu
  endpoint:
    path: /storage/apcu
    method: GET
- name: libmemcached
  endpoint:
    path: /storage/libmemcached
    method: GET
- name: memory
  endpoint:
    path: /storage/memory
    method: GET
- name: redis
  endpoint:
    path: /storage/redis
    method: GET
- name: stream
  endpoint:
    path: /storage/stream
    method: GET
- name: collection
  endpoint:
    path: /support/collection
    method: GET
    data_selector: data
    params: {}
- name: admin_invoices_list
  endpoint:
    path: /admin/invoices/list
    method: GET
    data_selector: controller
    params: {}
- name: blacklist
  endpoint:
    path: /blacklist
    method: POST
    data_selector: result
- name: chunk
  endpoint:
    path: /chunk
    method: POST
    data_selector: result
- name: filter
  endpoint:
    path: /filter
    method: POST
    data_selector: result
- name: first
  endpoint:
    path: /first
    method: POST
    data_selector: result
- name: default_route
  endpoint:
    path: /
    method: GET
    data_selector: controller and action
    params: {}
- name: not_found_route
  endpoint:
    path: /
    method: GET
    data_selector: controller and action
    params: {}
- name: Registry
  endpoint:
    path: /phalcon/support/registry
    method: GET
    data_selector: data
    params: {}
- name: session_manager
  endpoint:
    path: /session
    method: GET
    data_selector: sessions
    params: {}
- name: serialization
  endpoint:
    path: /support/registry/serialization
    method: GET
    data_selector: data
    params: {}
- name: transformations
  endpoint:
    path: /support/registry/transformations
    method: GET
    data_selector: data
    params: {}
- name: session_manager
  endpoint:
    path: /session/manager
    method: GET
    data_selector: session
- name: session_bag
  endpoint:
    path: /session/bag
    method: GET
    data_selector: bag
- name: url
  endpoint:
    path: /mvc/url/
    method: GET
    data_selector: records
- name: app
  endpoint:
    path: /config
    method: GET
    data_selector: app
- name: database
  endpoint:
    path: /apps/storage/config.php
    method: GET
    data_selector: database
- name: models
  endpoint:
    path: /apps/storage/config.php
    method: GET
    data_selector: models
- name: mysql_adapter
  endpoint:
    path: /phalcon/db/adapter/pdo/mysql
    method: GET
    data_selector: records
- name: postgresql_adapter
  endpoint:
    path: /phalcon/db/adapter/pdo/postgresql
    method: GET
    data_selector: records
- name: sqlite_adapter
  endpoint:
    path: /phalcon/db/adapter/pdo/sqlite
    method: GET
    data_selector: records
- name: logger
  endpoint:
    path: /phalcon/logger
    method: GET
    data_selector: records
- name: Stream
  endpoint:
    path: /storage/logs/main.log
    method: GET
    data_selector: messages
    params: {}
- name: Syslog
  endpoint:
    path: ident-name
    method: GET
    data_selector: messages
    params:
      option: LOG_NDELAY
      facility: LOG_MAIL
- name: Noop
  endpoint:
    path: nothing
    method: GET
    data_selector: messages
    params: {}
- name: addColumn
  endpoint:
    path: /db/adapter/addColumn
    method: POST
    data_selector: results
- name: addIndex
  endpoint:
    path: /db/adapter/addIndex
    method: POST
    data_selector: results
- name: addForeignKey
  endpoint:
    path: /db/adapter/addForeignKey
    method: POST
    data_selector: results
- name: addPrimaryKey
  endpoint:
    path: /db/adapter/addPrimaryKey
    method: POST
    data_selector: results
- name: affectedRows
  endpoint:
    path: /db/adapter/affectedRows
    method: GET
    data_selector: results
- name: begin
  endpoint:
    path: /db/adapter/begin
    method: POST
    data_selector: results
- name: commit
  endpoint:
    path: /db/adapter/commit
    method: POST
    data_selector: results
- name: createTable
  endpoint:
    path: /db/adapter/createTable
    method: POST
    data_selector: results
- name: delete
  endpoint:
    path: /db/adapter/delete
    method: DELETE
    data_selector: results
- name: describeColumns
  endpoint:
    path: /db/adapter/describeColumns
    method: GET
    data_selector: results
- name: dropTable
  endpoint:
    path: /db/adapter/dropTable
    method: DELETE
    data_selector: results
- name: fetchAll
  endpoint:
    path: /db/adapter/fetchAll
    method: GET
    data_selector: results
- name: insert
  endpoint:
    path: /db/adapter/insert
    method: POST
    data_selector: results
- name: update
  endpoint:
    path: /db/adapter/update
    method: PUT
    data_selector: results
- name: logger_adapter_interface
  endpoint:
    path: /logger/adapterinterface
    method: GET
    data_selector: interface
- name: abstract_classes
  endpoint:
    path: /logger/abstractclasses
    method: GET
    data_selector: classes
- name: dependency_injection
  endpoint:
    path: /logger/dependencyinjection
    method: GET
    data_selector: di
- name: co_invoices
  endpoint:
    path: /co_invoices
    method: GET
    data_selector: records
    params: {}
- name: request
  endpoint:
    path: /request
    method: GET
    data_selector: request_data
- name: Inline
  endpoint:
    path: /phalcon/assets/inline
    method: GET
    data_selector: content
    params: {}
- name: Css
  endpoint:
    path: /phalcon/assets/inline/css
    method: GET
    data_selector: content
    params: {}
- name: Js
  endpoint:
    path: /phalcon/assets/inline/js
    method: GET
    data_selector: content
    params: {}
- name: response_headers
  endpoint:
    path: /response/headers
    method: GET
    data_selector: headers
- name: response_cookies
  endpoint:
    path: /response/cookies
    method: GET
    data_selector: cookies
- name: response_files
  endpoint:
    path: /response/files
    method: GET
    data_selector: files
- name: response_redirections
  endpoint:
    path: /response/redirections
    method: GET
    data_selector: redirections
- name: response_http_cache
  endpoint:
    path: /response/http_cache
    method: GET
    data_selector: http_cache
- name: translation
  endpoint:
    path: /translate
    method: GET
    data_selector: translations
- name: admin
  endpoint:
    path: /admin
    method: GET
    data_selector: components
    params: {}
- name: reports
  endpoint:
    path: /reports
    method: GET
    data_selector: components
    params: {}
- name: session
  endpoint:
    path: /session
    method: GET
    data_selector: components
    params: {}
- name: set
  endpoint:
    path: /cache/set
    method: POST
    data_selector: result
    params:
      key: my-key
      value: data
- name: setMultiple
  endpoint:
    path: /cache/setMultiple
    method: POST
    data_selector: result
    params:
      key_value_pairs:
        my-key1: data1
        my-key2: data2
      ttl: 9600
- name: delete
  endpoint:
    path: /cache/delete
    method: POST
    data_selector: result
    params:
      key: my-key
- name: deleteMultiple
  endpoint:
    path: /cache/deleteMultiple
    method: POST
    data_selector: result
    params:
      keys:
      - my-key1
      - my-key2
- name: clear
  endpoint:
    path: /cache/clear
    method: POST
    data_selector: result
- name: libmemcached
  endpoint:
    path: null
    method: null
    data_selector: null
    params: null
- name: serializers
  endpoint:
    path: /6.0/storage/#serializers
    method: GET
    data_selector: serializers
- name: adapters
  endpoint:
    path: /6.0/storage/#adapters
    method: GET
    data_selector: adapters
- name: Apcu
  endpoint:
    path: /storage/apcu
    method: GET
    data_selector: records
    params: {}
- name: Libmemcached
  endpoint:
    path: /storage/libmemcached
    method: GET
    data_selector: records
    params: {}
- name: Memory
  endpoint:
    path: /storage/memory
    method: GET
    data_selector: records
    params: {}
- name: Redis
  endpoint:
    path: /storage/redis
    method: GET
    data_selector: records
    params: {}
- name: Stream
  endpoint:
    path: /storage/stream
    method: GET
    data_selector: records
    params: {}
- name: pull_request
  endpoint:
    path: /new-pull-request
    method: GET
    data_selector: changes
    params: {}
- name: CustomAdapter
  endpoint:
    path: /storage/custom
    method: GET
    data_selector: adapter
    params: {}
- name: AdapterFactory
  endpoint:
    path: /storage/adapter-factory
    method: GET
    data_selector: factory
    params: {}
- name: testing_environment
  endpoint:
    path: /testing-environment/
    method: GET
    data_selector: content
- name: blacklist
  endpoint:
    path: /blacklist
    method: POST
    data_selector: result
- name: chunk
  endpoint:
    path: /chunk
    method: POST
    data_selector: result
- name: filter
  endpoint:
    path: /filter
    method: POST
    data_selector: result
- name: first
  endpoint:
    path: /first
    method: POST
    data_selector: result
- name: nginx_configuration
  endpoint:
    path: /var/www/default/public
    method: GET
    data_selector: configuration
    params: {}
- name: nginx
  endpoint:
    path: /var/www/default/public
    method: GET
    data_selector: index.php
    params: {}
- name: Serialization
  endpoint:
    path: /support/registry/serialization
    method: GET
    data_selector: data
    params: {}
- name: Transformations
  endpoint:
    path: /support/registry/transformations
    method: GET
    data_selector: data
    params: {}
- name: lighttpd
  endpoint:
    path: /var/www/html/public
    method: GET
    data_selector: server.modules
    params: {}
- name: apache
  endpoint:
    path: /tutorial/.htaccess
    method: GET
    data_selector: RewriteRule
    params: {}
- name: project
  endpoint:
    path: /shared/httpd/my-phalcon
    method: GET
    data_selector: project_data
- name: project
  endpoint:
    path: /create-project
    method: POST
    data_selector: result
- name: controller
  endpoint:
    path: /create-controller
    method: POST
    data_selector: result
- name: customers
  endpoint:
    path: /services/data/vXX.X/sobjects/Customers
    method: GET
    data_selector: records
    params: {}
- name: application
  endpoint:
    path: /api/application
    method: GET
    data_selector: response
    params: {}
- name: Single Module
  endpoint:
    path: single/app/controllers/
    method: GET
    data_selector: controllers
    params: {}
- name: Multi Module
  endpoint:
    path: multiple/apps/front/controllers/
    method: GET
    data_selector: front controllers
    params: {}
- name: migrations
  endpoint:
    path: /db-migrations
    method: GET
    data_selector: migrations
    params: {}
- name: mysql_adapter
  endpoint:
    path: /phalcon/db/adapter/pdo/mysql
    method: GET
    data_selector: records
- name: postgresql_adapter
  endpoint:
    path: /phalcon/db/adapter/pdo/postgresql
    method: GET
    data_selector: records
- name: sqlite_adapter
  endpoint:
    path: /phalcon/db/adapter/pdo/sqlite
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: database
  endpoint:
    path: /config/config.php
    method: GET
    data_selector: database
    params: {}
- name: application
  endpoint:
    path: /config/config.php
    method: GET
    data_selector: application
    params: {}
- name: session
  endpoint:
    path: /session/start
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: ''
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: ''
    params: {}
- name: Inline Css
  endpoint:
    path: Phalcon/Assets/Inline/Css
    method: GET
    data_selector: records
- name: Inline Js
  endpoint:
    path: Phalcon/Assets/Inline/Js
    method: GET
    data_selector: records
- name: Assets Manager
  endpoint:
    path: Phalcon/Assets/Manager
    method: GET
    data_selector: records
- name: Assets Collection
  endpoint:
    path: Phalcon/Assets/Collections
    method: GET
    data_selector: records
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: items
    params:
      incremental: updated_at
- name: products
  endpoint:
    path: /products
    method: POST
    data_selector: products
    params: {}
- name: roles
  endpoint:
    path: /roles
    method: GET
    data_selector: roles
    params: {}
- name: components
  endpoint:
    path: /components
    method: GET
    data_selector: components
    params: {}
- name: permissions
  endpoint:
    path: /permissions
    method: GET
    data_selector: permissions
    params: {}
- name: robots
  endpoint:
    path: /api/robots
    method: GET
    data_selector: ''
    params: {}
- name: robots_search
  endpoint:
    path: /api/robots/search/{name}
    method: GET
    data_selector: ''
    params: {}
- name: robots_by_id
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: GET
    data_selector: ''
    params: {}
- name: add_robot
  endpoint:
    path: /api/robots
    method: POST
    data_selector: ''
    params: {}
- name: update_robot
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: PUT
    data_selector: ''
    params: {}
- name: delete_robot
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: DELETE
    data_selector: ''
    params: {}
- name: robots
  endpoint:
    path: /api/robots
    method: GET
    data_selector: ''
    params: {}
- name: robot_search
  endpoint:
    path: /api/robots/search/{name}
    method: GET
    data_selector: ''
    params: {}
- name: robot_by_id
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: GET
    data_selector: ''
    params: {}
- name: insert_robot
  endpoint:
    path: /api/robots
    method: POST
    data_selector: ''
    params: {}
- name: update_robot
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: PUT
    data_selector: ''
    params: {}
- name: delete_robot
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: DELETE
    data_selector: ''
    params: {}
- name: libmemcached
  endpoint:
    path: /cache/libmemcached
    method: GET
    data_selector: records
- name: memory
  endpoint:
    path: /cache/memory
    method: GET
    data_selector: records
- name: redis
  endpoint:
    path: /cache/redis
    method: GET
    data_selector: records
- name: stream
  endpoint:
    path: /cache/stream
    method: GET
    data_selector: records
- name: custom
  endpoint:
    path: /cache/custom
    method: GET
    data_selector: records
- name: email_confirmations
  endpoint:
    path: /email_confirmations
    method: GET
    data_selector: records
    params: {}
- name: failed_logins
  endpoint:
    path: /failed_logins
    method: GET
    data_selector: records
    params: {}
- name: password_changes
  endpoint:
    path: /password_changes
    method: GET
    data_selector: records
    params: {}
- name: permissions
  endpoint:
    path: /permissions
    method: GET
    data_selector: records
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: records
    params: {}
- name: remember_tokens
  endpoint:
    path: /remember_tokens
    method: GET
    data_selector: records
    params: {}
- name: reset_passwords
  endpoint:
    path: /reset_passwords
    method: GET
    data_selector: records
    params: {}
- name: success_logins
  endpoint:
    path: /success_logins
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: session
  endpoint:
    path: /session/signup
    method: POST
- name: users
  endpoint:
    path: /session/signup
    method: POST
    data_selector: user
    params: {}
- name: autoload
  endpoint:
    path: /upgrade/autoload
    method: GET
    data_selector: records
- name: cache
  endpoint:
    path: /upgrade/cache
    method: GET
    data_selector: records
- name: cli
  endpoint:
    path: /upgrade/cli
    method: GET
    data_selector: records
- name: collection
  endpoint:
    path: /upgrade/collection
    method: GET
    data_selector: records
- name: config
  endpoint:
    path: /upgrade/config
    method: GET
    data_selector: records
- name: container
  endpoint:
    path: /upgrade/container
    method: GET
    data_selector: records
- name: crypt
  endpoint:
    path: /upgrade/crypt
    method: GET
    data_selector: records
- name: datamapper
  endpoint:
    path: /upgrade/datamapper
    method: GET
    data_selector: records
- name: db
  endpoint:
    path: /upgrade/db
    method: GET
    data_selector: records
- name: debug
  endpoint:
    path: /upgrade/debug
    method: GET
    data_selector: records
- name: di
  endpoint:
    path: /upgrade/di
    method: GET
    data_selector: records
- name: dispatcher
  endpoint:
    path: /upgrade/dispatcher
    method: GET
    data_selector: records
- name: domain
  endpoint:
    path: /upgrade/domain
    method: GET
    data_selector: records
- name: New Feature Request
  endpoint:
    path: /new-feature-request
    method: GET
    data_selector: NFRs
    params: {}
- name: List of NFRs
  endpoint:
    path: /new-feature-request-list
    method: GET
    data_selector: list
    params: {}
- name: session
  endpoint:
    path: /session
    method: POST
    data_selector: session_data
- name: cookies
  endpoint:
    path: /cookies
    method: POST
    data_selector: cookie_data
- name: mysql
  endpoint:
    path: /services/data/vXX.X/sobjects/mysql
    method: GET
- name: postgres
  endpoint:
    path: /services/data/vXX.X/sobjects/postgres
    method: GET
- name: redis
  endpoint:
    path: /services/data/vXX.X/sobjects/redis
    method: GET
- name: login
  endpoint:
    path: /session/login
    method: GET
- name: logout
  endpoint:
    path: /session/logout
    method: GET
- name: invoices_list
  endpoint:
    path: /portal/invoices/list
    method: GET
- name: invoices_view
  endpoint:
    path: /portal/invoices/view/{0-9}
    method: GET
- name: invoices_pay
  endpoint:
    path: /portal/invoices/pay/{0-9}
    method: POST
- name: reports_list
  endpoint:
    path: /portal/reports/list
    method: GET
- name: reports_view
  endpoint:
    path: /portal/reports/view/{0-9}
    method: GET
- name: accounting_invoices_add
  endpoint:
    path: /accounting/invoices/add
    method: POST
- name: accounting_invoices_edit
  endpoint:
    path: /accounting/invoices/edit/{0-9}
    method: PUT
- name: accounting_invoices_view
  endpoint:
    path: /accounting/invoices/view/{0-9}
    method: GET
- name: accounting_invoices_list
  endpoint:
    path: /accounting/invoices/list
    method: GET
- name: accounting_invoices_void
  endpoint:
    path: /accounting/invoices/void/{0-9}
    method: DELETE
- name: admin_cache_view
  endpoint:
    path: /admin/cache/view
    method: GET
- name: admin_cache_delete
  endpoint:
    path: /admin/cache/delete/{0-9}
    method: DELETE
- name: admin_cache_void
  endpoint:
    path: /admin/cache/void
    method: POST
- name: admin_permissions_list
  endpoint:
    path: /admin/permissions/list
    method: GET
- name: admin_permissions_add
  endpoint:
    path: /admin/permissions/add
    method: POST
- name: admin_permissions_edit
  endpoint:
    path: /admin/permissions/edit/{0-9}
    method: PUT
- name: admin_products_list
  endpoint:
    path: /admin/products/list
    method: GET
- name: admin_products_add
  endpoint:
    path: /admin/products/add
    method: POST
- name: admin_products_edit
  endpoint:
    path: /admin/products/edit/{0-9}
    method: PUT
- name: admin_products_delete
  endpoint:
    path: /admin/products/delete/{0-9}
    method: DELETE
- name: admin_products_view
  endpoint:
    path: /admin/products/view/{0-9}
    method: GET
- name: admin_users_list
  endpoint:
    path: /admin/users/list
    method: GET
- name: admin_users_add
  endpoint:
    path: /admin/users/add
    method: POST
- name: admin_users_edit
  endpoint:
    path: /admin/users/edit/{0-9}
    method: PUT
- name: admin_users_delete
  endpoint:
    path: /admin/users/delete/{0-9}
    method: DELETE
- name: admin_users_view
  endpoint:
    path: /admin/users/view/{0-9}
    method: GET
- name: files
  endpoint:
    path: /coding-standard/#files
    method: GET
    data_selector: records
- name: classes
  endpoint:
    path: /coding-standard/#classes
    method: GET
    data_selector: records
- name: invoices
  endpoint:
    path: /invoices/view/{id}
    method: GET
    data_selector: null
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
- name: nginx
  endpoint:
    path: /start
    method: POST
- name: apache
  endpoint:
    path: /apache
    method: GET
- name: lighttpd
  endpoint:
    path: /lighttpd
    method: GET
- name: wamp
  endpoint:
    path: /wamp
    method: GET
- name: xampp
  endpoint:
    path: /xampp
    method: GET
- name: cherokee
  endpoint:
    path: /cherokee
    method: GET
- name: caddy
  endpoint:
    path: /caddy
    method: GET
- name: project
  endpoint:
    path: /shared/httpd/my-phalcon
    method: GET
- name: UsersTask
  endpoint:
    path: /users
    method: GET
    data_selector: actions
    params: {}
- name: available_commands
  endpoint:
    path: /devtools/#available-commands
    method: GET
    data_selector: commands
- name: create_project
  endpoint:
    path: /devtools/#generating-a-project-skeleton
    method: GET
    data_selector: project
- name: create_controller
  endpoint:
    path: /devtools/#generating-controllers
    method: GET
    data_selector: controller
- name: database_settings
  endpoint:
    path: /devtools/#preparing-database-settings
    method: GET
    data_selector: database
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: records
- name: migrations
  endpoint:
    path: /migrations
    method: POST
    data_selector: migrations
- name: phpunit
  endpoint:
    path: /tests/Unit
    method: GET
    data_selector: tests
- name: controllers
  endpoint:
    path: /tutorial/src/controllers/
    method: GET
    data_selector: records
- name: models
  endpoint:
    path: /tutorial/src/models/
    method: GET
    data_selector: records
- name: views
  endpoint:
    path: /tutorial/src/views/
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: Invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
    params: {}
- name: Customers
  endpoint:
    path: /customers
    method: GET
    data_selector: records
    params: {}
- name: config
  endpoint:
    path: /config/config.php
    method: GET
    data_selector: config
- name: Invoices
  endpoint:
    path: /Invoices
    method: GET
    data_selector: '*'
    params: {}
- name: Customers
  endpoint:
    path: /Customers
    method: GET
    data_selector: '*'
    params: {}
- name: session
  endpoint:
    path: /session/start
    method: POST
    data_selector: auth
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: UPDATE
    data_selector: records
    params: {}
- name: products
  endpoint:
    path: /invo/products/search
    method: POST
    data_selector: products
    params: {}
- name: products
  endpoint:
    path: /products
    method: POST
    data_selector: product
    params: {}
- name: Invoices
  endpoint:
    path: /models/invoices
    method: POST
    data_selector: result
    params: {}
- name: Invoices
  endpoint:
    path: /MyApp/Models/Invoices
    method: GET
    data_selector: records
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
    params: {}
- name: Invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
    params: {}
- name: robots
  endpoint:
    path: /robots
    method: GET
    data_selector: results
- name: robots_search
  endpoint:
    path: /robots/search/{name}
    method: GET
    data_selector: results
- name: robot_by_id
  endpoint:
    path: /robots/{id:[0-9]+}
    method: GET
    data_selector: result
- name: add_robot
  endpoint:
    path: /robots
    method: POST
    data_selector: result
- name: update_robot
  endpoint:
    path: /robots/{id:[0-9]+}
    method: PUT
    data_selector: result
- name: delete_robot
  endpoint:
    path: /robots/{id:[0-9]+}
    method: DELETE
    data_selector: result
- name: invoices
  endpoint:
    path: /invoices
    method: GET
- name: Invoices
  endpoint:
    path: /db-models/#models
    method: GET
    data_selector: records
- name: robots
  endpoint:
    path: /api/robots
    method: GET
    data_selector: ''
    params: {}
- name: robots_search
  endpoint:
    path: /api/robots/search/{name}
    method: GET
    data_selector: ''
    params: {}
- name: robot_by_id
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: GET
    data_selector: ''
    params: {}
- name: insert_robot
  endpoint:
    path: /api/robots
    method: POST
    data_selector: ''
    params: {}
- name: update_robot
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: PUT
    data_selector: ''
    params: {}
- name: delete_robot
  endpoint:
    path: /api/robots/{id:[0-9]+}
    method: DELETE
    data_selector: ''
    params: {}
- name: invoices
  endpoint:
    path: /path/to/invoices
    method: GET
    data_selector: records
    params: {}
- name: Invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
    params: {}
- name: Customers
  endpoint:
    path: /customers
    method: GET
    data_selector: records
    params: {}
- name: Invoices
  endpoint:
    path: /model/invoices
    method: GET
    data_selector: records
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
    params: {}
- name: about
  endpoint:
    path: /about
    method: GET
- name: index
  endpoint:
    path: /
    method: GET
- name: permissions
  endpoint:
    path: /permissions
    method: GET
- name: privacy
  endpoint:
    path: /privacy
    method: GET
- name: profiles
  endpoint:
    path: /profiles
    method: GET
- name: create_profile
  endpoint:
    path: /profiles/create
    method: POST
- name: delete_profile
  endpoint:
    path: /profiles/delete
    method: DELETE
- name: edit_profile
  endpoint:
    path: /profiles/edit
    method: PUT
- name: search_profiles
  endpoint:
    path: /profiles/search
    method: GET
- name: session
  endpoint:
    path: /session
    method: GET
- name: forgot_password
  endpoint:
    path: /session/forgotPassword
    method: POST
- name: login
  endpoint:
    path: /session/login
    method: POST
- name: logout
  endpoint:
    path: /session/logout
    method: POST
- name: signup
  endpoint:
    path: /session/signup
    method: POST
- name: terms
  endpoint:
    path: /terms
    method: GET
- name: confirm_email
  endpoint:
    path: /confirm
    method: POST
- name: reset_password
  endpoint:
    path: /reset-password
    method: POST
- name: users
  endpoint:
    path: /users
    method: GET
- name: change_password
  endpoint:
    path: /users/changePassword
    method: POST
- name: create_user
  endpoint:
    path: /users/create
    method: POST
- name: delete_user
  endpoint:
    path: /users/delete
    method: DELETE
- name: edit_user
  endpoint:
    path: /users/edit
    method: PUT
- name: Invoices
  endpoint:
    path: /models/invoices
    method: GET
    data_selector: attributes
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: user
    params: {}
- name: Invoices
  endpoint:
    path: /model/invoices
    method: GET
    data_selector: metaData
    params: {}
- name: Invoices
  endpoint:
    path: /models/invoices
    method: GET
    data_selector: records
    params: {}
- name: Customers
  endpoint:
    path: /models/customers
    method: GET
    data_selector: records
    params: {}
- name: Invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
    params: {}
- name: Companies
  endpoint:
    path: /companies
    method: GET
    data_selector: records
    params: {}
- name: Products
  endpoint:
    path: /products
    method: GET
    data_selector: records
    params: {}
- name: InvoicesProducts
  endpoint:
    path: /invoices_products
    method: GET
    data_selector: records
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: POST
    data_selector: records
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: records
    params: {}
- name: login
  endpoint:
    path: /session/login
    method: GET
- name: logout
  endpoint:
    path: /session/logout
    method: GET
- name: invoices_list
  endpoint:
    path: /portal/invoices/list
    method: GET
- name: invoices_view
  endpoint:
    path: /portal/invoices/view/{0-9}
    method: GET
- name: invoices_pay
  endpoint:
    path: /portal/invoices/pay/{0-9}
    method: POST
- name: reports_list
  endpoint:
    path: /portal/reports/list
    method: GET
- name: reports_view
  endpoint:
    path: /portal/reports/view/{0-9}
    method: GET
- name: accounting_invoices_add
  endpoint:
    path: /accounting/invoices/add
    method: POST
- name: accounting_invoices_edit
  endpoint:
    path: /accounting/invoices/edit/{0-9}
    method: PUT
- name: accounting_invoices_view
  endpoint:
    path: /accounting/invoices/view/{0-9}
    method: GET
- name: accounting_invoices_list
  endpoint:
    path: /accounting/invoices/list
    method: GET
- name: accounting_invoices_void
  endpoint:
    path: /accounting/invoices/void/{0-9}
    method: DELETE
- name: admin_cache_view
  endpoint:
    path: /admin/cache/view
    method: GET
- name: admin_cache_delete
  endpoint:
    path: /admin/cache/delete/{0-9}
    method: DELETE
- name: admin_cache_void
  endpoint:
    path: /admin/cache/void
    method: POST
- name: admin_permissions_list
  endpoint:
    path: /admin/permissions/list
    method: GET
- name: admin_permissions_add
  endpoint:
    path: /admin/permissions/add
    method: POST
- name: admin_permissions_edit
  endpoint:
    path: /admin/permissions/edit/{0-9}
    method: PUT
- name: admin_products_list
  endpoint:
    path: /admin/products/list
    method: GET
- name: admin_products_add
  endpoint:
    path: /admin/products/add
    method: POST
- name: admin_products_edit
  endpoint:
    path: /admin/products/edit/{0-9}
    method: PUT
- name: admin_products_delete
  endpoint:
    path: /admin/products/delete/{0-9}
    method: DELETE
- name: admin_products_view
  endpoint:
    path: /admin/products/view/{0-9}
    method: GET
- name: admin_users_list
  endpoint:
    path: /admin/users/list
    method: GET
- name: admin_users_add
  endpoint:
    path: /admin/users/add
    method: POST
- name: admin_users_edit
  endpoint:
    path: /admin/users/edit/{0-9}
    method: PUT
- name: admin_users_delete
  endpoint:
    path: /admin/users/delete/{0-9}
    method: DELETE
- name: admin_users_view
  endpoint:
    path: /admin/users/view/{0-9}
    method: GET
- name: Customers
  endpoint:
    path: /customers
    method: POST
    data_selector: records
    params: {}
- name: Invoices
  endpoint:
    path: /invoices
    method: POST
    data_selector: records
    params: {}
- name: NativeArray
  endpoint:
    path: /pagination/nativearray
    method: GET
    data_selector: data
    params:
      limit: 2
      page: 2
- name: QueryBuilder
  endpoint:
    path: /pagination/querybuilder
    method: GET
    data_selector: data
    params:
      limit: 20
      page: 1
- name: invoices
  endpoint:
    path: /invoices/view/{id}
    method: GET
    data_selector: null
    params: {}
- name: Connection
  endpoint:
    path: /data-mapper/connection
    method: GET
    data_selector: records
    params: {}
- name: Query
  endpoint:
    path: /data-mapper/query
    method: GET
    data_selector: records
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: null
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: null
    params: {}
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: null
    params: {}
- name: Delete
  endpoint:
    method: DELETE
- name: Insert
  endpoint:
    method: INSERT
- name: Select
  endpoint:
    method: SELECT
- name: Update
  endpoint:
    method: UPDATE
- name: co_invoices
  endpoint:
    path: /co_invoices
    method: SELECT
    data_selector: '*'
- name: co_customers
  endpoint:
    path: /co_customers
    method: SELECT
    data_selector: '*'
- name: form
  endpoint:
    path: /forms
    method: POST
    data_selector: form_elements
    params: {}
- name: form
  endpoint:
    path: /forms
    method: GET
    data_selector: elements
    params: {}
- name: annotations
  endpoint:
    path: /annotations
    method: GET
    data_selector: services
    params: {}
- name: assets
  endpoint:
    path: /assets
    method: GET
    data_selector: services
    params: {}
- name: crypt
  endpoint:
    path: /crypt
    method: GET
    data_selector: services
    params: {}
- name: cookies
  endpoint:
    path: /cookies
    method: GET
    data_selector: services
    params: {}
- name: dispatcher
  endpoint:
    path: /dispatcher
    method: GET
    data_selector: services
    params: {}
- name: escaper
  endpoint:
    path: /escaper
    method: GET
    data_selector: services
    params: {}
- name: eventsManager
  endpoint:
    path: /eventsManager
    method: GET
    data_selector: services
    params: {}
- name: flash
  endpoint:
    path: /flash
    method: GET
    data_selector: services
    params: {}
- name: flashSession
  endpoint:
    path: /flashSession
    method: GET
    data_selector: services
    params: {}
- name: filter
  endpoint:
    path: /filter
    method: GET
    data_selector: services
    params: {}
- name: helper
  endpoint:
    path: /helper
    method: GET
    data_selector: services
    params: {}
- name: modelsManager
  endpoint:
    path: /modelsManager
    method: GET
    data_selector: services
    params: {}
- name: modelsMetadata
  endpoint:
    path: /modelsMetadata
    method: GET
    data_selector: services
    params: {}
- name: request
  endpoint:
    path: /request
    method: GET
    data_selector: services
    params: {}
- name: response
  endpoint:
    path: /response
    method: GET
    data_selector: services
    params: {}
- name: router
  endpoint:
    path: /router
    method: GET
    data_selector: services
    params: {}
- name: security
  endpoint:
    path: /security
    method: GET
    data_selector: services
    params: {}
- name: tag
  endpoint:
    path: /tag
    method: GET
    data_selector: services
    params: {}
- name: transactionManager
  endpoint:
    path: /transactionManager
    method: GET
    data_selector: services
    params: {}
- name: url
  endpoint:
    path: /url
    method: GET
    data_selector: services
    params: {}
- name: controller_example
  endpoint:
    path: /MyApp/Admin/Controllers/InvoicesController
    method: GET
    data_selector: indexAction
    params: {}
- name: model_example
  endpoint:
    path: /MyApp/Admin/Models/Invoices
    method: GET
    data_selector: initialize
    params: {}
- name: Invoices
  endpoint:
    path: /Invoices
    method: SELECT
    data_selector: records
- name: Customers
  endpoint:
    path: /Customers
    method: SELECT
    data_selector: records
- name: Invoices
  endpoint:
    path: /Invoices
    method: GET
    data_selector: '*'
- name: Customers
  endpoint:
    path: /Customers
    method: GET
    data_selector: '*'
- name: Invoices
  endpoint:
    path: /Invoices
    method: UPDATE
    data_selector: records
    params: {}
- name: liquidRescale
  endpoint:
    path: /image/liquidRescale
    method: POST
    data_selector: parameters
    params:
      width: int
      height: int
      deltaX: int
      rigidity: int
- name: mask
  endpoint:
    path: /image/mask
    method: POST
    data_selector: parameters
    params:
      front: image
      back: image
- name: pixelate
  endpoint:
    path: /image/pixelate
    method: POST
    data_selector: parameters
    params:
      amount: int
- name: reflection
  endpoint:
    path: /image/reflection
    method: POST
    data_selector: parameters
    params:
      height: int
      opacity: int
      fadeIn: bool
- name: render
  endpoint:
    path: /image/render
    method: POST
    data_selector: parameters
    params:
      ext: string
      quality: int
- name: resize
  endpoint:
    path: /image/resize
    method: POST
    data_selector: parameters
    params:
      width: int
      height: int
      master: int
- name: rotate
  endpoint:
    path: /image/rotate
    method: POST
    data_selector: parameters
    params:
      degrees: int
- name: save
  endpoint:
    path: /image/save
    method: POST
    data_selector: parameters
    params:
      file: string
      quality: int
- name: sharpen
  endpoint:
    path: /image/sharpen
    method: POST
    data_selector: parameters
    params:
      amount: int
- name: text
  endpoint:
    path: /image/text
    method: POST
    data_selector: parameters
    params:
      text: string
      offsetX: int
      offsetY: int
      opacity: int
      color: string
      size: int
      fontfile: string
- name: watermark
  endpoint:
    path: /image/watermark
    method: POST
    data_selector: parameters
    params:
      watermark: AdapterInterface
      offsetX: int
      offsetY: int
      opacity: int
- name: Invoices
  endpoint:
    path: /models/invoices
    method: POST
    data_selector: result
    params:
      inv_cst_id: 1
      inv_status_flag: 1
      inv_title: Invoice for ACME Inc.
      inv_total: 100
      inv_created_at: '2019-12-25 01:02:03'
- name: breadcrumbs
  endpoint:
    path: /api/breadcrumbs
    method: GET
    data_selector: breadcrumbs
- name: Invoices
  endpoint:
    path: /models/invoices
    method: GET
    data_selector: records
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
    params: {}
- name: invoices
  endpoint:
    path: /models/invoices
    method: GET
    data_selector: records
- name: html
  endpoint:
    path: /html
    method: POST
    data_selector: result
- name: attributes
  endpoint:
    path: /attributes
    method: POST
    data_selector: result
- name: url
  endpoint:
    path: /url
    method: POST
    data_selector: result
- name: css
  endpoint:
    path: /css
    method: POST
    data_selector: result
- name: Guestbook
  endpoint:
    path: /models/guestbook
    method: GET
    data_selector: records
- name: Invoices
  endpoint:
    path: /models/invoices
    method: GET
    data_selector: records
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
    params: {}
- name: Link
  endpoint:
    path: /html/link
    method: GET
    data_selector: links
- name: LinkProvider
  endpoint:
    path: /html/link/provider
    method: GET
    data_selector: providers
- name: EvolvableLink
  endpoint:
    path: /html/link/evolvable
    method: GET
    data_selector: evolvable_links
- name: EvolvableLinkProvider
  endpoint:
    path: /html/link/evolvable/provider
    method: GET
    data_selector: evolvable_providers
- name: Serializer
  endpoint:
    path: /html/link/serializer
    method: GET
    data_selector: serializers
- name: Invoices
  endpoint:
    path: /models/invoices
    method: GET
    data_selector: records
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: POST
    data_selector: records
- name: Invoices
  endpoint:
    path: /models/invoices
    method: POST
    data_selector: records
- name: Invoices
  endpoint:
    path: /api/invoices
    method: GET
    data_selector: records
    params: {}
- name: inputDatetime
  endpoint:
    path: /inputDatetime
    method: GET
    data_selector: input
    params: {}
- name: inputDatetimeLocal
  endpoint:
    path: /inputDatetimeLocal
    method: GET
    data_selector: input
    params: {}
- name: inputEmail
  endpoint:
    path: /inputEmail
    method: GET
    data_selector: input
    params: {}
- name: inputFile
  endpoint:
    path: /inputFile
    method: GET
    data_selector: input
    params: {}
- name: inputHidden
  endpoint:
    path: /inputHidden
    method: GET
    data_selector: input
    params: {}
- name: inputImage
  endpoint:
    path: /inputImage
    method: GET
    data_selector: input
    params: {}
- name: inputMonth
  endpoint:
    path: /inputMonth
    method: GET
    data_selector: input
    params: {}
- name: inputNumeric
  endpoint:
    path: /inputNumeric
    method: GET
    data_selector: input
    params: {}
- name: inputPassword
  endpoint:
    path: /inputPassword
    method: GET
    data_selector: input
    params: {}
- name: inputRadio
  endpoint:
    path: /inputRadio
    method: GET
    data_selector: input
    params: {}
- name: inputRange
  endpoint:
    path: /inputRange
    method: GET
    data_selector: input
    params: {}
- name: inputSearch
  endpoint:
    path: /inputSearch
    method: GET
    data_selector: input
    params: {}
- name: inputSelect
  endpoint:
    path: /inputSelect
    method: GET
    data_selector: input
    params: {}
- name: inputSubmit
  endpoint:
    path: /inputSubmit
    method: GET
    data_selector: input
    params: {}
- name: inputTel
  endpoint:
    path: /inputTel
    method: GET
    data_selector: input
    params: {}
- name: inputText
  endpoint:
    path: /inputText
    method: GET
    data_selector: input
    params: {}
- name: inputTextarea
  endpoint:
    path: /inputTextarea
    method: GET
    data_selector: input
    params: {}
- name: inputTime
  endpoint:
    path: /inputTime
    method: GET
    data_selector: input
    params: {}
- name: inputUrl
  endpoint:
    path: /inputUrl
    method: GET
    data_selector: input
    params: {}
- name: invoices
  endpoint:
    path: /model/invoices
    method: GET
    data_selector: metaData
    params: {}
- name: Invoices
  endpoint:
    path: /models/invoices
    method: GET
    data_selector: records
- name: Customers
  endpoint:
    path: /models/customers
    method: GET
    data_selector: records
- name: invoices
  endpoint:
    path: /invoices
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
- name: invoices_products
  endpoint:
    path: /invoices_products
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: inputWeek
  endpoint:
    path: /inputWeek
    method: GET
    data_selector: records
    params: {}
- name: label
  endpoint:
    path: /label
    method: GET
    data_selector: records
    params: {}
- name: link
  endpoint:
    path: /link
    method: GET
    data_selector: records
    params: {}
- name: meta
  endpoint:
    path: /meta
    method: GET
    data_selector: records
    params: {}
- name: ol
  endpoint:
    path: /ol
    method: GET
    data_selector: records
    params: {}
- name: script
  endpoint:
    path: /script
    method: GET
    data_selector: records
    params: {}
- name: style
  endpoint:
    path: /style
    method: GET
    data_selector: records
    params: {}
- name: title
  endpoint:
    path: /title
    method: GET
    data_selector: records
    params: {}
- name: ul
  endpoint:
    path: /ul
    method: GET
    data_selector: records
    params: {}
- name: Customers
  endpoint:
    path: /customers
    method: POST
    data_selector: records
- name: Invoices
  endpoint:
    path: /invoices
    method: POST
    data_selector: records
- name: pagination
  endpoint:
    path: /db-pagination
    method: GET
    data_selector: pagination
    params: {}
- name: paginator_repository
  endpoint:
    path: /paginator/repository
    method: GET
    data_selector: repository
- name: paginator_factory
  endpoint:
    path: /paginator/factory
    method: GET
    data_selector: factory
- name: Delete
  endpoint:
    path: /datamapper/delete
    method: POST
    data_selector: records
- name: Insert
  endpoint:
    path: /datamapper/insert
    method: POST
    data_selector: records
- name: Select
  endpoint:
    path: /datamapper/select
    method: GET
    data_selector: records
- name: Update
  endpoint:
    path: /datamapper/update
    method: PUT
    data_selector: records
- name: flash_messages
  endpoint:
    path: /flash/messages
    method: GET
    data_selector: messages
    params: {}
- name: form_elements
  endpoint:
    path: /forms/elements
    method: GET
    data_selector: elements
- name: image
  endpoint:
    path: /tag/image
    method: GET
    data_selector: records
- name: select
  endpoint:
    path: /tag/select
    method: GET
    data_selector: records
- name: selectStatic
  endpoint:
    path: /tag/selectStatic
    method: GET
    data_selector: records
- name: tagHtml
  endpoint:
    path: /tag/tagHtml
    method: GET
    data_selector: records
- name: stylesheetLink
  endpoint:
    path: /tag/stylesheetLink
    method: GET
    data_selector: records
- name: javascriptInclude
  endpoint:
    path: /tag/javascriptInclude
    method: GET
    data_selector: records
- name: linkTo
  endpoint:
    path: /tag/linkTo
    method: GET
    data_selector: records
- name: form
  endpoint:
    path: /tag/form
    method: GET
    data_selector: records
- name: data
  endpoint:
    path: /tag/data
    method: GET
    data_selector: records
- name: escaping
  endpoint:
    path: /tag/escaping
    method: GET
    data_selector: records
- name: view
  endpoint:
    path: /views
    method: GET
    data_selector: records
- name: nameLast
  endpoint:
    path: /forms/nameLast
    method: POST
    data_selector: messages
    params:
      incremental: nameLast
- name: nameFirst
  endpoint:
    path: /forms/nameFirst
    method: POST
    data_selector: messages
    params: {}
- name: telephone
  endpoint:
    path: /forms/telephone
    method: POST
    data_selector: messages
    params: {}
- name: image_operations
  endpoint:
    path: /phalcon/image
    method: GET
    data_selector: operations
- name: liquidRescale
  endpoint:
    path: /image/liquidRescale
    method: POST
    data_selector: parameters
- name: mask
  endpoint:
    path: /image/mask
    method: POST
    data_selector: parameters
- name: pixelate
  endpoint:
    path: /image/pixelate
    method: POST
    data_selector: parameters
- name: reflection
  endpoint:
    path: /image/reflection
    method: POST
    data_selector: parameters
- name: render
  endpoint:
    path: /image/render
    method: POST
    data_selector: parameters
- name: resize
  endpoint:
    path: /image/resize
    method: POST
    data_selector: parameters
- name: rotate
  endpoint:
    path: /image/rotate
    method: POST
    data_selector: parameters
- name: save
  endpoint:
    path: /image/save
    method: POST
    data_selector: parameters
- name: sharpen
  endpoint:
    path: /image/sharpen
    method: POST
    data_selector: parameters
- name: text
  endpoint:
    path: /image/text
    method: POST
    data_selector: parameters
- name: watermark
  endpoint:
    path: /image/watermark
    method: POST
    data_selector: parameters
- name: html_attributes
  endpoint:
    path: /phalcon/html/attributes
    method: GET
    data_selector: attributes
- name: breadcrumbs
  endpoint:
    path: /phalcon/html/breadcrumbs
    method: GET
    data_selector: methods
    params: {}
- name: InvoicesController
  endpoint:
    path: /invoices/list/{page}/{perPage}
    method: GET
    data_selector: actions
    params: {}
- name: html
  endpoint:
    path: /html
    method: POST
    data_selector: html
- name: attributes
  endpoint:
    path: /attributes
    method: POST
    data_selector: attributes
- name: url
  endpoint:
    path: /url
    method: POST
    data_selector: url
- name: css
  endpoint:
    path: /css
    method: POST
    data_selector: css
- name: dispatcher
  endpoint:
    path: /api/dispatcher
    method: GET
    data_selector: dispatcher
    params: {}
- name: Link
  endpoint:
    path: /html/link
    method: GET
    data_selector: links
- name: EvolvableLink
  endpoint:
    path: /html/evolvable-link
    method: GET
    data_selector: links
- name: LinkProvider
  endpoint:
    path: /html/link-provider
    method: GET
    data_selector: links
- name: EvolvableLinkProvider
  endpoint:
    path: /html/evolvable-link-provider
    method: GET
    data_selector: links
- name: Serializer
  endpoint:
    path: /html/serializer
    method: GET
    data_selector: serializers
- name: db_afterQuery
  endpoint:
    path: db:afterQuery
    method: GET
    data_selector: SQLStatement
    params: {}
- name: acl:afterCheckAccess
  endpoint:
    path: /acl/afterCheckAccess
    method: GET
- name: acl:beforeCheckAccess
  endpoint:
    path: /acl/beforeCheckAccess
    method: GET
- name: application:afterHandleRequest
  endpoint:
    path: /application/afterHandleRequest
    method: GET
- name: application:afterStartModule
  endpoint:
    path: /application/afterStartModule
    method: GET
- name: application:beforeHandleRequest
  endpoint:
    path: /application/beforeHandleRequest
    method: GET
- name: application:beforeSendResponse
  endpoint:
    path: /application/beforeSendResponse
    method: GET
- name: application:beforeStartModule
  endpoint:
    path: /application/beforeStartModule
    method: GET
- name: application:boot
  endpoint:
    path: /application/boot
    method: GET
- name: application:viewRender
  endpoint:
    path: /application/viewRender
    method: GET
- name: dispatch:beforeException
  endpoint:
    path: /dispatch/beforeException
    method: GET
- name: console:afterHandleTask
  endpoint:
    path: /console/afterHandleTask
    method: GET
- name: console:afterStartModule
  endpoint:
    path: /console/afterStartModule
    method: GET
- name: console:beforeHandleTask
  endpoint:
    path: /console/beforeHandleTask
    method: GET
- name: console:beforeStartModule
  endpoint:
    path: /console/beforeStartModule
    method: GET
- name: console:boot
  endpoint:
    path: /console/boot
    method: GET
- name: invoices
  endpoint:
    path: /admin/invoices/list
    method: GET
    data_selector: controller
- name: inputDatetime
  endpoint:
    path: /inputDatetime
    method: GET
    data_selector: records
    params: {}
- name: inputDatetimeLocal
  endpoint:
    path: /inputDatetimeLocal
    method: GET
    data_selector: records
    params: {}
- name: inputEmail
  endpoint:
    path: /inputEmail
    method: GET
    data_selector: records
    params: {}
- name: inputFile
  endpoint:
    path: /inputFile
    method: GET
    data_selector: records
    params: {}
- name: inputHidden
  endpoint:
    path: /inputHidden
    method: GET
    data_selector: records
    params: {}
- name: inputImage
  endpoint:
    path: /inputImage
    method: GET
    data_selector: records
    params: {}
- name: inputMonth
  endpoint:
    path: /inputMonth
    method: GET
    data_selector: records
    params: {}
- name: inputNumeric
  endpoint:
    path: /inputNumeric
    method: GET
    data_selector: records
    params: {}
- name: inputPassword
  endpoint:
    path: /inputPassword
    method: GET
    data_selector: records
    params: {}
- name: inputRadio
  endpoint:
    path: /inputRadio
    method: GET
    data_selector: records
    params: {}
- name: inputRange
  endpoint:
    path: /inputRange
    method: GET
    data_selector: records
    params: {}
- name: inputSearch
  endpoint:
    path: /inputSearch
    method: GET
    data_selector: records
    params: {}
- name: inputSelect
  endpoint:
    path: /inputSelect
    method: GET
    data_selector: records
    params: {}
- name: inputSubmit
  endpoint:
    path: /inputSubmit
    method: GET
    data_selector: records
    params: {}
- name: inputTel
  endpoint:
    path: /inputTel
    method: GET
    data_selector: records
    params: {}
- name: inputText
  endpoint:
    path: /inputText
    method: GET
    data_selector: records
    params: {}
- name: inputTextarea
  endpoint:
    path: /inputTextarea
    method: GET
    data_selector: records
    params: {}
- name: inputTime
  endpoint:
    path: /inputTime
    method: GET
    data_selector: records
    params: {}
- name: inputUrl
  endpoint:
    path: /inputUrl
    method: GET
    data_selector: records
    params: {}
- name: session
  endpoint:
    path: /session
    method: GET
    data_selector: session_data
- name: inputWeek
  endpoint:
    path: /html/tagfactory/inputWeek
    method: GET
    data_selector: records
- name: label
  endpoint:
    path: /html/tagfactory/label
    method: GET
    data_selector: records
- name: link
  endpoint:
    path: /html/tagfactory/link
    method: GET
    data_selector: records
- name: meta
  endpoint:
    path: /html/tagfactory/meta
    method: GET
    data_selector: records
- name: ol
  endpoint:
    path: /html/tagfactory/ol
    method: GET
    data_selector: records
- name: script
  endpoint:
    path: /html/tagfactory/script
    method: GET
    data_selector: records
- name: style
  endpoint:
    path: /html/tagfactory/style
    method: GET
    data_selector: records
- name: title
  endpoint:
    path: /html/tagfactory/title
    method: GET
    data_selector: records
- name: ul
  endpoint:
    path: /html/tagfactory/ul
    method: GET
    data_selector: records
- name: IpValidator
  endpoint:
    path: /filter/validation/ip
    method: POST
    data_selector: messages
    params: {}
- name: LoginValidation
  endpoint:
    path: /filter/validation/login
    method: POST
    data_selector: messages
    params: {}
- name: CompanyValidation
  endpoint:
    path: /filter/validation/company
    method: POST
    data_selector: messages
    params: {}
- name: appendTitle
  endpoint:
    path: /tag/appendTitle
    method: GET
    data_selector: records
- name: friendlyTitle
  endpoint:
    path: /tag/friendlyTitle
    method: GET
    data_selector: records
- name: getTitle
  endpoint:
    path: /tag/getTitle
    method: GET
    data_selector: records
- name: getTitleSeparator
  endpoint:
    path: /tag/getTitleSeparator
    method: GET
    data_selector: records
- name: prependTitle
  endpoint:
    path: /tag/prependTitle
    method: GET
    data_selector: records
- name: renderTitle
  endpoint:
    path: /tag/renderTitle
    method: GET
    data_selector: records
- name: setTitle
  endpoint:
    path: /tag/setTitle
    method: GET
    data_selector: records
- name: setTitleSeparator
  endpoint:
    path: /tag/setTitleSeparator
    method: GET
    data_selector: records
- name: checkField
  endpoint:
    path: /tag/checkField
    method: GET
    data_selector: records
- name: colorField
  endpoint:
    path: /tag/colorField
    method: GET
    data_selector: records
- name: dateField
  endpoint:
    path: /tag/dateField
    method: GET
    data_selector: records
- name: dateTimeField
  endpoint:
    path: /tag/dateTimeField
    method: GET
    data_selector: records
- name: dateTimeLocalField
  endpoint:
    path: /tag/dateTimeLocalField
    method: GET
    data_selector: records
- name: fileField
  endpoint:
    path: /tag/fileField
    method: GET
    data_selector: records
- name: hiddenField
  endpoint:
    path: /tag/hiddenField
    method: GET
    data_selector: records
- name: imageInput
  endpoint:
    path: /tag/imageInput
    method: GET
    data_selector: records
- name: monthField
  endpoint:
    path: /tag/monthField
    method: GET
    data_selector: records
- name: numericField
  endpoint:
    path: /tag/numericField
    method: GET
    data_selector: records
- name: radioField
  endpoint:
    path: /tag/radioField
    method: GET
    data_selector: records
- name: rangeField
  endpoint:
    path: /tag/rangeField
    method: GET
    data_selector: records
- name: searchField
  endpoint:
    path: /tag/searchField
    method: GET
    data_selector: records
- name: submitButton
  endpoint:
    path: /tag/submitButton
    method: GET
    data_selector: records
- name: telField
  endpoint:
    path: /tag/telField
    method: GET
    data_selector: records
- name: passwordField
  endpoint:
    path: /tag/passwordField
    method: GET
    data_selector: records
- name: timeField
  endpoint:
    path: /tag/timeField
    method: GET
    data_selector: records
- name: urlField
  endpoint:
    path: /tag/urlField
    method: GET
    data_selector: records
- name: weekField
  endpoint:
    path: /tag/weekField
    method: GET
    data_selector: records
- name: custom_helpers
  endpoint:
    path: /custom/helpers
    method: GET
    data_selector: helpers
    params: {}
- name: view
  endpoint:
    path: /views
    method: GET
    data_selector: records
- name: logger
  endpoint:
    path: /logger
    method: POST
    data_selector: records
- name: request
  endpoint:
    path: /
    method: GET
    data_selector: request
    params: {}
- name: post_data
  endpoint:
    path: /_POST
    method: POST
    data_selector: variables
- name: put_data
  endpoint:
    path: /PUT
    method: PUT
    data_selector: variables
- name: server_data
  endpoint:
    path: /_SERVER
    method: GET
    data_selector: variables
- name: Customers
  endpoint:
    path: /path/to/customers
    method: GET
    data_selector: records
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: annotations
    params: {}
- name: base_controller
  endpoint:
    path: /base_controller
    method: GET
    data_selector: annotations
    params: {}
- name: Invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: actions
    params: {}
- name: Users
  endpoint:
    path: /users
    method: GET
    data_selector: actions
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: POST
    data_selector: records
    params: {}
- name: Translate
  endpoint:
    path: /phalcon/translate
    method: GET
    data_selector: translations
    params: {}
- name: events_manager
  endpoint:
    path: /api/phalcon_events/#eventsmanager-
    method: GET
    data_selector: events
- name: crypt
  endpoint:
    path: /encryption/crypt
    method: GET
- name: JWT Builder
  endpoint:
    path: /encryption/security/jwt/builder
    method: POST
    data_selector: token
    params: {}
- name: JWT Parser
  endpoint:
    path: /encryption/security/jwt/parser
    method: GET
    data_selector: token
    params: {}
- name: JWT Validator
  endpoint:
    path: /encryption/security/jwt/validator
    method: POST
    data_selector: validation_results
    params: {}
- name: serializers
  endpoint:
    path: /storage/serializers
    method: GET
    data_selector: serializers
- name: adapters
  endpoint:
    path: /storage/adapters
    method: GET
    data_selector: adapters
- name: custom_adapter
  endpoint:
    path: /storage/custom
    method: POST
    data_selector: adapter
    params: {}
- name: adapter_factory
  endpoint:
    path: /storage/adapter/factory
    method: POST
    data_selector: factory
    params: {}
- name: Collection
  endpoint:
    path: /support/collection
    method: GET
    data_selector: elements
    params: {}
- name: ReadOnlyCollection
  endpoint:
    path: /support/collection/read-only
    method: GET
    data_selector: elements
    params: {}
- name: MyCollection
  endpoint:
    path: /support/collection/custom-objects
    method: GET
    data_selector: elements
    params: {}
- name: blacklist
  endpoint:
    path: /support/helper/blacklist
    method: POST
    data_selector: result
- name: chunk
  endpoint:
    path: /support/helper/chunk
    method: POST
    data_selector: result
- name: filter
  endpoint:
    path: /support/helper/filter
    method: POST
    data_selector: result
- name: first
  endpoint:
    path: /support/helper/first
    method: POST
    data_selector: result
- name: registry
  endpoint:
    path: /phalcon/support/registry
    method: GET
    data_selector: data
    params: {}
- name: version
  endpoint:
    path: /support/version
    method: GET
    data_selector: version
    params: {}
- name: acl_afterCheckAccess
  endpoint:
    path: /acl/afterCheckAccess
    method: GET
- name: acl_beforeCheckAccess
  endpoint:
    path: /acl/beforeCheckAccess
    method: GET
- name: application_afterHandleRequest
  endpoint:
    path: /application/afterHandleRequest
    method: GET
- name: application_afterStartModule
  endpoint:
    path: /application/afterStartModule
    method: GET
- name: application_beforeHandleRequest
  endpoint:
    path: /application/beforeHandleRequest
    method: GET
- name: application_beforeSendResponse
  endpoint:
    path: /application/beforeSendResponse
    method: GET
- name: application_beforeStartModule
  endpoint:
    path: /application/beforeStartModule
    method: GET
- name: application_boot
  endpoint:
    path: /application/boot
    method: GET
- name: application_viewRender
  endpoint:
    path: /application/viewRender
    method: GET
- name: dispatch_beforeException
  endpoint:
    path: /dispatch/beforeException
    method: GET
- name: console_afterHandleTask
  endpoint:
    path: /console/afterHandleTask
    method: GET
- name: console_afterStartModule
  endpoint:
    path: /console/afterStartModule
    method: GET
- name: console_beforeHandleTask
  endpoint:
    path: /console/beforeHandleTask
    method: GET
- name: console_beforeStartModule
  endpoint:
    path: /console/beforeStartModule
    method: GET
- name: console_boot
  endpoint:
    path: /console/boot
    method: GET
- name: db_afterQuery
  endpoint:
    path: /db/afterQuery
    method: GET
- name: db_beforeQuery
  endpoint:
    path: /db/beforeQuery
    method: GET
- name: db_beginTransaction
  endpoint:
    path: /db/beginTransaction
    method: GET
- name: db_createSavepoint
  endpoint:
    path: /db/createSavepoint
    method: GET
- name: db_commitTransaction
  endpoint:
    path: /db/commitTransaction
    method: GET
- name: db_releaseSavepoint
  endpoint:
    path: /db/releaseSavepoint
    method: GET
- name: db_rollbackTransaction
  endpoint:
    path: /db/rollbackTransaction
    method: GET
- name: db_rollbackSavepoint
  endpoint:
    path: /db/rollbackSavepoint
    method: GET
- name: dispatch_afterBinding
  endpoint:
    path: /dispatch/afterBinding
    method: GET
- name: dispatch_afterDispatch
  endpoint:
    path: /dispatch/afterDispatch
    method: GET
- name: dispatch_afterDispatchLoop
  endpoint:
    path: /dispatch/afterDispatchLoop
    method: GET
- name: dispatch_afterExecuteRoute
  endpoint:
    path: /dispatch/afterExecuteRoute
    method: GET
- name: dispatch_afterInitialize
  endpoint:
    path: /dispatch/afterInitialize
    method: GET
- name: dispatch_beforeDispatch
  endpoint:
    path: /dispatch/beforeDispatch
    method: GET
- name: dispatch_beforeDispatchLoop
  endpoint:
    path: /dispatch/beforeDispatchLoop
    method: GET
- name: dispatch_beforeException
  endpoint:
    path: /dispatch/beforeException
    method: GET
- name: dispatch_beforeExecuteRoute
  endpoint:
    path: /dispatch/beforeExecuteRoute
    method: GET
- name: dispatch_beforeForward
  endpoint:
    path: /dispatch/beforeForward
    method: GET
- name: dispatch_beforeNotFoundAction
  endpoint:
    path: /dispatch/beforeNotFoundAction
    method: GET
- name: loader_afterCheckClass
  endpoint:
    path: /loader/afterCheckClass
    method: GET
- name: loader_beforeCheckClass
  endpoint:
    path: /loader/beforeCheckClass
    method: GET
- name: loader_beforeCheckPath
  endpoint:
    path: /loader/beforeCheckPath
    method: GET
- name: loader_pathFound
  endpoint:
    path: /loader/pathFound
    method: GET
- name: micro_afterBinding
  endpoint:
    path: /micro/afterBinding
    method: GET
- name: micro_afterHandleRoute
  endpoint:
    path: /micro/afterHandleRoute
    method: GET
- name: micro_afterExecuteRoute
  endpoint:
    path: /micro/afterExecuteRoute
    method: GET
- name: micro_beforeException
  endpoint:
    path: /micro/beforeException
    method: GET
- name: micro_beforeExecuteRoute
  endpoint:
    path: /micro/beforeExecuteRoute
    method: GET
- name: micro_beforeHandleRoute
  endpoint:
    path: /micro/beforeHandleRoute
    method: GET
- name: micro_beforeNotFound
  endpoint:
    path: /micro/beforeNotFound
    method: GET
- name: model_afterCreate
  endpoint:
    path: /model/afterCreate
    method: GET
- name: model_afterDelete
  endpoint:
    path: /model/afterDelete
    method: GET
- name: model_afterFetch
  endpoint:
    path: /model/afterFetch
    method: GET
- name: model_afterSave
  endpoint:
    path: /model/afterSave
    method: GET
- name: model_afterUpdate
  endpoint:
    path: /model/afterUpdate
    method: GET
- name: model_afterValidation
  endpoint:
    path: /model/afterValidation
    method: GET
- name: model_afterValidationOnCreate
  endpoint:
    path: /model/afterValidationOnCreate
    method: GET
- name: model_afterValidationOnUpdate
  endpoint:
    path: /model/afterValidationOnUpdate
    method: GET
- name: model_beforeDelete
  endpoint:
    path: /model/beforeDelete
    method: GET
- name: model_beforeCreate
  endpoint:
    path: /model/beforeCreate
    method: GET
- name: model_beforeSave
  endpoint:
    path: /model/beforeSave
    method: GET
- name: model_beforeUpdate
  endpoint:
    path: /model/beforeUpdate
    method: GET
- name: model_beforeValidation
  endpoint:
    path: /model/beforeValidation
    method: GET
- name: model_beforeValidationOnCreate
  endpoint:
    path: /model/beforeValidationOnCreate
    method: GET
- name: model_beforeValidationOnUpdate
  endpoint:
    path: /model/beforeValidationOnUpdate
    method: GET
- name: model_notDeleted
  endpoint:
    path: /model/notDeleted
    method: GET
- name: model_notSaved
  endpoint:
    path: /model/notSaved
    method: GET
- name: model_onValidationFails
  endpoint:
    path: /model/onValidationFails
    method: GET
- name: model_prepareSave
  endpoint:
    path: /model/prepareSave
    method: GET
- name: model_validation
  endpoint:
    path: /model/validation
    method: GET
- name: modelsManager_afterInitialize
  endpoint:
    path: /modelsManager/afterInitialize
    method: GET
- name: request_afterAuthorizationResolve
  endpoint:
    path: /request/afterAuthorizationResolve
    method: GET
- name: request_beforeAuthorizationResolve
  endpoint:
    path: /request/beforeAuthorizationResolve
    method: GET
- name: response_afterSendHeaders
  endpoint:
    path: /response/afterSendHeaders
    method: GET
- name: response_beforeSendHeaders
  endpoint:
    path: /response/beforeSendHeaders
    method: GET
- name: router_afterCheckRoutes
  endpoint:
    path: /router/afterCheckRoutes
    method: GET
- name: router_beforeCheckRoutes
  endpoint:
    path: /router/beforeCheckRoutes
    method: GET
- name: router_beforeCheckRoute
  endpoint:
    path: /router/beforeCheckRoute
    method: GET
- name: router_beforeMount
  endpoint:
    path: /router/beforeMount
    method: GET
- name: router_matchedRoute
  endpoint:
    path: /router/matchedRoute
    method: GET
- name: router_notMatchedRoute
  endpoint:
    path: /router/notMatchedRoute
    method: GET
- name: view_afterCompile
  endpoint:
    path: /view/afterCompile
    method: GET
- name: view_afterRender
  endpoint:
    path: /view/afterRender
    method: GET
- name: view_afterRenderView
  endpoint:
    path: /view/afterRenderView
    method: GET
- name: view_beforeCompile
  endpoint:
    path: /view/beforeCompile
    method: GET
- name: view_beforeRender
  endpoint:
    path: /view/beforeRender
    method: GET
- name: view_beforeRenderView
  endpoint:
    path: /view/beforeRenderView
    method: GET
- name: view_notFoundView
  endpoint:
    path: /view/notFoundView
    method: GET
- name: volt_compileFilter
  endpoint:
    path: /volt/compileFilter
    method: GET
- name: volt_compileFunction
  endpoint:
    path: /volt/compileFunction
    method: GET
- name: volt_compileStatement
  endpoint:
    path: /volt/compileStatement
    method: GET
- name: volt_resolveExpression
  endpoint:
    path: /volt/resolveExpression
    method: GET
- name: Filter
  endpoint:
    path: /filter
    method: GET
    data_selector: records
    params: {}
- name: FilterFactory
  endpoint:
    path: /filter/factory
    method: GET
    data_selector: records
    params: {}
- name: absint
  endpoint:
    path: /filter/absint
    method: GET
    data_selector: records
- name: alnum
  endpoint:
    path: /filter/alnum
    method: GET
    data_selector: records
- name: alpha
  endpoint:
    path: /filter/alpha
    method: GET
    data_selector: records
- name: bool
  endpoint:
    path: /filter/bool
    method: GET
    data_selector: records
- name: email
  endpoint:
    path: /filter/email
    method: GET
    data_selector: records
- name: float
  endpoint:
    path: /filter/float
    method: GET
    data_selector: records
- name: int
  endpoint:
    path: /filter/int
    method: GET
    data_selector: records
- name: lower
  endpoint:
    path: /filter/lower
    method: GET
    data_selector: records
- name: lowerfirst
  endpoint:
    path: /filter/lowerfirst
    method: GET
    data_selector: records
- name: regex
  endpoint:
    path: /filter/regex
    method: GET
    data_selector: records
- name: remove
  endpoint:
    path: /filter/remove
    method: GET
    data_selector: records
- name: replace
  endpoint:
    path: /filter/replace
    method: GET
    data_selector: records
- name: special
  endpoint:
    path: /filter/special
    method: GET
    data_selector: records
- name: specialfull
  endpoint:
    path: /filter/specialfull
    method: GET
    data_selector: records
- name: string
  endpoint:
    path: /filter/string
    method: GET
    data_selector: records
- name: stringlegacy
  endpoint:
    path: /filter/stringlegacy
    method: GET
    data_selector: records
- name: striptags
  endpoint:
    path: /filter/striptags
    method: GET
    data_selector: records
- name: trim
  endpoint:
    path: /filter/trim
    method: GET
    data_selector: records
- name: upper
  endpoint:
    path: /filter/upper
    method: GET
    data_selector: records
- name: upperfirst
  endpoint:
    path: /filter/upperfirst
    method: GET
    data_selector: records
- name: upperwords
  endpoint:
    path: /filter/upperwords
    method: GET
    data_selector: records
- name: url
  endpoint:
    path: /filter/url
    method: GET
    data_selector: records
- name: invoices
  endpoint:
    path: /admin/invoices/list
    method: GET
    data_selector: controller
    params: {}
- name: routes
  endpoint:
    path: /admin/invoices/list
    method: GET
    data_selector: routes
    params: {}
- name: admin_customers_list
  endpoint:
    path: /admin/customers/list
    method: GET
    data_selector: routes
    params: {}
- name: invoices
  endpoint:
    path: /admin/invoices
    method: GET
    data_selector: route
    params: {}
- name: login
  endpoint:
    path: /login
    method: GET
    data_selector: route
    params: {}
- name: session
  endpoint:
    path: /session
    method: GET
    data_selector: records
    params: {}
- name: Url
  endpoint:
    path: /mvc/url
    method: GET
    data_selector: data
- name: validation
  endpoint:
    path: /filter/validation
    method: GET
    data_selector: validators
    params: {}
- name: validators
  endpoint:
    path: /validators
    method: GET
    data_selector: validators
    params: {}
- name: file_mime_type
  endpoint:
    path: /filter/validation/file/mimetype
    method: GET
    data_selector: types
    params: {}
- name: file_resolution_equal
  endpoint:
    path: /filter/validation/file/resolution/equal
    method: GET
    data_selector: resolution
    params: {}
- name: file_resolution_max
  endpoint:
    path: /filter/validation/file/resolution/max
    method: GET
    data_selector: resolution
    params: {}
- name: file_resolution_min
  endpoint:
    path: /filter/validation/file/resolution/min
    method: GET
    data_selector: resolution
    params: {}
- name: file_size_equal
  endpoint:
    path: /filter/validation/file/size/equal
    method: GET
    data_selector: size
    params: {}
- name: file_size_max
  endpoint:
    path: /filter/validation/file/size/max
    method: GET
    data_selector: size
    params: {}
- name: file_size_min
  endpoint:
    path: /filter/validation/file/size/min
    method: GET
    data_selector: size
    params: {}
- name: identical
  endpoint:
    path: /filter/validation/identical
    method: GET
    data_selector: accepted
    params: {}
- name: inclusion_in
  endpoint:
    path: /filter/validation/inclusionin
    method: GET
    data_selector: domain
    params: {}
- name: ip
  endpoint:
    path: /filter/validation/ip
    method: GET
    data_selector: version
    params: {}
- name: numericality
  endpoint:
    path: /filter/validation/numericality
    method: GET
    data_selector: message
    params: {}
- name: presence_of
  endpoint:
    path: /filter/validation/presenceof
    method: GET
    data_selector: message
    params: {}
- name: regex
  endpoint:
    path: /filter/validation/regex
    method: GET
    data_selector: pattern
    params: {}
- name: string_length
  endpoint:
    path: /filter/validation/stringlength
    method: GET
    data_selector: max
    params: {}
- name: string_length_max
  endpoint:
    path: /filter/validation/stringlength/max
    method: GET
    data_selector: max
    params: {}
- name: string_length_min
  endpoint:
    path: /filter/validation/stringlength/min
    method: GET
    data_selector: min
    params: {}
- name: uniqueness
  endpoint:
    path: /filter/validation/uniqueness
    method: GET
    data_selector: message
    params: {}
- name: url
  endpoint:
    path: /filter/validation/url
    method: GET
    data_selector: message
    params: {}
- name: config
  endpoint:
    path: config/config.php
    method: GET
    data_selector: configData
- name: Loader
  endpoint:
    path: /autoload/
    method: GET
    data_selector: records
- name: logger
  endpoint:
    path: /logger
    method: POST
    data_selector: logs
    params: {}
- name: stream_logger
  endpoint:
    path: /storage/logs/main.log
    method: POST
    data_selector: messages
- name: syslog_logger
  endpoint:
    path: syslog
    method: POST
    data_selector: messages
- name: noop_logger
  endpoint:
    path: noop
    method: POST
    data_selector: messages
- name: request
  endpoint:
    path: /request
    method: GET
    data_selector: request
- name: response
  endpoint:
    path: /response
    method: GET
    data_selector: content
    params: {}
- name: locale
  endpoint:
    path: /intl/locale
    method: GET
    data_selector: locales
    params: {}
- name: message_formatter
  endpoint:
    path: /intl/message_formatter
    method: GET
    data_selector: formatters
    params: {}
- name: collator
  endpoint:
    path: /intl/collator
    method: GET
    data_selector: collators
    params: {}
- name: transliterator
  endpoint:
    path: /intl/transliterator
    method: GET
    data_selector: transliterators
    params: {}
- name: Crypt
  endpoint:
    path: /phalcon/encryption/#crypt-component
    method: GET
    data_selector: component details
- name: Builder
  endpoint:
    path: /phalcon/encryption/security/jwt/builder
    method: GET
    data_selector: components
- name: Parser
  endpoint:
    path: /phalcon/encryption/security/jwt/token/parser
    method: GET
    data_selector: components
- name: Validator
  endpoint:
    path: /phalcon/encryption/security/jwt/validator
    method: GET
    data_selector: components
- name: serializers
  endpoint:
    path: /storage/serializers
    method: GET
    data_selector: serializers
    params: {}
- name: adapters
  endpoint:
    path: /storage/adapters
    method: GET
    data_selector: adapters
    params: {}
- name: Apcu
  endpoint:
    path: /storage/apcu
    method: GET
- name: Libmemcached
  endpoint:
    path: /storage/libmemcached
    method: GET
- name: Memory
  endpoint:
    path: /storage/memory
    method: GET
- name: Redis
  endpoint:
    path: /storage/redis
    method: GET
- name: Stream
  endpoint:
    path: /storage/stream
    method: GET
- name: Custom Adapter
  endpoint:
    path: /storage/custom
    method: GET
    data_selector: adapter
    params: {}
- name: Adapter Factory
  endpoint:
    path: /storage/adapter-factory
    method: GET
    data_selector: factory
    params: {}
- name: collection
  endpoint:
    path: /support/collection
    method: GET
    data_selector: data
    params: {}
- name: Payload
  endpoint:
    path: /phalcon/domain/payload
    method: GET
    data_selector: properties
- name: PayloadFactory
  endpoint:
    path: /phalcon/domain/payloadfactory
    method: GET
    data_selector: properties
- name: Status
  endpoint:
    path: /phalcon/domain/status
    method: GET
    data_selector: constants
- name: blacklist
  endpoint:
    path: blacklist
    method: POST
    data_selector: result
    params: {}
- name: chunk
  endpoint:
    path: chunk
    method: POST
    data_selector: result
    params: {}
- name: filter
  endpoint:
    path: filter
    method: POST
    data_selector: result
    params: {}
- name: first
  endpoint:
    path: first
    method: POST
    data_selector: result
    params: {}
- name: firstKey
  endpoint:
    path: /firstKey
    method: GET
    data_selector: result
    params: {}
- name: flatten
  endpoint:
    path: /flatten
    method: GET
    data_selector: result
    params: {}
- name: get
  endpoint:
    path: /get
    method: GET
    data_selector: result
    params: {}
- name: group
  endpoint:
    path: /group
    method: GET
    data_selector: result
    params: {}
- name: has
  endpoint:
    path: /has
    method: GET
    data_selector: result
    params: {}
- name: isUnique
  endpoint:
    path: /isUnique
    method: GET
    data_selector: result
    params: {}
- name: last
  endpoint:
    path: /last
    method: GET
    data_selector: result
    params: {}
- name: lastKey
  endpoint:
    path: /lastKey
    method: GET
    data_selector: result
    params: {}
- name: order
  endpoint:
    path: /order
    method: GET
    data_selector: result
    params: {}
- name: pluck
  endpoint:
    path: /pluck
    method: GET
    data_selector: result
    params: {}
- name: set
  endpoint:
    path: /set
    method: GET
    data_selector: result
    params: {}
- name: sliceLeft
  endpoint:
    path: /sliceLeft
    method: GET
    data_selector: result
    params: {}
- name: sliceRight
  endpoint:
    path: /sliceRight
    method: GET
    data_selector: result
    params: {}
- name: split
  endpoint:
    path: /split
    method: GET
    data_selector: result
    params: {}
- name: toObject
  endpoint:
    path: /toObject
    method: GET
    data_selector: result
    params: {}
- name: validateAll
  endpoint:
    path: /validateAll
    method: GET
    data_selector: result
    params: {}
- name: validateAny
  endpoint:
    path: /validateAny
    method: GET
    data_selector: result
    params: {}
- name: whitelist
  endpoint:
    path: /whitelist
    method: GET
    data_selector: result
    params: {}
- name: basename
  endpoint:
    path: /basename
    method: GET
    data_selector: result
    params: {}
- name: decode
  endpoint:
    path: /decode
    method: GET
    data_selector: result
    params: {}
- name: encode
  endpoint:
    path: /encode
    method: GET
    data_selector: result
    params: {}
- name: isBetween
  endpoint:
    path: /isBetween
    method: GET
    data_selector: result
    params: {}
- name: camelize
  endpoint:
    path: /camelize
    method: GET
    data_selector: result
    params: {}
- name: concat
  endpoint:
    path: /concat
    method: GET
    data_selector: result
    params: {}
- name: countVowels
  endpoint:
    path: /countVowels
    method: GET
    data_selector: result
    params: {}
- name: decapitalize
  endpoint:
    path: /decapitalize
    method: GET
    data_selector: result
    params: {}
- name: decrement
  endpoint:
    path: /decrement
    method: GET
    data_selector: result
    params: {}
- name: dirFromFile
  endpoint:
    path: /dirFromFile
    method: GET
    data_selector: result
    params: {}
- name: Registry
  endpoint:
    path: /support/registry
    method: GET
    data_selector: data
    params: {}
notes:
- This is a version still under heavy development and not fully functional.
- Installing a web server is outside the scope of this document.
- You should always try and use the latest version of Phalcon and PHP as both address
  bugs, security enhancements as well as performance.
- The preferred method of installation is through PECL.
- To install phalcon with PECL you will need at least 4GB of RAM, otherwise the PECL
  build command will fail.
- Escaping identifiers is enabled by default. However, if you need to disable this
  feature, you can do so using the setup() method.
- Values returned from the database system are always represented as string values
  by PDO.
- Using transactions increases performance in most database systems and also ensures
  data integrity.
- Supports CSS and JavaScript assets
- Assets can be local or remote
- If precompiled assets exist in the file system they must be served directly by the
  web server.
- This method is not recommended for production environments and high-load applications.
- The default access action for Phalcon\Acl is Phalcon\Acl\Enum::DENY.
- Even after implementing the cache, you should always check the hit ratio of your
  cache backend over a period of time, to ensure that your cache strategy is optimal.
- ACL uses a whitelist approach with default DENY access.
- Be cautious with `*` wildcard usage to avoid unintended access.
- The default serializer for all adapters is Phalcon\Storage\Serializer\Php.
- The Apcu adapter requires apcu to be enabled in your target system.
- The default serializer for all adapters is Phalcon\Storage\Serializer\Php which
  uses PHP's serialize and unserialize methods.
- The cache adapter can be configured to use a different serializer.
- Phalcon v5 supports only PHP 8.0 and above.
- The Autoload component has been moved from the parent namespace.
- The Cache component has been moved to the Cache namespace.
- The Collection component has been moved to the Support namespace.
- The Config component has been moved to the Config namespace.
- The Container component has been removed from the framework.
- The Crypt component has been moved to the Encryption namespace.
- The Di component has been moved to the Di namespace.
- Once it is ready for full testing it will be available to install using composer.
- We do not accept Pull Requests to the `master` branch
- To encourage contributions, we introduced Zephir, a language closely resembling
  PHP and Javascript syntax.
- Building a feature-rich framework necessitates a comprehensive development environment
  supporting various features and associated services.
- Ensure that docker is installed on your machine.
- The development environments include predefined aliases in the .bashrc file.
- The PHP built-in web server is not recommended for production applications.
- On Windows, PHP-FPM is in the PHP distribution archive.
- Using .htaccess files requires your apache installation to have the AllowOverride
  All option set.
- For users that are using the Persian letter 'م' (meem) in uri parameters, there
  is an issue with mod_rewrite.
- Inside the Devilbox PHP container, projects are always in /shared/httpd/.
- On your host operating system, projects are by default in ./data/www/ inside the
  Devilbox git directory. This path can be changed via HOST_PATH_HTTPD_DATADIR.
- Projects are always in /shared/httpd/ inside the Devilbox PHP container.
- On your host operating system, projects are by default in ./data/www/ inside the
  Devilbox git directory.
- Once it is ready for full testing it will be available to install using composer
  and we will announce it in our blog.
- 'The simplest way to generate a model for a table called `customers` is: $ phalcon
  model customers'
- Scaffolding is a quick way to generate some major pieces of an application.
- The keys of the array elements to be hidden are case-insensitive
- Please make sure that this component is not used in production environments, as
  it can reveal information about your server to attackers
- Phalcon migrations have been removed from DevTools and moved to a separate repository.
- If `exportDataFromTables` is set, data will be exported with every migration.
- If you have not installed the application yet, head over to the installation page
  and complete the installation prior to continuing with this tutorial.
- Phalcon is an extension loaded in memory, the footprint of your project will be
  minimal, while at the same time, you will enjoy a nice performance boost.
- Phalcon is an extension loaded in memory, offering a minimal footprint while providing
  a performance boost.
- The entry point will be public/index.php
- The application does not generate actual invoices but serves as an example of how
  these tasks are implemented using Phalcon.
- Users must have a valid username and password to log in.
- Passwords are stored as hashes using sha1.
- Requires a valid username and password for login
- User data is stored in the table 'users' in the database 'invo'
- Search action performs differently based on HTTP method — POST for searching, GET
  for pagination.
- The search action utilizes both POST and GET methods.
- The search form includes filters for product details.
- Uses the Phalcon framework for managing products
- Data should be submitted as a JSON string in requests.
- You can use Vökuró as a starting point for your application and enhance it further
  to meet your needs.
- Vökuró uses the Dotenv library to manage environment variables.
- Uses CSRF protection in forms
- All the forms for Vökuró are located in /src/Forms
- Users model has unique email validation.
- The application does not store clear text passwords.
- These are recommendations and good practices.
- APCu can be used to cache the results of computationally expensive operations or
  otherwise slow data sources like web services with high latency.
- Make sure to measure through profiling that the optimizations actually improved
  execution time.
- Phalcon provides a lightweight application structure known as Micro to facilitate
  the creation of applications with minimal PHP code and reduced overhead.
- Micro applications are well-suited for small-scale projects, such as APIs and prototypes,
  where efficiency and low overhead are crucial.
- Routes must always start with `/`
- For routes to function correctly, your web server needs specific configurations.
- The name that we bind each route has a suffix of Action. This is not necessary.
- Middleware classes can interrupt the execution flow when a specific business rule
  is not satisfied.
- Middleware can be any PHP callable function, and you have the flexibility to organize
  your code according to your preferences.
- The relevant db service must be registered in your DI container.
- Each task file and class must be suffixed with Task.
- The default task is MainTask, and the default method is main.
- CLI applications do not have a view layer and can be run more than once at a time.
- CLI applications can also handle different modules, the same as MVC applications.
- This version is still under heavy development and not fully functional.
- CLI applications can handle different modules, similar to MVC applications.
- $invoiceComponent->setDi($container) is automatically called
- Services can be loaded from PHP or YAML config files.
- Supports various types of joins and aggregations.
- Models are intended to work with the database on a high layer of abstraction.
- Supports data assignment using the assign method.
- When retrieving the record with findFirst(), you need to get the full object back
  (no columns definition) but also retrieve it using the primary key. If not, the
  ORM will issue an INSERT instead of UPDATE.
- The Object Document Mapper functionality has been temporarily removed for v4.0+.
- Resultsets can be serialized and stored in a cache backend.
- Dynamic Update is now enabled by default, you can disable it by changing the 'phalcon.orm.dynamic_update'
  in the php.ini or by ini_set.
- Phalcon models by default connect to the same database connection (`db` service)
  that has been defined in the dependency injection container.
- You can specify a different connection for `read` operations and a different one
  for `write` operations.
- The model class uses some properties internally for services and cannot be used
  as fields in the database.
- Underscores in property names can be problematic when using getters and setters.
- You can use traits instead of behaviors, but they do require that all your fields,
  that the behavior will affect, must have the same name.
- If you implement an event method in a trait (e.g. `beforeCreate`) you cannot have
  it in your model since the two will produce an error.
- Phalcon allows filtering and binding parameters in queries.
- Custom resultsets can encapsulate additional functionalities.
- Cache lifetime is set to 300 seconds for specific queries.
- PHQL caches execution plans to improve performance.
- Use bound parameters to reduce memory usage and processing.
- Phalcon models by default connect to the same database connection (`db` service).
- During deployments to production, please ensure that you always invalidate the metaData
  cache so that database changes that propagated during your deployment are available
  in your application.
- It is imperative to use a serializer that can properly serialize and unserialize
  objects without changing their state.
- For local development, the Memory adapter is recommended so that any changes to
  the database can be reflected immediately.
- The adapter uses the file system to store the table metadata.
- Accessing the database is several times slower than calculating a cache key.
- You need to ensure that you have a strategy to invalidate the cache when the underlying
  records in the database change.
- Columns added, modified, or removed from the mapped table must be manually updated
  in the model for everything to work properly.
- Logging SQL statements as they happen.
- Profiling SQL statements to analyze performance.
- Uses reusable option in relationships to cache results.
- Relationships do not have constraints attached by default.
- Adding related entities by overloading certain methods/events is not possible.
- Accessing related data can significantly increase the number of queries in your
  database.
- You are encouraged to use the reusable option as often as possible in your relationships.
- The paginate() method does all the work to paginate the data.
- The object exposes constants for pagination properties.
- The full implementation of a DataMapper is not yet complete.
- You will only need to substitute the values in <> with the respective values for
  your environment.
- The `into()` method is used to specify the table to insert data to.
- Bound values are automatically quoted and escaped.
- Certain databases (in particular MySQL) accept `ORDER BY` on a delete.
- Certain databases (MySQL, SQLite) accept a `LIMIT` and/or `OFFSET` clause.
- Some databases (notably PostgreSQL) recognize a `RETURNING` clause.
- The component offers automatic styling of messages on the screen.
- You must set setImplicitFlush() to false to directly show results on the page.
- By default, implicit flushing is set to true.
- When using the Phalcon\Flash\Direct component, to directly show results on the page
  you must set setImplicitFlush() to false.
- Forms can be initialized outside the form class by adding elements to it.
- This component is going to be deprecated in a future version of Phalcon.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- This component does not generate any HTML links. It just stores the links.
- You will need to create your serializers that will parse these objects and generate
  the necessary output.
- Phalcon\Tag will be removed in a future Phalcon version. The functionality is offered
  by the Phalcon\Html\TagFactory component.
- You can use `echo` when calling `$view->render()`, which will output the contents
  of the rendering process on screen. This only works with Phalcon\Mvc\View\Simple
  and not with Phalcon\Mvc\View.
- Using `echo` with the latter will produce a warning.
- The placeholders for Volt `{{`, `}}`, `{%`, and `%}` cannot be changed or set.
- Volt is integrated with Phalcon\Mvc\View
- '`Phalcon\Tag` will be removed in a future Phalcon version. The functionality is
  offered by the Phalcon\Html\TagFactory component.'
- The default doctype value is HTML5.
- The default controller (when no controller has been specified in the URL) is IndexController
  and the default action (when no action has been specified in the URL) is indexAction.
- In order to access the services from your controller, you will need to extend the
  Phalcon\Mvc\Controller class
- The persistent service is automatically registered for any component (including
  controllers) that extends the Phalcon\Di\Injectable class
- You can disable automatic escaping by using setAutoEscape()
- The dispatcher can handle exceptions and redirect to a 404 page.
- By default, and for performance reasons, Volt only checks for changes in the children
  templates to know when to re-compile to plain PHP again, so it is recommended to
  initialize Volt with the option 'always' => true.
- You need to run this script from the command line
- Default routing expects a URI matching /:controller/:action/:params
- The default controller is IndexController and the default action is indexAction.
- Actions must be suffixed by Action.
- It allows you to manipulate sessions in your application.
- The response object is not called directly in most cases, rather it is built gradually
  or attached to the afterDispatch event.
- Phalcon will set that as the returned payload. This is particularly useful when
  writing APIs.
- Keep in mind that performing a `forward` is not the same as making an HTTP redirect.
- If you can, avoid replacing mod_rewrite with the code above. Having the necessary
  route-matching mechanism handled by the web server is much faster than handling
  things in your own application.
- The code above can be used as is or adjusted to help with legacy URL transformations
  or other use cases where we need to manipulate the action name.
- Uses global events manager.
- You must explicitly set the Events Manager to a component using the setEventsManager()
  method.
- The logger component implements PSR-3, allowing various logging levels.
- Uses HTTP headers for response manipulation.
- Cookies are automatically encrypted prior to sending them to the client.
- This guide is not intended to be a complete documentation of the intl extension.
- The Queue component has been removed from v4 because of a lack of activity for Beanstalkd.
- Requires PHP's openssl extension to be present in the system
- 'DOES NOT support insecure algorithms with modes: des*, rc2*, rc4*, des*, *ecb'
- By default, the component will use password_hash to hash a string using the Phalcon\Encryption\Security::CRYPT_DEFAULT
  which defaults to Phalcon\Encryption\Security::CRYPT_BCRYPT and corresponds to PHP's
  PASSWORD_BCRYPT.
- The code snippet above is incomplete and must not be used as is for production applications
- Important to have a valid session service registered in your Dependency Injection
  container.
- Currently, only symmetric algorithms are supported
- Phalcon offers the Phalcon\Storage\AdapterFactory class to easily instantiate cache
  adapter classes.
- The objects are cached in the factory so if you call the newInstance() method with
  the same parameters during the same request, you will get the same object back.
- Sanitizing is the process that removes specific characters from a value, that are
  not required or desired by the user or application.
- Default behavior matches the pattern /:controller/:action/:params
- Trailing slashes may produce a not-found status
- You need to call setId() before calling start() for the id to take effect
- You need to call setName() before calling start() for the name to take effect
- Phalcon v5.6 supports only PHP 8.0 and above.
- Phalcon needs to be loaded after PDO.
- The directory structure for single-module MVC applications typically includes directories
  for controllers, models, and views.
- In multi-module applications, each module directory contains a Module.php file to
  configure module-specific settings.
- The autoloading process is case-sensitive
- Strategies based on namespaces/prefixes are faster than the directories strategy
- The logger component implements PSR-3
- Logging to a stream writes messages to a valid registered stream in PHP
- Uses PDO for database interaction.
- The request object parses the PUT stream that has been received internally.
- Sanitization takes place when calling the following methods - getFilteredPost()
  - getFilteredPut() - getFilteredQuery()
- Assets can be filtered, i.e., manipulated before their output to the view.
- Default access action is Phalcon\Acl\Enum::DENY.
- By default, this component utilizes the AES-256-CFB cipher.
- You must use a key length corresponding to the current algorithm. For the default
  algorithm aes-256-cfb the default key length is 32 bytes.
- The code snippets provided are incomplete and must not be used as is for production
  applications
- If there is an error in the options or the class cannot add one or more servers
  in the pool, a `Phalcon\Storage\Exception` will be thrown.
- The component is heavily integrated into Phalcon\Cache\Cache as well as Phalcon\Session.
- The adapter utilizes logic to store files in separate subdirectories based on the
  name of the key passed.
- It is highly recommended to discuss your NFR and PR with the core team and community
- Phalcon is compiled into a C extension loaded on your web server.
- Bugs lead to segmentation faults, causing Phalcon to crash some of your web server
  processes.
- Remember to include the register information for your db service, i.e. adapter,
  connection parameters, etc.
- Phalcon also offers a component that can be used in a read-only fashion.
- This class has been renamed from ReadOnly in order to avoid collisions with PHP
  8.x reserved words.
- In future versions of Phalcon, this component will be reworked to follow the Payload
  Interop interface.
- In production require SSL
- Port 80 will require nginx to be started with root permissions
- Paths in this guide should be relative, according to your installation.
- Inside the Devilbox PHP container, projects are always in /shared/httpd/
- Nanobox has been discontinued.
- Installing a web server is outside the scope of this document. Please refer to relevant
  guides on the Internet on how to install a web server.
- Phalcon Devtools can be installed using composer.
- Use the command 'phalcon' to check the installation.
- handle() accepts a URI and will not operate without it.
- Migrations will be executed from oldest to newest.
- Whenever migrations are run, the application scans all available migrations and
  their status irrespective of their "age".
- Phalcon uses PDO to connect to databases.
- Writing proper tests can assist in writing better software.
- If you set up proper test cases you can eliminate most functional bugs and better
  maintain your software.
- By default, bound parameters are not cast in the PHP userland to the specified bind
  types.
- Phalcon is an extension loaded in memory, providing a performance boost.
- It is recommended that you open the application in your favorite editor so that
  you can follow this tutorial easier.
- Phalcon does not impose a particular directory structure, the particular structure
  is just our implementation.
- The backend is a private area where only registered users have access.
- Users are authenticated via a session mechanism.
- Assets can be filtered and versioned.
- Auto versioning is not recommended for production.
- Every time the application requests assets such as /assets/js/global.js the application
  will check whether the asset exists. If yes, it will be handled by the web server.
- The search action can be accessed using both POST and GET methods.
- Be very careful with wildcards in roles and components.
- Always test permissions to ensure they are set correctly.
- Robot names must be unique
- 'Value of field ''type'' must be part of list: droid, mechanical, virtual'
- This tutorial assumes that you are familiar with the concepts of the Model View
  Controller design pattern.
- Vökuró uses the popular Dotenv library.
- You need to run migrations to initialize the database.
- The e-mail is required
- Terms and conditions must be accepted
- Never store clear text passwords; always hash them.
- The Logger component has been moved to the Logger namespace.
- The Security component has been moved to the Encryption namespace.
- The Phalcon\Text component has been deprecated.
- The Url component has been moved to the Mvc namespace.
- The Validation component has been moved to the Filter namespace.
- The Version component has been moved to the Support namespace.
- Your code must abide by the coding standards that Phalcon uses.
- Docker-based approach simplifies the setup, ensuring a more accessible and efficient
  development process for Phalcon.
- These are recommendations and good practices. You are by no means obligated to follow
  the advice in this document.
- Profiling should be continuous in a production application.
- Use port 8000 for nginx configuration
- Starting from Phalcon v5.3.0, the Micro object is no longer automatically registered
  in the dependency injection container with the name application.
- On Windows PHP-FPM is in the PHP distribution archive.
- Using .htaccess files requires your apache installation to have the 'AllowOverride
  All' option set.
- The devtools are available as phar download on our GitHub repository.
- Phalcon provides a flexible dependency injection container for managing services.
- The generated code can serve as a guide to better understand how the framework works
  or develop prototypes.
- Make sure that this component is not used in production environments, as it can
  reveal information about your server to attackers.
- The component must not be enabled in production environments.
- It is bad practice to leave it enabled but if you forget, at least certain key pieces
  of information about your host will not be visible to potential hackers.
- Whenever migrations are run, the application scans all available migrations and
  their status irrespective of their 'age'. If one or more were not executed in a
  previous run, they will be executed in the next run.
- Modify the phpunit.xml to fit your needs and save it in your project root directory.
- Phalcon is loosely coupled, allowing any directory structure.
- Namespaces can be used to avoid class name collisions.
- You can also specify the namespace when defining your routes.
- Updating rows uses the same rules as inserting rows.
- The existing implementation was using a PHP MongoDB driver that has been deprecated
  for years.
- The application allows creating and updating products through a form.
- Model class uses properties internally for services, reserved names cannot be used
  as fields in the database.
- The ORM has several options that control specific behaviors globally.
- If you want to get integer values back from int related database fields, ensure
  that the castOnHydrate is enabled.
- Insert operation requires the data to be submitted as a JSON string.
- Update and Delete operations require the id of the robot in the URL.
- A behavior must be added in the model initializer, a model can have zero or more
  behaviors.
- Adding this behaviour to a model prevents its afterDelete event from being triggered,
  since the record isn't actually deleted.
- Choosing a serializer that cannot store objects properly will produce errors when
  the cache is restored for your models.
- What results to cache and for how long will depend on the needs of your application.
- Cache can be set for individual queries or globally for the model.
- Using reusable relationships can improve performance by avoiding repeated queries.
- PHQL caches internally the execution plan, improving performance.
- Performance can be improved by reusing the PHQL query.
- Models allow you to implement events that will be thrown while performing an insert/update/delete.
- All controllers are located in the /src/Controllers directory
- The views directory contains directories that map to each controller and are stored
  under /themes/vokuro
- Never store clear text passwords. Use hashing.
- Retrieving the metadata is an expensive database operation, and we certainly do
  not want to perform it every time we run a query.
- Many-to-many relationships require 3 models and define the attributes involved in
  the relationship.
- Transactions ensure all database operations execute successfully before storing
  data.
- Data integrity is essential in every application.
- Validation events allow us to call built-in validators on the record.
- These are recommendations and good practices. You are by no means obligated to follow
  the advice in this document, and by no means is this list exhaustive.
- Uses adapters for pagination
- Limit of records per page can be set
- Routes must always start with /
- Supports dependency injection through constructor, setter, and properties.
- The component allows automatic styling of messages on the screen.
- Phalcon offers components under the Phalcon\Forms namespace that help developers
  create and maintain forms.
- Validators are executed in the same order as they were registered.
- By default, messages generated by all the elements in the form are joined.
- If you have two controllers in an application with the same name, a namespace can
  be used to distinguish them.
- By default, an INNER JOIN is assumed.
- PHQL parser will automatically resolve the conditions of the JOIN operation.
- The model class uses some properties internally for services. The names of those
  properties are reserved and cannot be used as fields in the database.
- The old method `escapeHtmlAttr()` will be removed in the future and emit a `@deprecated`
  warning.
- The old method `escapeUrl()` will be removed in the future and emit a `@deprecated`
  warning.
- The old method `escapeCss()` will be removed in the future and emits a `@deprecated`
  warning.
- Uses findFirstBy<property-name>() method to quickly perform a select from a table
  by using the property name.
- The component does not generate any HTML links. It just stores the links.
- Additional flexibility is available regarding database connections.
- The ORM also provides Horizontal Sharding features.
- If you implement an event method in a trait (e.g. beforeCreate) you cannot have
  it in your model since the two will produce an error.
- It is imperative to use a serializer that can properly serialize and unserialize
  objects without changing their state. `Php` and `Igbinary` are such serializers.
  `Json` will convert objects to `stdClass` and `Simple`/`Complex` resultsets will
  become arrays. Choosing a serializer that cannot store objects properly will produce
  errors when the cache is restored for your models.
- What results to cache and for how long will depend on the needs of your application.
  Resultsets that change frequently should not be cached, since the cache results
  will be invalidated quickly with subsequent changes to the underlying records that
  represent these resultsets.
- Caching data comes with the cost of compiling and storing that data in the cache.
  You should always leverage that processing cost when formulating your caching strategy.
- Ensure that you have a strategy to invalidate the cache when the underlying records
  in the database change.
- PHQL caches internally the execution plan to improve performance.
- It is highly recommended to build all SQL statements passing variable parameters
  as bound parameters.
- Execution plans for queries involving prepared statements are cached by most database
  systems.
- Models act as listeners to the events manager.
- If a listener returns false that will stop the operation that is executing currently.
- SQL statements are logged in the file /storage/logs/db.log
- Profiling helps in identifying bottlenecks in your SQL code
- For local development, the Phalcon\Mvc\Models\MetaData\Memory adapter is recommended
  so that any changes to the database can be reflected immediately.
- Relationships do not have any constraints attached to them by default.
- You can attach validations to your relationships to ensure the integrity of data.
- Transactions ensure all database operations are executed successfully before storing
  data.
- Isolated transactions require a transaction manager to manage commits and rollbacks.
- Validation can be implemented using built-in validators.
- A paginator is a component that helps with splitting a large amount of data gradually.
- setCssClasses() returns back the object for fluent interface.
- setCustomTemplate() returns back the object for fluent interface.
- setCssIconClasses() returns back the object for fluent interface.
- setAutoescape() returns back the object for fluent interface.
- Certain names are reserved and cannot be used as element names.
- You can easily extend this functionality and create your own helpers.
- You can use echo when calling $view->render(), which will output the contents of
  the rendering process on screen.
- This only works with Phalcon\Mvc\View\Simple and not with Phalcon\Mvc\View.
- Controllers must have the suffix 'Controller' in their file and class name and must
  extend the Phalcon\Mvc\Controller class.
- The default controller is 'IndexController' and the default action is 'indexAction'.
- The method attributes() has been renamed and the old method escapeHtmlAttr() will
  be removed in the future.
- The method url() has been renamed and the old method escapeUrl() will be removed
  in the future.
- The method css() has been renamed and the old method escapeCss() will be removed
  in the future.
- Sessions help maintain persistent data between requests.
- The persistent service is automatically registered for any component that extends
  Phalcon\Di\Injectable.
- Currently, the binder will only use the model's primary key to perform a `findFirst()`.
- Uses the Events Manager to intercept execution of components in the framework.
- Uses a routing component that processes URIs to find matching routes.
- Default routing behavior expects a URI matching the pattern /:controller/:action/:params.
- You need to call setName() before calling start() for the name to take effect.
- This helper creates only the opening <label> tag. You will need to use the Close
  helper to generate the closing </label> tag.
- The trailing slash in the setStaticBaseUrl() parameter is optional. If it is not
  specified, it will automatically be appended to the passed parameter.
- The trailing slash in the setBaseUrl() parameter is optional. If it is not specified,
  it will automatically be appended to the passed parameter.
- Checks if a value has a correct file mime type
- Check if a file has the right resolution
- Checks if a value has a correct file
- Check that a field is unique in the related table
- Checks if a value has a url format
- Validators can be customized by implementing the ValidatorInterface.
- The getMessages() method returns messages generated during validation.
- Requires PHP's json extension to be present in the system
- Requires PHP's yaml extension to be present in the system
- The component is now accessible in controllers using the config key
- You can create your own helpers and register them in the Di container.
- Using `echo` with Phalcon\Mvc\View will produce a warning.
- Volt integrates with Phalcon\Mvc\View allowing for template hierarchy and partials.
- Sanitization is required to prevent SQL injection or XSS attacks.
- Ensure that the folder used by Volt to compile the templates is writeable by your
  web server.
- Compiled Volt templates are phtml fragments; do not allow the webserver to generate
  executable code.
- Request object parses the PUT stream that has been received internally.
- The $_SERVER superglobal contains an array containing information such as headers,
  paths, and script locations.
- 'The adapter accepts two parameters in the constructor''s options array: prefix
  and lifetime.'
- Uses Annotations for access control
- Requires setup of Dependency Injection container
- Controllers must have the suffix Controller in their file and class name
- Actions must be suffixed by Action and they match a route request from the user
- You can access services from your controller by extending the Phalcon\Mvc\Controller
  class.
- Phalcon does not offer intl functionality directly, it's implemented via PECL extension.
- The component offers multilingual capabilities to applications.
- In future versions of Phalcon (v6+) we will introduce a separate package that uses
  queue-interop to ensure maximum re-usability and extensibility for your queues.
- Phalcon events use namespaces to avoid naming collisions.
- Default cipher is aes-256-cfb
- Default hash algorithm is sha256
- A valid session service must be registered in the Dependency Injection container
  for CSRF token checks.
- Phalcon offers various storage adapters for different use cases.
- Serializer classes can be instantiated using the SerializerFactory.
- Phalcon offers a read-only collection that cannot be modified after initial population.
- Custom collection objects must implement the CollectionInterface.
- The Phalcon\Filter\Filter acts as a service locator and implements the __call()
  method.
- The router does not execute the controller and action, it only collects this information
  and then forwards it to the dispatcher.
- If none of the routes specified in the router match, a 404 controller/action can
  be defined using the notFound method.
- The loosely-coupled design allows creation of custom validators.
- Phalcon offers a set of built-in validators for this component.
- Validators return a valid boolean value indicating if the validation was successful
  or not.
- Phalcon\Autoload\Loader class has been renamed Phalcon\Autoload\Loader
- Logger supports multiple adapters for logging.
- You can register as many loggers as you want in the Phalcon\Di\FactoryDefault container.
- The variables in the superglobal arrays are never sanitized and can contain illegal
  characters or even malicious code.
- The $_POST superglobal contains an associative array that contains the variables
  passed to the current script via the HTTP POST method.
- The component acts as a constructor of the response and as an HTTP client to send
  the response back to the caller.
- All setters return the response object back, so they are chainable, offering a more
  fluent interface.
- Browsers rely on the client machine's clock to identify if the date has passed or
  not. Therefore, this caching mechanism has some limitations that the developer must
  account for (different timezones, clock skew, etc.)
- Phalcon does not offer intl functionality; it relies on the intl PECL extension.
- The gettext adapter requires the gettext PHP extension.
- It is important to remember that you will need to have a valid session service registered
  in your Dependency Injection container. Otherwise, the checkToken() will not work.
- Default serializer is Phalcon\Storage\Serializer\Php
- Igbinary and Msgpack require specific PHP extensions
errors:
- 'InvalidArgumentException: Thrown when the data supplied to the component or any
  subcomponents is not valid.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '404 Not Found: Check if the resource exists.'
- '401 Unauthorized: Invalid credentials.'
- 'Wrong email/password: When user credentials are invalid'
- No products are recorded
- '409 Conflict: The robot name must be unique'
- '409 Conflict: Value of field ''type'' must be part of list: droid, mechanical,
  virtual'
- The email is already registered
- 'PhalconException: Any exception thrown in the Phalcon\Cli\Console component will
  be of type Phalcon\Cli\Console\Exception.'
- Validation failed
- Record not found
- 'Invalid parameter number: Check the PDO parameters and ensure that `PDO::ATTR_EMULATE_PREPARES`
  is set to `true`.'
- Error saving file
- If the session has already started, the call will return true.
- If any headers have been sent, it will return false.
- If the adapter is not set, it will throw an exception.
- Phalcon\Encryption\Security\JWT\Exceptions\UnsupportedAlgorithmException
- Phalcon\Encryption\Security\JWT\Exceptions\ValidatorException
- 'Validation: audience not allowed'
- 'Exception: Handle the request and send the response'
- 'Exception: Selectively catch exceptions thrown from the application component'
- 'Exception: Use Phalcon\Logger\Exception to catch exceptions from this component.'
- Invalid Login/Password combination
- Errors printed out (if any)
- 'ValidatorException: The audience is not valid'
- 'ValidatorException: The token has expired'
- 'ValidatorException: The ID does not match'
- 'ValidatorException: The issued at time is invalid'
- 'ValidatorException: The issuer is not valid'
- 'ValidatorException: The not before time is invalid'
- 'ValidatorException: The signature is invalid'
- 'Invalid command: The command entered is not recognized.'
- '404 Not Found: The requested resource could not be found.'
- '401 Unauthorized: Access denied for unauthenticated users.'
- 'Exception: Thrown for errors in the Assets Manager component.'
- '403 Forbidden: Access denied'
- '404 Not Found: Resource not found'
- The e-mail is not valid
- Password is too short. Minimum 8 characters
- CSRF validation failed
- '401 Unauthorized: User must be logged in to access this resource.'
- 'notSaved: Runs when records are not saved (fail)'
- 'notDeleted: Runs when records are not deleted (fail)'
- 'Error saving file: Ensure that the save operation is executed correctly.'
- 'Rollback failed: Check transaction management.'
- 'InvalidCreateAttempt: Trying to create a record that already exists'
- 'InvalidUpdateAttempt: Trying to update a record that does not exist'
- 'PresenceOf: A field with a non null attribute is trying to insert/update a null
  value'
- 'Phalcon\Forms\Exception: Thrown for exceptions in the Phalcon\Forms namespace.'
- 'Phalcon\Mvc\Model\Transaction\Exception: Exception thrown in transaction.'
- 'Phalcon\Mvc\Model\Transaction\Failed: Transaction failed.'
- 'InvalidCreateAttempt: Trying to create a record that already exists.'
- 'InvalidUpdateAttempt: Trying to update a record that does not exist.'
- 'Validation failed: Check the rules set for the fields.'
- Any exceptions thrown in the Phalcon\Mvc\Url component will be of type Phalcon\Mvc\Url\Exception.
- Exceptions can be raised if the hashing algorithm is unknown, if the session service
  is not present in the Di container etc.
auth_info:
  mentioned_objects:
  - Phalcon\Encryption\Security\Exception
  - Phalcon\Encryption\Security\JWT\Token\Signature
  - Phalcon\Encryption\Security\JWT\Token\Item
  - Phalcon\Encryption\Security\JWT\Token\Token
  - Phalcon\Encryption\Security\JWT\Signer\Hmac
  - Phalcon\Encryption\Security\JWT\Builder
  - Phalcon\Encryption\Security\JWT\Validator
  - Phalcon\Encryption\Security\JWT\Token\Parser
  - Token
  - Validator
  - Parser
  - DispatcherInterface
  - ControllerInterface
  - Phalcon\Mvc\Controller
  - Builder
  - Signer
client:
  base_url: https://docs.phalcon.io/5.6
  headers:
    Accept: application/json
source_metadata: null
