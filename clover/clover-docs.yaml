resources:
- name: merchant
  endpoint:
    path: /v3/merchants/{mId}
    method: GET
    data_selector: name
    params: {}
- name: get_all_cash_events
  endpoint:
    path: /dev/reference/cashgetallcashevents
    method: GET
    data_selector: records
- name: get_all_customers
  endpoint:
    path: /dev/reference/customersgetcustomers
    method: GET
    data_selector: records
- name: get_all_employees
  endpoint:
    path: /dev/reference/employeegetemployees
    method: GET
    data_selector: records
- name: get_all_inventory_items
  endpoint:
    path: /dev/reference/inventorygetitems
    method: GET
    data_selector: records
- name: get_all_orders
  endpoint:
    path: /dev/reference/ordergetorders
    method: GET
    data_selector: records
- name: get_all_payments
  endpoint:
    path: /dev/reference/paygetpayments
    method: GET
    data_selector: records
- name: charges
  endpoint:
    path: /dev/reference/charges
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /dev/reference/customers
    method: GET
    data_selector: records
- name: refunds
  endpoint:
    path: /dev/reference/refunds
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/reference/orders
    method: GET
    data_selector: records
- name: tip_adjust_payment
  endpoint:
    path: /dev/reference/tip_adjust_payment
    method: POST
- name: increment_auth
  endpoint:
    path: /dev/reference/increment_auth
    method: POST
- name: capture
  endpoint:
    path: /dev/reference/capture
    method: POST
- name: get_payment
  endpoint:
    path: /dev/reference/get_payment
    method: GET
- name: get_payment_by_external_payment_id
  endpoint:
    path: /dev/reference/get_payment_by_external_payment_id
    method: GET
- name: send_payment_request
  endpoint:
    path: /dev/reference/pay
    method: POST
- name: request_token
  endpoint:
    path: /dev/reference/request_token
    method: POST
- name: read_card
  endpoint:
    path: /dev/reference/read_card
    method: POST
- name: void_payment
  endpoint:
    path: /dev/reference/void
    method: POST
- name: refund_payment
  endpoint:
    path: /dev/reference/refund
    method: POST
- name: get_credit
  endpoint:
    path: /dev/reference/get_credit
    method: GET
- name: credit_request
  endpoint:
    path: /dev/reference/credit
    method: POST
- name: get_device_status
  endpoint:
    path: /dev/reference/device_status
    method: GET
- name: reset_device
  endpoint:
    path: /dev/reference/reset_device
    method: PUT
- name: read_tip
  endpoint:
    path: /dev/reference/read_tip
    method: GET
- name: read_signature
  endpoint:
    path: /dev/reference/read_signature
    method: POST
- name: read_input
  endpoint:
    path: /dev/reference/read_input
    method: POST
- name: read_confirmation
  endpoint:
    path: /dev/reference/read_confirmation
    method: POST
- name: retrieve_printers
  endpoint:
    path: /dev/reference/retrieve_printers
    method: POST
- name: retrieve_printers_get
  endpoint:
    path: /dev/reference/retrieve_printers_get
    method: GET
- name: print_text_on_device
  endpoint:
    path: /dev/reference/print_text_on_device
    method: POST
- name: print_image_on_device
  endpoint:
    path: /dev/reference/print_image_on_device
    method: POST
- name: get_print_job_status
  endpoint:
    path: /dev/reference/get_print_job_status
    method: GET
- name: ping_device
  endpoint:
    path: /dev/reference/ping_device
    method: POST
- name: ping_device_get
  endpoint:
    path: /dev/reference/ping_device_get
    method: GET
- name: display_order
  endpoint:
    path: /dev/reference/display_order
    method: POST
- name: display_message
  endpoint:
    path: /dev/reference/display_message
    method: POST
- name: get_merchant_devices
  endpoint:
    path: /dev/reference/get_devices
    method: GET
- name: retrieve_cash_drawers
  endpoint:
    path: /dev/reference/retrieve_cash_drawers
    method: GET
- name: open_attached_cash_drawer
  endpoint:
    path: /dev/reference/open_attached_cash_drawer
    method: POST
- name: cancel_in_flight_operations
  endpoint:
    path: /dev/reference/cancel-1
    method: POST
- name: deliver_refund_receipt
  endpoint:
    path: /dev/reference/deliver_refund_receipt
    method: POST
- name: deliver_void_receipt
  endpoint:
    path: /dev/reference/deliver_void_receipt
    method: POST
- name: deliver_payment_receipt
  endpoint:
    path: /dev/reference/deliver_payment_receipt
    method: POST
- name: receipt_options
  endpoint:
    path: /dev/reference/receipt_options
    method: POST
- name: deliver_credit_receipt
  endpoint:
    path: /dev/reference/deliver_credit_receipt
    method: POST
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: items
- name: customers
  endpoint:
    path: /v3/customers
    method: GET
    data_selector: items
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: merchant
  endpoint:
    path: /v3/merchants/{mId}
    method: GET
    data_selector: merchant
    params: {}
- name: employee
  endpoint:
    path: /v3/merchants/{mId}/employees/{employeeId}
    method: GET
    data_selector: employee
    params:
      expand: roles
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: payments
  endpoint:
    path: /dev/reference/pay
    method: GET
- name: card
  endpoint:
    path: /dev/reference/read_card
    method: POST
- name: credits
  endpoint:
    path: /dev/reference/credit
    method: GET
- name: device
  endpoint:
    path: /dev/reference/cancel-1
    method: POST
- name: receipts
  endpoint:
    path: /dev/reference/deliver_credit_receipt
    method: POST
- name: charges
  endpoint:
    path: /dev/reference/getcharges
    method: GET
- name: customers
  endpoint:
    path: /dev/reference/customers
    method: GET
- name: orders
  endpoint:
    path: /dev/reference/orders
    method: GET
- name: merchants
  endpoint:
    path: /dev/reference/merchantgetmerchant
    method: GET
- name: cash_events
  endpoint:
    path: /dev/reference/cashgetallcashevents
    method: GET
- name: customers
  endpoint:
    path: /dev/reference/customersgetcustomers
    method: GET
- name: employees
  endpoint:
    path: /dev/reference/employeegetemployees
    method: GET
- name: inventory
  endpoint:
    path: /dev/reference/inventorygetitems
    method: GET
- name: orders
  endpoint:
    path: /dev/reference/ordergetorders
    method: GET
- name: payments
  endpoint:
    path: /dev/reference/paygetorderpayments
    method: GET
- name: apps
  endpoint:
    path: /dev/reference/appsgetmerchantbillinginfo-3
    method: GET
- name: service_charge_for_merchant
  endpoint:
    path: /reference/inventorygetorderfee-2
    method: GET
    data_selector: null
    params: {}
- name: all_service_charges_for_merchant
  endpoint:
    path: /reference/inventorygetorderfees-2
    method: GET
    data_selector: null
    params: {}
- name: list_of_orders
  endpoint:
    path: /reference/ordergetorders-3
    method: GET
    data_selector: null
    params: {}
- name: create_custom_orders
  endpoint:
    path: /reference/ordercreateorder-3
    method: POST
    data_selector: null
    params: {}
- name: single_order
  endpoint:
    path: /reference/ordergetorder-3
    method: GET
    data_selector: null
    params: {}
- name: update_order
  endpoint:
    path: /reference/orderupdateorder-3
    method: POST
    data_selector: null
    params: {}
- name: delete_order
  endpoint:
    path: /reference/orderdeleteorder-3
    method: DELETE
    data_selector: null
    params: {}
- name: line_items_for_order
  endpoint:
    path: /reference/ordergetorderlineitems-3
    method: GET
    data_selector: null
    params: {}
- name: create_line_item
  endpoint:
    path: /reference/ordercreatelineitem-3
    method: POST
    data_selector: null
    params: {}
- name: delete_line_items_in_order
  endpoint:
    path: /reference/orderdeletelineitems-3
    method: DELETE
    data_selector: null
    params: {}
- name: single_line_item
  endpoint:
    path: /reference/ordergetorderlineitem-3
    method: GET
    data_selector: null
    params: {}
- name: update_line_item
  endpoint:
    path: /reference/orderupdateorderlineitem-3
    method: POST
    data_selector: null
    params: {}
- name: void_line_item
  endpoint:
    path: /reference/orderdeleteorderlineitem-3
    method: DELETE
    data_selector: null
    params: {}
- name: create_discount_on_line_item
  endpoint:
    path: /reference/ordercreatelineitemdiscount-3
    method: POST
    data_selector: null
    params: {}
- name: create_multiple_line_items
  endpoint:
    path: /reference/orderbulkcreatelineitems-3
    method: POST
    data_selector: null
    params: {}
- name: service_charges_applied_to_order
  endpoint:
    path: /reference/ordergetorderfeelineitems-2
    method: GET
    data_selector: null
    params: {}
- name: create_service_charge_on_order
  endpoint:
    path: /reference/ordercreateorderfeelineitem-2
    method: POST
    data_selector: null
    params: {}
- name: specific_service_charge_applied_to_order
  endpoint:
    path: /reference/ordergetorderfeelineitem-2
    method: GET
    data_selector: null
    params: {}
- name: void_service_charge_from_order
  endpoint:
    path: /reference/orderdeleteorderfeelineitem-2
    method: DELETE
    data_selector: null
    params: {}
- name: gift_card
  endpoint:
    path: /dev/reference/create-gift-card-token
    method: POST
    data_selector: records
- name: apple_pay_token
  endpoint:
    path: /dev/reference/create-apple-pay-token
    method: POST
    data_selector: records
- name: transaction
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: customers
  endpoint:
    path: /v1/customers
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: payment
  endpoint:
    path: /v1/payments
    method: GET
    data_selector: records
    params: {}
- name: merchant
  endpoint:
    path: /v3/merchants
    method: GET
    data_selector: elements
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: merchants
  endpoint:
    path: /merchants
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
    params: {}
- name: merchant
  endpoint:
    path: /v3/merchants
    method: GET
    data_selector: items
- name: merchant
  endpoint:
    path: /v1/merchants
    method: GET
    data_selector: merchants
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: merchant
  endpoint:
    path: /v3/merchants
    method: GET
    data_selector: items
- name: merchants
  endpoint:
    path: /merchants
    method: GET
    data_selector: merchants
- name: employees
  endpoint:
    path: /employees
    method: GET
    data_selector: employees
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
- name: inventory
  endpoint:
    path: /inventory
    method: GET
    data_selector: inventory
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
- name: payment
  endpoint:
    path: /v1/payments
    method: GET
    data_selector: payments
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: payments
  endpoint:
    path: /v3/merchants/{merchantId}/payments
    method: GET
    data_selector: payments
- name: orders
  endpoint:
    path: /v3/merchants/{merchantId}/orders
    method: GET
    data_selector: orders
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
- name: merchant
  endpoint:
    path: /v3/merchants/{merchantId}
    method: GET
    data_selector: merchant
    params: {}
- name: orders
  endpoint:
    path: /v3/merchants/{merchantId}/orders
    method: GET
    data_selector: orders
    params: {}
- name: device
  endpoint:
    path: /v1/devices
    method: GET
    data_selector: devices
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: Clover Mini 3
  endpoint:
    path: /clover/mini/3/specifications
    method: GET
    data_selector: specifications
- name: Clover Mini 2
  endpoint:
    path: /clover/mini/2/specifications
    method: GET
    data_selector: specifications
- name: transaction
  endpoint:
    path: /api/v1/transaction
    method: POST
    data_selector: transactionData
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
- name: orders
  endpoint:
    path: /v3/orders
    method: GET
    data_selector: orders
- name: Clover Mini 1
  endpoint:
    path: /mini
    method: GET
    data_selector: specifications
    params: {}
- name: Clover Flex 4
  endpoint:
    path: /flex-4
    method: GET
    data_selector: specifications
    params: {}
- name: Clover Flex Pocket
  endpoint:
    path: /flex-pocket
    method: GET
    data_selector: specifications
    params: {}
- name: Clover Flex 3
  endpoint:
    path: /flex-3
    method: GET
    data_selector: specifications
    params: {}
- name: Clover Flex 2
  endpoint:
    path: /flex-2
    method: GET
    data_selector: specifications
    params: {}
- name: Clover Flex
  endpoint:
    path: /flex
    method: GET
    data_selector: specifications
    params: {}
- name: Clover Mobile
  endpoint:
    path: /mobile
    method: GET
    data_selector: specifications
    params: {}
- name: Clover Go
  endpoint:
    path: /go
    method: GET
    data_selector: specifications
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: device_diagnostics
  endpoint:
    path: /v1/devices/diagnostics
    method: GET
    data_selector: records
    params: {}
- name: merchant
  endpoint:
    path: /v3/merchants
    method: GET
    data_selector: merchants
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: charges
  endpoint:
    path: /v3/charges
    method: GET
    data_selector: records
    params: {}
- name: customers
  endpoint:
    path: /v3/customers
    method: GET
    data_selector: records
    params: {}
- name: payment
  endpoint:
    path: /v1/payments
    method: GET
    data_selector: records
- name: transaction_methods
  endpoint:
    path: /transaction/methods
    method: GET
    data_selector: methods
- name: merchant_configurations
  endpoint:
    path: /merchants/configurations
    method: GET
    data_selector: configurations
- name: sdk_requirements
  endpoint:
    path: /sdk/requirements
    method: GET
    data_selector: requirements
- name: payment_integrations
  endpoint:
    path: /payments/integrations
    method: GET
    data_selector: integrations
- name: merchant_plans
  endpoint:
    path: /merchants/plans
    method: GET
    data_selector: plans
- name: app_billing
  endpoint:
    path: /merchants/app_billing
    method: GET
    data_selector: billing
- name: merchants
  endpoint:
    path: /v1/merchants
    method: GET
    data_selector: records
- name: merchant
  endpoint:
    path: /merchants
    method: GET
    data_selector: merchants
    params: {}
- name: merchant
  endpoint:
    path: /v1/merchant
    method: GET
    data_selector: records
- name: merchant_configurations
  endpoint:
    path: /merchants/configurations
    method: GET
    data_selector: data
    params: {}
- name: payment_integrations
  endpoint:
    path: /payment/integrations
    method: GET
    data_selector: data
    params: {}
- name: merchant_plans
  endpoint:
    path: /merchants/plans
    method: GET
    data_selector: data
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: merchant
  endpoint:
    path: /merchants
    method: GET
    data_selector: records
    params: {}
- name: merchant_configurations
  endpoint:
    path: /merchants
    method: GET
    data_selector: merchants
- name: merchant
  endpoint:
    path: /v1/merchants
    method: GET
    data_selector: merchants
    params: {}
- name: merchant_configurations
  endpoint:
    path: /merchant/configurations
    method: GET
    data_selector: data
    params: {}
- name: payment_integrations
  endpoint:
    path: /payment/integrations
    method: GET
    data_selector: data
    params: {}
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: SaleRequest
  endpoint:
    path: /services/saleRequest
    method: POST
    data_selector: saleRequestData
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: payment
  endpoint:
    path: /v1/payments
    method: GET
    data_selector: payments
    params:
      incremental: updatedAt
- name: merchant
  endpoint:
    path: /v1/merchants
    method: GET
    data_selector: merchants
    params: {}
- name: regional_extras
  endpoint:
    path: /regionalExtras
    method: POST
    data_selector: regionalExtras
    params: {}
- name: SaleRequest
  endpoint:
    path: /services/v1.0/sale
    method: POST
    data_selector: saleResponse
    params: {}
- name: transaction
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transactions
    params:
      incremental: updated_at
- name: payment
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: payment
    params: {}
- name: transaction
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: transaction
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: merchant
  endpoint:
    path: /merchants
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
- name: inventory
  endpoint:
    path: /services/data/vXX.X/inventory
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: orders
  endpoint:
    path: /services/data/vXX.X/orders
    method: GET
    data_selector: records
    params: {}
- name: merchant
  endpoint:
    path: /v3/merchants
    method: GET
    data_selector: merchants
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: merchant
  endpoint:
    path: /v1/merchants
    method: GET
    data_selector: merchants
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: merchant
  endpoint:
    path: /merchants
    method: GET
    data_selector: records
    params: {}
- name: APK
  endpoint:
    path: /api/apk
    method: GET
    data_selector: records
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: payment
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
- name: merchant
  endpoint:
    path: /v3/merchants
    method: GET
    data_selector: data
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
- name: test_merchants
  endpoint:
    path: /test_merchants
    method: GET
    data_selector: merchants
    params: {}
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
- name: transaction
  endpoint:
    path: /services/data/v1.0/transactions
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: customer
  endpoint:
    path: /services/data/v1.0/customers
    method: GET
    data_selector: records
    params: {}
- name: transaction
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
- name: merchant
  endpoint:
    path: /v3/merchants
    method: GET
    data_selector: merchants
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: merchant
  endpoint:
    path: /v3/merchants
    method: GET
    data_selector: merchants
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: records
    params: {}
- name: functional_review
  endpoint:
    path: /dev/docs/clover-functional-review-playbook
    method: GET
    data_selector: records
    params: {}
- name: merchant
  endpoint:
    path: /v3/merchants
    method: GET
    data_selector: items
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: transaction
  endpoint:
    path: /services/data/v1/transactions
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: merchants
  endpoint:
    path: /v3/merchants
    method: GET
    data_selector: merchant
    params:
      permission: Merchant Read
- name: merchant
  endpoint:
    path: /v1/merchants
    method: GET
    data_selector: merchants
    params: {}
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: developer_account
  endpoint:
    path: /dev/docs/submit-global-developer-account-for-approval
    method: POST
- name: app_submission
  endpoint:
    path: /dev/docs/submit-app-for-approval
    method: POST
- name: app_pricing
  endpoint:
    path: /dev/docs/billing-information-approval
    method: POST
- name: merchant
  endpoint:
    path: /v1/merchants
    method: GET
    data_selector: records
    params: {}
- name: merchant_plans
  endpoint:
    path: /services/data/vXX.X/sobjects/MerchantPlans
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: merchant
  endpoint:
    path: /v1/merchants
    method: GET
    data_selector: records
- name: app_revision
  endpoint:
    path: /v1/apps/revisions
    method: POST
    data_selector: revision
    params:
      incremental: updated_at
- name: billing_status
  endpoint:
    path: /billing/status
    method: GET
    data_selector: status
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transactions
- name: payments
  endpoint:
    path: /v1/payments
    method: GET
    data_selector: payments
- name: merchant
  endpoint:
    path: /v3/merchants
    method: GET
    data_selector: merchants
- name: service_charge
  endpoint:
    path: /v3/merchants/{mId}/default_service_charge
    method: GET
- name: payments
  endpoint:
    path: /v3/payments
    method: GET
- name: charges
  endpoint:
    path: /v3/charges
    method: GET
    data_selector: data
    params: {}
- name: fees
  endpoint:
    path: /v3/fees
    method: GET
    data_selector: data
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: Revenue by App
  endpoint:
    path: /billing/statements
    method: GET
    data_selector: revenue
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: records
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
- name: customers
  endpoint:
    path: /v3/customers
    method: GET
    data_selector: customers
- name: app_installs
  endpoint:
    path: /services/data/vXX.X/sobjects/AppInstall
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: transaction
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transactions
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /v3/customers
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: customers
  endpoint:
    path: /v1/customers
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: transaction
  endpoint:
    path: /services/data/vXX.X/sobjects/Transaction
    method: GET
    data_selector: records
    params: {}
- name: merchant
  endpoint:
    path: /services/data/vXX.X/sobjects/Merchant
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: payments
  endpoint:
    path: /dev/docs/get-all-payments
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: items
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: orders
    params: {}
- name: OAuth Tokens
  endpoint:
    path: /oauth/v2/token
    method: POST
    data_selector: ''
    params: {}
- name: oauth_token
  endpoint:
    path: /oauth/v2/token
    method: POST
    data_selector: access_token
    params: {}
- name: refresh_token
  endpoint:
    path: /oauth/v2/refresh
    method: POST
    data_selector: access_token
    params: {}
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
- name: payments
  endpoint:
    path: /v1/payments
    method: GET
    data_selector: records
- name: oauth_token_migration
  endpoint:
    path: /oauth/token/migrate_v2
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: merchant
  endpoint:
    path: /v3/merchants
    method: GET
    data_selector: merchants
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Hosted Checkout
  endpoint:
    path: /dev/docs/hosted-checkout-api
    method: GET
- name: Clover iframe
  endpoint:
    path: /dev/docs/clover-iframe-integrations
    method: GET
- name: Ecommerce API integration
  endpoint:
    path: /dev/docs/ecommerce-api-payments-flow
    method: GET
- name: Ecommerce plugins
  endpoint:
    path: /dev/docs/clover-payment-plugins
    method: GET
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: payment
  endpoint:
    path: /v2/payments
    method: GET
    data_selector: payments
    params: {}
- name: transaction
  endpoint:
    path: /v2/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: card_token
  endpoint:
    path: /v1/tokens
    method: POST
    data_selector: token
- name: charge
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: charge
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: payment
    params: {}
- name: charges
  endpoint:
    path: /v1/charges
    method: GET
    data_selector: charges
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: charges
  endpoint:
    path: /v1/charges
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /v1/customers
    method: GET
    data_selector: records
- name: charges
  endpoint:
    path: /charges
    method: POST
    data_selector: charges
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: customers
    params: {}
- name: refunds
  endpoint:
    path: /refunds
    method: POST
    data_selector: refunds
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: charges
  endpoint:
    path: /v3/charges
    method: GET
    data_selector: charges
- name: payments
  endpoint:
    path: /v3/payments
    method: GET
    data_selector: payments
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: public_api_key
  endpoint:
    path: /pakms/apikey
    method: GET
    data_selector: apikey
    params: {}
- name: tokens
  endpoint:
    path: /v1/tokens
    method: POST
    data_selector: token
    params: {}
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: charge
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
    params: {}
- name: refunds
  endpoint:
    path: /v1/refunds
    method: GET
    data_selector: refunds
    params: {}
- name: plans
  endpoint:
    path: /v1/plans
    method: POST
    data_selector: plan
    params: {}
- name: Get a public Ecommerce API key
  endpoint:
    path: /pakms/apikey
    method: GET
    data_selector: null
    params:
      required_permission: Online payments
- name: Create a token
  endpoint:
    path: /v1/tokens
    method: POST
    data_selector: null
    params:
      required_permissions: None. You need an Ecommerce API key.
- name: Create a charge
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: null
    params:
      required_permission: Online payments
- name: Capture an open charge
  endpoint:
    path: /v1/charges/{chargeId}/capture
    method: POST
    data_selector: null
    params:
      required_permissions: Read payments  Write payments  Online payments
- name: Get charges
  endpoint:
    path: /v1/charges
    method: GET
    data_selector: null
    params:
      required_permission: Read payments
- name: Get a single charge
  endpoint:
    path: /v1/charges/{chargeId}
    method: GET
    data_selector: null
    params:
      required_permission: Read payments
- name: Create a card-on-file (COF) customer
  endpoint:
    path: /v1/customers
    method: POST
    data_selector: null
    params:
      required_permissions: Read customers  Write customers  Online payments
- name: Add a card to an existing customer
  endpoint:
    path: /v1/customers
    method: PUT
    data_selector: null
    params:
      required_permissions: Read customers  Write customers  Online payments
- name: Remove a card from an existing customer
  endpoint:
    path: /v1/customers
    method: DELETE
    data_selector: null
    params:
      required_permissions: Read customers  Write customers  Online payments
- name: Create an order
  endpoint:
    path: /v1/orders
    method: POST
    data_selector: null
    params:
      required_permissions: Read merchant  Read orders  Write orders
- name: Get orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: null
    params:
      required_permissions: Read orders  Read payments
- name: Get an order
  endpoint:
    path: /v1/orders/{orderId}
    method: GET
    data_selector: null
    params:
      required_permissions: Read customers  Read merchant  Read orders  Read payments
- name: Pay for an order
  endpoint:
    path: /v1/orders/{orderId}/pay
    method: POST
    data_selector: null
    params:
      required_permissions: Read customers  Read inventory  Read merchant  Read orders  Read
        payments  Online payments
- name: Return an order
  endpoint:
    path: /v1/orders/{orderId}/returns
    method: POST
    data_selector: null
    params:
      required_permissions: Read customers  Read merchant  Read orders  Read payments  Online
        payments
- name: Get refunds
  endpoint:
    path: /v1/refunds
    method: GET
    data_selector: null
    params:
      required_permission: Read payments
- name: Get a refund
  endpoint:
    path: /v1/refunds/{refundId}
    method: GET
    data_selector: null
    params:
      required_permission: Read payments
- name: Refund a charge
  endpoint:
    path: /v1/refunds
    method: POST
    data_selector: null
    params:
      required_permissions: Read customers  Read merchant  Read orders  Read payments  Online
        payments
- name: Create plan
  endpoint:
    path: /v1/plans
    method: POST
    data_selector: null
    params:
      required_permissions: Read merchant  Write merchant
- name: Get a plan
  endpoint:
    path: /v1/plans/{planId}
    method: GET
    data_selector: null
    params:
      required_permission: Read merchant
- name: Edit a plan
  endpoint:
    path: /v1/plans/{planId}
    method: PUT
    data_selector: null
    params:
      required_permissions: Read merchant  Write merchant
- name: Deactivate a plan
  endpoint:
    path: /v1/plans/{planId}
    method: PUT
    data_selector: null
    params:
      required_permissions: Read merchant  Write merchant
- name: Create a subscription
  endpoint:
    path: /v1/plans/{planId}/subscriptions
    method: POST
    data_selector: null
    params:
      required_permissions: Read customers  Write customers
- name: Get a subscription
  endpoint:
    path: /v1/subscriptions/{subscriptionId}
    method: GET
    data_selector: null
    params:
      required_permissions: Read merchant  Read customers
- name: Edit a subscription
  endpoint:
    path: /v1/subscriptions/{subscriptionId}
    method: PUT
    data_selector: null
    params:
      required_permissions: Read customers  Write customers
- name: Cancel a subscription
  endpoint:
    path: /v1/subscriptions/{subscriptionId}
    method: PUT
    data_selector: null
    params:
      required_permissions: Read customers  Write customers  Read merchants
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
    params: {}
- name: merchant
  endpoint:
    path: /v3/merchants/{mId}
    method: GET
    data_selector: merchant
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: oauth
  endpoint:
    path: /oauth/v2/refresh
    method: POST
- name: inventory
  endpoint:
    path: /api/inventory
    method: GET
    data_selector: items
- name: orders
  endpoint:
    path: /api/orders
    method: GET
    data_selector: orders
- name: token
  endpoint:
    path: /oauth/v2/refresh
    method: POST
    data_selector: access_token
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: apiAccessKey
  endpoint:
    path: /pakms/apikey
    method: GET
    data_selector: apiAccessKey
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: create_card_token
  endpoint:
    path: /v1/tokens
    method: POST
    data_selector: token
    params: {}
- name: create_card_token
  endpoint:
    path: /create-a-card-token
    method: POST
    data_selector: token
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: tokens
  endpoint:
    path: /v1/tokens
    method: POST
    data_selector: token
    params: {}
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: charge
    params: {}
- name: orders_pay
  endpoint:
    path: /v1/orders/{orderId}/pay
    method: POST
    data_selector: order
    params: {}
- name: create_multi_pay_token
  endpoint:
    path: /v1/tokens
    method: POST
    data_selector: external_token
    params: {}
- name: create_charge
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: charge
    params: {}
- name: pay_for_order
  endpoint:
    path: /v1/orders/{orderId}/pay
    method: POST
    data_selector: order_payment
    params: {}
- name: customers
  endpoint:
    path: /v1/customers
    method: POST
    data_selector: customer
    params: {}
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: charge
    params: {}
- name: save_card
  endpoint:
    path: /v1/transactions/save_card
    method: POST
    data_selector: transaction
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: create_charge
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: charge
    params: {}
- name: charges
  endpoint:
    path: /v2/charges
    method: POST
    data_selector: charge
    params: {}
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: id
- name: charges
  endpoint:
    path: /v1/charges
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: transaction
    params: {}
- name: token
  endpoint:
    path: /V1/token
    method: POST
    data_selector: token
    params: {}
- name: pre_authorization
  endpoint:
    path: /v1/transactions/preauthorize
    method: POST
    data_selector: transaction
    params: {}
- name: get_a_charge
  endpoint:
    path: /dev/reference/getchargescharge
    method: GET
- name: get_charges
  endpoint:
    path: /dev/reference/getcharges
    method: GET
- name: charges
  endpoint:
    path: /v1/charges
    method: GET
    data_selector: charges
- name: charges
  endpoint:
    path: /v2/charges
    method: GET
    data_selector: charges
- name: charge
  endpoint:
    path: /v1/charges/{chargeId}
    method: GET
    data_selector: data
    params: {}
- name: charges
  endpoint:
    path: /v1/charges
    method: GET
    data_selector: data
    params: {}
- name: charges
  endpoint:
    path: /v2/charges
    method: GET
    data_selector: charges
    params: {}
- name: capture_charge
  endpoint:
    path: /v1/charges/chargeId/capture
    method: POST
    data_selector: charge
    params: {}
- name: charges
  endpoint:
    path: /v3/charges
    method: POST
    data_selector: records
    params: {}
- name: capture_charge
  endpoint:
    path: /v1/charges/{{charge_id}}/capture
    method: POST
    data_selector: ''
    params: {}
- name: cancel_balance
  endpoint:
    path: /v1/charges/{{charge_id}}
    method: PUT
    data_selector: ''
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: id
- name: orders
  endpoint:
    path: /v1/orders
    method: POST
    data_selector: id
- name: pay_for_order
  endpoint:
    path: /v1/orders/{orderId}/pay
    method: POST
    data_selector: id
- name: payments
  endpoint:
    path: /v3/merchants/{merchantId}/payments
    method: GET
    data_selector: payments
- name: charges
  endpoint:
    path: /v3/merchants/{merchantId}/charges
    method: GET
    data_selector: charges
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: ''
    params: {}
- name: pay_for_order
  endpoint:
    path: /v1/orders/{orderId}/pay
    method: POST
    data_selector: ''
    params: {}
- name: get_merchant
  endpoint:
    path: /v3/merchants/mId
    method: GET
    data_selector: ''
    params:
      expand: tenders
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
- name: refund_without_order_items
  endpoint:
    path: /v1/orders/{orderId}/returns
    method: POST
    data_selector: status
    params: {}
- name: refund_for_returned_items
  endpoint:
    path: /v1/orders/{orderId}/returns
    method: POST
    data_selector: status
    params: {}
- name: void_transaction
  endpoint:
    path: /V2/merchant/{mId}/ecom/void
    method: POST
    data_selector: status
    params: {}
- name: refund_charge
  endpoint:
    path: /v1/refunds
    method: POST
    data_selector: status
    params: {}
- name: plans
  endpoint:
    path: /recurring/v1/plans
    method: POST
- name: subscriptions
  endpoint:
    path: /recurring/v1/plans/{planId}/subscriptions
    method: POST
- name: plans
  endpoint:
    path: /recurring/v1/plans/{planId}
    method: DELETE
- name: plans
  endpoint:
    path: /recurring/v1/plans
    method: POST
    data_selector: plans
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/subscriptions
    method: GET
    data_selector: subscriptions
    params: {}
- name: subscriptions
  endpoint:
    path: /recurring/v1/subscriptions
    method: GET
    data_selector: subscriptions
    params: {}
- name: create_subscription
  endpoint:
    path: /recurring/v1/plans/{planId}/subscriptions
    method: POST
    data_selector: subscription
    params: {}
- name: retrieve_subscription
  endpoint:
    path: /recurring/v1/subscriptions/{subscriptionId}
    method: GET
    data_selector: subscription
    params: {}
- name: retrieve_subscriptions_under_plan
  endpoint:
    path: /recurring/v1/plans/{planId}/subscriptions
    method: GET
    data_selector: subscriptions
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: subscriptions
  endpoint:
    path: /recurring/v1/plans/{planId}/subscriptions
    method: GET
    data_selector: records
    params: {}
- name: subscription
  endpoint:
    path: /recurring/v1/subscriptions/{subscriptionId}
    method: PUT
    data_selector: subscription
    params: {}
- name: subscriptions
  endpoint:
    path: /recurring/v1/subscriptions
    method: GET
    data_selector: subscriptions
- name: create_subscription
  endpoint:
    path: /recurring/v1/plans/{planId}/subscriptions
    method: POST
    data_selector: subscription
- name: retrieve_subscription
  endpoint:
    path: /recurring/v1/subscriptions/{subscriptionId}
    method: GET
    data_selector: subscription
- name: subscriptions_under_plan
  endpoint:
    path: /recurring/v1/plans/{planId}/subscriptions
    method: GET
    data_selector: subscriptions
- name: subscription
  endpoint:
    path: /recurring/v1/subscriptions/{subscriptionId}
    method: PUT
    data_selector: subscription
    params: {}
- name: delete_subscription
  endpoint:
    path: /recurring/v1/subscriptions/{subscriptionId}
    method: DELETE
    data_selector: subscription
    params: {}
- name: create_gift_card_token
  endpoint:
    path: /dev/docs/create-a-gift-card-token
    method: POST
- name: activate_gift_card
  endpoint:
    path: /dev/docs/ecomm-activate-a-gift-card
    method: POST
- name: redeem_gift_card
  endpoint:
    path: /dev/docs/ecomm-redeem-gift-card
    method: POST
- name: check_and_use_gift_card_balance
  endpoint:
    path: /dev/docs/ecomm-check-and-use-gift-card-balance
    method: GET
- name: reload_active_gift_card
  endpoint:
    path: /dev/docs/ecomm-reload-an-active-gift-card
    method: POST
- name: void_and_refund_gift_card
  endpoint:
    path: /dev/docs/ecomm-void-and-refund-for-a-gift-card
    method: POST
- name: activate_gift_card
  endpoint:
    path: /dev/reference/activation
    method: POST
- name: redeem_gift_card
  endpoint:
    path: /dev/reference/createcharge
    method: POST
- name: check_balance
  endpoint:
    path: /dev/reference/balanceinquiry
    method: GET
- name: reload_gift_card
  endpoint:
    path: /dev/reference/reload
    method: POST
- name: cashout_gift_card
  endpoint:
    path: /dev/reference/cashout
    method: POST
- name: refund_or_void_gift_card
  endpoint:
    path: /dev/reference/createrefund
    method: POST
- name: gift_card_token
  endpoint:
    path: /dev/docs/create-a-gift-card-token
    method: POST
- name: gift_card_token
  endpoint:
    path: /v1/tokens
    method: POST
    data_selector: id
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: gift_card
  endpoint:
    path: /ecomm/activate-a-gift-card
    method: POST
- name: activate_virtual_gift_card
  endpoint:
    path: /v1/activate
    method: POST
    data_selector: id
- name: activate_physical_gift_card
  endpoint:
    path: /v1/activate
    method: POST
    data_selector: id
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: redeem_gift_card
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: records
    params: {}
- name: gift_card_balance
  endpoint:
    path: /ecomm/check-and-use-gift-card-balance
    method: GET
- name: balance_inquiry
  endpoint:
    path: /v1/balance_inquiry
    method: POST
    data_selector: gift_card
    params:
      source: required
      currency: optional
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: gift_card
    params:
      source: required
      amount: required
      currency: required
      capture: required
      partial_redemption: required
- name: cashout
  endpoint:
    path: /v1/cashout
    method: POST
    data_selector: gift_card
    params:
      source: required
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
    params: {}
- name: gift_card
  endpoint:
    path: /dev/ecomm/reload-an-active-gift-card
    method: POST
- name: reload_gift_card
  endpoint:
    path: /v1/reload
    method: POST
    data_selector: id
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: refund
  endpoint:
    path: /v1/refunds
    method: POST
    data_selector: null
    params: {}
- name: void_refund
  endpoint:
    path: /v1/refunds/{{refundId}}/cancel
    method: POST
    data_selector: null
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: fraud_checks
  endpoint:
    path: /v1/fraud_checks
    method: POST
    data_selector: source
    params: {}
- name: inventory
  endpoint:
    path: /api/v1/inventory
    method: GET
    data_selector: items
    params: {}
- name: orders
  endpoint:
    path: /api/v1/orders
    method: GET
    data_selector: orders
    params: {}
- name: purchasing_cards
  endpoint:
    path: /v1/purchasing_cards
    method: GET
    data_selector: records
- name: check_merchant_setup
  endpoint:
    path: /v3/merchants/ecomm_payment_configs
    method: GET
    data_selector: purchase_card.supported
- name: create_charge
  endpoint:
    path: /v3/charges
    method: POST
    data_selector: charge
    params: {}
- name: get_payment
  endpoint:
    path: /v3/merchants/{mId}/payments/{paymentId}
    method: GET
    data_selector: purchaseCardL2
    params:
      expand: purchaseCardL2
- name: create_charge
  endpoint:
    path: /dev/reference/createcharge
    method: GET
    data_selector: records
    params: {}
- name: transaction
  endpoint:
    path: /services/data/vXX.X/sobjects/Transaction
    method: GET
    data_selector: records
- name: create_charge
  endpoint:
    path: /dev/reference/createcharge
    method: POST
- name: capture_charge
  endpoint:
    path: /dev/reference/capturecharge
    method: POST
- name: transaction
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transactions
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: payments
  endpoint:
    path: /dev/docs/get-all-payments
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: data
    params: {}
- name: charges
  endpoint:
    path: /v1/charges
    method: GET
    data_selector: data
    params: {}
- name: merchant_payment_configs
  endpoint:
    path: /v3/merchants/{mId}/ecomm_payment_configs
    method: GET
    data_selector: softDescriptors
    params: {}
- name: create_charge
  endpoint:
    path: /dev/reference/createcharge
    method: POST
    data_selector: soft_descriptor
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: customers
  endpoint:
    path: /v3/customers
    method: GET
    data_selector: customers
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: units_of_measurement
  endpoint:
    path: /v2/units
    method: GET
    data_selector: units
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: checkout_session
  endpoint:
    path: /v1/checkout
    method: POST
    data_selector: checkout
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: checkout
  endpoint:
    path: /invoicingcheckoutservice/v1/checkouts
    method: POST
    data_selector: href
- name: Hosted Checkout
  endpoint:
    path: /v1/checkout
    method: POST
    data_selector: checkout
    params: {}
- name: hosted_checkout
  endpoint:
    path: /v1/checkout
    method: POST
    data_selector: checkoutSession
    params: {}
- name: hosted_checkout
  endpoint:
    path: /v1/hosted-checkout
    method: POST
    data_selector: data
    params: {}
- name: checkout
  endpoint:
    path: /invoicingcheckoutservice/v1/checkouts
    method: POST
- name: customers
  endpoint:
    path: /v3/customers
    method: GET
    data_selector: customers
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: checkout
  endpoint:
    path: /invoicingcheckoutservice/v1/checkouts
    method: POST
    data_selector: href
- name: orders
  endpoint:
    path: /v3/orders
    method: GET
    data_selector: orders
- name: inventory
  endpoint:
    path: /v3/inventory
    method: GET
    data_selector: items
- name: checkouts
  endpoint:
    path: /invoicingcheckoutservice/v1/checkouts
    method: POST
    data_selector: response
    params: {}
- name: payment
  endpoint:
    path: /v3/merchants/{merchantId}/payments
    method: GET
    data_selector: payments
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
- name: apikey
  endpoint:
    path: /PAKMS/apikey
    method: GET
- name: payment
  endpoint:
    path: /v3/charges
    method: POST
    data_selector: payment
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: source
    params: {}
- name: tokens
  endpoint:
    path: /v1/tokens
    method: POST
    data_selector: token
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: apple_pay
  endpoint:
    path: /dev/docs/clover-iframe-features-apple-pay
    method: POST
    data_selector: data
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: payment_form
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: transactions
    params: {}
- name: payment
  endpoint:
    path: /services/data/vXX.X/sobjects/Payment
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: transaction
  endpoint:
    path: /services/data/vXX.X/sobjects/Transaction
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: records
- name: ach_elements
  endpoint:
    path: /services/data/vXX.X/sobjects/AchElements
    method: GET
    data_selector: records
    params: {}
- name: Hosted Checkout
  endpoint:
    path: /dev/docs/hosted-checkout-api
    method: GET
- name: Iframe
  endpoint:
    path: /dev/docs/iframe-customize-ach-elements-with-css
    method: GET
- name: Create ACH Token
  endpoint:
    path: /dev/docs/create-an-ach-token
    method: GET
- name: Accept Checks by Telephone
  endpoint:
    path: /dev/docs/accepting-checks-by-telephone
    method: GET
- name: Internet Check Acceptance
  endpoint:
    path: /dev/docs/internet-check-acceptance
    method: GET
- name: create_ach_token
  endpoint:
    path: /v1/tokens
    method: POST
    data_selector: ach
    params: {}
- name: ach_products
  endpoint:
    path: /ecom_config
    method: GET
    data_selector: ach_products
- name: telecheck
  endpoint:
    path: /accepting-checks-by-telephone
    method: GET
    data_selector: records
    params: {}
- name: internet_check_acceptance
  endpoint:
    path: /services/data/vXX.X/sobjects/InternetCheckAcceptance
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
- name: sales_decline_disclosure_templates
  endpoint:
    path: /sales-decline-disclosure-templates
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
    params: {}
- name: state_abbreviations
  endpoint:
    path: /dev/docs/state-abbreviation-for-telecheck
    method: GET
    data_selector: records
    params: {}
- name: apple_pay_payment_token
  endpoint:
    path: /applepay/token
    method: POST
    data_selector: token
    params: {}
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
- name: apple_pay_verification
  endpoint:
    path: /.well-known/apple-developer-merchantid-domain-association
    method: GET
    data_selector: ''
    params: {}
- name: apple_pay_payment_token
  endpoint:
    path: /v1/tokens
    method: POST
    data_selector: id
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: 3DS
  endpoint:
    path: /v1/3ds
    method: POST
    data_selector: data
    params: {}
- name: 3D Secure
  endpoint:
    path: /services/data/v1/3dsecure
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: create_charge
  endpoint:
    path: /dev/docs/initiate-3ds-sdk-with-create-a-charge-endpoint
    method: POST
- name: pay_for_order
  endpoint:
    path: /dev/docs/initiate-3ds-sdk-with-pay-for-order-endpoint
    method: POST
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: create_charge
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: charge
    params: {}
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: threeds
    params: {}
- name: finalize_payment
  endpoint:
    path: /v1/charges/finalize_payment
    method: POST
    data_selector: threeds
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: pay_order
  endpoint:
    path: /v1/orders/{orderId}/pay
    method: POST
- name: finalize_payment
  endpoint:
    path: /v1/charges/finalize_payment
    method: POST
- name: create_charge
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: ''
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: pay_for_order
  endpoint:
    path: /v1/orders/{orderId}/pay
    method: POST
    data_selector: order
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /api/v1/inventory
    method: GET
    data_selector: items
- name: orders
  endpoint:
    path: /api/v1/orders
    method: GET
    data_selector: orders
- name: merchant
  endpoint:
    path: /v3/merchants/{mId}
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: items
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: orders
    params: {}
- name: orders
  endpoint:
    path: /v3/merchants/{mId}/orders
    method: GET
    data_selector: elements
    params: {}
- name: inventory
  endpoint:
    path: /services/data/v1/inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /services/data/v1/orders
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/v1/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/v1/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: payments
  endpoint:
    path: /dev/docs/get-all-payments
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /v3/merchants/{mId}/orders
    method: GET
    data_selector: elements
    params:
      limit: 100
      offset: 0
- name: campaign_member
  endpoint:
    path: /v1/campaign_member
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /v1/contact
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: category_items
  endpoint:
    path: /v3/merchants/{mId}/category_items
    method: POST
    data_selector: elements
- name: item_modifier_groups
  endpoint:
    path: /v3/merchants/{mId}/item_modifier_groups
    method: POST
    data_selector: elements
- name: option_items
  endpoint:
    path: /v3/merchants/{mId}/option_items
    method: POST
    data_selector: elements
- name: tax_rate_items
  endpoint:
    path: /v3/merchants/{mId}/tax_rate_items
    method: POST
    data_selector: elements
- name: tag_items
  endpoint:
    path: /v3/merchants/{mId}/tag_items
    method: POST
    data_selector: elements
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: customers
  endpoint:
    path: /v3/customers
    method: GET
    data_selector: customers
    params: {}
- name: export_merchant_data
  endpoint:
    path: /v3/merchants/{merchant_Id}/exports
    method: POST
    data_selector: export
    params: {}
- name: check_export_status
  endpoint:
    path: /v3/merchants/{merchant_Id}/exports/{export_Id}
    method: GET
    data_selector: status
    params: {}
- name: transaction_data
  endpoint:
    path: /services/data/v1/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: merchant_payment_configs
  endpoint:
    path: /v3/merchants/{merchantUUID}/ecomm_payment_configs
    method: GET
    data_selector: surcharging
    params: {}
- name: refund_transaction
  endpoint:
    path: /v3/merchants/{merchantUUID}/refunds/{refundUUID}
    method: GET
    data_selector: additionalCharges
    params:
      expand: additionalCharges
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: pay_key
  endpoint:
    path: /v2/merchant/{mId}/pay/key
    method: GET
    data_selector: pem
- name: pay
  endpoint:
    path: /v2/merchant/{mId}/pay
    method: POST
    data_selector: paymentId
- name: inventory_items
  endpoint:
    path: /v3/inventory/items
    method: GET
    data_selector: items
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: items
  endpoint:
    path: /v1/inventory/items
    method: GET
    data_selector: items
- name: item_stock
  endpoint:
    path: /v1/inventory/getItemStocks
    method: GET
    data_selector: stocks
- name: categories
  endpoint:
    path: /v1/inventory/getCategories
    method: GET
    data_selector: categories
- name: tags
  endpoint:
    path: /v1/inventory/getTags
    method: GET
    data_selector: tags
- name: inventory
  endpoint:
    path: /inventory
    method: POST
    data_selector: items
    params: {}
- name: items
  endpoint:
    path: /v3/merchants/{mId}/items
    method: GET
    data_selector: elements
- name: create_item
  endpoint:
    path: /v3/merchants/{mId}/items
    method: POST
    data_selector: id
- name: item_groups
  endpoint:
    path: /v3/merchants/{mId}/item_groups
    method: POST
    data_selector: id
- name: attributes
  endpoint:
    path: /v3/merchants/{mId}/attributes
    method: POST
    data_selector: id
- name: add_attribute_options
  endpoint:
    path: /v3/merchants/{mId}/attributes/{attributeId}/options
    method: POST
    data_selector: id
- name: item_stocks
  endpoint:
    path: /v3/merchants/{mId}/item_stocks
    method: GET
    data_selector: elements
- name: items
  endpoint:
    path: /v3/merchants/{mId}/items/{itemId}
    method: GET
    data_selector: id
- name: item_availability
  endpoint:
    path: /v1/items/availability
    method: GET
    data_selector: availability
    params: {}
- name: modifier_groups
  endpoint:
    path: /v1/modifier_groups
    method: GET
    data_selector: modifierGroups
    params: {}
- name: modifiers
  endpoint:
    path: /v1/modifiers
    method: GET
    data_selector: modifiers
    params: {}
- name: modifier_group
  endpoint:
    path: /v3/merchants/{mId}/modifier_groups
    method: POST
    data_selector: id
    params: {}
- name: modifier
  endpoint:
    path: /v3/merchants/{mId}/modifier_groups/{modifierGroupId}/modifiers
    method: POST
    data_selector: id
    params: {}
- name: associate_item_modifier_group
  endpoint:
    path: /v3/merchants/{mId}/item_modifier_groups
    method: POST
    data_selector: elements
    params: {}
- name: delete_item_association
  endpoint:
    path: /v3/merchants/{mId}/item_modifier_groups?delete=true
    method: POST
    data_selector: elements
    params: {}
- name: view_modifier_groups
  endpoint:
    path: /v3/merchants/{mId}/items/{itemId}?expand=modifierGroups
    method: GET
    data_selector: modifierGroups
    params: {}
- name: view_items_in_modifier_group
  endpoint:
    path: /v3/merchants/{mId}/modifier_groups/{modifierGroupId}/items
    method: GET
    data_selector: elements
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: GET
    data_selector: transactions
- name: categories
  endpoint:
    path: /v3/merchants/{mId}/categories
    method: POST
    data_selector: id
- name: category_items
  endpoint:
    path: /v3/merchants/{mId}/category_items
    method: POST
    data_selector: elements
- name: items_in_category
  endpoint:
    path: /v3/merchants/{mId}/categories/{categoryId}/items
    method: GET
    data_selector: elements
- name: item_categories
  endpoint:
    path: /v3/merchants/{mId}/items/{itemId}?expand=categories
    method: GET
    data_selector: categories
- name: tags
  endpoint:
    path: /v3/tags
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: tags
  endpoint:
    path: /v3/merchants/{mId}/tags
    method: POST
    data_selector: id
    params: {}
- name: tag_items
  endpoint:
    path: /v3/merchants/{mId}/tag_items
    method: POST
    data_selector: id
    params:
      delete: 'true'
- name: items_with_tag
  endpoint:
    path: /v3/merchants/{mId}/tags/{tagId}/items
    method: GET
    data_selector: elements
    params: {}
- name: atomic_order
  endpoint:
    path: /services/orders/atomic
    method: POST
    data_selector: order
    params: {}
- name: custom_order
  endpoint:
    path: /services/orders/custom
    method: POST
    data_selector: order
    params: {}
- name: calculate_order_totals
  endpoint:
    path: /services/orders/calculate
    method: GET
    data_selector: totals
    params: {}
- name: print_orders
  endpoint:
    path: /services/orders/print
    method: POST
    data_selector: print_response
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: checkout_atomic_order
  endpoint:
    path: /v3/merchants/{mId}/atomic_order/checkouts
    method: POST
    data_selector: orderCart
- name: create_atomic_order
  endpoint:
    path: /v3/merchants/{mId}/atomic_order/orders
    method: POST
    data_selector: orderCart
- name: pay_order
  endpoint:
    path: /v1/orders/{orderId}/pay
    method: POST
- name: order_types
  endpoint:
    path: /v3/merchants/{mId}/order_types
    method: POST
    data_selector: id
    params: {}
- name: orders
  endpoint:
    path: /v3/merchants/{mId}/orders
    method: POST
    data_selector: id
    params: {}
- name: line_items
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/line_items
    method: POST
    data_selector: id
    params: {}
- name: tax_rates
  endpoint:
    path: /v3/merchants/{mId}/tax_rates
    method: POST
    data_selector: id
    params: {}
- name: line_items
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/line_items
    method: POST
    data_selector: id
    params: {}
- name: bulk_line_items
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/bulk_line_items
    method: POST
    data_selector: items
    params: {}
- name: order_types
  endpoint:
    path: /v3/merchants/{mId}/order_types
    method: POST
    data_selector: id
- name: orders
  endpoint:
    path: /v3/merchants/{mId}/orders
    method: POST
    data_selector: id
- name: line_items
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/line_items
    method: POST
    data_selector: id
- name: bulk_line_items
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/bulk_line_items
    method: POST
    data_selector: items
    params: {}
- name: modifier_groups
  endpoint:
    path: /v3/merchants/{mId}/modifier_groups
    method: POST
    data_selector: modifier_group
    params: {}
- name: modifiers
  endpoint:
    path: /v3/merchants/{mId}/modifier_groups/{modifierId}/modifiers
    method: POST
    data_selector: modifier
    params: {}
- name: line_item_modifications
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/line_items/{lineItemId}/modifications
    method: POST
    data_selector: modification
    params: {}
- name: line_item_modifications
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/line_items/{lineItemId}/modifications
    method: POST
    data_selector: modifier
    params: {}
- name: line_item_discounts
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/line_items/{lineItemId}/discounts
    method: POST
    data_selector: discount
    params: {}
- name: order_discounts
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/discounts
    method: POST
    data_selector: discount
    params: {}
- name: default_service_charge
  endpoint:
    path: /v3/merchants/{mId}/default_service_charge
    method: GET
    data_selector: service_charge
    params: {}
- name: apply_service_charge
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/service_charge
    method: POST
    data_selector: service_charge
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /v3/merchants/{mId}/orders
    method: GET
    data_selector: elements
    params: {}
- name: line_items
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/line_items
    method: GET
    data_selector: elements
    params:
      expand: taxRates
- name: print_event
  endpoint:
    path: /v3/merchants/{mId}/print_event
    method: POST
    data_selector: id
    params: {}
- name: get_print_event
  endpoint:
    path: /v3/merchants/{mId}/print_event/{eventId}
    method: GET
    data_selector: id
    params: {}
- name: print_orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: records
- name: payments
  endpoint:
    path: /v3/payments
    method: GET
- name: payments
  endpoint:
    path: /v3/merchants/{mId}/payments
    method: GET
    data_selector: elements
    params: {}
- name: service_charge
  endpoint:
    path: /v3/serviceCharges
    method: GET
    data_selector: serviceCharges
    params: {}
- name: service_charge
  endpoint:
    path: /services/data/v1/serviceCharges
    method: GET
    data_selector: serviceCharges
    params: {}
- name: service_charges
  endpoint:
    path: /v1/service_charges
    method: GET
    data_selector: service_charges
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: service_charges
  endpoint:
    path: /v3/merchants/{mId}/order_fees
    method: GET
    data_selector: elements
    params:
      mId: required
      Query filter: required
- name: order_fee_line_items
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/order_fee_line_items
    method: GET
    data_selector: elements
    params:
      mId: required
      orderId: required
- name: remove_service_charges
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/order_fee_line_items/{orderFeeLineItemId}
    method: DELETE
    data_selector: null
    params:
      mId: Required
      orderId: Required
      orderFeeLineItemId: Required
- name: charges
  endpoint:
    path: /v3/charges
    method: GET
    data_selector: charges
    params: {}
- name: merchants
  endpoint:
    path: /v3/merchants
    method: GET
    data_selector: merchants
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: multiple_service_charges
  endpoint:
    path: /services/v1/msc
    method: GET
    data_selector: data
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: merchant
  endpoint:
    path: /v3/merchants
    method: GET
    data_selector: items
- name: inventory_item
  endpoint:
    path: /dev/reference/inventorycreateitem
    method: POST
- name: all_inventory_items
  endpoint:
    path: /dev/reference/inventorygetitems
    method: GET
- name: single_inventory_item
  endpoint:
    path: /dev/reference/inventorygetitem
    method: GET
- name: update_inventory_item
  endpoint:
    path: /dev/reference/inventoryupdateitem
    method: PUT
- name: atomic_order_checkout
  endpoint:
    path: /dev/reference/ordercheckoutatomicorder
    method: POST
- name: create_atomic_order
  endpoint:
    path: /dev/reference/ordercreateatomicorder
    method: POST
- name: create_line_item
  endpoint:
    path: /dev/reference/ordercreatelineitem
    method: POST
- name: bulk_create_line_items
  endpoint:
    path: /dev/reference/orderbulkcreatelineitems
    method: POST
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: age_restricted_item_types
  endpoint:
    path: /v3/merchants/{mId}/age_restricted/types
    method: GET
    data_selector: ageRestrictedTypes.elements
    params: {}
- name: create_age_restricted_item
  endpoint:
    path: /v3/merchants/{mId}/items
    method: POST
    data_selector: ''
    params: {}
- name: view_age_restricted_item
  endpoint:
    path: /v3/merchants/{mId}/items/{itemId}?expand=ageRestricted
    method: GET
    data_selector: ''
    params: {}
- name: view_all_age_restricted_items
  endpoint:
    path: /v3/merchants/{mId}/items?expand=ageRestricted&limit=2&offset=0
    method: GET
    data_selector: elements
    params: {}
- name: update_age_restricted_item
  endpoint:
    path: /v3/merchants/{mId}/items/{itemId}
    method: POST
    data_selector: ''
    params: {}
- name: bulk_line_items
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/bulk_line_items
    method: POST
- name: line_item
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/line_items/{lineItemId}
    method: GET
- name: all_line_items
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/line_items
    method: GET
- name: build_order_checkout
  endpoint:
    path: /v3/merchants/{mId}/atomic_order/checkouts
    method: POST
    data_selector: orderCart
    params: {}
- name: create_atomic_order
  endpoint:
    path: /v3/merchants/{mId}/atomic_order/orders
    method: POST
    data_selector: href
    params: {}
- name: create_age_restricted_line_item
  endpoint:
    path: /v3/merchants/{mId}/orders/{orderId}/line_items
    method: POST
    data_selector: id
    params: {}
- name: orders
  endpoint:
    path: /v3/orders
    method: GET
    data_selector: orders
- name: inventory
  endpoint:
    path: /v3/inventory
    method: GET
    data_selector: items
- name: orders
  endpoint:
    path: /v3/merchants/{merchantId}/orders
    method: GET
    data_selector: orders
- name: merchant_apps
  endpoint:
    path: /v1/apps
    method: GET
    data_selector: apps
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: inventory_items
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: orders_data
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: customers
  endpoint:
    path: /v2/customers
    method: GET
    data_selector: records
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: inventory_item
  endpoint:
    path: /v3/inventory/items
    method: GET
    data_selector: items
    params: {}
- name: service_charges
  endpoint:
    path: /order-fees
    method: GET
    data_selector: OrderFee
    params: {}
- name: apply_service_charge
  endpoint:
    path: /order-fees/apply
    method: POST
    data_selector: Order
    params: {}
- name: remove_service_charge
  endpoint:
    path: /order-fees/remove
    method: DELETE
    data_selector: Order
    params: {}
- name: get_service_charges
  endpoint:
    path: /order/service-charges
    method: GET
    data_selector: LineItem
    params: {}
- name: get_line_items_without_service_charges
  endpoint:
    path: /order/line-items/without-service-charges
    method: GET
    data_selector: LineItem
    params: {}
- name: transactions
  endpoint:
    path: /api/transactions
    method: GET
    data_selector: records
- name: payment
  endpoint:
    path: /v2/payments
    method: GET
    data_selector: payments
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: merchant
  endpoint:
    path: /v3/merchants/{merchantId}
    method: GET
    data_selector: merchantInfo
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: notifications
  endpoint:
    path: /services/notifications
    method: POST
    data_selector: status
    params: {}
- name: notifications
  endpoint:
    path: /v3/apps/{aId}/merchants/{mId}/notifications
    method: POST
    data_selector: event
    params: {}
- name: device_notifications
  endpoint:
    path: /v3/apps/{aId}/devices/{deviceId}/notifications
    method: POST
    data_selector: event
    params: {}
- name: USB_HID
  endpoint:
    path: /api/usb/hid
    method: GET
    data_selector: devices
- name: barcode_reader
  endpoint:
    path: /api/barcode/reader
    method: GET
    data_selector: supported_readers
- name: external_usb_devices
  endpoint:
    path: /dev/external-usb-devices
    method: GET
    data_selector: devices
- name: customer_facing_display
  endpoint:
    path: /customer-facing
    method: GET
    data_selector: records
    params: {}
- name: merchant_facing_display
  endpoint:
    path: /merchant-facing
    method: GET
    data_selector: records
    params: {}
- name: customer_facing_terminal
  endpoint:
    path: /api/v1/customer_facing_terminal
    method: GET
    data_selector: data
    params: {}
- name: merchant_facing_display
  endpoint:
    path: /api/v1/merchant_facing_display
    method: GET
    data_selector: data
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: charges
  endpoint:
    path: /v3/charges
    method: GET
    data_selector: charges
    params: {}
- name: customers
  endpoint:
    path: /v3/customers
    method: GET
    data_selector: customers
    params: {}
- name: payment
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: payment
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: custom_tender
  endpoint:
    path: /custom/tender
    method: POST
    data_selector: tenderData
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: merchant
  endpoint:
    path: /v2/merchants
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: orders
  endpoint:
    path: /orders
    method: POST
    data_selector: order
- name: inventory
  endpoint:
    path: /inventory
    method: GET
    data_selector: items
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: data
    params: {}
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: data
    params: {}
- name: merchant
  endpoint:
    path: /merchant
    method: GET
    data_selector: merchant
- name: inventory
  endpoint:
    path: /inventory
    method: GET
    data_selector: items
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: refund_additional_charges
  endpoint:
    path: /Refund/getAdditonalCharges
    method: GET
    data_selector: additionalCharges.elements
    params: {}
- name: transaction_data
  endpoint:
    path: /v2/transactions
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: charges
  endpoint:
    path: /v1/charges
    method: GET
    data_selector: data
    params: {}
- name: customers
  endpoint:
    path: /v1/customers
    method: GET
    data_selector: data
    params: {}
- name: devices
  endpoint:
    path: /v3.0/devices
    method: GET
    data_selector: devices
- name: merchant
  endpoint:
    path: /v1/merchants
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: transaction
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
    params:
      incremental: updated_at
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: developer_account
  endpoint:
    path: /developers/accounts
    method: GET
    data_selector: accounts
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: merchant
  endpoint:
    path: /v1/merchants
    method: GET
    data_selector: merchants
- name: payment
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: payment
    params: {}
- name: charges
  endpoint:
    path: /v2/charges
    method: GET
    data_selector: records
- name: payment
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: payment
    params: {}
- name: refund
  endpoint:
    path: /v1/refunds
    method: POST
    data_selector: refund
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
- name: payment
  endpoint:
    path: /v2/payments
    method: GET
    data_selector: payments
    params: {}
- name: customer
  endpoint:
    path: /v2/customers
    method: GET
    data_selector: customers
    params: {}
- name: customer_transactions
  endpoint:
    path: /customer/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
- name: sale
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: payment
    params:
      capture: true
      final: true
- name: auth
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: payment
    params:
      capture: true
      final: false
- name: pre-auth
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: payment
    params:
      capture: false
      final: false
- name: transaction
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: transaction
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: result
    params: {}
- name: payment_response
  endpoint:
    path: /paymentResponse
    method: GET
    data_selector: payment.additionalCharges
- name: refund_payment_response
  endpoint:
    path: /refundPaymentResponse
    method: GET
    data_selector: refund.additionalCharges
- name: void_payment_response
  endpoint:
    path: /voidPaymentResponse
    method: GET
    data_selector: payment.additionalCharges
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
- name: receipts
  endpoint:
    path: /v1/receipts
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: payment_receipts
  endpoint:
    path: /v1/payments
    method: GET
    data_selector: receipts
    params: {}
- name: refund_receipts
  endpoint:
    path: /v1/refunds
    method: GET
    data_selector: receipts
    params: {}
- name: vault_cards
  endpoint:
    path: /vault/cards
    method: GET
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
- name: inventory
  endpoint:
    path: /v1/inventory
    method: GET
    data_selector: items
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: orders
    params: {}
- name: inventory
  endpoint:
    path: /dev/docs/working-with-inventory
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /dev/docs/working-with-orders
    method: GET
    data_selector: records
    params: {}
notes:
- Set the Authorization header as Bearer token type, and enter the test API token
  you generated in the sandbox Developer Dashboard.
- Uses OAuth2 with refresh token
- OAuth2 is used for authentication.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Expiring access tokens required for apps in all regions
- Uses OAuth2 with refresh token — requires setup of connected app in Clover
- Some objects may return nulls in deeply nested fields
- Requires setup of connected app in Clover
- Some responses may include null values in nested fields
- Clover provides separate certificates for sandbox and production use.
- The Clover Community portal has been decommissioned. Please use the available developer
  support options to resolve inquiries.
- Some endpoints may have specific data formats or limitations
- Some endpoints may return nulls in certain fields
- Some objects like customers may return nulls in deeply nested fields
- Requires setup of connected app in api
- Uses OAuth2 with refresh token.
- Payment Card Industry security guidance for app developers
- Clover devices run a custom version of the Android operating system (OS), so your
  apps need to be compatible with the Android OS.
- Use secure HTTP (HTTPS) and TLS/SSL for sockets to encrypt data in transit and prevent
  eavesdropping and man-in-the-middle attacks.
- Use protocols with strong security features, such as TLS 1.2+, and avoid plain HTTP.
- Use secure libraries and APIs, such as `URLConnection`, `Socket`, and `HttpClient`
  for managed network communication.
- Encrypt sensitive data with strong encryption algorithms such as AES-256 and secure
  key management for sensitive data, such as user credentials and financial information.
- Billing starts after Greenwich Mean Time (GMT) midnight on the first day of the
  month.
- Requires setup for OAuth2 tokens.
- Requires token management for OAuth2
- Clover is an integrated hardware and software POS system built on the Android operating
  system.
- Clover offers core commerce-related services including employee management, inventory
  tracking, order management, payment processing, and customer management.
- Requires setup of connected app in Clover.
- Clover Go is Clover's BYOD solution. This EMV-capable device pairs with a smartphone
  or tablet.
- Requires OAuth2 authentication and setup of connected app
- Some responses may include nested fields with null values
- Clover API requires OAuth2 authentication.
- API endpoints may have rate limits.
- Clover devices are not Google Play certified and do not come with Google Play Services.
- Clover Mini 3 is equipped with an EMV chip card reader, NFC reader, and magnetic
  stripe reader.
- Clover Mini 2 is a countertop device that can be used as a complete POS or in a
  customer-facing mode.
- Requires OAuth2 token for authentication.
- API limits may apply.
- Clover Go is a bring-your-own-device (BYOD) offering.
- Ensure app is registered with Clover to use API.
- Clover is not responsible for the process of your freight forwarder after they receive
  the Dev Kit order package from Clover.
- Some responses may contain null values in optional fields
- Some endpoints may have rate limits that should be considered for API consumption.
- Clover disables the activation code after 30 minutes. Repeat these steps to generate
  new activation code.
- Interac transactions are limited by the SDK to specific payment actions.
- To comply with EU laws, certain methods are not supported in specific countries.
- Merchants are configured to process payments in Argentine Pesos (ARS). No other
  currencies are supported.
- Integrations for Argentina must use Remote Pay SDK version 3.0 or higher.
- Integrations for Canada must use SDK version 2.0 or higher.
- Clover devices support both English and French payment flow.
- Merchants are configured to process payments either in Euros (EUR).
- Specific merchant may be limited to a subset of functions.
- Merchants are configured to process payments in Euros (EUR).
- OAuth for web views and non-Clover devices
- Some methods are not supported for merchants in Ireland and the UK.
- Uses OAuth2 for authentication
- Supports regional payment flows for Argentina.
- Objects may return nulls in deeply nested fields.
- Multicurrency flows for Argentina
- Supports multicurrency flows for transactions in ARS and USD.
- Use expiring tokens in production for securing merchant data.
- You cannot publish your apps in the sandbox environment.
- Clover OAuth 2.0 framework requires you to retrieve an expiring token before accessing
  merchant information.
- Some endpoints may have rate limits.
- Ensure to handle token expiry and refresh properly.
- Some endpoints may require setup of connected app in Clover.
- Check for specific permissions needed for certain operations.
- You cannot sign up using an email address that is already linked to a Clover developer
  or merchant account (sandbox or production). This will result in a User already
  exists error.
- Multi-factor authentication (MFA) is required for the Global Developer Dashboard.
- Use the Clover sandbox environment to build and test your apps for Clover merchants.
- Some endpoints may have rate limits, check the API documentation for details.
- Due to Health Insurance Portability and Accountability Act (HIPAA) requirements,
  Clover restricts healthcare merchants in specific categories from installing apps
  that require Read or Write permissions for customers or inventory.
- Requires connected app setup for OAuth2.
- Clover Go SDK requires setup through the Global Developer Dashboard.
- Requires OAuth setup for API access.
- API may have rate limits that should be observed
- Some responses may vary based on the endpoint used
- Your private app must use the OAuth flow to generate expiring tokens.
- The alternate launch path is required when OAuth is initiated from the left navigation
  menu in the Merchant Dashboard.
- Default test merchant account is created automatically for the sandbox and production
  environments.
- Test merchants in the production environment are not billed.
- Clover uses the industry-standard OAuth 2.0 protocol for authentication.
- API tokens are scoped to grant specific permissions to make sure that apps only
  have access to the resources they need.
- Uses OAuth2 with refresh token for authentication.
- Requires a connected app setup in Clover.
- Some objects like Customer may return nulls in deeply nested fields
- Some API endpoints may have rate limits
- Multi-factor authentication (MFA) process is required for ownership transfer.
- Clover must verify and approve your global developer account in the production environment
  before starting the process to approve your app.
- Some API calls may have rate limits
- Process of uploading documentation via email is secure.
- Clover requires you to set up multi-factor authentication (MFA), which adds an extra
  layer of protection.
- OAuth2 requires setup of connected app in Clover.
- Some endpoints may have limitations regarding data retrieval.
- Some endpoints may return nulls in deeply nested fields
- Make sure that your privacy policy and TOS are NOT a generic version.
- Requires setup of OAuth for merchants
- Make OAuth-authenticated calls to merchant data
- OAuth2 with refresh token required.
- Ensure all API keys are kept secure.
- Your app must comply with Clover policies and terms of service.
- App billing must be set for every Clover App Market location where your app is supported.
- Setup connected app is required for authentication
- Merchant category mode (MCC) is not enabled for Europe.
- Each app uses the correct App ID and App Secret.
- OAuth2 flow requires setting up a connected app in Clover.
- Some API calls may return null values for optional fields.
- Clover merchants in Canada have access to only the Payments Plus and Register Lite
  plans.
- App revisions to approved or published apps are subject to review as changes may
  impact the Clover App Market Developer Terms.
- Merchants must have a current and active bank account with Clover for disbursements
- Clover generates charges based on the merchant's app usage.
- Clover API requires OAuth2 authentication for access.
- Merchant editable service charges configured in the Setup app as a percentage of
  the order total.
- Credit card surcharges are configured by Clover when the merchant is onboarded.
- Requires setup of OAuth for API access
- Ensure proper handling of rate limits
- Some endpoints may have rate limits
- Ensure to follow OAuth 2.0 flow for authentication.
- Merchants can use help codes when contacting you regarding support for your apps.
- Uses OAuth2 for authentication.
- Some reports may return nulls in deeply nested fields
- California residents can empower an 'authorized agent' to submit requests on their
  behalf.
- Uses OAuth2 with refresh token — requires setup of connected app in Clover.
- Clover API supports OAuth2 for authentication.
- Ensure to set the correct permissions for API access.
- Clover apps must use expiring OAuth tokens generated through the v2/OAuth flow.
- Some endpoints may have specific requirements for parameters
- Clover integration for web applications uses the OAuth 2.0 protocol to secure API
  tokens for merchants.
- Clover implements Cross-Origin Resource Sharing (CORS), which lets you build pure
  HTML/JavaScript-based client applications.
- High-trust apps securely store and use the Client Secret.
- Uses OAuth2 with authorization code flow — requires setup of connected app in Clover
- Requires setup of connected app in Clover API
- From October 2023, Clover requires apps to use the v2/OAuth flow.
- All REST API endpoints require an OAuth-generated access_token with specific permissions.
- Clover limits the number of active refresh tokens an app can have for each merchant.
- The response returns only an access token, along with the expiration date, in Unix
  timestamp format.
- Requires configuration of OAuth tokens for access
- Be aware of rate limits on API usage
- Use expiring tokens for improved security.
- Migrate from legacy OAuth tokens to new expiring tokens.
- Apps created after October 2023 use the v2/OAuth flow to generate expiring tokens.
- Uses OAuth2 with access tokens for API integration
- Tokenized card sources begin with 'clv_'
- Some responses may include nested fields returning nulls
- All Ecommerce API endpoints require an OAuth-generated access_token with specific
  permissions.
- Some endpoints may have additional requirements for data access
- Ensure to handle rate limits and error responses appropriately.
- Test API tokens generated from the sandbox Merchant Dashboard are intended for development
  and testing only of single-merchant solutions.
- Ensure to handle OAuth tokens correctly.
- Check API rate limits to avoid throttling.
- Some endpoints may require additional permissions depending on the operation.
- Refer to the specific API documentation for details on rate limits.
- Your app should only request the minimum permissions required for your app to function.
- OAuth2 with refresh token — requires setup of connected app in Clover
- Requires setup of two-factor authentication on the Merchant Dashboard.
- Public and private tokens are used for different integration types.
- Some responses may contain nested objects
- Uses OAuth2 with expiring tokens — requires app setup in Clover.
- The access_token is short-lived, while the refresh_token lasts longer but also expires
  eventually.
- Use refresh token to generate new expiring token
- Ensure OAuth settings are configured correctly.
- Refresh token is for single use and becomes invalid immediately after a new access_token
  and refresh_token pair is generated.
- Be aware of API limits and throttling
- Clover reserves the right to disable keys suspected of misuse and violation of our
  terms.
- Merchants in Canada and United States (US) can accept customer payments in currency
  other than the US Dollar (USD).
- Use existing TransArmor token (TA) multi-pay token with the create a charge and
  pay for an order endpoints.
- Some endpoints may have limitations based on merchant settings
- Merchants must obtain cardholder consent before saving a card on file.
- Multi-pay tokens must be enabled in Clover gateway settings.
- 3DS is required for apps intended for use in the European region.
- 3D Secure provides an additional security layer for online credit and debit card-not-present
  (CNP) transactions.
- Pre-authorization validity depends on the transaction and card type.
- Requires OAuth2 authentication with a connected app setup.
- Uses OAuth2 — requires setup of connected app in Clover
- Requires OAuth2 for authentication
- The 'Get charges' endpoint retrieves details of existing charges previously created
  using the 'Create a charge' endpoint.
- Requires OAuth2 authentication to access Clover API.
- Ensure to handle OAuth token expiration properly.
- Uses OAuth2 authentication.
- An idempotency key is a required value your app generates for Clover to recognize
  subsequent retries.
- Required parameters for creating a charge include currency, email, amount, address,
  name, and authorization.
- OAuth2 with refresh token is used.
- OAuth2 with refresh token required for integration.
- The /v1/refunds endpoint does not support partial refunds for charges that include
  taxes or tips or charges that have more than one line item.
- Recurring payment configurations and related APIs are not available for HIPAA merchants.
- Merchants can create various recurring payment plans.
- 'Editable fields include: name, amount, note.'
- 'Non-editable fields include: interval and intervalCount.'
- A subscription is deactivated if the customer's invoice payment fails after five
  attempts.
- You can only deactivate or cancel subscriptions that you created.
- Set the Authorization header as Bearer token type.
- A single-pay Clover gift card token (cToken) is returned in the response.
- Clover OAuth flow overview
- Requires a merchant-specific API token for operations.
- Tokenize the gift card before redeeming.
- Requires setup of the merchant-specific API token.
- Clover uses OAuth2 for authentication.
- You must request a void within 24 hours of a gift card transaction; after 24 hours,
  the amount is refunded instead of voided.
- You can only void a multi-lock transaction.
- From April 1, 2025, PCI DSS v4.0 (6.4.3 and 11.6.1) mandates stringent script management
  on all payment pages.
- Utilize reCAPTCHA for preventing card testing on hosted pages.
- The sandbox environment uses an emulated payment gateway, some fraud check fields
  may not appear in API responses.
- Level 2 and Level 3 card payment features are currently available only for Mastercard®
  and Visa® in the United States (US).
- Processing the level 2 data included with purchase cards depends on upstream systems
  being available when creating a payment.
- Some Clover merchants are unable to process soft descriptors, and attempts to include
  them will return a warning.
- Ensure API key and OAuth token are valid for requests.
- OAuth2 integration is required for API access.
- Some endpoints may have rate limiting.
- Clover handles customer card data securely, which reduces PCI DSS compliance burden
  for merchants.
- Hosted Checkout does not use the Clover inventory system.
- Hosted Checkout requests are not linked to the merchant's Clover inventory.
- ReCAPTCHA is selected by default for all new Clover merchants to combat fraud on
  card-not-present transactions.
- Use a secure HTTPS redirect URL as an unencrypted (HTTP) URL will not work.
- Clover APIs require OAuth2 for authentication.
- Be aware of rate limits when making API calls.
- Test your Hosted Checkout integration using cURL and a web browser.
- Verify that the checkout information is correct on the checkout page.
- Secure payment processing—Send sensitive payment information directly to Clover
  servers.
- Seamless API integration—Integrate Clover Ecommerce APIs into your merchant’s website.
- API may have rate limits depending on the endpoint.
- Developers using the Clover-hosted iframe integration are advised to check their
  code and remove any reference to cdn.polyfill.io.
- Clover uses OAuth2 with refresh token.
- Ensure to handle token expiration properly.
- Use an `idempotency` key to safely retry the `v1/charges` request without accidental
  double charges.
- The Apple Pay session lasts for 30 seconds. Therefore, complete the charge process
  and SDK status update (Success or Fail) within 30 seconds.
- Requires connected app setup for OAuth.
- Merchants can accept payments through Google Pay™ using the Clover iframe integrations
  on their ecommerce websites.
- Iframe customization allows for CSS styling.
- The iframe inherits dimensions from its container.
- All Google Pay assets and buttons must follow the Google Pay Web Brand Guidelines
- 'Use the generic id for the sandbox: 2c74dcc0-61ad-4f08-8764-a29aeb98f4a4 or for
  production: 4f77df6d-70c9-4f36-af1d-f8ad1ad7b0cc'
- Some API responses may include nulls in data
- Requires setup of a connected app in Clover
- API calls may have rate limits
- Requires OAuth2 setup for accessing API endpoints.
- Some responses may contain nested structures.
- Uses OAuth2 with refresh token — requires setup of connected app in API
- The CSR file is valid for a year on the Apple Pay developer platform.
- Clover lets you create two CSR files at a time.
- Clover API requires OAuth2 authentication
- Implementations may vary based on merchant needs
- API rate limits may apply
- Clover recommends copying and saving the location to host the verification file,
  as the entire process to verify the file can take a few days.
- 'Make sure the verification file is in the correct location on your ecommerce website:
  https://{domain}/.well-known/apple-developer-merchantid-domain-association.'
- Use the Apple Pay payment token as a source token to create a charge or pay for
  an order.
- Merchants must enable 3DS on the Merchant Dashboard.
- 3DS is enabled at the merchant identifier (`mId`) level. If you are a developer
  working with multiple `mId`s, then your merchant needs to enable the 3DS service
  for each merchant identifier.
- Merchants need to configure the 3DS SDK and then initiate the SDK for payments using
  the Ecommerce API—Create a charge and Pay for an order endpoints.
- 3D Secure is priced for merchants at 4¢ in the local currency (USD or CAD) per transaction.
- Liability shift protection applies only to chargebacks related to fraud and does
  not cover non-fraudulent customer claims.
- Some fields may return nulls in deeply nested structures
- Test 3DS integration in the sandbox
- For testing in the sandbox environment, replace https://scl.clover.com/v1/charges
  with https://scl-sandbox.dev.clover.com/v1/charges
- To create an additional security layer for CNP transactions, add the 3DS authentication
  method.
- When you turn on 3D Secure, the cardholder must validate every transaction with
  a secure personal identification number (PIN) that their card issuer sends to their
  phone or associated devices.
- Clover uses the OAuth 2.0 security framework for third-party developers to authenticate
  their apps with merchant accounts and lets them use Clover public REST APIs on behalf
  of the merchant.
- Clover developers use expiring access and refresh tokens in the production environment
  to secure merchant data.
- Some endpoints may have limitations on data return
- API may have rate limits and restrictions
- You need to use expiring access and refresh tokens in the production environment
  to secure merchant data.
- Test API tokens generated from the sandbox Merchant Dashboard are intended for development
  and testing only.
- Production apps must use API tokens generated using the relevant OAuth flow or the
  Clover Android SDK.
- The Clover REST API lets you query relevant information about Clover merchants,
  such as inventory, orders, and payments.
- Endpoints like getOrders, getPayments, and getRefunds will only return data spanning
  a maximum of 90 days in a single request.
- There is no minimum number of items for a request; however, Clover recommends retrieving
  no more than 100 items per query to avoid hitting limits and performance issues.
- Limit expansions to a maximum of three fields per API call.
- Clover provides a comprehensive set of APIs for integration with point-of-sale systems.
- Some objects may return nulls in deeply nested fields.
- Some fields may return nulls
- Clover merchant data sets can be very large. By default, REST API responses are
  returned 100 items at a time.
- Uses OAuth2 with refresh token — requires setup of connected app in clover
- Some endpoints may return nulls in nested fields
- Clover supports only HTTPS-enabled callbacks.
- Mock servers let you simulate API endpoints by returning example responses linked
  to each request.
- To have a response display all possible fields, set the return_null_fields query
  parameter to true.
- Ensure to handle token expiration.
- If you’re getting a 404 Not Found, you might have a typo in your query.
- Respect rate limits
- Clover API has rate limits; handle 429 Too Many Requests errors.
- API responses may include null fields for optional data.
- Returns 1000 objects per file. If your response contains more than 1000 objects,
  returns an array of files to capture.
- Deletes exported files after 24 hours.
- Maximum time range is 30 days. If your data spans are longer, break the request
  into multiple requests.
- Server handles a few exports concurrently. Wait for each export to finish before
  you start another one.
- Ensure to include additional charges in transaction data for proper reporting.
- Every element in the Customers endpoint is considered personal identifiable information
  (PII).
- You must request the following permissions to receive field-level access to each
  respective data element of the Customers endpoint.
- Some endpoints may require specific permissions
- Ensure OAuth2 setup is completed for API access
- Developer Pay API is superseded by the Ecommerce API.
- In order to use the Developer Pay API to process credit cards, you need an OAuth-generated
  API token.
- Requires OAuth2 token for API access.
- Requires OAuth2 authentication with refresh token.
- Inventory operations may have rate limits.
- Inventory spreadsheet must be in .xls or .xlsx format and not larger than 5 MB.
- All money amount values are represented in cents.
- Ensure to handle rate limits and API authentication properly.
- Setup of connected app is required.
- Set the Authorization header as Bearer token type, and enter the merchant's API
  token.
- OAuth flow overview is provided in the documentation.
- Clover Orders API provides solutions for creating and managing both in-store and
  online orders.
- API requires OAuth2 setup for integration
- Ensure to handle rate limiting on API calls
- Set the delete_order_on_failure parameter to true as part of the metadata when paying
  for an order.
- Order totals are represented in cents.
- If your request includes more than one line_item, only the last item in the request
  is added to the order.
- If your app caches inventory items, you should also register for webhook notifications.
- Use Bearer token type for Authorization header
- If vat is set to true in the merchant properties, the merchant uses a value-added
  tax.
- Requires Write orders and Read orders permissions to interact with printer functions.
- Print jobs are short-lived and cannot be replayed once printed.
- The `Get all payments` restriction of 90 days for search results is limited to specific
  merchants.
- Only merchants can create, update, or delete service charges.
- Initial release of MSC does not support fee-based service charges or taxable order
  fees.
- Ensure proper OAuth setup for API access
- No tax on order fees—order fees must be marked as 0% No Tax Applied.
- In the initial release, the multiple service charges (MSC) feature is available
  to a limited set of merchants.
- Utilizes OAuth2 with refresh tokens for authentication
- API limits apply based on the plan
- Requires OAuth2 authentication.
- Multiple service charges feature is available to a limited set of merchants.
- Setup of connected app in Clover required for OAuth2
- API requires OAuth2 authentication.
- Important! The age-restricted item type names and identifiers are fixed and must
  be used as available in the response.
- Manage age-restricted items in the Orders API
- The purchase of age-restricted items requires age verification.
- Some endpoints may have usage limits
- Emulators do not function exactly like Clover devices, so the app update process
  is not automatic.
- Python 3.5 or later is required to run the Python script for app installation.
- Starting with SDK level 27, Android introduced the account access and discoverability
  policy, which explicitly requests access to Clover merchant accounts and disrupts
  the expected merchant flow.
- Clover apps require that you sign the Android application package (APK) using only
  the v1 (JAR-based) signing scheme.
- Package name doesn't begin with `com.clover.` (Only Clover-owned apps can begin
  with `com.clover.`)
- Attribute `android:minSdkVersion` in your `AndroidManifest.xml` has a value of **17
  or less**.
- Attribute `android:versionCode` in your `AndroidManifest.xml` is greater than the
  version code of any APK you've already uploaded.
- 'Certificate signature algorithm must be at least `SHA1withRSA, 2048-bit key` (RSA2048
  with SHA-256). Verify with the following command: `jarsigner -verify -verbose <filename>.apk`.'
- APK is signed with the same key you used to sign the first APK you uploaded.
- APK is signed in release mode.
- APK is signed with only the V1 signature scheme (Jar Signature). The V2 signature
  scheme is not supported.
- Signature file is saved as `META-INF/CERT.RSA`.
- Size of the APK file doesn't exceed **120 MB**.
- OAuth2 setup is required for accessing the API
- Ensure proper API token management
- APKs are automatically approved in the Sandbox environment.
- Some APIs require setup of connected app in Clover.
- Arriving soon! Clover Flex Pocket for UK merchants
- Elevating payment security with 3D Secure authentication
- OAuth setup is required for API access.
- Get a merchant's CloverAccount to authenticate.
- Clover requires OAuth2 authentication for API access
- Ensure correct setup of OAuth tokens
- 'During most Clover REST API calls, the authorization: Bearer header is set with
  auth_token.'
- Clover supports all standard USB human interface devices (HID).
- You cannot use an external Magnetic Stripe Reader (MSR) to accept payments.
- Support ended for Android NFC feature from July 2023
- Use the Platform2 class for app development on Station Duo 2.
- The merchant-facing display does not swivel.
- Activities on the customer-facing display cannot have focus.
- Supports various integrations with Clover devices
- Include a Cancel button so the customer or merchant can exit the payment flow.
- Required permissions include MERCHANT_R and MERCHANT_W to initialize a custom tender.
- Some APIs may have rate limits
- With Order Connector and Merchant Connector, your Android apps query V1 API endpoints,
  which have their own limitations.
- For access to more features, we recommend querying web services for building your
  Android apps.
- 'Your app needs the following Clover app permissions to complete this tutorial:
  Read orders, Write orders, Read inventory.'
- Currency formatting is based on merchant's settings
- Merchants using the Virtual Terminal can collect a fixed amount convenience fee.
- Program code 5104 for US merchants indicates a surcharge program.
- Clover devices are PCI compliant.
- Clover also offers native integrations where the POS is an Android app installed
  on a Clover device.
- Clover devices are only certified for use in attended and semi-attended environments.
- You can customize the display of an itemized order on the Clover Mini.
- You can customize your POS to track the customer's progress through the payment
  flow.
- If you are creating integrations for more than one platform or connection protocol,
  a separate app and unique RAID is required for each.
- Integrated apps must process transactions through Clover. Using a different processor
  is a violation of the Clover App Market Developer Program Policies.
- Requires setup of developer account for sandbox and production environments.
- Semi-integrations for the US region must support partial authorizations for the
  integrated application to be approved.
- Test cards must be used in the sandbox environment.
- Tests must be conducted using a Dev Kit configured for the sandbox environment.
- OAuth2 requires setup of connected app in Clover
- OAuth for web views and non-Clover devices requires additional setup.
- For Payment Card Industry Data Security Standard (PCI DSS) compliance, card information
  can only be entered on the Clover device; card information for the customer cannot
  be entered on your POS and then passed on to the device.
- Some merchants are configured to add a surcharge to all credit card transactions
  they process.
- Surcharges are only applied when the customer pays with an eligible credit BIN credit
  card.
- Manual refunds can be processed only when the Clover device is online.
- Manual refunds are available only in North America and Europe, and not in Latin
  America.
- Requires setup of OAuth credentials in Clover Developer Portal
- The CloverConnector#DisplayReceiptOptions method displays the receipt selection
  screen.
- Regional limitations, driven by law or regulation, and a merchant's individual settings
  combine to determine whether card vaulting is allowed for a particular merchant.
- Clover OAuth flow requires setup of connected app.
- On-device semi-integrations that use PaymentConnector or Intents do not need to
  handle challenges. Secure Payments manage challenges instead.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 400 Bad Request
- 401 Unauthorized
- 404 Not Found
- 429 Too Many Requests
- 500 Internal Server Error
- 'INVALID_REQUEST: Check parameters and request format'
- '401 Unauthorized: Verify client credentials.'
- '429 Too Many Requests: Slow down API calls.'
- '401 Unauthorized: Check client credentials and token validity'
- '403 Forbidden: Permissions issue'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '400 Bad Request: Check request format'
- '401 Unauthorized: Verify OAuth credentials'
- '404 Not Found: Endpoint may not exist'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Verify OAuth token validity'
- '401 Unauthorized: Check your OAuth token.'
- '404 Not Found: The requested resource does not exist.'
- '400 Bad Request: The request was invalid or cannot be served.'
- '401 Unauthorized: Access token is missing or invalid.'
- '404 Not Found: The requested resource could not be found.'
- '400 Bad Request: Check request parameters and format'
- '404 Not Found: Verify the endpoint path'
- '429 Too Many Requests: Throttle API calls'
- '500 Internal Server Error: Try again later'
- '401 Unauthorized: Verify OAuth credentials.'
- '404 Not Found: Endpoint may be incorrect.'
- '404 Not Found: Ensure endpoint path is correct'
- '403 Forbidden: Ensure you have the correct permissions.'
- '400 Bad Request: Check the request format or parameters'
- 'METHOD_NOT_SUPPORTED: Check if the method is available in this region.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Verify OAuth token'
- '404 Not Found: Ensure endpoint is correct'
- '500 Internal Server Error: Retry request'
- '400 Bad Request: Invalid request parameters.'
- '401 Unauthorized: Invalid credentials or token expired.'
- '400 Bad Request: The request was invalid'
- '401 Unauthorized: Access token is invalid or expired'
- '404 Not Found: The requested resource could not be found'
- '400 Bad Request: Check the request syntax.'
- '401 Unauthorized: Verify credentials.'
- '404 Not Found: Endpoint does not exist.'
- '401 Unauthorized: Check your OAuth token and permissions.'
- '404 Not Found: Verify endpoint path and resource availability.'
- '400 Bad Request: Check your request payload.'
- '401 Unauthorized: Ensure valid OAuth token.'
- '404 Not Found: Verify endpoint path.'
- '403 Forbidden: Check API permissions or access rights'
- '400 Bad Request: Check your request parameters'
- '404 Not Found: Ensure the endpoint path is correct'
- '404 Not Found: Endpoint may not exist or be misspelled.'
- '500 Internal Server Error: Try again later or contact support.'
- '401 Unauthorized: Check your API key and permissions.'
- '401 Unauthorized: Invalid client credentials.'
- '429 Too Many Requests: Reduce request frequency'
- '400 Bad Request: The request could not be understood by the server due to malformed
  syntax.'
- '401 Unauthorized: The request requires user authentication.'
- '401 Unauthorized: Check your credentials.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Verify your OAuth token'
- '429 Too Many Requests: Try reducing your request rate'
- '401 Unauthorized: Invalid or expired token'
- '404 Not Found: Check endpoint path'
- '500 Internal Server Error: Retry the request'
- '401 Unauthorized: Recheck OAuth credentials.'
- '429 Too Many Requests: Throttle your requests.'
- '404 Not Found: Verify endpoint path'
- '401 Unauthorized: Invalid authentication credentials'
- '429 Too Many Requests: Rate limit exceeded'
- '401 Unauthorized: Check your credentials and OAuth token'
- '429 Too Many Requests: Throttle your API requests'
- '401 Unauthorized: Check client credentials and scopes'
- '403 Forbidden: Verify that the API key has permission for the requested operation'
- '404 Not Found: Confirm the endpoint and resource are correct'
- '401 Unauthorized: Verify client credentials and token.'
- '404 Not Found: Endpoint may not exist.'
- '400 Bad Request: Check request format and parameters.'
- '404 Not Found: Verify the endpoint path.'
- '404 Not Found: Endpoint does not exist'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '404 Not Found: Ensure endpoint is correct.'
- Limitations on the number of refresh tokens
- Limitations on refresh token usage
- Dynamic expiration dates and length
- '401 Unauthorized: Check your OAuth token'
- '429 Too Many Requests: Throttle your requests to avoid hitting rate limits'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify access token.'
- '429 Too Many Requests: Implement exponential backoff.'
- '404 Not Found: The requested resource does not exist'
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Verify your authentication credentials.'
- '403 Forbidden: Ensure you have permissions for the requested operation.'
- '401 Unauthorized: Check OAuth token and permissions'
- '401 Unauthorized: Check token validity.'
- '401 Unauthorized: Recheck API key or token expiration'
- 'INVALID_REQUEST: Check the request parameters'
- 'UNAUTHORIZED: Invalid credentials or token expired'
- '400 Bad Request: Indicates a card-related error. Provides the unique identifier
  of the failed charge.'
- '400 Bad Request: Provides additional information about the error to help users
  identify the issue.'
- '400 Bad Request: Indicates a card issuer declined the transaction, including the
  reason if specified by the issuer.'
- '400 Bad Request: URL (link) for more information about the reported error code.'
- '400 Bad Request: Detailed information about the error code. For card-related errors,
  this can provide more information to users.'
- '400 Bad Request: Lists the specific parameter related to the error. Useful for
  informing users about specific issues with their card information entry.'
- '400 Bad Request: Returned error type: api_connection_error, api_error, authentication_error,
  card_error, idempotency_error, invalid_request_error, rate_limit_error'
- '400 Bad Request: Returns when a card-related error occurs.'
- '400 Bad Request: Detailed information about the error code.'
- '400 Bad Request: Returns when a card issuer declines the transaction.'
- '404 Not Found: Verify endpoint and resource path'
- '401 Unauthorized: Recheck OAuth token or scopes.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '401 Unauthorized: Verify the access token'
- '404 Not Found: Ensure the endpoint exists'
- '400 Bad Request: charge - Returns when a card-related error occurs. Indicates the
  unique ID of the failed charge.'
- '400 Bad Request: code - Returns additional information about the error that you
  can use to provide user-friendly handling of the issue.'
- '400 Bad Request: decline_code - Returns when a card issuer declined the transaction.
  Includes the reason for the decline if specified by the card issuer.'
- '400 Bad Request: doc_url - Returns a link for more information about the reported
  error code.'
- '400 Bad Request: message - Provides detailed information about the error code.
  For card-related errors, use this information to inform users.'
- '400 Bad Request: param - If the error is related to a specific parameter, this
  value lists the parameter. You can inform users of a particular issue in the entered
  card information.'
- '400 Bad Request: type - Returned error type:  - api_connection_error  - api_error  -
  authentication_error  - card_error  - idempotency_error  - invalid_request_error  -
  rate_limit_error'
- '400 Bad Request: Returns when a card-related error occurs. Indicates the unique
  ID of the failed charge.'
- '400 Bad Request: Returns additional information about the error that you can use
  to provide user-friendly handling of the issue.'
- '400 Bad Request: charge'
- '400 Bad Request: code'
- '400 Bad Request: decline_code'
- '400 Bad Request: doc_url'
- '400 Bad Request: message'
- '400 Bad Request: param'
- '400 Bad Request: type'
- '400 Bad Request: Validate request parameters.'
- '401 Unauthorized: Check if the token is valid.'
- '401 Unauthorized: Verify credentials and token.'
- '404 Not Found: Ensure the endpoint is correct.'
- '500 Internal Server Error: Server issue.'
- '403 Forbidden: Check permissions or token validity'
- '404 Not Found: Verify planId or merchantId'
- '400 Bad Request: Check input data for required fields'
- '401 Unauthorized: Check OAuth scopes or token expiration'
- Partial_redemption should be true for gift card
- '401 Unauthorized: Check the authorization token.'
- 'USER_CANCEL: Reason for cancelling a refund.'
- Non-compliance can lead to higher processing costs and termination of merchant contracts.
- 'HTTP 402: CVV decline errors.'
- 'HTTP 429: Rate limit errors.'
- 'CVC_CHECK_FAILED: Refund the payment if the customer''s PIN does not match.'
- 'ADDRESS_ZIP_CHECK_FAILED: Refund the payment if the postal code does not match.'
- Purchase card Level2 Data disregarded, merchant account does not support purchase
  cards
- Purchase card Level2 Data disregarded, purchase card support is currently unavailable
- '401 Unauthorized: Verify authentication credentials.'
- '401 Unauthorized: Check your API token or OAuth scopes.'
- '429 Too Many Requests: Reduce the frequency of your requests.'
- 'incorrect_cvc: The card.cvv provided is not a three- or four-digit value'
- 'invalid_cvc: The card.cvv provided is not a three- or four-digit value'
- 'invalid_expiry_month: The card.exp_month provided is not a one- or two-digit value'
- 'invalid_expiry_year: The card.exp_month provided is not a two- or four-digit value'
- 'invalid_number: The PAN provided in card.number is invalid'
- 'invalid_tax_amount: The tax_amount provided is not valid'
- 'amount_too_large: The amount provided exceeds the amount allowed by Clover ($999,
  999.99)'
- 'card_declined: The source provided was declined by the payment gateway'
- 'card_on_file_missing: The customer attempting to pay does not have a source on
  file to complete the payment'
- 'charge_already_captured: The charge provided has already been captured'
- 'charge_already_refunded: The charge provided has already been refunded'
- 'email_invalid: The email provided is not valid'
- 'expired_card: The expiration date (the combination of card.exp_month and card.exp_year)
  provided is in the past'
- 'incorrect_number: The value provided in card.number is not valid'
- 'invalid_card_type: The card.brand provided is not a recognized value'
- 'invalid_charge_amount: The amount provided exceeds the amount allowed by Clover'
- 'invalid_request: The value provided in card.number is not a valid raw or encrypted
  PAN'
- 'invalid_tip_amount: The tip_amount provided is not a valid amount'
- 'invalid_tax_amount: The tax_amount provided is not a valid amount'
- 'missing: The token request failed upstream and the upstream message could not be
  processed'
- 'order_already_paid: The order identified by the ID in the request URL has already
  been paid'
- 'processing_error: A generic error indicating that the request could not be processed
  as submitted'
- 'rate_limit: Your application has made too many requests and additional requests
  will not be processed until the rate limit expires'
- 'resource_missing: The data item (charge, order, or refund) provided in the request
  does not exist'
- 'token_already_used: The source value is not a multipay token and was already used
  for a different payment'
- '401 Unauthorized: Verify the authentication credentials'
- '403 Forbidden: Ensure the merchant account has permission to use Hosted Checkout.'
- '401 Unauthorized: Verify your authentication token'
- '404 Not Found: Ensure the API endpoint is correct'
- '429 Too Many Requests: Throttle your API calls'
- '401 Unauthorized: Verify API token.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify your access token.'
- '404 Not Found: Ensure the endpoint exists.'
- '401 Unauthorized: Check OAuth credentials.'
- '400 Bad Request: Check request format or parameters'
- '401 Unauthorized: Verify the authentication credentials.'
- '401 Unauthorized: Check OAuth token validity.'
- '404 Not Found: Verify endpoint paths.'
- 'session_cancelled: void the payment if it was executed or initiated'
- '429 Too Many Requests: Throttle API calls.'
- '404 Not Found: Verify the endpoint URL'
- '404 Not Found: Verify endpoint URL'
- '401 Unauthorized: Check your credentials'
- 'INVALID_REQUEST: Check the request parameters and structure.'
- 'UNAUTHORIZED: Verify OAuth token and permissions.'
- '400 Bad Request: Check the request format'
- '401 Unauthorized: Check your OAuth credentials'
- Make sure the verification file is in the correct location on your ecommerce website
- Check that the embedded file doesn't have a .txt extension
- Make sure the domains are not behind a proxy or redirect and are accessible to Apple
  servers
- '400 Bad Request: Ensure requests are correctly formatted'
- No stored credentials supplied on multipay token
- '400 Bad Request: Make sure you are passing in required parameters.'
- '401 Unauthorized: Check client credentials.'
- '400 Bad Request: Check the request parameters and format'
- '401 Unauthorized: Check if you are using the correct URL and permissions.'
- '404 Not Found: Check for typos in your query.'
- '400 Bad Request: Check request parameters and payload.'
- '401 Unauthorized: Verify OAuth token.'
- '429 Too Many Requests: Implement backoff strategy.'
- '500 Internal Server Error: If you are performing an intensive query (for example,
  filtering on an unindexed field), the server might not return a result.'
- '503 Service Unavailable: Server handles a few exports concurrently.'
- '400 Bad Request: Check the request body and parameters'
- '401 Unauthorized: Check your credentials and token expiration'
- '404 Not Found: Resource not found.'
- 'INVALID_FILE_FORMAT: Ensure the file is in .xls or .xlsx format.'
- 'FILE_SIZE_EXCEEDED: Make sure the file is not larger than 5 MB.'
- '401 Unauthorized: Verify your OAuth credentials.'
- '429 Too Many Requests: Rate limit exceeded. Reduce request frequency.'
- '401 Unauthorized: Check OAuth scopes or token expiration.'
- '403 Forbidden: Ensure you have the right permissions.'
- '401 Unauthorized: Verify API token and permissions.'
- '401 Unauthorized: Check your client credentials'
- '400 Bad Request: cart_is_empty_or_missing'
- '400 Bad Request: bad_request'
- '400 Bad Request: order_uuid_is_null'
- '400 Bad Request: insufficient_customer_info'
- '400 Bad Request: invalid_discount_attribute'
- '400 Bad Request: Check your request parameters and data.'
- '429 Too Many Requests: Throttle your requests to avoid hitting limits'
- '400 Order Fee feature is not enabled: Accessing MSC endpoints without feature enabled'
- '401 Unauthorized: Verify your credentials.'
- '400 Bad Request: Check required fields in the request.'
- '401 Unauthorized: Recheck API token.'
- '404 Not Found: Verify merchant or order ID.'
- '400 Bad Request: Verify request format and parameters'
- '401 Unauthorized: Check token validity and permissions'
- '429 Too Many Requests: Implement backoff strategy'
- '403 Forbidden: Check permissions for the requested resource'
- 'Error: Google Play requires that apps target API level 29 or higher. [ExpiredTargetSdkVersion]'
- 'INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES: Ensure the app is downloaded from
  the Clover App Market'
- 'ServiceException: Handle service exceptions appropriately'
- Error retrieving token.
- '400 Bad Request: Invalid request parameters'
- 'DEVICE_NOT_SUPPORTED: Check if the device is a recognized USB HID.'
- 'INVALID_REQUEST: Verify request parameters and structure.'
- '401 Unauthorized: Verify OAuth tokens'
- '429 Too Many Requests: Slow down requests'
- '404 Not Found: Ensure endpoint exists'
- 'INVALID_PAYMENT: Verify payment details are correct.'
- 'INSUFFICIENT_FUNDS: Check the card balance.'
- '401 Unauthorized: Verify client credentials'
- '401 Unauthorized: Validate OAuth tokens'
- '429 Too Many Requests: Reduce request rate'
- '404 Not Found: Ensure the IDs are correct.'
- '401 Unauthorized: Verify OAuth token validity.'
- 'DUPLICATE_CHALLENGE: Triggered by a potential duplicate Payment.'
- 'OFFLINE_CHALLENGE: Triggered by an offline Payment.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - RegionalExtras
  - App ID
  - App Secret
  - Client ID
  - Client Secret
  - Merchant ID
  - access_token
  - refresh_token
  - Merchant
  - APP_ID
  - APP_SECRET
  - MERCHANT_ID
  - AUTHORIZATION_CODE
  - merchantId
  - OAuthToken
  - CloverOAuth
  - CloverAccount
  - InventoryConnector
  - CloverAuth
  - TenderConnector
  - Intents
  - Remote App ID
client:
  base_url: https://sandbox.dev.clover.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.clover.com/oauth/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
