resources:
- name: artifacts
  endpoint:
    path: /api/v1/artifacts/
    method: GET
- name: entrypoints
  endpoint:
    path: /api/v1/entrypoints
    method: GET
    data_selector: resources
    params:
      search: ''
      groupId: 0
      index: 0
      pageLength: 0
- name: entrypoints_drafts
  endpoint:
    path: /api/v1/entrypoints/drafts
    method: GET
    data_selector: resources
    params:
      draftType: ''
      groupId: 0
      index: 0
      pageLength: 0
- name: experiments
  endpoint:
    path: /api/v1/experiments
    method: GET
    data_selector: resources
    params: {}
- name: drafts
  endpoint:
    path: /api/v1/experiments/drafts
    method: GET
    data_selector: resources
    params: {}
- name: jobs
  endpoint:
    path: /api/v1/experiments/{id}/jobs
    method: GET
    data_selector: resources
    params: {}
- name: snapshots
  endpoint:
    path: /api/v1/experiments/{id}/snapshots
    method: GET
    data_selector: resources
    params: {}
- name: tags
  endpoint:
    path: /api/v1/experiments/{id}/tags
    method: GET
    data_selector: resources
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups/
    method: GET
    data_selector: records
    params: {}
- name: jobs
  endpoint:
    path: /api/v1/jobs/
    method: GET
    data_selector: records
    params: {}
- name: models
  endpoint:
    path: /api/v1/models/
    method: GET
    data_selector: models
    params:
      search: string
      groupId: integer
      index: integer
      pageLength: integer
- name: drafts
  endpoint:
    path: /api/v1/models/drafts/
    method: GET
    data_selector: drafts
    params:
      draftType: string
      groupId: integer
      index: integer
      pageLength: integer
- name: model_by_id
  endpoint:
    path: /api/v1/models/{id}
    method: GET
    data_selector: model
    params:
      id: integer
- name: model_snapshots
  endpoint:
    path: /api/v1/models/{id}/snapshots
    method: GET
    data_selector: snapshots
    params:
      id: integer
      search: string
      index: integer
      pageLength: integer
- name: model_tags
  endpoint:
    path: /api/v1/models/{id}/tags
    method: GET
    data_selector: tags
    params:
      id: integer
- name: model_versions
  endpoint:
    path: /api/v1/models/{id}/versions
    method: GET
    data_selector: versions
    params:
      id: integer
      search: string
      index: integer
      pageLength: integer
- name: plugin_parameter_types
  endpoint:
    path: /api/v1/pluginParameterTypes
    method: GET
    data_selector: resources
    params:
      search: ''
      groupId: 0
      index: 0
      pageLength: 0
- name: drafts
  endpoint:
    path: /api/v1/pluginParameterTypes/drafts
    method: GET
    data_selector: drafts
    params:
      draftType: ''
      groupId: 0
      index: 0
      pageLength: 0
- name: snapshots
  endpoint:
    path: /api/v1/pluginParameterTypes/{id}/snapshots
    method: GET
    data_selector: snapshots
    params:
      search: ''
      index: 0
      pageLength: 0
- name: tags
  endpoint:
    path: /api/v1/pluginParameterTypes/{id}/tags
    method: GET
    data_selector: tags
    params: {}
- name: plugins
  endpoint:
    path: /api/v1/plugins
    method: GET
    data_selector: records
    params: {}
- name: plugin_drafts
  endpoint:
    path: /api/v1/plugins/drafts
    method: GET
    data_selector: records
    params: {}
- name: plugin_files
  endpoint:
    path: /api/v1/plugins/{id}/files
    method: GET
    data_selector: records
    params: {}
- name: plugin_file_drafts
  endpoint:
    path: /api/v1/plugins/{id}/files/drafts
    method: GET
    data_selector: records
    params: {}
- name: plugin_snapshots
  endpoint:
    path: /plugins/{id}/snapshots
    method: GET
    data_selector: records
    params: {}
- name: plugin_snapshot_by_id
  endpoint:
    path: /plugins/{id}/snapshots/{snapshotId}
    method: GET
    data_selector: records
    params: {}
- name: plugin_tags
  endpoint:
    path: /plugins/{id}/tags
    method: GET
    data_selector: records
    params: {}
- name: replace_plugin_tags
  endpoint:
    path: /plugins/{id}/tags
    method: PUT
    data_selector: records
    params: {}
- name: append_plugin_tags
  endpoint:
    path: /plugins/{id}/tags
    method: POST
    data_selector: records
    params: {}
- name: remove_all_plugin_tags
  endpoint:
    path: /plugins/{id}/tags
    method: DELETE
    data_selector: records
    params: {}
- name: remove_plugin_tag
  endpoint:
    path: /plugins/{id}/tags/{tagId}
    method: DELETE
    data_selector: records
    params: {}
- name: queues
  endpoint:
    path: /api/v1/queues/
    method: GET
    data_selector: ''
    params: {}
- name: tags
  endpoint:
    path: /api/v1/tags/
    method: GET
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /api/v1/users/
    method: GET
    data_selector: ''
    params: {}
- name: jobFilesDownload
  endpoint:
    path: /api/v1/workflows/jobFilesDownload
    method: GET
    data_selector: null
    params:
      jobId: string
      fileType: string
- name: deployment
  endpoint:
    path: /dioptra-deployment
    method: POST
    data_selector: records
    params: {}
- name: mnist
  endpoint:
    path: /datasets/hojjatk/mnist-dataset
    method: GET
    data_selector: dataset
    params: {}
- name: fruits360
  endpoint:
    path: /datasets/Horea94/Fruit-Images-Dataset
    method: GET
    data_selector: dataset
    params: {}
- name: imagenet
  endpoint:
    path: /competitions/imagenet-object-localization-challenge/data
    method: GET
    data_selector: dataset
    params: {}
- name: road_signs
  endpoint:
    path: /datasets/andrewmvd/road-sign-detection
    method: GET
    data_selector: dataset
    params: {}
notes:
- Most of the built-in demonstrations in the testbed assume the testbed is deployed
  on Unix-based operating systems (e.g., Linux, macOS).
- Most included demos perform computationally intensive calculations requiring access
  to significant computational resources such as Graphics Processing Units (GPUs).
- Cruft will now run and prompt you to configure the deployment.
- If you make a mistake, interrupt cruft and start over.
- The generated template takes care of most of the configuration work for you.
- The deployment initialization scripts will look for extra CA certificates in the
  ssl/ca-certificates/ folder and copy and bundle them into named volumes so they
  are available at runtime.
- Each CA certificate file must be in the PEM format.
- Each file should include one, and only one, CA certificate.
- Each PEM-formatted CA certificate file must have the file extension crt.
- When the deployment initialization scripts are directed to enable SSL/TLS in the
  NGINX and/or Postgres services, it will scan the ssl/db/ and ssl/nginx/ folders
  for server certificate(s) and private key(s).
- The server certificate must be named server.crt and the private key must be named
  server.key when copying them into the ssl/db/ and ssl/nginx/ folders.
- 'Common reasons for mounting additional folders in the worker containers include:
  Your datasets are stored in a folder on your host machine or in an NFS share, You
  want to make other artifacts available to the worker containers, such as pre-trained
  models.'
- Users will need to sign in to Kaggle and agree to the rules of the competition to
  download datasets.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403: Accept the rules of the competition for the dataset you are downloading on
  the Kaggle website.'
auth_info:
  mentioned_objects: []
client:
  base_url: /api/v1
  headers:
    X-Fields: An optional fields mask
  paginator:
    type: page
    page_size_param: pageLength
source_metadata: null
