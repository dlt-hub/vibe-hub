resources:
- name: invoice
  endpoint:
    path: /invoice
    method: POST
    data_selector: invoice
    params: {}
- name: inboundInvoices
  endpoint:
    path: /inboundInvoices
    method: GET
    data_selector: inboundInvoices
    params: {}
- name: archive
  endpoint:
    path: /archive
    method: GET
    data_selector: archive
    params: {}
- name: inboundInvoices
  endpoint:
    path: /inboundInvoices
    method: GET
    data_selector: items
    params:
      organizationId: ID!
      filter: InboundInvoicesFilter!
      nextToken: String
- name: invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: items
    params:
      organizationId: ID!
      id: ID!
- name: invoiceByRequestId
  endpoint:
    path: /invoiceByRequestId
    method: GET
    data_selector: Invoice
    params:
      organizationId: ID!
      invoiceRequestId: ID!
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: items
    params:
      organizationId: ID!
      filter: InvoicesFilter!
      nextToken: String
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: items
    params:
      organizationId: ID!
      filter: MessagesFilter!
      nextToken: String
- name: notification
  endpoint:
    path: /notification
    method: GET
    data_selector: Notification
    params:
      organizationId: ID!
      messageId: MessageId!
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: Organization
    params: {}
- name: previewInvoice
  endpoint:
    path: /previewInvoice
    method: POST
    data_selector: invoice
    params: {}
- name: storedMessages
  endpoint:
    path: /storedMessages
    method: GET
    data_selector: items
    params:
      organizationId: ID!
      createdAt: DateFilter
- name: verifyXml
  endpoint:
    path: /verifyXml
    method: POST
    data_selector: status
    params:
      xml: String!
- name: createArchive
  endpoint:
    path: /createArchive
    method: POST
    data_selector: Archive
    params:
      organizationId: ID!
      input:
        invoiceType: InvoiceType!
        startDate: Date!
        endDate: Date!
- name: createInvoice
  endpoint:
    path: /createInvoice
    method: POST
    data_selector: Invoice
    params:
      organizationId: ID!
      input: CreateInvoiceInput!
- name: deleteArchive
  endpoint:
    path: /deleteArchive
    method: DELETE
    data_selector: Archive
    params:
      organizationId: ID!
      id: ID!
- name: createInvoiceFromXml
  endpoint:
    path: /createInvoiceFromXml
    method: POST
    data_selector: Invoice
    params:
      organizationId: ID!
      xml: String!
- name: notifyInvoiceSender
  endpoint:
    path: /notifyInvoiceSender
    method: POST
    data_selector: Notification
    params:
      organizationId: ID!
      input:
        inboundInvoiceId: ID!
        message: String!
- name: sendInvoice
  endpoint:
    path: /sendInvoice
    method: POST
    data_selector: Invoice
    params:
      organizationId: ID!
      input: CreateInvoiceInput!
- name: sendInvoiceFromXml
  endpoint:
    path: /sendInvoiceFromXml
    method: POST
    data_selector: Invoice
    params:
      organizationId: ID!
      xml: String!
- name: uploadInvoice
  endpoint:
    path: /uploadInvoice
    method: POST
    data_selector: Invoice
    params:
      organizationId: ID!
      id: ID!
- name: Document Rendering Service
  endpoint:
    path: https://docs.socrate.io/api-reference/document-rendering-service
    method: GET
- name: Email Service
  endpoint:
    path: https://docs.socrate.io/api-reference/email-service
    method: GET
- name: Localization Service
  endpoint:
    path: https://docs.socrate.io/api-reference/localization-service
    method: GET
- name: Locations Service
  endpoint:
    path: https://docs.socrate.io/api-reference/locations-service
    method: GET
- name: WebSockets Service
  endpoint:
    path: https://docs.socrate.io/api-reference/websockets-service
    method: GET
- name: OAuth 2.0 Service
  endpoint:
    path: https://docs.socrate.io/api-reference/oauth-service
    method: GET
- name: User Management Service
  endpoint:
    path: https://docs.socrate.io/api-reference/user-management-service
    method: GET
- name: File Management Service
  endpoint:
    path: https://docs.socrate.io/api-reference/file-management-service
    method: GET
- name: Key-Value Service
  endpoint:
    path: https://docs.socrate.io/api-reference/key-value-service
    method: GET
- name: Document Log Service
  endpoint:
    path: https://docs.socrate.io/api-reference/document-log-service
    method: GET
- name: Geolocation Service
  endpoint:
    path: https://docs.socrate.io/api-reference/geolocation-service
    method: GET
- name: Public Holidays Service
  endpoint:
    path: https://docs.socrate.io/api-reference/public-holidays-service
    method: GET
- name: VAT Validator Service
  endpoint:
    path: https://docs.socrate.io/api-reference/vat-validator-service
    method: GET
- name: Tax Declarations Service
  endpoint:
    path: https://docs.socrate.io/api-reference/tax-declarations-service
    method: GET
- name: RO ANAF OAuth 2.0 Service
  endpoint:
    path: https://docs.socrate.io/api-reference/ro-anaf-oauth-service
    method: GET
- name: RO E-Factura Service
  endpoint:
    path: https://docs.socrate.io/api-reference/ro-efactura-service
    method: GET
- name: RO E-Transport Service
  endpoint:
    path: https://docs.socrate.io/api-reference/ro-efactura-service
    method: GET
- name: RO Intrastat Service
  endpoint:
    path: https://docs.socrate.io/api-reference/ro-intrastat-service
    method: GET
- name: Predictive Inventory Management Service
  endpoint:
    path: https://docs.socrate.io/api-reference/predictive-inventory-management-service
    method: GET
- name: Account API
  endpoint:
    path: https://docs.socrate.io/api-reference/account-api
    method: GET
- name: Call Trace Service
  endpoint:
    path: https://docs.socrate.io/api-reference/call-trace-service
    method: GET
- name: Usage Monitoring Service
  endpoint:
    path: https://docs.socrate.io/api-reference/usage-monitoring-service
    method: GET
- name: Tax Declarations Service
  endpoint:
    path: /api-reference/tax-declarations-service
    method: GET
- name: Email Service
  endpoint:
    path: /api-reference/email-service
    method: GET
- name: e-Factura Service
  endpoint:
    path: /api-reference/ro-efactura-service
    method: GET
- name: e-Transport Service
  endpoint:
    path: /api-reference/ro-etransport-service
    method: GET
- name: email_service
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: account_user
  endpoint:
    path: /account-users
    method: POST
    data_selector: invitation
    params:
      scope: account-api:query:*
- name: create_file
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createFile
    params: {}
- name: generate_upload_url
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.files.items.uploadUrl
    params: {}
- name: upload_file_content
  endpoint:
    path: /YOUR_UPLOAD_URL
    method: PUT
    data_selector: ''
    params: {}
- name: generate_download_url
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.files.items.downloadUrl
    params: {}
- name: file_management
  endpoint:
    path: /api-reference/file-management-service
    method: POST
    data_selector: createFile
    params: {}
- name: email_service
  endpoint:
    path: /api-reference/email-service
    method: POST
    data_selector: sendMessage
    params: {}
- name: create_file
  endpoint:
    path: /createFile
    method: POST
    data_selector: createFile.id
- name: initiate_upload
  endpoint:
    path: /initiateMultipartUpload
    method: POST
    data_selector: initiateMultipartUpload.uploadId
- name: generate_upload_url
  endpoint:
    path: /generatePartUploadUrl
    method: POST
    data_selector: generatePartUploadUrl
- name: complete_upload
  endpoint:
    path: /completeMultipartUpload
    method: POST
    data_selector: completeMultipartUpload
- name: account
  endpoint:
    path: /api/accounts
    method: GET
- name: email_service
  endpoint:
    path: /api/email
    method: POST
- name: file_management
  endpoint:
    path: /api/files
    method: GET
- name: tenant
  endpoint:
    path: /tenants
    method: GET
- name: portal_users
  endpoint:
    path: /api-reference/account-api
    method: POST
    data_selector: removePortalUser
    params: {}
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: items
    params: {}
- name: templates
  endpoint:
    path: /api/reference/document-rendering/templates
    method: GET
    data_selector: templates
- name: css_definitions
  endpoint:
    path: /api/reference/document-rendering/css-definitions
    method: GET
    data_selector: css_definitions
- name: invoices
  endpoint:
    path: /api/invoices
    method: POST
    data_selector: invoices
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: messages
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: POST
    data_selector: items
    params: {}
- name: inboundInvoices
  endpoint:
    path: /inboundInvoices
    method: POST
    data_selector: items
- name: bulk_download_invoices
  endpoint:
    path: /bulk/download/invoices
    method: POST
    data_selector: invoices
    params: {}
- name: create_archive
  endpoint:
    path: /archives/create
    method: POST
    data_selector: archive
    params: {}
- name: shipments
  endpoint:
    path: /api/shipments
    method: GET
    data_selector: shipments
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: messages
    params: {}
- name: carrier_messages
  endpoint:
    path: /api/carrier_messages
    method: GET
    data_selector: carrier_messages
    params: {}
- name: address_status
  endpoint:
    path: /address/status
    method: GET
    data_selector: status
- name: register_subdomain
  endpoint:
    path: /register/subdomain
    method: POST
    data_selector: registerSubdomain
- name: files
  endpoint:
    path: /api/files
    method: GET
    data_selector: items
- name: intrastat_declarations
  endpoint:
    path: /api-reference/ro-intrastat-service
    method: POST
    data_selector: declarations
    params: {}
- name: locations
  endpoint:
    path: /api-reference/locations-service/
    method: GET
- name: organizations
  endpoint:
    path: /api-reference/organizations-service
    method: GET
    data_selector: organizations
- name: replenishment_proposal
  endpoint:
    path: /computeReplenishmentProposal
    method: POST
    data_selector: processes
- name: ANAF Authorization
  endpoint:
    path: /api-reference/ro-anaf-oauth-service
    method: POST
    data_selector: generateAuthorizationRequest
    params: {}
- name: tax_declaration
  endpoint:
    path: /api-reference/tax-declarations-service
    method: POST
    data_selector: declaration
    params: {}
- name: account
  endpoint:
    path: /account
    method: GET
    data_selector: Account
    params: {}
- name: accountAccessKeys
  endpoint:
    path: /accountAccessKeys
    method: GET
    data_selector: AccountAccessKey
    params: {}
- name: accountUserInvitations
  endpoint:
    path: /accountUserInvitations
    method: GET
    data_selector: AccountUserInvitation
    params: {}
- name: accountUsers
  endpoint:
    path: /accountUsers
    method: GET
    data_selector: AccountUser
    params: {}
- name: app
  endpoint:
    path: /app
    method: GET
    data_selector: items
    params: {}
- name: apps
  endpoint:
    path: /apps
    method: GET
    data_selector: items
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: GET
    data_selector: items
    params: {}
- name: portalUser
  endpoint:
    path: /portalUser
    method: GET
    data_selector: items
    params: {}
- name: portalUserInvitations
  endpoint:
    path: /portalUserInvitations
    method: GET
    data_selector: items
    params: {}
- name: portalUsers
  endpoint:
    path: /portalUsers
    method: GET
    data_selector: items
    params:
      nextToken: nextToken
- name: serviceAccessKeys
  endpoint:
    path: /serviceAccessKeys
    method: GET
    data_selector: items
    params:
      nextToken: nextToken
- name: serviceAccessRoles
  endpoint:
    path: /serviceAccessRoles
    method: GET
    data_selector: items
    params: {}
- name: services
  endpoint:
    path: /services
    method: GET
    data_selector: data.services
    params:
      accessLevel: TENANT
- name: tenant
  endpoint:
    path: /tenant
    method: GET
    data_selector: tenant
    params:
      id: ID
- name: tenants
  endpoint:
    path: /tenants
    method: GET
    data_selector: items
    params:
      nextToken: nextToken
- name: usage
  endpoint:
    path: /usage
    method: GET
    data_selector: items
    params:
      nextToken: nextToken
      limit: Int
- name: generateAccountAccessKey
  endpoint:
    path: /generateAccountAccessKey
    method: POST
    data_selector: result
    params: {}
- name: generateAppLevelServiceAccessKey
  endpoint:
    path: /generateAppLevelServiceAccessKey
    method: POST
    data_selector: result
    params: {}
- name: generateServiceAccessKey
  endpoint:
    path: /generateServiceAccessKey
    method: POST
    data_selector: result
    params: {}
- name: invitePortalUser
  endpoint:
    path: /invitePortalUser
    method: POST
    data_selector: result
    params: {}
- name: registerAppSubdomain
  endpoint:
    path: /registerAppSubdomain
    method: POST
    data_selector: result
    params: {}
- name: removeAccountUser
  endpoint:
    path: /removeAccountUser
    method: DELETE
    data_selector: result
    params: {}
- name: removeAccountUserInvitation
  endpoint:
    path: /removeAccountUserInvitation
    method: DELETE
    data_selector: result
    params: {}
- name: removeEmailSender
  endpoint:
    path: /removeEmailSender
    method: DELETE
    data_selector: result
    params: {}
- name: removePortalUser
  endpoint:
    path: /removePortalUser
    method: DELETE
    data_selector: result
    params: {}
- name: removePortalUserInvitation
  endpoint:
    path: /removePortalUserInvitation
    method: DELETE
    data_selector: result
    params: {}
- name: removePortalUserPermission
  endpoint:
    path: /removePortalUserPermission
    method: DELETE
    data_selector: result
    params: {}
- name: removeWebhook
  endpoint:
    path: /removeWebhook
    method: DELETE
    data_selector: result
    params: {}
- name: revokeServiceAccessDenial
  endpoint:
    path: /revokeServiceAccessDenial
    method: POST
    data_selector: result
    params: {}
- name: setPortalUserPermission
  endpoint:
    path: /setPortalUserPermission
    method: POST
    data_selector: result
    params: {}
- name: setWebhook
  endpoint:
    path: /setWebhook
    method: POST
    data_selector: result
    params: {}
- name: updateAccountUser
  endpoint:
    path: /updateAccountUser
    method: PUT
    data_selector: result
    params: {}
- name: updateApp
  endpoint:
    path: /updateApp
    method: POST
    data_selector: input
- name: updateCompanyInfo
  endpoint:
    path: /updateCompanyInfo
    method: POST
    data_selector: input
- name: updateAccountAccessKey
  endpoint:
    path: /updateAccountAccessKey
    method: POST
    data_selector: input
- name: updateServiceAccessRole
  endpoint:
    path: /updateServiceAccessRole
    method: POST
    data_selector: input
- name: updateServiceAccessKey
  endpoint:
    path: /updateServiceAccessKey
    method: POST
    data_selector: input
- name: updateTenant
  endpoint:
    path: /updateTenant
    method: POST
    data_selector: input
- name: verifyDomainIdentity
  endpoint:
    path: /verifyDomainIdentity
    method: POST
    data_selector: input
- name: verifyEmailIdentity
  endpoint:
    path: /verifyEmailIdentity
    method: POST
    data_selector: input
- name: createLog
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createLog
    params: {}
- name: createLogBatch
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createLogBatch
    params: {}
- name: logs
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.logs
    params: {}
- name: updateLog
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.updateLog
    params: {}
- name: createSingleDocumentLogs
  endpoint:
    path: /createSingleDocumentLogs
    method: POST
    data_selector: result
    params: {}
- name: updateLog
  endpoint:
    path: /updateLog
    method: POST
    data_selector: result
    params: {}
- name: updateCss
  endpoint:
    path: /updateCss
    method: POST
    data_selector: result
    params: {}
- name: updateTemplate
  endpoint:
    path: /updateTemplate
    method: POST
    data_selector: result
    params: {}
- name: messages
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: inboundMessages
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: domainIdentities
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: emailSenders
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: sendMessage
  endpoint:
    path: /sendMessage
    method: POST
    data_selector: id
- name: verifyEmailIdentity
  endpoint:
    path: /verifyEmailIdentity
    method: POST
    data_selector: address
- name: authorizations
  endpoint:
    path: /authorizations
    method: GET
    data_selector: items
- name: emailIdentities
  endpoint:
    path: /emailIdentities
    method: GET
    data_selector: items
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: items
- name: inboundMessages
  endpoint:
    path: /inboundMessages
    method: GET
    data_selector: items
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: items
- name: subdomain
  endpoint:
    path: /subdomain
    method: GET
    data_selector: subdomain
- name: registerSubdomain
  endpoint:
    path: /registerSubdomain
    method: POST
    data_selector: result
- name: sendMessage
  endpoint:
    path: /sendMessage
    method: POST
    data_selector: result
- name: unsuppressAddress
  endpoint:
    path: /unsuppressAddress
    method: POST
    data_selector: result
- name: updateEmailAccount
  endpoint:
    path: /updateEmailAccount
    method: POST
    data_selector: result
- name: updateInboundMessage
  endpoint:
    path: /updateInboundMessage
    method: POST
    data_selector: result
- name: verifyDomainIdentity
  endpoint:
    path: /verifyDomainIdentity
    method: POST
    data_selector: result
- name: updateDomainIdentity
  endpoint:
    path: /updateDomainIdentity
    method: POST
    data_selector: result
- name: verifyEmailIdentity
  endpoint:
    path: /verifyEmailIdentity
    method: POST
    data_selector: result
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: items
- name: filesWithExternalReference
  endpoint:
    path: /filesWithExternalReference
    method: GET
    data_selector: items
- name: createFile
  endpoint:
    path: /createFile
    method: POST
    data_selector: File
- name: completeMultipartUpload
  endpoint:
    path: /completeMultipartUpload
    method: POST
    data_selector: File
- name: deleteFile
  endpoint:
    path: /deleteFile
    method: DELETE
    data_selector: File
- name: generatePartUploadUrl
  endpoint:
    path: /generatePartUploadUrl
    method: POST
    data_selector: uploadUrl
- name: initiateMultipartUpload
  endpoint:
    path: /initiateMultipartUpload
    method: POST
    data_selector: uploadId
- name: updateFile
  endpoint:
    path: /updateFile
    method: PUT
    data_selector: File
- name: deviceGpsLocations
  endpoint:
    path: /deviceGpsLocations
    method: POST
    data_selector: items
    params:
      limit: number
      nextToken: string
- name: addDeviceGpsLocation
  endpoint:
    path: /addDeviceGpsLocation
    method: POST
    data_selector: addDeviceGpsLocation
    params: {}
- name: updateLabel
  endpoint:
    path: /updateLabel
    method: POST
    data_selector: Result
    params: {}
- name: updateLabelTranslation
  endpoint:
    path: /updateLabelTranslation
    method: POST
    data_selector: Result
    params: {}
- name: updateLocale
  endpoint:
    path: /updateLocale
    method: POST
    data_selector: Result
    params: {}
- name: checkLocation
  endpoint:
    path: /checkLocation
    method: POST
    data_selector: checkLocation
    params: {}
- name: version
  endpoint:
    path: /version
    method: GET
    data_selector: version
    params: {}
- name: organization
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.organization
    params: {}
- name: organizations
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.organizations
    params: {}
- name: createOrganization
  endpoint:
    path: /createOrganization
    method: POST
    data_selector: organization
- name: deleteOrganization
  endpoint:
    path: /deleteOrganization
    method: DELETE
    data_selector: organization
- name: updateOrganization
  endpoint:
    path: /updateOrganization
    method: PUT
    data_selector: organization
- name: analysisData
  endpoint:
    path: /analysisData
    method: GET
    data_selector: products
    params:
      organizationId: ID!
      replenishmentProposalId: ID!
      processId: ID!
- name: analysisDataViewerUrl
  endpoint:
    path: /analysisDataViewerUrl
    method: GET
    data_selector: Uri
    params:
      organizationId: ID!
      replenishmentProposalId: ID!
      processId: ID!
      expiresIn: Int
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: Organization
- name: replenishmentProposals
  endpoint:
    path: /replenishmentProposals
    method: GET
    data_selector: ReplenishmentProposal
    params:
      organizationId: ID!
      filter: ReplenishmentProposalsFilter
- name: replenishmentProposal
  endpoint:
    path: /replenishmentProposal
    method: GET
    data_selector: ReplenishmentProposal
    params:
      id: ID!
- name: computeReplenishmentProposal
  endpoint:
    path: /computeReplenishmentProposal
    method: POST
    data_selector: Process
    params:
      id: ID!
- name: createReplenishmentProposal
  endpoint:
    path: /createReplenishmentProposal
    method: POST
    data_selector: ReplenishmentProposal
    params:
      organizationId: ID!
      input: CreateReplenishmentProposalInput!
- name: deleteFile
  endpoint:
    path: /deleteFile
    method: DELETE
    data_selector: DeletedFile
    params:
      replenishmentProposalId: ID!
      fileId: ID!
- name: deleteProcess
  endpoint:
    path: /deleteProcess
    method: DELETE
    data_selector: Process
    params:
      replenishmentProposalId: ID!
      processId: ID!
- name: deleteReplenishmentProposal
  endpoint:
    path: /deleteReplenishmentProposal
    method: DELETE
    data_selector: ReplenishmentProposal
    params:
      id: ID!
- name: killProcess
  endpoint:
    path: /killProcess
    method: POST
    data_selector: Process
    params:
      replenishmentProposalId: ID!
      processId: ID!
- name: CustomerOrders
  endpoint:
    path: /prepareFile
    method: POST
    data_selector: results
    params: {}
- name: SupplierOrders
  endpoint:
    path: /prepareFile
    method: POST
    data_selector: results
    params: {}
- name: Deliveries
  endpoint:
    path: /prepareFile
    method: POST
    data_selector: results
    params: {}
- name: Receptions
  endpoint:
    path: /prepareFile
    method: POST
    data_selector: results
    params: {}
- name: Stock
  endpoint:
    path: /prepareFile
    method: POST
    data_selector: results
    params: {}
- name: carrierMessages
  endpoint:
    path: /carrierMessages
    method: POST
    data_selector: items
    params:
      organizationId: ID!
      filter: CarrierMessagesFilter!
      nextToken: String
- name: debugStageStatus
  endpoint:
    path: /debugStageStatus
    method: POST
    data_selector: status
    params:
      organizationId: ID!
      uploadId: Float!
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: items
    params:
      organizationId: ID!
      filter: MessagesFilter!
      nextToken: String
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
    params: {}
- name: shipment
  endpoint:
    path: /shipment
    method: GET
    data_selector: Shipment
    params:
      organizationId: ID!
      id: ID!
- name: shipments
  endpoint:
    path: /shipments
    method: GET
    data_selector: items
    params:
      organizationId: ID!
      filter: ShipmentsFilter!
      nextToken: String
- name: delete
  endpoint:
    path: /delete
    method: POST
    data_selector: result
    params: {}
- name: modify
  endpoint:
    path: /modify
    method: POST
    data_selector: result
    params: {}
- name: modifyVehicle
  endpoint:
    path: /modifyVehicle
    method: POST
    data_selector: result
    params: {}
- name: notify
  endpoint:
    path: /notify
    method: POST
    data_selector: result
    params: {}
- name: declarations
  endpoint:
    path: /declarations
    method: POST
    data_selector: declarations
    params: {}
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
    params: {}
- name: declarations
  endpoint:
    path: /declarations
    method: GET
    data_selector: declarations
    params:
      filter: DeclarationsFilter!
- name: declarations
  endpoint:
    path: /queries/declarations
    method: POST
    data_selector: declarations
    params:
      filter: DeclarationsFilter!
      processFilter: ProcessesFilterInput
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: Organization
    params: {}
- name: representatives
  endpoint:
    path: /representatives
    method: GET
    data_selector: Representative
    params: {}
- name: version
  endpoint:
    path: /version
    method: GET
    data_selector: ''
    params: {}
- name: GeneralLedgerAccounts
  endpoint:
    path: /GeneralLedgerAccounts.csv
    method: GET
    data_selector: records
- name: BusinessPartners
  endpoint:
    path: /BusinessPartners.csv
    method: GET
    data_selector: records
- name: GeneralLedgerEntries
  endpoint:
    path: /GeneralLedgerEntries.csv
    method: GET
    data_selector: records
- name: Invoices
  endpoint:
    path: /Invoices.csv
    method: GET
    data_selector: records
- name: Payments
  endpoint:
    path: /Payments.csv
    method: GET
    data_selector: records
- name: PhysicalStock
  endpoint:
    path: /PhysicalStock.csv
    method: GET
    data_selector: records
- name: MovementOfGoods
  endpoint:
    path: /MovementOfGoods.csv
    method: GET
    data_selector: records
- name: Assets
  endpoint:
    path: /Assets.csv
    method: GET
    data_selector: records
- name: AssetTransactions
  endpoint:
    path: /AssetTransactions.csv
    method: GET
    data_selector: records
- name: GeneralLedgerAccounts
  endpoint:
    path: /GeneralLedgerAccounts.csv
    method: GET
- name: BusinessPartners
  endpoint:
    path: /BusinessPartners.csv
    method: GET
- name: GeneralLedgerEntries
  endpoint:
    path: /GeneralLedgerEntries.csv
    method: GET
- name: Invoices
  endpoint:
    path: /Invoices.csv
    method: GET
- name: Payments
  endpoint:
    path: /Payments.csv
    method: GET
- name: PhysicalStock
  endpoint:
    path: /PhysicalStock.csv
    method: GET
- name: MovementOfGoods
  endpoint:
    path: /MovementOfGoods.csv
    method: GET
    data_selector: records
- name: Assets
  endpoint:
    path: /Assets.csv
    method: GET
    data_selector: records
- name: AssetTransactions
  endpoint:
    path: /AssetTransactions.csv
    method: GET
    data_selector: records
- name: county_codes
  endpoint:
    path: /county_codes
    method: GET
    data_selector: county_codes
- name: region_codes
  endpoint:
    path: /region_codes
    method: GET
    data_selector: region_codes
- name: tax_accounting_basis
  endpoint:
    path: /tax_accounting_basis
    method: GET
    data_selector: tax_accounting_basis
- name: audit_file_countries
  endpoint:
    path: /audit_file_countries
    method: GET
    data_selector: audit_file_countries
- name: organizations
  endpoint:
    path: /organizations
    method: POST
    data_selector: organizations
- name: services
  endpoint:
    path: /services
    method: POST
    data_selector: services
- name: usage
  endpoint:
    path: /usage
    method: POST
    data_selector: usage
- name: usageMeasurementTypes
  endpoint:
    path: /usageMeasurementTypes
    method: POST
    data_selector: usageMeasurementTypes
- name: getUserId
  endpoint:
    path: /
    method: POST
    data_selector: data.getUserId
    params: {}
- name: user
  endpoint:
    path: /
    method: POST
    data_selector: data.user
    params: {}
- name: users
  endpoint:
    path: /
    method: POST
    data_selector: data.users
    params: {}
- name: generateEmailVerificationCode
  endpoint:
    path: /
    method: POST
    data_selector: data.generateEmailVerificationCode
    params: {}
- name: regenerateAccessToken
  endpoint:
    path: /
    method: POST
    data_selector: data.regenerateAccessToken
    params: {}
- name: setVerifiedEmail
  endpoint:
    path: /
    method: POST
    data_selector: data.setVerifiedEmail
    params: {}
- name: signIn
  endpoint:
    path: /
    method: POST
    data_selector: data.signIn
    params: {}
- name: signOut
  endpoint:
    path: /
    method: POST
    data_selector: data.signOut
    params: {}
- name: checkBalanceSheet
  endpoint:
    path: /checkBalanceSheet
    method: POST
    data_selector: BalanceSheetInfo
    params:
      input:
        vatNo: Int!
        year: Int!
- name: checkCNP
  endpoint:
    path: /checkCNP
    method: POST
    data_selector: CNPInfo
    params:
      input: String!
- name: checkCNPBatch
  endpoint:
    path: /checkCNPBatch
    method: POST
    data_selector: CNPInfo
    params:
      input: '[String!]!'
- name: checkVAT
  endpoint:
    path: /checkVAT
    method: POST
    data_selector: VATInfo
    params:
      input:
        vatNo: Int!
        date: Date!
- name: checkVATBatch
  endpoint:
    path: /checkVATBatch
    method: POST
    data_selector: VATInfo
    params:
      input: '[VATInput!]!'
- name: checkVIES
  endpoint:
    path: /checkVIES
    method: POST
    data_selector: VIESInfo
    params:
      input:
        vatNumber: String!
        countryCode: CountryCode!
- name: registerRecipient
  endpoint:
    path: /registerRecipient
    method: POST
    data_selector: RegisterRecipientResponse
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: items
- name: inboundMessages
  endpoint:
    path: /inboundMessages
    method: GET
    data_selector: items
- name: sendMessage
  endpoint:
    path: /sendMessage
    method: POST
    data_selector: data
- name: verifyEmailIdentity
  endpoint:
    path: /verifyEmailIdentity
    method: POST
    data_selector: data
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: items
- name: emailIdentities
  endpoint:
    path: /emailIdentities
    method: GET
    data_selector: items
- name: emailAccounts
  endpoint:
    path: /emailAccounts
    method: GET
    data_selector: items
- name: inboundMessages
  endpoint:
    path: /inboundMessages
    method: GET
    data_selector: items
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: items
- name: subdomain
  endpoint:
    path: /subdomain
    method: GET
    data_selector: subdomain
- name: registerSubdomain
  endpoint:
    path: /registerSubdomain
    method: POST
    data_selector: result
    params: {}
- name: sendMessage
  endpoint:
    path: /sendMessage
    method: POST
    data_selector: result
    params: {}
- name: unsuppressAddress
  endpoint:
    path: /unsuppressAddress
    method: POST
    data_selector: result
    params: {}
- name: updateEmailAccount
  endpoint:
    path: /updateEmailAccount
    method: POST
    data_selector: result
    params: {}
- name: updateInboundMessage
  endpoint:
    path: /updateInboundMessage
    method: POST
    data_selector: result
    params: {}
- name: verifyDomainIdentity
  endpoint:
    path: /verifyDomainIdentity
    method: POST
    data_selector: result
    params: {}
- name: updateDomainIdentity
  endpoint:
    path: /updateDomainIdentity
    method: POST
    data_selector: result
    params: {}
- name: verifyEmailIdentity
  endpoint:
    path: /verifyEmailIdentity
    method: POST
    data_selector: result
    params: {}
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: items
- name: filesWithExternalReference
  endpoint:
    path: /filesWithExternalReference
    method: GET
    data_selector: items
- name: createFile
  endpoint:
    path: /createFile
    method: POST
    data_selector: File
- name: completeMultipartUpload
  endpoint:
    path: /completeMultipartUpload
    method: POST
    data_selector: File
- name: deleteFile
  endpoint:
    path: /deleteFile
    method: DELETE
    data_selector: File
- name: generatePartUploadUrl
  endpoint:
    path: /generatePartUploadUrl
    method: POST
    data_selector: String
- name: initiateMultipartUpload
  endpoint:
    path: /initiateMultipartUpload
    method: POST
    data_selector: MultipartUpload
- name: updateFile
  endpoint:
    path: /updateFile
    method: PUT
    data_selector: File
- name: createSingleDocumentLogs
  endpoint:
    path: /createSingleDocumentLogs
    method: POST
    data_selector: result
    params: {}
- name: updateLog
  endpoint:
    path: /updateLog
    method: POST
    data_selector: result
    params: {}
- name: labels
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.labels
    params: {}
- name: locales
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.locales
    params: {}
- name: translations
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.translations
    params: {}
- name: updateLabel
  endpoint:
    path: /updateLabel
    method: POST
    data_selector: result
- name: updateLabelTranslation
  endpoint:
    path: /updateLabelTranslation
    method: POST
    data_selector: result
- name: updateLocale
  endpoint:
    path: /updateLocale
    method: POST
    data_selector: result
- name: checkLocation
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.checkLocation
    params: {}
- name: version
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.version
    params: {}
- name: registerRecipient
  endpoint:
    path: /registerRecipient
    method: POST
    data_selector: RegisterRecipientResponse
- name: getUserId
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: signIn
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: signOut
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: deviceGpsLocations
  endpoint:
    path: /deviceGpsLocations
    method: POST
    data_selector: items
    params:
      limit: '10'
      nextToken: ''
- name: addDeviceGpsLocation
  endpoint:
    path: /addDeviceGpsLocation
    method: POST
    data_selector: deviceId
    params: {}
- name: declarations
  endpoint:
    path: /declarations
    method: GET
    data_selector: declarations
    params:
      filter: DeclarationsFilter!
- name: declarations
  endpoint:
    path: declarations
    method: POST
    data_selector: declarations
    params:
      filter: DeclarationsFilter!
      processFilter: ProcessesFilterInput
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: Organization
- name: representatives
  endpoint:
    path: /representatives
    method: GET
    data_selector: Representative
- name: GeneralLedgerAccounts
  endpoint:
    path: /GeneralLedgerAccounts.csv
    method: GET
    data_selector: records
- name: BusinessPartners
  endpoint:
    path: /BusinessPartners.csv
    method: GET
    data_selector: records
- name: GeneralLedgerEntries
  endpoint:
    path: /GeneralLedgerEntries.csv
    method: GET
    data_selector: records
- name: Invoices
  endpoint:
    path: /Invoices.csv
    method: GET
    data_selector: records
- name: Payments
  endpoint:
    path: /Payments.csv
    method: GET
    data_selector: records
- name: PhysicalStock
  endpoint:
    path: /PhysicalStock.csv
    method: GET
    data_selector: records
- name: MovementOfGoods
  endpoint:
    path: /MovementOfGoods.csv
    method: GET
    data_selector: records
- name: Assets
  endpoint:
    path: /Assets.csv
    method: GET
    data_selector: records
- name: AssetTransactions
  endpoint:
    path: /AssetTransactions.csv
    method: GET
    data_selector: records
- name: GeneralLedgerAccounts
  endpoint:
    path: /GeneralLedgerAccounts.csv
    method: GET
    data_selector: records
    params: {}
- name: BusinessPartners
  endpoint:
    path: /BusinessPartners.csv
    method: GET
    data_selector: records
    params: {}
- name: Invoices
  endpoint:
    path: /Invoices.csv
    method: GET
    data_selector: records
    params: {}
- name: GeneralLedgerAccounts
  endpoint:
    path: /GeneralLedgerAccounts.csv
    method: GET
    data_selector: records
- name: BusinessPartners
  endpoint:
    path: /BusinessPartners.csv
    method: GET
    data_selector: records
- name: GeneralLedgerEntries
  endpoint:
    path: /GeneralLedgerEntries.csv
    method: GET
    data_selector: records
- name: Invoices
  endpoint:
    path: /Invoices.csv
    method: GET
    data_selector: records
- name: Payments
  endpoint:
    path: /Payments.csv
    method: GET
    data_selector: records
- name: PhysicalStock
  endpoint:
    path: /PhysicalStock.csv
    method: GET
    data_selector: records
- name: TaxDeclarations
  endpoint:
    path: /TaxDeclarations
    method: GET
    data_selector: records
    params: {}
- name: MovementOfGoods
  endpoint:
    path: /MovementOfGoods
    method: GET
    data_selector: records
    params: {}
- name: Assets
  endpoint:
    path: /Assets
    method: GET
    data_selector: records
    params: {}
- name: AssetTransactions
  endpoint:
    path: /AssetTransactions
    method: GET
    data_selector: records
    params: {}
- name: carrierMessages
  endpoint:
    path: /carrierMessages
    method: GET
    data_selector: items
    params:
      organizationId: ID!
      filter: CarrierMessagesFilter!
      nextToken: String
- name: debugStageStatus
  endpoint:
    path: /debugStageStatus
    method: GET
    data_selector: status
    params:
      organizationId: ID!
      uploadId: Float!
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: items
    params:
      organizationId: ID!
      filter: MessagesFilter!
      nextToken: String
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
    params: {}
- name: shipment
  endpoint:
    path: /shipment
    method: GET
    data_selector: shipment
    params:
      organizationId: ID!
      id: ID!
- name: shipments
  endpoint:
    path: /shipments
    method: GET
    data_selector: items
    params:
      organizationId: ID!
      filter: ShipmentsFilter!
      nextToken: String
- name: confirm
  endpoint:
    path: /confirm
    method: POST
    data_selector: confirmationResult
    params:
      organizationId: ID!
      id: ID
      uit: UitType
      input: ConfirmInput
      refDeclarant: Str50
      declPostAvarie: DeclPostAvarie
- name: delete
  endpoint:
    path: /delete
    method: POST
    data_selector: result
    params:
      organizationId: ID!
      id: ID
      refDeclarant: Str50
      declPostAvarie: DeclPostAvarie
- name: modify
  endpoint:
    path: /modify
    method: POST
    data_selector: result
    params:
      organizationId: ID!
      id: ID!
      input: ShipmentInput!
      refDeclarant: Str50
      declPostAvarie: DeclPostAvarie
- name: modifyVehicle
  endpoint:
    path: /modifyVehicle
    method: POST
    data_selector: result
    params:
      organizationId: ID!
      id: ID!
      input: ModifyVehicleInput
      refDeclarant: Str50
      declPostAvarie: DeclPostAvarie
- name: notify
  endpoint:
    path: /notify
    method: POST
    data_selector: result
    params:
      organizationId: ID!
      input: ShipmentInput!
      refDeclarant: Str50
      declPostAvarie: DeclPostAvarie
- name: county_codes
  endpoint:
    path: /county_codes
    method: GET
    data_selector: county codes
- name: border_crossing_points
  endpoint:
    path: /border_crossing_points
    method: GET
    data_selector: border crossing points
- name: customs_offices
  endpoint:
    path: /customs_offices
    method: GET
    data_selector: customs offices
- name: operation_rules
  endpoint:
    path: /operation_rules
    method: GET
    data_selector: operation rules
- name: invoice
  endpoint:
    path: /uploadInvoice
    method: POST
    data_selector: uploadInvoice
    params: {}
- name: inboundInvoices
  endpoint:
    path: /inboundInvoices
    method: POST
    data_selector: inboundInvoices
    params: {}
- name: archive
  endpoint:
    path: /archive
    method: POST
    data_selector: archive
    params: {}
- name: archives
  endpoint:
    path: /archives
    method: POST
    data_selector: archives
    params: {}
- name: inboundInvoices
  endpoint:
    path: /inboundInvoices
    method: GET
    data_selector: items
    params:
      organizationId: ID!
      filter: InboundInvoicesFilter!
- name: invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: items
    params:
      organizationId: ID!
      id: ID!
- name: invoiceByRequestId
  endpoint:
    path: /invoiceByRequestId
    method: GET
    data_selector: Invoice
    params:
      organizationId: ID!
      invoiceRequestId: ID!
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: items
    params:
      organizationId: ID!
      filter: InvoicesFilter!
      nextToken: String
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: items
    params:
      organizationId: ID!
      filter: MessagesFilter!
      nextToken: String
- name: notification
  endpoint:
    path: /notification
    method: GET
    data_selector: Notification
    params:
      organizationId: ID!
      messageId: MessageId!
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: Organization
- name: previewInvoice
  endpoint:
    path: /previewInvoice
    method: POST
    data_selector: invoice
    params: {}
- name: PaymentMandateInput
  endpoint:
    path: /PaymentMandateInput
    method: POST
    data_selector: PaymentMandateInput
- name: PaymentTermsInput
  endpoint:
    path: /PaymentTermsInput
    method: POST
    data_selector: PaymentTermsInput
- name: TaxTotalInput
  endpoint:
    path: /TaxTotalInput
    method: POST
    data_selector: TaxTotalInput
- name: CurrencyAmountInput
  endpoint:
    path: /CurrencyAmountInput
    method: POST
    data_selector: CurrencyAmountInput
- name: TaxSubtotalInput
  endpoint:
    path: /TaxSubtotalInput
    method: POST
    data_selector: TaxSubtotalInput
- name: TaxCategoryInput
  endpoint:
    path: /TaxCategoryInput
    method: POST
    data_selector: TaxCategoryInput
- name: LegalMonetaryTotalInput
  endpoint:
    path: /LegalMonetaryTotalInput
    method: POST
    data_selector: LegalMonetaryTotalInput
- name: InvoiceLineInput
  endpoint:
    path: /InvoiceLineInput
    method: POST
    data_selector: InvoiceLineInput
- name: declarations
  endpoint:
    path: /declarations
    method: GET
    data_selector: declarations
    params: {}
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
    params: {}
- name: holidays
  endpoint:
    path: /
    method: POST
    data_selector: data.holidays
    params: {}
- name: Document Rendering Service
  endpoint:
    path: /api-reference/document-rendering-service
    method: GET
- name: Email Service
  endpoint:
    path: /api-reference/email-service
    method: GET
- name: Localization Service
  endpoint:
    path: /api-reference/localization-service
    method: GET
- name: Locations Service
  endpoint:
    path: /api-reference/locations-service
    method: GET
- name: WebSockets Service
  endpoint:
    path: /api-reference/websockets-service
    method: GET
- name: OAuth 2.0 Service
  endpoint:
    path: /api-reference/oauth-service
    method: GET
- name: User Management Service
  endpoint:
    path: /api-reference/user-management-service
    method: GET
- name: File Management Service
  endpoint:
    path: /api-reference/file-management-service
    method: GET
- name: Key-Value Service
  endpoint:
    path: /api-reference/key-value-service
    method: GET
- name: Document Log Service
  endpoint:
    path: /api-reference/document-log-service
    method: GET
- name: Geolocation Service
  endpoint:
    path: /api-reference/geolocation-service
    method: GET
- name: Public Holidays Service
  endpoint:
    path: /api-reference/public-holidays-service
    method: GET
- name: VAT Validator Service
  endpoint:
    path: /api-reference/vat-validator-service
    method: GET
- name: Tax Declarations Service
  endpoint:
    path: /api-reference/tax-declarations-service
    method: GET
- name: RO ANAF OAuth 2.0 Service
  endpoint:
    path: /api-reference/ro-anaf-oauth-service
    method: GET
- name: RO E-Factura Service
  endpoint:
    path: /api-reference/ro-efactura-service
    method: GET
- name: RO E-Transport Service
  endpoint:
    path: /api-reference/ro-efactura-service
    method: GET
- name: RO Intrastat Service
  endpoint:
    path: /api-reference/ro-intrastat-service
    method: GET
- name: Predictive Inventory Management Service
  endpoint:
    path: /api-reference/predictive-inventory-management-service
    method: GET
- name: Account API
  endpoint:
    path: /api-reference/account-api
    method: GET
- name: Call Trace Service
  endpoint:
    path: /api-reference/call-trace-service
    method: GET
- name: Usage Monitoring Service
  endpoint:
    path: /api-reference/usage-monitoring-service
    method: GET
- name: account
  endpoint:
    path: /account
    method: GET
    data_selector: Account
    params: {}
- name: accountAccessKeys
  endpoint:
    path: /accountAccessKeys
    method: GET
    data_selector: AccountAccessKey
    params: {}
- name: accountUserInvitations
  endpoint:
    path: /accountUserInvitations
    method: GET
    data_selector: AccountUserInvitation
    params: {}
- name: accountUsers
  endpoint:
    path: /accountUsers
    method: GET
    data_selector: AccountUser
    params: {}
- name: app
  endpoint:
    path: /app
    method: GET
- name: apps
  endpoint:
    path: /apps
    method: GET
- name: calls
  endpoint:
    path: /calls
    method: GET
- name: portalUser
  endpoint:
    path: /portalUser
    method: GET
- name: portalUserInvitations
  endpoint:
    path: /portalUserInvitations
    method: GET
- name: portalUsers
  endpoint:
    path: /portalUsers
    method: GET
    data_selector: items
- name: serviceAccessKeys
  endpoint:
    path: /serviceAccessKeys
    method: GET
    data_selector: items
- name: serviceAccessRoles
  endpoint:
    path: /serviceAccessRoles
    method: GET
    data_selector: items
- name: services
  endpoint:
    path: /services
    method: GET
    data_selector: data.services
- name: tenant
  endpoint:
    path: /tenant
    method: GET
    data_selector: data
- name: tenants
  endpoint:
    path: /tenants
    method: GET
    data_selector: items
- name: usage
  endpoint:
    path: /usage
    method: GET
    data_selector: items
- name: usageFilters
  endpoint:
    path: /usageFilters
    method: GET
    data_selector: items
- name: generateAccountAccessKey
  endpoint:
    path: /generateAccountAccessKey
    method: POST
    data_selector: result
    params: {}
- name: generateAppLevelServiceAccessKey
  endpoint:
    path: /generateAppLevelServiceAccessKey
    method: POST
    data_selector: result
    params: {}
- name: generateServiceAccessKey
  endpoint:
    path: /generateServiceAccessKey
    method: POST
    data_selector: result
    params: {}
- name: invitePortalUser
  endpoint:
    path: /invitePortalUser
    method: POST
    data_selector: result
    params: {}
- name: registerAppSubdomain
  endpoint:
    path: /registerAppSubdomain
    method: POST
    data_selector: result
    params: {}
- name: removeAccountUser
  endpoint:
    path: /removeAccountUser
    method: DELETE
    data_selector: result
    params: {}
- name: removeAccountUserInvitation
  endpoint:
    path: /removeAccountUserInvitation
    method: DELETE
    data_selector: result
    params: {}
- name: removeEmailSender
  endpoint:
    path: /removeEmailSender
    method: DELETE
    data_selector: result
    params: {}
- name: removePortalUser
  endpoint:
    path: /removePortalUser
    method: DELETE
    data_selector: result
    params: {}
- name: removePortalUserInvitation
  endpoint:
    path: /removePortalUserInvitation
    method: DELETE
    data_selector: result
    params: {}
- name: removePortalUserPermission
  endpoint:
    path: /removePortalUserPermission
    method: POST
    data_selector: result
    params: {}
- name: removeWebhook
  endpoint:
    path: /removeWebhook
    method: DELETE
    data_selector: result
    params: {}
- name: revokeServiceAccessDenial
  endpoint:
    path: /revokeServiceAccessDenial
    method: POST
    data_selector: result
    params: {}
- name: setPortalUserPermission
  endpoint:
    path: /setPortalUserPermission
    method: POST
    data_selector: result
    params: {}
- name: setWebhook
  endpoint:
    path: /setWebhook
    method: POST
    data_selector: result
    params: {}
- name: updateAccountUser
  endpoint:
    path: /updateAccountUser
    method: PUT
    data_selector: result
    params: {}
- name: updateApp
  endpoint:
    path: /updateApp
    method: POST
    data_selector: input
- name: updateCompanyInfo
  endpoint:
    path: /updateCompanyInfo
    method: POST
    data_selector: input
- name: updateAccountAccessKey
  endpoint:
    path: /updateAccountAccessKey
    method: POST
    data_selector: input
- name: updateServiceAccessRole
  endpoint:
    path: /updateServiceAccessRole
    method: POST
    data_selector: input
- name: updateServiceAccessKey
  endpoint:
    path: /updateServiceAccessKey
    method: POST
    data_selector: input
- name: updateTenant
  endpoint:
    path: /updateTenant
    method: POST
    data_selector: input
- name: verifyDomainIdentity
  endpoint:
    path: /verifyDomainIdentity
    method: POST
    data_selector: input
- name: verifyEmailIdentity
  endpoint:
    path: /verifyEmailIdentity
    method: POST
    data_selector: input
- name: generate_account_access_key
  endpoint:
    path: /api-reference/account-api/
    method: POST
    data_selector: generateAccountAccessKey
    params:
      input:
        scope: account-api:query:* account-api:mutation:*
- name: register_email_subdomain
  endpoint:
    path: /register/inbound/email/subdomain
    method: POST
    data_selector: subdomain
    params: {}
- name: User Management Service
  endpoint:
    path: /api-reference/user-management-service
    method: GET
- name: Email Service
  endpoint:
    path: /api-reference/email-service
    method: GET
- name: email_identity
  endpoint:
    path: /managing-applications/email-identity/
    method: POST
    data_selector: status
    params: {}
- name: verify_domain_identity
  endpoint:
    path: /api-reference/account-api#verifydomainidentity
    method: POST
    data_selector: data
    params: {}
- name: add_email_sender
  endpoint:
    path: /api-reference/account-api#addemailsender
    method: POST
    data_selector: data
    params: {}
- name: DenyServiceAccess
  endpoint:
    path: /sbs-console/deny-service-access
    method: POST
    data_selector: denyServiceAccess
    params: {}
- name: RevokeServiceAccessDenial
  endpoint:
    path: /sbs-console/revoke-service-access-denial
    method: POST
    data_selector: revokeServiceAccessDenial
    params: {}
- name: roles
  endpoint:
    path: /api-reference/account-api#deleteserviceaccessrole
    method: DELETE
    data_selector: roles
    params: {}
- name: organization
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.organization
    params:
      id: ID!
- name: organizations
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.organizations
    params:
      filter: OrganizationsFilter
- name: createOrganization
  endpoint:
    path: /createOrganization
    method: POST
- name: deleteOrganization
  endpoint:
    path: /deleteOrganization
    method: DELETE
- name: updateOrganization
  endpoint:
    path: /updateOrganization
    method: PUT
- name: organizations
  endpoint:
    path: /api-reference/organizations-service
    method: GET
    data_selector: organizations
    params: {}
- name: remove_portal_user
  endpoint:
    path: /api-reference/account-api
    method: POST
    data_selector: removePortalUser
    params:
      userId: YOUR_PORTAL_USER_ID
- name: outbound_invoices
  endpoint:
    path: /api/outbound-invoices
    method: GET
    data_selector: invoices
- name: inbound_invoices
  endpoint:
    path: /api/inbound-invoices
    method: GET
    data_selector: invoices
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: messages
- name: invoices
  endpoint:
    path: /invoices
    method: POST
    data_selector: items
    params: {}
- name: inboundInvoices
  endpoint:
    path: /inboundInvoices
    method: POST
    data_selector: items
- name: RO E-Factura Service
  endpoint:
    path: /api-reference/ro-efactura-service
    method: POST
    data_selector: updateApp
- name: RO E-Transport Service
  endpoint:
    path: /api-reference/ro-etransport-service
    method: POST
    data_selector: updateApp
notes:
- To call the service, the access key must be provided in the x-api-key header of
  the HTTP request.
- Make sure that the scope of the key allows access to the queries and mutations that
  you require.
- You must authorize your SBS organization with ANAF to list all inbound invoices.
- SBS fetches inbound invoices from ANAF at roughly 20 minute intervals.
- This API requires authorization to ANAF, which can be obtained through the RO ANAF
  OAuth Service.
- To use Socrate Business Services, your company requires an SBS account.
- Access to the SBS Portal is permission-based.
- Users must accept the invitation from their email inbox before they get access to
  the APIs.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- You must have a service access key that provides access to the Email Service.
- 'Your service access key’s scope must include the following permissions: email-api:query:*
  email-api:mutation:*.'
- Service access key must include file-management-api:query:* file-management-api:mutation:*
  permissions.
- Users need to sign in to the SBS Console to manage portal users
- All actions available in the SBS Console are based on the permissions assigned to
  you by the root user.
- Access to the SBS Portal is permission-based and can be as broad or as granular
  as required by the needs of each user.
- You can filter call traces by a date range, by the outcome of the call (data or
  error), or by the name of the applicable service.
- The Web UI of Document Log currently provides a read-only interface.
- Creating logs is available only from the GraphQL interface.
- Permissions are required to access actions in the Document Rendering service.
- Ensure organization is created and authorized with ANAF before using the e-Factura
  service.
- The bulk download may fail with errors if invoices for a very large period of time
  are selected.
- Archiving takes place in the cloud and should be preferred over the bulk download
  feature.
- SBS fetches the latest information from ANAF every minute.
- 'Currently, the following features are not supported by the UI: Sending email with
  attachments, Sending email from a Google or Microsoft email address authorized through
  OAuth 2.0.'
- The Intrastat Web UI is read-only. You can create, generate, and delete Intrastat
  declarations data through the GraphQL interface only.
- The OAuth 2.0 Web UI is read-only. You can create OAuth 2.0 authorizations through
  the GraphQL interface only.
- Organizations can only be deleted through the GraphQL interface.
- An organization cannot be deleted if it was used to create any e-Factura invoices,
  e-Transport declarations, ANAF authorizations, Intrastat declarations, or Tax declarations
  (SAF-T).
- To interact with the Predictive Inventory Management service, you can use either
  the Web UI or a GraphQL interface.
- The authorization must be performed by a person from your organization that has
  access to ANAF’s Virtual Private Space.
- ANAF does not support authorizations from Mozilla Firefox.
- The organization for which reporting is done must exist in the SBS system.
- For Bulgarian tax declarations, the representative’s 'Other titles' must be defined.
- Access keys are strings that you must provide in the `x-api-key` HTTP header of
  the request in order to be able to make API calls.
- Scope is a security mechanism which makes it possible to grant or deny access to
  various areas of the SBS API.
- The API requires setup of authentication to access data.
- To call the service, the access key must be provided in the `x-api-key` header of
  the HTTP request.
- 'All email sent by SBS includes the header: Auto-Submitted: auto-generated.'
- The scope of the key must allow access to the queries and mutations that you require.
- Make sure to compute a replenishment proposal before running the analysisData query.
- The nextToken can be used to paginate through the products in analysisData.
- If you are using the GraphQL console, you can view the service’s documentation and
  schema only after entering an access key.
- A digital certificate configured for ANAF access must be installed in the user’s
  browser, or a physical USB token must be inserted into the user’s computer.
- Uses GraphQL query for fetching declarations.
- The maximum number of VAT numbers you can query simultaneously through the checkVATBatch
  query is 500
- No more than one request per second is allowed.
- Uses OAuth 2.0 with refresh token — requires setup of connected app in SBS
- Tracking options are not enabled by default and require setting trackEngagement
  to true.
- The `organizationId` is mandatory for most queries.
- Certain filters like `nextToken` are optional for pagination.
- Invoices uploaded may have statuses such as CREATED, UPLOADED, SIGNED, and REJECTED.
- Webhooks can be configured to notify on events like NEW_INBOUND_INVOICE and INVOICE_STATUS_CHANGED.
- Nearly all of the SBS services require authorization through a service access key
  (SAK).
- An empty scope means that access to all queries and mutations of all services is
  granted.
- Some endpoints may require filter parameters for specific queries.
- If you are the first user to set up SBS for your organization, you must create an
  SBS account before you can start creating your organization’s apps, tenants and
  access keys.
- Setting scope on an entity is optional, but required for service access denials.
- If your application does not have a Web interface, you can enter the default callback
  URL https://ro-anaf-oauth-api.socrate.io/oauth-callback.
- Email identity verification affects all tenants linked to the app.
- Propagation of DNS records may take up to 72 hours.
- Denying access is applicable only at tenant level, and only for a specific app.
- Service access denials can be revoked at any time.
- Roles are named sets of scope (access rights) that you can optionally assign to
  Portal users.
- Access to some SBS services requires an application-level (NOT tenant-level) service
  access key (ALSAK).
- Currently, you can delete organizations only through the GraphQL interface.
- It is not possible to delete an organization if it was used to create any e-Factura
  invoices, e-Transport declarations, ANAF authorizations, Intrastat declarations,
  or Tax declarations (SAF-T).
- Ensure organization is created and authorized with ANAF before use.
- If invoice attachments exist, they will be exported with the generic extension .file,
  not the actual file extension.
- Switching your app to the ANAF test environment is typically necessary only for
  test applications.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'INVOICE_NOT_FOUND: The provided invoice ID does not exist.'
- 'ARCHIVE_NOT_FOUND: The provided archive ID does not exist.'
- If an error occurred, the result displays an errors object that provides further
  details about the encountered problem.
- '400 Bad Request: Check the details of the declaration and ensure all mandatory
  fields are filled.'
- '404 Not Found: Ensure the endpoint is correct and the resource exists.'
- '401 Unauthorized: Recheck your authentication credentials.'
- '401 Unauthorized: Recheck authentication credentials'
- '404 Not Found: Ensure the endpoint path is correct'
- '401 Unauthorized: Recheck access key or permissions'
- '401 Unauthorized: Recheck access key scope.'
- '401 Unauthorized: Check the access key or its scope.'
- '400 Bad Request: Check the input parameters.'
- '401 Unauthorized: Ensure OAuth token is valid.'
- 'Error: Check the provided access key and its scope.'
- '403 Forbidden: Check the scope of the access key.'
- '401 Unauthorized: Check if the access key is valid and has the required scopes.'
- 'REQUEST_LIMIT_EXCEEDED: No more than one request per second is allowed.'
- '400 Bad Request: Check input parameters for errors.'
- '401 Unauthorized: Ensure you have the correct OAuth token.'
- Service access role is used in a permission and can not be deleted.
- 'UPLOAD_ERROR: Validation errors reported, fix in invoice-generating system.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
auth_info:
  mentioned_objects:
  - Authorization Service
  - Account API
  - Application ID
  - Directory (tenant) ID
  - Client secret
  - Redirect URI
client:
  base_url: https://portal.socrate.io
source_metadata: null
