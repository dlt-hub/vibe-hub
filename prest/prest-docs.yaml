resources:
- name: health_check
  endpoint:
    path: /_health
    method: GET
- name: databases
  endpoint:
    path: /databases
    method: GET
- name: schemas
  endpoint:
    path: /schemas
    method: GET
- name: tables
  endpoint:
    path: /tables
    method: GET
- name: table_structure
  endpoint:
    path: /show/{DATABASE}/{SCHEMA}/{TABLE}
    method: GET
- name: tables_by_schema
  endpoint:
    path: /{DATABASE}/{SCHEMA}
    method: GET
- name: rows_by_table
  endpoint:
    path: /{DATABASE}/{SCHEMA}/{TABLE}
    method: GET
- name: rows_by_view
  endpoint:
    path: /{DATABASE}/{SCHEMA}/{VIEW}
    method: GET
- name: prest_users
  endpoint:
    path: /prest/public/prest_users
    method: GET
    data_selector: records
- name: prest_users
  endpoint:
    path: /prest/public/prest_users
    method: GET
    data_selector: records
- name: cache
  endpoint:
    path: /prest/public/my-table
    method: GET
    data_selector: json return (http body)
    params: {}
- name: uncached_table
  endpoint:
    path: /prest/public/my-table-uncached
    method: GET
    data_selector: real time data
    params: {}
- name: Reply
  endpoint:
    path: /prest/public/Reply
    method: GET
    data_selector: records
    params: {}
- name: test
  endpoint:
    path: /prest/public/test
    method: GET
    data_selector: records
    params: {}
- name: testarray
  endpoint:
    path: /prest/public/testarray
    method: GET
    data_selector: records
    params: {}
- name: test2
  endpoint:
    path: /prest/public/test2
    method: GET
    data_selector: records
    params: {}
- name: test3
  endpoint:
    path: /prest/public/test3
    method: GET
    data_selector: records
    params: {}
- name: test4
  endpoint:
    path: /prest/public/test4
    method: GET
    data_selector: records
    params: {}
- name: test5
  endpoint:
    path: /prest/public/test5
    method: GET
    data_selector: records
    params: {}
- name: test_readonly_access
  endpoint:
    path: /prest/public/test_readonly_access
    method: GET
    data_selector: records
    params: {}
- name: test_write_and_delete_access
  endpoint:
    path: /prest/public/test_write_and_delete_access
    method: GET
    data_selector: records
    params: {}
- name: test_list_only_id
  endpoint:
    path: /prest/public/test_list_only_id
    method: GET
    data_selector: records
    params: {}
- name: test6
  endpoint:
    path: /prest/public/test6
    method: GET
    data_selector: records
    params: {}
- name: view_test
  endpoint:
    path: /prest/public/view_test
    method: GET
    data_selector: records
    params: {}
- name: test_group_by_table
  endpoint:
    path: /prest/public/test_group_by_table
    method: GET
    data_selector: records
    params: {}
- name: example_of_powerful
  endpoint:
    path: /awesome_folder/example_of_powerful
    method: GET
    data_selector: result
- name: advanced_queries
  endpoint:
    path: /{DATABASE}/{SCHEMA}/{TABLE}
    method: GET
    data_selector: records
    params: {}
- name: batch_insert
  endpoint:
    path: /batch/{DATABASE}/{SCHEMA}/{TABLE}
    method: POST
    data_selector: records
    params: {}
- name: databases
  endpoint:
    path: /databases
    method: GET
    data_selector: ''
- name: prest_users
  endpoint:
    path: /prest/public/prest_users
    method: GET
    data_selector: ''
    params: {}
- name: auth
  endpoint:
    path: /auth
    method: POST
    data_selector: ''
    params: {}
- name: plugin_endpoint
  endpoint:
    path: /_PLUGIN/{file}/{func}
    method: GET
    data_selector: http_vars
    params: {}
- name: readings
  endpoint:
    path: /prest/public/readings
    method: GET
    data_selector: records
    params: {}
- name: battery_level_by_hour
  endpoint:
    path: /prest/public/battery_level_by_hour
    method: GET
    data_selector: records
    params: {}
- name: yb_servers
  endpoint:
    path: /yugabyte/public/yb_servers
    method: GET
    data_selector: records
notes:
- pRESTd is an open-source API designed to facilitate the development of products
  with SQL databases, focusing primarily on PostgreSQL.
- We are committed to creating a friendly and respectful environment for all participants
- Generate JWT Token with user and password created
- Access endpoint using JWT Token
- Create user and password for API access (via JWT)
- 'if you want to release all origins just use asterisk `*` as the org item, thus:
  `alloworigin = ["*"]`'
- by default the caching system is disabled
- TTL for the cached data is kept for 10 minutes
- Migrations are the prestd's way of propagating database changes (adding a field,
  deleting a model table, bulk data modification, etc.)
- They are designed to be mostly automatic, but you will need to know when to do migrations,
  when to run them, and the common problems you may run into.
- Uses basic authentication with username and password
- Uses query string to apply filtering, sorting, paginating, and etc to api queries.
- Herokuâ€™s free Postgres add-on is automatically provisioned.
- If you are working with prestd on Windows the plugin endpoint will not exist.
- Amazon Redshift is based on PostgreSQL.
- Amazon Redshift and PostgreSQL have a number of very important differences that
  you must be aware of as you design and develop your data warehouse applications.
- All works as with PostgreSQL, with the additional High Availability and Elasticity
  provided by YugabyteDB
errors:
- '500 Internal Server Error: Check server configuration'
- '404 Not Found: Verify endpoint exists'
- '400 Bad Request: Review request parameters'
auth_info:
  mentioned_objects: []
client:
  base_url: http://127.0.0.1:3000
  auth:
    type: oauth2
    flow: jwt
    location: header
    header_name: Authorization
source_metadata: null
