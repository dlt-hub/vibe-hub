resources:
- name: Bento - Send Event
  endpoint:
    path: /send_event
    method: POST
- name: Subscriber Action
  endpoint:
    path: /subscriber_action
    method: POST
- name: Subscriber Update
  endpoint:
    path: /subscriber_update
    method: POST
- name: Bento Transactional
  endpoint:
    path: /send_transactional_email
    method: POST
- name: event_tracking
  endpoint:
    path: /replace_this_with_your_real_site_uuid.js
    method: GET
    data_selector: bento
    params: {}
- name: create_subscriber
  endpoint:
    path: /create_subscriber
    method: POST
    data_selector: subscriber
    params: {}
- name: get_subscriber
  endpoint:
    path: /get_subscriber
    method: GET
    data_selector: subscriber
    params: {}
- name: update_subscriber
  endpoint:
    path: /update_subscriber
    method: PUT
    data_selector: subscriber
    params: {}
- name: track_event
  endpoint:
    path: /track_event
    method: POST
    data_selector: event
    params: {}
- name: send_transactional_email
  endpoint:
    path: /send_transactional_email
    method: POST
    data_selector: email
    params: {}
- name: subscriber_command
  endpoint:
    path: /subscriber_command
    method: POST
    data_selector: command
    params: {}
- name: validate_email
  endpoint:
    path: /validate_email
    method: POST
    data_selector: validation
    params: {}
- name: events
  endpoint:
    path: /batch/events
    method: POST
    data_selector: events
    params:
      site_uuid: siteUuid
- name: sendowl_webhook
  endpoint:
    path: /webhooks/replace_this_with_your_real_site_uuid/sendowl/track
    method: POST
- name: webhook
  endpoint:
    path: /webhooks/replace_this_with_your_real_site_uuid/shift4shop/track
    method: POST
    data_selector: event_data
    params: {}
- name: generic_webhook
  endpoint:
    path: /webhooks/replace_this_with_your_real_site_uuid/generic/track
    method: POST
    data_selector: event_data
- name: subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: response
    params: {}
- name: events
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: response
    params: {}
- name: emails
  endpoint:
    path: /v1/batch/emails
    method: POST
    data_selector: response
    params: {}
- name: track_event
  endpoint:
    path: /v1/batch/events
    method: POST
- name: create_subscriber
  endpoint:
    path: /v1/fetch/subscribers
    method: POST
- name: import_subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
- name: validate_email
  endpoint:
    path: /v1/experimental/validation
    method: POST
- name: execute_command
  endpoint:
    path: /v1/fetch/commands
    method: POST
- name: events
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: result
- name: subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: result
- name: subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: result
- name: events
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: result
- name: fields
  endpoint:
    path: /v1/fetch/fields
    method: POST
    data_selector: field
- name: events
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: result
    params: {}
- name: subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: result
    params: {}
- name: emails
  endpoint:
    path: /v1/batch/emails
    method: POST
    data_selector: result
    params: {}
- name: fields
  endpoint:
    path: /v1/fetch/fields
    method: POST
    data_selector: result
    params: {}
- name: subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: subscribers
- name: events
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: events
- name: emails
  endpoint:
    path: /v1/batch/emails
    method: POST
    data_selector: emails
- name: create_subscriber
  endpoint:
    path: /v1/fetch/subscribers
    method: POST
    data_selector: subscriber
- name: import_subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: subscribers
- name: track_event
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: events
- name: validate_email
  endpoint:
    path: /v1/experimental/validation
    method: POST
    data_selector: validationResult
- name: subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: data
- name: events
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: data
- name: fields
  endpoint:
    path: /v1/fetch/fields
    method: POST
    data_selector: data
- name: subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: subscribers
    params: {}
- name: events
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: events
    params: {}
- name: emails
  endpoint:
    path: /v1/batch/emails
    method: POST
    data_selector: emails
    params: {}
- name: events
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: records
- name: commands
  endpoint:
    path: /v1/fetch/commands
    method: POST
- name: subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
- name: validation
  endpoint:
    path: /v1/experimental/validation
    method: POST
- name: add_subscriber
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: records
- name: track_event
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: records
- name: import_subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: records
- name: send_transactional_emails
  endpoint:
    path: /v1/batch/emails
    method: POST
    data_selector: records
- name: subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: subscribers
    params: {}
- name: events
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: events
    params: {}
- name: emails
  endpoint:
    path: /v1/batch/emails
    method: POST
    data_selector: emails
    params: {}
- name: batch_events
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: data
    params: {}
- name: commands_add_field
  endpoint:
    path: /v1/fetch/commands
    method: POST
    data_selector: data
    params: {}
- name: batch_import_subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: data
    params: {}
- name: experimental_validate_email
  endpoint:
    path: /v1/experimental/validation
    method: POST
    data_selector: data
    params: {}
- name: subscriber
  endpoint:
    path: /v1/fetch/subscribers
    method: POST
    data_selector: subscriber
- name: event
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: events
- name: events
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: events
- name: subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: subscribers
- name: subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: subscribers
- name: events
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: events
- name: events
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: events
    params: {}
- name: subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: subscribers
    params: {}
- name: transactional_emails
  endpoint:
    path: /v1/batch/emails
    method: POST
    data_selector: emails
    params: {}
- name: fetch_subscribers
  endpoint:
    path: /v1/fetch/subscribers
    method: POST
    data_selector: subscribers
- name: batch_events
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: events
- name: import_subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: subscribers
- name: create_field
  endpoint:
    path: /v1/fetch/fields
    method: POST
    data_selector: fields
- name: validate_email
  endpoint:
    path: /v1/experimental/validation
    method: POST
    data_selector: validation
- name: transactional_email
  endpoint:
    path: /v1/batch/emails
    method: POST
    data_selector: results
    params: {}
- name: subscribe_event
  endpoint:
    path: /v1/batch/events
    method: POST
    data_selector: results
    params: {}
- name: import_subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: results
    params: {}
- name: import_subscribers
  endpoint:
    path: /v1/batch/subscribers
    method: POST
    data_selector: data
    params: {}
- name: search_subscribers
  endpoint:
    path: /v1/fetch/search
    method: GET
    data_selector: data
    params: {}
- name: find_subscriber
  endpoint:
    path: /v1/fetch/subscribers
    method: GET
    data_selector: data
    params: {}
- name: create_subscriber
  endpoint:
    path: /v1/fetch/subscribers
    method: POST
    data_selector: data
    params: {}
- name: run_command
  endpoint:
    path: /v1/fetch/commands
    method: POST
    data_selector: data
    params: {}
notes:
- Consent is absolutely required! Keep the consent on file (in Bento or elsewhere)
  for at least the statute of limitations under applicable SMS marketing laws (e.g.,
  four years under the TCPA).
- Explicit written consent before sending marketing messages.
- Keep your API keys secure and never expose them in client-side code.
- If you use a separate bento site for testing use that site uuid.
- An approved Bento account is required
- A ClickFunnels account is required
- Keep your API credentials secure and never share your secret key or include it in
  version control.
- You must choose between a source or destination function.
- The bento destination will be an option under Custom Destinations.
- Make sure the state is set to enabled for the webhook
- Webhook URL requires substitution of site_uuid
- Format selected must be json
- When purchase events happen inside stripe, those events are forwarded to Bento in
  the form of a webhook.
- Bento does not offer SMTP server support
- Always install and test the Bento plugin on a development or staging site before
  using it in production.
- Transactional Emails are supported by Bento and is designed for low volume transactional
  emails.
- Zapier does not validate the keys, so if you enter the wrong keys you will not be
  able to connect.
- Webhook URL must match exactly to avoid silent failures.
- No support for email attachments
- Not designed for bulk email sending
- No support for no-reply addresses
- Though the API supports up to 1,000 subscribers per call, we recommend batches of
  200-300 for optimal performance when dealing with extensive data.
- The Command API is not recommended for multiple updates or bulk operations. Given
  its heavy rate limit, use the Batch API instead.
- Use batch operations for efficiency when integrating with Bento.
- Can include up to 1,000 subscribers per request
- 'Not Authorized: Check your API keys and ensure they have appropriate permissions'
- 'Rate Limited: Implement backoff/retry logic for batch operations'
- 'Network Errors: Check internet connectivity and API endpoint availability'
- 'Exceptions: Double check you are using a valid `Author` & the payload format.'
- Preferred method to add subscribers is via events.
- This endpoint is rate-limited and not suitable for loops or bulk creation.
- Though the API supports up to 1,000 subscribers per call, we recommend batches of
  200-300 for optimal performance.
- 'Client-Side Only: This SDK is designed for browser environments.'
- Recommended to use events for adding subscribers to trigger workflows.
- Batch operations are suggested for efficiency.
- Bento supports importing up to 1,000 subscribers at once, but it's recommended to
  use smaller batches for performance.
- You can find your keys in your Bento Team Settings. Click Your Private API Keys
  and generate a key set if needed.
- The recommended way to create subscribers is via events.
- For optimal performance, batch imports of 200-300 subscribers are suggested.
- The Command API is not recommended for multiple updates or bulk operations.
- Check your API keys and ensure they have appropriate permissions
- Implement backoff/retry logic for batch operations
- Check internet connectivity and API endpoint availability
- Double check you are using a valid `Author` & the payload format.
- The API supports up to 1,000 subscribers per call, but batches of 200-300 are recommended
  for optimal performance.
- Best practices recommend batches of 200-300 for optimal performance when dealing
  with extensive data.
- The batch import performs an 'upsert' operation – it creates subscribers that don't
  exist and updates those that do.
- Email sending not implemented in current SDK
- Batch imports should be kept to 200-300 for optimal performance
errors:
- 'Messages Not Sending: Verify provider credentials, Check webhook configuration,
  Confirm consent status.'
- 'Authentication errors: Check API keys and permissions.'
- 'Validation errors: Verify input data format.'
- 'Network errors: Check connectivity and API status.'
- 'Rate limiting: Implement appropriate delays.'
- 'Authentication Failed: Verify your API credentials are correct and active'
- 'Invalid API Key: Confirm your Secret Key hasn''t been regenerated'
- Failed with 5xx
- Failed with 429
- 'Not Authorized: Check your API keys and ensure they have appropriate permissions'
- 'Rate Limited: Implement backoff/retry logic for batch operations'
- 'Network Errors: Check internet connectivity and API endpoint availability'
- 'Exceptions: Double check you are using a valid `Author` & the payload format.'
- 'RATE_LIMIT_EXCEEDED: Reduce the number of requests per minute.'
- 'INVALID_EMAIL: Check the email format.'
- Not Authorized
- Rate Limited
- Network Errors
- Exceptions
- '400 Bad Request: Check the request format and required fields.'
- '401 Unauthorized: Verify your keys and permissions.'
- '429 Too Many Requests: Rate limit exceeded, reduce request frequency.'
auth_info:
  mentioned_objects:
  - ImportSubscribersData
  - EventData
  - CreateSubscriberData
  - OauthToken
  - AuthProvider
client:
  base_url: https://app.bentonow.com
source_metadata: null
