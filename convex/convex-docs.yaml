resources:
- name: users
  endpoint:
    path: /tables/users
    method: POST
- name: todos
  endpoint:
    path: /tables/todos
    method: POST
- name: database_functions
  endpoint:
    path: /api/functions
    method: GET
    data_selector: functions
- name: database
  endpoint:
    path: /database
    method: GET
- name: realtime
  endpoint:
    path: /realtime
    method: GET
- name: schema
  endpoint:
    path: /schema
    method: GET
- name: functions
  endpoint:
    path: /functions
    method: GET
- name: realtime_database
  endpoint:
    method: GraphQL
- name: agent
  endpoint:
    path: /agents
    method: POST
- name: workflow
  endpoint:
    path: /workflow
    method: POST
- name: AI_code_generation
  endpoint:
    method: POST
- name: server
  endpoint:
    path: /convex/server
- name: react
  endpoint:
    path: /convex/react
- name: browser
  endpoint:
    path: /convex/browser
- name: values
  endpoint:
    path: /convex/values
- name: react-auth0
  endpoint:
    path: /convex/react-auth0
- name: react-clerk
  endpoint:
    path: /convex/react-clerk
- name: convex-cli
  endpoint:
    path: /convex
- name: subscribe_workouts
  endpoint:
    path: /workouts:get
    method: GET
    data_selector: result
    params:
      favoriteColors:
      - blue
      - red
- name: subscribe_users
  endpoint:
    path: /users:list
    method: GET
    data_selector: result
    params:
      favoriteColors:
      - blue
      - red
- name: mutation
  endpoint:
    method: POST
- name: action
  endpoint:
    method: POST
- name: messages_list_all
  endpoint:
    path: /messages/listAll
    method: GET
    data_selector: body
- name: messages_send_anon
  endpoint:
    path: /messages/sendAnon
    method: POST
    data_selector: body
- name: counter_get
  endpoint:
    path: /counter/get
    method: GET
    data_selector: count
- name: messages_list
  endpoint:
    path: /messages/list
    method: GET
    data_selector: body
- name: messages_send
  endpoint:
    path: /messages/send
    method: POST
    data_selector: body
- name: open_api_spec
  endpoint:
    path: /open-api-spec
    method: GET
- name: useQuery
  endpoint:
    path: /_generated/api.js
    method: GET
- name: myQuery
  endpoint:
    path: api.functions.myQuery
    method: GET
- name: doSomething
  endpoint:
    path: api.functions.doSomething
    method: POST
- name: doSomeAction
  endpoint:
    path: api.functions.doSomeAction
    method: POST
- name: colors_subscription
  endpoint:
    path: /subscribe
    method: POST
    data_selector: colors
    params:
      onlyFavorites: true
- name: mutation
  endpoint:
    method: POST
    data_selector: data
- name: action
  endpoint:
    method: POST
    data_selector: data
- name: messages_list
  endpoint:
    path: /api/messages/list
    method: GET
- name: my_query
  endpoint:
    path: /api/functions/myQuery
    method: GET
    params:
      id: 123
- name: do_something
  endpoint:
    path: /api/functions/doSomething
    method: POST
- name: Durable Functions
  endpoint:
    path: /durable-functions
    method: GET
- name: Workpool
  endpoint:
    path: /workpool
    method: GET
- name: Crons
  endpoint:
    path: /crons
    method: GET
- name: Sharded Counter
  endpoint:
    path: /sharded-counter
    method: GET
- name: Migrations
  endpoint:
    path: /migrations
    method: GET
- name: Aggregate
  endpoint:
    path: /aggregate
    method: GET
- name: Geospatial
  endpoint:
    path: /geospatial
    method: GET
- name: Cloudflare R2
  endpoint:
    path: /cloudflare-r2
    method: GET
- name: Collaborative Text Editor Sync
  endpoint:
    path: /collaborative-text-editor-sync
    method: GET
- name: Expo Push Notifications
  endpoint:
    path: /expo-push-notifications
    method: GET
- name: Twilio SMS
  endpoint:
    path: /twilio-sms
    method: GET
- name: LaunchDarkly Feature Flags
  endpoint:
    path: /launchdarkly-feature-flags
    method: GET
- name: Polar
  endpoint:
    path: /polar
    method: GET
- name: AI Agent
  endpoint:
    path: /ai-agent
    method: GET
- name: Persistent Text Streaming
  endpoint:
    path: /persistent-text-streaming
    method: GET
- name: Rate Limiter
  endpoint:
    path: /rate-limiter
    method: GET
- name: Action Cache
  endpoint:
    path: /action-cache
    method: GET
- name: queries
  endpoint:
    method: GET
- name: mutations
  endpoint:
    method: GET
- name: actions
  endpoint:
    method: GET
- name: query
  endpoint:
    path: /api/query
    method: POST
    data_selector: value
    params:
      format: json
      path: messages:list
      args: {}
- name: mutation
  endpoint:
    path: /api/mutation
    method: POST
    data_selector: value
    params:
      format: json
      path: messages:list
      args: {}
- name: action
  endpoint:
    path: /api/action
    method: POST
    data_selector: value
    params:
      format: json
      path: messages:list
      args: {}
- name: function_call
  endpoint:
    path: /api/run/{functionIdentifier}
    method: POST
    data_selector: value
    params:
      format: json
- name: json_schemas
  endpoint:
    path: /api/json_schemas
    method: GET
    data_selector: $description
    params:
      deltaSchema: false
      format: json
- name: list_snapshot
  endpoint:
    path: /api/list_snapshot
    method: GET
    data_selector: values
    params:
      snapshot: null
      cursor: null
      tableName: null
      format: json
- name: document_deltas
  endpoint:
    path: /api/document_deltas
    method: GET
    data_selector: values
    params:
      cursor: '{{ dlt.secrets[''delta_cursor''] }}'
      tableName: null
      format: json
- name: primary_key_indexes_ready
  endpoint:
    path: /api/streaming_import/primary_key_indexes_ready
    method: GET
- name: add_primary_key_indexes
  endpoint:
    path: /api/streaming_import/add_primary_key_indexes
    method: PUT
- name: primary_key_indexes_ready
  endpoint:
    path: /api/streaming_import/primary_key_indexes_ready
    method: GET
- name: clear_tables
  endpoint:
    path: /api/streaming_import/clear_tables
    method: PUT
- name: import_airbyte_records
  endpoint:
    path: /api/streaming_import/import_airbyte_records
    method: POST
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
- name: tasks
  endpoint:
    path: /tasks
    method: GET
- name: tasks
  endpoint:
    path: /api/tasks/get
    method: GET
    data_selector: tasks
- name: tasks
  endpoint:
    path: /convex/tasks.js
    method: POST
    data_selector: data
- name: tasks
  endpoint:
    path: /tasks:get
    method: GET
    data_selector: data
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
- name: tasks
  endpoint:
    path: /api/tasks.get
    method: POST
    data_selector: data
- name: tasks
  endpoint:
    path: /api/tasks.get
    method: GET
- name: tasks
  endpoint:
    path: /tasks:get
    method: POST
    data_selector: result
- name: tasks
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: tasks
- name: tasks
  endpoint:
    path: /convex/tasks.ts
    method: GET
    data_selector: data
- name: tasks
  endpoint:
    path: /tasks:get
    method: GET
    data_selector: todos
- name: tasks
  endpoint:
    path: /convex/tasks.ts
    method: GET
    data_selector: data
    params: {}
- name: tasks
  endpoint:
    path: /api/tasks/get
    method: GET
    data_selector: data
- name: vector_search
  endpoint:
    path: /search/vector
    method: GET
- name: full_text_search
  endpoint:
    path: /search/fulltext
    method: GET
- name: convex_actions
  endpoint:
    path: /actions
    method: GET
- name: tasks
  endpoint:
    path: /convex/query
    method: POST
    data_selector: tasks
- name: tasks_update
  endpoint:
    path: /convex/mutation
    method: POST
    data_selector: tasks
notes:
- Convex Auth is still in beta, which may lead to API changes based on user feedback.
- Convex allows schema-free operations initially but supports schema enforcement when
  needed
- Real-time updates without needing to manage complex security configurations
- Convex uses a custom transactional document store
- Realtime capabilities are built-in with automatic function subscriptions
- Uses TypeScript for schema inference and autocompletion
- Uses PostgreSQL as the backing store
- Realtime capabilities are provided through Realtime server containers
- SQL support and requires managing a SQL schema
- Durable execution ensures workflows are maintained even after server restarts
- Real-time state management for agent progress updates
- Built-in persistence for storing conversation history and agent states
- Supports parallel processing of multiple agent tasks
- Robust error handling with retry mechanisms
- TypeScript/JavaScript client libraries and CLI for Convex
- Convex is a backend application platform
- Convex Auth is currently in beta and may change in backward-incompatible ways
- Requires manual substitution of <your domain here> with actual domain in base_url
- Uses Kotlin serialization; ensure proper handling of private fields and reserved
  keywords
- OpenAPI specification generation is in beta and may have limitations or require
  adjustments based on feedback
- Uses ConvexClient for establishing connection with backend
- Supports real-time data subscriptions for iOS and macOS using Swift
- Manages connection lifecycle within the app's process
- Integrates via Swift package manager with dependency on convex-swift GitHub repository
- Supports asynchronous operations using async method
- Requires handling specific exceptions like ConvexError and ServerError
- 'Beta feature: TanStack Query adapter.'
- Currently only supports React Query.
- Data provided by Convex is never stale
- Retry-related options are ignored
- Refetch-related options are ignored
- CLI tool for managing Convex projects and functions
- Components are isolated environments that cannot access data unless explicitly passed
  in.
- Components are installed as independent npm libraries.
- Requires GitHub login for setup
- Development environment URL needed for ConvexClient
- Requires GitHub authentication for project setup
- Node.js project setup involves creating a new directory and initializing npm
- Convex client and server libraries are used
- Requires setup of `.env` files for configuration management
- Requires GitHub login for setting up development environment
- Integration requires React Native environment setup
- The Convex setup requires a GitHub login to create and manage projects.
- Provides a development environment that syncs backend API functions with a cloud
  deployment.
- Requires setup with GitHub for dev deployment
- Uses npx commands for setup and data import
- Requires Convex client and server libraries; uses Tokio runtime
- Uses npm package for client setup and requires JavaScript environment
- Requires Svelte 5 for optimal compatibility
- Customization of the functionsDir is necessary for Convex integration
- TanStack Start is currently in beta, expect breaking changes before a stable release
- Requires setup with npm and Convex packages
- Integration uses React Query and TanStack routing enhancements
- Uses npm commands for project setup and library installation
- Dev deployment is synced with backend API functions
- Vector Search uses vector embeddings to calculate similarity
- Full Text Search supports prefix matching and is reactive
- Sign into Convex with GitHub to authenticate and setup the project
- Convex uses TypeScript for database queries and mutations
- No SQL or ORM required; uses document-relational model
- ACID-compliant with serializable isolation and optimistic concurrency control
errors:
- Common database failures: Managed internally by Convex
- 401 Unauthorized: Check authentication credentials or token validity
- General API failure: Implement retry mechanisms as described
- ConvexError: Handle in application as appropriate
- ServerError: Handle in application as appropriate
- ConvexError: Handle specific error cases in application logic
- WRITE_CONFLICT:
  - Consider using indexed queries with selective index range expressions
  - Avoid calling a mutation an unexpected number of times, especially from within
    loops
  - Design data models to avoid frequent writes to the same document
- 401 Unauthorized: Check GitHub authentication or token validity
- 401 Unauthorized: Recheck GitHub OAuth scopes or token expiration
- 401 Unauthorized: Check GitHub OAuth or Convex permissions
- General Error: Check the Convex client setup and data query functions
- 'missing envar VITE_CONVEX_URL: Ensure environment variable VITE_CONVEX_URL is set'
- loading...: UI displays this message when data is being loaded
auth_info:
  mentioned_objects:
  - Auth.js
  - Scrypt
  - AuthProvider
  - NativeAuth
  - JWT
  - OpenID Connect
  - ConvexClientWithAuth
  - npm library
  - ConvexProvider
  - ConvexReactClient
  - ConvexClient
  - ConvexQueryClient
  - GitHub account for authentication
client:
  auth:
    type: oauth2
    location: header
    header_name: Authorization
    flow: jwt
    token_url: https://github.com/login/oauth/access_token
  base_url: https://convex.dev
  headers:
    Accept: application/json
    Content-Type: application/json
    Convex-Client: streaming-import-<version>
  paginator:
    default_page_size: 300000
    type: cursor
    cursor_path: cursor
source_metadata: null
