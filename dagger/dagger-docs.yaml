resources:
- name: cacheVolume
  endpoint:
    path: /cacheVolume
    method: GET
    data_selector: id
    params: {}
- name: cloud
  endpoint:
    path: /cloud
    method: GET
    data_selector: ''
    params: {}
- name: container
  endpoint:
    path: /container
    method: GET
    data_selector: ''
    params: {}
- name: currentFunctionCall
  endpoint:
    path: /currentFunctionCall
    method: GET
    data_selector: ''
    params: {}
- name: currentModule
  endpoint:
    path: /currentModule
    method: GET
    data_selector: ''
    params: {}
- name: currentTypeDefs
  endpoint:
    path: /currentTypeDefs
    method: GET
    data_selector: ''
    params: {}
- name: defaultPlatform
  endpoint:
    path: /defaultPlatform
    method: GET
    data_selector: ''
    params: {}
- name: directory
  endpoint:
    path: /directory
    method: GET
    data_selector: ''
    params: {}
- name: engine
  endpoint:
    path: /engine
    method: GET
    data_selector: ''
    params: {}
- name: env
  endpoint:
    path: /env
    method: GET
    data_selector: ''
    params: {}
- name: error
  endpoint:
    path: /error
    method: POST
    data_selector: ''
    params: {}
- name: file
  endpoint:
    path: /file
    method: POST
    data_selector: ''
    params: {}
- name: function
  endpoint:
    path: /function
    method: POST
    data_selector: ''
    params: {}
- name: generatedCode
  endpoint:
    path: /generatedCode
    method: POST
    data_selector: ''
    params: {}
- name: git
  endpoint:
    path: /git
    method: GET
    data_selector: ''
    params: {}
- name: host
  endpoint:
    path: /host
    method: GET
    data_selector: ''
    params: {}
- name: http
  endpoint:
    path: /http
    method: GET
    data_selector: ''
    params: {}
- name: json
  endpoint:
    path: /json
    method: POST
    data_selector: ''
    params: {}
- name: llm
  endpoint:
    path: /llm
    method: POST
    data_selector: ''
    params: {}
- name: Binding
  endpoint:
    path: /loadBindingFromID
    method: GET
    data_selector: Binding
    params: {}
- name: CacheVolume
  endpoint:
    path: /loadCacheVolumeFromID
    method: GET
    data_selector: CacheVolume
    params: {}
- name: Cloud
  endpoint:
    path: /loadCloudFromID
    method: GET
    data_selector: Cloud
    params: {}
- name: Container
  endpoint:
    path: /loadContainerFromID
    method: GET
    data_selector: Container
    params: {}
- name: CurrentModule
  endpoint:
    path: /loadCurrentModuleFromID
    method: GET
    data_selector: CurrentModule
    params: {}
- name: Directory
  endpoint:
    path: /loadDirectoryFromID
    method: GET
    data_selector: Directory
    params: {}
- name: EngineCacheEntry
  endpoint:
    path: /loadEngineCacheEntryFromID
    method: GET
    data_selector: EngineCacheEntry
    params: {}
- name: EngineCacheEntrySet
  endpoint:
    path: /loadEngineCacheEntrySetFromID
    method: GET
    data_selector: EngineCacheEntrySet
    params: {}
- name: EngineCache
  endpoint:
    path: /loadEngineCacheFromID
    method: GET
    data_selector: EngineCache
    params: {}
- name: Engine
  endpoint:
    path: /loadEngineFromID
    method: GET
    data_selector: Engine
    params: {}
- name: EnumTypeDef
  endpoint:
    path: /loadEnumTypeDefFromID
    method: GET
    data_selector: EnumTypeDef
    params: {}
- name: EnumValueTypeDef
  endpoint:
    path: /loadEnumValueTypeDefFromID
    method: GET
    data_selector: EnumValueTypeDef
    params: {}
- name: Env
  endpoint:
    path: /loadEnvFromID
    method: GET
    data_selector: Env
    params: {}
- name: EnvVariable
  endpoint:
    path: /loadEnvVariableFromID
    method: GET
    data_selector: EnvVariable
    params: {}
- name: Error
  endpoint:
    path: /loadErrorFromID
    method: GET
    data_selector: Error
    params: {}
- name: ErrorValue
  endpoint:
    path: /loadErrorValueFromID
    method: GET
    data_selector: ErrorValue
    params: {}
- name: FieldTypeDef
  endpoint:
    path: /loadFieldTypeDefFromID
    method: GET
    data_selector: FieldTypeDef
    params: {}
- name: File
  endpoint:
    path: /loadFileFromID
    method: GET
    data_selector: File
    params: {}
- name: FunctionArg
  endpoint:
    path: /loadFunctionArgFromID
    method: GET
    data_selector: FunctionArg
    params: {}
- name: FunctionCallArgValue
  endpoint:
    path: /loadFunctionCallArgValueFromID
    method: GET
    data_selector: FunctionCallArgValue
    params: {}
- name: FunctionCall
  endpoint:
    path: /loadFunctionCallFromID
    method: GET
    data_selector: FunctionCall
    params: {}
- name: Function
  endpoint:
    path: /loadFunctionFromID
    method: GET
    data_selector: Function
    params: {}
- name: GeneratedCode
  endpoint:
    path: /loadGeneratedCodeFromID
    method: GET
    data_selector: GeneratedCode
    params: {}
- name: GitRef
  endpoint:
    path: /loadGitRefFromID
    method: GET
    data_selector: GitRef
    params: {}
- name: GitRepository
  endpoint:
    path: /loadGitRepositoryFromID
    method: GET
    data_selector: GitRepository
    params: {}
- name: Host
  endpoint:
    path: /loadHostFromID
    method: GET
    data_selector: Host
    params: {}
- name: InputTypeDef
  endpoint:
    path: /loadInputTypeDefFromID
    method: GET
    data_selector: InputTypeDef
    params: {}
- name: InterfaceTypeDef
  endpoint:
    path: /loadInterfaceTypeDefFromID
    method: GET
    data_selector: InterfaceTypeDef
    params: {}
- name: JSONValue
  endpoint:
    path: /loadJSONValueFromID
    method: GET
    data_selector: JSONValue
    params: {}
- name: LLM
  endpoint:
    path: /loadLLMFromID
    method: GET
    data_selector: LLM
    params: {}
- name: LLMTokenUsage
  endpoint:
    path: /loadLLMTokenUsageFromID
    method: GET
    data_selector: LLMTokenUsage
    params: {}
- name: Label
  endpoint:
    path: /loadLabelFromID
    method: GET
    data_selector: Label
    params: {}
- name: ListTypeDef
  endpoint:
    path: /loadListTypeDefFromID
    method: GET
    data_selector: ListTypeDef
    params: {}
- name: ModuleConfigClient
  endpoint:
    path: /loadModuleConfigClientFromID
    method: GET
    data_selector: ModuleConfigClient
    params: {}
- name: Module
  endpoint:
    path: /loadModuleFromID
    method: GET
    data_selector: Module
    params: {}
- name: ModuleSource
  endpoint:
    path: /loadModuleSourceFromID
    method: GET
    data_selector: ModuleSource
    params: {}
- name: ObjectTypeDef
  endpoint:
    path: /loadObjectTypeDefFromID
    method: GET
    data_selector: ObjectTypeDef
    params: {}
- name: Port
  endpoint:
    path: /loadPortFromID
    method: GET
    data_selector: Port
    params: {}
- name: SDKConfig
  endpoint:
    path: /loadSDKConfigFromID
    method: GET
    data_selector: SDKConfig
    params: {}
- name: ScalarTypeDef
  endpoint:
    path: /loadScalarTypeDefFromID
    method: GET
    data_selector: ScalarTypeDef
    params: {}
- name: SearchResult
  endpoint:
    path: /loadSearchResultFromID
    method: GET
    data_selector: SearchResult
    params: {}
- name: SearchSubmatch
  endpoint:
    path: /loadSearchSubmatchFromID
    method: GET
    data_selector: SearchSubmatch
    params: {}
- name: Secret
  endpoint:
    path: /loadSecretFromID
    method: GET
    data_selector: Secret
    params: {}
- name: Service
  endpoint:
    path: /loadServiceFromID
    method: GET
    data_selector: Service
    params: {}
- name: Socket
  endpoint:
    path: /loadSocketFromID
    method: GET
    data_selector: Socket
    params: {}
- name: SourceMap
  endpoint:
    path: /loadSourceMapFromID
    method: GET
    data_selector: SourceMap
    params: {}
- name: Terminal
  endpoint:
    path: /loadTerminalFromID
    method: GET
    data_selector: Terminal
    params: {}
- name: TypeDef
  endpoint:
    path: /loadTypeDefFromID
    method: GET
    data_selector: TypeDef
    params: {}
- name: CacheVolume
  endpoint:
    path: /CacheVolume
    method: GET
    data_selector: id
    params: {}
- name: Cloud
  endpoint:
    path: /Cloud
    method: GET
    data_selector: id
    params: {}
- name: asService
  endpoint:
    path: /Container/asService
    method: POST
- name: asTarball
  endpoint:
    path: /Container/asTarball
    method: POST
- name: build
  endpoint:
    path: /Container/build
    method: POST
- name: combinedOutput
  endpoint:
    path: /Container/combinedOutput
    method: GET
- name: defaultArgs
  endpoint:
    path: /Container/defaultArgs
    method: GET
- name: directory
  endpoint:
    path: /Container/directory
    method: GET
- name: entrypoint
  endpoint:
    path: /Container/entrypoint
    method: GET
- name: envVariable
  endpoint:
    path: /Container/envVariable
    method: GET
- name: exists
  endpoint:
    path: /Container/exists
    method: GET
- name: exitCode
  endpoint:
    path: /Container/exitCode
    method: GET
- name: experimentalWithAllGPUs
  endpoint:
    path: /Container/experimentalWithAllGPUs
    method: POST
- name: experimentalWithGPU
  endpoint:
    path: /Container/experimentalWithGPU
    method: POST
- name: export
  endpoint:
    path: /Container/export
    method: POST
- name: exportImage
  endpoint:
    path: /Container/exportImage
    method: POST
- name: exposedPorts
  endpoint:
    path: /Container/exposedPorts
    method: GET
- name: file
  endpoint:
    path: /Container/file
    method: GET
- name: from
  endpoint:
    path: /Container/from
    method: POST
- name: id
  endpoint:
    path: /Container/id
    method: GET
- name: imageRef
  endpoint:
    path: /Container/imageRef
    method: GET
- name: import
  endpoint:
    path: /Container/import
    method: POST
- name: label
  endpoint:
    path: /Container/label
    method: GET
- name: labels
  endpoint:
    path: /Container/labels
    method: GET
- name: mounts
  endpoint:
    path: /Container/mounts
    method: GET
- name: platform
  endpoint:
    path: /Container/platform
    method: GET
- name: publish
  endpoint:
    path: /Container/publish
    method: POST
- name: rootfs
  endpoint:
    path: /Container/rootfs
    method: GET
- name: stderr
  endpoint:
    path: /Container/stderr
    method: GET
- name: stdout
  endpoint:
    path: /Container/stdout
    method: GET
- name: sync
  endpoint:
    path: /Container/sync
    method: POST
- name: terminal
  endpoint:
    path: /Container/terminal
    method: POST
- name: up
  endpoint:
    path: /Container/up
    method: POST
- name: user
  endpoint:
    path: /Container/user
    method: GET
- name: withAnnotation
  endpoint:
    path: /Container/withAnnotation
    method: POST
- name: withDefaultArgs
  endpoint:
    path: /Container/withDefaultArgs
    method: POST
- name: withDefaultTerminalCmd
  endpoint:
    path: /Container/withDefaultTerminalCmd
    method: POST
- name: withDirectory
  endpoint:
    path: /Container/withDirectory
    method: POST
- name: withEntrypoint
  endpoint:
    path: /Container/withEntrypoint
    method: POST
- name: withEnvVariable
  endpoint:
    path: /Container/withEnvVariable
    method: POST
- name: withExec
  endpoint:
    path: /Container/withExec
    method: POST
- name: withExposedPort
  endpoint:
    path: /withExposedPort
    method: GET
    data_selector: Container!
    params:
      port: Int!
      protocol: NetworkProtocol
      description: String
      experimentalSkipHealthcheck: Boolean
- name: withFile
  endpoint:
    path: /withFile
    method: GET
    data_selector: Container!
    params:
      path: String!
      source: FileID!
      permissions: Int
      owner: String
      expand: Boolean
- name: withMountedCache
  endpoint:
    path: /withMountedCache
    method: GET
    data_selector: Container!
    params:
      path: String!
      cache: CacheVolumeID!
      source: DirectoryID
      sharing: CacheSharingMode
      owner: String
      expand: Boolean
- name: withMountedDirectory
  endpoint:
    path: /withMountedDirectory
    method: GET
    data_selector: Container!
    params:
      path: String!
      source: DirectoryID!
      owner: String
      expand: Boolean
- name: withRegistryAuth
  endpoint:
    path: /withRegistryAuth
    method: GET
    data_selector: Container!
    params:
      address: String!
      username: String!
      secret: SecretID!
- name: withSymlink
  endpoint:
    path: /withSymlink
    method: GET
    data_selector: Container!
    params:
      target: String!
      linkName: String!
      expand: Boolean
- name: CurrentModule
  endpoint:
    path: /CurrentModule
    method: GET
    data_selector: records
    params: {}
- name: Directory
  endpoint:
    path: /Directory
    method: GET
    data_selector: records
    params: {}
- name: Engine
  endpoint:
    path: /Engine
    method: GET
    data_selector: records
    params: {}
- name: Env
  endpoint:
    path: /Env
    method: GET
    data_selector: records
    params: {}
- name: EnvVariable
  endpoint:
    path: /EnvVariable
    method: GET
    data_selector: records
    params: {}
- name: Error
  endpoint:
    path: /Error
    method: GET
    data_selector: records
    params: {}
- name: contents
  endpoint:
    path: /File/contents
    method: GET
    data_selector: contents
    params: {}
- name: digest
  endpoint:
    path: /File/digest
    method: GET
    data_selector: digest
    params:
      excludeMetadata: false
- name: export
  endpoint:
    path: /File/export
    method: POST
    data_selector: export
    params:
      path: output.txt
      allowParentDirPath: false
- name: id
  endpoint:
    path: /File/id
    method: GET
    data_selector: id
    params: {}
- name: name
  endpoint:
    path: /File/name
    method: GET
    data_selector: name
    params: {}
- name: search
  endpoint:
    path: /File/search
    method: GET
    data_selector: search
    params: {}
- name: size
  endpoint:
    path: /File/size
    method: GET
    data_selector: size
    params: {}
- name: sync
  endpoint:
    path: /File/sync
    method: POST
    data_selector: sync
    params: {}
- name: withName
  endpoint:
    path: /File/withName
    method: GET
    data_selector: withName
    params: {}
- name: withReplaced
  endpoint:
    path: /File/withReplaced
    method: GET
    data_selector: withReplaced
    params: {}
- name: withTimestamps
  endpoint:
    path: /File/withTimestamps
    method: GET
    data_selector: withTimestamps
    params: {}
- name: compression_algorithms
  endpoint:
    path: /path/to/compression_algorithms
    method: GET
    data_selector: algorithms
    params: {}
- name: dagger_installation
  endpoint:
    path: /install.sh
    method: GET
    data_selector: installation
    params: {}
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: records
    params: {}
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: records
    params: {}
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: records
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: repository
    params: {}
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: repository
    params: {}
- name: mount_file
  endpoint:
    path: /mount-file
    method: POST
    data_selector: file
    params: {}
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: file
    params: {}
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: container
    params:
      source: source
      exclude: exclude
- name: read_file_http
  endpoint:
    path: /read-file-http
    method: POST
    data_selector: container
    params:
      url: url
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: void
    params:
      source: source
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: records
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: records
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: records
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: records
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: records
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: container
    params:
      repository: https://github.com/dagger/dagger
      ref: 196f232a4d6b2d1d3db5f5e040cf20b6a76a76c5
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: container
    params:
      source: foo.txt
- name: foo
  endpoint:
    path: /foo
    method: GET
    data_selector: entries
    params: {}
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: address
    params: {}
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: results
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: results
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: results
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: results
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: results
- name: clone_repository
  endpoint:
    path: /clone
    method: POST
    data_selector: repository
    params:
      repository: https://github.com/dagger/dagger
      ref: 196f232a4d6b2d1d3db5f5e040cf20b6a76a76c5
- name: mount_file
  endpoint:
    path: /mount-file
    method: POST
    data_selector: file
    params:
      f: /home/admin/archives.zip
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: file
    params:
      f: /home/admin/archives.zip
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: foo.txt
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: src
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: src
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: directory
    params: {}
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: directory
    params: {}
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: directory
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: repository
    params: {}
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: repository
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: result
- name: mount_file
  endpoint:
    path: /mount-file
    method: POST
    data_selector: result
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: result
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: result
- name: read_file_http
  endpoint:
    path: /read-file-http
    method: POST
    data_selector: result
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: result
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: result
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: result
- name: multi-platform image
  endpoint:
    path: /build/multi-platform/image
    method: POST
    data_selector: imageDigest
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: result
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: result
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: result
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: result
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: result
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: repository
    params:
      repository: https://github.com/dagger/dagger
      ref: 196f232a4d6b2d1d3db5f5e040cf20b6a76a76c5
- name: mount_file
  endpoint:
    path: /mount-file
    method: POST
    data_selector: file
    params:
      f: /home/admin/archives.zip
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: file
    params:
      f: /home/admin/archives.zip
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: result
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: result
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: result
- name: platform
  endpoint:
    path: /platforms
    method: GET
    data_selector: platforms
    params: {}
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: directory
    params: {}
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: directory
    params: {}
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: directory
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: repository
    params: {}
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: repository
    params: {}
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: container
    params: {}
- name: read_file_http
  endpoint:
    path: /read-file-http
    method: POST
    data_selector: container
    params: {}
- name: mount_file
  endpoint:
    path: /mount-file
    method: POST
    data_selector: container
    params: {}
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: container
    params: {}
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: result
    params:
      source: ../data.json
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: result
    params:
      source: ../docs
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: result
    params:
      src: https://github.com/golang/example#master:hello
- name: platform
  endpoint:
    path: /platforms
    method: GET
    data_selector: platforms
    params: {}
- name: MyModule
  endpoint:
    path: /src/custom.Dockerfile
    method: POST
    data_selector: ref
    params: {}
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: response
    params: {}
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: response
    params: {}
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: response
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: response
    params: {}
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: response
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: repository
    params:
      repository: https://github.com/dagger/dagger
      ref: 196f232a4d6b2d1d3db5f5e040cf20b6a76a76c5
- name: mount_file
  endpoint:
    path: /mount-file
    method: POST
    data_selector: file
    params:
      f: /home/admin/archives.zip
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: file
    params:
      f: /home/admin/archives.zip
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: directory
    params:
      source: .
      exclude: dagger*
- name: read_file_http
  endpoint:
    path: /read-file-http
    method: POST
    data_selector: url
    params:
      url: https://raw.githubusercontent.com/dagger/dagger/refs/heads/main/README.md
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: result
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: result
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: result
- name: build_multi_platform_image
  endpoint:
    path: /build/multi-platform
    method: POST
    data_selector: result
    params: {}
- name: build_image_from_dockerfile
  endpoint:
    path: /build/dockerfile
    method: POST
    data_selector: result
    params: {}
- name: build_image_from_dockerfile_with_context
  endpoint:
    path: /build/dockerfile/context
    method: POST
    data_selector: result
    params: {}
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: result
    params:
      src: https://github.com/dockersamples/python-flask-redis
      dockerfile: https://github.com/vimagick/dockerfiles#master:registry-cli/Dockerfile
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: directory
    params: {}
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: directory
    params: {}
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: directory
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: repository
    params: {}
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: repository
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: repository
- name: mount_file
  endpoint:
    path: /mount-file
    method: POST
    data_selector: file
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: source
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: source
- name: read_file_http
  endpoint:
    path: /read-file-http
    method: POST
    data_selector: url
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: result
    params: {}
- name: MyModule
  endpoint:
    path: /build
    method: POST
    data_selector: ref
    params: {}
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: records
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: records
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: records
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: records
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: records
- name: clone
  endpoint:
    path: /clone
    method: GET
    data_selector: records
- name: mount-file
  endpoint:
    path: /mount-file
    method: POST
    data_selector: records
- name: copy-file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: records
- name: copy-directory-with-exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: records
- name: read-file-http
  endpoint:
    path: /read-file-http
    method: GET
    data_selector: records
- name: my_module
  endpoint:
    path: /my-module
    method: POST
    data_selector: output
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: result
    params: {}
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: ref
    params:
      src: https://github.com/dockersamples/python-flask-redis
      dockerfile: https://github.com/vimagick/dockerfiles#master:registry-cli/Dockerfile
- name: github_auth
  endpoint:
    path: /github/auth/status
    method: GET
    data_selector: status
    params: {}
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: results
    params: {}
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: results
    params: {}
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: results
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: results
    params: {}
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: results
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: repository
    params: {}
- name: mount_file
  endpoint:
    path: /mount-file
    method: POST
    data_selector: file
    params: {}
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: file
    params: {}
- name: multi_platform_image
  endpoint:
    path: /build/multi-platform/image
    method: POST
    data_selector: image_digest
    params: {}
- name: dockerfile_image
  endpoint:
    path: /build/dockerfile/image
    method: POST
    data_selector: image_ref
    params: {}
- name: dockerfile_context_image
  endpoint:
    path: /build/dockerfile/context/image
    method: POST
    data_selector: image_ref
    params: {}
- name: github_api
  endpoint:
    path: /repos/dagger/dagger/issues
    method: GET
    data_selector: issues
- name: github_auth
  endpoint:
    path: /gh/auth/status
    method: GET
    data_selector: status
- name: issues
  endpoint:
    path: /repos/dagger/dagger/issues
    method: GET
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: container
    params: {}
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: container
    params: {}
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: container
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: container
    params: {}
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: container
    params: {}
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: result
    params: {}
- name: read_file_http
  endpoint:
    path: /read-file-http
    method: POST
    data_selector: result
    params: {}
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: result
    params: {}
- name: multi_platform_image
  endpoint:
    path: /build
    method: POST
    data_selector: image
    params: {}
- name: dockerfile_image
  endpoint:
    path: /dockerfile/build
    method: POST
    data_selector: image
    params: {}
- name: github_api
  endpoint:
    path: /repos/dagger/dagger/issues
    method: GET
    data_selector: issues
- name: github_auth
  endpoint:
    path: /auth/status
    method: GET
    data_selector: auth_status
- name: http_service
  endpoint:
    path: /http-service
    method: GET
- name: user_list
  endpoint:
    path: /user-list
    method: GET
- name: mariadb
  endpoint:
    path: /mariadb
    method: GET
    data_selector: records
- name: drupal
  endpoint:
    path: /drupal
    method: GET
    data_selector: records
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: result
    params:
      source: path
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: result
    params:
      source: path
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: result
    params:
      source: path
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: result
    params:
      repository: url
      ref: reference
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: result
    params:
      repository: url
      ref: reference
      sock: socket
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: repository
    params: {}
- name: mount_file
  endpoint:
    path: /mount-file
    method: POST
    data_selector: file
    params: {}
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: file
    params: {}
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: directory
    params: {}
- name: read_file_http
  endpoint:
    path: /read-file-http
    method: POST
    data_selector: url
    params: {}
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: result
    params: {}
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: result
    params: {}
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: result
    params: {}
- name: build_multi_platform_image
  endpoint:
    path: /build
    method: POST
    data_selector: imageDigest
- name: build_image_from_dockerfile
  endpoint:
    path: /docker_build
    method: POST
    data_selector: ref
- name: build_image_with_different_context
  endpoint:
    path: /docker_build_context
    method: POST
    data_selector: ref
- name: github_api
  endpoint:
    path: /repos/dagger/dagger/issues
    method: GET
    data_selector: issues
- name: github_auth
  endpoint:
    path: /gh/auth/status
    method: GET
    data_selector: auth_status
- name: http_service
  endpoint:
    path: /http-service
    method: GET
- name: user_list
  endpoint:
    path: /user-list
    method: GET
- name: test
  endpoint:
    path: /test
    method: POST
- name: redis_service
  endpoint:
    path: /redis
    method: START
    data_selector: stdout
    params: {}
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: directory
    params: {}
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: directory
    params: {}
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: directory
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: repository
    params: {}
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: repository
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: container
    params:
      repository: string
      ref: string
- name: mount_file
  endpoint:
    path: /mount-file
    method: POST
    data_selector: container
    params:
      f: string
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: container
    params:
      f: string
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: container
    params:
      source: string
      exclude: list[string]
- name: read_file_http
  endpoint:
    path: /read-file-http
    method: POST
    data_selector: container
    params:
      url: string
- name: copy_file_custom_processing
  endpoint:
    path: /copy-file-custom-processing
    method: POST
    data_selector: void
    params:
      source: File
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: foo.txt
    params: {}
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: directory
    params: {}
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: build_directory
    params: {}
- name: build_multi_platform_image
  endpoint:
    path: /build
    method: POST
    data_selector: image
    params:
      src: source_code_location
- name: build_image_from_dockerfile
  endpoint:
    path: /dockerfile/build
    method: POST
    data_selector: image
    params:
      src: directory_containing_dockerfile
- name: build_image_with_custom_context
  endpoint:
    path: /dockerfile/custom/build
    method: POST
    data_selector: image
    params:
      src: source_directory
      dockerfile: location_of_dockerfile
- name: github_api
  endpoint:
    path: /repos/dagger/dagger/issues
    method: GET
    data_selector: issues
- name: http_service
  endpoint:
    path: /http-service
    method: GET
- name: user_list
  endpoint:
    path: /user-list
    method: GET
- name: test
  endpoint:
    path: /test
    method: POST
- name: redis_service
  endpoint:
    path: /redis-service
    method: POST
    data_selector: stdout
    params: {}
- name: services
  endpoint:
    path: /services
    method: GET
    data_selector: services
    params: {}
- name: publish
  endpoint:
    path: /publish
    method: POST
    data_selector: publish
    params: {}
- name: get_dir
  endpoint:
    path: /get-dir
    method: GET
    data_selector: directory
    params: {}
- name: get_file
  endpoint:
    path: /get-file
    method: GET
    data_selector: file
    params: {}
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: build
    params: {}
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: records
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: records
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: records
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: records
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: records
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: repository
    params:
      repository: string
      ref: string
- name: mount_file
  endpoint:
    path: /mount-file
    method: POST
    data_selector: file
    params:
      f: string
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: file
    params:
      f: string
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: directory
    params:
      source: string
      exclude: list[string]
- name: read_file_http
  endpoint:
    path: /read-file-http
    method: POST
    data_selector: url
    params:
      url: string
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: result
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: result
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: result
- name: build_multi_platform_image
  endpoint:
    path: /build
    method: POST
    data_selector: image_digest
    params:
      src: source code location can be local directory or remote Git repository
- name: build_image_from_dockerfile
  endpoint:
    path: /docker-build
    method: POST
    data_selector: ref
    params:
      src: location of directory containing Dockerfile
- name: build_image_with_different_context
  endpoint:
    path: /docker-build/context
    method: POST
    data_selector: ref
    params:
      src: location of source directory
      dockerfile: location of Dockerfile
- name: github_api
  endpoint:
    path: /repos/dagger/dagger/issues
    method: GET
    data_selector: issues
    params: {}
- name: github_auth
  endpoint:
    path: /gh/auth/status
    method: GET
    data_selector: status
    params: {}
- name: http_service
  endpoint:
    path: /http-service
    method: GET
    data_selector: output
    params: {}
- name: user_list
  endpoint:
    path: /user-list
    method: GET
    data_selector: output
    params: {}
- name: test
  endpoint:
    path: /test
    method: POST
    data_selector: output
    params: {}
- name: redis_service
  endpoint:
    path: /redis_service
    method: POST
- name: services
  endpoint:
    path: /services
    method: POST
- name: publish
  endpoint:
    path: /publish
    method: POST
- name: base
  endpoint:
    path: /base
    method: GET
- name: getDir
  endpoint:
    path: /getDir
    method: GET
- name: getFile
  endpoint:
    path: /getFile
    method: GET
- name: get_dir
  endpoint:
    path: /get-dir
    method: GET
    data_selector: directory
    params: {}
- name: get_file
  endpoint:
    path: /get-file
    method: GET
    data_selector: file
    params: {}
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: container
    params:
      source: source
- name: set_env_var
  endpoint:
    path: /set-env-var
    method: POST
- name: set_env_vars
  endpoint:
    path: /set-env-vars
    method: POST
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: container
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: container
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: container
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: container
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: container
- name: clone
  endpoint:
    path: /clone
    method: POST
- name: mount_file
  endpoint:
    path: /mount-file
    method: POST
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
- name: read_file_http
  endpoint:
    path: /read-file-http
    method: POST
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: exported_file
    params: {}
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: container
    params: {}
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: address
    params: {}
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: image
    params: {}
- name: github_api
  endpoint:
    path: /repos/dagger/dagger/issues
    method: GET
    data_selector: issues
    params: {}
- name: github_auth
  endpoint:
    path: /gh/auth/status
    method: GET
    data_selector: status
    params: {}
- name: http_service
  endpoint:
    path: /http-service
    method: GET
    data_selector: service
    params: {}
- name: user_list
  endpoint:
    path: /user-list
    method: GET
    data_selector: response
    params:
      svc: tcp://localhost:3306
- name: test
  endpoint:
    path: /test
    method: POST
    data_selector: test_result
    params: {}
- name: redis_service
  endpoint:
    path: /redis_service
    method: GET
    data_selector: redis_service
    params: {}
- name: services
  endpoint:
    path: /services
    method: GET
    data_selector: services
    params: {}
- name: publish
  endpoint:
    path: /publish
    method: POST
    data_selector: publish
    params: {}
- name: base
  endpoint:
    path: /base
    method: GET
    data_selector: base
    params: {}
- name: get_dir
  endpoint:
    path: /get_dir
    method: GET
    data_selector: get_dir
    params: {}
- name: get_file
  endpoint:
    path: /get_file
    method: GET
    data_selector: get_file
    params: {}
- name: get_dir
  endpoint:
    path: /get-dir
    method: GET
    data_selector: directory
    params: {}
- name: get_file
  endpoint:
    path: /get-file
    method: GET
    data_selector: file
    params: {}
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: container
    params:
      source: source
- name: set_env_var
  endpoint:
    path: /set-env-var
    method: POST
    data_selector: env_var
    params: {}
- name: set_env_vars
  endpoint:
    path: /set-env-vars
    method: POST
    data_selector: env_vars
    params: {}
- name: redis
  endpoint:
    path: /redis
    method: GET
    data_selector: redis_service
    params: {}
- name: set
  endpoint:
    path: /set
    method: POST
    data_selector: set_response
    params:
      key: key
      value: value
- name: get
  endpoint:
    path: /get
    method: GET
    data_selector: get_response
    params:
      key: key
- name: MyModule
  endpoint:
    path: /my-module
    method: POST
    data_selector: results
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: results
    params: {}
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: results
    params: {}
- name: copy_and_modify_directory
  endpoint:
    path: /copy-and-modify-directory
    method: POST
    data_selector: results
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: results
    params: {}
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: results
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: records
    params: {}
- name: mount_file
  endpoint:
    path: /mount-file
    method: POST
    data_selector: records
    params: {}
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: records
    params: {}
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: records
    params: {}
- name: read_file_http
  endpoint:
    path: /read-file-http
    method: POST
    data_selector: records
    params: {}
- name: copy_file
  endpoint:
    path: /copy-file
    method: POST
    data_selector: result
    params: {}
- name: copy_directory_with_exclusions
  endpoint:
    path: /copy-directory-with-exclusions
    method: POST
    data_selector: result
    params: {}
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: result
    params: {}
- name: build_multi_platform_image
  endpoint:
    path: /build
    method: POST
    data_selector: imageDigest
    params: {}
- name: build_image_from_dockerfile
  endpoint:
    path: /dockerfile/build
    method: POST
    data_selector: ref
    params: {}
- name: build_image_with_different_context
  endpoint:
    path: /dockerfile/context/build
    method: POST
    data_selector: ref
    params: {}
- name: github_api
  endpoint:
    path: /repos/dagger/dagger/issues
    method: GET
    data_selector: issues
- name: http_service
  endpoint:
    path: http-service
    method: GET
    data_selector: response
    params: {}
- name: user_list
  endpoint:
    path: user-list
    method: GET
    data_selector: response
    params: {}
- name: test
  endpoint:
    path: test
    method: GET
    data_selector: response
    params: {}
- name: redis_service
  endpoint:
    path: /redis-service
    method: POST
    data_selector: result
    params: {}
- name: services
  endpoint:
    path: /services
    method: POST
    data_selector: result
    params: {}
- name: publish
  endpoint:
    path: /publish
    method: POST
    data_selector: result
    params: {}
- name: base
  endpoint:
    path: /base
    method: GET
    data_selector: result
    params: {}
- name: get_dir
  endpoint:
    path: /get-dir
    method: GET
    data_selector: result
    params: {}
- name: get_file
  endpoint:
    path: /get-file
    method: GET
    data_selector: result
    params: {}
- name: redis_service
  endpoint:
    path: /redis
    method: GET
    data_selector: service
    params: {}
- name: set_key
  endpoint:
    path: /redis/set
    method: POST
    data_selector: result
    params:
      key: foo
      value: '123'
- name: get_key
  endpoint:
    path: /redis/get
    method: GET
    data_selector: value
    params:
      key: foo
- name: unit_tests
  endpoint:
    path: /foo
    method: POST
- name: HelloDagger
  endpoint:
    path: /dagger/hello-dagger
    method: POST
    data_selector: functions
- name: HelloDagger
  endpoint:
    path: /hello-dagger
    method: POST
    data_selector: result
    params: {}
- name: go-program
  endpoint:
    path: /go-program
    method: POST
    data_selector: output
    params:
      assignment: write a curl clone
- name: workspace
  endpoint:
    path: /.dagger/workspace
    method: GET
    data_selector: functions
    params: {}
- name: develop
  endpoint:
    path: /develop
    method: POST
    data_selector: completed
    params:
      assignment: Assignment to complete
      source: Source directory to develop
- name: workspace
  endpoint:
    path: /dagger/workspace
    method: POST
    data_selector: functions
    params: {}
- name: developIssue
  endpoint:
    params:
      githubToken: Github Token with permissions to write issues and contents
      issueID: Github issue number
      repository: Github repository url
      source: Source directory to develop
- name: MyModule
  endpoint:
    path: /my_module
    method: POST
    data_selector: container
    params: {}
- name: GitRepository
  endpoint:
    path: /getting-started/types/git
    method: GET
    data_selector: operations
- name: Container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: container
  endpoint:
    path: /container
    method: POST
    data_selector: data
    params: {}
- name: git
  endpoint:
    path: /git
    method: GET
    data_selector: data
    params: {}
- name: my-alpine
  endpoint:
    path: /my-alpine
    method: POST
    data_selector: ref
    params: {}
- name: Directory
  endpoint:
    path: /
    method: GET
    data_selector: entries
- name: Directory
  endpoint:
    path: /directory
    method: GET
    data_selector: records
- name: builder
  endpoint:
    path: /src
    method: GET
    data_selector: records
    params:
      exclude:
      - '*.git'
      - internal
- name: app
  endpoint:
    path: /app
    method: GET
    data_selector: records
    params:
      include:
      - hello.bin
- name: mount_directory
  endpoint:
    path: /mount-directory
    method: POST
    data_selector: directory
    params: {}
- name: copy_directory
  endpoint:
    path: /copy-directory
    method: POST
    data_selector: directory
    params: {}
- name: copy_and_modify_directory
  endpoint:
    path: copy-and-modify-directory
    method: POST
    data_selector: directory
    params: {}
- name: copy_directory_with_exclusions
  endpoint:
    path: copy-directory-with-exclusions
    method: POST
    data_selector: directory
    params: {}
- name: set_module_default_path
  endpoint:
    path: set-module-default-path
    method: POST
    data_selector: directory
    params: {}
- name: directory
  endpoint:
    path: /src
    method: GET
    data_selector: directory
- name: file
  endpoint:
    path: /src/foo
    method: GET
    data_selector: file
- name: File
  endpoint:
    path: /types/file
    method: GET
    data_selector: records
- name: Directory
  endpoint:
    path: /types/directory
    method: GET
    data_selector: records
- name: file
  endpoint:
    path: /file
    method: GET
    data_selector: contents
- name: directory
  endpoint:
    path: /directory
    method: GET
    data_selector: entries
- name: service
  endpoint:
    path: /service
    method: GET
    data_selector: service
- name: http_service
  endpoint:
    path: /http_service
    method: GET
    data_selector: http_service
- name: unit_test_service
  endpoint:
    path: /unit_test_service
    method: POST
    data_selector: unit_test_service
- name: CodingAgent
  endpoint:
    path: /llm/coding-agent
    method: POST
    data_selector: result
    params: {}
- name: Env
  endpoint:
    path: /Env
    method: GET
    data_selector: envs
    params: {}
- name: CacheVolume
  endpoint:
    path: /getting-started/types/cache-volume
    method: GET
    data_selector: records
    params: {}
- name: clone
  endpoint:
    path: /clone
    method: POST
    data_selector: repository
    params: {}
- name: clone_with_ssh
  endpoint:
    path: /clone-with-ssh
    method: POST
    data_selector: repository
    params: {}
- name: cacheVolume
  endpoint:
    path: /cacheVolume
    method: GET
    data_selector: id
    params: {}
- name: cloud
  endpoint:
    path: /cloud
    method: GET
    data_selector: state
    params: {}
- name: container
  endpoint:
    path: /container
    method: GET
    data_selector: id
    params: {}
- name: currentFunctionCall
  endpoint:
    path: /currentFunctionCall
    method: GET
    data_selector: FunctionCall
    params: {}
- name: currentModule
  endpoint:
    path: /currentModule
    method: GET
    data_selector: CurrentModule
    params: {}
- name: currentTypeDefs
  endpoint:
    path: /currentTypeDefs
    method: GET
    data_selector: TypeDef
    params: {}
- name: defaultPlatform
  endpoint:
    path: /defaultPlatform
    method: GET
    data_selector: Platform
    params: {}
- name: directory
  endpoint:
    path: /directory
    method: GET
    data_selector: Directory
    params: {}
- name: engine
  endpoint:
    path: /engine
    method: GET
    data_selector: Engine
    params: {}
- name: env
  endpoint:
    path: /env
    method: GET
    data_selector: Env
    params: {}
- name: error
  endpoint:
    path: /error
    method: POST
    data_selector: Error
    params: {}
- name: file
  endpoint:
    path: /file
    method: POST
    data_selector: File
    params: {}
- name: function
  endpoint:
    path: /function
    method: POST
    data_selector: Function
    params: {}
- name: generatedCode
  endpoint:
    path: /generatedCode
    method: POST
    data_selector: GeneratedCode
    params: {}
- name: git
  endpoint:
    path: /git
    method: GET
    data_selector: GitRepository
    params: {}
- name: host
  endpoint:
    path: /host
    method: GET
    data_selector: Host
    params: {}
- name: http
  endpoint:
    path: /http
    method: GET
    data_selector: File
    params: {}
- name: json
  endpoint:
    path: /json
    method: GET
    data_selector: JSONValue
    params: {}
- name: llm
  endpoint:
    path: /llm
    method: POST
    data_selector: LLM
    params: {}
- name: Binding
  endpoint:
    path: /loadBindingFromID
    method: GET
- name: CacheVolume
  endpoint:
    path: /loadCacheVolumeFromID
    method: GET
- name: Cloud
  endpoint:
    path: /loadCloudFromID
    method: GET
- name: Container
  endpoint:
    path: /loadContainerFromID
    method: GET
- name: CurrentModule
  endpoint:
    path: /loadCurrentModuleFromID
    method: GET
- name: Directory
  endpoint:
    path: /loadDirectoryFromID
    method: GET
- name: EngineCacheEntry
  endpoint:
    path: /loadEngineCacheEntryFromID
    method: GET
- name: EngineCacheEntrySet
  endpoint:
    path: /loadEngineCacheEntrySetFromID
    method: GET
- name: EngineCache
  endpoint:
    path: /loadEngineCacheFromID
    method: GET
- name: Engine
  endpoint:
    path: /loadEngineFromID
    method: GET
- name: EnumTypeDef
  endpoint:
    path: /loadEnumTypeDefFromID
    method: GET
- name: EnumValueTypeDef
  endpoint:
    path: /loadEnumValueTypeDefFromID
    method: GET
- name: Env
  endpoint:
    path: /loadEnvFromID
    method: GET
- name: EnvVariable
  endpoint:
    path: /loadEnvVariableFromID
    method: GET
- name: Error
  endpoint:
    path: /loadErrorFromID
    method: GET
- name: ErrorValue
  endpoint:
    path: /loadErrorValueFromID
    method: GET
- name: FieldTypeDef
  endpoint:
    path: /loadFieldTypeDefFromID
    method: GET
- name: File
  endpoint:
    path: /loadFileFromID
    method: GET
- name: FunctionArg
  endpoint:
    path: /loadFunctionArgFromID
    method: GET
- name: FunctionCallArgValue
  endpoint:
    path: /loadFunctionCallArgValueFromID
    method: GET
- name: FunctionCall
  endpoint:
    path: /loadFunctionCallFromID
    method: GET
- name: Function
  endpoint:
    path: /loadFunctionFromID
    method: GET
- name: GeneratedCode
  endpoint:
    path: /loadGeneratedCodeFromID
    method: GET
- name: GitRef
  endpoint:
    path: /loadGitRefFromID
    method: GET
- name: GitRepository
  endpoint:
    path: /loadGitRepositoryFromID
    method: GET
- name: Host
  endpoint:
    path: /loadHostFromID
    method: GET
- name: InputTypeDef
  endpoint:
    path: /loadInputTypeDefFromID
    method: GET
- name: InterfaceTypeDef
  endpoint:
    path: /loadInterfaceTypeDefFromID
    method: GET
- name: JSONValue
  endpoint:
    path: /loadJSONValueFromID
    method: GET
- name: LLM
  endpoint:
    path: /loadLLMFromID
    method: GET
- name: LLMTokenUsage
  endpoint:
    path: /loadLLMTokenUsageFromID
    method: GET
- name: Label
  endpoint:
    path: /loadLabelFromID
    method: GET
- name: ListTypeDef
  endpoint:
    path: /loadListTypeDefFromID
    method: GET
- name: ModuleConfigClient
  endpoint:
    path: /loadModuleConfigClientFromID
    method: GET
- name: Module
  endpoint:
    path: /loadModuleFromID
    method: GET
- name: ModuleSource
  endpoint:
    path: /loadModuleSourceFromID
    method: GET
- name: ObjectTypeDef
  endpoint:
    path: /loadObjectTypeDefFromID
    method: GET
- name: Port
  endpoint:
    path: /loadPortFromID
    method: GET
- name: SDKConfig
  endpoint:
    path: /loadSDKConfigFromID
    method: GET
- name: ScalarTypeDef
  endpoint:
    path: /loadScalarTypeDefFromID
    method: GET
- name: SearchResult
  endpoint:
    path: /loadSearchResultFromID
    method: GET
- name: SearchSubmatch
  endpoint:
    path: /loadSearchSubmatchFromID
    method: GET
- name: Secret
  endpoint:
    path: /loadSecretFromID
    method: GET
- name: Service
  endpoint:
    path: /loadServiceFromID
    method: GET
- name: Socket
  endpoint:
    path: /loadSocketFromID
    method: GET
- name: SourceMap
  endpoint:
    path: /loadSourceMapFromID
    method: GET
- name: Terminal
  endpoint:
    path: /loadTerminalFromID
    method: GET
- name: TypeDef
  endpoint:
    path: /loadTypeDefFromID
    method: GET
- name: CacheVolume
  endpoint:
    path: /CacheVolume
    method: GET
    data_selector: id
- name: Cloud
  endpoint:
    path: /Cloud
    method: GET
    data_selector: id
- name: Container
  endpoint:
    path: /Container
    method: GET
    data_selector: id
- name: Directory
  endpoint:
    path: /Directory
    method: GET
    data_selector: id
- name: Env
  endpoint:
    path: /Env
    method: GET
    data_selector: id
- name: File
  endpoint:
    path: /File
    method: GET
    data_selector: id
- name: GitRef
  endpoint:
    path: /GitRef
    method: GET
    data_selector: id
- name: GitRepository
  endpoint:
    path: /GitRepository
    method: GET
    data_selector: id
- name: JSONValue
  endpoint:
    path: /JSONValue
    method: GET
    data_selector: id
- name: LLM
  endpoint:
    path: /LLM
    method: GET
    data_selector: id
- name: Module
  endpoint:
    path: /Module
    method: GET
    data_selector: id
- name: ModuleConfigClient
  endpoint:
    path: /ModuleConfigClient
    method: GET
    data_selector: id
- name: ModuleSource
  endpoint:
    path: /ModuleSource
    method: GET
    data_selector: id
- name: SearchResult
  endpoint:
    path: /SearchResult
    method: GET
    data_selector: id
- name: SearchSubmatch
  endpoint:
    path: /SearchSubmatch
    method: GET
    data_selector: id
- name: Secret
  endpoint:
    path: /Secret
    method: GET
    data_selector: id
- name: Service
  endpoint:
    path: /Service
    method: GET
    data_selector: id
- name: Socket
  endpoint:
    path: /Socket
    method: GET
    data_selector: id
- name: String
  endpoint:
    path: /String
    method: GET
    data_selector: id
- name: asService
  endpoint:
    path: /Container/asService
    method: POST
- name: asTarball
  endpoint:
    path: /Container/asTarball
    method: POST
- name: build
  endpoint:
    path: /Container/build
    method: POST
- name: combinedOutput
  endpoint:
    path: /Container/combinedOutput
    method: GET
- name: defaultArgs
  endpoint:
    path: /Container/defaultArgs
    method: GET
- name: directory
  endpoint:
    path: /Container/directory
    method: GET
- name: entrypoint
  endpoint:
    path: /Container/entrypoint
    method: GET
- name: envVariable
  endpoint:
    path: /Container/envVariable
    method: GET
- name: exists
  endpoint:
    path: /Container/exists
    method: GET
- name: exitCode
  endpoint:
    path: /Container/exitCode
    method: GET
- name: experimentalWithAllGPUs
  endpoint:
    path: /Container/experimentalWithAllGPUs
    method: POST
- name: experimentalWithGPU
  endpoint:
    path: /Container/experimentalWithGPU
    method: POST
- name: export
  endpoint:
    path: /Container/export
    method: POST
- name: exportImage
  endpoint:
    path: /Container/exportImage
    method: POST
- name: file
  endpoint:
    path: /Container/file
    method: GET
- name: from
  endpoint:
    path: /Container/from
    method: POST
- name: id
  endpoint:
    path: /Container/id
    method: GET
- name: imageRef
  endpoint:
    path: /Container/imageRef
    method: GET
- name: import
  endpoint:
    path: /Container/import
    method: POST
- name: label
  endpoint:
    path: /Container/label
    method: GET
- name: mounts
  endpoint:
    path: /Container/mounts
    method: GET
- name: platform
  endpoint:
    path: /Container/platform
    method: GET
- name: publish
  endpoint:
    path: /Container/publish
    method: POST
- name: rootfs
  endpoint:
    path: /Container/rootfs
    method: GET
- name: stderr
  endpoint:
    path: /Container/stderr
    method: GET
- name: stdout
  endpoint:
    path: /Container/stdout
    method: GET
- name: sync
  endpoint:
    path: /Container/sync
    method: POST
- name: terminal
  endpoint:
    path: /Container/terminal
    method: POST
- name: up
  endpoint:
    path: /Container/up
    method: POST
- name: user
  endpoint:
    path: /Container/user
    method: GET
- name: withExposedPort
  endpoint:
    path: /withExposedPort
    method: GET
- name: withFile
  endpoint:
    path: /withFile
    method: GET
- name: withFiles
  endpoint:
    path: /withFiles
    method: GET
- name: withLabel
  endpoint:
    path: /withLabel
    method: GET
- name: withMountedCache
  endpoint:
    path: /withMountedCache
    method: GET
- name: withMountedDirectory
  endpoint:
    path: /withMountedDirectory
    method: GET
- name: withMountedFile
  endpoint:
    path: /withMountedFile
    method: GET
- name: withMountedSecret
  endpoint:
    path: /withMountedSecret
    method: GET
- name: withMountedTemp
  endpoint:
    path: /withMountedTemp
    method: GET
- name: withNewFile
  endpoint:
    path: /withNewFile
    method: GET
- name: withRegistryAuth
  endpoint:
    path: /withRegistryAuth
    method: GET
- name: withRootfs
  endpoint:
    path: /withRootfs
    method: GET
- name: withSecretVariable
  endpoint:
    path: /withSecretVariable
    method: GET
- name: withServiceBinding
  endpoint:
    path: /withServiceBinding
    method: GET
- name: withSymlink
  endpoint:
    path: /withSymlink
    method: GET
- name: withUnixSocket
  endpoint:
    path: /withUnixSocket
    method: GET
- name: withUser
  endpoint:
    path: /withUser
    method: GET
- name: withWorkdir
  endpoint:
    path: /withWorkdir
    method: GET
- name: withoutAnnotation
  endpoint:
    path: /withoutAnnotation
    method: GET
- name: withoutDefaultArgs
  endpoint:
    path: /withoutDefaultArgs
    method: GET
- name: withoutDirectory
  endpoint:
    path: /withoutDirectory
    method: GET
- name: withoutEntrypoint
  endpoint:
    path: /withoutEntrypoint
    method: GET
- name: withoutEnvVariable
  endpoint:
    path: /withoutEnvVariable
    method: GET
- name: withoutExposedPort
  endpoint:
    path: /withoutExposedPort
    method: GET
- name: withoutFile
  endpoint:
    path: /withoutFile
    method: GET
- name: withoutFiles
  endpoint:
    path: /withoutFiles
    method: GET
- name: withoutLabel
  endpoint:
    path: /withoutLabel
    method: GET
- name: withoutMount
  endpoint:
    path: /withoutMount
    method: GET
- name: withoutRegistryAuth
  endpoint:
    path: /withoutRegistryAuth
    method: GET
- name: withoutSecretVariable
  endpoint:
    path: /withoutSecretVariable
    method: GET
- name: withoutUnixSocket
  endpoint:
    path: /withoutUnixSocket
    method: GET
- name: withoutUser
  endpoint:
    path: /withoutUser
    method: GET
- name: withoutWorkdir
  endpoint:
    path: /withoutWorkdir
    method: GET
- name: contents
  endpoint:
    path: /File/contents
    method: GET
- name: digest
  endpoint:
    path: /File/digest
    method: GET
- name: export
  endpoint:
    path: /File/export
    method: POST
- name: id
  endpoint:
    path: /File/id
    method: GET
- name: name
  endpoint:
    path: /File/name
    method: GET
- name: search
  endpoint:
    path: /File/search
    method: GET
- name: size
  endpoint:
    path: /File/size
    method: GET
- name: sync
  endpoint:
    path: /File/sync
    method: POST
- name: withName
  endpoint:
    path: /File/withName
    method: GET
- name: withReplaced
  endpoint:
    path: /File/withReplaced
    method: POST
- name: withTimestamps
  endpoint:
    path: /File/withTimestamps
    method: GET
- name: compression_algorithm
  endpoint:
    path: /compression/algorithms
    method: GET
- name: SourceMap
  endpoint:
    path: /SourceMap
    method: GET
    data_selector: records
- name: SourceMapID
  endpoint:
    path: /SourceMapID
    method: GET
    data_selector: records
- name: Terminal
  endpoint:
    path: /Terminal
    method: GET
    data_selector: records
- name: TerminalID
  endpoint:
    path: /TerminalID
    method: GET
    data_selector: records
- name: TypeDef
  endpoint:
    path: /TypeDef
    method: GET
    data_selector: records
- name: TypeDefID
  endpoint:
    path: /TypeDefID
    method: GET
    data_selector: records
- name: TypeDefKind
  endpoint:
    path: /TypeDefKind
    method: GET
    data_selector: records
- name: MyModule
  endpoint:
    path: /get-user
    method: GET
    data_selector: results
- name: string_return_values
  endpoint:
    path: /return-types/string
    method: GET
    data_selector: results
- name: integer_return_values
  endpoint:
    path: /return-types/integer
    method: GET
    data_selector: results
- name: floating_point_return_values
  endpoint:
    path: /return-types/floating-point
    method: GET
    data_selector: results
- name: directory_return_values
  endpoint:
    path: /return-types/directory
    method: GET
    data_selector: results
- name: file_return_values
  endpoint:
    path: /return-types/file
    method: GET
    data_selector: results
- name: alpine_builder
  endpoint:
    path: /alpine-builder
    method: POST
    data_selector: container
    params:
      packages: curl,openssh
- name: wolfi_container
  endpoint:
    path: /modules/wolfi@v0.16.2
    method: GET
    data_selector: container
    params: {}
- name: golang_builder
  endpoint:
    path: /modules/golang@v0.2.1
    method: GET
    data_selector: build
    params: {}
- name: ruff_linter
  endpoint:
    path: /modules/ruff
    method: GET
    data_selector: lint
    params: {}
- name: nginx_service
  endpoint:
    path: /modules/nginx@v0.1.0
    method: GET
    data_selector: as-service
    params: {}
- name: container
  endpoint:
    path: /with-directory
    method: POST
    data_selector: stdout
    params:
      path: /src
      directory: .
- name: file
  endpoint:
    path: /with-file
    method: POST
    data_selector: stdout
    params:
      path: /README.md
      source: ./README.md
- name: http_service
  endpoint:
    path: /http-service
    method: GET
    data_selector: response
    params: {}
- name: user_list
  endpoint:
    path: /user-list
    method: GET
    data_selector: response
    params: {}
- name: services
  endpoint:
    path: /services
    method: GET
    data_selector: services
    params: {}
- name: redis_service
  endpoint:
    path: /redis_service
    method: GET
    data_selector: redis_service
    params: {}
- name: redis_service
  endpoint:
    path: /redis
    method: GET
    data_selector: stdout
    params: {}
- name: cache_volume_example
  endpoint:
    path: /src
    method: GET
    data_selector: records
    params: {}
- name: CodingAgent
  endpoint:
    path: /llm
    method: POST
    data_selector: response
    params: {}
- name: dependencies
  endpoint:
    path: /extending/module-dependencies
    method: GET
    data_selector: dependencies
- name: MyModule
  endpoint:
    path: /extending/modules/constructors
    method: GET
    data_selector: records
    params: {}
- name: scan
  endpoint:
    path: /scan
    method: POST
    data_selector: output
    params: {}
- name: query
  endpoint:
    path: /dagger/query
    method: POST
- name: MyModule
  endpoint:
    path: /functions/get-user
    method: GET
    data_selector: results
notes:
- Dagger documentation is available online for up-to-date information.
- When working with private Git repositories, ensure that SSH authentication is properly
  configured on your Dagger host.
- Modifications made to mounted files and/or directories will only be reflected in
  the target directory and not in the mount sources.
- Ensure that SSH authentication is properly configured for private Git repositories.
- Pre-call filtering can be used with directory filters.
- Ensure SSH authentication is properly configured on your Dagger host when working
  with private Git repositories.
- Build and publish multi-platform image
- Modifications made to copied or mounted directories in the container do not automatically
  transfer back to the host.
- Build and publish multi-platform images using Dagger's functionality.
- Docker builds can be triggered from specified directories containing Dockerfiles.
- When a host directory or file is copied or mounted to a container's filesystem,
  modifications made to it in the container do not automatically transfer back to
  the host.
- 'Supports multiple architectures: linux/amd64, linux/arm64, linux/s390x'
- Build and publish image from existing Dockerfile
- Build and publish image from Dockerfile using different build context
- Uses GitHub CLI to authenticate.
- Requires GitHub Hosts configuration file.
- Ensure the Dagger secret's name matches what the Dockerfile expects as the id for
  the secret mount.
- By default, the layer cache entries for operations that include a secret will be
  based on the plaintext value of the secret.
- Secrets that share the same cacheKey will be considered equivalent when checking
  the layer cache for operations that include them, even if their plaintext value
  differs.
- Uses Dagger for building multi-platform images
- Requires source code location to build images
- Uses Docker to build images and supports OCI annotations and labels.
- Build and publish multi-platform image supports architectures linux/amd64, linux/arm64,
  and linux/s390x.
- Image repository format is ttl.sh/{image-name}:latest.
- Uses Dockerfile for building images
- Supports secrets for authentication
- Dagger can cache dependencies to reduce execution time
- Use of cache volume persists data across function runs
- Multi-platform image builds can target linux/amd64, linux/arm64, and linux/s390x.
- Ensure that source code locations are accessible as either local directories or
  remote Git repositories.
- When using spans to group and measure Dagger API function calls, ensure that the
  function calls are not lazily evaluated.
- If you have custom-provisioned the Dagger Engine, please adjust the above commands
  to your environment.
- Dagger Cloud is an online visualization tool for Dagger workflows. It provides a
  web interface to visualize each step of your workflow.
- Dagger will map each exposed container service port to the same port on the host.
- Dagger is a general-purpose composition engine for containerized workflows.
- Dagger works with any compute platform or technology stack, automatically optimizing
  for speed and cost.
- Dagger is a platform for composing and running software engineering workflows
- This installs `dagger` in `$HOME/.local/bin`
- You may need to add it to your `$PATH` environment variable.
- This quickstart will guide you through building a CI workflow for an application
  using Dagger.
- This quickstart will take you approximately 10 minutes to complete.
- Uses Dagger Function to develop with a Github issue as the assignment
- The develop-issue function connects the dots in the automation flow.
- GitHub Actions requires repository secrets for API keys.
- The workflow triggers when the label 'develop' is added to an issue.
- 'Dagger caches two types of data: Layers and Volumes.'
- Dagger has built-in safeguards to ensure that secrets are used without exposing
  them in plaintext logs, writing them into the filesystem of containers you're building,
  or inserting them into the cache.
- Uses a Dockerfile for building images and supports OCI annotations.
- Build and publish image with OCI labels using Dagger.
- Dagger Functions do not have access to the filesystem of the host you invoke the
  Dagger Function from.
- Mounts only take effect within your workflow invocation; they are not copied to,
  or included, in the final image.
- Changes to mounted files and/or directories will only be reflected in the target
  directory and not in the mount sources.
- Data flows only one way between Dagger operations.
- You must explicitly export the directory or file back to the host filesystem.
- Dagger allows you to utilize confidential information without exposing those secrets
  in plaintext logs.
- Ensure that the 'OP_SERVICE_ACCOUNT_TOKEN' environment variable is set when using
  a 1Password service account.
- Ensure that the 'VAULT_ADDR' and either the 'VAULT_TOKEN' or 'VAULT_APPROLE_ROLE_ID'
  environment variables are set when using Hashicorp Vault.
- Dagger Functions can expose services to the host
- Dagger Functions can bind and use services
- Service endpoints may vary based on the configuration.
- The LLM type initializes a Large Language Model (LLM).
- The Env type is used to represent the environment in which an LLM operates.
- The default location for the cache directory depends on the package manager (`~/.cache/pip`
  for `pip` or `~/.cache/pypoetry` for `poetry`)
- Dagger protects the exposed API with an HTTP Basic authentication token which can
  be retrieved from the DAGGER_SESSION_TOKEN variable.
- Dagger Functions execute within containers spawned by the Dagger Engine
- Running `dagger develop` regenerates the module's code based on dependencies, the
  current state of the module, and the current Dagger API version.
- Only types and functions in the top-level package are part of the public-facing
  API for the module.
- Dagger supports authentication via both HTTPS (using Git credential managers) and
  SSH (using a unified authentication approach).
- Dagger allows passing directory, file, container, and secret arguments to functions.
- Functions can return various types including string, integer, float, directory,
  and file.
- When calling Dagger Functions that produce a just-in-time artifact, you can use
  the Dagger CLI to add more functions to the workflow for further processing.
- The example uploads the entire current directory to the container filesystem.
- Secrets can be securely used in Dagger functions without exposing them in plaintext
  logs, writing them into the filesystem of containers you're building, or inserting
  them into the cache.
- Creates Redis service and client
- Dagger cancels each service run after a 10 second grace period to avoid frequent
  restarts, unless the explicit Start and Stop APIs are used.
- Services are based on containers, but they run a little differently. Whereas regular
  containers in Dagger are de-duplicated across the entire Dagger Engine, service
  containers are only de-duplicated within a Dagger client session.
- Cache volumes are scoped by default to the modules they're defined in.
- To share a cache volume across modules, you must intentionally pass a reference
  to it via constructor or function arguments.
- Most LLM services impose rate limits (restrictions on the number of requests they
  will accept within a given time period). Dagger handles this gracefully with built-in
  rate limit detection and automatic retry with exponential backoff.
- Currently, SSH refs are fully supported on UNIX-based systems (Linux and macOS).
  Windows support is under development.
- SSH forwarding may fail when multiple keys are loaded in your SSH agent.
- Installing a module using a local path (relative or absolute) is only possible if
  your module is within the repository root (for Git repositories) or the directory
  containing the dagger.json file (for all other cases).
- Third-party dependencies are managed in the same way as any normal Python project.
  The only limitation is in 'pinning' the dependencies.
- Dagger modules have only one constructor.
- Constructors of custom types are not registered.
- Enumeration choices will be displayed when calling --help or .help on a Dagger Function
- Use Basic Authentication with the DAGGER_SESSION_TOKEN value as the username and
  password
- The clients generated for this module.
- The Dagger Go SDK requires Go 1.22 or later
- The Dagger TypeScript SDK requires TypeScript 5.0 or later
- This SDK currently only supports Node.js (stable) and Bun (experimental)
- List of URLs of remote modules allowed to access LLM APIs, or 'all' to bypass restrictions
  for the entire session
- Send API queries to a dagger engine.
- DAGGER_SESSION_PORT and DAGGER_SESSION_TOKEN will be conveniently injected automatically.
- Dagger is unresponsive with a BuildKit error may occur
- Dagger is unable to resolve host names after network configuration changes
- Dagger restarts with a 'CNI setup error'
- Calling a Dagger Function may fail with various errors
- The best way to find a good contribution is to use Dagger for something.
- Working on dagger requires dagger to bootstrap it - you can install dagger using
  the instructions at https://docs.dagger.io/install.
errors:
- 'INVALID_ARGUMENT: Check your input arguments.'
- 'AUTHENTICATION_FAILED: Ensure correct authentication setup.'
- 'TIMEOUT: The operation took too long to complete.'
- buildkit failed to respond
- container state improper
- unable to start container process
- failed to update codegen and runtime
- failed to generate code
- failed to get modified source directory for go module sdk codegen
- 'Remove the Dagger CLI using the following command: sudo rm /usr/local/bin/dagger'
- 'Homebrew users can alternatively use the following command: brew uninstall dagger'
- cannot divide by zero
auth_info:
  mentioned_objects:
  - Secret
  - GithubIssue
client:
  base_url: https://dagger.io
  headers:
    Accept: application/json
source_metadata: null
