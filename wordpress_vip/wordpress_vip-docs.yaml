resources:
- name: page_cache
  endpoint:
    path: /caching/page-cache
    method: GET
    data_selector: cached_responses
    params: {}
- name: Default Deployment
  endpoint:
    path: /code-deployment/default-deployment/
    method: GET
    data_selector: deployments
- name: wpcomvip GitHub repository
  endpoint:
    path: /github-repository/
    method: GET
    data_selector: repository
    params: {}
- name: plugins
  endpoint:
    path: /plugins
    method: GET
    data_selector: plugins
    params: {}
- name: vulnerability_update_scan
  endpoint:
    path: /plugins
    method: GET
    data_selector: scans
    params: {}
- name: Important Alerts for an organization
  endpoint:
    path: /notifications/important-alerts/organization
    method: GET
    data_selector: alerts
    params: {}
- name: Important Alerts for an application
  endpoint:
    path: /notifications/important-alerts/application
    method: GET
    data_selector: alerts
    params: {}
- name: production
  endpoint:
    path: /infrastructure/environments/production
    method: GET
- name: preprod
  endpoint:
    path: /infrastructure/environments/preprod
    method: GET
- name: develop
  endpoint:
    path: /infrastructure/environments/develop
    method: GET
- name: drop_ins
  endpoint:
    path: /wp-json/wp/v2/drop_ins
    method: GET
    data_selector: drop_ins
    params: {}
- name: media_files
  endpoint:
    path: /wp-content/uploads/
    method: GET
- name: applications
  endpoint:
    path: /guidebooks/develop-on-wpvip/applications-and-environments/
    method: GET
    data_selector: applications
    params: {}
- name: environments
  endpoint:
    path: /infrastructure/environments/
    method: GET
    data_selector: environments
    params: {}
- name: shared_media_files
  endpoint:
    path: /vip-file-system/shared-media-files/
    method: GET
    data_selector: media_files
    params: {}
- name: client-mu-plugins
  endpoint:
    path: /client-mu-plugins
    method: GET
- name: images
  endpoint:
    path: /images
    method: GET
- name: languages
  endpoint:
    path: /languages
    method: GET
- name: plugins
  endpoint:
    path: /plugins
    method: GET
- name: private
  endpoint:
    path: /private
    method: GET
- name: themes
  endpoint:
    path: /themes
    method: GET
- name: vip-config
  endpoint:
    path: /vip-config
    method: GET
- name: App role permissions
  endpoint:
    path: /manage-user-access/vip-dashboard/app-role/
    method: GET
- name: software_versions
  endpoint:
    path: /software-versions
    method: GET
    data_selector: versions
    params: {}
- name: slow_query_logs
  endpoint:
    path: /logs/slow-query/
    method: GET
    data_selector: logs
    params: {}
- name: PHP Errors
  endpoint:
    path: /performance/query-monitor/php-errors
    method: GET
    data_selector: errors
- name: Database Queries
  endpoint:
    path: /performance/query-monitor/database-queries
    method: GET
    data_selector: queries
- name: Object Cache
  endpoint:
    path: /performance/query-monitor/object-cache
    method: GET
    data_selector: cache
- name: Logs
  endpoint:
    path: /performance/query-monitor/logs
    method: GET
    data_selector: logs
- name: Requests
  endpoint:
    path: /performance/query-monitor/requests
    method: GET
    data_selector: requests
- name: Template
  endpoint:
    path: /performance/query-monitor/template
    method: GET
    data_selector: template
- name: Scripts
  endpoint:
    path: /performance/query-monitor/scripts
    method: GET
    data_selector: scripts
- name: Styles
  endpoint:
    path: /performance/query-monitor/styles
    method: GET
    data_selector: styles
- name: Hooks & Actions
  endpoint:
    path: /performance/query-monitor/hooks-actions
    method: GET
    data_selector: hooks
- name: Languages
  endpoint:
    path: /performance/query-monitor/languages
    method: GET
    data_selector: languages
- name: HTTP API Calls
  endpoint:
    path: /performance/query-monitor/http-api-calls
    method: GET
    data_selector: http_calls
- name: Transient Updates
  endpoint:
    path: /performance/query-monitor/transient-updates
    method: GET
    data_selector: transients
- name: Autoloaded Options
  endpoint:
    path: /performance/query-monitor/autoloaded-options
    method: GET
    data_selector: autoloaded_options
- name: Capability Checks
  endpoint:
    path: /performance/query-monitor/capability-checks
    method: GET
    data_selector: capability_checks
- name: Cron
  endpoint:
    path: /performance/query-monitor/cron
    method: GET
    data_selector: cron
- name: Conditionals
  endpoint:
    path: /performance/query-monitor/conditionals
    method: GET
    data_selector: conditionals
- name: verify_domain
  endpoint:
    path: /domains/verification/
    method: GET
    data_selector: verification
    params: {}
- name: DNS Instructions
  endpoint:
    path: /domains/point-dns-to-vip/
    method: GET
    data_selector: DNS settings
    params: {}
- name: domain_mapping
  endpoint:
    path: /domains/map-a-domain
    method: GET
    data_selector: records
    params: {}
- name: domain_verification
  endpoint:
    path: /domains/verification
    method: GET
    data_selector: records
    params: {}
- name: dns_pointing
  endpoint:
    path: /domains/point-dns-to-vip
    method: GET
    data_selector: records
    params: {}
- name: Index Health
  endpoint:
    path: /enterprise-search/check-index-health/
    method: GET
- name: Indexing
  endpoint:
    path: /enterprise-search/index/
    method: POST
- name: Rate Limiting
  endpoint:
    path: /enterprise-search/rate-limiting/
    method: GET
- name: activate_feature
  endpoint:
    path: /wp/vip-search/activate-feature
    method: POST
    data_selector: result
- name: deactivate_feature
  endpoint:
    path: /wp/vip-search/deactivate-feature
    method: POST
    data_selector: result
- name: list_features
  endpoint:
    path: /wp/vip-search/list-features
    method: GET
    data_selector: features
- name: index
  endpoint:
    path: /vip-search/index
    method: POST
    data_selector: items
    params: {}
- name: post
  endpoint:
    path: /wp/vip-search/index-versions/add/post
    method: POST
- name: check_index_health
  endpoint:
    path: /wp/vip-search/health
    method: GET
    data_selector: results
- name: biography
  endpoint:
    path: /wp-admin/edit-biography
    method: GET
- name: retrieve_settings
  endpoint:
    path: /wp/vip-search/get-index-settings
    method: GET
    data_selector: settings
    params: {}
- name: retrieve_settings_for_specific_filter
  endpoint:
    path: /wp/vip-search/get-index-settings
    method: GET
    data_selector: filter
    params: {}
- name: create_index_network_site
  endpoint:
    path: /vip-search/index
    method: POST
    data_selector: index
    params:
      blog_ids: '2'
- name: search_across_network_sites
  endpoint:
    path: /vip-search
    method: GET
    data_selector: search_results
    params:
      sites: array(2, 3)
- name: create_indexes_all_sites_network
  endpoint:
    path: /vip-search/index
    method: POST
    data_selector: index
    params:
      network_wide: true
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: hits.hits
- name: search
  endpoint:
    path: /
    method: GET
    data_selector: posts
    params:
      s: onion
- name: search_dev_tools
  endpoint:
    path: /wp-admin/admin-ajax.php
    method: GET
    data_selector: results
- name: Let’s Encrypt
  endpoint:
    path: https://docs.wpvip.com/lets-encrypt-cert/
    method: GET
    data_selector: ''
    params: {}
- name: Media imports
  endpoint:
    path: https://docs.wpvip.com/vip-file-system/import-media-files/
    method: GET
    data_selector: ''
    params: {}
- name: Webhook notifications
  endpoint:
    path: https://docs.wpvip.com/notifications/webhook-urls/
    method: GET
    data_selector: ''
    params: {}
- name: Additional User-Agents
  endpoint:
    path: https://docs.wpvip.com/infrastructure/vip-user-agents/
    method: GET
    data_selector: ''
    params: {}
- name: production
  endpoint:
    path: /infrastructure/environments/production
    method: GET
    data_selector: environment_details
    params: {}
- name: preprod
  endpoint:
    path: /infrastructure/environments/preprod
    method: GET
    data_selector: environment_details
    params: {}
- name: develop
  endpoint:
    path: /infrastructure/environments/develop
    method: GET
    data_selector: environment_details
    params: {}
- name: Akismet
  endpoint:
    path: /plugins/akismet/
    method: GET
- name: Block Data API
  endpoint:
    path: /vip-go-mu-plugins/block-data-api-plugin/
    method: GET
- name: Cron Control
  endpoint:
    path: /plugins/cron-control/
    method: GET
- name: ElasticPress
  endpoint:
    path: /plugins/elasticpress/
    method: GET
- name: Jetpack
  endpoint:
    path: /plugins/jetpack/
    method: GET
- name: Lightweight Term Count Update
  endpoint:
    path: /plugins/lightweight-term-count-update/
    method: GET
- name: NGINX HTTP Concat
  endpoint:
    path: /plugins/nginx-http-concat/
    method: GET
- name: Query Monitor
  endpoint:
    path: /plugins/query-monitor/
    method: GET
- name: Rewrite Rules Inspector
  endpoint:
    path: /plugins/rewrite-rules-inspector/
    method: GET
- name: Two-Factor Authentication
  endpoint:
    path: /plugins/two-factor/
    method: GET
- name: WordPress Importer
  endpoint:
    path: /plugins/wordpress-importer/
    method: GET
- name: WordPress VIP Block Governance plugin
  endpoint:
    path: /vip-go-mu-plugins/block-governance-plugin/
    method: GET
- name: Node.js site launch
  endpoint:
    path: /launch-a-site/node-js-launch/
    method: GET
    data_selector: content
    params: {}
- name: DNS Instructions
  endpoint:
    path: /launch-a-site/point-dns-to-vip
    method: GET
    data_selector: instructions
    params: {}
- name: site_launch
  endpoint:
    path: /launch-a-site/manual-launch/
    method: GET
    data_selector: steps
    params: {}
- name: site_launch_troubleshoot
  endpoint:
    path: /launch-a-site/launch-troubleshooting/
    method: GET
    data_selector: troubleshooting_steps
- name: sql_database_files
  endpoint:
    path: /vip-dashboard/backups/
    method: GET
    data_selector: database_backups
    params: {}
- name: media_files
  endpoint:
    path: /media-backups/
    method: GET
    data_selector: media_backups
    params: {}
- name: VIP MU plugins
  endpoint:
    path: /wp-content/mu-plugins/
    method: GET
    data_selector: plugins
    params: {}
- name: VIP Site repo
  endpoint:
    path: /wp-content/
    method: GET
    data_selector: git
    params: {}
- name: VIP Go MU Plugins
  endpoint:
    path: /mu-plugins/
    method: GET
    data_selector: git
    params: {}
- name: VIP Dashboard
  endpoint:
    path: /vip-dashboard/access
    method: GET
- name: GitHub
  endpoint:
    path: /github/user/access
    method: GET
- name: New Relic
  endpoint:
    path: /new-relic/user/access
    method: GET
- name: WordPress
  endpoint:
    path: /wordpress/user/access
    method: GET
- name: Zendesk
  endpoint:
    path: /zendesk/user/access
    method: GET
- name: access_permissions
  endpoint:
    path: /manage-user-access/vip-dashboard/access-permissions
    method: GET
    data_selector: permissions
    params: {}
- name: user_roles
  endpoint:
    path: /manage-user-access/vip-dashboard/user-roles
    method: GET
    data_selector: roles
    params: {}
- name: user_management
  endpoint:
    path: /manage-user-access/
    method: GET
    data_selector: users
    params: {}
- name: user_access
  endpoint:
    path: /api/v2/users
    method: GET
- name: New Relic Users
  endpoint:
    path: /manage-user-access/new-relic/
    method: GET
    data_selector: users
    params: {}
- name: Content Intelligence
  endpoint:
    path: /parse-ly/content-intelligence
    method: GET
    data_selector: features
    params: {}
- name: Parse.ly Dashboard
  endpoint:
    path: /parse-ly/dashboard
    method: GET
    data_selector: analytics
    params: {}
- name: Parse.ly Data Pipeline
  endpoint:
    path: /parse-ly/data-pipeline
    method: GET
    data_selector: user_interaction_data
    params: {}
- name: Parse.ly API
  endpoint:
    path: /parse-ly/api
    method: GET
    data_selector: analytics_data
    params: {}
- name: plugin_loader
  endpoint:
    path: /client-mu-plugins/plugin-loader.php
    method: GET
- name: plugins
  endpoint:
    path: /plugins
    method: GET
    data_selector: plugins
    params: {}
- name: load_order_of_plugins
  endpoint:
    path: /plugins/load-order/
    method: GET
    data_selector: plugins_load_order
    params: {}
- name: plugins
  endpoint:
    path: /plugins
    method: GET
- name: plugin-loader
  endpoint:
    path: /client-mu-plugins/plugin-loader.php
    method: GET
    data_selector: ''
    params: {}
- name: client_mu_plugins
  endpoint:
    path: /client-mu-plugins
    method: GET
    data_selector: plugins
    params: {}
- name: vip_regex_redirects
  endpoint:
    path: /vip-helpers/vip-utils.php#L454
    method: GET
    data_selector: function
    params: {}
- name: vip_substr_redirects
  endpoint:
    path: /vip-helpers/vip-utils.php#L412
    method: GET
    data_selector: function
    params: {}
- name: VIP Dashboard
  endpoint:
    path: https://dashboard.wpvip.com/
    method: GET
- name: WPVIP Authentication portal
  endpoint:
    path: https://auth.wpvip.com/
    method: GET
- name: Parse.ly dashboard
  endpoint:
    path: https://dash.parsely.com/
    method: GET
- name: robots_txt
  endpoint:
    path: /robots.txt
    method: GET
    data_selector: output
    params: {}
- name: vip_support
  endpoint:
    path: /vip-support
    method: GET
    data_selector: users
    params: {}
- name: shared_media_files
  endpoint:
    path: /vip-file-system/shared-media-files
    method: GET
    data_selector: files
    params: {}
- name: tmp_directory
  endpoint:
    path: /tmp
    method: GET
    data_selector: contents
    params: {}
- name: media_files
  endpoint:
    path: /media-backups
    method: GET
    data_selector: files
    params: {}
- name: database
  endpoint:
    path: /vip-dashboard/backups
    method: GET
    data_selector: backups
    params: {}
- name: github_repository
  endpoint:
    path: /wpcomvip/github-repository
    method: GET
    data_selector: repository
    params: {}
- name: client-mu-plugins
  endpoint:
    path: /client-mu-plugins
    method: GET
- name: images
  endpoint:
    path: /images
    method: GET
- name: languages
  endpoint:
    path: /languages
    method: GET
- name: plugins
  endpoint:
    path: /plugins
    method: GET
- name: private
  endpoint:
    path: /private
    method: GET
- name: themes
  endpoint:
    path: /themes
    method: GET
- name: vip-config
  endpoint:
    path: /vip-config
    method: GET
- name: phpcs_config
  endpoint:
    path: /path/to/phpcs_config
    method: GET
    data_selector: records
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: files
    params: {}
- name: WordPress Core translations
  endpoint:
    path: /languages
    method: GET
    data_selector: translations
    params: {}
- name: Plugin and theme translations
  endpoint:
    path: /languages/plugins
    method: GET
    data_selector: translations
    params: {}
- name: Language translation plugins
  endpoint:
    path: /languages/uploads
    method: GET
    data_selector: translations
    params: {}
- name: private_directory
  endpoint:
    path: /private
    method: GET
    data_selector: files
    params: {}
- name: WordPress Core translations
  endpoint:
    path: /languages
    method: GET
    data_selector: translations
    params: {}
- name: Plugin and theme translations
  endpoint:
    path: /languages/plugins
    method: GET
    data_selector: translations
    params: {}
- name: Language translation plugins
  endpoint:
    path: /languages/uploads
    method: GET
    data_selector: translations
    params: {}
- name: application
  endpoint:
    path: /app/list
    method: GET
    data_selector: applications
    params: {}
- name: environment
  endpoint:
    path: /app/{id}
    method: GET
    data_selector: environments
    params: {}
- name: WP-CLI commands
  endpoint:
    path: /vip-cli/commands
    method: GET
    data_selector: commands
    params: {}
- name: purge_cache
  endpoint:
    path: /caching/page-cache/purge-urls
    method: POST
    data_selector: purged_urls
    params: {}
- name: user_roles
  endpoint:
    path: /wp-json/wp/v2/roles
    method: GET
    data_selector: roles
    params: {}
- name: version_support_policy
  endpoint:
    path: /version-support-policy
    method: GET
    data_selector: records
- name: major_versions
  endpoint:
    path: /major-versions
    method: GET
    data_selector: records
- name: minor_versions
  endpoint:
    path: /minor-versions
    method: GET
    data_selector: records
- name: security_releases
  endpoint:
    path: /security-releases
    method: GET
    data_selector: records
- name: local_development
  endpoint:
    path: /local-development
    method: GET
    data_selector: records
- name: Enforce Two-Factor Authentication
  endpoint:
    path: /security-controls/wordpress/enforce-2fa/
    method: GET
    data_selector: module
    params: {}
notes:
- For the WordPress REST API to work as expected, pretty permalinks must be enabled
  on the WordPress site.
- Avoid changing the rest_url_prefix from wp-json.
- The VIP Platform’s infrastructure includes several caching layers to enhance site
  performance.
- Responses with an HTTP Status Code of 200 OK are cached for 30 minutes by default.
- All requests made with HEAD or GET HTTP request methods are cached.
- Cache entries must be kept under 1MB in size.
- The hit rate for an environment’s object cache can be reviewed in the Insights &
  Metrics panel of the VIP Dashboard.
- A breakdown of the Object Cache operations on a page can be viewed in the Object
  Cache panel of Query Monitor.
- The actual default time to live (TTL) for the cached version of a static asset is
  15 days for enqueued JS and CSS files that are concatenated by VIP.
- 1 year for media files that were uploaded or imported to the VIP File System.
- 1 year for static asset files that are deployed from the application’s wpcomvip
  GitHub repository.
- This feature was deprecated in the release of WordPress versions 6.3.
- Typically, you’ll only need to disable these cache priming functions when you observe
  that they are affecting the response time of certain transactions, and they are
  unnecessary to that transaction.
- Calling uncached functions can lead to performance implications during high traffic
  events.
- A large volume of direct SQL queries can overload the primary database and lead
  to an increase in responses with a 503 HTTP status code.
- Code deployment to a WordPress environment will not cause the object cache to be
  flushed.
- Code deployment to a Node.js or WordPress environment will not clear the page cache
  for a site’s cached content responses.
- Code deployment will cause the cache to be cleared for any static asset files that
  exist within the environment’s deploying branch and the deployment included updated
  versions of those files.
- Custom Deployment can only be enabled for a WordPress application environment.
- The maximum size for the archived file is 4 GB.
- Default Deployment is enabled for all environments of WordPress applications and
  Node.js applications by default.
- Detailed Build, Prepare, and Deployment logs for code deployments made with Default
  Deployments can be reviewed in the Deployments panel of the environment’s VIP Dashboard.
- Code deployments typically take up to 5 minutes to complete.
- The amount of time required to complete a code deployment can vary depending on
  the overall size of a branch’s codebase or the size of an archived file for Custom
  Deployment and the number of files within it.
- The number of jobs that are currently in the deployment queue for the wpcomvip GitHub
  organization can delay the start of a build for a deployment during especially busy
  periods of time.
- As a security control, GitHub and OAuth Apps cannot be added to these repositories.
- By default, this repository is private but can be public if desired.
- A repository slug can only be used once within the wpcomvip organization.
- The rollback capability is limited to images of the three most recent unique deployments
  to a production environment, including the image that is currently deployed.
- The rollback capability is limited to images of the two most recent unique deployments
  to a non-production environment, including the image that is currently deployed.
- Uses WPScan API to scan for vulnerabilities
- Reports vulnerabilities via VIP Dashboard Plugins panel
- Only plugins that are located within an application’s /plugins directory are scanned.
- WP-CLI and cron must be in a healthy, functioning state on a WordPress environment
  in order for plugins associated with that environment to appear as expected on the
  Plugins panel.
- Typically, only plugins that can be downloaded from the WordPress.org Plugin Directory
  can be scanned.
- Only plugins with a valid WordPress plugin slug are eligible for an option to create
  a pull request.
- Only plugins and themes located in the /plugins, /client-mu-plugins, and /themes
  directories in the root of the application’s GitHub repository will be scanned by
  the Bot’s Vulnerability and Update Scan.
- Vulnerability and Update Scans are intended to detect security issues and available
  version updates before plugins and themes are deployed.
- Webhook request is sent with an x-wpvip-webhook HTTP request header.
- When breaking changes are made to the payload structure the version number will
  be incremented.
- Important Alerts are sent by email to all users with an Org admin role.
- Important Alerts for an application are sent by email to all users with an App admin
  role.
- No other db.php drop-ins can be used on the platform.
- Data syncs can only occur from a production environment to a single non-production
  environment at a time.
- Data syncs from the most recent backup copy of a production database, not from the
  primary database.
- After a data sync has completed, non-production environments have access to a production
  environment’s shared media files in read-only mode.
- Elasticsearch indexes are not included in the data sync process.
- Direct access to an environment’s database is limited, but users can view data in
  a read-only phpMyAdmin console session or interact with the databases on WPVIP through
  WP-CLI commands run via VIP-CLI.
- Databases for production environments are backed up every hour, including custom
  tables, and non-production databases are backed up daily.
- The hourly backups of a production environment are available for download within
  the most recent three days (72 hours).
- Backups are encrypted at rest before being replicated to Amazon AWS S3 utilizing
  encryption in transit and retained for 30 days.
- Backup SQL database download files are in a gzip-compressed plain text format with
  the file extension *.sql.gz.
- For unlaunched environments the database file for import must be smaller than 100
  GB in size.
- For launched environments the database file for import must be smaller than 5 GB
  in size.
- 'The allowed characters that can be used in the name of the file for import are
  limited to: 0-9,a-z,A-Z,.,-,_.'
- Environments that are in an Unlaunched state, including non-production environments,
  will go into maintenance mode during a SQL import.
- Optimizing core queries becomes crucial as a site’s posts table grows larger.
- Use utf8mb4 character set for SQL database files for import to avoid unexpected
  issues.
- Tables created with the utf8 charset are compatible but should be avoided due to
  their inability to store 4-byte characters.
- A production environment is provided by default for all applications.
- A preprod environment is intended for testing code and updates.
- A develop environment is recommended for testing theme updates and new plugins.
- Drop-ins are files designed to replace, add, or enhance specific WordPress Core
  features.
- A limited set of drop-ins are provisioned for all WordPress environments on the
  VIP Platform.
- The Insights & Metrics panel is environment-specific (e.g., production, develop).
- Users can interact with available settings to modify the time frame and format of
  the data that is displayed.
- Developers can only modify an application’s code by using a version-controlled GitHub
  development workflow.
- All customer development teams are strongly recommended to use the GitHub pull request
  flow in order to streamline code reviews and deployments.
- Changesets are the heart of any version control system, and making good changesets
  is vitally important to the maintainability of a codebase.
- WPVIP’s infrastructure is built to support a 'Code moves up; content moves down'
  development workflow (e.g. develop → production).
- Development teams should confirm in non-production environments that new code is
  error-free and will work as expected before the code is deployed to the production
  environment.
- All common operations, including uploads, cropping, editing, and deleting, work
  as expected through the WordPress Admin dashboard.
- The File System provides dynamic image resizing and image transformation.
- 'Files on the VIP File System are cached by NGINX with a Cache-Control HTTP header
  set to cache-control: max-age=31536000 (1 year).'
- Because the VIP File System uses an object store, it lacks a true directory structure.
- Media can only be uploaded to a path within `/uploads/`. Only paths to files that
  begin with `/wp-content/uploads/` are possible; other paths will not work.
- A limit of 2000 modifications are permitted for overwriting and versioning any particular
  file path.
- Adding third-party plugins that provide additional versions of features already
  provided by the platform may result in negative impacts on a site’s performance.
- Plugins that are intended to create SQL database and media backups, imports, and
  exports will not work as expected.
- Incompatibilities with the VIP Platform infrastructure have been observed in the
  following plugins that perform backups, exports, and imports.
- Only one import per environment can be run at a single time.
- Files imported with VIP-CLI will not appear in a site’s WordPress media library
  unless the attachment data for the files is also imported to the database.
- Media should only be imported to a production environment.
- By default, media imports do not overwrite existing files that share the same name
  and file path.
- The maximum size for an individual file imported to VIP’s File System is 4 GB.
- Media files that are imported to a WordPress application without an associated database
  record are not able to be deleted without assistance.
- Every application has a production environment, and typically an application also
  has two non-production environments (e.g. preprod and develop).
- Web containers for all environments run in read-only mode.
- WordPress multisite environments that have sites created in addition to the main
  site (ID 1) must create and maintain a config.yml file for the results of a data
  sync to work as expected.
- Files can only be shared from a production environment to its associated non-production
  environments.
- The non-production environment cannot delete a file originally uploaded to the production
  site.
- Plugins cannot be installed, updated, or deleted from within the WordPress Admin
  dashboard.
- Plugins added to the /plugins directory are automatically scanned by Codebase Manager
  for security vulnerabilities and available version updates.
- By default, the Bot only analyzes repositories that deploy to WordPress environments.
- The Bot’s behavior can be customized and PHPCS scans can be selectively enabled.
- The Bot is triggered and managed by an internal Continuous Integration (CI) software.
- The Bot is already enabled and configured in all repositories belonging to the wpcomvip
  GitHub organization; no setup or configuration is required by VIP customers.
- 'All Node.js applications must implement the health check endpoint using application
  code. The VIP Platform sends frequent health checks at this endpoint: /cache-healthcheck?'
- Access to an application’s GitHub repository requires a user to accept an invitation
  as well as to configure two-factor authentication (2FA) for their GitHub user account.
- Enterprise Managed Users can only contribute to private and internal GitHub repositories
  within their enterprise and their own private repositories. GitHub users with managed
  user accounts cannot be invited to repositories in the wpcomvip GitHub organization.
- Only users with an Org admin role can invite, remove, and manage user access levels
  for other users in the VIP Dashboard.
- If an organization currently has no users with the Org admin role, existing users
  may be unable to view certain features.
- Custom domains must be added to the 'Domains & TLS' panel of an environment and
  the domain must be verified in order to be used for site launches or sending emails.
- All domains must have a TLS certificate installed in order to be assigned to the
  Site Address (URL) of a site receiving traffic.
- TLS certificates can be procured and installed as a self-service feature of the
  VIP Dashboard.
- Whole-site HTTPS is enabled for all environments by default on the VIP Platform.
- Environments continue to be available throughout the update process.
- Available security updates for active versions of software are automatically applied
  to environments.
- Logs can also be useful for debugging, security, and incident investigation.
- Not all WP-CLI commands can be run against a VIP environment.
- There is a limit of 4 WP-CLI commands that can be run on a VIP environment concurrently.
- 'Caution: Do not use the sudo command during installation of VIP-CLI or Node.js,
  or when running any VIP-CLI commands.'
- For Windows users, a compatible WSL Linux distribution must be installed on the
  users local machine.
- A user can only log in to an organization’s VIP Dashboard with the email address
  to which the invitation was sent.
- A user’s email address can be invited to the VIP Dashboard by more than one organization.
- After accepting an invitation, users can log into the VIP Dashboard with multi-factor
  authentication.
- Access to an application’s GitHub repository is not required for access an organization’s
  VIP Dashboard.
- The `WordPress-VIP` standard has been deprecated, is not used in the latest version
  of VIPCS, and has been removed completely from WordPressCS 2.x.
- The current VIP-Coding-Standards (VIPCS) 3.x release requires at minimum WordPress-Coding-Standards
  (WordPressCS) 3.x.
- By default, WP_DEBUG is defined as false on production environments and true on
  non-production environments.
- On VIP Platform environments, WP_DEBUG_LOG is set to false and cannot be overridden.
- Runtime Logs provides an aggregated, near real-time view into recent application
  logs generated by WordPress and Node.js environments on the WPVIP Platform.
- The Runtime Logs panel is environment-specific (e.g., production, develop).
- Logs are aggregated from across multiple containers, then grouped by container and
  ordered by timestamp.
- Runtime Logs fetches raw logs from containers.
- Logs are not guaranteed to persist for any length of time and will be cleared as
  needed.
- Logs for up to 100 of the most recent slow queries that have occurred on an environment
  can be accessed in the Slow Query Logs panel.
- For users with an App write role, sensitive data will be obfuscated with ? characters.
- New Relic activation for a non-production environment is temporary and will auto-disable
  after 7 days.
- No New Relic account other than WordPress VIP’s can be configured for an environment.
- When a domain is added to an environment’s VIP Dashboard, the www or the non-www
  variant of the domain is also included and associated with that environment.
- Redirects between the www or non-www variants of a domain are automatic on WordPress
  single sites but must be configured in code for WordPress multisites.
- Custom domains must be added to an environment’s VIP Dashboard in order to be used
  for launching a site or sending emails from an environment with that domain.
- After adding a custom domain, the domain must also be verified before DNS settings
  can be provided and a Let’s Encrypt certificate can be installed.
- A domain must be verified before DNS instructions can be accessed and before a Let’s
  Encrypt certificate can be installed.
- The new TXT record could require up to 48 hours to fully propagate before it can
  be detected.
- DNS settings for ALIAS, ANAME, and A Record are provided for root domains.
- DNS settings for CNAME records are provided for subdomains.
- VIP recommends using ALIAS records to route DNS for root domains whenever possible.
- All VIP Platform environments are initially created with a convenience domain assigned
  to them.
- A custom domain that does not yet have DNS pointed to VIP can be assigned as the
  primary domain.
- Convenience domains are intended for environments to use during initial development
  and to facilitate pre-launch tasks.
- VIP does not allow sites on a production environment to launch with the convenience
  domain.
- Environments using a convenience domain are set to the whole-site HTTPS, with all
  HTTP traffic being redirected to HTTPS; this cannot be changed.
- WordPress environments that are accessible at a convenience domain have a hard-coded
  /robots.txt output intended to prevent search engines from indexing content.
- Sub-subdomains of the convenience domain are not supported.
- VIP recommends reducing the Time to Live (TTL) of a domain’s DNS record to 300 seconds
  at least a day before launching a site.
- Lowering a long TTL in the DNS record does not immediately purge cached values in
  other nameservers.
- Modifying a hosts file only affects a user’s local computer, and will need to be
  repeated on any other devices that are used for testing.
- The new custom domain must already be added to an environment’s Domains panel in
  the VIP Dashboard.
- Convenience domains cannot be used for sending emails.
- Custom code added to client-sunrise.php can enable a network site to be accessible
  from more than one URL.
- All domains must be added to the environment’s VIP Dashboard before they can be
  used for launching network sites.
- Enterprise Search can improve the performance of search results for a WordPress
  site, but limitations exist and default behaviors should be reviewed.
- Enterprise Search features such as facets, related posts, terms, and more can be
  enabled per site with custom WP-CLI commands run with VIP-CLI.
- VIP does not provide a public endpoint for running searches.
- Currently, the ElasticPress features Autosuggest, Comments, Documents, and Instant
  Results cannot be enabled for Enterprise Search.
- If a search query attempts to retrieve more than 10,000 documents (search results),
  the query will instead fall back to a regular MySQL database query.
- The arguments post__in, post_name__in, post_parent__in, or parent are unsupported
  for orderby.
- A default character length limit of 510 is applied to users with an edit_posts capability
  and 80 for users without.
- Data sync only syncs the SQL database of a production environment to a non-production
  environment.
- VIP applies rate limiting to protect the search services from instability caused
  by spikes in requests.
- To query for and obtain post data in JSON format directly from a browser or other
  client via an AJAX request, a custom, cacheable, API adapter route should be built.
- Integration activation is environment-specific.
- If any other variants of Elasticsearch-backed functionality exist in the application
  codebase, disable or remove that code entirely.
- Features cannot be toggled on a global network basis for WordPress multisite environments.
- Indexing is dependent on built-in WordPress event action hooks.
- Content is indexed incrementally as it is created and updated.
- Versioning makes it possible to perform a reindex of an Elasticsearch index without
  needing to drop the current index.
- Wide range of subcommands available in `wp vip-search health` to check if an index
  is in sync with the database.
- All public post types, statuses, and public taxonomy terms will be indexed.
- Post meta is not indexed and will need to be explicitly defined.
- To enable indexing of all post types and statuses (including private ones), the
  'Protected content' feature must be activated.
- Not all queries should be offloaded to Enterprise Search.
- Unnecessarily offloading queries can have unexpected negative effects.
- Slow queries and queries that are poorly performing can be identified in the Slow
  Query Logs panel in the VIP Dashboard.
- Access requires a user to be logged in with a WordPress Administrator role.
- Activating the Protected Content feature will send WordPress Admin search queries
  to Elasticsearch, but also risks exposing non-public content to unauthorized users.
- The default analyzer will be included in the results returned by the command.
- Requires that jq is installed on the local machine
- Creating unused indexes can negatively impact the indexing and revalidation operations.
- If a multisite has over 100 sites, create an index on a per-site basis.
- Rate limiting is a measure put in place to protect a site’s search services from
  spikes in requests that can cause instability.
- When Elasticsearch queries are rate limited, a portion of the requests will go to
  the database instead.
- Depending on the type of queries and the volume of queries made, they could overload
  the primary database and lead to an increase in responses with a 503 HTTP status
  code.
- Communications occur asynchronously, so there may be a slight delay between when
  a change is made in WordPress and when the change appears in Elasticsearch.
- The WordPress database should be referred to as the source of truth for search results.
- Enable VIP Search by defining constants in vip-config.php
- The generated posts will be immediately indexed.
- Queries may become slow on a site with numerous posts and a large volume of public
  traffic.
- NGINX rules for the edge cache are set at platform-level and cannot be customized
  per-application.
- Some third-party performance scans may not recognize VIP’s CDN due to content being
  served from the same domain as the site hosted on VIP.
- Requests to a site first pass through an edge cache server.
- Insights into the duration of time it takes for an environment's origin server to
  generate a response and send it back to the cache can be reviewed in the Insights
  & Metrics panel of the VIP Dashboard.
- VIP Platform IP ranges are subject to change at any time, and advance warning of
  IP range updates is not provided.
- Applications should be built in such a way that unexpected IP range updates are
  non-breaking.
- User Agents can be a useful reference for identifying the source of a request, but
  they should not be considered authoritative proof.
- All production environment databases are backed up every hour.
- Backups are encrypted at rest before being replicated to AWS S3.
- There is no SFTP access for managing files within the /wp-content directory of a
  WordPress site on the WordPress VIP Platform.
- Files and directories for plugins and themes can only be added, updated, and removed
  via code commits to an application’s GitHub repository.
- Node.js applications are not eligible for the debugging feature regardless of the
  contracted pricing plan.
- VIP Support does not provide assistance with questions or issues related to the
  application code of a Node.js application.
- An application has either WordPress environments or Node.js environments.
- Non-production environments can be added to an application for testing and development
  purposes.
- Single sites can be visually identified by the presence of a single house icon in
  the upper left-hand corner of the WordPress Admin dashboard alongside the site title.
- WordPress multisite allows multiple sites to be created and run from a single installation
  of WordPress Core files.
- On the WPVIP Platform, the code for all of the sites on a network is stored in a
  single GitHub repository.
- Many of the plugins provisioned by VIP MU plugins are enabled by default.
- Opt in plugins can be optionally code-enabled by the customer.
- A full backup of the environment’s database occurs during site launch.
- The browser might display a warning that the site at the new URL is not secure.
- The WordPress site must be launched with a unique custom domain.
- DNS can take up to a full 24 hours to propagate around the world.
- VIP recommends using ALIAS records to route the DNS for root domains whenever possible.
- A site is considered launched when a custom domain has been assigned to the site’s
  Site Address (URL) value, the custom domain’s DNS is pointed at VIP, a TLS certificate
  has been installed for the site’s domain, and the site is publicly accessible.
- The VIP Platform is built to support a “code moves up; content moves down” workflow.
- During the redesign process, the new network site can be hidden from public traffic
  by installing and activating the Maintenance Mode plugin.
- A WordPress Super Admin user role is required to update site settings in the Network
  Admin.
- Sites on a multisite cannot be self-launched until the main site (ID 1) has been
  launched.
- The main site must be launched with a custom, non-convenience domain before any
  other site on the multisite can launch.
- VIP recommends that the main site is not a publicly accessible site and is used
  for administrative purposes only.
- Basic functions should be included in a site test to verify that they work as expected.
- Redirects between the www and non-www variants are not automatic.
- For multisite environments, additional search-replace operations may be necessary.
- An environment is considered unlaunched when it does not yet have a custom domain
  assigned as the Primary Domain and is only accessible via the convenience domain.
- A site is considered unlaunched when it does not yet have a custom domain assigned
  to it and is only accessible via the convenience domain.
- User must be invited to an organization to log in.
- Only a user with an Org admin role can invite users.
- Page cache is not available.
- The VIP File System is not available.
- Cron control is not available.
- Databases in the codespace environment are MariaDB.
- The total available disk space on a Codespace virtual machine is 32 GB.
- 'A local working development environment that is nearly identical to a VIP Platform
  environment can be created by provisioning a local environment application with
  three GitHub codebases: WordPress Core, VIP MU plugins, and an application’s wpcomvip
  GitHub repository.'
- Replace {site_name} with your GitHub repo slug
- Replace the values for {admin_username} and {admin_password} with new values chosen
  by the developer setting up the local environment.
- VIP recommends setting up a local development environment with the VIP Local Development
  Environment feature built into VIP-CLI.
- The VIP MU plugins repository uses SSH protocol for submodules. Because GitHub does
  not allow anonymous SSH connections, a GitHub account’s SSH key will need to be
  set up and used for interaction with the repository.
- New Relic is already activated for the environment.
- To manage user access for an application’s New Relic dashboard(s), a user must have
  an Org admin role for that application.
- A user must have at minimum an Org guest role with one VIP organization to log in.
- Notification emails are automatically sent each time a new or existing user is assigned
  an Administrator or a Super Admin role.
- There is no limit to the number of users that can be added to the New Relic dashboard
  for an application.
- Access is not limited to users who have access to an organization’s VIP Dashboard.
- If notification emails are not being received, verify or update the email address
  that is currently set for an environment’s Administration Email Address.
- If a site is only accessible with a convenience domain, Parse.ly activation will
  fail. A site must be reachable with a custom domain name in order for Parse.ly activation
  to be successful.
- When activated, Parse.ly is only able to collect data from publicly available sites
  and publicly accessible URLs.
- Sites under restricted access are incompatible.
- Password-protected pages, or pages blocked from crawler user agents, are incompatible.
- Parse.ly uses cookies and IP addresses, but restricts their use to recognizing unique
  browsers/devices.
- Parse.ly data collection does not link personal identity or other sensitive personal
  information.
- Plugin files and directories can only be added or removed via code commits to GitHub;
  not from within the WordPress Admin dashboard.
- Third-party plugins should be maintained at their most recent release versions.
- Plugins must be installed by adding them to the /plugins directory of an application’s
  GitHub repository.
- The wpcom_vip_load_plugin() function only works for plugins that have been installed
  in the /plugins directory.
- If the plugin name cannot be resolved, the wpcom_vip_load_plugin() function will
  throw an E_USER_WARNING type error.
- VIP cannot guarantee that an Automattic-authored plugin will be compatible with
  a customer’s site.
- WordPress VIP does not maintain a list of pre-approved third-party plugins.
- Plugins may use functions or perform actions that are incompatible with the VIP
  platform.
- VIP’s infrastructure differs from typical WordPress hosting platforms, occasionally
  preventing common operations in third-party plugins from working as expected.
- Adding third-party plugins that provide additional versions of built-in features
  may result in negative impacts on a site’s performance.
- Plugins that perform file system writes may not work as expected due to the read-only
  nature of the VIP File System.
- 'Incompatibilities with the VIP Platform infrastructure have been observed in the
  following plugins that perform backups, exports, and imports: All-in-One WP Migration,
  WP All Export, WP All Import.'
- Plugins cannot be updated or installed with CLI or within the WordPress Admin dashboard.
- WooCommerce might perform as expected without code modifications.
- Customization for WooCommerce might be needed based on the size of a product list,
  the volume of orders received each day (or hour), the number of countries where
  transactions can occur, and more.
- It is recommended to code-activate plugins instead to gain greater control and consistency
  across all environments.
- Only custom plugins with code that needs to be auto-loaded, or code that needs to
  run earlier in the WordPress load process, should be added to the /client-mu-plugins
  directory.
- Redirects with a 302 HTTP response status are cached by the page cache for 1 minute,
  and redirects with a 301 HTTP response status are cached for 30 minutes.
- Some redirects can be written directly into a site’s theme code.
- Redirects cannot be configured for any URLs that include /wp-content/uploads/*.
- To use more than one domain per site, set up vip-config.php to redirect secondary
  domains to a desired primary domain.
- By default, redirects and custom rewrite rules cannot be configured for any assets
  that match the regex \\.(css|js|jp(e)?g|gif|png|swf|ico)$.
- All characters in the domain values must be lowercase.
- The code examples provided here will only handle redirects for fully qualified domain
  names (FQDN). However, they could be modified to handle redirects for specific URIs
  (e.g., example.com/blog/) by checking the value of $_SERVER['REQUEST_URI'].
- When adding redirects to vip-config.php, be sure to exclude the /cache-healthcheck?
  URI from the redirects.
- Regex is expensive and using this helper function will cause regex operations to
  be run on every uncached page load.
- 'Caution: Regex is expensive and using this helper function will cause regex operations
  to be run on every uncached page load.'
- Adding a reverse proxy to a site can prevent some of the security protections that
  are built into WPVIP’s infrastructure from functioning as expected.
- Security features that rely on recognition of an end user’s IP address will be ineffective
  unless the reverse proxy is correctly configured to log the IP address of an end
  user.
- Using the CDN or caching features of a reverse proxy provider to serve a VIP site’s
  content instead of—or in addition to—VIP’s CDN is strongly discouraged.
- Configurations of a reverse proxy should be kept as simple as possible.
- Documenting a reverse proxy’s configuration in the application’s /docs directory
  in the GitHub repository is recommended.
- The reverse proxy must point requests for /.well-known/acme-challenge/* to VIP.
- The reverse proxy must not add any query parameters on the end of the acme-challenge
  URL.
- The ACME challenge path must be accessible over http:// and must return a 200 HTTP
  response.
- Reverse proxy configurations should be tested extensively prior to a site launch.
- Rate limiting is in place at the edge to protect the XML-RPC (`/xmlrpc.php`) endpoint
  for all WordPress sites.
- If requests from an IP address to a site’s XML-RPC exceed the threshold of 10 requests
  per 30 seconds, a one-hour block timeout will be enforced for that IP address.
- This rate limit is global and not customizable per application.
- WordPress VIP does not provide domain registration or DNS management services.
- All web containers run in read-only mode.
- The functionality of the WP Cron endpoint is disabled for all WordPress sites.
- VIP acts as a data processor for the customer; the customer is the data controller.
- VIP explicitly discourages the collection, transmission, processing and storage
  of sensitive or protected data.
- All users should have two-factor authentication (2FA) enabled for their WordPress
  accounts.
- Never put passwords in text documents, Google Docs, intranet pages, post-it notes
  or other unencrypted forms of storage.
- The scope of testing must be limited to the domains mapped to the environments of
  the customer’s application.
- Customers are not permitted to conduct their own security assessments of VIP’s infrastructure
  or services (e.g. the VIP Dashboard and API). If a customer has questions about
  what falls within the scope of “infrastructure or services” they can ask for more
  details in the VIP Support ticket.
- Do not perform Denial-of-Service (DoS) attacks or simulations against an environment
  on the VIP Platform, VIP’s infrastructure, or any of VIP’s services. Any testing
  that is found to be abusive, or impactful on VIP’s systems—or impactful to other
  customers—will likely be blocked.
- Requests are only blocked if they are determined to be harmful to the platform (e.g.
  too many per second). VIP cannot allow a specific IP to bypass the limits that are
  in place, as they are part of a global safeguard that protects all sites on the
  platform from bad traffic.
- Specific IP addresses cannot be added to a VIP Platform allow list.
- A rate limiting threshold of 10 XML-RPC requests per minute is in place at the edge.
  If this limit is exceeded, a one-hour block timeout will occur, during which a 403
  Forbidden HTTP response status code will be returned. This rate limit is global
  and is not customizable per environment.
- MFA is required for VIP Dashboard user accounts and is strongly recommended for
  all user accounts.
- Be wary of links in messages even if they are from a known contact.
- Never trust user input.
- Never assume anything.
- Sanitization is okay, but validation/rejection is better.
- Validation on the client-side is for the user’s benefit; validation/sanitization
  on the server-side is always needed.
- Cross Site Scripting (XSS) is the primary vulnerability in JavaScript.
- To ensure the security of your application, use the DOM APIs provided by the browser
  (or jQuery) for all DOM manipulation.
- Values are expected to be encoded appropriately with `urlencode()` or `rawurlencode()`.
- Using `rawurlencode` on any variable used as part of the query string will prevent
  parameter hijacking.
- Basic Authentication is useful when other methods of site restriction are not available.
- All requests made to an environment with Basic Authentication enabled will bypass
  the page cache.
- A maximum of 1,000 entries are allowed in an IP Restriction list. If a greater number
  of entries are required, create a Support request.
- An active IP Restriction List will also block content from Jetpack’s content distribution
  tools.
- Configurations in an IP Restriction list might unintentionally block external services
  and tools that connect to an application.
- Configurations in an “IP Allow List” or an “IP Deny List” might unintentionally
  block external services and tools that connect to an application.
- IP restrictions that are added to an environment must not block requests from the
  Automattic network or block site access for VIP Support.
- A maximum of 25 rule entries can be added to User Agent Restrictions. If additional
  entries are needed, create a Support request.
- Configurations in a User Agent Restriction rule might unintentionally block external
  services and tools that connect to an application.
- User Agent Restriction rules that are added to an environment must not block requests
  from the Automattic network, requests from User Agents associated with VIP services,
  or block site access for VIP Support.
- Settings are per-environment. For WordPress multisite environments, different settings
  cannot be applied per-network site.
- If the `remove_all_filters()` function exists in application code, WordPress Security
  Controls will not work as expected.
- Only one mode can be enabled on a single WordPress environment at a single time.
- The Access-Controlled Files feature has no effect on static files (e.g., CSS, JS)
  committed to an application’s GitHub repository.
- Cached responses for file URLs might already exist on the edge cache prior to the
  activation of the Access-Controlled Files feature and mode enablement.
- Improper use of this filter may expose private data. Developers must ensure that
  files put into the shared directory are allowed to be shared and that the logic
  they implement enforces proper access control to prevent data leaks or unauthorized
  access.
- Be careful not to restrict legitimate traffic. Always take time to confirm that
  the restriction logic will not block traffic intended to be unrestricted.
- Application code to restrict requests should be added as a plugin in the /client-mu-plugins
  directory to ensure that restricted requests are blocked early.
- Requests blocked via application code are blocked at the origin, not the edge (load
  balancer). If a request is served from the cache at the edge, it does not reach
  the origin and cannot be restricted by application code.
- To restrict an entire environment to one or more IP addresses, the recommended approach
  is to use the VIP Dashboard’s IP Restrictions feature as it does not depend on application
  code but rather blocks requests at the edge (load balancer).
- Any IP-based restrictions at the application level must allow requests from the
  Automattic network. Site access for VIP Support is required for a site to be fully
  supported.
- Content of sites with access restrictions in place will continue to be syndicated
  via Jetpack’s content distribution tools.
- Crawling is blocked for go-vip.co and go-vip.net domains
- Default settings applied to prevent search engines from indexing content
- 'By default, files on the VIP File System are cached by NGINX with a `Cache-Control`
  HTTP header set to `cache-control: max-age=31536000` (1 year). This cannot be modified.'
- Requests that include zero, one, or two path prefixes before `/wp-content/uploads/`
  are sent to the VIP File System e.g. `/articles/wp-content/uploads/...` and `/legacy/articles/wp-content/uploads/...`
  show the same content as the equivalent path as `/wp-content/uploads/...`.
- Separate intermediate image files are not created for images that are uploaded to
  a WordPress media library.
- All images are automatically converted and served as next-gen formats, including
  *.webp files, to compatible browsers.
- Image files are served relative to the home_url of their site.
- Responsive images are automatically supported by WordPress Core.
- By default, image metadata is not stripped.
- Only one media backup can be prepared at a time.
- Media backups for larger numbers of files will take a longer time to prepare.
- Up to 3 previously requested and available media backups are listed under “Available
  Backups”. Each previously requested backup will expire after 7 days and be removed
  from the list.
- Media backups are requested per environment. Each backup will include only the media
  files that were uploaded through WordPress, or imported via VIP-CLI to that specific
  environment.
- A production environment’s media files are made available for reference to non-production
  environments after a data sync. A media backup of a non-production environment will
  not include the media that is referenced from production.
- Media backups will not be available for a WordPress multisite environment if a site
  on the network is under maintenance mode, has a domain misconfiguration, or is inaccessible
  due to other configuration issues.
- Media backups for an individual network site of a WordPress multisite environment
  will not be accessible in the Media Backups panel if cron is not operational, or
  if the network site is inaccessible due to other configuration issues.
- The directory structure of all media files that were uploaded prior to adding the
  filter will remain unchanged.
- Not all use cases for overwriting and versioning are ideal or supported.
- Files and directories can only be relied on for the duration of the current request.
- Each request may be served by a different container and the sequence of requests
  from a given user are not guaranteed to be served by the same container.
- Only customers with Enhanced or Signature (Application or Premier) packages are
  eligible to request assistance with debugging issues with their application code.
- Zendesk is FedRAMP Authorized, and FedRAMP customers are responsible for the data
  they place in a Zendesk support ticket.
- The WPVIP Support team requires most if not all of the information listed below
  to proceed with an investigation.
- If assistance is requested for debugging an issue, the Support team will need most
  if not all of the following information.
- A user must have an existing account on WPVIP’s Feedback Portal to submit feedback.
- Notify the VIP team 30 days in advance of the desired retirement date.
- The .editorconfig file is recommended but is not required.
- A .phpcs.xml.dist file exists by default in all wpcomvip GitHub repositories.
- It is recommended to keep the WordPress-Extra and WordPress-Docs rules active.
- Files located within the `/images` directory will be publicly accessible at the
  base path `/wp-content/images/`.
- Theme files and directories can only be added, removed, or updated via code commits
  to GitHub; not from within the WordPress Admin dashboard.
- Code quality of a theme can be verified before adding it to a GitHub repository
  by scanning the theme code with PHP_Codesniffer.
- Do not store API keys and secrets in vip-config.php. Define API keys and secrets
  by setting environment variables with VIP-CLI.
- Fatal or syntax errors in this file are likely to cause an entire site or multisite
  to be unavailable. All updates made to vip-config.php should be tested in a non-production
  environment before deploying to production.
- Static files must be added within one of the supplied directories in the WordPress
  skeleton codebase.
- Logs for an environment’s builds and deploys can be reviewed in the VIP Dashboard.
- Deployment notifications can be configured for an application’s environments.
- A rollback to a previous commit can be performed in the Deployments panel of the
  VIP Dashboard for an environment.
- Some language translation plugins expect that translation files can be written to
  a site’s /uploads directory. Because the VIP File System is read-only, this will
  not work as expected.
- By default, VIP uses an in-house analytics system to record information about usage
  of the VIP-CLI tool.
- To opt-out of this data collection, set the DO_NOT_TRACK environment variable to
  1.
- VIP-CLI commands should never be run with the `sudo` command.
- Users must accept an invitation to access the VIP Dashboard.
- Users can log in using multi-factor authentication.
- Up to 4,000 URLs can be purged at one time.
- Each VIP Platform environment has its own discrete set of environment variables.
- Environment variables on a VIP Platform environment can only be managed with VIP-CLI.
- For Action Scheduler to be available on a site, it must either be installed as a
  library or as a plugin.
- Even when Action Scheduler is installed as a plugin, no user interfaces for scheduling
  actions will be available, and interactions must be made via code.
- For WordPress versions prior to v6.6, the Options API functions add_option() and
  update_option() accept a parameter $autoload which defaults to yes.
- On VIP, all Memcached objects have a limit of 1 MB per object (compressed).
- Upcoming beta features for the block editor can be tested by installing and activating
  the Gutenberg plugin on a non-production environment.
- The block editor is dependent on the WordPress REST API.
- VIP recommends using helper functions rather than traditional methods to ensure
  that the code works as expected on the WordPress VIP platform.
- Custom changes that are made to roles and capabilities will trigger a database update.
- Only Super Admin has unfiltered_html capability in multisite.
- VIP’s infrastructure for message delivery is not designed for the distribution of
  HTML emails, mailing list functionality, invitations to view or share content, notifications
  of site activity, or other messages generated in bulk. As a result, emails that
  are sent in bulk amounts through VIP’s infrastructure are likely to be flagged as
  spam. To prevent this issue, a third-party SMTP (Simple Mail Transfer Protocol)
  service or ESP (Email Service Provider) should be used for bulk emailing purposes.
- The size of a message sent through WPVIP’s mail servers—after encoding—cannot exceed
  100 MB.
- The email address of the sender cannot be modified for emails that are sent by the
  Jetpack Subscription feature.
- WPVIP customers can make up to 1,000 requests per site to the Jetpack AI Assistant
  block.
- Do not use date_default_timezone_set(). WordPress Core requires the timezone in
  PHP to be GMT+0, and several dependent features will break if the timezone is adjusted.
- current_time( 'timestamp' ) is no longer recommended since WordPress 5.3.
- By default, PHP’s memory_limit on VIP Platform WordPress environments is set to
  768MB.
- WP_MEMORY_LIMIT is set to 40MB for WordPress single sites, and 64MB for WordPress
  multisites.
- By default, the WordPress VIP Platform sets revisions for a WordPress environment
  to unlimited (`-1`). This default can be overridden by defining `WP_POST_REVISIONS`
  with a custom integer value in `vip-config.php` of the branch that deploys to the
  environment.
- Limiting revisions enhances performance by reducing the number of revisions stored
  in the database, which can significantly improve site performance on sites with
  frequent content updates.
- Plugins such as MultilingualPress leverage multisite network capabilities to create
  a separate site for each language translation.
- The functionality of WordPress Core’s /wp-cron.php is disabled for all sites on
  WordPress VIP.
- Running WP-CLI commands (including custom WP-CLI commands) inside a cron action
  by calling WP_CLI::runcommand() will not work.
- Customization for WooCommerce might be needed based on the size of a product list,
  the volume of orders received each day, and the number of countries where transactions
  can occur.
- When customizing WooCommerce on the VIP Platform, leverage page caching and object
  caching as much as possible.
- Ensure that product imagery is web optimized.
- If specific content, such as stock levels, price data, etc., must be loaded dynamically,
  identify if it is possible to request and store it client-side.
- If your WooCommerce customizations include making database queries, seek to optimize
  those database queries.
- Settings in the Enforce Two-Factor Authentication module cannot be applied to users
  that have a custom role assigned to them.
errors:
- '401 Unauthorized: Responses with this status code are not cached.'
- '429 Too Many Requests: Responses with this status code are not cached.'
- '503 Service Unavailable: Possible overload of the primary database due to excessive
  SQL queries.'
- Ensure SQL file uses supported collations and character sets.
- '404: Returned by NGINX for requests for URIs that do not exist within the VIP File
  System path.'
- '503: A large volume of simultaneous SQL queries can overload the primary or replica
  databases.'
- Import failed for files without extensions.
- Hidden files or files within hidden directories will be ignored.
- File paths that are more than 255 characters in length.
- File paths that end with a forward-slash.
- E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_STRICT
- E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE
  | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR
- 'Rate limit: 20 fetch attempts per environment every 2 minutes'
- 'Rate limit: 20 fetch attempts per user and per environment every 60 seconds'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'ms_site_not_found: Domain related to the logged error not matching any network
  site.'
- Configuration warnings are thrown using _doing_it_wrong() calls.
- 'Error: An index is already occurring. Try again later.'
- 'Rate limiting: Queries that are offloaded may encounter rate limiting.'
- '503: Indicates that the service is unavailable due to rate limiting.'
- 'There was an error updating your site domain: Only one site launch can be performed
  at a time.'
- 'SITE_NOT_FOUND: Issues related to domain or reverse proxy configurations'
- '503: High volume of simultaneous SQL queries can overload the primary or replica
  databases.'
- 'E_USER_WARNING: If the plugin name cannot be resolved to a plugin in the /plugins
  directory.'
- '404: NGINX returns a 404 response for requests to any file URIs that match that
  regex and do not exist within the VIP File System path.'
- Unauthorized access attempts may trigger dynamic security protocols.
- '403 Forbidden: Requests are blocked if they are determined to be harmful to the
  platform.'
- If login credentials were submitted to a fake site, log in to the user accounts
  using a correct and validated URL, and reset the account password.
- '404: By default, a `404` will be returned by NGINX for requests for URIs that match
  the regex `\.(css|js|jp(e)?g|gif|png|swf|ico)$` and do not exist within the VIP
  File System path.'
- '405 Method Not Allowed: Modifications beyond the limit of 2000.'
- Rewrite rules cannot be applied to static file URLs that include the directory path
  /wp-content/uploads/.
- 'Error: Rate limit exceeded: Please wait a moment and try again.'
- Received status code 401
- 'HTTP status code 503: Error 1024 (alloptions)'
- '503: Error 1024 (alloptions)'
auth_info:
  mentioned_objects: []
client:
  base_url: https://dashboard.wpvip.com/
  headers:
    Accept: application/json
source_metadata: null
