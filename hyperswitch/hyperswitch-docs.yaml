resources:
- name: success_rate
  endpoint:
    path: /success_rate.SuccessRateCalculator/UpdateSuccessRateWindow
    method: POST
    data_selector: success_rate_data
    params: {}
- name: fetch_success_rate
  endpoint:
    path: /success_rate.SuccessRateCalculator/FetchSuccessRate
    method: POST
    data_selector: fetch_success_rate_data
    params: {}
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: health
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: records
    params:
      confirm: true
      capture_method: automatic
      payment_method: ''
- name: capture_payment
  endpoint:
    path: /payments/{payment_id}/capture
    method: POST
    data_selector: records
    params: {}
- name: confirm_payment
  endpoint:
    path: /payments/{payment_id}/confirm
    method: POST
    data_selector: records
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: object
- name: payment
  endpoint:
    path: /payments/{payment_id}
    method: POST
    data_selector: object
    params: {}
- name: payments
  endpoint:
    path: /payments/{payment_id}
    method: POST
    data_selector: response
    params: {}
- name: confirm_payment
  endpoint:
    path: /payments/{payment_id}/confirm
    method: POST
    data_selector: object
- name: payments_confirm
  endpoint:
    path: /payments/{payment_id}/confirm
    method: POST
    data_selector: payment_id
    params: {}
- name: payments_retrieve
  endpoint:
    path: /payments/{payment_id}
    method: GET
- name: payment
  endpoint:
    path: /payments/{payment_id}
    method: GET
    data_selector: payment
    params: {}
- name: payments_cancel
  endpoint:
    path: /payments/{payment_id}/cancel
    method: POST
    data_selector: ''
    params: {}
- name: cancel_post_capture
  endpoint:
    path: /payments/{payment_id}/cancel_post_capture
    method: POST
    data_selector: null
    params: {}
- name: payments_capture
  endpoint:
    path: /payments/{payment_id}/capture
    method: POST
    data_selector: captures
    params: {}
- name: capture_payment
  endpoint:
    path: /payments/{payment_id}/capture
    method: POST
    data_selector: object
    params: {}
- name: incremental_authorization
  endpoint:
    path: /payments/{payment_id}/incremental_authorization
    method: POST
    data_selector: object
    params: {}
- name: incremental_authorization
  endpoint:
    path: /payments/{payment_id}/incremental_authorization
    method: POST
    data_selector: response
- name: session_token
  endpoint:
    path: /payments/session_tokens
    method: POST
    data_selector: session_token
    params: {}
- name: payments_link_retrieve
  endpoint:
    path: /payment_link/{payment_link_id}
    method: GET
    data_selector: payment_link_id
    params: {}
- name: payments_list
  endpoint:
    path: /payments/list
    method: GET
    data_selector: data
- name: payments_list
  endpoint:
    path: /payments/list
    method: GET
    data_selector: data
- name: external_3ds_authentication
  endpoint:
    path: /payments/{payment_id}/3ds/authentication
    method: POST
    data_selector: AuthenticationResponse
- name: complete_authorize
  endpoint:
    path: /{payment_id}/complete_authorize
    method: POST
    data_selector: object
    params: {}
- name: payments_complete_authorize
  endpoint:
    path: /{payment_id}/complete_authorize
    method: POST
    data_selector: payment_id
    params: {}
- name: update_metadata
  endpoint:
    path: /payments/{payment_id}/update_metadata
    method: POST
    data_selector: metadata
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: POST
    data_selector: payment_method
    params: {}
- name: payment_method
  endpoint:
    path: /payment_methods/{method_id}
    method: GET
    data_selector: object
- name: payment_method_update
  endpoint:
    path: /payment_methods/{method_id}/update
    method: POST
    data_selector: object
    params: {}
- name: payment_method_delete
  endpoint:
    path: /payment_methods/{method_id}
    method: DELETE
    data_selector: payment_method_id
    params: {}
- name: set_default_payment_method
  endpoint:
    path: /{customer_id}/payment_methods/{payment_method_id}/default
    method: POST
    data_selector: default_payment_method_id
    params: {}
- name: payment_methods
  endpoint:
    path: /account/payment_methods
    method: GET
    data_selector: payment_methods
- name: customer_payment_methods
  endpoint:
    path: /customers/payment_methods
    method: GET
    data_selector: customer_payment_methods
- name: customer_payment_methods
  endpoint:
    path: /customers/{customer_id}/payment_methods
    method: GET
    data_selector: customer_payment_methods
    params: {}
- name: set_default_payment_method
  endpoint:
    path: /{customer_id}/payment_methods/{payment_method_id}/default
    method: POST
- name: list_payment_methods_for_customer
  endpoint:
    path: /list-payment-methods-for-a-customer
    method: GET
- name: organization_create
  endpoint:
    path: /organization
    method: POST
    data_selector: organization_id
- name: organization
  endpoint:
    path: /organization/{id}
    method: GET
    data_selector: organization_details
    params: {}
- name: organization_update
  endpoint:
    path: /organization/{id}
    method: PUT
    data_selector: organization
    params: {}
- name: payouts_list
  endpoint:
    path: /payouts/list
    method: POST
    data_selector: data
    params:
      limit: 1
      offset: 1
notes:
- If you do not hold a PCI certification to collect and store card data on your servers,
  we recommend using Unified Checkout to accept card information from users.
- Never expose secret or admin keys in client-side or mobile code. Use publishable
  keys for public contexts.
- Admin API keys for the hosted Hyperswitch environments (sandbox/production) are
  managed by Juspay and are not provided publicly.
- The default rate limit for all Hyperswitch APIs is 80 requests per second.
- 'Supports multiple payment capture methods: automatic, manual, manual_multiple,
  scheduled'
- 3DS authentication automatically resumes payment processing after customer completion
- Use the API key created under your merchant account from the HyperSwitch dashboard.
  API key is used to authenticate API requests from your merchant server only. Don't
  expose this key on a website or embed it in a mobile application.
- API key is used to authenticate API requests from your merchant server only.
- Uses API key for authentication
- A payment must be in a capturable state (e.g., requires_capture).
- Use the api-key for authorization in the header.
- API requires setup of API key.
- Use the API key created under your merchant account from the HyperSwitch dashboard.
- Admin API keys allow you to perform some privileged actions such as creating a merchant
  account and Merchant Connector account.
errors:
- 'IR_00: This API is under development and will be made available soon'
- 'IR_01: API key not provided or invalid API key used. Provide the API key in the
  Authorization header using api-key (e.g api-key: API_KEY) or create a new API key
  from the dashboard'
- 'IR_02: Unrecognized request URL'
- 'IR_03: The HTTP method is not applicable for this API'
- 'IR_04: Missing required param: “field_name”'
- 'IR_05: “field_name” contains invalid data. Expected format is “expected_format”'
- 'IR_06: “message”'
- 'IR_07: Invalid value provided: “field_name”'
- 'IR_08: Client secret was not provided'
- 'IR_09: The client_secret provided does not match the client_secret associated with
  the Payment'
- 'IR_10: Customer has an existing mandate/subscription'
- 'IR_11: Customer has already been redacted. No action required'
- 'IR_12: Reached the maximum refund attempts'
- 'IR_13: Refund amount exceeds the payment amount'
- 'IR_14: This Payment could not be “current_flow” because it has a “field_name” of
  “current_value”. The expected state is “states”'
- 'IR_15: Invalid Ephemeral Key for the customer'
- 'IR_16: “message”'
- 'IR_17: Access forbidden, an invalid JWT token was used'
- 'IR_18: ”message”'
- 'IR_19: ”message”'
- 'IR_20: ”flow” not supported by the “connector”'
- 'IR_21: Missing required params'
- 'IR_22: Access forbidden. Not authorized to access this “resource”'
- 'IR_23: ”message”'
- 'IR_24: Invalid “wallet_name” wallet token'
- 'IR_25: Cannot delete the default payment method'
- 'IR_26: Invalid Cookie'
- 'IR_27: Extended card info does not exist'
- 'IR_28: ”message”'
- 'IR_29: ”message”'
- 'IR_30: Merchant connector account is configured with invalid config'
- 'IR_31: Card with the provided iin does not exist'
- 'IR_32: The provided card IIN length is invalid, please provide an iin with 6 or
  8 digits'
- 'IR_33: File not found / valid in the request'
- 'IR_34: Dispute id not found in the request'
- 'IR_35: File purpose not found in the request or is invalid'
- 'IR_36: File content type not found / valid'
- 'IR_37: ”message”'
- 'IR_38: ”message”'
- 'IR_39: required payment method is not configured or configured incorrectly for
  all configured connectors'
- 'CE_00: The error code and message passed from the connectors. Refer to the respective
  connector’s documentation for more information on the error'
- 'CE_01: Payment failed during authorization with the connector. Retry payment'
- 'CE_02: Payment failed during authentication with the connector. Retry payment'
- 'CE_03: Capture attempt failed while processing with the connector'
- 'CE_04: Invalid card data passed. Please pass valid card data'
- 'CE_05: Card expired. Please pass valid card data'
- 'CE_06: Refund failed while processing with the connector. Retry refund'
- 'CE_07: Retry the operation again as verification failed at the connector'
- 'CE_08: Retry the operation again as dispute failed at the connector'
- 'CE_09: Retry the operation again with correct Payout details.'
- 'HE_00: Resource not available right now, Please try again later.'
- 'HE_01: Requested operation(Customer, Payments, Merchants, Refunds etc.) for these
  identifier already exists.'
- 'HE_02: Requested object(Customer, Payments, Merchants, Refunds etc.) does not exist
  in our records'
- 'HE_03: Validation Failed for the requested operation with the given details.'
- 'HE_04: Requested object(Customer, Payments, Merchants, Refunds etc.) does not exist
  in our records'
- 'HE_05: Missing or invalid tenant details.'
- 'WE_01: Failed to authenticate the webhook'
- 'WE_02: Bad request received in webhook'
- 'WE_03: There was some issue processing the webhook'
- 'WE_04: Webhook resource not found'
- 'WE_05: Unable to process the webhook body'
- 'WE_06: Merchant Secret set by merchant for webhook source verification is invalid'
- '429: Error responses indicated by the status code 429.'
- '400: Bad Request'
- '200: Success'
- '404'
- '400: Payment canceled post capture'
- '200: Payment captured'
- '400: Bad Request - Check your request parameters.'
- '200: Payment session object created or session token was retrieved from wallets'
- '404: Not Found'
- '200: OK'
- '200'
- '200: Payment Method updated'
- '200: Payment Method deleted'
- '400'
auth_info:
  mentioned_objects: []
client:
  base_url: https://sandbox.hyperswitch.io
  auth:
    type: apikey
source_metadata: null
