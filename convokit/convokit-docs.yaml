resources:
- name: MongoDB Atlas
  endpoint:
    path: /account/register
    method: GET
- name: Corpus
  endpoint:
    path: /corpus
    method: GET
    data_selector: data
    params: {}
- name: conversation
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: conversations
- name: utterance
  endpoint:
    path: /api/utterances
    method: GET
    data_selector: utterances
- name: speaker
  endpoint:
    path: /api/speakers
    method: GET
    data_selector: speakers
- name: conversation
  endpoint:
    path: /get_conversation
    method: GET
    data_selector: conversations
    params: {}
- name: utterance
  endpoint:
    path: /get_utterance
    method: GET
    data_selector: utterances
    params: {}
- name: corpus
  endpoint:
    path: /get_corpus
    method: GET
    data_selector: corpus
    params: {}
- name: utterances
  endpoint:
    path: utterances.jsonl
    method: GET
    data_selector: utterances
    params: {}
- name: speakers
  endpoint:
    path: speakers.json
    method: GET
    data_selector: speakers
    params: {}
- name: conversations
  endpoint:
    path: conversations.json
    method: GET
    data_selector: conversations
    params: {}
- name: corpus
  endpoint:
    path: corpus.json
    method: GET
    data_selector: corpus
    params: {}
- name: index
  endpoint:
    path: index.json
    method: GET
    data_selector: index
    params: {}
- name: utterances
  endpoint:
    path: utterances.jsonl
    method: GET
    data_selector: utterances
- name: speakers
  endpoint:
    path: speakers.json
    method: GET
    data_selector: speakers
- name: conversations
  endpoint:
    path: conversations.json
    method: GET
    data_selector: conversations
- name: corpus
  endpoint:
    path: corpus.json
    method: GET
    data_selector: corpus
- name: index
  endpoint:
    path: index.json
    method: GET
    data_selector: index
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Coordination
  endpoint:
    path: /coordination
    method: GET
    data_selector: scores
- name: politenessStrategies
  endpoint:
    path: /politenessStrategies
    method: POST
    data_selector: features
    params: {}
- name: Conversations Gone Awry Dataset - Wikipedia version
  endpoint:
    path: /datasets/ConversationsGoneAwry/Wikipedia
    method: GET
    data_selector: dataset
- name: Conversations Gone Awry Dataset - Reddit CMV version
  endpoint:
    path: /datasets/ConversationsGoneAwry/RedditCMV
    method: GET
    data_selector: dataset
- name: Conversations Gone Awry Dataset (Large) - Reddit CMV version
  endpoint:
    path: /datasets/ConversationsGoneAwry/LargeRedditCMV
    method: GET
    data_selector: dataset
- name: Cornell Movie-Dialogs Corpus
  endpoint:
    path: /datasets/CornellMovieDialogs
    method: GET
    data_selector: dataset
- name: CANDOR Corpus
  endpoint:
    path: /datasets/CANDOR
    method: GET
    data_selector: dataset
- name: Parliament Question Time Corpus
  endpoint:
    path: /datasets/ParliamentQuestionTime
    method: GET
    data_selector: dataset
- name: Wikipedia Talk Pages Corpus
  endpoint:
    path: /datasets/WikipediaTalkPages
    method: GET
    data_selector: dataset
- name: Tennis Interviews
  endpoint:
    path: /datasets/TennisInterviews
    method: GET
    data_selector: dataset
- name: Reddit Corpus (all, by subreddit)
  endpoint:
    path: /datasets/RedditAllBySubreddit
    method: GET
    data_selector: dataset
- name: Reddit Corpus (small)
  endpoint:
    path: /datasets/RedditSmall
    method: GET
    data_selector: dataset
- name: WikiConv Corpus
  endpoint:
    path: /datasets/WikiConv
    method: GET
    data_selector: dataset
- name: Chromium Conversations Corpus
  endpoint:
    path: /datasets/ChromiumConversations
    method: GET
    data_selector: dataset
- name: Winning Arguments Corpus
  endpoint:
    path: /datasets/WinningArguments
    method: GET
    data_selector: dataset
- name: Coarse Discourse Corpus
  endpoint:
    path: /datasets/CoarseDiscourse
    method: GET
    data_selector: dataset
- name: Persuasion For Good Corpus
  endpoint:
    path: /datasets/PersuasionForGood
    method: GET
    data_selector: dataset
- name: Intelligence Squared Debates Corpus
  endpoint:
    path: /datasets/IntelligenceSquaredDebates
    method: GET
    data_selector: dataset
- name: Friends Corpus
  endpoint:
    path: /datasets/Friends
    method: GET
    data_selector: dataset
- name: Spolin Corpus
  endpoint:
    path: /datasets/Spolin
    method: GET
    data_selector: dataset
- name: Switchboard Dialog Act Corpus
  endpoint:
    path: /datasets/SwitchboardDialogAct
    method: GET
    data_selector: dataset
- name: Stanford Politeness Corpus (Wikipedia)
  endpoint:
    path: /datasets/StanfordPolitenessWikipedia
    method: GET
    data_selector: dataset
- name: Stanford Politeness Corpus (Stack Exchange)
  endpoint:
    path: /datasets/StanfordPolitenessStackExchange
    method: GET
    data_selector: dataset
- name: Deception in Diplomacy Corpus
  endpoint:
    path: /datasets/DeceptionInDiplomacy
    method: GET
    data_selector: dataset
- name: Group Affect and Performance (GAP) Corpus
  endpoint:
    path: /datasets/GAP
    method: GET
    data_selector: dataset
- name: Supreme Court Oral Arguments Dataset
  endpoint:
    path: /datasets/SupremeCourtOralArguments
    method: GET
    data_selector: dataset
- name: Wikipedia Articles for Deletion Dataset
  endpoint:
    path: /datasets/WikipediaArticlesForDeletion
    method: GET
    data_selector: dataset
- name: CaSiNo Corpus
  endpoint:
    path: /datasets/CaSiNo
    method: GET
    data_selector: dataset
- name: NPR Interviews 2P Corpus
  endpoint:
    path: /datasets/NPRInterviews2P
    method: GET
    data_selector: dataset
- name: Federal Open Market Committee Corpus
  endpoint:
    path: /datasets/FederalOpenMarketCommittee
    method: GET
    data_selector: dataset
- name: FORA Corpus
  endpoint:
    path: /datasets/FORA
    method: GET
    data_selector: dataset
- name: DeliData Corpus
  endpoint:
    path: /datasets/DeliData
    method: GET
    data_selector: dataset
- name: fit
  endpoint:
    path: /fit
    method: POST
    data_selector: corpus
    params: {}
- name: transform
  endpoint:
    path: /transform
    method: POST
    data_selector: corpus
    params: {}
- name: transform_utterance
  endpoint:
    path: /transform_utterance
    method: POST
    data_selector: utt
    params: {}
- name: summarize
  endpoint:
    path: /summarize
    method: GET
    data_selector: k
    params: {}
- name: get_terms
  endpoint:
    path: /get_terms
    method: GET
    data_selector: terms
    params: {}
- name: get_term_df
  endpoint:
    path: /get_term_df
    method: GET
    data_selector: dataframe
    params: {}
- name: load
  endpoint:
    path: /load
    method: POST
    data_selector: dirname
    params: {}
- name: dump
  endpoint:
    path: /dump
    method: POST
    data_selector: dirname
    params: {}
- name: Hypergraph
  endpoint:
    path: /hypergraph
    method: GET
    data_selector: features
    params: {}
- name: speaker_convo_diversity
  endpoint:
    path: /api/speaker_convo_diversity
    method: GET
    data_selector: records
- name: utterance
  endpoint:
    path: /api/utterance
    method: GET
    data_selector: utterances
- name: conversation
  endpoint:
    path: /api/conversation
    method: GET
    data_selector: conversations
- name: utterance
  endpoint:
    path: /conversations-gone-awry-cmv-corpus
    method: GET
    data_selector: utterances
    params: {}
- name: conversation
  endpoint:
    path: /conversations-gone-awry-cmv-corpus
    method: GET
    data_selector: conversations
    params: {}
- name: speakers
  endpoint:
    path: /speakers
    method: GET
    data_selector: speakers
    params: {}
- name: utterances
  endpoint:
    path: /utterances
    method: GET
    data_selector: utterances
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
    params: {}
- name: corpus
  endpoint:
    path: /corpus
    method: GET
    data_selector: corpus
    params: {}
- name: speaker_info
  endpoint:
    path: /speaker_info
    method: GET
    data_selector: metadata
- name: utterance_info
  endpoint:
    path: /utterance_info
    method: GET
    data_selector: metadata
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: politenessStrategies
  endpoint:
    path: /politenessStrategies
    method: GET
    data_selector: features
- name: speaker_info
  endpoint:
    path: /tennis_interviews/speaker_info
    method: GET
    data_selector: speakers
    params: {}
- name: utterance_info
  endpoint:
    path: /tennis_interviews/utterance_info
    method: GET
    data_selector: utterances
    params: {}
- name: conversation_info
  endpoint:
    path: /tennis_interviews/conversation_info
    method: GET
    data_selector: conversations
    params: {}
- name: subreddit-corpus
  endpoint:
    path: /datasets/subreddit-corpus
    method: GET
    data_selector: corpus
    params: {}
- name: speaker_convo_diversity
  endpoint:
    path: /speaker_convo_diversity
    method: POST
    data_selector: results
    params: {}
- name: utterance
  endpoint:
    path: /utterance
    method: GET
    data_selector: records
- name: conversation
  endpoint:
    path: /conversation
    method: GET
    data_selector: records
- name: speaker
  endpoint:
    path: /speaker
    method: GET
    data_selector: records
- name: Redirection
  endpoint:
    path: /redirection
    method: GET
    data_selector: redirection_scores
- name: UtteranceLikelihood
  endpoint:
    path: /utterance_likelihood
    method: GET
    data_selector: utterance_likelihoods
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: records
- name: utterance
  endpoint:
    path: /reddit-coarse-discourse-corpus
    method: GET
    data_selector: utterances
    params: {}
- name: conversation
  endpoint:
    path: /reddit-coarse-discourse-corpus/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: speaker_info
  endpoint:
    path: /speaker_info
    method: GET
    data_selector: metadata
- name: utterance_info
  endpoint:
    path: /utterance_info
    method: GET
    data_selector: utterances
- name: debate
  endpoint:
    path: /iq2-corpus
    method: GET
    data_selector: conversations
    params: {}
- name: supreme-corpus
  endpoint:
    path: /supreme-corpus
    method: GET
    data_selector: utterances
    params: {}
- name: supreme-{year}
  endpoint:
    path: /supreme-{year}
    method: GET
    data_selector: utterances
    params: {}
- name: speakers
  endpoint:
    path: /tennis_interviews/speakers
    method: GET
    data_selector: speakers
    params: {}
- name: utterances
  endpoint:
    path: /tennis_interviews/utterances
    method: GET
    data_selector: utterances
    params: {}
- name: conversations
  endpoint:
    path: /tennis_interviews/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: subreddit_corpus
  endpoint:
    path: /datasets/subreddit-corpus
    method: GET
    data_selector: corpus
- name: speakers
  endpoint:
    path: /speakers
    method: GET
    data_selector: speakers
    params: {}
- name: utterances
  endpoint:
    path: /utterances
    method: GET
    data_selector: utterances
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
    params: {}
- name: speaker_info
  endpoint:
    path: /speaker_info
    method: GET
    data_selector: speakers
- name: utterance_info
  endpoint:
    path: /utterance_info
    method: GET
    data_selector: utterances
- name: conversation_info
  endpoint:
    path: /conversation_info
    method: GET
    data_selector: conversations
- name: utterance
  endpoint:
    path: /utterances
    method: GET
    data_selector: utterances
- name: conversation
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
- name: speaker
  endpoint:
    path: /speakers
    method: GET
    data_selector: speakers
- name: wikiconv
  endpoint:
    path: /wikiconv
    method: GET
    data_selector: data
    params: {}
- name: processed_dataset
  endpoint:
    path: /switchboard-processed-corpus
    method: GET
    data_selector: corpus
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: utterances
    params: {}
- name: utterance
  endpoint:
    path: /stack-exchange-politeness-corpus
    method: GET
    data_selector: utterances
    params: {}
- name: speakers
  endpoint:
    path: /speakers
    method: GET
    data_selector: speaker_metadata
- name: utterances
  endpoint:
    path: /utterances
    method: GET
    data_selector: utterance_metadata
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversation_metadata
- name: utterance
  endpoint:
    path: /reddit-coarse-discourse-corpus
    method: GET
    data_selector: utterances
    params: {}
- name: conversation
  endpoint:
    path: /reddit-coarse-discourse-corpus/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: gap_corpus
  endpoint:
    path: /gap-corpus
    method: GET
    data_selector: records
- name: speakers
  endpoint:
    path: /api/speakers
    method: GET
    data_selector: users
- name: utterances
  endpoint:
    path: /api/utterances
    method: GET
    data_selector: utterances
- name: conversations
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: conversations
- name: speaker-level information
  endpoint:
    path: /speaker-level
    method: GET
    data_selector: speakers
- name: utterance-level information
  endpoint:
    path: /utterance-level
    method: GET
    data_selector: utterances
- name: conversation-level information
  endpoint:
    path: /conversation-level
    method: GET
    data_selector: conversations
- name: speaker_info
  endpoint:
    path: /speaker_info
    method: GET
    data_selector: speakers
    params: {}
- name: utterance_info
  endpoint:
    path: /utterance_info
    method: GET
    data_selector: utterances
    params: {}
- name: conversation_info
  endpoint:
    path: /conversation_info
    method: GET
    data_selector: conversations
    params: {}
- name: utterance
  endpoint:
    path: /friends/utterances
    method: GET
    data_selector: utterances
- name: conversation
  endpoint:
    path: /friends/conversations
    method: GET
    data_selector: conversations
- name: speaker
  endpoint:
    path: /friends/speakers
    method: GET
    data_selector: speakers
- name: speaker-level information
  endpoint:
    path: /speaker-level
    method: GET
    data_selector: speakers
    params: {}
- name: utterance-level information
  endpoint:
    path: /utterance-level
    method: GET
    data_selector: utterances
    params: {}
- name: conversation-level information
  endpoint:
    path: /conversation-level
    method: GET
    data_selector: conversations
    params: {}
- name: corpus-level information
  endpoint:
    path: /corpus-level
    method: GET
    data_selector: corpus
    params: {}
- name: speaker_level_information
  endpoint:
    path: /speaker-level
    method: GET
    data_selector: speakers
- name: utterance_level_information
  endpoint:
    path: /utterance-level
    method: GET
    data_selector: utterances
- name: conversational_level_information
  endpoint:
    path: /conversational-level
    method: GET
    data_selector: conversations
- name: npr-2p-corpus
  endpoint:
    path: /npr-2p-corpus
    method: GET
    data_selector: records
- name: utterance
  endpoint:
    path: /deli/utterance
    method: GET
    data_selector: utterances
- name: conversation
  endpoint:
    path: /deli/conversation
    method: GET
    data_selector: conversations
- name: speaker
  endpoint:
    path: /deli/speaker
    method: GET
    data_selector: speakers
- name: conversations
  endpoint:
    path: /switchboard/conversations
    method: GET
    data_selector: utterances
    params: {}
- name: speakers
  endpoint:
    path: /switchboard/speakers
    method: GET
    data_selector: speakers
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: utterance
  endpoint:
    path: /wikipedia-politeness-corpus
    method: GET
    data_selector: utterances
- name: speaker
  endpoint:
    path: /model/speaker
    method: GET
    data_selector: records
- name: utterance
  endpoint:
    path: /stack-exchange-politeness-corpus
    method: GET
    data_selector: utterances
    params: {}
- name: utterance
  endpoint:
    path: /api/utterance
    method: GET
    data_selector: utterances
- name: speakers
  endpoint:
    path: /path/to/speakers
    method: GET
    data_selector: speakers
- name: utterances
  endpoint:
    path: /path/to/utterances
    method: GET
    data_selector: utterances
- name: conversations
  endpoint:
    path: /path/to/conversations
    method: GET
    data_selector: conversations
- name: utterances
  endpoint:
    path: /api/utterances
    method: GET
    data_selector: utterances
    params: {}
- name: speakers
  endpoint:
    path: /api/speakers
    method: GET
    data_selector: speakers
    params: {}
- name: conversations
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: gap_corpus
  endpoint:
    path: /gap-corpus
    method: GET
    data_selector: records
    params: {}
- name: speakers
  endpoint:
    path: /speakers
    method: GET
    data_selector: speakers
    params: {}
- name: utterances
  endpoint:
    path: /utterances
    method: GET
    data_selector: utterances
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
    params: {}
- name: speaker_level_information
  endpoint:
    path: /datasets/speaker_level_information
    method: GET
    data_selector: speakers
- name: utterance_level_information
  endpoint:
    path: /datasets/utterance_level_information
    method: GET
    data_selector: utterances
- name: conversation_level_information
  endpoint:
    path: /datasets/conversation_level_information
    method: GET
    data_selector: conversations
- name: corpus_level_information
  endpoint:
    path: /datasets/corpus_level_information
    method: GET
    data_selector: corpus
- name: spolin_corpus
  endpoint:
    path: /spolin-corpus
    method: GET
    data_selector: utterances
    params: {}
- name: get_vectors
  endpoint:
    path: /get_vectors
    method: GET
    data_selector: vector matrix
    params: {}
- name: has_conversation
  endpoint:
    path: /has_conversation
    method: GET
    data_selector: boolean
    params: {}
- name: has_speaker
  endpoint:
    path: /has_speaker
    method: GET
    data_selector: boolean
    params: {}
- name: has_utterance
  endpoint:
    path: /has_utterance
    method: GET
    data_selector: boolean
    params: {}
- name: iter_conversations
  endpoint:
    path: /iter_conversations
    method: GET
    data_selector: generator of Conversations
    params: {}
- name: iter_objs
  endpoint:
    path: /iter_objs
    method: GET
    data_selector: generator of Corpus objects
    params: {}
- name: iter_speakers
  endpoint:
    path: /iter_speakers
    method: GET
    data_selector: generator of Speakers
    params: {}
- name: iter_utterances
  endpoint:
    path: /iter_utterances
    method: GET
    data_selector: generator of Utterances
    params: {}
- name: load_info
  endpoint:
    path: /load_info
    method: GET
    data_selector: None
    params: {}
- name: merge
  endpoint:
    path: /merge
    method: POST
    data_selector: new Corpus
    params: {}
- name: organize_speaker_convo_history
  endpoint:
    path: /organize_speaker_convo_history
    method: GET
    data_selector: None
    params: {}
- name: print_summary_stats
  endpoint:
    path: /print_summary_stats
    method: GET
    data_selector: None
    params: {}
- name: random_conversation
  endpoint:
    path: /random_conversation
    method: GET
    data_selector: random Conversation
    params: {}
- name: random_speaker
  endpoint:
    path: /random_speaker
    method: GET
    data_selector: random Speaker
    params: {}
- name: random_utterance
  endpoint:
    path: /random_utterance
    method: GET
    data_selector: random Utterance
    params: {}
- name: reconnect_to_db
  endpoint:
    path: /reconnect_to_db
    method: GET
    data_selector: Corpus instance
    params: {}
- name: reindex_conversations
  endpoint:
    path: /reindex_conversations
    method: POST
    data_selector: new Corpus
    params: {}
- name: reinitialize_index
  endpoint:
    path: /reinitialize_index
    method: POST
    data_selector: None
    params: {}
- name: set_speaker_convo_info
  endpoint:
    path: /set_speaker_convo_info
    method: POST
    data_selector: None
    params: {}
- name: set_vector_matrix
  endpoint:
    path: /set_vector_matrix
    method: POST
    data_selector: None
    params: {}
- name: speaking_pairs
  endpoint:
    path: /speaking_pairs
    method: GET
    data_selector: Set of speaking pairs
    params: {}
- name: update_speakers_data
  endpoint:
    path: /update_speakers_data
    method: POST
    data_selector: None
    params: {}
- name: TextParser
  endpoint:
    path: /textParser
    method: GET
    data_selector: parses
    params: {}
- name: TextToArcs
  endpoint:
    path: /textToArcs
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: speaker
  endpoint:
    path: /model/speaker
    method: GET
    data_selector: speaker
    params: {}
- name: transform
  endpoint:
    path: /transform
    method: POST
    data_selector: corpus
- name: transform_utterance
  endpoint:
    path: /transform_utterance
    method: POST
    data_selector: utt
- name: utterances
  endpoint:
    path: /utterances
    method: GET
    data_selector: utterances
    params: {}
- name: vectors
  endpoint:
    path: /get_vectors
    method: GET
    data_selector: vector_matrix
    params: {}
- name: conversations
  endpoint:
    path: /iter_conversations
    method: GET
    data_selector: conversations
    params: {}
- name: speakers
  endpoint:
    path: /iter_speakers
    method: GET
    data_selector: speakers
    params: {}
- name: utterances
  endpoint:
    path: /iter_utterances
    method: GET
    data_selector: utterances
    params: {}
- name: SpeakerConvoAttrs
  endpoint:
    path: /speaker_convo_attrs
    method: POST
    data_selector: attributes
    params: {}
- name: SpeakerConvoLifestage
  endpoint:
    path: /speaker_convo_lifestage
    method: POST
    data_selector: lifestages
    params: {}
- name: TextParser
  endpoint:
    path: /textparser
    method: POST
    data_selector: parsed
    params: {}
- name: utterance
  endpoint:
    path: /datasets/conversations-gone-awry-cmv-corpus-large
    method: GET
    data_selector: utterances
- name: conversation
  endpoint:
    path: /datasets/conversations-gone-awry-cmv-corpus-large
    method: GET
    data_selector: conversations
- name: speaker_metadata
  endpoint:
    path: /speaker_metadata
    method: GET
    data_selector: metadata
- name: utterance_metadata
  endpoint:
    path: /utterance_metadata
    method: GET
    data_selector: metadata
- name: conversation_metadata
  endpoint:
    path: /conversation_metadata
    method: GET
    data_selector: metadata
- name: utterance
  endpoint:
    path: /conversations-gone-awry-cmv-corpus-large
    method: GET
    data_selector: utterances
    params: {}
- name: conversation
  endpoint:
    path: /conversations-gone-awry-cmv-corpus-large
    method: GET
    data_selector: conversations
    params: {}
- name: utterance
  endpoint:
    path: /utterances
    method: GET
    data_selector: records
- name: conversation
  endpoint:
    path: /conversations
    method: GET
    data_selector: records
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
    params: {}
- name: speakers
  endpoint:
    path: /speakers
    method: GET
    data_selector: speakers
    params: {}
- name: utterances
  endpoint:
    path: /utterances
    method: GET
    data_selector: utterances
    params: {}
- name: User
  endpoint:
    path: /model/user
    method: GET
- name: utterance
  endpoint:
    path: /utterances
    method: GET
    data_selector: utterances
    params: {}
- name: conversation
  endpoint:
    path: /conversations
    method: GET
    data_selector: conversations
    params: {}
- name: TextProcessor
  endpoint:
    path: /textProcessing/TextProcessor
    method: GET
    data_selector: records
- name: TextParser
  endpoint:
    path: /textProcessing/TextParser
    method: GET
    data_selector: records
- name: TextToArcs
  endpoint:
    path: /textProcessing/TextToArcs
    method: GET
    data_selector: records
- name: User
  endpoint:
    path: /model/user
    method: GET
- name: UserConvoAttrs
  endpoint:
    path: /user_convo_attrs
    method: GET
    data_selector: attributes
    params: {}
- name: UserConvoLifestage
  endpoint:
    path: /user_convo_lifestage
    method: GET
    data_selector: lifestages
    params: {}
- name: textProcessor
  endpoint:
    path: /text_processing/textProcessor
    method: GET
    data_selector: records
- name: textParser
  endpoint:
    path: /text_processing/textParser
    method: GET
    data_selector: records
- name: textToArcs
  endpoint:
    path: /text_processing/textToArcs
    method: GET
    data_selector: records
- name: threadEmbedder
  endpoint:
    path: /hyperconvo/threadEmbedder
    method: GET
    data_selector: threadEmbedder
- name: CommunityEmbedder
  endpoint:
    path: /communityEmbedder
    method: GET
    data_selector: community
    params: {}
- name: CommunityEmbedder
  endpoint:
    path: /communityEmbedder
    method: GET
- name: paired_prediction
  endpoint:
    path: /paired_prediction
    method: GET
    data_selector: records
- name: paired_vector_prediction
  endpoint:
    path: /paired_vector_prediction
    method: GET
    data_selector: records
- name: pairer
  endpoint:
    path: /pairer
    method: POST
    data_selector: metadata
    params: {}
- name: Ranker
  endpoint:
    path: /ranker
    method: GET
- name: paired_prediction
  endpoint:
    path: /paired_prediction
    method: GET
    data_selector: records
- name: paired_vector_prediction
  endpoint:
    path: /paired_vector_prediction
    method: GET
    data_selector: records
- name: TransformerForecasterConfig
  endpoint:
    path: /forecaster/config
    method: GET
- name: TransformerForecasterConfig
  endpoint:
    path: /transformer/forecaster/config
    method: GET
    data_selector: config
    params: {}
- name: CRAFTModel
  endpoint:
    path: /convokit/forecaster/CRAFTModel
    method: GET
    data_selector: model
    params: {}
- name: UserConvoDiversity
  endpoint:
    path: /userConvoDiversity
    method: GET
- name: UserConvoDiversityWrapper
  endpoint:
    path: /userConvoDiversityWrapper
    method: GET
- name: Bag-of-words Transformer
  endpoint:
    path: /bag-of-words
    method: GET
    data_selector: records
    params: {}
- name: ColNormedTfidf
  endpoint:
    path: /expected_context_framework/col_normed_tfidf
    method: GET
    data_selector: model
- name: ColNormedTfidfTransformer
  endpoint:
    path: /expected_context_framework/col_normed_tfidf/transformer
    method: GET
    data_selector: transformer
- name: ColNormedTfidf
  endpoint:
    path: /convokit.expected_context_framework/col_normed_tfidf
    method: GET
    data_selector: representations
- name: prompt_types
  endpoint:
    path: /prompt-types
    method: GET
    data_selector: records
notes:
- ConvoKit requires Python 3.10 or above.
- ConvoKit relies on NLTK and SpaCy to implement certain basic NLP functions.
- Some corpora are particularly large and may not be initializable in their entirety
  without significant computational resources.
- ConvoKit configurations are stored in "~/.convokit/config.yml".
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Linguistic coordination is a measure of the propensity of a speaker to echo the
  language of another speaker.
- Currently offering three strategy collections covering two languages
- Uses the hypergraph conversation model for analysis.
- 'This data was collected from late 2017 to early 2018 and was annotated in two rounds:
  one round in April 2018 and another in February 2019.'
- Summaries of conversation dynamics (SCDs) are available for a subset of the conversations.
- 'A legacy (unmaintained) version of the dataset is available here: https://www.cs.cornell.edu/~cristian/Echoes_of_power_files/wikipedia_conversations_corpus_v1.01.zip'
- Transcripts gathered from ASAP sports’ website
- Corresponding match information, such as game outcome and player ranking, are obtained
  from Tennis-Data
- Some subreddit corpora are large. If the subreddit of interest is highly active,
  it is advised to check the size of the compressed subreddit corpus file prior to
  downloading.
- This is a beta version release. Not all subreddits that exist are included, and
  the completeness of subreddit history is not guaranteed.
- The transformer assumes that a corpus has already been tokenized (via a call to
  TextParser).
- This will produce attributes per speaker-conversation.
- Includes conversations from 100 highly active subreddits.
- Each conversation includes at least 10 comments.
- This transformer requires installing convokit with the optional LLM packages via
  pip install convokit[llm]
- Creative Commons Attribution 4.0 International
- 'This data was collected from late 2017 to early 2018 and was annotated in two rounds:
  one round in April 2018 (for “Conversations Gone Awry”) and another in February
  2019 (for “Trouble on the Horizon”).'
- Metadata for each utterance is inherited from the general CMV corpus.
- The official dataset distribution from the paper authors contains only comment/post
  IDs, not text content; the dataset also came with a script to join IDs with text
  using the Reddit API.
- This ConvoKit version of the dataset was constructed using that script; however,
  as some comments may have been deleted in the time between when the paper was published
  and when the script was run, this Corpus may not correspond 100% to the data used
  in the paper.
- Contains approximately 1,800,000 utterances over 8,300 oral arguments transcripts
  from 8,000 cases.
- Data comes from transcripts scraped from the Oyez website and voting information
  from the Supreme Court Database (SCDB).
- The original dataset is available at https://github.com/emorynlp/character-mining.
- This dataset is governed by the CC BY-SA license v4.0
- Corresponding match information obtained from Tennis-Data
- Please cite the paper when using NPR-2P corpus in your research.
- DeliData is a dataset designed for analyzing deliberation in multi-party problem-solving
  contexts.
- The corpus is available upon request from the authors.
- Includes 100 comments threads from 100 highly active subreddits.
- In the original SwDa dataset, utterances are not separated by speaker, but rather
  by tags.
- The SWDA Switchboard work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike
  3.0 Unported License.
- Speaker names have been anonymized randomly to ‘developer_#’ where ‘#’ is a number
  between 1 and 4842.
- Creative Commons Attribution 4.0 International license.
- A collection of requests from Stack Exchange, annotated with politeness (6,603 utterances).
- Each request is seen as a full conversation, and thus all utterances are at the
  ‘root’ of the conversations.
- One player was dropped from the data as they did not contribute any messages.
- The official dataset distribution from the paper authors contains only comment/post
  IDs, not text content.
- This ConvoKit version of the dataset was constructed using a script to join IDs
  with text using the Reddit API.
- The GAP corpus is released under the Creative Commons Attribution-NonCommercial
  4.0 International (CC BY-NC 4.0) license.
- The dataset contains 1017 conversations.
- 'Total number of speakers: 1285.'
- 'Total number of utterances: 20932.'
- The original Wikipedia Articles for Deletion dataset is licensed under the GNU General
  Public License v3.0.
- The original dataset is available on GitHub.
- Data is copyrighted by Emory University, licensed under the Apache License, v.2.0.
- The project is licensed under the Creative Commons Attribution 4.0 International
  (CC BY 4.0) license.
- 'For some quick stats: Number of Speakers: 364, Number of Utterances: 108504, Number
  of Conversations: 268'
- The original dataset can be downloaded from the provided link.
- Please cite this paper when using NPR-2P corpus in your research.
- Uses Python >= 3.10
- A ConvoKit-compatible version can be derived using ConvoKit’s conversion tools.
- A collection of requests from Wikipedia Talk pages, annotated with politeness.
- Dataset contains 1030 negotiation dialogues.
- Total of 14,297 utterances in the dataset.
- 'More details about the SPOLIN project can be found on: https://justin-cho.com/spolin'
- This toolkit contains tools to extract conversational features and analyze social
  phenomena in conversations, using a single unified interface inspired by (and compatible
  with) scikit-learn.
- Fora corpus is available by request from the authors
- ConvoKit contains code for converting the transcripts into ConvoKit format
- Using this dataset, over the original version, is recommended.
- Summaries of conversation dynamics are available for a subset of the conversations
- CANDOR corpus is available by request from the authors.
- You will need to pick the transcription type when converting CANDOR corpus to ConvoKit.
- Transformer that trains a classifier on the Corpus components’ text vector representation
- Pairer transformer sets up pairing to be used for paired prediction analyses.
- Configuration class for defining training arguments used during fine-tuning of a
  TransformerDecoderModel or TransformerEncoderModel.
- This transformer requires installing convokit with the optional LLM packages via
  pip install convokit[llm].
- This implementation can support any model compatible with HuggingFace’s AutoModelForSequenceClassification,
  including decoder-based models such as Gemma and LLaMA.
- CRAFT is a neural network model; full end-to-end training of neural networks is
  considered outside the scope of ConvoKit, so the ConvoKit CRAFTModel must be initialized
  with existing weights.
- Using ConvoKit’s tokenization could therefore result in tokens that are inconsistent
  with what the CRAFT model expects.
- This implementation can, in fact, support any model compatible with HuggingFace’s
  AutoModelForSequenceClassification, including decoder-based models such as Gemma
  and LLaMA.
- This implementation fine-tunes a TransformerDecoder-based language model using parameter-efficient
  fine-tuning (PEFT) with LoRA (Low-Rank Adaptation) with a rank of 64 and LoRA-specific
  configurations targeting key transformer modules such as q_proj, k_proj, v_proj.
- Gradient checkpointing is enabled via Unsloth to support training with long contexts
  efficiently.
- This will produce attributes per user-conversation.
- This is an older method that we keep in the ConvoKit library to reflect the content
  of past publications.
- For a modified and more general variant of the method, see the ExpectedContextModel
  functionality.
- defaults to True
- defaults to 0.1
- defaults to 25
- defaults to 0.9
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'DATA_NOT_FOUND: Check the subreddit or corpus name'
- 'INVALID_REQUEST: Ensure request format is correct'
- '404 Not Found: Check if the endpoint is correct.'
- '500 Internal Server Error: Try again later or contact support.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://convokit.cornell.edu
  headers:
    Accept: application/json
source_metadata: null
