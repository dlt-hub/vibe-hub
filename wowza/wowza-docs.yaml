resources:
- name: whisper
  endpoint:
    path: /whisper
    method: POST
    data_selector: captions
- name: streaming
  endpoint:
    path: /streaming
    method: GET
- name: live_streaming_events
  endpoint:
    path: /live_streaming_events
    method: GET
    data_selector: events
- name: video_player
  endpoint:
    path: /video/player
    method: GET
    data_selector: records
- name: video_analytics
  endpoint:
    path: /api/v1/video/analytics
    method: GET
    data_selector: analytics_data
- name: premium_support_plans
  endpoint:
    path: /support/plans-and-services
    method: GET
    data_selector: plans
    params: {}
- name: video_stream
  endpoint:
    path: /api/v1/stream
    method: GET
    data_selector: records
- name: vod_content
  endpoint:
    path: /api/v1/vod
    method: GET
    data_selector: records
- name: video_stream
  endpoint:
    path: /services/data/vXX.X/sobjects/VideoStream
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: stream
  endpoint:
    path: /live/stream
    method: GET
- name: live_stream
  endpoint:
    path: /services/data/vXX.X/sobjects/LiveStream
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: streaming_pricing
  endpoint:
    path: /pricing/streaming-engine
    method: GET
    data_selector: pricing_plans
- name: webinars
  endpoint:
    path: /blog/category/recorded-webinars
    method: GET
- name: upcoming_events
  endpoint:
    path: /events/upcoming
    method: GET
    data_selector: events
    params: {}
- name: past_events
  endpoint:
    path: /events/past
    method: GET
    data_selector: events
    params: {}
- name: video_stream
  endpoint:
    path: /api/video/stream
    method: GET
    data_selector: records
- name: analytics
  endpoint:
    path: /api/analytics
    method: GET
    data_selector: records
- name: news_press
  endpoint:
    path: /news
    method: GET
    data_selector: articles
- name: stream
  endpoint:
    path: /api/v1/streams
    method: GET
    data_selector: data
    params: {}
- name: streaming
  endpoint:
    path: /api/streaming
    method: GET
- name: resellers
  endpoint:
    path: /resellers
    method: GET
    data_selector: resellerList
- name: video
  endpoint:
    path: /api/video
    method: GET
    data_selector: records
- name: live_stream
  endpoint:
    path: /incoming_streams
    method: GET
- name: video_stream
  endpoint:
    path: /services/data/vXX.X/sobjects/VideoStream
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: PTZ Controls
  endpoint:
    path: /PTZControls
    method: GET
- name: Live Video Streaming
  endpoint:
    path: /api/video/current/overview
    method: GET
- name: Streaming Engine
  endpoint:
    path: /docs/wowza-streaming-engine-rest-api
    method: GET
- name: Java-Based Server-Side API
  endpoint:
    path: /docs/wowza-streaming-engine-java-api
    method: GET
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /live_streams
    method: GET
    data_selector: records
- name: resource
  endpoint:
    path: /[path-to-resource]
    method: GET
- name: video
  endpoint:
    path: /videos
    method: GET
    data_selector: records
    params: {}
- name: live_stream
  endpoint:
    path: /live_streams
    method: GET
    data_selector: records
    params: {}
- name: applications
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications
    method: GET
    data_selector: applications
    params: {}
- name: create_application
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}
    method: POST
    data_selector: success
    params: {}
- name: update_application
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}
    method: PUT
    data_selector: success
    params: {}
- name: restart_application
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/actions/restart
    method: PUT
    data_selector: success
    params: {}
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
    params: {}
- name: live_streams
  endpoint:
    path: /api/v1/live_streams
    method: GET
    data_selector: records
    params: {}
- name: dvrstores
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/testlive/instances/{instanceName}/dvrstores
    method: GET
    data_selector: dvrconverterstoresummary
- name: dvrstore
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/testlive/instances/{instanceName}/dvrstores/{dvrStoreName}
    method: GET
    data_selector: DvrConverterStore
- name: convert_dvrstore
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/testlive/instances/{instanceName}/dvrstores/{dvrStoreName}/actions/convert
    method: PUT
- name: clear_conversion_cache
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/testlive/instances/{instanceName}/dvrstores/actions/expire
    method: PUT
- name: live_stream_sources
  endpoint:
    path: /v3/servers/{serverName}/publishers
    method: GET
    data_selector: publishers
- name: create_live_stream_source
  endpoint:
    path: /v3/servers/{serverName}/publishers
    method: POST
    data_selector: success
- name: update_live_stream_source
  endpoint:
    path: /v3/servers/{serverName}/publishers/myRTMPencoder
    method: PUT
    data_selector: success
- name: remove_live_stream_source
  endpoint:
    path: /v3/servers/{serverName}/publishers/myRTMPencoder
    method: DELETE
- name: server_logs
  endpoint:
    path: /server/logs
    method: GET
    data_selector: logs
    params: {}
- name: stream
  endpoint:
    path: /v1/streams
    method: GET
    data_selector: streams
- name: logfiles
  endpoint:
    path: /v2/servers/{serverName}/logfiles
    method: GET
    params:
      order: newestFirst
- name: specific_logfile
  endpoint:
    path: /v2/servers/{serverName}/logfiles/{logName}
    method: GET
    params: {}
- name: search_logfile
  endpoint:
    path: /v2/servers/{serverName}/logfiles/{logName}
    method: GET
    params:
      search: '{string-to-search}'
- name: media_cache_configuration
  endpoint:
    path: /v3/servers/{serverName}/mediacache
    method: GET
    data_selector: stores
    params: {}
- name: media_cache_store
  endpoint:
    path: /v3/servers/{serverName}/mediacache/stores/{storeName}
    method: POST
    data_selector: data
    params: {}
- name: media_cache_source
  endpoint:
    path: /v3/servers/{serverName}/mediacache/sources/{sourceName}
    method: POST
    data_selector: data
    params: {}
- name: smil_files
  endpoint:
    path: /smil-files
    method: GET
    data_selector: records
- name: live_stream
  endpoint:
    path: /services/data/vXX.X/live_streams
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: vod_stream
  endpoint:
    path: /services/data/vXX.X/vod_streams
    method: GET
    data_selector: records
    params: {}
- name: smil_files
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/smilfiles
    method: GET
    data_selector: smilfiles
- name: create_smil_file
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/smilfiles/{smilFileName}
    method: POST
    data_selector: smilFile
    params: {}
- name: remove_smil_file
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/smilfiles/{smilFileName}
    method: DELETE
    data_selector: smilFile
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /live_streams
    method: GET
    data_selector: records
- name: current_application_statistics
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/monitoring/current
    method: GET
    data_selector: records
- name: current_incoming_stream_statistics
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/_definst_/incomingstreams/{streamName}/monitoring/current
    method: GET
    data_selector: records
- name: historical_application_statistics
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/monitoring/historic
    method: GET
    data_selector: entries
- name: historical_server_statistics
  endpoint:
    path: /v2/servers/{serverName}/monitoring/historic
    method: GET
    data_selector: entries
- name: stream_files
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamfiles
    method: GET
    data_selector: streamFiles
- name: stream_file_details
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamfiles/{streamfileName}
    method: GET
    data_selector: name
- name: add_stream_file
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamfiles
    method: POST
- name: update_stream_file
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamfiles/{streamfileName}/adv
    method: PUT
- name: connect_stream_file
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamfiles/{streamfileName}/actions/connect
    method: PUT
- name: disconnect_stream_file
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/incomingstreams/{streamfileName}/actions/disconnectStream
    method: PUT
- name: remove_stream_file
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamfiles/{streamfileName}
    method: DELETE
- name: stream_recorders
  endpoint:
    path: /v1/recorders
    method: GET
    data_selector: records
- name: stream_recorders
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/streamrecorders
    method: GET
    data_selector: streamrecorder
    params: {}
- name: create_recorder
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/streamrecorders/myStream
    method: POST
    data_selector: success
    params: {}
- name: split_recording
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/streamrecorders/{recorderName}/actions/splitRecording
    method: PUT
    data_selector: success
    params: {}
- name: stop_recording
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/streamrecorders/{recorderName}/actions/stopRecording
    method: PUT
    data_selector: success
    params: {}
- name: video
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
    params: {}
- name: live_stream
  endpoint:
    path: /api/v1/live_streams
    method: GET
    data_selector: records
    params: {}
- name: advanced_settings
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/adv
    method: GET
    data_selector: advancedSettings
    params: {}
- name: push_publish_map_entries
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/testlive/pushpublish/mapentries
    method: GET
    data_selector: mapEntries
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /live_streams
    method: GET
    data_selector: records
- name: playlists
  endpoint:
    path: /playlists
    method: GET
    data_selector: records
- name: server_users
  endpoint:
    path: /v2/servers/{serverName}/users
    method: GET
    data_selector: users
    params: {}
- name: create_server_user
  endpoint:
    path: /v2/servers/{serverName}/users
    method: POST
    data_selector: ''
    params: {}
- name: remove_server_user
  endpoint:
    path: /v2/servers/{serverName}/users/{userName}
    method: DELETE
    data_selector: ''
    params: {}
- name: live_streaming_application
  endpoint:
    path: /live
    method: GET
    data_selector: records
    params: {}
- name: media_cache
  endpoint:
    path: /media/cache
    method: GET
    data_selector: records
    params: {}
- name: video_stream
  endpoint:
    path: /services/data/vXX.X/sobjects/VideoStream
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /v1/live/streams
    method: GET
    data_selector: streams
- name: create_live_http_origin_application
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}
    method: POST
    data_selector: null
    params: {}
- name: create_fastly_stream_target
  endpoint:
    path: /api/${WV_VERSION}/stream_targets/fastly
    method: POST
    data_selector: null
    params: {}
- name: create_publisher
  endpoint:
    path: /v2/servers/(serverName}/vhosts/{vhostName}/applications/{appName}/publishers/myRTMPencoder
    method: POST
    data_selector: data
    params: {}
- name: create_stream_target
  endpoint:
    path: /v2/servers/(serverName)/vhosts/(vhostName)/applications/{appName}/pushpublish/mapentries/facebook_timeline_target
    method: POST
    data_selector: data
    params: {}
- name: live_streams
  endpoint:
    path: /api/${WV_VERSION}/live_streams
    method: POST
    data_selector: live_stream
    params: {}
- name: publishers
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/publishers/{publisherName}
    method: POST
    data_selector: ''
    params: {}
- name: application_adv
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/adv
    method: GET
    data_selector: ''
    params: {}
- name: restart_application
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/actions/restart
    method: PUT
    data_selector: ''
    params: {}
- name: stream_targets
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries/{entryName}
    method: POST
    data_selector: ''
    params: {}
- name: push_publish
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries/{entryName}/actions/enable
    method: PUT
    data_selector: data
    params: {}
- name: get_stream_details
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries/{entryName}
    method: GET
    data_selector: data
    params: {}
- name: stop_stream
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries/{entryName}/actions/disable
    method: PUT
    data_selector: data
    params: {}
- name: publishers
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/publishers/myRTMPencoder
    method: POST
    data_selector: success
- name: advanced_settings
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/adv
    method: GET
    data_selector: advancedSettings
- name: push_publish
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries/{entryName}
    method: POST
    data_selector: success
- name: restart_application
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/actions/restart
    method: PUT
    data_selector: success
- name: video
  endpoint:
    path: /services/data/vXX.X/sobjects/Video
    method: GET
    data_selector: records
    params: {}
- name: advanced_settings
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/adv
    method: GET
    data_selector: advancedSettings
    params: {}
- name: push_publish_map_entry
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries/{entryName}
    method: POST
    data_selector: data
    params: {}
- name: enable_push_publish_map_entry
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries/{entryName}/actions/enable
    method: PUT
    data_selector: data
    params: {}
- name: Send Apple HLS content to Amazon S3
  endpoint:
    path: /send-apple-hls-content-to-amazon-s3
    method: POST
- name: videos
  endpoint:
    path: /services/data/vXX.X/sobjects/Video
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /services/data/vXX.X/sobjects/LiveStream
    method: GET
    data_selector: records
- name: stream_target
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries/{entryName}
    method: POST
    data_selector: null
    params: {}
- name: live_stream
  endpoint:
    path: /services/live_streams
    method: GET
    data_selector: streams
    params:
      incremental: updated_at
- name: vod_stream
  endpoint:
    path: /services/vod_streams
    method: GET
    data_selector: vods
    params: {}
- name: live_stream
  endpoint:
    path: /api/live_streams
    method: GET
    data_selector: streams
- name: vod_stream
  endpoint:
    path: /api/vod_streams
    method: GET
    data_selector: streams
- name: Application Operations
  endpoint:
    path: /v2/servers/{serverName}/vhosts/{vhostName}/applications
    method: GET
- name: Machine Level Current Statistics
  endpoint:
    path: /v2/machine/monitoring/current
    method: GET
- name: Machine Level Historic Statistics
  endpoint:
    path: /v2/machine/monitoring/historic
    method: GET
- name: live_streams
  endpoint:
    path: /v1/live_streams
    method: GET
    data_selector: streams
    params: {}
- name: server_stats
  endpoint:
    path: /v1/server/stats
    method: GET
    data_selector: stats
    params: {}
- name: video
  endpoint:
    path: /services/data/vXX.X/sobjects/Video
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: live_stream
  endpoint:
    path: /services/data/vXX.X/sobjects/LiveStream
    method: GET
    data_selector: records
    params: {}
- name: stream
  endpoint:
    path: /services/data/vXX.X/sobjects/Stream
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: ModuleCore
  endpoint:
    path: /modules/ModuleCore
    method: GET
    data_selector: ''
    params: {}
- name: ModuleClientLogging
  endpoint:
    path: /modules/ModuleClientLogging
    method: GET
    data_selector: ''
    params: {}
- name: ModuleFLVPlayback
  endpoint:
    path: /modules/ModuleFLVPlayback
    method: GET
    data_selector: ''
    params: {}
- name: ModuleCoreSecurity
  endpoint:
    path: /modules/ModuleCoreSecurity
    method: GET
    data_selector: ''
    params: {}
- name: ModulePushPublish
  endpoint:
    path: /modules/ModulePushPublish
    method: GET
    data_selector: ''
    params: {}
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /api/v1/live_streams
    method: GET
    data_selector: records
- name: video_stream
  endpoint:
    path: /api/v1/video_stream
    method: GET
    data_selector: streams
- name: server_listener
  endpoint:
    path: /use_server_listener
    method: GET
    data_selector: events
    params: {}
- name: virtual_host_listener
  endpoint:
    path: /use_virtual_host_listener
    method: GET
    data_selector: events
    params: {}
- name: media_stream_listener
  endpoint:
    path: /use_media_stream_listener
    method: GET
    data_selector: events
    params: {}
- name: media_stream_action_listener
  endpoint:
    path: /use_media_stream_action_listener
    method: GET
    data_selector: events
    params: {}
- name: media_stream_name_alias_provider
  endpoint:
    path: /use_media_stream_name_alias_provider
    method: GET
    data_selector: events
    params: {}
- name: HTTPProvider
  endpoint:
    path: /HTTPProvider
    method: GET
    data_selector: output
    params:
      RequestFilters: helloworld*
- name: videos
  endpoint:
    path: /api/videos
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /api/live_streams
    method: GET
    data_selector: records
- name: ModuleAccessControlHTTPStreaming
  endpoint:
    path: /conf/[app-name]/Application.xml
    method: POST
- name: dvr_stream_record
  endpoint:
    path: /dvrstreamrecord
    method: GET
    data_selector: report
    params: {}
- name: HLS chunklists
  endpoint:
    path: /ControlHLSChunklists
    method: POST
    data_selector: programDateTime
    params:
      cupertinoEnableProgramDateTime: true
- name: dvr_playlist
  endpoint:
    path: /dvr/myStream/playlist.m3u8
    method: GET
    data_selector: playlist
    params: {}
- name: dvr_manifest
  endpoint:
    path: /dvr/myStream/manifest.mpd
    method: GET
    data_selector: manifest
    params: {}
- name: recording_duration
  endpoint:
    path: /ndvr/recording-duration
    method: GET
- name: videos
  endpoint:
    path: /services/data/vXX.X/sobjects/Video
    method: GET
    data_selector: records
    params: {}
- name: live_streams
  endpoint:
    path: /services/data/vXX.X/sobjects/LiveStream
    method: GET
    data_selector: records
    params: {}
- name: dvrstreamquery
  endpoint:
    path: /dvrstreamquery
    method: GET
    data_selector: ''
    params:
      action: query
      app: '[application-name]'
      streamname: '[stream-name]'
      forceload: 'true'
- name: extract_mp4_files
  endpoint:
    path: /docs/how-to-extract-mp4-formatted-files-from-dvr-streams-using-wowza-streaming-engine-java-api
    method: GET
- name: convert_nDVR_store
  endpoint:
    path: /converter
    method: GET
    data_selector: conversion
    params:
      command: convert
      streamname: myStream
- name: get_conversion_status
  endpoint:
    path: /converter
    method: GET
    data_selector: status
    params:
      command: status
      streamname: myStream
- name: clear_conversion_cache
  endpoint:
    path: /converter
    method: GET
    data_selector: expire
    params:
      command: expire
- name: select_audio_subtitle_tracks
  endpoint:
    path: /docs/how-to-select-audio-and-subtitle-tracks-from-a-video-on-demand-file
    method: GET
- name: ModuleMP4AudioChannelSelector
  endpoint:
    path: /docs/how-to-select-audio-and-subtitle-tracks-from-a-vod-file
    method: GET
- name: media_cache
  endpoint:
    path: /api/media-cache
    method: POST
    data_selector: cache
- name: video
  endpoint:
    path: /services/data/vXX.X/sobjects/Video
    method: GET
    data_selector: records
    params: {}
- name: live_stream
  endpoint:
    path: /services/data/vXX.X/sobjects/LiveStream
    method: GET
    data_selector: records
    params: {}
- name: live_stream
  endpoint:
    path: /live_streams
    method: GET
    data_selector: streams
    params: {}
- name: video_source
  endpoint:
    path: /video_sources
    method: GET
    data_selector: sources
    params: {}
- name: video_stream
  endpoint:
    path: /api/v1/video_streams
    method: GET
    data_selector: records
    params: {}
- name: Transcoder Module
  endpoint:
    path: /transcoder/module
    method: POST
    data_selector: response
    params: {}
- name: videos
  endpoint:
    path: /services/data/v1/videos
    method: GET
    data_selector: records
    params: {}
- name: live_streams
  endpoint:
    path: /services/data/v1/live_streams
    method: GET
    data_selector: records
    params: {}
- name: OverlayImage
  endpoint:
    path: /addFadingStep
    method: POST
    data_selector: fadeSteps
- name: AnimatedText
  endpoint:
    path: /addMovementStep
    method: POST
    data_selector: movementSteps
- name: VideoManipulation
  endpoint:
    path: /addAnimationStep
    method: POST
    data_selector: animationSteps
- name: Decrypt PlayReady-encrypted VOD
  endpoint:
    path: /docs/how-to-decrypt-playready-encrypted-video-on-demand-content-on-the-fly
    method: GET
    data_selector: records
- name: ModuleMP4PlayReadyKeyProvider
  endpoint:
    path: /ModuleMP4PlayReadyKeyProvider
    method: GET
    data_selector: records
    params: {}
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /api/v1/live_streams
    method: GET
    data_selector: records
- name: live_stream
  endpoint:
    path: /services/liveStream
    method: GET
    data_selector: streams
    params: {}
- name: vod_stream
  endpoint:
    path: /services/vodStream
    method: GET
    data_selector: vodStreams
    params: {}
- name: video
  endpoint:
    path: /videos
    method: GET
    data_selector: records
- name: live_stream
  endpoint:
    path: /live_streams
    method: GET
    data_selector: records
- name: timed_metadata_conversion
  endpoint:
    path: /convert/timed-metadata/amf-to-emsg
    method: GET
    data_selector: data
    params: {}
- name: Stream
  endpoint:
    path: /conf/Server.xml/ServerListeners
    method: POST
    data_selector: ServerListener
    params: {}
- name: live_application
  endpoint:
    path: /live/Application.xml
    method: POST
    data_selector: Application
    params: {}
- name: stream_schedule
  endpoint:
    path: /content/streamschedule.smil
    method: POST
    data_selector: smil
    params: {}
- name: switch
  endpoint:
    path: /content/switch.smil
    method: POST
    data_selector: smil
    params: {}
- name: ModuleRTSPTransportSwitcher
  endpoint:
    path: /conf/[application]/Application.xml
    method: POST
    data_selector: ModuleRTSPTransportSwitcher
    params: {}
- name: MyModule
  endpoint:
    path: /MBeans/WowzaMediaServerPro:VHosts,_defaultVHost_,Applications,[application],ApplicationInstances,_definst_,Modules,MyModul,Instance
    method: GET
    data_selector: attributes
    params: {}
- name: live_frame_rate
  endpoint:
    path: /live/frameRate
    method: GET
    data_selector: fps
    params: {}
- name: insert_keyframes
  endpoint:
    path: /insert/keyframes
    method: POST
- name: video_stream
  endpoint:
    path: /api/v1/video_streams
    method: GET
    data_selector: records
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: records
- name: playlists
  endpoint:
    path: /playlists
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /live_streams
    method: GET
    data_selector: records
- name: transcoderVideoLoadBalancerClass
  endpoint:
    path: /conf/Server.xml
    method: POST
    data_selector: Property
    params: {}
- name: transcoderVideoLoadBalancerCUDASimpleGPUWeights
  endpoint:
    path: /conf/Server.xml
    method: POST
    data_selector: Property
    params: {}
- name: log_play_statistics
  endpoint:
    path: /path/to/log/play/statistics
    method: GET
    data_selector: statistics
- name: video_stream
  endpoint:
    path: /api/video_stream
    method: GET
    data_selector: records
    params: {}
- name: audio_stream
  endpoint:
    path: /api/audio_stream
    method: GET
    data_selector: records
    params: {}
- name: stream_stats
  endpoint:
    path: /module/streamStats
    method: POST
    data_selector: stats
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: records
    params: {}
- name: SDP data
  endpoint:
    path: /modify-or-fix-sdp-data
    method: POST
    data_selector: data
    params: {}
- name: RTPSessionDescriptionDataProviderOverride
  endpoint:
    path: /plugin/rtpprovideroverride
    method: POST
    data_selector: properties
    params: {}
- name: MPEG-TS ingestion
  endpoint:
    path: /monitor/mpeg-ts-ingestion
    method: GET
- name: MPEG-TS Listener
  endpoint:
    path: /services/data/vXX.X/mpegts/listener
    method: POST
    data_selector: data
    params: {}
- name: videos
  endpoint:
    path: /services/data/vXX.X/videos
    method: GET
    data_selector: records
    params: {}
- name: live_streams
  endpoint:
    path: /services/data/vXX.X/live_streams
    method: GET
    data_selector: records
    params: {}
- name: Stream Target
  endpoint:
    path: /generic/stream/target
    method: GET
- name: PushPublishHTTPCupertinoChunkSplitterFileHandler
  endpoint:
    path: /pushpublish/httcupertino/chunksplitter
    method: POST
    data_selector: response
    params: {}
- name: video
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: playlist
  endpoint:
    path: /api/v1/playlists
    method: GET
    data_selector: records
    params: {}
- name: TagModelCueIn
  endpoint:
    path: /tag/cue-in
    method: GET
    data_selector: tagData
    params: {}
- name: TagModelCueOut
  endpoint:
    path: /tag/cue-out
    method: GET
    data_selector: tagData
    params: {}
- name: OverridePublishRemapStream
  endpoint:
    path: /module/OverridePublishRemapStream
    method: POST
    data_selector: params
    params: {}
- name: video
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: videos
    params: {}
- name: server_version
  endpoint:
    path: /getServerVersion
    method: GET
- name: connection_counts
  endpoint:
    path: /getConnectionCounts
    method: GET
- name: io_out_byte_rate
  endpoint:
    path: /getIOOutByteRate
    method: GET
- name: io_in_byte_rate
  endpoint:
    path: /getIOInByteRate
    method: GET
- name: server_version
  endpoint:
    path: /getServerVersion
    method: GET
    data_selector: version
- name: start_vhost
  endpoint:
    path: /startVHost
    method: POST
    data_selector: result
- name: stop_vhost
  endpoint:
    path: /stopVHost
    method: POST
    data_selector: result
- name: reload_vhost_config
  endpoint:
    path: /reloadVHostConfig
    method: POST
    data_selector: result
- name: start_app_instance
  endpoint:
    path: /startAppInstance
    method: POST
    data_selector: result
- name: shutdown_app_instance
  endpoint:
    path: /shutdownAppInstance
    method: POST
    data_selector: result
- name: get_connection_counts
  endpoint:
    path: /getConnectionCounts
    method: GET
    data_selector: counts
- name: get_io_out_byte_rate
  endpoint:
    path: /getIOOutByteRate
    method: GET
    data_selector: rate
- name: get_io_in_byte_rate
  endpoint:
    path: /getIOInByteRate
    method: GET
    data_selector: rate
- name: stream
  endpoint:
    path: /api/stream
    method: GET
    data_selector: streams
    params: {}
- name: stream_switch
  endpoint:
    path: /example/stream/switch
    method: POST
- name: stream_events
  endpoint:
    path: /docs/how-to-use-imediastreamactionnotify3-interface-to-listen-for-rtmp-stream-events-includes-codec-info
    method: GET
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: records
    params: {}
- name: live_streams
  endpoint:
    path: /live_streams
    method: GET
    data_selector: records
    params: {}
- name: IMediaStreamActionNotify3
  endpoint:
    path: /IMediaStreamActionNotify3
    method: GET
- name: ModuleStreamNameAliasExample
  endpoint:
    path: /conf/[app-name]/Application.xml
    method: GET
    data_selector: ModuleStreamNameAliasExample
    params: {}
- name: live_stream
  endpoint:
    path: /live_streams
    method: POST
    data_selector: stream
    params:
      applicationName: live
      vodStreamName: mp4:sample.mp4
      liveStreamName: myStream
      publishStreamName: publishstream
      cycleTime: 10000
- name: SMIL file requests
  endpoint:
    path: /resolve/smil-file-requests
    method: GET
- name: live_streaming
  endpoint:
    path: /live/streaming
    method: GET
    data_selector: mediaList
- name: vod_streaming
  endpoint:
    path: /vod/streaming
    method: GET
    data_selector: mediaList
- name: low_latency_hls
  endpoint:
    path: /low-latency/hls
    method: GET
    data_selector: mediaList
- name: SMIL file requests
  endpoint:
    path: /resolve/smil-file-requests
    method: GET
- name: SMIL file requests with captions
  endpoint:
    path: /resolve/smil-file-requests-with-captions
    method: GET
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
    params: {}
- name: Live stream with WebVTT captions sample module
  endpoint:
    path: /docs/how-to-stream-webvtt-subtitles-to-ios-for-closed-captioning
    method: GET
    data_selector: ModuleAMLSTWebVTT
    params: {}
- name: VOD stream with TTML captions sample module
  endpoint:
    path: /docs/how-to-configure-closed-captioning-for-video-on-demand-streaming
    method: GET
    data_selector: ModuleAMLSTTTML
    params: {}
- name: stream
  endpoint:
    path: /start/stream
    method: POST
    data_selector: results
- name: connections
  endpoint:
    path: /api/connections
    method: GET
    data_selector: connections
    params: {}
- name: ModuleMediaCasterNotifyExample
  endpoint:
    path: /lib/ModuleMediaCasterNotifyExample
    method: POST
    data_selector: Module
    params: {}
- name: live_stream
  endpoint:
    path: /create/pseudo-live-streams
    method: POST
    data_selector: stream
    params: {}
- name: StreamPublisher
  endpoint:
    path: /conf/Server.xml/ServerListeners
    method: POST
    data_selector: ServerListener
    params: {}
- name: live
  endpoint:
    path: /*install-dir*/live/Application.xml
    method: GET
    data_selector: Streams
    params: {}
- name: stream_statistics
  endpoint:
    path: /api/v1/stream/statistics
    method: GET
    data_selector: data
    params: {}
- name: stream
  endpoint:
    path: /start
    method: POST
- name: RTPDePacketizerWrapperFilter
  endpoint:
    path: /plugin/test/depacketizer/RTPDePacketizerWrapperFilter
    method: POST
    data_selector: properties
    params: {}
- name: MPEG-TS Stream
  endpoint:
    path: /start/mpeg-ts
    method: POST
    data_selector: stream
    params:
      appInstance: source stream
      streamName: source stream name
      dstAddress: destination IP address
      dstPort: destination port
- name: Native RTP Stream
  endpoint:
    path: /start/native-rtp
    method: POST
    data_selector: stream
    params:
      appInstance: source stream
      streamName: source stream name
      dstAddress: destination IP address
      dstAudioPort: destination audio port
      dstVideoPort: destination video port
- name: VHost Management
  endpoint:
    path: /vhost
    method: GET
- name: server
  endpoint:
    path: getServerVersion
    method: GET
- name: vhost
  endpoint:
    path: startVHost
    method: POST
- name: appInstance
  endpoint:
    path: startAppInstance
    method: POST
- name: mediaCasterStream
  endpoint:
    path: startMediaCasterStream
    method: POST
- name: mpeg_ts_scte35_tags
  endpoint:
    path: /access/mpeg-ts/scte-35/tags
    method: GET
    data_selector: records
- name: videos
  endpoint:
    path: /api/videos
    method: GET
    data_selector: records
    params: {}
- name: live_streams
  endpoint:
    path: /api/live_streams
    method: GET
    data_selector: records
    params: {}
- name: ModuleAdMarkers
  endpoint:
    path: /Root/Application/RTP
    method: POST
    data_selector: SCTE-35 tags
    params: {}
- name: video
  endpoint:
    path: /services/data/vXX.X/sobjects/Video
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: playlist
  endpoint:
    path: /services/data/vXX.X/sobjects/Playlist
    method: GET
    data_selector: records
    params: {}
- name: speechToTextCaptions
  endpoint:
    path: /speech/v3.0/transcriptions
    method: POST
    data_selector: transcription
    params: {}
- name: live_streams
  endpoint:
    path: /live_streams
    method: GET
    data_selector: streams
    params: {}
- name: recordings
  endpoint:
    path: /recordings
    method: GET
    data_selector: recordings
    params: {}
- name: rtpDePacketizerMPEGTSListenerClass
  endpoint:
    path: /Root/Application/RTP
    method: GET
    data_selector: Value
    params: {}
- name: rtpDePacketizerMPEGTSMonitorCUEDebugLog
  endpoint:
    path: /Root/Application/RTP
    method: GET
    data_selector: Value
    params: {}
- name: cupertinoEnableProgramDateTime
  endpoint:
    path: /Root/Application/HTTPStreamer
    method: GET
    data_selector: Value
    params: {}
- name: scteAdsHlsTagType
  endpoint:
    path: /Root/Application/LiveStreamPacketizer
    method: GET
    data_selector: Value
    params: {}
- name: dateRangeIncludeEndTag
  endpoint:
    path: /Root/Application/LiveStreamPacketizer
    method: GET
    data_selector: Value
    params: {}
- name: dateRangeIncludeStartDateInEndTag
  endpoint:
    path: /Root/Application/LiveStreamPacketizer
    method: GET
    data_selector: Value
    params: {}
- name: dateRangeIncludeEndDateInEndTag
  endpoint:
    path: /Root/Application/LiveStreamPacketizer
    method: GET
    data_selector: Value
    params: {}
- name: dateRangeIncludeSCTEData
  endpoint:
    path: /Root/Application/LiveStreamPacketizer
    method: GET
    data_selector: Value
    params: {}
- name: scteAdsRemoveExpiredEvents
  endpoint:
    path: /Root/Application/LiveStreamPacketizer
    method: GET
    data_selector: Value
    params: {}
- name: stream
  endpoint:
    path: /v1/streams
    method: GET
    data_selector: streams
- name: video
  endpoint:
    path: /videos
    method: GET
    data_selector: records
    params: {}
- name: live_stream
  endpoint:
    path: /live_streams
    method: GET
    data_selector: records
    params: {}
- name: addAudioTrack
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: properties
    params: {}
- name: ga4MeasurementId
  endpoint:
    path: /Root/Application
    method: SET
    data_selector: ga4MeasurementId
    params:
      value: G-XXXXXXXXXX
- name: ga4VideoProvider
  endpoint:
    path: /Root/Application
    method: SET
    data_selector: ga4VideoProvider
    params:
      value: Wowza Streaming Engine
- name: ga4GoogleUrlDomain
  endpoint:
    path: /Root/Application
    method: SET
    data_selector: ga4GoogleUrlDomain
    params:
      value: www.google-analytics.com
- name: ga4VodPercentages
  endpoint:
    path: /Root/Application
    method: SET
    data_selector: ga4VodPercentages
    params:
      value: 10, 25, 50, 75
- name: ga4LiveUpdateFrequency
  endpoint:
    path: /Root/Application
    method: SET
    data_selector: ga4LiveUpdateFrequency
    params:
      value: 300
- name: ga4SendPublishEvents
  endpoint:
    path: /Root/Application
    method: SET
    data_selector: ga4SendPublishEvents
    params:
      value: false
- name: ga4DebugEnabled
  endpoint:
    path: /Root/Application
    method: SET
    data_selector: ga4DebugEnabled
    params:
      value: false
- name: ga4TagMangerPreviewString
  endpoint:
    path: /Root/Application
    method: SET
    data_selector: ga4TagMangerPreviewString
    params:
      value: EXAMPLE-Y1dDMFNPbS04aC1Mb...
- name: ga4DebugIpOverride
  endpoint:
    path: /Root/Application
    method: SET
    data_selector: ga4DebugIpOverride
    params:
      value: 1.2.3.4
- name: mix_audio_video
  endpoint:
    path: /module/mix_audio_video
    method: GET
    data_selector: records
- name: avMixNames
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: properties
    params: {}
- name: avMixSortDelay
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: properties
    params: {}
- name: avMixUseOriginalTimecodes
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: properties
    params: {}
- name: avMixDebugLog
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: properties
    params: {}
- name: videos
  endpoint:
    path: /services/data/vXX.X/sobjects/Video
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: streams
  endpoint:
    path: /services/data/vXX.X/sobjects/Stream
    method: GET
    data_selector: records
    params: {}
- name: blacklistStreams
  endpoint:
    path: /blacklist
    method: GET
    data_selector: publishedStreams
    params: {}
- name: cupertinoAutoMultibitrateFilterUserAgents
  endpoint:
    path: /Root/Application
    method: SET
    data_selector: cupertinoAutoMultibitrateFilterUserAgents
    params:
      value: Macintosh;|iPhone;|iPad;|iPod;|AppleTV
- name: cupertinoAutoMultibitrateFilterDebugLog
  endpoint:
    path: /Root/Application
    method: SET
    data_selector: cupertinoAutoMultibitrateFilterDebugLog
    params:
      value: true
- name: nDVR recorder control
  endpoint:
    path: /docs/how-to-control-which-streams-get-recorded-by-the-ndvr-recorder-moduledvrrecordercontrol
    method: GET
- name: dvrRecorderControl
  endpoint:
    path: /Root/Application/dvrRecorderControl
    method: GET
    data_selector: properties
    params: {}
- name: live_streams
  endpoint:
    path: /live/streams
    method: GET
    data_selector: records
- name: vod_streams
  endpoint:
    path: /vod/streams
    method: GET
    data_selector: records
- name: ModuleLimitPublishedStreamBandwidth
  endpoint:
    path: /Root/Application
    method: GET
    data_selector: properties
    params: {}
- name: video
  endpoint:
    path: /services/data/vXX.X/sobjects/Video
    method: GET
    data_selector: records
    params: {}
- name: video_streams
  endpoint:
    path: /streams
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /live
    method: GET
    data_selector: records
- name: LiveStreamRecordAutoRecord
  endpoint:
    path: /LiveStreamRecordAutoRecord
    method: POST
    data_selector: records
    params: {}
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /api/v1/live_streams
    method: GET
    data_selector: records
- name: LoadAndLockAppInstances
  endpoint:
    path: /plugin/LoadAndLockAppInstances
    method: GET
    data_selector: properties
    params: {}
- name: Loop a pre-roll until a live stream starts
  endpoint:
    path: /docs/how-to-loop-a-pre-roll-until-a-live-stream-starts-loopuntillive
- name: ModuleLoopUntilLive
  endpoint:
    path: /module/ModuleLoopUntilLive
    method: GET
    data_selector: records
- name: MediaReader
  endpoint:
    path: /Root/Application/MediaReader
    method: SET
    data_selector: properties
    params: {}
- name: ModuleMediaListPathSelector
  endpoint:
    path: /pathselector
    method: GET
    data_selector: properties
    params: {}
- name: select_multiple_tracks
  endpoint:
    path: /docs/how-to-select-multiple-tracks-from-a-vod-file-modulemultitrackvod
    method: GET
- name: video
  endpoint:
    path: /services/data/v1/videos
    method: GET
    data_selector: records
    params: {}
- name: playlist
  endpoint:
    path: /services/data/v1/playlists
    method: GET
    data_selector: records
    params: {}
- name: ModuleMultiTrackVOD
  endpoint:
    path: /lib/wse-plugin-multitrackvod.jar
    method: GET
    data_selector: module
    params: {}
- name: http_streams
  endpoint:
    path: /control/stream
    method: GET
    data_selector: streams
- name: live_sources
  endpoint:
    path: /live/sources
    method: GET
    data_selector: sources
- name: PacketizerControl
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: ''
    params: {}
- name: live_stream
  endpoint:
    path: /live_streams
    method: GET
    data_selector: records
    params: {}
- name: vod_stream
  endpoint:
    path: /vod_streams
    method: GET
    data_selector: records
    params: {}
- name: RefererValidate
  endpoint:
    path: /lib/wse-plugin-referervalidate.jar
    method: POST
    data_selector: module
    params: {}
- name: Upload recorded media to an Amazon S3 bucket
  endpoint:
    path: /how-to/upload-recorded-media-to-an-amazon-s3-bucket
    method: GET
- name: s3UploadAccessKey
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadAccessKey
    params: {}
- name: s3UploadSecretKey
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadSecretKey
    params: {}
- name: s3UploadBucketName
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadBucketName
    params: {}
- name: s3UploadProfile
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadProfile
    params: {}
- name: s3UploadProfilePath
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadProfilePath
    params: {}
- name: s3UploadRegion
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadRegion
    params: {}
- name: s3UploadUseDefaultRegion
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadUseDefaultRegion
    params: {}
- name: s3UploadAllowBucketRegionOverride
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadAllowBucketRegionOverride
    params: {}
- name: s3UploadCannedAcl
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadCannedAcl
    params: {}
- name: s3UploadFilePrefix
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadFilePrefix
    params: {}
- name: s3UploadResumeUploads
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadResumeUploads
    params: {}
- name: s3UploadDelay
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadDelay
    params: {}
- name: s3UploadRestartFailedUploads
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadRestartFailedUploads
    params: {}
- name: s3UploadRestartFailedUploadTimeout
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadRestartFailedUploadTimeout
    params: {}
- name: s3UploadDeleteOriginalFiles
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadDeleteOriginalFiles
    params: {}
- name: s3UploadVersionFile
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadVersionFile
    params: {}
- name: s3UploadDebugLog
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: s3UploadDebugLog
    params: {}
- name: video_stream
  endpoint:
    path: /api/v1/video_stream
    method: GET
    data_selector: records
    params: {}
- name: ServerListenerStreamPublisher
  endpoint:
    path: com.wowza.wms.plugin.streampublisher.ServerListenerStreamPublisher
    method: ADD
- name: ModuleStreamPublisher
  endpoint:
    path: com.wowza.wms.plugin.streampublisher.ModuleStreamPublisher
    method: ADD
- name: HttpProviderStreamPublisherControl
  endpoint:
    path: com.wowza.wms.plugin.streampublisher.HttpProviderStreamPublisherControl
    method: ADD
- name: ModuleStreamResolver
  endpoint:
    path: /lib/wse-plugin-streamresolver.jar
    method: GET
    data_selector: records
- name: Live Edge application configuration
  endpoint:
    path: /config/modules
    method: POST
    data_selector: ModuleStreamResolver
- name: Server Listener
  endpoint:
    path: /server/listeners
    method: POST
    data_selector: com.wowza.wms.plugin.streamresolver.ServerListenerLocateSourceStream
- name: disconnect_clients
  endpoint:
    path: /how-to-disconnect-connected-clients-after-a-specified-time-period-moduletimeddisconnect
    method: GET
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: records
    params: {}
- name: live_streams
  endpoint:
    path: /live-streams
    method: GET
    data_selector: records
    params: {}
- name: timedDisconnectTime
  endpoint:
    path: /Root/Application
    method: GET
    data_selector: timedDisconnectTime
    params:
      type: Integer
      value: 60
      notes: The time, in seconds, that players are allowed to be connected. Players
        that connect for this duration are then disconnected and must reconnect.
- name: timedDisconnectAllowedAgents
  endpoint:
    path: /Root/Application
    method: GET
    data_selector: timedDisconnectAllowedAgents
    params:
      type: String
      value: FM,Wirecast
      notes: A comma-separated list of User Agent prefixes that's checked when the
        connection is made.
- name: timedDisconnectDebugLog
  endpoint:
    path: /Root/Application
    method: GET
    data_selector: timedDisconnectDebugLog
    params:
      type: Boolean
      value: true
      notes: Enables or disables extra logging.
- name: control_streams
  endpoint:
    path: /control/streams
    method: GET
- name: transcoderControlNames
  endpoint:
    path: /Root/Application/transcoderControlNames
    method: ''
    data_selector: ''
    params: {}
- name: transcoderControlMatchAllow
  endpoint:
    path: /Root/Application/transcoderControlMatchAllow
    method: ''
    data_selector: ''
    params: {}
- name: transcoderControlNoMatchAllow
  endpoint:
    path: /Root/Application/transcoderControlNoMatchAllow
    method: ''
    data_selector: ''
    params: {}
- name: timed_thumbnail_snapshots
  endpoint:
    path: /api/timed_thumbnail_snapshots
    method: POST
    data_selector: snapshots
    params: {}
- name: TranscoderTimedSnapshot
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: properties
    params: {}
- name: ModuleMediaWriterFileMover
  endpoint:
    path: /modules/ModuleMediaWriterFileMover
    method: POST
    data_selector: properties
    params: {}
- name: video_stream
  endpoint:
    path: /api/video/streams
    method: GET
    data_selector: streams
    params: {}
- name: live_stream
  endpoint:
    path: /api/live/streams
    method: GET
    data_selector: streams
    params: {}
- name: ModuleSecureURLParams
  endpoint:
    path: /ModuleSecureURLParams
    method: POST
    data_selector: ModuleSecureURLParams
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: records
    params: {}
- name: live_streams
  endpoint:
    path: /live_streams
    method: GET
    data_selector: records
    params: {}
- name: video_stream
  endpoint:
    path: /api/v1/video_stream
    method: GET
    data_selector: streams
    params: {}
- name: live_stream
  endpoint:
    path: /api/v1/live_stream
    method: GET
    data_selector: streams
    params: {}
- name: stream
  endpoint:
    path: /v1/streams
    method: GET
    data_selector: records
    params: {}
- name: securityPublishUsernamePasswordProvider
  endpoint:
    path: /conf/[application]/Application.xml
    method: POST
    data_selector: ModuleCoreSecurity
    params: {}
- name: RTPAuthentication
  endpoint:
    path: /conf/Authentication.xml
    method: POST
    data_selector: digest
    params: {}
- name: live_streams
  endpoint:
    path: /v1/live/streams
    method: GET
    data_selector: streams
    params: {}
- name: geoIpAccountId
  endpoint:
    path: /Root/Server
    method: POST
    data_selector: geoIpAccountId
    params:
      type: integer
      value: 12345
- name: geoIpLicenseKey
  endpoint:
    path: /Root/Server
    method: POST
    data_selector: geoIpLicenseKey
    params:
      type: string
      value: xyz123
- name: geoIpDatabasePath
  endpoint:
    path: /Root/Server
    method: POST
    data_selector: geoIpDatabasePath
    params:
      type: string
      value: ${com.wowza.wms.ConfigHome}/conf/GeoLite2-Country.mmdb
- name: geoIpAllowedEncoders
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: geoIpAllowedEncoders
    params:
      type: string
      value: Wirecast, FME, FMLE
- name: geoIpAllowedIps
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: geoIpAllowedIps
    params:
      type: string
      value: 127.0.0.1,192.168.1.*
- name: geoIpCountries
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: geoIpCountries
    params:
      type: string
      value: US,GB
- name: geoIpMatchAllow
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: geoIpMatchAllow
    params:
      type: boolean
      value: true
- name: geoIpDebugLog
  endpoint:
    path: /Root/Application
    method: POST
    data_selector: geoIpDebugLog
    params:
      type: boolean
      value: true
- name: thumbnail_images
  endpoint:
    path: /generate/thumbnail/images
    method: GET
- name: thumbnail
  endpoint:
    path: /thumbnail
    method: GET
    params:
      application: '[application-name]'
      streamname: '[stream-name]'
      size: '[width]x[height]'
      fitmode: '[fitmode]'
      crop: '[left],[right],[top],[bottom]'
      format: '[png,jpg]'
- name: server_info
  endpoint:
    path: /get-detailed-server-info
    method: GET
- name: server_info
  endpoint:
    path: /serverInfo
    method: GET
    data_selector: WowzaStreamingEngine
- name: presentation
  endpoint:
    path: /presentation
    method: GET
    data_selector: ''
- name: WebSocket
  endpoint:
    path: /[your-provider]
    method: GET
- name: Generate SMIL file
  endpoint:
    path: /generate/smil
    method: POST
    data_selector: response
    params: {}
- name: live_stream
  endpoint:
    path: /live_streams
    method: GET
- name: vod_stream
  endpoint:
    path: /vod_streams
    method: GET
- name: HttpCustomResponseCode
  endpoint:
    path: /example/HttpCustomResponseCode
    method: POST
    data_selector: properties
    params:
      responseCode: 404
- name: video
  endpoint:
    path: /services/data/vXX.X/sobjects/Video
    method: GET
    data_selector: records
    params: {}
- name: marathonData
  endpoint:
    path: /marathonData
    method: POST
    data_selector: null
    params:
      application: myApplication
      stream: camera1
      name: Bessie Smith
      place: '10'
      time: '4:10:07'
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: records
    params: {}
- name: media_types
  endpoint:
    path: /media/types
    method: GET
    data_selector: records
    params: {}
- name: stream
  endpoint:
    path: /services/data/vXX.X/sobjects/Stream
    method: GET
    data_selector: records
    params: {}
- name: Test Playback
  endpoint:
    path: /TestPlayback
    method: GET
    data_selector: playbackUrls
- name: stream
  endpoint:
    path: /services/data/v1.0/stream
    method: GET
    data_selector: records
- name: stream_target
  endpoint:
    path: /path/to/stream/target
    method: POST
    data_selector: customProperties
    params:
      Name: removeMetadataObjects
      Type: Boolean
      Value: true
- name: live_stream
  endpoint:
    path: /v1/live_streams
    method: GET
    data_selector: streams
- name: custom_property
  endpoint:
    path: /AddCustomProperty
    method: POST
    data_selector: result
    params:
      name: removeMetadataObjects
      type: Boolean
      value: true
- name: video
  endpoint:
    path: /videos
    method: GET
    data_selector: records
- name: playlist
  endpoint:
    path: /playlists
    method: GET
    data_selector: records
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: records
- name: playlists
  endpoint:
    path: /playlists
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /live_streams
    method: GET
    data_selector: records
- name: live_stream
  endpoint:
    path: /live
    method: POST
    data_selector: stream
    params: {}
- name: live_stream
  endpoint:
    path: /live/stream
    method: POST
    data_selector: stream_data
- name: WebRTC Publish
  endpoint:
    path: /developer/webrtc/dev-view-publish
    method: GET
- name: WebRTC Composite
  endpoint:
    path: /developer/webrtc/dev-composite
    method: GET
- name: WebRTC Meeting
  endpoint:
    path: /developer/webrtc/dev-meeting
    method: GET
- name: WebRTC Play
  endpoint:
    path: /developer/webrtc/dev-view-play
    method: GET
- name: stream_file
  endpoint:
    path: /StreamFiles
    method: POST
    data_selector: streamFiles
    params: {}
- name: incoming_streams
  endpoint:
    path: /IncomingStreams
    method: GET
    data_selector: activeStreams
    params: {}
- name: playback
  endpoint:
    path: /applications/{application_name}/playback
    method: GET
- name: stream_file
  endpoint:
    path: /applications/{application_name}/streamFiles
    method: POST
- name: ShoutcastIngest
  endpoint:
    path: /services/data/vXX.X/sobjects/ShoutcastIngest
    method: POST
    data_selector: records
    params: {}
- name: videos
  endpoint:
    path: /services/data/v1/videos
    method: GET
    data_selector: records
    params: {}
- name: playlists
  endpoint:
    path: /services/data/v1/playlists
    method: GET
    data_selector: records
    params: {}
- name: stream_file
  endpoint:
    path: /stream_files
    method: POST
    data_selector: streamFiles
    params: {}
- name: stream_file
  endpoint:
    path: /stream_files
    method: POST
    data_selector: streamFile
    params: {}
- name: incoming_streams
  endpoint:
    path: /incoming_streams
    method: GET
    data_selector: streams
    params: {}
- name: re-stream sample
  endpoint:
    path: /re-stream/sample
    method: POST
    data_selector: stream
    params: {}
- name: re-stream RTSP with password authentication
  endpoint:
    path: /re-stream/rtsp/auth
    method: POST
    data_selector: stream
    params: {}
- name: video
  endpoint:
    path: /videos
    method: GET
    data_selector: records
    params: {}
- name: stream_file
  endpoint:
    path: /applications/{application-name}/stream-files
    method: POST
    data_selector: streamFile
    params: {}
- name: StartupStream
  endpoint:
    path: /conf/StartupStreams.xml
    method: GET
    data_selector: StartupStream
    params: {}
- name: Low-latency stream
  endpoint:
    path: /live-application/low-latency-stream
    method: POST
    data_selector: settings
    params: {}
- name: flushInterval
  endpoint:
    path: /live-application/flushInterval
    method: POST
    data_selector: settings
    params:
      value: 25
- name: onFlushNotifyClients
  endpoint:
    path: /live-application/onFlushNotifyClients
    method: POST
    data_selector: settings
    params:
      value: true
- name: stream_settings
  endpoint:
    path: /docs/how-to-create-and-use-stream-files-in-wowza-streaming-engine
    method: GET
    data_selector: properties
    params: {}
- uri: srt://0.0.0.0:10000
  srtKeyLength: 16
  srtLatency: 400
  srtTooLatePacketDrop: true
  srtTimestampBasedDeliveryMode: true
  srtMaximumSegmentSize: 1500
  srtFlightFlagSize: 25600
  srtMaximumBandwidth: -1
  srtInputBandwidth: 0
  srtOverheadBandwidth: 25
  srtSendNakReports: true
  srtPacketLossTolerance: 0
  srtKeyRefreshRate: '0x1000000'
  srtKeyAnnounce: '0x1000'
  srtReconnectWaitTime: 3000
  srtReceiveBufferSize: '12058624'
  srtReceiveBufferSizeUDP: '12288000'
  srtTimesToPrintStats: 0
  srtDebug: false
  mpegTSFilters:
  - name: main
    mpegtsProgramID: '1'
    mpegtsVideoPID: '283'
    mpegtsAudioPID: '0x101'
  - name: main1
    mpegtsProgramID: '1'
    mpegtsVideoPID: '283'
    mpegtsAudioPID: '0x102'
- uri: udp://192.168.1.100:10000
  sourceControlConnectionTimeout: 1000
  sourceControlReadWriteTimeout: 3000
  sourceControlSessionTimeout: 10000
  sourceControlImageRefreshRate: 2000
  sourceControlImageRefreshMinimumRate: 1000
- name: RTSP Stream
  endpoint:
    path: /live/rtsp
    method: GET
    data_selector: streamSettings
    params:
      uri: rtsp://192.168.1.100:10000
      streamTimeout: 5000
      reconnectWaitTime: 3000
      rtpTransportMode: udp
      rtspValidationFrequency: 15000
      rtspFilterUnknownTracks: true
      rtspStreamAudioTrack: false
      rtspStreamVideoTrack: true
      rtspDebugSession: true
      rtpIgnoreProfileLevelId: true
      rtpIgnoreSPropParameterSets: true
      rtspBindIpAddress: 192.168.1.1
      rtspRemoveUserInfo: true
      rtspSessionTimeout: 8000
      rtspConnectionTimeout: 8000
      rtspMulticastServerDestinationInSetup: true
- name: Live Stream Repeater
  endpoint:
    path: /live/repeater
    method: GET
    data_selector: repeaterSettings
    params:
      lsrSecureTokenOriginSharedSecret: monkeySeeMonkeyDo
      lsrCallFCSubscribe: true
      lsrRemoveDefaultAppInstance: true
      lsrResetOnStreamNotFound: false
- name: SHOUTcast Stream
  endpoint:
    path: /live/shoutcast
    method: GET
    data_selector: shoutcastSettings
    params:
      uri: https://192.168.1.100:80
      streamTimeout: 5000
      reconnectWaitTime: 3000
      shoutcastCharacterEncoding: '8859_1'
      shoutcastMP3GroupCount: 4
      shoutcastSetTimecodesBasedOnSystemClock: true
      shoutcastSourceHostName: false
- name: Apple HLS Stream
  endpoint:
    path: /live/applehls
    method: GET
    data_selector: hlsSettings
    params:
      uri: http://192.168.1.100:1935/live/myStream/playlist.m3u8
      streamTimeout: 5000
      reconnectWaitTime: 3000
      cupertinoManifestLimit: -1
      cupertinoRestGroupOnSingleFailure: true
      cupertinoAutoSegmentBuffer: false
      cupertinoManifestBufferBlockCount: 2
      cupertinoManifestMaxBufferBlockCount: 15
      cupertinoAutoSegmentBufferTime: 30000
      cupertinoChunkMaxDurationAllowed: 30000
      cupertinoPacketDeliveryTime: 200
- name: ServerListener
  endpoint:
    path: /conf/Server.xml
    method: EDIT
    data_selector: ServerListenerStartupStreamsMonitor
    params: {}
- name: Application
  endpoint:
    path: /conf/[application-name]/Application.xml
    method: EDIT
    data_selector: startupStreamsMonitorStreamPrefix
    params: {}
- name: live_stream
  endpoint:
    path: /live_stream
    method: GET
    data_selector: records
    params: {}
- name: multicast_stream
  endpoint:
    path: /Root/Application/RTP
    method: POST
    data_selector: Property
    params: {}
- name: videos
  endpoint:
    path: /services/data/v1/videos
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /services/data/v1/live_streams
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /v1/live/streams
    method: GET
    data_selector: streams
- name: server_logs
  endpoint:
    path: /v1/server/logs
    method: GET
    data_selector: logs
- name: debugKeyFrameTimecodes
  endpoint:
    path: /Root/Application/Streams
    method: POST
    data_selector: properties
    params:
      type: Boolean
      value: 'true'
- name: maxChunkLogCount
  endpoint:
    path: /Root/Application/LiveStreamPacketizer
    method: POST
    data_selector: properties
    params:
      type: Integer
      value: '0'
- name: chunkBreakOnPTS
  endpoint:
    path: /Root/Application/LiveStreamPacketizer
    method: POST
    data_selector: properties
    params:
      type: Boolean
      value: 'false'
- name: maxSegmentLogCount
  endpoint:
    path: /Root/Application/LiveStreamPacketizer
    method: POST
    data_selector: properties
    params:
      type: Integer
      value: '0'
- name: cmafSegmentBreakOnPTS
  endpoint:
    path: /Root/Application/LiveStreamPacketizer
    method: POST
    data_selector: properties
    params:
      type: Boolean
      value: 'false'
- name: video_streams
  endpoint:
    path: /api/video/streams
    method: GET
    data_selector: streams
- name: recordings
  endpoint:
    path: /api/recordings
    method: GET
    data_selector: recordings
- name: stream_source
  endpoint:
    path: /v1/streams
    method: GET
    data_selector: data
    params: {}
- name: mpegtsImportAC3
  endpoint:
    path: /Root/Application/RTP
    method: POST
    data_selector: Property
    params: {}
- name: stream
  endpoint:
    path: /services/data/vXX.X/sobjects/Stream
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: audioPacketizerAAC
  endpoint:
    path: /Root/Application/RTP
    method: POST
    data_selector: Property
    params:
      Name: audioPacketizerAAC
      Type: String
      Value: com.wowza.wms.rtp.packetizer.RTPPacketizerMPEG4LATM
- name: stream
  endpoint:
    path: /services/data/vXX.X/sobjects/Stream
    method: GET
    data_selector: records
    params: {}
- name: videos
  endpoint:
    path: /services/data/vXX.X/videos
    method: GET
    data_selector: records
    params: {}
- name: HLS
  endpoint:
    path: /cupertinostreaming
    method: GET
    data_selector: records
- name: MPEG-DASH
  endpoint:
    path: /mpegdashstreaming
    method: GET
    data_selector: records
- name: nDVR
  endpoint:
    path: /dvrchunkstreaming
    method: GET
    data_selector: records
- name: CMAF
  endpoint:
    path: /cmafstreaming
    method: GET
    data_selector: records
- name: HLS (Cupertino) Live Stream Properties
  endpoint:
    path: /services/data/vXX.X/sobjects/LiveStreamPacketizer
    method: POST
    data_selector: Properties
    params: {}
- name: HLS (Cupertino) VOD Properties
  endpoint:
    path: /services/data/vXX.X/sobjects/HTTPStreamer
    method: POST
    data_selector: Properties
    params: {}
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /api/v1/live_streams
    method: GET
    data_selector: records
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
    params: {}
- name: playlists
  endpoint:
    path: /api/v1/playlists
    method: GET
    data_selector: records
    params: {}
- name: cupertinoPacketizeAllStreamsAsTS
  endpoint:
    path: /services/data/vXX.X/sobjects/CupertinoPacketizer
    method: POST
    data_selector: properties
    params: {}
- name: live_stream
  endpoint:
    path: /v1/live_streams
    method: GET
    data_selector: streams
    params: {}
- name: LiveStreamPacketizer
  endpoint:
    path: /Root/Application/LiveStreamPacketizer
    method: GET
    data_selector: Properties
    params: {}
- name: stream_file
  endpoint:
    path: /create-stream-file
    method: POST
    data_selector: streamFiles
    params: {}
- name: smil_file
  endpoint:
    path: /create-smil-file
    method: POST
    data_selector: smilFiles
    params: {}
- name: alternative-audio-abr
  endpoint:
    path: /path/to/alternative-audio-abr.smil
    method: GET
    data_selector: switch
- name: alternative-video-abr
  endpoint:
    path: /path/to/alternative-video-abr.smil
    method: GET
    data_selector: switch
- name: multi-file-alternative-audio
  endpoint:
    path: /path/to/multi-file-alternative-audio.smil
    method: GET
    data_selector: switch
- name: single-file-alternative-audio
  endpoint:
    path: /path/to/single-file-alternative-audio.smil
    method: GET
    data_selector: switch
- name: playlist
  endpoint:
    path: /vod/mp4:sample.mp4/playlist.m3u8
    method: GET
    data_selector: chunklist
- name: chunklist
  endpoint:
    path: /vod/mp4:sample.mp4/chunklist_w1556499301.m3u8
    method: GET
    data_selector: chunklist
- name: media
  endpoint:
    path: /vod/mp4:sample.mp4/media_w1556499301_0.ts
    method: GET
    data_selector: media
- name: live_streams
  endpoint:
    path: /live-streams
    method: GET
    data_selector: streams
    params: {}
- name: Cupertino Streaming Packetizer
  endpoint:
    path: /applications/{application-name}/properties/CupertinoStreamingPacketizer
    method: GET
    data_selector: properties
    params: {}
- name: custom_properties
  endpoint:
    path: /Root/Application/HTTPStreamer
    method: POST
    data_selector: properties
    params: {}
- name: LiveStreamPacketizer
  endpoint:
    path: /conf/application-name/Application.xml
    method: POST
    data_selector: Property
    params: {}
- name: HTTPStreamer
  endpoint:
    path: /conf/application-name/Application.xml
    method: POST
    data_selector: Property
    params: {}
- name: Custom Property
  endpoint:
    path: /Root/Application/HTTPStreamer
    method: POST
    data_selector: properties
    params:
      name: cupertinoAppendQueryParamsToEncUrl
      type: Boolean
      value: 'false'
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
    params: {}
- name: liveStreams
  endpoint:
    path: /api/v1/liveStreams
    method: GET
    data_selector: records
    params: {}
- name: live_stream
  endpoint:
    path: /live/stream
    method: GET
    data_selector: streams
    params: {}
- name: pre_roll
  endpoint:
    path: /vod/pre_roll
    method: GET
    data_selector: video
    params: {}
- name: vod_playlist
  endpoint:
    path: /vod/playlist
    method: GET
    data_selector: videos
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /live_streams
    method: GET
    data_selector: records
- name: videos
  endpoint:
    path: /api/v2/videos
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /api/v2/live_streams
    method: GET
    data_selector: records
- name: cupertinoEnableAverageBandwidth
  endpoint:
    path: /Root/Application/HTTPStreamer
    method: POST
    data_selector: properties
    params:
      path: /Root/Application/HTTPStreamer
      name: cupertinoEnableAverageBandwidth
      type: Boolean
      value: true
- name: MPD redirects
  endpoint:
    path: /mpd/redirects
    method: GET
    data_selector: MPD.Location
    params: {}
- name: MPD HTTP redirects
  endpoint:
    path: /mpd/http_redirects
    method: GET
    data_selector: HTTP.redirect
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: multi-file-multi-audio-multi-video
  endpoint:
    path: /path/to/multi-file-multi-audio-multi-video
    method: POST
    data_selector: smil
    params: {}
- name: startup
  endpoint:
    path: /path/to/startup
    method: POST
    data_selector: smil
    params: {}
- name: alternative-audio
  endpoint:
    path: /path/to/alternative-audio
    method: POST
    data_selector: smil
    params: {}
- name: alternative-audio-split
  endpoint:
    path: /path/to/alternative-audio-split
    method: POST
    data_selector: smil
    params: {}
- name: alternative-audio-abr
  endpoint:
    path: /path/to/alternative-audio-abr
    method: POST
    data_selector: smil
    params: {}
- name: vod_encryption_key_chunk
  endpoint:
    path: /vod/encryption/key/chunk
    method: GET
    data_selector: CENCInfo
    params:
      chunkId: '-1'
- name: live_encryption_key_chunk
  endpoint:
    path: /live/encryption/key/chunk
    method: GET
    data_selector: CENCInfo
    params:
      chunkId: '-1'
- name: WebM MPEG-DASH streams
  endpoint:
    path: /docs/how-to-secure-mpeg-dash-streaming-using-common-encryption-cenc
    method: GET
    data_selector: ''
    params: {}
- name: video
  endpoint:
    path: /services/data/vXX.X/sobjects/Video
    method: GET
    data_selector: records
    params: {}
- name: live_stream
  endpoint:
    path: /services/data/vXX.X/sobjects/LiveStream
    method: GET
    data_selector: records
    params: {}
- name: CMAF packetization properties
  endpoint:
    path: /Root/Application/LiveStreamPacketizer
    method: GET
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /live_streams
    method: GET
    data_selector: records
- name: audio_renditions
  endpoint:
    path: /path/to/audio/renditions
    method: GET
    data_selector: audio_entries
    params: {}
- name: video_renditions
  endpoint:
    path: /path/to/video/renditions
    method: GET
    data_selector: video_entries
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: records
- name: live_stream
  endpoint:
    path: /services/data/vXX.X/sobjects/LiveStream
    method: GET
    data_selector: records
- name: vod_stream
  endpoint:
    path: /services/data/vXX.X/sobjects/VodStream
    method: GET
    data_selector: records
- name: livehttporigin
  endpoint:
    path: /livehttporigin/[*stream-name*]/playlist.m3u8
    method: GET
    data_selector: ''
    params: {}
- name: live_streams
  endpoint:
    path: /live/streams
    method: GET
    data_selector: records
- name: HLS stream
  endpoint:
    path: /myApplication/myStream/playlist.m3u8
    method: GET
    data_selector: chunklist
    params: {}
- name: HTTPStreamer
  endpoint:
    path: /conf/Application.xml
    method: PUT
    data_selector: Properties
    params: {}
- name: live_streams
  endpoint:
    path: /v1/live-streams
    method: GET
    data_selector: streams
    params: {}
- name: stream
  endpoint:
    path: /streams
    method: GET
    data_selector: records
- name: recording
  endpoint:
    path: /recordings
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /api/live_streams
    method: GET
    data_selector: streams
    params: {}
- name: vod_files
  endpoint:
    path: /api/vod_files
    method: GET
    data_selector: files
    params: {}
- name: publish_test
  endpoint:
    path: /developer/webrtc/dev-view-publish
    method: GET
- name: composite_test
  endpoint:
    path: /developer/webrtc/dev-composite
    method: GET
- name: meeting_test
  endpoint:
    path: /developer/webrtc/dev-meeting
    method: GET
- name: play_test
  endpoint:
    path: /developer/webrtc/dev-view-play
    method: GET
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
    params: {}
- name: RTSP source
  endpoint:
    path: /ingest/rtsp
    method: POST
    data_selector: stream
    params: {}
- name: SRT source
  endpoint:
    path: /ingest/srt
    method: POST
    data_selector: stream
    params: {}
- name: RTMP source
  endpoint:
    path: /ingest/rtmp
    method: POST
    data_selector: stream
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: records
    params: {}
- name: RTP Jitter Buffer
  endpoint:
    path: /conf/[application-name]/Application.xml
    method: POST
    data_selector: Properties
    params: {}
- name: Packet Loss Logging
  endpoint:
    path: /conf/[application-name]/Application.xml
    method: POST
    data_selector: Properties
    params: {}
- name: stream
  endpoint:
    path: /start-stream
    method: POST
- name: stop_stream
  endpoint:
    path: /stop-stream
    method: POST
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: records
    params: {}
- name: playlists
  endpoint:
    path: /playlists
    method: GET
    data_selector: records
    params: {}
- name: RTPPacketizerMPEGTSPacketNotify
  endpoint:
    path: /Root/Application/Streams
    method: POST
    data_selector: custom_property
    params:
      Path: /Root/Application/Streams
      Name: mpegtsPacketNotifyClass
      Type: String
      Value: com.mycompany.wowza.plugin.RTPPacketizerMPEGTSPacketNotifyID3Data
- name: streams
  endpoint:
    path: /services/data/v1/streams
    method: GET
    data_selector: records
- name: MPEG-TS Output Configuration
  endpoint:
    path: /conf/application/Application.xml
    method: POST
    data_selector: Properties
    params: {}
- name: stream_statistics
  endpoint:
    path: /stream/statistics
    method: GET
    data_selector: records
    params: {}
- name: live_sources
  endpoint:
    path: /live/sources
    method: GET
    data_selector: records
    params: {}
- name: video
  endpoint:
    path: /videos
    method: GET
    data_selector: records
- name: mpegtsOutVideoPID
  endpoint:
    path: /conf/[application]/Application.xml
    method: POST
    data_selector: Value
    params:
      mpegtsOutVideoPID: '500'
- name: mpegtsOutVideoStreamID
  endpoint:
    path: /conf/[application]/Application.xml
    method: POST
    data_selector: Value
    params:
      mpegtsOutVideoStreamID: '224'
- name: mpegtsOutAudioPID
  endpoint:
    path: /conf/[application]/Application.xml
    method: POST
    data_selector: Value
    params:
      mpegtsOutAudioPID: '501'
- name: mpegtsOutAudioStreamID
  endpoint:
    path: /conf/[application]/Application.xml
    method: POST
    data_selector: Value
    params:
      mpegtsOutAudioStreamID: '225'
- name: videos
  endpoint:
    path: /api/videos
    method: GET
    data_selector: videos
    params: {}
- name: playlists
  endpoint:
    path: /api/playlists
    method: GET
    data_selector: playlists
    params: {}
- name: live_stream
  endpoint:
    path: /live
    method: POST
    data_selector: streams
- name: stream
  endpoint:
    path: /v1/streams
    method: GET
    data_selector: streams
- name: stream
  endpoint:
    path: /services/data/vXX.X/sobjects/Stream
    method: GET
    data_selector: records
    params: {}
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /api/v1/live_streams
    method: GET
    data_selector: records
- name: MediaStreamNameGroups
  endpoint:
    path: /conf/StartupStreams.xml
    method: GET
    data_selector: streams
    params: {}
- name: video
  endpoint:
    path: /video
    method: GET
- name: textstream
  endpoint:
    path: /textstream
    method: GET
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: data
    params: {}
- name: live_streams
  endpoint:
    path: /api/v1/live_streams
    method: GET
    data_selector: data
    params: {}
- name: live_stream
  endpoint:
    path: /live/streams
    method: GET
    data_selector: streams
    params: {}
- name: videos
  endpoint:
    path: /services/data/v1/videos
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /services/data/v1/live_streams
    method: GET
    data_selector: records
- name: Transcoder
  endpoint:
    path: /transcoder
    method: GET
    data_selector: transcoderStatus
- name: xrate1
  endpoint:
    path: /live/xrate1
    method: GET
    data_selector: stream
- name: TranscoderConfiguration
  endpoint:
    path: /docs/configure-transcoder
    method: GET
    data_selector: configuration
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: records
- name: live_streams
  endpoint:
    path: /live_streams
    method: GET
    data_selector: records
- name: live_stream
  endpoint:
    path: /v1/live/streams
    method: GET
    data_selector: streams
- name: server_logs
  endpoint:
    path: /v1/logs
    method: GET
    data_selector: logs
- name: video_streams
  endpoint:
    path: /api/v1/video_streams
    method: GET
    data_selector: data
- name: live_streams
  endpoint:
    path: /api/v1/live_streams
    method: GET
    data_selector: data
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: videos
    params: {}
- name: live_streams
  endpoint:
    path: /api/v1/live_streams
    method: GET
    data_selector: live_streams
    params: {}
- name: video_encoding_parameters
  endpoint:
    path: /wowzastreamingengine_access.log
    method: GET
    data_selector: records
- name: video_decoding_parameters
  endpoint:
    path: /transcoder/templates
    method: GET
    data_selector: video_decoding_parameters
    params: {}
- name: audio_parameters
  endpoint:
    path: /wowzastreamingengine/access.log
    method: GET
    data_selector: parameters
    params: {}
- name: stream
  endpoint:
    path: /api/v1/streams
    method: GET
    data_selector: records
    params: {}
- name: audio_only_transcoder
  endpoint:
    path: /transcoder/audioonly
    method: POST
    data_selector: transcoded_stream
    params: {}
- name: mainconcept.reordering_delay
  endpoint:
    path: /path/to/parameter
    method: POST
    data_selector: parameters
    params:
      value: 3
- name: stream
  endpoint:
    path: /v1/streams
    method: GET
    data_selector: data
    params: {}
- name: application
  endpoint:
    path: /v1/applications
    method: GET
    data_selector: data
    params: {}
- name: Audio Parameters
  endpoint:
    path: /<Decode>
    method: POST
    data_selector: Parameters
    params: {}
- name: deinterlaceDoubleRate
  endpoint:
    path: /Decode/Video/Parameter
    method: POST
    data_selector: Parameter
    params:
      Name: default.deinterlaceDoubleRate
      Value: 1
      Type: Long
- name: stream_statistics
  endpoint:
    path: /v1/stream/statistics
    method: GET
    data_selector: statistics
    params: {}
- name: server_info
  endpoint:
    path: /v1/server/info
    method: GET
    data_selector: info
    params: {}
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
    params: {}
- name: transcoding_configurations
  endpoint:
    path: /transcoding/configurations
    method: GET
    data_selector: configurations
- name: 1080p30
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
  video:
    Codec: H.264
    Implementation: u30
    GPUID: '-1'
    Profile: high
    Bitrate: 6000000
    KeyFrameInterval:
      FollowSource: false
      Interval: 60
    FrameSize:
      FitMode: stretch
      Width: 1920
      Height: 1080
      Crop: 0,0,0,0
  audio:
    Codec: PassThru
    Bitrate: ${SourceAudioBitrate}
- name: 720p30
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
  video:
    Codec: H.264
    Implementation: u30
    GPUID: '-1'
    Profile: high
    Bitrate: 3000000
    KeyFrameInterval:
      FollowSource: false
      Interval: 60
    FrameSize:
      FitMode: stretch
      Width: 1280
      Height: 720
      Crop: 0,0,0,0
  audio:
    Codec: PassThru
    Bitrate: ${SourceAudioBitrate}
- name: 480p30
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
  video:
    Codec: H.264
    Implementation: u30
    GPUID: '-1'
    Profile: high
    Bitrate: 2500000
    KeyFrameInterval:
      FollowSource: false
      Interval: 60
    FrameSize:
      FitMode: stretch
      Width: 848
      Height: 480
      Crop: 0,0,0,0
  audio:
    Codec: PassThru
    Bitrate: ${SourceAudioBitrate}
- name: 240p30
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
  video:
    Codec: H.264
    Implementation: u30
    GPUID: '-1'
    Profile: high
    Bitrate: 625000
    KeyFrameInterval:
      FollowSource: false
      Interval: 60
    FrameSize:
      FitMode: stretch
      Width: 432
      Height: 240
      Crop: 0,0,0,0
  audio:
    Codec: PassThru
    Bitrate: ${SourceAudioBitrate}
- name: stream
  endpoint:
    path: /services/data/vXX.X/sobjects/Stream
    method: GET
    data_selector: records
    params: {}
- name: push_publish_map
  endpoint:
    path: /PushPublishMap.txt
    method: GET
- name: PushPublishMap
  endpoint:
    path: /conf/${com.wowza.wms.context.Application}/PushPublishMap.txt
    method: GET
    data_selector: map_entries
- name: wowza_video
  endpoint:
    path: /services/data/vXX.X/sobjects/WowzaVideo
    method: POST
- name: stream_debugging
  endpoint:
    path: /docs/how-to-debug-push-publishing
    method: GET
    data_selector: stream-level issues
    params: {}
- name: push_publishing_api
  endpoint:
    path: /docs/sample-map-file-entries-for-stream-target-destinations-push-publishing
    method: GET
    data_selector: push publishing API
    params: {}
- name: liveTarget
  endpoint:
    path: /liveTarget
    method: POST
    data_selector: stream
    params: {}
- name: liveSource
  endpoint:
    path: /liveSource
    method: POST
    data_selector: stream
    params: {}
- name: recording
  endpoint:
    path: /recording
    method: GET
    data_selector: records
- name: live_stream
  endpoint:
    path: /live_stream
    method: GET
    data_selector: records
- name: push_streams
  endpoint:
    path: /docs/push-streams-to-wowza-cdn-from-wowza-streaming-engine
    method: GET
- name: pull_streams
  endpoint:
    path: /docs/how-to-stream-to-wowza-cdn
    method: GET
- name: transcoding
  endpoint:
    path: /docs/send-a-stream-from-wowza-streaming-engine-for-transcoding-in-wowza-video
    method: GET
- name: viewer_data
  endpoint:
    path: /docs/how-to-get-viewer-data-for-a-wowza-cdn-stream-target-by-using-the-wowza-video-rest-api
    method: GET
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- The module automatically enables captions for WebVTT output.
- The module does not translate the source audio into different language tracks.
- Wowza is an ideal choice for those looking for flexibility not only in the solution
  itself, but also in how it can adapt to an evolving video strategy.
- Wowza Video is pre-integrated with Flowplayer
- Flowplayer allows customization and flexibility for user experience
- Integrate your platform with other tools to maximize the value of video analytics.
- Providing developers mission critical live streaming and video on demand through
  the web, custom apps, and onto any device.
- Requires OAuth2 setup for streaming services.
- Ensure proper permissions are set for API access.
- Uses OAuth2 with refresh token - requires setup of connected app in Wowza
- Some objects may return nulls in deeply nested fields
- Adobe no longer supports Flash Player, making RTMP an uncommon format for video
  playback.
- Wowza can still ingest an RTMP source and repackage it for delivery with a more
  playback-friendly protocol.
- Expert guidance on integrating technology and optimizing architecture
- Customized solutions available for various use cases
- Get support quickly through FAQs and support resources.
- Uses OAuth2 with refresh token — requires setup of connected app in Wowza
- Known issues and limitations
- Get the help you need quickly with expert-level resources and technical support
- 'Trial limitations: watermarks are added to video and audio streams processed by
  the Transcoder'
- The trial version does not include HTTP Origin functionality.
- Streaming server pricing varies based on usage and plan.
- Known issues and limitations in Wowza Video 2
- Supports various video streaming functionalities.
- Requires proper setup of OAuth2 credentials in Wowza.
- Wowza has built a culture of security that protects customer and company data through
  a holistic set of controls, processes, and guidelines.
- As part of our commitment to delivering secure streaming services and ensuring customer
  confidentiality, we’ve outlined the security practices governing our infrastructure
  and day-to-day operations below.
- Wowza maintains a formal Business Continuity and Disaster Recovery plan and undergoes
  annual table-top tests to ensure Wowza’s leaders are prepared in the event of an
  outage or incident.
- Wowza is now SOC 2 Type II certified with zero exceptions.
- Wowza is the most cost-effective, easy-to-use, and feature-rich live streaming and
  video platform on the market.
- For geographies not listed above, please email resellers@wowza.com to inquire about
  local resellers.
- The Wowza Channel Partner portal is your single source for program information and
  updates, sales tools, and links to all the resources you need.
- Requires OAuth2 authentication
- API rate limits may apply
- This newly released Frost & Sullivan Radar Report focuses on the video and streaming
  needs of Media and Entertainment companies.
- Some objects like Contact may return nulls in deeply nested fields
- Source user name and password values are case-sensitive and can only contain alphanumeric,
  period (.), underscore (_), and hyphen (-) characters.
- Default streaming port for RTMP is 1935.
- Live-to-VOD feature allows you to create video-on-demand assets from your live streams
  instantly.
- Different camera models implement the PTZ features in different ways. If your camera
  doesn't respond to these controls, it may not be supported at this time.
- Wowza Streaming Engine supports a variety of streaming protocols and live streaming
  configurations.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- If you set the authentication method to digest, you'll want to add that to the cURL
  request.
- Some objects like Video may return nulls in deeply nested fields
- Access to the Properties tab is limited to administrators with advanced permissions.
- Wowza Streaming Engine 4.3.0 or later is required.
- Known issues and limitations may affect integration or data quality
- Uses OAuth2 with refresh token — requires setup of connected app in Wowza Video
- Enable username/password authentication for RTMP and RTSP publishing
- Requires setup of connected app in Wowza.
- Some endpoints may have rate limits.
- Wowza Streaming Engine 4.5.0 or later is required.
- Manage SMIL files with the REST API
- Uses OAuth2 with refresh token — requires setup of connected app in Wowza.
- Some objects may return nulls in deeply nested fields.
- Stream files must be disconnected before they can be deleted.
- During GET requests to the /v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/adv
  endpoint, the wowzaVideoApiToken used for Wowza Video stream targets is obfuscated.
- Requires setup of Wowza Streaming Engine for integration.
- Uses OAuth2 with refresh token — requires setup of connected app in API
- Uses OAuth2 with refresh token for authentication
- Wowza Streaming Engine 4.5 or later is required.
- If your live stream exceeds the maximum length, Facebook terminates the post and
  saves the video.
- Uses OAuth2 with refresh token — requires setup of connected app in Wowza Streaming
  Engine
- The instructions in this article are meant for use with Wowza Streaming Engine versions
  4.8.26 and earlier.
- Wowza Streaming Engine 4.7.4 has a known error that may break the stream target
  functionality for sending streams to Wowza Video Legacy for transcoding. We recommend
  updating to Wowza Streaming Engine 4.7.5 or later.
- Requires setup of connected app in Wowza Video
- Some API calls may have rate limits
- Uses JSON Web Tokens for API authentication
- The instructions in this article are meant for use with Wowza Streaming Engine versions
  4.8.27 and later.
- Wowza Streaming Engine 4.7.4 has a known error that may break the stream target
  functionality for sending streams to Wowza Video for transcoding.
- To preserve parameters, include them in PUT requests when updating your Wowza Video
  stream targets. Otherwise, they get removed during the PUT call.
- 'Wowza Streaming Engine REST API requests must include three headers: Accept, Content-Type,
  and charset.'
- Requires setup of connected app in Wowza
- Using the group-manager profile is the most efficient way to stream adaptive bitrate
  content to Akamai and is not supported in Wowza Streaming Engine Manager.
- Stream targets created using the group-manager profile do not appear in Wowza Streaming
  Engine Manager.
- Requires setup of a connected app in Wowza Video
- Requires setup of connected app in Wowza API.
- Use a JSON validator to validate the map entries.
- A Subscription or Perpetual license for Wowza Streaming Engine includes access to
  the REST API. A separate license isn't required.
- Requires setup of connected app in Wowza Streaming Engine
- Some endpoints may have rate limits
- Requires OAuth2 authentication for all API requests
- Access to the Modules tab is limited to administrators with advanced permissions.
- If you add a module to an application while it's running, you must restart the application
  for the changes to take effect.
- If you modify an installed module, you must restart Wowza Streaming Engine for the
  changes to take effect.
- Ensure to configure the connected app for OAuth2 authentication.
- Multiple listeners of the same type can be added.
- Each listener is called in the order it was added.
- Known issues and limitations in Wowza Video
- Example module for controlling access to RTSP/RTP streams.
- nDVR starts recording a stream as soon as the stream starts by default.
- To control nDVR recording, use the HTTP provider with a specific URL format.
- Wowza Streaming Engine™ 4.5.0 or later is required.
- For full functionality, including UTC-based request delegates and MPEG-DASH support,
  use Wowza Streaming Engine 4.7.7.01 or later.
- Use the HTTP provider to control nDVR recording via a URL.
- Wowza Streaming Engine™ 4.4.0 or later is required.
- Uses OAuth2 with refresh token
- This code example isn't a complete solution.
- The new MediaCacheSource isn't added to [install-dir]/conf/MediaCache.xml automatically.
- Uses OAuth2 with refresh token – requires setup of connected app in Wowza
- This article is intended for developers who are familiar with Wowza Streaming Engine
  and are experienced with Java programming and XML.
- Using overlays can put additional load on your server because the complicated image
  manipulation can consume a lot of processing power.
- This feature supports manipulation of images and text to generate animation sequences.
  It doesn't support stream manipulation such as picture-in-picture or multi-stream
  compositing.
- Using Transcoder to place overlay images onto video-on-demand streams isn't supported.
- Uses Wowza Streaming Engine for live streaming and re-streaming.
- This module only serves as a simple example of how the decryption API works.
- In real-world usage, this module will most likely be integrated with your PlayReady
  key server to set decryption keys on a per-file basis.
- Requires setup of connected app in Wowza Video API
- Some responses may include nested fields
- Some operations may have rate limits
- Wowza Streaming Engine 4.4.0 or later is required to use the IHTTPStreamerHTTPOriginSessionIdProvider
  API hook to control HTTP origin session creation and combination.
- The IHTTPStreamerHTTPOriginSessionIdProvider API hook won't work properly if you
  require different behaviors based on the query parameter, such as wowzaplaystart
  or wowzaplayduration.
- Convert timed metadata from AMF to emsg
- Wowza Streaming Engine 4.8.10 or later is required.
- Wowza Streaming Engine currently does not support using emsg metadata with VOD or
  nDVR streams.
- Create a live application named 'live' with the StreamType property set to 'live'.
- Each item must be keyframe-aligned for switching to work.
- The application that is specified for the redirect connection does not have to have
  be preconfigured.
- Dynamically switches between native RTP and MPEG-TS delivery when streaming out
  of Wowza Streaming Engine using RTSP.
- Uses RTMP for live streaming
- Insert keyframes into transcoded streams
- Wowza Streaming Engine media server software version 4.5.0.03 or later is required.
- Load-balance NVIDIA accelerated transcoding across GPUs
- Wowza Streaming Engine 4.8.0 has a known issue with GPU performance when using NVIDIA
  hardware-accelerated decoding. For more information, see Wowza Streaming Engine
  4.8.0 Release Notes. To address this issue, use Wowza Streaming Engine 4.8.5 or
  later.
- Wowza Streaming Engine™ 4.6.0 or later is required.
- Built-in TranscoderVideoLoadBalancerCUDASimple class can be used without additional
  coding.
- Log play statistics on a timer
- Ensure to configure the necessary streaming settings in Wowza Streaming Engine before
  ingestion.
- Logs stats for each play stream on a timer
- Uses OAuth2 with refresh token – requires setup of connected app in api
- Modify or fix SDP data sent from IP cameras
- Edit [*install-dir*]/conf/[*application-name*]/Application.xml and add the property
  to the <MediaCaster>/<Properties> container.
- Monitor MPEG-TS ingestion to process additional data streams
- With Wowza Streaming Engine 4.8.26, we introduced the ModuleAdMarkers class as an
  improved way to insert MPEG-TS SCTE-35 tags for HLS live streams.
- The generic Stream Target file handler is used to process Apple HLS chunks and playlists.
- Some responses may contain nulls in certain fields
- Not all RTSP and HTTP players support redirects.
- To use the startMediaCasterStream command, the appInstance in which you want to
  start the stream must first be running.
- Requires JMX connection with proper credentials.
- Uses the Stream class for switching between different stream sources.
- Listen for RTMP stream events and codec information
- You can't use this interface in the same application with the StreamNameAlias AddOn,
  and you can't use .stream files if you're using this interface.
- Aliasing only changes a stream name. You can't use aliasing to change the IP address,
  domain name, or application name.
- Publish server-side live streams
- Switches every 10 seconds between VOD and live stream.
- Uses OAuth2 for authentication
- 'Stream names must start with the amlst: prefix'
- Uses OAuth2 with refresh token – requires setup of connected app in Wowza Video
- The following sample modules require compiling and packaging into a .jar file.
- The IMediaListReader interface does provide additional context information such
  as the IHTTPStreamerSession from which the stream is being requested.
- The acquire call will start the publishing/recording process if it's not already
  started and will keep it going even if all clients stop viewing the stream.
- The release call will remove the stream lock. If no clients are currently viewing
  the stream, then it will be unloaded.
- Monitor and control connections made via MediaCaster
- Some features may not be available in all regions
- Use the ModuleMediaCasterNotifyExample module with an application named testlive.
- Restart Wowza Streaming Engine if it was running.
- Create pseudo-live streams using files
- The play function takes filename, startTime, length, and reset parameters.
- Requires OAuth2 authentication setup for accessing the Wowza API.
- In Wowza Streaming Engine versions 4.7.7 and earlier, the getChunkDurationTarget
  method is used to get the duration target instead of getSegmentDurationTarget.
- Intercept and block incoming UDP packets for an RTP or MPEG-TS stream
- To add the wrapper to your Application.xml file, add the property to the <RTP> Properties
  container.
- Use JMX to start and stop VHost
- Commands are executed via command line interface.
- Uses OAuth2 with refresh token.
- Inserts SCTE-35 ad markers for HLS live streams.
- Default MPEG-TS monitor implementation for ad marker (SCTE-35) ingestion.
- Azure's Speech SDK for Java doesn't support Windows on ARM64.
- Documentation available for configuring live streams and managing recordings
- Security features for both live streams and videos
- This module only supports SCTE-35 splice_insert() commands and not time_signal()
  commands.
- It's used with live streams and by default doesn't support pre-roll and post-roll
  ad insertion.
- Additionally, it doesn't work with CMAF-packetized HLS and MPEG-DASH live streams
  generated by Wowza Streaming Engine.
- Required to be set to true for the correct use of EXT-X-DATERANGE tags.
- Required to utilize the EXT-X-CUE tag type.
- Used only with EXT-X-DATERANGE tags. Enable this property to include an EXT-X-DATERANGE
  tag for splice-in events.
- Used only with EXT-X-DATERANGE tags. Disable this property to exclude START-DATE
  from the end tag.
- Used only with EXT-X-DATERANGE tags. Disable this property to exclude END-DATE from
  the end tag.
- Used only with EXT-X-DATERANGE tags. Enable this property to include SCTE-35 data
  in the EXT-X-DATERANGE tags.
- Specifies if expired events should be removed from the live MPEG-DASH manifest.
- Wowza Streaming Engine 4.0.0 or later is required.
- The new streams count toward the maximum of three inbound connections allowed for
  Trial licenses.
- VHost Listeners and HTTP Providers can't be configured in Wowza Streaming Engine
  Manager. You must edit the configuration XML files manually.
- Uses RTMP and RTSP for live streaming.
- Measurement ID is a string like G-XXXXXXXXXX.
- Enable debug logging in the module and append the _dbg=1 parameter to requests.
- Unexpected results may occur if sources aren't synchronized.
- The full path to the blacklist file is /usr/local/WowzaStreamingEngine/conf/blacklist.txt
- Enables extra logging with blacklistStreamsDebugLog set to true
- No specific authentication required for basic setup
- A pipe-delineated list of User-Agent strings. Set this property only if you need
  to change the default values.
- Enables logging of the filter setting and User-Agent string for each connection.
- Control access to your application by checking referer domain
- A comma-separated list of stream names. Use the wildcard (*) character by itself
  to indicate all streams will be duplicated.
- Set to an empty string to have the same name published on the target.
- Uses username/password authentication for RTMP and RTSP publishing
- Change the authentication method as needed.
- Be careful when using HTTPStreamControl with the StreamPublisher module. Changes
  made to one module may not be picked up in the other module.
- HTTPStreamControl uses internal ApplicationInstance properties to store references
  to streams and playlists. Do not use the same name for a stream and a playlist.
- Uses OAuth2 with refresh token – requires setup of connected app in Wowza Streaming
  Engine
- 'Maximum bitrate, in kilobits per second (Kbps), that''s allowed for any publisher.
  Setting to 0 disables bandwidth checking. (default: 800)'
- 'Enables or disables extra logging. (default: false)'
- Start recording streams automatically
- Wowza Streaming Engine™ 4.0.0 or later is required.
- Some API responses may include nulls in deeply nested fields
- As a best practice when working with this module, we recommend using MP4 files that
  match the keyframe interval or group of pictures (GOP) and frame rate of the source
  live stream.
- For best results when switching between live and looped content, use an MP4 file
  that's at least 30 seconds long.
- Access content locally before trying a remote source
- The Path setting isn't the same as for a regular module property.
- If the application is a VOD Edge application, this property will have been set already
  and you should update the Value.
- The file paths for the media assets referenced in the SMIL file to be checked, in
  a comma-separated list.
- Wowza Streaming Engine 4.0.0 or later is required
- Control which streams get packetized for HTTP streaming
- The spelling of referer is intentional.
- If set to true, extra debug logging enabled for the module.
- The new HTTP provider must be above the last HTTP provider that's used to resolve
  all requests that aren't handled by other providers.
- Some features may not be available in all deployments
- Each application that's configured to load a schedule must have its own SMIL file.
- The SMIL file must be in the application's Stream Storage directory.
- The ModuleStreamResolver module doesn't work with Wowza Streaming Engine 4.7.8.
  If this module is required for your workflow, you must use an earlier or later version
  of the Wowza Streaming Engine media server software.
- The ModuleStreamResolver module doesn't support nDVR streams.
- Disconnect clients after a specified time period
- Control which streams get transcoded
- Transcoder must be enabled in the Wowza Streaming Engine application.
- fileMoverDestinationPath supports variables for dynamic paths
- 'fileMoverDeleteOriginal: If true, original file is deleted after copying'
- 'fileMoverVersionFile: If true, target file is versioned if it exists'
- 'fileMoverFileExtension: Uncomment to force a different file extension'
- Includes features for video on demand and live streaming.
- The modules described in this article are built-in with Wowza Streaming Engine.
- You can't use ModuleSecureURLParams and ModuleRTMPAuthenticate at the same time.
- Some known issues and limitations may affect video streaming quality.
- Requires setup of JDBC driver for MySQL
- Restart Wowza Streaming Engine after configuration changes
- API may have rate limits
- This HTTP provider only works on Windows and Linux operating systems.
- Known issues and limitations may exist.
- Requires configuration in VHost.xml for custom HTTP provider.
- Uses OAuth2 authentication.
- Files you add to the /assets package are included in the compiled .jar file.
- Wowza Streaming Engine 4.5.0 is required for HTTP providers to support WebSocket
  sessions.
- Wowza Streaming Engine™ 4.7.1 or later is required.
- To use an HTTP provider to generate a SMIL file, you may have to set the Admin user
  name and password, because Administrator uses port 8086. Set the Admin user name
  and password in the [*install-dir*]/conf/admin.password file.
- Ensure proper setup of streaming configurations.
- The AMF data must be included in a top-level AMF data object (AMFDataObj).
- 'The AMFDataObj object must include two properties: (1) a key called payload with
  a value that is a string of data to be converted and (2) a key called wowzaConverter
  with a value of basic_string.'
- Wowza Streaming Engine configuration is saved in .XML files.
- You can edit the .XML files directly or use Wowza Streaming Engine Manager.
- 30 consecutive days of access to Wowza Streaming Engine.
- Certain feature configurations in Wowza Streaming Engine require editing XML files
  and other configuration file types outside of Wowza Streaming Engine Manager.
- Access to the Properties tab requires an administrator with advanced permissions.
- Access to the Modules tab requires an administrator user with advanced permissions.
- Access to the Server Listeners tab requires an administrator user with advanced
  permissions.
- Wowza Streaming Engine must be running to access the manager.
- Playback URLs for live applications are pre-configured for a live stream named myStream.
- Wowza supports the technical specifications shown below.
- Creating custom properties for a stream target requires an administrator user with
  advanced permissions.
- Uses Wowza Streaming Engine for live streaming
- API requires OAuth2 authentication for accessing streams.
- iOS15+ WebRTC publishing fails due to fragmented WebSockets
- A CEA-608 caption that has exactly 32 characters and is sent as part of the video
  NAL units is displayed incorrectly.
- Playback issues with MPEG-DASH streams may occur with certain players.
- Transcoded WebRTC source streams with passthrough video fail to play over MPEG-TS
  HLS.
- Red Hat Package Manager (.rpm) packages are not currently available for ARM-based
  systems.
- Wowza Streaming Engine 4.8.28 and later doesn't include an updater or installer
  for macOS.
- New installations of Wowza Streaming Engine 4.8.28 and later deliver generational
  support for the Z Garbage Collector (ZGC).
- Administrator/root privileges are required to remove an update.
- With Wowza Streaming Engine 4.9.5 and later, the update script automatically detects
  your CPU architecture and runs the appropriate updater.
- Wowza Streaming Engine requires that RTMP- and RTSP-based encoders provide a source
  user name and password for authentication.
- Source user name and password are case-sensitive.
- Ensure the SDP file is correctly formatted for the native RTP encoder.
- Restart the application after making changes to playback settings.
- WebRTC playback and publishing pages must be hosted on a web server utilizing SSL/TLS
  encryption.
- Screen share not supported on mobile devices, Safari, or Firefox.
- Only one SRT stream can be sent per port.
- You must create a separate .stream file with a unique port for each SRT stream.
- Wowza Streaming Engine 4.5.0.01 or later is required.
- Wowza Streaming Engine doesn't support query parameters, such as CDN authentication
  information, in stream URLs.
- Wowza Streaming Engine 4.7.0 or later is required.
- These instructions require an administrator user with advanced permissions.
- Wowza Streaming Engine does not support handling HTTP 302 redirect responses from
  a stream source server with MediaCaster.
- Stream files are stored in an application's Streaming File Directory and have a
  .stream file name extension.
- IP camera must support H.264, H.265, AAC, or MP3 content.
- FFmpeg is updated frequently. Download the current version and read current documentation
  at ffmpeg.org.
- Uses OAuth2 with refresh token – requires setup of connected app in api.
- Create a live application according to the documentation.
- Playback types include MPEG-DASH, HLS, RTMP, and RTSP/RTP.
- Insert startupStreamsDelayTime in the <VHost>/<Properties> section to specify a
  delay between startup streams.
- Requires setup of connected app in api
- The source credentials are stored in [*install-dir*]/conf/publish.password.
- The properties used in this article to adjust the latency of a stream only affect
  RTMP-based clients.
- All settings are case-sensitive.
- Modify the properties as needed for your streaming setup.
- The values specified here override the values specified in [*install-dir*]/conf/Server.xml.
- Requires configuration of Wowza Streaming Engine for streaming.
- Add the local address of the network interface to Wowza Streaming Engine's virtual
  host configuration.
- Restart Wowza Streaming Engine after configuration changes.
- Uses OAuth2 with refresh token setup
- Ensure that you have the necessary permissions for the API
- API responses may vary based on user permissions
- Requires connected app setup for OAuth2
- The mpegtsImportAC3 property will apply to all streams delivered by the application.
- Adobe no longer supports Flash Player and stopped content from running in it, limiting
  the playback support for RTMP.
- Enable CORS headers
- Wowza Streaming Engine 4.4.0 (or later) is required.
- In Wowza Streaming Engine 4.5.0, CORS headers are enabled by default for all HTTP-based
  streaming protocols.
- API requires OAuth2 setup for authentication.
- Wowza Streaming Engine 3.5.0 or later is required.
- Wowza Streaming Engine currently does not support DRM encryption with CMAF HLS.
- Ensure to check API rate limits on Wowza documentation
- Wowza Streaming Engine reports an Apple HLS compatibility version of 3 by default.
- Each of these features can be controlled independently from the EXT-X-VERSION.
- Wowza Streaming Engine™ software version 4.4.0 or later is required.
- Not all Apple HLS players support alternative tracks, and some players may support
  alternative audio tracks but not alternative video tracks.
- Alternative audio and video tracks require advanced configuration for each stream.
  It's not currently possible to do the full configuration in Wowza Streaming Engine
  Manager.
- Multiple .stream files are required for UDP workflow while only one is needed for
  SRT workflow.
- Configure cupertinoAddTSOffset property for synchronization issues.
- A chunklist must have a minimum of a few seconds of program segments (chunks), so
  there's inherent latency when accessing the server.
- Uses OAuth2 with refresh token required for authentication.
- Requires Apple HLS to be enabled in the Playback Types for the application.
- I-frame playlists require protocol version 4 or greater.
- I-frame playlists only work with video on demand (VOD) content.
- Add <Property> with <Name>cupertinoPacketizeAllStreamsAsTS</Name>, <Value>true</Value>,
  <Type>Boolean</Type> to the appropriate <Properties> container.
- Restart Wowza Streaming Engine to apply the changes.
- You must have a .key file for each stream that you want to protect.
- You can also use the genkey utility to generate key files.
- Require HTTPS access to this key so that it is not sent over an unsecured connection
  on the Internet.
- For testing purposes, encode to Baseline Profile level 3.0, the lowest common denominator,
  for testing playback of a single stream to all iOS devices.
- Log files give feedback about the current stream and profile level that may cause
  playback issues.
- For live streaming, add the property cupertinoEnableDataEvents with value false
  to the LiveStreamPacketizer/Properties container in [*install-dir*]/conf/[*application-name*]/Application.xml.
- For on-demand streaming, add the property cupertinoEnableDataEvents with value false
  to the HTTPStreamer/Properties container in [*install-dir*]/conf/[*application-name*]/Application.xml.
- To enable absolute URLs in the returned playlist.m3u8 URL, set cupertinoRelativePlaylistPlaylists
  to false.
- To enable absolute URLs in the returned chunklist .m3u8 URL, set cupertinoRelativePlaylistItems
  to false.
- Supports various streaming protocols including RTMP, RTSP, SRT, and HLS.
- Wowza Streaming Engine 4.6.0 or later is required.
- By default, Wowza Streaming Engine™ media server software returns Gzip encoded content
  with client requests for HLS master playlists, media playlists, or WebVTT subtitles.
- Wowza Streaming Engine does not support closed captioning in MPEG-DASH streams.
- A new session is created only for MPD requests where the request URL doesn't have
  sessionID information.
- Wowza Streaming Engine version 4.6.0 or later is required.
- Not all MPEG-DASH players fully support multiple language tracks or the role feature.
- Multi-language audio and video tracks require advanced configuration for each stream.
  It's not currently possible to do the full configuration in Wowza Streaming Engine
  Manager.
- Similar SMIL file functionality can be implemented programatically through the Wowza
  Streaming Engine Java API AMLST feature.
- If you don't want to set a bitrate, only use systemBitrate as this legacy parameter
  isn't used by Wowza Streaming Engine for MPEG-DASH streams and the bitrate is calculated
  from the media's bitstream data instead.
- For H.265 (HEVC) encoded streams, Wowza Streaming Engine 4.8.8.01 or later is required
  to use MPEG-DASH CENC encryption.
- For MPEG-DASH streams, we don't support the cbc1 and cens encryption schemes and
  will log an error if you use them.
- The setAlgorithm() method was deprecated with Wowza Streaming Engine 4.8.29.
- The KID field is set to -1 initially.
- The CENC data is remembered across each call for the session with VOD streams.
- Wowza Streaming Engine 4.4.0 or later is required.
- Some operations may require additional configurations
- Uses OAuth2 for authentication.
- CMAF is disabled by default.
- When you use Wowza Streaming Engine Manager to enable the CMAF packetizer, you can't
  use the Apple HLS and MPEG-DASH packetizers at the same time.
- If you're trying to use the CMAF packetizer to deliver LL-HLS and HLS or MPEG-DASH
  streams, you must use two separate live applications.
- Similar properties are available for the standalone HLS (Cupertino) and MPEG-DASH
  packetizers.
- Uses cupertinoTag parameters for audio and video renditions
- Multiple language pairings supported
- Trial licenses don't support using Wowza Streaming Engine as a caching origin.
- Live streams can't be delivered securely using CloudFront-signed URLs.
- OAuth2 with refresh token is required for access.
- Can use segment keys or query parameters to specify segment format.
- Requires setup of connected app in Wowza API
- By default, Wowza Streaming Engine doesn't add the tags or attributes above automatically
  for CMAF HLS live streams.
- 'You can resolve all of the classes used by the examples in this article by using
  the following imports: import com.wowza.wms.module.ModuleBase; import com.wowza.util.*;
  import com.wowza.wms.drm.cenc.*; import com.wowza.wms.drm.playready.*; import com.wowza.wms.httpstreamer.mpegdashstreaming.httpstreamer.HTTPStreamerSessionMPEGDash;
  import com.wowza.wms.stream.livepacketizer.ILiveStreamPacketizer;'
- 'There are multiple ways to set the KID in the CencInfo class: cencInfo.setKID(Base64.decode("ApS5WZ11XeK78P3KP6Xqtw=="));
  cencInfo.setKID(<kidByteBuffer>); cencInfo.setKID("F6005DCF-7F93-4B8E-85C7-F977740DA059");'
- 'There are multiple ways to set the encryption key in the CencInfo class: cencInfo.setEncKeyBytes(Base64.decode("O9ovQDRMfe9hQie5wPA+Jg=="));
  cencInfo.setEncKeyBytes(<keyByteBuffer>);'
- When using this option, you must provide your own PlayReady or Widevine key server.
- Key rotation using PlayReady Embedded License Stores (ELS) is not supported.
- Providing CMAF CENC key information through a key file for a given live stream will
  result in the associated module API above to never be called for that stream.
- CBCS encryption for CMAF HLS streams only supports encryption for H.264 and HEVC/H.265
  encoded streams.
- Requires setup of connected app in API
- Requires setup of connected app in Wowza for OAuth2.
- Wowza Streaming Engine™ version 4.7.7 and later supports WebRTC streaming.
- It is recommended to update to version 4.8.5 or later for expanded functionality.
- You must configure Wowza Streaming Engine for WebRTC streaming before you can use
  the instructions in this article to test publishing and playback.
- In production environments, WebRTC playback and publishing pages must be hosted
  on a web server utilizing SSL/TLS encryption.
- MALLOC_ARENA_MAX can be set to as low as 1, but performance could be impacted.
- The values assigned to these settings vary depending on your network configuration.
- These settings can't be configured in Wowza Streaming Engine Manager. You must edit
  the Application.xml file.
- Wowza Streaming Engine running on Amazon EC2 automatically sets these values based
  on the internal and external IP address of the instance.
- Supports various streaming protocols including RTMP, RTSP/RTP, and WebRTC.
- Wowza Streaming Engine 4.6.0.01 or later is required for IRTPPacketizerMPEGTSPacketNotify.
- Wowza Streaming Engine 4.6.0 or later is required for IRTPPacketizerMPEGTSPacketNotify2.
- Most Android devices support RTSP/RTP streaming but not interleaved (RTP over TCP).
- Playback may not work properly if the default Wowza Streaming Engine port (1935)
  is included in the playback URL.
- Some endpoints may return nulls in deeply nested fields
- Ensure to get the correct <Properties> container in Application.xml.
- Some API responses may vary based on user permissions
- Wowza Streaming Engine™ 4.3.0 or later is required.
- Advanced knowledge of Java and cryptography is required to complete these tasks.
- Source credentials are stored in [*install-dir*]/conf/publish.password.
- VOD adaptive bitrate streaming requires a SMIL file.
- For adaptive bitrate playback from a single instance of Wowza Streaming Engine or
  the origin server in a live stream repeater configuration, we recommend using Stream
  Name Groups.
- The Wowza Streaming Engine creates a manifest with renditions listed in the same
  order as they are in the SMIL file <switch> container element. The first stream
  in the manifest is selected first by players. To ensure the player selects and plays
  the highest bitrate stream, given current network conditions and available CPU resources,
  arrange the streams from highest to lowest bitrate.
- To ensure the SMIL file is compatible with all HTTP streaming protocols, you must
  define at least one bitrate attribute or parameter in each <video> definition.
- Not all parameters are supported by all streaming protocols. For example, roles
  are only used for MPEG-DASH streams.
- Transcoder is supported only on 64-bit versions of Windows and Linux.
- Using hardware acceleration is recommended but not required.
- Uses OAuth2 with refresh token, requires setup in Wowza.
- Transcoder uses a templating system to match incoming streams to an encoding template.
- You're limited to 10 concurrent, transcoded channels per instance per month.
- Uses default Transcoder templates for transcoding sessions
- Logging messages indicate if Wowza Streaming Engine and Transcoder are configured
  properly
- Check to see that Transcoder is enabled under Transcoder in Wowza Streaming Engine
  Manager.
- Uses CPU (MainConcept) transcoding, NVIDIA GPU accelerated transcoding, and AMD
  Xilinx accelerated transcoding benchmarks for performance evaluation.
- Wowza Streaming Engine must be properly licensed to enable Transcoder.
- For adaptive bitrate playback from a single instance of Wowza Streaming Engine or
  the origin server in a live stream repeater configuration, we recommend using Stream
  Name Groups because they are automatically created by Transcoder.
- Wowza Streaming Engine 4.8.11 or later is required.
- Requires setup of connected app in Wowza for OAuth2
- Some API responses may vary based on the live stream configuration
- You'll only experience accelerated transcoding performance if you have the required
  hardware and drivers. Make sure that you're always running the latest driver for
  your hardware.
- Older graphics drivers for your NVIDIA hardware may limit NVENC-based video encoding
  to approximately 30 simultaneous encoding sessions. Update your graphics driver
  to the latest version to avoid this limitation.
- Public support for HEVC/H.265 is available in Wowza Streaming Engine 4.8.0 and later,
  while preview support is available in earlier versions (4.1.0 - 4.7.8).
- This article requires Wowza Streaming Engine 4.5 or later, the latest version of
  Google Shaka Player, and the current version of Google Chrome.
- Wowza Streaming Engine 4.4.0 or later is required if you want to encrypt WebM streams
  on the fly.
- Logs do not report a warning or error for invalid parameter values.
- Older versions of the example templates may not have a <Parameters> container for
  the <Video> encoding section.
- Logs do not report a warning or error for invalid parameter values. If you specify
  an invalid value, the Transcoder uses the default value for the parameter instead,
  which is reflected in the logs.
- Requires setup of a connected app in Wowza
- Some streams may experience buffering
- Default audio-only template enables ingestion of supported audio streams and converts
  to AAC.
- B-frame generation is turned off by default.
- A value of 3 instructs the Transcoder to generate and insert up to two B-frames
  between each P-frame.
- SkipFrameCount property must be positioned below the <KeyFrameInterval> block.
- Setting SkipFrameCount does not affect the keyframe interval or alignment.
- Uses OAuth2 with refresh token for authentication.
- The sourceStreamFrameRate property only alters the default frame rate of 29.97 when
  a frame rate value can't be found in the encoded stream.
- Wowza Streaming Engine™ 4.5.0.01 or later is required.
- Double-rate deinterlacing uses the individual interlaced fields to create frames
  at twice the original frame rate.
- Accelerated encoding isn't available when running on a virtual hardware environment
  such as VMware or Xen.
- Ensure proper OAuth scopes are set for access.
- Accelerated encoding isn't available when running on a virtual hardware environment.
- Uses OAuth2 with refresh token - requires setup of connected app in Wowza Video
- Accelerated transcoding with Wowza Streaming Engine is only supported on Amazon
  EC2 instances that are created using the NVIDIA AMIs. These AMIs include required
  drivers and kernel modifications.
- One of the last installation steps will offer to update your X configuration file.
  Decline this update for the EC2 instance.
- Progressive support for H.264 and H.265 video codecs.
- Simultaneous encoding and decoding up to 2 times 4K UHD resolution at 60 Hz per
  card.
- Aggregate bandwidth of 2160p120 per device.
- Requires setup of Wowza account and API access
- Some API responses may include nested fields
- This guide assumes you're installing the video solution on a server running Ubuntu
  Server 22.04 and kernel 5.15.0, with one or more Alveo U30 data center accelerator
  cards installed per these instructions.
- Wowza Streaming Engine 4.8.22 or later is required to use MainConcept as the default
  encoder and decoder.
- With Wowza Streaming Engine 4.8.22, you need to manually update your encoding configuration
  for MainConcept if it uses any advanced Beamr parameters.
- Uses OAuth2 with refresh token – requires setup of connected app in API
- Content delivery networks, including Wowza CDN, don't support adaptive bitrate streaming
  based on SMIL files.
- DebugLog logs high-level connection information as well as connection health.
- DebugPackets logs verbose per-packet information.
- By default, Wowza Streaming Engine requires RTMP and RTSP sources to provide a user
  name and password to connect to a live application.
- If you're using Transcoder in the source application, you must create a stream target
  for each rendition.
- Ensure proper configuration of the streaming server for optimal performance.
- Verify the authentication setup for secure connections.
- We typically recommend a push-based CDN workflow that includes distribution with
  Wowza Video.
- For complex streaming scenarios, consider the pull-based workflow.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Invalid host: Ensure the whisperSocketHost is correctly set.'
- 'Connection refused: Check if the Whisper server is running on the specified port.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check the validity of the access token.'
- '404 Not Found: Verify the endpoint path.'
- '500 Internal Server Error: Server is unavailable, retry later.'
- '401 Unauthorized: Check your OAuth token.'
- '401 Unauthorized: Check your credentials'
- '403 Forbidden: Access denied'
- '404 Not Found: Endpoint does not exist'
- '403 Forbidden: Check your API key and permissions.'
- '404 Not Found: Ensure the endpoint exists.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '401 Unauthorized: The request requires user authentication'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Invalid credentials'
- '404 Not Found: Stream not found'
- 'token is invalid: Ensure that the target''s configured source stream is connected.'
- Important issues that affect Wowza Streaming Engine software.
- '401 Unauthorized: Check your authorization credentials.'
- '403 Forbidden: Check your API key and permissions'
- '404 Not Found: Check the endpoint path'
- '500 Internal Server Error: Try again later'
- '401 Unauthorized: Check OAuth token validity.'
- '403 Forbidden: Verify permissions for accessing the resource.'
- action is required
- app is required
- streamname is required
- 'Stream Not Found: [stream-name]'
- 'ERROR: Cannot connect to JMX interface'
- 'ERROR: Command not recognized'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: Verify the endpoint URL.'
- '401 Unauthorized: Check the subscription key and region.'
- 'Authorization failed: HTTP 403 status code'
- '401 Unauthorized: Check client credentials'
- '404 Not Found: Verify endpoint URL'
- '429 Too Many Requests: Reduce frequency of requests'
- '401 Unauthorized: Check if credentials are valid.'
- 'Unauthorized: Check your authentication credentials.'
- 'Not Found: Verify the endpoint and resource you are trying to access.'
- '404 Not Found: The requested resource does not exist.'
- 'CVE-2025-22235: Fixed security vulnerability by upgrading to Spring Boot (org.springframework.boot)
  3.3.11.'
- 'CVE-2024-13009: Fixed security vulnerability by upgrading jetty-http, jetty-server,
  jetty-io, and jetty-util libraries to 9.4.57.v20241219.'
- 'CVE-2025-48988: Fixed security vulnerability by upgrading Apache Tomcat libraries
  to 10.1.42.'
- 'STREAM_TIMEOUT: Check your network connection.'
- 'INVALID_SDP: Verify that the SDP file is correctly structured.'
- 'RTPSessionDescriptionDataProviderBasicRTSPWorker.buildSDPData: SDP data missing
  rtpmap entry for [audio] track.'
- 'RTPSessionDescriptionDataProviderBasicRTSPWorker.buildSDPData: SDP data missing
  rtpmap entry for [video] track.'
- '401 Unauthorized: Check authentication credentials.'
- '404 Not Found: Verify endpoint path.'
- '401 Unauthorized: Check OAuth credentials and token expiration'
- '404 Not Found: Verify endpoint path and resource availability'
- '401 Unauthorized: Check client ID and secret'
- '429 Too Many Requests: Rate limit exceeded'
- '401 Unauthorized: Check your access token.'
- '400 Bad Request: Verify request parameters.'
- '403 Forbidden: Check permissions for accessing the resource'
- '404 Not Found: Ensure the endpoint is correct'
- Video may not be playable on older iPhone and iPod touch devices where Main/Level
  3.1 or lower is required
- 'Key information not provided: Stream won''t be encrypted.'
- 1 second minimum TTL for error caching recommended.
- 'Latency: Transcoding introduces latency into the media delivery pipeline.'
- Expected latency of passthrough streams that output WebRTC is one second or less.
- '401 Unauthorized: Check source user name and password.'
- '403 Forbidden: Verify source authentication settings.'
- '401 Unauthorized: Verify client credentials and token expiration.'
- '403 Forbidden: Check permissions on the requested resource.'
- '403 Forbidden: Check permissions or authentication credentials'
- '404 Not Found: Verify the endpoint or resource ID'
- '500 Internal Server Error: Retry the request or check service status'
- '401 Unauthorized: Check OAuth scopes or token expiration'
- '404 Not Found: Verify the endpoint URL'
- '401 Unauthorized: Check credentials and permissions.'
- 'Error: Make sure the target''s configured source stream is connected to the Wowza
  Streaming Engine input.'
- 'Error: Check for invalid target configuration or issues with the destination server.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://app.wowza.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://auth.wowza.com/client/logout
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
