resources:
- name: upload
  endpoint:
    path: /upload
    method: GET
    data_selector: uploadURL
    params: {}
- name: PR analysis data
  endpoint:
    path: /analysis
    method: GET
    data_selector: ''
- name: PR analysis data
  endpoint:
    path: /analysis
    method: GET
- name: appHistory
  endpoint:
    path: /appHistory
    method: GET
- name: build_details
  endpoint:
    path: /buildDetails
    method: GET
- name: comment
  endpoint:
    path: /comment
    method: GET
- name: trace
  endpoint:
    path: /trace
    method: POST
- name: performance_test_results
  endpoint:
    path: /getPerfTest
    method: GET
    data_selector: object
    params:
      testId: string
- name: upload_from_link
  endpoint:
    path: /uploadFromLink
    method: POST
- name: export_reaper_analysis_results
  endpoint:
    path: /deadCode/export
    method: POST
- name: size_analysis
  endpoint:
    path: /emergeSizeAnalysisPreflightRelease
    method: POST
    data_selector: size_analysis_results
- name: snapshot_testing
  endpoint:
    path: /emergeSnapshots
    method: POST
    data_selector: snapshot_results
- name: reaper
  endpoint:
    path: /reaper/endpoint
    method: POST
    data_selector: reports
    params: {}
- name: performance
  endpoint:
    path: /performance/endpoint
    method: POST
    data_selector: reports
    params: {}
- name: upload
  endpoint:
    path: /api/upload
    method: POST
    data_selector: upload_response
    params:
      api_key: EMERGE_API_KEY
- name: upload
  endpoint:
    path: /upload
    method: POST
    data_selector: upload_response
    params: {}
- name: upload
  endpoint:
    path: /upload
    method: POST
    data_selector: upload_response
    params: {}
- name: upload
  endpoint:
    path: /upload
    method: POST
    data_selector: uploadURL
- name: upload
  endpoint:
    path: /upload
    method: POST
    data_selector: uploadURL
- name: metadata_fields
  endpoint:
    path: /docs/metadata-fields-for-ci
    method: GET
    data_selector: fields
    params: {}
- name: metadata_fields
  endpoint:
    path: /docs/metadata-fields-for-ci
    method: GET
    data_selector: fields
    params: {}
- name: Pull Request Comments
  endpoint:
    path: /pr-comment
    method: GET
- name: GitHub Status Checks
  endpoint:
    path: /status-checks
    method: GET
- name: GitHub App
  endpoint:
    path: /githubHook
    method: POST
- name: PR comments
  endpoint:
    path: /api/v4/projects/:id/merge_requests/:merge_request_iid/notes
    method: POST
    data_selector: note
    params: {}
- name: GitLab PR comments
  endpoint:
    path: /api/v4/projects/:id/merge_requests/:merge_request_iid/notes
    method: POST
- name: pull_request
  endpoint:
    path: /pullrequests
    method: GET
    data_selector: pullrequests
- name: repository
  endpoint:
    path: /repositories
    method: GET
    data_selector: repositories
- name: status_checks
  endpoint:
    path: /docs/status-checks
    method: GET
    data_selector: checks
    params: {}
- name: status_checks
  endpoint:
    path: /docs/status-checks
    method: GET
    data_selector: checks
    params: {}
- name: slack_integration
  endpoint:
    path: /settings/slack
    method: GET
- name: alert_settings
  endpoint:
    path: /settings?tab=alerting
    method: GET
- name: build_distribution_notification_alerts
  endpoint:
    path: /settings?tab=alerting&cards=build_distribution_notification_alerts
    method: GET
- name: alerts_settings
  endpoint:
    path: /settings?tab=alerting&cards=weekly_digest_settings
    method: GET
    data_selector: alerts
    params: {}
- name: weekly_digest
  endpoint:
    path: /settings?tab=alerting&cards=weekly_digest_settings
    method: GET
- name: Size Analysis Comparisons
  endpoint:
    path: /compare/size-analysis
    method: GET
    data_selector: size_analysis_records
    params: {}
- name: Performance Analysis Comparisons
  endpoint:
    path: /compare/performance-analysis
    method: GET
    data_selector: performance_analysis_records
    params: {}
- name: linkmap
  endpoint:
    path: /linkmaps
    method: GET
    data_selector: linkmaps
- name: shareable_link_app_build_pairs
  endpoint:
    path: /api/v2/public_new_build
    method: GET
    data_selector: badgeMetadata
- name: shareable_link_builds
  endpoint:
    path: /api/v2/public_new_build
    method: GET
    data_selector: badgeMetadata
- name: tracked_apps
  endpoint:
    path: /dashboard/appCompetitors
    method: GET
    data_selector: tracked_apps
    params: {}
- name: add_competitor_app
  endpoint:
    path: /dashboard/appCompetitors/add
    method: POST
    data_selector: result
    params: {}
- name: linkmap_generation
  endpoint:
    path: /docs/linkmaps/generating
    method: GET
    data_selector: linkmap_generation_details
- name: linkmap_packaging
  endpoint:
    path: /docs/linkmaps/packaging
    method: GET
    data_selector: linkmap_packaging_details
- name: tracked_apps
  endpoint:
    path: /dashboard/appCompetitors
    method: GET
    data_selector: apps
    params: {}
- name: add_competitor_app
  endpoint:
    path: /competitor_analysis/add_app
    method: POST
    data_selector: result
    params: {}
- name: Emerge Metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: details
- name: assets
  endpoint:
    path: /assets
    method: GET
    data_selector: resources
    params: {}
- name: binary
  endpoint:
    path: /binary
    method: GET
    data_selector: files
    params: {}
- name: insight
  endpoint:
    path: /api/v1/insights
    method: GET
    data_selector: insights
    params: {}
- name: duplicates
  endpoint:
    path: /api/v1/duplicates
    method: GET
    data_selector: duplicates
    params: {}
- name: duplicates_in_frameworks
  endpoint:
    path: /docs/remove-duplicates#duplicates-in-frameworks
    method: GET
    data_selector: duplicates
    params: {}
- name: duplicate_localizations
  endpoint:
    path: /docs/remove-duplicates#duplicate-localizations
    method: GET
    data_selector: duplicates
    params: {}
- name: android_duplicates
  endpoint:
    path: /docs/remove-duplicates#android
    method: GET
    data_selector: duplicates
    params: {}
- name: optimized_images
  endpoint:
    path: /docs/optimize-images
    method: GET
    data_selector: images
    params: {}
- name: minify_localized_strings
  endpoint:
    path: /minify-localized-strings
    method: POST
    data_selector: minified_strings
    params: {}
- name: common_files
  endpoint:
    path: /docs/unnecessary-files
    method: GET
    data_selector: files_found
    params: {}
- name: Image scales
  endpoint:
    path: /docs/image-scales
    method: GET
    data_selector: records
    params: {}
- name: Loose files
  endpoint:
    path: /docs/loose-files
    method: GET
    data_selector: records
    params: {}
- name: remote_config
  endpoint:
    path: /v1/projects/{PROJECT_ID}/namespaces/firebase:fetch
    method: POST
    data_selector: entries
    params:
      key: '{API_KEY}'
- name: buildDetails
  endpoint:
    path: /reference/get_builddetails-1
    method: GET
    data_selector: moduleAttributionURL
    params: {}
- name: dex_breakdown
  endpoint:
    path: /shared-dex-android
    method: GET
- name: module_dependency_attribution
  endpoint:
    path: /module-dependency-attribution
    method: GET
    data_selector: records
- name: buildDetails
  endpoint:
    path: /reference/get_builddetails-1
    method: GET
    data_selector: moduleAttributionURL
- name: build
  endpoint:
    path: /upload
    method: POST
    data_selector: artifact
    params: {}
- name: build
  endpoint:
    path: /upload
    method: POST
    data_selector: results
    params: {}
- name: snapshot
  endpoint:
    path: /api/snapshots
    method: POST
    data_selector: snapshots
    params:
      sha: sha
      baseSha: baseSha
      repoName: repoName
      prNumber: prNumber
      previousSha: previousSha
- name: local_generation
  endpoint:
    path: /local-generation
    method: GET
    data_selector: snapshots
    params: {}
- name: snapshots
  endpoint:
    path: /upload/snapshots
    method: POST
    data_selector: snapshots
    params: {}
- name: AccessibilitySnapshot
  endpoint:
    path: /accessibility/snapshot
    method: GET
    data_selector: elements
- name: upload_snapshots
  endpoint:
    path: /upload/snapshots
    method: POST
    data_selector: snapshots
- name: snapshots
  endpoint:
    path: /upload/snapshots
    method: POST
    data_selector: snapshot_data
- name: reaper_report
  endpoint:
    path: /report
    method: POST
    data_selector: report_data
- name: reaper_error
  endpoint:
    path: /reaper/error
    method: POST
    data_selector: error_data
- name: reaper_report
  endpoint:
    path: /reaper/report
    method: POST
    data_selector: report
    params: {}
- name: reaper_report
  endpoint:
    path: /report
    method: POST
    data_selector: report_data
- name: reaper_error
  endpoint:
    path: /reaper/error
    method: POST
    data_selector: error_data
- name: installable_builds
  endpoint:
    path: /uploads
    method: GET
    data_selector: builds
    params: {}
- name: check_for_update
  endpoint:
    path: /distribution/checkForUpdate
    method: GET
    data_selector: status
- name: download_update
  endpoint:
    path: /distribution/downloadUpdate
    method: POST
    data_selector: info
- name: build_alerts
  endpoint:
    path: /settings?tab=alerting&cards=build_distribution_notification_alerts
    method: GET
- name: distribution
  endpoint:
    path: /settings?tab=feature-configuration&cards=distribution_enabled
    method: GET
    data_selector: records
    params: {}
- name: build_distribution_alerts
  endpoint:
    path: /settings?tab=alerting&cards=build_distribution_notification_alerts
    method: GET
- name: trace
  endpoint:
    path: /trace
    method: POST
    data_selector: null
    params: {}
- name: performance_profile
  endpoint:
    path: /performance/<upload_id>
    method: GET
    data_selector: performance_results
- name: uploads
  endpoint:
    path: /uploads
    method: GET
    data_selector: uploads_list
- name: performance_test
  endpoint:
    path: /getPerfTest
    method: GET
    data_selector: performanceTests
- name: trace
  endpoint:
    path: /trace
    method: POST
    data_selector: null
    params: {}
- name: performance_analysis
  endpoint:
    path: /docs/performance-analysis
    method: GET
    data_selector: performance_data
    params: {}
- name: network_replay
  endpoint:
    path: /docs/network-replay
    method: GET
    data_selector: replay_data
    params: {}
- name: disk_restoration
  endpoint:
    path: /docs/disk-restoration
    method: GET
    data_selector: restoration_data
    params: {}
- name: differential_flame_graph
  endpoint:
    path: /docs/performance-visualizations
    method: GET
    data_selector: performance_visualizations
    params: {}
- name: run_details
  endpoint:
    path: /docs/performance-testing#variance-control
    method: GET
    data_selector: run_details
    params: {}
- name: order_file
  endpoint:
    path: /upload
    method: POST
    data_selector: orderFile
    params:
      orderFileVersion: 1.2.3
- name: download_order_file
  endpoint:
    path: /<com.example.app>/1.2.3
    method: GET
    data_selector: orderFile
    params: {}
- name: upload_app
  endpoint:
    path: /upload
    method: POST
    params:
      orderFileVersion: 1.2.3
- name: download_order_file
  endpoint:
    path: /order-files-prod.emergetools.com/<com.example.app>/1.2.3
    method: GET
    headers:
      X-API-Token: your Emerge API token
notes:
- 'If uploading a .zip file, the request should include the Content-Type: application/zip
  header.'
- Emerge requires uploads to be a zipped `xcarchive` (`.xcarchive.zip`) or a zipped
  `xcframework` (`.xcframework.zip`) file.
- For the best results, we recommend including `dSYM` files in your archive.
- We recommend automating this process on your CI using one of Emerge's integrations.
- We require one APK (the primary APK if uploading multiple APKs) to be named base.apk.
- Emerge will compare uploads by SHA then appId to ensure accuracy.
- 'Your EMERGE_API_TOKEN is available on your Emerge profile page: https://www.emergetools.com/profile'
- The Emerge Gradle plugin is the recommended way to integrate with Emerge on Android.
- Run `./gradlew :app:emergeSizeAnalysisPreflightRelease` for size analysis preflight
  check.
- Follow our steps on obtaining an API key.
- Do not leave this key in plain text in your workflow.
- Do not leave the API key in plain text in your workflow.
- Emerge is easy to integrate with a repository already using Travis CI.
- Make sure your GitHub account is connected and you’ve read our Fastlane documentation.
- Add the API Key under the environment variables section in Codemagic.
- Follow our steps on obtaining an API key and add the API Key under the environment
  variables section in Codemagic.
- Name the variable as EMERGE_API_TOKEN and put it under the group emerge_credentials.
- Ensure you have generated an API key and set EMERGE_API_KEY.
- Xcode cloud workflows don't allow you to set specific build configuration.
- Consider including metadata fields with uploads in CI.
- By default comments will only post if the size change is over 100 KB.
- This part of the guide only applies when using the REST API or the Emerge CLI.
- If you are using Fastlane or Gradle, we recommend following those guides for the
  simplest integration.
- The Emerge Github app does not require access to source code. It only requests permissions
  to read metadata and modify pull requests in order to post comments and status checks.
- Create a personal access token with the api scope in GitLab.
- 'Token should be named ''Emerge Tools'' and have the following scopes: pullrequest,
  pullrequest:write, repository, repository:write.'
- 'The token should be named ''Emerge Tools'' and have the following scopes: pullrequest,
  pullrequest:write, repository, repository:write.'
- Congrats on integrating Emerge with Slack!
- Want to customize your Slack integration? We're always looking for add new ways
  to customize Slack alerts for your app size changes.
- Alerts can be configured for size, performance, and build distribution.
- Threshold values can be set to 0 to receive alerts for all builds.
- Just like slack alerts, you can receive size and performance alerts via email!
- Select the 'notification method' option and enter the email recipients!
- Emerge supports SSO (single sign-on) for Enterprise accounts.
- Emerge limits the number of rows in the compare page UI to 200 items.
- Emerge will filter out size changes below 500 bytes to any single attributable unit.
- Emerge uses unencrypted install size for iOS and compressed download size for Android.
- It's recommended to disable crash reporter behavior across all Emerge features that
  run your app (performance testing/snapshots/order files).
- Crash reporters can have different startup behavior depending on the state they
  think the app is in.
- Crash reporters typically include a feature to detect hangs of the main thread.
- Having multiple exception handlers installed is not supported by the OS and some
  events end up not delivered.
- If the test results indicate Emerge does not have access, ensure the Emerge GitHub
  App is installed and authorized for your repository.
- 'Emerge splits up your app into logic groupings for two visualizations: a treemap
  showing the directory structure, and a breakdown of your file types in a pie chart.'
- Typical crash reporter behaviors can interfere with our instrumentation and cause
  inaccurate or error results.
- Always disabling crash reporters is recommended and achieves better results than
  keeping them enabled.
- Emerge Metadata provides key details about your builds, including version control
  information, PR associations, and debugging tools.
- Emerge's iOS app size metric is roughly equivalent to the unencrypted install size
  of your app on the latest iPhone hardware running the latest iOS version.
- The archive that you upload to the App Store and Emerge contains your app prior
  to any App Thinning.
- The Other row represents size change in your app that Emerge wasn't able to attribute.
- Some apps include Binary data that isn't possible to attribute.
- Emerge gives you actionable insights that will easily reduce the size of your app.
- Emerge flags duplicate files to save size.
- Emerge suggests duplicate resource and asset candidates if the potential savings
  of removing one duplicate is over 0.5 kb.
- Emerge detects if a file is a duplicate by checking a hash of the file contents.
- Stripping symbols may cause issues with crash symbolication
- Binary symbols are used to symbolicate crash reports. Stripping symbols is only
  recommended if you are uploading DSYMs to a crash reporter.
- Symbol stripping can be done automatically by adding a custom 'Run Script' build
  phase at the very end of building
- 'Less size reduction, but less effort required: Make sure that localized strings
  are encoded as text files and not binary plists.'
- 'More size reduction (90%+ size decrease) but more effort required: Integrate SmallStrings
  library into your app.'
- Every file in your app has extra overhead that can bloat your app size.
- The problem only gets worse if files are included in a framework since frameworks
  have their own copy of the CodeResources.
- Emerge will warn you if many files are found in the app.
- Exposing the remote config information associated with your app can allow users
  to uncover sensitive secrets, experimentation information, feature flags, and any
  information you might store in Firebase Remote Config.
- Firebase recommends against storing any sensitive data in Remote Config.
- Files under 4kb have the same code signature overhead as any other file, but they
  are even more inefficient in terms of install size.
- Users only need the native libraries specific to their device's application binary
  interface (ABI). Including ABIs that aren't supported by a device introduces a significant
  amount of unnecessary bloat, and can easily and safely be removed.
- If shipping to the Play Store, Emerge recommends shipping AABs rather than single,
  Universal APKs. AABs offer significant app size advantages over Universal APKs,
  and Google Play requires new apps to publish AABs.
- Asset catalogs help manage all kinds of data in your app, even JSON files commonly
  used for configuration or Lottie animations.
- For the primary icon, it is essential to use a 1024x1024 pixel resolution.
- For alternate icons, a resolution of 180x180 pixels is sufficient.
- Binary page size generally cannot be changed by anything other than increments of
  16Kb.
- You can reduce the amount of size wasted in this space by using static frameworks
  and reducing the number of dynamic frameworks.
- The unused protocol insight finds any protocols in your app binary that no type
  conforms to.
- You might see the unused protocol insight even when you see types in your code that
  does conform to the protocol.
- To optimize space, we suggest creating alternate icons at 180x180 pixels and then
  upscaling them to 1024x1024 pixels for submission.
- You generally cannot change the size of a binary by anything other than increments
  of 16Kb.
- This results in 'unmapped' portions of the binary that are not attributed to your
  code.
- Only compatible with Emerge Gradle plugin 4.0+
- By default, if a file or class cannot be attributed to a specific module or third-party
  dependency, it will be attributed to the primary app module of your app's project.
- This feature requires xcarchives with linkmaps included in the upload.
- If you don't see the moduleAttributionURL key being populated, ask the team to enable
  Compile Unit Attribution for your app.
- Emerge shows only the 'private size' of a class, which is equal to the size that
  we can attribute to a specific class with 100% certainty.
- Download sizes are an estimate of how much each dex class/package node will take
  in proportion to the uncompressed size.
- Uses API key for authentication
- Ensure you are submitting a Debug configuration build.
- Crash reporters should be disabled at runtime in builds uploaded for snapshot tests.
- Emerge Tools only supports analyzing frameworks packaged as xcframeworks.
- By default the selected device is the iPhone 11 Pro Max.
- Any iPad (mini, Pro, Air) maps to iPad Air (5th generation).
- All iPhones with home button map to iPhone 8.
- Emerge recommends running snapshot tests on every commit.
- 'This must be used in a PreviewProvider because the #Preview macro does not support
  expanding Group into separate previews.'
- Previews need to be deterministic in order to render consistently between snapshot
  runs.
- HTTP requests through NSURL are blocked while generating snapshots.
- Emerge compares pull requests against the base branch and automatically diffs the
  result, giving developers a simple summary of what changed in their UI.
- Developers can sign up for an Emerge account to gain access to our snapshots web
  interface.
- This feature requires that your builds have the upload metadata field `previousSha`
  set.
- Unfortunately just trying to use the chronological order of uploads is not reliable,
  since uploads can be submitted out of order.
- To help control for flakiness, HTTP requests through NSURL are blocked while generating
  snapshots.
- If you'd like to conditionally set code when a preview is being rendered by our
  system, you can check whether the EMERGE_IS_RUNNING_FOR_SNAPSHOTS environment variable
  is set to '1'.
- Uploading your own set of snapshot images is supported using the Emerge CLI.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Store API token in EMERGE_API_TOKEN environment variable for automatic detection
  by tooling.
- Follow the instructions on how to obtain an API token to the Emerge API. We recommend
  storing this token in an EMERGE_API_TOKEN environment variable for automatic detection
  by our tooling.
- You can snapshot the accessibility elements of your apps by calling the modifier
  emergeAccessibility(true)
- Emerge offers a Swift package to generate snapshots locally for your own debugging.
- You'll need a running emulator or connected device to run the local snapshot generation.
- Captures screenshots of your websites every 24 hours
- Detects visual changes based on customizable thresholds
- Notifies you via email or Slack when changes are detected
- Supports desktop, mobile, and full-page screenshots
- Emerge recommends waiting some time for a critical amount of sessions to be received
  before taking action on deleting unused code.
- The overall performance impact of adding/using Reaper is negligible.
- This feature requires that your builds have the upload metadata field`previousSha`
  set.
- This feature will have a maximum look back of 1000 builds from the selected starting
  one.
- Reaper's API key is different from the Emerge API key
- The Reaper API key is a standalone key that is used with the SDK to associate requests
  with your Emerge account.
- Reaper is intended to run on Release builds.
- Emerge recommends only enabling Reaper on non-debug variants.
- Paparazzi requires you to generate new images via their recordPaparazziDebug Gradle
  task.
- You may have to manually remove snapshot images from git.
- Automatically monitor and track visual changes to any website
- ReaperAI is currently only available for iOS.
- Source code access is required in order to delete code and open pull requests.
- Reaper SDK aggregates usage information into a report.
- Emerge recommends waiting for a critical amount of sessions before deleting unused
  code.
- Emerge recommends following a phased rollout approach to ensure a smooth integration.
- Reaper is a simple SDK integration with minimal overhead. Unlike Android, there
  is no code changes required for Reaper to work.
- The Reaper API key is a standalone key that is used with the SDK to associate requests
  with your Emerge account
- Easy SSO authentication & simplified design making it easy for users of all technical
  levels to install app builds
- Emerge Tools doesn't handle app signing
- Any errors in the Reaper configuration will be raised during setup verification.
- This occurs when the Gradle plugin instruments the code but the library is not added
  as a implementation dependency.
- 'Add the following code to the application build.gradle.kts file: dependencies {
  implementation("com.emergetools.reaper:reaper:<latest_version>") }'
- ReaperAI requires source code access in order to delete code and open pull requests.
- The build distribution API key is included in prerelease versions of an app.
- Emerge recommends following a phased rollout approach to ensure a smooth integration
- Emerge's performance analysis allows you to generate a controlled, statistically
  sound profile of your app on real, physical devices.
- Emerge can also compare performance profiles between two builds of your app.
- Crash reporters should be disabled at runtime in builds uploaded for performance
  tests.
- Custom metrics must be named metrics.json!
- 'EmergeTools supports two formats for uploading Android builds: Android App Bundles
  (AABs) and Android Application Packages (APKs).'
- Emerge runs performance tests of cold startup or any custom UI test using UI Automator
  on real, physical devices.
- Emerge supports startup performance analysis for AABs and APKs, but highly recommends
  using AABs.
- Currently, custom flow performance analysis is only supported for AABs.
- Custom flow performance analysis relies on UIAutomator UI tests.
- Profiles usually take ~5 minutes to run.
- Performance testing aims to control everything about the app's environment.
- Requests must be matched with a previously made request to be replayed.
- Emerge's performance analysis focuses on catching performance differences between
  app builds.
- Custom metrics must be named 'metrics.json'.
- Emerge's performance analysis records and replays all network traffic for the app
  being profiled to ensure no variance between test iterations.
- Inconclusive results are due to a performance test being unable to reach statistical
  significance after a full set of test iterations.
- Most commonly issues arise from app code behaving differently across iterations
  or particularly on Android, test code introducing variance between iterations.
- For a significant improvement, you will need to upload a build that follows the
  most common user path, such as being logged in.
- Recording mode saves responses for replay mode.
- The primary visualization for performance testing is a differential flame graph.
- Emerge supports sign in with Auth0 for Enterprise accounts.
- The most common source of inconclusive results is due to an app's code behaving
  differently across iterations.
- Emerge recommends measuring code and flows that are easily repeatable.
- Emerge supports sign in with Google Workspace for Enterprise accounts.
- Emerge uses a single API address for all outbound API requests.
- Profiling locally relies on the ETTrace SDK linked to your app and the CLI installed
  on your computer.
- Emerge supports SSO for all accounts.
- Emerge does not support IdP initiated SSO.
- Emerge's snapshot testing works by automatically parsing all of the Xcode previews
  present in your app binary, and then instantiating them on a real simulator to generate
  images.
- By default, Snapshot modifications will fail a check on the PR.
- Emerge supports sign in with Auth0 for Enterprise accounts. Contact us at support@emergetools.com
  if you'd like to enable this feature for your account.
- Emerge supports sign in with Okta for Enterprise accounts.
- Emerge supports sign in with OneLogin for Enterprise accounts.
- Contact us at support@emergetools.com if you'd like to enable this feature for your
  account.
- Snapshot modifications will fail a check on the PR
- API Token is used by the CLI to authenticate with the Emerge API.
errors:
- 'Emerge API token not set: Ensure to set the EMERGE_API_TOKEN environment variable.'
- '401 Unauthorized: Check your API key.'
- Check your API key and ensure it's added to your secrets.
- Environment variable $var is not set
- Git is not installed or not in PATH. Cannot fetch previous SHA.
- Not in a Git repository. Cannot fetch previous SHA.
- 'Environment variable not set: CI_ARCHIVE_PATH, CI_BRANCH, CI_COMMIT, EMERGE_API_KEY'
- Environment variable not set
- 'Missing base build: Verify this matches the base branch of your PR'
- 'No artifact found: Double check the right file was uploaded'
- '200 item UI limit: Smallest changes will be dropped and their cumulative size change
  will be added to the Other row.'
- 'Binary data: Changes may not be attributed due to compiled C libraries.'
- 'Compilation jitter: Size changes may occur due to compilation artifacts.'
- '403: Requests from this Android client application <empty> are blocked.'
- '401 Unauthorized: Recheck API key'
- 'No package name provided: Using the first scheme found in the Package.swift.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'BUILD SUCCESSFUL: Reaper preflight check was successful.'
- Error in Reaper configuration will be raised with instructions.
- 'ERROR: Missing classes detected while running R8. Please add the missing classes
  or apply additional keep rules that are generated in missing_rules.txt.'
- 'ERROR: R8: Missing class com.emergetools.reaper.ReaperInternal (referenced from:
  void _COROUTINE.ArtificialStackFrames.<init>() and 5715 other contexts)'
- 'Build failure: Reaper preflight check was unsuccessful.'
- 'Configuration error: Ensure `publishableApiKey` is set correctly.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Performance tests must run on a real device.
- Custom metrics must be named 'metrics.json'.
auth_info:
  mentioned_objects:
  - Emerge Tools
  - AuthO
  - Okta
  - OneLogin
  - Google Workspace
  - EMERGE_API_KEY
client:
  base_url: https://api.emergetools.com
  auth:
    type: apikey
    location: header
    header_name: X-API-Token
  headers:
    Accept: application/json
    Content-Type: application/json
source_metadata: null
