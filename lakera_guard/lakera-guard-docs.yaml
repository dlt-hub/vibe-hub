resources:
- name: guard
  endpoint:
    path: /v2/guard
    method: POST
    data_selector: response_json
    params: {}
- name: guard
  endpoint:
    path: /v2/guard
    method: POST
    data_selector: response_json
    params: {}
- name: guard
  endpoint:
    path: /guard
    method: POST
    data_selector: response
    params: {}
- name: guard_results
  endpoint:
    path: /guard/results
    method: GET
    data_selector: results
    params: {}
- name: policies
  endpoint:
    path: /policies
    method: POST
    data_selector: policy
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: POST
    data_selector: project
    params: {}
- name: policies_health
  endpoint:
    path: /policies/health
    method: GET
    data_selector: health
    params: {}
- name: policies_lint
  endpoint:
    path: /policies/lint
    method: POST
    data_selector: lint_result
    params: {}
- name: startupz
  endpoint:
    path: /startupz
    method: GET
    data_selector: startup_probe
    params: {}
- name: readyz
  endpoint:
    path: /readyz
    method: GET
    data_selector: readiness_probe
    params: {}
- name: livez
  endpoint:
    path: /livez
    method: GET
    data_selector: liveness_probe
    params: {}
- name: guard
  endpoint:
    path: /guard
    method: POST
    data_selector: response
    params: {}
- name: guard_results
  endpoint:
    path: /guard/results
    method: GET
    data_selector: response
    params: {}
- name: policies
  endpoint:
    path: /policies
    method: POST
    data_selector: response
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: POST
    data_selector: response
    params: {}
- name: policies_health
  endpoint:
    path: /policies/health
    method: GET
    data_selector: response
    params: {}
- name: policies_lint
  endpoint:
    path: /policies/lint
    method: POST
    data_selector: response
    params: {}
- name: startupz
  endpoint:
    path: /startupz
    method: GET
    data_selector: response
    params: {}
- name: readyz
  endpoint:
    path: /readyz
    method: GET
    data_selector: response
    params: {}
- name: livez
  endpoint:
    path: /livez
    method: GET
    data_selector: response
    params: {}
- name: projects
  endpoint:
    path: /api-reference/platform-api/projects
    method: GET
    data_selector: projects
    params: {}
- name: guard
  endpoint:
    path: /v2/guard
    method: POST
    data_selector: metadata
    params: {}
- name: projects
  endpoint:
    path: /api-reference/platform-api/projects
    method: GET
- name: guard
  endpoint:
    path: /v2/guard
    method: POST
    data_selector: metadata
- name: guard
  endpoint:
    path: /guard
    method: POST
    data_selector: response
    params: {}
- name: guard_results
  endpoint:
    path: /guard/results
    method: GET
    data_selector: results
    params: {}
- name: policies
  endpoint:
    path: /policies
    method: POST
    data_selector: policy
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: POST
    data_selector: project
    params: {}
- name: policies_health
  endpoint:
    path: /policies/health
    method: GET
    data_selector: health
    params: {}
- name: policies_lint
  endpoint:
    path: /policies/lint
    method: POST
    data_selector: lint_result
    params: {}
- name: startupz
  endpoint:
    path: /startupz
    method: GET
    data_selector: startup
    params: {}
- name: readyz
  endpoint:
    path: /readyz
    method: GET
    data_selector: readiness
    params: {}
- name: livez
  endpoint:
    path: /livez
    method: GET
    data_selector: liveness
    params: {}
- name: guard
  endpoint:
    path: /guard
    method: POST
- name: guard_results
  endpoint:
    path: /guard/results
    method: GET
- name: policies
  endpoint:
    path: /policies
    method: POST
- name: projects
  endpoint:
    path: /projects
    method: POST
- name: policies_health
  endpoint:
    path: /policies/health
    method: GET
- name: policies_lint
  endpoint:
    path: /policies/lint
    method: POST
- name: startupz
  endpoint:
    path: /startupz
    method: GET
- name: readyz
  endpoint:
    path: /readyz
    method: GET
- name: livez
  endpoint:
    path: /livez
    method: GET
- name: crime
  endpoint:
    path: /docs/content-moderation#crime-and-illicit-activity
- name: hate_speech
  endpoint:
    path: /docs/content-moderation#hate-speech-and-harassment
- name: profanity
  endpoint:
    path: /docs/content-moderation#profanity
- name: sexual_content
  endpoint:
    path: /docs/content-moderation#sexual-content
- name: violence
  endpoint:
    path: /docs/content-moderation#descriptions-of-violence
- name: weapons
  endpoint:
    path: /docs/content-moderation#weapons-and-weapon-usage
- name: custom_content_moderation
  endpoint:
    path: /docs/content-moderation#custom-content-moderation
- name: results
  endpoint:
    path: /v2/guard/results
    method: GET
    data_selector: results
- name: data_leakage_prevention
  endpoint:
    path: /data-leakage-prevention
    method: GET
    data_selector: records
- name: policies
  endpoint:
    path: /api-reference/platform-api/policies
    method: GET
- name: projects
  endpoint:
    path: /api-reference/platform-api/projects
    method: GET
- name: policies
  endpoint:
    path: /api-reference/platform-api/policies
    method: GET
- name: projects
  endpoint:
    path: /api-reference/platform-api/projects
    method: GET
- name: detector-moderation
  endpoint:
    path: /detectors/moderation
    method: GET
- name: detector-credit-card
  endpoint:
    path: /detectors/credit-card
    method: GET
- name: detector-employee-ids
  endpoint:
    path: /detectors/employee-ids
    method: GET
- name: detector-pinj
  endpoint:
    path: /detectors/pinj
    method: GET
- name: detector-hate
  endpoint:
    path: /detectors/hate
    method: GET
- name: detector-phishing-links
  endpoint:
    path: /detectors/phishing-links
    method: GET
- name: detectors
  endpoint:
    path: /detectors
    method: GET
    data_selector: detectors
    params: {}
- name: results
  endpoint:
    path: /results
    method: GET
- name: guard
  endpoint:
    path: /guard
    method: GET
- name: results
  endpoint:
    path: /results
    method: GET
- name: guard
  endpoint:
    path: /guard
    method: GET
- name: HotpotQA
  endpoint:
    path: /datasets/hotpot_qa
    method: GET
- name: ChatGPT Jailbreak Prompts
  endpoint:
    path: /datasets/rubend18/ChatGPT-Jailbreak-Prompts
    method: GET
- name: gandalf_ignore_instructions
  endpoint:
    path: /datasets/Lakera/gandalf_ignore_instructions
    method: GET
- name: gandalf_summarization
  endpoint:
    path: /datasets/Lakera/gandalf_summarization
    method: GET
- name: mosscap_prompt_injection
  endpoint:
    path: /datasets/Lakera/mosscap_prompt_injection
    method: GET
- name: OpenAI Moderation Evaluation Dataset
  endpoint:
    path: /datasets/openai/moderation-api-release/
    method: GET
- name: startup_probe
  endpoint:
    path: /startupz
    method: GET
- name: readiness_probe
  endpoint:
    path: /readyz
    method: GET
- name: liveness_probe
  endpoint:
    path: /livez
    method: GET
- name: startup_probe
  endpoint:
    path: /startupz
    method: GET
- name: readiness_probe
  endpoint:
    path: /readyz
    method: GET
- name: liveness_probe
  endpoint:
    path: /livez
    method: GET
notes:
- API key cannot be retrieved after creation
- Please note that for security reasons once generated, API keys cannot be retrieved
  from your Lakera AI account.
- Self-hosted deployments do not use authorization
- API keys should be kept secret and not exposed
- Each project must be assigned to a policy, which defines the defense configuration.
- Every project is assigned a unique project ID.
- Projects allow you to tailor and fine-tune your defenses.
- Every API request must include your API key in the Authorization HTTP header.
- Screens any content passed with all Lakera managed guardrails
- Default sensitivity is L4
- Lakera Guard provides prompt defenses through detecting prompt attacks in real-time.
- Our detector models have been specifically trained to screen content prompt attacks
  in over 100+ major languages and scripts.
- API keys are considered secrets and should not be exposed
- Lakera’s AI models will not be trained on any PII.
- Screening requests should always be tagged with a project ID so the appropriate
  policy assigned to the project is applied.
- Uses OAuth2 with refresh token — requires setup of connected app in api.
- Lakera Guard currently supports content moderation in English.
- We are working on expanding our language coverage.
- Only organization admins have permission to create and edit policies.
- Preconfigured Lakera catalogue policies cannot be edited or deleted.
- The container will crash if the policy file is invalid.
- Policies are auto-updated when changes are made to the policy file.
- Detectors must start with 'detector-'
- Thresholds are inclusive
- Custom detectors cannot be fine-tuned so need to be specified with threshold level
  of l1_confident.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Only Admin users can edit Organization Settings and change user roles.
- A few additional features like Role-based Access Control (RBAC), log export for
  SIEM integration, and organization configuration settings are only available to
  our Enterprise customers.
- Lakera Guard functions as a control layer around a model, assistant, or agent(s).
- Integrating Lakera Guard is as simple as making an API call for each LLM interaction.
- Lakera Default Policy has our strictest flagging sensitivity so will flag anything
  Guard isn’t confident is safe.
- Ensure system prompts are separated from user content to avoid false positives.
- Screen original content by passing exact untrusted input.
- 'A successful Lakera Guard evaluation answers three critical questions: accuracy
  of threat detection, performance requirements, and seamless integration.'
- The container will only load if the license key is found and not expired.
- If the License key is expired, please contact support@lakera.ai.
- The Lakera Guard container needs to be bound to port 8000.
errors:
- '401 Unauthorized: Check your API key'
- '401 Unauthorized: Recheck API key'
- API requests will fail if they use a project ID from a deleted project.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- Please set license key via environment variable LAKERA_GUARD_LICENSE, please contact
  support@lakera.ai
- License key is expired, please contact support@lakera.ai
- License expires today, please contact support@lakera.ai
auth_info:
  mentioned_objects: []
client:
  base_url: https://platform.lakera.ai
  auth:
    type: oauth2
source_metadata: null
