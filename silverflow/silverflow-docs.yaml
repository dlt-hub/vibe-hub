resources:
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: response
    params: {}
- name: charges_mit
  endpoint:
    path: /v1/charges/mit
    method: POST
    data_selector: response
    params: {}
- name: charges_pos
  endpoint:
    path: /v1/charges/pos
    method: POST
    data_selector: response
    params: {}
- name: charges_refund
  endpoint:
    path: /v1/charges/{chargeKey}/refund
    method: POST
    data_selector: response
    params: {}
- name: enrollment
  endpoint:
    path: /v1/enrollment
    method: GET
    data_selector: response
    params: {}
- name: reconciliationDetails
  endpoint:
    path: /v1/reports/reconciliationDetails
    method: GET
    data_selector: response
    params: {}
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: records
    params: {}
- name: bep
  endpoint:
    path: /v1/bep
    method: POST
    data_selector: records
    params: {}
- name: tokens
  endpoint:
    path: /v1/tokens/{tokenKey}/cardArt
    method: GET
    data_selector: records
    params: {}
- name: event_subscriptions
  endpoint:
    path: /eventSubscriptions
    method: GET
    data_selector: subscriptions
    params:
      sortOrder: desc
      limit: 10
- name: bins
  endpoint:
    path: /bins
    method: GET
    data_selector: bins
    params:
      sortOrder: desc
      limit: 10
- name: merchants
  endpoint:
    path: /merchants
    method: GET
    data_selector: merchants
    params:
      sortOrder: desc
      limit: 10
- name: Create Merchant Acceptor
  endpoint:
    path: /merchants/{merchantKey}/acceptors
    method: POST
    data_selector: created
    params: {}
- name: Transaction Risk Assessment
  endpoint:
    path: /transaction/risk/assessment
    method: GET
    data_selector: assessments
    params: {}
- name: Merchant Acceptor Enrollment
  endpoint:
    path: /acceptors/{acceptorKey}/enrollments/{type}
    method: POST
    data_selector: data
    params:
      acceptorKey: mac-1JRadf2ffdfrdPMf2XrS2
      type: issm
- name: screenings
  endpoint:
    path: /screenings
    method: POST
    data_selector: submitted_screening
    params: {}
- name: 3DS Authentication
  endpoint:
    path: /3ds
    method: POST
    data_selector: 3DS Authentication
    params: {}
- name: Authentication Status Update Webhook
  endpoint:
    path: /bep/authentication-status
    method: POST
    data_selector: Authentication Status
    params: {}
- name: processor_tokens
  endpoint:
    path: /processorTokens
    method: POST
    data_selector: processorToken
    params: {}
- name: network_token
  endpoint:
    path: /networkTokens
    method: POST
    data_selector: networkToken
    params: {}
- name: charges
  endpoint:
    path: /charges
    method: POST
    data_selector: created charge
- name: create_charge
  endpoint:
    path: /charges/{initialChargeKey}/mit
    method: POST
    data_selector: null
    params:
      initialChargeKey: chg-[a-zA-Z0-9]+
- name: list_disputes
  endpoint:
    path: /disputes
    method: GET
    params:
      limit: 10
- name: Get Charge
  endpoint:
    path: /charges/{chargeKey}
    method: GET
    data_selector: charge
    params:
      chargeKey: required
- name: Cancel Charge
  endpoint:
    path: /charges/{chargeKey}/cancel
    method: POST
    data_selector: cancellation
    params:
      chargeKey: required
- name: transaction_risk_assessment
  endpoint:
    path: /transaction/risk/assessment
    method: POST
    data_selector: response
    params: {}
- name: dispute_history
  endpoint:
    path: /dispute/history
    method: GET
    data_selector: events
    params: {}
- name: card_info
  endpoint:
    path: /cardInfo
    method: POST
    data_selector: data
    params: {}
- name: fraud_notification
  endpoint:
    path: /fraudNotifications/{fraudNotificationKey}
    method: GET
    data_selector: data
    params: {}
- name: document_metadata
  endpoint:
    path: /documents/{documentKey}
    method: GET
    data_selector: data
    params: {}
- name: currency_conversion_rate
  endpoint:
    path: /currencyConversionRate/network/{network}/effectiveDate/{effectiveDate}
    method: GET
    data_selector: currency rates
    params:
      limit: 10
- name: interchange_fee_estimate
  endpoint:
    path: /fees/interchange/estimate
    method: POST
    data_selector: interchange fee estimate
- name: reconciliation_details
  endpoint:
    path: /reports/reconciliationDetails
    method: GET
    data_selector: reconciliation records
    params:
      from: yesterdayTimestamp
      to: currentTimestamp
      limit: 10
- name: networkFundsTransfers
  endpoint:
    path: /reports/networkFundsTransfers/fundsTransferDate/{fundsTransferDate}
    method: GET
    data_selector: networkFundsTransfer
    params:
      limit: '10'
      offsetToken: requestOffsetToken
      sortOrder: desc
- name: reconciliationDetailRecords
  endpoint:
    path: /reports/reconciliationDetailRecords
    method: POST
    data_selector: reconciliationDetailsReport
    params: {}
- name: ammfReport
  endpoint:
    path: /reports/ammfReport
    method: POST
    data_selector: ammfReport
    params: {}
- name: risk_assessments
  endpoint:
    path: /v1/riskAssessments
    method: POST
    data_selector: riskAssessment
    params: {}
- name: reportSchedules
  endpoint:
    path: /reportSchedules
    method: POST
    data_selector: reportSchedule
    params:
      reportName: SchemeFeeDetailsReportName
      mimeType: application/json
- name: reports
  endpoint:
    path: /reports
    method: GET
    data_selector: reports
    params:
      limit: 10
      sortOrder: asc
- name: dispute_history_events_report
  endpoint:
    path: /reports/disputeHistoryEvents
    method: POST
    data_selector: parameters
    params: {}
- name: fraud_notifications_report
  endpoint:
    path: /reports/fraudNotificationRecords
    method: POST
    data_selector: parameters
    params: {}
- name: charges_report
  endpoint:
    path: /reports/charges
    method: POST
    data_selector: parameters
    params: {}
- name: scheme_fee_details_report
  endpoint:
    path: /reports/schemeFeeDetails
    method: POST
    data_selector: parameters
    params: {}
- name: transaction_risk_assessment
  endpoint:
    path: /transaction/risk/assessment
    method: POST
    data_selector: result
    params: {}
- name: activate_agent
  endpoint:
    path: /v1/agents/current/activate
    method: POST
    data_selector: key
- name: create_api_key
  endpoint:
    path: /apiKeys
    method: POST
    data_selector: key
- name: create_merchant
  endpoint:
    path: /merchants
    method: POST
    data_selector: merchantKey
- name: create_charges
  endpoint:
    path: /charges
    method: POST
    data_selector: chargeKey
- name: get_reconciliation_details
  endpoint:
    path: /reports/reconciliationDetails
    method: GET
    data_selector: items
- name: processor_token
  endpoint:
    path: /v1/processorTokens
    method: POST
- name: get_processor_tokens
  endpoint:
    path: /v1/processorTokens
    method: GET
- name: get_processor_token
  endpoint:
    path: /v1/processorTokens/{processorTokenKey}
    method: GET
- name: archive_processor_token
  endpoint:
    path: /v1/processorTokens/{processorTokenKey}
    method: DELETE
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: records
    params: {}
- name: reconciliationDetails
  endpoint:
    path: /v1/reports/reconciliationDetails
    method: GET
    data_selector: records
    params: {}
- name: enrollment
  endpoint:
    path: /v1/enrollment
    method: GET
    data_selector: records
    params: {}
- name: event_subscriptions
  endpoint:
    path: /eventSubscriptions
    method: GET
    data_selector: subscriptions
    params:
      sortOrder: desc
- name: bins
  endpoint:
    path: /bins
    method: GET
    data_selector: bins
    params:
      sortOrder: desc
- name: merchants
  endpoint:
    path: /merchants
    method: GET
    data_selector: merchants
    params:
      sortOrder: desc
      limit: 10
- name: create_enrollment
  endpoint:
    path: /acceptors/{acceptorKey}/enrollments/{type}
    method: POST
    data_selector: enrollment
    params:
      acceptorKey: mac-1JRadf2ffdfrdPMf2XrS2
      type: issm
- name: create_screening
  endpoint:
    path: /screenings
    method: POST
    data_selector: screening
    params: {}
- name: 3ds_authentication
  endpoint:
    path: /3ds
    method: POST
    data_selector: authentication
    params: {}
- name: processor_token
  endpoint:
    path: /processorTokens
    method: POST
    data_selector: key
    params: {}
- name: charges
  endpoint:
    path: /charges
    method: POST
    data_selector: created charge
- name: create_network_token
  endpoint:
    path: /networkTokens
    method: POST
    data_selector: networkToken
    params:
      enrollmentKey: required
      type: merchant
      cardData: required
- name: charges
  endpoint:
    path: /charges/{initialChargeKey}/mit
    method: POST
    data_selector: charge
    params: {}
- name: list_disputes
  endpoint:
    path: /disputes
    method: GET
    data_selector: disputes
    params:
      limit: 10
- name: charge
  endpoint:
    path: /charges/{chargeKey}
    method: GET
    data_selector: charge
    params: {}
- name: cancel_charge
  endpoint:
    path: /charges/{chargeKey}/cancel
    method: POST
    data_selector: cancelCharge
    params: {}
- name: card_info
  endpoint:
    path: /v1/cardInfo
    method: POST
    data_selector: response
    params: {}
- name: fraud_notifications
  endpoint:
    path: /v1/fraudNotifications/{fraudNotificationKey}
    method: GET
    data_selector: response
    params: {}
- name: documents
  endpoint:
    path: /v1/documents/{documentKey}
    method: GET
    data_selector: response
    params: {}
- name: currency_conversion_rate
  endpoint:
    path: /currencyConversionRate/network/{network}/effectiveDate/{effectiveDate}
    method: GET
    data_selector: currencyRates
    params:
      limit: 10
- name: interchange_fee_estimate
  endpoint:
    path: /fees/interchange/estimate
    method: POST
    data_selector: estimate
    params: {}
- name: reconciliation_details
  endpoint:
    path: /reports/reconciliationDetails
    method: GET
    data_selector: reconciliationRecords
    params:
      from: '{{yesterdayTimestamp}}'
      to: '{{currentTimestamp}}'
      limit: 10
- name: network_funds_transfers
  endpoint:
    path: /reports/networkFundsTransfers/fundsTransferDate/{fundsTransferDate}
    method: GET
    data_selector: networkFundsTransfer
    params:
      limit: 10
- name: reconciliation_details_report
  endpoint:
    path: /reports/reconciliationDetailRecords
    method: POST
    data_selector: reconciliationDetails
    params: {}
- name: ammf_report
  endpoint:
    path: /reports/ammfReport
    method: POST
    data_selector: ammfReport
    params: {}
- name: risk_assessment
  endpoint:
    path: /v1/riskAssessments
    method: POST
    data_selector: riskAssessment
    params: {}
- name: reportSchedules
  endpoint:
    path: /reportSchedules
    method: POST
    data_selector: reportSchedule
    params: {}
- name: reports
  endpoint:
    path: /reports
    method: GET
    data_selector: reports
    params: {}
- name: dispute_history_events_report
  endpoint:
    path: /reports/disputeHistoryEvents
    method: POST
    data_selector: parameters
    params: {}
- name: fraud_notifications_report
  endpoint:
    path: /reports/fraudNotificationRecords
    method: POST
    data_selector: parameters
    params: {}
- name: charges_report
  endpoint:
    path: /reports/charges
    method: POST
    data_selector: parameters
    params: {}
- name: scheme_fee_details_report
  endpoint:
    path: /reports/schemeFeeDetails
    method: POST
    data_selector: parameters
    params: {}
- name: transaction_risk
  endpoint:
    path: /transaction/risk/assessment
    method: POST
    data_selector: result
    params: {}
- name: merchants
  endpoint:
    path: /merchants
    method: POST
    data_selector: null
    params: {}
- name: acceptors
  endpoint:
    path: /merchants/{merchantKey}/acceptors
    method: POST
    data_selector: null
    params: {}
- name: update_acceptor
  endpoint:
    path: /acceptors/{acceptorKey}
    method: PATCH
    data_selector: null
    params: {}
- name: activate_acceptor
  endpoint:
    path: /acceptors/{acceptorKey}/activate
    method: POST
    data_selector: null
    params: {}
- name: archive_acceptor
  endpoint:
    path: /acceptors/{acceptorKey}
    method: DELETE
    data_selector: null
    params: {}
- name: enrollments
  endpoint:
    path: /enrollments
    method: POST
    data_selector: records
- name: challenge_request
  endpoint:
    path: /challenge
    method: POST
    data_selector: ''
    params: {}
- name: challenge_response
  endpoint:
    path: /notificationUrl
    method: POST
    data_selector: ''
    params: {}
- name: 3ds_entity
  endpoint:
    path: /3ds/tds-<your-key>
    method: GET
    data_selector: ''
    params: {}
- name: 3ds_authentication
  endpoint:
    path: /3ds
    method: POST
    data_selector: result
    params: {}
- name: card_ranges
  endpoint:
    path: /3ds/cardRanges
    method: GET
    data_selector: '[]'
- name: BEP Authentication
  endpoint:
    path: /POST/BEP
    method: POST
- name: processor_token
  endpoint:
    path: /processorTokens
    method: POST
    data_selector: key
    params: {}
- name: get_processor_token
  endpoint:
    path: /processorTokens/{processorTokenKey}
    method: GET
    data_selector: key
    params: {}
- name: archive_processor_token
  endpoint:
    path: /processorTokens/{processorTokenKey}
    method: DELETE
    data_selector: key
    params: {}
- name: Create Token
  endpoint:
    path: /tokens
    method: POST
    data_selector: records
    params: {}
- name: Get Token
  endpoint:
    path: /tokens/{token_id}
    method: GET
    data_selector: records
    params: {}
- name: Get Token Data
  endpoint:
    path: /token-data/{token_id}
    method: GET
    data_selector: records
    params: {}
- name: Create Token Cryptogram
  endpoint:
    path: /token-cryptogram
    method: POST
    data_selector: records
    params: {}
- name: risk_assessment
  endpoint:
    path: /transaction-risk
    method: POST
    data_selector: score
    params: {}
- name: charge_types
  endpoint:
    path: /api/charge-types
    method: GET
    data_selector: chargeTypes
    params: {}
- name: cancel_charge
  endpoint:
    path: /charges/:chargeKey/cancel
    method: POST
    data_selector: type
    params: {}
- name: refund_charge
  endpoint:
    path: /charges/:chargeKey/refund
    method: POST
    data_selector: refundAmount
    params: {}
- name: cancel_or_refund_charge
  endpoint:
    path: /charges/:chargeKey/cancelOrRefundCharge
    method: POST
    data_selector: type
    params: {}
- name: reverse_charge
  endpoint:
    path: /charges/:chargeKey/reverse
    method: POST
    data_selector: replacementAmount
    params: {}
- name: Create POS Charge
  endpoint:
    path: /charges/pos
    method: POST
    data_selector: charge
    params: {}
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: transaction
    params: {}
- name: funding
  endpoint:
    path: /funding
    method: POST
    data_selector: transaction
    params: {}
- name: distributions
  endpoint:
    path: /v1/distributions
    method: POST
    data_selector: key
    params: {}
- name: reportSchedules
  endpoint:
    path: /v1/reportSchedules
    method: POST
    data_selector: key
    params: {}
- name: charges_report
  endpoint:
    path: /v1/reports/charges
    method: POST
    data_selector: report
    params: {}
- name: reconciliation_details_report
  endpoint:
    path: /v1/reports/reconciliationDetails
    method: POST
    data_selector: report
    params: {}
- name: network_funds_transfer_report
  endpoint:
    path: /v1/reports/networkFundsTransfers
    method: POST
    data_selector: report
    params: {}
- name: quarterly_scheme_report
  endpoint:
    path: /v1/reports/quarterlyScheme
    method: POST
    data_selector: report
    params: {}
- name: scheme_fee_details_report
  endpoint:
    path: /v1/reports/schemeFeeDetails
    method: POST
    data_selector: report
    params: {}
- name: dispute_details_report
  endpoint:
    path: /v1/reports/disputeHistoryEvents
    method: POST
    data_selector: report
    params: {}
- name: fraud_notifications_report
  endpoint:
    path: /v1/reports/fraudNotifications
    method: POST
    data_selector: report
    params: {}
- name: reconciliation_details
  endpoint:
    path: /api/reconciliation_details
    method: GET
    data_selector: reconciliationDetails
- name: corrections
  endpoint:
    path: /reconciliation/details/corrections
    method: GET
    data_selector: records
- name: create_network_funds_transfers_report
  endpoint:
    path: /api/v1/network_funds_transfers_report
    method: POST
    data_selector: report
    params:
      fundsTransferDate: required
- name: get_report_file
  endpoint:
    path: /api/v1/report_file
    method: GET
    data_selector: file
    params: {}
- name: schedule_report
  endpoint:
    path: /api/v1/schedule_report
    method: POST
    data_selector: schedule
    params: {}
- name: Scheme Fee Details
  endpoint:
    path: /api/scheme_fee_details
    method: GET
    data_selector: records
    params:
      bookDate:
        from: start_date
        to: end_date
- name: Quarterly Scheme Report
  endpoint:
    path: /quarterly_scheme_reports
    method: GET
    data_selector: reports
    params: {}
- name: AMMF Report
  endpoint:
    path: /ammf/report
    method: POST
    data_selector: reportData
    params:
      directSubmission: 'true'
- name: Disputes
  endpoint:
    path: /operation/getDisputes
    method: GET
    data_selector: disputes
- name: Dispute Events
  endpoint:
    path: /operation/getDisputeEvents
    method: GET
    data_selector: dispute_events
- name: Dispute Event Notifications
  endpoint:
    path: /operation/createEventSubscription
    method: POST
    data_selector: event_notifications
- name: Dispute Documents
  endpoint:
    path: /operation/getDisputeDocumentsMetadata
    method: GET
    data_selector: dispute_documents
- name: disputes
  endpoint:
    path: /disputes/{disputeKey}
    method: GET
    data_selector: dispute
    params: {}
- name: reconciliationDetails
  endpoint:
    path: /reports/reconciliationDetails
    method: GET
    data_selector: reconciliationDetail
    params: {}
- name: eventSubscriptions
  endpoint:
    path: /eventSubscriptions
    method: POST
    data_selector: eventSubscription
    params: {}
- name: add_document
  endpoint:
    path: /disputes/{disputeKey}/documents
    method: POST
    data_selector: null
    params: {}
- name: upload_document
  endpoint:
    path: /documents/{documentKey}/file
    method: PUT
    data_selector: null
    params: {}
- name: defend_chargeback
  endpoint:
    path: /disputes/{disputeKey}/defend
    method: POST
    data_selector: null
    params: {}
- name: retrieve_chargeback_outcome
  endpoint:
    path: /disputes/{disputeKey}/outcome
    method: GET
    data_selector: null
    params: {}
- name: accept_pre_arbitration
  endpoint:
    path: /disputes/{disputeKey}/accept
    method: POST
    data_selector: null
    params: {}
- name: dispute_handling
  endpoint:
    path: /disputeHandling
    method: POST
    data_selector: disputeHandling
- name: bearer_token
  endpoint:
    path: /v1/agents/current/bearerToken
    method: POST
    data_selector: token
- name: event_subscription
  endpoint:
    path: /eventSubscriptions
    method: POST
    data_selector: ''
    params: {}
- name: fraud_notifications
  endpoint:
    path: /fraudNotifications
    method: GET
    data_selector: ''
    params: {}
- name: card_info
  endpoint:
    path: /cardInfo/{network}
    method: GET
    data_selector: response
    params: {}
- name: interchange_fees
  endpoint:
    path: /fees/interchange/estimate
    method: POST
    data_selector: segments
    params: {}
- name: scheme_fees
  endpoint:
    path: /fees/scheme/estimate
    method: POST
    data_selector: fees
    params: {}
- name: currency_conversion_rates
  endpoint:
    path: /currency-conversion-rates
    method: GET
    data_selector: items
- name: reportSchedules
  endpoint:
    path: /v1/reportSchedules
    method: GET
- name: schemeFeeDetails
  endpoint:
    path: /v1/reports/schemeFeeDetails
    method: POST
- name: charges
  endpoint:
    path: /v1/reports/charges
    method: POST
- name: networkFundsTransfers
  endpoint:
    path: /v1/reports/networkFundsTransfers
    method: POST
- name: disputeHistoryEvents
  endpoint:
    path: /v1/reports/disputeHistoryEvents
    method: POST
- name: quarterlySchemeReport
  endpoint:
    path: /v1/reports/quarterlySchemeReport
    method: POST
- name: fraudNotificationRecords
  endpoint:
    path: /v1/reports/fraudNotificationRecords
    method: POST
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: payload
    params: {}
- name: reportSchedules
  endpoint:
    path: /v1/reportSchedules
    method: POST
    data_selector: payload
    params: {}
- name: reports
  endpoint:
    path: /v1/reports
    method: GET
    data_selector: payload
    params: {}
- name: cardInfo
  endpoint:
    path: /v1/cardInfo
    method: GET
    data_selector: payload
    params: {}
- name: screenings
  endpoint:
    path: /v1/screenings
    method: POST
    data_selector: payload
    params: {}
- name: enrollments
  endpoint:
    path: /v1/enrollments
    method: POST
    data_selector: payload
    params: {}
- name: fees
  endpoint:
    path: /v1/fees/interchange/estimate
    method: POST
    data_selector: records
- name: cards
  endpoint:
    path: /v1/cards
    method: POST
    data_selector: records
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: records
- name: disputes
  endpoint:
    path: /v1/disputes/{disputeKey}/defend
    method: POST
    data_selector: records
- name: reconciliationDetails
  endpoint:
    path: /v1/reports/reconciliationDetails
    method: GET
- name: reconciliationDetailsFundsTransferDate
  endpoint:
    path: /v1/reports/reconciliationDetails/fundsTransferDate/{fundsTransferDate}
    method: GET
- name: chargesPayout
  endpoint:
    path: /v1/charges/payout
    method: POST
- name: 3dsAuthentication
  endpoint:
    path: /v1/3ds
    method: POST
- name: bep
  endpoint:
    path: /v1/bep
    method: POST
- name: createMerchant
  endpoint:
    path: /v1/merchants
    method: POST
- name: createAcceptor
  endpoint:
    path: /v1/merchants/{merchantKey}/acceptors
    method: POST
- name: createCharge
  endpoint:
    path: /v1/charges
    method: POST
- name: createChargeMit
  endpoint:
    path: /v1/charges/mit
    method: POST
- name: createChargeWip
  endpoint:
    path: /v1/charges/{chargeKey}/wip
    method: POST
- name: createChargeBep
  endpoint:
    path: /charges/bep
    method: POST
    data_selector: ChargeCreateBEPResponse
- name: createChargeFunding
  endpoint:
    path: /charges/funding
    method: POST
    data_selector: FundingChargeResponse
- name: createChargePayout
  endpoint:
    path: /charges/payout
    method: POST
    data_selector: PayoutChargeResponse
- name: createChargePos
  endpoint:
    path: /charges/pos
    method: POST
- name: 3DS Authentications
  endpoint:
    path: /3ds
    method: GET
    data_selector: 3DS authentications
    params: {}
- name: Create 3DS Authentication
  endpoint:
    path: /3ds
    method: POST
    data_selector: 3DS authentication entity
    params: {}
- name: Get 3DS Authentication
  endpoint:
    path: /3ds/{threedsKey}
    method: GET
    data_selector: 3DS authentication
    params: {}
- name: Retrieve Card Ranges
  endpoint:
    path: /3ds/cardRanges
    method: POST
    data_selector: PAN information
    params: {}
- name: Get BEP
  endpoint:
    path: /bep/{bepKey}
    method: GET
    data_selector: BEP entity
    params: {}
- name: Create BEP Authentication Intent
  endpoint:
    path: /bep
    method: POST
    data_selector: BEP Intent
    params: {}
- name: Finalize BEP Authentication
  endpoint:
    path: /bep/{bepKey}/authorizationResult
    method: POST
    data_selector: Authorization result
    params: {}
- name: Get Charge
  endpoint:
    path: /charges/{chargeKey}
    method: GET
    data_selector: charge
    params: {}
- name: List Charges
  endpoint:
    path: /charges
    method: GET
    data_selector: paged list of charges
    params: {}
- name: createChargeMit
  endpoint:
    path: /charges/{initialChargeKey}/mit
    method: POST
    data_selector: responses.201
    params: {}
- name: createChargeUnreferencedMit
  endpoint:
    path: /charges/mit
    method: POST
    data_selector: responses.201
    params: {}
- name: createChargeUnreferencedMitFunding
  endpoint:
    path: /charges/mitFunding
    method: POST
    data_selector: responses.201
    params: {}
- name: screenings
  endpoint:
    path: /screenings
    method: POST
    data_selector: screenings
    params: {}
- name: listScreenings
  endpoint:
    path: /screenings
    method: GET
    data_selector: screenings
    params: {}
- name: getScreening
  endpoint:
    path: /screenings/{screeningsKey}
    method: GET
    data_selector: screening
    params: {}
- name: listScreeningResults
  endpoint:
    path: /screenings/{screeningsKey}/results
    method: GET
    data_selector: screeningResults
    params: {}
- name: getAgent
  endpoint:
    path: /agents/{agentKey}
    method: GET
    data_selector: agent
    params: {}
- name: updateAgent
  endpoint:
    path: /agents/{agentKey}
    method: PATCH
    data_selector: agent
    params: {}
- name: activateAgent
  endpoint:
    path: /agents/{agentKey}/activate
    method: POST
    data_selector: apiKey
    params: {}
- name: createAgentBearerToken
  endpoint:
    path: /agents/{agentKey}/bearerToken
    method: POST
    data_selector: bearerToken
    params: {}
- name: createApiKey
  endpoint:
    path: /apiKeys
    method: POST
    data_selector: apiKey
    params: {}
- name: listApiKeys
  endpoint:
    path: /apiKeys
    method: GET
    data_selector: apiKeys
    params: {}
- name: getApiKey
  endpoint:
    path: /apiKeys/{apiKey}
    method: GET
    data_selector: apiKey
    params: {}
- name: updateApiKey
  endpoint:
    path: /apiKeys/{apiKey}
    method: PATCH
    data_selector: apiKey
    params: {}
- name: deleteApiKey
  endpoint:
    path: /apiKeys/{apiKey}
    method: DELETE
    data_selector: status
    params: {}
- name: getBins
  endpoint:
    path: /bins
    method: GET
    data_selector: bins
    params: {}
- name: getBin
  endpoint:
    path: /bins/{binKey}
    method: GET
    data_selector: bin
    params: {}
- name: getBinConfigurations
  endpoint:
    path: /bins/{binKey}/configurations
    method: GET
    data_selector: binConfigurations
    params: {}
- name: create3dsAuthentication
  endpoint:
    path: /3ds
    method: POST
    data_selector: 3dsAuthentication
    params: {}
- name: charges
  endpoint:
    path: /charges/{chargeKey}/cancel
    method: POST
- name: charges
  endpoint:
    path: /charges/{chargeKey}/refund
    method: POST
- name: charges
  endpoint:
    path: /charges/{chargeKey}/offlineRefund
    method: POST
- name: charges
  endpoint:
    path: /charges/{chargeKey}/reverse
    method: POST
- name: charges
  endpoint:
    path: /charges/{chargeKey}/increment
    method: POST
- name: charges
  endpoint:
    path: /charges/{chargeKey}/clear
    method: POST
- name: fee_components
  endpoint:
    path: /api/fee_components
    method: GET
    data_selector: segments
- name: scheme_fee_estimation
  endpoint:
    path: /fees/scheme/estimate
    method: POST
    data_selector: response
    params: {}
- name: merchants
  endpoint:
    path: /merchants
    method: GET
    data_selector: response
    params: {}
- name: reconciliation_details
  endpoint:
    path: /reports/reconciliationDetails
    method: GET
    data_selector: response
    params: {}
- name: createFraudNotificationsReport
  endpoint:
    path: /reports/fraudNotificationRecords
    method: POST
    data_selector: application/json
    params: {}
- name: createNetworkFundsTransfersReport
  endpoint:
    path: /reports/networkFundsTransfers
    method: POST
    data_selector: application/json
    params: {}
- name: schemeFeeDetails
  endpoint:
    path: /reports/schemeFeeDetails
    method: POST
    data_selector: application/json
    params: {}
- name: createChargesReport
  endpoint:
    path: /reports/charges
    method: POST
    data_selector: application/json
    params: {}
- name: listReport
  endpoint:
    path: /reports
    method: GET
    data_selector: application/json
    params: {}
- name: getReport
  endpoint:
    path: /reports/{reportKey}
    method: GET
    data_selector: application/json
    params: {}
- name: getReportFile
  endpoint:
    path: /reports/{reportKey}/file
    method: GET
    data_selector: application/json
    params: {}
- name: reportSchedules
  endpoint:
    path: /reportSchedules
    method: post
    data_selector: reportSchedule
    params:
      permissions: reportSchedules:Create
- name: listReportSchedules
  endpoint:
    path: /reportSchedules
    method: get
    data_selector: items
    params:
      permissions: reportSchedules:List
- name: getReportSchedule
  endpoint:
    path: /reportSchedules/{reportScheduleKey}
    method: get
    data_selector: reportSchedule
    params:
      permissions: reportSchedules:Get
- name: archiveReportSchedule
  endpoint:
    path: /reportSchedules/{reportScheduleKey}
    method: delete
    data_selector: status
    params:
      permissions: reportSchedules:Archive
- name: submitEvidence
  endpoint:
    path: /disputes/{disputeKey}/submitEvidence
    method: POST
    data_selector: Dispute
    params: {}
- name: rejectEvidence
  endpoint:
    path: /disputes/{disputeKey}/rejectEvidence
    method: POST
    data_selector: Dispute
    params: {}
- name: defendDispute
  endpoint:
    path: /disputes/{disputeKey}/defend
    method: POST
    data_selector: Dispute
    params: {}
- name: getDisputeEventHistory
  endpoint:
    path: /disputes/{disputeKey}/eventHistory
    method: GET
    data_selector: DisputeEventHistoryPage
    params: {}
- name: getEventHistory
  endpoint:
    path: /disputes/eventHistory/{eventHistoryKey}
    method: GET
    data_selector: DisputeEventHistory
    params: {}
- name: getDocument
  endpoint:
    path: /documents/{documentKey}
    method: GET
    data_selector: Document
    params: {}
- name: archiveDocument
  endpoint:
    path: /documents/{documentKey}
    method: DELETE
    data_selector: Document
    params: {}
- name: getFraudNotification
  endpoint:
    path: /fraudNotifications/{fraudNotificationKey}
    method: GET
    data_selector: FraudNotification
    params: {}
- name: getFraudNotifications
  endpoint:
    path: /fraudNotifications
    method: GET
    data_selector: FraudNotificationsPage
    params: {}
- name: getEventSubscriptions
  endpoint:
    path: /eventSubscriptions
    method: GET
    data_selector: EventSubscriptionsPage
    params: {}
- name: createEventSubscription
  endpoint:
    path: /eventSubscriptions
    method: POST
    data_selector: EventSubscription
    params: {}
- name: networkTokens
  endpoint:
    path: /networkTokens/{networkTokenKey}/cryptogram
    method: POST
- name: createToken
  endpoint:
    path: /networkTokens
    method: POST
    data_selector: application/json
    params: {}
- name: listTokens
  endpoint:
    path: /networkTokens
    method: GET
    data_selector: application/json
    params: {}
- name: getToken
  endpoint:
    path: /networkTokens/{networkTokenKey}
    method: GET
    data_selector: application/json
    params: {}
- name: archiveToken
  endpoint:
    path: /networkTokens/{networkTokenKey}
    method: DELETE
    data_selector: application/json
    params: {}
- name: getTokenData
  endpoint:
    path: /networkTokens/{networkTokenKey}/networkTokenData
    method: GET
    data_selector: application/json
    params: {}
- name: country_codes
  endpoint:
    path: /api/v1/country_codes
    method: GET
    data_selector: codes
    params: {}
- name: country
  endpoint:
    path: /country-codes
    method: GET
    data_selector: countries
    params: {}
- name: currency_list
  endpoint:
    path: /api/currencies
    method: GET
    data_selector: currencies
- name: Acceptor
  endpoint:
    path: /acceptors
    method: GET
- name: Merchant
  endpoint:
    path: /merchants
    method: GET
- name: VtsEnrollment
  endpoint:
    path: /vts/enrollment
    method: POST
    data_selector: enrollmentDetail
- name: VtsEnrollmentCreate
  endpoint:
    path: /vts/enrollment/create
    method: POST
    data_selector: enrollmentDetail
- name: AResWithoutAuthValue
  endpoint:
    path: /AResWithoutAuthValue
    method: POST
    data_selector: AResWithoutAuthValue
- name: ThreeDsChallenge
  endpoint:
    path: /ThreeDsChallenge
    method: POST
    data_selector: ThreeDsChallenge
- name: ThreeDsFrictionlessAuthenticatedWithoutAuthValue
  endpoint:
    path: /ThreeDsFrictionlessAuthenticatedWithoutAuthValue
    method: POST
    data_selector: ThreeDsFrictionlessAuthenticatedWithoutAuthValue
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: PublicCreate3dsRequest
  endpoint:
    path: /public/create3dsrequest
    method: POST
    data_selector: transaction
    params: {}
- name: TransactionType
- name: InitiateBEP
  endpoint:
    path: /initiateBEP
    method: POST
    data_selector: bepKey
    params: {}
- name: BepResponse
  endpoint:
    path: /bepResponse
    method: GET
    data_selector: authenticationStatus
    params: {}
- name: authorizationIsoFieldsAmericanExpress
  endpoint:
    path: /authorization/amex
    method: GET
    data_selector: records
- name: authorizationIsoFieldsBancontact
  endpoint:
    path: /authorization/bancontact
    method: GET
    data_selector: records
- name: authorizationIsoFieldsDiscover
  endpoint:
    path: /authorization/discover
    method: GET
    data_selector: records
- name: authorizationIsoFieldsMastercard
  endpoint:
    path: /authorization/mastercard
    method: GET
    data_selector: records
- name: ResponsePosAmount
  endpoint:
    path: /components/schemas/ResponsePosAmount
    method: GET
    data_selector: value
    params: {}
- name: ChargePosType
  endpoint:
    path: /components/schemas/ChargePosType
    method: GET
    data_selector: intent
    params: {}
- name: StatusPos
  endpoint:
    path: /components/schemas/StatusPos
    method: GET
    data_selector: authentication
    params: {}
- name: PosAuthorizationIsoFields
  endpoint:
    path: /components/schemas/PosAuthorizationIsoFields
    method: GET
    data_selector: responseCode
    params: {}
- name: MitResponse
  endpoint:
    path: /silverflow/charges
    method: POST
    data_selector: created
    params: {}
- name: PayoutChargeRequest
  endpoint:
    path: /payout/charges
    method: POST
    data_selector: charge
    params: {}
- name: PayoutChargeResponse
  endpoint:
    path: /payout/charges/{chargeId}
    method: GET
    data_selector: charge
    params: {}
- name: ChargeCreatePos
  endpoint:
    path: /pos/charges
    method: POST
    data_selector: charge
    params: {}
- name: ChargeCreatePosResponse
  endpoint:
    path: /pos/charges/{chargeId}
    method: GET
    data_selector: charge
    params: {}
- name: Country Code
  endpoint:
    path: /components/schemas/schemas-CountryCode
    method: GET
    data_selector: properties
- name: country
  endpoint:
    path: /country/codes
    method: GET
    data_selector: countries
- name: country_currency
  endpoint:
    path: /currencies
    method: GET
    data_selector: currencies
    params: {}
- name: currency
  endpoint:
    path: /currencies
    method: GET
    data_selector: currencies
    params: {}
- name: Dispute
  endpoint:
    path: /disputes
    method: GET
    data_selector: disputes
- name: Document
  endpoint:
    path: /documents
    method: GET
    data_selector: documents
- name: countries
  endpoint:
    path: /api/currencies
    method: GET
    data_selector: currencies
- name: european_currency_codes
  endpoint:
    path: /european_currency_codes
    method: GET
    data_selector: records
- name: us_currency_codes
  endpoint:
    path: /us_currency_codes
    method: GET
    data_selector: records
- name: other_currency_codes
  endpoint:
    path: /other_currency_codes
    method: GET
    data_selector: records
- name: IntegerAmount
  endpoint:
    path: /components/schemas/IntegerAmount
    method: GET
- name: ChargeType
  endpoint:
    path: /components/schemas/schemas-ChargeType
    method: GET
- name: InterchangeFeeEstimateRequest
  endpoint:
    path: /components/schemas/InterchangeFeeEstimateRequest
    method: GET
- name: InterchangeFeeEstimateResponse
  endpoint:
    path: /interchange-fee-estimate
    method: POST
    data_selector: segments
    params: {}
- name: country_currency
  endpoint:
    path: /api/countries/currencies
    method: GET
    data_selector: currencies
    params: {}
- name: SchemeFeeRequest
  endpoint:
    path: /fees/scheme/estimate
    method: POST
    data_selector: fees
    params: {}
- name: country_code_numeric
  endpoint:
    path: /components/schemas/countryCodeNumeric
    method: GET
- name: european_iso_currency_codes
  endpoint:
    path: /api/european_iso_currency_codes
    method: GET
    data_selector: records
- name: us_iso_currency_codes
  endpoint:
    path: /api/us_iso_currency_codes
    method: GET
    data_selector: records
- name: other_iso_currency_codes
  endpoint:
    path: /api/other_iso_currency_codes
    method: GET
    data_selector: records
- name: NetworkFundsTransfers
  endpoint:
    path: /networkFundsTransfers
    method: GET
    data_selector: networkFundsTransfers
- name: ListReportSchedules
  endpoint:
    path: /report/schedules
    method: GET
    data_selector: items
    params:
      incremental: moreItems
- name: CreateReportSchedule
  endpoint:
    path: /report/schedules
    method: POST
    data_selector: reportName
    params: {}
- name: disputeHistoryEventsReportParameters
  endpoint:
    params:
      createdFrom: '2025-04-24'
      createdTo: '2025-04-25'
- name: fraudNotificationsReportParameters
  endpoint:
    params: {}
- name: networkFundsTransfersReportParameters
  endpoint:
    params:
      fundsTransferDate: '2025-04-24'
- name: schemeFeeDetailsReportParameters
  endpoint:
    params:
      bookDateFrom: '2025-04-24'
      bookDateTo: '2025-04-25'
- name: chargesReportParameters
  endpoint:
    params:
      createdFrom: '2025-04-24'
      createdTo: '2025-04-25'
- name: VisaQuarterlySchemeReport
  endpoint:
    path: /VisaQuarterlySchemeReport
    method: GET
    data_selector: items
    params: {}
- name: MastercardQuarterlySchemeReport
  endpoint:
    path: /MastercardQuarterlySchemeReport
    method: GET
    data_selector: items
    params: {}
- name: AmmfReport
  endpoint:
    path: /AmmfReport
    method: GET
    data_selector: items
    params: {}
- name: TokensPage
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: riskAssessment
  endpoint:
    path: /riskAssessments
    method: POST
    data_selector: result
    params: {}
- name: get-agent
  endpoint:
    path: /get-agent
    method: GET
    data_selector: value
- name: update-agent-change-emails
  endpoint:
    path: /update-agent-change-emails
    method: POST
    data_selector: value
- name: merchant_acceptor
  endpoint:
    path: /silverflow/b0451a9d-f66d-4ef7-9f5d-d48064a2bb3e
    method: POST
    data_selector: value
- name: card-info-response-mastercard
  endpoint:
    path: /silverflow/card-info-response-mastercard
    method: GET
    data_selector: value
    params: {}
- name: card-info-response-visa
  endpoint:
    path: /silverflow/card-info-response-visa
    method: GET
    data_selector: value
    params: {}
- name: response-currency-rates-visa
  endpoint:
    path: /silverflow/response-currency-rates-visa
    method: GET
    data_selector: value
    params: {}
- name: visa-dispute-received
  endpoint:
    path: /silverflow/visa-dispute-received
    method: GET
    data_selector: value
    params: {}
- name: visa_Request
  endpoint:
    path: /silverflow/visa_Request
    method: POST
    data_selector: value
- name: mastercard_Request
  endpoint:
    path: /silverflow/mastercard_Request
    method: POST
    data_selector: value
- name: mastercard-network-token_Request
  endpoint:
    path: /silverflow/mastercard-network-token_Request
    method: POST
    data_selector: value
- name: visa_Response
  endpoint:
    path: /silverflow/visa_Response
    method: GET
    data_selector: value
- name: mastercard_Response
  endpoint:
    path: /silverflow/mastercard_Response
    method: GET
    data_selector: value
- name: mastercard-network-token_Response
  endpoint:
    path: /silverflow/mastercard-network-token_Response
    method: GET
    data_selector: value
- name: mit-funding-visa_Request
  endpoint:
    path: /silverflow/mit-funding-visa_Request
    method: POST
    data_selector: value
- name: mit-funding-visa_Response
  endpoint:
    path: /silverflow/mit-funding-visa_Response
    method: GET
    data_selector: value
- name: wip_Request
  endpoint:
    path: /silverflow/wip_Request
    method: POST
    data_selector: value
- name: wip_Response
  endpoint:
    path: /silverflow/wip_Response
    method: GET
    data_selector: value
- name: partial_Request
  endpoint:
    path: /silverflow/partial_Request
    method: POST
    data_selector: value
- name: partial_Response
  endpoint:
    path: /silverflow/partial_Response
    method: GET
    data_selector: value
- name: dispute-liability-accepted
  endpoint:
    path: /dispute/liability-accepted
    method: GET
    data_selector: value
- name: dispute-expires
  endpoint:
    path: /dispute/expires
    method: GET
    data_selector: value
- name: dispute-closedWon
  endpoint:
    path: /dispute/closedWon
    method: GET
    data_selector: value
- name: dispute-awaiting-response
  endpoint:
    path: /dispute/awaiting-response
    method: GET
    data_selector: value
- name: report-reconciliation-details-firstPresentment-RTC
  endpoint:
    path: /report/reconciliation/details/firstPresentment-RTC
    method: GET
    data_selector: items
- name: report-reconciliation-details-cardNetworkFee
  endpoint:
    path: /report/reconciliation/details/cardNetworkFee
    method: GET
    data_selector: items
- name: report-reconciliation-details-firstChargeback-dms
  endpoint:
    path: /report/reconciliation/details/firstChargeback-dms
    method: GET
    data_selector: items
- name: report-reconciliation-details-firstChargeback-sms
  endpoint:
    path: /report/reconciliation/details/firstChargeback-sms
    method: GET
    data_selector: items
- name: report-reconciliation-details-secondPresentment-dms
  endpoint:
    path: /report/reconciliation/details/secondPresentment-dms
    method: GET
    data_selector: items
- name: report-reconciliation-details-preArbitration-dms
  endpoint:
    path: /report/reconciliation/details/preArbitration-dms
    method: GET
    data_selector: items
- name: report-reconciliation-details-arbitration-dms
  endpoint:
    path: /report/reconciliation/details/arbitration-dms
    method: GET
    data_selector: items
- name: mc-chargeback-received
  endpoint:
    path: /mc/chargeback/received
    method: GET
    data_selector: value
    params: {}
- name: collaboration-request-received
  endpoint:
    path: /collaboration/request/received
    method: GET
    data_selector: value
    params: {}
- name: mc-prearbitration-received
  endpoint:
    path: /mc/prearbitration/received
    method: GET
    data_selector: value
    params: {}
- name: visa-chargeback-received
  endpoint:
    path: /visa/chargeback/received
    method: GET
    data_selector: value
    params: {}
- name: visa-prearbitration-received
  endpoint:
    path: /visa/prearbitration/received
    method: GET
    data_selector: value
    params: {}
- name: prearbitration-response-received
  endpoint:
    path: /prearbitration/response/received
    method: GET
    data_selector: value
    params: {}
- name: create-event-subscription-dispute-events
  endpoint:
    path: /create/event/subscription/dispute/events
    method: POST
    data_selector: value
    params: {}
- name: fee-request-visa
  endpoint:
    path: /fee/request/visa
    method: POST
    data_selector: value
    params: {}
- name: fees-interchange-estimate-response
  endpoint:
    path: /fees/interchange/estimate/response
    method: GET
    data_selector: value
    params: {}
- name: tiered-fee
  endpoint:
    path: /tiered/fee
    method: GET
    data_selector: value
    params: {}
- name: non-tiered-fee
  endpoint:
    path: /non-tiered/fee
    method: GET
    data_selector: value
    params: {}
- name: create-merchant-simple
  endpoint:
    path: /create/merchant/simple
    method: POST
    data_selector: value
    params: {}
- name: update-merchant-change-address
  endpoint:
    path: /update/merchant/change/address
    method: PUT
    data_selector: value
    params: {}
- name: report-reconciliation-details-firstPresentment-dms
  endpoint:
    path: /report/reconciliation/details/firstPresentment/dms
    method: GET
    data_selector: value
    params: {}
- name: report-reconciliation-details-firstPresentment-sms
  endpoint:
    path: /report/reconciliation/details/firstPresentment/sms
    method: GET
    data_selector: value
    params: {}
- name: network-funds-transfers
  endpoint:
    path: /report-network-funds-transfers
    method: GET
    data_selector: networkFundsTransfers
    params: {}
- name: network-funds-transfer
  endpoint:
    path: /report-network-funds-transfer
    method: GET
    data_selector: value
    params: {}
- name: ReconciliationDetailsRequestByCreated
  endpoint:
    path: /ReconciliationDetailsRequestByCreated
    method: GET
    data_selector: value
    params: {}
- name: ReconciliationDetailsRequestByNftKey
  endpoint:
    path: /ReconciliationDetailsRequestByNftKey
    method: GET
    data_selector: value
    params: {}
- name: InvalidDateRangeError
  endpoint:
    path: /InvalidDateRangeError
    method: GET
    data_selector: value
    params: {}
- name: SchemeFeeDetailsReport
  endpoint:
    path: /SchemeFeeDetailsReport
    method: GET
    data_selector: value
    params: {}
- name: SchemeFeeDetails
  endpoint:
    path: /SchemeFeeDetails
    method: GET
    data_selector: value
    params: {}
- name: CreateEmailDistributionRequest
  endpoint:
    path: /silverflow/distribution/email
    method: POST
    data_selector: value
- name: CreateSftpDistributionRequest
  endpoint:
    path: /silverflow/distribution/sftp
    method: POST
    data_selector: value
- name: CreateAmmfReportRequest
  endpoint:
    path: /silverflow/report/ammf
    method: POST
    data_selector: value
- name: VisaQuarterlySchemeReportRequest
  endpoint:
    path: /silverflow/report/visa-quarterly
    method: POST
    data_selector: value
- name: MastercardQuarterlySchemeReportRequest
  endpoint:
    path: /silverflow/report/mastercard-quarterly
    method: POST
    data_selector: value
notes:
- 'Breaking: Removed deprecated fields from various endpoints.'
- Requires the reports:CreateDisputeHistoryEvents permission.
- Requires the reports:CreateFraudNotifications permission.
- Requires the reports:CreateCharges permission.
- Requires the reports:CreateSchemeFeeDetails permission.
- Response includes various fields related to transaction risk assessment
- The Activation Token can only be used once, so securely store the details returned
  in the response.
- Requires the `threeDs:Create` permission.
- Always use DNS to resolve the IP address.
- Do not address the API using a hard-coded IP address.
- The sandbox environment does not connect to the card networks’ simulators.
- Card network and issuer responses are generated by Silverflow internal components.
- API keys can be created by calling the Create API Key endpoint.
- Bearer tokens are temporary security credentials.
- Idempotency in a REST API ensures that making the same request multiple times has
  the same effect on the server and results in the same response.
- Idempotency keys are stored for 24 hours, so generated idempotency keys should be
  unique within that time frame.
- The request body and the complete URL of retried requests must match precisely with
  the original request.
- If you retry the request while the initial request is still pending, the endpoint
  will return a 503 retriable error.
- If the internal state for idempotent processing becomes unavailable, a 503 retriable
  error will be returned.
- Silverflow uses TLS client certificates for authentication.
- Dynamic IP addresses are used for the notification delivery system.
- Tags are customizable properties that can be assigned to both Merchants and Merchant
  Acceptors.
- Consistent naming conventions and documentation of tag purposes are recommended
  for clarity and consistency.
- Specific card networks mandate merchant screening to ensure that newly onboarded
  merchants or their beneficiaries are not blacklisted.
- Enrollment is generally an asynchronous process.
- Ensure that the information provided in the enrollments for SCOF and VTS is correct,
  as updating information with the card networks is a manual process.
- The Payment Facilitator model is only supported for DMS transactions and not for
  SMS transactions (Funding or Payouts).
- The challenge flow requires setup of technical infrastructure for strong customer
  authentication.
- The issuer usually will be liable for fraud when using exemptions.
- 3DS Method Flow is optional and not all issuers support it.
- The 3DS Method Flow must be finished within 10 seconds.
- Merchants must be enrolled for SCOF and VTS to use the Network Tokenization endpoints.
- Providing CVC data is optional but recommended.
- Charge types indicated with an * are under development.
- The clearAfter property cannot be used when the clearingMode is set to manual in
  the charge request body.
- If the provided timestamp is in the past, it will be replaced by the present date
  and time, which means clearing will start immediately.
- Supports full and partial refunds.
- 'EndPoints depend on clearingMode: auto or manual.'
- Additional fields specific to card-present transactions are required.
- Partial approval functionality allows handling transactions exceeding available
  balance.
- This endpoint requires configuration on a client basis and may be subject to additional
  approvals and implementation with the card schemes.
- Users can receive push notifications on report status updates through our events
  subscriptions.
- Reports may be available in JSON, CSV, and Excel formats.
- The total amounts should directly match the aggregated bank transfers received from
  the card networks.
- The report's unique key can be used to link these amounts to the networkFundsTransferKey
  field in the Reconciliation Details report.
- Silverflow's scheme fee calculations may not match card network invoices one-to-one
  due to discrepancies.
- The `Scheme Fee Details` report returns all possible tiers for a given fee.
- Clients must create an event notification webhook to receive updates on disputes.
- Defending Visa categories 12 and 13 requires specific parameters in requests.
- Uses JWT bearer token for authentication
- The token must be requested from the embedding page
- The client's responsibility to monitor and act upon fraud notifications appropriately.
- Certain card networks require acquirers to monitor the number of fraud notifications.
- Integrating with the card info API can assist in accurate routing.
- Best results are obtained by entering at least the first 12 digits of the card number.
- The endpoint for scheme fees is still under development; it has a limited library
  of scheme fees and will not provide fee estimates for all supported card networks.
- The maximum size for a Document is 10MB and the maximum combined size of all documents
  uploaded for a Dispute is 14.5MB.
- This endpoint requires configuration on a per client basis and may be subject to
  additional approvals and implementation with the card schemes. Contact your Silverflow
  representative before integrating with this endpoint.
- From August 13, only charges created up to 6 months ago can be manually cleared.
- If an attempt to clear a charge older than 6 months is made, this endpoint will
  return an HTTP 409 error with type `/silverflow/problems/charge/too-old`.
- ISO country codes data available in several formats.
- Contains ISO country codes and related information.
- A Bad Request error may hold information about the individual validation errors
  found in the request.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- This change will be effective on August 13 2025.
- This field will be removed on October 11, 2025.
- Must be provided for Mastercard transactions.
- ISO country codes are provided in multiple formats including Alpha-2 and Numeric.
- Some objects like Dispute may return nulls in deeply nested fields
- 'Find more info here: https://www.iso.org/iso-3166-country-codes.html'
- The parameters used for the VisaQuarterlySchemeReport include network, bid, year,
  quarter, and currency.
- The parameters used for the MastercardQuarterlySchemeReport include network, acquirerIdCode,
  year, quarter, and currency.
- The 'problem detail' object relays detailed information about the error that occurred.
- Requires a valid merchant key and customer token.
- Handle rate limits to avoid 'REQUEST_LIMIT_EXCEEDED' errors.
- Requires setup of connected app in api
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: The request was malformed. See the response body for details'
- '401: Authentication information is missing or invalid'
- '403: The authenticated client is forbidden to make the request for the resource
  identified.'
- '429: The number of requests (per minute) has exceeded the configured maximum'
- '404: The requested resource was not found'
- '412: The conditions specified in the HTTP headers of the request were not met.'
- '400: Bad Request'
- '401: Authentication Required'
- '409: Conflict'
- '429: Too Many Requests'
- '500: Internal Server Error'
- 400 Bad Request
- 401 Authentication information is missing or invalid
- 403 The authenticated client is forbidden to make the request for the resource identified.
- 409 Conflict
- 422 The server was unable to process the request.
- 429 The number of requests (per minute) has exceeded the configured maximum
- 500 The server encountered an unexpected condition.
- 503 The server was unable to process the request.
- '401: The supplied security credentials were missing or invalid'
- '403: The authenticated client does not have the required permissions.'
- '429: The number of requests per unit of time has exceeded the configured maximum'
- '500: The server encountered an unexpected condition.'
- '503: The server was unable to process the request.'
- '503: Retryable Error'
- '201: The created charge'
- 429 Too Many Requests
- 500 Internal Server Error
- 404 The requested resource was not found
- 401 Unauthorized
- 408 Provider timeout
- 409 No customer token
- 500 Risk provider unexpected error
- '401: Unauthorized'
- 403 Forbidden
- 429 Rate Limit Exceeded
- 408 Request Timeout
- 422 Unprocessable Entity
- '422: Unprocessable Content'
- 503 The server was unable to process the request. This is a temporary condition.
  Please retry the request.
- 503 Retryable Error
- '403: The authenticated client is does not have the required permissions.'
- '409: The request could not be completed due to a conflict with the current state
  of the resources involved in the request.'
- '422: The server was unable to process the request. This is a temporary condition.
  Please retry the request.'
- '500: The server encountered an unexpected condition. This may or may not be a temporary
  situation.'
- '503: The server was unable to process the request. This is a temporary condition.
  Please retry the request.'
- '201: Risk assessment created'
- '408: Provider timeout'
- '409: No customer token'
- '422: The server was unable to process the request.'
- '500: Risk provider unexpected error'
- '401 Authentication Required: IP restrictions may be in effect.'
- '502: Bad Gateway'
- '503: Service Unavailable'
- '504: Gateway Timeout'
- 409 error with the type /silverflow/problems/idempotency/request-body-mismatch
- 503 retriable error with the type /silverflow/problems/idempotency/request-is-still-being-processed
- 503 retriable error with the type /silverflow/problems/idempotency/temporarily-unavailable
- 412 Precondition Failed when an update operation fails due to a version mismatch.
- '4xx or 5xx response codes: Considered failed delivery.'
- Delivery retries are handled with an incremental back-off algorithm.
- 'AUTHENTICATION_FAILED: Check your credentials or token expiration'
- 'INVALID_REQUEST: Ensure that the request parameters are correct'
- 'Transaction Status Reason Code 1: Card authentication failed'
- 'Transaction Status Reason Code 2: Unknown Device'
- 'Transaction Status Reason Code 3: Unsupported Device'
- 'Transaction Status Reason Code 4: Exceeds authentication frequency limit'
- 'Transaction Status Reason Code 5: Expired card'
- 'Transaction Status Reason Code 6: Invalid card number'
- 'Transaction Status Reason Code 7: Invalid transaction'
- 'Transaction Status Reason Code 8: No Card record'
- 'Transaction Status Reason Code 9: Security failure'
- 'Transaction Status Reason Code 10: Stolen card'
- 'Transaction Status Reason Code 11: Suspected fraud'
- 'Transaction Status Reason Code 12: Transaction not permitted to cardholder'
- 'Transaction Status Reason Code 13: Cardholder not enrolled in service'
- 'Transaction Status Reason Code 14: Transaction timed out at the ACS'
- 'Transaction Status Reason Code 15: Low confidence'
- 'Transaction Status Reason Code 16: Medium confidence'
- 'Transaction Status Reason Code 17: High confidence'
- 'Transaction Status Reason Code 18: Very High confidence'
- 'Transaction Status Reason Code 19: Exceeds ACS maximum challenges'
- 'Transaction Status Reason Code 20: Non-Payment transaction not supported'
- 'Transaction Status Reason Code 21: 3RI transaction not supported'
- 'Transaction Status Reason Code 22: ACS technical issue'
- 'Transaction Status Reason Code 23: Decoupled Authentication required by ACS but
  not requested by 3DS Requestor'
- 'Transaction Status Reason Code 24: 3DS Requestor Decoupled Max Expiry Time exceeded'
- 'Transaction Status Reason Code 25: Decoupled Authentication was provided insufficient
  time to authenticate cardholder. ACS will not make attempt'
- 'Transaction Status Reason Code 26: Authentication attempted but not performed by
  the cardholder'
- If the /charges/{chargeKey}/clear endpoint is never called, the authorization on
  the charge will not be automatically reversed but will expire after several days.
- '409 Conflict: Charge already cleared; use refund endpoint instead.'
- '400'
- '409'
- '403: Forbidden'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Verify permissions'
- '403 Forbidden: Check user access'
- '409 Conflict: Verify charge details'
- '429 Too Many Requests: Rate limit exceeded'
- '500 Internal Server Error: Contact support'
- '503 Service Unavailable: Retry later'
- 'HTTP 409: Conflict - Charge older than 6 months'
- 'HTTP 400: Invalid Input'
- 'HTTP 401: Unauthorized'
- 'HTTP 403: Forbidden'
- 'HTTP 404: Entity Not Found'
- 'HTTP 429: Too Many Requests'
- 'HTTP 500: Internal Server Error'
- 'HTTP 503: Retryable Error'
- '400: InvalidInputError'
- '401: UnauthorizedError'
- '403: ForbiddenError'
- '404: EntityNotFoundError'
- '429: TooManyRequestsError'
- '500: InternalServerError'
- '404: Not Found'
- '404: Report not found'
- '401 Unauthorized: The agent is not authorized to perform this action'
- '404: Report schedule not found'
- '429: Too many requests'
- '400: BadRequestError'
- '404: NotFoundError'
- '409: ConflictError'
- '412: PreconditionFailedError'
- 'Bad Request: The request could not be processed as it contained an invalid request
  entity'
- 'Invalid Offset Token: Invalid Offset Token'
- 'Authentication Required: Recheck OAuth scopes or token expiration'
- 'Too Many Requests: Throttle API calls or reduce frequency'
- 'Internal Server Error: Check server status'
- 'Invalid Request: 400'
- 'Invalid Input: 400'
- 'Referenced Entity Not Found: 409'
- 'Unsupported Card Network: 409'
- 'Unsupported Protocol Version: 422'
- 'Unenrolled Account Number: 422'
- 'Unenrolled Acquirer or Merchant: 422'
- 409 Unauthenticated BEP Entity
- 409 Authorization Result Already Submitted
- '404 Not Found: The requested resource could not be found.'
- '400 Invalid Input: The request was invalid or could not be understood.'
- '401 Authentication Required: Access to the requested resource requires authentication.'
- 'UnauthorizedErrorDetails: Authentication Required'
- 'Idempotency Temporarily Unavailable: 503'
- 'Incompatible Authentication Status: 409'
- 'Unsupported Currency for Bancontact: 409'
- 'Unexpected Sequence: /silverflow/problems/charge/unexpected-sequence: 400'
- 'Missing Network Reference: /silverflow/problems/charge/missing-network-reference:
  409'
- '409: UnexpectedClearingModeError'
- '409: InvalidAmountError'
- '409: UnexpectedRefundStatusError'
- '409: ClearingCurrentZeroAmountError'
- type: https://api.silverflow.co/problem/constraint-violation
  title: Bad Request
  status: 400
  detail: The request could not be processed as it contained an invalid request entity
  instance: https://api.silverflow.co/v1/merchants/mct-1hPdFqhgstYTUhlphPDp
  validationErrors:
  - The value of property 'status' should be one of 'idle', 'active' or 'archived'
  - The value of property 'tags.0.businessId' must not be longer than 255 characters
- type: /silverflow/problems/processorTokens/invalid-processor-token
  title: Invalid Processor Token
  status: 409
  detail: Details about the invalid processor token
  instance: https://api.silverflow.co/v1/processorTokens/invalid
- '400 Bad Request: Check request parameters for correctness'
- '404 Not Found: Verify the resource identifier'
- '500 Internal Server Error: Try the request again later'
- 'Card network mismatch: 400'
- 'Not found: 404'
- 'Invalid date range: 400'
- 'Invalid report name: 400'
- 'Not authorized: 401'
- '409 Conflict: Entity Already Exists'
- '404 Not Found: Report schedule not found'
- 'Invalid Offset Token: Ensure that the offset token is valid.'
- 'Report not found: Verify the report name and parameters.'
- 'BadRequestError: The request was malformed. See the response body for details'
- 'UnauthorizedError: Authentication information is missing or invalid'
- 'ForbiddenError: The authenticated client is forbidden to make the request for the
  resource identified.'
- 'NotFoundError: The requested resource was not found'
- 'TooManyRequestsError: The number of requests (per minute) has exceeded the configured
  maximum'
- 'ConflictError: The request could not be completed due to a conflict with the current
  state of the resources involved in the request.'
- 'PreconditionFailedError: The conditions specified in the HTTP headers of the request
  were not met.'
- 'MethodNotAllowed: The attempted operation/action is not allowed.'
- 'InternalServerError: The server encountered an unexpected condition. This may or
  may not be a temporary situation.'
- 'ServiceUnavailableError: The server was unable to process the request. This is
  a temporary condition. Please retry the request.'
- '401 Unauthorized: Invalid credentials provided.'
- '408 Request timed out: Retry the request after a short delay.'
- 409 No risk provider token found for given agent key.
- 'Length Required: The server refuses to accept the request without a defined Content-Length'
- 'Payload too Large: The server is refused the request because the size of the request
  entity is larger than that defined by the server'
- 'Unsupported Media Type: The server is refusing the request because the entity of
  the request is in a format that is not supported'
- 'Forbidden: Authenticated user is missing the following permission(s): reports:List'
- 'Too Many Requests: You have exceeded the rate limit. Please try again after the
  specified delay.'
- 'Bad Request: The request was malformed. See the response body for details'
- 'Unauthorized: The supplied security credentials were missing or invalid'
- 'Internal Server Error: The server encountered an unexpected condition. This may
  or may not be a temporary situation.'
- 'Service Unavailable: The server was unable to process the request. This is a temporary
  condition. Please retry the request.'
- 'Conflict: The request could not be completed due to a conflict with the current
  state of the resources involved in the request.'
- 'Unprocessable Content: The server was unable to process the request. This is a
  temporary condition. Please retry the request.'
- 'Not Found: The resource identified in the request URL was not found'
- '404 Not Found: The requested entity was not found.'
- '403 Forbidden: Authenticated user ''apk-33GjasQdWl4781OsErvi'' is missing the following
  permission(s): bep:Create.'
- '400 Invalid Input: The request does not adhere to the defined API schema.'
- '409 Referenced Entity Not Found: The referenced acceptor with key ''mac-1eOdAHhgstYTUhlphPFf''
  was not found.'
- '500 Internal Server Error: The server encountered an unexpected condition.'
- '400 Invalid Request: When ''type.order'' is ''recurring'', both ''recurringExpiry''
  and ''recurringFrequency'' need to be set.'
- 'Invalid Charge Request: Cannot create the charge due to one or more errors in the
  charge request.'
- 'Referenced Entity Not Found: The referenced acceptor with key ''mac-1eOdAHhgstYTUhlphPFf''
  was not found.'
- 'Cannot Determine Card Network By Card Number: Could not determine a card network
  for the provided `cardNumber`.'
- 'Incompatible Card Network: The provided card number is not compatible with the
  merchant acceptor, expected card number to be of network ''visa''.'
- 'Blocked Merchant Acceptor: The merchant acceptor with key ''mac-1eOdAHhgstYTUhlphPFf''
  is blocked from creating charges.'
- 'Blocked BIN: This BIN is not permitted to submit charges.'
- 'Idempotent Request Body Mismatch: The retried request does not have the same body
  or URL as the initial request.'
- 'Idempotent Request Mismatch: The retried request does not have the same body or
  URL as the initial request.'
- 'Unexpected Message System: The merchant acceptor uses a BIN with message system
  ''SMS'', expected ''DMS''.'
- '409 Incompatible Network For Operation: Operation ''reverse'' is not supported
  for network ''bancontact'''
- '409 Incompatible Card: The country code of both the merchant and the card is ''NLD'',
  but the card is a cross-border-only card.'
- '409 Request Is Still Being Processed: The previous request with idempotency key
  ''28gKCluIEKp8jVboUyr2'' is still being processed. Please retry.'
- '409 Unexpected Currency: Bin ''bin-1iXRhbDjrT2Yxvo0mSZN'' only supports currency
  ''EUR'', but the charge request provides ''USD'' as ''amount.currency''.'
- '503 Request Is Still Being Processed: The previous request with idempotency key
  ''28gKCluIEKp8jVboUyr2'' is still being processed. Please retry.'
- '503 Idempotency Temporarily Unavailable: Idempotent request handling is temporarily
  unavailable. Please retry later or without an idempotency key.'
- '409 Incompatible Authentication Status: Authentication status ''non-authenticated''
  is not supported for this operation.'
- '409 Incompatible Merchant Category Code: The merchant acceptor with key ''mac-g4EaiVHfd2qwAVuS6Gv''
  has MCC ''8398'', but expected ''7995''.'
- '409 Missing Point of Sale Address: The merchant acceptor with key ''mac-34EaiVHSeqwAVuS6Gvd''
  is missing ''pointOfSaleAddress''.'
- '400 Unexpected Sequence: The initial charge with key ''chg-4R5t0h2Z1ll7tV5AMAS4''
  was expected to have a ''type.sequence'' of ''initial''. To have that, it needs
  to have a ''type.order'' of ''ucof'', ''recurring'', ''installment'', or ''standing-order''.'
- '409 Missing Network Reference in Initial Charge: The initial charge with key ''chg-1e8gKCluVboUyr2''
  is missing a network reference.'
- 'Bad Request: The request was malformed. See the response body for details.'
- 'Invalid Processor Token: Could not determine a card network for the card number.'
- type: /silverflow/problems/report/invalid-date-range
  title: Invalid date range
  status: 400
  detail: 'Invalid date range: 2019-08-25T14:15:22Z - 2019-08-24T14:15:22Z'
- 'Input Validation Error: The request does not adhere to the defined API schema.'
- 'Distribution Not Found Error: The distribution dst-1e1dAHhgstYTUhlphPzZ is not
  found'
- 'Archived Distribution Error: The specified operation cannot be done on given distribution,
  as it is archived'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - FraudioRequest
  - FraudioCustomer
  - CybersourceCustomer
client:
  base_url: https://eu-west-1.api.silverflow.com/v1
  auth:
    type: ApiKey
    location: header
    header_name: Authorization
source_metadata: null
