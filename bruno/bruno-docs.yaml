resources:
- name: sendRequest
  endpoint:
    path: /sendRequest
    method: POST
    data_selector: response.data
    params: {}
- name: request
  endpoint:
    path: /send-requests/REST/rest-api
    method: GET
    data_selector: response
- name: graphql_request
  endpoint:
    path: /send-requests/graphql/graphql-api
    method: POST
    data_selector: data
- name: soap_request
  endpoint:
    path: /send-requests/soap/soap-request
    method: HTTP
- name: repository
  endpoint:
    path: /projects
    method: POST
    data_selector: project
    params:
      required_fields:
      - Project name
      - Description
      - Visibility level
- name: repository
  endpoint:
    path: /repositories
    method: POST
- name: script_flow
  endpoint:
    path: /testing/script/script-flow
    method: GET
    data_selector: flow_types
- name: module_whitelist
  endpoint:
    path: /bruno.json
    method: GET
    data_selector: scripts.moduleWhitelist
- name: runner-request
  endpoint:
    path: /api/users
    method: POST
    data_selector: data
- name: user
  endpoint:
    path: /users/usebruno
    method: GET
- name: send_message
  endpoint:
    path: /send
    method: POST
    data_selector: body
- name: login
  endpoint:
    path: /login
    method: POST
    data_selector: body
- name: users
  endpoint:
    path: https://api.github.com/users/usebruno
    method: GET
    data_selector: user
    params: {}
- name: OpenAPI YAML
  endpoint:
    path: path/to/bruno-collection.json
    method: GET
    data_selector: brunoCollection
- name: OpenAPI JSON
  endpoint:
    path: path/to/openapi-spec.json
    method: GET
    data_selector: brunoCollection
- name: visualization
  endpoint:
    path: /visualization
    method: POST
    data_selector: visualizations
    params: {}
- name: echo_request
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: Data Request
  endpoint:
    path: '{{base-url}}'
    method: POST
- name: News Articles
  endpoint:
    path: https://newsapi.org/v2/everything?q=tesla&from=2025-03-22&sortBy=publishedAt
    method: GET
- name: env-secret
  endpoint:
    path: '{{base-url}}'
    method: POST
- name: echo-test
  endpoint:
    path: '{{base-url}}'
    method: POST
notes:
- Bruno offers powerful scripting capabilities that allow you to extend and automate
  your API testing workflows.
- API collections should be co-located within your source code repository
- Bruno is an opensource project
- Starting with Bruno v1.40.0 you can now use special characters in collection names
  and customize how they appear in the filesystem.
- Bruno automatically handles filesystem compatibility by replacing unsupported characters
  with - in the filenames while preserving your original collection name.
- Starting with Bruno v1.40.0, you can now use special characters in folder names
  and customize how they appear in the filesystem.
- Starting with Bruno v1.40.0, you can use special characters in request names.
- Bruno uses the Chai library for writing assertions in tests.
- Bruno supports writing automation test scripts in JavaScript for more advanced API
  testing scenarios.
- Data-driven testing by using a .CSV file is available in our Golden and Ultimate
  Edition
- By default, the Proxy setting is Off in Bruno.
- Secret management integration is available in Bruno Ultimate Edition.
- By default, Proxy is set to off.
- If your machine sits behind a corporate network or firewall, you may need to configure
  the proxy settings in Bruno.
- The History feature automatically tracks the actions and requests made within your
  collections.
- JavaScript code is executed in a secure sandbox and cannot access your filesystem
  or execute system commands.
- Developer Mode can be dangerous and should only be used when you fully understand
  the implications.
- Stateless nature makes REST APIs easier to maintain and scale.
- The default method for working with GraphQL APIs is POST.
- Bruno enables you to make HTTP calls using Simple Object Access Protocol (SOAP),
  a messaging protocol used for exchanging structured information between systems
  over a network.
- Bruno helps you inspect, debug, and troubleshoot APIs
- Allows you to download the response data as an HTML document
- You can manage cookies programmatically using the JavaScript API.
- Runtime variables get the highest precedence.
- Process Environment Variables are accessed using the {{process.env.VAR_NAME}} syntax.
- Global environment variables can be used across all collections and requests.
- These variables can be combined with other variables and used throughout your workspace,
  making them ideal for consistent value sharing.
- Runtime variables are ephemeral and scoped within a collection.
- Process environment variables are used to store sensitive information, such as API
  keys, passwords, and other secret values.
- You must create the `.env` file in your local project directory to store your process
  environment variables.
- Git must be installed on your machine to use this feature.
- Requires setup of connected app in GitHub for authentication
- Use SSH keys for authentication to avoid entering password on every operation.
- Bruno version 1.40.0 or above is required to use this feature.
- Bruno version 2.3.0 or above is required to import OpenAPI specifications.
- Bruno supports writing automation test scripts in JavaScript for your API requests
  to assert its behaviour.
- Assertions allow you to declaratively write tests.
- If the flow property is not specified, Sandwich is used by default.
- CommonJS syntax `require` for importing libraries is supported.
- ES Modules `import/export` are not supported at this time.
- Some objects like Contact may return nulls in deeply nested fields
- Integrate your test collections into a CI/CD pipeline
- Feature requires Bruno version 2.8.0 or higher.
- Supports both CSV and JSON data files
- Data is automatically loaded from the attached file at the start of each iteration
- Always add the .env file to your .gitignore file to ensure secrets are not accidentally
  pushed to version control.
- Bruno stores secrets on your local machine.
- Secrets are encrypted using OS level encryption when available or falls back to
  AES256 encryption.
- OAuth2 authentication can be implemented in various ways, depending on the collection
  structure and specific requirements.
- 'Bruno allows you to configure OAuth2 authentication at multiple levels: collection,
  folder, and request.'
- 'Bruno Support all formats: It can handle any callback URL format that your OAuth2
  provider allows'
- 'No actual redirection: Bruno never actually navigates to the callback URL'
- Integrate Bruno with your secret manager to store values in a single location
- With Digest auth, the client sends a first request to the API, and the server responds
  back with details.
- Bruno supports adding custom Client Authorization (CA) and client certificates to
  your requests if required by the API you are working with.
- Navigate to the Preferences menu in Bruno and select Use Custom CA Certificate,
  then upload the selected file.
- You can add and manage client certificate(s) on any Collection by going to the Collection
  Settings menu and selecting Client Certificates.
- Bruno supports importing OpenAPI Specification (OAS) V3 files only.
- Bruno CLI provides a variety of command options to help you customize your API testing
  and execution process.
- Bruno CLI allows you to run your API collections with ease, either by directly executing
  requests or using external data sources.
- This feature requires Bruno CLI version 1.35.0 or higher.
- 'Bruno CLI provides built-in support for generating reports in three formats: JSON,
  JUnit, and HTML.'
- Bruno CLI integrates seamlessly with GitHub Actions to automate API testing workflows.
- Ensure your Bruno collections and environment files are properly organized within
  your Git repository.
- Crucially, ensure the checkbox 'Provide Node & npm folder to PATH' is checked.
- Any key in the dictionary block can be prefixed with `~` to indicate that it is
  disabled.
- Environment conversion successful!
- Conversion successful!
- Last updated on June 23, 2025
- Full conversion pipeline successful!
- You must be on Bruno v.1.35.0 or higher to activate a license after December 1,
  2024
- When your response data contains BigInt, the parsed value may become corrupted because
  Bruno parses the response data by default, which can lead to a loss of fidelity.
- 'To prevent automatic parsing and work directly with the raw response data, add
  the expression to the pre-request script: req.disableParsingResponseJson();'
- Supports various visualization types including table and HTML.
- Utilizes providers like ag-grid and react-table for rendering.
- Bruno CLI is installed successfully
- You navigate to your collection directory
- Collection runs successfully via CLI
- You can see the results of the execution
- Bruno offers a fast, Git-friendly approach to API development.
errors:
- '100: Informational'
- '200: Successful'
- '300: Redirection'
- '400: Client Error'
- '500: Server Error'
- Error during OpenAPI JSON conversion
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Token ID
client:
  base_url: https://echo.usebruno.com
source_metadata: null
