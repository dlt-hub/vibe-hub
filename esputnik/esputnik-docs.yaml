resources:
- name: event
  endpoint:
    path: /event
    method: POST
    data_selector: eventHistory
    params: {}
- name: account_info
  endpoint:
    path: /account/info
    method: GET
    data_selector: results
- name: remove_unsubscribed
  endpoint:
    path: /emails/unsubscribed/delete
    method: POST
    data_selector: results
- name: subscribe_contact
  endpoint:
    path: /subscribecontact-1
    method: POST
    data_selector: results
- name: add_update_contacts
  endpoint:
    path: /contactsbulkupdate-1
    method: POST
    data_selector: results
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params: {}
- name: campaigns
  endpoint:
    path: /api/campaigns
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: contacts
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: event
- name: workflows
  endpoint:
    path: /api/workflows
    method: GET
    data_selector: workflows
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
- name: email
  endpoint:
    path: /messages/messages/email
    method: GET
    data_selector: credit_assignment
- name: mob_push
  endpoint:
    path: /messages/messages/mob_push
    method: GET
    data_selector: credit_assignment
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: data
    params: {}
- name: tags
  endpoint:
    path: /api/tags
    method: GET
    data_selector: data
    params: {}
- name: promocodes
  endpoint:
    path: /api/promocodes
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /messages/email
    method: POST
    data_selector: results
- name: historical_event_data
  endpoint:
    path: /reference/getting-started-with-your-api
    method: POST
    data_selector: data
    params: {}
- name: add_contact
  endpoint:
    path: /docs/adding-new-users
    method: POST
    data_selector: data
    params: {}
- name: mobile_token_base
  endpoint:
    path: /docs/uploading-mobile-token-base
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
    data_selector: data
    params: {}
- name: add_contact
  endpoint:
    path: /reference/addcontact-1
    method: POST
    data_selector: channels
- name: Add Contacts
  endpoint:
    path: /reference/contactsbulkupdate-1
    method: POST
    data_selector: contacts
    params:
      dedupeOn: externalCustomerId
- name: generate_past_events
  endpoint:
    path: /api/generate_past_events
    method: POST
    data_selector: events
    params: {}
- name: delete_history_events
  endpoint:
    path: /api/removehistoryevents
    method: DELETE
    data_selector: response
    params: {}
- name: contact_information
  endpoint:
    path: /contacts/information
    method: GET
- name: contact_activity
  endpoint:
    path: /contacts/activity
    method: GET
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: contacts
- name: contact
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: contacts
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: contacts
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: additional_fields
  endpoint:
    path: /docs/api-1
    method: GET
    data_selector: records
    params: {}
- name: contacts_export
  endpoint:
    path: /contacts/export
    method: GET
    data_selector: exported_contacts
- name: segments_export
  endpoint:
    path: /contacts/segments/export
    method: GET
    data_selector: exported_segments
- name: reports_export
  endpoint:
    path: /reports/export
    method: GET
    data_selector: exported_reports
- name: customer_identification
  endpoint:
    path: /docs/identification
    method: GET
    data_selector: customer_ids
    params: {}
- name: customer_matching
  endpoint:
    path: /docs/matching-process
    method: GET
    data_selector: matching_process
    params: {}
- name: contact
  endpoint:
    path: /reference/addcontact-1
    method: POST
    data_selector: records
    params: {}
- name: subscribe_contact
  endpoint:
    path: /reference/subscribecontact-1
    method: POST
    data_selector: records
    params: {}
- name: get_contact
  endpoint:
    path: /reference/getcontact-1
    method: GET
    data_selector: records
    params: {}
- name: update_contact
  endpoint:
    path: /reference/updatecontact-1
    method: PUT
    data_selector: records
    params: {}
- name: contact
  endpoint:
    path: /api/v1/contact
    method: POST
    data_selector: contacts
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: POST
    data_selector: contacts
    params:
      dedupeOn: externalCustomerId
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: Contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
- name: integrated_form
  endpoint:
    path: /integrated/forms
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: contact_import
  endpoint:
    path: /docs/import-faylu-z-danimi
    method: POST
    data_selector: contacts
    params: {}
- name: user_profile_data
  endpoint:
    path: /upload/user-profile-data
    method: POST
    data_selector: results
- name: contact_upload
  endpoint:
    path: /contacts/import
    method: POST
    data_selector: result
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
- name: campaigns
  endpoint:
    path: /api/campaigns
    method: GET
    data_selector: data
- name: digital_signature_configuration
  endpoint:
    path: /docs/setting-up-email-domain-authentication
    method: GET
    data_selector: records
    params: {}
- name: Spam Rate
  endpoint:
    path: /spam-rate
    method: GET
    data_selector: spamRate
- name: IP Reputation
  endpoint:
    path: /ip-reputation
    method: GET
    data_selector: ipReputation
- name: Domain Reputation
  endpoint:
    path: /domain-reputation
    method: GET
    data_selector: domainReputation
- name: Spam Feedback Loop
  endpoint:
    path: /spam-feedback-loop
    method: GET
    data_selector: spamFeedbackLoop
- name: Authentication Traffic
  endpoint:
    path: /authentication-traffic
    method: GET
    data_selector: authenticationTraffic
- name: Encrypted Traffic
  endpoint:
    path: /encrypted-traffic
    method: GET
    data_selector: encryptedTraffic
- name: Delivery Errors
  endpoint:
    path: /delivery-errors
    method: GET
    data_selector: deliveryErrors
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params: {}
- name: campaigns
  endpoint:
    path: /api/campaigns
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: records
- name: campaigns
  endpoint:
    path: /api/campaigns
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: timer
  endpoint:
    path: /api/timer
    method: POST
    data_selector: settings
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Products
  endpoint:
    path: /docs/product-blocks
    method: GET
    data_selector: blocks
    params: {}
- name: mobile_push_notification
  endpoint:
    path: /docs/creating-mobile-push-message
    method: GET
    data_selector: notifications
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: campaigns
  endpoint:
    path: /api/v1/campaigns
    method: GET
    data_selector: data
    params: {}
- name: Firebase Cloud Messaging
  endpoint:
    path: /services/fcm
    method: POST
    data_selector: notifications
    params: {}
- name: Apple Push Notification Service
  endpoint:
    path: /services/apn
    method: POST
    data_selector: notifications
    params: {}
- name: Update interaction status
  endpoint:
    path: /reference/registerinteractionstatus-1
    method: PUT
    data_selector: null
    params: {}
- name: campaign
  endpoint:
    path: /api/campaigns
    method: POST
    data_selector: campaigns
    params: {}
- name: product_recommendations
  endpoint:
    path: /api/v1/recommendations
    method: POST
    data_selector: recommendations
    params: {}
- name: generate_suggestions
  endpoint:
    path: /docs/api-1/generate-suggestions
    method: POST
    data_selector: suggestions
    params:
      max_suggestions: 20
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
- name: campaigns
  endpoint:
    path: /api/campaigns
    method: GET
    data_selector: data
- name: auth_token
  endpoint:
    path: /v1/auth/contact/token
    method: POST
    data_selector: token
    params: {}
- name: get_auth_token
  endpoint:
    path: /v1/auth/contact/token
    method: POST
    data_selector: token
- name: get_unread_messages_count
  endpoint:
    path: /appinbox/v1/messages/count
    method: GET
    data_selector: count
- name: get_all_app_inbox_messages
  endpoint:
    path: /appinbox/v1/messages
    method: GET
    data_selector: messages
- name: get_changed_status_messages
  endpoint:
    path: /appinbox/v1/messages/status
    method: POST
- name: App Inbox Messages
  endpoint:
    path: /webhook
    method: POST
    data_selector: messages
    params:
      max_messages: 1000
- name: In-App Message
  endpoint:
    path: /docs/creating-in-app-message
    method: GET
- name: Mobile Push Notification
  endpoint:
    path: /docs/creating-mobile-push-message
    method: GET
- name: Mobile Push Analytics
  endpoint:
    path: /docs/campaign-analytics
    method: GET
- name: In-App Campaigns
  endpoint:
    path: /docs/creating-in-app-message
    method: GET
    data_selector: records
    params: {}
- name: Triggering Rules
  endpoint:
    path: /docs/creating-dynamic-segment
    method: GET
    data_selector: records
    params: {}
- name: Mobile Push
  endpoint:
    path: /docs/linking-in-app-with-mobile-push
    method: GET
    data_selector: records
    params: {}
- name: campaign
  endpoint:
    path: /campaigns
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: push_notification_opt_in
  endpoint:
    path: /docs/in-app/push-notification-opt-in
    method: GET
    data_selector: records
    params: {}
- name: feature_highlighting
  endpoint:
    path: /docs/in-app/feature-highlighting
    method: GET
    data_selector: records
    params: {}
- name: exclusive_discount
  endpoint:
    path: /docs/in-app/exclusive-discount
    method: GET
    data_selector: records
    params: {}
- name: product_of_the_day
  endpoint:
    path: /docs/in-app/product-of-the-day
    method: GET
    data_selector: records
    params: {}
- name: social_sharing
  endpoint:
    path: /docs/in-app/social-sharing
    method: GET
    data_selector: records
    params: {}
- name: new_feature_announcement
  endpoint:
    path: /docs/in-app/new-feature-announcement
    method: GET
    data_selector: records
    params: {}
- name: trial_expiration_notification
  endpoint:
    path: /docs/in-app/trial-expiration-notification
    method: GET
    data_selector: records
    params: {}
- name: web_push_id
  endpoint:
    path: /api/v1/web_push_id
    method: POST
    data_selector: webPushId
    params: {}
- name: certificate_request
  endpoint:
    path: /api/v1/certificate_request
    method: POST
    data_selector: certificateRequest
    params: {}
- name: push_notification
  endpoint:
    path: /api/v1/send_push
    method: POST
    data_selector: pushNotification
    params: {}
- name: push_subscription_data
  endpoint:
    path: /webpush/subscription
    method: POST
    data_selector: subscriptionData
    params: {}
- name: event_transfer
  endpoint:
    path: /api/event_transfer
    method: POST
    data_selector: event
    params: {}
- name: push_notification
  endpoint:
    path: /api/push_notification
    method: POST
    data_selector: notification
    params: {}
- name: sender_name_creation
  endpoint:
    path: /viber/sender_name_creation
    method: POST
    data_selector: data
    params: {}
- name: existing_sender_adding
  endpoint:
    path: /viber/existing_sender_adding
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: records
- name: campaigns
  endpoint:
    path: /api/campaigns
    method: GET
    data_selector: records
- name: viber_campaign
  endpoint:
    path: /viber-messages-creation
    method: POST
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: campaigns
  endpoint:
    path: /api/v1/campaigns
    method: GET
    data_selector: data
    params: {}
- name: GMS Hyber
  endpoint:
    path: /api/v1/gms_hyber
    method: POST
    data_selector: data
    params:
      sender_name: Sender name
      login: Login
      password: Password
      url: URL
      timeout: Timeout
- name: Infobip
  endpoint:
    path: /api/v1/infobip
    method: POST
    data_selector: data
    params:
      sender_name: Sender name
      login: Login
      password: Password
      alpha_name: Alpha-name
- name: TurboSMS
  endpoint:
    path: /api/v1/turbosms
    method: POST
    data_selector: data
    params:
      sender_name: Sender name
      authorization_token: Authorization token
- name: Kyivstar
  endpoint:
    path: /api/v1/kyivstar
    method: POST
    data_selector: data
    params:
      sender_name: Sender name
      client_id: Client ID
      client_secret: Client Secret
- name: Omnicell
  endpoint:
    path: /api/v1/omnicell
    method: POST
    data_selector: data
    params:
      sender_name: Sender name
      login: Login
      password: Password
- name: Textlocal
  endpoint:
    path: /api/v1/textlocal
    method: POST
    data_selector: data
    params:
      sender_name: Sender name
      api_key: API key
- name: Acemount Media
  endpoint:
    path: /api/v1/acemount_media
    method: POST
    data_selector: data
    params:
      sender_name: Sender name
      api_key: API key
- name: Twilio
  endpoint:
    path: /api/v1/twilio
    method: POST
    data_selector: data
    params:
      sender_name: Sender name
      account_sid: Account SID
      authorization_token: Authorization token
- name: SMSBAT
  endpoint:
    path: /api/v1/smsbat
    method: POST
    data_selector: data
    params:
      sender_name: Sender name
      login: Login
      password: Password
      timeout: Timeout
- name: Streamtools
  endpoint:
    path: /api/v1/streamtools
    method: POST
    data_selector: data
    params:
      sender_name: Sender name
      login: Login
      password: Password
- name: Vodafone
  endpoint:
    path: /api/v1/vodafone
    method: POST
    data_selector: data
    params:
      sender_name: Sender name
      login: Login
      password: Password
      distribution_id: Distribution ID
- name: Intel Telecom
  endpoint:
    path: /api/v1/intel_telecom
    method: POST
    data_selector: data
    params:
      sender_name: Sender name
      user_name: User name
      api_key: API key
- name: PROCONTEXT
  endpoint:
    path: /api/v1/procontext
    method: POST
    data_selector: data
    params:
      alias: Alias
      partner_id: Partner’s ID
      password: Password
- name: Decision Telecom
  endpoint:
    path: /api/v1/decision_telecom
    method: POST
    data_selector: data
    params:
      sender_name: Sender name
      authorization_token: Authorization token
      alpha_name: Alpha-name
- name: AlphaSMS
  endpoint:
    path: /api/v1/alphasms
    method: POST
    data_selector: data
    params:
      sender_name: Sender name
      api_key: API key
- name: widget_creation
  endpoint:
    path: /widgets/create
    method: POST
    data_selector: widget
    params: {}
- name: widget_placement
  endpoint:
    path: /widgets/placement
    method: POST
    data_selector: placement
    params: {}
- name: contact
  endpoint:
    path: /storing-data-from-widgets-to-contact-fields
    method: POST
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: eventData
- name: ab_tests
  endpoint:
    path: /api/ab_tests
    method: GET
    data_selector: tests
    params: {}
- name: contact
  endpoint:
    path: /api/v1/contacts
    method: POST
    data_selector: params
    params: {}
- name: Telegram Campaign Report
  endpoint:
    path: /docs/telegram-campaign-report
- name: Integrating with Telegram Bot
  endpoint:
    path: /docs/integrating-with-telegram-bot
- name: Creating Telegram Message
  endpoint:
    path: /docs/creating-telegram-message
- name: Muting or Unmuting Telegram Notifications for Users
  endpoint:
    path: /docs/muting-or-unmuting-telegram-notifications-for-users
- name: product_recommendation
  endpoint:
    path: /api/recommendations
    method: POST
    data_selector: recommendations
    params: {}
- name: telegram_bot
  endpoint:
    path: /integrating-with-telegram-bot
    method: GET
- name: add_application_tokens
  endpoint:
    path: /v1/apps/{app_uuid}/tokens
    method: POST
    data_selector: tokens
    params: {}
- name: add_update_contact
  endpoint:
    path: /reference/addcontact-1
    method: POST
    data_selector: contact
    params: {}
- name: bulk_update_contacts
  endpoint:
    path: /reference/contactsbulkupdate-1
    method: POST
    data_selector: contacts
    params: {}
- name: telegram_message
  endpoint:
    path: /telegram/message
    method: POST
    data_selector: data
    params: {}
- name: mute_notifications
  endpoint:
    path: /v1/apps/{app_uuid}/token/mute
    method: POST
    data_selector: null
    params:
      token: string
      duration: long
- name: unmute_notifications
  endpoint:
    path: /v1/apps/{app_uuid}/token/unmute
    method: POST
    data_selector: null
    params:
      token: string
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
    data_selector: records
- name: dynamic_segment
  endpoint:
    path: /api/segments
    method: POST
    data_selector: segment
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user_events
  endpoint:
    path: /api/user/events
    method: GET
    data_selector: events
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
- name: campaign
  endpoint:
    path: /api/campaigns
    method: GET
    data_selector: data
    params: {}
- name: workflow
  endpoint:
    path: /api/workflows
    method: GET
    data_selector: workflows
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: task
  endpoint:
    path: /api/tasks
    method: GET
    data_selector: tasks
    params: {}
- name: campaigns
  endpoint:
    path: /api/campaigns
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: records
    params: {}
- name: Check Event
  endpoint:
    path: /check/event
    method: GET
    data_selector: parameters
- name: Check Parameter by Date/Time
  endpoint:
    path: /check/parameter/by/datetime
    method: GET
    data_selector: parameters
- name: Check the Checkbox List Fields
  endpoint:
    path: /check/checkbox/list/fields
    method: GET
    data_selector: parameters
- name: Check Values
  endpoint:
    path: /check/values
    method: GET
    data_selector: parameters
- name: Contact Confirmed
  endpoint:
    path: /contact/confirmed
    method: GET
    data_selector: parameters
- name: Contact Exists
  endpoint:
    path: /contact/exists
    method: GET
    data_selector: parameters
- name: Variable Matches Regular Expression
  endpoint:
    path: /variable/matches/regex
    method: GET
    data_selector: parameters
- name: Verify Contact Field Matches Event Parameter
  endpoint:
    path: /verify/contact/field/matches/event/parameter
    method: GET
    data_selector: parameters
- name: Message Block Parameters
  endpoint:
    path: /docs/message-blocks
    method: GET
    data_selector: parameters
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: campaigns
  endpoint:
    path: /api/v1/campaigns
    method: GET
    data_selector: data
    params: {}
- name: Update custom fields
  endpoint:
    path: /docs/custom-user-fields
    method: GET
    data_selector: fields
    params: {}
- name: Add to segment
  endpoint:
    path: /docs/add-to-segment
    method: POST
    data_selector: segment
    params: {}
- name: Remove from segment
  endpoint:
    path: /docs/remove-from-segment
    method: DELETE
    data_selector: segment
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params: {}
- name: Branch
  endpoint:
    path: /docs/using-branch-block
    method: GET
- name: Condition
  endpoint:
    path: /docs/popular-bloks#condition
    method: GET
- name: Split
  endpoint:
    path: /docs/split
    method: GET
- name: Sent?
  endpoint:
    path: /docs/sent
    method: GET
- name: Delivered?
  endpoint:
    path: /docs/delivered
    method: GET
- name: Opened?
  endpoint:
    path: /docs/opened
    method: GET
- name: Clicked?
  endpoint:
    path: /docs/clicked
    method: GET
- name: Included in Segment?
  endpoint:
    path: /docs/included-in-segment
    method: GET
- name: Current Day/Time
  endpoint:
    path: /docs/current-day-time
    method: GET
- name: webhook
  endpoint:
    path: /docs/webhooks-in-workflows
    method: GET
    data_selector: webhook
    params: {}
- name: sprayer
  endpoint:
    path: /docs/sprayer
    method: GET
    data_selector: sprayer
    params: {}
- name: check_point
  endpoint:
    path: /docs/popular-bloks#check-point
    method: GET
    data_selector: check_point
    params: {}
- name: Timer
  endpoint:
    path: /docs/timer
    method: GET
    data_selector: parameters
    params: {}
- name: Start on Date
  endpoint:
    path: /docs/start-on-date
    method: GET
    data_selector: parameters
    params: {}
- name: workflow_launch
  endpoint:
    path: /api/workflows/launches
    method: GET
    data_selector: launches
    params: {}
- name: crmWebhook
  endpoint:
    path: ''
    method: GET
    data_selector: ''
    params: {}
- name: crmWebhook
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: subscribe_contact
  endpoint:
    path: /reference/subscribecontact-1
    method: POST
    data_selector: events
    params: {}
- name: subscribe
  endpoint:
    path: /reference/api-methods-for-adding-contacts#subscribe-contact
    method: POST
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: subscribe_contact
  endpoint:
    path: /reference/subscribecontact-1
    method: POST
    data_selector: records
    params: {}
- name: dynamic_segment
  endpoint:
    path: /docs/creating-dynamic-segment
    method: GET
    data_selector: ''
    params: {}
- name: automated_reactivation_campaign
  endpoint:
    path: /docs/launching-automated-reactivation-campaign
    method: GET
    data_selector: ''
    params: {}
- name: customer_reactivation
  endpoint:
    path: /customer/reactivation
    method: POST
- name: campaigns
  endpoint:
    path: /api/campaigns
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: order
  endpoint:
    path: /reference/ordersbulkinsert-1
    method: POST
    data_selector: order_data
    params: {}
- name: generate_event
  endpoint:
    path: /reference/registerevent_2
    method: POST
    data_selector: event_data
    params: {}
- name: add_orders
  endpoint:
    path: /addOrders
    method: POST
- name: orders
  endpoint:
    path: /reference/ordersbulkinsert-1
    method: POST
    data_selector: orders
    params: {}
- name: abandoned_browse_email
  endpoint:
    path: /messages/create
    method: POST
    data_selector: email
    params: {}
- name: segment_creation
  endpoint:
    path: /contacts/segments/create
    method: POST
    data_selector: segment
    params: {}
- name: workflow_creation
  endpoint:
    path: /automation/workflows/create
    method: POST
    data_selector: workflow
    params: {}
- name: abandoned_cart_email
  endpoint:
    path: /api/abandoned_cart/email
    method: POST
    data_selector: email_data
    params: {}
- name: segment_creation
  endpoint:
    path: /api/segments/create
    method: POST
    data_selector: segment_data
    params: {}
- name: workflow_creation
  endpoint:
    path: /api/workflows/create
    method: POST
    data_selector: workflow_data
    params: {}
- name: survey
  endpoint:
    path: /api/survey
    method: POST
    data_selector: response
    params: {}
- name: event
  endpoint:
    path: /api/event
    method: POST
    data_selector: event_response
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
    params: {}
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
    data_selector: records
    params: {}
- name: preprocessor
  endpoint:
    path: /docs/using-preprocessor
    method: GET
    data_selector: data
    params: {}
- name: Add orders
  endpoint:
    path: /reference/ordersbulkinsert-1
    method: POST
    data_selector: orders
- name: Generate event
  endpoint:
    path: /reference/registerevent_2
    method: POST
    data_selector: event
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params: {}
- name: promocodes
  endpoint:
    path: /promo-codes
    method: GET
- name: promo_codes
  endpoint:
    path: /promo-codes
    method: POST
    data_selector: promo_codes
    params: {}
- name: promo_code
  endpoint:
    path: /promo-codes
    method: GET
    data_selector: records
    params: {}
- name: generate_event
  endpoint:
    path: /reference/registerevent_2
    method: POST
    data_selector: params
- name: send_prepared_message
  endpoint:
    path: /api/v1/message/{id}/smartsend
    method: POST
    data_selector: recipients
- name: promo_code
  endpoint:
    path: /promocode
    method: POST
    data_selector: result
    params: {}
- name: promo_codes_upload
  endpoint:
    path: /reference/getpromocodes-1
    method: POST
    data_selector: promo_codes
    params: {}
- name: promo_codes_insert
  endpoint:
    path: /reference/insertpromocodes_1
    method: POST
    data_selector: promo_codes
    params: {}
- name: promo_code
  endpoint:
    path: /promo-code/sent-via-preprocessor
    method: POST
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: records
- name: campaigns
  endpoint:
    path: /campaigns/reports
    method: GET
    data_selector: reports
    params: {}
- name: single_reports
  endpoint:
    path: /campaigns/single-reports
    method: GET
    data_selector: single_reports
    params: {}
- name: campaign_reports
  endpoint:
    path: /campaigns/reports
    method: GET
    data_selector: reports
    params: {}
- name: campaign_report
  endpoint:
    path: /docs/campaign-analytics-1
    method: GET
    data_selector: reports
    params: {}
- name: campaign_report
  endpoint:
    path: /campaigns/report
    method: GET
    data_selector: data
    params: {}
- name: app_inbox_campaign_report
  endpoint:
    path: /app/inbox/campaign/report
    method: GET
    data_selector: data
    params: {}
- name: telegram_campaign_report
  endpoint:
    path: /telegram/campaign/report
    method: GET
- name: widget_interactions
  endpoint:
    path: /site/widgets
    method: GET
    data_selector: widget_stats
    params: {}
- name: widget_report
  endpoint:
    path: /api/v1/widget/report
    method: GET
    data_selector: data
    params: {}
- name: utm_tags
  endpoint:
    path: /docs/setting-up-utm-tags
    method: GET
    data_selector: utm_tags_data
    params: {}
- name: contact_reports
  endpoint:
    path: /contact-reports
    method: GET
- name: segment_tracking
  endpoint:
    path: /contacts/analytics
    method: GET
    data_selector: segments
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: campaigns
  endpoint:
    path: /api/v1/campaigns
    method: GET
    data_selector: data
    params: {}
- name: user_data
  endpoint:
    path: /user/data
    method: GET
    data_selector: records
- name: campaign_reports
  endpoint:
    path: /campaign/reports
    method: GET
    data_selector: reports
- name: unsubscribe_options
  endpoint:
    path: /api/unsubscribe_options
    method: GET
    data_selector: options
- name: unsubscribe_reasons
  endpoint:
    path: /api/unsubscribe_reasons
    method: GET
    data_selector: reasons
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: contacts
    params: {}
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
    data_selector: campaigns
    params: {}
- name: multilingual_widget
  endpoint:
    path: /widgets/multilingual
    method: GET
    data_selector: widgets
    params: {}
- name: contacts_import
  endpoint:
    path: /docs/file-uploading
    method: GET
    data_selector: language
    params: {}
- name: web_tracking
  endpoint:
    path: /docs/web-tracking-overview
    method: GET
    data_selector: language
    params: {}
- name: subscribe_contact
  endpoint:
    path: /reference/subscribecontact-1
    method: POST
    data_selector: languageCode
    params: {}
- name: Google Sheets
  endpoint:
    path: /docs/importing-external-data-from-google-sheets
    method: GET
    data_selector: data
    params: {}
- name: Google BigQuery
  endpoint:
    path: /docs/integrating-with-google-bigquery
    method: GET
    data_selector: data
    params: {}
- name: PostgreSQL
  endpoint:
    path: /docs/connecting-to-postgresql
    method: GET
    data_selector: data
    params: {}
- name: HTTP Request
  endpoint:
    path: /docs/connecting-to-http-request-as-an-external-data-source
    method: GET
    data_selector: data
    params: {}
- name: external_data_source
  endpoint:
    path: /external/data/source
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: Broadcasts
  endpoint:
    path: /broadcasts
    method: GET
    data_selector: records
- name: ContactActivities
  endpoint:
    path: /contactActivities
    method: GET
    data_selector: records
- name: Contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: Devices
  endpoint:
    path: /devices
    method: GET
    data_selector: records
- name: Events
  endpoint:
    path: /events
    method: GET
    data_selector: records
- name: Messages
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: OrderItems
  endpoint:
    path: /orderItems
    method: GET
    data_selector: records
- name: Orders
  endpoint:
    path: /orders
    method: GET
    data_selector: records
- name: Revenue
  endpoint:
    path: /revenue
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: contacts
    params: {}
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
    data_selector: campaigns
    params: {}
- name: contacts
  endpoint:
    path: /path/to/contacts
    method: GET
    data_selector: records
    params: {}
- name: contactActivities
  endpoint:
    path: /path/to/contactActivities
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /path/to/events
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /path/to/orders
    method: GET
    data_selector: records
    params: {}
- name: broadcasts
  endpoint:
    path: /api/broadcasts
    method: GET
    data_selector: records
- name: contactActivities
  endpoint:
    path: /api/contactActivities
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: records
- name: devices
  endpoint:
    path: /api/devices
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: records
- name: orderItems
  endpoint:
    path: /api/orderItems
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /api/orders
    method: GET
    data_selector: records
- name: revenue
  endpoint:
    path: /api/revenue
    method: GET
    data_selector: records
- name: discount_codes
  endpoint:
    path: /data/discount_codes
    method: GET
    data_selector: data.discount_codes
    params: {}
- name: discount_codes
  endpoint:
    path: /services/data/vXX.X/sobjects/DiscountCodes
    method: GET
    data_selector: data.discount_codes
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: event_data
- name: event_type
  endpoint:
    path: /api/events
    method: GET
    data_selector: eventTypes
- name: CartAbandoned
  endpoint:
    path: /events/cart_abandoned
    method: POST
    data_selector: parameters
    params:
      productName: string
      productPrice: float
      productUrl: string
      imageUrl: string
      brand: string
      tagsWeight: float
      tagsOldPrice: float
- name: ContactCreated
  endpoint:
    path: /events/contact_created
    method: POST
    data_selector: parameters
    params:
      externalCustomerId: string
      email: string
      phone: string
      token: string
- name: Generate Event
  endpoint:
    path: /reference/registerevent_2
    method: POST
    data_selector: params
    params:
      eventTypeKey:
        required: true
      eventParams:
        required: true
- name: generate_event
  endpoint:
    path: /generate/event
    method: POST
    data_selector: data
    params: {}
- name: event
  endpoint:
    path: /api/generate-event
    method: POST
    data_selector: data
    params: {}
- name: webhook_activity
  endpoint:
    path: /webhooks/activity
    method: POST
    data_selector: activity
    params: {}
- name: ProductPage
  endpoint:
    path: /how-to-transfer-website-behavior-data-through-rest-api
    method: POST
    data_selector: ProductPage
    params: {}
- name: StatusCart
  endpoint:
    path: /how-to-transfer-website-behavior-data-through-rest-api
    method: POST
    data_selector: StatusCart
    params: {}
- name: PurchasedItems
  endpoint:
    path: /how-to-transfer-website-behavior-data-through-rest-api
    method: POST
    data_selector: PurchasedItems
    params: {}
- name: CustomerData
  endpoint:
    path: /how-to-transfer-website-behavior-data-through-rest-api
    method: POST
    data_selector: CustomerData
    params: {}
- name: CategoryPage
  endpoint:
    path: /categoryPage
    method: POST
    data_selector: CategoryPage
    params:
      categoryKey: Для малышей
      Tags:
        some_tags:
        - '1'
        - a2
        some_tags1:
        - '4'
        - gg
- name: AddToWishlist
  endpoint:
    path: /addToWishlist
    method: POST
    data_selector: AddToWishlist
    params:
      productKey: 24-MB02
      price: '153'
      isInStock: 1
- name: SearchRequest
  endpoint:
    path: /searchRequest
    method: POST
    data_selector: SearchRequest
    params:
      input_value: Coffee
      isFound: 0
- name: MainPage
  endpoint:
    path: /mainPage
    method: POST
    data_selector: MainPage
    params: {}
- name: NotFound
  endpoint:
    path: /notFound
    method: POST
    data_selector: NotFound
    params: {}
- name: ProductImpression
  endpoint:
    path: /productImpression
    method: POST
    data_selector: ProductImpression
    params:
      product_id: '430968'
      container_type: 1253_r963v1317
- name: ProductUpdate
  endpoint:
    path: /ProductUpdate
    method: POST
    data_selector: ProductUpdate
    params:
      siteId: site_id
- name: ProductUpdate
  endpoint:
    path: /
    method: POST
    data_selector: ProductUpdate
- name: ProductUpdate
  endpoint:
    path: /
    method: POST
    data_selector: ProductUpdate
    params:
      siteId: site_id
- name: website_behavior
  endpoint:
    path: /api/website-behavior
    method: POST
    data_selector: data
    params: {}
- name: recommendations
  endpoint:
    path: /docs/api-methods-for-adding-contacts
    method: GET
    data_selector: records
- name: A/B Testing
  endpoint:
    path: /docs/ab-testing-of-recommendation-blocks
    method: GET
    data_selector: recommendation
    params: {}
- name: product_feed
  endpoint:
    path: /api/v1/feed/upload
    method: POST
    data_selector: products
    params: {}
- name: getRecommendations
  endpoint:
    path: /getRecommendations
    method: GET
    data_selector: products
- name: sendEvent
  endpoint:
    path: /sendEvent
    method: POST
    data_selector: response
- name: get_auth_token
  endpoint:
    path: /v1/auth/contact/token
    method: POST
- name: get_recommendations
  endpoint:
    path: /v1/recoms/{dataSourceId}
    method: GET
- name: recommendations
  endpoint:
    path: /api/recommendations
    method: GET
    data_selector: recommendations
    params: {}
- name: product_recommendations
  endpoint:
    path: /api/recommendations
    method: POST
    data_selector: recommendations
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: records
- name: campaigns
  endpoint:
    path: /api/campaigns
    method: GET
    data_selector: records
- name: subscribe_contact
  endpoint:
    path: contact/subscribe
    method: POST
- name: add_update_contacts
  endpoint:
    path: contacts/
    method: POST
- name: add_contact
  endpoint:
    path: contacts
    method: POST
- name: update_contact
  endpoint:
    path: contact/{id}
    method: PUT
- name: add_update_contacts_from_external_files
  endpoint:
    path: contacts/upload
    method: POST
- name: attach_contact_to_static_segment
  endpoint:
    path: group/{id}/contacts/attach
    method: POST
- name: delete_from_static_segment
  endpoint:
    path: group/{id}/contacts/detach
    method: POST
- name: event
  endpoint:
    path: /reference/registerevent_2
    method: POST
    data_selector: event
    params: {}
- name: orders
  endpoint:
    path: /reference/registerevent_2
    method: POST
    data_selector: event
    params: {}
- name: orders
  endpoint:
    path: /api/orders
    method: POST
    data_selector: data
- name: contact_recommendations
  endpoint:
    path: /contacts/recoms/{dataSourceId}
    method: GET
    data_selector: response
    params: {}
- name: product_recommendations
  endpoint:
    path: /api/recommendations
    method: POST
    data_selector: data
    params: {}
- name: telegram
  endpoint:
    path: /telegram/send
    method: POST
    data_selector: recipients
    params: {}
- name: app_inbox
  endpoint:
    path: /app_inbox/send
    method: POST
    data_selector: recipients
    params: {}
- name: send_prepared_message
  endpoint:
    path: /message/{id}/smartsend
    method: POST
    data_selector: results
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: POST
    data_selector: contacts
    params: {}
- name: Delete contact
  endpoint:
    path: /reference/deletecontact-1
    method: POST
- name: Get token activity
  endpoint:
    path: /reference/gettokenactivated-1
    method: GET
- name: Update contact
  endpoint:
    path: /reference/updatecontact-1
    method: POST
- name: contacts
  endpoint:
    path: /contacts
    method: POST
    data_selector: data
- name: orders
  endpoint:
    path: /orders
    method: POST
    data_selector: data
- name: web_events
  endpoint:
    path: /api/v1/web-events
    method: POST
    data_selector: events
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: campaigns
  endpoint:
    path: /api/v1/campaigns
    method: GET
    data_selector: data
    params: {}
- name: add_update_contact
  endpoint:
    path: /reference/addcontact-1
    method: POST
- name: contacts_bulk_update
  endpoint:
    path: /reference/contactsbulkupdate-1
    method: POST
- name: delete_contact
  endpoint:
    path: /reference/deletecontact-1
    method: DELETE
- name: get_contact_import_status
  endpoint:
    path: /reference/getimportsessionstatus-1
    method: GET
- name: generate_event_v3
  endpoint:
    path: /reference/registerevent_2
    method: POST
- name: add_orders
  endpoint:
    path: /reference/ordersbulkinsert-1
    method: POST
- name: generate_past_events_v3
  endpoint:
    path: /reference/sendhistoryevents_2
    method: POST
- name: purchased_items
  endpoint:
    path: /docs/how-to-transfer-website-behavior-data-through-rest-api#purchaseditems
    method: POST
- name: configure_product_feeds
  endpoint:
    path: /reference/configureproductfeeds
    method: POST
- name: customer_data
  endpoint:
    path: /docs/how-to-transfer-website-behavior-data-through-rest-api#customerdata
    method: POST
notes:
- Specify the request body in JSON format.
- 'Important: The method unsubscribes not contacts but their email addresses.'
- Uses OAuth2 with refresh token — requires setup of connected app in eSputnik
- Authorization Using OAuth 2.0
- Web Tracking enables real-time personalization and automation.
- The API key has access to your eSputnik account. Keep it secure and don’t expose
  it publicly in insecure communication channels.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- eSputnik provides API methods that allow you to make the integration as fast and
  accurate as possible
- Visit our pricing page to view a list of pricing plans.
- In accordance with GDPR, we’ve added an additional layer of security to protect
  your account - multi-factor authentication.
- Multi-Factor Authentication (MFA) is required.
- Inviting users is only available in accounts with activated multi-factor authentication.
- You can invite a maximum of 5 users during the day.
- Some endpoints may require specific user permissions.
- Authorization Using OAuth 2.0 requires setup
- The key with assigned daily limit credits resets every day at 00:00 UTC.
- The key with weekly credits resets on Sunday until 11:59 pm UTC.
- We recommend using both types of notifications — Warnings and Alarms.
- The validity period of a token starts from the moment of its creation.
- Default is 172,800 seconds for an Access Token and 2,592,000 seconds for a Refresh
  Token.
- Only one custom domain can be active.
- Links wrapped in the esclick.me domain that were sent earlier will continue to work.
- User Time Zone controls how time appears in the UI for that user.
- Account Time Zone controls the default send time for messages and workflows.
- This method doesn't generate events, so you won't use it to launch workflows.
- Using the specified methods, contacts with email addresses will be created as confirmed.
- It doesn't allow configuring double opt-in.
- For adding/updating bulk of contacts use the Add Contacts method.
- The date event parameter must be passed in the ISO 8601 format with a specified
  time zone offset relative to UTC.
- A widget can be displayed more times than allowed by the display frequency. This
  can happen when a customer visits the website in incognito mode or after clearing
  their cache, cookies, and local data on their device.
- Some contacts may return nulls in deeply nested fields
- 'The imported file must be in one of the following formats: xlsx, xls, csv or txt,
  and up to 300 MB.'
- You must save all contacts in one worksheet (Excel) and organize them into columns.
- Authorization Using OAuth 2.0 requires setup of connected app in eSputnik
- A list will be inactive until the first field is added to it
- Before you delete a list with fields, delete the fields it contains
- After creating an additional field, the system will require up to an hour of synchronization
  before the field becomes available via API
- Only users with export rights can upload contacts.
- The file will be available for download within 3 days.
- Requires setup of connected app in eSputnik
- The external ID must be created in your system at the time you first receive any
  conditionally permanent ID.
- Using the external ID is recommended to prevent duplicates.
- Send data about language in RFC 5646 format.
- Send data about time zone in TZ database format.
- You can track user attributes only for users with external user IDs.
- For the script to work properly, do not change the default values of the utm_content
  tag
- The contact ID received after a subscription using the subscription form has higher
  priority than that received after a subscription using a web-push notification.
- Requests display how many times the form has been filled and not the number of new
  contacts. One person can fill the form more than one time or fill the form but not
  subscribe.
- Utilizing External IDs prevents the duplication of contacts, consolidates all accessible
  data into unified profiles, and provides comprehensive insights into contacts’ interactions
  with your brand.
- Make sure to handle rate limits.
- Contact Import is a feature that enables quick creation of a contact list for SMS
  or Email campaigns.
- Requires setup of OAuth 2.0 for authentication
- Requires setup of OAuth2 credentials in the application.
- Before configuration, you must add email authentication.
- The sender's email address must be in your corporate domain.
- If the dynamic sender option is unavailable in your account, apply for activation.
- Reply address must be in your corporate domain.
- We recommend setting up the Full + method. If this is impossible due to certain
  restrictions, choose the Subdomain method.
- Some DNS servers need up to 48 hours to apply all changes.
- You can upload only one icon at a time.
- With each new upload, old icons are overwritten. Only the last added icon is considered
  relevant.
- Your favicon will be added to all emails generated after its upload. Re-save an
  email after favicon uploading to pull a new favicon.
- 'Sometimes, a favicon is displayed in the browser tab with a delay. In that case:
  clean cache in browser settings or open the web version of a new email in the browser
  where you didn’t open it before the favicon was changed.'
- The limits are the same for all campaigns, including trigger-based ones.
- When the new domain's warm-up reaches the required level, all emails will be sent
  with two DKIM signatures—yours and eSputnik's.
- Warm-up data is refreshed every day at 00:00
- Under a strict DMARC policy, it's advisable to manually limit the number of daily
  sends or set the value to none during the warm-up period.
- Ensure proper email deliverability to Apple relay addresses.
- Use authenticated email-sending methods (SPF, DKIM, DMARC).
- We recommend that when working with our service using the basic connection option,
  add our insert to the SPF string of your domain include:spf2.esputnik.com.
- Mailings sent from public addresses fall into spam filters of most mail services.
- Getting into spam filters worsens the sender's reputation.
- Due to restrictions on the number of sendings from public addresses, bulk mailings
  may lead to temporary account blocking.
- Unsubscribe link is mandatory for every email sent
- Moderation is carried out at +03 GMT and takes at most 10 minutes during working
  hours (Mon-Fri - 8 am - 7 pm; Sat-Sun - 9 am - 6 pm) and 1-3 hours in the evening
  time and on holidays.
- Moderation is not carried out at night.
- Some responses may include rate limits
- If the font isn’t displayed in the email, check if it's available on the device
  you're viewing the email on. If it is not there, the text will be displayed in a
  standard font.
- Some fonts are only supported for languages that use the Latin alphabet and can’t
  be used for languages that use the Cyrillic alphabet.
- It is better not to use custom fonts for the main text but to place them on images;
  for example, add a banner to the text.
- The email subject line and preheader will be displayed in a standard font determined
  by the email client.
- When using a custom font, think about how it would look in email clients that don't
  support it. The text with the standard font may get bigger which may distort the
  layout. Test the email, configure an alternative font family, size and spacing for
  a correct display.
- Some objects like Contact may return nulls in deeply nested fields
- The system supports images in PNG, JPG, and GIF formats.
- For pictures to load quickly in the newsletter, their weight should not exceed 3
  MB.
- Compatibility can vary across devices and platforms, which can affect the user experience.
- To send AMP emails, you need to register with Google as a dynamic sender.
- To start sending campaigns with AMP-powered carousels, you must register with Google
  as a dynamic email sender.
- Use images of the same height for smooth slide switching.
- Authorization Using OAuth 2.0 is required for API access.
- The Products block is available when you have at least one order in your account.
- A block with default settings will be used in the message if you have not set up
  web tracking and created a data source for recommendations.
- Uses a structure and data substitution rules for the Products block
- The display of the first or second option depends on the setting in the Products
  block.
- We recommend creating applications with different API keys for the stage and prod
  environments to minimize risks.
- To send mobile push messages via eSputnik, you need to set up a connection between
  your mobile app and our system.
- Some objects may return nulls in deeply nested fields
- Web deep links may be helpful for apps supported by websites, for example — ecommerce.
  But we don’t recommend using it because of the high risk of loose UTMs or other
  important parameters, which may be critical for analytics.
- You can set a limited sending speed for a campaign that involves at least ten contacts
  and does not use the option of sending by contact time zone.
- Using the contact's time zone is available for all eSputnik channels.
- The token can become invalidated at any moment for security considerations, so you
  get it more than once. The script renews the token automatically by calling getAuthTokenCallback.
- If a contact is not in the eSputnik system, the token is not returned.
- To send In-App messages from our platform, you need to Install SDK
- All In-App message types are supported in SDK versions starting from Android 2.5.0/iOS
  2.5.0
- The number of contacts in a subscription is calculated based on deviceId.
- If the number of contacts in an In-App channel exceeds the plan’s limit, messages
  will not be displayed to contacts above the limit.
- Real-time delivery of In-App messages is crucial.
- Only events from the SDK can trigger In-Apps.
- Some fields may return nulls
- Dynamic segments can be created based on user activity
- Web push token collection is only available for HTTPS protocol websites.
- Google Chrome may block intrusive subscription windows.
- Safari icons should be not less 256x256px, JPEG, PNG, up to 200KB.
- The icon for Safari is installed once and cannot be changed.
- You can edit Logo and Big image directly in the editor when uploading (if it does
  not meet the requirements) or after uploading (the Edit button). After editing,
  the image is saved in PNG format.
- Data from the subscription event allows for personalized communication.
- The subscriptionPage parameter data is not saved in the contact card.
- Ensure that scripts for push notifications are added before the closing tag.
- Test the event generation correctness in the Triggers menu of Events history.
- Some builders (GoDaddy, Wix, etc.) place the sw.js file in the site root by default.
  Since the eSputnik's file has the same name, errors may occur.
- The registration term of the sender's name can take 7 to 30 days.
- Sender name registration for Viber is free.
- Uses OAuth2 for authentication
- Messages with unapproved text will not be delivered
- Maximum number of characters for message text is 1000
- Integration is only compatible with Universal analytics script, set directly on
  the website.
- To publish widgets, install the script before the closing body tag on every website
  page.
- Upload images in PNG, JPEG, SVG, GIF, WebP, AVIF formats, up to 3 MB.
- The UTM tag is considered when visiting the page within one session.
- You can select as many locations as you want.
- If you select several locations, our system arranges them using the `OR` logical
  operator.
- The default value of Silent Interval in Annoyance Safeguard is 3 minutes.
- It is recommended to install the Google Analytics 4 script, since the Google Universal
  Analytics property will stop processing data starting on July 1, 2023.
- You cannot delete the widgets participating in a running test.
- You cannot run A/B tests for the widgets containing errors.
- The request form is not displayed to the contacts that are not identified.
- Identified contacts are those whose webId (cookie) has mapping.
- Authorization Using OAuth 2.0 requires setup.
- Ensure proper setup of connected app for OAuth2.
- Integrating with Telegram Bot
- Telegram bot is required to enable the channel
- A token will be removed from the contact card upon receiving the FAILED status,
  which is sent when the user blocks the bot.
- The maximum number of characters in a message is 4096. If the message contains an
  image, the maximum text length is 1024 characters.
- One emoji takes up two characters. Keep this in mind when creating messages.
- Only one parameter can be specified for a single button at a time.
- The maximum length of the text for `callback_data` is 64 characters.
- Integration requires setup of connected app in eSputnik
- You can split a segment only if it includes more than 10 contacts.
- Some features may depend on your plan.
- Requires setup of OAuth 2.0 authorization.
- Segmentation by events in messages is included in paid plans. To enable it, please
  contact sales@esputnik.com.
- OAuth2 authentication is required.
- Use this task only when the contact data is passed via the API method Generate event.
- Uses OAuth2 with refresh token — requires setup of connected app in esputnik
- OAuth2 requires setup of connected app in eSputnik
- The block can be considered a continuous A/B test that improves performance with
  every message sent.
- 'Created branches (max 20) have management options: Duplicate, Rename, Delete.'
- You can add or remove a contact only from a list segment.
- After removal, the contact remains in the system.
- Requires OAuth2 authentication setup
- If you delay for 1/2/3 days, the delayed action will start 24/48/72 hours after
  the workflow is triggered.
- If today is Tuesday and you've chosen to send a message on Monday, the message will
  be sent next Monday.
- The primary identifier is ContactId. If it is not specified but at least one of
  the other identifiers is provided, ContactId will be automatically added to the
  event.
- For data consistency, provide parameter names according to the specified list.
- The message with the allowed sending time settings is marked with a clock icon in
  the workflow and its launch history.
- Launch statuses per segment available only in regular workflows for a segment.
- Data transfer in webhooks is configured in JSON format, but XML and text formats
  are also available.
- If the workflow should be launched by the event transferred via API, make sure you
  transfer it and select it in the dropdown list in the Start configuration.
- Ensure that events in trigger configuration and in the message corresponding to
  each other.
- Ensure to set up a connected app for OAuth2 authentication
- A contact becomes available (active) for your campaigns only after they confirm
  their subscription in the confirmation email.
- If the subscribe request specifies a list of segments to which the contact should
  be added after subscribing, and then the workflow checks for membership in one of
  these segments, use a timer of at least 4 minutes between these actions. This will
  ensure the correct workflow operation and consistent execution of all requests in
  the system.
- Subscriber must confirm their email address before receiving promotional emails
- Values 'm' and 'M' will be considered different in the gender field.
- Contacts in the segment are recalculated daily from 3 a.m. to 4 a.m.
- If you want the contact to receive an email with recommendations immediately after
  the workflow is executed, set the Once in every__ parameter in the Process unique
  events field.
- If this parameter is not specified, and a subscriber accidentally clicks the button
  several times, the scenario will run anyway, sending several identical messages
  to one person.
- Uses OAuth2 with refresh token
- Ensure to set up a connected app in eSputnik for API access
- The time must be sent in the HH:MM or HH:MM:SS format.
- If the field of a contact participating in the workflow has a missing or written
  in an incorrect format value, the message will not be sent.
- The system stores order events for 5 years.
- Order Transfer Using the Add Orders API Method
- You can transfer up to 1000 orders in one request.
- You can show up to 3 items in the block with recently viewed products.
- The condition Once in every 7 days restricts sends to the same contact.
- The abandoned cart template typically contains two blocks with products – abandoned
  items and recommended items.
- To create segments based on product events and online store events, web tracking
  needs to be set up.
- Automation of customer research is important for enterprise ecommerces with big
  customer bases.
- To send AMP content, you need to register with Google as a dynamic sender.
- Uses OAuth 2.0 for authentication
- You need to add these code snippets to each structure with dynamic variables.
- The mobile push notification will be displayed differently on different devices,
  but we recommend writing no more than 40 characters. That’s why it is not always
  rational to display the entire contents of the array using the foreach loop.
- This type is suitable for both single and bulk campaigns.
- The value of promo codes depends on the block parameters and the current calendar
  date. That is, during the day, all contacts will receive the same promo code if
  no changes are made to the block parameters. Tracking the use of the promo code
  and its expiration date should be on your side.
- The initialization vector must always be 12345678.
- The system guarantees that one promo code will be used only once.
- It is impossible to delete uploaded, but not used promo code.
- Promo codes are encoded using key, which third persons don’t need to know.
- Recipient will obtain promo code in the following format CRRH-ASDF-HGVB-MNCA.
- This method works only for emails.
- Promo codes can be sent via preprocessor.
- Reports are available for various media channels including Email, SMS, Web Push,
  and App Inbox.
- To see how much revenue a campaign has generated, enable its visualization in your
  eSputnik account.
- Integration requires OAuth 2.0 setup.
- Integration with Telegram Bot available
- UTM tags are generated automatically and trigger as soon as the user clicks on the
  link.
- If other keys are required for recognition by your analytical system, activate the
  Additional tags slider.
- Set up order data transfer to the system via API resources `Add orders` and `Generate
  event`.
- The **Reports** tab displays only orders with the **Delivered** status.
- All sales transferred to the system are connected to channels. You connect channels
  to sales in **Settings** based on events (sent, delivered, opened, clicked) and
  time period.
- A sale is always associated with the last interaction with the channel.
- Refund data isn’t included in the general statistics.
- The overview shows statistics for the last elapsed day; recalculation ends before
  02:00 UTC
- Data on changes in the number of contacts in the segment will appear within 24 hours.
- The segment statistics display the number of contacts without considering the type
  of their IDs.
- OAuth 2.0 authentication is required.
- The Two-click unsubscribe option is enabled by default in the settings.
- Multilanguage is an automation tool that enables sending messages in different languages
  within one campaign.
- The number of language versions you can create is limited only by the pricing package.
- The option is available for Widget requests.
- The appearance of the subscription prompt is set only in the version with the default
  language. Then it's automatically applied to other language versions.
- Multilingualism in messages is only supported for some dialects; if you still need
  to find the one you need, please contact our support at support@esputnik.com.
- The file must be accessed by anyone with the link, without Google authorization
  required.
- The first line of the sheet contains headers in Latin.
- The data must be contained in the first sheet.
- 'You can use ready-made smart blocks from the library: Modules → Advanced → Product
  cards.'
- It could be easier and faster than creating your own blocks.
- Connection to PostgreSQL recommended to use a secure SSL connection for secure data
  transfer.
- Segmentation is only available for contacts that exist both in your eSputnik account
  and in the external database.
- Existing entries in the Revenue table (for orders placed after 03.08.2024) can be
  updated along with the upload of new orders. Updating may be necessary, for example,
  if the total cost of the order has changed.
- You don’t need to pre-create PostgreSQL tables. They will be generated automatically
  at the first export, and since that all the incoming data will be updated.
- Ensure to have a valid OAuth2 token before making API requests
- Create tables in Google BigQuery for importing data to eSputnik; tables with data
  from eSputnik will be created automatically after the first export.
- You don’t need to pre-create BigQuery tables. They will be generated automatically
  at the first export.
- Connection to the external database doesn’t presuppose contact import. Segmentation
  is only available for contacts that exist both in your eSputnik account and in the
  external database. Synchronize and update contacts before creating campaigns.
- BigQuery data can drive highly targeted campaigns by dynamically referencing customer-specific
  details.
- By default, the system stores event data for 2 years. To increase or decrease the
  storage period, leave a request at support@esputnik.com.
- The request body is displayed exactly as it was passed to the system.
- Custom events display the endpoint of the Generate event method by which they were
  passed.
- Events can be generated by changes in the profile field values, by user activity
  or inactivity, or by pre-configured API requests.
- All events should include standard information about devices and contacts
- The message with dynamic event content must participate in the workflow triggered
  by the corresponding event.
- The case of the letter in the pattern field must match the case of the letter in
  the event parameters.
- Webhook requests are sent in JSON format.
- The script works for second-level domains and subdomains.
- Install the script on both desktop and mobile versions of your website.
- If you install a script via Google Tag Manager or any other tag manager, you may
  lose tracked data as it may be blocked by content filters.
- To use web tracking, sign up for one of the Professional features according to your
  pricing plan.
- You cannot use the site's recommendations functionality if tracking is configured
  via the REST API.
- Transferring Website Behavior Data via JavaScript Requests
- Pay special attention to the transfer of contact data
- There is no need to configure all the events below — select only those included
  in your tariff plan
- The data source is a recommendation filtering algorithm that can be applied to the
  website, media channels, and mobile application.
- Always set the same default language for message and feed.
- The feed update frequency is the same for all its language versions.
- In this recommendation type, the ProductImpression event is not automatically sent.
  Pass it when site visitors actually view the recommendation block.
- Data is rendered using Velocity dynamic content.
- Placement setting is required for recommendation blocks created in eSputnik account.
- The current token gets invalidated after every request
- Before starting to configure recommendations, install web tracking script to collect
  users’ online behavior data.
- Upload a product feed to provide data about your product range.
- Set up web tracking for your website.
- Create data sources for recommendation blocks.
- Behavioral triggers are automated responses to user actions.
- Setup of connected app in eSputnik is required for OAuth2.
- Some API responses may contain null values in nested structures.
- New contacts submitted using the add/update contacts method are created with confirmed
  email addresses.
- The methods can process up to 3,000 contacts.
- The maximum size of content for events sent in the request body is 20 kilobytes.
- To save orders in the system, you need to set up segmentation by events as the event
  contains a contact identifier.
- The price of the products transferred in an order must match the totalCost value.
- You need to send requests for each recommendation type because they have different
  data sources.
- This method doesn’t include the offset and maxrows parameters.
- Ensure to follow the API rate limits to avoid throttling.
- Up to a thousand recipients can be transmitted in one request.
- Messages can be personalized for each recipient using data from the request.
- Transfer token bases for web push and mobile push notifications, please contact
  support.
- eSputnik collects Personal Data to provide and improve the Service.
- Campaigns containing materials that violate the current laws may not be sent via
  the eSputnik System.
- Moderation is carried out in +03 GMT, and takes no more than 10 minutes during working
  hours.
- To integrate with eSputnik on the Horoshop platform, activate the Pro tariff plan
  in your Horoshop account.
- Only the status Initialized is transmitted in orders.
- The plugin relies on data transfer via cron jobs.
- 'Ensure you have an active cron set up: either the default WordPress cron or a server-side
  cron on your hosting.'
- We support integration only for one active Market.
- You can always pause sending contact data to eSputnik.
- Contacts that fail to import are flagged with an error, with its description
- Ensure support for all configurations for newsletter subscriptions via widgets
- Build templates that don't exceed 102KB.
- 'Add only important information. Give a link to the data that can be found on the
  website: product description, detailed reviews, testimonials, etc.'
- Don't try to include all your offers in one campaign. Instead, create a series of
  emails and send to corresponding segments.
- Don't send emails with the same subject line. Gmail usually combines such emails
  into one series, increasing the email weight.
- Delete comments, double spaces, and line breaks from the template. Don't use shortened
  URLs.
- Use minimum structures and containers. Add the basic structures – header, body,
  and footer – and then include the necessary modules. This shortens the code and
  allows to create rather long emails.
- Avoid style attributes. Create a layout for the entire email and try not to edit
  separate elements.
- 'Compress HTML with special services: htmlcompressor.com, minifycode.com, etc.'
- Run tests. Before launching a campaign, send a test email to your Gmail account
  and check the layout.
- The best way to keep Gmail emails from being clipped is to create compressed emails
  with the relevant content that suits your target audience and doesn't take extra
  space.
errors:
- '401 Unauthorized: Recheck API key or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- HTTP response with status code 4xx - The operation was completed with an error.
- If you can't scan the QR code, use a link to its text version.
- Time on both desktop and smartphone should be synchronized.
- 'USER_LIMIT_EXCEEDED: Maximum number of users added to an organization is 20.'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify your OAuth token.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Check your OAuth token'
- '400 Bad Request: Check your request parameters'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'CONTACT_NOT_FOUND: The contact profile with this external ID is not found.'
- 'DUPLICATE_EXTERNAL_ID: The external ID already belongs to another contact.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Ensure the token is valid.'
- '401 Unauthorized: Check your client credentials or token'
- '401 Unauthorized: Verify API key and secret.'
- 'Blocked: the campaign has been rejected by a moderator.'
- 'DEVICE_TOKEN_NOT_REGISTERED: Check the certificate''s validity and if it is used
  in the proper environment.'
- 'INVALID_PROVIDER_TOKEN: Create a new APNs Auth Key.'
- 'BAD_DEVICE_TOKEN: Contact our support team to switch the Sandbox configuration
  to true.'
- '404 Not Found: Check the endpoint path'
- 'HTTP 200: { “token”: “string” }'
- 'If contact is not found: {“token”: “”}'
- '401 Forbidden: Authentication failed. The system retries such requests.'
- '429 Too Many Requests: The message number limit is exceeded. The system retries
  such requests.'
- '400 Bad Request: An issue with payload processing. The system does NOT retry such
  requests.'
- '500 Internal Server Error: Temporary processing issues. The system retries such
  requests.'
- '400 Bad Request: Check the format of the event data being sent.'
- '401 Unauthorized: Ensure proper authentication is in place if required.'
- '404 Not Found: Verify the endpoint path is correct.'
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Validate OAuth token and permissions.'
- '401 Unauthorized: Check OAuth token or scopes'
- '400 Bad Request: Verify request parameters'
- '400: Wrong app uuid'
- '400: Tokens must be specified'
- '400: Duration must be positive int'
- '404: Not registered application'
- '400 Bad Request: Check parameters and their values'
- '404 Not Found: Ensure the endpoint exists'
- '500 Internal Server Error: Try again later'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Recheck OAuth credentials'
- '429 Too Many Requests: Limit API calls'
- '401 Unauthorized: Check your credentials'
- '429 Too Many Requests: Rate limit exceeded'
- '401 Unauthorized: Check your API key or OAuth token'
- '400 Bad Request: Check the request parameters'
- '404 Not Found: Verify the endpoint path'
- '200: Successful request, but there may be orders that cannot be added or updated.'
- One or more required fields are empty, or the format is incorrect.
- 'All optional fields are empty: externalCustomerId, email, phone. At least one is
  required for order creation.'
- '400 Bad Request: Check the parameters being sent.'
- '404 Not Found: Verify the endpoint path.'
- '500 Internal Server Error: Try again later.'
- '401 Unauthorized: Recheck OAuth credentials.'
- '401 Unauthorized: Check your OAuth credentials'
- Missing required parameters
- '400 bad request: If parameters do not meet the specified structure'
- '400 Bad Request: Check parameter format and values'
- '401 Unauthorized: Verify authentication credentials'
- '400 Bad Request: Verify the request payload'
- 'The resource is not available at the specified URL: The resource must be accessible
  via HTTP or HTTPS'
- 'Unsupported file format: Only XML files are supported'
- 'Errors in product parameters: The product feed must conform to one of the Google
  RSS 2.0 XML specifications.'
- variantId r262v361 was not found in config
- '401 Unauthorized: Repeat the token request if received'
- '400 Bad Request: Non-valid fields and error details returned.'
- '400 Bad Request: Check the request formatting and required fields.'
- '401 Unauthorized: Verify your authentication credentials.'
- '429 Too Many Requests: Reduce the frequency of your requests.'
- 'ERROR: If the message cannot be added to the sending queue, the request is returned
  with the ERROR status.'
- Campaigns considered spam if spam complaint rate exceeds 0.2%.
- Delivery error rate exceeds 5%.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuth2
  - Client ID
  - Client Secret
  - OAuth 2.0
  - Confirmed subscription
  - Double Opt-In
  - OAuthToken
  - Data Controller
  - Data Processor
client:
  base_url: https://api.esputnik.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.esputnik.com/oauth/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
