resources:
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: collections
  endpoint:
    path: /api/v1/collections
    method: GET
    data_selector: collections
    params: {}
- name: items
  endpoint:
    path: /api/v1/items
    method: GET
    data_selector: items
    params: {}
- name: media_elements
  endpoint:
    path: /api/v1/media_elements
    method: GET
    data_selector: media_elements
    params: {}
- name: assessments
  endpoint:
    path: /v1/docs/assessments
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: submissions
  endpoint:
    path: /v1/docs/submissions
    method: GET
    data_selector: records
    params: {}
- name: assess
  endpoint:
    path: /v1/docs/assess
    method: GET
    data_selector: records
    params: {}
- name: candidate_results
  endpoint:
    path: /v1/docs/candidate-results
    method: GET
- name: assessment_performance
  endpoint:
    path: /v1/docs/assessment-performance
    method: GET
- name: export_candidate_reports
  endpoint:
    path: /v1/docs/exporting-candidate-reports
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: service_agreement
  endpoint:
    path: /services/agreement
    method: GET
    data_selector: records
- name: order_form
  endpoint:
    path: /services/order_form
    method: GET
    data_selector: records
- name: SAML Integration
  endpoint:
    path: /api/docs/saml-2
    method: GET
    data_selector: metadata
    params: {}
- name: Cirrus LTI URLs
  endpoint:
    path: /launch/testcustomer
    method: POST
- name: Get Preliminary Marking Report
  endpoint:
    path: /api/v1/integrations/schedule/{ScheduleExtId}/marking/preliminary-report
    method: GET
    data_selector: Content
    params:
      externalId: Schedule external id
- name: review_session_sharing
  endpoint:
    path: /api/v1/integrations/external/review-sessions/{externalId}/sharing
    method: PUT
    data_selector: content
    params: {}
- name: core_api
  endpoint:
    path: /api
    method: GET
- name: realtime_updates
  endpoint:
    path: /realtime
    method: GET
- name: content_media
  endpoint:
    path: /s3
    method: GET
- name: user
  endpoint:
    path: /user/{externalId}
    method: GET
    data_selector: Content.User
    params:
      externalId: externalId
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: Content
    params: {}
- name: user
  endpoint:
    path: /api/v1/integrations/user/{externalId}
    method: PATCH
    data_selector: Content.User
    params: {}
- name: delete_user
  endpoint:
    path: /user/{externalId}
    method: DELETE
    data_selector: Success
    params:
      externalId: String
- name: delete_group
  endpoint:
    path: /groups/{externalId}
    method: DELETE
    data_selector: SuccessfullyRemoved
    params:
      externalId: externalId
- name: groups
  endpoint:
    path: /api/v1/integrations/groups
    method: GET
    data_selector: ''
    params:
      search: test
- name: groups
  endpoint:
    path: /api/v1/integrations/groups
    method: POST
    data_selector: Content
    params: {}
- name: update_group
  endpoint:
    path: /api/v1/integrations/groups/{externalId}
    method: PATCH
    data_selector: Content
    params: {}
- name: collections
  endpoint:
    path: /api/v1/integrations/collections/{externalId}
    method: GET
    data_selector: Content
    params:
      externalId: String(64)
- name: collection
  endpoint:
    path: /api/v1/integrations/collections
    method: POST
    data_selector: Content
    params: {}
- name: delete_collection
  endpoint:
    path: /collections/{externalId}
    method: DELETE
    data_selector: Content
    params:
      externalId: String
- name: collection_sharing
  endpoint:
    path: /api/v1/integrations/collections/{externalId}/sharing
    method: PUT
- name: collection
  endpoint:
    path: /api/v1/integrations/external/collections/{externalId}
    method: PATCH
    data_selector: ExternalId
- name: assessments
  endpoint:
    path: /api/v1/integrations/assessments
    method: GET
    params:
      purposes: 1,2
- name: assessment
  endpoint:
    path: /assessment/{externalId}
    method: GET
    data_selector: Content
    params: {}
- name: assessment
  endpoint:
    path: /api/v1/integrations/assessment
    method: POST
    data_selector: Content
    params: {}
- name: update_assessment
  endpoint:
    path: /api/v1/integrations/assessment/{externalId}
    method: PATCH
    data_selector: Success
    params: {}
- name: remove_users_assessment_sharing
  endpoint:
    path: /api/v1/integrations/assessment/{externalId}/sharing
    method: DELETE
    data_selector: Content.SuccessfullyRemoved
    params: {}
- name: Delete Assessment
  endpoint:
    path: /assessment/{externalId}
    method: DELETE
    params:
      externalId: mandatory
- name: add_users_assessment_sharing
  endpoint:
    path: /api/v1/integrations/assessment/{externalId}/sharing
    method: PUT
    data_selector: Content
    params: {}
- name: schedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: ''
    params: {}
- name: schedule_info
  endpoint:
    path: /api/v1/integrations/external/schedule/{externalId}
    method: GET
    data_selector: Content
    params:
      externalId: String(60)
- name: update_schedule
  endpoint:
    path: /api/v1/integrations/external/schedule/{externalId}
    method: PATCH
    data_selector: null
    params:
      externalId: externalId
- name: update_pincode
  endpoint:
    path: /api/v1/integrations/external/schedule/{externalId}
    method: PATCH
    data_selector: Content
    params:
      externalId: string
- name: schedule
  endpoint:
    path: /api/v1/integrations/external/schedule/{externalId}
    method: DELETE
    data_selector: Success
    params:
      externalId: ''
- name: schedule
  endpoint:
    path: /schedule
    method: POST
    data_selector: Schedule
    params: {}
- name: schedule
  endpoint:
    path: /delivery/external-login
    method: GET
    data_selector: Content
    params: {}
- name: create_non_published_schedule
  endpoint:
    path: /api/v1/integrations/external/schedule
    method: POST
    data_selector: Content
    params:
      AssessmentExternalId: string (64)
      StartDateTime: DateTime
      EndDateTime: DateTime
      Title: string (100)
      ScheduleExternalId: string (64)
      HierarchyExternalId: string (64)
      PIN: string (64)
      UseProctorIo: boolean
      ProctorioTemplateExternalId: String(64)
      Owner: string (64)
- name: activate_schedule
  endpoint:
    path: /integrations/external/schedule/{externalId}/activate
    method: PUT
    data_selector: Success
    params:
      ExternalId: string (64)
- name: schedule_sharing
  endpoint:
    path: /api/v1/integrations/external/schedule/{externalId}/sharing
    method: PUT
    data_selector: Filter
    params: {}
- name: void_attempts
  endpoint:
    path: /external/schedule/{externalId}/marking/void
    method: PUT
    data_selector: Content
    params: {}
- name: archive_schedule
  endpoint:
    path: /external/schedule/{externalId}/archive
    method: PUT
    data_selector: ''
    params: {}
- name: mark_for_anonymization
  endpoint:
    path: /api/v1/integrations/external/schedule/{externalId}/anonymize/mark
    method: PUT
    data_selector: IsAnonymized
- name: unmark_for_anonymization
  endpoint:
    path: /api/v1/integrations/external/schedule/{externalId}/anonymize/unmark
    method: PUT
    data_selector: response
    params: {}
- name: add_candidates_to_schedule
  endpoint:
    path: /schedule/{externalId}/candidates
    method: PUT
    data_selector: Content
    params:
      externalId: externalId
- name: add_candidates
  endpoint:
    path: /api/v1/integrations/schedule/add-candidates
    method: POST
    data_selector: Result
    params: {}
- name: delete_candidates
  endpoint:
    path: /api/v1/integrations/external/schedule/{externalId}/candidates
    method: DELETE
    data_selector: Content.DeletedCandidateExternalIds
    params:
      externalId: array[string]
- name: invigilators
  endpoint:
    path: /schedule/{externalId}/invigilators
    method: PUT
    data_selector: Content.SuccessfullyAdded
    params:
      externalId: externalId
- name: delete_invigilators
  endpoint:
    path: /schedule/{externalId}/invigilators
    method: DELETE
    data_selector: Content.SuccessfullyRemoved
    params:
      externalId: externalId
- name: invigilation_info
  endpoint:
    path: /api/v1/integrations/external/schedule/{scheduleExternalId}/invigilation-info
    method: GET
    data_selector: Content
    params:
      externalId: scheduleExternalId
- name: set_extra_time_for_attempt
  endpoint:
    path: /api/v1/integrations/external/schedule/{externalId}/setExtraTime
    method: PUT
    data_selector: Content.SuccessfullyUpdated
    params: {}
- name: attempt_info
  endpoint:
    path: /api/v1/integrations/external/schedule/{externalId}/attempt-info
    method: GET
    data_selector: Content
    params:
      CandidateExtId: String
- name: start_attempt
  endpoint:
    path: /api/v1/integrations/external/schedule/{externalId}/start
    method: PUT
- name: marking_settings
  endpoint:
    path: /api/v1/integrations/external/schedule/{externalId}/marking/settings
    method: GET
    data_selector: Content
- name: marking_settings
  endpoint:
    path: /api/v1/integrations/external/schedule/{externalId}/marking/settings
    method: PATCH
    data_selector: Content
- name: preliminary_report
  endpoint:
    path: /api/v1/integrations/schedule/{ScheduleExtId}/marking/preliminary-report
    method: GET
    data_selector: Content
    params:
      externalId: Schedule external id
- name: review_session_info
  endpoint:
    path: /api/v1/integrations/external/review-sessions/{externalId}
    method: GET
    data_selector: Content
    params: {}
- name: candidate_review_session
  endpoint:
    path: /api/v1/integrations/external/review-sessions
    method: POST
    data_selector: Content
    params: {}
- name: update_candidate_review_session
  endpoint:
    path: /api/v1/integrations/external/review-sessions/{externalId}
    method: PATCH
    data_selector: Success
    params: {}
- name: add_candidates_to_review_session
  endpoint:
    path: /api/v1/integrations/external/review-sessions/{externalId}/results/add
    method: PUT
    data_selector: Content.SuccessfullyAdded
    params: {}
- name: remove_candidate_review_session
  endpoint:
    path: /api/v1/integrations/external/review-sessions/{externalId}/results/remove
    method: PUT
    data_selector: Content
    params: {}
- name: delete_candidate_review_session
  endpoint:
    path: /api/v1/integrations/external/review-sessions/{externalId}
    method: DELETE
    data_selector: null
    params: {}
- name: activate_candidate_review_session
  endpoint:
    path: /api/v1/integrations/external/review-sessions/{externalId}/activate
    method: PUT
    data_selector: response
    params: {}
- name: review_session_sharing
  endpoint:
    path: /api/v1/integrations/external/review-sessions/{externalId}/sharing
    method: PUT
    data_selector: Filter
    params: {}
- name: results
  endpoint:
    path: /api/v1/integrations/results
    method: GET
    data_selector: results
    params:
      CandidateExtId: string(64)
      ScheduleExtId: string(64)
      AttemptExtId: string(64)
- name: exam_results_ready
  endpoint:
    path: /webhooks/exam_results_ready
    method: POST
    data_selector: result
    params: {}
- name: preliminary_marking_report
  endpoint:
    path: /api/v1/integrations/schedule/{ScheduleExtId}/marking/preliminary-report
    method: GET
    data_selector: Content
    params:
      externalId: Schedule external id
- name: Cirrus hosted FTPS
  endpoint:
    path: /cirrus-hosted-ftps
    method: GET
- name: Customer Hosted FTPS
  endpoint:
    path: /customer-hosted-ftps
    method: GET
- name: similarity_report
  endpoint:
    path: /api/similarity/report
    method: GET
    data_selector: report
    params: {}
- name: Get Preliminary Marking Report
  endpoint:
    path: /api/v1/integrations/schedule/{ScheduleExtId}/marking/preliminary-report
    method: GET
    data_selector: Content
    params:
      externalId: ''
- name: assessments
  endpoint:
    path: /assessments/
    method: GET
- name: schedule
  endpoint:
    path: /schedule
    method: POST
- name: results_webhook
  endpoint:
    path: /webhooks/results
    method: GET
- name: Import Item
  endpoint:
    path: /docs/import-item-to-collection
    method: GET
    data_selector: items
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: item_banks
  endpoint:
    path: /api/item_banks
    method: GET
    data_selector: data
    params: {}
- name: assessments
  endpoint:
    path: /api/assessments
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: collections
  endpoint:
    path: /api/v1/collections
    method: GET
    data_selector: collections
    params: {}
- name: collections
  endpoint:
    path: /api/collections
    method: GET
    data_selector: collections
- name: collections
  endpoint:
    path: /api/v1/collections
    method: GET
    data_selector: collections
- name: assessments
  endpoint:
    path: /v1/docs/assessment-versioning
    method: GET
    data_selector: records
    params: {}
- name: schedules
  endpoint:
    path: /v1/docs/archiving-schedule
    method: GET
    data_selector: records
    params: {}
- name: items
  endpoint:
    path: /api/v1/items
    method: GET
    data_selector: items
- name: items
  endpoint:
    path: /v1/docs/using-items
    method: GET
    data_selector: items
    params: {}
- name: topics
  endpoint:
    path: /v1/docs/working-with-topics
    method: GET
    data_selector: topics
    params: {}
- name: item_revisions_versions
  endpoint:
    path: /v1/docs/item-revisions-item-versions
    method: GET
    data_selector: item_revisions
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: item_bank
  endpoint:
    path: /api/item_bank
    method: POST
    data_selector: items
    params: {}
- name: item_banks
  endpoint:
    path: /api/item_banks
    method: GET
    data_selector: items
    params: {}
- name: multiple_choice
  endpoint:
    path: /api/multiple_choice
    method: POST
    data_selector: questions
- name: extended_multiple_choice
  endpoint:
    path: /api/extended_multiple_choice
    method: POST
    data_selector: questions
- name: multiple_response
  endpoint:
    path: /api/multiple_response
    method: POST
    data_selector: questions
- name: either_or
  endpoint:
    path: /api/either_or
    method: POST
    data_selector: questions
- name: numeric
  endpoint:
    path: /api/numeric
    method: POST
    data_selector: questions
- name: fill_in_the_blank
  endpoint:
    path: /api/fill_in_the_blank
    method: POST
    data_selector: questions
- name: order
  endpoint:
    path: /api/order
    method: POST
    data_selector: questions
- name: hotspot
  endpoint:
    path: /api/hotspot
    method: POST
    data_selector: questions
- name: select_from_list
  endpoint:
    path: /api/select_from_list
    method: POST
    data_selector: questions
- name: short_answer
  endpoint:
    path: /api/short_answer
    method: POST
    data_selector: questions
- name: drag_and_drop
  endpoint:
    path: /api/drag_and_drop
    method: POST
    data_selector: questions
- name: match
  endpoint:
    path: /api/match
    method: POST
    data_selector: questions
- name: extended_match
  endpoint:
    path: /api/extended_match
    method: POST
    data_selector: questions
- name: comprehensive_integrated_puzzle
  endpoint:
    path: /api/comprehensive_integrated_puzzle
    method: POST
    data_selector: questions
- name: financial_statement
  endpoint:
    path: /api/financial_statement
    method: POST
    data_selector: questions
- name: programming
  endpoint:
    path: /api/programming
    method: POST
    data_selector: questions
- name: mathematical_question
  endpoint:
    path: /api/mathematical_question
    method: POST
    data_selector: questions
- name: essay
  endpoint:
    path: /api/essay
    method: POST
    data_selector: questions
- name: file_response
  endpoint:
    path: /api/file_response
    method: POST
    data_selector: questions
- name: section
  endpoint:
    path: /api/section
    method: POST
    data_selector: sections
- name: page
  endpoint:
    path: /api/page
    method: POST
    data_selector: pages
- name: multiple_choice
  endpoint:
    path: /api/multiple-choice
    method: GET
    data_selector: items
    params: {}
- name: Item Options
  endpoint:
    path: /v1/docs/using-item-options
    method: GET
    data_selector: options
    params: {}
- name: Item Tags
  endpoint:
    path: /v1/docs/using-item-tags
    method: GET
    data_selector: tags
    params: {}
- name: multiple_choice
  endpoint:
    path: /docs/multiple-choice
    method: GET
    data_selector: items
    params: {}
- name: extended_multiple_choice
  endpoint:
    path: /api/v1/extended_multiple_choice
    method: GET
    data_selector: items
    params: {}
- name: extended_multiple_choice
  endpoint:
    path: /api/v1/extended_multiple_choice
    method: POST
    data_selector: data
    params: {}
- name: multiple_response
  endpoint:
    path: /services/data/vXX.X/sobjects/MultipleResponse
    method: GET
    data_selector: records
    params: {}
- name: multiple_response
  endpoint:
    path: /api/multiple-response
    method: GET
    data_selector: records
    params: {}
- name: multiple_response
  endpoint:
    path: /v1/docs/multiple-response
    method: GET
    data_selector: records
- name: multiple_response
  endpoint:
    path: /api/v1/multiple_response
    method: POST
    data_selector: questions
    params: {}
- name: Either/Or
  endpoint:
    path: /api/eitheror
    method: GET
    data_selector: items
    params: {}
- name: either_or
  endpoint:
    path: /api/v1/eitheror
    method: GET
    data_selector: records
    params: {}
- name: numeric_question
  endpoint:
    path: /api/numeric/questions
    method: POST
    data_selector: question_data
    params: {}
- name: fill_in_the_blank
  endpoint:
    path: /api/v1/fill-in-the-blank
    method: POST
    data_selector: question_data
- name: numeric
  endpoint:
    path: /api/v1/numeric
    method: POST
    data_selector: item
    params: {}
- name: Order
  endpoint:
    path: /order
    method: POST
    data_selector: order_questions
    params: {}
- name: fill_in_the_blank
  endpoint:
    path: /api/fill-in-the-blank
    method: POST
    data_selector: item
    params: {}
- name: hotspot_item
  endpoint:
    path: /api/hotspot
    method: POST
    data_selector: items
    params: {}
- name: order_question
  endpoint:
    path: /order/questions
    method: POST
    data_selector: questions
    params: {}
- name: SFL_questions
  endpoint:
    path: /api/sfl_questions
    method: GET
    data_selector: questions
    params: {}
- name: short_answer
  endpoint:
    path: /docs/short-answer
    method: GET
    data_selector: records
- name: select_from_list
  endpoint:
    path: /api/select-from-list
    method: GET
    data_selector: records
    params: {}
- name: drag_and_drop
  endpoint:
    path: /api/v1/drag-and-drop
    method: POST
    data_selector: question
    params: {}
- name: short_answer
  endpoint:
    path: /api/short-answer
    method: POST
    data_selector: data
    params: {}
- name: match_questions
  endpoint:
    path: /api/v1/match-questions
    method: GET
    data_selector: questions
    params: {}
- name: drag_and_drop
  endpoint:
    path: /api/v1/drag_and_drop
    method: POST
    data_selector: item
    params:
      score: max_score
- name: match_question
  endpoint:
    path: /api/v1/match
    method: POST
    data_selector: matchQuestions
    params: {}
- name: financial_statement
  endpoint:
    path: /api/v1/financial_statement
    method: GET
    data_selector: records
- name: extended_match
  endpoint:
    path: /api/v1/extended-match
    method: POST
    data_selector: data
    params: {}
- name: financial_statement
  endpoint:
    path: /api/financial_statement
    method: POST
    data_selector: financialStatementData
    params: {}
- name: Sowiso Maths Item
  endpoint:
    path: /docs/mathematical-question-2
    method: GET
    data_selector: questions
    params: {}
- name: Mathematical question
  endpoint:
    path: /maths/question
    method: GET
    data_selector: questions
    params: {}
- name: Variables
  endpoint:
    path: /maths/variables
    method: GET
    data_selector: variables
    params: {}
- name: Feedback Rules
  endpoint:
    path: /maths/feedback_rules
    method: GET
    data_selector: feedback_rules
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Essay
  endpoint:
    path: /v1/docs/how-to-add-use-items
    method: GET
    data_selector: items
    params: {}
- name: File_Response_incl_O365
  endpoint:
    path: /docs/file-response
    method: GET
    data_selector: records
- name: file_response
  endpoint:
    path: /v1/docs/file-response
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Section
  endpoint:
    path: /api/v1/sections
    method: POST
    data_selector: section
    params: {}
- name: function
  endpoint:
    path: /function
    method: GET
    data_selector: returns
- name: sw_answer
  endpoint:
    path: /sw_answer
    method: GET
    data_selector: returns
- name: sw_answer_correct
  endpoint:
    path: /sw_answer_correct
    method: GET
    data_selector: returns
- name: sw_answer_maxima
  endpoint:
    path: /sw_answer_maxima
    method: GET
    data_selector: returns
- name: sw_alist
  endpoint:
    path: /sw_alist
    method: GET
    data_selector: returns
- name: sw_comma
  endpoint:
    path: /sw_comma
    method: GET
    data_selector: returns
- name: sw_concat
  endpoint:
    path: /sw_concat
    method: GET
    data_selector: returns
- name: sw_descriptive
  endpoint:
    path: /sw_descriptive
    method: GET
    data_selector: returns
- name: sw_distrib
  endpoint:
    path: /sw_distrib
    method: GET
    data_selector: returns
- name: sw_divisor
  endpoint:
    path: /sw_divisor
    method: GET
    data_selector: returns
- name: sw_draw
  endpoint:
    path: /sw_draw
    method: GET
    data_selector: returns
- name: sw_eq
  endpoint:
    path: /sw_eq
    method: GET
    data_selector: returns
- name: sw_eq_sign
  endpoint:
    path: /sw_eq_sign
    method: GET
    data_selector: returns
- name: sw_fact
  endpoint:
    path: /sw_fact
    method: GET
    data_selector: returns
- name: sw_finance
  endpoint:
    path: /sw_finance
    method: GET
    data_selector: returns
- name: sw_fraction
  endpoint:
    path: /sw_fraction
    method: GET
    data_selector: returns
- name: sw_gcd
  endpoint:
    path: /sw_gcd
    method: GET
    data_selector: returns
- name: sw_ge
  endpoint:
    path: /sw_ge
    method: GET
    data_selector: returns
- name: sw_gt
  endpoint:
    path: /sw_gt
    method: GET
    data_selector: returns
- name: sw_iplot
  endpoint:
    path: /sw_iplot
    method: GET
    data_selector: returns
- name: sw_image
  endpoint:
    path: /sw_image
    method: GET
    data_selector: returns
- name: sw_ilist
  endpoint:
    path: /sw_ilist
    method: GET
    data_selector: returns
- name: sw_int
  endpoint:
    path: /sw_int
    method: GET
    data_selector: returns
- name: sw_lang
  endpoint:
    path: /sw_lang
    method: GET
    data_selector: returns
- name: sw_lcm
  endpoint:
    path: /sw_lcm
    method: GET
    data_selector: returns
- name: sw_le
  endpoint:
    path: /sw_le
    method: GET
    data_selector: returns
- name: sw_logic
  endpoint:
    path: /sw_logic
    method: GET
    data_selector: returns
- name: sw_lsu
  endpoint:
    path: /sw_lsu
    method: GET
    data_selector: returns
- name: sw_lt
  endpoint:
    path: /sw_lt
    method: GET
    data_selector: returns
- name: sw_mathml
  endpoint:
    path: /sw_mathml
    method: GET
    data_selector: returns
- name: sw_maxima
  endpoint:
    path: /sw_maxima
    method: GET
    data_selector: returns
- name: sw_maxima_native
  endpoint:
    path: /sw_maxima_native
    method: GET
    data_selector: returns
- name: sw_maxima_list
  endpoint:
    path: /sw_maxima_list
    method: GET
    data_selector: returns
- name: sw_name
  endpoint:
    path: /sw_name
    method: GET
    data_selector: returns
- name: sw_ne
  endpoint:
    path: /sw_ne
    method: GET
    data_selector: returns
- name: sw_normal
  endpoint:
    path: /sw_normal
    method: GET
    data_selector: returns
- name: sw_not
  endpoint:
    path: /sw_not
    method: GET
    data_selector: returns
- name: sw_number_of_divisors
  endpoint:
    path: /sw_number_of_divisors
    method: GET
    data_selector: returns
- name: sw_openmath
  endpoint:
    path: /sw_openmath
    method: GET
    data_selector: returns
- name: sw_plot
  endpoint:
    path: /sw_plot
    method: GET
    data_selector: returns
- name: sw_rand_sign
  endpoint:
    path: /sw_rand_sign
    method: GET
    data_selector: returns
- name: sw_rand_exclude
  endpoint:
    path: /sw_rand_exclude
    method: GET
    data_selector: returns
- name: sw_rand_steps
  endpoint:
    path: /sw_rand_steps
    method: GET
    data_selector: returns
- name: sw_rand_divisors
  endpoint:
    path: /sw_rand_divisors
    method: GET
    data_selector: returns
- name: sw_rand_float
  endpoint:
    path: /sw_rand_float
    method: GET
    data_selector: returns
- name: sw_rank
  endpoint:
    path: /sw_rank
    method: GET
    data_selector: returns
- name: sw_round_sig
  endpoint:
    path: /sw_round_sig
    method: GET
    data_selector: returns
- name: sw_root
  endpoint:
    path: /sw_root
    method: GET
    data_selector: returns
- name: sw_R
  endpoint:
    path: /sw_R
    method: GET
    data_selector: returns
- name: sw_shuffle
  endpoint:
    path: /sw_shuffle
    method: GET
    data_selector: returns
- name: sw_sn
  endpoint:
    path: /sw_sn
    method: GET
    data_selector: returns
- name: page
  endpoint:
    path: /services/data/vXX.X/sobjects/Page
    method: GET
    data_selector: records
    params: {}
- name: page
  endpoint:
    path: /api/pages
    method: GET
    data_selector: records
- name: Essay
  endpoint:
    path: /api/v1/essay
    method: POST
    data_selector: item
    params: {}
- name: section
  endpoint:
    path: /api/sections
    method: POST
    data_selector: sectionData
    params: {}
- name: page
  endpoint:
    path: /api/v1/page
    method: GET
    data_selector: records
    params: {}
- name: page
  endpoint:
    path: /docs/page
    method: GET
    data_selector: records
- name: Item ID
  endpoint:
    path: /item-ids
    method: GET
    data_selector: items
- name: items
  endpoint:
    path: /export/items
    method: GET
    data_selector: items
    params: {}
- name: export_items
  endpoint:
    path: /v1/docs/webservices-1
    method: GET
    data_selector: export
- name: item_status
  endpoint:
    path: /api/item/status
    method: GET
    data_selector: status
- name: learning_objectives
  endpoint:
    path: /api/item/learning_objectives
    method: GET
    data_selector: objectives
- name: item_taxonomy
  endpoint:
    path: /api/item/taxonomy
    method: GET
    data_selector: taxonomy
- name: topics
  endpoint:
    path: /api/item/topics
    method: GET
    data_selector: topics
- name: item_purpose
  endpoint:
    path: /api/item/purpose
    method: GET
    data_selector: purpose
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: item_revision_history
  endpoint:
    path: /item/revision/history
    method: GET
    data_selector: revision_history
- name: item_statistics
  endpoint:
    path: /item/statistics
    method: GET
    data_selector: statistics
- name: Item ID
  endpoint:
    path: /docs/item-ids-in-cirrus
    method: GET
    data_selector: Item IDs
    params: {}
- name: order_question
  endpoint:
    path: /v1/docs/order
    method: GET
    data_selector: examples
- name: multiple_response
  endpoint:
    path: /v1/docs/multiple-response
    method: GET
    data_selector: examples
- name: extended_match
  endpoint:
    path: /v1/docs/extended-match
    method: GET
    data_selector: examples
- name: hotspot
  endpoint:
    path: /v1/docs/hotspot
    method: GET
    data_selector: examples
- name: items
  endpoint:
    path: /export/items
    method: POST
    data_selector: data
    params: {}
- name: item_statistics
  endpoint:
    path: /api/item/statistics
    method: GET
    data_selector: statistics
    params: {}
- name: export_items
  endpoint:
    path: /v1/docs/webservices-1
    method: GET
    data_selector: records
    params: {}
- name: assessment
  endpoint:
    path: /v1/docs/assessment-overview
    method: GET
- name: assessment_dashboard
  endpoint:
    path: /v1/docs/assessment-dashboard
    method: GET
- name: assessment_options
  endpoint:
    path: /v1/docs/step-2-assessment-options
    method: GET
- name: manual_question_selection
  endpoint:
    path: /v1/docs/manual-question-selection
    method: GET
- name: assessment_form_introduction
  endpoint:
    path: /v1/docs/assessment-form-introduction
    method: GET
- name: assessment_scales
  endpoint:
    path: /v1/docs/assessment-scales
    method: GET
- name: publish_assessment
  endpoint:
    path: /v1/docs/step-5-publish-assessment
    method: GET
- name: assessment
  endpoint:
    path: /services/data/vXX.X/sobjects/Assessment
    method: GET
    data_selector: records
    params: {}
- name: assessments
  endpoint:
    path: /assessments
    method: GET
    data_selector: assessments
    params: {}
- name: Order
  endpoint:
    path: /v1/docs/order
    method: GET
    data_selector: records
- name: Multiple Response
  endpoint:
    path: /v1/docs/multiple-response
    method: GET
    data_selector: records
- name: Extended Match
  endpoint:
    path: /v1/docs/extended-match
    method: GET
    data_selector: records
- name: Hotspot
  endpoint:
    path: /v1/docs/hotspot
    method: GET
    data_selector: records
- name: statistics
  endpoint:
    path: /docs/statistics-on-items
    method: GET
    data_selector: statistics
- name: assessment
  endpoint:
    path: /v1/assessments
    method: GET
    data_selector: records
- name: statistics
  endpoint:
    path: /v1/docs/statistics
    method: GET
    data_selector: statistics_data
- name: assessment
  endpoint:
    path: /api/v1/assessments
    method: POST
    data_selector: data
    params: {}
- name: assessments
  endpoint:
    path: /v1/assessments
    method: POST
    data_selector: assessment
    params: {}
- name: assessment
  endpoint:
    path: /v1/docs/assessment-overview
    method: GET
    data_selector: records
    params: {}
- name: assessments
  endpoint:
    path: /v1/docs/assessment-overview
    method: GET
    data_selector: assessments
    params: {}
- name: assessment_options
  endpoint:
    path: /v1/assessment/options
    method: GET
    data_selector: options
    params: {}
- name: Review Session
  endpoint:
    path: /v1/docs/candidate-review
    method: GET
- name: Score Reports
  endpoint:
    path: /v1/docs/score-reports
    method: GET
- name: Assessment Scales
  endpoint:
    path: /v1/docs/assessment-scales
    method: GET
- name: Candidate Feedback
  endpoint:
    path: /v1/docs/candidate-feedback
    method: GET
- name: Safe Exam Browser
  endpoint:
    path: /v1/docs/safe-exam-browser-integration
    method: GET
- name: Proctorio
  endpoint:
    path: /v1/docs/proctorio
    method: GET
- name: assessment
  endpoint:
    path: /api/v1/assessments
    method: GET
    data_selector: data
    params:
      incremental: updatedAt
- name: assessment
  endpoint:
    path: /v1/assessments
    method: POST
    data_selector: assessment
- name: questions
  endpoint:
    path: /api/v1/questions
    method: GET
    data_selector: data
    params: {}
- name: blueprint
  endpoint:
    path: /blueprint
    method: GET
- name: assessment_options
  endpoint:
    path: /api/v1/assessment/options
    method: GET
    data_selector: results
    params: {}
- name: assessment_form
  endpoint:
    path: /api/assessment/form
    method: POST
    data_selector: form
    params: {}
- name: question_selection
  endpoint:
    path: /api/v1/questions
    method: GET
    data_selector: questions
    params: {}
- name: assessment_form
  endpoint:
    path: /v1/docs/assessment-form-introduction
    method: GET
    data_selector: content
    params: {}
- name: topics
  endpoint:
    path: /api/v1/topics
    method: GET
    data_selector: records
    params: {}
- name: assessment_questions
  endpoint:
    path: /v1/assessment/questions
    method: GET
    data_selector: questions
    params: {}
- name: blueprint
  endpoint:
    path: /docs/step-1-create-new-assessment
    method: GET
    data_selector: collections
    params: {}
- name: multiple_forms
  endpoint:
    path: /api/multiple_forms
    method: GET
    data_selector: forms
    params: {}
- name: assessment_form
  endpoint:
    path: /v1/docs/assessment-form
    method: GET
    data_selector: pages
    params: {}
- name: assessment_form_questions
  endpoint:
    path: /v1/docs/assessment-form-questions
    method: GET
    data_selector: questions
    params: {}
- name: marking_workflow
  endpoint:
    path: /v1/docs/marking_workflow
    method: GET
    data_selector: workflows
    params: {}
- name: assessment_scale
  endpoint:
    path: /v1/docs/assessment-scales
    method: GET
    data_selector: scales
    params: {}
- name: angoff_method
  endpoint:
    path: /v1/docs/angoff-method
    method: GET
    data_selector: cut_scores
    params: {}
- name: assessment
  endpoint:
    path: /publish-assessment
    method: POST
    data_selector: status
    params: {}
- name: assessment
  endpoint:
    path: /api/assessments
    method: GET
    data_selector: records
    params: {}
- name: marking_workflow
  endpoint:
    path: /v1/docs/marking_workflow
    method: GET
    data_selector: workflows
    params: {}
- name: assessments
  endpoint:
    path: /v1/assessments
    method: GET
    data_selector: data
    params: {}
- name: assessments
  endpoint:
    path: /api/v1/assessments
    method: GET
    data_selector: data
- name: assessment
  endpoint:
    path: /sharing/assessment
    method: GET
    data_selector: assessment_data
    params: {}
- name: Assessment
  endpoint:
    path: /api/assessment
    method: GET
    data_selector: assessments
    params: {}
- name: notepad
  endpoint:
    path: /notepad
    method: GET
    data_selector: notes
    params: {}
- name: assessment
  endpoint:
    path: /services/data/vXX.X/sobjects/Assessment
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: paper_based_exam
  endpoint:
    path: /v1/docs/paper-based-exam-printing
    method: GET
    data_selector: results
    params: {}
- name: Feedback Administration
  endpoint:
    path: /docs/candidate-feedback-administration
    method: GET
    data_selector: content
    params: {}
- name: notepad
  endpoint:
    path: /notepad
    method: GET
    data_selector: notes
    params: {}
- name: schedule
  endpoint:
    path: /v1/docs/create-a-schedule
    method: GET
    data_selector: records
    params: {}
- name: candidates
  endpoint:
    path: /v1/docs/scheduling-adding-candidates
    method: GET
    data_selector: records
    params: {}
- name: invigilators
  endpoint:
    path: /v1/docs/scheduling-adding-invigilators
    method: GET
    data_selector: records
    params: {}
- name: activate_schedule
  endpoint:
    path: /v1/docs/activating-schedule
    method: GET
    data_selector: records
    params: {}
- name: paper_based_exam
  endpoint:
    path: /v1/docs/paper-based-exam-printing
    method: GET
    data_selector: document
    params: {}
- name: schedule
  endpoint:
    path: /docs/create-a-schedule
    method: GET
    data_selector: schedule_data
    params: {}
- name: schedule
  endpoint:
    path: /v1/docs/create-a-schedule
    method: POST
    data_selector: scheduleData
    params: {}
- name: candidates
  endpoint:
    path: /v1/docs/scheduling-adding-candidates
    method: GET
    data_selector: candidateList
    params: {}
- name: invigilators
  endpoint:
    path: /v1/docs/scheduling-adding-invigilators
    method: GET
    data_selector: invigilatorList
    params: {}
- name: activate_schedule
  endpoint:
    path: /v1/docs/activating-schedule
    method: POST
    data_selector: activationResponse
    params: {}
- name: schedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: schedules
    params: {}
- name: schedule
  endpoint:
    path: /api/schedule
    method: GET
    data_selector: records
    params: {}
- name: schedule
  endpoint:
    path: /api/schedule
    method: GET
    data_selector: schedules
- name: schedule
  endpoint:
    path: /docs/create-a-schedule
    method: GET
    data_selector: schedule
- name: scheduling_candidates
  endpoint:
    path: /scheduling/candidates
    method: POST
    data_selector: candidates
    params: {}
- name: schedule
  endpoint:
    path: /scheduling
    method: GET
    data_selector: schedules
    params: {}
- name: schedule
  endpoint:
    path: /api/schedules
    method: GET
    data_selector: schedules
    params: {}
- name: schedule
  endpoint:
    path: /schedules
    method: GET
    data_selector: schedules
    params: {}
- name: candidates
  endpoint:
    path: /scheduling/add-candidates
    method: POST
    data_selector: candidates
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: invigilators
  endpoint:
    path: /scheduling/invigilators
    method: GET
    data_selector: invigilators
- name: assessment_options
  endpoint:
    path: /v1/docs/step-2-assessment-options
    method: GET
    data_selector: options
- name: invigilation_overview
  endpoint:
    path: /invigilation-overview
    method: GET
    data_selector: schedules
- name: invigilator
  endpoint:
    path: /v1/invigilation
    method: GET
    data_selector: candidates
    params: {}
- name: invigilator_actions
  endpoint:
    path: /docs/invigilation-invigilator-actions-and-print-options
    method: GET
    data_selector: actions
- name: candidate_logs
  endpoint:
    path: /docs/invigilation-candidate-logs
    method: GET
    data_selector: logs
- name: invigilation_overview
  endpoint:
    path: /v1/docs/invigilation-overview
    method: GET
    data_selector: schedules
- name: invigilation_overview
  endpoint:
    path: /invigilation/overview
    method: GET
    data_selector: schedules
    params: {}
- name: invigilator_dashboard
  endpoint:
    path: /invigilator/dashboard
    method: GET
    data_selector: candidates
    params: {}
- name: candidate_logs
  endpoint:
    path: /candidate/logs
    method: GET
    data_selector: logs
    params: {}
- name: candidate_review
  endpoint:
    path: /create-candidate-review
    method: POST
    data_selector: records
- name: candidate_review
  endpoint:
    path: /docs/create-candidate-review
    method: GET
    data_selector: results
- name: candidate_review
  endpoint:
    path: /api/candidate_review
    method: POST
    data_selector: review
    params: {}
- name: candidate_review
  endpoint:
    path: /services/data/vXX.X/sobjects/CandidateReview
    method: GET
    data_selector: records
- name: candidate_review
  endpoint:
    path: /v1/docs/create-candidate-review
    method: POST
    data_selector: results
    params: {}
- name: candidate_review_options
  endpoint:
    path: /api/v1/candidate_review/options
    method: GET
    data_selector: options
    params: {}
- name: candidate_review_options
  endpoint:
    path: /api/candidate_review/options
    method: GET
    data_selector: options
- name: candidate_review
  endpoint:
    path: /v1/candidate_review
    method: POST
    data_selector: data
    params: {}
- name: candidate_review
  endpoint:
    path: /v1/candidate-reviews
    method: GET
    data_selector: records
    params: {}
- name: candidate_review
  endpoint:
    path: /api/v1/candidate_review
    method: POST
    data_selector: data
    params: {}
- name: candidate_review
  endpoint:
    path: /api/candidate_review
    method: GET
    data_selector: records
    params: {}
- name: review_sessions
  endpoint:
    path: /api/v1/review_sessions
    method: GET
    data_selector: data
    params: {}
- name: assessments
  endpoint:
    path: /services/data/vXX.X/sobjects/Assessment
    method: GET
    data_selector: records
    params: {}
- name: statuses
  endpoint:
    path: /meaning-of-statuses
    method: GET
    data_selector: statuses
    params: {}
- name: statuses
  endpoint:
    path: /meaning-of-all-statuses
    method: GET
    data_selector: statuses
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: to_do_list
  endpoint:
    path: /v1/docs/coordinator-dashboard#todo-list
    method: GET
    data_selector: tasks
    params: {}
- name: details
  endpoint:
    path: /v1/docs/coordinator-dashboard#details
    method: GET
    data_selector: details
    params: {}
- name: progress_by_assessor
  endpoint:
    path: /v1/docs/coordinator-dashboard#progress-per-assessor
    method: GET
    data_selector: progress_assessor
    params: {}
- name: progress_by_round
  endpoint:
    path: /v1/docs/coordinator-dashboard#progress-by-rounds
    method: GET
    data_selector: progress_round
    params: {}
- name: export_results
  endpoint:
    path: /v1/docs/coordinator-dashboard#export-results
    method: GET
    data_selector: export
    params: {}
- name: progress_per_assessor
  endpoint:
    path: /v1/progress/assessor
    method: GET
    data_selector: progress
- name: progress_by_rounds
  endpoint:
    path: /v1/progress/rounds
    method: GET
    data_selector: progress
- name: export_results
  endpoint:
    path: /v1/results/export
    method: GET
    data_selector: results
- name: progress_per_assessor
  endpoint:
    path: /v1/progress/assessor
    method: GET
    data_selector: progress
- name: progress_by_rounds
  endpoint:
    path: /v1/progress/rounds
    method: GET
    data_selector: rounds
- name: export_results
  endpoint:
    path: /v1/results/export
    method: GET
    data_selector: results
- name: assessors
  endpoint:
    path: /api/v1/assessors
    method: GET
    data_selector: data
    params: {}
- name: assessors
  endpoint:
    path: /v1/docs/assessors
    method: GET
    data_selector: results
    params: {}
- name: allocation
  endpoint:
    path: /services/data/vXX.X/sobjects/Allocation
    method: GET
    data_selector: records
- name: allocation
  endpoint:
    path: /services/data/vXX.X/sobjects/Allocation
    method: GET
    data_selector: records
- name: Score Distribution
  endpoint:
    path: /score-distribution
    method: GET
- name: Score Distribution
  endpoint:
    path: /score-distribution
    method: GET
    data_selector: performance
    params: {}
- name: assessments
  endpoint:
    path: /api/assessments
    method: GET
    data_selector: results
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: records
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: records
    params: {}
- name: submissions
  endpoint:
    path: /marking/assess
    method: GET
    data_selector: submissions
    params: {}
- name: submissions
  endpoint:
    path: /v1/docs/submissions
    method: GET
    data_selector: records
    params: {}
- name: progress_report
  endpoint:
    path: /v1/docs/progress-report
    method: GET
    data_selector: records
    params: {}
- name: submissions
  endpoint:
    path: /v1/docs/submissions
    method: GET
    data_selector: records
    params: {}
- name: progress_report
  endpoint:
    path: /v1/docs/progress-report
    method: GET
    data_selector: records
    params: {}
- name: scoring_panel
  endpoint:
    path: /scoring/panel
    method: GET
- name: moderation_rounds
  endpoint:
    path: /api/v1/moderation_rounds
    method: POST
    data_selector: data
    params: {}
- name: candidate_summary
  endpoint:
    path: /api/v1/candidate-summary
    method: GET
    data_selector: responses
    params: {}
- name: candidate_summary
  endpoint:
    path: /api/v1/candidatesummary
    method: GET
    data_selector: responses
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: results
  endpoint:
    path: /results
    method: GET
    data_selector: results
- name: export
  endpoint:
    path: /export
    method: GET
    data_selector: export_options
- name: remarking
  endpoint:
    path: /v1/docs/remarking
    method: GET
    data_selector: schedules
    params: {}
- name: void_attempts
  endpoint:
    path: /api/docs/void-attempt
    method: POST
    data_selector: void_attempts
- name: void_attempts_during_marking
  endpoint:
    path: /api/docs/void-attempts-duringafter-marking
    method: POST
    data_selector: void_attempts
- name: void_attempts
  endpoint:
    path: /api/docs/void-attempt
    method: POST
- name: candidate_results
  endpoint:
    path: /api/v1/candidate/results
    method: GET
    data_selector: results
    params: {}
- name: candidate_results
  endpoint:
    path: /services/data/vXX.X/sobjects/CandidateResults
    method: GET
    data_selector: records
    params: {}
- name: assessment_performance
  endpoint:
    path: /api/v1/assessment/performance
    method: GET
    data_selector: performance_data
- name: candidate_results
  endpoint:
    path: /api/v1/candidate/results
    method: GET
    data_selector: results
- name: assessment_performance
  endpoint:
    path: /reports/assessment-performance
    method: GET
    data_selector: data
- name: statistics_rit_and_rir_values
  endpoint:
    path: /docs/statistics-rit-and-rir-values
    method: GET
    data_selector: values
    params: {}
- name: assessment_performance
  endpoint:
    path: /api/v1/assessment-performance
    method: GET
    data_selector: data
    params: {}
- name: assessment_performance
  endpoint:
    path: /reports/assessment-performance
    method: GET
    data_selector: assessments
- name: candidate_results
  endpoint:
    path: /api/candidates/results
    method: GET
    data_selector: results
    params: {}
- name: item_discrimination
  endpoint:
    path: /docs/statistics-rit-and-rir-values
    method: GET
    data_selector: item_discrimination
    params: {}
- name: candidate_scores
  endpoint:
    path: /candidate/scores
    method: GET
    data_selector: scores
    params: {}
- name: candidate_answers
  endpoint:
    path: /candidate/answers
    method: GET
    data_selector: answers
    params: {}
- name: candidate_results
  endpoint:
    path: /candidate/results
    method: GET
    data_selector: results
    params: {}
- name: user
  endpoint:
    path: /services/data/vXX.X/sobjects/User
    method: GET
    data_selector: records
    params: {}
- name: candidate_results
  endpoint:
    path: /api/candidates/results
    method: GET
    data_selector: results
    params: {}
- name: candidate_scores
  endpoint:
    path: /api/candidate_scores
    method: GET
    data_selector: scores
- name: candidate_answers
  endpoint:
    path: /api/candidate_answers
    method: GET
    data_selector: answers
- name: candidate_results
  endpoint:
    path: /api/candidate_results
    method: GET
    data_selector: results
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /services/data/vXX.X/sobjects/User
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: user_management
  endpoint:
    path: /admin/users
    method: GET
    data_selector: users
    params: {}
- name: add_user
  endpoint:
    path: /manual-administration-of-users#add-user
    method: POST
- name: update_user
  endpoint:
    path: /manual-administration-of-users#update-user
    method: PUT
- name: delete_user
  endpoint:
    path: /manual-administration-of-users#delete-user
    method: DELETE
- name: users
  endpoint:
    path: /admin/users
    method: GET
    data_selector: users
    params: {}
- name: users
  endpoint:
    path: /import/users
    method: POST
    data_selector: records
- name: import_users
  endpoint:
    path: /importing-users
    method: POST
    data_selector: import_result
    params: {}
- name: user_management
  endpoint:
    path: /api/v1/user_management
    method: GET
    data_selector: users
    params: {}
- name: hierarchies
  endpoint:
    path: /admin/hierarchies
    method: GET
    data_selector: hierarchy_levels
- name: cluster
  endpoint:
    path: /admin/clusters
    method: GET
    data_selector: clusters
- name: hierarchies
  endpoint:
    path: /admin/hierarchies
    method: GET
    data_selector: hierarchy_levels
- name: collections
  endpoint:
    path: /admin/content-management/collections
    method: GET
    data_selector: collections
    params: {}
- name: assessments
  endpoint:
    path: /admin/content-management/assessments
    method: GET
    data_selector: assessments
    params: {}
- name: schedules
  endpoint:
    path: /admin/content-management/schedules
    method: GET
    data_selector: schedules
    params: {}
- name: feedback
  endpoint:
    path: /admin/content-management/feedback
    method: GET
    data_selector: feedback
    params: {}
- name: clusters
  endpoint:
    path: /clusters
    method: GET
- name: cluster
  endpoint:
    path: /admin/clusters
    method: GET
    data_selector: clusters
- name: registration_forms
  endpoint:
    path: /docs/registration-forms
    method: GET
- name: registration_form
  endpoint:
    path: /api/registration_forms
    method: GET
    data_selector: forms
    params: {}
- name: collections
  endpoint:
    path: /api/content/collections
    method: GET
    data_selector: collections
- name: assessments
  endpoint:
    path: /api/content/assessments
    method: GET
    data_selector: assessments
- name: schedules
  endpoint:
    path: /api/content/schedules
    method: GET
    data_selector: schedules
- name: feedback
  endpoint:
    path: /api/content/feedback
    method: GET
    data_selector: feedback
- name: feedback_report
  endpoint:
    path: /candidate-feedback
    method: GET
    data_selector: feedback
    params: {}
- name: trash_can
  endpoint:
    path: /admin/trash_can
    method: GET
    data_selector: records
- name: themes
  endpoint:
    path: /api/themes
    method: GET
    data_selector: themes
    params: {}
- name: NDA Template
  endpoint:
    path: /api/ndatemplates
    method: GET
    data_selector: templates
- name: Assessment
  endpoint:
    path: /api/assessments
    method: GET
    data_selector: assessments
- name: registration_form
  endpoint:
    path: /api/registration_forms
    method: GET
    data_selector: forms
    params: {}
- name: trash_can
  endpoint:
    path: /admin/trash_can
    method: GET
    data_selector: items
    params: {}
- name: item_difficulty_scale
  endpoint:
    path: /docs/item-difficulty-scale
    method: GET
    data_selector: records
- name: assessment_scales
  endpoint:
    path: /admin/assessment-scales
    method: GET
    data_selector: scales
- name: keycode
  endpoint:
    path: /v1/docs/keycode
    method: GET
    data_selector: keycode
- name: learning_objectives
  endpoint:
    path: /v1/docs/adding-and-editing-learning-objectives
    method: GET
    data_selector: learningObjectives
- name: import_learning_objectives
  endpoint:
    path: /v1/docs/importing-learning-objectives
    method: POST
    data_selector: importLearningObjectives
- name: programming_question
  endpoint:
    path: /v1/docs/programming
    method: GET
    data_selector: records
- name: proctorio_templates
  endpoint:
    path: /v1/docs/proctorio-2
    method: GET
    data_selector: templates
    params: {}
- name: lock_down_options
  endpoint:
    path: /v1/docs/lock-down-options
    method: GET
    data_selector: options
    params: {}
- name: scheduling_exam
  endpoint:
    path: /v1/docs/scheduling-1
    method: GET
    data_selector: scheduling
    params: {}
- name: learning_objectives
  endpoint:
    path: /api/v1/learning_objectives
    method: GET
    data_selector: objectives
    params: {}
- name: learning_objectives
  endpoint:
    path: /v1/learningObjectives
    method: GET
    data_selector: records
    params: {}
- name: Learning Objective
  endpoint:
    path: /learningObjectives
    method: POST
    data_selector: items
    params: {}
- name: learning_objectives
  endpoint:
    path: /v1/learning-objectives
    method: GET
    data_selector: objectives
    params: {}
- name: learning_objectives
  endpoint:
    path: /v1/docs/working-with-learning-objectives
    method: GET
    data_selector: learningObjectives
    params: {}
- name: learning_objectives
  endpoint:
    path: /api/learning-objectives
    method: GET
    data_selector: records
    params: {}
- name: taxonomies
  endpoint:
    path: /admin/taxonomies
    method: GET
    data_selector: taxonomies
    params: {}
- name: learning_objectives
  endpoint:
    path: /v1/docs/importing-learning-objectives
    method: POST
    data_selector: records
- name: learning_objectives
  endpoint:
    path: /v1/docs/importing-learning-objectives
    method: POST
    data_selector: records
    params: {}
- name: labels
  endpoint:
    path: /admin/labels
    method: POST
    data_selector: labels
    params: {}
- name: learning_objective
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: user_labels
  endpoint:
    path: /admin/users/labels
    method: GET
    data_selector: labels
    params: {}
- name: taxonomies
  endpoint:
    path: /api/v1/taxonomies
    method: GET
    data_selector: data
    params: {}
- name: roles
  endpoint:
    path: /api/v1/roles
    method: GET
    data_selector: data
    params: {}
- name: site_roles
  endpoint:
    path: /v1/docs/site-roles
    method: GET
- name: collection_roles
  endpoint:
    path: /v1/docs/collection-roles
    method: GET
- name: assessment_roles
  endpoint:
    path: /v1/docs/assessment-roles
    method: GET
- name: taxonomies
  endpoint:
    path: /api/taxonomies
    method: GET
    data_selector: data
    params: {}
- name: taxonomies
  endpoint:
    path: /api/taxonomies
    method: GET
    data_selector: taxonomies
    params: {}
- name: roles
  endpoint:
    path: /v1/docs/roles
    method: GET
    data_selector: roles
- name: labels
  endpoint:
    path: /admin/labels
    method: GET
    data_selector: labels
    params: {}
- name: user_labels
  endpoint:
    path: /api/user_labels
    method: GET
    data_selector: labels
    params: {}
- name: Manage Users
  endpoint:
    path: /v1/docs/user-management-start-here
    method: GET
- name: Manage Hierarchies
  endpoint:
    path: /v1/docs/hierarchies-in-cirrus-setting-up-groups-and-subdomains
    method: GET
- name: Manage Clusters
  endpoint:
    path: /v1/docs/clusters
    method: GET
- name: Manage Content
  endpoint:
    path: /v1/docs/content-management
    method: GET
- name: Manage Themes
  endpoint:
    path: /v1/docs/themes
    method: GET
- name: Manage Integrations
  endpoint:
    path: /v1/docs
    method: GET
- name: Manage Global Settings
  endpoint:
    path: /v1/docs/rounding-rules
    method: GET
- name: Manage Assessment Settings
  endpoint:
    path: /v1/docs/assessment-scales
    method: GET
- name: Manage Learning Objectives
  endpoint:
    path: /v1/docs/working-with-learning-objectives
    method: GET
- name: Manage Taxonomies
  endpoint:
    path: /v1/docs/working-with-taxonomies
    method: GET
- name: Manage Labels
  endpoint:
    path: /v1/docs/labels
    method: GET
- name: Manage Regional Settings
  endpoint:
    path: /v1/docs/regional-settings
    method: GET
- name: Manage Roles
  endpoint:
    path: /v1/docs/roles
    method: GET
- name: Manage Lock-down Browser
  endpoint:
    path: /v1/docs/lock-down-browser
    method: GET
- name: collection_roles
  endpoint:
    path: /v1/docs/collection-roles
    method: GET
    data_selector: roles
    params: {}
- name: site_roles
  endpoint:
    path: /v1/docs/site-roles
    method: GET
- name: collection_roles
  endpoint:
    path: /v1/docs/collection-roles
    method: GET
- name: assessment_roles
  endpoint:
    path: /v1/docs/assessment-roles
    method: GET
- name: assessment_roles
  endpoint:
    path: /docs/assessment-roles
    method: GET
    data_selector: roles
    params: {}
- name: status_management
  endpoint:
    path: /status_management
    method: GET
    data_selector: statuses
    params: {}
- name: default_role
  endpoint:
    path: /default_role
    method: GET
    data_selector: defaultRole
    params: {}
- name: roles
  endpoint:
    path: /api/v1/roles
    method: GET
    data_selector: roles
    params: {}
- name: Safe Exam Browser Configuration
  endpoint:
    path: /api/docs/safe-exam-browser-tech
    method: GET
    data_selector: configuration
    params: {}
- name: roles
  endpoint:
    path: /admin/roles
    method: GET
    data_selector: roles
    params: {}
- name: available_assessments
  endpoint:
    path: /assessments/
    method: GET
- name: create_schedule
  endpoint:
    path: /schedule
    method: POST
- name: results_webhook
  endpoint:
    path: /webhooks
    method: GET
- name: user_management
  endpoint:
    path: /v1/docs/user-management-start-here
    method: GET
    data_selector: records
    params: {}
- name: assessments
  endpoint:
    path: /v1/docs/assessment-performance
    method: GET
    data_selector: records
    params: {}
- name: proctorio_settings
  endpoint:
    path: /v1/docs/proctorio-settings
    method: GET
- name: candidates_using_proctorio
  endpoint:
    path: /v1/docs/candidates-using-proctorio
    method: GET
- name: gradebook
  endpoint:
    path: /v1/docs/gradebook
    method: GET
- name: how_to_take_exam
  endpoint:
    path: /v1/docs/how-to-take-an-exam
    method: GET
- name: checklist_using_proctorio
  endpoint:
    path: /v1/docs/checklist-using-proctorio
    method: GET
- name: collection_roles
  endpoint:
    path: /docs/collection-roles
    method: GET
- name: assessment_roles
  endpoint:
    path: /assessment/roles
    method: GET
    data_selector: roles
    params: {}
- name: status_management
  endpoint:
    path: /status_management
    method: GET
    data_selector: statuses
- name: default_role
  endpoint:
    path: /default_role
    method: GET
    data_selector: role
- name: recording_options
  endpoint:
    path: /proctorio/recording_options
    method: GET
    data_selector: options
    params: {}
- name: room_recording
  endpoint:
    path: /proctorio/room_recording
    method: GET
    data_selector: options
    params: {}
- name: verifying_options
  endpoint:
    path: /proctorio/verifying_options
    method: GET
    data_selector: options
    params: {}
- name: id_verification
  endpoint:
    path: /proctorio/id_verification
    method: GET
    data_selector: options
    params: {}
- name: fullscreen_options
  endpoint:
    path: /proctorio/fullscreen_options
    method: GET
    data_selector: options
    params: {}
- name: clipboard_options
  endpoint:
    path: /proctorio/clipboard_options
    method: GET
    data_selector: options
    params: {}
- name: new_tabs_options
  endpoint:
    path: /proctorio/new_tabs_options
    method: GET
    data_selector: options
    params: {}
- name: Cirrus Configuration
  endpoint:
    path: /api/docs/safe-exam-browser-tech
    method: GET
    data_selector: configuration
    params: {}
- name: assessments
  endpoint:
    path: /assessments/
    method: GET
- name: schedule
  endpoint:
    path: /schedule
    method: POST
- name: results_webhook
  endpoint:
    path: /webhooks
    method: POST
- name: common_issues
  endpoint:
    path: /api/common_issues
    method: GET
    data_selector: issues
    params: {}
- name: proctorio_settings
  endpoint:
    path: /services/data/vXX.X/sobjects/ProctorioSettings
    method: GET
    data_selector: records
    params: {}
- name: print_and_scan_steps
  endpoint:
    path: /print-and-scan/steps
    method: GET
    data_selector: steps
    params: {}
- name: user_id_organisation_id_info
  endpoint:
    path: /print-and-scan/user-id-organisation-id
    method: GET
    data_selector: info
    params: {}
- name: exam
  endpoint:
    path: /api/v1/exams
    method: GET
    data_selector: exams
    params: {}
- name: gradebook
  endpoint:
    path: /v1/docs/gradebook
    method: GET
    data_selector: results
- name: plagiarism_detection
  endpoint:
    path: /api/plagiarism_detection
    method: POST
    data_selector: results
- name: UserID and OrganisationID
  endpoint:
    path: /docs/print-and-scan/userid-organisationid
    method: GET
    data_selector: UserID and OrganisationID details
    params: {}
- name: extra_time_candidates
  endpoint:
    path: /api/v1/extra_time
    method: GET
    data_selector: data
    params: {}
- name: office365_integration
  endpoint:
    path: /api/docs/office-365
    method: GET
    data_selector: integration_details
- name: plagiarism_control
  endpoint:
    path: /api/plagiarism_control
    method: GET
    data_selector: plagiarism_results
    params: {}
- name: assessments
  endpoint:
    path: /v1/assessments
    method: GET
- name: candidate_review
  endpoint:
    path: /v1/candidate-review
    method: GET
    data_selector: reviews
    params: {}
- name: results_overview
  endpoint:
    path: /v1/results-overview
    method: GET
    data_selector: results
    params: {}
- name: dashboard
  endpoint:
    path: /api/v1/dashboard
    method: GET
    data_selector: data
    params: {}
- name: candidate_review
  endpoint:
    path: /v1/candidate-review
    method: GET
    data_selector: results
    params: {}
- name: candidate_results
  endpoint:
    path: /v1/reports/candidate-results
    method: GET
    data_selector: results
    params: {}
- name: schedules
  endpoint:
    path: /schedules
    method: POST
    data_selector: schedules
    params: {}
- name: grading_marking_periods
  endpoint:
    path: /grading_marking_periods
    method: POST
    data_selector: grading_periods
    params: {}
- name: keycode
  endpoint:
    path: /#keycode
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: schedules
  endpoint:
    path: /schedules
    method: GET
- name: mark for anonymization
  endpoint:
    path: /anonymize/mark
    method: POST
- name: unmark for anonymization
  endpoint:
    path: /anonymize/unmark
    method: POST
- name: sub_processors
  endpoint:
    path: /api/docs/list-of-sub-processors
    method: GET
- name: dashboard
  endpoint:
    path: /dashboard
    method: GET
    data_selector: data
    params: {}
- name: Airtable
  endpoint:
    path: /services/service_management/airtable
    method: GET
- name: Atlassian
  endpoint:
    path: /services/service_management/atlassian
    method: GET
- name: Document360
  endpoint:
    path: /services/service_management/document360
    method: GET
- name: Google Workspace
  endpoint:
    path: /services/service_management/google_workspace
    method: GET
- name: Mailchimp
  endpoint:
    path: /services/service_management/mailchimp
    method: GET
- name: Pipedrive
  endpoint:
    path: /services/service_management/pipedrive
    method: GET
- name: Slack
  endpoint:
    path: /services/service_management/slack
    method: GET
- name: WeFact
  endpoint:
    path: /services/service_management/wefact
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Customer Portal pURLs
  endpoint:
    path: /purl/customer-portal
    method: GET
    data_selector: records
    params: {}
- name: Knowledge Base pURLs
  endpoint:
    path: /purl/knowledge-base
    method: GET
    data_selector: records
    params: {}
- name: Internal pURLs
  endpoint:
    path: /purl/internal
    method: GET
    data_selector: records
    params: {}
- name: schedules
  endpoint:
    path: /api/schedules
    method: POST
    data_selector: data
    params: {}
- name: grading_marking_periods
  endpoint:
    path: /api/grading_periods
    method: POST
    data_selector: data
    params: {}
- name: office365_integration
  endpoint:
    path: /api/docs/office-365
    method: GET
    data_selector: integration_details
    params: {}
- name: file_response
  endpoint:
    path: /docs/file-response#upload-template-file-ms-office365-only
    method: GET
    data_selector: file_response_details
    params: {}
- name: scoring
  endpoint:
    path: /docs/scoring#office-365-marking
    method: GET
    data_selector: scoring_details
    params: {}
- name: preview_assessment
  endpoint:
    path: /docs/preview-assessment
    method: GET
    data_selector: preview_details
    params: {}
- name: schedules
  endpoint:
    path: /schedules
    method: GET
- name: mark_for_anonymization
  endpoint:
    path: /anonymize/mark
    method: POST
- name: unmark_for_anonymization
  endpoint:
    path: /anonymize/unmark
    method: POST
- name: files_storage
  endpoint:
    path: /files/storage
    method: GET
    data_selector: files
    params: {}
- name: Document360
  endpoint:
    path: /optional-sub-processors/document360
    method: GET
- name: ImgIX
  endpoint:
    path: /optional-sub-processors/imgix
    method: GET
- name: webspellchecker.net
  endpoint:
    path: /optional-sub-processors/webspellchecker
    method: GET
- name: Proctorio
  endpoint:
    path: /add-on-sub-processors/proctorio
    method: GET
- name: Sowiso
  endpoint:
    path: /sub-contractors/sowiso
    method: GET
- name: Ecobit
  endpoint:
    path: /customer-sub-contractors/ecobit
    method: GET
- name: ProctorU
  endpoint:
    path: /customer-sub-contractors/proctoru
    method: GET
- name: Readspeaker
  endpoint:
    path: /customer-sub-contractors/readspeaker
    method: GET
- name: TurnItIn
  endpoint:
    path: /customer-sub-contractors/turnitin
    method: GET
- name: Airtable
  endpoint:
    path: /service-management-sub-processors/airtable
    method: GET
- name: Atlassian
  endpoint:
    path: /service-management-sub-processors/atlassian
    method: GET
- name: Google Workspace
  endpoint:
    path: /service-management-sub-processors/google-workspace
    method: GET
- name: Mailchimp
  endpoint:
    path: /service-management-sub-processors/mailchimp
    method: GET
- name: Pipedrive
  endpoint:
    path: /service-management-sub-processors/pipedrive
    method: GET
- name: Slack
  endpoint:
    path: /service-management-sub-processors/slack
    method: GET
- name: WeFact
  endpoint:
    path: /service-management-sub-processors/wefact
    method: GET
- name: Permanent URLs
  endpoint:
    path: /api/docs/cirrus-platform-urls
    method: GET
    data_selector: urls
    params: {}
- name: User Agreement
  endpoint:
    path: /purl/user-agreement
    method: GET
- name: Service Level Agreement
  endpoint:
    path: /purl/sla
    method: GET
- name: Service Agreement Template
  endpoint:
    path: /purl/service-agreement-template
    method: GET
- name: Data Protection Agreement
  endpoint:
    path: /purl/dpa
    method: GET
- name: Privacy Policy (Cirrus Platform and Service Management)
  endpoint:
    path: /purl/privacy-policy/
    method: GET
- name: Customer Portal
  endpoint:
    path: /purl/portal
    method: GET
- name: Signup Customer Portal
  endpoint:
    path: /purl/signup
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
- name: products
  endpoint:
    path: /api/v1/products
    method: GET
    data_selector: data
- name: Safe Exam Browser Configuration
  endpoint:
    path: /api/docs/safe-exam-browser-tech
    method: GET
    data_selector: configuration
    params: {}
notes:
- The API token is customer and domain specific and ensures secure separation of the
  data.
- The users of the Cirrus REST API have managed to avoid hard rate limits being enforced.
- Cirrus reserves the right to introduce rate limits and/or propose charges for excess
  usage.
- Use the Help Widget inside Cirrus (bottom-left question mark).
- Visit our Help Centre.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Auto scored questions already have a score.
- Use the 'Save' button's dropdown for more options.
- Users can be added manually, imported from Excel or automatically synchronised from
  a learner management system using the Cirrus API's.
- Getting these to work requires some technical expertise, that's why the documentation
  is available in our Developer portal.
- The Services Agreement and its Annex 1 - Order Form shall be signed.
- Cirrus supports SAML 2.0 for Authentication of existing users only
- Without metadata URL you must manually keep the metadata up-to-date!
- if the URL your organisation configured under 6. Metadata upload - from URL no longer
  returns an XML like this example or validUntil is in the past, contact your own
  IT (and not Cirrus).
- Normally to safeguard its integrity and authenticity a SAMLResponse token is signed
  with a XML Signature using a valid certificate (not shown).
- LTI 1.x/2.x no longer secure
- IFRAME or framing of Cirrus no longer supported
- Do not rely on On-the-Fly for Exams!
- Ensure 'Learner' is mapped to a Cirrus 'Candidate' role or else candidates will
  get a 400 Error.
- 'Authorization: EAPI {token}'
- Documentation targets a technical audience even though many sections often start
  with a functional overview and key benefits.
- Do not run Cirrus in an IFRAME/frame.
- Cirrus does not provide support on IP whitelisting.
- Service URLs subject to change
- IPv6 has been developed to future proof the Internet by replacing IPv4 which is
  running out of addresses.
- More governments and customers are starting to make IPv6 support a requirement to
  prepare for the future.
- IP whitelisting should not be in place, as Cirrus on Amazon AWS uses many different
  IP addresses, but if it were, it would of course be impacted as IPv6 uses different
  IP addresses.
- Authorization token must be prefixed with 'EAPI ' for all requests.
- Requires API key for authentication.
- Using the API it possible to update an assessment even if an assessment author has
  opened it in the platform.
- Cache the results of this call on your side for e.g. 1 hour or more to prevent causing
  unnecessary load on our API servers, especially for high volume traffic.
- Using the API it possible to update a schedule even if a scheduler has opened it
  in the platform.
- Authorization token must be provided in the header for all requests.
- ScheduleExtID must be unique for each request.
- Results must be assessed/marked
- Results must be published
- API Throttling is in place for 3000 calls per day
- Webhook will retry for a total of 10 attempts with a randomized exponential delay
  if the receiving server is down.
- Valid messages must always return HTTP status 200.
- In order to troubleshoot Webhook issues you need technical expertise and sysadmin
  access to the detailed logs of the receiving system.
- Carefully check your Webhook configuration in Cirrus, in particular is it 'Active',
  is your 'Payload URL' and 'Payload template' correct, but also the other fields.
- Check in Cirrus if the results for your (test) attempt have been published (or else
  the Webhook won't have been triggered).
- Check the 'External ID's in Cirrus of your Candidate (User ID), Assessment (External
  ID), and Schedule (External ID).
- When following steps of Webhook issues, in particular check the 'Payload Template'
  for errors, e.g. tokens misspelled or missing a '{' or '}', and check the related
  objects in Cirrus if the information is correctly filled in there.
- Requires strong encryption like TLS 1.2+.
- FTPS cannot be accessed directly.
- Minimum 1 Microsoft 365 Business Basic license is required.
- Full Administrative access to the Microsoft 365 Business account is necessary.
- Does the configured user have a Office 365 Business license?
- Does the configured user have the correct permissions?
- Are the sharing permissions correctly setup, please make sure 'sharepoint share
  permission' is set to 'Anyone'
- In the advanced sharing permissions it's possible to setup an expire date. We advise
  not to use this
- Ensure Turnitin URL does not contain tii-sandbox.com for production usage.
- Proctorio Keys are saved on the published Schedule
- If there are new Proctorio keys installed in your Cirrus environment with published
  schedules you have to unpublish these and then republish them before the new Proctorio
  keys become active for them.
- To secure the integrity of your exams using live proctoring, Cirrus provides an
  integration with ProctorU.
- The external ID of the Assessment doesn't match the given ID in ProctorU
- The schedule window is set more than 2 years, while Cirrus only can creates schedules
  for max 2 years.
- Administrator has to do some configuration both in Cirrus and the Safe Exam Browser
  configuration tool producing a so-called .seb file.
- For candidates, installing the right version of Safe Exam Browser and setting it
  up is not as self-explanatory as the smooth onboarding experience of dedicated proctoring
  solutions.
- 'Review the Safe Exam Browser logs stored in `%LocalAppData%\SafeExamBrowser\Logs\`,
  usually: C:\Users\<username>\AppData\Local\SafeExamBrowser\Logs\ for apparent errors.'
- Upload the `<timestamp>_Client.log`, `<timestamp>_Runtime.log`, and `<timestamp>_Browser.log`
  with for timestamp `<timestamp>` the time of your issue when requesting support.
- Installing and maintaining VPL Execution Servers requires technical skills (a.o.
  Linux, Certificates, Ports, syslog).
- Two-Factor Authentication supported through SAML 2.0
- SAML 2.0 authentication must be enabled after registration with SURFconext.
- Users will see a different login screen and may need different credentials.
- Integrate Cirrus into your processes using REST API or LTI.
- Integrating with On-Premise systems can be done through REST API if reachable via
  the internet.
- Item IDs in Cirrus need to be unique.
- Learning Objective Title in Cirrus and on your Excel need to be an exact match!
  (Be aware of trailing spaces.)
- The default value for the 'Status' column - if left empty - will be set to 'Draft'
  upon import.
- Uses OAuth2 with refresh token — requires setup of connected app in Cirrus
- Candidates usually log in using their username and password via a direct link from
  their institution, or through Single Sign-On (SSO) if enabled.
- Cirrus supports several single sign-on options.
- If you’ve lost or forgotten your password, go to your Cirrus login page and click
  'Forgot Password?'
- Be open about what we will not solve fast.
- Using our short Incident Form on our Customer Portal will get you the fastest follow
  up.
- Login required for Customer Portal access
- Only registered Super Users may create support requests.
- Super Users are expected to keep their knowledge up-to-date by regularly using and
  administering the Cirrus Platform.
- Customer Portal login will not work for eassessment.atlassian.net or eassessment.atlassian.net/browse/CR.
- Your Customer Portal login will not work for eassessment.atlassian.net, eassessment.atlassian.net/browse/CR
  (they are internal use and not accessible for customers).
- Training consists of 12 hours, divided over approximately 10 hours of lessons and
  2 hours of preparation time and follow-up.
- Only authorized individuals can create and manage assessments, upholding the platform's
  security and integrity.
- Some objects may return nulls in deeply nested fields
- Your role determines whether you can add or delete collections.
- Your position in the Cirrus Hierarchy as set in the Administration panel determines
  who you can share with.
- The Test Wizard automatically saves your progress to your user profile.
- If scheduling is typically done through integration, rendering manual scheduling
  unnecessary, the Test Wizard may not be the optimal tool.
- Only items with status 'Live' can be used in an assessment.
- A system administrator needs to define these roles in the Admin section of your
  environment.
- Cirrus Assist is an add-on feature for building item banks.
- Your data is not used for training unless you explicitly opt in.
- OpenAI retains API data for 30 days to monitor for abuse or misuse.
- Cirrus Assist is an add-on feature.
- Supports Multiple Choice, Multiple Response, Either/Or, and Essay question types.
- AI has limitations in accuracy based on prompt complexity.
- The 'Organise from Raw Text' feature provides faster but less precise outputs.
- This API supports various item types for assessments.
- The Extended Multiple Choice question combines the power of Multiple Response and
  Multiple Choice or Either/Or in one template.
- Uses Dichotomous scoring by default
- Polytomous scoring can be selected
- Different item types supported.
- You can create Multiple Response questions in Cirrus.
- The Multiple Response question type allows selection of more than one correct answer.
- You can create Either/Or questions in Cirrus.
- OAuth2 with refresh token required for access
- No matching results found
- This question type requires candidates to fill in a blank from the question.
- Candidates can enter numeric responses.
- Allows specific values or ranges for answers.
- This item type requires candidates to fill in a blank.
- This Item type uses Dichotomous scoring by default.
- Polytomous scoring can be selected.
- The Order question type requires candidates to put the available answer options
  into the correct order.
- Requires setup of connected app in Cirrus
- Images for responses should ideally have the same size as the placeholders.
- The Short Answer question type allows you to set a question that requires the candidate
  to provide a short written answer.
- Requires setup of connected app in Cirrus.
- This item has specific options available.
- Item uses Dichotomous scoring by default.
- Ensure background images are not too large to prevent scrolling issues.
- Each Item does have some general Item Options.
- Ensure correct OAuth setup for API access
- Extended Match allows you to create questions where answer options can be matched
  with multiple others or none.
- The Financial Statement question type allows creating versatile questions specifically
  geared toward Balance Sheets, Income Statements, Account statements, etc.
- It is not possible to save question if for at least one row debit or credit value
  is not set.
- It is not possible to save if there is no at least one section with at least one
  row.
- It is not possible to save if Score is empty/0.
- It is not possible to save the FSQ if for at least 1 row score is not set.
- By default option 'Handle empty cells as 0' is selected.
- If 'Scoring by row' is selected then by default 1 point per row is set.
- By default option 'Scoring by row' should be selected.
- You can create Comprehensive Integrated Puzzle (CIP) questions in Cirrus.
- Simply go to your Library, create or select a collection and click ‘+ Add’ or use
  the drop-down arrow to select this question type.
- Execution server required for Programming question type, set up by the customer
  using Virtual Programming Lab (VPL).
- 'Changes that trigger a new version of a Programming question that is in use in
  an assessment are: changes in score, changes in test cases and changes in requested
  files changes.'
- The Financial Statement item type allows creating versatile questions specifically
  geared toward Balance Sheets, Income Statements, Account statements, etc.
- The Financial Statement question type requires the candidate to fill out a table
  with numeric values (integers) based on the question or case study data presented.
- It is possible to add up / subtract calculated values of (sub)totals.
- The score for the whole question should not be editable when 'Scoring by row' is
  chosen.
- The option 'Allow only whole numbers' makes sure no decimals can be used.
- Decimal delimiter will be a point (.) no matter your environment's or user's Regional
  Settings.
- Sowiso questions are not meant to be used for questions requiring the candidate
  to draw an answer.
- The Programming question type requires the candidate to write or debug code.
- Candidates can be offered the option to run and evaluate their code.
- This evaluation uses testcase(s) defined by the question author.
- The question is auto-scored based on the number of test cases (written by the author)
  that are successfully passed.
- 'Execution server required: This question type only works in conjunction with an
  execution server, to be set up by the customer.'
- Subscript notation is possible using the syntax a_(b).
- When using the SOWISO (Maths) Item in Cirrus please be aware that the decimal delimiter
  will be a point (.) no matter your environment's or user's Regional Settings.
- Subscript notation is possible in SOWISO.
- This question type cannot be marked automatically.
- Using this question in an exam will result in a simple or extended marking workflow.
- If candidates need to copy content from another application (e.g. from MS Word,
  Excel) into Cirrus, please be aware that your candidates need to be able to access
  their file for uploading.
- If they are taking high-stakes summative assessments, this might be disabled for
  security reasons - i.e. they won’t be able to access storage media (like an USB
  drive) or online sources.
- File Response includes O365 integration for different item types.
- 'Max uploaded file size is: 4 MB'
- 'All file types are supported except: ''ade'', ''adp'', ''bat'', ''chm'', ''cmd'',
  ''com'', ''cpl'', ''exe'', ''hta'', ''ins'', ''isp'', ''jar'', ''jse'', ''lib'',
  ''lnk'', ''mde'', ''msc'', ''msp'', ''mst'', ''pif'', ''scr'', ''sct'', ''shb'',
  ''sys'', ''vb'', ''vbe'', ''vbs'', ''vxd'', ''wsc'', ''wsf'', ''wsh''.'
- It's only possible to upload 1 file per question with a max size of 4MB.
- Candidates do not need a personal Office365 registration.
- Some objects like Page may return nulls in deeply nested fields
- A 'welcome screen' and 'finish screen' are mandatory for each assessment.
- Each Item has its own manual, including an explanation of specific Item options.
- Unfortunately it is not possible to use audio in Sections at this point. This functionality
  will be added as soon as possible.
- You can create Sections in Cirrus to combine multiple Items in one case study.
- Items used within a section are exclusively for that particular section.
- You can only add 1 topic per single item.
- The created topics are managed per collection.
- Topics can also be used to set up a Simplified Blueprint.
- Topics can be used to categorise Items into certain topics, or adding extra information
  about difficulty levels, subjects or themes, for example.
- Editing Live items requires permission, set under Admin > Roles > Collection. Make
  sure 'Edit Items' is switched on.
- The CirrusID prefix is based upon a custom value entered by the collection author
- The Cirrus ID Counter will start from 1 and incremented by 1 each time a new item
  in this collection is created
- Ensure proper authentication setup before making API calls.
- Export is limited to 100 items at a time.
- Only Live items can be used in an assessment.
- Withdrawn questions will not automatically disappear from existing assessments.
- Questions should not make use of very large media files (<10 MB)
- The total amount of media files should not be too big.
- Due to limitations of Excel, any links to media elements are not preserved within
  the question and/or answer texts in your Excel file.
- Topics can only be added by Item authors in the tags panel of each item.
- Created topics are managed per collection.
- Editing Live items requires permission, set under Admin > Roles > Collection.
- Sowiso and financial question types are excluded from item versioning.
- 'Action 3 will automatically add the image to your Library too, so you can use it
  again + a cirrus url will be used. When drag and drop or copy/paste an image in
  the editor it will use the original file location. This could cause problems when:
  An image is removed from the web, If you are using whitelisting.'
- To ensure a uniform delivery experience for candidates your images are always scaled
  to a maximum width of 500 pixels or maximum height of 400.
- You can also add images to answer options, for example for MC, MR or Match questions.
  In this case we recommend using smaller images with a width of max 300px. But this
  depends on the question type at hand. For Match recommended with/height is 50 pixels.
- 'Keep it small: when using files online, keep in mind that they need to be loaded.
  This means that you should strive to keep to a small size (up to 2MB is a good guideline
  for images)'
- 'Keep it limited: do not put over a 100 files in your exam, especially if you do
  brick and mortar delivery to larger groups.'
- Please note that Cirrus currently requires a computer with a screen resolution of
  at least 1400 x 900.
- Keep in mind that Cirrus limits most file sizes to about 10MB to optimise exam delivery
  and reduce frustrations and stress among candidates.
- The number of answers to select in MR can be equal to the correct options or have
  no limit.
- Candidates can be scored on avoiding incorrect answers in polytomous scoring.
- Ensure appropriate permissions are set for API access
- Access to statistics tab requires 'Roles > Collection > Access to statistics'
- Do not edit the Item type in Excel! Importing the Excel file back into Cirrus will
  lead to issues.
- Due to limitations of Excel any links to media elements are not preserved within
  the question and/or answer texts in your Excel file.
- You can create assessments using a template or from scratch.
- Images are always scaled to a maximum width of 500 pixels or maximum height of 400.
- For Match questions, recommended image width/height is 50 pixels.
- Keep it short - in a 2 hour exam do not use twenty 30 minute video / audio fragments.
- Stream when possible - also see the paragraph on using media links above.
- 'Our advice: use the ''Add Resource'' or ''Add Media file'' button.'
- These rules only apply to auto-scored items with more than one answer.
- Assessments that have been scheduled or taken by candidates cannot be unpublished
  or deleted.
- You set the pass mark when creating an assessment Form, using the 'Options-tab'.
- You can add and adjust pass marks in the Admin part of Cirrus.
- Adjusts percentage to pass and grade scale percentages using chance scores are to
  be used with dichotomous questions only.
- Be sure to understand how this works before using this with dichotomously scored
  questions.
- When using a mix of different question types the calculation become a lot more complex.
- If you use other than Multiple Choice questions you will use the Chance score calculations
  as used in Cirrus. It is imperative you understand the implications before using
  this.
- If these do not match your needs you can simply create a custom Assessment Scale
  for your Assessment Form.
- Access to statistics tab requires 'Roles > Collection > Access to statistics'.
- The assessment dashboard provides an overview of assessment setup.
- Ensure that the API client has the necessary permissions to create assessments.
- Some options may require additional permissions.
- Assessment settings include options for key title, code, type, and question selection
  method.
- This API provides options for configuring assessments including attempts and duration.
- Feedback options can be configured based on assessment settings.
- The 'detailed' checkbox must be enabled to change feedback display options.
- Including questions in the selection does not guarantee they will be in the candidate's
  exam; it depends on form settings.
- Requires OAuth2 setup in the Cirrus platform
- Responses may include pagination based on the number of assessments
- Ensure to set the correct timespan for assessments.
- Uses OAuth2 with refresh token — requires setup of connected app in Cirrus.
- Items without a purpose selected will only be available for Mixed assessments.
- This is not possible. You can create a new assessment and select the correct purpose
  of your assessment and items.
- Simplified Blueprint allows you to create a more straightforward, more controllable
  matrix.
- Per Topic you can select a score or a number of questions. You cannot select both.
- When selecting a score, make sure that the available questions can deliver this
  score.
- The assessment creator can predetermine how much extra time is allotted for candidates
  with extra time.
- This option will not show the feedback and results directly after submitting the
  results
- This option is only supported by the simple and extended marking workflow
- Assessment forms can be fixed or random.
- Difficulty levels can be adjusted based on P-values or Angoff values.
- Exam timer is not affected by the intro and finish pages.
- Simplified Blueprint allows the system to pull questions based on Topics.
- Assessment-form based sections can no longer be created for new assessments as of
  14 Nov 2023.
- Multiple forms only works with fixed forms.
- 'Rounding Rules: Always consider your environment''s rounding rules when setting
  up Assessment Scales.'
- 'Updates and Reattachments: If a generic scale is updated, inform your authors.
  They may need to reattach the updated scale to their assessments.'
- 'Copying Assessments: Be aware that copying an assessment may use an outdated assessment
  scale.'
- An assessment form should minimally have a welcome and finish page; all others are
  optional.
- Updated on 13 Jun 2023
- Ensure that at least one question is included in the assessment.
- You can no longer create new Assessment-form based sections since 14 Nov 2023.
- 'Choose wisely: If you select the Simple Marking Workflow for the assessment, you
  cannot change this later on to the Extended version.'
- If you use Linear On the Fly Testing forms, you can only create one form.
- Existing schedules will always use the latest published version if publishing is
  done up to 20 minutes before the start of the schedule.
- Anonymous sharing is designed for internal use only.
- Always consider your environment's rounding rules when setting up Assessment Scales.
- If a generic scale is updated, inform your authors. They may need to reattach the
  updated scale to their assessments.
- Ensure Admin has set up roles for assessment management to access versioning.
- Ensure API token is kept secure
- You can only edit assessments that are not published.
- Assessments cannot be deleted if they have been used.
- The anonymous link is designed for internal use only.
- The functionality is not designed to use as a mock exam for candidates.
- Be careful with your content as anyone using this link can view your questions.
- Ensure proper OAuth scopes are set for accessing data.
- Always (default) means that the assessment can always be scheduled
- If the time span has been set to activate at a specific time, then it will only
  be visible for the scheduler after that time
- If the time span has been set to deactivate at a specific time, then the scheduler
  can no longer see the assessment after that time
- A maximum of 50 sessions per month for anonymous sharing.
- The notepad is unique per question, that means a candidate can enter different notes
  throughout the assessment.
- Notes are not visible in the candidate review sessions.
- Reasonable adjustments, such as providing extra time during assessments, are essential
  for ensuring fairness and accessibility across educational and testing environments.
- Students with dyslexia may require extra time to process written information, thereby
  leveling the playing field and allowing them to demonstrate their knowledge.
- Individuals with ADHD may benefit from additional time to maintain focus and complete
  tasks effectively.
- Paper based exam (printing) - Assessment
- Some objects like Assessment may return nulls in deeply nested fields
- Not all question types are suitable for paper based exam. Supported types are Multiple
  Choice, Multiple Response, Either/or, and Section.
- Previewing your Assessment is a crucial step in before making it available to your
  candidates.
- There are various ways to preview your assessment in a candidate simulation.
- Active window determines visibility for the scheduler.
- The notepad for candidates is unique per question.
- Notes are saved automatically during the assessment.
- Candidates with specific needs, including dyslexia and ADHD, may require extra time
  to process written information.
- The scheduled window is different from the duration of the test.
- We strongly recommend you to create a separate account for scheduling, that can
  be shared between those responsible for booking exams.
- Psychometric data will be calculated once the schedule is ended or ALL results are
  submitted, more details.
- Admins can see all schedules via Admin > Content Management > Schedules.
- Once an assessment has been published (i.e. set to Live), it will be available for
  scheduling.
- Existing schedules will always use the latest published version - if publishing
  is done more than 15 minutes before the start of the schedule.
- Once an assessment has been taken, there are only very limited possibilities to
  edit it - you can only make some textual changes to items (to correct typo's for
  instance).
- Alternatively to amend the assessment it is best to create a new version of the
  assessment. As soon as the version is published any schedules that have not started
  yet will use the new version.
- Schedules that have started or expired cannot be deleted. The latter will move to
  'Archived' once finished.
- You can archive the 'old' assessment so it won't be selectable for scheduling any
  more.
- Schedulers only see a list of hierarchies they have access to.
- Schedule deadline is always leading.
- It is considered best practice to setup an extended schedule timeframe in which
  the assessment can be taken.
- The maximum time between when a schedule opens and its deadline is 2 years.
- Changes to schedule are limited based on activation status.
- You can always add/remove candidates until the schedule is archived.
- Schedules automatically move to 'Archived' once finished (the deadline has passed).
- Deleting schedules is only possible as long as it has not been started by any candidate.
- The dashboard guides 'schedule creators' in setting up the schedule.
- 'The schedule deadline is always leading: the schedule deadline is final.'
- You can add/remove test takers without de-activating the schedule
- You can add candidates even when the exam window has started
- You can add to an ongoing exam schedule even when other candidates have started
  taking the test
- Once the schedule window is closed, you cannot add candidates.
- You can only remove candidates from an ongoing exam schedule as long the candidate
  did not start the exam yet
- Once the schedule window is closed, you cannot remove candidates anymore.
- Depending how far you are in creating your schedule you can be limited in your options
  to make changes on the schedule.
- When adding an Invigilator you can only select users that have access to this component
  as setup under Admin > Roles by your System Administrator.
- You cannot add someone who does not have the rights (the correct role / hierarchy)
  to act as an Invigilator.
- 'The list of users you have access to is determined by which groups (hierarchies)
  you are a member of. These groups need the option ''Allow relationship with Scheduled
  assessments'' / ''Available in: schedules'' checked.'
- You can add candidates to schedules at any time.
- You can add/remove test takers without de-activating the schedule.
- You can add candidates even when the exam window has started.
- You can add to an ongoing exam schedule even when other candidates have started
  taking the test.
- You can only remove candidates from an ongoing exam schedule as long the candidate
  did not start the exam yet.
- Can add invigilators up to the start of the assessment window as long as the schedule
  is deactivated.
- You can only select users that have access to this component as setup under Admin
  > Roles.
- The list of users you have access to is determined by which groups you are a member
  of.
- Once the schedule is activated, you will be not be able to make any changes to the
  schedule settings.
- A schedule can only be unpublished if none of the candidates has started yet.
- The duration of the exam tells the candidate how much time is available to complete
  once started.
- The start and end time of the schedule set the timeframe during which the assessment
  will be available to be started.
- Please note that the end time of the schedule is leading.
- 'Best Practice: always schedule for a broader window than the strict duration of
  an assessment.'
- If you use Timed Sections they do not automatically get extra time.
- In some scenario's the scheduler did not actually created the assessment and is
  not aware of which assessment option where chosen.
- The end time of the schedule is leading.
- It is recommended to set the assessment window taking into account the extra time
  needed for special needs students or candidates with reasonable adjustments.
- This quick start guide will help invigilators/proctors to understand the process
  of monitoring an ongoing test in Cirrus.
- To view the Invigilation Overview, ensure you have the required permissions.
- This API requires a connected app setup for authentication.
- Invigilation is commonly used in the UK language and proctoring in the US language.
- Create a separate assessment with PIN for different scenarios.
- Invigilators can perform actions such as pausing the exam, voiding the exam, or
  granting extra time.
- The invigilator most likely has a list of candidates on paper or can use the list
  on their dashboard.
- The invigilator can add extra time for candidates with particular needs.
- Candidates do not need to be online at the time of the exam session.
- Exam will never exceed the end time of the schedule.
- Selecting a candidate and selecting Void is irreversible. The candidate will immediately
  be disabled from continuing.
- It is up to the invigilator to notify the organisation to take appropriate measures
  - as these differ per organisation to take appropriate steps.
- Voided assessments will be available for marking up to the point of the candidate
  being voided.
- You can only Void candidates that have started their assessment.
- The exam will never exceed the end time of the schedule.
- Most exams are scheduled a little longer to allow for unforeseen circumstances.
- Printing questions (aka printing the assessment form) is a right granted to you
  by your Administrator via Admin > Roles.
- When working with e-assessments, Cirrus focuses on digital examination. Printing
  your assessment from Cirrus is possible, however you have to take into account that
  online assessment and print do not translate 1:1.
- Currently only regular Multiple Choice, Multiple Response and Either/Or questions
  are included in the printout.
- Any questions using for example Youtube video or sound-files will obviously not
  transfer these files to paper.
- Section pages in association with the relevant questions as set by the author do
  not transfer to print currently.
- For print you might need a separate introduction and finish sheet as the instructions
  might differ.
- Printing like this can take a considerable amount of time!
- Only text is allowed.
- Candidates cannot see the send messages after they closed the message dialog box.
- Message can only be send to the candidate, but not back to invigilator.
- Messages can only be send to user which have the status 'In progress'.
- If the candidate started the exam, but had some connection problems they will get
  the message as soon as they are rejoined the exam and continue.
- For timed review session, make sure no candidate leaves the room before the deadline!
- Think about how you to secure your review session (e.g. Safe Exam Browser, pincode).
- Invigilators of a schedule get access to candidate logs of their schedules.
- Ensure to secure review sessions with Safe Exam Browser or pincode.
- All results have to be fully marked and submitted
- All results have to be published
- Ensure to set up the necessary permissions for OAuth access.
- Candidates can review results based on selected options.
- Review sessions can be secured using a lockdown browser, such as Safe exam browser.
- Once a candidate review schedule is activated, options to update are limited.
- If none of the candidates have started, the schedule can be deactivated for updates.
- It is possible to archive review sessions so candidates cannot access them anymore
- Ensure the API is properly authenticated before making requests.
- It is possible to archive review sessions so candidates cannot access them anymore.
- You can set up different marking workflows in Cirrus.
- Choose the 'Auto-scored' option when publishing your assessment.
- Publishing can also be necessary for retrieval of results depending on integrations
  and work-processes in place.
- 'Remember: it depends on the assessment''s setting what it means if the results
  are published, i.e. if the candidate will see anything on their dashboard for example.'
- When looking up results - remember to check the ‘Total items found’ listed on the
  page (10,30,50 or 100) for large groups/ cohorts.
- You can also use the Filter by option provided on the results screen to submit large
  sets of results. This can be done in the Results screen (Marking) for any assessment.
- An extensive marking workflow requires a marking coordinator to set up this workflow.
- If the Assessment is published with an 'Extended Workflow', setting up such workflow
  with a coordinator is mandatory.
- You could opt for an Extended Workflow when the Assessment contains open questions
  that require manual marking.
- Users with access to the Coordinator tab, and who are assigned to certain hierarchies,
  will be able to set up marking workflows.
- Check the 'status'-column to see where the schedule currently is within the marking
  process.
- When candidates are added to an ongoing schedule, the status will reverse to 'ADD
  ASSESSORS' because assessors will need to be allocated to these extra candidates.
- The Coordinator Dashboard provides marking coordinators with the tools they need
  to effectively manage the marking process.
- The marking progress can be shown via percentage or by the amount of scripts.
- The moderation feature must be activated to include moderation columns in export.
- Moderation feature must be activated to include moderation columns in reports.
- Setting up a marking workflow by a Coordinator is done in 3 steps.
- Sample moderation is only possible when the schedule window is closed.
- Requires OAuth2 setup for API access
- If you cannot see this, your role doesn't allow you to. Reach out to a System Admin
  of your organisation if you feel this is not correct.
- Search results are limited to only people who are part of the Schedule's hierarchy.
- 'Best practice: select role ''Other'' to assign the responsibility to a non-marking
  staff member.'
- During the last step you can divide the work among the available assessors and moderators.
- This API requires authentication using OAuth2.
- Ensure you have set up the connected app for API access.
- 'Role-Based Access: The Score Distribution tab is available by default for Coordinators.'
- For Markers, access must be granted via Admin → Roles by enabling the View Assess
  Overview permission.
- The Score Distribution metrics update automatically every 10 minutes.
- Calculations happen on submitted scores only.
- The Score Distribution tab is available by default for Coordinators.
- Archiving is crucial for maintaining a clean and focused working area.
- Exporting can include all information in the (hidden) columns presented in the assess
  tab.
- Use the filter icon to sort assessments based on their status.
- Marking in Cirrus is designed to be an intuitive process, from beginning the marking
  of submissions to submitting final scores.
- Use the Progress Report to get a visual presentation of your workload.
- Scoring can only be used on Essay and File response question types.
- Editing scoring functionality currently works only for essay and file response questions.
- The Submission tab shows a progress bar per candidate.
- You can add up to three moderation rounds to a marking workflow.
- Scoring can be based on either a simple score or criteria setup.
- Editing scoring functionality is currently limited to essay and file response questions.
- Candidate summary screen opens showing a summary of the candidate's responses.
- Requires OAuth2 authentication setup.
- Candidates may have multiple responses.
- 'Publishing results means they will move from ''Marking: Results'' too ''Reports
  > Results''.'
- Published results will show on the candidate dashboard if this has been setup depending
  the assessment options.
- Published results can be scheduled for a Candidate Review session.
- 'The assessment author (or the scheduler if permitted by your author) sets in what
  way results are released to candidates: Manual publication of results - when whoever
  is setup for this decides to publish, Automatic publication of results for fully
  auto-scored exams: after every attempt or after the last attempt.'
- When a candidate has not participated in an assessment, there will be no mail notification
  sent with his grade as this is not available in Cirrus.
- 'Publishing results means they will move from ''Marking: Results'' too ''Reports
  > Results.'
- Published results will show on the candidate dashboard if this has been setup depending
  on the assessment options.
- The assessment author (or the scheduler if permitted by your author) sets in what
  way results are released to candidates.
- Manual publication of results - when whoever is setup for this decides to publish.
- 'Automatic publication of results for fully auto-scored exams: after every attempt
  or after the last attempt.'
- Rescoring is available only for assessments with fixed form.
- Rescoring will always made visible once the rescoring is applied for all users who
  have access to certain pages.
- A question can only be rescored once.
- Re-marking will enable your organisation to handle candidate appeals for re-evaluation.
- If results have not yet been published you cannot flag them for Re-marking.
- If a result is Voided or Not submitted or Status is 'Remarking in progress' - the
  button is disabled.
- Once Remarking has been completed and the results are published again, the status
  will change to Final results.
- There are no limitation or restriction on the number of times you can Flag for Remarking.
- Candidates need role-based permission to use the Remarking feature.
- Unpublished or voided results cannot be flagged for Remarking.
- Candidates flagged for Remarking will appear under the Remarking tab in Marking.
- The Remarking table only shows schedules that have one or more candidates flagged
  for re-marking. If no candidates have been selected for Remarking, this list will
  be empty.
- The final step is publishing results. This is necessary to publish the remarked
  results back to the Reports module of Cirrus, and (if applicable) to the candidate
  dashboard.
- Voiding results still needs to be submitted and published and become available in
  the reporting with the status 'Voided'
- This action requires permission, as set via Admin >Roles > Site > Marking > 'Void
  attempts'
- Voiding can be done by invigilator, marker, results publisher, or via API.
- Results come from exams that have already been assessed, (auto)scored, submitted
  and published.
- Long essay answers are not fully shown on the printed PDF.
- In order to see the content in reports you should have given the permission access
  'View reports' on a hierarchy level.
- It might be because the role permission 'Limited Reports Access only' is turned
  on.
- Ensure proper OAuth2 setup for API access
- Fully auto-scored will immediately be available here, after the candidate handed
  in the exam.
- Results of manually marked exams will be available after the results are published
  or when the schedule window ends.
- In order to see the content in reports you should have given the permission access
  'View reports' on a hierarchy level, to be found via Admin>Users>specific user>
  Hierarchies tab.
- It might be because the role permission 'Limited Reports Access only' is turned
  on. This will limit your option to download reports, but also you will not be able
  to print/download or see any detailed results and score reports.
- Ensure proper OAuth2 configuration for access.
- No learning objectives or Topics used will display an empty report.
- This Report is in beta - Feel free to share your thoughts and suggestions via our
  customer portal
- The Angoff method is a statistical technique used to set cut scores.
- Access is not differentiated like the Results reports but is all-or-nothing access.
- Exporting works the same for all places
- If the 'View score report (always)' is switched on in admin > site roles > General,
  then it will ignore the score report settings in the assessment options.
- Angoff values can be set with a 3 decimal entry.
- Some objects like User may return nulls in deeply nested fields
- Candidate results can be exported at various places in the platform.
- Creating a user does not trigger an email in Cirrus.
- Be very careful using 'login as' feature, since this is a powerful tool.
- User administrators can set options to disable password reset and restrict login
  access.
- Users with the right permission can see a list with accounts of other users and
  candidates.
- Manually add users - User management
- User management API allows for manual addition of users.
- Users will be quarantined for 30 days in the trashcan
- A max of 2000 users per excel import is allowed
- UserName and UserID need to have unique values in your source file
- An email address is required for each imported user
- Roles define what users can see and do in the system.
- Someone with a lower role type cannot change the settings or role of someone with
  higher role type.
- Some user fields may contain null values
- Setting up the right Hierarchy for your organisation is a crucial step to align
  with your company's procedures and goals.
- For larger implementations, it is recommended to use an integration for management
  of users and the hierarchy.
- The default Role Type when creating new (custom) site role is set to the lowest
  level (Candidate).
- Setting root-levels is vital for larger organisations, failing to do so users will
  inevitably see all groups including ones they should not have access to!
- Never add users directly to the highest level (site root) (even if that user should
  be able to see everyone in the site this is considered bad practice).
- Scheduling (aka booking or planning) of assessments is governed by the setup of
  the Hierarchy and Clusters in Cirrus.
- Cirrus Assessment recommends to do this with one of our consultants.
- Setting root levels is vital for larger organisations, failing to do so users will
  inevitably see all groups including ones they should not have access to!
- The setting of root levels can only be done in separate branches in your hierarchy.
- Never add users directly to the highest level (site root) as this is considered
  bad practice.
- Available since March 7th, 2023
- Scheduling (aka booking or planning) of your assessments is governed by the setup
  of the Hierarchy and Clusters in Cirrus.
- Candidates have 30 minutes to agree (or not). After that they will automatically
  be redirected to the decline text.
- The time spent on the NDA does not affect the time for the assessment.
- No information is logged in invigilation or reports that a candidate did decline.
- Administrators can (un)archive collections and assessments, and share them.
- All feedback with status Closed and Invalid will be hidden by default.
- Deleted users, collections or assessments are quarantined for 30 days.
- Users with the right to access Admin > Trash Can can restore users.
- Until further notice the feedback will only be visible under Content-Management.
- If you do not have permission to view the question item in the Library, it will
  not appear in your search results.
- The text of your NDA(s) is fully customizable through the use of templates for this
  document.
- This is an environment wide (global) setting and will affect all users on the site.
- Please note that the changes will only apply to scheduled exams that haven't been
  started yet.
- Currently the thresholds (hard, medium, easy) are only shown in the item statistics.
  It will be added in a later stage on assessment performance & statistics
- Uses Keycode for candidate login.
- Users with the right to access Admin > Trash Can (usually this the System Administrators
  role only) are able to restore the users.
- After logging out Cirrus can redirect to an information page of your choosing.
- Configured links must be secure and permanently available.
- Available since March 7th, 2023rd
- Cirrus offers the possibility to style your environment to your business needs.
- To preview your theme you need to create a sample assessment. Schedule this sample
  using a test account and the hierarchy linked to your theme.
- Make sure to save any adjustments at the bottom of the page.
- Changes in Proctorio settings will not be included in already scheduled exams.
- The item-difficulty level is based on the P-value which is important for evaluating
  the characteristics of an item.
- Currently the thresholds (hard, medium, easy) are only shown in the item statistics.
- Use page to set up your Office365 licence to work within Cirrus.
- Assessment Scales are always setup taking into consideration the Rounding Rules
  for your environment.
- Assessments use a local copy of scales defined under Admin > Assessment Scales.
- Activate the Keycode functionality here.
- When a candidate logs in to Cirrus with a keycode, Cirrus validates the login and
  directly redirects the candidate to the respective exam.
- When using Keycode, the candidate dashboard will be skipped.
- Configured links must be secure and permanently available
- Use page to set up your VPL Execution Server to work with Cirrus.
- Ensure to adjust and save the 'Default' template before first use.
- Newly saved settings will only affect schedules activated after the save.
- Ensure to set up OAuth2 access correctly for the API.
- API calls may be limited; monitor usage.
- ID is required for each Learning Objective when adding manually.
- It is imperative that Assessment Scales are always setup taking into consideration
  the Rounding Rules for your environment.
- 'Required information: All column headers in the example file, correct ID''s, correct
  reference to the parent ID.'
- ID's should not contain spaces or dots '.'
- Learning Objectives need to have a unique ID.
- If an item already exists, an error will be reported and the item will be marked
  red.
- Learning Objectives are required when creating assessments using a blueprint.
- OAuth2 authentication is required for accessing the API.
- When manually adding Learning Objectives, a mandatory ID is required for each.
- Labels help in efficiently categorizing and organizing the items in the library.
- Labels make it easier for users to find specific items in the library.
- Labels provide an advantage during the construction of an assessment by serving
  as filters.
- Required information includes correct ID's and reference to the parent ID in the
  import file.
- Personal labels can be created and managed within a specific collection.
- System labels are available across all collections and are managed by system administrators.
- 'The Cirrus Platform uses these IDs to denote the parent-child relationships: Folder
  - Subject - Learning Objective.'
- User labels streamline scheduling and adding candidates based on labels.
- Regional settings define the default settings for newly created users.
- Requires authentication setup in Cirrus
- Ensure correct API version is used in the endpoint paths
- Uses OAuth2 with refresh token — requires setup of connected app in Cirrus API
- Users like Admins and Coordinators can be granted the permission to login as another
  user.
- If the permission is activated, users will only have a limited set of options to
  export reports.
- You can temporarily deactivate individual terms.
- Roles define permissions for users in the Cirrus platform.
- Roles can be customized based on organizational needs.
- User labels can be a powerful tool for scheduling and user management.
- These Regional settings also define the default settings for newly created users.
- Existing users will have their initial regional settings inherited from the regional
  settings at the time of creation of their account.
- It is possible to work on collections together with one or more co-workers. What
  they can do with your collection is determined in the Collection Role setup.
- By Default Cirrus offers 3 Roles (Author, Co-Author, Reviewer) which can be chosen
  when you share a collection, but this could be fully customized by your system administrator.
- Never turn off site role 'Manage roles'.
- By Default Cirrus offers 3 Roles (Author, Co-Author, Reviewer) which can be picked
  when you share a collection.
- These roles can be fully customized by a Cirrus System Admin.
- It's possible to make sure certain roles can have only access limited reports under
  Reports.
- Functionalities in the roles table correspond to all items in the main menu and
  all its associated tabs.
- Check the box ‘Enable Config Key Check’ to ensure the exam cannot be taken without
  a recent Safe Exam Browser with correct .seb file.
- You may leave ‘Enable Config Key Check’ disabled but then Cirrus will not perform
  the check if the approved configuration is being used.
- Integrate Cirrus into your processes
- 'Cirrus offers 4 ways of integrating: API/LTI, Advanced question types, Enhanced
  exam integrity, Single Sign-On'
- Roles are set up by the admin of the site and have a very high level of customisation.
- The candidate enters the exam directly without having to login.
- Your system gets notified by Cirrus about the result.
- Some user permissions may affect visibility of certain features.
- Proctorio requires a licence to be used in Cirrus.
- Integration involves setting up an exam, candidates taking it, and checking recordings
  in the gradebook.
- Assessment roles can be customized by a Cirrus System Admin.
- Proctorio's remote proctoring solution works based on recordings.
- The tool records all candidates while taking their exams.
- The exam cannot be taken without a recent Safe Exam Browser with correct .seb file
  that matches the configuration.
- By default candidates in Cirrus can always re-enter the exam within the schedule
  window.
- Using the right combination of settings always depends on the type of exam. In most
  cases the candidates should not be able to access any other data.
- Candidates need a well performing computer and stable internet connection.
- Proctorio support is not aware to which exam provider the candidate belongs.
- Proctorio's AI engine checks recordings for suspicious behavior and calculates suspicion
  scores.
- Use this checklist to prepare for using Proctorio.
- Using Proctorio will change your internal processes/communication.
- Proctorio requires a licence with Proctorio.
- After activating Proctorio a new tab will appear on your Admin panel.
- Proctorio cannot guarantee a 100% successful exam due to external factors.
- Proper preparation will considerably limit the risk of issues.
- Candidates should ensure their internet connection is stable before starting the
  exam.
- Candidates can onboard again in Cirrus if removed from the exam.
- Activating the integration requires some work on both the Cirrus and ProctorU side.
- Using the right combination of settings always depends on the type of exam.
- Print and Scan is an add-on that can only be used if you have a license with Ecobit
  and after its activated by Cirrus.
- Results need to be marked outside of Cirrus which interrupts the online end-to-end
  process.
- Proctorio supports live chat for assistance.
- Candidates do not need to have Word, Excel or PowerPoint installed on their computer.
- Candidates can submit their answer by hitting 'Next', which triggers a dialog to
  save and submit.
- The Proctorio Gradebook lists individual exam results by Suspicion Score on a red,
  yellow, and green scale based on settings dictated by the exam administrator to
  highlight which exam attempts require review.
- Each noted behavior gets an automated, written Incident Log.
- Office 365 files open in a new tab.
- Make sure block 'pop-up window' is disabled to ensure it works
- Deleting files directly from OneDrive can lead to losing questions and answers.
- Candidates need to be informed and prepared to avoid issues and (extra) stress during
  the exam.
- ReadSpeaker is a Text to Speech solution which makes it possible to have content
  read aloud to candidates.
- DocReader can only be used when have the correct license.
- Setup a practice exam to help candidates familiarize with Cirrus and Proctorio.
- When receiving an error in the screen 'Access denied', something is wrong with the
  whitelisting in the account of ReadSpeaker.
- Requires a license with Turnitin for their Originality product to use the integration.
- Providing exams that candidates can take at home on their own computer involves
  some minor risks compared to controlled environment, like a test center.
- If the candidate does not have internet for 2 minutes, the candidate will be removed
  from the exam.
- In case something happened with the connection between Cirrus/Proctorio, the candidate
  will be kicked out the exam and is able to onboard again.
- When using fullscreen mode (Lenient, Moderate, Severe) candidate will be removed
  from the exam.
- It's not allowed to use the browser inspector or the shortcut f12 to go to the inspector.
  The candidate will be instantly removed from the exam.
- Essay submissions with less then 20 words will not generate a plagiarism report.
- Turnitin will confert the text to UTF-8 first. When the conferted text is over 2MB
  of text, a plagiarism report will not be generated.
- A submission cannot contain more then 800 pages of text.
- Exam integrity - Candidate experience
- Uses military grade encryption for all transactions
- Each customer has their own, individual Cirrus instance
- ProctorU requires a separate agreement with ProctorU for integration.
- All results need to be marked outside of Cirrus which interrupts the online end-to-end
  process.
- All instruction are provided on the answer sheet
- Candidates with extra time can get extra time to complete their assessment.
- The assessment author determines the extra time allowed for candidates with extra
  time.
- The invigilator of an exam can add extra time manually after the candidate has started.
- If you schedule your candidates via an integration, it's better to schedule candidates
  with particular needs via a separately setup assessment.
- Candidates do not need an Office365 license or account of their own.
- Requires just one Microsoft Office365 business account to set up the integration.
- 'Excel Import/Export: External IDs for Learning Objectives (LO) can now be used
  during Excel imports.'
- When navigating to the next question, candidate, or search, the checkbox for 'Navigate
  to unscored questions' is now enabled by default.
- All files related to this integration will be stored on Microsoft's cloud storage
  service OneDrive.
- ReadSpeaker is implemented for all question types
- DocReader can only read text
- When receiving an error in the screen 'Access denied', something is wrong with the
  whitelisting in the account of ReadSpeaker. Please contact Cirrus.
- Requires a license with Turnitin for their Originality product.
- Integration setup is done in the admin panel of Cirrus.
- Essay submissions with less than 20 words will not generate a plagiarism report.
- A submission cannot contain more than 800 pages of text.
- Cirrus is not affected by Reptar.
- Cirrus is not affected by HTTP2 Rapid Reset.
- Cirrus is not affected by Downfall or Inception.
- Cirrus is not affected by Zenbleed.
- This manual is for students/candidates who are going to take a test on Cirrus.
- Taking an exam can be exciting. Especially if you're going to do that on a digital
  exam platform for the first time.
- Encouragement to use the metadata URL for SAML Single Sign-On.
- Candidate dashboard is intuitive and simple to navigate.
- Test results visibility is determined by the test provider's settings.
- For security reasons you can no longer show our Knowledge Base embedded into your
  own website (e.g. IFRAME).
- Candidate review now under Menu 'Delivery' instead of 'Marking'
- New option to show the questions in the same order for fixed forms
- We've not changed anything for users using our existing 'extra time' feature, we
  simply added an extra option to have more flexibility.
- If for SAML you still have manually copied the metadata,you must update your configuration
  after this release
- This should be fully backward compatible and thus, apart from further improved performance
  and stability, not impact any users or customers.
- Christmas maintenance weekend has been cancelled.
- Boxing Day release will have longer downtime for infrastructure upgrade.
- SAML Single Sign-On customers should start using the 'metadata URL'.
- Requires setup of roles in Cirrus for access
- Times are stored in UTC.
- User's timezone settings affect the display of times.
- Daylight saving time 2022 in Netherlands begins at 02:00 on Sunday, 27 March and
  ends at 03:00 on Sunday, 30 October.
- Reliable internet connection is crucial for a smooth and uninterrupted experience.
- The Heartbeat Monitor is a feature that allows invigilators to check the connection
  status of candidates in the invigilation dashboard.
- If a candidate loses their internet connection for longer than a preconfigured amount
  of time, the invigilator receives a notification and can take action if necessary.
- When the Heartbeat Monitor is enabled, the invigilator will be able to check test-takers'
  internet connectivity in real time.
- If connectivity issues persist for longer than your predetermined time, a message
  will be shown to the candidate.
- The default maximum time to work offline is 60 seconds. This can be amended depending
  on your requirements.
- All media files will only be downloaded per question and not available for all questions
  in offline mode.
- Embedded video files cannot be played due to internet loss.
- Proctoring solutions such as Proctorio cannot be used since Proctorio always needs
  a connection to make a recording.
- New API for candidate review sessions.
- Improved filtering for multiple hierarchies in reports.
- Keycode are a single use, easy-to-enter login method that gives candidates direct
  access to their exams.
- Cirrus Assessment is partially conformant with WCAG 2.2 level AA.
- Certain punctuation marks could, in exceptional cases, break a CIP question.
- Candidates unable to access review sessions without a time span.
- 'Content from users: WCAG features available for authors but not enforced because
  content is owned by and the responsibility of our customers.'
- 'False Alerts: False alerts from Web Accessibility Evaluation Tools because E.g.
  a spacer image without any semantic value lacks an alt text. As it does not impact
  the user experience, contrary to real accessibility bugs, we fix fake alerts at
  very low priority.'
- Organizations must determine retention periods for personal data.
- Anonymization is an irreversible procedure with a notice period of 90 days.
- The anonymization job runs on Sundays.
- Sub-Processors are contracted by Cirrus to process Personal Data.
- If a Partner is contracted directly by the Customer, they are NOT a Sub-Processor.
- The dashboard provides an overview of Collections, Assessments, Schedules, and Unmarked
  Assessments.
- Cirrus maintains a list of Permanent URLs where we keep these links the same while
  being able to change the target.
- Times in Cirrus are stored in UTC.
- Times are translated to show in the user's timezone settings.
- When the connection is lost for longer than the predetermined (configurable) time,
  the invigilator receives an alert and the candidate's status turns 'red'.
- When internet connectivity is successfully restored, the status will turn 'green'
  again.
- The heartbeat needs to be received successfully for 10% of the 'Connection timeout'
  and not less than 15 seconds before it the connection shows 'green' again.
- Answers to autoscored questions are stored in real-time, while essay question answers
  are stored every 5 seconds.
- The default maximum time to work offline in this way is 60 seconds.
- In case Heartbeat is turned on they will be signaled after the configurable seconders
  in the invigilation dashboard.
- Javascript must be enabled.
- Use our security incident form to report your findings.
- Do not take advantage of the vulnerability or problem you have discovered.
- Sharing schedules is not mandatory.
- Share well in advance.
- Keycode functionality is disabled by default and requires activation in Global Settings.
- Keycode slips need to be printed and handed out by an invigilator.
- 'False Alerts: False alerts from Web Accessibility Evaluation Tools because E.g.
  a spacer image without any semantic value lacks an alt text.'
- Only one Microsoft Office365 business account is required for integration.
- Make sure you always have enough free space on your OneDrive account.
- You may leave ‘Enable Config Key Check’ disabled but then Cirrus will *not* perform
  the check if the approved configuration is being used.
- If you enable it, by design the exam cannot be taken without a recent Safe Exam
  Browser with correct .seb file that matches the configuration on this page.
- API may have rate limits on requests
- All requests to Cirrus related to data privacy will be processed within 30 days.
- Cirrus supports all supported modern 'Evergreen Browsers'; Chrome, Firefox, Edge,
  and Safari; plus Safe Exam Browser.
- We will respond to your report within 3 business days with our evaluation of the
  report and an expected resolution date.
- We will handle your report with strict confidentiality, and not pass on your personal
  details to third parties without your permission.
- Make sure block 'pop-up window' is disabled to ensure it works.
- Exam cannot be taken without a recent Safe Exam Browser with correct .seb file that
  matches the configuration.
errors:
- '400 Bad Request: Fix request before retrying.'
- '500 Internal Server Error: An error occurred while Cirrus Platform processed the
  request.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 400 Error when not mapped
- '200: Successful operation'
- '403: Not allowed to use external API'
- '400: Possible error codes: Assessment hasn''t been found by external id externalId'
- '500: Internal server error'
- '202: User has not been found'
- '400: Possible error codes:  102: Unknown error'
- '400: Possible error codes: 102: Unknown error 130: Root hierarchy was not found
  133: Permissions can not be set for hierarchy 202: User has not been found 206:
  User ExternalId can not be null or empty 209: User Email must be valid email address
  210: FirstName can not be null or empty 211: FirstName can not contain more than
  500 chars 212: LastName can not be null or empty 213: LastName can not contain more
  than 500 chars 214: User with the same UserName already exists 218: ExternalId can
  not have more than 64 chars 219: ExternalId can have only [-_a-zA-Z0-9@] chars 220:
  CellularPhone can not contain more than 50 chars 221: PhoneNumber can not contain
  more than 50 chars 222: AddressLine1 can not contain more than 500 chars 223: AddressLine2
  can not contain more than 500 chars 224: PostalCode can not contain more than 50
  chars 225: PostalAddress can not contain more than 500 chars 226: UserName can not
  contain spaces or have more than 50 chars 227: Company can not contain more than
  100 chars 228: City can not contain more than 50 chars 229: State can not contain
  more than 50 chars 230: CountryCode can not contain more than 20 chars 231: SynchronizationKey
  have to be valid guid 232: User with the same SynchronizationKey is already exists
  233: User with the same ExternalId is already exists 234: Count of labels can not
  be greater than 20 235: Lables can not be empty or have more than 100 chars 236:
  Labels contain duplicates 237: Count of AllowedIpAddresses can not be greater than
  100 238: AllowedIpAddresses must be list of valid IPs or IP ranges 239: AllowedIpAddresses
  contain duplicates 240: Role is null or empty 241: Role with selected title was
  not found 242: Hierarchies contain nulls 243: Hierarchies contain duplicates 244:
  Herarchies contain invalid actions 245: Profile photo could not be loaded. Photo
  have to be valid url 246: DateOfBirth have to have YYYY-MM-DD or YYYYMMDD formats
  247: Password can not contain less than 5 and more than 500 chars 249: ReasonableAdjustmentPercentage
  is invalid. Must be a value between 0 and 999 250: ReasonableAdjustmentPercentage
  cannot be set for candidate with SpecialNeeds = false 1134: Hierarchy must be active'
- '131: Hierarchy was not found'
- '400: Possible error codes:  102: Unknown error 130: Root hierarchy was not found
  133: Permissions can not be set for hierarchy 202: User has not been found 206:
  User ExternalId can not be null or empty 209: User Email must be valid email address
  210: FirstName can not be null or empty 211: FirstName can not contain more than
  500 chars 212: LastName can not be null or empty 213: LastName can not contain more
  than 500 chars 214: User with the same UserName already exists 218: ExternalId can
  not have more than 64 chars 219: ExternalId can have only [-_a-zA-Z0-9@] chars 220:
  CellularPhone can not contain more than 50 chars 221: PhoneNumber can not contain
  more than 50 chars 222: AddressLine1 can not contain more than 500 chars 223: AddressLine2
  can not contain more than 500 chars 224: PostalCode can not contain more than 50
  chars 225: PostalAddress can not contain more than 500 chars 226: UserName can not
  contain spaces or have more than 50 chars 227: Company can not contain more than
  100 chars 228: City can not contain more than 50 chars 229: State can not contain
  more than 50 chars 230: CountryCode can not contain more than 20 chars 231: SynchronizationKey
  have to be valid guid 232: User with the same SynchronizationKey is already exists
  233: User with the same ExternalId is already exists 234: Count of labels can not
  be greater than 20 235: Lables can not be empty or have more than 100 chars 236:
  Labels contain duplicates 237: Count of AllowedIpAddresses can not be greater than
  100 238: AllowedIpAddresses must be list of valid IPs or IP ranges 239: AllowedIpAddresses
  contain duplicates 240: Role is null or empty 241: Role with selected title was
  not found 242: Hierarchies contain nulls 243: Hierarchies contain duplicates 244:
  Herarchies contain invalid actions 245: Profile photo could not be loaded. Photo
  have to be valid url 246: DateOfBirth have to have YYYY-MM-DD or YYYYMMDD formats
  247: Password can not contain less than 5 and more than 500 chars 249: ReasonableAdjustmentPercentage
  is invalid. Must be a value between 0 and 999 250: ReasonableAdjustmentPercentage
  cannot be set for candidate with SpecialNeeds = false'
- '400: Possible errors:  102: Unknown error 202: User has not been found 260: Current
  user can not be deleted with external api'
- '400: Group with ExternalId [{externalId}] is not found'
- '400: Possible errors: Request body can not be null or empty, External id must not
  be null or empty, ExternalId must be alpha-numeric(a-z 0-9), ExternalId must be
  less than 500 symbols, ParentExternalId must be less than 500 symbols, Group cannot
  be parent for itself, SynchronizationKey must be valid GUID, Title must not be null
  or empty, Title must be less than 500 symbols, ExternalId [{externalId}] is used,
  Parent group with ParentExternalId [{parentExternalId}] is not found, Organization
  below or above other organization is not allowed, SynchronizationKey Parent hierarchy
  is archived.'
- '400: Possible errors: Request body can not be null or empty External id must not
  be null or empty ExternalId must be alpha-numeric(a-z 0-9) ExternalId must be less
  than 500 symbols ParentExternalId must be less than 500 symbols Group cannot be
  parent for itself SynchronizationKey must be valid GUID Title must not be null or
  empty Title must be less than 500 symbols ExternalId [{externalId}] is used Parent
  group with ParentExternalId [{parentExternalId}] is not found Organization below
  or above other organization is not allowed SynchronizationKey [{synchronizationKey}]
  is used'
- '400: Possible codes: 801: Collection has not been found'
- '400: Possible error codes: 802: ExternalId must be alpha-numeric(a-z 0-9) 804:
  Collection title can not be null or empty 805: Collection title must be less than
  100 symbols 806: Collection Owner has not been found 807: Collection owner was not
  set 808: Collection Owner does not have permissions to view collections 810: Collection
  ExternalId is used 900: Taxonomy has not been found 901: Taxonomy can not be empty
  902: Taxonomy ExternalId can not be null or empty 1000: Learning objective repository
  has not been found 1001: Learning objective must be a repository 1002: Learning
  objective repository must be published 1003: Collection Owner does not have access
  to this repository 1004: Learning objective repository ExternalId can not be null
  or empty'
- '400: ExternalId parameter can not be null or empty'
- '400: Collection with ExternalId [{externalId}] is not found'
- '400: Possible error codes: ExternalId parameter can not be null or empty, Collection
  with ExternalId [{externalId}] is not found, Collection with externalId [{externalId}]
  has been deleted, Collection contains items that used in assessments, CollectionRole
  [xxxxx] is not found'
- '400: Possible error codes: Assessment info is not valid Assessment must be published
  Assessment creator hasn’t been set in External API settings Selected assessment
  owner no longer has permission to create assessments The specified condition was
  not met for ''Purpose'' External id [ExternalId] is already in use ''External Id''
  should not be empty. ''Code'' should not be empty. ''Purpose'' should not be empty.
  ''Title'' should not be empty. Assessment owner does not exist in the system'
- '400: Possible error codes: Assessment hasn''t been found by external id externalId
  Can''t update published assessment (External id: externalId) settings ''Title''
  should not be empty ''Code'' should not be empty. Update fields have not been specified'
- '400: Possible errors: Assessment hasn''t been found by external id externalId Can''t
  delete published assessment (External id: externalId)'
- '400: Possible error codes: Assessment hasn''t been found by external id externalId
  List of sharing users are not specified'
- '400: Schedule hasn''t been found by external id'
- '400: Invalid input data (all fields in message body are empty)'
- '400: Invalid input data'
- '400: Schedule hasn''t been found by external id, Can’t delete schedule, Scheduler
  hasn’t been set in External API settings, Selected scheduler no longer has permission
  to create, update and delete schedules'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Recheck API key.'
- '400: Possible errors: Invalid input data (all fields in message body are empty)
  Schedule hasn''t been found by external id Can’t update activated schedule Hierarchy
  hasn''t been found by external id Scheduler hasn’t been set in External API settings
  Selected scheduler no longer has permission to create, update and delete schedules
  Workflow can not be changed > A schedule is already available with a different workflow,
  either create new schedule or keep same workflow 249: ReasonableAdjustmentPercentage
  is invalid. Must be a value between 0 and 999 250: ReasonableAdjustmentPercentage
  cannot be set for candidate with SpecialNeeds = false Hierarchy must be active'
- '400: Schedule info is not valid'
- '400: Schedule hasn''t been found by external id, Schedule is already activated,
  Can’t activate schedule (schedule has invalid information), Scheduler hasn’t been
  set in External API settings, Selected scheduler no longer has permission to create,
  update and delete schedules'
- '400: Possible error codes:  100: Request body can not be null or empty. 216: Filter.Users
  can not be null or empty 300: SScheduleExternalId can not be null or empty 301:
  Schedule has not been found'
- '400: Possible error codes: ScheduleExternalId can not be null or empty Request
  body can not be null or empty. Type cannot be null or empty CandidateExternalIds
  can not be null or empty AttemptExternalIds can not be null or empty Schedule has
  not been found Schedule is not activated'
- '400: Possible error codes: 301: Schedule is not been found'
- '400: Possible error codes: 302: Schedule is already archived'
- '321: Anonymization not supported.'
- '322: Cannot anonymize draft schedule'
- '323: Cannot anonymize active schedule'
- '324: Cannot anonymize schedule with unpublished results'
- '325: Schedule has already been marked for anonymization'
- '326: Schedule has already been anonymized'
- '327: Schedule not marked for anonymization'
- '321: Anonymization not supported'
- '400: Possible errors: Schedule hasn''t been found by external id No external ids
  have been provided No users were found by external ids Scheduler hasn’t been set
  in External API settings Selected scheduler no longer has permission to create,
  update and delete schedules'
- 'Bad request: ScheduleExtID already used.'
- '400: Possible errors: Schedule hasn''t been found by external id, Can’t update
  activated schedule, No external ids have been provided, No users were found by external
  ids, Scheduler hasn’t been set in External API settings, Selected scheduler no longer
  has permission to create, update and delete schedules'
- '400: Possible errors: 100: Request body can not be null or empty 200: Request does
  not contains any valid user external ids 300: ScheduleExternalId can not be null
  or empty 301: Schedule has not been found 302: Schedule is archived 305: Schedule
  is finished 318: User does not have permissions to be invigilator'
- '100: Request body can not be null or empty'
- '200: Request does not contains any valid user external ids'
- '300: ScheduleExternalId can not be null or empty'
- '301: Schedule has not been found'
- '302: Schedule is archived'
- '305: Schedule is finished'
- '319: User has not been added as invigilator of this schedule'
- '400: Possible errors:  301: Schedule has not been found 303: Schedule is not activated'
- '400: Possible error codes:  100: Request body can not be null or empty 200: Request
  does not contains any valid user external ids 300: ScheduleExternalId can not be
  null or empty 301: Schedule has not been found 302: Schedule is archived 303: Schedule
  is not activated 305: Schedule is finished 306: Schedule has unlimited time for
  attempt'
- '400: Possible error codes:  202: User has not been found 203: User is not added
  to schedule 301:Schedule has not been found 303: Schedule is not activated 310:
  Schedule has not yet begun'
- '400: Possible error codes: Schedule has not been found, Schedule is archived, Schedule
  is not in progress, Schedule is not activated'
- '400: Schedule has not been found'
- '400: Schedule is archived'
- '400: Schedule is not in progress'
- '400: Schedule is not activated'
- '400: ScheduleExternalId can not be null or empty'
- '400: Schedule does not support marking'
- '400: Marking settings is not found'
- '400: Possible error codes: 1101: Review session has not been found.'
- '400: 1103: Review session owner hasn''t been defined in external API settings in
  Cirrus app'
- '400: 1104: Review session request data is invalid'
- '400: 1106: Review session with the same ExternalId is already exists'
- '400: 301: Schedule has not been found'
- '400: 310: Schedule has not yet begun'
- '400: 1100: ReviewSessionExternalId can not be null or empty'
- '400: 1112: User does not have permissions to view review sessions'
- '400: 1124: Assessment is not found'
- '400: 1109: Started schedule(s) based on the assessment not found'
- '400: 1125: Keycodes are disabled by global settings'
- '400: Possible error codes: 1101: Review session has not been found 1104: Review
  session request data is invalid 1105: Review session is activated 1125: Keycodes
  are disabled by global settings 1132: Cannot change viewed review session 1133:
  Can only change review window in active review session'
- '400: Possible error codes: 1100: ReviewSessionExternalId can not be null or empty
  200: Request does not contains any valid user external ids 201: CandidateExternalId
  can not be null or empty 1101: Review session has not been found 1107: Review session
  has ended 1108: Review session is archived 1126: Published candidate result not
  found 1127: Candidate result(s) already added to the review session 1128: Candidate
  result(s) already added to an ongoing review session'
- '400: Possible error codes: 1100: ReviewSessionExternalId can not be null or empty'
- '201: CandidateExternalId can not be null or empty'
- '1101: Review session has not been found'
- '1126: Published candidate result not found'
- '1129: Candidate result(s) not added to review session'
- '1130: Cannot remove viewed result(s)'
- '1131: Cannot remove all results from review session'
- '1102: Visited review session can not be deleted'
- '400: Possible error codes: 1100: ReviewSessionExternalId can not be null or empty,
  1101: Review session has not been found, 1128: Candidate result is already added
  to an ongoing review session'
- '400: Possible error codes:  100: Request body can not be null or empty. 216: Filter.Users
  can not be null or empty 300: ReviewSessionExternalId can not be null or empty 301:
  ReviewSession has not been found'
- '400: Bad request'
- '404: Url not found'
- Any status other than 2xx will be considered an error and will trigger another attempt.
- 'FTP or Plain FTP Unsupported: Must use FTPS.'
- The operation failed because sharing has been disabled on this site.
- The resource could not be found.
- This link has been disabled.
- Unable to retrieve user's mysite URL (failed to register application).
- 'INVALID_API_KEY: Check the API key provided.'
- 'UNAUTHORIZED: Ensure the API key has the required permissions.'
- 'NOT_FOUND: The requested resource could not be found.'
- '400: Assessment hasn''t been found by external id externalId'
- Duplicate Item ID's are not allowed.
- If a question already exists, a new version will be created next to it.
- Full Outage
- Partial Outage
- '403 Forbidden: Check your permissions and roles.'
- '400 Bad Request: Ensure the request format is correct.'
- '401 Unauthorized: Check authentication credentials.'
- '401 Unauthorized: Ensure valid authentication credentials.'
- 'INVALID_REQUEST: Check request parameters'
- '401 Unauthorized: Check OAuth token validity'
- 'INVALID_RESPONSE: Check the answer format.'
- 'OUT_OF_RANGE: Ensure the value is within specified limits.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '401 Unauthorized: Check your credentials'
- '404 Not Found: Verify the endpoint URL'
- '400 Bad Request: Check the request payload for errors.'
- '401 Unauthorized: Check your authentication credentials.'
- It is not possible to save question if for at least one row debit or credit value
  is not set
- It is not possible to save if there is no at least one section with at least one
  row
- It is not possible to save if Score is empty/0
- It is not possible to save the FSQ if for at least 1 row score is not set.
- '401 Unauthorized: Check your API credentials.'
- '404 Not Found: Verify the endpoint path.'
- '500 Internal Server Error: Try again later.'
- This item is being used in assessment(s). Your possibilities to edit this item are
  limited.
- 'INVALID_REQUEST: Check the request parameters'
- 'UNAUTHORIZED: Ensure valid authentication credentials'
- 'Not supported for export: Feedback for alternatives and Marking schemes for essay
  questions are not exported.'
- '400 Bad Request: Check the request body for required fields.'
- '401 Unauthorized: Verify your authentication credentials.'
- '400 Bad Request: Check the request format and required fields.'
- '401 Unauthorized: Verify OAuth token and permissions.'
- '404 Not Found: Ensure the endpoint is correct.'
- '401 Unauthorized: Verify OAuth token.'
- '429 Too Many Requests: Throttle your requests'
- '404 Not Found: Check the endpoint URL'
- '401 Unauthorized: Verify your authentication credentials'
- '401 Unauthorized: Verify authentication credentials.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '400 Bad Request: Check form data for required fields'
- '401 Unauthorized: Ensure valid OAuth token'
- Exam is not ready. Please contact the administrator for assistance.
- '403 Forbidden: Ensure you have access to the resource'
- '404 Not Found: Verify the resource path'
- '404 Not Found: The requested assessment does not exist.'
- '403 Forbidden: You do not have permission to access this resource.'
- '401 Unauthorized: Check your credentials and OAuth token.'
- '403 Forbidden: You may not have permission to access this resource.'
- 'INVALID_REQUEST: Ensure all required fields are filled.'
- 'UNAUTHORIZED: Check your authentication credentials.'
- 'SCHEDULE_NOT_ACTIVE: Schedule must be active to make changes.'
- 'CANDIDATE_ALREADY_STARTED: Cannot remove candidate once they have started.'
- '401 Unauthorized: Check your OAuth token and scopes.'
- '400 Bad Request: Check your input parameters.'
- '401 Unauthorized: Verify OAuth tokens.'
- '404 Not Found: The specified endpoint does not exist.'
- Cannot deactivate the session if candidates have started.
- '404 Not Found: The specified resource does not exist.'
- '401 Unauthorized: Check your API key and authentication method.'
- '400 Bad Request: Ensure parameters are correctly formatted.'
- '401 Unauthorized: Check your API key or token.'
- '404 Not Found: Verify the endpoint and resource.'
- 'INVALID_CREDENTIALS: Check your client ID and secret.'
- 'ACCESS_DENIED: Ensure you have the correct permissions.'
- 'NOT_FOUND: The requested resource does not exist.'
- Rescoring can only be applied once for a question.
- '401 Unauthorized: Check token validity'
- '403 Forbidden: Ensure correct permissions'
- '401 Unauthorized: Check your access token and scopes.'
- 'User ID: This value is already in use'
- 'Username: spaces not allowed'
- '403 Forbidden: Check user permissions'
- '404 Not Found: Verify the endpoint path'
- '401 Unauthorized: Recheck OAuth token'
- '401 Unauthorized: Check credentials and permissions'
- '404 Not Found: Verify endpoint URL'
- '429 Too Many Requests: Rate limit exceeded, slow down requests'
- Some items contain ids that already exist in the system
- Some items are in wrong places
- Some items contain an invalid type
- Some items contain an empty title
- File contains duplicates of ids
- File contains circular dependencies
- '401 Unauthorized: Check the provided authentication credentials.'
- '401 Unauthorized: Check your authentication credentials'
- '500 Internal Server Error: Try again later'
- '400 Bad Request: Check your request parameters'
- '404 error: Try to reinstall the Proctorio plug-in.'
- 'Microphone issue: Check if your (external) microphone is configured correctly in
  Chrome.'
- '404 error: Candidate receives a 404 error during onboarding'
- 'Webcam issues: Check if your (external) webcam is configured correctly in Chrome.'
- The candidate answer should have at least 20 words.
- If the similarity report is empty/gray, please try to open the report again.
- 'When opening the similarity report I receive an error authentication error as below:
  Please refresh the Cirrus page and try again. It might be your session is expired
  with Turnitin.'
- Error when opening the same file in Cirrus if the file is deleted from OneDrive.
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Invalid credentials'
- '404 Not Found: Check endpoint path'
- 'CR-24013: Resolved an issue where the Learning Objective filter in Library/Collections
  > Items did not function as expected'
- 'CR-24046: Fixed an error when changing SEB key'
- 'CR-24046: Resolved Issue with Results Not Displaying When ''Share Assessment''
  Option is Enabled'
- 'Accessibility barriers: Please report to accessibility@cirrusassessment.com'
- '429 Too Many Requests: Reduce request frequency'
- There will be an error when opening the same file in Cirrus if it is deleted from
  OneDrive.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - X-Cirrus-Signature
  - Bearer
  - Basic Authentication
  - Microsoft Graph
  - Azure AD
  - Identity Provider
  - Service Providers
  - AccessToken
  - ConnectedApp
  - Admin
  - Roles
  - OAuthToken
  - Identity Provider (IdP)
  - SAML Single Sign-On
  - Metadata URL
client:
  base_url: https://help.cirrusassessment.com
  auth:
    type: oauth2
source_metadata: null
