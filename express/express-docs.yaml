resources:
- name: express.text
  endpoint:
    path: /express/text
    method: POST
    data_selector: body
    params:
      defaultCharset: utf-8
      inflate: true
      limit: 100kb
      type: text/plain
- name: express.urlencoded
  endpoint:
    path: /express/urlencoded
    method: POST
    data_selector: body
    params:
      extended: true
      inflate: true
      limit: 100kb
      parameterLimit: 1000
      type: application/x-www-form-urlencoded
- name: get
  endpoint:
    path: /
    method: GET
- name: post
  endpoint:
    path: /
    method: POST
- name: put
  endpoint:
    path: /
    method: PUT
- name: delete
  endpoint:
    path: /
    method: DELETE
- name: req.hostname
  endpoint:
    path: /hostname
    method: GET
    data_selector: hostname
    params: {}
- name: req.ip
  endpoint:
    path: /ip
    method: GET
    data_selector: ip
    params: {}
- name: req.ips
  endpoint:
    path: /ips
    method: GET
    data_selector: ips
    params: {}
- name: req.method
  endpoint:
    path: /method
    method: GET
    data_selector: method
    params: {}
- name: req.originalUrl
  endpoint:
    path: /originalUrl
    method: GET
    data_selector: originalUrl
    params: {}
- name: req.params
  endpoint:
    path: /params
    method: GET
    data_selector: params
    params: {}
- name: req.path
  endpoint:
    path: /path
    method: GET
    data_selector: path
    params: {}
- name: req.protocol
  endpoint:
    path: /protocol
    method: GET
    data_selector: protocol
    params: {}
- name: req.query
  endpoint:
    path: /query
    method: GET
    data_selector: query
    params: {}
- name: req.route
  endpoint:
    path: /route
    method: GET
    data_selector: route
    params: {}
- name: req.secure
  endpoint:
    path: /secure
    method: GET
    data_selector: secure
    params: {}
- name: req.xhr
  endpoint:
    path: /xhr
    method: GET
    data_selector: xhr
    params: {}
- name: text_parser
  endpoint:
    path: express.text
    method: POST
    data_selector: body
    params:
      defaultCharset: utf-8
      inflate: true
      limit: 100kb
      type: text/plain
- name: urlencoded_parser
  endpoint:
    path: express.urlencoded
    method: POST
    data_selector: body
    params:
      extended: true
      inflate: true
      limit: 100kb
      parameterLimit: 1000
      type: application/x-www-form-urlencoded
- name: app
  endpoint:
    path: /app
    method: GET
- name: sendFile
  endpoint:
    path: /sendFile
    method: GET
    data_selector: file
    params: {}
- name: sendStatus
  endpoint:
    path: /sendStatus
    method: GET
    data_selector: statusCode
    params: {}
- name: set
  endpoint:
    path: /set
    method: POST
    data_selector: field
    params: {}
- name: status
  endpoint:
    path: /status
    method: POST
    data_selector: code
    params: {}
- name: type
  endpoint:
    path: /type
    method: POST
    data_selector: type
    params: {}
- name: vary
  endpoint:
    path: /vary
    method: POST
    data_selector: field
    params: {}
- name: root
  endpoint:
    path: /
    method: GET
    data_selector: Hello World!
- name: homepage
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: post_homepage
  endpoint:
    path: /
    method: POST
    data_selector: null
    params: {}
- name: put_user
  endpoint:
    path: /user
    method: PUT
    data_selector: null
    params: {}
- name: delete_user
  endpoint:
    path: /user
    method: DELETE
    data_selector: null
    params: {}
- name: cookie
  endpoint:
    path: /res/cookie
    method: POST
- name: clearCookie
  endpoint:
    path: /res/clearCookie
    method: POST
- name: download
  endpoint:
    path: /res/download
    method: POST
- name: end
  endpoint:
    path: /res/end
    method: POST
- name: format
  endpoint:
    path: /res/format
    method: POST
- name: get
  endpoint:
    path: /res/get
    method: GET
- name: json
  endpoint:
    path: /res/json
    method: POST
- name: jsonp
  endpoint:
    path: /res/jsonp
    method: POST
- name: links
  endpoint:
    path: /res/links
    method: POST
- name: location
  endpoint:
    path: /res/location
    method: POST
- name: redirect
  endpoint:
    path: /res/redirect
    method: POST
- name: render
  endpoint:
    path: /res/render
    method: POST
- name: send
  endpoint:
    path: /res/send
    method: POST
- name: root
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: about
  endpoint:
    path: /about
    method: GET
    data_selector: null
    params: {}
- name: random_text
  endpoint:
    path: /random.text
    method: GET
    data_selector: null
    params: {}
- name: users_books
  endpoint:
    path: /users/:userId/books/:bookId
    method: GET
    data_selector: null
    params: {}
- name: flights
  endpoint:
    path: /flights/:from-:to
    method: GET
    data_selector: null
    params: {}
- name: sendFile
  endpoint:
    path: /sendFile
    method: GET
    data_selector: file
    params: {}
- name: sendStatus
  endpoint:
    path: /sendStatus
    method: GET
    data_selector: statusCode
    params: {}
- name: set
  endpoint:
    path: /set
    method: GET
    data_selector: field
    params: {}
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: code
    params: {}
- name: type
  endpoint:
    path: /type
    method: GET
    data_selector: type
    params: {}
- name: vary
  endpoint:
    path: /vary
    method: GET
    data_selector: field
    params: {}
- name: middleware
  endpoint:
    path: /guide/writing-middleware.html
    method: GET
    data_selector: middleware
- name: hello_world
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: homepage_get
  endpoint:
    path: /
    method: GET
    data_selector: Hello World!
- name: homepage_post
  endpoint:
    path: /
    method: POST
    data_selector: Got a POST request
- name: user_put
  endpoint:
    path: /user
    method: PUT
    data_selector: Got a PUT request at /user
- name: user_delete
  endpoint:
    path: /user
    method: DELETE
    data_selector: Got a DELETE request at /user
- name: template_engine
  endpoint:
    path: /guide/using-template-engines.html
    method: GET
    data_selector: template_engines
    params: {}
- name: example_a
  endpoint:
    path: /example/a
    method: GET
    data_selector: ''
    params: {}
- name: example_b
  endpoint:
    path: /example/b
    method: GET
    data_selector: ''
    params: {}
- name: example_c
  endpoint:
    path: /example/c
    method: GET
    data_selector: ''
    params: {}
- name: example_d
  endpoint:
    path: /example/d
    method: GET
    data_selector: ''
    params: {}
- name: birds_home
  endpoint:
    path: /birds
    method: GET
    data_selector: ''
    params: {}
- name: birds_about
  endpoint:
    path: /birds/about
    method: GET
    data_selector: ''
    params: {}
- name: myLogger
  endpoint:
    path: /myLogger
    method: GET
    data_selector: records
    params: {}
- name: requestTime
  endpoint:
    path: /requestTime
    method: GET
    data_selector: records
    params: {}
- name: validateCookies
  endpoint:
    path: /validateCookies
    method: GET
    data_selector: records
    params: {}
- name: books
  endpoint:
    path: /books
    method: GET
    data_selector: hits.hits
- name: middleware
  endpoint:
    path: /guide/using-middleware.html
    method: GET
    data_selector: middleware
- name: application-level middleware
  endpoint:
    path: /guide/using-middleware.html#application-level-middleware
    method: GET
    data_selector: application-level middleware
- name: router-level middleware
  endpoint:
    path: /guide/using-middleware.html#router-level-middleware
    method: GET
    data_selector: router-level middleware
- name: error-handling middleware
  endpoint:
    path: /guide/error-handling.html
    method: GET
    data_selector: error-handling middleware
- name: views
  endpoint:
    path: /en/starter/generator.html
    method: GET
    data_selector: views
    params: {}
- name: template_engine
  endpoint:
    path: /en/4x/api.html#app.set
    method: GET
    data_selector: template_engine
    params: {}
- name: middleware
  endpoint:
    path: /guide/writing-middleware.html
    method: GET
    data_selector: middleware
    params: {}
- name: routing
  endpoint:
    path: /guide/routing.html
    method: GET
    data_selector: routing
    params: {}
- name: error-handling
  endpoint:
    path: /guide/error-handling.html
    method: GET
    data_selector: error-handling
    params: {}
- name: cookie
  endpoint:
    path: /res/cookie
    method: GET
    data_selector: cookie
- name: clearCookie
  endpoint:
    path: /res/clearCookie
    method: GET
    data_selector: clearCookie
- name: download
  endpoint:
    path: /res/download
    method: GET
    data_selector: download
- name: end
  endpoint:
    path: /res/end
    method: GET
    data_selector: end
- name: format
  endpoint:
    path: /res/format
    method: GET
    data_selector: format
- name: get
  endpoint:
    path: /res/get
    method: GET
    data_selector: get
- name: json
  endpoint:
    path: /res/json
    method: GET
    data_selector: json
- name: jsonp
  endpoint:
    path: /res/jsonp
    method: GET
    data_selector: jsonp
- name: links
  endpoint:
    path: /res/links
    method: GET
    data_selector: links
- name: location
  endpoint:
    path: /res/location
    method: GET
    data_selector: location
- name: redirect
  endpoint:
    path: /res/redirect
    method: GET
    data_selector: redirect
- name: render
  endpoint:
    path: /res/render
    method: GET
    data_selector: render
- name: send
  endpoint:
    path: /res/send
    method: GET
    data_selector: send
- name: sendFile
  endpoint:
    path: /res/sendFile
    method: GET
    data_selector: sendFile
- name: sendStatus
  endpoint:
    path: /res/sendStatus
    method: GET
    data_selector: sendStatus
- name: set
  endpoint:
    path: /res/set
    method: GET
    data_selector: set
- name: status
  endpoint:
    path: /res/status
    method: GET
    data_selector: status
- name: oracledb
  endpoint:
    path: /oracledb
    method: GET
- name: books
  endpoint:
    path: /books
    method: POST
    data_selector: hits.hits
- name: template_engine
  endpoint:
    path: /advanced/developing-template-engines.html
    method: GET
    data_selector: content
    params: {}
- name: app.mountpath
  endpoint:
    path: /app/mountpath
    method: GET
    data_selector: patterns
    params: {}
- name: app.router
  endpoint:
    path: /app/router
    method: GET
    data_selector: router
    params: {}
- name: app.on('mount')
  endpoint:
    path: /app/on/mount
    method: GET
    data_selector: mount_event
    params: {}
- name: app.all
  endpoint:
    path: /app/all
    method: GET
    data_selector: all_method
    params: {}
- name: app.delete
  endpoint:
    path: /app/delete
    method: DELETE
    data_selector: delete_method
    params: {}
- name: app.disable
  endpoint:
    path: /app/disable
    method: GET
    data_selector: disable_method
    params: {}
- name: app.disabled
  endpoint:
    path: /app/disabled
    method: GET
    data_selector: disabled_method
    params: {}
- name: app.enable
  endpoint:
    path: /app/enable
    method: GET
    data_selector: enable_method
    params: {}
- name: app.enabled
  endpoint:
    path: /app/enabled
    method: GET
    data_selector: enabled_method
    params: {}
- name: app.engine
  endpoint:
    path: /app/engine
    method: GET
    data_selector: engine_method
    params: {}
- name: app.get
  endpoint:
    path: /app/get
    method: GET
    data_selector: get_method
    params: {}
- name: app.listen
  endpoint:
    path: /app/listen
    method: GET
    data_selector: listen_method
    params: {}
- name: app.METHOD
  endpoint:
    path: /app/method
    method: GET
    data_selector: method_function
    params: {}
- name: app.param
  endpoint:
    path: /app/param
    method: GET
    data_selector: param_method
    params: {}
- name: app.path
  endpoint:
    path: /app/path
    method: GET
    data_selector: path_method
    params: {}
- name: app.post
  endpoint:
    path: /app/post
    method: POST
    data_selector: post_method
    params: {}
- name: app.put
  endpoint:
    path: /
    method: PUT
- name: app.render
  endpoint:
    path: /viewdirectory
    method: GET
- name: app.route
  endpoint:
    path: /events
    method: ALL
- name: app.set
  endpoint:
    path: /settings
    method: SET
- name: app.use
  endpoint:
    path: /
    method: USE
- name: get_root
  endpoint:
    path: /
    method: get
- name: get_user_by_id
  endpoint:
    path: /user/:id
    method: get
- name: delete_user_by_id
  endpoint:
    path: /user/:id
    method: delete
- name: template_engine
  endpoint:
    path: /advanced/developing-template-engines.html
    method: GET
    data_selector: content
    params: {}
- name: body-parser
  endpoint:
    path: /resources/middleware/body-parser.html
    method: GET
- name: compression
  endpoint:
    path: /resources/middleware/compression.html
    method: GET
- name: connect-rid
  endpoint:
    path: /resources/middleware/connect-rid.html
    method: GET
- name: cookie-parser
  endpoint:
    path: /resources/middleware/cookie-parser.html
    method: GET
- name: cookie-session
  endpoint:
    path: /resources/middleware/cookie-session.html
    method: GET
- name: cors
  endpoint:
    path: /resources/middleware/cors.html
    method: GET
- name: errorhandler
  endpoint:
    path: /resources/middleware/errorhandler.html
    method: GET
- name: method-override
  endpoint:
    path: /resources/middleware/method-override.html
    method: GET
- name: morgan
  endpoint:
    path: /resources/middleware/morgan.html
    method: GET
- name: multer
  endpoint:
    path: /resources/middleware/multer.html
    method: GET
- name: response-time
  endpoint:
    path: /resources/middleware/response-time.html
    method: GET
- name: serve-favicon
  endpoint:
    path: /resources/middleware/serve-favicon.html
    method: GET
- name: serve-index
  endpoint:
    path: /resources/middleware/serve-index.html
    method: GET
- name: serve-static
  endpoint:
    path: /resources/middleware/serve-static.html
    method: GET
- name: session
  endpoint:
    path: /resources/middleware/session.html
    method: GET
- name: timeout
  endpoint:
    path: /resources/middleware/timeout.html
    method: GET
- name: vhost
  endpoint:
    path: /resources/middleware/vhost.html
    method: GET
- name: cookies
  endpoint:
    path: https://www.npmjs.com/package/cookies
    method: GET
- name: csrf
  endpoint:
    path: https://www.npmjs.com/package/csrf
    method: GET
- name: finalhandler
  endpoint:
    path: https://www.npmjs.com/package/finalhandler
    method: GET
- name: parseurl
  endpoint:
    path: https://www.npmjs.com/package/parseurl
    method: GET
- name: path-match
  endpoint:
    path: https://www.npmjs.com/package/path-match
    method: GET
- name: path-to-regexp
  endpoint:
    path: https://www.npmjs.com/package/path-to-regexp
    method: GET
- name: resolve-path
  endpoint:
    path: https://www.npmjs.com/package/resolve-path
    method: GET
- name: router
  endpoint:
    path: https://www.npmjs.com/package/router
    method: GET
- name: routington
  endpoint:
    path: https://www.npmjs.com/package/routington
    method: GET
- name: send
  endpoint:
    path: https://www.npmjs.com/package/send
    method: GET
- name: templation
  endpoint:
    path: https://www.npmjs.com/package/templation
    method: GET
- name: graceful_shutdown
  endpoint:
    path: /advanced/healthcheck-graceful-shutdown.html
    method: GET
- name: health_checks
  endpoint:
    path: /advanced/healthcheck-graceful-shutdown.html
    method: GET
- name: text_parser
  endpoint:
    path: /express/text
    method: POST
    data_selector: body
    params:
      limit: 100kb
- name: urlencoded_parser
  endpoint:
    path: /express/urlencoded
    method: POST
    data_selector: body
    params:
      limit: 100kb
      parameterLimit: 1000
- name: body-parser
  endpoint:
    path: /resources/middleware/body-parser.html
    method: GET
- name: compression
  endpoint:
    path: /resources/middleware/compression.html
    method: GET
- name: connect-rid
  endpoint:
    path: /resources/middleware/connect-rid.html
    method: GET
- name: cookie-parser
  endpoint:
    path: /resources/middleware/cookie-parser.html
    method: GET
- name: cookie-session
  endpoint:
    path: /resources/middleware/cookie-session.html
    method: GET
- name: cors
  endpoint:
    path: /resources/middleware/cors.html
    method: GET
- name: errorhandler
  endpoint:
    path: /resources/middleware/errorhandler.html
    method: GET
- name: method-override
  endpoint:
    path: /resources/middleware/method-override.html
    method: GET
- name: morgan
  endpoint:
    path: /resources/middleware/morgan.html
    method: GET
- name: multer
  endpoint:
    path: /resources/middleware/multer.html
    method: GET
- name: response-time
  endpoint:
    path: /resources/middleware/response-time.html
    method: GET
- name: serve-favicon
  endpoint:
    path: /resources/middleware/serve-favicon.html
    method: GET
- name: serve-index
  endpoint:
    path: /resources/middleware/serve-index.html
    method: GET
- name: serve-static
  endpoint:
    path: /resources/middleware/serve-static.html
    method: GET
- name: session
  endpoint:
    path: /resources/middleware/session.html
    method: GET
- name: timeout
  endpoint:
    path: /resources/middleware/timeout.html
    method: GET
- name: vhost
  endpoint:
    path: /resources/middleware/vhost.html
    method: GET
- name: utility_modules
  endpoint:
    path: /5x/api.html
    method: GET
    data_selector: utility_modules
    params: {}
- name: cookie
  endpoint:
    path: /res/cookie
    method: SET
    data_selector: options
- name: clearCookie
  endpoint:
    path: /res/clearCookie
    method: DELETE
    data_selector: options
- name: download
  endpoint:
    path: /res/download
    method: GET
    data_selector: options
- name: end
  endpoint:
    path: /res/end
    method: END
    data_selector: options
- name: format
  endpoint:
    path: /res/format
    method: FORMAT
    data_selector: object
- name: get
  endpoint:
    path: /res/get
    method: GET
    data_selector: field
- name: json
  endpoint:
    path: /res/json
    method: POST
    data_selector: body
- name: jsonp
  endpoint:
    path: /res/jsonp
    method: POST
    data_selector: body
- name: links
  endpoint:
    path: /res/links
    method: POST
    data_selector: links
- name: location
  endpoint:
    path: /res/location
    method: SET
    data_selector: path
- name: redirect
  endpoint:
    path: /res/redirect
    method: REDIRECT
    data_selector: path
- name: render
  endpoint:
    path: /res/render
    method: RENDER
    data_selector: view
- name: req
  endpoint:
    path: /res/req
    method: GET
    data_selector: request object
- name: send
  endpoint:
    path: /res/send
    method: POST
    data_selector: body
- name: text_parser
  endpoint:
    path: /express.text
    method: POST
    data_selector: body
    params:
      defaultCharset: utf-8
      inflate: true
      limit: 100kb
      type: text/plain
- name: urlencoded_parser
  endpoint:
    path: /express.urlencoded
    method: POST
    data_selector: body
    params:
      extended: true
      inflate: true
      limit: 100kb
      parameterLimit: 1000
      type: application/x-www-form-urlencoded
- name: app
  endpoint:
    path: /
    method: GET
- name: cookie
  endpoint:
    path: /res/cookie
    method: SET
    data_selector: cookies
- name: clear_cookie
  endpoint:
    path: /res/clearCookie
    method: DELETE
    data_selector: cookies
- name: download
  endpoint:
    path: /res/download
    method: GET
    data_selector: file
- name: end
  endpoint:
    path: /res/end
    method: END
    data_selector: response
- name: format
  endpoint:
    path: /res/format
    method: POST
    data_selector: formats
- name: get
  endpoint:
    path: /res/get
    method: GET
    data_selector: headers
- name: json
  endpoint:
    path: /res/json
    method: POST
    data_selector: json_response
- name: jsonp
  endpoint:
    path: /res/jsonp
    method: POST
    data_selector: jsonp_response
- name: links
  endpoint:
    path: /res/links
    method: POST
    data_selector: links
- name: location
  endpoint:
    path: /res/location
    method: SET
    data_selector: location
- name: redirect
  endpoint:
    path: /res/redirect
    method: POST
    data_selector: redirect
- name: render
  endpoint:
    path: /res/render
    method: POST
    data_selector: views
- name: send
  endpoint:
    path: /res/send
    method: POST
    data_selector: response_body
- name: sendFile
  endpoint:
    path: /res/sendFile
    method: GET
    data_selector: file_transfer
- name: sendStatus
  endpoint:
    path: /res/sendStatus
    method: POST
    data_selector: status_response
- name: set
  endpoint:
    path: /res/set
    method: SET
    data_selector: headers
- name: status
  endpoint:
    path: /res/status
    method: SET
    data_selector: http_status
- name: sendFile
  endpoint:
    path: /sendFile
    method: GET
    data_selector: response
    params: {}
- name: sendStatus
  endpoint:
    path: /sendStatus
    method: GET
    data_selector: response
    params: {}
- name: set
  endpoint:
    path: /set
    method: POST
    data_selector: response
    params: {}
- name: status
  endpoint:
    path: /status
    method: POST
    data_selector: response
    params: {}
- name: type
  endpoint:
    path: /type
    method: POST
    data_selector: response
    params: {}
- name: vary
  endpoint:
    path: /vary
    method: POST
    data_selector: response
    params: {}
- name: json_body_parser
  endpoint:
    path: /bodyParser.json
    method: GET
    data_selector: options
    params: {}
- name: raw_body_parser
  endpoint:
    path: /bodyParser.raw
    method: GET
    data_selector: options
    params: {}
- name: text_body_parser
  endpoint:
    path: /bodyParser.text
    method: GET
    data_selector: options
    params: {}
- name: urlencoded_body_parser
  endpoint:
    path: /bodyParser.urlencoded
    method: GET
    data_selector: options
    params: {}
- name: urlencoded_parser
  endpoint:
    path: /login
    method: POST
    data_selector: req.body
    params: {}
- name: json_parser
  endpoint:
    path: /api/users
    method: POST
    data_selector: req.body
    params: {}
- name: cookie_session
  endpoint:
    path: /cookie-session
    method: GET
    data_selector: session
    params: {}
- name: products
  endpoint:
    path: /products/:id
    method: GET
    data_selector: msg
    params: {}
- name: methodOverride
  endpoint:
    path: /method-override
    method: POST
    data_selector: method
    params: {}
- name: cookie
  endpoint:
    path: /res/cookie
    method: GET
    data_selector: cookie_info
- name: clearCookie
  endpoint:
    path: /res/clearCookie
    method: GET
    data_selector: clearCookie_info
- name: download
  endpoint:
    path: /res/download
    method: GET
    data_selector: download_info
- name: end
  endpoint:
    path: /res/end
    method: GET
    data_selector: end_info
- name: format
  endpoint:
    path: /res/format
    method: GET
    data_selector: format_info
- name: get
  endpoint:
    path: /res/get
    method: GET
    data_selector: get_info
- name: json
  endpoint:
    path: /res/json
    method: GET
    data_selector: json_info
- name: jsonp
  endpoint:
    path: /res/jsonp
    method: GET
    data_selector: jsonp_info
- name: links
  endpoint:
    path: /res/links
    method: GET
    data_selector: links_info
- name: location
  endpoint:
    path: /res/location
    method: GET
    data_selector: location_info
- name: redirect
  endpoint:
    path: /res/redirect
    method: GET
    data_selector: redirect_info
- name: render
  endpoint:
    path: /res/render
    method: GET
    data_selector: render_info
- name: send
  endpoint:
    path: /res/send
    method: GET
    data_selector: send_info
- name: sendFile
  endpoint:
    path: /res/sendFile
    method: GET
    data_selector: sendFile_info
- name: sendStatus
  endpoint:
    path: /res/sendStatus
    method: GET
    data_selector: sendStatus_info
- name: set
  endpoint:
    path: /res/set
    method: GET
    data_selector: set_info
- name: status
  endpoint:
    path: /res/status
    method: GET
    data_selector: status_info
- name: morgan
  endpoint:
    path: /resources/middleware/morgan.html
    method: GET
    data_selector: morgan
- name: response_time
  endpoint:
    path: /response-time
    method: GET
    data_selector: records
- name: application_json_parser
  endpoint:
    path: /api/users
    method: POST
    data_selector: req.body
- name: urlencoded_parser
  endpoint:
    path: /login
    method: POST
    data_selector: req.body
- name: directory_index
  endpoint:
    path: /serve-index
    method: GET
    data_selector: index
    params: {}
- name: serveStatic
  endpoint:
    path: /serve-static
    method: GET
- name: cookie-session
  endpoint:
    path: /cookie-session
    method: GET
    data_selector: session
    params: {}
- name: session
  endpoint:
    path: /api/session
    method: POST
    data_selector: session_data
    params: {}
- name: errorhandler
  endpoint:
    path: /resources/middleware/errorhandler.html
    method: GET
    data_selector: options
    params: {}
- name: session
  endpoint:
    path: /store/all
    method: GET
    data_selector: sessions
- name: destroy_session
  endpoint:
    path: /store/destroy/{sid}
    method: DELETE
    data_selector: success
- name: clear_sessions
  endpoint:
    path: /store/clear
    method: DELETE
    data_selector: success
- name: session_count
  endpoint:
    path: /store/length
    method: GET
    data_selector: len
- name: get_session
  endpoint:
    path: /store/get/{sid}
    method: GET
    data_selector: session
- name: set_session
  endpoint:
    path: /store/set/{sid}
    method: POST
    data_selector: success
- name: touch_session
  endpoint:
    path: /store/touch/{sid}
    method: POST
    data_selector: success
- name: view_counter
  endpoint:
    path: /foo
    method: GET
- name: view_counter_bar
  endpoint:
    path: /bar
    method: GET
- name: morgan
  endpoint:
    path: /
    method: GET
    data_selector: morgan
    params: {}
- name: timeout
  endpoint:
    path: /timeout
    method: GET
    data_selector: timeout
    params: {}
- name: vhost
  endpoint:
    path: /resources/middleware/vhost.html
    method: GET
- name: upload
  endpoint:
    path: /profile
    method: POST
    data_selector: req.file
    params: {}
- name: upload_photos
  endpoint:
    path: /photos/upload
    method: POST
    data_selector: req.files
    params: {}
- name: cool_profile
  endpoint:
    path: /cool-profile
    method: POST
    data_selector: req.files
    params: {}
- name: stats
  endpoint:
    path: /stats
    method: POST
    data_selector: req.file
    params: {}
- name: basic_routing
  endpoint:
    path: /starter/basic-routing.html
    method: GET
- name: static_files
  endpoint:
    path: /starter/static-files.html
    method: GET
- name: middleware
  endpoint:
    path: /guide/using-middleware.html
    method: GET
- name: response_time
  endpoint:
    path: /response-time
    method: GET
    data_selector: metrics
    params: {}
- name: root_get
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: root_post
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: user_put
  endpoint:
    path: /user
    method: PUT
    data_selector: response
    params: {}
- name: user_delete
  endpoint:
    path: /user
    method: DELETE
    data_selector: response
    params: {}
- name: favicon
  endpoint:
    path: /favicon.ico
    method: GET
    data_selector: icon
- name: hello_world_example
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: serveIndex
  endpoint:
    path: /serveIndex
    method: GET
    data_selector: directory listing
    params: {}
- name: session
  endpoint:
    path: /session
    method: GET
    data_selector: sessionData
    params: {}
- name: view_counter
  endpoint:
    path: /foo
    method: GET
    data_selector: views
    params: {}
- name: bar_counter
  endpoint:
    path: /bar
    method: GET
    data_selector: views
    params: {}
- name: body-parser
  endpoint:
    path: /resources/middleware/body-parser.html
    method: GET
- name: compression
  endpoint:
    path: /resources/middleware/compression.html
    method: GET
- name: connect-rid
  endpoint:
    path: /resources/middleware/connect-rid.html
    method: GET
- name: cookie-parser
  endpoint:
    path: /resources/middleware/cookie-parser.html
    method: GET
- name: cookie-session
  endpoint:
    path: /resources/middleware/cookie-session.html
    method: GET
- name: cors
  endpoint:
    path: /resources/middleware/cors.html
    method: GET
- name: errorhandler
  endpoint:
    path: /resources/middleware/errorhandler.html
    method: GET
- name: method-override
  endpoint:
    path: /resources/middleware/method-override.html
    method: GET
- name: morgan
  endpoint:
    path: /resources/middleware/morgan.html
    method: GET
- name: multer
  endpoint:
    path: /resources/middleware/multer.html
    method: GET
- name: response-time
  endpoint:
    path: /resources/middleware/response-time.html
    method: GET
- name: serve-favicon
  endpoint:
    path: /resources/middleware/serve-favicon.html
    method: GET
- name: serve-index
  endpoint:
    path: /resources/middleware/serve-index.html
    method: GET
- name: serve-static
  endpoint:
    path: /resources/middleware/serve-static.html
    method: GET
- name: session
  endpoint:
    path: /resources/middleware/session.html
    method: GET
- name: timeout
  endpoint:
    path: /resources/middleware/timeout.html
    method: GET
- name: vhost
  endpoint:
    path: /resources/middleware/vhost.html
    method: GET
- name: vhost
  endpoint:
    path: /resources/middleware/vhost.html
    method: GET
    data_selector: vhost
    params: {}
- name: template_engine
  endpoint:
    path: /guide/using-template-engines.html
    method: GET
    data_selector: template_engines
    params: {}
- name: route_methods
  endpoint:
    path: /en/4x/api.html#app.METHOD
    method: GET
    data_selector: methods
    params: {}
- name: route_paths
  endpoint:
    path: /guide/routing.html
    method: GET
    data_selector: paths
    params: {}
- name: route_parameters
  endpoint:
    path: /guide/routing.html#route-parameters
    method: GET
    data_selector: parameters
    params: {}
- name: response_methods
  endpoint:
    path: /en/4x/api.html#res
    method: GET
    data_selector: response_methods
    params: {}
- name: homepage
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: post_homepage
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: user_put
  endpoint:
    path: /user
    method: PUT
    data_selector: response
    params: {}
- name: user_delete
  endpoint:
    path: /user
    method: DELETE
    data_selector: response
    params: {}
- name: hello_world_example
  endpoint:
    path: /
    method: GET
    data_selector: Hello World!
- name: application-level middleware
  endpoint:
    path: /guide/using-middleware.html
    method: GET
    data_selector: middleware
    params: {}
- name: router-level middleware
  endpoint:
    path: /guide/using-middleware.html
    method: GET
    data_selector: middleware
    params: {}
- name: error-handling middleware
  endpoint:
    path: /guide/error-handling.html
    method: GET
    data_selector: middleware
    params: {}
- name: built-in middleware
  endpoint:
    path: /guide/using-middleware.html
    method: GET
    data_selector: middleware
    params: {}
- name: third-party middleware
  endpoint:
    path: /guide/using-middleware.html
    method: GET
    data_selector: middleware
    params: {}
- name: body-parser
  endpoint:
    path: /resources/middleware/body-parser.html
    method: GET
- name: compression
  endpoint:
    path: /resources/middleware/compression.html
    method: GET
- name: connect-rid
  endpoint:
    path: /resources/middleware/connect-rid.html
    method: GET
- name: cookie-parser
  endpoint:
    path: /resources/middleware/cookie-parser.html
    method: GET
- name: cookie-session
  endpoint:
    path: /resources/middleware/cookie-session.html
    method: GET
- name: cors
  endpoint:
    path: /resources/middleware/cors.html
    method: GET
- name: errorhandler
  endpoint:
    path: /resources/middleware/errorhandler.html
    method: GET
- name: method-override
  endpoint:
    path: /resources/middleware/method-override.html
    method: GET
- name: morgan
  endpoint:
    path: /resources/middleware/morgan.html
    method: GET
- name: multer
  endpoint:
    path: /resources/middleware/multer.html
    method: GET
- name: response-time
  endpoint:
    path: /resources/middleware/response-time.html
    method: GET
- name: serve-favicon
  endpoint:
    path: /resources/middleware/serve-favicon.html
    method: GET
- name: serve-index
  endpoint:
    path: /resources/middleware/serve-index.html
    method: GET
- name: serve-static
  endpoint:
    path: /resources/middleware/serve-static.html
    method: GET
- name: session
  endpoint:
    path: /resources/middleware/session.html
    method: GET
- name: timeout
  endpoint:
    path: /resources/middleware/timeout.html
    method: GET
- name: vhost
  endpoint:
    path: /resources/middleware/vhost.html
    method: GET
- name: template_engine
  endpoint:
    path: /guide/using-template-engines
    method: GET
    data_selector: templateEngines
notes:
- Express 4.0 requires Node.js 0.10 or higher.
- Sub-apps will not inherit the value of settings that have a default value.
- Sub-apps will inherit the value of settings with no default value.
- Sub-apps will not inherit the value of settings that have a default value. You must
  set the value in the sub-app.
- The `root` option allows relative paths.
- Middleware runs sequentially, affecting performance.
- This app starts a server and listens on port 3000 for connections.
- For every other path, it will respond with a 404 Not Found.
- This API provides access to data on the running file system.
- Ensure that the path argument is secure if it contains user input.
- Middleware functions can perform tasks like executing code, modifying request/response
  objects, and managing the request-response cycle.
- Altering the global prototypes will affect all loaded Express apps in the same process.
- Properties under category 1 cannot be overridden.
- Express 4.x requires Node.js 0.10 or higher.
- Express 5.x requires Node.js 18 or higher.
- Express comes with a default error handler so you don’t need to write your own to
  get started.
- If you pass an error to next() and you do not handle it in a custom error handler,
  it will be handled by the built-in error handler.
- To see all the internal logs used in Express, set the DEBUG environment variable
  to express:* when launching your app.
- When a request is then made to the app, you will see the logs specified in the Express
  code.
- Express 4 is a breaking change from Express 3.
- You must explicitly add all the middleware that is required to run your app.
- Express 5 is not very different from Express 4; although it maintains the same basic
  API, there are still changes that break compatibility with the previous version.
- To install this version, you need to have a Node.js version 18 or higher.
- Middleware functions can perform various tasks such as executing code and modifying
  request/response objects.
- Order of middleware loading affects execution.
- Express 5.0 requires Node.js 18 or higher.
- Middleware functions can perform any tasks like executing code, modifying request/response
  objects, and ending request-response cycles.
- Express-compliant template engines such as Pug export a function named '__express(filePath,
  options, callback)'
- If you call next() with an error after you have started writing the response, the
  Express default error handler closes the connection and fails the request.
- Express 4 is a breaking change from Express 3 and requires explicit loading of middleware.
- Express 3.x IS END-OF-LIFE AND NO LONGER MAINTAINED
- Known and unknown security and performance issues in 3.x have not been addressed
  since the last update (1 August, 2015). It is highly recommended to use the latest
  version of Express.
- Don’t use deprecated or vulnerable versions of Express
- Use TLS
- Do not trust user input
- Prevent open redirects
- Use Helmet
- Reduce fingerprinting
- Use cookies securely
- Don’t use the default session cookie name
- Set cookie security options
- Prevent brute-force attacks against authorization
- Ensure your dependencies are secure
- Avoid other known vulnerabilities
- Additional considerations
- Set NODE_ENV to 'production' for improved performance
- Set NODE_ENV to 'production' to improve performance.
- Ensure your app automatically restarts in case of crashes.
- You cannot maintain state in the application code when running in a cluster.
- Worker processes can crash individually without affecting the rest of the processes.
- Ensure your app automatically restarts using a process manager.
- On systems that don’t support Upstart 1.4, the commands are slightly different.
- Another strategy to improve the performance in production is to cache the result
  of requests, so that your app does not repeat the operation to serve the same request
  repeatedly.
- A load balancer is usually a reverse proxy that orchestrates traffic to and from
  multiple application instances and servers.
- 3.x API is end-of-life and no longer maintained. It is highly recommended to use
  the latest version of Express.
- Caching view templates and CSS files improves performance.
- Ensure your app automatically restarts if it crashes.
- The Express team and community take all security bugs in Express seriously.
- In a multi-core system, you can increase the performance of a Node app by many times
  by launching a cluster of processes.
- It is recommended to run Express behind a reverse proxy like Nginx or HAProxy in
  production.
- Support for sending responses as Uint8Array
- Added support for ETag option in `res.sendFile()`
- Added support for adding multiple links with the same rel with `res.links()`
- 'Performance: Use loop for acceptParams'
- Ensure your app automatically restarts.
- 'IMPORTANT: Since the app instances run as separate processes, they do not share
  the same memory space.'
- Another strategy to improve the performance in production is to cache the result
  of requests.
- For a discussion, see Using multiple nodes.
- Handles both text and urlencoded payloads.
- Contributions must go through pull requests.
- Committers must use pull requests for all changes.
- Ensure that the path argument is an absolute path if not using the root option.
- When the root option is provided, the path argument can be relative.
- Added support for ETag option in res.sendFile()
- Added support for adding multiple links with the same rel with res.links()
- This middleware will never compress responses that include a Cache-Control header
  with the no-transform directive.
- Optionally you may enable signed cookie support by passing a secret string
- 'A signed cookie is a cookie that has a value prefixed with s:'
- This module does not encrypt the session contents in the cookie, only provides signing
  to prevent tampering.
- This module does not prevent session replay, as the expiration set is that of the
  cookie only.
- CORS is a node.js package for providing middleware that can be used to enable CORS
  with various options.
- Development-only error handler middleware.
- Only intended to be used in a development environment.
- HTTP request logger middleware for node.js
- Installation is done using npm install command
- This does not handle multipart bodies, due to their complex and typically large
  nature.
- Multer will not process any form which is not multipart (`multipart/form-data`)
- This module creates a middleware that records the response time for requests in
  HTTP servers.
- This module is exclusively for serving the 'default, implicit favicon', which is
  GET /favicon.ico.
- The middleware will parse the Cookie header on the request and expose the cookie
  data as the property req.cookies
- Serves pages that contain directory listings for a given path.
- This module allows for serving files from within a given root directory.
- Session data is not saved in the cookie itself, just the session ID.
- The default server-side session storage, MemoryStore, is not designed for a production
  environment.
- CORS is a node.js package for providing a Connect/Express middleware that can be
  used to enable CORS with various options.
- This middleware is only intended to be used in a development environment
- Full error stack traces and internal details of any object passed will be sent back
  to the client
- It is very important that this module is used before any module that needs to know
  the method of the request.
- Uses express-session for user authentication and session management.
- Uses predefined formats such as combined, common, dev, short, and tiny.
- This module is not recommend as a top-level middleware unless you take precautions
  to halt your own middleware processing.
- Make sure to always handle the files that a user uploads.
- 'Express supports methods that correspond to all HTTP request methods: get, post,
  etc.'
- This module is exclusively for serving the 'default, implicit favicon'
- For additional vendor-specific icons that require HTML markup, additional middleware
  is required
- This app responds with 'Hello World!' for requests to the root URL ('/') or route.
- This module will instead call `next()` to move on to the next middleware, allowing
  for stacking and fall-backs.
- The default server-side session storage, MemoryStore, is purposely not designed
  for a production environment.
- Every session store must be an EventEmitter and implement specific methods.
- A simple example using express-session to store page views for a user.
- This module uses the debug module internally to log information about session operations.
- This module is not recommend as a 'top-level' middleware unless you take precautions
  to halt your own middleware processing.
- Slow requests will continue to use CPU and memory, even if you are returning a HTTP
  response in the timeout callback.
- Create a new middleware function to hand off request to handle when the incoming
  host for the request matches hostname.
- The view engine cache does not cache the contents of the template’s output, only
  the underlying template itself.
- Responds with 'Hello World!' for requests to the root URL
- For every other path, it will respond with a 404 Not Found
- You must catch errors that occur in asynchronous code invoked by route handlers
  or middleware and pass them to Express for processing.
- Some template engines do not follow the convention of exporting a function named
  __express.
errors:
- If you call next() with an error after you have started writing the response, the
  Express default error handler closes the connection and fails the request.
- The stack trace is not included in the production environment.
- 'If the callback in a sequence provides no data, only errors, you can simplify this
  code as follows: ...'
- If you pass anything to the next() function (except the string 'route'), Express
  regards the current request as being an error and will skip any remaining non-error
  handling routing and middleware functions.
- '404 Not Found: Ensure the requested route exists.'
- '500 Internal Server Error: Check server-side code for errors.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- 'Invalid HTTP status code: Throws when res.statusCode is set to an invalid HTTP
  status code.'
- content encoding unsupported
- entity parse failed
- entity verify failed
- request aborted
- request entity too large
- request size did not match content length
- stream encoding should not be set
- stream is not readable
- too many parameters
- unsupported charset "BOGUS"
- unsupported content encoding "bogus"
- The input exceeded the depth
- unsupported charset “BOGUS”
- unsupported content encoding “bogus”
- 'LIMIT_UNEXPECTED_FILE: If any file upload is made, error with code'
- 'Max Cookie Size: Exceeding 4096 bytes can cause the browser to refuse to store
  the cookie.'
- NODE_ENV must be set to 'development' to use this middleware
- 'NPM_INSTALL_ERROR: Ensure you have npm installed and the correct permissions.'
- 'timeout: request timed out'
- 'LIMIT_UNEXPECTED_FILE: If any file upload is made when using .none() method'
- '404 Not Found: For every other path.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects: []
client:
  base_url: http://localhost:3000
  headers:
    Accept: application/json
source_metadata: null
