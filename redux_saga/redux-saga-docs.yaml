resources:
- name: helloSaga
  endpoint:
    path: /sagas
    method: GET
    data_selector: sagas
    params: {}
- name: incrementAsync
  endpoint:
    path: /sagas
    method: GET
    data_selector: incrementAsync
    params: {}
- name: throttling
  endpoint:
    path: /docs/recipes/throttling
    method: GET
- name: debouncing
  endpoint:
    path: /docs/recipes/debouncing
    method: GET
- name: retrying_xhr_calls
  endpoint:
    path: /docs/recipes/retrying-xhr-calls
    method: GET
- name: undo
  endpoint:
    path: /docs/recipes/undo
    method: GET
- name: batching_actions
  endpoint:
    path: /docs/recipes/batching-actions
    method: GET
- name: takeEvery
  endpoint:
    path: /docs/advanced/Concurrency#takeevery
    method: GET
    data_selector: examples
    params: {}
- name: takeLatest
  endpoint:
    path: /docs/advanced/Concurrency#takelatest
    method: GET
    data_selector: examples
    params: {}
- name: basic_logger
  endpoint:
    path: /docs/advanced/FutureActions#a-basic-logger
    method: GET
    data_selector: action
    params: {}
- name: watch_first_three_todos_creation
  endpoint:
    path: /docs/advanced/FutureActions#watchFirstThreeTodosCreation
    method: GET
    data_selector: action
    params: {}
- name: login_flow
  endpoint:
    path: /docs/advanced/FutureActions#loginFlow
    method: GET
    data_selector: action
    params: {}
- name: login_flow
  endpoint:
    path: /login_flow
    method: POST
    data_selector: token
    params: {}
- name: race
  endpoint:
    path: /docs/advanced/RacingEffects
    method: GET
    data_selector: examples
    params: {}
- name: rootSaga
  endpoint:
    path: /docs/advanced/RootSaga
    method: GET
    data_selector: content
- name: nonBlockingFork
  endpoint:
    path: /docs/advanced/NonBlockingForkEffects
    method: GET
    data_selector: content
- name: sagas
  endpoint:
    path: /sagas
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: repos
  endpoint:
    path: /repos
    method: GET
- name: task_cancellation
  endpoint:
    path: /docs/advanced/TaskCancellation
    method: GET
    data_selector: content
    params: {}
- name: throttle
  endpoint:
    path: /docs/api#throttle
    method: GET
    data_selector: example
    params: {}
- name: debounce
  endpoint:
    path: /docs/api#debounce
    method: GET
    data_selector: example
    params: {}
- name: retry
  endpoint:
    path: /docs/api#retry
    method: GET
    data_selector: example
    params: {}
- name: undo
  endpoint:
    path: /docs/api#undo
    method: GET
    data_selector: example
    params: {}
- name: batching
  endpoint:
    path: /docs/api#batching
    method: GET
    data_selector: example
    params: {}
- name: logger
  endpoint:
    path: /docs/advanced/Logger
    method: GET
    data_selector: actions
    params: {}
- name: loginFlow
  endpoint:
    path: /docs/advanced/LoginFlow
    method: GET
    data_selector: flow
    params: {}
notes:
- '`retry` is a high-level API built using `delay` and `call`.'
- When resolving a `race`, the middleware automatically cancels all the losing Effects.
- 'When running Effects in parallel, the middleware suspends the Generator until one
  of the following occurs: All the Effects completed with success or One of the Effects
  was rejected before all the effects complete.'
- Some objects like Contact may return nulls in deeply nested fields
- The UMD version is useful if you don't use Webpack or Browserify.
- Messages on an eventChannel are not buffered by default. You have to provide a buffer
  to the eventChannel factory in order to specify buffering strategy for the channel.
- Each function below returns a plain JavaScript object and does not perform any execution.
- The execution is performed by the middleware during the Iteration process described
  above.
- The middleware will perform a call `fn(...arg, cb)`.
- Errors from child tasks automatically bubble up to their parents.
- Uses Redux for state management
- Sagas implemented as Generator functions
- From redux-saga@v1 debounce is built-in effect.
- Uses a for loop with a delay to retry an XHR call.
- Make sure that you yield the effects from the generator function.
- When a Saga is waiting for an Effect to resolve, it will not be able to take dispatched
  actions until the Effect is resolved.
- To avoid blocking the Saga, you can use a non-blocking call using fork instead of
  call.
- Tasks in saga are asynchronous by their nature, so we have to make some additional
  work to show 'saga stack' as it was a chain of synchronous calls.
- If you want to have those 'saga stack' with file names and line numbers for development
  purposes, you can add babel-plugin.
- Uses actionChannel to buffer specific actions from the Store.
- Event channels can connect to external events.
- Messages on an eventChannel are not buffered by default.
- Uses non-blocking calls with fork to allow concurrent actions.
- Tasks can be cancelled to avoid inconsistent state.
- retry is a high-level API built using delay and call.
- When resolving a race, the middleware automatically cancels all the losing Effects.
- Root Saga aggregates multiple Sagas to a single entry point for the sagaMiddleware
  to run.
- Using fork effects allows child sagas to run concurrently without blocking the root
  saga.
- The final code of this tutorial is located in the `sagas` branch.
- Cancellation propagates downward.
- Ensure the Saga is not blocked on some effect to avoid missing dispatched actions.
- Attached forks share the same semantics with the parallel Effect.
- The take effect allows control over action observation process.
- Uses non-blocking calls with fork to handle concurrent actions.
- Automatic cancellation occurs in race and parallel effects.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Issues can be reported on the tutorial repo
- Cancellation of all attached forks that are still executing.
auth_info:
  mentioned_objects: []
client:
  base_url: https://redux-saga.js.org
  headers:
    Accept: application/json
source_metadata: null
