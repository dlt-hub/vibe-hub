resources:
- name: latest_messages
  endpoint:
    path: /fetch_latest_messages
    method: GET
- name: messages_by_date_range
  endpoint:
    path: /find_messages_by_date_range
    method: GET
- name: latest_messages
  endpoint:
    path: /webhook_data
    method: GET
    data_selector: records
- name: messages_by_date_range
  endpoint:
    path: /webhook_data
    method: GET
    data_selector: records
- name: fetch_latest_messages
  endpoint:
    path: /fetch_latest_messages
    method: GET
    data_selector: messages
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: status
- name: fetch_latest_messages
  endpoint:
    path: /fetch_latest_messages
    method: GET
    data_selector: messages
    params:
      n: 10
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: status
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: llm-query
  endpoint:
    path: /llm-query
    method: POST
    data_selector: llm_response
- name: llm_query
  endpoint:
    path: /llm-query
    method: POST
    data_selector: llm_response
- name: stripe_webhook
  endpoint:
    path: /webhook
    method: POST
- name: stripe_webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: event
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- The Realtime API is a websocket API and not easy to setup directly from the front-end.
- WebSocket connection is established to send and receive audio processing data.
- Uses WebSocket connection to OpenAI API for real-time data.
- Uses WebSocket for real-time communication
- Some objects like Contact may return nulls in deeply nested fields
- Databutton ensures the testing of the generated API.
- Databutton handles sign-up forms, password resets, and all the behind-the-scenes
  security automatically.
- Data storage in Databutton is handled on the backend using a serverless, production-grade
  PostgreSQL database.
- Databutton uses databutton’s own SDK to fetch the API key from the storage.
- Make sure to check our Discord Prompt Tips channel for details.
- The stripe webhook API / backend needs to be deployed after each change for Stripe
  to access the latest production.
- The Agent can install any pip packages, including packages hosted on Git (e.g.,
  git+https://...)
- Databutton comes with a pre-configured set of popular packages. You cannot install
  additional NPM packages at the moment.
- User needs to obtain Firebase Service Account Key and store it as a secret.
- To add a favicon, provide the URL of your favicon in the designated field.
- Select the Light / Dark theme from the drop down.
- Select the primary screen size for your app (Desktop / Mobile / Tablet).
- The overall process takes about one day, but often shorter.
- Agent can install any pip packages, including those hosted on Git.
- You cannot install additional NPM packages at the moment.
- MCP servers are usually locally running on your machine, but we will host them for
  you to remove hassle and allow you to distribute them.
- Remember to 'Deploy' your app whenever you have new endpoints created (that you
  want shown in the Databutton MCP server).
- Making the APIs public will make ALL endpoints from your development environment
  open on the internet.
- To customize your app's design, go to Configuration in the sidebar and select the
  Design tab.
- Consider the device your target audience is most likely to use.
- 'You can disable the preview to prevent the browser window crashing while you fix
  this issue by adding a query parameter to the URL before opening up the app like
  this: https://databutton.com/projects/<your-project-id>?preview-disabled=true'
- To bring back the preview, close your tab and open it again.
- Eliminates manual paperwork and certificate generation
- Turns out they have deprecated API keys and only have personal access tokens now
errors:
- '400: Bad Request - Check the request format and parameters'
- '500: Internal Server Error - An unexpected error occurred'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Invalid payload
- Invalid signature
- 'MCP databutton-app: spawn uvx ENOENT: Ensure you have uv installed.'
- 'MCP databutton-app: Server disconnected.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - STRIPE_SECRET_KEY
  - STRIPE_WEBHOOK_SECRET
client:
  base_url: http://databutton.com
  auth:
    type: oauth2
source_metadata: null
