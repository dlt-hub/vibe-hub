resources:
- name: Advanced Reporting
  endpoint:
    path: /reportscommand/swagger/index.html
    method: GET
- name: Association
  endpoint:
    path: /associationcommand/swagger/index.html
    method: GET
- name: Audit
  endpoint:
    path: /auditquery/swagger/index.html
    method: GET
- name: journey_instance
  endpoint:
    path: /services/data/vXX.X/sobjects/JourneyInstance
    method: GET
    data_selector: data.journeyInstance
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: transactions_batch_upload
  endpoint:
    path: /api/transactions/batch/generate-upload-url
    method: POST
    data_selector: result
    params: {}
- name: transactions_batch_validation_result
  endpoint:
    path: /api/transactions/batch/validation-result/<batch-id>
    method: GET
    data_selector: result
    params: {}
- name: data_protection
  endpoint:
    path: /api/data-deletion-processes
    method: GET
    data_selector: processes
    params: {}
- name: TM Rule Execution
  endpoint:
    path: /api/rules/execute
    method: POST
- name: service_level_agreements
  endpoint:
    path: /services/data/vXX.X/sobjects/ServiceLevelAgreements
    method: GET
    data_selector: records
    params: {}
- name: ongoing_screening
  endpoint:
    path: /services/data/vXX.X/sobjects/OngoingScreening
    method: GET
    data_selector: records
    params: {}
- name: legal_entity
  endpoint:
    path: /api/legal_entities
    method: POST
    data_selector: data
    params: {}
- name: journey
  endpoint:
    path: /api/journeys
    method: POST
    data_selector: data
    params: {}
- name: legal_entity
  endpoint:
    path: /api/v1/legal-entity
    method: POST
    data_selector: data
    params: {}
- name: bulk_load
  endpoint:
    path: /bulk/load
    method: POST
    data_selector: legal_entities
    params:
      action: create
- name: legal_entity
  endpoint:
    path: /api/legal-entity
    method: GET
    data_selector: records
    params: {}
- name: auditevent_resources
  endpoint:
    path: ~/journeyquery/api/auditevent/resources
    method: GET
- name: auditevent_searchterm
  endpoint:
    path: ~/journeyquery/api/auditevent/searchterm
    method: GET
notes:
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like JourneyInstance may return nulls in deeply nested fields
- Every call to a Fenergo Command or Query API must include an API Access Token.
- Some objects like Contact may return nulls in deeply nested fields
- New 'AutonomyLevel' property added to BatchMetadataDto.
- New 'LastActionedBy' property added to MatchDto.
- Salesforce now supports the Unsubscribe from Ongoing Screening task.
- Mandatory Search Parameters ensure that entity searches cannot be executed unless
  all mandatory fields are completed.
- The Fenergo platform is a highly scalable, cloud-native platform.
- The user interface is designed to be user-friendly and intuitive.
- API functionality is created and offered as APIs, with the UI acting as a wrapper.
- Fenergo API supports direct API for creating and updating legal entity data.
- All Journey, Policy and Risk configuration is portable and can be copied from one
  tenant to another.
- Tasks can be labeled and given a task key which can greatly aid with integrations
  interacting with differing tenants.
- Event notification messages generated by Fenergo have a TTL (Time to Live) of 30
  days. After this time our internal cleanup operation will delete these notifications.
- Be aware of Eventual Consistency as described elsewhere in the documentation
- Requires setup of connected app in Fenergo
- Some operations may have rate limits
- As a multi-tenant SaaS solution, we do not provide direct access to underlying data
  sources.
- Fenergo takes on the responsibility of managing and securing the data sources for
  all clients.
- Client credentials can be protected by limiting the Scopes they are assigned.
- 'Important: Keep API Client Credentials secure.'
- Every audit query response will contain one or many events.
- Single event object will contain information regarding resourceType, resourceId
  and eventType for given resource.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'HTTP 400 - Bad Request: Something incorrect has occurred.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '400 Bad Request: Check for required fields in the request body.'
- '401 Unauthorized: Validate access token and permissions.'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Verify OAuth token'
- '429 Too Many Requests: Rate limit exceeded'
- 400 - Bad Request perhaps missing a required parameter.
- 401 - Unauthorised No valid access token provided.
- 403 - Forbidden No permissions to perform the request.
- 404 - Not Found The requested resource doesn't exist.
- 429 - Too Many Requests.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.fenergox.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.fenergox.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
