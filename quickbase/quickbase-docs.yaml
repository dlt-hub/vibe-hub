resources:
- name: send_invitation
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      userid: The ID of the Quickbase user you are inviting to your application.
      ticket: A valid authentication ticket.
      usertoken: The user token is an alternative means of authentication.
      apptoken: A valid application token.
- name: send_invitation
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      userid: The ID of the Quickbase user you are inviting to your application.
      ticket: A valid authentication ticket.
      usertoken: The user token is an alternative means of authentication, used for
        API access.
      apptoken: A valid application token.
- name: provision_user
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      email: email
      roleid: roleid
      fname: fname
      lname: lname
      uname: uname
      ticket: ticket
      usertoken: usertoken
      apptoken: apptoken
      udata: udata
- name: provision_user
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      email: The email address of the person to whom you are granting access.
      roleid: The role ID of the role you want to assign this user to.
      fname: The first name of the new Quickbase user.
      lname: The last name of the new Quickbase user.
      ticket: A valid authentication ticket.
      usertoken: The user token is an alternative means of authentication.
      apptoken: A valid application token.
- name: API_DoQuery
  endpoint:
    path: /v1/docs/api-doquery
    method: POST
- name: API_GenResultsTable
  endpoint:
    path: /v1/docs/api-genresultstable
    method: POST
- name: API_DoQuery
  endpoint:
    path: /v1/docs/api-doquery
    method: GET
- name: API_GenResultsTable
  endpoint:
    path: /v1/docs/api-genresultstable
    method: GET
- name: upload_file
  endpoint:
    path: /v1/docs/api-addrecord
    method: POST
    data_selector: records
- name: download_file
  endpoint:
    path: /up/{DBID}/a/r{RID}/e{FID}/v{VID}
    method: GET
    data_selector: records
- name: upload_file
  endpoint:
    path: /v1/docs/api-addrecord
    method: POST
- name: download_file_by_id
  endpoint:
    path: /up/DBID/a/rRID/eFID/vVID
    method: GET
- name: download_file_by_url
  endpoint:
    path: /up/DBID/g/rz/ey/va/FileName
    method: GET
- name: query
  endpoint:
    path: /db/target_dbid
    method: GET
    data_selector: records
    params:
      query: <query>{myfid.operator.value}</query>
      ticket: valid_authentication_ticket
      usertoken: user_token
      apptoken: application_token
- name: API created Sample
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: records
- name: query
  endpoint:
    path: /db/target_dbid
    method: GET
    data_selector: records
    params:
      query: <query>{'5'.CT.'Ragnar Lodbrok'}</query>
      ticket: authentication_ticket
      usertoken: user_token
      apptoken: application_token
- name: API created Sample
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: records
- name: API_AddRecord
  endpoint:
    path: /v1/records
    method: POST
- name: API_EditRecord
  endpoint:
    path: /v1/records
    method: PUT
- name: API_CloneDatabase
  endpoint:
    path: /v1/databases/clone
    method: POST
- name: API_GetRecordInfo
  endpoint:
    path: /v1/records/{record_id}
    method: GET
- name: API_GetSchema
  endpoint:
    path: /v1/schemas
    method: GET
- name: API_DoQuery
  endpoint:
    path: /v1/records/query
    method: POST
- name: API_ImportFromCSV
  endpoint:
    path: /v1/import/csv
    method: POST
- name: API_SetFieldProperties
  endpoint:
    path: /v1/fields/{field_id}/properties
    method: PUT
- name: API_GenAddRecordForm
  endpoint:
    path: /v1/forms/add
    method: GET
- name: API_GenResultsTable
  endpoint:
    path: /v1/results/table
    method: GET
- name: API_GetRecordAsHTML
  endpoint:
    path: /v1/records/html/{record_id}
    method: GET
- name: API_AddRecord
  endpoint:
    path: /API_AddRecord
    method: POST
- name: API_EditRecord
  endpoint:
    path: /API_EditRecord
    method: POST
- name: API_CloneDatabase
  endpoint:
    path: /API_CloneDatabase
    method: POST
- name: API_GetRecordInfo
  endpoint:
    path: /API_GetRecordInfo
    method: GET
- name: API_GetSchema
  endpoint:
    path: /API_GetSchema
    method: GET
- name: API_DoQuery
  endpoint:
    path: /API_DoQuery
    method: POST
- name: API_ImportFromCSV
  endpoint:
    path: /API_ImportFromCSV
    method: POST
- name: API_SetFieldProperties
  endpoint:
    path: /API_SetFieldProperties
    method: POST
- name: ImportFromCSV
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
- name: API_AddRecord
  endpoint:
    path: /v1/docs/api-addrecord
    method: POST
- name: API_EditRecord
  endpoint:
    path: /v1/docs/api-editrecord
    method: PUT
- name: API_Authenticate
  endpoint:
    path: /v1/docs/api-authenticate
    method: POST
- name: ImportFromCSV
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      records_csv: An aggregate containing the actual records you are importing.
      clist: A period-delimited list of field IDs
      ticket: A valid authentication ticket
      usertoken: The user token is an alternative means of authentication
      apptoken: A valid application token
- name: add_field
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      label: Phone Number
      type: phone
      ticket: auth_ticket
      apptoken: app_token
- name: AddField
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      label: Phone Number
      type: phone
- name: add_record
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      ticket: auth_ticket
      apptoken: app_token
- name: add_record
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      field:
        name: event_name
        description: dress in style of the epoch
        location: lindisfarne island
        start_time: 06-08-0793
        end_time: 10-14-1066
      udata: mydata
      ticket: auth_ticket
      apptoken: app_token
- name: add_record
  endpoint:
    path: /API_AddRecord
    method: POST
    data_selector: qdbapi
    params: {}
- name: AddRecord
  endpoint:
    path: /API_AddRecord
    method: POST
- name: AddReplaceDBPage
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      pagename: newstylesheet.xsl
      pagetype: 1
      pagebody: <![CDATA[<?xml version='1.0'?><xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        version="1.0"><xsl:template match="/"><html><head></head><body>Hello World</body></html></xsl:template></xsl:stylesheet>]]>
      ticket: auth_ticket
      apptoken: app_token
- name: AddReplaceDBPage
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      pagename: newstylesheet.xsl
      pagetype: 1
      pagebody: <![CDATA[<?xml version='1.0'?><xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        version="1.0"><xsl:template match="/"><html><head></head><body>Hello World</body></html></xsl:template></xsl:stylesheet>]]>
      ticket: auth_ticket
      apptoken: app_token
- name: AddSubGroup
  endpoint:
    path: /db/main
    method: POST
    data_selector: qdbapi
    params:
      gid: gid
      subgroupid: subgroupid
      ticket: ticket
      udata: udata
- name: API_AddSubGroup
  endpoint:
    path: /db/main
    method: POST
    data_selector: qdbapi
    params:
      gid: The id of the group which will contain the subgroup.
      subgroupid: The id of the group to be embedded in the target group.
      ticket: A valid authentication ticket.
      udata: A string value that you want returned.
- name: api_authenticate
  endpoint:
    path: /db/main
    method: POST
    data_selector: qdbapi
    params:
      username: The user’s email address registered with Quickbase or the user name
        that was selected within Quickbase when the user registered.
      password: The user’s Quickbase password.
      hours: The number of hours that the ticket will be valid.
- name: authenticate
  endpoint:
    path: /db/main
    method: POST
    data_selector: qdbapi
    params:
      username: The user’s email address registered with Quickbase or the user name
        that was selected within Quickbase when the user registered.
      password: The user’s Quickbase password.
      hours: The number of hours that the ticket will be valid.
- name: change_group_info
  endpoint:
    path: /db/main
    method: POST
    data_selector: qdbapi
    params:
      gid: gid
      ticket: ticket
- name: ChangeGroupInfo
  endpoint:
    path: /db/main
    method: POST
    data_selector: qdbapi
    params:
      gid: required
      ticket: required
      name: optional
      description: optional
      accountId: optional
      udata: optional
- name: ChangeUserRole
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      userid: The user ID.
      roleid: The user’s current role in the application
      newroleid: If this parameter is not supplied, or is supplied but left blank,
        the role id is set to 9 (None).
      ticket: a ticket - needed for application access.
      usertoken: The user token is an alternative means of authentication.
      apptoken: Supply a valid application token.
- name: clone_database
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      newdbname: YellowDots
      newdbdesc: Database copy with no data
      keepData: '1'
- name: Change User Role
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      userid: The user ID. You can use API_GetUserInfo to get the user ID for a particular
        user.
      roleid: The user’s current role in the application
      newroleid: If this parameter is not supplied, or is supplied but left blank,
        the role id is set to 9 (None).
      ticket: a ticket - needed for application access.
      usertoken: The user token is an alternative means of authentication, used for
        API access.
      apptoken: Supply a valid application token.
- name: API_CloneDatabase
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      newdbname: YellowDots
      newdbdesc: Database copy with no data
      keepData: '1'
      ticket: auth_ticket
      apptoken: app_token
      udata: mydata
- name: create_database
  endpoint:
    path: /db/main
    method: POST
    data_selector: qdbapi
    params:
      dbname: FuelCharter
      dbdesc: Vehicle and Fuel Cost Tracker
      ticket: auth_ticket
      createapptoken: '1'
- name: CreateGroup
  endpoint:
    path: /db/main
    method: POST
    data_selector: group
    params:
      name: The name of the new group. It may not contain spaces or punctuation.
      description: A text description of the group.
      ticket: A valid authentication ticket.
- name: create_database
  endpoint:
    path: /db/main
    method: POST
    data_selector: qdbapi
    params:
      dbname: FuelCharter
      dbdesc: Vehicle and Fuel Cost Tracker
      ticket: auth_ticket
      createapptoken: '1'
- name: delete_field
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      fid: field_id
      ticket: auth_ticket
      apptoken: app_token
      udata: whatever
- name: create_group
  endpoint:
    path: /db/main
    method: POST
    data_selector: qdbapi
    params:
      ticket: auth_ticket
      name: MarketingSupport
      description: Support staff for sr marketing group
      accountID: '456789'
      udata: misc data
- name: delete_group
  endpoint:
    path: /db/main
    method: POST
    data_selector: qdbapi
    params:
      gid: The id of the group to delete.
      ticket: A valid authentication ticket.
      udata: A string value that you want returned.
- name: delete_field
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      fid: The field ID of the field to be deleted.
      ticket: auth_ticket
      usertoken: user_token
      apptoken: app_token
      udata: A string value that you want returned.
- name: query_count
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      query: '{''7''.XCT.''blue car''}'
      ticket: auth_ticket
      apptoken: app_token
- name: delete_group
  endpoint:
    path: /db/main
    method: POST
    data_selector: qdbapi
    params:
      gid: The id of the group to delete.
      ticket: A valid authentication ticket.
      udata: A string value that you want returned.
- name: query_count
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      query: '{''7''.XCT.''blue car''}'
      ticket: auth_ticket
      apptoken: app_token
- name: field_remove_choices
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      fid: The field ID of the field from which you want to remove choices.
      choice: Specifies a choice you want to remove.
      ticket: A valid authentication ticket.
      usertoken: The user token is an alternative means of authentication.
      apptoken: A valid application token.
- name: FieldRemoveChoices
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      fid: The field ID of the field from which you want to remove choices.
      choice: Specifies a choice you want to remove.
      ticket: A valid authentication ticket.
      usertoken: The user token is an alternative means of authentication.
      apptoken: A valid application token.
- name: GetAppDTMInfo
  endpoint:
    path: /db/main
    method: GET
    data_selector: qdbapi
    params:
      dbid: target_dbid
- name: get_app_dtm_info
  endpoint:
    path: /db/main
    method: GET
    data_selector: qdbapi
    params:
      dbid: target_dbid
- name: GetDBPage
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      pageID: '3'
      ticket: auth_ticket
      apptoken: app_token
      udata: mydata
- name: db_page
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      pageID: '3'
      ticket: auth_ticket
      apptoken: app_token
      udata: mydata
- name: DBVar
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: value
    params:
      varname: usercode
      ticket: auth_ticket
      apptoken: app_token
- name: DBVar
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      varname: usercode
      ticket: auth_ticket
      apptoken: app_token
      udata: mydata
- name: field_properties
  endpoint:
    path: /db/main
    method: POST
    data_selector: field
    params:
      fid: '35'
- name: field_properties
  endpoint:
    path: /db/main
    method: POST
    data_selector: field
    params:
      fid: '35'
- name: role_info
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: roles
    params:
      apptoken: auth_token
- name: role_info
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: roles
    params:
      ticket: auth_ticket
      apptoken: app_token
- name: GetUserRole
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      ticket: auth_ticket
      apptoken: app_token
      inclgrps: '1'
      userid: userid
- name: UserRole
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      ticket: auth_ticket
      apptoken: app_token
      inclgrps: '1'
      userid: 112245.efy7
- name: databases
  endpoint:
    path: /db/main
    method: POST
    data_selector: databases
- name: databases
  endpoint:
    path: /db/main
    method: POST
    data_selector: databases
- name: granted_dbs
  endpoint:
    path: /db/main
    method: POST
    params:
      gid: 1217.dgpt
      ticket: auth_ticket
      udata: misc data
- name: granted_dbs
  endpoint:
    path: /db/main
    method: POST
    data_selector: databases
    params:
      gid: The id of the group to manage.
      ticket: A valid authentication ticket.
      usertoken: The user token is an alternative means of authentication.
      udata: A string value that you want returned.
- name: import_csv
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: records_csv
    params:
      records_csv: <records_csv>
      clist: <clist>
      skipfirst: <skipfirst>
      ticket: auth_ticket
      apptoken: app_token
- name: import_from_csv
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      records_csv: <records_csv>
      clist: <clist>
      ticket: <auth_ticket>
      apptoken: <app_token>
- name: provision_user
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params: {}
- name: provision_user
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      email: sanskor@sbcglobal.com
      roleid: '11'
      fname: Margi
      lname: Rita
      ticket: auth_ticket
      apptoken: app_token
- name: RemoveGroupFromRole
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      gid: The id of the group to manage.
      roleid: The ID of the access role being assigned to the group.
      apptoken: A valid application token.
      allRoles: Set to TRUE if the group is to be removed from all roles in the app.
        Default is FALSE.
      ticket: A valid authentication ticket.
      usertoken: The user token is an alternative means of authentication.
      udata: A string value that you want returned.
- name: remove_group_from_role
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      gid: The id of the group to manage.
      roleid: The ID of the access role being assigned to the group.
      apptoken: A valid application token.
      allRoles: Set to TRUE if the group is to be removed from all roles in the app.
        Default is FALSE.
      ticket: A valid authentication ticket.
      usertoken: The user token is an alternative means of authentication.
      udata: A string value that you want returned.
- name: Run Import
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      id: '10'
      ticket: auth_ticket
      apptoken: app_token
- name: Run Import
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      id: '10'
      ticket: auth_ticket
      apptoken: app_token
- name: set_field_properties
  endpoint:
    path: /api_setfieldproperties
    method: POST
    data_selector: action
    params:
      fid: fid
      ticket: ticket
      usertoken: usertoken
      apptoken: apptoken
- name: set_field_properties
  endpoint:
    path: /api/setFieldProperties
    method: POST
    data_selector: action
    params:
      fid: Field ID of the field to be changed
      ticket: A valid authentication ticket
      usertoken: User token for API access
      apptoken: A valid application token
- name: set_field_properties
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params: {}
- name: SetFieldProperties
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      fid: '6'
      ticket: auth_ticket
      apptoken: app_token
      default_value: GoodBye
- name: SetKeyField
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      ticket: auth_ticket
      apptoken: app_token
      fid: '6'
      udata: myudata
- name: Set Key Field
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
- name: user_roles
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: users
    params:
      ticket: auth_ticket
      apptoken: app_token
- name: user_roles
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: users
    params:
      ticket: auth_ticket
      apptoken: app_token
- name: edit_record
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      rid: record_id
      ticket: auth_ticket
      apptoken: app_token
- name: edit_record
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      ticket: auth_ticket
      apptoken: app_token
      rid: '4'
- name: GetRecordAsHTML
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      rid: required
      ticket: required
      usertoken: required
      apptoken: required
- name: GetRecordAsHTML
  endpoint:
    path: /db/target_dbid
    method: POST
    data_selector: qdbapi
    params:
      rid: required
      ticket: required
      usertoken: required
      apptoken: required if the application requires application tokens
      dfid: optional
      udata: optional
notes:
- If you use the Quickbase API to submit data to your app via a web form, you must
  ensure that the role used to submit the data has at least Basic Access application
  permissions.
- If no column list parameter is supplied, the default report layout and field order
  is used.
- App tokens are optional and provide an added layer of security to protect your app.
- Most API calls require a valid app token.
- If you authenticate with a user token, app tokens are unnecessary.
- If a user already is registered with Quickbase, the API will return an error.
- Use uppercase comparison operators for query strings.
- When querying on numeric fields with decimals, enclose values in apostrophes.
- Use only uppercase operators in query strings to avoid unexpected behavior.
- Files must be base64-encoded without newlines.
- Quickbase uses MM-DD-YYYY format by default for CSV imports unless specified otherwise.
- When importing a CSV file to create an app, Quickbase uses MM-DD-YYYY format by
  default, unless a different default date format has been specified at the account
  level.
- Global app search is accessible from the Search button on the global bar.
- Searching must look at the contents of every field in every record in every table.
- Searching from this location will search the entire app.
- This functionality is not available to accounts on the Quickbase Essential plan.
- Quickbase doesn’t currently offer full translation or localization, support for
  international languages is built into the platform.
- Functionality such as searching, sorting, and filtering non-English characters may
  be limited.
- All uses of Quickbase must comply with any applicable agreements and individual
  feature restrictions.
- Quickbase utilizes edge-layer protection with Cloudflare to ensure security and
  stability of the platform.
- Quickbase may also block identified security vulnerabilities proactively and without
  notice to protect the security of the platform and our customers.
- Always be sure to obfuscate or remove authentication and any other sensitive information
  before providing logs to any external party, including Quickbase Technical Support.
- All uses of Quickbase must comply with any applicable agreements and individual
  feature restrictions, such as Everyone on the Internet (EOTI).
- Building solutions that intentionally circumvent Quickbase licensing is strictly
  prohibited.
- Date formats are among the settings that can be localized.
- Date formats are among account-level settings.
- Changing the account-level date format won't affect existing apps.
- Check out JSON RESTful APIs to utilize and extend Quickbase.
- You can add AND update in the same API_ImportFromCSV request.
- The clist parameter must contain the field ID for the key field when updating existing
  records.
- You must supply field data for all required fields.
- If you write to a built-in field, you'll get an error.
- It is possible to use a ticket to obtain a ticket.
- You should always use secure HTTPS (not HTTP) when calling API_Authenticate.
- Uses secure HTTPS for API calls.
- The ticket is valid for 12 hours by default.
- One or more elements can be modified.
- To assign roles to users using the Quickbase API or UI, you must have either Basic
  Access with Sharing access or Full Administration access to the application.
- Quickbase creates the main application table populated only with built-in fields
  and returns an application token for your API application.
- Some API calls require the use of the application-level dbid, and some require a
  table-level dbid.
- 'It uses a relationship based on a reference field ''related project'' (fid: 48),
  and the API returns it as summaryReferenceFid'
- 'The field that it is summarizing is Actual Hours (fid: 133), and the API returns
  it as summaryTargetFid'
- The summary function is Total, and the API returns it as is
- You must have Basic Access with Sharing or Full Administration permissions to use
  this API call to get roles for users other than yourself.
- You can also use this call at any time if you want to change properties, even if
  the affected field has data.
- The properties available for a field vary slightly for the different field types.
- To set choices for a Text - Multiple Choice or Multi-select Text field use API_FieldAddChoices.
- In order to use the API_UserRoles call, you must have either Basic Access with Sharing
  access or Full Administration access to the application.
- Redirect URLs often include query strings with special characters that need to be
  properly encoded.
errors:
- '0: No error encountered.'
- '0: No error'
- 0 indicates that no error was encountered.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '429: Too Many Requests - respect the Retry-After header'
- 401 Unauthorized - check the credentials and permissions
- '429: Too many requests - respect the Retry-After header.'
- 'Unauthorized: Check your permissions and authentication.'
- Entering a date in the wrong format will either result in an error or an incorrect
  date.
- 'Invalid parameters: Ensure all required fields are provided'
- 'Record ID error: Attempting to write to a built-in field'
- 'Invalid Record ID: Quickbase returns an error.'
- If successful, this will be 0. If there is a failure, there will be a code returned
  here.
- 'errcode: Identifies the error code, if any.'
- 'Non-zero error code: Check error details'
- 'Error codes: See the Error Codes appendix'
- '0: No error encountered'
- Identifies the error code, if any.
- '77: API request limit exceeded'
- '2: Invalid input'
- 'Error Code: Identifies the error code if any.'
- '0: Indicates that no error was encountered.'
- 'Error code: See Error Codes appendix'
- See the Error Codes appendix for a list of possible error codes.
- 'non-zero: Error codes as specified in Appendix A'
- Error codes can be found in the Error Codes appendix
- '400 (Bad Request): Check your request for errors.'
auth_info:
  mentioned_objects:
  - API_Authenticate
client:
  base_url: https://target_domain
  auth:
    ticket: auth_ticket
    apptoken: app_token
source_metadata: null
