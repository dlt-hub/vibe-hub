resources:
- name: Spreadsheet
  endpoint:
    path: /mitosheet.mito_dash.v1
    method: GET
    data_selector: records
- name: Spreadsheet
  endpoint:
    path: /mitosheet/mito_dash/v1/Spreadsheet
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: mitosheet
  endpoint:
    path: /how-to/creating-a-mitosheet
    method: GET
    data_selector: instructions
    params: {}
- name: mitosheet
  endpoint:
    path: /how-to/creating-a-mitosheet
    method: GET
- name: Importing CSV Files
  endpoint:
    path: /import/csv
    method: POST
    data_selector: files
    params: {}
- name: import_csv
  endpoint:
    path: /import/csv
    method: POST
    data_selector: tab
    params: {}
- name: import_csv
  endpoint:
    path: /import/csv
    method: POST
    data_selector: data
    params: {}
- name: importing_csv
  endpoint:
    path: /importing/csv
    method: POST
    data_selector: files
    params: {}
- name: import_multiple_tabs
  endpoint:
    path: /import/multiple_tabs
    method: POST
    data_selector: configuration
    params: {}
- name: import_specific_ranges
  endpoint:
    path: /import/specific_ranges
    method: POST
    data_selector: configuration
    params: {}
- name: Importing Dataframes
  endpoint:
    path: /importing-dataframes
    method: GET
    data_selector: dataframes
    params: {}
- name: import_multiple_tabs
  endpoint:
    path: /import/multiple_tabs
    method: POST
    data_selector: tabs
    params:
      has_header_row: 'Yes'
      number_of_rows_to_skip: 0
      decimal_separator: .
- name: import_specific_ranges
  endpoint:
    path: /import/specific_ranges
    method: POST
    data_selector: ranges
    params: {}
- name: dataframe_import
  endpoint:
    path: /import/dataframe
    method: POST
    data_selector: data
    params: {}
- name: dataframes
  endpoint:
    path: /import/dataframes
    method: POST
    data_selector: data
    params: {}
- name: multiple_dataframes
  endpoint:
    path: /import/multiple_dataframes
    method: POST
    data_selector: data
    params: {}
- name: get_loan_data
  endpoint:
    path: /importers/get_loan_data
    method: POST
    data_selector: data
    params: {}
- name: get_fund_data
  endpoint:
    path: /importers/get_fund_data
    method: POST
    data_selector: data
    params: {}
- name: get_loan_data
  endpoint:
    path: /importers/get_loan_data
    method: GET
    data_selector: data
    params: {}
- name: get_fund_data
  endpoint:
    path: /importers/get_fund_data
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: graph_creation
  endpoint:
    path: /how-to/graphing/graph-creation
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Export Graph
  endpoint:
    path: /export/graph
    method: GET
- name: pivot_table
  endpoint:
    path: /how-to/pivot-tables
    method: GET
- name: group_dates
  endpoint:
    path: /how-to/group-dates-within-in-pivot-tables
    method: GET
- name: graph_export
  endpoint:
    path: /export/graph
    method: POST
    data_selector: graph_data
- name: Filter by Condition
  endpoint:
    path: /filter
    method: GET
    data_selector: rows
    params: {}
- name: summary_statistics
  endpoint:
    path: /summary/statistics
    method: GET
    data_selector: summary_statistics
- name: summary_statistics
  endpoint:
    path: /summary/statistics
    method: GET
    data_selector: statistics
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: YEAR
  endpoint:
    path: /YEAR
    method: GET
    data_selector: results
    params: {}
- name: YEAR
  endpoint:
    path: /YEAR
    method: GET
    data_selector: results
    params: {}
- name: MULTIPLY
  endpoint:
    path: /MULTIPLY
    method: GET
    data_selector: results
    params: {}
- name: OR
  endpoint:
    path: /OR
    method: GET
    data_selector: results
    params: {}
- name: POWER
  endpoint:
    path: /POWER
    method: GET
    data_selector: results
    params: {}
- name: PROPER
  endpoint:
    path: /PROPER
    method: GET
    data_selector: results
    params: {}
- name: QUARTER
  endpoint:
    path: /QUARTER
    method: GET
    data_selector: results
    params: {}
- name: RIGHT
  endpoint:
    path: /RIGHT
    method: GET
    data_selector: results
    params: {}
- name: ROUND
  endpoint:
    path: /ROUND
    method: GET
    data_selector: results
    params: {}
- name: SECOND
  endpoint:
    path: /SECOND
    method: GET
    data_selector: results
    params: {}
- name: SKEW
  endpoint:
    path: /SKEW
    method: GET
    data_selector: results
    params: {}
- name: STARTOFBUSINESSMONTH
  endpoint:
    path: /STARTOFBUSINESSMONTH
    method: GET
    data_selector: results
    params: {}
- name: STARTOFMONTH
  endpoint:
    path: /STARTOFMONTH
    method: GET
    data_selector: results
    params: {}
- name: STDEV
  endpoint:
    path: /STDEV
    method: GET
    data_selector: results
    params: {}
- name: STRIPTIMETODAYS
  endpoint:
    path: /STRIPTIMETODAYS
    method: GET
    data_selector: results
    params: {}
- name: STRIPTIMETOHOURS
  endpoint:
    path: /STRIPTIMETOHOURS
    method: GET
    data_selector: results
    params: {}
- name: STRIPTIMETOMINUTES
  endpoint:
    path: /STRIPTIMETOMINUTES
    method: GET
    data_selector: results
    params: {}
- name: STRIPTIMETOMONTHS
  endpoint:
    path: /STRIPTIMETOMONTHS
    method: GET
    data_selector: results
    params: {}
- name: STRIPTIMETOYEARS
  endpoint:
    path: /STRIPTIMETOYEARS
    method: GET
    data_selector: results
    params: {}
- name: SUBSTITUTE
  endpoint:
    path: /SUBSTITUTE
    method: GET
    data_selector: results
    params: {}
- name: SUM
  endpoint:
    path: /SUM
    method: GET
    data_selector: results
    params: {}
- name: TEXT
  endpoint:
    path: /TEXT
    method: GET
    data_selector: results
    params: {}
- name: TRIM
  endpoint:
    path: /TRIM
    method: GET
    data_selector: results
    params: {}
- name: TYPE
  endpoint:
    path: /TYPE
    method: GET
    data_selector: results
    params: {}
- name: UPPER
  endpoint:
    path: /UPPER
    method: GET
    data_selector: results
    params: {}
- name: VALUE
  endpoint:
    path: /VALUE
    method: GET
    data_selector: results
    params: {}
- name: VAR
  endpoint:
    path: /VAR
    method: GET
    data_selector: results
    params: {}
- name: VLOOKUP
  endpoint:
    path: /VLOOKUP
    method: GET
    data_selector: results
    params: {}
- name: WEEK
  endpoint:
    path: /WEEK
    method: GET
    data_selector: results
    params: {}
- name: WEEKDAY
  endpoint:
    path: /WEEKDAY
    method: GET
    data_selector: results
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Anti-merge
  endpoint:
    path: /how-to/combining-dataframes/anti-merge-unique
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: split_text
  endpoint:
    path: /how-to/split-text-to-columns
    method: GET
    data_selector: data
    params: {}
- name: Deleting Columns
  endpoint:
    path: /how-to/deleting-columns
    method: GET
    data_selector: columns
    params: {}
- name: Combining Dataframes
  endpoint:
    path: /how-to/combining-dataframes
    method: GET
    data_selector: data
    params: {}
- name: Editing Column Headers
  endpoint:
    path: /how-to/column-headers/editing-column-headers
    method: GET
    data_selector: records
    params: {}
- name: Promote Row to Header
  endpoint:
    path: /how-to/column-headers/promote-row-to-header
    method: GET
    data_selector: records
- name: deduplicate
  endpoint:
    path: /how-to/deduplicate
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Anti-merge
  endpoint:
    path: /how-to/combining-dataframes/anti-merge-unique
    method: GET
    data_selector: records
- name: dataframe_unpivot
  endpoint:
    path: /how-to/unpivot-a-dataframe-melt
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Promote Row to Header
  endpoint:
    path: /how-to/column-headers/promote-row-to-header
    method: GET
- name: deduplicate
  endpoint:
    path: /how-to/deduplicate
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Download as CSV
  endpoint:
    path: /how-to/exporting-to-csv-and-excel/download-as-csv
    method: GET
- name: Download as Excel
  endpoint:
    path: /how-to/exporting-to-csv-and-excel/download-as-excel
    method: GET
- name: Generate code to create Excel and CSV reports
  endpoint:
    path: /how-to/exporting-to-csv-and-excel/generate-code-to-create-excel-and-csv-reports
    method: GET
- name: Graph Export
  endpoint:
    path: /how-to/graphing/graph-export
    method: GET
- name: unpivot_dataframe
  endpoint:
    path: /how-to/unpivot-a-dataframe-melt
    method: GET
- name: Download as CSV
  endpoint:
    path: /how-to/exporting-to-csv-and-excel/download-as-csv
    method: GET
    data_selector: records
- name: Download as Excel
  endpoint:
    path: /how-to/exporting-to-csv-and-excel/download-as-excel
    method: GET
    data_selector: records
- name: Exporting Data
  endpoint:
    path: /how-to/exporting-to-csv-and-excel
    method: GET
    data_selector: records
    params: {}
- name: Export Dataframes
  endpoint:
    path: /export/dataframes
    method: POST
    data_selector: dataframes
    params: {}
- name: ExcelReports
  endpoint:
    path: /how-to/exporting-to-csv-and-excel/download-as-excel
    method: GET
    data_selector: data
    params: {}
- name: CSVReports
  endpoint:
    path: /how-to/exporting-to-csv-and-excel/download-as-csv
    method: GET
    data_selector: data
    params: {}
- name: export_code
  endpoint:
    path: /how-to/exporting-to-csv-and-excel/generate-code-to-create-excel-and-csv-reports
    method: GET
- name: Exporting Data
  endpoint:
    path: /how-to/exporting-data
    method: GET
- name: Download as CSV
  endpoint:
    path: /how-to/exporting-to-csv-and-excel/download-as-csv
    method: GET
- name: Download as Excel
  endpoint:
    path: /how-to/exporting-to-csv-and-excel/download-as-excel
    method: GET
- name: Generate code to create Excel and CSV reports
  endpoint:
    path: /how-to/exporting-to-csv-and-excel/generate-code-to-create-excel-and-csv-reports
    method: GET
- name: Download as CSV
  endpoint:
    path: /how-to/exporting-to-csv-and-excel/download-as-csv
    method: GET
    data_selector: records
- name: Download as Excel
  endpoint:
    path: /how-to/exporting-to-csv-and-excel/download-as-excel
    method: GET
    data_selector: records
- name: Export to Excel
  endpoint:
    path: /export/excel
    method: POST
    data_selector: dataframes
- name: Exporting Data
  endpoint:
    path: /how-to/exporting-to-csv-and-excel
    method: GET
    data_selector: records
    params: {}
- name: calculate_moving_average
  endpoint:
    path: /calculate/moving/average
    method: POST
    data_selector: result
    params: {}
- name: calculate_moving_average
  endpoint:
    path: /calculate/moving/average
    method: POST
    data_selector: result
    params: {}
- name: code_options
  endpoint:
    path: /how-to/code-options
    method: GET
    data_selector: parameters
    params: {}
- name: Tesla Stock Data
  endpoint:
    path: /api/tesla_stock_data
    method: GET
    data_selector: data
    params: {}
- name: tesla_stock_data
  endpoint:
    path: /raw.githubusercontent.com/plotly/datasets/master/tesla-stock-price.csv
    method: GET
    data_selector: data
    params: {}
- name: Tesla Stock Data
  endpoint:
    path: /path/to/tesla_stock_data
    method: GET
    data_selector: data
    params: {}
- name: Tesla Stock Data
  endpoint:
    path: https://raw.githubusercontent.com/plotly/datasets/master/tesla-stock-price.csv
    method: GET
    data_selector: new_dfs
    params: {}
- name: analysis
  endpoint:
    path: /api/analysis
    method: GET
    data_selector: analysis_data
    params: {}
- name: ParamMetadata
  endpoint:
    path: /get_param_metadata
    method: GET
    data_selector: parameters
    params: {}
- name: analysis
  endpoint:
    path: /api/runnable_analysis
    method: GET
    data_selector: parameters
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: ParamMetadata
  endpoint:
    path: /get_param_metadata
    method: GET
    data_selector: ParamMetadata
    params: {}
- name: spreadsheet
  endpoint:
    path: /mitosheet/streamlit/v1/spreadsheet
    method: GET
- name: analysis
  endpoint:
    path: /run
    method: POST
- name: RunnableAnalysis
  endpoint:
    path: /api/runnable_analysis
    method: GET
    data_selector: analysis
- name: column_definitions
  endpoint:
    path: /api/column_definitions
    method: GET
    data_selector: data
    params: {}
- name: param_metadata
  endpoint:
    path: /get_param_metadata
    method: GET
    data_selector: ParamMetadata
    params: {}
- name: column_definitions
  endpoint:
    path: /api/column_definitions
    method: GET
    data_selector: column_definitions
- name: RunnableAnalysis
  endpoint:
    path: /api/runnableanalysis
    method: GET
    data_selector: parameters
    params: {}
- name: column_definitions
  endpoint:
    path: /mito-for-streamlit/api-reference/column-definitions
    method: GET
    data_selector: column_conditions
- name: ParamMetadata
  endpoint:
    path: /get_param_metadata
    method: GET
    data_selector: ParamMetadata
    params: {}
- name: Data Cleaning Demo
  endpoint:
    path: /data-cleaning-demo
    method: GET
    data_selector: records
- name: Snowflake Import Demo
  endpoint:
    path: /snowflake-import-demo
    method: GET
    data_selector: records
- name: dataframe
  endpoint:
    path: /mitosheet/streamlit/v1
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Mito_Config
  endpoint:
    path: /path/to/folder/you/have/permissions/on
    method: POST
    data_selector: metadata
- name: column_definitions
  endpoint:
    path: /mito-for-streamlit/api-reference/column-definitions
    method: GET
    data_selector: column_conditions
    params: {}
- name: streamlit_dataframe
  endpoint:
    path: /mito-for-streamlit
    method: GET
    data_selector: data
    params: {}
- name: dash_app_instance
  endpoint:
    path: /dash/app/instance
    method: GET
    data_selector: instance_data
- name: app_layout
  endpoint:
    path: /dash/app/layout
    method: GET
    data_selector: layout_data
- name: callbacks
  endpoint:
    path: /dash/app/callbacks
    method: GET
    data_selector: callback_data
- name: graph-content
  endpoint:
    path: /graph-content
    method: POST
    data_selector: figure
- name: dropdown-selection
  endpoint:
    path: /dropdown-selection
    method: GET
    data_selector: value
- name: tesla_stock_price
  endpoint:
    path: /tesla-stock-price.csv
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: graph_content
  endpoint:
    path: /dropdown-selection
    method: POST
    data_selector: figure
    params: {}
- name: tesla_stock_price
  endpoint:
    path: /tesla-stock-price.csv
    method: GET
    data_selector: data
    params: {}
- name: data
  endpoint:
    path: /path/to/data
    method: POST
    data_selector: data
    params: {}
- name: graph_new_data
  endpoint:
    path: /mito-for-dash/graph-new-data
    method: GET
    data_selector: spreadsheet_result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /data
    method: POST
    data_selector: data
    params: {}
- name: train_stations
  endpoint:
    path: /train_stations
    method: GET
    data_selector: data
    params: {}
- name: demographics
  endpoint:
    path: /demographics
    method: GET
    data_selector: data
    params: {}
- name: data
  endpoint:
    path: /change-sheet-data
    method: POST
    data_selector: data
    params: {}
- name: Delete Columns with Missing Values
  endpoint:
    path: /how-to-1/delete-columns-with-missing-values
    method: GET
    data_selector: records
- name: spreadsheet
  endpoint:
    path: /mito/methods/spreadsheet
    method: GET
    data_selector: results
- name: graph
  endpoint:
    path: /mito/methods/graph
    method: GET
    data_selector: results
- name: Split a column on delimiter
  endpoint:
    path: /how-to-1/split-a-column-on-delimiter
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: unicorn_startups
  endpoint:
    path: /uploads/Unicorn_Startups.csv
    method: GET
    data_selector: data
    params: {}
- name: Importing Data
  endpoint:
    path: /how-to/importing-data-to-mito
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Trending Stocks
  endpoint:
    path: /path/to/trending_stocks
    method: GET
    data_selector: data
    params:
      start: Trending Stock Company Name
      end: first empty cell
- name: Top Movers
  endpoint:
    path: /path/to/top_movers
    method: GET
    data_selector: data
    params:
      start: Top Mover Company Name
      end: SubTotal
- name: unicorn_startup_valuation
  endpoint:
    path: /unicorn_startups.csv
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Trending Stocks
  endpoint:
    path: /import/trending_stocks
    method: GET
    data_selector: data
    params:
      start_value: Trending Stock Company Name
      end_condition: first_empty_cell
- name: Top Movers
  endpoint:
    path: /import/top_movers
    method: GET
    data_selector: data
    params:
      start_value: Top Mover Company Name
      end_condition: SubTotal
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /api/data
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /api/v1/data
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data_import
  endpoint:
    path: /api/v1/data/import
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Excel-Like Formulas
  endpoint:
    path: /excel-like-formulas
    method: GET
    data_selector: formulas
    params: {}
- name: Snowflake Import
  endpoint:
    path: /snowflake-import
    method: GET
    data_selector: snowflake
    params: {}
- name: excel_import
  endpoint:
    path: /api/v1/excel/import
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Remote File System Access
  endpoint:
    path: /how-to/importing-data-to-mito
    method: GET
- name: remote_file_system_access
  endpoint:
    path: /remote/file/system/access
    method: GET
    data_selector: features
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- Requires Mito to be activated before usage.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Add a fully featured spreadsheet to your Streamlit app with just 2 lines of code.
- By installing Mito, you are agreeing to Mito's Terms of Service and Privacy Policy.
- Mito AI is only available for JupyterLab 4.x
- Most install errors are a result of conflicting Python packages within your base
  environment.
- We recommend you attempt to install Mito inside a virtual environment.
- Mito does not work on Python 3.12
- The Sheet does not render when I call mitosheet.sheet()
- The installer hit a Permission Error during install
- I'm getting an SSL error on MacOSX
- I'm getting an externally managed environment error
- I do not have Python installed
- Verify that the docker image is using Python 3.7 or greater.
- Ensure that the docker image can use classic Jupyter Notebooks or JupyterLab 4.x.
- Mito is compatible with Streamlit versions >=1.2 and <=1.31.
- These are instructions for Mito in a Vertex AI User Managed Notebook environment
  only.
- Make sure it is configured to use Python >3.8
- JupyterLab ≥ 4.1 is required
- Chat is like collaborating with a colleague who sees your code, knows your data,
  and is a Python expert.
- Environment variables must be set before launching JupyterLab, as they are read
  when the Mito server extension initializes during startup.
- By default, Mito uses our server to send AI requests to the model provider.
- Mito AI manages database drivers automatically.
- To connect to a Microsoft SQL Server, you must have the ODBC Driver for SQL Server
  installed on your local machine.
- 'Failed to install snowflake drivers error: This error is most likely occurring
  because you''re using Python 3.13. The official Snowflake database drivers currently
  support only up to Python 3.12. To fix the issue, downgrade to Python 3.12 or earlier.'
- Private data that is contained in the dataframe name, column headers, or first five
  rows of data might be shared with Mito and OpenAI.
- Mito Apps is in beta. As we continue to develop the Mito App infrastructure, your
  existing apps are likely to be taken offline without notice.
- Make sure to restart your kernel + refresh your browser.
- Activate your environment using 'conda activate mitoenv' or 'mitoenv\Scripts\activate.bat'
  depending on your OS.
- Launch JupyterLab with 'jupyter lab'.
- Activate your environment using 'conda activate mitoenv'
- Launch Jupyter Lab using 'jupyter lab'
- Mito automatically configures parameters for CSV import in over 90% of cases.
- Has Header Row option allows setting the first non-skipped row as column headers
- Decimal Separator is configurable for number formatting
- Importing XLSX files is only supported on Python version greater than 3.6, and Pandas
  version greater than or equal to 1.0.
- Importing Dataframes through the Mitosheet
- Supports importing multiple dataframes at once.
- Mito Pro users are able to import data from external drives like mapped network
  drives, OneDrive, and USB sticks.
- Mito is a Mito Enterprise feature.
- Mito allows you to import as many dataframes as you want. Each dataframe you import
  will be displayed in the mitosheet as a separate tab.
- By default, Mito only graphs the first 1000 rows of data to ensure that the browser
  tab doesn't crash while attempting to load too much data into the graph.
- Graphing in Mito is designed to help you build intuition about your data and create
  presentation-ready graphs to communicate insights.
- Export your graphs as Python code, images or HTML files to share your insights with
  your peers.
- If you wish to aggregate based on the year, change the group date by to year.
- Create Excel-like pivot tables using a spreadsheet interface.
- If the `group date by` option does not appear after adding a column to the Rows
  or Columns section of a pivot table, ensure that you have changed the dtype of that
  column to a `datetime` first.
- Filter by condition allows you to apply filters to a specific column that remove
  rows from the dataframe by comparing these conditions to the values in the column
  you are filtering.
- Last updated 1 year ago
- Filter Groups are aggregations of filters combined with an And/Or.
- Mito AI is currently in open beta.
- 'Mito collects additional usage data: including dataframe names, column names, and
  some values in the dataframe.'
- Custom spreadsheet functions must have a fully capitalized function name
- Custom functions must support the correct input types
- If your spreadsheet functions are importable from a .py file, you can set the following
  environment variables, to make those spreadsheet functions accessible in Mito.
- Step-by-step instructions on how to merge datasets using different merge types.
- Some objects may return nulls in deeply nested fields
- Remove entire rows from your dataframe just using your keyboard.
- Sometimes, when importing a new dataset into Mito, your dataset contains rows that
  don't fit the format of the rest of the data.
- 'Select the Merge Type: Left Merge, Right Merge, Inner Merge, Outer Merge, Lookup
  Merge, Unique in Left, Unique in Right.'
- Set the merge keys. These are the keys that must match for the rows to be merged.
- Sorting the data is a crucial part of this analysis because it ensures that the
  highest scoring player of each team will be further down in the dataset than any
  other player on their team.
- The highest scoring player is always going to be lower down in the data set than
  any other player on his team.
- Mito provides a few options for filling NaN values in your dataset.
- Find records unique to one dataframe.
- Transposing data turns a dataframe's columns into rows, and rows into columns.
- Mito supports deleting columns one at a time, or multiple at once.
- Mito lets you change the format of numeric columns. This only changes the displayed
  values in the columns, and does not edit the underlying data.
- Select the columns you want to change the format of.
- Select the Number dropdown from the toolbar.
- If you want to change the number of decimals displayed in the column, click the
  Less and More buttons in the toolbar.
- This is a Mito Pro feature.
- Formatted dataframes can be printed to see the styling.
- Deduplicate repeated entries from your dataframe.
- Different Fill Methods for filling NaN values include Values, Forward Fill, Back
  Fill, Column Mean, and Column Median.
- Conditional formatting rules will be applied in-order, with later conditional formatting
  rules overwriting earlier ones.
- Not all conditions can be applied to all columns.
- By default, dataframes are indexed from 0...n-1.
- When you filter or sort your dataframe, your rows can get out of order.
- Select the format you want to change to.
- Allows exporting data in Excel and CSV formats.
- Rerun your Mito analysis on new data to refresh a report.
- If you are changing your imported data from one dataset to another, make sure that
  these two datasets have the same data structure.
- Mito Enterprise feature.
- Generate code to create Excel and CSV reports
- Generate an Excel or CSV file each time you run your code.
- Customize your Mito generated code by converting it to a function, selecting parameters
  and more.
- Mito supports Github Actions as its primary automation location.
- Mito users or infrastructure administrators can extend Mito with custom dataframe
  editing capabilities, like proprietary algorithms, calculations, and domain-specific
  knowledge.
- We move quick. Upgrade to get the latest and greatest.
- Collecting Mito Enterprise Logs requires a Mito Enterprise License
- Mito is agnostic to the logging infrastructure that you use.
- In a batched manner. This reduces the burden on your log server.
- Collecting Mito Enterprise Logs requires a Mito Enterprise License.
- Logs will upload at fixed time intervals, specified by MITO_CONFIG_LOG_SERVER_BATCH_INTERVAL.
  If no batch interval is provided, logs will be uploaded every 10 seconds by default.
- 'If log upload fails: No logs will be lost. Logs will be saved and tried again on
  the next upload attempt.'
- Turns data scripts into shareable web apps in minutes. All in pure Python. No front‑end
  experience required.
- The easiest way to create your first Streamlit application with Mito is to try things
  yourself.
- Mito Enterprise features require additional setup.
- By default, it is not secure to give Streamlit app users access to the entire file
  system of the server that is running the Streamlit application.
- Ensure API key is valid and has required permissions
- Setting the column_definitions parameter to preconfigure the formatting of your
  data requires a Mito Enterprise License.
- Mito is built for automation and generates code to replay edits across new datasets.
- Make sure to have a folder called 'datasets' with the data you want to use
- Mito can be used as a drop-in replacement for st.dataframe and st.data_editor.
- By default, Mito writes metadata about each analysis to the ~/.mito folder on any
  computer/server it is used on.
- Setting the Mito config is a Mito Enterprise feature.
- Ensuring data is production-ready by using the Mito spreadsheet in Streamlit.
- Mito writes metadata about each analysis to the `~/.mito` folder on any computer/server
  it is used on.
- Mito allows users to perform spreadsheet operations on their data, including formulas
  like SUM/VLOOKUP, pivot tables, and graphing.
- Mito records all user edits to your dataframes as a Python script, and then replays
  edits on new datasets.
- By default, it is not secure to give Dash app users access to the entire file system
  of the server that is running the Dash application.
- App authors have the ability to configure exactly which files users have access
  to by passing a folder that users have access to, through the import_folder parameter.
- When the value of the component with id dropdown-selection changes, the function
  update_graph runs.
- Mito aims to accept the same data input as the Dash Data Table.
- First, set the `track_selection` parameter in the Spreadsheet component to True.
- Notably, the `spreadsheet_selection` return type will return a Pandas dataframe
  that corresponds to the selected data in the sheet.
- The data parameter should be a list of dicts with strings as keys and values of
  type string, number, or boolean.
- Set the track_selection parameter in the Spreadsheet component to True.
- Use the @mito_callback to watch for changes on the spreadsheet_selection prop.
- The spreadsheet_selection return type will return a Pandas dataframe that corresponds
  to the selected data in the sheet.
- Build dynamic graphs that update to your users's Mito edits.
- In this scenario we still had access to the original data. If on the other hand,
  you do not have access to the original data, when you rerun the `mitosheet.sheet()`
  call the change imports taskpane will automatically open. It will include an error
  message that tells you which files need to be updated.
- When you change the imported data, the dataframe names used in the generated code
  update as well. In the example we just looked at, the pivot table was originally
  called `june_loans_pivot` and updated to `july_loans_pivot`. If you’ve written custom
  python code that references the Mito generated dataframes, this can cause issues,
  so make sure to rename the sheet tabs in Mito so that they have a consistent name.
- Includes multiple methods for importing data from various sources
- In this scenario we still had access to the original data. If on the other hand,
  you do not have access to the original data, when you rerun the mitosheet.sheet()
  call the change imports taskpane will automatically open. It will include an error
  message that tells you which files need to be updated.
- When you change the imported data, the dataframe names used in the generated code
  update as well. In the example we just looked at, the pivot table was originally
  called june_loans_pivot and updated to july_loans_pivot. If you’ve written custom
  python code that references the Mito generated dataframes, this can cause issues,
  so make sure to rename the sheet tabs in Mito so that they have a consistent name.
- When you rerun a mitosheet.sheet() call with an analysis_to_replay parameter, Mito
  looks up the metadata for that analysis saved in the .mito folder and uses it to
  repopulate the Mito spreadsheet with your analysis.
- If you want to load an existing Mito spreadsheet, you need to have the metadata
  file in your .mito folder.
- To share your Mito spreadsheet with your team, they must have access to the metadata
  file for the analysis.
- Mito is a data analysis tool that integrates with various data sources.
- Agent mode is now much easier to follow along with.
- When an LLM provider fails to return a response, we now automatically try again
  regardless of whether the user brought their own key or is using the Mito server.
- Requires setup of connected app in api
- SQL arrives in Mito AI.
- Agents continue to get smarter, performance gets a bump, and free tier users have
  more time to see what makes Mito great.
- Requires setup of connected app in Mito
- Some data may be rate-limited based on usage
- When using the Mito AI server, you no longer need to provide your own OPENAI_API_KEY.
- It is important to install the correct version of mitosheet for your version of
  JupyterLab.
- Mito now supports JupyterLab 4!
- Improves Enterprise logging to help enterprise admins to triage errors.
- Mito now detects when changes have been made to the generated code, and prompts
  the user to make a decision before overwriting their changes.
- In streamlit apps, you can now specify a height for your mitosheet.
- The graph editor underwent many exciting changes in this release.
- With our new more advanced toolbar, the Mito graphing experience is more intuitive
  and saves valuable real estate in the graph.
- Speed up your workflow with our new keyboard shortcuts!
- In this release, we've added over 20 new keyboard shortcuts to make the Mito experience
  faster and easier.
- Deploy the Mito Spreadsheet component in Dash environments with multiple users.
- Adds the activate_mito to setup communication between the Mito frontend and the
  backend.
- The spreadsheet function now offers a return type 'analysis' that returns the new
  RunnableAnalysis class.
- Automate analyses in dashboards
- This release brings many usability enhancements for Streamlit and Dash users looking
  to automate their analyses.
- Code optimization is now open source.
- Dynamic range imports for Excel files now supports taking all rows until a specified
  number of consecutive empty rows are found.
- Added the ability to change custom imports after the initial import.
- 'Generated Code: Mito Enterprise users can now configure a file export path as an
  input to the Mito generated function.'
- 'Snowflake Import: Mito Enterprise users can now select different roles available
  to them within their Snowflake account.'
- Mito AI is under active development, so please reach out with any questions, comments,
  or feedback!
- Mito Enterprise users can generate Python functions, making it easier to reuse the
  generated code on different datasets.
- The Mito spreadsheet is now 1/2 the size it used to be. Having multiple Mito spreadsheets
  in one notebook should be less problematic.
- Mito Pro and Enterprise users can now update all of their column headers at once!
- You can now select sheets within an Excel file to import by sheet index instead
  of sheet name.
- Mito AI now helps you actually understand the edits you've made to your data.
- All users now get 20 free usages of Mito API.
- To use this feature more, you can upgrade to Mito Pro, or provide your open Open
  API key.
- Mito formulas now support ranges, unlocking a new set of use cases that were previously
  impossible in Mito.
- The formula writing experience in Mito has now been overhauled.
- Import multiple ranges from a single CSV file.
- Generated code will now start with `from mitsoheet.public.v3 import *`
- Excel range import now supports specifying a fixed number of columns for import.
- Mito now handles whitespace in the mitosheet.sheet call more robustly.
- Mito Enterprise users can now use Mito to import directly from Snowflake.
- This release contains a minor bug fix that makes errors appear directly within the
  pivot table interface, when they occur.
- This interface also properly exposes Snowflake Import to Mito Enterprise users.
- Requires OAuth2 setup for API access
- Some endpoints may have specific rate limits
- Mito now allows you to import from more complex Excel files that you are likely
  to find in the wild.
- You can import multiple dataframes from a specific sheet.
- Pivot tables are one of the most useful tool Mito provides, and as a result one
  of our most popular features. You now have the ability to filter directly within
  a pivot table, making interactive data exploration and aggregation that much easier.
- Mito is now available in Jupyter Notebooks. To use Mito in a Jupyter Notebook, follow
  the upgrade instructions here.
- Mito now allows you to edit any data in the raw dataset that you import to Mito.
- Mito is now available in Jupyter Notebooks.
- Fixed download so that the entire sheet is now downloaded when there are >2k rows.
- Fixed a minor bug in column renaming that make it impossible to use your mouse to
  select the column header.
- This release includes the ability to export formatting to excel for all formatting
  options included with Mito!
- Mito works in Classic Jupyter Notebooks, JupyterLab 2.x and 3.x, and Streamlit.
- Mito does not support Google Collab and VS Code.
- Service is intended only for access and use by individuals at least eighteen (18)
  years old.
- 'Terms of Service last updated: 12/22/2020'
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'ModuleNotFoundError: mitosheet package is not installed in your current environment'
- 'NameError: You have to first import the mitosheet package'
- columns having different dtypes than the generated code originally assumed
- the generated code relying on a package that was not yet imported in the notebook
- If the conditional formatting rule cannot be applied, it will display an error message
  prompting you to update the filter condition.
- 'error: All errors in Mito generate an `error` log event that contains useful information
  like the error traceback needed to identify and correct a bug.'
- All errors in Mito generate an `error` log event that contains useful information
  like the error traceback needed to identify and correct a bug.
- '403 Forbidden: Check your API key permissions'
- '404 Not Found: Verify the endpoint path'
- '500 Internal Server Error: Try again later or contact support'
- 'UNAUTHORIZED: Check API key or token'
- 'RATE_LIMIT_EXCEEDED: Reduce request frequency'
- '401 Unauthorized: Verify OAuth token validity'
- '429 Too Many Requests: Rate limit exceeded, try again later'
- No column header changes. Mito now supports all common string and number columns,
  which means it plays much better with your other Python scripts.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://www.trymito.io
  headers:
    Accept: application/json
source_metadata: null
