resources:
- name: Place Order
  endpoint:
    path: /placeOrder
    method: POST
- name: Place Smart Order
  endpoint:
    path: /placeSmartOrder
    method: POST
- name: Modify Order
  endpoint:
    path: /modifyOrder
    method: POST
- name: Cancel Order
  endpoint:
    path: /cancelOrder
    method: POST
- name: Cancel All Orders
  endpoint:
    path: /cancelAllOrders
    method: POST
- name: Close Position
  endpoint:
    path: /closePosition
    method: POST
- name: pnl
  endpoint:
    path: /pnltracker/api/pnl
    method: POST
- name: pnl_tracker
  endpoint:
    path: /pnltracker/api/pnl
    method: POST
- name: Latency Monitor
  endpoint:
    path: /latency
    method: GET
    data_selector: RTT
    params: {}
- name: Traffic Monitor
  endpoint:
    path: /traffic
    method: GET
    data_selector: API usage
    params: {}
- name: Brokers
  endpoint:
    path: /connect-brokers
    method: GET
- name: Interactive Order API
  endpoint:
    path: /api/v1/orders
    method: POST
- name: Market Data API
  endpoint:
    path: /api/v1/marketdata
    method: GET
- name: Interactive Order API
  endpoint:
    path: /api/v1/orders
    method: POST
- name: Market Data API
  endpoint:
    path: /api/v1/marketdata
    method: GET
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: data
- name: orders
  endpoint:
    path: /api/v1/orders
    method: GET
    data_selector: data
- name: api_key
  endpoint:
    path: /firstock/api_key
    method: GET
- name: Accounts
  endpoint:
    path: /api-documentation/v1/accounts-api
    method: GET
- name: Orders
  endpoint:
    path: /api-documentation/v1/orders-api
    method: GET
- name: Data
  endpoint:
    path: /api-documentation/v1/data-api
    method: GET
- name: Websockets
  endpoint:
    path: /api-documentation/v1/websockets
    method: GET
- name: accounts
  endpoint:
    path: /v1/accounts
    method: GET
    data_selector: data
    params: {}
- name: orders
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: data
    params: {}
- name: Trading API
  endpoint:
    path: /api/v1/trading
    method: GET
- name: Live Broadcast API
  endpoint:
    path: /api/v1/live-broadcast
    method: GET
- name: API Key
  endpoint:
    path: /api
    method: GET
    data_selector: API Credentials
- name: Interactive Order API
  endpoint:
    path: /api/interactive-order
    method: POST
- name: Market Data API
  endpoint:
    path: /api/market-data
    method: GET
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: data
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: data
    params: {}
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: data
    params: {}
- name: orders
  endpoint:
    path: /api/v1/orders
    method: GET
    data_selector: data
    params: {}
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: data
    params: {}
- name: orders
  endpoint:
    path: /api/v1/orders
    method: GET
    data_selector: data
    params: {}
- name: tunnels
  endpoint:
    path: /tunnels
    method: POST
    data_selector: tunnels
- name: flask
  endpoint:
    path: /
    method: http
    params:
      hostname: <your-ngrok-free-domain>.ngrok-free.app
      addr: 127.0.0.1:5000
- name: CNAME_record
  endpoint:
    path: /create/cname/record
    method: POST
    data_selector: record
    params:
      name: trade
      type: CNAME
      value: openalgo.ap-south-1.elasticbeanstalk.com
- name: OpenAlgo Application
  endpoint:
    path: /
    method: GET
    data_selector: application_data
    params: {}
- name: broker
  endpoint:
    path: /broker/configuration
    method: GET
    data_selector: records
- name: openalgo
  endpoint:
    path: /openalgo
    method: GET
- name: broker_api_credentials
  endpoint:
    path: /api/broker
    method: POST
    data_selector: credentials
- name: broker
  endpoint:
    path: /api/broker
    method: GET
- name: installation_script
  endpoint:
    path: /install/install.sh
    method: GET
- name: accounts
  endpoint:
    path: /api-documentation/v1/accounts-api
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /api-documentation/v1/orders-api
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /api-documentation/v1/data-api
    method: GET
    data_selector: records
    params: {}
- name: Gmail Configuration
  endpoint:
    path: /profile/smtp-configuration
    method: GET
    data_selector: configuration
    params: {}
- name: Google Workspace Configuration
  endpoint:
    path: /admin/apps/google-workspace/gmail/smtp-relay-service
    method: GET
    data_selector: configuration
    params: {}
- name: personal_gmail
  endpoint:
    path: /smtp/gmail
    method: POST
    data_selector: smtp_configuration
    params:
      SMTP_Server: smtp.gmail.com
      SMTP_Port: 587
      Username: your-email@gmail.com
      Password: '[App Password - see below]'
      From_Email: your-email@gmail.com
      HELO_Hostname: smtp.gmail.com
- name: google_workspace
  endpoint:
    path: /smtp/google_workspace
    method: POST
    data_selector: smtp_configuration
    params:
      SMTP_Server: smtp-relay.gmail.com
      SMTP_Port: 465
      Username: your-email@yourcompany.com
      Password: '[App Password - see below]'
      From_Email: your-email@yourcompany.com
      HELO_Hostname: smtp.gmail.com
- name: Gmail Personal Configuration
  endpoint:
    path: /profile/smtp-configuration
    method: GET
    data_selector: configuration
    params: {}
- name: Google Workspace Configuration
  endpoint:
    path: /admin/gmail/smtp-relay-service
    method: GET
    data_selector: configuration
    params: {}
- name: gmail_configuration
  endpoint:
    path: /smtp-configuration
    method: POST
    data_selector: configuration
    params:
      server: smtp.gmail.com
      port: 587
      username: your-email@gmail.com
      password: '[App Password]'
      use_tls_ssl: true
      from_email: your-email@gmail.com
      helo_hostname: smtp.gmail.com
- name: google_workspace_configuration
  endpoint:
    path: /smtp-relay-configuration
    method: POST
    data_selector: configuration
    params:
      server: smtp-relay.gmail.com
      port: 465
      username: your-email@yourcompany.com
      password: '[App Password]'
      use_tls_ssl: true
      from_email: your-email@yourcompany.com
      helo_hostname: smtp.gmail.com
- name: smtp_settings
  endpoint:
    path: /smtp/settings
    method: POST
    data_selector: settings
    params:
      server: smtp.gmail.com
      port: 587
      username: your-email@gmail.com
      password: '[App Password]'
      use_tls_ssl: true
      helo_hostname: smtp.gmail.com
- name: smtp_relay
  endpoint:
    path: /smtp/relay
    method: POST
    data_selector: relay
    params:
      server: smtp-relay.gmail.com
      port: 465
      username: your-email@yourcompany.com
      password: '[App Password]'
      use_tls_ssl: true
      helo_hostname: smtp.gmail.com
- name: Gmail
  endpoint:
    path: /smtp.gmail.com
    method: POST
    data_selector: smtp
    params:
      smtp_server: smtp.gmail.com
      smtp_port: 587
      username: your-email@gmail.com
      password: '[App Password - see below]'
      use_tls_ssl: true
      from_email: your-email@gmail.com
      helo_hostname: smtp.gmail.com
- name: Google Workspace
  endpoint:
    path: /smtp-relay.gmail.com
    method: POST
    data_selector: smtp
    params:
      smtp_server: smtp-relay.gmail.com
      smtp_port: 465
      username: your-email@yourcompany.com
      password: '[App Password - see below]'
      use_tls_ssl: true
      from_email: your-email@yourcompany.com
      helo_hostname: smtp.gmail.com
- name: Google Workspace SMTP Relay
  endpoint:
    path: /support/google/workspace/smtp_relay
    method: GET
- name: SendGrid
  endpoint:
    path: /support/sendgrid
    method: GET
- name: Mailgun
  endpoint:
    path: /support/mailgun
    method: GET
- name: SMTP Configuration
  endpoint:
    path: /auth/change
    method: GET
    data_selector: settings
- name: TOTP Authentication
  endpoint:
    path: /auth/change
    method: GET
    data_selector: totp_settings
- name: placeorder
  endpoint:
    path: /placeorder
    method: POST
- name: placeorder
  endpoint:
    path: /placeorder
    method: POST
- name: Ping
  endpoint:
    path: /api-documentation/v1/accounts-api/ping
    method: GET
- name: Funds
  endpoint:
    path: /api-documentation/v1/accounts-api/funds
    method: GET
- name: Orderbook
  endpoint:
    path: /api-documentation/v1/accounts-api/orderbook
    method: GET
- name: Tradebook
  endpoint:
    path: /api-documentation/v1/accounts-api/tradebook
    method: GET
- name: PositionBook
  endpoint:
    path: /api-documentation/v1/accounts-api/positionbook
    method: GET
- name: Holdings
  endpoint:
    path: /api-documentation/v1/accounts-api/holdings
    method: GET
- name: Analyzer Status
  endpoint:
    path: /api-documentation/v1/accounts-api/analyzer-status
    method: GET
- name: Analyzer Toggle
  endpoint:
    path: /api-documentation/v1/accounts-api/analyzer-toggle
    method: GET
- name: ping
  endpoint:
    path: /api-documentation/v1/accounts-api/ping
    method: GET
- name: funds
  endpoint:
    path: /api-documentation/v1/accounts-api/funds
    method: GET
- name: orderbook
  endpoint:
    path: /api-documentation/v1/accounts-api/orderbook
    method: GET
- name: tradebook
  endpoint:
    path: /api-documentation/v1/accounts-api/tradebook
    method: GET
- name: positionbook
  endpoint:
    path: /api-documentation/v1/accounts-api/positionbook
    method: GET
- name: holdings
  endpoint:
    path: /api-documentation/v1/accounts-api/holdings
    method: GET
- name: analyzer_status
  endpoint:
    path: /api-documentation/v1/accounts-api/analyzer-status
    method: GET
- name: analyzer_toggle
  endpoint:
    path: /api-documentation/v1/accounts-api/analyzer-toggle
    method: GET
- name: Placeorder
  endpoint:
    path: /api-documentation/v1/orders-api/placeorder
    method: POST
- name: OrderStatus
  endpoint:
    path: /api-documentation/v1/orders-api/orderstatus
    method: GET
- name: CancelOrder
  endpoint:
    path: /api-documentation/v1/orders-api/cancelorder
    method: DELETE
- name: quotes
  endpoint:
    path: /api-documentation/v1/data-api/quotes
    method: GET
- name: depth
  endpoint:
    path: /api-documentation/v1/data-api/depth
    method: GET
- name: history
  endpoint:
    path: /api-documentation/v1/data-api/history
    method: GET
- name: intervals
  endpoint:
    path: /api-documentation/v1/data-api/intervals
    method: GET
- name: symbol
  endpoint:
    path: /api-documentation/v1/data-api/symbol
    method: GET
- name: search
  endpoint:
    path: /api-documentation/v1/data-api/search
    method: GET
- name: expiry
  endpoint:
    path: /api-documentation/v1/data-api/expiry
    method: GET
- name: ticker
  endpoint:
    path: /api-documentation/v1/data-api/ticker
    method: GET
- name: market_data
  endpoint:
    path: /ws
    method: POST
    data_selector: action
    params: {}
- name: quotes
  endpoint:
    path: /api/documentation/v1/data-api/quotes
    method: GET
- name: depth
  endpoint:
    path: /api/documentation/v1/data-api/depth
    method: GET
- name: history
  endpoint:
    path: /api/documentation/v1/data-api/history
    method: GET
- name: intervals
  endpoint:
    path: /api/documentation/v1/data-api/intervals
    method: GET
- name: symbol
  endpoint:
    path: /api/documentation/v1/data-api/symbol
    method: GET
- name: search
  endpoint:
    path: /api/documentation/v1/data-api/search
    method: GET
- name: expiry
  endpoint:
    path: /api/documentation/v1/data-api/expiry
    method: GET
- name: ticker
  endpoint:
    path: /api/documentation/v1/data-api/ticker
    method: GET
- name: market_data
  endpoint:
    path: /ws
    method: POST
    data_selector: data
    params:
      mode: 1
- name: exchange
  endpoint:
    path: /api-documentation/v1/order-constants/exchange
    method: GET
- name: product_type
  endpoint:
    path: /api-documentation/v1/order-constants/product-type
    method: GET
- name: price_type
  endpoint:
    path: /api-documentation/v1/order-constants/price-type
    method: GET
- name: action
  endpoint:
    path: /api-documentation/v1/order-constants/action
    method: GET
- name: exchange
  endpoint:
    path: /api-documentation/v1/order-constants/exchange
    method: GET
    data_selector: exchanges
- name: product_type
  endpoint:
    path: /api-documentation/v1/order-constants/product-type
    method: GET
    data_selector: product_types
- name: price_type
  endpoint:
    path: /api-documentation/v1/order-constants/price-type
    method: GET
    data_selector: price_types
- name: action
  endpoint:
    path: /api-documentation/v1/order-constants/action
    method: GET
    data_selector: actions
- name: common_nse_index_symbols
  endpoint:
    path: /nse/index/symbols
    method: GET
    data_selector: symbols
- name: common_bse_index_symbols
  endpoint:
    path: /bse/index/symbols
    method: GET
    data_selector: symbols
- name: exchange_codes
  endpoint:
    path: /exchange/codes
    method: GET
    data_selector: codes
- name: database_schema_common_symbols
  endpoint:
    path: /database/schema/common_symbols
    method: GET
    data_selector: schema
- name: accounts
  endpoint:
    path: /api/documentation/v1/accounts-api
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /api/documentation/v1/orders-api
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /api/documentation/v1/data-api
    method: GET
    data_selector: records
    params: {}
- name: placeorder
  endpoint:
    path: /placeorder
    method: POST
- name: closeposition
  endpoint:
    path: /closeposition
    method: POST
- name: ticker_symbols
  endpoint:
    path: /api/ticker
    method: GET
- name: place_order
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
    params: {}
- name: place_order
  endpoint:
    path: /placeorder
    method: POST
    data_selector: null
    params: {}
- name: close_position
  endpoint:
    path: /closeposition
    method: POST
    data_selector: null
    params: {}
- name: place_order
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
    params: {}
- name: Accounts API
  endpoint:
    path: /api-documentation/v1/accounts-api
    method: GET
- name: Orders API
  endpoint:
    path: /api-documentation/v1/orders-api
    method: GET
- name: Data API
  endpoint:
    path: /api-documentation/v1/data-api
    method: GET
- name: Websockets
  endpoint:
    path: /api-documentation/v1/websockets
    method: GET
- name: Order Constants
  endpoint:
    path: /api-documentation/v1/order-constants
    method: GET
- name: HTTP Status Codes
  endpoint:
    path: /api-documentation/v1/http-status-codes
    method: GET
- name: Rate Limiting
  endpoint:
    path: /api-documentation/v1/rate-limiting
    method: GET
- name: API Collections
  endpoint:
    path: /api-documentation/v1/api-collections
    method: GET
- name: Accounts API
  endpoint:
    path: /api-documentation/v1/accounts-api
    method: GET
    data_selector: records
- name: Orders API
  endpoint:
    path: /api-documentation/v1/orders-api
    method: GET
    data_selector: records
- name: Data API
  endpoint:
    path: /api-documentation/v1/data-api
    method: GET
    data_selector: records
- name: Websockets
  endpoint:
    path: /api-documentation/v1/websockets
    method: GET
    data_selector: records
- name: place_order
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
- name: close_position
  endpoint:
    path: /api/v1/closeposition
    method: POST
    data_selector: response
- name: place_order
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: api_response
- name: close_position
  endpoint:
    path: /api/v1/closeposition
    method: POST
    data_selector: sq_api_response
- name: splitorder
  endpoint:
    path: /api/v1/splitorder
    method: POST
    data_selector: response
    params: {}
- name: split_order
  endpoint:
    path: /api/v1/splitorder
    method: POST
    data_selector: response
    params: {}
- name: placeorder
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
    params: {}
- name: cancelorder
  endpoint:
    path: /api/v1/cancelorder
    method: POST
    data_selector: response
    params: {}
- name: closeposition
  endpoint:
    path: /api/v1/closeposition
    method: POST
    data_selector: response
    params: {}
- name: placeorder
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
    params: {}
- name: cancelorder
  endpoint:
    path: /api/v1/cancelorder
    method: POST
    data_selector: response
    params: {}
- name: closeposition
  endpoint:
    path: /api/v1/closeposition
    method: POST
    data_selector: response
    params: {}
- name: placesmartorder
  endpoint:
    path: /placesmartorder
    method: POST
    data_selector: ''
    params: {}
- name: closeposition
  endpoint:
    path: /closeposition
    method: POST
    data_selector: ''
    params: {}
- name: placesmartorder
  endpoint:
    path: /placesmartorder
    method: POST
    data_selector: response
    params: {}
- name: closeposition
  endpoint:
    path: /closeposition
    method: POST
    data_selector: response
    params: {}
- name: placeorder
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
    params: {}
- name: placesmartorder
  endpoint:
    path: /api/v1/placesmartorder
    method: POST
    data_selector: response
    params: {}
- name: closeposition
  endpoint:
    path: /api/v1/closeposition
    method: POST
    data_selector: response
    params: {}
- name: placeorder
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
- name: placesmartorder
  endpoint:
    path: /api/v1/placesmartorder
    method: POST
    data_selector: response
- name: closeposition
  endpoint:
    path: /api/v1/closeposition
    method: POST
    data_selector: response
- name: placeorder
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
- name: orderstatus
  endpoint:
    path: /api/v1/orderstatus
    method: POST
    data_selector: response
- name: modifyorder
  endpoint:
    path: /api/v1/modifyorder
    method: POST
    data_selector: response
- name: placeorder
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
- name: orderstatus
  endpoint:
    path: /api/v1/orderstatus
    method: POST
    data_selector: response
- name: modifyorder
  endpoint:
    path: /api/v1/modifyorder
    method: POST
    data_selector: response
- name: placeorder
  endpoint:
    path: /api/v1/placeorder
    method: POST
- name: placesmartorder
  endpoint:
    path: /api/v1/placesmartorder
    method: POST
- name: closeposition
  endpoint:
    path: /api/v1/closeposition
    method: POST
- name: placeorder
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
- name: placesmartorder
  endpoint:
    path: /api/v1/placesmartorder
    method: POST
    data_selector: response
- name: closeposition
  endpoint:
    path: /api/v1/closeposition
    method: POST
    data_selector: response
- name: placeorder
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
- name: placeorder
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
- name: place_order
  endpoint:
    path: /api/v1/placeorder
    method: POST
- name: placeorder
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
- name: place_order
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
- name: place_order
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
    params: {}
- name: exit_order
  endpoint:
    path: /api/v1/placesmartorder
    method: POST
    data_selector: response
    params: {}
- name: close_position
  endpoint:
    path: /api/v1/closeposition
    method: POST
    data_selector: response
    params: {}
- name: place_order
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
    params: {}
- name: place_smart_order
  endpoint:
    path: /api/v1/placesmartorder
    method: POST
    data_selector: response
    params: {}
- name: placeorder
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: ''
    params: {}
- name: placesmartorder
  endpoint:
    path: /api/v1/placesmartorder
    method: POST
    data_selector: ''
    params: {}
- name: closeposition
  endpoint:
    path: /api/v1/closeposition
    method: POST
    data_selector: ''
    params: {}
- name: placeorder
  endpoint:
    path: /placeorder
    method: POST
    data_selector: jsonRequestBody
    params: {}
- name: placesmartorder
  endpoint:
    path: /placesmartorder
    method: POST
    data_selector: jsonRequestBody
    params: {}
- name: placeorder
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
    params: {}
- name: placesmartorder
  endpoint:
    path: /api/v1/placesmartorder
    method: POST
    data_selector: response
    params: {}
- name: placeorder
  endpoint:
    path: /placeorder
    method: POST
- name: placesmartorder
  endpoint:
    path: /placesmartorder
    method: POST
- name: place_order
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
- name: place_smart_order
  endpoint:
    path: /api/v1/placesmartorder
    method: POST
    data_selector: response
- name: accounts
  endpoint:
    path: /api-documentation/v1/accounts-api
    method: GET
- name: orders
  endpoint:
    path: /api-documentation/v1/orders-api
    method: GET
- name: data
  endpoint:
    path: /api-documentation/v1/data-api
    method: GET
- name: placeorder
  endpoint:
    path: /api/v1/placeorder
    method: POST
- name: placesmartorder
  endpoint:
    path: /api/v1/placesmartorder
    method: POST
- name: Time Based Execution
  endpoint:
    path: /trading-platform/amibroker/time-based-execution
- name: place_order
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: ''
    params: {}
- name: placeorder
  endpoint:
    path: /api/v1/placeorder
    method: POST
- name: trade
  endpoint:
    path: /api/trade
    method: POST
    data_selector: trade_data
- name: futures_to_options_execution_module
  endpoint:
    path: /api/futures_to_options
    method: POST
    data_selector: data
    params: {}
- name: LongCall
  endpoint:
    path: /api/longcall
    method: POST
    data_selector: data
    params: {}
- name: ExitCall
  endpoint:
    path: /api/exitcall
    method: POST
    data_selector: data
    params: {}
- name: LongPut
  endpoint:
    path: /api/longput
    method: POST
    data_selector: data
    params: {}
- name: ExitPut
  endpoint:
    path: /api/exitput
    method: POST
    data_selector: data
    params: {}
- name: scanner
  endpoint:
    path: /scan_dashboard
    method: GET
    data_selector: scanners
- name: alert
  endpoint:
    path: /alert
    method: POST
    data_selector: alerts
- name: accounts
  endpoint:
    path: /api-documentation/v1/accounts-api
    method: GET
- name: orders
  endpoint:
    path: /api-documentation/v1/orders-api
    method: GET
- name: data
  endpoint:
    path: /api-documentation/v1/data-api
    method: GET
- name: accounts
  endpoint:
    path: /api/documentation/v1/accounts-api
    method: GET
- name: orders
  endpoint:
    path: /api/documentation/v1/orders-api
    method: GET
- name: data
  endpoint:
    path: /api/documentation/v1/data-api
    method: GET
- name: basket_order
  endpoint:
    path: /basketorder
    method: POST
- name: split_order
  endpoint:
    path: /splitorder
    method: POST
- name: modify_order
  endpoint:
    path: /modifyorder
    method: POST
- name: cancel_order
  endpoint:
    path: /cancelorder
    method: POST
- name: cancel_all_order
  endpoint:
    path: /cancelallorder
    method: POST
- name: close_position
  endpoint:
    path: /closeposition
    method: POST
- name: order_status
  endpoint:
    path: /orderstatus
    method: GET
- name: open_position
  endpoint:
    path: /openposition
    method: GET
- name: quotes
  endpoint:
    path: /quotes
    method: GET
- name: depth
  endpoint:
    path: /depth
    method: GET
- name: history
  endpoint:
    path: /history
    method: GET
- name: intervals
  endpoint:
    path: /intervals
    method: GET
- name: symbol
  endpoint:
    path: /symbol
    method: GET
- name: search
  endpoint:
    path: /search
    method: GET
- name: expiry
  endpoint:
    path: /expiry
    method: GET
- name: funds
  endpoint:
    path: /funds
    method: GET
- name: order_book
  endpoint:
    path: /orderbook
    method: GET
- name: trade_book
  endpoint:
    path: /tradebook
    method: GET
- name: position_book
  endpoint:
    path: /positionbook
    method: GET
- name: holdings
  endpoint:
    path: /holdings
    method: GET
- name: analyzer_status
  endpoint:
    path: /analyzerstatus
    method: GET
- name: analyzer_toggle
  endpoint:
    path: /analyzertoggle
    method: POST
- name: basket_order
  endpoint:
    path: /basketorder
    method: POST
    data_selector: results
- name: split_order
  endpoint:
    path: /splitorder
    method: POST
    data_selector: results
- name: modify_order
  endpoint:
    path: /modifyorder
    method: POST
    data_selector: orderid
- name: cancel_order
  endpoint:
    path: /cancelorder
    method: POST
    data_selector: orderid
- name: cancel_all_order
  endpoint:
    path: /cancelallorder
    method: POST
    data_selector: message
- name: close_position
  endpoint:
    path: /closeposition
    method: POST
    data_selector: message
- name: order_status
  endpoint:
    path: /orderstatus
    method: GET
    data_selector: data
- name: open_position
  endpoint:
    path: /openposition
    method: GET
    data_selector: quantity
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: data
- name: depth
  endpoint:
    path: /depth
    method: GET
    data_selector: data
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: data
- name: intervals
  endpoint:
    path: /intervals
    method: GET
    data_selector: data
- name: symbol
  endpoint:
    path: /symbol
    method: GET
    data_selector: data
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: data
- name: expiry
  endpoint:
    path: /expiry
    method: GET
    data_selector: data
- name: funds
  endpoint:
    path: /funds
    method: GET
    data_selector: data
- name: order_book
  endpoint:
    path: /orderbook
    method: GET
    data_selector: data
- name: trade_book
  endpoint:
    path: /tradebook
    method: GET
    data_selector: data
- name: position_book
  endpoint:
    path: /positionbook
    method: GET
    data_selector: data
- name: holdings
  endpoint:
    path: /holdings
    method: GET
    data_selector: data
- name: analyzer_status
  endpoint:
    path: /analyzerstatus
    method: GET
    data_selector: data
- name: basket_order
  endpoint:
    path: /basketorder
    method: POST
    data_selector: results
    params: {}
- name: split_order
  endpoint:
    path: /splitorder
    method: POST
    data_selector: ''
    params: {}
- name: modify_order
  endpoint:
    path: /modifyorder
    method: POST
    data_selector: ''
    params: {}
- name: cancel_order
  endpoint:
    path: /cancelorder
    method: POST
    data_selector: ''
    params: {}
- name: cancel_all_orders
  endpoint:
    path: /cancelallorder
    method: POST
    data_selector: ''
    params: {}
- name: close_position
  endpoint:
    path: /closeposition
    method: POST
    data_selector: ''
    params: {}
- name: order_status
  endpoint:
    path: /orderstatus
    method: GET
    data_selector: data
    params: {}
- name: open_position
  endpoint:
    path: /openposition
    method: GET
    data_selector: ''
    params: {}
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: data
    params: {}
- name: depth
  endpoint:
    path: /depth
    method: GET
    data_selector: data
    params: {}
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: ''
    params: {}
- name: intervals
  endpoint:
    path: /intervals
    method: GET
    data_selector: data
    params: {}
- name: symbol
  endpoint:
    path: /symbol
    method: GET
    data_selector: data
    params: {}
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: data
    params: {}
- name: expiry
  endpoint:
    path: /expiry
    method: GET
    data_selector: data
    params: {}
- name: funds
  endpoint:
    path: /funds
    method: GET
    data_selector: data
    params: {}
- name: order_book
  endpoint:
    path: /orderbook
    method: GET
    data_selector: data
    params: {}
- name: trade_book
  endpoint:
    path: /tradebook
    method: GET
    data_selector: data
    params: {}
- name: position_book
  endpoint:
    path: /positionbook
    method: GET
    data_selector: data
    params: {}
- name: holdings
  endpoint:
    path: /holdings
    method: GET
    data_selector: data
    params: {}
- name: analyzer_status
  endpoint:
    path: /analyzerstatus
    method: GET
    data_selector: data
    params: {}
- name: analyzer_toggle
  endpoint:
    path: /analyzertoggle
    method: POST
    data_selector: data
    params: {}
- name: basket_order
  endpoint:
    path: /basketorder
    method: POST
    data_selector: results
- name: split_order
  endpoint:
    path: /splitorder
    method: POST
    data_selector: results
- name: modify_order
  endpoint:
    path: /modifyorder
    method: POST
    data_selector: orderid
- name: cancel_order
  endpoint:
    path: /cancelorder
    method: POST
    data_selector: orderid
- name: cancel_all_orders
  endpoint:
    path: /cancelallorder
    method: POST
    data_selector: canceled_orders
- name: close_position
  endpoint:
    path: /closeposition
    method: POST
    data_selector: message
- name: order_status
  endpoint:
    path: /orderstatus
    method: GET
    data_selector: data
- name: open_position
  endpoint:
    path: /openposition
    method: GET
    data_selector: quantity
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: data
- name: depth
  endpoint:
    path: /depth
    method: GET
    data_selector: data
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: data
- name: intervals
  endpoint:
    path: /intervals
    method: GET
    data_selector: data
- name: symbol
  endpoint:
    path: /symbol
    method: GET
    data_selector: data
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: data
- name: expiry
  endpoint:
    path: /expiry
    method: GET
    data_selector: data
- name: funds
  endpoint:
    path: /funds
    method: GET
    data_selector: data
- name: order_book
  endpoint:
    path: /orderbook
    method: GET
    data_selector: data
- name: trade_book
  endpoint:
    path: /tradebook
    method: GET
    data_selector: data
- name: position_book
  endpoint:
    path: /positionbook
    method: GET
    data_selector: data
- name: holdings
  endpoint:
    path: /holdings
    method: GET
    data_selector: data
- name: analyzer_status
  endpoint:
    path: /analyzerstatus
    method: GET
    data_selector: data
- name: analyzer_toggle
  endpoint:
    path: /analyzertoggle
    method: POST
    data_selector: data
- name: basket_order
  endpoint:
    path: /basketorder
    method: POST
    data_selector: results
- name: split_order
  endpoint:
    path: /splitorder
    method: POST
    data_selector: split_size
- name: modify_order
  endpoint:
    path: /modifyorder
    method: POST
    data_selector: orderid
- name: cancel_order
  endpoint:
    path: /cancelorder
    method: POST
    data_selector: orderid
- name: cancel_all_order
  endpoint:
    path: /cancelallorder
    method: POST
    data_selector: message
- name: close_position
  endpoint:
    path: /closeposition
    method: POST
    data_selector: message
- name: order_status
  endpoint:
    path: /orderstatus
    method: GET
    data_selector: data
- name: open_position
  endpoint:
    path: /openposition
    method: GET
    data_selector: quantity
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: data
- name: depth
  endpoint:
    path: /depth
    method: GET
    data_selector: data
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: data
- name: funds
  endpoint:
    path: /funds
    method: GET
    data_selector: data
- name: order_book
  endpoint:
    path: /orderbook
    method: GET
    data_selector: data
- name: trade_book
  endpoint:
    path: /tradebook
    method: GET
    data_selector: data
- name: position_book
  endpoint:
    path: /positionbook
    method: GET
    data_selector: data
- name: holdings
  endpoint:
    path: /holdings
    method: GET
    data_selector: data
- name: analyzer_status
  endpoint:
    path: /analyzerstatus
    method: GET
    data_selector: data
- name: analyzer_toggle
  endpoint:
    path: /analyzertoggle
    method: POST
    data_selector: data
- name: placeorder
  endpoint:
    path: /api/documentation/v1/orders-api/placeorder
    method: POST
- name: basket_order
  endpoint:
    path: /client/basketorder
    method: POST
    data_selector: results
- name: split_order
  endpoint:
    path: /client/splitorder
    method: POST
    data_selector: split_size
- name: modify_order
  endpoint:
    path: /client/modifyorder
    method: POST
    data_selector: orderid
- name: cancel_order
  endpoint:
    path: /client/cancelorder
    method: POST
    data_selector: orderid
- name: cancel_all_orders
  endpoint:
    path: /client/cancelallorder
    method: POST
    data_selector: canceled_orders
- name: close_position
  endpoint:
    path: /client/closeposition
    method: POST
    data_selector: message
- name: order_status
  endpoint:
    path: /client/orderstatus
    method: GET
    data_selector: data
- name: open_position
  endpoint:
    path: /client/openposition
    method: GET
    data_selector: quantity
- name: quotes
  endpoint:
    path: /client/quotes
    method: GET
    data_selector: data
- name: depth
  endpoint:
    path: /client/depth
    method: GET
    data_selector: data
- name: history
  endpoint:
    path: /client/history
    method: GET
    data_selector: data
- name: symbol
  endpoint:
    path: /client/symbol
    method: GET
    data_selector: data
- name: search
  endpoint:
    path: /client/search
    method: GET
    data_selector: data
- name: expiry
  endpoint:
    path: /client/expiry
    method: GET
    data_selector: data
- name: funds
  endpoint:
    path: /client/funds
    method: GET
    data_selector: data
- name: order_book
  endpoint:
    path: /client/orderbook
    method: GET
    data_selector: data
- name: trade_book
  endpoint:
    path: /client/tradebook
    method: GET
    data_selector: data
- name: position_book
  endpoint:
    path: /client/positionbook
    method: GET
    data_selector: data
- name: holdings
  endpoint:
    path: /client/holdings
    method: GET
    data_selector: data
- name: analyzer_status
  endpoint:
    path: /client/analyzerstatus
    method: GET
    data_selector: data
- name: analyzer_toggle
  endpoint:
    path: /client/analyzertoggle
    method: POST
    data_selector: data
- name: basket_order
  endpoint:
    path: /basketorder
    method: POST
    data_selector: results
- name: split_order
  endpoint:
    path: /splitorder
    method: POST
    data_selector: split_size
- name: modify_order
  endpoint:
    path: /modifyorder
    method: POST
- name: cancel_order
  endpoint:
    path: /cancelorder
    method: POST
- name: cancel_all_order
  endpoint:
    path: /cancelallorder
    method: POST
- name: close_position
  endpoint:
    path: /closeposition
    method: POST
- name: order_status
  endpoint:
    path: /orderstatus
    method: GET
- name: open_position
  endpoint:
    path: /openposition
    method: GET
- name: quotes
  endpoint:
    path: /quotes
    method: GET
- name: depth
  endpoint:
    path: /depth
    method: GET
- name: history
  endpoint:
    path: /history
    method: GET
- name: intervals
  endpoint:
    path: /intervals
    method: GET
- name: symbol
  endpoint:
    path: /symbol
    method: GET
- name: search
  endpoint:
    path: /search
    method: GET
- name: expiry
  endpoint:
    path: /expiry
    method: GET
- name: funds
  endpoint:
    path: /funds
    method: GET
- name: order_book
  endpoint:
    path: /orderbook
    method: GET
- name: trade_book
  endpoint:
    path: /tradebook
    method: GET
- name: position_book
  endpoint:
    path: /positionbook
    method: GET
- name: holdings
  endpoint:
    path: /holdings
    method: GET
- name: analyzer_status
  endpoint:
    path: /analyzerstatus
    method: GET
- name: analyzer_toggle
  endpoint:
    path: /analyzertoggle
    method: POST
- name: depth
  endpoint:
    path: /depth
    method: GET
- name: quote
  endpoint:
    path: /quote
    method: GET
- name: basket_order
  endpoint:
    path: /basketorder
    method: POST
    data_selector: results
- name: split_order
  endpoint:
    path: /splitorder
    method: POST
    data_selector: split_size
- name: modify_order
  endpoint:
    path: /modifyorder
    method: POST
    data_selector: orderid
- name: cancel_order
  endpoint:
    path: /cancelorder
    method: POST
    data_selector: orderid
- name: cancel_all_orders
  endpoint:
    path: /cancelallorder
    method: POST
    data_selector: canceled_orders
- name: close_position
  endpoint:
    path: /closeposition
    method: POST
    data_selector: message
- name: order_status
  endpoint:
    path: /orderstatus
    method: GET
    data_selector: data
- name: open_position
  endpoint:
    path: /openposition
    method: GET
    data_selector: quantity
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: data
- name: depth
  endpoint:
    path: /depth
    method: GET
    data_selector: data
- name: history
  endpoint:
    path: /history
    method: GET
- name: symbol
  endpoint:
    path: /symbol
    method: GET
    data_selector: data
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: data
- name: expiry
  endpoint:
    path: /expiry
    method: GET
    data_selector: data
- name: funds
  endpoint:
    path: /funds
    method: GET
    data_selector: data
- name: order_book
  endpoint:
    path: /orderbook
    method: GET
    data_selector: data
- name: trade_book
  endpoint:
    path: /tradebook
    method: GET
    data_selector: data
- name: position_book
  endpoint:
    path: /positionbook
    method: GET
    data_selector: data
- name: holdings
  endpoint:
    path: /holdings
    method: GET
    data_selector: data
- name: analyzer_status
  endpoint:
    path: /analyzerstatus
    method: GET
    data_selector: data
- name: analyzer_toggle
  endpoint:
    path: /analyzertoggle
    method: POST
    data_selector: data
- name: basket_order
  endpoint:
    path: /basketorder
    method: POST
    data_selector: results
- name: split_order
  endpoint:
    path: /splitorder
    method: POST
    data_selector: split_size
- name: modify_order
  endpoint:
    path: /modifyorder
    method: POST
    data_selector: orderid
- name: cancel_order
  endpoint:
    path: /cancelorder
    method: POST
    data_selector: orderid
- name: cancel_all_order
  endpoint:
    path: /cancelallorder
    method: POST
    data_selector: canceled_orders
- name: close_position
  endpoint:
    path: /closeposition
    method: POST
    data_selector: message
- name: order_status
  endpoint:
    path: /orderstatus
    method: GET
    data_selector: data
- name: open_position
  endpoint:
    path: /openposition
    method: GET
    data_selector: quantity
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: data
- name: depth
  endpoint:
    path: /depth
    method: GET
    data_selector: data
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: data
- name: intervals
  endpoint:
    path: /intervals
    method: GET
    data_selector: data
- name: symbol
  endpoint:
    path: /symbol
    method: GET
    data_selector: data
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: data
- name: expiry
  endpoint:
    path: /expiry
    method: GET
    data_selector: data
- name: funds
  endpoint:
    path: /funds
    method: GET
    data_selector: data
- name: order_book
  endpoint:
    path: /orderbook
    method: GET
    data_selector: data
- name: trade_book
  endpoint:
    path: /tradebook
    method: GET
    data_selector: data
- name: position_book
  endpoint:
    path: /positionbook
    method: GET
    data_selector: data
- name: holdings
  endpoint:
    path: /holdings
    method: GET
    data_selector: data
- name: analyzer_status
  endpoint:
    path: /analyzerstatus
    method: GET
    data_selector: data
- name: analyzer_toggle
  endpoint:
    path: /analyzertoggle
    method: POST
    data_selector: data
- name: basket_order
  endpoint:
    path: /basketorder
    method: POST
    data_selector: results
- name: split_order
  endpoint:
    path: /splitorder
    method: POST
    data_selector: split_size
- name: modify_order
  endpoint:
    path: /modifyorder
    method: POST
    data_selector: orderid
- name: cancel_order
  endpoint:
    path: /cancelorder
    method: POST
    data_selector: orderid
- name: cancel_all_orders
  endpoint:
    path: /cancelallorder
    method: POST
    data_selector: canceled_orders
- name: close_position
  endpoint:
    path: /closeposition
    method: POST
    data_selector: message
- name: order_status
  endpoint:
    path: /orderstatus
    method: GET
    data_selector: data
- name: open_position
  endpoint:
    path: /openposition
    method: GET
    data_selector: quantity
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: data
- name: depth
  endpoint:
    path: /depth
    method: GET
    data_selector: data
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: data
- name: intervals
  endpoint:
    path: /intervals
    method: GET
    data_selector: data
- name: symbol
  endpoint:
    path: /symbol
    method: GET
    data_selector: data
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: data
- name: expiry
  endpoint:
    path: /expiry
    method: GET
    data_selector: data
- name: funds
  endpoint:
    path: /funds
    method: GET
    data_selector: data
- name: order_book
  endpoint:
    path: /orderbook
    method: GET
    data_selector: data
- name: trade_book
  endpoint:
    path: /tradebook
    method: GET
    data_selector: data
- name: position_book
  endpoint:
    path: /positionbook
    method: GET
    data_selector: data
- name: holdings
  endpoint:
    path: /holdings
    method: GET
    data_selector: data
- name: analyzer_status
  endpoint:
    path: /analyzerstatus
    method: GET
    data_selector: data
- name: analyzer_toggle
  endpoint:
    path: /analyzertoggle
    method: POST
    data_selector: data
- name: basket_order
  endpoint:
    path: /basketorder
    method: POST
    data_selector: results
- name: split_order
  endpoint:
    path: /splitorder
    method: POST
    data_selector: split_size
- name: modify_order
  endpoint:
    path: /modifyorder
    method: POST
    data_selector: orderid
- name: cancel_order
  endpoint:
    path: /cancelorder
    method: POST
    data_selector: orderid
- name: cancel_all_orders
  endpoint:
    path: /cancelallorder
    method: POST
    data_selector: message
- name: close_position
  endpoint:
    path: /closeposition
    method: POST
    data_selector: message
- name: order_status
  endpoint:
    path: /orderstatus
    method: GET
    data_selector: data
- name: open_position
  endpoint:
    path: /openposition
    method: GET
    data_selector: quantity
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: data
- name: depth
  endpoint:
    path: /depth
    method: GET
    data_selector: data
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: data
- name: holdings
  endpoint:
    path: /holdings
    method: GET
    data_selector: data
- name: order_book
  endpoint:
    path: /orderbook
    method: GET
    data_selector: data
- name: trade_book
  endpoint:
    path: /tradebook
    method: GET
    data_selector: data
- name: position_book
  endpoint:
    path: /positionbook
    method: GET
    data_selector: data
- name: analyzer_status
  endpoint:
    path: /analyzerstatus
    method: GET
    data_selector: data
- name: analyzer_toggle
  endpoint:
    path: /analyzertoggle
    method: POST
    data_selector: data
- name: technical_indicators
  endpoint:
    path: /api/technical_indicators
    method: GET
    data_selector: indicators
- name: trend_indicators
  endpoint:
    path: /api/documentation/v1/data-api/trend-indicators
    method: GET
    data_selector: indicators
- name: momentum_indicators
  endpoint:
    path: /api/documentation/v1/data-api/momentum-indicators
    method: GET
    data_selector: indicators
- name: volatility_indicators
  endpoint:
    path: /api/documentation/v1/data-api/volatility-indicators
    method: GET
    data_selector: indicators
- name: volume_indicators
  endpoint:
    path: /api/documentation/v1/data-api/volume-indicators
    method: GET
    data_selector: indicators
- name: strategy
  endpoint:
    path: /strategy
    method: POST
    data_selector: results
    params: {}
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: data
    params: {}
- name: placesmartorder
  endpoint:
    path: /placesmartorder
    method: POST
    data_selector: response
    params: {}
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: data
    params: {}
- name: placesmartorder
  endpoint:
    path: /placesmartorder
    method: POST
    data_selector: response
    params: {}
- name: trade_settings
  endpoint:
    path: /api/documentation/v1/trade-settings
    method: GET
    data_selector: trade_settings
    params: {}
- name: accounts
  endpoint:
    path: /api-documentation/v1/accounts-api
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /api-documentation/v1/orders-api
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /api-documentation/v1/data-api
    method: GET
    data_selector: records
    params: {}
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: data
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: data
- name: supertrend_strategy
  endpoint:
    path: /api/supertrend
    method: POST
    data_selector: data
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: data
    params:
      symbol: NIFTY
      exchange: NSE_INDEX
- name: quotes
  endpoint:
    path: /api/documentation/v1/data-api/quotes
    method: GET
    data_selector: data
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: data
    params: {}
- name: straddle_orders
  endpoint:
    path: /services/data/vXX.X/straddleOrders
    method: POST
    data_selector: orders
    params: {}
- name: option_symbols
  endpoint:
    path: /services/data/vXX.X/optionSymbols
    method: GET
    data_selector: symbols
    params: {}
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: data
    params: {}
- name: straddle_parameters
  endpoint:
    params:
      STRADDLE_ENTRY_HOUR: '10'
      STRADDLE_ENTRY_MINUTE: '0'
      SQUAREOFF_HOUR: '15'
      SQUAREOFF_MINUTE: '15'
      MAX_STRADDLES_PER_DAY: '3'
      EXPIRY: '"19JUN25"'
      LOT_SIZE: '75'
- name: straddle_parameters
  endpoint:
    params:
      STRADDLE_ENTRY_HOUR: '10'
      STRADDLE_ENTRY_MINUTE: '0'
      SQUAREOFF_HOUR: '15'
      SQUAREOFF_MINUTE: '15'
      MAX_STRADDLES_PER_DAY: '3'
      EXPIRY: '"19JUN25"'
      LOT_SIZE: '75'
- name: placeOrder
  endpoint:
    path: /placeOrder
    method: POST
    data_selector: response
- name: placeSmartOrder
  endpoint:
    path: /placeSmartOrder
    method: POST
    data_selector: response
- name: basketOrder
  endpoint:
    path: /basketOrder
    method: POST
    data_selector: response
- name: splitOrder
  endpoint:
    path: /splitOrder
    method: POST
    data_selector: response
- name: placeOrder
  endpoint:
    path: /placeOrder
    method: POST
    data_selector: response
- name: placeSmartOrder
  endpoint:
    path: /placeSmartOrder
    method: POST
    data_selector: response
- name: basketOrder
  endpoint:
    path: /basketOrder
    method: POST
    data_selector: response
- name: splitOrder
  endpoint:
    path: /splitOrder
    method: POST
    data_selector: response
- name: modify_order
  endpoint:
    path: /modifyOrder
    method: POST
    data_selector: response
- name: cancel_order
  endpoint:
    path: /cancelOrder
    method: POST
    data_selector: response
- name: cancel_all_order
  endpoint:
    path: /cancelAllOrder
    method: POST
    data_selector: response
- name: close_position
  endpoint:
    path: /closePosition
    method: POST
    data_selector: response
- name: order_status
  endpoint:
    path: /orderStatus
    method: POST
    data_selector: response
- name: open_position
  endpoint:
    path: /openPosition
    method: POST
    data_selector: response
- name: quotes
  endpoint:
    path: /quotes
    method: POST
    data_selector: response
- name: depth
  endpoint:
    path: /depth
    method: POST
    data_selector: response
- name: history
  endpoint:
    path: /history
    method: POST
    data_selector: response
- name: intervals
  endpoint:
    path: /intervals
    method: GET
    data_selector: response
- name: symbol
  endpoint:
    path: /symbol
    method: POST
    data_selector: response
- name: funds
  endpoint:
    path: /funds
    method: GET
    data_selector: response
- name: order_book
  endpoint:
    path: /orderbook
    method: GET
    data_selector: response
- name: trade_book
  endpoint:
    path: /tradebook
    method: GET
    data_selector: response
- name: position_book
  endpoint:
    path: /positionbook
    method: GET
    data_selector: response
- name: holdings
  endpoint:
    path: /holdings
    method: GET
    data_selector: response
- name: modify_order
  endpoint:
    path: /modifyOrder
    method: POST
    data_selector: response
- name: cancel_order
  endpoint:
    path: /cancelOrder
    method: POST
    data_selector: response
- name: cancel_all_order
  endpoint:
    path: /cancelAllOrder
    method: POST
    data_selector: response
- name: close_position
  endpoint:
    path: /closePosition
    method: POST
    data_selector: response
- name: order_status
  endpoint:
    path: /orderStatus
    method: POST
    data_selector: response
- name: open_position
  endpoint:
    path: /openPosition
    method: POST
    data_selector: response
- name: quotes
  endpoint:
    path: /quotes
    method: POST
    data_selector: response
- name: depth
  endpoint:
    path: /depth
    method: POST
    data_selector: response
- name: history
  endpoint:
    path: /history
    method: POST
    data_selector: response
- name: intervals
  endpoint:
    path: /intervals
    method: GET
    data_selector: response
- name: symbol
  endpoint:
    path: /symbol
    method: POST
    data_selector: response
- name: funds
  endpoint:
    path: /funds
    method: GET
    data_selector: response
- name: order_book
  endpoint:
    path: /orderbook
    method: GET
    data_selector: response
- name: trade_book
  endpoint:
    path: /tradebook
    method: GET
    data_selector: response
- name: position_book
  endpoint:
    path: /positionbook
    method: GET
    data_selector: response
- name: holdings
  endpoint:
    path: /holdings
    method: GET
    data_selector: response
- name: Ping
  endpoint:
    path: /ping
    method: GET
    data_selector: status
    params: {}
- name: PlaceOrder
  endpoint:
    path: /placeorder
    method: POST
    data_selector: orderid
    params: {}
- name: Quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: data
    params: {}
- name: Depth
  endpoint:
    path: /depth
    method: GET
    data_selector: data
    params: {}
- name: History
  endpoint:
    path: /history
    method: GET
    data_selector: data
    params: {}
- name: Funds
  endpoint:
    path: /funds
    method: GET
    data_selector: data
    params: {}
- name: OrderBook
  endpoint:
    path: /orderbook
    method: GET
    data_selector: data
    params: {}
- name: Ping
  endpoint:
    path: /ping
    method: GET
    data_selector: status
    params: {}
- name: Quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: data
    params: {}
- name: Depth
  endpoint:
    path: /depth
    method: GET
    data_selector: data
    params: {}
- name: History
  endpoint:
    path: /history
    method: GET
    data_selector: data
    params: {}
- name: Funds
  endpoint:
    path: /funds
    method: GET
    data_selector: data
    params: {}
- name: OrderBook
  endpoint:
    path: /orderbook
    method: GET
    data_selector: data
    params: {}
- name: PlaceOrder
  endpoint:
    path: /placeorder
    method: POST
    data_selector: orderid
    params: {}
- name: ModifyOrder
  endpoint:
    path: /modifyorder
    method: POST
    data_selector: orderid
    params: {}
- name: CancelOrder
  endpoint:
    path: /cancelorder
    method: POST
    data_selector: orderid
    params: {}
- name: ClosePosition
  endpoint:
    path: /closeposition
    method: POST
    data_selector: status
    params: {}
- name: TradeBook
  endpoint:
    path: /TradeBook
    method: GET
    data_selector: data
- name: PositionBook
  endpoint:
    path: /PositionBook
    method: GET
    data_selector: data
- name: Holdings
  endpoint:
    path: /Holdings
    method: GET
    data_selector: data
- name: AnalyzerStatus
  endpoint:
    path: /AnalyzerStatus
    method: GET
    data_selector: data
- name: AnalyzerToggle
  endpoint:
    path: /AnalyzerToggle
    method: POST
    data_selector: data
- name: TradeBook
  endpoint:
    path: /TradeBook
    method: GET
    data_selector: data
- name: PositionBook
  endpoint:
    path: /PositionBook
    method: GET
    data_selector: data
- name: Holdings
  endpoint:
    path: /Holdings
    method: GET
    data_selector: data.holdings
- name: AnalyzerStatus
  endpoint:
    path: /AnalyzerStatus
    method: GET
    data_selector: data
- name: AnalyzerToggle
  endpoint:
    path: /AnalyzerToggle
    method: POST
    data_selector: data
- name: PlaceOrder
  endpoint:
    path: /placeorder
    method: POST
    data_selector: response
    params: {}
- name: PlaceSmartOrder
  endpoint:
    path: /placesmartorder
    method: POST
    data_selector: response
    params: {}
- name: ModifyOrder
  endpoint:
    path: /modifyorder
    method: POST
    data_selector: response
    params: {}
- name: CancelOrder
  endpoint:
    path: /cancelorder
    method: POST
    data_selector: response
    params: {}
- name: ClosePosition
  endpoint:
    path: /closeposition
    method: POST
    data_selector: response
    params: {}
- name: PlaceOrder
  endpoint:
    path: /placeorder
    method: POST
    data_selector: orderResponse
    params: {}
- name: PlaceSmartOrder
  endpoint:
    path: /placesmartorder
    method: POST
    data_selector: orderResponse
    params: {}
- name: ModifyOrder
  endpoint:
    path: /modifyorder
    method: POST
    data_selector: orderResponse
    params: {}
- name: CancelOrder
  endpoint:
    path: /cancelorder
    method: POST
    data_selector: orderResponse
    params: {}
- name: ClosePosition
  endpoint:
    path: /closeposition
    method: POST
    data_selector: positionResponse
    params: {}
- name: CancelAllOrders
  endpoint:
    path: /CancelAllOrders
    method: POST
    data_selector: response
    params:
      apiUrlParam: http://127.0.0.1:5000
      apiKeyParam: your_api_key
      strategyParam: Meta Strategy
- name: OpenAlgoApi
  endpoint:
    path: /OpenAlgo/OpenAlgoApi.mqh
    method: GET
    data_selector: input
    params: {}
- name: CancelAllOrders
  endpoint:
    path: /CancelAllOrders
    method: POST
    data_selector: response
    params:
      apiUrlParam: http://127.0.0.1:5000
      apiKeyParam: your_api_key
      strategyParam: Meta Strategy
- name: orders
  endpoint:
    path: /api/orders
    method: POST
    data_selector: order
    params: {}
- name: quotes
  endpoint:
    path: /api/quotes
    method: GET
    data_selector: quotes
    params: {}
- name: strategy
  endpoint:
    path: /OpenAlgo/OpenAlgoApi.mqh
    method: GET
    data_selector: records
    params: {}
- name: Order
  endpoint:
    path: /api/v1/orders
    method: POST
    data_selector: order
    params: {}
- name: funds
  endpoint:
    path: /oa_funds
    method: GET
    data_selector: table
- name: orderbook
  endpoint:
    path: /oa_orderbook
    method: GET
    data_selector: table
- name: tradebook
  endpoint:
    path: /oa_tradebook
    method: GET
    data_selector: table
- name: PlaceOrder
  endpoint:
    path: /api/v1/splitorder
    method: POST
- name: market_quotes
  endpoint:
    path: /oa_quotes
    method: GET
    data_selector: returns
    params: {}
- name: market_depth
  endpoint:
    path: /oa_depth
    method: GET
    data_selector: returns
    params: {}
- name: historical_data
  endpoint:
    path: /oa_history
    method: GET
    data_selector: returns
    params: {}
- name: place_order
  endpoint:
    path: /oa_placeorder
    method: POST
    data_selector: returns
    params: {}
- name: place_smart_order
  endpoint:
    path: /oa_placesmartorder
    method: POST
    data_selector: returns
    params: {}
- name: modify_order
  endpoint:
    path: /oa_modifyorder
    method: POST
    data_selector: returns
    params: {}
- name: cancel_order
  endpoint:
    path: /oa_cancelorder
    method: POST
    data_selector: returns
    params: {}
- name: close_all_positions
  endpoint:
    path: /oa_closeposition
    method: POST
    data_selector: returns
    params: {}
- name: get_order_status
  endpoint:
    path: /oa_orderstatus
    method: GET
    data_selector: returns
    params: {}
- name: open_position
  endpoint:
    path: /oa_openposition
    method: POST
    data_selector: returns
    params: {}
- name: sell_nifty_call_option
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
    params: {}
- name: sell_nifty_put_option
  endpoint:
    path: /api/v1/placeorder
    method: POST
    data_selector: response
    params: {}
- name: splitorder
  endpoint:
    path: /api/v1/splitorder
    method: POST
    data_selector: results
- name: strategy
  endpoint:
    path: /strategy/webhook/[WEBHOOK_ID]
    method: POST
    data_selector: signals
- name: webhook_message
  endpoint:
    path: /strategy/webhook/[YOUR_WEBHOOK_ID]
    method: POST
    data_selector: message
    params: {}
- name: strategy
  endpoint:
    path: /strategy/webhook/[WEBHOOK_ID]
    method: POST
- name: strategy
  endpoint:
    path: /strategy
    method: GET
    data_selector: strategies
- name: webhook
  endpoint:
    path: /strategy/webhook/[WEBHOOK_ID]
    method: POST
    data_selector: signals
- name: webhook
  endpoint:
    path: /strategy/webhook/[YOUR_WEBHOOK_ID]
    method: POST
    data_selector: message
    params: {}
- name: trading_alert
  endpoint:
    path: /strategy/webhook/[YOUR_WEBHOOK_ID]
    method: POST
    data_selector: message
    params: {}
- name: accounts
  endpoint:
    path: /api-documentation/v1/accounts-api
    method: GET
- name: orders
  endpoint:
    path: /api-documentation/v1/orders-api
    method: GET
- name: data
  endpoint:
    path: /api-documentation/v1/data-api
    method: GET
- name: user
  endpoint:
    path: /api/user
    method: GET
- name: trade
  endpoint:
    path: /api/trade
    method: GET
- name: auth_db
  endpoint:
    path: /auth_db
    method: GET
- name: user_db
  endpoint:
    path: /user_db
    method: GET
- name: symbol
  endpoint:
    path: /symbol
    method: GET
- name: apilog_db
  endpoint:
    path: /apilog_db
    method: GET
- name: analyzer_db
  endpoint:
    path: /analyzer_db
    method: GET
- name: settings_db
  endpoint:
    path: /settings_db
    method: GET
- name: chartink_db
  endpoint:
    path: /chartink_db
    method: GET
- name: traffic_db
  endpoint:
    path: /traffic_db
    method: GET
- name: latency_db
  endpoint:
    path: /latency_db
    method: GET
- name: strategy_db
  endpoint:
    path: /strategy_db
    method: GET
- name: token_db
  endpoint:
    path: /token_db
    method: GET
- name: broker_configuration
  endpoint:
    params:
      BROKER_API_KEY: API Key for the primary broker
      BROKER_API_SECRET: API Secret for the primary broker
      BROKER_API_KEY_MARKET: Market data API Key (for specific brokers like XTS)
      BROKER_API_SECRET_MARKET: Market data API Secret (for specific brokers like
        XTS)
      REDIRECT_URL: OAuth callback URL for broker authentication
      VALID_BROKERS: Comma-separated list of enabled broker integrations
- name: security_configuration
  endpoint:
    params:
      APP_KEY: Secret key used by Flask for session signing and other security functions.
        Must be changed for production.
      API_KEY_PEPPER: A secret random string added before hashing/encrypting sensitive
        data like API keys, passwords, and broker tokens. Must be changed for production.
- name: database_configuration
  endpoint:
    params:
      DATABASE_URL: SQLAlchemy database connection string (e.g., sqlite:///db/openalgo.db,
        postgresql://user:pass@host/db)
      DB_POOL_SIZE: Parameters controlling the SQLAlchemy connection pool
      DB_MAX_OVERFLOW: Parameters controlling the SQLAlchemy connection pool
      DB_POOL_TIMEOUT: Parameters controlling the SQLAlchemy connection pool
      DB_POOL_RECYCLE: Parameters controlling the SQLAlchemy connection pool
- name: server_configuration
  endpoint:
    params:
      FLASK_HOST_IP: IP address the Flask development server binds to (e.g., 127.0.0.1,
        0.0.0.0)
      FLASK_PORT: Port the Flask development server listens on
      FLASK_DEBUG: Enables/disables Flask debug mode
      FLASK_ENV: Sets the Flask environment (development or production)
      NGROK_ALLOW: Set to TRUE to enable ngrok tunneling in development
      HOST_SERVER: The public-facing base URL of the application
- name: rate_limiting
  endpoint:
    params:
      LOGIN_RATE_LIMIT_MIN: Rate limit for login attempts per minute
      LOGIN_RATE_LIMIT_HOUR: Rate limit for login attempts per hour
      API_RATE_LIMIT: Default rate limit for API endpoints
- name: api_behavior
  endpoint:
    params:
      SMART_ORDER_DELAY: Delay (in seconds) between legs of multi-legged orders
      SESSION_EXPIRY_TIME: Daily time (IST) when all web UI sessions expire
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /api/v1/orders
    method: GET
    data_selector: records
    params: {}
- name: Funds
  endpoint:
    path: /api-documentation/v1/accounts-api/funds
    method: GET
- name: OrderBook
  endpoint:
    path: /api-documentation/v1/accounts-api/orderbook
    method: GET
- name: TradeBook
  endpoint:
    path: /api-documentation/v1/accounts-api/tradebook
    method: GET
- name: PositionBook
  endpoint:
    path: /api-documentation/v1/accounts-api/positionbook
    method: GET
- name: Holdings
  endpoint:
    path: /api-documentation/v1/accounts-api/holdings
    method: GET
- name: BasketOrder
  endpoint:
    path: /api-documentation/v1/orders-api/basketorder
    method: POST
- name: SplitOrder
  endpoint:
    path: /api-documentation/v1/orders-api/splitorder
    method: POST
- name: OrderStatus
  endpoint:
    path: /api-documentation/v1/orders-api/orderstatus
    method: GET
- name: OpenPosition
  endpoint:
    path: /api-documentation/v1/orders-api/openposition
    method: GET
- name: Quotes
  endpoint:
    path: /api-documentation/v1/data-api/quotes
    method: GET
- name: Depth
  endpoint:
    path: /api-documentation/v1/data-api/depth
    method: GET
- name: History
  endpoint:
    path: /api-documentation/v1/data-api/history
    method: GET
- name: Intervals
  endpoint:
    path: /api-documentation/v1/data-api/intervals
    method: GET
notes:
- Community support available through Discord.
- Open Algo is constantly evolving to meet the needs of modern traders.
- 'Single Instance Support: macOS and Linux currently support only one instance at
  a time.'
- 'Feature Requests: Additional features or configurations can be suggested via the
  Open Algo GitHub repository.'
- Uses API key based authentication via get_api_key_for_tradingview()
- Manual refresh control (no auto-refresh)
- Individual symbol PnLs are combined into portfolio PnL
- Time-synchronized data using pandas DataFrame joins
- Forward-fill missing data points for continuity
- Automatic conversion to IST for timestamps
- No automatic refresh to reduce server load
- OpenAlgo is an open-source, algorithmic trading framework written in Python under
  the AGPL v3.0 license.
- Save the generated User_Key, User_ID, client_id and Encryption_Key.
- Later we will be adding the apikey in the environmental variable along with the
  redirect url.
- 'Create two separate apps: Interactive Order API and Market Data API.'
- Ensure you have installed dependencies and set up the broker configuration properly.
- Ensure that your API Secret Key is stored securely and is not shared publicly.
- Developers must register for an API key through AngelOne's developer portal, which
  serves as the authentication mechanism for API requests.
- It's essential to follow best practices for API integration, including handling
  rate limits, managing API keys securely, and ensuring robust error handling and
  logging mechanisms are in place.
- Redirect URL required only for Interactive Order API
- Some endpoints may require specific permissions to access.
- Ensure that your API Secret Key and API Token are stored securely and is not shared
  publicly.
- The REDIRECT_URL should match the one registered with your API application.
- Integrating with the Dhan API opens up new possibilities for implementing automated
  and algorithmic trading strategies.
- It provides developers and traders with a robust platform to access market opportunities
  efficiently and effectively.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Integrating Dhan SandBox with OpenAlgo means safer testing for order placement,
  cancellation, and position handling.
- To integrate Firstock with OpenAlgo, follow the steps to obtain your API key and
  secret.
- Redirect URL is 'http://127.0.0.1:5000/flattrade/callback'
- Requires setup of connected app in Fyers
- Ensure the secure management of API keys.
- Implement comprehensive error handling and logging mechanisms.
- Ensure correct OAuth2 setup with valid credentials.
- Do not share your access token with untrusted third-party platforms or individuals.
- Work in Progress
- Integrating with the Kotak API opens up new possibilities for implementing automated
  and algorithmic trading strategies.
- Pocketful follows OAuth2-based authentication using redirect URI and access tokens.
- Requires API key and secret generated from Shoonya Prism.
- These credentials will be used by OpenAlgo to authenticate, fetch session tokens,
  and access market feeds or place orders.
- Developers must register for an API key through Upstox Accounts - Developer Apps
  portal
- Ensure robust error handling and logging mechanisms are in place.
- Requires setup of connected app in Wisdom Capital
- Once submitted, wait for the apps to be approved. The API status will show as Active
  once approved.
- Requires setup of connected app in Zebu
- Zebu offers robust API services for traders and developers looking to integrate
  algorithmic trading solutions.
- Make sure to store your API credentials securely and handle them with care to prevent
  unauthorized access.
- Ensure you have Windows 10 or Higher
- Visual Studio Code (VS Code) is installed.
- Python version 3.10 or higher version installed
- Git for cloning the repository
- Ensure to set environmental variables correctly for authentication
- Set to TRUE to enable CORS support, FALSE to disable
- Set to TRUE to enable CSP, FALSE to disable
- Set to TRUE to enable CSRF protection, FALSE to disable
- 'Important: Generate new random values for both keys during setup!'
- Required to give 0.5 second to 1 second delay between multi-legged option strategies
- Single legged orders are not affected by this setting.
- CORS is only required for browser-based apps (like React/Vue UIs) calling the OpenAlgo
  API.
- By default, only requests from the same origin are allowed (http://127.0.0.1:5000).
- CSP adds a security header to prevent XSS, data injection, or loading of untrusted
  resources.
- 'The SSL: CERTIFICATE_VERIFY_FAILED error usually indicates that the SSL certificate
  presented by the server cannot be verified by the client.'
- Requires setup of connected app in OpenAlgo
- If you encounter any issues or have questions, the OpenAlgo community is a great
  resource.
- Utilize their Discord server or the documentation on OpenAlgo's website for assistance.
- This video tutorial guides you through installing OpenAlgo and Amibroker on a Windows
  Server via AWS, specifically targeting the Mumbai data center for optimal trading
  latency.
- Ensure to have the necessary permissions for the API access.
- Windows users need to execute 'pip3 install -r requirements.txt' to install dependencies.
- OAuth2 authentication requires setup in OpenAlgo.
- 'Keep Your Ngrok Auth Token Secure: Your Ngrok authentication token is the key to
  creating tunnels with your account. Keep it secure to prevent unauthorized access.'
- 'Use Strong Authentication for Exposed Services: If you’re exposing a web service
  or application, ensure it has its own strong authentication mechanism.'
- 'Monitor Tunnel Usage: Regularly review logs and monitor tunnel usage for any unexpected
  or unauthorized access.'
- 'Limit Exposure Time: Only keep tunnels open for as long as necessary. The longer
  a tunnel is open, the higher the potential security risk.'
- 'Windows users Navigate to the directory where OpenAlgo is cloned and execute: pip3
  install -r requirements.txt'
- 'IMPORTANT: Generate new random values for both keys during setup!'
- 'This is used for: 1. API key hashing 2. User password hashing 3. Broker auth token
  encryption'
- Keep Your Ngrok Auth Token Secure
- Use Strong Authentication for Exposed Services
- Monitor Tunnel Usage
- Limit Exposure Time
- 'If you’re encountering, SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED]
  certificate verify failed: unable to get local issuer certificate, is common on
  macOS when Python is unable to verify SSL certificates due to a missing or inaccessible
  certificate store.'
- To resolve this issue on macOS, you need to install the certificates for Python.
- This tutorial covers how to install openalgo in Ubuntu server without any custom
  domain configuration
- Uses Elastic Beanstalk for deployment.
- Ensure the Public IP address is enabled for your instance.
- 'Installation requires broker API credentials: API Key and API Secret.'
- Requires setup of connected app in api
- Requires setup of broker's API credentials
- 'Obtain your broker''s API credentials as per the openalgo documentation: API Key,
  API Secret'
- Prepare the Redirection URL as per your ip address and broker name
- 'Error: Broker API credentials are required'
- 'Error: Market data API credentials are required for XTS-based brokers'
- 'Application Not Starting Example scenario: Managing multiple broker deployments'
- Some objects like Contact may return nulls in deeply nested fields
- The script will interactively prompt you for Broker selection and Broker API credentials.
- The installation process will install required packages, configure Nginx, set up
  the OpenAlgo application, and create systemd service with unique name based on domain
  and broker.
- Supports deploying multiple instances on the same server
- Each deployment gets a unique service name based on domain and broker
- Installation script supports deploying multiple instances on the same server.
- Each deployment gets a unique service name.
- SSL Certificate Issues
- Application Not Starting
- Nginx Issues
- Installation Logs
- Installation script will prompt for domain name and broker selection.
- Multi-domain deployment is supported.
- Test overall Nginx configuration
- Check specific site configurations
- Installation script supports deploying multiple instances on the same server
- Clean installation recommended
- Multi-Domain Deployment supported
- Regular updates are recommended
- Regularly backup your configuration
- Monitor system resources
- Check Certbot logs
- View logs for OpenAlgo services
- Cloudflare account setup required
- SSL/TLS configuration in Cloudflare must set encryption mode to 'Full (strict)'
- Uses OpenAlgo for deployment management
- Check installation logs for troubleshooting
- Uses OAuth2 with refresh token — requires setup of connected app in OpenAlgo
- Certificates are automatically renewed by Certbot
- This guide focuses on setting up a development environment for OpenAlgo using Docker.
- 'FLASK_HOST_IP=''0.0.0.0''  # Required for Docker'
- 'WEBSOCKET_HOST=''0.0.0.0''  # Required for Docker'
- 'ZMQ_HOST=''0.0.0.0''  # Required for Docker'
- Change from 127.0.0.1 to 0.0.0.0 to allow external connections
- WebSocket server must bind to 0.0.0.0 inside Docker
- ZMQ must also bind to 0.0.0.0 for internal communication
- Change from 127.0.0.1 to 0.0.0.0 to allow external connections for Flask
- Hot reload enabled (code changes reflect immediately)
- Debug mode active
- Console logging
- Port 5000 exposed
- Volume mounting for live code updates
- Code changes will automatically reload
- Check logs for errors after changes
- SQLite database persists in ./db directory
- Can be accessed from both host and container
- Logs are printed to console
- Debug mode enables detailed error pages
- Add new packages to requirements-nginx.txt
- Rebuild container after adding dependencies
- This configuration is optimized for development. For production deployment, additional
  security measures and optimizations would be necessary.
- 'Require TLS encryption: Yes'
- 'Require SMTP Authentication: Yes'
- 'Only accept mail from specified IP addresses: Yes'
- 'Per-user rate limit: 10,000 messages/day'
- 'Per-domain rate limit: 1,000,000 messages/day'
- 'Also deliver to Gmail mailbox: Optional'
- 'Store and forward: Recommended for reliability'
- SMTP Relay requires Google Workspace Admin access and server IP registration.
- 'SMTP Server: smtp-relay.gmail.com'
- 'From Email: noreply@primarydomain.com'
- Admin may need to enable App Passwords
- 'Use Dedicated Service Account: Create: noreply@yourcompany.com, Purpose: SMTP authentication
  only, Permissions: Minimal (just send email)'
- 'Monitor Email Logs: Track successful/failed send attempts, Monitor for suspicious
  activity, Set up alerts for authentication failures'
- App Password is 16 characters without spaces and generated specifically for 'Mail'
- Account must have 2FA enabled
- 'Use Dedicated Service Account: noreply@yourcompany.com, Purpose: SMTP authentication
  only, Permissions: Minimal (just send email)'
- 'Monitor Email Logs: Track successful/failed send attempts, Monitor for suspicious
  activity'
- Select the verification method as Authenticator App (TOTP)
- Enter the 6 digit TOTP from your Authenticator App
- TOTP authentication works offline and has no external dependencies.
- SMTP configuration must be completed for email verification.
- TOTP is automatically configured during account creation. Each user gets a unique
  TOTP secret key, QR code for easy setup, and backup secret for manual entry.
- SMTP configuration must be completed for Email Reset.
- Email tokens expire with session
- All reset tokens are invalidated after successful use
- TOTP is automatically configured during account creation. Each user gets a unique
  TOTP secret key and a QR code for easy setup.
- TOTP is automatically configured during account creation.
- 'Save TOTP Secret Key: Store authenticator backup codes securely'
- 'Configure SMTP Early: Set up email recovery before you need it'
- 'Document Credentials: Keep encrypted record of important settings'
- 'Regular Backups: Schedule automatic database backups'
- 'Test Recovery: Periodically test password reset functionality'
- Always configure TOTP as primary recovery method
- Save TOTP secret key securely
- Use secure email provider with 2FA
- Follow password requirements strictly
- Ensure all installed dependencies are compatible with the new version
- Backup your database before making any changes
- Update your .env files from .sample.env as some of the newer updates often have
  new environmental variables which are vital for OpenAlgo to function
- OpenAlgo requires setup of connected app for authentication
- Update your .env files with the required API keys and secrets as per the OpenAlgo
  broker documentation.
- When updating OpenAlgo, compare this version with your .env file
- You’ll need to get and register a static IP even on cloud platforms. This is a mandatory
  part of the new compliance rules.
- You can update your registered IP, but only once a week at the Broker API Developer
  portal.
- Yes, you can register both a primary and a backup IP per app.
- If your app only receives data and doesn’t place or modify orders, you don’t need
  to register a static IP.
- Yes, as long as the country is not on the restricted list.
- If you're managing trades on behalf of others, you need to be officially registered
  as a vendor or research analyst.
- If your strategy consistently places over 10 orders per second, you may need to
  go through the formal registration process with the broker.
- You can use the same IP across different brokers.
- Documentation may change frequently; please refer to the latest version for accurate
  information.
- 'Latency isn''t everything: For MFT or LFT strategies, focus on building reliable,
  consistent systems. Latency only becomes critical for HFT or scalping/arbitrage
  strategies.'
- 'Server location matters: Hosting servers close to the exchange (e.g., Vultr Mumbai
  for Indian markets) can significantly reduce latency.'
- 'Ngrok is not for latency sensitive strategy: While ngrok is great for development
  and testing, it’s not ideal for live trading systems that require low latency. If
  you are using NGROK for connecting your tradingview/chartink aware about the 500-800
  ms of latency it could create if you are running in your local desktop.'
- 'Plan for growth: Investing in scalable infrastructure ensures your system can handle
  increased complexity or volume as you evolve.'
- You’ll need to get and register a static IP even on cloud platforms.
- You can register both a primary and a backup IP per app.
- You can host from India, US, Europe or other approved regions.
- You can use the same IP across different brokers. But if you’re managing multiple
  accounts with the same broker, each one may require its own registered IP.
- 'Latency isn’t everything: For MFT or LFT strategies, focus on building reliable,
  consistent systems. Latency only becomes critical for HFT or scalping/arbitrage
  strategies.'
- All WebSocket sessions must begin with API key authentication.
- Depth Mode supports optional parameter `depth_level` to define the number of depth
  levels requested.
- Clients must respond with `pong` or will be disconnected.
- Upon reconnection, clients must re-authenticate and re-subscribe to streams.
- Proxy may automatically restore prior subscriptions if supported by broker.
- WebSocket sessions must begin with API key authentication
- All clients must authenticate with an API key.
- Rate limits may apply to prevent abuse.
- TLS encryption recommended for production deployments.
- To protect OpenAlgo from abuse and ensure fair usage, rate limits are enforced at
  both login and API levels.
- These limits help prevent brute-force login attempts and secure user accounts.
- Rate limits are enforced at both login and API levels.
- Rate limits can be adjusted via the .env file.
- Rate limits are applied per IP address using get_remote_address as the key function.
- The OpenAlgo API Collections are a comprehensive set of tools designed to streamline
  your journey into algorithmic trading.
- 'OpenAlgo applies two login-specific rate limits: 5 per minute for login attempts
  and 25 per hour.'
- Order Management APIs have a rate limit of 10 per second.
- Smart Order API has a rate limit of 2 per second.
- General APIs have a rate limit of 50 per second.
- Webhook APIs have a rate limit of 100 per minute.
- Strategy Management APIs have a rate limit of 200 per minute.
- OpenAlgo standardizes financial instrument identification via a common symbol format
  across all exchanges and brokers.
- AmiBroker is a popular software among traders for its advanced technical analysis
  and algorithmic trading capabilities.
- OpenAlgo and OpenAlgo API Key required
- Some brokers like Kotak do not support intraday/historical data API
- Make sure that Charts are loaded properly.
- Make sure to login to openalgo every day to fetch the live intraday/EOD quotes
- Uses OAuth2
- Amibroker 6.0 or higher required
- Amiquotes 4.10 or higher required
- Kotak not supporting intraday/historical data API
- Uses API key for authentication.
- This AFL works only on AmiBroker 6.35 or higher.
- Voice Alert can be enabled to receive auditory notifications for actions.
- Uses api_key for authentication
- The bridge URL is constructed using host and version
- Requires API key for authentication.
- This module integrates manual button-based trading into an algorithmic workflow.
- Includes features for option buyers and sellers.
- The system dynamically calculates the ATM, ITM, and OTM strikes based on live market
  data.
- Includes a 'Close All' button that closes all open positions for all option legs.
- API Key is required for authentication.
- Voice alerts are available for order status.
- Requires OpenAlgo API Key for authentication.
- Requires setup of OpenAlgo API Key
- API requires an API key for authentication.
- Module supports multiple entry, targets, stoploss levels.
- Prevents placing multiple orders at the same signal.
- Module supports multiple entry, targets, stoploss levels can be drawn and converted
  into orders.
- Module prevents placing multiple orders at the same signal.
- Supports Intraday and Positional Trades.
- OpenAlgo Downloaded and Configured
- OpenAlgo Supported Broker
- Amibroker 6.0 or Higher
- Realtime Datafeed Subscription
- Ensure that symbol string manipulation is done according to the data vendor symbol
  format to match the brokers equity market symbols.
- Avoid using the code for running positional strategies
- Ensure that symbol string manipulation is done according to the data vendor symbol
  format
- Ensure CSV file is placed in the specified path
- Ensure Symbol mapping is done in the CSV properly
- Requires an API key for authentication.
- Ensure the host is correctly set to connect to the API.
- Send orders even if Amibroker is minimized or Chart is not active
- Constructs JSON string for the POST message
- Handles API requests and responses
- Requires enabled API key for authentication
- Supports 9 types of two-legged options trading strategies.
- Requires configuration of necessary parameters for execution.
- Rate limiting applies to all API endpoints.
- Requires API Key for authentication.
- This module is designed for advanced TradingView users, particularly those interested
  in automating options trading based on futures signals.
- ChartInk Paid Account (Supports Webhook Features to send Alerts to OpenAlgo)
- Ngrok with Custom Domain Configuration (Provides Webhooks to Chartink/Tradingview)
  if hosted locally in Laptop/Desktop.
- Configure the .env file with Custom Domain (you cannot run Chartink by default with
  localhost or 127.0.0.1:5000)
- Ensure to replace placeholders with actual values.
- Only supports NSE and BSE exchanges
- Alert name must contain valid action keyword
- 'Plug-and-Play Strategy Development: Insert your own logic into Block 3 to test
  strategies like Moving Average Crossovers, RSI signals, or ML-driven logic.'
- 'Backtest Ready: Instantly simulate performance with adjustable historical timeframes.'
- 'Options Execution: Automatically converts directional futures signals into options
  trades with customizable offsets.'
- 'Risk Management: Activate dynamic SL/TP configurations for robust risk control.'
- 'API Alerts: Sends alert messages structured for API consumption—ideal for auto-execution
  platforms.'
- First, import the `api` class from the OpenAlgo library and initialize it with your
  API key.
- Intraday square-off is all-or-nothing
- No partial position closures
- No modification of existing orders
- Market orders only
- API supports various trading platforms
- Specify the host URL with your hosted domain or ngrok domain.
- Uses API key for authentication
- Make Sure that your OpenAlgo Application is running.
- Login to OpenAlgo Application with valid credentials and get the OpenAlgo apikey.
- OpenAlgo Python SDK enables powerful financial data visualization through professional-grade
  charts and heatmaps.
- Keep the webhook ID private, as it is sensitive information similar to API keys.
- DataFrame must contain a 'close' column for EMA calculations.
- API key is required from OpenAlgo portal.
- Test Strategy – Purpose-built for functional validation of data flow, signal generation,
  order placement, and WebSocket-based exits.
- Uses configurable EMA strategy with parameters for trading
- No API integration details provided
- 'Dynamic date range: 7 days back to today'
- Uses adjustable parameters for trading strategy
- Configurable lookback period for historical data
- Get API key from openalgo portal
- API Key required for authentication
- API Key is required to access the API.
- All times in IST (Asia/Kolkata timezone)
- No database or persistent logs — actions are printed to the console for full transparency
- Uses OAuth2 with refresh token — requires setup of connected app in option trading
  API
- Straddle entry limit reached for today.
- EOD exit triggered.
- This sample does not use persistent order logging or database.
- No explicit risk management or stop loss (can be added if desired).
- Only supports one instrument/expiry at a time.
- Ensure your OpenAlgo symbol format and expiry match your broker’s contract details.
- This is an experimental feature using OpenAlgo & Groq (Whisper Large V3 Model).
- The system automatically extracts the action, quantity, and symbol from the voice
  command and then places the order.
- 'Supported Activation Commands: MILO, MYLO'
- 'Exchanges Supported: NSE, BSE'
- 'Product Types: MIS (Margin Intraday Square off), CNC (Cash and Carry for equity)'
- Ensure proper error handling and API rate limiting as per the service provider's
  specifications.
- Requires setup of API key for authentication
- .NET 6 Desktop Runtime is Required for the add-in to function properly
- Test in OpenAlgo Analyzer Mode before using in live markets.
- .NET 6 Desktop Runtime is Required
- Keep API key confidential
- Use secure, unique API keys
- Regularly rotate credentials
- Monitor trading activities
- Ensure the correct symbol for the NIFTY call option with the desired expiry and
  strike price.
- Double-check the API key in the HTTP Request nodes.
- API Key is required to authenticate API requests.
- Ensure the OpenAlgo server is running
- Double-check Host URL and API Key
- n8n uses UTC time by default; must set timezone to Asia/Kolkata for IST.
- Ensure the API key is correctly placed in the HTTP Request nodes.
- Module processes webhook signals from trading platforms.
- Use the exact symbol as configured in your strategy
- Symbols are case-sensitive
- Must match with the configured exchange
- Required only for 'BOTH' trading mode
- Must be included in every webhook message for 'BOTH' mode
- Represents the desired position size
- The module processes webhook signals from trading platforms.
- 'Webhook signals include keywords: BUY, SELL, SHORT, COVER'
- Symbol format must match the configured exchange and is case-sensitive.
- Position size is required only for BOTH trading mode.
- Uses secure webhook URLs for trading signals
- 'Must be uppercase: ''BUY'' or ''SELL'''
- Action interpretation depends on trading mode
- OpenAlgo employs a Monolithic Application Architecture with a RESTful API interface.
- Utilizes the Flask microframework for web application structure and request handling.
- Common mechanisms include API Key & Secret, Request Token / Access Token Flow, Session
  Cookies, TOTP, and User Credentials.
- Uses Flask-RESTX for building structured REST APIs with Swagger documentation.
- Adapters manage API client instances or HTTP sessions.
- Error handling within adapters translates broker-specific errors (e.g., insufficient
  funds, invalid symbol, connection issues) into standardized exceptions or error
  responses for OpenAlgo's core logic.
- Session expiry and re-authentication logic (using refresh tokens if applicable)
  should be handled within the adapter or the Broker Interface layer.
- The API layer is the primary interface for interacting with the OpenAlgo platform.
- OpenAlgo utilizes SQLAlchemy as its primary ORM.
- Connection pooling is utilized to improve performance.
- FK denotes Foreign Key.
- Authentication methods vary significantly between brokers.
- Common mechanisms include API Key & Secret, OAuth2 variants, Session Cookies, TOTP,
  and User Credentials.
- Flask-SQLAlchemy integrates SQLAlchemy with Flask.
- API Key Authentication allows programmatic access to the OpenAlgo API by external
  applications or scripts.
- Strong hashing (Argon2) is used for user passwords.
- Keys are hashed for verification and encrypted at rest. A pepper is used.
- Flask sessions are signed with app.secret_key. Ensure this key is strong and kept
  secret.
- Applied to login and password reset endpoints via Flask-Limiter to mitigate brute-force
  attacks.
- Uses environment variables as the primary method for configuration.
- Must change APP_KEY and API_KEY_PEPPER for production.
- Encapsulating these utilities promotes code reuse and separation of concerns.
- OpenAlgo does not support order type conversion (e.g., Limit → Market).
- Ensure successful login redirects to dashboard or access token endpoint.
- Ensure secure use of .env for API keys.
- Avoid exceeding rate limits while integrating broker API
- No database migration required in this release.
- WebSocket users (Groww, Definedge, Shoonya, Firstock, Flattrade, Zebu) must test
  subscription logic.
- Updated documentation for local MCP setup
- Revised installation instructions pointing to official docs
- 'Rate Limiting Configuration: LOGIN_RATE_LIMIT_MIN=5 per minute, LOGIN_RATE_LIMIT_HOUR=25
  per hour, RESET_RATE_LIMIT=15 per hour'
- 'Rate limiting configuration: LOGIN_RATE_LIMIT_MIN=5 per minute, LOGIN_RATE_LIMIT_HOUR=25
  per hour, RESET_RATE_LIMIT=15 per hour'
- 'Environment version: ENV_CONFIG_VERSION=1.0.3'
- Rate limits apply for API calls
- Authentication updated to support key and secret-based login
- New Environment Variables require configuration in .env file
- Database migration required for SMTP functionality
- Environment file updates needed for rate limiting
- Profile page changes may affect custom styling
- Password reset flow completely redesigned
- WebSocket compatibility fixes for Docker
- Removed packaging of local states and secrets (.env, db/, log/, etc.)
- Authentication updated to support key and secret-based login.
- Central Logging has been implemented as a major enhancement in OpenAlgo.
- Updated documentation to reflect the new centralized logging system.
- Introduced robust WebSocket support for real-time market data streaming.
- Implemented multi-stage builds for Docker, significantly reducing the final Docker
  image size.
- Rolled out and fixed shared connection pooling for Data APIs, Order APIs, Authentication,
  Funds, and Master Contract services across applicable brokers, improving performance
  and resource management.
- Integrated SQLiteDB for storing IST (Indian Standard Time) data.
- Websockets Dynamic broker selection Update.
- Authentication flow Fixed.
- Minor Fixes
- Updated Requirements.txt file to support python 3.13
- Connection Pooling Enabled (AngelOne, PayTM and XTS Supported Brokers)
- Python 3.13 Compatibility Achieved (Updated Dependencies)
- Common Symbol Format Now Implemented For various brokers.
- Kotak doesn't support Historical API
- Auth token Generation is not required
- Kotak doesnt support Historical API
- Consumer Key and Consumer Secret is more than enough. Auth token Generation is not
  required
- Data API Implemented for multiple brokers including 5paisa, Angel, Upstox, Fyers.
- Updated readme file with stat badges
- Data API Implemented for 5paisa , Angel, Upstox, Fyers, Firstock, Flatrade, Dhan,
  ICICI Direct, shoonya, Zebu
- Dashboard Error Fix if the user changes the apikey and api secret to handle the
  invalid login gracefully.
- Currently supports only fyers as part of pilot implementation and other brokers
  soon it will get implemented
- TOTP setup is optional but recommended for account security.
- Analyze mode is for testing only, not paper trading.
- Currently supports only fyers as part of pilot implementation.
- Garden theme indicates analyze mode operation.
- Docker support for development to streamline environment setup
- Enhanced search functionality with advanced features
- Added Robust Session Expiry Handling
- Detect Broker Configuration at Login
- Error Handling in improper Redirect URL
- Werkzeug library upgrade to 3.1.2 - Security upgrade
- token.html Enhanced UI and UX
- Profile icon Sub Menu issue Fix
- kotak bug fix in holdings display issue and PNL Calculation
- Docker support for development environment setup
- 'Minor UI changes: Removed broker logo/images to ensure OpenAlgo remains fully broker-independent
  and neutral.'
- Customizable settings for API key, exchange, product type, and host URL.
- Added a 0.5 second delay configuration for placing multi-legged smart orders to
  accommodate API rate limiting by brokers.
- 'Smart Order Delay Configuration: Added a 0.5 second delay configuration for placing
  multi-legged smart orders to accommodate API rate limiting by brokers.'
errors:
- 'Missing historical data: Shows flat PnL line at current value'
- 'Invalid timestamps: Falls back to default time range'
- 'No data in TradeBook: Normal when no trades executed'
- 'Timestamps showing wrong time: Automatic IST conversion handles this'
- 'Zero values displayed: Verify API key is configured'
- '403 Forbidden: Check your permissions or authentication.'
- '404 Not Found: Verify the endpoint path.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check access token.'
- '403 Forbidden: Insufficient permissions.'
- '404 Not Found: Resource does not exist.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Verify client credentials and access token'
- '404 Not Found: Check endpoint paths'
- '401 Unauthorized: Recheck API key or secret'
- '401 Unauthorized: Check your API key or token.'
- '401 Unauthorized: Check your credentials and permissions.'
- '403 Forbidden: Access denied error.'
- '404 Not Found: Verify the endpoint URL.'
- 'SERVICE_NOT_RUNNING: Ensure the service is started.'
- 'CONFIGURATION_ERROR: Check Nginx configuration.'
- Mail relay denied
- Authentication failed
- 'Mail relay denied: Check your current IP and add this IP to Google Admin Console'
- 'Authentication failed: Must check App Password and ensure account is not suspended'
- Mail relay denied → Check IP registration in Admin Console
- Authentication failed → Verify App Password
- Connection timeout → Check firewall/network settings
- 'SMTP Authentication failed: Use App Password instead of regular password'
- 'Mail relay denied: Register server IP in Google Admin Console'
- 'Connection timeout: Check Firewall blocking SMTP ports'
- 'SSL handshake failed: Verify port configuration'
- 'Connection timeout: Firewall blocking SMTP ports'
- 'Invalid email format: Ensure the email follows standard format rules.'
- 'Invalid Email Format: Check client-side and server-side validation.'
- 'SMTP Authentication failed: Solution: Use App Password instead of regular password'
- 'Mail relay denied: Solution 1: Register server IP in Google Admin Console'
- 'Connection timeout: Check: Firewall blocking SMTP ports (587, 465)'
- 'Invalid TOTP Code: Check: Time synchronization on device'
- 'Email Not Received: Check: Spam/junk folder'
- '401 Unauthorized: Recheck API key or token expiration'
- 'UNSUPPORTED_DEPTH_LEVEL: Depth level requested is not supported by the broker.'
- 'UNSUPPORTED_DEPTH_LEVEL: Depth level requested is not supported by broker'
- '400: Bad request. The request is invalid or certain other errors'
- '401: Authorization error. User could not be authenticated'
- '403: Permission error. User does not have the necessary permissions'
- '429: Rate limit exceeded. Users have been blocked for exceeding the rate limit.'
- '500: Internal server error.'
- 'LOGIN_RATE_LIMIT_MIN: 5 per minute'
- 'LOGIN_RATE_LIMIT_HOUR: 25 per hour'
- '429 Too Many Requests: Exceeded configured rate limit.'
- 'Rate limit exceeded: Check your request frequency'
- 'Webhook failures: Verify webhook rate limits are appropriate for your platform'
- 'Strategy operation failures: Ensure strategy operations are not happening too rapidly'
- Rate limits apply globally per IP address.
- '429 Too Many Requests: The server will respond with this status if a client exceeds
  any configured rate limit.'
- 'Invalid API Key: Ensure the API key is correct.'
- 'Order Limit Exceeded: Reduce the number of simultaneous orders.'
- 'Order Request Failed: Check API Key and parameters'
- 'Order Status Check Failed: Verify Order ID'
- Failed to execute InternetPostRequest
- Failed to place order.
- Invalid webhook IDs
- Missing action keywords in alert names
- Inactive strategies
- Outside trading hours
- Symbol mismatches
- Order placement failures
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify your API key.'
- '400 Bad Request: Check the request parameters'
- '404 Not Found: The requested resource does not exist'
- 'KeyError: Missing ''close'' column in DataFrame'
- 'KeyError: Missing columns in DataFrame'
- '401 Unauthorized: Check your API key.'
- '400 Bad Request: Check request format and parameters'
- '401 Unauthorized: Verify API key'
- '404 Not Found: Endpoint does not exist'
- '401 Unauthorized: Check API key validity'
- '400 Bad Request: Ensure all required fields are included in the request'
- 'API Key Invalid: Verify key in OpenAlgo dashboard'
- 'Host URL Incorrect: Confirm exact URL from OpenAlgo platform'
- 'Permissions: Accept Google Sheets script permissions'
- Max 10 orders per second for regular orders.
- 1 order per second for smart orders.
- 'Request failed with status {response.status_code}: {response.text}'
- Request timed out
- Connection failed
- Invalid JSON response
- 'Unexpected error: {str(e)}'
- Max 10 orders per second for regular orders
- 1 order per second for smart orders
- 'WebhookError: If the request fails or returns non-200 status'
- 'REQUEST_LIMIT_EXCEEDED: Max 10 orders per second for regular orders'
- 'REQUEST_LIMIT_EXCEEDED: 1 order per second for smart orders'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'Cross-device WebSocket Handling: Significant update in Fyers, Flattrade, Shoonya
  and Dhan WebSocket systems may affect custom setups'
- 'Zerodha Subscribe All: Behavior updated for stability'
- '100 req/min: blocks external DoS attacks'
- '200 req/min: prevents system flooding'
- '10 req/sec: stable order management'
- '2 req/sec: complex strategy protection'
- '50 req/sec: 5x performance boost'
- Dashboard Error Fix if the user changes the apikey and api secret to handle the
  invalid login gracefully.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - APP_KEY
  - API_KEY_PEPPER
  - apikey
  - strategy
  - symbol
  - exchange
  - pricetype
  - product
  - ApiKeys
client:
  base_url: https://openalgo.in
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
