resources:
- name: heal_missing_user_snapshots
  endpoint:
    path: /api-reference/heal-missing-user-snapshots
    method: GET
- name: get_asset_details
  endpoint:
    path: /api-reference/get-asset-details
    method: GET
- name: list_collection_assets
  endpoint:
    path: /api-reference/list-collection-assets
    method: GET
- name: get_users_recent_assets
  endpoint:
    path: /api-reference/get-users-recent-assets
    method: GET
- name: csv_upload
  endpoint:
    path: /upload/csv
    method: POST
    data_selector: data
    params: {}
- name: multi_tab_xls
  endpoint:
    path: /upload/xls
    method: POST
    data_selector: data
    params: {}
- name: Get User's Recent Assets
  endpoint:
    path: /api-reference/get-users-recent-assets
    method: GET
- name: List Collection Assets
  endpoint:
    path: /api-reference/list-collection-assets
    method: GET
- name: Upload User Feedback Diagnostics
  endpoint:
    path: /api-reference/upload-user-feedback-diagnostics
    method: POST
- name: Get User's Recent Assets
  endpoint:
    path: /api-reference/get-users-recent-assets
    method: GET
- name: List Collection Assets
  endpoint:
    path: /api-reference/list-collection-assets
    method: GET
- name: Upload User Feedback Diagnostics
  endpoint:
    path: /api-reference/upload-user-feedback-diagnostics
    method: POST
- name: heal_missing_user_snapshots
  endpoint:
    path: /controlplane.CronHealMissingUserSnapshots
    method: GET
- name: heal_missing_user_snapshots
  endpoint:
    path: /controlplane.CronHealMissingUserSnapshots
    method: GET
    data_selector: default
- name: heal_missing_user_snapshots
  endpoint:
    path: /ops/heal-missing-user-snapshots
    method: GET
    data_selector: data
    params: {}
- name: heal_missing_user_snapshots
  endpoint:
    path: /ops/heal-missing-user-snapshots
    method: GET
    data_selector: data
    params: {}
- name: health_check
  endpoint:
    path: /status
    method: GET
    data_selector: data
    params: {}
- name: health_check
  endpoint:
    path: /status
    method: GET
    data_selector: data
- name: generate_placeholder_ids
  endpoint:
    path: /v1/_/gen/ids_validate
    method: POST
    data_selector: ''
    params: {}
- name: server_envelope
  endpoint:
    path: /v1/_/gen/server_envelope
    method: GET
    data_selector: data
    params: {}
- name: generate_placeholder_ids
  endpoint:
    path: /v1/_/gen/ids_validate
    method: POST
    data_selector: default
- name: server_envelope
  endpoint:
    path: /v1/_/gen/server_envelope
    method: GET
    data_selector: data
    params: {}
- name: threads
  endpoint:
    path: /v1/_/gen/threads
    method: GET
    data_selector: knowledgeChangeV1
    params: {}
- name: Update Asset Processing State
  endpoint:
    path: /api-reference/update-asset-processing-state
    method: POST
- name: heal_missing_user_snapshots
  endpoint:
    path: /api-reference/heal-missing-user-snapshots
    method: GET
- name: repair_missing_user_data
  endpoint:
    path: /api-reference/repair-missing-user-data
    method: GET
- name: health_check
  endpoint:
    path: /api-reference/health-check
    method: GET
- name: get_asset_details
  endpoint:
    path: /api-reference/get-asset-details
    method: GET
- name: view_collection_details
  endpoint:
    path: /api-reference/view-collection-details
    method: GET
- name: asset_status
  endpoint:
    path: /v1/asset-status/{assetId}
    method: POST
    data_selector: data
    params: {}
- name: update_asset_properties
  endpoint:
    path: /v1/asset/{assetID}/attributes
    method: POST
    data_selector: data
    params: {}
- name: knowledgeChangeV1
  endpoint:
    path: /v1/_/gen/threads
    method: GET
    data_selector: knowledgeChangeV1
    params: {}
- name: promptCampaignV1
  endpoint:
    path: /v1/_/gen/threads
    method: GET
    data_selector: promptCampaignV1
    params: {}
- name: promptCampaignV2
  endpoint:
    path: /v1/_/gen/threads
    method: GET
    data_selector: promptCampaignV2
    params: {}
- name: promptV1
  endpoint:
    path: /v1/_/gen/threads
    method: GET
    data_selector: promptV1
    params: {}
- name: promptV2
  endpoint:
    path: /v1/_/gen/threads
    method: GET
    data_selector: promptV2
    params: {}
- name: renameThreadV1
  endpoint:
    path: /v1/_/gen/threads
    method: GET
    data_selector: renameThreadV1
    params: {}
- name: textV1
  endpoint:
    path: /v1/_/gen/threads
    method: GET
    data_selector: textV1
    params: {}
- name: initialize_new_asset_upload
  endpoint:
    path: /v1/assets
    method: POST
    data_selector: data
    params: {}
- name: Update Asset Processing State
  endpoint:
    path: /api-reference/update-asset-processing-state
    method: POST
- name: Heal Missing User Snapshots
  endpoint:
    path: /api-reference/heal-missing-user-snapshots
    method: GET
- name: Repair Missing User Data
  endpoint:
    path: /api-reference/repair-missing-user-data
    method: GET
- name: Health Check
  endpoint:
    path: /api-reference/health-check
    method: GET
- name: Generate Placeholder IDs
  endpoint:
    path: /api-reference/generate-placeholder-ids
    method: POST
- name: Get Asset Details
  endpoint:
    path: /api-reference/get-asset-details
    method: GET
- name: register_uploaded_asset
  endpoint:
    path: /v1/assets/notifyUploaded
    method: POST
    data_selector: data
    params: {}
- name: asset_status
  endpoint:
    path: /v1/asset-status/{assetId}
    method: POST
    data_selector: data
    params: {}
- name: update_asset_properties
  endpoint:
    path: /v1/asset/{assetID}/attributes
    method: POST
    data_selector: data
    params: {}
- name: search_assets
  endpoint:
    path: /v1/assets/search
    method: POST
    data_selector: data.entities
    params: {}
- name: initialize_new_asset_upload
  endpoint:
    path: /v1/assets
    method: POST
    data_selector: data
    params: {}
- name: delete_assets_recoverable
  endpoint:
    path: /v1/assets/tombstone
    method: DELETE
    data_selector: data
    params:
      assetIds: []
- name: get_asset_details
  endpoint:
    path: /v1/assets/{assetID}
    method: GET
    data_selector: data
- name: register_uploaded_asset
  endpoint:
    path: /v1/assets/notifyUploaded
    method: POST
    data_selector: data
    params: {}
- name: redeem_access_token
  endpoint:
    path: /v1/claim-token/{token}
    method: GET
- name: search_assets
  endpoint:
    path: /v1/assets/search
    method: POST
    data_selector: data.result.entities
    params: {}
- name: collection_access
  endpoint:
    path: /v1/collection-access/{collectionID}
    method: GET
    data_selector: data.records
    params:
      limit: '100'
      offset: '0'
      sort: ''
- name: Delete Assets (Recoverable)
  endpoint:
    path: /v1/assets/tombstone
    method: DELETE
    data_selector: data
    params:
      assetIds: string[]
- name: delete_invitation_token
  endpoint:
    path: /v1/collection-token/{token}
    method: DELETE
    data_selector: default
    params: {}
- name: get_asset_details
  endpoint:
    path: /v1/assets/{assetID}
    method: GET
    data_selector: data
- name: list_collection_assets
  endpoint:
    path: /v1/collection/{collectionID}/assets
    method: GET
    data_selector: data.entities
    params:
      limit: '1'
      offset: '0'
- name: redeem_access_token
  endpoint:
    path: /v1/claim-token/{token}
    method: GET
- name: update_collection_properties
  endpoint:
    path: /v1/collection/{collectionID}/attributes
    method: POST
    data_selector: data
    params: {}
- name: list_collection_members_and_pending_invites
  endpoint:
    path: /v1/collection-access/{collectionID}
    method: GET
    data_selector: records
    params:
      limit: '100'
      offset: '0'
      sort: ''
- name: move_collection_and_descendants
  endpoint:
    path: /v1/collection/{collectionID}/move
    method: POST
    data_selector: data
    params: {}
- name: delete_invitation_token
  endpoint:
    path: /v1/collection-token/{token}
    method: DELETE
    data_selector: data
    params: {}
- name: list_collection_threads
  endpoint:
    path: /v1/collection/{collectionID}/threads
    method: GET
    data_selector: data.entities
    params:
      limit: integer
      offset: integer
      sort: string[]
- name: add_new_collection
  endpoint:
    path: /v1/collection/{parentCollectionID}
    method: POST
    data_selector: data
    params: {}
- name: list_collection_assets
  endpoint:
    path: /v1/collection/{collectionID}/assets
    method: GET
    data_selector: data.result.entities
    params:
      limit: integer
      offset: integer
      sort: string[]
- name: permanently_delete_collections
  endpoint:
    path: /v1/collections
    method: DELETE
    data_selector: data
    params:
      collectionIds: []
      permanent: true
- name: update_collection_properties
  endpoint:
    path: /v1/collection/{collectionID}/attributes
    method: POST
    data_selector: data
    params: {}
- name: view_collection_details
  endpoint:
    path: /v1/collections/{collectionID}
    method: GET
    data_selector: data
    params: {}
- name: move_collection_and_descendants
  endpoint:
    path: /v1/collection/{collectionID}/move
    method: POST
    data_selector: data
    params: {}
- name: link_assets_to_collection
  endpoint:
    path: /v1/collections/{collectionID}/assets
    method: POST
    data_selector: code
    params: {}
- name: List Collection Threads
  endpoint:
    path: /v1/collection/{collectionID}/threads
    method: GET
    data_selector: data.entities
    params:
      limit: required
      offset: required
      sort: required
- name: link_threads_to_collection
  endpoint:
    path: /v1/collections/{collectionID}/threads
    method: POST
    data_selector: data
    params: {}
- name: add_new_collection
  endpoint:
    path: /v1/collection/{parentCollectionID}
    method: POST
    data_selector: data
    params: {}
- name: create_device_identifier
  endpoint:
    path: /v1/device/generate-id
    method: POST
    data_selector: id
- name: generate_admin_diagnostic_url
  endpoint:
    path: /v1/diagnostics/message/{organizationID}/{threadID}/{messageID}/signed-url
    method: GET
    data_selector: data
    params: {}
- name: permanently_delete_collections
  endpoint:
    path: /v1/collections
    method: DELETE
- name: view_collection_details
  endpoint:
    path: /v1/collections/{collectionID}
    method: GET
    data_selector: data
    params: {}
- name: upload_user_feedback_diagnostics
  endpoint:
    path: /v1/diagnostics/save
    method: POST
    data_selector: data
- name: update_collection_access_rights
  endpoint:
    path: /v1/modify-collection-permissions
    method: POST
    data_selector: data
    params: {}
- name: link_assets_to_collection
  endpoint:
    path: /v1/collections/{collectionID}/assets
    method: POST
    data_selector: data
    params: {}
- name: users_recent_assets
  endpoint:
    path: /v1/navigate/recent/assets
    method: GET
    data_selector: data
- name: link_threads_to_collection
  endpoint:
    path: /v1/collections/{collectionID}/threads
    method: POST
    data_selector: data
    params: {}
- name: recent_threads
  endpoint:
    path: /v1/navigate/recent/threads
    method: GET
    data_selector: data.result.entities
    params:
      limit: required
      offset: required
      sort: required
- name: create_new_device_identifier
  endpoint:
    path: /v1/device/generate-id
    method: POST
    data_selector: id
- name: generate_admin_diagnostic_url
  endpoint:
    path: /v1/diagnostics/message/{organizationID}/{threadID}/{messageID}/signed-url
    method: GET
    data_selector: details
- name: enhance_prompt
  endpoint:
    path: /v1/prompt/enhance
    method: POST
    data_selector: data.prompt_enhanced.content
- name: upload_user_feedback_diagnostics
  endpoint:
    path: /v1/diagnostics/save
    method: POST
    data_selector: data
    params: {}
- name: share_collection
  endpoint:
    path: /v1/share-collections
    method: POST
    data_selector: data
    params: {}
- name: update_collection_access_rights
  endpoint:
    path: /v1/modify-collection-permissions
    method: POST
    data_selector: data
    params: {}
- name: create_organization_thread
  endpoint:
    path: /v1/threads
    method: POST
    data_selector: data
    params: {}
- name: user_recent_assets
  endpoint:
    path: /v1/navigate/recent/assets
    method: GET
    data_selector: data
    params:
      page: integer
      sort: string
- name: delete_threads
  endpoint:
    path: /v1/threads/tombstone
    method: DELETE
    data_selector: data
    params:
      threadIds: []
- name: list_user_recent_threads
  endpoint:
    path: /v1/navigate/recent/threads
    method: GET
    data_selector: data.result.entities
    params:
      limit: '1'
      offset: '1'
      sort: <string>
- name: get_thread_details
  endpoint:
    path: /v1/threads/{threadID}
    method: GET
    data_selector: data
    params:
      publicAccessToken: string
- name: enhance_prompt
  endpoint:
    path: /v1/prompt/enhance
    method: POST
    data_selector: data.prompt_enhanced.content
- name: update_thread_properties
  endpoint:
    path: /v1/threads/{threadID}/attributes
    method: POST
    data_selector: data
    params: {}
- name: share_collection
  endpoint:
    path: /v1/share-collections
    method: POST
    data_selector: data
    params: {}
- name: process_thread_message
  endpoint:
    path: /v1/threads/{threadID}/messages
    method: POST
    data_selector: data
    params: {}
- name: create_organization_thread
  endpoint:
    path: /v1/threads
    method: POST
    data_selector: data
    params: {}
- name: share_thread
  endpoint:
    path: /v1/threads/{threadID}/share
    method: POST
    data_selector: data
    params: {}
- name: delete_threads
  endpoint:
    path: /v1/threads/tombstone
    method: DELETE
    data_selector: data
    params:
      threadIds: []
- name: crawl_url
  endpoint:
    path: /v1/url/crawl
    method: POST
    data_selector: data
    params: {}
- name: thread
  endpoint:
    path: /v1/threads/{threadID}
    method: GET
    data_selector: data
    params:
      publicAccessToken: string
- name: merge_user_accounts
  endpoint:
    path: /v1/users/merge
    method: PUT
    data_selector: data
    params: {}
- name: auth_sync
  endpoint:
    path: /api-reference/auth-sync
    method: POST
- name: update_thread_properties
  endpoint:
    path: /v1/threads/{threadID}/attributes
    method: POST
    data_selector: data
    params: {}
- name: auth_sync
  endpoint:
    path: /v1/users/self/auth-sync
    method: POST
    data_selector: data
    params: {}
- name: process_thread_message
  endpoint:
    path: /v1/threads/{threadID}/messages
    method: POST
    data_selector: data
    params: {}
- name: view_collection_hierarchy
  endpoint:
    path: /v1/users/self/collection-tree
    method: GET
    data_selector: data
- name: Handle WebSocket Connection
  endpoint:
    path: /v1/ws
    method: GET
- name: share_thread
  endpoint:
    path: /v1/threads/{threadID}/share
    method: POST
    data_selector: data
    params: {}
- name: crawl_url
  endpoint:
    path: /v1/url/crawl
    method: POST
    data_selector: data
    params: {}
- name: Fallback
  endpoint:
    path: /{fallback}
    method: GET
- name: merge_user_accounts
  endpoint:
    path: /v1/users/merge
    method: PUT
    data_selector: data
    params: {}
- name: fallback
  endpoint:
    path: /{fallback}
    method: POST
- name: Auth Sync
  endpoint:
    path: /api-reference/auth-sync
    method: POST
- name: fallback
  endpoint:
    path: /{fallback}
    method: DELETE
- name: auth_sync
  endpoint:
    path: /v1/users/self/auth-sync
    method: POST
    data_selector: data
    params: {}
- name: view_collection_hierarchy
  endpoint:
    path: /v1/users/self/collection-tree
    method: GET
    data_selector: data
- name: Handle WebSocket Connection
  endpoint:
    path: /v1/ws
    method: GET
- name: Fallback
  endpoint:
    path: /{fallback}
    method: DELETE
- name: collaboration_permissions
  endpoint:
    path: /features/collections/collaboration-permissions
    method: GET
    data_selector: permissions
- name: SmartChat
  endpoint:
    path: /chat
    method: POST
    data_selector: response
- name: webpage_upload
  endpoint:
    path: /upload/webpage
    method: POST
    data_selector: upload_result
- name: youtube_video_upload
  endpoint:
    path: /upload/youtube
    method: POST
    data_selector: upload_result
notes:
- Storytell is an enterprise-grade Collaborative Intelligence Platform
- No LLMs are trained on your data
- All Storytell users (even on free usage plans) are protected.
- Storytell only uses enterprise APIs with LLMs.
- Processing limited to first 2,000 rows for speed and efficiency
- Supports up to 30 tabs for multi-tab XLS files
- Secure, isolated environments for data privacy
- Scalable architecture for concurrent processing
- Connects to cloud storage for asset management.
- Supports uploading and syncing assets via API.
- Creates dummy identifiers to support automated code generation processes.
- A utility structure that exists solely to support API code generation templates
  and infrastructure.
- Requires assetId as a path parameter
- 'Body requires fields: assetID, displayName, jobID, keywords, message, status, statusCode,
  step, summary, textTokens'
- Modifies metadata and configuration attributes associated with an existing asset.
- The assetId is required as a path parameter.
- Pagination supports Limit and Offset parameters.
- Retrieves asset information if the user has read permissions in any collection containing
  the asset.
- Triggers asset fingerprinting and indexing after upload completion, making the asset
  available for chat.
- Finds and returns assets that match the provided name search criteria.
- Recovery window varies based on organization retention policy.
- Grants user permissions by validating and consuming an unclaimed access token, requiring
  authentication.
- Modifies metadata and configuration attributes associated with an existing collection.
- Returns sorted list of active members and pending invites for a collection.
- Active members are ordered by display name, pending invites by email.
- Limited to 100 results per page.
- Relocates a collection and its child collections to a new parent collection, returning
  list of all modified collections.
- Removes an unclaimed invitation token using its internal identifier, not the publicly
  shared claim code.
- Retrieves a collection and all associated discussion threads using the collection
  identifier.
- Requires user authentication and proper authorization permissions.
- Retrieves a collection and its associated assets using the collection identifier.
- Requires user authentication and proper access permissions.
- Creates a secure, signed URL for administrators to access message diagnostic data.
- Irreversibly removes collections and all their contents including assets, threads,
  and child collections.
- Associates multiple assets with a collection, allowing cross-organization relationships
  with proper access permissions.
- Requires user authentication and collection sharing authorization.
- Requires user authentication and collection sharing authorization
- Starts a new conversation thread within the authenticated user’s organization.
- Retrieves a list of assets that the user has recently interacted with or referenced.
- Requires authentication and active focus on the thread’s tenant organization.
- Modifies metadata and configuration attributes associated with an existing thread.
- Handles and processes an incoming message within an existing conversation thread.
- Crawls a URL and creates an asset for the content suitable for chat.
- Combines two user accounts, transferring data from one account to another while
  preserving important user information.
- Creates a permanent public access token for thread sharing.
- Fallback is called for debug endpoints. Not intended for normal use.
- 'Required fields include: defaultFavoritesCollectionLabel, defaultOrganizationCollectionLabel,
  defaultOrganizationDisplayName, defaultOrganizationName, defaultOrganizationSlug,
  defaultPersonalCollectionLabel, defaultProjectDisplayName, defaultProjectName, defaultProjectSlug,
  deviceID, displayName, email, isEmailVerified, locale, photoURL, userAgent, workflowVariants.'
- Users can only be invited to a Collection once and cannot accept the same invite
  multiple times.
- Moving a shared Collection back to Personal Collections will revoke access for all
  collaborators except the owner.
- Sharing a Collection grants access to all its sub-Collections, stored assets, and
  SmartChats™.
- SmartChats™ are Collection-specific.
errors:
- '401 Unauthorized: Check authentication credentials'
- '200: Success response'
- '401 Unauthorized: Check user permissions.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check if all required fields are provided in the request body.'
- '404 Not Found: Ensure the collectionID exists.'
- '401 Unauthorized: Recheck user authentication or permissions.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://production-storytell-ai-platfor-cds2.encr.app
source_metadata: null
