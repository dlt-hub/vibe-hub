resources:
- name: LaserStream
  endpoint:
    path: /
    method: GET
- name: send_transaction
  endpoint:
    path: /fast
    method: POST
    data_selector: result
    params:
      skipPreflight: true
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: response
    params: {}
- name: sender
  endpoint:
    path: /fast
    method: POST
    params:
      skipPreflight: true
      maxRetries: 0
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: getAssetsByOwner
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: webhook
  endpoint:
    path: /v0/webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: priority_fee
  endpoint:
    path: /getPriorityFeeEstimate
    method: POST
    data_selector: result.priorityFeeEstimate
- name: simulate_transaction
  endpoint:
    path: /simulateTransaction
    method: POST
    data_selector: value.unitsConsumed
- name: sendTransaction
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      rebate-address: <YOUR_SOL_ADDRESS>
- name: Get Assets
  endpoint:
    path: /docs/das/get-nfts
    method: GET
- name: Get Tokens
  endpoint:
    path: /docs/das/get-tokens
    method: GET
- name: getTokenAccountBalance
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getTokenAccountsByOwner
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getTokenSupply
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getTokenLargestAccounts
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getAsset
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getAsset
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      jsonrpc: '2.0'
      id: '1'
      method: getAsset
- name: getAssetsByOwner
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      jsonrpc: '2.0'
      id: '1'
      method: getAssetsByOwner
- name: getTokenAccountBalance
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      jsonrpc: '2.0'
      id: '1'
      method: getTokenAccountBalance
- name: searchAssets
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: parse_transaction
  endpoint:
    path: /v0/transactions
    method: POST
    data_selector: transactions
- name: fetch_transaction_history
  endpoint:
    path: /v0/addresses/{address}/transactions
    method: GET
    data_selector: transactions
- name: Dedicated Nodes
  endpoint:
    path: /docs/dedicated-nodes
    method: GET
    data_selector: nodes
    params: {}
- name: compressed_nft
  endpoint:
    path: /nfts/compressed
    method: GET
    data_selector: records
- name: webhook
  endpoint:
    path: /v0/webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: cNFT Events
  endpoint:
    path: /v0/webhooks
    method: POST
    data_selector: accountData
    params:
      transactionTypes: ANY
      accountAddresses:
      - MERKLE_TREE_ADDRESS
      webhookType: enhanced
      txnStatus: all
      encoding: jsonParsed
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: transactions
- name: transactions_by_address
  endpoint:
    path: /addresses/{address}/transactions
    method: GET
    data_selector: transactions
- name: signatures_for_address
  endpoint:
    path: /getSignaturesForAddress
    method: POST
    data_selector: result
- name: transaction
  endpoint:
    path: /getTransaction
    method: POST
    data_selector: result
notes:
- No credits consumed for Sender usage
- All transactions must include both tips and priority fees, plus skip preflight checks
- Use https://sender.helius-rpc.com/fast to avoid CORS preflight failures.
- Choose the regional HTTP endpoint closest to your infrastructure for optimal performance.
- Extreme Redundancy — redundant node clusters with historical replay and persistence
  so you never miss data
- Optimized ShredStream — receive data before anyone else without running your own
  dedicated nodes
- Global Coverage — endpoints for Frankfurt, Amsterdam, Tokyo, Singapore, Newark,
  Pittsburgh, and Salt Lake City
- Requires setup of connected app in Helius
- High-performance Solana development platform built for builders who demand excellence.
- Ultra-fast data streaming and optimized transaction sending.
- Your free tier includes 100,000 DAS API calls per month
- Rate limits control how many requests you can make per second.
- When exceeded, you’ll receive an HTTP 429 response.
- 99.99% Uptime
- <100ms Latency
- 24/7 Support
- Exposed API keys can lead to unauthorized usage, quota exhaustion, and unexpected
  charges.
- A paid Helius plan is required to access the Devnet faucet and request Devnet SOL
  airdrops from Helius.
- Optimize compute units, priority fees, and transaction sending
- Implement robust error handling
- Ultra-low latency raw data streaming
- 'Historical Replay: Automatically backfill up to 3000 slots (~20 minutes) of missed
  data'
- For server-side applications that need event notifications
- Recommended for production systems. Direct routing to block leaders with priority
  lane access, bypassing public queues for reliable delivery.
- For any production application, using staked connections is the single most effective
  way to ensure reliable transaction delivery.
- Implement a robust polling mechanism to confirm transactions.
- Only re-sign the transaction if fetching a new blockhash.
- Only single-transaction requests on mainnet qualify for rebates.
- Batch RPC calls and devnet transactions are automatically skipped.
- Helius’ staked connections guarantee 100% transaction delivery with minimal confirmation
  times.
- Method has a timeout period of 60 seconds for sending transactions.
- Polling checks a transaction's status every five seconds for a maximum of three
  times.
- The page parameter starts at 1. For blazing-fast infinite scrolling, use cursor
  pagination (before/after).
- Enhanced Transaction API V1 won’t be updated while we are working on V2
- Do not rely on these parsers for DeFi or non-NFT, Jupiter, and SPL transactions
- Dedicated nodes have specific limitations and are not suitable as standalone solutions
- Use dedicated nodes for gRPC streaming in combination with a shared paid plan for
  comprehensive functionality
- Dedicated nodes are optimized for gRPC streaming via the Yellowstone Geyser Plugin.
- For production applications, combine dedicated nodes with a shared plan.
- Dedicated nodes are optimized for gRPC streaming applications
- Use your shared plan for 'sendTransaction', archival data, and complex account queries
- Monitor your node’s metrics to understand its performance based on response times,
  successful request %, and error counts
- 'Dedicated nodes limitations: ''sendTransaction'' supported but not optimized, no
  archival data access, ''getProgramAccounts'' supported but not optimized'
- Uses OAuth2 with refresh token — requires setup of connected app in Helius
- Compressed NFTs are not native Solana tokens.
- Monitor cNFT events using WebSockets, Webhooks, or gRPC.
- Webhook payload includes structured data for compressed NFT events.
- Standard WebSockets for simplicity, Enhanced WebSockets for better filtering, or
  gRPC for enterprise-scale applications.
errors:
- 'InvalidTransaction: Transaction is invalid'
- 'InsufficientFunds: Not enough funds to cover transaction fees'
- Blockhash expired
- 'HTTP 429: Rate limit exceeded'
- Avoid hardcoding keys in frontend JavaScript
- Avoid committing keys to Git repositories
- Avoid using production keys for development
- '429: Rate limited'
- Invalid RPC parameters
- Node synchronization issue
- '401 Unauthorized: Check your API key'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck API key or token expiration'
- Transaction confirmation timed out
- 'API error: {response.status}'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'HTTP error! status: {response.status}'
- Failed to parse WS message
- WebSocket error
- Stream error
auth_info:
  mentioned_objects: []
client:
  base_url: https://mainnet.helius-rpc.com
  auth:
    type: apikey
  headers:
    Content-Type: application/json
source_metadata: null
