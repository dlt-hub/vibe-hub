resources:
- name: connect_agent
  endpoint:
    path: /{call.type}/{call.id}/connect
    method: POST
- name: chat
  endpoint:
    path: /chat
    method: GET
    data_selector: records
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: records
- name: activity_feeds
  endpoint:
    path: /activity-feeds
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: ChatClient
  endpoint:
    path: /chat/client
    method: POST
    data_selector: client
- name: ChannelList
  endpoint:
    path: /chat/channels
    method: GET
    data_selector: channels
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
- name: ChatClient
  endpoint:
    path: /chat/client
    method: POST
    data_selector: client
    params:
      api_key: uun7ywwamhs9
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
    params:
      messageLimit: 30
- name: Chat SDK
  endpoint:
    path: /chat/sdk/android/
    method: GET
    data_selector: records
- name: channel
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
- name: MessageListHeaderView
  endpoint:
    path: /chat/docs/sdk/android/ui/message-components/message-list-header/
    method: GET
- name: MessageListView
  endpoint:
    path: /chat/docs/sdk/android/ui/message-components/message-list/
    method: GET
- name: MessageComposerView
  endpoint:
    path: /chat/docs/sdk/android/ui/message-components/message-composer/
    method: GET
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: results
- name: voice_call
  endpoint:
    path: /video/voice-calling
    method: GET
    data_selector: voice_call_data
- name: personalization
  endpoint:
    path: /personalization
    method: GET
    data_selector: data
    params: {}
- name: activities
  endpoint:
    path: /activities/
    method: GET
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: activities
    params: {}
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: activities
    params: {}
- name: feed
  endpoint:
    path: /feed/(feed_slug)/(user_id)/
    method: GET
    data_selector: activities
    params: {}
- name: feed
  endpoint:
    path: /api/v1.0/feed/fake_aggregated_feed/123/
    method: GET
    data_selector: data
- name: follower
  endpoint:
    path: /api/v1.0/feed/fake_flat_feed/123/followers/
    method: GET
    data_selector: data
- name: following
  endpoint:
    path: /api/v1.0/feed/fake_flat_feed/123/follows/
    method: GET
    data_selector: data
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
    data_selector: data
- name: collections
  endpoint:
    path: collections/
    method: GET
- name: files
  endpoint:
    path: files/
    method: POST
- name: images
  endpoint:
    path: images/
    method: POST
- name: user
  endpoint:
    path: user/
    method: POST
- name: user
  endpoint:
    path: /api/v1.0/user/{user_id}/
    method: PUT
    data_selector: data
    params:
      api_key: YOUR_API_KEY
- name: activities
  endpoint:
    path: activity/
    method: GET
    data_selector: ''
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: activities
    params:
      api_key: YOUR_API_KEY
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: activity
    params:
      api_key: YOUR_API_KEY
- name: feed
  endpoint:
    path: /feed/{feed_slug}/{user_id}/
    method: GET
    data_selector: feed
    params:
      api_key: YOUR_API_KEY
- name: feed
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/(activity_id|foreign_id)/
    method: GET
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/followers/
    method: GET
    params:
      limit: 25
      offset: 0
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/follows/
    method: GET
    params:
      limit: 25
      offset: 0
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
- name: reaction detail
  endpoint:
    path: /api/v1.0/reaction/(id)/
    method: GET
- name: Open Graph Data
  endpoint:
    path: /api/v1.0/og/
    method: GET
    data_selector: response.data
    params:
      url: string
- name: Collection
  endpoint:
    path: /api/v1.0/collections/(collection_name)/
    method: POST
    data_selector: response.data
    params: {}
- name: Collection Detail
  endpoint:
    path: /api/v1.0/collections/(collection_name)/(id)/
    method: GET
    data_selector: response.data
    params: {}
- name: Files
  endpoint:
    path: /api/v1.0/files/
    method: POST
    data_selector: response.file
    params: {}
- name: Images
  endpoint:
    path: /api/v1.0/images/
    method: POST
    data_selector: response.file
    params: {}
- name: User
  endpoint:
    path: /api/v1.0/user/
    method: POST
    data_selector: response.data
    params: {}
- name: user
  endpoint:
    path: /api/v1.0/user/bob/
    method: PUT
    data_selector: data
    params:
      api_key: YOUR_API_KEY
- name: activity
  endpoint:
    path: /api/v1.0/activity/
    method: GET
    data_selector: activities
    params: {}
- name: follower
  endpoint:
    path: follow_many/
    method: POST
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: activities
    params: {}
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: changes
    params: {}
- name: feed
  endpoint:
    path: /feed/{feed_slug}/{user_id}/
    method: GET
    data_selector: activities
    params:
      limit: '25'
- name: feed
  endpoint:
    path: /api/v1.0/feed/fake_aggregated_feed/123/
    method: GET
    data_selector: feed
    params: {}
- name: follower
  endpoint:
    path: /api/v1.0/feed/fake_flat_feed/123/followers/
    method: GET
    data_selector: followers
    params:
      limit: 25
      offset: 0
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
    data_selector: reaction
    params: {}
- name: og_data
  endpoint:
    path: /og/
    method: GET
    data_selector: response
    params:
      url: http://ogp.me
- name: collection
  endpoint:
    path: /collections/(collection_name)/
    method: POST
    data_selector: response
    params: {}
- name: collection_detail
  endpoint:
    path: /collections/(collection_name)/(id)/
    method: GET
    data_selector: response
    params: {}
- name: files
  endpoint:
    path: /files/
    method: POST
    data_selector: response
    params: {}
- name: images
  endpoint:
    path: /images/
    method: POST
    data_selector: response
    params: {}
- name: user
  endpoint:
    path: /user/
    method: POST
    data_selector: response
    params: {}
- name: follower
  endpoint:
    path: follow_many/
    method: POST
    data_selector: file
    params: {}
- name: follower
  endpoint:
    path: follow_many/
    method: POST
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: activities
    params:
      api_key: YOUR_API_KEY
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: activities
    params:
      api_key: YOUR_API_KEY
- name: feed
  endpoint:
    path: /feed/{feed_slug}/{user_id}/
    method: GET
    data_selector: activities
    params:
      api_key: YOUR_API_KEY
- name: feed
  endpoint:
    path: /api/v1.0/feed/fake_aggregated_feed/{user_id}/
    method: GET
    data_selector: feed_data
- name: follower
  endpoint:
    path: /api/v1.0/feed/fake_flat_feed/{user_id}/followers/
    method: GET
    data_selector: followers_data
    params:
      limit: 25
      offset: 0
- name: following
  endpoint:
    path: /api/v1.0/feed/fake_flat_feed/{user_id}/follows/
    method: GET
    data_selector: following_data
    params:
      limit: 25
      offset: 0
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
    data_selector: reaction_data
- name: og_data
  endpoint:
    path: /api/v1.0/og/
    method: GET
    data_selector: response
    params:
      url: http://ogp.me
- name: collections
  endpoint:
    path: /api/v1.0/collections/
    method: POST
    data_selector: response
    params: {}
- name: user
  endpoint:
    path: /api/v1.0/user/
    method: POST
    data_selector: response
    params: {}
- name: Followers
  endpoint:
    path: /feed_id/fake_flat_feed789/followers
    method: GET
    data_selector: feeds
    params:
      limit: 25
      offset: 0
- name: reaction
  endpoint:
    path: reaction/
    method: DELETE
    params:
      collection_name: string
      ids: string
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: activities
    params:
      api_key: YOUR_API_KEY
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: activities
    params: {}
- name: feed
  endpoint:
    path: /feed/
    method: GET
    data_selector: activities
    params: {}
- name: feed
  endpoint:
    path: /api/v1.0/feed/fake_flat_feed/123/
    method: GET
- name: follower
  endpoint:
    path: /api/v1.0/feed/fake_flat_feed/123/followers/
    method: GET
- name: follower
  endpoint:
    path: /api/v1.0/feed/fake_flat_feed/123/follows/
    method: GET
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
- name: reaction_detail
  endpoint:
    path: /api/v1.0/reaction/(id)/
    method: GET
- name: collections
  endpoint:
    path: collections/
    method: GET
- name: files
  endpoint:
    path: files/
    method: POST
- name: images
  endpoint:
    path: images/
    method: POST
- name: user
  endpoint:
    path: user/
    method: POST
- name: user
  endpoint:
    path: /api/v1.0/user/bob/
    method: PUT
    data_selector: data
- name: reaction
  endpoint:
    path: /reaction/
    method: POST
    data_selector: file
    params: {}
- name: reactions
  endpoint:
    path: /reaction/
    method: POST
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: records
    params:
      api_key: YOUR_API_KEY
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: changes
    params:
      api_key: YOUR_API_KEY
- name: feed
  endpoint:
    path: /feed/(feed_slug)/(user_id)/
    method: GET
    data_selector: records
    params:
      api_key: YOUR_API_KEY
- name: feed
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/(activity_id|foreign_id)/
    method: DELETE
    data_selector: activity
    params:
      foreign_id: '1'
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/followers/
    method: GET
    data_selector: followers
    params:
      limit: '25'
      offset: '0'
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/follows/
    method: GET
    data_selector: follows
    params:
      limit: '25'
      offset: '0'
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
    data_selector: reaction
- name: collections
  endpoint:
    path: /api/v1.0/collections/
    method: GET
    data_selector: response.data
    params: {}
- name: files
  endpoint:
    path: /api/v1.0/files/
    method: GET
    data_selector: file
    params: {}
- name: images
  endpoint:
    path: /api/v1.0/images/
    method: GET
    data_selector: file
    params: {}
- name: user
  endpoint:
    path: /api/v1.0/user/
    method: POST
    data_selector: id
    params: {}
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: activities
    params:
      api_key: YOUR_API_KEY
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: activity
    params:
      api_key: YOUR_API_KEY
- name: feed
  endpoint:
    path: /feed/{feed_slug}/{user_id}/
    method: GET
    data_selector: feed
    params:
      api_key: YOUR_API_KEY
- name: feed
  endpoint:
    path: /api/v1.0/feed/fake_flat_feed/123/
    method: GET
    data_selector: records
- name: follower
  endpoint:
    path: /api/v1.0/feed/fake_flat_feed/123/followers/
    method: GET
    data_selector: records
    params:
      limit: 25
      offset: 0
- name: following
  endpoint:
    path: /api/v1.0/feed/fake_flat_feed/123/follows/
    method: GET
    data_selector: records
    params:
      limit: 25
      offset: 0
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
    data_selector: records
- name: collections
  endpoint:
    path: /collections/
    method: GET
    data_selector: response.data
- name: files
  endpoint:
    path: /files/
    method: POST
    data_selector: file
- name: images
  endpoint:
    path: /images/
    method: POST
    data_selector: file
- name: user
  endpoint:
    path: /user/
    method: POST
    data_selector: id
- name: user
  endpoint:
    path: /api/v1.0/user/bob/
    method: PUT
    data_selector: data
    params:
      api_key: YOUR_API_KEY
- name: follower
  endpoint:
    path: follow_many/
    method: POST
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: activities
    params:
      api_key: YOUR_API_KEY
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: changes
    params:
      api_key: YOUR_API_KEY
- name: feed
  endpoint:
    path: /feed/{feed_slug}/{user_id}/
    method: GET
    data_selector: feed
    params:
      api_key: YOUR_API_KEY
- name: feed
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/(activity_id|foreign_id)/
    method: DELETE
    data_selector: activity
    params: {}
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/followers/
    method: GET
    data_selector: followers
    params:
      limit: 25
      offset: 0
- name: following
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/follows/
    method: GET
    data_selector: follows
    params:
      limit: 25
      offset: 0
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
    data_selector: reaction
    params: {}
- name: og_data
  endpoint:
    path: /og/
    method: GET
    data_selector: response
    params:
      url: http://ogp.me
- name: collections
  endpoint:
    path: /collections/
    method: GET
    data_selector: response.data
- name: files
  endpoint:
    path: /files/
    method: POST
    data_selector: file
- name: images
  endpoint:
    path: /images/
    method: POST
    data_selector: file
- name: user
  endpoint:
    path: /user/
    method: POST
    data_selector: id
- name: reaction
  endpoint:
    path: /reaction/
    method: POST
    data_selector: file
    params: {}
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: activities
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: activity
- name: feed
  endpoint:
    path: /feed/{feed_slug}/{user_id}/
    method: GET
    data_selector: feed
- name: feed
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/(activity_id|foreign_id)/
    method: DELETE
    data_selector: activity
    params:
      foreign_id: '1'
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/followers/
    method: GET
    data_selector: followers
    params:
      limit: 25
      offset: 0
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/follows/
    method: GET
    data_selector: follows
    params:
      limit: 25
      offset: 0
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
    data_selector: reaction
    params: {}
- name: reaction_detail
  endpoint:
    path: /api/v1.0/reaction/(id)/
    method: DELETE
    data_selector: reaction
    params: {}
- name: collections
  endpoint:
    path: /collections/
    method: GET
    data_selector: response.data
- name: files
  endpoint:
    path: /files/
    method: POST
    data_selector: file
- name: images
  endpoint:
    path: /images/
    method: POST
    data_selector: file
- name: user
  endpoint:
    path: /user/
    method: POST
    data_selector: id
- name: user
  endpoint:
    path: /api/v1.0/user/{user_id}/
    method: PUT
    data_selector: data
    params:
      api_key: YOUR_API_KEY
- name: reaction_detail
  endpoint:
    path: reaction/(id)/
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: activities
    params: {}
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: changes
    params: {}
- name: feed
  endpoint:
    path: /feed/(feed_slug)/(user_id)/
    method: GET
    data_selector: feed
    params: {}
- name: feed
  endpoint:
    path: /api/v1.0/feed/fake_aggregated_feed/123/
    method: GET
    data_selector: data
    params: {}
- name: follower
  endpoint:
    path: /api/v1.0/feed/fake_flat_feed/123/followers/
    method: GET
    data_selector: data
    params:
      limit: 25
      offset: 0
- name: following
  endpoint:
    path: /api/v1.0/feed/fake_flat_feed/123/follows/
    method: GET
    data_selector: data
    params:
      limit: 25
      offset: 0
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
    data_selector: data
    params: {}
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: activities
    params:
      api_key: YOUR_API_KEY
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: activity
    params:
      api_key: YOUR_API_KEY
- name: feed
  endpoint:
    path: /feed/
    method: GET
    data_selector: feed
    params:
      api_key: YOUR_API_KEY
- name: feed
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/(activity_id|foreign_id)/
    method: DELETE
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/followers/
    method: GET
    params:
      limit: 25
      offset: 0
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/follows/
    method: GET
    params:
      limit: 25
      offset: 0
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
- name: Open Graph
  endpoint:
    path: /og/
    method: GET
    data_selector: response
    params:
      url: string
- name: collections
  endpoint:
    path: /collections/
    method: GET
    data_selector: response
    params:
      foreign_ids: string
- name: user
  endpoint:
    path: /user/
    method: POST
    data_selector: response
    params:
      get_or_create: boolean
- name: user
  endpoint:
    path: /api/v1.0/user/bob/
    method: PUT
    data_selector: data
    params:
      api_key: YOUR_API_KEY
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: delete_file
  endpoint:
    path: /api/v1.0/files/
    method: DELETE
    params: {}
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: activities
    params: {}
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: activity
    params: {}
- name: feed
  endpoint:
    path: /feed/{feed_slug}/{user_id}/
    method: GET
    data_selector: feed
    params: {}
- name: feed
  endpoint:
    path: /api/v1.0/feed/fake_aggregated_feed/123/
    method: GET
- name: follower
  endpoint:
    path: /api/v1.0/feed/fake_flat_feed/123/followers/
    method: GET
    params:
      limit: 25
      offset: 0
- name: following
  endpoint:
    path: /api/v1.0/feed/fake_flat_feed/123/follows/
    method: GET
    params:
      limit: 25
      offset: 0
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
- name: open_graph
  endpoint:
    path: /og/
    method: GET
    data_selector: response
    params:
      url: http://ogp.me
- name: collections
  endpoint:
    path: /collections/
    method: GET
    data_selector: response
    params:
      foreign_ids: collection1:id1,collection1:id2,collection3:id5
- name: files
  endpoint:
    path: /files/
    method: POST
    data_selector: file
- name: images
  endpoint:
    path: /images/
    method: POST
    data_selector: file
- name: user
  endpoint:
    path: /user/
    method: POST
    data_selector: id
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: activities
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: activity
- name: feed
  endpoint:
    path: /feed/{feed_slug}/{user_id}/
    method: GET
    data_selector: feed
- name: feed
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/(activity_id|foreign_id)/
    method: DELETE
    data_selector: 'null'
    params:
      foreign_id: '1'
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/followers/
    method: GET
    data_selector: 'null'
    params:
      limit: '25'
      offset: '0'
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/follows/
    method: GET
    data_selector: 'null'
    params:
      limit: '25'
      offset: '0'
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
    data_selector: 'null'
    params: {}
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/(id)/
    method: DELETE
    data_selector: 'null'
    params: {}
- name: collections
  endpoint:
    path: /api/v1.0/collections/
    method: GET
- name: user
  endpoint:
    path: /api/v1.0/user/
    method: POST
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: activities
- name: feed
  endpoint:
    path: /feed/{feed_slug}/{user_id}/
    method: GET
    data_selector: feed
- name: feed
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/(activity_id|foreign_id)/
    method: DELETE
    data_selector: activity
    params: {}
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/followers/
    method: GET
    data_selector: followers
    params:
      limit: 25
      offset: 0
- name: following
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/follows/
    method: GET
    data_selector: follows
    params:
      limit: 25
      offset: 0
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
    data_selector: reactions
    params: {}
- name: collections
  endpoint:
    path: /collections/
    method: GET
    data_selector: response.data
- name: files
  endpoint:
    path: /files/
    method: POST
    data_selector: file
- name: images
  endpoint:
    path: /images/
    method: POST
    data_selector: file
- name: user
  endpoint:
    path: /user/
    method: POST
    data_selector: id
- name: user
  endpoint:
    path: /api/v1.0/user/bob/
    method: PUT
    data_selector: data
    params:
      api_key: YOUR_API_KEY
- name: users
  endpoint:
    path: user/(id)/
    method: GET
- name: activities
  endpoint:
    path: /activities/
    method: POST
    data_selector: activities
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: changes
- name: feed
  endpoint:
    path: /feed/{feed_slug}/{user_id}/
    method: GET
    data_selector: activities
- name: feed
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/(activity_id|foreign_id)/
    method: GET
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/followers/
    method: GET
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/follows/
    method: GET
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
- name: collection
  endpoint:
    path: collections/(collection_name)/
    method: POST
    data_selector: data
- name: collection_detail
  endpoint:
    path: collections/(collection_name)/(id)/
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: files/
    method: POST
    data_selector: file
- name: images
  endpoint:
    path: images/
    method: POST
    data_selector: file
- name: user
  endpoint:
    path: user/
    method: POST
    data_selector: data
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: activities
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: activity
- name: feed
  endpoint:
    path: /feed/{feed_slug}/{user_id}/
    method: GET
    data_selector: feed
- name: feed
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/(activity_id|foreign_id)/
    method: DELETE
    data_selector: activity
    params: {}
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/followers/
    method: GET
    data_selector: followers
    params:
      limit: 25
      offset: 0
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/follows/
    method: GET
    data_selector: follows
    params:
      limit: 25
      offset: 0
- name: collections
  endpoint:
    path: /api/v1.0/collections/
    method: GET
- name: files
  endpoint:
    path: /api/v1.0/files/
    method: GET
- name: images
  endpoint:
    path: /api/v1.0/images/
    method: GET
- name: user
  endpoint:
    path: /api/v1.0/user/
    method: POST
- name: user_detail
  endpoint:
    path: /api/v1.0/user/(id)/
    method: GET
- name: user
  endpoint:
    path: /api/v1.0/user/{user_id}/
    method: PUT
    data_selector: data
    params:
      api_key: YOUR_API_KEY
- name: users
  endpoint:
    path: user/(id)/
    method: GET
- name: activities
  endpoint:
    path: /activities/
    method: GET
    data_selector: activities
    params:
      api_key: YOUR_API_KEY
- name: activity
  endpoint:
    path: /activity/
    method: POST
    data_selector: activity
    params:
      api_key: YOUR_API_KEY
- name: feed
  endpoint:
    path: /feed/(feed_slug)/(user_id)/
    method: GET
    data_selector: feed
    params:
      api_key: YOUR_API_KEY
- name: feed
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/(activity_id|foreign_id)/
    method: DELETE
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/followers/
    method: GET
    params:
      limit: 25
      offset: 0
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/follows/
    method: GET
    params:
      limit: 25
      offset: 0
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/
    method: POST
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/(id)/
    method: DELETE
- name: collections
  endpoint:
    path: /collections/
    method: GET
- name: files
  endpoint:
    path: /files/
    method: POST
- name: images
  endpoint:
    path: /images/
    method: POST
- name: user
  endpoint:
    path: /user/
    method: POST
- name: activities
  endpoint:
    path: /activities/
    method: POST
    data_selector: activities
    params: {}
- name: feed
  endpoint:
    path: /feed/{feed_slug}/{user_id}/
    method: GET
    data_selector: activities
    params:
      limit: 25
- name: feed
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/(activity_id|foreign_id)/
    method: DELETE
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/followers/
    method: GET
- name: follower
  endpoint:
    path: /api/v1.0/feed/(feed_slug)/(user_id)/follows/
    method: GET
- name: reaction
  endpoint:
    path: /api/v1.0/reaction/(id)/
    method: DELETE
- name: collections
  endpoint:
    path: /collections/
    method: GET
- name: files
  endpoint:
    path: /files/
    method: POST
- name: images
  endpoint:
    path: /images/
    method: POST
- name: user
  endpoint:
    path: /user/
    method: POST
- name: user
  endpoint:
    path: /api/v1.0/user/bob/
    method: PUT
    data_selector: data
    params:
      api_key: YOUR_API_KEY
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: forecast
  endpoint:
    path: /forecasts
    method: GET
    data_selector: ''
    params: {}
- name: RTP
  endpoint:
    path: /glossary/real-time-transport-protocol-rtp/
    method: GET
    data_selector: data
    params: {}
- name: Load Balancing Overview
  endpoint:
    path: /glossary/load-balancing/
    method: GET
    data_selector: content
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Fast and reliable experience for your video calls and livestreams
- Stream is a highly reliable and scalable product with no downtime.
- Sub-second latency. Global scale. Built for developers.
- Stream’s video infrastructure is distributed across global edge locations to deliver
  ultra-low latency and higher reliability, even at scale.
- Trusted by +1B end users for enterprise-grade reliability and 99.999% uptime SLAs.
- 9ms average API response time powered by Go, RocksDB, and Raft infrastructure.
- AI moderation systems can be tailored to align with your platform’s unique policies
  and standards.
- Run OpenAI real-time voice on Stream’s global edge network for optimal latency.
- Connect using WebRTC for better reliability in poor network conditions.
- Stream's industry-leading 99.999% uptime SLA
- Streamline app development with our feature-rich SDKs for real-time chat experiences.
- Requires OAuth2 authentication setup.
- Build low-latency Vision AI applications using our new open-source Vision AI SDK.
- Stream offers premium Customer Support with 24/7 phone support and a direct Slack
  channel with engineers.
- Monthly Active Users (MAU) is defined as any user that connected to chat within
  the last calendar month.
- Your first $100 of usage is free each month for all pricing tiers
- Stream runs servers around the world to ensure the best call quality & reliability
- Stream has rate limiting in place to ensure system stability.
- Your first $100 of Video & Audio API usage is free each month, no matter which pricing
  plan you choose.
- Pay-As-You-Go model available
- 24/5 support available for Stream products.
- This is not support. It’s only for letting us know about issues that we need to
  investigate.
- Customer must not complete the order process and must not use the service if they
  do not agree to the terms.
- Ensure correct permissions are set for the API key.
- Stream is committed to respecting the privacy rights of our customers and their
  end users.
- Stream has a bespoke migration tool to maximize efficiency and reduce downtime.
- Data portability is fundamental to Stream's operations.
- Clients make requests via browser or application and can have methods such as GET
  or POST.
- Stream uses a variety of industry-standard technologies and services to secure your
  data from unauthorized access, disclosure, use, and loss.
- Stream does not natively support End--to-End Encryption.
- Easy to use chat SDKs with the building blocks you need to create world-class in-app
  messaging experiences.
- Uses JWT for user authentication.
- The API key is hardcoded for the tutorial.
- The chat app uses Stream's edge network for optimal performance and scalability.
- Both the Chat SDK for SwiftUI and the API have plenty more features available to
  support more advanced use-cases.
- The API key points to a tutorial environment, but you can sign up for a free Chat
  trial to get your own later.
- For a production app, we recommend initializing this ChatClient in your Application
  class.
- Uses API key for authentication
- Ensure to properly handle user connection states
- Requires setup of connected app in Stream for API access.
- Uses OAuth2 for authentication
- Requires setup of API keys from getstream.
- Build ultra low latency live streaming for your app on our global edge network.
- Broadcast from your phone or RTMP and scale to millions of participants.
- Build in-app voice calling in days.
- Uses OAuth2 — requires setup of connected app in Stream
- Stream runs across 180+ servers worldwide with an average API response time of 12ms.
- Average real-time response time is 2ms.
- Requires setup of connected app in Stream
- May require additional permissions for certain features
- The authentication token must include the correct claims.
- JWT token must be signed with the API Secret of the Stream app.
- JWT token must include the correct claims for permissions.
- Some parameters are optional and may enhance the response.
- 'The JWT token would be built using a payload similar to: {"user_id": "bob"}'
- The API key can be safely shared with untrusted entities.
- The API secret is used to generate the feed tokens.
- Location/Region should be configurable when initializing the Stream client.
- You can only delete objects from a single collection per request.
- Token must be a JWT token including a signature generated with the HS256 algorithm.
- 'Every API request to Stream must include: the API Key of the app performing the
  request.'
- 'The JWT token would be built using a payload similar to: {"resource": "feed", "action":
  "write", "feed_id": "fake_flat_feed"}'
- Uses Client-Side Authentication for endpoints.
- Requires user_id in the JWT token for certain requests.
- Using id_lte for pagination is preferable to using offset.
- Every request should include the appropriate authorization header.
- Follow Many has a limit of 2,500 follows per request.
- All requests must include the API Key and a valid JWT token.
- JWT token needs to be built with specific payloads for each action.
- Ensure proper feed_id format when interacting with endpoints.
- The API key can be safely shared with untrusted entities
- The API secret is used to generate the feed tokens
- All API requests to Stream must include the API Key and an authentication token.
- JWT token must be built with appropriate payload for each operation.
- When using client-side auth the user_id field must not be provided as the value
  will be taken from the user token.
- Batch Activity Add has a limit of 5,000 target feeds.
- Every API request must include the API Key and an authentication token.
- The JWT token would be built using a payload including user_id.
- Some objects like Contact may return nulls in deeply nested fields
- Token must include a signature generated with the HS256 algorithm.
- Tokens are like passwords; never share tokens with untrusted parties.
- Uses OAuth2 with refresh token — requires setup of connected app in Twitter
- Tokens must be JWT and include correct claims.
- Every request must include the API Key as a query parameter.
- Use Server-Side Authentication for secure requests.
- Requires setup of connected app in api
- All requests must include the API key and a valid JWT token.
- The JWT token must include the correct claims for the resource being accessed.
- The JWT token would be built using a payload similar to the resource and action.
- Limit for batch activity add is 5,000 target feeds.
- Every API request to Stream must include the API Key of the app performing the request
  and an authentication token generated using the API Key secret.
- Every API request must include the API Key and an authentication token generated
  using the API Key secret.
- The activity id is returned in the response when the activity is first created.
- When deleting an activity using foreign id, set foreign_id URL query parameter to
  '1'.
- Some JWT libraries prefix the generated token with the string 'Bearer'. This prefix
  should be removed before sending the request to Stream.
- Passing both id_lt[e] and id_gt[e] is not supported.
- API keys must be stored securely.
- Don't embed your API keys in code or URLs.
- Rotate your API keys periodically.
- Restrict how your API keys can be used.
- Delete unused API keys.
- API rate limiting is essential for enabling communication across systems.
- It prevents users from overconsuming resources, allowing for smooth system performance
  and network traffic flow.
- SRT streaming is a popular and increasingly compatible standard that delivers clear
  live audio and video to viewers, no matter their network conditions.
- API throttling helps prevent system overload by limiting the number of requests
  a client can make, ensuring optimal performance and service availability.
- API tokens can have built-in expiration dates.
- API tokens can be adjusted or revoked by the API provider.
- API responses will differ depending on the nature of the request
- API response time is an important measurement
- APIs are essential for using and developing software.
- Make sure to read the docs to fully understand how you should format your calls.
- JWTs are stateless credentials that transmit information securely between parties
  in JSON format.
- Use strong cryptographic algorithms.
- Handle token revocation and short expiration times.
- Don't put sensitive data in JWTs.
- Validate tokens properly.
- Store tokens securely.
- Micro SaaS provides a solution to a unique problem.
- Micro SaaS companies generally operate with low overhead costs.
- Serverless computing is a model that abstracts the whole platform, including the
  runtime.
- You are charged for the actual resources consumed, not pre-allocated servers.
- WebRTC is an open-source protocol for real-time communication.
- WebRTC requires a signaling server for devices that wish to communicate.
- Real-time chat enables people to exchange messages, images, files, and other content
  instantly over the internet.
- Live messaging platforms maintain an active connection between a user's device and
  the chat server, typically using WebSockets or similar protocols.
- RTSP does not support content encryption.
- RTP prioritizes packet delivery over error correction.
- RTP packets are not encrypted, which can expose sensitive data.
- Always encrypt your traffic in production using WSS.
- Configure your implementation to detect dropped connections and initiate retries.
- MQTT is built to work with low-power devices and enable communication between devices
  regardless of network stability, bandwidth, and latency.
- MQTT can facilitate clean or persistent sessions for individual clients via the
  cleanSession flag.
- Decouples message producers from consumers
- Supports asynchronous processing
- Employ TLS for encryption in transit and SASL for authentication.
- Message queues allow producers and consumers to communicate asynchronously and operate
  independently.
- Load balancing is the process of distributing client requests among a pool of application
  servers for optimal resource usage and system reliability.
- Load balancers sit between incoming client traffic and a group of backend servers.
- WebSockets are bidirectional and persistent while webhooks are unidirectional.
- WebSockets require a more complex implementation compared to webhooks.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your API key and secret.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '403 Forbidden: Check your API key and permissions.'
- '404 Not Found: Verify the endpoint path.'
- '500 Internal Server Error: Retry the request.'
- 'Unauthorized: Incorrect credentials or insufficient permissions.'
- '401 Unauthorized: Recheck user token.'
- '401 Unauthorized: Recheck JWT token or user credentials'
- '401 Unauthorized: Check API key validity'
- '403 Forbidden: Ensure proper permissions for the user'
- '429 Too Many Requests: Rate limit exceeded.'
- '403 Forbidden: Insufficient permissions for the requested resource'
- '401 Unauthorized: Ensure correct token is provided.'
- '401 Unauthorized: Check JWT token and permissions.'
- '400 Bad Request: Check request format and parameters.'
- '401 Unauthorized: Check your API Key or token.'
- '403 Forbidden: Insufficient permissions for the requested resource.'
- '401 Unauthorized: Check your API Key and JWT token.'
- '401 Unauthorized: Invalid API Key or JWT token.'
- '404 Not Found: The requested resource was not found.'
- '400 Bad Request: Invalid request parameters.'
- '409 Conflict: Reaction with the same ID already exists.'
- '400 Bad Request: Check payload structure and required fields.'
- '401 Unauthorized: Check if the token is valid.'
- '403 Forbidden: Ensure that the user has permission for the requested resource.'
- '401 Unauthorized: Ensure the token is valid and correctly configured.'
- '401 Unauthorized: Recheck your API key or token.'
- '409 Conflict: If a reaction with the same ID already exists.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Recheck API Key or token validity.'
- '401 Unauthorized: Invalid token or API key.'
- '401 Unauthorized: Recheck JWT token validity or API key.'
- '409 Conflict: Reaction with the same ID already exists'
- '409 Conflict: If a collection object with the same ID already exists'
- '401 Unauthorized: Recheck token validity.'
- '403 Forbidden: Check permissions for the requested resource.'
- '401 Unauthorized: Check your API Key and token.'
- '403 Forbidden: Ensure you have permission for this action.'
- '404 Not Found: Check the endpoint path.'
- '401 Unauthorized: Invalid API key or token.'
- '401 Unauthorized: Check API Key and JWT token.'
- '409 Conflict: A reaction with the same ID already exists.'
- '401 Unauthorized: Token is missing or invalid.'
- '429 TOO MANY REQUESTS: Too many attempts. Retry in X seconds.'
- '429 Too Many Requests: Client may need to retry after a specified cooldown period.'
- '400 Bad Request: There was a client-side error in how the request was formed.'
- '401 Unauthorized: The client lacks proper authorization or hasn''t sent it along
  with the request.'
- '404 Not Found: The desired resource is not present on the server.'
- '500 Internal Server Error: A non-specific message that shows there was an error
  on the server''s side.'
- '503 Service Unavailable: The server is currently not available.'
- '429: Too many requests sent.'
- '4xx or 5xx status code: If validation fails during the handshake.'
auth_info:
  mentioned_objects:
  - ChatClient
  - StreamChat
  - User
  - OauthToken
  - AuthProvider
  - Stream-Auth-Type
  - Authorization
  - JWT Token
  - API Key
  - API Secret
  - ApiKey
  - JWT
  - jwt
  - api_key
  - user_id
  - NamedCredential
  - api_secret
client:
  base_url: https://APP_REGION-api.stream-io-api.com
  auth:
    type: jwt
    location: header
    header_name: Authorization
  headers:
    Content-Type: application/json
source_metadata: null
