resources:
- name: divert-system
  endpoint:
    path: /api/datomic-local/divert-system
    method: POST
    data_selector: arg-map
    params: {}
- name: release-db
  endpoint:
    path: /api/datomic-local/release-db
    method: POST
    data_selector: arg-map
    params: {}
- name: import-cloud
  endpoint:
    path: /api/datomic-local/import-cloud
    method: POST
    data_selector: arg-map
    params: {}
- name: transactor
  endpoint:
    path: /bin/transactor
    method: GET
    data_selector: System started
    params: {}
- name: supported_regions
  endpoint:
    path: /supported/regions
    method: GET
    data_selector: regions
    params: {}
- name: storage_stack
  endpoint:
    path: /cloudformation/create-stack
    method: POST
    data_selector: template
    params:
      template_source: Amazon S3 URL
      stack_name: Storage Template 1172-9392
- name: compute_stack
  endpoint:
    path: /cloudformation/create-stack
    method: POST
    data_selector: template
    params:
      template_source: Amazon S3 URL
      stack_name: Primary Compute Template 1172-9392
- name: local_storage
  endpoint:
    path: /.datomic/local.edn
    method: CREATE
    data_selector: storage-dir
    params: {}
- name: datomic-client
  endpoint:
    path: d/client
    method: POST
    data_selector: client
    params:
      server-type: datomic-local
      system: dev
- name: datomic-samples
  endpoint:
    path: d/client
    method: POST
    data_selector: client
    params:
      server-type: datomic-local
      system: datomic-samples
- name: local_storage
  endpoint:
    path: .datomic/local.edn
    method: GET
    data_selector: storage-dir
    params: {}
- name: peer
  endpoint:
    path: /api/peer
    method: GET
    data_selector: records
- name: datomic-samples
  endpoint:
    path: /datomic/samples
    method: GET
- name: peer_library
  endpoint:
    path: /peer
    method: GET
    data_selector: records
- name: database
  endpoint:
    path: /create-database
    method: POST
    data_selector: db-uri
    params: {}
- name: connection
  endpoint:
    path: /connect
    method: POST
    data_selector: conn
    params: {}
- name: movie_schema
  endpoint:
    path: /transact/schema
    method: POST
    data_selector: tx-data
- name: database
  endpoint:
    path: /peer-tutorial/create-database
    method: POST
    data_selector: database
    params: {}
- name: connection
  endpoint:
    path: /peer-tutorial/connect
    method: POST
    data_selector: connection
    params: {}
- name: transact
  endpoint:
    path: /transact
    method: POST
    data_selector: tx-data
- name: movie_schema
  endpoint:
    path: /schema/movie
    method: POST
    data_selector: tx-data
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: results
    params: {}
- name: transact_data
  endpoint:
    path: /transact
    method: POST
    data_selector: tx-data
- name: historic_data
  endpoint:
    path: /peer-tutorial/see-historic-data.html
    method: GET
    data_selector: data
    params: {}
- name: movies
  endpoint:
    path: /query/movies
    method: GET
    data_selector: records
- name: database
  endpoint:
    path: /datomic.client.api/create-database
    method: POST
    data_selector: response
- name: transact
  endpoint:
    path: /datomic.client.api/transact
    method: POST
    data_selector: response
- name: query
  endpoint:
    path: /datomic.client.api/q
    method: POST
    data_selector: response
- name: database
  endpoint:
    path: /create-database
    method: POST
    data_selector: db-name
    params: {}
- name: transaction
  endpoint:
    path: /transact
    method: POST
    data_selector: tx-data
    params: {}
- name: create_database
  endpoint:
    path: /client/create-database
    method: POST
    data_selector: db-name
    params: {}
- name: transact_schema
  endpoint:
    path: /client/transact
    method: POST
    data_selector: tx-data
    params: {}
- name: transact_data
  endpoint:
    path: /client/transact
    method: POST
    data_selector: tx-data
    params: {}
- name: query_movies
  endpoint:
    path: /client/query
    method: POST
    data_selector: all-titles-q
    params: {}
- name: delete_database
  endpoint:
    path: /client/delete-database
    method: POST
    data_selector: db-name
    params: {}
- name: database_value
  endpoint:
    path: /api/database
    method: GET
    data_selector: db
- name: pull
  endpoint:
    path: /api/pull
    method: POST
    data_selector: pull
- name: query
  endpoint:
    path: /api/query
    method: POST
    data_selector: query
- name: assertion
  endpoint:
    path: /api/assertion
    method: POST
    data_selector: datoms
- name: database_values
  endpoint:
    path: /datomic/database/values
    method: GET
    data_selector: records
- name: pull
  endpoint:
    path: /datomic/pull
    method: GET
    data_selector: records
- name: query
  endpoint:
    path: /datomic/query
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /datomic/inventory
    method: POST
    data_selector: transactions
    params: {}
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: records
- name: order
  endpoint:
    path: /order
    method: POST
    data_selector: result
    params: {}
- name: line_item
  endpoint:
    path: /line_item
    method: POST
    data_selector: result
    params: {}
- name: history_query
  endpoint:
    path: /history
    method: GET
    data_selector: records
- name: as_of_query
  endpoint:
    path: /as-of
    method: GET
    data_selector: records
- name: datomic_client
  endpoint:
    path: /client-api
    method: GET
    data_selector: records
- name: datoms-query
  endpoint:
    params:
      limit: -1
      chunk: 10000
- name: index_pull
  endpoint:
    path: /indexes/index-pull
    method: GET
    data_selector: results
    params:
      index: :avet
      selector: pull pattern
      start: initial position
      timeout: optional
      offset: optional
      limit: '1000'
      reverse: optional
- name: datoms
  endpoint:
    path: /client-api/datomic.client.api.html#var-datoms
    method: GET
    data_selector: datoms
    params: {}
- name: index-range
  endpoint:
    path: /client-api/datomic.client.api.html#var-index-range
    method: GET
    data_selector: index-range
    params: {}
- name: log
  endpoint:
    path: /reference/log.html
    method: GET
    data_selector: log
    params: {}
- name: tx-range
  endpoint:
    path: /reference/log.html#tx-range
    method: GET
    data_selector: tx-range
    params: {}
- name: tx-ids
  endpoint:
    path: /reference/log.html#log-in-query
    method: GET
    data_selector: tx-ids
    params: {}
- name: tx-data
  endpoint:
    path: /reference/log.html#log-in-query
    method: GET
    data_selector: tx-data
    params: {}
- name: datoms_query
  endpoint:
    params:
      limit: -1
      chunk: 10000
- name: index-pull
  endpoint:
    path: /indexes/index-pull
    method: POST
    data_selector: results
- name: datoms
  endpoint:
    path: /datomic.api/datoms
    method: GET
- name: index_range
  endpoint:
    path: /datomic.api/index-range
    method: GET
- name: list_aliases
  endpoint:
    path: /data/
    method: GET
    data_selector: '[]'
- name: list_databases
  endpoint:
    path: /data/<storage-alias>/
    method: GET
    data_selector: '[]'
- name: create_database
  endpoint:
    path: /data/<storage-alias>/
    method: POST
    data_selector: '[]'
- name: transact
  endpoint:
    path: /data/<storage-alias>/<db-name>/
    method: POST
    data_selector: '{}'
- name: retrieve_database_info
  endpoint:
    path: /data/<storage-alias>/<db-name>/<basis-t>/
    method: GET
    data_selector: '{}'
- name: datoms
  endpoint:
    path: /data/<storage-alias>/<db-name>/<basis-t>/datoms
    method: GET
    data_selector: '[]'
- name: entity
  endpoint:
    path: /data/<storage-alias>/<db-name>/<basis-t>/entity
    method: GET
    data_selector: '{}'
- name: query
  endpoint:
    path: /api/query
    method: GET
    data_selector: '[]'
- name: log
  endpoint:
    path: /reference/log.html
    method: GET
    data_selector: log
    params: {}
- name: tx-range
  endpoint:
    path: /reference/tx-range.html
    method: GET
    data_selector: tx-range
    params: {}
- name: events_browser_access
  endpoint:
    path: /data/<storage-alias>/<db-name>/<basis-t>/events
    method: GET
- name: events_programmatic_access
  endpoint:
    path: /events/<storage-alias>/<db-name>
    method: GET
- name: List Aliases
  endpoint:
    path: /data/
    method: GET
    data_selector: records
- name: List Databases
  endpoint:
    path: /data/<storage-alias>/
    method: GET
    data_selector: records
- name: Create Database
  endpoint:
    path: /data/<storage-alias>/
    method: POST
    data_selector: records
- name: Transact
  endpoint:
    path: /data/<storage-alias>/<db-name>/
    method: POST
    data_selector: records
- name: Retrieve Database Info
  endpoint:
    path: /data/<storage-alias>/<db-name>/<basis-t>/
    method: GET
    data_selector: records
- name: Datoms
  endpoint:
    path: /data/<storage-alias>/<db-name>/<basis-t>/datoms
    method: GET
    data_selector: records
- name: Entity
  endpoint:
    path: /data/<storage-alias>/<db-name>/<basis-t>/entity
    method: GET
    data_selector: records
- name: Query
  endpoint:
    path: /api/query
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /data/<storage-alias>/<db-name>/<basis-t>/events
    method: GET
    data_selector: null
    params: {}
- name: events_programmatic
  endpoint:
    path: /events/<storage-alias>/<db-name>
    method: GET
    data_selector: null
    params: {}
- name: io-stats
  endpoint:
    path: /reference/io-stats.html
    method: GET
    data_selector: records
    params: {}
- name: transaction-logging
  endpoint:
    path: /api/error-handling.html
    method: GET
    data_selector: records
    params: {}
- name: DynamoDB Table
  endpoint:
    path: /
    method: POST
    data_selector: Table
    params: {}
- name: DynamoDB Table
  endpoint:
    path: /
    method: POST
    data_selector: Table
    params: {}
- name: tx_stats
  endpoint:
    path: /reference/tx-stats.html
    method: GET
    data_selector: tx-stats
- name: DynamoDB Table
  endpoint:
    path: /
    method: CREATE
    data_selector: Table
    params:
      id: string
- name: DynamoDB
  endpoint:
    path: /dynamodb
    method: POST
- name: backup
  endpoint:
    path: /operation/backup.html
    method: GET
    data_selector: backup
    params: {}
- name: restore
  endpoint:
    path: /operation/restore.html
    method: GET
    data_selector: restore
    params: {}
- name: transactor_memory
  endpoint:
    path: /operation/capacity.html#transactor-memory
    method: GET
    data_selector: memory
    params: {}
- name: data_imports
  endpoint:
    path: /operation/capacity.html#data-imports
    method: GET
    data_selector: imports
    params: {}
- name: peer_memory
  endpoint:
    path: /operation/capacity.html#peer-memory
    method: GET
    data_selector: peer_memory
    params: {}
- name: transaction_performance
  endpoint:
    path: /operation/capacity.html#transaction-performance
    method: GET
    data_selector: performance
    params: {}
- name: indexing
  endpoint:
    path: /operation/capacity.html#indexing
    method: GET
    data_selector: indexing
    params: {}
- name: multiple_databases
  endpoint:
    path: /operation/capacity.html#multiple-databases
    method: GET
    data_selector: multiple_databases
    params: {}
- name: dynamodb
  endpoint:
    path: /operation/capacity.html#dynamodb
    method: GET
    data_selector: dynamodb
    params: {}
- name: storage_size
  endpoint:
    path: /operation/capacity.html#storage-size
    method: GET
    data_selector: storage_size
    params: {}
- name: datomic-peer-properties
  endpoint:
    path: /operation/system-properties.html
    method: GET
    data_selector: properties
    params: {}
- name: datomic-transactor-properties
  endpoint:
    path: /operation/transactor.html
    method: GET
    data_selector: properties
    params: {}
- name: CloudFormation
  endpoint:
    path: /operation/aws.html
    method: GET
    data_selector: resources
    params: {}
- name: valcache_configuration
  endpoint:
    path: /operation/valcache.html
    method: GET
    data_selector: properties
    params: {}
- name: backup
  endpoint:
    path: /operation/backup.html
    method: GET
    data_selector: backup
    params: {}
- name: restore
  endpoint:
    path: /operation/restore.html
    method: GET
    data_selector: restore
    params: {}
- name: excision
  endpoint:
    path: /operation/excision.html
    method: GET
    data_selector: records
- name: database_connection
  endpoint:
    path: /connect
    method: POST
    data_selector: conn
    params:
      db-name: hello
- name: movies
  endpoint:
    path: /api/movies
    method: GET
    data_selector: records
    params: {}
- name: movies
  endpoint:
    path: /movies
    method: GET
    data_selector: results
    params: {}
- name: valcache_configuration
  endpoint:
    path: /operation/valcache.html
    method: GET
    data_selector: configuration
    params: {}
- name: storage_stack
  endpoint:
    path: /storage-template.html
    method: GET
- name: compute_stack
  endpoint:
    path: /compute-template.html
    method: GET
- name: peer_server
  endpoint:
    path: /health
    method: GET
- name: database_connection
  endpoint:
    path: /datomic/hello
    method: GET
    data_selector: conn
    params: {}
- name: storage_template
  endpoint:
    path: /operation/storage-template.html
    method: GET
    data_selector: records
    params: {}
- name: compute_group
  endpoint:
    path: /operation/compute-template.html
    method: GET
    data_selector: stack operations
    params: {}
- name: database_connection
  endpoint:
    path: /datomic:mem://hello
    method: GET
    data_selector: records
    params: {}
- name: movie_schema
  endpoint:
    path: /transact
    method: POST
    data_selector: records
    params: {}
- name: first_movies
  endpoint:
    path: /transact
    method: POST
    data_selector: records
    params: {}
- name: movies
  endpoint:
    path: /movies
    method: GET
    data_selector: entities
    params: {}
- name: storage_stack
  endpoint:
    path: /cloudformation/console/StorageTemplate1172-9392
    method: GET
- name: compute_stack
  endpoint:
    path: /cloudformation/console/PrimaryComputeTemplate1172-9392
    method: GET
- name: intra_vpc_access
  endpoint:
    path: /operation/vpc-access.html#intra-vpc
    method: GET
    data_selector: description
    params: {}
- name: inter_vpc_access
  endpoint:
    path: /operation/vpc-access.html#inter-vpc
    method: GET
    data_selector: description
    params: {}
- name: compute_group
  endpoint:
    path: /operation/compute-template.html
    method: GET
    data_selector: stack operations
    params: {}
- name: CloudWatch Metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: CloudWatch Logs
  endpoint:
    path: /logs
    method: GET
    data_selector: logs
    params: {}
- name: Datomic Dashboards
  endpoint:
    path: /dashboards
    method: GET
    data_selector: dashboards
    params: {}
- name: CloudFormation Stacks
  endpoint:
    path: /operation/deleting.html#deleting-stacks
    method: DELETE
    data_selector: stacks
    params: {}
- name: Durable Storage
  endpoint:
    path: /operation/deleting.html#deleting-storage
    method: DELETE
    data_selector: storage
    params: {}
- name: CloudWatch Metrics
  endpoint:
    path: /monitoring/cloudwatch/metrics
    method: GET
    data_selector: metrics
- name: CloudWatch Logs
  endpoint:
    path: /monitoring/cloudwatch/logs
    method: GET
    data_selector: logs
- name: CloudWatch Dashboards
  endpoint:
    path: /monitoring/cloudwatch/dashboards
    method: GET
    data_selector: dashboards
- name: schema
  endpoint:
    path: /schema/schema.html
    method: GET
    data_selector: records
    params: {}
- name: unique_identity
  endpoint:
    path: /db/unique/identity
    method: GET
    data_selector: records
- name: unique_value
  endpoint:
    path: /db/unique/value
    method: GET
    data_selector: records
- name: valueType
  endpoint:
    path: /db/valueType
    method: GET
    data_selector: records
- name: attribute_predicates
  endpoint:
    path: /db/attribute/predicates
    method: GET
    data_selector: records
- name: entity_specs
  endpoint:
    path: /db/entity/specs
    method: GET
    data_selector: records
- name: split_stack
  endpoint:
    path: /operation/split-stacks.html
    method: GET
    data_selector: data
    params: {}
- name: Schema
  endpoint:
    path: /schema/schema-reference.html
    method: GET
    data_selector: records
- name: Transactions
  endpoint:
    path: /transactions/transactions.html
    method: GET
    data_selector: records
- name: client_access
  endpoint:
    path: /operation/architecture.html#access-gateway
    method: GET
    data_selector: client_access
    params: {}
- name: analytics
  endpoint:
    path: /analytics/analytics-concepts.html
    method: GET
    data_selector: analytics
    params: {}
- name: identity
  endpoint:
    path: /:db/unique/identity
    method: GET
    data_selector: records
- name: value
  endpoint:
    path: /:db/unique/value
    method: GET
    data_selector: records
- name: unique_identity
  endpoint:
    path: /db/unique/identity
    method: GET
    data_selector: records
    params: {}
- name: unique_value
  endpoint:
    path: /db/unique/value
    method: GET
    data_selector: records
    params: {}
- name: value_type
  endpoint:
    path: /db/valueType
    method: GET
    data_selector: records
    params: {}
- name: attribute_predicates
  endpoint:
    path: /db/attr/preds
    method: GET
    data_selector: records
    params: {}
- name: entity_specs
  endpoint:
    path: /db/entity/specs
    method: GET
    data_selector: records
    params: {}
- name: entity_identifier
  endpoint:
    path: /schema/identity.html
    method: GET
- name: idents
  endpoint:
    path: /schema/identity.html
    method: GET
- name: unique_identities
  endpoint:
    path: /schema/identity.html
    method: GET
- name: unique_values
  endpoint:
    path: /schema/identity.html
    method: GET
- name: squuids
  endpoint:
    path: /schema/identity.html
    method: GET
- name: lookup_refs
  endpoint:
    path: /schema/identity.html
    method: GET
- name: joins
  endpoint:
    path: /schema/identity.html
    method: GET
- name: limitations
  endpoint:
    path: /schema/identity.html
    method: GET
- name: unique_identity
  endpoint:
    path: /:db.unique/identity
    method: GET
    data_selector: records
    params: {}
- name: unique_value
  endpoint:
    path: /:db.unique/value
    method: GET
    data_selector: records
    params: {}
- name: value_type
  endpoint:
    path: /:db/valueType
    method: GET
    data_selector: records
    params: {}
- name: attribute_predicates
  endpoint:
    path: /:db.attr/preds
    method: GET
    data_selector: records
    params: {}
- name: entity_specs
  endpoint:
    path: /:db.entity/specs
    method: GET
    data_selector: records
    params: {}
- name: transaction_data
  endpoint:
    path: /transactions/transaction-data
    method: GET
    data_selector: tx-data
- name: transaction_data
  endpoint:
    path: /transactions/transaction-data-reference.html
    method: GET
    data_selector: tx-data
- name: query
  endpoint:
    path: /query
    method: GET
    data_selector: results
- name: pull
  endpoint:
    path: /api/pull
    method: GET
    data_selector: results
- name: medium_tracks
  endpoint:
    path: /pull/medium_tracks
    method: GET
    data_selector: medium/tracks
    params: {}
- name: EAVT
  endpoint:
    path: /indexes/eavt
    method: GET
- name: AEVT
  endpoint:
    path: /indexes/aevt
    method: GET
- name: AVET
  endpoint:
    path: /indexes/avet
    method: GET
- name: VAET
  endpoint:
    path: /indexes/vaet
    method: GET
- name: tempids
  endpoint:
    path: /tempids
    method: GET
    data_selector: tempids
- name: idents
  endpoint:
    path: /idents
    method: GET
    data_selector: idents
- name: lookup_refs
  endpoint:
    path: /lookup_refs
    method: GET
    data_selector: lookup_refs
- name: values
  endpoint:
    path: /values
    method: GET
    data_selector: values
- name: reified_transactions
  endpoint:
    path: /reified_transactions
    method: GET
    data_selector: reified_transactions
- name: ion
  endpoint:
    path: /ions
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: transaction_result
    params: {}
- name: ion
  endpoint:
    path: /ions/reference
    method: GET
    data_selector: records
- name: lambdas
  endpoint:
    path: /lambdas
    method: GET
    data_selector: records
- name: http-direct
  endpoint:
    path: /http-direct
    method: GET
    data_selector: records
- name: parameter_store
  endpoint:
    path: /datomic-shared/(env)/(app-name)/
    method: GET
    data_selector: params
    params: {}
- name: query
  endpoint:
    path: /query
    method: GET
    data_selector: results
- name: query
  endpoint:
    path: /query
    method: GET
    data_selector: results
- name: get-schema
  endpoint:
    path: /client-api/get-schema
    method: GET
    data_selector: schema
    params: {}
- name: get-items-by-type
  endpoint:
    path: /client-api/get-items-by-type
    method: GET
    data_selector: items
    params: {}
- name: get-schema
  endpoint:
    path: /lambda/get-schema
    method: POST
    data_selector: StatusCode
    params: {}
- name: get-items-by-type
  endpoint:
    path: /lambda/get-items-by-type
    method: POST
    data_selector: StatusCode
    params: {}
- name: Return Maps
  endpoint:
    path: /return-maps
    method: GET
    data_selector: records
- name: Aggregates
  endpoint:
    path: /aggregates
    method: GET
    data_selector: records
- name: Inputs
  endpoint:
    path: /inputs
    method: GET
    data_selector: records
- name: Binding Forms
  endpoint:
    path: /binding-forms
    method: GET
    data_selector: records
- name: Where Clauses
  endpoint:
    path: /where-clauses
    method: GET
    data_selector: records
- name: Data Patterns
  endpoint:
    path: /data-patterns
    method: GET
    data_selector: records
- name: Predicates
  endpoint:
    path: /predicates
    method: GET
    data_selector: records
- name: Functions
  endpoint:
    path: /functions
    method: GET
    data_selector: records
- name: track_info
  endpoint:
    path: /track-info
    method: GET
    data_selector: records
    params: {}
- name: sample
  endpoint:
    path: /etc-samples/catalog/sample.properties
    method: GET
    data_selector: properties
    params: {}
- name: catalogs
  endpoint:
    path: /system.metadata.catalogs
    method: GET
- name: schemas
  endpoint:
    path: /information_schema
    method: GET
- name: tables
  endpoint:
    path: /show/tables
    method: GET
- name: country
  endpoint:
    path: /describe/country
    method: GET
- name: metaschema
  endpoint:
    path: /analytics/analytics-metaschema.html
    method: GET
    data_selector: metaschema
    params: {}
- name: Datomic Analytics
  endpoint:
    path: /api/databases
    method: POST
    data_selector: database
    params:
      incremental: name
- name: system_runtime_nodes
  endpoint:
    path: /system/runtime/nodes
    method: GET
    data_selector: results
- name: system.runtime.nodes
  endpoint:
    data_selector: query_results
- name: datomic_analytics
  endpoint:
    path: /databases
    method: POST
    data_selector: databases
- name: lambdas
  endpoint:
    path: /lambdas
    method: GET
- name: http-direct
  endpoint:
    path: /http-direct
    method: GET
- name: get-schema
  endpoint:
    path: /client/get-schema
    method: GET
    data_selector: records
    params: {}
- name: get-items-by-type
  endpoint:
    path: /client/get-items-by-type
    method: GET
    data_selector: records
    params: {}
- name: invoke_lambda
  endpoint:
    path: /invoke-lambda
    method: POST
    data_selector: response
    params: {}
- name: http_direct
  endpoint:
    path: /http-direct
    method: POST
    data_selector: response
    params: {}
- name: lambda_provisioned_concurrency
  endpoint:
    path: /lambda/provisioned-concurrency
    method: POST
    data_selector: result
    params: {}
- name: ion_config
  endpoint:
    path: /resources/datomic/ion-config.edn
    method: GET
    data_selector: app-name
    params: {}
- name: cors_headers
  endpoint:
    path: /{proxy+}
    method: OPTIONS
- name: OverrideSettings
  endpoint:
    path: /compute/override-settings
    method: GET
    data_selector: settings
    params: {}
- name: console
  endpoint:
    path: /console
    method: GET
- name: catalog
  endpoint:
    path: /presto-server/etc-samples/catalog/analytics.properties
    method: GET
    data_selector: properties
    params: {}
- name: config
  endpoint:
    path: /presto-server/etc-samples/config.properties
    method: GET
    data_selector: properties
    params: {}
- name: jvm
  endpoint:
    path: /presto-server/etc-samples/jvm.config
    method: GET
    data_selector: config
    params: {}
- name: node
  endpoint:
    path: /presto-server/etc-samples/node.properties
    method: GET
    data_selector: properties
    params: {}
- name: catalog
  endpoint:
    path: /etc-samples/catalog/sample.properties
    method: POST
    data_selector: datomic.client.config
    params: {}
- name: release
  endpoint:
    path: /releases
    method: GET
    data_selector: releases
- name: change_log
  endpoint:
    path: /changes
    method: GET
    data_selector: change_log
- name: catalogs
  endpoint:
    path: /system.metadata.catalogs
    method: GET
    data_selector: catalog_name
- name: schemas
  endpoint:
    path: /information_schema
    method: GET
    data_selector: schemas
- name: tables
  endpoint:
    path: /default_schema
    method: GET
    data_selector: tables
- name: country
  endpoint:
    path: /country
    method: GET
    data_selector: columns
- name: datomic-pro-1.0.7364
  endpoint:
    path: /datomic-pro-downloads.s3.amazonaws.com/1.0.7364/datomic-pro-1.0.7364.zip
    method: GET
- name: Datomic Analytics
  endpoint:
    path: /analytics-configuring.html#connections
    method: POST
    data_selector: database
    params:
      name: <give-it-a-name>
      host: <host>
      port: '8989'
      catalog: <catalog>
      user: admin
      password: <password>
- name: runtime_nodes
  endpoint:
    path: /system/runtime/nodes
    method: GET
    data_selector: results
    params: {}
- name: Client API
  endpoint:
    path: /client/client-api.html
    method: GET
- name: Ion libraries
  endpoint:
    path: /ions/ions-reference.html
    method: GET
- name: Datomic CLI tools
  endpoint:
    path: /operation/cli-tools.html
    method: GET
- name: system_runtime_nodes
  endpoint:
    path: /system/runtime/nodes
    method: GET
    data_selector: records
- name: Datomic Analytics
  endpoint:
    path: /api/analytics
    method: GET
- name: client-cloud
  endpoint:
    path: /client/client-api.html#installing
    method: GET
- name: ion
  endpoint:
    path: /operation/howto.html#ion
    method: GET
- name: ion-dev
  endpoint:
    path: /operation/howto.html#ion-dev
    method: GET
- name: storage
  endpoint:
    path: /operation/upgrading.html#storage-only-upgrade
    method: GET
- name: solo_compute
  endpoint:
    path: /operation/upgrading.html#compute-only-upgrade
    method: GET
- name: production_compute
  endpoint:
    path: /operation/upgrading.html#compute-only-upgrade
    method: GET
- name: query_groups
  endpoint:
    path: /operation/compute-template.html
    method: GET
- name: log
  endpoint:
    path: /reference/log.html
    method: GET
    data_selector: transactions
    params: {}
- name: OverrideSettings
  endpoint:
    path: /api/override-settings
    method: GET
    data_selector: settings
    params: {}
- name: console
  endpoint:
    path: /resources/console.html
    method: GET
    data_selector: content
    params: {}
- name: schema
  endpoint:
    path: /schema/schema.html
    method: GET
    data_selector: content
    params: {}
- name: transactions
  endpoint:
    path: /transactions/transactions.html
    method: GET
    data_selector: content
    params: {}
- name: indexes
  endpoint:
    path: /indexes/indexes.html
    method: GET
    data_selector: content
    params: {}
- name: datomic-pro-1.0.7394
  endpoint:
    path: /datomic-pro-1.0.7394.zip
    method: GET
- name: datomic-pro-1.0.7387
  endpoint:
    path: /datomic-pro-1.0.7387.zip
    method: GET
- name: datomic-pro
  endpoint:
    path: /datomic-pro
    method: GET
- name: Client API
  endpoint:
    path: /client/client-api.html#installing
    method: GET
- name: ion-dev
  endpoint:
    path: /operation/howto.html#ion-dev
    method: GET
- name: ion
  endpoint:
    path: /operation/howto.html#ion
    method: GET
- name: CLI Tools
  endpoint:
    path: /operation/cli-tools.html
    method: GET
- name: Datomic Presto Server
  endpoint:
    path: /analytics/analytics-configuring.html
    method: GET
- name: REBL
  endpoint:
    path: /other-tools/REBL.html
    method: GET
- name: datomic-local
  endpoint:
    path: /datomic-local.html
    method: GET
- name: Storage
  endpoint:
    path: /operation/upgrading.html#storage-only-upgrade
    method: GET
- name: Primary Compute
  endpoint:
    path: /operation/upgrading.html#compute-only-upgrade
    method: GET
- name: Query Group
  endpoint:
    path: /operation/compute-template.html#update
    method: GET
- name: Storage
  endpoint:
    path: /operation/upgrading.html#storage-only-upgrade
    method: GET
    data_selector: records
    params: {}
- name: Primary Compute
  endpoint:
    path: /operation/upgrading.html#compute-only-upgrade
    method: GET
    data_selector: records
    params: {}
- name: Query Groups
  endpoint:
    path: /operation/compute-template.html
    method: GET
    data_selector: records
    params: {}
- name: storage
  endpoint:
    path: /operation/upgrading.html#storage-only-upgrade
    method: GET
- name: primary_compute
  endpoint:
    path: /operation/upgrading.html#compute-only-upgrade
    method: GET
- name: query_groups
  endpoint:
    path: /operation/compute-template.html
    method: GET
- name: log
  endpoint:
    path: /reference/log.html
    method: GET
    data_selector: transactions
    params: {}
- name: tx-range
  endpoint:
    path: /reference/log.html#tx-range
    method: GET
    data_selector: transactions
    params: {}
- name: tx-ids
  endpoint:
    path: /reference/log.html#tx-ids
    method: GET
    data_selector: transaction_ids
    params: {}
- name: tx-data
  endpoint:
    path: /reference/log.html#tx-data
    method: GET
    data_selector: transaction_data
    params: {}
notes:
- Datomic’s dev storage uses an H2 database embedded in the transactor process
- Default configuration exposes H2 on ports 4334 and 4335
- Datomic Cloud requires an AWS account that supports only EC2-VPC.
- All accounts created after Dec 4, 2013 support EC2-VPC.
- Datomic Local stores data to your local filesystem.
- Datomic Local limits the total number of datoms in a transaction to 105.
- Datomic Local is available at no cost and is Apache licensed.
- Datomic Local is in-process with your application code.
- Datomic Local limits strings to 4096 characters.
- Dev storage will persist your data by using local disk files for storage.
- Ensure that the transactor process is running while you work through the guide.
- The complete URI for a database named 'hello' is 'datomic:dev://localhost:4334/hello'.
- Requires a transactor to be running.
- Schema is just data and can be created and manipulated like any other data
- A database is a set of datoms.
- Client object that provides access to a database.
- A database value is the state of the database at a given point in time.
- Datomic uses Datalog for querying.
- Queries can retrieve entities, attributes, or values.
- Client access is securely managed by IAM permissions.
- Datomic databases are updated via ACID transactions.
- Datomic maintains the entire history of your data
- Using pull API can retrieve information about an entity and related entities
- Every transaction in Datomic is its own entity, making it easy to add facts about
  why a transaction was added.
- Datomic's Datalog system allows querying at any point in time.
- The system provides an audit trail for data changes.
- :db.cardinality/many allows a single order to have multiple :order/items
- :db/isComponent true tells Datomic that order items belong to an order
- This method should be called as part of clean shutdown of a JVM process.
- Programs written in other JVM languages should typically set shutdown-clojure to
  true.
- Client access through API Gateway is securely managed by IAM permissions.
- Timeout default is 60000 milliseconds.
- Timeout in msec is optional.
- Specify -1 for no limit in the limit parameter. Defaults to 1000.
- Datomic's log is organized for efficient access by transaction.
- Everything about io-stats is alpha and subject to change in future releases.
- Io-Stats depend on the current state of the caches
- Io-Stats depend on the current state of the indexes
- The tx-with time reported by io-stats is only one component of the total transaction
  time experienced by a caller
- Requesting query-stats adds some overhead to query processing and should be used
  outside of production code.
- Everything about tx-stats is alpha and subject to change in future releases.
- Datomic provides optional support for Cassandra's internal username/password mechanism
  for authentication and authorization.
- Datomic does not support running on a Cassandra cluster that spans datacenters.
- Datomic is not compatible with DynamoDB's Global Tables feature.
- Datomic supports IAM roles.
- Datomic dynamically updates caches as data is used, bringing frequently needed segments
  into closer, lower latency cache tiers.
- The tx-with time reported by io-stats is only one component of the total transaction
  time experienced by a caller.
- Everything about query-stats is alpha and subject to change in future releases.
- Datomic does not support quorum operations in multi-datacenter environments due
  to the negative impact on availability and write performance.
- Error information should be actionable.
- Datomic relies on several third-party libraries, each of which has its own conventions
  for error handling.
- Applications must be prepared to handle arbitrary Java exceptions in addition to
  the information-bearing exceptions.
- The transactor requires a Java 1.6+ Server VM.
- Transactors and peers that use DynamoDB will have the best performance running on
  EC2.
- Datomic is a distributed system.
- Processes become unavailable for various reasons.
- Transactors use the *data-dir* specified in the transactor properties file as the
  storage location.
- 'Insufficient write and/or create-directory permissions can result in the error:
  WARN  default    datomic.index - {:message "merge-db failed", :pid 11316, :tid 22}
  java.io.IOException: No such file or directory'
- In some containerized deployments, there is an issue in thread calculation when
  Health Check Endpoint is enabled.
- Datomic uses storage to coordinate transactor location.
- Peers must be able to reach the transactor at the address specified by either the
  *host* or the *alt-host* property.
- Calling the Datomic API *shutdown* or Clojure *shutdown-agents* function will shut
  down the Peer library.
- Upgrading a schema is an idempotent operation, so it will not harm your data to
  call it more than once.
- Always test a new release of Datomic in a staging environment before upgrading your
  production environment.
- 'With a suitable staging configuration, follow these steps to test a Datomic upgrade:
  Backup the production system, Restore it into the storage used by your staging system.'
- When upgrading a Datomic system's transactors, monitor metrics to determine when
  you can safely failover to the new transactors.
- It is a design objective of Datomic to preserve compatibility across releases to
  the greatest extent possible.
- Generally speaking, you should never downgrade peers or transactors to older versions
  of Datomic.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Datomic does not support Cassandra's multi-datacenter replication.
- For multiple databases, large and/or mission-critical databases should have their
  own dedicated transactor and peer processes.
- When using DynamoDB, ensure to provision enough capacity to avoid throttling.
- Garbage collection should be performed infrequently, e.g. once a day and/or after
  transactor restart.
- For deleted databases in development and testing, clean delete and recreate at the
  storage level is strongly encouraged.
- Running locally against DynamoDB should only be considered for development.
- Datomic reads and queries are horizontally scalable.
- The memory database is a convenience for development, testing, and temp data.
- Datomic transactors have a metric named Alarm which indicates that something has
  gone wrong with a transactor.
- When deploying Datomic in production, you should create a Cloudwatch alarm that
  notifies you if the Datomic Alarm count is ever nonzero.
- Internal monitoring is implementation-specific and subject to change at any time.
- Datomic is a distributed system. Storage services, transactors, and peers are designed
  so that load on one process has minimal impact on other processes.
- High Availability (HA) is a Datomic Pro feature for ensuring the availability of
  a Datomic transactor in the event of a single machine failure.
- Datomic does not automatically retry transactions after a transactor failure.
- Transactors use the data-dir specified in the transactor properties file as the
  storage location.
- 'Insufficient write and/or create-directory permissions can result in the error:
  WARN  default    datomic.index - {:message "merge-db failed", :pid 11316, :tid 22}
  java.io.IOException: No such file or directory.'
- Backup and restore are not suitable for cloning a database within a single storage.
- Backup operations require durable storage and will not work with the :mem database.
- All forms of Datomic caching are transparent to application code.
- Datomic caching requires no configuration other than the overall size of the object
  cache.
- Datomic includes a sample logback configuration file suitable for development at
  `bin/logback.xml`.
- If you do not configure logging for your project, the Datomic peer library will
  not log.
- If you use DynamoDB storage, note that the delete operations performed by *gc-storage*
  count against write provisioning, and you may need to increase provisioning accordingly.
- gc-storage should not be run with a current or recent time, as this has the potential
  to disrupt index values used by long-running processes.
- Datomic's Java system properties are all named via the convention *datomic.somePropertyName*.
- Java callbacks must be static public methods.
- Clojure callbacks must be functions that can take a single argument.
- Effective 12/18/2023, the Datomic team deprecated the tooling `ensure-cft, create-cf-stack,
  and delete-cf-stack`, if you are creating a new system and want automation for running
  on AWS, use Datomic Cloud.
- Do not build systems that rely on internal monitoring.
- Valcache relies on an SSD with the strictatime and lazytime flags set.
- Peers can continue to read and query during a transactor failover.
- Using IAM roles is the preferred method of granting resource access to Datomic peers
  and transactors running in EC2.
- The use of IAM user access keys is deprecated except when used for the initial configuration
  and deployment steps.
- Backup and restore operations require durable storage and will not work with the
  :mem database.
- Excision is irrevocable. You are strongly encouraged to backup a database before
  excising data.
- Excision should never be used to correct erroneous data.
- Datomic caches only immutable data, so all caches are valid forever.
- The connection between clients and the peer server does not support SSL hostname
  validation. Both should be run within trusted network boundaries.
- The transactor AMI is designed as an expendable, commodity resource. It should be
  used once, and fail fast and shut down in the face of any unrecoverable error.
- Uses local in-memory database, does not require a transactor to run.
- Valcache entries in the operational log begin with :valcache.
- The use of IAM user access keys is deprecated except when used for the initial configuration
  and deployment steps (e.g. *ensure-transactor* or *create-cf-stack*).
- Do not use user access keys to provide resource access to peer and transactor processes
  directly.
- Excision is irrevocable.
- Backup before excising data.
- Newer versions of Datomic Cloud are free of licensing-related costs, and the user
  only pays for the hardware that you use to run the system.
- The peer server must be running and connected to the storage.
- The REST service accepts and responds with EDN data.
- Datomic automatically manages storage resources, so start new systems with false
  (the default).
- Datomic CloudFormation templates are stored in S3.
- Users never interact with Client API signing keys, either during development or
  in production.
- Uses AWS credentials to operate or retrieve information about your Datomic system.
- Datomic Cloud is ideal for greenfield projects where you need quick and easy access
  to Datomic on AWS.
- Datomic apps that do not run on AWS must target Datomic Pro.
- Datomic's built-in API Gateways will cover the majority of use cases, but it is
  possible to create your own API Gateways in addition to, or instead of, the API
  Gateways managed by Datomic.
- AWS lambda pricing is entirely usage-based.
- Datomic supports the use of named profiles as a credentials source.
- CloudFormation stack name is the name of your Datomic system, must be shorter than
  24 characters.
- Datomic automatically creates and manages CIDR blocks.
- Treat administer-system as a potentially expensive operation. Call it only when
  you need it, not before every call to connect.
- Datomic utilizes the sourced or specified AWS Credentials to operate or retrieve
  information about your Datomic system.
- The access gateway runs inside a Datomic system's private VPC.
- When transacting continue to retry the request at the application level with your
  own exponential backoff.
- Give up on completing the request if the busy response occurs.
- Datomic nodes run in a security group with tag `Name=(System)-nodes`.
- To allow applications in your existing VPC referring to the Datomic system entry
  point using its DNS name, `entry-http.$(SystemName).$(Region).datomic.net:8182`,
  you must also associate your calling VPC with the Datomic system's Route 53 hosted
  zone.
- Do not delete region-wide shared resources.
- The access gateway is deprecated and is no longer available in Datomic Cloud. This
  page only applies to Datomic 781-9041 and lower.
- Datomic Cloud is configured with a set of well-tested default parameters for scaling
  and provisioning.
- Do not alter system settings without first contacting Datomic Support.
- The schema is composed of ordinary Datomic data.
- Expand the capacity of your system by adding and scaling a query group.
- Give up on completing the request.
- Ensure your AWS creds are connected to a policy that is authorized for your Datomic
  system.
- Make sure your system name and AWS creds are correct.
- Ensure you configured the correct AWS credentials.
- If you encounter this error, install the ion-dev tools.
- If the following error is displayed, then you need a more recent version of the
  Clojure CLI.
- These steps will permanently delete all databases and logs.
- Unique identity is specified through an attribute with :db/unique set to :db.unique/identity.
- Unique value is specified through an attribute with :db/unique set to :db.unique/value.
- :db/valueType cannot be updated after an attribute is created.
- Attribute predicates must be on the classpath of a process that is performing a
  transaction.
- Entity specs can be asserted or retracted at any time and will be enforced starting
  on the transaction after they are asserted.
- Deleting the master stack will make your system temporarily unavailable, but does
  not harm your data.
- Datomic enforces the total number of schema elements to be fewer than 220, which
  includes schema attributes and value types. Attempts to create more than 220 schema
  elements will fail.
- The comparison semantics of NaN make it unavailable for upsert. Upsert in Datomic
  requires the ability to compare the desired new value to any existing value, which
  cannot be done when the existing value is NaN.
- The :db.type/bytes value type has been deprecated because it maps directly to Java
  byte arrays, which do not have value semantics.
- Schema entities are open and can have any attributes you define added to them.
- The access gateway is deprecated and is no longer available in Datomic Cloud.
- Analytics requires an access gateway instance with enough memory to run the analytics
  process.
- Datomic enforces the total number of schema elements to be fewer than 220.
- The comparison semantics of NaN make it unavailable for upsert.
- The :db.type/bytes value type has been deprecated because it maps directly to Java
  byte arrays.
- Many databases need to represent a set of enumerated values.
- Keywords are interned for efficiency.
- Instances are stored as the number of milliseconds since the epoch.
- Strings are limited to 4096 characters in Cloud and Datomic Local. Datomic does
  not enforce this limit in Pro, but users are strongly encouraged to enforce it.
- BigDecimals are limited to 1024 digit precision.
- BigIntegers are limited to a bit length of 8192.
- Comparison semantics of NaN makes it unavailable for upsert.
- Attributes of type :db.type/bytes cannot be unique and cannot be used as lookup
  refs.
- Datomic is designed to facilitate creating correct applications and reasoning about
  the information they produce.
- Datomic enforces the total number of schema elements to be fewer than 220, which
  includes schema attributes and value types.
- Attempts to create more than 220 schema elements will fail.
- All changes happen synchronously.
- We don't recommend re-purposing an old `:db/ident`.
- 'Datomic transactions are ACID: Atomic, Consistent, Isolated, and Durable.'
- Implicit partitions are currently available only in Datomic Pro Edition.
- Named partitions are useful when your domain has a modest number of named categories
  for which you would like to have locality.
- Transaction data is represented as data structures, making it easier to build requests
  programmatically.
- Transaction semantics are unchanged when using hints, even though the db used to
  create hints and the db the transaction is durably incorporated into are different.
- Datomic processes maintain an in-memory cache of parsed query representations.
- To minimize the amount of work the query engine must do, query authors should put
  the most selective or narrowing `:where` clauses first.
- Rules with multiple definitions will evaluate them as different logical paths to
  the same conclusion (i.e. logical OR).
- Rules must unify with the variables already bound, and must bind any variables not
  already bound.
- Map specs can nest arbitrarily
- The wildcard pulls all attributes of an entity
- Datomic is accumulate-only. Information accumulates over time, and change is represented
  by accumulating the new, not by modifying or removing the old.
- Datomic's combination of indexes automatically supports queries associated with
  a number of different storage styles, including row-oriented, column-oriented, document-oriented,
  K/V, and graph.
- Background indexing jobs are both CPU and I/O intensive.
- Indexing could also be distributed across machines, but as of this writing this
  is not the case.
- Filters take a database value and return a new database value that exposes only
  datoms that satisfy a predicate.
- Datomic databases can be filtered with the time-based predicates `as-of` and `since`.
- Datomic data is not stored in separate tables, and any entity can possess any attribute.
- Programs should not assume that an entity will be limited to the set of attributes
  that it has at a given point in time.
- Uses optimistic concurrency controls with db/cas for transactions.
- Ions lets you develop applications for the cloud by deploying your code to a running
  Datomic Cloud compute group.
- Ion applications are arbitrary Clojure code, exposed to consumers via one or more
  entry points.
- AWS lambda names are limited to 64 characters.
- Configuration values may have a lifecycle that is independent of application source
  code.
- The transactor must have at least two CPU cores.
- Install Datomic Cloud Version 884-9095 or later.
- Run a compute group with parameter Ions='yes'
- Push requires a clean git repository and uses the git SHA to name the application
  revision.
- The output of a successful push includes a deploy command.
- Lambda invocations may take longer on the first call due to cold start.
- CORS must be set up for API Gateway if calling from a browser.
- Learn to Authenticate with Cognito
- The above policy is more permissive than most applications will require. Limit the
  policy to only what is necessary.
- Configuring a destination for cast/dev when running in Datomic Cloud is currently
  not supported, and dev calls do not post to CloudWatch.
- Analytics support is in preview.
- Details are subject to change.
- Some performance optimizations are not included in the preview release.
- Analytics support requires Datomic On-Prem version 0.9.5656 or greater.
- Changes to the catalog and properties files require a restart of the presto server.
- Datomic maintains four covering indexes that contain ordered sets of datoms.
- Datomic analytics is implemented via a Datomic connector to Trino
- Ensure to stop and start Trino after any changes to catalog files
- Datomic is designed for efficient writing at transaction time, and for use with
  data sets much larger than can fit in memory.
- Datomic programs do not need to do any API-level caching. Caching is generic, omnipresent,
  and requires little or no configuration.
- For small enough databases, the entire database is in peer caches, which makes data
  access faster than in client/server databases.
- A metaschema is a map with two entries, *:tables* and *:joins*.
- In a production system, one or more codebases depend on your data.
- port is 8989 by default
- user and password default to admin and no password
- 'Database updates often have a two-step structure: Query for database ids using
  an externally unique identifier, Use those database ids as part of a transaction.'
- Datomic's built-in compare-and-swap enables generic optimistic approaches.
- The transact function returns a map whose :db-after key holds value of the database
  immediately after the transaction is applied.
- Datomic's :db/txInstant values must increase monotonically.
- Data imports run significantly faster if you pipeline transactions using the async
  API.
- The :where clauses of Datomic queries are executed in order.
- Datomic's datalog query is simple and declarative.
- You can use a collection binding in a query to match several values specified in
  a collection.
- Pull is usually the simplest way to retrieve a value for a specified attribute for
  a given entity.
- Blanks can be used as placeholders that match anything but do not bind or unify.
- Datomic caches queries, so long as the query argument data structures are evaluated
  as equal.
- Datalog queries are composed of data structures, rather than strings.
- A database value is immutable and multiple calls to query or pull on the same database
  value will return consistent results.
- Datomic's own t time value exactly orders transactions in monotonically ascending
  order.
- With the history filter, your database will have a view that spans time and sees
  all historical datoms.
- When using filters, you will often need to use multiple points in time for a database.
- If you are most interested in retrieving values by or at specific times, the log
  API is the appropriate way to do so.
- Clients created with the :ion server type support the synchronous client API only.
- To use Superset, first follow the steps in the Python setup documentation.
- It is only necessary to run these steps the first time you install Superset.
- Do not store AWS credentials in the Parameter Store, as Datomic Cloud fully supports
  IAM roles.
- The JDBC analytics connection is read-only and intended for analytics applications
  and is not low latency.
- Presto server requires Java 11.
- Datomic provides multiple powerful tools for composing transactions that enforce
  domain invariants.
- Push requires a clean git repository
- S3 put permissions are needed for the push operation
- While you can delete a compute stack at any time without loss of data, it is often
  useful to instead temporarily turn down unused compute capacity in a Datomic system.
- AWS charges apply for lambda-provisioned concurrency.
- You can delete your Datomic Cloud system after deploying an Ion.
- Requests will now be passed to your application which will be responsible for adding
  the desired CORS headers.
- Always test changes in a non-production environment before applying them to your
  live system.
- Consult with Datomic Support prior to making any modifications.
- Analytics support is in preview. Details are subject to change.
- Changes to catalog and properties files require a restart of the presto server.
- Datomic analytics can be launched with Trino's `bin/launcher` command.
- Always test new releases in a staging environment first.
- Always take a backup before adopting a new release.
- Each entry in the :tables map results in the creation of a SQL table, containing
  all entities that include that membership attr.
- By default, the columns of each SQL table correspond to all Datomic attributes with
  the same namespace as the membership attr.
- Memory settings for the transactor must be explicitly specified in the transactor
  properties file.
- Transactors are now more robust in the face of transient errors writing to storage.
- The user and password are your Trino server passwords, which default to admin and
  no password by default.
- Datomic 1.0.7277 will be the last feature release that runs on Clojure 1.9. Starting
  with the following release, new Datomic feature releases will require Clojure 1.11.4.
- Datomic releases after March 31st, 2023 will no longer support running on Java 8.
- Users should backup existing databases before upgrading to this release.
- The first indexing job after upgrading to 0.9.4880 or later will take longer and
  perform more I/O than a normal indexing job.
- Datomic team recommends using a Python virtualenv for any Python-based analytics
  tools.
- If you have multiple versions of Python 3+ installed, use version 3.6 or greater.
- Datomic cloud AMIs are free of any markup outside the AWS marketplace under the
  Apache 2.0 license.
- If you were using Solo you can upgrade to Production at no additional cost.
- Datomic's database log is a recording of all transaction data in historic order.
- Datomic is a database, so problem reports about Datomic tend to be about putting
  data in, getting data out, or both.
- It is often useful to instead temporarily turn down unused compute capacity in a
  Datomic system.
- Preflight OPTIONS requests are blocked by the CORS policy when using Cognito to
  authorize requests to an API Gateway HTTP direct $default.
- The console is a web application that requires a server to be started.
- 'New feature: AWS memcached auto-discovery'
- Improved performance for query under heavy parallel load
- 'New: memory settings for the transactor must be explicitly specified in the transactor
  properties file.'
- Better error messages for invalid S3 backup URL, attempting to back up a database
  that does not exist.
- Datomic 1.0.7277 will be the last feature release that runs on Clojure 1.9.
- Clojure applications that use the Datomic Peer library will have to upgrade to Clojure
  1.11.4.
- All users of Datomic are encouraged to move to this release.
- As always, we recommend taking a backup before adopting a new release.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Invalid SKU: Check the SKU format'
- 'Transaction failed: Ensure the transaction data is valid'
- '::cognitect.anomalies/busy: For transactions, continue to retry with exponential
  backoff.'
- '::cognitect.anomalies/unavailable: API timeouts cause this anomaly.'
- '::cognitect.anomalies/incorrect: Query is referencing unbound variables.'
- 'Arbitrary Java Exceptions: Applications must be prepared to handle arbitrary Java
  exceptions in addition to the information-bearing exceptions described above.'
- 'Wrapped Exceptions: Error handling routines should be prepared to walk cause chains
  to find the ''interesting'' exceptions.'
- 'Marshalling Errors: If a transaction function throws an exception that includes
  unserializable data Datomic will be unable to marshal it and can at best report
  a generic error.'
- 'Arbitrary Java Exceptions: Applications must be prepared to handle arbitrary Java
  exceptions.'
- 'Wrapped Exceptions: Error handling routines should be prepared to walk cause chains
  to find the interesting exceptions.'
- 'Marshalling Errors: If a transaction function throws an exception that includes
  unserializable data, Datomic will be unable to marshal it and can at best report
  a generic error.'
- 'com.datastax.driver.core.exceptions.NoHostAvailableException: All host(s) tried
  for query failed'
- 'HornetQNotConnectedException HQ119007: Cannot connect to server(s). Tried with
  all available servers.'
- 'WARN  default    datomic.index - {:message "merge-db failed", :pid 11316, :tid
  22} java.io.IOException: No such file or directory'
- Unable to start ping endpoint localhost:9999
- 'Caused by: clojure.lang.ExceptionInfo: Error communicating with HOST 0.0.0.0 on
  PORT 4334'
- Task java.util.concurrent.FutureTask rejected from java.util.concurrent.ThreadPoolExecutor
- 'Unsupported protocol error: CompilerException java.lang.IllegalArgumentException:
  :db.error/unsupported-protocol Unsupported protocol :dev, compiling:(core.clj:36:11)'
- 'WARN default datomic.index - {:tid 645868, :pid 20809, :message "merge-one-index
  failed"} java.lang.Exception: Key not found:'
- 'Caused by: clojure.lang.ExceptionInfo: Error communicating with HOST 0.0.0.0 on
  PORT 4334 {:alt-host nil, :peer-version 2, :password "...", :username "...", :port
  4334, :host "0.0.0.0", :version "0.9.5130", :timestamp 1449708475587, :encrypt-channel
  true}'
- Task java.util.concurrent.FutureTask@7ff48e13 rejected from java.util.concurrent.ThreadPoolExecutor@3407eed0[Shutting
  down, pool size = 7, active threads = 7, queued tasks = 0, completed tasks = 7]
- 'java.lang.IllegalArgumentException: :backup/claim-failed Backup storage already
  used by...'
- 'gc-deleted-dbs has two weaknesses when compared to deleting the underlying storage:
  Datomic must walk all the data structures associated with deleted databases, which
  takes time proportional to the size of the deleted data; Datomic does not mark all
  garbage in all cases, so gc-deleted-dbs will reclaim most (but not necessarily all)
  storage used by deleted databases.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Excision is permanent and unrecoverable, short of restoring a backup.
- Excision puts a substantial burden on background indexing.
- If errors are reported, fix them, then repeat the process.
- Excision is permanent and unrecoverable.
- '403 Forbidden: Insufficient IAM permissions'
- '404 Not Found: Check the resource path and permissions'
- 'CompilerException clojure.lang.ExceptionInfo: Expected string for :query-group'
- ExceptionInfo Forbidden to read keyfile
- 'Unable to connect to system: {:cognitect.anomalies/category :cognitect.anomalies/fault,
  :cognitect.anomalies/message "SOCKS4 tunnel failed, connection closed"}'
- 'java.lang.NoClassDefFoundError: javax/xml/bind/DatatypeConverter'
- Loading database
- 'AccessDeniedException: Ensure you configured the correct AWS credentials.'
- 'SOCKS4 tunnel failed, connection closed: This error occurs when the connection
  is unable to find a Datomic Socks proxy.'
- 'Connection refused: This error will be displayed when using the datomic-access
  if the connection or proxy process has failed.'
- 'DELETE_FAILED: Correct by removing API mappings for the API from your custom domain
  names'
- 'resource sg-<uuid> has a dependent object: Ensure to delete network interface.'
- SOCKS4 tunnel failed, connection closed
- 'busy: Your request rate has temporarily exceeded the capacity of a node.'
- 'DELETE_FAILED: Correct by removing all API mappings for the API from your custom
  domain names.'
- 'resource sg-<uuid> has a dependent object: Correct by deleting the network interface
  associated with the stack.'
- 'cognitect.anomalies/incorrect: Entity missing required attributes.'
- 'cognitect.anomalies/incorrect: Entity failed predicate check.'
- ExceptionInfo Datomic Client Timeout clojure.core/ex-info (core.clj:4739)
- Indexing falling behind as it is unable to write segments to DynamoDB fast enough.
- 'StatusCode 200: Indicates successful invocation'
- 'StatusCode 400: Check your request payload'
- 'StatusCode 500: Internal server error; check logs for details'
- Error messages and stack traces have a bad reputation among developers and end users
  alike, but they are your best friends when you are creating a problem report.
- Configuration changes may impact system performance.
- Fixed regression introduced in 1.0.7010 where query thread pool could deadlock under
  highly concurrent load.
- Release 0.9.6045 fixes regression introduced in 0.9.6014 where datoms return incorrect
  results.
auth_info:
  mentioned_objects:
  - IAM
  - AWS credentials
  - Client API signing keys
  - IAM policy
client:
  base_url: http://localhost:8001
source_metadata: null
