resources:
- name: task
  endpoint:
    path: /api/v2/task/sync
    method: POST
    data_selector: task_response
- name: task
  endpoint:
    path: /task/sync
    method: POST
    data_selector: task
    params: {}
- name: brand_safety_classes
  endpoint:
    path: /api/brand-safety/classes
    method: GET
    data_selector: classes
- name: animal_genitalia_and_human
  endpoint:
    path: /animal_genitalia_and_human
    method: GET
    data_selector: records
    params: {}
- name: animal_genitalia_only
  endpoint:
    path: /animal_genitalia_only
    method: GET
    data_selector: records
    params: {}
- name: animated_animal_genitalia
  endpoint:
    path: /animated_animal_genitalia
    method: GET
    data_selector: records
    params: {}
- name: no_animal_genitalia
  endpoint:
    path: /no_animal_genitalia
    method: GET
    data_selector: records
    params: {}
- name: animal_genitalia_and_human
  endpoint:
    path: /animal/genitalia_and_human
    method: GET
    data_selector: records
- name: animal_genitalia_only
  endpoint:
    path: /animal/genitalia_only
    method: GET
    data_selector: records
- name: animated_animal_genitalia
  endpoint:
    path: /animated/animal_genitalia
    method: GET
    data_selector: records
- name: no_animal_genitalia
  endpoint:
    path: /no/animal_genitalia
    method: GET
    data_selector: records
- name: animal_genitalia_and_human
  endpoint:
    path: /animal/genitalia/and/human
    method: GET
    data_selector: records
    params: {}
- name: animal_genitalia_only
  endpoint:
    path: /animal/genitalia/only
    method: GET
    data_selector: records
    params: {}
- name: animated_animal_genitalia
  endpoint:
    path: /animated/animal/genitalia
    method: GET
    data_selector: records
    params: {}
- name: no_animal_genitalia
  endpoint:
    path: /no/animal/genitalia
    method: GET
    data_selector: records
    params: {}
- name: animal_genitalia_and_human
  endpoint:
    path: /animal/genitalia/human
    method: GET
- name: animal_genitalia_only
  endpoint:
    path: /animal/genitalia/only
    method: GET
- name: animated_animal_genitalia
  endpoint:
    path: /animated/animal/genitalia
    method: GET
- name: no_animal_genitalia
  endpoint:
    path: /no/animal/genitalia
    method: GET
- name: hanging_head
  endpoint:
    path: /visual_moderation/hanging_head
    method: GET
    data_selector: records
- name: gun_head
  endpoint:
    path: /visual_moderation/gun_head
    method: GET
    data_selector: records
- name: knife_head
  endpoint:
    path: /visual_moderation/knife_head
    method: GET
    data_selector: records
- name: blood_head
  endpoint:
    path: /visual_moderation/blood_head
    method: GET
    data_selector: records
- name: visual_moderation_classes
  endpoint:
    path: /visual/moderation/classes
    method: GET
    data_selector: classes
- name: middle_finger
  endpoint:
    path: /moderation/middle_finger
    method: GET
    data_selector: detailed_class_descriptions
    params: {}
- name: qr_code
  endpoint:
    path: /docs/classifications/qr-codes-head
    method: GET
    data_selector: yes_qr_code
- name: self_harm_intent
  endpoint:
    path: /self_harm_intent
    method: GET
    data_selector: records
- name: text_moderation_explanations
  endpoint:
    path: /task/sync
    method: POST
    data_selector: text
    params: {}
- name: submit_task
  endpoint:
    path: /api/v2/task/sync
    method: POST
    data_selector: task
    params: {}
- name: task
  endpoint:
    path: /task/sync
    method: POST
    data_selector: response
    params: {}
- name: task
  endpoint:
    path: /api/v2/task/sync
    method: POST
    data_selector: null
    params: {}
- name: task
  endpoint:
    path: /api/v2/task/sync
    method: POST
    data_selector: response
    params: {}
- name: logo_detection
  endpoint:
    path: /logo-detection
    method: POST
    data_selector: detections
- name: translation_task
  endpoint:
    path: /api/v2/task/sync
    method: POST
    data_selector: response
    params: {}
- name: contextual_scene_classification
  endpoint:
    path: /contextual-scene-classification
    method: POST
    data_selector: classes
    params: {}
- name: content_classes
  endpoint:
    path: /api/content-classes
    method: GET
    data_selector: classes
- name: people_counting
  endpoint:
    path: /reference/people-counting-1
    method: POST
    data_selector: classification
- name: detection
  endpoint:
    path: /detection
    method: POST
- name: AI-Generated Image and Video Detection
  endpoint:
    path: /ai-generated-image-and-video-detection
    method: POST
- name: audio_detection
  endpoint:
    path: /reference/ai-generated-audio-detection-1
    method: POST
    data_selector: classes
- name: ai_generated_music_detection
  endpoint:
    path: /api/v1/music-detection
    method: POST
    data_selector: results
    params: {}
- name: face_similarity
  endpoint:
    path: /api/v2/task/sync
    method: POST
    data_selector: similarity_score
- name: aesthetic_classification
  endpoint:
    path: /aesthetic/classification
    method: POST
    data_selector: classification
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params: {}
- name: Unnest Array Function
  endpoint:
    path: /functions/unnest-array
    method: POST
    data_selector: output
    params: {}
- name: text_classification
  endpoint:
    path: /docs/automl-text-classification
    method: GET
- name: image_classification
  endpoint:
    path: /docs/automl-image-classification
    method: GET
- name: Image Classification
  endpoint:
    path: /automl/image-classification
    method: POST
    data_selector: model
- name: Visual Moderation
  endpoint:
    path: /automl/visual-moderation
    method: POST
    data_selector: model
- name: training_options
  endpoint:
    path: /docs/training-options
    method: GET
    data_selector: options
- name: snapshot_options
  endpoint:
    path: /docs/snapshot-options
    method: GET
    data_selector: options
- name: searchable_model_options
  endpoint:
    path: /docs/hyperparameter-search
    method: GET
    data_selector: model_options
    params: {}
- name: evaluations
  endpoint:
    path: /evaluations
    method: POST
    data_selector: results
- name: deployments
  endpoint:
    path: /deployments
    method: GET
- name: hive_models
  endpoint:
    path: /hive_models
    method: GET
- name: image_search
  endpoint:
    path: /reference/web-intelligence-reverse-image-search-1
    method: GET
    data_selector: results
- name: nft_search
  endpoint:
    path: /nft-search
    method: POST
    data_selector: matches
- name: add
  endpoint:
    path: /api/v2/custom_index/add/sync
    method: POST
- name: query
  endpoint:
    path: /api/v2/custom_index/query/sync
    method: GET
- name: remove
  endpoint:
    path: /api/v2/custom_index/remove/sync
    method: DELETE
- name: add
  endpoint:
    path: /add/sync
    method: POST
- name: query
  endpoint:
    path: /query/sync
    method: GET
- name: remove
  endpoint:
    path: /remove/sync
    method: DELETE
- name: Add Image
  endpoint:
    path: /add
    method: POST
- name: Query Image
  endpoint:
    path: /query
    method: POST
- name: Remove Image
  endpoint:
    path: /remove
    method: POST
- name: Add Image
  endpoint:
    path: /add
    method: POST
- name: Query Image
  endpoint:
    path: /query
    method: POST
- name: Remove Image
  endpoint:
    path: /remove
    method: POST
- name: media_search
  endpoint:
    path: /media_search
    method: GET
    data_selector: matches
- name: celebrity_recognition
  endpoint:
    path: /celebrity_recognition
    method: GET
    data_selector: detections
- name: likeness_detection
  endpoint:
    path: /likeness_detection
    method: GET
    data_selector: classifications
- name: task_sync
  endpoint:
    path: /task/sync
    method: POST
    data_selector: response
    params: {}
- name: likeness_detection
  endpoint:
    path: /api/v2/task/sync
    method: POST
    data_selector: classes
- name: media_search
  endpoint:
    path: /media/search
    method: POST
    data_selector: task.status.output
    params: {}
- name: chat.completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params:
      max_tokens: 50
- name: image_generation
  endpoint:
    path: /image/generate
    method: POST
    data_selector: generated_images
- name: image_generation
  endpoint:
    path: /black-forest-labs/flux-schnell
    method: POST
    data_selector: output
    params: {}
- name: video_generation
  endpoint:
    path: /video/generate
    method: POST
    data_selector: video_url
- name: speech_generation
  endpoint:
    path: /api/v1/task/async
    method: POST
    data_selector: audio_link
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
- name: task_sync
  endpoint:
    path: /api/v2/task/sync
    method: POST
    data_selector: results
    params: {}
- name: async_task
  endpoint:
    path: /api/v2/task/async
    method: POST
    data_selector: null
    params: {}
- name: custom_index_add
  endpoint:
    path: /api/v1/custom_index/your_custom_index_id/add/async
    method: POST
    data_selector: null
    params: {}
- name: custom_index_remove
  endpoint:
    path: /api/v1/custom_index/test-id/remove/async
    method: POST
    data_selector: null
    params: {}
- name: task_sync
  endpoint:
    path: /api/v2/task/sync
    method: POST
    params:
      legacy: '1'
- name: task
  endpoint:
    path: /api/v2/task
    method: POST
    data_selector: task_ids
    params: {}
- name: task_sync
  endpoint:
    path: /api/v2/task/sync
    method: POST
    data_selector: null
- name: moderation_rules
  endpoint:
    path: /moderation/rules
    method: POST
    data_selector: rules
    params: {}
- name: content_metadata
  endpoint:
    path: /metadata/content
    method: POST
    data_selector: content_metadata
- name: user_metadata
  endpoint:
    path: /metadata/user
    method: POST
    data_selector: user_metadata
- name: spam_manager
  endpoint:
    path: /spam-manager
    method: GET
    data_selector: spam_records
- name: spam_users
  endpoint:
    path: /spam-users
    method: GET
    data_selector: users
- name: report
  endpoint:
    path: /api/v1/report
    method: POST
    data_selector: ''
    params: {}
- name: User Content Feed
  endpoint:
    path: /user-content-feed
    method: GET
    data_selector: user_generated_content
- name: Users Feed
  endpoint:
    path: /users-feed
    method: GET
    data_selector: users
- name: create_appeal
  endpoint:
    path: /api/v1/appeals/create
    method: POST
    data_selector: appeal_id
- name: get_appeal_status
  endpoint:
    path: /api/v1/appeals/status
    method: GET
    data_selector: status
- name: policies
  endpoint:
    path: /api/policies
    method: POST
    data_selector: policies
    params: {}
- name: sync_task
  endpoint:
    path: /api/v2/task/sync
    method: POST
- name: async_task
  endpoint:
    path: /api/v2/task/async
    method: POST
- name: v1_sync_task
  endpoint:
    path: /api/v1/task/sync
    method: POST
- name: v1_async_task
  endpoint:
    path: /api/v1/task/async
    method: POST
- name: report_to_ncmec
  endpoint:
    path: /ncmec/report
    method: POST
    data_selector: report
    params: {}
- name: Okta SSO
  endpoint:
    path: /sso/saml/acs
    method: POST
    data_selector: response
    params: {}
- name: SAML Integration
  endpoint:
    path: /sso/saml/acs
    method: POST
    data_selector: response
- name: async_task
  endpoint:
    path: /api/v1/task/async
    method: POST
    data_selector: user_id, post_id
    params: {}
- name: task_sync
  endpoint:
    path: /api/v1/task/sync
    method: POST
- name: watchlist
  endpoint:
    path: /api/v1/task/sync
    method: POST
    data_selector: triggered_rules
    params:
      check_watchlists: 'true'
- name: synchronous_submission
  endpoint:
    path: /api/v2/task/sync
    method: POST
    data_selector: output
- name: asynchronous_submission
  endpoint:
    path: /api/v2/task/async
    method: POST
    data_selector: output
- name: task
  endpoint:
    path: /api/v2/task/sync
    method: POST
    data_selector: response
    params: {}
- name: task_sync
  endpoint:
    path: /api/v2/task/sync
    method: POST
    data_selector: null
    params: {}
- name: task_sync
  endpoint:
    path: /api/v2/task/sync
    method: POST
    data_selector: response
    params: {}
- name: task_sync
  endpoint:
    path: /api/v2/task/sync
    method: POST
    data_selector: response
    params: {}
- name: task_async
  endpoint:
    path: /task/async
    method: POST
    data_selector: null
    params: {}
- name: task_sync
  endpoint:
    path: /task/sync
    method: POST
    data_selector: null
    params: {}
- name: task_sync
  endpoint:
    path: /task/sync
    method: POST
    data_selector: results
- name: task_sync
  endpoint:
    path: /api/v2/task/sync
    method: POST
    data_selector: results
- name: task_sync
  endpoint:
    path: /task/sync
    method: POST
    data_selector: response
    params: {}
- name: tasks_sync
  endpoint:
    path: /task/sync
    method: POST
- name: tasks_async
  endpoint:
    path: /task/async
    method: POST
- name: task_async
  endpoint:
    path: /api/v1/task/async
    method: POST
    data_selector: task_id
    params: {}
- name: task_summary
  endpoint:
    path: /task
    method: GET
    data_selector: object
    params:
      task_id: dd52c0d0-9ec7-11ea-98a3-4b92424b8366
      frame_limit: 1000
- name: callback
  endpoint:
    path: /api/v1/task/callback
    method: POST
    data_selector: response
    params: {}
- name: submit_stream_video_frames
  endpoint:
    path: /stream/frame
    method: POST
    data_selector: stream_id
    params: {}
- name: submit_audio_stream
  endpoint:
    path: /stream/audio
    method: POST
    data_selector: ''
    params: {}
- name: stop_stream
  endpoint:
    path: /api/v2/stream/cancel
    method: POST
    data_selector: stream_id
    params: {}
- name: stream_status
  endpoint:
    path: /api/v2/stream/status
    method: GET
    data_selector: stream_id
    params: {}
- name: active_streams
  endpoint:
    path: /stream/active
    method: GET
    data_selector: active_stream_count
    params: {}
- name: send_feedback
  endpoint:
    path: /feedback_data
    method: POST
    data_selector: null
    params: {}
- name: text_moderation
  endpoint:
    path: /text/moderation
    method: POST
    data_selector: status
    params: {}
- name: text_moderation
  endpoint:
    path: /moderation/explain
    method: POST
    data_selector: output
- name: image_detection
  endpoint:
    path: /detect/image
    method: POST
    data_selector: output
    params: {}
- name: video_detection
  endpoint:
    path: /detect/video
    method: POST
    data_selector: output
    params: {}
- name: text_detection
  endpoint:
    path: /api/v1/text_detection
    method: POST
    data_selector: response.output
    params: {}
- name: submit_video
  endpoint:
    path: /submit/video
    method: POST
- name: get_task_summary
  endpoint:
    path: /get/task/summary
    method: GET
- name: speech_moderation
  endpoint:
    path: /speech/moderation
    method: POST
- name: text_recognition
  endpoint:
    path: /reference/text-recognition-ocr
    method: GET
    data_selector: output
    params: {}
- name: ocr_moderation
  endpoint:
    path: /ocr/moderation
    method: POST
    data_selector: results
- name: logo_location
  endpoint:
    path: /reference/logo-location
    method: GET
- name: translation
  endpoint:
    path: /translate
    method: POST
    data_selector: status.response
    params: {}
- name: task_status_output
  endpoint:
    path: /people-counting
    method: GET
    data_selector: output
    params: {}
- name: aesthetic_classification
  endpoint:
    path: /aesthetic/classification
    method: POST
- name: classifier
  endpoint:
    path: /csam-detection/classifier
    method: POST
    data_selector: file
    params: {}
- name: sync_task
  endpoint:
    path: /task/sync
    method: POST
    data_selector: response
    params: {}
- name: async_task
  endpoint:
    path: /task/async
    method: POST
    data_selector: response
    params: {}
- name: Media Search
  endpoint:
    path: /reference/media-search-1
    method: GET
- name: Celebrity Recognition
  endpoint:
    path: /reference/celebrity-recognition-1
    method: GET
- name: Likeness Detection
  endpoint:
    path: /reference/likeness-detection-1
    method: GET
- name: recognition
  endpoint:
    path: /api/celebrity_recognition
    method: POST
    data_selector: status.response.output
- name: task_status
  endpoint:
    path: /get-task-status
    method: GET
    data_selector: output
    params: {}
- name: task_sync
  endpoint:
    path: /api/v2/task/sync
    method: GET
- name: task_async
  endpoint:
    path: /api/v2/task/async
    method: GET
- name: reverse_image_search
  endpoint:
    path: /web-search
    method: GET
    data_selector: status.output.matches
    params: {}
- name: add_to_custom_index
  endpoint:
    path: /api/v2/custom_index/add/sync
    method: POST
- name: query_custom_index
  endpoint:
    path: /api/v2/custom_index/query/sync
    method: GET
- name: remove_from_custom_index
  endpoint:
    path: /api/v2/custom_index/remove/sync
    method: DELETE
- name: add_to_custom_index_sync
  endpoint:
    path: /custom_index/add/sync
    method: POST
- name: add_to_custom_index_async
  endpoint:
    path: /custom_index/add/async
    method: POST
- name: query_custom_index_sync
  endpoint:
    path: /custom_index/query/sync
    method: GET
- name: query_custom_index_async
  endpoint:
    path: /custom_index/query/async
    method: GET
- name: remove_from_custom_index_sync
  endpoint:
    path: /custom_index/remove/sync
    method: DELETE
- name: remove_from_custom_index_async
  endpoint:
    path: /custom_index/remove/async
    method: DELETE
- name: nft_search
  endpoint:
    path: /nft-search
    method: POST
    data_selector: matches
    params: {}
- name: video_generation
  endpoint:
    path: /video_generation
    method: POST
    data_selector: output.videos
    params: {}
- name: task
  endpoint:
    path: /tasks
    method: GET
    data_selector: output
notes:
- New V3 API is open for self-serve use—no project setup with Sales required.
- Default input size is 1024 characters, which can be extended in special situations.
- Users can manage custom text filters directly from the API Dashboard.
- Moderation Dashboard is an add-on designed to complement existing APIs.
- All media and results retention will follow the retention policy set on thehive.ai.
- Playgrounds run on Hive's V3 APIs, which are open for self-serve use.
- The Hive API simply returns classification metadata based on model outputs.
- Test instantly in the Playground (100 req/day limit).
- Need higher throughput? Reach out to enable an Enterprise project with higher limits.
- V3 returns the same class names and confidence scores as V2
- For optimum results, a model confidence score threshold of >.90 is a good place
  to start
- Brand Suitability ratings are available by request for each of these Brand Safety
  classes.
- This model head can be used to flag images containing visible female cleavage.
- It does not flag male cleavage, fully exposed breasts, or cleavage shown in animations,
  drawings, and other non-photographic depictions.
- This model head flags images of women wearing visible swimwear (e.g., without other
  clothing). It does not capture underwear such as regular bras and panties, nor does
  it flag nudity.
- Art, animations, drawings, and other representational depictions follow the same
  definitions as photographs for this model head.
- Updated 2 months ago
- This model head can be used to flag images containing sports bras and other bra-like
  clothing items that are not generally considered to be underwear.
- This model head can be used to flag images containing bottoms that are worn during
  exercise.
- The animal_genitalia_only class will not be flagged by general_nsfw or other sexual
  classes. Similarly, animal_genitalia_and_human and animated_animal_genitalia may
  not be flagged if human nudity is not shown.
- For the purposes of the model, a child is considered to be anyone 11 years of age
  or younger.
- Art, animations, drawings, and other representational depictions of (photorealistic)
  guns are classified as animated_gun.
- The model classifies animations, drawings, and other non-photographic depictions
  of knives and blades as no_knife.
- The model classifies animations, drawings, diagrams, paintings, or other artwork
  in the same way as photographs.
- The model classifies animations, drawings, diagrams, paintings, graphics, illustrations,
  etc. in the same way as photographs.
- This model head can be used to flag images that contain a QR code.
- Hateful or discriminatory language targeted at a specific individual or a specific
  group of people is typically flagged as bullying instead of or in addition to hate.
- This model head covers a broader range of content than the existing Self Harm Head.
- The maximum amount of characters for the input text is 1024.
- Models are optimized for images with 150 words or fewer.
- Our OCR models are optimized for images with 150 words or fewer.
- Supports local files and URLs for media submission
- Hive's logo model can detect logos on a wide variety of objects and locations.
- Text inputs are limited to 512 characters.
- For convenience, these IDs are appended to the beginning of the each Hive Response
  ID.
- Parent ID is not included within our supported classes.
- The API accepts both images and videos.
- Response includes one classification per frame.
- Detects multiple objects of different classes per image.
- The model helps customers protect themselves from the potential misuse of AI-generated
  and synthetic content.
- Identifying and removing deepfakes across online platforms is crucial.
- Confidence scores are provided for each classification for easy interpretation of
  results.
- The API serves multiple purposes in the music industry, including copyright attribution.
- If there are no faces detected in either image, then the API call will fail.
- The API scores images and videos based on their aesthetic qualities.
- The score returned is a real number between 0 and 10.
- The CSAM Detection Project comes with its own API key—use it in the Authorization
  header whenever you call our endpoints.
- If you use other Hive models, keep their keys separate, even though the API URL
  is the same.
- Videos will always be billed at 1FPS in this endpoint.
- A snapshot is an immutable point-in-time version of a dataset that is used to train
  an AutoML model.
- Multiple snapshots can be created from the same dataset and multiple models can
  be trained from the same snapshot.
- Training options include Validation Strategy, Total Epochs/Steps, Evaluation Steps,
  Best Model Label, Best Model Metric.
- The API Key used to authenticate each type of request will be the same for all three
  endpoints.
- Querying an image will not automatically add it to the index.
- 'Hive’s Intellectual Property Detection suite includes three APIs: Media Search,
  Celebrity Recognition, and Likeness Detection.'
- The model classifies an entire image based on the presence of popular characters
  and artworks.
- Queries return up to 5 videos/images that are the closest matches based on similarity
  scores.
- Currently, the VLM only supports synchronous task submission.
- The VLM has a default starting rate limit of 1 request per second.
- Keep your API Key secure. Do not expose it in client-side environments like browsers
  or mobile apps.
- Content moderation is enabled by default on all image generation models.
- Text prompts have a character limit of 250.
- Each video is two seconds long and has a frame rate of 8 frames per second.
- Other limitations may apply regarding file size, media length, resolution, and codecs
  used based on the project configuration.
- Models can include various types such as visual, text, ai_generated_media, etc.
- Requires setup of connected app in API
- All submissions must include post_id and user_id fields.
- Migration to POST Requests - only support POST requests to your Actions server starting
  September 1st, 2022.
- Different platforms have different content policies and risk sensitivities.
- Thresholds allow the Dashboard to know what categories a post should be classified
  as based on the conditions you set.
- All tables (Domains, URLs, Phone, Email, Users) will only show data from the last
  14 days.
- Duplicate Text Content tab will only show duplicate content that is greater than
  35 characters and has been posted more than once.
- Report tasks can only be reported if they have been submitted through the Dashboard
  API first.
- Default Review Feeds have a shared 10K task limit.
- Tasks assigned to moderators will have 5 minutes to submit for review.
- Each application will have Admin and Moderator permission groups.
- Please ensure the Slack Bot is invited to the channel you want to send alerts to
- Return judgement_id option must be checked in Appeals Settings to use Appeals features.
- 'Integration with Rules and Actions: Apply policies to automated rules and manual
  actions.'
- To use this feature, you must have valid NCMEC credentials.
- CSAM images will automatically be sent to the Review Feed for Review.
- Hive currently only supports Identity Provider-initiated sign-on with Okta, Amazon
  IAM Identity Center, and PingOne.
- To enable self-serve SSO capabilities, provide Hive with your organization's email
  domain.
- Requires setup of an Okta OIDC application for SSO integration
- All default values should work except for a few required attribute changes listed
  in the documentation.
- Use the adjacent button to copy the Client ID to your clipboard.
- Use the adjacent button to copy the Client Secret to your clipboard.
- Use the adjacent button to copy the Issue ID to your clipboard.
- Requires setup of PingOne SSO in your environment
- Entity ID should be 'hive'
- All required attributes are listed under the Application metadata section.
- Make sure Organization Instance of IAM Identity Center is created.
- You can only submit one piece of content (text_data OR url) per API request.
- Only one model is supported in the models array.
- You can only send one piece of content per API request with the v1 endpoint. You
  will not be able to send both text_data and url in the same request.
- Use watchlists to match against post content or metadata.
- API Key is required for each request as a header.
- API responses include classification metrics detailing sensitive subject matter.
- The default maximum length for text submissions is 1024 characters.
- For synchronous requests, the Hive API will generally return a response within 100
  ms for a typical short message string and within 500 ms for a max length (1024 character)
  submission.
- For this guide, we'll use placeholder values for patron_id and post_id throughout.
- Moderation Dashboard uses default settings based on results from the visual moderation
  model.
- Use your real API Key instead of our placeholder.
- Each project is assigned two API keys for flexible key rotation.
- Synchronous endpoint keeps the HTTP request open until results have finished processing.
- Visit our Authentication page for details on obtaining and using your keys securely.
- Synchronous API is preferred for real-time needs.
- Asynchronous API is preferred for large batches.
- You must contact Hive to have streams allocated to your project before you can use
  this feature.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Visual detection models localize an object of interest in an image by returning
  a box that bounds that object, as well as the type of that object.
- We are aware of an issue where start_index and end_index may be offset or misaligned
  relative to the text input in some cases.
- The model returns C2PA metadata if applicable, which provides information about
  an image's origin.
- Model breaks text into chunks of 2048 characters for classification.
- Hive's AI-Generated Music Detection API takes a video or audio clip and determines
  whether or not the music in the clip is AI-generated.
- Uses OAuth2 with refresh token
- Outputs a transcript and a set of classifications, timestamps and indexes for each
  sentence in the transcript.
- Hive’s logo model response format is an instantiation of the detection response
  format that outputs logos and logo placements.
- The Translation API uses a multi-lingual model to translate between languages while
  preserving meaning and fluency.
- If there are multiple faces in either image, only the largest face will be analyzed.
- The model classifies each input image or video using six different categories, with
  each category corresponding to the number of unique people present in that input.
- 'Deprecated Endpoint: Soon, we will no longer be offering separate endpoints for
  our Hash Matching and Classifier CSAM detection models. Moving forward, customers
  should use our combined endpoint.'
- Soon, we will no longer be offering separate endpoints for our Hash Matching and
  Classifier CSAM detection models.
- Detects presence of well-known figures in images.
- 'Include the API Key in the header of your POST request (''authorization: token
  <YOUR_API_KEY>'').'
- The API key will be sent via email after signing up for the project.
- The API keys to authenticate tasks is the same for all three endpoints (add, query,
  remove).
- Each Custom Search project has a unique API key that will need to be included in
  the API request.
- 'Images will not be returned if they are flagged for any of the following moderation
  categories: NSFW, nudity, and blood.'
- Each generated video is two seconds long and has a frame rate of 8 frames per second
  (16 frames total).
errors:
- 'API_KEY_INVALID: Check the provided API key.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '429: Too Many Requests'
- '405: Your Organization is currently paused. Please check your account balance.'
- '451: Images did not pass moderation filters.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Unauthorized: Recheck authorization token'
- '400 Bad Request: Ensure all required fields are filled correctly'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- HTTP 200 OK success status response code is expected to verify that the action has
  been taken.
- '401 Unauthorized: Recheck API key validity'
- Unable to add to list. Watchlist does not exist.
- Successfully updated list.
- Successfully removed from list.
- 'Rate limit exceeded: Throttle requests to the API.'
- '401 Unauthorized: Recheck API Key or token.'
- '401 Unauthorized: Check your Project API Token and prepend with ''token'''
- '400: Invalid Auth Method. ''Token'' authentication required.'
- 'Invalid Media Type: Ensure the correct media type is used.'
- 'Task Not Found: Check the task ID provided.'
- 'Request Timeout: Consider breaking down the request.'
- '400: Bad Request'
- '400 (Bad Request): Invalid stream url'
- '429: You can not have more than 0 streams active'
- '400: Invalid stream_id.'
- 200 (Active)
- 200 (Stopped)
- '401 Unauthorized: Project API Token from hive customer dashboard is required.'
- '400: Bad request – the request could not be accepted.'
- '403: Unauthorized – there is an issue with the API key.'
- '404: Not found – the page could not be found.'
- '405: You have insufficient balance in your Hive account.'
- '429: Too many requests – you’ve made too many requests to our API, please try again
  in a few minutes.'
- '451: Images did not pass moderation filters – an image generation request was flagged
  by either our text moderation (given prompt) or visual moderation (resulting image)
  filters.'
- '500: Internal service error – we had a problem with our server. Please try again
  later.'
- '503: Service unavailable – we are temporarily offline for maintenance. Please try
  again later.'
- '504: Gateway timeout – we are not able to fulfill your request at this time. Please
  try again later.'
- Common Errors
- '0: SUCCESS'
- '1: ERROR'
- '200: SUCCESS'
- '401: Unauthorized'
- '404: Not Found'
- '401 Unauthorized: Recheck API key'
- Common errors can be found in the error schema.
- API call will fail if any of the generated images for a given prompt are flagged
  during moderation.
- '429: Project has been rate limited'
- '1000: GENERIC_ERROR'
- '2000: DOWNLOAD_ERROR'
- '2100: HTTP_ERROR'
- '2101: HTTP_ERROR_MALFORMED_URL'
- '2201: HTTP_CONNECTION_ERROR_ENOTFOUND'
- '2202: HTTP_CONNECTION_ERROR_EAI_AGAIN'
- '2203: HTTP_CONNECTION_ERROR_ECONNREFUSED'
- '2204: HTTP_CONNECTION_ERROR_UNABLE_TO_VERIFY_LEAF_SIGNATURE'
- '2205: HTTP_CONNECTION_ERROR_DEPTH_ZERO_SELF_SIGNED_CERT'
- '2206: HTTP_CONNECTION_ERROR_HPE_INVALID_CONSTANT'
- '2207: HTTP_CONNECTION_ERROR_HPE_UNEXPECTED_CONTENT_LENGTH'
- '2208: HTTP_CONNECTION_ERROR_EHOSTUNREACH'
- '2209: HTTP_CONNECTION_ERROR_CERT_HAS_EXPIRED'
- '2210: HTTP_CONNECTION_ERROR_SELF_SIGNED_CERT_IN_CHAIN'
- '2211: HTTP_CONNECTION_ERROR_ERR_SOCKET_BAD_PORT'
- '2212: HTTP_CONNECTION_ERROR_MAX_REDIRECTS_EXCEEDED'
- '2213: HTTP_CONNECTION_ERROR_ETIMEDOUT'
- '3000: CLASSIFIER_ERROR'
- '3100: CLASSIFIER_ERROR_UNSUPPORTED_MEDIA_TYPE'
- '3200: CLASSIFIER_ERROR_INVALID_INPUT'
- '3300: CLASSIFIER_ERROR_CORRUPT_FILE'
- '3401: CLASSIFIER_ERROR_TIMEOUT'
- '3500: CLASSIFIER_ERROR_SERVICE_UNAVAILABLE'
- '3501: CLASSIFIER_ERROR_RATE_LIMIT'
- '4000: PROJECT_SUBTASK_ERROR'
- '4100: PROJECT_SUBTASK_FRAME_ERROR'
- '5000: VIDEO_PROCESSING_ERROR'
- '5100: VIDEO_SPLIT_ERROR'
- '5101: SEGMENT_SPLIT_ERROR'
- '6000: INVALID_FILE_ERROR'
- '6100: INVALID_FILE_ERROR_UNSUPPORTED_MEDIA_TYPE'
- '6200: INVALID_FILE_ERROR_INVALID_DIMENSIONS'
- '6201: INVALID_FILE_ERROR_INVALID_WIDTH'
- '6202: INVALID_FILE_ERROR_INVALID_HEIGHT'
- '6400: INVALID_FILE_ERROR_INVALID_FILESIZE'
- '6500: INVALID_FILE_ERROR_INVALID_DURATION'
- '6600: INVALID_FILE_ERROR_INVALID_FPS'
- '6700: INVALID_FILE_ERROR_MISSING_AUDIO_STREAM'
- '6800: INVALID_FILE_ERROR_CLIENT_LOADING_FAILURE'
auth_info:
  mentioned_objects:
  - Client ID
  - Client Secret
  - Issuer
client:
  base_url: https://api.thehive.ai
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
