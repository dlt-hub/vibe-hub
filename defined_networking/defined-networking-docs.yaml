resources:
- name: lighthouse
  endpoint:
    path: /lighthouses
    method: POST
    data_selector: lighthouse
    params: {}
- name: roles
  endpoint:
    path: /roles
    method: GET
    data_selector: roles
    params: {}
- name: hosts
  endpoint:
    path: /hosts
    method: GET
    data_selector: hosts
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
    params: {}
- name: hosts
  endpoint:
    path: /api/host-and-enroll-code-create/
    method: POST
- name: create_host
  endpoint:
    path: /v1/hosts
    method: POST
- name: hosts
  endpoint:
    path: /v1/hosts
    method: GET
- name: host
  endpoint:
    path: /v1/hosts/:hostID
    method: GET
- name: delete_host
  endpoint:
    path: /v1/hosts/:hostID
    method: DELETE
- name: edit_host
  endpoint:
    path: /v2/hosts/:hostID
    method: PUT
- name: edit_host
  endpoint:
    path: /v2/hosts/:hostID
    method: PUT
- name: block_host
  endpoint:
    path: /v1/hosts/:hostID/block
    method: POST
- name: block_host
  endpoint:
    path: /v1/hosts/:hostID/block
    method: POST
- name: debug_host
  endpoint:
    path: /v1/hosts/:hostID/command
    method: POST
- name: debug_host
  endpoint:
    path: /v1/hosts/:hostID/command
    method: POST
- name: create_enrollment_code
  endpoint:
    path: /v1/hosts/:hostID/enrollment-code
    method: POST
- name: create_enrollment_code
  endpoint:
    path: /v1/hosts/:hostID/enrollment-code
    method: POST
- name: host_and_enrollment_code
  endpoint:
    path: /v1/host-and-enrollment-code
    method: POST
- name: host_and_enrollment_code
  endpoint:
    path: /v1/host-and-enrollment-code
    method: POST
- name: create_role
  endpoint:
    path: /v1/roles
    method: POST
- name: create_role
  endpoint:
    path: /v1/roles
    method: POST
- name: routes
  endpoint:
    path: /v1/routes
    method: POST
- name: create_route
  endpoint:
    path: /v1/routes
    method: POST
- name: tag
  endpoint:
    path: /v1/tags
    method: POST
- name: tags
  endpoint:
    path: /v1/tags
    method: POST
- name: audit_logs
  endpoint:
    path: /v1/audit-logs
    method: GET
- name: audit_logs
  endpoint:
    path: /v1/audit-logs
    method: GET
- name: create_network
  endpoint:
    path: /v1/networks
    method: POST
- name: create_network
  endpoint:
    path: /v1/networks
    method: POST
- name: downloads
  endpoint:
    path: /v1/downloads
    method: GET
    data_selector: downloads
- name: downloads
  endpoint:
    path: /v1/downloads
    method: GET
    data_selector: records
    params: {}
- name: hosts
  endpoint:
    path: /v1/hosts
    method: GET
    data_selector: data
- name: hosts
  endpoint:
    path: /v1/hosts
    method: GET
    data_selector: data
    params: {}
- name: create_host
  endpoint:
    path: /v1/hosts
    method: POST
    data_selector: data
    params: {}
- name: get_host
  endpoint:
    path: /v1/hosts/{hostID}
    method: GET
    data_selector: data
    params: {}
- name: delete_host
  endpoint:
    path: /v1/hosts/{hostID}
    method: DELETE
    data_selector: data
    params: {}
- name: edit_host
  endpoint:
    path: /v2/hosts/{hostID}
    method: PUT
    data_selector: data
    params: {}
- name: block_host
  endpoint:
    path: /v1/hosts/{hostID}/block
    method: POST
    data_selector: data
    params: {}
- name: enrollment_code
  endpoint:
    path: /hosts/{hostID}/enrollment-code
    method: POST
    data_selector: data
    params: {}
- name: host_and_enrollment_code
  endpoint:
    path: /host-and-enrollment-code
    method: POST
    data_selector: data
    params: {}
- name: roles
  endpoint:
    path: /roles
    method: POST
    data_selector: data
    params: {}
- name: role_get
  endpoint:
    path: /roles/{roleID}
    method: GET
    data_selector: data
    params: {}
- name: host_enrollment_code
  endpoint:
    path: /v1/hosts/{hostID}/enrollment-code
    method: POST
    data_selector: data
    params: {}
- name: create_host_and_enrollment_code
  endpoint:
    path: /v1/host-and-enrollment-code
    method: POST
    data_selector: data
    params: {}
- name: roles
  endpoint:
    path: /v1/roles
    method: POST
    data_selector: data
    params: {}
- name: get_role
  endpoint:
    path: /v1/roles/{roleID}
    method: GET
    data_selector: data
    params: {}
- name: role
  endpoint:
    path: /v1/roles/{roleID}
    method: PUT
    data_selector: data
    params: {}
- name: tag
  endpoint:
    path: /v1/tags
    method: GET
    data_selector: data
    params: {}
- name: network
  endpoint:
    path: /v1/networks
    method: GET
    data_selector: data
    params: {}
- name: roleEdit
  endpoint:
    path: /v1/roles/{roleID}
    method: PUT
    data_selector: data
- name: roleDelete
  endpoint:
    path: /v1/roles/{roleID}
    method: DELETE
    data_selector: data
- name: tagCreate
  endpoint:
    path: /v1/tags
    method: POST
    data_selector: data
- name: tagsList
  endpoint:
    path: /v2/tags
    method: GET
    data_selector: data
- name: tagGet
  endpoint:
    path: /v1/tags/{tag}
    method: GET
    data_selector: data
- name: tagEdit
  endpoint:
    path: /v1/tags/{tag}
    method: PUT
    data_selector: data
- name: tagDelete
  endpoint:
    path: /v1/tags/{tag}
    method: DELETE
    data_selector: data
- name: networkCreate
  endpoint:
    path: /v1/networks
    method: POST
    data_selector: data
- name: networksList
  endpoint:
    path: /v1/networks
    method: GET
    data_selector: data
- name: networkGet
  endpoint:
    path: /v1/networks/{networkID}
    method: GET
    data_selector: data
- name: networkEdit
  endpoint:
    path: /v1/networks/{networkID}
    method: PUT
    data_selector: data
- name: audit_logs
  endpoint:
    path: /v1/audit-logs
    method: GET
    data_selector: data
- name: downloads
  endpoint:
    path: /v1/downloads
    method: GET
    data_selector: null
- name: audit_logs
  endpoint:
    path: /audit-logs
    method: GET
    data_selector: data
    params: {}
- name: downloads
  endpoint:
    path: /downloads
    method: GET
    data_selector: data
    params: {}
- name: routes
  endpoint:
    path: /v1/routes
    method: post
    data_selector: data
    params: {}
- name: list_routes
  endpoint:
    path: /v1/routes
    method: get
    data_selector: data
    params: {}
- name: routes
  endpoint:
    path: /v1/routes
    method: POST
    data_selector: data
    params: {}
- name: routes_list
  endpoint:
    path: /v1/routes
    method: GET
    data_selector: data
    params: {}
- name: routes_list
  endpoint:
    path: /routes/list
    method: GET
    data_selector: data
    params:
      includeCounts: true
      cursor: ''
      pageSize: ''
- name: route_get
  endpoint:
    path: /routes/{routeID}
    method: GET
    data_selector: data
    params: {}
- name: routes_list
  endpoint:
    path: /v1/routes
    method: GET
    data_selector: data
    params:
      includeCounts: true
      pageSize: 1
      cursor: somevalue
- name: route_get
  endpoint:
    path: /v1/routes/{routeID}
    method: GET
    data_selector: data
    params: {}
- name: route_edit
  endpoint:
    path: /v1/routes/{routeID}
    method: PUT
    data_selector: data
    params: {}
- name: routeEdit
  endpoint:
    path: /routes/{routeID}
    method: PUT
    data_selector: data
    params: {}
- name: routeDelete
  endpoint:
    path: /routes/{routeID}
    method: DELETE
    data_selector: data
    params: {}
- name: route
  endpoint:
    path: /routes/{routeID}
    method: GET
    data_selector: data
    params: {}
- name: delete_route
  endpoint:
    path: /routes/{routeID}
    method: DELETE
    data_selector: data
    params: {}
- name: Role
  endpoint:
    path: /roles
    method: GET
    data_selector: roles
- name: Tag
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
- name: Network
  endpoint:
    path: /networks
    method: GET
    data_selector: networks
- name: AuditLog
  endpoint:
    path: /auditlogs
    method: GET
    data_selector: auditLogs
- name: Route
  endpoint:
    path: /routes
    method: GET
    data_selector: routes
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
    params: {}
- name: hosts
  endpoint:
    path: /hosts
    method: GET
    data_selector: hosts
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: records
- name: hosts
  endpoint:
    path: /hosts
    method: GET
    data_selector: records
- name: audit_logs
  endpoint:
    path: /api/audit-logs-list/
    method: GET
- name: relay
  endpoint:
    path: /api/relays
    method: POST
    data_selector: relay
    params:
      port: 4242
- name: routes
  endpoint:
    path: /routes
    method: POST
    data_selector: route
    params: {}
- name: audit_logs
  endpoint:
    path: /api/audit-logs-list/
    method: GET
    data_selector: logs
    params:
      permissions: auditLogs:list
- name: Route
  endpoint:
    path: /routes
    method: POST
    data_selector: route
    params: {}
- name: relay
  endpoint:
    path: /api/relays
    method: POST
    data_selector: relays
    params:
      port: '4242'
- name: networks
  endpoint:
    path: /settings/networks
    method: GET
    data_selector: networks
    params: {}
- name: hosts
  endpoint:
    path: /hosts
    method: GET
    data_selector: hosts
    params: {}
- name: routes
  endpoint:
    path: /routes
    method: POST
    data_selector: route
    params: {}
- name: firewall_rules
  endpoint:
    path: /firewall
    method: POST
    data_selector: firewall_rule
    params: {}
- name: routing
  endpoint:
    path: /routes
    method: POST
    data_selector: route
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- You’ll need to open the machine's firewall for UDP port `4242` (or some other configured
  port) in order for any host to be able to query the lighthouse, on both IPv4 and
  IPv6 ports to allow hosts on all types of networks to communicate.
- While administrators authenticating with SSO are able to perform most actions, they
  are unable to modify the account’s SSO configuration. For this, you will need to
  log in with a magic link and TOTP authenticator as you do today.
- Any properties not provided in the request will be reset to their default values.
- 'Token scope required: hosts:block'
- 'Token scope required: hosts:debug'
- 'Token scope required: hosts:enroll'
- 'Token scopes required: hosts:create, hosts:enroll'
- 'Token scope required: roles:create'
- 'Token scope required: routes:create'
- 'Token scope required: tags:create'
- 'Token scope required: audit-logs:list'
- 'Token scope required: networks:create'
- API keys must be given the appropriate permission scopes for every method and endpoint.
- 'Token scope required: `hosts:debug`, `hosts:enroll`, `hosts:create`, `roles:create`,
  `roles:read`, `roles:update`'
- 'Token scopes required: `hosts:debug`, `hosts:enroll`, `hosts:create`, `roles:create`,
  `roles:read`, `roles:update`.'
- Token scope required for operations.
- 'Token scope required: `roles:delete`'
- 'Token scope required: `tags:create`'
- 'Token scope required: `tags:list`'
- 'Token scope required: `tags:read`'
- 'Token scope required: `tags:update`'
- 'Token scope required: `networks:create`'
- 'Token scope required: `networks:list`'
- 'Token scope required: `networks:read`'
- 'Token scope required: `networks:update`'
- 'Token scope required: `routes:delete`'
- API keys are confidential, privileged tokens which allow access to your account.
- Some objects like Contact may return nulls in deeply nested fields
- Tags are used to identify hosts by their various facets and assign config to hosts.
- Config specified on hosts always takes precedence over tags.
- Tags can be created on-the-fly when creating hosts or explicitly via the Tags page.
- Linux hosts need a kernel parameter set to allow packet forwarding.
- You can poll for new audit logs using the documented format.
- These rules will only be persistent until you reboot the host. You will need to
  configure the file to be loaded at boot.
- Using lighthouses as relays is convenient, but it can add extra load to a critical
  part of your networking infrastructure.
- Since relays add an extra step in the traffic between nodes, it's a good idea to
  set up relays as geographically close to your other machines as possible.
- Hosts cannot communicate between different networks, but they can use the same roles
  and tags.
- Only tagged hosts will be able to access the configured route.
- Ensure kernel parameter net.ipv4.ip_forward is set to 1 for IP forwarding.
- Firewall rules are necessary to allow traffic through the router.
- You may want to start with your lighthouses, so that as you migrate hosts you can
  verify that they are connecting to each other successfully.
errors:
- '400: Validation error'
- '200: Successful operation'
- 'ERR_DUPLICATE_VALUE: value already exists'
- 'ERR_INVALID_REFERENCE: referenced value is invalid (perhaps it does not exist?)'
- 'ERR_NETWORK_FULLY_ALLOCATED: there are no IP addresses available for assignment
  in the network'
- 'ERR_INVALID_VALUE: lighthouse hosts must not also be relay hosts'
- 'ERR_INVALID_VALUE: lighthouse hosts must have at least one static ip address'
- 'ERR_INVALID_VALUE: lighthouse hosts must specify a static listen port'
- 'ERR_INVALID_VALUE: relay hosts must specify a static listen port'
- '401: Unauthorized'
- '401: Unauthorized access'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Ensure correct routing and firewall rules are applied.
- NAT table rules not processed if 'COMMIT' line is deleted.
auth_info:
  mentioned_objects:
  - hosts:read
  - roles
  - tags
  - networks
  - routes:list
  - routes:read
  - routes:update
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://admin.defined.net
  auth:
    type: oauth2
source_metadata: null
