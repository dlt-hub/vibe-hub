resources:
- name: tasks
  endpoint:
    path: /tasks
    method: POST
    data_selector: ''
    params: {}
- name: computer_use
  endpoint:
    path: /computer-use
    method: POST
    data_selector: ''
    params: {}
- name: tasks
  endpoint:
    path: /tasks
    method: POST
    data_selector: null
    params: {}
- name: bytebot-agent
  endpoint:
    path: /bytebot-agent
    method: POST
    data_selector: records
    params: {}
- name: models
  endpoint:
    path: /model/info
    method: GET
    data_selector: models
- name: models
  endpoint:
    path: /model/info
    method: GET
    data_selector: models
- name: models
  endpoint:
    path: /model/info
    method: GET
    data_selector: models
- name: tasks
  endpoint:
    path: /tasks/models
    method: GET
    data_selector: models
- name: models
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
- name: model_info
  endpoint:
    path: /model/info
    method: GET
    data_selector: info
- name: models
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
- name: tasks
  endpoint:
    path: /tasks
    method: POST
    data_selector: null
    params: {}
- name: task_status
  endpoint:
    path: /tasks/:id
    method: GET
    data_selector: null
    params: {}
- name: task_messages
  endpoint:
    path: /tasks/:id/messages
    method: POST
    data_selector: null
    params: {}
- name: task_history
  endpoint:
    path: /tasks/:id/messages
    method: GET
    data_selector: null
    params: {}
- name: computer_use
  endpoint:
    path: /computer-use
    method: POST
    data_selector: action
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: GET
    data_selector: mcpServers
    params: {}
- name: computer_actions
  endpoint:
    path: /computer-use
    method: POST
    data_selector: success
    params: {}
- name: write_file
  endpoint:
    path: /computer-use
    method: POST
    data_selector: success
    params:
      action: write_file
- name: read_file
  endpoint:
    path: /computer-use
    method: POST
    data_selector: success
    params:
      action: read_file
- name: computer_use
  endpoint:
    path: /computer-use
    method: POST
    data_selector: response
    params: {}
notes:
- 'Local Access: No authentication required by default'
- 'Remote Access: Configure authentication based on your security requirements'
- 'Production: Implement API keys, OAuth, or other authentication methods'
- Ensure all services are running before connecting to tasks UI.
- Password manager extensions are not enabled by default. You need to install them
  manually using the desktop view.
- Uses password manager extensions for authentication
- Add authentication by placing the UI behind Railway’s built-in password protection
  or an external provider (e.g. Cloudflare Access, Auth0, OAuth proxy).
- Ensure Kubernetes cluster has 8GB+ available memory.
- Use secrets for production API keys.
- Starts the `bytebot-llm-proxy` service on port 4000
- Configures the agent to use the proxy via `BYTEBOT_LLM_PROXY_URL`
- Uses GCP credentials from environment
- Bytebot includes a pre-configured LiteLLM proxy service that makes it easy to use
  any LLM provider.
- Bytebot includes a pre-configured LiteLLM proxy service
- Models can be added or customized in the LiteLLM config
- Default configuration is for development.
- 'For production: Enable authentication on all APIs and use HTTPS/WSS for all connections.'
- All processing happens in your infrastructure
- No data sent to external services (except your chosen AI provider API)
- 'Desktop won''t start: Check logs with ''docker logs bytebot-desktop'''
- 'Common issues: Insufficient memory, Port conflicts, Display server errors'
- Uses OAuth2 with refresh token — requires setup of connected app in api
errors:
- '400: Bad Request - Invalid parameters'
- '401: Unauthorized - Authentication failed'
- '404: Not Found - Resource doesn’t exist'
- '500: Internal Server Error'
- 'Agent errors `401` or `403`: Missing/invalid API key'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Model not found: Check model name matches exactly'
- 'Authentication errors: Verify master key in both LiteLLM and Bytebot'
- 'Model not found: Check model name matches exactly.'
- 'Authentication errors: Verify master key in both LiteLLM and Bytebot.'
- Check your AI provider API key is valid
- Verify agent service is running
- 'Slow task execution: Monitor system resources'
- '404: Not Found - Resource does not exist'
- '500: Internal Server Error - Server side error'
auth_info:
  mentioned_objects: []
client:
  base_url: http://localhost:4000
  headers:
    Accept: application/json
source_metadata: null
