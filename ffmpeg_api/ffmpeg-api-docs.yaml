resources:
- name: process
  endpoint:
    path: /ffmpeg/process
    method: POST
- name: analyze
  endpoint:
    path: /ffprobe/analyze
    method: POST
- name: register_file
  endpoint:
    path: /file
    method: POST
- name: get_file_metadata
  endpoint:
    path: /file/{dirId}/{fileName}
    method: GET
- name: create_directory
  endpoint:
    path: /directory
    method: POST
- name: list_directories
  endpoint:
    path: /directory
    method: GET
- name: list_files_in_directory
  endpoint:
    path: /directory/{dirId}
    method: GET
- name: process
  endpoint:
    path: /ffmpeg/process
    method: POST
- name: analyze
  endpoint:
    path: /ffprobe/analyze
    method: POST
- name: file
  endpoint:
    path: /file
    method: POST
- name: directory
  endpoint:
    path: /directory
    method: GET
- name: process
  endpoint:
    path: /ffmpeg/process
    method: POST
- name: analyze
  endpoint:
    path: /ffprobe/analyze
    method: POST
- name: file
  endpoint:
    path: /file
    method: POST
- name: process
  endpoint:
    path: /ffmpeg/process
    method: POST
- name: directory
  endpoint:
    path: /directory
    method: POST
- name: file
  endpoint:
    path: /file
    method: POST
    data_selector: file
    params: {}
- name: ffmpeg_process
  endpoint:
    path: /ffmpeg/process
    method: POST
    data_selector: result
    params: {}
- name: analyze
  endpoint:
    path: /ffprobe/analyze
    method: POST
    data_selector: null
    params: {}
- name: analyze_video
  endpoint:
    path: /ffprobe/analyze
    method: POST
    data_selector: data
    params: {}
- name: file
  endpoint:
    path: /file
    method: POST
- name: directory
  endpoint:
    path: /directory
    method: GET
- name: file
  endpoint:
    path: /file
    method: POST
    data_selector: null
    params: {}
- name: directory
  endpoint:
    path: /directory
    method: GET
    data_selector: null
    params: {}
- name: directory
  endpoint:
    path: /directory
    method: POST
- name: file
  endpoint:
    path: /file
    method: POST
- name: directory
  endpoint:
    path: /directory
    method: POST
    data_selector: directory
    params: {}
- name: file
  endpoint:
    path: /file
    method: POST
    data_selector: file
    params: {}
- name: directory
  endpoint:
    path: /directory
    method: POST
    data_selector: directory
    params: {}
- name: file
  endpoint:
    path: /file
    method: POST
    data_selector: file
    params: {}
- name: directory
  endpoint:
    path: /directory
    method: POST
    data_selector: directory
    params: {}
- name: file
  endpoint:
    path: /file
    method: POST
    data_selector: file
    params: {}
- name: directory
  endpoint:
    path: /directory
    method: POST
    data_selector: directory
    params: {}
- name: file
  endpoint:
    path: /file
    method: POST
    data_selector: file
    params: {}
- name: process
  endpoint:
    path: /ffmpeg/process
    method: POST
    data_selector: result
- name: directory
  endpoint:
    path: /directory
    method: POST
    data_selector: directory
    params: {}
- name: file
  endpoint:
    path: /file
    method: POST
    data_selector: file
    params: {}
- name: process
  endpoint:
    path: /ffmpeg/process
    method: POST
    data_selector: result
    params: {}
- name: file_upload
  endpoint:
    path: /file
    method: POST
    data_selector: file
    params: {}
- name: video_processing
  endpoint:
    path: /ffmpeg/process
    method: POST
    data_selector: result
    params: {}
- name: file_upload
  endpoint:
    path: /file
    method: POST
    data_selector: file
    params: {}
- name: process_video
  endpoint:
    path: /ffmpeg/process
    method: POST
    data_selector: result
    params: {}
- name: ffprobe_analyze
  endpoint:
    path: /ffprobe/analyze
    method: POST
    data_selector: result
    params: {}
- name: file_upload
  endpoint:
    path: /file
    method: POST
    data_selector: ''
    params: {}
- name: file_upload
  endpoint:
    path: /file
    method: POST
    data_selector: upload
    params: {}
- name: process
  endpoint:
    path: /ffmpeg/process
    method: POST
    data_selector: task
    params: {}
- name: ffprobe_analyze
  endpoint:
    path: /ffprobe/analyze
    method: POST
    data_selector: result
    params: {}
- name: file_upload
  endpoint:
    path: /file
    method: POST
    data_selector: ''
    params: {}
- name: file
  endpoint:
    path: /file
    method: POST
    data_selector: upload
    params: {}
- name: process
  endpoint:
    path: /ffmpeg/process
    method: POST
    data_selector: task
    params: {}
- name: file
  endpoint:
    path: /file
    method: POST
    data_selector: file
    params: {}
- name: ffmpeg_process
  endpoint:
    path: /ffmpeg/process
    method: POST
    data_selector: task
    params: {}
- name: file_upload
  endpoint:
    path: /file
    method: POST
    data_selector: ''
    params: {}
- name: ffmpeg_process
  endpoint:
    path: /ffmpeg/process
    method: POST
    data_selector: ''
    params: {}
- name: ffmpeg_run
  endpoint:
    path: /ffmpeg/run
    method: POST
    data_selector: result
    params: {}
- name: ffmpeg_run
  endpoint:
    path: /ffmpeg/run
    method: POST
- name: file
  endpoint:
    path: /file
    method: POST
- name: ffmpeg_process
  endpoint:
    path: /ffmpeg/process
    method: POST
- name: file
  endpoint:
    path: /file
    method: POST
    data_selector: ''
    params: {}
- name: ffmpeg_process
  endpoint:
    path: /ffmpeg/process
    method: POST
    data_selector: ''
    params: {}
- name: ffmpeg_run
  endpoint:
    path: /ffmpeg/run
    method: POST
    data_selector: result
    params: {}
- name: ffmpeg_process
  endpoint:
    path: /ffmpeg/process
    method: POST
    data_selector: result
    params: {}
- name: ffprobe_analyze
  endpoint:
    path: /ffprobe/analyze
    method: POST
    data_selector: result
    params: {}
- name: file_create
  endpoint:
    path: /file
    method: POST
    data_selector: upload
    params: {}
- name: file_info
  endpoint:
    path: /file/{dirId}/{fileName}
    method: GET
    data_selector: file_info
    params: {}
- name: directory_create
  endpoint:
    path: /directory
    method: POST
    data_selector: directory
    params: {}
- name: directories_list
  endpoint:
    path: /directory
    method: GET
    data_selector: directories
    params: {}
- name: ffmpeg_run
  endpoint:
    path: /ffmpeg/run
    method: POST
    data_selector: result
    params: {}
- name: ffmpeg_process
  endpoint:
    path: /ffmpeg/process
    method: POST
    data_selector: result
    params: {}
- name: ffprobe_analyze
  endpoint:
    path: /ffprobe/analyze
    method: POST
    data_selector: result
    params: {}
- name: file_create
  endpoint:
    path: /file
    method: POST
    data_selector: file
    params: {}
- name: directory_create
  endpoint:
    path: /directory
    method: POST
    data_selector: directory
    params: {}
- name: directory_get
  endpoint:
    path: /directory
    method: GET
    data_selector: directories
    params: {}
notes:
- All endpoints use Basic Auth with your API key.
- The API key goes in the Authorization header
- Upload URLs expire after ~5 minutes
- We do not knowingly collect personal information from children under 13 (or the
  applicable age in your jurisdiction). If we discover we have collected such information,
  we will delete it immediately.
- Refunds are calculated on a pro-rated basis based on your unused quota at the time
  of cancellation or refund request.
- You may request a refund if you cancel your subscription with unused quota remaining.
- 'TTL (Time To Live): Directories auto-delete after 24 hours (86400 seconds) by default.
  All files inside are cleaned up automatically.'
- Upload URLs expire in 5 minutes.
- Directories auto-delete after 24 hours (86400 seconds) by default.
- Always implement retry logic for transient failures, especially for upload URL expiration
  (403 errors).
- FFprobe requires files to be uploaded first.
- Most operations use JSON requests and Basic Auth.
- Always validate your FFmpeg command locally before sending it to the API to avoid
  unnecessary usage charges.
- File parameter names in the request must exactly match the file field in your command’s
  inputs.
- GB-Seconds provide a more accurate measure of computational resources.
- Only successful processing operations that produce output files are charged.
- Failed requests due to invalid input or API errors are not billed.
errors:
- 400 Bad Request - Invalid JSON, missing fields
- 401 Unauthorized - Invalid API key
- 403 Forbidden - Quota exceeded, expired URL
- 404 Not Found - File/directory doesn’t exist
- 500 Internal Error - FFmpeg processing failed
- 502 Bad Gateway - Upstream service issue
- 503 Service Unavailable - Temporary outage
- 'Invalid API key: Check that your API key starts with ''Basic '''
- 'File not found: Ensure you used the exact file_path from the upload response'
- 'Upload fails with 403/403 error: Get a fresh upload URL from /file'
- '401: Invalid API key'
- '403: Quota exceeded'
- '400: Missing Authorization header'
- '403: If you get a 403 error, request a new upload URL from `/file` and try again.'
- '403: Request a new upload URL from /file and try again.'
- '403 Forbidden: Request a new upload URL from /file and try again.'
- '403 Forbidden: Upload URL has expired.'
- 'File name already exists: File names must be unique within a directory.'
- '400: Invalid task format'
- '500: FFmpeg processing failed'
- '404: File not found'
- '403 Forbidden: Upload URL has expired. Get a fresh upload URL by calling `/file`
  again.'
- 'File name already exists: Use different file names or create separate directories.'
- '403 Forbidden: Check API key or permissions'
- '404 Not Found: Verify endpoint or resource existence'
- '500 Internal Server Error: Retry the request'
- '403 Upload Error: Upload URL expired, retry upload registration'
- '422 Processing Error: Invalid FFmpeg options, check command syntax'
- '429 Rate Limit: Too many requests, implement backoff strategy'
- 'Network Timeouts: Large files, consider chunked uploads for 500MB+ files'
- '403: Upload URL expiration'
- '400 Bad Request: Invalid parameters will return details about what needs to be
  fixed.'
- '401 Unauthorized: Check API Key'
- select_streams is required when requesting frames or packets
- read_intervals duration cannot exceed 30s
- probesize cannot exceed 50MB
- '401 Unauthorized: Recheck your API key or authentication method.'
- 'ok: false, error: Error message describing what went wrong'
- '400: Bad Request - Invalid input data'
- '401: Unauthorized - Invalid or missing API key'
- '403: Forbidden - Quota exceeded or unauthorized access'
- '404: Not Found - Directory or file not found'
- '500: Internal Server Error - Processing failed'
- 401 Unauthorized - Invalid or missing API key
- 403 Forbidden - Unauthorized access to directory
- 404 Not Found - Directory not found
- 500 Internal Server Error - Failed to fetch files
- '401 Unauthorized: Invalid or missing API key'
- '403 Forbidden: Unauthorized access to directory'
- '404 Not Found: Directory not found'
- '500 Internal Server Error: Failed to fetch files'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.ffmpeg-api.com
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
