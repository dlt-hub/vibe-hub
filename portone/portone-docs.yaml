resources:
- name: payment_link
  endpoint:
    path: /api/paymentLink
    method: POST
- name: create_jwt_token
  endpoint:
    path: /api/merchant/auth-token
    method: POST
- name: payment_request
  endpoint:
    path: /payment
    method: POST
    data_selector: signature
    params: {}
- name: signature_generation
  endpoint:
    path: /api-merchant-generate-signature
    method: POST
    data_selector: signature
- name: request_obj
  endpoint:
    params:
      amount: '100.00'
      currency: USD
      failure_url: https://checkout.portone.cloud/failure.html
      merchant_order_id: ''
      success_url: https://checkout.portone.cloud/success.html
      client_key: PORTONE_KEY
- name: request_obj
  endpoint:
    path: /generate_signature
    method: POST
    data_selector: signature
    params: {}
- name: generate_signature
  endpoint:
    path: /generate_signature
    method: POST
    data_selector: signature
    params: {}
- name: payment_request
  endpoint:
    path: /api-merchant-generate-signature
    method: POST
    data_selector: signature
    params: {}
- name: payment_service
  endpoint:
    path: /payment-service
    method: GET
- name: checkout_service
  endpoint:
    path: /checkout-service
    method: GET
- name: RequestObj
  endpoint:
    data_selector: records
- name: generate_signature
  endpoint:
    path: /generate_signature
    method: POST
    data_selector: signature
    params: {}
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: payment_response
    params: {}
- name: payment_transaction
  endpoint:
    path: /payment/transaction
    method: POST
    data_selector: transaction
    params: {}
- name: payment
  endpoint:
    path: /api/payment
    method: POST
    data_selector: transaction
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: response
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: transaction_details
    params: {}
- name: checkout_embed_request
  endpoint:
    path: /checkout/embed
    method: POST
    data_selector: data
    params:
      portone_key: string
      merchant_order_id: string
      signature_hash: string
      amount: double
      currency: string
      country_code: string
      merchant_details:
        name: string
        logo: string
        back_url: string
        promo_code: string
        promo_discount: int
        shipping_charges: double
      billing_details:
        billing_name: string
        billing_surname: string
        billing_email: string
        billing_phone: string
        billing_address:
          city: string
          country_code: string
          country_name: string
          locale: string
          line_1: string
          line_2: string
          postal_code: string
          state: string
      shipping_details:
        shipping_name: string
        shipping_surname: string
        shipping_email: string
        shipping_phone: string
        shipping_address:
          city: string
          country_code: string
          country_name: string
          locale: string
          line_1: string
          line_2: string
          postal_code: string
          state: string
      order_details:
      - id: string
        price: double
        name: string
        quantity: integer
        image: string
      success_url: string
      failure_url: string
      expiry_hours: int
      redirect_url: string
      environment: string
- name: CheckoutEmbedDto
  endpoint:
    path: /checkout/embed
    method: POST
    data_selector: transaction
    params:
      portone_key: string
      merchant_order_id: string
      signature_hash: string
      amount: double
      currency: string
      country_code: string
      success_url: string
      failure_url: string
      expiry_hours: int
      redirect_url: string
      environment: string
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: data
    params: {}
- name: CheckoutEmbed
  endpoint:
    path: /checkout/embed
    method: POST
    data_selector: result
    params: {}
- name: shipping_details
  endpoint:
    path: /shipping/details
    method: GET
    data_selector: details
    params: {}
- name: order_details
  endpoint:
    path: /order/details
    method: GET
    data_selector: orders
    params: {}
- name: shipping_details
  endpoint:
    path: /shipping/details
    method: GET
    data_selector: shipping_details
    params: {}
- name: order_details
  endpoint:
    path: /order/details
    method: GET
    data_selector: order_details
    params: {}
- name: CheckoutUsingEmbedRequest
  endpoint:
    path: /checkout/embed
    method: POST
    data_selector: request
    params: {}
- name: CheckoutEmbedDto
  endpoint:
    path: /checkout/embed
    method: POST
    data_selector: checkoutDetails
    params:
      portone_key: string
      merchant_order_id: string
      signature_hash: string
      amount: double
      currency: string
      country_code: string
      success_url: string
      failure_url: string
      expiry_hours: int
      redirect_url: string
      environment: string
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: checkoutResponse
- name: billing_details
  endpoint:
    path: /billing/details
    method: GET
    data_selector: billing_details
- name: shipping_details
  endpoint:
    path: /shipping/details
    method: GET
    data_selector: shipping_details
- name: order_details
  endpoint:
    path: /order/details
    method: GET
    data_selector: order_details
- name: success_url
  endpoint:
    path: /success/url
    method: GET
    data_selector: success_url
- name: failure_url
  endpoint:
    path: /failure/url
    method: GET
    data_selector: failure_url
- name: expiry_hours
  endpoint:
    path: /expiry/hours
    method: GET
    data_selector: expiry_hours
- name: redirect_url
  endpoint:
    path: /redirect/url
    method: GET
    data_selector: redirect_url
- name: environment
  endpoint:
    path: /environment
    method: GET
    data_selector: environment
- name: billing_details
  endpoint:
    path: /billing/details
    method: GET
    data_selector: billing_details
    params: {}
- name: shipping_details
  endpoint:
    path: /shipping/details
    method: GET
    data_selector: shipping_details
    params: {}
- name: order_details
  endpoint:
    path: /order/details
    method: GET
    data_selector: order_details
    params: {}
- name: success_url
  endpoint:
    path: /success/url
    method: GET
    data_selector: success_url
    params: {}
- name: failure_url
  endpoint:
    path: /failure/url
    method: GET
    data_selector: failure_url
    params: {}
- name: expiry_hours
  endpoint:
    path: /expiry/hours
    method: GET
    data_selector: expiry_hours
    params: {}
- name: redirect_url
  endpoint:
    path: /redirect/url
    method: GET
    data_selector: redirect_url
    params: {}
- name: environment
  endpoint:
    path: /environment
    method: GET
    data_selector: environment
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: GET
- name: checkout
  endpoint:
    path: /checkout
    method: GET
    data_selector: transactionResponse
    params: {}
- name: web_checkout
  endpoint:
    path: /checkout/web
    method: POST
    data_selector: payload
    params:
      portOneKey: String
      merchantOrderId: String
      signatureHash: String
      amount: Double
      currency: String
      countryCode: String
      successUrl: String
      failureUrl: String
      expiryHours: Int
      source: String
      redirectUrl: String
      environment: String
- name: checkout_request
  endpoint:
    path: /checkout/request
    method: POST
- name: merchant_order
  endpoint:
    path: /api/merchant/order
    method: POST
    data_selector: orderDetails
    params:
      portOneKey: mandatory
      merchantOrderId: mandatory
      signatureHash: mandatory
      amount: mandatory
      currency: mandatory
      countryCode: mandatory
      successUrl: mandatory
      failureUrl: mandatory
      expiryHours: mandatory
      source: mandatory
      redirectUrl: mandatory
      environment: mandatory
- name: merchant_details
  endpoint:
    path: /api/merchant/details
    method: POST
    data_selector: merchantDetails
    params:
      portOneKey: string
      merchantOrderId: string
      signatureHash: string
      amount: double
      currency: string
      countryCode: string
      successUrl: string
      failureUrl: string
      expiryHours: int
      source: string
      redirectUrl: string
      environment: string
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: response
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: POST
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: paymentResponse
- name: checkout_using_embed
  endpoint:
    path: /checkout/embed
    method: POST
    data_selector: results
    params:
      portone_key: your_portone_key
      merchant_order_id: your_merchant_order_id
      signature_hash: your_signature_hash
      amount: amount_value
      currency: currency_value
      country_code: country_code_value
      success_url: success_url_value
      failure_url: failure_url_value
      expiry_hours: expiry_hours_value
      redirect_url: redirect_url_value
      environment: environment_value
- name: checkout_using_new_card
  endpoint:
    path: /checkout/new_card
    method: POST
    data_selector: results
    params:
      token: your_auth_token
      newCard:
        cardNumber: your_card_number
        cardType: your_card_type
        cardholderName: your_cardholder_name
        expiryMonth: your_expiry_month
        expiryYear: your_expiry_year
        serviceCode: your_service_code
        environment: your_environment
        portoneKey: your_portone_key
- name: CheckoutUsingEmbedRequest
  endpoint:
    path: /checkout/embed
    method: POST
- name: CheckoutUsingNewCard
  endpoint:
    path: /checkout/new-card
    method: POST
- name: RetrieveSavedCards
  endpoint:
    path: /saved-cards
    method: POST
- name: AddCustomer
  endpoint:
    path: /add-customer
    method: POST
- name: SaveCardForCustomer
  endpoint:
    path: /add-card
    method: POST
- name: ListCardsForCustomer
  endpoint:
    path: /list-cards
    method: POST
- name: GetCustomer
  endpoint:
    path: /get-customer
    method: GET
- name: CaptureTransaction
  endpoint:
    path: /capture-transaction
    method: POST
- name: GetRoutesList
  endpoint:
    path: /routes-list
    method: GET
- name: payment_methods
  endpoint:
    path: /getPaymentMethods
    method: POST
    data_selector: response.paymentMethods
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: response.checkout
    params: {}
- name: Checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: paymentResult
- name: Payment Methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: paymentMethods
- name: merchant_details
  endpoint:
    path: /merchant/details
    method: GET
    data_selector: merchant
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: transaction
- name: merchant_details
  endpoint:
    path: /merchant/details
    method: GET
    data_selector: merchant_details
- name: merchant_order
  endpoint:
    path: /merchant/order
    method: POST
    data_selector: order_details
- name: checkout_using_new_card
  endpoint:
    path: /checkout/new_card
    method: POST
    data_selector: checkout_response
- name: retrieve_saved_cards
  endpoint:
    path: /cards/retrieve
    method: GET
    data_selector: saved_cards
- name: add_customer
  endpoint:
    path: /customer/add
    method: POST
    data_selector: customer_response
- name: payment
  endpoint:
    path: /initiatePayment
    method: POST
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /initiatePayment
    method: POST
    data_selector: data
- name: saved_cards
  endpoint:
    path: /fetchSavedCards
    method: GET
    data_selector: content
    params:
      portOneKey: string
      formattedText: string
      OTP: string
      token: string
- name: new_card_payment
  endpoint:
    path: /initiateNewCardPayment
    method: POST
    data_selector: response
    params:
      config: TransactionRequest
      cardDetails: CardDetails
      jwtToken: string
      clientKey: string
      subMerchantKey: string
      customerUUID: string
- name: wallet_payment
  endpoint:
    path: /initiatePayment
    method: POST
    data_selector: response
    params:
      payload: TransactionRequest
      subMerchantKey: string
- name: direct_bank_transfer
  endpoint:
    path: /fetchDBTDetails
    method: GET
    data_selector: response
    params:
      clientKey: string
- name: initiateNewCardPayment
  endpoint:
    path: /initiateNewCardPayment
    method: POST
    data_selector: data
    params: {}
- name: fetchSavedCards
  endpoint:
    path: /fetchSavedCards
    method: POST
    data_selector: content
    params: {}
- name: initiateSavedCardPayment
  endpoint:
    path: /initiateSavedCardPayment
    method: POST
    data_selector: data
    params: {}
- name: initiateWalletPayments
  endpoint:
    path: /initiateWalletPayments
    method: POST
    data_selector: data
    params: {}
- name: fetchDBTDetails
  endpoint:
    path: /fetchDBTDetails
    method: GET
    data_selector: data
    params: {}
- name: initiatePayment
  endpoint:
    path: /initiatePayment
    method: POST
    data_selector: data
    params: {}
- name: available_payment_methods
  endpoint:
    path: /getAvailablePaymentMethods
    method: POST
    data_selector: content
    params: {}
- name: add_customer_card
  endpoint:
    path: /addCardForCustomerId
    method: POST
    data_selector: content
    params: {}
- name: fetch_customer_cards
  endpoint:
    path: /fetchCustomerCards
    method: GET
    data_selector: content
    params: {}
- name: delete_customer_card
  endpoint:
    path: /deleteCardForCustomerId
    method: POST
    data_selector: content
    params: {}
- name: initiate_payment
  endpoint:
    path: /initiatePayment
    method: POST
    data_selector: content
    params: {}
- name: installments
  endpoint:
    path: /installments
    method: POST
    data_selector: banks
    params:
      amount: amount
      environment: environment
      portoneKey: portoneKey
      isMerchantSponsored: isMerchantSponsored
      paymentMethod: paymentMethod
      overrideDefault: overrideDefault
      currency: currency
- name: available_payment_methods
  endpoint:
    path: /getAvailablePaymentMethods
    method: GET
    data_selector: payment_methods
    params:
      portOneKey: portOneKey
      currency: currency
- name: add_customer
  endpoint:
    path: /addCustomer
    method: POST
    data_selector: response
    params: {}
- name: get_customer_data
  endpoint:
    path: /getCustomerData
    method: GET
    data_selector: customer_data
    params:
      customerID: customerID
- name: fetch_saved_cards
  endpoint:
    path: /fetchSavedCards
    method: POST
    data_selector: content
    params:
      portOneKey: string
      mobileNumber: string
      OTP: string
      token: string
- name: initiate_saved_card_payment
  endpoint:
    path: /initiateSavedCardPayment
    method: POST
    data_selector: response
    params: {}
- name: fetch_dbt_details
  endpoint:
    path: /fetchDBTDetails
    method: POST
    data_selector: response
    params:
      clientKey: string
- name: get_available_payment_methods
  endpoint:
    path: /getAvailablePaymentMethods
    method: GET
    data_selector: response
    params:
      portOneKey: string
      currency: string
- name: payment
  endpoint:
    path: /payment/initiate
    method: POST
    data_selector: data
    params: {}
- name: payment_response
  endpoint:
    path: /post-payment
    method: POST
    data_selector: payload
    params:
      price: ''
      promo_discount: ''
      shipping_charges: ''
- name: saved_cards
  endpoint:
    path: /fetchSavedCards
    method: POST
    data_selector: content
    params:
      portOneKey: string
      formattedText: string
      OTP: string
      token: string
- name: direct_bank_transfer
  endpoint:
    path: /fetchDBTDetails
    method: GET
    data_selector: data
- name: instalments
  endpoint:
    path: /postbankDetails
    method: POST
    data_selector: data
- name: available_payment_methods
  endpoint:
    path: /getAvailablePaymentGateways
    method: GET
    data_selector: data
    params:
      portOneKey: string
      currency: string
- name: payment_response
  endpoint:
    method: POST
- name: add_customer_card
  endpoint:
    path: /addCardForCustomerId
    method: POST
    data_selector: content
    params: {}
- name: delete_customer_card
  endpoint:
    path: /deleteCardForCustomerId
    method: POST
    data_selector: message
    params: {}
- name: fetch_all_customer_cards
  endpoint:
    path: /fetchCustomerCards
    method: GET
    data_selector: content.data
    params: {}
- name: add_customer
  endpoint:
    path: /addCustomer
    method: POST
    data_selector: response
    params: {}
- name: get_customer_data
  endpoint:
    path: /getCustomerData
    method: GET
    data_selector: response
    params: {}
- name: fetch_routes
  endpoint:
    path: /fetchRoutes
    method: GET
    data_selector: data
    params: {}
- name: capture_payment
  endpoint:
    path: /captureTransactionAPI
    method: POST
    data_selector: response
    params: {}
- name: PaymentResponse
  endpoint:
    path: /payment/response
    method: POST
    data_selector: response
    params: {}
- name: webhook_response
  endpoint:
    path: /webhook/payment
    method: POST
    data_selector: webhookResponse
    params: {}
- name: webhook_response
  endpoint:
    path: /webhook
    method: POST
    data_selector: webhookResponse
    params: {}
- name: signature_verification_steps
  endpoint:
    path: /payment-link-webhook-response
    method: GET
    data_selector: steps
- name: payment
  endpoint:
    params:
      price: ''
      promo_discount: ''
      shipping_charges: ''
- name: pl_webhook_response
  endpoint:
    path: /webhook/payment_link_status
    method: POST
    data_selector: payload
    params: {}
- name: payment_link_webhook
  endpoint:
    path: /payment-link-webhook
    method: GET
    data_selector: records
- name: webhook_response
  endpoint:
    path: /webhook/response
    method: POST
    data_selector: response_data
- name: PaymentResponse
  endpoint:
    path: /payment/response
    method: POST
    data_selector: response
    params: {}
- name: payment_webhook
  endpoint:
    path: /payment/webhook
    method: POST
    data_selector: payload
- name: signature_verification
  endpoint:
    path: /verify-signature
    method: POST
    data_selector: signature
    params: {}
- name: refund
  endpoint:
    path: /refunds
    method: GET
    data_selector: refunds
    params: {}
- name: signature_verification
  endpoint:
    path: /payment/webhook
    method: GET
    data_selector: webhook_data
- name: refund
  endpoint:
    path: /refund
    method: POST
    data_selector: refunds
    params: {}
- name: webhook_response
  endpoint:
    path: /webhook/response
    method: POST
    data_selector: data
    params: {}
- name: payment_link
  endpoint:
    path: /payment-link-webhook
    method: GET
    data_selector: links
    params: {}
- name: payment_channel
  endpoint:
    path: /payment_channels
    method: GET
- name: webhook_response
  endpoint:
    path: /webhook/response
    method: POST
    data_selector: webhookResponse
    params: {}
- name: signature_verification
  endpoint:
    path: /payment-link/webhook
    method: GET
    data_selector: signature
    params: {}
- name: payment_link_webhook
  endpoint:
    path: /payment/link/webhook
    method: POST
    data_selector: plWebhookResponse
    params: {}
- name: payment_link_webhook_response
  endpoint:
    path: /payment-link/webhook-response
    method: GET
    data_selector: plWebhookResponse
    params: {}
- name: pl_webhook_response
  endpoint:
    path: /webhook/response
    method: POST
    data_selector: response_data
    params: {}
- name: payment_webhook
  endpoint:
    path: /payment/webhook
    method: GET
    data_selector: payload
    params: {}
- name: payment_methods
  endpoint:
    path: /payment/methods
    method: GET
    data_selector: payment_methods
- name: refund
  endpoint:
    path: /refund
    method: POST
    data_selector: refund
    params: {}
- name: refund
  endpoint:
    path: /refunds
    method: GET
    data_selector: refunds
    params: {}
- name: payment_methods
  endpoint:
    path: /payment/methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: payment_link
  endpoint:
    path: /payment/link
    method: GET
    data_selector: link_ref
- name: payment_channels
  endpoint:
    path: /payment/channels
    method: GET
    data_selector: channels
- name: test_app_details
  endpoint:
    path: /test_app_details
    method: GET
    data_selector: records
    params: {}
- name: payment_methods
  endpoint:
    path: /payment/methods
    method: GET
    data_selector: methods
    params: {}
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: methods
- name: payment_methods
  endpoint:
    path: /payment/methods
    method: GET
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: methods
- name: transaction_status
  endpoint:
    path: /transaction-status
    method: GET
    data_selector: status
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: payment_methods
  endpoint:
    path: /inquire/espay/{PortOne_Key}
    method: GET
- name: payment
  endpoint:
    path: /payment
    method: POST
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payment_response
- name: payment_methods
  endpoint:
    path: /payment/methods
    method: GET
    data_selector: methods
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
- name: refund_details
  endpoint:
    path: /refund/details
    method: GET
    data_selector: refunds
    params: {}
- name: sandbox_credentials
  endpoint:
    path: /sandbox/credentials
    method: GET
    data_selector: credentials
    params: {}
- name: payment_methods
  endpoint:
    path: /inquire/espay/{PortOne_Key}
    method: GET
- name: test_wallet
  endpoint:
    path: /test_wallet
    method: GET
    data_selector: wallet_data
- name: payment_methods
  endpoint:
    path: /api/payment_methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: payment_methods
- name: refund_details
  endpoint:
    path: /refund/details
    method: GET
    data_selector: records
    params: {}
- name: initiatePayment
  endpoint:
    path: /epayment/initiatePayment
    method: POST
    data_selector: additional_data
    params: {}
- name: paymentLink
  endpoint:
    path: /epayment/paymentLink
    method: POST
    data_selector: additional_data
    params: {}
- name: TestCards3DsSupported
  endpoint:
    path: /test/cards/3ds
    method: GET
- name: TestCardsNon3Ds
  endpoint:
    path: /test/cards/non-3ds
    method: GET
- name: UnionPayTestCards
  endpoint:
    path: /test/cards/unionpay
    method: GET
- name: KBankSandboxDashboard
  endpoint:
    path: /sandbox/dashboard
    method: GET
- name: AliPayTestAccount
  endpoint:
    path: /test/alipay
    method: GET
- name: initiatePayment
  endpoint:
    path: /initiatePayment
    method: POST
    data_selector: additional_data
- name: paymentLink
  endpoint:
    path: /paymentLink
    method: POST
    data_selector: additional_data
- name: payment_methods
  endpoint:
    path: /api/payment_methods
    method: GET
    data_selector: methods
    params: {}
- name: refund_details
  endpoint:
    path: /api/refund_details
    method: GET
    data_selector: refunds
    params: {}
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: data
- name: initiatePayment
  endpoint:
    path: /initiatePayment
    method: POST
    data_selector: key
    params: {}
- name: paymentLink
  endpoint:
    path: /paymentLink
    method: POST
    data_selector: portone_key
    params: {}
- name: MID Installments
  endpoint:
    path: /401882301190001
    method: GET
- name: MID AliPay
  endpoint:
    path: /501772212141001
    method: GET
- name: MID WeChat
  endpoint:
    path: /501662212141001
    method: GET
- name: MID Cards(THB)
  endpoint:
    path: /401992212141001
    method: GET
- name: MID Cards(USD)
  endpoint:
    path: /402992212141001
    method: GET
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: payment_details
- name: initiatePayment
  endpoint:
    path: /initiatePayment
    method: POST
    data_selector: payment_response
- name: paymentLink
  endpoint:
    path: /paymentLink
    method: POST
    data_selector: payment_link_response
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: payment_methods
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: data
    params: {}
- name: Local ATM Card
  endpoint:
    path: NAPAS_ATM_CARD
    method: GET
    data_selector: records
- name: Credit Card
  endpoint:
    path: NAPAS_CREDIT_CARD
    method: GET
    data_selector: records
- name: Napas all
  endpoint:
    path: NAPAS_ALL
    method: GET
    data_selector: records
- name: ATM Cards
  endpoint:
    path: /atm/cards/test
    method: GET
- name: E-Wallet
  endpoint:
    path: /e-wallet/test
    method: GET
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: GET
    data_selector: methods
- name: Cash on Delivery
  endpoint:
    path: /api_reference
    method: GET
    data_selector: payment_methods
    params: {}
- name: Direct Bank Transfer
  endpoint:
    path: /api_reference
    method: GET
    data_selector: payment_methods
    params: {}
- name: Test Credit Cards
  endpoint:
    path: /test/credit-cards
    method: GET
    data_selector: cards
    params: {}
- name: Merchant Account Credentials
  endpoint:
    path: /merchant/credentials
    method: GET
    data_selector: credentials
    params: {}
- name: USD
  endpoint:
    params:
      Api Key: cdcfc9d37e47ae13a43ab8411858b396
      Store Id: portone_test
- name: JPY
  endpoint:
    params:
      Api Key: 10b94e85b050e7d51a790c1bdb0610b0
      Store Id: portoneJP_test
- name: KRW
  endpoint:
    params:
      Api Key: 909b68b1d6bb1f1996db4f30efddac36
      Store Id: portoneKR_test
- name: Cash on Delivery
  endpoint:
    path: /api_reference/cash_on_delivery
    method: GET
    data_selector: payment_methods
    params: {}
- name: Direct Bank Transfer
  endpoint:
    path: /api_reference/direct_bank_transfer
    method: GET
    data_selector: payment_methods
    params: {}
- name: merchant_account
  endpoint:
    path: /merchant/account
    method: GET
    data_selector: data
    params:
      merchantID: '73633907'
      username: '73633907'
      password: jC7DwEaw
- name: USD
  endpoint:
    params:
      Api Key: cdcfc9d37e47ae13a43ab8411858b396
      Store Id: portone_test
- name: JPY
  endpoint:
    params:
      Api Key: 10b94e85b050e7d51a790c1bdb0610b0
      Store Id: portoneJP_test
- name: KRW
  endpoint:
    params:
      Api Key: 909b68b1d6bb1f1996db4f30efddac36
      Store Id: portoneKR_test
- name: initiate_payment
  endpoint:
    path: /reference/post_api-initiatepayment
    method: POST
    data_selector: data
    params: {}
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: event
    params: {}
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: data
    params: {}
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: data
    params: {}
- name: credentials
  endpoint:
    path: /credentials
    method: GET
    data_selector: records
- name: test_credit_card_data
  endpoint:
    path: /test_credit_card_data
    method: GET
    data_selector: records
- name: test_atm_card_data
  endpoint:
    path: /test_atm_card_data
    method: GET
    data_selector: records
- name: test_app_login
  endpoint:
    path: /test_app_login
    method: GET
    data_selector: records
- name: payment_methods
  endpoint:
    path: /available_payment_methods
    method: GET
    data_selector: methods
    params: {}
- name: payment_initiation
  endpoint:
    path: /reference/post_api-initiatepayment
    method: POST
    data_selector: payment_response
    params:
      custom_params:
        razorpay_back_url: YOUR_BACK_URL
- name: simulate_paid
  endpoint:
    path: /tpc/simulate/paid
    method: POST
    data_selector: partner_key
    params: {}
- name: payment_method
  endpoint:
    path: /transactionwithcard
    method: POST
    data_selector: transaction
    params: {}
- name: refund
  endpoint:
    path: /refunds
    method: POST
    data_selector: refund
    params:
      payer_id: ''
      payer_email: ''
- name: credentials
  endpoint:
    path: /sandbox/credentials
    method: GET
    data_selector: credentials
    params: {}
- name: test_credit_card_data
  endpoint:
    path: /sandbox/test_credit_card_data
    method: GET
    data_selector: credit_card_data
    params: {}
- name: test_atm_card_data
  endpoint:
    path: /sandbox/test_atm_card_data
    method: GET
    data_selector: atm_card_data
    params: {}
- name: test_app_login
  endpoint:
    path: /sandbox/test_app_login
    method: POST
    data_selector: app_login
    params: {}
- name: payment_methods
  endpoint:
    path: /api/payment_methods
    method: GET
- name: refunds
  endpoint:
    path: /api/refunds
    method: POST
- name: simulate_paid
  endpoint:
    path: /tpc/simulate/paid
    method: POST
    data_selector: '{}'
    params: {}
- name: payments
  endpoint:
    path: /transactionwithcard
    method: POST
    data_selector: transaction
- name: refund
  endpoint:
    path: /refunds
    method: POST
    data_selector: refund
    params:
      required_fields:
      - payer_id
      - payer_email
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: transaction
    params:
      merchantId: 010000000028406478969
      shopId: '300000000000000550690'
      privateKey: '-----BEGIN RSA PRIVATE KEY-----

        MIIEpAIBAAKCAQEA24IcaCfDs/vdl9DcrEo2OWzwf5+qBHVDZ9pO66PmE4VJOSKe

        0NN+Zq80O9BcHtUTiLFPyPgwiGfqamGYiDdRTmDXFs1KGpioUiPV3gY0wfRH6iTJ

        D3yXImNDzj4GTHzrKb6TrkmjpnKldyiJ+DYGj754vI7L7csFp0F9s426S+j/0CJi

        DamoRTCVTJmPwur58ii+HKa3AYbWCLqY1oolFWNv6n0jgh1d4by8kqNIiPiAH91U

        Xm92wv+zUjEoZRgjzy+HkINZP7OGrhwYGZnlICZ8GBJ5b4ekuZREu1sES4YIeV5O

        Sjmv9TBd7IeE1TbW8ER8RECwn2ad61qZz8Kh7wIDAQABAoIBAGwofB7GGSQCInm/

        rDwohPdeulHoNjnkHcZ6RxDMvX0424+Pg3mZ/FpUUgR28i0vCGT+GTYJNMDBkzu/

        wwy7VRCtns3ZcX4RYj628ZZosG4xE45HedprpXyINMzWuvvNQYJcKSBjoINPUkCY

        dQMce7cwPwWJxunwc2SqXGmwl+72gZU2jxOIcFXixEl7fGbIr4U2mTYJKlgGlP7G

        lveTHjoeOLevux+dsrX/1MTZvxwzltXt1p//XOIiNw2R+M3yTuWHWKqTEe1n6DR4

        YFYWX4XSnn8Jxstg2CUE9IOZ7H2nn+mg52/zovfOxBWgdgNPxmFrUriHRThSnV8q

        fs9gFAECgYEA/WDBWbvJfPRkX2mpAQC7AqtR0wZ/XMEOk6PKr+Je6wcflYdDcQho

        x2lJVC03UuKW9m69gQNp9p70nVG1Bqiy34mYlG2eJ59gMBAx2hLEdcdzIksse+FP

        UB/zYifen1Hn4QFoWc4WzxGcqQUHSe+V//FNl3rq3BP91Y7Rpff0P28CgYEA3ceg

        7VllGet1JcaHW8gTsYerxcowGgdBpUHeVBY9w2J8JhDWa6u04u1hJvjC2NdaQIX+

        FMKSmx1cCKdGVOrj8aq6kzplHFAdYsJQcHVzX3U5IqyVRbhFbkVdVEk7YwtHmnkg

        qSpUg6Hj95aypyCQbphV1ZEIeWE0KUlqHTXmhYECgYBbJyjH+HfHHUDS1nc3ZiTh

        E/MO4OKG4uk0khND7UNKeDiTmaLYkjbnrmf0AYRKrDu1EifYtvqy/4Ju6ksexyf6

        pUyf8UOZa4u2Hs1gb6n/2S4BY1vwgSEAaU4svL0pQdUSrGf3Dt5Dxkk+wRFbNvcW

        qZ/JZC4D2KlT39pqQ+a5vwKBgQDQ6CtxiASQ/tdRpwl37iaG0tp+LG9VBULTzREF

        OhIhytJQ9QlVUN/J5nreP/MiWPC92Lm2inWYwXYg/JhmgwAGc6Dd8GKv4dNcZNdq

        p2fvIjeYruLJUsOsFJDORVE4gbaIDtMyJhqIB+X6IazVevoyAzLPQpet5l9BCNN5

        An3LgQKBgQCNtMS63VP8b1ecgT51dd/QDecF4ulSBSgUXVCdte8gEvviZGk0Bh7o

        Vdc02aWBTFTEodBJc1D8QLb31RNv9SnQX940H4QvYFBck7kDacPeWeCWAuVbcgC7

        Ai3ulIk4RVdqHYX5wiPqKeypkj3Z7bUDdBLPvO7gywcXydY4L4EauA==

        -----END RSA PRIVATE KEY-----'
- name: sandbox_credentials
  endpoint:
    path: /sandbox/credentials
    method: GET
- name: test_cards
  endpoint:
    path: /sandbox/test/cards
    method: GET
- name: test_wallet_details
  endpoint:
    path: /sandbox/test/wallet
    method: GET
- name: payment
  endpoint:
    path: /pay
    method: POST
    data_selector: payment_response
    params:
      apiKey: be4722f878304553843ff4cfaddb18a4
      merchantId: 010000000028406478969
      shopId: '300000000000000550690'
      privateKey: '-----BEGIN RSA PRIVATE KEY-----

        MIIEpAIBAAKCAQEA24IcaCfDs/vdl9DcrEo2OWzwf5+qBHVDZ9pO66PmE4VJOSKe

        0NN+Zq80O9BcHtUTiLFPyPgwiGfqamGYiDdRTmDXFs1KGpioUiPV3gY0wfRH6iTJ

        D3yXImNDzj4GTHzrKb6TrkmjpnKldyiJ+DYGj754vI7L7csFp0F9s426S+j/0CJi

        DamoRTCVTJmPwur58ii+HKa3AYbWCLqY1oolFWNv6n0jgh1d4by8kqNIiPiAH91U

        Xm92wv+zUjEoZRgjzy+HkINZP7OGrhwYGZnlICZ8GBJ5b4ekuZREu1sES4YIeV5O

        Sjmv9TBd7IeE1TbW8ER8RECwn2ad61qZz8Kh7wIDAQABAoIBAGwofB7GGSQCInm/

        rDwohPdeulHoNjnkHcZ6RxDMvX0424+Pg3mZ/FpUUgR28i0vCGT+GTYJNMDBkzu/

        wwy7VRCtns3ZcX4RYj628ZZosG4xE45HedprpXyINMzWuvvNQYJcKSBjoINPUkCY

        dQMce7cwPwWJxunwc2SqXGmwl+72gZU2jxOIcFXixEl7fGbIr4U2mTYJKlgGlP7G

        lveTHjoeOLevux+dsrX/1MTZvxwzltXt1p//XOIiNw2R+M3yTuWHWKqTEe1n6DR4

        YFYWX4XSnn8Jxstg2CUE9IOZ7H2nn+mg52/zovfOxBWgdgNPxmFrUriHRThSnV8q

        fs9gFAECgYEA/WDBWbvJfPRkX2mpAQC7AqtR0wZ/XMEOk6PKr+Je6wcflYdDcQho

        x2lJVC03UuKW9m69gQNp9p70nVG1Bqiy34mYlG2eJ59gMBAx2hLEdcdzIksse+FP

        UB/zYifen1Hn4QFoWc4WzxGcqQUHSe+V//FNl3rq3BP91Y7Rpff0P28CgYEA3ceg

        7VllGet1JcaHW8gTsYerxcowGgdBpUHeVBY9w2J8JhDWa6u04u1hJvjC2NdaQIX+

        FMKSmx1cCKdGVOrj8aq6kzplHFAdYsJQcHVzX3U5IqyVRbhFbkVdVEk7YwtHmnkg

        qSpUg6Hj95aypyCQbphV1ZEIeWE0KUlqHTXmhYECgYBbJyjH+HfHHUDS1nc3ZiTh

        E/MO4OKG4uk0khND7UNKeDiTmaLYkjbnrmf0AYRKrDu1EifYtvqy/4Ju6ksexyf6

        pUyf8UOZa4u2Hs1gb6n/2S4BY1vwgSEAaU4svL0pQdUSrGf3Dt5Dxkk+wRFbNvcW

        qZ/JZC4D2KlT39pqQ+a5vwKBgQDQ6CtxiASQ/tdRpwl37iaG0tp+LG9VBULTzREF

        OhIhytJQ9QlVUN/J5nreP/MiWPC92Lm2inWYwXYg/JhmgwAGc6Dd8GKv4dNcZNdq

        p2fvIjeYruLJUsOsFJDORVE4gbaIDtMyJhqIB+X6IazVevoyAzLPQpet5l9BCNN5

        An3LgQKBgQCNtMS63VP8b1ecgT51dd/QDecF4ulSBSgUXVCdte8gEvviZGk0Bh7o

        Vdc02aWBTFTEodBJc1D8QLb31RNv9SnQX940H4QvYFBck7kDacPeWeCWAuVbcgC7

        Ai3ulIk4RVdqHYX5wiPqKeypkj3Z7bUDdBLPvO7gywcXydY4L4EauA==

        -----END RSA PRIVATE KEY-----'
- name: inventory_confirmation
  endpoint:
    path: /inventory-confirmation
    method: POST
- name: credentials
  endpoint:
    params:
      secretKey: aaaaaaaaaaaaaaaabbbbbbbbbCCCCC123
      merchantID: 0963465816
      websiteID: '56098'
- name: test_cards
  endpoint:
    params:
      ATM_Card:
        Type: ATM Card
        Bank: Techcombank
        Card_number: 9704 0000 0000 0018
        Name: NGUYEN VAN A
        Valid_through: 03/07
        CVV: '-'
      Credit_Card:
        Type: Credit Card
        Bank: VISA
        Card_number: 4111 1111 1111 1111
        Name: '-'
        Valid_through: 01/30
        CVV: '123'
- name: test_wallet_details
  endpoint:
    params:
      Account: 0357758300
      Password: Abcd1234
      OTP: '123456'
- name: inventory_confirmation
  endpoint:
    path: /inventory-confirmation
    method: POST
- name: PortOne_Payment
  endpoint:
    path: /portone/payment
    method: POST
- name: payment_method
  endpoint:
    path: /portonepg/standard/update
    method: POST
- name: subscription_link
  endpoint:
    path: /subscription/link
    method: GET
    data_selector: states
    params: {}
- name: payment_methods
  endpoint:
    path: /portonepg/standard/update
    method: POST
- name: request_object
  endpoint:
    path: /generate_signature
    method: POST
    data_selector: signature
    params: {}
- name: payment_request
  endpoint:
    path: /services/data/vXX.X/sobjects/PaymentRequest
    method: POST
    data_selector: records
    params: {}
- name: payment_request
  endpoint:
    path: /payment/request
    method: POST
    data_selector: data
    params: {}
- name: Subscription Link
  endpoint:
    path: /subscription-link
    method: GET
    data_selector: records
    params: {}
- name: regular_subscription
  endpoint:
    path: /regular-subscription
    method: POST
    data_selector: subscription_data
    params:
      currency: USD
      quantity: '1'
      success_url: https://subscription.portone.cloud/success.html
      failure_url: https://subscription.portone.cloud/failure.html
- name: generate_signature
  endpoint:
    path: /generate_signature
    method: POST
    data_selector: signature
    params: {}
- name: payment_request
  endpoint:
    path: /payment/request
    method: POST
    data_selector: data
- name: request_obj
  endpoint:
    path: /generate_signature
    method: POST
- name: ondemand_plan
  endpoint:
    path: /reference/post_api-subscription-createplan
    method: POST
    data_selector: data
    params: {}
- name: regular_plan
  endpoint:
    path: /api/regular_plan
    method: GET
    data_selector: records
    params: {}
- name: payment_request
  endpoint:
    path: /payments
    method: POST
    data_selector: response
    params: {}
- name: subscription
  endpoint:
    path: /ondemand/subscription
    method: GET
    data_selector: records
- name: payment_request
  endpoint:
    path: /payment/request
    method: POST
    data_selector: response
    params: {}
- name: generate_signature
  endpoint:
    path: /generateSignature
    method: POST
    data_selector: signature
    params: {}
- name: payment_request
  endpoint:
    path: /payment/request
    method: POST
    data_selector: records
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: signature
    params: {}
- name: payment_request
  endpoint:
    path: /payment/request
    method: POST
    data_selector: signature
    params: {}
- name: subscription
  endpoint:
    path: /api/subscription
    method: POST
    data_selector: data
    params: {}
- name: create_plan
  endpoint:
    path: /api/subscription/createPlan
    method: POST
    data_selector: response
    params: {}
- name: create_subscription
  endpoint:
    path: /api/subscription/createSubscription
    method: POST
    data_selector: is_success
    params: {}
- name: request_signature
  endpoint:
    path: /generate_signature
    method: POST
    data_selector: signature
- name: ondemand_plan
  endpoint:
    path: /ondemand/plan
    method: POST
    data_selector: signature
    params: {}
- name: OnDemand Plan
  endpoint:
    path: /api/subscription/createPlan
    method: POST
    data_selector: response
    params: {}
- name: request
  endpoint:
    path: /api/request
    method: POST
    data_selector: response
    params: {}
- name: create_subscription
  endpoint:
    path: /api/subscription/createSubscription
    method: POST
    data_selector: ''
    params: {}
- name: subscription
  endpoint:
    path: /subscription
    method: GET
    data_selector: records
    params: {}
- name: generate_signature
  endpoint:
    path: /generate_signature
    method: POST
    data_selector: signature
    params: {}
- name: on_demand_deduction
  endpoint:
    path: /api/subscription/deduct
    method: POST
    data_selector: is_success
    params: {}
- name: request
  endpoint:
    path: /generate_signature
    method: POST
    data_selector: signature
- name: ondemand_deduction
  endpoint:
    path: /ondemand/deduction
    method: POST
    data_selector: signature
    params: {}
- name: On-Demand Plan
  endpoint:
    path: /api/ondemand-plan
    method: POST
    data_selector: data
    params: {}
- name: generate_signature
  endpoint:
    path: /generate_signature
    method: POST
    data_selector: parameters
    params: {}
- name: subscription_parameters
  endpoint:
    path: /docs/subscription-parameters
    method: GET
    data_selector: parameters
    params: {}
- name: signature_verification
  endpoint:
    path: /subscription-redirection-response
    method: GET
    data_selector: response
- name: create_plan
  endpoint:
    path: /api/subscription/createPlan
    method: POST
    data_selector: response
    params: {}
- name: subscription_response
  endpoint:
    path: /api/v1/subscription_response
    method: POST
    data_selector: response
    params: {}
- name: subscription_response
  endpoint:
    path: /subscription-redirection-response
    method: GET
    data_selector: response
- name: create_subscription
  endpoint:
    path: /api/subscription/createSubscription
    method: POST
    data_selector: is_success
    params: {}
- name: SubscriptionResponse
  endpoint:
    path: /subscription/response
    method: POST
    data_selector: response
    params: {}
- name: On-Demand Plan
  endpoint:
    path: /docs/ondemand-plan
    method: GET
    data_selector: records
    params: {}
- name: On-Demand Subscription
  endpoint:
    path: /docs/ondemand-subscription-api
    method: GET
    data_selector: records
    params: {}
- name: On-Demand Deduction
  endpoint:
    path: /docs/creating-an-on-demand-deduction
    method: GET
    data_selector: records
    params: {}
- name: signature_verification
  endpoint:
    path: /subscription/link/webhook/response
    method: GET
    data_selector: signature
- name: slWebhookResponse
  endpoint:
    params:
      currency: currency
      order_ref: order_ref
      merchant_order_ref: merchant_order_ref
      status: status
      signature_hash: signature_hash
- name: create_plan
  endpoint:
    path: /api/subscription/createPlan
    method: POST
    data_selector: null
    params: {}
- name: Subscription Link Webhook
  endpoint:
    path: /subscription/link/webhook
    method: POST
    data_selector: data
    params: {}
- name: create_subscription
  endpoint:
    path: /api/subscription/createSubscription
    method: POST
    data_selector: response
    params: {}
- name: subscription_link
  endpoint:
    path: /subscription/link
    method: GET
    data_selector: records
- name: on_demand_deduction
  endpoint:
    path: /api/subscription/deduct
    method: POST
    data_selector: is_success
    params: {}
- name: regular_plan
  endpoint:
    path: /creating-a-regular-plan
    method: GET
    data_selector: plan_details
- name: invoice_status
  endpoint:
    path: /invoice/status
    method: GET
    data_selector: statuses
- name: invoice_details
  endpoint:
    path: /invoices/details
    method: GET
    data_selector: invoice_details
- name: subscription
  endpoint:
    path: /docs/subscription-redirection-parameters
    method: GET
    data_selector: parameters
    params: {}
- name: subscription_response
  endpoint:
    path: /subscription/response
    method: POST
- name: subscription_response
  endpoint:
    path: /subscription/response
    method: POST
    data_selector: responseObj
    params: {}
- name: signature_verification
  endpoint:
    path: /subscription/verifySignature
    method: POST
    data_selector: parameters
    params: {}
- name: Subscription Link Webhook
  endpoint:
    path: /subscription-link-webhook
    method: GET
    data_selector: webhook_data
- name: SLWebhookResponse
  endpoint:
    path: /webhook/subscribe
    method: POST
    data_selector: data
    params: {}
- name: subscription_link_webhook
  endpoint:
    path: /subscription/link/webhook
    method: GET
    data_selector: SLWebhookResponse
    params: {}
- name: subscription_link
  endpoint:
    path: /subscription-link
    method: GET
    data_selector: records
    params: {}
- name: invoice
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
- name: invoice_statuses
  endpoint:
    path: /invoice/statuses
    method: GET
    data_selector: statuses
- name: invoice_details
  endpoint:
    path: /invoices/details
    method: GET
    data_selector: invoice
    params: {}
notes:
- An Authorization header with a Bearer token is required.
- Set environment to sandbox for testing purposes.
- If you are accepting payments from the customer to your company only, register as
  a single merchant.
- If you are accepting payments from the customer on behalf of other entities, register
  as a Master Merchant.
- By default, your account will initially be set to inactive status, and you'll have
  access to limited services in Sandbox mode.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- The credentials provided on the Payment Channel (which you configure here) is only
  for test mode. To start payment acceptance, you will need the live credentials from
  the Payment Channel.
- For enable the Credit/Debit card, also check the Make Default checkbox.
- If you configure multiple Payment Channels, check the Make Default checkbox for
  the payment channel through which you intend to process the credit/debit card transactions.
- Testing your integration is a critical step to ensure that all components function
  as expected and provide a seamless experience for users.
- Test the entire payment flow, from initiating a payment to successfully creating
  an order.
- Verify that users receive accurate payment confirmations after completing a transaction.
- Test the webhooks to ensure your system correctly receives and processes notifications
  from PortOne regarding transaction statuses.
- Utilize PSP test card information and wallet details provided in the relevant Payment
  Service Provider documentation.
- Ensure the signature verification process for both webhooks and redirection data
  is implemented correctly.
- Simulate refund transactions to validate the refund process.
- Utilize the transaction status check APIs to confirm that your application can accurately
  retrieve and display the current status of transactions.
- Verify that all required payment methods are activated and functioning as expected
  in your dashboard.
- The credentials provided on the Payment Channel is only for test mode. To start
  payment acceptance, you will need the live credentials from the Payment Channel.
- Ensure the signature verification for redirection and webhook data is correctly
  implemented to secure data integrity
- Store your PortOne API keys securely, such as in environment variables, to prevent
  unauthorized access
- Global Payment Ecosystem
- Single Platform for Multiple PSPs
- Test the webhooks to ensure your system correctly receives and processes notifications
  from PortOne.
- JWT is used for authentication when interacting with PortOne APIs.
- Uses JWT for authentication
- Signature generation must occur on the server side.
- Generating a signature via PortOne API on Merchant Frontend is not recommended.
- JWT token is valid for the next 6 hours
- Uses HMAC SHA-256 for signature generation
- Ensure to handle the client key and secret securely
- Uses JWT for authentication.
- Signature generation must occur on the server side to keep the secret key confidential.
- Signature generation must occur on the server side for security reasons.
- Using PortOne API for signature generation is preferred.
- Ensure correct formatting of amount
- The signature generation process must occur on the backend.
- Use secret key for generating signatures.
- Both Sandbox and Production mode integration can be managed via the same APIs and
  same account on the PortOne platform.
- Ideal for large-scale applications, e-commerce platforms, or businesses that require
  a complex, branded checkout experience with full control over the payment journey.
- Passing the signature hash can be skipped if you whitelist your domain/IP/App
- Ensure iFrame source is from a trusted domain to avoid CORS issues
- The Embed SDK is designed for rapid integration across multiple platforms like Android,
  Flutter, iOS, and React Native.
- It allows developers to integrate payment processing using a WebView, making it
  ideal for apps that prioritize speed and simplicity over full UI customization.
- 'Use ''is_checkout_embed: true'' and ''override_auto_redirect: false'' for embedded
  checkout.'
- To access the SDK, an authKey is required.
- The applicationId is required for whitelisting the app.
- authKey is required to access the SDK
- Generating a signature hash is optional if the app is whitelisted
- JWT token is required for authentication.
- Generating a signature hash is optional if the app is whitelisted.
- Receiving the payment status within the override method `onActivityResult` is a
  common practice in integration to handle payment callbacks.
- success_url, failure_url, expiry_hours, redirect_url, and environment are required
  fields.
- Generating a signature hash is optional if you have whitelisted your app while initializing
  the checkout.
- The unique PortOne key for the merchant is required.
- Merchant order ID is required.
- Signature hash is required.
- Amount is required.
- Currency is required.
- Country code is required.
- Success URL is required.
- Failure URL is required.
- Expiry hours is required.
- Redirect URL is required.
- Environment is required.
- The PortOne SDK requires a JWT token for authentication.
- Requires portoneKey for token generation
- JWT Token needs to be generated using portoneKey
- Requires setup of account on PortOne for integration
- Ensure you have created an account on PortOne to access their services and functionalities.
- Customize and enable the specific payment channels and methods that align with your
  business requirements and preferences.
- Ensure you have a React Native application ready for SDK integration.
- Requires setup of JWT token generation using portoneKey.
- Uses JWT for authentication — requires setup of portoneKey for token generation
- Uses JWT for authentication — requires setup of portoneKey
- Check whether PortOne Key and the Secret Key are of the same account
- Check whether the Secret Key is not modified
- Check whether `Bearer` keyword is added before the generated token with a white
  space. `Bearer $jwtToken`
- Verify if the expiration time should be greater than the current time
- Check whether all params match with the payload/request
- Check whether the portone key match with the payload and the account
- Make sure the payment channels and payment methods which are added in the payload
  are enable from the portone portal
- Make sure you have added environment either `sandbox` or `live`
- 'If items are provided then please verify the values provided should match the total
  amount: `sum(items price * items quantity) + shipping charge - discount = amount`'
- Integration requires more effort but offers flexibility suited for complex payment
  needs.
- Requires obtaining an authKey to access the SDK
- Requires authKey to access the SDK, which must be requested from PortOne team.
- Generate a JWT token for authentication.
- Authorization key (`authKey`) is required to access the SDK.
- Requires a JWT token for authentication.
- Signature hash generation is optional if the app is whitelisted.
- Ensure the merchant's unique identifier is used in API requests
- Ensure to handle both success and failure responses appropriately
- Verify authentication tokens before making requests
- JWT Token required for authentication
- Signature Hash needs to be included in the payload
- JWT Token needs to be constructed using the portoneKey.
- Signature Hash needs to be generated using HmacSHA256.
- Handles multiple payment methods including saved cards and direct bank transfer.
- Uses API key for authentication.
- All requests must include the API key.
- Requires setup of connected app in the merchant portal.
- Requires a valid client key and JWT token for API calls.
- Ensure to handle the response and errors properly.
- Requires OTP for fetching saved credit cards.
- JWT Token must be valid for authentication.
- JWT Token needs to be generated and used for authentication
- Ensure to handle success and failure callbacks properly
- Requires a valid portOneKey and OTP to fetch saved cards.
- Direct Bank Transfer details must be fetched before processing payments.
- Refer Error Codes List for more details.
- Refer Signature Verification to check for Signature verification of response data
  received in redirection.
- To ensure the integrity and authenticity of payment responses, you can use signature
  verification.
- The signature is a cryptographic hash generated using a secret key and the content
  of the payment response.
- Uses HMAC SHA-256 for signature verification.
- Compare the received amount, currency with the details in your DB for the given
  merchant_order_ref.
- Uses HMAC SHA256 for signature verification
- Ensure the response signature matches the generated hash for validation
- Refer to Redirection Parameters for the complete list of redirection parameters.
- To ensure the integrity and authenticity of webhook, you can use signature verification.
- The signature is a cryptographic hash generated using a secret key and the content
  of the webhook.
- The webhook sends payment status updates.
- Ensure to verify the signature hash to confirm data integrity.
- Hash verification requires the correct secret key.
- Refer to Payment Webhook Parameters for the complete list of payment webhook parameters.
- Updated 13 days ago
- Ensure the integrity and authenticity of webhook using signature verification.
- Uses HMAC for signature verification
- Hash verification is necessary to ensure the response is from a valid source.
- Refer to Payment Link Webhook Parameters for the complete list of payment link webhook
  parameters.
- Refer to Payment Webhook Signature section to verify the signature_hash received
  in the webhook
- During testing you can use FOSS Webhook server to setup a webhook endpoint.
- Hash verification is required to ensure data integrity.
- Refer to Payment Link Webhook Signature section to verify the signature_hash received
  in the webhook
- Uses HMAC SHA256 for signature verification.
- For TazaPay, the customer's Email, Firstname and Lastname are required.
- UPI method does not support partial refunds.
- Refunds can be initialized from the merchant portal, refund status can be checked
  at both merchant portal and Tazapay Dashboard.
- Risk SDK integration is mandatory for all Tazapay APM payment requests.
- Use following values in embedded JS code to pay via Tazapay channel
- Hash verification is required to ensure the integrity of the webhook data.
- During testing you can use FOSS Webhook server to setup a webhook endpoint. Create
  a sample webhook endpoint at webhook.site
- AppotaPay PG only supports VND(₫) currency. The Credit Card method supports USD($)
  currency.
- Refunds can be initialized from the merchant portal, for refund status please check
  the Asiapay Dashboard
- Partial Refunds can be requested after 24 hours of the transaction, within 24 hours
  only Full Refund is possible
- Multiple payment providers available across different regions.
- 'Atome PG only supports the following currency: SGD, HKD, MYR, IDR, THB, TWD, VND,
  PHP, JPY.'
- 'In case of VN region e-sign code: 111111, card: ABBbank card no: 9704-2500-0000-0084.
  Enter all other information randomly (2nd field - Name needs a space), mobile number:
  enter a random number starting with 08, bank otp : 1111'
- Baokim PG only supports VND(₫) currency.
- Adyen is a global payment platform that allows businesses to accept e-commerce,
  mobile, and point-of-sale payments.
- It offers a comprehensive solution for merchants to process payments from customers
  worldwide in a secure and streamlined manner.
- BBL PG supports THB(฿) currency.
- PromptPay is available as a payment method.
- Chillpay PG only supports THB currency.
- Refunds can be initialized from the merchant portal, for refund status please check
  the Chillpay Dashboard.
- Alipay and WeChat Pay Testing Procedures require an appointment with chillpay customer
  support via LINE Official.
- Refunds are not supported for Cybersource Credit Card method from the merchant dashboard.
- For Error transaction status, kindly use Cybersource Dashboard to verify the status
  of the transaction and update the correct status on merchant dashboard.
- ECPay currently only supports TWD currency.
- Refunds can be initialized from the merchant portal, refund status can be checked
  at both merchant portal
- Refunds can be initialized from the merchant portal, for refund status please check
  the Baokim Dashboard
- Multiple-partial refunds are not allowed
- To test wallets, please check respective testing sections. Also, the amount for
  transaction should be between 1,000 VND to 20,000,000 VND.
- ChillPay a white-label with T+1 money transfer Payment Gateway, to receive payment
  from customers who pay for products or services.
- Multiple Partial Refunds are not supported for ESPAY transactions.
- Only Credit Card Refund (full/partial) can be initialized from the merchant portal.
- For international cards, the refund time will be from 7-14 days, depending on each
  bank SLA.
- To integrate with ESPAY QRIS, merchants are required to whitelist the PortOne IP
  and get both the PortOne and ESPay Public keys configured from ESPay team for their
  ESPay MID.
- Make an appointment with chillpay customer support via LINE Official
- At the appointment time, please test the payment transaction
- For Error transaction status, Kindly use Cybersource Dashboard to verify the status
  of the transaction and update the correct status on merchant dashboard.
- Use Access Key and Secret Key for authentication.
- Name is a required field
- Email is a required field
- Order details is a required field
- Refunds can be initialized from the merchant portal, refund status can be checked
  at both merchant portal and 9Pay Dashboard
- Please request FoxPay team to configure ReturnUrl and IPNUrl for your account, Please
  find IPN URL in Admin portal payment credentials setting page
- Epay PG only supports VND(₫) currency.
- This integration does not support sandbox mode.
- Use AccessPublicKey, a PEM format RSA 2048 bit public key for encryption of SharedToken
  to produce EncryptedSharedToken for initiate order session
- To test in sandbox mode, merchants must have their frontend server IP whitelisted
  by the Inicis team.
- Make sure these details are correctly configured to avoid any payment processing
  issues.
- iPay88 is a payment company that offers e-commerce, retail, online banking, e-wallets
  solutions and more to its merchants.
- iPay88 offers merchants comprehensive online payment options such as credit/debit
  cards, bank transfers and alternative online payments.
- Merchant needs to register Referer Domain https://portone.io/ with iPay88
- Amount in Decimal value not supported for IDR currency
- Description is mandatory
- 'In Order details following fields are mandatory: Id, Name, Quantity, Price'
- 'In Billing details and Shipping details following fields are mandatory: Name, Surname,
  Phone, Email, Address - Line 1, Address - City, Address - State, Address - Postal
  Code, Address - Country Code'
- Copy the Webhook URL provided in the PortOne Admin Dashboard & share it with KBank
  team to configure the Webhook URL for your account.
- Share https://api.portone.cloud/api/handleShopperRedirect/KBANK?callback=true as
  Callback URL with KBank team to configure the Callback URL for Card payments, Alipay
  and UnionPay payment methods.
- Only Cards methods available for sandbox testing
- Refunds cannot be initialized from the PortOne Dashboard.
- Webhook Settings needs to be configured on the Komoju Dashboard
- 'Email is required for the below methods: Konbini, Credit/Debit Card'
- 'Name and Surname are required for the below methods: PayEasy, Bank Transfer, Paidy,
  Credit/Debit Card'
- Phone is required for the Bank Transfer method
- WebMoney prepaid card method is currently not available in sandbox and via Checkout
- 'Billing or Shipping address is required for below methods: Paidy'
- We also send `additional_payment_details` field in webhooks and query API in case
  of Konbini, PayEasy or Bank transfer methods
- 'Supported countries: Thailand'
- KBank PG supports THB(฿) currency
- Refunds can be initialized from the merchant portal, Partial refunds are not supported
  for VND currency.
- Uses sandbox environment for testing
- Use provided keys for payment processing via Klasha channel
- MPGS provides support for Credit and Debit Card (Visa/Master/JCB) payment options.
- Email is required for Konbini and Credit/Debit Card methods
- Name and Surname are required for PayEasy, Bank Transfer, Paidy, and Credit/Debit
  Card methods
- Billing or Shipping address is required for Paidy method
- Refunds can be initialized from the merchant portal, Partial refunds are not supported
  for VND currency
- Uses sandbox environment for testing.
- Supports THB, TWD currency
- Ninepay PG only supports VND(₫) currency.
- Refunds can be initialized from the merchant portal, refund status can be checked
  at both merchant portal and Ninepay Dashboard.
- Mastercard payment gateway services provides multiple payment solutions.
- Refunds can be initialized from the merchant portal, refund status can be checked
  at both the merchant portal and Momopay Dashboard
- In case of multiple offerings of same payment method, merchants can configure the
  payment method from the payment channel of his choice.
- Refunds can be initialized from the merchant portal, for refund status please check
  the ONEPay Dashboard
- Description is a required field
- Email address is compulsory to initialize payments
- Refunds cannot be initialized from PortOne
- This integration supports Overseas Payment Service only.
- Can only test unauthorized credit card mode in sandbox mode.
- KRW does not support decimal amounts.
- This integration supports Domestic Subscription Payment Service only.
- KRW does not support decimal amounts
- Webhook Needs to be configured on the Paymentwall Dashboard
- Customer email is a required field
- APMs can only be simulated in sandbox mode via the Test method
- This integration also supports recurring payments for a customer.
- Can only test unauthorized credit card mode in sandbox mode
- Please choose Express Pay out then use this test account
- Refunds are not supported for Payeasy Bank Transfers and eContext payment methods.
- Only unauthorized credit card mode is available in sandbox mode.
- Webhooks are source of truth for razorpay
- For Reach, the Customer's Name, Email, Address and Order details are required.
- Refunds can be initialized from the merchant portal, refund status can be checked
  at both merchant portal and Reach Dashboard.
- For Reach iDEAL payment method, the supported countries are Netherlands(NL).
- Webhook needs to be configured on the Paymentwall Dashboard
- This integration also supports recurring payments for a customer
- First Name & Last Name is a required field
- To integrate with SmartPay, merchants are required to whitelist the PortOne IP and
  get both the PortOne and SmartPay Public keys configured from Smartpay team for
  their SmartPay MID
- Refunds can be initialized from the merchant portal
- For refunds with an IN_QUEUE status, please verify the status with SmartPay and
  ensure to update it correctly via the PortOne merchant portal once the refund is
  processed, indicating whether it was successful or failed.
- For TapPay, the customer's email, first name, last name and phone number are required
- The customer's phone number should either start with 09 or + followed by numbers
- To enable ApplePay, share the Apple on the Web apple-developer-merchantid-domain-association
  file with the PortOne team and whitelist checkout.portone.cloud domain
- This payment channel cannot be used without payment links
- Webhooks are mandatory for a robust, production-ready integration
- Refunds can be initialized from the merchant portal, for refund status please check
  the ShopeePay Dashboard
- 'Webhook Settings : Copy the Webhook URL provided in the PortOne Admin Dashboard
  & share it with ShopeePay team to configure the Webhook URL for your account'
- Supports AUD currency.
- Sandbox mode credentials provided.
- TripleA is licensed by MAS (The Monetary Authority of Singapore) and complies with
  the highest international standards for AML and KYC.
- Wallet payments can be refunded in full or multiple partial refunds.
- Other methods like Credit card, ATM card only support full refunds.
- The customer's email, first name, last name and phone number are required
- Test API to simulate successful Bank Transfer
- Supports AUD currency
- Sandbox mode available
- For domestic cards, the refund time will be from 3-8 days, for international cards,
  it takes 15-30 days, depending on each bank.
- Customers will have to check refund transaction status on their bank accounts because
  local banks doesn’t respond the refund success status to VNPay.
- 'Webhook Settings: Copy the Webhook URL provided in the PortOne Admin Dashboard
  & share it with VNPay team to configure the Webhook URL for your account'
- Uses embedded JS code to pay via VTCPay channel
- Copy the Webhook URL provided in the PortOne Admin Dashboard & paste it to the Xendit
  Callbacks Settings for given products
- Please use your Vietnam phone number. Add balance for sandbox environment using
  this link [Deposit to ZaloPay Account](https://docs.zalopay.vn/en/v1/start/#A-II)
- PortOne will communicate with the merchant's endpoint using its designated IP address.
- Merchants should thoroughly test the endpoint to ensure it correctly processes valid
  requests.
- For domestic cards, the refund time will be from 3-8 days, for international cards,
  it takes 15-30 days, depending on each bank
- Customers will have to check refund transaction status on their bank accounts because
  local banks doesn’t response the refund success status to VNPay
- VTCPay PG only supports VND(₫) currency.
- Copy the Webhook URL provided in the PortOne Admin Dashboard & paste it to the VTCPay
  Dashboard for configuring the webhook notifications
- Xendit is a leading payment gateway for Indonesia, the Philippines and Southeast
  Asia.
- PortOne's backend (PBE) will wait for a response from the merchant's endpoint for
  a maximum of 10 seconds.
- 'Shared Payment Credentials: All payments processed by sub-merchants can be routed
  through the master merchant’s payment credentials, ensuring consistency and security.'
- 'PCI DSS Compliance: PortOne’s payment infrastructure adheres to PCI DSS standards,
  safeguarding all payment-related data.'
- Sub-merchants can use the master merchant’s payment credentials to process payments
  or set up their credentials to process payments.
- Payment links streamline the payment collection process, making it easier for both
  businesses and their customers.
- 'No Coding Required: Payment Pages can be set up without any technical or coding
  knowledge.'
- 'Secure Transactions: Payment Pages are built with robust security measures to protect
  customer data.'
- Payment Pages can exist in either an Active or Inactive state.
- 'No Website Needed: Businesses can collect subscription payments without needing
  a full e-commerce site.'
- 'Quick Setup: Merchants can start accepting subscription payments immediately without
  needing a full e-commerce website.'
- PortOne API payment requests are signed to ensure their authenticity and integrity.
- Payment requests must be signed for authenticity.
- Refer to Plan Request for the complete list of plan request parameters.
- Payment requests are signed to ensure their authenticity and integrity.
- Payment Pages can be set up without any technical or coding knowledge
- Payment Pages allow for continuous use, generating new payment links automatically
- Uses API key for authentication
- This documentation covers the key features and functionalities of the Payment Page
  Details screen, enabling merchants to efficiently manage and monitor their Payment
  Pages within the PortOne merchant portal.
- The unique merchant order reference is generated by the merchant
- Subscription links enable customers to make subscriptions directly from their devices.
- Refer to Subscription Request for the complete list of subscription request parameters.
- Requires HMAC SHA-256 signature for requests
- The subscription link's order reference is used for ondemand deductions
- Refer to Ondemand Deduction Request for the complete list of ondemand deduction
  request parameters.
- Requires client_key and secret for generating signature
- Payment requests must be signed to ensure authenticity and integrity.
- 'Regular Plans: Suitable for fixed recurring payments like subscriptions or memberships.'
- Use sandbox for testing and live for production.
- Use `sandbox` for testing and `live` for production.
- Validate all required fields before sending the request.
- 'OnDemand Plans: Ideal for usage-based subscriptions or services with variable billing.'
- 'Descriptive Details: Use descriptive names and notes for easier plan management
  and tracking.'
- Use 'sandbox' for testing and 'live' for production.
- 'Mandatory Fields: Ensure that Plan Name, Description, Frequency, Period, Currency,
  and Amount are correctly filled.'
- 'Regular Plan Configuration: Do not enable the ''On Demand'' option for Regular
  Plans.'
- 'Additional Notes: Use this feature to provide extra information to customers as
  needed.'
- 'Accuracy: Double-check all entered details before creating the plan.'
- The API requires a signature generated using HMAC SHA-256.
- On-Demand Subscriptions do not follow a fixed schedule or amount.
- Merchants can initiate charges as needed based on customer usage or activity.
- API payment requests are signed to ensure authenticity and integrity.
- Plan Name and Description are mandatory fields; ensure they are filled accurately.
- On Demand option must be enabled to activate On-Demand Plans.
- Use Additional Notes feature to provide extra information or instructions related
  to the plan.
- Choose the currency applicable to your target audience or business model.
- Double-check all details before submitting the form.
- Refer Signature Verification to check for Signature verification of response data
  received in the subscription redirection.
- Ensure all required fields are correctly validated before sending the request.
- To ensure the integrity and authenticity of subscription responses, you can use
  signature verification.
- Refer to Subscription Redirection Parameters for the complete list of redirection
  parameters.
- Hash verification succeeded indicates a valid response.
- Hash verification failed indicates an invalid response.
- Uses signature verification for webhook integrity and authenticity.
- Hash verification is done using HMAC with SHA256.
- Requires a secret key for signature verification.
- Refer to Subscription Link Webhook Parameters for the complete list of subscription
  link webhook parameters.
- Refer to Subscription Link Webhook Signature section to verify the signature_hash
  received in the webhook
- Predictable revenue from recurring payments
- Data security and PCI compliance are crucial
- Automated ingestion system handles data from platforms like Shopify.
- Merchants can charge customers dynamically based on their usage or activity.
- PortOne Invoices integrates both invoicing and payment collection into a single
  system
- Automation features reduce the need for manual effort
- 'Plan Name and Description: These are mandatory fields; ensure they are filled accurately.'
- 'On Demand: This option must be enabled to activate On-Demand Plans.'
- 'Additional Notes: Use this feature to provide extra information or instructions
  related to the plan.'
- 'Currency Selection: Choose the currency applicable to your target audience or business
  model.'
- 'Verification: Double-check all details before submitting the form.'
- The signature is a cryptographic hash generated using a secret key and the content
  of the subscription response.
- Uses HMAC SHA-256 for signature verification
- HMAC SHA-256 is used for signature verification with a secret key.
- 'Automated Reconciliation: It matches your transaction/order data with external
  sources.'
- 'Discrepancy Detection: It identifies missing or incorrect transactions, wrong fees,
  or mismatches in amounts.'
- PortOne Invoices includes key details about the sale transaction, such as product
  names, descriptions, quantities, and pricing breakdown.
- This intuitive interface ensures seamless invoice management and enhances businesses'
  administrative workflow.
errors:
- '400 Bad Request: Contains error details and message explaining the issue.'
- '401 Unauthorized: Contains error details and message explaining the issue.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck JWT token or expiration'
- 'INVALID_REQUEST: Check request parameters'
- 'UNAUTHORIZED: Verify client key and secret'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Invalid or missing authorization token.'
- 'Invalid Signature: Check the provided parameters and secret key.'
- 'CROSS_ORIGIN_ERROR: Ensure the iFrame source is from a trusted domain'
- 'BROWSER_COMPATIBILITY: Check for third-party cookie restrictions'
- '400 Bad Request: Check your payload for missing or incorrect fields.'
- '401 Unauthorized: Ensure you have valid authentication credentials.'
- '404 Not Found: Verify the endpoint URL.'
- '401 Unauthorized: Recheck API key or token expiration'
- 'INVALID_UNAUTHORIZED_JWT_TOKEN_ERROR: Ensure that the PortOne Key and Secret Key
  belong to the same account.'
- 'INVALID_UNAUTHORIZED_TRANSACTION_SIGNATURE_ERROR: Validate if all parameters align
  with the payload/request.'
- 'INVALID_UNAUTHORIZED_TRANSACTION_IAMPORTKEY_ERROR: Confirm that the PortOne key
  matches with the payload and the account.'
- 'INVALID_PAYMENT_CHANNEL: Validate that the payment channels and methods included
  in the payload are enabled in the PortOne portal.'
- 'INVALID_ENVIRONMENT: Verify that an environment (sandbox or live) has been specified.'
- 'Summation of order value, tax, duties, shipping, and discount should equal the
  total amount: If items are provided, ensure that the values match the total amount
  calculation formula: sum(items price * items quantity) + shipping charge - discount
  = amount.'
- 'INVALID_UNAUTHORIZED_JWT_TOKEN_ERROR: Ensure that the PortOne Key and Secret Key
  belong to the same account. Confirm that the Secret Key has not been altered. Verify
  that the Bearer keyword precedes the generated token with a space. Check if the
  token expiration time is after the current time.'
- 'INVALID_UNAUTHORIZED_TRANSACTION_SIGNATURE_ERROR: Validate if all parameters align
  with the payload/request. Ensure that the PortOne key matches with the payload and
  the account.'
- 'Summation of order value, tax, duties, shipping, and discount should equal the
  total amount: If items are provided, ensure that the values match the total amount
  calculation formula: sum(items price * items quantity) + shipping charge - discount
  = amount. Mandatory parameters in the payload: price, promo_discount (0 accepted),
  shipping_charges (0 accepted)'
- 'INVALID_TRANSACTION_ERROR: Check transaction details'
- '4000: INVALID_TRANSACTION_ERROR'
- 'INVALID_PARAMETER: Check mandatory fields'
- '401 Unauthorized: Recheck API keys or tokens'
- 'INVALID_UNAUTHORIZED_JWT_TOKEN_ERROR: Check whether PortOne Key and the Secret
  Key are of the same account'
- 'INVALID_UNAUTHORISED_TRANSACTION_SIGNATURE_ERROR: Check whether all params match
  with the payload/request'
- 'INVALID_UNAUTHORISED_TRANSACTION_IAMPORTKEY_ERROR: Check whether the portone key
  match with the payload and the account'
- 'INVALID_PAYMENT_CHANNEL: Make sure the payment channels and payment methods which
  are added in the payload are enable from the portone portal'
- 'INVALID_ENVIRONMENT: Make sure you have added environment either sandbox or live'
- '5000: Received error from Baokim Server: customer_phone=>The customer phone format
  is invalid.'
- '5000: PAYMENT_SYSTEM_ERROR'
- '5000: Received error from Payment System'
- 'Summation of order value, tax, duties, shipping and discount is equal to amount:
  If items are provided then please verify the values provided should match the total
  amount: sum(items price * items quantity) + shipping charge - discount = amount'
- INVALID_UNAUTHORIZED_JWT_TOKEN_ERROR
- INVALID_UNAUTHORISED_TRANSACTION_SIGNATURE_ERROR
- INVALID_UNAUTHORISED_TRANSACTION_IAMPORTKEY_ERROR
- INVALID_PAYMENT_CHANNEL
- INVALID_ENVIRONMENT
- Summation of order value, tax, duties, shipping and discount is equal to amount
- 'Failed to retrieve payment methods: error_message'
- 'INVALID_PORTONE_KEY: Check the provided portoneKey.'
- 'PAYMENT_FAILED: Payment processing failed. Check transaction details.'
- 'INVALID_MERCHANT_ID: Check the merchant ID provided'
- 'TRANSACTION_FAILED: Review transaction details and try again'
- 'UNAUTHORIZED_ACCESS: Verify authentication token and permissions'
- 'INVALID_REQUEST: Check the request parameters'
- 'UNAUTHORIZED: Ensure valid authentication token'
- 'NOT_FOUND: Verify endpoint paths and resource identifiers'
- '401 Unauthorized: Check JWT token validity'
- '400 Bad Request: Review payload structure'
- Handle error from initiatePayment failure case.
- '4010: Invalid JWT Token / Client Key. Error in parsing JWT Token.'
- '4000: Initiated - Invalid Transaction Error.'
- '400: Invalid request parameters'
- '401: Unauthorized access'
- '500: Internal server error'
- '4010: Invalid JWT Token / Client Key.'
- '4001: Card with given token already exists in the database for this customer'
- '4016: Customer not found with customerUUID'
- '401 Unauthorized: Invalid JWT Token / Client Key.'
- '4001: Card with given token already exists in the database for this customer.'
- '4016: Customer not found with customerUUID.'
- '400: Invalid request parameters.'
- '401: Unauthorized access.'
- '500: Internal server error.'
- Invalid JWT Token / Client Key. Error in parsing JWT Token.
- Card with given token already exists in the database for this customer
- 'Customer card not found with the token: cdec91449d3a4b4bae9144d586a2b972'
- 'Customer not found with customerUUID: 8e52c57d-9bda-437e-973d-fb4f9756d15'
- Card record added successfully for customer!
- Card record deleted successfully for the customer!
- '401 Unauthorized: Check JWT Token validity'
- '400 Bad Request: Ensure payload is formatted correctly'
- Hash verification failed, not from valid source
- Hash verification succeeded
- '4016: Customer card not found with the token'
- 'INVALID_UNAUTHORIZED_JWT_TOKEN_ERROR: Check whether PortOne Key and the Secret
  Key are of the same account.'
- 'INVALID_UNAUTHORISED_TRANSACTION_SIGNATURE_ERROR: Check whether all params match
  with the payload/request.'
- 'INVALID_UNAUTHORISED_TRANSACTION_IAMPORTKEY_ERROR: Check whether the portone key
  match with the payload and the account.'
- 'INVALID_PAYMENT_CHANNEL: Make sure the payment channels and payment methods which
  are added in the payload are enable from the portone portal.'
- 'INVALID_ENVIRONMENT: Make sure you have added environment either sandbox or live.'
- EPAY error codes
- Invalid payment method key
- 'Invalid API Password: Check your API password.'
- 'Invalid Merchant ID: Verify the merchant ID.'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Verify API keys'
- '404 Not Found: Ensure the endpoint is correct'
- '401 Unauthorized: Check API Key or credentials'
- ZaloPay error codes
- '200 OK: Indicates that the inventory check was successful.'
- '400 Bad Request: Indicates a failure in processing the inventory check.'
- '500 Internal Server Error: Indicates a failure in processing the inventory check.'
- '1000 Series - PENDING: This status code means the transaction is still in the pending
  stage and will be updated to the terminal stage when it''s completed'
- '2000 Series - SUCCESS: This status code means the transaction is successful'
- '4001: INVALID_REQUEST_DATA'
- '4002: DUPLICATE_TRANSACTION_ERROR'
- '4003: TRANSACTION_NOT_EXIST_ON_PSP'
- '4010: INVALID_UNAUTHORISED_TRANSACTION_IAMPORTKEY_ERROR'
- '4011: INVALID_UNAUTHORISED_TRANSACTION_SIGNATURE_ERROR'
- '4012: INVALID_UNAUTHORISED_TRANSACTION_ERROR'
- '4013: INVALID_MERCHANT_TYPE'
- '4014: INVALID_EMAIL'
- '4015: MASTER_MERCHANT_NOT_FOUND'
- '4016: MERCHANT_NOT_FOUND'
- '4017: MERCHANT_NOT_ASSOCIATED_WITH_MASTER_MERCHANT'
- '4018: MERCHANT_ASSOCIATED_WITH_ANOTHER_MASTER_MERCHANT'
- '4019: INVALID_MERCHANT_STATUS'
- '4020: INVALID_ACTION_TYPE'
- '4021: MERCHANT_LOGIN_NOT_ALLOWED'
- '4022: MERCHANT_LOGIN_DISABLED_BY_MASTER_MERCHANT'
- '4023: MASTER_MERCHANT_DONOT_HAVE_THIS_ACCESS'
- '4024: MERCHANT_IS_INACTIVE'
- '4025: INVALID_REQUEST'
- '4026: RECON_MAPPING_NOT_FOUND'
- '4027: RECON_MAPPING_NOT_UPDATED'
- '4028: RECON_MAPPING_NOT_CREATED'
- '4029: REFUND_SYSTEM_ERROR'
- '4030: PAYOUT_SYSTEM_ERROR'
- '4031: PAYOUTVENDOR_SYSTEM_ERROR'
- '4032: RECON_SYSTEM_ERROR'
- '4033: INVALID_PORTAL_REQUEST'
- '4034: INVALID_ENVIRONMENT'
- '4035: KYC_RECORD_NOT_FOUND'
- '4036: KYC_RECORD_NOT_CREATED'
- '4037: KYC_RECORD_NOT_UPDATED'
- '4038: KYC_SUBMISSION_NOT_CREATED'
- '4039: KYC_SUBMISSION_NOT_UPDATED'
- '4040: MISSING_KYC_SUBMISSION_LINK'
- '4041: INVALID_AMOUNT'
- '4042: MERCHANT_ALREADY_EXISTS'
- '4043: MERCHANT_INVITE_ERROR'
- '4044: CREDS_NOT_FOUND'
- '4045: VIRTUAL_ACCOUNT_NOT_SUPPORTED'
- '4046: INVALID_PAYMENT_CHANNEL_KEY'
- '4047: INVALID_SETTLEMENT_REF'
- '4048: INVALID_SETTLEMENT_STATUS'
- '4049: MISSING_KYC_SUBMISSION_VALUE'
- '4050: INVALID_LINK_MERCHANT_ORDER_REF'
- '4051: MERCHANT_ALREADY_REGISTERED_ON_PSP'
- '4052: INVALID_EMAIL_ADDRESS'
- '4053: INVALID_PASSWORD'
- '4054: INVALID_UNAUTHORIZED_JWT_TOKEN_ERROR'
- '4055: MASTER_MERCHANT_REGISTRATION_ERROR'
- '4056: OTP_EXPIRED'
- '4057: INVALID_PAYMENT_METHOD'
- '4058: PAYMENT_METHOD_CONFIGURATION_ERROR'
- '4059: INVALID_PAYMENT_PAGE_STOCK'
- '4060: PAYMENT_PAGE_INVALID_OWNER'
- '4061: INVALID_VIRTUAL_ACCOUNT'
- '4062: INVALID_PAGE_FIELD'
- '4063: INVALID_PAGE_FIELD_VALUE'
- '4064: MISSING_MANDATORY_FIELD'
- '4065: INVALID_PAGE_REF'
- '4066: INVALID_MERCHANT_PAYMENT_DATA'
- '4067: LIMITED_PAYMENT_CHANNEL_RECORD_NOT_FOUND'
- '4068: INVALID_PAGE_TYPE'
- '4069: INACTIVE_PAYMENT_PAGE'
- '4070: INVALID_PAYMENT_REQUEST_REFUND_NOT_ALLOWED'
- '4071: INVALID_TRANSACTION_ORDER_CANCELLED_ERROR'
- '4072: TRANSACTION_EXPIRED'
- '4073: OTP_VERIFICATION_ERROR'
- '4075: INVALID_CURRENCY'
- '4076: INVALID_AMOUNT_CURRENCY_ERROR'
- '4077: INVALID_MINIMUM_AMOUNT_LIMIT'
- '4078: INVALID_MAXIMUM_AMOUNT_LIMIT'
- '4079: INVALID_STATUS_TYPE'
- '4080: PAYMENT_SERVICE_PROVIDER_ERROR'
- '4081: PARTIAL_REFUND_NOT_ALLOWED'
- '4081: ROLE_NOT_ALLOWED'
- '4082: TRANSACTION_EXPIRED_BY_CHAIPORT'
- '4083: INVALID_PAYMENT_LINK_REF'
- '4084: INVALID_UNAUTHORISED_PORTONEKEY_ERROR'
- '4085: INVALID_PRICE_REF'
- '4086: INVALID_QUANTITY'
- '4087: INVALID_RECURRANCE_COUNT'
- '4088: MAX_RETRY_LIMIT_EXCEED'
- '4089: INVALID_SUBSCRIPTION_ORDER_REF'
- '4090: INVALID_TOTAL_ADDITIONAL_COST'
- '4091: INVALID_PERIOD'
- '4092: RECON_INVALID_OWNER'
- '4093: VOIDED'
- '4095: PSP_CANCELLED_SUBSCRIPTION'
- '4096: INVALID_REFERENCE'
- '4094: INVALID_FREQUENCY'
- '4097: TRANSACTION_UNDER_REVIEW'
- '4098: INVALID_ACCOUNT'
- '4099: INVALID_UNAUTHORISED_PORTONE_SECRET_ERROR'
- '4100: SUSPECTED_FRAUDULENT_TRANSACTION_ERROR'
- '4101: MERCHANT_SUBUSER_NOT_FOUND'
- '4102: VERIFY_ACCOUNT_NOT_SUPPORTED'
- '5001: RECORD_NOT_FOUND_ERROR'
- '5002: DUPLICATE_FOUND_ERROR'
- '5011: MERCHANT_UPDATE_FAILED'
- '5012: FAILED_TO_SEND_EMAIL'
- '5013: MERCHANT_PAYMENT_METHOD_UPDATE_FAILED'
- '5014: ERROR_IN_FETCHING_RECORDS'
- '5015: RECORD_NOT_CREATED'
- '5016: MERCHANT_CREATION_FAILED'
- '5017: SUB_USER_CREATION_FAILED'
- '5018: PAYMENT_TXN_NOT_CREATED'
- '5019: RECORD_UPDATE_FAILED'
- '5020: MERCHANT_KYC_CREATION_FAILED'
- '5021: TOKENIZATION_KEY_CREATION_FAILED'
- '5022: PAYMENT_CHANNEL_NOT_SUPPORTED'
- '5023: INVALID_PAYMENT_CHANNEL'
- '5024: PSP_COMMUNICATION_ERROR'
- '5025: ERROR_PARSING_RESPONSE'
- '5030: INVALID_REDIRECT_URL'
- '6001: BANK_REFUSED_TRANSACTION'
- '6002: FUNDS_LIMIT_ERROR'
- '6003: PAYMENT_METHOD_ISSUER_REFUSED_TRANSACTION'
- '6011: INVALID_CARD_INFO_ERROR'
- '6012: INVALID_CARD_NOT_SUPPORTED_ERROR'
- '6013: INVALID_CARD_EXPIRED_ERROR'
- '6014: INVALID_CARD_DECLINED_ERROR'
- '6015: INVALID_CARD_BLOCKED_ERROR'
- '6016: INVALID_CARD_3DS_ERROR'
- '6017: INVALID_CARD_PROCESSING_ERROR'
- '6018: DECLINED_BY_BANK'
- '6019: EXCEEDED_MAX_LIMIT'
- '6020: INVALID_BANK_CODE'
- '6021: INVALID_CARD_BLACKLISTED_ERROR'
- '6022: INVALID_CARD_LOST_ERROR'
- '7000: ERROR_CREATING_CUSTOMER'
- '8001: PAYMENT_AUTHORIZATION_ERROR'
- '8002: PAYMENT_AUTHENTICATION_ERROR'
- '8003: PAYMENT_PROCESSING_ERROR'
- '8004: RISK_VALIDATION_ERROR'
- '400 Bad Request: Check parameter values'
- '401 Unauthorized: Verify API key or secret'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Invalid API key'
- '500 Internal Server Error: Try again later'
- Invalid client key or secret
- Signature verification failed
- 'INVALID_REQUEST: Check the parameters sent in the request'
- 'UNAUTHORIZED: Verify client_key and secret'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Invalid API key or signature'
- '500 Internal Server Error: Retry the request'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Invalid API key.'
- '404 Not Found: The requested resource could not be found.'
- '400 Bad Request: The API request failed due to invalid parameters.'
- '400: The API request failed due to invalid parameters.'
- '200: success'
- '401 Unauthorized: Invalid client key or secret'
- '400 Bad Request: Missing required parameters'
auth_info:
  mentioned_objects:
  - PORTONE_KEY
  - PORTONE_SECRET
  - JWTToken
  - clientKey
  - Client ID
  - Api Key Payment
  - Api Key Search
  - OauthToken
  - AuthProvider
  - NamedCredential
  - ClientKey
  - Currency
  - FailureUrl
  - MerchantOrderRef
  - SuccessUrl
client:
  base_url: https://api.portone.cloud
  headers:
    Content-Type: application/json
source_metadata: null
