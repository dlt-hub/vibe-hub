resources:
- name: scan_projects
  endpoint:
    path: /scan/projects
    method: GET
    data_selector: records
    params: {}
- name: scan_projects
  endpoint:
    path: /scan-with-endorlabs/
    method: GET
    data_selector: projects
    params: {}
- name: scan_projects
  endpoint:
    path: /scan-with-endorlabs/
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
- name: scans
  endpoint:
    path: /api/scans
    method: GET
    data_selector: data
- name: GitHub App monitoring scan
  endpoint:
    path: /monitoring-scans/github-app/
    method: GET
- name: Azure DevOps App monitoring scan
  endpoint:
    path: /monitoring-scans/azure-app/
    method: GET
- name: GitLab App monitoring scan
  endpoint:
    path: /monitoring-scans/gitlab-app/
    method: GET
- name: Bitbucket App for Bitbucket Data Center monitoring scan
  endpoint:
    path: /monitoring-scans/bitbucket-datacenter-app/
    method: GET
- name: Bitbucket App for Bitbucket Cloud monitoring scan
  endpoint:
    path: /monitoring-scans/bitbucket-cloud/
    method: GET
- name: Local monitoring scan
  endpoint:
    path: /monitoring-scans/jenkins-supervisory-scan/
    method: GET
- name: Java
  endpoint:
    path: /scan-with-endorlabs/language-scanning/java/
    method: GET
- name: C/C++
  endpoint:
    path: /scan-with-endorlabs/language-scanning/c/
    method: GET
- name: Kotlin
  endpoint:
    path: /scan-with-endorlabs/language-scanning/kotlin/
    method: GET
- name: Go
  endpoint:
    path: /scan-with-endorlabs/language-scanning/golang/
    method: GET
- name: Python
  endpoint:
    path: /scan-with-endorlabs/language-scanning/python/
    method: GET
- name: JavaScript/TypeScript
  endpoint:
    path: /scan-with-endorlabs/language-scanning/javascript/
    method: GET
- name: Ruby
  endpoint:
    path: /scan-with-endorlabs/language-scanning/ruby/
    method: GET
- name: .NET
  endpoint:
    path: /scan-with-endorlabs/language-scanning/dotnet/
    method: GET
- name: Bazel
  endpoint:
    path: /scan-with-endorlabs/language-scanning/bazel/
    method: GET
- name: Swift/Objective-C
  endpoint:
    path: /scan-with-endorlabs/language-scanning/swift-objective-c/
    method: GET
- name: Scala
  endpoint:
    path: /scan-with-endorlabs/language-scanning/scala/
    method: GET
- name: PHP
  endpoint:
    path: /scan-with-endorlabs/language-scanning/php/
    method: GET
- name: Rust
  endpoint:
    path: /scan-with-endorlabs/language-scanning/rust/
    method: GET
- name: Endor Labs Scan
  endpoint:
    path: /endorctl/scan
    method: POST
- name: PR Runs
  endpoint:
    path: /scan/pr-runs
    method: GET
    data_selector: findings
- name: scan_artifacts
  endpoint:
    path: /scan/artifacts
    method: POST
    data_selector: results
    params: {}
- name: AI features
  endpoint:
    path: /ai/features
    method: GET
    data_selector: features
    params: {}
- name: reachability_analysis
  endpoint:
    path: /api/reachability
    method: GET
- name: call_graphs
  endpoint:
    path: /api/call_graphs
    method: GET
- name: endor_scores
  endpoint:
    path: /api/endor_scores
    method: GET
- name: malware_detection
  endpoint:
    path: /api/malware_detection
    method: GET
- name: finding_policy
  endpoint:
    path: /finding-policies
    method: GET
    data_selector: policies
    params: {}
- name: action_policy
  endpoint:
    path: /policies/action
    method: GET
    data_selector: policies
- name: remediation_policy
  endpoint:
    path: /api/remediation_policies
    method: GET
    data_selector: policies
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: findings
  endpoint:
    path: /findings
    method: GET
    data_selector: findings
    params: {}
- name: project_findings
  endpoint:
    path: /projects/{project_id}/findings
    method: GET
    data_selector: findings
    params: {}
- name: scan_projects
  endpoint:
    path: /scan-with-endorlabs/
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: sast_scan
  endpoint:
    path: /scan
    method: POST
    data_selector: scanResults
    params: {}
- name: exception_policy
  endpoint:
    path: /api/exception-policies
    method: POST
    data_selector: exception_policy
    params: {}
- name: scan_projects
  endpoint:
    path: /api/v1/scan/projects
    method: GET
    data_selector: projects
    params: {}
- name: sign_artifacts
  endpoint:
    path: /sign/artifacts
    method: POST
    data_selector: artifact
    params: {}
- name: verify_artifact
  endpoint:
    path: /verify/artifact
    method: POST
    data_selector: verification
    params: {}
- name: revoke_signature
  endpoint:
    path: /revoke/signature
    method: POST
    data_selector: revocation
    params: {}
- name: scans
  endpoint:
    path: /api/scans
    method: GET
    data_selector: records
- name: secret_rule
  endpoint:
    path: /api/v1/secret-rules
    method: GET
    data_selector: rules
- name: import_sbom
  endpoint:
    path: /sbom/import
    method: POST
    data_selector: result
- name: manage_sbom
  endpoint:
    path: /sbom/manage
    method: GET
    data_selector: sbom_list
- name: global_flags
  endpoint:
    path: /global_flags
    method: GET
    data_selector: flags
- name: scan_projects
  endpoint:
    path: /api/v1/scan-projects
    method: POST
    data_selector: data
- name: projects
  endpoint:
    path: /v1/namespaces/$ENDOR_NAMESPACE/projects
    method: GET
- name: scan_project
  endpoint:
    path: /api/v1/scan_project
    method: POST
    data_selector: data
    params: {}
- name: scan_projects
  endpoint:
    path: /scan/projects
    method: GET
    data_selector: records
    params: {}
- name: namespaces
  endpoint:
    path: /manage/namespaces
    method: GET
    data_selector: namespaces
    params: {}
- name: webhook_payload
  endpoint:
    path: /webhooks
    method: POST
    data_selector: data
- name: integration
  endpoint:
    path: /management/environment-settings
    method: POST
- name: create_ticket
  endpoint:
    path: /rest/api/3/issue
    method: POST
    data_selector: issue
    params: {}
- name: scan
  endpoint:
    path: /scan
    method: GET
    data_selector: records
    params: {}
- name: Vulnerable Component
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Package Vulnerability
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Static Code Analysis
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: incoming_webhook
  endpoint:
    path: /services/incoming-webhook
    method: POST
    data_selector: notification
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: vulnerabilities
  endpoint:
    path: /vulnerabilities/search
    method: GET
    data_selector: vulnerabilities
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: reachability_analysis
  endpoint:
    path: /analysis/reachability
    method: GET
    data_selector: results
- name: call_graphs
  endpoint:
    path: /graphs/call
    method: GET
    data_selector: graphs
- name: endor_scores
  endpoint:
    path: /scores/endor
    method: GET
    data_selector: scores
- name: malware_detection
  endpoint:
    path: /detection/malware
    method: GET
    data_selector: detections
- name: expired_api_keys_report
  endpoint:
    path: /path/to/delete-expired-keys.sh
    method: GET
    data_selector: report
    params:
      operation: REPORT
      namespace: ''
- name: expired_api_keys_delete
  endpoint:
    path: /path/to/delete-expired-keys.sh
    method: GET
    data_selector: delete
    params:
      operation: DELETE
      namespace: ''
- name: Jira tickets
  endpoint:
    path: /jira/tickets
    method: GET
    data_selector: tickets
    params: {}
- name: scan_projects
  endpoint:
    path: /scan-projects
    method: GET
    data_selector: records
- name: scan_projects
  endpoint:
    path: /scan-projects
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: scan
  endpoint:
    path: /scan
    method: POST
    data_selector: data
    params: {}
- name: malware_findings
  endpoint:
    path: /malware/findings
    method: GET
    data_selector: findings
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: findings
  endpoint:
    path: /v1/namespaces/{tenant_meta.namespace}/findings
    method: GET
    data_selector: list.objects
    params: {}
- name: findings
  endpoint:
    path: /v1/namespaces/{{namespace}}/findings
    method: GET
    data_selector: list_parameters.filter
    params: {}
- name: projects
  endpoint:
    path: /v1/namespaces/{{namespace}}/projects
    method: GET
    data_selector: list_parameters.mask
    params: {}
- name: finding
  endpoint:
    path: /v1/namespaces/$ENDOR_NAMESPACE/findings
    method: GET
    data_selector: .list.objects
    params:
      filter: spec.finding_categories contains [FINDING_CATEGORY_LICENSE_RISK] and
        spec.finding_tags not contains [FINDING_TAGS_SELF]
      page_size: 1
- name: package_version
  endpoint:
    path: /v1/namespaces/oss/package-versions
    method: GET
    data_selector: .list.objects
    params:
      filter: meta.name==$NAME
- name: metric
  endpoint:
    path: /v1/namespaces/oss/metrics
    method: GET
    data_selector: .list.objects
    params:
      filter: meta.name==pkg_version_info_for_license and meta.parent_uuid==$UUID
- name: project
  endpoint:
    path: /v1/namespaces/$ENDOR_NAMESPACE/projects/$uuid
    method: GET
    data_selector: .meta.name
- name: scan_result
  endpoint:
    path: /v1/namespaces/$ENDOR_NAMESPACE/scan-results
    method: GET
    data_selector: .list.objects
    params:
      sort:
        order: SORT_ENTRY_ORDER_DESC
        path: meta.create_time
      page_size: 1
- name: policy
  endpoint:
    path: /v1/namespaces/{{namespace}}/policies
    method: POST
    data_selector: object
    params: {}
- name: finding
  endpoint:
    path: /v1/namespaces/{{namespace}}/findings
    method: PATCH
    data_selector: object
    params: {}
- name: project
  endpoint:
    path: /v1/namespaces/{{namespace}}/projects
    method: GET
    data_selector: projects
    params:
      list_parameters.traverse: 'true'
- name: findings
  endpoint:
    path: /v1/namespaces/{tenant_meta.namespace}/findings
    method: GET
    data_selector: findings
    params:
      list_parameters.filter: spec.finding_metadata.vulnerability.spec.cvss_v3_severity.score
        > 9.7
- name: APIKeyService
  endpoint:
    path: /api/v1/apiKeys
    method: GET
    data_selector: records
    params: {}
- name: AuditLogService
  endpoint:
    path: /api/v1/auditLogs
    method: GET
    data_selector: records
    params: {}
- name: FindingService
  endpoint:
    path: /api/v1/findings
    method: GET
    data_selector: records
    params: {}
- name: NamespaceService
  endpoint:
    path: /api/v1/namespaces
    method: GET
    data_selector: records
    params: {}
- name: UserService
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
    params: {}
- name: GetAPIKey
  endpoint:
    path: /v1/users/{uuid}
    method: GET
    data_selector: uuid
    params: {}
- name: DeleteAPIKey
  endpoint:
    path: /v1/users/{uuid}
    method: DELETE
    data_selector: uuid
    params: {}
- name: ListAuditLogs
  endpoint:
    path: /v1/audit_logs
    method: LIST
    data_selector: logs
    params: {}
- name: GetAuditLog
  endpoint:
    path: /v1/audit_logs/{uuid}
    method: GET
    data_selector: uuid
    params: {}
- name: authentication_logs
  endpoint:
    path: /v1/authentication_logs
    method: GET
    data_selector: results
    params:
      tenant_meta.namespace: string
- name: findings
  endpoint:
    path: /v1/findings
    method: LIST
    data_selector: results
    params:
      tenant_meta.namespace: string
- name: users
  endpoint:
    path: /v1/users/{uuid}
    method: GET
    data_selector: uuid
    params: {}
- name: ListNamespaces
  endpoint:
    path: /v1/namespaces
    method: LIST
    data_selector: namespaces
- name: CreateNamespace
  endpoint:
    path: /v1/namespaces
    method: POST
    data_selector: namespace
- name: GetUser
  endpoint:
    path: /v1/users/{uuid}
    method: GET
    data_selector: user
- name: list_package_versions
  endpoint:
    path: /v1/package_versions
    method: LIST
    data_selector: results
    params: {}
- name: get_package_version
  endpoint:
    path: /v1/package_versions/{uuid}
    method: GET
    data_selector: results
    params: {}
- name: update_policy
  endpoint:
    path: /v1/policies
    method: PATCH
    data_selector: results
    params: {}
- name: GetNamespace
  endpoint:
    path: /v1/users/{uuid}
    method: GET
    data_selector: uuid
    params: {}
- name: DeleteNamespace
  endpoint:
    path: /v1/users/{uuid}
    method: DELETE
    data_selector: uuid
    params: {}
- name: ListPackageManagers
  endpoint:
    path: /v1/users/{uuid}
    method: LIST
    data_selector: uuid
    params: {}
- name: GetPackageManager
  endpoint:
    path: /v1/users/{uuid}
    method: GET
    data_selector: uuid
    params: {}
- name: CreatePolicy
  endpoint:
    path: /CreatePolicy
    method: POST
    data_selector: records
- name: create_policy
  endpoint:
    path: /v1/policies
    method: POST
    data_selector: uuid
- name: list_policies
  endpoint:
    path: /v1/policies
    method: LIST
    data_selector: policies
- name: get_user
  endpoint:
    path: /v1/users/{uuid}
    method: GET
    data_selector: uuid
- name: CreatePolicy
  endpoint:
    path: /CreatePolicy
    method: POST
- name: GetPolicy
  endpoint:
    path: /v1/policies/{uuid}
    method: GET
    data_selector: uuid
    params:
      tenant_meta.namespace: string
- name: DeletePolicy
  endpoint:
    path: /v1/policies/{uuid}
    method: DELETE
    data_selector: uuid
    params:
      tenant_meta.namespace: string
- name: ListProjects
  endpoint:
    path: /v1/projects
    method: LIST
    data_selector: projects
    params:
      tenant_meta.namespace: string
- name: GetProject
  endpoint:
    path: /v1/projects/{uuid}
    method: GET
    data_selector: uuid
    params:
      tenant_meta.namespace: string
- name: DeleteProject
  endpoint:
    path: /v1/projects/{uuid}
    method: DELETE
    data_selector: uuid
    params:
      tenant_meta.namespace: string
- name: CreateSBOMExport
  endpoint:
    path: /v1/sbom_exports
    method: POST
    data_selector: uuid
    params:
      tenant_meta.namespace: string
- name: CreateSBOMExport
  endpoint:
    path: /CreateSBOMExport
    method: POST
- name: CreateSBOMExport
  endpoint:
    path: /services/data/vXX.X/sobjects/CreateSBOMExport
    method: POST
- name: SBOMImports
  endpoint:
    path: /v1/SBOMImports
    method: POST
    data_selector: uuid
    params: {}
- name: users
  endpoint:
    path: /v1/users/{uuid}
    method: GET
    data_selector: uuid
    params: {}
- name: automated_scan_parameters
  endpoint:
    path: /CreateSBOMImport
    method: POST
- name: SBOMImport
  endpoint:
    path: /CreateSBOMImport
    method: POST
- name: GetSBOMImport
  endpoint:
    path: /v1/users/{uuid}
    method: GET
    data_selector: uuid
    params:
      tenant_meta.namespace: string
      uuid: string
      get_parameters.mask: string
- name: DeleteSBOMImport
  endpoint:
    path: /v1/users/{uuid}
    method: DELETE
    data_selector: uuid
    params:
      tenant_meta.namespace: string
      uuid: string
      delete_parameters.action: string
      delete_parameters.force: boolean
- name: UpdateScanProfile
  endpoint:
    path: /v1/users/{uuid}
    method: PATCH
    data_selector: request
    params:
      object.tenant_meta.namespace: string
- name: automated_scan_parameters
  endpoint:
    path: /UpdateScanProfile
    method: PATCH
    data_selector: null
    params: {}
- name: UpdateScanProfile
  endpoint:
    path: /UpdateScanProfile
    method: PATCH
- name: scan_profile
  endpoint:
    path: /v1/users/{uuid}
    method: GET
    data_selector: records
    params: {}
- name: automated_scan_parameters
  endpoint:
    path: /createscanprofile
    method: POST
    data_selector: automated_scan_parameters
    params: {}
- name: CreateScanProfile
  endpoint:
    path: /CreateScanProfile
    method: POST
    data_selector: request
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /v1/users/{uuid}
    method: GET
    data_selector: records
- name: scan_projects
  endpoint:
    path: /scan-with-endorlabs/
    method: GET
    data_selector: projects
    params: {}
- name: projects
  endpoint:
    path: /v1/namespaces/$ENDOR_NAMESPACE/projects
    method: GET
- name: init
  endpoint:
    path: /init
    method: POST
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- API requires OAuth2 authentication setup.
- Users can create and manage API keys to enable secure system access for automated
  processes, integrations, and external applications.
- Ensure API keys are managed securely.
- Large applications may require additional resources to complete or enhance the scan
  performance.
- Establish a baseline scan of your default branch or any other branch that undergoes
  regular testing.
- Use the flag --as-default-branch to designate a project branch as the default branch
  and view its findings.
- In CI/CD environments, use the --detached-ref-name flag to manage detached references.
- Uses system defaults for toolchain versions if no profile is provided.
- You must provide the path of your file using --path and specify a name for your
  project using --project-name.
- Upgrade to endorctl version 1.6.734 or higher to ensure accurate container scan
  results.
- Scanning Windows containers is not supported.
- Docker file scans are not currently supported.
- Container registry direct integrations are not currently supported.
- Support for scanning binary files inside a container is limited.
- Scanning container images packaged in the tarball format is not currently supported.
- Endor scores are not calculated for findings reported in the container scan.
- Endor Labs automatically performs an approximate scan if full dependency resolution
  fails. You cannot disable approximate scans, and you cannot initiate an approximate
  scan manually.
- Only HuggingFace models are scored, as they are open source and provide extensive
  public metadata.
- Recommendations generated are meant solely for informational purposes. Before implementing
  these suggestions, it is strongly advised to thoroughly verify and assess them to
  ensure their accuracy and suitability for your specific circumstances and work environments.
- These are global filters and apply to all widgets on this dashboard.
- Requires setup of connected app in Endor Labs
- Upgrades are available when there are changes to a policy, such as new fields, parameters,
  tags, or updates to the Rego code.
- When creating exceptions for a specific package, make sure to not include the version
  of the package in the package name template parameter. Adding the version to the
  name can result in the exception not applying to a newly released version of the
  package.
- Notifications are only processed for monitored branches, not for pull requests.
- The policy is enabled by default.
- SAST scan is currently supported on macOS and Linux. SAST scans are not supported
  on Windows.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Paths must be relative to the root of the repository.
- Use quotes to ensure that your shell does not expand wildcards.
- Upgrade recommendations are proposed only for OSS packages.
- Upgrade recommendations are based on the data available in the main branch of the
  project.
- Upgrade impact analysis never recommends version downgrades.
- Upgrade impact analysis does not propose upgrades for container dependencies, GitHub
  Actions dependencies, and approximate dependencies.
- Upgrade recommendations for groups of direct dependencies are not supported.
- Upgrade impact analysis for a dependency is at the project level and not across
  the tenant or a namespace.
- Upgrade recommendations are suggested only for the dependencies with vulnerabilities.
- Version constraints are excluded in the upgrade recommendations.
- By minimizing changes to fix known vulnerabilities and providing complete transparency,
  Endor Patches offer a comprehensive solution to help teams quickly address vulnerabilities,
  even when a fix is challenging.
- Uses OAuth2 with refresh token.
- You cannot have both the GitHub App and the GitHub App (Pro) simultaneously in your
  environment.
- Dependency names are case sensitive.
- To include GitHub application data, you must also set the --github flag and provide
  a GitHub token with read:org access.
- The signing process does not support tags. Ensure that you specify a SHA256 digest
  with the artifact you are signing to represent a cryptographic hash of the image’s
  content.
- Some objects may return nulls in deeply nested fields
- Uses regex for secret detection
- Validation can be added to check if a discovered secret is valid
- Supports CycloneDX or SPDX format SBOMs in XML or JSON format.
- The token has an expiration time of 4 hours.
- AWS authentication is only enabled if aws-role-arn flag is set.
- GCP authentication is only enabled if gcp-service-account flag is set.
- Treat your access token like a password
- Basic authentication with curl -u is not supported.
- You can manage API keys with endorctl or from the Endor Labs user interface.
- Using keyless authentication eliminates the need to manage API keys and reduces
  the risk of API key compromise.
- Some API endpoints may have specific rate limits
- Namespaces can be created for different business units in an organization.
- Configure proxy settings on machines that need to connect to Endor Labs when Internet
  access is limited to proxy-only connections.
- These settings are required for running the endorctl client for scans, for self-hosted
  runners in CI/CD pipelines, and for using the Endor Labs REST API.
- Ensure that you do not use both the authentication tokens at the same time.
- Ensure the API Key has required permissions to post messages using webhook.
- De-select Disable HMAC Integration Check and enter the HMAC Shared Key to ensure
  integrity.
- Ensure that the API key has the Read-Only permission.
- We recommend that you set the expiry to 180 days or one year to avoid constant refresh
  of the key.
- The token cannot be viewed after closing the form. Copy it to a secure location
  and have it handy.
- Vulnerable Component is mandatory. You must enter either one of the Package Vulnerability
  or Static Code Analysis Vulnerability resource types.
- Users can create action policies to send an email notification when the conditions
  of a given policy are met.
- Endor Labs provides a default template with standard information that will be included
  in the email.
- Create an incoming webhook in Slack to receive notifications.
- The webhook URL must be entered in Endor Labs for integration.
- Uses OAuth2 with refresh token - requires setup of connected app in api
- Ensure that you rotate API keys regularly to limit the window of opportunity for
  an API key to be compromised.
- API key expiry can cause interruptions in your workflows.
- Requires authorization to access various endpoints.
- Configuration - Customize these values according to you need
- Ensure that you enclose your exclude pattern in double quotes to avoid shell expansion
  issues.
- Inclusion patterns are not designed for documentation or example directories.
- Ensure you have a Jira instance set up on Jira Cloud before integrating with Endor
  Labs.
- Ensure your Jira board has a designated resolution state like Done, Fixed, etc.
- See Bazel documentation if you use a monorepo with Bazel as your primary build system.
- 'Defines supported languages as a comma-separated list of the following languages:
  c#,go,java,javascript,php,python,ruby,rust,scala,typescript'
- A web proxy bypass rule or firewall rule may be required in your environment to
  use Endor Labs successfully.
- For better performance, the Endor Labs client, 'endorctl', may attempt to connect
  to dynamically managed Endor Labs cloud resources not listed above.
- Requires setup of connected app in API
- By default, Endor Labs uses CVSS v3.x. You must explicitly configure the system
  to use CVSS v4.x.
- Endor Labs supports keyless authentication for Azure, enabling seamless and secure
  access without the need to store or manage keys.
- Endor Labs detects malware in dependencies by scanning the packages used in the
  project and recognizing known malicious patterns.
- Treat your access token like a password.
- Use page_size to control number of elements returned. Default is 100, maximum is
  500.
- Common time fields include meta.create_time and meta.update_time
- Use the 'count' flag to get just the number of findings, which is faster.
- Uses OAuth2 with Bearer token
- Filtering and sorting are supported in API calls
- Bear in mind that some operations override existing lists, such as project selectors
  and tags.
- Namespaces must be a fully qualified name.
- Payload requires application/json content type.
- Uses OAuth2
- The order of the results is not guaranteed when pagination is disabled.
- Uses automated scan parameters
- 'is_default: true'
- Some parameters are optional and may be null.
- CreateScanProfile creates a toolchain profile.
- request requires update_mask and force fields
- object includes tenant_meta and meta with various fields
- Payload must be in JSON format
- Namespaces must be a fully qualified name, for example, 'endor.prod.app'.
- 'Supported authentication providers for init are: google, github, gitlab, email,
  sso.'
- Headless mode is available for all authentication providers.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your API key or token.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check API key or authentication method.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '401 Unauthorized: If you try to use a REST API endpoint without an Endor Labs token.'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: The requested resource could not be found.'
- If a Jira ticket is manually marked as Resolved in Jira, Endor Labs does not scan
  the finding in future scans.
- 'ENDORCTL_RC_ERROR: The exact reason for the error could not be determined.'
- 'ENDORCTL_RC_INVALID_ARGS: An invalid argument was provided. This may occur due
  to an invalid parameter value, or an incorrect package format.'
- 'ENDORCTL_RC_ENDOR_AUTH_FAILURE: The user does not have the correct permissions
  to perform the given operation. Check the Endor Labs token or API keys to make sure
  they are valid and include the necessary permissions. These are provided using the
  --token flag or through the environment variables ENDOR_TOKEN, or ENDOR_API_CREDENTIALS_KEY/SECRET.
  Note that the environment variables are mutually exclusive, that is you cannot have
  both a token and API keys set at the same time.'
- 'ENDORCTL_RC_GITHUB_AUTH_FAILURE: The user has provided an empty or invalid GitHub
  token. This token is provided using the --github-token flag or through the environment
  variable GITHUB_TOKEN. You can skip the GitHub scan by not setting the --github
  flag.'
- 'ENDORCTL_RC_ANALYTICS_ERROR: There was an error analyzing the dependencies.'
- 'ENDORCTL_RC_FINDINGS_ERROR: There was an error generating findings based on the
  analytics output.'
- 'ENDORCTL_RC_NOTIFICATIONS_ERROR: There was an error processing a notification triggered
  by a notification policy. See the error log for details and verify that the corresponding
  notification target is set up correctly.'
- 'ENDORCTL_RC_GITHUB_API_ERROR: An error was returned by the GitHub API. This can
  occur due to GitHub rate-limiting or context deadline exceeded. Check the log message
  to see what object is causing the issue.'
- 'ENDORCTL_RC_GITHUB_PERMISSIONS_ERROR: This error typically occurs when the user
  is authenticated with GitHub, but does not have the necessary permissions to perform
  the requested operation. It indicates that the user is forbidden from accessing
  the requested resource due to insufficient permissions. Check the GitHub token permissions,
  as well as the permissions and user accounts associated with the repository and/or
  organization and try again.'
- 'ENDORCTL_RC_GIT_ERROR: A Git operation has failed. Examples of Git operations are:
  cloning, opening, finding the root, finding the HEAD, finding the default branch,
  and more. Ensure you are scanning the correct Git repository and that it is properly
  set up for the scan.'
- 'ENDORCTL_RC_DEPENDENCY_RESOLUTION_ERROR: There was an error resolving the dependencies.'
- 'ENDORCTL_RC_DEPENDENCY_SCANNING_ERROR: There was an error processing the resolved
  dependencies.'
- 'ENDORCTL_RC_CALL_GRAPH_ERROR: There was an error generating the call graph.'
- 'ENDORCTL_RC_LINTER_ERROR: There was an error while running the linters used to
  analyze the source code. This can affect secret and vulnerability detection.'
- 'ENDORCTL_RC_BAD_POLICY_TYPE: An invalid policy was detected. Note that this is
  not a fatal error, but the policy in question was not processed. See log for details.'
- 'ENDORCTL_RC_POLICY_ERROR: There was an error evaluating one or more policies. See
  log for details.'
- 'ENDORCTL_RC_INTERNAL_ERROR: There was an internal error within endorctl. See log
  for details.'
- 'ENDORCTL_RC_DEADLINE_EXCEEDED: The deadline expired before the operation could
  complete.'
- 'ENDORCTL_RC_NOT_FOUND: The requested resource was not found.'
- 'ENDORCTL_RC_ALREADY_EXISTS: An attempt to create an entity failed because a resource
  with the same key already exists.'
- 'ENDORCTL_RC_UNAUTHENTICATED: The request does not have valid authentication credentials
  for the operation.'
- 'ENDORCTL_RC_VULN_ERROR: There was an issue ingesting and processing vulnerability
  data. See log for details.'
- 'ENDORCTL_RC_INITIALIZATION_ERROR: There was an error initializing the project or
  the repository. This can happen if the project ingestion token is missing, the project
  URL is invalid, or authorization failed. See log for details.'
- 'ENDORCTL_RC_HOST_CHECK_FAILURE: The endorctl host-check failed. Host won’t be able
  to run endorctl scan successfully. See log for details.'
- 'ENDORCTL_RC_SBOM_IMPORT_ERROR: There was an error importing an SBOM. See log for
  details.'
- 'ENDORCTL_RC_PRE_COMMIT_CHECK_FAILURE: The pre-commit-checks command discovered
  one or more leaked secrets. See log for details.'
- 'ENDORCTL_RC_GH_ACTION_WORKFLOW_SCAN_FAILURE: There was an error scanning the GitHub
  action dependencies. See log for details.'
- 'ENDORCTL_RC_FILE_ANALYTICS_ERROR: There was an error reading files for analytics
  processing. See log for details.'
- 'ENDORCTL_RC_SIGNATURE_VERIFICATION_FAILURE: Signature verification failed. See
  log for details.'
- 'ENDORCTL_RC_LICENSE_ERROR: The requested operation requires additional licensing.
  See log for details.'
- 'ENDORCTL_RC_HUGGING_FACE_ERROR: There was an error running the HuggingFace scanner.'
- 'ENDORCTL_RC_SAST_ERROR: There was an error running the SAST scanner.'
- 'ENDORCTL_RC_ARTIFACT_OPERATION_FAILURE: An error occurred while performing an artifact
  operation.'
- 'ENDORCTL_RC_SEGMENTATION_ERROR: There was an error during file segmentation.'
- 'ENDORCTL_RC_TOOLCHAIN_ERROR: An error occurred during the process of generating
  toolchains. See log for details.'
- 'ENDORCTL_RC_SANDBOX_ERROR: An error occurred during endorctl sandbox execution,
  possibly due to setup or dependency issues. See log for details.'
- 'ENDORCTL_RC_RULE_SET_ERROR: An error occurred when importing rules. See logs for
  details.'
- 'ENDORCTL_RC_POLICY_VIOLATION: One or more “blocking” admission policies were violated.
  See log for details.'
- 'ENDORCTL_RC_POLICY_WARNING: One or more “warning” admission policies were violated.
  This error code is only returned if the --exit-on-policy-warning flag is set.'
- 'ENDORCTL_RC_EXPORTER_WARNING: A warning occurred while trying to export data via
  the configured exporter. Please check your exporter configuration, scan profile
  setup, and integration status.'
- '401 Unauthorized: Recheck OAuth token'
- '401 Unauthorized: Check your access token'
- '404 Not Found: Ensure the resource exists'
- '401 Unauthorized: No valid API key provided.'
- '400 Bad Request: The request was unacceptable, often due to missing a required
  parameter.'
- '403 Forbidden: The API key doesn’t have permissions to perform the request.'
- '429 Too Many Requests: Too many API requests were sent to Endor Labs in a short
  time.'
- '400 Bad Request: Check your request parameters.'
- '404 Not Found: Resource not found.'
- '200: A successful response.'
- 'default: An unexpected error response.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Google
  - GitHub
  - GitLab
  - Email
  - SSO
  - Finding
  - PackageVersion
  - Metric
  - Project
  - ScanResult
  - apiKey
  - apiSecret
  - bearerToken
  - ENDOR_API_CREDENTIALS_KEY
  - ENDOR_API_CREDENTIALS_SECRET
  - ENDOR_NAMESPACE
client:
  base_url: https://api.endorlabs.com
  auth:
    type: apikey
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
