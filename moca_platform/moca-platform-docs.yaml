resources:
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: instance
  endpoint:
    path: /services/data/vXX.X/sobjects/Instance
    method: GET
    data_selector: records
- name: proximity_service
  endpoint:
    path: /proximity/service
    method: GET
    data_selector: records
- name: instance
  endpoint:
    path: /instance
    method: GET
    data_selector: properties
- name: User
  endpoint:
    path: /user
    method: GET
    data_selector: user
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
- name: RegionEventsObserver
  endpoint:
    path: /location/events/observer
    method: GET
    data_selector: events
    params: {}
- name: PlaceEventsObserver
  endpoint:
    path: /location/events/place
    method: GET
    data_selector: events
    params: {}
- name: ZoneEventsObserver
  endpoint:
    path: /location/events/zone
    method: GET
    data_selector: events
    params: {}
- name: BeaconEventsObserver
  endpoint:
    path: /location/events/beacon
    method: GET
    data_selector: events
    params: {}
- name: RegionGroupEventsObserver
  endpoint:
    path: /location/events/regionGroup
    method: GET
    data_selector: events
    params: {}
- name: user_login
  endpoint:
    path: /track/user/login
    method: POST
    data_selector: userLoginData
- name: view_history
  endpoint:
    path: /track/view/history
    method: POST
    data_selector: viewHistoryData
- name: favourites_list
  endpoint:
    path: /track/favourites
    method: POST
    data_selector: favouritesData
- name: wish_list
  endpoint:
    path: /track/wish
    method: POST
    data_selector: wishListData
- name: shopping_cart
  endpoint:
    path: /track/cart
    method: POST
    data_selector: cartData
- name: purchase_history
  endpoint:
    path: /track/purchase/history
    method: POST
    data_selector: purchaseData
- name: shared_items
  endpoint:
    path: /track/shared
    method: POST
    data_selector: sharedData
- name: content_rating
  endpoint:
    path: /track/rating
    method: POST
    data_selector: ratingData
- name: User
  endpoint:
    path: /user
    method: POST
- name: initializeSDK
  endpoint:
    path: /initializeSDK
    method: POST
- name: getVersion
  endpoint:
    path: /getVersion
    method: GET
- name: getPermissionsStatus
  endpoint:
    path: /getPermissionsStatus
    method: GET
- name: geoTrackingEnabled
  endpoint:
    path: /geoTrackingEnabled
    method: GET
- name: eventTrackingEnabled
  endpoint:
    path: /eventTrackingEnabled
    method: GET
- name: getUserId
  endpoint:
    path: /getUserId
    method: GET
- name: setUserId
  endpoint:
    path: /setUserId
    method: POST
- name: setGeoTrackingEnabled
  endpoint:
    path: /setGeoTrackingEnabled
    method: POST
- name: setEventTrackingEnabled
  endpoint:
    path: /setEventTrackingEnabled
    method: POST
- name: setLogLevel
  endpoint:
    path: /setLogLevel
    method: POST
- name: flushEvents
  endpoint:
    path: /flushEvents
    method: POST
- name: getQueuedEvents
  endpoint:
    path: /getQueuedEvents
    method: GET
- name: track_event
  endpoint:
    path: /track/event
    method: POST
    data_selector: event_data
    params: {}
- name: track_viewed_item
  endpoint:
    path: /track/viewed
    method: POST
    data_selector: viewed_data
    params: {}
- name: addToFavList
  endpoint:
    path: /addToFavList
    method: POST
    data_selector: result
    params:
      item: String, required
- name: removeFromFavList
  endpoint:
    path: /removeFromFavList
    method: POST
    data_selector: result
    params:
      item: String, required
- name: clearFavList
  endpoint:
    path: /clearFavList
    method: POST
    data_selector: result
    params: {}
- name: addToWishList
  endpoint:
    path: /addToWishList
    method: POST
    data_selector: result
    params:
      item: String, required
- name: removeFromWishList
  endpoint:
    path: /removeFromWishList
    method: POST
    data_selector: result
    params:
      item: String, required
- name: clearWishList
  endpoint:
    path: /clearWishList
    method: POST
    data_selector: result
    params: {}
- name: addToCart
  endpoint:
    path: /addToCart
    method: POST
    data_selector: result
    params:
      item: String, required
      category: String, optional
      unitPrice: double, required
      currency: String, required
      quantity: double, required
- name: updateCart
  endpoint:
    path: /updateCart
    method: POST
    data_selector: result
    params:
      item: String, required
      quantity: double, required
- name: removeFromCart
  endpoint:
    path: /removeFromCart
    method: POST
    data_selector: result
    params:
      item: String, required
- name: clearCart
  endpoint:
    path: /clearCart
    method: POST
    data_selector: result
    params: {}
- name: beginCheckout
  endpoint:
    path: /beginCheckout
    method: POST
    data_selector: result
    params: {}
- name: completeCheckout
  endpoint:
    path: /completeCheckout
    method: POST
    data_selector: result
    params: {}
- name: trackPurchased
  endpoint:
    path: /trackPurchased
    method: POST
    data_selector: result
    params:
      item: String, required
      category: String, optional
      unitPrice: double, required
      currency: String, required
      quantity: int, required
- name: trackShared
  endpoint:
    path: /trackShared
    method: POST
    data_selector: result
    params:
      item: String, required
- name: addTag
  endpoint:
    path: /addTag
    method: POST
    data_selector: result
    params: {}
- name: getTags
  endpoint:
    path: /getTags
    method: GET
    data_selector: result
    params: {}
- name: containsTag
  endpoint:
    path: /containsTag
    method: POST
    data_selector: result
    params: {}
- name: getTagValue
  endpoint:
    path: /getTagValue
    method: POST
    data_selector: result
    params: {}
- name: getLastKnownLocation
  endpoint:
    path: /getLastKnownLocation
    method: GET
    data_selector: result
    params: {}
- name: setRemotePushToken
  endpoint:
    path: /setRemotePushToken
    method: POST
    data_selector: result
    params: {}
- name: setProperty
  endpoint:
    path: /setProperty
    method: POST
    data_selector: result
    params: {}
- name: getProperty
  endpoint:
    path: /getProperty
    method: POST
    data_selector: result
    params: {}
- name: setProperties
  endpoint:
    path: /setProperties
    method: POST
    data_selector: result
    params: {}
notes:
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Initialize the SDK before calling any other method.
- On initialization, MOCA SDK will load configuration from MOCAConfig.plist file and
  perform all necessary framework setup.
- Ensure your App Key and App Secret are pointing to your production App.
- Change the log level in the MOCAConfig.plist / AndroidManifest.xml of your app to
  info, instead of debug.
- Ensure no test campaigns are active in the production App.
- This is only for remote push notifications, and this is not mandatory for location
  based notifications.
- Exit event can take up to 2 minutes to happen due to iOS CoreLocation limitation.
- Bluetooth Beacon detection cannot be tested in the simulator, requires a real device
  (iPhone 4s or newer).
- Location permission "Always" is required in order to be able to detect geofences
  and bluetooth beacons.
- The only mandatory keys are AppKey and AppSecret.
- GCM Sender is mandatory only if you want to use MOCA Remote Push Notifications service.
- MOCA SDK requires the ACCESS_FINE_LOCATION permission for bluetooth scanning, location
  tracking and geofencing.
- Since Android 10 it is necessary to explicitly request the ACCESS_BACKGROUND_LOCATION
  permission at run time.
- Starting from Android 13, there is a requirement to request for Notification Permission
  in new apps.
- FCM token is automatically requested if you activate this feature.
- Tracked received push notifications with MOCA SDK.
- The tracked data can be analyzed in MOCA Analytics (Pushes, PushOpened, and more)
- API Keys generated through Google API Console are no longer valid.
- User will persist across restarts
- It is recommended to perform as many sets as desired and then just invoke a single
  save operation to persist them to the MOCA cloud.
- Tags are small items of information with well defined semantics.
- Ensure screen names are normalized between iOS and Android. Otherwise creating campaigns
  using these events won't be consistent between platforms.
- All communication is exclusively HTTPS. This ensures a security layer that will
  keep the data protected while in transit.
- Our JavaScript SDK does not require any external libraries and is only 19KB in size.
- The SDK uses UTF-8 encoding.
- The api_token acts as a site identifier so the information can be stored adequately
  and used to present Web Analytics for your specific web application within the MOCA
  Console tool.
- Foreground Location permission enables foreground location capabilities for the
  app. Enabled by default.
- Background Location permission enables background location capabilities for the
  app. Disabled by default.
- Bluetooth permission enables detection of BLE Beacons on older Android devices.
  Disabled by default.
- Bluetooth Scan permission enables detection of BLE Beacons on newer Android devices.
  Disabled by default.
- Known issues and limitations
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- If the user disabled notifications for your app on a device that runs 12L or lower,
  that denial persists when the device upgrades to Android 13 or higher.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - MOCA
client:
  base_url: https://mocaplatform.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.api.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
