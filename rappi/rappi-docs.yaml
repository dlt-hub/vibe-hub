resources:
- name: menu
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: corridors
    params: {}
- name: orders
  endpoint:
    path: /api/rest-ops-utils/orders
    method: GET
    data_selector: orders
    params: {}
- name: stores
  endpoint:
    path: /api/rest-ops-utils/stores-pa
    method: GET
    data_selector: stores
    params: {}
- name: approved_menu
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: response
    params: {}
- name: create_menu
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: POST
    data_selector: response
    params: {}
- name: orders
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: orders
    params: {}
- name: orders/status/sent
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: orders
    params: {}
- name: order_ready_for_pickup
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: POST
- name: order_reject
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: PUT
- name: order_take
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: PUT
- name: stores-pa
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: stores
- name: store-integrated-status
  endpoint:
    path: /api/v2/restaurants-integrations-public-api/store/{STORE_ID}/menu/current
    method: PUT
- name: availability_stores_items
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: PUT
    data_selector: products
    params: {}
- name: availability_stores_items_rappi
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: PUT
    data_selector: products
    params: {}
- name: availability
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: corridors
- name: webhook
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: corridors
    params: {}
- name: webhook_integration
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
- name: webhook_reset_secret
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: PUT
- name: webhook_delete
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: DELETE
- name: corridor_store
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: corridors
- name: corridor_schedule
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: corridors
    params: {}
- name: corridor_schedule
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: corridors
    params: {}
- name: corridor_schedule
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
- name: delete_corridor_schedule
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}/{corridorProductScheduleId}
    method: DELETE
- name: product_correlation
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: corridors
    params: {}
- name: product_schedule
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: POST
    data_selector: ''
    params: {}
- name: sku_corridor_integration
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: records
    params: {}
- name: sku_schedule_corridor_integration
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: records
    params: {}
- name: sku_schedule_creation
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: POST
    data_selector: records
    params: {}
- name: sku_schedule_update
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: PUT
    data_selector: records
    params: {}
- name: integration
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: corridors, products, toppingsCategories
- name: product_schedule
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: POST
    data_selector: corridors, products, toppingsCategories
- name: update_product_schedule
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: PUT
    data_selector: corridors, products, toppingsCategories
- name: store_schedule
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: corridors
    params: {}
- name: store_holiday_schedule
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}/holiday
    method: GET
    data_selector: corridors
    params: {}
- name: store_special_schedule
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}/special
    method: GET
    data_selector: corridors
    params: {}
- name: store_schedule
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: response
    params: {}
- name: schedule_holiday
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: POST
    data_selector: response
    params: {}
- name: schedule_special
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: POST
    data_selector: response
    params: {}
- name: menu_integration
  endpoint:
    path: /api/rest-ops-utils/menu/integration/{integrationId}
    method: GET
    data_selector: products
    params: {}
- name: corridors
  endpoint:
    path: /menu/integration/{integrationId}
    method: GET
    data_selector: corridors
- name: products
  endpoint:
    path: /menu/integration/{integrationId}
    method: GET
    data_selector: products
- name: toppingsCategories
  endpoint:
    path: /menu/integration/{integrationId}
    method: GET
    data_selector: toppingsCategories
- name: menu
  endpoint:
    path: /menu
    method: POST
    data_selector: storeId
    params: {}
- name: approved_menu
  endpoint:
    path: /menu/approved/{storeId}
    method: GET
    data_selector: approvalStatus
    params: {}
- name: last_created_menu
  endpoint:
    path: /menu/rappi/{storeId}
    method: GET
    data_selector: lastMenu
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params:
      storeId: '{storeId}'
- name: orders_status_sent
  endpoint:
    path: /orders/status/sent
    method: GET
    data_selector: orders
    params:
      storeId: '{storeId}'
- name: take_order
  endpoint:
    path: /orders/{orderId}/take/{cookingTime}
    method: PUT
    data_selector: confirmation
    params: {}
- name: reject_order
  endpoint:
    path: /orders/{orderId}/reject
    method: PUT
    data_selector: confirmation
    params: {}
- name: notify_order_ready_for_pickup
  endpoint:
    path: /orders/{orderId}/ready-for-pickup
    method: POST
    data_selector: confirmation_message
    params: {}
- name: retrieve_order_events
  endpoint:
    path: /orders/{orderId}/events
    method: GET
    data_selector: events_record
    params: {}
- name: availability_items_status
  endpoint:
    path: /availability/items/status
    method: POST
    data_selector: response
    params: {}
- name: availability_items_rappi_status
  endpoint:
    path: /availability/items/rappi/status
    method: POST
    data_selector: response
    params: {}
- name: availability_stores_items
  endpoint:
    path: /availability/stores/items
    method: PUT
    data_selector: response
    params: {}
- name: availability_stores_items_rappi
  endpoint:
    path: /availability/stores/items/rappi
    method: PUT
    data_selector: response
    params: {}
- name: availability_stores
  endpoint:
    path: /availability/stores
    method: POST
    data_selector: response
    params: {}
- name: availability_stores_enable
  endpoint:
    path: /availability/stores/enable
    method: PUT
    data_selector: response
    params: {}
- name: availability_stores_enable_massive
  endpoint:
    path: /availability/stores/enable/massive
    method: PUT
    data_selector: response
    params: {}
- name: stores
  endpoint:
    path: /stores-pa
    method: GET
    data_selector: stores
- name: store_menu
  endpoint:
    path: /store/{RAPPI_ID}/menu/current
    method: GET
    data_selector: menu
- name: check_in_code
  endpoint:
    path: /stores-pa/{storeId}/check-in-code
    method: GET
    data_selector: check_in_code
- name: corridor_store
  endpoint:
    path: /api/rest-ops-utils/corridor/store/{storeId}
    method: GET
    data_selector: ''
    params: {}
- name: corridor_schedule
  endpoint:
    path: /api/rest-ops-utils/corridor/schedule/{corridorId}/store/{storeId}
    method: GET
    data_selector: ''
    params: {}
- name: create_corridor_schedule
  endpoint:
    path: /api/rest-ops-utils/corridor/schedule/{corridorId}/store/{storeId}
    method: POST
    data_selector: ''
    params: {}
- name: update_corridor_schedule
  endpoint:
    path: /api/rest-ops-utils/corridor/schedule/{corridorId}/store/{storeId}
    method: PUT
    data_selector: ''
    params: {}
- name: delete_corridor_schedule
  endpoint:
    path: /api/rest-ops-utils/corridor/schedule/{corridorId}/store/{storeId}/{corridorScheduleId}
    method: DELETE
    data_selector: ''
    params: {}
- name: corridor_integration
  endpoint:
    path: /api/rest-ops-utils/corridor/integration/{integrationId}
    method: GET
    data_selector: ''
    params: {}
- name: create_corridor_schedule_integration
  endpoint:
    path: /api/rest-ops-utils/corridor/schedule/{corridorId}/integration/{integrationId}
    method: POST
    data_selector: ''
    params: {}
- name: update_corridor_schedule_integration
  endpoint:
    path: /api/rest-ops-utils/corridor/schedule/{corridorId}/integration/{integrationId}
    method: PUT
    data_selector: ''
    params: {}
- name: delete_corridor_schedule_integration
  endpoint:
    path: /api/rest-ops-utils/corridor/schedule/{corridorId}/integration/{integrationId}/{corridorProductScheduleId}
    method: DELETE
    data_selector: ''
    params: {}
- name: product_corridor_store
  endpoint:
    path: /product/corridor/{corridorId}/store/{storeId}
    method: GET
    data_selector: records
- name: product_schedule
  endpoint:
    path: /product/schedule/{productId}/corridor/{corridorId}/store/{storeId}
    method: GET
    data_selector: schedule_details
- name: sku_corridor_integration
  endpoint:
    path: /sku/corridor/{corridorId}/integration/{integrationId}
    method: GET
    data_selector: records
- name: sku_schedule
  endpoint:
    path: /sku/schedule/{sku}/corridor/{corridorId}/integration/{integrationId}
    method: GET
    data_selector: schedule_details
- name: store_schedule
  endpoint:
    path: /store/schedule/{storeId}
    method: GET
    data_selector: storeScheduleDays
    params: {}
- name: store_holiday_schedule
  endpoint:
    path: /store/schedule/{storeId}/holiday
    method: GET
    data_selector: storeSpecialScheduleDays
    params: {}
- name: store_special_schedule
  endpoint:
    path: /store/schedule/{storeId}/special
    method: GET
    data_selector: storeSpecialScheduleDays
    params: {}
- name: create_store_schedule
  endpoint:
    path: /store/schedule/{storeId}
    method: POST
    data_selector: day
    params: {}
- name: create_store_holiday_schedule
  endpoint:
    path: /store/schedule/{storeId}/holiday/{holidayDayId}
    method: POST
    data_selector: ''
    params: {}
- name: create_special_day
  endpoint:
    path: /store/schedule/{storeId}/special
    method: POST
    data_selector: name
    params: {}
- name: update_store_schedule
  endpoint:
    path: /store/schedule/{storeId}/{storeScheduleId}
    method: PUT
    data_selector: day
    params: {}
- name: delete_store_schedule
  endpoint:
    path: /store/schedule/{storeId}/{storeScheduleId}
    method: DELETE
    data_selector: ''
    params: {}
- name: delete_special_day
  endpoint:
    path: /store/schedule/{storeId}/special/{specialDayId}
    method: DELETE
    data_selector: ''
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: store_orders
  endpoint:
    path: /stores/{storeId}/orders
    method: GET
    data_selector: orders
- name: orders_status_sent
  endpoint:
    path: /orders/status/sent
    method: GET
    data_selector: orders
- name: take_order
  endpoint:
    path: /stores/{storeId}/orders/{orderId}/take
    method: PUT
- name: get_qr_code
  endpoint:
    path: /stores/{storeId}/orders/{orderId}/handoff
    method: GET
- name: confirm_bags_and_drinks
  endpoint:
    path: /stores/{storeId}/orders/{orderId}/bag-drink-confirmation
    method: POST
- name: notify_order_ready_for_pickup
  endpoint:
    path: /stores/{storeId}/orders/{orderId}/ready-for-pickup
    method: POST
- name: reject_order
  endpoint:
    path: /stores/{storeId}/orders/{orderId}/cancel_type/{cancelType}/reject
    method: PUT
- name: products_availability
  endpoint:
    path: /stores/{STORE_ID}/products/{IDENTITY_TYPE}/stock
    method: PATCH
    data_selector: available
    params: {}
- name: toppings_availability
  endpoint:
    path: /stores/{STORE_ID}/toppings/{IDENTITY_TYPE}/stock
    method: PATCH
    data_selector: available
    params: {}
- name: items_availability
  endpoint:
    path: /stores/{STORE_ID}/items/{IDENTITY_TYPE}/stock
    method: PATCH
    data_selector: available
    params: {}
- name: products_status
  endpoint:
    path: /stores/{STORE_ID}/products/{IDENTITY_TYPE}/stock/status
    method: POST
    data_selector: products
    params: {}
- name: toppings_status
  endpoint:
    path: /stores/{STORE_ID}/toppings/{IDENTITY_TYPE}/stock/status
    method: POST
    data_selector: toppings
    params: {}
- name: items_status
  endpoint:
    path: /stores/{STORE_ID}/items/{IDENTITY_TYPE}/stock/status
    method: POST
    data_selector: items
    params: {}
- name: payments
  endpoint:
    path: /v1/stores/{store_id}/payments
    method: GET
    data_selector: payments
    params: {}
- name: orders
  endpoint:
    path: /v1/stores/{store_id}/orders
    method: GET
    data_selector: orders
    params: {}
- name: order_adjustments
  endpoint:
    path: /v1/stores/{store_id}/order_adjusments
    method: GET
    data_selector: order_adjustments
    params: {}
- name: charged_cancellations
  endpoint:
    path: /v1/stores/{store_id}/charged_cancellations
    method: GET
    data_selector: charged_cancellations
    params: {}
- name: store_adjustments
  endpoint:
    path: /v1/stores/{store_id}/store_adjustments
    method: GET
    data_selector: store_adjustments
    params: {}
- name: loans
  endpoint:
    path: /v1/stores/{store_id}/loans
    method: GET
    data_selector: loans
    params: {}
- name: debts
  endpoint:
    path: /v1/stores/{store_id}/debts
    method: GET
    data_selector: debts
    params: {}
- name: extras
  endpoint:
    path: /v1/stores/{store_id}/extras
    method: GET
    data_selector: extras
    params: {}
- name: taxes
  endpoint:
    path: /v1/stores/{store_id}/taxes
    method: GET
    data_selector: taxes
    params: {}
- name: compensations
  endpoint:
    path: /v1/stores/{store_id}/compensations
    method: GET
    data_selector: compensations
    params: {}
- name: cancellations
  endpoint:
    path: /v1/stores/{store_id}/cancellations
    method: GET
    data_selector: cancellations
    params: {}
- name: agreements
  endpoint:
    path: /v1/stores/{store_id}/agreements
    method: GET
    data_selector: agreements
    params: {}
- name: menu
  endpoint:
    path: /menu
    method: POST
    data_selector: menu
- name: approved_menu
  endpoint:
    path: /menu/approved/{storeId}
    method: GET
    data_selector: approval_status
- name: last_created_menu
  endpoint:
    path: /menu/rappi/{storeId}
    method: GET
    data_selector: last_menu
- name: new_orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params:
      status: READY
- name: sent_orders
  endpoint:
    path: /orders/status/sent
    method: GET
    data_selector: orders
    params: {}
- name: take_order
  endpoint:
    path: /orders/{orderId}/take/{cookingTime}
    method: PUT
    data_selector: confirmation
    params: {}
- name: reject_order
  endpoint:
    path: /orders/{orderId}/reject
    method: PUT
    data_selector: confirmation
    params: {}
- name: notify_order_ready_for_pickup
  endpoint:
    path: /orders/{orderId}/ready-for-pickup
    method: POST
    data_selector: confirmation
    params: {}
- name: order_events
  endpoint:
    path: /orders/{orderId}/events
    method: GET
    data_selector: JSON
    params: {}
- name: availability_by_sku
  endpoint:
    path: /availability/stores/items
    method: PUT
- name: availability_by_rappi_id
  endpoint:
    path: /availability/stores/items/rappi
    method: PUT
- name: store_availability_asynchronous
  endpoint:
    path: /availability/stores
    method: PUT
- name: store_availability_massive
  endpoint:
    path: /availability/stores/enable/massive
    method: PUT
- name: store_availability_synchronous
  endpoint:
    path: /availability/stores/enable
    method: PUT
- name: stores
  endpoint:
    path: /stores-pa
    method: GET
    data_selector: stores
- name: store_menu
  endpoint:
    path: /store/{RAPPI_ID}/menu/current
    method: GET
    data_selector: menu
- name: corridor_by_store
  endpoint:
    path: /corridor/store/{storeId}
    method: GET
    data_selector: '[]'
    params: {}
- name: corridor_schedule_by_store
  endpoint:
    path: /corridor/schedule/{corridorId}/store/{storeId}
    method: GET
    data_selector: schedule_details
    params: {}
- name: create_corridor_schedule
  endpoint:
    path: /corridor/schedule/{corridorId}/store/{storeId}
    method: POST
    data_selector: schedule_details
    params: {}
- name: update_corridor_schedule
  endpoint:
    path: /corridor/schedule/{corridorId}/store/{storeId}
    method: PUT
    data_selector: schedule_details
    params: {}
- name: delete_corridor_schedule
  endpoint:
    path: /corridor/schedule/{corridorId}/store/{storeId}/{corridorScheduleId}
    method: DELETE
    data_selector: schedule_details
    params: {}
- name: product_schedule_by_product_id
  endpoint:
    path: /api/rest-ops-utils/product/schedule/{productId}/corridor/{corridorId}/store/{storeId}
    method: GET
- name: product_schedule_by_sku
  endpoint:
    path: /api/rest-ops-utils/sku/schedule/{sku}/corridor/{corridorId}/integration/{integrationId}
    method: GET
- name: create_product_schedule_by_product_id
  endpoint:
    path: /api/rest-ops-utils/product/schedule/{productId}/corridor/{corridorId}/store/{storeId}
    method: POST
- name: create_product_schedule_by_sku
  endpoint:
    path: /api/rest-ops-utils/sku/schedule/{sku}/corridor/{corridorId}/integration/{integrationId}
    method: POST
- name: update_product_schedule_by_product_id
  endpoint:
    path: /api/rest-ops-utils/product/schedule/{productId}/corridor/{corridorId}/store/{storeId}
    method: PUT
- name: update_product_schedule_by_sku
  endpoint:
    path: /api/rest-ops-utils/sku/schedule/{sku}/corridor/{corridorId}/integration/{integrationId}
    method: PUT
- name: delete_product_schedule_by_product_id
  endpoint:
    path: /api/rest-ops-utils/product/schedule/{productId}/corridor/{corridorId}/store/{storeId}/{corridorProductScheduleId}
    method: DELETE
- name: delete_product_schedule_by_sku
  endpoint:
    path: /api/rest-ops-utils/sku/schedule/{sku}/corridor/{corridorId}/integration/{integrationId}/{corridorProductScheduleId}
    method: DELETE
- name: store_schedule
  endpoint:
    path: /store/schedule/{storeId}
    method: GET
    data_selector: storeScheduleDays
    params: {}
- name: store_holiday_schedule
  endpoint:
    path: /store/schedule/{storeId}/holiday
    method: GET
    data_selector: storeSpecialScheduleDays
    params: {}
- name: store_special_schedule
  endpoint:
    path: /store/schedule/{storeId}/special
    method: GET
    data_selector: storeSpecialScheduleDays
    params: {}
- name: create_regular_hours
  endpoint:
    path: /store/schedule/{storeId}
    method: POST
    data_selector: storeSchedules
    params: {}
- name: create_holiday_hours
  endpoint:
    path: /store/schedule/{storeId}/holiday/{holidayDayId}
    method: POST
    data_selector: storeSchedules
    params: {}
- name: create_special_day
  endpoint:
    path: /store/schedule/{storeId}/special
    method: POST
    data_selector: storeSchedules
    params: {}
- name: update_time_slot
  endpoint:
    path: /store/schedule/{storeId}/{storeScheduleId}
    method: PUT
    data_selector: storeSchedules
    params: {}
- name: delete_time_slot
  endpoint:
    path: /store/schedule/{storeId}/{storeScheduleId}
    method: DELETE
    data_selector: ''
    params: {}
- name: delete_special_day
  endpoint:
    path: /store/schedule/{storeId}/special/{specialDayId}
    method: DELETE
    data_selector: ''
    params: {}
- name: menu_status
  endpoint:
    path: /store/menu/{storeId}/details
    method: GET
    data_selector: ''
    params: {}
- name: product_status
  endpoint:
    path: /menu/integration/{integrationId}
    method: GET
    data_selector: ''
    params: {}
notes:
- Your access token has a validity of 1 week. After this time, you must generate a
  new token to continue making API requests to secure endpoints.
- This resource supports token authentication.
- 'IMPORTANT: The child store uses the same configuration as the parent store.'
- The child store uses the same configuration as the parent store.
- Your access token has a validity of 1 week. After this time, you must generate a
  new token.
- Menu updates require approval and can only process one menu at a time.
- You can only retrieve new orders once; after retrieval, their status changes from
  READY to SENT.
- If you try to transition an order to an illegal state, it will end in an impossibility
  of iterate the order.
- Public API has signatures for the security of its webhooks using a hash-based message
  authentication code (HMAC) with SHA-256.
- Log in to Rappi with your token once a week to make requests.
- Make requests to the Rappi API in order to get orders leaving a 45 seconds gap between
  requests.
- Integrations that fail to meet a 98% success rate in their API requests can be subject
  to revoked API access, removal, or disabling of restaurant stores from the Rappi
  application.
- Everytime changes or deprecations are made to the API, two headers indicating it
  will be sent through the HTTP responses and requests in webhooks
- The way in which totals and discounts are displayed on the order will be changed
  as of November 1, 2022
- With the new domains, even though previously different audiences could be used for
  authentication, now only a single audience in the generated token is allowed.
- You can only retrieve new orders once. After retrieval, their status changes from
  READY to SENT.
- Use resilience patterns like retry with exponential backoff for taking orders.
- Headers described in this portal are NOT case-sensitive.
- Your access token has a validity of 1 week. After this time, you must generate a
  new token to continue making requests to our secured endpoint.
- The operation's result will not come in the response for asynchronous methods.
- Keep in mind that the max amount of stores is 300 for synchronous method.
- Your access token has a validity of 1 week.
errors:
- '401: Invalid Credentials'
- '400: Bad request message error'
- '401: Not a valid token'
- '400: The submitted menu has errors.'
- 401 Invalid Credentials
- 400 Bad request message error
- '401 Invalid Credentials: Not a valid token'
- '400 Bad request message error: There was an error trying to change the store {storeId}
  to integrated: {true|false}. Please contact support team'
- '200: Success'
- 200 Success
- '401 Unauthorized: Not a valid token'
- '404 Not Found: Not found appClient of client id {clientId}'
- '400 Bad Request: IntegrationId {integrationId} not found'
- Items is required
- This Store needs skus in all items
- All items must have a valid name, category or product description.
- All parent items must be product type and children must be topping type.
- The topping categories cannot be duplicated (same name and id but different sorting
  position)
- The product categories cannot be duplicated (same name but different id or sorting
  position)
- All toppings must have a valid maxQty or maxLimit must not be greater than maxQty
- Product price must be greater than 0 if the product doesn’t have any children. Otherwise
  at least one of its children must have price.
- Menu contains products with same sku, but they have different attributes (including
  topping categories and toppings)
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'ORDER_RECEIVED_OUT_OF_HOURS: The restaurant is closed.'
- Insufficient stock on some items.
- The restaurant is having issues and cannot receive the order.
- Technical issue in server.
- Error in converting the order from Rappi.
- Delivery method not supported.
- Incorrect totals.
- The delivery value is incorrect.
- The value of one or several discounts is incorrect.
- Outside delivery area.
- The price of sku-23 is incorrect.
- The products sku-123 and sku-23 were not found in the system.
- Incorrect customer information.
auth_info:
  mentioned_objects:
  - Client ID
  - Client Secret
  - Audience
  - Grant Type
client:
  base_url: https://microservices.dev.rappi.com
  auth:
    type: Bearer
    location: header
    header_name: x-authorization
  headers:
    Content-Type: application/json
source_metadata: null
