resources:
- name: events
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: events
    params:
      queue_id: fb67bf8a-c031-47cc-84cf-ed80accacda8
      last_event_id: -1
      dont_block: true
- name: user_settings
  endpoint:
    path: /api/user_settings
    method: POST
    data_selector: event
    params: {}
- name: realm_user
  endpoint:
    path: /api/realm_user
    method: POST
    data_selector: event
    params: {}
- name: subscription
  endpoint:
    path: /api/register-queue
    method: POST
- name: subscription_op_remove
  endpoint:
    path: /subscription/op/remove
    method: POST
    data_selector: subscriptions
- name: subscription_op_update
  endpoint:
    path: /subscription/op/update
    method: POST
    data_selector: property
- name: subscription_op_peer_add
  endpoint:
    path: /subscription/op/peer_add
    method: POST
    data_selector: stream_ids
- name: subscription_op_peer_remove
  endpoint:
    path: /subscription/op/peer_remove
    method: POST
    data_selector: user_ids
- name: message
  endpoint:
    path: /message
    method: POST
    data_selector: message
- name: has_zoom_token
  endpoint:
    path: /has_zoom_token
    method: POST
    data_selector: value
- name: invites_changed
  endpoint:
    path: /invites
    method: GET
    data_selector: event
    params: {}
- name: realm_user_add
  endpoint:
    path: /register-queue
    method: POST
    data_selector: event
    params: {}
- name: realm_user_remove
  endpoint:
    path: /register-queue
    method: POST
    data_selector: event
    params: {}
- name: presence
  endpoint:
    path: /get-presence
    method: GET
    data_selector: event
    params: {}
- name: stream_op_create
  endpoint:
    path: /api/events
    method: POST
    data_selector: events
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
    params:
      incremental: last_event_id
- name: user_status
  endpoint:
    path: /api/user_status
    method: POST
    data_selector: user_status
- name: custom_profile_fields
  endpoint:
    path: /api/custom_profile_fields
    method: POST
    data_selector: custom_profile_fields
- name: default_stream_groups
  endpoint:
    path: /api/default_stream_groups
    method: POST
    data_selector: default_stream_groups
- name: default_streams
  endpoint:
    path: /api/default_streams
    method: POST
    data_selector: default_streams
- name: delete_message
  endpoint:
    path: /api/delete_message
    method: POST
    data_selector: delete_message
- name: muted_topics
  endpoint:
    path: /api/muted_topics
    method: POST
    data_selector: muted_topics
- name: user_topic
  endpoint:
    path: /api/user_topic
    method: POST
    data_selector: user_topic
- name: muted_users
  endpoint:
    path: /api/muted_users
    method: POST
    data_selector: muted_users
- name: heartbeat
  endpoint:
    path: /api/heartbeat
    method: GET
    data_selector: heartbeat
- name: onboarding_steps
  endpoint:
    path: /api/onboarding_steps
    method: POST
    data_selector: onboarding_steps
- name: update_message
  endpoint:
    path: /api/update_message
    method: POST
    data_selector: event
- name: typing_start
  endpoint:
    path: /api/set-typing-status
    method: POST
    data_selector: event
- name: typing_stop
  endpoint:
    path: /api/set-typing-status
    method: POST
    data_selector: event
- name: typing_edit_message_start
  endpoint:
    path: /api/set-typing-status-for-message-edit
    method: POST
    data_selector: event
- name: typing_edit_message
  endpoint:
    path: /api/set-typing-status-for-message-edit
    method: POST
    data_selector: event
    params: {}
- name: update_message_flags
  endpoint:
    path: /api/update-message-flags
    method: POST
    data_selector: event
    params: {}
- name: user_group
  endpoint:
    path: /api/user-groups
    method: POST
    data_selector: event
    params: {}
- name: user_group_update
  endpoint:
    path: /api/user_group
    method: POST
    data_selector: data
    params: {}
- name: user_group_add_members
  endpoint:
    path: /api/user_group/add_members
    method: POST
    data_selector: data
    params: {}
- name: user_group_remove_members
  endpoint:
    path: /api/user_group/remove_members
    method: POST
    data_selector: data
    params: {}
- name: user_group_add_subgroups
  endpoint:
    path: /api/user_group/add_subgroups
    method: POST
    data_selector: data
    params: {}
- name: user_group_remove_subgroups
  endpoint:
    path: /api/user_group/remove_subgroups
    method: POST
    data_selector: data
    params: {}
- name: user_group_remove
  endpoint:
    path: /api/user_group/remove
    method: POST
    data_selector: data
    params: {}
- name: realm_linkifiers
  endpoint:
    path: /api/realm_linkifiers
    method: GET
    data_selector: realm_linkifiers
    params: {}
- name: realm_playgrounds
  endpoint:
    path: /api/realm_playgrounds
    method: GET
    data_selector: realm_playgrounds
    params: {}
- name: realm_emoji
  endpoint:
    path: /api/realm_emoji
    method: GET
    data_selector: realm_emoji
- name: realm_domains
  endpoint:
    path: /api/realm_domains
    method: GET
    data_selector: realm_domain
- name: realm_export
  endpoint:
    path: /api/realm_export
    method: GET
    data_selector: exports
- name: realm_export_consent
  endpoint:
    path: /api/realm_export_consent
    method: GET
    data_selector: consented
- name: realm_bot
  endpoint:
    path: /api/realm_bot
    method: GET
    data_selector: bot
- name: realm
  endpoint:
    path: /api/realm
    method: GET
    data_selector: property
- name: realm
  endpoint:
    path: /api/v1/realm
    method: GET
    data_selector: data
- name: drafts
  endpoint:
    path: /api/drafts
    method: POST
    data_selector: drafts
    params: {}
- name: reminders
  endpoint:
    path: /api/reminders
    method: POST
    data_selector: reminders
    params: {}
- name: scheduled_messages
  endpoint:
    path: /api/scheduled_messages
    method: POST
    data_selector: scheduled_messages
    params: {}
- name: channel_folder_add
  endpoint:
    path: /api/channel_folder
    method: POST
    data_selector: channel_folder
    params: {}
- name: channel_folder_update
  endpoint:
    path: /api/channel_folder
    method: PATCH
    data_selector: data
    params: {}
- name: channel_folder_reorder
  endpoint:
    path: /api/channel_folder
    method: POST
    data_selector: order
    params: {}
- name: events
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: events
    params:
      queue_id: string
      last_event_id: integer
      dont_block: boolean
- name: user_settings
  endpoint:
    path: /api/user_settings
    method: POST
    data_selector: event
    params: {}
- name: realm_user
  endpoint:
    path: /api/realm_user
    method: POST
    data_selector: event
    params: {}
- name: plans
  endpoint:
    path: /api/plans
    method: GET
    data_selector: plans
- name: subscriptions
  endpoint:
    path: /api/v1/subscriptions
    method: GET
    data_selector: subscriptions
- name: subscription_op_remove
  endpoint:
    path: /api/register-queue
    method: POST
    data_selector: subscriptions
- name: subscription_op_update
  endpoint:
    path: /api/register-queue
    method: POST
    data_selector: subscriptions
- name: subscription_op_peer_add
  endpoint:
    path: /api/register-queue
    method: POST
    data_selector: subscriptions
- name: subscription_op_peer_remove
  endpoint:
    path: /api/register-queue
    method: POST
    data_selector: subscriptions
- name: message
  endpoint:
    path: /api/register-queue
    method: POST
    data_selector: message
- name: has_zoom_token
  endpoint:
    path: /api/register-queue
    method: POST
    data_selector: has_zoom_token
- name: invites_changed
  endpoint:
    path: /invites
    method: GET
    data_selector: events
- name: realm_user_add
  endpoint:
    path: /register-queue
    method: POST
    data_selector: op
    params:
      op: add
- name: realm_user_remove
  endpoint:
    path: /register-queue
    method: POST
    data_selector: op
    params:
      op: remove
- name: presence
  endpoint:
    path: /get-presence
    method: GET
    data_selector: presences
- name: stream
  endpoint:
    path: /api/v1/streams
    method: GET
    data_selector: streams
- name: push_device
  endpoint:
    path: /api/register-push-device
    method: POST
    data_selector: push_devices
    params: {}
- name: submessage
  endpoint:
    path: /api/register-queue
    method: POST
    data_selector: submessages
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result.messages
    params: {}
- name: streams
  endpoint:
    path: /streams
    method: GET
    data_selector: streams
    params: {}
- name: user_status
  endpoint:
    path: /api/v1/user_status
    method: GET
    data_selector: user_status
    params: {}
- name: custom_profile_fields
  endpoint:
    path: /api/v1/custom_profile_fields
    method: GET
    data_selector: custom_profile_fields
    params: {}
- name: default_stream_groups
  endpoint:
    path: /api/v1/default_stream_groups
    method: GET
    data_selector: default_stream_groups
    params: {}
- name: default_streams
  endpoint:
    path: /api/v1/default_streams
    method: GET
    data_selector: default_streams
    params: {}
- name: delete_message
  endpoint:
    path: /api/v1/delete_message
    method: POST
    data_selector: delete_message
    params: {}
- name: muted_topics
  endpoint:
    path: /api/v1/muted_topics
    method: GET
    data_selector: muted_topics
    params: {}
- name: user_topic
  endpoint:
    path: /api/v1/user_topic
    method: POST
    data_selector: user_topic
    params: {}
- name: muted_users
  endpoint:
    path: /api/v1/muted_users
    method: GET
    data_selector: muted_users
    params: {}
- name: heartbeat
  endpoint:
    path: /api/v1/heartbeat
    method: GET
    data_selector: heartbeat
    params: {}
- name: onboarding_steps
  endpoint:
    path: /api/v1/onboarding_steps
    method: GET
    data_selector: onboarding_steps
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: update_message
  endpoint:
    path: /api/update-message
    method: POST
    data_selector: event
    params: {}
- name: typing_start
  endpoint:
    path: /api/set-typing-status
    method: POST
    data_selector: event
    params: {}
- name: typing_stop
  endpoint:
    path: /api/set-typing-status
    method: POST
    data_selector: event
    params: {}
- name: typing_edit_message_start
  endpoint:
    path: /api/set-typing-status-for-message-edit
    method: POST
    data_selector: event
    params: {}
- name: typing_edit_message
  endpoint:
    path: /api/set-typing-status-for-message-edit
    method: POST
    data_selector: event
    params: {}
- name: update_message_flags
  endpoint:
    path: /api/update-message-flags
    method: POST
    data_selector: event
    params: {}
- name: user_group
  endpoint:
    path: /api/user-groups
    method: POST
    data_selector: event
    params: {}
- name: user_group
  endpoint:
    path: /api/user_groups
    method: POST
    data_selector: events
    params: {}
- name: realm_linkifiers
  endpoint:
    path: /api/realm/linkifiers
    method: GET
    data_selector: realm_linkifiers
    params: {}
- name: realm_playgrounds
  endpoint:
    path: /api/realm/playgrounds
    method: GET
    data_selector: realm_playgrounds
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: streams
  endpoint:
    path: /api/v1/streams
    method: GET
    data_selector: streams
    params: {}
- name: realm_emoji
  endpoint:
    path: /api/realm_emoji
    method: GET
    data_selector: realm_emoji
- name: realm_domains
  endpoint:
    path: /api/realm_domains
    method: GET
    data_selector: realm_domain
- name: realm_export
  endpoint:
    path: /api/realm_export
    method: GET
    data_selector: exports
- name: realm_export_consent
  endpoint:
    path: /api/realm_export_consent
    method: GET
    data_selector: consented
- name: realm_bot
  endpoint:
    path: /api/realm_bot
    method: GET
    data_selector: bot
- name: realm
  endpoint:
    path: /api/realm
    method: GET
    data_selector: property
- name: communities
  endpoint:
    path: /communities
    method: GET
    data_selector: communities
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
- name: register
  endpoint:
    path: /api/register
    method: POST
    data_selector: result
- name: get_server_settings
  endpoint:
    path: /api/get-server-settings
    method: GET
    data_selector: result
- name: community_chat
  endpoint:
    path: /api/v1/streams
    method: GET
    data_selector: streams
    params: {}
- name: events
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: events
    params: {}
- name: user_group_settings
  endpoint:
    path: /api/group-setting-values
    method: GET
    data_selector: settings
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params:
      incremental: last_event_time
- name: streams
  endpoint:
    path: /api/v1/streams
    method: GET
    data_selector: streams
    params: {}
- name: realm
  endpoint:
    path: /api/v1/realm
    method: GET
    data_selector: data
    params: {}
- name: realm_user_settings_defaults
  endpoint:
    path: /realm/user_settings_defaults
    method: PATCH
    data_selector: id
    params: {}
- name: drafts
  endpoint:
    path: /drafts
    method: POST
    data_selector: drafts
    params: {}
- name: navigation_view
  endpoint:
    path: /navigation_view
    method: POST
    data_selector: navigation_view
    params: {}
- name: saved_snippets
  endpoint:
    path: /saved_snippets
    method: POST
    data_selector: saved_snippet
    params: {}
- name: reminders
  endpoint:
    path: /reminders
    method: POST
    data_selector: reminders
    params: {}
- name: scheduled_messages
  endpoint:
    path: /scheduled_messages
    method: POST
    data_selector: scheduled_messages
    params: {}
- name: channel_folder
  endpoint:
    path: /api/channel_folder
    method: POST
    data_selector: events
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params:
      incremental: timestamp
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: members
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: members
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: streams
  endpoint:
    path: /api/v1/streams
    method: GET
    data_selector: streams
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: streams
  endpoint:
    path: /api/v1/streams
    method: GET
    data_selector: streams
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: streams
  endpoint:
    path: /v1/streams
    method: GET
    data_selector: streams
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: members
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
    params: {}
- name: streams
  endpoint:
    path: /streams
    method: GET
    data_selector: streams
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: GET
    data_selector: result.messages
- name: streams
  endpoint:
    path: /v1/streams
    method: GET
    data_selector: result.streams
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: streams
  endpoint:
    path: /api/v1/streams
    method: GET
    data_selector: streams
    params: {}
- name: streams
  endpoint:
    path: /v1/streams
    method: GET
    data_selector: streams
- name: messages
  endpoint:
    path: /v1/messages
    method: GET
    data_selector: messages
- name: messages
  endpoint:
    path: /v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: members
    params: {}
- name: communities
  endpoint:
    path: /api/v1/communities
    method: GET
    data_selector: communities
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: Slack Import
  endpoint:
    path: /import/slack
    method: POST
    data_selector: import_data
    params: {}
- name: export_data
  endpoint:
    path: /services/export
    method: GET
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: announcements
  endpoint:
    path: /help/channel-notifications
    method: GET
- name: file_uploads
  endpoint:
    path: /help/share-and-upload-files
    method: GET
- name: formatting_tips
  endpoint:
    path: /help/format-your-message-using-markdown
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: streams
  endpoint:
    path: /streams
    method: GET
    data_selector: streams
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
- name: streams
  endpoint:
    path: /api/v1/streams
    method: GET
    data_selector: streams
- name: topics
  endpoint:
    path: /help/introduction-to-topics
    method: GET
- name: reply_to_messages
  endpoint:
    path: /help/replying-to-messages
    method: GET
    data_selector: messages
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: streams
  endpoint:
    path: /streams
    method: GET
    data_selector: streams
- name: organization_profile
  endpoint:
    path: /api/v1/organization/profile
    method: GET
    data_selector: profile
- name: user_groups
  endpoint:
    path: /api/v1/user_groups
    method: POST
    data_selector: user_groups
    params: {}
- name: organization_settings
  endpoint:
    path: /api/v1/organization/settings
    method: GET
    data_selector: settings
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: streams
  endpoint:
    path: /api/v1/streams
    method: GET
    data_selector: streams
    params: {}
- name: integrations
  endpoint:
    path: /api/integrations
    method: GET
    data_selector: integrations
    params: {}
- name: webhooks
  endpoint:
    path: /api/incoming-webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: chat
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: change_name
  endpoint:
    path: /help/change-your-name
    method: GET
- name: change_user_name
  endpoint:
    path: /help/change-a-users-name
    method: GET
- name: restrict_name_changes
  endpoint:
    path: /help/restrict-name-and-email-changes
    method: GET
- name: email_visibility
  endpoint:
    path: /api/email-visibility
    method: GET
    data_selector: email_visibility
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: incoming_webhooks
  endpoint:
    path: /api/incoming-webhooks
    method: POST
- name: interactive_bots
  endpoint:
    path: /api/bots
    method: POST
- name: organization
  endpoint:
    path: /import/slack
    method: POST
- name: color_theme
  endpoint:
    path: /help/dark-theme
    method: GET
    data_selector: section
    params: {}
- name: organization
  endpoint:
    path: /api/v1/organizations
    method: GET
    data_selector: organizations
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: time_zone
  endpoint:
    path: /help/configure-time-zone-used-by-zulip-to-display-dates-and-times
    method: GET
    data_selector: time_zone_settings
    params: {}
- name: time_format
  endpoint:
    path: /api/v1/time_format
    method: GET
    data_selector: time_format_options
    params: {}
- name: emoticon_translations
  endpoint:
    path: /api/emoticon_translations
    method: GET
    data_selector: translations
    params: {}
- name: home_view
  endpoint:
    path: /help/configure-home-view
    method: GET
    data_selector: home view options
    params: {}
- name: keyboard_shortcuts
  endpoint:
    path: /help/keyboard-shortcuts
    method: GET
    data_selector: keyboard shortcuts
    params: {}
- name: uploaded_files
  endpoint:
    path: /api/files
    method: GET
    data_selector: files
    params: {}
- name: import_from_slack
  endpoint:
    path: /help/import-from-slack
    method: GET
- name: import_from_mattermost
  endpoint:
    path: /help/import-from-mattermost
    method: GET
- name: import_from_rocketchat
  endpoint:
    path: /help/import-from-rocketchat
    method: GET
- name: organization_profile
  endpoint:
    path: /api/v1/organization/profile
    method: GET
    data_selector: profile
- name: user_group
  endpoint:
    path: /api/v1/user_groups
    method: POST
    data_selector: user_group
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: subscribe_channel
  endpoint:
    path: /help/subscribe-channel
    method: POST
    data_selector: data
    params: {}
- name: email_notifications
  endpoint:
    path: /help/email-notifications
    method: GET
    data_selector: notifications
    params: {}
- name: user_groups
  endpoint:
    path: /api/user_groups
    method: GET
    data_selector: user_groups
- name: organization_settings
  endpoint:
    path: /api/organization_settings
    method: GET
    data_selector: settings
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: members
    params: {}
- name: create_channel
  endpoint:
    path: /api/v1/create_channel
    method: POST
- name: custom_profile_fields
  endpoint:
    path: /help/custom-profile-fields#add-a-custom-profile-field
    method: GET
- name: default_new_user_settings
  endpoint:
    path: /help/configure-default-new-user-settings
    method: GET
- name: default_channels
  endpoint:
    path: /help/set-default-channels-for-new-users
    method: GET
- name: organization_language
  endpoint:
    path: /help/configure-organization-language
    method: GET
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: topics
  endpoint:
    path: /api/v1/topics
    method: GET
    data_selector: topics
    params: {}
- name: saved_snippets
  endpoint:
    path: /api/saved_snippets
    method: GET
    data_selector: snippets
- name: change_name
  endpoint:
    path: /help/change-your-name
    method: GET
- name: change_user_name
  endpoint:
    path: /help/change-a-users-name
    method: GET
- name: restrict_name_changes
  endpoint:
    path: /help/restrict-name-and-email-changes
    method: GET
- name: change_name
  endpoint:
    path: /api/change_name
    method: POST
    data_selector: result
- name: profile_picture
  endpoint:
    path: /api/v1/profile_picture
    method: POST
    data_selector: result
    params: {}
- name: insert_gif
  endpoint:
    path: /giphy/insert
    method: POST
- name: restrict_gif_rating
  endpoint:
    path: /giphy/restrict_rating
    method: POST
- name: email_visibility
  endpoint:
    path: /api/v1/email_visibility
    method: GET
    data_selector: email_visibility
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: GET
    data_selector: messages
- name: streams
  endpoint:
    path: /v1/streams
    method: GET
    data_selector: streams
- name: deactivate_account
  endpoint:
    path: /help/deactivate-your-account
    method: GET
    data_selector: account_deactivation_steps
- name: account_privacy
  endpoint:
    path: /help/account-privacy
    method: GET
    data_selector: account_privacy_info
- name: theme
  endpoint:
    path: /help/manage-color-theme
    method: GET
- name: line_spacing
  endpoint:
    path: /help/line-spacing
    method: GET
    data_selector: content
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: configure_send_message_keys
  endpoint:
    path: /help/configure-send-message-keys
    method: GET
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: create_poll
  endpoint:
    path: /api/polls
    method: POST
    data_selector: poll
    params: {}
- name: add_option
  endpoint:
    path: /api/polls/<poll_id>/options
    method: POST
    data_selector: option
    params: {}
- name: edit_question
  endpoint:
    path: /api/polls/<poll_id>
    method: PATCH
    data_selector: poll
    params: {}
- name: emoticon_translations
  endpoint:
    path: /configure/emoticon/translations
    method: GET
    data_selector: translations
    params: {}
- name: global_times
  endpoint:
    path: /api/global_times
    method: POST
    data_selector: times
- name: start_video_call
  endpoint:
    path: /help/start-a-video-call
    method: GET
    data_selector: video_call_instructions
- name: start_voice_call
  endpoint:
    path: /help/start-a-voice-call
    method: GET
    data_selector: voice_call_instructions
- name: unlink_zoom_account
  endpoint:
    path: /help/unlink-your-zoom-account-from-zulip
    method: GET
    data_selector: unlink_zoom_instructions
- name: uploaded_files
  endpoint:
    path: /api/files
    method: GET
    data_selector: files
    params: {}
- name: typing_notifications
  endpoint:
    path: /help/typing-notifications
    method: GET
    data_selector: notifications
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: scheduled_messages
  endpoint:
    path: /api/scheduled_messages
    method: GET
    data_selector: messages
- name: subscribe_channel
  endpoint:
    path: /api/v1/subscriptions
    method: POST
    data_selector: subscriptions
    params: {}
- name: email_notifications
  endpoint:
    path: /api/v1/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: recent_conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: combined_feed
  endpoint:
    path: /api/v1/combined_feed
    method: GET
- name: list_of_topics
  endpoint:
    path: /api/topics
    method: GET
    data_selector: topics
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
- name: file_upload
  endpoint:
    path: /api/files
    method: POST
    data_selector: file_data
    params: {}
- name: mentions
  endpoint:
    path: /api/v1/mentions
    method: GET
    data_selector: mentions
    params: {}
- name: insert_gif
  endpoint:
    path: /giphy/insert
    method: POST
    data_selector: gif_data
- name: restrict_rating
  endpoint:
    path: /giphy/restrict_rating
    method: POST
    data_selector: rating_data
- name: starred_message
  endpoint:
    path: /api/v1/starred_messages
    method: GET
    data_selector: starred_messages
- name: images
  endpoint:
    path: /help/view-images-and-videos
    method: GET
    data_selector: image_previews
- name: videos
  endpoint:
    path: /help/view-images-and-videos
    method: GET
    data_selector: video_thumbnails
- name: numbered_lists
  endpoint:
    path: /help/numbered-lists
    method: GET
    data_selector: overview
- name: message_edit_history
  endpoint:
    path: /api/v1/messages/edit_history
    method: GET
    data_selector: edit_history
    params: {}
- name: collapse_message
  endpoint:
    path: /api/collapse_message
    method: POST
- name: read_receipts
  endpoint:
    path: /api/read_receipts
    method: GET
    data_selector: read_receipts
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: me_action_messages
  endpoint:
    path: /me/action/messages
    method: GET
    data_selector: messages
    params: {}
- name: user_list
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: status
  endpoint:
    path: /api/v1/status
    method: GET
    data_selector: statuses
- name: availability
  endpoint:
    path: /api/v1/availability
    method: GET
    data_selector: availability
- name: create_poll
  endpoint:
    path: /api/create_poll
    method: POST
    data_selector: poll
    params: {}
- name: add_options
  endpoint:
    path: /api/add_options
    method: POST
    data_selector: options
    params: {}
- name: edit_question
  endpoint:
    path: /api/edit_question
    method: POST
    data_selector: question
    params: {}
- name: user_card
  endpoint:
    path: /api/user_cards
    method: GET
    data_selector: user_cards
- name: to_do_list
  endpoint:
    path: /api/todo_lists
    method: POST
    data_selector: result
    params: {}
- name: tasks
  endpoint:
    path: /api/tasks
    method: POST
    data_selector: result
    params: {}
- name: user_profile
  endpoint:
    path: /api/v1/users/me
    method: GET
    data_selector: user
- name: global_times
  endpoint:
    path: /help/global-times
    method: GET
    data_selector: examples
    params: {}
- name: video_call
  endpoint:
    path: /api/v1/video_call
    method: POST
    data_selector: result
    params: {}
- name: voice_call
  endpoint:
    path: /api/v1/voice_call
    method: POST
    data_selector: result
    params: {}
- name: administrators
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: compose_box
  endpoint:
    path: /api/v1/compose
    method: GET
    data_selector: compose
- name: user_groups
  endpoint:
    path: /api/user_groups
    method: GET
    data_selector: user_groups
- name: user_groups
  endpoint:
    path: /api/v1/user_groups
    method: GET
    data_selector: user_groups
- name: typing_notifications
  endpoint:
    path: /help/typing-notifications
    method: GET
    data_selector: notifications
    params: {}
- name: channels
  endpoint:
    path: /api/v1/channels
    method: GET
    data_selector: channels
    params: {}
- name: pin_channel
  endpoint:
    path: /api/pin_channel
    method: POST
    data_selector: result
    params: {}
- name: unpin_channel
  endpoint:
    path: /api/unpin_channel
    method: POST
    data_selector: result
    params: {}
- name: channel_folders
  endpoint:
    path: /help/channel-folders
    method: GET
    data_selector: channels
    params: {}
- name: unsubscribe_channel
  endpoint:
    path: /api/v1/unsubscribe
    method: POST
    data_selector: result
    params: {}
- name: draft_messages
  endpoint:
    path: /api/v1/drafts
    method: GET
    data_selector: drafts
- name: inactive_channels
  endpoint:
    path: /help/manage-inactive-channels
    method: GET
    data_selector: channels
    params: {}
- name: scheduled_message
  endpoint:
    path: /api/v1/scheduled_messages
    method: GET
    data_selector: messages
    params: {}
- name: move_content_to_another_channel
  endpoint:
    path: /help/move-content-to-another-channel
    method: GET
    data_selector: content
    params: {}
- name: move_topic_to_another_channel
  endpoint:
    path: /help/move-a-topic-to-another-channel
    method: GET
    data_selector: content
    params: {}
- name: move_messages_to_another_channel
  endpoint:
    path: /help/move-messages-to-another-channel
    method: GET
    data_selector: content
    params: {}
- name: moving_content_to_private_channels
  endpoint:
    path: /help/moving-content-to-private-channels
    method: GET
    data_selector: content
    params: {}
- name: message_channel_by_email
  endpoint:
    path: /api/v1/messages
    method: POST
    data_selector: result
- name: channel_information
  endpoint:
    path: /help/view-channel-information
    method: GET
- name: channel_subscribers
  endpoint:
    path: /api/v1/channels
    method: GET
    data_selector: subscribers
    params: {}
- name: inbox
  endpoint:
    path: /api/inbox
    method: GET
    data_selector: conversations
- name: rename_topic
  endpoint:
    path: /api/topics/rename
    method: POST
    data_selector: result
- name: recent_conversations
  endpoint:
    path: /api/v1/recent_conversations
    method: GET
    data_selector: conversations
- name: Combined feed
  endpoint:
    path: /help/combined-feed
    method: GET
- name: topics
  endpoint:
    path: /help/introduction-to-topics
    method: GET
- name: move_messages
  endpoint:
    path: /move-messages-to-another-topic
    method: POST
- name: channel_feed
  endpoint:
    path: /api/v1/channels
    method: GET
    data_selector: topics
    params: {}
- name: general_chat
  endpoint:
    path: /api/v1/messages
    method: POST
    data_selector: messages
    params: {}
- name: list_of_topics
  endpoint:
    path: /api/v1/topics
    method: GET
    data_selector: topics
    params: {}
- name: topic
  endpoint:
    path: /api/topics
    method: DELETE
    data_selector: topics
    params: {}
- name: channel_notifications
  endpoint:
    path: /api/v1/channel_notifications
    method: GET
    data_selector: notifications
    params: {}
- name: topic_notifications
  endpoint:
    path: /help/topic-notifications
    method: GET
    data_selector: notifications
    params: {}
- name: mark_messages_as_read
  endpoint:
    path: /api/mark_messages_as_read
    method: POST
    data_selector: result
    params: {}
- name: mark_unread
  endpoint:
    path: /api/messages/mark_as_unread
    method: POST
    data_selector: result
    params: {}
- name: notifications
  endpoint:
    path: /help/direct-messages
    method: GET
- name: wildcard_mentions
  endpoint:
    path: /help/wildcard-mentions
    method: GET
- name: alert_words
  endpoint:
    path: /help/alert-words
    method: GET
- name: mute_channel
  endpoint:
    path: /mute
    method: POST
- name: unmute_channel
  endpoint:
    path: /unmute
    method: POST
- name: mentions
  endpoint:
    path: /api/v1/mentions
    method: GET
- name: mute_user
  endpoint:
    path: /api/mute_user
    method: POST
    data_selector: result
- name: muted_users
  endpoint:
    path: /api/muted_users
    method: GET
    data_selector: muted_users
- name: message_notifications
  endpoint:
    path: /help/email-notifications
    method: GET
    data_selector: notifications
    params: {}
- name: reminder
  endpoint:
    path: /api/v1/reminders
    method: GET
    data_selector: reminders
- name: email_notifications
  endpoint:
    path: /notifications/email
    method: POST
- name: new_login_emails
  endpoint:
    path: /notifications/new_login
    method: POST
- name: low_traffic_newsletter
  endpoint:
    path: /notifications/low_traffic_newsletter
    method: POST
- name: image_viewer
  endpoint:
    path: /help/view-images-and-videos
    method: GET
    data_selector: image previews
- name: video_player
  endpoint:
    path: /help/view-images-and-videos
    method: GET
    data_selector: video thumbnails
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: GET
    data_selector: notifications
- name: user_messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: search_messages
  endpoint:
    path: /api/v1/messages/search
    method: GET
    data_selector: messages
    params: {}
- name: print_messages
  endpoint:
    path: /help/printing-messages
    method: GET
    data_selector: null
    params: {}
- name: latest_release_android
  endpoint:
    path: https://zulip.com/apps/android
    method: GET
    data_selector: release_info
- name: latest_release_ios
  endpoint:
    path: https://zulip.com/apps/ios
    method: GET
    data_selector: release_info
- name: beta_release_android
  endpoint:
    path: https://play.google.com/apps/testing/com.zulipmobile/
    method: GET
    data_selector: beta_info
- name: beta_release_ios
  endpoint:
    path: https://testflight.apple.com/join/ZuzqwXGf
    method: GET
    data_selector: beta_info
- name: legacy_app_android
  endpoint:
    path: https://github.com/zulip/zulip-mobile/releases/latest
    method: GET
    data_selector: legacy_app_info
- name: message_edit_history
  endpoint:
    path: /api/v1/messages/edit_history
    method: GET
    data_selector: history
- name: user_list
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: communities_directory
  endpoint:
    path: /communities/
    method: GET
    data_selector: organizations
- name: statuses
  endpoint:
    path: /api/v1/statuses
    method: GET
    data_selector: statuses
- name: availability
  endpoint:
    path: /api/v1/availability
    method: GET
    data_selector: availability
- name: user_card
  endpoint:
    path: /api/v1/user_cards
    method: GET
    data_selector: user_cards
- name: user_profile
  endpoint:
    path: /api/v1/users/me
    method: GET
    data_selector: profile
- name: deactivate_organization
  endpoint:
    path: /deactivate-your-organization
    method: POST
- name: restore_deactivated_organization
  endpoint:
    path: /restore-a-deactivated-organization
    method: POST
- name: organization_import
  endpoint:
    path: /api/v1/import/mattermost
    method: POST
- name: administrators
  endpoint:
    path: /help/user-roles
    method: GET
    data_selector: roles
    params: {}
- name: organization_import
  endpoint:
    path: /api/import/rocket_chat
    method: POST
    data_selector: data
- name: user_groups
  endpoint:
    path: /api/v1/user_groups
    method: GET
    data_selector: user_groups
- name: channels
  endpoint:
    path: /api/v1/channels
    method: GET
    data_selector: channels
    params: {}
- name: create_channel
  endpoint:
    path: /api/v1/create_channel
    method: POST
- name: default_user_settings
  endpoint:
    path: /api/default_user_settings
    method: GET
    data_selector: settings
    params: {}
- name: organization_settings
  endpoint:
    path: /api/organization_settings
    method: GET
    data_selector: settings
    params: {}
- name: channel_color
  endpoint:
    path: /api/change_channel_color
    method: POST
    data_selector: result
    params: {}
- name: invite_users
  endpoint:
    path: /api/v1/invite
    method: POST
    data_selector: invited_users
    params: {}
- name: channel_folders
  endpoint:
    path: /api/v1/channel_folders
    method: GET
    data_selector: folders
    params: {}
- name: unsubscribe_channel
  endpoint:
    path: /api/v1/channels/unsubscribe
    method: POST
    data_selector: result
    params: {}
- name: restrict_signups
  endpoint:
    path: /organization/settings/restrict_signups
    method: POST
    data_selector: domains
    params:
      domain_restriction: list_of_domains
- name: disposable_domains
  endpoint:
    path: /organization/settings/disposable_domains
    method: POST
    data_selector: disposable_email
    params:
      domain_restriction: no_disposable
- name: allow_all_domains
  endpoint:
    path: /organization/settings/allow_all_domains
    method: POST
    data_selector: all_domains
    params:
      domain_restriction: no_restrictions
- name: move_topic
  endpoint:
    path: /help/move-a-topic-to-another-channel
    method: GET
- name: move_messages
  endpoint:
    path: /help/move-messages-to-another-channel
    method: GET
- name: moving_content_private_channels
  endpoint:
    path: /help/moving-content-to-private-channels
    method: GET
- name: channel_information
  endpoint:
    path: /help/view-channel-information
    method: GET
    data_selector: channel_info
- name: channel_subscribers
  endpoint:
    path: /api/v1/channels/subscribers
    method: GET
    data_selector: subscribers
- name: SCIM User Provisioning
  endpoint:
    path: /scim/v2
    method: POST
    data_selector: Users
    params: {}
- name: user_management
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: topics
  endpoint:
    path: /api/topics
    method: GET
    data_selector: topics
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: Delete a topic
  endpoint:
    path: /help/delete-a-topic
    method: GET
- name: channel_notifications
  endpoint:
    path: /api/v1/channel_notifications
    method: GET
- name: channel_subscriptions
  endpoint:
    path: /api/v1/users/me/subscriptions
    method: GET
    data_selector: subscriptions
- name: subscribe_user
  endpoint:
    path: /api/v1/users/me/subscriptions
    method: POST
    data_selector: result
- name: unsubscribe_user
  endpoint:
    path: /api/v1/users/me/subscriptions
    method: DELETE
    data_selector: result
- name: topic_notifications
  endpoint:
    path: /help/topic-notifications
    method: GET
    data_selector: notifications
- name: organization_settings
  endpoint:
    path: /api/v1/organization/settings
    method: GET
    data_selector: settings
- name: user_names
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: user_groups
  endpoint:
    path: /api/v1/user_groups
    method: GET
    data_selector: user_groups
- name: channels
  endpoint:
    path: /api/v1/channels
    method: GET
    data_selector: channels
- name: general_chat_channels
  endpoint:
    path: /help/general-chat-channels
    method: GET
    data_selector: channels
- name: mute_user
  endpoint:
    path: /api/mute_user
    method: POST
    data_selector: result
    params: {}
- name: muted_users
  endpoint:
    path: /api/muted_users
    method: GET
    data_selector: muted_users
    params: {}
- name: channel_folders
  endpoint:
    path: /api/v1/channel_folders
    method: GET
    data_selector: channel_folders
    params: {}
- name: message_notification_emails
  endpoint:
    path: /help/dm-mention-alert-notifications
    method: GET
    data_selector: null
- name: channel_notifications
  endpoint:
    path: /help/channel-notifications
    method: GET
    data_selector: null
- name: followed_topics
  endpoint:
    path: /help/follow-a-topic#configure-notifications-for-followed-topics
    method: GET
    data_selector: null
- name: channel_permissions
  endpoint:
    path: /api/v1/channels/permissions
    method: GET
    data_selector: permissions
    params: {}
- name: channel_posting_policy
  endpoint:
    path: /api/v1/channel_posting_policy
    method: GET
    data_selector: policy
    params: {}
- name: desktop_notifications
  endpoint:
    path: /help/desktop-notifications
    method: GET
    data_selector: notifications
    params: {}
- name: unread_count_badge
  endpoint:
    path: /help/unread-count-badge
    method: GET
    data_selector: unread_count
    params: {}
- name: channel_admin_permissions
  endpoint:
    path: /api/v1/channel/admin_permissions
    method: POST
    data_selector: permissions
    params: {}
- name: Do Not Disturb
  endpoint:
    path: /api/do_not_disturb
    method: POST
    data_selector: result
    params: {}
- name: channel_permissions
  endpoint:
    path: /api/channel_permissions
    method: GET
    data_selector: permissions
- name: user_roles
  endpoint:
    path: /api/user_roles
    method: GET
    data_selector: roles
- name: channel_permissions
  endpoint:
    path: /help/channel-permissions
    method: GET
- name: user_roles
  endpoint:
    path: /help/user-roles
    method: GET
- name: user_groups
  endpoint:
    path: /help/user-groups
    method: GET
- name: unsubscribe_users_from_channel
  endpoint:
    path: /api/v1/unsubscribe
    method: POST
    data_selector: result
- name: default_channels
  endpoint:
    path: /api/default_channels
    method: GET
    data_selector: channels
- name: organization_type
  endpoint:
    path: /api/v1/organization/type
    method: GET
- name: channel
  endpoint:
    path: /api/channels
    method: GET
    data_selector: channels
    params: {}
- name: communities_directory
  endpoint:
    path: /communities/
    method: GET
- name: pin_information
  endpoint:
    path: /help/pin-information
    method: GET
    data_selector: content
    params: {}
- name: channel
  endpoint:
    path: /api/v1/channels
    method: GET
    data_selector: channels
- name: deactivate_organization
  endpoint:
    path: /deactivate-organization
    method: POST
    data_selector: data
    params: {}
- name: restore_deactivated_organization
  endpoint:
    path: /restore-deactivated-organization
    method: POST
    data_selector: data
    params: {}
- name: archive_channel
  endpoint:
    path: /api/archive_channel
    method: POST
    data_selector: result
- name: view_archived_channels
  endpoint:
    path: /api/view_archived_channels
    method: GET
    data_selector: channels
- name: mattermost_import
  endpoint:
    path: /import/mattermost
    method: POST
- name: organization_permissions
  endpoint:
    path: /api/v1/organization/permissions
    method: GET
    data_selector: permissions
    params: {}
- name: organization_import
  endpoint:
    path: /import/rocket.chat
    method: POST
    data_selector: import_data
    params: {}
- name: deactivate_user_group
  endpoint:
    path: /deactivate_user_group
    method: POST
    data_selector: result
    params: {}
- name: view_deactivated_user_groups
  endpoint:
    path: /view_deactivated_user_groups
    method: GET
    data_selector: groups
    params: {}
- name: reactivate_user_group
  endpoint:
    path: /reactivate_user_group
    method: POST
    data_selector: result
    params: {}
- name: user_roles
  endpoint:
    path: /api/v1/user_roles
    method: GET
    data_selector: roles
    params: {}
- name: public_data_export
  endpoint:
    path: /api/v1/export/public
    method: GET
    data_selector: data
- name: standard_export
  endpoint:
    path: /api/v1/export/standard
    method: GET
    data_selector: data
- name: full_export_without_member_consent
  endpoint:
    path: /api/v1/export/full
    method: GET
    data_selector: data
- name: compliance_export
  endpoint:
    path: /api/v1/export/compliance
    method: GET
    data_selector: data
- name: default_user_settings
  endpoint:
    path: /api/default_user_settings
    method: GET
    data_selector: settings
    params: {}
- name: organization_language
  endpoint:
    path: /api/organization_language
    method: GET
    data_selector: language
    params: {}
- name: custom_profile_fields
  endpoint:
    path: /api/v1/custom_profile_fields
    method: GET
    data_selector: fields
- name: wildcard_mentions
  endpoint:
    path: /api/restrict_wildcard_mentions
    method: POST
    data_selector: result
    params: {}
- name: resolve_topics_permission
  endpoint:
    path: /help/restrict-resolving-topics
    method: GET
    data_selector: permissions
    params: {}
- name: restrict_sign_ups_to_domains
  endpoint:
    path: /api/restrict_sign_ups_to_domains
    method: POST
    data_selector: domains
    params: {}
- name: dont_allow_disposable_domains
  endpoint:
    path: /api/dont_allow_disposable_domains
    method: POST
    data_selector: disposable_domains
    params: {}
- name: allow_all_email_domains
  endpoint:
    path: /api/allow_all_email_domains
    method: POST
    data_selector: all_domains
    params: {}
- name: restrict_name_changes
  endpoint:
    path: /api/restrict_name_changes
    method: POST
    data_selector: result
    params: {}
- name: restrict_email_changes
  endpoint:
    path: /api/restrict_email_changes
    method: POST
    data_selector: result
    params: {}
- name: require_unique_names
  endpoint:
    path: /api/require_unique_names
    method: POST
    data_selector: result
    params: {}
- name: organization_settings
  endpoint:
    path: /help/organization-settings
    method: GET
    data_selector: settings
    params: {}
- name: SAML Authentication
  endpoint:
    path: /complete/saml/
    method: POST
- name: organization_permissions
  endpoint:
    path: /api/organization_permissions
    method: GET
    data_selector: permissions
    params: {}
- name: SCIM provisioning
  endpoint:
    path: /api/v1/scim
    method: POST
    data_selector: user_accounts
- name: organization_language
  endpoint:
    path: /api/v1/organization_language
    method: POST
    data_selector: result
    params: {}
- name: bulk_add_emoji
  endpoint:
    path: /api/upload-custom-emoji
    method: POST
    data_selector: emoji
    params: {}
- name: user
  endpoint:
    path: /scim/v2/Users
    method: POST
    data_selector: User
    params: {}
- name: group
  endpoint:
    path: /scim/v2/Groups
    method: POST
    data_selector: Group
    params: {}
- name: call_provider
  endpoint:
    path: /api/v1/call_provider
    method: POST
    data_selector: provider
    params: {}
- name: user_management
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: linkifier
  endpoint:
    path: /api/v1/linkifiers
    method: POST
    data_selector: linkifier
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: organization_settings
  endpoint:
    path: /api/v1/organization/settings
    method: GET
    data_selector: settings
    params: {}
- name: user_groups
  endpoint:
    path: /v1/user_groups
    method: GET
    data_selector: groups
    params: {}
- name: automated_notices
  endpoint:
    path: /api/v1/automated_notices
    method: GET
    data_selector: notices
    params: {}
- name: organization_statistics
  endpoint:
    path: /api/v1/usage_statistics
    method: GET
    data_selector: usage_statistics
    params: {}
- name: general_chat_channels
  endpoint:
    path: /api/v1/general_chat_channels
    method: GET
    data_selector: channels
- name: bot
  endpoint:
    path: /api/bots
    method: GET
    data_selector: bots
- name: channel_folders
  endpoint:
    path: /api/v1/channel_folders
    method: GET
    data_selector: channel_folders
    params: {}
- name: channel_permissions
  endpoint:
    path: /api/v1/channel_permissions
    method: GET
    data_selector: permissions
    params: {}
- name: incoming_webhook
  endpoint:
    path: /api/incoming-webhooks-overview
    method: POST
- name: send_message
  endpoint:
    path: /api/send-message
    method: POST
- name: get_events
  endpoint:
    path: /api/get-events
    method: GET
- name: channel_posting_policy
  endpoint:
    path: /help/channel-posting-policy
    method: GET
    data_selector: policy
- name: manage_bot
  endpoint:
    path: /api/bots/manage
    method: POST
- name: channels
  endpoint:
    path: /api/v1/channels
    method: GET
    data_selector: channels
    params: {}
- name: bots
  endpoint:
    path: /api/bots
    method: GET
    data_selector: bots
    params: {}
- name: channel_permissions
  endpoint:
    path: /api/v1/channel_permissions
    method: GET
    data_selector: permissions
- name: channel_subscription_permissions
  endpoint:
    path: /api/v1/channel_subscription_permissions
    method: GET
    data_selector: permissions
- name: incoming_webhook_bots
  endpoint:
    path: /api/incoming-webhooks-overview
    method: GET
- name: outgoing_webhook_bots
  endpoint:
    path: /api/outgoing-webhooks
    method: GET
- name: generic_bots
  endpoint:
    path: /api/non-webhook-integrations
    method: GET
- name: channel_permissions
  endpoint:
    path: /api/v1/channel_permissions
    method: GET
    data_selector: permissions
- name: user_roles
  endpoint:
    path: /api/v1/user_roles
    method: GET
    data_selector: roles
- name: user_groups
  endpoint:
    path: /api/v1/user_groups
    method: GET
    data_selector: groups
- name: bots
  endpoint:
    path: /api/bots
    method: GET
    data_selector: bots
    params: {}
- name: channel_settings
  endpoint:
    path: /api/v1/channels/settings
    method: GET
- name: bots
  endpoint:
    path: /api/bots
    method: GET
    data_selector: bots
    params: {}
- name: subscribe_users
  endpoint:
    path: /api/v1/subscribers
    method: POST
    data_selector: result
    params: {}
- name: unsubscribe_user
  endpoint:
    path: /api/v1/unsubscribe
    method: POST
- name: default_channels
  endpoint:
    path: /api/v1/default_channels
    method: GET
    data_selector: channels
- name: channel
  endpoint:
    path: /api/v1/channels
    method: GET
    data_selector: channels
    params: {}
- name: channel_description
  endpoint:
    path: /api/v1/channels
    method: GET
    data_selector: channels
    params: {}
- name: link_to_zulip
  endpoint:
    path: /link-to-zulip-website
    method: GET
- name: channel_permissions
  endpoint:
    path: /help/channel-permissions
    method: GET
- name: channel_settings
  endpoint:
    path: /help/channel-settings
    method: GET
- name: archive_channel
  endpoint:
    path: /archive/channel
    method: POST
    data_selector: result
- name: view_archived_channels
  endpoint:
    path: /view/archived_channels
    method: GET
    data_selector: result
- name: hide_content_in_archived_channel
  endpoint:
    path: /hide/content/archived_channel
    method: POST
    data_selector: result
- name: messages
  endpoint:
    path: /v1/messages
    method: GET
    data_selector: messages
    params:
      incremental: timestamp
- name: streams
  endpoint:
    path: /v1/streams
    method: GET
    data_selector: streams
    params: {}
- name: organization_permissions
  endpoint:
    path: /api/v1/organization_permissions
    method: GET
- name: user_roles
  endpoint:
    path: /api/v1/user_roles
    method: GET
- name: user_groups
  endpoint:
    path: /api/v1/user_groups
    method: GET
- name: channel_permissions
  endpoint:
    path: /api/v1/channel_permissions
    method: GET
- name: incoming_webhook
  endpoint:
    path: /api/v1/external/INTEGRATION_NAME
    method: POST
    data_selector: message
    params:
      api_key: API_KEY
- name: hello_world
  endpoint:
    path: /api/v1/external/helloworld
    method: POST
    data_selector: payload
- name: deactivate_user_group
  endpoint:
    path: /deactivate_user_group
    method: POST
    data_selector: result
- name: view_deactivated_user_groups
  endpoint:
    path: /view_deactivated_user_groups
    method: GET
    data_selector: result
- name: reactivate_user_group
  endpoint:
    path: /reactivate_user_group
    method: POST
    data_selector: result
- name: user_roles
  endpoint:
    path: /help/user-roles
    method: GET
    data_selector: roles
    params: {}
- name: helloworld
  endpoint:
    path: /api/v1/external/helloworld
    method: POST
    data_selector: result
    params:
      api_key: <api_key>
- name: helloworld
  endpoint:
    path: /api/v1/external/helloworld
    method: POST
    data_selector: payload
- name: helloworld
  endpoint:
    path: /api/v1/external/helloworld
    method: POST
    data_selector: result
    params: {}
- name: direct_message_permissions
  endpoint:
    path: /api/v1/direct_message_permissions
    method: GET
    data_selector: permissions
    params: {}
- name: incoming_webhook
  endpoint:
    path: /external/helloworld
    method: POST
    data_selector: payload
- name: wildcard_mentions
  endpoint:
    path: /api/wildcard_mentions
    method: POST
    data_selector: result
    params: {}
- name: helloworld
  endpoint:
    path: /api/v1/external/helloworld
    method: POST
    data_selector: result
    params:
      api_key: <api_key>
- name: message_editing_permissions
  endpoint:
    path: /api/v1/message/editing
    method: GET
- name: message_deletion_permissions
  endpoint:
    path: /api/v1/message/deletion
    method: GET
- name: channel_deletion_permissions
  endpoint:
    path: /api/v1/channel/deletion
    method: GET
- name: message_edit_history_access
  endpoint:
    path: /api/v1/messages/edit_history
    method: GET
    data_selector: messages
    params: {}
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
    data_selector: messages
- name: users
  endpoint:
    path: /api/get-users
    method: GET
    data_selector: users
- name: channels
  endpoint:
    path: /api/get-subscriptions
    method: GET
    data_selector: subscriptions
- name: restrict_name_changes
  endpoint:
    path: /api/restrict_name_changes
    method: POST
    data_selector: result
- name: restrict_email_changes
  endpoint:
    path: /api/restrict_email_changes
    method: POST
    data_selector: result
- name: require_unique_names
  endpoint:
    path: /api/require_unique_names
    method: POST
    data_selector: result
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
    data_selector: messages
    params: {}
- name: users
  endpoint:
    path: /api/get-users
    method: GET
    data_selector: users
    params: {}
- name: organization_permissions
  endpoint:
    path: /api/v1/organization/permissions
    method: GET
    data_selector: permissions
    params: {}
- name: organization_language
  endpoint:
    path: /api/organization_language
    method: POST
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
    data_selector: messages
- name: users
  endpoint:
    path: /api/get-users
    method: GET
    data_selector: members
- name: bulk_add_emoji
  endpoint:
    path: /api/upload-custom-emoji
    method: POST
    data_selector: emoji
    params: {}
- name: bot
  endpoint:
    path: /api/bots
    method: GET
    data_selector: bots
    params: {}
- name: call_provider
  endpoint:
    path: /integrations/doc/call-provider
    method: POST
- name: webhook
  endpoint:
    path: /outgoing-webhooks
    method: POST
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
- name: users
  endpoint:
    path: /api/get-users
    method: GET
- name: channels
  endpoint:
    path: /api/get-streams
    method: GET
- name: linkifier
  endpoint:
    path: /linkifiers
    method: GET
    data_selector: linkifiers
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
    data_selector: messages
    params: {}
- name: users
  endpoint:
    path: /api/get-users
    method: GET
    data_selector: users
    params: {}
- name: bots
  endpoint:
    path: /api/bots
    method: GET
- name: users
  endpoint:
    path: /api/users
    method: GET
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
- name: users
  endpoint:
    path: /api/get-users
    method: GET
- name: users
  endpoint:
    path: /api/get-users
    method: GET
    data_selector: users
    params: {}
- name: user_by_email
  endpoint:
    path: /api/get-user-by-email
    method: GET
    data_selector: user
    params: {}
- name: own_user
  endpoint:
    path: /api/get-own-user
    method: GET
    data_selector: user
    params: {}
- name: events
  endpoint:
    path: /api/get-events
    method: GET
    data_selector: events
    params: {}
- name: register_queue
  endpoint:
    path: /api/register-queue
    method: POST
    data_selector: registration
    params: {}
- name: hide_message_content_in_emails
  endpoint:
    path: /help/email-notifications#hide-message-content
    method: GET
    data_selector: notifications security
- name: group-setting values
  endpoint:
    path: /api/group-setting-values
    method: GET
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
    data_selector: messages
- name: users
  endpoint:
    path: /api/get-users
    method: GET
    data_selector: users
- name: weekly_digest_emails
  endpoint:
    path: /digest/
    method: GET
    data_selector: emails
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
- name: users
  endpoint:
    path: /api/get-users
    method: GET
- name: custom_welcome_message
  endpoint:
    path: /api/v1/welcome_message
    method: POST
    data_selector: result
- name: create_channel
  endpoint:
    path: /api/create-channel
    method: POST
- name: send_invites
  endpoint:
    path: /api/send-invites
    method: POST
- name: register_queue
  endpoint:
    path: /api/register-queue
    method: POST
- name: get_events
  endpoint:
    path: /api/get-events
    method: GET
- name: get_users
  endpoint:
    path: /api/get-users
    method: GET
- name: create_message_reminder
  endpoint:
    path: /api/create-message-reminder
    method: POST
- name: set_typing_status
  endpoint:
    path: /api/set-typing-status
    method: POST
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
- name: events
  endpoint:
    path: /api/get-events
    method: GET
- name: register
  endpoint:
    path: /api/register-queue
    method: POST
- name: streams
  endpoint:
    path: /api/get-streams
    method: GET
- name: users
  endpoint:
    path: /api/get-users
    method: GET
- name: bot
  endpoint:
    path: /api/bots
    method: POST
    data_selector: bots
    params: {}
- name: bots
  endpoint:
    path: /api/bots
    method: GET
    data_selector: bots
    params: {}
- name: integrations
  endpoint:
    path: /api/integrations
    method: GET
    data_selector: integrations
    params: {}
- name: subscriptions
  endpoint:
    path: /users/me/subscriptions
    method: GET
    data_selector: subscriptions
    params: {}
- name: streams
  endpoint:
    path: /streams
    method: GET
    data_selector: streams
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params: {}
- name: register
  endpoint:
    path: /register
    method: POST
    data_selector: register
    params: {}
- name: consents
  endpoint:
    path: /export/realm/consents
    method: GET
    data_selector: records
- name: user_groups
  endpoint:
    path: /get-user-groups
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /get-events
    method: GET
    data_selector: records
- name: register
  endpoint:
    path: /register
    method: POST
    data_selector: records
- name: user_uploads
  endpoint:
    path: /user_uploads
    method: POST
    data_selector: records
- name: bot
  endpoint:
    path: /api/bots
    method: GET
    data_selector: bots
    params: {}
- name: incoming_webhook_bots
  endpoint:
    path: /api/incoming-webhooks-overview
    method: GET
    data_selector: bots
- name: generic_bots
  endpoint:
    path: /api/outgoing-webhooks
    method: GET
    data_selector: bots
- name: outgoing_webhook_bots
  endpoint:
    path: /api/non-webhook-integrations
    method: GET
    data_selector: integrations
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
- name: events
  endpoint:
    path: /api/get-events
    method: GET
- name: register
  endpoint:
    path: /api/register-queue
    method: POST
- name: user_settings_defaults
  endpoint:
    path: /api/update-realm-user-settings-defaults
    method: PATCH
- name: bots
  endpoint:
    path: /api/bots
    method: GET
    data_selector: bots
    params: {}
- name: bots
  endpoint:
    path: /api/bots
    method: GET
    data_selector: bots
    params: {}
- name: events
  endpoint:
    path: /api/get-events
    method: GET
- name: register
  endpoint:
    path: /api/register-queue
    method: POST
- name: user_groups
  endpoint:
    path: /api/get-user-groups
    method: GET
- name: create_user_group
  endpoint:
    path: /api/create-user-group
    method: POST
- name: update_user_group
  endpoint:
    path: /api/update-user-group
    method: PATCH
- name: deactivate_custom_emoji
  endpoint:
    path: /api/deactivate-custom-emoji
    method: DELETE
- name: update_realm_user_settings_defaults
  endpoint:
    path: /api/update-realm-user-settings-defaults
    method: PATCH
- name: update_settings
  endpoint:
    path: /api/update-settings
    method: PATCH
- name: mute_user
  endpoint:
    path: /api/mute-user
    method: POST
- name: unmute_user
  endpoint:
    path: /api/unmute-user
    method: DELETE
- name: zulip_server_version
  endpoint:
    path: /api/v1/server_version
    method: GET
    data_selector: version
- name: zulip_desktop_app_version
  endpoint:
    path: /api/v1/desktop_app_version
    method: GET
    data_selector: version
- name: zulip_mobile_app_version
  endpoint:
    path: /api/v1/mobile_app_version
    method: GET
    data_selector: version
- name: scheduled_messages
  endpoint:
    path: /api/get-scheduled-messages
    method: GET
- name: events
  endpoint:
    path: /api/get-events
    method: GET
- name: register
  endpoint:
    path: /api/register-queue
    method: POST
- name: invites
  endpoint:
    path: /api/send-invites
    method: POST
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
- name: users
  endpoint:
    path: /api/get-users
    method: GET
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
    data_selector: messages
    params: {}
- name: update_message_flags
  endpoint:
    path: /api/update-message-flags
    method: POST
    data_selector: result
    params: {}
- name: delete_topic
  endpoint:
    path: /api/delete-topic
    method: POST
    data_selector: result
    params: {}
- name: mark_all_as_read
  endpoint:
    path: /api/mark-all-as-read
    method: POST
    data_selector: result
    params: {}
- name: billing_management
  endpoint:
    path: /billing
    method: GET
    data_selector: billing_info
    params: {}
- name: events
  endpoint:
    path: /api/get-events
    method: GET
    data_selector: events
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
    data_selector: messages
- name: register
  endpoint:
    path: /api/register-queue
    method: POST
    data_selector: realm
- name: server_settings
  endpoint:
    path: /api/get-server-settings
    method: GET
    data_selector: server_settings
- name: users
  endpoint:
    path: /api/get-users
    method: GET
    data_selector: users
- name: users
  endpoint:
    path: /api/get-users
    method: GET
    data_selector: members
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
    data_selector: messages
- name: events
  endpoint:
    path: /api/get-events
    method: GET
    data_selector: events
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: attachments
  endpoint:
    path: /attachments
    method: GET
    data_selector: attachments
- name: invites
  endpoint:
    path: /invites
    method: GET
    data_selector: invites
- name: register
  endpoint:
    path: /register
    method: POST
    data_selector: registration
- name: send_message
  endpoint:
    path: /api/v1/messages
    method: POST
    data_selector: result
    params: {}
- name: incoming_webhook
  endpoint:
    path: /api/v1/external/INTEGRATION_NAME
    method: POST
    data_selector: notification
    params:
      api_key: API_KEY
- name: user_uploads
  endpoint:
    path: /api/v1/user_uploads
    method: POST
    data_selector: url
- name: incoming_webhook
  endpoint:
    path: /api/v1/external/helloworld
    method: POST
    data_selector: payload
- name: helloworld
  endpoint:
    path: /api/v1/external/helloworld
    method: POST
    data_selector: result
    params: {}
- name: edit_message
  endpoint:
    path: /api/v1/messages/{message_id}
    method: PATCH
    data_selector: result
    params:
      content: New content
      topic: Castle
      propagate_mode: change_all
      send_notification_to_old_thread: true
      send_notification_to_new_thread: true
      prev_content_sha256: 6ae8a75555209fd6c44157c0aed8016e763ff435a19cf186f76863140143ff72
- name: HelloWorld
  endpoint:
    path: /api/v1/external/helloworld
    method: POST
    data_selector: payload
- name: detached_uploads
  endpoint:
    path: /api/upload-file
    method: GET
    data_selector: detached_uploads
    params: {}
- name: helloworld
  endpoint:
    path: /api/v1/external/helloworld
    method: POST
    data_selector: msg
    params:
      api_key: <api_key>
- name: delete_message
  endpoint:
    path: /api/v1/messages/{message_id}
    method: DELETE
    data_selector: result
    params: {}
- name: incoming_webhook
  endpoint:
    path: /api/v1/external/helloworld
    method: POST
    data_selector: payload
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: helloworld
  endpoint:
    path: /api/v1/external/helloworld
    method: POST
    data_selector: result
    params:
      api_key: <api_key>
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
    data_selector: messages
- name: users
  endpoint:
    path: /api/get-users
    method: GET
    data_selector: users
- name: bots
  endpoint:
    path: /api/bots
    method: GET
    data_selector: bots
    params: {}
- name: cache_flush
  endpoint:
    path: /cache/flush
    method: POST
- name: cache_flush_one
  endpoint:
    path: /cache/flush_one
    method: POST
- name: outgoing_webhook
  endpoint:
    path: /api/outgoing-webhooks
    method: POST
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
- name: users
  endpoint:
    path: /api/get-users
    method: GET
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
- name: users
  endpoint:
    path: /api/get-users
    method: GET
- name: users
  endpoint:
    path: /api/get-users
    method: GET
    data_selector: users
- name: user_by_email
  endpoint:
    path: /api/get-user-by-email
    method: GET
    data_selector: user
- name: own_user
  endpoint:
    path: /api/get-own-user
    method: GET
    data_selector: user
- name: events
  endpoint:
    path: /api/get-events
    method: GET
    data_selector: events
- name: register_queue
  endpoint:
    path: /api/register-queue
    method: POST
    data_selector: user_data
- name: render_message
  endpoint:
    path: /api/render-message
    method: POST
    data_selector: html
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
- name: users
  endpoint:
    path: /api/get-users
    method: GET
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
    data_selector: messages
- name: users
  endpoint:
    path: /api/get-users
    method: GET
    data_selector: users
- name: mobile_push_test_notification
  endpoint:
    path: /api/e2ee-test-notify
    method: POST
- name: register
  endpoint:
    path: /api/register-queue
    method: POST
- name: events
  endpoint:
    path: /api/get-events
    method: GET
- name: create_channel
  endpoint:
    path: /api/create-channel
    method: POST
- name: send_invites
  endpoint:
    path: /api/send-invites
    method: POST
- name: create_invite_link
  endpoint:
    path: /api/create-invite-link
    method: POST
- name: update_channel_folder
  endpoint:
    path: /api/update-channel-folder
    method: PATCH
- name: get_channel_folders
  endpoint:
    path: /api/get-channel-folders
    method: GET
- name: create_reminder
  endpoint:
    path: /api/create-message-reminder
    method: POST
- name: get_reminders
  endpoint:
    path: /api/get-reminders
    method: GET
- name: delete_reminder
  endpoint:
    path: /api/delete-reminder
    method: DELETE
- name: update_status_for_user
  endpoint:
    path: /api/update-status-for-user
    method: POST
- name: get_users
  endpoint:
    path: /api/get-users
    method: GET
- name: set_typing_status
  endpoint:
    path: /api/set-typing-status
    method: POST
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
- name: events
  endpoint:
    path: /api/get-events
    method: GET
- name: register
  endpoint:
    path: /api/register-queue
    method: POST
- name: subscriptions
  endpoint:
    path: /users/me/subscriptions
    method: GET
    data_selector: subscriptions
    params: {}
- name: streams
  endpoint:
    path: /streams
    method: GET
    data_selector: streams
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params: {}
- name: register
  endpoint:
    path: /register
    method: POST
    data_selector: registration
    params: {}
- name: consents
  endpoint:
    path: /export/realm/consents
    method: GET
- name: tus_upload
  endpoint:
    path: /api/v1/tus
    method: POST
- name: register
  endpoint:
    path: /register
    method: POST
- name: events
  endpoint:
    path: /events
    method: GET
- name: user_groups
  endpoint:
    path: /user_groups
    method: GET
- name: deactivate_user_group
  endpoint:
    path: /user_groups/{user_group_id}/deactivate
    method: POST
- name: subscribe
  endpoint:
    path: /users/{user_id}/subscription
    method: POST
- name: presence
  endpoint:
    path: /users/me/presence
    method: POST
- name: upload_file
  endpoint:
    path: /user_uploads
    method: POST
- name: update_message
  endpoint:
    path: /messages/{message_id}
    method: PATCH
- name: create_user_group
  endpoint:
    path: /user_groups/create
    method: POST
- name: update_user_group
  endpoint:
    path: /user_groups/{user_group_id}
    method: PATCH
- name: tutorial_status
  endpoint:
    path: /users/me/tutorial_status
    method: POST
- name: register
  endpoint:
    path: /api/register
    method: POST
- name: events
  endpoint:
    path: /api/get-events
    method: GET
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
- name: user_uploads
  endpoint:
    path: /api/upload-file
    method: POST
- name: invites
  endpoint:
    path: /api/send-invites
    method: POST
- name: user_groups
  endpoint:
    path: /api/get-user-groups
    method: GET
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: messages
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
    params: {}
- name: events
  endpoint:
    path: /api/get-events
    method: GET
- name: register
  endpoint:
    path: /api/register-queue
    method: POST
- name: user_groups
  endpoint:
    path: /api/get-user-groups
    method: GET
- name: create_user_group
  endpoint:
    path: /api/create-user-group
    method: POST
- name: update_user_group
  endpoint:
    path: /api/update-user-group
    method: PATCH
- name: deactivate_custom_emoji
  endpoint:
    path: /api/deactivate-custom-emoji
    method: DELETE
- name: update_realm_user_settings_defaults
  endpoint:
    path: /api/update-realm-user-settings-defaults
    method: PATCH
- name: update_settings
  endpoint:
    path: /api/update-settings
    method: PATCH
- name: mute_user
  endpoint:
    path: /api/mute-user
    method: POST
- name: unmute_user
  endpoint:
    path: /api/unmute-user
    method: DELETE
- name: scheduled_messages
  endpoint:
    path: /api/get-scheduled-messages
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /api/get-events
    method: GET
    data_selector: records
- name: register
  endpoint:
    path: /api/register-queue
    method: POST
    data_selector: records
- name: invites
  endpoint:
    path: /api/send-invites
    method: POST
    data_selector: records
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
    data_selector: messages
- name: streams
  endpoint:
    path: /api/get-streams
    method: GET
    data_selector: streams
- name: events
  endpoint:
    path: /api/get-events
    method: GET
    data_selector: events
- name: user_groups
  endpoint:
    path: /api/get-user-groups
    method: GET
    data_selector: user_groups
- name: events
  endpoint:
    path: /api/get-events
    method: GET
    data_selector: events
- name: messages
  endpoint:
    path: /api/get-messages
    method: GET
    data_selector: messages
- name: register
  endpoint:
    path: /api/register-queue
    method: POST
    data_selector: realm
- name: server_settings
  endpoint:
    path: /api/get-server-settings
    method: GET
    data_selector: server_settings
- name: users
  endpoint:
    path: /api/get-users
    method: GET
    data_selector: users
- name: users
  endpoint:
    path: /api/get-users
    method: GET
    data_selector: members
- name: events
  endpoint:
    path: /api/get-events
    method: GET
    data_selector: events
- name: send_message
  endpoint:
    path: /api/v1/messages
    method: POST
    data_selector: result
    params: {}
- name: upload_file
  endpoint:
    path: /api/v1/user_uploads
    method: POST
    data_selector: url
- name: edit_message
  endpoint:
    path: /api/v1/messages/{message_id}
    method: PATCH
    data_selector: result
    params: {}
- name: detached_uploads
  endpoint:
    path: /api/upload-file
    method: GET
    data_selector: detached_uploads
- name: delete_message
  endpoint:
    path: /api/v1/messages/{message_id}
    method: DELETE
    data_selector: result
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: messages
notes:
- Long-lived clients should respect the event_queue_longpoll_timeout_seconds property
  returned by POST /register.
- Some endpoints will never return archived channels unless the client declares explicit
  support for them via the archived_channels client capability.
- New in Zulip 11.0 (feature level 404), the 'empty_topic_only' option was added.
- New in Zulip 8.0 (feature level 199). Previously, this statistic was available only
  in subscription objects.
- Some events may not be sent to users who do not have access to certain channels.
- Uses OAuth2 with refresh token — requires setup of connected app in Zulip
- Clients cannot rely on receiving the realm deactivation event due to potential authentication
  failure.
- New in Zulip 10.0 (feature level 367).
- Prior to Zulip 10.0 (feature level 303), this list would include deactivated users
  who had the permission before being deactivated.
- New features and changes introduced in Zulip 5.0 (feature level 95).
- Some events have specific structures and parameters as detailed in the documentation.
- New features introduced in Zulip 11.0
- Uses OAuth2 with refresh token — requires setup of connected app in api
- New in Zulip 5.0 (feature level 89)
- Changes in event types for user settings and realm user events in Zulip 8.0
- Users can move freely between Zulip Cloud hosting and self-hosting.
- Clients are responsible for updating subscriber_count using peer_add and peer_remove
  events.
- Some endpoints will never return archived channels unless the client declares explicit
  support.
- Uses OAuth2 for authentication.
- 100% open-source software.
- Enterprise-grade security and compliance.
- Zulip requires CSRF tokens in all interactions with the web API to prevent CSRF
  attacks.
- Zulip supports GDPR and HIPAA compliance.
- Prior to Zulip 11.0 (feature level 378), this event was sent to all the users who
  could see the channel when it was unarchived.
- Prior to Zulip 8.0 (feature level 220), this event was incorrectly not sent to guest
  users a web-public channel was created.
- Zulip is everything Slack is, but it's smarter and more powerful.
- The average number of messages sent to the channel per week is estimated based on
  recent weeks, rounded to the nearest integer.
- If `null`, no information is provided on the average traffic.
- Requires OAuth setup via Zulip's developer documentation
- Zulip Cloud Standard is free for academic research.
- Zulip Cloud Standard is free for academic research!
- Requires OAuth2 authentication
- Some endpoints may have rate limits
- Zulip is free for academic conferences and most non-profit events.
- Zulip Cloud Standard is free for academic conferences and most other non-profit
  events.
- New in Zulip 10.0 (feature level 351). Previously, typing notifications were not
  available when editing messages.
- Zulip is 100% open-source software, with no 'open core' catch.
- Free for open-source projects!
- Zulip is 100% open-source software.
- Some objects may return nulls in deeply nested fields
- Changes in Zulip 10.0 (feature level 304) added export_type parameter.
- 'Deprecated realm_bot op: remove event since Zulip 8.0 (feature level 222).'
- Clients must implement a random delay strategy to avoid thundering herd effects.
- Requires setup of OAuth2 for authentication
- New features and permissions introduced in Zulip 10.0.
- Requires setup via Zulip's API documentation.
- Ensure your API key is kept secure.
- Mastering Zulip can take a bit of time, but once you get the hang of it, you’ll
  never want to use a different team chat app!
- Keeping up with everything happening in the Zulip project is both difficult and
  rarely a useful goal. To make the best use of your time, we highly recommend that
  you unsubscribe from channels that you aren’t interested in, mute channels that
  are only of occasional interest, and make use of Zulip’s skimming features, like
  Recent conversations, to spend your time on topics that interest you.
- Users and administrators of Zulip organizations stop by to ask questions, offer
  feedback, and participate in product design discussions.
- For support requests regarding your Zulip Cloud organization, you can request interactive
  chat support in the Zulip development community, or email Zulip support.
- Uses OAuth2 with refresh token
- Requires OAuth2 authentication setup.
- Rate limits may apply based on user tiers.
- 100% open-source, auditable codebase
- Zulip supports integrated single sign-on with Google, GitHub, SAML (including Okta),
  Entra ID (AzureAD), and Active Directory/LDAP.
- Zulip API requires authentication to access endpoints.
- Zulip offers a complete team chat solution with various integrations.
- The platform is designed for educational purposes and includes features for managing
  large classes.
- Zulip is built with privacy and security in mind. We will never sell data or ads.
- Zulip is 100% open source.
- Zulip is an open-source team chat application designed for seamless remote and hybrid
  work
- Zulip sponsors free hosting for organizations.
- Zulip is free for academic research.
- Zulip is 100% free and open-source software.
- Zulip is a self-hosted solution, offering the same functionality as the cloud version.
- Zulip uses topic-based threading for communication.
- Zulip is 100% open-source software
- Zulip supports mirroring channels with IRC, Slack, and Matrix
- Zulip uses OAuth2 for authentication.
- Zulip's threading model was transformative.
- Zulip allows me to build the culture I want.
- Integration requires OAuth2 setup with Zulip.
- Zulip is at the core of our business
- The Zulip Cloud hosting has been bulletproof — we haven’t had any down time
- Uses OAuth2 with refresh token — requires setup of connected app in Zulip.
- Some endpoints may have rate limits.
- Zulip has been extremely stable and requires no maintenance beyond installing updates.
- Some communities may have specific access permissions.
- 'If you are interested in Large Language Models and Conversational AI application
  to biomedical research and databases, please join the #biochatter channel.'
- API requires OAuth2 authentication.
- Zulip brings health back to communities.
- Public channels in the community receive thousands of messages a week.
- Zulip's threading model provides a two-layer organizational hierarchy.
- Don’t try to read everything happening in the Zulip project.
- To make the best use of your time, unsubscribe from channels that you aren’t interested
  in.
- Use Zulip’s skimming features, like Recent conversations, to spend your time on
  topics that interest you.
- Zulip provides the continuity that lets us maintain our culture over time.
- Zulip allows public access to channels.
- The UX has improved for new users.
- Don’t try to read everything
- New features are tested here
- Response time for support requests is usually within 1-3 business days for free
  customers.
- Phone support is available for Enterprise customers upon request.
- Efficient multi-tenant hosting available.
- Slack does not export workspace settings, so you will need to configure the settings
  for your Zulip organization.
- Zulip offers a variety of authentication methods, including email/password, Google,
  GitHub, GitLab, Apple, LDAP and SAML.
- You can start by reading about how Zulip’s unique topic-based threading combines
  the best of email and chat to make remote work productive and delightful.
- Zulip offers a comprehensive toolkit for moderating communities.
- Requires OAuth2 setup for authorization.
- By default, Zulip organizations require an invitation to join.
- If your company uses single sign-on (SSO) authentication for Zulip, these instructions
  may not apply.
- Zulip API requires OAuth2 authentication for access.
- Zulip is an open-source team chat application designed for seamless remote and hybrid
  work.
- Automatically addresses messages to the conversation thread being read
- No need to repeat previous messages when replying
- Zulip sponsors free Zulip Cloud Standard hosting for hundreds of worthy organizations.
- Zulip has invested into making it as easy as possible to self-host its 100% open-source
  software.
- Use emoji reactions for lightweight interactions.
- Share files or images with drag-and-drop uploads.
- You can only import a workspace as a new Zulip organization.
- Your imported message history cannot be added into an existing Zulip organization.
- Zulip is designed for asynchronous conversations.
- This feature is only available to organization owners and administrators.
- Zulip Cloud customers who wish to use this feature must upgrade to Zulip Cloud Standard
  or Zulip Cloud Plus.
- Zulip offers a Slack-compatible interface for integrations.
- You will only see the Create channel button if you have permission to create channels.
- Zulip was quite easy to set up, and worked instantly. 1000 people — no problem.
- Customize settings for new users to get them off to a great start.
- Integrates directly with dozens of products.
- Custom incoming webhook integrations can be created using the API.
- Zulip uses a topic-based threading model for organized conversations.
- New employees adapt easily to Zulip's organized conversations.
- By default, everyone can change their name in Zulip.
- Organization administrators can change anyone’s name, and prevent users from changing
  their names.
- Zulip Standard plan was free for all educators from Spring 2020 through Spring 2021.
- If you do not see the change your email icon, you do not have permission to change
  your email address.
- Feature allows control over who can view email addresses in the organization
- The API supports topic-based organization.
- Zulip brings health back to these communities.
- By default, Zulip allows logging in via email/password as well as various social
  authentication providers like Google, GitHub, GitLab, and Apple.
- Organization administrators can add other authentication methods, including the
  SAML and LDAP integrations, or disable any of the methods above.
- Zulip lets us have focused conversations at scale.
- Utilizes threading for organized discussions.
- Logging out doesn’t affect any other organizations you may be logged in to.
- Resetting the API key for a Zulip account will immediately log you out of that account
  on all mobile devices.
- Zulip provides a welcoming environment for all community members.
- You can log in to multiple Zulip organizations by opening multiple tabs, and logging
  into one Zulip organization in each tab.
- Users can log in with GitHub.
- API documentation available for writing integrations or bots using the Zulip API.
- Click on the gear icon in the upper right corner of the web or desktop app to access
  settings.
- Every Zulip user has an API key, which can be used to do essentially everything
  that you can do when you’re logged in.
- Integrations should use a bot’s API key rather than your own whenever possible.
- If you are the only owner in the organization, you cannot deactivate your account.
- Zulip offers a range of font size options, from 12 to 20, to make the UI feel comfortable
  on any screen.
- Zulip supports topic-based threading for better organization of conversations.
- Zulip lets you adjust line spacing in the web and desktop apps, to make the Zulip
  interface feel most comfortable for you.
- Use the ellipsis in the compose box to configure send message keys.
- Toggle `Enter` sends when composing a message in Personal settings.
- 'No setup or maintenance overhead: Zulip Cloud is a simple SaaS solution, so you
  don’t need to set up your own server. It only take a minute to sign up.'
- 'Always up to date: Zulip Cloud is updated every couple of weeks with the latest
  version of Zulip.'
- Public access option allows channels to be web-public.
- Requires setup of connected app in Zulip
- Zulip can display times in either 12-hour or 24-hour format.
- Zulip works great as the communication hub for your class.
- Organization owners can also allow anyone to join without an invitation, and/or
  restrict user email addresses to a company domain.
- By default, Zulip limits the width of the center message pane, because it’s easier
  and faster to read paragraphs that don’t have long lines.
- Rather than kicking off a group direct message, consider starting the conversation
  in a new topic to make it easier to browse later on.
- Many chat apps have prominent 'reply' or 'reply in thread' buttons.
- If you're reading messages in a channel feed, navigate to the conversation view
  by tapping the message recipient bar of the conversation you want to reply to.
- The organization name appears in the title of your Zulip browser tab or Desktop
  app.
- You will only see the Create user group button if you have permission to create
  user groups.
- Some objects like Contact may return nulls in deeply nested fields
- User groups offer a flexible way to manage permissions in your organization.
- Silent mentions start with @_ instead of @.
- Requires users to authenticate via OAuth2.
- Ensure correct scopes are set for the API.
- Uses OAuth2 authentication
- You can save snippets of message content, and quickly insert them into the message
  you’re composing.
- Organization administrators can change anyone’s name.
- Zulip Cloud Standard and Zulip Cloud Plus plans include 5 GB of file storage per
  user.
- Each uploaded file can be up to 1 GB.
- Zulip Cloud Free plan includes a total of 5 GB of file storage. Each uploaded file
  can be up to 10 MB.
- Profile picture can be uploaded or reverted to Gravatar default.
- By default, the GIPHY integration is configured to only retrieve GIFs that GIPHY
  categorizes as rated G (General audience).
- Zulip provides a comprehensive Markdown support for text formatting.
- Zulip supports Markdown formatting for numbered lists.
- Resetting your password will log you out of all browsers and desktop apps.
- You can log in to multiple Zulip organizations by opening multiple tabs.
- Zulip provides a REST API for various functionalities.
- Follow the instructions for joining a Zulip organization.
- Review your settings after importing.
- Requires OAuth2 setup in Zulip.
- Default is Automatic for desktop and web apps or System for mobile apps.
- Polls are collaborative; anyone can add options, but only the creator can edit the
  question.
- Zulip can display times either in a 12-hour format or a 24-hour format.
- Only the creator of a to-do list can edit the title.
- The Zulip compose box starts off closed by default, leaving more vertical space
  for the message feed.
- The compose box can be resized to display more text.
- Typing notifications are not shown in channels with more than 100 subscribers.
- Typing notifications disappear if typing is paused for several seconds, if all content
  of the message is erased, or if the message is saved as a draft.
- 'Keyboard shortcut: Use Alt + P to toggle between previewing and editing your message.'
- When you edit a message, everyone will see it labeled as edited.
- Only server administrators can restore deleted messages.
- Organization administrators can configure who can edit and delete their own messages.
- Drafts are local to your client, and are not synced to other devices and browsers.
- New emails sent to the email list will now be mirrored to the channel.
- Zulip does not send email notifications while you are actively engaging with the
  web application.
- The email subject will become the Zulip topic, and the email body will become the
  Zulip message.
- It may take up to one minute for the message to show up in Zulip.
- Messages will look the same as messages you send from the Zulip UI.
- An organization can be configured to restrict wildcard mentions in large channels.
- Users can disable notifications for @**all**, @**everyone**, and @**channel** mentions
  by disabling notifications for wildcard mentions globally or for individual channels.
- Links to messages, topics, and channels are automatically formatted.
- Zulip automatically turns mentions in the quoted text into silent mentions to avoid
  unnecessarily mentioning someone twice.
- You can view a list of recent topics in any channel.
- Zulip automatically keeps track of which messages you have and haven’t read.
- Uses OAuth2 for authentication
- Displays a dot instead of an unread counter for channels
- Can see unread message counts by hovering or opening channels
- Zulip Cloud Standard and Zulip Cloud Plus plans include 5 GB of file storage per
  user. Each uploaded file can be up to 1 GB.
- GIPHY integration is configured to only retrieve GIFs rated G (General audience)
  by default.
- Starred messages can be viewed and managed through the desktop/web and mobile interfaces.
- Zulip supports Markdown formatting for paragraphs and visual section breaks.
- Hover over a user’s name in the right sidebar to view messages.
- Printouts include just the content you need, without sidebars and buttons.
- Messages will be printed with black text on a white background.
- Zulip messages are formatted using Markdown.
- Users with appropriate permissions can view the history of how a message was edited
  and moved.
- This feature is different, and will fully remove the message content from view.
- Zulip supports math typesetting powered by KaTeX.
- Zulip sometimes automatically partially condenses long messages.
- Administrators can configure how accounts are created in their organization.
- Polls in Zulip are collaborative, so anyone can add new options to a poll.
- Only the creator of the poll can edit the question.
- User cards contain basic information about a user or bot.
- User profiles display key information about the user.
- Direct messages are private to conversation participants.
- Administrators may be able to export your DMs in a corporate organization, or with
  your permission.
- Administrators can take actions other users are not permitted to, such as managing
  your organization’s permissions settings.
- Typing notifications disappear if typing is paused for several seconds, if all content
  is erased, or if the message is saved as a draft.
- Channels organize conversations based on who needs to see them.
- Implementation of this feature in the mobile app is tracked on GitHub.
- Organization administrators can configure who can edit and delete their own messages,
  and who can delete any message.
- Zulip automatically hides channels with no recent messages if you’re subscribed
  to 20+ channels.
- Use the compose box to schedule messages.
- You can edit or reschedule messages after scheduling.
- Inbox provides an overview of your conversations with unread messages.
- Users must have permission to rename a topic.
- The recent conversations view displays a limited number of conversations containing
  the most recent messages.
- Marking a topic as resolved puts a ✔ at the beginning of the topic name.
- Triggers an automated notice from Notification Bot indicating that you resolved
  the topic.
- Messages sent without a topic go to the special 'general chat' topic.
- '''general chat'' topic can be used only if allowed by your organization’s administrators.'
- You can view a list of recent topics any channel.
- You can configure whether channel links in the left sidebar go to the channel feed,
  a list of topics in the channel, the top topic, or the top unread topic.
- Deleting all individual messages within a particular topic also deletes that topic.
- The left sidebar helps you navigate your conversations.
- These settings will override any default channel notification settings.
- You can follow or unfollow any topic.
- You can configure Zulip to automatically follow topics you start or participate
  in.
- Use the ellipsis menu to mark messages as unread
- Keyboard shortcut Shift + U can also be used
- Zulip offers an option to display a dot instead of an unread counter for channels
  in the left sidebar.
- Recommended if you like to clear your inbox of unread messages.
- This option works well if you have old unread messages, and don’t want to navigate
  there in your Combined feed and channel feeds.
- Any emoji can be used as a reaction, including custom emoji.
- Muted topics are grayed out in the topics list.
- Starred messages have a filled in star to their right.
- You can reply to Zulip messages by replying to message notification emails.
- To enable replies via email on a self-hosted server, the incoming email gateway
  must be configured by the system administrator.
- Users can schedule reminders for messages using the UI.
- View messages sent by a user requires hovering over the user's name.
- Support for end-to-end encryption for mobile push notifications is available in
  Zulip Server 11.0+ and Zulip Cloud.
- Turning on Do Not Disturb mode disables desktop notifications across all the organizations
  you have added to the Zulip desktop app.
- Other types of notifications will not be affected, including mobile notifications,
  email notifications, and desktop notifications in the Zulip web app.
- Zulip search is case-insensitive and ignores very common words like 'a', 'the',
  etc.
- Emoji in messages are included in searches.
- Users with appropriate permissions can view the edit history of messages.
- The app will update automatically to future versions.
- Zulip lets you control whether your read receipts are shared.
- Some corporate and university networks may require you to connect to Zulip via a
  proxy.
- Most browsers will show a warning if you try to connect to a Zulip server with a
  self-signed certificate.
- If you are less than 100% sure, contact your server administrator. Accepting a malicious
  self-signed certificate would give a stranger full access to your Zulip account,
  including your username and password.
- The organization type is used to customize the experience for users in your organization,
  including initial organization settings and Welcome Bot messages received by new
  users.
- In organizations with up to 600 users, everyone is shown.
- In larger organizations, only users who have been active in the last two weeks are
  shown.
- Organizations that are not open to the public will not be listed at this time.
- Status is a customizable emoji, along with a short message.
- This feature is only available to organization owners.
- All users will be logged out of the web, mobile and desktop apps.
- User's profile displays key information about the user.
- A deactivated organization can be restored until its data is deleted.
- Administrators may be able to export your DMs in a corporate organization.
- Rocket.Chat does not provide an official data export feature.
- The Zulip import tool works by importing data from a Rocket.Chat database dump.
- User groups can have other groups, roles, and individual users as members.
- Rocket.Chat does not export workspace settings, so you will need to configure the
  settings for your Zulip organization.
- User avatars are not imported.
- Default channels for new users are not imported.
- Starred messages are not imported.
- Messages longer than Zulip’s limit of 10,000 characters are not imported.
- High quality export tools available for migrating between hosted Zulip Cloud service
  and self-hosted servers.
- Everyone other than guests can subscribe to any public or web-public channel.
- Users will have the initial settings that are configured at the time when they accept
  the invitation.
- Implementation of this feature in the mobile app is tracked on GitHub
- Zulip supports synchronizing custom profile fields from an external user database
  such as LDAP or SAML.
- Changing a channel’s color does not change it for anyone else.
- As an anti-spam measure, the number of email invitations you can send in a day is
  limited on the Zulip Cloud Free plan.
- Organizations can sort channels into folders.
- Each Zulip account is associated with an email address.
- Users are required to verify their email account by clicking on a validation link.
- Unsubscribing from a channel can be done via the left sidebar or channel settings.
- For self-hosted organizations, some authentication options require that you first
  configure your server to support the option.
- Zulip supports using SAML authentication for single sign-on, both for Zulip Cloud
  and self-hosted Zulip servers.
- Make sure your Zulip Cloud organization is on the Zulip Cloud Plus plan.
- Zulip Cloud customers who wish to use this feature must upgrade to the Zulip Cloud
  Plus plan.
- To see the full list of subscribers for a channel that has more than 600 people
  subscribed, scroll to the bottom of the section and click View all subscribers.
- SCIM DELETE requests are not supported for groups.
- Changing a user’s password or removing their single sign-on account will not log
  them out of their open Zulip sessions, or disable their API keys.
- A reactivated user will have the same role, channel subscriptions, user group memberships,
  and other settings and permissions as they did prior to deactivation.
- Messages sent without a topic go to the special '*general chat*' topic.
- The '*general chat*' topic can be used only if allowed by your organization's administrators.
- Note that deleting all of the individual messages within a particular topic also
  deletes that topic.
- Settings will override any default channel notification settings.
- Subscribing someone else to a channel sends them an automated direct message from
  Notification Bot.
- In muted channels, topics you follow are automatically treated as unmuted.
- You can configure when to automatically unmute topics.
- You will see the options described only if you have permission to take this action.
- Some parts of the Zulip experience may start to degrade if you receive more than
  a few hundred muted messages a day.
- Only users in trusted roles (moderators and administrators) can be given permission
  to create web-public channels.
- Web-public channels do not yet support search engine indexing.
- Users won’t need to enter a topic when sending a message to a “general chat” channel.
- To mute a user, use the POST /api/mute_user endpoint.
- You can restrict who can send messages to a channel.
- Administrative permissions can be configured in the Channel settings under Advanced
  configuration.
- Desktop notifications are triggered when a message arrives, and Zulip is not in
  focus or the message is offscreen. You must have Zulip open in a browser tab or
  in the Zulip desktop app to receive desktop notifications.
- Manage who can create channels
- For corporations and other organizations with controlled access, we recommend keeping
  channel creation open to make it easy for users to self-organize.
- Do Not Disturb mode disables desktop notifications across all organizations.
- Guests can never subscribe themselves to a channel.
- For private channels, you additionally need to have content access in order to change
  this configuration.
- Installing the latest stable release is recommended for most users.
- Feature available to organization owners and administrators.
- Zulip works great in all major modern web browsers.
- In most corporate environments, your network administrator will provide a URL for
  the PAC script.
- Default channels must be public or web-public.
- Zulip Desktop version 5.4.0 and above use the operating system’s certificate store,
  like your web browser.
- A channel’s name can be in any language, and can include spaces, punctuation, and
  Unicode emoji.
- Channel descriptions support Zulip’s standard Markdown formatting, with the exception
  that image previews are disabled.
- Be careful making a private channel public. All past messages will become accessible,
  even if the channel previously had protected history.
- When you change the URL, all users will be logged out of the web, mobile and desktop
  apps.
- Ensure proper permissions are set before archiving channels.
- Some features may require additional configuration.
- User roles make it convenient to configure permissions for your organization.
- User groups offer a flexible way to manage permissions.
- Mattermost does not export workspace settings, so you will need to configure the
  settings for your Zulip organization.
- Direct messages will only be imported from Mattermost workspaces containing a single
  team.
- Rocket.Chat does not export user settings, so users in your organization may want
  to customize their account settings.
- Livechat channels/messages are not imported.
- User roles can be configured to manage permissions.
- Zulip has high quality export tools for migrating data.
- Guest users can view and send messages in channels they have been subscribed to,
  including viewing message history.
- Guest users cannot see private or public channels unless specifically subscribed,
  cannot create new channels or user groups, cannot add or manage bots, cannot add
  custom emoji, and cannot invite users.
- Self-hosted organizations can disable API access to availability updates by configuring
  CAN_ACCESS_ALL_USERS_GROUP_LIMITS_PRESENCE = True.
- Regardless of how these settings are configured, users can always send direct messages
  to bots and to themselves.
- Users can see custom profile fields in a specified order.
- Organizations can display additional fields on the user card.
- There is a limit to the number of custom profile fields that can be displayed at
  a time.
- If a custom profile field is required, users will be prompted to fill it out if
  left blank.
- Feature to configure whether users can edit custom profile fields is available to
  organization owners and administrators.
- You can restrict message edit history access to only show moves, or disable it altogether.
- Permissions for moving messages between channels can be configured separately.
- The time limit you set will not apply to administrators and moderators.
- By default, any user can change their profile picture.
- If you are using Zulip Cloud, we’ll take it from here!
- Members are new members from when they join till when their account ages past a
  certain waiting period threshold.
- Zulip supports SCIM integration, both in Zulip Cloud and for self-hosted Zulip servers.
- Emoji names can only contain a-z, 0-9, dashes (-), and spaces.
- Upper and lower case letters are treated the same, and underscores (_) are treated
  the same as spaces.
- Changes made on the Zulip side will not be reflected in your SCIM provider.
- The call providers supported by Zulip are Jitsi Meet, Zoom integration, and BigBlueButton
  integration.
- Add a new linkifier by entering a Pattern and URL template in Organization settings.
- Previews of images uploaded earlier are always animated.
- Allows toggling message content visibility in email notifications
- By default, users can change their name, though organization administrators can
  restrict name changes.
- This feature is disabled by default, but an organization administrator can enable
  it for their organization.
- Requires user permissions to add or remove users from groups.
- Enabling web-public channels makes certain information about your organization accessible
  to anyone on the Internet via the Zulip API.
- Users won’t need to enter a topic when sending a message to a 'general chat' channel.
- Bots allow you to send content into and out of Zulip.
- Each bot has a name, profile picture, email, bot type and API key.
- Nearly all third-party integrations should use Incoming webhook as the bot type.
- Requires setup of authentication methods
- Users who are allowed to subscribe to a channel will also be able to read messages
  in it without subscribing.
- Organization administrators and channel administrators can automatically unsubscribe
  anyone from a channel.
- Organization administrators can manage any bot on the list.
- Zulip Cloud organizations are always updated to the latest version of Zulip.
- Zulip users can edit their profile information, configure privacy settings, and
  delete their own messages and uploaded files, if permissions to do so are enabled
  by your organization.
- Organization administrators can also edit or remove any user’s profile information,
  or deactivate a user.
- You can export all the data related to a Zulip user or organization.
- The Zulip REST API lets you automate your processes for handling GDPR requests.
- Zulip Cloud is updated every couple of weeks, so it’s important to coordinate the
  timing with Zulip’s support team.
- Channel descriptions can include links to important topics or messages.
- OAuth2 is required for authentication.
- Guests can never administer user groups, add anyone else to a group, or remove anyone
  else from a group.
- The integration will send direct messages to the bot's owner by default.
- API key is sent as a query parameter.
- User groups can be deactivated and reactivated through the admin interface.
- An organization owner can change the role of any user.
- Guest users can view and send messages in channels they have been subscribed to.
- Guest users cannot see private or public channels unless subscribed.
- Webhook integration requires an API key in the query parameters.
- Self-hosted organizations can disable API access to availability updates by configuring
  CAN_ACCESS_ALL_USERS_GROUP_LIMITS_PRESENCE = True. For performance reasons, this
  is recommended only for organizations with up to ~100 users.
- Custom HTTP Headers must be entered as a JSON dictionary.
- Authorization is sent as an API key in the query parameters.
- Message content can only be modified by the original author.
- If a user can edit a message, they can also delete it by removing all content.
- The absence of the custom HTTP header usually indicates a configuration issue.
- Some integrations may have dozens of different event types.
- Always send messages by POSTing to URLs of the form https://zulip.example.com/v1/messages/
- Ensure that your API config file is correct.
- Ensure Botserver is accessible from your Zulip server over HTTP(S).
- This setting is primarily useful in organizations that are synchronizing profile
  pictures from LDAP or a similar directory.
- Uses API key for authentication.
- Custom emoji can be used by all users in an organization (including bots).
- The default timeout for outgoing webhooks is 10 seconds, though this can be configured
  by the administrator.
- By default, Zulip integrates with Jitsi Meet.
- You can disable the video and voice call buttons for your organization by setting
  the call provider to 'None'.
- Uses a fixed token for webhook authentication
- The Zulip REST API powers the Zulip web and mobile apps.
- Anyone with a bot's API key can impersonate the bot, so be careful with it.
- Clients are not required to pass a User-Agent HTTP header, but it's highly recommended.
- This configuration applies only to images uploaded since July 21, 2024 on Zulip
  Cloud, or on Zulip Server 9.0+ in self-hosted organizations.
- Toggle 'Allow message content in message notification emails' under Notifications
  security.
- Settings defining permissions in Zulip are increasingly represented using user groups.
- Many group-valued settings are configured to require a single system group for their
  value.
- Retention policies are processed in a daily job; so changes in the policy won’t
  have any effect until the next time the daily job runs.
- Deleted messages are preserved temporarily in a special archive.
- Zulip supports an extended version of Markdown for messages.
- Zulip does not validate whether uploaded files with an audio Content-Type are actually
  playable.
- Clients that cannot render an audio player are recommended to convert audio elements
  into a link to the original URL.
- Toggle send emails introducing Zulip to new users in Organization settings.
- Notices sent to channels are translated into the language that the organization
  has configured as the language for automated messages and invitation emails.
- New private channels are never announced.
- By default, Zulip search only supports English text, using PostgreSQL’s built-in
  full-text search feature.
- Self-hosted Zulip organizations can instead set up an experimental PGroonga integration
  that provides full-text search for all languages simultaneously, including Japanese
  and Chinese.
- Zulip provides detailed analytics to help you see how you and your team are using
  Zulip.
- The email is not used for anything, and will likely be removed in a future version
  of Zulip.
- Use the most limited bot type that supports your integration.
- Anyone other than guests can add a bot to a Zulip organization by default.
- Bots with the can_forge_sender permission can see the names of all channels.
- Zulip offers over 120 native integrations.
- There may also be some quirks when Slack’s formatting system is translated into
  Zulip’s.
- Clients that do not support the include_deactivated_groups client capability do
  not receive deactivated user groups in the response.
- Organization admins can prevent users from reactivating bots by restricting bot
  creation.
- These settings only affect new bots. Existing bots will not be deactivated.
- The API has undergone numerous feature level changes in version 8.0.
- You can view the bots that you own, including deactivated bots.
- Organization administrators can deactivate, reactivate, or manage any bot on the
  list.
- No changes; feature level used for Zulip 7.0 release.
- Requires OAuth2 with refresh token for access.
- Organizations that self-host Zulip can take advantage of various plan options.
- Zulip makes it easy for organizations to comply with GDPR-related requests from
  users
- For security reasons, passwords are never exported.
- Zulip offers a convenient cloud solution with features to make your users and IT
  team happy.
- Import your data and integrations from Slack and other products.
- Zulip can process incoming webhook messages written to work with Slack's webhook
  API.
- Large files (25MB+) may fail to upload due to network-layer timeouts.
- Integrations send the authorization as an API key in the query parameters.
- Before Zulip 7.0, editing channels and topics of messages was forbidden if the realm
  setting for allow_message_editing was false.
- Requires setup of webhook in Zulip
- Use the provided JSON structure for incoming messages
- A user must be able to access the content of a message in order to delete it.
- Requires API key in the query parameters for authentication.
- A maximum of 5000 messages can be obtained per request
- Some third-party services set a custom HTTP header to indicate the event type that
  generates a particular payload.
- The absence of such a header usually indicates a configuration issue, where one
  either entered the URL for a different integration, or happens to be running an
  older version of the integration that doesn't set that header.
- Some messages may not include all fields due to user settings.
- The response may include additional fields based on the Zulip feature level.
- You should always send messages by POSTing to URLs of the form https://zulip.example.com/v1/messages/.
- Make sure the API key you're using is for an outgoing webhook bot.
- Zulip's bot system resides in the python-zulip-api repository.
- This guide is about writing and testing interactive bots.
- The default timeout for outgoing webhooks is 10 seconds, though this can be configured
  by the administrator of the Zulip server.
- Many bots implemented using this outgoing webhook API will want to send a reply
  message into Zulip.
- HTTP basic authentication required for API calls.
- Anyone with your API key can impersonate you, so be doubly careful with it.
- API keys are required for authentication
- Ensure to handle API key securely
- Clients are not required to pass a User-Agent header, but it's recommended.
- Many group-valued settings are configured to require a single system group for their
  value via server_supported_permission_settings, pending web app UI changes to fully
  support group-setting values.
- API client libraries make it easy to work with Zulip's REST API
- The API feature levels system allows writing clients that work with multiple server
  versions.
- New features and updates are introduced in different feature levels.
- Added support for invitations specifying the empty list as the user's initial stream
  subscriptions.
- API endpoints may have rate limits.
- Uses API key for authentication
- The maximum allowed file size is available in the max_file_upload_size_mib field
  in the POST /register response.
- Large files (25MB+) may fail to upload using this API endpoint due to network-layer
  timeouts.
- Clients should use the max_topic_length returned by the POST /register endpoint
  to determine the maximum topic length.
- Clients should use the max_message_length returned by the POST /register endpoint
  to determine the maximum message size.
errors:
- '401 Unauthorized: Check API key and permissions'
- '404 Not Found: Endpoint may have changed or does not exist'
- 'BAD_EVENT_QUEUE_ID: Bad event queue ID'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403 Forbidden: Check if the token is valid and has the required permissions'
- '404 Not Found: Verify the endpoint path and parameters'
- '401 Unauthorized: Check if the access token is valid'
- '404 Not Found: Ensure the endpoint path is correct'
- '429 Too Many Requests: Rate limit exceeded'
- '401 Unauthorized: Check your API key and permissions.'
- '429 Too Many Requests: Throttle your requests.'
- '400 Bad Request: Check request parameters and data format.'
- '404 Not Found: Verify endpoint URL and resource availability.'
- '401 Unauthorized: Confirm authentication credentials.'
- '404 Not Found: Check the endpoint and parameters'
- '401 Unauthorized: Verify authentication settings'
- '403 Forbidden: Check your API key and permissions.'
- '404 Not Found: Ensure the endpoint is correct.'
- '401 Unauthorized: Verify your OAuth token.'
- 'BAD_EVENT_QUEUE_ID: Bad event queue ID: fb67bf8a-c031-47cc-84cf-ed80accacda8'
- '429 Too Many Requests: Throttle API calls'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Validate credentials'
- '403 Forbidden: Check if the access token has the required scopes.'
- '404 Not Found: Verify the endpoint path.'
- '429 Too Many Requests: Rate limit exceeded, slow down the requests.'
- '404 Not Found: The requested resource does not exist.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Recheck API key or token expiration'
- '404 Not Found: Check if the endpoint is correct'
- '500 Internal Server Error: Retry the request'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Check your authentication credentials.'
- '429 Too Many Requests: You are being rate limited, slow down your requests.'
- '403 Forbidden: Check API key and permissions'
- '404 Not Found: Verify endpoint and resource'
- '401 Unauthorized: Check your API key or OAuth token.'
- 'InvalidApiKey: Check your API key.'
- 'Unauthorized: Verify your authentication credentials.'
- '401 Unauthorized: Check your API key and authentication method.'
- '403 Forbidden: You don’t have permission to access this resource.'
- '401 Unauthorized: Check your token or authentication method.'
- '429 Too Many Requests: Throttle API calls.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '404 Not Found: Check the endpoint or resource you are trying to access.'
- '403 Forbidden: Ensure you have the correct permissions for the requested resource.'
- '401 Unauthorized: Check your API key or OAuth credentials.'
- '401 Unauthorized: Check your API key or permissions.'
- '404 Not Found: The requested resource could not be found.'
- 'INVALID_API_KEY: Check your API key.'
- 'NOT_AUTHORIZED: Ensure the token is valid.'
- '400 Bad Request: Check the request syntax and parameters.'
- '401 Unauthorized: Verify OAuth credentials.'
- '404 Not Found: Endpoint does not exist.'
- '404 Not Found: Verify the endpoint URL'
- '500 Internal Server Error: Try again later or contact support'
- '401 Unauthorized: Check if the token is valid or expired.'
- '403 Forbidden: Ensure the user has permission for the requested resource.'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify authentication credentials.'
- '404 Not Found: Ensure endpoint is correct.'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Check your credentials'
- '500 Internal Server Error: Try again later'
- You do not have permission to edit this message.
- 'INVALID_API_KEY: Check API key'
- 'INVALID_SUBREALM: Check subrealm parameter'
- '404 Not Found: Check the endpoint URL or resource availability.'
- '401 Unauthorized: Verify OAuth token or credentials.'
- '404 Not Found: Check the endpoint URL'
- '400 Bad Request: Ensure required fields are included'
- '401 Unauthorized: Recheck authentication credentials.'
- '400 Bad Request: Check your query syntax.'
- API clients or integrations will need to be updated to point to the new organization
  URL.
- '403 Forbidden: Organization administrators cannot deactivate organization owners.'
- Consider using a wildcard mention in an announcement channel to let users know about
  an upcoming change.
- '403 Forbidden: Check permissions to access the channel.'
- '404 Not Found: The specified channel does not exist.'
- 'REQUEST_FAILED: Check your API token or base URL.'
- 'GROUP_NAME_CONFLICT: Ensure group names do not match existing Zulip groups.'
- '403 Forbidden: Ensure you have permissions to perform this action.'
- '404 Not Found: The specified user or group does not exist.'
- 'Unauthorized: Invalid API key'
- '401 Unauthorized: Check your credentials or token expiration.'
- 'KeyError: Handle missing keys in the payload gracefully.'
- '400 Bad Request: Ensure the request body is valid JSON.'
- 'KeyError: Thrown if a required key is missing from the JSON payload.'
- 'Unknown action: The webhook should return an error message if no params are sent.'
- 'UnsupportedWebhookEventTypeError: Description of the unsupported event type'
- '405 Method Not Allowed: Check the method used for the request.'
- '401 Unauthorized: Check API key or user permissions.'
- '400 Bad Request: Check the parameters passed in the request.'
- Returns the reason of failure, as returned by the server, or the exception message
- '401 Unauthorized: Invalid API key'
- 'X-RateLimit-Remaining: The number of additional requests of this type that the
  client can send before exceeding its limit.'
- 'X-RateLimit-Limit: The limit that would be applicable to a client that had not
  made any recent requests of this type.'
- 'X-RateLimit-Reset: The time at which the client will no longer have any rate limits
  applied to it.'
- 'INVALID_API_KEY: Invalid API key'
- 'REQUEST_VARIABLE_MISSING: Missing ''content'' argument'
- 'BAD_REQUEST: Unsupported parameter combination: object_id, object_name'
- 'BAD_REQUEST: User not authorized for this query'
- 'USER_DEACTIVATED: Account is deactivated'
- 'REALM_DEACTIVATED: This organization is deactivated'
- 'RATE_LIMIT_HIT: API usage exceeded rate limit'
- 'EXPECTATION_MISMATCH: The request will fail if the old field does not match the
  actual current value.'
- 'Unauthorized: Invalid API key provided.'
- 'Permission Denied: The bot does not have permission to perform this action.'
- 'CANNOT_DEACTIVATE_GROUP_IN_USE: User group cannot be deactivated because it is
  in use'
- '400 BAD_REQUEST: Returned when a user specified in the principals parameter is
  deactivated or does not exist.'
- '403 UNAUTHORIZED_PRINCIPAL: Previously returned for similar cases before version
  8.0.'
- '401 Unauthorized: Check your OAuth token.'
- '403 Forbidden: You do not have permission to access this resource.'
- Contact support at support@zulip.com for migration assistance.
- 'RATE_LIMIT_HIT: Throttle API calls or reduce frequency'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- 'STREAM_DOES_NOT_EXIST: Channel ''nonexistent'' does not exist'
- 'BAD_REQUEST: Invalid email ''eeshan@zulip.com'''
- 'STREAM_WILDCARD_MENTION_NOT_ALLOWED: You do not have permission to use channel
  wildcard mentions in this channel.'
- 'TOPIC_WILDCARD_MENTION_NOT_ALLOWED: You do not have permission to use topic wildcard
  mentions in this topic.'
- 'MOVE_MESSAGES_TIME_LIMIT_EXCEEDED: Users cannot move messages after the time limit.'
- '400 Bad Request: Check parameters for errors.'
- '400 Bad Request: Payload does not meet required structure'
- 'BAD_REQUEST: You don''t have permission to edit this message'
- 'MOVE_MESSAGES_TIME_LIMIT_EXCEEDED: You only have permission to move the 2/5 most
  recent messages in this topic.'
- '200: Success'
- '401: Unauthorized'
- 'BAD_REQUEST: Invalid message(s)'
- 'BAD_REQUEST: You don''t have permission to delete this message'
- 'UnsupportedWebhookEventTypeError: Raise when encountering an unsupported event
  type'
- '400 Bad Request: Check the request format or parameters.'
- '401 Unauthorized: Check API key validity.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Ensure that the API token is valid.'
- '405 Method Not Allowed: The method is not allowed for the requested URL.'
- 'Invalid API key: Check your API key or generate a new one.'
- 'Invalid API key: Check your API key and try again'
- 'Invalid email: Ensure the email associated with the API key is correct'
- '400 Bad Request: Check request parameters and formatting'
- '401 Unauthorized: API key is missing or invalid'
- '401 Unauthorized: Check API key or permissions'
- 'CANNOT_DEACTIVATE_GROUP_IN_USE: Cannot deactivate group because it is in use.'
- 'BAD_REQUEST: Invalid request format or parameters.'
- 'UNAUTHORIZED_PRINCIPAL: Specified user does not exist or is deactivated.'
- 'RATE_LIMIT_HIT: Too many requests — please slow down.'
- 'STREAM_DOES_NOT_EXIST: Channel does not exist'
- 'BAD_REQUEST: Invalid email'
- 'STREAM_WILDCARD_MENTION_NOT_ALLOWED: Permission issue with channel wildcard mentions'
- 'TOPIC_WILDCARD_MENTION_NOT_ALLOWED: Permission issue with topic wildcard mentions'
- '401 Unauthorized: Recheck API key or credentials'
- 'MOVE_MESSAGES_TIME_LIMIT_EXCEEDED: Users cannot move messages after the time limits
  have passed.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuth
  - Token
  - OAuth2
  - User
  - Stream
  - OAuth2Token
  - Realm
  - API key
  - OAuth social logins
  - SSO with OpenID Connect
  - 100+ authentication options
  - AccessToken
  - LDAP
  - SAML
  - OIDC
  - Google
  - GitHub
  - GitLab
  - Apple
  - Oauth2Token
  - Oauth2
  - Client
  - APIKey
  - Bot User OAuth Token
  - Message
  - zuliprc
client:
  base_url: https://zulipchat.com/api
  auth:
    type: oauth2
source_metadata: null
