resources:
- name: wording
  endpoint:
    path: /account/wording
    method: GET
    data_selector: forms
- name: account_wording
  endpoint:
    path: /account/wording.xml
    method: POST
    data_selector: response
    params:
      token: '[your API token]'
- name: account_wording
  endpoint:
    path: /account/wording
    method: POST
- name: wording
  endpoint:
    path: /api/account/wording
    method: POST
    data_selector: forms
- name: form_cloning
  endpoint:
    path: /forms/clone
    method: POST
    data_selector: form
- name: account_settings
  endpoint:
    path: /account/settings
    method: GET
    data_selector: settings
- name: settings
  endpoint:
    path: /admin/api/account/settings
    method: POST
    data_selector: settings
    params: {}
- name: custom_amounts
  endpoint:
    path: /amounts/list
    method: GET
    data_selector: amounts
    params: {}
- name: create_custom_amount
  endpoint:
    path: /amounts/create
    method: POST
    data_selector: amounts
    params: {}
- name: get_custom_amount
  endpoint:
    path: /amounts/[id]
    method: GET
    data_selector: amount
    params: {}
- name: update_custom_amount
  endpoint:
    path: /amounts/[id]
    method: POST
    data_selector: amount
    params: {}
- name: amount
  endpoint:
    path: /amounts/[id]
    method: POST
    data_selector: amounts
    params: {}
- name: custom_fields_list
  endpoint:
    path: /customFields/list
    method: GET
    data_selector: customField
- name: custom_field_detail
  endpoint:
    path: /customFields/[id]
    method: GET
    data_selector: customField
- name: customFields_create
  endpoint:
    path: /customFields/create
    method: POST
    data_selector: customField
    params: {}
- name: customFields_update
  endpoint:
    path: /customFields/[id]
    method: POST
    data_selector: customfields
    params: {}
- name: dedication_fields
  endpoint:
    path: /dedications/fields/list
    method: GET
    data_selector: dedicationFields
- name: dedication_field
  endpoint:
    path: /dedications/fields/[id]
    method: GET
    data_selector: dedicationField
- name: create_dedication_fields
  endpoint:
    path: /dedications/fields/create
    method: POST
    data_selector: dedicationFields
- name: dedication_field
  endpoint:
    path: /[id]
    method: POST
    data_selector: dedicationFields
    params: {}
- name: dedication_types_list
  endpoint:
    path: /dedications/types/list
    method: GET
    data_selector: dedicationTypes
- name: dedication_type
  endpoint:
    path: /dedications/types/[ID]
    method: GET
    data_selector: dedicationType
- name: create_dedication_type
  endpoint:
    path: /dedications/types/create
    method: POST
    data_selector: dedicationTypes
- name: dedication_type
  endpoint:
    path: /dedications/types/[id].xml
    method: POST
    data_selector: dedicationTypes
- name: events
  endpoint:
    path: /events/list
    method: GET
- name: event
  endpoint:
    path: /events/[id]
    method: GET
    data_selector: event
- name: update_event
  endpoint:
    path: /events/[id]
    method: POST
    data_selector: events
- name: events
  endpoint:
    path: /events/[id]
    method: POST
    data_selector: events
- name: kiosk_list
  endpoint:
    path: /kiosk/list
    method: GET
    data_selector: kiosks
- name: kiosk_detail
  endpoint:
    path: /kiosks/[id]
    method: GET
    data_selector: kiosk
- name: kiosk_create
  endpoint:
    path: /kiosks/create
    method: POST
- name: kiosk
  endpoint:
    path: /[id]
    method: POST
    data_selector: kiosk
    params: {}
- name: pledge_list
  endpoint:
    path: /pledges/list
    method: GET
    data_selector: pledges
    params: {}
- name: pledge_by_id
  endpoint:
    path: /pledges/[id]
    method: GET
    data_selector: pledge
    params: {}
- name: create_pledge
  endpoint:
    path: /pledges/create
    method: POST
    data_selector: pledges
    params: {}
- name: pledge
  endpoint:
    path: /pledges/[ID]
    method: POST
    data_selector: pledge
- name: restrictions_list
  endpoint:
    path: /restrictions/list
    method: GET
- name: restriction_by_id
  endpoint:
    path: /restriction/[id]
    method: GET
- name: create_restriction
  endpoint:
    path: /restrictions/create
    method: POST
- name: restrictions
  endpoint:
    path: /restrictions/[id]
    method: POST
    data_selector: restrictions
    params: {}
- name: widgets_list
  endpoint:
    path: /widgets/list
    method: GET
    data_selector: widgets
- name: widget
  endpoint:
    path: /widgets/[id]
    method: GET
    data_selector: widget
- name: report_mappings_list
  endpoint:
    path: /reporting/mappings/list
    method: GET
    data_selector: mappings
- name: report_mapping_detail
  endpoint:
    path: /reporting/mappings/[id]
    method: GET
    data_selector: mapping
- name: create_report_mapping
  endpoint:
    path: /mappings/create
    method: POST
    data_selector: mappings
- name: update_report_mapping
  endpoint:
    path: /mappings/[id]
    method: POST
    data_selector: mappings
- name: mappings
  endpoint:
    path: /mappings/[id]
    method: POST
    data_selector: mappings
    params: {}
- name: recurring_transactions
  endpoint:
    path: /list
    method: GET
    data_selector: recurringtransactions
    params: {}
- name: active_recurring_transactions
  endpoint:
    path: /active
    method: GET
    data_selector: recurringtransactions
    params: {}
- name: recurring
  endpoint:
    path: /recurring/[id]
    method: GET
    data_selector: recurring
- name: statements
  endpoint:
    path: /reporting/statements/list
    method: GET
    data_selector: statements
- name: statement
  endpoint:
    path: /reporting/statements/[id]
    method: GET
    data_selector: statement
- name: statements
  endpoint:
    path: /statements/latest
    method: POST
    data_selector: statements
    params: {}
- name: transactions
  endpoint:
    path: /transactions/last/[limit]
    method: GET
- name: transactions
  endpoint:
    path: /{Transaction ID}
    method: GET
    data_selector: transactions.transaction
    params: {}
- name: transactions
  endpoint:
    path: /reporting/transactions/dates/[begin]:[end]
    method: GET
    data_selector: transactions.transaction
    params: {}
- name: transactions
  endpoint:
    path: /transactions/[id]
    method: GET
    data_selector: transactions.transaction
- name: last_transactions
  endpoint:
    path: /transactions/last/[limit]
    method: POST
    data_selector: transactions
- name: transactions
  endpoint:
    path: /transactions/last/[limit]
    method: POST
- name: registrations
  endpoint:
    path: /registrations/last/[limit]
    method: GET
    data_selector: registrations
    params:
      limit: '[limit]'
- name: registrations
  endpoint:
    path: /dates/[begin]:[end]
    method: GET
    data_selector: registrations
- name: registrations
  endpoint:
    path: /registrations/[id]
    method: GET
    data_selector: registration
    params: {}
- name: refunds
  endpoint:
    path: /refunds/last/[limit]
    method: GET
    data_selector: refunds
- name: refunds
  endpoint:
    path: /refunds/after/[Refund ID]
    method: GET
- name: refunds
  endpoint:
    path: /refunds/dates/[begin]:[end]
    method: GET
- name: refund
  endpoint:
    path: /refunds/[id]
    method: GET
    data_selector: refunds
notes:
- Requires API key included in Authorization header
- Updates the form wording.
- Uses OAuth2 authentication.
- Requires API token for authentication
- Uses token-based authentication
- Package can be formatted as XML or JSON
- Requires setup of API token
- Inputs can be in XML or JSON format
- Requires an API token for authentication.
- Uses API key for authentication.
- Kiosk navigation items do not carry a status, must be removed to disable.
- Ensure to replace [id] with the actual kiosk ID in the endpoint path.
- Requires an API token for authentication
- Requires API token for authentication.
- Ensure to replace [id] with the actual mapping ID.
- Requires API token for authorization
- Returns all statements associated with the current form or organization
- '[limit] must be an integer value greater than zero'
- '[Transaction ID] must be a valid Transaction ID'
- Valid dates must be in MMDDYYYY or MM-DD-YYYY format.
- Timestamps can also be used in MMDDYYYY HHIISS format.
- '[begin] and [end] must be valid dates in the following format: MMDDYYYY or MM-DD-YYYY'
- 'Timestamps can also be inputted to further filter results by using the following
  format: MMDDYYYY HHIISS'
- '[Refund ID] must be a valid Refund ID'
errors:
- '401 Unauthorized: Check your API key and permissions'
- '404 Not Found: Verify the endpoint path'
- 'error : [your API token]'
- Server response is unsuccessful
- Server response is incomplete
- '401 Unauthorized: Check API token and permissions.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API token'
- '401 Unauthorized: Recheck API token or credentials'
- '500 Internal Server Error: Check server logs for more details'
- '401 Unauthorized: Check API token validity'
- '404 Not Found: Ensure the event ID is correct'
- '500 Internal Server Error: Try again later'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Recheck API token or permissions.'
- '404 Not Found: Check if the kiosk ID is correct.'
- '500 Internal Server Error: Try again later or contact support.'
- '401 Unauthorized: Check API token'
- '400 Bad Request: Validate input data'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify API token.'
- '404 Not Found: Ensure the mapping ID is correct.'
- '401 Unauthorized: Invalid API token'
- '401 Unauthorized: Check API token.'
- '401 Unauthorized: Recheck API token validity.'
- 'error : Unable to connect'
- 'error : Server response is unsuccessful'
- 'error : Server response is incomplete'
auth_info:
  mentioned_objects: []
client:
  base_url: https://secure.qgiv.com/admin/api
  auth:
    type: apikey
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
