resources:
- name: Person
  endpoint:
    path: /api/person
    method: GET
    data_selector: data
    params: {}
- name: columns
  endpoint:
    path: /api/columns
    method: GET
    data_selector: columns
    params: {}
- name: data
  endpoint:
    path: /api/data
    method: GET
    data_selector: data
    params: {}
- name: column
  endpoint:
    path: /docs/api/table-options
    method: GET
- name: column_options
  endpoint:
    path: /api/column-options
    method: GET
    data_selector: columns
    params: {}
- name: stateOptions
  endpoint:
    path: /api/state-options
    method: GET
    data_selector: stateOptions
    params: {}
- name: table_instance
  endpoint:
    path: /api/table-instance-apis
    method: GET
    data_selector: tableInstanceAPIs
    params: {}
- name: row_instance_api
  endpoint:
    path: /api/row-instance-apis
    method: GET
    data_selector: rowInstanceAPIs
    params: {}
- name: cellInstanceAPI
  endpoint:
    path: /api/cell-instance-apis
    method: GET
    data_selector: cellInstanceAPIs
- name: example_data
  endpoint:
    path: /example/data
    method: GET
    data_selector: data
    params: {}
- name: Example
  endpoint:
    path: /examples/minimal
    method: GET
    data_selector: data
    params: {}
- name: employee
  endpoint:
    path: /data
    method: GET
    data_selector: data
- name: employee
  endpoint:
    path: /api/employee
    method: GET
    data_selector: records
- name: custom_headless_table
  endpoint:
    path: /examples/custom-headless
    method: GET
- name: aggregation_grouping
  endpoint:
    path: /examples/aggregation-and-grouping
    method: GET
    data_selector: rows
    params: {}
- name: export_csv
  endpoint:
    path: /examples/export-csv
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/data
    method: GET
    data_selector: data
    params:
      start: '0'
      size: '10'
      filters: '[]'
      globalFilter: ''
      sorting: '[]'
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: example_data
  endpoint:
    path: /examples/data
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/data
    method: GET
    data_selector: data
    params:
      incremental: start
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: User
  endpoint:
    path: /api/users
    method: GET
    data_selector: records
- name: Column Definitions
  endpoint:
    path: /api/column-definitions
    method: GET
    data_selector: records
- name: data_columns
  endpoint:
    path: /docs/guides/data-columns
    method: GET
    data_selector: columns
    params: {}
- name: display_columns
  endpoint:
    path: /docs/guides/display-columns
    method: GET
    data_selector: columns
- name: example_table
  endpoint:
    path: /mantine-react-table
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: example
  endpoint:
    path: /example/endpoint
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: localization
  endpoint:
    path: /localization
    method: GET
    data_selector: locales
- name: memoized_cells
  endpoint:
    path: /docs/guides/memoize-components#memoizing-table-cells
    method: GET
    data_selector: cells
    params: {}
- name: memoized_rows
  endpoint:
    path: /docs/guides/memoize-components#memoizing-table-rows
    method: GET
    data_selector: rows
    params: {}
- name: memoized_table_body
  endpoint:
    path: /docs/guides/memoize-components#memoizing-table-body
    method: GET
    data_selector: table-body
    params: {}
- name: Static Memoized Table
  endpoint:
    path: /docs/guides/memoize-components
    method: GET
    data_selector: data
- name: example
  endpoint:
    path: /example
    method: GET
    data_selector: data
    params: {}
- name: toolbar_customization
  endpoint:
    path: /docs/guides/toolbar-customization
    method: GET
    data_selector: content
    params: {}
- name: custom_top_toolbar_buttons
  endpoint:
    path: /custom/top/toolbar/buttons
    method: GET
- name: custom_bottom_toolbar
  endpoint:
    path: /custom/bottom/toolbar
    method: GET
- name: aggregation_and_grouping
  endpoint:
    path: /docs/guides/aggregation-and-grouping
    method: GET
    data_selector: default
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/data
    method: GET
    data_selector: data
    params:
      start: pagination.pageIndex * pagination.pageSize
      size: pagination.pageSize
      filters: JSON.stringify(columnFilters ?? [])
      globalFilter: globalFilter ?? ''
      sorting: JSON.stringify(sorting ?? [])
- name: users
  endpoint:
    path: /api/data
    method: GET
    params:
      start: pagination.pageIndex * pagination.pageSize
      size: pagination.pageSize
      filters: columnFilters
      globalFilter: globalFilter
      sorting: sorting
- name: column_actions
  endpoint:
    path: /guides/column-actions-menu
    method: GET
    data_selector: relevant_table_options
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: people
  endpoint:
    path: /data/people
    method: GET
    data_selector: records
- name: column_ordering
  endpoint:
    path: /guides/column-ordering-dnd
    method: GET
- name: column_pinning
  endpoint:
    path: /docs/guides/column-pinning
    method: GET
    data_selector: columnPinning
    params: {}
- name: column_resizing
  endpoint:
    path: /docs/guides/column-resizing
    method: GET
    data_selector: records
- name: density_toggle
  endpoint:
    path: /docs/guides/density-toggle
    method: GET
    data_selector: density toggle feature
    params: {}
- name: detail_panel
  endpoint:
    path: /docs/guides/detail-panel
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: editing
  endpoint:
    path: /docs/guides/editing
    method: GET
    data_selector: editing_modes
    params: {}
- name: example
  endpoint:
    path: /docs/guides/editing
    method: GET
    data_selector: columns
    params: {}
- name: expanding_sub_rows
  endpoint:
    path: /guides/expanding-sub-rows
    method: GET
    data_selector: data
    params: {}
- name: person
  endpoint:
    path: /api/person
    method: GET
    data_selector: data
    params: {}
- name: full_screen_toggle
  endpoint:
    path: /guides/full-screen-toggle
    method: GET
    data_selector: relevant_options
    params: {}
- name: global_filtering
  endpoint:
    path: /guides/global-filtering
    method: GET
    data_selector: guide
    params: {}
- name: data
  endpoint:
    path: /api/data
    method: GET
    data_selector: data
    params: {}
- name: data
  endpoint:
    path: /api/data
    method: GET
- name: row_actions
  endpoint:
    path: /docs/guides/row-actions
    method: GET
    data_selector: items
- name: row_numbers_feature
  endpoint:
    path: /docs/guides/row-numbers
    method: GET
    data_selector: null
    params: {}
- name: row_ordering
  endpoint:
    path: /docs/guides/row-ordering-dnd
    method: GET
    data_selector: example
- name: row_selection
  endpoint:
    path: /docs/guides/row-selection
    method: GET
    data_selector: content
    params: {}
- name: example
  endpoint:
    path: /example
    method: GET
    data_selector: data
    params: {}
- name: sorting
  endpoint:
    path: /docs/guides/sorting
    method: GET
    data_selector: sorting
    params: {}
- name: user
  endpoint:
    path: /api/data
    method: GET
    data_selector: data
    params:
      start: pagination.pageIndex * pagination.pageSize
      size: pagination.pageSize
      filters: JSON.stringify(columnFilters ?? [])
      globalFilter: globalFilter ?? ''
      sorting: JSON.stringify(sorting ?? [])
- name: sticky_header_footer
  endpoint:
    path: /guides/sticky-header-footer
    method: GET
    data_selector: relevant table options
    params: {}
- name: virtualization
  endpoint:
    path: /docs/guides/virtualization
    method: GET
    data_selector: records
- name: virtualization
  endpoint:
    path: /docs/guides/virtualization
    method: GET
    data_selector: options
    params: {}
- name: export_pdf_example
  endpoint:
    path: /examples/export-pdf
    method: GET
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: fetchedUsers
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: fetchedUsers
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: data
  endpoint:
    path: /api/data
    method: GET
    data_selector: data
    params:
      start: pagination.pageIndex * pagination.pageSize
      size: pagination.pageSize
      filters: columnFilters
      globalFilter: globalFilter
      sorting: sorting
- name: Table Options
  endpoint:
    path: /docs/api/table-options
    method: GET
- name: Column Options
  endpoint:
    path: /docs/api/column-options
    method: GET
- name: State Options
  endpoint:
    path: /docs/api/state-options
    method: GET
- name: Table Instance APIs
  endpoint:
    path: /docs/api/table-instance-apis
    method: GET
- name: Column Instance APIs
  endpoint:
    path: /docs/api/column-instance-apis
    method: GET
- name: Row Instance APIs
  endpoint:
    path: /docs/api/row-instance-apis
    method: GET
- name: Cell Instance APIs
  endpoint:
    path: /docs/api/cell-instance-apis
    method: GET
notes:
- Pre-Built or 100% Custom options available
- Supports over 30 i18n Locales
- Mantine React Table is built on top of TanStack Table V8 and Mantine V6.
- Customization is treated as a top priority to let you override any styles you need
  to change.
- Mantine React Table is licensed under the MIT License and is free to use in both
  personal and commercial projects.
- Mantine React Table V2 is Coming
- Mantine React Table V2 for Mantine V7 is currently in development.
- MRT V1 will not work with Mantine V7.
- MRT V2 will be released by the end of 2023 and will work with Mantine V7.
- This option allows you to define custom aggregation functions that can be referenced
  in a column's aggregationFn option by their key
- Set this option to override any of the autoReset... feature options.
- You can choose between 3 different built-in pagination display modes. Use the default
  pagination UI, mantine's pagination component, or a custom pagination component.
- You can choose between 3 different built-in select display modes. Use the default
  checkboxes, radio buttons, or switches.
- Supports various column options for table configurations.
- No Description Provided... Yet...
- These are NOT column options for Mantine React Table. These are just static methods
  on a column instance that you can use.
- Mantine React Table gives you a lot out of the box, but it's also easy to turn off
  any features that you do not need.
- Uses client-side features for table interactions.
- MRT display columns can still work, optionally override cell renders with `displayColumnDefOptions`
- Must use memoized or stable data
- Uses a default pagination of 20 rows per page
- Mantine React Table does not have a data exporting feature built-in. However, you
  can easily integrate your own exporting features.
- Uses a modal for editing user data
- Includes validation for required fields
- This is just a simple mock of a backend API where you would do server-side pagination,
  filtering, and sorting.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Uses row virtualization for performance with large datasets
- Optionally enable features like pagination and column resizing
- Uses manual filtering and sorting
- Recommended to enable row virtualization if likely to render more than 100 rows
- TypeScript is not required to use Mantine React Table.
- You can use JavaScript and still access all functionalities.
- Set column widths by using the size option in column definition.
- Default column alignment is left-aligned.
- Display columns do not have any processing features, such as sorting, filtering,
  grouping, etc. enabled on them by default.
- Mantine V7 is getting rid of emotion and the sx prop.
- Uses Font Awesome for icons
- Mantine React Table has full support for localization (i18n).
- Some locales are included by default, but custom translations can be added.
- Memoizing components can break certain features.
- Using memoization can improve render performance.
- memoize table body to improve render performance, but break all features
- You can add ANY event listener to ANY component in Mantine React Table.
- This guide shows you how to customize toolbars in Mantine React Table.
- If rendering top toolbar buttons, sometimes you want alerts to be at the bottom.
- Mantine React Table has built-in grouping and aggregation features.
- Enables manual grouping.
- Uses react-query for data fetching
- By default, Mantine React Table renders a column actions button for each column
  header.
- Filtering is enabled by default and can be customized.
- The table supports manual server-side filtering.
- Filtering features can be customized via table options.
- The column hiding feature is enabled by default.
- You can easily hide columns by default by setting the columnVisibility state or
  initialState to hide the desired columns by id.
- If you do not want this feature to be enabled at all, you can disable it by setting
  the enableHiding prop to false.
- Drag and Drop is not currently supported on mobile touch devices.
- Column pinning can simply be enabled by setting the `enablePinning` table option
  to `true`.
- Column resizing feature is enabled by setting enableColumnResizing to true.
- Density toggle button included in the top toolbar by default
- Default density is 'md'
- Density options include 'xs', 'sm', 'md', 'lg', 'xl'
- To add a detail panel to a row, all you need to do is add a renderDetailPanel table
  option.
- If you want some or all rows to be expanded by default, you can specify that in
  the initialState.expanded table option.
- Mantine React Table supports full CRUD functionality.
- The default editing mode is 'modal'.
- Enable expanding sub-rows by setting enableExpanding to true.
- The sub-rows must be formatted correctly to allow for expansion.
- Uses React for rendering components.
- Each person can have sub rows of more people.
- The full screen toggle button is enabled by default. You can hide it by setting
  the enableFullScreenToggle table option to false.
- Enable or disable highlighting text that matches the filter in the table cells.
- Client-side filtering (and global filtering) is enabled by default.
- Client-side pagination is enabled by default.
- Manual pagination is supported.
- This is just a simple mock of a backend API where you would do server-side pagination,
  filtering, and sorting
- Uses React for the UI component.
- Enable row actions by setting the enableRowActions prop to true.
- 'Two row number modes: ''original'' and ''static''.'
- Checkboxes for row selection are enabled by default.
- Client-side sorting is enabled by default.
- Multi-sorting is also enabled by default.
- Enabling the sticky header is as simple as setting the enableStickyHeader table
  option to true.
- Enabling the sticky footer is as simple as setting the enableStickyFooter table
  option to true.
- Enable row virtualization for tables with over 50 rows.
- Turn off pagination when enabling row virtualization.
- Uses row and column virtualization for performance.
- Be cautious with conditional virtualization as it may break React's Rule of Hooks.
- Full CRUD functionality available for user management.
- Uses optimistic updates for user mutations
- Full CRUD functionality can be easily implemented with Mantine React Table
- Some objects may return nulls in deeply nested fields
- Validation on email is required.
- State management for users is done using React hooks.
- Full CRUD functionality can be implemented with Mantine React Table.
errors:
- 'Element type is invalid: expected a string (for built-in components) or a class/function
  (for composite components) but got: undefined.'
- You likely forgot to export your component from the file it's defined in, or you
  might have mixed up default and named imports.
- 'If you get an error like this: ''./node_modules/@tanstack/virtual-core/build/lib/index.esm.js
  147:92 Module parse failed: Unexpected token (147:92) File was processed with these
  loaders: Then try upgrading either webpack or react-scripts to the latest versions.'
- Mantine itself does not work with React Server components and will require "use-client"
  on all components from both Mantine and MRT.
- 'Invalid request: Check the endpoint and parameters.'
- '400 Bad Request: Check for validation errors in input'
- '404 Not Found: User not found'
- '500 Internal Server Error: Check server logs for details'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Error loading data
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://www.mantine-react-table.com
  paginator:
    type: page
    default_page_size: 10
source_metadata: null
