resources:
- name: chat
  endpoint:
    path: /v2/chat
    method: POST
    data_selector: response
    params: {}
- name: embed
  endpoint:
    path: /v2/embed
    method: POST
    data_selector: response
    params: {}
- name: rerank
  endpoint:
    path: /v2/rerank
    method: POST
    data_selector: response
    params: {}
- name: chat
  endpoint:
    path: /CHAT
    method: GET
- name: embed
  endpoint:
    path: /EMBED
    method: GET
- name: rerank
  endpoint:
    path: /RERANK
    method: GET
- name: classify
  endpoint:
    path: /CLASSIFY
    method: GET
- name: command_a_vision
  endpoint:
    path: /chat
    method: POST
    data_selector: response
- name: rerank
  endpoint:
    path: /rerank
    method: POST
    data_selector: results
- name: aya
  endpoint:
    path: /aya
    method: POST
    data_selector: results
- name: command
  endpoint:
    path: /v2/command
    method: POST
    data_selector: data
    params: {}
- name: embed
  endpoint:
    path: /v2/embed
    method: POST
    data_selector: data
    params: {}
- name: rerank
  endpoint:
    path: /v2/rerank
    method: POST
    data_selector: data
    params: {}
- name: embed
  endpoint:
    path: /reference/embed
    method: GET
- name: embed_jobs
  endpoint:
    path: /reference/embed-jobs
    method: GET
- name: rerank
  endpoint:
    path: /reference/rerank
    method: GET
- name: chat
  endpoint:
    path: /chat
    method: POST
    data_selector: message
- name: command-a-vision
  endpoint:
    path: /chat
    method: POST
    data_selector: response
    params: {}
- name: chat
  endpoint:
    path: /v2/chat
    method: POST
- name: tokenize
  endpoint:
    path: /reference/tokenize
    method: POST
    data_selector: tokens
- name: detokenize
  endpoint:
    path: /reference/detokenize
    method: POST
    data_selector: text
- name: chat
  endpoint:
    path: /v2/chat
    method: POST
    data_selector: response.message.content
    params: {}
- name: safety_modes
  endpoint:
    path: /safety-modes
    method: GET
    data_selector: safety_modes
    params: {}
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
    params: {}
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
    params: {}
- name: embed_documents
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
    params: {}
- name: embed_query
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
    params: {}
- name: embed
  endpoint:
    path: /v2/embed
    method: POST
    data_selector: response
    params: {}
- name: embed_jobs
  endpoint:
    path: /v2/embed_jobs
    method: POST
    data_selector: embed_job
    params: {}
- name: datasets
  endpoint:
    path: /v2/datasets
    method: POST
    data_selector: dataset
    params: {}
- name: fine_tuning_chat
  endpoint:
    path: /docs/chat-fine-tuning
    method: GET
- name: fine_tuning_classify
  endpoint:
    path: /docs/classify-fine-tuning
    method: GET
- name: fine_tuning_rerank
  endpoint:
    path: /docs/rerank-fine-tuning
    method: GET
- name: datasets
  endpoint:
    path: /v2/datasets
    method: POST
    data_selector: result
- name: finetuning
  endpoint:
    path: /v2/finetuned-models
    method: POST
    data_selector: result
- name: function_tool
  endpoint:
    method: POST
- name: chat
  endpoint:
    path: /v2/chat
    method: POST
    data_selector: response
- name: embed
  endpoint:
    path: /v2/embed
    method: POST
    data_selector: embeddings
- name: rerank
  endpoint:
    path: /v2/rerank
    method: POST
    data_selector: ranked_results
- name: datasets
  endpoint:
    path: /datasets
    method: POST
    data_selector: dataset
    params: {}
- name: get_dataset
  endpoint:
    path: /datasets/{id}
    method: GET
    data_selector: dataset
    params: {}
- name: delete_dataset
  endpoint:
    path: /datasets/{id}
    method: DELETE
    data_selector: dataset
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: POST
    data_selector: dataset
    params: {}
- name: command_a
  endpoint:
    path: /reference/chat
    method: GET
- name: Chat
  endpoint:
    path: /reference/chat
    method: GET
- name: command-r-plus-08-2024
  endpoint:
    path: /reference/chat
    method: GET
    data_selector: model
    params: {}
- name: command-r-plus-04-2024
  endpoint:
    path: /reference/chat
    method: GET
    data_selector: model
    params: {}
- name: command-r-plus
  endpoint:
    path: /reference/chat
    method: GET
    data_selector: model
    params: {}
- name: command-r-08-2024
  endpoint:
    path: /reference/chat
    method: GET
    data_selector: model details
- name: command-r-03-2024
  endpoint:
    path: /reference/chat
    method: GET
    data_selector: model details
- name: command-r
  endpoint:
    path: /reference/chat
    method: GET
    data_selector: model details
- name: chat
  endpoint:
    path: /v2/chat
    method: POST
- name: chat
  endpoint:
    path: /chat
    method: POST
    data_selector: response.message.content
    params: {}
- name: chat
  endpoint:
    path: /chat
    method: POST
    data_selector: response.message.content
    params: {}
- name: rerank
  endpoint:
    path: /v2/rerank
    method: POST
- name: embed
  endpoint:
    path: /v2/embed
    method: POST
- name: embed
  endpoint:
    path: /v2/embed
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: classify
  endpoint:
    path: /v1/classify
    method: POST
    data_selector: classifications
    params: {}
- name: command
  endpoint:
    path: /v2/generate
    method: POST
    data_selector: response
- name: embed-english
  endpoint:
    path: /v2/embed
    method: POST
    data_selector: response
- name: rerank-english
  endpoint:
    path: /v2/rerank
    method: POST
    data_selector: response
- name: Command A Vision
  endpoint:
    path: /chat/api
    method: POST
    data_selector: response
    params: {}
- name: command_a_vision
  endpoint:
    path: /v2/chat
    method: POST
    data_selector: response
    params: {}
- name: command-a-vision
  endpoint:
    path: /v2/reference/chat
    method: GET
- name: chat_completions
  endpoint:
    path: /v2/chat
    method: POST
    data_selector: choices
- name: embeddings
  endpoint:
    path: /v2/embed
    method: POST
    data_selector: embeddings
- name: rerank
  endpoint:
    path: /v2/rerank
    method: POST
    data_selector: model
    params:
      model: rerank-v3.5
      max_tokens_per_doc: 4096
- name: command_chat
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: result
    params: {}
- name: embed
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: result
    params: {}
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
    data_selector: result
    params: {}
- name: rerank
  endpoint:
    path: /v2/rerank
    method: POST
    data_selector: results
    params: {}
- name: web_search
  endpoint:
    path: /web-search
    method: GET
    data_selector: results
    params: {}
- name: chat
  endpoint:
    path: /v2/chat
    method: POST
    data_selector: message
    params: {}
- name: embed
  endpoint:
    path: /v2/embed
    method: POST
    data_selector: embedding
    params: {}
- name: rerank
  endpoint:
    path: /v2/rerank
    method: POST
    data_selector: reranked
    params: {}
- name: text_generation_v1
  endpoint:
    path: /v1/text-generation
    method: POST
    data_selector: chunk
    params: {}
- name: text_generation_v2
  endpoint:
    path: /v2/text-generation
    method: POST
    data_selector: chunk
    params: {}
- name: chat
  endpoint:
    path: /v2/chat
    method: POST
    data_selector: value
    params:
      stream: true
      model: command-a-03-2025
      messages: []
- name: Chat
  endpoint:
    path: /v1/reference/chat
    method: GET
- name: chat
  endpoint:
    path: /v1/reference/chat
    method: POST
    data_selector: response
- name: rerank
  endpoint:
    path: /reference/rerank-1
    method: POST
    data_selector: response
- name: embed
  endpoint:
    path: /v1/reference/embed
    method: POST
    data_selector: response
- name: classify
  endpoint:
    path: /v1/reference/classify
    method: POST
    data_selector: response
- name: command-a-vision
  endpoint:
    path: /v1/reference/about
    method: GET
    data_selector: data
- name: chat
  endpoint:
    path: /v1/reference/chat
    method: GET
- name: embed
  endpoint:
    path: /v1/reference/embed
    method: GET
- name: embed
  endpoint:
    path: /v1/reference/embed
    method: GET
    data_selector: records
- name: command
  endpoint:
    path: /v1/reference/chat
    method: GET
    data_selector: records
- name: rerank
  endpoint:
    path: /v1/reference/rerank
    method: GET
    data_selector: models
    params: {}
- name: aya
  endpoint:
    path: /v1/reference/chat
    method: GET
    data_selector: models
    params: {}
- name: embed
  endpoint:
    path: /v1/reference/embed
    method: GET
    data_selector: records
- name: embed_jobs
  endpoint:
    path: /reference/embed-jobs
    method: GET
    data_selector: records
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
- name: chat
  endpoint:
    path: /chat
    method: POST
    data_selector: text
- name: event
  endpoint:
    path: /streaming/events
    method: GET
    data_selector: events
- name: chat
  endpoint:
    path: /v1/reference/chat
    method: POST
    data_selector: text
- name: search_queries
  endpoint:
    path: /v1/reference/chat
    method: POST
    data_selector: search_queries
    params:
      search_queries_only: true
- name: fetch_documents
  endpoint:
    path: /docs/documents-and-citations
    method: POST
    data_selector: documents
    params: {}
- name: tokenize
  endpoint:
    path: /v1/reference/tokenize
    method: POST
- name: detokenize
  endpoint:
    path: /v1/reference/detokenize
    method: POST
- name: summarize
  endpoint:
    path: /co/chat
    method: POST
    data_selector: message
    params: {}
- name: summarize_text
  endpoint:
    path: /v1/docs/summarizing-text
    method: POST
    data_selector: response
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
    params: {}
- name: embed
  endpoint:
    path: /v1/embed
    method: POST
    data_selector: embeddings
- name: embed
  endpoint:
    path: /v1/embed
    method: POST
    data_selector: embeddings
    params: {}
- name: embed_documents
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
    params:
      model: embed-v4.0
      output_dimension: 1024
      input_type: search_document
      embedding_types:
      - float
- name: embed_query
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
    params:
      model: embed-v4.0
      output_dimension: 1024
      input_type: search_query
      embedding_types:
      - float
- name: embed
  endpoint:
    path: /v1/reference/embed
    method: POST
    data_selector: embeddings
    params: {}
- name: embed_job
  endpoint:
    path: /datasets
    method: GET
    data_selector: output_dataset
    params: {}
- name: embed_jobs
  endpoint:
    path: /v1/embed-jobs
    method: POST
    data_selector: job_id
- name: datasets
  endpoint:
    path: /v1/datasets
    method: POST
    data_selector: dataset_id
- name: fine_tuning_chat
  endpoint:
    path: /v1/docs/chat-fine-tuning
    method: GET
- name: fine_tuning_classify
  endpoint:
    path: /v1/docs/classify-fine-tuning
    method: GET
- name: fine_tuning_rerank
  endpoint:
    path: /v1/docs/rerank-fine-tuning
    method: GET
- name: datasets
  endpoint:
    path: /v1/datasets
    method: POST
    data_selector: ''
    params: {}
- name: finetuned_models
  endpoint:
    path: /v1/finetuned_models
    method: POST
    data_selector: ''
    params: {}
- name: multiply_tool
  endpoint:
    method: POST
- name: add_tool
  endpoint:
    method: POST
- name: Cohere Chat
  endpoint:
    path: /v1/chat
    method: POST
- name: Cohere Embedding
  endpoint:
    path: /v1/embed
    method: POST
- name: Cohere Rerank
  endpoint:
    path: /v1/rerank
    method: POST
- name: create_dataset
  endpoint:
    path: /datasets/create
    method: POST
    data_selector: dataset
    params: {}
- name: fetch_dataset
  endpoint:
    path: /datasets/get
    method: GET
    data_selector: dataset
    params:
      id: <DATASET_ID>
- name: delete_dataset
  endpoint:
    path: /datasets/delete
    method: DELETE
    data_selector: response
    params:
      id: <DATASET_ID>
- name: datasets
  endpoint:
    path: /v1/datasets
    method: POST
    data_selector: datasets
    params: {}
- name: command-r-plus-08-2024
  endpoint:
    path: /v1/reference/chat
    method: GET
- name: command-r-plus-04-2024
  endpoint:
    path: /v1/reference/chat
    method: GET
- name: command-r-plus
  endpoint:
    path: /v1/reference/chat
    method: GET
- name: command-r-08-2024
  endpoint:
    path: /v1/reference/chat
    method: GET
    data_selector: model_details
    params: {}
- name: command-r-03-2024
  endpoint:
    path: /v1/reference/chat
    method: GET
    data_selector: model_details
    params: {}
- name: command-r
  endpoint:
    path: /v1/reference/chat
    method: GET
    data_selector: model_details
    params: {}
- name: chat
  endpoint:
    path: /v1/chat
    method: POST
- name: citations
  endpoint:
    path: /citations
    method: GET
    data_selector: citations
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: documents
- name: chat
  endpoint:
    path: /v1/chat
    method: GET
- name: embed
  endpoint:
    path: /v1/embed
    method: GET
- name: embed-jobs
  endpoint:
    path: /v1/embed-jobs
    method: GET
- name: rerank
  endpoint:
    path: /v1/rerank
    method: GET
- name: classify
  endpoint:
    path: /v1/classify
    method: GET
- name: datasets
  endpoint:
    path: /v1/datasets
    method: GET
- name: tokenize
  endpoint:
    path: /v1/tokenize
    method: GET
- name: detokenize
  endpoint:
    path: /v1/detokenize
    method: GET
- name: connectors
  endpoint:
    path: /v1/connectors
    method: GET
- name: models
  endpoint:
    path: /v1/models
    method: GET
- name: finetuning
  endpoint:
    path: /v1/finetuning
    method: GET
- name: titles
  endpoint:
    path: /titles
    method: GET
    data_selector: records
- name: gravity_data
  endpoint:
    path: /services/data/vXX.X/sobjects/GravityData
    method: GET
    data_selector: records
- name: alchemy_notes
  endpoint:
    path: /services/data/vXX.X/sobjects/AlchemyNotes
    method: GET
    data_selector: records
- name: Isaac Newton
  endpoint:
    path: /scientists/isaac-newton
    method: GET
    data_selector: records
- name: biography
  endpoint:
    path: /api/biography/isaac-newton
    method: GET
    data_selector: records
- name: laws_of_motion
  endpoint:
    path: /api/laws_of_motion
    method: GET
    data_selector: records
- name: gravity
  endpoint:
    path: /api/gravity
    method: GET
    data_selector: records
- name: embed
  endpoint:
    path: /v1/embed
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: meta
  endpoint:
    path: /meta
    method: GET
    data_selector: api_version
- name: classify
  endpoint:
    path: /v1/classify
    method: POST
    data_selector: classifications
    params: {}
- name: Chat
  endpoint:
    path: /v1/reference/chat
    method: GET
- name: messages
  endpoint:
    path: /tool/call
    method: POST
    data_selector: content
    params: {}
- name: get_weather
  endpoint:
    path: /v2/tool_use
    method: POST
    data_selector: messages
    params: {}
- name: get_weather
  endpoint:
    path: /weather
    method: POST
    data_selector: data
    params: {}
- name: get_weather
  endpoint:
    path: /weather
    method: GET
    data_selector: temperature
    params:
      location: string
- name: get_capital_city
  endpoint:
    path: /capital_city
    method: GET
    data_selector: capital_city
    params:
      country: string
- name: system_message
  endpoint:
    path: /v2/system/messages
    method: POST
    data_selector: response
    params: {}
- name: system_message
  endpoint:
    path: /v2/system/message
    method: POST
    data_selector: response
    params: {}
- name: command-a-vision
  endpoint:
    path: /v1/models/command-a-vision
    method: GET
    data_selector: model_details
- name: chat
  endpoint:
    path: /v2/chat
    method: POST
    data_selector: message
    params:
      stream: 'false'
      model: command-a-03-2025
      messages: []
- name: vectorstore_search
  endpoint:
    path: /vectorstore/search
    method: POST
    data_selector: results
- name: internet_search
  endpoint:
    path: /internet/search
    method: POST
    data_selector: results
notes:
- The content of Authorization should be in the shape of BEARER [API_KEY].
- Cohere allows developers and enterprises to build LLM-powered applications.
- Fine-tuning can be done with generative models, multi-label classification models,
  rerank models, and chat models.
- Sign up and get an API key (trial key available)
- API key for authenticating requests to the Cohere V2 API.
- The Playground is a visual interface supporting Chat and Embed models.
- Trial API key usage is free, but limited.
- You can test different applications or build proofs of concept using all of Cohere’s
  models and APIs with a trial key.
- Cohere’s API keys have certain limitations and permissions associated with them.
- 'Rate Limits: Cohere’s API has rate limits in place to ensure fair usage.'
- Rate limits apply to API calls.
- Uses OAuth2
- The Chat API endpoint is used to generate text with Cohere LLMs.
- The Chat API is capable of streaming events.
- Cohere models capable of interacting with images are designed to work through an
  interface and API structure that looks almost exactly like all of our other Command
  models.
- Temperature is a parameter ranging from 0-1 used to tune the degree of randomness,
  and it defaults to a value of .3.
- Uses API key for authentication.
- The Command R family of models supports 128k context length.
- Safety modes provide a way to consistently and reliably set guardrails that are
  safe while still being suitable for a specific set of needs.
- Safety mode defaults to CONTEXTUAL when used with tools or documents parameters.
- 'Cohere embeddings support multiple output dimensions: [256,512,1024,1536].'
- Supports multilingual and cross-lingual searches
- Can handle multimodal PDF content for embeddings
- Image capabilities are only compatible with v4.0 and v3.0 models
- The Embed Jobs API is only compatible with embed v3.0 models.
- Dataset needs to contain `text` field.
- Fine-tuning is recommended when you want to teach the model a new task, or leverage
  your company’s unique knowledge base.
- Users must upload a Dataset with training and optionally evaluation data before
  starting a fine-tune job.
- You will receive an email notification when the fine-tuned model is ready.
- Trainings are completed sequentially, and when you launch a training session, it
  is added to the end of a queue.
- 'Cohere offers two kinds of API keys: evaluation keys (free but limited in usage),
  and production keys (paid and much less limited in usage).'
- Upon registration, every Cohere user receives a free, rate-limited trial key to
  use with our endpoints.
- You must acknowledge Cohere’s SaaS agreement and terms of service.
- A Cohere API Key is required.
- You need a Cohere API Key to access the API.
- Cohere's models can be accessed through the playground and SDK.
- To get an API key, sign up with Cohere and get the API key from the dashboard.
- If we learn that you have violated this Usage Policy or are otherwise misusing or
  abusing Cohere Services, we are entitled to restrict, suspend, or terminate your
  access to the Cohere Services.
- Models have been trained on a wide variety of text from many sources that contain
  toxic content.
- Language models capture problematic associations and stereotypes that are prominent
  on the internet and society at large.
- Datasets are automatically deleted after 30 days.
- Datasets get deleted 30 days after creation
- You can manually delete a dataset in the Dashboard UI or using the Datasets API
- Updated models include multi-step tool use capabilities.
- Models were trained with data through February 2023.
- Command R is a large language model optimized for conversational interaction and
  long context tasks.
- Command R can perform cross-lingual tasks such as translation or answering questions
  about content in other languages.
- RAG does not guarantee accuracy; it involves giving a model context which informs
  its replies.
- Use the Chat API to generate text based on documents.
- Break documents into small chunks of ±400 words for best performance.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Uses OAuth2 with refresh token requires setup of connected app in api
- You are using an experimental version, for more information please refer to https://docs.cohere.com/versioning-reference
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Use `command-light` for optimizing latency.
- Text + Image Processing supported.
- Supports multiple languages including English, Portuguese, Italian, French, German,
  and Spanish.
- The API structure is identical to existing Command models
- Command A Vision can accept images as input, but doesn’t generate them.
- The Compatibility API allows developers to use Cohere’s models through OpenAI’s
  SDK.
- Requires a paid Azure account for deployment.
- Pay-as-you-go deployment available only in specified regions.
- Supports both v1 and v2 for web search functionalities.
- Model is a required field for Embed, Rerank, Classify, and Chat.
- Embedding types is a required field for Embed.
- All request bodies are sent through JSON.
- The API structure is identical to our existing Command models, making integration
  straightforward.
- Some objects may return nulls in deeply nested fields
- Rerank accepts full strings rather than tokens.
- Rerank will automatically chunk documents longer than 510 tokens.
- Streaming improves user experience by lowering perceived latency.
- The API streams events that indicate the progress of a session.
- Structured Outputs is a feature that forces the LLM’s response to strictly follow
  a schema specified by the user.
- 'When using { "type": "json_object" } your message should always explicitly instruct
  the model to generate a JSON.'
- Requires API key for authentication
- The Chat API provides a streamlined process for retrieval-augmented generation.
- RAG does not guarantee accuracy.
- It involves giving a model context which informs its replies, but if the provided
  documents are themselves out-of-date, inaccurate, or biased, whatever the model
  generates might be as well.
- RAG doesn’t guarantee that a model won’t hallucinate.
- Inline citations allow users to verify the information.
- The Generate API is slated for deprecation on Aug 26, 2025.
- To use the Command R/R+ models for summarization, we recommend using the Chat endpoint.
- Command R and R+ support a 128k context length and Command A supports a 256k context
  length, so you can pass long documents to be summarized.
- Users can set an appropriate level of guardrailing by adding the safety_mode parameter.
- Cohere embeddings support image embeddings for embed-v4.0 and embed-v3.0.
- When using the images parameter, the image must be base64 encoded.
- 'Get your free API key: https://dashboard.cohere.com/api-keys'
- Embed v4 can process mixed-modality inputs including text and images.
- The input file types currently supported are .csv and .jsonl.
- There might be pricing differences when using fine-tuned models.
- Fine-tuning jobs can be initiated programmatically or through the Web UI.
- Uses OAuth2 with refresh token
- Trainings are completed sequentially, and when you launch a training session, it
  is added to the end of a queue. Depending on the length of our training queue, training
  may take between an hour and a day to complete.
- We recommend generating samples from both the base model and the fine-tuned model
  on a test set. Then, compare these examples directly through human evaluations.
- Standard organizations are allowed 10 jobs per day (15 jobs in total), while enterprises
  are allowed 25 jobs per day (with no limit on total).
- No, we do not delete any fine-tuned models.
- Regularly check documentation for updates on announcements regarding the status
  of models.
- When you create an account with Cohere, we automatically create a trial API key
  for you.
- A Cohere API Key is required to use the API.
- Uses API key for authentication
- Uses OAuth2 with refresh token.
- The toolkit can be deployed on single containers, AWS ECS, and GCP.
- You can also manually delete a dataset in the Dashboard UI or using the Datasets
  API
- Command R+ is a large language model, optimized for conversational interaction and
  long-context tasks.
- For most use cases, it is recommended to use the latest model Command A instead.
- For most use cases we recommend our latest model Command A instead.
- The article provides a comprehensive biography of Isaac Newton including his contributions
  to science.
- The API provides access to various datasets related to Newton's work.
- Some datasets may contain historical inaccuracies due to the passage of time.
- Command A is optimized for conversation and can use system instructions to alter
  its behavior.
- The endpoint supports a subset of the JSON Schema specification.
- 'Get your free API key here: https://dashboard.cohere.com/api-keys'
- Multi-step tool use allows sequential reasoning in workflows.
- Use the messages parameter’s 'system' role in the Chat API to set a custom system
  instruction.
- Multi-step tool use is enabled by default.
- Citations help users gain visibility into the model reasoning.
- Set force_single_step=True when creating the model.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Check your API key.'
- 400 - invalid combination of parameters
- '422 - request is malformed (eg: unsupported enum value, unknown param)'
- 499 - request is canceled by the user
- 401 - invalid api token (not relevant on AWS)
- 404 - model not found (not relevant on AWS)
- 429 - rate limit reached (not relevant on AWS)
- '400 Bad Request: Check the request parameters and data format.'
- '401 Unauthorized: Verify your API key.'
- '429 Too Many Requests: You have exceeded the rate limit.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Invalid API key.'
- '429 Too Many Requests: Rate limit exceeded.'
- 'VALIDATION_ERROR: Check the dataset format and required fields.'
- 'UPLOAD_FAILURE: Ensure the file type is supported and the path is correct.'
- '400 Bad Request: Check your request parameters and data format.'
- '401 Unauthorized: Verify your API key and permissions.'
- '404 Not Found: Ensure the endpoint exists and the request is correctly formatted.'
- No, we do not delete any fine-tuned models.
- '400: The name parameter must be set.'
- '400: The type parameter must be set.'
- '400: The dataset type is invalid.'
- '400: You have exceeded capacity.'
- '400: You have used an invalid csv delimiter.'
- '400: The name must be less than 50 characters long.'
- '404: The dataset with id '''' was not found.'
- 400 Bad Request Error
- 401 Unauthorized Error
- 403 Forbidden Error
- 404 Not Found Error
- 422 Unprocessable Entity Error
- 429 Too Many Requests Error
- 498 Invalid Token Error
- 499 Client Closed Request Error
- 500 Internal Server Error
- 501 Not Implemented Error
- 503 Service Unavailable Error
- 504 Gateway Timeout Error
- 'INVALID_API_KEY: Ensure your API key is valid.'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of your API calls.'
- '400: Bad Request Error'
- '401: Unauthorized Error'
- '403: Forbidden Error'
- '404: Not Found Error'
- '422: Unprocessable Entity Error'
- '429: Too Many Requests Error'
- '498: Invalid Token Error'
- '499: Client Closed Request Error'
- '500: Internal Server Error'
- '501: Not Implemented Error'
- '503: Service Unavailable Error'
- '504: Gateway Timeout Error'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check API key.'
- '429 Too Many Requests: Throttle your requests.'
- '400 - Bad Request: invalid request: list of documents must not be empty'
- '400 - Bad Request: invalid request: prompt must be at least 1 token long.'
- '401 - Unauthorized: no api key supplied'
- '401 - Unauthorized: invalid api token'
- '401 - Unauthorized: Your API key has expired. Please create a production key at
  dashboard.cohere.com or reach out to your contact at Cohere to continue usage.'
- '402 - Payment Required: Please add or update your payment method at https://dashboard.cohere.com/billing?tab=payment
  to continue'
- '404 - Not Found: model ‘xyz’ not found, make sure the correct model ID was used
  and that you have access to the model.'
- '429 - Too Many Requests: You are past the per minute request limit, please wait
  and try again later.'
- '499 - Request Cancelled: request cancelled'
- '500 - Server Error: unexpected internal server error'
- '400 Bad Request: Check required fields and parameter values'
- '401 Unauthorized: Verify API key and permissions'
- '429 Too Many Requests: Exceeding rate limits'
- '401 Unauthorized: Recheck API key'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Recheck API key validity'
- 'Invalid API Key: Ensure that the API key is correct and active.'
- '400 Bad Request: Check input parameters.'
- '413 Payload Too Large: Reduce the size of the request.'
- 'VALIDATION_ERROR: Check your dataset format and required fields.'
- '400: You used an invalid parameter for part: %v use file or an evaluation file.'
- '499: The upload connection was closed.'
- '400 Bad Request: Check the request parameters and try again.'
- '429 Too Many Requests: Rate limit exceeded, please try again later.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Cohere API Key
client:
  base_url: https://dashboard.cohere.com
  auth:
    type: oauth2
source_metadata: null
