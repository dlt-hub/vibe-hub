resources:
- name: media
  endpoint:
    path: /api/v1/media
    method: GET
    data_selector: records
- name: content
  endpoint:
    path: /api/v1/content
    method: GET
    data_selector: records
- name: plugins
  endpoint:
    path: /plugins
    method: GET
    data_selector: data
    params: {}
- name: content
  endpoint:
    path: /v1/items
    method: GET
    data_selector: data
- name: products
  endpoint:
    path: /v1/products
    method: GET
    data_selector: data
    params: {}
- name: articles
  endpoint:
    path: /v1/articles
    method: GET
    data_selector: data
    params: {}
- name: assets
  endpoint:
    path: /assets
    method: GET
- name: content
  endpoint:
    path: /content
    method: GET
- name: homepage
  endpoint:
    path: /
    method: POST
    data_selector: homepage
- name: blogPost
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: blogPost
  endpoint:
    path: /content-delivery-api
    method: POST
    data_selector: blogPost
- name: projects
  endpoint:
    path: /v1/projects
    method: GET
    data_selector: projects
- name: environments
  endpoint:
    path: /v1/environments
    method: GET
    data_selector: environments
- name: locales
  endpoint:
    path: /v1/locales
    method: GET
    data_selector: locales
- name: collection_models
  endpoint:
    path: /v1/collection_models
    method: GET
    data_selector: collection_models
- name: records
  endpoint:
    path: /v1/records
    method: GET
    data_selector: records
- name: content_preview
  endpoint:
    path: /content/preview
    method: GET
    data_selector: previewData
    params: {}
- name: real_time_updates
  endpoint:
    path: /real-time/updates
    method: GET
    data_selector: updatesData
    params: {}
- name: content_management
  endpoint:
    path: /content/management
    method: POST
    data_selector: managementData
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: wayfinding
  endpoint:
    path: /api/v1/wayfinding
    method: GET
    data_selector: records
- name: content
  endpoint:
    path: /api/v1/content
    method: GET
    data_selector: records
- name: content
  endpoint:
    path: /api/content
    method: GET
    data_selector: records
    params: {}
- name: 3D Art Generation
  endpoint:
    path: /api/3d-art
    method: POST
    data_selector: records
- name: content
  endpoint:
    path: /v1/items
    method: GET
    data_selector: data
- name: localization
  endpoint:
    path: /v1/localizations
    method: GET
    data_selector: data
- name: content
  endpoint:
    path: /api/content
    method: GET
    data_selector: records
- name: assets
  endpoint:
    path: /assets
    method: GET
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: data
    params: {}
- name: movie
  endpoint:
    path: /movie
    method: POST
    data_selector: data
    params: {}
- name: content
  endpoint:
    path: /api/v1/content
    method: GET
    data_selector: records
    params: {}
- name: content
  endpoint:
    path: /api/v1/content
    method: GET
    data_selector: records
- name: LinkedIn conversion tracking
  endpoint:
    path: /tracking/linkedin
    method: GET
    data_selector: device information; Trackers; Usage Data
    params: {}
- name: PostHog product analytics
  endpoint:
    path: /analytics/posthog
    method: GET
    data_selector: browser information; browsing history; city; clicks; country; device
      information; email address; first name; IP address; last name; page views; province;
      state; Trackers; username
    params: {}
- name: Google Workspace
  endpoint:
    path: /productivity/google_workspace
    method: GET
    data_selector: company name; Data communicated while using the service; email
      address; first name; last name; VAT Number
    params: {}
- name: ChargeBee
  endpoint:
    path: /payments/chargebee
    method: GET
    data_selector: various types of Data
    params: {}
- name: Quickbooks
  endpoint:
    path: /accounting/quickbooks
    method: GET
    data_selector: invoicing information
    params: {}
- name: content_items
  endpoint:
    path: /v1/items
    method: GET
    data_selector: data
- name: projects
  endpoint:
    path: /v1/projects
    method: GET
    data_selector: data
- name: plugins
  endpoint:
    path: /plugins
    method: GET
    data_selector: records
    params: {}
- name: Content Delivery API
  endpoint:
    path: /docs/content-delivery-api
    method: GET
    data_selector: content
    params: {}
- name: Content Management API
  endpoint:
    path: /docs/content-management-api
    method: GET
    data_selector: content
    params: {}
- name: Real-time Updates API
  endpoint:
    path: /docs/real-time-updates-api
    method: GET
    data_selector: content
    params: {}
- name: GraphQL APIs
  endpoint:
    path: /blog/graphql-and-datocms
    method: GET
    data_selector: content
    params: {}
- name: REST APIs
  endpoint:
    path: /rest-apis
    method: GET
    data_selector: content
    params: {}
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: records
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: data
    params: {}
- name: images
  endpoint:
    path: /images-api
    method: GET
    data_selector: records
- name: content
  endpoint:
    path: /content-api
    method: GET
    data_selector: records
- name: page_content_query
  endpoint:
    path: /performRequest
    method: POST
    data_selector: data
    params: {}
- name: locales
  endpoint:
    path: /locales
    method: GET
    data_selector: locales
- name: localizations
  endpoint:
    path: /localizations
    method: GET
    data_selector: _locales
- name: localized_content
  endpoint:
    path: /localized_content
    method: GET
    data_selector: title
- name: fallback_locales
  endpoint:
    path: /fallback_locales
    method: GET
    data_selector: title
- name: all_localizations
  endpoint:
    path: /all_localizations
    method: GET
    data_selector: _allTitleLocales
- name: allUploads
  endpoint:
    path: /allUploads
    method: POST
    data_selector: data
    params: {}
- name: _seoMetaTags
  endpoint:
    path: /seo-meta-tags
    method: GET
    data_selector: _seoMetaTags
    params: {}
- name: _faviconMetaTags
  endpoint:
    path: /favicon-meta-tags
    method: GET
    data_selector: _faviconMetaTags
    params: {}
- name: record_meta_fields
  endpoint:
    path: /meta/record
    method: GET
    data_selector: meta
    params: {}
- name: site_meta_fields
  endpoint:
    path: /meta/site
    method: GET
    data_selector: meta
    params: {}
- name: draft_record
  endpoint:
    path: /docs/content-management-api/resources/item/instances
    params:
      version: current
- name: published_record
  endpoint:
    path: /docs/content-management-api/resources/item/instances
    params:
      version: published
- name: project_template
  endpoint:
    path: /clone
    method: GET
    data_selector: project
    params: {}
- name: audit_logs
  endpoint:
    path: /docs/content-management-api/resources/audit-log-event/query
    method: GET
notes:
- 'The channel URL is ephemeral: after 15 seconds you will no longer be able to access
  it, so be sure to connect to it within a few seconds.'
- All API tokens are now fully deletable.
- New DatoCMS projects will no longer generate a default full-access API token.
- Supports real-time updates and automatic image optimization.
- Uses OAuth2 with refresh token — requires setup of connected app in DatoCMS
- Uses OAuth2 for authentication
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Creating an omnichannel customer journey can boost your revenue.
- Knowledge management is simplified with DatoCMS.
- Plugins are open-sourced and available for community use.
- Plugins are used for managing products and assets across different markets and languages.
- HashiCorp needed a flexible and secure CMS to manage its ever-expanding multi-site
  structure.
- HashiCorp manages 35k+ records and millions of monthly API calls with ease.
- The CMS is designed for static websites and supports multiple languages.
- Uses API key for authentication.
- Make sure you set DATOCMS_CDA_TOKEN as an actual API token of your DatoCMS project.
- API token must be created in Settings > API Tokens with read-only access to the
  Content Delivery API.
- Requires an API key for access
- The media area is where you manage all your images, videos, audio files, and other
  documents.
- Some objects like Contact may return nulls in deeply nested fields
- In the Free plan, you can't go over the allowed monthly limits.
- DatoCMS supports multiple languages out of the box.
- Static websites are faster, more secure, and scale incredibly well because they
  run on CDNs instead of constantly hitting a server.
- Requires proper authentication setup to access the API.
- DatoCMS's GraphQL API Explorer allows efficient data queries
- The plugin ecosystem enhances the editorial experience
- Localization is a core feature for European clients.
- The media library integrates well with imgix’s API.
- Supports multi-language content management.
- Supports modular content and dynamic layouts.
- Automatically serve the best output
- Reducing the average file size by 50% and preserves high quality, all with zero
  development effort on your side
- Test upcoming website updates, without breaking the live website
- Ensure nothing gets published by mistake
- DatoCMS supercharges your content approval workflow
- Different content requires different processes
- Real-time API allows for instant data updates without requiring a refresh.
- API tokens are required for authentication.
- Content Delivery API is written in GraphQL.
- Allows real-time previews of changes made in DatoCMS
- Svelte's simple approach to code and GraphQL's efficient data fetching is a dream
  combo.
- Uses API key for authentication
- Flexible pricing that respects your budget, without the pressure to upgrade to an
  Enterprise-level plan too soon.
- DatoCMS offers a clean editing interface and a delightful developer experience.
- Automatic updates keep your system up-to-date effortlessly, and you've got the option
  to review updates that may cause disruptions before they go live.
- Localization requires yet another plugin, and comes with more limited functionalities.
- All data is encrypted in transit with TLS, both internally between services and
  externally when reaching the users.
- All database data are encrypted at rest.
- This Application collects some Personal Data from its Users.
- Users are responsible for any third-party Personal Data obtained, published or shared
  through this Application.
- Some services may use Trackers to identify Users or use behavioral retargeting.
- IP addresses collected for internal traffic monitoring are deleted after 2 months.
- Users have the right to access their Personal Data.
- Users may withdraw their consent at any time.
- This privacy policy relates solely to this Application, if not stated otherwise
  within this document.
- DatoCMS takes great care when handling users' personally identifiable data.
- Personal data is stored in the DatoCMS databases managed by AWS.
- API access is subject to rate limits.
- Ensure to handle token expiration properly.
- Account credentials cannot be shared with other individuals and username and password
  must be kept safe and secret.
- The Customer is responsible for maintaining the confidentiality of their Account
  password.
- Uses OGC standards for storing and exchange of spatial data.
- Plugins are a fundamental feature to extensibility and integrations within DatoCMS.
- Uses a Content-as-a-Service model to manage a single website serving over 35 territories.
- The platform provides ready-made components for efficient template creation.
- DatoCMS is designed for easy integration with Gatsby.
- If you want to use real-time updates on the browser, the easiest way is to use one
  of our libraries.
- They will handle all the hard-wiring for you, including reconnecting to a new subscription
  channel in case of network errors.
- Every plan comes with a technical limit of a maximum of 500 concurrent connections
  per project.
- Make sure that the 'Access the Content Delivery API' or 'Access the Content Delivery
  API in Preview Mode' flags are enabled, otherwise the API token will not be able
  to make calls to the CDA.
- The query name approximates the plural rules of the English language.
- X-Include-Drafts cannot be false
- X-Exclude-Invalid can only return records that are certain to have been properly
  checked using the latest validation rules available
- There are no rate-limits enforced on requests that hit our CDN cache.
- When you update a specific model/record/asset, all GraphQL queries that reference
  those objects will get invalidated.
- Each DatoCMS plan comes with a maximum allowed complexity cost which is 10,000,000
  by default.
- Default limit is 20 records
- Maximum limit is 500 records
- Truncation to the nearest minute may cause filters to return unintended records.
- Truncation to the nearest minute may cause filters to return unintended records
- 'Truncation to the nearest minute may cause filters to return unintended records
  (e.g., `gt: "2025-05-06T09:36:01+02:00"` becomes `gt: "2025-05-06T09:36:00+02:00"`
  and unexpectedly includes records at `2025-05-06T09:36:01+02:00`).'
- 'Add an additional filter condition (like `slug: {neq: $slug}` in the example below)
  to ensure unintended records are excluded from the results.'
- Deep filtering needs to be explicitly enabled on a per-field basis.
- Deep filtering is currently limited to only one level of depth.
- Deep filtering is currently limited to the Content Delivery API (CDA / GraphQL).
- Using the Content Delivery API, it is possible to follow links between records in
  both directions.
- All the assets are augmented with some extra fields exposed via the GraphQL API.
- Using those transformations will cause our API to return the incorrect image width
  and height, and you must manually calculate and override them on your frontend instead.
- Add an additional filter condition to ensure unintended records are excluded from
  the results
- Add an additional filter condition to ensure unintended records are excluded from
  the results.
- To access cache tags, include the X-Cache-Tags header in GraphQL POST requests.
- Cache tags are not readable and are designed to be opaque.
- 'Filtering fields with `{eq: null}` will return an error message in response payload.'
- 'Filtering fields with `{exists: null}` will return an error message in response
  payload.'
- Roles can grant/deny the ability to access and configure the project's administrative
  settings.
- The permission to access the environments takes precedence over the content-level
  permissions set inside a specific environment.
- Workflows is a feature available only to Enterprise customers.
- DatoCMS needs to get a status code `2XX` reply from the configured URL to confirm
  that the notification sent via HTTP POST has been successfully delivered.
- If your service exceeds the timeout limits, DatoCMS will terminate the connection.
- The job of building and deploying your static website is not performed directly
  by DatoCMS, but is delegated to an external Continuous Deployment/Continuous Integration
  service.
- All new DatoCMS projects will ensure enhanced security by implementing a new behavior.
errors:
- 'INVALID_QUERY: The query returned an erroneous response. Please consult the response
  details to understand the cause.'
- '401 Unauthorized: Check your API key or permissions.'
- '404 Not Found: Verify the endpoint path.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of your requests.'
- 'INVALID_TOKEN: Ensure your OAuth token is valid.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check your API key or OAuth token.'
- '403 Forbidden: Ensure you have the necessary permissions.'
- '400 Bad Request: Check parameters in the request'
- '401 Unauthorized: Check your API token or permissions.'
- '429 Too Many Requests: You have exceeded your rate limit.'
- 'INVALID_X_INCLUDE_DRAFTS_HEADER: X-Include-Drafts header can only be set to `true`'
- INVALID_AUTHORIZATION_HEADER
- INVALID_ENVIRONMENT
- INVALID_JSON_BODY
- ENVIRONMENT_NOT_READY
- DEACTIVATED_SITE
- SITE_NOT_READY
- INSUFFICIENT_PERMISSIONS
- INVALID_X_INCLUDE_DRAFTS_HEADER
- INVALID_X_EXCLUDE_INVALID_HEADER
- INVALID_X_VISUAL_EDITING_HEADER
- INVALID_X_BASE_EDITING_URL_HEADER
- '429: Rate limit exceeded. Implement a retry mechanism.'
- Query has complexity of xxx, which exceeds max complexity of yyy
- 'Depth Limit: Cannot filter records based on the content of blocks deeply nested
  inside other blocks.'
- 'Technical Limitations: Deep filtering is only available for Content Delivery API.'
- 'Failed: The webhook call could not be successfully delivered.'
- 'Rescheduled: The webhook delivery failed, but is scheduled to be retried automatically
  based on the webhook automatic retries setting.'
- Field 'blackFridayOffer' doesn't exist on type 'Query'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://dashboard.datocms.com
  auth:
    type: oauth2
source_metadata: null
