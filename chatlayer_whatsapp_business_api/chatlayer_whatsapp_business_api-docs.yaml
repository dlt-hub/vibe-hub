resources:
- name: leads
  endpoint:
    path: /leads
    method: POST
    data_selector: data
    params: {}
- name: bot
  endpoint:
    path: /bots
    method: POST
    data_selector: bot
    params:
      name: Leadzy
      primary_language: English
- name: intents
  endpoint:
    path: /intents
    method: GET
    data_selector: intents
    params: {}
- name: intents
  endpoint:
    path: /intents
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: collect_input
  endpoint:
    path: /collect/input
    method: POST
    data_selector: data
    params: {}
- name: web_channel
  endpoint:
    path: /channels/web
    method: POST
    data_selector: widget
    params: {}
- name: publish_bot
  endpoint:
    path: /bots/publish
    method: POST
    data_selector: publish_info
    params: {}
- name: web_channel
  endpoint:
    path: /channels/web
    method: POST
    data_selector: data
    params: {}
- name: Accounts
  endpoint:
    path: /shr9h2cv6y5LzTr5q/tblpP867BDn6KHPXK
    method: GET
- name: Cards
  endpoint:
    path: /shr9h2cv6y5LzTr5q/tblpP867BDn6KHPXK
    method: GET
- name: Office Locations
  endpoint:
    path: /shr9h2cv6y5LzTr5q/tblpP867BDn6KHPXK
    method: GET
- name: account_balance
  endpoint:
    path: /account/balance
    method: GET
    data_selector: records
- name: card_limit
  endpoint:
    path: /card/limit
    method: GET
    data_selector: records
- name: report_lost_card
  endpoint:
    path: /card/report
    method: POST
    data_selector: records
- name: office_locations
  endpoint:
    path: /office/locations
    method: GET
    data_selector: records
- name: account
  endpoint:
    path: /shrWNu14PYWGOuWMx
    method: GET
- name: feedback
  endpoint:
    path: /v0/{baseId}/{tableName}
    method: POST
    data_selector: records
- name: locations
  endpoint:
    path: /v0/(YOUR_BASE_ID)/(YOUR_TABLE_NAME)
    method: GET
    data_selector: records
- name: nearest_location
  endpoint:
    path: /find-nearest-location
    method: GET
    data_selector: locations
    params: {}
- name: Tables
  endpoint:
    path: /start-quickly/bot-templates/gym#tables
- name: Lead generation
  endpoint:
    path: /start-quickly/bot-templates/gym#lead-generation
    method: GET
    data_selector: details
    params: {}
- name: Group classes EN
  endpoint:
    path: /start-quickly/bot-templates/gym#group-classes-en
    method: GET
    data_selector: classes
    params: {}
- name: Group classes DE
  endpoint:
    path: /start-quickly/bot-templates/gym#group-classes-de
    method: GET
    data_selector: classes
    params: {}
- name: job_applications
  endpoint:
    path: /job_applications
    method: GET
- name: candidates
  endpoint:
    path: /v0/{base_id}/{table_name}
    method: POST
- name: user_details
  endpoint:
    path: /api/user_details
    method: POST
    data_selector: data
    params: {}
- name: feedback
  endpoint:
    path: /nps/feedback
    method: POST
    data_selector: responses
- name: ratings
  endpoint:
    path: /navigation/tables
    method: POST
    data_selector: ratings
    params: {}
- name: customerorders
  endpoint:
    path: /v0/{baseId}/customerorders
    method: GET
- name: feedback
  endpoint:
    path: /v0/{baseId}/feedback
    method: POST
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: data
- name: user_flow
  endpoint:
    path: /user-flow
    method: GET
    data_selector: analytics
- name: translations
  endpoint:
    path: /api/translations
    method: GET
    data_selector: translations
    params: {}
- name: Variables Changed event
  endpoint:
    path: /events/variables-changed
    method: POST
    data_selector: events
    params: {}
- name: Silence Detected event
  endpoint:
    path: /events/silence-detected
    method: POST
    data_selector: events
    params: {}
- name: intents
  endpoint:
    path: /v1/intents
    method: GET
    data_selector: intents
- name: entities
  endpoint:
    path: /v1/entities
    method: GET
    data_selector: entities
- name: intents
  endpoint:
    path: /intents
    method: POST
    data_selector: intents
    params: {}
- name: expressions
  endpoint:
    path: /v1/expressions
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /api/campaign_member
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /api/contact
    method: GET
    data_selector: records
- name: knowledge_base_answer
  endpoint:
    path: /knowledgebase/answer
    method: GET
- name: KBAI_questions
  endpoint:
    path: /tables/kbai_questions
    method: GET
    data_selector: questions
- name: QuestionCollection
  endpoint:
    path: /navigation/tables/create-a-table-with-records
    method: POST
    data_selector: records
- name: conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: data
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: records
- name: transcripts
  endpoint:
    path: /transcripts
    method: GET
    data_selector: records
- name: voice_recordings
  endpoint:
    path: /voice_recordings
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/v1/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/v1/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
    params: {}
- name: Tables
  endpoint:
    path: /tables
    method: GET
    data_selector: records
- name: table
  endpoint:
    path: /navigation/tables
    method: GET
    data_selector: tables
    params: {}
- name: Integer
  endpoint:
    path: /navigation/tables/column-types/integer
    method: GET
    data_selector: use_cases
- name: Boolean
  endpoint:
    path: /navigation/tables/column-types/boolean
    method: GET
    data_selector: use_cases
- name: Timestamp
  endpoint:
    path: /navigation/tables/column-types/timestamp
    method: GET
    data_selector: use_cases
- name: Text
  endpoint:
    path: /navigation/tables/column-types/text
    method: GET
    data_selector: use_cases
- name: insert_record
  endpoint:
    path: /navigation/tables/operate-on-your-records/insert-record
    method: GET
    data_selector: ''
    params: {}
- name: update_record
  endpoint:
    path: /navigation/tables/operate-on-your-records/update-record
    method: GET
    data_selector: ''
    params: {}
- name: retrieve_record
  endpoint:
    path: /navigation/tables/operate-on-your-records/retrieve-record
    method: GET
    data_selector: ''
    params: {}
- name: delete_record
  endpoint:
    path: /navigation/tables/operate-on-your-records/delete-record
    method: GET
    data_selector: ''
    params: {}
- name: Maximum message length
  endpoint:
    path: /navigation/settings/maximum-message-length
    method: GET
    data_selector: settings
    params: {}
- name: Bot behaviour
  endpoint:
    path: /navigation/settings/bot-behaviour
    method: GET
    data_selector: settings
    params: {}
- name: Language detection
  endpoint:
    path: /navigation/settings/language-detection
    method: GET
    data_selector: settings
    params: {}
- name: human_handover
  endpoint:
    path: /integrateandcode/human-offloading-live-chat
    method: GET
    data_selector: records
    params: {}
- name: variables
  endpoint:
    path: /variables
    method: GET
    data_selector: data
- name: Import/Export
  endpoint:
    path: /import-export
    method: GET
    data_selector: exports
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: data
    params: {}
- name: blocks
  endpoint:
    path: /api/blocks
    method: GET
    data_selector: data
    params: {}
- name: conversations
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: data
    params: {}
- name: blocks
  endpoint:
    path: /blocks
    method: GET
    data_selector: blocks
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: entities
- name: nlp_training
  endpoint:
    path: /nlp/train
    method: POST
    data_selector: response
    params: {}
- name: intents
  endpoint:
    path: /nlp/intents
    method: GET
- name: entities
  endpoint:
    path: /nlp/entities
    method: GET
- name: export_intents
  endpoint:
    path: /export/intents
    method: POST
    data_selector: intents
    params: {}
- name: import_intents
  endpoint:
    path: /import/intents
    method: POST
    data_selector: intents
    params: {}
- name: export_entities
  endpoint:
    path: /export/entities
    method: POST
    data_selector: entities
    params: {}
- name: import_entities
  endpoint:
    path: /import/entities
    method: POST
    data_selector: entities
    params: {}
- name: sentiment
  endpoint:
    path: /nlp/sentiment
    method: GET
    data_selector: nlp.sentiment
    params: {}
- name: sentiment_analysis
  endpoint:
    path: /nlp/sentiment-analysis
    method: POST
    data_selector: sentiment
    params: {}
- name: languages
  endpoint:
    path: /languages
    method: GET
    data_selector: languages
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: data
    params: {}
- name: languages
  endpoint:
    path: /nlp/languages/supported-languages
    method: GET
    data_selector: supported_languages
    params: {}
- name: Sinch Conversation API
  endpoint:
    path: /channels/sinch-conversation-api-beta
    method: GET
- name: Web V2
  endpoint:
    path: /channels/all-channels/web/web-v2
    method: GET
- name: WhatsApp Business API
  endpoint:
    path: /channels/sinch-conversation-api-beta/whatsapp
    method: GET
- name: Webhook Message API
  endpoint:
    path: /channels/all-channels/webhook-api
    method: POST
    data_selector: message
- name: webhook_messages
  endpoint:
    path: /customer/webhook/endpoint
    method: POST
    data_selector: recipient
    params: {}
- name: Carousels
  endpoint:
    path: /channels/sinch-conversation-api-beta
    method: GET
    data_selector: rcs_features
- name: campaign_member
  endpoint:
    path: /api/v1/campaign_member
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /api/v1/contact
    method: GET
    data_selector: records
- name: example_resource
  endpoint:
    path: /example/endpoint
    method: GET
    data_selector: data
    params: {}
- name: records
  endpoint:
    path: /v0/(yourAppId)/(yourTableName)
    method: POST
    data_selector: records
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: data
    params: {}
- name: meetups
  endpoint:
    path: /(yourAppId)/(yourTableName)
    method: GET
    data_selector: records
- name: NumberToWords
  endpoint:
    path: /NumberToWords
    method: POST
    data_selector: NumberToWordsResult
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: GET
    data_selector: data
- name: conversations
  endpoint:
    path: /v1/conversations
    method: GET
    data_selector: data
- name: update_record
  endpoint:
    path: /update_record
    method: POST
    data_selector: record
    params: {}
- name: ticket
  endpoint:
    path: /api/v2/tickets
    method: POST
    data_selector: ticket
    params: {}
- name: ticket
  endpoint:
    path: /api/ticket
    method: POST
- name: notes
  endpoint:
    path: /api/ticket/notes
    method: POST
- name: replies
  endpoint:
    path: /api/ticket/replies
    method: POST
- name: contact
  endpoint:
    path: /api/contact
    method: POST
- name: create_ticket
  endpoint:
    path: /api/v2/tickets
    method: POST
    data_selector: ticket
    params: {}
- name: add_notes
  endpoint:
    path: /api/v2/tickets/{ticket_id}/notes
    method: POST
    data_selector: note
    params: {}
- name: add_replies
  endpoint:
    path: /api/v2/tickets/{ticket_id}/replies
    method: POST
    data_selector: reply
    params: {}
- name: create_contact
  endpoint:
    path: /api/v2/contacts
    method: POST
    data_selector: contact
    params: {}
- name: conversation
  endpoint:
    path: /conversations
    method: GET
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: account
  endpoint:
    path: /services/data/vXX.X/sobjects/Account
    method: POST
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
- name: Slack
  endpoint:
    path: /slack
    method: GET
- name: incident
  endpoint:
    path: /api/incidents
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
    params: {}
- name: bots
  endpoint:
    path: /bots
    method: GET
    data_selector: bots
    params: {}
- name: human_handover
  endpoint:
    path: /integrateandcode/human-offloading-live-chat
    method: GET
    data_selector: user
- name: call_attached_data
  endpoint:
    path: /call-attached-data
    method: POST
    data_selector: data
- name: user_information
  endpoint:
    path: /genesysCloud/userInfo
    method: GET
    data_selector: user
    params: {}
- name: custom_fields
  endpoint:
    path: /genesysCloud/customFields
    method: POST
    data_selector: fields
    params: {}
- name: health_check
  endpoint:
    path: /
    method: GET
- name: messages
  endpoint:
    path: /
    method: POST
    data_selector: messages
    params:
      challenge.verifyToken: string
- name: offload
  endpoint:
    path: /
    method: POST
    data_selector: transcript
    params: {}
- name: departments
  endpoint:
    path: /api/v2/departments
    method: GET
    data_selector: departments
- name: widgets
  endpoint:
    path: /api/v2/widgets
    method: GET
    data_selector: widgets
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: messages
- name: conversations
  endpoint:
    path: /v1/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: session
  endpoint:
    path: /v1/sessions
    method: GET
    data_selector: session
    params: {}
- name: internal_session
  endpoint:
    path: /internal/session
    method: GET
    data_selector: sessionData
- name: track_event
  endpoint:
    path: /track/event
    method: POST
    data_selector: data
    params: {}
- name: record_call
  endpoint:
    path: /voice/record_call
    method: POST
    data_selector: recording
    params: {}
- name: dtmf
  endpoint:
    path: /voice/dtmf
    method: POST
    data_selector: dtmf_response
    params: {}
- name: collect_input
  endpoint:
    path: /voice/collect_input
    method: POST
    data_selector: user_input
    params: {}
- name: conversations
  endpoint:
    path: /conversations
    method: GET
    data_selector: data
- name: billing
  endpoint:
    path: /billing
    method: GET
    data_selector: data
notes:
- Voice and video calling are not supported
- Typing indicators and read receipts are not supported
- GIFs are not supported
- iFrames are not supported
- Carousels are not supported natively by WhatsApp
- Using our easy-to-follow tutorials and visual guides, you'll be able to build a
  voice or chatbot and have personalized conversations with your customers.
- OAuth2 is required for authentication.
- Multiple support portals available to Chatlayer customers.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Ensure to set up the correct OAuth scopes for the API.
- Every bot should have a way to redirect users to a human.
- API rate limits apply.
- Store variables from button clicks.
- Add a Condition block.
- Check variables inside a Condition block and steer the conversation accordingly.
- Organize your canvas by using Auto-layout.
- Use collected variables from users inside a Send mail Action block.
- Follow the setup guide to connect your bot to a channel.
- Make sure to update the NLP after creating a bot from a template.
- Some templates offer comprehensive bot designs covering common industry-specific
  use cases.
- This template only uses an Airtable database to search for records.
- When you first imported this template, the blocks will suggest you use test@sinch.com
  as email address and 6789 as credit card digits to authenticate.
- Feel free to use it as an example of what the data in your own Airtable should look
  like, but make sure to replace it once you start using the bot for your own organisation.
- Make sure to always update the NLP after loading a template!
- 'This template uses two third party services: Airtable and Google Maps API'
- You can integrate your own API calls through Action blocks.
- When customizing your own bot, the best way to go is to use your own API integration.
- Make sure to always update the NLP after loading a template.
- This template uses Airtable as an external database to store the user feedback and
  discount codes.
- The bot will look through an external database (Airtable) which contains the data
  for all your branch locations.
- This bot template is integrated with GPT to generate responses on retail use-cases,
  to make jokes or just to improvise on anything.
- This template is a gym bot that books and cancels classes for you using Tables.
- You will need to customise this block by connecting it to your own Airtable account
  and your own Airtable base.
- Make sure to always update the NLP after loading a template
- To manage orders and reservations, this chatbot uses Airtable.
- You will need your Airtable API key, which you can find on your Airtable account
  page.
- 'This template uses two third party services: Airtable, as a database for customer
  orders and Google Maps API, for finding the nearest post office.'
- Ensure to configure OAuth2 correctly for API access.
- The dashboard is the main page in our Analytics.
- If you don't see any data in the overview, you might be viewing the DRAFT data of
  your unpublished bot.
- Keep in mind that the amount of new and returning users are calculated based on
  `userId` (or `sessionId`).
- Monitor the efficiency of your conversations by looking at the average messages
  and duration per conversation to ensure quick user resolutions.
- User flow analytics provides insights into user interactions with the bot.
- Focus on the most used intents for maintenance and improvement.
- Funnels provide insights into user interactions with your bot by revealing how they
  progress through predefined steps.
- The Bot dialogs view allows you to access your blocks in a table view for easy access.
- Silence Detected events can range from 1 minute to a maximum of 1440 minutes (24
  hours).
- It's best practice to not create multiple Silence Detected events with the same
  duration.
- Ensure to use the correct OAuth scopes for authentication.
- The NLP dashboard gives you an overview of the quality of your NLP model.
- It automatically detects any overlap between intents.
- The Intents page is a crucial part of your chatbot's configuration.
- Expressions are the sentences or phrases that customers use to communicate their
  intent to the chatbot.
- After publishing your bot, you want to keep training the NLP model with real user
  input.
- Expressions from the Emulator window will not be included in the Train page.
- If two users use the exact same expression, it will only show up once in the Train
  page.
- If an expression from a user is an exact match with an expression already included
  in your model, it will not be included in the Train tab.
- In the Score column you will see the score of the NLP model at the time the expression
  was said.
- Not all things said by a user are qualitative enough for the bot to train on.
- Never add all suggested expressions without checking them as this can confuse your
  bot and mess up its training.
- We also recommend scoping expressions in case they contain unnecessary information.
- Conversation insights is a feature that should be exclusively used in the DRAFT
  version of your bot.
- Conversation insights are available after 5K of new conversations happened between
  customers and your bot.
- Some objects like Contact may return nulls in deeply nested fields
- Currently, KBAI isn't able to process any images, video's or other media types
- If the URL has scraping protection activated, such as Incapsula, the webpage won't
  be able to be added to your KBAI.
- Once you added content to your KBAI, it's time to build a flow where your bot will
  know when to browse this knowledge base to provide an answer to your customer's
  question.
- Make sure your Table has a timestamp column with a timestamp column type.
- Requires setup of OAuth2 in the Chatlayer dashboard.
- Conversations that will not be shown include test conversations and empty conversations.
- Conversations through a voice channel will include both transcripts of the entire
  conversation and audio file.
- Some channels like Facebook Messenger and Google Assistant are deprecated.
- Chatlayer's new Tables feature offers you a convenient way to manage your data in
  the form of tables.
- Please note that Tables cannot be exported at bot export yet.
- UUID is a 128-bit number used to uniquely identify information in computer systems.
- Numeric is a data type that stores numbers with a lot of precision.
- JSONB is a format for storing JSON data in a binary format.
- Tables cannot be exported at bot export yet.
- For importing more than 100 records, using an API is recommended over manual data
  import.
- The default typing speed is 1500ms.
- API requires setup of OAuth2 for authentication
- Export could take up to 30 minutes to finalize.
- Importing a bot will overwrite the current version of your bot.
- Some endpoints may have rate limits.
- Ensure proper handling of authentication tokens.
- Test the first version of your bot thoroughly.
- Any conversation flow on Chatlayer is made by components called blocks.
- Ensure to manage rate limits when making API calls.
- Some responses may be paginated.
- 3 available modes of testing inside your Emulator.
- Test your bot from your canvas to make sure it works as expected.
- Improve the Not understood block to handle unrecognized inputs gracefully.
- Go to the previous block for a more natural conversation.
- Recognize returning users to provide a personalized experience.
- Consider skipping the introduction message for returning users to streamline interactions.
- Adapt your flow based on the specific channel to enhance user experience, and reuse
  flows to maintain consistency and efficiency.
- Connect multiple bots to each other when necessary to expand functionality and provide
  seamless user interactions.
- Use AI to find and generate an answer
- Use workarounds to continue the conversation
- Uses OAuth2 with refresh token — requires setup of connected app in Chatlayer
- Not all channels save variables the same way.
- Facebook Messenger saves them indefinitely, but by default, the Web Widget only
  saves variables for the duration of the session (unless authentication of unique
  users is built in).
- In general, our advice is to try to centralize as much information within one bot,
  as long as the target audience & broad use case for that bot remains the same.
- If you use the chatlayer web widget you could send an 'event' to the web application
  to indicate that the user should be connected to another bot. This is only possible
  with the Web & Webhook channel.
- Option 2 is to use the Webhook channel, however this requires some custom implementation.
  In this case you could host a proxy service that feeds messages from the different
  channels to Chatlayer.ai.
- NLP model is unique to each bot.
- Entities should only be used if their value is needed in bot conversations
- Entities are pieces of information that can be extracted from something that the
  user says.
- Creating intents is an ongoing, iterative process.
- Uses OAuth2 with refresh token
- The AI Intent Booster is specifically crafted to boost the performance of your NLP.
- AI intent booster is particularly useful for small bots with less than 2000 expressions.
- Make sure to train your NLP after significant changes.
- Managing multiple languages in a single bot is easy on Chatlayer.
- Ensure proper OAuth setup to avoid authentication errors.
- Support for the direct Chatlayer integration with Facebook Messenger is coming to
  an end.
- You will have to go through Facebook's strict App Review process for your bot to
  be publicly available.
- Support for the Chatlayer integration with Google Assistant and Google Home speakers
  is coming to an end.
- Webhook channel provides a way to build a custom integration with Chatlayer that
  acts as a channel.
- This URL must either be publicly available, or at least available from our platform's
  IP range.
- We strongly advise using HTTPS for this endpoint.
- We recently switched to a V2 of our Web channel. All bots created from now on are
  automatically on Web V2.
- Access keys are required for API access
- Carousels are not only available for the RCS channel, but also for Viber bot, Instagram,
  and Facebook Messenger. Although Facebook Messenger only allows short and medium
  card sizes.
- Chatlayer doesn't enforce character limit in Carousels anymore, so that you can
  write as much as your channel allows.
- Integrate Chatlayer with your backend or 3rd-party services to share data with the
  bot, or enrich the bot with captured data.
- A Chatlayer API step is available in the Action blocks to enable you to create bot
  messages based on user-specific information and other external data.
- 'Make sure you include the correct content type in the header: content-type: application/json;'
- You can choose between the SSL and HMAC encryption types.
- Please note that the term *dialog state* refers to the same thing as *block*, in
  the context of development tools.
- Some endpoints are rate limited.
- Unauthorized token response will return 401 Unauthorized status code.
- API integration allows you to make API calls to your server and process the result
  as responded by your server.
- Uses OAuth2 for authentication
- Ensure proper OAuth setup for authentication
- Some API endpoints may have rate limits.
- Ensure correct permissions are set for your API key.
- You can find your API Key in your Airtable Account page.
- You can regenerate a key.
- This integration is currently unavailable. We are working towards resolving the
  issue.
- Some objects may return nulls in deeply nested fields
- Your Freshdesk Messaging connection is set up and ready to go!
- Follow the on-screen instructions to authorize your chatbot to access the Gmail
  account. This process may require you to log in to your Gmail account and grant
  specific permissions.
- Make sure that you pick a team that shouldn't have the chatbot replying (a team
  that you haven't informed in the channel configuration)
- This tutorial will guide you on how to connect your Chatlayer bot to Intercom.
- Ensure you have the correct permissions for the API.
- This Salesforce will allow you to perform actions like Get contact, Create contact,
  Create account, Retrieve entity (type Contact), Create entity (type Case), Query
  SOQL.
- This documentation will walk you through the steps to seamlessly download, configure,
  and connect the Chatlayer bot app to your Slack workspace.
- You have to be a workspace admin to install the Chatlayer app in your Slack workspace
- If your company already uses Topdesk as the customer support provider, you can easily
  use this app to create, update and retrieve incidents.
- Ensure to handle API limits as specified in the documentation.
- Expression syntax needs to be enabled on your account.
- Existing variable names like a-b, a b, number or using '-' under Go to variables
  are not compatible anymore.
- Only valid JavaScript identifiers is supported. If your variables don't comply,
  tweak them now to avoid any hiccups.
- The | operator is no longer supported. If it's part of your bot flow, make the necessary
  adjustments to align with the new syntax.
- Ensure to review your previous variables and confirm that none of them rely on JSON.stringify.
  Please use STRINGIFY or TO_STRING instead.
- Ensure a seamless offloading experience from bot to human agent
- You need to configure a new agent and queue in Sinch Contact Pro.
- Ensure to fill in username and password from the newly created virtual agent.
- 'The #Interact environment used by customers can only be connected to the Chatlayer.ai
  production environment.'
- On the roles tab, assign all roles
- Copy the newly created client id and client secret to your Genesys Cloud Offloading
  integration in Chatlayer
- When the agent closes the conversation, the bot will be resumed.
- Offloading Webhook is for offloading users from bot to human agent.
- The Webhook channel is a custom integration channel, make sure you don't mix up
  these two.
- Support for the Chatlayer integration with Zendesk Chat is coming to an end as Zendesk
  is transitioning towards Zendesk Sunshine.
- Zendesk only allows users on their 'Enterprise' pack to use third party bot platforms
  such as Chatlayer.
- Make sure to add your own key and name of the department in the code.
- Requires verifyToken in every request
- 'Each message has two mandatory fields: type and config.'
- Data retention settings are not published from the DRAFT to the LIVE version of
  your bot.
- Only the selected flow will be published.
- Changes to the NLP must be published separately from the flow.
- The main flow needs to be published first for sub-flows to be published.
- Changing the data retention settings take about a day to be visible in the platform.
- Sessions are archived automatically after 30 days.
- Conversations, error history, and training expressions are archived after a year
  (365 days) if custom data retention is not enabled.
- Data retention settings can be customized for each section in the platform.
- Regularly review the analytics of your bot to see how the bot is performing.
- The maximum size of the session is 10MB
- We automatically delete the session data after 30 days of inactivity
- The Track Event feature should not be confused with events themselves.
- The Send as audio feature is currently feature flagged. If you want it to be enabled
  in your bot, please get in touch with us.
- Voicebots are bots that speak, instead of write.
- The last start/stop recording actions in the bot will be the only ones available
  in the recording widget.
- Anticipate silences when retrieving information from a backend system or calling
  an API.
- Transform visual elements into auditory cues as your users can't interact with visual
  interfaces.
- To improve user experience, use follow-up questions like 'Do you want to hear more
  about X?' This provides a break from listening.
- Users can sign in to Chatlayer by using their email address and password.
- A minimum of 8 characters for the password policy.
- At least one lowercase character, one uppercase character, and one special character
  required for password.
- Users that already have an account and belong to another Chatlayer team will be
  able to switch between teams.
- Single Sign-On (SAML SSO) is only available in the Enterprise pack or higher.
- Requires setup of SAML SSO through Azure AD or Okta.
- The usage in the Billing and usage page, on your invoice and in the bot analytics
  can differ slightly. The billing analytics rely on the GMT time zone, whereas the
  other analytics are based on the time zone you are in.
- Conversations start counting after 15 minutes of inactivity.
- If you would like to switch your bots from one location to another, please Get in
  Touch with us.
- No correct response
- Ensure intents are properly configured to avoid defaulting to 'not understood'
- IFrame can be used to embed YouTube videos.
- Users that already have an account and belong to another Chatlayer team will be
  able to switch between teams
errors:
- 'INVALID_REQUEST: Check the request parameters'
- 'UNAUTHORIZED: Ensure valid access token'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: Ensure endpoint is correct.'
- '401 Unauthorized: Check your API credentials.'
- '429 Too Many Requests: Rate limit exceeded.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify your access token.'
- '404 Not Found: The requested resource does not exist.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check your OAuth2 credentials.'
- '401 Unauthorized: Check credentials or token expiration'
- '403 Forbidden: Check your access rights.'
- '404 Not Found: Verify the endpoint URL.'
- '500 Internal Server Error: Try again later.'
- '401 Unauthorized: Check your access token.'
- 'No correct response: Investigate and identify the issue.'
- '401 Unauthorized: Check if OAuth token is valid.'
- '400 Bad Request: Verify the request format and parameters.'
- 'INVALID_CREDENTIALS: Check your client ID and secret'
- 'RATE_LIMIT_EXCEEDED: Reduce the number of requests being made'
- '400 Bad Request: Check the request format'
- '401 Unauthorized: Verify API key or token'
- '429 Too Many Requests: Throttle your requests'
- '401 Unauthorized: Check your API key and permissions.'
- '404 Not Found: Verify the endpoint path.'
- 'INVALID_TOKEN: Check if your access token is still valid.'
- 'FORBIDDEN: You do not have permission to access this resource.'
- '400 Bad Request: Check parameters and request format.'
- '401 Unauthorized: Verify authentication credentials.'
- '429 Too Many Requests: Rate limit exceeded, reduce request frequency.'
- '401 Unauthorized: Check your username and password.'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Recheck OAuth credentials'
- '404 Not Found: Verify the endpoint URL'
- Maximum of 10 failed sign-in attempts before locking out the user account.
- No intents recognized above the threshold
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.chatlayer.ai
  auth:
    type: oauth2
source_metadata: null
