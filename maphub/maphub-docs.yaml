resources:
- name: XLSX_CSV_import
  endpoint:
    path: /import_export/xlsx_csv_import
    method: GET
    data_selector: records
- name: list_maps
  endpoint:
    path: /map/list
    method: GET
    data_selector: maps
- name: get_map
  endpoint:
    path: /map/get
    method: POST
    data_selector: response
    params:
      map_id: required
- name: upload_map
  endpoint:
    path: /api/1/map/upload
    method: POST
    data_selector: id
    params: {}
- name: update_map
  endpoint:
    path: /map/update
    method: POST
    data_selector: response
    params: {}
- name: append_map
  endpoint:
    path: /map/append
    method: POST
    data_selector: null
    params: {}
- name: refresh_image
  endpoint:
    path: /map/refresh_image
    method: POST
    data_selector: id
    params:
      map_id: required
- name: upload_image
  endpoint:
    path: /image/upload
    method: POST
    data_selector: image_id
    params: {}
- name: upload_marker
  endpoint:
    path: /marker/upload
    method: POST
    data_selector: marker_id
- name: upload_map
  endpoint:
    path: /map/upload
    method: POST
    data_selector: data
- name: upload_image
  endpoint:
    path: /upload
    method: POST
    data_selector: data
- name: update_map
  endpoint:
    path: /api/map_update
    method: POST
    data_selector: geojson
- name: update_map
  endpoint:
    path: /map/update
    method: POST
    data_selector: id
    params: {}
- name: refresh_image
  endpoint:
    path: /map/refresh_image
    method: POST
    data_selector: data
    params: {}
- name: XLSX / CSV import
  endpoint:
    path: /import_export/xlsx_csv_import
    method: GET
- name: list_maps
  endpoint:
    path: /map/list
    method: GET
    data_selector: maps
- name: get_map
  endpoint:
    path: /map/get
    method: POST
    data_selector: map
- name: upload_map
  endpoint:
    path: /map/upload
    method: POST
    data_selector: map
- name: update_map
  endpoint:
    path: /map/update
    method: POST
    data_selector: map
- name: append_map
  endpoint:
    path: /map/append
    method: POST
    data_selector: map
- name: refresh_image
  endpoint:
    path: /map/refresh_image
    method: POST
    data_selector: response
    params:
      map_id: required
- name: upload_image
  endpoint:
    path: /image/upload
    method: POST
    data_selector: response
    params:
      file_type: required
- name: upload_marker
  endpoint:
    path: /marker/upload
    method: POST
    data_selector: response
    params:
      file_type: required
- name: upload_map
  endpoint:
    path: /map/upload
    method: POST
    data_selector: response
    params:
      file_type: empty
      title: required
      short_name: required
      visibility: required
- name: update_map
  endpoint:
    path: /map/update
    method: POST
    data_selector: features
- name: refresh_image
  endpoint:
    path: /map/refresh_image
    method: POST
    data_selector: message
- name: list_maps
  endpoint:
    path: /api/1/map/list
    method: POST
- name: get_map
  endpoint:
    path: /api/1/map/get
    method: POST
    params:
      map_id: required
- name: upload_map
  endpoint:
    path: /api/1/map/upload
    method: POST
    params:
      file_type: required
      visibility: required
- name: upload_map
  endpoint:
    path: /map/upload
    method: POST
    data_selector: response
    params: {}
- name: update_map
  endpoint:
    path: /map/update
    method: POST
    data_selector: response
    params: {}
- name: append_map
  endpoint:
    path: /map/append
    method: POST
    data_selector: response
    params: {}
- name: refresh_static_map_image
  endpoint:
    path: /map/refresh_image
    method: POST
    data_selector: response
    params: {}
- name: upload_image
  endpoint:
    path: /image/upload
    method: POST
    data_selector: response
    params: {}
- name: upload_marker
  endpoint:
    path: /marker/upload
    method: POST
    data_selector: response
    params: {}
- name: upload_map
  endpoint:
    path: /map/upload
    method: POST
    data_selector: data
    params:
      file_type: empty
      title: London Attractions
      short_name: london-attractions
      visibility: public
- name: update_map
  endpoint:
    path: /map/update
    method: POST
    data_selector: data
    params:
      basemap: maphub-light
      description: 'Sample map for MapHub API tutorial:

        [Create a map from a table CSV file](https://docs.maphub.net/tutorials/first_map/tutorial.html)


        Texts and images are from visitlondon.com'
      visibility: public
- name: refresh_image
  endpoint:
    path: /map/refresh_image
    method: POST
    data_selector: data
    params: {}
- name: XLSX_CSV_import
  endpoint:
    path: /import/xlsx-csv
    method: GET
    data_selector: data
    params: {}
- name: Converting_addresses_to_lat_lon_coordinates
  endpoint:
    path: /convert/addresses-to-coordinates
    method: GET
    data_selector: data
    params: {}
notes:
- 'Request authentication is via API keys using the Authorization: Token <api_key>
  request header.'
- You need to verify your email address to use the API.
- Documentation for MapHub.net
- If your map uses a commercial basemap and receives too much traffic, we ask you
  to sign up for the provider's free plan and add a key here.
- Without a provider key, maps with heavy usage will be limited to MapHub Classic
  for 24 hours.
- Sign up to for Freemium account on HERE Developers
- Click 'Generate App' in the REST section
- On the 'Finish setting up your account' click 'Skip for now' in the lower left corner.
- This dialog is only displayed once.
- MapHub supports importing data from CSV or XLSX files.
- Recommend using the XLSX format.
- maximum file size 15 MB
- maximum processing time 2 minutes
- Static map image is not updated automatically. If you'd like to update it, call
  the refresh map image endpoint manually.
- A new map version is not saved.
- This endpoint is very resource intensive, please limit it to max. 1 call every 5
  minutes.
- If for some reason you cannot use Google Docs, there is an alternative (more complicated)
  tutorial using Google Earth
- You need Python 3.6+ and the requests library.
- To install requests, run pip3 install requests.
- When used with file_type=empty, the Upload map endpoint creates a new map.
- MapHub treats images separate from maps.
- 'You can create multi-level groups using the format: North America／United States／California／Los
  Angeles'
- Images can be refreshed through the API by using the Refresh map image endpoint.
- MapHub supports importing data from CSV or XLSX files. We recommend using the XLSX
  format.
- You can create API keys from the Settings page.
- Uses API keys for authentication — requires email verification.
- Maximum file size 15 MB
- Maximum processing time 2 minutes
- Maximum file size for uploads is 15 MB and maximum processing time is 2 minutes.
- The `id` fields in GeoJSON are optional.
- To use the API, you need to verify your email address.
- When uploading a table file, MapHub tries to guess the right file format and locate
  the geometry data for your items.
errors:
- Errors are returned in the error JSON field, status code is always 200.
- '401 Unauthorized: Check API key'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- maximum file size 15 MB
- maximum processing time 2 minutes
- 'Invalid file type: Only ''png'' is supported'
- '200: A successful response has no error field.'
- '401 Unauthorized: Recheck API key or token'
- '400 Bad Request: Check the request parameters'
- '400 Bad Request: Check your parameters and data formatting'
- If errors occur, they are returned in the error JSON field.
auth_info:
  mentioned_objects: []
client:
  base_url: https://maphub.net/api/1
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
