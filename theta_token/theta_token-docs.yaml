resources:
- name: get_block
  endpoint:
    path: /theta.GetBlock
    method: POST
    data_selector: result
    params:
      hash: block_hash
      include_eth_tx_hashes: false
- name: get_block_by_height
  endpoint:
    path: /theta.GetBlockByHeight
    method: POST
    data_selector: result
    params:
      height: block_height
      include_eth_tx_hashes: false
- name: get_transaction
  endpoint:
    path: /theta.GetTransaction
    method: POST
    data_selector: result
    params:
      hash: transaction_hash
- name: GetVersion
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params: {}
- name: GetAccount
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params:
      address: the address of the account
- name: GetPendingTransactions
  endpoint:
    path: /rpc
    method: POST
    data_selector: result.tx_hashes
    params: {}
- name: BroadcastRawTransaction
  endpoint:
    path: /rpc
    method: POST
    data_selector: result.hash
    params:
      tx_bytes: ''
- name: BroadcastRawTransactionAsync
  endpoint:
    path: /rpc
    method: POST
    data_selector: result.hash
    params:
      tx_bytes: ''
- name: CallSmartContract
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params:
      sctx_bytes: ''
- name: NewKey
  endpoint:
    path: /rpc
    method: POST
    data_selector: result.address
    params:
      password: ''
- name: ListKeys
  endpoint:
    path: /rpc
    method: POST
    data_selector: result.addresses
    params: {}
- name: UnlockKey
  endpoint:
    path: /rpc
    method: POST
    data_selector: result.unlocked
    params:
      address: ''
      password: ''
- name: LockKey
  endpoint:
    path: /rpc
    method: POST
    data_selector: result.unlocked
    params:
      address: ''
- name: IsKeyUnlocked
  endpoint:
    path: /rpc
    method: POST
    data_selector: result.unlocked
    params:
      address: ''
- name: Send
  endpoint:
    path: /rpc
    method: POST
    data_selector: result.hash
    params:
      chain_id: ''
      from: ''
      to: ''
      thetawei: ''
      tfuelwei: ''
      fee: ''
      sequence: ''
      async: ''
- name: model_deployments
  endpoint:
    path: /v1/models
    method: GET
    data_selector: data
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: custom_template
  endpoint:
    path: /create_custom_template
    method: POST
    data_selector: template
    params: {}
- name: run_workload
  endpoint:
    path: /run_workload
    method: POST
    data_selector: deployment
    params: {}
- name: update_template
  endpoint:
    path: /update_template
    method: PATCH
    data_selector: updated_template
    params: {}
- name: persistent_volume
  endpoint:
    path: /persistent-storage
    method: POST
    data_selector: volume
    params: {}
- name: attach_volume
  endpoint:
    path: /attach-volume
    method: POST
    data_selector: attachment
    params: {}
- name: reconfigure_volume
  endpoint:
    path: /reconfigure-volume
    method: POST
    data_selector: reconfiguration
    params: {}
- name: GPU Cluster
  endpoint:
    path: /dashboard/ai/service/gpu-cluster
    method: GET
    data_selector: clusters
    params: {}
- name: create_deployment
  endpoint:
    path: /deployment
    method: POST
    data_selector: body
- name: list_deployments
  endpoint:
    path: /deployments/list
    method: GET
    data_selector: body
- name: stop_deployment
  endpoint:
    path: /deployments/{shard}/{suffix}/stop
    method: PUT
    data_selector: ''
- name: delete_deployment
  endpoint:
    path: /deployments/{shard}/{suffix}
    method: DELETE
    data_selector: ''
- name: deployment_templates
  endpoint:
    path: /deployment_template/list_standard_templates
    method: GET
    data_selector: templates
    params:
      category: prototyping
- name: custom_templates
  endpoint:
    path: /deployment_template/list_custom_templates
    method: GET
    data_selector: templates
    params:
      project_id: '{EdgeCloud project id}'
- name: machine_types
  endpoint:
    path: /resource/vm/list
    method: GET
    data_selector: vms
- name: RAG Chatbot
  endpoint:
    path: /docs/edgecloud-rag-chatbot
    method: GET
- name: rag_chatbot
  endpoint:
    path: /dashboard/ai/service/rag-chatbot
    method: POST
    data_selector: chatbot
    params: {}
- name: knowledge_base
  endpoint:
    path: /api/knowledge_base
    method: POST
    data_selector: document
    params: {}
- name: chatbot_customization
  endpoint:
    path: /edgecloud/rag/chatbot/customize
    method: POST
    data_selector: customization_details
- name: check_ai_generated_text
  endpoint:
    method: POST
- name: Bluesky_trending_topics
  endpoint:
    path: /api/bluesky/trending
    method: GET
- name: Jupyter_notebook_deployment
  endpoint:
    path: /api/jupyter/deploy
    method: POST
- name: rewards
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params:
      start: '2025-04-10T00:00:00Z'
      end: '2025-04-19T00:00:00Z'
- name: GetStatus
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params: {}
- name: SetPrice
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params: {}
- name: GetDeployments
  endpoint:
    path: /rpc
    method: POST
    data_selector: result.deployments
    params:
      page: 0
      size: 5
      start: '2025-04-01T00:00:00Z'
      end: '2025-04-18T00:00:00Z'
- name: GetJobs
  endpoint:
    path: /rpc
    method: POST
    data_selector: result.jobs
    params:
      page: 0
      size: 2
      start: '2025-04-01T00:00:00Z'
      end: '2025-04-18T00:00:00Z'
- name: jobs
  endpoint:
    path: /api/v1/jobs
    method: POST
    data_selector: job
    params: {}
- name: nodes
  endpoint:
    path: /api/v1/nodes
    method: GET
    data_selector: nodes
    params: {}
- name: upload_video
  endpoint:
    path: /upload
    method: POST
    data_selector: body
- name: upload_video_presigned_url
  endpoint:
    path: /upload
    method: PUT
    data_selector: empty
- name: transcode_video
  endpoint:
    path: /video
    method: POST
    data_selector: body
- name: get_video_progress
  endpoint:
    path: /video/video_vvvvvvvvvvvvvvvvvvvvvvvvvv
    method: GET
    data_selector: body
- name: list_videos
  endpoint:
    path: /video/srvacc_xxxxxxxxxxxxxxxxxxxxxxxxx/list
    method: GET
    data_selector: body
    params:
      page: 1
      number: 100
- name: search_videos
  endpoint:
    path: /video/srvacc_xxxxxxxxxxxxxxxxxxxxxxxxx/search
    method: GET
    data_selector: body
    params:
      key: value
      page: 1
      number: 100
- name: unselect_ingestor
  endpoint:
    path: /ingestor/ingestor_xxxxxxxxxxxxxxxxxxxxxxx/unselect
    method: PUT
    data_selector: body
- name: create_livestream
  endpoint:
    path: /stream
    method: POST
    data_selector: body
    params: {}
- name: retrieve_livestream
  endpoint:
    path: /stream/stream_xxxxxxxxxxxxxxxxxxxxxxxxx
    method: GET
    data_selector: body
    params: {}
- name: list_livestreams
  endpoint:
    path: /service_account/srvacc_xxxxxxxxxxxxxxxxxxxxxxxxx/streams
    method: GET
    data_selector: body
    params: {}
- name: list_edge_ingestors
  endpoint:
    path: /ingestor/filter
    method: GET
    data_selector: body
    params: {}
- name: select_edge_ingestor
  endpoint:
    path: /ingestor/ingestor_xxxxxxxxxxxxxxxxxxxxxxx/select
    method: PUT
    data_selector: body
    params: {}
- name: webhooks
  endpoint:
    path: /webhooks/tva/recieve
    method: POST
    data_selector: event
- name: video_stream_analytics
  endpoint:
    path: /video_stream_analytics
    method: GET
    data_selector: analytics
    params: {}
- name: edge_node_summary
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params:
      method: edgecore.GetEdgeNodeSummary
- name: node_version
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params:
      method: edgecore.GetVersion
- name: node_status
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params:
      method: edgecore.GetStatus
- name: node_peers
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params:
      method: edgecore.GetPeers
- name: list_past_jobs
  endpoint:
    path: /rpc
    method: POST
    data_selector: result.body
    params:
      type: lavita
      page: 0
      num: 10
- name: elite_edge_node
  endpoint:
    path: /docs/set-fee-on-elite-edge-node
    method: POST
    data_selector: reward_split
    params: {}
- name: video_transcoding
  endpoint:
    path: /video/transcoding
    method: POST
- name: send_tokens
  endpoint:
    path: /tx/send
    method: POST
    data_selector: transaction
    params:
      chain: privatenet
      from: 2E833968E5bB786Ae419c4d13189fB081Cc43bab
      to: 9F1233798E905E173560071255140b4A8aBd3Ec6
      theta: 10
      seq: 1
- name: query_account
  endpoint:
    path: /query/account
    method: GET
    data_selector: account_balance
    params:
      address: 9F1233798E905E173560071255140b4A8aBd3Ec6
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: account
  endpoint:
    path: /getAccount
    method: GET
- name: transaction_count
  endpoint:
    path: /getTransactionCount
    method: GET
- name: block_by_hash
  endpoint:
    path: /getBlock
    method: GET
- name: block_by_height
  endpoint:
    path: /getBlock
    method: GET
- name: current_block_height
  endpoint:
    path: /getBlockNumber
    method: GET
- name: wallet_random
  endpoint:
    path: /create/random
    method: POST
    data_selector: wallet
    params: {}
- name: wallet_from_mnemonic
  endpoint:
    path: /create/mnemonic
    method: POST
    data_selector: wallet
    params: {}
- name: wallet_from_private_key
  endpoint:
    path: /create/private_key
    method: POST
    data_selector: wallet
    params: {}
- name: wallet_from_encrypted_json
  endpoint:
    path: /create/encrypted_json
    method: POST
    data_selector: wallet
    params: {}
- name: connect_wallet
  endpoint:
    path: /connect
    method: POST
    data_selector: connectedWallet
    params: {}
- name: simulate_deploy
  endpoint:
    path: /simulateDeploy
    method: POST
    data_selector: result
    params:
      name: TestArgs
      symbol: TARGS
      decimals: 18
      amount: '1000000000'
- name: deploy
  endpoint:
    path: /deploy
    method: POST
    data_selector: result
    params:
      name: TestArgs
      symbol: TARGS
      decimals: 18
      amount: '1000000000'
- name: populate_deploy_transaction
  endpoint:
    path: /populateDeployTransaction
    method: POST
    data_selector: transaction
    params:
      name: TestArgs
      symbol: TARGS
      decimals: 18
      amount: '1000000000'
- name: Contract
  endpoint:
    path: /contract
    method: POST
    data_selector: contract
    params: {}
- name: mintableTNT20Contract
  endpoint:
    path: /contracts/mintableTNT20
    method: POST
    data_selector: contract_address
    params: {}
- name: mintableTNT20
  endpoint:
    path: /mintableTNT20
    method: POST
    data_selector: contract_address
    params: {}
- name: account_balance
  endpoint:
    path: /rpc
    method: POST
    data_selector: null
    params: {}
- name: eth_chainId
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params: {}
- name: chain_id
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params: {}
- name: syncing_status
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params: {}
- name: block_number
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params: {}
- name: account_balance
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params: {}
- name: Theta Mainnet
  endpoint:
    path: /rpc
    method: POST
    data_selector: ''
    params: {}
- name: Theta Testnet
  endpoint:
    path: /rpc
    method: POST
    data_selector: ''
    params: {}
- name: Theta Local Privatenet
  endpoint:
    path: /rpc
    method: POST
    data_selector: ''
    params: {}
- name: theta_mainnet
  endpoint:
    path: /eth-rpc-api.thetatoken.org/rpc
    method: npx hardhat run scripts/deploy.js --network theta_mainnet
    data_selector: contract
- name: Theta Mainnet
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params:
      chainID: 361
- name: Theta Testnet
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params:
      chainID: 365
- name: Theta Local Privatenet
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params:
      chainID: 366
- name: tdrop_token
  endpoint:
    path: /token/0x1336739B05C7Ab8a526D40DCC0d04a826b5f8B03
    method: GET
    data_selector: result
    params: {}
- name: tdrop_events
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params:
      fromBlock: '14045180'
      toBlock: '14045280'
- name: chain_id
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      jsonrpc: '2.0'
      method: eth_chainId
      params: []
      id: 67
- name: synchronization_status
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      jsonrpc: '2.0'
      method: eth_syncing
      params: []
      id: 1
- name: block_number
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      jsonrpc: '2.0'
      method: eth_blockNumber
      params: []
      id: 83
- name: chain_id
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      method: eth_chainId
      params: []
      id: 67
- name: synchronization_status
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      method: eth_syncing
      params: []
      id: 1
- name: block_number
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      method: eth_blockNumber
      params: []
      id: 83
- name: tfuel_balance
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      method: eth_getBalance
      params:
      - '0xc15149236229bd13f0aec783a9cc8e8059fb28da'
      - latest
      id: 1
- name: TNT20 Token
  endpoint:
    path: /tnt20/token
    method: GET
    data_selector: tokenDetails
    params: {}
- name: tnt20_token_balance
  endpoint:
    path: /query_tnt20_token_balance
    method: GET
    data_selector: balance
    params: {}
- name: tnt20_token_deploy
  endpoint:
    path: /deploy_tnt20_token
    method: POST
    data_selector: contractAddress
    params: {}
- name: tnt20_token_send
  endpoint:
    path: /send_tnt20_token
    method: POST
    data_selector: transactionStatus
    params: {}
- name: video_list
  endpoint:
    path: /video/{apiKey}/list
    method: GET
    data_selector: data
- name: video_upload
  endpoint:
    path: /upload
    method: POST
    data_selector: body
- name: video_transcode
  endpoint:
    path: /video
    method: POST
    data_selector: body
- name: video_status
  endpoint:
    path: /video/{id}
    method: GET
    data_selector: data
- name: block
  endpoint:
    path: /api/block/:height
    method: GET
    data_selector: body
    params: {}
- name: all_stakes
  endpoint:
    path: /stake/all
    method: GET
    data_selector: body
    params: {}
- name: total_staked_amount
  endpoint:
    path: /stake/totalAmount
    method: GET
    data_selector: body
    params: {}
- name: stake_by_address
  endpoint:
    path: /stake/:address
    method: GET
    data_selector: body
    params: {}
- name: theta_amount
  endpoint:
    path: /supply/theta
    method: GET
    data_selector: body
    params: {}
- name: tfuel_amount
  endpoint:
    path: /supply/tfuel
    method: GET
    data_selector: body
    params: {}
- name: token_summary
  endpoint:
    path: /tokenSummary/:address
    method: GET
    data_selector: body
    params: {}
- name: token_transactions
  endpoint:
    path: /token/:address
    method: GET
    data_selector: body
    params: {}
- name: top_blocks
  endpoint:
    path: /blocks/top_blocks
    method: GET
    data_selector: body
    params:
      pageNumber: '1'
      limit: '10'
- name: transaction
  endpoint:
    path: /transaction/:hash
    method: GET
    data_selector: body
    params: {}
- name: transactions_range
  endpoint:
    path: /trancastions/range
    method: GET
    data_selector: body
    params:
      pageNumber: '1'
      limit: '10'
- name: transactions_block_range
  endpoint:
    path: /trancastions/blockRange
    method: GET
    data_selector: body
    params:
      blockStart: '1'
      blockEnd: '10'
- name: account
  endpoint:
    path: /account/:address
    method: GET
    data_selector: body
    params: {}
- name: account_tx_history
  endpoint:
    path: /accountTx/:address
    method: GET
    data_selector: body
    params:
      pageNumber: '1'
      limitNumber: '50'
      isEqualType: 'true'
- name: top_token_holders
  endpoint:
    path: /account/top/:tokenType/:limit
    method: GET
    data_selector: body
    params: {}
- name: Theta Wallet Provider
  endpoint:
    path: /wallet/provider
    method: GET
    data_selector: provider
- name: Validator Node Setup
  endpoint:
    path: /docs/setup-a-new-validator-node-on-ubuntu-linux
    method: GET
    data_selector: content
    params: {}
- name: Staking
  endpoint:
    path: /docs/stake-to-the-validator-node
    method: GET
    data_selector: content
    params: {}
- name: staking_through_web_wallet
  endpoint:
    path: /docs/guardian-staking-process/staking-through-web-wallet
    method: GET
    data_selector: records
    params: {}
- name: staking_through_mobile_wallet
  endpoint:
    path: /docs/guardian-staking-process/staking-through-mobile-wallet
    method: GET
    data_selector: records
    params: {}
- name: staking
  endpoint:
    path: /staking/tdrop
    method: POST
    data_selector: staking_info
    params: {}
- name: theta
  endpoint:
    path: /config.yaml
    method: GET
    data_selector: configuration
notes:
- Theta provides support for Turing-complete smart contracts.
- Theta Metachain allows permissionless horizontal scaling.
- Theta Network features a dual token design.
- Accessing the model APIs requires an access key, which you can manage in the third
  tab.
- Requires HuggingFace key for certain LLM deployments.
- Container Image URL should not include the prefix https://hub.docker.com/r
- Container Port will be mapped to the 443 HTTPS port in the actual deployment
- Data stored in ephemeral storage will be lost when a GPU node is stopped. To ensure
  data preservation, we recommend attaching a persistent volume to your GPU node during
  its creation.
- Users can stop and restart a GPU node. The system remembers the metadata of a GPU
  node when the user stops it.
- Users can change certain metadata of a GPU node in the stopped state without losing
  the data stored in the persistent storage.
- User can configure and attach multiple persistent volumes to a GPU node.
- Nodes inside a cluster can communicate directly to each other
- You can manage your AI deployments programmatically using Theta EdgeCloud API Keys.
- Uses API key for authentication
- Once the chatbot is created, you will see it listed on the RAG Chatbot list page.
- Adding documents to the knowledge base can be done through file upload or copying
  text content directly.
- Each chatbot has its own access token for integration purpose.
- The API call requires the access token which is included in the cURL code snippet.
- If you include max_tokens and temperature in the API call, the values specified
  will overwrite those set through the Settings tab.
- Custom tools allow API endpoints to be defined based on chatbot context.
- Built-in tools include Web Search and Text-to-SQL.
- The Windows version is currently in Alpha preview and may not be as stable as the
  Linux version.
- Hourly rental rate applies only to deployments.
- Nodes are rewarded based on the number of model inferences performed.
- Theta EdgeCloud is a decentralized GPU compute marketplace.
- Ensure WSL is enabled and configured correctly for EdgeCloud.
- Ubuntu 22.04 or higher is required for WSL.
- Formally known as 'Theta Video API', video services is now an integral part of Theta
  EdgeCloud.
- Each Service Account can create max 3 livestreams.
- Ingestor selection will expire if not used in 5 minutes.
- Delivery of events is not guaranteed to be in the same order they were generated.
- A 2xx status code response is expected from the partner backend. If the partner
  backend does not respond with a 2xx status code, the Theta Video API will keep retrying
  with exponential backoff.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- 'Android minimum SDK version : 23 or above'
- 'Video player : ExoPlayer'
- 'Video format : HLS'
- 'jwt : pass a JWT to automatically allow a user (this is useful for apps that already
  authenticated the user on their backend. See below on how to generate the JWT)'
- 'signin : pass a signin JSON to automatically allow a user using sign typed data
  v4 (disabled if you''re already sending a JWT)'
- 'autoconnect : will automatically try to connect to your wallet'
- The Edge Node can execute various types of jobs including AI/deep learning model
  training and inference, as well as video transcoding and relaying.
- Minimum of 10,000 TFuel and maximum of 500,000 TFuel can be staked to each Edge
  Node to encourage decentralization.
- 'RPC parameter type has to be either ''lavita'' or ''fedml'', or else it''ll return
  error: {''code'': -32000, ''message'': ''Invalid job type''}'
- RPC parameter page is optional. Default is 0 (first page)
- RPC parameter num is optional. Default is 10 for retrieving 10 jobs per page
- Status could be 'completed', 'rewarded' or 'errored'.
- Reward_amount is in unit of wei. When status is 'errored', reward_amount is 0, and
  error will contain specific error cause.
- Note that this simple password was just for demo purpose for the local private net.
  Please use a strong password when you set up your nodes for the Theta mainnet.
- when the testnet Theta Node is launched for the first time, you need to choose a
  password to generate an address for the node. Please choose a secure password and
  keep it in a safe place. The next time when you launch the node again, you will
  need the password to unlock it.
- Make sure you are compiling the latest release branch.
- When the mainnet Theta Node is launched for the first time, you need to choose a
  password to generate an address for the node.
- 'Contract deploys with provided arguments: name, symbol, decimals, initial supply,
  mintable flag.'
- Non-admin users cannot mint new tokens.
- Currently the RPC Adaptor does NOT support non-standard methods like evm_snapshot,
  evm_revert, and evm_mine.
- 'Currently the RPC Adaptor returns a generic "evm: execution reverted" messages
  in most case when the Theta EVM execution fails.'
- The genesis snapshot of the Theta local privatenet contains prefunded test wallets.
- ETH RPC server started at port 18888
- Ensure proper firewall rules are set for remote access
- The ETH RPC server should now be started at port 18888.
- At this time some exchanges, such as Binance, do not support receiving Theta blockchain
  tokens from a smart contract address, which is how they are sent via the Metamask
  plug-in. If you send tokens to an exchange address via Metamask, they may be lost.
- Currently the RPC Adaptor does NOT support non-standard methods such as evm_snapshot,
  evm_revert, and evm_mine.
- 'Currently the RPC Adaptor returns a generic ''evm: execution reverted'' messages
  in most cases when the Theta EVM execution fails.'
- TDROP is an TNT20 token on the Theta Mainnet.
- Ensure wallets have sufficient TFuel for transactions
- Requires API Key and API Secret from TVA.
- Supports transcoding for multiple resolutions.
- We recommend creating a new wallet offline.
- Mnemonic/seed phrase and private key are the only way to restore your Theta wallet.
- Theta runs on its' own native blockchain and is NOT an ETH / ERC20 project.
- Theta Wallet only stores native (THETA and TFUEL) and TNT20 tokens supported on
  Theta blockchain.
- You should NEVER send Ethereum or ERC20 tokens to your Theta Wallet. Doing so may
  result in your tokens being lost, and Theta Labs has no way to retrieve your tokens
  for you.
- You should NEVER send THETA, TFUEL or TNT20 Tokens to an Ethereum wallet address.
  Doing so may result in your tokens being lost, and Theta Labs has no way to retrieve
  your tokens for you.
- Theta Wallet only supports WalletConnect V2
- Minimum staking requirement is 200K Theta.
- Maximum of 31 validators that can run at one time.
- The minimum token amount to stake is 1,000 THETA.
- 'The minimum hardware requirements are: Internet speed: 5Mbps+ up and down, CPU:
  4 cores or more, Memory: 16 GBytes or more.'
- Supports macOS > 10.15.x Catalina
- You need to stake at least 1,000 THETA.
- Make sure you have at least 1 TFUEL in your wallet to pay for the transaction fee.
- Withdrawn stakes will be returned to your wallet address in approximately 48 hours.
- When the Theta node launches for the first time, you need to choose a password to
  encrypt the signing key of the guardian node. Please choose a secure password and
  keep it in a safe place.
- Please continue with the instructions for running a Guardian Node through Command
  Line.
- Dapps must use the ThetaPass library to interact (read-only) with the user's managed
  wallet on ThetaDrop to prove ownership of NFTs.
- The Theta Node runs its RPC server at port 16888.
- The ThetaCli Daemon runs at port 16889.
- The default config folder is ~/.theta
- The node performs state pruning by default
errors:
- 'Unauthorized: Check your API key.'
- 'Failed to check Windows features: Enable WSL and Virtual Machine Platform.'
- Kernel version must be 6.x or above.
- 403 You are not authorized to unselect this ingestor
- '400: Live stream limit reached - you already have 3/3 streams'
- '403: You are not authorized to select this ingestor'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check API Key and Secret.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.thetatoken.org
  auth:
    type: oauth2
source_metadata: null
