resources:
- name: app_list
  endpoint:
    path: /apps
    method: GET
    data_selector: List apps
- name: app_info
  endpoint:
    path: /apps/{name}
    method: GET
    data_selector: OK
- name: user_list
  endpoint:
    path: /users
    method: GET
    data_selector: OK
- name: team_list
  endpoint:
    path: /teams
    method: GET
    data_selector: List teams
- name: event_list
  endpoint:
    path: /events
    method: GET
    data_selector: OK
- name: app_log
  endpoint:
    path: /apps/{app}/log
    method: GET
    data_selector: OK
- name: app_list
  endpoint:
    path: /apps
    method: GET
    data_selector: List apps
- name: user_list
  endpoint:
    path: /users
    method: GET
    data_selector: OK
- name: team_list
  endpoint:
    path: /teams
    method: GET
    data_selector: List teams
- name: event_list
  endpoint:
    path: /events
    method: GET
    data_selector: OK
- name: event_cancel
  endpoint:
    path: /events/{uuid}/cancel
    method: POST
- name: docker_healing_history
  endpoint:
    path: /docker/healing
    method: GET
- name: healthcheck
  endpoint:
    path: /healthcheck
    method: GET
- name: template_update
  endpoint:
    path: /iaas/templates/{template_name}
    method: PUT
- name: machine_list
  endpoint:
    path: /iaas/machines
    method: GET
- name: machine_destroy
  endpoint:
    path: /iaas/machines/{machine_id}
    method: DELETE
- name: machine_template_list
  endpoint:
    path: /iaas/templates
    method: GET
- name: template_create
  endpoint:
    path: /iaas/templates
    method: POST
- name: template_destroy
  endpoint:
    path: /iaas/templates/{template_name}
    method: DELETE
- name: index
  endpoint:
    path: /
    method: GET
- name: api_info
  endpoint:
    path: /info
    method: GET
- name: add_install_host
  endpoint:
    path: /install/hosts
    method: POST
- name: install_host_info
  endpoint:
    path: /install/hosts/{name}
    method: GET
- name: list_install_hosts
  endpoint:
    path: /install/hosts
    method: GET
- name: remove_node
  endpoint:
    path: /{provisioner}/node/{address}
    method: DELETE
- name: list_units_by_node
  endpoint:
    path: /{provisioner}/node/{address}/containers
    method: GET
- name: node_healing_update
  endpoint:
    path: /healing/node
    method: POST
- name: node_info
  endpoint:
    path: /node/{address}
    method: GET
- name: list_units_by_app
  endpoint:
    path: /docker/node/apps/{appname}/containers
    method: GET
- name: node_healing_info
  endpoint:
    path: /healing/node
    method: GET
- name: remove_node_healing
  endpoint:
    path: /healing/node
    method: DELETE
- name: add_node
  endpoint:
    path: /node
    method: POST
- name: list_nodes
  endpoint:
    path: /{provisioner}/node
    method: GET
- name: update_nodes
  endpoint:
    path: /{provisioner}/node
    method: PUT
- name: rebalance_units_in_nodes
  endpoint:
    path: /node/rebalance
    method: POST
- name: remove_node_container_list
  endpoint:
    path: /docker/nodecontainers
    method: GET
- name: node_container_create
  endpoint:
    path: /docker/nodecontainers
    method: POST
- name: node_container_info
  endpoint:
    path: /docker/nodecontainers/{name}
    method: GET
- name: node_container_update
  endpoint:
    path: /docker/nodecontainers/{name}
    method: POST
- name: remove_node_container
  endpoint:
    path: /docker/nodecontainers/{name}
    method: DELETE
- name: node_container_upgrade
  endpoint:
    path: /docker/nodecontainers/{name}/upgrade
    method: POST
- name: remove_permission
  endpoint:
    path: /roles/{name}/permissions/{permission}
    method: DELETE
- name: assign_role_to_token
  endpoint:
    path: /roles/{name}/token
    method: POST
- name: assign_role_to_user
  endpoint:
    path: /roles/{name}/user
    method: POST
- name: list_permissions
  endpoint:
    path: /permissions
    method: GET
- name: list_default_roles
  endpoint:
    path: /role/default
    method: GET
- name: dissociate_role_from_group
  endpoint:
    path: /roles/{name}/group/{group_name}
    method: DELETE
- name: remove_role
  endpoint:
    path: /roles/{name}
    method: DELETE
- name: role_info
  endpoint:
    path: /roles/{name}
    method: GET
- name: add_permissions
  endpoint:
    path: /roles/{name}/permissions
    method: POST
- name: add_default_role
  endpoint:
    path: /role/default
    method: POST
- name: updates_a_role
  endpoint:
    path: /roles
    method: PUT
- name: dissociate_role_from_user
  endpoint:
    path: /roles/{name}/user/{email}
    method: DELETE
- name: dissociate_role_from_token
  endpoint:
    path: /roles/{name}/token/{token_id}
    method: DELETE
- name: assign_role_to_group
  endpoint:
    path: /roles/{name}/group
    method: POST
- name: role_create
  endpoint:
    path: /roles
    method: POST
- name: role_list
  endpoint:
    path: /roles
    method: GET
- name: remove_default_role
  endpoint:
    path: /role/default
    method: DELETE
- name: remove_plan
  endpoint:
    path: /plans/{name}
    method: DELETE
- name: plan_create
  endpoint:
    path: /plans
    method: POST
- name: plan_list
  endpoint:
    path: /plans
    method: GET
- name: add_platform
  endpoint:
    path: /platforms
    method: POST
- name: update_platform
  endpoint:
    path: /platforms/{name}
    method: PUT
- name: remove_platform
  endpoint:
    path: /platforms/{name}
    method: DELETE
- name: platform_list
  endpoint:
    path: /platforms
    method: GET
- name: platform_info
  endpoint:
    path: /platforms/{name}
    method: GET
- name: rollback_platform
  endpoint:
    path: /platforms/{name}/rollback
    method: POST
- name: pool_get
  endpoint:
    path: /pools/{name}
    method: GET
- name: add_team_to_pool
  endpoint:
    path: /pools/{name}/team
    method: POST
- name: set_a_pool_constraint
  endpoint:
    path: /constraints
    method: PUT
- name: pool_list
  endpoint:
    path: /pools
    method: GET
- name: pool_create
  endpoint:
    path: /pools
    method: POST
- name: remove_pool
  endpoint:
    path: /pools/{name}
    method: DELETE
- name: remove_team_from_pool
  endpoint:
    path: /pools/{name}/team
    method: DELETE
- name: pool_update
  endpoint:
    path: /pools/{name}
    method: PUT
- name: pool_constraints_list
  endpoint:
    path: /constraints
    method: GET
- name: application_quota
  endpoint:
    path: /apps/{app}/quota
    method: GET
- name: update_application_quota
  endpoint:
    path: /apps/{app}/quota
    method: PUT
- name: team_quota
  endpoint:
    path: /teams/{name}/quota
    method: GET
- name: update_team_quota
  endpoint:
    path: /teams/{name}/quota
    method: PUT
- name: user_quota
  endpoint:
    path: /users/{email}/quota
    method: GET
- name: update_user_quota
  endpoint:
    path: /users/{email}/quota
    method: PUT
- name: router_list
  endpoint:
    path: /routers
    method: GET
- name: add_app_router
  endpoint:
    path: /app/{app}/routers
    method: POST
- name: update_app_router
  endpoint:
    path: /app/{app}/routers/{name}
    method: PUT
- name: list_app_routers
  endpoint:
    path: /app/{app}/routers
    method: GET
- name: toggle_an_app_version_as_routable
  endpoint:
    path: /app/{app}/routable
    method: POST
- name: router_add
  endpoint:
    path: /routers
    method: POST
- name: router_delete
  endpoint:
    path: /routers/{name}
    method: DELETE
- name: router_update
  endpoint:
    path: /routers/{name}
    method: PUT
- name: delete_app_router
  endpoint:
    path: /app/{app}/routers/{router}
    method: DELETE
- name: units_autoscale_info
  endpoint:
    path: /apps/{app}/units/autoscale
    method: GET
- name: add_unit_auto_scale
  endpoint:
    path: /apps/{app}/units/autoscale
    method: POST
- name: remove_unit_auto_scale
  endpoint:
    path: /apps/{app}/units/autoscale
    method: POST
- name: grant_access_to_a_service
  endpoint:
    path: /services/{service}/team/{team}
    method: PUT
- name: revoke_access_to_a_service
  endpoint:
    path: /services/{service}/team/{team}
    method: DELETE
- name: service_list
  endpoint:
    path: /services
    method: GET
- name: event_cancel
  endpoint:
    path: /events/{uuid}/cancel
    method: POST
- name: docker_healing_history
  endpoint:
    path: /docker/healing
    method: GET
- name: healthcheck
  endpoint:
    path: /healthcheck
    method: GET
- name: template_update
  endpoint:
    path: /iaas/templates/{template_name}
    method: PUT
- name: machine_list
  endpoint:
    path: /iaas/machines
    method: GET
- name: machine_destroy
  endpoint:
    path: /iaas/machines/{machine_id}
    method: DELETE
- name: machine_template_list
  endpoint:
    path: /iaas/templates
    method: GET
- name: template_create
  endpoint:
    path: /iaas/templates
    method: POST
- name: template_destroy
  endpoint:
    path: /iaas/templates/{template_name}
    method: DELETE
- name: index
  endpoint:
    path: /
    method: GET
- name: api_info
  endpoint:
    path: /info
    method: GET
- name: add_install_host
  endpoint:
    path: /install/hosts
    method: POST
- name: install_host_info
  endpoint:
    path: /install/hosts/{name}
    method: GET
- name: list_install_hosts
  endpoint:
    path: /install/hosts
    method: GET
- name: remove_node
  endpoint:
    path: /{provisioner}/node/{address}
    method: DELETE
- name: list_units_by_node
  endpoint:
    path: /{provisioner}/node/{address}/containers
    method: GET
- name: node_healing_update
  endpoint:
    path: /healing/node
    method: POST
- name: node_info
  endpoint:
    path: /node/{address}
    method: GET
- name: list_units_by_app
  endpoint:
    path: /docker/node/apps/{appname}/containers
    method: GET
- name: node_healing_info
  endpoint:
    path: /healing/node
    method: GET
- name: remove_node_healing
  endpoint:
    path: /healing/node
    method: DELETE
- name: add_node
  endpoint:
    path: /node
    method: POST
- name: list_nodes
  endpoint:
    path: /{provisioner}/node
    method: GET
- name: update_nodes
  endpoint:
    path: /{provisioner}/node
    method: PUT
- name: rebalance_units_in_nodes
  endpoint:
    path: /node/rebalance
    method: POST
- name: remove_node_container_list
  endpoint:
    path: /docker/nodecontainers
    method: GET
- name: node_container_create
  endpoint:
    path: /docker/nodecontainers
    method: POST
- name: node_container_info
  endpoint:
    path: /docker/nodecontainers/{name}
    method: GET
- name: node_container_update
  endpoint:
    path: /docker/nodecontainers/{name}
    method: POST
- name: remove_node_container
  endpoint:
    path: /docker/nodecontainers/{name}
    method: DELETE
- name: node_container_upgrade
  endpoint:
    path: /docker/nodecontainers/{name}/upgrade
    method: POST
- name: remove_permission
  endpoint:
    path: /roles/{name}/permissions/{permission}
    method: DELETE
- name: assign_role_to_token
  endpoint:
    path: /roles/{name}/token
    method: POST
- name: assign_role_to_user
  endpoint:
    path: /roles/{name}/user
    method: POST
- name: list_permissions
  endpoint:
    path: /permissions
    method: GET
- name: list_default_roles
  endpoint:
    path: /role/default
    method: GET
- name: dissociate_role_from_group
  endpoint:
    path: /roles/{name}/group/{group_name}
    method: DELETE
- name: remove_role
  endpoint:
    path: /roles/{name}
    method: DELETE
- name: role_info
  endpoint:
    path: /roles/{name}
    method: GET
- name: add_permissions
  endpoint:
    path: /roles/{name}/permissions
    method: POST
- name: add_default_role
  endpoint:
    path: /role/default
    method: POST
- name: updates_a_role
  endpoint:
    path: /roles
    method: PUT
- name: dissociate_role_from_user
  endpoint:
    path: /roles/{name}/user/{email}
    method: DELETE
- name: dissociate_role_from_token
  endpoint:
    path: /roles/{name}/token/{token_id}
    method: DELETE
- name: assign_role_to_group
  endpoint:
    path: /roles/{name}/group
    method: POST
- name: role_create
  endpoint:
    path: /roles
    method: POST
- name: role_list
  endpoint:
    path: /roles
    method: GET
- name: remove_default_role
  endpoint:
    path: /role/default
    method: DELETE
- name: remove_plan
  endpoint:
    path: /plans/{name}
    method: DELETE
- name: plan_create
  endpoint:
    path: /plans
    method: POST
- name: plan_list
  endpoint:
    path: /plans
    method: GET
- name: add_platform
  endpoint:
    path: /platforms
    method: POST
- name: update_platform
  endpoint:
    path: /platforms/{name}
    method: PUT
- name: remove_platform
  endpoint:
    path: /platforms/{name}
    method: DELETE
- name: platform_list
  endpoint:
    path: /platforms
    method: GET
- name: platform_info
  endpoint:
    path: /platforms/{name}
    method: GET
- name: rollback_platform
  endpoint:
    path: /platforms/{name}/rollback
    method: POST
- name: pool_get
  endpoint:
    path: /pools/{name}
    method: GET
- name: add_team_to_pool
  endpoint:
    path: /pools/{name}/team
    method: POST
- name: set_a_pool_constraint
  endpoint:
    path: /constraints
    method: PUT
- name: pool_list
  endpoint:
    path: /pools
    method: GET
- name: pool_create
  endpoint:
    path: /pools
    method: POST
- name: remove_pool
  endpoint:
    path: /pools/{name}
    method: DELETE
- name: remove_team_from_pool
  endpoint:
    path: /pools/{name}/team
    method: DELETE
- name: pool_update
  endpoint:
    path: /pools/{name}
    method: PUT
- name: pool_constraints_list
  endpoint:
    path: /constraints
    method: GET
- name: application_quota
  endpoint:
    path: /apps/{app}/quota
    method: GET
- name: update_application_quota
  endpoint:
    path: /apps/{app}/quota
    method: PUT
- name: team_quota
  endpoint:
    path: /teams/{name}/quota
    method: GET
- name: update_team_quota
  endpoint:
    path: /teams/{name}/quota
    method: PUT
- name: user_quota
  endpoint:
    path: /users/{email}/quota
    method: GET
- name: update_user_quota
  endpoint:
    path: /users/{email}/quota
    method: PUT
- name: router_list
  endpoint:
    path: /routers
    method: GET
- name: add_app_router
  endpoint:
    path: /app/{app}/routers
    method: POST
- name: update_app_router
  endpoint:
    path: /app/{app}/routers/{name}
    method: PUT
- name: list_app_routers
  endpoint:
    path: /app/{app}/routers
    method: GET
- name: toggle_an_app_version_as_routable
  endpoint:
    path: /app/{app}/routable
    method: POST
- name: router_add
  endpoint:
    path: /routers
    method: POST
- name: router_delete
  endpoint:
    path: /routers/{name}
    method: DELETE
- name: router_update
  endpoint:
    path: /routers/{name}
    method: PUT
- name: delete_app_router
  endpoint:
    path: /app/{app}/routers/{router}
    method: DELETE
- name: units_autoscale_info
  endpoint:
    path: /apps/{app}/units/autoscale
    method: GET
- name: add_unit_auto_scale
  endpoint:
    path: /apps/{app}/units/autoscale
    method: POST
- name: remove_unit_auto_scale
  endpoint:
    path: /apps/{app}/units/autoscale
    method: POST
- name: grant_access_to_a_service
  endpoint:
    path: /services/{service}/team/{team}
    method: PUT
- name: revoke_access_to_a_service
  endpoint:
    path: /services/{service}/team/{team}
    method: DELETE
- name: service_list
  endpoint:
    path: /services
    method: GET
- name: service update
  endpoint:
    path: /services/{name}
    method: PUT
- name: service delete
  endpoint:
    path: /services/{name}
    method: DELETE
- name: service proxy
  endpoint:
    path: /services/proxy/service/{service}
    method: '*'
- name: service create
  endpoint:
    path: /services
    method: POST
- name: change service documentation
  endpoint:
    path: /services/{name}/doc
    method: PUT
- name: service broker list
  endpoint:
    path: /brokers
    method: GET
- name: Add service broker
  endpoint:
    path: /brokers
    method: POST
- name: Update service broker
  endpoint:
    path: /brokers/{broker}
    method: PUT
- name: Delete service broker
  endpoint:
    path: /brokers/{broker}
    method: DELETE
- name: service instance info
  endpoint:
    path: /services/{service}/instances/{instance}
    method: GET
- name: revoke access to service instance
  endpoint:
    path: /services/{service}/instances/permission/{instance}/{team}
    method: DELETE
- name: service instance create
  endpoint:
    path: /services/{service}/instances
    method: POST
- name: remove service instance
  endpoint:
    path: /services/{name}/instances/{instance}
    method: DELETE
- name: service instance list
  endpoint:
    path: /services/instances
    method: GET
- name: service doc
  endpoint:
    path: /services/{name}/doc
    method: GET
- name: service instance proxy
  endpoint:
    path: /services/{service}/proxy/{instance}
    method: '*'
- name: service info
  endpoint:
    path: /services/{name}
    method: GET
- name: service plans
  endpoint:
    path: /services/{name}/plans
    method: GET
- name: grant access to service instance
  endpoint:
    path: /services/{service}/instances/permission/{instance}/{team}
    method: PUT
- name: service instance update
  endpoint:
    path: /services/{service}/instances/{instance}
    method: PUT
- name: service instance status
  endpoint:
    path: /services/{service}/instances/{instance}/status
    method: GET
- name: app shell
  endpoint:
    path: /apps/{name}/shell
    method: GET
- name: token delete
  endpoint:
    path: /tokens/{token_id}
    method: DELETE
- name: token list
  endpoint:
    path: /tokens
    method: GET
- name: token info
  endpoint:
    path: /tokens/{token_id}
    method: GET
- name: token create
  endpoint:
    path: /tokens
    method: POST
- name: token update
  endpoint:
    path: /tokens/{token_id}
    method: PUT
- name: volume plan list
  endpoint:
    path: /volumeplans
    method: GET
- name: volume bind
  endpoint:
    path: /volumes/{name}/bind
    method: POST
- name: volume unbind
  endpoint:
    path: /volumes/{name}/bind
    method: DELETE
- name: volume info
  endpoint:
    path: /volumes/{name}
    method: GET
- name: volume create
  endpoint:
    path: /volumes
    method: POST
- name: volume delete
  endpoint:
    path: /volumes/{name}
    method: DELETE
- name: volume list
  endpoint:
    path: /volumes
    method: GET
- name: volume update
  endpoint:
    path: /volumes/{name}
    method: POST
- name: webhook list
  endpoint:
    path: /events/webhooks
    method: GET
- name: webhook info
  endpoint:
    path: /events/webhooks/{name}
    method: GET
- name: webhook create
  endpoint:
    path: /events/webhooks
    method: POST
- name: webhook update
  endpoint:
    path: /events/webhooks/{name}
    method: PUT
- name: webhook delete
  endpoint:
    path: /events/webhooks/{name}
    method: DELETE
- name: logs config set
  endpoint:
    path: /docker/logs
    method: POST
- name: move container
  endpoint:
    path: /docker/container/{id}/move
    method: POST
- name: logs config
  endpoint:
    path: /docker/logs
    method: GET
- name: move containers
  endpoint:
    path: /docker/containers/move
    method: POST
- name: service_update
  endpoint:
    path: /services/{name}
    method: PUT
- name: service_delete
  endpoint:
    path: /services/{name}
    method: DELETE
- name: service_proxy
  endpoint:
    path: /services/proxy/service/{service}
    method: '*'
- name: service_create
  endpoint:
    path: /services
    method: POST
- name: change_service_documentation
  endpoint:
    path: /services/{name}/doc
    method: PUT
- name: service_broker_list
  endpoint:
    path: /brokers
    method: GET
- name: add_service_broker
  endpoint:
    path: /brokers
    method: POST
- name: update_service_broker
  endpoint:
    path: /brokers/{broker}
    method: PUT
- name: delete_service_broker
  endpoint:
    path: /brokers/{broker}
    method: DELETE
- name: service_instance_info
  endpoint:
    path: /services/{service}/instances/{instance}
    method: GET
- name: revoke_access_to_service_instance
  endpoint:
    path: /services/{service}/instances/permission/{instance}/{team}
    method: DELETE
- name: service_instance_create
  endpoint:
    path: /services/{service}/instances
    method: POST
- name: remove_service_instance
  endpoint:
    path: /services/{name}/instances/{instance}
    method: DELETE
- name: service_instance_list
  endpoint:
    path: /services/instances
    method: GET
- name: service_doc
  endpoint:
    path: /services/{name}/doc
    method: GET
- name: service_instance_proxy
  endpoint:
    path: /services/{service}/proxy/{instance}
    method: '*'
- name: service_info
  endpoint:
    path: /services/{name}
    method: GET
- name: service_plans
  endpoint:
    path: /services/{name}/plans
    method: GET
- name: grant_access_to_service_instance
  endpoint:
    path: /services/{service}/instances/permission/{instance}/{team}
    method: PUT
- name: service_instance_update
  endpoint:
    path: /services/{service}/instances/{instance}
    method: PUT
- name: service_instance_status
  endpoint:
    path: /services/{service}/instances/{instance}/status
    method: GET
- name: app_shell
  endpoint:
    path: /apps/{name}/shell
    method: GET
- name: token_delete
  endpoint:
    path: /tokens/{token_id}
    method: DELETE
- name: token_list
  endpoint:
    path: /tokens
    method: GET
- name: token_info
  endpoint:
    path: /tokens/{token_id}
    method: GET
- name: token_create
  endpoint:
    path: /tokens
    method: POST
- name: token_update
  endpoint:
    path: /tokens/{token_id}
    method: PUT
- name: volume_plan_list
  endpoint:
    path: /volumeplans
    method: GET
- name: volume_bind
  endpoint:
    path: /volumes/{name}/bind
    method: POST
- name: volume_unbind
  endpoint:
    path: /volumes/{name}/bind
    method: DELETE
- name: volume_info
  endpoint:
    path: /volumes/{name}
    method: GET
- name: volume_create
  endpoint:
    path: /volumes
    method: POST
- name: volume_delete
  endpoint:
    path: /volumes/{name}
    method: DELETE
- name: volume_list
  endpoint:
    path: /volumes
    method: GET
- name: volume_update
  endpoint:
    path: /volumes/{name}
    method: POST
- name: webhook_list
  endpoint:
    path: /events/webhooks
    method: GET
- name: webhook_info
  endpoint:
    path: /events/webhooks/{name}
    method: GET
- name: webhook_create
  endpoint:
    path: /events/webhooks
    method: POST
- name: webhook_update
  endpoint:
    path: /events/webhooks/{name}
    method: PUT
- name: webhook_delete
  endpoint:
    path: /events/webhooks/{name}
    method: DELETE
- name: logs_config_set
  endpoint:
    path: /docker/logs
    method: POST
- name: move_container
  endpoint:
    path: /docker/container/{id}/move
    method: POST
- name: logs_config
  endpoint:
    path: /docker/logs
    method: GET
- name: move_containers
  endpoint:
    path: /docker/containers/move
    method: POST
- name: services
  endpoint:
    path: /1.0/services
    method: GET
    data_selector: services
- name: create_service
  endpoint:
    path: /1.0/services
    method: POST
    data_selector: service
- name: service_info
  endpoint:
    path: /1.0/services/{name}
    method: GET
    data_selector: service
- name: update_service
  endpoint:
    path: /1.0/services/{name}
    method: PUT
    data_selector: service
- name: delete_service
  endpoint:
    path: /1.0/services/{name}
    method: DELETE
    data_selector: service
- name: service_plans
  endpoint:
    path: /1.0/services/{name}/plans
    method: GET
    data_selector: plans
- name: service_doc
  endpoint:
    path: /1.0/services/{name}/doc
    method: GET
    data_selector: doc
- name: update_service_doc
  endpoint:
    path: /1.0/services/{name}/doc
    method: PUT
    data_selector: doc
- name: grant_team_access
  endpoint:
    path: /1.0/services/{service}/team/{team}
    method: PUT
    data_selector: access
- name: revoke_team_access
  endpoint:
    path: /1.0/services/{service}/team/{team}
    method: DELETE
    data_selector: access
- name: list_service_instances
  endpoint:
    path: /1.0/services/instances
    method: GET
    data_selector: instances
- name: create_service_instance
  endpoint:
    path: /1.0/services/{service}/instances
    method: POST
    data_selector: instance
- name: service_instance_info
  endpoint:
    path: /1.0/services/{service}/instances/{instance}
    method: GET
    data_selector: instance
- name: update_service_instance
  endpoint:
    path: /1.0/services/{service}/instances/{instance}
    method: PUT
    data_selector: instance
- name: remove_service_instance
  endpoint:
    path: /1.0/services/{service}/instances/{instance}
    method: DELETE
    data_selector: instance
- name: bind_instance_to_app
  endpoint:
    path: /1.0/services/{service}/instances/{instance}/{app}
    method: PUT
    data_selector: binding
- name: unbind_instance_from_app
  endpoint:
    path: /1.0/services/{service}/instances/{instance}/{app}
    method: DELETE
    data_selector: binding
- name: brokers
  endpoint:
    path: /1.7/brokers
    method: GET
    data_selector: records
- name: plans
  endpoint:
    path: /1.0/plans
    method: GET
    data_selector: records
- name: apps
  endpoint:
    path: /1.0/apps
    method: GET
    data_selector: records
- name: services
  endpoint:
    path: /1.0/services
    method: GET
    data_selector: services
- name: create_service
  endpoint:
    path: /1.0/services
    method: POST
    data_selector: service
- name: service_info
  endpoint:
    path: /1.0/services/{name}
    method: GET
    data_selector: service
- name: update_service
  endpoint:
    path: /1.0/services/{name}
    method: PUT
    data_selector: service
- name: delete_service
  endpoint:
    path: /1.0/services/{name}
    method: DELETE
    data_selector: service
- name: service_plans
  endpoint:
    path: /1.0/services/{name}/plans
    method: GET
    data_selector: plans
- name: service_doc
  endpoint:
    path: /1.0/services/{name}/doc
    method: GET
    data_selector: documentation
- name: update_service_doc
  endpoint:
    path: /1.0/services/{name}/doc
    method: PUT
    data_selector: documentation
- name: grant_team_access
  endpoint:
    path: /1.0/services/{service}/team/{team}
    method: PUT
    data_selector: access
- name: revoke_team_access
  endpoint:
    path: /1.0/services/{service}/team/{team}
    method: DELETE
    data_selector: access
- name: list_service_instances
  endpoint:
    path: /1.0/services/instances
    method: GET
    data_selector: instances
- name: create_service_instance
  endpoint:
    path: /1.0/services/{service}/instances
    method: POST
    data_selector: instance
- name: instance_info
  endpoint:
    path: /1.0/services/{service}/instances/{instance}
    method: GET
    data_selector: instance
- name: update_service_instance
  endpoint:
    path: /1.0/services/{service}/instances/{instance}
    method: PUT
    data_selector: instance
- name: delete_service_instance
  endpoint:
    path: /1.0/services/{service}/instances/{instance}
    method: DELETE
    data_selector: instance
- name: bind_instance_to_app
  endpoint:
    path: /1.0/services/{service}/instances/{instance}/{app}
    method: PUT
    data_selector: binding
- name: unbind_instance_from_app
  endpoint:
    path: /1.0/services/{service}/instances/{instance}/{app}
    method: DELETE
    data_selector: binding
- name: instance_status
  endpoint:
    path: /1.0/services/{service}/instances/{instance}/status
    method: GET
    data_selector: status
- name: brokers
  endpoint:
    path: /1.7/brokers
    method: GET
    data_selector: list service brokers
- name: plans
  endpoint:
    path: /1.0/plans
    method: GET
    data_selector: plans list
- name: apps
  endpoint:
    path: /1.0/apps
    method: GET
    data_selector: list apps
- name: unset_app_env
  endpoint:
    path: /1.0/apps/{app}/env
    method: DELETE
- name: get_app_quota
  endpoint:
    path: /1.0/apps/{app}/quota
    method: GET
- name: put_app_quota
  endpoint:
    path: /1.0/apps/{app}/quota
    method: PUT
- name: start_app
  endpoint:
    path: /1.0/apps/{app}/start
    method: POST
- name: stop_app
  endpoint:
    path: /1.0/apps/{app}/stop
    method: POST
- name: restart_app
  endpoint:
    path: /1.0/apps/{app}/restart
    method: POST
- name: set_routable_version
  endpoint:
    path: /1.8/apps/{app}/routable
    method: POST
- name: list_routers
  endpoint:
    path: /1.5/apps/{app}/routers
    method: GET
- name: add_router
  endpoint:
    path: /1.5/apps/{app}/routers
    method: POST
- name: update_router
  endpoint:
    path: /1.5/apps/{app}/routers/{router}
    method: PUT
- name: delete_router
  endpoint:
    path: /1.5/apps/{app}/routers/{router}
    method: DELETE
- name: grant_team_access
  endpoint:
    path: /1.0/apps/{app}/teams/{team}
    method: PUT
- name: revoke_team_access
  endpoint:
    path: /1.0/apps/{app}/teams/{team}
    method: DELETE
- name: add_units
  endpoint:
    path: /1.0/apps/{app}/units
    method: PUT
- name: remove_units
  endpoint:
    path: /1.0/apps/{app}/units
    method: DELETE
- name: list_autoscales
  endpoint:
    path: /1.9/apps/{app}/units/autoscale
    method: GET
- name: add_autoscale_spec
  endpoint:
    path: /1.9/apps/{app}/units/autoscale
    method: POST
- name: remove_autoscale_spec
  endpoint:
    path: /1.9/apps/{app}/units/autoscale
    method: DELETE
- name: delete_platform
  endpoint:
    path: /1.0/platforms/{platform}
    method: DELETE
- name: update_platform
  endpoint:
    path: /1.0/platforms/{platform}
    method: PUT
- name: list_platforms
  endpoint:
    path: /1.0/platforms
    method: GET
- name: add_platform
  endpoint:
    path: /1.0/platforms
    method: POST
- name: get_platform_info
  endpoint:
    path: /1.6/platforms/{platform}
    method: GET
- name: rollback_platform
  endpoint:
    path: /1.6/platforms/{platform}/rollback
    method: POST
- name: apps_env
  endpoint:
    path: /1.0/apps/{app}/env
    method: DELETE
    data_selector: Envs deleted
    params: {}
- name: apps_quota
  endpoint:
    path: /1.0/apps/{app}/quota
    method: GET
    data_selector: OK
    params: {}
- name: apps_start
  endpoint:
    path: /1.0/apps/{app}/start
    method: POST
    data_selector: App started
    params: {}
- name: apps_stop
  endpoint:
    path: /1.0/apps/{app}/stop
    method: POST
    data_selector: App stopped
    params: {}
- name: apps_restart
  endpoint:
    path: /1.0/apps/{app}/restart
    method: POST
    data_selector: App restarted
    params: {}
- name: apps_routable
  endpoint:
    path: /1.8/apps/{app}/routable
    method: POST
    data_selector: App updated
    params: {}
- name: apps_routers
  endpoint:
    path: /1.5/apps/{app}/routers
    method: GET
    data_selector: Routers list
    params: {}
- name: apps_add_router
  endpoint:
    path: /1.5/apps/{app}/routers
    method: POST
    data_selector: Router added
    params: {}
- name: apps_update_router
  endpoint:
    path: /1.5/apps/{app}/routers/{router}
    method: PUT
    data_selector: Router updated
    params: {}
- name: apps_delete_router
  endpoint:
    path: /1.5/apps/{app}/routers/{router}
    method: DELETE
    data_selector: App removed.
    params: {}
- name: apps_grant_access_team
  endpoint:
    path: /1.0/apps/{app}/teams/{team}
    method: PUT
    data_selector: Access granted
    params: {}
- name: apps_revoke_access_team
  endpoint:
    path: /1.0/apps/{app}/teams/{team}
    method: DELETE
    data_selector: Access revoked
    params: {}
- name: apps_add_units
  endpoint:
    path: /1.0/apps/{app}/units
    method: PUT
    data_selector: Access revoked
    params: {}
- name: apps_remove_units
  endpoint:
    path: /1.0/apps/{app}/units
    method: DELETE
    data_selector: Access revoked
    params: {}
- name: apps_autoscale
  endpoint:
    path: /1.9/apps/{app}/units/autoscale
    method: GET
    data_selector: AutoScale info
    params: {}
- name: apps_add_autoscale
  endpoint:
    path: /1.9/apps/{app}/units/autoscale
    method: POST
    data_selector: AutoScale updated
    params: {}
- name: apps_remove_autoscale
  endpoint:
    path: /1.9/apps/{app}/units/autoscale
    method: DELETE
    data_selector: AutoScale removed
    params: {}
- name: platforms
  endpoint:
    path: /1.0/platforms
    method: GET
    data_selector: Platform list
    params: {}
- name: platforms_add
  endpoint:
    path: /1.0/platforms
    method: POST
    data_selector: Platform created
    params: {}
- name: platforms_update
  endpoint:
    path: /1.0/platforms/{platform}
    method: PUT
    data_selector: Platform updated
    params: {}
- name: platforms_delete
  endpoint:
    path: /1.0/platforms/{platform}
    method: DELETE
    data_selector: Platform removed
    params: {}
- name: teams
  endpoint:
    path: /1.0/teams
    method: GET
    data_selector: Team list
- name: create_team
  endpoint:
    path: /1.0/teams
    method: POST
    data_selector: Team created
- name: delete_team
  endpoint:
    path: /1.0/teams/{team}
    method: DELETE
    data_selector: Team removed
- name: get_team
  endpoint:
    path: /1.4/teams/{team}
    method: GET
    data_selector: Team data
- name: get_team_users
  endpoint:
    path: /1.17/teams/{team}/users
    method: GET
    data_selector: User list
- name: get_team_groups
  endpoint:
    path: /1.17/teams/{team}/groups
    method: GET
    data_selector: Group list
- name: update_team
  endpoint:
    path: /1.6/teams/{team}
    method: PUT
    data_selector: Team updated
- name: get_team_quota
  endpoint:
    path: /1.12/teams/{team}/quota
    method: GET
    data_selector: OK
- name: update_team_quota
  endpoint:
    path: /1.12/teams/{team}/quota
    method: PUT
    data_selector: Quota updated
- name: list_users
  endpoint:
    path: /1.0/users
    method: GET
    data_selector: List users
- name: create_user
  endpoint:
    path: /1.0/users
    method: POST
    data_selector: User created
- name: delete_user
  endpoint:
    path: /1.0/users
    method: DELETE
    data_selector: User removed
- name: get_user_api_key
  endpoint:
    path: /1.0/users/api-key
    method: GET
    data_selector: API TOKEN
- name: regenerate_user_api_key
  endpoint:
    path: /1.0/users/api-key
    method: POST
    data_selector: API TOKEN
- name: get_user_info
  endpoint:
    path: /1.0/users/info
    method: GET
    data_selector: OK
- name: get_user_quota
  endpoint:
    path: /1.0/users/{email}/quota
    method: GET
    data_selector: OK
- name: update_user_quota
  endpoint:
    path: /1.0/users/{email}/quota
    method: PUT
    data_selector: Quota successfully updated
- name: change_user_password
  endpoint:
    path: /1.0/users/password
    method: PUT
    data_selector: Ok
- name: reset_user_password
  endpoint:
    path: /1.0/users/{email}/password
    method: POST
    data_selector: Ok
- name: logout
  endpoint:
    path: /1.0/users/tokens
    method: DELETE
    data_selector: Ok
- name: list_volumes
  endpoint:
    path: /1.4/volumes
    method: GET
    data_selector: List volumes
- name: create_volume
  endpoint:
    path: /1.4/volumes
    method: POST
    data_selector: Volume created
- name: list_pools
  endpoint:
    path: /1.0/pools
    method: GET
    data_selector: Pools list
- name: create_pool
  endpoint:
    path: /1.0/pools
    method: POST
    data_selector: Pool created
- name: get_pool_information
  endpoint:
    path: /pools/{pool}
    method: GET
    data_selector: Pool data
- name: delete_pool
  endpoint:
    path: /pools/{pool}
    method: DELETE
    data_selector: Pool deleted
- name: teams
  endpoint:
    path: /1.0/teams
    method: GET
    data_selector: teams
- name: create_team
  endpoint:
    path: /1.0/teams
    method: POST
    data_selector: team
- name: delete_team
  endpoint:
    path: /1.0/teams/{team}
    method: DELETE
    data_selector: team
- name: get_team
  endpoint:
    path: /1.4/teams/{team}
    method: GET
    data_selector: team
- name: get_team_users
  endpoint:
    path: /1.17/teams/{team}/users
    method: GET
    data_selector: users
- name: get_team_groups
  endpoint:
    path: /1.17/teams/{team}/groups
    method: GET
    data_selector: groups
- name: update_team
  endpoint:
    path: /1.6/teams/{team}
    method: PUT
    data_selector: team
- name: get_team_quota
  endpoint:
    path: /1.12/teams/{team}/quota
    method: GET
    data_selector: quota
- name: update_team_quota
  endpoint:
    path: /1.12/teams/{team}/quota
    method: PUT
    data_selector: quota
- name: list_users
  endpoint:
    path: /1.0/users
    method: GET
    data_selector: users
- name: create_user
  endpoint:
    path: /1.0/users
    method: POST
    data_selector: user
- name: delete_user
  endpoint:
    path: /1.0/users
    method: DELETE
    data_selector: user
- name: get_user_api_key
  endpoint:
    path: /1.0/users/api-key
    method: GET
    data_selector: api_key
- name: regenerate_user_api_key
  endpoint:
    path: /1.0/users/api-key
    method: POST
    data_selector: api_key
- name: get_logged_user_info
  endpoint:
    path: /1.0/users/info
    method: GET
    data_selector: user_info
- name: get_user_quota
  endpoint:
    path: /1.0/users/{email}/quota
    method: GET
    data_selector: quota
- name: change_user_quota
  endpoint:
    path: /1.0/users/{email}/quota
    method: PUT
    data_selector: quota
- name: change_user_password
  endpoint:
    path: /1.0/users/password
    method: PUT
    data_selector: password
- name: reset_user_password
  endpoint:
    path: /1.0/users/{email}/password
    method: POST
    data_selector: password
- name: logout
  endpoint:
    path: /1.0/users/tokens
    method: DELETE
    data_selector: logout
- name: list_volumes
  endpoint:
    path: /1.4/volumes
    method: GET
    data_selector: volumes
- name: create_volume
  endpoint:
    path: /1.4/volumes
    method: POST
    data_selector: volume
- name: list_pools
  endpoint:
    path: /1.0/pools
    method: GET
    data_selector: pools
- name: create_pool
  endpoint:
    path: /1.0/pools
    method: POST
    data_selector: pool
- name: get_pool
  endpoint:
    path: /pools/{pool}
    method: GET
    data_selector: pool
- name: delete_pool
  endpoint:
    path: /pools/{pool}
    method: DELETE
    data_selector: pool
- name: cluster
  endpoint:
    path: /1.3/provisioner/clusters
    method: GET
- name: create_cluster
  endpoint:
    path: /1.3/provisioner/clusters
    method: POST
- name: delete_cluster
  endpoint:
    path: /1.3/provisioner/clusters/{cluster_name}
    method: DELETE
- name: update_cluster
  endpoint:
    path: /1.4/provisioner/clusters/{cluster_name}
    method: POST
- name: cluster_info
  endpoint:
    path: /1.8/provisioner/clusters/{cluster_name}
    method: GET
- name: delete_volume
  endpoint:
    path: /1.4/volumes/{volume}
    method: DELETE
- name: update_volume
  endpoint:
    path: /1.4/volumes/{volume}
    method: PUT
- name: get_volume
  endpoint:
    path: /1.4/volumes/{volume}
    method: GET
- name: bind_volume
  endpoint:
    path: /1.4/volumes/{volume}/bind
    method: POST
- name: unbind_volume
  endpoint:
    path: /1.4/volumes/{volume}/bind
    method: DELETE
- name: list_volume_plans
  endpoint:
    path: /1.4/volumeplans
    method: GET
- name: create_role
  endpoint:
    path: /1.0/roles
    method: POST
- name: update_role
  endpoint:
    path: /1.0/roles
    method: PUT
- name: delete_role
  endpoint:
    path: /1.0/roles/{role_name}
    method: DELETE
- name: add_permission
  endpoint:
    path: /1.0/roles/{role_name}/permissions
    method: POST
- name: remove_permission
  endpoint:
    path: /1.0/roles/{role_name}/permissions/{permission}
    method: DELETE
- name: assign_role
  endpoint:
    path: /1.0/roles/{role_name}/user
    method: POST
- name: dissociate_role
  endpoint:
    path: /1.0/roles/{role_name}/user/{email}
    method: DELETE
- name: add_default_role
  endpoint:
    path: /1.0/role/default
    method: POST
- name: delete_default_role
  endpoint:
    path: /1.0/role/default
    method: DELETE
- name: assign_role_to_token
  endpoint:
    path: /1.6/roles/{role_name}/token
    method: POST
- name: dissociate_role_from_token
  endpoint:
    path: /1.6/roles/{role_name}/token/{token_id}
    method: DELETE
- name: list_tokens
  endpoint:
    path: /1.6/tokens
    method: GET
- name: create_token
  endpoint:
    path: /1.6/tokens
    method: POST
- name: delete_token
  endpoint:
    path: /1.6/tokens/{token_id}
    method: DELETE
- name: clusters
  endpoint:
    path: /1.3/provisioner/clusters
    method: GET
    data_selector: Cluster
- name: create_cluster
  endpoint:
    path: /1.3/provisioner/clusters
    method: POST
    data_selector: Cluster
- name: delete_cluster
  endpoint:
    path: /1.3/provisioner/clusters/{cluster_name}
    method: DELETE
    data_selector: Cluster
- name: update_cluster
  endpoint:
    path: /1.4/provisioner/clusters/{cluster_name}
    method: POST
    data_selector: Cluster
- name: cluster_info
  endpoint:
    path: /1.8/provisioner/clusters/{cluster_name}
    method: GET
    data_selector: Cluster
- name: volumes
  endpoint:
    path: /1.4/volumes/{volume}
    method: GET
    data_selector: Volume
- name: create_volume
  endpoint:
    path: /1.4/volumes/{volume}
    method: POST
    data_selector: Volume
- name: delete_volume
  endpoint:
    path: /1.4/volumes/{volume}
    method: DELETE
    data_selector: Volume
- name: update_volume
  endpoint:
    path: /1.4/volumes/{volume}
    method: PUT
    data_selector: Volume
- name: list_volumeplans
  endpoint:
    path: /1.4/volumeplans
    method: GET
    data_selector: VolumePlans
- name: roles
  endpoint:
    path: /1.0/roles
    method: POST
    data_selector: Role
- name: delete_role
  endpoint:
    path: /1.0/roles/{role_name}
    method: DELETE
    data_selector: Role
- name: job_environment
  endpoint:
    path: /1.16/jobs/{name}/env
    method: GET
    data_selector: environment variables
    params: {}
- name: delete_job_environment
  endpoint:
    path: /1.13/jobs/{name}/env
    method: DELETE
    data_selector: envs deleted
    params: {}
- name: tokens
  endpoint:
    path: /1.6/tokens/{token_id}
    method: PUT
    data_selector: null
    params: {}
- name: tokens_info
  endpoint:
    path: /1.7/tokens/{token_id}
    method: GET
    data_selector: null
    params: {}
- name: events
  endpoint:
    path: /1.1/events/{eventid}
    method: GET
    data_selector: null
    params: {}
- name: events_cancel
  endpoint:
    path: /1.1/events/{eventid}/cancel
    method: POST
    data_selector: null
    params: {}
- name: webhooks_list
  endpoint:
    path: /1.6/events/webhooks
    method: GET
    data_selector: null
    params: {}
- name: webhooks_create
  endpoint:
    path: /1.6/events/webhooks
    method: POST
    data_selector: null
    params: {}
- name: webhooks_info
  endpoint:
    path: /1.6/events/webhooks/{name}
    method: GET
    data_selector: null
    params: {}
- name: webhooks_update
  endpoint:
    path: /1.6/events/webhooks/{name}
    method: PUT
    data_selector: null
    params: {}
- name: webhooks_delete
  endpoint:
    path: /1.6/events/webhooks/{name}
    method: DELETE
    data_selector: null
    params: {}
- name: provisioners
  endpoint:
    path: /1.7/provisioner
    method: GET
    data_selector: null
    params: {}
- name: constraints
  endpoint:
    path: /1.3/constraints
    method: GET
    data_selector: null
    params: {}
- name: routers
  endpoint:
    path: /1.3/routers
    method: GET
    data_selector: null
    params: {}
- name: routers_create
  endpoint:
    path: /1.8/routers
    method: POST
    data_selector: null
    params: {}
- name: routers_update
  endpoint:
    path: /1.8/routers/{name}
    method: PUT
    data_selector: null
    params: {}
- name: routers_delete
  endpoint:
    path: /1.8/routers/{name}
    method: DELETE
    data_selector: null
    params: {}
- name: roles_assign
  endpoint:
    path: /1.9/roles/{role_name}/group
    method: POST
    data_selector: null
    params: {}
- name: roles_dissociate
  endpoint:
    path: /1.6/roles/{role_name}/group/{group_name}
    method: DELETE
    data_selector: null
    params: {}
- name: jobs_create
  endpoint:
    path: /1.13/jobs
    method: POST
    data_selector: null
    params: {}
- name: jobs_list
  endpoint:
    path: /1.13/jobs
    method: GET
    data_selector: null
    params: {}
- name: jobs_info
  endpoint:
    path: /1.13/jobs/{name}
    method: GET
    data_selector: null
    params: {}
- name: jobs_update
  endpoint:
    path: /1.13/jobs/{name}
    method: PUT
    data_selector: null
    params: {}
- name: jobs_delete
  endpoint:
    path: /1.13/jobs/{name}
    method: DELETE
    data_selector: null
    params: {}
- name: jobs_trigger
  endpoint:
    path: /1.13/jobs/{name}/trigger
    method: POST
    data_selector: null
    params: {}
- name: jobs_log
  endpoint:
    path: /1.13/jobs/{name}/log
    method: GET
    data_selector: null
    params: {}
- name: jobs_env
  endpoint:
    path: /1.13/jobs/{name}/env
    method: POST
    data_selector: null
    params: {}
- name: unset_job_environment_variables
  endpoint:
    path: /1.13/jobs/{name}/env
    method: DELETE
    data_selector: null
    params: {}
- name: get_job_environment_variables
  endpoint:
    path: /1.16/jobs/{name}/env
    method: GET
    data_selector: null
    params: {}
- name: admin_user
  endpoint:
    path: /tsurud/root/user/create
    method: POST
    data_selector: admin@admin.com
- name: team
  endpoint:
    path: /team/create
    method: POST
    data_selector: admin
- name: app_dashboard
  endpoint:
    path: /app/create
    method: POST
    data_selector: dashboard
- name: app_example_go
  endpoint:
    path: /app/create
    method: POST
    data_selector: example-go
- name: tsuru-api
  endpoint:
    path: /deploy/tsuru-api
    method: GET
    data_selector: loadBalancer.ingress[].ip
- name: tsuru-ingress-nginx-controller
  endpoint:
    path: /deploy/tsuru-ingress-nginx-controller
    method: GET
    data_selector: loadBalancer.ingress[].ip
- name: pool
  endpoint:
    path: /pool
    method: POST
    data_selector: pools
- name: kubernetes_provisioner
  endpoint:
    path: /kubernetes
    method: GET
- name: cluster
  endpoint:
    path: /clusters
    method: GET
- name: goroutines
  endpoint:
    path: /debug/goroutines
    method: GET
- name: volume_plans
  endpoint:
    path: /volume-plans
    method: GET
    data_selector: volume_plans
    params: {}
- name: volumes
  endpoint:
    path: /volumes
    method: GET
    data_selector: volumes
    params: {}
- name: volume_binds
  endpoint:
    path: /volume-binds
    method: GET
    data_selector: volume_binds
    params: {}
- name: event_webhook
  endpoint:
    path: /event-webhook
    method: POST
    data_selector: records
    params: {}
- name: dashboard
  endpoint:
    path: /tsuru/app/create
    method: POST
    data_selector: app
    params: {}
- name: example-go
  endpoint:
    path: /tsuru/app/create
    method: POST
    data_selector: app
    params:
      platform: go
- name: blog
  endpoint:
    path: /app/create
    method: POST
    data_selector: application
    params: {}
- name: admin_user_creation
  endpoint:
    path: /deploy/tsuru-api
    method: POST
    data_selector: user creation
    params:
      email: admin@admin.com
- name: tsuru_target_add
  endpoint:
    path: /target-add
    method: POST
    data_selector: target add
    params:
      host: http://$TSURU_HOST
      secure: true
- name: create_team
  endpoint:
    path: /team/create
    method: POST
    data_selector: create team
    params:
      name: admin
- name: app_creation
  endpoint:
    path: /app/create
    method: POST
    data_selector: create app
    params:
      name: dashboard
      image: tsuru/dashboard
- name: app_deployment
  endpoint:
    path: /app/deploy
    method: POST
    data_selector: deploy app
    params:
      app: dashboard
- name: blog
  endpoint:
    path: /app/create
    method: POST
    data_selector: application
    params: {}
- name: platforms
  endpoint:
    path: /platforms
    method: GET
    data_selector: platforms
    params: {}
- name: helloworld
  endpoint:
    path: /app/create
    method: POST
    data_selector: application
    params: {}
- name: platform
  endpoint:
    path: /platforms
    method: POST
    data_selector: platforms
- name: pool
  endpoint:
    path: /pool
    method: POST
    data_selector: ''
    params: {}
- name: helloweb
  endpoint:
    path: /app/create
    method: POST
- name: cluster
  endpoint:
    path: /clusters
    method: GET
- name: blog
  endpoint:
    path: /app/blog
    method: POST
    data_selector: application
    params: {}
- name: goroutines
  endpoint:
    path: /debug/goroutines
    method: GET
- name: helloworld
  endpoint:
    path: /app/create
    method: POST
    data_selector: application
    params: {}
- name: docker_image
  endpoint:
    path: /app/deploy
    method: POST
    data_selector: deployment
    params: {}
- name: buildpacks
  endpoint:
    path: /services/buildpacks
    method: GET
    data_selector: included_buildpacks
    params: {}
- name: volume
  endpoint:
    path: /volumes
    method: POST
    data_selector: volumes
    params: {}
- name: volume_bind
  endpoint:
    path: /volume/bind
    method: POST
    data_selector: volume_binds
    params: {}
- name: event_webhook
  endpoint:
    path: /event_webhook
    method: POST
    data_selector: event
    params: {}
- name: service
  endpoint:
    path: /service-list
    method: GET
    data_selector: Services
- name: service_instance
  endpoint:
    path: /service-instance-status
    method: GET
    data_selector: Instances
- name: service_info
  endpoint:
    path: /service-info
    method: GET
    data_selector: Info
- name: app_deploy
  endpoint:
    path: /app/deploy
    method: POST
- name: healthcheck
  endpoint:
    path: /healthcheck
    method: GET
- name: startupcheck
  endpoint:
    path: /startupcheck
    method: GET
- name: application
  endpoint:
    path: /app
    method: GET
    data_selector: applications
    params: {}
- name: blog
  endpoint:
    path: /app/blog
    method: POST
    data_selector: application
    params: {}
- name: helloworld
  endpoint:
    path: /app/helloworld
    method: POST
- name: app
  endpoint:
    path: /app
    method: GET
    data_selector: records
- name: helloworld
  endpoint:
    path: /app/create
    method: POST
    data_selector: application
    params:
      platform: static
- name: plans
  endpoint:
    path: /resources/plans
    method: GET
    data_selector: plans
- name: create_instance
  endpoint:
    path: /resources
    method: POST
    data_selector: status
- name: update_instance
  endpoint:
    path: /resources/{instance_name}
    method: PUT
    data_selector: status
- name: bind_instance
  endpoint:
    path: /resources/{instance_name}/bind
    method: POST
    data_selector: status
- name: unbind_instance
  endpoint:
    path: /resources/{instance_name}/bind
    method: DELETE
    data_selector: status
- name: remove_instance
  endpoint:
    path: /resources/{instance_name}
    method: DELETE
    data_selector: status
- name: status_instance
  endpoint:
    path: /resources/{instance_name}/status
    method: GET
    data_selector: status
- name: info_instance
  endpoint:
    path: /resources/{instance_name}
    method: GET
    data_selector: info
- name: buildpack
  endpoint:
    path: /app-create
    method: POST
    data_selector: application
    params: {}
- name: deploy_application
  endpoint:
    path: /app-deploy
    method: POST
    data_selector: deployment
    params: {}
- name: mysql
  endpoint:
    path: /services/data/v1.27/sobjects/MySQL
    method: GET
- name: elastic-search
  endpoint:
    path: /services/data/v1.27/sobjects/ElasticSearch
    method: GET
- name: plans
  endpoint:
    path: /resources/plans
    method: GET
    data_selector: plans
    params: {}
- name: create_instance
  endpoint:
    path: /resources
    method: POST
    data_selector: ''
    params: {}
- name: update_instance
  endpoint:
    path: /resources/<name>
    method: PUT
    data_selector: ''
    params: {}
- name: bind_app
  endpoint:
    path: /resources/<name>/bind-app
    method: POST
    data_selector: ''
    params: {}
- name: unbind_app
  endpoint:
    path: /resources/<name>/bind-app
    method: DELETE
    data_selector: ''
    params: {}
- name: logs
  endpoint:
    path: /app/log
    method: GET
    data_selector: logs
- name: plans
  endpoint:
    path: /resources/plans
    method: GET
    data_selector: plans
    params: {}
- name: add_instance
  endpoint:
    path: /resources
    method: POST
    data_selector: ''
    params: {}
- name: bind_app
  endpoint:
    path: /resources/<name>/bind-app
    method: POST
    data_selector: ''
    params: {}
- name: unbind_app
  endpoint:
    path: /resources/<name>/bind-app
    method: DELETE
    data_selector: ''
    params: {}
- name: remove_instance
  endpoint:
    path: /resources/<name>
    method: DELETE
    data_selector: ''
    params: {}
- name: status
  endpoint:
    path: /resources/<name>/status
    method: GET
    data_selector: ''
    params: {}
- name: hooks
  endpoint:
    path: /hooks
    method: GET
    data_selector: hooks
    params: {}
- name: processes
  endpoint:
    path: /processes
    method: GET
    data_selector: processes
    params: {}
- name: healthcheck
  endpoint:
    path: /healthcheck
    method: GET
    data_selector: healthcheck
    params: {}
- name: startupcheck
  endpoint:
    path: /startupcheck
    method: GET
    data_selector: startupcheck
    params: {}
- name: unit_states
  endpoint:
    path: /unit_states
    method: GET
    data_selector: states
- name: mysql
  endpoint:
    path: /services/mysql
    method: GET
    data_selector: instances
    params: {}
- name: redis
  endpoint:
    path: /services/redis
    method: GET
    data_selector: instances
    params: {}
- name: mongodb
  endpoint:
    path: /services/mongodb
    method: GET
    data_selector: instances
    params: {}
- name: aws::dh-route53
  endpoint:
    path: /services/data/v1.27/sobjects/AwsDhRoute53
    method: GET
    data_selector: records
    params: {}
- name: pool
  endpoint:
    path: /pool
    method: GET
    data_selector: pools
- name: app_creation
  endpoint:
    path: /app/create
    method: POST
    data_selector: application
    params:
      pool: pool_name
- name: plans
  endpoint:
    path: /resources/plans
    method: GET
    data_selector: plans
- name: create_instance
  endpoint:
    path: /resources
    method: POST
    data_selector: instance
    params: {}
- name: update_instance
  endpoint:
    path: /resources/{instance_name}
    method: PUT
    data_selector: update
    params: {}
- name: bind_instance
  endpoint:
    path: /resources/{instance_name}/bind
    method: POST
    data_selector: bind
    params: {}
- name: unbind_instance
  endpoint:
    path: /resources/{instance_name}/bind
    method: DELETE
    data_selector: unbind
    params: {}
- name: remove_instance
  endpoint:
    path: /resources/{instance_name}
    method: DELETE
    data_selector: remove
    params: {}
- name: check_instance_status
  endpoint:
    path: /resources/{instance_name}/status
    method: GET
    data_selector: status
    params: {}
- name: instance_info
  endpoint:
    path: /resources/{instance_name}
    method: GET
    data_selector: info
    params: {}
- name: plans
  endpoint:
    path: /resources/plans
    method: GET
    data_selector: plans
- name: create_instance
  endpoint:
    path: /resources
    method: POST
    data_selector: instance
    params: {}
- name: update_instance
  endpoint:
    path: /resources/<name>
    method: PUT
    data_selector: instance
    params: {}
- name: bind_app
  endpoint:
    path: /resources/<name>/bind-app
    method: POST
    data_selector: bind
    params: {}
- name: unbind_app
  endpoint:
    path: /resources/<name>/bind-app
    method: DELETE
    data_selector: unbind
    params: {}
- name: plans
  endpoint:
    path: /resources/plans
    method: GET
    data_selector: plans
- name: add_instance
  endpoint:
    path: /resources
    method: POST
    data_selector: ''
    params: {}
- name: bind_app
  endpoint:
    path: /resources/<name>/bind-app
    method: POST
    data_selector: ''
    params: {}
- name: unbind_app
  endpoint:
    path: /resources/<name>/bind-app
    method: DELETE
    data_selector: ''
    params: {}
- name: remove_instance
  endpoint:
    path: /resources/<name>
    method: DELETE
    data_selector: ''
    params: {}
- name: status
  endpoint:
    path: /resources/<name>/status
    method: GET
    data_selector: ''
    params: {}
- name: mysql
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: redis
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: mongodb
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: aws::dh-route53
  endpoint:
    path: /services/data/vXX.X/sobjects/aws::dh-route53
    method: GET
    data_selector: records
    params: {}
notes:
- Create the admin user on tsuru with a specified email.
- Use Port-forward to access tsuru and ingress controller.
- Using minikube with Kubernetes v1.24.0
- Requires Helm client installed
- Admin user needs to be created manually
- Uses Python and Django for application deployment.
- Uses tsuru for deploying applications
- Requires setup of application files like Gemfile and Procfile
- 'Users can use two versions of Java: 7 and 8, both provided by Oracle.'
- Default behavior is to use Java 7, change to Java 8 using JAVA_VERSION.
- Max amount of heap memory can be defined using JAVA_MAX_MEMORY.
- Requires setup of connected app in tsuru
- Make sure to not expose more than one port. This will make the deployment fail.
- The app should listen to $PORT or to the exposed port.
- Volumes allow applications running on tsuru to use external storage volumes mounted
  on their filesystem.
- Volume plans are managed by tsuru administrators and are configured in tsuru.conf
  file.
- Everything that vary between deploys (on different environments, like development
  or production) should be managed by environment variables.
- Uses Python version 2.7.13 by default.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- For Java, the app platform is, guess what, `java`!
- Uses mvn package to generate the WAR file.
- Uses HTTP Basic Authentication - username is the service name, password defined
  in service manifest.
- Sometimes it takes a while for a new service instance to be done.
- Deployment hooks allow developers to run commands before and after some commands.
- Healthcheck will abort the deployment if it fails.
- Startupcheck ensures the process is healthy before traffic is routed to it.
- Some objects like Contact may return nulls in deeply nested fields
- Uses HTTP basic authentication.
- tsuru uses basic authentication for authenticating the services
- Tsuru supports services provided by a service broker since version 1.7.0.
- Service brokers may be registered on the tsuru API to make their services available
  for applications running on the platform.
- tsuru uses a configuration file in YAML format.
errors:
- '401: Unauthorized'
- '404: Not found'
- '400: Invalid data'
- '400: Invalid uuid or empty reason'
- '204: No content'
- '500: Internal server error'
- '409: Existent template'
- '403: Pool still has apps'
- '403: Limit lower than allocated'
- '404: Role or team token not found'
- '404: User not found'
- '403: Forbidden (team is not the owner)'
- '404: Service not found'
- '200 OK: Operation successful'
- '201 Created: Resource successfully created'
- '204 No Content: Successful request but no content returned'
- '400 Bad Request: Invalid data provided'
- '401 Unauthorized: Authentication required or failed'
- '403 Forbidden: Access denied'
- '404 Not Found: Resource not found'
- '401 Unauthorized: Unauthorized'
- '404 Not Found: Job not found.'
- '200 OK: Service removed'
- '201 Created: Service instance created'
- '204 No Content: No content'
- '400 Bad Request: Invalid data'
- '403 Forbidden: Forbidden'
- '404 Not Found: Service not found'
- '404 Not Found: Job not found'
- '404 Not Found: App not found'
- '404 Not Found: Not found'
- '409 Conflict: Team already exists'
- 401 Unauthorized
- 403 Forbidden
- 404 Not Found
- '409 Conflict: Conflict'
- '401 Unauthorized: Unauthorized.'
- '404 Not Found: Team token not found.'
- '200: Success'
- '201: Created'
- '202: Accepted'
- '204: No Content'
- '404: Not Found'
- '412: Precondition Failed'
- '500: Internal Server Error'
- Service instance is pending
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '404: if the service instance does not exist.'
- '500: in case of any failure in the operation.'
- '201 Created: Instance successfully created'
- '200 OK: Instance successfully updated'
- '204 No Content: Instance successfully removed'
- '404 Not Found: Instance not found'
auth_info:
  mentioned_objects: []
client:
  base_url: http://localhost:8080
  headers:
    Accept: application/json
source_metadata: null
