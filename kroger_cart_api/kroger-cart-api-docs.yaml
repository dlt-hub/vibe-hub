resources:
- name: add_to_cart
  endpoint:
    path: /v1/cart/add
    method: PUT
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: locations
  endpoint:
    path: /v1/locations
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: profile
  endpoint:
    path: /v1/identity/profile
    method: GET
    data_selector: ''
- name: Authorization Endpoints (Partner)
  endpoint:
    path: /api/authorization-endpoints-partner
    method: GET
- name: Authorization Endpoints (Public)
  endpoint:
    path: /api/authorization-endpoints-public
    method: GET
- name: Cart API (Partner)
  endpoint:
    path: /api/cart-api-partner
    method: GET
- name: Cart API (Public)
  endpoint:
    path: /api/cart-api-public
    method: GET
- name: Identity API (Partner)
  endpoint:
    path: /api/identity-api-partner
    method: GET
- name: Identity API (Public)
  endpoint:
    path: /api/identity-api-public
    method: GET
- name: Location API (Partner)
  endpoint:
    path: /api/location-api-partner
    method: GET
- name: Location API (Public)
  endpoint:
    path: /api/location-api-public
    method: GET
- name: Product API (Partner)
  endpoint:
    path: /api/product-api-partner
    method: GET
- name: Product API (Public)
  endpoint:
    path: /api/product-api-public
    method: GET
- name: testdivyaapi0402-005
  endpoint:
    path: /api/testdivyaapi0402-005
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user_profile
  endpoint:
    path: /v1/identity/profile
    method: GET
    data_selector: data
    params: {}
- name: location_list
  endpoint:
    path: /v1/locations
    method: GET
    data_selector: locations
    params:
      filter.limit: 10
- name: location_details
  endpoint:
    path: /v1/locations/{locationId}
    method: GET
    data_selector: location
- name: chain_list
  endpoint:
    path: /v1/chains
    method: GET
    data_selector: chains
- name: chain_details
  endpoint:
    path: /v1/chains/{name}
    method: GET
    data_selector: chain
- name: department_list
  endpoint:
    path: /v1/departments
    method: GET
    data_selector: departments
- name: department_details
  endpoint:
    path: /v1/departments/{id}
    method: GET
    data_selector: department
- name: product_search
  endpoint:
    path: /products
    method: GET
    data_selector: data
    params:
      filter.term: string
      filter.locationId: string
      filter.productId: string
      filter.brand: string
      filter.fulfillment: string
      filter.start: integer
      filter.limit: integer
- name: product_details
  endpoint:
    path: /products/{id}
    method: GET
    data_selector: data
    params:
      filter.locationId: string
notes:
- The customer must be authenticated using the OAuth2 Authorization Code grant type.
- Your client credentials should be treated the same as a username and password.
- You should never share your credentials with anyone or store them in a place that
  can be accessed by anyone but the application owner.
- Kroger uses OAuth2 for all service-to-service interactions
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Uses OAuth2 with authorization code — requires setup of connected app in api
- Authorization Code grant type requires customer consent.
- The refresh token is invalidated once used to get a new access and refresh token.
- Access tokens are valid for 1800 seconds (30 minutes).
- Refresh tokens are valid for 15,768,000 seconds (6 months).
- A refresh token is only returned when using the Authorization Code Grant Type.
- Refreshing your client secret will prevent your Apps from making successful requests
  until you update your client credentials in your App.
- You may not use the APIs if you are not of legal age to form a binding contract
  with Kroger.
- Kroger sets and enforces limits on your use of the APIs.
- Public Identity API has a 5,000 call per day rate limit.
- The Public Locations API has a 1,600 call a day per endpoint rate limit.
- The Locations API does not support pagination.
- Initial search value is required for all requests.
errors:
- 400 Bad Request
- 401 Unauthorized
- 403 Forbidden
- 500 Internal Server Error
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Missing/Invalid Refresh Token: The refresh token is invalid or has expired.'
- 'invalid_token: The access token is invalid or has expired'
- 'unauthorized: invalid credentials'
- 404 Not Found
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '500: Internal Server Error'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.kroger.com
  auth:
    type: oauth2
    flow: Authorization Code
source_metadata: null
