resources:
- name: orgs
  endpoint:
    path: /orgs
    method: GET
    data_selector: resourceTypes
- name: orgDescribe
  endpoint:
    path: /orgs/{orgId}
    method: GET
    data_selector: resourceTypes
- name: org_access
  endpoint:
    path: /orgs/{orgId}/access
    method: GET
- name: workspaces
  endpoint:
    path: /orgs/{orgId}/workspaces
    method: GET
- name: create_workspace
  endpoint:
    path: /orgs/{orgId}/workspaces
    method: POST
- name: describe_workspace
  endpoint:
    path: /workspaces/{workspaceId}
    method: GET
- name: modify_workspace
  endpoint:
    path: /workspaces/{workspaceId}
    method: PATCH
- name: delete_workspace
  endpoint:
    path: /workspaces/{workspaceId}
    method: DELETE
- name: list_users_access_workspace
  endpoint:
    path: /workspaces/{workspaceId}/access
    method: GET
- name: create_document
  endpoint:
    path: /workspaces/{workspaceId}/docs
    method: POST
- name: import_document
  endpoint:
    path: /workspaces/{workspaceId}/import
    method: POST
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: resources
    params: {}
- name: fetch_records
  endpoint:
    path: /docs/{docId}/tables/{tableId}/records
    method: GET
    data_selector: records
- name: add_records
  endpoint:
    path: /docs/{docId}/tables/{tableId}/records
    method: POST
    data_selector: records
- name: modify_records
  endpoint:
    path: /docs/{docId}/tables/{tableId}/records
    method: PATCH
    data_selector: records
- name: add_or_update_records
  endpoint:
    path: /docs/{docId}/tables/{tableId}/records
    method: PUT
    data_selector: records
- name: list_tables
  endpoint:
    path: /docs/{docId}/tables
    method: GET
- name: add_tables
  endpoint:
    path: /docs/{docId}/tables
    method: POST
- name: modify_tables
  endpoint:
    path: /docs/{docId}/tables
    method: PATCH
- name: list_columns
  endpoint:
    path: /docs/{docId}/tables/{tableId}/columns
    method: GET
- name: add_columns
  endpoint:
    path: /docs/{docId}/tables/{tableId}/columns
    method: POST
- name: modify_columns
  endpoint:
    path: /docs/{docId}/tables/{tableId}/columns
    method: PATCH
- name: attachments
  endpoint:
    path: /docs/{docId}/attachments
    method: GET
    data_selector: resourceTypes
- name: upload_attachments
  endpoint:
    path: /docs/{docId}/attachments
    method: POST
    data_selector: resourceTypes
- name: get_attachment_metadata
  endpoint:
    path: /docs/{docId}/attachments/{attachmentId}
    method: GET
- name: download_attachment
  endpoint:
    path: /docs/{docId}/attachments/{attachmentId}/download
    method: GET
- name: download_all_attachments
  endpoint:
    path: /docs/{docId}/attachments/archive
    method: GET
- name: upload_missing_attachments
  endpoint:
    path: /docs/{docId}/attachments/archive
    method: POST
- name: get_external_store
  endpoint:
    path: /docs/{docId}/attachments/store
    method: GET
- name: set_external_store
  endpoint:
    path: /docs/{docId}/attachments/store
    method: POST
- name: list_external_attachment_stores
  endpoint:
    path: /docs/{docId}/attachments/stores
    method: GET
- name: start_transferring_attachments
  endpoint:
    path: /api/docs/{docId}/attachments/transferAll
    method: POST
- name: get_attachment_transfer_status
  endpoint:
    path: /api/docs/{docId}/attachments/transferStatus
    method: GET
- name: delete_unused_attachments
  endpoint:
    path: /api/docs/{docId}/attachments/removeUnused
    method: POST
- name: get_webhooks
  endpoint:
    path: /docs/{docId}/webhooks
    method: GET
- name: create_webhook
  endpoint:
    path: /docs/{docId}/webhooks
    method: POST
- name: modify_webhook
  endpoint:
    path: /docs/{docId}/webhooks/{webhookId}
    method: PATCH
- name: retrieve_list_of_users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: records
    params: {}
- name: create_user
  endpoint:
    path: /scim/v2/Users
    method: POST
    data_selector: records
    params: {}
- name: retrieve_user_by_id
  endpoint:
    path: /scim/v2/Users/{userId}
    method: GET
    data_selector: records
    params: {}
- name: update_user_by_id
  endpoint:
    path: /scim/v2/Users/{userId}
    method: PUT
    data_selector: records
    params: {}
- name: delete_user_by_id
  endpoint:
    path: /scim/v2/Users/{userId}
    method: DELETE
    data_selector: records
    params: {}
- name: Users
  endpoint:
    path: /scim/v2/Users
    method: POST
    data_selector: Operations
- name: Me
  endpoint:
    path: /scim/v2/Me
    method: GET
    data_selector: meta
- name: Bulk
  endpoint:
    path: /scim/v2/Bulk
    method: POST
    data_selector: Operations
- name: Schemas
  endpoint:
    path: /scim/v2/Schemas
    method: GET
    data_selector: schemas
- name: ServiceProviderConfig
  endpoint:
    path: /scim/v2/ServiceProviderConfig
    method: GET
    data_selector: config
- name: ResourceTypes
  endpoint:
    path: /scim/v2/ResourceTypes
    method: GET
    data_selector: resourceTypes
- name: Contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: Interactions
  endpoint:
    path: /interactions
    method: GET
    data_selector: records
- name: crunchbase_companies_ny
  endpoint:
    path: /unlocalized-assets/investment-research/crunchbase-companies-ny.csv
    method: GET
    data_selector: records
    params: {}
- name: crunchbase_investments_ny
  endpoint:
    path: /unlocalized-assets/investment-research/crunchbase-investments-ny.csv
    method: GET
    data_selector: records
    params: {}
- name: Classes
  endpoint:
    path: /classes
    method: GET
    data_selector: records
    params: {}
- name: Staff
  endpoint:
    path: /staff
    method: GET
    data_selector: records
    params: {}
- name: Students
  endpoint:
    path: /students
    method: GET
    data_selector: records
    params: {}
- name: document
  endpoint:
    path: /documents
    method: POST
    data_selector: document
    params: {}
- name: import
  endpoint:
    path: /imports
    method: POST
    data_selector: import
    params: {}
- name: document_settings
  endpoint:
    path: /api/document_settings
    method: GET
    data_selector: settings
    params: {}
- name: import
  endpoint:
    path: /import
    method: POST
    data_selector: imported_data
    params: {}
- name: Exporting a table
  endpoint:
    path: /exports/table
    method: GET
    data_selector: data
    params: {}
- name: Exporting attachments
  endpoint:
    path: /exports/attachments
    method: GET
    data_selector: data
    params: {}
- name: Exporting a document
  endpoint:
    path: /exports/document
    method: GET
    data_selector: data
    params: {}
- name: Sending to Google Drive
  endpoint:
    path: /exports/google-drive
    method: POST
    data_selector: data
    params: {}
- name: Backing up an entire document
  endpoint:
    path: /backups/document
    method: GET
    data_selector: data
    params: {}
- name: Restoring from backup
  endpoint:
    path: /restores/backup
    method: POST
    data_selector: data
    params: {}
- name: pages
  endpoint:
    path: /pages
    method: GET
    data_selector: records
    params: {}
- name: widgets
  endpoint:
    path: /widgets
    method: GET
    data_selector: records
    params: {}
- name: data_table
  endpoint:
    path: /raw_data
    method: GET
    data_selector: tables
    params: {}
- name: calendar_events
  endpoint:
    path: /calendar/events
    method: GET
    data_selector: events
    params: {}
- name: Custom Widget
  endpoint:
    path: /widget/custom
    method: GET
    data_selector: records
    params: {}
- name: custom_widget
  endpoint:
    path: /widget
    method: GET
    data_selector: records
    params: {}
- name: notebook
  endpoint:
    path: /jupyterlite/notebook
    method: GET
    data_selector: data
    params: {}
- name: map
  endpoint:
    path: /custom/map
    method: GET
    data_selector: data
    params: {}
- name: markdown
  endpoint:
    path: /custom/markdown
    method: GET
    data_selector: data
    params: {}
- name: notepad
  endpoint:
    path: /custom/notepad
    method: GET
    data_selector: data
    params: {}
- name: print_labels
  endpoint:
    path: /custom/print_labels
    method: GET
    data_selector: data
    params: {}
- name: summary_table
  endpoint:
    path: /summary/tables
    method: GET
    data_selector: records
- name: GristDocTour
  endpoint:
    path: /GristDocTour
    method: GET
    data_selector: records
    params: {}
- name: GristDocTutorial
  endpoint:
    path: /services/data/vXX.X/sobjects/GristDocTutorial
    method: POST
    data_selector: records
    params: {}
- name: All_Registrations
  endpoint:
    path: /All_Registrations
    method: GET
    data_selector: records
    params: {}
- name: Sponsors
  endpoint:
    path: /Sponsors
    method: GET
    data_selector: records
    params: {}
- name: Students
  endpoint:
    path: /Students
    method: GET
    data_selector: records
    params: {}
- name: Enrollments
  endpoint:
    path: /Enrollments
    method: GET
    data_selector: records
    params: {}
- name: Classes
  endpoint:
    path: /Classes
    method: GET
    data_selector: records
    params: {}
- name: Record
  endpoint:
    path: /record
    method: GET
    data_selector: records
    params: {}
- name: RecordSet
  endpoint:
    path: /recordset
    method: GET
    data_selector: records
    params: {}
- name: UserTable
  endpoint:
    path: /usertable
    method: GET
    data_selector: records
    params: {}
- name: Hourly_Rate
  endpoint:
    path: /relevant/Rates
    method: GET
- name: lookupOne
  endpoint:
    path: /UserTable/lookupOne
    method: GET
- name: lookupRecords
  endpoint:
    path: /UserTable/lookupRecords
    method: GET
- name: CONTAINS
  endpoint:
    path: /UserTable/CONTAINS
    method: GET
- name: math_functions
  endpoint:
    path: /functions
    method: GET
    data_selector: functions
    params: {}
- name: schedule
  endpoint:
    path: /SCHEDULE
    method: GET
    data_selector: datetime
    params:
      start: NOW()
      count: 10
- name: hourly_rate
  endpoint:
    path: /hourly_rate
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /services/data/vXX.X/sobjects/Orders
    method: GET
    data_selector: records
    params: {}
- name: team
  endpoint:
    path: /services/data/vXX.X/sobjects/Team
    method: GET
    data_selector: records
    params: {}
- name: Embedding
  endpoint:
    path: /embedding
    method: GET
    data_selector: records
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: documents
  endpoint:
    path: /api/documents
    method: GET
    data_selector: records
    params: {}
- name: oauth2_callback
  endpoint:
    path: /oauth2/callback
    method: GET
    data_selector: records
    params: {}
- name: streaming_destination
  endpoint:
    path: /admin/log_streaming
    method: POST
    data_selector: destination
    params: {}
- name: config.create
  endpoint:
    path: /config/create
    method: POST
    data_selector: config
- name: config.delete
  endpoint:
    path: /config/delete
    method: DELETE
    data_selector: config
- name: config.update
  endpoint:
    path: /config/update
    method: PUT
    data_selector: current.config
- name: document.change_access
  endpoint:
    path: /document/change_access
    method: POST
    data_selector: document
- name: clear_all_webhook_queues
  endpoint:
    path: /document/clear_all_webhook_queues
    method: POST
    data_selector: document
- name: clear_webhook_queue
  endpoint:
    path: /document/clear_webhook_queue
    method: POST
    data_selector: document
- name: create
  endpoint:
    path: /document/create
    method: POST
    data_selector: document
- name: delete
  endpoint:
    path: /document/delete
    method: DELETE
    data_selector: document
- name: deliver_webhook_events
  endpoint:
    path: /document/deliver_webhook_events
    method: POST
    data_selector: document
- name: duplicate
  endpoint:
    path: /document/duplicate
    method: POST
    data_selector: original
- name: fork
  endpoint:
    path: /document/fork
    method: POST
    data_selector: document
- name: move
  endpoint:
    path: /document/move
    method: POST
    data_selector: previous
- name: move_to_trash
  endpoint:
    path: /document/move_to_trash
    method: POST
    data_selector: document
- name: open
  endpoint:
    path: /document/open
    method: GET
    data_selector: document
- name: pin
  endpoint:
    path: /document/pin
    method: POST
    data_selector: document
- name: reload
  endpoint:
    path: /document/reload
    method: POST
    data_selector: document
- name: rename
  endpoint:
    path: /document/rename
    method: POST
    data_selector: previous
- name: replace
  endpoint:
    path: /document/replace
    method: POST
    data_selector: document
- name: restore_from_trash
  endpoint:
    path: /document/restore_from_trash
    method: POST
    data_selector: document
- name: run_sql_query
  endpoint:
    path: /document/run_sql_query
    method: POST
    data_selector: document
- name: send_to_google_drive
  endpoint:
    path: /document/send_to_google_drive
    method: POST
    data_selector: document
- name: truncate_history
  endpoint:
    path: /document/truncate_history
    method: POST
    data_selector: document
- name: unpin
  endpoint:
    path: /document/unpin
    method: POST
    data_selector: document
- name: user.change_name
  endpoint:
    path: /user/change_name
    method: GET
    data_selector: previous, current
    params: {}
- name: user.create_api_key
  endpoint:
    path: /user/create_api_key
    method: GET
    data_selector: user
    params: {}
- name: user.delete
  endpoint:
    path: /user/delete
    method: GET
    data_selector: user
    params: {}
- name: user.delete_api_key
  endpoint:
    path: /user/delete_api_key
    method: GET
    data_selector: user
    params: {}
- name: workspace.change_access
  endpoint:
    path: /workspace/change_access
    method: GET
    data_selector: workspace, access_changes
    params: {}
- name: workspace.create
  endpoint:
    path: /workspace/create
    method: GET
    data_selector: workspace
    params: {}
- name: workspace.delete
  endpoint:
    path: /workspace/delete
    method: GET
    data_selector: workspace
    params: {}
- name: workspace.move_to_trash
  endpoint:
    path: /workspace/move_to_trash
    method: GET
    data_selector: workspace
    params: {}
- name: workspace.rename
  endpoint:
    path: /workspace/rename
    method: GET
    data_selector: previous, current
    params: {}
- name: workspace.restore_from_trash
  endpoint:
    path: /workspace/restore_from_trash
    method: GET
    data_selector: workspace
    params: {}
- name: apiUsage
  endpoint:
    path: /apiUsage
    method: GET
    data_selector: apiUsage
- name: beaconOpen
  endpoint:
    path: /beaconOpen
    method: GET
    data_selector: beaconOpen
- name: beaconArticleViewed
  endpoint:
    path: /beaconArticleViewed
    method: GET
    data_selector: beaconArticleViewed
- name: beaconEmailSent
  endpoint:
    path: /beaconEmailSent
    method: GET
    data_selector: beaconEmailSent
- name: beaconSearch
  endpoint:
    path: /beaconSearch
    method: GET
    data_selector: beaconSearch
- name: documentForked
  endpoint:
    path: /documentForked
    method: GET
    data_selector: documentForked
- name: documentOpened
  endpoint:
    path: /documentOpened
    method: GET
    data_selector: documentOpened
- name: documentUsage
  endpoint:
    path: /documentUsage
    method: GET
    data_selector: documentUsage
- name: processMonitor
  endpoint:
    path: /processMonitor
    method: GET
    data_selector: processMonitor
- name: sending_webhooks
  endpoint:
    path: /sendingWebhooks
    method: POST
    data_selector: numEvents, docIdDigest, siteId, siteType, altSessionId, access,
      userId
    params: {}
- name: signup_verified
  endpoint:
    path: /signupVerified
    method: POST
    data_selector: isAnonymousTemplateSignup, templateId
    params: {}
- name: site_membership
  endpoint:
    path: /siteMembership
    method: GET
    data_selector: siteId, siteType, numOwners, numEditors, numViewers
    params: {}
- name: site_usage
  endpoint:
    path: /siteUsage
    method: GET
    data_selector: siteId, siteType, inGoodStanding, stripePlanId, numDocs, numWorkspaces,
      numMembers, lastActivity
    params: {}
- name: tutorial_progress_changed
  endpoint:
    path: /tutorialProgressChanged
    method: POST
    data_selector: tutorialForkIdDigest, tutorialTrunkIdDigest, lastSlideIndex, numSlides,
      percentComplete
    params: {}
- name: tutorial_restarted
  endpoint:
    path: /tutorialRestarted
    method: POST
    data_selector: tutorialForkIdDigest, tutorialTrunkIdDigest, docIdDigest, siteId,
      siteType, altSessionId, access, userId
    params: {}
- name: watched_video_tour
  endpoint:
    path: /watchedVideoTour
    method: POST
    data_selector: watchTimeSeconds, userId, altSessionId
    params: {}
- name: cumulative_functions
  endpoint:
    path: /functions/cumulative
    method: GET
    data_selector: functions
- name: lookup_methods
  endpoint:
    path: /functions/find_methods
    method: GET
    data_selector: methods
- name: custom_sql_selector_widget
  endpoint:
    path: /api/custom_sql_selector
    method: GET
    data_selector: data
    params: {}
- name: csv_viewer_downloads
  endpoint:
    path: /api/csv_viewer_downloads
    method: GET
    data_selector: downloads
    params: {}
- name: sql_endpoint
  endpoint:
    path: /api/sql
    method: POST
    data_selector: results
- name: Grist CSV Viewer
  endpoint:
    path: /grist-csv-viewer
    method: GET
    data_selector: records
- name: AI Assistant
  endpoint:
    path: /ai-assistant
    method: GET
    data_selector: records
- name: attachments
  endpoint:
    path: /attachments
    method: GET
    data_selector: metadata
- name: U.S. National Parks Database
  endpoint:
    path: /templates/4TRbjZXSPtR5/US-National-Park-Database
    method: GET
    data_selector: records
    params: {}
- name: Simple Time Tracker
  endpoint:
    path: /templates/np7TVHmuvFcH/Simple-Time-Tracker
    method: GET
    data_selector: records
    params: {}
- name: Covey Time Management Matrix
  endpoint:
    path: /templates/3y8XiowkYKFA/Covey-Time-Management-Matrix
    method: GET
    data_selector: records
    params: {}
- name: Event Sponsors + Attendees
  endpoint:
    path: /o6xzja7Pueei/Event-Sponsors-Attendees/
    method: GET
    data_selector: records
- name: Public Giveaway
  endpoint:
    path: /vP7WpQp89hLi/Public-Giveaway/
    method: GET
    data_selector: records
- name: Project Management
  endpoint:
    path: /hifkng53AxyQ/Project-Management
    method: GET
    data_selector: records
- name: Rental Management
  endpoint:
    path: /templates/5iMYwmESm33J/Rental-Management
    method: GET
- name: Corporate Funding
  endpoint:
    path: /templates/qprycQa2TVwa/Corporate-Funding
    method: GET
- name: General Ledger
  endpoint:
    path: /templates/2YwYBWpREY2a/General-Ledger
    method: GET
- name: Sports League Standings
  endpoint:
    path: /templates/1xJAp2uxM7tF/Sports-League-Standings
    method: GET
- name: D&D Combat Tracker
  endpoint:
    path: /templates/3r2i6U4zhQLb/DD-Encounter-Tracker
    method: GET
- name: Grant Application and Funding Tracker
  endpoint:
    path: /templates/getgrist.com/sC5CAW41bVZU/Grant-Application-Tracker
    method: GET
- name: book
  endpoint:
    path: /api/book
    method: GET
    data_selector: records
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
- name: Businesses
  endpoint:
    path: /businesses
    method: GET
    data_selector: records
- name: Invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
- name: Items
  endpoint:
    path: /items
    method: GET
    data_selector: records
- name: Payroll
  endpoint:
    path: /templates/getgrist.com/5pHLanQNThxk/Payroll
    method: GET
    data_selector: records
- name: mailing_labels_template
  endpoint:
    path: /9nNr9uQwoXWA/Print-Mailing-Labels
    method: GET
- name: map
  endpoint:
    path: /widget/map
    method: GET
- name: People
  endpoint:
    path: /people
    method: GET
    data_selector: records
- name: Check-Ins
  endpoint:
    path: /check-ins
    method: GET
    data_selector: records
- name: Tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: records
- name: Backlog
  endpoint:
    path: /backlog
    method: GET
    data_selector: records
- name: Applications Dashboard
  endpoint:
    path: /applications/dashboard
    method: GET
    data_selector: applications
- name: Tasks by Staff
  endpoint:
    path: /tasks/by_staff
    method: GET
    data_selector: tasks
- name: Our Programs
  endpoint:
    path: /our/programs
    method: GET
    data_selector: programs
- name: Our Funding Overview
  endpoint:
    path: /our/funding/overview
    method: GET
    data_selector: funding
- name: Foundations We Work With
  endpoint:
    path: /foundations/we_work_with
    method: GET
    data_selector: foundations
- name: Projects
  endpoint:
    path: /projects
    method: GET
    data_selector: data
    params: {}
- name: Customers
  endpoint:
    path: /customers
    method: GET
    data_selector: data
    params: {}
- name: Templates
  endpoint:
    path: /templates
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- Grist supports imports of Excel, CSV, JSON, tab-separated files and from Google
  Drive.
- Documents can be collected in folders called 'workspaces' which can be shared as
  a single unit with other users.
- Workspace owners can control who has access to a workspace using 'Manage Users.'
- Certain column types allow for filtering within a range of values.
- When filtering a numeric or integer type column, you have the option to filter within
  a range of numbers.
- When filtering a date or datetime type column, you have the option to filter within
  a specified date range.
- You can also filter date and datetime type columns by a relative range, which is
  a range relative to today’s date.
- If you use the calendar to select a range of dates, you can also convert each absolute
  date into a relative date by selecting from the list of relative dates available.
- Custom widgets require knowledge of web development and access to a public web server.
- Grist allows users to create custom widgets that can be configured to display data
  from tables.
- Document tours are a beta feature in Grist that provide a step-by-step guide to
  help users navigate and understand how to use your document.
- UUID() produces a different value each time it’s called, it is best to use it in
  trigger formula for new records.
- A regular formula may get recalculated any time the document is reloaded, producing
  a different value for UUID() each time.
- This function is not currently implemented in Grist.
- Confirm all columns used in the formula are of Numeric type.
- You can set default values for when a new record is created and save yourself the
  trouble of having to fill in the same fields with the same values time after time.
- No data is shared with OpenAI unless a user submits a question to the assistant.
- None of the roles listed above provide access to billing information or management.
- Access rules can limit data visibility based on user roles.
- Link keys can provide access to specific document slices.
- To enable API access for yourself, visit your Profile Settings.
- API key is owned by a single user, and has the same permissions as that user.
- Grist can be connected to thousands of other services via integrators with Grist
  support.
- Zapier supports several form providers, and the overall process for integration
  is similar for them all.
- Not all fields are required.
- The environment variable GRIST_SESSION_SECRET should be set to something secret
  for the container.
- If GRIST_DEFAULT_EMAIL is not set, it defaults to you@example.com.
- The main image name is gristlabs/grist, which is our combined Core and Enterprise
  docker image.
- A volume (or mount, or directory) needs to be available at location /persist within
  the container.
- Port 8484 on the container needs to be exposed.
- Grist allows for very powerful formulas, using Python.
- Setting the environment variable `GRIST_SANDBOX_FLAVOR` to `gvisor` is recommended
  if your hardware supports it.
- Grist uses a custom authentication system based around AWS Cognito.
- Consider enabling snapshot support if you want Grist to handle document backups.
- It is important to tell Grist where it will be served from, using the APP_HOME_URL
  variable.
- When self-hosting, only external services allowed by the ALLOWED_WEBHOOK_DOMAINS
  environment variable are allowed.
- Grist is known to work with PostgreSQL from versions 10 through 16.
- The main image name is gristlabs/grist
- A volume needs to be available at location /persist within the container
- Grist supports general authentication methods such as SAML and OpenID Connect.
- Sandboxing is achieved using gvisor, which may fail on older Intel processors without
  XSAVE.
- Versions 12 and up have enabled by default a JIT compiler that causes problems with
  Grist.
- Grist can be configured to use Redis as an external state cache.
- It is required for webhook support, and recommended for snapshot support.
- Grist documents are SQLite databases.
- Versions 12 and up, however, have enabled by default a JIT compiler that is known
  to cause problems with Grist.
- As of Grist version 1.5.0, Grist will unconditionally disable JIT compilation when
  connecting to PostgreSQL, removing the need to disable it yourself.
- We will need one or more certificates from the IdP, in PEM format.
- We will need a private and public key pair for Grist to use when communicating with
  the IdP.
- SP is “Service Provider”, in our case, the Grist application.
- IdP is the “Identity Provider”, somewhere users log into, e.g. Keycloak, Authelia,
  …
- OIDC is the acronym for OpenID Connect
- The SCIM endpoint is experimental and in active development.
- Group management is not supported yet.
- The redirection logic for authentication using forwarded headers currently assumes
  a single team site configuration, and may misbehave for multi-site configurations.
- It is advisable to have Redis enabled when using cloud storage, since this is the
  best-tested configuration.
- Enabling snapshotting results in a big change in how documents are stored, and is
  best done prior to creating documents.
- Setting up GristConnect requires some settings for Grist, and a plugin or custom
  coding for your site or SSO.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- The Grist EC2 instance should have the 'Persistent store' option checked.
- By default, Grist Builder Edition stores cryptographic authentication configuration
  and all data under '/home/grist/persist'. Deleting this folder will result in a
  loss of all data from all documents.
- Audit logs can help maintain compliance and identify misuse of organization resources.
- You must be an installation administrator to view or modify streaming destinations.
- Limited telemetry - appropriate for self-hosting instances of Grist.
- Data is transmitted to Grist Labs.
- Email notifications are limited to Grist Enterprise for self-hosters.
- Grist now automatically checks for upgrades by default on the gristlabs/grist and
  gristlabs/grist-ee Docker images.
- Python 2 support is gone for good.
- New Grist Assistant is available on getgrist.com and for self-hosters on the Enterprise
  plan, with the legacy Formula Assistant remaining for all other users.
- New suite of user management features have been added to Grist Enterprise.
- Grist is now available on the AWS Marketplace, giving you a simple way of self-hosting
  Grist (with authentication) in your own cloud.
- Two-way references are a powerful tool for data relations.
- Grist Desktop behaves more like a desktop app in the latest release.
- Webhooks are powerful.
- Creating proper documentation for webhooks took over a year.
- The app’s authentication method is now included in the “Security Settings” section.
- Grist is hiring!
- Grist now natively supports authentication with OpenID Connect.
- A security fix related to the suggested configuration of `grist-core` with traefik
  has been released.
- Webhooks are in beta — unofficial API support for webhooks has been available for
  some time.
- Grist often surprises people with its capabilities.
- Grist achieved Product of the Day on Product Hunt!
- You may now import data to Grist with Pabbly!
- Grist periodically takes snapshots of your documents.
- To backup historical snapshots, click on Document History then Snapshots.
- Visit our Help Center for more information.
- Watch video tutorials for assistance.
- Freezing unique identifiers requires converting the column to the data column.
- Creating links in cells requires setting the column type to Text.
- Grist mobile support has come a long way recently, and we are happy to say that
  you can now use Grist quite comfortably in mobile browsers such as Chrome, Safari,
  and Firefox.
- Get help building complex data by reaching out to support@getgrist.com
- For bigger projects, or custom integrations, consultants can be recommended.
- Public sharing allows anyone with the link to view or edit the document.
- Grist makes regular automatic backups of your documents as you work on them. It
  now retains them for longer, even on the free plan.
- Deleted documents are moved to Trash. It is now easy to recover them. Documents
  in Trash get deleted permanently after 30 days, or you can delete them permanently
  yourself to purge them from our systems sooner.
- Grist now has a tool to help duplicate documents for safe experimentation.
- Grist automatically saves backups of your documents.
- Custom Widget allows web developers to create their own invoice styles
- Access should be set to read table for Custom Widget
- The invoice widget automatically updates based on referenced material.
- Use the formula Items.lookupRecords(Invoice=$id) for specific invoice items.
- The labels widget remembers the last label size you picked.
- To match the exact sizes of the label paper, double-check that you don’t have any
  settings that would change the scaling.
- Enjoy the hunt, and if you come up with improvements to the spreadsheet please do
  let us know!
- To play with the document, it is best to make a copy and become its owner.
- Remember to hit 'Save' after you change rules, so they take effect.
- Columns can stamp the time when a record was created or updated using the NOW()
  formula.
- User stamps can be created using the user.Name formula.
- Some objects like Contact may return nulls in deeply nested fields
errors:
- '401 Unauthorized: Unauthenticated'
- 500 Internal server error
- 401 Unauthenticated
- '401: Unauthenticated'
- '500: Internal server error'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'TypeError: can’t multiply sequence by non-int of type ‘float’'
- 'TypeError: unsupported operand type(s) for /: ‘float’ and ‘str’'
- 'TypeError: unsupported operand type(s) for +: ‘float’ and ‘str’'
- 'TypeError: unsupported operand type(s) for -: ‘float’ and ‘str’'
- '401 Unauthorized: Check your API key.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://www.getgrist.com
  headers:
    Accept: application/json
source_metadata: null
