resources:
- name: token
  endpoint:
    path: /api/v1/dex/token
    method: POST
    data_selector: access_token
- name: resource
  endpoint:
    path: /resource/mega-seed
    method: DELETE
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: is
  endpoint:
    path: /authz/is
    method: POST
    data_selector: decisions
    params: {}
- name: resource
  endpoint:
    path: /resource/mega-seed
    method: DELETE
    data_selector: ''
    params: {}
- name: is
  endpoint:
    path: /api/v2/authz/is
    method: POST
- name: policy_context_is
  endpoint:
    path: /api/authz/v2/is
    method: POST
    data_selector: decisions
    params: {}
- name: policy_context_decisiontree
  endpoint:
    path: /api/v2/authz/decisiontree
    method: POST
    data_selector: decisions
    params: {}
- name: authz_is
  endpoint:
    path: /authz/is
    method: POST
    data_selector: result
- name: authz_query
  endpoint:
    path: /authz/query
    method: POST
    data_selector: result
- name: authz_decisiontree
  endpoint:
    path: /authz/decisiontree
    method: POST
    data_selector: result
- name: query
  endpoint:
    path: /authz/query
    method: POST
    data_selector: ''
    params: {}
- name: is
  endpoint:
    path: /api/v2/authz/is
    method: POST
    data_selector: decisions
    params: {}
- name: is
  endpoint:
    path: /api/v2/authz/is
    method: POST
- name: decisiontree
  endpoint:
    path: /api/v2/authz/decisiontree
    method: POST
    data_selector: GET/api/orders
- name: is
  endpoint:
    path: /api/authz/v2/is
    method: POST
    data_selector: decisions
    params: {}
- name: decisiontree
  endpoint:
    path: /api/v2/authz/decisiontree
    method: POST
    data_selector: decisions
    params: {}
- name: policies
  endpoint:
    path: /policies
    method: GET
    data_selector: result
    params:
      field_mask: <field1>,<field2>
- name: policy_by_id
  endpoint:
    path: /policies/{id}
    method: GET
    data_selector: result
    params:
      field_mask: <field1>,<field2>
- name: query
  endpoint:
    path: /authz/query
    method: POST
    data_selector: output
- name: display_state_map
  endpoint:
    path: /api/users
    method: GET
    data_selector: visible, enabled
- name: decisiontree
  endpoint:
    path: /api/v2/authz/decisiontree
    method: POST
    data_selector: value
- name: policies
  endpoint:
    path: /policies
    method: GET
    data_selector: result
    params:
      field_mask: <field1>,<field2>
- name: policy_by_id
  endpoint:
    path: /policies/{id}
    method: GET
    data_selector: result
    params:
      field_mask: <field1>,<field2>
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/dir/users
    method: GET
    data_selector: results
    params:
      incremental: updated_at
- name: user_details
  endpoint:
    path: /api/v1/dir/users/{id}
    method: GET
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: policy_settings
  endpoint:
    path: /policies/settings
    method: GET
- name: users
  endpoint:
    path: /dir/users
    method: GET
    data_selector: results
    params: {}
- name: user_details
  endpoint:
    path: /dir/users/{id}
    method: GET
    data_selector: result
    params: {}
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
    params: {}
- name: instance
  endpoint:
    path: /control-plane/instances
    method: GET
    data_selector: id
- name: discovery_policy_download
  endpoint:
    path: /api/v2/management/control_plane/exec
    method: POST
    data_selector: result
    params: {}
- name: directory_sync
  endpoint:
    path: /api/v2/management/control_plane/exec
    method: POST
    data_selector: result
    params: {}
- name: policy_settings
  endpoint:
    path: /api/policy/settings
    method: GET
- name: instances
  endpoint:
    path: /control-plane/list/instances
    method: GET
    data_selector: id
- name: discovery_policy_download
  endpoint:
    path: /api/v2/management/control_plane/exec
    method: POST
    data_selector: result
- name: directory_sync
  endpoint:
    path: /api/v2/management/control_plane/exec
    method: POST
    data_selector: result
- name: decision_logs
  endpoint:
    path: /api/v1/decision-logs
    method: GET
    data_selector: logs
- name: users
  endpoint:
    path: /api/v1/dir/users/{user_id}
    method: GET
    data_selector: result
- name: decision_logs
  endpoint:
    path: /api/v1/decision_logs
    method: GET
    data_selector: logs
    params: {}
- name: decision_logs
  endpoint:
    path: /decision-logs
    method: GET
    data_selector: results
- name: decision_logs
  endpoint:
    path: /api/decision-logs
    method: GET
    data_selector: records
- name: IDP
  endpoint:
    path: /idp
    method: GET
    data_selector: organizations
    params: {}
- name: SCC
  endpoint:
    path: /scc
    method: GET
    data_selector: repositories
    params: {}
- name: POLICY_REGISTRY
  endpoint:
    path: /policy_registry
    method: GET
    data_selector: registries
    params: {}
notes:
- Topaz provides a self-contained authorization service, and utilizes the Open Policy
  Agent (OPA) authorization engine.
- The Aserto Directory can be deployed as a container in a customer environment.
- Authentication is focused on who you are and requires valid credentials.
- Authorization controls what users can do within the system.
- Aserto includes a purpose-built policy registry for managing your policy images
- Aserto provides an eventing fabric via the Control Plane
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Uses JWT for authorization
- The identity context instructs the Authorizer whether and how to populate the input.user
  object when evaluating the policy.
- The hosted Authorizer requires authorization headers to disambiguate the tenant
  and provide the tenant secret (API key).
- OAuth2 with authorization code flow is used for authentication.
- The decisiontree API allows the caller to get the value of any decisions across
  ALL policy modules, with a user context, but without a resource context.
- Aserto provides built-in functions for policy management.
- The input parameter is a string that encodes a JSON document.
- The query parameter is a rego query evaluated over the policy.
- You can find documentation for our gRPC Directory APIs in our Buf registry.
- Policies are treated just like application code or infrastructure-as-code.
- User context is automatically resolved and injected into input.user.
- 'Two HTTP headers must be included in all requests to the directory API: Authorization
  and Aserto-Tenant-ID.'
- Currently, GitHub is the only supported source for policy repositories.
- The APCR API Key is found in the Connections tab under the 'apcr' connection.
- These APIs have been deprecated and replaced by the Directory v2 graphQL APIs.
- Every organization must have at least one owner.
- API keys can be found under the Aserto Directory connection in the Connections page.
- Some policies may not be added due to existing conditions.
- Policies are comprised of a collection of .rego files and .json files, which provide
  static data that can be part of the policy.
- Aserto uses Aserto for authorization, using a simple role-based access control (RBAC)
  model.
- Topaz makes an outgoing mTLS connection, which enables bidirectional communication
  between Topaz and the Control Plane.
- Requires Instance ID, Tenant ID, and Discovery API key to send commands.
- Aserto authorizers can be deployed right next to your application.
- When adding a policy from an existing repository, you need to enable the "Overwrite
  Aserto push secret" option.
- Remove all the policies associated with the Github account before disconnecting
  it.
- Policy added but shows an error
- This error means that the policy CLI is unable to find the functions that the policy
  depends on.
- It usually occurs when the CLI is run out of a directory like the content directory,
  that does not contain the .manifest.
- This can also occur if the rego code is referring to functions that do not exist
  or have been typed incorrectly.
- Edge Authorizers can be deployed as a local microservice or in Kubernetes as a sidecar.
- A working Elasticsearch environment is required.
- A working understanding of Logstash is necessary.
- Decision logs storage object are CSV files.
- Decision logs can be accessed through the Aserto API and the Aserto CLI.
- Each of Aserto's hosted APIs requires a Tenant ID (expressed as a UUID), and is
  provided as the value of the Aserto-Tenant-ID header.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check your input payload format.'
- '401 Unauthorized: Ensure valid credentials are used.'
- 'Existing policy can''t be added: Check for existing conditions.'
- 'Leaked secret keys: Ensure your keys are not exposed.'
- 'E10000: an unknown error has occurred'
- 'E10001: no tenant id specified'
- 'E10002: invalid tenant id'
- 'E10003: invalid tenant name'
- 'E10004: invalid provider id'
- 'E10005: invalid provider config name'
- 'E10006: runtime has not yet loaded'
- 'E10007: connection verification failed'
- 'E10008: connection problem'
- 'E10009: failed to retrieve github access token'
- 'E10010: there was an error interacting with the source code provider'
- 'E10011: connection not found'
- 'E10012: account not found'
- 'E10013: invalid account id'
- 'E10014: policy not found'
- 'E10015: system connection problem'
- 'E10016: invalid policy id'
- 'E10017: connection secret error'
- 'E10018: invite already exists'
- 'E10019: invite is expired'
- 'E10020: already a tenant member'
- 'E10021: invite meant for another user'
- 'E10022: repo has already been connected to a policy'
- 'E10023: failed to setup repo secret'
- 'E10024: failed to setup user'
- 'E10025: invalid email address'
- 'E10026: invalid auth0 ID'
- 'E10027: invite has already been accepted'
- 'E10028: invite has already been declined'
- 'E10029: invite has been canceled'
- 'E10030: verification failed'
- 'E10031: already has an account'
- 'E10032: not allowed'
- 'E10033: last owner of the tenant'
- 'E10034: timeout after multiple retries'
- 'E10035: ID fields have to be strings'
- 'E10036: invalid ID type'
- 'E10037: entity is not empty'
- 'E10038: authentication failed'
- 'E10039: invalid argument'
- 'E10040: readonly'
- 'E10041: policy name already exists'
- 'E10042: connection name already exists'
- 'E10043: module not found'
- 'E10044: user not found'
- 'E10045: user already exists'
- 'E10046: authorization failed'
- 'E10047: invalid query'
- 'E10048: query failed'
- 'E10010 there was an error interacting with the source code provider: E10022 repo
  has already been connected to a policy'
- E10037 entity is not empty
- 'rego_type_error: undefined function ds.check_relation'
- 'rego_type_error: undefined function ds.check_permission'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://aserto.com
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
