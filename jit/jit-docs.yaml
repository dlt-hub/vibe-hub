resources:
- name: artifacts
  endpoint:
    path: /artifacts/
    method: GET
    data_selector: data
    params:
      limit: 100
- name: artifacts
  endpoint:
    path: /artifacts/
    method: GET
    data_selector: data
    params:
      limit: 100
- name: artifacts
  endpoint:
    path: /artifacts/
    method: GET
    data_selector: data
    params:
      limit: 100
- name: artifacts
  endpoint:
    path: /artifacts/
    method: GET
    data_selector: data
    params: {}
- name: artifact
  endpoint:
    path: /artifacts/{artifact_id}
    method: GET
- name: export_artifact
  endpoint:
    path: /artifacts/{artifact_id}/export
    method: GET
    data_selector: download_url
- name: artifact
  endpoint:
    path: /artifacts/{artifact_id}
    method: GET
- name: export_artifact
  endpoint:
    path: /artifacts/{artifact_id}/export
    method: GET
- name: authenticate_client_credentials
  endpoint:
    path: /authentication/login
    method: POST
- name: SCM Billable Minutes Statistics
  endpoint:
    path: /metrics/billing
    method: GET
    data_selector: results
    params:
      start_date: YYYY-MM-DD
      end_date: YYYY-MM-DD
      by_job_name: 'false'
      by_developer: 'false'
      by_asset: 'false'
      exclude_bots: 'false'
- name: client_credentials
  endpoint:
    path: /authentication/login
    method: POST
    data_selector: accessToken
    params: {}
- name: findings
  endpoint:
    path: /findings/
    method: GET
    data_selector: findings
    params:
      page_limit: 20
- name: SCM Billable Minutes Statistics
  endpoint:
    path: /metrics/billing
    method: GET
    data_selector: results
    params:
      start_date: YYYY-MM-DD
      end_date: YYYY-MM-DD
      by_job_name: 'false'
      by_developer: 'false'
      by_asset: 'false'
      exclude_bots: 'false'
- name: configuration_file
  endpoint:
    path: /plan/configuration-file
    method: GET
- name: findings
  endpoint:
    path: /findings/
    method: GET
    data_selector: findings
    params: {}
- name: Update configuration file
  endpoint:
    path: /plan/configuration-file
    method: PUT
    data_selector: content
    params:
      file_sha: string
      payload:
        folders:
        - exclude:
          - /tests/*
          path: /
- name: configuration_file
  endpoint:
    path: /plan/configuration-file
    method: GET
- name: integration_file
  endpoint:
    path: /plan/integration-file
    method: GET
- name: update_configuration_file
  endpoint:
    path: /plan/configuration-file
    method: PUT
- name: get_configuration_file
  endpoint:
    path: /plans/configuration-file
    method: GET
- name: Update integration file
  endpoint:
    path: /plan/integration-file
    method: PUT
    data_selector: content
- name: Get integration file
  endpoint:
    path: /plans/integration-file
    method: GET
    data_selector: content
- name: integration_file
  endpoint:
    path: /plan/integration-file
    method: GET
- name: plans
  endpoint:
    path: /plan/
    method: GET
    data_selector: array of objects
- name: integration_file
  endpoint:
    path: /plan/integration-file
    method: PUT
    data_selector: content
- name: update_plan
  endpoint:
    path: /plan/{slug}
    method: PATCH
- name: plans
  endpoint:
    path: /plan/
    method: GET
    data_selector: array of objects
    params: {}
- name: plan
  endpoint:
    path: /plan/{slug}
    method: GET
    data_selector: object
- name: update_plan
  endpoint:
    path: /plan/{slug}
    method: PATCH
    data_selector: object
- name: return_a_plan_item
  endpoint:
    path: /plan/{slug}/items/{item_slug}
    method: GET
- name: Return a plan
  endpoint:
    path: /plan/{slug}
    method: GET
- name: Get all plans
  endpoint:
    path: /plans
    method: GET
- name: images
  endpoint:
    path: /plan/images
    method: GET
    data_selector: data
- name: return_a_plan_item
  endpoint:
    path: /plan/{slug}/items/{item_slug}
    method: GET
- name: delete_team
  endpoint:
    path: /teams/{team_id}
    method: DELETE
- name: images
  endpoint:
    path: /plan/images
    method: GET
    data_selector: data
- name: teams
  endpoint:
    path: /teams/{team_id}
    method: PATCH
- name: delete_team
  endpoint:
    path: /teams/{team_id}
    method: DELETE
- name: team
  endpoint:
    path: /teams/{team_id}
    method: GET
- name: all_teams
  endpoint:
    path: /teams
    method: GET
- name: team
  endpoint:
    path: /teams/{team_id}
    method: PATCH
- name: teams
  endpoint:
    path: /teams/
    method: GET
    data_selector: data
    params:
      include_members: 'false'
      include_image: 'false'
      hidden: 'false'
      limit: 100
- name: team
  endpoint:
    path: /teams/{team_id}
    method: GET
- name: teams
  endpoint:
    path: /teams
    method: GET
- name: team
  endpoint:
    path: /teams/
    method: POST
    data_selector: object
- name: teams
  endpoint:
    path: /teams/
    method: GET
    data_selector: data
    params:
      include_members: 'false'
      include_image: 'false'
      hidden: 'false'
      limit: 100
- name: team_members
  endpoint:
    path: /teams/{team_id}/members
    method: GET
    data_selector: data
    params:
      limit: 100
- name: team
  endpoint:
    path: /teams/
    method: POST
    data_selector: object
- name: child_teams
  endpoint:
    path: /teams/{team_id}/children
    method: GET
    data_selector: data
    params:
      limit: 10
- name: team_members
  endpoint:
    path: /teams/{team_id}/members
    method: GET
    data_selector: data
    params:
      limit: '100'
- name: import_teams
  endpoint:
    path: /teams/import
    method: POST
- name: child_teams
  endpoint:
    path: /teams/{team_id}/children
    method: GET
    params:
      limit: 10
- name: preferences
  endpoint:
    path: /tenant/preferences
    method: GET
    params:
      scope: tenant
- name: trigger_plan_item_execution
  endpoint:
    path: /trigger/event
    method: POST
- name: import_teams
  endpoint:
    path: /teams/import
    method: POST
- name: preferences
  endpoint:
    path: /tenant/preferences
    method: GET
    params:
      scope: tenant
- name: trigger_synchronous_execution
  endpoint:
    path: /trigger/sync_event
    method: POST
    data_selector: dispatch_execution_event
    params: {}
- name: Trigger branch scan
  endpoint:
    path: /trigger/manual-branch-scan
    method: POST
    data_selector: object
    params:
      branch: string
- name: trigger_plan_item_execution
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: jit_event_id
- name: dispatch_open_fix_pr
  endpoint:
    path: /findings/{finding_id}/fixes
    method: POST
- name: Trigger synchronous execution
  endpoint:
    path: /trigger/sync_event
    method: POST
- name: policy_rules
  endpoint:
    path: /policies/{policy_slug}/rules
    method: GET
    data_selector: data
    params: {}
- name: Trigger branch scan
  endpoint:
    path: /trigger/manual-branch-scan
    method: POST
    data_selector: object
    params:
      branch: string
- name: delete_policy_rule
  endpoint:
    path: /policies/rules/{rule_id}
    method: DELETE
- name: dispatch_open_fix_pull_request
  endpoint:
    path: /findings/{finding_id}/fixes
    method: POST
- name: policies_templates
  endpoint:
    path: /policies/
    method: GET
- name: return_policy_rules
  endpoint:
    path: /policies/{policy_slug}/rules
    method: GET
    data_selector: data
    params: {}
- name: distinct_entity_types
  endpoint:
    path: /policies/{policy_slug}/entities
    method: GET
    data_selector: distinct_entities
- name: delete_policy_rule
  endpoint:
    path: /policies/rules/{rule_id}
    method: DELETE
- name: Update policy rule
  endpoint:
    path: /policies/rules/{rule_id}
    method: PATCH
- name: policies
  endpoint:
    path: /policies/
    method: GET
- name: policy_rule
  endpoint:
    path: /policies/rules
    method: POST
    data_selector: object
- name: distinct_entity_types
  endpoint:
    path: /policies/{policy_slug}/entities
    method: GET
    data_selector: distinct_entities
- name: workflows
  endpoint:
    path: /workflows/
    method: GET
    data_selector: data
    params:
      limit: 20
- name: update_policy_rule
  endpoint:
    path: /policies/rules/{rule_id}
    method: PATCH
- name: create_workflow
  endpoint:
    path: /workflows/
    method: POST
- name: create_policy_rule
  endpoint:
    path: /policies/rules
    method: POST
- name: Fetch Steps Options
  endpoint:
    path: /workflows/options
    method: GET
    data_selector: object
- name: workflow_runs
  endpoint:
    path: /workflows/{workflow_id}/runs
    method: GET
    params:
      limit: 20
- name: workflows
  endpoint:
    path: /workflows/
    method: GET
    data_selector: data
    params:
      limit: 20
- name: create_workflow
  endpoint:
    path: /workflows/
    method: POST
- name: update_workflow
  endpoint:
    path: /workflows/{workflow_id}
    method: PUT
- name: delete_workflow
  endpoint:
    path: /workflows/{workflow_id}
    method: DELETE
- name: Fetch Steps Options
  endpoint:
    path: /workflows/options
    method: GET
    data_selector: object
- name: artifacts
  endpoint:
    path: /artifacts/
    method: GET
    data_selector: data
    params:
      limit: 100
- name: workflow_runs
  endpoint:
    path: /workflows/{workflow_id}/runs
    method: GET
    data_selector: runs
    params:
      limit: '20'
- name: authenticate_client_credentials
  endpoint:
    path: /authentication/login
    method: POST
- name: workflows
  endpoint:
    path: /workflows/{workflow_id}
    method: PUT
    data_selector: object
    params: {}
- name: SCM Billable Minutes Statistics
  endpoint:
    path: /metrics/billing
    method: GET
    data_selector: results
    params:
      start_date: YYYY-MM-DD
      end_date: YYYY-MM-DD
      by_job_name: 'false'
      by_developer: 'false'
      by_asset: 'false'
      exclude_bots: 'false'
- name: delete_workflow
  endpoint:
    path: /workflows/{workflow_id}
    method: DELETE
- name: findings
  endpoint:
    path: /findings/
    method: GET
    data_selector: findings
    params: {}
- name: artifacts
  endpoint:
    path: /artifacts/
    method: GET
    data_selector: data
    params: {}
- name: configuration_file
  endpoint:
    path: /plan/configuration-file
    method: GET
    data_selector: content
    params: {}
- name: team
  endpoint:
    path: /teams/{team_id}
    method: DELETE
- name: authenticate_client
  endpoint:
    path: /authentication/login
    method: POST
    data_selector: accessToken
    params: {}
- name: preferences
  endpoint:
    path: /tenant/preferences
    method: GET
    data_selector: object
    params:
      scope: tenant
- name: SCM Billable Minutes Statistics
  endpoint:
    path: /metrics/billing
    method: GET
    data_selector: results
    params: {}
- name: trigger_plan_item_execution
  endpoint:
    path: /trigger/event
    method: POST
- name: dispatch_open_fix_pr
  endpoint:
    path: /findings/{finding_id}/fixes
    method: POST
- name: findings
  endpoint:
    path: /findings/
    method: GET
    data_selector: findings
    params:
      filters: '{}'
- name: configuration_file
  endpoint:
    path: /plan/configuration-file
    method: GET
- name: return_policy_rules
  endpoint:
    path: /policies/{policy_slug}/rules
    method: GET
    data_selector: data
    params:
      limit: 100
- name: team
  endpoint:
    path: /teams/{team_id}
    method: DELETE
- name: workflows
  endpoint:
    path: /workflows/
    method: GET
    data_selector: data
    params:
      limit: 20
- name: preferences
  endpoint:
    path: /tenant/preferences
    method: GET
    params:
      scope: tenant
- name: trigger_plan_item_execution
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: object
    params: {}
- name: dispatch_finding_fix_pr
  endpoint:
    path: /findings/{finding_id}/fixes
    method: POST
- name: scanners
  endpoint:
    path: /api/scanners
    method: GET
    data_selector: scanners
- name: return_policy_rules
  endpoint:
    path: /policies/{policy_slug}/rules
    method: GET
    data_selector: data
    params:
      limit: 100
- name: workflows
  endpoint:
    path: /workflows/
    method: GET
    data_selector: data
    params:
      limit: 20
- name: webhook
  endpoint:
    path: /gitlab/webhook
    method: POST
- name: workspace
  endpoint:
    path: /workspaces
    method: GET
    data_selector: workspaces
- name: pull_requests
  endpoint:
    path: /pull-requests
    method: GET
    data_selector: pull_requests
- name: webhook
  endpoint:
    path: /gitlab/webhook
    method: POST
    data_selector: data
    params: {}
- name: Jit SAST
  endpoint:
    path: /scan-code-for-vulnerabilities
    method: GET
- name: Jit SCA
  endpoint:
    path: /scan-code-dependencies-for-vulnerabilities
    method: GET
- name: Open Source License Detection
  endpoint:
    path: /scan-for-denied-licenses
    method: GET
- name: Jit Secrets Detection
  endpoint:
    path: /scan-code-for-hard-coded-secrets
    method: GET
- name: Software Bill of Materials (SBOM)
  endpoint:
    path: /sbom
    method: GET
- name: IaC scanning
  endpoint:
    path: /scan-iac-for-static-misconfigurations
    method: GET
- name: Kubernetes Scanning
  endpoint:
    path: /scan-kubernetes-iac-for-misconfigurations
    method: GET
- name: Dockerfile Scanning
  endpoint:
    path: /scan-dockerfiles
    method: GET
- name: Cloud Security Posture Management (CSPM)
  endpoint:
    path: /scan-runtime-infra
    method: GET
- name: Dynamic Application Security Testing (DAST) for web apps
  endpoint:
    path: /scan-your-web-application-for-vulnerabilities-dast-copy
    method: GET
- name: Dynamic Application Security Testing (DAST) for APIs
  endpoint:
    path: /ensure-your-api-is-secure
    method: GET
- name: Jit CI/CD Security
  endpoint:
    path: /github-misconfiguration-detection
    method: GET
- name: Bitbucket Integration
  endpoint:
    path: /integrate/bitbucket
    method: POST
    data_selector: data
- name: AWS Security Hub Findings
  endpoint:
    path: /import-aws-security-hub-findings
    method: POST
- name: Infrastructure Runtime Misconfigurations
  endpoint:
    path: /scan-runtime-infra
    method: GET
- name: Require MFA for AWS
  endpoint:
    path: /require-mfa-for-cloud-providers
    method: GET
- name: account
  endpoint:
    path: /.jit/jit-integration.yml
    method: GET
    data_selector: aws
    params: {}
- name: organization
  endpoint:
    path: /.jit/jit-integration.yml
    method: GET
    data_selector: aws
    params: {}
- name: azure_account
  endpoint:
    path: /azure/integration
    method: POST
    data_selector: azure
    params: {}
- name: Jira
  endpoint:
    path: /integrating-with-jira
    method: GET
- name: Shortcut
  endpoint:
    path: /integrating-with-shortcut
    method: GET
- name: Linear
  endpoint:
    path: /integrating-with-linear
    method: GET
- name: Monday.com
  endpoint:
    path: /integrating-with-monday
    method: GET
- name: AWS Security Hub Findings
  endpoint:
    path: /import-aws-security-hub-findings
    method: POST
- name: Scan IaC for Misconfigurations
  endpoint:
    path: /scan-iac-for-static-misconfigurations
    method: POST
- name: Require MFA for AWS
  endpoint:
    path: /require-mfa-for-cloud-providers
    method: POST
- name: aws_account
  endpoint:
    path: /aws/account
    method: POST
    data_selector: account_id
    params: {}
- name: aws_organization
  endpoint:
    path: /aws/organization
    method: POST
    data_selector: account_id
    params: {}
- name: shortcut_integration_name
  endpoint:
    path: /api/v1/integrations
    method: POST
    data_selector: data
    params: {}
- name: Jira
  endpoint:
    path: /docs/integrating-with-jira
    method: GET
- name: Shortcut
  endpoint:
    path: /docs/integrating-with-shortcut
    method: GET
- name: Linear
  endpoint:
    path: /docs/integrating-with-linear
    method: GET
- name: Monday.com
  endpoint:
    path: /docs/integrating-with-monday
    method: GET
- name: audit_logs
  endpoint:
    path: /services/data/v5.0/audits
    method: POST
    data_selector: logs
- name: workflow_results
  endpoint:
    path: /services/data/v5.0/workflows
    method: POST
    data_selector: results
- name: audit_logs
  endpoint:
    path: /ingestion-api/audit-logs
    method: POST
    data_selector: log_entries
- name: security_findings
  endpoint:
    path: /ingestion-api/security-findings
    method: POST
    data_selector: findings
- name: audit_logs
  endpoint:
    path: /settings/profile
    method: POST
    data_selector: log_entries
    params:
      log_type: JIT
- name: Workspaces
  endpoint:
    path: /workspaces
    method: GET
    data_selector: workspaces
- name: Frameworks
  endpoint:
    path: /frameworks
    method: GET
    data_selector: frameworks
- name: Requirements
  endpoint:
    path: /requirements
    method: GET
    data_selector: requirements
- name: Controls
  endpoint:
    path: /controls
    method: GET
    data_selector: controls
- name: Policies
  endpoint:
    path: /policies
    method: GET
    data_selector: policies
- name: cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: resources
    params: {}
- name: vulnerability_data
  endpoint:
    path: /api/vulnerability
    method: GET
    data_selector: findings
- name: cluster_info
  endpoint:
    path: /api/v1/cluster
    method: GET
    data_selector: clusters
    params: {}
- name: security_scan_results
  endpoint:
    path: /api/v1/security/scans
    method: GET
    data_selector: results
    params: {}
- name: workspaces
  endpoint:
    path: /api/workspaces
    method: GET
    data_selector: workspaces
- name: frameworks
  endpoint:
    path: /api/frameworks
    method: GET
    data_selector: frameworks
- name: requirements
  endpoint:
    path: /api/requirements
    method: GET
    data_selector: requirements
- name: controls
  endpoint:
    path: /api/controls
    method: GET
    data_selector: controls
- name: policies
  endpoint:
    path: /api/policies
    method: GET
    data_selector: policies
- name: jit_k8s_agent
  endpoint:
    path: /jit-k8s-agent
    method: GET
- name: cluster_info
  endpoint:
    path: /k8s/cluster/info
    method: GET
    data_selector: resources
    params: {}
- name: security_scan_results
  endpoint:
    path: /k8s/security/scans
    method: GET
    data_selector: results
    params: {}
- name: bigquery
  endpoint:
    path: /bigquery
    method: GET
    data_selector: checks
    params: {}
- name: cloudsql
  endpoint:
    path: /cloudsql
    method: GET
    data_selector: checks
    params: {}
- name: cloudstorage
  endpoint:
    path: /cloudstorage
    method: GET
    data_selector: checks
    params: {}
- name: compute
  endpoint:
    path: /compute
    method: GET
    data_selector: checks
    params: {}
- name: IAM
  endpoint:
    path: /IAM
    method: GET
    data_selector: checks
    params: {}
- name: KMS
  endpoint:
    path: /KMS
    method: GET
    data_selector: checks
    params: {}
- name: license_compliance
  endpoint:
    path: /scan-for-denied-licenses
    method: GET
    data_selector: licenses
    params: {}
- name: bigquery
  endpoint:
    path: /bigquery
    method: GET
    data_selector: checks
    params: {}
- name: cloudsql
  endpoint:
    path: /cloudsql
    method: GET
    data_selector: checks
    params: {}
- name: cloudstorage
  endpoint:
    path: /cloudstorage
    method: GET
    data_selector: checks
    params: {}
- name: compute
  endpoint:
    path: /compute
    method: GET
    data_selector: checks
    params: {}
- name: IAM
  endpoint:
    path: /IAM
    method: GET
    data_selector: checks
    params: {}
- name: KMS
  endpoint:
    path: /KMS
    method: GET
    data_selector: checks
    params: {}
- name: Dynamic Application Security Testing for web apps
  endpoint:
    path: /run-a-web-application-scanner
    method: GET
- name: Dynamic Application Security Testing for APIs
  endpoint:
    path: /ensure-your-api-is-secure
    method: GET
- name: web_application_scan
  endpoint:
    path: /scan/web-applications
    method: POST
    data_selector: scan_results
- name: API Security
  endpoint:
    path: /docs/ensure-your-api-is-secure
    method: POST
    data_selector: api-security
- name: Web Application Security
  endpoint:
    path: /docs/run-a-web-application-scanner
    method: POST
    data_selector: web-app-scanner
- name: container_scan
  endpoint:
    path: /container/on-build-scanning
    method: POST
    data_selector: scan_results
- name: CI/CD Security Checks
  endpoint:
    path: /docs/github-misconfiguration-detection
    method: GET
    data_selector: findings
    params: {}
- name: MFA Checks
  endpoint:
    path: /require-mfa-for-scm
    method: GET
- name: manual_branch_scan
  endpoint:
    path: /trigger/manual-branch-scan
    method: POST
    data_selector: jit_event_id
- name: web_application_scans
  endpoint:
    path: /scan-your-web-application-for-vulnerabilities
    method: POST
- name: GitHub MFA Check
  endpoint:
    path: /docs/require-mfa-for-scm
    method: GET
- name: GitHub Branch Protection Check
  endpoint:
    path: /docs/require-branch-protection-for-scm
    method: GET
- name: GitHub Security Plan
  endpoint:
    path: /docs/github-security-plan
    method: GET
    data_selector: findings
    params: {}
- name: manual_branch_scan
  endpoint:
    path: /trigger/manual-branch-scan
    method: POST
    data_selector: jit_event_id
- name: teams
  endpoint:
    path: /api/teams
    method: POST
    data_selector: teams
- name: backlog
  endpoint:
    path: /backlog
    method: GET
    data_selector: findings
    params: {}
- name: api_tokens
  endpoint:
    path: /api/tokens
    method: POST
    data_selector: token
    params: {}
- name: sso_configuration
  endpoint:
    path: /sso/configuration
    method: POST
    data_selector: sso_settings
- name: pull_requests
  endpoint:
    path: /pull_requests
    method: GET
- name: pull_requests_of_interest
  endpoint:
    path: /pull_requests_of_interest
    method: GET
- name: OWASP Top 10 Plan
  endpoint:
    path: /owasp-top-10-plan
    method: GET
- name: OWASP Top 10 Assessment
  endpoint:
    path: /owasp-top-10/assessment
    method: GET
    data_selector: assessment_results
    params: {}
- name: resource_management
  endpoint:
    path: /api/resource_management
    method: POST
    data_selector: resources
    params: {}
- name: teams
  endpoint:
    path: /api/teams
    method: GET
    data_selector: teams
- name: Jit MVS for AppSec Plan
  endpoint:
    path: /docs/jit-mvs-for-appsec-plan
    method: GET
- name: AWS Foundational Technical Review (FTR)
  endpoint:
    path: /docs/aws-foundational-technical-review-ftr
    method: GET
- name: GitHub Security Plan
  endpoint:
    path: /docs/github-security-plan
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: audit_logs
  endpoint:
    path: /api/v1/audit-logs
    method: GET
    data_selector: logs
- name: api_tokens
  endpoint:
    path: /api/v1/api-tokens
    method: GET
    data_selector: tokens
- name: audit_logs
  endpoint:
    path: /audits
    method: GET
    data_selector: logs
- name: Branch Protection
  endpoint:
    path: /services/data/vXX.X/sobjects/BranchProtection
    method: GET
    data_selector: records
    params: {}
- name: Access Management
  endpoint:
    path: /services/data/vXX.X/sobjects/AccessManagement
    method: GET
    data_selector: records
    params: {}
- name: External Exposure
  endpoint:
    path: /services/data/vXX.X/sobjects/ExternalExposure
    method: GET
    data_selector: records
    params: {}
- name: SSO Setup
  endpoint:
    path: /sso/setup
    method: POST
    data_selector: setup
    params: {}
- name: owasp_top_10_assessment
  endpoint:
    path: /owasp/top10/assessment
    method: GET
    data_selector: assessment_items
    params: {}
- name: Update configuration file
  endpoint:
    path: /reference/tenant-7ddaef1e-4ba5-4c0d-964b-d62a699c9e2f
    method: POST
    data_selector: response
    params: {}
- name: Sync teams
  endpoint:
    path: /docs/jit-teams-sync
    method: GET
    data_selector: scripts
- name: Jit on GitHub Self-hosted-runners
  endpoint:
    path: /docs/jit-on-github-self-hosted-runners
    method: GET
    data_selector: scripts
- name: Jit MVS for AppSec Plan
  endpoint:
    path: /docs/jit-mvs-for-appsec-plan
    method: GET
- name: AWS Foundational Technical Review (FTR)
  endpoint:
    path: /docs/aws-foundational-technical-review-ftr
    method: GET
- name: GitHub Security Plan
  endpoint:
    path: /docs/github-security-plan
    method: GET
- name: teams
  endpoint:
    path: /api/teams
    method: POST
- name: AWS FTR Checklist
  endpoint:
    path: /aws/ftr/checklist
    method: GET
    data_selector: checklist_items
- name: personal_access_token
  endpoint:
    path: /settings/tokens/new
    method: POST
    data_selector: token
    params:
      scopes:
      - repo
      - read:repo_hook
      - read:enterprise
      - read:packages
      - read:org
- name: jit-config
  endpoint:
    path: /api/update-configuration-file
    method: POST
    data_selector: folders
    params: {}
- name: Update configuration file
  endpoint:
    path: /reference/tenant-7ddaef1e-4ba5-4c0d-964b-d62a699c9e2f
    method: POST
    data_selector: response
    params: {}
- name: sync_teams
  endpoint:
    path: /sync-teams
    method: POST
- name: api_tokens
  endpoint:
    path: /users/permissions/api_tokens
    method: GET
    data_selector: tokens
- name: GitHub Actions Minutes
  endpoint:
    path: /add-minutes-to-github-actions
    method: GET
- name: api_tokens
  endpoint:
    path: /api/tokens
    method: GET
- name: audit_logs
  endpoint:
    path: /api/audit_logs
    method: GET
notes:
- Authenticated Mode provides deeper insight into the security of your web application.
- Some artifacts can only be downloaded by Premium users. To download, upgrade to
  the Premium users pricing plan.
- The provided token remains valid for 24 hours. After this period, reauthenticate
  it via this endpoint.
- 'Requires the following permission: jit.workflows.read'
- This feature is exclusive to premium users.
- Some artifacts can only be downloaded by Premium users.
- Data availability starts from August 18, 2024, and is available up to 1 year in
  the past.
- This endpoint only supports triggering executions for plan items.
- Jit NEVER clones or pulls your code to the cloud. All scanners run on GitHub Actions/GitLab
  Pipelines (including the self-hosted versions if needed).
- Jit app requires installation on GitHub to access repositories.
- Self-hosted runners are also very useful for running Scanning Your Web Application
  for Vulnerabilities (DAST) on a protected app without a public IP or with WAF.
- Integration is supported only for paid plans.
- Application doesn't require permission from the group owner, but you'll need them
  to complete certain configuration tasks.
- Jit creates a project (repository) to store environmental configurations and run
  CI/CD pipelines. This project requires the 'Minimum role to use pipeline variables'
  setting in CI/CD settings to be set to 'Maintainer'.
- Welcome to Jit Docs! Here, you can learn how to onboard and use Jit's Product Security
  Platform to secure your applications in the cloud.
- Jit is designed to simplify and enhance application security by integrating seamlessly
  with development workflows.
- Jit integrates with tools like GitHub, GitLab, and CI/CD pipelines.
- Runners rely on Docker to execute jobs.
- 'Token has no permissions: Ensure the token was created with Maintainer role permissions.'
- 'Token has no permission to the chosen group: Verify that the token was created
  for the chosen group with the correct access level.'
- Selecting 'All repositories' will automatically scan future repositories as they’re
  created.
- Enable Pull Request checks (optional) to scan your Bitbucket Pull Requests for security
  issues.
- Self-hosted runners are useful for running Scanning Your Web Application for Vulnerabilities
  (DAST) on a protected app without a public IP or with WAF.
- Although the application doesn't require permission from the group owner, you'll
  need them to complete certain configuration tasks.
- Jit creates a project (repository) to store environmental configurations and run
  CI/CD pipelines.
- This project requires the 'Minimum role to use pipeline variables' setting in CI/CD
  settings to be set to 'Maintainer'.
- 'Runner Environment: Use a compatible amd64 architecture (x86) machine.'
- 'Ensure the following tools are installed: git, jq, nodejs, npm.'
- The account must have administrator access to the teams and channels you want Jit
  to interact with.
- 'Token Has No Permissions: Ensure the token was created with Maintainer role permissions.'
- 'Token Has No Permission to the Chosen Group: Verify that the token was created
  for the chosen group with the correct access level.'
- 'No Ability to Create a New Project in the Chosen Group: Ensure that Maintainers
  is set as an allowed role.'
- 'Wrong Secret: Copy the selected secret and paste it into the webhook_secret_token
  key.'
- 'Missing Event Types Selection: Ensure you have selected all required event types,
  including: Push, Project, Merge Request (MR).'
- 'Incorrect Tenant or Installation ID: Contact Jit support to obtain the correct
  Tenant ID.'
- 'Deleted Secret in Jit Platform: Add a new webhook_secret_token key and paste the
  correct secret.'
- 'No Runners Configured for Jit Project: Ensure there are instance runners and enable
  the Instance Runners for This Project toggle if using GitLab SaaS.'
- 'IP Whitelisting/Blacklisting: Reach out to Jit Support for further assistance.'
- 'Expired Token: Update the gitlab_jit_secret_token key with a valid token.'
- 'Deleted Token from Jit Secrets: Add a new gitlab_jit_secret_token key and paste
  the valid token.'
- Enable Pull Request checks for security scanning.
- Manage scanned repositories via Settings → Manage Resources.
- Activation will scan your repos/projects and record security findings in the Backlog
  page, while implementing continuous scanning for every code change in GitHub, GitLab,
  or your IDE.
- Supports adding regions in addition to those specified in the initial integration.
- To integrate with GCP, you'll need a GCP project with billing enabled.
- Ensure the Google Cloud Resource Manager API is enabled on the account.
- Jit will detect public channels automatically. In order for Jit to post on private
  channels, you first need to add Jit app to that specific channel.
- Integration with multiple concurrent subscriptions is not supported.
- Jit currently supports integration with one Azure subscription per tenant.
- Only one type of TMS can be integrated into Jit.
- Jit creates a new CloudFormation stack in your AWS account/organization.
- New accounts created within an organization that is integrated with Jit are automatically
  monitored.
- Jira tickets will always be created with the `Opened-by-Jit` label.
- Values must match their field types.
- The selected team must match in both sections.
- If not all fields appear, refresh the browser and reopen the integration.
- Jit recommends activating the Scan IaC for Misconfigurations security requirement
  for complete infrastructure protection.
- Jit will only scan GCP projects where the service account or federated identity
  has been granted access.
- An extra column named 'External ID-GUID' will be added to the item with the value
  'Opened-by-jit'.
- Subitems are not supported. If selected on the configuration screen, the create
  items action will fail with an 'InvalidBoardIdException'.
- A label `Opened-by-jit` will be added to every created item to help Jit track tickets
  in your board.
- Custom labels are not supported and will be overridden if set. Jira tickets will
  always be created with the `Opened-by-Jit` label.
- AWS Security Hub is a Cloud Security Posture Management (CSPM) service that performs
  security best practice checks, aggregates alerts, and enables automated remediation.
- Jit imports the results from AWS Security Hub into the platform, enabling you to
  monitor and respond to threats in a proactive manner across multiple AWS accounts.
- Matching repositories between Jit and Wiz are required only for the push functionality.
- Integration allows assigning security-related stories from Jit to Engineering and
  Security teams.
- This code overrides the original Jit configuration by disabling Jit's SAST tools
  and enabling Semgrep's Pro Tier.
- You can add or delete this code any time you want to switch between Semgrep's Pro
  Tier and Jit's SAST.
- An extra column named "External ID-GUID" will be added to the item with the value
  "Opened-by-jit".
- Subitems are not supported. If selected, the create items action will fail with
  an `InvalidBoardIdException`.
- Requires Personal Access Token (PAT) for your GitHub account.
- Create an API token in your Drata account to integrate.
- Ensure to store keys and tokens securely.
- Application and cloud security tools available.
- Compliance tools available.
- Security Incident and Event Management (SIEM) tools available.
- Ensure that `Security Hub` is enabled on your AWS account.
- Make sure you exclude accounts without `Security Hub`.
- Ensure HTTP Event Collector token is valid for event ingestion.
- Ensure that the Splunk HEC endpoint is accessible from Jit.
- If the token is invalid or the endpoint is inaccessible, You will have to re-integrate.
- To enable audit log ingestion, toggle the option on in the configuration screen.
- Personal Access Token (PAT) for your GitHub account is required.
- 'Permissions: admin:org, read:enterprise, admin:org_hook, read:org, repo, read:repo_hook'
- Jit sends JIT as the log type and uses the unstructured ingestion API.
- Expiration Date is recommended to be long to prevent unexpected integration stops.
- Ensure the correct scopes are enabled for the API key.
- 'Choose a role that has the following permissions: cyera.read.issue, cyera.manage.global-scope'
- Make sure `Enable indexer acknowledgement` is **Unchecked**
- This code overrides the original Jit configuration by disabling Jit's SAST tools
  and enabling Checkmarx's.
- You can add or delete this code any time you want to switch between Checkmarx and
  Jit's SAST.
- An active Orca Security account is required
- The API key must have Read access to the /query/ API
- Verify your API key has the correct permissions in Bright Security
- Check your network configuration to ensure Jit can reach the Bright Security API
  endpoints
- Confirm that DAST scans are configured and running in your Bright account
- An active Invicti Security account is required
- The necessary permissions to create API keys in Invicti are required
- 'Choose a role that has the following permissions: `cyera.read.issue`, `cyera.manage.global-scope`.'
- 'API regions: `api` for US, `api-eu` for EU, `api-ca` for Canada, `api-ap` for Asia
  Pacific.'
- Integrating StackHawk with Jit enhances your API security testing capabilities by
  importing findings directly into Jit's context graph.
- This integration allows you to consolidate API security vulnerabilities alongside
  other security findings for comprehensive risk management.
- Region should be prefixed with api
- Requires an active Orca Security account
- API Key must have Read access to the /query/ API
- An active Invicti Security account is required.
- The necessary permissions to create API keys in Invicti are required.
- 'The following scopes must be enabled: Controls: Control List - R, Workspaces: List
  workspaces - R, Frameworks: List frameworks - R, Requirements: List requirements
  - R, Policies: List policies - R, Download policies - R, View policy content - R.'
- An active StackHawk account is required
- The necessary permissions to create API keys in StackHawk are needed
- Integrating your private npm registry into Jit enhances your organization's security
  by enabling Jit to scan for dependencies vulnerabilities (SCA) in both your public
  and private npm packages.
- A private npm registry helps safeguard internal libraries by preventing public exposure.
- The region should be prefixed with api
- The agent runs as a scheduled job in your cluster to keep your security posture
  up-to-date in Jit
- Ensure that an active Upwind account with administrative privileges is available.
- The necessary permissions to create API credentials in Upwind are required.
- The agent runs as a scheduled job in your cluster to keep your security posture
  up-to-date.
- Jit's Application Security Scanners continuously scan your codebase and every code
  change to surface code and dependency vulnerabilities like code injections, path
  traversals, and many more.
- The name must be NPM_REGISTRY_TOKEN for the secret.
- This feature is currently only available for Semgrep.
- Ensure that the provided configuration file is correctly formatted to avoid execution
  errors.
- The agent runs as a scheduled job in your cluster to keep your security posture
  up-to-date in Jit.
- Scanning takes place periodically across your entire codebase (or selected repositories),
  and during every code change introduced by your developers.
- Jit SCA is automatically activated when you onboard Jit, which scans your selected
  repos/projects and records security findings.
- Secrets Detection is automatically activated when you onboard Jit.
- Software Bill of Materials (SBOM) is only available for paying Jit customers.
- Open Source License Detection is only available for paying Jit customers.
- Jit Kubernetes Security Scanning analyzes Helm charts and manifest files for security
  misconfigurations.
- Jit SCA scans your open source code and dependencies for known vulnerabilities.
- Jit Secrets Detection is automatically activated when you onboard Jit, which scans
  your selected repos/projects and records security findings in the Backlog page.
- Jit CSPM automatically scans your cloud environment every day.
- Continuously scan your AWS environment to ensure all users have MFA enabled.
- Multi-factor authentication adds an extra layer of security to your organization.
- Jit uses KICS by default as the Infrastructure as Code (IaC) scanning tool to detect
  misconfigurations and security issues.
- Jit leverages Trivy — automatically deploying and running the scanner so you don't
  have to manage it yourself.
- Scanning takes place periodically across your entire codebase or selected repositories.
- Jit CSPM automatically scans your cloud environment every day
- 'Cloud provider support: Jit CSPM supports AWS, Azure, and GCP environments'
- Ensure that JIT_CLIENT_ID and JIT_SECRET_KEY are correctly set in your environment.
- Multiple web apps can be scanned with a single Jit account – each web application
  will require its own DAST configuration.
- Enabling Authentication requires a free onboarding session.
- Enabling authentication requires some specialized configuration.
- Check the Enable Selectors Configuration for enhanced authentication.
- Based on Trivy — automatically deploying and running the scanner.
- Uses ZAP rules during Dynamic Application Security Testing (DAST)
- Integrates with existing CI/CD workflows
- Security checks run as independent steps
- Adjust the CLI URL to match your runner's OS and CPU architecture according to the
  provided table.
- Ensure your container image build step clearly tags the image (your-image-name).
- When building the image with Podman/Kaniko or other non-'docker' building system,
  you should save the image as 'image.tar' and pass the tar file to the --image option.
- Currently Branch Protection only works with classic branch protection and not rulesets.
- Jit DAST automates the deployment and scanning process for ZAP, the leading open
  source DAST tool.
- Authenticated Mode requires additional configuration and supports multiple authentication
  methods.
- Manual Branch Scan works with all code-related security controls in your security
  plan
- Scans run with the same depth and coverage as default branch scans
- Enabling authentication requires a free onboarding session.
- Enabling authentication requires some specialized configuration, which is why we
  ask that you meet with us for a free onboarding session if you want to enable authentication.
- Jit's configuration files, such as jit-plan.yml, jit-security.yml, and jit-config.yml,
  are located in the .jit directory of the repository you selected for GitHub integration.
- Jit currently supports remediation for security requirements.
- Jit Resources empowers product security leaders to identify, map, classify, and
  prioritize critical resources within complex cloud environments.
- Scanning takes place daily and documents findings in the Backlog page.
- Jit's CI/CD Security Checks are currently supported for GitHub environments.
- Jit automatically scans your GitHub environment every day and documents users missing
  MFA in the Backlog.
- The extension requires Docker to be installed and running on your machine.
- Ensure to generate a GitHub Personal Access Token with read-only access to the organization.
- We recommend using GitHub secrets when using Jit APIs.
- Audit logs are retained for 3 months.
- Logs can be downloaded as a CSV file for offline analysis, archival, or sharing.
- Audit logs are available for administrators and can be accessed via Settings ->
  Users & Permissions -> Audit logs.
- Updated 8 months ago
- The SSO feature is not enabled by default, and you’ll need to contact us to enable
  it.
- Setup requires admin access to your SSO provider account, as well as permissions
  to add the relevant DNS record for your SSO domain name.
- Jit provides automated remediation for some finding types.
- Uses GitHub Personal Access Token for authentication.
- Ensure to create a Jit API key with 'member' role.
- The Jit MVS for AppSec Plan leverages several open-source security tools to achieve
  a baseline security standard for your development environment.
- API tokens can be generated from the Users & Permissions section.
- Recommended to use GitHub secrets for storing API keys.
- Organizations with Single Sign-On (SSO) must authorize the new token
- SSO feature is not enabled by default, contact support to enable it.
- Setup requires admin access to your SSO provider account.
- Deployment scanning currently only supports deployments via GitHub actions.
- Slack integration is required to enable deployment scanning.
- If you are using a monorepo development strategy in GitHub, an additional configuration
  file is required to enable dependency scanning.
- Dynamic Application Security Plan aims to identify and mitigate security vulnerabilities
  in web applications and APIs using ZAP DAST.
- OWASP Top 10 Plan is designed to address the most critical web application security
  risks as identified by the Open Web Application Security Project (OWASP).
- Paths defined in the configuration file are excluded from all repositories in your
  organization.
- The contents of your jit-config.yml file will vary depending on your enabled features
  and integrations.
- Generate a fine-grained PAT with read-only access to the organization.
- Contact Jit for assistance before using this feature.
- 'Check Service Status: Visit Jit.io Status Page to see if there are any ongoing
  incidents.'
- To maintain branch protection while ensuring Jit operates without issues, add `Jit
  CI` to the `Bypass list` in GitHub’s Branch Protection settings.
- GitHub offers free minutes for all GitHub customers, however, these may be used
  up not only by Jit but by other tools and pipelines.
- When these free minutes run out, if there is a plan limit, Jit may stop working.
- During a GitHub outage, security checks are temporarily affected.
- Environment names are global. When you change it in any control configuration, it
  will change on all controls.
- To re-integrate with AWS after integration failure, follow the steps outlined in
  the documentation.
- Retrieving Authentication Information With Browser Developer Tools
- Do not attempt to view the content of a secret by selecting the edit icon, as this
  will delete any content within the secret field.
- To enable monorepo support for GitHub, create a folder titled .jit in the root directory
  of your monorepo.
- Create a file within this folder titled jit-config.yml.
- The code blocks below are for illustrative purposes and are not valid `jit-config.yml`
  files.
- By default, Jit uploads GitHub teams and their ownership on GitHub repositories
  to Jit teams.
- Jit works by creating a centralized configuration repository in your GitHub Organization.
- GitHub Actions are disabled — Jit uses GitHub Actions to run its scans.
- During a GitHub outage, our security checks are temporarily affected, preventing
  the scanning and detection of findings in your CI/CD environment.
- We actively monitor the GitHub outage and resume running our security checks as
  soon as the issue is resolved.
- Jit works by creating a centralized configuration repository in your GitLab Organization.
- GitLab Runners are disabled, must be enabled for Jit to run scans.
- To re-integrate with AWS after integration failure, remove the faulty AWS integration
  from the jit-integration.yml file.
- For organization-based integration, delete relevant stacks in CloudFormation.
- Jit requires you to retrieve HTTP message information for authentication purposes.
errors:
- '400 Bad request: Human readable message containing fields that failed validation.'
- '401 Unauthorized: Human readable error message.'
- '403 Forbidden: Human readable error message.'
- '500 Internal server error: Human readable error message.'
- '400 Bad request: Invalid parameters'
- '401 Unauthorized: Missing or invalid credentials'
- '403 Forbidden: Missing permissions'
- '500 Internal server error: Unexpected server error'
- '400 Bad request: Human readable message containing fields that failed validation'
- '400 Bad request: Check input parameters for validity'
- '401 Unauthorized: Recheck permissions and authentication'
- '403 Forbidden: Missing required permissions'
- '500 Internal server error: Try again later'
- 400 Bad request
- 401 Unauthorized
- 403 Forbidden
- 404 Artifact not found
- 500 Internal server error
- 403 The tenant is not authorized to download this artifact
- '400 Bad request: Machine readable error code.'
- '404 Artifact not found: Human readable error description.'
- '401 Unauthorized: Machine readable error code.'
- '500 Internal server error: Machine readable error code.'
- '400 Invalid Query Params: Machine readable error code.'
- '400 Bad request: Machine readable error code and human readable message.'
- '401 Unauthorized: Recheck your credentials.'
- '500 Internal server error: Machine readable error code and human readable message.'
- '400 Invalid request parameters: malformed filters JSON, invalid sort_desc value,
  invalid page_limit (must be between 1 and 100), or invalid next_page_key'
- 403 Insufficient permissions to access findings
- 500 Internal server error occurred while processing the request
- 400 Invalid Query Params
- '403 Forbidden: Machine readable error code.'
- '409 Conflict: Human readable error message.'
- '404 Not found: Machine readable error code.'
- '422 Unprocessable entity: Machine readable error code.'
- '404 Plan not found: Human readable error description.'
- '404 Plan Item not found: Human readable error description.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403 Forbidden: Check missing permissions'
- '500 Internal server error: Check server status'
- '404 Team not found: Human readable error description.'
- '422 Invalid team source: Human readable error description.'
- 404 Team not found
- 409 Team already exists
- 422 Parent team not found
- '422 Unprocessable Entity: Human readable error message.'
- '422 Unprocessable Entity: Machine readable error code.'
- 400 Invalid request, Automatic fix is not available for given finding.
- 404 Finding not found.
- '403 Forbidden: Check for missing permissions'
- '422 Unprocessable Entity: Validate request parameters'
- '400 Bad request: Check input parameters for validation errors.'
- '401 Unauthorized: Check permissions and authentication.'
- '403 Forbidden: Ensure all required permissions are granted.'
- '500 Internal server error: Retry the request later.'
- '404 Policy Rule Not Found: Human readable error message.'
- '400 Bad request: Check the parameters being sent'
- '401 Unauthorized: Recheck permissions'
- 400 Invalid Policy Rule
- 404 Policy Rule Not Found
- '400: Get Workflows Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '500: Internal server error'
- '400 Invalid Policy Rule: Human readable error message.'
- 400 Invalid Workflow
- 409 Workflow Already Exists
- 400 Get Workflows Bad Request
- 404 Workflow Not Found
- '400 Invalid Workflow: Machine readable error code.'
- '404 Workflow Not Found: Machine readable error code.'
- '409 Workflow Already Exists: Machine readable error code.'
- '404 Workflow Not Found: Human readable error description.'
- '400 Bad request: Check invalid parameters'
- '500 Internal server error: Check server logs'
- '400: Bad Request'
- '404: Workflow Not Found'
- '400 Invalid Query Params: Provide valid query parameters.'
- '401 Unauthorized: Recheck permissions and authentication.'
- '403 Forbidden: Check for missing permissions.'
- '500 Internal server error: Try again later.'
- '400 Bad request: Validation error in parameters.'
- '401 Unauthorized: Recheck client credentials.'
- '500 Internal server error: Unexpected server issue.'
- '400 Invalid Query Params: Check your query parameters.'
- '401 Unauthorized: Check permissions and token.'
- '500 Internal server error: An unexpected error occurred.'
- '401 Unauthorized: Check API token and permissions.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Expired Token: Update the gitlab_jit_secret_token key with a valid token.'
- 'AppArmor detection and --privileged mode might break. mount: permission denied
  (are you root?)'
- 'WARNING: The requested image''s platform (linux/amd64) does not match the detected
  host platform (linux/arm64/v8)'
- 'InvalidBoardIdException: Can''t create an item on subitems board. Please use create_subitem
  mutation.'
- Verify your API key has the correct permissions in Invicti Security
- Check your network configuration to ensure Jit can reach the Invicti Security API
  endpoints
- Verify that DAST scans are configured and running in your Invicti account
- 'AUTHENTICATION_ERROR: Verify your Jit credentials are correct and have proper permissions.'
- 'NETWORK_CONNECTIVITY_ERROR: Ensure the cluster can reach api.jit.io and public.ecr.aws.'
- 'Authentication errors: Verify your Jit credentials are correct and have proper
  permissions'
- 'AUTHENTICATION_ERROR: Verify your Jit credentials are correct and have proper permissions'
- 'NETWORK_CONNECTIVITY: Ensure the cluster can reach api.jit.io and public.ecr.aws'
- 'CLI Authentication Failure: Ensure that JIT_CLIENT_ID and JIT_SECRET_KEY are correctly
  set in your environment.'
- 'No Findings Are Reported: Check if the --new-findings-only flag is enabled. If
  set, only new vulnerabilities are surfaced.'
- 'Workflow Fails on Scan Execution: If --fail-on-findings is enabled, ensure that
  no critical vulnerabilities are present, or adjust the severity threshold.'
- 'Access denied: Ensure whitelisted IPs are configured for the API.'
- '401 Unauthorized: Check your API tokens'
- Ensure your web applications are secured with a whitelist for Jit DAST scanners.
- '403 Forbidden: User lacks the necessary permissions to trigger scans'
- '403 Forbidden: Check API key permissions.'
- '404 Not Found: Ensure the resource exists.'
- '401 Unauthorized: Check API token validity'
- '404 Not Found: Endpoint may not exist or is incorrect'
- 'Unauthorized: Ensure the Personal Access Token has the required permissions'
auth_info:
  mentioned_objects:
  - jit.artifacts.read
  - jit.generalMetrics.read
  - API Key
  - Client ID
  - Secret Key
  - JIT_CLIENT_ID
  - JIT_SECRET_KEY
  - GitHub Personal Access Token
  - Jit API key
client:
  base_url: https://api.jit.io
  headers:
    Accept: application/json
  paginator:
    type: cursor
    cursor_param: after
    page_size_param: limit
    default_page_size: 100
source_metadata: null
