resources:
- name: accounts_disable
  endpoint:
    path: /admin/accounts_disable
    method: POST
    data_selector: User data
    params:
      user_id: Mandatory
      reason: Mandatory
- name: accounts_enable
  endpoint:
    path: /admin/accounts_enable
    method: POST
    data_selector: User data
    params:
      user_id: Mandatory
      reason: Mandatory
- name: accounts_unlock
  endpoint:
    path: /admin/accounts_unlock
    method: POST
    data_selector: User data
    params:
      user_id: Mandatory
      reason: Mandatory
- name: accounts_set_password
  endpoint:
    path: /admin/accounts_set_password
    method: POST
    data_selector: User data
    params:
      user_id: Mandatory
      new_password: Mandatory
- name: accounts_generate_login_key
  endpoint:
    path: 0/admin/accounts_generate_login_key/
    method: POST
    data_selector: login key
    params:
      user_id: Mandatory
- name: accounts_find_users
  endpoint:
    path: 1/admin/accounts_find_users/
    method: POST
    data_selector: users
    params: {}
- name: set_effective_userid
  endpoint:
    path: 0/admin/set_effective_userid/
    method: POST
    data_selector: User data
    params:
      user_id: Mandatory
      token: Mandatory
- name: assign_role
  endpoint:
    path: 0/admin/assign_role/
    method: POST
    data_selector: User data
    params:
      user_id: Mandatory
      role: Mandatory
- name: accounts_delete
  endpoint:
    path: 0/admin/accounts_delete/
    method: POST
    data_selector: User data
    params:
      user_id: Mandatory
      need_wipe: Optional
- name: accounts_restore
  endpoint:
    path: 0/admin/accounts_restore/
    method: POST
    data_selector: User data
    params:
      user_id: Mandatory
- name: invite_user
  endpoint:
    path: 0/admin/invite_user/
    method: POST
    data_selector: User data
    params:
      email: Mandatory
      invitation: Optional
- name: company_invite_user
  endpoint:
    path: 1/company/<company_id>/invite_user/
    method: POST
    data_selector: User data
    params:
      email: Mandatory
      invitation: Optional
      lang: Optional
- name: company_status
  endpoint:
    path: 1/company/<company_id>/status/
    method: POST
    data_selector: Company current status
    params:
      company_id: Mandatory
      status: Mandatory
- name: edit_user
  endpoint:
    path: 1/admin/edit_user/
    method: POST
    data_selector: User data
    params:
      user_id: Mandatory
- name: find_companies
  endpoint:
    path: 1/admin/find_companies/
    method: GET
    data_selector: companies
    params: {}
- name: company_delete_card_info
  endpoint:
    path: 1/company/<company_id>/delete_card_info/
    method: POST
    data_selector: None
    params:
      company_id: Mandatory
- name: company_remove
  endpoint:
    path: 1/company/<company_id>/remove/
    method: POST
    data_selector: None
    params:
      company_id: Mandatory
- name: company_set_expired
  endpoint:
    path: 1/company/<company_id>/set_expired
    method: POST
    data_selector: None
    params:
      company_id: Mandatory
- name: blocked_logins
  endpoint:
    path: 1/admin/blocked_logins/
    method: POST
    data_selector: A list for blocked logins
    params: {}
- name: csv_download
  endpoint:
    path: 1/csv_download/
    method: GET
    data_selector: task_id and the destination of the background result
    params: {}
- name: request_quota
  endpoint:
    path: 1/company//request_quota/
    method: POST
    data_selector: OK
    params:
      sender_id: Optional
      receiver_id: Optional
      hash: Mandatory
- name: edit_company_user
  endpoint:
    path: 1/admin/company//edit_user/
    method: POST
    data_selector: OK
    params:
      user_id: Mandatory
      quota_size: Mandatory
- name: approve_company
  endpoint:
    path: 1/admin/company//approve/
    method: GET
    data_selector: OK
    params:
      company_id: Mandatory
      hash: Mandatory
- name: deny_company
  endpoint:
    path: 1/admin/company//deny/
    method: POST
    data_selector: OK
    params:
      company_id: Mandatory
      hash: Mandatory
- name: add_moderator
  endpoint:
    path: 1/moderators/add/
    method: POST
    data_selector: OK
    params:
      email: Mandatory
      name: Optional
- name: get_moderators
  endpoint:
    path: 1/moderators/get/
    method: GET
    data_selector: List of moderators
    params: {}
- name: remove_moderator
  endpoint:
    path: 1/moderators/remove/
    method: POST
    data_selector: OK
    params:
      email: Mandatory
- name: request_token
  endpoint:
    path: 1/request_token/
    method: GET
    data_selector: token
    params: {}
- name: get_data
  endpoint:
    path: 0/analytics/get_data/
    method: GET
    data_selector: Metrics value
    params: {}
- name: get_multiple_data
  endpoint:
    path: 0/analytics/get_multiple_data/
    method: POST
    data_selector: A list of metrics values grouped by a metric name
    params:
      date_from: Mandatory
      date_to: Mandatory
      metrics: Mandatory
- name: get_metrics
  endpoint:
    path: 0/analytics/get_metrics/
    method: GET
    data_selector: Metrics list with parameters
    params: {}
- name: task_result
  endpoint:
    path: 1/task/<taskid>/
    method: GET
    data_selector: Any JSON dictionary
    params:
      taskid: Mandatory
- name: make_complaint
  endpoint:
    path: 0/copyright/make_complaint/
    method: POST
    data_selector: Complaint created in JSON format
    params:
      content_type: Mandatory
      url: Mandatory
      description: Mandatory
      copyright_holder: Mandatory
      name: Mandatory
      sign: Mandatory
      email: Mandatory
- name: get_complaints
  endpoint:
    path: /copyright/get_complaints/
    method: POST
    data_selector: complaints
    params:
      content_type: ''
      copyright_holder: ''
      name: ''
      email: ''
- name: edit_complaint
  endpoint:
    path: /copyright/edit_complaint/
    method: POST
    data_selector: ''
    params:
      complaint_id: ''
      status: ''
- name: events
  endpoint:
    path: /events/
    method: GET
    data_selector: ''
    params:
      skip: ''
      limit: ''
      type: ''
      person: ''
      from_timestamp: ''
      to_timestamp: ''
- name: check_ws
  endpoint:
    path: /check_ws/
    method: GET
    data_selector: ''
    params: {}
- name: create_extra
  endpoint:
    path: /files/create_extra/
    method: POST
    data_selector: ''
    params:
      path: ''
      version: ''
- name: get_preview
  endpoint:
    path: /files/get_preview/
    method: GET
    data_selector: ''
    params:
      path: ''
      version: ''
      page: ''
- name: create_extra_links
  endpoint:
    path: /links/create_extra
    method: POST
    data_selector: ''
    params:
      hash: ''
      path: ''
- name: create_extra_shares
  endpoint:
    path: /shares/create_extra/
    method: POST
    data_selector: ''
    params:
      invite_hash: ''
      path: ''
- name: create_group
  endpoint:
    path: /groups/create/
    method: POST
    data_selector: ''
    params:
      name: ''
- name: delete_group
  endpoint:
    path: /groups/delete/
    method: POST
    data_selector: ''
    params:
      name: ''
- name: list_groups
  endpoint:
    path: /groups/list/
    method: POST
    data_selector: groups
    params:
      limit: ''
      offset: ''
      order_by: ''
- name: fileops_copy
  endpoint:
    path: /fileops/copy/
    method: POST
    params:
      from_path: Mandatory
      to_path: Mandatory
      overwrite: Optional
- name: metadata_path
  endpoint:
    path: /metadata/<path>
    method: GET
    params:
      hash: Not mandatory
      listing: Not mandatory
      dirs_only: Not mandatory
      deleted: Not mandatory
      version: Not mandatory
      extra: Not mandatory
      offset: Not mandatory
      limit: Not mandatory
      order_by: Not mandatory
- name: metadata_full_listing
  endpoint:
    path: /metadata_full_listing/
    method: GET
    params:
      listing_request_id: Optional
- name: files_download_as_archive
  endpoint:
    path: /files/download_as_archive/
    method: GET
    params:
      path: Mandatory
      parent_folder: Not mandatory
- name: files_download_as_archive_stream
  endpoint:
    path: /files/download_as_archive_stream/
    method: GET
    params:
      path: Mandatory
      parent_folder: Not mandatory
- name: files_progress_download_streams
  endpoint:
    path: /files/progress_download_streams/<private_hash>
    method: GET
- name: links_download_as_archive
  endpoint:
    path: /links/download_as_archive/<hash>/
    method: GET
    params:
      hash: Mandatory
      path: Mandatory
      parent_folder: Not mandatory
- name: links_download_as_archive_stream
  endpoint:
    path: /links/download_as_archive_stream/<hash>/
    method: GET
    params:
      hash: Mandatory
      path: Mandatory
      parent_folder: Not mandatory
- name: links_add_to_storage
  endpoint:
    path: /links/add_to_storage/<hash>/
    method: GET
    params:
      hash: Mandatory
      target_path: Not mandatory
- name: create_file
  endpoint:
    path: /files/create/
    method: POST
    data_selector: parameters
    params: {}
- name: create_file_part
  endpoint:
    path: /files/create_part/
    method: POST
    data_selector: parameters
    params: {}
- name: confirm_file
  endpoint:
    path: /files/confirm/<path>
    method: POST
    data_selector: parameters
    params: {}
- name: multi_confirm
  endpoint:
    path: /files/multi_confirm/
    method: POST
    data_selector: parameters
    params: {}
- name: get_file
  endpoint:
    path: /files/get/<path>
    method: GET
    data_selector: parameters
    params: {}
- name: favorites
  endpoint:
    path: /files/favorites/
    method: GET
    data_selector: parameters
    params: {}
- name: set_favorite
  endpoint:
    path: /fileops/set_favorite/
    method: POST
    data_selector: parameters
    params: {}
- name: purge
  endpoint:
    path: /fileops/purge/
    method: POST
    data_selector: parameters
    params: {}
- name: purgestatus
  endpoint:
    path: /fileops/purgestatus/
    method: POST
    data_selector: parameters
    params: {}
- name: file_versions
  endpoint:
    path: /files/versions/<path>
    method: GET
    data_selector: parameters
    params: {}
- name: versions_to_update
  endpoint:
    path: /files/versions_to_update/
    method: GET
    data_selector: parameters
    params: {}
- name: restore_file
  endpoint:
    path: /files/restore/
    method: POST
    data_selector: parameters
    params: {}
- name: delete_file
  endpoint:
    path: /fileops/delete/
    method: POST
    data_selector: parameters
    params: {}
- name: multi_delete
  endpoint:
    path: /fileops/multi/delete/
    method: POST
    data_selector: parameters
    params: {}
- name: undelete_file
  endpoint:
    path: /fileops/undelete/
    method: POST
    data_selector: parameters
    params: {}
- name: multi_undelete
  endpoint:
    path: /fileops/multi/undelete/
    method: POST
    data_selector: parameters
    params: {}
- name: rename_file
  endpoint:
    path: /fileops/rename/
    method: POST
    data_selector: parameters
    params: {}
- name: add_share
  endpoint:
    path: /shares/add/
    method: POST
    data_selector: parameters
    params: {}
- name: remove_share
  endpoint:
    path: /shares/remove/
    method: POST
    data_selector: parameters
    params: {}
- name: accept_share
  endpoint:
    path: /shares/accept/
    method: POST
    data_selector: parameters
    params: {}
- name: decline_invitation
  endpoint:
    path: /shares/decline/
    method: POST
    data_selector: ''
    params:
      hash: ''
- name: uninvite
  endpoint:
    path: /shares/uninvite/
    method: POST
    data_selector: ''
    params:
      path: ''
      member_login: ''
      group_id: ''
- name: unshare
  endpoint:
    path: /shares/unshare/
    method: POST
    data_selector: ''
    params:
      userid: ''
      path: ''
- name: collaborators
  endpoint:
    path: /shares/collaborators/
    method: GET
    data_selector: ''
    params:
      userid: ''
      path: ''
- name: update_collaborator
  endpoint:
    path: /shares/update_collaborator/
    method: POST
    data_selector: ''
    params:
      path: ''
      member_login: ''
      writer: ''
      group_id: ''
- name: list_shared_folders
  endpoint:
    path: /shares/
    method: GET
    data_selector: ''
    params:
      whoose: ''
- name: set_folder_size_limit
  endpoint:
    path: /shares/sizelimit/
    method: POST
    data_selector: ''
    params:
      path: ''
      owner_id: ''
      size_limit: ''
      enable: ''
- name: add_to_company_shares
  endpoint:
    path: /shares/company/add/
    method: POST
    data_selector: ''
    params:
      path: ''
      public_name: ''
- name: hide_from_company_shares
  endpoint:
    path: /shares/company/hide/
    method: POST
    data_selector: ''
    params:
      folder_hash: ''
      path: ''
- name: get_company_shared_folders
  endpoint:
    path: /shares/company/get/
    method: GET
    data_selector: ''
    params:
      folder_hash: ''
      offset: ''
      limit: ''
      show_all: ''
- name: get_single_company_shared_folder
  endpoint:
    path: /shares/company/get/one/
    method: GET
    data_selector: ''
    params:
      folder_hash: ''
- name: get_company_shared_list
  endpoint:
    path: /shares/company/shared/
    method: GET
    data_selector: ''
    params:
      name: ''
      offset: ''
      limit: ''
- name: request_access
  endpoint:
    path: /shares/company/request/
    method: POST
    data_selector: ''
    params:
      folder_hash: ''
      invitation: ''
- name: accept_request
  endpoint:
    path: /shares/company/accept/
    method: POST
    data_selector: ''
    params:
      folder_hash: ''
      writer: ''
- name: get_access_requests
  endpoint:
    path: /shares/company/requests/
    method: GET
    data_selector: ''
    params: {}
- name: get_shared_files_metadata
  endpoint:
    path: /shares/invites/
    method: GET
    data_selector: ''
    params:
      invite_hash: ''
      path: ''
      listing: ''
      dirs_only: ''
      extra: ''
      offset: ''
      limit: ''
- name: create_public_link
  endpoint:
    path: /links/create/
    method: POST
    data_selector: ''
    params:
      path: ''
      ttl: ''
      download_max: ''
      password: ''
      notify: ''
      upload_folder: ''
- name: delete_public_link
  endpoint:
    path: /links/delete/
    method: POST
    data_selector: ''
    params:
      path: ''
- name: list_public_links
  endpoint:
    path: /links/
    method: GET
    data_selector: ''
    params:
      hash: ''
- name: get_link_info
  endpoint:
    path: /links/get/<hash>/<path>
    method: GET
    data_selector: ''
    params:
      hash: ''
      path: ''
      for_view: ''
- name: get_link_metadata
  endpoint:
    path: /links/metadata/<hash>/<path>
    method: GET
    data_selector: ''
    params:
      hash: ''
      path: ''
      dirs_only: ''
      extra: ''
      offset: ''
      limit: ''
- name: handover_shared_folder
  endpoint:
    path: /fileops/handover/
    method: POST
    data_selector: ''
    params:
      path: ''
      member_id: ''
- name: list_trash
  endpoint:
    path: /trash/
    method: GET
    data_selector: ''
    params:
      dirs_only: ''
      extra: ''
      offset: ''
      limit: ''
- name: restore_from_trash
  endpoint:
    path: /trash/restore/<name>
    method: POST
    data_selector: ''
    params:
      paths: ''
      overwrite: ''
- name: trash_clear
  endpoint:
    path: /trash/clear/
    method: POST
    data_selector: null
    params: {}
- name: trash_from_shared
  endpoint:
    path: /trash/from_shared/<path>
    method: GET
    data_selector: null
    params:
      path: ''
      dirs_only: 0
      extra: true
      offset: 0
      limit: 0
- name: trash_restore
  endpoint:
    path: /trash/restore/<name>/from_shared/<path>
    method: POST
    data_selector: null
    params:
      name: ''
      path: ''
      overwrite: 1
- name: migration_contents
  endpoint:
    path: /migration_contents/
    method: GET
    data_selector: null
    params:
      path: null
      whoose: null
      status: null
- name: migration_contents_add
  endpoint:
    path: /migration_contents/add/
    method: POST
    data_selector: null
    params:
      member_login: ''
      path: null
      invitation: null
      cleanup: null
- name: migration_contents_accept
  endpoint:
    path: /migration_contents/accept/
    method: POST
    data_selector: null
    params:
      hash: ''
- name: migration_contents_reject
  endpoint:
    path: /migration_contents/reject/
    method: POST
    data_selector: null
    params:
      hash: ''
- name: migration_contents_remove
  endpoint:
    path: /migration_contents/remove/
    method: POST
    data_selector: null
    params:
      hash: ''
- name: shares_collaborators
  endpoint:
    path: /shares/collaborators/
    method: GET
    data_selector: null
    params:
      userid: ''
      path: ''
- name: shares_remove
  endpoint:
    path: /shares/remove/
    method: POST
    data_selector: null
    params:
      userid: ''
      path: ''
      member_login: ''
- name: shares_unshare
  endpoint:
    path: /shares/unshare/
    method: POST
    data_selector: null
    params:
      userid: ''
      path: ''
- name: links_file_create
  endpoint:
    path: /links/file_create/<hash>
    method: POST
    data_selector: null
    params:
      hash: ''
      created: null
      modified: null
      device_id: null
      device_reference: null
      size: null
      checksum: null
      password: null
      multipart: false
- name: links_file_create_part
  endpoint:
    path: /links/file_create_part/<hash>
    method: POST
    data_selector: null
    params:
      hash: ''
      temp_path: ''
      part_num: ''
      password: null
- name: files_search
  endpoint:
    path: /files/search/
    method: POST
    data_selector: null
    params:
      query: ''
      type: null
      offset: 0
      limit: 0
- name: dir_size_calculate
  endpoint:
    path: /dir_size_calculate/
    method: GET
    data_selector: null
    params:
      force: null
- name: get_shared_file
  endpoint:
    path: /get//
    method: GET
    data_selector: null
    params:
      path: ''
      for_view: null
      invite_hash: ''
- name: shares_invites
  endpoint:
    path: /shares/invites/
    method: GET
    data_selector: null
    params:
      invite_hash: ''
      path: ''
      listing: null
      dirs_only: null
      extra: null
      offset: null
      limit: null
- name: links_info
  endpoint:
    path: /links/info/
    method: GET
    data_selector: null
    params:
      hash: ''
      author_lang: null
- name: accounts_login
  endpoint:
    path: /accounts/login/
    method: POST
    data_selector: null
    params:
      login: ''
      password: null
      permanent_auth: null
      device_description: null
- name: accounts_logout
  endpoint:
    path: /accounts/logout/
    method: POST
    data_selector: null
    params: {}
- name: accounts_approve
  endpoint:
    path: /accounts/approve/
    method: GET
    data_selector: null
    params:
      hash: ''
- name: accounts_get
  endpoint:
    path: /accounts/get/
    method: GET
    data_selector: null
    params:
      user_id: null
- name: accounts_check
  endpoint:
    path: /accounts/check/
    method: GET
    data_selector: null
    params:
      login: ''
- name: accounts_remove_login
  endpoint:
    path: /accounts/remove_login/
    method: POST
    data_selector: null
    params:
      login: ''
- name: accounts_getinvited
  endpoint:
    path: /accounts/getinvited/
    method: GET
    data_selector: null
    params:
      hash: ''
- name: accounts_recover_lost_password
  endpoint:
    path: /accounts/recover_lost_password/
    method: POST
    data_selector: null
    params:
      login: ''
- name: resend_message_for_approve
  endpoint:
    path: /api/1/accounts/resend_message_for_approve/
    method: POST
    data_selector: No data are returned
    params:
      login: a login that needs to be approved by resending the message
- name: change_profile
  endpoint:
    path: /api/1/accounts/change_profile/
    method: POST
    data_selector: No data are returned
    params:
      name: Not mandatory. New username
      password: Not mandatory. New user password
      lang: Not mandatory. Interface language
      timezone: Not mandatory. User’s time zone
      extra_info: Additional information for user
- name: permanent_tokens
  endpoint:
    path: /api/1/accounts/permanent_tokens/
    method: GET
    data_selector: A list of all permanent user tokens
    params: {}
- name: remove_permanent_token
  endpoint:
    path: /api/1/accounts/remove_permanent_token/
    method: POST
    data_selector: Code 200 - token was successfully removed
    params:
      token_id: Mandatory. Id of the token that needs to be removed.
- name: cancel_token_remote_wipe
  endpoint:
    path: /api/1/accounts/cancel_token_remote_wipe
    method: POST
    data_selector: No response data
    params:
      token_id: auth_token identifier
- name: token_wiped
  endpoint:
    path: /api/1/accounts/token_wiped
    method: POST
    data_selector: No response data
    params: {}
- name: accept_offer
  endpoint:
    path: /api/1/accounts/accept_offer/
    method: POST
    data_selector: Code 200 - Confirmation accepted
    params: {}
- name: get_offer
  endpoint:
    path: /api/1/accounts/get_offer/
    method: GET
    data_selector: HTML - offer page
    params: {}
- name: decline_offer
  endpoint:
    path: /api/0/accounts/decline_offer/
    method: POST
    data_selector: code 200 - Confirmation accepted
    params: {}
- name: feedback
  endpoint:
    path: /api/1/accounts/feedback/
    method: POST
    data_selector: 200 - feedback processed
    params:
      email: Not mandatory. Email of the user who sends feedback
      comment: Mandatory. Message text.
- name: feedback_list
  endpoint:
    path: /api/1/accounts/feedback_list/
    method: GET
    data_selector: List of feedbacks
    params:
      limit: Not mandatory. The number of values in the output
      offset: Not mandatory. Indentation of values in the output
- name: set_value
  endpoint:
    path: /api/1/accounts/set_value/
    method: POST
    data_selector: 200 - if the value was successfully written or updated
    params:
      key: Mandatory. The key by which the specified user value will be written or
        updated.
      value: Mandatory. Key value.
- name: get_value
  endpoint:
    path: /api/1/accounts/get_value/
    method: GET
    data_selector: '200 - returns a dictionary of the form {key: value}'
    params:
      key: Mandatory. The key by which the search for the requested value will be
        performed.
- name: company_info
  endpoint:
    path: /api/1/company/<company_id>
    method: GET
    data_selector: Company information
    params:
      company_id: company identifier from URL string
- name: company_domain
  endpoint:
    path: /api/1/company/domain/<domain>
    method: POST
    data_selector: JSON dictionary with company information
    params:
      domain: company domain
- name: logo_confirm
  endpoint:
    path: /api/1/company/<company_id>/logo_confirm/
    method: POST
    data_selector: No response data
    params:
      company_id: mandatory, company identifier from URL string
      temp_name: temporary filename
      size: company logo filesize
      checksum: logo md5 checksum
- name: logo_clear
  endpoint:
    path: /api/1/company/<company_id>/logo_clear/
    method: POST
    data_selector: No response data
    params:
      company_id: mandatory, company identifier from URL string
- name: logo_upload
  endpoint:
    path: /api/1/company/<company_id>/logo_upload/
    method: POST
    data_selector: URL to upload image file
    params:
      size: image file size
      checksum: md5 control checksum
      path: path to logo file image
- name: admin_change
  endpoint:
    path: /api/1/company/<company_id>/admin_change/
    method: POST
    data_selector: Public company info
    params:
      company_id: mandatory, company identifier from URL string
      user_id: mandatory, user id to change company admin
- name: users_enable
  endpoint:
    path: /api/1/company/<company_id>/users_enable/
    method: POST
    data_selector: User public information
    params:
      company_id: mandatory, company identifier from URL string
      user_id: mandatory, user ID
      reason: Reason for enabling
- name: users_disable
  endpoint:
    path: /api/1/company/<company_id>/users_disable/
    method: POST
    data_selector: User public information
    params:
      company_id: mandatory, company identifier from URL string
      user_id: mandatory, user IDs list
      reason: Reason for disabling
      remote_wipe: Wipe data on all devices
- name: create_user
  endpoint:
    path: /api/1/company/<company_id>/create_user/
    method: POST
    data_selector: User public information
    params:
      company_id: mandatory, company identifier from URL string
      login: mandatory, user login
      name: mandatory, user name
      password: mandatory, user password
- name: remove_user
  endpoint:
    path: /api/1/accounts/company/<company_id>/remove_user/
    method: POST
    data_selector: Users public information
    params:
      company_id: mandatory, company identifier from URL string
      user_id: mandatory, user id to remove
      need_wipe: optional - set this flag if you need to wipe user data on devices
      transfer_file: optional - set this flag if you need to transfer user's files
      transfer_login: optional - user login to whom the files will be transferred
      auto_remove: optional - set this flag if you need the user to be automatically
        removed.
- name: confirm_user_removing
  endpoint:
    path: /api/1/accounts/company/<company_id>/confirm_user_removing/
    method: POST
    data_selector: Users public information
    params:
      company_id: mandatory, company identifier from URL string
      user_id: mandatory, user for deletion identifier
- name: cancel_user_removing
  endpoint:
    path: /api/1/accounts/company/<company_id>/cancel_user_removing/
    method: POST
    data_selector: Users public information
    params:
      company_id: mandatory, company identifier from URL string
      user_id: mandatory, user for deletion identifier
- name: users
  endpoint:
    path: /api/1/company/<company_id>/users
    method: GET
    data_selector: Company's employees list
    params:
      company_id: company identifier from URL string
- name: user_permanent_tokens
  endpoint:
    path: /api/1/company/user_permanent_tokens
    method: GET
    data_selector: Permanent tokens list
    params:
      userid: user identifier from company
- name: remove_permanent_token
  endpoint:
    path: /api/1/company/user_permanent_token/remove
    method: POST
    data_selector: No response data
    params:
      token_id: token identifier
      remote_wipe: remote wipe flag
- name: cancel_remove
  endpoint:
    path: /api/1/company/user_permanent_token/cancel_remove
    method: POST
    data_selector: No response data
    params:
      token_id: token identifier
- name: change_users_quota
  endpoint:
    path: /api/1/accounts/company/change_users_quota
    method: POST
    data_selector: Users public information
    params:
      company_id: mandatory, company identifier from URL string
      users_id: mandatory, user IDs list
      quota_size: mandatory, quota size for users
- name: change_user_can_print
  endpoint:
    path: /accounts/company/change_user_can_print
    method: POST
    data_selector: User public information
    params:
      user_id: mandatory
      value: mandatory
- name: change_user_can_download
  endpoint:
    path: /accounts/company/change_user_can_download
    method: POST
    data_selector: User public information
    params:
      user_id: mandatory
      value: mandatory
- name: change_user_can_upload
  endpoint:
    path: /accounts/company/change_user_can_upload
    method: POST
    data_selector: User public information
    params:
      user_id: mandatory
      value: mandatory
- name: change_user_pc_can_download
  endpoint:
    path: /accounts/company/change_user_pc_can_download
    method: POST
    data_selector: User public information
    params:
      user_id: mandatory
      value: mandatory
- name: change_mobile_restriction
  endpoint:
    path: /accounts/company/change_mobile_restriction
    method: POST
    data_selector: User public information
    params:
      user_id: mandatory
      value: mandatory
- name: change_user_ip_restriction
  endpoint:
    path: /accounts/company/change_user_ip_restriction
    method: POST
    data_selector: User public information
    params:
      user_id: mandatory
      ip_restriction: mandatory
      allowed_ips: comma-separated list of IP addresses
- name: change_admin_rights
  endpoint:
    path: /accounts/change_admin_rights
    method: POST
    data_selector: User public information
    params:
      user_id: mandatory
      set_admin: mandatory
- name: custom_user_agreement
  endpoint:
    path: /accounts/company/company_id/custom_user_agreement
    method: POST
    data_selector: Company public information
    params:
      value: mandatory
      show: optional
      agreement: optional
- name: change_user_expired
  endpoint:
    path: /accounts/company/change_user_expired
    method: POST
    data_selector: User public information
    params:
      user_id: mandatory
      expired: mandatory
- name: update_reference
  endpoint:
    path: /accounts/company/company_id/update_reference/
    method: POST
    data_selector: 200 OK
    params:
      company_id: mandatory
      reference_email: mandatory
- name: create_user
  endpoint:
    path: /accounts/create/
    method: POST
    data_selector: User data
    params:
      email: not mandatory
      password: not mandatory
      name: not mandatory
      company_name: not mandatory
      company_plan: not mandatory
      invite_hash: not mandatory
- name: info
  endpoint:
    path: /info/
    method: GET
    data_selector: Payment method information
    params: {}
- name: choose_payment_method
  endpoint:
    path: /choose/
    method: POST
    data_selector: Confirmation of successful procedure
    params:
      system: mandatory
- name: comment_create
  endpoint:
    path: /workflow/comment/<path>
    method: POST
    data_selector: A comment object
    params:
      text: mandatory
- name: comment_edit
  endpoint:
    path: /workflow/comment/edit
    method: POST
    data_selector: A comment object
    params:
      comment_id: mandatory
      text: mandatory
- name: comment_delete
  endpoint:
    path: /workflow/comment/delete
    method: POST
    data_selector: Empty
    params:
      comment_id: mandatory
- name: comments_list
  endpoint:
    path: /workflow/comments/<path>
    method: GET
    data_selector: A list of comments by path
    params:
      type: not mandatory
      assignment: not mandatory
      status: not mandatory
- name: update_task_status
  endpoint:
    path: /workflow/comment/update_task_status
    method: POST
    data_selector: A comment object
    params:
      assignment_id: mandatory
      status: mandatory
notes:
- If, when copying a file or directory, it is found that an object with a similar
  name already exists in the 'where to copy' directory, then the new object will be
  called something (1) and lie on the same level with the existing something object.
- The method is asynchronous
errors:
- 403 GroupForbidden - group in another company
- 404 GroupNotFound - group not found
- 404 Key not found
- 404 UserNotFound, FileNotFound, CompanyNotFound
- 500 InternalError - kukudocs converting failed
- 400 InvalidParameters. the value of 'path' is not the folder path.
- 404 NotFound. Folder not found.
- 400 One of the required parameters is not specified.
- 403 If the overwrite parameter is set to False, and a portable folder or file already
  exists in the to_path directory.
- 404 Either the path to be moved was not found, or the directory to which to move
  was not found.
- 405 The path to which the transfer takes place is not a directory.
- 424 An attempt to transfer a directory to a subdirectory below the tree.
- 304 The content of the folder has not changed since the last request.
- 403 Access to files is restricted.
- 403 Link blocked due to complaint about non-licensed content
- 402 There is not enough space to move the object.
- 201 The file was created as a result of deduplication.
- 400 Invalid version of the file.
- 403 An attempt to write to a remote folder or the file version does not match when
  overwriting it.
- 404 An attempt was made to write to a missing folder if the create_dirs flag is
  False.
- 409 A file name conflict with an existing object if overwrite is False.
- 304 The contents of the recycle bin have not changed since the last request (determined
  by the If-None-Match header).
- 400 The folder is not a shared folder of the user
- 404 The recycle bin or object inside it was not found.
- 403 If the user is not a collaborator of the folder.
- 404 If the folder is not found.
- 403 User has already confirmed registration.
- 200 PasswordNotModified - Password was not changed
- 400 The user was not found in the system or one of the passed parameters did not
  pass validation.
- 404 Company with the given ID not found.
- 404 User/User with the given ID not found.
- 403 User has no rights to change company's data.
- 404 User not found.
- 400 Request doesn't have expired value.
- 400 Email form is invalid.
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.server.com/api/1
  auth:
    type: basic
    location: header
    header_name: Authorization
  headers:
    Content-type: application/json
source_metadata: null
