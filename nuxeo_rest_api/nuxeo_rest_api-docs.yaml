resources:
- name: Watermark
  endpoint:
    path: /nxdoc/how-to-contribute-picture-conversions/
    method: GET
    data_selector: pictureConversions
    params: {}
- name: BCPortfolio
  endpoint:
    path: /path/to/BCPortfolio
    method: GET
    data_selector: records
- name: BCContract
  endpoint:
    path: /path/to/BCContract
    method: GET
    data_selector: records
- name: groups
  endpoint:
    path: /api/v1/group
    method: POST
- name: users
  endpoint:
    path: /api/v1/user
    method: POST
- name: portfolio
  endpoint:
    path: /default-domain/workspaces/North America
    method: POST
    data_selector: portfolio
    params: {}
- name: contract
  endpoint:
    path: /default-domain/workspaces/North America
    method: POST
    data_selector: contract
    params: {}
- name: fetch_contract
  endpoint:
    path: /default-domain/workspaces/North America/awesome-tech/skynet-ai-maintenance
    method: GET
    data_selector: contract
    params: {}
- name: update_contract
  endpoint:
    path: /default-domain/workspaces/North America/awesome-tech/skynet-ai-maintenance
    method: PUT
    data_selector: contract
    params: {}
- name: trash_contract
  endpoint:
    path: /default-domain/workspaces/North America/awesome-tech/skynet-ai-maintenance
    method: POST
    data_selector: contract
    params: {}
- name: restore_contract
  endpoint:
    path: /default-domain/workspaces/North America
    method: GET
    data_selector: contract
    params: {}
- name: query_contracts
  endpoint:
    path: /default-domain/workspaces/North America
    method: POST
    data_selector: contracts
    params: {}
- name: delete_contract
  endpoint:
    path: /default-domain/workspaces/North America/Caterer/2015 Annual Conference
    method: DELETE
    data_selector: contract
    params: {}
- name: permissions
  endpoint:
    path: /default-domain/workspaces/North America
    method: GET
    data_selector: document
- name: check_file_download_policy
  endpoint:
    path: /default-domain/workspaces/North America/Beyond Space Travel Agen/To the
      Moon and back
    method: GET
    data_selector: contract
- name: documents
  endpoint:
    path: /path/to/your/endpoint
    method: POST
    data_selector: document
    params: {}
- name: document_audit_log
  endpoint:
    path: /default-domain/workspaces/North America/awesome-tech/skynet-ai-maintenance/audit
    method: GET
- name: contract_rendition
  endpoint:
    path: /default-domain/workspaces/North America/awesome-contract
    method: GET
    data_selector: renditions
- name: portfolio_rendition
  endpoint:
    path: /default-domain/workspaces/North America/Money Bank
    method: GET
    data_selector: renditions
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: entries
- name: BCContract
  endpoint:
    path: /api/v1/BCContract
    method: GET
    data_selector: records
- name: contract_updater
  endpoint:
    path: /contract-updater
    method: POST
    data_selector: operation
    params: {}
- name: node.js Importer
  endpoint:
    path: /nuxeo-sandbox/nuxeo-node-importer
    method: GET
    data_selector: features
    params: {}
- name: Nuxeo Platform Importer
  endpoint:
    path: /nuxeo/site/marketplace/package/nuxeo-platform-importer
    method: GET
    data_selector: features
    params: {}
- name: Nuxeo Scan Importer
  endpoint:
    path: /nuxeo/site/marketplace/package/nuxeo-scan-importer
    method: GET
    data_selector: features
    params: {}
- name: Nuxeo CSV Importer
  endpoint:
    path: /nuxeo/site/marketplace/package/nuxeo-csv
    method: GET
    data_selector: features
    params: {}
- name: Nuxeo Direct Transfer
  endpoint:
    path: /client-apps/nuxeo-drive-direct-transfer
    method: GET
    data_selector: features
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: nuxeo_image
  endpoint:
    path: /docker/nuxeo
    method: GET
    data_selector: docker_image_details
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: nuxeo_image
  endpoint:
    path: /docker/nuxeo
    method: GET
    data_selector: image
- name: nuxeo_packages
  endpoint:
    path: /install-packages.sh
    method: RUN
    data_selector: packages
    params: {}
- name: configuration_properties
  endpoint:
    path: /etc/nuxeo/conf.d
    method: COPY
    data_selector: properties
    params: {}
- name: nuxeo_instance
  endpoint:
    path: /nuxeoctl/register
    method: POST
    data_selector: instance_data
- name: LibreOffice
  endpoint:
    path: /installing-libreoffice
    method: GET
    data_selector: records
    params:
      minimum_version: 7.1.0
- name: ImageMagick
  endpoint:
    path: /installing-imagemagick
    method: GET
    data_selector: records
    params: {}
- name: Ghostscript
  endpoint:
    path: /installing-ghostscript
    method: GET
    data_selector: records
    params: {}
- name: FFmpeg
  endpoint:
    path: /installing-ffmpeg
    method: GET
    data_selector: records
    params: {}
- name: ExifTool
  endpoint:
    path: /installing-exiftool
    method: GET
    data_selector: records
    params: {}
- name: CCExtractor
  endpoint:
    path: /installing-ccextractor
    method: GET
    data_selector: records
    params: {}
- name: documents
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: Nuxeo Platform
  endpoint:
    path: /nuxeoctl.bat
    method: POST
    data_selector: service
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
    params: {}
- name: service
  endpoint:
    path: /jboss-native-2.0.4/bin/service.bat
    method: GET
    data_selector: records
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: document
  endpoint:
    path: /nuxeo/api/v1/documents
    method: GET
    data_selector: results
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: document
  endpoint:
    path: /nuxeo/api/v1/documents
    method: GET
    data_selector: entries
- name: nuxeo.log.dir
  endpoint:
    path: /var/log/nuxeo/log
    method: GET
- name: nuxeo.data.dir
  endpoint:
    path: /var/lib/nuxeo/nxserver/data
    method: GET
- name: common
  endpoint:
    path: /templates/common/nuxeo.defaults
    method: GET
- name: custom
  endpoint:
    path: /templates/custom/nuxeo.defaults
    method: GET
- name: default
  endpoint:
    path: /templates/default/nuxeo.defaults
    method: GET
- name: docker
  endpoint:
    path: /templates/docker/nuxeo.defaults
    method: GET
- name: docker-json
  endpoint:
    path: /templates/docker-json/nuxeo.defaults
    method: GET
- name: https
  endpoint:
    path: /templates/https/nuxeo.defaults
    method: GET
- name: mongodb
  endpoint:
    path: /templates/mongodb/nuxeo.defaults
    method: GET
- name: postgresql
  endpoint:
    path: /templates/postgresql/nuxeo.defaults
    method: GET
- name: mariadb
  endpoint:
    path: /templates/mariadb/nuxeo.defaults
    method: GET
- name: mssql
  endpoint:
    path: /templates/mssql/nuxeo.defaults
    method: GET
- name: mysql
  endpoint:
    path: /templates/mysql/nuxeo.defaults
    method: GET
- name: oracle
  endpoint:
    path: /templates/oracle/nuxeo.defaults
    method: GET
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
    params: {}
- name: audit_purge_postgresql
  endpoint:
    path: /nxp_logs
    method: DELETE
    data_selector: lines_cleanup
    params:
      incremental: log_event_date
- name: audit_purge_sqlserver
  endpoint:
    path: /nxp_logs
    method: DELETE
    data_selector: lines_cleanup
    params:
      incremental: log_event_date
- name: audit_purge_oracle
  endpoint:
    path: /nxp_logs
    method: DELETE
    data_selector: lines_cleanup
    params:
      incremental: log_event_date
- name: create_audit_index
  endpoint:
    path: /nuxeo-audit-201809
    method: PUT
    data_selector: settings
    params: {}
- name: reindex_and_filter
  endpoint:
    path: /_reindex
    method: POST
    data_selector: source
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: management
  endpoint:
    path: /rest-api/1/management-endpoint/
    method: GET
    data_selector: data
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
    params: {}
- name: elasticsearch_reindex
  endpoint:
    path: /management/search/reindex
    method: GET
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
    params: {}
- name: hotfix_installation
  endpoint:
    path: /nuxeoctl/mp-hotfix
    method: POST
    data_selector: installation_info
    params:
      accept: 'true'
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: user
  endpoint:
    path: /api/v1/user
    method: POST
    data_selector: records
- name: management_fulltext
  endpoint:
    path: /api/v1/management/fulltext/fixBinaryStorage
    method: POST
    data_selector: records
- name: sequencers
  endpoint:
    path: /api/v1/management/sequencers
    method: GET
    data_selector: records
- name: administrators
  endpoint:
    path: /nuxeo/api/v1/groups/administrators
    method: GET
    data_selector: memberUsers, memberGroups, parentGroups
    params: {}
- name: management
  endpoint:
    path: /rest-api/1/management-endpoint/
    method: GET
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
    params:
      incremental: updatedAt
- name: running_status
  endpoint:
    path: /runningstatus
    method: GET
    data_selector: status
- name: running_status_info
  endpoint:
    path: /runningstatus?info=probe&key=xxx
    method: GET
    data_selector: info
- name: running_status_started
  endpoint:
    path: /runningstatus?info=started
    method: GET
    data_selector: started
- name: running_status_summary
  endpoint:
    path: /runningstatus?info=summary&key=xxx
    method: GET
    data_selector: summary
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: data_directory
  endpoint:
    path: /var/lib/nuxeo
    method: GET
- name: log_directory
  endpoint:
    path: /var/log/nuxeo
    method: GET
- name: temp_directory
  endpoint:
    path: /tmp
    method: GET
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: DefaultBlobProvider
  endpoint:
    path: /nxdoc/file-storage-configuration/
    method: GET
    data_selector: blobprovider
    params: {}
- name: BlobDispatcher
  endpoint:
    path: /nxdoc/file-storage-configuration/
    method: GET
    data_selector: blobdispatcher
    params: {}
- name: default
  endpoint:
    path: /default
    method: GET
    data_selector: documents
- name: configuration
  endpoint:
    path: /postgresql/configuration
    method: GET
    data_selector: settings
    params: {}
- name: default_statistics_target
  endpoint:
    path: /default_statistics_target
    method: SET
    data_selector: configuration
    params:
      value: 500
- name: log_settings
  endpoint:
    path: /log_settings
    method: SET
    data_selector: configuration
    params:
      log_line_prefix: '%t [%p]: [%l-1] user=%u,db=%d'
      log_min_duration_statement: 400
      log_checkpoints: 'on'
      log_lock_waits: 'on'
      log_temp_files: 0
      log_autovacuum_min_duration: 0
      log_statement: ddl
      track_functions: pl
- name: shared_preload_libraries
  endpoint:
    path: /shared_preload_libraries
    method: SET
    data_selector: configuration
    params:
      value: pg_stat_statements, auto_explain
- name: pg_stat_statements
  endpoint:
    path: /pg_stat_statements
    method: CREATE
    data_selector: extensions
    params: {}
- name: pg_buffercache
  endpoint:
    path: /pg_buffercache
    method: CREATE
    data_selector: extensions
    params: {}
- name: MongoDB
  endpoint:
    path: /nxdoc/mongodb/
    method: GET
    data_selector: records
    params: {}
- name: PostgreSQL
  endpoint:
    path: /nxdoc/postgresql/
    method: GET
    data_selector: records
    params: {}
- name: MySQL
  endpoint:
    path: /nxdoc/mysql/
    method: GET
    data_selector: records
    params: {}
- name: MariaDB
  endpoint:
    path: /nxdoc/mariadb/
    method: GET
    data_selector: records
    params: {}
- name: Oracle
  endpoint:
    path: /nxdoc/oracle/
    method: GET
    data_selector: records
    params: {}
- name: Microsoft SQL Server
  endpoint:
    path: /nxdoc/microsoft-sql-server/
    method: GET
    data_selector: records
    params: {}
- name: repository_index
  endpoint:
    path: /nuxeo/_settings
    method: GET
    data_selector: settings
    params: {}
- name: audit_logs_index
  endpoint:
    path: /nuxeo-audit/_settings
    method: GET
    data_selector: settings
    params: {}
- name: uid_sequencer_index
  endpoint:
    path: /nuxeo-uidgen/_settings
    method: GET
    data_selector: settings
    params: {}
- name: analyze
  endpoint:
    path: /nuxeo/_analyze
    method: GET
    data_selector: analyzer
    params: {}
- name: repository_index
  endpoint:
    path: /nuxeo/api/v1/management/search/reindex
    method: POST
    data_selector: commandId
- name: audit_logs_index
  endpoint:
    path: /nuxeo/api/v1/management/bulk/{commandId}
    method: GET
    data_selector: bulkStatus
- name: analyze_fulltext
  endpoint:
    path: /nuxeo/_analyze
    method: GET
    data_selector: null
    params: {}
- name: analyze_field
  endpoint:
    path: /nuxeo/_analyze
    method: GET
    data_selector: null
    params: {}
- name: search_document
  endpoint:
    path: /nuxeo/doc/_search
    method: GET
    data_selector: null
    params: {}
- name: repository_index
  endpoint:
    path: /nuxeo/api/v1/management/search/reindex
    method: POST
    data_selector: commandId
    params: {}
- name: audit_logs_index
  endpoint:
    path: /nuxeo/api/v1/management/bulk/{commandId}
    method: GET
    data_selector: bulkStatus
    params: {}
- name: default
  endpoint:
    path: /kafka
    method: POST
    data_selector: kafkaConfig
    params: {}
- name: fastConsumer
  endpoint:
    path: /kafka/fastConsumer
    method: POST
    data_selector: kafkaConfig
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: default
  endpoint:
    path: /kafkaConfig
    method: POST
    data_selector: kafkaConfig
    params: {}
- name: fastConsumer
  endpoint:
    path: /kafkaConfig
    method: POST
    data_selector: kafkaConfig
    params: {}
- name: audit_topic
  endpoint:
    path: nuxeo-audit-audit
    method: GET
    data_selector: records
- name: stream_work_manager_topics
  endpoint:
    path: nuxeo-work-elasticSearchIndexing
    method: GET
    data_selector: records
- name: bulk_service_topics
  endpoint:
    path: nuxeo-bulk-command
    method: GET
    data_selector: records
- name: pubsub_topic
  endpoint:
    path: nuxeo-pubsub-pubsub
    method: GET
    data_selector: records
- name: datasources-secondrepo-config
  endpoint:
    path: /datasources-secondrepo-config
    method: POST
    data_selector: datasource
    params: {}
- name: repository-secondrepo-config
  endpoint:
    path: /repository-secondrepo-config
    method: POST
    data_selector: repository
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: records
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: email_configuration
  endpoint:
    path: /nxdoc/set-up-email-notification/
    method: GET
    data_selector: configuration
- name: run_work_in_failure
  endpoint:
    path: /nuxeo/site/automation/WorkManager.RunWorkInFailure
    method: POST
    data_selector: total
    params: {}
- name: run_works_in_failure
  endpoint:
    path: /nuxeo/site/management/workmanager/runworksinfailure
    method: POST
    data_selector: total
    params:
      timeoutSeconds: '10'
- name: default-repository-config
  endpoint:
    path: /default-repository-config.xml
    method: GET
    data_selector: repository
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
    params: {}
- name: commands
  endpoint:
    path: /commands
    method: GET
    data_selector: available_commands
- name: exit
  endpoint:
    path: /exit
    method: GET
    data_selector: exit_code
- name: help
  endpoint:
    path: /help
    method: GET
    data_selector: help_info
- name: install
  endpoint:
    path: /install
    method: POST
    data_selector: install_info
- name: interactive
  endpoint:
    path: /interactive
    method: GET
    data_selector: interactive_shell
- name: settings
  endpoint:
    path: /settings
    method: GET
    data_selector: shell_settings
- name: trace
  endpoint:
    path: /trace
    method: GET
    data_selector: error_trace
- name: use
  endpoint:
    path: /use
    method: GET
    data_selector: namespace_info
- name: version
  endpoint:
    path: /version
    method: GET
    data_selector: nuxeo_version
- name: cat
  endpoint:
    path: /cat
    method: GET
    data_selector: content
    params:
      file: optional
- name: cd
  endpoint:
    path: /cd
    method: GET
    data_selector: directory
    params:
      file: required
- name: cp
  endpoint:
    path: /cp
    method: POST
    data_selector: copy
    params:
      source: required
      destination: required
      options: optional
- name: ls
  endpoint:
    path: /ls
    method: GET
    data_selector: file_names
    params:
      file: optional
- name: mkdir
  endpoint:
    path: /mkdir
    method: POST
    data_selector: create_directory
    params:
      file: required
- name: mv
  endpoint:
    path: /mv
    method: POST
    data_selector: rename
    params:
      source: required
      destination: required
- name: popd
  endpoint:
    path: /popd
    method: POST
    data_selector: pop_directory
    params: {}
- name: pushd
  endpoint:
    path: /pushd
    method: POST
    data_selector: push_directory
    params:
      file: required
- name: pwd
  endpoint:
    path: /pwd
    method: GET
    data_selector: working_directory
    params:
      options: optional
- name: rm
  endpoint:
    path: /rm
    method: DELETE
    data_selector: remove
    params:
      file: required
      options: optional
- name: touch
  endpoint:
    path: /touch
    method: POST
    data_selector: touch_file
    params:
      file: required
- name: audit
  endpoint:
    path: /audit
    method: GET
    data_selector: results
    params:
      max: -max
      page: -page
- name: cat
  endpoint:
    path: /cat
    method: GET
    data_selector: document_details
    params: {}
- name: connect
  endpoint:
    path: /connect
    method: POST
    data_selector: connection_status
    params:
      url: url
      username: -u
      password: -p
- name: workflow
  endpoint:
    path: /workflow
    method: GET
    data_selector: records
- name: GetRelations
  endpoint:
    path: /Relations.GetRelations
    method: GET
    data_selector: documents
    params: {}
- name: CreateTask
  endpoint:
    path: /Workflow.CreateTask
    method: POST
    data_selector: task
    params: {}
- name: GetTask
  endpoint:
    path: /Workflow.GetTask
    method: GET
    data_selector: tasks
    params: {}
- name: Audit.Log
  endpoint:
    path: /audit/log
    method: POST
- name: Audit.Query
  endpoint:
    path: /audit/query
    method: POST
- name: Auth.LoginAs
  endpoint:
    path: /auth/loginAs
    method: POST
- name: Auth.Logout
  endpoint:
    path: /auth/logout
    method: POST
- name: Blob.Attach
  endpoint:
    path: /blob/attach
    method: POST
- name: Blob.Create
  endpoint:
    path: /blob/create
    method: POST
- name: Blob.CreateZip
  endpoint:
    path: /blob/createZip
    method: POST
- name: Blob.Get
  endpoint:
    path: /blob/get
    method: GET
- name: Blob.GetList
  endpoint:
    path: /blob/getList
    method: GET
- name: Blob.Pop
  endpoint:
    path: /blob/pop
    method: POST
- name: Blob.PopList
  endpoint:
    path: /blob/popList
    method: POST
- name: Blob.Post
  endpoint:
    path: /blob/post
    method: POST
- name: Blob.Pull
  endpoint:
    path: /blob/pull
    method: POST
- name: Blob.PullList
  endpoint:
    path: /blob/pullList
    method: POST
- name: Blob.Push
  endpoint:
    path: /blob/push
    method: POST
- name: Blob.PushList
  endpoint:
    path: /blob/pushList
    method: POST
- name: Blob.Remove
  endpoint:
    path: /blob/remove
    method: POST
- name: Blob.Set
  endpoint:
    path: /blob/set
    method: POST
- name: Blob.SetFilename
  endpoint:
    path: /blob/setFilename
    method: POST
- name: Blob.ToFile
  endpoint:
    path: /blob/toFile
    method: POST
- name: Blob.ToPDF
  endpoint:
    path: /blob/toPDF
    method: POST
- name: Context.FetchDocument
  endpoint:
    path: /context/fetchDocument
    method: POST
- name: Context.RestoreBlobInput
  endpoint:
    path: /context/restoreBlobInput
    method: POST
- name: Context.RestoreBlobsInput
  endpoint:
    path: /context/restoreBlobsInput
    method: POST
- name: Context.RestoreDocumentInput
  endpoint:
    path: /context/restoreDocumentInput
    method: POST
- name: Context.RestoreDocumentsInput
  endpoint:
    path: /context/restoreDocumentsInput
    method: POST
- name: Context.RunDocumentOperation
  endpoint:
    path: /context/runDocumentOperation
    method: POST
- name: Context.RunInputScript
  endpoint:
    path: /context/runInputScript
    method: POST
- name: Context.RunOperation
  endpoint:
    path: /context/runOperation
    method: POST
- name: Context.RunScript
  endpoint:
    path: /context/runScript
    method: POST
- name: Context.SetInputAsVar
  endpoint:
    path: /context/setInputAsVar
    method: POST
- name: Context.SetVar
  endpoint:
    path: /context/setVar
    method: POST
- name: Document.CheckIn
  endpoint:
    path: /document/checkIn
    method: POST
- name: Document.CheckOut
  endpoint:
    path: /document/checkOut
    method: POST
- name: Document.Copy
  endpoint:
    path: /document/copy
    method: POST
- name: Document.Create
  endpoint:
    path: /document/create
    method: POST
- name: Document.CreateVersion
  endpoint:
    path: /Document/CreateVersion
    method: POST
- name: Document.Delete
  endpoint:
    path: /Document/Delete
    method: DELETE
- name: Document.Fetch
  endpoint:
    path: /Document/Fetch
    method: GET
- name: Document.FetchByProperty
  endpoint:
    path: /Document/FetchByProperty
    method: GET
- name: Document.Filter
  endpoint:
    path: /Document/Filter
    method: GET
- name: Document.GetChild
  endpoint:
    path: /Document/GetChild
    method: GET
- name: Document.GetChildren
  endpoint:
    path: /Document/GetChildren
    method: GET
- name: Document.GetParent
  endpoint:
    path: /Document/GetParent
    method: GET
- name: Document.GetPrincipalEmails
  endpoint:
    path: /Document/GetPrincipalEmails
    method: GET
- name: Document.GetUsersAndGroups
  endpoint:
    path: /Document/GetUsersAndGroups
    method: GET
- name: Document.Lock
  endpoint:
    path: /Document/Lock
    method: POST
- name: Document.Move
  endpoint:
    path: /Document/Move
    method: POST
- name: Document.MultiPublish
  endpoint:
    path: /Document/MultiPublish
    method: POST
- name: Document.Pop
  endpoint:
    path: /Document/Pop
    method: GET
- name: Document.PopList
  endpoint:
    path: /Document/PopList
    method: GET
- name: Document.Publish
  endpoint:
    path: /Document/Publish
    method: POST
- name: Document.Pull
  endpoint:
    path: /Document/Pull
    method: GET
- name: Document.PullList
  endpoint:
    path: /Document/PullList
    method: GET
- name: Document.Push
  endpoint:
    path: /Document/Push
    method: POST
- name: Document.PushList
  endpoint:
    path: /Document/PushList
    method: POST
- name: Document.Query
  endpoint:
    path: /Document/Query
    method: GET
- name: Document.Reload
  endpoint:
    path: /Document/Reload
    method: GET
- name: Document.RemoveACL
  endpoint:
    path: /Document/RemoveACL
    method: POST
- name: Document.RemoveProperty
  endpoint:
    path: /Document/RemoveProperty
    method: POST
- name: Document.Save
  endpoint:
    path: /Document/Save
    method: POST
- name: Document.SaveSession
  endpoint:
    path: /Document/SaveSession
    method: POST
- name: Document.SetACE
  endpoint:
    path: /Document/SetACE
    method: POST
- name: Document.SetLifeCycle
  endpoint:
    path: /Document/SetLifeCycle
    method: POST
- name: Document.SetProperty
  endpoint:
    path: /Document/SetProperty
    method: POST
- name: Document.Unlock
  endpoint:
    path: /Document/Unlock
    method: POST
- name: Document.Update
  endpoint:
    path: /Document/Update
    method: POST
- name: Notification.SendEvent
  endpoint:
    path: /Notification/SendEvent
    method: POST
- name: Notification.SendMail
  endpoint:
    path: /Notification/SendMail
    method: POST
- name: Relations.CreateRelation
  endpoint:
    path: /Relations/CreateRelation
    method: POST
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: lst
  endpoint:
    path: /commands/lst
    method: POST
    data_selector: result
    params: {}
- name: Upgrade Notes
  endpoint:
    path: /nxdoc/upgrading-the-nuxeo-platform/
    method: GET
- name: Nuxeo Upgrade Policy
  endpoint:
    path: /nxdoc/setup-best-practices/
    method: GET
- name: General Upgrade Procedure
  endpoint:
    path: /nxdoc/upgrade-from-lts-2021-to-lts-2023/
    method: GET
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: management_sequencers
  endpoint:
    path: /management/sequencers
    method: GET
    data_selector: sequencers
- name: init_custom_sequences
  endpoint:
    path: /management/sequencers/default
    method: POST
    data_selector: response
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: folder
  endpoint:
    path: /path/folder
    method: GET
    data_selector: folder
    params: {}
- name: file
  endpoint:
    path: /path/folder/file
    method: GET
    data_selector: file
    params: {}
- name: current_doc_children
  endpoint:
    path: /path/folder/@pp/CURRENT_DOC_CHILDREN
    method: GET
    data_selector: current_doc_children
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: audit_log
  endpoint:
    path: /audit/log
    method: GET
    data_selector: logs
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: Audit
  endpoint:
    path: /nuxeo/audit
    method: GET
    data_selector: records
    params: {}
- name: versioning_service
  endpoint:
    path: /api/versioning
    method: GET
    data_selector: records
- name: comments
  endpoint:
    path: /nuxeo/api/v1/id/DOC_ID/@annotation/comments
    method: POST
    data_selector: ''
- name: annotation_comments
  endpoint:
    path: /id/DOC_ID/@annotation/comments
    method: POST
    data_selector: comments
    params: {}
- name: WorkManager
  endpoint:
    path: /nuxeo/site/automation/WorkManager.RunWorkInFailure
    method: POST
    data_selector: params
    params:
      dryRun: true
      categoryFilter: elasticSearchIndexing
- name: RecomputeThumbnails
  endpoint:
    path: /site/automation/RecomputeThumbnails
    method: POST
    data_selector: results
- name: RecomputeThumbnails
  endpoint:
    path: /site/automation/RecomputeThumbnails
    method: POST
    data_selector: params
    params: {}
- name: FileManagerImportWithProperties
  endpoint:
    path: /automation/FileManager.ImportWithProperties
    method: POST
    data_selector: results
    params: {}
- name: document
  endpoint:
    path: /nuxeo/api/v1/documents
    method: GET
    data_selector: results
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: nuxeo_core_readacl_async_enabled
  endpoint:
    path: /nuxeo/core/readacl/async/enabled
    method: GET
    data_selector: enabled
    params: {}
- name: nuxeo_core_readacl_async_threshold
  endpoint:
    path: /nuxeo/core/readacl/async/threshold
    method: GET
    data_selector: threshold
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
    params: {}
- name: documents
  endpoint:
    path: /nuxeo/api/v1/id/{docId}
    method: GET
- name: users
  endpoint:
    path: /nuxeo/api/v1/user/{userId}
    method: GET
- name: groups
  endpoint:
    path: /nuxeo/api/v1/group/{groupId}
    method: GET
- name: directories
  endpoint:
    path: /nuxeo/api/v1/directory/{directoryId}
    method: GET
- name: document_type_schema_facet_definitions
  endpoint:
    path: /nuxeo/api/v1/config/types/{type}
    method: GET
- name: search
  endpoint:
    path: /nuxeo/api/v1/search/lang
    method: GET
- name: oauth2
  endpoint:
    path: /nuxeo/api/v1/oauth2/token
    method: GET
- name: workflows_and_tasks
  endpoint:
    path: /nuxeo/api/v1/workflow/{workflowId}
    method: GET
- name: batch_upload
  endpoint:
    path: /nuxeo/api/v1/upload/{batchId}
    method: GET
- name: command_endpoint
  endpoint:
    path: /nuxeo/api/v1/automation/{operationId}
    method: GET
- name: capability_endpoint
  endpoint:
    path: /nuxeo/api/v1/capabilities
    method: GET
- name: id_endpoint
  endpoint:
    path: /api/v1/id/{idOfTheDoc}
    method: GET
    data_selector: null
    params: {}
- name: path_endpoint
  endpoint:
    path: /api/v1/path/{docPath}
    method: GET
    data_selector: null
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: search_lang_execute
  endpoint:
    path: /api/v1/search/lang/{queryLanguage}/execute
    method: GET
    data_selector: results
    params:
      query: SELECT * FROM Document
      pageSize: 0
      currentPageIndex: 0
      maxResults: 200
- name: search_saved
  endpoint:
    path: /api/v1/search/saved
    method: GET
    data_selector: results
    params: {}
- name: latest_docs
  endpoint:
    path: /nuxeo/api/v1/search/pp/latest_docs/execute
    method: GET
    data_selector: results
    params: {}
- name: tree_children
  endpoint:
    path: /nuxeo/api/v1/search/pp/tree_children/execute
    method: GET
    data_selector: results
    params: {}
- name: docs_by_title_and_desc
  endpoint:
    path: /nuxeo/api/v1/search/pp/docs_by_title_and_desc/execute
    method: GET
    data_selector: results
    params: {}
- name: docs_by_title_if_any
  endpoint:
    path: /nuxeo/api/v1/search/pp/docs_by_title_if_any/execute
    method: GET
    data_selector: results
    params: {}
- name: docs_by_title_complex
  endpoint:
    path: /nuxeo/api/v1/search/pp/docs_by_title_complex/execute
    method: GET
    data_selector: results
    params: {}
- name: aggregates_1
  endpoint:
    path: /nuxeo/api/v1/search/pp/aggregates_1/execute
    method: GET
    data_selector: results
    params: {}
- name: saved_searches
  endpoint:
    path: /nuxeo/api/v1/search/saved
    method: GET
    data_selector: entries
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: workflow
  endpoint:
    path: /workflow
    method: GET
- name: workflow_instance
  endpoint:
    path: /workflow/{workflowId}
    method: GET
- name: workflow_instance_graph
  endpoint:
    path: /workflow/{workflowInstanceId}/graph
    method: GET
- name: document_workflow
  endpoint:
    path: /id/{docId}/@workflow
    method: GET
- name: document_path_workflow
  endpoint:
    path: /path/{docPath}/@workflow
    method: GET
- name: start_workflow
  endpoint:
    path: /id/workflow
    method: POST
- name: start_document_workflow
  endpoint:
    path: /id/{docId}/@workflow
    method: POST
- name: start_document_path_workflow
  endpoint:
    path: /path/{docPath}/@workflow
    method: POST
- name: delete_workflow_instance
  endpoint:
    path: /path/workflow/{workflowInstanceId}
    method: DELETE
- name: task
  endpoint:
    path: /task
    method: GET
- name: task_instance
  endpoint:
    path: /task/{taskId}
    method: GET
- name: document_task
  endpoint:
    path: /id/{docId}/@task
    method: GET
- name: document_path_task
  endpoint:
    path: /path/{docPath}/@task
    method: GET
- name: complete_task
  endpoint:
    path: /task/{taskId}/{action}
    method: PUT
- name: reassign_task
  endpoint:
    path: /task/{taskId}/reassign
    method: PUT
- name: delegate_task
  endpoint:
    path: /task/{taskId}/delegate
    method: PUT
- name: workflow_model
  endpoint:
    path: /workflowModel/{modelName}
    method: GET
- name: workflow_model_graph
  endpoint:
    path: /workflowModel/{modelName}/graph
    method: GET
- name: workflow_models
  endpoint:
    path: /workflowModel
    method: GET
- name: batch_upload
  endpoint:
    path: /api/v1/upload/new/{handler}
    method: POST
    data_selector: ''
    params: {}
- name: upload_file
  endpoint:
    path: /api/v1/upload/{batchId}/{fileIdx}
    method: POST
    data_selector: ''
    params: {}
- name: get_batch_info
  endpoint:
    path: /api/v1/upload/{batchId}
    method: GET
    data_selector: ''
    params: {}
- name: delete_batch
  endpoint:
    path: /api/v1/upload/{batchId}
    method: DELETE
    data_selector: ''
    params: {}
- name: oauth2_provider
  endpoint:
    path: /oauth2/provider
    method: GET
- name: oauth2_client
  endpoint:
    path: /oauth2/client
    method: GET
- name: oauth2_token
  endpoint:
    path: /oauth2/token
    method: GET
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: Blob.Attach
  endpoint:
    path: /Blob.Attach
    method: POST
- name: Document.Fetch
  endpoint:
    path: /Document.Fetch
    method: POST
- name: workflow
  endpoint:
    path: /workflow/instances
    method: GET
    data_selector: records
- name: query
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: results
    params:
      query: SELECT * FROM Document
      pageSize: 0
      currentPageIndex: 0
      maxResults: 200
- name: query_nxql
  endpoint:
    path: /api/v1/query/NXQL
    method: GET
    data_selector: results
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: task
  endpoint:
    path: /nuxeo/site/api/v1/task
    method: GET
    data_selector: task
    params: {}
- name: workflow
  endpoint:
    path: /nuxeo/site/api/v1/workflow
    method: POST
    data_selector: workflow
    params: {}
- name: task
  endpoint:
    path: /task/{id}/validate
    method: PUT
    data_selector: variables
    params: {}
- name: task
  endpoint:
    path: /task/{id}/reject
    method: PUT
    data_selector: variables
    params: {}
- name: document
  endpoint:
    path: /id/{id}
    method: GET
    data_selector: entity-type
    params: {}
- name: workspaces
  endpoint:
    path: /path/default-domain/workspaces
    method: GET
    data_selector: entity-type
    params: {}
- name: runnableWorkflows
  endpoint:
    path: /id/4246ca87-c076-4bf4-b62b-0bab9dd21102
    method: GET
    data_selector: contextParameters.runnableWorkflows
- name: pendingTasks
  endpoint:
    path: /id/4246ca87-c076-4bf4-b62b-0bab9dd21102
    method: GET
    data_selector: contextParameters.pendingTasks
- name: '@acl'
  endpoint:
    path: /id/{docId}/@acl
    method: GET
- name: '@annotation'
  endpoint:
    path: /path/{pathOfTheDoc}/@annotation
    method: GET
- name: '@audit'
  endpoint:
    path: /id/{docId}/@audit
    method: GET
- name: '@blob'
  endpoint:
    path: /id/{docId}/@blob/{xpath}
    method: GET
- name: '@children'
  endpoint:
    path: /id/{docId}/@children
    method: GET
    params:
      page: 0
      pageSize: 50
      maxResult: nolimit
- name: '@comment'
  endpoint:
    path: /id/{docId}/@comment
    method: GET
- name: '@convert'
  endpoint:
    path: /id/{docId}/@convert
    method: GET
- name: '@emptyWithDefault'
  endpoint:
    path: /id/{docId}/@emptyWithDefault
    method: GET
- name: '@pp'
  endpoint:
    path: /id/{docId}/@pp/{pageProviderName}
    method: GET
- name: '@rendition'
  endpoint:
    path: /id/{docId}/@rendition/{renditionName}
    method: GET
- name: '@search'
  endpoint:
    path: /path/{docId}/@search
    method: GET
    params:
      orderBy: dc:title
      page: 0
      pageSize: 50
      maxResult: nolimit
- name: '@task'
  endpoint:
    path: /id/{docId}/@task
    method: GET
- name: '@workflow'
  endpoint:
    path: /id/{docId}/@workflow
    method: GET
- name: '@users'
  endpoint:
    path: /group/{groupId}/@users
    method: GET
- name: '@groups'
  endpoint:
    path: /group/{groupId}/@groups
    method: GET
- name: '@bo'
  endpoint:
    path: /id/{docId}/@bo/{documentAdapterName}
    method: GET
- name: '@op'
  endpoint:
    path: /id/{docId}/@op/{OperationName}
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: default_repository
  endpoint:
    path: /nuxeo/json/cmis/default/
    method: GET
    data_selector: default
    params: {}
- name: query
  endpoint:
    path: /nuxeo/json/cmis/default/query
    method: GET
    data_selector: results
    params:
      searchAllVersions: 'true'
- name: foobar
  endpoint:
    path: /nuxeo/.*
    method: OPTIONS
    data_selector: default response
    params: {}
- name: fooly
  endpoint:
    path: /fooly/site/.*
    method: OPTIONS
    data_selector: fooly contribution
    params: {}
- name: document
  endpoint:
    path: /nuxeo/site/api/v1/path/to/my/document
    method: GET
    params:
      enrichers.document: breadcrumb
- name: ProductJsonWriter
  endpoint:
    path: /marshallers/ProductJsonWriter
    method: GET
    data_selector: records
- name: ProductJsonReader
  endpoint:
    path: /marshallers/ProductJsonReader
    method: GET
    data_selector: records
- name: ProductListJsonWriter
  endpoint:
    path: /marshallers/ProductListJsonWriter
    method: GET
    data_selector: records
- name: ProductListJsonReader
  endpoint:
    path: /marshallers/ProductListJsonReader
    method: GET
    data_selector: records
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: batch_upload
  endpoint:
    path: /api/v1/upload/
    method: POST
    data_selector: batchId
- name: upload_file_one_go
  endpoint:
    path: /api/v1/upload/<myBatchId>/0
    method: POST
    data_selector: created
    params: {}
- name: upload_file_chunks
  endpoint:
    path: /api/v1/upload/<myBatchId>/0
    method: POST
    data_selector: created
    params: {}
- name: verify_batch_file
  endpoint:
    path: /api/v1/upload/<myBatchId>
    method: GET
    data_selector: files
    params: {}
- name: resume_interrupted_upload
  endpoint:
    path: /api/upload/<myBatchId>/0
    method: GET
    data_selector: status
    params: {}
- name: directory
  endpoint:
    path: /nuxeo/api/v1/directory
    method: GET
    data_selector: directory
    params: {}
- name: workflow
  endpoint:
    path: /nuxeo/api/v1/workflow
    method: GET
    data_selector: workflow
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: userDirectory
  endpoint:
    path: /nxserver/config/default-ldap-users-directory-config.xml
    method: GET
    data_selector: users
    params: {}
- name: groupDirectory
  endpoint:
    path: /nxserver/config/default-ldap-users-directory-config.xml
    method: GET
    data_selector: groups
    params: {}
- name: oauth2Clients
  endpoint:
    path: /nuxeo/api/v1/directory/oauth2Clients
    method: POST
    data_selector: entity-type
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: Nuxeo
  endpoint:
    path: /nuxeo/atom/cmis
    method: GET
- name: documents
  endpoint:
    path: /nuxeo/api/v1/documents
    method: GET
    data_selector: entries
- name: files
  endpoint:
    path: /nuxeo/api/v1/files
    method: GET
    data_selector: entries
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
    params: {}
- name: Workflow
  endpoint:
    path: /nxdoc/how-to-assign-a-task-to-the-user-manager/
    method: GET
- name: ldapUserDirectory
  endpoint:
    path: dc=example,dc=com
    method: GET
    data_selector: entries
    params:
      searchBaseDn: dc=example,dc=com
      searchClass: person
      searchScope: subtree
      querySizeLimit: 200
      queryTimeLimit: 0
- name: ldapGroupDirectory
  endpoint:
    path: dc=example,dc=com
    method: GET
    data_selector: entries
    params:
      searchBaseDn: dc=example,dc=com
      searchFilter: (|(objectClass=groupOfUniqueNames)(objectClass=groupOfURLs))
      searchScope: subtree
      querySizeLimit: 200
      queryTimeLimit: 0
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: document
  endpoint:
    path: /api/v1/path/to/document
    method: GET
    data_selector: entries
- name: document
  endpoint:
    path: /nuxeo/api/v1/documents
    method: GET
    data_selector: entries
- name: Document
  endpoint:
    path: /nuxeo/api/v1/documents
    method: GET
    data_selector: entries
- name: Schema
  endpoint:
    path: /nuxeo/api/v1/schemas
    method: GET
    data_selector: schemas
- name: DocumentType
  endpoint:
    path: /nuxeo/api/v1/documentTypes
    method: GET
    data_selector: types
- name: DocumentValidationService
  endpoint:
    path: /nuxeo/api/v1/document/validation
    method: POST
    data_selector: validationResults
    params: {}
- name: document
  endpoint:
    path: /nuxeo/api/v1/documents
    method: GET
    data_selector: entries
- name: versioning_policy
  endpoint:
    path: /nuxeo/api/v1/versioning/policies
    method: GET
    data_selector: policies
    params: {}
- name: versioning_filter
  endpoint:
    path: /nuxeo/api/v1/versioning/filters
    method: GET
    data_selector: filters
    params: {}
- name: Audio
  endpoint:
    path: /nxdoc/available-facets/audio
    method: GET
    data_selector: facets
    params: {}
- name: BigFolder
  endpoint:
    path: /nxdoc/available-facets/bigfolder
    method: GET
    data_selector: facets
    params: {}
- name: Downloadable
  endpoint:
    path: /nxdoc/available-facets/downloadable
    method: GET
    data_selector: facets
    params: {}
- name: FacetedSearch
  endpoint:
    path: /nxdoc/available-facets/facetedsearch
    method: GET
    data_selector: facets
    params: {}
- name: Folderish
  endpoint:
    path: /nxdoc/available-facets/folderish
    method: GET
    data_selector: facets
    params: {}
- name: HasRelatedText
  endpoint:
    path: /nxdoc/available-facets/hasrelatedtext
    method: GET
    data_selector: facets
    params: {}
- name: HasStoryboard
  endpoint:
    path: /nxdoc/available-facets/hasstoryboard
    method: GET
    data_selector: facets
    params: {}
- name: HasVideoPreview
  endpoint:
    path: /nxdoc/available-facets/hasvideopreview
    method: GET
    data_selector: facets
    params: {}
- name: HiddenInCreation
  endpoint:
    path: /nxdoc/available-facets/hiddenincreation
    method: GET
    data_selector: facets
    params: {}
- name: HiddenInNavigation
  endpoint:
    path: /nxdoc/available-facets/hiddeninnavigation
    method: GET
    data_selector: facets
    params: {}
- name: Immutable
  endpoint:
    path: /nxdoc/available-facets/immutable
    method: GET
    data_selector: facets
    params: {}
- name: MultiViewPicture
  endpoint:
    path: /nxdoc/available-facets/multiviewpicture
    method: GET
    data_selector: facets
    params: {}
- name: NotFulltextIndexable
  endpoint:
    path: /nxdoc/available-facets/notfulltextindexable
    method: GET
    data_selector: facets
    params: {}
- name: NXTag
  endpoint:
    path: /nxdoc/available-facets/nxtag
    method: GET
    data_selector: facets
    params: {}
- name: Orderable
  endpoint:
    path: /nxdoc/available-facets/orderable
    method: GET
    data_selector: facets
    params: {}
- name: Picture
  endpoint:
    path: /nxdoc/available-facets/picture
    method: GET
    data_selector: facets
    params: {}
- name: Publishable
  endpoint:
    path: /nxdoc/available-facets/publishable
    method: GET
    data_selector: facets
    params: {}
- name: SystemDocument
  endpoint:
    path: /nxdoc/available-facets/systemdocument
    method: GET
    data_selector: facets
    params: {}
- name: Versionable
  endpoint:
    path: /nxdoc/available-facets/versionable
    method: GET
    data_selector: facets
    params: {}
- name: Video
  endpoint:
    path: /nxdoc/available-facets/video
    method: GET
    data_selector: facets
    params: {}
- name: Task
  endpoint:
    path: /nxdoc/available-facets/task
    method: GET
    data_selector: facets
    params: {}
- name: AuditReader
  endpoint:
    path: /nuxeo/site/distribution/latest/viewService/org.nuxeo.ecm.platform.audit.api.AuditReader
    method: GET
- name: AuditLogger
  endpoint:
    path: /nuxeo/site/distribution/latest/viewService/org.nuxeo.ecm.platform.audit.api.AuditLogger
    method: GET
- name: AuditAdmin
  endpoint:
    path: /nuxeo/site/distribution/latest/viewService/org.nuxeo.ecm.platform.audit.api.AuditAdmin
    method: GET
- name: document
  endpoint:
    path: /nuxeo/api/v1/documents
    method: GET
    data_selector: entries
    params: {}
- name: vocabulary
  endpoint:
    path: /vocabularies
    method: GET
    data_selector: entries
- name: userDirectory
  endpoint:
    path: /userDirectory
    method: GET
    data_selector: entries
- name: mymulti
  endpoint:
    path: /directories/mymulti
    method: GET
    data_selector: sources
    params: {}
- name: sourceA
  endpoint:
    path: /directories/sourceA
    method: GET
    data_selector: subDirectories
    params: {}
- name: sourceB
  endpoint:
    path: /directories/sourceB
    method: GET
    data_selector: subDirectories
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
    params: {}
- name: directory_load
  endpoint:
    path: /Directory.LoadFromCSV
    method: POST
    data_selector: response
    params:
      directoryName: DIRECTORY_NAME
      dataLoadingPolicy: skip_duplicate
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: document
  endpoint:
    path: /document
    method: GET
    data_selector: records
    params:
      query: SELECT * FROM Document
      language: NXQL
- name: Audio
  endpoint:
    path: /nxdoc/digital-asset-management-dam/
    method: GET
    data_selector: Audio
    params: {}
- name: Collection
  endpoint:
    path: /nxdoc/digital-asset-management-dam/
    method: GET
    data_selector: Collection
    params: {}
- name: File
  endpoint:
    path: /nxdoc/digital-asset-management-dam/
    method: GET
    data_selector: File
    params: {}
- name: Video
  endpoint:
    path: /nxdoc/digital-asset-management-dam/
    method: GET
    data_selector: Video
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
    params: {}
- name: Document.Trash
  endpoint:
    path: /Document.Trash
    method: POST
    data_selector: properties
    params: {}
- name: Document.Untrash
  endpoint:
    path: /Document.Untrash
    method: POST
    data_selector: properties
    params: {}
- name: Blob Provider
  endpoint:
    path: /nxdoc/file-storage/
    method: GET
    data_selector: resources
    params: {}
- name: Encrypted Blob Provider
  endpoint:
    path: /nxdoc/implementing-encryption/
    method: GET
    data_selector: resources
    params: {}
- name: External File System Blob Provider
  endpoint:
    path: /nxdoc/file-storage/#external-file-system
    method: GET
    data_selector: resources
    params: {}
- name: hierarchy
  endpoint:
    path: /nxdoc/vcs-tables/hierarchy
    method: GET
    data_selector: records
- name: relation
  endpoint:
    path: /nxdoc/vcs-tables/relation
    method: GET
    data_selector: records
- name: versions
  endpoint:
    path: /nxdoc/vcs-tables/versions
    method: GET
    data_selector: records
- name: locks
  endpoint:
    path: /nxdoc/vcs-tables/locks
    method: GET
    data_selector: records
- name: acls
  endpoint:
    path: /nxdoc/vcs-tables/acls
    method: GET
    data_selector: records
- name: misc
  endpoint:
    path: /nxdoc/vcs-tables/misc
    method: GET
    data_selector: records
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: nuxeo_document
  endpoint:
    path: /nuxeo/api/v1/documents
    method: GET
    data_selector: entries
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: search
  endpoint:
    path: /search/lang/NXQL/execute
    method: GET
    data_selector: results
    params:
      query: select * from Document
- name: pageProvider
  endpoint:
    path: /automation/Repository.PageProvider
    method: POST
    data_selector: results
    params:
      providerName: default_document_suggestion
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
    params: {}
- name: search
  endpoint:
    path: /api/v1/search
    method: POST
    data_selector: results
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
    params: {}
- name: TREE_CHILDREN_PP
  endpoint:
    path: /path/to/TREE_CHILDREN_PP
    method: GET
    data_selector: documents
    params: {}
- name: CUSTOM_PAGE_PROVIDER
  endpoint:
    path: /path/to/CUSTOM_PAGE_PROVIDER
    method: GET
    data_selector: documents
    params: {}
- name: searchWithInOperatorAndQueryParams
  endpoint:
    path: /path/to/searchWithInOperatorAndQueryParams
    method: GET
    data_selector: documents
    params: {}
- name: testPP
  endpoint:
    path: /path/to/testPP
    method: GET
    data_selector: documents
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: search
  endpoint:
    path: /search/pp/myPageProvider/execute
    method: GET
    data_selector: contextParameters.highlight
    params:
      ecm_fulltext: content
      highlight: dc:description,ecm:binarytext
      enrichers.document: highlight
- name: document
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: repository_index
  endpoint:
    path: /nuxeo/_search
    method: GET
    data_selector: query
- name: audit_index
  endpoint:
    path: /audit/_search
    method: GET
    data_selector: query
- name: Nuxeo Studio Configuration
  endpoint:
    path: /nxdoc/nuxeo-studio-configuration
    method: GET
    data_selector: configuration
    params: {}
- name: document
  endpoint:
    path: /document
    method: GET
    data_selector: records
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: fuzzy_hint
  endpoint:
    path: /org.nuxeo.ecm.core.search.client.opensearch1.hint.contrib
    method: POST
    data_selector: hint
    params: {}
- name: mydocumenttype
  endpoint:
    path: /services/data/v2025/sobjects/mydocumenttype
    method: GET
    data_selector: records
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: contract
  endpoint:
    path: /services/data/vXX.X/sobjects/Contract
    method: GET
    data_selector: records
    params: {}
- name: automation_chain
  endpoint:
    path: /nxdoc/automation-chain/
    method: GET
    data_selector: records
- name: workflow
  endpoint:
    path: /nxdoc/workflow/
    method: GET
    data_selector: records
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: Edit Permission Override
  endpoint:
    path: /nxdoc/how-to-grant-the-edit-permission-without-the-remove-permission/
    method: POST
    data_selector: permissions
    params: {}
- name: ReadWriteAndRemove Permission
  endpoint:
    path: /nxdoc/how-to-grant-the-edit-permission-without-the-remove-permission/
    method: POST
    data_selector: permissions
    params: {}
- name: document
  endpoint:
    path: /nuxeo/api/v1/documents
    method: GET
    data_selector: entries
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: scheduler_event
  endpoint:
    path: /nuxeo/api/v1/scheduler
    method: POST
    data_selector: events
    params: {}
- name: stream_audit_writer
  endpoint:
    path: /nuxeo/stream/audit
    method: GET
    data_selector: audit_log
    params:
      enabled: 'true'
      log_config: audit
      batch_size: 25
      batch_threshold_ms: 500
- name: documents
  endpoint:
    path: /nuxeo/api/v1/documents
    method: GET
    data_selector: results
- name: logConfig
  endpoint:
    path: /nxdoc/nuxeo-runtime-stream
    method: GET
    data_selector: logConfig
    params: {}
- name: streamProcessor
  endpoint:
    path: /nxdoc/nuxeo-runtime-stream
    method: GET
    data_selector: streamProcessor
    params: {}
- name: automation_chain
  endpoint:
    path: /nxdoc/automation-chain/
    method: GET
- name: Work
  endpoint:
    path: /api/work
    method: POST
    data_selector: workInstances
    params: {}
- name: WorkQueue
  endpoint:
    path: /api/work/queues
    method: GET
    data_selector: queues
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
- name: bulk_command
  endpoint:
    path: /api/v1/search/bulk/{actionId}
    method: POST
    data_selector: BulkStatus
    params: {}
- name: bulk_status
  endpoint:
    path: /api/v1/bulk/{commandId}
    method: GET
    data_selector: BulkStatus
    params: {}
- name: abort_bulk_execution
  endpoint:
    path: /api/v1/bulk/{commandId}/abort
    method: PUT
    data_selector: BulkStatus
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: set_properties
  endpoint:
    path: /search/bulk/setProperties
    method: POST
    data_selector: commandId
    params:
      query: SELECT * FROM Document
- name: csv_export
  endpoint:
    path: /search/bulk/csvExport
    method: POST
    data_selector: commandId
    params:
      query: SELECT * FROM Document
- name: automation
  endpoint:
    path: /search/bulk/automation
    method: POST
    data_selector: commandId
    params:
      query: SELECT * FROM Document
- name: mail_template_creation
  endpoint:
    path: /nxdoc/how-to-customize-email-templates/
    method: GET
    data_selector: templates
    params: {}
- name: default_alert_emails
  endpoint:
    path: /nxdoc/how-to-customize-email-templates/
    method: GET
    data_selector: default_alerts
    params: {}
- name: document_links_jsf_ui
  endpoint:
    path: /nxdoc/how-to-customize-email-templates/
    method: GET
    data_selector: document_links
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
    params:
      incremental: updated_at
- name: CreateDocument
  endpoint:
    path: /operations/CreateDocument
    method: POST
    data_selector: result
    params: {}
- name: LogOperation
  endpoint:
    path: /operations/Log
    method: POST
    data_selector: result
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
    params: {}
- name: Document
  endpoint:
    path: /nxdoc/use-of-mvel-in-automation-chains/
    method: GET
    data_selector: records
    params: {}
- name: Document Management
  endpoint:
    path: /default-domain/workspaces
    method: COPY
    data_selector: target
    params:
      type: File
      name: node-name-of-my-document
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: entries
    params: {}
- name: File
  endpoint:
    path: /nuxeo/api/v1/path/default-domain
    method: POST
    data_selector: entity-type
    params: {}
- name: Document
  endpoint:
    path: /nuxeo/api/v1/path/default-domain/newDoc/@op/Document.Lock
    method: POST
    data_selector: params
    params: {}
- name: Workspace
  endpoint:
    path: /nuxeo/api/v1/automation/Document.Query
    method: POST
    data_selector: params
    params: {}
- name: FileManager.ImportInSeam
  endpoint:
    path: /nuxeo/site/automation/doc/?id=FileManager.ImportInSeam
    method: GET
    data_selector: parameters
    params: {}
- name: document
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
- name: QueryAndFetch
  endpoint:
    path: /nuxeo/site/automation
    method: POST
    data_selector: response
    params:
      query: select ecm:uuid, dc:title, common:icon from Document
- name: automation_chain
  endpoint:
    path: /nxdoc/automation-chain/
    method: GET
    data_selector: records
    params: {}
- name: getAllRelations
  endpoint:
    path: /automation/Document.GetLinkedDocuments
    method: GET
    data_selector: document
- name: addRelation
  endpoint:
    path: /automation/Document.AddRelation
    method: POST
    data_selector: relation
- name: deleteRelation
  endpoint:
    path: /automation/Relations.DeleteRelation
    method: DELETE
    data_selector: relation
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- 'Nuxeo Platform supports a large number of file formats: Office documents, pictures,
  videos etc.'
- Picture conversions are used to fill the picture views (stored in the picture:views
  field of a document having the Picture facet).
- Since Nuxeo 10.10 (LTS 2019), it is required to specify the source mime-type(s)
  the converter can handle.
- You should have access to our private Docker registry.
- To have different containers, change the name of your container.
- The addon Getting started with the Nuxeo Platform will add some business logic and
  documents to your Nuxeo Platform instance.
- Basic authentication is used.
- You can download the file if you log in as an Administrator or a member of the managers
  group (e.g. by using sconnor / sconnor), otherwise download is forbidden.
- The contract's file stored on the Nuxeo server remains in its initial format. The
  rendition is applied on the fly so that only the downloaded file is converted.
- Pictures and video renditions are stored in the document directly in order to boost
  performances.
- 'Validating the contract triggered some logic automatically: the contract''s expiration
  date has been set to one year from now, the contract''s state is now running.'
- Automation chains allow you to optimize the number of calls needed to execute business
  logic while maintaining data integrity.
- Use your Nuxeo Online Services credentials to register your instance.
- Administrator access is required to use hot reload.
- Uses OAuth2 with refresh token — requires setup of connected app in Nuxeo
- Some objects may return nulls in deeply nested fields
- Get a Nuxeo Online Services account.
- Make sure you have a valid Nuxeo Connect token to register your instance.
- Some objects like Contact may return nulls in deeply nested fields
- Requires setup of connected app in Nuxeo
- Some endpoints may require specific permissions.
- The 'arm64' variant doesn't include the LibreOffice converter.
- The 'arm64' variant of the Nuxeo 2025 Docker image is not production-ready.
- Uses OAuth2 with refresh token.
- The `arm64` variant doesn't include the LibreOffice converter.
- The `arm64` variant of the Nuxeo 2025 Docker image is not production-ready.
- Make sure your system time zone is UTC.
- Do not use the Windows built-in ZIP functionality to unzip the ZIP Distribution.
- Starting the Nuxeo server takes between 30 sec and several minutes, depending on
  your hardware.
- 'Enable the autostart creating the links in the rcX.d directories running the command
  (as root):'
- $ update-rc.d nuxeo defaults
- 'If you want to remove the automatic startup use the command (as root):'
- $ update-rc.d -f nuxeo remove
- Requires setup of connected app in api
- Copy the shell script to /etc/init.d/nuxeo, replacing paths to match your installation.
- 'Enable the autostart creating the links in the rcX.d directories running the command
  (as root): $ update-rc.d nuxeo defaults'
- Restart the machine and verify that the Nuxeo Platform is started automatically
  looking at the log file.
- 'If you want to remove the automatic startup use the command (as root): $ update-rc.d
  -f nuxeo remove'
- Copy the systemd script to /etc/systemd/system/nuxeo.service, replacing paths to
  match your installation.
- Enable the autostart creating the links in the rcX.d directories running the command
  (as root).
- Nuxeo must be installed at the root of the volume (e.g., C:\nuxeo\).
- Network directories are usually not available when a service is executing.
- 'Once a batch is installed as a service, it cannot be changed: you must first uninstall
  it, then edit and reinstall in order to change its content.'
- Nuxeo installation path contains no space (typically NOT C:\Program Files\nuxeo).
- Deprecated Nuxeo scripts managing install as a Windows service were previously used.
- Other implementations were available from JBoss.
- They were licensed under LGPL and so redistributable but there are not fully satisfying.
- Default Docker image is hosted in a private Docker registry. Access requires a support
  ticket or contact with Nuxeo administrator.
- Requires a connected app setup for OAuth2.
- Two load balancers are necessary with sticky sessions handling incoming requests.
- The Nuxeo Platform requires all calls to be authenticated.
- The complete Nuxeo instance hierarchy must not be shared between all instances.
- The temporary directory configured through nuxeo.tmp.dir must not be shared by all
  instances.
- Kafka is the single point of failure. In case of failure, scheduled jobs might be
  lost.
- To solve this issue, several Kafka nodes are needed, as well as Zookeeper.
- At this stage, this architecture is fault tolerant and in high availability, and
  the architecture should be tuned depending on the kind of requests and loads.
- Nuxeo natively deduplicates files attached to your documents, which makes the necessary
  disk space to operate your applications lower.
- The partitioning of the data impacts various aspects including MongoDB cluster usage
  and indexing.
- You can use multiple options at once but only one command.
- Commands may need to be prefixed with `--` to separate them from options when confusion
  arises.
- Tokens need to be used as a replacement for your password in Nuxeo Online Services
  APIs and our command line tools, like `nuxeoctl`.
- Nuxeo API requires OAuth2 for authentication.
- Nuxeo is pluggable so that it can be adapted to different deployment environments
  and use cases.
- Some endpoints may have rate limits
- Nuxeo Platform reads configuration properties in the nuxeo.conf file.
- For production, move the configuration file outside the Nuxeo home directory.
- Nuxeo requires at least 1024 MB of JVM heap size.
- When true, complex properties are exposed as JSON-encoded strings.
- When true, enables adding negative ACL (deny permissions) in the UI, otherwise only
  grant permissions are available.
- To send the CMISQL queries to Elasticsearch, set to true.
- This parameter can be used to replace the nuxeo-virtual-host request header (usually
  when using HTTPS) when it is not possible to set it at the reverse-proxy level.
- Comma separated list of hosts allowed in the host, the x-forwarded-host or the nuxeo-virtual-host
  header.
- When LDAP is enabled and this parameter is set to true, allows anonymous login with
  Guest user.
- When LDAP is enabled and this parameter is set to true, declares an emergency user
  to connect to Nuxeo in case of LDAP issues.
- When set to false allows to disable the picture migration that is run on startup
  and that can be slow on big volume.
- Whether or not the cache is enabled.
- The maximum size of DBS cache
- The expire after write value in minutes.
- Switch the default Stream configuration to Apache Kafka.
- Property to set the oauth2 token expiration duration. Default is 60 minutes.
- Property to enable the expired OAuth2 tokens garbage collection.
- Property to define frequency of the expired OAuth2 tokens garbage collection.
- Property to specify the bucket prefix of the blob provider backing the transient
  store used by the S3 batch handler.
- Property to configure the alias name for the certificate used in the HTTPS configuration.
- Property to use a MongoDB optimized implementation of the transient store, replacing
  the KeyValueTransientStore implementation.
- Property to configure the maximum number of retries for recompute thumbnails bulk
  actions.
- Property to enable aceinfo directory garbage collection when a document is deleted.
- Property to enable immediate document's blobs garbage collection.
- 'Default Nuxeo templates values shouldn''t be directly edited: custom templates
  should be created if you need to update default values.'
- For production deployment, the user customizations should be stored outside the
  server filesystem hierarchy.
- 'When you add a document in the repository, VCS computes the digest of the blob:
  it is this digest which is used as the filename of the document stored in the filesystem.'
- Blobs are not deleted as soon as the document is removed from the repository.
- The cleanup should be done at the Backend level (SQL or Elasticsearch).
- Make sure to stop all Nuxeo instances before proceeding.
- Immediate Garbage Collection is enabled by default.
- If a failure occurs during the migration, it will stop and the capability will not
  be acquired.
- This page refers to an old Garbage Collection implementation known to not scale
  on big repositories.
- The binary files attached to documents are not stored in the database but using
  a specialized binary store.
- Binary files are not immediately deleted when their containing document is deleted
  because the binary store uses a de-duplication strategy.
- Some objects like Document may return nulls in deeply nested fields
- Hotfixes must be installed immediately to prevent known issues.
- Installation requires server restart.
- The new nuxeo.group.administrators.members.resticted nuxeo.conf property, when set
  to true, allows to restrict the visibility of the member users, member groups and
  parent groups of an administrator group, typically the 'administrators' group.
- This property is not set by default.
- You must set the nuxeo.s3storage.crypt.keystore.legacymode configuration property
  to true when upgrading from lts-2023 to lts-2025 if you have objects encrypted client-side
  with a local keystore in v1 AWS encryption API.
- If you want to start a fresh production environment in lts-2023 with a higher level
  of security, you should set the nuxeo.s3storage.crypt.keystore.legacymode configuration
  property to false.
- The page providers have been set to use Elasticsearch by default. Make sure you
  add them to the elasticsearch.override.pageproviders nuxeo.conf property if you've
  overridden it.
- The nuxeo-functional-tests module was moved from server to ftests.
- The Nuxeo server no longer aborts old Multipart uploads. Adding a bucket lifecycle
  configuration to delete incomplete multipart uploads is highly recommended.
- Hotfixes require the server to be restarted to complete the installation.
- Unregistered instances with hotfixes will display warnings and may stop automatically.
- The nuxeo-platform-login-portal-sso module was deprecated in LTS 2025. Use OAuth
  2.0 Client Credentials flow instead.
- Hotfixes released for LTS 2025 can only be used on valid, registered Nuxeo instances.
- If you are using an unregistered LTS 2025 Nuxeo instance with hotfixes installed,
  you may encounter various behavior including the instance being stopped.
- HEAD requests on Presigned URLs are no longer supported.
- The nuxeo.group.administrators.members.resticted property, when set to true, restricts
  visibility of member users, member groups, and parent groups for non-administrator
  users.
- Requires OAuth2 setup in Nuxeo.
- Rate limits may apply on API calls.
- Nuxeo logging is compliant with common Java logging frameworks
- You can increase or decrease the logs for specific services.
- Metrics can be reported to various Monitoring systems including JMX, Graphite, Datadog,
  Prometheus, and GCP Metrics.
- Metrics can be rendered in dashboards depending on the chosen monitoring systems.
- Grafana can be used to render Graphite or Prometheus metrics.
- The Nuxeo Stacks tool provides a Grafana dashboard using a Graphite backend.
- The JSON dashboard can be found in its sources.
- 'All tracers require the activation of the metric service using: metrics.enabled=true'
- To trace specific actions, use the `traceparent` header.
- This is a very powerful way to report a performance problem because in addition
  of the profiling, the JFR file also contains a capture of the CPU activity, memory
  pressure, and thread dumps.
- Sensitive configuration data can be encrypted in nuxeo.conf.
- For best security on the sensitive configuration data, it is recommended to not
  enter the passwords in clear in the command line.
- The secret key asked above will be the keystore pass server.crypt.keystore.pass.
- The Nuxeo Platform is designed to optimize performance.
- Continuous performance testing is part of the Nuxeo quality assurance process.
- Requires configuration of OAuth2 for API access.
- Some endpoints may require additional permissions.
- Consider removing or restricting the access to the default Tomcat tools (admin and
  manager webapps).
- Clean the Server Header in Apache HTTP Server.
- Prevent 'Clickjacking'
- Allow TRACE method
- Uses OAuth2 authentication
- Allow HTTP Protocol version 1.1 only.
- Accept SSL high quality ciphers only.
- Accept strong SSL protocols only.
- Secure the cookies (when using SSL).
- Data should be stored outside the container run from the Nuxeo Docker image.
- It is recommended to move the data and log directories outside the Nuxeo tree.
- Nuxeo API requires OAuth2 for access.
- The nocanon keyword for ProxyPass is required to prevent URL canonicalization on
  Apache.
- If using HTTPS, send the Nuxeo Platform a specific header to indicate the base URL.
- Check that Windows Service Pack is up-to-date.
- If Nuxeo has a strange behavior, check the URL MAX Length parameter.
- The path property is used to specify the filesystem path at which the binaries will
  be stored.
- By default MongoDB doesn't require authentication, but you can enable the client
  access control and create a user with the dbOwner role.
- The database needs to be configured to work properly with Nuxeo.
- Using the UTF8 encoding for your database is important.
- PostgreSQL computes statistics on table content in order to plan for the best performance
  when executing queries with joins and complex filters.
- The default configuration is default_statistics_target set to the value 100, which
  can lead to not accurate enough estimates.
- We recommend a higher value like 500.
- The autovacuum is enabled by default in PostgreSQL.
- To have meaningful logs in production, we recommend certain settings.
- 'To have effective monitoring, you should install the following extensions: pg_stat_statements
  and pg_buffercache.'
- Nuxeo needs access to the information_schema.routines table to be able to determine
  if stored procedures need to be upgraded.
- MySQL by default likes to drop connections after a short idle time.
- MySQL loses connections unexpectedly, which requires configuring ;autoReconnect=true
  as a workaround.
- The Nuxeo Platform requires the configuration of DB_BLOCK_SIZE set to 8192 to make
  the Nuxeo Platform properly work.
- Your database must be configured with NLS_CHARACTERSET set to AL32UTF8.
- We have observed an incorrect behavior (in particular with full-text search) if
  the SQL Server master database is not configured with a case-insensitive collation
  (a collation name with "CI").
- To work properly Nuxeo needs to have some columns with a case-sensitive collation.
- H2 is first and foremost designed to be an embedded database. We use it in Nuxeo
  to provide an easy-to-use downloadable demo platform, but it should never be used
  in production.
- It has very bad concurrent behavior (writing a row locks the whole table, therefore
  deadlocks are much more frequent).
- Its full-text embedding (using Apache Lucene) is not really transactional.
- It has a poor query optimizer.
- The embedded mode is only for testing purposes and should not be used in production.
- Ensure that Elasticsearch is secured and not open to the public.
- OAuth2 is used for authentication.
- Do not run OpenSearch open to the public.
- Do not run OpenSearch as root.
- Embedded mode is only for testing purposes and should not be used in production.
- Elasticsearch 8 security is enabled by default.
- The default In-Memory implementation should NOT be used for production
- Nuxeo will always set enable.auto.commit to false and auto.offset.reset to earliest
- Requires setup of OAuth2 client in Nuxeo
- Some documents may have varying schemas
- The default In-Memory implementation should NOT be used for production.
- Messages in the PubSub topic start consuming from the end and do not require committing
  their position.
- It is recommended to reduce the topic retention for the PubSub topic to a few hours.
- Each repository must have its own different binary store path.
- It is CRITICAL to keep the binaries separated between each repository if you want
  to properly delete orphaned binaries.
- Before Nuxeo 10.3, the encryption used was based on AES/CBC/PKCS5Padding which has
  been found to be insecure (susceptible to padding oracle attacks).
- Starting with Nuxeo 10.3, a more secure encryption algorithm, AES/GCM/NoPadding,
  is used.
- It is not recommended that you modify this default Trust Store, given that it is
  shipped with your JVM and will be updated with it.
- For some Nuxeo services, it's possible to configure individually a Trust Store and
  Key Store without touching the global JVM Trust Store and Key Store.
- Default Nuxeo Platform email configuration is filled in with neutral values that
  you need to edit.
- Uses default storage engine for Nuxeo documents.
- Clustering enabled with unique node id.
- For Nuxeo 6.0-HF24+ and Nuxeo 7.10-HF01+ the default is compat.
- For Nuxeo 8.1 and above the default is execute.
- Firewalls don't like inactive connections that stay open.
- To prevent persistent connections from being dropped, activate TCP keep alive.
- ReadACL ON is the default choice because in most cases people would prefer to promote
  better search performances rather that document update performances.
- 'A technical consequence of this trade-off is a case where the Nuxeo Platform may
  encounter problems: setting new permission on a big folder (like a domain) may result
  in a timeout when saving the changes in the Permissions tab.'
- By default idle (unused) connections are maintained 5 minutes in the pool.
- You may need to access to multiple databases and then require to run the connection
  in XA mode.
- The Shell is available as an applet in the Admin Center, in the 'Monitoring' tab.
- When launching the Shell the local namespace is automatically activated.
- When connecting to a remote server the Shell will automatically switch to remote
  namespace.
- OAuth2 is supported.
- The script must return a result string.
- Scripting feature is available only when logged in as Administrator.
- To force a namespace to be activated when the shell starts you can use the shell
  Java System Property when launching the shell application.
- If your namespace need to execute some code when the shell is launched and your
  namespace is activated, then you should override the method CommandRegistry.autorun(Shell
  shell) and provide your logic there.
- Edit the configuration file nuxeo.conf to change the property org.nuxeo.ecm.contextPath.
- Rename the file $NUXEO_HOME/templates/common-base/conf/Catalina/localhost/nuxeo.xml.nxftl
  into $NUXEO_HOME/templates/common-base/conf/Catalina/localhost/myapp.xml.nxftl.
- Although major changes are explicitly documented, it is recommended to look at the
  upgrade notes before upgrading. Upgrade notes list changes that may affect existing
  configuration or features after upgrade (changes on parameters, API, default behavior,
  etc.).
- Upgrading is usually a simple and painless process. Using the template system also
  allows to easily transpose your configuration from one version to another.
- AWS Java SDK was bumped to version 2.
- The old and deprecated org.nuxeo.ecm.core.storage.sql.S3BinaryManager implementation
  has been deleted and is no longer part of the distribution.
- Upgrade Nuxeo to LTS 2025, then init each of your custom sequences with the Management
  REST API.
- The ElasticSearchService has been removed, representing a breaking change.
- By default, an index named 'repository' is provided.
- An 'enhanced' index will serve as the default search index for the default repository
  when a Search Client package is installed.
- Requires OAuth2 configuration for API access.
- Uses OAuth2 with refresh token — requires setup of connected app in Nuxeo.
- Nuxeo Server is now provided with an in memory implementation for Audit storage,
  this default implementation is for testing purpose only which means that you need
  to explicitly install a Marketplace Package to store the audit in MongoDB, OpenSearch
  or a SQL database.
- The Nuxeo Audit Service has been heavily reworked for reliability, security and
  future improvements.
- You need to explicitly install a Marketplace Package to store the audit in MongoDB,
  OpenSearch or a SQL database.
- Uses Jackson BOM for Jackson Dependencies — ease Jackson security upgrades.
- Redis support in Nuxeo has been removed.
- Chronicle Queue is no longer available as log implementation.
- This library upgrade is not backward compatible, so you need to upgrade the code
  referencing the library.
- New Endpoint to Get All Comments for 50+ Annotations Documents
- Workflow model import now uses a cluster-wide lock.
- A warning is logged when assigning an unauthorized workflow global variable instead
  of throwing an exception.
- Picture views are now processed in a transaction with a dedicated timeout.
- The maximum duration to produce the picture views is now limited by default to 5min.
- The maximum duration to convert a video is now limited by default to 10min.
- Elasticsearch client library version is now 7.9.2.
- A longer Elastic timeout is used for write operation.
- If you encounter indexing errors because of negative startOffset, your mapping needs
  to be updated.
- Don't Use the TransportClient.
- A dedicated Work queue is used for ACL Propagation.
- The option to configure the metrics poll interval for Datadog is now metrics.datadog.pollInterval
  and default is 60.
- Elasticsearch >= 6.x is required.
- Kafka >= 2.0.0 is required.
- REST API now produces and consumes only application/json as content type
- Kafka >= 1.1.0 is required.
- In addition to the default binary store used for the document repository, Nuxeo
  now uses additional binary stores to store transient binaries.
- Activating Redis is now done through a template.
- The way we store contextual information for the Bulk Action Framework (BAF) has
  changed.
- MySQL >= 5.6.4 is required.
- Elasticsearch >= 5.6.x is required.
- Default value for nuxeo.core.readacl.async.enabled is true
- Default value for nuxeo.core.readacl.async.threshold is 500
- If your indices have been created with LTS 2016 they are in Elasticsearch 2.x format
  and can be read by Elasticsearch 5.6.
- The repository index named `nuxeo` by default doesn't need migration because it
  will be re-indexed.
- The sequence index named `nuxeo-uidgen` cannot be migrated.
- The audit index named `nuxeo-audit` needs to be migrated.
- Stacktraces are now hidden per default in error pages. Activate the dev mode (org.nuxeo.dev=true)
  to get them back.
- Nuxeo is now sending the `X-FRAME-OPTIONS` header with `SAMEORIGIN` value.
- Only administrators can use `signPDF` and `signPDFDocument` Operations.
- 'Nuxeo Digital Signature: Only administrators can use signPDF and signPDFDocument
  Operations.'
- Negative permissions are disabled by default in Nuxeo Platform 6.0.
- If you have Java code implementing a SecurityPolicy or a VersioningService, you
  need to update your code to use getPropertyValue method.
- Java 7 Required
- Upgrade to Tomcat 7
- Derby Storage Moved to H2
- 'SQL Server: The column type for ID columns has been changed from VARCHAR to NVARCHAR,
  for efficiency reasons.'
- 'Oracle: The default path optimization has changed.'
- 'EL expressions in Action Filters: From Nuxeo Platform 5.7.3, EL expressions in
  action filters are using a more generic context.'
- 'Document Context Used in Action Filters: From Nuxeo Platform 5.8, the document
  used to evaluate action filters is the changeableDocument.'
- 'Query Models and Result Provider Farms Removal: Content views and page providers
  have been in place since 5.4.2 to replace old query models and result provider farms,
  so old classes have been removed for 5.8.'
- The default language is NXQL.
- The maximum page size is 1000.
- You do not need to be logged in to get the Automation service description.
- Requires setup of connected app in nuxeo
- The query endpoint has been deprecated in favor of the Search Resource Endpoint.
- Variables are either the ones defined on the associated node from the workflow model
  or global variables (defined at workflow level).
- In order to have more control over REST API Calls, you can use the following special
  Nuxeo HTTP headers.
- Content enrichers can be called by sending the proper header(s) in your request.
- Error handling is documented in the API documentation.
- Nuxeo Platform and Data Privacy
- The online version of API Playground connects to our https://demo.nuxeo.com instance
  by default
- Make sure you change the URL to use your server's (http://NUXEO_SERVER/nuxeo/ by
  default)
- JSON endpoint is recommended for better performance and features
- searchAllVersions=true is mandatory for retrieving all document versions
- If false, only valid and accepted CORS requests are allowed (strict CORS filtering).
- Indicates whether user credentials, such as cookies, HTTP authentication or client-side
  certificates, are supported.
- Uses OAuth2 — requires setup of connected app in Nuxeo
- The @Setup annotation is here to define our object as a marshaller.
- The mode = Instanciations.SINGLETON parameter defines that the marshaller must be
  instanciated once.
- The priority = Priorities.REFERENCE parameter defines it as the default one for
  the Product class.
- The max depth is controlled by the depth parameter in the rendering context. The
  default value for depth is 'children'.
- Upload in chunks allows resuming interrupted uploads.
- The batch is cleared after first use unless X-Batch-No-Drop is set to true.
- Uses Nuxeo CLI for setting up Angular applications
- The default authentication mode is through a login page.
- Anonymous user access can be configured.
- NuxeoAuthenticationFilter supports several authentication system.
- Uses OAuth2 with refresh token — requires setup of connected app in nuxeo
- If you encounter some difficulties configuring LDAP, the first step is to get more
  details about what happens.
- This method applies to multi-directories too.
- Fetching groups from LDAP is usually not very efficient.
- Active Directory users should use the aggregated global catalog port number (3268)
  to avoid referral requests.
- Your XML extension's name must end with -config.xml
- The ssoNeverRedirect parameter should be set to true if the PROXY_AUTH is used with
  REST calls, where you don't want to redirect the response.
- The timestamp is used to avoid replay attacks (the delta with the real time on the
  server cannot be more than the maxAge specified on the server).
- Ensure the getAttributeByName values are correct before deploying your configuration.
- Must ensure to have configured Nuxeo in HTTPS
- Ensure to have configured Nuxeo in HTTPS
- The client ID and secret will be different than the JWT encoded secret.
- Uses OpenID Connect as the identity layer on top of the OAuth 2.0 protocol.
- Uses OpenID Connect as identity layer on top of OAuth 2.0
- You may need to add your own mapping class.
- By default we provide two username resolvers.
- Nuxeo uses OAuth2 for authentication.
- Requires the JSF UI addon installed on your server that is deprecated since Nuxeo
  Platform LTS 2019.
- You must have configured the Kerberos setup in nuxeo.conf before installing the
  package. Otherwise package installation will fail.
- If you use your server as a Kerberos client too (e.g. it's a development machine!),
  delete the tgt with the command kdestroy.
- Ensure TOKEN_AUTH plugin is declared before CAS2_AUTH
- CAS2 and anonymous authenticators can interfere, creating redirection issues
- Uses JCIFS to handle NTLM authentication
- If you have troubles with latest version of IE on POST requests, please see JCIFS
  instructions
- A health check of the Duo service is done at server startup. If the Duo service
  is not reachable, the server won't start
- Supports OAuth2 authentication with a refresh token
- Document retrieval may require filtering based on user permissions
- Requires OAuth2 authentication setup
- 'This procedure doesn''t work with the embedded H2 database: use an external database
  (Mongo, Postgres, etc.)'
- Uses a public LDAP server for configuration
- Starting from 8.10 HF-04 you need to configure the virtual groups explicitly.
- Uses OAuth2 with refresh token — requires setup of connected app in API
- Documents in Nuxeo can hold metadata and files.
- Nuxeo uses XSD schemas to define document structure.
- Documentation states that OAuth2 is used for authentication.
- The versioning service can create and archive document versions.
- Automatic versioning can be configured through policies and filters.
- The Audit Service receives events from the Event Service.
- You have to explicitly choose a backend implementation.
- A directory is used to provide an abstraction on all referential data.
- Adapt the cache parameters if needed
- The example above is about a SQL directory
- Double quotes between elements are optional (CSV format).
- To download a file in an HTML format instead of CSV, use the .html extension in
  the filename and choose text/xml as the mimetype.
- Default localized messages may not be satisfying, especially when using patterns.
- f4bb42d8 is the MD5 hash for 'Administrator,administrators', c5ad3c99 is the MD5
  hash for 'kbauer,members'.
- A hash is used to make sure this column has a limited size.
- If you don't need the proxies you can add a AND ecm:isProxy = 0 clause to reduce
  the size of the query.
- There is a LIMIT in the queries because the Page Provider for navigation uses paging
  by default.
- The default cache implementation uses a cache per session.
- The cache is done with Java SoftReference map.
- Check that common schemas are set as prefetched
- If you don't want to match proxies in your query, add a AND ecm:isProxy = 0 clause.
- 'If you don''t use proxies at all, deactivate them at the repository level by adding
  inside the <repository> element the following: <proxies enabled="false"/>'
- if possible disable the ACL optimization, look at the perf template for more information.
- If you are doing an NXQL query that involves custom schemas, you may need to add
  custom indexes to make the request efficient.
- Try to switch all page providers to Elasticsearch.
- Use groups to manage ACLs. Adding a user to a group is free, but adding a user in
  an ACL at the document root level has a cost because optimized read ACLs need to
  be recomputed for all documents under the root.
- Disable listeners that are not used.
- Use BIGINT document identifier instead of default UID.
- Turn the Elasticsearch translog to async for all index.
- Tune the Elasticsearch settings and mappings.
- Remove the html_strip char filters if not needed.
- Remove the ecm:binarytext fulltext index if highlights are not needed.
- Disable audit log on loginSuccess.
- Increase the audit writer batch size.
- Consider disabling the OS swapping or try to lower the swappiness.
- Check the network latency between the application and the database.
- Configure ImageMagick to use a single thread.
- 'Monitor everything: JVM, GC, VCS cache hit ratio, database, system.'
- Uses a transaction model equivalent to Read Uncommitted for MongoDB and MarkLogic.
- The cache is shared between all sessions, invalidations are sent at the end of Nuxeo
  transaction and received at the begin and the end of Nuxeo transaction.
- SearchClient packages must be explicitly installed for external search engines.
- Date values are assumed to be UTC.
- MongoDB has limitations regarding query predicates.
- OpenSearch/Elasticsearch has limitations and requires proper configuration for full-text
  search and mapping.
- NXQL hints enable to use more Elasticsearch operators.
- A query term (sequence of AND-ed words without an OR) containing only negations
  will not match anything.
- Depending on the back-end database and its configuration, different word stemming
  strategies may be used.
- Phrase search using a PostgreSQL back-end database is supported and cannot use word
  stemming.
- MongoDB does not support prefix matching.
- Some API calls may require specific permissions.
- By default, full text is indexed at the database level.
- When disabling Database Full-text Search on an existing instance, you have to remove
  the trigger and index manually.
- Elasticsearch does not perform authentication or authorization.
- The passthrough works out of the box when your OpenSearch instance is embedded on
  the same JVM as your Nuxeo instance.
- The common operator can be seen as an alternative to the full-text search.
- The common operator allows searching on terms that would have been removed by the
  full-text analyzer.
- Fetch documents with a query on date parameters
- Uses OAuth2 with refresh token
- JOINs are not enabled by default and only available if nuxeo.conf property org.nuxeo.cmis.joins=true
  is set and using VCS storage backend.
- CMISQL JOINs are not supported with the DBS storage backend (MongoDB).
- Elasticsearch indexing is eventually consistent. This means that depending on your
  indexing server charge, you may have a small delay before Elasticsearch returns
  the latest content update/create/delete.
- You can only grant a temporary access to external users.
- External users have not created a user account on the application. They do not have
  login / password credentials. They can only use the link that is sent to them to
  access the application.
- External users do not benefit from the personal workspace, the Home tab and their
  features (dashboard, alerts, users / groups search, etc.).
- Security policies are implemented as classes extending SecurityPolicy.
- The class must be registered through the policies extension point.
- The Edit permission cannot be granted without the Remove permission.
- Asynchronous listeners will run as Work instances in a separated WorkManager thread
  or on a separate Nuxeo instance.
- Requires OAuth2 authentication.
- Nuxeo Integration requires setup of connected app
- When using the Scheduler Service to trigger Automation Chains, the Core Session
  cannot be retrieved.
- In cluster mode, a given schedule is triggered only on one of the nodes of the cluster.
- The Scheduler Service allows scheduling events at periodic times.
- A schedule is defined by an id, username, event, eventCategory, and cronExpression.
- Default In-Memory implementation is available for dev and test purpose but should
  NOT be used for production as it has no cluster capability and no persistence after
  restart.
- The probe failure is delayed by 36 hours to have time to apply the recovery procedure.
- This delay is necessary because most of the time the Nuxeo health check is used
  by the load balancer and we don't want to interrupt the service immediately while
  we have time to fix the problem during the retention duration without downtime or
  data loss.
- The default codec for the computation record is avro (this can be changed by configuration).
- The behavior of the Stream WorkManager is slightly different than the default WorkManager
- 'Works are immutable: they can not be used as a storage for results, the repository
  or the transient store should be used instead'
- Works cannot be listed or loaded on demand because this can not scale
- Works with the same id are executed only once, this make work idempotent for free
- At the moment the number of Running works is only an estimation, scheduled and completed
  metrics are reliable
- This requires some work and WorkManager usage adaptations, this is still a work
  in progress.
- A default In-Memory implementation is available for dev and test purpose but it
  should NOT be used for production as it has no cluster capability and no persistence
  after restart.
- This requires some work and WorkManager usage adaptations, this is still a work
  in progress
- The default codec for the computation record is avro.
- A default In-Memory implementation is available for dev and test purpose but should
  NOT be used for production.
- The behavior of the Stream WorkManager is slightly different than the default WorkManager.
- 'Works are immutable: they can not be used as a storage for results, the repository
  or the transient store should be used instead.'
- Works cannot be listed or loaded on demand because this can not scale.
- Works with the same id are executed only once, this make work idempotent for free.
- At the moment the number of Running works is only an estimation, scheduled and completed
  metrics are reliable.
- The only implementation that persists the works and is cluster-aware is the StreamWorkManager.
- Make sure to configure OAuth2 properly for authentication.
- Uses a KeyValue storage like MongoDBKeyValueStore or SQLKeyValueStore.
- Requires authentication with Administrator credentials.
- The MVEL expression language is used in automation chains.
- This contribution declares a set of execution chains to be executed after 'contributedchain'
  failure.
- Filters can be added (see next chapter).
- Rollback is set to defined if we should rollback transaction after 'contributedchain'
  failure.
- Priority can be defined to know which chain is going to take the hand on a candidates
  range. Higher priority wins.
- This action uses in background the chain FileManager.ImportInSeam.
- Automation trace mode is disabled by default (not suitable for production).
- Traces are collected and cached for one hour.
- Automation operation can be executed in local or remotely.
- The types of relationships are defined in the predicate and inverse_predicates vocabularies.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: The requested resource does not exist.'
- 'Authentication failed: Recheck Docker login credentials.'
- '401 Unauthorized: Recheck your authentication credentials'
- 'Database mutual exclusion: If mongodb.enabled=true and postgresql.enabled=true,
  an error indicates that MongoDB and PostgreSQL databases cannot be enabled at the
  same time.'
- 'Binary storage mutual exclusion: If two parameters are set to true out of these
  three: googleCloudStorage.enabled, amazonS3.enabled, persistentVolumeStorage.enabled,
  an error indicates that only one type of binary storage can be enabled among Google
  Cloud Storage, Amazon S3 and PersistentVolume.'
- '401 Unauthorized: Check your OAuth token and its scopes.'
- '1: Generic or unspecified error'
- '2: Invalid or excess argument(s)'
- '3: Unimplemented feature'
- '4: User had insufficient privilege'
- '5: Program is not installed'
- '6: Program is not configured'
- '7: Program is not running'
- '401 Unauthorized: Check your credentials.'
- '404 Not Found: The requested resource could not be found.'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '403 Forbidden: Check permission settings'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'NUXEO INSTANCE NOT REGISTERED: This Nuxeo instance is not registered. It can only
  be used for development and will be stopped if used in production.'
- 'NUXEO INSTANCE STOPPING: Stopping Nuxeo instance due to threshold exceeded (TOTAL_COMMITS
  > 100000) after failed registration checks.'
- HEAD requests on Presigned URLs are no longer supported.
- '400 Bad Request: No password provided.'
- 'ERROR [RuntimeService] NUXEO INSTANCE NOT REGISTERED: Instance is not registered.'
- 'ERROR [RuntimeService] NUXEO INSTANCE STOPPING: Instance stopped due to threshold
  exceeded.'
- '400 Bad Request: A POST request on the /nuxeo/api/v1/user endpoint now returns
  a 400 Bad Request status code if no password or a blank password is provided.'
- '429 Too Many Requests: Rate limit exceeded.'
- '404 Not Found: The requested document does not exist.'
- '401 Unauthorized: Check client credentials or token validity.'
- '403 Forbidden: Ensure necessary permissions are granted.'
- '404 Not Found: Verify the endpoint URL.'
- 'client denied by server configuration: check the access control directives of mod_proxy'
- 502 - Web server received an invalid response while acting as a gateway or proxy
  server.
- 500 - Internal server error.
- 'ERROR: data type uuid[] has no default operator class for access method ''gin'''
- 'ORA-29833: indextype does not exist'
- 'ORA-01400: cannot insert NULL into ("NUXEO"."ACLR_USER"."USER_ID")'
- 'ORA-01450: maximum key length (3118) exceeded'
- Snapshot isolation transaction failed accessing database 'nuxeo' because snapshot
  isolation is not allowed in this database. Use ALTER DATABASE to allow snapshot
  isolation.
- '400 Bad Request: Check your request format or parameters.'
- '401 Unauthorized: Verify your username and password.'
- '404 Not Found: Ensure that the index exists.'
- '401 Unauthorized: Recheck user credentials or role permissions'
- '400 Bad Request: Check your request format and parameters.'
- '401 Unauthorized: Recheck your username and password.'
- '404 Not Found: Ensure the endpoint exists.'
- Commit cannot be completed since the group has already rebalanced and assigned the
  partitions to another member
- '401 Unauthorized: Check your OAuth2 credentials'
- '404 Not Found: Verify the document ID or path'
- '429 Too Many Requests: Rate limit exceeded'
- Commit cannot be completed since the group has already rebalanced and assigned the
  partitions to another member.
- 'sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException:
  unable to find valid certification path to requested target'
- 'java.lang.RuntimeException: Unexpected error: java.security.InvalidAlgorithmParameterException:
  the trustAnchors parameter must be non-empty'
- 'java.security.NoSuchAlgorithmException: Error constructing implementation (algorithm:
  Default, provider: SunJSSE, class: com.sun.net.ssl.internal.ssl.DefaultSSLContextImpl)'
- 'Received fatal alert: handshake_failure'
- 'ORA-01461: can bind a LONG value only for insert into a LONG column'
- if the connection is detected as not valid by the driver with a 10 seconds timeout
- '403 Forbidden: Check user permissions.'
- '404 Not Found: Verify resource identifier.'
- '500 Internal Server Error: Try again later.'
- '401 Unauthorized: Check your access token.'
- '403 Forbidden: You do not have permission to access this resource.'
- Elasticsearch 7.x node will not start in the presence of indexes created in a version
  of Elasticsearch before 6.0.
- Elasticsearch 5.x will not start if indices are created before LTS 2016.
- '403 Forbidden: Check permissions for the requested resource'
- '401 Unauthorized: Check OAuth2 credentials'
- '403 Forbidden: Insufficient permissions'
- '401 Unauthorized: Recheck basic authentication credentials'
- '404: Failed to get document /wrongID'
- '403: DocumentSecurityException'
- '409: ConcurrentUpdateException'
- '401 Unauthorized: Check username and password'
- '404 Not Found: Ensure the endpoint URL is correct'
- '400 Bad Request: Check the query syntax'
- '202 Accepted: Chunk uploaded but file is incomplete.'
- '201 Created: Chunk uploaded and file is complete.'
- '503 Service Unavailable: Request interrupted or server error.'
- 'LDAP Contribution Not Activated: Disable users and groups definition in Nuxeo Studio.'
- '401 Unauthorized: Check client ID and secret'
- '403 Forbidden: Insufficient permissions for the requested resource'
- 'Invalid authentication token: Ensure the token is generated correctly based on
  the specified algorithm.'
- '401 Unauthorized: Check your API key and permissions'
- '404 Not Found: Ensure the endpoint is correct'
- '500 Internal Server Error: Try again later'
- '401 Unauthorized: Check credentials'
- '401 Unauthorized: Check your OAuth2 token.'
- '404 Not Found: Verify the endpoint path'
- 'REQUEST_REJECTED: Search request rejected due to size constraints.'
- '401 Unauthorized: Check your token.'
- maxRetries=8, delay=1s, maxDelay=60s, continueOnFailure=false
- Terminate computation
- Exception in processLoop
- '401 Unauthorized: Check credentials and permissions.'
- '404 Not Found: Verify the endpoint path.'
- '405 Method Not Allowed: Check the request method.'
- '206 Partial Content: Indicates a partial success in response.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuth2
  - AccessToken
  - User
  - UserManager
  - PluggableAuthenticationService
  - authenticationChain
  - NuxeoLoginModule
  - NuxeoAuthenticationFilter
  - UserManagerService
  - SAMLAuthenticationProvider
  - UserMapperComponent
  - oauth2Clients
  - UserIdentificationInfo
  - GoogleUserInfo
  - EmailBasedUserResolver
  - Oauth2
  - ShibbolethAuthenticationPlugin
  - ShibbolethAuthenticationService
  - ShibbolethGroupComputer
  - BulkCommand
  - BulkService
  - BulkStatus
client:
  base_url: http://localhost:8080/nuxeo
  headers:
    Accept: application/json
source_metadata: null
