resources:
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params: {}
- name: webchat
  endpoint:
    path: /plugin.js
    method: GET
    data_selector: ''
    params: {}
- name: webchat_config
  endpoint:
    path: /api/v1/webchat/config
    method: GET
    data_selector: config
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /viber/messages
    method: POST
    data_selector: messages
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: leads
  endpoint:
    path: /api/leads
    method: GET
    data_selector: records
    params: {}
- name: faqs
  endpoint:
    path: /api/faqs
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: POST
    data_selector: data
    params: {}
- name: custom_checkout_page
  endpoint:
    path: /use-your-own-custom-checkout-page
    method: GET
- name: mark_order_paid
  endpoint:
    path: /api/swagger/#/Ecommerce/payOrder
    method: POST
    data_selector: order
- name: get_user_cart
  endpoint:
    path: /api/swagger/#/Ecommerce/getUserCart
    method: GET
    data_selector: cart
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: dynamic_gallery
  endpoint:
    path: /services/data/vXX.X/sobjects/DynamicGallery
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: dynamic_multiple_choice
  endpoint:
    path: /dynamic/multiple/choice
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: message
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: messages
    params: {}
- name: message
  endpoint:
    path: /v1/send_message
    method: POST
    data_selector: message
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
- name: spreadsheet
  endpoint:
    path: /v4/spreadsheets
    method: GET
    data_selector: sheets
    params: {}
- name: webchat
  endpoint:
    path: /v1/webchat
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: text_messages
  endpoint:
    path: /users/{user_id}/send/text
    method: POST
- name: file_messages
  endpoint:
    path: /users/{user_id}/send/file
    method: POST
- name: lead
  endpoint:
    path: /leads
    method: POST
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: records
- name: comments
  endpoint:
    path: /v1/comments
    method: POST
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: messages
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: speech_to_text
  endpoint:
    path: /v1/speech-to-text
    method: POST
    data_selector: results
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: whatsapp_template_messages
  endpoint:
    path: /whatsapp/template/messages
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: images
  endpoint:
    path: /analyze/image
    method: POST
    data_selector: results
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: contacts
    params: {}
- name: contact
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: contacts
    params: {}
- name: contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: user_follow_status
  endpoint:
    path: /{user-id}/follows
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: records
- name: followers
  endpoint:
    path: /me/followers
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: story_reply
  endpoint:
    path: /me/messages
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /contacts
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: contacts
    params: {}
- name: condition_source
  endpoint:
    path: /source/condition
    method: GET
    data_selector: conditions
    params: {}
- name: contact_created_date
  endpoint:
    path: /api/contact_created_date
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contact_created_date_condition
  endpoint:
    path: /conditions/contact-created-date
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: user_full_name
  endpoint:
    path: /api/v1/user/fullname
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params: {}
- name: products
  endpoint:
    path: /api/v1/products
    method: GET
    data_selector: data
- name: order_details
  endpoint:
    path: /automatically/transfer/order/details
    method: POST
    data_selector: details
- name: google_sheet
  endpoint:
    path: /connect/google/sheets
    method: GET
    data_selector: sheet_data
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: message
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: products
  endpoint:
    path: /add-or-import-products
    method: POST
    data_selector: records
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: data
    params: {}
- name: custom_field
  endpoint:
    path: /custom-field
    method: GET
    data_selector: data
    params: {}
- name: user_data
  endpoint:
    path: /user/data
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: tags
  endpoint:
    path: /api/tags
    method: GET
    data_selector: tags
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: option_list
  endpoint:
    path: /create/option/list
    method: POST
    data_selector: result
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: dynamic_block_contact
  endpoint:
    path: /how-to/dynamically-block-a-contact
    method: GET
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: messages
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: last_user_input_condition
  endpoint:
    path: /api/v1/last_user_input_condition
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: custom_fields
  endpoint:
    path: /api/custom_fields
    method: GET
    data_selector: fields
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: contacts
    params: {}
- name: conversations
  endpoint:
    path: /api/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: viber_automation
  endpoint:
    path: /viber/automation
    method: GET
    data_selector: data
    params: {}
- name: whatsapp_automation
  endpoint:
    path: /whatsapp/automation
    method: GET
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: contacts
- name: message
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: messages
- name: QR Code
  endpoint:
    path: /generate/qr
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /import/contacts
    method: POST
    data_selector: records
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: data
    params: {}
- name: whatsapp_template
  endpoint:
    path: /v1/sendTemplateMessage
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params: {}
- name: contact_notes
  endpoint:
    path: /api/v1/contact/notes
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: data
- name: send_data
  endpoint:
    path: /send_data
    method: POST
    data_selector: response
    params: {}
- name: get_row
  endpoint:
    path: /get_row
    method: GET
    data_selector: response
    params: {}
- name: update_row
  endpoint:
    path: /update_row
    method: PUT
    data_selector: response
    params: {}
- name: clear_row
  endpoint:
    path: /clear_row
    method: DELETE
    data_selector: response
    params: {}
- name: get_random_row
  endpoint:
    path: /get_random_row
    method: GET
    data_selector: response
    params: {}
- name: create_dynamic_gallery
  endpoint:
    path: /create_dynamic_gallery
    method: POST
    data_selector: response
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: POST
    data_selector: data
    params: {}
- name: ad_campaigns
  endpoint:
    path: /vXX.X/act_{account_id}/campaigns
    method: GET
    data_selector: data
    params: {}
- name: ad_insights
  endpoint:
    path: /vXX.X/act_{account_id}/insights
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: broadcast_message
  endpoint:
    path: /v1/messages/broadcast
    method: POST
    data_selector: response
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: data
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: conversion_events
  endpoint:
    path: /send/conversion/events
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: data
    params: {}
- name: One Time Notification
  endpoint:
    path: /messenger/one-time-notification
    method: POST
    data_selector: response
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: contacts
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params: {}
- name: sms_messages
  endpoint:
    path: /2010-04-01/Accounts/{AccountSid}/Messages.json
    method: GET
    data_selector: messages
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: broadcast
  endpoint:
    path: /v1/broadcasts
    method: POST
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: message
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: message
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: messages
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: records
    params: {}
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: message
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: template
  endpoint:
    path: /v1/templates
    method: GET
    data_selector: templates
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params: {}
- name: user_data
  endpoint:
    path: /get_user_data
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: broadcast_message
  endpoint:
    path: /send-broadcast
    method: POST
    data_selector: response
    params: {}
- name: user_location
  endpoint:
    path: /get-user-location
    method: GET
    data_selector: location_data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: voice_bot
  endpoint:
    path: /webhooks/audiocodes.php
    method: GET
    data_selector: records
- name: clear_conversations
  endpoint:
    path: ?p=4216381&lc=0
    method: GET
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
    params: {}
- name: webhook
  endpoint:
    path: /webhooks/whatsapp.php
    method: POST
    data_selector: callback
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
- name: broadcast_message
  endpoint:
    path: /send-broadcast-message
    method: POST
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses OAuth2 with refresh token — requires setup of connected app in DoubleTick
- Some objects may return nulls in deeply nested fields
- OAuth2 authentication is required for API access.
- API has rate limits and should be used accordingly.
- Users can now directly modify the look and feel of their webchat interface using
  CSS.
- Customize the webchat interface with specific IDs and colors.
- Webchat can be set up as a standalone page or embedded within a website.
- The webchat plugin is very flexible and allows many customizations
- Not all channels support all the features that Webchat supports
- Some objects like Contact may return nulls in deeply nested fields
- Requires setup of application in doubletick
- Some responses may include null values for optional fields
- Enhanced Management of WhatsApp Template Failures
- Requires setup of Viber account and API key.
- OAuth2 with refresh token is required.
- Some API calls may have rate limits.
- Ensure to handle API rate limits.
- Ensure to use valid tokens for authentication.
- Requires OAuth2 setup for API access.
- Uses OAuth2 with refresh token — requires setup of connected app in doubletick
- Users need to give consent to send emails using the 'Set Email Opt-In' action.
- Some endpoints may have rate limits.
- Ensure that the API token is valid and not expired.
- Ensure to handle rate limits while making API calls.
- API requires OAuth2 authentication.
- OAuth2 with refresh token — requires setup of connected app in DoubleTick
- Some features may require additional permissions to access.
- Template creation section is easy on Doubletick
- Ensure to configure OAuth properly for access.
- Some endpoints may have rate limits that need to be adhered to.
- Uses Response Mapping to save data from API to a Custom Field if the API returns
  data in JSON format.
- Requires setup of connected app in DoubleTick
- Requires API key for access
- Rate limits may apply
- Dynamic Content inside a bot
- Requires setup of connected app in doubletick API
- Ensure to handle rate limits appropriately to avoid throttling.
- API responses may vary based on user permissions.
- Some API calls may return nulls in certain fields
- Formatting date and time will be useful for anyone who is having customers in multiple
  nations and regions.
- Ensure proper permissions are set for API access
- Requires setup of WhatsApp Business API account
- Uses OAuth2 with refresh token — requires setup of connected app in Viber
- Ensure all required permissions are granted for the API to function properly
- Ensure to configure API scopes correctly during setup.
- API rate limits may apply.
- Ensure OAuth permissions are correctly set in the application.
- Uses OAuth2 with refresh token — requires setup of connected app in Doubletick
- Ensure to set the correct scopes for OAuth2 authentication
- API rate limits are in effect; please check the documentation for details.
- Ensure to handle rate limiting by implementing appropriate backoff strategies.
- Requires setup of connected app in Doubletick
- Some API calls may have rate limits
- Requires Google Cloud project with Sheets API enabled
- Ensure proper OAuth scopes for accessing spreadsheet data
- Requires setup of connected app in DoubleTick API
- Ensure to set up your WhatsApp Business API account correctly.
- Requires proper configuration of OAuth for access
- API limits may apply based on your account type
- Some operations may have rate limits.
- Ensure correct permissions are set for API access.
- Ensure that the WhatsApp Business API is properly set up.
- Messages may have rate limits depending on the account type.
- Requires setup of connected app in doubletick
- Requires valid WhatsApp Business account setup
- Some API calls may require specific permissions.
- Requires setup of connected app in Doubletick API
- Requires WhatsApp Business API setup.
- Some API requests may require specific permissions.
- Rate limits may apply based on the account type.
- Ensure to set the correct API key for authentication
- Ensure to handle pagination where applicable.
- Some responses may contain null values in optional fields
- Uses OAuth2 with refresh token — requires setup of connected app in DoubleTick API
- Ensure proper authentication setup before making API calls.
- Some fields may return nulls in deeply nested structures
- Refer to OpenAI documentation for usage limits and best practices
- Ensure proper authentication setup to access the API.
- Ensure that the OAuth2 flow is properly set up before making API calls.
- Ensure OAuth scopes are set correctly in the DoubleTick app.
- Ensure to handle token expiration properly.
- Some API endpoints may have specific rate limits.
- Ensure to check the API documentation for endpoint-specific parameters.
- Some responses may include large binary data
- This condition assesses the number of followers an Instagram account has through
  API access or manual entry.
- 'Adapt to Audience Dynamics: Recognize that follower counts are dynamic and can
  change. Regularly update your engagement strategies to reflect these changes.'
- 'Value Engagement Over Numbers: While follower count is a useful metric, engagement
  rate often provides deeper insights into an account’s influence. Consider integrating
  engagement metrics into your criteria for segmentation and targeting.'
- 'Respect Privacy and Authenticity: Ensure any engagement based on follower count
  is respectful, authentic, and in line with your brand values. Avoid practices that
  could be perceived as exploitative or insincere.'
- 'Diverse Strategies: Use a mix of strategies to engage with accounts of different
  sizes, recognizing the unique value and potential of each segment, from high-reach
  influencers to highly engaged niche audiences.'
- Requires user authentication to check follow status.
- Requires user to grant permissions for accessing follower data
- Some features may not be available in all regions
- Requires setup of Instagram app for OAuth2 authentication.
- Ensure the connected app is set up correctly for OAuth2.
- API limits may apply based on account type.
- Detection identifies user’s timezone through direct input, device settings, or IP
  address inference.
- Conditions can be applied to adjust interactions based on local time.
- Ensure that you have the correct OAuth2 scopes set up.
- Detection identifies the communication channel through which a user interacts with
  the chatbot.
- Channels might include platforms like Facebook Messenger, WhatsApp, Telegram, web
  chat, SMS, etc.
- Some fields may return null values
- Detection checks if a user has interacted with your chatbot or platform within the
  last 24 hours.
- Use the information about recent interactions to personalize the conversation further,
  making users feel seen and valued for their engagement.
- Ensure that messages or actions triggered by this condition are timely and relevant.
  Avoid sending repetitive or irrelevant content that might lead to user disengagement.
- Always respect user privacy and consent, especially when tracking interactions.
  Be transparent about data collection practices and allow users to opt out if they
  prefer.
- Regularly analyze the outcomes of interactions based on this condition to refine
  and improve your engagement strategies, aiming for higher user satisfaction and
  increased interaction rates.
- Doubletick API requires proper OAuth2 setup.
- Ensure to handle token refresh correctly.
- Ensure that OAuth2 is properly configured to avoid authentication issues.
- Some API endpoints may have rate limits.
- API supports REST for integration.
- Some API responses may include null values in certain fields
- This condition assesses when a user’s contact information was first created or registered.
- Leverage these conditions to personalize communication significantly, making users
  feel valued and enhancing engagement.
- Use the creation date for segmentation in marketing campaigns, targeting users with
  content and offers that are more likely to resonate based on their lifecycle stage.
- For older contacts, consider using conditions to solicit feedback on their experience
  or suggestions for improvement, fostering a sense of community and co-creation.
- Always ensure that the use of contact information, including creation dates, complies
  with data protection and privacy laws applicable in your region and industry.
- Uses OAuth2
- Uses OAuth2 with refresh token — requires setup of connected app in API
- Requires setup of OAuth2 credentials in DoubleTick
- May require additional permission settings in the Doubletick dashboard
- Requires OAuth2 authentication.
- Ensure proper setup of the connected app.
- Detection of user’s continent is determined through methods such as IP geolocation.
- Conditions are set within the chat flow to tailor conversation based on continent.
- Detection of the user’s country can be identified through various means such as
  IP geolocation, the country setting of their device or social media profile, or
  directly asking the user during the conversation.
- Some endpoints may require additional parameters to function properly.
- Ensure to handle user privacy when collecting personal data.
- Ensure that OAuth credentials are set up correctly in the DoubleTick dashboard.
- Detection of user language can occur through various methods such as browser settings
  or social media profile settings.
- Ensure to handle rate limits while importing products.
- Uses OAuth2 with refresh token — requires setup of connected app in WhatsApp
- Automatic transfer of order details to Google Sheets requires proper configuration.
- Ensure to handle token expiration correctly.
- Ensure that OAuth2 is properly configured for successful authentication.
- Some responses may include null values
- Rate limits apply to API usage.
- Ensure to follow the API documentation for endpoint specifics.
- Some endpoints may have usage limitations.
- Ensure to handle rate limiting as specified in the documentation.
- System fields are not all visible when building a bot.
- Custom fields can be created to transfer system field values.
- Ensure the connected app is properly configured for OAuth2 authentication
- Some objects may return nulls in nested fields
- Requires setup of connected app in API
- Ensure to use the latest API version for optimal performance.
- Some API responses may vary depending on user permissions
- Ensure to handle rate limits as specified in the documentation.
- Make sure to handle rate limits defined in the API documentation.
- How to dynamically block a contact
- Requires OAuth2 authentication with refresh token.
- Ensure to follow rate limits to avoid throttling.
- API requires setup of connected app in doubletick
- Ensure to set up a connected app for OAuth2 authentication.
- Ensure OAuth2 is configured correctly before making requests.
- Some APIs may have rate limits.
- Ensure proper OAuth scopes are set for access.
- Custom fields are user-dependent functions that will change its data based on the
  users’ nature.
- Some custom fields are pre-defined inside the Doubletick platform.
- Requires connected app configuration for OAuth2.
- OAuth2 with refresh token setup required
- Ensure to manage rate limits to avoid errors
- We’ve launched four new system fields designed to enhance interaction tracking by
  providing access to the chat history of a contact.
- To enhance privacy and security, we’ve introduced a new admin role for better control
  over the visibility of contact information.
- This feature is crucial for large companies to prevent unauthorized access to email
  addresses and phone numbers.
- Requires setup of WhatsApp Business API
- Ensure to comply with WhatsApp policies and guidelines
- By default, all channels connected to an account are visible on an omnichannel link.
- Currently, the Google Business Message channel isn’t supported by the Omnichannel
  links.
- Ensure to handle rate limits while importing contacts.
- Use the API to import contacts.
- The API requires setup of a WhatsApp Business Account
- Rate limits apply to certain operations
- OAuth2 requires setup of connected app in DoubleTick
- Ensure proper setup of OAuth credentials in doubletick.
- API rate limits apply. Ensure compliance to avoid throttling.
- Make sure to handle token expiration during requests.
- API requires authentication setup using OAuth2.
- Ensure to handle API rate limits appropriately.
- Ensure API rate limits are respected.
- Check for specific error messages in the response.
- Uses OAuth2 with refresh token — requires setup of connected app in Doubletick API
- Requires setup of OAuth2 for authentication
- Some API endpoints may have rate limits
- API requires OAuth2 for authentication.
- Ensure to set up the application in the DoubleTick developer portal.
- Ensure to handle rate limits to prevent throttling.
- Some endpoints may have varying response structures.
- Ensure proper setup of OAuth credentials
- Ensure that the correct OAuth scopes are set for access.
- Changing the name of the worksheet or spreadsheet requires redoing the Google Sheet
  action.
- Every time a user sends a message to your chatbot, your chatbot will automatically
  use ChatGPT to respond to the user’s message.
- Ensure to handle token expiration and refresh accordingly.
- Be aware of rate limits imposed by the API.
- Some responses may contain null values in nested fields
- OAuth2 with refresh token is required for accessing the API.
- You can find the API key on your Klaviyo’s account settings.
- Ensure that the API key is kept secure.
- Requires setup of API keys in the DoubleTick platform
- Ensure to enable card in payment methods and change currency to INR.
- Requires setup of WhatsApp Business API.
- Ensure to set up the required permissions in the app settings.
- Some API calls may have limitations on usage frequency
- Ensure to handle rate limits when making API calls.
- Some endpoints may have rate limiting.
- Ensure to handle pagination for large datasets.
- Some endpoints may return limited fields and nested data.
- Enter the Mailerlite API key to connect.
- Doubletick AI will not work if your Dialogflow agent contains the default intent.
  You need to remove the default intent on your Dialogflow agent if you want Doubletick
  AI and Dialogflow to work simultaneously.
- Google Cloud Platform allows you to process 60 minutes of audio a month for free.
  After that, you pay 0.006 USD per 15 seconds.
- API supports only OAuth2 with refresh token.
- API rate limits apply to all requests.
- Some endpoints may require additional permissions.
- You need to have a Facebook pixel.
- When you send a conversion event, it may take up to 40 minutes for the event to
  show up on the Event Manager.
- OAuth2 requires setup of a connected app in DoubleTick.
- Ensure correct OAuth scopes are set for API access
- Rate limits apply to API calls
- Requires user to opt-in to receive one-time notifications.
- API may have rate limits on contact creation.
- API supports pagination.
- Rate limits may apply to the API usage.
- Some API responses may vary based on account settings
- Ensure to handle rate limits appropriately.
- API requires setup of connected app in DoubleTick.
- Some API methods may have rate limits that need to be adhered to.
- Ensure your Twilio account has sufficient permissions and message service setup.
- Ensure proper setup of WhatsApp Business API for full functionality
- Check for limitations on message types and rates
- Ensure to configure OAuth2 correctly for access.
- You only need to specify your Telegram bot token and Doubletick will automatically
  integrate with Telegram and your bot is ready to respond to users.
- Uses custom fields to access user's geographical data
- The URL for the user's location is based on the last location shared
- Integration requires authentication
- Ensure correct permissions for sending broadcasts
- Ensure to set up your OAuth credentials in the DoubleTick dashboard.
- API requires authentication via OAuth2.
- Some fields may return null values.
- Requires setup of WhatsApp Business API for access.
- Uses OAuth2 with refresh token — requires setup of connected app in WhatsApp.
- Requires setup of API credentials in the DoubleTick dashboard.
- Ensure to handle rate limits as per API documentation.
- This tool will not work with all websites.
- Ensure to set up the app in the DoubleTick developer portal for OAuth.
- Requires setup of a WhatsApp Business account.
- Ensure to follow the OAuth2 flow for authentication.
- Ensure proper setup of API keys and tokens.
- Rate limits apply to requests.
- Some API responses may vary based on user permissions
- Ensure to follow the API usage guidelines to prevent throttling.
- Ensure to set up a connected app for authentication.
- Requires setup of connected app in api
- Requires setup of Viber bot for API access
- Ensure to handle user privacy settings
- Setup of connected app in Doubletick API is required.
- Viber contacts can opt to not share their data with a bot.
- Ensure to handle rate limits as the API has usage restrictions.
- The Bot URL requires ACCOUNT_ID and ACCOUNT_KEY.
- To add an existing phone number, contact AudioCodes support.
- WhatsApp Business Platform isn’t free. The WhatsApp Business Platform uses a conversation-based
  pricing model. The first 1,000 conversations each month are free.
- Businesses are required to create their own Facebook App in order to access WhatsApp
  Cloud API.
- You will need to verify your personal phone number if you are using a testing phone
  number provided by Facebook.
- Some API features may require additional permissions.
- Some messages may have delivery issues due to WhatsApp policies.
- The first 1,000 conversations each month are free.
- Conversations are not charged when users message businesses using call-to-action
  buttons on Ads that Click to WhatsApp or a Facebook Page call-to-action buttons.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your credentials.'
- '404 Not Found: The requested resource does not exist.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Ensure the access token is valid.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Check token validity'
- '404 Not Found: Verify endpoint URL'
- '500 Internal Server Error: Retry the request'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify OAuth token.'
- '404 Not Found: Endpoint may not exist.'
- '401 Unauthorized: Check your OAuth token.'
- 'RATE_LIMIT_EXCEEDED: Reduce the number of API calls.'
- '401 Unauthorized: Verify OAuth token is valid.'
- '500 Internal Server Error: Retry after some time.'
- 'INVALID_TOKEN: Check if the token is valid or expired.'
- 'ACCESS_DENIED: Verify your permissions.'
- '400 Bad Request: Verify your request parameters.'
- '(#100) Message cannot be empty, must provide valid attachment or text – code: 100'
- '(#10) This message is sent outside of the allowed window. – code: 10'
- URL button is not supported
- Upgrade to PRO, your bot reached the 10 user limit allowed on the DEMO plan
- Please connect Twilio account.
- '{"meta":{"api_status":"stable","version":"2.43.2"},"errors":[{"code":1008,"title":"Required
  parameter is missing","details":"body: Parameter of type text is missing text value"}]}'
- '{"code":470,"href":"https:\/\/developers.facebook.com\/docs\/whatsapp\/api\/errors\/","title":"Message
  failed to send because more than 24 hours have passed since the customer last replied
  to this number"}'
- Fail to execute the request
- '{"meta":{"api_status":"stable","version":"2.43.2"},"errors":[{"code":2012,"title":"Parameter
  format does not match format in the created template","details":"header: Format
  mismatch, expected Image, received Unknown","href":"https:\/\/developers.facebook.com\/docs\/whatsapp\/faq#faq_1612022582274564"}]}'
- Please go to Settings > Channels and reconnect your Messenger/Instagram bot
- 'SMTP Error: Could not authenticate.'
- There can be no more than 30 product_items across sections.
- '{"code":131053,"title":"Unsupported Image mime type image\/gif. Please use one
  of image\/png, image\/jpeg."}'
- No email or opted-in to receive email
- '(#10) Message failed to send because another app is controlling this thread now.
  – code: 10'
- '(#100) name_placeholder[buttons][0][url] should represent a valid URL – code: 100'
- 'Error #551 This person isn’t available right now'
- '(#100) Cannot set thread level persistent menu now because another app is controlling
  the thread – code: 100'
- Invalid catalog Id.
- '{"code":1005,"href":"https:\/\/www.facebook.com\/business\/help\/1104628230079278","title":"Additional
  compliance information for your business and catalog items may be required before
  being able to send Multi-Product or Single Product messages."}'
- '{"code":131053,"title":"Downloading media from weblink failed with http code 404,
  status message Not Found"}'
- '{"code":131053,"title":"Unsupported Audio mime type image\/jpeg. Please use one
  of audio\/ogg; codecs=opus, audio\/mpeg, audio\/amr, audio\/mp4, audio\/aac."}'
- '(#100) Upload failed – code: 100'
- '{"error":"invalid_grant","error_description":"Bad Request"}'
- '(#10) You need one time notification permission for this message. To get that go
  to Advanced Messaging under your Page Settings to request the permission. – code:
  10'
- No email address (TO).
- (#200) User does not have sufficient administrative permission for this action on
  this page. If the page business requires Two Factor Authentication, the user also
  needs to enable Two Factor Authentication.
- Facebook comment can only reply with 1 message due to Facebook limitation.
- (#100) The parameter text[‘body’] is required.
- 'Error validating access token: The session has been invalidated because the user
  changed their password or Facebook has changed the session for security reasons.'
- '404 Not Found: Ensure the endpoint is correct.'
- '404 Not Found: Verify the endpoint.'
- '401 Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Verify the access token.'
- '401 Unauthorized: Invalid access token or token expired.'
- '401 Unauthorized: Check your token or credentials.'
- '404 Not Found: Verify the endpoint path.'
- '429 Too Many Requests: Reduce the frequency of API calls'
- '401 Unauthorized: Check your authentication credentials'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Invalid API key'
- '429 Too Many Requests: Rate limit exceeded'
- '400 Bad Request: Check for missing required parameters.'
- '403 Forbidden: Ensure user has the right permissions.'
- '500 Internal Server Error: Retry the request after a short delay.'
- 'QUERY_TIMEOUT: Adjust your query parameters for efficiency'
- '401 Unauthorized: Check your OAuth token validity'
- '401 Unauthorized: Check your credentials'
- '404 Not Found: Verify the endpoint URI'
- '403 Forbidden: Check permissions for the requested resource'
- '401 Unauthorized: Check OAuth token validity'
- '404 Not Found: Verify the endpoint URL'
- 'INVALID_TOKEN: Token has expired or is invalid'
- 'RATE_LIMIT_EXCEEDED: Too many requests in a short period'
- '401 Unauthorized: Verify client credentials and token validity.'
- '429 Too Many Requests: Implement exponential backoff for retries.'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Token may be expired or invalid'
- '403 Forbidden: Check your API permissions and scopes.'
- '404 Not Found: Verify the endpoint URL and resource availability.'
- '403 Forbidden: Check API access permissions'
- '404 Not Found: Verify spreadsheet ID'
- '401 Unauthorized: Confirm OAuth token validity'
- '400 Bad Request: Check the request body for required fields'
- '401 Unauthorized: Verify your access token'
- '429 Too Many Requests: Rate limit exceeded, try again later'
- '400 Bad Request: Check the request structure'
- '401 Unauthorized: Check your access token validity'
- '404 Not Found: Ensure the endpoint exists'
- '401 Unauthorized: Verify token validity.'
- '400 Bad Request: Check request parameters and format.'
- '401 Unauthorized: Verify credentials and permissions.'
- '400 Bad Request: Check the request payload'
- '401 Unauthorized: Verify token validity'
- 'INVALID_REQUEST: Check the API endpoint and request parameters.'
- 'UNAUTHORIZED: Ensure valid authentication credentials.'
- 'NOT_FOUND: Verify the resource ID.'
- '401 Unauthorized: Check your API key or access token'
- '403 Forbidden: Insufficient permissions'
- '401 Unauthorized: Check token validity.'
- '429 Too Many Requests: Slow down requests.'
- 'INVALID_PARAMETER: Check the API documentation for required parameters.'
- 'ACCESS_DENIED: Ensure proper authentication and authorization.'
- 'RESOURCE_NOT_FOUND: Verify the endpoint URL and resource.'
- '400 Bad Request: Check the request format and parameters'
- '401 Unauthorized: Verify API key and permissions'
- '401 Unauthorized: Invalid token or missing credentials.'
- 'REQUEST_LIMIT_EXCEEDED: Reduce frequency of API calls'
- '400 Bad Request: Verify the request parameters.'
- '401 Unauthorized: Check authentication credentials.'
- '500 Internal Server Error: Try again later.'
- '400 Bad Request: Check your input parameters'
- '401 Unauthorized: Verify your API key'
- '429 Too Many Requests: Rate limit exceeded. Try again later.'
- '401 Unauthorized: Check your credentials and token.'
- '429 Too Many Requests: Reduce request frequency.'
- '400 Bad Request: Invalid parameters provided.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Ensure your token is valid.'
- '429 Too Many Requests: You have hit the rate limit.'
- '404 Not Found: Check if the user ID is correct.'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Ensure the access token is valid'
- '401 Unauthorized: Check authorization token'
- '401 Unauthorized: Check access token validity.'
- '400 Bad Request: Verify request parameters.'
- '401 Unauthorized: Check if the access token is valid.'
- '403 Forbidden: Check your API key or OAuth token.'
- '500 Internal Server Error: Try again later'
- '401 Unauthorized: Invalid credentials'
- '404 Not Found: Endpoint does not exist'
- '401 Unauthorized: Check your authentication credentials.'
- 'INVALID_REQUEST: Check your request parameters.'
- 'INVALID_REQUEST: Check the API request parameters'
- 'UNAUTHORIZED: Verify API credentials'
- 'NOT_FOUND: Ensure the resource exists'
- '401 Unauthorized: Check your credentials and permissions'
- '404 Not Found: Verify the endpoint URL.'
- '500 Internal Server Error: Retry the request.'
- '404 Not Found: The requested resource could not be found.'
- '401 Unauthorized: Check the access token and its expiration.'
- 'PRODUCT_NOT_FOUND: Check the product ID'
- 'INVALID_REQUEST: Verify request parameters'
- '400 Bad Request: Check API request format.'
- '429 Too Many Requests: Exceeded rate limit.'
- '401 Unauthorized: Check your access token.'
- '400 Bad Request: Check the request payload for required fields.'
- '401 Unauthorized: Validate your authentication credentials.'
- '401 Unauthorized: Check your token and permissions.'
- '403 Forbidden: You do not have access to this resource.'
- '401 Unauthorized: Check API key validity.'
- '401 Unauthorized: Check your OAuth2 credentials and scopes'
- '401 Unauthorized: Verify your client credentials.'
- '401 Unauthorized: Verify your authentication credentials.'
- '400 Bad Request: Check the request format and required fields'
- '401 Unauthorized: Recheck API key or authentication method'
- '500 Internal Server Error: Try again later or contact support'
- '403 Forbidden: Check your permissions'
- '404 Not Found: Ensure the endpoint is correct'
- 'INVALID_AUTH: Check your authorization credentials.'
- 'RATE_LIMIT_EXCEEDED: Too many requests made in a short period.'
- '400 Bad Request: Check request parameters and formatting.'
- '401 Unauthorized: Verify the token and its expiration.'
- '400: Bad request. Check your parameters.'
- '401: Unauthorized. Check your authentication.'
- '429: Too many requests. Rate limit exceeded.'
- '400 Bad Request: Invalid request format.'
- '429 Too Many Requests: Rate limit exceeded, please slow down.'
- '401 Unauthorized: Verify your OAuth2 tokens and permissions.'
- '400 Bad Request: Validate request parameters.'
- '400 Bad Request: Check request format and parameters'
- '400 Bad Request: Check the request format and data.'
- '401 Unauthorized: Verify the authorization token'
- '429 Too Many Requests: Slow down the request rate'
- '403 Forbidden: Check your API key or permissions.'
- '401 Unauthorized: Check your OAuth token and permissions.'
- '429 Too Many Requests: Throttle your API calls.'
- '401 Unauthorized: Check your credentials and permissions.'
- '429 Too Many Requests: Rate limit exceeded, please try again later.'
- '401 Unauthorized: Verify API keys and tokens.'
- '401 Unauthorized: Invalid access token'
- '404 Not Found: Check the endpoint URL'
- '401 Unauthorized: Token might be expired.'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of requests.'
- 'INVALID_TOKEN: Reauthenticate if the token is expired.'
- '401 Unauthorized: Check OAuth scopes or token expiration'
- '429 Too Many Requests: Reduce request frequency'
- '401 Unauthorized: Verify your access token.'
- '404 Not Found: Verify the endpoint'
- '401 Unauthorized: Validate your access token.'
- '401 Unauthorized: Check your access token and permissions.'
- '403 Forbidden: Verify your account permissions for the requested operation.'
- '401 Unauthorized: Verify OAuth token'
- '401 Unauthorized: Check OAuth token and scopes.'
- '401 Unauthorized: Check API key or token validity.'
- '401 Unauthorized: Check API keys and OAuth configuration'
- '401 Unauthorized: Verify credentials and permissions'
- 'INVALID_AUTH: Check if the access token is valid.'
- 'NOT_FOUND: The requested resource does not exist.'
- '401 Unauthorized: Ensure valid OAuth tokens.'
- '401 Unauthorized: Check your authentication details.'
- '401 Unauthorized: Token may be expired or invalid.'
- '401 Unauthorized: Verify credentials'
- '404 Not Found: Resource does not exist'
- '400 Bad Request: Check the request payload for errors.'
- '401 Unauthorized: Ensure your authentication token is valid.'
- '429 Too Many Requests: Slow down your request rate.'
- '403 Forbidden: Ensure you have the right permissions.'
- '401 Unauthorized: Invalid credentials.'
- '401 Unauthorized: Invalid credentials provided'
- '403 Forbidden: Insufficient permissions for the requested resource'
- '404 Not Found: The requested resource does not exist'
- '401 Unauthorized: Token may have expired or incorrect credentials.'
- '429 Too Many Requests: You have exceeded the rate limit.'
- '429 Too Many Requests: Slow down your requests.'
- '400 Bad Request: Check the request parameters or body'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '401 Unauthorized: Validate the access token.'
- '401 Unauthorized: Ensure valid authentication credentials'
- '20404: The requested resource does not exist'
- '21608: The message was rejected'
- '30005: Connection error'
- '401 Unauthorized: Validate access token.'
- '404 Not Found: Verify endpoint URL.'
- '400 Bad Request: Verify required fields are populated'
- '401 Unauthorized: Invalid credentials or token expired.'
- '401 Unauthorized: Invalid or expired token'
- '400 Bad Request: Invalid request parameters'
- '401 Unauthorized: Verify your credentials'
- '401 Unauthorized: Check your API key or OAuth access token.'
- '401 Unauthorized: Check your credentials or token expiry.'
- '400 Bad Request: Check the parameters you are sending.'
- '401 Unauthorized: Check API key and permissions.'
- '401 Unauthorized: Verify the client credentials and token.'
- '429 Too Many Requests: Rate limit exceeded. Back off and retry.'
- 'INVALID_CREDENTIALS: Check your client_id and client_secret'
- 'ACCESS_DENIED: Verify user permissions'
- '401 Unauthorized: Check client_id, client_secret, or refresh_token.'
- '429 Too Many Requests: Rate limit exceeded. Slow down requests.'
- '404 Not Found: Resource not available.'
- '401 Unauthorized: Check your API key or OAuth token.'
- 'INVALID_TOKEN: Token may have expired or is invalid'
- 'ACCESS_DENIED: Check user permissions for the requested resource'
- 'RATE_LIMIT_EXCEEDED: Too many requests made in a short period'
- 'REQUEST_LIMIT_EXCEEDED: Reduce the frequency of API calls.'
- '401 Unauthorized: Verify OAuth token validity.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '401 Unauthorized: Check your API key or token.'
- '401 Unauthorized: Invalid authentication credentials.'
- '404 Not Found: Verify endpoint path.'
- '401 Unauthorized: Verify access token'
- '429 Too Many Requests: Throttle API calls'
- '403 Forbidden: Check your access permissions.'
- '500 Internal Server Error: Retry the request after some time.'
- Business verification is required to initiate more than 50 business-initiated conversations
  in a rolling 24-hour period.
- '401 Unauthorized: Check your token.'
- '401 Unauthorized: Check your API key and permissions.'
- '401 Unauthorized: Verify token and OAuth scopes.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuth2
  - AccessToken
  - RefreshToken
  - OAuthToken
  - User
  - InstagramAPI
  - InstagramApp
  - API Key
client:
  base_url: https://api.doubletick.ai
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.doubletick.ai/oauth2/token
    client_id: '{{ dlt.secrets[''doubletick_client_id''] }}'
    client_secret: '{{ dlt.secrets[''doubletick_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''doubletick_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
