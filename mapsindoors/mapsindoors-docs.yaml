resources:
- name: geodata
  endpoint:
    path: /{apiKey}/api/geodata
    method: GET
- name: routeelements
  endpoint:
    path: /{apiKey}/api/routing/routeelements
    method: GET
- name: maps_data
  endpoint:
    path: /load
    method: GET
- name: location_status
  endpoint:
    path: /location-status/{locationId}
    method: GET
    data_selector: status
- name: book_location
  endpoint:
    path: /book/{locationId}
    method: POST
    data_selector: bookingDetails
- name: locations
  endpoint:
    path: /api/locations
    method: GET
    data_selector: data
- name: venue
  endpoint:
    path: /api/v1/venues
    method: GET
    data_selector: data
    params: {}
- name: map
  endpoint:
    path: /api/v1/maps
    method: GET
    data_selector: data
    params: {}
- name: menu
  endpoint:
    path: /api/menu
    method: GET
    data_selector: menuItems
- name: display_heatmap_overlay
  endpoint:
    path: /data-visualization/display-heatmap-overlay
    method: GET
- name: menu
  endpoint:
    path: /getMenuInfo
    method: GET
    data_selector: menuInfos
    params: {}
- name: Display Heatmap Overlay
  endpoint:
    path: /data-visualization/display-heatmap-overlay
    method: GET
    data_selector: records
- name: Display Heatmap Overlay
  endpoint:
    path: /sdk/heatmap
    method: GET
    data_selector: data
    params: {}
- name: heatmap_overlay
  endpoint:
    path: /display/heatmap
    method: GET
    data_selector: records
- name: custom_properties
  endpoint:
    path: /api/custom-properties
    method: GET
    data_selector: data
    params: {}
- name: custom_floor_selector
  endpoint:
    path: /other-guides/custom-floor-selector
    method: GET
- name: CustomFloorSelector
  endpoint:
    path: /custom_floor_selector
    method: GET
    data_selector: records
- name: custom_properties
  endpoint:
    path: /api/custom-properties
    method: GET
    data_selector: data
    params: {}
- name: custom_properties
  endpoint:
    path: /custom-properties
    method: GET
    data_selector: custom_properties
    params: {}
- name: locations
  endpoint:
    path: /api/v1/locations
    method: GET
    data_selector: data
    params: {}
- name: custom_floor_selector
  endpoint:
    path: /custom_floor_selector
    method: GET
    data_selector: view
    params: {}
- name: locations
  endpoint:
    path: /api/v1/locations
    method: GET
    data_selector: data
    params: {}
- name: locations
  endpoint:
    path: /getLocationsByExternalIds
    method: GET
    data_selector: MPLocations
    params: {}
- name: maps
  endpoint:
    path: /api/v1/maps
    method: GET
    data_selector: data
    params: {}
- name: DisplayRule
  endpoint:
    path: /displayRule
    method: GET
    data_selector: rules
    params: {}
- name: Location
  endpoint:
    path: /location
    method: GET
    data_selector: locations
    params: {}
- name: GoogleMapFragment
  endpoint:
    path: R.layout.google_map_fragment
    method: GET
    data_selector: 'null'
    params: {}
- name: MapboxMapFragment
  endpoint:
    path: R.layout.mapbox_map_fragment
    method: GET
    data_selector: 'null'
    params: {}
- name: MapFragment
  endpoint:
    path: /mapfragment
    method: GET
    data_selector: records
- name: GoogleMapFragment
  endpoint:
    path: /google_map_fragment
    method: GET
    data_selector: records
- name: MapboxMapFragment
  endpoint:
    path: /mapbox_map_fragment
    method: GET
    data_selector: records
- name: locations
  endpoint:
    path: /locations
    method: GET
    data_selector: locations
    params: {}
- name: directions
  endpoint:
    path: /api/directions
    method: GET
    data_selector: routes
    params: {}
- name: custom_floor_selector
  endpoint:
    path: /other-guides/custom-floor-selector
    method: GET
- name: Custom Floor Selector
  endpoint:
    path: /other-guides/custom-floor-selector
    method: GET
- name: custom_floor_selector
  endpoint:
    path: /Map/Map%20Styling/custom-floor-selector
    method: GET
    data_selector: records
    params: {}
- name: change_building_outline_color
  endpoint:
    path: /change-building-outline-color
    method: GET
- name: custom_floor_selector
  endpoint:
    path: /other-guides/custom-floor-selector
    method: GET
- name: custom_properties
  endpoint:
    path: /custom-properties
    method: GET
    data_selector: properties
    params: {}
- name: user_location
  endpoint:
    path: /api/user/location
    method: GET
    data_selector: location
    params: {}
- name: user_location
  endpoint:
    path: /user/location
    method: GET
    data_selector: location
    params: {}
- name: ShowMyLocationController
  endpoint:
    path: /create/showMyLocationController
    method: GET
    data_selector: controller
    params: {}
- name: user_location
  endpoint:
    path: /user/location
    method: GET
    data_selector: location
- name: mapsindoors
  endpoint:
    path: /mapsindoors
    method: GET
    data_selector: records
    params: {}
- name: mapsindoors
  endpoint:
    path: /load
    method: POST
    data_selector: data
    params: {}
- name: show_user_location
  endpoint:
    path: /show-users-location-aka.-blue-dot
    method: GET
- name: geodata
  endpoint:
    path: /api/geodata
    method: GET
    data_selector: geodata
    params: {}
- name: geodata
  endpoint:
    path: /api/geodata
    method: GET
    data_selector: geodata
    params: {}
- name: reverse_geocoding
  endpoint:
    path: /api/reverseGeocode
    method: GET
    data_selector: results
    params: {}
- name: dataset
  endpoint:
    path: /api/data/description/dataset
    method: GET
    data_selector: data
- name: geodata
  endpoint:
    path: /api/data/description/geodata
    method: GET
    data_selector: data
- name: geodata
  endpoint:
    path: /api/geodata
    method: GET
    data_selector: geodata
    params: {}
- name: categories
  endpoint:
    path: /api/categories
    method: GET
    data_selector: categories
    params: {}
- name: geodata
  endpoint:
    path: /{apiKey}/api/geocode
    method: GET
    data_selector: geodata
    params:
      lat: ''
      lng: ''
      floor: ''
- name: reverse_geocoding
  endpoint:
    path: /api/reverse-geocoding
    method: GET
- name: route_elements
  endpoint:
    path: /{apiKey}/api/routing/routeelements
    method: GET
    data_selector: routeElements
    params: {}
- name: user_roles
  endpoint:
    path: /{apiKey}/api/appUserRoles
    method: GET
    data_selector: userRoles
    params: {}
- name: geodata
  endpoint:
    path: /{apiKey}/api/geocode
    method: GET
    data_selector: Geodata objects
    params:
      lat: 'Latitude of the point to examine. Valid range: +/- 90'
      lng: 'Longitude of the point to examine. Valid range: +/- 180'
      floor: Floor index to match for floor and room geodata
- name: app_user_roles
  endpoint:
    path: /api/appuserroles
    method: GET
    data_selector: roles
- name: categories
  endpoint:
    path: /api/categories
    method: GET
    data_selector: categories
- name: geodata
  endpoint:
    path: /api/geodata
    method: GET
    data_selector: geodata
- name: route_elements
  endpoint:
    path: /{apiKey}/api/routing/routeelements
    method: GET
    data_selector: route_elements
- name: app_user_roles
  endpoint:
    path: /{apiKey}/api/appUserRoles
    method: GET
    data_selector: user_roles
- name: appUserRoles
  endpoint:
    path: /{apiKey}/api/appUserRoles
    method: GET
- name: categories
  endpoint:
    path: /{apiKey}/api/categories
    method: GET
- name: graphs
  endpoint:
    path: /{apiKey}/api/routing/graphs
    method: GET
- name: dataset
  endpoint:
    path: /api/dataset
    method: GET
- name: datasetByCustomer
  endpoint:
    path: /api/dataset/customer
    method: GET
- name: displaytypes
  endpoint:
    path: /{apiKey}/api/displaytypes
    method: GET
- name: mapExternalId
  endpoint:
    path: /api/geodata/mapExternalId/customer
    method: GET
- name: App-User Roles
  endpoint:
    path: /api/appuserroles
    method: GET
- name: Categories
  endpoint:
    path: /api/categories
    method: GET
- name: Dataset
  endpoint:
    path: /api/dataset
    method: GET
- name: mapExternalId
  endpoint:
    path: /api/geodata/mapExternalId/customer
    method: GET
    data_selector: response
    params:
      customerId: 5583d3582a91e00f1cc4ecb1
- name: graphs
  endpoint:
    path: /{apiKey}/api/routing/graphs
    method: GET
    data_selector: response
    params: {}
- name: geodata
  endpoint:
    path: /{apiKey}/api/geodata
    method: GET
    data_selector: response
    params: {}
- name: graphs
  endpoint:
    path: /{apiKey}/api/routing/graphs
    method: GET
    data_selector: responses
    params:
      apiKey: 550c26a864617400a40f0000
- name: route_elements
  endpoint:
    path: /{apiKey}/api/routing/routeelements
    method: GET
    data_selector: response
    params:
      apiKey: 550c26a864617400a40f0000
      graphId: RTX_Graph
- name: appUserRoles
  endpoint:
    path: /{apiKey}/api/appUserRoles
    method: GET
    data_selector: object[]
    params: {}
- name: categories
  endpoint:
    path: /{apiKey}/api/categories
    method: GET
    data_selector: object[]
    params: {}
- name: graphs
  endpoint:
    path: /{apiKey}/api/routing/graphs
    method: GET
    data_selector: string[]
    params: {}
- name: dataset
  endpoint:
    path: /api/dataset
    method: GET
    data_selector: object[]
    params: {}
- name: customerDataset
  endpoint:
    path: /api/dataset/customer
    method: GET
    data_selector: string[]
    params:
      customerId: string
- name: displayTypes
  endpoint:
    path: /{apiKey}/api/displaytypes
    method: GET
    data_selector: object[]
    params: {}
- name: mapExternalId
  endpoint:
    path: /api/geodata/mapExternalId/customer
    method: GET
    data_selector: object[]
    params: {}
- name: mapExternalId
  endpoint:
    path: /api/geodata/mapExternalId/customer
    method: GET
    params:
      customerId: 5583d3582a91e00f1cc4ecb1
- name: graphs
  endpoint:
    path: /{apiKey}/api/routing/graphs
    method: GET
    params: {}
- name: geodata
  endpoint:
    path: /{apiKey}/api/geodata
    method: GET
    params: {}
- name: graphs
  endpoint:
    path: /{apiKey}/api/routing/graphs
    method: GET
    data_selector: responses
    params:
      apiKey: 550c26a864617400a40f0000
- name: route_elements
  endpoint:
    path: /{apiKey}/api/routing/routeelements
    method: GET
    data_selector: response
    params:
      apiKey: 550c26a864617400a40f0000
      graphId: RTX_Graph
- name: map
  endpoint:
    path: /api/v1/maps
    method: GET
    data_selector: data
    params: {}
- name: location
  endpoint:
    path: /api/v1/locations
    method: GET
    data_selector: data
    params: {}
- name: Display Rules
  endpoint:
    path: /display-rules
    method: GET
    data_selector: rules
    params: {}
- name: Label Style
  endpoint:
    path: /display-rules/label-style
    method: GET
    data_selector: labelStyles
    params: {}
- name: Polygon
  endpoint:
    path: /display-rules/polygon
    method: GET
    data_selector: polygons
    params: {}
- name: 2D Model
  endpoint:
    path: /display-rules/2d-model
    method: GET
    data_selector: models
    params: {}
- name: 3D Walls
  endpoint:
    path: /display-rules/3d-walls
    method: GET
    data_selector: walls
    params: {}
- name: 3D Room Extrusion
  endpoint:
    path: /display-rules/3d-room-extrusion
    method: GET
    data_selector: extrusions
    params: {}
- name: media
  endpoint:
    path: /media
    method: GET
    data_selector: mediaItems
- name: map
  endpoint:
    path: /api/v1/maps
    method: GET
    data_selector: data
    params: {}
- name: location
  endpoint:
    path: /cms/locations
    method: GET
    data_selector: locations
- name: media
  endpoint:
    path: /media-library
    method: GET
    data_selector: mediaItems
- name: audit_log
  endpoint:
    path: /audit/logs
    method: GET
    data_selector: logs
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: user_list
    params: {}
- name: location
  endpoint:
    path: /locations
    method: GET
    data_selector: locations
- name: app_configuration
  endpoint:
    path: /app-settings/app-config
    method: GET
    data_selector: configurations
    params: {}
- name: location_details
  endpoint:
    path: /api/location/details
    method: GET
    data_selector: data
    params: {}
- name: get_locations
  endpoint:
    path: /locations
    method: GET
    data_selector: locations
    params: {}
- name: get_route
  endpoint:
    path: /route
    method: GET
    data_selector: route
    params: {}
- name: map_styles
  endpoint:
    path: /api/v1/mapstyles
    method: GET
    data_selector: styles
- name: locations
  endpoint:
    path: /api/v1/locations
    method: GET
    data_selector: locations
- name: locations
  endpoint:
    path: /api/v1/locations
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: map
  endpoint:
    path: /api/v1/maps
    method: GET
    data_selector: maps
    params: {}
- name: location
  endpoint:
    path: /api/v1/locations
    method: GET
    data_selector: locations
    params: {}
- name: maps
  endpoint:
    path: /maps
    method: GET
    data_selector: records
- name: locations
  endpoint:
    path: /locations
    method: GET
    data_selector: records
- name: route
  endpoint:
    path: /routes
    method: GET
    data_selector: routes
- name: route
  endpoint:
    path: /inspect-route-element
    method: GET
    data_selector: routes
- name: locations
  endpoint:
    path: /api/v1/locations
    method: GET
    data_selector: locations
    params: {}
- name: position_provider
  endpoint:
    path: /getSolutionWithCompletion
    method: GET
    data_selector: positionProviderConfigs
- name: user_location
  endpoint:
    path: /user/location
    method: GET
    data_selector: location_data
- name: User's Location
  endpoint:
    path: /user/location
    method: GET
    data_selector: location
- name: User's Location
  endpoint:
    path: /user/location
    method: GET
    data_selector: location
    params: {}
- name: position
  endpoint:
    path: /api/v1/position
    method: GET
    data_selector: results
    params: {}
- name: show_my_location
  endpoint:
    path: /blue-dot/show-my-location
    method: GET
    data_selector: location
    params: {}
- name: user_roles
  endpoint:
    path: /api/user_roles
    method: GET
    data_selector: records
    params: {}
- name: app_user_roles
  endpoint:
    path: /app/user/roles
    method: GET
    data_selector: userRoles
    params: {}
- name: locations
  endpoint:
    path: /api/v1/locations
    method: GET
    data_selector: data
    params: {}
- name: maps
  endpoint:
    path: /api/v1/maps
    method: GET
    data_selector: data
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Only HTTPS is supported.
- There is a rate limit of 10 requests per second per Solution.
- The access token is valid for 24 hours.
- Use an API key to load your MapsIndoors data in your apps.
- The core functionality of the MapsIndoors SDK remains unchanged
- The wrapper simply handles the UI integration aspects
- You can create custom wrappers tailored to your specific needs
- The process is straightforward and requires minimal code
- Real-time updates can be achieved through WebSocket connections or polling strategies.
- Uses WebSocket for real-time updates
- Implement authentication for your Booking API or Booking provider first
- Requires setup of connected app in api
- Some objects may return nulls in deeply nested fields
- Requires setup of connected app in MapsIndoors API
- Some endpoints may have rate limits.
- Last updated 1 year ago
- Requires an API key for access
- Uses OAuth2 with refresh token — requires setup of connected app in MapsIndoors
- Parts of this guide rely on having access to a MapsIndoors Solution which supports
  Live Data Integration.
- You switch Solutions by changing the active API key using setAPIKey()
- Only one dataset is active at any point in time.
- Requires setup of connected app in MapsIndoors
- Translation must be provided by the user in the CMS.
- Fallback language is English if a field is left empty.
- The language of MapsIndoors is independent of the chosen language on the device
  on which the app is used.
- DisplayRule will be null if MapsIndoors is not loaded.
- The DisplayRule will be null if MapsIndoors is not loaded.
- This guide showcases how to create a menu of location categories.
- Uses OAuth2 for authentication.
- This guide uses code from the 'Getting Started' guide.
- This will only work with Android SDK v4.0.1 and newer.
- Single Sign-On may be required for certain operations.
- Custom Properties are created for each Location, defined using a key and a value.
- When adding a Generic Custom Property through the CMS, a value input field will
  be provided for each language.
- MapsIndoors supports both Language-specific and Generic Custom Properties.
- Custom Properties can be created through the Integration API with the same requirements
  as the CMS.
- Custom Floor Selector
- Uses OAuth2 — requires setup of connected app in MapsIndoors
- Uses OAuth2
- MapsIndoors is built on top of Google Maps or Mapbox which has its own way of styling
  the map.
- Google Maps styling will only affect the MapsIndoors map if Google Maps has Points
  of Interest placed inside or near the buildings that you build a MapsIndoors solution
  for.
- Uses MapsIndoors SDK for visual implementation of selection and highlighting.
- Display rules can be modified programmatically.
- Changes take effect on app reboot or via synchroniseContent() call.
- Uses SDK 4.3.0 for Select and Highlight Display Rules
- Uses API keys stored in resources for Google Maps and Mapbox
- Uses Google Maps and Mapbox for rendering maps.
- Uses OAuth2 authentication
- MapsIndoors integrates with external and global map providers, preferred provider
  is Google Maps.
- Out of the box, MapsIndoors automatically caches all basic data for the active dataset
  on the device, whereas images and Map Tiles are cached only as they are used.
- The most common use of MapsIndoors involves only one dataset, but for large deployments,
  data may be partitioned into multiple datasets.
- Searching through your MapsIndoors data is an integral part of a great user experience
  with your maps.
- No authentication details provided in the documentation.
- Custom Floor Selector documentation available.
- Some objects like Contact may return nulls in deeply nested fields
- Datasets are removed from the cache using MPDataSetCache.
- It is important that the class representing the custom floor selector you have developed
  must conform to both the UIView and MPCustomFloorSelector protocols.
- Only the polygon stroke color, width and opacity values are respected.
- Utilizing constraints is highly recommended for compatibility across various devices.
- Uses OAuth2 for authentication
- Custom Properties can be added through the Integration API with the same requirements
  as in the CMS.
- It's important to notice that you need to adjust the padding so it fits your solution.
- MapsIndoors applies a Google Maps styling that hides most POI icons that may collide
  with MapsIndoors content.
- To switch Solutions you just set up MapsIndoors with a new MapsIndoors API key.
- Show User's Location aka. Blue Dot
- Generate and apply a random position for user location
- Optionally override the default icon for blue dot
- To switch Solutions you just set up MapsIndoors with a new MapsIndoors API key by
  calling `setupMapsIndoors` with your new desired API key.
- Show User's Location aka. Blue Dot feature available.
- The new Highlight Display Rule has a collection of new properties that can be used
  to change the style of the Highlight badge.
- Uses API keys for Google Maps and Mapbox Maps
- Translations must be provided by the user in the CMS.
- Both versions of MapsIndoors must use the same version to avoid issues.
- 'If you do not have access to this through your own Solution, we recommend using
  our demo API key to access one: `02c329e6777d431a88480a09`.'
- Fallback language is English.
- No positioning inside the MapsIndoors SDK, but a positioning interface is provided
  to hook up positioning data.
- 'If you do not have access to this through your own Solution, we recommend using
  our demo API key to access one: mapspeople3d.'
- We do not offer any positioning inside the MapsIndoors SDK, but do deliver a positioning
  interface that allows you to hook up positioning data on the map.
- The default label position has been changed from right of the Marker to underneath
  the marker.
- It will not be possible with the 4.0.0 to programatically change the label positioning,
  but this feature will become available in 4.1.0.
- '`ClearWayType` has been deprecated with the introduction of multiple `wayType`
  categories, going forward you should use `ClearAvoidWayType` instead.'
- API requires OAuth2 authentication.
- Ensure to handle token expiration properly.
- Venue and Building geodata will disregard the floor index and will be given based
  on the latitude/logitude alone.
- Floor and Room geodata will respect the floor index and will return if the latitude/logitude
  intersects AND the given floorindex matches.
- If no matches where found, an empty list will be returned.
- Floor indexes can be viewed in the CMS under the Building's detail page.
- Authentication is required to access the API.
- Ensure to follow the guidelines for setting up the API keys.
- Venue and Building geodata will disregard the floor index.
- Floor and Room geodata will respect the floor index.
- API requires an API key for authentication.
- 'Requires user to have one of the following roles: admin, editor, owner, service'
- Default route can be used for testing if the service is running.
- This method should only be used for development or testing purposes.
- Never hardcode your MapsIndoors username and password directly into your client-side
  code.
- This access token method should only be used for development or testing purposes.
- Users must authenticate with MapsIndoors, even if they are already logged in to
  your application.
- The `response_type` is set to `code`, indicating that the authorization code flow
  is being used.
- Ensure correct OAuth scopes are set
- Some APIs may have rate limits that need to be respected.
- The use of graphic labels is currently in a preview phase, meaning that you can
  only choose from MapsIndoors Labels.
- Display Rules can be accessed via Location Details or Location Types.
- Display Rules can inherit values from Main Display Rule.
- Files cannot be larger than 8 mb.
- If a file with the same name exists, a warning will appear.
- Some endpoints may have specific access restrictions
- Categories are intended for filtering and enhancing search experiences.
- The system will accept a Boolean for Visibility, so either true or false.
- The value for Zoom from should be a number between 1 and 25, with 1 being very far
  away, and 25 being very close.
- The value for Zoom to should be a number between 1 and 25, similar to Zoom from.
- The value for Stroke opacity should be between 0 and 1.
- IndoorView only supports publicly available Google Street View imagery.
- The system will accept a Boolean here, so either true or false.
- The value should be a number between 1 and 25, with 1 being very far away, and 25
  being very close (25 not available for all Solutions).
- In a general use case, most users will only need values between 15 and 25.
- If you are developing using the JavaScript SDK for Google Maps, the value must be
  an integer. If you are developing for Android or iOS, or using a different map provider,
  the value may be fractional.
- Checking the Max zoom checkbox will ensure that the Building Outline will be visible
  at the largest possible Zoom level (this value may increase in the future).
- The value here should be between 0 and 1, for example a value of 1 gives 100% opacity,
  0.2 gives 20% opacity, etc.
- The Audit Log functionality is a configurable feature in MapsIndoors, and if not
  enabled on your Solution, it can be on request.
- The log will be in CSV format, which can be opened by a spreadsheet program eg.
  Excel.
- Detail Key can only be edited during the initial creation.
- Depending on your user role and Graph Setup, you have different options to alter
  with the route network.
- To add a new language, locate the folder `packages/map-template/src/i18n`.
- Copy the content of the `en.js` file into a new file for your desired language.
- This guide refers to GCS, but many steps are identical for AWS, Azure Blob, and
  others.
- This feature is only available on Mapbox.
- The MapsIndoors Solution you want to load.
- Your Google Maps API key.
- Your Mapbox Access Token. Setting it will load a Mapbox map.
- Show in app toggle must be enabled to display additional details.
- Copy the content of the `en.js` file into a new file, for example `pt.js` if you
  plan to support Portuguese.
- Uses query parameters for additional configurations.
- You can upload the files manually to your bucket or use the helpful CLI gsutil.
- 'Security note: The Gemini API key is exposed in client-side code for demo purposes.
  In production, handle it securely on a backend server.'
- Integrating the Map Template as either a React Component or a Web Component allows
  for great customization through the MapsIndoors instance.
- Show in app toggle must be enabled to display additional details in the app.
- Standard map style can be customized.
- The web app adapts to the user's browser language settings.
- If the language is set to 'German', location names and categories will only show
  in German if they have been translated.
- Authentication is required.
- 'Security note: The Gemini API key is exposed in client-side code for demo purposes.'
- This requires using Mapbox 11.
- Requires setup of MapsIndoors dependency in build.gradle file.
- Requires a valid Mapbox access token for map styles.
- Some API responses may vary based on user permissions.
- OAuth2 authentication is required to access the API.
- Ensure that your API key is kept secure.
- Requires using Mapbox 11 for Android and iOS SDKs
- API requires authentication via OAuth2.
- Moved from mapsindoors to allow for multiple map providers
- The MapsIndoorsWidget has been changed to be a UniqueWidget, this is to ensure that
  the underlying MapsIndoors in the platform code can function normally.
- Some methods have changed naming to avoid collision with popular method and parameter
  naming
- 'If you do not have access to this through your own Solution, we recommend using
  our demo API key to access one: d876ff0e60bb430b8fabb145.'
- Uses OAuth2 with refresh token
- Requires authenticated access to pull data.
- Rate limits may apply depending on the API usage.
- A MapsIndoors route is made of one or more legs, each containing one or more steps.
- Uses OAuth2 with refresh token — requires setup of connected app in API
- Requires setup of connected app in Cisco DNA
- Ensure integration with MapsIndoors is successful
- IndoorAtlas does not support BitCode, so this must be disabled.
- Make sure you have integrated MapsIndoors successfully.
- This application uses your location in order to provide wayfinding to indoor facilities.
- To switch Solutions, ensure all existing instances are closed down safely before
  using setupMapsIndoors.
- To switch Solutions, ensure all existing instances are closed down safely.
- Show User's Location aka. Blue Dot functionality available
- Uses MapsIndoors SDK for location services
- User's location is referred to as Blue Dot
- Requires setup of OAuth2 credentials.
- Demo venue coordinates are latitude 57.057964 and longitude 9.9504112
- Icon size for user location is 30x30
- As not all locations have polygons, the polygon array may be empty.
- Some locations, like entire building floors, might have more than one polygon.
- If you need to work with MapsIndoors SDK from behind a firewall, you might need
  to allowlist specific IP addresses.
- Not all locations have polygons; the polygon array may be empty.
- Requires setup of connected app in MapsIndoors.
- Ensure the API key has the necessary permissions.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Status fetch failed: Check endpoint and parameters'
- 'Booking failed: Verify booking details and availability'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '400 Bad Request: Check the request parameters.'
- '404 Not Found: Verify the endpoint URL.'
- '500 Internal Server Error: Try again later.'
- '401 Unauthorized: Invalid API key or token'
- '404 Not Found: Endpoint does not exist'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API keys or permissions'
- '401 Unauthorized: Recheck API key or token expiration'
- 'Error: Invalid API key'
- 'Error: Unsupported map provider'
- '401 Unauthorized: Check your credentials and OAuth2 setup.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '401 Unauthorized: Check if your API key is valid.'
- '404 Not Found: The requested resource could not be found.'
- '401 Unauthorized: Check if the API key is valid.'
- 400 BadRequest
- 401 Unauthorized. User needs to login first.
- 404 NotFound
- '401 Unauthorized: Recheck API key validity'
- 400 BadRequest (Missing or malformed datasetId)
- 400 BadRequest (Malformed solutionId)
- 400 BadRequest. (Missing or malformed datasetId)
- 'HTTP error! status: {response.status}'
- '401 Unauthorized: Check OAuth token'
- '404 Not Found: Verify endpoint URL'
- '500 Internal Server Error: Try again later'
- 'RATE_LIMIT_EXCEEDED: Slow down your requests.'
- 'INVALID_TOKEN: Ensure the token is valid and not expired.'
- '401 Unauthorized: Check your access token.'
- '404 Not Found: Verify the endpoint path.'
- '401 Unauthorized: Invalid client credentials.'
- '404 Not Found: The requested resource does not exist.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify your access token.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Check your authentication credentials.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - MIGoogleMap
  - MIMapboxMap
  - MapControl
  - OAuth
  - AccessToken
client:
  base_url: https://app.mapsindoors.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.api.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
