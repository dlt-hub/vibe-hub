resources:
- name: users_permissions
  endpoint:
    path: /pub/users/
    method: GET
    data_selector: user_permissions
- name: user_invite_history
  endpoint:
    path: /pub/userinvitehistory/
    method: GET
    data_selector: invite_history
- name: user_history
  endpoint:
    path: /pub/userhistory/
    method: GET
    data_selector: user_history
- name: groups
  endpoint:
    path: /pub/groups/
    method: GET
    data_selector: groups
- name: applications
  endpoint:
    path: /store/application
    method: GET
    data_selector: data
    params: {}
- name: bundles
  endpoint:
    path: /store/bundles
    method: GET
    data_selector: data
    params: {}
- name: ISteamApps
  endpoint:
    path: /ISteamApps
    method: GET
- name: ISteamUser
  endpoint:
    path: /ISteamUser
    method: GET
- name: request_form
  endpoint:
    path: https://help.steampowered.com/en/wizard/HelpWithPublishing?issueid=914
    method: GET
- name: Ban_CD_Key_Tool
  endpoint:
    path: https://partner.steamgames.com/partnerbatchbancdkeys/
    method: GET
- name: ISteamApps
  endpoint:
    path: /ISteamApps
    method: GET
- name: ISteamUser
  endpoint:
    path: /ISteamUser
    method: GET
- name: DLC Information
  endpoint:
    path: /seasonpass/dlcinfo
    method: GET
    data_selector: dlc_records
- name: top_sellers
  endpoint:
    path: /store/top_sellers
    method: GET
    data_selector: top_sellers
    params: {}
- name: top_sellers
  endpoint:
    path: /search/?filter=globaltopsellers
    method: GET
- name: charts
  endpoint:
    path: /stats/
    method: GET
- name: user_reviews
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: reviews
    params: {}
- name: RequestNotifications
  endpoint:
    path: /IGameNotificationsService/RequestNotifications
    method: POST
- name: CreateSession
  endpoint:
    path: /IGameNotificationsService/CreateSession
    method: POST
- name: DeleteSession
  endpoint:
    path: /IGameNotificationsService/DeleteSession
    method: POST
- name: UpdateSession
  endpoint:
    path: /IGameNotificationsService/UpdateSession
    method: POST
- name: EnumerateSessionsForApp
  endpoint:
    path: /IGameNotificationsService/EnumerateSessionsForApp
    method: GET
- name: GetSessionDetailsForApp
  endpoint:
    path: /IGameNotificationsService/GetSessionDetailsForApp
    method: GET
- name: User Stats
  endpoint:
    path: /ISteamUserStats
    method: GET
    data_selector: stats
- name: Achievements
  endpoint:
    path: /ISteamUserStats
    method: GET
    data_selector: achievements
- name: Global Stats
  endpoint:
    path: /ISteamUserStats
    method: GET
    data_selector: globalStats
- name: community_hub
  endpoint:
    path: /community_hubs
    method: GET
    data_selector: hubs
    params: {}
- name: Automated Steam DRM Wrapper
  endpoint:
    path: /drm_wrap
    method: POST
    data_selector: response
    params: {}
- name: Manual Steam DRM Wrapper
  endpoint:
    path: /manual_drm_wrap
    method: POST
    data_selector: response
    params: {}
- name: CheckAppOwnership
  endpoint:
    path: /ISteamUser/CheckAppOwnership
    method: GET
- name: BIsSubscribedFromFamilySharing
  endpoint:
    path: /ISteamApps/BIsSubscribedFromFamilySharing
    method: GET
- name: GetAppOwner
  endpoint:
    path: /ISteamApps/GetAppOwner
    method: GET
- name: GetAllItems
  endpoint:
    path: /doc/api/ISteamInventory#GetAllItems
    method: GET
- name: GenerateItems
  endpoint:
    path: /doc/api/ISteamInventory#GenerateItems
    method: POST
- name: TriggerItemDrop
  endpoint:
    path: /doc/api/ISteamInventory#TriggerItemDrop
    method: POST
- name: RequestPrices
  endpoint:
    path: /doc/api/ISteamInventory#RequestPrices
    method: GET
- name: GetItemPrice
  endpoint:
    path: /doc/api/ISteamInventory#GetItemPrice
    method: GET
- name: StartPurchase
  endpoint:
    path: /doc/api/ISteamInventory#StartPurchase
    method: POST
- name: leaderboard
  endpoint:
    path: /ISteamUserStats/FindOrCreateLeaderboard
    method: POST
- name: upload_leaderboard_score
  endpoint:
    path: /ISteamUserStats/UploadLeaderboardScore
    method: POST
- name: download_leaderboard_entries
  endpoint:
    path: /ISteamUserStats/DownloadLeaderboardEntries
    method: GET
- name: find_leaderboard
  endpoint:
    path: /ISteamUserStats/FindLeaderboard
    method: GET
- name: get_leaderboard_info
  endpoint:
    path: /ISteamUserStats/GetLeaderboardName
    method: GET
- name: ISteamRemotePlay
  endpoint:
    path: /ISteamRemotePlay
    method: GET
    data_selector: sessions
    params: {}
- name: ISteamScreenshots
  endpoint:
    path: /api/ISteamScreenshots
    method: GET
    data_selector: records
- name: AddTimelineEvent
  endpoint:
    path: /AddTimelineEvent
    method: POST
- name: ISteamUGC
  endpoint:
    path: /ISteamUGC
    method: GET
- name: Steam Microtransactions
  endpoint:
    path: /SteamMicrotransactions
    method: GET
- name: Steam Inventory Service
  endpoint:
    path: /SteamInventoryService
    method: GET
- name: AuthenticateUserTicket
  endpoint:
    path: /ISteamUserAuth/AuthenticateUserTicket
    method: POST
- name: CheckAppOwnership
  endpoint:
    path: /ISteamUser/CheckAppOwnership
    method: POST
- name: GetPublisherAppOwnership
  endpoint:
    path: /ISteamUser/GetPublisherAppOwnership
    method: POST
- name: ISteamUser/CheckAppOwnership
  endpoint:
    path: /ISteamUser/CheckAppOwnership
    method: GET
- name: ISteamInventory::AddPromoItem
  endpoint:
    path: /ISteamInventory/AddPromoItem
    method: POST
- name: ISteamUser::GetAuthSessionTicket
  endpoint:
    path: /ISteamUser/GetAuthSessionTicket
    method: GET
- name: ISteamUserAuth/AuthenticateUserTicket
  endpoint:
    path: /ISteamUserAuth/AuthenticateUserTicket
    method: POST
- name: VAC
  endpoint:
    path: /vac
    method: GET
- name: GameBans
  endpoint:
    path: /gamebans
    method: GET
- name: ISteamApps
  endpoint:
    path: /ISteamApps
    method: GET
- name: ISteamUser
  endpoint:
    path: /ISteamUser
    method: GET
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: records
    params: {}
- name: store
  endpoint:
    path: /store
    method: GET
    data_selector: records
    params: {}
- name: discount_management
  endpoint:
    path: /promotion/discounts/dashboard/
    method: GET
    data_selector: discounts
    params: {}
- name: 2025_autumn_sale
  endpoint:
    path: /promotion/discounts/dashboard/
    method: GET
- name: 2025_winter_sale
  endpoint:
    path: /promotion/discounts/dashboard/
    method: GET
- name: 2026_spring_sale
  endpoint:
    path: /promotion/discounts/dashboard/
    method: GET
- name: 2025_next_fest
  endpoint:
    path: /optin/sale/sale_nextfest_oct_2025
    method: GET
- name: 2026_next_fest
  endpoint:
    path: /optin/admin/edit/sale_nextfest_february_2026
    method: GET
- name: UTM Analytics
  endpoint:
    path: /utm_analytics
    method: GET
    data_selector: utm_data
- name: upcoming_events
  endpoint:
    path: /doc/marketing/upcoming_events
    method: GET
- name: utm_analytics
  endpoint:
    path: /doc/marketing/utm_analytics
    method: GET
- name: visibility
  endpoint:
    path: /doc/marketing/visibility
    method: GET
- name: wishlist
  endpoint:
    path: /doc/marketing/wishlist
    method: GET
- name: sdk
  endpoint:
    path: /doc/sdk
    method: GET
- name: web_api_overview
  endpoint:
    path: /doc/webapi_overview
    method: GET
- name: accessibility_features
  endpoint:
    path: /doc/accessibility_features
    method: GET
- name: steam_deck
  endpoint:
    path: /doc/steamdeck
    method: GET
- name: pc_cafe_program
  endpoint:
    path: /doc/sitelicense
    method: GET
- name: setup
  endpoint:
    path: /setup.ini
    method: GET
    data_selector: parameters
    params: {}
- name: localized_setup
  endpoint:
    path: /resources/setup_<language>.ini
    method: GET
    data_selector: parameters
    params: {}
- name: ISteamNews
  endpoint:
    path: /ISteamNews/GetNewsForApp/v2/
    method: GET
    params:
      appid: '440'
      count: '3'
- name: ISteamApps
  endpoint:
    path: /ISteamApps
    method: GET
- name: ISteamUser
  endpoint:
    path: /ISteamUser
    method: GET
- name: ISteamApps
  endpoint:
    path: /ISteamApps
    method: GET
- name: ISteamClient
  endpoint:
    path: /ISteamClient
    method: GET
- name: ISteamUser
  endpoint:
    path: /ISteamUser
    method: GET
- name: compatibility_review
  endpoint:
    path: /compatibility/review
    method: GET
    data_selector: results
    params: {}
- name: deck_compatibility_checklist
  endpoint:
    path: /deck/compatibility/checklist
    method: GET
    data_selector: checklist_items
    params: {}
- name: GetDLCCount
  endpoint:
    path: /ISteamApps/GetDLCCount
    method: GET
    data_selector: DLCCount
    params: {}
- name: BGetDLCDataByIndex
  endpoint:
    path: /ISteamApps/BGetDLCDataByIndex
    method: GET
    data_selector: DLCData
    params: {}
- name: BIsAppInstalled
  endpoint:
    path: /ISteamApps/BIsAppInstalled
    method: GET
    data_selector: isInstalled
    params: {}
- name: BIsDlcInstalled
  endpoint:
    path: /ISteamApps/BIsDlcInstalled
    method: GET
    data_selector: isDlcInstalled
    params: {}
- name: GetAppBuildId
  endpoint:
    path: /ISteamApps/GetAppBuildId
    method: GET
    data_selector: buildId
    params: {}
- name: ISteamApps
  endpoint:
    path: /ISteamApps
    method: GET
    data_selector: interface
    params: {}
- name: ISteamController
  endpoint:
    path: /ISteamController
    method: GET
    data_selector: interface
    params: {}
- name: ISteamFriends
  endpoint:
    path: /ISteamFriends
    method: GET
    data_selector: interface
    params: {}
- name: ISteamGameServer
  endpoint:
    path: /ISteamGameServer
    method: GET
    data_selector: interface
    params: {}
- name: ISteamGameServerStats
  endpoint:
    path: /ISteamGameServerStats
    method: GET
    data_selector: interface
    params: {}
- name: ISteamHTMLSurface
  endpoint:
    path: /ISteamHTMLSurface
    method: GET
    data_selector: interface
    params: {}
- name: ISteamHTTP
  endpoint:
    path: /ISteamHTTP
    method: GET
    data_selector: interface
    params: {}
- name: ISteamInventory
  endpoint:
    path: /ISteamInventory
    method: GET
    data_selector: interface
    params: {}
- name: ISteamMatchmaking
  endpoint:
    path: /ISteamMatchmaking
    method: GET
    data_selector: interface
    params: {}
- name: ISteamMusic
  endpoint:
    path: /ISteamMusic
    method: GET
    data_selector: interface
    params: {}
- name: ISteamNetworking
  endpoint:
    path: /ISteamNetworking
    method: GET
    data_selector: interface
    params: {}
- name: ISteamRemoteStorage
  endpoint:
    path: /ISteamRemoteStorage
    method: GET
    data_selector: interface
    params: {}
- name: ISteamScreenshots
  endpoint:
    path: /ISteamScreenshots
    method: GET
    data_selector: interface
    params: {}
- name: ISteamUGC
  endpoint:
    path: /ISteamUGC
    method: GET
    data_selector: interface
    params: {}
- name: ISteamUnifiedMessages
  endpoint:
    path: /ISteamUnifiedMessages
    method: GET
    data_selector: interface
    params: {}
- name: ISteamUser
  endpoint:
    path: /ISteamUser
    method: GET
    data_selector: interface
    params: {}
- name: ISteamUserStats
  endpoint:
    path: /ISteamUserStats
    method: GET
    data_selector: interface
    params: {}
- name: ISteamUtils
  endpoint:
    path: /ISteamUtils
    method: GET
    data_selector: interface
    params: {}
- name: ISteamVideo
  endpoint:
    path: /ISteamVideo
    method: GET
    data_selector: interface
    params: {}
- name: ActivateActionSet
  endpoint:
    path: /ActivateActionSet
    method: void
    data_selector: controllerHandle, actionSetHandle
    params: {}
- name: ActivateActionSetLayer
  endpoint:
    path: /ActivateActionSetLayer
    method: void
    data_selector: controllerHandle, actionSetLayerHandle
    params: {}
- name: DeactivateActionSetLayer
  endpoint:
    path: /DeactivateActionSetLayer
    method: void
    data_selector: controllerHandle, actionSetLayerHandle
    params: {}
- name: DeactivateAllActionSetLayers
  endpoint:
    path: /DeactivateAllActionSetLayers
    method: void
    data_selector: controllerHandle
    params: {}
- name: GetActiveActionSetLayers
  endpoint:
    path: /GetActiveActionSetLayers
    method: int
    data_selector: controllerHandle, handlesOut
    params: {}
- name: GetActionSetHandle
  endpoint:
    path: /GetActionSetHandle
    method: ControllerActionSetHandle_t
    data_selector: pszActionSetName
    params: {}
- name: GetAnalogActionData
  endpoint:
    path: /GetAnalogActionData
    method: ControllerAnalogActionData_t
    data_selector: controllerHandle, analogActionHandle
    params: {}
- name: GetAnalogActionHandle
  endpoint:
    path: /GetAnalogActionHandle
    method: ControllerAnalogActionHandle_t
    data_selector: pszActionName
    params: {}
- name: GetAnalogActionOrigins
  endpoint:
    path: /GetAnalogActionOrigins
    method: int
    data_selector: controllerHandle, actionSetHandle, analogActionHandle, originsOut
    params: {}
- name: GetConnectedControllers
  endpoint:
    path: /GetConnectedControllers
    method: int
    data_selector: handlesOut
    params: {}
- name: GetControllerForGamepadIndex
  endpoint:
    path: /GetControllerForGamepadIndex
    method: ControllerHandle_t
    data_selector: nIndex
    params: {}
- name: GetCurrentActionSet
  endpoint:
    path: /GetCurrentActionSet
    method: ControllerActionSetHandle_t
    data_selector: controllerHandle
    params: {}
- name: GetDigitalActionData
  endpoint:
    path: /GetDigitalActionData
    method: ControllerDigitalActionData_t
    data_selector: controllerHandle, digitalActionHandle
    params: {}
- name: GetDigitalActionHandle
  endpoint:
    path: /GetDigitalActionHandle
    method: ControllerDigitalActionHandle_t
    data_selector: pszActionName
    params: {}
- name: GetDigitalActionOrigins
  endpoint:
    path: /GetDigitalActionOrigins
    method: int
    data_selector: controllerHandle, actionSetHandle, digitalActionHandle, originsOut
    params: {}
- name: GetGamepadIndexForController
  endpoint:
    path: /GetGamepadIndexForController
    method: int
    data_selector: ulControllerHandle
    params: {}
- name: GetGlyphForActionOrigin
  endpoint:
    path: /GetGlyphForActionOrigin
    method: const char*
    data_selector: eOrigin
    params: {}
- name: GetInputTypeForHandle
  endpoint:
    path: /GetInputTypeForHandle
    method: ESteamInputType
    data_selector: controllerHandle
    params: {}
- name: GetMotionData
  endpoint:
    path: /GetMotionData
    method: ControllerMotionData_t
    data_selector: controllerHandle
    params: {}
- name: GetStringForActionOrigin
  endpoint:
    path: /GetStringForActionOrigin
    method: const char*
    data_selector: eOrigin
    params: {}
- name: Init
  endpoint:
    path: /Init
    method: bool
    data_selector: ''
    params: {}
- name: RunFrame
  endpoint:
    path: /RunFrame
    method: void
    data_selector: ''
    params: {}
- name: EControllerSource
  endpoint:
    path: /EControllerSource
    method: GET
    data_selector: records
- name: EControllerSourceMode
  endpoint:
    path: /EControllerSourceMode
    method: GET
    data_selector: records
- name: ESteamControllerLEDFlag
  endpoint:
    path: /ESteamControllerLEDFlag
    method: GET
    data_selector: records
- name: ESteamInputType
  endpoint:
    path: /ESteamInputType
    method: GET
    data_selector: records
- name: ESteamControllerPad
  endpoint:
    path: /ESteamControllerPad
    method: GET
    data_selector: records
- name: Typedefs
  endpoint:
    path: /Typedefs
    method: GET
    data_selector: records
- name: Constants
  endpoint:
    path: /Constants
    method: GET
    data_selector: records
- name: ActivateGameOverlay
  endpoint:
    path: /ActivateGameOverlay
    method: GET
    data_selector: none
    params: {}
- name: ActivateGameOverlayInviteDialog
  endpoint:
    path: /ActivateGameOverlayInviteDialog
    method: GET
    data_selector: none
    params: {}
- name: ActivateGameOverlayToStore
  endpoint:
    path: /ActivateGameOverlayToStore
    method: GET
    data_selector: none
    params: {}
- name: ActivateGameOverlayToUser
  endpoint:
    path: /ActivateGameOverlayToUser
    method: GET
    data_selector: none
    params: {}
- name: ActivateGameOverlayToWebPage
  endpoint:
    path: /ActivateGameOverlayToWebPage
    method: GET
    data_selector: none
    params: {}
- name: ClearRichPresence
  endpoint:
    path: /ClearRichPresence
    method: GET
    data_selector: none
    params: {}
- name: CloseClanChatWindowInSteam
  endpoint:
    path: /CloseClanChatWindowInSteam
    method: GET
    data_selector: none
    params: {}
- name: DownloadClanActivityCounts
  endpoint:
    path: /DownloadClanActivityCounts
    method: GET
    data_selector: none
    params: {}
- name: EnumerateFollowingList
  endpoint:
    path: /EnumerateFollowingList
    method: GET
    data_selector: none
    params: {}
- name: GetChatMemberByIndex
  endpoint:
    path: /GetChatMemberByIndex
    method: GET
    data_selector: none
    params: {}
- name: GetClanActivityCounts
  endpoint:
    path: /GetClanActivityCounts
    method: GET
    data_selector: none
    params: {}
- name: GetClanByIndex
  endpoint:
    path: /GetClanByIndex
    method: GET
    data_selector: none
    params: {}
- name: GetClanChatMemberCount
  endpoint:
    path: /GetClanChatMemberCount
    method: GET
    data_selector: none
    params: {}
- name: GetClanChatMessage
  endpoint:
    path: /GetClanChatMessage
    method: GET
    data_selector: none
    params: {}
- name: GetClanCount
  endpoint:
    path: /GetClanCount
    method: GET
    data_selector: none
    params: {}
- name: GetClanName
  endpoint:
    path: /GetClanName
    method: GET
    data_selector: none
    params: {}
- name: GetClanOfficerByIndex
  endpoint:
    path: /GetClanOfficerByIndex
    method: GET
    data_selector: none
    params: {}
- name: GetClanOfficerCount
  endpoint:
    path: /GetClanOfficerCount
    method: GET
    data_selector: none
    params: {}
- name: GetClanOwner
  endpoint:
    path: /GetClanOwner
    method: GET
    data_selector: none
    params: {}
- name: GetClanTag
  endpoint:
    path: /GetClanTag
    method: GET
    data_selector: none
    params: {}
- name: GetCoplayFriend
  endpoint:
    path: /GetCoplayFriend
    method: GET
    data_selector: CSteamID
    params: {}
- name: GetCoplayFriendCount
  endpoint:
    path: /GetCoplayFriendCount
    method: GET
    data_selector: int
    params: {}
- name: GetFollowerCount
  endpoint:
    path: /GetFollowerCount
    method: GET
    data_selector: SteamAPICall_t
    params: {}
- name: GetFriendByIndex
  endpoint:
    path: /GetFriendByIndex
    method: GET
    data_selector: CSteamID
    params: {}
- name: GetFriendCoplayGame
  endpoint:
    path: /GetFriendCoplayGame
    method: GET
    data_selector: AppId_t
    params: {}
- name: GetFriendCoplayTime
  endpoint:
    path: /GetFriendCoplayTime
    method: GET
    data_selector: int
    params: {}
- name: GetFriendCount
  endpoint:
    path: /GetFriendCount
    method: GET
    data_selector: int
    params: {}
- name: GetFriendCountFromSource
  endpoint:
    path: /GetFriendCountFromSource
    method: GET
    data_selector: int
    params: {}
- name: GetFriendFromSourceByIndex
  endpoint:
    path: /GetFriendFromSourceByIndex
    method: GET
    data_selector: CSteamID
    params: {}
- name: GetFriendGamePlayed
  endpoint:
    path: /GetFriendGamePlayed
    method: GET
    data_selector: bool
    params: {}
- name: GetFriendMessage
  endpoint:
    path: /GetFriendMessage
    method: GET
    data_selector: int
    params: {}
- name: GetFriendPersonaName
  endpoint:
    path: /GetFriendPersonaName
    method: GET
    data_selector: const char*
    params: {}
- name: GetFriendPersonaNameHistory
  endpoint:
    path: /GetFriendPersonaNameHistory
    method: GET
    data_selector: const char*
    params: {}
- name: GetFriendPersonaState
  endpoint:
    path: /GetFriendPersonaState
    method: GET
    data_selector: EPersonaState
    params: {}
- name: GetFriendRelationship
  endpoint:
    path: /GetFriendRelationship
    method: GET
    data_selector: EFriendRelationship
    params: {}
- name: GetFriendRichPresence
  endpoint:
    path: /GetFriendRichPresence
    method: GET
    data_selector: const char*
    params: {}
- name: GetFriendRichPresenceKeyByIndex
  endpoint:
    path: /GetFriendRichPresenceKeyByIndex
    method: GET
    data_selector: const char*
    params: {}
- name: GetFriendRichPresenceKeyCount
  endpoint:
    path: /GetFriendRichPresenceKeyCount
    method: GET
    data_selector: int
    params: {}
- name: GetFriendsGroupCount
  endpoint:
    path: /GetFriendsGroupCount
    method: GET
    data_selector: int
    params: {}
- name: GetFriendsGroupIDByIndex
  endpoint:
    path: /GetFriendsGroupIDByIndex
    method: GET
    data_selector: FriendsGroupID_t
    params: {}
- name: GetFriendsGroupMembersCount
  endpoint:
    path: /GetFriendsGroupMembersCount
    method: GET
    data_selector: int
    params: {}
- name: GetFriendsGroupMembersList
  endpoint:
    path: /GetFriendsGroupMembersList
    method: GET
    data_selector: void
    params: {}
- name: GetFriendsGroupName
  endpoint:
    path: /GetFriendsGroupName
    method: GET
    data_selector: const char*
    params: {}
- name: GetFriendSteamLevel
  endpoint:
    path: /GetFriendSteamLevel
    method: GET
    data_selector: int
    params: {}
- name: GetLargeFriendAvatar
  endpoint:
    path: /GetLargeFriendAvatar
    method: GET
    data_selector: int
    params: {}
- name: GetMediumFriendAvatar
  endpoint:
    path: /GetMediumFriendAvatar
    method: GET
    data_selector: int
    params: {}
- name: GetPersonaName
  endpoint:
    path: /GetPersonaName
    method: GET
    data_selector: const char*
    params: {}
- name: GetPersonaState
  endpoint:
    path: /GetPersonaState
    method: GET
    data_selector: EPersonaState
    params: {}
- name: GetPlayerNickname
  endpoint:
    path: /GetPlayerNickname
    method: GET
    data_selector: const char*
    params: {}
- name: GetSmallFriendAvatar
  endpoint:
    path: /GetSmallFriendAvatar
    method: GET
    data_selector: int
    params: {}
- name: HasFriend
  endpoint:
    path: /HasFriend
    method: GET
    data_selector: bool
    params: {}
- name: InviteUserToGame
  endpoint:
    path: /InviteUserToGame
    method: GET
    data_selector: bool
    params: {}
- name: IsClanChatAdmin
  endpoint:
    path: /IsClanChatAdmin
    method: GET
    data_selector: bool
    params: {}
- name: IsClanPublic
  endpoint:
    path: /IsClanPublic
    method: GET
    data_selector: bool
    params: {}
- name: IsClanOfficialGameGroup
  endpoint:
    path: /IsClanOfficialGameGroup
    method: GET
    data_selector: bool
    params: {}
- name: IsClanChatWindowOpenInSteam
  endpoint:
    path: /IsClanChatWindowOpenInSteam
    method: GET
    data_selector: bool
    params: {}
- name: IsFollowing
  endpoint:
    path: /IsFollowing
    method: GET
    data_selector: SteamAPICall_t
    params: {}
- name: IsUserInSource
  endpoint:
    path: /IsUserInSource
    method: GET
    data_selector: bool
    params: {}
- name: JoinClanChatRoom
  endpoint:
    path: /JoinClanChatRoom
    method: GET
    data_selector: SteamAPICall_t
    params: {}
- name: LeaveClanChatRoom
  endpoint:
    path: /LeaveClanChatRoom
    method: GET
    data_selector: bool
    params: {}
- name: OpenClanChatWindowInSteam
  endpoint:
    path: /OpenClanChatWindowInSteam
    method: GET
    data_selector: bool
    params: {}
- name: ReplyToFriendMessage
  endpoint:
    path: /ReplyToFriendMessage
    method: GET
    data_selector: bool
    params: {}
- name: ClanOfficerList
  endpoint:
    path: /RequestClanOfficerList
    method: GET
    data_selector: ClanOfficerListResponse_t
    params: {}
- name: FriendRichPresence
  endpoint:
    path: /RequestFriendRichPresence
    method: GET
    data_selector: FriendRichPresenceUpdate_t
    params: {}
- name: UserInformation
  endpoint:
    path: /RequestUserInformation
    method: GET
    data_selector: PersonaStateChange_t
    params: {}
- name: EquippedProfileItems
  endpoint:
    path: /RequestEquippedProfileItems
    method: GET
    data_selector: EquippedProfileItems_t
    params: {}
- name: GameConnectedChatLeave_t
  endpoint:
    path: /GameConnectedChatLeave
    method: POST
    data_selector: m_steamIDClanChat
    params: {}
- name: GameConnectedClanChatMsg_t
  endpoint:
    path: /GameConnectedClanChatMsg
    method: POST
    data_selector: m_steamIDClanChat
    params: {}
- name: GameConnectedFriendChatMsg_t
  endpoint:
    path: /GameConnectedFriendChatMsg
    method: POST
    data_selector: m_steamIDUser
    params: {}
- name: GameLobbyJoinRequested_t
  endpoint:
    path: /GameLobbyJoinRequested
    method: POST
    data_selector: m_steamIDLobby
    params: {}
- name: GameOverlayActivated_t
  endpoint:
    path: /GameOverlayActivated
    method: POST
    data_selector: m_bActive
    params: {}
- name: GameRichPresenceJoinRequested_t
  endpoint:
    path: /GameRichPresenceJoinRequested
    method: POST
    data_selector: m_steamIDFriend
    params: {}
- name: GameServerChangeRequested_t
  endpoint:
    path: /GameServerChangeRequested
    method: POST
    data_selector: m_rgchServer
    params: {}
- name: JoinClanChatRoomCompletionResult_t
  endpoint:
    path: /JoinClanChatRoomCompletionResult
    method: POST
    data_selector: m_steamIDClanChat
    params: {}
- name: PersonaStateChange_t
  endpoint:
    path: /PersonaStateChange
    method: POST
    data_selector: m_ulSteamID
    params: {}
- name: localization
  endpoint:
    path: /localization
    method: GET
    data_selector: tokens
    params: {}
- name: ISteamApps
  endpoint:
    path: /ISteamApps
    method: GET
- name: ISteamUser
  endpoint:
    path: /ISteamUser
    method: GET
- name: ClearUserAchievement
  endpoint:
    path: /ClearUserAchievement
    method: POST
    data_selector: result
- name: GetUserAchievement
  endpoint:
    path: /GetUserAchievement
    method: GET
    data_selector: result
- name: GetUserStat
  endpoint:
    path: /GetUserStat
    method: GET
    data_selector: result
- name: RequestUserStats
  endpoint:
    path: /RequestUserStats
    method: GET
    data_selector: result
- name: SetUserAchievement
  endpoint:
    path: /SetUserAchievement
    method: POST
    data_selector: result
- name: SetUserStat
  endpoint:
    path: /SetUserStat
    method: POST
    data_selector: result
- name: StoreUserStats
  endpoint:
    path: /StoreUserStats
    method: POST
    data_selector: result
- name: UpdateUserAvgRateStat
  endpoint:
    path: /UpdateUserAvgRateStat
    method: POST
    data_selector: result
- name: StopFind
  endpoint:
    path: /StopFind
    method: void
    data_selector: unBrowserHandle
    params: {}
- name: StopLoad
  endpoint:
    path: /StopLoad
    method: void
    data_selector: unBrowserHandle
    params: {}
- name: ViewSource
  endpoint:
    path: /ViewSource
    method: void
    data_selector: unBrowserHandle
    params: {}
- name: ISteamApps
  endpoint:
    path: /ISteamApps
    method: GET
- name: ISteamUser
  endpoint:
    path: /ISteamUser
    method: GET
- name: ActivateActionSet
  endpoint:
    path: /ActivateActionSet
    method: POST
    data_selector: response
    params: {}
- name: ActivateActionSetLayer
  endpoint:
    path: /ActivateActionSetLayer
    method: POST
    data_selector: response
    params: {}
- name: DeactivateActionSetLayer
  endpoint:
    path: /DeactivateActionSetLayer
    method: POST
    data_selector: response
    params: {}
- name: DeactivateAllActionSetLayers
  endpoint:
    path: /DeactivateAllActionSetLayers
    method: POST
    data_selector: response
    params: {}
- name: GetActiveActionSetLayers
  endpoint:
    path: /GetActiveActionSetLayers
    method: GET
    data_selector: response
    params: {}
- name: GetActionSetHandle
  endpoint:
    path: /GetActionSetHandle
    method: GET
    data_selector: response
    params: {}
- name: GetAnalogActionData
  endpoint:
    path: /GetAnalogActionData
    method: GET
    data_selector: response
    params: {}
- name: GetAnalogActionHandle
  endpoint:
    path: /GetAnalogActionHandle
    method: GET
    data_selector: response
    params: {}
- name: GetAnalogActionOrigins
  endpoint:
    path: /GetAnalogActionOrigins
    method: GET
    data_selector: response
    params: {}
- name: GetConnectedControllers
  endpoint:
    path: /GetConnectedControllers
    method: GET
    data_selector: response
    params: {}
- name: GetControllerForGamepadIndex
  endpoint:
    path: /GetControllerForGamepadIndex
    method: GET
    data_selector: response
    params: {}
- name: GetCurrentActionSet
  endpoint:
    path: /GetCurrentActionSet
    method: GET
    data_selector: response
    params: {}
- name: GetDigitalActionData
  endpoint:
    path: /GetDigitalActionData
    method: GET
    data_selector: response
    params: {}
- name: GetDigitalActionHandle
  endpoint:
    path: /GetDigitalActionHandle
    method: GET
    data_selector: response
    params: {}
- name: GetDigitalActionOrigins
  endpoint:
    path: /GetDigitalActionOrigins
    method: GET
    data_selector: response
    params: {}
- name: GetGamepadIndexForController
  endpoint:
    path: /GetGamepadIndexForController
    method: GET
    data_selector: response
    params: {}
- name: GetGlyphForActionOrigin
  endpoint:
    path: /GetGlyphForActionOrigin
    method: GET
    data_selector: response
    params: {}
- name: GetInputTypeForHandle
  endpoint:
    path: /GetInputTypeForHandle
    method: GET
    data_selector: response
    params: {}
- name: GetMotionData
  endpoint:
    path: /GetMotionData
    method: GET
    data_selector: motionData
- name: GetStringForActionOrigin
  endpoint:
    path: /GetStringForActionOrigin
    method: GET
    data_selector: localizedString
- name: Init
  endpoint:
    path: /Init
    method: GET
    data_selector: 'true'
- name: RunFrame
  endpoint:
    path: /RunFrame
    method: GET
    data_selector: frameSync
- name: SetDualSenseTriggerEffect
  endpoint:
    path: /SetDualSenseTriggerEffect
    method: POST
    data_selector: triggerEffect
- name: SetLEDColor
  endpoint:
    path: /SetLEDColor
    method: POST
    data_selector: ledColorEffect
- name: ShowBindingPanel
  endpoint:
    path: /ShowBindingPanel
    method: GET
    data_selector: bindingPanel
- name: Shutdown
  endpoint:
    path: /Shutdown
    method: GET
    data_selector: 'true'
- name: AddPromoItem
  endpoint:
    path: /AddPromoItem
    method: POST
    data_selector: result
    params: {}
- name: AddPromoItems
  endpoint:
    path: /AddPromoItems
    method: POST
    data_selector: result
    params: {}
- name: CheckResultSteamID
  endpoint:
    path: /CheckResultSteamID
    method: POST
    data_selector: result
    params: {}
- name: ConsumeItem
  endpoint:
    path: /ConsumeItem
    method: POST
    data_selector: result
    params: {}
- name: DeserializeResult
  endpoint:
    path: /DeserializeResult
    method: POST
    data_selector: result
    params: {}
- name: DestroyResult
  endpoint:
    path: /DestroyResult
    method: POST
    data_selector: result
    params: {}
- name: ExchangeItems
  endpoint:
    path: /ExchangeItems
    method: POST
    data_selector: result
    params: {}
- name: GenerateItems
  endpoint:
    path: /GenerateItems
    method: POST
    data_selector: result
    params: {}
- name: GetAllItems
  endpoint:
    path: /GetAllItems
    method: POST
    data_selector: result
    params: {}
- name: GetEligiblePromoItemDefinitionIDs
  endpoint:
    path: /GetEligiblePromoItemDefinitionIDs
    method: POST
    data_selector: result
    params: {}
- name: GetItemDefinitionIDs
  endpoint:
    path: /GetItemDefinitionIDs
    method: POST
    data_selector: result
    params: {}
- name: GetItemDefinitionProperty
  endpoint:
    path: /GetItemDefinitionProperty
    method: GET
    data_selector: result
    params: {}
- name: GetItemsByID
  endpoint:
    path: /GetItemsByID
    method: GET
    data_selector: result
    params: {}
- name: GetItemPrice
  endpoint:
    path: /GetItemPrice
    method: GET
    data_selector: result
    params: {}
- name: GetItemsWithPrices
  endpoint:
    path: /GetItemsWithPrices
    method: GET
    data_selector: result
    params: {}
- name: GetNumItemsWithPrices
  endpoint:
    path: /GetNumItemsWithPrices
    method: GET
    data_selector: result
    params: {}
- name: GetResultItemProperty
  endpoint:
    path: /GetResultItemProperty
    method: GET
    data_selector: result
    params: {}
- name: GetResultItems
  endpoint:
    path: /GetResultItems
    method: GET
    data_selector: result
    params: {}
- name: GetResultStatus
  endpoint:
    path: /GetResultStatus
    method: GET
    data_selector: result
    params: {}
- name: GetResultTimestamp
  endpoint:
    path: /GetResultTimestamp
    method: GET
    data_selector: result
    params: {}
- name: GrantPromoItems
  endpoint:
    path: /GrantPromoItems
    method: GET
    data_selector: result
    params: {}
- name: LoadItemDefinitions
  endpoint:
    path: /LoadItemDefinitions
    method: GET
    data_selector: result
    params: {}
- name: RequestEligiblePromoItemDefinitionsIDs
  endpoint:
    path: /RequestEligiblePromoItemDefinitionsIDs
    method: GET
    data_selector: result
    params: {}
- name: RequestPrices
  endpoint:
    path: /RequestPrices
    method: GET
    data_selector: result
    params: {}
- name: SerializeResult
  endpoint:
    path: /SerializeResult
    method: GET
    data_selector: result
    params: {}
- name: StartPurchase
  endpoint:
    path: /StartPurchase
    method: POST
    data_selector: m_ulOrderID
    params: {}
- name: TransferItemQuantity
  endpoint:
    path: /TransferItemQuantity
    method: POST
    data_selector: result
    params: {}
- name: TriggerItemDrop
  endpoint:
    path: /TriggerItemDrop
    method: POST
    data_selector: result
    params: {}
- name: StartUpdateProperties
  endpoint:
    path: /StartUpdateProperties
    method: POST
    data_selector: handle
    params: {}
- name: SubmitUpdateProperties
  endpoint:
    path: /SubmitUpdateProperties
    method: POST
    data_selector: result
    params: {}
- name: RemoveProperty
  endpoint:
    path: /RemoveProperty
    method: POST
    data_selector: result
    params: {}
- name: SetProperty
  endpoint:
    path: /SetProperty
    method: POST
    data_selector: result
    params: {}
- name: AddFavoriteGame
  endpoint:
    path: /AddFavoriteGame
    method: POST
    data_selector: response
    params: {}
- name: CreateLobby
  endpoint:
    path: /CreateLobby
    method: POST
    data_selector: response
    params: {}
- name: GetFavoriteGame
  endpoint:
    path: /GetFavoriteGame
    method: GET
    data_selector: response
    params: {}
- name: GetFavoriteGameCount
  endpoint:
    path: /GetFavoriteGameCount
    method: GET
    data_selector: response
    params: {}
- name: GetLobbyByIndex
  endpoint:
    path: /GetLobbyByIndex
    method: GET
    data_selector: response
    params: {}
- name: GetLobbyChatEntry
  endpoint:
    path: /GetLobbyChatEntry
    method: GET
    data_selector: response
    params: {}
- name: GetLobbyData
  endpoint:
    path: /GetLobbyData
    method: GET
    data_selector: response
    params: {}
- name: GetLobbyDataCount
  endpoint:
    path: /GetLobbyDataCount
    method: GET
    data_selector: response
    params: {}
- name: GetLobbyGameServer
  endpoint:
    path: /GetLobbyGameServer
    method: GET
    data_selector: response
    params: {}
- name: GetLobbyMemberByIndex
  endpoint:
    path: /GetLobbyMemberByIndex
    method: GET
    data_selector: response
    params: {}
- name: GetLobbyMemberData
  endpoint:
    path: /GetLobbyMemberData
    method: GET
    data_selector: response
    params: {}
- name: GetLobbyMemberLimit
  endpoint:
    path: /GetLobbyMemberLimit
    method: GET
    data_selector: Returns
- name: GetLobbyOwner
  endpoint:
    path: /GetLobbyOwner
    method: GET
    data_selector: Returns
- name: GetNumLobbyMembers
  endpoint:
    path: /GetNumLobbyMembers
    method: GET
    data_selector: Returns
- name: InviteUserToLobby
  endpoint:
    path: /InviteUserToLobby
    method: POST
    data_selector: Returns
- name: JoinLobby
  endpoint:
    path: /JoinLobby
    method: POST
    data_selector: Returns
- name: LeaveLobby
  endpoint:
    path: /LeaveLobby
    method: POST
    data_selector: ''
- name: RemoveFavoriteGame
  endpoint:
    path: /RemoveFavoriteGame
    method: POST
    data_selector: Returns
- name: RequestLobbyData
  endpoint:
    path: /RequestLobbyData
    method: POST
    data_selector: Returns
- name: RequestLobbyList
  endpoint:
    path: /RequestLobbyList
    method: GET
    data_selector: Returns
- name: SendLobbyChatMsg
  endpoint:
    path: /SendLobbyChatMsg
    method: POST
    data_selector: Returns
- name: SetLinkedLobby
  endpoint:
    path: /SetLinkedLobby
    method: POST
    data_selector: Returns
- name: SetLobbyData
  endpoint:
    path: /SetLobbyData
    method: POST
    data_selector: Returns
- name: SetLobbyGameServer
  endpoint:
    path: /SetLobbyGameServer
    method: POST
    data_selector: ''
- name: SetLobbyJoinable
  endpoint:
    path: /SetLobbyJoinable
    method: POST
    data_selector: Returns
- name: SetLobbyMemberData
  endpoint:
    path: /SetLobbyMemberData
    method: POST
    data_selector: ''
- name: SetLobbyMemberLimit
  endpoint:
    path: /SetLobbyMemberLimit
    method: POST
    data_selector: Returns
- name: SetLobbyOwner
  endpoint:
    path: /SetLobbyOwner
    method: POST
    data_selector: Returns
- name: SetLobbyType
  endpoint:
    path: /SetLobbyType
    method: POST
    data_selector: Returns
- name: GetServerCount
  endpoint:
    path: /GetServerCount
    method: GET
    data_selector: result
    params: {}
- name: GetServerDetails
  endpoint:
    path: /GetServerDetails
    method: GET
    data_selector: result
    params: {}
- name: PingServer
  endpoint:
    path: /PingServer
    method: GET
    data_selector: result
    params: {}
- name: PlayerDetails
  endpoint:
    path: /PlayerDetails
    method: GET
    data_selector: result
    params: {}
- name: ServerRules
  endpoint:
    path: /ServerRules
    method: GET
    data_selector: result
    params: {}
- name: ISteamApps
  endpoint:
    path: /ISteamApps
    method: GET
- name: ISteamUser
  endpoint:
    path: /ISteamUser
    method: GET
- name: SendMessageToUser
  endpoint:
    path: /SendMessageToUser
    method: POST
    data_selector: result
    params: {}
- name: ReceiveMessagesOnChannel
  endpoint:
    path: /ReceiveMessagesOnChannel
    method: GET
    data_selector: messages
    params: {}
- name: AcceptSessionWithUser
  endpoint:
    path: /AcceptSessionWithUser
    method: POST
    data_selector: result
    params: {}
- name: CloseSessionWithUser
  endpoint:
    path: /CloseSessionWithUser
    method: POST
    data_selector: result
    params: {}
- name: CloseChannelWithUser
  endpoint:
    path: /CloseChannelWithUser
    method: POST
    data_selector: result
    params: {}
- name: GetSessionConnectionInfo
  endpoint:
    path: /GetSessionConnectionInfo
    method: GET
    data_selector: connection_info
    params: {}
- name: CreateListenSocketIP
  endpoint:
    path: /CreateListenSocketIP
    method: POST
    data_selector: result
    params: {}
- name: ConnectByIPAddress
  endpoint:
    path: /ConnectByIPAddress
    method: POST
    data_selector: result
    params: {}
- name: CreateListenSocketP2P
  endpoint:
    path: /CreateListenSocketP2P
    method: POST
    data_selector: result
    params: {}
- name: ConnectP2P
  endpoint:
    path: /ConnectP2P
    method: POST
    data_selector: result
    params: {}
- name: AcceptConnection
  endpoint:
    path: /AcceptConnection
    method: POST
    data_selector: result
    params: {}
- name: CloseConnection
  endpoint:
    path: /CloseConnection
    method: POST
    data_selector: result
    params: {}
- name: CloseListenSocket
  endpoint:
    path: /CloseListenSocket
    method: POST
    data_selector: result
    params: {}
- name: CreateSocketPair
  endpoint:
    path: /CreateSocketPair
    method: POST
    data_selector: result
    params: {}
- name: SendMessageToConnection
  endpoint:
    path: /SendMessageToConnection
    method: POST
    data_selector: result
    params: {}
- name: ReceiveMessagesOnConnection
  endpoint:
    path: /ReceiveMessagesOnConnection
    method: POST
    data_selector: result
    params: {}
- name: CreatePollGroup
  endpoint:
    path: /CreatePollGroup
    method: POST
    data_selector: result
    params: {}
- name: SetConnectionPollGroup
  endpoint:
    path: /SetConnectionPollGroup
    method: POST
    data_selector: result
    params: {}
- name: CreateBeacon
  endpoint:
    path: /ISteamParties/CreateBeacon
    method: POST
- name: OnReservationCompleted
  endpoint:
    path: /ISteamParties/OnReservationCompleted
    method: POST
- name: DestroyBeacon
  endpoint:
    path: /ISteamParties/DestroyBeacon
    method: POST
- name: GetNumActiveBeacons
  endpoint:
    path: /ISteamParties/GetNumActiveBeacons
    method: GET
- name: GetBeaconDetails
  endpoint:
    path: /ISteamParties/GetBeaconDetails
    method: GET
- name: JoinParty
  endpoint:
    path: /ISteamParties/JoinParty
    method: POST
- name: GetNumAvailableBeaconLocations
  endpoint:
    path: /ISteamParties/GetNumAvailableBeaconLocations
    method: GET
    data_selector: result
    params: {}
- name: GetAvailableBeaconLocations
  endpoint:
    path: /ISteamParties/GetAvailableBeaconLocations
    method: GET
    data_selector: result
    params: {}
- name: CreateBeacon
  endpoint:
    path: /ISteamParties/CreateBeacon
    method: POST
    data_selector: result
    params: {}
- name: OnReservationCompleted
  endpoint:
    path: /ISteamParties/OnReservationCompleted
    method: POST
    data_selector: result
    params: {}
- name: ChangeNumOpenSlots
  endpoint:
    path: /ISteamParties/ChangeNumOpenSlots
    method: POST
    data_selector: result
    params: {}
- name: DestroyBeacon
  endpoint:
    path: /ISteamParties/DestroyBeacon
    method: POST
    data_selector: result
    params: {}
- name: GetNumActiveBeacons
  endpoint:
    path: /ISteamParties/GetNumActiveBeacons
    method: GET
    data_selector: result
    params: {}
- name: GetBeaconByIndex
  endpoint:
    path: /ISteamParties/GetBeaconByIndex
    method: GET
    data_selector: result
    params: {}
- name: GetBeaconDetails
  endpoint:
    path: /ISteamParties/GetBeaconDetails
    method: GET
    data_selector: result
    params: {}
- name: JoinParty
  endpoint:
    path: /ISteamParties/JoinParty
    method: POST
    data_selector: result
    params: {}
- name: GetBeaconLocationData
  endpoint:
    path: /ISteamParties/GetBeaconLocationData
    method: GET
    data_selector: result
    params: {}
- name: ISteamApps
  endpoint:
    path: /ISteamApps
    method: GET
- name: ISteamUser
  endpoint:
    path: /ISteamUser
    method: GET
- name: GetSessionCount
  endpoint:
    path: /GetSessionCount
    method: GET
    data_selector: sessionCount
- name: GetSessionID
  endpoint:
    path: /GetSessionID
    method: GET
    data_selector: sessionID
- name: GetSessionSteamID
  endpoint:
    path: /GetSessionSteamID
    method: GET
    data_selector: steamID
- name: GetSessionClientName
  endpoint:
    path: /GetSessionClientName
    method: GET
    data_selector: clientName
- name: GetSessionClientFormFactor
  endpoint:
    path: /GetSessionClientFormFactor
    method: GET
    data_selector: clientFormFactor
- name: BGetSessionClientResolution
  endpoint:
    path: /BGetSessionClientResolution
    method: GET
    data_selector: clientResolution
- name: ShowRemotePlayTogetherUI
  endpoint:
    path: /ShowRemotePlayTogetherUI
    method: GET
    data_selector: showRemotePlayUI
- name: BSendRemotePlayTogetherInvite
  endpoint:
    path: /BSendRemotePlayTogetherInvite
    method: POST
    data_selector: sendInvite
- name: BEnableRemotePlayTogetherDirectInput
  endpoint:
    path: /BEnableRemotePlayTogetherDirectInput
    method: POST
    data_selector: enableDirectInput
- name: DisableRemotePlayTogetherDirectInput
  endpoint:
    path: /DisableRemotePlayTogetherDirectInput
    method: POST
    data_selector: disableDirectInput
- name: GetInput
  endpoint:
    path: /GetInput
    method: GET
    data_selector: inputEvents
- name: SetMouseVisibility
  endpoint:
    path: /SetMouseVisibility
    method: POST
    data_selector: setMouseVisibility
- name: SetMousePosition
  endpoint:
    path: /SetMousePosition
    method: POST
    data_selector: setMousePosition
- name: CreateMouseCursor
  endpoint:
    path: /CreateMouseCursor
    method: POST
    data_selector: createMouseCursor
- name: SetMouseCursor
  endpoint:
    path: /SetMouseCursor
    method: POST
    data_selector: setMouseCursor
- name: ISteamApps
  endpoint:
    path: /ISteamApps
    method: GET
    data_selector: records
- name: ISteamUser
  endpoint:
    path: /ISteamUser
    method: GET
    data_selector: records
- name: FileWrite
  endpoint:
    path: /FileWrite
    method: POST
    data_selector: response
    params: {}
- name: FileRead
  endpoint:
    path: /FileRead
    method: GET
    data_selector: response
    params: {}
- name: FileDelete
  endpoint:
    path: /FileDelete
    method: DELETE
    data_selector: response
    params: {}
- name: FileExists
  endpoint:
    path: /FileExists
    method: GET
    data_selector: response
    params: {}
- name: FileForget
  endpoint:
    path: /FileForget
    method: POST
    data_selector: response
    params: {}
- name: FilePersisted
  endpoint:
    path: /FilePersisted
    method: GET
    data_selector: response
    params: {}
- name: UpdatePublishedFileDescription
  endpoint:
    path: /UpdatePublishedFileDescription
    method: POST
    data_selector: result
    params: {}
- name: UpdatePublishedFileFile
  endpoint:
    path: /UpdatePublishedFileFile
    method: POST
    data_selector: result
    params: {}
- name: UpdatePublishedFilePreviewFile
  endpoint:
    path: /UpdatePublishedFilePreviewFile
    method: POST
    data_selector: result
    params: {}
- name: UpdatePublishedFileSetChangeDescription
  endpoint:
    path: /UpdatePublishedFileSetChangeDescription
    method: POST
    data_selector: result
    params: {}
- name: UpdatePublishedFileTags
  endpoint:
    path: /UpdatePublishedFileTags
    method: POST
    data_selector: result
    params: {}
- name: UpdatePublishedFileTitle
  endpoint:
    path: /UpdatePublishedFileTitle
    method: POST
    data_selector: result
    params: {}
- name: UpdatePublishedFileVisibility
  endpoint:
    path: /UpdatePublishedFileVisibility
    method: POST
    data_selector: result
    params: {}
- name: UpdateUserPublishedItemVote
  endpoint:
    path: /UpdateUserPublishedItemVote
    method: POST
    data_selector: result
    params: {}
- name: AddScreenshotToLibrary
  endpoint:
    path: /AddScreenshotToLibrary
    method: POST
    data_selector: ScreenshotHandle
    params: {}
- name: AddVRScreenshotToLibrary
  endpoint:
    path: /AddVRScreenshotToLibrary
    method: POST
    data_selector: ScreenshotHandle
    params: {}
- name: HookScreenshots
  endpoint:
    path: /HookScreenshots
    method: POST
    data_selector: bool
    params: {}
- name: IsScreenshotsHooked
  endpoint:
    path: /IsScreenshotsHooked
    method: GET
    data_selector: bool
    params: {}
- name: SetLocation
  endpoint:
    path: /SetLocation
    method: POST
    data_selector: bool
    params: {}
- name: TagPublishedFile
  endpoint:
    path: /TagPublishedFile
    method: POST
    data_selector: bool
    params: {}
- name: TagUser
  endpoint:
    path: /TagUser
    method: POST
    data_selector: bool
    params: {}
- name: TriggerScreenshot
  endpoint:
    path: /TriggerScreenshot
    method: POST
    data_selector: void
    params: {}
- name: WriteScreenshot
  endpoint:
    path: /WriteScreenshot
    method: POST
    data_selector: ScreenshotHandle
    params: {}
- name: TimelineEvent
  endpoint:
    path: /timeline/event
    method: POST
    data_selector: event
    params: {}
- name: GamePhase
  endpoint:
    path: /game/phase
    method: POST
    data_selector: phase
    params: {}
- name: ETimelineGameMode
  endpoint:
    path: /ETimelineGameMode
    method: GET
    data_selector: values
- name: ETimelineEventClipPriority
  endpoint:
    path: /ETimelineEventClipPriority
    method: GET
    data_selector: values
- name: ISteamApps
  endpoint:
    path: /ISteamApps
    method: GET
    data_selector: response
    params: {}
- name: ISteamUser
  endpoint:
    path: /ISteamUser
    method: GET
    data_selector: response
    params: {}
- name: AddAppDependency
  endpoint:
    path: /AddAppDependency
    method: POST
    data_selector: result
    params: {}
- name: AddDependency
  endpoint:
    path: /AddDependency
    method: POST
    data_selector: result
    params: {}
- name: AddExcludedTag
  endpoint:
    path: /AddExcludedTag
    method: POST
    data_selector: result
    params: {}
- name: AddItemKeyValueTag
  endpoint:
    path: /AddItemKeyValueTag
    method: POST
    data_selector: result
    params: {}
- name: AddItemPreviewFile
  endpoint:
    path: /AddItemPreviewFile
    method: POST
    data_selector: result
    params: {}
- name: AddItemPreviewVideo
  endpoint:
    path: /AddItemPreviewVideo
    method: POST
    data_selector: result
    params: {}
- name: AddItemToFavorites
  endpoint:
    path: /AddItemToFavorites
    method: POST
    data_selector: result
    params: {}
- name: AddRequiredKeyValueTag
  endpoint:
    path: /AddRequiredKeyValueTag
    method: POST
    data_selector: result
    params: {}
- name: AddRequiredTag
  endpoint:
    path: /AddRequiredTag
    method: POST
    data_selector: result
    params: {}
- name: AddRequiredTagGroup
  endpoint:
    path: /AddRequiredTagGroup
    method: POST
    data_selector: result
    params: {}
- name: BInitWorkshopForGameServer
  endpoint:
    path: /BInitWorkshopForGameServer
    method: POST
    data_selector: result
    params: {}
- name: CreateItem
  endpoint:
    path: /CreateItem
    method: POST
    data_selector: result
    params: {}
- name: CreateQueryAllUGCRequest
  endpoint:
    path: /CreateQueryAllUGCRequest
    method: POST
    data_selector: result
    params: {}
- name: CreateQueryUGCDetailsRequest
  endpoint:
    path: /CreateQueryUGCDetailsRequest
    method: POST
    data_selector: result
    params: {}
- name: CreateQueryUserUGCRequest
  endpoint:
    path: /CreateQueryUserUGCRequest
    method: POST
    data_selector: results
    params: {}
- name: DeleteItem
  endpoint:
    path: /DeleteItem
    method: POST
    data_selector: results
    params: {}
- name: DownloadItem
  endpoint:
    path: /DownloadItem
    method: POST
    data_selector: results
    params: {}
- name: GetAppDependencies
  endpoint:
    path: /GetAppDependencies
    method: POST
    data_selector: results
    params: {}
- name: GetItemDownloadInfo
  endpoint:
    path: /GetItemDownloadInfo
    method: POST
    data_selector: results
    params: {}
- name: GetItemInstallInfo
  endpoint:
    path: /GetItemInstallInfo
    method: POST
    data_selector: results
    params: {}
- name: GetItemState
  endpoint:
    path: /GetItemState
    method: POST
    data_selector: results
    params: {}
- name: GetItemUpdateProgress
  endpoint:
    path: /GetItemUpdateProgress
    method: POST
    data_selector: results
    params: {}
- name: GetNumSubscribedItems
  endpoint:
    path: /GetNumSubscribedItems
    method: POST
    data_selector: results
    params: {}
- name: GetQueryUGCAdditionalPreview
  endpoint:
    path: /GetQueryUGCAdditionalPreview
    method: POST
    data_selector: results
    params: {}
- name: GetQueryUGCChildren
  endpoint:
    path: /GetQueryUGCChildren
    method: POST
    data_selector: results
    params: {}
- name: GetQueryUGCNumTags
  endpoint:
    path: /GetQueryUGCNumTags
    method: POST
    data_selector: results
    params: {}
- name: GetQueryUGCTag
  endpoint:
    path: /GetQueryUGCTag
    method: POST
    data_selector: results
    params: {}
- name: GetQueryUGCTagDisplayName
  endpoint:
    path: /GetQueryUGCTagDisplayName
    method: POST
    data_selector: results
    params: {}
- name: GetQueryUGCKeyValueTag
  endpoint:
    path: /GetQueryUGCKeyValueTag
    method: POST
    data_selector: bool
- name: GetQueryUGCContentDescriptors
  endpoint:
    path: /GetQueryUGCContentDescriptors
    method: POST
    data_selector: uint32
- name: GetQueryUGCMetadata
  endpoint:
    path: /GetQueryUGCMetadata
    method: POST
    data_selector: bool
- name: GetQueryUGCNumAdditionalPreviews
  endpoint:
    path: /GetQueryUGCNumAdditionalPreviews
    method: POST
    data_selector: uint32
- name: GetQueryUGCNumKeyValueTags
  endpoint:
    path: /GetQueryUGCNumKeyValueTags
    method: POST
    data_selector: uint32
- name: GetQueryUGCPreviewURL
  endpoint:
    path: /GetQueryUGCPreviewURL
    method: POST
    data_selector: bool
- name: GetQueryUGCResult
  endpoint:
    path: /GetQueryUGCResult
    method: POST
    data_selector: bool
- name: GetQueryUGCStatistic
  endpoint:
    path: /GetQueryUGCStatistic
    method: POST
    data_selector: bool
- name: GetNumSupportedGameVersions
  endpoint:
    path: /GetNumSupportedGameVersions
    method: POST
    data_selector: uint32
- name: GetSupportedGameVersionData
  endpoint:
    path: /GetSupportedGameVersionData
    method: POST
    data_selector: bool
- name: GetSubscribedItems
  endpoint:
    path: /GetSubscribedItems
    method: POST
    data_selector: uint32
- name: GetUserItemVote
  endpoint:
    path: /GetUserItemVote
    method: POST
    data_selector: SteamAPICall_t
- name: ReleaseQueryUGCRequest
  endpoint:
    path: /ReleaseQueryUGCRequest
    method: POST
    data_selector: bool
- name: RemoveAppDependency
  endpoint:
    path: /RemoveAppDependency
    method: POST
    data_selector: SteamAPICall_t
- name: RemoveDependency
  endpoint:
    path: /RemoveDependency
    method: POST
    data_selector: SteamAPICall_t
- name: RemoveItemFromFavorites
  endpoint:
    path: /RemoveItemFromFavorites
    method: POST
    data_selector: SteamAPICall_t
- name: RemoveItemKeyValueTags
  endpoint:
    path: /RemoveItemKeyValueTags
    method: POST
    data_selector: bool
    params: {}
- name: RemoveItemPreview
  endpoint:
    path: /RemoveItemPreview
    method: POST
    data_selector: bool
    params: {}
- name: AddContentDescriptor
  endpoint:
    path: /AddContentDescriptor
    method: POST
    data_selector: bool
    params: {}
- name: RemoveContentDescriptor
  endpoint:
    path: /RemoveContentDescriptor
    method: POST
    data_selector: bool
    params: {}
- name: SetRequiredGameVersions
  endpoint:
    path: /SetRequiredGameVersions
    method: POST
    data_selector: bool
    params: {}
- name: RequestUGCDetails
  endpoint:
    path: /RequestUGCDetails
    method: POST
    data_selector: SteamAPICall_t
    params: {}
- name: SendQueryUGCRequest
  endpoint:
    path: /SendQueryUGCRequest
    method: POST
    data_selector: SteamAPICall_t
    params: {}
- name: SetAllowCachedResponse
  endpoint:
    path: /SetAllowCachedResponse
    method: POST
    data_selector: bool
    params: {}
- name: SetCloudFileNameFilter
  endpoint:
    path: /SetCloudFileNameFilter
    method: POST
    data_selector: bool
    params: {}
- name: SetItemContent
  endpoint:
    path: /SetItemContent
    method: POST
    data_selector: bool
    params: {}
- name: SetItemDescription
  endpoint:
    path: /SetItemDescription
    method: POST
    data_selector: bool
    params: {}
- name: SetItemMetadata
  endpoint:
    path: /SetItemMetadata
    method: POST
    data_selector: bool
    params: {}
- name: SetItemPreview
  endpoint:
    path: /SetItemPreview
    method: POST
    data_selector: bool
    params: {}
- name: SetItemTags
  endpoint:
    path: /SetItemTags
    method: POST
    data_selector: bool
    params: {}
- name: SetItemTitle
  endpoint:
    path: /SetItemTitle
    method: POST
    data_selector: bool
    params: {}
- name: SetItemUpdateLanguage
  endpoint:
    path: /SetItemUpdateLanguage
    method: POST
    data_selector: bool
    params: {}
- name: SetItemsDisabledLocally
  endpoint:
    path: /SetItemsDisabledLocally
    method: POST
    data_selector: bool
    params: {}
- name: SetItemVisibility
  endpoint:
    path: /SetItemVisibility
    method: POST
    data_selector: bool
    params: {}
- name: SetLanguage
  endpoint:
    path: /SetLanguage
    method: POST
    data_selector: bool
    params: {}
- name: SetMatchAnyTag
  endpoint:
    path: /SetMatchAnyTag
    method: POST
    data_selector: bool
    params: {}
- name: SetRankedByTrendDays
  endpoint:
    path: /SetRankedByTrendDays
    method: POST
    data_selector: bool
    params: {}
- name: UGCDetails
  endpoint:
    path: /ISteamRemoteStorage/GetQueryUGCResult
    method: GET
    data_selector: results
    params: {}
- name: UGCContentDescriptor
  endpoint:
    path: /UGCContentDescriptor
    method: GET
    data_selector: descriptors
    params: {}
- name: GetVoice
  endpoint:
    path: /GetVoice
    method: GET
    data_selector: EVoiceResult
- name: GetVoiceOptimalSampleRate
  endpoint:
    path: /GetVoiceOptimalSampleRate
    method: GET
    data_selector: uint32
- name: InitiateGameConnection
  endpoint:
    path: /InitiateGameConnection
    method: POST
    data_selector: int
- name: RequestEncryptedAppTicket
  endpoint:
    path: /RequestEncryptedAppTicket
    method: POST
    data_selector: SteamAPICall_t
- name: RequestStoreAuthURL
  endpoint:
    path: /RequestStoreAuthURL
    method: POST
    data_selector: SteamAPICall_t
- name: StartVoiceRecording
  endpoint:
    path: /StartVoiceRecording
    method: POST
    data_selector: void
- name: StopVoiceRecording
  endpoint:
    path: /StopVoiceRecording
    method: POST
    data_selector: void
- name: TerminateGameConnection
  endpoint:
    path: /TerminateGameConnection
    method: POST
    data_selector: void
- name: TrackAppUsageEvent
  endpoint:
    path: /TrackAppUsageEvent
    method: POST
    data_selector: void
- name: UserHasLicenseForApp
  endpoint:
    path: /UserHasLicenseForApp
    method: POST
    data_selector: EUserHasLicenseForAppResult
- name: AttachLeaderboardUGC
  endpoint:
    path: /AttachLeaderboardUGC
    method: POST
    data_selector: result
    params: {}
- name: ClearAchievement
  endpoint:
    path: /ClearAchievement
    method: POST
    data_selector: result
    params: {}
- name: DownloadLeaderboardEntries
  endpoint:
    path: /DownloadLeaderboardEntries
    method: POST
    data_selector: result
    params: {}
- name: DownloadLeaderboardEntriesForUsers
  endpoint:
    path: /DownloadLeaderboardEntriesForUsers
    method: POST
    data_selector: result
    params: {}
- name: FindLeaderboard
  endpoint:
    path: /FindLeaderboard
    method: POST
    data_selector: result
    params: {}
- name: FindOrCreateLeaderboard
  endpoint:
    path: /FindOrCreateLeaderboard
    method: POST
    data_selector: result
    params: {}
- name: GetAchievement
  endpoint:
    path: /GetAchievement
    method: POST
    data_selector: result
    params: {}
- name: GetAchievementAchievedPercent
  endpoint:
    path: /GetAchievementAchievedPercent
    method: POST
    data_selector: result
    params: {}
- name: GetAchievementAndUnlockTime
  endpoint:
    path: /GetAchievementAndUnlockTime
    method: POST
    data_selector: result
    params: {}
- name: GetAchievementDisplayAttribute
  endpoint:
    path: /GetAchievementDisplayAttribute
    method: POST
    data_selector: result
    params: {}
- name: GetAchievementIcon
  endpoint:
    path: /GetAchievementIcon
    method: POST
    data_selector: result
    params: {}
- name: GetAchievementName
  endpoint:
    path: /GetAchievementName
    method: POST
    data_selector: result
    params: {}
- name: GetDownloadedLeaderboardEntry
  endpoint:
    path: /GetDownloadedLeaderboardEntry
    method: POST
    data_selector: result
    params: {}
- name: GetGlobalStat
  endpoint:
    path: /GetGlobalStat
    method: POST
    data_selector: result
    params: {}
- name: GlobalStatHistory
  endpoint:
    path: /GetGlobalStatHistory
    method: GET
- name: LeaderboardDisplayType
  endpoint:
    path: /GetLeaderboardDisplayType
    method: GET
- name: LeaderboardEntryCount
  endpoint:
    path: /GetLeaderboardEntryCount
    method: GET
- name: LeaderboardName
  endpoint:
    path: /GetLeaderboardName
    method: GET
- name: LeaderboardSortMethod
  endpoint:
    path: /GetLeaderboardSortMethod
    method: GET
- name: MostAchievedAchievementInfo
  endpoint:
    path: /GetMostAchievedAchievementInfo
    method: GET
- name: NextMostAchievedAchievementInfo
  endpoint:
    path: /GetNextMostAchievedAchievementInfo
    method: GET
- name: NumAchievements
  endpoint:
    path: /GetNumAchievements
    method: GET
- name: NumberOfCurrentPlayers
  endpoint:
    path: /GetNumberOfCurrentPlayers
    method: GET
- name: Stat
  endpoint:
    path: /GetStat
    method: GET
- name: UserAchievement
  endpoint:
    path: /GetUserAchievement
    method: GET
- name: UserAchievementAndUnlockTime
  endpoint:
    path: /GetUserAchievementAndUnlockTime
    method: GET
- name: UserStat
  endpoint:
    path: /GetUserStat
    method: GET
- name: UserStatsData
  endpoint:
    path: /GetUserStatsData
    method: GET
- name: IndicateAchievementProgress
  endpoint:
    path: /IndicateAchievementProgress
    method: GET
- name: RequestCurrentStats
  endpoint:
    path: /RequestCurrentStats
    method: GET
- name: UserAchievementIconFetched_t
  endpoint:
    path: /achievements/icon
    method: GET
    data_selector: achievement_icon
    params: {}
- name: UserAchievementStored_t
  endpoint:
    path: /achievements/store
    method: POST
    data_selector: achievement_store
    params: {}
- name: UserStatsReceived_t
  endpoint:
    path: /stats/received
    method: GET
    data_selector: user_stats
    params: {}
- name: UserStatsStored_t
  endpoint:
    path: /stats/store
    method: POST
    data_selector: user_stats_store
    params: {}
- name: UserStatsUnloaded_t
  endpoint:
    path: /stats/unloaded
    method: GET
    data_selector: user_stats_unloaded
    params: {}
- name: LeaderboardEntry_t
  endpoint:
    path: /leaderboard/entry
    method: GET
    data_selector: leaderboard_entry
    params: {}
- name: GetOPFSettings
  endpoint:
    path: /GetOPFSettings
    method: GET
    data_selector: void
    params: {}
- name: GetOPFStringForApp
  endpoint:
    path: /GetOPFStringForApp
    method: GET
    data_selector: bool
    params: {}
- name: GetVideoURL
  endpoint:
    path: /GetVideoURL
    method: GET
    data_selector: void
    params: {}
- name: IsBroadcasting
  endpoint:
    path: /IsBroadcasting
    method: GET
    data_selector: bool
    params: {}
- name: IBroadcastService
  endpoint:
    path: /IBroadcastService
    method: GET
- name: ICheatReportingService
  endpoint:
    path: /ICheatReportingService
    method: GET
- name: ICloudService
  endpoint:
    path: /ICloudService
    method: GET
- name: IEconMarketService
  endpoint:
    path: /IEconMarketService
    method: GET
- name: IEconService
  endpoint:
    path: /IEconService
    method: GET
- name: IGameInventory
  endpoint:
    path: /IGameInventory
    method: GET
- name: IGameNotificationsService
  endpoint:
    path: /IGameNotificationsService
    method: GET
- name: IGameServersService
  endpoint:
    path: /IGameServersService
    method: GET
- name: IInventoryService
  endpoint:
    path: /IInventoryService
    method: GET
- name: ILobbyMatchmakingService
  endpoint:
    path: /ILobbyMatchmakingService
    method: GET
- name: IPlayerService
  endpoint:
    path: /IPlayerService
    method: GET
- name: IPublishedFileService
  endpoint:
    path: /IPublishedFileService
    method: GET
- name: ISteamApps
  endpoint:
    path: /ISteamApps
    method: GET
- name: ISteamCommunity
  endpoint:
    path: /ISteamCommunity
    method: GET
- name: ISteamEconomy
  endpoint:
    path: /ISteamEconomy
    method: GET
- name: ISteamGameServerStats
  endpoint:
    path: /ISteamGameServerStats
    method: GET
- name: ISteamLeaderboards
  endpoint:
    path: /ISteamLeaderboards
    method: GET
- name: ISteamMicroTxnSandbox
  endpoint:
    path: /ISteamMicroTxnSandbox
    method: GET
- name: ISteamMicroTxn
  endpoint:
    path: /ISteamMicroTxn
    method: GET
- name: ISteamNews
  endpoint:
    path: /ISteamNews
    method: GET
- name: ISteamPublishedItemSearch
  endpoint:
    path: /ISteamPublishedItemSearch
    method: GET
- name: ISteamPublishedItemVoting
  endpoint:
    path: /ISteamPublishedItemVoting
    method: GET
- name: ISteamRemoteStorage
  endpoint:
    path: /ISteamRemoteStorage
    method: GET
- name: ISiteLicenseService
  endpoint:
    path: /ISiteLicenseService
    method: GET
- name: ISteamUserAuth
  endpoint:
    path: /ISteamUserAuth
    method: GET
- name: ISteamUserStats
  endpoint:
    path: /ISteamUserStats
    method: GET
- name: ISteamUser
  endpoint:
    path: /ISteamUser
    method: GET
- name: ISteamWebAPIUtil
  endpoint:
    path: /ISteamWebAPIUtil
    method: GET
- name: IWorkshopService
  endpoint:
    path: /IWorkshopService
    method: GET
- name: PostGameDataFrame
  endpoint:
    path: /IBroadcastService/PostGameDataFrame/v1/
    method: POST
    data_selector: frame_data
    params: {}
- name: ReportPlayerCheating
  endpoint:
    path: /ICheatReportingService/ReportPlayerCheating/v1/
    method: POST
- name: RequestPlayerGameBan
  endpoint:
    path: /ICheatReportingService/RequestPlayerGameBan/v1/
    method: POST
- name: RemovePlayerGameBan
  endpoint:
    path: /ICheatReportingService/RemovePlayerGameBan/v1/
    method: POST
- name: GetCheatingReports
  endpoint:
    path: /ICheatReportingService/GetCheatingReports/v1/
    method: GET
- name: ReportCheatData
  endpoint:
    path: /ICheatReportingService/ReportCheatData/v1/
    method: POST
- name: RequestVacStatusForUser
  endpoint:
    path: /ICheatReportingService/RequestVacStatusForUser/v1/
    method: POST
- name: StartSecureMultiplayerSession
  endpoint:
    path: /ICheatReportingService/StartSecureMultiplayerSession/v1/
    method: POST
- name: EndSecureMultiplayerSession
  endpoint:
    path: /ICheatReportingService/EndSecureMultiplayerSession/v1/
    method: POST
- name: EnumerateUserFiles
  endpoint:
    path: /ICloudService/EnumerateUserFiles/v1/
    method: GET
    data_selector: files
- name: BeginAppUploadBatch
  endpoint:
    path: /ICloudService/BeginAppUploadBatch/v1/
    method: POST
    data_selector: batch_id
- name: CompleteAppUploadBatch
  endpoint:
    path: /ICloudService/CompleteAppUploadBatch/v1/
    method: POST
- name: BeginHTTPUpload
  endpoint:
    path: /ICloudService/BeginHTTPUpload/v1/
    method: POST
- name: CommitHTTPUpload
  endpoint:
    path: /ICloudService/CommitHTTPUpload/v1/
    method: POST
- name: Delete
  endpoint:
    path: /ICloudService/Delete/v1/
    method: POST
- name: GetMarketEligibility
  endpoint:
    path: /IEconMarketService/GetMarketEligibility/v1/
    method: GET
    data_selector: response
    params: {}
- name: CancelAppListingsForUser
  endpoint:
    path: /IEconMarketService/CancelAppListingsForUser/v1/
    method: POST
    data_selector: response
    params: {}
- name: GetAssetID
  endpoint:
    path: /IEconMarketService/GetAssetID/v1/
    method: GET
    data_selector: response
    params: {}
- name: GetPopular
  endpoint:
    path: /IEconMarketService/GetPopular/v1/
    method: GET
    data_selector: response
    params: {}
- name: GetTradeHistory
  endpoint:
    path: /IEconService/GetTradeHistory/v1/
    method: GET
    data_selector: trades
    params:
      key: string
      max_trades: uint32
      start_after_time: uint32
      start_after_tradeid: uint64
      navigating_back: bool
      get_descriptions: bool
      language: string
      include_failed: bool
      include_total: bool
- name: FlushInventoryCache
  endpoint:
    path: /IEconService/FlushInventoryCache/v1/
    method: POST
    data_selector: response
    params:
      key: string
      steamid: uint64
      appid: uint32
      contextid: uint64
- name: FlushAssetAppearanceCache
  endpoint:
    path: /IEconService/FlushAssetAppearanceCache/v1/
    method: POST
    data_selector: response
    params:
      key: string
      appid: uint32
- name: FlushContextCache
  endpoint:
    path: /IEconService/FlushContextCache/v1/
    method: POST
    data_selector: response
    params:
      key: string
      appid: uint32
- name: GetTradeOffers
  endpoint:
    path: /IEconService/GetTradeOffers/v1/
    method: GET
    data_selector: offers
    params:
      key: string
      get_sent_offers: bool
      get_received_offers: bool
      get_descriptions: bool
      language: string
      active_only: bool
      historical_only: bool
      time_historical_cutoff: uint32
- name: GetTradeOffer
  endpoint:
    path: /IEconService/GetTradeOffer/v1/
    method: GET
    data_selector: offer
    params:
      key: string
      tradeofferid: uint64
      language: string
- name: GetTradeOffersSummary
  endpoint:
    path: /IEconService/GetTradeOffersSummary/v1/
    method: GET
    data_selector: summary
    params:
      key: string
      time_last_visit: uint32
- name: GetHistoryCommandDetails
  endpoint:
    path: /IGameInventory/GetHistoryCommandDetails/v1/
    method: GET
    data_selector: response
    params: {}
- name: GetUserHistory
  endpoint:
    path: /IGameInventory/GetUserHistory/v1/
    method: GET
    data_selector: response
    params: {}
- name: HistoryExecuteCommands
  endpoint:
    path: /IGameInventory/HistoryExecuteCommands/v1/
    method: POST
    data_selector: response
    params: {}
- name: SupportGetAssetHistory
  endpoint:
    path: /IGameInventory/SupportGetAssetHistory/v1/
    method: GET
    data_selector: response
    params: {}
- name: UpdateItemDefs
  endpoint:
    path: /IGameInventory/UpdateItemDefs/v0001
    method: POST
    data_selector: response
    params: {}
- name: CreateSession
  endpoint:
    path: /CreateSession/v1/
    method: POST
    data_selector: response
    params: {}
- name: UpdateSession
  endpoint:
    path: /UpdateSession/v1/
    method: POST
    data_selector: response
    params: {}
- name: EnumerateSessionsForApp
  endpoint:
    path: /EnumerateSessionsForApp/v1/
    method: GET
    data_selector: response
    params: {}
- name: GetSessionDetailsForApp
  endpoint:
    path: /GetSessionDetailsForApp/v1/
    method: GET
    data_selector: response
    params: {}
- name: RequestNotifications
  endpoint:
    path: /RequestNotifications/v1/
    method: POST
    data_selector: response
    params: {}
- name: DeleteSession
  endpoint:
    path: /DeleteSession/v1/
    method: POST
    data_selector: response
    params: {}
- name: DeleteSessionBatch
  endpoint:
    path: /DeleteSessionBatch/v1/
    method: POST
    data_selector: response
    params: {}
- name: GetAccountList
  endpoint:
    path: /GetAccountList/v1/
    method: GET
    data_selector: accounts
    params: {}
- name: CreateAccount
  endpoint:
    path: /CreateAccount/v1/
    method: POST
    data_selector: response
    params: {}
- name: SetMemo
  endpoint:
    path: /SetMemo/v1/
    method: POST
    data_selector: response
    params: {}
- name: ResetLoginToken
  endpoint:
    path: /ResetLoginToken/v1/
    method: POST
    data_selector: response
    params: {}
- name: DeleteAccount
  endpoint:
    path: /DeleteAccount/v1/
    method: POST
    data_selector: response
    params: {}
- name: GetAccountPublicInfo
  endpoint:
    path: /GetAccountPublicInfo/v1/
    method: GET
    data_selector: account_info
    params: {}
- name: QueryLoginToken
  endpoint:
    path: /QueryLoginToken/v1/
    method: GET
    data_selector: token_status
    params: {}
- name: GetServerSteamIDsByIP
  endpoint:
    path: /GetServerSteamIDsByIP/v1/
    method: GET
    data_selector: server_ids
    params: {}
- name: GetServerIPsBySteamID
  endpoint:
    path: /GetServerIPsBySteamID/v1/
    method: GET
    data_selector: server_ips
    params: {}
- name: AddItem
  endpoint:
    path: /AddItem/v1/
    method: POST
    data_selector: response.item_json
    params:
      key: Steamworks Web API publisher authentication key.
      appid: The ID of the application associated with the item.
      itemdefid: List of the itemdefid's to grant.
      itempropsjson: ''
      steamid: SteamID of the player to receive the items.
      notify: Optional, default 0.
      requestid: Optional, default 0.
      trade_restriction: Optional, default 0.
- name: AddPromoItem
  endpoint:
    path: /AddPromoItem/v1/
    method: POST
    data_selector: response.item_json
    params:
      key: Steamworks Web API publisher authentication key.
      appid: ''
      itemdefid: ''
      steamid: ''
      notify: ''
      requestid: ''
- name: ConsumeItem
  endpoint:
    path: /ConsumeItem/v1/
    method: POST
    data_selector: response.item_json
    params:
      key: Steamworks Web API publisher authentication key.
      appid: ''
      itemid: Item ID to be consumed
      quantity: Amount of the given item stack to be consumed
      steamid: ''
      requestid: ''
- name: ExchangeItem
  endpoint:
    path: /ExchangeItem/v1/
    method: POST
    data_selector: response.item_json
    params:
      key: Steamworks Web API publisher authentication key.
      appid: The ID of the application associated with the item.
      steamid: SteamID of the player that owns the items.
      materialsitemid: The unique ID an item in the player's inventory to be converted
        to the target item type.
      materialsquantity: The quantity of the matching item that should be used in
        this recipe.
      outputitemdefid: The ItemDef of the item to be created.
- name: GetInventory
  endpoint:
    path: /GetInventory/v1/
    method: GET
    data_selector: response.item_json
    params:
      key: Steamworks Web API publisher authentication key.
      appid: The ID of the application associated with the item.
      steamid: 64-bit Steam ID of the user whose inventory you are requesting.
- name: GetItemDefs
  endpoint:
    path: /IInventoryService/GetItemDefs/v1/
    method: GET
    data_selector: response.itemdef_json
    params: {}
- name: GetPriceSheet
  endpoint:
    path: /IInventoryService/GetPriceSheet/v1/
    method: GET
    data_selector: response
    params: {}
- name: Consolidate
  endpoint:
    path: /IInventoryService/Consolidate/v1/
    method: POST
    data_selector: response
    params: {}
- name: GetQuantity
  endpoint:
    path: /IInventoryService/GetQuantity/v1/
    method: GET
    data_selector: response
    params: {}
- name: ModifyItems
  endpoint:
    path: /IInventoryService/ModifyItems/v1/
    method: POST
    data_selector: response
    params: {}
- name: CreateLobby
  endpoint:
    path: /ILobbyMatchmakingService/CreateLobby/v1/
    method: POST
    data_selector: response
    params:
      max_members: 100
      appid: 480
      lobbytype: 4
      steamid_invited_members:
      - '76561197984069643'
      - '76561197992200645'
      - '76561198050534694'
      lobby_name: guild_chat_1138
      lobby_metadata:
      - key_name: motd
        key_value: Raid at 5 PM
      - key_name: clan_id
        key_value: '1138'
      - key_name: lobbyproperty
        key_value: otherproperty
- name: RemoveUserFromLobby
  endpoint:
    path: /ILobbyMatchmakingService/RemoveUserFromLobby/v1/
    method: POST
    data_selector: response
    params:
      steamid_to_remove: uint64
      steamid_lobby: uint64
- name: GetLobbyData
  endpoint:
    path: /ILobbyMatchmakingService/GetLobbyData/v1/
    method: GET
    data_selector: response
    params:
      steamid_lobby: uint64
- name: GetChangedDatesForPartner
  endpoint:
    path: /IPartnerFinancialsService/GetChangedDatesForPartner/v001/
    method: GET
    data_selector: response.dates
    params:
      key: Steamworks Web API publisher authentication key
      highwatermark: '0'
- name: detailed_sales
  endpoint:
    path: /GetDetailedSales/v001/
    method: GET
    data_selector: results
    params:
      key: Steamworks Web API publisher authentication key
      date: YYYY-MM-DD
      highwatermark_id: '0'
- name: GetRecentlyPlayedGames
  endpoint:
    path: /GetRecentlyPlayedGames/v1/
    method: GET
    data_selector: response
    params:
      key: Steamworks Web API user authentication key
      steamid: The player we're asking about
      count: 'The number of games to return (0/unset: all)'
- name: GetSingleGamePlaytime
  endpoint:
    path: /GetSingleGamePlaytime/v1/
    method: GET
    data_selector: response
    params:
      key: Steamworks Web API user authentication key
      steamid: The player we're asking about
      appid: AppID that we're getting playtime for
- name: GetOwnedGames
  endpoint:
    path: /GetOwnedGames/v1/
    method: GET
    data_selector: response
    params:
      key: Steamworks Web API user authentication key
      steamid: The player we're asking about
      include_appinfo: true if we want additional details (name, icon) about each
        game
      include_played_free_games: true if free games played will be returned
      appids_filter: if set, restricts result set to the passed in apps
- name: GetSteamLevel
  endpoint:
    path: /GetSteamLevel/v1/
    method: GET
    data_selector: response
    params:
      key: Steamworks Web API user authentication key
      steamid: The player we're asking about
- name: GetBadges
  endpoint:
    path: /GetBadges/v1/
    method: GET
    data_selector: response
    params:
      key: Steamworks Web API user authentication key
      steamid: The player we're asking about
- name: GetCommunityBadgeProgress
  endpoint:
    path: /GetCommunityBadgeProgress/v1/
    method: GET
    data_selector: response
    params:
      key: Steamworks Web API user authentication key
      steamid: The player we're asking about
      badgeid: The badge we're asking about
- name: ISteamApps
  endpoint:
    path: /ISteamApps
    method: GET
- name: ISteamUser
  endpoint:
    path: /ISteamUser
    method: GET
- name: Delete
  endpoint:
    path: /IPublishedFileService/Delete/v1/
    method: GET
    data_selector: ''
    params: {}
- name: QueryFiles
  endpoint:
    path: /IPublishedFileService/QueryFiles/v1/
    method: GET
    data_selector: ''
    params: {}
- name: SetDeveloperMetadata
  endpoint:
    path: /IPublishedFileService/SetDeveloperMetadata/v1/
    method: POST
    data_selector: ''
    params: {}
- name: UpdateAppUGCBan
  endpoint:
    path: /IPublishedFileService/UpdateAppUGCBan/v1/
    method: POST
    data_selector: ''
    params: {}
- name: UpdateBanStatus
  endpoint:
    path: /IPublishedFileService/UpdateBanStatus/v1/
    method: POST
    data_selector: ''
    params: {}
- name: UpdateIncompatibleStatus
  endpoint:
    path: /IPublishedFileService/UpdateIncompatibleStatus/v1/
    method: POST
    data_selector: ''
    params: {}
- name: UpdateTags
  endpoint:
    path: /IPublishedFileService/UpdateTags/v1/
    method: POST
    data_selector: ''
    params: {}
- name: GetCurrentClientConnections
  endpoint:
    path: /ISiteLicenseService/GetCurrentClientConnections/v1/
    method: GET
    data_selector: sites
    params:
      key: string
      siteid: uint64
- name: GetTotalPlaytime
  endpoint:
    path: /ISiteLicenseService/GetTotalPlaytime/v1/
    method: GET
    data_selector: sites
    params:
      key: string
      start_time: string
      end_time: string
      siteid: uint64
- name: GetAppBetas
  endpoint:
    path: /ISteamApps/GetAppBetas/v1/
    method: GET
    data_selector: betas
    params:
      key: string
      appid: uint32
- name: GetAppBuilds
  endpoint:
    path: /ISteamApps/GetAppBuilds/v1/
    method: GET
    data_selector: builds
    params:
      key: string
      appid: uint32
      count: uint32
- name: GetAppDepotVersions
  endpoint:
    path: /ISteamApps/GetAppDepotVersions/v1/
    method: GET
    data_selector: depotVersions
    params:
      key: string
      appid: uint32
- name: GetAppList
  endpoint:
    path: /ISteamApps/GetAppList/v2/
    method: GET
    data_selector: applist
    params: {}
- name: GetPartnerAppListForWebAPIKey
  endpoint:
    path: /ISteamApps/GetPartnerAppListForWebAPIKey/v2/
    method: GET
    data_selector: apps
    params:
      key: string
      type_filter: string
- name: GetPlayersBanned
  endpoint:
    path: /ISteamApps/GetPlayersBanned/v1/
    method: GET
    data_selector: playersBanned
    params:
      key: string
      appid: uint32
- name: GetServerList
  endpoint:
    path: /ISteamApps/GetServerList/v1/
    method: GET
    data_selector: servers
    params:
      key: string
      filter: string
      limit: uint32
- name: GetServersAtAddress
  endpoint:
    path: /ISteamApps/GetServersAtAddress/v1/
    method: GET
    data_selector: servers
    params:
      addr: string
- name: SetAppBuildLive
  endpoint:
    path: /ISteamApps/SetAppBuildLive/v2/
    method: POST
    data_selector: buildLive
    params:
      key: string
      appid: uint32
      buildid: uint32
      betakey: string
      steamid: uint64
      description: string
- name: UpToDateCheck
  endpoint:
    path: /ISteamApps/UpToDateCheck/v1/
    method: GET
    data_selector: upToDate
    params:
      appid: uint32
      version: uint32
- name: ReportAbuse
  endpoint:
    path: /ISteamCommunity/ReportAbuse/v1/
    method: POST
- name: CanTrade
  endpoint:
    path: /ISteamEconomy/CanTrade/v1/
    method: GET
    data_selector: response
    params: {}
- name: FinalizeAssetTransaction
  endpoint:
    path: /ISteamEconomy/FinalizeAssetTransaction/v1/
    method: POST
    data_selector: response
    params: {}
- name: GetAssetClassInfo
  endpoint:
    path: /ISteamEconomy/GetAssetClassInfo/v1/
    method: GET
    data_selector: response
    params: {}
- name: GetAssetPrices
  endpoint:
    path: /ISteamEconomy/GetAssetPrices/v1/
    method: GET
    data_selector: response
    params: {}
- name: GetExportedAssetsForUser
  endpoint:
    path: /ISteamEconomy/GetExportedAssetsForUser/v1/
    method: GET
    data_selector: response
    params: {}
- name: GetMarketPrices
  endpoint:
    path: /ISteamEconomy/GetMarketPrices/v1/
    method: GET
    data_selector: response
    params: {}
- name: StartAssetTransaction
  endpoint:
    path: /ISteamEconomy/StartAssetTransaction/v1/
    method: POST
    data_selector: response
    params: {}
- name: StartTrade
  endpoint:
    path: /ISteamEconomy/StartTrade/v1/
    method: GET
    data_selector: response
    params: {}
- name: GetGameServerPlayerStatsForGame
  endpoint:
    path: /ISteamGameServerStats/GetGameServerPlayerStatsForGame/v1/
    method: GET
    data_selector: results
    params:
      key: publisher_authentication_key
      gameid: game_id
      appid: app_id
      rangestart: range_start_datetime
      rangeend: range_end_datetime
      maxresults: max_results
- name: DeleteLeaderboard
  endpoint:
    path: /ISteamLeaderboards/DeleteLeaderboard/v1/
    method: POST
    data_selector: null
    params: {}
- name: FindOrCreateLeaderboard
  endpoint:
    path: /ISteamLeaderboards/FindOrCreateLeaderboard/v2/
    method: POST
    data_selector: null
    params: {}
- name: GetLeaderboardEntries
  endpoint:
    path: /ISteamLeaderboards/GetLeaderboardEntries/v1/
    method: GET
    data_selector: null
    params: {}
- name: GetLeaderboardsForGame
  endpoint:
    path: /ISteamLeaderboards/GetLeaderboardsForGame/v2/
    method: GET
    data_selector: null
    params: {}
- name: ResetLeaderboard
  endpoint:
    path: /ISteamLeaderboards/ResetLeaderboard/v1/
    method: POST
    data_selector: null
    params: {}
- name: SetLeaderboardScore
  endpoint:
    path: /ISteamLeaderboards/SetLeaderboardScore/v1/
    method: POST
    data_selector: null
    params: {}
- name: AdjustAgreement
  endpoint:
    path: /ISteamMicroTxn/AdjustAgreement/v1/
    method: POST
    data_selector: response.params
    params: {}
- name: CancelAgreement
  endpoint:
    path: /ISteamMicroTxn/CancelAgreement/v1/
    method: POST
    data_selector: response.params
    params: {}
- name: FinalizeTxn
  endpoint:
    path: /ISteamMicroTxn/FinalizeTxn/v2/
    method: POST
    data_selector: response.params
    params: {}
- name: GetReport
  endpoint:
    path: /ISteamMicroTxn/GetReport/v5/
    method: GET
    data_selector: response.params
    params: {}
- name: GetUserAgreementInfo
  endpoint:
    path: /ISteamMicroTxn/GetUserAgreementInfo/v2/
    method: GET
    data_selector: response.params
    params: {}
- name: GetUserInfo
  endpoint:
    path: /ISteamMicroTxn/GetUserInfo/v2/
    method: GET
    data_selector: response.params
    params: {}
- name: InitTxn
  endpoint:
    path: /ISteamMicroTxn/InitTxn/v3/
    method: POST
    data_selector: response.params
    params: {}
- name: ProcessAgreement
  endpoint:
    path: /ISteamMicroTxn/ProcessAgreement/v1/
    method: POST
    data_selector: response.params
    params: {}
- name: QueryTxn
  endpoint:
    path: /ISteamMicroTxn/QueryTxn/v3/
    method: GET
    data_selector: response.params
    params: {}
- name: RefundTxn
  endpoint:
    path: /ISteamMicroTxn/RefundTxn/v2/
    method: POST
    data_selector: response.params
    params: {}
- name: GetNewsForApp
  endpoint:
    path: /ISteamNews/GetNewsForApp/v2/
    method: GET
    data_selector: news
    params:
      appid: required
      maxlength: optional
      enddate: optional
      count: optional
      feeds: optional
- name: GetNewsForAppAuthed
  endpoint:
    path: /ISteamNews/GetNewsForAppAuthed/v2/
    method: GET
    data_selector: news
    params:
      key: required
      appid: required
      maxlength: optional
      enddate: optional
      count: optional
      feeds: optional
- name: ISteamApps
  endpoint:
    path: /ISteamApps
    method: GET
    data_selector: ''
- name: ISteamUser
  endpoint:
    path: /ISteamUser
    method: GET
    data_selector: ''
- name: RankedByPublicationOrder
  endpoint:
    path: /ISteamPublishedItemSearch/RankedByPublicationOrder/v1/
    method: POST
    data_selector: result
    params:
      key: Steamworks Web API publisher authentication key
      steamid: SteamID of user
      appid: appID of product
      startidx: Starting index in the result set (0 based)
      count: Number Requested
      tagcount: Number of Tags Specified
      usertagcount: Number of User specific tags requested
      hasappadminaccess: Whether the user making the request is an admin for the app
        and can see private files
- name: RankedByTrend
  endpoint:
    path: /ISteamPublishedItemSearch/RankedByTrend/v1/
    method: POST
    data_selector: result
    params:
      key: Steamworks Web API publisher authentication key
      steamid: SteamID of user
      appid: appID of product
      startidx: Starting index in the result set (0 based)
      count: Number Requested
      tagcount: Number of Tags Specified
      usertagcount: Number of User specific tags requested
      hasappadminaccess: Whether the user making the request is an admin for the app
        and can see private files
      days: '[1,7] number of days for the trend period, including today'
- name: RankedByVote
  endpoint:
    path: /ISteamPublishedItemSearch/RankedByVote/v1/
    method: POST
    data_selector: result
    params:
      key: Steamworks Web API publisher authentication key
      steamid: SteamID of user
      appid: appID of product
      startidx: Starting index in the result set (0 based)
      count: Number Requested
      tagcount: Number of Tags Specified
      usertagcount: Number of User specific tags requested
      hasappadminaccess: Whether the user making the request is an admin for the app
        and can see private files
- name: ResultSetSummary
  endpoint:
    path: /ISteamPublishedItemSearch/ResultSetSummary/v1/
    method: POST
    data_selector: result
    params:
      key: Steamworks Web API publisher authentication key
      steamid: SteamID of user
      appid: appID relevant to all subsequent tags
      tagcount: Number of Tags Specified
      usertagcount: Number of User specific tags requested
      hasappadminaccess: Whether the user making the request is an admin for the app
        and can see private files
- name: ItemVoteSummary
  endpoint:
    path: /ISteamPublishedItemVoting/ItemVoteSummary/v1/
    method: POST
    data_selector: null
    params: {}
- name: UserVoteSummary
  endpoint:
    path: /ISteamPublishedItemVoting/UserVoteSummary/v1/
    method: POST
    data_selector: null
    params: {}
- name: EnumerateUserSubscribedFiles
  endpoint:
    path: /ISteamRemoteStorage/EnumerateUserSubscribedFiles/v1/
    method: POST
    data_selector: null
    params: {}
- name: GetCollectionDetails
  endpoint:
    path: /ISteamRemoteStorage/GetCollectionDetails/v1/
    method: POST
    data_selector: null
    params: {}
- name: GetPublishedFileDetails
  endpoint:
    path: /ISteamRemoteStorage/GetPublishedFileDetails/v1/
    method: POST
    data_selector: null
    params: {}
- name: GetUGCFileDetails
  endpoint:
    path: /ISteamRemoteStorage/GetUGCFileDetails/v1/
    method: GET
    data_selector: null
    params: {}
- name: SetUGCUsedByGC
  endpoint:
    path: /ISteamRemoteStorage/SetUGCUsedByGC/v1/
    method: POST
    data_selector: null
    params: {}
- name: SubscribePublishedFile
  endpoint:
    path: /ISteamRemoteStorage/SubscribePublishedFile/v1/
    method: POST
    data_selector: null
    params: {}
- name: UnsubscribePublishedFile
  endpoint:
    path: /ISteamRemoteStorage/UnsubscribePublishedFile/v1/
    method: POST
    data_selector: null
    params: {}
- name: AuthenticateUser
  endpoint:
    path: /ISteamUserAuth/AuthenticateUser/v1/
    method: POST
    data_selector: null
    params: {}
- name: AuthenticateUserTicket
  endpoint:
    path: /ISteamUserAuth/AuthenticateUserTicket/v1/
    method: GET
    data_selector: null
    params: {}
- name: CheckAppOwnership
  endpoint:
    path: /ISteamUser/CheckAppOwnership/v4/
    method: GET
    data_selector: response
    params:
      key: string
      steamid: uint64
      appid: uint32
- name: GetAppPriceInfo
  endpoint:
    path: /ISteamUser/GetAppPriceInfo/v1/
    method: GET
    data_selector: price_info
    params:
      key: string
      steamid: uint64
      appids: string
- name: GetDeletedSteamIDs
  endpoint:
    path: /ISteamUser/GetDeletedSteamIDs/v1/
    method: GET
    data_selector: response
    params:
      key: string
      rowversion: uint64
- name: GetFriendList
  endpoint:
    path: /ISteamUser/GetFriendList/v1/
    method: GET
    data_selector: friends
    params:
      key: string
      steamid: uint64
      relationship: string
- name: GetPlayerBans
  endpoint:
    path: /ISteamUser/GetPlayerBans/v1/
    method: GET
    data_selector: players
    params:
      key: string
      steamids: string
- name: GetPlayerSummaries
  endpoint:
    path: /ISteamUser/GetPlayerSummaries/v2/
    method: GET
    data_selector: response
    params:
      key: string
      steamids: string
- name: GetPublisherAppOwnership
  endpoint:
    path: /ISteamUser/GetPublisherAppOwnership/v4/
    method: GET
    data_selector: appownership
    params:
      key: string
      steamid: uint64
- name: GetUserGroupList
  endpoint:
    path: /ISteamUser/GetUserGroupList/v1/
    method: GET
    data_selector: groups
    params:
      key: string
      steamid: uint64
- name: ResolveVanityURL
  endpoint:
    path: /ISteamUser/ResolveVanityURL/v1/
    method: GET
    data_selector: response
    params:
      key: string
      vanityurl: string
      url_type: int32
- name: GetGlobalAchievementPercentagesForApp
  endpoint:
    path: /ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2/
    method: GET
    data_selector: achievement_percentages
- name: GetGlobalStatsForGame
  endpoint:
    path: /ISteamUserStats/GetGlobalStatsForGame/v1/
    method: GET
    data_selector: global_stats
    params:
      key: string
      appid: uint32
      count: uint32
      name[0]: string
      startdate: uint32
      enddate: uint32
- name: GetNumberOfCurrentPlayers
  endpoint:
    path: /ISteamUserStats/GetNumberOfCurrentPlayers/v1/
    method: GET
    data_selector: player_count
    params:
      appid: uint32
- name: GetPlayerAchievements
  endpoint:
    path: /ISteamUserStats/GetPlayerAchievements/v1/
    method: GET
    data_selector: achievements
    params:
      key: string
      steamid: uint64
      appid: uint32
      l: string
- name: GetSchemaForGame
  endpoint:
    path: /ISteamUserStats/GetSchemaForGame/v2/
    method: GET
    data_selector: schema
    params:
      key: string
      appid: uint32
      l: string
- name: GetUserStatsForGame
  endpoint:
    path: /ISteamUserStats/GetUserStatsForGame/v2/
    method: GET
    data_selector: user_stats
    params:
      key: string
      steamid: uint64
      appid: uint32
- name: SetUserStatsForGame
  endpoint:
    path: /ISteamUserStats/SetUserStatsForGame/v1/
    method: POST
    data_selector: set_user_stats
    params:
      key: string
      steamid: uint64
      appid: uint32
      count: uint32
      name[0]: string
      value[0]: uint32
- name: GetServerInfo
  endpoint:
    path: /ISteamWebAPIUtil/GetServerInfo/v1/
    method: GET
    data_selector: response
    params: {}
- name: GetSupportedAPIList
  endpoint:
    path: /ISteamWebAPIUtil/GetSupportedAPIList/v1/
    method: GET
    data_selector: response
    params: {}
- name: SetItemPaymentRules
  endpoint:
    path: /SetItemPaymentRules/v1/
    method: POST
    data_selector: message
    params: {}
- name: GetFinalizedContributors
  endpoint:
    path: /GetFinalizedContributors/v1/
    method: GET
    data_selector: message
    params: {}
- name: GetItemDailyRevenue
  endpoint:
    path: /GetItemDailyRevenue/v1/
    method: GET
    data_selector: message
    params: {}
- name: PopulateItemDescriptions
  endpoint:
    path: /PopulateItemDescriptions/v1/
    method: POST
    data_selector: message
    params: {}
- name: Applications
  endpoint:
    path: /doc/store/application
    method: GET
- name: Packages
  endpoint:
    path: /doc/store/application/packages
    method: GET
- name: Wishlists
  endpoint:
    path: /doc/marketing/wishlist
    method: GET
- name: Store Pages
  endpoint:
    path: /doc/store/page
    method: GET
- name: User Reviews
  endpoint:
    path: /doc/store/reviews
    method: GET
- name: Tags
  endpoint:
    path: /doc/store/tags
    method: GET
- name: Visibility on Steam
  endpoint:
    path: /doc/marketing/visibility
    method: GET
- name: Steam Community
  endpoint:
    path: /doc/features/community
    method: GET
- name: SetDualSenseTriggerEffect
  endpoint:
    path: /SetDualSenseTriggerEffect
    method: POST
    data_selector: param
    params: {}
- name: SetLEDColor
  endpoint:
    path: /SetLEDColor
    method: POST
    data_selector: param
    params: {}
- name: ShowAnalogActionOrigins
  endpoint:
    path: /ShowAnalogActionOrigins
    method: POST
    data_selector: param
    params: {}
- name: ShowBindingPanel
  endpoint:
    path: /ShowBindingPanel
    method: POST
    data_selector: param
    params: {}
- name: ShowDigitalActionOrigins
  endpoint:
    path: /ShowDigitalActionOrigins
    method: POST
    data_selector: param
    params: {}
- name: Shutdown
  endpoint:
    path: /Shutdown
    method: POST
    data_selector: param
    params: {}
- name: StopAnalogActionMomentum
  endpoint:
    path: /StopAnalogActionMomentum
    method: POST
    data_selector: param
    params: {}
- name: TriggerHapticPulse
  endpoint:
    path: /TriggerHapticPulse
    method: POST
    data_selector: param
    params: {}
- name: TriggerRepeatedHapticPulse
  endpoint:
    path: /TriggerRepeatedHapticPulse
    method: POST
    data_selector: param
    params: {}
- name: TriggerVibration
  endpoint:
    path: /TriggerVibration
    method: POST
    data_selector: param
    params: {}
- name: TriggerVibrationExtended
  endpoint:
    path: /TriggerVibrationExtended
    method: POST
    data_selector: param
    params: {}
- name: GetActionOriginFromXboxOrigin
  endpoint:
    path: /GetActionOriginFromXboxOrigin
    method: POST
    data_selector: param
    params: {}
- name: TranslateActionOrigin
  endpoint:
    path: /TranslateActionOrigin
    method: POST
    data_selector: param
    params: {}
- name: GetDeviceBindingRevision
  endpoint:
    path: /GetDeviceBindingRevision
    method: POST
    data_selector: param
    params: {}
- name: GetRemotePlaySessionID
  endpoint:
    path: /GetRemotePlaySessionID
    method: POST
    data_selector: param
    params: {}
- name: EInputSource
  endpoint:
    path: /EInputSource
    method: GET
    data_selector: values
- name: EInputSourceMode
  endpoint:
    path: /EInputSourceMode
    method: GET
    data_selector: values
- name: ESteamControllerLEDFlag
  endpoint:
    path: /ESteamControllerLEDFlag
    method: GET
    data_selector: values
- name: ESteamInputType
  endpoint:
    path: /ESteamInputType
    method: GET
    data_selector: values
- name: ESteamControllerPad
  endpoint:
    path: /ESteamControllerPad
    method: GET
    data_selector: values
- name: Typedefs
  endpoint:
    path: /Typedefs
    method: GET
    data_selector: values
- name: Constants
  endpoint:
    path: /Constants
    method: GET
    data_selector: values
notes:
- OAuth2 is required for authentication.
- Authentication using Web API Keys
- OAuth
- Authentication using Web API Keys is available.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- OAuth documentation can be found for further details.
- Access Steamworks by logging in with your existing Steam account.
- OAuth requires setup of connected app in Steamworks
- A 30-day waiting period between when you paid the app fee and when you can release
  your game.
- You’ll need to prepare your store page and put up a publicly-visible ‘coming soon’
  page for at least two weeks.
- Uses OAuth2 for authentication.
- Only users that have Admin permissions within an existing Steamworks partner can
  pay the Steam Direct Fee.
- The Steam Direct Fee is not refundable, but will be recoupable in the payment made
  after your product has at least $1,000.00 Adjusted Gross Revenue for Steam Store
  or in-app purchases.
- Administrators can manage users and permissions.
- Uses OAuth2 for authentication
- OAuth2 authentication is required.
- Requires setup of connected app in api
- User Authentication and Ownership
- Requires setup of a connected app in Steam
- OAuth is also supported.
- Make sure your Steam account is part of the Steamworks developer account with 'Edit
  App Marketing Data' permissions.
- Your group membership level needs to have '...manage page admin settings and review
  games?' to access the 'Admin Tab'.
- The creator home is built-on top of Steam Curator technology and re-uses the curators
  existing permissions model.
- Some objects may return nulls in deeply nested fields
- Requires setup of connected app in Steam
- Free to Play games don’t require you to enter pricing because the game is a free
  license.
- DLC can have actual files that you distribute to customers, or it can also just
  be a license entitlement.
- The potential downside to offering all of your content as DLC is you will need to
  go through the release process for each piece of content.
- Web API requires access through a valid Steam account.
- Some objects like Contact may return nulls in deeply nested fields
- Broadcast is a complimentary service and is available to all partners at no additional
  cost.
- Requires OAuth2 setup with Steam
- Developers on Steam have control over their own prices, in every currency.
- Steam uses the expected local norms and regulations when displaying prices and taxes
  for customers.
- Uses OAuth2 for user authentication.
- Uses OAuth2 with refresh token
- Requires setup of Steamworks account for access
- Requires setup of connected app in Steamworks API
- Requires setup of connected app in Steamworks
- A Season Pass must include at least one released DLC when it is made available for
  purchase.
- Requires OAuth2 authentication for data access.
- Requires setup of connected app in API
- Authentication using Web API Keys is available
- OAuth is supported
- OAuth setup is required for API access.
- Updating and patching your game is one of the best ways to communicate with customers.
- Steam makes it easy to deploy updated builds anytime you wish.
- Authentication using Web API Keys available.
- OAuth setup is required.
- API access to user reviews requires proper authentication setup.
- Keep in mind that this rich presence string will need to fit on one line, and is
  shown under a players name in the friends list. If it is too long, the end of the
  line will be truncated or ellipsized.
- OAuth authentication is required.
- The API requires a valid publisher key to be passed with every call.
- Web API method calls must originate from a hosted server.
- OAuth is supported for authentication.
- Steam provides world class support for in game purchases.
- Your game is especially vulnerable if the in-game purchases are part of an economy
  where virtual goods and services can be traded or gifted.
- Achievement names and icons should be all-ages appropriate.
- By default, games are limited to 100 achievements at first.
- Refer to the Web API Overview for details on authentication.
- OAuth is supported.
- Steam will synchronize the user's Steam Cloud files for your game before and after
  every session.
- If your game writes very large files, or many small files, to Steam Cloud, then
  this may cause a noticeable impact on the user's internet bandwidth and also delay
  their ability to shut down Steam or re-launch the game.
- Community hubs go live as soon as the product's release state is set to 'Coming
  Soon'.
- The Steam wrapper can be applied from within your SteamPipe upload script.
- Each build you intend to publish needs to be wrapped with the Steam wrapper.
- The error reporting API currently only supports 32-bit applications on Windows.
- API requires authentication to access data.
- Client API Key is assumed to be untrusted.
- Item visibility set to Private in Steam Economy Settings.
- Developers launching their first game on Steam must wait three weeks after the creation
  of an AppID before they can request Steam keys.
- OAuth authentication is required for accessing the Steam API.
- Leaderboards are application specific and are setup on the Game Admin page of the
  Steamworks partner site, or via the API.
- If the leaderboard is to be shown on the Community Hub, you must set the Community
  Name field when defining the leaderboard.
- 'The overlay is automatically disabled for ''Software'' app types. If you need the
  overlay enabled, you can do so by: Making sure your Steam account has the Edit App
  Metadata permission'
- Uses OAuth2 with authorization code flow.
- This feature requires that the test system be running a Steam client dated May 23,
  2020 or newer.
- Uses OAuth2 for authentication. Ensure to set up the proper application in the Steamworks
  dashboard.
- OAuth requires setup of connected app in Steamworks.
- The Steam Overlay must be active in your game for the Screenshots system to be available.
- Users can disable the Screenshot Uploader behavior in Settings.
- OAuth documentation provided.
- It's rarely a good idea to default to always-on though, and if your game supports
  more than 4 players then always-on is never recommended.
- Uses OAuth authentication
- Requires integration with ISteamUGC API to upload content to the Workshop.
- Integration with Steam Microtransactions API is needed for selling items.
- No, uploading to the Steam Workshop cannot be done by a user that has a temporary
  license for the game or tool that does the uploading.
- Session Tickets must only be used once.
- Network conditions may prevent the Steam backend from providing a callback.
- VAC only attempts to detect cheats reported by the developer.
- Game bans are only designed to manage cheating.
- Error Codes & Responses
- We can only provide you with information on how we handle VAT and sales taxes. You
  will need to consult with your tax advisors on your own tax obligations.
- Authentication using Web API Keys is supported.
- OAuth process is documented.
- Players have a right to express their discontent with a game or its features.
- It's a good idea to browse other product hubs to get an idea of what customization
  options you might want to take advantage of.
- API requires OAuth2 authentication and setup of a connected app.
- Users must have 'Generate CD Keys' permission within Steamworks in order to access
  the Curator Connect feature.
- Discounts can be edited up until the discount itself has started.
- Discount can be deleted up until the discount itself has started.
- OAuth is used for authorization.
- Some features may have restrictions based on account status
- Widgets will include utm_source=steamwidget on links to your Store page
- You can optionally include your own UTM parameters on the Steam widget's iframe
  link
- Access to your UTM Analytics report is limited to Steamworks accounts with the 'View
  Marketing Traffic Data' rights for your game.
- Frequency limited to 2 weeks for email notifications related to wishlist.
- Customers must have verified their e-mail account to receive messages.
- Install script functionality is primarily for Windows operating systems.
- MacOS support is limited to file permissions and symlinks.
- 'Setup uses two configuration files: setup.ini and resources/setup_<language>.ini.'
- OAuth setup required.
- Integration with the Steamworks API is never required to ship your product on Steam,
  but it is highly recommended.
- Ensure that you own a license for the App ID on the currently active Steam account.
- API requires OAuth2 authentication.
- SteamPipe uses the HTTP protocol for content delivery.
- SteamPipe has an efficient patching algorithm based on binary deltas.
- Requests generating 403 status codes will incur strict rate limits for the connecting
  IP.
- Some API endpoints may have rate limits.
- Some Web API methods return publicly accessible data and do not require authorization
  when called.
- Other methods may require you to use a unique API key.
- All Web API requests that contain Web API keys should be made over HTTPS.
- API requires setup of API key for access
- The token should be treated as an opaque string. Tokens are currently 32-character
  hexadecimal strings, but that is subject to change.
- If you include the state parameter, it will be passed back to the redirect URI after
  the user has confirmed or denied access.
- Refer to the documentation for specific API usage and guidelines.
- We strongly recommend (and require for Verified on Deck badging) that the default
  controller configuration for your game enables access to all in-game functionality.
- We recommend using one of the two Steamworks SDK on-screen keyboard APIs, depending
  on your use case.
- We recommend targeting Vulkan as your primary graphics API for best performance
  and battery life.
- We highly recommend using Steam Cloud for automatic transfers.
- We strongly recommend all singleplayer content is accessible without an Internet
  connection.
- We recommend putting all required functionality into your game client rather than
  requiring users to navigate a launcher before running your game.
- Before uploading and testing your own title using the instructions below, we recommend
  installing and running another title from Steam that uses Steam Play(Proton) on
  the Steam Deck.
- This will ensure Proton and its dependencies are installed.
- OAuth authentication is available.
- Uses OAuth2 with refresh token — requires setup of connected app in API
- The compatibility review process is only available for games.
- Games without native Linux builds will be run through Proton.
- Your kit may arrive with little / no power – if that’s the case you’ll need to plug
  it in so it can get some charge and boot up.
- Speaking of power, all of our dev-kits come with a US plug type 45W power supply.
  This means that if you’re outside of the USA, you’ll most likely need a travel adapter
  to charge and use your dev-kit. (We can’t guarantee it’ll charge with anything other
  than the included power supply at this stage)
- You can use a retail Steam Deck as a devkit.
- We recommend that all games have an FPS limit.
- Steam Deck will disconnect from Wi-Fi while suspended.
- OAuth is also supported
- Refer to the documentation for specific API usage and authentication details.
- OAuth authentication is required for API access.
- Some objects may have specific requirements for access
- You should never need to use these under normal conditions, it's usually functionally
  equivalent to calling the global accessors.
- The VSC does not support any color but white, and will interpret the RGB values
  as a greyscale value affecting the brightness of the Steam button LED.
- Currently only the VSC supports haptic pulses.
- The VSC has an LED, but only its brightness will be affected (the color is always
  white).
- The DS4's LED is the lightbar, whose color and brightness can both be configured.
- Requires setup of a connected app in Steam.
- Localization tokens may contain substitutions
- If a localization token is not found, the system will attempt to fallback to English
- ISteamGameCoordinator does not expose a global accessor function. You must access
  it through ISteamClient::GetISteamGenericInterface.
- This is part of the old user authentication API and should not be mixed with the
  new API.
- Steamworks is the set of tools and services built by Valve that help you configure,
  manage, and operate your game on Steam.
- API requires authentication.
- This call only modifies Steam's in-memory state and is very cheap.
- Authentication using Web API Keys available
- OAuth support documented
- You MUST call Shutdown when you are done using the interface to prevent memory and
  handle leaks.
- This API is just for during process lifetime, after Steam restarts no cookies are
  persisted.
- The exact values, range, etc, depend on the configuration, but (broadly speaking)
  traditional analog actions will provide normalized float values in the ballpark
  of -1.0 to 1.0, whereas mouse-like actions will provide delta updates which indicate
  the number of 'pixels' moved since the last frame.
- While the delta provided by mouse-like actions is very similar to pixel deltas as
  provided by an OS, the SC deltas are floats, not ints. This means less potential
  quantization and loss of precision when mapping this data to a camera rotation.
- In the case of single-axis analog inputs (such as analog triggers), only the x axis
  will contain data; the y axis will always be zero.
- For rotQuatX/rotQuatY/rotQuatZ/rotQuatW, the inertial measurement unit on the controller
  will create a quaternion based on fusing the gyro and the accelerometer. This value
  is the absolute orientation of the controller, but it will drift on the yaw axis.
- Positional acceleration is reported as an interpolated value between INT16_MIN and
  INT16_MAX where the extents are clamped to ±2G (1G = 9.80665 m/s2).
- Angular velocity is reported as an interpolated value between INT16_MIN and INT16_MAX
  where the extents are clamped to ±2000 degrees per second.
- You must call DestroyResult on the provided inventory result when you are done with
  it.
- OAuth authentication is required for accessing the Steamworks API
- Ensure proper API key is used for authentication
- This API is deprecated and may be removed in a future Steamworks SDK release. Please
  use ISteamNetworkingSockets or ISteamNetworkingMessages instead.
- The first packet send may be delayed as the NAT-traversal code runs.
- Callbacks are asynchronous for session requests and failures.
- Sessions automatically time out when communications are idle.
- Be very careful when using the value provided in callbacks structs. Callbacks are
  queued, and the value that you will receive in your callback is the userdata that
  was effective at the time the callback was queued.
- Messages sent on a lane index other than 0 have a small overhead on the wire, so
  for maximum wire efficiency, lane 0 should be the 'most common' lane, regardless
  of priorities or weights.
- Signaling refers to rendezvous messages sent through a trusted channel that is low
  bandwidth and high latency, used by peers to negotiate a P2P connection.
- dedicated servers hosted in known data centers do not need to call InitializeRelayNetworkAccess
- it takes a few seconds to initialize access to the relay network
- Uses OAuth2 with Web API Keys
- Requires OAuth2 authentication
- API keys may be necessary for some endpoints
- This call is asynchronous and triggers a ScreenshotReady_t callback when the screenshot
  has finished writing to disk.
- Either nConsumerAppID or nCreatorAppID must have a valid AppID!
- You must release the handle returned by CreateQueryUserUGCRequest when you are done
  with it!
- User-generated content must be tagged appropriately for Mature Content Filtering.
- Uses Steam authentication system.
- You must have called RequestGlobalStats and it needs to return successfully via
  its callback prior to calling GetGlobalStatHistory.
- The specified stat must exist in App Admin on the Steamworks website, and the changes
  must be published.
- You must have called RequestCurrentStats and it needs to return successfully via
  its callback prior to calling other functions.
- Authentication using Web API Keys is required.
- VR games default to enabled unless 'VRHeadsetStreaming' '0' is in the extended appinfo
  for a game.
- This is useful for games that have asymmetric multiplayer gameplay.
- Data returned in a successful call to GetOPFStringForApp() can only be retrieved
  once.
- An encrypted app ticket can only contain up to 140 DLC appIDs. If your game intends
  to have more than that, you'll need to use Session Tickets/WebAPI to check for ownership.
- Authentication can be disabled to use generic identities.
- Max size of a single message that we can SEND is 512 * 1024 bytes.
- Uses OAuth2 authentication.
- Most Steamworks API functions allocate a small amount of thread-local memory for
  parameter storage, calling this will manually free such memory.
- It's best to call SteamGameServer_RunCallbacks at >10Hz, the more time between calls,
  the more potential latency between receiving events or results from the Steamworks
  API.
- OAuth setup required for access.
- This is a Service interface, methods in this interface should be called with the
  input_json parameter.
- This API MUST be called from a secure server, and can never be used directly by
  clients.
- Your game will need to obtain permission from the user to access their Steam Cloud
  files.
- It is recommended for POST requests that all parameters are in the request body.
- Requires `read_cloud` and `write_cloud` OAuth access.
- Methods in this interface should be called with the input_json parameter.
- Refer to the authentication documentation for details on setup.
- This call requires a publisher API key to use this method.
- This API MUST be called from a secure server, and can never be used directly by
  clients!
- Requires setup of connected app in steam_api
- Requires API key for access.
- A Financial API Group has no users and no apps associated to it, it is solely dedicated
  to the API retrieval of all financial data for a partner account.
- For additional security, it is recommended that you use the 'Manage WebAPI Key'
  section on the Financial API Group's page to add a set of Whitelisted IPs as trusted
  access points.
- Date values provided and returned will be for the Pacific Time Zone (PT)
- API requires OAuth authentication.
- API requires authentication via OAuth2
- Uses OAuth for authentication.
- As such this API MUST be called from a secure server, and can never be used directly
  by clients!
- OAuth documentation provided
- Requires setup of Steamworks account for authentication
- Steamworks API integration is required, but fairly easy to implement.
errors:
- Error Codes & Responses
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Permission Denied: User does not have the required permissions.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your authentication credentials.'
- Ensure that you have published your changes on the Steam partner website and have
  waited up to 10 minutes or restarted your Steam client to receive the published
  changes.
- '401 Unauthorized: Check your client ID and secret.'
- '403 Forbidden: Ensure you have the correct permissions.'
- Error Codes & Responses available.
- 'HTTP 404: Endpoint not found.'
- 'HTTP 403: Access denied - check your API key and permissions.'
- 'HTTP 500: Internal server error - try again later.'
- '401 Unauthorized: Invalid session ticket or API key'
- '403 Forbidden: Access denied, insufficient permissions'
- Common error codes and responses are detailed in the documentation.
- '401 Unauthorized: Check permissions for the product.'
- 'INVALID_API_KEY: Check your API key'
- 'UNAUTHORIZED: Ensure you have the correct permissions'
- Non-zero return code indicates the redist is not marked as installed.
- Install script not signed may prevent writing to HKLM.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- The Steam client isn't running.
- The Steam client couldn't determine the App ID of the game.
- Your application is not running under the same OS user context as the Steam client.
- '403: Forbidden - When using a regular Web API key instead of your publisher key.'
- '429 Too Many Requests: Exceeded rate limit.'
- '400: Bad Request: Please verify that all required parameters are being sent.'
- '401: Unauthorized: Access is denied. Retrying will not help. Please verify your
  `key=` parameter.'
- '403: Forbidden: Access is denied. Retrying will not help. Please verify your `key=`
  parameter.'
- '404: Not Found: The API requested does not exist.'
- '405: Method Not Allowed: This API has been called with the wrong HTTP method like
  GET or PUSH.'
- '429: Too Many Requests: You are being rate limited.'
- '500: Internal Server Error: An unrecoverable error has occurred, please try again.'
- '503: Service Unavailable: Server is temporarily unavailable, or too busy to respond.
  Please wait and try again later.'
- Error Codes & Responses documentation available.
- The configuration isn't loaded for this controller yet
- 'k_EGCResultNoMessage: There is no message in the queue.'
- 'k_EGCResultBufferTooSmall: The buffer is too small for the requested message.'
- 'k_EGCResultNotLoggedOn: The client is not logged onto Steam.'
- 'k_EGCResultInvalidMessage: Something was wrong with the message being sent with
  SendMessage.'
- 'k_uAPICallInvalid: if the input was invalid'
- '403 Forbidden: Invalid API key or access denied'
- 'k_EP2PSessionErrorNotRunningApp: The target user is not running the same game.'
- 'k_EP2PSessionErrorNoRightsToApp: The local user doesn''t own the app that is running.'
- 'k_EP2PSessionErrorDestinationNotLoggedIn: Target user isn''t connected to Steam.'
- 'k_EP2PSessionErrorTimeout: The connection timed out because the target user didn''t
  respond.'
- 'k_EResultNoConnection: No session with the user exists.'
- 'k_EResultNoConnection: Session failed or was closed by the peer.'
- k_EResultNoConnection - bad hConn
- k_EResultInvalidParam - Invalid number of lanes, bad weights, or you tried to reduce
  the number of lanes
- k_EResultInvalidState - Connection is already dead, etc
- 'k_EResultInvalidParam: invalid connection handle'
- 'k_EResultIPNotFound: This connection wasn''t made using FakeIP system'
- '401 Unauthorized: Invalid or expired token'
- '403 Forbidden: Insufficient permissions'
- '404 Not Found: Endpoint does not exist'
- 'INVALID_SCREENSHOT_HANDLE: Returned if the file could not be saved.'
- 'k_UGCQueryHandleInvalid: Invalid handle provided.'
- Returns 0 if the specified stat does not exist or history is not available.
- Returns -1 if RequestGlobalAchievementPercentages has not been called or if there
  are no global achievement percentages.
- 'k_EResultInvalidState: Stats haven''t been loaded yet, Call RequestCurrentStats.'
- 'k_EResultFail: If the remote call fails.'
- '401 Unauthorized: Recheck API key validity'
- 'Error Codes & Responses: Refer to documentation for details.'
- 'k_EResultInvalidParam: This application is not a video and cannot be streamed.'
- 'k_EResultFileNotFound: This video has not been processed for streaming.'
- 'k_EResultAccessDenied: The video could not be accessed.'
- 'k_EResultIgnored: Message was dropped due to connection state or queue size.'
- 'k_EResultOK: Success.'
- 'k_EResultFail: Generic failure.'
- 'k_EResultNoConnection: Your Steam client doesn''t have a connection to the back-end.'
- 'k_EResultInvalidPassword: Password/ticket is invalid.'
- 'k_EResultLoggedInElsewhere: The user is logged in elsewhere.'
- 'k_EResultInvalidProtocolVer: Protocol version is incorrect.'
- 'k_EResultInvalidParam: A parameter is incorrect.'
- 'k_EResultFileNotFound: File was not found.'
- 'k_EResultBusy: Called method is busy - action not taken.'
- 'k_EResultInvalidState: Called object was in an invalid state.'
- 'k_EResultInvalidName: The name was invalid.'
- 'k_EResultInvalidEmail: The email was invalid.'
- 'k_EResultDuplicateName: The name is not unique.'
- 'k_EResultAccessDenied: Access is denied.'
- 'k_EResultTimeout: Operation timed out.'
- 'k_EResultBanned: The user is VAC2 banned.'
- 'k_EResultAccountNotFound: Account not found.'
- 'k_EResultInvalidSteamID: The Steam ID was invalid.'
- 'k_EResultServiceUnavailable: The requested service is currently unavailable.'
- 'k_EResultNotLoggedOn: The user is not logged on.'
- 'k_EResultPending: Request is pending, it may be in process or waiting on third
  party.'
- 'k_EResultEncryptionFailure: Encryption or Decryption failed.'
- 'k_EResultInsufficientPrivilege: Insufficient privilege.'
- 'k_EResultLimitExceeded: Too much of a good thing.'
- 'k_EResultRevoked: Access has been revoked (used for revoked guest passes).'
- 'k_EResultExpired: License/Guest pass the user is trying to access is expired.'
- 'k_EResultAlreadyRedeemed: Guest pass has already been redeemed by account, cannot
  be used again.'
- 'k_EResultDuplicateRequest: The request is a duplicate and the action has already
  occurred in the past, ignored this time.'
- 'k_EResultAlreadyOwned: All the games in this guest pass redemption request are
  already owned by the user.'
- 'k_EResultIPNotFound: IP address not found.'
- 'k_EResultPersistFailed: Failed to write change to the data store.'
- 'k_EResultLockingFailed: Failed to acquire access lock for this operation.'
- 'k_EResultLogonSessionReplaced: The logon session has been replaced.'
- 'k_EResultConnectFailed: Failed to connect.'
- 'k_EResultHandshakeFailed: The authentication handshake has failed.'
- 'k_EResultIOFailure: There has been a generic IO failure.'
- 'k_EResultRemoteDisconnect: The remote server has disconnected.'
- 'k_EResultShoppingCartNotFound: Failed to find the shopping cart requested.'
- 'k_EResultBlocked: A user blocked the action.'
- 'k_EResultIgnored: The target is ignoring sender.'
- 'k_EResultNoMatch: Nothing matching the request found.'
- 'k_EResultAccountDisabled: The account is disabled.'
- 'k_EResultServiceReadOnly: This service is not accepting content changes right now.'
- 'k_EResultAccountNotFeatured: Account doesn''t have value, so this feature isn''t
  available.'
- 'k_EResultAdministratorOK: Allowed to take this action, but only because requester
  is admin.'
- 'k_EResultContentVersion: A Version mismatch in content transmitted within the Steam
  protocol.'
- 'k_EResultTryAnotherCM: The current CM can''t service the user making a request,
  user should try another.'
- 'k_EResultPasswordRequiredToKickSession: You are already logged in elsewhere, this
  cached credential login has failed.'
- 'k_EResultAlreadyLoggedInElsewhere: The user is logged in elsewhere. (Use [k_EResultLoggedInElsewhere](#k_EResultLoggedInElsewhere)
  instead!)'
- 'k_EResultSuspended: Long running operation has suspended/paused. (eg. content download.)'
- 'k_EResultCancelled: Operation has been canceled, typically by user. (eg. a content
  download.)'
- 'k_EResultDataCorruption: Operation canceled because data is ill formed or unrecoverable.'
- 'k_EResultDiskFull: Operation canceled - not enough disk space.'
- 'k_EResultRemoteCallFailed: The remote or IPC call has failed.'
- 'k_EResultPasswordUnset: Password could not be verified as it''s unset server side.'
- 'k_EResultExternalAccountUnlinked: External account (PSN, Facebook...) is not linked
  to a Steam account.'
- 'k_EResultPSNTicketInvalid: PSN ticket was invalid.'
- 'k_EResultExternalAccountAlreadyLinked: External account (PSN, Facebook...) is already
  linked to some other account, must explicitly request to replace/delete the link
  first.'
- 'k_EResultRemoteFileConflict: The sync cannot resume due to a conflict between the
  local and remote files.'
- 'k_EResultIllegalPassword: The requested new password is not allowed.'
- 'k_EResultSameAsPreviousValue: New value is the same as the old one. This is used
  for secret question and answer.'
- 'k_EResultAccountLogonDenied: Account login denied due to 2nd factor authentication
  failure.'
- 'k_EResultCannotUseOldPassword: The requested new password is not legal.'
- 'k_EResultInvalidLoginAuthCode: Account login denied due to auth code invalid.'
- 'k_EResultAccountLogonDeniedNoMail: Account login denied due to 2nd factor auth
  failure - and no mail has been sent.'
- 'k_EResultHardwareNotCapableOfIPT: The users hardware does not support Intel''s
  Identity Protection Technology (IPT).'
- 'k_EResultIPTInitError: Intel''s Identity Protection Technology (IPT) has failed
  to initialize.'
- 'k_EResultParentalControlRestricted: Operation failed due to parental control restrictions
  for current user.'
- 'k_EResultFacebookQueryError: Facebook query returned an error.'
- 'k_EResultExpiredLoginAuthCode: Account login denied due to an expired auth code.'
- 'k_EResultIPLoginRestrictionFailed: The login failed due to an IP restriction.'
- 'k_EResultAccountLockedDown: The current users account is currently locked for use.
  This is likely due to a hijacking and pending ownership verification.'
- 'k_EResultAccountLogonDeniedVerifiedEmailRequired: The logon failed because the
  accounts email is not verified.'
- 'k_EResultNoMatchingURL: There is no URL matching the provided values.'
- 'k_EResultBadResponse: Bad Response due to a Parse failure, missing field, etc.'
- 'k_EResultRequirePasswordReEntry: The user cannot complete the action until they
  re-enter their password.'
- 'k_EResultValueOutOfRange: The value entered is outside the acceptable range.'
- 'k_EResultUnexpectedError: Something happened that we didn''t expect to ever happen.'
- 'k_EResultDisabled: The requested service has been configured to be unavailable.'
- 'k_EResultInvalidCEGSubmission: The files submitted to the CEG server are not valid.'
- 'k_EResultRestrictedDevice: The device being used is not allowed to perform this
  action.'
- 'k_EResultRegionLocked: The action could not be complete because it is region restricted.'
- 'k_EResultRateLimitExceeded: Temporary rate limit exceeded, try again later, different
  from k_EResultLimitExceeded which may be permanent.'
- 'k_EResultAccountLoginDeniedNeedTwoFactor: Need two-factor code to login.'
- 'k_EResultItemDeleted: The thing we''re trying to access has been deleted.'
- 'k_EResultAccountLoginDeniedThrottle: Login attempt failed, try to throttle response
  to possible attacker.'
- 'k_EResultTwoFactorCodeMismatch: Two factor authentication (Steam Guard) code is
  incorrect.'
- 'k_EResultTwoFactorActivationCodeMismatch: The activation code for two-factor authentication
  (Steam Guard) didn''t match.'
- 'k_EResultAccountAssociatedToMultiplePartners: The current account has been associated
  with multiple partners.'
- 'k_EResultNotModified: The data has not been modified.'
- 'k_EResultNoMobileDevice: The account does not have a mobile device associated with
  it.'
- 'k_EResultTimeNotSynced: The time presented is out of range or tolerance.'
- 'k_EResultSmsCodeFailed: SMS code failure - no match, none pending, etc.'
- 'k_EResultAccountLimitExceeded: Too many accounts access this resource.'
- 'k_EResultAccountActivityLimitExceeded: Too many changes to this account.'
- 'k_EResultPhoneActivityLimitExceeded: Too many changes to this phone.'
- 'k_EResultRefundToWallet: Cannot refund to payment method, must use wallet.'
- 'k_EResultEmailSendFailure: Cannot send an email.'
- 'k_EResultNotSettled: Can''t perform operation until payment has settled.'
- 'k_EResultNeedCaptcha: The user needs to provide a valid captcha.'
- 'k_EResultGSLTDenied: A game server login token owned by this token''s owner has
  been banned.'
- 'k_EResultGSOwnerDenied: Game server owner is denied for some other reason such
  as account locked, community ban, vac ban, missing phone, etc.'
- 'k_EResultInvalidItemType: The type of thing we were requested to act on is invalid.'
- 'k_EResultIPBanned: The IP address has been banned from taking this action.'
- 'k_EResultGSLTExpired: This Game Server Login Token (GSLT) has expired from disuse;
  it can be reset for use.'
- 'k_EResultInsufficientFunds: user doesn''t have enough wallet funds to complete
  the action'
- 'k_EResultTooManyPending: There are too many of this thing pending already'
- Error Codes & Responses documented.
- '200 OK: Responses to well-formed and authenticated requests will usually be 200
  OK.'
- Error codes found in the x-eresult header.
- 'success: True if the method was successful.'
- 'error: a string describing why this call failed.'
- 'k_EMicroTxnResultInvalidParam: Invalid parameter provided'
- '1001: Action not allowed'
- 'INVALID_PARAMETER: Check the provided parameters'
- 'NOT_AUTHORIZED: Ensure proper authentication key is used'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - ISteamUserAuth
  - Web API Keys
  - OAuth
  - ISteamApps
  - ISteamUser
  - ISteamUserStats
  - SteamUserAuth
  - IPlayerService
client:
  base_url: https://partner.steamgames.com
  auth:
    type: oauth2
source_metadata: null
