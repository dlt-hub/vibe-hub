resources:
- name: soda_widget
  endpoint:
    path: /soda/soda-widget.min.js
    method: GET
- name: ticket_widget
  endpoint:
    path: /tonic/ticket-widget.min.js
    method: GET
    data_selector: widget
    params: {}
- name: widget
  endpoint:
    path: //widgets.designmynight.com/bookings-partner.min.js
    method: GET
    data_selector: widget
    params: {}
- name: booking_widget
  endpoint:
    path: /bookings-partner.min.js
    method: GET
    data_selector: widget
- name: general_enquiry_form
  endpoint:
    path: /bookings/designmynight/book
    method: POST
    data_selector: enquiry_details
    params:
      enquiry_type: enquiry
      source: partner
      venue_group: VENUEGROUPID
- name: venues
  endpoint:
    path: /v4/venues/{venue_id}/booking-availability
    method: POST
    data_selector: payload
    params: []
- name: bookings
  endpoint:
    path: /v4/bookings
    method: POST
    data_selector: payload
    params: []
- name: general_enquiry
  endpoint:
    path: /book
    method: POST
    data_selector: enquiry_details
- name: Customising Email Templates
  endpoint:
    path: /collins/customising-email-templates
    method: GET
    data_selector: templates
- name: bookings
  endpoint:
    path: /v4/bookings
    method: POST
    data_selector: payload
    params: {}
- name: assigned_areas
  endpoint:
    path: /v4/bookings/{booking_id}/areas
    method: GET
    data_selector: payload.areas
    params: {}
- name: booking_rules
  endpoint:
    path: /v4/venues/{venue_id}/booking-rules
    method: POST
    data_selector: payload
    params: {}
- name: preorders
  endpoint:
    path: /v4/bookings/{booking_id}/preorder
    method: POST
    data_selector: payload.preorders
    params: {}
- name: venues
  endpoint:
    path: /venues/552435790df6902b7256f237/booking-availability
    method: POST
    data_selector: payload
    params: []
- name: bookings
  endpoint:
    path: /bookings
    method: POST
    data_selector: payload.booking
    params: []
- name: bookings
  endpoint:
    path: /bookings
    method: GET
    data_selector: payload.bookings
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: offers
  endpoint:
    path: /venues/VENUE_ID/offers
    method: GET
    data_selector: payload
    params: {}
- name: bookings
  endpoint:
    path: /v4/bookings
    method: POST
    data_selector: payload
    params: {}
- name: assigned_areas
  endpoint:
    path: /v4/bookings/{booking_id}/areas
    method: GET
    data_selector: payload.areas
    params: {}
- name: booking_rules
  endpoint:
    path: /v4/venues/{venue_id}/booking-rules
    method: POST
    data_selector: payload
    params: {}
- name: preorder_information
  endpoint:
    path: /v4/bookings/{booking_id}/preorders
    method: POST
    data_selector: payload.booking.preorders
    params: {}
- name: bookings
  endpoint:
    path: /bookings
    method: GET
    data_selector: payload.bookings
    params: {}
- name: venues
  endpoint:
    path: /v4/venues
    method: GET
    data_selector: payload.pages
    params:
      venue_group: 5524371d0df690ad7156f2ea
- name: venue_settings
  endpoint:
    path: /v4/venues/{venue_id}
    method: GET
    data_selector: payload.venue
    params:
      fields: booking_types
- name: packages
  endpoint:
    path: /v4/venues/{venue_id}
    method: GET
    data_selector: payload.venue.packages
    params:
      fields: packages
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: payload.users
    params:
      search: last_name
- name: add_user
  endpoint:
    path: /venue-groups/{venue_group_id}/users
    method: POST
    data_selector: users
    params: {}
- name: edit_user
  endpoint:
    path: /venue-groups/{venue_group_id}/users/{user_id}
    method: POST
    data_selector: users
    params: {}
- name: remove_user
  endpoint:
    path: /venue-groups/{venue_group_id}/users/{user_id}
    method: DELETE
    data_selector: users
    params: {}
- name: offers
  endpoint:
    path: /venues/VENUE_ID/offers
    method: GET
    data_selector: payload
    params: {}
- name: bookings
  endpoint:
    path: /api/booking-api
    method: POST
    data_selector: bookings
    params: {}
- name: booking-availability
  endpoint:
    path: /api/booking-availability
    method: GET
    data_selector: availability
    params: {}
- name: users
  endpoint:
    path: /api/users-api
    method: GET
    data_selector: users
    params: {}
- name: offers
  endpoint:
    path: /api/offers-api
    method: GET
    data_selector: offers
    params: {}
- name: venues
  endpoint:
    path: /api/venues-api
    method: GET
    data_selector: venues
    params: {}
- name: venue-groups
  endpoint:
    path: /api/venue-groups
    method: GET
    data_selector: groups
    params: {}
- name: venues
  endpoint:
    path: /v4/venues
    method: GET
    data_selector: payload.pages
    params:
      venue_group: 5524371d0df690ad7156f2ea
- name: venue_settings
  endpoint:
    path: /v4/venues/{venue_id}
    method: GET
    data_selector: payload.venue
    params:
      fields: booking_types
- name: packages
  endpoint:
    path: /v4/venues/{venue_id}
    method: GET
    data_selector: payload.venue.packages
    params:
      fields: packages
- name: bookings
  endpoint:
    path: /api/booking-api
    method: GET
- name: users
  endpoint:
    path: /api/users-api/
    method: GET
- name: venues
  endpoint:
    path: /api/venues-api/
    method: GET
- name: offers
  endpoint:
    path: /api/offers-api/
    method: GET
- name: bookings
  endpoint:
    path: /api/bookings
    method: POST
    data_selector: bookingDetails
    params: {}
- name: payments
  endpoint:
    path: /api/payments
    method: POST
    data_selector: paymentDetails
    params: {}
- name: booking
  endpoint:
    path: /api/booking-api/
    method: POST
    data_selector: bookings
    params: {}
- name: bookings_search
  endpoint:
    path: /api/bookings-search/
    method: GET
    data_selector: bookings
    params: {}
- name: booking
  endpoint:
    path: /PubChain/send/1902/booking
    method: POST
- name: payments
  endpoint:
    path: /api/payments
    method: POST
    data_selector: payments
    params: {}
- name: bookings
  endpoint:
    path: /api/bookings
    method: POST
    data_selector: bookings
    params: {}
- name: Bookings
  endpoint:
    path: /api/booking-api
    method: GET
- name: Users
  endpoint:
    path: /api/users-api/
    method: GET
- name: Offers
  endpoint:
    path: /api/offers-api/
    method: GET
- name: Venues
  endpoint:
    path: /api/venues-api/
    method: GET
- name: Bookings
  endpoint:
    path: /api/booking-api
    method: GET
- name: Users
  endpoint:
    path: /api/users-api/
    method: GET
- name: Venues
  endpoint:
    path: /api/venues-api/
    method: GET
- name: Offers
  endpoint:
    path: /api/offers-api/
    method: GET
notes:
- Contact your account manager to request an API key. Your unique ID and key must
  be passed with every request.
- Widget is fully responsive to the container in which it is placed.
- A widget will be rendered inside the parent element of where the <script> tag is
  located.
- The widget is applied to a page by including the <script> tag.
- You can insert as many widgets on one page as you need.
- Resources for your email templates, such as images, will not be accepted or handled
  by us. Please do not send us your images along with the template.
- Depending on your HTML code, the emails may look slightly different in different
  mail clients (Gmail, hotmail, etc). This is because there can be code in your HTML
  that is not supported by a specific client.
- Depending on our tech roadmap, it can take our tech team up to two weeks to upload
  your customised email templates.
- Collins users MUST create all their custom enquiry fields within Collins before
  you can proceed with creating your enquiry form.
- If the action of the form is a direct post to https://bookings.designmynight.com/book,
  then you will need to add enquiry_type, source, and venue_group as hidden fields.
- Resources for your email templates, such as images, will not be accepted or handled
  by us.
- Depending on your HTML code, the emails may look slightly different in different
  mail clients.
- Use the venues API endpoint to check the types of booking that are available.
- Submitting to the /bookings endpoint allows you to capture enquiries without availability
  check.
- The use of this endpoint is deprecated. Please use https://docs.collinsbookings.com/#tag/Bookings
  instead.
- Results are always limited to no more than 30 results per page.
- Sorting results is not currently supported when outputting as a CSV.
- Results are limited to no more than 30 results per page.
- You will need to contact your Collins Account Manager to set up the integration.
- The API defaults to just including bookings that are new, in progress or confirmed.
- To get API access for your EPOS system, the first step is for the Account Manager
  at your EPOS system to have a look through our API Basics for Developers.
- The Zonal API does not support editing or deleting deposits from the EPOS.
- If you have already started taking payments through Collins Pay, you will need to
  specify if you would like to push all future bookings with payments already added
  on Collins.
- If a second payment fails to push, there is currently no way of re-pushing this
  within Collins.
- 'Minimum Deposit Date: Bookings with deposits added before the integration went
  live will not get pushed to the till if updated.'
- Payments will not be pushed to the till after the date of the booking has already
  passed.
- There is not currently a status check in place, so Collins would push all bookings
  regardless of booking status.
- If you wish to push a booking/deposit that was already set up on Collins before
  the integration, you will need to add a new payment.
- The integration currently supports pushing payments to your tills if they have been
  added to Collins before the party has been seated on your tills.
- The integration does not currently support pushing any payments after the booking
  date has passed.
- If you have not got a Minimum Deposit Date set up, payments that have been added
  to Collins before the integration has been set up are valid to push.
- If your venue has already been using Collins Pay, let us know whether your team
  has been manually adding payments to your tills.
- It’s worth checking whether the booking had been added to the system before the
  Collins/Zonal integration went live. Any bookings with deposits that were already
  on Collins (before the integration went live) that get updated, will not get pushed
  to the till (to avoid duplicates on your tills).
- It’s important to note that this integration will not allow us to push payments
  to the till after the date of the booking has already passed.
- Ensure all tables in Collins are named exactly the same as they are on the till.
- Ensure that all of your tables in Collins are named exactly the same as they are
  on the till.
- If you are looking to get API access for your CRM system, the first step is for
  the Account Manager at your CRM system to have a look through our API Basics for
  Developers.
errors:
- '429: Too Many Requests'
- '200: OK'
- 'status: received'
- '404 Not Found: If the user was not found.'
- '404: User not found'
- No 'Access-Control-Allow-Origin' header is present on the requested resource
- Unable to connect to the remote server
- Booking Not Found Error
- Invalid date 'False'; expected YYYY-mm-dd
- 'Invalid booking field: ContactName'
- Invalid MAC error
- The remote name could not be resolved
- 'The request was aborted: The request was canceled'
- Booking Not Found
- Invalid MAC
- 'NONE of my bookings are pushing to the till: Ensure all of your tables in Collins
  are named exactly the same as they are on the till.'
- 'SOME of my bookings are pushing to the till: Test your internet stability and strength.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.designmynight.com/v4/
  auth:
    type: basic
    location: header
    header_name: Authorization
source_metadata: null
