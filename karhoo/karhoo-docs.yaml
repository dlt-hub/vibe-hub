resources:
- name: Quotes
  endpoint:
    path: /reference/request_quotes
    method: POST
- name: Bookings
  endpoint:
    path: /reference/post_booking
    method: POST
- name: Health Check
  endpoint:
    path: /reference/get_healthcheck
    method: GET
- name: Bookings
  endpoint:
    path: /reference/bookings
    method: GET
- name: Quotes
  endpoint:
    path: /reference/quotes
    method: GET
- name: SupportTickets
  endpoint:
    path: /reference/supporttickets
    method: GET
- name: trips
  endpoint:
    path: /reference/trip_resync
    method: POST
- name: quotes
  endpoint:
    path: /reference/get_quotes-quote-list-id-dms-raw-payloads
    method: GET
- name: Auth
  endpoint:
    path: /reference/auth
    method: POST
- name: Quotes
  endpoint:
    path: /reference/quotes
    method: GET
- name: Bookings
  endpoint:
    path: /reference/bookings
    method: GET
- name: quotes
  endpoint:
    path: /v2/quotes
    method: POST
- name: quotes
  endpoint:
    path: /v2/quotes/{ID}
    method: GET
- name: quotes
  endpoint:
    path: /v2/quotes
    method: GET
- name: bookings
  endpoint:
    path: /v1/bookings/
    method: POST
- name: bookings
  endpoint:
    path: /v1/bookings/
    method: POST
- name: revoke_refresh_token
  endpoint:
    path: /v1/auth/refresh
    method: DELETE
    data_selector: refresh_token
- name: healthcheck
  endpoint:
    path: /v1/auth/healthcheck
    method: GET
    data_selector: '204'
- name: services
  endpoint:
    path: /reference/get_id-3
    method: GET
- name: quotes
  endpoint:
    path: /reference/request_quotes
    method: POST
- name: bookings
  endpoint:
    path: /reference/post_booking
    method: POST
- name: user_details
  endpoint:
    path: /oauth/v2/userinfo
    method: GET
    data_selector: object
- name: revoking_tokens
  endpoint:
    path: /oauth/v2/revoke
    method: POST
- name: token_exchange
  endpoint:
    path: /oauth/v2/token-exchange
    method: POST
- name: services
  endpoint:
    path: /v2/services/{id}
    method: GET
    data_selector: services
    params: {}
- name: services
  endpoint:
    path: /v2/services/
    method: POST
    data_selector: services
    params: {}
- name: healthcheck
  endpoint:
    path: /services/healthcheck
    method: GET
    data_selector: '204'
- name: Bookings
  endpoint:
    path: /reference/post_booking
    method: POST
- name: Quotes
  endpoint:
    path: /reference/request_quotes
    method: POST
- name: Healthcheck
  endpoint:
    path: /reference/get_healthcheck
    method: GET
- name: request_quotes
  endpoint:
    path: /v2/quotes/
    method: POST
- name: quotes
  endpoint:
    path: /v2/quotes/{id}
    method: GET
    data_selector: quotes
    params:
      passengers: integer
- name: coverage
  endpoint:
    path: /v2/quotes/coverage
    method: GET
    data_selector: coverage
    params:
      latitude: required
      longitude: required
      local_time_of_pickup: optional
- name: healthcheck
  endpoint:
    path: /v2/quotes/healthcheck
    method: GET
- name: trips
  endpoint:
    path: /reference/trip_resync
    method: POST
- name: quotes
  endpoint:
    path: /reference/get_quotes-quote-list-id-dms-raw-payloads
    method: GET
- name: book_trip
  endpoint:
    path: /v1/bookings/
    method: POST
    data_selector: Booking ID
    params: {}
- name: bookings
  endpoint:
    path: /v1/bookings
    method: POST
    data_selector: object
    params: {}
- name: book_a_trip_with_nonce
  endpoint:
    path: /v1/bookings/with-nonce
    method: POST
- name: booking_details
  endpoint:
    path: /v1/bookings/{id}
    method: GET
- name: booking
  endpoint:
    path: /bookings
    method: GET
    data_selector: bookings
    params: {}
- name: cancel_booking
  endpoint:
    path: /v1/bookings/{id}/cancel
    method: POST
    data_selector: '204'
    params: {}
- name: cancel_fee
  endpoint:
    path: /v1/bookings/{id}/cancel-fee
    method: GET
    data_selector: cancellation_fee
- name: booking_history
  endpoint:
    path: /v1/bookings/{id}/history
    method: GET
    data_selector: history_items
    params:
      id: string
- name: Booking Status
  endpoint:
    path: /v1/bookings/id/status
    method: GET
- name: Booking History
  endpoint:
    path: /v1/bookings/id/history
    method: GET
- name: booking_status
  endpoint:
    path: /v1/bookings/{id}/status
    method: GET
    data_selector: status
- name: position_of_trip
  endpoint:
    path: /v1/bookings/{id}/track
    method: GET
    data_selector: position
    params: {}
- name: search_booking_history
  endpoint:
    path: /v1/bookings/search
    method: POST
    data_selector: results
    params: {}
- name: trips_for_organisation
  endpoint:
    path: /v1/bookings/organisations/{id}
    method: GET
    data_selector: bookings
    params:
      pagination_offset: number
      pagination_row_count: number
- name: trips_for_fleet
  endpoint:
    path: /v1/bookings/fleets/{id}
    method: GET
    data_selector: bookings
    params:
      pagination_offset: number
      pagination_row_count: number
- name: follow_booking
  endpoint:
    path: /v1/bookings/follow/{code}
    method: GET
    data_selector: booking_info
    params: {}
- name: cancel_booking
  endpoint:
    path: /v1/bookings/follow/{code}/cancel
    method: POST
    data_selector: responses
- name: cancellation_fee
  endpoint:
    path: /v1/bookings/follow/{code}/cancel-fee
    method: GET
    data_selector: cancellation_fee
    params:
      code: string
- name: healthcheck
  endpoint:
    path: /v1/bookings/healthcheck
    method: GET
- name: final_fare
  endpoint:
    path: /v1/fares/trip/{trip_id}
    method: GET
    data_selector: fare
    params: {}
- name: supplier_details
  endpoint:
    path: /v1/fares/trip/{trip_id}/supplier
    method: GET
    data_selector: object
    params: {}
- name: trip_document
  endpoint:
    path: /v1/fares/trip/{trip_id}/trip-document
    method: GET
    data_selector: file
    params: {}
- name: Webhooks
  endpoint:
    path: /reference/webhooks
    method: GET
- name: Quotes
  endpoint:
    path: /reference/request_quotes
    method: POST
- name: Bookings
  endpoint:
    path: /reference/post_booking
    method: POST
- name: webhooks
  endpoint:
    path: /reference/webhooks
    method: GET
- name: auth
  endpoint:
    path: /reference/auth
    method: GET
- name: trips
  endpoint:
    path: /reference/trips
    method: GET
- name: quotes
  endpoint:
    path: /reference/quotes
    method: GET
- name: bookings
  endpoint:
    path: /reference/bookings
    method: GET
- name: webhook
  endpoint:
    path: /v1/webhooks/
    method: POST
    data_selector: url
    params: {}
- name: active_subscriptions
  endpoint:
    path: /v1/webhooks/
    method: GET
- name: webhooks
  endpoint:
    path: /v1/webhooks/
    method: DELETE
    params:
      subscription_id: uuid
- name: login
  endpoint:
    path: /login-token
    method: POST
    data_selector: UserInfo
- name: revoke
  endpoint:
    path: /reference/revoke
    method: POST
    data_selector: UserInfo
- name: revoke
  endpoint:
    path: /reference/revoke
    method: POST
    data_selector: result
    params: {}
- name: login_token
  endpoint:
    path: /reference/login-token
    method: POST
    data_selector: result
    params: {}
- name: address_service
  endpoint:
    path: /reference/address-service
    method: GET
    data_selector: result
    params: {}
- name: placeSearch
  endpoint:
    path: /address-service-placesearch
    method: GET
- name: locationInfo
  endpoint:
    path: /address-service-locationinfo
    method: GET
- name: reverseGeocode
  endpoint:
    path: /address-service-reversegeocode
    method: GET
- name: placeSearch
  endpoint:
    path: /address-service/placesearch
    method: POST
    data_selector: data
    params: {}
- name: placeSearch
  endpoint:
    path: /address-service-placesearch
    method: POST
    data_selector: Places
    params: {}
- name: locationInfo
  endpoint:
    path: /address-service/locationinfo
    method: GET
- name: location_info
  endpoint:
    path: /address-service/locationInfo
    method: POST
    data_selector: result
- name: reverseGeocode
  endpoint:
    path: /address-service/reversegeocode
    method: GET
- name: reverseGeocode
  endpoint:
    path: /address-service/reverseGeocode
    method: GET
    data_selector: LocationInfo
    params: {}
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: quotes
    params: {}
- name: quotes
  endpoint:
    path: /reference/request_quotes
    method: POST
    data_selector: quotes
    params: {}
- name: quote_list
  endpoint:
    path: /reference/get_id-1
    method: GET
    data_selector: quoteList
    params: {}
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: quotes
- name: quotes
  endpoint:
    path: /reference/quotes
    method: GET
- name: request_quotes
  endpoint:
    path: /reference/request_quotes
    method: POST
- name: retrieve_quote_list
  endpoint:
    path: /reference/retrieve-quotes
    method: GET
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: quoteListId
    params: {}
- name: book
  endpoint:
    path: /trip-service/book
    method: POST
- name: cancel
  endpoint:
    path: /trip-service/cancel
    method: POST
- name: search
  endpoint:
    path: /trip-service/search
    method: POST
- name: trackTrip
  endpoint:
    path: /trip-service/trackTrip
    method: GET
- name: status
  endpoint:
    path: /trip-service/status
    method: GET
- name: quotes
  endpoint:
    path: /reference/quotes
    method: GET
- name: bookings
  endpoint:
    path: /reference/bookings
    method: POST
- name: trips
  endpoint:
    path: /reference/trips
    method: GET
- name: trip_service
  endpoint:
    path: /reference/trip-service
    method: POST
    data_selector: data
- name: book_trip
  endpoint:
    path: /reference/book-a-trip
    method: POST
    data_selector: data
- name: retrieve_quotes
  endpoint:
    path: /reference/retrieve-quotes
    method: GET
    data_selector: data
- name: book
  endpoint:
    path: /reference/trip-service-book
    method: POST
    data_selector: TripInfo
- name: cancel
  endpoint:
    path: /trip-service/cancel
    method: POST
- name: cancel_trip
  endpoint:
    path: /trip-service/cancel
    method: post
    data_selector: void
    params: {}
- name: search
  endpoint:
    path: /trip-service/search
    method: GET
- name: trips
  endpoint:
    path: /reference/trips
    method: GET
- name: support_tickets
  endpoint:
    path: /reference/supporttickets
    method: GET
- name: dispatch_partners
  endpoint:
    path: /reference/dispatch-partners
    method: GET
- name: trackTrip
  endpoint:
    path: /trip-service/trackTrip
    method: GET
    data_selector: PollCall<TripInfo>
    params:
      tripId: String
- name: track_trip
  endpoint:
    path: /reference/trip-service-tracktrip
    method: GET
    data_selector: trip_info
    params: {}
- name: trip_status
  endpoint:
    path: /reference/trip-service-status
    method: GET
    data_selector: status_info
    params: {}
- name: trip_search
  endpoint:
    path: /reference/trip-service-search
    method: GET
    data_selector: search_results
    params: {}
- name: trip_status
  endpoint:
    path: /trip-service/status
    method: GET
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: PollCall<TripState>
    params:
      tripId: String
- name: TripBooking
  endpoint:
    path: /reference/trip-service-book
    method: POST
- name: TripSearch
  endpoint:
    path: /reference/trip-service-search
    method: GET
- name: TripInfo
  endpoint:
    path: /reference/trip-service-status
    method: GET
- name: trackDriver
  endpoint:
    path: /driver-service-trackdriver
    method: GET
    data_selector: DriverTrackingInfo
    params:
      tripID: String
- name: DriverTrackingInfo
  endpoint:
    path: /driver-tracking
    method: GET
- name: Auth
  endpoint:
    path: /reference/auth
    method: GET
- name: Bookings
  endpoint:
    path: /reference/bookings
    method: GET
- name: Quotes
  endpoint:
    path: /reference/quotes
    method: GET
- name: Payments
  endpoint:
    path: /reference/payments
    method: GET
- name: SupportTickets
  endpoint:
    path: /reference/supporttickets
    method: GET
- name: booking
  endpoint:
    path: /location
    method: GET
    data_selector: records
    params: {}
- name: trip_tracking
  endpoint:
    path: /triptracking
    method: GET
    data_selector: records
    params: {}
- name: Bookings
  endpoint:
    path: /reference/bookings
    method: GET
- name: Quotes
  endpoint:
    path: /reference/quotes
    method: GET
- name: SupportTickets
  endpoint:
    path: /reference/supporttickets
    method: GET
- name: Dispatch Partners
  endpoint:
    path: /reference/dispatch-partners
    method: GET
- name: Bookings
  endpoint:
    path: /reference/bookings
    method: GET
- name: Quotes
  endpoint:
    path: /reference/quotes
    method: GET
- name: SupportTickets
  endpoint:
    path: /reference/supporttickets
    method: GET
- name: Bookings
  endpoint:
    path: /reference/post_booking
    method: POST
- name: Quotes
  endpoint:
    path: /reference/request_quotes
    method: POST
- name: Bookings
  endpoint:
    path: /reference/bookings
    method: GET
- name: Quotes
  endpoint:
    path: /reference/quotes
    method: GET
- name: booking
  endpoint:
    path: /reference/post_booking
    method: POST
- name: quote
  endpoint:
    path: /reference/request_quotes
    method: POST
- name: Bookings
  endpoint:
    path: /reference/bookings
    method: GET
    data_selector: records
    params: {}
- name: Quotes
  endpoint:
    path: /reference/quotes
    method: GET
    data_selector: records
    params: {}
- name: Support Tickets
  endpoint:
    path: /reference/supporttickets
    method: GET
    data_selector: records
    params: {}
- name: quotes
  endpoint:
    path: /reference/request_quotes
    method: POST
    data_selector: data
- name: bookings
  endpoint:
    path: /reference/post_booking
    method: POST
    data_selector: data
- name: Bookings
  endpoint:
    path: /reference/bookings
    method: GET
    data_selector: records
- name: Quotes
  endpoint:
    path: /reference/quotes
    method: GET
    data_selector: records
- name: SupportTickets
  endpoint:
    path: /reference/supporttickets
    method: GET
    data_selector: records
- name: Quotes
  endpoint:
    path: /reference/quotes
    method: get
- name: Bookings
  endpoint:
    path: /reference/bookings
    method: post
- name: trips
  endpoint:
    path: /reference/trips
    method: GET
    data_selector: ''
    params: {}
- name: quotes
  endpoint:
    path: /reference/quotes
    method: GET
    data_selector: ''
    params: {}
- name: support tickets
  endpoint:
    path: /reference/supporttickets
    method: GET
    data_selector: ''
    params: {}
- name: Rides
  endpoint:
    path: /reference/ui-sdk-rides-screen
    method: GET
- name: ride_details
  endpoint:
    path: /reference/ui-sdk-ride-details-screen
    method: GET
- name: Auth
  endpoint:
    path: /reference/auth
    method: GET
- name: Quotes
  endpoint:
    path: /reference/quotes
    method: GET
- name: Bookings
  endpoint:
    path: /reference/bookings
    method: GET
- name: Fares
  endpoint:
    path: /reference/final-fare
    method: GET
- name: Webhooks
  endpoint:
    path: /reference/webhooks
    method: GET
- name: Authentication API
  endpoint:
    path: /reference/auth
    method: GET
- name: Identity API
  endpoint:
    path: /reference/oauth-20
    method: GET
- name: Services API
  endpoint:
    path: /reference/services
    method: GET
- name: Quotes API
  endpoint:
    path: /reference/quotes
    method: GET
- name: Bookings API
  endpoint:
    path: /reference/bookings
    method: GET
- name: Fares API
  endpoint:
    path: /reference/final-fare
    method: GET
- name: Webhooks API
  endpoint:
    path: /reference/webhooks
    method: GET
- name: Network SDK
  endpoint:
    path: /reference/auth-service
    method: GET
- name: UI SDK
  endpoint:
    path: /reference/ui-sdk-custom-styling
    method: GET
- name: Supply API
  endpoint:
    path: /reference/push-availability
    method: GET
- name: Loyalty API
  endpoint:
    path: /reference/loyalty
    method: GET
- name: Onboarding API
  endpoint:
    path: /reference/fleet-external-accounts
    method: GET
- name: Operations API
  endpoint:
    path: /reference/trips
    method: GET
- name: Payments API
  endpoint:
    path: /reference/loyalty-2
    method: GET
- name: Connect API
  endpoint:
    path: /reference/order
    method: GET
- name: Support API
  endpoint:
    path: /reference/supporttickets
    method: GET
- name: Partners API
  endpoint:
    path: /reference/dispatch-partners
    method: GET
- name: Bookings
  endpoint:
    path: /reference/bookings
    method: GET
- name: Quotes
  endpoint:
    path: /reference/quotes
    method: GET
- name: Services
  endpoint:
    path: /reference/services
    method: GET
- name: SupportTickets
  endpoint:
    path: /reference/supporttickets
    method: GET
- name: Partners
  endpoint:
    path: /reference/dispatch-partners
    method: GET
- name: availability
  endpoint:
    path: /v1/supply/availability
    method: POST
- name: DMS Trip Status Push
  endpoint:
    path: /v1/supply/trip/status
    method: POST
- name: trip_document
  endpoint:
    path: /v1/supply/trip/document/
    method: POST
    data_selector: null
    params: {}
- name: trip_status
  endpoint:
    path: /push-trip-status
    method: POST
- name: trip_document
  endpoint:
    path: /push-trip-document
    method: post
- name: trip_document
  endpoint:
    path: /reference/post_trip-document
    method: POST
- name: new_trips
  endpoint:
    path: /reference/dms-endpoint-receive-new-trips
    method: GET
- name: trip
  endpoint:
    path: /trips
    method: GET
    data_selector: trips
- name: trip
  endpoint:
    path: /v1/supply/dispatch-system/trip
    method: POST
    data_selector: required
    params: {}
- name: trip
  endpoint:
    path: /trips
    method: GET
    data_selector: object
    params: {}
- name: trip_detail
  endpoint:
    path: /v1/supply/dispatch-system/trip
    method: GET
    params:
      trip_id: required
      external_trip_id: required
      external_fleet_id: required
      external_account_id: optional
- name: trip
  endpoint:
    path: /trips
    method: GET
    data_selector: trips
- name: trip_cancellation
  endpoint:
    path: /v1/supply/dispatch-system/trip
    method: DELETE
    params:
      trip_id: string
      external_trip_id: string
      external_fleet_id: string
      external_account_id: string
- name: trip
  endpoint:
    path: /trips
    method: GET
    data_selector: trips
- name: trip_update
  endpoint:
    path: /v1/supply/dispatch-system/trip
    method: PUT
    data_selector: ''
    params:
      trip_id: ''
      external_trip_id: ''
- name: quote_request
  endpoint:
    path: /v1/supply/dispatch-system/quote
    method: POST
    data_selector: quotes
    params: {}
- name: eta_request
  endpoint:
    path: /v1/supply/dispatch-system/eta
    method: POST
- name: availability
  endpoint:
    path: /v1/supply/dispatch-system/availability
    method: POST
    data_selector: response
- name: availability
  endpoint:
    path: /v1/supply/dispatch-system/availability
    method: POST
- name: eta
  endpoint:
    path: /dms-endpoint-eta-request
    method: POST
- name: healthcheck
  endpoint:
    path: /get_healthcheck-1
    method: GET
- name: healthcheck
  endpoint:
    path: /v1/supply/healthcheck
    method: GET
    data_selector: '204'
    params: {}
- name: loyalty_exchange_rates
  endpoint:
    path: /loyalty/exchange-rates
    method: GET
- name: loyalty_exchange_rates
  endpoint:
    path: /loyalty/exchange-rates
    method: GET
    data_selector: rates
- name: user_loyalty_points_balance
  endpoint:
    path: /loyalty/users/traveller-id-balance
    method: GET
    data_selector: balance
- name: user_loyalty_points_balance
  endpoint:
    path: /loyalty/users/{traveller_id}/balance
    method: GET
- name: user_loyalty_points_balance
  endpoint:
    path: /loyalty/users/traveller_id/balance
    method: GET
- name: loyalty_exchange_rates
  endpoint:
    path: /loyalty/exchange-rates
    method: GET
- name: burn_loyalty_points
  endpoint:
    path: /loyalty/users/traveller_id/burn
    method: POST
- name: burn_loyalty_points
  endpoint:
    path: /loyalty/users/{traveller_id}/burn
    method: POST
- name: refund_loyalty_points
  endpoint:
    path: /loyalty/users/traveller_id/refund
    method: POST
- name: burn_loyalty_points
  endpoint:
    path: /loyalty/users/traveller_id/burn
    method: POST
- name: get_user_loyalty_points_balance
  endpoint:
    path: /loyalty/users/traveller_id/balance
    method: GET
- name: get_loyalty_exchange_rates
  endpoint:
    path: /loyalty/exchange-rates
    method: GET
- name: healthcheck
  endpoint:
    path: /healthcheck
    method: GET
- name: refund_loyalty_points
  endpoint:
    path: /loyalty/users/{traveller_id}/refund
    method: POST
    data_selector: null
    params: {}
- name: Health Check
  endpoint:
    path: /get_healthcheck
    method: GET
- name: healthcheck
  endpoint:
    path: /healthcheck
    method: GET
    data_selector: null
    params: {}
- name: fleet_external_accounts
  endpoint:
    path: /v1/onboarding/fleet/{fleet_id}/external-accounts
    method: GET
    data_selector: accounts
- name: fleet_external_account
  endpoint:
    path: /v1/onboarding/fleet/{fleet_id}/external-accounts
    method: POST
- name: trips_resync
  endpoint:
    path: /v1/operations/trips/{uuid}/resync
    method: POST
    data_selector: object
    params:
      uuid: required
- name: add_review
  endpoint:
    path: /v1/operations/trips/reviews
    method: POST
- name: dms_raw_payloads
  endpoint:
    path: /v1/operations/quotes/quote_list_id/dms_raw_payloads
    method: GET
- name: raw_dms_payloads
  endpoint:
    path: /v1/operations/quotes/{quote_list_id}/dms_raw_payloads
    method: GET
    data_selector: dms_raw_request_payload
    params:
      quote_list_id: uuid
      availability_id: string
      supply_product_id: string
- name: loyalty_points_balance
  endpoint:
    path: /v3/payments/loyalty/programmes/{id}/balance
    method: GET
    data_selector: object
    params: {}
- name: loyalty_points_balance
  endpoint:
    path: /{id}/balance
    method: GET
    data_selector: object
    params: {}
- name: loyalty_exchange_rates
  endpoint:
    path: /{id}/rates
    method: GET
    data_selector: object
    params: {}
- name: loyalty_conversion_rates
  endpoint:
    path: /v3/payments/loyalty/programmes/{id}/rates
    method: GET
    data_selector: rates
    params:
      id: uuid
- name: create_order
  endpoint:
    path: /saas_companies/{company_id}/orders
    method: PUT
- name: order
  endpoint:
    path: /reference/create_delivery_order
    method: PUT
- name: support_tickets
  endpoint:
    path: /support/tickets
    method: GET
- name: support_tickets
  endpoint:
    path: /v1/support/tickets
    method: GET
    data_selector: items
    params: {}
- name: support_ticket
  endpoint:
    path: /v1/support/tickets/{ticketId}
    method: GET
    data_selector: object
    params: {}
- name: SupportTickets
  endpoint:
    path: /support/tickets
    method: GET
- name: CreateTripSupportTicket
  endpoint:
    path: /createtripsupportticket
    method: POST
- name: ListSupportTickets
  endpoint:
    path: /listsupporttickets
    method: GET
- name: GetSupportTicket
  endpoint:
    path: /getsupportticket
    method: GET
- name: support_ticket_comment
  endpoint:
    path: /v1/support/tickets/{ticketId}/comments
    method: POST
- name: support_tickets
  endpoint:
    path: /support/tickets
    method: GET
    data_selector: object
- name: create_trip_support_ticket
  endpoint:
    path: /createtripsupportticket
    method: POST
    data_selector: object
- name: list_support_tickets
  endpoint:
    path: /listsupporttickets
    method: GET
    data_selector: object
- name: get_support_ticket
  endpoint:
    path: /getsupportticket
    method: GET
    data_selector: object
- name: support_ticket
  endpoint:
    path: /v1/support/demand/trips/partnerTripId/tickets
    method: POST
- name: create_trip_support_ticket
  endpoint:
    path: /v1/support/demand/trips/{partnerTripId}/tickets
    method: POST
- name: support_tickets
  endpoint:
    path: /v1/support/trips/tripId/tickets
    method: GET
- name: support_tickets
  endpoint:
    path: /v1/support/trips/{tripId}/tickets
    method: GET
    data_selector: items
    params: {}
- name: support_tickets
  endpoint:
    path: /v1/support/trips/tripId/tickets
    method: POST
- name: support_ticket
  endpoint:
    path: /v1/support/trips/{tripId}/tickets
    method: POST
    data_selector: ticketId
    params:
      tripId: uuid
- name: support_ticket
  endpoint:
    path: /v1/support/upload-attachment
    method: POST
    data_selector: null
    params: {}
- name: create_trip_support_ticket
  endpoint:
    path: /createtripsupportticket
    method: POST
    data_selector: null
    params: {}
- name: list_support_tickets
  endpoint:
    path: /listsupporttickets
    method: GET
    data_selector: null
    params: {}
- name: support_attachment
  endpoint:
    path: /v1/support/upload-attachment
    method: POST
- name: dispatch_partners
  endpoint:
    path: /partners/partnerId/dispatch/discovery/supply-partners/externalId
    method: GET
- name: supply_partners
  endpoint:
    path: /v1/partners/{partnerId}/dispatch/discovery/supply-partners/{externalId}
    method: GET
- name: supply_partner
  endpoint:
    path: /v1/partners/{partnerId}/dispatch/discovery/supply-partners/{externalId}
    method: POST
- name: dispatch_partners
  endpoint:
    path: /partners/partnerId/dispatch/discovery/supply-partners/externalId
    method: POST
- name: discover_supply_partners
  endpoint:
    path: /partnerid-dispatch-discovery-supply-partners/externalid
    method: GET
- name: partners
  endpoint:
    path: /v1/partners/{partnerId}/dispatch/discovery/supply-partners/{externalId}
    method: PUT
- name: dispatch_partners
  endpoint:
    path: /dispatch/partners
    method: POST
- name: disable_supply_partner
  endpoint:
    path: /dispatch/discovery/supply-partners/externalId
    method: DELETE
- name: import_supply_partner
  endpoint:
    path: /dispatch/discovery/supply-partners/externalId
    method: POST
- name: discover_supply_partners
  endpoint:
    path: /dispatch/discovery/supply-partners/externalId
    method: GET
- name: Dispatch Partners
  endpoint:
    path: /reference/get_partnerid-dispatch-discovery-supply-partners-externalid
    method: GET
- name: supply_partner
  endpoint:
    path: /partners/{partnerId}/dispatch/discovery/supply-partners/{externalId}
    method: DELETE
    data_selector: '204'
    params: {}
- name: healthcheck
  endpoint:
    path: /v1/auth/healthcheck
    method: GET
    data_selector: '204'
- name: Health Check
  endpoint:
    path: /reference/get_healthcheck-1
    method: GET
- name: Retrieve Services List
  endpoint:
    path: /reference/get_id-3
    method: GET
- name: Request Quotes
  endpoint:
    path: /reference/request_quotes
    method: POST
- name: Book a Trip
  endpoint:
    path: /reference/post_booking
    method: POST
- name: services
  endpoint:
    path: /v2/services/{id}
    method: GET
    data_selector: services
    params: {}
- name: healthcheck
  endpoint:
    path: /v2/services/healthcheck
    method: GET
    data_selector: null
    params: {}
- name: Services
  endpoint:
    path: /reference/get_id-3
    method: GET
- name: Quotes
  endpoint:
    path: /reference/request_quotes
    method: POST
- name: Bookings
  endpoint:
    path: /reference/post_booking
    method: POST
- name: Healthcheck
  endpoint:
    path: /reference/get_healthcheck
    method: GET
- name: request_quotes
  endpoint:
    path: /v2/quotes/
    method: POST
    data_selector: id
    params: {}
- name: coverage
  endpoint:
    path: /quotes/coverage
    method: GET
- name: coverage
  endpoint:
    path: /v2/quotes/coverage
    method: GET
    params:
      latitude: ''
      longitude: ''
      local_time_of_pickup: ''
- name: healthcheck
  endpoint:
    path: /v2/quotes/healthcheck
    method: GET
- name: services
  endpoint:
    path: /reference/get_id-3
    method: GET
- name: quotes
  endpoint:
    path: /reference/request_quotes
    method: POST
- name: bookings
  endpoint:
    path: /reference/post_booking
    method: POST
- name: loyalty
  endpoint:
    path: /reference/get_loyalty-exchange-rates
    method: GET
- name: support_tickets
  endpoint:
    path: /reference/listsupporttickets
    method: GET
- name: book_trip
  endpoint:
    path: /v1/bookings/
    method: POST
- name: bookings
  endpoint:
    path: /v1/bookings
    method: POST
    data_selector: object
- name: healthcheck
  endpoint:
    path: /v1/bookings/healthcheck
    method: GET
    data_selector: '204'
- name: Services
  endpoint:
    path: /reference/get_id-3
    method: GET
- name: Quotes
  endpoint:
    path: /reference/request_quotes
    method: POST
- name: Bookings
  endpoint:
    path: /reference/post_booking
    method: POST
- name: Loyalty
  endpoint:
    path: /reference/get_loyalty-exchange-rates
    method: GET
- name: final_fare
  endpoint:
    path: /v1/fares/trip/{trip_id}
    method: GET
    data_selector: fare
    params: {}
- name: supplier_details
  endpoint:
    path: /v1/fares/trip/{trip_id}/supplier
    method: GET
- name: trip_document
  endpoint:
    path: /v1/fares/trip/trip_id/trip-document
    method: GET
- name: trip_document
  endpoint:
    path: /v1/fares/trip/{trip_id}/trip-document
    method: GET
    data_selector: binary
    params:
      trip_id: string
- name: availability
  endpoint:
    path: /v1/supply/availability
    method: POST
- name: trip
  endpoint:
    path: /trips
    method: GET
    data_selector: trips
- name: trip
  endpoint:
    path: /v1/supply/dispatch-system/trip
    method: POST
    data_selector: request body
- name: trip
  endpoint:
    path: /v1/supply/dispatch-system/trip
    method: GET
    data_selector: ''
- name: trip_detail
  endpoint:
    path: /v1/supply/dispatch-system/trip
    method: GET
    params:
      trip_id: string
      external_trip_id: string
      external_fleet_id: string
      external_account_id: string
- name: trip
  endpoint:
    path: /trips
    method: GET
    data_selector: trips
- name: trip_cancellation
  endpoint:
    path: /v1/supply/dispatch-system/trip
    method: DELETE
    params:
      trip_id: string
      external_trip_id: string
      external_fleet_id: string
      external_account_id: string
- name: trip
  endpoint:
    path: /trips
    method: GET
    data_selector: trips
- name: trip_update
  endpoint:
    path: /v1/supply/dispatch-system/trip
    method: PUT
    data_selector: trip_id
    params:
      trip_id: string
      external_trip_id: string
- name: quote_request
  endpoint:
    path: /v1/supply/dispatch-system/quote
    method: POST
- name: eta_request
  endpoint:
    path: /v1/supply/dispatch-system/eta
    method: POST
- name: availability
  endpoint:
    path: /v1/supply/dispatch-system/availability
    method: POST
    data_selector: vehicles
- name: healthcheck
  endpoint:
    path: /v1/supply/healthcheck
    method: GET
    data_selector: '204'
- name: loyalty_exchange_rates
  endpoint:
    path: /loyalty/exchange-rates
    method: GET
- name: loyalty_exchange_rates
  endpoint:
    path: /loyalty/exchange-rates
    method: GET
- name: user_loyalty_points_balance
  endpoint:
    path: /loyalty/users/traveller-id-balance
    method: GET
- name: healthcheck
  endpoint:
    path: /healthcheck
    method: GET
- name: healthcheck
  endpoint:
    path: /get_healthcheck
    method: GET
- name: fleet_external_accounts
  endpoint:
    path: /v1/onboarding/fleet/{fleet_id}/external-accounts
    method: GET
    data_selector: accounts
    params:
      fleet_id: string
- name: trips
  endpoint:
    path: /v1/operations/trips/{uuid}/resync
    method: POST
- name: raw_dms_payloads
  endpoint:
    path: /v1/operations/quotes/quote_list_id/dms_raw_payloads
    method: GET
- name: dms_raw_payloads
  endpoint:
    path: /v1/operations/quotes/{quote_list_id}/dms_raw_payloads
    method: GET
    data_selector: dms_raw_request_payload
    params:
      quote_list_id: uuid
      availability_id: string
      supply_product_id: string
- name: loyalty_points_balance
  endpoint:
    path: /v3/payments/loyalty/programmes/{id}/balance
    method: GET
    data_selector: object
    params:
      id: uuid
- name: loyalty_points_balance
  endpoint:
    path: /payments/loyalty/programmes/{id}/balance
    method: GET
    data_selector: object
- name: loyalty_conversion_rates
  endpoint:
    path: /loyalty/programmes/id/rates
    method: GET
    data_selector: object
- name: Order
  endpoint:
    path: /reference/create_delivery_order
    method: PUT
- name: order
  endpoint:
    path: /saas_companies/{company_id}/orders
    method: PUT
- name: support_tickets
  endpoint:
    path: /v1/support/tickets
    method: GET
- name: support_tickets
  endpoint:
    path: /v1/support/tickets
    method: GET
    data_selector: items
    params: {}
- name: dispatch_partners
  endpoint:
    path: /dispatch/partners
    method: GET
- name: supply_partners
  endpoint:
    path: /v1/partners/{partnerId}/dispatch/discovery/supply-partners/{externalId}
    method: GET
    data_selector: object
    params: {}
- name: healthcheck
  endpoint:
    path: /v1/auth/healthcheck
    method: GET
    data_selector: null
    params: {}
- name: final_fare_event
  endpoint:
    path: /finalfareget
    method: GET
    data_selector: trip_id
- name: driver_position_changed_event
  endpoint:
    path: /driverpositionchanged
    method: GET
    data_selector: trip_id
- name: webhook_subscription
  endpoint:
    path: /register
    method: POST
    data_selector: data
    params: {}
- name: supply_partners
  endpoint:
    path: /v1/partners/:dispatchPartnerId/dispatch/discovery/supply-partners/:externalId
    method: POST
- name: disable_supply_partner
  endpoint:
    path: /v1/partners/:dispatchPartnerId/dispatch/discovery/supply-partners/:externalId
    method: DELETE
- name: edit_supply_partner
  endpoint:
    path: /v1/partners/:dispatchPartnerId/dispatch/discovery/supply-partners/:externalId
    method: PUT
- name: quotes
  endpoint:
    path: /quotes
    method: POST
    data_selector: id
    params: {}
- name: check_quotes
  endpoint:
    path: /quotes/{id}
    method: GET
    data_selector: status
    params: {}
- name: availability
  endpoint:
    path: /quotes/availability
    method: POST
    data_selector: availability_status
    params: {}
- name: bookings
  endpoint:
    path: /bookings
    method: POST
- name: follow_booking
  endpoint:
    path: /get_follow-code
    method: GET
- name: search_booking_history
  endpoint:
    path: /search_booking_history
    method: GET
- name: track_trip
  endpoint:
    path: /bookings/{id}/track
    method: GET
- name: status_trip
  endpoint:
    path: /bookings/{id}/track/status
    method: GET
- name: cancel_trip
  endpoint:
    path: /bookings/{id}/cancel
    method: POST
- name: final-fare
  endpoint:
    path: /reference/final-fare
    method: GET
- name: get_booking_details
  endpoint:
    path: /reference/get_booking_details
    method: GET
- name: auth_service
  endpoint:
    path: /auth/login
    method: POST
    data_selector: user
    params: {}
- name: quotes
  endpoint:
    path: /quotes
    method: GET
- name: trip
  endpoint:
    path: /trip
    method: POST
    data_selector: trip
    params: {}
- name: trip_cancel
  endpoint:
    path: /trip/cancel
    method: POST
    data_selector: tripCancellation
    params: {}
- name: track_trip
  endpoint:
    path: /trackTrip
    method: POST
- name: track_driver
  endpoint:
    path: /trackDriver
    method: POST
- name: KarhooUISDK
  endpoint:
    path: /karhoo/uisdk
    method: GET
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: quotes
    params: {}
- name: support_tickets
  endpoint:
    path: /v1/support/tickets
    method: GET
    data_selector: records
- name: create_ticket_with_trip_uuid
  endpoint:
    path: /v1/support/trips/{tripId}/tickets
    method: POST
- name: support_tickets_with_trip_id
  endpoint:
    path: /v1/support/trips/{tripId}/tickets
    method: POST
    data_selector: tickets
    params: {}
- name: support_tickets_with_partner_trip_id
  endpoint:
    path: /v1/support/demand/trips/{partnerTripId}/tickets
    method: POST
    data_selector: tickets
    params: {}
- name: upload_attachment
  endpoint:
    path: /v1/support/upload-attachment
    method: POST
    data_selector: resourceToken
    params: {}
- name: receive_new_trips
  endpoint:
    path: /trip
    method: POST
- name: provide_trip_details
  endpoint:
    path: /trip
    method: GET
- name: cancel_trip
  endpoint:
    path: /trip
    method: DELETE
- name: quote_request
  endpoint:
    path: /quote
    method: POST
- name: eta_request
  endpoint:
    path: /eta
    method: POST
- name: availability_request
  endpoint:
    path: /availability
    method: POST
- name: availability
  endpoint:
    path: /availability
    method: POST
- name: trip_status
  endpoint:
    path: /trip/status
    method: POST
- name: eta
  endpoint:
    path: /eta
    method: POST
    data_selector: etas
    params: {}
- name: availability
  endpoint:
    path: /availability
    method: POST
    data_selector: vehicles
    params: {}
- name: quote_requests
  endpoint:
    path: /quote
    method: POST
- name: quote_request
  endpoint:
    path: /quote
    method: POST
    data_selector: quotes
- name: trip
  endpoint:
    path: /trip
    method: POST
- name: trip_updates
  endpoint:
    path: /trip
    method: GET
    data_selector: trip
    params: {}
- name: cancel_trip
  endpoint:
    path: /trip
    method: DELETE
    data_selector: fare
    params: {}
- name: trips
  endpoint:
    path: /services/data/vXX.X/trips
    method: GET
    data_selector: records
- name: trip
  endpoint:
    path: /dispatch-system/trip
    method: POST
    data_selector: null
    params: {}
- name: trip_details
  endpoint:
    path: /dispatch-system/trip
    method: GET
    data_selector: null
    params: {}
- name: cancel_trip
  endpoint:
    path: /dispatch-system/trip
    method: DELETE
    data_selector: null
    params: {}
- name: quote
  endpoint:
    path: /dispatch-system/quote
    method: POST
    data_selector: null
    params: {}
- name: eta
  endpoint:
    path: /dispatch-system/eta
    method: POST
    data_selector: null
    params: {}
- name: availability
  endpoint:
    path: /dispatch-system/availability
    method: POST
    data_selector: null
    params: {}
- name: healthcheck
  endpoint:
    path: /healthcheck
    method: GET
    data_selector: null
    params: {}
- name: address-details
  endpoint:
    path: /address-details
    method: GET
    data_selector: response
    params: {}
- name: booking
  endpoint:
    path: /booking/{id}
    method: GET
    data_selector: response
    params: {}
- name: Robot Fleets
  endpoint:
    path: /fleet/simulator
    method: GET
    data_selector: fleets
    params: {}
- name: Quotes
  endpoint:
    path: /quotes
    method: POST
    data_selector: quote
    params:
      turbo_mode: 'true'
- name: vehicle_type
  endpoint:
    path: /vehicle/types
    method: GET
    data_selector: types
- name: vehicle_tags
  endpoint:
    path: /vehicle/tags
    method: GET
    data_selector: tags
- name: vehicle_classes
  endpoint:
    path: /v1/vehicle_classes
    method: GET
    data_selector: vehicle_classes
- name: driver_details
  endpoint:
    path: /driver/details
    method: GET
    data_selector: driver
- name: trip_ids
  endpoint:
    path: /trip-ids
    method: GET
    data_selector: trip_ids
- name: loyalty_exchange_rates
  endpoint:
    path: /loyalty/exchange-rates
    method: GET
- name: points_balance
  endpoint:
    path: /loyalty/users/{traveller_id}/balance
    method: GET
- name: burn_loyalty_points
  endpoint:
    path: /loyalty/users/{traveller_id}/burn
    method: POST
- name: refund_loyalty_points
  endpoint:
    path: /loyalty/users/{traveller_id}/refund
    method: POST
- name: track_driver
  endpoint:
    path: /bookings/{id}/track
    method: GET
- name: search_user_bookings
  endpoint:
    path: /search
    method: POST
- name: trip_states
  endpoint:
    path: /trip_states
    method: GET
    data_selector: states
- name: state_details
  endpoint:
    path: /state_details
    method: GET
    data_selector: state_details
- name: book_trip
  endpoint:
    path: /api/trips/book
    method: POST
    data_selector: trip
    params: {}
- name: K4008
  endpoint:
    path: /k4008
    method: GET
    data_selector: error
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Username and Password authentication is deprecated and will be removed on 01/01/2023.
- Requires API key for authentication
- To use this API you need to have a valid username and password.
- The server, which was acting as a gateway or proxy, received an invalid response
  from the upstream server.
- The URL for this request expired after 30 days.
- Uses OAuth2 authentication
- The user info endpoint returns claims about the authenticated end-user.
- Requires setup of connected app in API
- Quotes have a validity period after which they expire.
- The endpoint will return 404 after the trip completes or the driver cancels.
- 502 Bad Gateway. The server, which was acting as a gateway or proxy, received an
  invalid response from the upstream server.
- The equivalent of logout. This flushes any reference to a user and access token.
- Some endpoints will require a place ID in order to be used.
- Uses OAuth2 with refresh token
- Uses OAuth2 for authentication.
- Requires setup of connected app in Karhoo API
- Updated over 5 years ago
- Requires setup of connected app in Karhoo
- The booking screen expects that the app has been granted location permissions.
- Location permissions are required for the booking screen to function.
- When instantiating the Android trip screen make sure the user has granted location
  permissions. Failure to do so will throw an IllegalArgumentException stating that
  the screen “REQUIRES LOCATION PERMISSION”.
- The main trip screen requires Google Maps permissions to work correctly.
- Authentication API version 1.0 required for access
- The Additional Feedback screen allows users to give more detailed feedback on their
  past rides than what the standard rating offers.
- DMS Trip Status Push to Karhoo
- Uses OAuth2 with refresh token — requires setup of connected app in Karhoo
- This endpoint must be hosted within the Dispatch Management System's platform to
  listen for new Karhoo Bookings in the described format.
- Date should be specified in ISO 8601 Date Time format with the correct timezone
  for the origin, leave empty for ASAP booking.
- Some fields may be deprecated or subject to change.
- This endpoint must be hosted within the DMS platform to listen for trip detail requests
  in the described format.
- This endpoint must be hosted within the Dispatch Management System's platform to
  listen for Karhoo Quote requests in the described format.
- This endpoint must be hosted within the Dispatch Management System's platform to
  listen for Karhoo ETA requests in the described format.
- Success response, no content. Service is ok
- Service is down.
- Welcome to the Karhoo API
- Callbacks are supported when creating an order
- A prerequisite for this flow is a third-party application possessing a proof of
  user being authenticated within an external authentication system in form of a string
  token.
- Please specify date in ISO 8601 format.
- Fare breakdown components should sum to the total.
- This endpoint must be hosted within the Dispatch Management System's platform to
  listen for Karhoo Quote requests.
- This endpoint must be hosted within the Dispatch Management System's platform to
  listen for Karhoo Availability requests in the described format.
- Service is ok responds with a HTTP 204 status
- Each API has a Health Check function. You can test each API by its /healthcheck
  endpoint.
- JWTs should have a payload including user details and should be signed with your
  private key using RS256 algorithm.
- Karhoo webhooks are secured using HMAC authentication using a shared secret.
- A webhook is considered to be successfully delivered if a response is received with
  a 200 range status code.
- Working directly with the Karhoo APIs requires valid credentials (an API key).
- A configured Shared Secret in dispatch configuration used to encrypt all data passed
  between the importer and the Karhoo platform.
- Keep in mind that part of the data used to import supply partner can be propagated
  asynchronously and won't be available instantly after import request.
- Uses token exchange authentication — requires integration with external auth system
- The Karhoo iOS UI SDK is compatible with iOS 13 and above.
- 1.9.x is the last iOS UI SDK version to support iOS 12.
- The UI SDK allows for explicit consumer acceptance of the terms and conditions prior
  to booking.
- The UISDK also provides the requireSDKAuthentication method in the KarhooUISDKConfiguration
  interface to notify whenever an external authentication is required.
- Our UI SDK is built on top of the Network SDK and provides the building blocks for
  you to create a seamless mobility experience that has the same look and feels as
  your own application.
- Our UI SDK are customisable components that can be used within existing screens
  in your app to provide the functionality detailed below.
- The address screen allows the user to select an address.
- For each session, the last 5 searches are cached for the users.
- Ensure that the user has granted location permissions when instantiating the Android
  booking screen.
- Quotes are filterable also by various criteria depending on the current quotes capabilities
  and features
- Optional feature to add to calendar in KarhooConfig as useAddToCalendarFeature
- The views from the booking component have been made in compliance with the accessibility
  norms
- A deep link query params are case insensitive.
- It is mandatory to pass either a pick-up or a drop-off address in the form of an
  address, kpoi, place_id or lat/long in order to have a valid deeplink
- It is also mandatory to pass either a pickup-time (for pre-book) or booking-type
  as ASAP for the deeplink to work
- Landing page displays a list of all available journey legs where a user can choose
  a journey to book.
- Parameters to deeplink to this page must follow /trip-details
- Same rules as Deeplink to landing page apply here, but only first valid journey
  leg will be used for prefilling data on a trip create page.
- Pickup and dropoff information must be provided for valid journey legs.
- After Android 12, the android:scheme data tag should be explicitly called on its
  own.
- The android:autoVerify='true' attribute should be present now to tell the system
  to self-check for the assetlinks on the domain.
- Although it is a JSON, DO NOT add a .json extension to the file.
- iOS will only attempt to fetch the AASA file over a secure connection (HTTPS).
- AASA file must use application/json MIME type.
- AASA file size must not exceed 128 Kb.
- Dispatch and Fleet operators partner with Karhoo to increase demand and grow their
  business.
- Integrating a DMS into the Karhoo platform requires a Supply Partner to implement
  services necessary for the Karhoo Platform to deliver a complete trip lifecycle.
- Always check each request to avoid man-in-the-middle attacks or fake requests.
- You must hash the entire request body. Failing to account for linefeed (LF) or new
  line (NL) characters when comparing hash signatures will result in a failed cryptographic
  check.
- Another way to provide availability is to implement a push to Karhoo's hosted Availability
  Endpoint.
- Don't support ASAP bookings? Return a 400 response for any request that does not
  contain a date_scheduled value.
- Currency must be in ISO 4217 format and price values in whole positive integers
  in the smallest unit the currency supports.
- In any system there are a lot of error scenarios.
- 'For example: You may receive an invalid date or Karhoo is sending origin/destination
  outside of the fleet coverage areas.'
- A valid JWT token must be passed in all the queries in the 'Authorization' header.
- 'Users configured on the Karhoo platform can access the Agent Portal in the following
  environments: Production environment, Sandbox environment.'
- Bearer Tokens are generated by the Karhoo Auth API service.
- For guest authentication mechanism use public-api.karhoo.com
- Sandbox environment base URL is https://rest.sandbox.karhoo.com
- Developers working with the Karhoo Platform will be able to observe a discrepancy
  between the behaviour of the same Platform requests between testing in the Sandbox
  environment and real-world usage of the Production environment.
- The Sandbox environment simulates DMS Fleets and the Production environment uses
  real DMS fleets.
- Robot fleets behave in a very consistent and deterministic way that obviously differ
  from the real world.
- Not all metadata available (e.g. not every airport is configured)
- Fleets 'fly' in a straight line to Pickup and Drop-off instead of following streets
- GPS tracking is available reliably for every real-life edge cases e.g. when a trip
  gets 'stuck' in a particular state or connection is lost
- Karhoo works with geofenced POIs to ensure Airport pickups are correctly configured.
- This is a manual task and not all Airports will be set up in the Sandbox environment.
- The use of Vehicle Class has been deprecated in favor of a more descriptive and
  flexible system of describing Vehicles.
- Driver information is available from status 'Driver en-route'.
- This is the main ID that integration partners need to use to get trip updates via
  API.
- Karhoo can customise any email and SMS template in coordination with partner requirements.
- Meet & Greet services are included in quoted prices, they are currently not a bookable
  extra.
- Could not book trip as traveller
- General request error
- These errors are intended for use by supply partners.
- Could not find any Karhoo POIs for the supplied KPOI ID
- Could not get estimates
errors:
- 'K6001: Authentication Errors'
- 'K5001: Availability Errors'
- 'K4001: Bookings Errors'
- 'K1001: Directory Errors'
- 'K0001: General Errors'
- 'K8100: Integration errors'
- 'K7001: KPOI Errors'
- 'K2001: Locations Errors'
- 'K3001: Quotes Errors'
- 'KSDK01: SDK Errors'
- 'K8001: Supply Errors'
- '502 Bad Gateway: The server, which was acting as a gateway or proxy, received an
  invalid response from the upstream server.'
- 400 Bad Request. The request was invalid.
- 401 Unauthorized. The request requires user authentication (not logged in).
- 429 Error. Too Many Requests. Exceeded the rate limit for requests.
- 500 Internal server error. Something has gone wrong on the website's server.
- 502 Bad Gateway
- '400 Bad Request: The request was invalid.'
- '401 Unauthorized: The request requires user authentication (not logged in).'
- '429 Error: Too Many Requests. Exceeded the rate limit for requests.'
- '500 Internal server error: Something has gone wrong on the website''s server.'
- 400 Bad Request
- 401 Unauthorized
- 429 Error
- 500 Internal server error
- 400 Bad request, invalid grant or token is missing
- 401 Wrong token provided.
- 401 Missing or invalid client
- 400 Wrong request format, e.g. missing or duplicated parameter
- 401 Custom token validation failed or wrong client configuration e.g. token exchange
  is disabled.
- '400'
- '401'
- '403'
- '404'
- '429'
- '500'
- '502'
- '403 Forbidden: The credentials provided do not have sufficient authority for this
  request.'
- '404 Not found: No availability in the requested area.'
- '429 Error: Too Many Requests.'
- 403 Forbidden. The credentials provided do not have sufficient authority for this
  request.
- 404 Not found. No availability in the requested area.
- 500 Internal server error.
- 403 Forbidden
- 404 Not found
- '409'
- '412'
- '424'
- '400: {''Could not book trip (attempt to book an expired quote).''}'
- '404 Not found: Booking not found, or following information is not available anymore.'
- '409 Conflict: The resource is already in use or has been changed.'
- 412 Quoted price has increased during a booking.
- '424 Failed Dependency: The method could not be performed on the resource because
  the requested action depended on another action and that action failed.'
- '400 Bad Request: Details of the error'
- '401 Unauthorized: Error number'
- '402 Payment Required: Error number'
- '403 Forbidden: Error number'
- '404 Not Found: Error number'
- '409 Conflict: Error number'
- '429 Too Many Requests: Error number'
- '500 Internal Server Error: Error number'
- '402 Payment required: The request needs to submit a valid credit card.'
- '403 Forbidden: The credentials provided do not have sufficient authority for this
  request. Please request access by emailing API Support.'
- '409 Conflict: The resource is already in use or has been changed'
- '500 Internal server error: Something has gone wrong on the website''s server, but
  the server could not be more specific on what the exact problem is.'
- '400: Bad Request'
- '401: Unauthorized'
- '402: Payment required'
- '403: Forbidden'
- '404: Not found'
- '429: Error. Too Many Requests'
- '500: Internal server error'
- '422: The request was understood and correct but we are unable to process the contained
  instructions.'
- '403 Forbidden: The credentials provided do not have sufficient authority for this
  request. Please request access by emailing [API Support](api@karhoo.com?subject=API%20Access%20Request).'
- 403 Forbidden. The credentials provided do not have sufficient authority for this
  request. Please request access by emailing API Support.
- 404 Not found. Booking not found, or following information is not available anymore.
- 500 Internal server error. Something has gone wrong on the website's server, but
  the server could not be more specific on what the exact problem is.
- 502 Bad Gateway. The server, which was acting as a gateway or proxy, received an
  invalid response from the upstream server.
- 403 Forbidden. The credentials provided do not have sufficient authority for this
  request. Please request access by emailing [API Support](api@karhoo.com?subject=API%20Access%20Request).
- '404 Not Found: Check if the follow code is valid or if the trip has completed.'
- '400 Bad Request: Invalid request format'
- '401 Unauthorized: Authentication failed'
- '403 Forbidden: Access denied'
- '404 Not Found: Resource does not exist'
- '500 Internal Server Error: Server encountered an error'
- '502 Bad Gateway: Invalid response from upstream server'
- '422'
- '404 Not found: Item not found, or following information is not available anymore.'
- 'K6001: Unauthorized. The request requires user authentication (not logged in).'
- 'K0402: Unauthorized. The request requires user authentication (not logged in).'
- 'K4012: Not found. Item not found, or following information is not available anymore.'
- 'K4003: Not found. Item not found, or following information is not available anymore.'
- '429: Error. Too Many Requests. Exceeded the rate limit for requests.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '502 Bad Gateway: The server received an invalid response from the upstream server.'
- 404 Not found. Subscription not found, or following information is not available
  anymore.
- K2002 CouldNotAutocompleteAddress
- K2001 CouldNotGetAddress
- K3001 Could not get estimates
- K3002 Could not get estimates (no availability found within requested area)
- K3003 Could not get estimates (could not find specified quote)
- InvalidQuoteId
- K4001 CouldNotBookTrip
- K4002 CouldNotBookTripInvalidRequest
- K4003 CouldNotBookTripCouldNotFindQuote
- K4004 CouldNotBookTripAttemptToBookExpiredQuote
- K4005 CouldNotBookTripPermissionsDenied
- K4006 CouldNotBookTripPaymentPreAuthFailed
- K4014 CouldNotBookTripCouldNotBookTripAsAgent
- K4015 CouldNotBookTripCouldNotBookTripAsTraveller
- K4007 CouldNotCancelTrip
- K4008 CouldNotCancelTripCouldNotFindSpecifiedTrip
- K4009 CouldNotCancelTripPermissionsDenied
- K4010 CouldNotCancelTripAlreadyCanceled
- K4011 CouldNotGetTrip
- K4012 CouldNotGetTripCouldNotFindSpecifiedTrip
- K4013 CouldNotGetTripPermissionsDenied
- K4013 CouldNotGetTripPermissionDenied
- K0004 CouldNotParseAuthorisationToken
- K4013 CouldNotGetTrip
- 'BOOKING_REQUEST_ERROR: Error during booking process.'
- 401 Unauthorized. Invalid credentials provided
- 403 Forbidden. The credentials provided do not have sufficient authority for this
  request
- '401 Unauthorized: Invalid credentials provided'
- '403 Forbidden: The credentials provided do not have sufficient authority for this
  request'
- 400 Invalid request
- '500 Internal error: The error in the event of a burn failure'
- '404 Not found: Trip not found, or following information is not available anymore.'
- 'K0004: Partner Traveller ID not provided in the JWT token.'
- 'K0005: Failed to contact loyalty partner.'
- K0004
- K0005
- 'K0004: Demand Traveller ID not provided in the JWT token.'
- '404 Not found: Requested resource could not be found.'
- '404: Not Found'
- '500: Internal Server Error'
- 404 Not Found
- 429 Too Many Requests
- 404 Not found. Item not found, or following information is not available anymore.
- '500: Service is down'
- 'K0004: Unexpected error'
- 'K0005: Unexpected error'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'HTTP/1.1 204 No Content: Indicates that the service is operating normally.'
- '400: Malformed request.'
- '401: Unauthorised. The request requires user authentication (not logged in).'
- '403: Forbidden. Used for unauthorised requests where your permissions restrict
  the request.'
- '404: Resource not found.'
- '429: Too Many Requests. Exceeded the rate limit for requests.'
- '500: Internal Server Error. Something has gone wrong on the website’s server.'
- '503: The service is not available.'
- '402: Payment Required'
- '409: Conflict'
- '411: Length Required'
- '503: Service Unavailable'
- 'Invalid request payload: Check the request body for invalid parameter names or
  values.'
- 'Could not get estimates: This could occur if you specify an invalid place or place
  id.'
- 'Could not get estimates (no availability found within requested area): There might
  not be any fleet coverage in the specified area.'
- 'Could not get estimates (could not find specified quote): Error getting estimates
  from estimates service.'
- '400: Could not book trip (attempt to book an expired quote)'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'K3001: Quote not found'
- 'K3002: Invalid quote request'
- 'K3003: Service unavailable'
- 'K6001: Authentication Error'
- 'K5001: Availability Error'
- 'K4001: Bookings Error'
- No results for ASAP bookings
- No coverage
- No internet connection
- No results after filtering
- K6001
- K5001
- K4001
- K1001
- K0001
- K8100
- K7001
- K2001
- K3001
- KSDK01
- K8001
- Validation errors may occur if required parameters are not provided.
- Invalid parameters for deeplink to quotes page.
- Always check the file in a JSON parser to have a full working json because every
  small error will make the app not starting.
- Always check for duplicated SHA’s, you are not allowed to have a SHA twice or more.
- '401 Unauthorized: Recheck API key'
- '400: Bad Request - Missing date_scheduled for ASAP bookings'
- K4002
- K4003
- K4004
- K4005
- K4006
- K4007
- K4008
- K4009
- K4010
- K4011
- K4012
- K4013
- K4014
- K4015
- K4020
- K4025
- 'K5001: Availability not found'
- 'K6001: Authentication error'
- 'K4001: Booking error'
- '400: Bad Request - (short error description here)'
- '400: Invalid input'
- '401: Unauthorized. Invalid credentials provided'
- '403: Forbidden. The credentials provided do not have sufficient authority for this
  request'
- Max prebook time limitation for Will Always Decline (Robot Fleet) fleet means that
  quotes won't be shown in case when somebody requests prebook for many days in the
  future.
- No availability - simulate a situation where no Fleets are able to respond to Quote
  request
- 'K5001: Availability error'
- 'REQUESTED: The request was sent to the Dispatch and is waiting for their confirmation.'
- 'CONFIRMED: The request has been accepted by Dispatch and they will allocate a driver.'
- 'DRIVER_EN_ROUTE: A driver is “en route” to the start location.'
- 'ARRIVED: The driver has arrived.'
- 'POB: Passenger is in the vehicle and the ride has “started”.'
- 'COMPLETED: Passenger has reached their destination.'
- 'NO_DRIVERS_AVAILABLE: The request was unfulfilled because no driver was available.'
- 'DRIVER_CANCELLED: The request has been cancelled by Dispatch or driver.'
- 'BOOKER_CANCELLED: The request has been cancelled by the rider.'
- 'KARHOO_CANCELLED: The request has been cancelled by Karhoo.'
- 'FAILED: There was an internal error with the booking.'
- '422: Invalid request. The request body is parse-able however with invalid content
  or there are issues with a rider’s user account.'
- '406: Unacceptable content type. Client sent an Accepts header for a content type
  which does not exist on the server.'
- '409: A conflict needs to be resolved before the request can be made.'
- '429: Too Many Requests. Client has exceeded the rate limit for requests.'
- '503: The requested service is not available.'
- Could not get estimates
- Could not get estimates (internal error)
- '404: Could not get availability (no availability found within requested area)'
- '404: Could not get availability (no categories found within requested area)'
- '500: Could not book trip'
- Could not book trip - invalid request payload (require at least 1 set of passenger-details)
- 'HTTP Status Code: 400'
- '404: Could not book trip (could not find specified quote)'
- Could not book trip (attempt to book an expired quote)
- 'Could not book trip (permission denied): 403'
- 'Could not book trip (payment pre-authorisation failed): 402'
- Could not cancel trip
- 'Could not cancel trip (could not find specified trip): 404'
- Could not cancel trip (permission denied)
- Could not cancel trip (already cancelled)
- '409: Could not cancel trip (already cancelled)'
- 'Could not get trip: 500'
- Could not get trip (could not find specified trip)
- Could not get trip (permission denied)
- You do not have the correct permission to track this trip
- 'HTTP status code: 403'
- 'Could not book trip as agent: 400'
- 'Could not book trip as traveller: 400'
- 'Could not book trip with the selected DMS: HTTP status code 424'
- '409: Quote price increased whilst booking'
- 'Could not register user: HTTP Status Code 500'
- Could not register user (invalid request)
- 'Could not register user (invalid phone number): 400'
- Could not get user details (invalid token)
- 'Could not get user details (user does not exist): 404'
- 'Could not add user to organisation (already added): 400'
- Role does not exist
- 'HTTP Status Code: 404'
- You don’t have permission to view the profile information of this user
- You don’t have the required permissions to view the profile information of this
  user
- 'Password must be at least 8 characters in length, and contain at least 3 of the
  following 3 types of characters: Lower case letters (a-z), Upper case letters (A-Z)
  and Numbers (i.e. 0-9).'
- 'Swift Error Type: passwordInWrongFormat'
- 'Kotlin Error Type: PasswordInvalid'
- General request error
- '400: Couldn''t find trip, make sure `trip_id` or (external info `trip_id` and `fleet_id`)
  is set'
- '401 Unauthorized: Could not read authorisation token'
- Authentication is required for this path  Could not parse authorisation token
- 'HTTP Status Code 403: Missing required role for this request'
- '429: Rate limit exceeded'
- 'HTTP Status Code 429: Circuit breaker has triggered for this route'
- 'K8100: Specific error related to integration.'
- 'HTTP Status Code: 401'
- '500: Could not process KPOI request'
- '500: Could not read KPOI'
- 'HTTP Status Code: 500'
- '500: Could not delete Karhoo POI'
- '404 Not Found: Could not find Karhoo FPOI'
- '404: Could not find any Karhoo POIs for the supplied KPOI ID'
- Could not get address
- 'Could not autocomplete supplied address: 404'
- '404: Could not get estimates'
- Could not get estimates (no availability found within requested area)
- 'Could not get estimates (could not find specified quote): 404'
- Missing user permissions for request
- K8002
- Not authorised for this fleet
auth_info:
  mentioned_objects:
  - AuthService
  - Auth
  - OAuth 2.0
  - OauthToken
  - Token endpoint
  - Authorize endpoint
  - AuthProvider
  - TokenExchangeSettings
  - AuthenticationMethod
  - KarhooApi
client:
  base_url: https://rest.sandbox.karhoo.com
  auth:
    type: apikey
    location: header
    header_name: Authorization
  headers:
    accept: application/json
    content-type: application/json
source_metadata: null
