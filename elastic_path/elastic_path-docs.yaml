resources:
- name: products
  endpoint:
    path: /catalog/products/{productId}
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: accounts
  endpoint:
    path: /docs/api/accounts/get-v-2-accounts
    method: GET
- name: account_members
  endpoint:
    path: /docs/api/accounts/get-v-2-account-members
    method: GET
- name: account_memberships
  endpoint:
    path: /docs/api/accounts/get-v-2-accounts-account-id-account-memberships
    method: GET
- name: unassigned_account_members
  endpoint:
    path: /docs/api/accounts/get-v-2-accounts-account-id-account-memberships-unassigned-account-members
    method: GET
- name: promotions
  endpoint:
    path: /docs/api/promotions/get-all-promotions
    method: GET
- name: price_books
  endpoint:
    path: /docs/api/pxm/pricebooks/get-pricebooks
    method: GET
- name: products
  endpoint:
    path: /docs/api/pxm/products/get-all-products
    method: GET
- name: transactions
  endpoint:
    path: /docs/api/pxm/inventory_mli/list-transactions
    method: GET
- name: subscriptions
  endpoint:
    path: /docs/api/subscriptions/list-subscriptions
    method: GET
- name: user_authentication_info
  endpoint:
    path: /docs/authentication/single-sign-on/user-authentication-info-api/get-all-user-authentication-info
    method: GET
- name: carts
  endpoint:
    path: /v2/carts/abc
    method: GET
    data_selector: data
- name: checkout
  endpoint:
    path: /v2/carts/abc/checkout
    method: POST
    data_selector: data
- name: payment_gateways
  endpoint:
    path: /v2/gateways/stripe
    method: PUT
    data_selector: data
- name: payments
  endpoint:
    path: /v2/orders/:orderId/payments
    method: POST
    data_selector: data
- name: accounts
  endpoint:
    path: /v2/accounts
    method: GET
    data_selector: data
    params:
      page[limit]: '100'
      page[offset]: '0'
- name: orders
  endpoint:
    path: /v2/orders
    method: GET
    data_selector: data
    params:
      page[limit]: '100'
      page[offset]: '0'
- name: accounts
  endpoint:
    path: /v2/accounts
    method: GET
- name: orders
  endpoint:
    path: /v2/orders
    method: GET
- name: files
  endpoint:
    path: /v2/files
    method: GET
- name: Get All Accounts
  endpoint:
    path: /docs/api/accounts/get-v-2-accounts
    method: GET
- name: Get All Account Members
  endpoint:
    path: /docs/api/accounts/get-v-2-account-members
    method: GET
- name: Get All Account Memberships
  endpoint:
    path: /docs/api/accounts/get-v-2-accounts-account-id-account-memberships
    method: GET
- name: Get all User Authentication Info
  endpoint:
    path: /docs/authentication/single-sign-on/user-authentication-info-api/get-all-user-authentication-info
    method: GET
- name: Get all Customers
  endpoint:
    path: /docs/customer-management/customer-management-api/get-all-customers
    method: GET
- name: Get all Orders
  endpoint:
    path: /docs/api/carts/get-customer-orders
    method: GET
- name: Get Usages for Promotion
  endpoint:
    path: /docs/promotions-builder/promotions-builder-codes/get-promotion-usages
    method: GET
- name: Get a Promotion Code Usage
  endpoint:
    path: /docs/promotions-builder/promotions-builder-codes/get-a-promotion-code-usage
    method: GET
- name: accountAddresses
  endpoint:
    path: /accounts/{{accountID}}/addresses
    method: GET
    data_selector: data
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get account authentication settings
  endpoint:
    path: /settings/account-authentication
    method: GET
    data_selector: data
- name: Get all accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: data
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get an account
  endpoint:
    path: /accounts/{{accountID}}
    method: GET
    data_selector: data
- name: Get all unassigned account members
  endpoint:
    path: /accounts/{{accountID}}/account-memberships/unassigned-account-members
    method: GET
- name: Get an account member
  endpoint:
    path: /account-members/{{accountMemberID}}
    method: GET
- name: Get all account memberships
  endpoint:
    path: /accounts/{{accountID}}/account-memberships
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get all account memberships using Account Member Id
  endpoint:
    path: /account-members/{{accountMemberID}}/account-memberships
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get an account membership
  endpoint:
    path: /accounts/{{accountID}}/account-memberships/{{accountMembershipID}}
    method: GET
- name: Create an account membership
  endpoint:
    path: /accounts/{{accountID}}/account-memberships
    method: POST
- name: Delete an account membership
  endpoint:
    path: /accounts/{{accountID}}/account-memberships/{{accountMembershipID}}
    method: DELETE
- name: Generate account tokens using OpenID Connect
  endpoint:
    path: /account-members/tokens
    method: POST
- name: Generate account tokens using Username and Password
  endpoint:
    path: /account-members/tokens
    method: POST
- name: Generate account tokens with One-time Password Token
  endpoint:
    path: /account-members/tokens
    method: POST
- name: Generate account tokens using Self Signup
  endpoint:
    path: /account-members/tokens
    method: POST
- name: Switch account tokens
  endpoint:
    path: /account-members/tokens
    method: POST
- name: Get brand attributes
  endpoint:
    path: /brands/attributes
    method: GET
- name: Get all brands
  endpoint:
    path: /brands
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get single brand
  endpoint:
    path: /brands/{{brandID}}
    method: GET
- name: Create a brand
  endpoint:
    path: /brands
    method: POST
- name: Update a brand
  endpoint:
    path: /brands/{{brandID}}
    method: PUT
- name: Delete a brand
  endpoint:
    path: /brands/{{brandID}}
    method: DELETE
- name: customer_cart_associations
  endpoint:
    path: /carts
    method: GET
- name: cart_items
  endpoint:
    path: /carts/{{cartID}}/items
    method: GET
- name: Add a promotion
  endpoint:
    path: /carts/{{cartID}}/items
    method: POST
    data_selector: data
    params: {}
- name: Delete a promotion via promotion code
  endpoint:
    path: /carts/{{cartID}}/discounts/{{promoCode}}
    method: DELETE
    data_selector: data
    params: {}
- name: Bulk add items to cart
  endpoint:
    path: /carts/{{cartID}}/items
    method: POST
    data_selector: data
    params: {}
- name: Re-order
  endpoint:
    path: /carts/{{cartID}}/items
    method: POST
    data_selector: data
    params: {}
- name: Cart merge
  endpoint:
    path: /carts/{{cartID}}/items
    method: POST
    data_selector: data
    params: {}
- name: Update a cart item
  endpoint:
    path: /carts/{{cartID}}/items/{{cartitemID}}
    method: PUT
    data_selector: data
    params: {}
- name: Delete a cart item
  endpoint:
    path: /carts/{{cartID}}/items/{{cartitemID}}
    method: DELETE
    data_selector: data
    params: {}
- name: Delete all cart items
  endpoint:
    path: /carts/{{cartID}}/items
    method: DELETE
    data_selector: data
    params: {}
- name: Add tax item to cart
  endpoint:
    path: /carts/{{cartID}}/items/{{cartitemID}}/taxes
    method: POST
    data_selector: data
    params: {}
- name: Bulk add tax items to cart
  endpoint:
    path: /carts/{{cartID}}/taxes
    method: POST
    data_selector: data
    params: {}
- name: Update a tax item
  endpoint:
    path: /carts/{{cartID}}/items/{{cartitemID}}/taxes/{{taxitemID}}
    method: PUT
    data_selector: data
    params: {}
- name: Get cart shipping groups
  endpoint:
    path: /carts/{{cartID}}/shipping-groups
    method: GET
- name: Get single cart shipping group
  endpoint:
    path: /carts/{{cartID}}/shipping-groups/{{cartShippingGroupID}}
    method: GET
- name: Create a cart shipping group
  endpoint:
    path: /carts/{{cartID}}/shipping-groups
    method: POST
- name: Update a cart shipping group
  endpoint:
    path: /carts/{{cartID}}/shipping-groups/{{cartShippingGroupID}}
    method: PUT
- name: Get shopper catalog
  endpoint:
    path: /catalog
    method: GET
- name: Get all hierarchies
  endpoint:
    path: /catalog/hierarchies
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get hierarchy by id
  endpoint:
    path: /catalog/hierarchies/{{hierarchyId}}
    method: GET
- name: Get hierarchy's child nodes
  endpoint:
    path: /catalog/hierarchies/{{hierarchyId}}/children
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get hierarchy's nodes
  endpoint:
    path: /catalog/hierarchies/{{hierarchyId}}/nodes
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get all nodes
  endpoint:
    path: /catalog/nodes
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get node by id
  endpoint:
    path: /catalog/nodes/{{nodeId}}
    method: GET
- name: Get node's child nodes
  endpoint:
    path: /catalog/nodes/{{nodeId}}/relationships/children
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get all catalogs
  endpoint:
    path: /catalogs
    method: GET
    data_selector: data
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get catalog by id
  endpoint:
    path: /catalogs/{{catalogId}}
    method: GET
    data_selector: data
- name: Create catalog
  endpoint:
    path: /catalogs
    method: POST
    data_selector: data
- name: Update catalog
  endpoint:
    path: /catalogs/{{catalogId}}
    method: PUT
    data_selector: data
- name: Delete catalog
  endpoint:
    path: /catalogs/{{catalogId}}
    method: DELETE
    data_selector: data
- name: Get all rules
  endpoint:
    path: /catalogs/rules
    method: GET
    data_selector: data
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get rule by id
  endpoint:
    path: /catalogs/rules/{{catalogRuleId}}
    method: GET
    data_selector: data
- name: Create rule
  endpoint:
    path: /catalogs/rules
    method: POST
    data_selector: data
- name: catalog_rule
  endpoint:
    path: /catalogs/rules/{{catalogRuleId}}
    method: PUT
- name: catalog_releases
  endpoint:
    path: /catalogs/{{catalogId}}/releases
    method: GET
- name: catalog_by_latest_release
  endpoint:
    path: /catalogs/{{catalogId}}/releases/latest
    method: GET
- name: hierarchies
  endpoint:
    path: /catalogs/{{catalogId}}/releases/latest/hierarchies
    method: GET
- name: Get node by id
  endpoint:
    path: /catalogs/{{catalogId}}/releases/latest/nodes/{{nodeId}}
    method: GET
- name: Get node's child nodes
  endpoint:
    path: /catalogs/{{catalogId}}/releases/latest/nodes/{{nodeId}}/relationships/children
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get all products
  endpoint:
    path: /catalogs/{{catalogId}}/releases/latest/products
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get product by id
  endpoint:
    path: /catalogs/{{catalogId}}/releases/latest/products/{{productId}}
    method: GET
- name: Get a hierarchy's products
  endpoint:
    path: /catalogs/{{catalogId}}/releases/latest/hierarchies/{{hierarchyId}}/products
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get a node's products
  endpoint:
    path: /catalogs/{{catalogId}}/releases/latest/nodes/{{nodeId}}/relationships/products
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get category attributes
  endpoint:
    path: /categories/attributes
    method: GET
- name: Get all categories
  endpoint:
    path: /categories
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get single category
  endpoint:
    path: /categories/{{categoryID}}
    method: GET
- name: Get categories tree
  endpoint:
    path: /categories/tree
    method: GET
- name: Create a category
  endpoint:
    path: /categories
    method: POST
- name: Get collection attributes
  endpoint:
    path: /collections/attributes
    method: GET
- name: Get all collections
  endpoint:
    path: /collections
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get single collection
  endpoint:
    path: /collections/{{collectionID}}
    method: GET
- name: Create a collection
  endpoint:
    path: /collections
    method: POST
- name: Get all Custom APIs
  endpoint:
    path: /settings/extensions/custom-apis
    method: GET
- name: Get a Custom API
  endpoint:
    path: /settings/extensions/custom-apis/{{customApiId}}
    method: GET
- name: Create a Custom API
  endpoint:
    path: /settings/extensions/custom-apis
    method: POST
- name: Update a Custom API
  endpoint:
    path: /settings/extensions/custom-apis/{{customApiId}}
    method: PUT
- name: Delete a Custom API
  endpoint:
    path: /settings/extensions/custom-apis/{{customApiId}}
    method: DELETE
- name: Get all Custom Fields
  endpoint:
    path: /settings/extensions/custom-apis/{{customApiId}}/fields
    method: GET
- name: Get a Custom Field
  endpoint:
    path: /settings/extensions/custom-apis/{{customApiId}}/fields/{{customFieldId}}
    method: GET
- name: Create a Custom Field
  endpoint:
    path: /settings/extensions/custom-apis/{{customApiId}}/fields
    method: POST
- name: Update a Custom Field
  endpoint:
    path: /settings/extensions/custom-apis/{{customApiId}}/fields/{{customFieldId}}
    method: PUT
- name: customApiEntries
  endpoint:
    path: /extensions/{{customApiSlug}}
    method: GET
    data_selector: data
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: currencies
  endpoint:
    path: /currencies
    method: GET
    data_selector: data
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: data
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get a customer
  endpoint:
    path: /customers/{{customerID}}
    method: GET
- name: Create a customer
  endpoint:
    path: /customers
    method: POST
- name: Update a customer
  endpoint:
    path: /customers/{{customerID}}
    method: PUT
- name: Delete a customer
  endpoint:
    path: /customers/{{customerID}}
    method: DELETE
- name: Generate customer token
  endpoint:
    path: /customers/tokens
    method: POST
- name: Generate customer token with OpenID Connect
  endpoint:
    path: /customers/tokens
    method: POST
- name: Get file attributes
  endpoint:
    path: /files/attributes
    method: GET
- name: Get all files
  endpoint:
    path: /files
    method: GET
- name: Get a file
  endpoint:
    path: /files/{{fileID}}
    method: GET
- name: Create a file
  endpoint:
    path: /files
    method: POST
- name: Delete a file
  endpoint:
    path: /files/{{fileID}}
    method: DELETE
- name: Get all flows
  endpoint:
    path: /flows
    method: GET
- name: Get single flow
  endpoint:
    path: /flows/{{flowID}}
    method: GET
- name: Create a flow
  endpoint:
    path: /flows
    method: POST
- name: Update a flow
  endpoint:
    path: /flows/{{flowID}}
    method: PUT
- name: Delete a flow
  endpoint:
    path: /flows/{{flowID}}
    method: DELETE
- name: Get all fields
  endpoint:
    path: /fields
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get all fields on a flow
  endpoint:
    path: /flows/{{flowSlug}}/fields
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get single field
  endpoint:
    path: /fields/{{fieldID}}
    method: GET
- name: Create a field
  endpoint:
    path: /fields
    method: POST
- name: Update a field
  endpoint:
    path: /fields/{{fieldID}}
    method: PUT
- name: Delete a field
  endpoint:
    path: /fields/{{fieldID}}
    method: DELETE
- name: Create an entry
  endpoint:
    path: /flows/{{flowSlug}}/entries
    method: POST
- name: Get single entry
  endpoint:
    path: /flows/{{flowSlug}}/entries/{{entryID}}
    method: GET
- name: Update an entry
  endpoint:
    path: /flows/{{flowSlug}}/entries/{{entryID}}
    method: PUT
- name: Delete a entry
  endpoint:
    path: /flows/{{flowSlug}}/entries/{{entryID}}
    method: DELETE
- name: Get all entries on a flow
  endpoint:
    path: /flows/{{flowSlug}}/entries
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get all gateways
  endpoint:
    path: /gateways
    method: GET
- name: Get a gateway
  endpoint:
    path: /gateways/{{gatewaySlug}}
    method: GET
- name: Update Manual gateway
  endpoint:
    path: /gateways/manual
    method: PUT
- name: Update Braintree gateway
  endpoint:
    path: /gateways/braintree
    method: PUT
- name: Update Stripe gateway
  endpoint:
    path: /gateways/stripe
    method: PUT
- name: Update Stripe Intents gateway
  endpoint:
    path: /gateways/stripe_payment_intents
    method: PUT
- name: Update Stripe Connect gateway
  endpoint:
    path: /gateways/stripe_connect
    method: PUT
- name: Update PayPal Express Checkout gateway
  endpoint:
    path: /gateways/paypal_express_checkout
    method: PUT
- name: Update EP payments Stripe
  endpoint:
    path: /gateways/elastic_path_payments_stripe
    method: PUT
- name: Update Authorize Net gateway
  endpoint:
    path: /gateways/authorize_net
    method: PUT
- name: Get a hierarchy by id
  endpoint:
    path: /hierarchies/{{hierarchyId}}
    method: GET
- name: Create a hierarchy
  endpoint:
    path: /hierarchies
    method: POST
- name: Update a hierarchy
  endpoint:
    path: /hierarchies/{{hierarchyId}}
    method: PUT
- name: Delete a hierarchy
  endpoint:
    path: /hierarchies/{{hierarchyId}}
    method: DELETE
- name: Get a hierarchy's child nodes
  endpoint:
    path: /hierarchies/{{hierarchyId}}/children
    method: GET
- name: Get integration attributes
  endpoint:
    path: /integrations/attributes
    method: GET
- name: Get all integrations
  endpoint:
    path: /integrations
    method: GET
- name: Get an integration
  endpoint:
    path: /integrations/{{integrationID}}
    method: GET
- name: Create an integration
  endpoint:
    path: /integrations
    method: POST
- name: Update an integration
  endpoint:
    path: /integrations/{{integrationID}}
    method: PUT
- name: Delete an integration
  endpoint:
    path: /integrations/{{integrationID}}
    method: DELETE
- name: Get all logs
  endpoint:
    path: /integrations/logs
    method: GET
- name: Get integration logs
  endpoint:
    path: /integrations/{{integrationID}}/logs
    method: GET
- name: Get integration jobs
  endpoint:
    path: /integrations/{{integrationID}}/jobs
    method: GET
- name: Get all inventories
  endpoint:
    path: /inventories
    method: GET
- name: Get product inventory
  endpoint:
    path: /inventories/{{productID}}
    method: GET
- name: Get product stock transactions
  endpoint:
    path: /inventories/{{productID}}/transactions
    method: GET
- name: Get a product stock transaction
  endpoint:
    path: /inventories/{{productID}}/transactions/{{transactionID}}
    method: GET
- name: Create a stock transaction
  endpoint:
    path: /inventories/{{productID}}/transactions
    method: POST
- name: Create inventory
  endpoint:
    path: /inventories/{{productID}}
    method: POST
- name: Delete inventory
  endpoint:
    path: /inventories/{{productID}}
    method: DELETE
- name: Get merchant realm mapping
  endpoint:
    path: /merchant-realm-mappings
    method: GET
- name: Get merchant realm mapping by id
  endpoint:
    path: /merchant-realm-mappings/{{merchantMappingId}}
    method: GET
- name: Update merchant realm mapping's store prefix
  endpoint:
    path: /merchant-realm-mappings/{{merchantMappingId}}
    method: PUT
- name: Get merchant oauth2 profiles
  endpoint:
    path: /merchant-oauth2-profiles
    method: GET
- name: Get a node's products
  endpoint:
    path: /hierarchies/{{hierarchyId}}/nodes/{{nodeId}}/products
    method: GET
- name: Create relationships to products
  endpoint:
    path: /hierarchies/{{hierarchyId}}/nodes/{{nodeId}}/relationships/products
    method: POST
- name: Delete relationships to products
  endpoint:
    path: /hierarchies/{{hierarchyId}}/nodes/{{nodeId}}/relationships/products
    method: DELETE
- name: Get OIDC profiles
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}/oidc-profiles/
    method: GET
- name: Create OIDC profile
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}/oidc-profiles/
    method: POST
- name: Delete OIDC profile
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}/oidc-profiles/{{oidcProfileId}}
    method: DELETE
- name: Get order attributes
  endpoint:
    path: /orders/attributes
    method: GET
- name: Get all orders
  endpoint:
    path: /orders
    method: GET
- name: Get order shipping groups
  endpoint:
    path: /orders/{{orderID}}/shipping-groups
    method: GET
- name: Get single order shipping group
  endpoint:
    path: /orders/{{orderID}}/shipping-groups/{{orderShippingGroupID}}
    method: GET
- name: Update an order shipping group
  endpoint:
    path: /orders/{{orderID}}/shipping-groups/{{orderShippingGroupID}}
    method: PUT
- name: Update Password profile
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}/password-profiles/{{passwordProfileId}}
    method: PUT
- name: Delete Password profile
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}/password-profiles/{{passwordProfileId}}
    method: DELETE
- name: Authorize by token
  endpoint:
    path: /orders/{{orderID}}/payments
    method: POST
- name: Purchase by token
  endpoint:
    path: /orders/{{orderID}}/payments
    method: POST
- name: Authorize by customerID
  endpoint:
    path: /orders/{{orderID}}/payments
    method: POST
- name: Purchase by customerID
  endpoint:
    path: /orders/{{orderID}}/payments
    method: POST
- name: Authorize by nonce
  endpoint:
    path: /orders/{{orderID}}/payments
    method: POST
- name: Purchase by nonce
  endpoint:
    path: /orders/{{orderID}}/payments
    method: POST
- name: Purchase by token
  endpoint:
    path: /orders/{{orderID}}/payments
    method: POST
- name: Authorize by token
  endpoint:
    method: POST
    path: /orders/{{orderID}}/payments
- name: Purchase by token
  endpoint:
    method: POST
    path: /orders/{{orderID}}/payments
- name: Authorize by token
  endpoint:
    path: /orders/{{orderID}}/payments
    method: POST
- name: Purchase by token
  endpoint:
    path: /orders/{{orderID}}/payments
    method: POST
- name: Confirm Payment
  endpoint:
    path: /orders/{{orderID}}/transactions/{{transactionID}}/confirm
    method: POST
- name: Get all Built-in Roles
  endpoint:
    path: /permissions/built-in-roles
    method: GET
- name: Get a Built-in Role
  endpoint:
    path: /permissions/built-in-roles/{{builtInRoleId}}
    method: GET
- name: Get all Custom API Role Policies
  endpoint:
    path: /permissions/custom-api-role-policies
    method: GET
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get a Custom API Role Policy
  endpoint:
    path: /permissions/custom-api-role-policies/{{policyId}}
    method: GET
- name: Create a Custom API Role Policy
  endpoint:
    path: /permissions/custom-api-role-policies
    method: POST
- name: Get related data entries
  endpoint:
    path: /personal-data/related-data-entries?filter=eq(resource_id,{{customerID}}):eq(resource_type,customer)
    method: GET
- name: Get logs
  endpoint:
    path: /personal-data/logs?filter=eq(resource_id,{{customerID}}):eq(resource_type,customer)
    method: GET
- name: Create erasure request
  endpoint:
    path: /personal-data/erasure-requests
    method: POST
- name: Get erasure request
  endpoint:
    path: /personal-data/erasure-requests/{erasureRequestID}
    method: GET
- name: Get erasure requests
  endpoint:
    path: /personal-data/erasure-requests?filter=eq(resource_id,{{customerID}}):eq(resource_type,customer)
    method: GET
- name: Update TTL
  endpoint:
    path: //settings/logs-ttl
    method: PUT
- name: Get TTL
  endpoint:
    path: //settings/logs-ttl
    method: GET
- name: Get all Jobs for PIM
  endpoint:
    path: /jobs
    method: GET
- name: Get a Job for PIM via its ID
  endpoint:
    path: /jobs/{{pimJobId}}
    method: GET
- name: Get all Errors for a Job in PIM via its ID
  endpoint:
    path: /jobs/{{pimJobId}}/errors
    method: GET
- name: Get all pricebooks
  endpoint:
    path: /pricebooks
    method: GET
- name: Get a pricebook
  endpoint:
    path: /pricebooks/{{pricebookId}}
    method: GET
- name: Create a pricebook
  endpoint:
    path: /pricebooks
    method: POST
- name: pricebook
  endpoint:
    path: /pricebooks/{{pricebookId}}
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
- name: Get a product's nodes
  endpoint:
    path: /products/{{productId}}/nodes
    method: GET
    data_selector: data
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Get a product's file relationships
  endpoint:
    path: /products/{{productId}}/relationships/files
    method: GET
    data_selector: data
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Create product file relationships
  endpoint:
    path: /products/{{productId}}/relationships/files
    method: POST
    data_selector: data
- name: Get a product's variation relationships
  endpoint:
    path: /products/{{productId}}/relationships/variations
    method: GET
    data_selector: data
    params:
      page[offset]: '0'
      page[limit]: '10'
- name: Create product variation relationships
  endpoint:
    path: /products/{{productId}}/relationships/variations
    method: POST
    data_selector: data
- name: Get all rule promotions
  endpoint:
    path: /rule-promotions
    method: GET
- name: Get a rule promotion
  endpoint:
    path: /rule-promotions/{{promotionID}}
    method: GET
- name: Update a rule promotion
  endpoint:
    path: /rule-promotions/{{promotionID}}
    method: PUT
- name: Delete a rule promotion
  endpoint:
    path: /rule-promotions/{{promotionID}}
    method: DELETE
- name: Create a cart fixed discount rule promotion
  endpoint:
    path: /rule-promotions
    method: POST
- name: Create a cart percent discount rule promotion
  endpoint:
    path: /rule-promotions
    method: POST
- name: Create a cart percent discount with custom attribute rule promotion
  endpoint:
    path: /rule-promotions
    method: POST
- name: Create a cart percent discount with sub conditions
  endpoint:
    path: /rule-promotions
    method: POST
- name: Create an item fixed discount rule promotion
  endpoint:
    path: /rule-promotions
    method: POST
- name: Create an item discount with condition rule promotion
  endpoint:
    path: /rule-promotions
    method: POST
- name: Create an item percent discount with limitations and exclusions rule promotion
  endpoint:
    path: /rule-promotions
    method: POST
- name: Create an item percent discount with limitation and condition rule promotion
  endpoint:
    path: /rule-promotions
    method: POST
- name: Create a Mix of Cart and Item percent discount rule promotion
  endpoint:
    path: /rule-promotions
    method: POST
- name: Create an item fixed price discount rule promotion
  endpoint:
    path: /rule-promotions
    method: POST
- name: rule_promotion_codes
  endpoint:
    path: /rule-promotions/{{promotionID}}/codes
    method: GET
- name: Create rule promotion codes
  endpoint:
    path: /rule-promotions/{{promotionID}}/codes
    method: POST
- name: Delete a rule promotion code
  endpoint:
    path: /rule-promotions/{{promotionID}}/codes/{code}
    method: DELETE
- name: Delete multiple rule promotion codes
  endpoint:
    path: /rule-promotions/{{promotionID}}/codes
    method: DELETE
- name: Create rule promotion codes generation job
  endpoint:
    path: /rule-promotions/{{promotionID}}/jobs
    method: POST
- name: Create rule promotion codes export job
  endpoint:
    path: /rule-promotions/{{promotionID}}/jobs
    method: POST
- name: Cancel a rule promotion job
  endpoint:
    path: /rule-promotions/{{promotionID}}/jobs/{{promotionJobID}}/cancel
    method: POST
- name: Get rule promotion jobs
  endpoint:
    path: /rule-promotions/{{promotionID}}/jobs
    method: GET
- name: Get all promotions
  endpoint:
    path: /promotions
    method: GET
- name: Get a promotion
  endpoint:
    path: /promotions/{{promotionID}}
    method: GET
- name: Get a promotion history
  endpoint:
    path: /promotions/{{promotionID}}/history
    method: GET
- name: Create a cart fixed discount promotion
  endpoint:
    path: /promotions
    method: POST
- name: Create a cart percent discount promotion
  endpoint:
    path: /promotions
    method: POST
- name: Create a X for Y discount promotion
  endpoint:
    path: /promotions
    method: POST
- name: Create a X for amount discount promotion
  endpoint:
    path: /promotions
    method: POST
- name: Create a fixed bundle discount promotion
  endpoint:
    path: /promotions
    method: POST
- name: Create a item fixed discount promotion
  endpoint:
    path: /promotions
    method: POST
- name: Create a item percent discount promotion
  endpoint:
    path: /promotions
    method: POST
- name: Create a free gift promotion
  endpoint:
    path: /promotions
    method: POST
- name: Get promotion codes
  endpoint:
    path: /promotions/{{promotionID}}/codes
    method: GET
- name: Create promotion codes
  endpoint:
    path: /promotions/{{promotionID}}/codes
    method: POST
- name: Delete a promotion code
  endpoint:
    path: /promotions/{{promotionID}}/codes/{code}
    method: DELETE
- name: Delete multiple promotion codes
  endpoint:
    path: /promotions/{{promotionID}}/codes
    method: DELETE
- name: Create promotion codes generation job
  endpoint:
    path: /promotions/{{promotionID}}/jobs
    method: POST
- name: Create export promotion codes job
  endpoint:
    path: /promotions/{{promotionID}}/jobs
    method: POST
- name: Cancel a promotion job
  endpoint:
    path: /promotions/{{promotionID}}/jobs/{{promotionJobID}}/cancel
    method: POST
- name: Get promotion jobs
  endpoint:
    path: /promotions/{{promotionID}}/jobs
    method: GET
- name: promotion_code_export_file
  endpoint:
    path: /promotions/{{promotionID}}/jobs/{{jobID}}/file
    method: GET
- name: promotion_usages
  endpoint:
    path: /promotions/{{promotionID}}/usages
    method: GET
- name: single_promotion_code_usages
  endpoint:
    path: /promotions/{{promotionID}}/codes/{{promoCode}}/usages
    method: GET
- name: filter_promotion_usages
  endpoint:
    path: /promotions
    method: GET
- name: anonymize_promotion_usages
  endpoint:
    path: /promotions/usages/anonymize
    method: POST
- name: authentication_realms
  endpoint:
    path: /authentication-realms
    method: GET
- name: single_authentication_realm
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}
    method: GET
- name: update_authentication_realms
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}
    method: PUT
- name: settings_attributes
  endpoint:
    path: /settings/attributes
    method: GET
- name: all_settings
  endpoint:
    path: /settings
    method: GET
- name: update_settings
  endpoint:
    path: /settings
    method: PUT
- name: delete_settings
  endpoint:
    path: /settings
    method: DELETE
- name: cart_settings
  endpoint:
    path: /settings/cart
    method: GET
- name: update_cart_settings
  endpoint:
    path: /settings/cart
    method: PUT
- name: account_membership_settings
  endpoint:
    path: /settings/account-membership
    method: GET
- name: update_account_membership_settings
  endpoint:
    path: /settings/account-membership
    method: PUT
- name: Get order transactions
  endpoint:
    path: /orders/{{orderID}}/transactions
    method: GET
- name: Get a transaction
  endpoint:
    path: /orders/{{orderID}}/transactions/{{transactionID}}
    method: GET
- name: Get all user authentication info
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}/user-authentication-info/
    method: GET
- name: Get user authentication info
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}/user-authentication-info/{{userAuthenticationInfoId}}
    method: GET
- name: Create user authentication info
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}/user-authentication-info/
    method: POST
- name: Update user authentication info
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}/user-authentication-info/{{userAuthenticationInfoId}}
    method: PUT
- name: Delete user authentication info
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}/user-authentication-info/{{userAuthenticationInfoId}}
    method: DELETE
- name: Get User Authentication Password Profiles
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}/user-authentication-info/{{userAuthenticationInfoId}}/user-authentication-password-profile-info
    method: GET
- name: Get User Authentication Password Profile
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}/user-authentication-info/{{userAuthenticationInfoId}}/user-authentication-password-profile-info/{{userAuthenticationPasswordProfileId}}
    method: GET
- name: Create User Authentication Password Profile
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}/user-authentication-info/{{userAuthenticationInfoId}}/user-authentication-password-profile-info
    method: POST
- name: Update User Authentication Password Profile
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}/user-authentication-info/{{userAuthenticationInfoId}}/user-authentication-password-profile-info/{{userAuthenticationPasswordProfileId}}
    method: PUT
- name: Delete User Authentication Password profile
  endpoint:
    path: /authentication-realms/{{authenticationRealmId}}/user-authentication-info/{{userAuthenticationInfoId}}/user-authentication-password-profile-info/{{userAuthenticationPasswordProfileId}}
    method: DELETE
- name: Create a variation
  endpoint:
    path: /variations
    method: POST
- name: Get all variations
  endpoint:
    path: /variations
    method: GET
- name: Update a variation
  endpoint:
    path: /variations/{{variationId}}
    method: PUT
- name: Get a variation
  endpoint:
    path: /variations/{{variationId}}
    method: GET
- name: Delete a variation
  endpoint:
    path: /variations/{{variationId}}
    method: DELETE
- name: Get all Options for a Variation
  endpoint:
    path: /variations/{{variationId}}/options
    method: GET
- name: Create an Option for a Variation
  endpoint:
    path: /variations/{{variationId}}/options
    method: POST
- name: Get an Option for a Variation
  endpoint:
    path: /variations/{{variationId}}/options/{{optionId}}
    method: GET
- name: Update an Option for a Variation
  endpoint:
    path: /variations/{{variationId}}/options/{{optionId}}
    method: PUT
- name: Delete an Option for a Variation
  endpoint:
    path: /variations/{{variationId}}/options/{{optionId}}
    method: DELETE
- name: Create a Modifier for an Option
  endpoint:
    path: /variations/{{variationId}}/options/{{optionId}}/modifiers
    method: POST
- name: Get all Modifiers for an Option
  endpoint:
    path: /variations/{{variationId}}/options/{{optionId}}/modifiers
    method: GET
- name: Get a Modifier for an Option
  endpoint:
    path: /variations/{{variationId}}/options/{{optionId}}/modifiers/{{modifierId}}
    method: GET
- name: Update a Modifier for an Option
  endpoint:
    path: /variations/{{variationId}}/options/{{optionId}}/modifiers/{{modifierId}}
    method: PUT
- name: Delete a Modifier for an Option
  endpoint:
    path: /variations/{{variationId}}/options/{{optionId}}/modifiers/{{modifierId}}
    method: DELETE
- name: Get all variations
  endpoint:
    path: /variations
    method: GET
- name: Get single variation
  endpoint:
    path: /variations/{{variationID}}
    method: GET
- name: Create a variation
  endpoint:
    path: /variations
    method: POST
- name: Update a variation
  endpoint:
    path: /variations/{{variationID}}
    method: PUT
- name: Delete a variation
  endpoint:
    path: /variations/{{variationID}}
    method: DELETE
- name: Get all variation options
  endpoint:
    path: /variations/{{variationID}}/options
    method: GET
- name: Get single variation option
  endpoint:
    path: /products/{{variationID}}/options/{{optionID}}
    method: GET
- name: Create a variation option
  endpoint:
    path: /variations/{{variationID}}/options
    method: POST
- name: Update a variation option
  endpoint:
    path: /variations/{{variationID}}/options/{{optionID}}
    method: PUT
- name: Delete a variation option
  endpoint:
    path: /variations/{{variationID}}/options/{{optionID}}
    method: DELETE
- name: Get all product modifiers
  endpoint:
    path: /variations/{{variationID}}/options/{{optionID}}/modifiers
    method: GET
- name: Get single product modifier
  endpoint:
    path: /products/{{variationID}}/options/{{optionID}}/modifiers/{{modifierID}}
    method: GET
- name: Create a product modifier
  endpoint:
    path: /variations/{{variationID}}/options/{{optionID}}/modifiers
    method: POST
- name: Update a product modifier
  endpoint:
    path: /variations/{{variationID}}/options/{{optionID}}/modifiers/{{modifierID}}
    method: PUT
- name: Delete a product modifier
  endpoint:
    path: /variations/{{variationID}}/options/{{optionID}}/modifiers/{{modifierID}}
    method: DELETE
- name: Build child products
  endpoint:
    path: /products/{{productID}}/build
    method: POST
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- If you are using Elastic Path Commerce Cloud, follow the steps in Configure Elastic
  Path Payments Powered by Stripe documentation.
- If you are using Elastic Path Commerce, see Elastic Path Commerce Plugin Integration.
- A role assigned to a user in a store is restricted to that store. The same user
  can have different roles in different stores.
- For a production Commerce store, please ensure that more than one user with a `Seller
  Admin` or `IT/Developer` role are invited and added to the store.
- You need to re-authenticate when the access_token expires.
- The Client secret is only shown to you at this time. Copy and keep it somewhere
  safe and secure. Do not share it.
- During maintenance windows, increase latency may be observed but all APIs should
  function as expected.
- 'Requests made to the API must be encoded as JSON and contain the header Content-Type:
  application/json.'
- Responses from the API, including errors, are encoded as JSON.
- The maximum page length is set to 100 for any paginated call.
- Requests to /v2/orders and /v2/files have a hard offset limit of 10,000 records.
- By default, page length is set to 25. The maximum page length is set to 100 for
  any paginated call.
- The Product Experience Manager entities do not have quotas at this time.
- If you need higher quotas, please contact us to discuss your plan, use cases, and
  requirements.
- Each store and organization has a rate limit based on its type and usage.
- API requests made against a store and an organization are counted separately.
- API requests made against a store do not contribute to the organization's rate limit.
- Rate limits are not shared across stores and do not count towards the organization's
  usage.
- Some APIs across Commerce are eventually consistent.
- Allow time for updates to propagate after adding or updating products before publishing
  a catalog.
- During high-traffic periods, updates to resources may take a few seconds to be visible
  in requests that involve Filtering or Pagination.
- Uses bearer token for authentication.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: Could not parse the supplied filter'
- '401 Unauthorized: Check your access token'
- Status and Error Code Responses
- status: 400
  title: required
  detail: enabled is required
- status: 401
  title: Unable to validate access token
- status: 403
  title: Forbidden
- status: 404
  detail: The requested category could not be found
  title: Category not found
- status: 409
  detail: Write conflict detected
  title: Conflict
- status: 429
  title: '...'
- status: 500
  title: Internal Server Error
  detail: There was an internal server error, you can report with your request id.
- '429 Too Many Requests: Requests that are rate limited will get error responses.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: '{{baseUrl}}'
  auth:
    type: bearer
  headers:
    accept: application/json
    content-type: application/json
source_metadata: null
