resources:
- name: manifests
  endpoint:
    path: /notify-api/manifests
    method: GET
- name: manifest_entries
  endpoint:
    path: /notify-api/manifest-entries
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: source_entities
  endpoint:
    path: /import/entities
    method: POST
    data_selector: entities
    params:
      entity_physical_type: METADATA_ONLY
      entity_type: SOURCE
      entity_dv_source: source_system_name
      entity_schema: src
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: manifests
  endpoint:
    path: /create-manifest
    method: POST
- name: get_manifest
  endpoint:
    path: /get-manifest
    method: GET
- name: notify_manifest
  endpoint:
    path: /notify-manifest
    method: POST
- name: search_manifests
  endpoint:
    path: /search-manifests
    method: GET
- name: create_entry
  endpoint:
    path: /create-entry
    method: POST
- name: create_multiple_entries
  endpoint:
    path: /create-multiple-entries
    method: PUT
- name: get_entries
  endpoint:
    path: /get-entries
    method: GET
- name: get_entry
  endpoint:
    path: /get-entry
    method: GET
- name: digitraffic_locations_latest
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/source-systems/digitraffic/source-entities/locations_latest/manifests
    method: POST
    data_selector: manifest
    params: {}
- name: digitraffic_metadata_vessels_bq
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/source-systems/digitraffic/source-entities/metadata_vessels_bq/manifests
    method: POST
    data_selector: manifest
    params: {}
- name: notification_events
  endpoint:
    path: /notification/events
    method: GET
    data_selector: notifications
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: user_list
- name: autocompletions
  endpoint:
    path: /autocompletions
    method: GET
    data_selector: autocompletions
- name: entityTypes
  endpoint:
    method: GET
- name: attributeTypes
  endpoint:
    method: GET
- name: defaultAttributes
  endpoint:
    method: GET
- name: entityTypeDefaultAttributes
  endpoint:
    method: GET
- name: entityTypeDefaultLoadTypes
  endpoint:
    method: GET
- name: physicalOptTypePerEntityTypePerPhysicalTypes
  endpoint:
    method: GET
- name: keyTypePerEntityTypePerPhysicalTypes
  endpoint:
    method: GET
- name: keyTypeAttributePerEntityTypePerPhysicalTypes
  endpoint:
    method: GET
- name: entityPermissions
- name: grantees
- name: granteeTypes
- name: defaultGrants
- name: rowLevelPolicies
- name: rowLevelPolicyAttributes
- environmentName: DEV
- environmentName: QA
  variableName: cron_dv_fina
  variableValue: 0 2 * * 1-5
- environmentName: PROD
  variableName: cron_dv_fina
  variableValue: 0 2 * * *
- issueTrackSystemName: Dev Jira
  baseUrl: https://devjira.companyxyz.com/browse/
- name: schedulings
  endpoint:
    path: /path/to/schedulings
    method: GET
    data_selector: records
- name: schedulingTriggers
  endpoint:
    path: /path/to/schedulingTriggers
    method: GET
    data_selector: records
- name: schedulingVariables
  endpoint:
    path: /path/to/schedulingVariables
    method: GET
    data_selector: records
- name: schedulingPreconditions
  endpoint:
    path: /path/to/schedulingPreconditions
    method: GET
    data_selector: records
- entityTypeEntityLoadTypeEntityLoadLogicTemplateId: 62e058d3-6d0d-48fb-9048-fa47de728632
  entityType: HUB
  entityLoadType: TRANSFORM_PERSIST
  templateOrdinalPosition: 100
  isDefault: true
  generatedOnDeploy: true
- name: entityLoadLogicTemplates
  endpoint:
    path: /entityLoadLogicTemplates
    method: GET
    data_selector: entityLoadLogicTemplates
    params: {}
- name: entityLoadLogicTemplateLoadSteps
  endpoint:
    path: /entityLoadLogicTemplateLoadSteps
    method: GET
    data_selector: entityLoadLogicTemplateLoadSteps
    params: {}
- name: entityLoadLogicTemplateLoadOpts
  endpoint:
    path: /entityLoadLogicTemplateLoadOpts
    method: GET
    data_selector: entityLoadLogicTemplateLoadOpts
    params: {}
- name: entityTypeEntityLoadTypeEntityLoadLogicTemplates
  endpoint:
    path: /entityTypeEntityLoadTypeEntityLoadLogicTemplates
    method: GET
    data_selector: entityTypeEntityLoadTypeEntityLoadLogicTemplates
    params: {}
- name: ATTRIBUTE_TRANSFORMATION_LIST
  endpoint:
    path: /ftltemplate/ATTRIBUTE_TRANSFORMATION_LIST
    method: GET
    data_selector: parameters
- name: SOURCE_ATTRIBUTE_NAME_LIST
  endpoint:
    path: /ftltemplate/SOURCE_ATTRIBUTE_NAME_LIST
    method: GET
    data_selector: parameters
- name: TARGET_ATTRIBUTE_NAME_LIST
  endpoint:
    path: /ftltemplate/TARGET_ATTRIBUTE_NAME_LIST
    method: GET
    data_selector: parameters
- name: SET_TARGET_ATTRIBUTE_BY_NAME
  endpoint:
    path: /ftltemplate/SET_TARGET_ATTRIBUTE_BY_NAME
    method: GET
    data_selector: parameters
- name: SET_TARGET_ATTRIBUTE_BY_TRANSFORMATION
  endpoint:
    path: /ftltemplate/SET_TARGET_ATTRIBUTE_BY_TRANSFORMATION
    method: GET
    data_selector: parameters
- name: attrTransformationTypes
  endpoint:
    path: /attrTransformationTypes
    method: GET
    data_selector: transformationTypes
    params: {}
- name: dbmsTransformationFormulas
  endpoint:
    path: /dbmsTransformationFormulas
    method: GET
    data_selector: formulas
    params: {}
- sourceId: d5497314-46b0-416f-a8dd-8e619c8c6edc
  isDeleted: false
- name: validations
  endpoint:
    path: /config/validations
    method: GET
    data_selector: validations
    params: {}
- name: default_database
  endpoint:
    path: /clouddw_dev
    method: GET
- name: database
  endpoint:
    path: /clouddw_dev
    method: GET
    data_selector: records
- name: database
  endpoint:
    path: /clouddw_dev
    method: GET
    data_selector: data
    params: {}
- name: manifests
  endpoint:
    path: /api/manifests
    method: POST
    data_selector: records
- name: manifest_entries
  endpoint:
    path: /api/manifest_entries
    method: POST
    data_selector: records
- name: catalog
  endpoint:
    path: /sql/1.0/warehouses/abcdefghijklmnopqrstuvwxyz
    method: GET
    data_selector: records
- name: service_account
  endpoint:
    path: /serviceAccounts
    method: GET
    data_selector: serviceAccounts
    params: {}
- name: bigquery_jobs
  endpoint:
    path: /projects/{projectId}/jobs
    method: POST
    data_selector: jobReference
    params: {}
- name: service_account
  endpoint:
    path: /google_service_account/ade_account
    method: CREATE
    data_selector: service_account
    params: {}
- name: custom_iam_role
  endpoint:
    path: /google_project_iam_custom_role/ade_role
    method: CREATE
    data_selector: custom_role
    params: {}
- name: role_binding_to_service_account
  endpoint:
    path: /google_project_iam_binding/ade_role_to_user
    method: CREATE
    data_selector: role_binding
    params: {}
- name: storage_bucket_access
  endpoint:
    path: /google_storage_bucket_iam_binding/databucket_binding
    method: CREATE
    data_selector: storage_bucket_binding
    params: {}
- name: workload_identity_federation
  endpoint:
    path: /google_iam_workload_identity_pool/pool
    method: CREATE
    data_selector: workload_identity_pool
    params: {}
- name: aws_provider
  endpoint:
    path: /google_iam_workload_identity_pool_provider/aws_ade_provider
    method: CREATE
    data_selector: aws_provider
    params: {}
- name: service_account_impersonation
  endpoint:
    path: /google_service_account_iam_member/ade_sa_impersonation
    method: CREATE
    data_selector: impersonation
    params: {}
- name: Fabric Warehouse
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: CLOUDDW_DEV
  endpoint:
    path: /services/data/vXX.X/sobjects/CLOUDDW_DEV
    method: CREATE
    data_selector: records
    params: {}
- name: WH_ADE_DEV
  endpoint:
    path: /services/data/vXX.X/sobjects/WH_ADE_DEV
    method: CREATE
    data_selector: records
    params: {}
- name: ROLE_ADE_DEV
  endpoint:
    path: /services/data/vXX.X/sobjects/ROLE_ADE_DEV
    method: CREATE
    data_selector: records
    params: {}
- name: S_ADE_DEV
  endpoint:
    path: /services/data/vXX.X/sobjects/S_ADE_DEV
    method: CREATE
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: status_satellite
  endpoint:
    path: /status_satellite
    method: POST
    data_selector: records
- name: PIT
  endpoint:
    path: /services/data/vXX.X/sobjects/PIT
    method: GET
    data_selector: records
    params: {}
- name: SCD2 Template
  endpoint:
    path: /docs/custom-ftl-templates-in-entity-load-steps
    method: GET
    data_selector: template
    params: {}
- name: D_VESSEL_SCD2
  endpoint:
    path: /publish/D_VESSEL_SCD2
    method: GET
    data_selector: '*'
- name: psa_department
  endpoint:
    path: /staging/STG_ADVENTUREWORKS_DEPARTMENT
    method: INSERT
    data_selector: records
- name: staging
  endpoint:
    path: /config/entity/defaults
    method: POST
    data_selector: entityTypes
    params: {}
- name: data_vault
  endpoint:
    path: /config/entity/defaults
    method: POST
    data_selector: entityTypes
    params: {}
- name: dimensional
  endpoint:
    path: /config/entity/defaults
    method: POST
    data_selector: entityTypes
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: CSV Load
  endpoint:
    path: /notify
    method: POST
    data_selector: batch
    params:
      batch: 20230829010101
      format: UNKNOWN
- name: taxi_zone_lookup
  endpoint:
    path: /tripdata-taxizone-csv/2023/08/29/
    method: COPY
    data_selector: sourceFile
    params:
      delim: COMMA
      format: CSV
      fullscanned: true
      skiph: 1
- name: taxi_zone_lookup
  endpoint:
    path: /tripdata-taxizone-parquet/2023/08/29/taxi_zone_lookup.parquet
    method: COPY
    data_selector: data
    params:
      batch: 20230829010101
      format: UNKNOWN
- name: staging_taxizones_parquet
  endpoint:
    path: /COPY/INTO/staging.STG_TAXI_ZONES_PARQUET
    method: COPY
    data_selector: records
    params:
      stg_batch_id: '20230829010101'
      stg_create_time: current_timestamp
      stg_source_system: '''taxidata'''
      stg_source_entity: '''taxi_zone_lookup'''
      stg_file_name: metadata$filename
      locationid: $1:locationid::integer
      borough: $1:borough::varchar
      zone: $1:zone::varchar
      service_zone: $1:service_zone::varchar
- name: taxi_zones
  endpoint:
    path: /tripdata-taxizone-csv
    method: COPY
    data_selector: records
    params: {}
- name: taxi_zone_lookup
  endpoint:
    path: /tripdata-taxizone-parquet/2023/08/29/taxi_zone_lookup.parquet
    method: COPY
    data_selector: records
    params:
      batch: 20230829010101
      format: UNKNOWN
- name: STG_TAXI_ZONES_PARQUET
  endpoint:
    path: /staging/STG_TAXI_ZONES_PARQUET
    method: COPY
    data_selector: records
    params:
      OPT_FILE_FORMAT_OPTIONS:
        TYPE: PARQUET
        USE_VECTORIZED_SCANNER: true
      OPT_SF_FILE_COPY_OPTIONS:
        MATCH_BY_COLUMN_NAME: CASE_INSENSITIVE
- name: EXT_AIS_POSITION
  endpoint:
    path: /staging/EXT_AIS_POSITION
    method: CREATE
    data_selector: records
    params: {}
- name: stg_raw_cash_register_event
  endpoint:
    path: /staging/STG_RAW_CASH_REGISTER_EVENT
    method: CREATE
    data_selector: records
    params:
      CHANGE_TRACKING: true
- name: cash_register_pipe
  endpoint:
    path: /cash_register_pipe
    method: CREATE
    data_selector: records
    params:
      AUTO_INGEST: true
      FILE_FORMAT:
        type: JSON
        STRIP_OUTER_ARRAY: true
- name: dynamic_fact_sales_item
  endpoint:
    path: /fact/F_DYNAMIC_SALES_ITEM
    method: CREATE
    data_selector: records
    params:
      TARGET_LAG: DOWNSTREAM
      REFRESH_MODE: INCREMENTAL
- name: dynamic_sales_aggregate
  endpoint:
    path: /aggregate/F_DYNAMIC_SALES_AGGREGATE
    method: CREATE
    data_selector: records
    params:
      TARGET_LAG: 30 minutes
- name: STG_TEST_DATA
  endpoint:
    path: /path/to/stg_test_data
    method: INSERT
    data_selector: data
    params: {}
- name: SENSITIVE_DV_GENERATED_ID
  endpoint:
    path: MD5(UUID())
    method: SQL
- name: SENSITIVE_DV_ID_LOOKUP
  endpoint:
    path: NONE
    method: NONE
- name: SENSITIVE_DV_LINK_ID
  endpoint:
    path: NONE
    method: NONE
- name: H_CUSTOMER
  endpoint:
    path: /sdv/H_CUSTOMER
    method: INSERT
    data_selector: records
    params: {}
- name: S_CUSTOMER
  endpoint:
    path: /sdv/S_CUSTOMER
    method: INSERT
    data_selector: records
    params: {}
- name: L_CUSTOMER_STORE_TERRITORY
  endpoint:
    path: /rdv/L_CUSTOMER_STORE_TERRITORY
    method: INSERT
    data_selector: records
    params: {}
- name: STS_CUSTOMER_STORE_TERRITORY
  endpoint:
    path: /services/data/vXX.X/sobjects/STS_CUSTOMER_STORE_TERRITORY
    method: GET
    data_selector: records
    params: {}
- name: customer_store_territory
  endpoint:
    path: /bdv/Z_TMP_STS_CUSTOMER_STORE_TERRITORY
    method: CREATE TEMPORARY TABLE
    data_selector: DISTINCT
    params: {}
- name: LATEST_COMBINED_1
  endpoint:
    path: /services/data/vXX.X/sobjects/LATEST_COMBINED_1
    method: GET
    data_selector: records
    params: {}
- name: STG_BARENTSWATCH_LATEST_COMBINED_1
  endpoint:
    path: /services/data/vXX.X/sobjects/STG_BARENTSWATCH_LATEST_COMBINED_1
    method: GET
    data_selector: records
    params: {}
- name: export_data
  endpoint:
    path: /export/data
    method: EXPORT DATA
    data_selector: records
    params: {}
- name: F_SALES
  endpoint:
    path: /export_data
    method: EXPORT
    data_selector: records
- name: invoke_cloud_function
  endpoint:
    path: /europe-west1-<gcp_project_id>.cloudfunctions.net/gcf-file-exporter-dev
    method: POST
- name: create_data_profile_datascan_if_not_exists
  endpoint:
    path: /dataplex.googleapis.com/v1/projects/<gcp_project_id>/locations/europe-west1/dataScans?dataScanId=pub-f-sales-scan
    method: POST
- name: run_data_profile_datascan
  endpoint:
    path: /dataplex.googleapis.com/v1/projects/<gcp_project_id>/locations/europe-west1/dataScans/pub-f-sales-scan:run
    method: POST
- name: create_data_quality_scan_if_not_exists
  endpoint:
    path: /dataplex.googleapis.com/v1/projects/<gcp_project_id>/locations/europe-west1/dataScans?dataScanId=pub-f-sales-dq-scan
    method: POST
- name: run_data_quality_datascan
  endpoint:
    path: /dataplex.googleapis.com/v1/projects/<gcp_project_id>/locations/europe-west1/dataScans/pub-f-sales-dq-scan:run
    method: POST
- name: dlp_api_call
  endpoint:
    path: /dlp.europe-west1.rep.googleapis.com/v2/projects/<gcp_project_id>/locations/europe-west1/dlpJobs
    method: POST
- name: community_share
  endpoint:
    path: /data/shares/community_share
    method: GRANT
    data_selector: permissions
- name: create_data_profile_datascan_if_not_exists
  endpoint:
    path: /v1/projects/<gcp_project_id>/locations/europe-west1/dataScans
    method: POST
    data_selector: dataScan
    params:
      dataScanId: pub-f-sales-scan
- name: run_data_profile_datascan
  endpoint:
    path: /v1/projects/<gcp_project_id>/locations/europe-west1/dataScans/pub-f-sales-scan:run
    method: POST
- name: create_data_quality_scan_if_not_exists
  endpoint:
    path: /v1/projects/<gcp_project_id>/locations/europe-west1/dataScans
    method: POST
    data_selector: dataScan
    params:
      dataScanId: pub-f-sales-dq-scan
- name: run_data_quality_datascan
  endpoint:
    path: /v1/projects/<gcp_project_id>/locations/europe-west1/dataScans/pub-f-sales-dq-scan:run
    method: POST
- name: dlp_api_call
  endpoint:
    path: /v2/projects/<gcp_project_id>/locations/europe-west1/dlpJobs
    method: POST
- name: community_share
  endpoint:
    path: /services/data/vXX.X/sobjects/community_share
    method: POST
    data_selector: grantees
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: STG_TAXI_ZONES_CSV
  endpoint:
    path: /services/data/vXX.X/sobjects/STG_TAXI_ZONES_CSV
    method: CREATE
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: STG_TAXI_ZONES_CSV
  endpoint:
    path: /services/data/vXX.X/sobjects/STG_TAXI_ZONES_CSV
    method: CREATE
    data_selector: records
    params: {}
- name: manifest
  endpoint:
    path: /create-manifest
    method: POST
    data_selector: id
- name: manifests
  endpoint:
    path: /manifests
    method: GET
    data_selector: records
    params: {}
- name: notification_events
  endpoint:
    path: /notification/events
    method: GET
    data_selector: records
    params: {}
- name: manifest_entries
  endpoint:
    path: /create-multiple-entries-put
    method: PUT
    data_selector: sourceFile
    params: {}
- name: notify_manifest
  endpoint:
    path: /notify-manifest-post
    method: POST
    data_selector: id
    params: {}
- name: manifest
  endpoint:
    path: /create-manifest
    method: POST
    data_selector: manifest_entries
- name: manifests
  endpoint:
    path: /manifests
    method: GET
    data_selector: records
- name: manifest_entries
  endpoint:
    path: /manifest-entries
    method: GET
    data_selector: records
- name: manifest
  endpoint:
    path: /manifests
    method: POST
    data_selector: manifest
    params: {}
- name: entries
  endpoint:
    path: /entries
    method: GET
    data_selector: entries
    params: {}
- name: manifests
  endpoint:
    path: /manifests
    method: GET
    data_selector: records
    params: {}
- name: manifest_entries
  endpoint:
    path: /manifest-entries
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: entity_list
  endpoint:
    path: /entity_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: package_list
  endpoint:
    path: /package_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: entity
  endpoint:
    path: /entity
    method: POST
    data_selector: content
- name: entity_list
  endpoint:
    path: ''
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: package_list
  endpoint:
    path: ''
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: entity
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params:
      entity_id: string
- name: entity_list
  endpoint:
    path: /entity_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: workflow_stats_list
  endpoint:
    path: /workflow_stats_list
    method: POST
    data_selector: content
    params: {}
- name: entity_list
  endpoint:
    path: /entity_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: workflow_stats_list
  endpoint:
    path: /workflow_stats_list
    method: POST
    data_selector: content
- name: entity_list
  endpoint:
    path: /entity_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: package_list
  endpoint:
    path: /package_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: entity
  endpoint:
    path: /entity
    method: POST
    data_selector: content
    params:
      entity_id: String!
- name: entity_list
  endpoint:
    path: ''
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: package_list
  endpoint:
    path: ''
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: entity
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params:
      entity_id: 986ff984-1354-4e9d-889c-34ccc1a170e9
- name: entity_list
  endpoint:
    path: /entity_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: package_list
  endpoint:
    path: /package_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: entity_list
  endpoint:
    path: /entity_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: package_list
  endpoint:
    path: /package_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: entity_list
  endpoint:
    path: /entity_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: package_list
  endpoint:
    path: /package_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: entity
  endpoint:
    path: /entity
    method: POST
    data_selector: entity
    params:
      entity_id: string
- name: workflow_stats_list
  endpoint:
    path: /workflow/stats
    method: POST
    data_selector: content
    params:
      startTimeFrom: '2023-09-13T00:00:00.000000'
      startTimeTo: '2023-09-13T23:59:59.999999'
      size: 20
      page: 0
- name: entity_list
  endpoint:
    path: ''
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: package_list
  endpoint:
    path: ''
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: entity
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params:
      entity_id: 986ff984-1354-4e9d-889c-34ccc1a170e9
- name: workflow_stats_list
  endpoint:
    path: /workflow_stats_list
    method: POST
    data_selector: content
    params:
      startTimeFrom: '2023-09-13T00:00:00.000000'
      startTimeTo: '2023-09-13T23:59:59.999999'
      size: 20
      page: 0
- name: entity_list
  endpoint:
    path: /entity_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: package_list
  endpoint:
    path: /package_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: specific_entity
  endpoint:
    path: /entity
    method: POST
    data_selector: entity
    params:
      entity_id: 986ff984-1354-4e9d-889c-34ccc1a170e9
- name: entity_list
  endpoint:
    path: /entity_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: package_list
  endpoint:
    path: /package_list
    method: POST
    data_selector: content
    params:
      size: 100
      page: 0
- name: entity
  endpoint:
    path: /entity
    method: POST
    data_selector: ''
    params:
      entity_id: 986ff984-1354-4e9d-889c-34ccc1a170e9
- name: H_MARINE_VESSEL_MMSI
  endpoint:
    params:
      incremental: stg_run_id
- name: H_MARINE_VESSEL_IMO
  endpoint:
    params:
      incremental: source_run_id
- name: stg_digitraffic_metadata_vessels_json
  endpoint:
    params: {}
- name: H_MARINE_VESSEL_MMSI
  endpoint:
    params:
      incremental: stg_run_id
- name: H_MARINE_VESSEL_IMO
  endpoint:
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: package
  endpoint:
    path: /create/package
    method: POST
    data_selector: packages
    params: {}
- name: manifest
  endpoint:
    path: /create-manifest
    method: POST
    data_selector: records
    params: {}
- name: entries
  endpoint:
    path: /get-entries
    method: GET
    data_selector: records
    params: {}
- name: manifest
  endpoint:
    path: /manifests
    method: GET
    data_selector: records
- name: entries
  endpoint:
    path: /entries
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: entity_import
  endpoint:
    path: /entities/import
    method: POST
    data_selector: entities
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: logical_entity_types
  endpoint:
    path: /entity_types/logical
    method: GET
    data_selector: types
    params: {}
- name: physical_entity_types
  endpoint:
    path: /entity_types/physical
    method: GET
    data_selector: types
    params: {}
- name: Notify API
  endpoint:
    path: /services/data/vXX.X/notify
    method: POST
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: DV_DATAHASH
  endpoint:
    path: /attributes/DV_DATAHASH
    method: GET
    data_selector: description
    params: {}
- name: DV_DRIVING_KEY
  endpoint:
    path: /attributes/DV_DRIVING_KEY
    method: GET
    data_selector: description
    params: {}
- name: DV_HASHKEY
  endpoint:
    path: /attributes/DV_HASHKEY
    method: GET
    data_selector: description
    params: {}
- name: DV_LOAD_TIME
  endpoint:
    path: /attributes/DV_LOAD_TIME
    method: GET
    data_selector: description
    params: {}
- name: DV_REFERENCING_HASHKEY
  endpoint:
    path: /attributes/DV_REFERENCING_HASHKEY
    method: GET
    data_selector: description
    params: {}
- name: RUN_ID
  endpoint:
    path: /attributes/RUN_ID
    method: GET
    data_selector: description
    params: {}
- name: DV_SOURCESYSTEM
  endpoint:
    path: /attributes/DV_SOURCESYSTEM
    method: GET
    data_selector: description
    params: {}
- name: SDT_SORT_ORDER
  endpoint:
    path: /attributes/SDT_SORT_ORDER
    method: GET
    data_selector: description
    params: {}
- name: SDT_STAGE_CREATE_TIME
  endpoint:
    path: /attributes/SDT_STAGE_CREATE_TIME
    method: GET
    data_selector: description
    params: {}
- name: SDT_STAGE_ID
  endpoint:
    path: /attributes/SDT_STAGE_ID
    method: GET
    data_selector: description
    params: {}
- name: SDT_STAGE_SOURCE
  endpoint:
    path: /attributes/SDT_STAGE_SOURCE
    method: GET
    data_selector: description
    params: {}
- name: SDT_STAGE_SOURCE_TECH
  endpoint:
    path: /attributes/SDT_STAGE_SOURCE_TECH
    method: GET
    data_selector: description
    params: {}
- name: SDT_STAGE_SOURCE_TYPE
  endpoint:
    path: /attributes/SDT_STAGE_SOURCE_TYPE
    method: GET
    data_selector: description
    params: {}
- name: STATUS
  endpoint:
    path: /attributes/STATUS
    method: GET
    data_selector: description
    params: {}
- name: TIMESLOT
  endpoint:
    path: /attributes/TIMESLOT
    method: GET
    data_selector: description
    params: {}
- name: DV_DATAHASH
  endpoint:
    path: /attributes/DV_DATAHASH
    method: GET
    data_selector: attributes
    params: {}
- name: DV_DRIVING_KEY
  endpoint:
    path: /attributes/DV_DRIVING_KEY
    method: GET
    data_selector: attributes
    params: {}
- name: DV_HASHKEY
  endpoint:
    path: /attributes/DV_HASHKEY
    method: GET
    data_selector: attributes
    params: {}
- name: DV_LOAD_TIME
  endpoint:
    path: /attributes/DV_LOAD_TIME
    method: GET
    data_selector: attributes
    params: {}
- name: DV_REFERENCING_HASHKEY
  endpoint:
    path: /attributes/DV_REFERENCING_HASHKEY
    method: GET
    data_selector: attributes
    params: {}
- name: RUN_ID
  endpoint:
    path: /attributes/RUN_ID
    method: GET
    data_selector: attributes
    params: {}
- name: DV_SOURCESYSTEM
  endpoint:
    path: /attributes/DV_SOURCESYSTEM
    method: GET
    data_selector: attributes
    params: {}
- name: SDT_SORT_ORDER
  endpoint:
    path: /attributes/SDT_SORT_ORDER
    method: GET
    data_selector: attributes
    params: {}
- name: SDT_STAGE_CREATE_TIME
  endpoint:
    path: /attributes/SDT_STAGE_CREATE_TIME
    method: GET
    data_selector: attributes
    params: {}
- name: SDT_STAGE_ID
  endpoint:
    path: /attributes/SDT_STAGE_ID
    method: GET
    data_selector: attributes
    params: {}
- name: SDT_STAGE_SOURCE
  endpoint:
    path: /attributes/SDT_STAGE_SOURCE
    method: GET
    data_selector: attributes
    params: {}
- name: SDT_STAGE_SOURCE_TECH
  endpoint:
    path: /attributes/SDT_STAGE_SOURCE_TECH
    method: GET
    data_selector: attributes
    params: {}
- name: SDT_STAGE_SOURCE_TYPE
  endpoint:
    path: /attributes/SDT_STAGE_SOURCE_TYPE
    method: GET
    data_selector: attributes
    params: {}
- name: STATUS
  endpoint:
    path: /attributes/STATUS
    method: GET
    data_selector: attributes
    params: {}
- name: TIMESLOT
  endpoint:
    path: /attributes/TIMESLOT
    method: GET
    data_selector: attributes
    params: {}
- name: database_tags
  endpoint:
    path: /database/tags
    method: GET
- name: database_tags
  endpoint:
    path: /api/database_tags
    method: GET
    data_selector: tags
    params: {}
- name: database_tags
  endpoint:
    path: /configuration/database_tags
    method: GET
- name: configuration_of_database_tags
  endpoint:
    path: /database-tags/configuration
    method: GET
- name: configuration_of_database_tags
  endpoint:
    path: /configuration-of-database-tags
    method: GET
- name: Cost Center
  endpoint:
    path: /tags.cost_center
    method: CREATE
    data_selector: allowed_values
    params:
      allowed_values:
      - marketing
      - development
- name: Information type
  endpoint:
    path: /tags.information_type
    method: CREATE
    data_selector: allowed_values
    params:
      allowed_values:
      - pii
      - nationality
- name: Cost Center
  endpoint:
    path: tags.cost_center
    method: CREATE
    data_selector: allowed_values
    params:
      allowed_values: '''marketing'',''development'''
- name: Information type
  endpoint:
    path: tags.information_type
    method: CREATE
    data_selector: allowed_values
    params:
      allowed_values: '''pii'',''nationality'''
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: manifest
  endpoint:
    path: /manifests
    method: POST
    data_selector: records
- name: entry
  endpoint:
    path: /entries
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Azure SQL Database
  endpoint:
    path: /services/data/vXX.X/sobjects/AzureSQLDatabase
    method: GET
    data_selector: records
    params:
      incremental: category
- name: Google BigQuery
  endpoint:
    path: /services/data/vXX.X/sobjects/GoogleBigQuery
    method: GET
    data_selector: records
    params:
      incremental: category
- name: Azure Synapse SQL
  endpoint:
    path: /services/data/vXX.X/sobjects/AzureSynapseSQL
    method: GET
    data_selector: records
    params:
      incremental: category
- name: Databricks SQL
  endpoint:
    path: /services/data/vXX.X/sobjects/DatabricksSQL
    method: GET
    data_selector: records
    params:
      incremental: category
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: manifest
  endpoint:
    path: /services/data/vXX.X/manifests
    method: GET
    data_selector: records
- name: manifest_entries
  endpoint:
    path: /services/data/vXX.X/manifest_entries
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: manifest
  endpoint:
    path: /api/v1/manifests
    method: GET
    data_selector: records
    params: {}
- name: notification_event
  endpoint:
    path: /api/v1/notification_events
    method: GET
    data_selector: records
    params: {}
- name: compute_cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/DEPLOYMENT.COMPUTE_CLUSTER
    method: GET
    data_selector: records
    params:
      physical_option: DDL_WH
- name: compute_cluster
  endpoint:
    path: /services/data/vXX.X/compute_cluster
    method: SET
    data_selector: DDL_WH
    params: {}
- name: suspend_clustering
  endpoint:
    path: /ALTER TABLE publish.F_TRIP SUSPEND RECLUSTER
    method: ALTER
    data_selector: none
    params: {}
- name: Azure SQL Database
  endpoint:
    path: /AzureSQL/partition_scheme
    method: POST
    data_selector: partition_scheme_definition
    params:
      entity_type: TABLE
- name: Azure Synapse SQL
  endpoint:
    path: /AzureSynapse/partition_scheme
    method: POST
    data_selector: partition_scheme_definition
    params:
      entity_type: TABLE
- name: Google BigQuery
  endpoint:
    path: /BigQuery/partition_scheme
    method: POST
    data_selector: partition_scheme_definition
    params:
      entity_type: TABLE
- name: Databricks SQL
  endpoint:
    path: /Databricks/partition_scheme
    method: POST
    data_selector: partition_scheme_definition
    params:
      entity_type: TABLE
- name: F_TRIP
  endpoint:
    path: CREATE TABLE pub.F_TRIP
    method: CREATE
    data_selector: PARTITION BY RANGE_BUCKET(category, GENERATE_ARRAY(0, 1000, 200))
    params:
      require_partition_filter: true
- name: Azure SQL Database
  endpoint:
    path: /AzureSQLDatabase
    method: GET
    data_selector: records
    params:
      partition_scheme: categoryPartitioningPS
- name: Google BigQuery
  endpoint:
    path: /GoogleBigQuery
    method: GET
    data_selector: records
    params:
      partition_scheme: RANGE_BUCKET(<entity_partition_key>, GENERATE_ARRAY(0, 1000,
        200))
- name: Azure Synapse SQL
  endpoint:
    path: /AzureSynapseSQL
    method: GET
    data_selector: records
    params:
      partition_scheme: <entity_partition_key> RANGE FOR VALUES (200,400,600,800)
- name: Databricks SQL
  endpoint:
    path: /DatabricksSQL
    method: GET
    data_selector: records
    params:
      partition_scheme: (<entity_partition_key> STRING)
- name: partitioned_table
  endpoint:
    path: /path/to/partitioned_table
    method: POST
    data_selector: table_data
    params:
      require_partition_filter: 'true'
- name: STORAGE.SORTKEY_RECLUSTER_IN_ENTITY_RECREATE
  endpoint:
    path: /docs/storage-sortkey_recluster_in_entity_recreate
    method: GET
- name: D_TAXI_ZONE
  endpoint:
    path: STORAGE.SECURE_VIEW
    method: OPTION
    data_selector: null
    params: {}
- name: STORAGE.SORTKEY_RECLUSTER_IN_ENTITY_RECREATE
  endpoint:
    path: /docs/storage-sortkey_recluster_in_entity_recreate
    method: GET
- name: TABLE_STATISTICS_UPDATE_IN_ENTITY_RECREATE
  endpoint:
    path: /storage/table_statistics_update_in_entity_recreate
    method: POST
- name: time_travel_retention
  endpoint:
    path: /STORAGE.TIME_TRAVEL_RETENTION_IN_DAYS
    method: SET
    data_selector: integer
- name: STORAGE.TRANSIENT_TABLE
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: marine_position
  endpoint:
    path: /rdv/L_T_MARINE_AIS_POSITION
    method: INSERT
    data_selector: vessel_positions
    params:
      incremental: dv_run_id
- name: marine_vessel
  endpoint:
    path: /rdv/S_MARINE_VESSEL_MMSI_C
    method: INSERT
    data_selector: vessel_identity
    params: {}
- name: contacts
  endpoint:
    path: /edw/DW_CONTACTS
    method: INSERT
    data_selector: contacts_info
    params:
      incremental: contact_id
- name: excluded_contacts
  endpoint:
    path: /edw/R_EXCLUDED_CONTACTS
    method: SELECT
    data_selector: excluded_contact_id
    params: {}
- name: marine_position
  endpoint:
    path: /loads/marine_position
    method: INSERT
    data_selector: positions
    params:
      incremental: msgtime
- name: excluded_contacts
  endpoint:
    path: /loads/excluded_contacts
    method: INSERT
    data_selector: excluded_ids
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: external_process
  endpoint:
    path: /ade-ci-data-processor
    method: POST
    data_selector: process_name
    params: {}
- name: process_status
  endpoint:
    path: /ade-ci-data-processor/<process_name>/status
    method: GET
    data_selector: status
    params: {}
- name: process_results
  endpoint:
    path: /ade-ci-data-processor/<process_name>
    method: GET
    data_selector: result_info
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: external_process
  endpoint:
    path: /ade-ci-data-processor
    method: POST
- name: process_status
  endpoint:
    path: /ade-ci-data-processor/<process_name>/status
    method: GET
- name: process_results
  endpoint:
    path: /ade-ci-data-processor/<process_name>
    method: GET
- name: request
  endpoint:
    method: GET
    url: Mandatory URL for the API call. Must use HTTPS.
- name: manifest
  endpoint:
    path: /manifests
    method: GET
    data_selector: records
- name: manifest_entries
  endpoint:
    path: /manifest_entries
    method: GET
    data_selector: records
- name: request
  endpoint:
    method: GET
    url: https://your-instance.api-name.com
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: OPT_DELTA_EXTRACT
  endpoint:
    path: /OPT_DELTA_EXTRACT
    method: GET
    data_selector: records
    params:
      incremental: 'true'
- name: OPT_INSERT_UPDATE_BY_DATAHASH_AS_MERGE
  endpoint:
    path: /opt/insert/update/by/datahash/as/merge
    method: POST
- name: load_option
  endpoint:
    path: /docs/load-options
    method: GET
    data_selector: options
    params: {}
- name: Load Option
  endpoint:
    path: /load/options/OPT_INSERT_UPDATE_BY_DATAHASH_AS_OVERWRITE
    method: GET
    data_selector: options
    params:
      OPT_INSERT_UPDATE_BY_DATAHASH_AS_OVERWRITE: 'true'
- name: historized_by_datahash
  endpoint:
    path: /load/options
    method: POST
    data_selector: options
    params:
      OPT_HISTORIZED_BY_DATAHASH_AS_INSERT: true
- name: OPT_INSERT_UPDATE_BY_DATAHASH_AS_SWAP
  endpoint:
    path: /opt/insert/update/by/datahash/as/swap
    method: POST
- name: load_option
  endpoint:
    path: /load/options
    method: POST
    data_selector: load_options
    params:
      OPT_INSERT_UPDATE_BY_DATAHASH_AS_SWAP: true
- name: OPT_INSERT_UPDATE_BY_DATAHASH_AS_OVERWRITE
  endpoint:
    path: /load-options
    method: GET
    data_selector: records
    params:
      OPT_INSERT_UPDATE_BY_DATAHASH_AS_OVERWRITE: true
- name: OPT_INSERT_UPDATE_BY_ID_AS_MERGE
  endpoint:
    path: /docs/load-options
    method: GET
    data_selector: records
    params:
      OPT_INSERT_UPDATE_BY_ID_AS_MERGE: 'true'
- name: OPT_INSERT_UPDATE_BY_ID_AS_OVERWRITE
  endpoint:
    path: /load-options
    method: GET
    data_selector: options
    params:
      OPT_INSERT_UPDATE_BY_ID_AS_OVERWRITE: 'true'
- name: latest_entries
  endpoint:
    path: /latest_entries
    method: INSERT
    data_selector: results
    params:
      OPT_INSERT_UPDATE_BY_DATAHASH_AS_SWAP: true
- name: OPT_INSERT_UPDATE_BY_ID_AS_SWAP
  endpoint:
    path: /docs/opt_insert_update_by_id_as_swap
    method: GET
- name: OPT_INSERT_UPDATE_BY_ID_AS_MERGE
  endpoint:
    path: /opt/insert/update/by/id/as/merge
    method: POST
- name: OPT_INSERT_UPDATE_BY_ID_AS_MERGE
  endpoint:
    path: /load-options
    method: GET
    data_selector: records
    params: {}
- name: OPT_INSERT_UPDATE_BY_ID_AS_SWAP
  endpoint:
    path: /OPT_INSERT_UPDATE_BY_ID_AS_SWAP
    method: OPTION
    data_selector: Boolean
    params:
      default: 'false'
- name: load_option
  endpoint:
    path: /load_options
    method: POST
    data_selector: results
    params:
      OPT_INSERT_UPDATE_BY_ID_AS_OVERWRITE: true
- name: OPT_INSERT_UPDATE_DELETE_BY_DATAHASH_AS_MERGE
  endpoint:
    path: /docs/load-options
    method: GET
    data_selector: options
    params: {}
- name: insert_update_delete_by_datahash_as_overwrite
  endpoint:
    path: /opt/insert/update/delete/by/datahash/as/overwrite
    method: POST
- name: OPT_INSERT_UPDATE_BY_ID_AS_SWAP
  endpoint:
    path: /OPT_INSERT_UPDATE_BY_ID_AS_SWAP
    method: GET
    data_selector: records
    params:
      OPT_INSERT_UPDATE_BY_ID_AS_SWAP: true
- name: load_option
  endpoint:
    path: /load_options/opt_insert_update_delete_by_datahash_as_overwrite
    method: GET
    data_selector: option
    params:
      OPT_INSERT_UPDATE_DELETE_BY_DATAHASH_AS_OVERWRITE: true
- name: OPT_INSERT_UPDATE_DELETE_BY_DATAHASH_AS_SWAP
  endpoint:
    path: /opt/insert_update_delete_by_datahash_as_swap
    method: POST
- name: load_option
  endpoint:
    path: /load/options
    method: POST
    data_selector: options
    params:
      OPT_INSERT_UPDATE_DELETE_BY_DATAHASH_AS_SWAP: true
- name: OPT_INSERT_UPDATE_DELETE_BY_DATAHASH_AS_OVERWRITE
  endpoint:
    path: /load-options
    method: GET
    data_selector: options
    params:
      default: 'false'
- name: OPT_INSERT_UPDATE_DELETE_BY_ID_AS_MERGE
  endpoint:
    path: /load-options
    method: GET
    data_selector: options
    params:
      OPT_INSERT_UPDATE_DELETE_BY_ID_AS_MERGE: 'true'
- name: OPT_INSERT_UPDATE_DELETE_BY_DATAHASH_AS_SWAP
  endpoint:
    path: /docs/opt_insert_update_delete_by_datahash_as_swap
    method: GET
    data_selector: records
- name: insert_update_delete_by_id_as_overwrite
  endpoint:
    path: /opt/insert_update_delete_by_id_as_overwrite
    method: POST
- name: OPT_INSERT_UPDATE_DELETE_BY_ID_AS_MERGE
  endpoint:
    path: /docs/load-options
    method: GET
    data_selector: records
    params: {}
- name: Insert_Update_Delete_Load
  endpoint:
    path: /load/insert_update_delete
    method: POST
    data_selector: result
    params:
      OPT_INSERT_UPDATE_DELETE_BY_ID_AS_SWAP: true
- name: OPT_INSERT_UPDATE_DELETE_BY_ID_AS_SWAP
  endpoint:
    path: /OPT/INSERT/UPDATE/DELETE/BY/ID/AS/SWAP
    method: POST
- name: entity_load
  endpoint:
    path: /load/entity
    method: POST
    data_selector: results
    params:
      OPT_INSERT_UPDATE_DELETE_BY_ID_AS_SWAP: true
- name: OPT_LOCK_WAIT_TIME_IN_SECS
- name: OPT_NOT_EXISTS_FROM
  endpoint:
    path: /opt/not_exists_from
    method: GET
- name: file_load
  endpoint:
    path: /load_file
    method: POST
    data_selector: records
    params:
      OPT_LOAD_WITH_BQ_API: 'True'
- name: run_id_logic
  endpoint:
    path: /docs/using-run-id-logic
    method: GET
    data_selector: run_id_data
    params:
      OPT_USE_RUN_IDS: 'true'
      OPT_NUM_RUN_IDS_PER_TRANSACTION: '1'
- name: OPT_NUM_RUN_IDS_PER_TRANSACTION
  endpoint:
    path: /docs/opt_num_run_ids_per_transaction
    method: GET
- name: load_option
  endpoint:
    path: /docs/load-options
    method: GET
    data_selector: options
    params: {}
- name: run_id_logic
  endpoint:
    path: /docs/using-run-id-logic
    method: GET
    data_selector: examples
    params: {}
- name: OPT_SCAN_ONLY_THE_LATEST_BY_KEY
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      OPT_SCAN_ONLY_THE_LATEST_BY_KEY: 'true'
- name: OPT_USE_RUN_IDS
  endpoint:
    path: /opt/use/run/ids
    method: GET
- name: Load satellite with Run ID Logic
  endpoint:
    path: /docs/load-options
    method: GET
    data_selector: records
    params: {}
- name: OPT_USE_RUN_IDS
  endpoint:
    path: /opt/use/run/ids
    method: GET
- name: opt_use_run_ids
  endpoint:
    path: /docs/load-options
    method: GET
    data_selector: records
    params: {}
- name: Load Options
  endpoint:
    path: /docs/load-options
    method: GET
    data_selector: options
    params: {}
- name: OPT_USE_RUN_IDS
  endpoint:
    path: /docs/opt_use_run_ids
    method: GET
    data_selector: options
    params: {}
- name: OPT_USE_RUN_IDS_INCREMENTALLY
  endpoint:
    params:
      OPT_USE_RUN_IDS_INCREMENTALLY: true
- name: OPT_USE_RUN_IDS
  endpoint:
    params:
      OPT_USE_RUN_IDS: true
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: copy_options
  endpoint:
    path: /docs/copy_options
    method: GET
- name: data_source
  endpoint:
    path: /docs/data_source
    method: GET
- name: file_format
  endpoint:
    path: /docs/file_format
    method: GET
- name: from_file
  endpoint:
    path: /docs/from_file
    method: GET
- name: from_file_list
  endpoint:
    path: /docs/from_file_list
    method: GET
- name: from_path
  endpoint:
    path: /docs/from_path
    method: GET
- name: manifestrunid
  endpoint:
    path: /docs/manifestrunid
    method: GET
- name: source_credentials
  endpoint:
    path: /docs/source_credentials
    method: GET
- name: source_encryption
  endpoint:
    path: /docs/source_encryption
    method: GET
- name: storage_integration
  endpoint:
    path: /docs/storage_integration
    method: GET
- name: target_entity_attribute_list
  endpoint:
    path: /docs/target_entity_attribute_list
    method: GET
- name: target_entity_logical_name
  endpoint:
    path: /docs/target_entity_logical_name
    method: GET
- name: target_entity_name
  endpoint:
    path: /docs/target_entity_name
    method: GET
- name: target_schema
  endpoint:
    path: /docs/target_schema
    method: GET
- name: copy_options
  endpoint:
    path: /docs/copy_options
    method: GET
- name: data_source
  endpoint:
    path: /docs/data_source
    method: GET
- name: file_format
  endpoint:
    path: /docs/file_format
    method: GET
- name: from_file
  endpoint:
    path: /docs/from_file
    method: GET
- name: from_file_list
  endpoint:
    path: /docs/from_file_list
    method: GET
- name: from_path
  endpoint:
    path: /docs/from_path
    method: GET
- name: manifestrunid
  endpoint:
    path: /docs/manifestrunid
    method: GET
- name: source_credentials
  endpoint:
    path: /docs/source_credentials
    method: GET
- name: source_encryption
  endpoint:
    path: /docs/source_encryption
    method: GET
- name: storage_integration
  endpoint:
    path: /docs/storage_integration
    method: GET
- name: target_entity_attribute_list
  endpoint:
    path: /docs/target_entity_attribute_list
    method: GET
- name: target_entity_logical_name
  endpoint:
    path: /docs/target_entity_logical_name
    method: GET
- name: target_entity_name
  endpoint:
    path: /docs/target_entity_name
    method: GET
- name: target_schema
  endpoint:
    path: /docs/target_schema
    method: GET
- name: manifests
  endpoint:
    path: /manifests
    method: POST
- name: entries
  endpoint:
    path: /entries
    method: GET
- name: manifest
  endpoint:
    path: /manifests
    method: GET
    data_selector: records
    params: {}
- name: manifest
  endpoint:
    path: /manifests
    method: POST
    data_selector: records
- name: entries
  endpoint:
    path: /entries
    method: GET
    data_selector: records
- name: transform_sql_view
  endpoint:
    path: /transform/sql/view
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: load_start_timemillis
  endpoint:
    path: /load_start_timemillis
    method: GET
- name: manifestrunid
  endpoint:
    path: /manifestrunid
    method: GET
- name: manifestrunid
  endpoint:
    path: /manifestrunid
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: sourcerunidattr
  endpoint:
    path: /sourcerunidattr
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: target_entity_logical_name
  endpoint:
    path: /docs/target_entity_logical_name
    method: GET
- name: target_entity_attribute_list
  endpoint:
    path: /target_entity_attribute_list
    method: GET
- name: target_entity_logical_name
  endpoint:
    path: /docs/target_entity_logical_name
    method: GET
    data_selector: records
- name: target_entity_name
  endpoint:
    path: /target_entity_name
    method: GET
    data_selector: records
    params: {}
- name: target_run_id
  endpoint:
    path: /targetrunid
    method: GET
    data_selector: records
    params: {}
- name: timemillis
  endpoint:
    path: /timemillis
    method: GET
- name: targetrunid
  endpoint:
    path: /targetrunid
    method: GET
    data_selector: records
- name: targetrunidattr
  endpoint:
    path: /targetrunidattr
    method: GET
    data_selector: records
- name: manifest
  endpoint:
    path: /manifests
    method: POST
    data_selector: records
- name: entries
  endpoint:
    path: /entries
    method: GET
    data_selector: records
- name: manifest
  endpoint:
    path: /manifests
    method: POST
    data_selector: records
- name: entry
  endpoint:
    path: /entries
    method: GET
    data_selector: records
- name: notify_api
  endpoint:
    path: /notify-api/endpoint
    method: POST
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: roles
  endpoint:
    path: /roles
    method: GET
    data_selector: content
    params: {}
- name: default_pool
  default_size: 128
  description: Tasks that are disabled or have no loads are run in this pool, e.g.
    entity tasks, start tasks and end tasks.
- name: loading_default_pool
  default_size: 2
  description: Load tasks that have actual operations and that are not disabled are
    run in this pool. The pool size limits concurrency against the target database.
- name: Example Rules
  endpoint:
    path: /api/documentation/rules
    method: GET
    data_selector: rules
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: create_manifest
  endpoint:
    path: /create-manifest
    method: POST
- name: get_manifest
  endpoint:
    path: /get-manifest
    method: GET
- name: notify_manifest
  endpoint:
    path: /notify-manifest
    method: POST
- name: search_manifests
  endpoint:
    path: /search-manifests
    method: GET
- name: create_entry
  endpoint:
    path: /create-entry
    method: POST
- name: create_multiple_entries
  endpoint:
    path: /create-multiple-entries
    method: PUT
- name: get_entries
  endpoint:
    path: /get-entries
    method: GET
- name: get_entry
  endpoint:
    path: /get-entry
    method: GET
- name: manifest
  endpoint:
    path: /create-manifest
    method: POST
    data_selector: records
    params: {}
- name: manifest
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/{sourceSystemName}/source-entities/{sourceEntityName}/manifests
    method: POST
    data_selector: ''
    params: {}
- name: manifest
  endpoint:
    path: /manifests
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: manifest
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/{sourceSystemName}/source-entities/{sourceEntityName}/manifests/{id}
    method: GET
    data_selector: id
    params: {}
- name: manifest
  endpoint:
    path: /manifests
    method: POST
- name: manifest_entry
  endpoint:
    path: /manifest_entries
    method: POST
- name: notify_manifest
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/{sourceSystemName}/source-entities/{sourceEntityName}/manifests/{id}/notify
    method: POST
- name: search_manifests
  endpoint:
    path: /search/manifests
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: search_manifests
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/{sourceSystemName}/source-entities/{sourceEntityName}/manifests
    method: GET
    data_selector: records
    params:
      state: '{manifestState}'
- name: manifest
  endpoint:
    path: /manifests
    method: GET
    data_selector: records
    params: {}
- name: manifest_entry
  endpoint:
    path: /manifest_entries
    method: GET
    data_selector: records
    params: {}
- name: manifest
  endpoint:
    path: /manifests
    method: GET
    data_selector: records
- name: entry
  endpoint:
    path: /entries
    method: GET
    data_selector: records
- name: manifest
  endpoint:
    path: /create-manifest
    method: POST
- name: create_entry
  endpoint:
    path: /api/create-entry
    method: POST
- name: manifest
  endpoint:
    path: /manifests
    method: GET
    data_selector: records
- name: create_multiple_entries
  endpoint:
    path: /create-multiple-entries
    method: PUT
- name: manifest
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/{sourceSystemName}/source-entities/{sourceEntityName}/manifests/{id}
    method: GET
    data_selector: id
- name: manifest_entries
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/{sourceSystemName}/source-entities/{sourceEntityName}/manifests/{id}/entries
    method: PUT
- name: manifest
  endpoint:
    path: /manifests
    method: POST
- name: get_entries
  endpoint:
    path: /get-entries
    method: GET
- name: manifest_entries
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/{sourceSystemName}/source-entities/{sourceEntityName}/manifests/{id}/entries
    method: GET
    data_selector: records
    params: {}
- name: notify_manifest
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/{sourceSystemName}/source-entities/{sourceEntityName}/manifests/{id}/notify
    method: POST
    data_selector: response
    params: {}
- name: search_manifests
  endpoint:
    path: /search/manifests
    method: GET
- name: manifests
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/{sourceSystemName}/source-entities/{sourceEntityName}/manifests
    method: GET
    params:
      state: '{manifestState}'
- name: Get entry
  endpoint:
    path: /get-entry
    method: GET
    data_selector: records
- name: manifest_entry
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/{sourceSystemName}/source-entities/{sourceEntityName}/manifests/{id}/entries/{entryId}
    method: GET
    data_selector: id
    params: {}
- name: manifest
  endpoint:
    path: /manifests
    method: POST
    data_selector: manifest_data
    params: {}
- name: entry
  endpoint:
    path: /entries
    method: POST
    data_selector: entry_data
    params: {}
- name: notification_types
  endpoint:
    path: /notification/types
    method: GET
    data_selector: types
    params: {}
- name: notification_channels
  endpoint:
    path: /notification/channels
    method: GET
    data_selector: channels
    params: {}
- name: create_manifest_entry
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/{sourceSystemName}/source-entities/{sourceEntityName}/manifests/{id}/entries
    method: POST
    data_selector: ''
    params: {}
- name: SNS Notification
  endpoint:
    path: /notification
    method: POST
    data_selector: Message
- name: create_multiple_entries
  endpoint:
    path: /create-multiple-entries-put
    method: PUT
- name: manifest_entries
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/{sourceSystemName}/source-entities/{sourceEntityName}/manifests/{id}/entries
    method: PUT
    data_selector: entries
    params: {}
- name: event_notification
  endpoint:
    path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}
    method: POST
    data_selector: data
    params: {}
- name: get_entries
  endpoint:
    path: /get-entries
    method: GET
- name: manifest_entries
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/{sourceSystemName}/source-entities/{sourceEntityName}/manifests/{id}/entries
    method: GET
    data_selector: ''
- name: notification_events
  endpoint:
    path: /v1/projects/<your-project-id>/topics/ade-notification-events-dev
    method: POST
    data_selector: messages
    params: {}
- name: manifest
  endpoint:
    path: /get-entry
    method: GET
- name: manifest_entry
  endpoint:
    path: /notify-api/tenants/local/installations/local/environments/local/source-systems/{sourceSystemName}/source-entities/{sourceEntityName}/manifests/{id}/entries/{entryId}
    method: GET
    data_selector: id
    params: {}
- name: Audit
  endpoint:
    path: /audit
    method: GET
    data_selector: records
    params: {}
- name: DeploymentStart
  endpoint:
    path: /deployment/start
    method: GET
    data_selector: records
    params: {}
- name: DeploymentEnd
  endpoint:
    path: /deployment/end
    method: GET
    data_selector: records
    params: {}
- name: WorkflowStart
  endpoint:
    path: /workflow/start
    method: GET
    data_selector: records
    params: {}
- name: WorkflowSuccess
  endpoint:
    path: /workflow/success
    method: GET
    data_selector: records
    params: {}
- name: WorkflowFailure
  endpoint:
    path: /workflow/failure
    method: GET
    data_selector: records
    params: {}
- name: WorkflowLoadFailure
  endpoint:
    path: /workflow/load/failure
    method: GET
    data_selector: records
    params: {}
- name: SmokeTestFailure
  endpoint:
    path: /smoke/test/failure
    method: GET
    data_selector: records
    params: {}
- name: workflow_failure
  endpoint:
    path: /workflow/failure
    method: GET
    data_selector: records
- name: workflow_load_failure
  endpoint:
    path: /workflow/load/failure
    method: GET
    data_selector: records
- name: smoke_test_failure
  endpoint:
    path: /smoke/test/failure
    method: GET
    data_selector: records
- name: SNS message
  endpoint:
    path: /path/to/sns/message
    method: POST
    data_selector: Message
    params: {}
- name: event_notification
  endpoint:
    path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/events
    method: POST
    data_selector: data
    params: {}
- name: notification_events
  endpoint:
    path: /v1/projects/<your-project-id>/topics/ade-notification-events-dev:publish
    method: POST
    data_selector: messages
    params: {}
- name: Audit
  endpoint:
    path: /audit
    method: GET
    data_selector: records
    params: {}
- name: DeploymentStart
  endpoint:
    path: /deployment/start
    method: GET
    data_selector: records
    params: {}
- name: DeploymentEnd
  endpoint:
    path: /deployment/end
    method: GET
    data_selector: records
    params: {}
- name: WorkflowStart
  endpoint:
    path: /workflow/start
    method: GET
    data_selector: records
    params: {}
- name: WorkflowSuccess
  endpoint:
    path: /workflow/success
    method: GET
    data_selector: records
    params: {}
- name: WorkflowFailure
  endpoint:
    path: /workflow/failure
    method: GET
    data_selector: records
    params: {}
- name: WorkflowLoadFailure
  endpoint:
    path: /workflow/load/failure
    method: GET
    data_selector: records
    params: {}
- name: SmokeTestFailure
  endpoint:
    path: /smoke/test/failure
    method: GET
    data_selector: records
    params: {}
- name: WorkflowFailure
  endpoint:
    path: /workflow/failure
    method: GET
    data_selector: records
- name: WorkflowLoadFailure
  endpoint:
    path: /workflow/load/failure
    method: GET
    data_selector: records
- name: SmokeTestFailure
  endpoint:
    path: /smoke/test/failure
    method: GET
    data_selector: records
notes:
- Inform the Agile Data Engine support team about the public IP addresses of the services
  that will be calling the Notify API. Requests are allowed from listed IPs only.
- It is recommended to first test the notification process manually in the user interface.
  Once the process is tested and working, it is easier to adapt it to an external
  service that will run the API requests.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Access to ADE services is limited to allowlisted IP addresses.
- Multi-factor authentication (MFA) is required for the user setup to be complete.
- Access to Agile Data Engine APIs requires a valid API key and a connection from
  an allowed IP address.
- Access granted with the ade-adminui-tenantAdmin role
- During the public preview, all features might not initially be available
- Some configuration packages need to be committed and deployed into Runtime environments
- Some configuration packages can be changed with Designer user interface
- Variables have to be referenced in grantee names with ${variable_name} which differs
  from the standard notation <variable_name>.
- Schedule names are transformed to uppercase, only characters from A to Z, numbers
  and underscores are allowed [A-Z0-9_].
- All other consecutive non-allowed characters will be substituted to one underscore.
- Uses FreeMarker Template Language for customizable templates.
- Trying to delete a source system that is still used in non-deleted entities will
  result in an error.
- After the support team has configured your account for Microsoft Entra ID authentication,
  users can access Agile Data Engine with their Microsoft Entra ID accounts.
- At this point any user in Entra ID can log in to ADE. Restricting access to certain
  group of users that can access ADE should be done within Entra ID.
- Role-based access control requires User Management v2.
- Deployment authorization feature must be enabled for your tenant before deployment
  roles can be used.
- Using a service account key is an alternative to WIF, but it is less secure and
  generally not recommended for production environments.
- Store and share private keys and key passwords securely.
- Agile Data Engine uses a tenant-specific outbound IP address.
- Hubs are usually loaded from multiple different source entities or even from multiple
  attributes in a single source entity. Each source can be added as a separate incoming
  load for the hub.
- The most common pattern is to load hubs from all sources where the business key
  is present to ensure referential integrity. However, sometimes this is not practical
  e.g. due to performance issues.
- Data Vault uses hash keys by default and all key attributes are cast to string before
  hashing. If your business key contains date, time or other attributes which can
  be represented in multiple different string formats depending e.g. on target database
  default settings, it is advisable to cast these types of attributes explicitly to
  a given string format.
- The primary key of a link table is the dv_id. Map all the source attributes used
  in the hub referencing keys into the dv_id.
- Create a status satellite to track link activity and change history.
- If you want to change the default configuration of any entity type, including links
  and other Data Vault entities, it can be done using the CONFIG_ENTITY_DEFAULTS configuration
  package.
- Similarly, transformations can be edited with CONFIG_LOAD_TRANSFORMATIONS.
- Are always dependent on one hub or one link
- Store the history
- Are source system specific
- Can be split into multiple satellites according to the rate of change or domain
- Agile Data Engine assumes that source data is received as delta extracts (OPT_DELTA_EXTRACT
  = true).
- A hub status satellite can only be loaded with a full extract using the default
  status satellite logic.
- Best practice is to have the source name as a metadata attribute on staging entities
  and to map it to Data Vault entities without any transformations.
- Always look for the most simple and effective solution.
- Point-in-Time (PIT) is mentioned in relation to Data Warehouse Modeling.
- PIT table provides a snapshot of the related records at a specific point in time.
- Transactional links do not store change history. Transactions or events stored to
  a transactional link should not receive changes.
- The primary key (dv_id) is hashed from a unique business identifier for the transaction
  or event.
- Transactional links contain references to hubs like a regular link but can also
  contain descriptive and measurable attributes; they are comparable to fact tables
  and are commonly used as the basis for a fact.
- A transactional link has performance benefits over a hub + satellite + link combination
  especially when the data volume is high as fewer joins are required when loading
  data from the Data Vault to the publish zone.
- As the source system data is stored in the data warehouse zone implemented e.g.
  with the persistent staging or Data Vault modeling methodologies, you have the choice
  to create facts with physical type TABLE, VIEW or MATERIALIZED_VIEW.
- As the source system data is stored in the data warehouse zone implemented e.g.
  with the persistent staging or Data Vault modeling methodologies, you have the choice
  to create dimensions with physical type TABLE, VIEW or MATERIALIZED_VIEW.
- If you are using hash keys in the data warehouse zone, the easiest option is to
  use them in the publish zone as well.
- Consider if change history is needed in the dimension.
- Dimensions often combine data from multiple sources and it can be difficult to define
  an incremental load logic.
- This template has been tested in Google BigQuery, Databricks SQL and Snowflake.
- Using CURRENT_TIMESTAMP as the VALID_FROM timestamp.
- Staging tables have metadata attributes stg_source_system, stg_source_entity and
  stg_file_name.
- Good practice to define needed metadata attributes in staging tables for mapping
  to further data warehouse zones.
- Customizing default attributes and transformations is supported.
- An external stage is required for transforming data during a load.
- The USE_VECTORIZED_SCANNER file format option can improve performance when reading
  Parquet.
- USE_VECTORIZED_SCANNER file format option can improve performance when reading Parquet.
- Dynamic tables are efficient in a multitude of use cases, however, Data Vault is
  currently not one of them.
- Dynamic tables are automatically updated every 10 minutes and remain up to date.
- To define a Hybrid Table in Snowflake it requires the entity to be physical type
  of TABLE and a primary key constraint to be set and also the physical option STORAGE.COLUMN_STORE
  to be set to false.
- 'When the Hybrid Table is defined these features won’t be applied: Clustering key,
  Transient table, Change tracking, Time travel retention time in days.'
- If you want to use this function, be sure to place bq_fake.js in a GCS bucket.
- Uses FTL templates for loading sensitive data
- Sensitive data is stored in the sdv schema.
- Separation of sensitive and non-sensitive attributes helps in data governance.
- The link is assigned to the rdv schema since it does not contain any sensitive attributes.
- Note that since streaming tables are not natively supported as a physical entity
  type in ADE yet, their lifecycle must be managed in Databricks.
- Environment variables should be used if stage objects vary between different environments.
- You can use physical type METADATA_ONLY when defining separate entities for e.g.
  collecting unload steps into one place.
- Packages should be kept data warehouse layer specific
- Having a large number of entities in a single package will make parallel development
  more difficult
- Corresponding source and stage entities should be kept in the same source system
  specific package
- Data Vault entities should be divided into logical domain specific packages
- A common approach is to split publish packages by use case
- 'Required IAM Role for ADE Service Account: roles/dataplex.dataScanEditor'
- 'Required IAM Role for ADE Service Account: roles/dlp.jobsEditor'
- Packages should be kept data warehouse layer specific.
- Having a large number of entities in a single package will make parallel development
  more difficult.
- Corresponding source and stage entities should be kept in the same source system
  specific package.
- Data Vault entities should be divided into logical domain specific packages.
- A common approach is to split publish packages by use case.
- The table’s name is STG_TAXI_ZONES_CSV created on the database schema staging with
  a comment / description NY taxi zones in CSV format.
- Table name is STG_TAXI_ZONES_CSV created on the database schema staging with a comment
  'NY taxi zones in CSV format'.
- Primary key is locationid.
- All requests must be authenticated with an API key and secret.
- TenantName, installationName, and environmentName are always local.
- TenantName, installationName and environmentName are always local.
- SourceSystemName and sourceEntityName have to match what you have set for your source
  entity in chapter 2.2.
- Id is the manifest ID which is received in the response of Create manifest.
- Notifier application is created to customer cloud and it is not part of Agile Data
  Engine -product.
- Test functionality with example file and check ADE Notify API Swagger.
- It is recommended to use partitioning to keep data bucket in order.
- Files are freely named in source data Storage Account
- Datasource config -file is used to map cloud storage objects to ADE source entities
- Files are freely named in source data Cloud Storage
- Files are freely named in source data S3
- Make sure to connect to the correct environment when making Metadata Interface queries.
- Ensure to connect to the correct environment when making Metadata Interface queries.
- Available metadata depends on environment
- Make sure to connect to the correct environment when making Metadata Interface queries
- Run ID Logic currently only works with tables, not with e.g. views or materialized
  views.
- External API is only available in SaaS Enterprise and higher editions, i.e. run
  IDs cannot be deleted in SaaS Standard edition.
- 'Run ID Logic enabled with: OPT_USE_RUN_IDS = true'
- 'Load id: 026c7f09-ce19-467c-9406-071547e1b91c'
- 'Run id to be deleted: 1657951682127'
- 'Run id: 1658205691470'
- Run ID Logic can be used with smoke tests to limit testing to new records only.
- Cloned package is named like the original one but with a suffix '_CLONE_TIMESTAMP'
  e.g. DV_TAXI_LOCATION_CLONE_20210407102815
- With deep clone, entity names, load names and entity mappings get a similar suffix.
- Package Dependencies affects how Packages can be deployed to different Runtime environments
  in Deployment Management.
- Be careful with Package design in order to prevent Package circular dependencies.
  Those can happen with either foreign keys or with Entity Mapping. Foreign keys and
  Entity Mapping can be done from one Package to another Package in one direction
  only.
- Entity is a core metadata object in Agile Data Engine.
- Circular dependencies can happen with either foreign keys or with Entity Mapping.
- Foreign keys and Entity Mapping can be done from one Package to another Package
  in one direction only.
- The clone is created into the same package as the original entity.
- The new entity is named like the original one but with a default suffix "_CLONE_TIMESTAMP"
  e.g. F_TRIP_CLONE_20210305091259.
- 'Optionally, you can provide a custom prefix. E.g. with prefix RETURN: F_TRIP_RETURN.'
- With deep clone, load names get the same suffix.
- Header row is mandatory
- No extra whitespace between columns
- 'Source system is defined with the following attributes: dv_source or entity_dv_source
  (CSV), dvSource (JSON)'
- The import will fail if there are any entities using source systems that do not
  exist
- The import will fail if there are any non-deleted entities (e.g. a restore attempt)
  using source systems that are deleted
- Collation change will force entity recreate.
- Access to unmasked data needed in data loads
- 'Data manipulation logic discontinuity: Databricks SQL does not support cloning
  a TABLE having data masking defined.'
- MASKING POLICY is set on attribute level in attribute properties.
- Data manipulation logic discontinuity
- Check Export SQL/Entity SQL after defining database tags to see generated DDL.
- Database tags and their possible values have to be defined in CONFIG_ENTITY_DEFAULTS
  before they can be used here.
- Tags are required to be defined on target database. Defining their allowed values
  are optional.
- Tags are schema specific.
- Tags are required to be defined on target database.
- Defining their allowed values are optional.
- Distribution style ALL can be used with tables in Amazon Redshift and Azure Synapse
  SQL.
- Distribution style ALL can also be used with materialized views in Amazon Redshift.
- Distribution style EVEN can be used with tables and materialized views in Amazon
  Redshift and Azure Synapse SQL.
- Distribution style KEY can be used with tables and materialized views in Redshift
  and Synapse SQL.
- Check Export SQL/Entity SQL after defining a distribution style to see generated
  DDL.
- DISTRIBUTION_KEY can be used with tables and materialized views in Amazon Redshift,
  Azure Synapse SQL, Google BigQuery and Databricks SQL.
- In AMAZON REDSHIFT & AZURE SYNAPSE SQL, use with key distributed entities.
- In Google BigQuery DISTRIBUTION_KEY is to be used with TIMESTAMP and DATE field
  based partitioning generating day partitions.
- In Databricks SQL DISTRIBUTION_KEY is to be used with subset of columns.
- INTERLEAVED_SORT_KEY can be used with tables and materialized views in Amazon Redshift.
- Check Export SQL/Entity SQL after defining a INTERLEAVED_SORT_KEY to see generated
  DDL.
- PARTITION_KEY can be used with tables in Azure SQL Database and requires partition
  key and partition scheme to be manually inserted to the Azure SQL Database beforehand.
- PARTITION_KEY can be used with tables and materialized views in Google BigQuery
  and requires the partition scheme to be defined for the entity.
- PARTITION_KEY can be used with tables and materialized views in Databricks and requires
  the partition scheme to be defined for the entity.
- PARTITION_KEY can be used with tables in Azure Synapse SQL and requires the partition
  scheme to be defined for the entity.
- PARTITION_KEY can be used with tables and materialized views in Google BigQuery
  and requires the partition scheme to be defined for the entity. Use DISTRIBUTION_KEY
  in case entity is to be partitioned over TIMESTAMP or DATE column.
- PARTITION_KEY can be used with tables and materialized views in Databricks and requires
  the partition scheme to be defined for the entity. Use DISTRIBUTION_KEY for simple
  partitioning cases.
- Check Export SQL/Entity SQL after defining a PARTITION_KEY to see generated DDL.
- Agile Data Engine does not create primary keys in Azure Synapse SQL.
- Azure Synapse SQL only supports primary keys with NONCLUSTERED and NOT ENFORCED
  options, and use of primary keys may cause queries to return inaccurate results
  when there are duplicate entries.
- Check Export SQL/Entity SQL after defining a SECONDARY_INDEX to see generated DDL.
- SORT_KEY can be used with tables and materialized views in Snowflake, Amazon Redshift
  and Azure SQL Database. Azure SQL Database supports clustered indexes also for views.
- SORT_KEY can be used with tables in Azure Synapse SQL and Databricks SQL.
- Agile Data Engine does not create unique keys in Azure Synapse SQL.
- Azure Synapse SQL only supports unique keys with the NOT ENFORCED option, and use
  of unique keys may cause queries to return inaccurate results when there are duplicate
  entries.
- Check Export SQL/Entity SQL after defining permissions to see generated DDL.
- SELECT permission is mapped to roles/bigquery.dataViewer
- INSERT permission is mapped to roles/bigquery.dataEditor
- ALL permission is mapped to roles/bigquery.dataOwner
- Row level permissions are used to manage data access policies on entities in the
  target database.
- Row-level permissions can be given, modified and deleted for an entity under the
  Permissions-tab in Row level permissions section.
- In case the entity does not have matching attributes with the row level permission,
  an error will be given.
- One can verify the behaviour by clicking the Permissions code preview button.
- Some objects may return nulls in deeply nested fields
- Google BigQuery pre-mapped permissions are mapped to the predefined IAM roles defined
  in Google BigQuery predefined roles and permissions.
- Row Access Policy is needed to be generated on target database.
- Data columns are required to be defined on datatype level in the Row Access Policy
  definition.
- Role being assigned for Agile Data Engine needs to have the apply permission for
  the created row access policies.
- Row level permissions can be given, modified and deleted for an entity under the
  Permissions-tab in Row level permissions section.
- Row level permissions available will be browsable under the row level permissions
  section.
- If row level permission is set to require grantees, they will be requested to be
  chosen during the row level permission addition.
- Refer to target database specific documentation regarding its capabilities with
  materialized views.
- Functions are required to be deterministic.
- Aggregation and GROUP BY are allowed.
- Window functions are not allowed.
- Prepare a warehouse in Snowflake and set it for an entity with physical option DEPLOYMENT.COMPUTE_CLUSTER.
- STORAGE.AUTO_CLUSTERING_SUSPEND assumes that a SORT_KEY (clustering key) has been
  defined for the entity.
- Entity DDLs will be executed in Snowflake with the defined warehouse.
- Change tracking can be enabled for tables.
- When change tracking is enabled, ADE prevents entity recreation during deployment
  to protect the change history.
- STORAGE.AUTO_CLUSTERING_SUSPEND assumes that a SORT_KEY has been defined for the
  entity.
- Columnstore can be enabled for tables in Azure SQL Database and Snowflake.
- With Azure Synapse SQL, leaving this physical option unset results in a columnstore
  table which is the default. To create a heap table, explicitly set STORAGE.COLUMN_STORE
  to false.
- With Snowflake, setting this explicitly to false enables will enable creation of
  HYBRID TABLE, but also primary key definition is required to be set.
- To deploy changes requiring entity recreation, disable change tracking first.
- Can be used with tables and requires partition key and partition scheme to be manually
  inserted to the target database beforehand.
- Search optimization is available in Snowflake Enterprise Edition (or higher).
- Search optimization can be enabled for tables.
- STORAGE.SECURE_VIEW can be enabled for views.
- STORAGE.SORTKEY_RECLUSTER_IN_ENTITY_RECREATE assumes that SORT_KEY or INTERLEAVED_SORT_KEY
  have been defined for the entity.
- Table statistics can be created for tables and materialized views in supported target
  databases.
- Check for known limitations in the table statistics update process.
- Time travel retention can be configured with STORAGE.TIME_TRAVEL_RETENTION_IN_DAYS
  for tables.
- Time travel retention can be set in Snowflake on multiple levels such as account
  level and schema level, objects can inherit higher-level settings.
- For transient tables time travel retention period can be set to 0 or 1 days.
- More than 1 day time travel retention requires Snowflake Enterprise Edition or higher.
- STORAGE.TIME_TRAVEL_RETENTION_IN_DAYS
- STORAGE.TRANSIENT_TABLE affects Snowflake fail-safe and time travel features, please
  refer to the Snowflake documentation.
- Custom schedules are not recommended because they cannot be edited in bulk.
- Use CONFIG_LOAD_SCHEDULES instead for defining schedules.
- Use CONFIG_LOAD_SCHEDULES instead.
- The import will fail if there are any mappings to attributes which do not exist
  in the target entity.
- Only HTTPS is allowed.
- Retries are configurable.
- Default timeout is 300 seconds.
- Retries are configured for certain HTTP response codes.
- Timeout in seconds. Default is 300 seconds. 0 will disable timeout (not recommended)
- Requires setup of connected app in Agile Data Engine
- OPT_DATA_FILE_LOCATION can be used with file loads when loading single files. With
  manifest loading, OPT_DATA_FILE_LOCATION is not required as file locations will
  be given in the manifest.
- When a file location is given with OPT_DATA_FILE_LOCATION, notified files will be
  loaded from the given location instead of loading from Agile Data Engine default
  file load bucket/container.
- OPT_DELTA_EXTRACT can be used with status satellite loads that have a single entity
  mapping and no OVERRIDE load steps. OPT_DELTA_EXTRACT will not have an effect if
  the load is overridden with an OVERRIDE load step.
- OPT_FILE_FORMAT_OPTIONS can be used with file loads.
- OPT_FILE_FORMAT_OPTIONS is also supported in OVERRIDE_FILE_LOAD load steps where
  it will be resolved in place of the <file_format> variable.
- OPT_DATA_FILE_LOCATION can be used with file loads when loading single files.
- With manifest loading, OPT_DATA_FILE_LOCATION is not required as file locations
  will be given in the manifest.
- 'OPT_HISTORIZED_BY_DATAHASH_AS_INSERT can be used in table loads that have a single
  entity mapping (i.e. one source entity) and attributes with following attribute
  types defined: DV_LOAD_TIME, DV_DATAHASH, either DV_HASHKEY or DV_REFERENCING_HASHKEY.'
- 'Hint: Can be used also with Run ID logic.'
- OPT_DELTA_EXTRACT can be used with status satellite loads that have a single entity
  mapping and no OVERRIDE load steps.
- OPT_DELTA_EXTRACT will not have an effect if the load is overridden with an OVERRIDE
  load step.
- Azure SQL Database does not allow usage of load option OPT_ORDER_BY with MERGE
- 'OPT_INSERT_UPDATE_BY_DATAHASH_AS_MERGE can be used in table loads that have a single
  entity mapping (i.e. one source entity) and attributes with following attribute
  types defined: DV_LOAD_TIME, DV_DATAHASH, either DV_HASHKEY or DV_REFERENCING_HASHKEY,
  DV_UPDATE_TIME (optional)'
- 'OPT_INSERT_UPDATE_BY_DATAHASH_AS_OVERWRITE can be used in table loads that have
  a single entity mapping (i.e. one source entity) and attributes with following attribute
  types defined: DV_LOAD_TIME, DV_DATAHASH, either DV_HASHKEY or DV_REFERENCING_HASHKEY,
  DV_UPDATE_TIME (optional).'
- Can be used also with Run ID logic.
- 'OPT_INSERT_UPDATE_BY_DATAHASH_AS_SWAP can be used in table loads that have a single
  entity mapping (i.e. one source entity) and attributes with following attribute
  types defined: DV_LOAD_TIME, DV_DATAHASH, either DV_HASHKEY or DV_REFERENCING_HASHKEY,
  DV_UPDATE_TIME (optional)'
- Azure Synapse SQL usage requires that the target table is HASH distributed.
- Azure SQL Database does not allow usage of load option OPT_ORDER_BY with MERGE.
- 'OPT_INSERT_UPDATE_BY_DATAHASH_AS_MERGE can be used in table loads that have a single
  entity mapping (i.e. one source entity) and attributes with following attribute
  types defined: DV_LOAD_TIME, DV_DATAHASH, either DV_HASHKEY or DV_REFERENCING_HASHKEY,
  DV_UPDATE_TIME (optional).'
- 'OPT_INSERT_UPDATE_BY_DATAHASH_AS_OVERWRITE can be used in table loads that have
  a single entity mapping (i.e. one source entity) and attributes with following attribute
  types defined: DV_LOAD_TIME, DV_DATAHASH, either DV_HASHKEY or DV_REFERENCING_HASHKEY,
  DV_UPDATE_TIME (optional)'
- 'OPT_INSERT_UPDATE_BY_ID_AS_OVERWRITE can be used in table loads that have a single
  entity mapping (i.e. one source entity) and attributes with following attribute
  types defined: DV_LOAD_TIME, either DV_HASHKEY or DV_REFERENCING_HASHKEY, DV_UPDATE_TIME
  (optional)'
- 'OPT_INSERT_UPDATE_BY_ID_AS_SWAP can be used in table loads that have a single entity
  mapping (i.e. one source entity) and attributes with following attribute types defined:
  DV_LOAD_TIME, either DV_HASHKEY or DV_REFERENCING_HASHKEY, DV_UPDATE_TIME (optional)'
- 'OPT_INSERT_UPDATE_DELETE_BY_DATAHASH_AS_MERGE can be used in table loads that have
  a single entity mapping (i.e. one source entity) and attributes with following attribute
  types defined: DV_LOAD_TIME, DV_DATAHASH, either DV_HASHKEY or DV_REFERENCING_HASHKEY,
  DV_UPDATE_TIME (optional).'
- 'OPT_INSERT_UPDATE_BY_ID_AS_SWAP can be used in table loads that have a single entity
  mapping (i.e. one source entity) and attributes with following attribute types defined:
  DV_LOAD_TIME, either DV_HASHKEY or DV_REFERENCING_HASHKEY, DV_UPDATE_TIME (optional).'
- 'OPT_INSERT_UPDATE_DELETE_BY_DATAHASH_AS_OVERWRITE can be used in table loads that
  have a single entity mapping (i.e. one source entity) and attributes with following
  attribute types defined: DV_LOAD_TIME, DV_DATAHASH, either DV_HASHKEY or DV_REFERENCING_HASHKEY,
  DV_UPDATE_TIME (optional)'
- OPT_INSERT_UPDATE_DELETE_BY_DATAHASH_AS_MERGE can be used in table loads that have
  a single entity mapping.
- 'OPT_INSERT_UPDATE_BY_DELETE_DATAHASH_AS_SWAP can be used in table loads that have
  a single entity mapping (i.e. one source entity) and attributes with following attribute
  types defined: DV_LOAD_TIME, DV_DATAHASH, either DV_HASHKEY or DV_REFERENCING_HASHKEY,
  DV_UPDATE_TIME (optional)'
- 'OPT_INSERT_UPDATE_DELETE_BY_ID_AS_MERGE can be used in table loads that have a
  single entity mapping (i.e. one source entity) and attributes with following attribute
  types defined: DV_LOAD_TIME, either DV_HASHKEY or DV_REFERENCING_HASHKEY, DV_UPDATE_TIME
  (optional).'
- 'OPT_INSERT_UPDATE_DELETE_BY_ID_AS_OVERWRITE can be used in table loads that have
  a single entity mapping (i.e. one source entity) and attributes with following attribute
  types defined: DV_LOAD_TIME, either DV_HASHKEY or DV_REFERENCING_HASHKEY, DV_UPDATE_TIME
  (optional).'
- 'OPT_INSERT_UPDATE_DELETE_BY_ID_AS_SWAP can be used in table loads that have a single
  entity mapping (i.e. one source entity) and attributes with following attribute
  types defined: DV_LOAD_TIME, either DV_HASHKEY or DV_REFERENCING_HASHKEY, DV_UPDATE_TIME
  (optional)'
- OPT_LOAD_POOL can be used with all loads.
- Load pool can also be selected on schedule/DAG level with CONFIG_LOAD_SCHEDULES.
  OPT_LOAD_POOL overrides a selection done in CONFIG_LOAD_SCHEDULES.
- OPT_LOAD_WITH_BQ_API can be used in file loads.
- ADE uses Google Cloud client libraries to utilize batch loading API. Usage is similar
  to CLI-command `bq load`.
- OPT_LOCK_TIMEOUT_IN_SECS is a configuration option.
- OPT_LOCK_TIMEOUT_IN_SECS can be used with all table loads.
- OPT_LOCK_WAIT_TIME_IN_SECS can be used with all table loads.
- OPT_NOT_EXISTS_FROM can be used in loads that have a single entity mapping and no
  OVERRIDE load steps.
- OPT_NOT_EXISTS_FROM will not have an effect if the load is overridden with an OVERRIDE
  load step.
- OPT_NOT_EXISTS_WHERE can be used in loads that have a single entity mapping and
  no OVERRIDE load steps.
- Pay attention to the table aliases when utilising this option.
- OPT_LOCK_WAIT_TIME_IN_SECS
- OPT_NUM_RUN_IDS_PER_TRANSACTION is a configuration option
- OPT_NUM_RUN_IDS_PER_TRANSACTION can be used in table loads that have a single entity
  mapping (i.e. one source entity).
- OPT_NUM_RUN_IDS_PER_TRANSACTION can also be used to start tracking run ids from
  any load by setting value -1.
- OPT_ORDER_BY can be used with loads that have a single entity mapping and no OVERRIDE
  load steps.
- Does not work with Synapse Multi-Active Satellite as the Datahash logic has been
  implemented with subquery.
- 'OPT_SCAN_ONLY_THE_LATEST_BY_KEY can be used in table loads that have a single entity
  mapping (i.e. one source entity) and attributes with following technical attribute
  types defined: Target entity has either DV_HASHKEY or DV_REFERENCING_HASHKEY defined,
  Source entity either DV_LOAD_TIME or SDT_STAGE_CREATE_TIME (for sorting) or custom
  technical attribute type defined by OPT_SCAN_ONLY_THE_LATEST_WITH_SOURCE_ATTRIBUTE_TYPE
  load option.'
- OPT_SCAN_ONLY_THE_LATEST_WITH_SOURCE_ATTRIBUTE_TYPE is designed to be used only
  along with the option OPT_SCAN_ONLY_THE_LATEST_BY_KEY and only in cases where the
  default source entity field for sorting the data can not be used or is not available.
- OPT_SF_FILE_COPY_OPTIONS can be used with file loads when the target database is
  Snowflake.
- OPT_SF_FILE_COPY_OPTIONS is also supported in OVERRIDE_FILE_LOAD load steps where
  it will be resolved in place of the <copy_options> variable.
- OPT_SCAN_ONLY_THE_LATEST_BY_KEY can be used in table loads that have a single entity
  mapping (i.e. one source entity) and attributes with following technical attribute
  types defined
- OPT_SKIP_DISTINCT_ONLY can be used in loads that have a single entity mapping and
  no OVERRIDE load steps. OPT_SKIP_DISTINCT_ONLY will not have an effect if the load
  is overridden with an OVERRIDE load step.
- OPT_SKIP_DUPLICATE_PREVENTION can be used in loads that have a single entity mapping
  and no OVERRIDE load steps.
- OPT_SKIP_DUPLICATE_PREVENTION will not have an effect if the load is overridden
  with an OVERRIDE load step.
- OPT_STORAGE_INTEGRATION can be used in file loads.
- OPT_STORAGE_INTEGRATION is also supported in OVERRIDE_FILE_LOAD load steps where
  it will be resolved in place of the <storage_integration> (or <data_source>) variable.
- OPT_SKIP_DISTINCT_ONLY can be used in loads that have a single entity mapping and
  no OVERRIDE load steps.
- OPT_SKIP_DISTINCT_ONLY will not have an effect if the load is overridden with an
  OVERRIDE load step.
- OPT_USE_RUN_IDS can be used in table loads that have a single entity mapping (i.e.
  one source entity).
- OPT_USE_RUN_IDS_INCREMENTALLY is useful in cases where a lot of run ids are produced
  such as near real-time cases with lots of files and file specific run ids.
- 'OPT_USE_TIMESLOT_LOGIC can be used in table loads that have a single entity mapping
  (i.e. one source entity) and attributes with following attribute types defined:
  TIMESLOT, DV_RUN_ID, either DV_HASHKEY or DV_REFERENCING_HASHKEY.'
- OPT_WHERE can be used in loads that have a single entity mapping (i.e. one source
  entity) and no OVERRIDE load steps.
- OPT_WHERE will not have an effect if the load is overridden with an OVERRIDE load
  step.
- For Google BigQuery Multi-Active Satellite this option requires usage of table alias
  as the hash list function is implemented with a join.
- GATEKEEPER steps can be used alone or together with other load steps.
- GATEKEEPER steps can be saved as part of a load template.
- GATEKEEPER steps can use variables inside the SQL code.
- An OVERRIDE step can be used alone or together with other load steps.
- OVERRIDE steps can be saved as part of a load template.
- OVERRIDE steps can use variables inside the SQL code.
- When calling SQL stored procedures or having alike procedures or multi-statement
  SQL load steps with Azure SQL Database and Azure Synapse SQL, there is a known issue
  and a remedy to include SET NOCOUNT ON; as the first statement in the procedure
  or in the sequence of multiple of SQL statements. Without it the execution of the
  statements can fail silently ie. without an error shown.
- POST steps are used mainly with automatically generated loads but they can also
  be used with other load step types.
- POST steps can be saved as part of a load template.
- POST steps can use variables inside the SQL code.
- PRE steps are used mainly with automatically generated loads but they can also be
  used with other load step types.
- PRE steps can be saved as part of a load template.
- PRE steps can use variables inside the SQL code.
- Requires setup of connected app in api
- A SMOKE_BLACK test fails if the test SQL returns any rows.
- SMOKE_BLACK steps can be used alone or together with other load steps.
- SMOKE_BLACK steps can be saved as part of a load template.
- SMOKE_BLACK steps can use variables inside the SQL code.
- A SMOKE_GREY test fails if the test SQL returns any rows.
- SMOKE_GREY steps can be used alone or together with other load steps.
- SMOKE_GREY steps can be saved as part of a load template.
- SMOKE_GREY steps can use variables inside the SQL code.
- If environment variables are used in loads and changes are made to the environment
  variables, the loads must also be redeployed for the changes to take effect.
- Supported in file loads in Snowflake.
- Supported in all loads.
- Supported in file loads
- Define a storage integration/external data source with OPT_STORAGE_INTEGRATION
- Can be used with physical option STORAGE.PARTITION_SCHEME to reference the partition
  key name.
- Can be used with physical option STORAGE.PARTITION_SCHEME to references the partition
  key name.
- Environment_name value is environment specific.
- 'Environment_name value is transformed: ''-'' and ''.'' are replaced with ''_''
  All characters are transformed to uppercase.'
- Supported in file loads.
- File format options are defined when queuing source files and they can be overridden
  with OPT_FILE_FORMAT_OPTIONS.
- File format options are defined when queuing source files and they can be overridden
- '[from_path] can be used with <from_file_list>. When multiple files are queued with
  a manifest, <from_path> gives the lowest common part of the file paths and <from_file_list>
  gives the unique part of the file paths. In single file loads <from_file_list> is
  resolved as the single file name.'
- from_path can be used with from_file_list. When multiple files are queued with a
  manifest, from_path gives the lowest common part of the file paths and from_file_list
  gives the unique part of the file paths. In single file loads from_file_list is
  resolved as the single file name.
- Use the Load Start Time in milliseconds for tracking initial load time.
- The resolved timestamp is the same for all load steps of a load execution.
- load_start_timemillis can be used to identify rows inserted within the current load
  execution.
- Supported in loads when the Run ID Logic is enabled.
- Supported in file loads when the Run ID Logic is enabled.
- The Run ID from the manifest level will be used within the file load, when Run ID
  is not notified on manifest entry level ie. on file level.
- Package version is a running integer for package revisions e.g 1000001, 1000002...
- Package version is Runtime environment specific, i.e. the value depends on which
  package version has been deployed into the Runtime environment in which the load
  is executed.
- Variable value depends on the current context. For example, loads can be executed
  in several different schedules depending on the entity mappings and schedule configurations.
- This variable can be used when loading from the Agile Data Engine default file load
  bucket/container and special encryption settings have been set to that bucket/container.
  Encryption settings have to be defined in the Agile Data Engine installation.
- Supported in file loads, transform_persist and transform_sql_view.
- If used in a load with multiple entity mappings, source_entity_schema and source_entity_name
  refer to the first entity mapping (position = 1).
- Works with multiple entity mappings, source_entity_schema_{N} and source_entity_name_{N},
  where N refer to the entity mapping position.
- Works with multiple entity mappings, number at the end of the variable indicates
  the numeric value of the mapped entity position ( >=1).
- Define storage integration/external data source with OPT_STORAGE_INTEGRATION
- Target database name is Runtime environment specific, i.e. the value depends on
  the Runtime environment in which the load is executed.
- Supported only for 1-1 mappings.
- For Azure databases will be resolving the position to support column list syntax
  defined in https://learn.microsoft.com/en-us/sql/t-sql/statements/copy-into-transact-sql.
- For Databricks source column reference will be done through position in form _c<order>
  (indexing beginning from zero).
- For Snowflake source column reference will be done through position in form $<order>
  (indexing beginning from one).
- Entity logical name does not contain prefixes or suffixes (e.g. 'H_' for HUBS, 'F_'
  for FACTS...).
- Entity logical name does not contain prefixes or suffixes (e.g. "H_" for HUBS, "F_"
  for FACTS...).
- Requires setup of connected app in API
- OPTIMIZED_ENTITY_ORIENTED or OPTIMIZED_LOAD_ORIENTED is recommended as the default
  setting.
- Schedule level DAG generation mode settings override environment level settings.
- If custom pools are defined for schedules or loads, those pools also have to be
  created in Workflow Orchestration in different Runtime environments and pool sizes
  have to be configured.
- Configuring load pool sizes to exceed the maximum degree of parallelism of the Runtime
  environment does not provide additional processing capacity. Instead, it may lead
  to task throttling and could potentially cause performance issues or execution delays.
- Keep system DAGs (other than UTIL_CLEAN_ENTITY_LOCKS) enabled in all Runtime environments
  to ensure that Workflow Orchestration is running optimally.
- Workflow(s) need to be set active in Workflow Orchestration with the toggle switch
  next to the workflow name. Paused workflows will not be scheduled.
- Insights requires User Management v2.
- Most Insights content is currently refreshed once per day.
- Public Preview requires enabling for tenant before access.
- Role assignments are managed in the Admin UI.
- If custom pools are defined for schedules or loads, those pools also have to be
  created in Workflow Orchestration in different Runtime environments and pool sizes
  have to be configured. Otherwise the schedules and loads will not be run at all.
- Currently only attribute naming rules are supported.
- All entries added to a manifest should follow the same definition. I.e. you cannot,
  for example, load manifests containing both CSV and JSON files or load multiple
  CSV files with different delimiters.
- A manifest is created in the OPEN state and can be modified by using the PUT method
  until it is notified.
- When notify manifest is called, manifest state is changed to NOTIFIED. After this
  manifest cannot be modified anymore.
- If notify manifest fails, check get manifest that everything is populated correctly.
  Also make sure that the manifest has entries with get entries.
- Ensure correct permissions are set for accessing Notify API
- If there are a lot of entries and all entries can be added in one request, use create
  multiple entries (PUT) since it is much faster than calling POST in a loop.
- PUT overrides any existing entries in a manifest.
- API supports creating and managing manifests.
- If notify manifest fails, check get manifest that everything is populated correctly.
- API keys are managed in the Admin UI
- All requests have to be authenticated
- Ensure OAuth2 setup is complete for access.
- Rate limits may apply on API calls.
- FIFO if you want strictly-preserved message ordering and exactly-once message delivery.
- Standard if you prefer best-effort message ordering and at-least-once message delivery.
- Subject is built from tenant, installation and environment fields to indicate the
  origin of the event.
- eventType is combined from data fields notificationSource and contentType separating
  them with a dot (.) and replacing any slashes (/) with dots (.)
- API keys are managed in the Admin UI including allowed IP address ranges per API
  key.
- Notification events subscriptions are managed in the Admin UI.
- SNS messages contain the notification content in the 'data' property
- Use a service account with roles/pubsub.publisher permissions.
- 'Fixed: Entity CSV import does not support key sort direction definition'
- 'Fixed: Export CSV and Entity import does not have ability to add database tags'
- 'Fixed: Google BigQuery entity modification Quota exceeds in case there are tens
  of changes for a single entity'
- 'Fixed: References do not work in Entity Import (CSV) with managed entities'
- Templating framework fixes and improvements
- Code editor autocompletion fix in Designer
- Schedules filter/sorting fixed in Designer
- Latest commits view slow in certain cases – performance improved
- Longer deployment description made possible in Deployment management
- Improvements on Google BigQuery connections management
- API_CALL to support Google’s run.app domain
- Wrong status code 500 in Notify API when DAG not found – fixed to 404
- Optional feature for Google BigQuery connections and an update of the libraries
- New internal feature to adapt a network setting in Runtime environment to the customer
  network setting to improve private connectivity options
- New load step preview / development view for developing load steps and previewing
  the generated SQL without saving
- Improved error messaging in FreeMarker Template (FTL) preview / development view
- Removed unnecessary FTL stack trace from SQL generation logging
- New transformation type NONE as a reserved type (not to be customized), which is
  used internally as a default for attribute mappings without explicit transformation
  type
- 'Fixed: Empty load step makes the SQL generation fail'
- 'Fixed: Product defined load transformation variables are not resolved in load options'
- 'Fixed: Manager load generation fails when no SOURCE type source mapping exists
  (only DEPENDENCY types)'
- Support for googleapis.com domain and new token `<bearer_access_token_from_bq_service_account>`
  in API_CALL load step
- 'Fixed: Deployment actions'' authorization made automatic promote fail in downstream
  Runtime environments'
errors:
- '401 Unauthorized: Go back to Authorize, Logout and Authorize again.'
- '504 Gateway Timeout: Check that the API call is originating from an allowed IP
  address.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Error: Invalid step_type value ''${step_type}''. Allowed values are: gatekeeper,
  drop_temp, temp_1, insert_0, insert_1.'
- 'Error: Parameter ''step_type'' is not set or is empty.'
- '409 Conflict: Data scan already exists'
- '400 Bad Request: Validate request parameters'
- '401 Unauthorized: Check access token'
- '401 Unauthorized: Indicates that the authorization has expired.'
- '400 Bad Request: Check the request format and parameters'
- 'Default: true'
- '401 Unauthorized: Recheck token or audience configuration'
- 200 OK
- '404 Not Found: Check endpoint URL or resource identifier'
- '500 Internal Server Error: Retry the request or check service status'
- '200 OK: Successful notification'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify authentication credentials.'
- '429 Too Many Requests: Rate limit exceeded.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - ADE User Management
  - Microsoft Entra ID
  - USERADMIN
  - SYSADMIN
  - SECURITYADMIN
client:
  base_url: https://docs.agiledataengine.com
  auth:
    type: oauth2
source_metadata: null
