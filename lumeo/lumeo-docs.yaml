resources:
- name: applications
  endpoint:
    path: /applications
    method: GET
- name: gateways
  endpoint:
    path: /gateways
    method: GET
- name: cameras
  endpoint:
    path: /cameras
    method: GET
- name: streams
  endpoint:
    path: /streams
    method: GET
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
- name: deployments
  endpoint:
    path: /deployments
    method: POST
- name: deployment_queues
  endpoint:
    path: /deployment_queues
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
- name: files
  endpoint:
    path: /files
    method: GET
- name: models
  endpoint:
    path: /models
    method: GET
- name: tags
  endpoint:
    path: /tags
    method: GET
- name: shared_streams
  endpoint:
    path: /shared_streams
    method: GET
- name: search
  endpoint:
    path: /search
    method: GET
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
- name: gateways
  endpoint:
    path: /gateways
    method: GET
    data_selector: gateways
- name: cameras
  endpoint:
    path: /cameras
    method: GET
    data_selector: cameras
- name: streams
  endpoint:
    path: /streams
    method: GET
    data_selector: streams
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
- name: deployments
  endpoint:
    path: /deployments
    method: POST
    data_selector: deployments
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
- name: models
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
- name: shared_streams
  endpoint:
    path: /shared_streams
    method: GET
    data_selector: shared_streams
- name: oem_setup
  endpoint:
    path: /oem-setup
    method: GET
    data_selector: records
    params: {}
- name: auth_login
  endpoint:
    path: /v1/internal/auth/login
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Hanwha Vision PNM-C32084RQZ-8XE256G-LU
  endpoint:
    path: /docs/model-labels
    method: GET
    data_selector: streams
    params: {}
- name: Hanwha Vision AI Box
  endpoint:
    path: /docs/model-labels
    method: GET
    data_selector: streams
    params: {}
- name: Seeed Studio Jetson NX
  endpoint:
    path: /docs/model-labels
    method: GET
    data_selector: streams
    params: {}
- name: LUMEO-GATEWAY-O1
  endpoint:
    path: /docs/model-labels
    method: GET
    data_selector: streams
    params: {}
- name: LUMEO-GATEWAY-O2
  endpoint:
    path: /docs/model-labels
    method: GET
    data_selector: streams
    params: {}
- name: LUMEO-GATEWAY-O3
  endpoint:
    path: /docs/model-labels
    method: GET
    data_selector: streams
    params: {}
- name: LUMEO-GATEWAY-O6
  endpoint:
    path: /docs/model-labels
    method: GET
    data_selector: streams
    params: {}
- name: LUMEO-GATEWAY-O6R
  endpoint:
    path: /docs/model-labels
    method: GET
    data_selector: streams
    params: {}
- name: LUMEO-GATEWAY-O10R
  endpoint:
    path: /docs/model-labels
    method: GET
    data_selector: streams
    params: {}
- name: lumeo-gateway
  endpoint:
    path: /ecs/lumeo-gateway
    method: POST
    data_selector: containerDefinitions
    params: {}
- name: install_engine_only
  endpoint:
    path: /setup
    method: GET
    data_selector: installer_commands
    params: {}
- name: install_engine_with_web_interface
  endpoint:
    path: /setup
    method: GET
    data_selector: installer_commands
    params:
      install_type: install-oem
- name: gke-cluster
  endpoint:
    path: /gcloud/container/clusters/lumeo-gateways
    method: POST
    data_selector: cluster
    params:
      zone: us-central1-a
      machine-type: e2-medium
      image-type: COS_CONTAINERD
      disk-type: pd-standard
      disk-size: '75'
      max-pods-per-node: '48'
      num-nodes: '1'
      enable-private-nodes: true
      master-ipv4-cidr: 172.17.0.0/28
      enable-master-global-access: true
      enable-ip-alias: true
      network: projects/lumeo-kubernetes/global/networks/default
      subnetwork: projects/lumeo-kubernetes/regions/us-central1/subnetworks/default
      no-enable-intra-node-visibility: true
      no-enable-master-authorized-networks: true
      addons: HorizontalPodAutoscaling,HttpLoadBalancing,GcePersistentDiskCsiDriver
      enable-autoupgrade: true
      enable-autorepair: true
      enable-shielded-nodes: true
      node-locations: us-central1-a
- name: gpu-pool
  endpoint:
    path: /gcloud/container/node-pools/gpu-pool
    method: POST
    data_selector: nodePool
    params:
      zone: us-central1-a
      cluster: lumeo-gateways
      machine-type: n1-standard-8
      accelerator: type=nvidia-tesla-t4,count=1
      disk-type: pd-standard
      disk-size: '75'
      enable-autoupgrade: true
      enable-autorepair: true
      enable-autoscaling: true
      num-nodes: '1'
      min-nodes: '1'
      max-nodes: '5'
- name: lumeo-gateway
  endpoint:
    path: /ecs/lumeo-gateway
    method: POST
    data_selector: containerDefinitions
    params: {}
- name: lumeo-gateway
  endpoint:
    path: /lumeo/gateway-nvidia-dgpu
    method: POST
    data_selector: gateways
- name: lumeo-gateways
  endpoint:
    path: /beta/container/clusters/create
    method: POST
    data_selector: results
    params:
      project: lumeo-kubernetes
- name: lumeo-gateway
  endpoint:
    path: /lumeo/gateway
    method: POST
    data_selector: gateways
    params: {}
- name: cameras
  endpoint:
    path: /lumeo-hanwhawave-import-cameras
    method: POST
    data_selector: cameras
    params: {}
- name: camera
  endpoint:
    path: /camera
    method: GET
    data_selector: cameras
    params: {}
- name: gateway_status
  endpoint:
    path: /status
    method: GET
    data_selector: status
- name: camera_import
  endpoint:
    path: /camera/import
    method: POST
    data_selector: import_response
- name: onvif_device
  endpoint:
    path: /onvif/device_service
    method: GET
    data_selector: device_details
- name: Secure Raw Stream
  endpoint:
    path: /v1/streams
    method: POST
    data_selector: stream
    params: {}
- name: Port Forwarding
  endpoint:
    path: /port-forwarding
    method: GET
    data_selector: data
    params: {}
- name: streams
  endpoint:
    path: /reference/streams
    method: GET
    data_selector: streams
    params: {}
- name: Secure Raw Stream
  endpoint:
    path: /streams
    method: POST
    data_selector: stream
    params: {}
- name: create_shared_stream
  endpoint:
    path: /reference/shared_streams
    method: POST
- name: delete_shared_stream
  endpoint:
    path: /reference/shared_streams
    method: DELETE
- name: Port Forwarding
  endpoint:
    path: /port-forwarding
    method: GET
    data_selector: instructions
    params: {}
- name: publish_to_lumeo_dashboard
  endpoint:
    path: /docs/publish-to-lumeo-dashboard-node
    method: POST
    data_selector: metadata
    params: {}
- name: create_shared_stream
  endpoint:
    path: /reference/shared_streams
    method: POST
- name: delete_shared_stream
  endpoint:
    path: /reference/shared_streams
    method: DELETE
- name: DP_event_metadata
  endpoint:
    path: /api/v1/DP_event_metadata
    method: GET
    data_selector: records
- name: DP_node_metadata
  endpoint:
    path: /api/v1/DP_node_metadata
    method: GET
    data_selector: records
- name: object_metadata
  endpoint:
    path: /docs/publish-to-lumeo-dashboard-node
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: DP_event_metadata
  endpoint:
    path: /advanced-data-access/DP_event_metadata
    method: GET
    data_selector: records
- name: DP_node_metadata
  endpoint:
    path: /advanced-data-access/DP_node_metadata
    method: GET
    data_selector: records
- name: dp_object_metadata
  endpoint:
    path: /docs/publish-to-lumeo-dashboard-node
    method: GET
    data_selector: records
    params: {}
- name: saml
  endpoint:
    path: /v1/saml/acs
    method: POST
- name: Push Notifications
  endpoint:
    path: /trigger-email-alert-node
    method: POST
    data_selector: notifications
    params:
      channel: Push
- name: roles
  endpoint:
    path: /api/roles
    method: GET
    data_selector: roles
- name: members
  endpoint:
    path: /api/members
    method: GET
    data_selector: members
- name: saml_configuration
  endpoint:
    path: /v1/saml/acs
    method: POST
    data_selector: configuration
    params:
      acs_url: https://api.lumeo.com/v1/saml/acs
      entity_id: api.lumeo.com
      start_url: https://api.lumeo.com/v1/saml/acs
      name_id_format: Email
      name_id: Basic information -> Primary email
- name: Installation_Updates_Operations
  endpoint:
    path: /api/v1/installation
    method: GET
    data_selector: data
    params: {}
- name: WebRTC
  endpoint:
    path: /api/v1/webrtc
    method: GET
    data_selector: data
    params: {}
- name: Agent_Communication
  endpoint:
    path: /api/v1/agent
    method: GET
    data_selector: data
    params: {}
- name: SMTP Connector
  endpoint:
    path: /api/smtp
    method: POST
    data_selector: clips
    params:
      external_source_identifier: office-front-camera@lumeo.com
- name: API Connector
  endpoint:
    path: /api/upload
    method: POST
    data_selector: clips
- name: AI Model
  endpoint:
    path: /api/v1/models
    method: POST
    data_selector: results
- name: demultiplex_streams
  endpoint:
    path: /demultiplex/streams
    method: POST
    data_selector: streams
    params:
      num_streams: number of output streams to produce
- name: clip
  endpoint:
    path: /api/clip
    method: POST
    data_selector: data
- name: Dwell Counter Node
  endpoint:
    path: /dwell_counter
    method: GET
    data_selector: nodes
    params: {}
- name: metadata
  endpoint:
    path: /add-metadata
    method: POST
    data_selector: metadata
- name: Merge Objects Node
  endpoint:
    path: /merge/objects
    method: POST
    data_selector: filtered_objects
    params: {}
- name: blur_objects
  endpoint:
    path: /blur_objects
    method: POST
    data_selector: output
    params: {}
- name: metadata
  endpoint:
    path: /aggregate/metadata
    method: POST
- name: objects
  endpoint:
    path: /docs/model-labels
    method: GET
    data_selector: objects
    params: {}
- name: model
  endpoint:
    path: /api/models
    method: GET
    data_selector: models
- name: nodes
  endpoint:
    path: /metadata/nodes
    method: GET
    data_selector: nodes
    params: {}
- name: objects
  endpoint:
    path: /metadata/objects
    method: GET
    data_selector: objects
    params: {}
- name: demultiplex_streams
  endpoint:
    path: /demultiplex-streams-node
    method: GET
    data_selector: streams
    params: {}
- name: axis_network_io_read
  endpoint:
    path: /axis/network/io/read
    method: GET
    data_selector: nodes.axis_network_io_read1
- name: dwell_counter
  endpoint:
    path: /dwell_counter
    method: GET
    data_selector: records
- name: axis_network_io_write
  endpoint:
    path: /api/v1/io/write
    method: POST
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: metadata
    params: {}
- name: object_types
  endpoint:
    path: /object_types
    method: GET
    data_selector: filtered_objects_information
- name: trigger_alarm
  endpoint:
    path: /hikcentral/api/v1/alarm
    method: POST
    data_selector: event
    params:
      interval: 60
      port: 15443
- name: crop_and_warp
  endpoint:
    path: /crop-and-warp
    method: POST
    data_selector: result
    params: {}
- name: create_search_index
  endpoint:
    path: /create-search-index
    method: POST
    data_selector: search
    params: {}
- name: lookup
  endpoint:
    path: /api/claude/lookup
    method: POST
    data_selector: results
- name: calibrate_camera
  endpoint:
    path: /calibrate-camera
    method: POST
    data_selector: outputs
- name: nodes
  endpoint:
    path: /nodes
    method: GET
    data_selector: nodes
    params: {}
- name: objects
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
    params: {}
- name: Output Metadata
  endpoint:
    path: /caption-generator/output-metadata
    method: GET
    data_selector: nodes.node_id
    params: {}
- name: axis_network_io_read
  endpoint:
    path: /axis/network_io/read
    method: GET
- name: io_port_control
  endpoint:
    path: /vapiX/control
    method: POST
    data_selector: response
    params: {}
- name: incident
  endpoint:
    path: /create/incident
    method: POST
    data_selector: incident
    params:
      username: 24x7 username
      password: 24x7 password
      facility: Facility name
      incident_type: Incident type
      department: Department
      summary: Alert message
      event: Event name
      priority: Priority
      location: Location name
      section: Section name
      inside_outside: Inside outside
      assigned_to: Assign to
      include_snapshot: Include snapshot of incident
      interval: 10
      max_media_wait_time: 5
- name: watermark
  endpoint:
    path: /docs/display-watermark
    method: GET
    data_selector: outputs
    params: {}
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: data
    params: {}
- name: Crop and Warp Node
  endpoint:
    path: /docs/crop-and-warp-node
    method: GET
    data_selector: properties
    params: {}
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params:
      event_source: built_in
      interval: 60
      hostname: your_hikcentral_server_ip
      port: 15443
      configure_hikcentral: false
      default_alarm_priority: 2
      default_alarm_popup_windows: true
      default_play_type: playback
- name: Generic Event
  endpoint:
    path: /EventAndAlarm/CustomEvent/GenericEvent
    method: POST
    data_selector: Request
    params: {}
- name: Create Search Index
  endpoint:
    path: /create-search-index
    method: POST
    data_selector: search
    params: {}
- name: Trigger HikCentral Alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: calibrate_camera
  endpoint:
    path: /calibrate_camera
    method: POST
    data_selector: outputs
    params: {}
- name: generic_event
  endpoint:
    path: /EventAndAlarm/CustomEvent/GenericEvent
    method: POST
    data_selector: Request
- name: output_metadata
  endpoint:
    path: /output/metadata
    method: GET
    data_selector: nodes.node_id
    params: {}
- name: custom_function
  endpoint:
    method: POST
- name: incident
  endpoint:
    path: /create-incident
    method: POST
    data_selector: incident
    params: {}
- name: video_info
  endpoint:
    path: /video/info
    method: GET
    data_selector: video_info
- name: frame_meta
  endpoint:
    path: /frame/meta
    method: GET
    data_selector: meta
- name: objects
  endpoint:
    path: /frame/objects
    method: GET
    data_selector: objects
- name: nodes
  endpoint:
    path: /frame/nodes
    method: GET
    data_selector: nodes
- name: display_watermark
  endpoint:
    path: /docs/display-watermark-node
    method: GET
- name: object_tracking
  endpoint:
    path: /object_tracking
    method: POST
    data_selector: results
- name: webhook_integration
  endpoint:
    path: /webhook_integration
    method: POST
    data_selector: results
- name: persistent_storage
  endpoint:
    path: /persistent_storage
    method: POST
    data_selector: results
- name: trigger_hikcentral_alarm
  endpoint:
    path: /api/hikcentral/alarm
    method: POST
    data_selector: result
    params:
      event_source: built_in
      interval: 60
      port: 15443
      configure_hikcentral: false
      default_alarm_priority: 2
      default_alarm_popup_windows: true
      default_play_type: playback
- name: stream_metadata
  endpoint:
    path: /display/stream/info
    method: GET
    data_selector: metadata
- name: custom_function
  endpoint:
    path: /custom_function
    method: POST
    data_selector: data
    params: {}
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params:
      event_source: built_in
      interval: 60
      hostname: ''
      port: 15443
      configure_hikcentral: false
      default_alarm_priority: 2
      default_alarm_popup_windows: true
      default_play_type: playback
- name: trigger_event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: event_data
- name: Generic Event
  endpoint:
    path: /event
    method: POST
    data_selector: Request
    params: {}
- name: Trigger HikCentral Alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event_data
    params: {}
- name: Generic Event
  endpoint:
    path: /EventAndAlarm/CustomEvent/GenericEvent
    method: POST
    data_selector: Request
    params: {}
- name: demultiplex_video
  endpoint:
    path: /demultiplex/video
    method: POST
    data_selector: streams
    params:
      num_streams: Number of output streams to produce
- name: person_detection
  endpoint:
    path: /detect/person
    method: POST
    data_selector: objects
    params: {}
- name: line_crossing
  endpoint:
    path: /line/crossing
    method: POST
    data_selector: lines
    params: {}
- name: persistent_storage
  endpoint:
    path: /storage
    method: POST
    data_selector: storage
    params: {}
- name: pose_information
  endpoint:
    path: /detect_pose
    method: POST
    data_selector: pose_data
- name: stream_metadata
  endpoint:
    path: /display/stream/info
    method: GET
    data_selector: metadata
    params: {}
- name: Trigger Rhombus Event
  endpoint:
    path: /trigger/rhombus/event
    method: POST
    data_selector: event
    params: {}
- name: custom_function
  endpoint:
    path: /custom/functions
    method: POST
    data_selector: results
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
- name: trigger_event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: event
    params: {}
- name: encode_video
  endpoint:
    path: /encode/video
    method: POST
    data_selector: encodedStream
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: result
    params: {}
- name: trigger_event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: event_response
    params: {}
- name: Generic Event
  endpoint:
    path: /EventAndAlarm/CustomEvent/GenericEvent
    method: POST
    data_selector: Request
    params: {}
- name: pose_detection
  endpoint:
    path: /detect/pose
    method: POST
    data_selector: pose_information
- name: large_person_group
  endpoint:
    path: /largePersonGroup
    method: POST
    data_selector: 'null'
    params: {}
- name: large_person_group_person
  endpoint:
    path: /largePersonGroup/{personGroupId}/persons
    method: POST
    data_selector: 'null'
    params: {}
- name: add_face_from_stream
  endpoint:
    path: /largePersonGroup/{personGroupId}/persons/{personId}/persistedFaces
    method: POST
    data_selector: 'null'
    params: {}
- name: train_person_group
  endpoint:
    path: /largePersonGroup/{personGroupId}/train
    method: POST
    data_selector: 'null'
    params: {}
- name: get_training_status
  endpoint:
    path: /largePersonGroup/{personGroupId}/trainingStatus
    method: GET
    data_selector: 'null'
    params: {}
- name: update_person_user_data
  endpoint:
    path: /largePersonGroup/{personGroupId}/persons/{personId}
    method: PATCH
    data_selector: 'null'
    params: {}
- name: trigger_event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: event
    params:
      trigger: trigger_condition
      interval: 0
      rhombus_api_key: your_api_key
      event_name: your_event_name
      event_description: your_event_description
- name: Trigger HikCentral Alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: generic_event
  endpoint:
    path: /EventAndAlarm/CustomEvent/GenericEvent
    method: POST
    data_selector: Request
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params:
      event_source: built_in
      interval: 60
      hostname: your-hikcentral-hostname
      port: 15443
      configure_hikcentral: false
      default_alarm_priority: 2
      default_alarm_popup_windows: true
      default_play_type: playback
- name: classifier_results
  endpoint:
    path: /classifier/results
    method: GET
    data_selector: results
- name: Generic Detector
  endpoint:
    path: /docs/generic-detector-node
    method: GET
- name: Generic Event
  endpoint:
    path: /EventAndAlarm/CustomEvent/GenericEvent
    method: POST
    data_selector: Request
    params: {}
- name: encode_video
  endpoint:
    path: /encode/video
    method: POST
    data_selector: encoded_stream
    params: {}
- name: Hanwha Vision SPM-4210
  endpoint:
    path: /trigger
    method: POST
    data_selector: 'null'
    params: {}
- name: trigger_event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: event
    params: {}
- name: face_recognition
  endpoint:
    path: /face_recognition
    method: POST
- name: face_data
  endpoint:
    path: /api/face_data
    method: POST
    data_selector: faces
    params: {}
- name: face_recognition
  endpoint:
    path: /face/v1.0/findsimilars
    method: POST
    data_selector: recognized_faces
    params: {}
- name: large_person_group
  endpoint:
    path: /largepersongroups/{personGroupId}
    method: POST
    data_selector: personGroupId
    params: {}
- name: large_person_group_person
  endpoint:
    path: /largepersongroups/{personGroupId}/persons
    method: POST
    data_selector: personId
    params: {}
- name: nodes
  endpoint:
    path: /nodes
    method: GET
    data_selector: gemini1
- name: objects
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: jetson_gpio_pin_read
  endpoint:
    path: /jetson/gpio/read
    method: POST
    data_selector: metadata
    params: {}
- name: license_plate_recognition
  endpoint:
    path: /snapshot
    method: POST
    data_selector: nodes.annotate_lpr*
- name: Generic Classifier
  endpoint:
    path: /generic/classifier
    method: GET
    data_selector: results
- name: objects
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
    params: {}
- name: jetson_gpio_pin_write
  endpoint:
    path: /jetson/gpio/pin/write
    method: POST
    data_selector: result
    params: {}
- name: Generic Detector
  endpoint:
    path: /docs/generic-detector-node
    method: GET
    data_selector: objects
- name: Filter Stream
  endpoint:
    path: /docs/filter-stream-node
    method: GET
- name: trigger_event
  endpoint:
    path: /api/trigger_event
    method: POST
    data_selector: event
    params:
      rhombus_api_key: '{{ dlt.secrets[''rhombus_api_key''] }}'
      event_name: event_name
      event_description: event_description
      event_color: red
      send_bounding_boxes: false
- name: Hanwha Vision SPM-4210
  endpoint:
    path: /trigger/io
    method: POST
    data_selector: data
    params:
      trigger: trigger-condition
      action: follow
      io_port: 'null'
      pulse_duration: 0
      ip_address: 'null'
      use_https: false
      insecure: false
      output_type: closed
      debug: false
- name: local_vision_language_model
  endpoint:
    path: /local-vision-language-model
    method: GET
    data_selector: results
- name: multiplex_video
  endpoint:
    path: /docs/multiplex-video-node
    method: GET
    data_selector: None
    params: {}
- name: face_data
  endpoint:
    path: /path/to/face_data_endpoint
    method: POST
    data_selector: faces
    params: {}
- name: nodes
  endpoint:
    path: /metadata/nodes
    method: GET
    data_selector: nodes
    params: {}
- name: objects
  endpoint:
    path: /metadata/objects
    method: GET
    data_selector: objects
    params: {}
- name: nodes
  endpoint:
    path: /nodes
    method: GET
    data_selector: gemini1
    params: {}
- name: objects
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
    params: {}
- name: ocr
  endpoint:
    path: /ocr
    method: POST
    data_selector: nodes
- name: Jetson GPIO Pin Read
  endpoint:
    path: /jetson/gpio/read
    method: GET
    data_selector: metadata
    params: {}
- name: Modify and Merge Objects
  endpoint:
    path: /modify-and-merge-objects
    method: POST
- name: license_plate_recognition
  endpoint:
    path: /snapshot
    method: POST
    data_selector: nodes.annotate_lpr*
- name: objects
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
    params: {}
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: gpio_pin_name
  endpoint:
    path: /jetson/gpio/pin
    method: POST
    data_selector: records
- name: trigger
  endpoint:
    path: /jetson/gpio/trigger
    method: POST
    data_selector: records
- name: mode
  endpoint:
    path: /jetson/gpio/mode
    method: POST
    data_selector: records
- name: Filter Stream
  endpoint:
    path: /docs/filter-stream-node
    method: GET
    data_selector: frames
    params: {}
- name: object_flow
  endpoint:
    path: /object_flow_counter
    method: GET
    data_selector: nodes.object_flow1
- name: Trigger Rhombus Event
  endpoint:
    path: /trigger/rhombus/event
    method: POST
    data_selector: event
    params: {}
- name: object_motion_detection
  endpoint:
    path: /object_motion_detection
    method: POST
    data_selector: nodes
    params: {}
- name: trigger_event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: event
    params:
      event_name: '{{ event_name }}'
      event_description: '{{ event_description }}'
      event_color: red
      send_bounding_boxes: false
- name: multiplex_video
  endpoint:
    path: /docs/multiplex-video-node
    method: GET
    data_selector: records
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: nodes
  endpoint:
    path: /metadata/nodes
    method: GET
    data_selector: nodes
    params: {}
- name: objects
  endpoint:
    path: /metadata/objects
    method: GET
    data_selector: objects
    params: {}
- name: OCR
  endpoint:
    path: /ocr
    method: POST
    data_selector: nodes
- name: trigger_event
  endpoint:
    path: /trigger/event
    method: POST
- name: modify_merge_objects
  endpoint:
    path: /modify-and-merge-objects
    method: POST
    data_selector: filtered_objects
- name: trigger_hikcentral_alarm
  endpoint:
    path: /api/hikcentral/alarm
    method: POST
    data_selector: event
    params:
      event_source: built_in
      interval: 60
      port: 15443
      configure_hikcentral: false
      default_alarm_priority: 2
      default_alarm_popup_windows: true
      default_play_type: playback
- name: trigger_hikcentral_alarm
  endpoint:
    path: /api/v1/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: webhook_receiver
  endpoint:
    path: /v1/webhooks/<path_key>
    method: GET
    data_selector: meta
- name: object_flow
  endpoint:
    path: /object_flow
    method: GET
    data_selector: nodes
- name: object_motion_detection
  endpoint:
    path: /object/motion/detection
    method: POST
    data_selector: motion_data
    params: {}
- name: publish_metrics
  endpoint:
    path: /publish_to_bigquery
    method: POST
    data_selector: metrics
    params:
      bigquery_project_id: '{{ dlt.secrets[''bigquery_project_id''] }}'
      bigquery_dataset_id: '{{ dlt.secrets[''bigquery_dataset_id''] }}'
      bigquery_credentials: '{{ dlt.secrets[''bigquery_credentials''] }}'
      node_ids_to_publish: '{{ dlt.secrets[''node_ids_to_publish''] }}'
      objects_to_publish: Specified by node
      objects_only_new_updated: true
      object_track_lifespan: 600
      interval: 1
      use_stream_clock: false
- name: publish_metadata
  endpoint:
    path: /publish/to/elasticsearch
    method: POST
    data_selector: metadata
    params: {}
- name: trigger_rhombus_event
  endpoint:
    path: /trigger/rhombus/event
    method: POST
    data_selector: event_data
- name: publish_to_google_sheets
  endpoint:
    path: /publish_to_google_sheets
    method: POST
- name: Trigger HikCentral Alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: Node Metadata
  endpoint:
    path: /publish/node_metadata
    method: POST
    data_selector: metadata
    params: {}
- name: Object Attributes Metadata
  endpoint:
    path: /publish/object_attributes_metadata
    method: POST
    data_selector: metadata
    params: {}
- name: Event Metadata
  endpoint:
    path: /publish/event_metadata
    method: POST
    data_selector: metadata
    params: {}
- name: Profile Performance
  endpoint:
    path: /profile/performance
    method: GET
    data_selector: stats
- name: objects
  endpoint:
    data_selector: objects
- name: trigger_event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: event
    params: {}
- name: trigger_event
  endpoint:
    path: /api/v1/events/trigger
    method: POST
    data_selector: event_data
    params: {}
- name: trigger_hikcentral_alarm
  endpoint:
    path: /api/hikcentral/alarm
    method: POST
    data_selector: event
    params:
      event_source: built_in
      interval: 60
      hostname: your-hikcentral-host
      port: 15443
      configure_hikcentral: false
      default_alarm_priority: 2
      default_alarm_popup_windows: true
      default_play_type: playback
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: Generic Event
  endpoint:
    path: /EventAndAlarm/CustomEvent
    method: POST
    data_selector: Request
    params: {}
- name: webhook_receiver
  endpoint:
    path: /webhooks/<path_key>
    method: GET
    data_selector: meta
    params: {}
- name: webhook
  endpoint:
    path: /send-http-webhook
    method: POST
    data_selector: metadata
- name: bigquery
  endpoint:
    path: /publish-to-bigquery
    method: POST
    data_selector: metrics
    params:
      bigquery_project_id: 'null'
      bigquery_dataset_id: 'null'
      bigquery_credentials: 'null'
      node_ids_to_publish: 'null'
      objects_to_publish: 'null'
      objects_only_new_updated: true
      object_track_lifespan: 600
      interval: 1
      use_stream_clock: false
- name: metadata
  endpoint:
    path: /publish/metadata
    method: POST
    data_selector: data
    params: {}
- name: publish_metadata
  endpoint:
    path: /publish/metadata
    method: POST
    data_selector: response
    params: {}
- name: node_metadata
  endpoint:
    path: /publish/node_metadata
    method: POST
    data_selector: metadata
    params: {}
- name: object_attributes_metadata
  endpoint:
    path: /publish/object_attributes_metadata
    method: POST
    data_selector: metadata
    params: {}
- name: event_metadata
  endpoint:
    path: /publish/event_metadata
    method: POST
    data_selector: metadata
    params: {}
- name: ReIdentify Objects
  endpoint:
    path: /reidentify/objects
    method: POST
    data_selector: objects
    params: {}
- name: Trigger Rhombus Event
  endpoint:
    path: /api/trigger_event
    method: POST
    data_selector: event_response
- name: trigger_event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: results
- name: snapshot
  endpoint:
    path: /api/snapshot
    method: POST
- name: trigger_hikcentral_alarm
  endpoint:
    path: /api/alarm/trigger
    method: POST
    data_selector: result
    params: {}
- name: save_gif
  endpoint:
    path: /save/gif
    method: POST
    data_selector: gifData
    params:
      save_location: cloud
      max_edge_files: 5
      max_duration: 5
      pre_trigger_duration: 0
      capture_interval: 2
      playback_interval: 2
      resolution: default
- name: Generic Event
  endpoint:
    path: /EventAndAlarm/CustomEvent/GenericEvent
    method: POST
    data_selector: Request
- name: send_http_webhook
  endpoint:
    path: /send_http_webhook
    method: POST
    data_selector: metadata
    params: {}
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params:
      event_source: built_in
      interval: 60
      hostname: ''
      port: 15443
      configure_hikcentral: false
      default_alarm_priority: 2
      default_alarm_popup_windows: true
      default_play_type: playback
- name: custom_body_post
  endpoint:
    path: /webhook_url
    method: POST
    data_selector: custom_body_template
- name: trigger_rhombus_event
  endpoint:
    path: /trigger/rhombus/event
    method: POST
    data_selector: event_response
    params: {}
- name: snapshot
  endpoint:
    path: /save_snapshot
    method: POST
- name: roi_data
  endpoint:
    path: /metadata/roi_data
    method: GET
    data_selector: records
- name: Smart Zoom
  endpoint:
    path: /docs/smart-zoom-node
    method: GET
- name: s3_put_policy
  endpoint:
    path: s3-put-policy.json
    method: PUT
    data_selector: Statement
    params: {}
- name: Save GIF
  endpoint:
    path: /save/gif
    method: POST
- name: stream_rtmp
  endpoint:
    path: /stream/rtmp
    method: POST
    data_selector: stream
    params: {}
- name: RTSP Stream
  endpoint:
    path: /stream-rtsp
    method: GET
    data_selector: streamDetails
    params: {}
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params:
      event_source: built_in
      interval: 60
      port: 15443
      configure_hikcentral: false
      default_alarm_priority: 2
      default_alarm_popup_windows: true
      default_play_type: playback
- name: trigger_rhombus_event
  endpoint:
    path: /trigger/rhombus_event
    method: POST
    data_selector: event
    params: {}
- name: scene_change_detection
  endpoint:
    path: /scene/change/detection
    method: POST
    data_selector: nodes
- name: roi_metadata
  endpoint:
    path: /metadata/roi
    method: GET
    data_selector: records
- name: Smart Zoom
  endpoint:
    path: /docs/smart-zoom-node
    method: GET
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params:
      event_source: built_in
      interval: 60
      port: 15443
      configure_hikcentral: false
      default_alarm_priority: 2
      default_alarm_popup_windows: true
      default_play_type: playback
- name: stream_rtmp
  endpoint:
    path: /stream/rtmp
    method: POST
    data_selector: rtmp_url
    params: {}
- name: generic_event
  endpoint:
    path: /EventAndAlarm/CustomEvent/GenericEvent
    method: POST
    data_selector: Request
    params: {}
- name: sync_frames
  endpoint:
    path: /sync-and-tile-frames
    method: POST
    data_selector: synced_deployments
    params: {}
- name: trigger_rhombus_event
  endpoint:
    path: /trigger/rhombus/event
    method: POST
    data_selector: event_data
- name: tailgating
  endpoint:
    path: /docs/tailgating
    method: GET
- name: trigger_hikcentral_alarm
  endpoint:
    path: /api/hikcentral/alarm
    method: POST
    data_selector: event
    params:
      event_source: built_in
      interval: 60
      port: 15443
      configure_hikcentral: false
      default_alarm_priority: 2
      default_alarm_popup_windows: true
      default_play_type: playback
- name: Tile Video in Grid
  endpoint:
    path: /docs/tile-video-in-grid-node
    method: GET
    data_selector: properties
- name: time_trigger
  endpoint:
    path: /docs/time-trigger-node
    method: GET
    data_selector: records
    params: {}
- name: attributes
  endpoint:
    path: /track-attributes
    method: POST
    data_selector: objects
    params: {}
- name: sync_frame
  endpoint:
    path: /sync-and-tile-frames
    method: POST
    data_selector: synced_deployments
- name: Transform Pixels
  endpoint:
    path: /transform/pixels
    method: POST
- name: tailgating
  endpoint:
    path: /tailgating
    method: POST
    data_selector: nodes
- name: mqtt_messages
  endpoint:
    path: /mqtt/messages
    method: POST
    data_selector: topics
    params: {}
- name: Tile Video in Grid
  endpoint:
    path: /docs/tile-video-in-grid-node
    method: GET
    data_selector: properties
    params: {}
- name: track_objects
  endpoint:
    path: /track/objects
    method: POST
    data_selector: objects
    params: {}
- name: time_trigger
  endpoint:
    path: /docs/time-trigger
    method: GET
    data_selector: nodes
    params: {}
- name: track_attributes
  endpoint:
    path: /track/attributes
    method: GET
- name: trigger_genetec_alarm
  endpoint:
    path: /api/genetec/alarm
    method: POST
    data_selector: response
    params: {}
- name: Transform Video
  endpoint:
    path: /transform/video
    method: POST
- name: Transform Pixels
  endpoint:
    path: /transform/pixels
    method: POST
    data_selector: results
- name: trigger_event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: event
    params: {}
- name: track_objects
  endpoint:
    path: /track/objects
    method: POST
    data_selector: metadata
- name: trigger_rhombus_event
  endpoint:
    path: /trigger/rhombus/event
    method: POST
    data_selector: event
    params: {}
- name: Genetec Alarm
  endpoint:
    path: /trigger/genetec/alarm
    method: POST
    data_selector: alarm_response
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: Transform Video
  endpoint:
    path: /transform/video
    method: POST
- name: immix_alarm
  endpoint:
    path: /trigger/immix_alarm
    method: POST
    data_selector: response
    params: {}
- name: trigger_hanwha_wave_event
  endpoint:
    path: /trigger/hanwha_wave_event
    method: POST
    data_selector: event
    params: {}
- name: trigger_event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: event
    params: {}
- name: trigger_event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: event_data
    params:
      enabled: true
      integration_type: http_xml
      port: 9090
      message: '{{ event_name }}'
      src: '{{ camera_id }}'
      include_snapshot: true
      interval: 0
- name: homekit_camera
  endpoint:
    path: /stream-to-homekit
    method: POST
    data_selector: camera
    params: {}
- name: trigger_hikcentral_alarm
  endpoint:
    path: /api/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: trigger_event
  endpoint:
    path: /trigger/rhombus/event
    method: POST
    data_selector: event
- name: Trigger Immix Alarm
  endpoint:
    path: /trigger/immix/alarm
    method: POST
    data_selector: response
    params: {}
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: trigger_event
  endpoint:
    path: /api/trigger_event
    method: POST
    data_selector: event_data
    params: {}
- name: trigger_event
  endpoint:
    path: /trigger/solink_event
    method: POST
    data_selector: event_response
    params:
      solink_ip: IP Address for your local Solink device
      solink_port: Port that your local Solink device is listening to for Lumeo Events
      event_type: alert
      message: If specified, inserts the message along with the Event sent to Solink.
      interval: Min time (seconds) between consecutive notifications.
      batch: If true, batches up events to send.
- name: homekit_camera
  endpoint:
    path: /docs/stream-to-homekit-node
    method: GET
    data_selector: properties
    params: {}
- name: nodes
  endpoint:
    path: /docs/trigger-solink-event-node
    method: GET
    data_selector: nodes
    params: {}
- name: objects
  endpoint:
    path: /docs/trigger-rhombus-event-node-15
    method: GET
    data_selector: objects
    params: {}
- name: trigger_event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: event
    params:
      event_name: Activity display name that shows up in Rhombus console.
      event_description: Activity description that shows up in Rhombus console.
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: trigger_rhombus_event
  endpoint:
    path: /trigger/rhombus/event
    method: POST
    data_selector: event
    params:
      trigger: nodes.annotate_motion1.rois.fullframe.motion
      interval: 0
      rhombus_api_key: '{{ dlt.secrets[''rhombus_api_key''] }}'
      event_name: Activity
      event_description: Fire was detected in the parking lot
      event_color: RED
      send_bounding_boxes: false
- name: trigger_solink_event
  endpoint:
    path: /trigger/solink/event
    method: POST
    data_selector: event
    params: {}
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: trigger_rhombus_event
  endpoint:
    path: /trigger/rhombus/event
    method: POST
    data_selector: event
    params: {}
- name: trigger_rhombus_event
  endpoint:
    path: /trigger/rhombus/event
    method: POST
    data_selector: event_data
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
- name: Trigger HikCentral Alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
- name: trigger_event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: event
    params: {}
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: trigger_rhombus_event
  endpoint:
    path: /trigger/rhombus/event
    method: POST
    data_selector: event_data
- name: video_source
  endpoint:
    path: /docs/video-source-node
    method: GET
    data_selector: nodes
    params: {}
- name: license_plate_recognition
  endpoint:
    path: /license_plate_recognition
    method: POST
- name: trigger_event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: event_data
- name: roi_labels
  endpoint:
    path: /metadata/roi_labels
    method: GET
- name: rois
  endpoint:
    path: /metadata/rois
    method: GET
- name: nodes
  endpoint:
    path: nodes
    method: GET
    data_selector: video_source_properties
    params: {}
- name: metadata_properties
  endpoint:
    path: /metadata/properties
    method: GET
    data_selector: properties
- name: license_plate_info
  endpoint:
    path: /license-plate-info
    method: GET
    data_selector: nodes.annotate_lpr_edge*
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params:
      event_source: built_in
      interval: 60
      port: 15443
      configure_hikcentral: false
      default_alarm_priority: 2
      default_alarm_popup_windows: true
      default_play_type: playback
- name: trigger_email_alert
  endpoint:
    path: /docs/trigger-email-alert-node
    method: GET
    data_selector: records
- name: trigger_rhombus_event
  endpoint:
    path: /trigger/rhombus/event
    method: POST
    data_selector: event
    params:
      trigger: null
      interval: 0
      rhombus_api_key: null
      event_name: null
      event_description: null
      event_color: red
      send_bounding_boxes: false
      bounding_box_object_filter: null
      source_node_id: null
- name: google_chat_alert
  endpoint:
    path: /trigger/google_chat_alert
    method: POST
    data_selector: alert
    params: {}
- name: trigger_email_alert
  endpoint:
    path: /docs/trigger-email-alert-node
    method: GET
    data_selector: metadata
    params: {}
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params: {}
- name: line_crossing_counter
  endpoint:
    path: /line/crossing
    method: POST
    data_selector: data
    params: {}
- name: trigger_google_chat_alert
  endpoint:
    path: /trigger/google/chat/alert
    method: POST
    data_selector: message
    params: {}
- name: motion_detection
  endpoint:
    path: /motion_detection
    method: POST
    data_selector: nodes
    params: {}
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
    data_selector: event
    params:
      event_source: built_in
      interval: 60
      hostname: ''
      port: 15443
      configure_hikcentral: false
      default_alarm_priority: 2
      default_alarm_popup_windows: true
      default_play_type: playback
- name: Generic Event
  endpoint:
    path: /events/generic
    method: POST
- name: trigger_event
  endpoint:
    path: /events/trigger
    method: POST
    data_selector: event
    params:
      rhombus_api_key: '{{ dlt.secrets[''rhombus_api_key''] }}'
      event_name: string
      event_description: string
      event_color: red
      send_bounding_boxes: false
      bounding_box_object_filter: string
      source_node_id: string
- name: motion_detection
  endpoint:
    path: /motion/detection
    method: GET
    data_selector: nodes
- name: trigger_hikcentral_alarm
  endpoint:
    path: /api/hikcentral/alarm
    method: POST
    data_selector: event
    params:
      event_source: built_in
      interval: 60
      hostname: hostname_or_ip
      port: 15443
      configure_hikcentral: false
      default_alarm_priority: 2
      default_alarm_popup_windows: true
      default_play_type: playback
- name: trigger_event
  endpoint:
    path: /api/v1/trigger_event
    method: POST
    data_selector: event_response
- name: Generic Event
  endpoint:
    path: /EventAndAlarm/CustomEvent/GenericEvent
    method: POST
    data_selector: Request
    params: {}
- name: Alarm
  endpoint:
    path: /EventAndAlarm/NormalEventAndAlarm
    method: POST
    data_selector: Alarm
    params: {}
- name: trigger_hikcentral_alarm
  endpoint:
    path: /trigger/hikcentral/alarm
    method: POST
- name: trigger_pushover_notification
  endpoint:
    path: /api/send
    method: POST
    data_selector: response
    params: {}
- name: Generic Event
  endpoint:
    path: /EventAndAlarm/GenericEvent
    method: POST
    data_selector: Request
- name: trigger_pushover_notification
  endpoint:
    path: /trigger/pushover
    method: POST
    data_selector: notification
    params: {}
- name: Trigger Rhombus Event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: event
    params:
      rhombus_api_key: '{{ dlt.secrets[''rhombus_api_key''] }}'
      event_name: Activity Display Name
      event_description: Activity Description
- name: event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: event
    params: {}
- name: SMS Alert
  endpoint:
    path: /trigger/sms
    method: POST
    data_selector: sms_alert
    params: {}
- name: sms_alert
  endpoint:
    path: /trigger/sms
    method: POST
    data_selector: results
- name: barcode_recognition
  endpoint:
    path: /recognize_barcodes
    method: POST
    data_selector: nodes
    params: {}
- name: barcode_recognition
  endpoint:
    path: /recognize-barcodes
    method: POST
    data_selector: nodes
    params: {}
- name: pose_recognition
  endpoint:
    path: /pose/recognition
    method: POST
    data_selector: nodes.parse_bodypose
    params: {}
- name: presence_monitor
  endpoint:
    path: /presence/monitor
    method: GET
    data_selector: occupancy_information
- name: pose_recognition
  endpoint:
    path: /api/pose_recognition
    method: POST
    data_selector: nodes
- name: roi_label
  endpoint:
    path: /docs/pose-recognition-node
    method: GET
    data_selector: roi_label
    params: {}
- name: occupancy_monitor
  endpoint:
    path: /occupancy-monitor
    method: GET
    data_selector: records
    params: {}
- name: occupancy_metrics
  endpoint:
    path: /presence_monitor
    method: GET
    data_selector: occupancy_information
- name: proximity_detector
  endpoint:
    path: /proximity_detector
    method: POST
    data_selector: output
    params: {}
- name: occupancy_monitor
  endpoint:
    path: /occupancy-monitor
    method: GET
    data_selector: data
    params: {}
- name: <roi_label>
  endpoint:
    path: /<path_to_endpoint>
    method: GET
    data_selector: <data_selector>
    params: {}
- name: annotate_queue1
  endpoint:
    path: /nodes/annotate_queue1
    method: GET
    data_selector: nodes.annotate_queue1
    params: {}
- name: Speed Estimation
  endpoint:
    path: /speed-estimation
    method: GET
    data_selector: records
- name: speed_estimation
  endpoint:
    path: /speed/estimation
    method: POST
    data_selector: speed_info
- name: event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: nodes
    params: {}
- name: s3-put-policy
  endpoint:
    path: /iam/create-user
    method: POST
    data_selector: Statement
    params: {}
- name: event
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: nodes
    params: {}
- name: deployment_queues
  endpoint:
    path: /reference/deployment_queues
    method: GET
- name: files
  endpoint:
    path: /reference/files
    method: GET
- name: upload
  endpoint:
    path: /bulk-deploy
    method: POST
- name: AI Models
  endpoint:
    path: /api/models
    method: GET
    data_selector: models
    params: {}
- name: deployment_queues
  endpoint:
    path: /reference/deployment_queues
    method: POST
    data_selector: deployments
    params: {}
- name: files
  endpoint:
    path: /reference/files
    method: GET
    data_selector: output_files
    params: {}
- name: upload_files
  endpoint:
    path: /upload
    method: POST
    data_selector: files
- name: Adult Child Classifier
  endpoint:
    path: /model/adult-child-classifier
    method: GET
    data_selector: records
    params: {}
- name: Age Classification
  endpoint:
    path: /model/age-classification
    method: GET
    data_selector: records
    params: {}
- name: Automobile Make Classification
  endpoint:
    path: /model/automobile-make-classification
    method: GET
    data_selector: records
    params: {}
- name: Barcode Detection
  endpoint:
    path: /model/barcode-detection
    method: GET
    data_selector: records
    params: {}
- name: D-FINE 365
  endpoint:
    path: /model/d-fine-365
    method: GET
    data_selector: records
    params: {}
- name: Face Detection
  endpoint:
    path: /model/face-detection
    method: GET
    data_selector: records
    params: {}
- name: Gender Classification
  endpoint:
    path: /model/gender-classification
    method: GET
    data_selector: records
    params: {}
- name: Vehicle Type Classification
  endpoint:
    path: /model/vehicle-type-classification
    method: GET
    data_selector: records
    params: {}
- name: Adult Child Classifier
  endpoint:
    path: /models/adult_child_classifier
    method: GET
    data_selector: records
- name: Age Classification
  endpoint:
    path: /models/age_classification
    method: GET
    data_selector: records
- name: Automobile Make Classification
  endpoint:
    path: /models/automobile_make_classification
    method: GET
    data_selector: records
- name: Face Detection
  endpoint:
    path: /models/face_detection
    method: GET
    data_selector: records
- name: Vehicle Detection
  endpoint:
    path: /models/vehicle_detection
    method: GET
    data_selector: records
- name: frame
  endpoint:
    path: /object_tensors
    method: GET
    data_selector: detected_objects
    params: {}
- name: training_images
  endpoint:
    path: /customvision/v3.3/Training/projects/YOUR-CUSTOMVISION-PROJECT-ID/images
    method: POST
    data_selector: images
- name: YOLOv4_Tiny
  endpoint:
    path: /path/to/yolov4_tiny
    method: GET
    data_selector: model_data
- name: YOLOv5
  endpoint:
    path: /path/to/yolov5
    method: GET
    data_selector: model_data
- name: YOLOv8
  endpoint:
    path: /path/to/yolov8
    method: GET
    data_selector: model_data
- name: frame
  endpoint:
    path: /frame/object_tensors
    method: GET
    data_selector: objects
    params: {}
- name: gateways
  endpoint:
    path: /reference/gateways
    method: GET
- name: cameras
  endpoint:
    path: /reference/cameras
    method: GET
- name: streams
  endpoint:
    path: /reference/streams
    method: GET
- name: pipelines
  endpoint:
    path: /reference/pipelines
    method: GET
- name: deployments
  endpoint:
    path: /reference/deployments
    method: POST
- name: events
  endpoint:
    path: /reference/events
    method: GET
- name: files
  endpoint:
    path: /reference/files
    method: GET
- name: models
  endpoint:
    path: /reference/models
    method: GET
- name: tags
  endpoint:
    path: /reference/tags
    method: GET
- name: shared_streams
  endpoint:
    path: /reference/shared_streams
    method: GET
- name: Training Images
  endpoint:
    path: /customvision/v3.3/Training/projects/YOUR-CUSTOMVISION-PROJECT-ID/images
    method: POST
    data_selector: images
    params: {}
- name: gateways
  endpoint:
    path: /reference/gateways
    method: GET
- name: cameras
  endpoint:
    path: /reference/cameras
    method: GET
- name: streams
  endpoint:
    path: /reference/streams
    method: GET
- name: pipelines
  endpoint:
    path: /reference/pipelines
    method: GET
- name: deployments
  endpoint:
    path: /reference/deployments
    method: POST
- name: events
  endpoint:
    path: /reference/events
    method: GET
- name: files
  endpoint:
    path: /reference/files
    method: GET
- name: models
  endpoint:
    path: /reference/models
    method: GET
- name: tags
  endpoint:
    path: /reference/tags
    method: GET
- name: shared_streams
  endpoint:
    path: /reference/shared_streams
    method: GET
notes:
- All requests to Lumeo's REST API require you to authenticate.
- All requests to Lumeo's REST API require you to authenticate using API Keys.
- No specific notes provided
- Uses OAuth2 with refresh token — requires setup of connected app in Lumeo
- Lumeo is a no-code video analytics platform that enables you to rapidly design,
  deploy, and monitor custom video analytics and other vision-AI enabled applications.
- Trial gateways are limited to a 3 hour runtime, after which they will automatically
  stop. You can restart them anytime from the Console.
- Free accounts are limited to 1 gateway per Workspace, so you will need to delete
  the Trial gateway setup in your account before you can add a new one.
- For customers with a Site-setup Add-on or Premium Support Add-on, first complete
  Steps 1 & 2, and then please reach out to Lumeo support via Help button in Console
  to have us take on the remaining steps.
- Trial gateways are limited to a 3 hour runtime, after which they will automatically
  stop.
- OEMs can customize branding and logo; please reach out to your Lumeo contact if
  you wish to do so.
- Free accounts are limited to 1 gateway per Workspace.
- Ensure that Stream credentials are correct if it is password protected.
- Before sealing the device, we recommend you run the sanity check to ensure that
  the OEM software was setup correctly.
- OEMs can also customize branding and logo; please reach out to your Lumeo contact
  if you wish to do so.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Lumeo will be pre-installed on the correct camera SKU.
- Expanding into Europe and tackling GDPR can definitely feel overwhelming.
- To provision a Lumeo Cloud gateway on your account, please contact support.
- Lumeo Gateway requires unrestricted outbound connectivity to make secure connections
  to various Lumeo services and may not work well with VPN or outbound connectivity
  restricted networks.
- You need these instructions only after you set the device password.
- Lumeo-Ready Jetson devices come with X server disabled to maximize memory available
  for processing video streams.
- You must first deploy pipelines with output RTSP streams on the gateway using Lumeo's
  web console for the Local streams to appear here.
- Lumeo Cloud Gateways are video AI gateways hosted & managed by Lumeo.
- They are ideally suited for scenarios where you can process video in the cloud.
- We recommend using the Engine-only install for public clouds, and installing with
  the Web interface for on-prem devices.
- NO_PROMPT must be used along with passing an explicit command to the installer.
- Ubuntu 24 (preferred) OS (x86)
- At least 50 GB of Disk space
- Instance type must have an Nvidia GPU (XXdn.XXXXX are Nvidia GPUs)
- G4dn.2xlarge is a single T4 GPU with 8 cores which is suitable and recommended for
  most applications
- They make it easy to deploy video analytics in the cloud with a pay-as-you-go model.
- Fargate is not currently supported since it does not allow GPU-based tasks.
- Scaling down the number of Tasks will have those Gateways go offline in the Lumeo
  console.
- Minimum time interval for updates is 2 hours.
- If you receive an error, reboot the instance as it may be required for different
  instance types and the drivers to load properly.
- Ensure you have requested enough quota for g4 instances in your AWS account.
- Access Tokens start with a '$', ensure you use single quotes to prevent shell substitution.
- We have seen from time to time the auto update on the vm to update the Nvidia drivers
  break GCP Nvidia installation. It is best to disable updating the Nvidia driver
  automatically and use the GCP prescribed manual instructions.
- Access Tokens start with a '$', so ensure you use single quotes to prevent shell
  substitution.
- Scaling up will create new gateways with consecutive names (lumeo-gateway-0, lumeo-gateway-1,
  ..) if they didn't exist previously.
- 'lz4c Error: The image refresh progress will utilize lz4c tool, if the Linux host
  PC doesn’t have this tool installed, you may meet the error message as the image
  below.'
- Lumeo Genetec Security Center Integration requires a license part number GSC-1SDK-LUMEO-LGSCI
- Ensure to use SSL Connection for secure communication with Genetec
- Device-specific documentation available for AI Mobile Xavier NX and AI Mobile Orin
  NX.
- Lumeo Genetec Security Center Integration requires a license part number GSC-1SDK-LUMEO-LGSCI.
- WebSDK role must be enabled in Genetec Config Tool.
- Create a Wave user for lumeo, with permissions set to 'Advanced Viewer' and enable
  the 'Allow digest authentication for this user' option.
- Lumeo does not discover the Milestone Bridge automatically.
- Ensure there are no connectivity errors.
- Gateway requires unrestricted outbound connectivity.
- Uses Static IP addresses for Rhombus Cameras
- 'Default username and password are : admin, admin@123. You will be prompted to change
  it on first login.'
- Lumeo does not discover the Milestone Bridge automatically. To set it up, use the
  Add Camera button from a Gateway that can access the Milestone Bridge, and specify
  the Bridge IP address along with the Port number.
- Milestone ONVIF Bridge typically uses Port `580` for ONVIF.
- If you wish to access the Milestone ONVIF Bridge using a Lumeo Cloud gateway, you
  will need to port forward Ports `580` and `554`.
- Refer to your Camera's instructions on how to enable ONVIF.
- Pipelines that generate alerts will do so when the deployment runs.
- File streams are processed as fast as possible (ie as fast as your hardware allows).
- Files uploaded to Lumeo Cloud and any media artifacts generated by the pipeline
  count towards your Lumeo Cloud storage usage.
- The device uses self-signed certificates.
- Lumeo is unable to currently pull live video streams from Rhombus' cloud directly;
  this is something we are actively working on and will update this article when available.
- Use Static IP addresses for Rhombus Cameras
- Port forwarding is needed when trying to connect a camera at your site to a cloud
  gateway.
- Wait for deployment to go from Deploying to Running. This stage can take between
  15-30 minutes on the first run.
- Uploads clips using the Universal Bridge creates a virtual camera which can then
  be configured with a specific pipeline & camera-specific pipeline overrides using
  the Console.
- The Publish to Lumeo Dashboard node that is needed to publish data for this widget
  is available only on Enterprise Plans.
- The Data widget offers various visualization options including Event Count, Object
  Attribute Count, and Node Records Count.
- Stream Widget displays RTSP or WebRTC streams.
- Multistream Widget displays WebRTC streams output from multiple pipelines.
- Files Widget displays recordings generated by Save Clip Node and Save Snapshot Node.
- To enable Advanced Data Access on your workspace, contact support.
- Metadata can be utilized to trigger actions in some nodes.
- These trigger conditions are written in a Dot-notation format.
- Search is available on Lumeo's Core and Enterprise plans with a Lumeo Cloud Storage
  Retention Add-on
- Wait for deployment to go from Deploying to Running. Click on the deployment title
  to view details. Note that this stage can take between 15-30 minutes on the first
  run.
- Push notifications may contain images, text or video clips based on the configuration
  of the Trigger Email alert node.
- To delete your organization, you must contact us using the Help -> Chat with support
  option from the Lumeo console so that we can verify your request and take necessary
  actions to delete the organization and data from Lumeo.
- Each organization starts off with a 'Default workspace'.
- The Data widget offers various visualization options including Event Count, Object
  Attribute Count, Node Records Count, and specific node metadata aggregations.
- The Stream Widget displays RTSP or WebRTC stream outputs.
- The Multistream Widget can display online WebRTC streams based on filter criteria.
- The Files Widget displays recordings generated by Save Clip and Save Snapshot Nodes
  based on specific filters.
- The IFrame Widget displays web pages within Lumeo.
- Workspace Roles are only available on Enterprise plans.
- Password based logins will be automatically disabled after enabling SSO.
- Enter 'Lumeo' as the app name
- 'Name ID format: ''Email'''
- 'Name ID: ''Basic information -> Primary email'''
- Notifications Inbox saves received notifications for 24 hours and then automatically
  clears them.
- If you are an integrator setting up an account for your customer, you should have
  them signup for the account so that they are setup as the Organization's owner,
  and then invite you as a Manager.
- No restrictions on outbound connections to the Internet (UDP, TCP)
- Allow 554 (TCP, UDP) inbound connections from your local network / VMS IP Address
  ranges if you wish to access RTSP streams from the AI Gateway.
- Allow ONVIF (80, 443 TCP & UDP), RTSP (554 TCP & UDP) connections from your cloud
  VPC to your local cameras & VMS.
- Each organization contains one or more Workspaces.
- Workspace ID is required when making requests to the Lumeo API.
- Lumeo AI Gateway makes outbound connections to various cloud services for command
  & control and integrations.
- Requires setup of connected app in Lumeo
- This guide provides step-by-step instructions for setting up SAML2 SSO authentication
  for Lumeo, which is available on Enterprise plans.
- Complete the setup and save the application.
- Lumeo offers free Starter plans, and pay-as-you-go Business plans via self-serve.
- All new accounts start with the free Starter plan.
- Free accounts are limited to 1 gateway per Workspace, so if you already created
  a Trial gateway, you will need to delete that before you can add a new one.
- Lumeo is undergoing a SOC 2 audit to ensure compliance with the SOC 2 standard.
- Uses Universal bridge credentials found in Settings -> Universal Bridge in console.
- If all gateways in the workspace have reached their configured max number of the
  deployments running, the clips are queued at the workspace level to be deployed
  when a gateway deployment slot is available.
- During Beta, the status of the queue is not available through Console but available
  through the Lumeo API.
- Metrics export is available via an Enterprise Add-on.
- Most hardware that Lumeo AI Gateway is deployed on supports dual-nic setups.
- Lumeo AI Gateway software is designed to continue to operate without cloud connectivity
  after configuration.
- Lumeo AI Gateway software is designed to continue to operate without cloud connectivity
  after configuration, for a short duration of time.
- Lumeo AI Gateway supports dual-nic setups for secure connectivity.
- Enterprise plan activations may take up to 1 business day.
- Roboflow Private API Key is required for inference.
- The SMTP Connector only works with devices and clients that allow specifying a SMTP
  server to be used to send emails.
- If a Camera with the From address is not found, the Universal Bridge will create
  a new Virtual Camera in your workspace.
- This node has been deprecated in favor of Occupancy Monitor
- Inject a file or sockets contents as metadata to each frame.
- Node will connect to the Port & IP Address and add received data as metadata.
- Requires a AI Model Node before it in order to function properly.
- Having a Track Objects Node before is optional.
- Blurs any detected objects in the video
- Aggregates Metadata that matches specified wildcard patterns and adds resulting
  value for subsequent nodes to use.
- Detection Models identify objects in a stream, and provide you with the object label
  along with the coordinates for the object's bounding box.
- Classifier Models operate on the output of a Detector Model and identify the type
  of the object detected by the Detector.
- Roboflow API key required for inference.
- Lumeo will create Generic Event Rules and Alarm Rules in HikCentral for each event
  that is triggered by this node.
- 'The stream name in Lumeo must follow the naming convention: ''<AreaName1>/<AreaName2..>/<CameraName>''.'
- Lumeo will send metadata in the Generic Event to HikCentral which can be used to
  create a filter
- Indexes resulting video clips with object, event, text and scene metadata so they
  are searchable using Lumeo AI Search.
- Requires Anthropic API Key for access.
- Digital IO port numbers are not network ports; they refer to digital IO interfaces
  on the Axis device.
- This node does not add any new metadata to the frame.
- Uses OpenAPI for HikCentral integration
- 'Event source must follow naming convention: <AreaName1>/<AreaName2..>/<CameraName>'
- Configure HikCentral to receive Generic Events via HTTPS.
- Ensure stream names follow the naming convention for proper alarm rule creation.
- Lumeo sends metadata in the Generic Event to HikCentral for filtering.
- Calibrate Camera is designed to adjust the camera view to match real-world distances
  accurately.
- Generates textual descriptions of objects within a Region of Interest (ROI), or
  of a ROI within the frame.
- You cannot alter the frame size with this Node currently.
- Return True from the function to continue processing the frame, False to drop the
  frame from further processing.
- Requires username and password for authentication.
- Facility, incident_type, department, and other fields must match the corresponding
  names in your 24x7 account.
- If image_url is not specified, Lumeo's logo is added as the watermark.
- Displays metadata on the video stream
- Lumeo will send the following metadata in the Generic Event to HikCentral.
- This Generic Event can then be used to trigger an Alarm or take other actions.
- Uses FPS measurement interval of 30
- Handles frame metadata with optional display and logging
- Manually process or modify frames and metadata using python code from a specific
  Git repository
- Requires setup of secure raw stream for Rhombus camera.
- Create a new Generic Event in HikCentral with HTTPS transport type and Search match
  type.
- 'Metadata format: https://docs.lumeo.com/docs/line-crossing-counter-node'
- Detects Pose Type for Person objects and using Pose keypoints if available.
- Updated 5 days ago
- Requires setup of a local gateway to process Secure Raw Streams from Rhombus cameras.
- Lumeo HikCentral Integration uses Generic Events to send Events to HikCentral.
- Enable HikCentral OpenAPI to configure Generic Events and Alarms automatically.
- Lumeo will send metadata in the Generic Event to HikCentral.
- The current Lumeo-Rhombus integration requires a local gateway present on-site to
  process the Secure Raw Streams from Rhombus cameras.
- Requires a local gateway present on-site to process the Secure Raw Streams from
  Rhombus cameras.
- The trigger expression must be a valid Dot-notation expression that operates on
  Pipeline Metadata.
- Lumeo will create Generic Event Rules and Alarm Rules in HikCentral when configure_hikcentral
  is enabled.
- Retrieves classifier results based on the similarity of text prompts and images.
- The Generic Detector node is designed to detect objects within a video frame based
  on the similarity of text prompts and the images of objects.
- This Generic Event can be used to trigger an Alarm or take other actions such as
  recording video, sending alerts, messages, etc.
- Use h264 for the widest compatibility with other systems, h265 or VP8 for better
  efficiency.
- This node requires a AI Model Node and a Track Objects Node before it in order to
  function properly.
- Supports both JSON and CSV formats for face data.
- Requires setup of Azure Face API and configuration of person groups.
- The Gemini API requires an API key for authentication.
- Enable HikCentral OpenAPI to configure Generic Events and Alarms.
- This node requires AI Model Node (Vehicle Detection model) -> Model Inference Node
  (License Plate model) -> Track Objects Node prior to it in order to function properly.
- Retrieves classifier results based on the similarity of text prompts and the images
  of objects in a ROI.
- Detect objects based on the similarity of text prompts and the images of objects
  in the frame.
- Requires a local gateway present on-site to process Secure Raw Streams from Rhombus
  cameras.
- Uses local inference with models like InternVL2-1B and InternVL2-2B to analyze and
  answer questions about image content.
- Gemini API Key is required.
- ROI labels and processing mode are required properties.
- Reads a GPIO pin and inserts its state and delta as customizable metadata entries.
- Having a Track Objects Node before is required if using Object Match Patterns else
  you can place it after the Merge Objects node.
- This node requires AI Model Node (Vehicle Detection model) -> Model Inference Node
  (License Plate model) -> Track Objects Node prior to it in order to function properly
  using the 'LPR & Make/Model/Color' recognition mode.
- This Generic Event can be used to trigger an Alarm or take other actions.
- Conditionally allow one or more frames to pass through to the downstream Nodes.
- Typically used to selectively take snapshots, or save clips, or send webhooks when
  specific conditions are met.
- This node requires a Line Crossing Counter before it in order to function properly.
- Current Lumeo-Rhombus integration requires a local gateway present on-site to process
  the Secure Raw Streams from Rhombus cameras.
- The Nvidia NIM Lookup node is designed to perform lookups using the powerful Large
  Vision Models hosted via Nvidia NIM.
- This node collects CPU, GPU, Memory utilization and FPS statistics to profile machine
  performance, and adds them to metadata.
- Lumeo will create Generic Event Rules and Alarm Rules in HikCentral when configured.
- This Generic Event can then be used to trigger an Alarm or take other actions (such
  as recording video, sending alerts, messages, etc).
- 'Create a new Generic Event in HikCentral with Transport Type: HTTPS and Match Type:
  Search.'
- This node publishes pipeline metadata to Elasticsearch periodically or when a trigger
  condition is met.
- If set, ignores the Interval property and schedules publishing at a synchronized
  time.
- Use Lumeo-managed Google account to publish to Sheets. If enabled, share your Google
  sheet with google-drive-connector@lumeo-api.iam.gserviceaccount.com
- Enable HikCentral OpenAPI for automatic event and alarm configuration.
- This node publishes metrics to Lumeo Dashboard for charting and visualization.
- Collects CPU, GPU, Memory utilization and FPS statistics to profile machine performance
- This node allows for reidentifying objects by comparing signatures generated by
  a ReId model.
- Requires setup of Rhombus camera and local gateway to process streams
- Requires setup of HikCentral OpenAPI for automatic configuration.
- Send metadata, snapshots, clips from the pipeline to a HTTP endpoint / API at a
  periodic interval or based on a trigger.
- The `bigquery_credentials` field expects JSON format private key for a service account.
- Uses Lumeo-managed Google account by default for publishing to Sheets
- This node publishes pipeline metadata to the Lumeo Dashboard.
- Send a webhook when a trigger condition is met.
- Lumeo will create Generic Event Rules and Alarm Rules in HikCentral for each event
  that is triggered by this node if 'configure_hikcentral' is enabled.
- Alternatively, setup port forwarding to expose the Secure Raw Stream port (80) publicly.
- Performs scene change and obstruction detection in a specified region of the video
  for OSHA compliance and other use cases.
- Saves snapshot in jpg format along with metadata in JSON format
- Conditional properties based on save_location.
- RTMP or RTMPS server URL to which this stream will be broadcasted. Obtain this from
  YouTube, Mux, Wowza or other streaming providers.
- There is currently no authentication on this RTSP endpoint, since the Stream ID's
  are unique and auto generated for every deployment.
- There is currently no authentication on this WebRTC stream URL
- Must be unique per sync group.
- Analyses line crossings to detect tailgating events.
- rows x columns should match the number of individual streams that are present in
  the Multiplexed Video stream.
- The resolution should factor in the aspect ratio of individual streams present in
  the Multiplexed Video stream and the number of rows and columns configured to prevent
  video stretching.
- Set a trigger based on current time.
- Trigger on these days of the week. If null or empty, trigger on all days.
- Synchronizes metadata & creates video tiles/grids between nodes across one or more
  deployments on the same Gateway.
- Adjust brightness, contrast, sharpen, denoise of ROIs or objects in the video
- Uses Jinja2 template syntax for customizing MQTT messages.
- The tracker only tracks objects that continue to appear in consecutive video frames.
- This node is useful to get downstream nodes to take action (or not) depending on
  the day of week or time of day.
- Requires a valid Genetec license for integration.
- Create a Wave user for Lumeo, with permissions set to Advanced Viewer and enable
  Allow digest authentication for this user.
- Tracker only tracks objects that continue to appear in consecutive video frames.
- 'Genetec requires a specific license for integration: GSC-1SDK-LUMEO-LGSCI.'
- If you imported a Wave stream into Lumeo as a video source, leave the wave_camera_id
  field empty.
- Ensure Analytics Events are Enabled in XProtect Management Client.
- Lumeo will connect to the port using TCP.
- If you setup the Milestone Open Network / ONVIF Bridge as a 'camera' in Lumeo, and
  use one of its streams as the pipeline source, Lumeo will automatically set the
  correct Camera ID for any alarms / events triggered in Milestone.
- This node requires a Stream RTSP Node to be present in the Pipeline to function.
- 'Stream name in Lumeo must follow naming convention: ''<AreaName1>/<AreaName2..>/<CameraName>''.'
- The node sends an Immix Alarm using SMTP when a trigger condition is met.
- Events must be allowed from the IP address of the Lumeo Gateway.
- Milestone Bridge typically uses Port `580` for ONVIF.
- This node requires a Stream RTSP Node to function.
- Requires setup of Secure Raw Streams for Rhombus camera
- Check `Receive via HTTPS` in HikCentral Web Client.
- Uses HTTPS transport type for Generic Events
- Some properties are conditional based on other properties.
- Some properties are conditional based on others.
- This node requires AI Model Node (Vehicle Detection model) -> Model Inference Node
  (License Plate model) -> Track Objects Node -> Model Inference Node (License Plate
  Recognition) prior to it in order to function properly.
- Allows sending notifications via Email or Push when trigger conditions are met.
- The trigger expression must be a valid Dot-notation expression that operates on
  Pipeline Metadata and evaluates to True or False.
- Enabling HikCentral OpenAPI is required for automatic configuration.
- Uses a webhook to send messages to Google Chat.
- Detects camera and/or scene motion in the video.
- Requires a local gateway to process Secure Raw Streams from Rhombus cameras.
- Port forwarding may be needed for remote access.
- Detects scene and camera motion in the video stream.
- Port forwarding can be used as an alternative to access from a Lumeo Cloud gateway.
- You can use the Source Name, Event Name, and Event Description to create filters.
- 'Important: In order for Lumeo to create the appropriate Alarm Rule, the stream
  name in Lumeo must follow this naming convention: <AreaName1>/<AreaName2..>/<CameraName>.'
- Pushover user keys can be obtained from the mobile app or desktop pushover apps.
- 'Lumeo will send the following metadata in the Generic Event to HikCentral: {"Request":{"Source":"Lumeo
  - <Source Name>","Title":"<Event Name>","Describe":"<Event Description>"}}'
- Uses AI model for barcode recognition.
- The Recognize Barcodes node decodes barcodes detected by an AI model.
- Requires Model Inference Node (Pose Detection) prior to it in order to function
  properly.
- This node requires an AI Model Node and a Track Objects Node before it in order
  to function properly.
- This node is a simplified version of the Occupancy Monitor.
- No specific API details or configuration values provided in the documentation.
- Create user for AWS IAM with specified permissions
- Attach policy to allow S3 actions
- Event type and description accept Jinja2 Template Syntax.
- Prefer 'delta' Triggers instead of 'non-delta' triggers
- Custom Trigger metadata is not listed in the Trigger condition dropdowns, but you
  can override the suggestions and specify it nonetheless.
- Event type and description accept Jinja2 Template Syntax for customization.
- Prefer "delta" Triggers instead of "non-delta" triggers
- It is recommended to setup a separate workspace for clip processing.
- Each Workspace comes with a default deployment queue.
- Uploads media files to Lumeo cloud, associates them with a virtual camera, and queues
  them for processing.
- Requires setup of application ID and token for authentication.
- Some objects may require custom parsing of inference outputs
- Some objects may return nulls in deeply nested fields
- YOLO models can be imported to Lumeo without additional conversion.
- Follow the procedure carefully for uploading models.
- Inference engine automatically processes results from Classifiers which output is
  a softmax layer
- Ensure correct values of Project Id, Endpoint and/or Key to avoid errors.
errors:
- '401 Unauthorized: Check API Key or token expiration'
- No specific error patterns provided
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Check box next to the discovered device, which will have the model 'Lumeo-AI-Gateway'.
- Check node documentation for additional ports you need to allow outbound communications
  on.
- 'Camera limits on Username and Password: Some cameras may limit the length of the
  username and password fields.'
- '401 Unauthorized: Check API key and permissions'
- '401 Unauthorized: Ensure API key is valid.'
- '400 Bad Request: Check required parameters in the request'
- '401 Unauthorized: Verify API keys and permissions'
- '404 Not Found: Ensure the endpoint is correct'
- '401 Unauthorized: Check username and password.'
- '400 Bad Request: Ensure all required fields are provided.'
- '400 Bad Request: Check the validity of the trigger condition.'
- '401 Unauthorized: Ensure the Rhombus API key is correct.'
- '401 Unauthorized: Recheck API key'
- '400 Bad Request: Check the parameters sent in the request.'
- '400 Bad Request: Check the request parameters and format.'
- '401 Unauthorized: Verify your API key and secret.'
- '404 Not Found: Ensure the endpoint exists.'
- '400 Bad Request: Check the required parameters are provided.'
- '401 Unauthorized: Recheck API key or permissions.'
- '400 Bad Request: Check the request body and parameters.'
- '401 Unauthorized: Verify the API key.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Check OpenAPI User Key and Secret.'
- '400 Bad Request: Check input parameters.'
- '401 Unauthorized: Verify API key and secret.'
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Check required fields for the event.'
- '401 Unauthorized: Recheck API key or permissions'
- '400 Bad Request: Check the request parameters and body.'
- '401 Unauthorized: Verify the Rhombus API key.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '400 Bad Request: Check event source and trigger conditions.'
- '404 Not Found: Verify the endpoint path is correct.'
- '401 Unauthorized: Check your Rhombus API key'
- '401 Unauthorized: Recheck API key or access permissions'
- '400 Bad Request: Check the request parameters and their format'
- '401 Unauthorized: Check OpenAPI key and secret.'
- '3: Maximum number of times to retry in case of failure'
- '403 Forbidden: Check if the Google account has access to the specified Google Sheet'
- '401 Unauthorized: Check Rhombus API key'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify API key and permissions.'
- '500 Internal Server Error: Try again later.'
- 'Max retries exceeded: Check the webhook URL and authentication settings.'
- '401 Unauthorized: Check OpenAPI key and secret'
- '400 Bad Request: Check if the trigger condition is properly formatted.'
- '401 Unauthorized: Ensure the Rhombus API key is valid.'
- '401 Unauthorized: Check API key or permissions.'
- 'CONNECTION_REFUSED: Check MQTT host and port settings.'
- 'AUTHENTICATION_FAILED: Verify username and password.'
- '400 Bad Request: Check the input values for correctness.'
- '401 Unauthorized: Ensure the username and password are correct.'
- '404 Not Found: The specified resource could not be found.'
- '400 Bad Request: Check the trigger condition or parameters.'
- '401 Unauthorized: Recheck username and password.'
- 'Connection Refused: Ensure the XProtect server is reachable from the Lumeo Gateway.'
- '400 Bad Request: Check your request payload.'
- '401 Unauthorized: Validate your API key.'
- '403 Forbidden: Insufficient permissions to trigger this event.'
- '400 Bad Request: Check request parameters and data format'
- '401 Unauthorized: Ensure correct API key is provided'
- '500 Internal Server Error: Retry the request or contact support'
- '400 Bad Request: Invalid event source or parameters'
- '400 Bad Request: Check the request parameters.'
- '404 Not Found: Ensure the endpoint is correct.'
- '401 Unauthorized: Recheck OpenAPI User Key or Secret'
- 'null: Check if the trigger condition is set correctly.'
- '401 Unauthorized: Check API key and permissions.'
- '400 Bad Request: Validate input parameters.'
- '400 Bad Request: Check the event_source and other required parameters.'
- '401 Unauthorized: Ensure you are using the correct API key.'
- '401 Unauthorized: Check API key validity'
- '400 Bad Request: Ensure all required fields are filled'
- '400 Bad Request: Check your event_source and other parameters.'
- '401 Unauthorized: Verify your OpenAPI credentials.'
- 'INVALID_API_KEY: Check the Rhombus API key'
- 'EVENT_TRIGGER_FAILED: Ensure the trigger conditions are met'
- '401 Unauthorized: Check your Rhombus API key.'
- '400 Bad Request: Check the event parameters.'
- '401 Unauthorized: Ensure Rhombus API key is valid.'
- '500 Internal Server Error: Contact support if the error persists.'
- 'INVALID_REQUEST: Check the request parameters.'
- 'UNSUPPORTED_MEDIA_TYPE: Ensure the media format is supported.'
- 'Unauthorized: Check authentication credentials.'
- '401 Unauthorized: Recheck API token or application ID'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Anthropic API Key
  - Gemini API Key
  - OpenAI API Key
client:
  base_url: https://console.lumeo.com
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
