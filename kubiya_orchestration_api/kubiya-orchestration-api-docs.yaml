resources:
- name: providers
  endpoint:
    path: /providers
    method: GET
    data_selector: providers
- name: switch_provider
  endpoint:
    path: /providers/switch
    method: POST
- name: generate_workflow
  endpoint:
    path: /generate
    method: POST
- name: refine_workflow
  endpoint:
    path: /refine
    method: POST
- name: execute_workflow
  endpoint:
    path: /execute
    method: POST
- name: agents
  endpoint:
    path: /api/v1/agents
    method: GET
- name: tasks
  endpoint:
    path: /api/v1/tasks
    method: POST
- name: sources
  endpoint:
    path: /api/v1/sources
    method: GET
- name: runners
  endpoint:
    path: /api/v3/runners
    method: GET
- name: knowledge
  endpoint:
    path: /api/v1/knowledge
    method: GET
- name: workflow
  endpoint:
    path: /sdk/workflow
    method: GET
    data_selector: results
- name: runners
  endpoint:
    path: api/v3/runners
    method: GET
    data_selector: RUNNERS
- name: workflow_optimizer
  endpoint:
    path: /optimization
    method: POST
    data_selector: strategies
    params: {}
- name: runners
  endpoint:
    path: api/v3/runners
    method: GET
- name: kubiya_agent
  endpoint:
    path: /terraform/resources/agent
    method: POST
- name: kubiya_runner
  endpoint:
    path: /terraform/resources/runner
    method: POST
- name: kubiya_integration
  endpoint:
    path: /terraform/resources/integration
    method: POST
- name: kubiya_source
  endpoint:
    path: /terraform/resources/source
    method: POST
- name: kubiya_webhook
  endpoint:
    path: /terraform/resources/webhook
    method: POST
- name: kubiya_trigger
  endpoint:
    path: /terraform/resources/trigger
    method: POST
- name: kubiya_scheduled_task
  endpoint:
    path: /terraform/resources/scheduled-task
    method: POST
- name: kubiya_secret
  endpoint:
    path: /terraform/resources/secret
    method: POST
- name: kubiya_knowledge
  endpoint:
    path: /terraform/resources/knowledge
    method: POST
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: records
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: records
- name: context_graph
  endpoint:
    path: /api/context-graph
    method: GET
    data_selector: data
    params: {}
- name: kubectl-health-check
  endpoint:
    path: /kubectl/health-check
    method: GET
    data_selector: pods
    params:
      selector: status.phase!=Running
- name: runner
  endpoint:
    path: /api/v1/runners
    method: GET
- name: multi-environment-deployment
  endpoint:
    path: /workflows/multi-environment-deployment
    method: POST
- name: cross-cloud-failover
  endpoint:
    path: /workflows/cross-cloud-failover
    method: POST
- name: kubiya_runner
  endpoint:
    path: /api/v1/runners
    method: GET
    data_selector: runners
- name: microservice
  endpoint:
    path: /custom/resource/microservice
    method: GET
- name: openai
  endpoint:
    path: /v1/models
    method: GET
- name: anthropic
  endpoint:
    path: /v1/models
    method: GET
- name: azure_openai
  endpoint:
    path: /v1/models
    method: GET
- name: model_selection
  endpoint:
    path: /model/selection
    method: GET
    data_selector: models
    params: {}
- name: workflow_generation
  endpoint:
    path: /workflow/generation
    method: POST
    data_selector: workflow
    params: {}
- name: microservice-deployment
  endpoint:
    path: /deployments/microservice
    method: POST
    data_selector: deployment_status
- name: quarterly-release-q2-2024
  endpoint:
    path: /api/release-management
    method: POST
    data_selector: phases
    params: {}
- name: black-friday-capacity-preparation
  endpoint:
    path: /api/capacity-planning
    method: POST
    data_selector: steps
    params: {}
- name: monthly-chaos-testing
  endpoint:
    path: /api/chaos-engineering
    method: POST
    data_selector: experiments
    params: {}
- name: database-performance-investigation
  endpoint:
    path: /api/database-performance
    method: POST
    data_selector: investigation_steps
    params: {}
- name: disaster-recovery-failover
  endpoint:
    path: /api/multi-cloud-orchestration
    method: POST
    data_selector: steps
    params: {}
- name: gdpr-data-retention-compliance
  endpoint:
    path: /api/compliance-automation
    method: POST
    data_selector: steps
    params: {}
- name: general_purpose_agent
  endpoint:
    path: /api/agents/general
    method: GET
- name: devops_agent
  endpoint:
    path: /api/agents/devops
    method: GET
- name: security_agent
  endpoint:
    path: /api/agents/security
    method: GET
- name: data_agent
  endpoint:
    path: /api/agents/data
    method: GET
- name: support_agent
  endpoint:
    path: /api/agents/support
    method: GET
- name: agent
  endpoint:
    path: /composer/agent-configuration
    method: GET
- name: extract
  endpoint:
    path: /extract
    method: POST
    data_selector: RAW_DATA
- name: transform
  endpoint:
    path: /transform
    method: POST
    data_selector: CLEAN_DATA
- name: load
  endpoint:
    path: /load
    method: POST
    data_selector: LOAD_DATA
- name: workflow
  endpoint:
    path: /workflows
    method: POST
    data_selector: data
- name: workflow
  endpoint:
    path: /workflows
    method: GET
    data_selector: data
    params: {}
- name: kubiya
  endpoint:
    path: /mcp/serve
    method: POST
    data_selector: mcpServers.kubiya
- name: kubiya_runner
  endpoint:
    path: /kubiya/kubiya-runner
    method: POST
    data_selector: runner
    params: {}
- name: runner
  endpoint:
    path: /api/runners
    method: POST
    data_selector: runner
    params:
      apiKey: your-api-key-here
      organization: your-org-name
      runnerToken: your-runner-token
- name: runner
  endpoint:
    path: /api/v1/runners
    method: POST
    data_selector: runner
    params: {}
- name: kubiya_runner
  endpoint:
    path: /api/v1/runners
    method: POST
    data_selector: runner
    params: {}
- name: kubiya_runner
  endpoint:
    path: /api/runners
    method: POST
    data_selector: runner
    params: {}
- name: runners
  endpoint:
    path: /kubiya/runner/list
    method: GET
    data_selector: runners
- name: Safe kubectl
  endpoint:
    path: k8s/readonly
    method: GET
    data_selector: description
    params: {}
- name: whitelisted_tools
  endpoint:
    path: /whitelisted_tools
    method: GET
    data_selector: tools
- name: agents
  endpoint:
    path: /agents
    method: GET
- name: tasks
  endpoint:
    path: /tasks
    method: POST
- name: agents
  endpoint:
    path: /api/v1/agents
    method: GET
    data_selector: records
- name: tasks
  endpoint:
    path: /api/v1/tasks
    method: POST
    data_selector: records
- name: agents
  endpoint:
    path: /api/v1/agents
    method: GET
    data_selector: records
- name: tasks
  endpoint:
    path: /api/v1/tasks
    method: POST
    data_selector: records
- name: agents
  endpoint:
    path: /api/v1/agents
    method: GET
    data_selector: records
    params: {}
- name: agent_details
  endpoint:
    path: /api/v1/agents/{agentId}
    method: GET
    data_selector: records
    params: {}
- name: create_agent
  endpoint:
    path: /api/v1/agents
    method: POST
    data_selector: records
    params: {}
- name: update_agent
  endpoint:
    path: /api/v1/agents/{agentId}
    method: PUT
    data_selector: records
    params: {}
- name: delete_agent
  endpoint:
    path: /api/v1/agents/{agentId}
    method: DELETE
    data_selector: records
    params: {}
- name: get_agent_integrations
  endpoint:
    path: /api/v1/agents/{agentId}/integrations
    method: GET
    data_selector: records
    params: {}
- name: activate_agent_integrations
  endpoint:
    path: /api/v1/agents/{agentId}/activate_integrations
    method: GET
    data_selector: records
    params: {}
- name: tasks
  endpoint:
    path: /api/v1/tasks
    method: GET
    data_selector: tasks
    params:
      limit: '50'
- name: sources
  endpoint:
    path: /api/v1/sources
    method: GET
    data_selector: sources
    params: {}
- name: source_by_id
  endpoint:
    path: /api/v1/sources/{sourceId}
    method: GET
    data_selector: source
    params: {}
- name: source_metadata
  endpoint:
    path: /api/v1/sources/{sourceId}/metadata
    method: GET
    data_selector: metadata
    params: {}
- name: load_source
  endpoint:
    path: /api/v1/sources/load
    method: GET
    data_selector: load
    params: {}
- name: create_source
  endpoint:
    path: /api/v1/sources
    method: POST
    data_selector: create
    params: {}
- name: sync_source
  endpoint:
    path: /api/v1/sources/{sourceId}
    method: PUT
    data_selector: sync
    params: {}
- name: delete_source
  endpoint:
    path: /api/v1/sources/{sourceId}
    method: DELETE
    data_selector: delete
    params: {}
- name: get_agent_sources
  endpoint:
    path: /api/v1/sources/agent_sources/{sourceId}
    method: GET
    data_selector: agent_sources
    params: {}
- name: load_zipped_source
  endpoint:
    path: /api/v1/sources/zip/load
    method: PUT
    data_selector: zip_load
    params: {}
- name: create_zipped_source
  endpoint:
    path: /api/v1/sources/zip
    method: PUT
    data_selector: zip_create
    params: {}
- name: runners
  endpoint:
    path: /api/v3/runners
    method: GET
    data_selector: records
- name: runner_details
  endpoint:
    path: /api/v3/runners/{runner}/describe
    method: GET
    data_selector: details
- name: runner_health
  endpoint:
    path: /api/v3/runners/{runner}/health
    method: GET
    data_selector: health
- name: create_runner
  endpoint:
    path: /api/v3/runners/{runner}
    method: POST
    data_selector: create_response
- name: delete_runner
  endpoint:
    path: /api/v3/runners/{runner}
    method: DELETE
    data_selector: delete_response
- name: update_runner_description
  endpoint:
    path: /api/v3/runners/description/{runner}
    method: PUT
    data_selector: update_response
- name: knowledge
  endpoint:
    path: /api/v1/knowledge
    method: GET
    data_selector: results
- name: knowledge_entry
  endpoint:
    path: /api/v1/knowledge/{knowledgeId}
    method: GET
    data_selector: results
- name: create_knowledge_entry
  endpoint:
    path: /api/v1/knowledge
    method: POST
    data_selector: results
- name: update_knowledge_entry
  endpoint:
    path: /api/v1/knowledge/{knowledgeId}
    method: PUT
    data_selector: results
- name: delete_knowledge_entry
  endpoint:
    path: /api/v1/knowledge/{knowledgeId}
    method: DELETE
    data_selector: results
- name: search_knowledge
  endpoint:
    path: /api/v1/knowledge/search
    method: GET
    data_selector: results
- name: get_version_history
  endpoint:
    path: /api/v1/knowledge/{knowledgeId}/versions
    method: GET
    data_selector: results
- name: discover
  endpoint:
    path: /discover
    method: GET
- name: compose
  endpoint:
    path: /compose
    method: POST
- name: health
  endpoint:
    path: /health
    method: GET
- name: providers
  endpoint:
    path: /providers
    method: GET
- name: discover
  endpoint:
    path: /discover
    method: GET
    data_selector: server
    params: {}
- name: compose
  endpoint:
    path: /compose
    method: POST
    data_selector: ''
    params: {}
- name: compose
  endpoint:
    path: /compose
    method: POST
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: data
- name: execute_workflow
  endpoint:
    path: /execute_workflow
    method: POST
    data_selector: result
- name: workflow
  endpoint:
    path: /api/v1/workflow
    method: POST
    data_selector: workflow
- name: agents
  endpoint:
    path: /sdk/client/agents
    method: GET
    data_selector: records
- name: workflows
  endpoint:
    path: /sdk/client/workflows
    method: GET
    data_selector: records
- name: integrations
  endpoint:
    path: /sdk/client/integrations
    method: GET
    data_selector: records
- name: secrets
  endpoint:
    path: /sdk/client/secrets
    method: GET
    data_selector: records
- name: knowledge
  endpoint:
    path: /sdk/client/knowledge
    method: GET
    data_selector: records
- name: custom_step
  endpoint:
    path: /kubiya_workflow_sdk/dsl/extensions.py
    method: GET
    data_selector: records
    params: {}
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: records
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: records
- name: secrets
  endpoint:
    path: /secrets
    method: GET
    data_selector: records
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: workflows
  endpoint:
    path: /workflows
    method: POST
    data_selector: workflows
- name: integrations
  endpoint:
    path: /integrations
    method: POST
    data_selector: integrations
- name: secrets
  endpoint:
    path: /secrets
    method: POST
    data_selector: secrets
- name: knowledge
  endpoint:
    path: /knowledge
    method: POST
    data_selector: knowledge
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
- name: integrations
  endpoint:
    path: /integrations
    method: GET
    data_selector: integrations
- name: secrets
  endpoint:
    path: /secrets
    method: GET
    data_selector: secrets
- name: knowledge
  endpoint:
    path: /knowledge
    method: GET
    data_selector: knowledge
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: records
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: records
- name: integrations
  endpoint:
    path: /integrations
    method: GET
    data_selector: records
- name: secrets
  endpoint:
    path: /secrets
    method: GET
    data_selector: records
- name: knowledge
  endpoint:
    path: /knowledge
    method: GET
    data_selector: records
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: access
  endpoint:
    path: /agents/access
    method: GET
    data_selector: access
- name: env
  endpoint:
    path: /agents/env
    method: GET
    data_selector: environment_variables
- name: integrations
  endpoint:
    path: /agents/integrations
    method: GET
    data_selector: integrations
- name: prompt
  endpoint:
    path: /agents/prompt
    method: GET
    data_selector: ai_instructions
- name: secrets
  endpoint:
    path: /agents/secrets
    method: GET
    data_selector: secrets
- name: tools
  endpoint:
    path: /agents/tools
    method: GET
    data_selector: tools
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
    params: {}
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
    params: {}
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: agent_access
  endpoint:
    path: /agents/access
    method: GET
    data_selector: access
- name: agent_env
  endpoint:
    path: /agents/env
    method: GET
    data_selector: environment
- name: agent_integrations
  endpoint:
    path: /agents/integrations
    method: GET
    data_selector: integrations
- name: agent_prompt
  endpoint:
    path: /agents/prompt
    method: GET
    data_selector: instructions
- name: agent_secrets
  endpoint:
    path: /agents/secrets
    method: GET
    data_selector: secrets
- name: agent_tools
  endpoint:
    path: /agents/tools
    method: GET
    data_selector: tools
- name: workflow_execution
  endpoint:
    path: /workflows/execute
    method: POST
    data_selector: event
    params: {}
- name: workflow_listing
  endpoint:
    path: /workflows/list
    method: GET
    data_selector: workflows
    params:
      filter: all
      limit: 20
      offset: 0
- name: workflows
  endpoint:
    path: /workflows
    method: POST
    data_selector: workflow_execution
    params: {}
- name: workflow_executions
  endpoint:
    path: /workflows/executions
    method: GET
    data_selector: workflows
    params: {}
- name: workflows
  endpoint:
    path: /workflows
    method: POST
    data_selector: results
- name: workflow_execution
  endpoint:
    path: /workflows/execute
    method: POST
    data_selector: result
    params: {}
- name: list_executions
  endpoint:
    path: /workflows/list
    method: GET
    data_selector: workflows
    params:
      filter: all
      limit: 20
      offset: 0
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
    params:
      filter: all
      limit: 20
      offset: 0
- name: workflow_execution
  endpoint:
    path: /workflows/execute
    method: POST
    data_selector: result
- name: workflow_listing
  endpoint:
    path: /workflows/list
    method: GET
    data_selector: workflows
- name: workflow_execution
  endpoint:
    path: /workflows/execute
    method: POST
    data_selector: result
    params: {}
- name: workflow_listing
  endpoint:
    path: /workflows/list
    method: GET
    data_selector: workflows
    params:
      filter: all
      limit: 20
      offset: 0
- name: workflow_execution
  endpoint:
    path: /workflows
    method: POST
    data_selector: execution
    params: {}
- name: workflow_listing
  endpoint:
    path: /workflows/list
    method: GET
    data_selector: workflows
    params:
      filter: all
      limit: 20
      offset: 0
- name: github_app
  endpoint:
    path: /integrations/github_app
    method: POST
    data_selector: result
    params: {}
- name: github_app
  endpoint:
    path: /integrations/github_app
    method: POST
    data_selector: result
    params: {}
- name: secrets
  endpoint:
    path: /secrets
    method: GET
    data_selector: secrets
- name: secrets
  endpoint:
    path: /secrets
    method: GET
    data_selector: secrets
    params: {}
- name: knowledge_query
  endpoint:
    path: /knowledge/query
    method: POST
    data_selector: response
    params: {}
- name: knowledge_query
  endpoint:
    path: /knowledge/query
    method: POST
    data_selector: response
    params: {}
- name: knowledge_service
  endpoint:
    path: /knowledge
    method: POST
    data_selector: response
    params: {}
- name: knowledge_service
  endpoint:
    path: /knowledge
    method: POST
    data_selector: response
    params: {}
- name: knowledge_query
  endpoint:
    path: /knowledge/query
    method: POST
    data_selector: response
    params: {}
- name: check-service-status
  endpoint:
    path: /health
    method: GET
    data_selector: status
- name: deploy-application
  endpoint:
    path: /deploy
    method: POST
    data_selector: deployment_status
- name: validate-deployment-prerequisites
  endpoint:
    path: /validate
    method: POST
    data_selector: validation_result
- name: external-api-call
  endpoint:
    path: /data
    method: GET
    data_selector: api_response
- name: check-service-status
  endpoint:
    path: /health
    method: GET
- name: deploy-application
  endpoint:
    path: /deploy
    method: POST
- name: validate-deployment-prerequisites
  endpoint:
    path: /validate-deployment
    method: POST
- name: database-migration
  endpoint:
    path: /migrate
    method: POST
- name: rollback-deployment
  endpoint:
    path: /rollback
    method: POST
- name: notify-staging-team
  endpoint:
    path: /notify
    method: POST
- name: check-service-status
  endpoint:
    path: /health
    method: GET
- name: deploy-application
  endpoint:
    path: /deploy
    method: POST
- name: validate-deployment-prerequisites
  endpoint:
    path: /validate
    method: POST
- name: database-migration
  endpoint:
    path: /migrate
    method: POST
- name: external-api-call
  endpoint:
    path: /data
    method: GET
- name: lookup-user
  endpoint:
    path: /users
    method: GET
- name: check-service-status
  endpoint:
    path: /health
    method: GET
- name: deploy-application
  endpoint:
    path: /deploy
    method: POST
- name: validate-deployment-prerequisites
  endpoint:
    path: /validate
    method: GET
- name: database-migration
  endpoint:
    path: /migrate
    method: POST
- name: external-api-call
  endpoint:
    path: /external-api
    method: POST
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: status
    params: {}
- name: deployment
  endpoint:
    path: /deploy
    method: POST
    data_selector: result
    params: {}
- name: health_check
  endpoint:
    path: /health
    method: GET
- name: deploy_application
  endpoint:
    path: /deploy
    method: POST
- name: backup-production-db
  endpoint:
    path: /backup-production-db
    method: POST
    data_selector: result
    params:
      database: production
      backup_location: /secure-backups/
- name: cleanup-failed-deployment
  endpoint:
    path: /cleanup-failed-deployment
    method: POST
    data_selector: result
    params:
      namespace: ${ENVIRONMENT}
      deployment: ${SERVICE_NAME}
- name: send-notification
  endpoint:
    path: /send-notification
    method: POST
    data_selector: result
    params:
      channel: '#deployments'
      message: Deployment completed
- name: security-vulnerability-scan
  endpoint:
    path: /security-vulnerability-scan
    method: POST
    data_selector: result
    params:
      image: ${DOCKER_IMAGE}:${TAG}
      severity_threshold: high
- name: request-deployment-approval
  endpoint:
    path: /request-deployment-approval
    method: POST
    data_selector: result
    params:
      approvers:
      - platform-team@company.com
      timeout: 2h
- name: deploy-to-production
  endpoint:
    path: /deploy-to-production
    method: POST
    data_selector: result
    params:
      environment: production
      replicas: 5
- name: deploy-to-staging
  endpoint:
    path: /deploy-to-staging
    method: POST
    data_selector: result
    params:
      environment: staging
      replicas: 2
- name: deploy-to-development
  endpoint:
    path: /deploy-to-development
    method: POST
    data_selector: result
    params:
      environment: development
      replicas: 1
- name: high-priority-deployment
  endpoint:
    path: /high-priority-deployment
    method: POST
    data_selector: result
    params:
      service: ${SERVICE_NAME}
      priority: high
- name: production_backup
  endpoint:
    path: /backup-production-db
    method: POST
    data_selector: ''
    params: {}
- name: cleanup_step
  endpoint:
    path: /cleanup-failed-deployment
    method: POST
    data_selector: ''
    params: {}
- name: notification_step
  endpoint:
    path: /send-notification
    method: POST
    data_selector: ''
    params: {}
- name: security_scan
  endpoint:
    path: /security-vulnerability-scan
    method: POST
    data_selector: ''
    params: {}
- name: environment_branch
  endpoint:
    path: /branch
    method: POST
    data_selector: ''
    params: {}
- name: service_deployment_branch
  endpoint:
    path: /service-deployment
    method: POST
    data_selector: ''
    params: {}
- name: complex_condition
  endpoint:
    path: /high-priority-deployment
    method: POST
    data_selector: ''
    params: {}
- name: maintenance_deployment
  endpoint:
    path: /maintenance-deployment
    method: POST
    data_selector: ''
    params: {}
- name: health_check
  endpoint:
    path: /service-health-check
    method: POST
    data_selector: ''
    params: {}
- name: data_check
  endpoint:
    path: /check-data-volume
    method: POST
    data_selector: ''
    params: {}
- name: deployment_strategy
  endpoint:
    path: /deployment-strategy
    method: POST
    data_selector: ''
    params: {}
- name: service-health-checker
  endpoint:
    path: /tools/service-health-checker
    method: POST
    data_selector: result
    params: {}
- name: postgres-query
  endpoint:
    path: /tools/postgres-query
    method: POST
    data_selector: result
    params: {}
- name: aws-cost-analyzer
  endpoint:
    path: /tools/aws-cost-analyzer
    method: POST
    data_selector: result
    params: {}
- name: github-pr-analyzer
  endpoint:
    path: /tools/github-pr-analyzer
    method: POST
    data_selector: result
    params: {}
- name: prometheus-alert-manager
  endpoint:
    path: /tools/prometheus-alert-manager
    method: POST
    data_selector: result
    params: {}
- name: validated_tool
  endpoint:
    path: /validated-tool
    method: POST
    data_selector: results
- name: query_range
  endpoint:
    path: /api/v1/query_range
    method: GET
    data_selector: data.result
    params: {}
- name: query
  endpoint:
    path: /api/v1/query
    method: GET
    data_selector: data.result
    params: {}
- name: service-health-checker
  endpoint:
    path: /services/health-check
    method: GET
    data_selector: status
    params: {}
- name: aws-cost-analyzer
  endpoint:
    path: /services/aws-costs
    method: POST
    data_selector: cost_analysis
    params: {}
- name: query_range
  endpoint:
    path: /api/v1/query_range
    method: GET
    params:
      query: query
      start: start_time
      end: end_time
      step: step
- name: query
  endpoint:
    path: /api/v1/query
    method: GET
    params:
      query: query
- name: file-processor
  endpoint:
    path: /sdk/tools/docker-tools
    method: POST
    data_selector: tool
    params: {}
- name: ml-model-trainer
  endpoint:
    path: /sdk/tools/docker-tools
    method: POST
    data_selector: tool
    params: {}
- name: nodejs-app-builder
  endpoint:
    path: /sdk/tools/docker-tools
    method: POST
    data_selector: tool
    params: {}
- name: file-processor
  endpoint:
    path: /api/tools/file-processor
    method: POST
    data_selector: result
- name: ml-model-trainer
  endpoint:
    path: /api/tools/ml-model-trainer
    method: POST
    data_selector: result
- name: nodejs-app-builder
  endpoint:
    path: /api/tools/nodejs-app-builder
    method: POST
    data_selector: result
- name: database-backup-manager
  endpoint:
    path: /api/tools/database-backup-manager
    method: POST
    data_selector: result
- name: secure-api-client
  endpoint:
    path: /api/tools/secure-api-client
    method: POST
    data_selector: result
- name: log_analysis
  endpoint:
    path: /analyze/logs
    method: POST
    data_selector: results
- name: file-processor
  endpoint:
    path: /file-processor
    method: POST
    data_selector: result
    params: {}
- name: ml-model-trainer
  endpoint:
    path: /ml-model-trainer
    method: POST
    data_selector: result
    params: {}
- name: nodejs-app-builder
  endpoint:
    path: /nodejs-app-builder
    method: POST
    data_selector: result
    params: {}
- name: database-backup-manager
  endpoint:
    path: /database-backup-manager
    method: POST
    data_selector: result
    params: {}
- name: secure-api-client
  endpoint:
    path: /secure-api-client
    method: POST
    data_selector: result
    params: {}
notes:
- Comprehensive guide to the Kubiya Workflow SDK architecture, capabilities, and advanced
  features.
- API key is read from KUBIYA_API_KEY environment variable
- Never commit API keys to version control
- Uses OAuth2 with refresh token — requires setup of connected app in api
- The Kubiya CLI brings AI-powered automation directly to your terminal.
- Uses API key directly for authentication
- Uses API key directly for authentication.
- Interactive login opens browser
- You can use API key directly for authentication
- The CLI will automatically create an account if you don’t have one.
- First-time users will be prompted to create an account.
- First time? The CLI will automatically create an account if you don’t have one.
  No credit card required to get started.
- First time signing up? You’ll get immediate access to explore the platform with
  sample integrations and a hosted runner. No credit card required.
- API access to Kubiya platform is required
- Uses API key for authentication — requires setup of API keys in kubiya
- Always test your SDK integrations in staging environments first.
- Use parameterized workflows to avoid hardcoded production values in your code.
- Credentials encrypted at rest with AES-256
- All API communication over TLS 1.3
- Secrets never logged or exposed in plaintext
- Kubiya’s Context Graph provides situational awareness for automation.
- Stateless, containerized execution for reliable automation
- Tools run anywhere without installation or configuration
- Each tool runs in its own process namespace with no access to host processes
- All execution happens on your infrastructure
- Sensitive data never leaves your environment
- Runners solve critical challenges for production automation
- Start with 3 runner replicas for high availability, then use metrics to determine
  optimal scaling parameters for your workload patterns.
- Uses API keys for authentication
- Different AI providers have their own configurations
- Uses OpenAI API key for authentication
- Ensure to configure API key correctly
- Kubiya supports multiple AI providers.
- When using cloud-based AI models, your prompts and context may be processed by third-party
  services.
- Workflows are where everything comes together.
- AI generates workflows that understand your specific environment.
- Use Claude Sonnet 4 for most general-purpose tasks
- Choose Claude Opus 4 for complex reasoning and analysis
- Select GPT-4o for multimodal tasks requiring vision capabilities
- Use kubiya-hosted for production workloads (managed and recommended)
- Choose specialized runners for specific security or compliance requirements
- Test configurations in staging environments before production deployment
- No authentication required for public repositories
- Requires authentication for private repositories
- MCP servers run in isolated environments.
- All MCP tool usage is logged and trackable.
- Monitor system activity, performance metrics, and workflow execution
- 'Use specific timeouts: Set reasonable timeouts for each step to prevent hanging.'
- 'Implement proper cleanup: Always include cleanup steps that run even on failure.'
- 'Monitor resource usage: Set appropriate CPU and memory limits.'
- 'Handle secrets securely: Use environment variables for sensitive data, never hardcode.'
- 'Test failure scenarios: Verify your error handling and retry logic work correctly.'
- 'Use meaningful step names: Make workflow execution logs easy to understand.'
- 'Optimize for parallelism: Identify independent steps that can run simultaneously.'
- MCP connections use your existing Kubiya API keys
- All executions go through Kubiya’s normal security controls
- Ensure you have a valid Kubiya API key from https://app.kubiya.ai
- Ensure you have a valid Kubiya API key.
- Kubiya CLI should be installed.
- Requires setup of connected app in kubiya
- Monitoring & telemetry using Azure Prometheus and OpenTelemetry
- Requires a Kubernetes cluster (v1.20+) and Helm 3.x installed
- Ensure kubectl access to your cluster
- Requires Kubernetes cluster (v1.20+) and Helm 3.x installed
- Enable persistent storage for state
- Requires Kubernetes cluster (v1.20+) and Helm 3.x installed.
- Kubiya organization access needed.
- Set your API key using export KUBIYA_API_KEY='kb-your-api-key-here'
- Uses API key for authentication
- Requires setup of connected app in Kubiya
- Required - Your Kubiya API key
- Requires setup of connected app in api
- 'API Key Not Set: Check environment'
- 'Runner Health Issues: Check runner status'
- Requires API key for access
- API Key must be set using export KUBIYA_API_KEY="kb-your-key"
- The Kubiya CLI provides enterprise-grade automation capabilities with comprehensive
  policy enforcement.
- Increase container memory limits
- Optimize tool execution
- Implement resource monitoring
- The default runner has changed from `core-testing-2` to `auto`.
- Enhanced error handling and retry logic
- All MCP server interactions require a valid Kubiya API key configured in the environment.
- 'Standard tier: 100 requests per minute'
- 'Enterprise tier: 1000 requests per minute'
- 'Burst limit: 5x the standard rate for 30 seconds'
- API key validation on every request
- User context propagation to execution environment
- Agent Servers support various authentication methods including Bearer Tokens and
  OAuth.
- No authentication required for the discovery endpoint.
- The Compose API is the main entry point for AI-powered workflow generation.
- The compose API allows for workflow generation and execution.
- API Key required for authentication
- Organization ID is needed for API access
- Uses API key for authentication.
- Some objects like Contact may return nulls in deeply nested fields
- Always wrap service calls in try-except blocks
- Comprehensive error handling with agent-specific context.
- Comprehensive error handling with agent-specific context
- Requires API key for authentication.
- Ensure proper environment configuration for agent management.
- Ensure to manage agent permissions appropriately.
- Comprehensive error handling is provided for all agent operations.
- Ensure to validate agent configuration before operations.
- All agent operations can throw AgentError exceptions with detailed context.
- Supports real-time streaming of workflow execution logs
- Provides detailed error reporting with workflow-specific context
- Supports real-time streaming of workflow execution logs and detailed error reporting.
- Real-time streaming support for workflow execution
- Comprehensive error handling with workflow-specific context
- Supports real-time streaming of execution logs
- Workflow execution can fail with detailed error context
- The Kubiya Workflows service provides a powerful interface for executing and managing
  workflows.
- Execution management allows listing and filtering workflow executions.
- Supports multiple runners for workflow execution
- Real-time streaming support is available for workflow execution.
- Supports real-time streaming of workflow execution logs.
- Requires specific error handling for WorkflowExecutionError.
- Never Log Secret Values
- Use Descriptive Names and Descriptions
- Handle File Operations Safely
- Implement Proper Secret Rotation
- Validate Secret Access Patterns
- Securely retrieve secret values when needed
- Full create, read, update, delete functionality
- Optional streaming support for real-time updates
- User context can enhance query results
- Error handling is basic with timeout detection
- The Knowledge service provides a simple interface for querying the central knowledge
  base.
- Optional streaming support for real-time updates.
- Optional streaming responses for real-time updates
- User context is optional for queries
- Real-time streaming responses for real-time updates are optional.
- Optional streaming responses for real-time updates.
- Optional user and organization context for queries.
- 'Real-time Streaming: Optional streaming responses for real-time updates'
- Basic error handling with timeout detection
- The Knowledge service respects several environment variables for configuration.
- Stream search results in real-time (default behavior).
- The Knowledge service provides real-time streaming support.
- The Knowledge service provides basic error handling for different failure scenarios.
- Real-time streaming responses for real-time updates is optional.
- Define workflows as code with Kubiya’s Python DSL
- The Kubiya Workflow DSL allows you to define complex automation workflows using
  Python
- Some objects may return nulls in deeply nested fields
- Use descriptive, action-oriented names
- Include the purpose and context
- Steps are the fundamental building blocks for workflow automation.
- Uses HTTP API steps for RESTful API calls
- Step with custom timeout
- Uses HTTP client for API calls
- Some API endpoints may require specific headers
- Steps are the fundamental building blocks for workflows.
- Each step can execute independently or as part of a larger workflow.
- Robust error handling and recovery strategies in workflows
- Schedule retry for later
- Testing workflows is essential for ensuring reliability and correctness.
- Separate unit tests from integration tests
- Use descriptive test names that explain the scenario
- Group related tests in test classes
- Use fixtures for common test data and mocks
- Some tools may have unique configuration requirements
- Uses OAuth2 with refresh token — requires setup of connected app in Kubiya
- Some endpoints may have rate limits.
- Uses Redis for caching log parsing results
- Required secrets (API_KEY, CLIENT_SECRET) not found
- Data processing with comprehensive error handling
errors:
- '400: Bad Request'
- '401: Unauthorized'
- '404: Not Found'
- '429: Rate Limited'
- '500: Server Error'
- '400: Bad Request (invalid parameters)'
- '401: Unauthorized (invalid API key)'
- '403: Forbidden (insufficient permissions)'
- '404: Not Found (resource doesn’t exist)'
- '500: Internal Server Error'
- WorkflowError
- StepError
- ValidationError
- ExecutionError
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Verify API key and permissions'
- '401 Unauthorized: Recheck API key or permissions'
- '400 Bad Request: Service and version required'
- Exponential backoff for transient failures
- Circuit breaker pattern for failing services
- Graceful degradation when services are unavailable
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API key or organization ID'
- '429 Too Many Requests: Throttle API calls or try again later'
- '400 Bad Request: Invalid input parameters.'
- '401 Unauthorized: Check API keys or tokens.'
- Check network access and firewall settings.
- Verify API keys and credentials are current.
- 'Connection Issues: Verify your API key and organization name are correct'
- 'Permission Errors: Ensure your API key has the necessary permissions for the workflows
  you want to execute'
- 'Workflow Not Found: Check that the workflow name matches exactly (case-sensitive)'
- Verify Kubiya CLI is installed.
- Check API key.
- 'RUNNER_NOT_CONNECTING: Check your configuration and network policies'
- 'RUNNER_NOT_CONNECTING: Check your runner configuration and network settings'
- '401 Unauthorized: Check API key and runner token.'
- 'Resource Constraints: Check resource usage.'
- 'Network Issues: Test connectivity to the API.'
- '401 Unauthorized: Recheck API key validity'
- '401 Unauthorized: Recheck API key'
- 'API Key Not Set: Check environment'
- 'Runner Health Issues: Check runner status'
- '401 Unauthorized: Verify API key is correct and not expired'
- Check API key format (should include Bearer prefix)
- Ensure proper environment variable configuration
- 'Cannot connect to Kubiya services: Check network connectivity, verify firewall
  settings, ensure correct endpoint URLs'
- '401 Unauthorized: Check API key format (should include `Bearer` prefix)'
- '401 Unauthorized: Ensure proper environment variable configuration'
- '401 Unauthorized: Check API key format (should include Bearer prefix)'
- Missing API Key
- Invalid API Key
- Insufficient Permissions
- Rate Limited
- 'AUTH_REQUIRED: API key is required for this endpoint'
- 'INVALID_API_KEY: The provided API key is not valid or has been revoked'
- 'INSUFFICIENT_SCOPE: API key does not have required scope: agents:write'
- 'RATE_LIMITED: Too many requests. Please retry after 60 seconds'
- '400: Bad Request - Invalid parameters or request body'
- '401: Unauthorized - Invalid or missing API key'
- '403: Forbidden - Insufficient permissions'
- '404: Not Found - Resource doesn’t exist'
- '400: Bad Request - Invalid request body or missing required fields'
- '401: Unauthorized - API key is missing or invalid'
- '403: Forbidden - The API key doesn’t have permission to perform this action'
- '404: Not Found - The specified source was not found'
- '500: Internal Server Error - An unexpected error occurred on the server'
- '1001: Authentication Failed'
- '1002: Policy Violation'
- '1003: Runner Unavailable'
- '1004: Tool Not Found'
- '1005: Execution Timeout'
- '404: Endpoint not found'
- '500: Server error'
- 'Timeout: Network timeout'
- 'Generation failed: Check input parameters'
- Validation errors are automatically handled
- 'Execution error: Check if the task is executable'
- 'ProviderError: Handle generation failures'
- 'AuthenticationError: Invalid API key'
- '404 Not Found: Check the endpoint path'
- '500 Internal Server Error: Retry the request'
- 'KubiyaError: Base exception for all SDK errors.'
- 'AuthenticationError: Raised for authentication failures.'
- 'ValidationError: Raised for workflow validation failures.'
- 'ExecutionError: Raised for workflow execution failures.'
- 'ValidationError: Validation failed'
- 'ExecutionError: Workflow execution failed'
- 'AgentError: Agent operation failed'
- 'WorkflowExecutionError: Workflow execution failed'
- 'IntegrationError: Integration operation failed'
- 'IntegrationError: Integration failed'
- 'IntegrationNotFoundError: Integration already exists'
- 'SecretError: Secret operation failed'
- 'SecretValidationError: Secret validation failed'
- 'KnowledgeError: Knowledge query failed'
- 'IntegrationError: Integration activation failed'
- Agent operation failed
- Workflow execution failed
- Integration failed
- 'Access management failed: Access management issues'
- 'Environment management failed: Issues with environment variables'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify API key validity.'
- '404 Not Found: Ensure the resource path is correct.'
- '401 Unauthorized: Recheck API key.'
- 'AgentError: Detailed context about the failure.'
- 'Agent operation failed: {e}'
- 'Validation failed: {e}'
- 'AgentError: Detailed context about agent operation failures.'
- 'ValidationError: For input validation issues.'
- 'AgentError: Agent operation failed.'
- 'WorkflowExecutionError: Execution failed for the workflow'
- 'WorkflowExecutionError: Thrown when workflow execution fails.'
- 'WorkflowExecutionError: Check if failure occurred at specific step'
- 'Invalid workflow JSON: Check your JSON syntax'
- 'WorkflowExecutionError: Execution failed with detailed context'
- 'WorkflowExecutionError: Execution failed during workflow execution.'
- 'WorkflowExecutionError: Execution failed'
- 'WorkflowExecutionError: Thrown when workflow execution fails'
- 'Invalid workflow JSON: Workflow definition contains invalid JSON'
- 'WorkflowExecutionError: Thrown when a workflow execution fails.'
- 'WorkflowExecutionError: Execution failed due to workflow errors.'
- 'Invalid workflow JSON: Check your JSON syntax.'
- 'IntegrationError: Activation failed'
- 'SecretValidationError: Validation failed'
- 'SecretValidationError: Validation failed: {error message}'
- 'SecretError: Secret operation failed: {error message}'
- 'Validation failed: Secret name must not be empty'
- 'Validation failed: Secret value must be provided'
- 'Secret operation failed: File not found'
- 'SecretValidationError: Validation failed - handle user input issues'
- 'SecretError: Secret operation failed - handle operational errors'
- 'KnowledgeError: Check your query format and try again.'
- 'KnowledgeError: Query failed'
- 'timeout: The knowledge base might be busy. Try again in a few moments.'
- 'deadline exceeded: Your query might be too complex. Try simplifying it.'
- 'KnowledgeError: Thrown when knowledge base queries fail'
- 'KnowledgeError: Thrown when knowledge base queries fail.'
- 'KnowledgeError: thrown when knowledge base queries fail.'
- '500 Internal Server Error: Server-side issue'
- '401 Unauthorized: Check authentication credentials'
- '400 Bad Request: Check your input parameters'
- '401 Unauthorized: Verify your authentication tokens'
- '500 Internal Server Error: Retry the request later'
- Request timeout
- Connection error
- Unsupported action
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - KubiyaClient
  - AgentError
  - OAuthToken
client:
  base_url: https://api.kubiya.ai
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
