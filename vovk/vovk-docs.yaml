resources:
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: update_user
  endpoint:
    path: /users/{id}
    method: PUT
    data_selector: records
    params: {}
- name: UserController
  endpoint:
    path: users/{id}
    method: POST
    data_selector: response
    params: {}
- name: StreamController
  endpoint:
    path: stream/completions
    method: POST
    data_selector: response
    params: {}
- name: greetings
  endpoint:
    path: /api/greetings/greeting
    method: GET
    data_selector: greeting
- name: user
  endpoint:
    path: /api/users/{id}
    method: POST
- name: streamTokens
  endpoint:
    path: /api/streams/tokens
    method: GET
- name: updateUser
  endpoint:
    path: /users/{id}
    method: POST
    data_selector: body
    params:
      id: uuid
- name: tokens
  endpoint:
    path: /streams/tokens
    method: GET
    data_selector: iteration
- name: stream_tokens
  endpoint:
    path: /streamTokens
    method: GET
    data_selector: data
- name: update_user
  endpoint:
    path: /updateUser
    method: POST
    data_selector: response
- name: update_user
  endpoint:
    path: /user/update
    method: POST
    data_selector: response
    params: {}
- name: get_spec
  endpoint:
    path: /openapi/spec
    method: GET
    data_selector: info
    params: {}
- name: stream_tokens
  endpoint:
    path: /stream/tokens
    method: GET
    data_selector: messages
    params: {}
- name: update_user
  endpoint:
    path: /user_rpc/update_user
    method: POST
    data_selector: response
    params:
      id: 123e4567-e89b-12d3-a456-426614174000
- name: get_spec
  endpoint:
    path: /open_api_rpc/get_spec
    method: GET
    data_selector: spec
    params: {}
- name: stream_tokens
  endpoint:
    path: /stream_rpc/stream_tokens
    method: GET
    data_selector: stream
    params: {}
- name: OpenAPI spec
  endpoint:
    path: /openapi.json
    method: GET
    data_selector: openapi
- name: foo
  endpoint:
    path: greeting
    method: POST
    data_selector: handlers
    params: {}
- name: UserController
  endpoint:
    path: /users/{id}
    method: POST
    data_selector: body
    params: {}
- name: vovk-ajv
  endpoint:
    path: /vovk-ajv
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /users/{id}
    method: POST
    data_selector: params
    params: {}
- name: root
  endpoint:
    path: /api/[[...slug]]
    method: GET
- name: foo
  endpoint:
    path: /api/foo/[[...slug]]
    method: GET
- name: foo/bar/baz
  endpoint:
    path: /api/foo/bar/baz/[[...slug]]
    method: GET
- name: static-params
  endpoint:
    path: /static-params/{section}/page{page}.json
    method: GET
    data_selector: params
    params: {}
- name: User
  endpoint:
    path: /api/users
    method: PUT
    data_selector: ''
    params: {}
- name: UserController
  endpoint:
    method: PUT
- name: UserController
  endpoint:
    method: POST
- name: UserController
  endpoint:
    method: GET
- name: user
  endpoint:
    path: /users/{id}
    method: POST
    data_selector: response
    params: {}
- name: completions
  endpoint:
    path: /stream/completions
    method: POST
    data_selector: iteration
    params: {}
- name: tokens
  endpoint:
    path: /stream/tokens
    method: GET
    data_selector: tokens
    params: {}
- name: update_user
  endpoint:
    path: /users/{id}
    method: POST
- name: progressive
  endpoint:
    path: /progressive
    method: GET
    data_selector: records
- name: createUser
  endpoint:
    path: /createUser
    method: POST
    data_selector: body
    params:
      isForm: true
- name: admin
  endpoint:
    path: /src/client/admin
    method: GET
    data_selector: schema
- name: customer
  endpoint:
    path: /src/client/customer
    method: GET
    data_selector: schema
- name: update_user
  endpoint:
    path: /users/{id}
    method: POST
    data_selector: success
    params:
      id: uuid
- name: stream_tokens
  endpoint:
    path: /streams/tokens
    method: GET
    data_selector: iteration
- name: update_user
  endpoint:
    path: /users/{id}
    method: POST
    data_selector: output
    params:
      id: string
- name: stream_tokens
  endpoint:
    path: /streams/tokens
    method: GET
    data_selector: iteration
    params: {}
- name: segment
  endpoint:
    path: /api/…
    method: GET
- name: module
  endpoint:
    path: /src/modules
    method: GET
- name: vovk
  endpoint:
    path: /packages/vovk
    method: GET
- name: vovk-cli
  endpoint:
    path: /packages/vovk-cli
    method: GET
- name: vovk-client
  endpoint:
    path: /packages/vovk-client
    method: GET
- name: vovk-init
  endpoint:
    path: /packages/vovk-init
    method: GET
- name: vovk-zod
  endpoint:
    path: /packages/vovk-zod
    method: GET
- name: vovk-dto
  endpoint:
    path: /packages/vovk-dto
    method: GET
- name: vovk-yup
  endpoint:
    path: /packages/vovk-yup
    method: GET
- name: vovk-ajv
  endpoint:
    path: /packages/vovk-ajv
    method: GET
- name: vovk-python
  endpoint:
    path: /packages/vovk-python
    method: GET
- name: vovk-rust
  endpoint:
    path: /packages/vovk-rust
    method: GET
- name: OpenApi
  endpoint:
    path: /openapi.json
    method: GET
    data_selector: openapi
- name: users
  endpoint:
    path: /users/:organizationId
    method: POST
    data_selector: UserResponseDto
    params: {}
- name: chat
  endpoint:
    path: /api/ai-sdk/chat
    method: POST
    data_selector: response
- name: admin_segment
  endpoint:
    path: /api/admin
    method: GET
- name: customer_segment
  endpoint:
    path: /api/customer
    method: GET
- name: customer_pro_segment
  endpoint:
    path: /api/customer/pro
    method: GET
- name: do_something
  endpoint:
    path: /api/cron/do-something
    method: GET
- name: greeting
  endpoint:
    path: /hello/greeting.json
    method: GET
    data_selector: greeting
- name: proxy
  endpoint:
    path: /example.pdf
    method: GET
    data_selector: Response
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /users/{id}
    method: PUT
    data_selector: records
    params:
      notify: push
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Combines RESTful API and RPC paradigms
- Navigate to http://localhost:3000/api/greetings/greeting to see the result.
- The input body model implements nested validation of email and profile fields.
- The RPC methods include updateUser, getSpec, and streamTokens.
- Get the OpenAPI spec for the 'Hello World' app API
- Supports a wide range of validation libraries.
- vovk-ajv supports additional configuration listed as config.libs.ajv in the vovk.config
  file
- Uses DTOs for validation in both server-side and client-side contexts.
- Client-side validation requires transformation to DTO classes using class-transformer.
- The library uses @sodaru/yup-to-json-schema to convert Yup models to JSON Schema,
  and testing has shown dissatisfactory results (for example it was unable to handle
  anyOf properly). Therefore, I can’t recommend using this library until the issues
  are resolved.
- In development mode, each segment provides _schema_ endpoint that serves the schema
  of the segment.
- Validation libraries define type of request by themselves so you don’t usually need
  to use VovkRequest manually.
- Service methods can infer types from the controller methods.
- Uses JSON Lines format for progressive response
- Client-side validation limitations with FormData
- The segmented client is generated into the ./src/client folder
- The segmented client can be configured with different options for each segment
- Python client can be generated with `vovk generate` command using [py] template
  or [pySrc] template.
- The package is ready to be published to PyPI with the following command.
- Stream tokens to the client
- Uses JSON for requests and responses
- Vovk provides a set of commands to simplify the development process.
- The `vovk dev` command runs a script that watches for changes at controllers and
  updates the schema and the client accordingly if needed.
- Python client is experimental and created as a proof of concept.
- Root segment can be used together with other segments of any depth.
- Generated exports are referred to as RPC modules for consistency.
- 'Client-side validation can be disabled by passing `disableClientValidation: true`.'
- The NestJS server should be running at http://localhost:3000.
- Almost zero boilerplate, just a config file.
- Requires a single Next.js project, so AI wouldn’t struggle with a monorepo.
- Uses streaming with JSON Lines format
- Vovk.ts offers LLM Function Calling capabilities, turning endpoints into functions
  that can be called by AI.
- Uses Vovk.ts for multitenancy setup.
- Dynamic routes are used for tenant-specific paths.
- Authorization of requests can be implemented using decorators that checks if a user
  is authorised and passes down useful information such as current user to the controller
  handler via metadata that can be accessed via req.vovk.meta() method.
- Authorization requires a secret key in the environment variable CRON_SECRET
errors:
- 'NULL: Validation failed'
- '404 Not Found: Check the endpoint path'
- '400 Bad Request: Validate input parameters'
- 'BAD_REQUEST: Something went wrong'
- 'UNAUTHORIZED: Recheck OAuth scopes or token expiration'
- 'INTERNAL_SERVER_ERROR: Something went wrong'
- '[UNLOADABLE_DEPENDENCY] Error: Could not load lib/internal/methods/object.ts -
  No such file or directory (os error 2).'
- '[plugin rolldown-plugin-dts:generate] RollupError: tmp_prebundle/index.ts(17,14):
  error TS2742: The inferred type of ''XxxRPC'' cannot be named without a reference
  to ''../node_modules/vovk/mjs/client/types''. This is likely not portable. A type
  annotation is necessary.'
auth_info:
  mentioned_objects: []
client:
  base_url: /api
  headers:
    Content-Type: application/json
source_metadata: null
