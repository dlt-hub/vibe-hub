resources:
- name: authentication
  endpoint:
    path: /complete/backend-api/authentication-api
    method: GET
- name: management
  endpoint:
    path: /complete/backend-api/management-api
    method: GET
- name: authentication
  endpoint:
    path: /auth
    method: GET
    data_selector: user_id
- name: magic_link
  endpoint:
    path: /v1/apps/<PASSAGE_APP_ID>/magic-links
    method: POST
    data_selector: magic_link
    params: {}
- name: magic_link
  endpoint:
    path: /v1/apps/<PASSAGE_APP_ID>/magic-links
    method: POST
    data_selector: magic_link
- name: magic_link
  endpoint:
    path: /v1/apps/<PASSAGE_APP_ID>/magic-links
    method: POST
    data_selector: magic_link.url
- name: magic_link
  endpoint:
    path: /v1/apps/<PASSAGE_APP_ID>/magic-links
    method: POST
    data_selector: magic_link
- name: passage-auth
  endpoint:
    path: /passage-auth
    method: GET
    data_selector: records
- name: passage-login
  endpoint:
    path: /passage-login
    method: GET
    data_selector: records
- name: passage-register
  endpoint:
    path: /passage-register
    method: GET
    data_selector: records
- name: passage-profile
  endpoint:
    path: /passage-profile
    method: GET
    data_selector: records
- name: passage-passkey-table
  endpoint:
    path: /passage-passkey-table
    method: GET
    data_selector: records
- name: passage-auth
  endpoint:
    path: /passage-auth
    method: GET
    data_selector: records
- name: passage-login
  endpoint:
    path: /passage-login
    method: GET
    data_selector: records
- name: passage-register
  endpoint:
    path: /passage-register
    method: GET
    data_selector: records
- name: passage-profile
  endpoint:
    path: /passage-profile
    method: GET
    data_selector: records
- name: passage-passkey-table
  endpoint:
    path: /passage-passkey-table
    method: GET
    data_selector: records
- name: passage_register
  endpoint:
    path: /passage/register
    method: POST
    data_selector: data
    params: {}
- name: passage_register
  endpoint:
    path: /passage/register
    method: GET
    data_selector: registration_data
- name: passage_login
  endpoint:
    path: /complete/elements/passage-login
    method: GET
- name: passage-profile
  endpoint:
    path: /passage-elements/v2.x/passage-elements.js
    method: GET
    data_selector: app-id
- name: passage-profile
  endpoint:
    path: /v2.x/passage-profile
    method: GET
    data_selector: profileData
- name: passkey_table
  endpoint:
    path: /passage-passkey-table
    method: GET
    data_selector: passkeys
- name: current_user
  endpoint:
    path: /current_user
    method: GET
    data_selector: user_info
- name: user_session
  endpoint:
    path: /user_session
    method: GET
    data_selector: session_info
- name: passkey_table
  endpoint:
    path: /passage-passkey-table
    method: GET
    data_selector: passkeys
    params: {}
- name: current_user
  endpoint:
    path: /current_user
    method: GET
    data_selector: userInfo
- name: session
  endpoint:
    path: /session
    method: GET
    data_selector: authToken
- name: user_info
  endpoint:
    path: /user/info
    method: GET
    data_selector: user
    params: {}
- name: sign_out
  endpoint:
    path: /user/sign_out
    method: POST
    data_selector: result
    params: {}
- name: get_auth_token
  endpoint:
    path: /user/auth_token
    method: GET
    data_selector: authToken
    params: {}
- name: refresh_auth_token
  endpoint:
    path: /user/refresh
    method: POST
    data_selector: authToken
    params: {}
- name: PassageElement
  endpoint:
    path: /passage-element
    method: GET
    data_selector: properties
- name: PassageProfileElement
  endpoint:
    path: /passage-profile-element
    method: GET
    data_selector: properties
- name: passage-auth
  endpoint:
    path: /complete/elements/passage-auth
    method: GET
- name: passage-login
  endpoint:
    path: /complete/elements/passage-login
    method: GET
- name: passage-register
  endpoint:
    path: /complete/elements/passage-register
    method: GET
- name: passage-profile
  endpoint:
    path: /complete/elements/passage-profile
    method: GET
- name: passage-passkey-table
  endpoint:
    path: /complete/elements/passage-passkey-table
    method: GET
- name: user_management
  endpoint:
    path: /user
    method: GET
    data_selector: publicUserInfo
- name: PassageAuth
  endpoint:
    path: /complete/passage-react/passageauth
    method: GET
- name: PassageLogin
  endpoint:
    path: /complete/passage-react/passagelogin
    method: GET
- name: PassageRegister
  endpoint:
    path: /complete/passage-react/passageregister
    method: GET
- name: PassageAuth
  endpoint:
    path: /complete/passage-react/passageauth
- name: PassageLogin
  endpoint:
    path: /complete/passage-react/passagelogin
- name: PassageRegister
  endpoint:
    path: /complete/passage-react/passageregister
- name: passage
  endpoint:
    path: /path/to/passage
    method: GET
    data_selector: data
- name: PassageProvider
  endpoint:
    path: /api/v1/passage
    method: GET
    data_selector: records
- name: passage_auth
  endpoint:
    path: /complete/elements/passage-auth
    method: GET
    data_selector: records
- name: passage-auth
  endpoint:
    path: /complete/elements/passage-auth
    method: GET
    data_selector: element
- name: passage_register
  endpoint:
    path: /complete/elements/passage-register
    method: GET
- name: passage_register
  endpoint:
    path: /complete/elements/passage-register
    method: GET
- name: passage-profile
  endpoint:
    path: /complete/elements/passage-profile
    method: GET
- name: passage-profile
  endpoint:
    path: /complete/elements/passage-profile
    method: GET
    data_selector: records
- name: passage-passkey-table
  endpoint:
    path: /complete/elements/passage-passkey-table
    method: GET
- name: passkey_table
  endpoint:
    path: /passkey-table
    method: GET
- name: ProtectedPage
  endpoint:
    path: /login
    method: GET
    data_selector: content
    params: {}
- name: ProtectedPage
  endpoint:
    path: /passage-auth-guard
    method: GET
    data_selector: Protected content
- name: UnAuthOnlyPage
  endpoint:
    path: /UnAuthOnlyPage
    method: GET
    data_selector: Protected content
- name: PassageUnAuthGuard
  endpoint:
    path: /complete/passage-react/passageunauthguard
    method: GET
    data_selector: 'null'
    params: {}
- name: usePassage
  endpoint:
    path: /usePassage
    method: GET
- name: user_session
  endpoint:
    path: /api/v1/session
    method: GET
    data_selector: session
    params: {}
- name: user
  endpoint:
    path: /api/v1/user
    method: GET
    data_selector: user
    params: {}
- name: PassageAuth
  endpoint:
    path: /complete/elements/passage-auth
    method: GET
    data_selector: ''
    params: {}
- name: PassageRegister
  endpoint:
    path: /complete/elements/passage-register
    method: GET
    data_selector: ''
    params: {}
- name: PassageLogin
  endpoint:
    path: /complete/elements/passage-login
    method: GET
    data_selector: ''
    params: {}
- name: PassageProfile
  endpoint:
    path: /complete/elements/passage-profile
    method: GET
    data_selector: ''
    params: {}
- name: PassagePasskeyTable
  endpoint:
    path: /complete/elements/passage-passkey-table
    method: GET
    data_selector: ''
    params: {}
- name: user_management
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: authentication_status
  endpoint:
    path: /auth/status
    method: GET
- name: user_information
  endpoint:
    path: /user/info
    method: GET
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: auth_status
  endpoint:
    path: /auth/status
    method: GET
    data_selector: userInfo
- name: authentication
  endpoint:
    path: /api/authenticate
    method: POST
    data_selector: user
- name: user_authentication
  endpoint:
    path: /api/authenticate
    method: POST
    data_selector: data
    params: {}
- name: register_user
  endpoint:
    path: /passage.passkey.register
    method: POST
- name: login_user
  endpoint:
    path: /passage.passkey.login
    method: POST
- name: social_authentication
  endpoint:
    path: /social/auth
    method: POST
- name: register_user
  endpoint:
    path: /passage/passkey/register
    method: POST
- name: login_user
  endpoint:
    path: /passage/passkey/login
    method: POST
- name: current_user
  endpoint:
    path: /current_user
    method: GET
    data_selector: userInfo
- name: user_passkeys
  endpoint:
    path: /user/passkeys
    method: GET
- name: Passage
  endpoint:
    path: /passage
    method: POST
- name: one_time_passcode_register
  endpoint:
    path: /oneTimePasscode/register
    method: POST
    data_selector: otpId
- name: one_time_passcode_activate
  endpoint:
    path: /oneTimePasscode/activate
    method: POST
    data_selector: success
- name: one_time_passcode_login
  endpoint:
    path: /oneTimePasscode/login
    method: POST
    data_selector: otpId
- name: magic_link_register
  endpoint:
    path: /magicLink/register
    method: POST
    data_selector: id
- name: magic_link_activate
  endpoint:
    path: /magicLink/activate
    method: POST
    data_selector: success
- name: magic_link_status
  endpoint:
    path: /magicLink/status
    method: GET
    data_selector: result
- name: magic_link_login
  endpoint:
    path: /magicLink/login
    method: POST
    data_selector: id
- name: social_authentication
  endpoint:
    path: /social/authorize
    method: POST
- name: one_time_passcode
  endpoint:
    path: /oneTimePasscode
    method: POST
    data_selector: OneTimePasscode
    params: {}
- name: magic_link
  endpoint:
    path: /magicLink
    method: POST
    data_selector: MagicLink
    params: {}
- name: currentUserInfo
  endpoint:
    path: /current_user_info
    method: GET
    data_selector: user
- name: user
  endpoint:
    path: /currentUser
    method: GET
    data_selector: userInfo
- name: Passage Class
  endpoint:
    path: /passage/class
    method: GET
- name: App Class
  endpoint:
    path: /app/class
    method: GET
- name: Passkey Class
  endpoint:
    path: /passkey/class
    method: GET
- name: MagicLink Class
  endpoint:
    path: /magiclink/class
    method: GET
- name: OTP Class
  endpoint:
    path: /otp/class
    method: GET
- name: Social Class
  endpoint:
    path: /social/class
    method: GET
- name: CurrentUser Class
  endpoint:
    path: /currentuser/class
    method: GET
- name: PassageHosted Class
  endpoint:
    path: /passagehosted/class
    method: GET
- name: apple-app-site-association
  endpoint:
    path: /.well-known/apple-app-site-association
    method: GET
- name: authorize
  endpoint:
    path: /hosted/authorize
    method: POST
    data_selector: user
    params: {}
- name: logout
  endpoint:
    path: /currentUser/logout
    method: POST
    data_selector: message
    params: {}
- name: register
  endpoint:
    path: /passage/registerWithPasskey
    method: POST
    data_selector: data
    params: {}
- name: login
  endpoint:
    path: /passage/loginWithPasskey
    method: POST
    data_selector: data
    params: {}
- name: One-Time Passcodes
  endpoint:
    path: /oneTimePasscode
    method: POST
    data_selector: otp
    params: {}
- name: Magic Links
  endpoint:
    path: /magicLink
    method: POST
    data_selector: magicLink
    params: {}
- name: current_user
  endpoint:
    path: /current_user
    method: GET
    data_selector: userInfo
- name: Passage
  endpoint:
    path: /passage
    method: POST
    data_selector: data
- name: register_user
  endpoint:
    path: /passkey/register
    method: POST
    data_selector: userInfo
- name: login_user
  endpoint:
    path: /passkey/login
    method: POST
    data_selector: userInfo
- name: one_time_passcode_register
  endpoint:
    path: /oneTimePasscode/register
    method: POST
    data_selector: otpId
    params: {}
- name: one_time_passcode_login
  endpoint:
    path: /oneTimePasscode/login
    method: POST
    data_selector: otpId
    params: {}
- name: one_time_passcode_activate
  endpoint:
    path: /oneTimePasscode/activate
    method: POST
    data_selector: AuthResult
    params: {}
- name: magic_link_register
  endpoint:
    path: /magicLink/register
    method: POST
    data_selector: magicLinkId
    params: {}
- name: magic_link_login
  endpoint:
    path: /magicLink/login
    method: POST
    data_selector: magicLinkId
    params: {}
- name: magic_link_activate
  endpoint:
    path: /magicLink/activate
    method: POST
    data_selector: AuthResult
    params: {}
- name: magic_link_status
  endpoint:
    path: /magicLink/status
    method: GET
    data_selector: AuthResult
    params: {}
- name: authorize
  endpoint:
    path: /social/authorize
    method: POST
- name: current_user
  endpoint:
    path: /current_user
    method: GET
    data_selector: userInfo
- name: current_user
  endpoint:
    path: /current_user
    method: GET
    data_selector: userInfo
- name: change_email
  endpoint:
    path: /current_user/change_email
    method: POST
    data_selector: email
- name: change_phone
  endpoint:
    path: /current_user/change_phone
    method: POST
    data_selector: phone
- name: user_passkeys
  endpoint:
    path: /current_user/webauthn_devices
    method: GET
    data_selector: webauthnDevices
- name: add_passkey
  endpoint:
    path: /current_user/add_passkey
    method: POST
- name: edit_passkey
  endpoint:
    path: /current_user/edit_passkey
    method: POST
- name: delete_passkey
  endpoint:
    path: /current_user/delete_passkey
    method: DELETE
- name: logout
  endpoint:
    path: /current_user/logout
    method: POST
- name: Passage
  endpoint:
    path: /complete/passkeys
    method: POST
    data_selector: data
    params: {}
- name: Passage
  endpoint:
    path: /passage
    method: GET
- name: App
  endpoint:
    path: /app
    method: GET
- name: Passkey
  endpoint:
    path: /passkey
    method: GET
- name: MagicLink
  endpoint:
    path: /magiclink
    method: GET
- name: OTP
  endpoint:
    path: /otp
    method: GET
- name: Social
  endpoint:
    path: /social
    method: GET
- name: CurrentUser
  endpoint:
    path: /currentuser
    method: GET
- name: PassageHosted
  endpoint:
    path: /hosted
    method: GET
- name: user
  endpoint:
    path: /protected-route
    method: GET
    data_selector: user
    params: {}
- name: current_user
  endpoint:
    path: /current_user
    method: GET
    data_selector: userInfo
- name: update_email
  endpoint:
    path: /current_user/change_email
    method: POST
    data_selector: confirmation
- name: update_phone
  endpoint:
    path: /current_user/change_phone
    method: POST
    data_selector: confirmation
- name: manage_passkeys
  endpoint:
    path: /current_user/manage_passkeys
    method: POST
    data_selector: passkeys
- name: logout
  endpoint:
    path: /current_user/logout
    method: POST
- name: user
  endpoint:
    path: /user
    method: GET
- name: devices
  endpoint:
    path: /user/devices
    method: GET
- name: magic_links
  endpoint:
    path: /magic-links
    method: POST
- name: user
  endpoint:
    path: /user
    method: GET
- name: Passage
  endpoint:
    path: /passage
    method: POST
    data_selector: data
- name: user_functionality
  endpoint:
    path: /complete/backend-api/management-api
    method: GET
- name: passage_auth_origin
  endpoint:
    path: /android/add-passage#add-your-android-app-in-passage-console
    method: GET
    data_selector: resource
    params: {}
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: records
- name: webauthn_device
  endpoint:
    path: /webauthn-device
    method: GET
    data_selector: records
- name: magic_link
  endpoint:
    path: /magic-link
    method: POST
    data_selector: records
- name: auth
  endpoint:
    path: /auth
    method: GET
- name: user
  endpoint:
    path: /user
    method: POST
- name: user
  endpoint:
    path: /protected-route
    method: GET
    data_selector: user
    params: {}
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: null
    params: {}
- name: dashboard
  endpoint:
    path: /dashboard
    method: GET
    data_selector: null
    params: {}
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: result
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: user
    params: {}
- name: magic_link
  endpoint:
    path: /magic_link
    method: POST
    data_selector: magic_link
    params: {}
- name: OpenID Configuration
  endpoint:
    path: /openid-configuration
    method: GET
- name: Authorization URL
  endpoint:
    path: /authorize
    method: POST
- name: JWKS endpoint
  endpoint:
    path: /.well-known/jwks.json
    method: GET
- name: Token URL
  endpoint:
    path: /token
    method: POST
- name: UserInfo URL
  endpoint:
    path: /userinfo
    method: GET
- name: callback_url
  endpoint:
    path: /oauth2/idpresponse
    method: GET
- name: Passage App
  endpoint:
    path: /create-app
    method: POST
    data_selector: app
    params: {}
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: result
    params: {}
- name: dashboard
  endpoint:
    path: /dashboard
    method: GET
    data_selector: user
    params: {}
- name: user
  endpoint:
    path: /v1/apps/:appID/users/:userID
    method: GET
    data_selector: user
    params: {}
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: result
    params: {}
- name: todo
  endpoint:
    path: /todos
    method: GET
    data_selector: items
- name: todo
  endpoint:
    path: /rest/v1/todo
    method: GET
    data_selector: data
    params: {}
- name: openid_configuration
  endpoint:
    path: /.well-known/openid-configuration
    method: GET
- name: authorization
  endpoint:
    path: /authorize
    method: POST
- name: jwks
  endpoint:
    path: /.well-known/jwks.json
    method: GET
- name: token
  endpoint:
    path: /token
    method: POST
- name: userinfo
  endpoint:
    path: /userinfo
    method: GET
- name: Twilio
  endpoint:
    path: /branding/smsprovider
    method: POST
    data_selector: sms_settings
    params: {}
- name: custom_email_templates
  endpoint:
    path: /emails-and-text-messages/custom-html-emails
    method: GET
- name: email_templates
  endpoint:
    path: /emails-and-text-messages/template-variables
    method: GET
- name: sms_templates
  endpoint:
    path: /complete/emails-and-text-messages/sms-templates
    method: GET
    data_selector: templates
- name: cognito_configuration
  endpoint:
    params:
      Authorized_scopes: openid,email,phone
- name: passage_callback_url
  endpoint:
    params:
      callback_url: '{{YOUR_COGNITO_DOMAIN}}/oauth2/idpresponse'
- name: user_information
  endpoint:
    path: /default/[ROUTE]
    method: '[METHOD]'
- name: Passage App
  endpoint:
    path: /authentication
    method: POST
- name: user
  endpoint:
    path: /v1/apps/:appID/users/:userID
    method: GET
    data_selector: user
    params: {}
- name: todo
  endpoint:
    path: /todo
    method: POST
    data_selector: items
- name: todo
  endpoint:
    path: /rest/v1/todo
    method: GET
    data_selector: data
- name: Twilio
  endpoint:
    path: /branding/smsprovider
    method: POST
    data_selector: sms_provider
    params: {}
- name: custom_email_templates
  endpoint:
    path: /complete/emails-and-text-messages/custom-html-emails
    method: GET
    data_selector: templates
notes:
- If the JWT for a particular request does not validate, the gateway will return a
  401.
- Passage biometrics will not work on domains without TLS (i.e. https://), but Passage
  web biometrics will work on http://localhost for testing.
- Uses OAuth2 for authentication
- Uses JWT for authentication
- Passage requires the Authorization header to contain the JWT
- Add Passage Element to your frontend for user registration and login.
- Users are ephemeral and not persisted outside of your browser in test apps.
- Magic Links are one-time use only.
- Login codes allow users to input their email address or phone number and receive
  a 6-digit code via message.
- Codes are designed for single-use only.
- Using Passage developer credentials may cause your app to behave differently than
  using your own custom credentials in both functionality and messaging.
- Using Passage developer credentials allows quick testing but should not be used
  in production.
- SMS and Email Logins can be configured on the Authentication Methods page as secondary
  auth methods.
- Magic Links are unique, one-time login links generated for website authentication.
- SMS and Email Login methods can be used as secondary authentication methods when
  a passwordless login option is unavailable or encounters issues.
- The Passage Elements can be customized using CSS variables.
- All five elements support a default light and dark theme.
- Handles authentication of new and existing users for your application on the same
  page.
- The Auth Element currently supports register and login with biometrics (e.g. FaceID,
  Windows Hello) and Magic Links via email or SMS.
- The Auth Element can be highly customized using CSS variables or parts.
- The Register Element supports registration with biometrics and Magic Links via email
  or SMS.
- The Login Element currently supports login with biometrics (e.g. FaceID, Windows
  Hello) and Magic Links via email or SMS.
- Make sure you’ve created an application in the Passage Console with your domain
  and redirect URL configured.
- The Passkey Table Element can be highly customized using CSS variables or parts.
- Uses Passage-JS for session management and user information retrieval
- Uses Passage auth token stored in local storage
- Auth tokens must be refreshed to remain valid
- PassageUser is deprecated as of Passage-Elements v2.0.0. Use Passage-JS to get information
  about the current user and manage their session.
- Using TypeScript with your project allows you to import a PassageElement interface.
- Recommended for users who want to quickly and easily customize most of the Passage
  Element UI without needing to write code.
- Recommended for users who want more in-depth customization options for the Passage
  Element UI as well as users who want to style the `<passage-profile>` or `<passage-passkey-table>`
  elements.
- The base Passage constructor takes an optional config parameter for a custom token
  store.
- The base Passage constructor takes an optional config parameter that allows you
  to define your own token store.
- Use the Passage app id from the Passage Console
- If not using the PassageProvider the appId property is required.
- If using the PassageProvider appId, defaultCountryCode, and lang props will be loaded
  from the PassageProvider but if passed in will override the values for this component
  instance only.
- If not using the PassageProvider the appId property is required. If using the PassageProvider
  appId, defaultCountryCode, and lang props will be loaded from the PassageProvider
  but if passed in will override the values for this component instance only.
- Protects content by requiring a logged in user to view the content.
- Passage requires configuration of the app ID
- PassageTheme has been deprecated. Use the PassageLightTheme or PassageDarkTheme
  components instead.
- Customizing the Passage React Elements is done the same way as the standard Passage
  Elements.
- Requires OAuth2 setup for authentication.
- Elements provide a complete UI/UX for modern authentication
- The Elements work in any modern frontend framework
- Uses OAuth2 with refresh token — requires setup of connected app in api
- After user login, all requests must be authenticated using the JWT provided by Passage.
- Ensure to set up OAuth properly to avoid authentication issues.
- Use Passage backend SDKs to safely verify user authentication tokens
- All requests to your backend need to be authenticated using the JWT provided by
  Passage.
- JWT provided by Passage is stored in both cookies and localstorage.
- Elements support localization to multiple languages.
- Route guards provide a better user experience, but less security than using one
  of Passage’s backend libraries.
- All class methods should return a promise.
- The elements support localization to multiple languages.
- Add a custom token store directly into the Passage elements.
- Overrides the default client-side auth token handling.
- Implement and provide a custom TokenStore class for token get, set and clear operations.
- The default behavior for beforeAuth callback is to do nothing and return true.
- The default behavior for onSuccess callback is to set the Passage auth token (psg_auth_token)
  in a cookie and in local storage, then redirect to the app’s redirect URL.
- The most common option for SPAs with backend APIs is to send auth tokens in the
  Authorization request header.
- Set the withCredentials CORS option on the backend API server.
- If your app uses Magic Links or Hosted Login, you’ll likely want to setup your app
  with App Linking.
- Uses OAuth2 with refresh token — requires setup of connected app in Passage
- The default CORS settings will work just fine for this authentication type.
- Set the auth origin to the domain of your frontend application
- Set the redirect URL to the correct path for your app (e.g. ”/” or “/dashboard”)
- Generate an API Key on the settings page for use in the backend API code
- Passage highly recommends using One-Time Passcodes over Magic Links, as they are
  easier to implement, more secure, and a better user experience.
- Uses hosted login for authentication
- Requires setup of Social Connection in the Passage Console
- User will receive a verification email or text message when changing contact info.
- It is highly recommended to use the getValidAuthToken method to avoid using an expired
  token.
- Ensure that the app_id is passed directly in your code instead of being pulled from
  the strings.xml file.
- Apple uses Associated Domains to establish a secure association between your domain
  and your app so you can securely authenticate your users with passkeys.
- Passage highly recommends using One-Time Passcodes over Magic Links.
- Passage Social Authentication is currently not available for tvOS or watchOS.
- Passage does not currently support non-Apple providers on macOS or visionOS.
- Your user’s auth token and refresh token are both stored on device using Apple’s
  Keychain API.
- 'Passkeys will only work on devices running these operations systems or later: iOS
  16+, macOS 12+, tvOS 16+, and visionOS 1+.'
- Passage Hosted Authentication is currently not available for macOS, tvOS, watchOS,
  or visionOS.
- 'Optional: Passkey registration failed, try email or SMS registration instead.'
- 'Optional: Passkey login failed, try fallback email or SMS login instead.'
- Passkey authentication is available on iOS 16+, macOS 12+, tvOS 16+, and visionOS
  1+.
- You can easily add Social Authentication to your app using providers like Apple,
  Google, or GitHub to authenticate your users.
- User management requires user authentication.
- User will receive a verification email or text message for contact info changes.
- Your user’s auth token and refresh token are both stored on device using Android’s
  own Encrypted Shared Preferences library.
- Pass the `app_id` directly as a string when initializing the `Passage` instance.
- This feature is only available for Android and iOS at the moment.
- User cancelled passkey prompt, do nothing.
- Passage Hosted Authentication handles user authentication by opening a browser tab
  for login or sign-up.
- Passage highly recommends using One-Time Passcodes over Magic Links, they are easier
  to implement, more secure, and they provide a better user experience.
- You can easily add Social Authentication to your app using providers like Apple,
  Google, or GitHub.
- User management requires authentication.
- When you sign out your user, the refresh token is revoked on the server and both
  tokens are removed from the device.
- Handles operations related to the application, such as retrieving app information,
  checking if a user exists, and creating new users.
- Skip if your Passage App is using Hosted Login.
- For passkeys to work in any Android app, Google requires the app’s “APK key hash”
  to be set as the relying party’s auth origin.
- To enable support for passkeys for the iOS version of your mobile app, Apple requires
  that you associate your app with a website that your app owns by publishing an Associated
  Domains file.
- Instructions for adding the 'Associated Domains' capability can be found in the
  iOS Complete SDK docs.
- Passage serves as your Identity Provider (IdP) by storing all of your app’s users
  and authentication material.
- Register a new user with a passkey using an email address or phone number.
- Log in an existing user with their passkey.
- No additional configuration is needed for a web app.
- Passage App ID and API Key are required for authentication.
- Passage App ID and API Key are required.
- User must be authenticated to manage passkeys and update contact info.
- Simplifies the initialization process for app_id.
- To make requests to the management API you need to create an API key in the console
  under Settings —> API Keys.
- Required Line for Only Hosted Authentication
- Use Passage’s management API to manage your Passage app and users.
- To generate an API key for your app navigate to Settings —> API Keys in the Passage
  Console.
- Once Passage is live on your site, each of your users will need to login on their
  next visit.
- Communicating with your users is critical to ensuring a good experience and smooth
  transition.
- Get Passage JWT from the request's Authorization header
- API keys can be managed in the Passage Console
- 'The functionality currently available on a user is: Get a user’s information, Activate
  or deactivate a user, Update a user’s information, Revoke a user’s refresh tokens,
  Delete a user, Create a user.'
- Token is invalid if validation fails.
- The Passkey Complete Python SDK provides a way to validate JWT-authenticated requests.
- Passage App ID and API Key from Passage Console are required for authentication.
- Requires setup of Passage App ID and API Key
- User metadata is not currently available in scopes.
- Get the Passage public key from the console under Settings —> General.
- The Passage JWT will be sent to your application via a cookie with the key `psg_auth_token`.
- The latest SDK versions keep the same features but use a class-based API for better
  organization.
- Existing passkeys will no longer work on your new, custom domain.
- Passkeys are scoped to a single auth origin, meaning they will only be valid for
  the domain they were created on.
- To enable Passage as the provider to your Auth0 application, flip the custom connection
  to the 'Applications' tab and follow the steps below.
- You will need to take several values from your Passage app and add them to your
  Auth0 app.
- Uses API Key authentication for most endpoints.
- 'Set the Authorized scopes: openid, email, phone'
- Uses JWT for authentication — requires validation of tokens
- Enable Passage authentication for your Shopify app
- Each Passage SDK has a validateJwt function to verify Passage Auth Tokens.
- User metadata can be updated via the management API or SDK.
- Passage requires TLS and will not work properly over insecure HTTP connections.
- Browsers all allow an exception for localhost to enable easy local testing.
- Passage is a passwordless authentication platform that makes it simple for developers
  to add passkey authentication to their apps and websites.
- Row Level Security (RLS) is enabled, which blocks all requests by default.
- User metadata is not currently available in scopes
- Passage currently only supports Twilio.
- Default setting for hosted login page theme is Automatic
- Passage supports only one template for each email type.
- Passage works as an identity provider for Auth0
- All templates must include the {{.magic_link.url}}
- Refresh tokens are disabled by default.
- To enable this functionality visit Authentication → Session Management in the Passage
  Console.
- To enable refresh tokens, visit Authentication → Session Management in the Passage
  Console.
- Passage can be used to authorize users for authenticated routes at the gateway-level.
- JWT authorizer requires setup in Passage Console.
- Uses Passage hosted login as an OIDC-compliant authorization server
- User metadata can be accessed and updated via the management API or SDK.
- 'Brief Authentication Downtime: The transition from hosted to embedded authentication
  requires a short period where authentication services will be unavailable. To minimize
  impact, consider scheduling this migration during a time of low user activity.'
- 'User Communication: During the transition, update all login interfaces with clear
  messages about the temporary unavailability of authentication services. This helps
  prevent user confusion and reduces attempts to access inactive authentication endpoints.'
- 'Passkeys Functionality: After the migration, passkeys will function normally alongside
  other authentication methods. Note that passkeys are domain-bound, so users will
  need to create new passkeys for the embedded login page. Existing passkeys from
  the hosted domain will not transfer automatically.'
- When deploying your application to a new environment, we recommend generating a
  new API Key and storing it in your system’s secrets storage.
- Passage uses JSON Web Tokens (JWTs) to prove the identity of users for applications.
- JWTs can be used for authentication and authorization.
- Uses Passage for passwordless authentication
- Auth tokens are automatically configured for your application when it is created.
- Refresh tokens are long lived tokens that can be used to 'refresh' a session and
  can be revoked.
- Row Level Security (RLS) is enabled, blocking all requests by default.
- Refresh tokens are disabled by default. To enable this functionality visit Authentication
  → Session Management in the Passage Console.
- Stateless session management means that the session token is not stored anywhere
  on the server.
- The issuer URL is the Passage domain from where the JWT originates. Set your issuer
  URL to https://auth.passage.id/v1/apps/{PassageAppID}.
- The Audience is used to validate that the AWS API Gateway is a valid recipient of
  the JWT.
- JWTs can be used for authentication and authorization
- The session expiration time is configurable in the Passage Console
errors:
- '401 Unauthorized: Authentication failed'
- '400 Bad Request: Check required parameters.'
- '401 Unauthorized: Ensure API Key is valid.'
- '401 Unauthorized: Ensure valid API Key.'
- 'PSGLoginRequired: User is not authenticated'
- 'Unauthorized: Handle unauthorized access'
- '401 Unauthorized: Check your app ID or token storage.'
- Not Found
- 'Not Found: The magic link is invalid or expired'
- '401 Unauthorized: Check your API key or OAuth token.'
- '404 Not Found: Verify the endpoint URL.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check request parameters'
- 'PassageUserRequestException: User''s phone or email was invalid'
- 'PassageUserUnauthorizedException: User is not authorized to make this change'
- 'OneTimePasscodeInvalidIdentifierRegisterException: Alert user their email or phone
  number was invalid'
- 'OneTimePasscodeActivateInvalidRequestException: Alert user their passcode was invalid'
- 'MagicLinkInvalidIdentifierRegisterException: Alert user their email or phone number
  was invalid'
- 'MagicLinkInvalidIdentifierLoginException: Alert user their email or phone number
  was invalid'
- 'GetMagicLinkStatusInvalidException: Alert user that the magic link is no longer
  valid'
- 'UserCancelled: User cancelled native passkey prompt'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'PassageErrorCode.userCancelled: User cancelled passkey prompt, do nothing.'
- '401 Unauthorized: User not authenticated'
- '400 Bad Request: Invalid data provided'
- Token is invalid
- '401 Unauthorized: Token is invalid'
- '404 Not Found: User not found'
- '400: Bad Request - Check your request body or parameters.'
- '401 Unauthorized: Invalid PASSAGE_JWT or missing Authorization Header.'
- '400: Bad Request - Check for missing or invalid data.'
- 'Unauthorized 401 Response: Any request with an invalid PASSAGE_JWT or a missing
  Authorization Header will respond with an Unauthorized 401 Response.'
auth_info:
  mentioned_objects:
  - PassageCurrentUser
  - PassageSession
  - PassageError
  - Session
  - User
  - PassageUser
  - passage.auth
  - passageUser
  - PassageAuth
  - Client ID
  - Client Secret
  - AuthToken
  - Passage
client:
  base_url: https://console.passage.id
  auth:
    type: api_key
source_metadata: null
