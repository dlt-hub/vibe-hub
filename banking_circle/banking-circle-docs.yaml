resources:
- name: get_token
  endpoint:
    path: /api/v1/authorizations/authorize
    method: GET
    data_selector: ''
    params: {}
- name: single_payments
  endpoint:
    path: /api/v1/payments/singles
    method: POST
- name: bulk_payments
  endpoint:
    path: /api/v1/payments/bulks
    method: POST
- name: payment_initiation
  endpoint:
    path: /initiate-correspondent-and-agency-banking-payment
    method: POST
    data_selector: payment_instructions
    params: {}
- name: payment_initiation
  endpoint:
    path: /initiate-correspondent-and-agency-banking-payment
    method: POST
    data_selector: paymentInstruction
- name: fx_trading
  endpoint:
    path: /api/v2/fx/trading
    method: POST
    data_selector: tradeStatus
    params: {}
- name: fx_trading
  endpoint:
    path: /api/v2/fx/trading
    method: POST
    data_selector: tradeStatus
- name: request_for_quote
  endpoint:
    path: /api/v1/fx/rates/EUR/GBP
    method: GET
    data_selector: quote
    params:
      amountCurrency: EUR
      amount: 10000
      tenor: 'ON'
- name: bulk_request_for_quote
  endpoint:
    path: /api/v2/fx/rates/bulk
    method: POST
    data_selector: quotes
    params: {}
- name: request_for_quote
  endpoint:
    path: /api/v1/fx/rates/{currencyFrom}/{currencyTo}
    method: GET
    data_selector: quotes
    params: {}
- name: bulk_request_for_quote
  endpoint:
    path: /api/v2/fx/rates/bulk
    method: POST
    data_selector: quotes
    params: {}
- name: bulk_rfq
  endpoint:
    path: /rfq/bulk
    method: POST
    data_selector: response
    params:
      indicative: 'true'
- name: indicative_rates
  endpoint:
    path: /rfq/indicative
    method: GET
    data_selector: response
    params: {}
- name: indicative_rates
  endpoint:
    path: /rfq
    method: GET
    data_selector: quotes
    params:
      indicative: 'true'
- name: held_rates
  endpoint:
    path: /api/v1/fx/rates/held-rates/{currency1}/{currency2}
    method: GET
    data_selector: quote
    params:
      validForMinutes: '1440'
- name: held_rates
  endpoint:
    path: /api/v1/fx/rates/held-rates/{currencyFrom}/{currencyTo}
    method: GET
    data_selector: quote
    params:
      validForMinutes: '1440'
- name: fx_rates_payments
  endpoint:
    path: /api/v1/fx/rates/payments/{debit-currency}/{credit-currency}
    method: GET
    data_selector: quote
    params: {}
- name: multicurrency_payments
  endpoint:
    path: /api/v1/fx/rates/payments/{debit-currency}/{credit-currency}
    method: GET
    data_selector: quote
    params: {}
- name: payments_simulations_debits
  endpoint:
    path: /api/v1/payments/simulations/debits
    method: POST
    data_selector: records
- name: payments_simulations_credits
  endpoint:
    path: /api/v1/payments/simulations/credits
    method: POST
    data_selector: records
- name: simulated_debits
  endpoint:
    path: /api/v1/payments/simulations/debits
    method: POST
    data_selector: records
- name: simulated_credits
  endpoint:
    path: /api/v1/payments/simulations/credits
    method: POST
    data_selector: records
- name: single_payments
  endpoint:
    path: /api/v1/payments/singles
    method: GET
- name: bulk_payments
  endpoint:
    path: /api/v1/payments/bulks
    method: GET
- name: agency_correspondent_payments
  endpoint:
    path: /api/v1/payments/fi-to-fi-customer-credit-transfer-initiation
    method: POST
- name: iso20022_payments
  endpoint:
    path: /api/v1/payments/iso20022/customer-credit-transfer-initiation
    method: POST
- name: single_payment
  endpoint:
    path: /api/v1/payments/singles
    method: GET
    data_selector: payments
- name: bulk_payment
  endpoint:
    path: /api/v1/payments/bulks
    method: GET
    data_selector: bulkPayments
- name: agency_payment
  endpoint:
    path: /api/v1/payments/fi-to-fi-customer-credit-transfer-initiation
    method: POST
    data_selector: paymentInitiation
- name: iso20022_payment
  endpoint:
    path: /api/v1/payments/iso20022/customer-credit-transfer-initiation
    method: POST
    data_selector: paymentInitiation
- name: incoming_payment
  endpoint:
    path: /incoming-payments
    method: GET
    data_selector: payments
- name: payment_status
  endpoint:
    path: /api/v1/payments/singles/{payment-id}/status
    method: GET
- name: cancel_payment
  endpoint:
    path: /api/v1/payments/singles/{payment-id}/cancel
    method: PUT
- name: reject_payment
  endpoint:
    path: /api/v1/payments/singles/{payment-id}/reject
    method: PUT
- name: payments
  endpoint:
    path: /api/v1/payments/singles/{payment-id}/status
    method: GET
    data_selector: status
    params: {}
- name: bulk_payments
  endpoint:
    path: /api/v1/payments/bulk
    method: GET
    data_selector: bulk_status
    params: {}
- name: initiate_bulk_payments
  endpoint:
    path: /api/v1/payments/bulks
    method: POST
    data_selector: bulkPaymentResponse
- name: list_bulk_files
  endpoint:
    path: /api/v1/payments/bulks
    method: GET
    data_selector: bulkFiles
- name: bulk_file_details
  endpoint:
    path: /api/v1/payments/bulks/{payment-bulk-id}
    method: GET
    data_selector: bulkFileDetails
- name: bulk_payment_status
  endpoint:
    path: /api/v1/payments/bulks/{payment-bulk-id}/status
    method: GET
    data_selector: bulkPaymentStatus
- name: cancel_bulk_payments
  endpoint:
    path: /api/v1/payments/bulks/{payment-bulk-id}/cancel
    method: PUT
    data_selector: cancelResponse
- name: retrieve_payments_within_bulk_file
  endpoint:
    path: /api/v1/payments/singles?paymentBulkId={payment-bulk-id}
    method: GET
    data_selector: paymentsInBulk
- name: initiate_bulk_payments
  endpoint:
    path: /api/v1/payments/bulks
    method: POST
    data_selector: bulkPayment
    params: {}
- name: get_list_of_bulk_files
  endpoint:
    path: /api/v1/payments/bulks
    method: GET
    data_selector: bulkFiles
    params: {}
- name: get_bulk_file_details
  endpoint:
    path: /api/v1/payments/bulks/{payment-bulk-id}
    method: GET
    data_selector: bulkFileDetails
    params: {}
- name: get_bulk_payment_status
  endpoint:
    path: /api/v1/payments/bulks/{payment-bulk-id}/status
    method: GET
    data_selector: bulkPaymentStatus
    params: {}
- name: cancel_bulk_payments
  endpoint:
    path: /api/v1/payments/bulks/{payment-bulk-id}/cancel
    method: PUT
    data_selector: cancelBulkPayment
    params: {}
- name: retrieve_payments_within_bulk_file
  endpoint:
    path: /api/v1/payments/singles
    method: GET
    data_selector: individualPayments
    params:
      paymentBulkId: '{payment-bulk-id}'
- name: Account Holder Verification
  endpoint:
    path: /api/v1/risk/check/accountholderverifications
    method: GET
    data_selector: result
    params: {}
- name: initiate_recall
  endpoint:
    path: /api/v1/payments/recalls
    method: POST
- name: get_recalls_list
  endpoint:
    path: /api/v1/payments/recalls
    method: GET
- name: get_recall_details
  endpoint:
    path: /api/v1/payments/recalls/{recall-id}
    method: GET
- name: get_recall_status
  endpoint:
    path: /api/v1/payments/recalls/{recall-id}/status
    method: GET
- name: initiate_trace
  endpoint:
    path: /api/v1/payments/traces
    method: POST
- name: get_traces_list
  endpoint:
    path: /api/v1/payments/traces
    method: GET
- name: cancel_trace
  endpoint:
    path: /api/v1/payments/traces/{trace-id}
    method: PUT
- name: get_trace_details
  endpoint:
    path: /api/v1/payments/traces/{trace-id}
    method: GET
- name: get_trace_status
  endpoint:
    path: /api/v1/payments/traces/{trace-id}/status
    method: GET
- name: payments
  endpoint:
    path: /api/v1/payments/singles
    method: GET
    data_selector: payments
    params: {}
- name: direct_debit_reject
  endpoint:
    path: /api/v1/payments/singles/reject-direct-debit-payment
    method: PUT
    data_selector: result
    params: {}
- name: simulate_debit
  endpoint:
    path: /api/v1/payments/simulations/debits
    method: POST
    data_selector: simulation
    params: {}
- name: payment_recall_initiate
  endpoint:
    path: /api/v1/payments/recalls
    method: POST
- name: payment_recall_list
  endpoint:
    path: /api/v1/payments/recalls
    method: GET
- name: payment_recall_details
  endpoint:
    path: /api/v1/payments/recalls/{recall-id}
    method: GET
- name: payment_recall_status
  endpoint:
    path: /api/v1/payments/recalls/{recall-id}/status
    method: GET
- name: payment_trace_initiate
  endpoint:
    path: /api/v1/payments/traces
    method: POST
- name: payment_trace_list
  endpoint:
    path: /api/v1/payments/traces
    method: GET
- name: payment_trace_cancel
  endpoint:
    path: /api/v1/payments/traces/{trace-id}
    method: PUT
- name: payment_trace_details
  endpoint:
    path: /api/v1/payments/traces/{trace-id}
    method: GET
- name: payment_trace_status
  endpoint:
    path: /api/v1/payments/traces/{trace-id}/status
    method: GET
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: accounts
    params: {}
- name: account_details
  endpoint:
    path: /api/v1/accounts/{account-id}
    method: GET
    data_selector: account
    params: {}
- name: account_balances
  endpoint:
    path: /api/v1/accounts/{account-id}/balances
    method: GET
    data_selector: balances
    params: {}
- name: bookings
  endpoint:
    path: /api/v3/bookings
    method: GET
    data_selector: bookings
    params: {}
- name: payments
  endpoint:
    path: /api/v1/payments/singles
    method: GET
    data_selector: payments
    params: {}
- name: reject_direct_debit_payment
  endpoint:
    path: /api/v1/payments/singles/reject-direct-debit-payment
    method: PUT
    data_selector: result
    params: {}
- name: simulate_debit
  endpoint:
    path: /api/v1/payments/simulations/debits
    method: POST
    data_selector: simulation_result
    params: {}
- name: virtual_accounts
  endpoint:
    path: /api/v1/virtualAccounts
    method: GET
    data_selector: accounts
- name: close_account_status
  endpoint:
    path: /api/v1/virtualAccounts/{virtualAccountNumber}/close/status
    method: GET
    data_selector: status
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: records
- name: account_details
  endpoint:
    path: /api/v1/accounts/{account-id}
    method: GET
    data_selector: records
- name: account_balances
  endpoint:
    path: /api/v1/accounts/{account-id}/balances
    method: GET
    data_selector: records
- name: account_bookings
  endpoint:
    path: /api/v3/bookings
    method: GET
    data_selector: records
- name: account_activity_report
  endpoint:
    path: /docs/account-activity-report
    method: GET
    data_selector: records
- name: bank_statement_report
  endpoint:
    path: /docs/bank-statement-report
    method: POST
    data_selector: records
- name: account_balance_report
  endpoint:
    path: /docs/account-balance-report
    method: GET
    data_selector: records
- name: reconciliation_report
  endpoint:
    path: /docs/reconciliation-report
    method: GET
    data_selector: records
- name: rejection_report
  endpoint:
    path: /docs/rejection-report
    method: GET
    data_selector: records
- name: virtual_accounts
  endpoint:
    path: /api/v1/virtualAccounts
    method: GET
    data_selector: records
- name: close_virtual_account
  endpoint:
    path: /api/v1/virtualAccounts/{virtualAccountNumber}/close
    method: POST
    data_selector: status
- name: close_status_virtual_account
  endpoint:
    path: /api/v1/virtualAccounts/{virtualAccountNumber}/close/status
    method: GET
    data_selector: status
- name: standard_reconciliation_report
  endpoint:
    path: /api/v1/reports/reconciliation-report
    method: GET
- name: paginated_reconciliation_report
  endpoint:
    path: /api/v1/reports/reconciliation-paged-report
    method: GET
- name: intraday_reconciliation_report
  endpoint:
    path: /api/v1/reports/reconciliation-intraday-report
    method: GET
- name: report_fields
  endpoint:
    path: /docs/reconciliation-report
    method: GET
- name: account_activity_report
  endpoint:
    path: /docs/account-activity-report
    method: GET
    data_selector: records
- name: bank_statement_report
  endpoint:
    path: /docs/bank-statement-report
    method: POST
    data_selector: records
- name: account_balance_report
  endpoint:
    path: /docs/account-balance-report
    method: GET
    data_selector: records
- name: reconciliation_report
  endpoint:
    path: /docs/reconciliation-report
    method: GET
    data_selector: records
- name: rejection_report
  endpoint:
    path: /docs/rejection-report
    method: GET
    data_selector: records
- name: reconciliation_report
  endpoint:
    path: /api/v1/reports/reconciliation-report
    method: GET
- name: paginated_reconciliation_report
  endpoint:
    path: /api/v1/reports/reconciliation-paged-report
    method: GET
- name: intraday_reconciliation_report
  endpoint:
    path: /api/v1/reports/reconciliation-intraday-report
    method: GET
- name: account_activity_report
  endpoint:
    path: /api/v1/reports/account-activity-report
    method: GET
    data_selector: transactions
    params:
      FromTransactionDate: ''
      ToTransactionDate: ''
      AccountId: ''
      IncludeVIBAN: ''
      PropertiesIncluded: ''
      PropertiesExcluded: ''
- name: account_activity_paged_report
  endpoint:
    path: /api/v1/reports/account-activity-paged-report
    method: GET
    data_selector: transactions
    params:
      PageNumber: ''
      PageSize: ''
- name: report_fields
  endpoint:
    path: /docs/reconciliation-and-reporting
    method: GET
    data_selector: report_fields
    params: {}
- name: account_balance_report
  endpoint:
    path: /api/v1/reports/account-balance-report
    method: GET
    data_selector: reportFields
- name: account_activity_report
  endpoint:
    path: /api/v1/reports/account-activity-report
    method: GET
    data_selector: transactions
    params:
      FromTransactionDate: YYYY-MM-DD
      ToTransactionDate: YYYY-MM-DD
- name: account_activity_paged_report
  endpoint:
    path: /api/v1/reports/account-activity-paged-report
    method: GET
    data_selector: transactions
    params:
      PageNumber: '1'
      PageSize: '100'
- name: rejection_report
  endpoint:
    path: /api/v1/reports/rejection-report
    method: GET
    data_selector: data
    params: {}
- name: rejection_report_request
  endpoint:
    path: /api/v2/reports/requests/rejection-report
    method: POST
    data_selector: data
    params: {}
- name: account_balance_report
  endpoint:
    path: /api/v1/reports/account-balance-report
    method: GET
    data_selector: records
- name: bank_statement_report
  endpoint:
    path: /api/v3/reports/requests/bank-statement-report
    method: POST
    data_selector: report
    params:
      reportFormatType: pdf
      reportVersion: 2
- name: rejection_report
  endpoint:
    path: /api/v1/reports/rejection-report
    method: GET
    data_selector: report
    params: {}
- name: rejection_report_request
  endpoint:
    path: /api/v2/reports/requests/rejection-report
    method: POST
    data_selector: reportRequest
    params: {}
- name: bank_statement_report
  endpoint:
    path: /api/v3/reports/requests/bank-statement-report
    method: POST
    data_selector: data
    params:
      reportFormatType: pdf
      reportVersion: 2
- name: bank_to_customer_statement
  endpoint:
    path: /api/v1/reports/iso20022/bank-to-customer-end-of-day/{TransactionDate}
    method: GET
    data_selector: Immediate download
    params: {}
- name: bank_to_customer_report_request
  endpoint:
    path: /api/v2/reports/requests/bank-to-customer-report
    method: POST
    data_selector: Asynchronous via reports-on-request flow
    params: {}
- name: mt103_payment_confirmation
  endpoint:
    path: /api/v1/payments/singles/{payment-id}/mt103
    method: GET
    data_selector: records
- name: bank_to_customer_statement
  endpoint:
    path: /api/v1/reports/iso20022/bank-to-customer-end-of-day/{TransactionDate}
    method: GET
    data_selector: report
    params:
      limit: 50000
- name: bank_to_customer_report_request
  endpoint:
    path: /api/v2/reports/requests/bank-to-customer-report
    method: POST
    data_selector: report
    params: {}
- name: payment_initiation
  endpoint:
    path: /payment/initiation
    method: POST
    data_selector: messages
    params: {}
- name: account_reporting
  endpoint:
    path: /account/reporting
    method: GET
    data_selector: statements
    params: {}
- name: mt103
  endpoint:
    path: /api/v1/payments/singles/{payment-id}/mt103
    method: GET
    data_selector: MT103 message fields
    params: {}
- name: Customer Credit Transfers
  endpoint:
    path: /iso20022/payment-initiation
    method: GET
    data_selector: supported_formats
    params: {}
- name: FI-to-FI Credit Transfers
  endpoint:
    path: /iso20022/fi-to-fi-credit-transfers
    method: GET
    data_selector: supported_formats
    params: {}
- name: Account Reporting
  endpoint:
    path: /iso20022/account-reporting
    method: GET
    data_selector: supported_formats
    params: {}
- name: Submit payment initiation
  endpoint:
    path: /api/v1/payments/iso20022/fi-to-fi-customer-credit-transfer
    method: POST
    data_selector: pacs.008
- name: payment_initiation
  endpoint:
    path: /api/v1/payments/iso20022/fi-to-fi-customer-credit-transfer
    method: POST
    data_selector: pacs.008
- name: payment_initiation
  endpoint:
    path: /api/v1/payments/iso20022/customer-credit-transfer-initiation
    method: POST
    data_selector: pain.001
- name: bank_to_customer_statement
  endpoint:
    path: /reference/bank-to-customer-statement-camt053
    method: GET
    data_selector: reports
    params: {}
- name: payment_initiation
  endpoint:
    path: /api/v1/payments/iso20022/customer-credit-transfer-initiation
    method: POST
    data_selector: payment_response
    params: {}
- name: payment_status_report
  endpoint:
    path: /api/v1/payments/iso20022/customer-payment-status-report
    method: GET
    data_selector: status_response
    params: {}
- name: webhook_events
  endpoint:
    path: /webhooks/events
    method: POST
    data_selector: payload
    params: {}
- name: bank_to_customer_statement
  endpoint:
    path: /reference/bank-to-customer-statement-camt053
    method: GET
- name: webhook_events
  endpoint:
    path: /webhook/events
    method: POST
    data_selector: payload
- name: trade_history
  endpoint:
    path: /api/v2/fx/transactions
    method: GET
- name: single_trade_lookup
  endpoint:
    path: /api/v2/fx/transactions/{client-order-id}
    method: GET
- name: held_rates
  endpoint:
    path: /api/v2/fx/held-rates
    method: GET
- name: settlement_dates
  endpoint:
    path: /api/v1/fx/calendar/settlement-dates
    method: GET
- name: settlement_accounts
  endpoint:
    path: /api/v1/fx/settlement-accounts
    method: GET
- name: customer_exposure
  endpoint:
    path: /api/v1/fx/exposure/customer/{customer-id}
    method: GET
- name: list_all_trades
  endpoint:
    path: /api/v2/fx/transactions
    method: GET
    data_selector: trade_details
    params:
      clientOrderId: YourUniqueReference
- name: single_trade_lookup
  endpoint:
    path: /api/v2/fx/transactions/{client-order-id}
    method: GET
    data_selector: trade_details
- name: active_held_rates
  endpoint:
    path: /api/v2/fx/held-rates
    method: GET
    data_selector: held_rates
- name: settlement_dates
  endpoint:
    path: /api/v1/fx/calendar/settlement-dates
    method: GET
    data_selector: settlement_dates
- name: settlement_accounts
  endpoint:
    path: /api/v1/fx/settlement-accounts
    method: GET
    data_selector: settlement_accounts
- name: customer_exposure
  endpoint:
    path: /api/v1/fx/exposure/customer/{customer-id}
    method: GET
    data_selector: fx_exposure
- name: Create Payment
  endpoint:
    path: /reference/post_api-services-v2-payments
    method: POST
    data_selector: paymentReference
- name: Supported Tenors
  endpoint:
    path: /supported-tenors
    method: GET
    data_selector: tenors
    params: {}
- name: Settlement Rules
  endpoint:
    path: /settlement-rules
    method: GET
    data_selector: rules
    params: {}
- name: mandates
  endpoint:
    path: /reference/post_api-services-v2-mandates
    method: POST
    data_selector: records
- name: hosted_pages
  endpoint:
    path: /reference/get_api-services-v2-hostedpages-id-view
    method: GET
    data_selector: records
- name: mandates
  endpoint:
    path: /reference/post_api-services-v2-mandates
    method: POST
    data_selector: mandates
- name: hosted_pages
  endpoint:
    path: /reference/get_api-services-v2-hostedpages-id-view
    method: GET
    data_selector: hostedPages
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: accounts
    params:
      PageNumber: 1
      PageSize: 50
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: result
- name: payments
  endpoint:
    path: /api/v1/payments/singles
    method: POST
    data_selector: ''
    params: {}
- name: payment_status
  endpoint:
    path: /api/v1/payments/singles/{paymentId}/status
    method: GET
    data_selector: ''
    params: {}
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: records
    params:
      PageNumber: 1
      PageSize: 50
- name: report_request
  endpoint:
    path: /api/v2/reports/requests/{report-type}
    method: POST
    data_selector: report
    params: {}
- name: report_status
  endpoint:
    path: /api/v2/reports/{request-id}/get-status
    method: GET
    data_selector: status
    params: {}
- name: download_report
  endpoint:
    path: /api/v1/reports/download-report/{reportId}
    method: GET
    data_selector: report
    params: {}
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: result
    params: {}
- name: payments_singles
  endpoint:
    path: /api/v1/payments/singles
    method: POST
    data_selector: ''
    params: {}
- name: payment_status
  endpoint:
    path: /api/v1/payments/singles/{paymentId}/status
    method: GET
    data_selector: ''
    params: {}
- name: OutgoingPaymentProcessed
  endpoint:
    path: /webhooks/OutgoingPaymentProcessed
    method: POST
    data_selector: payload
- name: OutgoingPaymentBooked
  endpoint:
    path: /webhooks/OutgoingPaymentBooked
    method: POST
    data_selector: payload
- name: IncomingPaymentProcessed
  endpoint:
    path: /webhooks/IncomingPaymentProcessed
    method: POST
    data_selector: payload
- name: IncomingPaymentBooked
  endpoint:
    path: /webhooks/IncomingPaymentBooked
    method: POST
    data_selector: payload
- name: report_request
  endpoint:
    path: /api/v2/reports/requests/{report-type}
    method: POST
    data_selector: Location
- name: report_status
  endpoint:
    path: /api/v2/reports/{request-id}/get-status
    method: GET
- name: report_download
  endpoint:
    path: /api/v1/reports/download-report/{reportId}
    method: GET
    data_selector: Location
- name: Payments
  endpoint:
    path: /api/services/v2/Payments
    method: POST
    data_selector: payment
- name: webhook_events
  endpoint:
    path: /webhooks
    method: POST
    data_selector: events
- name: Payments
  endpoint:
    path: /api/services/v2/Payments/{paymentId}
    method: GET
    data_selector: payment
    params: {}
- name: OutgoingPaymentProcessed
  endpoint:
    path: /webhooks/OutgoingPaymentProcessed
    method: POST
- name: OutgoingPaymentBooked
  endpoint:
    path: /webhooks/OutgoingPaymentBooked
    method: POST
- name: IncomingPaymentProcessed
  endpoint:
    path: /webhooks/IncomingPaymentProcessed
    method: POST
- name: IncomingPaymentBooked
  endpoint:
    path: /webhooks/IncomingPaymentBooked
    method: POST
- name: payments
  endpoint:
    path: /api/v1/payments
    method: GET
- name: closing_virtual_account
  endpoint:
    path: /closing-virtual-account
    method: POST
    data_selector: data
    params: {}
- name: ubo_fields_required
  endpoint:
    path: /ubo-fields-required
    method: GET
    data_selector: fields
    params: {}
- name: payment
  endpoint:
    path: /api/services/v2/Payments
    method: POST
- name: Payments
  endpoint:
    path: /api/services/v2/Payments/{paymentId}
    method: GET
    data_selector: payment
    params: {}
- name: rejection_report
  endpoint:
    path: /docs/rejection-report
    method: GET
    data_selector: records
    params: {}
- name: reconciliation_report
  endpoint:
    path: /docs/reconciliation-report
    method: GET
    data_selector: records
    params: {}
- name: payments
  endpoint:
    path: /api/v1/payments/singles
    method: GET
    data_selector: errors
- name: ultimate_beneficial_owners
  endpoint:
    path: /virtual_accounts/ubo
    method: GET
    data_selector: records
- name: closing_virtual_account
  endpoint:
    path: /virtual_accounts/close
    method: POST
    data_selector: result
- name: payments
  endpoint:
    path: /api/v1/payments/fi-to-fi-customer-credit-transfer-initiation
    method: POST
- name: payment_initiation
  endpoint:
    path: /api/v1/payments/initiations
    method: POST
    data_selector: paymentDetails
    params: {}
- name: get_payments
  endpoint:
    path: /api/v1/payments/singles
    method: GET
    data_selector: payments
    params: {}
- name: payments
  endpoint:
    path: /api/v1/payments/singles
    method: GET
    data_selector: errors
- name: fi-to-fi-customer-credit-transfer-initiation
  endpoint:
    path: /api/v1/payments/fi-to-fi-customer-credit-transfer-initiation
    method: POST
    data_selector: data
    params: {}
- name: outgoing_payment_processed
  endpoint:
    path: /notifications/outgoing_payment_processed
    method: POST
    data_selector: notifications
    params: {}
- name: outgoing_payment_booked
  endpoint:
    path: /notifications/outgoing_payment_booked
    method: POST
    data_selector: notifications
    params: {}
- name: outgoing_payment_rejected
  endpoint:
    path: /notifications/outgoing_payment_rejected
    method: POST
    data_selector: notifications
    params: {}
- name: reversed
  endpoint:
    path: /notifications/reversed
    method: POST
    data_selector: notifications
    params: {}
- name: missing_funding
  endpoint:
    path: /notifications/missing_funding
    method: POST
    data_selector: notifications
    params: {}
- name: payment_routing
  endpoint:
    path: /payment/routing
    method: GET
    data_selector: notifications
- name: outgoing_direct_debit_pending_processing
  endpoint:
    path: /outgoing/direct_debit/pending_processing
    method: GET
    data_selector: notifications
- name: outgoing_payment_processed
  endpoint:
    path: /outgoing/payment/processed
    method: GET
    data_selector: notifications
- name: incoming_payment_processed
  endpoint:
    path: /incoming/payment/processed
    method: GET
    data_selector: notifications
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: OutgoingPaymentProcessed
  endpoint:
    path: /abcb/outgoing-payment-processed
    method: POST
    data_selector: notifications
- name: IncomingPaymentProcessed
  endpoint:
    path: /abcb/incoming-payment-processed
    method: POST
    data_selector: notifications
- name: mandates
  endpoint:
    path: /reference/post_api-services-v2-mandates
    method: POST
    data_selector: mandates
- name: create_payment
  endpoint:
    path: /api/services/v2/payments
    method: POST
- name: mandate
  endpoint:
    path: /reference/post_api-services-v2-mandates
    method: POST
    data_selector: mandate
- name: create_payment
  endpoint:
    path: /reference/post_api-services-v2-payments
    method: POST
    data_selector: payment_reference
- name: Payments
  endpoint:
    path: /api/services/v2/Payments
    method: POST
    data_selector: payment
- name: Payments
  endpoint:
    path: /api/services/v2/Payments/{id}
    method: GET
    data_selector: payment
    params: {}
- name: Payments
  endpoint:
    path: /api/services/v2/Payments
    method: POST
    data_selector: payment
- name: payment_status
  endpoint:
    path: /api/services/v2/Payments/{id}
    method: GET
    data_selector: payment
- name: CreateRequestToPay
  endpoint:
    path: /api-services/v2/requeststopay
    method: POST
    data_selector: requestToPay
    params: {}
- name: CreateRequestToPay
  endpoint:
    path: /api/services/v2/requeststopay
    method: POST
    data_selector: requestToPay
    params: {}
- name: GetHostedPageView
  endpoint:
    path: /api/services/v2/hostedpages/{id}/view
    method: GET
    data_selector: hostedPageView
    params: {}
- name: payment_confirmation_pdf
  endpoint:
    path: /transactions/payments/confirmation/pdf
    method: GET
    data_selector: payment_details
- name: mt103_confirmation
  endpoint:
    path: /transactions/payments/confirmation/mt103
    method: GET
    data_selector: payment_details
- name: recall_payment
  endpoint:
    path: /docs/payment-recalls
    method: GET
    data_selector: recalls
- name: payment_trace
  endpoint:
    path: /payments/traces
    method: POST
    data_selector: trace_request
    params: {}
- name: trace_status
  endpoint:
    path: /payments/traces/status
    method: GET
    data_selector: trace_status
    params: {}
- name: payment_status
  endpoint:
    path: /payment/status
    method: GET
    data_selector: statuses
- name: payment_bulk_format
  endpoint:
    path: /docs/bulk-payment-csv-file-guide
    method: GET
    data_selector: payment instructions
- name: BlackRock ICS US Treasury Fund
  endpoint:
    path: /blackrock/ics/us/treasury/fund
    method: GET
    data_selector: funds
    params: {}
- name: Holdings
  endpoint:
    path: /holdings
    method: GET
    data_selector: holdings
    params: {}
- name: Orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: payment_trace
  endpoint:
    path: /payment/traces
    method: POST
    data_selector: trace_requests
    params: {}
- name: virtual_accounts
  endpoint:
    path: /reference/post_api-v1-virtualaccounts-update
    method: POST
    data_selector: records
    params: {}
- name: recipients
  endpoint:
    path: /recipients
    method: GET
- name: direct_debit_rejection
  endpoint:
    path: /payments/invoke
    method: POST
- name: account_activity
  endpoint:
    path: /reports/account_activity
    method: GET
    data_selector: records
- name: current_available_balance
  endpoint:
    path: /reports/current_available_balance
    method: GET
    data_selector: records
- name: reconciliation
  endpoint:
    path: /reports/reconciliation
    method: GET
    data_selector: records
- name: unprocessed_payments
  endpoint:
    path: /reports/unprocessed_payments
    method: GET
    data_selector: records
- name: bank_statement
  endpoint:
    path: /reports/bank_statement
    method: GET
    data_selector: records
- name: end_of_day_balance
  endpoint:
    path: /reports/end_of_day_balance
    method: GET
    data_selector: records
- name: bulk_payment
  endpoint:
    path: /bulk-payment
    method: POST
    data_selector: payments
    params: {}
- name: account_types
  endpoint:
    path: /accounts
    method: GET
    data_selector: accounts
- name: MMF Information
  endpoint:
    path: /money-market-funds
    method: GET
    data_selector: MMF_details
    params: {}
- name: money_market_funds
  endpoint:
    path: /mmfs
    method: GET
    data_selector: funds
    params: {}
- name: authorization
  endpoint:
    path: /api/v1/authorizations/authorize
    method: GET
    data_selector: ''
- name: authorization
  endpoint:
    path: /api/v1/authorizations/authorize
    method: GET
- name: virtual_accounts
  endpoint:
    path: /reference/post_api-v1-virtualaccounts-update
    method: POST
    data_selector: data
    params: {}
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: records
- name: account
  endpoint:
    path: /accounts/{account-id}
    method: GET
- name: account_balances
  endpoint:
    path: /accounts/{account-id}/balances
    method: GET
- name: bookings
  endpoint:
    path: /v1/accounts/{account-id}/bookings
    method: GET
- name: account_activity
  endpoint:
    path: /reports/account_activity
    method: GET
    data_selector: report_data
- name: current_and_available_balance
  endpoint:
    path: /reports/current_and_available_balance
    method: GET
    data_selector: report_data
- name: reconciliation
  endpoint:
    path: /reports/reconciliation
    method: GET
    data_selector: report_data
- name: unprocessed_payments
  endpoint:
    path: /reports/unprocessed_payments
    method: GET
    data_selector: report_data
- name: bank_statement
  endpoint:
    path: /reports/bank_statement
    method: GET
    data_selector: report_data
- name: end_of_day_balance
  endpoint:
    path: /reports/end_of_day_balance
    method: GET
    data_selector: report_data
- name: bookings
  endpoint:
    path: /v3/bookings
    method: GET
- name: users
  endpoint:
    path: /admin/users
    method: GET
    data_selector: users
    params: {}
- name: AccountHolderVerification
  endpoint:
    path: /api/v1/risk-check/accountholderverifications
    method: POST
- name: AccountHolderVerification
  endpoint:
    path: /v1/risk-check/accountholderverifications/{id}
    method: GET
- name: fx_quote
  endpoint:
    path: /fx/rates/{currency-one}/{currency-two}
    method: GET
- name: fx_quote
  endpoint:
    path: /v2/fx/rates/{currency-pair}
    method: GET
- name: authorization
  endpoint:
    path: /api/v1/authorizations/authorize
    method: GET
- name: fx_quotes_bulk
  endpoint:
    path: /v2/fx/rates/bulk
    method: POST
- name: authorization
  endpoint:
    path: /authorizations/authorize
    method: GET
    data_selector: token
- name: execute_bcfx_order
  endpoint:
    path: /v2/fx/trading
    method: POST
- name: accounts
  endpoint:
    path: /v1/accounts
    method: GET
- name: fx_transactions
  endpoint:
    path: /fx/transactions
    method: GET
    data_selector: transactions
- name: account
  endpoint:
    path: /v1/accounts/{account-id}
    method: GET
    data_selector: ''
- name: fx_transactions
  endpoint:
    path: /fx/transactions
    method: POST
- name: account_balances
  endpoint:
    path: /v1/accounts/{account-id}/balances
    method: GET
- name: get_specific_fx_transaction
  endpoint:
    path: /v2/fx/transactions/{client-order-id}
    method: GET
- name: bookings
  endpoint:
    path: /v3/bookings
    method: GET
- name: fx_exposure
  endpoint:
    path: /fx/exposure/customer/{customer-id}
    method: GET
- name: bookings
  endpoint:
    path: /v3/bookings
    method: GET
- name: held_rate
  endpoint:
    path: /v1/fx/rates/held-rates/{currency-one}/{currency-two}
    method: GET
- name: AccountHolderVerification
  endpoint:
    path: /v1/risk-check/accountholderverifications
    method: POST
- name: held_rates
  endpoint:
    path: /v2/fx/held-rates
    method: GET
- name: account_holder_verification
  endpoint:
    path: /api/v1/risk-check/accountholderverifications/{id}
    method: GET
    data_selector: response
- name: fx_settlement_dates
  endpoint:
    path: /v1/fx/calendar/settlement-dates
    method: GET
- name: fx_quote
  endpoint:
    path: /fx/rates/{currency-one}/{currency-two}
    method: GET
- name: FX Quote
  endpoint:
    path: /api/v2/fx/rates/{currency-pair}
    method: GET
- name: fx_settlement_accounts
  endpoint:
    path: /v1/fx/settlement-accounts
    method: GET
- name: FX quotes bulk
  endpoint:
    path: /v2/fx/rates/bulk
    method: POST
- name: fx_transactions
  endpoint:
    path: /fx/reports/transactions
    method: GET
- name: execute_bcfx_order
  endpoint:
    path: /v2/fx/trading
    method: POST
- name: fx_transactions
  endpoint:
    path: /fx/reports/transactions
    method: POST
- name: fx_transactions
  endpoint:
    path: /v2/fx/transactions
    method: GET
- name: multicurrency_payments
  endpoint:
    path: /fx/rates/payments/{debit-currency}/{credit-currency}
    method: GET
- name: fx_transactions
  endpoint:
    path: /fx/transactions
    method: POST
- name: single_payments
  endpoint:
    path: /v1/payments/singles
    method: POST
- name: get_specific_fx_transaction
  endpoint:
    path: /v2/fx/transactions/{client-order-id}
    method: GET
- name: payment
  endpoint:
    path: /payment/content_specification
    method: POST
    data_selector: content
    params: {}
- name: fx_exposure
  endpoint:
    path: /v1/fx/exposure/customer/{customer-id}
    method: GET
- name: payments
  endpoint:
    path: /v1/payments/singles
    method: GET
    data_selector: payments
- name: held_rate
  endpoint:
    path: /fx/rates/held-rates/{currency-one}/{currency-two}
    method: GET
- name: payment_status
  endpoint:
    path: /api/v1/payments/singles/{payment-id}/status
    method: GET
    data_selector: status
- name: active_held_rates
  endpoint:
    path: /api/v2/fx/held-rates
    method: GET
- name: payment
  endpoint:
    path: /v1/payments/singles/{payment-id}
    method: GET
- name: fx_settlement_dates
  endpoint:
    path: /v1/fx/calendar/settlement-dates
    method: GET
- name: cancel_payment
  endpoint:
    path: /api/v1/payments/singles/{payment-id}/cancel
    method: PUT
- name: settlement_accounts
  endpoint:
    path: /v1/fx/settlement-accounts
    method: GET
- name: reject_direct_debit_payment
  endpoint:
    path: /api/v1/payments/singles/{payment-id}/reject
    method: PUT
- name: MT103 Payment Confirmation
  endpoint:
    path: /api/v1/payments/singles/{payment-id}/mt103
    method: GET
- name: fx_transactions
  endpoint:
    path: /fx/reports/transactions
    method: GET
- name: fx_transactions
  endpoint:
    path: /fx/reports/transactions
    method: POST
- name: payment_details
  endpoint:
    path: /v1/payments/singles/transactionreference/{transactionreference}
    method: GET
    data_selector: payment details
- name: get_rate_multicurrency_payments
  endpoint:
    path: /v1/fx/rates/payments/{debit-currency}/{credit-currency}
    method: GET
- name: bulk_payments
  endpoint:
    path: /payments/bulks
    method: POST
    data_selector: null
    params: {}
- name: single_payments
  endpoint:
    path: /v1/payments/singles
    method: POST
- name: content_specification
  endpoint:
    path: /content_specifications
    method: GET
    data_selector: content
    params: {}
- name: bulk_payments
  endpoint:
    path: /v1/payments/bulks
    method: GET
- name: payments
  endpoint:
    path: /v1/payments/singles
    method: GET
- name: single_bulk_file
  endpoint:
    path: /payments/bulks/{payment-bulk-id}
    method: GET
- name: payment_status
  endpoint:
    path: /v1/payments/singles/{payment-id}/status
    method: GET
    data_selector: status
- name: payment_details
  endpoint:
    path: /payments/singles/{payment-id}
    method: GET
- name: bulk_payment_status
  endpoint:
    path: /v1/payments/bulks/{payment-bulk-id}/status
    method: GET
- name: cancel_payment
  endpoint:
    path: /v1/payments/singles/{payment-id}/cancel
    method: PUT
- name: bulk_payment_cancel
  endpoint:
    path: /v1/payments/bulks/{payment-bulk-id}/cancel
    method: PUT
- name: reject_direct_debit_payment
  endpoint:
    path: /v1/payments/singles/{payment-id}/reject
    method: PUT
- name: agency_and_correspondent_banking_payment
  endpoint:
    path: /api/v1/payments/fi-to-fi-customer-credit-transfer-initiation
    method: POST
- name: mt103_payment_confirmation
  endpoint:
    path: /payments/singles/{payment-id}/mt103
    method: GET
- name: payment_initiation
  endpoint:
    path: /api/v1/payments/iso20022/customer-credit-transfer-initiation
    method: POST
- name: payment_details
  endpoint:
    path: /v1/payments/singles/transactionreference/{transactionreference}
    method: GET
- name: payment_instruction
  endpoint:
    path: /api/v1/payments/iso20022/fi-to-fi-customer-credit-transfer
    method: POST
- name: bulk_payments
  endpoint:
    path: /v1/payments/bulks
    method: POST
    data_selector: null
    params: {}
- name: recall
  endpoint:
    path: /v1/recalls
    method: POST
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: paymentBulkId
    params: {}
- name: recalls
  endpoint:
    path: /recalls
    method: GET
- name: bulk_payments
  endpoint:
    path: /v1/payments/bulks
    method: GET
    data_selector: records
- name: recall
  endpoint:
    path: /v1/recalls/{recall-id}
    method: GET
- name: single_bulk_file
  endpoint:
    path: /payments/bulks/{payment-bulk-id}
    method: GET
- name: recall_status
  endpoint:
    path: /recalls/{recall-id}/status
    method: GET
- name: single_bulk_payment_status
  endpoint:
    path: /payments/bulks/{payment-bulk-id}/status
    method: GET
- name: traces
  endpoint:
    path: /api/v1/traces
    method: POST
- name: cancel_bulk_payment
  endpoint:
    path: /api/v1/payments/bulks/{payment-bulk-id}/cancel
    method: PUT
    data_selector: status
- name: traces
  endpoint:
    path: /v1/traces
    method: GET
- name: agency_and_correspondent_banking_payments
  endpoint:
    path: /api/v1/payments/fi-to-fi-customer-credit-transfer-initiation
    method: POST
- name: cancel_trace
  endpoint:
    path: /v1/traces/{trace-id}/cancel
    method: PUT
- name: payment_initiation
  endpoint:
    path: /payments/iso20022/customer-credit-transfer-initiation
    method: POST
- name: payment_instruction
  endpoint:
    path: /api/v1/payments/iso20022/fi-to-fi-customer-credit-transfer
    method: POST
- name: trace
  endpoint:
    path: /v1/traces/{trace-id}
    method: GET
- name: trace_status
  endpoint:
    path: /traces/{trace-id}/status
    method: GET
- name: recall
  endpoint:
    path: /v1/recalls
    method: POST
- name: recalls
  endpoint:
    path: /v1/recalls
    method: GET
- name: return_payment
  endpoint:
    path: /returns
    method: POST
    data_selector: null
    params: {}
- name: recall
  endpoint:
    path: /v1/recalls/{recall-id}
    method: GET
- name: payments_invoke
  endpoint:
    path: /v1/payments/invoke
    method: POST
- name: recall_status
  endpoint:
    path: /v1/recalls/{recall-id}/status
    method: GET
- name: trace_payment
  endpoint:
    path: /api/v1/traces
    method: POST
- name: order_virtual_accounts
  endpoint:
    path: /virtualaccounts/orders
    method: POST
- name: traces
  endpoint:
    path: /v1/traces
    method: GET
- name: cancel_trace
  endpoint:
    path: /v1/traces/{trace-id}/cancel
    method: PUT
- name: virtual_account_orders
  endpoint:
    path: /virtualaccounts/orders
    method: GET
- name: trace
  endpoint:
    path: /v1/traces/{trace-id}
    method: GET
- name: virtual_account_order
  endpoint:
    path: /virtualaccounts/orders/{orderId}
    method: GET
- name: trace_status
  endpoint:
    path: /traces/{trace-id}/status
    method: GET
- name: virtual_accounts
  endpoint:
    path: /v1/virtualAccounts
    method: GET
    data_selector: VirtualAccounts
- name: virtual_account_without_customer_details
  endpoint:
    path: /virtualAccounts/fetch
    method: GET
- name: returns
  endpoint:
    path: /returns
    method: POST
    data_selector: null
    params: {}
- name: customer_details_update_status
  endpoint:
    path: /v1/virtualAccounts/{virtualAccountNumber}/{companyNumber}/status
    method: GET
- name: payments_invoke
  endpoint:
    path: /payments/invoke
    method: POST
- name: status_of_virtual_account_closure
  endpoint:
    path: /api/v1/virtualAccounts/{virtualAccountNumber}/close/status
    method: GET
- name: order_virtual_accounts
  endpoint:
    path: /virtualaccounts/orders
    method: POST
    data_selector: orderId
- name: virtual_accounts_update
  endpoint:
    path: /virtualAccounts/update
    method: POST
- name: virtual_account_orders
  endpoint:
    path: /v1/virtualaccounts/orders
    method: GET
- name: virtual_account_order
  endpoint:
    path: /v1/virtualaccounts/orders/{orderId}
    method: GET
- name: accounts
  endpoint:
    path: /reference/get_api-v1-accounts
    method: GET
- name: payments
  endpoint:
    path: /reference/post_api-v1-payments-singles
    method: POST
- name: virtual_accounts
  endpoint:
    path: /reference/get_api-v1-virtualaccounts
    method: GET
- name: virtual_accounts
  endpoint:
    path: /v1/virtualAccounts
    method: GET
    data_selector: VirtualAccounts
- name: virtual_account
  endpoint:
    path: /v1/virtualAccounts/fetch
    method: GET
    data_selector: records
- name: update_customer_details
  endpoint:
    path: /virtualAccounts/update/file
    method: POST
- name: virtual_account_status
  endpoint:
    path: /v1/virtualAccounts/{virtualAccountNumber}/{companyNumber}/status
    method: GET
- name: close_virtual_accounts
  endpoint:
    path: /virtualAccounts/close
    method: POST
- name: virtual_account_closure_status
  endpoint:
    path: /v1/virtualAccounts/{virtualAccountNumber}/close/status
    method: GET
    data_selector: status
    params: {}
- name: accounts
  endpoint:
    path: /reference/get_api-v1-accounts
    method: GET
- name: payments
  endpoint:
    path: /reference/post_api-v1-payments-singles
    method: POST
- name: virtual_accounts
  endpoint:
    path: /reference/get_api-v1-virtualaccounts
    method: GET
- name: close_virtual_accounts
  endpoint:
    path: /v1/virtualAccounts/close/file
    method: POST
    data_selector: status
- name: update_customer_details
  endpoint:
    path: /virtualAccounts/update
    method: POST
- name: account_activity_report
  endpoint:
    path: /reports/account-activity-report
    method: GET
- name: accounts
  endpoint:
    path: /reference/get_api-v1-accounts
    method: GET
- name: payments
  endpoint:
    path: /reference/post_api-v1-payments-singles
    method: POST
- name: virtual_accounts
  endpoint:
    path: /reference/get_api-v1-virtualaccounts
    method: GET
- name: account_activity_report
  endpoint:
    path: /v1/reports/account-activity-paged-report
    method: GET
- name: account_balance_report
  endpoint:
    path: /reports/account-balance-report
    method: GET
    data_selector: ''
- name: update_customer_details
  endpoint:
    path: /api/v1/virtualAccounts/update/file
    method: POST
- name: reconciliation_report
  endpoint:
    path: /v1/reports/reconciliation-report
    method: GET
- name: close_virtual_accounts
  endpoint:
    path: /virtualAccounts/close
    method: POST
- name: paged_reconciliation_report
  endpoint:
    path: /v1/reports/reconciliation-paged-report
    method: GET
- name: accounts
  endpoint:
    path: /reference/get_api-v1-accounts
    method: GET
- name: payments
  endpoint:
    path: /reference/post_api-v1-payments-singles
    method: POST
- name: virtual_accounts
  endpoint:
    path: /reference/get_api-v1-virtualaccounts
    method: GET
- name: intraday_reconciliation_report
  endpoint:
    path: /reports/intraday-reconciliation-paged-report
    method: GET
    data_selector: report
    params: {}
- name: rejection_report
  endpoint:
    path: /v1/reports/rejection-report
    method: GET
    data_selector: null
    params: {}
- name: close_virtual_accounts
  endpoint:
    path: /virtualAccounts/close/file
    method: POST
- name: check_closure_status
  endpoint:
    path: /virtualaccounts-virtualaccountnumber-close-status
    method: GET
- name: bank_to_customer_statement
  endpoint:
    path: /reports/iso20022/bank-to-customer-end-of-day
    method: GET
    data_selector: transactions
- name: account_activity_report
  endpoint:
    path: /v1/reports/account-activity-report
    method: GET
    data_selector: report
    params: {}
- name: download_report
  endpoint:
    path: /v1/reports/download-report/{reportId}
    method: GET
- name: account_activity_report
  endpoint:
    path: /v1/reports/account-activity-paged-report
    method: GET
- name: request_report
  endpoint:
    path: /v2/reports/requests
    method: POST
- name: account_balance_report
  endpoint:
    path: /reports/account-balance-report
    method: GET
- name: account_activity_report
  endpoint:
    path: /v2/reports/requests/account-activity-report
    method: POST
- name: reconciliation_report
  endpoint:
    path: /reports/reconciliation-report
    method: GET
- name: account_balance_report
  endpoint:
    path: /v2/reports/requests/account-balance-report
    method: POST
- name: paged_reconciliation_report
  endpoint:
    path: /v1/reports/reconciliation-paged-report
    method: GET
    data_selector: null
    params: {}
- name: intraday_reconciliation_report
  endpoint:
    path: /v1/reports/intraday-reconciliation-paged-report
    method: GET
- name: bank_statement_report_v3
  endpoint:
    path: /v3/reports/requests/bank-statement-report
    method: POST
- name: rejection_report
  endpoint:
    path: /v1/reports/rejection-report
    method: GET
    data_selector: ''
- name: bank_statement_report
  endpoint:
    path: /api/v3/reports/requests/bank-statement-report
    method: POST
- name: bank_to_customer_statement
  endpoint:
    path: /v1/reports/iso20022/bank-to-customer-end-of-day
    method: GET
    data_selector: transactions
- name: bank_to_customer_report
  endpoint:
    path: /reports/requests/bank-to-customer-report
    method: POST
- name: company_account_balance_report
  endpoint:
    path: /v2/reports/requests/company-account-balance-report
    method: POST
- name: download_report
  endpoint:
    path: /reports/download-report/{reportId}
    method: GET
    data_selector: ''
    params: {}
- name: request_report
  endpoint:
    path: /v2/reports/requests
    method: POST
- name: reconciliation_report
  endpoint:
    path: /api/v2/reports/requests/reconciliation-report
    method: POST
- name: account_activity_report
  endpoint:
    path: /v2/reports/requests/account-activity-report
    method: POST
- name: rejection_report
  endpoint:
    path: /api/v2/reports/requests/rejection-report
    method: POST
- name: account_balance_report
  endpoint:
    path: /v2/reports/requests/account-balance-report
    method: POST
- name: get_status_of_requested_report
  endpoint:
    path: /v2/reports/requests/{request-id}/get-status
    method: GET
- name: bank_statement_report
  endpoint:
    path: /v2/reports/requests/bank-statement-report
    method: POST
- name: bank_statement_report_v3
  endpoint:
    path: /v3/reports/requests/bank-statement-report
    method: POST
- name: requested_reports
  endpoint:
    path: /reports/requests/requested-reports
    method: GET
- name: bank_statement_report
  endpoint:
    path: /reports/requests/bank-statement-report
    method: POST
- name: fee_details
  endpoint:
    path: /v1/fees/{fee-id}
    method: GET
- name: fee_details_v2
  endpoint:
    path: /v2/fees/{fee-id}
    method: GET
- name: interest_details
  endpoint:
    path: /v1/interests/{interest-id}
    method: GET
- name: bank_to_customer_report
  endpoint:
    path: /reports/requests/bank-to-customer-report
    method: POST
- name: company_account_balance_report
  endpoint:
    path: /v2/reports/requests/company-account-balance-report
    method: POST
- name: fees
  endpoint:
    path: /v1/fees
    method: GET
    data_selector: data
- name: fees_v2
  endpoint:
    path: /v2/fees
    method: GET
    data_selector: data
- name: interests
  endpoint:
    path: /v1/interests
    method: GET
    data_selector: data
- name: reconciliation_report
  endpoint:
    path: /reports/requests/reconciliation-report
    method: POST
- name: Fee details
  endpoint:
    path: /reference/get_api-v1-fees-fee-id
    method: GET
    data_selector: records
- name: rejection_report
  endpoint:
    path: /api/v2/reports/requests/rejection-report
    method: POST
- name: fee_details
  endpoint:
    path: /v2/fees/{fee-id}
    method: GET
- name: get_status_of_requested_report
  endpoint:
    path: /v2/reports/requests/{request-id}/get-status
    method: GET
- name: fees
  endpoint:
    path: /v2/fees
    method: GET
    data_selector: collection
- name: requested_reports
  endpoint:
    path: /v2/reports/requests/requested-reports
    method: GET
- name: fee_details
  endpoint:
    path: /v2/fees/{id}
    method: GET
- name: interest
  endpoint:
    path: /v1/interests/{interest-id}
    method: GET
    data_selector: Interest
- name: fee_details
  endpoint:
    path: /v1/fees/{fee-id}
    method: GET
- name: fee_details_v2
  endpoint:
    path: /v2/fees/{fee-id}
    method: GET
- name: interest_details
  endpoint:
    path: /v1/interests/{interest-id}
    method: GET
- name: interest
  endpoint:
    path: /v1/interests
    method: GET
- name: interest
  endpoint:
    path: /v1/interests/{id}
    method: GET
    data_selector: records
- name: fees
  endpoint:
    path: /v1/fees
    method: GET
    data_selector: records
- name: fees_v2
  endpoint:
    path: /v2/fees
    method: GET
    data_selector: records
- name: interests
  endpoint:
    path: /v1/interests
    method: GET
    data_selector: records
- name: fee_details
  endpoint:
    path: /reference/get_api-v1-fees-fee-id
    method: GET
- name: interest_details
  endpoint:
    path: /reference/get_api-v1-interests-interest-id
    method: GET
- name: accounts
  endpoint:
    path: /api-v1-accounts
    method: GET
- name: payments
  endpoint:
    path: /api-v2-payments
    method: POST
- name: fee_details
  endpoint:
    path: /v2/fees/{fee-id}
    method: GET
- name: subscription_event
  endpoint:
    path: /v1/notificationselfservice/subscriptionEvent
    method: POST
- name: fees
  endpoint:
    path: /v2/fees
    method: GET
    data_selector: collection
- name: fee_details
  endpoint:
    path: /v2/fees/{id}
    method: GET
- name: subscription_event
  endpoint:
    path: /notificationselfservice/subscriptionEvent/{id}
    method: DELETE
- name: interest
  endpoint:
    path: /v1/interests/{interest-id}
    method: GET
    data_selector: interest
- name: subscriptions
  endpoint:
    path: /notificationselfservice/subscription
    method: GET
- name: interest
  endpoint:
    path: /v1/interests
    method: GET
    data_selector: collection
- name: setup_subscription
  endpoint:
    path: /notificationselfservice/subscription
    method: POST
- name: interest
  endpoint:
    path: /v1/interests/{id}
    method: GET
- name: subscription_details
  endpoint:
    path: /notificationselfservice/subscription/{id}
    method: GET
- name: accounts
  endpoint:
    path: /reference/get_api-v1-accounts
    method: GET
- name: payments
  endpoint:
    path: /reference/post_api-v1-payments-singles
    method: POST
- name: virtual_accounts
  endpoint:
    path: /reference/get_api-v1-virtualaccounts
    method: GET
- name: subscription
  endpoint:
    path: /notificationselfservice/subscription/{id}
    method: PUT
- name: subscription_event
  endpoint:
    path: /v1/notificationselfservice/subscriptionEvent
    method: POST
- name: subscription
  endpoint:
    path: /notificationselfservice/subscription/{id}
    method: DELETE
- name: activate_subscription
  endpoint:
    path: /v1/notificationselfservice/subscription/{id}/activate
    method: PUT
- name: delete_event
  endpoint:
    path: /notificationselfservice/subscriptionEvent/{id}
    method: DELETE
- name: deactivate_subscription
  endpoint:
    path: /notificationselfservice/subscription/{id}/deactivate
    method: PUT
- name: subscriptions
  endpoint:
    path: /v1/notificationselfservice/subscription
    method: GET
- name: simulate_debit
  endpoint:
    path: /api/v1/payments/simulations/debits
    method: POST
- name: subscription
  endpoint:
    path: /notificationselfservice/subscription
    method: POST
- name: simulate_credit
  endpoint:
    path: /api/v1/payments/simulations/credits
    method: POST
- name: subscription
  endpoint:
    path: /notificationselfservice/subscription/{id}
    method: GET
    data_selector: subscription
- name: subscription
  endpoint:
    path: /v1/notificationselfservice/subscription/{id}
    method: PUT
- name: Trigger events
  endpoint:
    path: /api/v1/notificationselfservice/clienttest/{id}
    method: POST
- name: delete_subscription
  endpoint:
    path: /notificationselfservice/subscription/{id}
    method: DELETE
- name: request_to_pay
  endpoint:
    path: /api/services/v2/RequestsToPay
    method: POST
- name: requests_to_pay
  endpoint:
    path: /api/services/v2/RequestsToPay
    method: GET
- name: activate_subscription
  endpoint:
    path: /v1/notificationselfservice/subscription/{id}/activate
    method: PUT
- name: RequestsToPay
  endpoint:
    path: /api/services/v2/RequestsToPay/{id}
    method: GET
- name: deactivate_subscription
  endpoint:
    path: /notificationselfservice/subscription/{id}/deactivate
    method: PUT
- name: simulate_debit
  endpoint:
    path: /api/v1/payments/simulations/debits
    method: POST
- name: bank_accounts
  endpoint:
    path: /api-services/v2/bankaccounts
    method: GET
- name: customers
  endpoint:
    path: /api-services/v2/customers
    method: POST
- name: simulate_credit
  endpoint:
    path: /api/v1/payments/simulations/credits
    method: POST
- name: bank_account
  endpoint:
    path: /api/services/v2/BankAccounts
    method: POST
- name: Trigger events
  endpoint:
    path: /api/v1/notificationselfservice/clienttest/{id}
    method: POST
- name: bank_accounts
  endpoint:
    path: /services/v2/BankAccounts
    method: GET
    data_selector: records
- name: RequestsToPay
  endpoint:
    path: /api/services/v2/RequestsToPay
    method: POST
- name: BankAccounts
  endpoint:
    path: /api/services/v2/BankAccounts/{id}
    method: GET
    data_selector: ''
- name: requests_to_pay
  endpoint:
    path: /api/services/v2/RequestsToPay
    method: GET
- name: bank_account_block_rules
  endpoint:
    path: /api/services/v2/BankAccountBlockRules
    method: PUT
- name: RequestsToPay
  endpoint:
    path: /api/services/v2/RequestsToPay/{id}
    method: GET
- name: bank_accounts
  endpoint:
    path: /api-services/v2/bankaccounts
    method: GET
- name: customers
  endpoint:
    path: /api-services/v2/customers
    method: POST
- name: payments
  endpoint:
    path: /api-services/v2/payments
    method: POST
- name: bank_account_block_rules
  endpoint:
    path: /api/services/v2/BankAccountBlockRules
    method: GET
- name: bank_accounts
  endpoint:
    path: /api/services/v2/BankAccounts
    method: POST
- name: bank_account_country_block_rule
  endpoint:
    path: /api/services/v2/BankAccountBlockRules/Country
    method: PUT
- name: bank_accounts
  endpoint:
    path: /services/v2/BankAccounts
    method: GET
    data_selector: records
- name: bank_account_country_block_rules
  endpoint:
    path: /services/v2/BankAccountBlockRules/Country
    method: GET
    data_selector: ''
- name: bank_account
  endpoint:
    path: /services/v2/BankAccounts/{id}
    method: GET
- name: bank_account_block_rules
  endpoint:
    path: /api/services/v2/BankAccountBlockRules/Delete
    method: POST
- name: bank_account_block_rules
  endpoint:
    path: /api/services/v2/BankAccountBlockRules
    method: PUT
- name: bank_account_country_block_rule
  endpoint:
    path: /api/services/v2/BankAccountBlockRules/DeleteCountry
    method: POST
- name: bank_account_block_rules
  endpoint:
    path: /api/services/v2/BankAccountBlockRules
    method: GET
- name: connectors
  endpoint:
    path: /api/services/v2/Connectors/{id}
    method: GET
- name: bank_account_country_block_rule
  endpoint:
    path: /api/services/v2/BankAccountBlockRules/Country
    method: PUT
- name: connectors
  endpoint:
    path: /api/services/v2/Connectors
    method: GET
- name: bank_account_country_block_rules
  endpoint:
    path: /api/services/v2/BankAccountBlockRules/Country
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /api/services/v2/Customers
    method: POST
- name: BankAccountBlockRules
  endpoint:
    path: /api/services/v2/BankAccountBlockRules/Delete
    method: POST
- name: customers
  endpoint:
    path: /api/services/v2/Customers
    method: GET
    data_selector: records
- name: bank_account_country_block_rule
  endpoint:
    path: /api/services/v2/BankAccountBlockRules/DeleteCountry
    method: POST
- name: customer
  endpoint:
    path: /api/services/v2/Customers/{id}
    method: GET
- name: Connectors
  endpoint:
    path: /services/v2/Connectors/{id}
    method: GET
- name: hosted_pages
  endpoint:
    path: /api/services/v2/HostedPages
    method: GET
- name: connectors
  endpoint:
    path: /api/services/v2/Connectors
    method: GET
- name: hosted_page
  endpoint:
    path: /api/services/v2/HostedPages/{id}
    method: GET
- name: customers
  endpoint:
    path: /api/services/v2/Customers
    method: POST
- name: Hosted Pages
  endpoint:
    path: /services/v2/HostedPages/{id}/View
    method: GET
- name: customers
  endpoint:
    path: /api/services/v2/Customers
    method: GET
    data_selector: records
- name: localizationText
  endpoint:
    path: /api/services/v2/LocalizationTexts/{key}
    method: GET
    data_selector: data
    params: {}
- name: mandate
  endpoint:
    path: /api/services/v2/Mandates
    method: POST
- name: mandates
  endpoint:
    path: /api/services/v2/Mandates
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /services/v2/Customers/{id}
    method: GET
- name: mandate
  endpoint:
    path: /api/services/v2/Mandates/{id}
    method: GET
- name: hosted_pages
  endpoint:
    path: /api/services/v2/HostedPages
    method: GET
    data_selector: records
- name: approve_mandate
  endpoint:
    path: /api/services/v2/Mandates/{id}/Approve
    method: POST
- name: hosted_pages
  endpoint:
    path: /api/services/v2/HostedPages/{id}
    method: GET
- name: Mandates
  endpoint:
    path: /api/services/v2/Mandates/{id}/Resend
    method: POST
- name: Hosted Pages
  endpoint:
    path: /api/services/v2/HostedPages/{id}/View
    method: GET
- name: mandate
  endpoint:
    path: /api/services/v2/Mandates/{id}/Review
    method: POST
- name: localizationText
  endpoint:
    path: /api/services/v2/LocalizationTexts/{key}
    method: GET
    data_selector: response
- name: mandate
  endpoint:
    path: /api/services/v2/Mandates
    method: POST
- name: mandate
  endpoint:
    path: /api/services/v2/Mandates/{id}/Discard
    method: POST
- name: mandates
  endpoint:
    path: /api/services/v2/Mandates/{id}/Reinstate
    method: POST
- name: mandates
  endpoint:
    path: /api/services/v2/Mandates
    method: GET
    data_selector: records
- name: mandate
  endpoint:
    path: /api/services/v2/Mandates/{id}
    method: GET
- name: merchants
  endpoint:
    path: /api-services/v2/merchants
    method: GET
    data_selector: merchants
- name: mandate
  endpoint:
    path: /api/services/v2/Mandates/{id}/Approve
    method: POST
- name: merchant
  endpoint:
    path: /Merchants/{id}
    method: GET
- name: mandates_resend
  endpoint:
    path: /api/services/v2/Mandates/{id}/Resend
    method: POST
- name: merchants
  endpoint:
    path: /api/services/v2/Merchants
    method: GET
    data_selector: records
- name: mandates
  endpoint:
    path: /api/services/v2/Mandates/{id}/Review
    method: POST
- name: payments
  endpoint:
    path: /services/v2/Payments
    method: POST
- name: payments
  endpoint:
    path: /api/services/v2/Payments
    method: GET
    data_selector: records
- name: mandate
  endpoint:
    path: /api/services/v2/Mandates/{id}/Discard
    method: POST
- name: mandate
  endpoint:
    path: /api/services/v2/Mandates/{id}/Reinstate
    method: POST
- name: Payments
  endpoint:
    path: /api/services/v2/Payments/{id}
    method: GET
- name: merchant
  endpoint:
    path: /reference/get_api-services-v2-merchants-id
    method: GET
- name: payments
  endpoint:
    path: /api/services/v2/Payments/{id}/Review
    method: POST
- name: merchant
  endpoint:
    path: /api/services/v2/Merchants/{id}
    method: GET
- name: merchants
  endpoint:
    path: /api/services/v2/Merchants
    method: GET
    data_selector: cursor paged list of merchants
- name: payments
  endpoint:
    path: /services/v2/Payments
    method: POST
- name: payments
  endpoint:
    path: /api/services/v2/Payments
    method: GET
    data_selector: records
- name: payments
  endpoint:
    path: /api/services/v2/Payments/{id}
    method: GET
- name: payment_review
  endpoint:
    path: /api/services/v2/Payments/{id}/Review
    method: POST
notes:
- The access token is valid for 5 minutes and must be in the header for the remaining
  calls to the API.
- We do not currently support refresh tokens.
- Access to payment schemes through indirect participation requires regulatory approval,
  which varies by scheme. At a minimum, you must be licensed as a payment institution
  with permission to issue payment accounts. Additionally, you must complete a scheme
  adherence process for each scheme you want to join.
- 'Your self-issued IBANs must be uploaded to Banking Circle for account whitelisting.
  This is required to enable incoming payments for instant schemes: SCT Inst (EUR),
  UK FPS (GBP), DKK Instant, and SEK Instant.'
- Access to payment schemes through indirect participation requires regulatory approval,
  which varies by scheme.
- At a minimum, you must be licensed as a payment institution with permission to issue
  payment accounts.
- You must complete a scheme adherence process for each scheme you want to join.
- Your self-issued IBANs must be uploaded to Banking Circle for account whitelisting.
- Supports both cover and serial methods for payments.
- Notifications allow monitoring of payment flows dynamically.
- Supports real time processing and monitoring of payment flows
- Offers a wide range of reports that cover standard formats such as MT9xx messages
- Each transaction will be settled immediately following confirmation, except on bank
  holidays.
- customerId field is optional for multiple legal entities.
- 'customerId is optional: use it if you have multiple legal entities.'
- The quote is valid for 30 seconds.
- If you have multiple legal entities, specify the customerId field.
- Quotes are valid for 30 seconds.
- Querying the endpoint multiple times for the same two currencies will not usually
  produce the same quote.
- Outside of opening hours and during periods where the FX market is closed, it is
  not possible to retrieve indicative quotes.
- Outside of opening hours and during closed FX market, indicative quotes cannot be
  retrieved.
- The Foreign Exchange market is volatile, and quotes may differ with multiple requests.
- Held rates can be requested and utilised during BC FX Market open hours (Monday
  8:00 AM Sydney time to Friday 5:00 PM New York time)
- Request for quote is currently not available for bulk payments.
- Workflows where your debit account is not funded prior to the payment instruction
  are not supported for Multicurrency Payments RFQ.
- Some local account formats are subject to eligibility criteria.
- Some local account formats are subject to eligibility criteria. Please contact your
  relationship manager for details about specific format availability.
- You always need a certificate to test our endpoints, including for our sandbox environment.
- Tokens expire after 5 minutes.
- Rate limiting mechanism will return a 429 - Too Many Requests response if exceeded.
- The API implements optimistic concurrency control for PUT and DELETE operations
  to prevent conflicting updates to resources.
- Include the RowVersion in the If-Match HTTP header when performing PUT or DELETE
  operations.
- The API validates the concurrency token before processing the request.
- The API provides mechanisms to handle large datasets efficiently, both for retrieving
  and sending data.
- 'Maximum request size: 20MB. Exceeding this limit returns 413 - Payload Too Large.'
- When sending large datasets for bulk operations, maximum request size is 20MB.
- Idempotency keys must be unique and have a maximum length of 100 characters.
- Idempotency keys are valid for 10 days.
- Payment processing is simulated rather than connecting to actual payment schemes
  or clearing houses
- While most endpoints work in Sandbox, some options may not be available
- The debit simulator currently only supports simulate outgoing payments via SEPA
  Direct Debit and BACS Direct Debit.
- The credit simulator currently only supports simulate incoming payments via SEPA
  Direct Debit and BACS Direct Debit.
- Webhook simulator available exclusively in the sandbox environment
- The simulator only triggers the webhook notification - it does not create or modify
  any underlying resources.
- In the Sandbox environment, the account creation time is almost instantaneous, whereas
  it can take up to 24 hours in Production.
- The FX API operates in the same way as described in the FX documentation, with the
  exception of the Request-a-Quote function.
- In the Sandbox, the account creation time is almost instantaneous, whereas it can
  take up to 24 hours in Production.
- The sandbox is stateless and returns predefined responses only
- No real data is accessed or verified
- CoP and VoP are both supported on the same AHV endpoint, selection is based on input
  fields
- Incoming payments can be returned, this process must be initiated through support.
- Incoming payments will appear in your account with a status of `processed` once
  they have been successfully received and credited to your account.
- Payments can be cancelled based on their current status.
- Webhook notifications for key events are provided.
- Bulk payments allow you to initiate multiple payments in a single request using
  a CSV file.
- Bulk payments allow processing of hundreds or thousands of payments in a single
  API call.
- The followign controls are currently only available for EUR payments.
- 'Payments to UAE accounts from abroad must satisfy two requirements: include a payment
  purpose code and use IBAN format for beneficiary account.'
- 'The AHV will support two verification types depending on the payment method: Confirmation
  of Payee (CoP) for GBP payments via Faster Payments and Verification of Payee (VoP)
  for EUR payments via SEPA.'
- Certain payments may continue to follow alternative routing paths based on various
  factors, including compliance requirements.
- You can only trace payments that are in a final status (Processed or Rejected)
- The payment must be less than 6 months old
- You cannot trace a payment that already has an active trace request
- You cannot cancel a recall via the UI or the API. To cancel a recall, contact Client
  Services.
- The reject action covers both 'Rejection' and 'Refund'.
- The API will only allow refunds after the collection date up to 4:30 pm CET one
  banking day after the value date.
- Third parties can initiate payments via Direct Debit schemes like Bacs or SEPA.
- Payments can be rejected before processing, and refunds can be requested under specific
  conditions.
- The closure request affects all currencies linked to the Virtual Account
- You cannot close individual currency configurations
- You cannot reopen closed accounts
- You can close up to 1000 accounts at once
- Customer details must be provided during the ordering process in some jurisdictions.
- Closure request affects all currencies linked to the Virtual Account.
- Maximum 50,000 payments per report
- Field names use camelCase in JSON format (e.g. pIdChannelUser or pTxnDate), while
  CSV format uses capitals with occasional underscores (e.g. P_ID_CHANNELUSER or P_TXNDATE).
- Supports custom page size and page number for paginated version
- Recommended for large datasets (>50,000 payments)
- MT103s are only available for outgoing payments that have been successfully processed
- Provides an overview of all transactions for a given time period in XML format,
  following the ISO 20022 camt.053 standard.
- Supports ISO 20022 XML messages for payment initiation, payment status reporting,
  and account reporting.
- Currently only supports initiating Agency Banking and Correspondent Banking payments.
- FX payments are not supported at this time.
- The pacs.008 endpoint currently only supports initiating Agency Banking and Correspondent
  Banking payments.
- The camt.053 message is used to retrieve end-of-day bank-to-customer statements
  in XML format.
- Webhook notifications allow you to efficiently track payments states, and enable
  you to automate communication internally or with your customers.
- We do not recommend using webhooks as a replacement for reconciliation purposes.
- Supports end-of-day account reporting using the ISO 20022 camt.053 message format.
- Webhook management requires appropriate API access permissions.
- Your webhook endpoint must be a secure HTTPS URL capable of handling various types
  of requests and data formats.
- Do not use webhooks as a replacement for reconciliation purposes.
- The subscription is deactivated - use the `GET /api/v1/notificationselfservice/subscription`
  endpoint to look up the status of the subscription
- Your firewall settings do not allow notifications, or you have not whitelisted BC
  Connect IPs.
- The `rowVersion` is updated with each retry attempt.
- Webhook requires a secure HTTPS URL capable of handling various types of requests
  and data formats.
- Webhook endpoints must support AES-256-GCM encryption.
- Ensure there are no copy/paste errors. The checksum should be 44 characters, the
  Authentication tag 24 characters and the Nonce 16 characters.
- Value date ON trades typically settle immediately after trade confirmation. However,
  if you are using a trading line, or our collateral setup, settlement may be deferred
  until sufficient funding is available in your account.
- These trades will settle on their respective value dates, provided sufficient funding
  exists in your account. If the account lacks adequate balance, settlement occurs
  during the day when enough balance becomes available to cover the sold amount.
- Value dates automatically adjust forward when bank holidays occur in either currency.
- All requests must use HTTPS.
- 'MIME Types: API requires you to send all requests JSON-formatted and UFT-8 encoded.'
- The API patterns for Direct Debit Collections differ from our standard payment endpoints.
- Requires setup of connected app in api
- The API patterns for Direct Debit Collections differ from our standard payment endpoints,
  as they originate from an acquired product.
- The standard workflow, which is the most common way to initiate a Direct Debit Collection.
- The optimised workflow, which allows you to create both the mandate and the payment
  in a single API call.
- Creating a mandate using a hosted page is very simple.
- The type of message object in the finish() and error() handlers are different.
- A mandate entity must always be created via us.
- Not all options may be available depending on various factors.
- IP address must be whitelisted for the M2M account
- Your firewall must allow outbound traffic to the sandbox endpoints
- Creating scheme compliant payment pages can be quite a challenge.
- The hosted page can be configured individually for each merchant to execute the
  appropriate risk checks.
- Token expires in 5 minutes (300 seconds)
- You'll need to request a new token after it expires
- Pre-notification is not mandatory for SEPA Direct Debit.
- A Machine to Machine (M2M) account set up in the sandbox environment is required.
- Your IP address must be whitelisted for the M2M account.
- Payments initiated with a future date will not be processed in the Sandbox.
- Webhook events notify changes in transaction state or balances.
- Ensure you have the correct permissions to initiate payments
- Payments initiated with a future date will not be processed in the Sandbox
- A valid authentication token (Bearer token) is required.
- 'Use Merchant ID: ed2a8e8a87f2e7a6093a8969b3874d65 for sandbox testing.'
- 'Use Connector ID: 6f1cebbb863ffe22d4f73ac2aebedaf3 for sandbox testing.'
- Webhook notifications are used to inform you of changes in transaction state or
  balances.
- Pre-settlement rejections occur when a payment is rejected by the scheme before
  it is settled and booked on your account.
- Post-settlement rejections, including returns and chargebacks, occur after the payment
  has been settled and booked.
- Bulk operations are limited to 1,000 Virtual Accounts per request
- Use Merchant ID and Connector ID for production.
- For sandbox testing, static Merchant ID and Connector ID can be used.
- Ensure you have a payment ID from a previously created direct debit collection
- Valid authentication token (Bearer token) is required
- Pre-settlement rejections occur before payment settlement.
- Post-settlement rejections include returns and chargebacks.
- The reason code must be specified for each Virtual Account
- You must be authenticated and have a valid access token to send and receive data
  from the BC Connect API.
- Idempotency key must be unique and maximum 100 characters.
- Payload structure may change over time.
- Idempotency key must be unique and a maximum of 100 characters.
- Idempotency key is valid for 10 days.
- Approval required but no approvers exist.
- Targeted debtor accounts have conflicting configuration.
- Flexible parser advised as properties might change position and new properties might
  be added.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Payment routing reasons include NotAllowedPayment, AmountExceedsAgreedLimit, NotAllowedAmount,
  and others.
- Verify that your firewall allows incoming connections from BC Connect IPs
- Ensure all required IPs are whitelisted
- Verify the encryption key is exactly 32 characters
- Ensure you're using the correct nonce and authentication tag from the headers
- Verify the checksum matches the decrypted payload
- Ensure you're using UTF-8 encoding when calculating the checksum
- In Sandbox, any amount higher than 1.5 million will result in an indicative quote
  for testing purposes.
- Any amount higher than 5 million will result in a not available quote.
- In production, you will receive a 'not available' response only when we cannot price
  your request at all.
- This is currently a system limitation on our side as we do not currently support
  inverse currency pair quotation.
- Rejected trades are not booked on our side, so retrieving such transactions is not
  supported.
- The sandbox is a mocked environment, but works the same way as the real production
  environment.
- The account reconciliation API contains FX transactions.
- If you will be setup with more than one company within BC Connect, you must provide
  the customer id of the specific company in each request.
- 'You can input any of the following: IBAN, account number, or technical account
  identifier (GUID).'
- Currently, only tenor-based settlement is supported.
- Each supported currency has a maximum single trade limit.
- For higher amounts, you can request a limit increase or split large trades.
- Chargebacks can occur due to insufficient funds or incorrect account details.
- There are over 220 different chargeback reason codes in the SEPA scheme.
- If a transaction is charged back, you will receive the associated reason code.
- To enable you to process these automatically and reduce complexity, BC Connect consolidates
  them and gives you recommendations on how to react to individual reason codes.
- Some objects may return nulls in deeply nested fields
- Some payment schemes require the merchant to send a payment pre-notification to
  the customer before the payment is collected.
- The payment notification is mandatory in the BACS and SEPA scheme.
- Depending on various factors, not all options for mandate creation may be available.
- Ensure to include sepaExpress.js in the HTML document of your checkout page.
- Mandate approval for AIS and SMS is not enabled for the quick start connector.
- Consumer verification is required for every transaction.
- The BC Connect Portal is optimised for the latest versions of Google Chrome and
  Microsoft Edge.
- Authentication is required at every login and follows the Strong Customer Authentication
  (SCA) requirement under PSD2 to safeguard your account.
- The payment will be initiated immediately after creation.
- A consumer verification is required for every transaction.
- Depending on your setup, the payment might need to be approved by a colleague of
  yours.
- The payment may need to be authenticated under Strong Customer Authentication (SCA)
  by using the Authy app.
- It is not currently possible to cancel a recall via the Client Portal or the API.
  To cancel it, contact Client Services.
- Traces can only be initiated for External Outgoing payments, Payments with Status
  'Processed', and Payments that are less than 6 months old.
- Traces cannot be initiated for SEPA Instant or Faster Payments, Internal payments
  or own payments, or for payments with in-progress recalls.
- Second tries are not supported.
- See the table below for guidance on reason codes and follow the suggested action
  before contacting Client Services.
- Fields must still be defined for each line (i.e. the correct number of commas ‘,’
  must be present).
- Cross border payments (MT103) do not support empty lines between non-empty lines.
- Held rates can be requested and utilised during BC FX Market open hours ( Monday
  8:00 AM Sydney time to Friday 5:00 PM New York time )
- Users must ensure that the necessary legal addendums are signed and that they have
  the correct access rights.
- When a Virtual Account is closed, it applies to all associated currencies. Partial
  closure of specific currencies is not supported. This action is irreversible, the
  account cannot be reopened after closure.
- A trace process can only be initiated for External Outgoing payments, Payments with
  Status 'Processed', and Payments that are less than 6 months old.
- Traces cannot be initiated for SEPA Instant or Faster Payments, Internal payments
  or own payments, or payments with ongoing trace or recall processes.
- A Virtual Account can only have customer details added once.
- Bulk adding of customer details is limited to 1,000 Virtual Accounts per uploaded
  CSV file.
- Second tries are not supported. If a client cancels a return and later tries again,
  a message will appear stating that a return has already been attempted.
- Strong customer authentication is required for creating a new recipient.
- Returned payments codes
- Admin users cannot create new API users or make changes to certificates used by
  API users.
- Admin users can also not create or update other Admin users.
- This feature is being introduced as a test trial for our Investment Funds clients.
- Creating and editing requires two approvals before being applied.
- 'Don''t see the FX menu item when you log in? There can be two reasons of why you
  don''t see the FX features: 1. You don’t have the right permissions, reach out to
  your Admin. 2. Your company is not yet set up for our FX product, reach out to your
  Relationship Manager.'
- A new Approval Configuration, or any changes to an existing one, must be approved
  by a second User Administrator before taking effect, unless you have Single Approval
  permissions, which allow you to create and edit without further approval.
- Use clear and descriptive names for configurations to help administrators identify
  them easily.
- Our account solutions include operational accounts, virtual accounts, safeguarding
  accounts, deposit accounts, and specialized financial service accounts.
- Safeguarding accounts for fiduciary agreements provide a bankruptcy-remote structure
  for fund management.
- Accounts may still appear as 'Active' while the closure request is in progress.
  It may take a few minutes for the request to be processed, after which the account
  will appear as 'Closed'.
- There is a limit of 1,000 Virtual Accounts per close request.
- This endpoint has been replaced with the Get bookings of an Account v3
- Admin users can create Regular users. If you need to create an Admin or an API user,
  you need to reach out to us.
- Permissions are crucial for controlling access to various features and actions within
  our platform.
- Access token is valid for 5 minutes and must be in the header for remaining calls.
- This endpoint has been replaced with the Get bookings of an Account v3.
- The endpoint processes individual payments one at a time.
- Parameters include mandatory fields for payment processing such as requestedExecutionDate,
  debtorAccount, and creditorAccount.
- All single payments submitted undergo a duplicate check.
- For the bulk payments only CSV files are accepted as body content.
- Each payment should be on its own line.
- The endpoint is used to initiate multiple payments in a single request using a CSV
  file.
- This endpoint has been deprecated
- 'This endpoint has been replaced by the following endpoints: Reject a Direct Debit
  payment, Cancel a payment and Cancel a bulk payment'
- Limit of 1,000 Virtual Accounts per request for orders and updates, including customer
  details.
- Orders WITHOUT customer details are limited to 2,500 Virtual Accounts per request.
- This endpoint is only available for Virtual Accounts of types POBO and COBO.
- The endpoint retrieves unallocated Virtual Accounts in ascending order by Virtual
  Account number.
- Initiation of return payments are subject to the same limitations as initiating
  a normal payment.
- A return payment will follow the same pricing as outgoing transactions.
- Return payments requiring a purpose code for mainland China are not supported.
- Agency Banking & Corresponding Banking payments are not supported.
- Charge Bearer will be set to 'SHA' (shared charges).
- 'An update can have the following states: Pending, Processed, Failed'
- 'The closure process has three possible statuses: Pending, Processed, Failed.'
- There is a limit of 1,000 Virtual Accounts per request for orders and updates, including
  customer details.
- A closure request must include a closure reason. Please provide one of the available
  closure reason codes for each Virtual Account.
- 'The closure process has three possible statuses: Pending, Processed, Failed'
- The endpoint only accepts CSV files as body content.
- There is a limitation of 50,000 payments per report for this endpoint.
- Only data from current and previous year is available online.
- Only data from current and previous year is available online. Contact Client Services
  to access older data.
- A closure request must include a closure reason.
- The v3 is compiled using the transaction date instead of the value date.
- This endpoint has been replaced with v2 to retrieve Fee transactions and v1 for
  Interest transactions.
- You need to create a new subscription before you can add any events
- A subscription cannot be set up with a combination of companies and bank accounts
- You cannot subscribe to the same event under the same subscription.
- Note, your endpoint should return a 2xx HTTP status code to acknowledge the receipt
  of a webhook.
- Before you can delete an event, you must first obtain the subscription event id
  and concurrency token.
- You cannot subscribe to the same event under the same subscription
- Before you can activate the subscription, you must first obtain the subscription
  id and concurrency token (also known as the RowVersion property) for the specific
  subscription.
- The newly created resource can be referenced by the URI given by a Location header
  field in the response.
- Returns a cursor paged list of bank account country block rules.
errors:
- Currency pair not supported
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '429 - Too Many Requests: Rate limit exceeded'
- '429 - Too Many Requests: Rate limit exceeded.'
- '409 - Unauthorized: The operation doesn''t proceed and indicates the resource has
  been modified.'
- '409 - Unauthorized: The operation doesn''t proceed and returns HTTP 409, indicating
  the resource has been modified.'
- 413 - Payload Too Large
- '413 - Payload Too Large: Exceeding the maximum request size.'
- '400: Bad Request: Invalid request format in headers, query parameters, or body'
- '401: Unauthorized: Authentication required or failed'
- '403: Forbidden: Authentication successful but access denied'
- '404: Not Found: Requested resource doesn''t exist (e.g. requesting data on an account
  that does not exist)'
- '412: Precondition Failed: Concurrency token in If-Match header is invalid'
- '413: Payload Too Large: Request or response size exceeds limits'
- '415: Unsupported Media Type: Invalid content type in Accept header'
- '500: Internal Server Error: Unexpected server-side error'
- '400: Bad Request - Invalid request format in headers, query parameters, or body'
- '401: Unauthorized - Authentication required or failed'
- '403: Forbidden - Authentication successful but access denied'
- '404: Not Found - Requested resource doesn''t exist (e.g. requesting data on an
  account that does not exist)'
- '412: Precondition Failed - Concurrency token in `If-Match` header is invalid'
- '413: Payload Too Large - Request or response size exceeds limits'
- '415: Unsupported Media Type - Invalid content type in `Accept` header'
- '500: Internal Server Error - Unexpected server-side error'
- '400 Bad Request: The provided key is too long'
- '409 Conflict: The key was used within the last 10 days'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'DuplicateFileUpload: Identical files are rejected.'
- 'RequestedExecutionDateDaysInPastThresholdViolation: Requested Execution Date exceeds
  allowed number of days in the past.'
- 'Error: 400 Bad request'
- 'Error: 401 Unauthorised'
- 'Error: 403 Forbidden'
- 'Error: 404 Not Found'
- 'Error: 405 Method not allowed'
- 'Error: 406 Not acceptable'
- 'Error: 429 Too Many Requests'
- 'Error: 500 Internal server error'
- 'Error: 503 Service Unavailable'
- '400 Bad request: Request has malformed, missing or non-compliant JSON body or URL
  parameters'
- '401 Unauthorized: Authorization header missing or invalid token'
- '403 Forbidden: Token has incorrect scope, or a security policy was violated'
- '404 Not Found: CoP API is not supported by the Payee ASPSP'
- '405 Method not allowed: The CoP Requester tried to access the resource with a method
  that is not supported'
- '406 Not acceptable: The request contained an accept header that requested a content-type
  other than application/JSON and a character set other than UTF-8'
- '429 Too Many Requests: The CoP Responder should include a Retry-After header in
  the response indicating how long the CoP Requester must wait before retrying the
  operation'
- '500 Internal server error: Something went wrong on the API gateway or micro-service'
- '503 Service Unavailable: The CoP Responder’s service is down for maintenance'
- 'Invalid payment request: Check payment details.'
- 'Payment not found: Verify the payment ID.'
- 'Unauthorized action: Ensure you have the right permissions.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Authentication required for this endpoint.'
- '404 Not Found: The specified resource was not found.'
- 'REQUEST_LIMIT_EXCEEDED: Maximum payments exceeded'
- 'INVALID_DATE_FORMAT: Ensure dates are in YYYY-MM-DD format'
- 'InvalidReportVersion: Invalid report version'
- 'LIMIT_EXCEEDED: Maximum 50,000 payments per report'
- '200 OK: The request was received and validated, but all payments were rejected
  and not sent for execution.'
- '201 Accepted: The request was received, validated, and the payments were accepted
  for processing.'
- '201 Partially Accepted: The request was received, validated, and the payments were
  partially accepted for processing.'
- '400 Invalid File: The request is not correctly formulated. A pacs.002 is not generated.'
- '400 Duplicate File: A file with the same content has already been submitted. The
  system rejects exact duplicates to prevent reprocessing. No pacs.002 is generated.'
- '400 Unsupported Accept Response Version: The Accept-Response header specifies a
  response format version that is not supported by the API. No pacs.002 is generated.'
- '403 Forbidden: The server understood the request, but the access is not allowed
  (e.g., insufficient permissions). No pacs.002 is generated.'
- '404 Not Found: The requested resource (e.g. account) does not exist or the user
  does not have permission to access it. A pacs.002 is not generated.'
- '409 Duplicate Idempotency key: The Idempotency-Key has already been used for a
  previous request. Duplicate processing is prevented. No pacs.002 is generated.'
- '413 Payload too large: The submitted file or subsequent response file exceeds the
  server’s size limit. The request is rejected and no pacs.002 is generated.'
- '400 Bad Request: The request is not correctly formulated.'
- '403 Forbidden: The server understood the request, but the access is not allowed.'
- '404 Not Found: The requested resource does not exist.'
- '403 Forbidden: Access is not allowed.'
- Client-side errors may occur if the endpoint is unavailable or misconfigured.
- 4xx responses indicate client-side issues
- 5xx responses indicate server-side issues
- Duplicate webhook events may occur, implement idempotency checks where necessary.
- Any other response code triggers our retry mechanism.
- '404 Not Found When Retrieving Accounts: Verify that your username has been granted
  access to accounts'
- 'Certificate Missing or Invalid: Ensure you''re passing both the certificate AND
  the Base64-encoded username/password'
- '401 Unauthorized: Ensure the access token is valid'
- '400 Bad Request: Check request format and required fields'
- '200: Successful POST call'
- Invalid request may lead to unsuccessful responses.
- '400 Bad Request: Check the structure of the webhook payload.'
- '401 Unauthorized: Ensure valid authentication credentials.'
- '404 Not Found: Verify the webhook endpoint URL.'
- Any rejection will result in an unsuccessful API response.
- 'InvalidDebtorAccount: Access to the selected debtor account is not authorized or
  the account does not exist'
- 'CreatePaymentWithAdhocCreditorPermissionViolation: Authorization to instruct payment
  with ad hoc creditor from selected debtor account is missing'
- 'BulkPaymentCreatePermissionViolation: Authorization to instruct payment from selected
  debtor account is missing'
- 'CreateOwnPaymentPermissionViolation: Authorization to instruct own payment from
  selected debtor account is missing'
- 'CreateOutgoingPaymentPermissionViolation: Authorization to instruct outgoing payment
  from selected debtor account is missing'
- 'MandatoryMissing: Required field is empty'
- 'InvalidAmountLength: Number of characters exceeds maximum allowed length'
- 'InvalidAmountFormat: Amount format is invalid'
- 'InvalidAmountPrecisionForCurrency: Number of decimal places is not supported by
  the currency'
- 'MaxEurThresholdViolation: Amount exceeds maximum allowed value'
- 'MinEurThresholdViolation: Amount is below minimum allowed value'
- 'InvalidAmountZero: Amount must be greater than zero'
- 'UserAmountLimitViolation: Outgoing transfer amount exceeds threshold limit'
- 'InvalidCurrency: Currency code is not supported or invalid'
- 'InvalidDateFormat: Date format is not supported'
- 'RequestedExecutionDateDaysInPastThresholdViolation: Requested execution date exceeds
  allowed number of days in the past'
- 'RequestedExecutionDateDaysInFutureThresholdViolation: Requested execution date
  exceeds allowed number of days in the future'
- 'InvalidIbanChecksum: IBAN checksum is invalid'
- 'InvalidAccountFormat: Account format is not supported'
- 'InvalidDebtorVibanRelation: Virtual IBAN cannot be found'
- 'InvalidBankingCircleAccount: Account is not registered with Banking Circle'
- 'InvalidExternalAccount: Creditor account format is invalid; only IBAN is allowed'
- 'InvalidTransferDebitAndCreditToSameAccount: Debit and credit accounts must be different'
- 'InvalidFinancialInstitution: BIC or clearing code format is invalid'
- 'ForbiddenTransferToCountry: Creditor financial institution is located in an unsupported
  country'
- 'InvalidAccountAndFinancialInstitutionCombination: IBAN and financial institution
  combination is invalid'
- 'InvalidLength: Number of characters exceeds maximum allowed length'
- 'InvalidChargeBearer: Charge bearer code is not supported'
- 'InvalidDebtorViban: Virtual IBAN cannot be found'
- 'InvalidCharacters: CPF field validation failed'
- 'ProcessingError: An error occurred while processing the payment'
- 'DuplicateFileUpload: An identical file has already been uploaded by this user'
- 'C01: Merchant has been off-boarded'
- 'C02: Due to AML/risk appetite/fraud reasons'
- 'C03: Client request (merchant not being offboarded)'
- '400 Bad Request: Idempotency key is more than 100 characters.'
- '409 Conflict: Idempotency key has been used for a previous payment within the past
  10 days.'
- InvalidDebtorAccount
- CreatePaymentWithAdhocCreditorPermissionViolation
- BulkPaymentCreatePermissionViolation
- CreateOwnPaymentPermissionViolation
- CreateOutgoingPaymentPermissionViolation
- MandatoryMissing
- InvalidAmountLength
- InvalidAmountFormat
- InvalidAmountPrecisionForCurrency
- MaxEurThresholdViolation
- MinEurThresholdViolation
- InvalidAmountZero
- UserAmountLimitViolation
- InvalidCurrency
- InvalidDateFormat
- RequestedExecutionDateDaysInPastThresholdViolation
- RequestedExecutionDateDaysInFutureThresholdViolation
- InvalidIbanChecksum
- InvalidAccountFormat
- InvalidDebtorVibanRelation
- InvalidBankingCircleAccount
- InvalidExternalAccount
- InvalidTransferDebitAndCreditToSameAccount
- InvalidFinancialInstitution
- ForbiddenTransferToCountry
- InvalidAccountAndFinancialInstitutionCombination
- InvalidLength
- InvalidChargeBearer
- InvalidDebtorViban
- InvalidCharacters
- ProcessingError
- DuplicateFileUpload
- '409 Conflict: Idempotency key has been used for the initiation of a previous payment
  within the past 10 days.'
- 'BulkPaymentApproveDeclinePermissionViolation: Approval required but no approvers
  exist.'
- 'ConflictingConfiguration: Targeted debtor accounts have conflicting configuration.'
- 'InvalidAccountFormat: Unsupported account format.'
- 'invalidBankDetails: Contact the customer for a valid IBAN or new bank account details.'
- 'validationFailed: Contact the customer to get valid data.'
- Creation failed. IBAN not valid.
- Creation failed. BIC not valid.
- Transaction forbidden on this type of account.
- The specified bank account has been closed.
- The customer is deceased.
- The specified account is blocked.
- Declination due to specific service offered by the Debtor Agent.
- Declination due to issues with the specified bank account.
- The amount of funds available to cover the specified transaction was insufficient.
- The customer requested a chargeback.
- '400 Bad Request: The request could not be understood by the server, usually due
  to malformed syntax.'
- '403 Forbidden: The client did not provide a valid authentication HTTP header or
  the user making the request has been disabled.'
- '404 Not Found: The requested resource was not found.'
- '429 Too Many Requests: A rate limit has been reached.'
- 'pendingApproval: Waiting for an approval by the customer.'
- 'failed: RequestToPay has failed. Refer to the given reason code why.'
- Insufficient funds
- Duplicate
- Invalid BIC format
- Account may still appear as 'Active' while the closure request is in progress.
- 'Failed: The Virtual Account’s Customer Details could not be updated due to an error.'
- 'Missing: The Virtual Account’s Customer Details have not been set.'
- 'Account: {account selected} provided does not have any configured FX settlement
  instructions. Please contact client services for support.'
- Customer ID not mapped. Please contact client services.
- Trade cannot be completed as it would exceed your maximum allowed open positions.
  Contact your Relationship Manager to request an increase.
- 'N/A: The Virtual Account type does not support setting Customer Detail.'
- '400 - Bad Request: If idempotency key is not upheld.'
- '400 Bad Request: If Idempotency-Key exceeds 100 characters.'
- 'Invalid examples (GBP): 1,100 or 1,100.00 or 1100.000'
- 'NotFound: Payment was not found.'
- 'NotProcessed: Only processed payments can be returned.'
- 'InvalidPaymentClassification: Only payments with classification Incoming or Own
  can be returned.'
- 'PaymentExpired: The payment''s value date exceeds the allowed threshold.'
- 'ReturnPaymentPending: A return has already been initiated for this payment.'
- 'AlreadyReturned: A return has already been attempted. Please contact Client Services.'
- 'InvalidReturnReason: Invalid return reason.'
- 'UnknownPurposeCode: Valid purpose code required.'
- 'UnsupportedPaymentFlow: This payment is not eligible for a return via this channel.
  Please contact Client Services.'
- 'UnspecifiedError: An error occurred returning the payment. Please contact Client
  Services.'
- 'ExceedsAllowedAmountException: The maximum allowed number of customer details per
  request is 1000'
- 'NoPermissionException: No permission to do POBO request/No permission to do COBO
  request'
- 'CustomerDetailsNumberException: The number of customer details entries must be
  equal to the number of ordered virtual accounts.'
- 'DefaultPhysicalAccountMustBeIncludedException: Default physical account must be
  included in PhysicalAccountsList'
- 'NoMasterAccountProvidedException: PhysicalAccountsList includes accounts that are
  not master accounts'
- 'NoExistingVirtualAccountsException: No physical accounts available.'
- 'MandatoryUboInformationNotProvidedException: Customer details are mandatory for
  creating orderType Pobo/Cobo.'
- 'SpecifyDefaultPhysicalAccountIdException: Specify a default account Id.'
- 'IncorrectDefaultPhysicalAccountException: Provided default account is incorrect.'
- 'MultipleSameCurrencyAccountsException: Cannot process order because multiple same
  currency accounts were found.'
- Error message if there are no available unallocated Virtual Accounts.
- 'NoPermissionException: No permission to do POBO request'
- 'NoPermissionException: No permission to do COBO request'
- 'ExceedsAllowedAmountException: The maximum allowed number of virtual accounts per
  request is 1000'
- 'CompanyNumber: The company number has to be exactly 9 digits'
- 'CustomerDetailsListly.VirtualAccountNumber: Virtual account number has to be only
  digits'
- 'UpdateCustomerDetailsErrors: Characters not allowed'
- 'CustomerDetailsListly.CustomerDetails.Y: Exceeding field length of 35 characters'
- 'DuplicateVirtualAccountException: There is a duplicate virtual account number.'
- 'ExistingCustomerDetailsException: Customer details already exist for this virtual
  account:'
- 'NoCustomerDetailsForReconciliationOrderException: Customer details cannot be saved
  for reconciliation virtual account type'
- 'CustomerDetailsListly.CustomerDetails: The CustomerDetails field is required.'
- 'CustomerDetailsListly.CustomerDetails.Y: Empty mandatory field'
- 'File *The file field is required.*: The upload file is missing.'
- CsvFileException  *File with customer details to update is empty.*
- 'UpdateCustomerDetailsErrors  *File with customer details to update is empty.*:
  The upload file contains only headers.'
- CsvFileException  *Csv file does not contain headers or they are incorrect*.
- UpdateCustomerDetailsErrors  *The maximum allowed number of virtual accounts per
  request is 1000*.
- UpdateCustomerDetailsErrors  *Empty mandatory field*.
- UpdateCustomerDetailsErrors  *The company number has to be exactly 9 digits*.
- UpdateCustomerDetailsErrors  *Virtual account number has to be only digits*.
- UpdateCustomerDetailsErrors  *Characters not allowed*.
- UpdateCustomerDetailsErrors  *Exceeding field length of 35 characters*.
- DuplicateVirtualAccountException  *There is a duplicate virtual account number.*
- ExistingCustomerDetailsException  *Customer details already exist for this virtual
  account:*
- NoCustomerDetailsForReconciliationOrderException  *Customer details cannot be saved
  for reconciliation virtual account type*.
- ExceedsAllowedAmountException *The maximum allowed number of virtual accounts per
  request is 1000*
- CompanyNumber  *The company number has to be exactly 9 digits*
- CustomerDetailsListly .VirtualAccountNumber  *Virtual account number has to be only
  digits*
- UpdateCustomerDetailsErrors  *Characters not allowed*
- CustomerDetailsListly .CustomerDetails.Y  *Exceeding field length of 35 characters*
- NoCustomerDetailsForReconciliationOrderException  *Customer details cannot be saved
  for reconciliation virtual account type*
- CustomerDetailsListly .CustomerDetails  *The CustomerDetails field is required.*
- CustomerDetailsListly .CustomerDetails.Y  *Empty mandatory field*
- File *The file field is required.*
- UpdateCustomerDetailsErrors  *File with customer details to update is empty.*
- CsvFileException  *Csv file does not contain headers or they are incorrect*
- UpdateCustomerDetailsErrors  *The maximum allowed number of virtual accounts per
  request is 1000*
- UpdateCustomerDetailsErrors  *Empty mandatory field*
- UpdateCustomerDetailsErrors  *The company number has to be exactly 9 digits*
- UpdateCustomerDetailsErrors  *Virtual account number has to be only digits*
- UpdateCustomerDetailsErrors  *Exceeding field length of 35 characters*
- If we don’t receive a 2xx from you, we’ll consider it as a failed delivery, and
  we will retry sending the notification.
auth_info:
  mentioned_objects:
  - Bearer
client:
  base_url: https://www.bankingcircleconnect.com/api/v1/authorizations/authorize
  auth:
    type: oauth2
    location: header
    header_name: Authorization
  headers:
    Content-Type: application/json
    Accept: application/json
source_metadata: null
