resources:
- name: traveltimes
  endpoint:
    path: /api/1/traveltimes
    method: GET
    data_selector: null
    params:
      start: string
      end: string
      traveltime_types: Array of strings
- name: e-scooter_route
  endpoint:
    path: /api/v1/e-scooter/directions
    method: GET
    data_selector: route
    params:
      start: required
      end: required
      brand_id: required
- name: bike_directions
  endpoint:
    path: /bike/directions
    method: GET
    data_selector: route
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
- name: bike_directions
  endpoint:
    path: /api/bike_directions
    method: GET
    data_selector: route
    params:
      start: required
      end: required
      brand_id: required
- name: motor_scooter_directions
  endpoint:
    path: /api/motor_scooter_directions
    method: GET
    data_selector: route
    params:
      start: required
      end: required
- name: motor_scooter_directions
  endpoint:
    path: /motor_scooter_directions
    method: GET
    params:
      start: required
      end: required
      brand_id: required
      ride_state: ''
      current_location: ''
      ride_start_location: ''
      ride_end_location: ''
      language: ''
      reroute_signature: ''
      start_bearing: ''
- name: taxi_directions
  endpoint:
    path: /taxi_directions
    method: GET
    params:
      start: required
      end: required
      fetch_on_demand_services: ''
      brand_ids: ''
      language: ''
- name: walking_directions
  endpoint:
    path: /walking/directions
    method: GET
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
      language: string
      profiles: string
- name: car_directions
  endpoint:
    path: /car/directions
    method: GET
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
      language: string
- name: transit_directions
  endpoint:
    path: /directions
    method: GET
    params:
      start: required
      end: required
      time: optional
      time_type: optional
      language: optional
      limit: optional
- name: scenario_based_directions
  endpoint:
    path: /directions/scenario
    method: GET
    params:
      scenario_id: required
      start: required
      end: required
      time: optional
      time_type: optional
      language: optional
- name: live_departure_info
  endpoint:
    path: /live_updates
    method: POST
    params:
      signatures: required
      fetch_on_demand_services: optional
- name: travel_times
  endpoint:
    path: /api/1/traveltimes
    method: GET
    data_selector: response
    params:
      start: required
      end: required
      traveltime_types: optional
- name: brand
  endpoint:
    path: /brands
    method: GET
    data_selector: brands
- name: nearby_tiles
  endpoint:
    path: /nearby_tiles
    method: GET
    data_selector: tiles
- name: e-scooter_directions_ride_only
  endpoint:
    path: /scooter/directions
    method: GET
    data_selector: route
    params:
      start: required
      end: required
- name: e-scooter_directions_hire_vehicles
  endpoint:
    path: /scooter/directions/hire
    method: GET
    data_selector: route
    params:
      start: required
      end: required
      brand_id: required
- name: Brand
  endpoint:
    path: /Brand
    method: GET
    data_selector: images
    params: {}
- name: bike_directions
  endpoint:
    path: /bike/directions
    method: GET
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
- name: brand
  endpoint:
    path: /brand
    method: GET
    data_selector: images
    params:
      id: string
      name: string
- name: departure
  endpoint:
    path: /departures
    method: GET
    data_selector: departures
    params: {}
- name: bike_route
  endpoint:
    path: /api/bike-route
    method: GET
    data_selector: route
    params:
      start: required
      end: required
      brand_id: required
- name: motor_scooter_route
  endpoint:
    path: /api/motor-scooter-route
    method: GET
    data_selector: route
    params:
      start: required
      end: required
- name: TransitLegUpdatableDetail
  endpoint:
    path: /api/1/transit_leg_updatable_detail
    method: GET
    data_selector: leg_details
    params: {}
- name: OnDemandServiceEstimate
  endpoint:
    path: /api/1/on_demand_service_estimate
    method: GET
    data_selector: service_estimate
    params: {}
- name: motor_scooter_route
  endpoint:
    path: /motor_scooter_route
    method: GET
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
      brand_id: string
      ride_state: string
      current_location: string
      ride_start_location: string
      ride_end_location: string
      language: string
      reroute_signature: string
      start_bearing: integer
- name: taxi_route
  endpoint:
    path: /taxi_route
    method: GET
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
      fetch_on_demand_services: string
      brand_ids: Array of strings
      language: string
- name: route
  endpoint:
    path: /api/1/live/routeupdates
    method: GET
    data_selector: route
    params: {}
- name: walking_directions
  endpoint:
    path: /walking/directions
    method: GET
    data_selector: route
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
- name: car_directions
  endpoint:
    path: /car/directions
    method: GET
    data_selector: route
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: status
    params: {}
- name: stop
  endpoint:
    path: /stops
    method: GET
    data_selector: stops
    params: {}
- name: third_party_app
  endpoint:
    path: /third-party-apps
    method: GET
    data_selector: apps
    params: {}
- name: Transit Route
  endpoint:
    path: /directions
    method: GET
    params:
      start: required
      end: required
      time: optional
      time_type: optional
      language: optional
      limit: optional
- name: Scenario Route
  endpoint:
    path: /scenario/directions
    method: GET
    params:
      scenario_id: required
      start: required
      end: required
      time: optional
      time_type: optional
      language: optional
- name: Live Update
  endpoint:
    path: /live/update
    method: POST
    params:
      signatures: required
      fetch_on_demand_services: optional
- name: travel_times
  endpoint:
    path: /api/1/traveltimes
    method: GET
    data_selector: results
    params:
      start: required
      end: required
      traveltime_types: ''
- name: e-scooter directions
  endpoint:
    path: /directions/e-scooter
    method: GET
    data_selector: route
    params:
      start: required
      end: required
      brand_id: required
- name: Brand
  endpoint:
    path: /brand
    method: GET
    data_selector: properties
    params: {}
- name: Nearby Tiles
  endpoint:
    path: /nearby/tiles
    method: GET
    data_selector: features
    params:
      tileset: transit:stops
      zoom: 12
      x: 2048
      y: 1361
- name: bike_directions
  endpoint:
    path: /bike/directions
    method: GET
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
- name: Brand
  endpoint:
    path: /brands
    method: GET
    data_selector: brands
    params: {}
- name: BrandImage
  endpoint:
    path: /brandImages
    method: GET
    data_selector: images
    params: {}
- name: bike_directions
  endpoint:
    path: /bike/directions
    method: GET
    data_selector: route
    params:
      start: required
      end: required
      brand_id: required
      ride_state: optional
      current_location: optional
      ride_start_location: optional
      ride_end_location: optional
      profiles: optional
      language: optional
      reroute_signature: optional
      start_bearing: optional
- name: motor_scooter_directions
  endpoint:
    path: /motor_scooter/directions
    method: GET
    data_selector: route
    params:
      start: required
      end: required
      language: optional
      reroute_signature: optional
      start_bearing: optional
- name: departure
  endpoint:
    path: /api/departures
    method: GET
    data_selector: departures
- name: motor_scooter_directions
  endpoint:
    path: /motor_scooter_directions
    method: GET
    data_selector: route
    params:
      start: 51.524247,-0.10641
      end: 51.507752,-0.110081
      brand_id: ScooterBrand
- name: taxi_directions
  endpoint:
    path: /taxi_directions
    method: GET
    data_selector: route
    params:
      start: 51.524247,-0.10641
      end: 51.507752,-0.110081
- name: walking_directions
  endpoint:
    path: /walking/directions
    method: GET
    data_selector: route
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
- name: car_directions
  endpoint:
    path: /car/directions
    method: GET
    data_selector: route
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
- name: TransitLegUpdatableDetail
  endpoint:
    path: /api/1/transit_leg_updatable_detail
    method: GET
    data_selector: records
    params: {}
- name: OnDemandServiceEstimate
  endpoint:
    path: /api/1/on_demand_service_estimate
    method: GET
    data_selector: records
    params: {}
- name: transit_directions
  endpoint:
    path: /directions
    method: GET
    params:
      start: required
      end: required
      time: optional
      time_type: optional
      language: optional
      limit: optional
- name: scenario_based_directions
  endpoint:
    path: /scenario_directions
    method: GET
    params:
      scenario_id: required
      start: required
      end: required
      time: optional
      time_type: optional
      language: optional
- name: live_departure_info
  endpoint:
    path: /live_updates
    method: POST
    params:
      signatures: required
      fetch_on_demand_services: optional
- name: Route
  endpoint:
    path: /api/1/live/route
    method: GET
    data_selector: route
- name: Route Metadata
  endpoint:
    path: /api/1/live/route/metadata
    method: GET
    data_selector: metadata
- name: Service
  endpoint:
    path: /api/1/live/service
    method: GET
    data_selector: service
- name: Station Exit
  endpoint:
    path: /api/1/live/station_exit
    method: GET
    data_selector: station_exit
- name: Station Walk Details
  endpoint:
    path: /api/1/live/station_walk_details
    method: GET
    data_selector: walk_details
- name: Brand
  endpoint:
    path: /brand
    method: GET
    data_selector: images
    params: {}
- name: BrandImage
  endpoint:
    path: /brand/image
    method: GET
    data_selector: images
    params: {}
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: status
    params: {}
- name: stop
  endpoint:
    path: /stops
    method: GET
    data_selector: stops
    params: {}
- name: third_party_app
  endpoint:
    path: /third-party-apps
    method: GET
    data_selector: apps
    params: {}
- name: vehicle_type
  endpoint:
    path: /vehicle-types
    method: GET
    data_selector: vehicle_types
    params: {}
- name: waypoint
  endpoint:
    path: /waypoints
    method: GET
    data_selector: waypoints
    params: {}
- name: brand
  endpoint:
    path: /brands
    method: GET
    data_selector: images
    params: {}
- name: departure
  endpoint:
    path: /departures
    method: GET
    data_selector: departures
    params: {}
- name: travel_times
  endpoint:
    path: /api/1/traveltimes
    method: GET
    data_selector: response
    params:
      start: required
      end: required
      traveltime_types: optional
- name: e-scooter_directions
  endpoint:
    path: /directions
    method: GET
    data_selector: route
    params:
      start: required
      end: required
      brand_id: required
- name: bike_directions
  endpoint:
    path: /bike_directions
    method: GET
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
- name: brand
  endpoint:
    path: /brands
    method: GET
    data_selector: brands
- name: TransitLegUpdatableDetail
  endpoint:
    path: /api/1/transit/leg/updatable/detail
    method: GET
    data_selector: records
- name: OnDemandServiceEstimate
  endpoint:
    path: /api/1/on-demand/service/estimate
    method: GET
    data_selector: records
- name: route
  endpoint:
    path: /api/1/routes
    method: GET
    data_selector: routes
- name: bike_route
  endpoint:
    path: /bike/directions
    method: GET
    data_selector: route
    params:
      start: required
      end: required
      brand_id: required
      ride_state: optional
      current_location: optional
- name: scooter_route
  endpoint:
    path: /scooter/directions
    method: GET
    data_selector: route
    params:
      start: required
      end: required
      language: optional
      reroute_signature: optional
      start_bearing: optional
- name: Status
  endpoint:
    path: /status
    method: GET
    data_selector: status
    params: {}
- name: Stop
  endpoint:
    path: /stops
    method: GET
    data_selector: stops
    params: {}
- name: Third-Party App
  endpoint:
    path: /third-party-apps
    method: GET
    data_selector: third_party_apps
    params: {}
- name: Vehicle Type
  endpoint:
    path: /vehicle-types
    method: GET
    data_selector: vehicle_types
    params: {}
- name: Waypoint
  endpoint:
    path: /waypoints
    method: GET
    data_selector: waypoints
    params: {}
- name: motor_scooter_directions
  endpoint:
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
      brand_id: string
      ride_state: string
      current_location: string
      ride_start_location: string
      ride_end_location: string
      language: string
      reroute_signature: string
      start_bearing: integer
- name: taxi_directions
  endpoint:
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
      fetch_on_demand_services: string
      brand_ids: Array of strings
      language: string
- name: CitymapperSdkConfiguration
  endpoint:
    path: /api
    method: GET
    data_selector: configuration
    params: {}
- name: walking_directions
  endpoint:
    path: /walking
    method: GET
    data_selector: route
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
- name: car_directions
  endpoint:
    path: /car
    method: GET
    data_selector: route
    params:
      start: Array of numbers <double>
      end: Array of numbers <double>
- name: transit_routes
  endpoint:
    path: /planTransitRoutes
    method: GET
    data_selector: routes
- name: bike_routes
  endpoint:
    path: /planBikeRoutes
    method: GET
    data_selector: routes
- name: scooter_routes
  endpoint:
    path: /planScooterRoute
    method: GET
    data_selector: routes
- name: walk_routes
  endpoint:
    path: /planWalkRoutes
    method: GET
    data_selector: routes
- name: transit_directions
  endpoint:
    path: /transit/directions
    method: GET
    data_selector: routes
    params:
      start: required
      end: required
      time: optional
      time_type: optional
      language: optional
      limit: optional
- name: scenario_based_directions
  endpoint:
    path: /scenario/directions
    method: GET
    data_selector: routes
    params:
      scenario_id: required
      start: required
      end: required
      time: optional
      time_type: optional
      language: optional
- name: live_departure_info
  endpoint:
    path: /live/departure
    method: POST
    data_selector: live_updates
    params:
      signatures: required
      fetch_on_demand_services: optional
- name: route_list
  endpoint:
    path: /api/v1/routes
    method: GET
    data_selector: routes
    params: {}
- name: RouteDetails
  endpoint:
    path: /transit/route-details
    method: GET
    data_selector: routeDetails
    params: {}
- name: Brand
  endpoint:
    path: /brands
    method: GET
    data_selector: brands
    params: {}
- name: brand
  endpoint:
    path: /brands
    method: GET
    data_selector: brands
- name: service
  endpoint:
    path: /services/{id}
    method: GET
    data_selector: service
    params:
      id: string
- name: custom_notification
  endpoint:
    path: /customize/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: departure
  endpoint:
    path: /departures
    method: GET
    data_selector: departures
    params: {}
- name: walk_routes
  endpoint:
    path: /planWalkRoutes
    method: GET
    data_selector: routes
- name: navigation
  endpoint:
    path: /navigation
    method: GET
    data_selector: results
- name: TransitLegUpdatableDetail
  endpoint:
    path: /api/1/transit/leg/updatable/detail
    method: GET
    data_selector: records
    params: {}
- name: OnDemandServiceEstimate
  endpoint:
    path: /api/1/on-demand/service/estimate
    method: GET
    data_selector: records
    params: {}
- name: bike_route
  endpoint:
    path: /planBikeRoutes
    method: POST
    data_selector: routes
- name: scooter_route
  endpoint:
    path: /api/scooter/routes
    method: GET
    data_selector: routes
- name: scooter_turn_by_turn_navigation
  endpoint:
    path: /turn-by-turn-navigation/scooter
    method: GET
    data_selector: navigation
- name: route
  endpoint:
    path: /api/1/routes
    method: GET
    data_selector: routes
    params: {}
- name: route_updates
  endpoint:
    path: /api/1/live/routeupdates
    method: GET
    data_selector: updates
    params: {}
- name: transit_routes
  endpoint:
    path: /transit/routes
    method: GET
- name: Status
  endpoint:
    path: /status
    method: GET
    data_selector: records
- name: Stop
  endpoint:
    path: /stops
    method: GET
    data_selector: records
- name: Third-Party App
  endpoint:
    path: /third-party-apps
    method: GET
    data_selector: records
- name: Vehicle Type
  endpoint:
    path: /vehicle-types
    method: GET
    data_selector: records
- name: Waypoint
  endpoint:
    path: /waypoints
    method: GET
    data_selector: records
- name: transit_routes
  endpoint:
    path: /transit/routes
    method: GET
    data_selector: routes
- name: Citymapper SDK Configuration
  endpoint:
    path: /api
    method: GET
    data_selector: configuration
- name: transit_routes
  endpoint:
    path: /planTransitRoutes
    method: POST
    data_selector: routes
- name: bike_routes
  endpoint:
    path: /planBikeRoutes
    method: POST
    data_selector: routes
- name: scooter_routes
  endpoint:
    path: /planScooterRoute
    method: POST
    data_selector: routes
- name: walk_routes
  endpoint:
    path: /planWalkRoutes
    method: POST
    data_selector: routes
- name: route_details
  endpoint:
    path: /transit/route/details
    method: GET
    data_selector: routeDetails
- name: turn_by_turn_navigation
  endpoint:
    path: /api/display_turn_by_turn_navigation
    method: GET
- name: RouteProgress
  endpoint:
    path: /routeProgress
    method: GET
    data_selector: routeProgress
- name: GuidanceEvent
  endpoint:
    path: /guidanceEvent
    method: GET
    data_selector: guidanceEvent
- name: basic_notification
  endpoint:
    path: /customize/android/notifications/basic
    method: GET
    data_selector: meta-data
    params: {}
- name: custom_notification
  endpoint:
    path: /customize/android/notifications/custom
    method: GET
    data_selector: meta-data
    params: {}
- name: walk_route
  endpoint:
    path: /planWalkRoutes
    method: GET
    data_selector: routes
- name: turn_by_turn_navigation
  endpoint:
    path: /turn-by-turn-navigation
    method: GET
- name: bike_routes
  endpoint:
    path: /bike/routes
    method: GET
    data_selector: routes
- name: scooter_route
  endpoint:
    path: /scooter/route
    method: GET
- name: turn_by_turn_navigation
  endpoint:
    path: /turn-by-turn-navigation
    method: GET
- name: transit_routes
  endpoint:
    path: /planTransitRoutes
    method: GET
    data_selector: routes
    params: {}
- name: transit_routes
  endpoint:
    path: /transit/routes
    method: GET
    data_selector: routes
notes:
- Requests outside of the API coverage areas will return a 400 response.
- This API is not available through open access, please contact sales.
- Requires OAuth2 authentication setup with Citymapper.
- Use of this API may involve sending end-user location data to Third-Parties for
  the purposes of providing live on-demand service estimates.
- Citymapper's assessment of the accuracy level of duration_seconds should be displayed
  to the user.
- Updated values for route_departure_time and route_arrival_time are returned by /api/1/live/routeupdates.
- Maximum distance for walking directions is 100km.
- Maximum distance for car directions is 1000km.
- The maximum great-circle distance between the start and end is limited to 100km
  for walking directions and 1000km for car directions.
- Successful responses (HTTP code 200) will consume one credit for each response.
- Uses OAuth2 with refresh token.
- Some objects may return nulls in deeply nested fields.
- Monthly requests are aggregated across all Powered by Citymapper products.
- Further requests will no longer return results for the remainder of that month if
  exceeding the free usage allowance.
- Live departure information may not be available for all transit services.
- The distance is measured in meters.
- Duration is provided in seconds.
- Prices are generally available only on transit Routes.
- Implement the CitymapperSdkConfiguration.Provider interface to supply API Key and
  API URL.
- Maximum distance for walking routes is 100km.
- Maximum distance for car routes is 1000km.
- The Citymapper SDK currently supports getting up to 3 different bicycle Routes.
- If the profiles parameter is omitted, the regular profile is used for bike routes.
- If the profiles parameter is omitted, the fast profile is used for walk routes.
- Rerouting is handled automatically in this SDK.
- Android needs a persistent notification to keep the app alive during the navigation
  tracking.
- From android oreo (API 26), notifications need a channel.
- Requires Citymapper API key and OAuth2 setup.
- If the 'profiles' parameter is omitted, the 'fast' profile is used.
- The Citymapper SDK currently supports getting up to 2 different walk Routes.
- Includes UI for displaying turn-by-turn navigation
- Route data must be passed between screens
- Uses OAuth2 with refresh token — requires setup of connected app in Citymapper
- Some estimates may have variability based on live data
- Some route details may return nulls in nested fields
- Displays a list of possible Routes for your user to choose from.
- Receive up to 5 transit routes if both endpoints are in the same Citymapper coverage
  area.
- The SDK requires a valid API key from Citymapper.
- For navigation functionality, enable fine location permission.
- Monthly requests are aggregated across all Powered by Citymapper products. If you're
  not on a paid plan, you'll be notified via email once you exceed the free usage
  allowance in a given month.
- Route List displays a list of possible Routes for your user to choose from.
- Requires Android 3.0.0-beta01, or iOS 3.3.0-beta.2 or higher
- The `CitymapperNavigationTracking` class allows listening to the RouteProgress of
  the currently active navigation session.
- The Citymapper SDK offers theming capabilities to help it fit in with your app.
- Uses Auth0 for authentication
errors:
- '400: Bad Request'
- '401: Unauthorized'
- '429: Rate Limited'
- '400 Bad Request: Citymapper can''t compute walking directions'
- '200 OK: Successful response'
- 400 Bad Request
- 401 Unauthorized
- 429 Rate Limited
- '400 Bad Request: Check the parameters you are sending.'
- '401 Unauthorized: Ensure that your API key is valid.'
- '429 Too Many Requests: Rate limit exceeded.'
- '429: Too Many Requests'
- 'no-results: The request was in Citymapper''s coverage regions, but no results were
  found.'
- 'coverage-region: The request is outside of Citymapper''s coverage regions, or spans
  disconnected regions.'
- 'coverage-start: The request''s start location falls outside of Citymapper''s coverage
  regions.'
- 'coverage-end: The request''s end location falls outside of Citymapper''s coverage
  regions.'
- 'coverage-distance: The request''s start and end locations are further apart than
  the maximum allowed for this API.'
- 'signature: A signature included in the request is invalid for use with this API.'
- 'unknown-brand: The request references an unknown Brand ID.'
- 'unknown-scenario: The request references an unknown Scenario ID.'
- 'request-format: The request was semantically malformed.'
- 'configuration-required: The request can''t be completed because of missing configuration.'
- 'deprecated: The request was made to a deprecated API.'
- '401 Unauthorized: Check your OAuth credentials.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '400: Bad Request - Cannot compute directions for given points.'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Recheck API key'
- '429 Too Many Requests: Rate limit exceeded'
- '400: Unable to compute directions for the specified points.'
- '200: Successful response.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '401 Unauthorized: Recheck API Key or permissions'
- '429 Too Many Requests: Limit your request rate'
- '400 Bad Request: Check your query parameters'
- '401 Unauthorized: Ensure API key is valid'
- no-results
- coverage-region
- coverage-start
- coverage-end
- coverage-distance
- signature
- unknown-brand
- unknown-scenario
- request-format
- configuration-required
- deprecated
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Check the request parameters.'
- '404 Not Found: Verify the endpoint path.'
- '500 Internal Server Error: Try again later.'
- '400: Request could not be completed due to coverage reasons.'
- ApiResult Network failure
- ApiResult Unknown failure
- HttpFailure
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify your API Key.'
- '429 Too Many Requests: Reduce the rate of your requests.'
- 429 Too Many Requests
- 'coverage-region: The request is outside of Citymapper''s coverage regions.'
- 'QUERY_TIMEOUT: Adjust query parameters for better performance'
- '401 Unauthorized: Verify OAuth credentials and token validity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '404 Not Found: Check the endpoint path or parameters'
- 'NetworkFailure: Check network connection'
- 'UnknownFailure: Check API documentation for details'
- 'HttpFailure: Check HTTP status code for troubleshooting'
- 'ApiResult failure: Check API request parameters.'
- '401 Unauthorized: Recheck Auth0 configurations'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - Auth0
client:
  base_url: https://api.citymapper.com
  auth:
    type: apikey
source_metadata: null
