resources:
- name: disputes
  endpoint:
    path: /v1/disputes
    method: GET
    data_selector: data
- name: submit_dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}/submit
    method: POST
    data_selector: fields
- name: retrieve_dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}
    method: GET
    data_selector: ''
- name: dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}
    method: PUT
    data_selector: records
    params: {}
- name: accept_dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}/accept
    method: POST
    data_selector: records
    params: {}
- name: dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}
    method: GET
    data_selector: data
- name: dispute_submit
  endpoint:
    path: /v1/disputes/{{dispute_id}}/submit
    method: POST
    data_selector: data
- name: dispute_list
  endpoint:
    path: /v1/disputes
    method: GET
    data_selector: data
- name: dispute
  endpoint:
    path: /disputes/{dispute_id}
    method: PUT
    data_selector: correspondence
    params: {}
- name: past_payments
  endpoint:
    path: /disputes/{dispute_id}
    method: PUT
    data_selector: past_payments
    params: {}
- name: dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}
    method: PUT
    data_selector: customer
    params: {}
- name: accept_dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}/accept
    method: POST
    data_selector: customer
    params: {}
- name: disputes
  endpoint:
    path: /v1/disputes
    method: GET
    data_selector: disputes
- name: dispute
  endpoint:
    path: /disputes/{dispute_id}
    method: PUT
    data_selector: ''
    params: {}
- name: dispute_submit
  endpoint:
    path: /disputes/{dispute_id}/submit
    method: POST
    data_selector: ''
    params: {}
- name: disputes
  endpoint:
    path: /v1/disputes
    method: GET
    data_selector: data
- name: dispute
  endpoint:
    path: /v1/disputes/{{dispute_from_step_3}}
    method: GET
    data_selector: dispute
    params: {}
- name: submit_dispute
  endpoint:
    path: /v1/disputes/{{dispute_from_step_3}}/submit
    method: POST
    data_selector: dispute
    params: {}
- name: retrieve_personal_data
  endpoint:
    path: /v1/personal-data/retrieve
    method: POST
    data_selector: success
    params:
      email: required
      name: required
      notification_email: optional
- name: remove_personal_data
  endpoint:
    path: /v1/personal-data/remove
    method: POST
    data_selector: success
    params:
      email: required
      name: required
      notification_email: optional
- name: create_dispute
  endpoint:
    path: /v1/disputes
    method: POST
    data_selector: success
    params:
      template: required
      fields[customer_name]: required
      id: required
      charge: required
      customer: required
      processor: required
      reason: required
      charged_at: required
      disputed_at: required
      due_by: required
      currency: required
      amount: required
      reversal_currency: required
      fee: required
      reversal_amount: required
- name: retrieve_dispute_response
  endpoint:
    path: /v1/disputes/{{dispute_id}}/response
    method: GET
    data_selector: success
- name: dispute
  endpoint:
    path: /v1/disputes
    method: POST
    data_selector: dispute
    params: {}
- name: dispute_response
  endpoint:
    path: /v1/disputes/{{dispute_id}}/response
    method: GET
    data_selector: response
    params: {}
- name: retrieve_personal_data
  endpoint:
    path: /v1/personal-data/retrieve
    method: POST
    data_selector: success
    params: {}
- name: remove_personal_data
  endpoint:
    path: /v1/personal-data/remove
    method: POST
    data_selector: success
    params: {}
- name: Getting Buy-In for Fraud Fighting Tools
  endpoint:
    path: /resources?content_type=blog_post
    method: GET
- name: 'Payment Innovator: Paul Paradis, President & Co-founder Sezzle'
  endpoint:
    path: /resources?content_type=video
    method: GET
- name: How to Use Chargeback Data to Improve Customer Experience
  endpoint:
    path: /resources?content_type=blog_post
    method: GET
- name: 'Payment Innovator: Jareau Wad√©, Chief Growth Officer at Finix'
  endpoint:
    path: /resources?content_type=blog_post
    method: GET
- name: Lessons Learned from Standing Up to Friendly Fraud
  endpoint:
    path: /resources?content_type=blog_post
    method: GET
- name: How HotelTonight Found Quality, Scale and Cost Efficiency With Chargehound
  endpoint:
    path: /resources?content_type=case_study
    method: GET
- name: Understanding The Value of Fighting All Chargebacks
  endpoint:
    path: /resources?content_type=blog_post
    method: GET
- name: 'Payment Innovator: Melissa Guzy, Co-founder & Managing Partner, Arbor Ventures'
  endpoint:
    path: /resources?content_type=video
    method: GET
- name: Why PayPal and Chargehound are Better Together
  endpoint:
    path: /resources?content_type=blog_post
    method: GET
- name: 'Payment Innovator: Archie Puri, Chief Product Officer at Galileo Financial
    Technologies'
  endpoint:
    path: /resources?content_type=webinar
    method: GET
- name: Why Friendly Fraud Matters to Subscription Businesses
  endpoint:
    path: /resources?content_type=blog_post
    method: GET
- name: Chargehound's Next Chapter
  endpoint:
    path: /resources?content_type=blog_post
    method: GET
- name: 'Payment Innovator: Bradley Riss, Chief Commercial Officer at Checkout.com'
  endpoint:
    path: /resources?content_type=blog_post
    method: GET
- name: dispute
  endpoint:
    path: /api/v1/disputes
    method: GET
    data_selector: data
    params: {}
- name: data
  endpoint:
    path: /data
    method: POST
    data_selector: records
    params: {}
- name: dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}
    method: GET
    data_selector: data
- name: dispute_submit
  endpoint:
    path: /v1/disputes/{{dispute_id}}/submit
    method: POST
    data_selector: data
- name: disputes_list
  endpoint:
    path: /v1/disputes
    method: GET
    data_selector: data
- name: disputes
  endpoint:
    path: /v1/disputes
    method: POST
    data_selector: fields
- name: disputes
  endpoint:
    path: /v1/disputes/{{dispute_id}}
    method: PUT
    data_selector: customer
    params: {}
- name: accept_dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}/accept
    method: POST
    data_selector: customer
    params: {}
- name: disputes
  endpoint:
    path: /disputes/{dispute_id}
    method: PUT
    data_selector: correspondence
    params: {}
- name: dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}
    method: GET
    data_selector: data
    params: {}
- name: disputes_list
  endpoint:
    path: /v1/disputes
    method: GET
    data_selector: data
    params: {}
- name: submit_dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}/submit
    method: POST
    data_selector: data
    params: {}
- name: dispute
  endpoint:
    path: /v1/disputes
    method: GET
    data_selector: data
- name: dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}
    method: PUT
    data_selector: records
- name: accept_dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}/accept
    method: POST
    data_selector: records
- name: disputes
  endpoint:
    path: /disputes
    method: PUT
    data_selector: correspondence
    params: {}
- name: dispute
  endpoint:
    path: /v1/disputes
    method: POST
    data_selector: dispute
    params: {}
- name: retrieve_personal_data
  endpoint:
    path: /v1/personal-data/retrieve
    method: POST
    data_selector: success
    params: {}
- name: remove_personal_data
  endpoint:
    path: /v1/personal-data/remove
    method: POST
    data_selector: success
    params: {}
- name: dispute
  endpoint:
    path: /v1/disputes
    method: GET
    data_selector: disputes
    params: {}
- name: dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}/submit
    method: POST
    data_selector: dispute
    params: {}
- name: list_disputes
  endpoint:
    path: /v1/disputes
    method: GET
    data_selector: data
    params: {}
- name: retrieve_dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}
    method: GET
    data_selector: dispute
    params: {}
- name: retrieve_personal_data
  endpoint:
    path: /v1/personal-data/retrieve
    method: POST
    data_selector: success
    params:
      email: required
      name: required
      notification_email: optional
- name: remove_personal_data
  endpoint:
    path: /v1/personal-data/remove
    method: POST
    data_selector: success
    params:
      email: required
      name: required
      notification_email: optional
- name: dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}
    method: PUT
    data_selector: fields
    params: {}
- name: accept_dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}/accept
    method: POST
    data_selector: fields
    params: {}
- name: disputes
  endpoint:
    path: /disputes/{id}
    method: PUT
    data_selector: dispute
    params: {}
- name: disputes
  endpoint:
    path: /v1/disputes
    method: GET
    data_selector: data
- name: submit_dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}/submit
    method: POST
    data_selector: response
- name: retrieve_dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}
    method: GET
    data_selector: response
- name: dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}
    method: PUT
    data_selector: fields
    params:
      template: unrecognized
      fields[customer_name]: Susie Chargeback
- name: accept_dispute
  endpoint:
    path: /v1/disputes/{{dispute_id}}/accept
    method: POST
    data_selector: fields
- name: disputes
  endpoint:
    path: /disputes
    method: PUT
    data_selector: null
    params: {}
- name: dispute
  endpoint:
    path: /v1/disputes
    method: POST
    data_selector: dispute
    params: {}
- name: retrieve_personal_data
  endpoint:
    path: /v1/personal-data/retrieve
    method: POST
    data_selector: success
    params: {}
- name: remove_personal_data
  endpoint:
    path: /v1/personal-data/remove
    method: POST
    data_selector: success
    params: {}
- name: disputes
  endpoint:
    path: /v1/disputes
    method: GET
    data_selector: data
- name: retrieve_personal_data
  endpoint:
    path: /v1/personal-data/retrieve
    method: POST
    data_selector: success
    params: {}
- name: remove_personal_data
  endpoint:
    path: /v1/personal-data/remove
    method: POST
    data_selector: success
    params: {}
- name: create_dispute
  endpoint:
    path: /v1/disputes
    method: POST
    data_selector: dispute
    params: {}
- name: retrieve_dispute_response
  endpoint:
    path: /v1/disputes/{{dispute_id}}/response
    method: GET
    data_selector: response
    params: {}
notes:
- Disputes are usually not created via the REST API. Instead, once your payment processor
  is connected we will mirror disputes via webhooks.
- Requires setup of API key for authentication
- Webhook calls will be sent from a fixed range of IP addresses if you opt to use
  a static IP.
- It takes on average 3-5 hours for a dispute to appear in Chargehound.
- Webhook calls will be sent from one of the specified static IP addresses if opted.
- It takes on average 3-5 hours for the dispute to appear in Chargehound.
- Use the API key for authentication.
- The Dispute Automation Service automates responses to certain chargebacks that have
  been filed or requested by your customers using comprehensive response templates,
  shipping information, customer payment histories, and other information.
- You must comply with all applicable laws when using the Site, the Service, and any
  Content.
- We receive data through a RESTful API that is encrypted using HTTPS and requires
  secret key authentication.
- 'Integrations with Stripe and Braintree are facilitated via their official OAuth
  applications: Stripe Connect, and Braintree Auth.'
- Requires setup of account and API key.
- Chargehound helps online merchants fight chargeback fraud by streamlining the chargeback
  response process.
- Uses OAuth2 ‚Äî requires setup of connected app in chargehound
- We may retain server logs which include the IP address of every request to our server.
- We may keep data linked to cookies and other online identifiers up to three years.
- Uses API key for authentication
- Integrations are facilitated via their official OAuth applications and APIs.
- You will need to create a Braintree user with disputes access for Braintree integration.
- Chargehound creates live mode disputes with webhooks from Stripe
- 'Webhook calls will then be sent from one of the following IP addresses if you opt
  to use a static IP: 3.211.115.112, 3.212.160.248, 3.212.186.185, 34.194.118.97,
  34.200.90.111.'
- Chargehound creates live mode disputes with webhooks from Stripe.
- Testing end to end requires creating a dispute in Stripe
- 'Webhook calls will then be sent from one of the following IP addresses if you opt
  to use a static IP: 3.211.115.112, 3.212.160.248, 3.212.186.185, 34.194.118.97,
  34.200.90.111'
- Requires API keys from settings page
- Data requests can be made to retrieve or remove personal data.
- Data retrieval and removal requests require email and name.
- Ensure to handle 400 Bad Request errors for invalid parameters.
errors:
- '404 - Not Found: Resource could note be found.'
- '401 - Unauthorized: Invalid API key provided.'
- '400 - Bad Request: The request data was invalid or incomplete.'
- '403 - Forbidden: Insecure connection.'
- '500 - Server Error: Something went wrong on Chargehound''s end.'
- '400 Bad Request: Missing or invalid parameters.'
- '401 Unauthorized: Recheck API key or access rights'
- Any response codes outside the 2xx range will be treated as a failure.
- Any response codes outside 2xx will be treated as a failure.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '404 Not Found: The requested resource does not exist'
- '401 Unauthorized: Recheck API key'
- '404 - Not Found: Resource could not be found.'
- '401 Unauthorized: Recheck API key or permissions'
- '404: A dispute with id ''puppy'' was not found'
- '401: Invalid API key provided.'
- '403: Insecure connection.'
- Webhook is not successfully received for any reason, Chargehound will continue trying
  to send the webhook once every half hour for up to 3 days.
- '404 Not Found: Resource could note be found.'
- '401 Unauthorized: Invalid API key provided.'
- '400 Bad Request: The request data was invalid or incomplete.'
- 'Webhook not successfully received: Chargehound will continue trying to send the
  webhook once every half hour for up to 3 days.'
- '202: Dispute is in manual review'
auth_info:
  mentioned_objects:
  - API keys
client:
  base_url: https://api.chargehound.com
  auth:
    type: apikey
source_metadata: null
