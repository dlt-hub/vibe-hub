resources:
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: mesh_dataset
  endpoint:
    path: /api/v1/mesh_dataset
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: mesh_dataset
  endpoint:
    path: /datasets/mesh
    method: GET
    data_selector: datasets
    params: {}
- name: streaming_datasets
  endpoint:
    path: /api/v1/streaming_datasets
    method: GET
    data_selector: datasets
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: records
- name: syncs
  endpoint:
    path: /syncs
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: datasets
  endpoint:
    path: /api/v1/datasets
    method: GET
    data_selector: data
    params: {}
- name: syncs
  endpoint:
    path: /api/v1/syncs
    method: GET
    data_selector: data
    params: {}
- name: dataset
  endpoint:
    path: /datasets
    method: GET
    data_selector: records
- name: datasets
  endpoint:
    path: /api/v1/datasets
    method: GET
    data_selector: records
- name: syncs
  endpoint:
    path: /api/v1/syncs
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: relationships
  endpoint:
    path: /api/v1/relationships
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Entity Resolution
  endpoint:
    path: /datasets/entity-resolution
    method: GET
    data_selector: records
- name: dataset
  endpoint:
    path: /api/v1/datasets
    method: GET
    data_selector: datasets
- name: datasets
  endpoint:
    path: /api/v1/datasets
    method: GET
    data_selector: data
    params: {}
- name: enrichment_columns
  endpoint:
    path: /enrichment-columns
    method: GET
    data_selector: data
    params: {}
- name: enrichment_columns
  endpoint:
    path: /api/enrichment_columns
    method: GET
    data_selector: data
    params: {}
- name: enrichment_columns
  endpoint:
    path: /api/enrichment_columns
    method: GET
    data_selector: data
    params: {}
- name: people_match
  endpoint:
    path: /people/match
    method: GET
- name: organizations_enrich
  endpoint:
    path: /organizations/enrich
    method: GET
- name: computed_columns
  endpoint:
    path: /computed_columns
    method: GET
    data_selector: records
- name: computed_columns
  endpoint:
    path: /api/computed_columns
    method: GET
    data_selector: data
    params: {}
- name: computed_columns
  endpoint:
    path: /datasets/computed_columns
    method: GET
    data_selector: columns
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: audience_syncs
  endpoint:
    path: /api/audience_syncs
    method: GET
    data_selector: records
- name: audience_syncs
  endpoint:
    path: /audience_syncs
    method: GET
- name: audience_syncs
  endpoint:
    path: /api/audience_syncs
    method: GET
    data_selector: data
    params: {}
- name: sync_history
  endpoint:
    path: /syncs/sync-history
    method: GET
    data_selector: records
- name: sync_history
  endpoint:
    path: /syncs/sync-history
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: records
- name: syncs
  endpoint:
    path: /syncs
    method: GET
    data_selector: records
- name: audience_hub
  endpoint:
    path: /audience_hub
    method: GET
    data_selector: records
- name: datasets
  endpoint:
    path: /api/v1/datasets
    method: GET
    data_selector: records
    params: {}
- name: syncs
  endpoint:
    path: /api/v1/syncs
    method: GET
    data_selector: records
    params: {}
- name: sync_log
  endpoint:
    path: CENSUS.CENSUS.SYNC_LOG
    method: SELECT
    data_selector: '*'
    params: {}
- name: source_objects
  endpoint:
    path: CENSUS.CENSUS.SOURCE_OBJECTS
    method: SELECT
    data_selector: '*'
    params: {}
- name: destinations
  endpoint:
    path: CENSUS.CENSUS.DESTINATIONS
    method: SELECT
    data_selector: '*'
    params: {}
- name: destination_objects
  endpoint:
    path: CENSUS.CENSUS.DESTINATION_OBJECTS
    method: SELECT
    data_selector: '*'
    params: {}
- name: sync_log
  endpoint:
    path: CENSUS.CENSUS.SYNC_LOG
    method: GET
- name: source_objects
  endpoint:
    path: CENSUS.CENSUS.SOURCE_OBJECTS
    method: GET
- name: destinations
  endpoint:
    path: CENSUS.CENSUS.DESTINATIONS
    method: GET
- name: destination_objects
  endpoint:
    path: CENSUS.CENSUS.DESTINATION_OBJECTS
    method: GET
- name: sync_alert_events
  endpoint:
    path: /syncs/sync-monitoring/alerts
    method: GET
    data_selector: events
- name: sync_run_lifecycle_events
  endpoint:
    path: /syncs/sync-monitoring/lifecycle
    method: GET
    data_selector: events
- name: sync_dry_runs
  endpoint:
    path: /syncs/sync-dry-runs
    method: GET
    data_selector: records
- name: sync_dry_runs
  endpoint:
    path: /api/syncs/dry-runs
    method: GET
    data_selector: records
    params: {}
- name: datasets
  endpoint:
    path: /api/v1/datasets
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: datasets
  endpoint:
    path: /api/datasets
    method: GET
    data_selector: data
    params: {}
- name: datasets
  endpoint:
    path: /api/v1/datasets
    method: GET
    data_selector: data
    params: {}
- name: syncs
  endpoint:
    path: /api/v1/syncs
    method: GET
    data_selector: data
    params: {}
- name: event_syncs
  endpoint:
    path: /api/v1/event_syncs
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: calculated_columns
  endpoint:
    path: /api/calculated_columns
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contact
  endpoint:
    params:
      sync_key: Email
- name: contact_with_list
  endpoint:
    params:
      sync_key: Email
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: contacts
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
    data_selector: campaigns
- name: contact
  endpoint:
    params:
      sync_keys: Email
      behaviors: Update or Create
- name: contact_with_list
  endpoint:
    params:
      sync_keys: Email
      behaviors: Mirror
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Use incremental syncs whenever possible to reduce load on your warehouse and speed
  up sync times
- Add appropriate filters to your queries to limit the data being processed to just
  what you need
- Create indexes on frequently queried columns in your warehouse to improve query
  performance
- Consider materialized views for complex queries that are used frequently to reduce
  computation time
- Add clear descriptions to your datasets to help business users understand what data
  is available
- Set up appropriate access controls in your warehouse to maintain data security
- Use version control to track changes to your dataset definitions and make it easy
  to roll back if needed
- Validate data types and formats before syncing to avoid errors in destination systems
- Create test syncs to validate new datasets before using them in production workflows
- Uses OAuth2 with refresh token — requires setup of connected app in Census
- Some datasets may return incomplete data
- Streaming Sources such as Kafka and HTTP are not supported.
- Google Sheets, S3, and file Sources are also not supported.
- Requires OAuth2 authentication
- Rate limits apply to API calls
- Mesh SQL is regular Postgres-compatible SQL syntax
- LLMs are magic but they're not perfect! Census recommends using the generated SQL
  as a starting point
- CSV datasets are best for relatively static data or one-time imports.
- For data that changes frequently, consider setting up a basic dataset with automated
  refreshes instead.
- CSV files are a simple but powerful way to bring data into Census.
- Remember that CSV datasets are best for relatively static data or one-time imports.
- Census does not treat sample messages as customer data, and they are stored with
  the rest of your organization’s metadata in Census’s US-based control plane.
- Some endpoints may require additional parameters for filtering.
- Requires setup of connected app in Census
- Census caches and refreshes this metadata regularly to optimize performance.
- Datasets relationships are an optional feature.
- Census does not check or enforce the validity of the data on either side of your
  relationship.
- Some objects may return nulls in deeply nested fields
- Entity Resolution helps you de-duplicate and associate records across all your data
  sources.
- Census allows you to either merge duplicate records into one or mark them as duplicates.
- Entity Resolution helps you build out your Golden Record — a single source of truth
  for your business applications.
- Census supports Deterministic Entity Resolution with Fuzzy Match at the column level.
- Fuzzy matching is a technique used to identify and match similar strings that may
  not be identical.
- Records with NULL values for that match rule will be ignored.
- Uses human-defined rules-based approach to identify duplicate records or associated
  users.
- Uses OAuth2 with refresh token for authentication.
- Requires setup of connected app in api
- Ensure proper OAuth setup for access
- Census Enrichment makes it easy to enrich your dataset with third-party data and
  sync them to any business apps.
- The outcome also materializes in your data warehouse.
- Apollo.io API keys can be scoped to limit access to particular API endpoints.
- Enriching does use Apollo API credits.
- Apollo.io API keys can be scoped to limit access to particular API endpoints. To
  enable enrichment, Census will need access to the /people/match and /organizations/enrich
  endpoints.
- Census supports a variety of data sources for your syncs.
- Syncs are incremental, meaning only new or changed records are synced.
- Census can run syncs automatically on a schedule, after dbt Cloud or Fivetran activities,
  with sequences, or programmatically via API.
- Cron schedules are supported with standard definitions up to minute granularity.
- To trigger syncs with dbt Cloud, a Service Account token is recommended.
- Census can run syncs automatically based on schedules, dbt Cloud or Fivetran activities,
  sequences, orchestration tools, or programmatically via API.
- Cron schedules accepted up to minute granularity.
- Service Account tokens for dbt Cloud are recommended and require specific permissions.
- Census syncs implement a consistent and sophisticated retry strategy to ensure the
  highest possible success rate when sending records by default.
- Census will respect rate limits where they exist on destination services.
- Whenever a sync runs, Census automatically retries any records that are rejected
  by the destination.
- Retries happen within the current Sync run following an exponential backoff strategy.
- On subsequent Sync runs, any record that still has not been accepted will be retried
  until it succeeds.
- Live Syncs are available on our Enterprise plan.
- Live Syncs can activate data in real time in all Census destinations with a few
  exceptions
- Audience Sync destinations support creating a fixed list of members.
- Some services do not provide the ability to list existing audiences, which may lead
  to duplication if the same account is used across multiple Census organizations.
- Test Syncing is not available for destinations that do not allow listing existing
  audiences.
- Census provides a variety of ways to understand the health and status of each of
  your syncs.
- You don't have to hang out looking at syncs all day to be sure they're healthy.
- The current status of the sync run can be 'Working', 'Completed', 'Failed', or 'Canceled'.
- If running, the estimated time remaining for the sync run is provided.
- If completed, the total duration of the sync run is available.
- By default, Census will retain row-level logs and make them available to you for
  14 days.
- Sync Tracking is not currently available for Live Syncs or Sync Dry Runs.
- By default, you will receive sync alert and weekly summary emails for every workspace
  to which you belong.
- You can also send sync alerts and weekly sync summaries to any non-user email address
  such as an email alias or mailing list.
- Census will automatically use your configured bucket as storage for all sync run
  logging going forward.
- By using Observability Lake, you gain the flexibility to manage your sync data retention
  according to your specific requirements.
- The Datadog integration is accessible for Enterprise Plan accounts.
- Some endpoints may have additional query parameters for filtering results.
- Census will automatically use it as storage for all sync run logging going forward.
- By using Observability Lake, you gain the flexibility to manage your sync data retention
  according to your specific requirements, ensuring you have the historical data needed
  for comprehensive analysis and compliance.
- Logs will start populating for all syncs in this connection on their subsequent
  runs.
- Census will retry sending the payload up to 5 times with increasing delay if the
  server does not respond with a 2xx status.
- Each payload delivery has a timeout of 10 seconds.
- Webhook payloads include a HMAC-SHA256 X-Signature header for validation.
- Census will retry sending the payload up to 5 times if a 2xx status is not received.
- This feature is not available for every destination object.
- Dry runs help you sync data with confidence by simulating a sync and providing a
  concise summary of the changes Census would have made in the destination.
- Ensure OAuth2 setup is completed for authorization
- Requires OAuth2 setup.
- Census supports the full standard set of Liquid 5.4 template features, filters,
  and tags with minor exceptions.
- Some objects may have limitations on data retrieval
- Event data is tied to specific actions associated with a user and/or company.
- Census keeps track of events that have been synced by ID (or timestamp) for the
  life of the sync configuration.
- API limits apply, ensure to handle rate limiting.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your API key or token'
- '429 Too Many Requests: Rate limit exceeded'
- 'Maximum file size: 100MB'
- Not suitable for real-time data that changes frequently
- Manual refresh process required for updates
- Limited to tabular data formats
- '400 Bad Request: Check the syntax of the request.'
- '401 Unauthorized: Verify your credentials.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Check your authentication credentials'
- '403 Forbidden: You do not have permission to access this resource'
- Invalid email domain (e.g. `nopain,nogain.com` is not a valid email domain)
- Reference record not found with `id` = XXXX (when doing a lookup relationship)
- Value too long (45 character string into a 40 character field in a destination)
- Invalid email domain (e.g. nopain,nogain.com is not a valid email domain)
- Reference record not found with id = XXXX
- '429: Rate limit errors may occur, and Census will respect the Retry-After header.'
- '400 Bad Request: Check the request parameters for correctness.'
- '403 Forbidden: Ensure you have the correct permissions to access this resource.'
- If the server does not respond within the timeout, it will be considered as a failed
  delivery.
- '401 Unauthorized: Check your OAuth credentials.'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Verify your credentials'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Invalid API key'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.getcensus.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://api.getcensus.com/oauth/token
    client_id: '{{ dlt.secrets[''census_client_id''] }}'
    client_secret: '{{ dlt.secrets[''census_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''census_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
