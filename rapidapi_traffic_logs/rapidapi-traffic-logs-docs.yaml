resources:
- name: requestLogsByEntity
  endpoint:
    path: /requestLogsByEntity
    method: POST
    data_selector: requests
    params:
      fromDate: '2023-01-10T19:48:15.350Z'
      toDate: '2023-01-17T19:48:15.350Z'
      offset: 10
      limit: 10
      timeOffset: 0
      orderBy: callTime
      orderDir: desc
      filters:
        apiIds:
        - api_6024cb01-90f9-4e84-a756-3768a35808da
- name: apiTrafficAnalyticsLogs
  endpoint:
    path: /apiTrafficAnalyticsLogs
    method: POST
    data_selector: requests
    params:
      projectId: 61784bcd6deb162134b9659d
      fromDate: '2024-03-16T00:00:00.000Z'
      toDate: '2024-04-15T20:39:38.206Z'
      offset: 0
      limit: 10
      orderBy: callTime
      orderDir: desc
      filters:
        projectIds:
        - 61784bcd6deb162134b9659d
      showDeleted: true
      timeOffset: 0
- name: requestLogsByEntity
  endpoint:
    path: /apiTrafficLogs/requestLogsByEntity
    method: POST
    data_selector: requests
    params:
      fromDate: '2023-01-10T19:48:15.350Z'
      toDate: '2023-01-17T19:48:15.350Z'
      offset: 10
      limit: 10
      timeOffset: 0
      orderBy: callTime
      orderDir: desc
      filters:
        apiIds:
        - api_6024cb01-90f9-4e84-a756-3768a35808da
- name: apiTrafficAnalyticsLogs
  endpoint:
    path: /apiTrafficLogs/apiTrafficAnalyticsLogs
    method: POST
    data_selector: requests
    params:
      projectId: 61784bcd6deb162134b9659d
      fromDate: '2024-03-16T00:00:00.000Z'
      toDate: '2024-04-15T20:39:38.206Z'
      offset: 0
      limit: 10
      orderBy: callTime
      orderDir: desc
      filters:
        projectIds:
        - 61784bcd6deb162134b9659d
      showDeleted: true
      timeOffset: 0
- name: apiTrafficAnalyticsLogs
  endpoint:
    path: /apiTrafficAnalyticsLogs
    method: POST
    data_selector: apiTrafficAnalyticsLogs
    params:
      where:
        apiIds:
        - api_28f03d6e-955e-4f13-bed8-f574ff7530a2
        fromDate: '2024-03-23T07:00:00.000Z'
        toDate: '2024-03-30T22:46:09.121Z'
        timeOffset: 0
      orderBy:
      - by: DESC
        fieldName: DATE_TIME
      pagination:
        first: 10
        after: ''
- name: apiTrafficAnalyticsLogs
  endpoint:
    path: /apiTrafficAnalyticsLogs
    method: POST
    data_selector: apiTrafficAnalyticsLogs
    params:
      where:
        apiIds:
        - api_28f03d6e-955e-4f13-bed8-f574ff7530a2
        fromDate: '2024-03-23T07:00:00.000Z'
        toDate: '2024-03-30T22:46:09.121Z'
        timeOffset: 0
      orderBy:
      - by: DESC
        fieldName: DATE_TIME
      pagination:
        first: 10
        after: ''
- name: logPayloadByRequestIdWithLoggingRestrictions
  endpoint:
    path: /logPayloadByRequestIdWithLoggingRestrictions
    method: POST
    data_selector: logPayloadByRequestIdWithLoggingRestrictions
    params:
      requestId: 8c3d64b72726fe465d833a5c189e1d7401408690ecb8769c2518daddeacc6486
      callTime: Fri, 29 Mar 2024 22:54:33 GMT
      apiId: api_28f03d6e-955e-4f13-bed8-f574ff7530a2
- name: environment_admin
  endpoint:
    path: /docs/environment-admin
    method: GET
    data_selector: actions
- name: organization_admin
  endpoint:
    path: /docs/organization-admin
    method: GET
    data_selector: actions
- name: builder
  endpoint:
    path: /docs/builder
    method: GET
    data_selector: actions
- name: consumer
  endpoint:
    path: /docs/consumer
    method: GET
    data_selector: actions
- name: email_types
  endpoint:
    path: /emails/sent
    method: GET
    data_selector: emails
- name: emails
  endpoint:
    path: /emails/sent
    method: GET
    data_selector: emails
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: alerts
- name: API Information
  endpoint:
    path: /api/information
    method: GET
    data_selector: api_info
- name: Endpoints
  endpoint:
    path: /api/endpoints
    method: GET
    data_selector: endpoints
- name: API Version
  endpoint:
    path: /api/version
    method: GET
    data_selector: version_info
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: analytics
  endpoint:
    path: /developer/dashboard
    method: GET
    data_selector: analytics_data
- name: credit_card_details
  endpoint:
    path: /developer/billing/billing-information
    method: GET
    data_selector: credit_card_info
- name: transaction_history
  endpoint:
    path: /developer/billing/transaction-history
    method: GET
    data_selector: transaction_details
- name: custom_invoice
  endpoint:
    path: /support/request_custom_invoice
    method: POST
    data_selector: invoice_request
- name: quota_usage
  endpoint:
    path: /developer/billing/subscriptions-and-usage
    method: GET
    data_selector: quota_info
- name: transaction_history
  endpoint:
    path: /developer/billing/transaction-history
    method: GET
    data_selector: transaction_history
    params: {}
- name: subscriptions_usage
  endpoint:
    path: /developer/billing/subscriptions-and-usage
    method: GET
    data_selector: subscriptions_usage
    params: {}
- name: Transfer API project
  endpoint:
    path: /api/project/transfer
    method: POST
- name: Delete API project
  endpoint:
    path: /api/project/delete
    method: DELETE
- name: incoming_requests
  endpoint:
    path: /my/apis/approvals/incoming-requests
    method: GET
    data_selector: requests
- name: submitted_requests
  endpoint:
    path: /my/apis/approvals/submitted-requests
    method: GET
    data_selector: requests
- name: incoming_requests
  endpoint:
    path: /my/apis/approvals/incoming_requests
    method: GET
- name: submitted_requests
  endpoint:
    path: /my/apis/approvals/submitted_requests
    method: GET
- name: My Sample
  endpoint:
    path: /YOUR HUB URL/studio
    method: GET
- name: custom_token_service
  endpoint:
    path: /
    method: POST
    data_selector: token
    params: {}
- name: X-RapidAPI-Proxy-Secret
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: X-RapidAPI-User
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: X-RapidAPI-Subscription
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: X-RapidAPI-Version
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: X-Forwarded-For
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: X-Forwarded-Host
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: x-rapidapi-host
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: subscribers
  endpoint:
    path: /api/subscribers
    method: GET
    data_selector: subscribers
    params: {}
- name: subusers
  endpoint:
    path: /subusers
    method: POST
    data_selector: subaccount
    params: {}
- name: subscribers
  endpoint:
    path: /api/subscribers
    method: GET
    data_selector: subscribers
    params: {}
- name: plans
  endpoint:
    path: /api/plans
    method: GET
    data_selector: plans
    params: {}
- name: transactions
  endpoint:
    path: /api/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: payouts
  endpoint:
    path: /payouts
    method: GET
    data_selector: payouts
- name: invoicing
  endpoint:
    path: /invoicing
    method: GET
    data_selector: invoices
- name: spotlights
  endpoint:
    path: /spotlights
    method: GET
    data_selector: spotlights
    params: {}
- name: versions
  endpoint:
    path: /manage-versions
    method: GET
    data_selector: versions
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: POST
- name: time_periods
  endpoint:
    path: /analytics/time_periods
    method: GET
    data_selector: time_periods
    params: {}
- name: calculatedStatistics
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.calculatedStatistics
- name: API Usage Analytics
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.apiUsageAnalytics
- name: Hub Usage Metrics
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.hubUsageMetrics
- name: calculatedStatistics
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.calculatedStatistics
    params: {}
- name: API Traffic Analytics
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.trafficAnalytics
    params: {}
- name: Hub Usage Metrics
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.hubUsageMetrics
    params: {}
- name: All APIs
  endpoint:
    path: /docs/platform-analytics-api
    method: POST
- name: specific API
  endpoint:
    path: /docs/platform-analytics-api
    method: POST
- name: Amazon API Gateway
  endpoint:
    path: /docs/amazon-api-gateway-analytics-integration
    method: GET
- name: Apigee
  endpoint:
    path: /docs/apigee-integration
    method: GET
- name: Azure API Management
  endpoint:
    path: /docs/azure-api-management-analytics-integration
    method: GET
- name: GET Echo
  endpoint:
    path: ''
    method: GET
    data_selector: ''
    params: {}
- name: POST Echo
  endpoint:
    path: /GET echo
    method: POST
    headers:
      My-Test-Header: Testing!
    params:
      testQueryParameter: myQueryValue
    body:
      my-body-key: my-body-value
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: environments
  endpoint:
    path: /environments
    method: GET
    data_selector: environments
- name: send_one_way_request
  endpoint:
    path: /
    method: POST
- name: GET Echo
  endpoint:
    path: ''
    method: GET
    data_selector: ''
    params: {}
- name: post_echo
  endpoint:
    method: POST
    data_selector: response
    body:
      my-body-key: my-body-value
- name: Default Session
  endpoint:
    path: /sessions/default
    method: POST
    data_selector: session
    params: {}
- name: Add Cookie
  endpoint:
    path: /sessions/cookie
    method: POST
    data_selector: cookie
    params: {}
- name: Delete Cookie
  endpoint:
    path: /sessions/cookie
    method: DELETE
    data_selector: cookie
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: POST
    data_selector: groups
    params: {}
- name: environments
  endpoint:
    path: /environments
    method: POST
    data_selector: environments
    params: {}
- name: variables
  endpoint:
    path: /variables
    method: POST
    data_selector: variables
    params: {}
- name: Assert Equals and Assert Different
  endpoint:
    path: /docs/assert-equals-and-assert-different
    method: GET
- name: Assert Exists
  endpoint:
    path: /docs/assert-exists
    method: GET
- name: Assert Type
  endpoint:
    path: /docs/assert-type
    method: GET
- name: Assert In
  endpoint:
    path: /docs/assert-in
    method: GET
- name: JSON Validate
  endpoint:
    path: /docs/json-validate
    method: GET
- name: Assert Greater Equal and Assert Smaller Equal
  endpoint:
    path: /docs/assert-greater-smaller-equal
    method: GET
- name: categories
  endpoint:
    path: /getCategories
    method: GET
- name: Loop ForEach
  endpoint:
    path: /loop/foreach
    method: GET
    data_selector: items
- name: Set Variable
  endpoint:
    path: /set/variable
    method: POST
    data_selector: variable
- name: Logic If
  endpoint:
    path: /logic/if
    method: POST
    data_selector: condition
- name: Code Run
  endpoint:
    path: /code/run
    method: POST
    data_selector: code
- name: Faker Generate
  endpoint:
    path: /faker/generate
    method: POST
    data_selector: fakeData
- name: Execute Child Test
  endpoint:
    path: /execute/child/test
    method: POST
    data_selector: testResult
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: results
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: create_sms_alert
  endpoint:
    path: /create/sms/alert
    method: POST
    data_selector: result
    params: {}
- name: create_request
  endpoint:
    path: /create/request
    method: POST
    data_selector: data
    params: {}
- name: edit_request
  endpoint:
    path: /edit/request
    method: POST
    data_selector: data
    params: {}
- name: reset
  endpoint:
    path: /reset
    method: POST
    data_selector: data
    params: {}
- name: multiple_webhook_configurations
  endpoint:
    path: /multiple/webhook/configurations
    method: POST
    data_selector: data
    params: {}
- name: test
  endpoint:
    data_selector: test
- name: testExecution
  endpoint:
    data_selector: testExecution
- name: test_analytics
  endpoint:
    path: /docs/test-analytics
    method: GET
    data_selector: analytics_data
    params: {}
- name: test_results
  endpoint:
    path: /docs/test-results
    method: GET
    data_selector: results_data
    params: {}
- name: api_dashboard
  endpoint:
    path: /docs/testing-dashboard
    method: GET
    data_selector: dashboard_data
    params: {}
- name: api_performance
  endpoint:
    path: /docs/testing-performance
    method: GET
    data_selector: performance_data
    params: {}
- name: test_analytics
  endpoint:
    path: /analytics
    method: GET
    data_selector: tests
    params: {}
- name: test_results
  endpoint:
    path: /api/results
    method: GET
    data_selector: results
    params: {}
- name: execution_report
  endpoint:
    path: /api/execution/report
    method: GET
    data_selector: execution_report
    params: {}
- name: test_executions
  endpoint:
    path: /test/executions
    method: GET
    data_selector: executions
    params: {}
- name: test_results
  endpoint:
    path: /results
    method: GET
    data_selector: results
    params: {}
- name: execution_report
  endpoint:
    path: /execution_report
    method: GET
    data_selector: execution_details
    params: {}
- name: organization
  endpoint:
    path: /organizations
    method: POST
    data_selector: data
    params:
      organization_name: string
      number_of_seats: integer
- name: teams
  endpoint:
    path: /teams
    method: POST
    data_selector: data
    params:
      team_name: string
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: data
    params:
      user_email: string
      team_id: string
      role: string
- name: organization_collections
  endpoint:
    path: /organization/homepage/collections
    method: GET
    data_selector: collections
- name: custom_branding
  endpoint:
    path: /organization/homepage/branding
    method: GET
    data_selector: branding
- name: messages
  endpoint:
    path: /inbox/messages
    method: GET
    data_selector: messages
- name: audit_logs
  endpoint:
    path: /org/audit_trails
    method: GET
    data_selector: logs
    params: {}
- name: Join Organization
  endpoint:
    path: /join-organizations
    method: GET
- name: Create New Team
  endpoint:
    path: /create-team
    method: POST
    data_selector: team
    params: {}
- name: Edit Team
  endpoint:
    path: /edit-team
    method: PUT
    data_selector: team
    params: {}
- name: approving_requests_to_make_api_public
  endpoint:
    path: /approvals/make_api_public
    method: POST
- name: request_to_join_organization
  endpoint:
    path: /organizations/join
    method: POST
- name: approving_requests_to_join_organization
  endpoint:
    path: /approvals/join_organization
    method: POST
- name: admin_panel_logs
  endpoint:
    path: /admin/audit-trails
    method: GET
    data_selector: logs
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: organization
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
    params: {}
- name: Category
  endpoint:
    path: /api/categories
    method: GET
    data_selector: categories
- name: tag_settings
  endpoint:
    path: /api/v1/tags/settings
    method: GET
    data_selector: settings
    params: {}
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: events
    params: {}
- name: lambda_function
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: SEO Configuration
  endpoint:
    path: /hub
    method: POST
    data_selector: SEO configurations
    params: {}
- name: user_status
  endpoint:
    path: /users/status
    method: GET
    data_selector: users
    params: {}
- name: user_audit_trails
  endpoint:
    path: /docs/admin-panel-audit-trails
    method: GET
    data_selector: audit_trails
    params: {}
- name: invoice_billing
  endpoint:
    path: /docs/exporting-api-consumer-billing-data
    method: GET
    data_selector: reports
    params: {}
- name: stripe_billing
  endpoint:
    path: /docs/billing-using-your-stripe-account
    method: GET
    data_selector: stripe_configuration
    params: {}
- name: organization_details
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: category
  endpoint:
    path: /categories
    method: GET
    data_selector: categories
- name: Environment User roles
  endpoint:
    path: /roles/environment
    method: GET
    data_selector: permissions
    params: {}
- name: Organization User roles
  endpoint:
    path: /roles/organization
    method: GET
    data_selector: permissions
    params: {}
- name: Team User roles
  endpoint:
    path: /roles/team
    method: GET
    data_selector: permissions
    params: {}
- name: Organization roles
  endpoint:
    path: /roles/organization
    method: GET
    data_selector: permissions
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
- name: DNS Records
  endpoint:
    path: /api/custom-domain/dns-records
    method: POST
    data_selector: records
    params: {}
- name: lambda_function
  endpoint:
    path: /lambda/handler
    method: POST
    data_selector: response
    params: {}
- name: hub
  endpoint:
    path: /hub
    method: POST
    data_selector: SEO configuration
- name: Environment User roles
  endpoint:
    path: /roles/environment
    method: GET
    data_selector: permissions
- name: Organization User roles
  endpoint:
    path: /roles/organization
    method: GET
    data_selector: permissions
- name: Team User roles
  endpoint:
    path: /roles/team
    method: GET
    data_selector: permissions
- name: Organization roles
  endpoint:
    path: /roles/organization-role
    method: GET
    data_selector: permissions
- name: ping
  endpoint:
    path: graphQL
    method: POST
    data_selector: data.ping
- name: login_options
  endpoint:
    path: /admin/settings/login-options
    method: GET
- name: custom_domain_setup
  endpoint:
    path: /set-up-a-custom-domain
    method: GET
    data_selector: records
    params: {}
- name: api
  endpoint:
    path: /
    method: POST
    data_selector: data.api
    params: {}
- name: searchApis
  endpoint:
    path: /
    method: POST
    data_selector: data.searchApis
    params: {}
- name: ping
  endpoint:
    path: /
    method: POST
    data_selector: data.ping
- name: api
  endpoint:
    path: /apis
    method: POST
    data_selector: data
- name: api
  endpoint:
    path: /
    method: POST
    data_selector: data.api
    params: {}
- name: apis
  endpoint:
    path: /
    method: POST
    data_selector: data.apis
    params: {}
- name: apis
  endpoint:
    path: ''
    method: POST
    data_selector: data.apis
    params: {}
- name: createApisFromRapidOas
  endpoint:
    path: ''
    method: POST
    data_selector: data.createApisFromRapidOas
    params: {}
- name: updateApisFromRapidOas
  endpoint:
    path: ''
    method: POST
    data_selector: data.updateApisFromRapidOas
    params: {}
- name: createApi
  endpoint:
    path: /createApi
    method: POST
    data_selector: createApi
    params: {}
- name: updateGraphQLSchema
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: createGqlApiVersions
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: api
  endpoint:
    path: /apis
    method: POST
    data_selector: apis
    params: {}
- name: createApi
  endpoint:
    path: /createApisFromSpecs
    method: POST
    data_selector: createApisFromSpecs
    params: {}
- name: updateApi
  endpoint:
    path: /updateApisFromSpecs
    method: POST
    data_selector: updateApisFromSpecs
    params: {}
- name: apiCreateInput
  endpoint:
    path: /createApi
    method: POST
    data_selector: data
    params: {}
- name: ReadMe
  endpoint:
    path: /api/documentation/readme
    method: GET
    data_selector: readme
    params: {}
- name: Spotlights
  endpoint:
    path: /api/documentation/spotlights
    method: GET
    data_selector: spotlights
    params: {}
- name: updateGraphQLSchema
  endpoint:
    path: /updateGraphQLSchema
    method: POST
    data_selector: data
    params: {}
- name: createGqlApiVersions
  endpoint:
    path: /createGqlApiVersions
    method: POST
    data_selector: data
    params: {}
- name: create_soap_api
  endpoint:
    path: /createApisFromSpecs
    method: POST
    data_selector: createApisFromSpecs
    params:
      specType: WSDL
- name: update_soap_api
  endpoint:
    path: /updateApisFromSpecs
    method: POST
    data_selector: updateApisFromSpecs
    params:
      specType: WSDL
- name: tutorials
  endpoint:
    path: /tutorials
    method: GET
    data_selector: nodes
- name: createTutorial
  endpoint:
    path: /createTutorial
    method: POST
    data_selector: id
- name: deleteTutorial
  endpoint:
    path: /deleteTutorial
    method: DELETE
- name: tutorials
  endpoint:
    path: /tutorials
    method: QUERY
    data_selector: nodes
    params:
      apiId: $id
      apiVersion: $versionId
- name: createTutorial
  endpoint:
    path: /createTutorial
    method: MUTATION
    data_selector: id
    params:
      apiId: $id
      apiVersion: $versionId
      title: $title
      content: $content
      published: $published
      thumbnailURL: $thumbnailURL
- name: updateTutorial
  endpoint:
    path: /updateTutorial
    method: MUTATION
    data_selector: id
    params:
      apiId: $id
      apiVersion: $versionId
      title: $title
      content: $content
      published: $published
      thumbnailURL: $thumbnailURL
      slugifiedName: $slug
- name: deleteTutorial
  endpoint:
    path: /deleteTutorial
    method: MUTATION
    data_selector: null
    params:
      apiId: $id
      apiVersion: $versionId
      slugifiedName: $slug
- name: generateAssetUploadUrl
  endpoint:
    path: /
    method: POST
    data_selector: data.generateAssetUploadUrl
    params: {}
- name: updateAssetUploaded
  endpoint:
    path: /
    method: POST
    data_selector: data.updateAssetUploaded
    params: {}
- name: updateAsset
  endpoint:
    path: /
    method: POST
    data_selector: data.updateAsset
    params: {}
- name: deleteAsset
  endpoint:
    path: /
    method: POST
    data_selector: data.deleteAsset
    params: {}
- name: tutorials
  endpoint:
    path: /tutorials
    method: query
    data_selector: nodes
    params:
      id: api_b766b545-cd34-4b8a-8ec9-0e994cf6ed80
      versionId: apiversion_1de8cd3a-94ec-45f0-b193-8d6f9a04dcd4
- name: create_tutorial
  endpoint:
    path: /createTutorial
    method: mutation
    data_selector: id
    params:
      id: api_b766b545-cd34-4b8a-8ec9-0e994cf6ed80
      versionId: apiversion_1de8cd3a-94ec-45f0-b193-8d6f9a04dcd4
      title: Tutorial 2
      content: '**Tutorial** content.'
      published: true
- name: delete_tutorial
  endpoint:
    path: /deleteTutorial
    method: mutation
    data_selector: null
    params:
      id: api_b766b545-cd34-4b8a-8ec9-0e994cf6ed80
      versionId: apiversion_1de8cd3a-94ec-45f0-b193-8d6f9a04dcd4
      slug: tutorial-2
- name: updateApiVersions
  endpoint:
    path: /docs/papi-gql-examples-rest-apis#update-an-api
    method: mutation
    data_selector: updateApiVersions
    params:
      apiVersions:
        apiVersionId: apiversion_[YOUR VERSION ID]
        versionStatus: active
        current: true
- name: tutorials
  endpoint:
    path: /tutorials
    method: query
    data_selector: nodes
    params: {}
- name: createTutorial
  endpoint:
    path: /createTutorial
    method: mutation
    data_selector: id
    params: {}
- name: updateTutorial
  endpoint:
    path: /updateTutorial
    method: mutation
    data_selector: id
    params: {}
- name: deleteTutorial
  endpoint:
    path: /deleteTutorial
    method: mutation
    data_selector: id
    params: {}
- name: createApi
  endpoint:
    path: /createApi
    method: POST
    data_selector: createApi
    params: {}
- name: updateApi
  endpoint:
    path: /updateApi
    method: POST
    data_selector: updateApi
    params: {}
- name: readAPI
  endpoint:
    path: /readAPI
    method: POST
    data_selector: api
    params: {}
- name: Get API by external custom ID
  endpoint:
    path: /apis
    method: GET
    data_selector: edges
    params:
      externalCustomId: my-custom-id-01
- name: generateAssetUploadUrl
  endpoint:
    path: /generateAssetUploadUrl
    method: POST
    data_selector: data.generateAssetUploadUrl
    params: {}
- name: updateAssetUploaded
  endpoint:
    path: /updateAssetUploaded
    method: POST
    data_selector: data.updateAssetUploaded
    params: {}
- name: updateAsset
  endpoint:
    path: /updateAsset
    method: POST
    data_selector: data.updateAsset
    params: {}
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: POST
    data_selector: nodes
    params: {}
- name: api_versions
  endpoint:
    path: /apiVersions
    method: GET
    data_selector: nodes
    params:
      apiId: some-api-id
- name: create_api_versions
  endpoint:
    path: /createApiVersions
    method: POST
    data_selector: createApiVersions
    params:
      api: api_[YOUR API ID]
      name: '[NEW VERSION NAME]'
- name: create_gql_api_versions
  endpoint:
    path: /createGqlApiVersions
    method: POST
    data_selector: createGqlApiVersions
    params:
      api: YOUR API ID
      name: v3
      introspectionCallUrl: YOUR BASE URL
      isIntrospectionCall: true
- name: billing_plan_versions
  endpoint:
    path: /
    method: POST
    data_selector: billingPlanVersions.nodes
    params:
      where:
        apiId: api_81eaf459-fd5f-4239-ae64-ab9f06559888
      pagination:
        first: '50'
- name: create_external_gateway_api_subscription
  endpoint:
    path: /
    method: POST
    data_selector: createExternalGatewayApiSubscription
    params:
      input:
        apiId: api_6040d9e7-3d00-43d5-bc51-b7e10c3348ea
- name: delete_subscription
  endpoint:
    path: /
    method: POST
    data_selector: deleteSubscription
    params:
      id: '4460204'
- name: updateApiVersions
  endpoint:
    path: /updateApiVersions
    method: POST
    data_selector: updateApiVersions
    params: {}
- name: createApi
  endpoint:
    path: /createApi
    method: POST
    data_selector: createApi
    params: {}
- name: updateApi
  endpoint:
    path: /updateApi
    method: POST
    data_selector: updateApi
    params: {}
- name: readAPI
  endpoint:
    path: /readAPI
    method: POST
    data_selector: api
    params: {}
- name: generateFile
  endpoint:
    path: /graphql
    method: POST
    data_selector: generateFile
- name: getFileDetails
  endpoint:
    path: /graphql
    method: POST
    data_selector: getFileDetails
- name: Get API by external custom ID
  endpoint:
    path: /apis
    method: GET
    data_selector: edges.node
    params:
      externalCustomId: my-custom-id-01
- name: getFileDetails
  endpoint:
    path: /getFileDetails
    method: query
    data_selector: getFileDetails
    params: {}
- name: list_announcements
  endpoint:
    path: announcements
    method: POST
    data_selector: api.announcements
- name: create_announcement
  endpoint:
    path: postMessage
    method: POST
    data_selector: postMessage.message
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: POST
    data_selector: nodes
    params: {}
- name: billing_plan_versions
  endpoint:
    path: /graphql
    method: POST
    data_selector: billingPlanVersions.nodes
    params:
      where:
        apiId: api_81eaf459-fd5f-4239-ae64-ab9f06559888
      pagination:
        first: '50'
- name: create_external_gateway_api_subscription
  endpoint:
    path: /graphql
    method: POST
    data_selector: createExternalGatewayApiSubscription
    params:
      input:
        apiId: api_6040d9e7-3d00-43d5-bc51-b7e10c3348ea
- name: delete_subscription
  endpoint:
    path: /graphql
    method: POST
    data_selector: null
    params:
      id: '4460204'
- name: list_user_apps
  endpoint:
    path: /graphql
    method: POST
    data_selector: user.ProjectACLs.Project
    params:
      id: '5713300'
- name: create_app
  endpoint:
    path: /graphql
    method: POST
    data_selector: createProject
    params:
      project:
        projectOwner: YOUR_TEAM_ID_or_USER_ID
        projectName: YOUR_APPLICATION_NAME
        description: YOUR_APPLICATION_DESCRIPTION
- name: generateFile
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.generateFile
    params:
      input:
        from: '2023-09-01T00:00:00.000Z'
        to: '2023-09-30T23:59:59.999Z'
        actionName: SUBSCRIPTIONS
- name: API Announcements
  endpoint:
    path: /announcements
    method: POST
    data_selector: message
    params: {}
- name: applicationAuthorizations
  endpoint:
    path: /applicationAuthorizations
    method: POST
    data_selector: applicationAuthorizations
    params:
      projectId: YOUR_PROJECT_ID
- name: createApplicationAuthorization
  endpoint:
    path: /createApplicationAuthorization
    method: POST
    data_selector: createApplicationAuthorization
    params:
      input:
        projectId: YOUR_PROJECT_ID
        name: YOUR_AUTHORIZATION_NAME
        authorizationType: OAUTH2
        authorizationValues: '{"clientId":"YOUR_CLIENT_ID","clientSecret":"YOUR_CLIENT_SECRET"}'
        gatewayIds:
        - YOUR_GATEWAY_ID
- name: updateApplicationAuthorization
  endpoint:
    path: /updateApplicationAuthorization
    method: POST
    data_selector: updateApplicationAuthorization
    params:
      input:
        id: '9051946'
        name: my new name
- name: deleteApplicationAuthorization
  endpoint:
    path: /deleteApplicationAuthorization
    method: POST
    data_selector: deleteApplicationAuthorization
    params:
      id: '9051946'
- name: user_apps
  endpoint:
    path: /graphql
    method: POST
    data_selector: user.ProjectACLs.Project
    params:
      id: '5713300'
- name: create_app
  endpoint:
    path: /graphql
    method: POST
    data_selector: createProject
    params: {}
- name: getUserByEmail
  endpoint:
    path: /users
    method: POST
    data_selector: data.users
    params:
      email: any-user-email@example.com
- name: getAUsersTeams
  endpoint:
    path: /teams
    method: POST
    data_selector: data.users[0].Teams
    params:
      userIds:
      - '5713300'
- name: applicationAuthorizations
  endpoint:
    path: /applicationAuthorizations
    method: POST
    data_selector: applicationAuthorizations
    params:
      projectId: '2646677'
- name: applicationAuthorization
  endpoint:
    path: /applicationAuthorization
    method: POST
    data_selector: applicationAuthorization
    params:
      authId: '5307813'
- name: createApplicationAuthorization
  endpoint:
    path: /createApplicationAuthorization
    method: POST
    data_selector: createApplicationAuthorization
    params:
      projectId: '4510967'
      name: my new key
      authorizationType: RAPIDAPI
- name: updateApplicationAuthorization
  endpoint:
    path: /updateApplicationAuthorization
    method: POST
    data_selector: updateApplicationAuthorization
    params:
      id: '9051946'
      name: my new name
- name: deleteApplicationAuthorization
  endpoint:
    path: /deleteApplicationAuthorization
    method: POST
    data_selector: deleteApplicationAuthorization
    params:
      id: '9051946'
- name: apps
  endpoint:
    path: /apps
    method: GET
- name: app_keys
  endpoint:
    path: /apps/{projectID}/keys
    method: GET
- name: create_app
  endpoint:
    path: /createProject
    method: POST
- name: delete_app
  endpoint:
    path: /apps/{appID}
    method: DELETE
- name: UserApps
  endpoint:
    path: /apps
    method: GET
    data_selector: data.apps
    params: {}
- name: UserAuthorizations
  endpoint:
    path: /authorizations
    method: GET
    data_selector: data.authorizations
    params: {}
- name: create_auth
  endpoint:
    path: /createAuth
    method: POST
    data_selector: createApplicationAuthorization
    params: {}
- name: delete_auth
  endpoint:
    path: /deleteAuth
    method: POST
    data_selector: deleteApplicationAuthorization
    params: {}
- name: users
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.users.nodes
    params: {}
- name: apps
  endpoint:
    path: /apps
    method: GET
    data_selector: data.apps
    params: {}
- name: createApp
  endpoint:
    path: /createApp
    method: POST
    data_selector: data.createApp
    params: {}
- name: deleteApp
  endpoint:
    path: /deleteApp
    method: DELETE
    data_selector: data.deleteApp
    params: {}
- name: User
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: Authorization
  endpoint:
    path: /authorizations
    method: POST
    data_selector: createApplicationAuthorization
- name: users
  endpoint:
    path: ''
    method: POST
    data_selector: data.users.nodes
    params: {}
- name: getUser
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.user
    params:
      id: ID!
- name: getUsers
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.users.nodes
    params:
      where:
        limit: 50
        offset: 0
        term: ''
        order: createdAt,ASC
        byField: id,name,email,username
        filters: {}
- name: updateUser
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.updateUser.status
    params:
      input:
        status: DEACTIVATED
        id: ID!
- name: paginatedTeamUsersByOrganizationId
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.paginatedTeamUsersByOrganizationIdV2.data
    params:
      orgId: Int!
      pagingArgs:
        offset: 0
        limit: 1000
        orderBy: id
        orderDirection: desc
- name: getTeam
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.team
    params:
      id: ID!
- name: getRoles
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.roles.edges
    params:
      where:
        roleLevels:
        - USER_ENVIRONMENT
- name: updateUserRoles
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.updateUserRoles
    params:
      input:
        entityId: Int!
        roleId: Int!
        orgId: Int!
- name: upsertEntityRole
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.upsertEntityRole
    params:
      input:
        entityId: Int!
        roleId: Int!
        orgId: Int!
        parentId: Int!
- name: getTeams
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.teams
    params:
      where:
        orgId: YOUR_ORG_ID
- name: createUserInvites
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createUserInvites
    params:
      input:
        email: String
        teamIds: '[Int]!'
        organizationId: Int
        role: String
        id: Int
        inviterId: Int
- name: updateTeamUser
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.updateTeamUser
    params:
      input:
        orgId: Int
        teamUserId: Int
        teamToRemove: Int
        teamToAdd: Int
        newRole: String
- name: user
  endpoint:
    path: /graphql
    method: POST
    data_selector: user
    params: {}
- name: users
  endpoint:
    path: /graphql
    method: POST
    data_selector: users
    params:
      where:
        limit: 50
        offset: 0
        term: ''
        order: createdAt,ASC
        byField: id,name,email,username
        filters: {}
- name: team
  endpoint:
    path: /graphql
    method: POST
    data_selector: team
    params: {}
- name: roles
  endpoint:
    path: /graphql
    method: POST
    data_selector: roles
    params:
      where:
        roleLevels:
        - USER_ENVIRONMENT
- name: create_organization
  endpoint:
    path: /createOrganization
    method: POST
    data_selector: createOrganization
- name: get_organization_details
  endpoint:
    path: /organization
    method: GET
    data_selector: organization
- name: create_organization
  endpoint:
    path: /createOrganization
    method: POST
    data_selector: createOrganization
    params: {}
- name: organization_details
  endpoint:
    path: /organization
    method: GET
    data_selector: organization
    params:
      id: ORG_ID
- name: getOrg
  endpoint:
    path: query/getOrg
    method: POST
    data_selector: organization
    params:
      id: '5755578'
      whereRoles:
        roleLevels:
        - ORGANIZATION
      papiWhere:
        roleLevels:
        - TEAM_ENVIRONMENT
      whereOrgTeam:
        orgId: '5755578'
        parentId: '5755578'
      defaultRoleWhere:
        roleLevels:
        - USER_ORGANIZATION
- name: Organizations
  endpoint:
    path: query/Organizations
    method: POST
    data_selector: organizations
    params:
      where:
        userId: YOUR_USER_ID
- name: organization_details_by_id
  endpoint:
    path: /graphql
    method: POST
    data_selector: organization
    params:
      id: '5755578'
      whereRoles:
        roleLevels:
        - ORGANIZATION
      papiWhere:
        roleLevels:
        - TEAM_ENVIRONMENT
      whereOrgTeam:
        orgId: '5755578'
        parentId: '5755578'
      defaultRoleWhere:
        roleLevels:
        - USER_ORGANIZATION
- name: organizations_details
  endpoint:
    path: /graphql
    method: POST
    data_selector: organizations
    params:
      where:
        userId: YOUR_USER_ID
- name: organizations_details_by_slug
  endpoint:
    path: /graphql
    method: POST
    data_selector: organizations
    params:
      where:
        slugifiedName: platform-management
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: categoriesV2.nodes
    params: {}
- name: createCategory
  endpoint:
    path: /createCategory
    method: POST
    data_selector: createCategory
    params: {}
- name: updateCategory
  endpoint:
    path: /updateCategory
    method: POST
    data_selector: updateCategory
    params: {}
- name: deleteCategories
  endpoint:
    path: /deleteCategories
    method: POST
    data_selector: deleteCategories
    params: {}
- name: categoriesV2
  endpoint:
    path: /categories
    method: POST
    data_selector: categoriesV2
    params: {}
- name: createCategory
  endpoint:
    path: /createCategory
    method: POST
    data_selector: createCategory
    params: {}
- name: updateCategory
  endpoint:
    path: /updateCategory
    method: POST
    data_selector: updateCategory
    params: {}
- name: deleteCategories
  endpoint:
    path: /deleteCategories
    method: POST
    data_selector: deleteCategories
    params: {}
- name: tag_definitions
  endpoint:
    path: tagDefinitions
    method: query
    data_selector: edges.node
- name: collections
  endpoint:
    path: collections
    method: query
    data_selector: data
- name: tag_definitions
  endpoint:
    path: /tagDefinitions
    method: GET
    data_selector: tagDefinitions
- name: collections
  endpoint:
    path: /collections
    method: GET
    data_selector: collections
- name: get_gateways
  endpoint:
    path: getGateways
    method: GET
    data_selector: gatewayInstances.nodes
    params: {}
- name: create_gateway
  endpoint:
    path: createGWInstance
    method: POST
    data_selector: createGatewayInstance
    params: {}
- name: update_gateway
  endpoint:
    path: updateGWInstance
    method: POST
    data_selector: updateGatewayInstance
    params: {}
- name: delete_gateway
  endpoint:
    path: deleteGWInstance
    method: POST
    data_selector: deleteGatewayInstance
    params: {}
- name: getGateways
  endpoint:
    path: getGateways
    method: POST
    data_selector: gatewayInstances.nodes
    params: {}
- name: createGatewayInstance
  endpoint:
    path: createGWInstance
    method: POST
    data_selector: createGatewayInstance
    params: {}
- name: updateGatewayInstance
  endpoint:
    path: updateGWInstance
    method: POST
    data_selector: updateGatewayInstance
    params: {}
- name: deleteGatewayInstance
  endpoint:
    path: deleteGWInstance
    method: POST
    data_selector: null
    params: {}
- name: gateway_templates
  endpoint:
    path: /gatewayTemplates
    method: GET
    data_selector: nodes
- name: create_gateway_template
  endpoint:
    path: /createGatewayTemplate
    method: POST
    data_selector: createGatewayTemplate
- name: update_gateway_template
  endpoint:
    path: /updateGatewayTemplate
    method: POST
    data_selector: updateGatewayTemplate
- name: delete_gateway_template
  endpoint:
    path: /deleteGatewayTemplate
    method: POST
    data_selector: null
- name: get_api_gateways_templates
  endpoint:
    path: getGWTemplates
    method: POST
    data_selector: gatewayTemplates.nodes
    params: {}
- name: create_api_gateway_template
  endpoint:
    path: createTemplate
    method: POST
    data_selector: createGatewayTemplate
    params: {}
- name: update_api_gateway_template
  endpoint:
    path: updateTemplate
    method: POST
    data_selector: updateGatewayTemplate
    params: {}
- name: delete_api_gateway_template
  endpoint:
    path: deleteTemplate
    method: POST
    data_selector: deleteGatewayTemplate
    params: {}
- name: apiTrafficAnalyticsSummary
  endpoint:
    path: /apiTrafficAnalyticsSummary
    method: POST
    data_selector: data.apiTrafficAnalyticsSummary
    params:
      fromDate: '2024-03-21T07:00:00.000Z'
      toDate: '2024-03-28T22:53:09.586Z'
      resolution: DAYS
      apiIds:
      - api_28f03d6e-955e-4f13-bed8-f574ff7530a2
      timeOffset: 0
- name: apiTrafficAnalyticsSummary
  endpoint:
    path: /apiTrafficAnalyticsSummary
    method: POST
    data_selector: data.apiTrafficAnalyticsSummary
    params:
      where:
        apiIds:
        - api_28f03d6e-955e-4f13-bed8-f574ff7530a2
        fromDate: '2024-03-21T07:00:00.000Z'
        toDate: '2024-03-28T22:53:09.586Z'
        timeOffset: 0
        resolution: DAYS
- name: apiTrafficAnalytics
  endpoint:
    path: /apiTrafficAnalytics
    method: POST
    data_selector: data.apiTrafficAnalytics
- name: apiTrafficAnalytics
  endpoint:
    path: /apiTrafficAnalytics
    method: POST
    data_selector: data.apiTrafficAnalytics
    params:
      where:
        fromDate: '2024-02-16T00:00:00.000Z'
        toDate: '2024-03-23T19:27:55.232Z'
        resolution: DAYS
- name: apiTrafficAnalyticsFacets
  endpoint:
    path: /apiTrafficAnalyticsFacets
    method: POST
    data_selector: apiTrafficAnalyticsFacets
- name: calculatedStatistics
  endpoint:
    path: /calculatedStatistics
    method: POST
    data_selector: calculatedStatistics
- name: apiIds
  endpoint:
    path: /apiIds
    method: GET
    data_selector: records
- name: fromDate
  endpoint:
    path: /fromDate
    method: GET
    data_selector: records
- name: toDate
  endpoint:
    path: /toDate
    method: GET
    data_selector: records
- name: resolution
  endpoint:
    path: /resolution
    method: GET
    data_selector: records
- name: groupBy
  endpoint:
    path: /groupBy
    method: GET
    data_selector: records
- name: getHubMetrics
  endpoint:
    path: /getHubMetrics
    method: POST
    data_selector: metrics
    params:
      where:
        fromDate: '2024-03-19T00:00:00.000Z'
        toDate: '2024-03-26T13:48:27.535Z'
- name: getApiMetrics
  endpoint:
    path: /getApiMetrics
    method: POST
    data_selector: metrics
    params:
      where:
        fromDate: 1710658800
        toDate: 1711436399
        excludeProtected: true
- name: apiTrafficAnalyticsFacets
  endpoint:
    path: /apiTrafficAnalyticsFacets
    method: POST
    data_selector: data.apiTrafficAnalyticsFacets
    params: {}
- name: calculatedStatistics
  endpoint:
    path: /calculatedStatistics
    method: POST
    data_selector: data.calculatedStatistics
    params: {}
- name: governance_metrics
  endpoint:
    path: /metrics/governance
    method: POST
    data_selector: metrics
    params:
      where:
        fromDate: 1710806400
        toDate: 1711460907
        excludeProtected: true
- name: billing_metrics
  endpoint:
    path: /metrics/billing
    method: POST
    data_selector: metrics
    params:
      where:
        fromDate: 1710658800
        toDate: 1711436399
        excludeProtected: true
- name: getHubMetrics
  endpoint:
    path: /metrics
    method: POST
    data_selector: metrics
    params:
      where:
        fromDate: '2024-03-19T00:00:00.000Z'
        toDate: '2024-03-26T13:48:27.535Z'
- name: getApiMetrics
  endpoint:
    path: /metrics
    method: POST
    data_selector: metrics
    params:
      where:
        fromDate: 1710658800
        toDate: 1711436399
        excludeProtected: true
- name: user_login_audit_logs
  endpoint:
    path: /auditLogin
    method: POST
    data_selector: auditLogin
    params:
      userId: String
      from: Int
- name: environment_audit_logs
  endpoint:
    path: /adminAuditLogs
    method: POST
    data_selector: adminAuditLogs
    params:
      pagination: PaginationArgs
      orderBy: AdminAuditLogSortablesInput
      where: AdminAuditLogInput
- name: governance_metrics
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.metrics
    params:
      where:
        fromDate: 1710806400
        toDate: 1711460907
        excludeProtected: true
- name: billing_metrics
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.metrics
    params:
      where:
        fromDate: 1710658800
        toDate: 1711436399
        excludeProtected: true
- name: event_logs
  endpoint:
    path: /eventLogs
    method: POST
    data_selector: eventLogs
    params:
      pagination:
        first: 20
      orderBy:
        sortingFields:
        - fieldName: CREATED_AT
          order: ASC
      where:
        query: Update
- name: event_config
  endpoint:
    path: /eventConfig
    method: POST
    data_selector: eventConfig
    params: {}
- name: audit_login
  endpoint:
    path: /auditLogin
    method: POST
    data_selector: auditLogin
    params:
      userId: String
      from: Int
- name: admin_audit_logs
  endpoint:
    path: /adminAuditLogs
    method: POST
    data_selector: adminAuditLogs
    params:
      pagination: PaginationArgs
      orderBy: AdminAuditLogSortablesInput
      where: AdminAuditLogInput
- name: event_logs
  endpoint:
    path: getEventLogs
    method: POST
    data_selector: eventLogs
    params:
      pagination:
        first: 20
      orderBy:
        sortingFields:
        - fieldName: CREATED_AT
          order: ASC
      where:
        query: Update
- name: event_config
  endpoint:
    path: getEventConfig
    method: POST
    data_selector: eventConfig
    params: {}
- name: apis
  endpoint:
    path: /apis
    method: GET
    data_selector: edges
    params:
      pagination:
        first: 5
- name: create_api
  endpoint:
    path: /v1/apis/rapidapi-file/admin
    method: POST
    data_selector: data
    params: {}
- name: Create API
  endpoint:
    path: /apis/create
    method: POST
- name: Update API
  endpoint:
    path: /apis/update
    method: PUT
- name: Delete API
  endpoint:
    path: /apis/delete
    method: DELETE
- name: Create Collection
  endpoint:
    path: /api/collections/create
    method: POST
    data_selector: collection
    params: {}
- name: Update Collection
  endpoint:
    path: /api/collections/update
    method: PUT
    data_selector: collection
    params: {}
- name: Create API
  endpoint:
    path: /v1/apis
    method: POST
    data_selector: null
    params: {}
- name: Update API
  endpoint:
    path: /v1/apis/{apiId}
    method: PUT
    data_selector: null
    params: {}
- name: Delete API
  endpoint:
    path: /v1/apis/{apiId}
    method: DELETE
    data_selector: null
    params: {}
- name: delete_collection
  endpoint:
    path: /collections/{collectionID}
    method: DELETE
    data_selector: null
    params: {}
- name: Create Collection
  endpoint:
    path: /collections/create
    method: POST
    data_selector: data
    params: {}
- name: Update Collection
  endpoint:
    path: /collections/update
    method: PUT
    data_selector: data
    params: {}
- name: Delete Collection
  endpoint:
    path: /COLLECTIONS/delete
    method: DELETE
    data_selector: null
    params:
      collectionID: unique identifier for the collection
- name: app_keys
  endpoint:
    path: /get-all-app-keys
    method: GET
- name: users
  endpoint:
    path: admin/users
    method: GET
    data_selector: data
    params:
      email: any-user-email@example.com
- name: user_teams
  endpoint:
    path: admin/users/{userId}/teams
    method: GET
    data_selector: data
    params:
      email: any-user-email@example.com
- name: apps
  endpoint:
    path: apps
    method: GET
    data_selector: data
    params: {}
- name: app_details
  endpoint:
    path: apps/{projectID}
    method: GET
    data_selector: data
    params: {}
- name: app_keys
  endpoint:
    path: apps/{projectID}/keys
    method: GET
    data_selector: data
    params: {}
- name: application_authorizations
  endpoint:
    path: applications
    method: POST
    data_selector: data
    params: {}
- name: Get API
  endpoint:
    path: /GetAPI
    method: GET
- name: Get Analytics
  endpoint:
    path: /GetAnalytics
    method: GET
- name: Get Subscriptions
  endpoint:
    path: /GetSubscriptions
    method: GET
- name: Get API Subscriptions
  endpoint:
    path: /GetAPISubscriptions
    method: GET
- name: Update Team
  endpoint:
    path: /UpdateTeam
    method: PUT
- name: Get Team
  endpoint:
    path: /GetTeam
    method: GET
- name: Delete Team
  endpoint:
    path: /DeleteTeam
    method: DELETE
- name: Get Users for a Team
  endpoint:
    path: /GetUsersForTeam
    method: GET
- name: Get Teams
  endpoint:
    path: /GetTeams
    method: GET
- name: Remove Team User
  endpoint:
    path: /RemoveTeamUser
    method: DELETE
- name: Add Team User
  endpoint:
    path: /AddTeamUser
    method: POST
- name: Create Team
  endpoint:
    path: /CreateTeam
    method: POST
- name: Get User Subscription
  endpoint:
    path: /GetUserSubscription
    method: GET
- name: Get User Subscription Analytics
  endpoint:
    path: /GetUserSubscriptionAnalytics
    method: GET
- name: Delete Subscriptions
  endpoint:
    path: /DeleteSubscriptions
    method: DELETE
- name: Get User Subscriptions
  endpoint:
    path: /GetUserSubscriptions
    method: GET
- name: Create Subscriptions
  endpoint:
    path: /CreateSubscriptions
    method: POST
- name: Get API Version Doc
  endpoint:
    path: /GetAPIVersionDoc
    method: GET
- name: Create API Version Doc
  endpoint:
    path: /CreateAPIVersionDoc
    method: POST
- name: Delete API Version Doc
  endpoint:
    path: /DeleteAPIVersionDoc
    method: DELETE
- name: Update API Version Doc
  endpoint:
    path: /UpdateAPIVersionDoc
    method: PUT
- name: Un-invite API Developers
  endpoint:
    path: /UninviteAPIDevelopers
    method: DELETE
- name: Invite API Developers
  endpoint:
    path: /InviteAPIDevelopers
    method: POST
- name: Get API Developers
  endpoint:
    path: /GetAPIDevelopers
    method: GET
- name: Get App Analytics
  endpoint:
    path: /GetAppAnalytics
    method: GET
- name: Delete App
  endpoint:
    path: /DeleteApp
    method: DELETE
- name: Create App
  endpoint:
    path: /CreateApp
    method: POST
- name: Update App
  endpoint:
    path: /UpdateApp
    method: PUT
- name: Get App
  endpoint:
    path: /GetApp
    method: GET
- name: Get User App
  endpoint:
    path: /GetUserApp
    method: GET
- name: Delete API Version Tag
  endpoint:
    path: /DeleteAPIVersionTag
    method: DELETE
- name: Get API Version Tag
  endpoint:
    path: /GetAPIVersionTag
    method: GET
- name: Add API Version Tag
  endpoint:
    path: /AddAPIVersionTag
    method: POST
- name: Get API Version Tag
  endpoint:
    path: /GetAPIVersionTag
    method: GET
- name: Update User
  endpoint:
    path: /UpdateUser
    method: PUT
- name: Delete User
  endpoint:
    path: /DeleteUser
    method: DELETE
- name: Get User Teams
  endpoint:
    path: /GetUserTeams
    method: GET
- name: Create User
  endpoint:
    path: /CreateUser
    method: POST
- name: Get Users
  endpoint:
    path: /GetUsers
    method: GET
- name: Get User
  endpoint:
    path: /GetUser
    method: GET
- name: Delete Organization
  endpoint:
    path: /DeleteOrganization
    method: DELETE
- name: Get Organization
  endpoint:
    path: /GetOrganization
    method: GET
- name: Create Organization
  endpoint:
    path: /CreateOrganization
    method: POST
- name: Update Organization
  endpoint:
    path: /UpdateOrganization
    method: PUT
- name: Get Organization Audit Log
  endpoint:
    path: /GetOrganizationAuditLog
    method: GET
- name: update_application_authorization
  endpoint:
    path: /mutation.updateApplicationAuthorization
    method: POST
- name: delete_app
  endpoint:
    path: /DELETE App
    method: DELETE
- name: delete_application_authorization
  endpoint:
    path: /mutation.deleteApplicationAuthorization
    method: POST
- name: get_all_apps
  endpoint:
    path: /api/get_all_apps
    method: GET
    data_selector: apps
- name: get_app
  endpoint:
    path: /api/get_app
    method: GET
    data_selector: app_details
- name: users
  endpoint:
    path: admin/users
    method: GET
    params:
      limit: '5000'
- name: organizations
  endpoint:
    path: admin/organizations
    method: GET
    params:
      limit: '200'
      status: ACTIVE
- name: teams
  endpoint:
    path: organizations/{orgID}/teams
    method: GET
- name: apis
  endpoint:
    path: apis
    method: GET
- name: users
  endpoint:
    path: /admin/users
    method: GET
    data_selector: data
    params:
      email: any-user-email@example.com
- name: user_teams
  endpoint:
    path: /admin/users/{userId}/teams
    method: GET
    data_selector: data
    params:
      email: any-user-email@example.com
- name: apps
  endpoint:
    path: /apps
    method: GET
    data_selector: data
    params: {}
- name: app_details
  endpoint:
    path: /apps/{projectId}
    method: GET
    data_selector: data
    params: {}
- name: app_keys
  endpoint:
    path: /apps/{projectId}/keys
    method: GET
    data_selector: data
    params: {}
- name: application_authorizations
  endpoint:
    path: /applicationAuthorizations
    method: POST
    data_selector: data
    params: {}
- name: Create App
  endpoint:
    path: /Create App
    method: POST
    data_selector: appId
    params: {}
- name: Update App
  endpoint:
    path: /Update App
    method: PUT
    data_selector: 204 Success
    params: {}
- name: list_all_apis
  endpoint:
    path: /api/endpoint/to/list/all/apis
    method: GET
    data_selector: apis
    params: {}
- name: users
  endpoint:
    path: admin/users
    method: GET
    params:
      limit: '5000'
- name: organizations
  endpoint:
    path: admin/organizations
    method: GET
    params:
      limit: '200'
      status: ACTIVE
- name: teams
  endpoint:
    path: organizations/{orgID}/teams
    method: GET
- name: apis
  endpoint:
    path: apis
    method: GET
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: calculatedStatistics
  endpoint:
    path: /calculatedStatistics
    method: POST
    data_selector: data.calculatedStatistics
    params:
      apiIds:
      - ''
      - api_04849dbb-4515-4dd3-899e-420e9af8076d
      - api_05433514-c272-4a59-a4f1-6cd281032c1a
      fromDate: '2022-12-06T08:06:18.548Z'
      toDate: '2023-01-05T08:06:18.549Z'
      resolution: days
- name: calculatedStatistics
  endpoint:
    path: /calculatedStatistics
    method: POST
    data_selector: data.calculatedStatistics
    params: {}
notes:
- This documentation applies to Enterprise Hub users as well as users of rapidapi.com.
- An API hub provides a centralized catalog for helping developers, product managers,
  IT, and API creators to find, manage, and connect to all APIs — using a single key
  and SDK.
- The RapidAPI Enterprise Hub is branded with a company’s identity and enables organizations
  to create new efficiencies, accelerating the software development process.
- RapidAPI supports all APIs, regardless of what gateways or API management solutions
  they use.
- When utilizing only third-party API gateways, monetization of an API is no longer
  available as a feature.
- Gateway Integrations connect existing tools in API Management ecosystem to RapidAPI
  Enterprise API Hub.
- The simplest deployment uses both the Rapid management plane and Rapid Runtime as
  a SaaS offering, managed by Rapid.
- APIs on rapidapi.com can be owned by individual users, or you can add your team
  as part of an organization.
- Gateway Integrations work by connecting the existing tools in your API Management
  ecosystem to the RapidAPI Enterprise API Hub.
- It is free to create a RapidAPI account.
- Changing your email address or password is only possible if your password is managed
  by RapidAPI. These options are not available for single sign-on options such as
  Login with Google.
- The API Provisioning implementation will involve more help from the RapidAPI team
  as there is more nuance in our customers requirements and integration points for
  this implementation.
- Account deletion is permanent and will result in loss of all data related to your
  account.
- Contact the API provider to ask them directly. API providers are the best resource
  of knowledge for their API.
- Test out the API yourself before subscribing to a paid plan.
- Currently, RapidAPI supports text message (SMS) or authenticator app verification.
- Many APIs will have a free BASIC plan available for this purpose.
- Emails are sent based on user actions on the Enterprise Hub.
- Emails are sent as users perform actions on the Enterprise Hub
- API provider may leave any previous versions of the API active.
- An older API version may be marked as deprecated.
- A lot of APIs have a BASIC free plan, which means you can use that plan to test
  the API for free as long as you stay within the quota limits.
- It is extremely important to know how close you are to the quota limit for your
  subscription.
- You must have an app on the RapidAPI Developer Dashboard to access an API key.
- If you delete the application you must re-create at least one application.
- Be careful about exposing your key if the link is publicly accessible.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- For Enterprise Hub customers, this page only applies if you are using the Rapid
  Runtime in your requests to API endpoints.
- To access the dashboard, simply login to your API Hub and select Apps in the top-right
  menu.
- 'App Specific API Keys Vs. Account-Wide Subscriptions: If you opt to have multiple
  projects under a single RapidAPI account, keep in mind that pricing is based on
  account-wide usage.'
- You can filter these analytics to only show certain APIs within the app.
- You can also choose to see endpoint specific analytics.
- Does not include periods with 0 calls
- If the total amount of an invoice is less than 50 US cents, then a charge to the
  credit card on file will not occur.
- Custom invoices require manual generation each month.
- The history list is stored in a browser cookie.
- Only the query and variables are saved in history.
- Minimum invoice amount is less than 50 US cents will not trigger a charge.
- Default option is to consume records from the beginning.
- Maximum value allowed is 100 records, which is also the default.
- The default option is to consume records from the beginning, but you can configure
  this to view records from the latest offset or records produced after a time you
  specify.
- The maximum value allowed is 100 records, which is also the default.
- Values such as user names, passwords, Client IDs, and Client Secrets are securely
  stored in Apps in entities called Authorizations.
- API consumers or organization admins can request OAuth2 credentials from an Environment
  Admin.
- RapidAPI Studio provides tools for teams that build and maintain complex APIs.
- Used if you own an API that has plans that require API consumers to request approval
  to use the plan.
- To view the requests, select the user or team that owns the API.
- If your API is configured to not use the Rapid Runtime, Announcements may not function
  as expected for your API.
- Ensure to manage API keys securely.
- Ensure to include the API key in the request header.
- 'Transformations work on the following targets: Header, Body, Query parameter, Form
  field.'
- For rapidapi.com users, all APIs are automatically configured to use the Rapid Runtime.
- The Gateway DNS value will automatically be set to rapidapi.com and cannot be changed.
- All APIs are automatically configured to use the Rapid Runtime.
- For security reasons, you should protect your API and block requests coming from
  outside the Rapid infrastructure.
- The Rapid Runtime adds an `X-RapidAPI-Proxy-Secret` header to every request. This
  header has a unique value for every API.
- Threat protection protects your API from SQL or JavaScript injection attacks.
- By default, threat protection is disabled for an API.
- Request schema validation uses the Rapid Runtime to protect your API from being
  sent query parameters and/or headers that are not defined in the API's specification.
- By default, request schema validation is disabled.
- You can specify a maximum allowed request size (less than or equal to the default
  value of 50 MB).
- You can specify a maximum allowed time for the Rapid Runtime to wait for a response
  from the API's gateway or hosting server (less than or equal to the default value
  of 180 seconds).
- API request/response logs can contain sensitive information such as personal identifiable
  information (PII), which you may not want Rapid's platform to save.
- You can add secret headers and/or query parameters to API requests.
- The Rapid Runtime adds an `X-RapidAPI-Proxy-Secret` header to every request.
- Transformations allow you to add, remap, or remove headers, query parameters, or
  bodies in API requests and API responses.
- 'Transformations work on the following keys: Header, Body, Form field, Query parameter.'
- You can select from Static, Variable, or Template for value types.
- Remapping a field in the body of the request to a new header.
- Headers sent to your API include X-RapidAPI-Proxy-Secret, X-RapidAPI-User, X-RapidAPI-Subscription,
  X-RapidAPI-Version, X-Forwarded-For, X-Forwarded-Host, and x-rapidapi-host.
- Custom Token feature is in private beta — contact RapidAPI support for access.
- This feature is available on Enterprise Hubs only (not rapidapi.com).
- Assets are available to any API consumer that has access to the API listing.
- Custom Token feature is in private beta — contact support to request access
- The custom token is sent as a secret header or parameter
- Users can be teams or individual users.
- Plans can be public or private.
- API consumers receive emails when they have reached 85% and 100% of quota for the
  month.
- Users will then be sent an email invitation and can click Accept Your Invitation
  in order to begin using the private plan.
- This feature is available via Studio and the GraphQL Platform API only.
- Free APIs do not require a developer to subscribe to your API on Rapid to use it.
- Free API plans are limited to 1000 requests per hour and 500K requests per month.
- You can disable or change a pricing plan at any time.
- Disabling a plan hides it from the API Hub so no new developers can subscribe to
  this plan.
- Each RapidAPI user gets a single, multi-API key, enabling quick setup and convenient
  management.
- Keep pricing clear and transparent from the beginning.
- API consumers will receive emails when they have reached 85% and 100% of quota for
  the month.
- API providers can create up to four public plans (named BASIC, PRO, ULTRA, and MEGA)
  per API.
- To create or edit a private plan for your API, you must access Studio and select
  the team that owns the API.
- Above 500K request per month, the minimum price per API call is $0.00003.
- Developers that were subscribed to the plan before it was disabled will remain subscribed
  to the original plan.
- Rapid takes a flat 20% marketplace fee on all payments made through the API Hub.
- Each payout on PayPal will include the name of the user, the name of the API plan
  the user has subscribed to, and the name of the API marketplace.
- Rapid alerts users via email when they reach their quota limits.
- In rare instances, a user may dispute a charge or initiate a chargeback.
- Rapid makes several attempts to collect a payment before failing and cancelling
  a user's subscription.
- Avoid additional key generation on your website.
- Rapid is a data processor under GDPR.
- Focus on being helpful first, promoting your API second.
- APIs represent contracts between API providers and consumers.
- Adding a new version of an API is only necessary when the provider wants to update
  the API in a way that breaks backward-compatibility.
- Rapid currently only pays out API providers via PayPal.
- Adding a GraphQL API is nearly the same process as adding a REST API.
- We do not refund any overage without your explicit permission.
- Rapid incorporates an industry-standard credit card verification and anti-fraud
  solution to prevent fraudulent charges.
- Rapid will make payouts to the API provider only when Rapid has received final payments
  from or on behalf of the user.
- This page is for informational purposes only and isn't a substitute for legal advice
  about your specific situation.
- RapidAPI allows you to publish Kafka APIs on the API Hub.
- Developers can discover Kafka topics and explore topic schemas and configurations.
- Under GDPR, Rapid is a data processor.
- If you need to have Rapid sign a DPA with your company, please contact us at gdpr@rapidapi.com.
- Tutorials help developers understand how to use the API.
- Markdown is supported in the Tutorial Content section.
- Analytics for API providers is available through Studio (My APIs)
- Consumer analytics is available via the Developer Dashboard (Apps)
- Admin analytics can be found on the Admin Panel and can be obtained using the GraphQL
  Platform API
- Currently, RapidAPI supports the Topic Name strategy as the Subject Name Strategy.
- Some objects may return nulls in deeply nested fields
- Spotlights are publicly accessible
- Enterprise Hubs can be configured to not use Spotlights.
- If you have a custom DNS your setup might be slightly different, please contact
  your technical account manager if you are not sure how to proceed.
- If your API already has access logs in a different format your setup might be slightly
  different, please contact customer support if you are not sure how to proceed.
- Apigee does not call the postflow steps when an error is returned from the service.
- If you API already has access logs in a different format your setup might be slightly
  different, please contact customer support if you are not sure how to proceed.
- This feature is currently in preview and may experience issues.
- By default, logs sent are anonymous
- Requests support the ability to store cookies in an entity called a Session.
- You can delete a variable by selecting the three vertical dots to the right of the
  variable and selecting Delete.
- The X-RapidAPI-Key is a header that is used to authenticate requests to Rapid APIs.
- The APP ID can be found in the Developer Dashboard (My Apps).
- Requests is a web-based API client that enables you to create, modify, and send
  API Requests.
- Changes made in Requests are automatically synced to your Rapid cloud account.
- By default, a session called Default Session is created in your Main branch.
- You can add another session in the session management dialog.
- Updated 3 months ago
- API key required for access
- API key required for access.
- API requires authentication via OAuth2.
- Some sub-tabs may not be populated if there is no data of that sub-tab type in the
  response.
- An Environment is a context created in RapidAPI to simplify running the same test
  on different deployments.
- Environment variables are not scoped to a specific test but are available for all
  the tests in an API Project.
- Tests are made from a series of steps. If one step fails in a test, the entire test
  fails.
- Environment variables can be used in multiple API tests.
- Test variables are defined per test and can only be used within the test they belong
  to.
- Each test you create will have test-specific settings you can edit, including timeout.
- Please note that with frequency less than 2000 ms, you may get 429 (rate limiting)
  errors.
- Learn how to validate JSON Schema, chain requests, loop over results, set variables,
  execute custom code in a test, use JSON Web Tokens (JWT), and create fake data in
  tests.
- Chaining requests can help create complex tests that validate the full functionality
  of the API.
- You can build custom tests using the Visual Editor.
- The ability to run code at any point within your test definition already gives you
  a lot of flexibility to manipulate data, get the current date, etc.
- 'Current allowed libraries are listed below: assert, crypto'
- Each test you create will have test-specific settings you can edit
- You can edit the test's execution and default HTTP request timeouts (in seconds)
- JWT Encode step allows you to encode a sample user's information.
- JWT Decode step allows you to decode a JWT token and verify user information.
- You can execute tests locally by installing Rapid Testing workers on your machine.
- 'Faker Generate supports multiple categories of fake data including: name, address,
  company, images, phone number, date, time, and more.'
- Frequency less than 2000 ms may result in 429 (rate limiting) errors.
- API monitoring is the practice of observing the performance, availability, and accuracy
  of your APIs over time.
- You can schedule a test to reoccur at regular intervals to monitor the API's performance
  over time.
- Daily email summaries to an organization will send a daily email summary to every
  member of that organization.
- Toggling on the 'Retry on failure' input number times will cause the test to automatically
  re-execute, the inputted number of times, after the first failure.
- You can create SMS alerts to notify you when your API project's test(s) encounters
  or recovers from an error.
- International country codes are supported.
- You might be using JSON Web Tokens (JWT) as part of the authentication process in
  your API.
- Redirects are blocked in webhook alerts
- The test trigger webhook is asynchronous.
- Using triple brackets for JSON data ensures that the JSON payload does not get interpreted
  as an HTML entity.
- We need to do this through a POST request (not a GET request) because we need to
  include a payload with the overrides information.
- You can schedule a test to reoccur at regular intervals.
- Select a specific test environment.
- Select one or more locations for your tests to run on.
- You can configure the test retry and alerts in the Failures & Alerts section of
  your API Project's Testing Settings. Since these configurations are made at the
  API Project level, they will apply to every test within the API Project.
- There are multiple ways to view analytics for your tests and API performance.
- You can view test-specific analytics from the Analytics page under the specified
  test.
- This is used to discover if your API is passing the test and meeting your uptime
  SLAs.
- Admins can customize the Organization Homepage
- The Testing Dashboard helps get a holistic overview of your API by including analytics
  for every test in your API Project.
- The Performance graph is used to discover large or slow requests that may be bottlenecking
  the responsiveness of your API.
- An organization is an entity in an Enterprise Hub or on rapidapi.com that contains
  one or more teams.
- To import from GitHub, you must log into GitHub as an admin and provide the read:org
  and user:email scopes.
- You do not need a credit card on file if you are creating an Organization with 5
  or fewer seats.
- Billing is based on the total number of seats (RapidAPI User Accounts) within the
  Organization.
- To create a team, click the Create new Team button on the right side of the Manage
  Teams screen.
- Bulk team member import is available to add more than one team member at a time.
- The number of users you can add to an organization or team is currently uncapped.
- The first five users in an organization are free, and every additional seat is $10
  per month.
- The number of organizations or teams you can create is currently uncapped.
- Custom collections show up above standard team collections. Admins can order the
  custom collections by dragging the rows up or down in the collections table.
- Your Organizations billing information will be used to pay for the number of seats
  utilized (free for the first 5 seats, then $10 for each additional seat), as well
  as any API subscriptions your Organization uses.
- The Transactions tab is mostly related to teams on rapidapi.com.
- Enterprise Hub customers who monetize their APIs would also use this tab.
- Active Directory Integration allows automation of user management.
- Currently, our payment system only supports payouts through PayPal. Adding a PayPal
  account is only necessary if you publish freemium or paid APIs for public consumption
  as an organization.
- Logs include organization-related audit actions with timestamps
- Requests must be approved by admins before you are added to the Organization.
- This feature must be enabled by an Admin on the Organization Settings page.
- Allows org admins to create and manage teams.
- Bulk team member import is available.
- Environment Admin's link to the Admin Panel
- Admins can order the custom collections by dragging the rows up or down in the collections
  table.
- Your Enterprise Hub configuration may be different
- Audit Trails tab only lists logs for changes made in the Admin Panel by environment
  admins.
- You must add a callback URL to begin seeing events
- The purpose of the secret key is to ensure that the request is coming from your
  RapidAPI Enterprise Hub
- If you delete the organization, all of the teams, team-created apps, and team-created
  APIs will be deleted permanently.
- Requires setup of environment administrator access
- APIs can only have a single API category assigned to it.
- The Transactions tab is only relevant if you are utilizing the monetization functionality
  of the RapidAPI platform.
- Each API gateway configured in Rapid has a Status. While in use, the gateway's Status
  is set to 'Active'.
- This page is unofficial and unsupported. Consult the Amazon API Gateway documentation
  for more information.
- Remember to deploy your API after making changes in Amazon API Gateway.
- CORS error messages are only displayed in the browser's console. Make sure to check
  there for error messages.
- The response must include the Access-Control-Allow-Origin response header with the
  value set to your Enterprise Hub URL.
- An Environment Admin can customize HTML title and meta tags for most pages.
- Users are uniquely identified by email address.
- 'A user can have one of four statuses: ACTIVE, DEACTIVATED, DELETED, PENDING.'
- As an environment admin, you can delete users in your environment using the main
  Users tab.
- Impersonation enables the environment admin to imitate the behavior and actions
  of another user of the platform.
- With invoice billing, Rapid will not process billing. You will be responsible for
  processing payment on these invoices.
- If you do not see the Stripe feature on your Enterprise Hub, contact your Rapid
  representative to enable it.
- Use the Organizations tab of the Admin Panel to search for and view details of organizations
  in the Hub.
- The search box at the top can be used to search by organization name or by an email
  address of an organization administrator.
- Roles specify what users can see and do in the Hub given certain contexts.
- Roles in RapidAPI enable your enterprise to specify fine-tuned control over things
  like performing administrative tasks, creating organizations and creating APIs.
- All login methods except email and password are used by enterprises to achieve single
  sign-on (SSO) for their users.
- To not use the hosted Rapid Runtime in API requests, an Environment Admin uses the
  API Gateways tab of the Admin Panel to configure one or more API gateways.
- Each API gateway configured in Rapid has a Status.
- A gateway may only be edited when it is inactive.
- Must be enabled on your Enterprise Hub.
- You can't host your API Hub at the root of a domain, only subdomains.
- Include 'Access-Control-Allow-Origin' response header with the value set to your
  Enterprise Hub URL
- Because of the way DNS works, it can take a while before it's possible to verify
  that you've created the DNS records correctly.
- This process normally only takes a few minutes, and rarely takes more than an hour
  if you've created the records correctly, soon after starting the Custom Domain creation
  flow.
- It's extremely unlikely to take longer than 24h.
- An Environment Admin can add or modify HTML tags for most pages in the Enterprise
  Hub.
- You will be responsible for processing payment on these invoices.
- Restricting Access to Publishing APIs & Subscribing to APIs
- Uses role-based access control to define user permissions.
- Environment Admins can create different roles of each role type and select the permissions
  that apply to each role.
- The Platform API is for Enterprise Hub customers only.
- New users are automatically given the default role unless otherwise specified.
- Environment Administrators are not automatically members of organizations.
- Multiple login options can be configured for users.
- Email and password login method is managed by Rapid.
- Make sure you do not have a popup blocker enabled.
- Must be enabled - This feature may need to be enabled on your Enterprise Hub.
- You can't host your API Hub at the 'root' of a domain.
- This process normally only takes a few minutes, and rarely takes more than an hour
  if you've created the records correctly.
- It's extremely unlikely to take longer than 24h. If that happens, start over, or
  contact support.
- Requires valid values for url, x-rapidapi-host, x-rapidapi-key, and apiId in the
  variables.
- To restrict access to publishing & subscribing to APIs, you can use the API Publishing
  Approval feature.
- The GraphQL Platform API is available only to Enterprise Hub customers.
- To create an API in a team context, you must include the x-rapidapi-identity-key
  header parameter.
- Hub pages can be translated and localized by browsers with built-in translators.
- The GraphQL Platform API can be used to automate many processes related to the Enterprise
  Hub.
- An environment admin can update any API using their personal account.
- The team that owns the API must have access to the GraphQL Platform API.
- API requires a valid apiId for queries.
- Uses environment variables for sensitive keys.
- To create an API in a team context, include the x-rapidapi-identity-key header parameter.
- An environment admin can update any API on the Hub using their personal account
  as the calling context.
- Set ADMIN_PERSONAL_KEY and API_OWNER_KEY as environment variables.
- Creating a SOAP API without a WSDL file is possible by using a simple WSDL and replacing
  it later.
- For security reasons, the GraphQL Platform API host and API key are stored in environment
  variables.
- External custom IDs are available programmatically using the REST and GraphQL Platform
  APIs.
- By default, they are not shown in Rapid's user interfaces.
- Environment Admin from personal account — must execute query from personal account,
  not a team account.
- For security reasons, API keys and IDs are stored in environment variables.
- To update environment variables in GitLab, go to Project > Settings > CI/CD > Variables.
- The date range can not be larger than 31 days.
- Data is only available for the most recent 90 days.
- There will be a limitation of 10 successful calls to `generateFile` per calendar
  month.
- Once a file is generated, it is available to be downloaded for a period of 5 days.
- Additional consideration is needed to allow using this process in conjunction with
  API plans that include hard limits.
- Currently, you must execute this query from your Personal Account (not a team account).
- This query only works for the current user. You currently can not list another user's
  apps using this query.
- There will be a limitation of 10 successful calls to generateFile per calendar month.
- Requires enterprise access to the platform API
- Requires X-RapidAPI-Key from a team with enterprise access to the platform API.
- Requires setup of connected app in API
- Users need no access to the Platform API to read apps and authorizations
- Requires enterprise access for specific user.
- Delete authorization after creation if configured.
- Uses on-behalf-of functionality of the REST Platform API.
- Requires setup of connected app in api
- Uses on-behalf-of functionality
- To query by a user's email, include the email in the variable.
- To query by a user's user name, include the username in the variable.
- To query by one or more user id, include userIds in the variable.
- This user's personal API key must be specified in the x-rapidapi-identity-key header.
- Creating an organization will automatically create a default team, a default app
  for that team, and a special type of subscription of type SEATS for the organization.
- Some queries require the user to be an Environment Admin.
- Only organizations in which the Personal Account key is an org admin will be returned.
- The calculatedStatistics query is usually recommended for extracting aggregated
  API call volume, errors, and latency.
- Logins using a browser cookie are not listed in the audit log.
- On-behalf-of functionality is not currently implemented in the GraphQL Platform
  API.
- Currently, the GraphQL Platform API is limited to 10 requests per minute per user.
  You will receive a 429 Too Many Requests response if you exceed this limit. Your
  code should include retry attempts to account for this rate limit.
- Only one query or mutation per request is currently supported.
- It is highly recommended that enterprise customers use the GraphQL Platform API
  instead of the REST Platform API.
- To use (Environment Admin) endpoints or other environment admin functionality, you
  must be in a context that has Enterprise Access to the Platform API.
- Currently, the GraphQL Platform API is limited to 10 requests per minute per user.
- Enterprise Hub customers only
- It is highly recommended that enterprise customers use the GraphQL Platform API
  instead of the REST Platform API
- Use the second endpoint above if you have environment admin access to the Platform
  API and want to create an API on behalf of another entity.
- Endpoints require Environment Admin Access to the Platform API.
- Deleting an API is permanent and cannot be undone.
- Deleting a collection is not reversible.
- Endpoints for creating, updating, and deleting collections require Environment Admin
  Access to the Platform API.
- You must have Enterprise Access to the Platform API to use the 'on-behalf-of' functionality.
- If you are calling an endpoint, such as Get All Teams, on-behalf-of of an org admin,
  that org admin must have their Personal Context enabled.
- If you are calling an endpoint on-behalf-of an org admin, that org admin must have
  their Personal Context enabled.
- If you don't see that optional header, please contact your Rapid representative.
- The Get all App Keys endpoint currently is used only to obtain X-RapidAPI-Key values.
- Uses RapidAPI with user credentials to make requests
- Requires user to have enterprise access to the platform API
- Admin access required for creating or updating apps on behalf of other users or
  teams.
- on-behalf-of header is optional and requires admin access.
- GraphQL Platform API updated to include queries for aggregate metrics.
- New example of GitLab integration with Enterprise Hub.
- Enterprise Hub customers can monetize APIs using their own Stripe account.
- Currently, you must use the GraphQL Platform API to create an authorization within
  an app.
- If you host your own login button to the Enterprise Hub, previously by default the
  logged in user will be taken to the /hub page. We have added the ability to directly
  log in to other pages, such as the Organization Homepage or the Developer Dashboard
  (Apps), using the referral URL query parameter in the button's link.
- If your enterprise would prefer to bill API consumers using your existing billing
  system, Rapid makes it easy for you to export subscription and usage data as CSV
  files.
- For environment admins, the user experience has been improved for configuring and
  enabling login options (such as Okta login) on your Enterprise Hub.
- The example is provided 'as is' and is not supported by Rapid's support team.
- All Enterprise Hub documentation has moved to docs.rapidapi.com.
- Links to documents on enterprise-docs.rapidapi.com will continue to work and will
  automatically resolve to the associated page on docs.rapidapi.com.
- GraphQL APIs that are listed on the hub use a new API playground.
- The GraphQL Platform API and documentation has been updated to include queries that
  Environment Admins can use to programmatically read aggregate metrics from an Enterprise
  Hub.
- The GraphQL Platform API and documentation have been updated to include queries
  related to obtaining single API and aggregate API request analytics from API consumer,
  API provider, and/or admin perspectives.
- Enterprise Hub customers now have the option to monetize APIs on their Enterprise
  Hub using their own Stripe account.
- An exciting new beta feature called Search Term Insights is available in Enterprise
  Hubs.
- The GraphQL Platform API has been updated to include more queries and mutations.
- During September of 2023, configuring additional API security (such as OAuth) will
  move from the Hub Listing > Gateway tab of Studio to the Hub Listing > Definitions
  > Security tab.
- If you host your own login button to the Enterprise Hub, previously by default the
  logged in user will be taken to the /hub page.
- We have added the ability to directly log in to other pages using the referral URL
  query parameter.
- Added the ability of environment admins to deactivate and reactivate users.
- Improved association of custom API ID with Rapid's API ID.
- SOAP APIs now support multiple versions.
- API providers can now choose to require API consumers to DocuSign a contract before
  allowing them to subscribe to an API plan.
- APIs now support authorizations of type BEARER.
- Studio includes a new Docs tab (inside the Hub Listing menu) with a visual editor
  that can be used to add README information to the About tab of an API's listing.
- Support for Header and Basic authentication for API Access Provisioning (Preview).
- Support for the WS-Federation login method.
- New GraphQL API that provides access to API traffic metrics.
- Configuring additional API security (such as OAuth) has moved to the Definitions
  > Security tab.
- Requires an API key for access
- Configuring additional API security (such as OAuth) will move from the Hub Listing
  > Gateway tab of Studio to the Hub Listing > Definitions > Security tab.
- APIs now support OAuth2 password grant types.
- Hub Static Asset Management enabled for sharing static assets with API consumers.
- RapidAPI Studio is now in General Availability (GA).
- API Key required for access.
- Results can be narrowed down by API, Endpoint, App.
- 'API OAuth Flow: Fixed an issue where an error would occur after trying to list
  an API that uses OAuth2 client credentials.'
- Results can be narrowed down by API, Endpoint, App
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 bad request: Usually returned when a request is invalid or contains a body
  with a non-acceptable Content-Type header.'
- '413: Returned if a request exceeds the configured request size limit.'
- '504: Returned if the response takes longer than the specified timeout value.'
- '400: bad request'
- '413: Request size exceeds limit'
- '504: Gateway Timeout'
- '429 Too Many Requests: Exceeding rate limit.'
- '429 Too Many Requests: If an API consumer exceeds the limits.'
- '429 Too Many Requests: If API consumers exceed the rate limit.'
- '429 Too Many Requests: Rate limit exceeded.'
- Forgiveness request
- Disputes and Chargebacks
- Failed payments
- Rapid error
- If you think there is a processing error on our side, reach out to support at <https://support.rapidapi.com/>
  and we will investigate the issue and come to a fair resolution.
- fault.name = 'ErrorResponseCode'
- '200 OK: Response received successfully'
- 'ErrorResponseCode: Check the API response for details.'
- '401 Unauthorized: Check your API key.'
- This action will fail the test
- On Error alerts are sent after a selected number of consecutive test failures (including
  retries).
- To help reduce alert fatigue you can set a limit to the frequency of On Error alerts
  during a failure state.
- An On Recovery alert is sent when a test recovers from a failure.
- On Recovery alerts are only active when the 'Send alert when a test recovers' option
  is toggled on.
- An On Success (webhook only) alert is sent each time a test is successful.
- On Success alerts are only active when the 'Send alert on a successful test result'
  option is toggled on.
- Cannot disable the last login option that is enabled.
- '401 Unauthorized: Ensure X-RapidAPI-Key is valid.'
- '404 Not Found: Check the API ID.'
- '401 Unauthorized: Recheck API keys or permissions'
- '401 Unauthorized: Ensure the API key is valid.'
- 'LimitExceeded: When the limit of successful calls to `generateFile` is exceeded.'
- '401 Unauthorized: Must be an Environment Admin from a Personal Account.'
- 'REQUEST_LIMIT_EXCEEDED: Limit of 10 successful calls to generateFile per calendar
  month exceeded.'
- 'INVALID_DATE_RANGE: The date range must not be larger than 31 days.'
- '404 Not Found: User not found'
- '401 Unauthorized: Invalid API key'
- '401 Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Ensure valid API key in the header'
- '403 Forbidden: Check your access rights for the API.'
- '404 Not Found: Ensure the endpoint is correct.'
- '429 Too Many Requests: Exceeding the limit of 10 requests per minute per user.'
- '429 Too Many Requests: Your code should include retry attempts to account for this
  rate limit.'
- '404 Not Found: Check the endpoint path and parameters'
- '400 Bad Request: Verify the request body and parameters'
- '401 Unauthorized: Ensure correct authentication headers are provided'
- '204 Success: Update successful.'
- '401 Unauthorized: Ensure valid API key and permissions.'
- '403 Forbidden: API key is invalid or not authorized'
- '400 Bad Request: Check query syntax or variable values.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Environment Admin
  - OAuth2 credentials
  - Authorization
  - Client ID
  - Client Secret
  - OAuth2
  - OAuth 1
  - HTTP Basic Auth
  - HTTP Token Auth
  - HMAC Signature
  - Consumer Key
  - Consumer Secret
  - Token
  - Token Secret
  - Signature Method
  - Authorization URL
  - Access Token URL
  - Callback URL
  - Scope
  - Refresh Token
  - Token Prefix
  - Email
  - SMS
  - Webhooks
  - Redirect URL
  - Identity Provider Metadata
  - Single Sign On URL
  - EntityId
  - ADFS token signing certificate
  - x-rapidapi-identity-key
  - ProjectACLs
  - ProjectCreateInput
  - user
  - team
  - project
  - User
  - Project
  - AppAuthorizationCreateInput
  - UserWhereInput
client:
  base_url: https://rapidapi.com
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
