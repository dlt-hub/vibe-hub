resources:
- name: account
  endpoint:
    path: /api/account
    method: GET
    data_selector: data
- name: employees
  endpoint:
    path: /api/employees
    method: GET
    data_selector: data
- name: companies
  endpoint:
    path: /api/companies
    method: GET
    data_selector: data
    params: {}
- name: company_details
  endpoint:
    path: /api/companies/:id
    method: GET
    data_selector: data
    params: {}
- name: create_company
  endpoint:
    path: /api/companies
    method: POST
    data_selector: data
    params: {}
- name: update_company
  endpoint:
    path: /api/companies/:id
    method: PUT
    data_selector: data
    params: {}
- name: account
  endpoint:
    path: /api/account
    method: GET
    data_selector: data
- name: employees
  endpoint:
    path: /api/employees
    method: GET
    data_selector: data
- name: court_cases
  endpoint:
    path: /api/court_cases
    method: GET
    data_selector: data
    params: {}
- name: court_case
  endpoint:
    path: /api/court_cases/:id
    method: GET
    data_selector: data
    params: {}
- name: courts
  endpoint:
    path: /api/courts
    method: GET
    data_selector: data
    params: {}
- name: court
  endpoint:
    path: /api/courts/:id
    method: GET
    data_selector: data
    params: {}
- name: jobs
  endpoint:
    path: /api/jobs
    method: GET
    data_selector: jobs
    params: {}
- name: companies
  endpoint:
    path: /api/companies
    method: GET
    data_selector: data
- name: company
  endpoint:
    path: /api/companies/:id
    method: GET
    data_selector: data
- name: create_company
  endpoint:
    path: /api/companies
    method: POST
    data_selector: data
- name: update_company
  endpoint:
    path: /api/companies/:id
    method: PUT
    data_selector: data
- name: jobs
  endpoint:
    path: /api/jobs/:id
    method: GET
    data_selector: data
- name: job
  endpoint:
    path: /api/jobs
    method: POST
    data_selector: data
    params: {}
- name: jobs
  endpoint:
    path: /jobs
    method: POST
    data_selector: data
- name: court_cases
  endpoint:
    path: /api/court_cases
    method: GET
    data_selector: data
    params: {}
- name: court_case_details
  endpoint:
    path: /api/court_cases/:id
    method: GET
    data_selector: data
    params: {}
- name: create_court_case
  endpoint:
    path: /api/court_cases
    method: POST
    data_selector: data
    params: {}
- name: courts
  endpoint:
    path: /api/courts
    method: GET
    data_selector: data
    params: {}
- name: court_details
  endpoint:
    path: /api/courts/:id
    method: GET
    data_selector: data
    params: {}
- name: create_court
  endpoint:
    path: /api/courts
    method: POST
    data_selector: data
    params: {}
- name: jobs
  endpoint:
    path: /api/jobs
    method: GET
    params: {}
- name: job
  endpoint:
    path: /api/jobs/:id
    method: GET
    data_selector: data
- name: uploads
  endpoint:
    path: /api/jobs/:id/uploads
    method: POST
    data_selector: data
    params: {}
- name: notes
  endpoint:
    path: /api/jobs/:job_id/notes
    method: POST
    data_selector: data
    params: {}
- name: get_notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: data
    params: {}
- name: jobs
  endpoint:
    path: /api/jobs
    method: POST
    data_selector: data
- name: jobs
  endpoint:
    path: /api/jobs
    method: POST
    data_selector: data
- name: attempts
  endpoint:
    path: /api/attempts
    method: GET
    data_selector: data
    params: {}
- name: attempt_details
  endpoint:
    path: /api/attempts/:id
    method: GET
    data_selector: data
    params: {}
- name: create_attempt
  endpoint:
    path: /api/jobs/:job_id/attempts
    method: POST
    data_selector: data
    params: {}
- name: update_attempt
  endpoint:
    path: /api/attempts/:id
    method: PUT
    data_selector: data
    params: {}
- name: delete_attempt
  endpoint:
    path: /api/attempts/:id
    method: DELETE
    data_selector: data
    params: {}
- name: invoices
  endpoint:
    path: /api/invoices
    method: GET
    data_selector: data
    params: {}
- name: create_invoice
  endpoint:
    path: /api/jobs/:id/invoices
    method: POST
    data_selector: data
    params: {}
- name: update_invoice
  endpoint:
    path: /api/invoices/:id
    method: PUT
    data_selector: data
    params: {}
- name: uploads
  endpoint:
    path: /api/jobs/:id/uploads
    method: POST
    data_selector: data
    params: {}
- name: notes_for_job
  endpoint:
    path: /api/jobs/:job_id/notes
    method: GET
    data_selector: data
    params: {}
- name: all_notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: data
    params: {}
- name: job_payload_events
  endpoint:
    path: /webhooks/job_payload_events
    method: GET
    data_selector: webhook_payload
- name: note_payload_events
  endpoint:
    path: /webhooks/note_payload_events
    method: GET
    data_selector: webhook_payload
- name: webhook
  endpoint:
    path: /api/webhooks
    method: GET
    data_selector: data
    params: {}
- name: job
  endpoint:
    path: /api/jobs
    method: GET
    data_selector: data
    params: {}
- name: note
  endpoint:
    path: /api/notes
    method: GET
    data_selector: data
    params: {}
- name: attempts
  endpoint:
    path: /api/attempts
    method: GET
    data_selector: data
- name: attempt_detail
  endpoint:
    path: /api/attempts/:id
    method: GET
    data_selector: data
- name: create_attempt
  endpoint:
    path: /api/jobs/:job_id/attempts
    method: POST
    data_selector: data
- name: update_attempt
  endpoint:
    path: /api/attempts/:id
    method: PUT
    data_selector: data
- name: delete_attempt
  endpoint:
    path: /api/attempts/:id
    method: DELETE
- name: invoices
  endpoint:
    path: /api/invoices
    method: GET
    data_selector: data
    params: {}
- name: webhook_payload
  endpoint:
    path: /webhook/payload
    method: POST
    data_selector: payload
    params: {}
- name: note
  endpoint:
    path: /notes
    method: GET
    data_selector: data
    params: {}
- name: job
  endpoint:
    path: /jobs
    method: GET
    data_selector: data
    params: {}
- name: features
  endpoint:
    path: /api/features
    method: GET
    data_selector: features
    params: {}
- name: pricing
  endpoint:
    path: /api/pricing
    method: GET
    data_selector: pricing
    params: {}
- name: support
  endpoint:
    path: /api/support
    method: GET
    data_selector: support
    params: {}
- name: user
  endpoint:
    path: /api/v1/user
    method: GET
    data_selector: data
    params: {}
- name: Login
  endpoint:
    path: /login
    method: POST
notes:
- SSL is required for all requests.
- 'Content-Type: application/json must be set for POST, PUT, PATCH methods.'
- 'Ensure Content-Type header is being set. POST and PUT requests will fail with status
  406 if header is not Content-Type: application/json.'
- Any other value causes a 409 CONFLICT error.
- Uses API key for authentication.
- Must use 'misc_attachment', 'document_to_be_served' or 'attachment' types for uploads
- Visibility defaults to account settings if not specified
- type MUST be equal to 'job'. Any other value causes a 409 CONFLICT error.
- API key is required for authentication.
- Pagination may be utilized for retrieving invoices.
- Must use 'type' of 'note' for notes creation.
- Visibility can be 'client' and/or 'server'.
- Webhook events may not be received in real-time.
- Pagination may be utilized for the attempts endpoint.
- SOC 2 compliant
- Data is backed up daily
- Pagination may be utilized here.
- Job subscribed events webhook payload data is similar to the jobs payload API data.
- Note subscribed events webhook payload data is structured separately from jobs.
- Requires API key from ServeManager
- Webhooks are triggered for various events related to jobs and attachments.
- ServeManager is cloud-based software that runs in your browser.
- The mobile app allows you to record GPS data captured by your phone.
- ServeManager is being provided on the basis you initially elect (e.g., currently
  month-to-month but annual contracts may be available).
- ServeManager and the Services are provided 'AS-IS'.
- ServeManager is SOC 2 compliant, reinforcing commitment to security.
- All requests are transmitted over a secure HTTPS connection.
- Users' passwords are stored with bcrypt and are unrecoverable.
- Daily database backups are archived in perpetuity.
- Documents uploaded are protected by server-side encryption.
- Uses OAuth2 with refresh token â€” requires setup of connected app in InfoTrack
- ServeManager is provided on an 'AS-IS' basis.
- No technical support is guaranteed.
- ServeManager makes no representations or warranties regarding the accuracy or suitability
  of the affidavits generated within the system for your use.
- Users of ServeManager must exercise due diligence in selecting the correct affidavit
  template for their specific legal proceedings.
errors:
- 401 - Unauthorized (API key not recognized)
- '406 - Not Acceptable (ensure HTTP header ''Content-Type: application/json'')'
- 401 - Unauthorized (API key not recognized. Ensure API key is HTTP Auth username,
  password empty, and value is base64 encoded)
- '409 CONFLICT: Any other value causes a 409 CONFLICT error.'
- '409 CONFLICT: Invalid type provided for upload'
- Required fields are missing in the request
- '409 CONFLICT: Invalid type value provided.'
- '404 Not Found: Check the endpoint path or resource ID.'
- '500 Internal Server Error: Try again later or contact support.'
- '409 CONFLICT: If type is not equal to ''attempt''.'
- '404 Not Found: If the attempt does not exist.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://www.servemanager.com/
  auth:
    type: apikey
source_metadata: null
