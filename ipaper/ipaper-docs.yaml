resources:
- name: Paper
  endpoint:
    path: /paper
    method: GET
    data_selector: papers
    params: {}
- name: ipd_load
  endpoint:
    path: /analytics/ipd_load
    method: GET
    data_selector: Url
- name: ipd_time_spent
  endpoint:
    path: /analytics/ipd_time_spent
    method: GET
    data_selector: Duration
- name: ipd_button_click
  endpoint:
    path: /analytics/ipd_button_click
    method: GET
    data_selector: ActionUrl
- name: ipd_image_click
  endpoint:
    path: /analytics/ipd_image_click
    method: GET
    data_selector: ActionUrl, AssetUrl
- name: ipd_product_click
  endpoint:
    path: /analytics/ipd_product_click
    method: GET
    data_selector: Id, ActionUrl
- name: ipd_video_click
  endpoint:
    path: /analytics/ipd_video_click
    method: GET
    data_selector: ActionUrl, AssetUrl
- name: ipd_video_start
  endpoint:
    path: /analytics/ipd_video_start
    method: GET
    data_selector: ActionUrl, AssetUrl
- name: ipd_video_played_25_percent
  endpoint:
    path: /analytics/ipd_video_played_25_percent
    method: GET
    data_selector: ActionUrl, AssetUrl
- name: ipd_video_played_50_percent
  endpoint:
    path: /analytics/ipd_video_played_50_percent
    method: GET
    data_selector: ActionUrl, AssetUrl
- name: ipd_video_played_75_percent
  endpoint:
    path: /analytics/ipd_video_played_75_percent
    method: GET
    data_selector: ActionUrl, AssetUrl
- name: ipd_video_played_100_percent
  endpoint:
    path: /analytics/ipd_video_played_100_percent
    method: GET
    data_selector: ActionUrl, AssetUrl
- name: Display instance
  endpoint:
    path: /display
    method: GET
    data_selector: instance
- name: Display call-to-action button
  endpoint:
    path: /showButton
    method: GET
    data_selector: button
- name: events
  endpoint:
    path: /flipbook-analytics/event-tracking-by-adobe-analytics
    method: GET
    data_selector: events
    params: {}
- name: event_tracking
  endpoint:
    path: /flipbook-analytics/events-tracked-by-google-analytics-and-tag-manager
    method: GET
    data_selector: events
    params: {}
- name: GetFlipbookOrdersByType
  endpoint:
    path: /flipbook-backend-api/ecommerce/get-orders-for-flipbook
    method: GET
- name: GetLicenseOrdersByType
  endpoint:
    path: /flipbook-backend-api/ecommerce/get-orders-for-license
    method: GET
- name: flipbook_orders
  endpoint:
    path: /flipbook-backend-api/ecommerce/get-orders-for-flipbook
    method: GET
    data_selector: data.flipbooks
    params:
      paperId: string
      checkoutType: string
- name: license_orders
  endpoint:
    path: /ecommerce/get-orders-for-license
    method: GET
    data_selector: data.flipbooks
    params:
      checkoutType: ''
- name: GetImageWith2PxDropShadow
  endpoint:
    path: /flipbook-backend-api/image/get-image-with-2px-drop-shadow
    method: GET
    data_selector: records
    params: {}
- name: GetImageWith2PxDropShadow
  endpoint:
    path: /flipbook-backend-api/image/get-image-with-2px-drop-shadow
    method: GET
    data_selector: result
    params:
      pageID: ''
      imageType: ''
- name: GetLinks
  endpoint:
    path: /flipbook-backend-api/link/get-links
    method: GET
- name: GetImageWith2PxDropShadow
  endpoint:
    path: /flipbook-backend-api/image/get-image-with-2px-drop-shadow
    method: GET
- name: links
  endpoint:
    path: /flipbook-backend-api/link/get-links
    method: GET
    data_selector: data.root.link
    params:
      paperID: ''
- name: CreateDirectory
  endpoint:
    path: /flipbook-backend-api/media/create-directory
    method: POST
- name: DeleteDirectory
  endpoint:
    path: /flipbook-backend-api/media/delete-directory
    method: DELETE
- name: DeleteFile
  endpoint:
    path: /flipbook-backend-api/media/delete-file
    method: DELETE
- name: GetTree
  endpoint:
    path: /flipbook-backend-api/media/get-tree
    method: GET
- name: UploadFile
  endpoint:
    path: /flipbook-backend-api/media/upload-file
    method: POST
- name: CreateDirectory
  endpoint:
    path: /flipbook-backend-api/media/create-directory
    method: POST
    data_selector: data
    params:
      parentID: '0'
      name: name
- name: DeleteDirectory
  endpoint:
    path: /flipbook-backend-api/media/delete-directory
    method: DELETE
    data_selector: result
    params:
      directoryID: The ID of the directory to delete
- name: DeleteFile
  endpoint:
    path: /flipbook-backend-api/media/delete-file
    method: DELETE
    data_selector: result
    params:
      fileID: The ID of the file to delete
- name: get_tree
  endpoint:
    path: /flipbook-backend-api/media/get-tree
    method: GET
    data_selector: data
- name: upload_file
  endpoint:
    path: /flipbook-backend-api/media/upload-file
    method: POST
    data_selector: data
    params:
      parentID: '0'
      name: uploaded_file_name
      base64File: base64_encoded_file_contents
- name: GetAllPapers
  endpoint:
    path: /flipbook-backend-api/paper/get-all-papers
    method: GET
- name: CreatePaper
  endpoint:
    path: /flipbook-backend-api/paper/create-paper
    method: POST
- name: DeletePaper
  endpoint:
    path: /flipbook-backend-api/paper/delete-paper
    method: DELETE
- name: ChangePaperUrl
  endpoint:
    path: /flipbook-backend-api/paper/change-paper-url
    method: POST
    data_selector: result
    params: {}
- name: clear_publication_period
  endpoint:
    path: /flipbook-backend-api/paper/clear-publication-period
    method: POST
    data_selector: result
    params:
      paperID: The ID of the Flipbook whose publication period should be changed
- name: CreateCategory
  endpoint:
    path: /flipbook-backend-api/paper/create-category
    method: POST
    data_selector: result.data
    params:
      paperID: The ID of the iPaper whose publication period should be changed
      name: The name of the new category
      urlName: The name of the category as used in URLs
- name: CreatePaper
  endpoint:
    path: /flipbook-backend-api/paper/create-paper
    method: POST
    data_selector: result
    params: {}
- name: CreatePreviewToken
  endpoint:
    path: /flipbook-backend-api/paper/create-preview-token
    method: POST
    data_selector: data
    params:
      paperID: The ID of the iPaper that should be granted access to
      validityMinutes: How long the security token should be valid for
      ip: The IP that should be granted access.
- name: delete_paper
  endpoint:
    path: /flipbook-backend-api/paper/delete-paper
    method: DELETE
    data_selector: result
    params:
      paperID: the ID of the iPaper that should be deleted
- name: papers
  endpoint:
    path: /flipbook-backend-api/paper/get-all-papers
    method: GET
    data_selector: data
    params:
      paperID: The ID of the iPaper that should be the root level of the tree of iPapers
        returned
- name: get_paper_id
  endpoint:
    path: /flipbook-backend-api/paper/get-paper-id-from-url
    method: GET
    data_selector: data
    params:
      url: The URL of the iPaper whose ID should be returned. Url must start with
        a `/` and end with a `/`
- name: GetPaperStructure
  endpoint:
    path: /flipbook-backend-api/paper/get-paper-structure
    method: GET
    data_selector: data
    params:
      paperID: the ID of the iPaper whose structure should be returned
      includeIndexedText: If true, returns the text iPaper has indexed from each page
- name: GetPaperUrlFromID
  endpoint:
    path: /flipbook-backend-api/paper/get-paper-url-from-id
    method: GET
    data_selector: data
    params:
      paperID: The ID of the iPaper whose URL should be returned
- name: get_setting
  endpoint:
    path: /flipbook-backend-api/paper/get-setting
    method: GET
    data_selector: data
    params:
      paperID: ''
      setting: ''
- name: setting_descriptions
  endpoint:
    path: /flipbook-backend-api/paper/get-setting-descriptions
    method: GET
    data_selector: data.settings
- name: MovePaper
  endpoint:
    path: /flipbook-backend-api/paper/move-paper
    method: GET
    data_selector: result
    params: {}
- name: SetPublicationPeriod
  endpoint:
    path: /flipbook-backend-api/paper/set-publication-period
    method: POST
    data_selector: result
    params: {}
- name: SetSetting
  endpoint:
    path: /flipbook-backend-api/paper/set-setting
    method: POST
    data_selector: result
    params: {}
- name: GetProcessingPapers
  endpoint:
    path: /flipbook-backend-api/ripper/get-processing-papers
    method: GET
- name: GetProcessingStatus
  endpoint:
    path: /flipbook-backend-api/ripper/getprocessingstatus
    method: GET
- name: ProcessPDF
  endpoint:
    path: /flipbook-backend-api/ripper/process-pdf
    method: POST
- name: ReprocessPaper
  endpoint:
    path: /flipbook-backend-api/ripper/reprocesspaper
    method: POST
- name: processing_papers
  endpoint:
    path: /flipbook-backend-api/ripper/get-processing-papers
    method: GET
    data_selector: processes
- name: GetProcessingStatus
  endpoint:
    path: /flipbook-backend-api/ripper/getprocessingstatus
    method: GET
    data_selector: data.ProcessStatus
    params:
      jobGuid: The Guid of the processing job to get status for
- name: ProcessPDF
  endpoint:
    path: /flipbook-backend-api/ripper/process-pdf
    method: POST
    data_selector: result
    params: {}
- name: reprocess_paper
  endpoint:
    path: /flipbook-backend-api/ripper/reprocesspaper
    method: POST
    data_selector: result
    params:
      paperID: The ID of the Paper to reprocess
- name: SearchPapersByContent
  endpoint:
    path: /flipbook-backend-api/search/search-papers-by-content
    method: GET
- name: SearchPapersByCustomFields
  endpoint:
    path: /flipbook-backend-api/search/search-papers-by-custom-fields
    method: GET
- name: SearchPapersWithHiearchyByContent
  endpoint:
    path: /flipbook-backend-api/search/search-papers-with-hierarchy-by-content
    method: GET
- name: SearchPapersWithHiearchyByName
  endpoint:
    path: /flipbook-backend-api/search/search-papers-with-hierarchy-by-name
    method: GET
- name: search_papers
  endpoint:
    path: /flipbook-backend-api/search/search-papers-by-content
    method: GET
    data_selector: results
    params:
      query: 'The text string to search for. Max length: 128 chars'
      categoryOrPaperID: Either a PaperID or a CategoryID that should be searched.
        Will search recursively if CategoryID is provided
- name: SearchPapersByCustomFields
  endpoint:
    path: /flipbook-backend-api/search/SearchPapersByCustomFields
    method: GET
    data_selector: papers
- name: SearchPapersWithHiearchyByContent
  endpoint:
    path: /flipbook-backend-api/search/search-papers-with-hierarchy-by-content
    method: GET
    data_selector: papers
    params:
      query: 'The text string to search for. Max length: 128 chars'
      categoryID: The CategoryID that should be searched. Will search recursively
- name: SearchPapersWithHiearchyByName
  endpoint:
    path: /flipbook-backend-api/search/SearchPapersWithHiearchyByName
    method: GET
    data_selector: papers
    params: {}
- name: GetNumberOfPageviewsPerDay
  endpoint:
    path: /flipbook-backend-api/statistics/get-number-of-page-views-per-day
    method: GET
- name: GetNumberOfVisitors
  endpoint:
    path: /flipbook-backend-api/statistics/get-number-of-visitors
    method: GET
- name: GetNumberOfVisitorsPerDay
  endpoint:
    path: /flipbook-backend-api/statistics/get-number-of-visitors-per-day
    method: GET
- name: GetNumberOfPageviewsPerDay
  endpoint:
    path: /flipbook-backend-api/statistics/get-number-of-page-views-per-day
    method: GET
    data_selector: data.pageviews
    params:
      paperID: The ID of the Flipbook to retrieve data from
      from: 'When should data be returned from? Format: YYYY-MM-DD'
      to: 'When should data be returned to? Format: YYYY-MM-DD'
- name: GetNumberOfVisitors
  endpoint:
    path: /flipbook-backend-api/statistics/get-number-of-visitors
    method: GET
    data_selector: data.visitors
    params:
      paperID: The ID of the Flipbook to retrieve data from
      from: 'When should data be returned from? Format: YYYY-MM-DD'
      to: 'When should data be returned to? Format: YYYY-MM-DD'
- name: GetNumberOfVisitorsPerDay
  endpoint:
    path: /flipbook-backend-api/statistics/get-number-of-visitors-per-day
    method: GET
    params:
      paperID: ''
      from: ''
      to: ''
- name: Popup Content
  endpoint:
    path: /flipbook-enrichment/popup-content
    method: GET
- name: flipbook
  endpoint:
    path: /client/MyCustomFlipbook/
    method: GET
    data_selector: ipapershop
    params:
      ExternalJsonShopLinks: 'True'
- name: form_integration
  endpoint:
    path: /form/integration
    method: POST
    data_selector: values
- name: Flipbook
  endpoint:
    path: /flipbook-backend-api
    method: GET
    data_selector: flipbooks
- name: embed_script
  endpoint:
    path: /pop-ups/embed-script
    method: GET
- name: minipaper
  endpoint:
    path: <MinipaperEmbedUrl>
    method: GET
    data_selector: records
    params: {}
- name: query_string_parameters
  endpoint:
    path: /flipbook-integration/query-string-parameters
    method: GET
    data_selector: parameters
    params: {}
- name: shop_export
  endpoint:
    path: /flipbook-integration/shop-export
    method: POST
    data_selector: shop
    params: {}
- name: commands
  endpoint:
    path: /flipbook-javascript-api/commands-and-events
    method: GET
    data_selector: commands
    params: {}
- name: events
  endpoint:
    path: /flipbook-javascript-api/commands-and-events
    method: GET
    data_selector: events
    params: {}
- name: basket
  endpoint:
    path: /flipbook-backend-api/basket
    method: GET
    data_selector: basketData
- name: cookie_consent
  endpoint:
    path: /consent
    method: GET
    data_selector: result
- name: paging
  endpoint:
    path: /flipbook-javascript-api/commands-and-events/paging
    method: GET
- name: events
  endpoint:
    path: /flipbook-javascript-api/commands-and-events/events
    method: GET
- name: getDetails
  endpoint:
    path: /publication/getDetails
    method: GET
    data_selector: result
    params: {}
- name: onSpreadChange
  endpoint:
    path: /publication/onSpreadChange
    method: GET
    data_selector: result
    params: {}
- name: onPageElementClick
  endpoint:
    path: /publication/onPageElementClick
    method: GET
    data_selector: result
    params: {}
- name: onDownload
  endpoint:
    path: /publication/onDownload
    method: GET
    data_selector: result
    params: {}
- name: search
  endpoint:
    path: /flipbook-backend-api/search
    method: GET
    data_selector: results
- name: table_of_contents
  endpoint:
    path: /tableOfContents
    method: GET
    data_selector: state
    params: {}
- name: onShare
  endpoint:
    path: /flipbook-javascript-api/commands-and-events/onShare
    method: POST
    data_selector: sharePayload
- name: publication
  endpoint:
    path: /publication
    method: GET
    data_selector: data
- name: basket
  endpoint:
    path: /basket
    method: GET
    data_selector: data
- name: consent
  endpoint:
    path: /consent
    method: GET
    data_selector: data
- name: onPageElementClick
  endpoint:
    path: /onPageElementClick
    method: POST
    data_selector: data
    params: {}
- name: onSpreadChange
  endpoint:
    path: /onSpreadChange
    method: POST
    data_selector: data
    params: {}
- name: onBasketClick
  endpoint:
    path: /onBasketClick
    method: POST
    data_selector: data
    params: {}
- name: onItemAdd
  endpoint:
    path: /onItemAdd
    method: POST
    data_selector: data
    params: {}
- name: cookies_set_by_ipaper
  endpoint:
    path: /technical-information/cookie-information
    method: GET
    data_selector: cookies
notes:
- API keys can be created via account settings.
- Normal user credentials are prohibited from accessing the Backend API when two-factor
  authentication is enabled on the user.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- <ApiSecret>in the snippet above will be substituted with partner and license-dependent
  configurations and be automatically populated, when you retrieve the API script
  from the admin.
- Due to the nature of the UI/UX of Display, the `iPaperDisplayInstanceReady` event
  is only fired if your user is originating from a desktop or tablet device. Mobile
  devices are redirected to the actual URL of the Display, where interaction with
  the API is not possible.
- The values in [] will be replaced with context specific value before sending the
  event.
- When using Google Tag Manager to track to Google Analytics, it’s important that
  you haven’t also defined an Analytics Tracking ID, since this will result in pageviews
  and events getting tracking twice or more.
- Superfluous nodes will be removed later on. Thus, for example, a rectangle link
  will in the future not include the polygoncoords node.
- When reading the response, you should handle potential missing nodes and degrade
  gracefully.
- You should not reference these urls from your own systems as they may change at
  any point.
- If you want to use the images, you should download them locally and host them yourself.
- Supports pre-base64 encoded PDF sizes of up to 192MB. Selecting a PDF that exceeds
  this limitation will result in the failure of the request to process the PDF.
- The content of the iframe reflows, so no scale is applied.
- Large images automatically shrink to iframe width.
- You cannot communicate with the iPaper API.
- Includes security measures against clickjacking through X-Frame-Options and Content-Security-Policy.
- Certain pages may jump to the top when iframed within a popup frame on iOS browsers.
- The subdomain MUST be setup as a CNAME record, an A record will not work.
- If you have both External and Internal DNS, the CNAME record should be set up on
  both.
- Before custom mail can be setup in iPaper, you need to setup the SPF record on your
  domain first.
- 'If you do not have an SPF record yet, you can add the following as a TXT record
  on the domain you wish for us to send of behalf of: v=spf1 include:spf.ipaper.io
  ~all.'
- In the case you already have an SPF record in your DNS configuration you should
  only add include:spf.ipaper.io, else you risk losing emails that were previously
  configured via your SPF record.
- Be aware if you already have an SPF record setup in your DNS, please do ensure you
  are only adding the partial record.
- It is not possible to dynamically resize the embedded flipbook when using the EmbeddedHeight
  parameter.
- The 'Name' value is an internal name not visible by the end-user, as not to confuse
  with the 'Label' value.
- It is generally not recommended to iframe catalogs unless there is a specific reason.
- Embed script are unique per license (login group).
- You don’t need the embed script when adding Pop-ups to your Flipbooks.
- All values in query strings must be properly URL-encoded.
- Certain functions in Flipbooks can be invoked by including query string parameters
  in the Flipbook address.
- iPaper does not support any 3rd party protocols such as OAuth or Facebook.
- For token based authentication the client system must expose a public url.
- Even though the shop XML also exposes the paper attribute alongside with flipbookcompleteurl,
  we strongly encourage you to use the latter because the former does not include
  the full public URL of the flipbook.
- Prior to implementing custom cookie solutions, please make sure that your Flipbook
  cookie policy is set to ‘Integration’.
- For new implementations, we recommend using the paging.onChange event instead of
  onSpreadChange.
- 'The callback contains a value/result with properties: query (string), results (number)'
- Once you attach your listener to the 'onShare' event, iPaper's native share functionality
  will be disabled.
- New V3 API includes new commands and events.
- The API can now be used via Custom Scripting.
- If you are just getting started with the Flipbook JS API, we strongly advice that
  you use the latest version (v3) instead.
- If you are already using the v2 JS API, we encourage you to upgrade to v3 if possible.
- The legacy v2 JS API is now superseded by v3 Flipbook JS API.
- For use-cases involving single flipbooks iframed on a single page, no additional
  configuration or markup changes are required.
- When using a 3rd party cookie solution, please make sure that the scripts for the
  solution are fully loaded before you reference it / use it inside any of the Consent
  Management API methods.
- If `data-ipaper` attribute is not added, then the default API instance will simply
  select the first <iframe> containing a flipbook that reports back, presenting a
  race condition.
- Session cookie to ensure that the visitor is given access to the respective flipbook,
  and it's needed assets.
- Dependent on whether you are using Universal Analytics (UA) or Google Analytics
  4 (GA4) the event names will be slightly different
- Google Analytics 4 (GA4) does not by default collect event categories, so event
  names in GA4 have ‘ipd_’ prepended for iPaper Display events
- When using Google Analytics 4 (GA4), the contents of event_label are also sent as
  individual event parameters prepended with ‘ip_’
- Two-factor authentication users cannot use normal user credentials to access the
  Backend API when two-factor authentication is enabled.
errors:
- '401 Unauthorized: Recheck API key or user credentials.'
- CLIENT_ALREADY_HAD_MODULE
- CLIENT_INVALID_UNIT_COUNT
- CLIENT_UNKNOWN
- CUSTOMFIELD_FIELD_DOES_NOT_EXIST
- CUSTOMFIELD_FIELD_NAME_IS_NOT_UNIQUE
- CUSTOMFIELD_INVALID_DATA_FORMAT
- CUSTOMFIELD_INVALID_DATATYPE
- CUSTOMFIELD_INVALID_FIELD_NAME
- ERROR
- LICENSE_DOES_NOT_ALLOW_PROCESSING
- LOGIN_2FA_ENABLED
- LOGIN_INVALID_CREDENTIALS
- LOGIN_NO_API_ACCESS
- LOGIN_RATE_LIMITED
- LOGIN_SECURITY_VIOLATION
- LOGIN_SSO_ENABLED
- PAPER_DOES_NOT_EXIST
- PAPER_MUST_BE_CATEGORY
- PAPER_MUST_NOT_BE_CATEGORY
- PAPER_SETTING_NOT_ALLOWED
- READONLY
- RIPPER_CANNOT_PROCESS_PAPER_ALREADY_BEING_PROCESSED
- RIPPER_CANNOT_REPROCESS_AN_UNPROCESSED_PAPER
- RIPPER_CANNOT_REPROCESS_PAPER_WITH_NO_PROCESSING_DETAILS
- RIPPER_FILE_IS_NOT_PDF
- RIPPER_INVALID_BASE64_PDF_FILE
- RIPPER_PDF_FILE_DOES_NOT_EXIST
- SEARCH_CUSTOMFIELD_DATATYPE_DOES_NOT_SUPPORT_WILDCARDS
- SEARCH_NO_CUSTOM_FIELD_CRITERIAS
- SEARCH_TEMPORARILY_UNAVAILABLE
- STATISTICS_TEMPORARILY_UNAVAILABLE
- SUCCESS
- UNSUPPORTED_CHECKOUT_TYPE
- 'UNSUPPORTED_CHECKOUT_TYPE: Checkout type is not supported'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'ERROR: Unexpected error.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects: []
client:
  base_url: https://demo.ipaper.io
source_metadata: null
