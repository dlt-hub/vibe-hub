resources:
- name: fulfillments
  endpoint:
    path: /fulfillments
    method: POST
- name: subscription
  endpoint:
    path: /services/data/vXX.X/sobjects/Subscription
    method: POST
    data_selector: subscription
    params: {}
- name: customer
  endpoint:
    path: /customers/{customer_id}
    method: POST
    data_selector: requestToBeForgotten
    params: {}
- name: order
  endpoint:
    path: /orders/{order_id}
    method: POST
    data_selector: requestToBeForgotten
    params: {}
- name: fulfillment_returns
  endpoint:
    path: /fulfillment-returns
    method: GET
    data_selector: data
    params:
      limit: 10
- name: create_fulfillment_return
  endpoint:
    path: /fulfillment-returns
    method: POST
    data_selector: data
    params: {}
- name: retrieve_fulfillment_return
  endpoint:
    path: /fulfillment-returns/{id}
    method: GET
    data_selector: data
    params: {}
- name: sku
  endpoint:
    path: /skus
    method: POST
    data_selector: ''
    params: {}
- name: update_sku
  endpoint:
    path: /skus/{sku_id}
    method: POST
    data_selector: ''
    params: {}
- name: delete_sku
  endpoint:
    path: /skus/{sku_id}
    method: DELETE
    data_selector: ''
    params: {}
- name: checkout_session
  endpoint:
    path: /drop-in/checkout-sessions
    method: POST
    data_selector: sessionId
- name: plans
  endpoint:
    path: /plans
    method: POST
    data_selector: plans
    params: {}
- name: list_shipping_labels
  endpoint:
    path: /shipping-labels
    method: GET
    data_selector: data
    params:
      limit: 10
- name: create_shipping_label
  endpoint:
    path: /shipping-labels
    method: POST
    data_selector: ''
    params: {}
- name: retrieve_shipping_label
  endpoint:
    path: /shipping-labels/{id}
    method: GET
    data_selector: ''
    params: {}
- name: inventory_levels
  endpoint:
    path: /inventory-levels
    method: GET
    data_selector: data
    params: {}
- name: fulfillment_cancellations
  endpoint:
    path: /fulfillment-cancellations
    method: GET
    data_selector: data
    params:
      limit: 10
- name: create_fulfillment_cancellation
  endpoint:
    path: /fulfillment-cancellations
    method: POST
    data_selector: data
    params: {}
- name: fulfillment_cancellation_details
  endpoint:
    path: /fulfillment-cancellations/{id}
    method: GET
    data_selector: data
    params: {}
- name: logistics_returns
  endpoint:
    path: /logistics-returns
    method: GET
    data_selector: data
- name: logistics_return_details
  endpoint:
    path: /logistics-returns/{id}
    method: GET
    data_selector: data
- name: create_logistics_return
  endpoint:
    path: /logistics-returns
    method: POST
    data_selector: data
- name: subscriptions
  endpoint:
    path: /subscriptions/{subscriptionId}
    method: POST
    data_selector: subscription
    params: {}
- name: customers
  endpoint:
    path: /customers/{customerId}
    method: GET
    data_selector: sources
    params: {}
- name: plans
  endpoint:
    path: /plans/{planId}
    method: POST
    data_selector: plan
    params: {}
- name: subscriptions
  endpoint:
    path: /subscriptions/{subscriptionId}
    method: POST
    data_selector: data.object
    params:
      state: active
- name: subscription_list
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: data.object
    params: {}
- name: update_subscription
  endpoint:
    path: /subscriptions/{id}
    method: POST
    data_selector: data.object
    params: {}
- name: item_classification
  endpoint:
    path: /item_classification
    method: POST
    data_selector: items
    params:
      incremental: updated_at
- name: order_invoice
  endpoint:
    path: /file-links
    method: POST
    data_selector: url
- name: credit_memo
  endpoint:
    path: /file-links
    method: POST
    data_selector: url
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: ''
    params: {}
- name: customer_details
  endpoint:
    path: /customers/{id}
    method: GET
    data_selector: ''
    params: {}
- name: update_customer
  endpoint:
    path: /customers/{id}
    method: POST
    data_selector: ''
    params: {}
- name: delete_customer
  endpoint:
    path: /customers/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: attach_source
  endpoint:
    path: /customers/{id}/sources/{sourceId}
    method: POST
    data_selector: ''
    params: {}
- name: detach_source
  endpoint:
    path: /customers/{id}/sources/{sourceId}
    method: DELETE
    data_selector: ''
    params: {}
- name: attach_tax_identifier
  endpoint:
    path: /customers/{id}/tax-identifiers/{taxId}
    method: POST
    data_selector: ''
    params: {}
- name: SKUs
  endpoint:
    path: /skus
    method: GET
    data_selector: skus
- name: productDetails
  endpoint:
    path: /productDetails
    method: GET
    data_selector: productDetails
- name: SKU groups
  endpoint:
    path: /skuGroups
    method: GET
    data_selector: skuGroups
- name: Inventory items
  endpoint:
    path: /inventoryItems
    method: GET
    data_selector: inventoryItems
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: customer
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: data
    params: {}
- name: order_tax_details
  endpoint:
    path: /orders/{id}/tax-details
    method: GET
    data_selector: items
    params: {}
- name: fulfillment
  endpoint:
    path: /fulfillments/{id}
    method: GET
    data_selector: data
- name: fulfillments
  endpoint:
    path: /fulfillments
    method: GET
    data_selector: data
- name: create_fulfillment
  endpoint:
    path: /fulfillments
    method: POST
- name: update_fulfillment
  endpoint:
    path: /fulfillments/{id}
    method: POST
- name: tax_identifiers
  endpoint:
    path: /tax-identifiers
    method: GET
    data_selector: data
    params:
      incremental: createdTime
- name: create_tax_identifier
  endpoint:
    path: /tax-identifiers
    method: POST
    data_selector: ''
    params: {}
- name: retrieve_tax_identifier
  endpoint:
    path: /tax-identifiers/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_tax_identifier
  endpoint:
    path: /tax-identifiers/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: customers
  endpoint:
    path: /customers/{id}
    method: POST
    data_selector: taxIdentifiers
    params: {}
- name: customers
  endpoint:
    path: /customers/{id}
    method: POST
    data_selector: taxCertificate
- name: tax_certificate_upload
  endpoint:
    path: /files
    method: POST
    data_selector: id
    params:
      purpose: tax_document_customer_upload
- name: skus
  endpoint:
    path: /skus
    method: GET
    data_selector: data
- name: sku_details
  endpoint:
    path: /skus/{id}
    method: GET
    data_selector: data
- name: create_or_update_sku
  endpoint:
    path: /skus/{id}
    method: POST
    data_selector: data
- name: delete_sku
  endpoint:
    path: /skus/{id}
    method: DELETE
- name: sku_groups
  endpoint:
    path: /sku-groups
    method: GET
    data_selector: data
- name: orders
  endpoint:
    path: /orders
    method: POST
    data_selector: response
    params: {}
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: data
- name: file_details
  endpoint:
    path: /files/{id}
    method: GET
    data_selector: data
- name: upload_file
  endpoint:
    path: /files
    method: POST
    data_selector: data
- name: delete_file
  endpoint:
    path: /files/{id}
    method: DELETE
- name: download_file_content
  endpoint:
    path: /files/{id}/content
    method: GET
- name: reservations
  endpoint:
    path: /reservations/{id}
    method: DELETE
    data_selector: No content
    params: {}
- name: create_reservation
  endpoint:
    path: /reservations
    method: POST
    data_selector: id
    params: {}
- name: fees
  endpoint:
    path: /fees
    method: GET
    data_selector: data
- name: fee_details
  endpoint:
    path: /fees/{id}
    method: GET
    data_selector: data
- name: add_fee
  endpoint:
    path: /fees
    method: POST
    data_selector: data
- name: update_fee
  endpoint:
    path: /fees/{id}
    method: POST
    data_selector: data
- name: delete_fee
  endpoint:
    path: /fees/{id}
    method: DELETE
- name: order_notifications
  endpoint:
    path: /orders/notifications
    method: POST
    data_selector: data
    params: {}
- name: subscription_notifications
  endpoint:
    path: /subscriptions/notifications
    method: POST
    data_selector: data
    params: {}
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: subscription_details
  endpoint:
    path: /subscriptions/{id}
    method: GET
- name: update_subscription
  endpoint:
    path: /subscriptions/{id}
    method: POST
- name: delete_subscription
  endpoint:
    path: /subscriptions/{id}
    method: DELETE
- name: sales_transactions
  endpoint:
    path: /sales-transactions
    method: GET
    data_selector: data
- name: sales_transaction_details
  endpoint:
    path: /sales-transactions/{id}
    method: GET
    data_selector: data
- name: all_payouts
  endpoint:
    path: /payouts
    method: GET
    data_selector: data
- name: payout_details
  endpoint:
    path: /payouts/{id}
    method: GET
    data_selector: data
- name: payout_transactions
  endpoint:
    path: /payouts/{id}/transactions
    method: GET
    data_selector: data
- name: shipping_quotes
  endpoint:
    path: /shipping-quotes
    method: POST
    data_selector: quotes
- name: sku_groups
  endpoint:
    path: /sku-groups
    method: GET
    data_selector: data
- name: store_credit
  endpoint:
    path: /checkouts/store-credits
    method: POST
    data_selector: sessionId
    params: {}
- name: store_credit_delete
  endpoint:
    path: /checkouts/store-credits/{upstreamId}
    method: DELETE
    data_selector: ''
    params: {}
- name: refunds
  endpoint:
    path: /refunds
    method: GET
    data_selector: data
- name: refund_details
  endpoint:
    path: /refunds/{id}
    method: GET
    data_selector: data
- name: create_refund
  endpoint:
    path: /refunds
    method: POST
    data_selector: data
- name: update_refund
  endpoint:
    path: /refunds/{id}
    method: POST
    data_selector: data
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: invoice_details
  endpoint:
    path: /invoices/{id}
    method: GET
    data_selector: data
- name: create_invoice
  endpoint:
    path: /invoices
    method: POST
    data_selector: id
- name: update_invoice
  endpoint:
    path: /invoices/{id}
    method: POST
    data_selector: id
- name: delete_invoice
  endpoint:
    path: /invoices/{id}
    method: DELETE
- name: open_invoice
  endpoint:
    path: /invoices/{id}/open
    method: POST
- name: void_invoice
  endpoint:
    path: /invoices/{id}/void
    method: POST
- name: attach_source
  endpoint:
    path: /invoices/{id}/sources/{sourceId}
    method: POST
- name: detach_source
  endpoint:
    path: /invoices/{id}/sources/{sourceId}
    method: DELETE
- name: inventory_item
  endpoint:
    path: /inventory-items
    method: POST
    data_selector: ''
    params: {}
- name: inventory_item_by_id
  endpoint:
    path: /inventory-items/{id}
    method: POST
    data_selector: ''
    params: {}
- name: inventory_items
  endpoint:
    path: /inventory-items
    method: GET
    data_selector: data
- name: inventory_item_detail
  endpoint:
    path: /inventory-items/{id}
    method: GET
    data_selector: data
- name: create_inventory_item
  endpoint:
    path: /inventory-items
    method: POST
    data_selector: data
- name: update_inventory_item
  endpoint:
    path: /inventory-items/{id}
    method: POST
    data_selector: data
- name: delete_inventory_item
  endpoint:
    path: /inventory-items/{id}
    method: DELETE
- name: returns
  endpoint:
    path: /returns
    method: GET
    data_selector: data
- name: returns_create
  endpoint:
    path: /returns
    method: POST
    data_selector: data
- name: returns_details
  endpoint:
    path: /returns/{id}
    method: GET
    data_selector: data
- name: returns_update
  endpoint:
    path: /returns/{id}
    method: POST
    data_selector: data
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: types
    params: {}
- name: webhook_details
  endpoint:
    path: /webhooks/{id}
    method: GET
    data_selector: types
    params: {}
- name: create_webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: types
    params: {}
- name: delete_webhook
  endpoint:
    path: /webhooks/{id}
    method: DELETE
    data_selector: types
    params: {}
- name: update_webhook
  endpoint:
    path: /webhooks/{id}
    method: PATCH
    data_selector: types
    params: {}
- name: file_links
  endpoint:
    path: /file-links
    method: GET
    data_selector: data
- name: create_file_link
  endpoint:
    path: /file-links
    method: POST
    data_selector: id
- name: retrieve_file_link
  endpoint:
    path: /file-links/{id}
    method: GET
    data_selector: id
- name: update_file_link
  endpoint:
    path: /file-links/{id}
    method: POST
    data_selector: id
- name: delete_file_link
  endpoint:
    path: /file-links/{id}
    method: DELETE
- name: plans
  endpoint:
    path: /plans
    method: GET
    data_selector: data
- name: plan_details
  endpoint:
    path: /plans/{id}
    method: GET
    data_selector: data
- name: create_plan
  endpoint:
    path: /plans
    method: POST
    data_selector: data
- name: update_plan
  endpoint:
    path: /plans/{id}
    method: POST
    data_selector: data
- name: delete_plan
  endpoint:
    path: /plans/{id}
    method: DELETE
- name: charge
  endpoint:
    path: /charges/{id}
    method: GET
    data_selector: id
- name: sources
  endpoint:
    path: /sources/{id}
    method: GET
    data_selector: records
- name: create_source
  endpoint:
    path: /sources
    method: POST
    data_selector: records
- name: country_specs
  endpoint:
    path: /country-specs
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: data
- name: event_details
  endpoint:
    path: /events/{id}
    method: GET
    data_selector: data
- name: checkouts
  endpoint:
    path: /checkouts
    method: GET
    data_selector: data
- name: checkout_details
  endpoint:
    path: /checkouts/{id}
    method: GET
    data_selector: data
- name: create_checkout
  endpoint:
    path: /checkouts
    method: POST
    data_selector: data
- name: update_checkout
  endpoint:
    path: /checkouts/{id}
    method: POST
    data_selector: data
- name: delete_checkout
  endpoint:
    path: /checkouts/{id}
    method: DELETE
    data_selector: data
- name: attach_source
  endpoint:
    path: /checkouts/{id}/sources/{sourceId}
    method: POST
    data_selector: data
- name: detach_source
  endpoint:
    path: /checkouts/{id}/sources/{sourceId}
    method: DELETE
    data_selector: data
- name: payouts
  endpoint:
    path: /payouts
    method: GET
- name: payout_by_id
  endpoint:
    path: /payouts/{id}
    method: GET
- name: transactions_in_payout
  endpoint:
    path: /payouts/{id}/transactions
    method: GET
- name: shipping_quotes
  endpoint:
    path: /checkout/shipping-quotes
    method: POST
    data_selector: shippingMethods
- name: fulfillments
  endpoint:
    path: /fulfillments
    method: POST
    data_selector: items
- name: fulfillment_orders
  endpoint:
    path: /fulfillment-orders
    method: GET
    data_selector: data
- name: fulfillment_order_details
  endpoint:
    path: /fulfillment-orders/{id}
    method: GET
    data_selector: data
- name: shipments
  endpoint:
    path: /shipments
    method: GET
    data_selector: data
    params: {}
- name: shipment_details
  endpoint:
    path: /shipments/{id}
    method: GET
    data_selector: data
    params: {}
- name: checkout_links
  endpoint:
    path: /drop-in/checkout-links
    method: GET
    data_selector: data
- name: create_checkout_link
  endpoint:
    path: /drop-in/checkout-links
    method: POST
    data_selector: ''
    params:
      sessionId: eyJjdHkiOiJKV1QiLCJlbmMiOiJBMTI4R0NNIiw
- name: delete_checkout_link
  endpoint:
    path: /drop-in/checkout-links/{id}
    method: DELETE
    data_selector: ''
- name: fulfillments
  endpoint:
    path: /fulfillments
    method: POST
    data_selector: data.object
    params: {}
notes:
- The request must include a single shipmentId and one or more items[].shipmentItemId.
- Notify the subscriber 30 days before auto-renewal for subscriptions with terms greater
  than 30 days.
- Handle subscription updates carefully to determine when to create a new billing
  agreement.
- The id in productDetails should represent the unique identifier of the product in
  your system.
- A skuGroupId identifies the SKU group that the product belongs to.
- The countryOfOrigin is a two-letter Alpha-2 country code as described in the ISO
  3166 international standard.
- Supports multiple payment methods and customizable checkout flows
- Designed for ease of integration
- Supports trial and paid subscription plans with defined intervals.
- Limit can range between 1 and 100, and the default is 10.
- Test the new API before updating to the new version.
- Your production environment can remain on the production version until you are ready
  to upgrade to the latest version.
- A successful request results in the creation of an event with a type of subscription.updated.
- Only active, activeFree, and activePendingInvoice subscriptions can be cancelled.
- The `id` must be forty characters or less.
- Setting `enabled` to false blocks the customer from placing orders.
- Digital River only creates a charge object when the source is chargeable.
- For sources with a flow of redirect, such as PayPal, often are in a state of pending_redirect.
- Requires setup of connected app in Digital River
- Prices are tax inclusive if 'taxInclusive' is true
- Certificates of exemption must be addressed to Digital River.
- Digital River uses API keys to authenticate your API requests.
- The same credentials enable access to the Digital River Dashboard if you use the
  Digital River API.
- All API requests must be sent over HTTPS.
- API keys are required for both production and test environments.
- Certain notifications are required to access Digital River's MOR/SOR business model.
- Webhook(s) can be configured to listen for events created by Digital River.
- A limit on the number of objects returned can range between 1 and 5000, and the
  default is 10.
- Order failures with a 409 response status code are often due to charge authorization
  declines that result from insufficient funds or lack of credit.
- You cannot however re-use a checkout identifier once it's been sent in the payload
  of a successful POST /orders request.
- Limit can range between 1 and 5000, and the default is 10.
- Ensure the values you pass don't contain a currency symbol or whitespace.
- Depending on your account's tax configurations, make sure that your data-dr-original-price
  values are either tax-inclusive or tax-exclusive.
- Do not share the error code with the customer. Doing so may aid parties that are
  attempting to carry out fraudulent activities.
- When it's a soft decline, follow the retry policies when submitting additional authorization
  requests.
- All requests must include the Authorization header with a Bearer token.
- Always use your test API keys to evaluate your integration.
- Digital River's low-code checkout solutions don't currently support testing Google
  Pay failures and SCA.
errors:
- 'failed-request: Failed to operate on charge'
- 'order_fulfilled: Resource ''201454110336'' is fulfilled.'
- '400 Bad Request: Invalid SKU ID.'
- '400 Bad Request: The weight is missing.'
- '409 Conflict: Invalid manufacturer ID and manufacturer part # combination.'
- 'missing_parameter: An item of type sku is missing a skuGroupId parameter.'
- 'missing_parameter: must not be null'
- 'invalid_parameter: ''KP'' is not a valid Country of Origin.'
- 'missing_parameter: The weight is missing.'
- 'plan_not_active: Attempted to create subscriptions for plans that are not active.'
- 'restricted_update: Additional data cannot be updated when updating state to cancelled.'
- 'invalid_state: Subscription is active, so it cannot be deleted.'
- 'restricted_update: Additional data cannot be updated when updating state to active.'
- 'missing_parameter: itemBreadcrumb and description required'
- '400 Bad Request: Invalid parameter'
- '201 Created: Successful customer creation'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- If you forget to provide your key or use an incorrect or outdated one, the API returns
  an error.
- 'bad_request: The server could not process the request due to a client error.'
- 'not_found: The server can’t find the requested resource.'
- 'unauthorized: The request requires user authentication.'
- '409 Conflict: Failed to charge source.'
- '404 Not Found: Order not found.'
- '401 Unauthorized: Check your OAuth token.'
- '400 Bad Request: Ensure request parameters are correct.'
- '409: Use the type, code, and message contained in the error to help diagnose the
  failure.'
- 'non-409 response in the 4xx range: Use the type, code, and message contained in
  the error to help diagnose the failure.'
- '400 Bad Request: application/json'
- '401 Unauthorized: application/json'
- '403 Forbidden: application/json'
- '405 Method Not Allowed: application/json'
- '406 Not Acceptable: application/json'
- '408 Request Timeout: application/json'
- '429 Too Many Requests: application/json'
- '500 Internal Server Error: application/json'
- '502 Bad Gateway Error: application/json'
- '503 Service Unavailable Error: application/json'
- '504 Gateway Timeout Error: application/json'
- '400 Bad Request: Invalid parameters sent in the request'
- 400 Bad Request
- 401 Unauthorized
- 403 Forbidden
- 404 Not Found
- 405 Method Not Allowed
- 406 Not Acceptable
- 408 Request Timeout
- 429 Too Many Requests
- 500 Internal Server Error
- 502 Bad Gateway Error
- 503 Service Unavailable Error
- 504 Gateway Timeout Error
- 'account_closed: Hard'
- 'card_expired: Soft'
- 'card_limit_exceeded: Soft'
- 'card_type_block: Hard'
- 'card_velocity_exceeded: Soft'
- 'declined: Hard'
- 'do_not_honor: Soft'
- 'fraud: Hard'
- 'fraud_block: Hard'
- 'insufficient_funds: Soft'
- 'invalid_address: Hard'
- 'invalid_amount: Hard'
- 'invalid_card_bin: Hard'
- 'invalid_card_number: Hard'
- 'invalid_currency: Hard'
- 'invalid_expiration_date: Hard'
- 'invalid_pin: Hard'
- 'invalid_security_code: Hard'
- 'invalid_transaction_type: Hard'
- 'issuer_invalid_card: Hard'
- 'issuer_not_found: Hard'
- 'issuer_unavailable: Soft'
- 'limit_exceeded: Soft'
- 'lost_stolen_card: Hard'
- 'mid_limit_exceeded: Soft'
- 'no_response: Soft'
- 'pin_try_exceeded: Soft'
- 'restricted_card: Hard'
- 'stop_recurring: Hard'
- 'voice_authorization_required: Hard'
- '401 Unauthorized: Check your API token or permissions.'
- '404 Not Found: The specified resource does not exist.'
- '400 Bad Request: Invalid input data.'
- 'SourceCreationFail: A Source is not created.'
- 'SourceFailWithDelay: A Source is successfully created but the Charge fails.'
- 'RefundFailWhileCreation: Both a Source and the Charge are successfully created
  but refunds against the Charge fail.'
- 'RefundFailAfterPaymentInfo: Both a Source and the Charge are successfully created
  and a Refund request against the Charge is successful but ultimately fails to refund.'
- 'payment_authorization_failed: Fulfillment cannot be processed because the payment
  authorization has expired'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Event
  - Authorization
client:
  base_url: https://api.digitalriver.com
  auth:
    type: oauth2
    flow: password
    token_url: text
    client_id: text
    client_secret: text
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: '*/*'
    Content-Type: application/json
    Authorization: Bearer YOUR_SECRET_TOKEN
  paginator:
    type: cursor
    cursor_param: endingBefore
    page_size_param: limit
    default_page_size: 10
    startingAfter: startingAfter
    endingBefore: endingBefore
source_metadata: null
