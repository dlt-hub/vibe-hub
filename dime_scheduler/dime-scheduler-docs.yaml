resources:
- name: Job
  endpoint:
    path: /develop/api/job
    method: GET
- name: Task
  endpoint:
    path: /develop/api/task
    method: GET
- name: Appointment
  endpoint:
    path: /develop/api/appointment
    method: GET
- name: Resource
  endpoint:
    path: /develop/api/resource
    method: GET
- name: Filter
  endpoint:
    path: /develop/api/filter
    method: GET
- name: Container
  endpoint:
    path: /develop/api/container
    method: GET
- name: Action
  endpoint:
    path: /develop/api/action
    method: GET
- name: Caption
  endpoint:
    path: /develop/api/caption
    method: GET
- name: Indicator
  endpoint:
    path: /develop/api/indicator
    method: GET
- name: Notification
  endpoint:
    path: /develop/api/notification
    method: GET
- name: Connector
  endpoint:
    path: /develop/api/connector
    method: GET
- name: User
  endpoint:
    path: /develop/api/user
    method: GET
- name: Job
  endpoint:
    path: /develop/api/job
    method: GET
- name: Task
  endpoint:
    path: /develop/api/task
    method: GET
- name: Appointment
  endpoint:
    path: /develop/api/appointment
    method: GET
- name: Resource
  endpoint:
    path: /develop/api/resource
    method: GET
- name: Filter
  endpoint:
    path: /develop/api/filter
    method: GET
- name: Container
  endpoint:
    path: /develop/api/container
    method: GET
- name: Action
  endpoint:
    path: /develop/api/action
    method: GET
- name: Caption
  endpoint:
    path: /develop/api/caption
    method: GET
- name: Indicator
  endpoint:
    path: /develop/api/indicator
    method: GET
- name: Notification
  endpoint:
    path: /develop/api/notification
    method: GET
- name: Connector
  endpoint:
    path: /develop/api/connector
    method: GET
- name: User
  endpoint:
    path: /develop/api/user
    method: GET
- name: appointments
  endpoint:
    path: /appointments
    method: POST
- name: Open Tasks
  endpoint:
    path: /api/open_tasks
    method: GET
    data_selector: tasks
- name: Planned Tasks
  endpoint:
    path: /api/planned_tasks
    method: GET
    data_selector: tasks
- name: Task Details
  endpoint:
    path: /api/task_details
    method: GET
    data_selector: details
- name: Gantt Chart
  endpoint:
    path: /api/gantt_chart
    method: GET
    data_selector: gantt
- name: Map
  endpoint:
    path: /api/map
    method: GET
    data_selector: map_data
- name: Resource Filters
  endpoint:
    path: /api/resource_filters
    method: GET
    data_selector: filters
- name: Calendar
  endpoint:
    path: /api/calendar
    method: GET
    data_selector: calendar_data
- name: Category
  endpoint:
    path: /api/category
    method: GET
    data_selector: category_data
- name: Notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: notifications
- name: Route Sequence
  endpoint:
    path: /api/route_sequence
    method: GET
    data_selector: route_data
- name: Capacity
  endpoint:
    path: /api/capacity
    method: GET
    data_selector: capacity_data
- name: open_tasks
  endpoint:
    path: /user/components/opentasks
    method: GET
    data_selector: tasks
    params: {}
- name: planned_tasks
  endpoint:
    path: /user/components/plannedtasks
    method: GET
    data_selector: appointments
    params: {}
- name: gantt_chart
  endpoint:
    path: /user/components/gantt
    method: GET
    data_selector: projects
    params: {}
- name: map
  endpoint:
    path: /user/components/map
    method: GET
    data_selector: locations
    params: {}
- name: notifications
  endpoint:
    path: /user/components/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: resource_filters
  endpoint:
    path: /user/components/resourcefilters
    method: GET
    data_selector: filters
    params: {}
- name: details
  endpoint:
    path: /user/components/details
    method: GET
    data_selector: details
    params: {}
- name: pivot
  endpoint:
    path: /user/components/pivot
    method: GET
    data_selector: capacity
    params: {}
- name: route_sequence
  endpoint:
    path: /user/components/routesequence
    method: GET
    data_selector: sequences
    params: {}
- name: indicators
  endpoint:
    path: /user/components/indicators
    method: GET
    data_selector: indicators
    params: {}
- name: transactions
  endpoint:
    path: /administration/transactions/list
    method: GET
    data_selector: transactions
    params: {}
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: records
- name: job
  endpoint:
    path: /job
    method: POST
- name: job_delete
  endpoint:
    path: /job
    method: DELETE
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: records
- name: task
  endpoint:
    path: /task
    method: POST
    data_selector: records
- name: taskUri
  endpoint:
    path: /taskUri
    method: POST
    data_selector: records
- name: taskFilterValue
  endpoint:
    path: /taskFilterValue
    method: POST
    data_selector: records
- name: job
  endpoint:
    path: /job
    method: POST
    data_selector: ''
    params: {}
- name: task
  endpoint:
    path: /task
    method: POST
    data_selector: null
    params: {}
- name: taskFilterValue
  endpoint:
    path: /taskFilterValue
    method: POST
    data_selector: null
    params: {}
- name: clear_task_filter_value
  endpoint:
    path: /mboc_clearTaskFilterValue
    method: POST
    data_selector: records
- name: upsert_task_container
  endpoint:
    path: /taskContainer
    method: POST
    data_selector: records
- name: delete_task_container
  endpoint:
    path: /taskContainer
    method: DELETE
    data_selector: records
- name: clear_task_filter_value
  endpoint:
    path: /import/mboc_clearTaskFilterValue
    method: POST
    data_selector: ParameterValues
    params: {}
- name: upsert_task_container
  endpoint:
    path: /taskContainer
    method: POST
    data_selector: ParameterValues
    params: {}
- name: delete_task_container
  endpoint:
    path: /taskContainer
    method: DELETE
    data_selector: ParameterValues
    params: {}
- name: appointment
  endpoint:
    path: /appointment
    method: POST
    data_selector: records
- name: appointmentUri
  endpoint:
    path: /appointmentUri
    method: POST
    data_selector: records
- name: appointmentContainer
  endpoint:
    path: /appointmentContainer
    method: POST
    data_selector: records
- name: assignment
  endpoint:
    path: /assignment
    method: POST
    data_selector: records
- name: appointmentContent
  endpoint:
    path: /appointmentContent
    method: POST
    data_selector: records
- name: appointmentPlanningQuantity
  endpoint:
    path: /appointmentPlanningQuantity
    method: POST
    data_selector: records
- name: appointmentTimeMarker
  endpoint:
    path: /appointmentTimeMarker
    method: POST
    data_selector: records
- name: appointmentCategory
  endpoint:
    path: /appointmentCategory
    method: POST
    data_selector: records
- name: appointmentFieldValue
  endpoint:
    path: /appointmentFieldValue
    method: POST
    data_selector: records
- name: appointmentImportance
  endpoint:
    path: /appointmentImportance
    method: POST
    data_selector: records
- name: resource
  endpoint:
    path: /resource
    method: POST
    data_selector: records
- name: resourceFilterValue
  endpoint:
    path: /resourceFilterValue
    method: POST
    data_selector: records
- name: resourceGpsTracking
  endpoint:
    path: /resourceGpsTracking
    method: POST
    data_selector: records
- name: resourceCapacity
  endpoint:
    path: /resourceCapacity
    method: POST
    data_selector: records
- name: resourceUri
  endpoint:
    path: /resourceUri
    method: POST
    data_selector: records
- name: resourceCalendar
  endpoint:
    path: /resourceCalendar
    method: POST
    data_selector: records
- name: resourceCertificate
  endpoint:
    path: /resourceCertificate
    method: POST
    data_selector: records
- name: appointment
  endpoint:
    path: /appointment
    method: POST
    data_selector: records
    params: {}
- name: upsert_appointment
  endpoint:
    path: /appointment
    method: PUT
    data_selector: records
    params: {}
- name: delete_appointment
  endpoint:
    path: /appointment
    method: DELETE
    data_selector: records
    params: {}
- name: assignment
  endpoint:
    path: /assignment
    method: POST
    data_selector: records
    params: {}
- name: update_appointment_content
  endpoint:
    path: /appointmentContent
    method: POST
    data_selector: records
    params: {}
- name: update_appointment_planning_quantity
  endpoint:
    path: /appointmentPlanningQuantity
    method: POST
    data_selector: records
    params: {}
- name: update_appointment_time_marker
  endpoint:
    path: /appointmentTimeMarker
    method: POST
    data_selector: records
    params: {}
- name: update_appointment_category
  endpoint:
    path: /appointmentCategory
    method: POST
    data_selector: records
    params: {}
- name: update_appointment_field_values
  endpoint:
    path: /appointmentFieldValue
    method: POST
    data_selector: records
    params: {}
- name: update_appointment_importance
  endpoint:
    path: /appointmentImportance
    method: POST
    data_selector: records
    params: {}
- name: filter_group
  endpoint:
    path: /filterGroup
    method: POST
    data_selector: ''
    params: {}
- name: filter_value
  endpoint:
    path: /filterValue
    method: POST
    data_selector: ''
    params: {}
- name: container_upsert
  endpoint:
    path: /container
    method: POST
    data_selector: ''
    params: {}
- name: container_delete
  endpoint:
    path: /container
    method: DELETE
    data_selector: ''
    params: {}
- name: resource
  endpoint:
    path: /resource
    method: POST
    data_selector: ''
    params: {}
- name: resourceFilterValue
  endpoint:
    path: /resourceFilterValue
    method: POST
    data_selector: ''
    params: {}
- name: resourceGpsTracking
  endpoint:
    path: /resourceGpsTracking
    method: POST
    data_selector: ''
    params: {}
- name: resourceCapacity
  endpoint:
    path: /resourceCapacity
    method: POST
    data_selector: ''
    params: {}
- name: resourceUri
  endpoint:
    path: /resourceUri
    method: POST
    data_selector: ''
    params: {}
- name: resourceCalendar
  endpoint:
    path: /resourceCalendar
    method: POST
    data_selector: ''
    params: {}
- name: resourceCertificate
  endpoint:
    path: /resourceCertificate
    method: POST
    data_selector: ''
    params: {}
- name: actionUri
  endpoint:
    path: /actionUri
    method: POST
    data_selector: ''
    params: {}
- name: filter_group
  endpoint:
    path: /filterGroup
    method: POST
    data_selector: records
    params: {}
- name: filter_value
  endpoint:
    path: /filterValue
    method: POST
    data_selector: records
    params: {}
- name: caption
  endpoint:
    path: /caption
    method: POST
    data_selector: records
- name: caption
  endpoint:
    path: /caption
    method: POST
    data_selector: records
- name: notification
  endpoint:
    path: /notification
    method: POST
    data_selector: null
    params: {}
- name: category
  endpoint:
    path: /category
    method: POST
    data_selector: null
    params: {}
- name: timeMarker
  endpoint:
    path: /timeMarker
    method: POST
    data_selector: null
    params: {}
- name: pin
  endpoint:
    path: /pin
    method: POST
    data_selector: null
    params: {}
- name: upsert
  endpoint:
    path: /connector
    method: POST
    data_selector: ParameterValues
    params: {}
- name: delete
  endpoint:
    path: /import
    method: POST
    data_selector: ParameterValues
    params: {}
- name: notification
  endpoint:
    path: /notification
    method: POST
    data_selector: records
    params: {}
- name: connector
  endpoint:
    path: /connector
    method: POST
    data_selector: Result
    params: {}
notes:
- Uses JWT for authentication — requires setup of token endpoint
- Create an API key, copy and paste it in the connection window in the Power Platform.
- Make sure to select the right Dime.Scheduler environment, which is production or
  sandbox.
- Bidirectional message flow is optional
- Dime.Scheduler is not a standalone solution.
- Dime.Scheduler shines when used in conjunction with other systems.
- Dime.Scheduler is designed to integrate with existing technological landscapes.
- After authentication, users see a tailored version based on profiles and security
  filters.
- Bidirectional message flow is optional.
- Most components are stateful and can be configured.
- Layouts are reusable across profiles.
- 'Securing an application consists of two distinct areas: authentication and authorization.'
- There are two login mechanisms in Dime.Scheduler.
- Some objects like Contact may return nulls in deeply nested fields
- The navigation menu is secured based on user roles.
- Users need to store the profile explicitly in order to persist the changes.
- Profiles and layouts can be shared, but authorization levels are not shared.
- Users need access to the 'Personalization' user action to store profiles and layouts.
- Use a service account for authentication rather than a human user account.
- Ensure the right environment (sandbox or production) is selected.
- User accounts must be service accounts and not human accounts to avoid integration
  issues.
- MS Entra ID accounts are not supported in the API, so it has to be a Forms user
  account.
- Dime.Scheduler marks a transaction as successful based on a 200 HTTP status code.
- Dime.Scheduler looks at a 200 HTTP status code to mark a transaction as successful.
- For other backoffice systems, the processing may be done immediately during the
  request.
- Set up and test OAuth2
- Bi-directional message flow needs to be configured in the back-office system to
  get data in Dime.Scheduler.
- Using data-driven methods, the authorization mechanism in Dime.Scheduler allows
  for fine-grained security workflows.
- Make sure to check the documentation and troubleshooting articles before contacting
  our support team.
- Be as clear as possible and include as much information as possible and always include
  the log files.
- MS Entra ID authentication scheme is supported.
- This endpoint is not available yet.
- Inserts or updates an action uri.
- Only URI's with matching SourceApp and SourceType fields are shown.
- This endpoint is available in the import API endpoint /import via the procedure
  mboc_upsertCaption.
- Notifications can be applied for Global, Job, Task, or Appointment.
- Use the enum integer value for Back-Office System, Authentication Type, and API
  type.
- Use the enum integer value, not the text value.
errors:
- Invalid or incomplete connector entry.
- No connector for this item.
- Backoffice system is unavailable.
- There is no connector for this item.
- The connector entry is invalid or incomplete.
- The backoffice system is unavailable.
- '408: Request Timeout'
- '429: Throttle API calls'
- '502: Bad Gateway'
- '503: Service Unavailable'
- '504: Gateway Timeout'
- '408: Request timeout - Consider retrying.'
- '429: Throttle API calls.'
- '502: Bad gateway - Retry may succeed.'
- '503: Service unavailable - Retry may succeed.'
- '504: Gateway timeout - Retry may succeed.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.dimescheduler.com
  auth:
    type: oauth2
    flow: jwt
    token_url: https://api.dimescheduler.com/token
    location: header
    header_name: Authorization
source_metadata: null
