resources:
- name: Inventory Position Update
  endpoint:
    path: /essential-knowledge/self-service-ipu-ipc-visibility-overview
    method: GET
    data_selector: usage
- name: Inventory Position Change
  endpoint:
    path: /essential-knowledge/self-service-ipu-ipc-visibility-overview
    method: GET
    data_selector: usage
- name: Core
  endpoint:
    path: /reference/modules/core
    method: GET
- name: Order
  endpoint:
    path: /reference/modules/order
    method: GET
- name: Fulfillment
  endpoint:
    path: /reference/modules/fulfillment
    method: GET
- name: Inventory
  endpoint:
    path: /reference/modules/inventory
    method: GET
- name: Functional Practitioner Certification
  endpoint:
    path: /essential-knowledge/certification-study-guide-functional-practitioner
    method: GET
    data_selector: certification_details
    params: {}
- name: reference_modules
  endpoint:
    path: /api/reference/modules
    method: GET
    data_selector: records
- name: connectors
  endpoint:
    path: /api/connectors
    method: GET
    data_selector: records
- name: sdks
  endpoint:
    path: /api/sdks
    method: GET
    data_selector: records
- name: categories
  endpoint:
    path: /categories
    method: GET
- name: order
  endpoint:
    path: /api/v1/orders
    method: GET
    data_selector: orders
- name: product
  endpoint:
    path: /api/v1/products
    method: GET
    data_selector: products
- name: knowledge_tracks
  endpoint:
    path: /knowledge_tracks
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /api/v1/orders
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: fulfilment_options
  endpoint:
    path: /fulfilment-options
    method: GET
    data_selector: data
    params: {}
- name: fulfillment_choice
  endpoint:
    path: /api/v1/fulfillment_choice
    method: GET
    data_selector: data
    params: {}
- name: order
  endpoint:
    path: /api/v1/order
    method: GET
    data_selector: data
    params: {}
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: items
    params: {}
- name: category
  endpoint:
    path: /categories
    method: GET
    data_selector: items
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: fulfillments
  endpoint:
    path: /fulfillments
    method: GET
    data_selector: data
    params: {}
- name: order
  endpoint:
    path: /api/v1/orders
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: product
  endpoint:
    path: /api/v1/products
    method: GET
    data_selector: data
    params: {}
- name: webhook
  endpoint:
    path: /api/v4.1/webhooks
    method: POST
    data_selector: event
    params: {}
- name: activeContext
  endpoint:
    path: /activeContext
    method: GET
    data_selector: activeContext
    params: {}
- name: activeLocation
  endpoint:
    path: /activeLocation
    method: GET
    data_selector: activeLocation
    params: {}
- name: activeRetailer
  endpoint:
    path: /activeRetailer
    method: GET
    data_selector: activeRetailer
    params: {}
- name: activeUser
  endpoint:
    path: /activeUser
    method: GET
    data_selector: activeUser
    params: {}
- name: thresholds
  endpoint:
    path: /thresholds
    method: GET
    data_selector: results
    params: {}
- name: manifest_fragment
  endpoint:
    path: /manifest/fragment
    method: GET
    data_selector: fragment
    params: {}
- name: createOrder
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createOrder
    params: {}
- name: getCustomer
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.getCustomer
    params: {}
- name: order_update
  endpoint:
    path: /connect/order/webhook/status-update
    method: POST
    data_selector: event
    params: {}
- name: payment_authorise
  endpoint:
    path: /connect/payment/authorise
    method: POST
    data_selector: event
    params: {}
- name: payment_capture
  endpoint:
    path: /connect/payment/capture
    method: POST
    data_selector: event
    params: {}
- name: payment_refund
  endpoint:
    path: /connect/payment/refund
    method: POST
    data_selector: event
    params: {}
- name: payment_reauthorise
  endpoint:
    path: /connect/payment/reauthorise
    method: POST
    data_selector: event
    params: {}
- name: product_category_upsert
  endpoint:
    path: /connect/product/category/upsert
    method: POST
    data_selector: event
    params: {}
- name: product_upsert
  endpoint:
    path: /connect/product/upsert
    method: POST
    data_selector: event
    params: {}
- name: OMS Manifest
  endpoint:
    path: /_plugins/oms/manifests/fc.mystique.manifest.oms.json
    method: GET
- name: Dashboards Fragment
  endpoint:
    path: /_plugins/oms/manifests/fc.mystique.manifest.oms.fragment.dashboard.json
    method: GET
- name: Order Management Fragment
  endpoint:
    path: /_plugins/oms/manifests/fc.mystique.manifest.oms.fragment.ordermanagement.json
    method: GET
- name: Mixed Baskets Order Management Fragment
  endpoint:
    path: /_plugins/oms/manifests/fc.mystique.manifest.oms.fragment.ordermanagement.mixedbasket.json
    method: GET
- name: Availability Fragment
  endpoint:
    path: /_plugins/oms/manifests/fc.mystique.manifest.oms.fragment.availability.json
    method: GET
- name: Products Fragment
  endpoint:
    path: /essential-knowledge/how-to-transform-v1-0-manifest-into-the-manifest-v2-0
    method: GET
- name: Inventory Fragment
  endpoint:
    path: /_plugins/oms/manifests/fc.mystique.manifest.oms.fragment.globalinventory.json
    method: GET
- name: Unified View of Inventory Fragment
  endpoint:
    path: /_plugins/oms/manifests/fc.mystique.manifest.oms.fragment.inventory.unifiedview.json
    method: GET
- name: Stores Fragment
  endpoint:
    path: /_plugins/oms/manifests/fc.mystique.manifest.oms.fragment.stores.json
    method: GET
- name: Insights Fragment
  endpoint:
    path: /_plugins/oms/manifests/fc.mystique.manifest.oms.fragment.insights.json
    method: GET
- name: Admin Fragment
  endpoint:
    path: /_plugins/oms/manifests/fc.mystique.manifest.oms.fragment.admin.json
    method: GET
- name: waves
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.waves
    params: {}
- name: ExampleRule
  endpoint:
    path: /example/rule
    method: GET
    data_selector: records
    params: {}
- name: workflow
  endpoint:
    path: /api/v4.1/workflow
    method: PUT
- name: CREATE Ruleset
  endpoint:
    path: /rulesets
    method: POST
    data_selector: rulesets
    params: {}
- name: CREATED Status
  endpoint:
    path: /statuses
    method: POST
    data_selector: statuses
    params: {}
- name: Categories
  endpoint:
    path: /workflow/categories
    method: GET
- name: workflow
  endpoint:
    path: /api/v4.1/workflow/{{retailer_id}}/ORDER::CC
    method: GET
- name: update_workflow
  endpoint:
    path: /api/v4.1/workflow
    method: PUT
- name: Ruleset
  endpoint:
    path: /rulesets
    method: POST
    data_selector: rulesets
    params: {}
- name: Trigger
  endpoint:
    path: /triggers
    method: POST
    data_selector: triggers
    params: {}
- name: Rule
  endpoint:
    path: /rules
    method: POST
    data_selector: rules
    params: {}
- name: workflow_settings
  endpoint:
    path: /api/workflow/settings
    method: POST
    data_selector: settings
    params: {}
- name: CreateWaveByExpiry
  endpoint:
    path: /createWaveByExpiry
    method: POST
    data_selector: attributes.fulfilmentArticles
    params: {}
- name: CreateWaveByUserSelection
  endpoint:
    path: /createWaveByUserSelection
    method: POST
    data_selector: attributes.fulfilmentIds
    params: {}
- name: PickConfirm
  endpoint:
    path: /pickConfirm
    method: POST
    data_selector: attributes.fulfilmentArticles
    params: {}
- name: fulfilmentArticles
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: WaveDispatchInitiated
  endpoint:
    path: /waveDispatch/initiated
    method: POST
    data_selector: attributes.fulfilmentArticles
    params: {}
- name: UPSERT_CATEGORY
  endpoint:
    path: /api/v4.1/event/async
    method: POST
    data_selector: attributes
- name: UPSERT_PRODUCT
  endpoint:
    path: /api/v4.1/event/async
    method: POST
    data_selector: attributes
- name: VirtualCatalogueEvent
  endpoint:
    path: /virtual_catalogue_event
    method: POST
    data_selector: attributes
    params:
      locationRef: <locationRef>
      productRef: <productRef>
- name: VirtualCatalogueEvent
  endpoint:
    path: /virtual-catalogue-event
    method: POST
    data_selector: attributes
    params: {}
- name: Event API
  endpoint:
    path: /essential-knowledge/event-api
    method: GET
- name: products
  endpoint:
    path: /{{project-key}}/products
    method: GET
    data_selector: products
- name: product_by_id
  endpoint:
    path: /{{project-key}}/products/{{product-id}}
    method: GET
    data_selector: product
- name: Component Registry
  endpoint:
    path: /register/component
    method: POST
    data_selector: components
    params: {}
- name: Field Registry
  endpoint:
    path: /register/field
    method: POST
    data_selector: fields
    params: {}
- name: Template Registry
  endpoint:
    path: /register/template
    method: POST
    data_selector: templates
    params: {}
- name: ProductCard
  endpoint:
    path: /ProductCard
    method: GET
    data_selector: component
    params: {}
- name: event-failure-summary-monitor
  endpoint:
    path: /actuator/sdkroutes
    method: GET
    data_selector: active
    params: {}
- name: notification
  endpoint:
    path: /actuator/sdkhandlers
    method: GET
    data_selector: active
    params: {}
- name: sqs_connector
  endpoint:
    path: /my_queue_id
    method: GET
- name: AWS
  endpoint:
    path: /services/data/v2.0/sub-processors/AWS
    method: GET
- name: Google
  endpoint:
    path: /services/data/v2.0/sub-processors/Google
    method: GET
- name: Versori
  endpoint:
    path: /services/data/v2.0/sub-processors/Versori
    method: GET
- name: Happiest Minds
  endpoint:
    path: /services/data/v2.0/sub-processors/HappiestMinds
    method: GET
- name: Atlassian
  endpoint:
    path: /services/data/v2.0/sub-processors/Atlassian
    method: GET
- name: Ping Identity
  endpoint:
    path: /services/data/v2.0/sub-processors/PingIdentity
    method: GET
- name: Fluent Commerce (UK)
  endpoint:
    path: /services/data/v2.0/sub-processors/FluentCommerceUK
    method: GET
- name: Fluent Commerce (North America)
  endpoint:
    path: /services/data/v2.0/sub-processors/FluentCommerceNorthAmerica
    method: GET
- name: Fluent Commerce (France)
  endpoint:
    path: /services/data/v2.0/sub-processors/FluentCommerceFrance
    method: GET
- name: roles_permissions
  endpoint:
    path: /roles-permissions
    method: GET
    data_selector: records
    params: {}
- name: user_management
  endpoint:
    path: /by-type/user-creation-and-editing-mutations
    method: GET
    data_selector: users
    params: {}
- name: roles_permissions
  endpoint:
    path: /essential-knowledge/roles-permissions
    method: GET
    data_selector: roles_permissions
    params: {}
- name: sso_configuration
  endpoint:
    path: /essential-knowledge/sso
    method: GET
    data_selector: sso_configuration
    params: {}
- name: Fluent Order Management
  endpoint:
    path: /_plugins/oms/manifests/fc.mystique.manifest.oms.json
    method: GET
- name: Fluent Store
  endpoint:
    path: /_plugins/store/manifests/fc.mystique.manifest.store.json
    method: GET
- name: Fluent Big Inventory
  endpoint:
    path: /_plugins/inventory/manifests/fc.mystique.manifest.inventory.json
    method: GET
- name: feeds
  endpoint:
    path: /essential-knowledge/feeds-interface
    method: GET
    data_selector: feeds
- name: sources
  endpoint:
    path: /essential-knowledge/sources-interface
    method: GET
    data_selector: sources
- name: products
  endpoint:
    path: /essential-knowledge/products-interface
    method: GET
    data_selector: products
- name: inventory
  endpoint:
    path: /essential-knowledge/inventory-interface
    method: GET
    data_selector: inventory
- name: stores
  endpoint:
    path: /essential-knowledge/store-interface
    method: GET
    data_selector: stores
- name: insights
  endpoint:
    path: /essential-knowledge/insights
    method: GET
    data_selector: insights
- name: admin
  endpoint:
    path: /essential-knowledge/admin-interface
    method: GET
    data_selector: admin
- name: myVariantProducts
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.myVariantProducts
    params: {}
- name: cancel_order_workflow
  endpoint:
    path: /path/to/cancel_order_workflow
    method: POST
    data_selector: rules
    params: {}
- name: order_manifest
  endpoint:
    path: /path/to/order_manifest
    method: POST
    data_selector: props
    params:
      defaultPageSize: 100
- name: SendCanceltoWMS
  endpoint:
    path: /sendCancelToWMS
    method: POST
    data_selector: actions
    params: {}
- name: userAction
  endpoint:
    path: /actions/userAction
    method: POST
    data_selector: actions.primary
    params: {}
- name: orders
  endpoint:
    path: orders
    method: POST
    data_selector: orders
    params:
      orders_first: 100
- name: RETURN_REASON
  endpoint:
    path: /return-reason
    method: GET
    data_selector: items
    params: {}
- name: Schema
  endpoint:
    path: /schema
    method: GET
    data_selector: items
    params: {}
- name: Help Menu
  endpoint:
    path: /custom/help/menu
    method: GET
- name: Mixed Baskets Functionality
  endpoint:
    path: /essential-knowledge/configure-ui-for-mixed-baskets
    method: GET
    data_selector: steps
    params: {}
- name: orders
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.orders
    params:
      orders_first: 100
- name: customers
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.customers
    params:
      customers_first: 100
- name: order_dashboard
  endpoint:
    path: /order_dashboard
    method: GET
    data_selector: metrics
    params: {}
- name: fulfillment_dashboard
  endpoint:
    path: /fulfillment_dashboard
    method: GET
    data_selector: metrics
    params: {}
- name: inventory_dashboard
  endpoint:
    path: /inventory_dashboard
    method: GET
    data_selector: metrics
    params: {}
- name: return_dashboard
  endpoint:
    path: /return_dashboard
    method: GET
    data_selector: metrics
    params: {}
- name: cancellation_rate
  endpoint:
    path: /metrics/cancellation_rate
    method: GET
    data_selector: data
    params: {}
- name: fulfillments
  endpoint:
    path: /metrics/fulfillments
    method: GET
    data_selector: records
    params:
      status: STATUS_COMPLETE
- name: failed_fulfillments
  endpoint:
    path: /metrics/failed_fulfillments
    method: GET
    data_selector: fulfillments
    params:
      status: STATUS_FAILED
- name: total_partially_fulfilled_fulfillments
  endpoint:
    path: /api/v1/fulfillments/partially-fulfilled
    method: GET
    data_selector: fulfillments
    params:
      status: PARTIALLY_FULFILLED
- name: fulfillment_location_metric
  endpoint:
    path: /fulfillment/location/metrics
    method: GET
    data_selector: fulfillments
    params:
      status: STATUS_COMPLETE
- name: total_correction_metric
  endpoint:
    path: /api/total_correction_metric
    method: GET
    data_selector: records
    params: {}
- name: sold_inventory
  endpoint:
    path: /sold_inventory
    method: GET
    data_selector: total_inventory_units
    params:
      type: SALE
- name: Inventory Coverage Days Metric
  endpoint:
    path: /inventory/coverage/days
    method: GET
    data_selector: metrics
    params:
      TYPE_SALE: SALE
- name: average_return_order_items
  endpoint:
    path: /api/v1/average_return_order_items
    method: GET
    data_selector: returnOrder.items
    params:
      status: COMPLETE_STATUS
- name: return_orders
  endpoint:
    path: /api/returnOrders
    method: GET
    data_selector: returnOrders
    params:
      status: COMPLETE
- name: Return Rate Metric
  endpoint:
    path: /fluent/analytics/return-rate-metric
    method: GET
    data_selector: return_rate_data
- name: Return Reason Ratio
  endpoint:
    path: /path/to/return-reason-ratio
    method: GET
    data_selector: records
    params:
      RETURNED_STATUS: COMPLETE
- name: Webhook Audit Events
  endpoint:
    path: /api/v4.1/event
    method: GET
    data_selector: results
    params:
      name: Send Webhook
      category: ACTION
      from: '{{dateStringFormatter (dateSubtract hours=24) ''YYYY-MM-DD[T]HH:mm:ss.SSS[Z]''
        true}}'
- name: Webhook Details
  endpoint:
    path: /webhook/details
    method: GET
    data_selector: records
- name: event
  endpoint:
    path: api/v4.1/event
    method: GET
    data_selector: results
    params:
      context.entityType: ORDER
      eventType: ORCHESTRATION
      eventStatus: FAILED
      from: '{{dateStringFormatter (dateAdd hours=-24) ''YYYY-MM-DD[T]HH:mm:ss.SSS[Z]''
        true}}'
- name: webhook
  endpoint:
    path: /core.SendWebhook
    method: POST
    data_selector: props
    params:
      setting: webhook.payment.capture
- name: webhook
  endpoint:
    path: /api/v1/fluent-connect/webhook
    method: POST
    data_selector: payload
    params: {}
- name: order_fc_list
  endpoint:
    path: /fc/mystique/manifest/oms/fragment/ordermanagement
    method: GET
    data_selector: columns
    params: {}
- name: createOrderWizard
  endpoint:
    path: /createOrderWizard
    method: POST
    data_selector: data
    params: {}
- name: plugin
  endpoint:
    path: /orchestration/rest/v1/plugin
    method: GET
    data_selector: plugin
    params: {}
- name: workflow
  endpoint:
    path: /api/v4.1/workflow/{{retailer_id}}/LOCATION::STORE
    method: GET
    data_selector: workflow
    params: {}
- name: locations
  endpoint:
    path: /locations
    method: GET
    data_selector: locations
    params:
      locationRef: '[String]'
- name: networks
  endpoint:
    path: /networks
    method: GET
    data_selector: networks
    params: {}
- name: waveById
  endpoint:
    path: /api/waveById
    method: POST
    data_selector: data
    params:
      id: '{{params.id}}'
- name: createRole
  endpoint:
    path: /graphql
    method: POST
    data_selector: createRole
    params: {}
- name: updateUser
  endpoint:
    path: /graphql
    method: POST
    data_selector: updateUser
    params: {}
- name: addManifestReference
  endpoint:
    path: /graphql
    method: POST
    data_selector: addManifestReference
    params: {}
- name: storeLocation
  endpoint:
    path: /graphql
    method: POST
    data_selector: storeLocation
    params: {}
- name: OpeningSchedule
  endpoint:
    path: ./fields/location/OpeningSchedule
    method: GET
- name: CreateReturnOrderFromOrder
  endpoint:
    path: /api/returnOrder
    method: POST
    data_selector: returnOrder
    params: {}
- name: CopyReturnAttributesToOrderItems
  endpoint:
    path: /api/copyReturnAttributes
    method: POST
    data_selector: copyReturnAttributes
    params: {}
- name: CalculateReturnableQuantityForOrderItems
  endpoint:
    path: /api/calculateReturnableQuantity
    method: POST
    data_selector: calculateReturnableQuantity
    params: {}
- name: CalculateReturnDateLimitForOrderItems
  endpoint:
    path: /api/calculateReturnDateLimit
    method: POST
    data_selector: calculateReturnDateLimit
    params: {}
- name: AssignRmaToReturnOrder
  endpoint:
    path: /api/assignRma
    method: POST
    data_selector: assignRma
    params: {}
- name: ValidateReturnOrderItems
  endpoint:
    path: /api/validateReturnOrderItems
    method: POST
    data_selector: validateReturnOrderItems
    params: {}
- name: CreateReturnFulfilments
  endpoint:
    path: /api/createReturnFulfilments
    method: POST
    data_selector: createReturnFulfilments
    params: {}
- name: SendEventIfAllReturnFulfilmentsInStatuses
  endpoint:
    path: /api/sendEventIfAllReturnFulfilments
    method: POST
    data_selector: sendEventIfAllReturnFulfilments
    params: {}
- name: SendEventIfAnyReturnFulfilmentInStatuses
  endpoint:
    path: /api/sendEventIfAnyReturnFulfilment
    method: POST
    data_selector: sendEventIfAnyReturnFulfilment
    params: {}
- name: SendEventIfReturnFulfilmentAttributeEqualsTo
  endpoint:
    path: /api/sendEventIfReturnFulfilmentAttribute
    method: POST
    data_selector: sendEventIfReturnFulfilmentAttribute
    params: {}
- name: SendEventIfReturnOrderIsRMA
  endpoint:
    path: /api/sendEventIfReturnOrderIsRMA
    method: POST
    data_selector: sendEventIfReturnOrderIsRMA
    params: {}
- name: SendEventIfReturnOrderIsNotRMA
  endpoint:
    path: /api/sendEventIfReturnOrderIsNotRMA
    method: POST
    data_selector: sendEventIfReturnOrderIsNotRMA
    params: {}
- name: ReturnOrderCreated
  endpoint:
    path: /api/return_order_created
    method: POST
    data_selector: data
- name: ProcessExchangeOrder
  endpoint:
    path: /api/process_exchange_order
    method: POST
    data_selector: data
- name: ResumeExchangeOrder
  endpoint:
    path: /api/resume_exchange_order
    method: POST
    data_selector: data
- name: CREATE
  endpoint:
    path: /returnOrder/create
    method: POST
    data_selector: returnOrder
    params: {}
- name: ConfirmReturnOrder
  endpoint:
    path: /returnOrder/confirm
    method: POST
    data_selector: confirmReturnOrder
    params: {}
- name: ProcessStandardReturnOrder
  endpoint:
    path: /returnOrder/processStandard
    method: POST
    data_selector: processStandardReturnOrder
    params: {}
- name: ProcessReturnOrderWithExchange
  endpoint:
    path: /returnOrder/processWithExchange
    method: POST
    data_selector: processReturnOrderWithExchange
    params: {}
- name: RejectReturnOrder
  endpoint:
    path: /returnOrder/reject
    method: POST
    data_selector: rejectReturnOrder
    params: {}
- name: ReturnOrder
  endpoint:
    path: /api/v1/returnorders
    method: GET
    data_selector: records
- name: RETURN_CONDITION
  endpoint:
    path: /RETURN_CONDITION
    method: GET
    data_selector: records
    params: {}
- name: RETURN_REASON
  endpoint:
    path: /RETURN_REASON
    method: GET
    data_selector: records
    params: {}
- name: RETURN_REJECTION_REASON
  endpoint:
    path: /RETURN_REJECTION_REASON
    method: GET
    data_selector: records
    params: {}
- name: EXCHANGE_ORDER_NOTIFICATION_STATUS
  endpoint:
    path: /EXCHANGE_ORDER_NOTIFICATION_STATUS
    method: GET
    data_selector: records
    params: {}
- name: DEFAULT_RETURN_DESTINATION_LOCATION
  endpoint:
    path: /DEFAULT_RETURN_DESTINATION_LOCATION
    method: GET
    data_selector: records
    params: {}
- name: fc.mystique.manifest.oms.fragment.ordermanagement
  endpoint:
    path: /path/to/ordermanagement
    method: POST
    data_selector: settings
    params: {}
- name: fc.oms.mystique.order.search.variantProduct.statuses
  endpoint:
    path: /path/to/variantProduct/statuses
    method: POST
    data_selector: statuses
    params: {}
- name: store_dashboard
  endpoint:
    path: store_dashboard
    method: GET
    data_selector: routes
    params: {}
- name: fulfilment_expired30Mins
  endpoint:
    path: 'fulfilments(fromLocation: {ref: $ordersAwaitingPickFromLocationRef}, status:
      $ordersAwaitingPickStatus, expiryTime:{from:$fulfilmentExpiryNow, to:$fulfilmentExpiry30mins})'
    method: POST
    data_selector: edges
    params: {}
- name: fulfilment_expired60Mins
  endpoint:
    path: 'fulfilments(fromLocation: {ref: $ordersAwaitingPickFromLocationRef}, status:
      $ordersAwaitingPickStatus, expiryTime:{from:$fulfilmentExpiry30mins, to:$fulfilmentExpiry60mins})'
    method: POST
    data_selector: edges
    params: {}
- name: fulfilment_expired120Mins
  endpoint:
    path: 'fulfilments(fromLocation: {ref: $ordersAwaitingPickFromLocationRef}, status:
      $ordersAwaitingPickStatus, expiryTime:{from:$fulfilmentExpiry60mins, to:$fulfilmentExpiry120mins})'
    method: POST
    data_selector: edges
    params: {}
- name: fulfilment_awaitingwave
  endpoint:
    path: 'fulfilments(fromLocation: {ref: $ordersAwaitingPickFromLocationRef}, status:
      $ordersAwaitingPickStatus)'
    method: POST
    data_selector: edges
    params: {}
- name: locker_locations
  endpoint:
    path: /services/data/vXX.X/sobjects/LockerLocations
    method: GET
    data_selector: records
    params: {}
- name: fulfillment_plans
  endpoint:
    path: /services/data/vXX.X/sobjects/FulfillmentPlans
    method: GET
    data_selector: records
    params: {}
- name: UpdateOrderAttributeForCollectionPoint
  endpoint:
    path: /path/to/api/UpdateOrderAttributeForCollectionPoint
    method: POST
    data_selector: rules
    params: {}
- name: plugin_upload
  endpoint:
    path: /plugin/upload
    method: POST
- name: plugin_install
  endpoint:
    path: /plugin/install
    method: POST
- name: plugin_check
  endpoint:
    path: /plugin
    method: GET
- name: CopyOrderIdToOrderRef2
  endpoint:
    path: /orchestration/rest/v1/plugin
    method: GET
    data_selector: null
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: POST
    data_selector: edges
    params:
      productRef: productRef
- name: fulfilments
  endpoint:
    path: /fulfilments
    method: POST
    data_selector: edges
    params:
      productRef: productRef
      status: status
- name: customerWithOrders
  endpoint:
    path: customerWithOrders
    method: GET
    data_selector: customers
    params: {}
- name: customerOrders
  endpoint:
    path: customerOrders
    method: GET
    data_selector: orders
    params:
      orders_first: 100
- name: order
  endpoint:
    path: /module/config/order
    method: POST
- name: inventory
  endpoint:
    path: /module/config/inventory
    method: POST
- name: sample_data
  endpoint:
    path: /module/config/b2c-sample-data
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AccessToken
  endpoint:
    path: /connections/resources/username
    method: POST
    data_selector: token
    params:
      access_token_time_to_live: '300'
- name: AuthenticationPolicy
  endpoint:
    path: /experiences/authentication
    method: PATCH
    data_selector: policy
    params:
      last_sign_on_older_than: '7'
- name: custom_click_and_collect_pack_label
  endpoint:
    path: /by-type/create-a-custom-click-and-collect-pack-label
    method: GET
- name: configure_printable_pack_slips
  endpoint:
    path: /by-type/configure-printable-pack-slips-for-assign-items-to-parcels
    method: GET
- name: create_custom_printable_pack_slip
  endpoint:
    path: /by-type/create-a-custom-printable-pack-slip
    method: GET
- name: create_template_helper
  endpoint:
    path: /by-type/create-a-template-helper-to-display-the-createdon-date-in-a-specific-time-zone
    method: GET
- name: enable_status_filter
  endpoint:
    path: /by-type/enable-the-status-filter-with-predefined-values
    method: GET
- name: bootstrap_account
  endpoint:
    path: /by-type/bootstrap-an-account-using-the-fluent-cli
    method: GET
- name: billing_account_workflow
  endpoint:
    path: /workflow
    method: PUT
    data_selector: null
    params: {}
- name: Retailer settings
  endpoint:
    path: /path/to/retailler/settings
    method: GET
- name: workflow by Retailer Id and Workflow Name
  endpoint:
    path: /path/to/workflow
    method: GET
- name: Create DEFAULT_TAX_TYPE setting
  endpoint:
    path: /path/to/create/default_tax_type
    method: POST
- name: Create APPEASEMENT_REASON setting
  endpoint:
    path: /path/to/create/appeasement_reason
    method: POST
- name: Create GST setting
  endpoint:
    path: /path/to/create/gst
    method: POST
- name: OrderAddressChange
  endpoint:
    path: /path/to/order/address/change
    method: POST
    data_selector: rules
    params: {}
- name: workflow
  endpoint:
    path: /api/v4.1/workflow
    method: PUT
- name: DEFAULT_TAX_TYPE
  endpoint:
    path: /settings
    method: POST
- name: EXCHANGE_REASON
  endpoint:
    path: /settings
    method: POST
- name: GST
  endpoint:
    path: /settings
    method: POST
- name: fc.mystique.search.product.list
  endpoint:
    path: /settings
    method: POST
- name: fc.mystique.search.product.query
  endpoint:
    path: /settings
    method: POST
- name: sourcing_profile
  endpoint:
    path: /sourcing/profiles
    method: GET
    data_selector: profiles
    params: {}
- name: createSourcingProfile
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createSourcingProfile
    params: {}
- name: '[[account.id]].order.CreateFulfilmentWithSourcingProfile'
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      sourcingProfileRef: USA_TIERED
- name: '{{account}}.order.CreateRejectedFulfilment'
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      systemRejectedLocationRef: RJT_USA
- name: createSourcingProfile
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createSourcingProfile
    params: {}
- name: '[[account.id]].order.CreateFulfilmentWithSourcingProfile'
  endpoint:
    path: /order/CreateFulfilmentWithSourcingProfile
    method: POST
    data_selector: props
    params:
      sourcingProfileRef: Europe
- name: '{{account}}.order.CreateRejectedFulfilment'
  endpoint:
    path: /order/CreateRejectedFulfilment
    method: POST
    data_selector: props
    params:
      systemRejectedLocationRef: RJT_EU
- name: createSourcingProfile
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createSourcingProfile
    params: {}
- name: sourcingProfile
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.sourcingProfile
    params: {}
- name: sourcingProfile
  endpoint:
    path: /sourcingProfile
    method: POST
    data_selector: data.sourcingProfile
- name: activateSourcingProfile
  endpoint:
    path: /activateSourcingProfile
    method: POST
    data_selector: data.activateSourcingProfile
- name: Sourcing Criterion Functions
  endpoint:
    path: /sourcing/criteria/functions
    method: GET
    data_selector: criteria
- name: Default Sourcing Criteria
  endpoint:
    path: /sourcing/criteria/default
    method: GET
    data_selector: defaultCriteria
- name: createSourcingProfile
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createSourcingProfile
    params: {}
- name: createSetting
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createSetting
    params: {}
- name: statuses
  endpoint:
    path: /path/to/statuses
    method: GET
    data_selector: statuses
    params: {}
- name: CreateWaveByUserSelection
  endpoint:
    path: /waves/create
    method: GET
    data_selector: query
    params:
      locationId: '{{activeLocation.id}}'
      locationRef: '{{activeLocation.ref}}'
      status:
      - PICK
- name: orders
  endpoint:
    path: orders
    data_selector: edges
    params:
      orders_first: 100
      retailerId: '{{activeRetailer.id}}'
- name: returns
  endpoint:
    path: returns
    data_selector: edges
    params:
      returnOrders_first: 100
      retailerId: '{{activeRetailer.id}}'
- name: searchOrderByIDFilter
  endpoint:
    path: feature/searchOrderByIdFilter
    method: GET
    data_selector: query
    params: {}
- name: languages
  endpoint:
    path: /settings/i18n.languages
    method: POST
    data_selector: languages
    params: {}
- name: createComment
  endpoint:
    path: /actions/secondary/createComment
    method: POST
    data_selector: actions.secondary
    params: {}
- name: core
  endpoint:
    path: /building-blocks/core-reference-module-package
    method: GET
- name: order
  endpoint:
    path: /building-blocks/order-reference-module
    method: GET
- name: fulfilment
  endpoint:
    path: /building-blocks/fulfilment-reference-module
    method: GET
- name: inventory
  endpoint:
    path: /building-blocks/inventory-reference-module
    method: GET
- name: PickConfirmAndWaveComplete
  endpoint:
    path: /building-blocks/createparcelsforfulfilment
    method: POST
    data_selector: ruleSet
    params: {}
- name: FulfilmentPack
  endpoint:
    path: /building-blocks/sendeventonverifyingnoparcels
    method: POST
    data_selector: ruleSet
    params: {}
- name: VerifyFulfilmentItemsForPack
  endpoint:
    path: /building-blocks/sendeventfororderonverifyingrejections
    method: POST
    data_selector: ruleSet
    params: {}
- name: AllArticlesAwaitingCourierCollection
  endpoint:
    path: /building-blocks/sendeventfororderonverifyingrejections
    method: POST
    data_selector: ruleSet
    params: {}
- name: ModifyFulfilmentTypeToHDPFS
  endpoint:
    path: /building-blocks/order-reference-module
    method: POST
    data_selector: ruleSet
    params: {}
- name: AllArticlesAwaitingCourierCollection
  endpoint:
    path: /api/v4.1/transition
    method: POST
    data_selector: rules
    params: {}
- name: AllArticlesAwaitingCustomerCollection
  endpoint:
    path: /api/v4.1/transition
    method: POST
    data_selector: rules
    params: {}
- name: READY_FOR_PACK
  endpoint:
    path: /api/v4.1/transition
    method: POST
    data_selector: status
    params: {}
- name: ReassignRejections
  endpoint:
    path: /services/data/vXX.X/sobjects/ReassignRejections
    method: POST
    data_selector: response
    params: {}
- name: RejectFulfilment
  endpoint:
    path: /services/data/vXX.X/sobjects/RejectFulfilment
    method: POST
    data_selector: response
    params: {}
- name: VerifyParcels
  endpoint:
    path: /services/data/vXX.X/sobjects/VerifyParcels
    method: POST
    data_selector: response
    params: {}
- name: pack_label_setting
  endpoint:
    path: /api/v1/pack-label
    method: POST
    data_selector: label
    params:
      setting_name: fc.store.summary.print.pack.label
      lob_value: <..The HTML template, from Step 1..>
      context: RETAILER -or- ACCOUNT
      context_id: <RetailerID> -or- 0
- name: pack_slip
  endpoint:
    path: /pack_slips
    method: GET
    data_selector: pack_slips
    params: {}
- name: createOrder
  endpoint:
    path: /createOrder
    method: POST
    data_selector: id
    params: {}
- name: waveById
  endpoint:
    path: /waveById
    method: POST
    data_selector: id
    params: {}
- name: fragment_orders
  endpoint:
    path: fc.mystique.manifest.fragment.orders
    method: POST
    data_selector: data
    params: {}
- name: store_manifest
  endpoint:
    path: fc.mystique.manifest.store
    method: POST
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.users.edges
    params:
      first: 10
      ref: '%MANAGER%'
- name: updateUser
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.updateUser
    params: {}
- name: fulfilment_line_item_details
  endpoint:
    path: /fc/mystique/manifest/store/fragment/waves
    method: GET
    data_selector: data
    params: {}
- name: order_settings
  endpoint:
    path: /building-blocks/order-reference-module
    method: GET
    data_selector: settings
    params: {}
- name: fc.field.multistring
  endpoint:
    path: /fc/field/multistring
    method: GET
    data_selector: descendants
    params: {}
- name: locationRef
  endpoint:
    path: /locations
    method: GET
- name: tag1
  endpoint:
    path: /fc.order.options.tag1
    method: CREATE
    data_selector: options
    params:
      Value Type: JSON
- name: tag2
  endpoint:
    path: /fc.order.options.tag2
    method: CREATE
    data_selector: options
    params:
      Value Type: JSON
- name: tag3
  endpoint:
    path: /fc.order.options.tag3
    method: CREATE
    data_selector: options
    params:
      Value Type: JSON
- name: Order Item
  endpoint:
    path: SearchOrderByItem
    method: GET
    data_selector: orderItems
    params: {}
- name: filterComplex
  endpoint:
    path: /building-blocks/complex-filter-component
    method: GET
- name: Product Card
  endpoint:
    path: /building-blocks/ProductCard
    method: GET
    data_selector: component
    params: {}
- name: CloneAndForwardEvent
  endpoint:
    path: /rules/CloneAndForwardEvent
    method: POST
    data_selector: records
    params: {}
notes:
- If you are facing a technical issue in production, contact the support team via
  the support portal.
- Token authentication is mandatory for all Fluent integrations.
- Ensure proper authorization and notification for External Penetration Testing.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Access requires ACCOUNTUSAGE_VIEW permission
- UI is configured to display admin reports
- Support requests can be raised for reference module bugs and issues.
- Currently, only the Functional Practitioner Certification is available.
- The Connect Framework provides low-code tools for integrations.
- SDKs help streamline the development process.
- Integration requires an API Client to be created on commercetools.
- This module creates customers in Fluent when an order is created in Adobe and before
  it is pushed to Fluent.
- Session timeout for Fluent OMS can be configured for SSO users without external
  IDPs via Ping Identity.
- Session timeout for SSO users with external IDPs (Okta) can be configured.
- Requires OAuth2 setup with a connected app.
- Requires OAuth2 authentication setup.
- Ensure to handle token expiration properly.
- Requires setup of connected app in Fluent Commerce
- Some objects like Contact may return nulls in deeply nested fields
- Some entities may return nulls in deeply nested fields
- Requires setup of OAuth2 for authentication.
- API rate limits may apply.
- Uses OAuth2 with refresh token — requires setup of connected app in Fluent Commerce
- Some objects may return empty arrays if no data is available
- Content is licensed under Creative Commons Attribution 4.0 and Apache 2.0, with
  disclaimers emphasizing user responsibility.
- Some objects may return nulls in certain fields
- Utilizing HTTPS is mandatory for secure communication and data protection within
  Fluent Commerce Cloud.
- Retailers using firewalls or proxy servers need to allow access to *.fluentretail.com
  and *.parcelpoint.com.au
- IP address based restrictions do not work as the Fluent Commerce Cloud platform
  uses Content Delivery Network (CDN) and dynamic scaling.
- Exponential backoff is a standard error handling policy for network communications
  such as the Fluent APIs.
- For operations that create or update data, a check is recommended before retrying
  the API call to avoid unnecessary duplication.
- Only standard webhook ports 80 and 443 are supported.
- Webhooks should not be used to poll any third party or external system.
- The OMX Web App Manifest document is essential for configuring Fluent Platform web
  apps.
- Manifest updates can be done through Console/settings or directly via the API.
- If the `thresholds` object is removed, the badge color is always purple.
- Requires setup of connected app in Fluent Commerce.
- Ensure proper OAuth scopes are set for the application.
- The component fetches events using the REST Event API based on the selected search
  criteria.
- Extensible by design, this Module can be used as a base to build a solution that
  fits your business's unique needs.
- Webhook notifications are flexible and can be added at any point in the workflow.
- Fluent Store is built on the Fluent Order Management Experience (OMX) Platform.
- You should only override the main web app manifest if you are adding or removing
  fragments from the web app.
- 'Fragment manifest names are not enforced, however, typically use the following
  convention: fc.mystique.manifest.<web-app-name>.fragment.<fragment-name>'
- The navigation bar badge displays a count of items for a particular page.
- The Naming Best Practice of workflow rule and ruleset.
- Orchestrated Entities Types names should be short and descriptive (no more than
  25 characters)
- Basic structure includes a Java class implementing the com.fluentretail.rubix.v2.rule.Rule
  interface
- The rule's annotation needs to follow best practices
- The primary setting required to be enabled for working with Orchestration is that
  your Account should be RUBIX_ENABLED.
- This setting is TRUE by default for all new accounts, and should not be changed.
- The 'Create' Ruleset and 'CREATED' Status must use those values exactly to be valid.
- Never use the POST method, even when creating a Workflow for the first time.
- You can only add new Entities to a Workflow via the JSON document.
- Categories are fixed per entity. Modifying them in any way is not currently supported.
- When naming Rulesets, avoid including a colon (':') in the name as they sometimes
  have a semantic meaning to the front-end.
- Rules are the fundamental building block of Workflow.
- Most Rules will provide input areas for their required parameters or configuration.
- The CreateWaveByExpiry event requires fulfilmentArticles to be specified.
- The PickConfirm event requires fulfilmentArticles to be specified.
- The corresponding Inventory Module version is 1.3.0.
- The Workflow Framework Engine ensures that all Exceptions thrown out of Rules are
  recorded within the Orchestration Audit Events, accessible via the Event API.
- Don't swallow exceptions inside Rules, and always allow a caught exception to be
  re-thrown, or added as a cause to a new exception to ensure the cause is included
  in the Audit Events.
- Rubix will stop the current execution
- Rubix will not process any queued actions
- Rubix will log the exception in an orchestration audit Event, including a stack
  trace
- Rubix will mark the Event as failed
- Rubix will return an error response to the UI if the execution was triggered by
  a User Action
- Rubix will not create and attempt to execute a Ruleset Exception Event
- Product synchronization is handled through various queues and handlers.
- Automatic Delta Sync ensures continuous background synchronization.
- Single sign-on (SSO) is exclusive to the OMX framework, and API users are managed
  in Fluent IdP, not Corporate IdP, with creation possible through API.
- With Single Sign-On (SSO) enabled via an External Identity Provider IDP, only ADMIN
  and API users can generate API tokens and perform API tasks.
- DPA is the first step to start with SSO Enablement.
- All users need to be created in Fluent OMS.
- Developers can add new components to OMX via the registries.
- Component names don't need to follow any strict rules.
- Custom component development availability
- secrets and messages do not persist between server restarts
- localstack region is defaulted to 'us-east-1'
- The Fluent webhook API must remain public without authentication.
- Uses AWS Secrets Manager for credential management.
- Job scheduler type is set to new-scheduler.
- Modules are generic and never include any data that could be considered client specific.
- A Reference Module is designed to provide reference artifacts that can be used to
  create your own solutions.
- Reference Modules provide Domain Artifacts that can be used to speed up building
  your solutions.
- Fluent adheres to industry best-practices when it comes to securing sensitive information
  and services.
- Some objects may return nulls in deeply nested fields
- A role can be assigned to multiple users, and a user can be assigned multiple roles.
- Permissions are granular access controls and protect every GraphQL or REST API operations.
- Roles & Permissions are currently managed via Fluent, unless you decide to use the
  Fluent-supported SCIM Connector.
- GraphQL is always a POST HTTP Method.
- GraphQL returns 200 OK HTTP Status, even if errors occur.
- The user must have METRICS_VIEW permission to see data on the Sources and Feeds
  dashboards.
- An existing FluentCommerce Account with at least one Retailer will be setup
- Global Inventory will be enabled on the account
- At least one valid Location and Location user will be set up
- Uses GraphQL for querying data.
- Requires cancelling orders via the UI using the cancel order ruleset.
- The user action button will be displayed if the order attribute's SENT_TO_WMS value
  is not True.
- 'To hide a specific user action button, update the manifest with ''condition'':
  ''{{and false}}''.'
- The Configurable drawer has a parent component datasource by default.
- Configurable drawer datasource is limited by Page parent component datasource.
- Field adapts behavior based on the alwaysChangeValue property in the schema
- No limit to the number of components that can be added, but screen size should be
  considered.
- Mixed basket functionality is not covered in Fluent's base default pre-configurations.
- Baseline Mixed Baskets manifest will be applied after Step 2 is complete.
- Flexible Customer Filtering uses the SearchCustomerInput type.
- Caching settings mean fewer backend requests, leading to faster responses.
- Please use the Feedback button throughout the website to let us know if you want
  us to action something or provide feedback on your experience.
- Currency symbols may not be meaningful when viewing multiple retailers in different
  countries
- Only includes completed orders (excludes pending, cancelled, or rejected orders)
- Revenue timing is based on order completion, not payment processing
- High rejection rates directly impact customer satisfaction and delivery times
- May indicate overselling or poor inventory management
- Location-specific patterns can reveal operational inefficiencies
- Currency differences may affect multi-region comparisons
- Seasonal variations are normal for many retail categories
- Promotions and discounts will temporarily reduce AOV
- Time zone differences affect interpretation for multi-region retailers
- Seasonal and promotional events can significantly alter normal patterns
- Weekday vs. weekend patterns typically differ substantially
- Seasonal peaks may require temporary capacity adjustments
- Location performance varies based on local factors
- Expired fulfillments often result in customer disappointment
- May trigger automatic reassignment to other locations
- Can indicate unrealistic SLA expectations or operational constraints
- Distinguishes between completed and successful fulfillments
- Success criteria may include accuracy, timing, and quality measures
- Location-specific success patterns can guide improvement efforts
- Failed fulfillments require manual intervention and delay delivery.
- Different failure types require different corrective actions.
- Escalated fulfillments increase operational costs and processing time
- May indicate inadequate automation or complex customer requirements
- Patterns can guide automation improvement priorities
- Faster fulfillment generally improves customer satisfaction
- Speed must be balanced with accuracy and cost considerations
- Peak periods may temporarily extend fulfillment times
- Represents total investment in inventory assets
- Includes all inventory regardless of availability for sale
- Seasonal variations are normal for many businesses
- Corrections impact inventory accuracy and operational efficiency
- May indicate theft, damage, receiving errors, or system issues
- Patterns can guide improvement focus areas
- The correction quantity may fluctuate depending upon when the corrected inventory
  is reset by any incoming Inventory Batches.
- High-velocity items require frequent replenishment and prime locations
- Low-velocity items may need promotional support or discontinuation
- Seasonal products show expected velocity variations
- Coverage assumes current sales velocity continues
- Seasonal and promotional events can dramatically change velocity
- Lead times must be considered in coverage planning
- Sell-through rates vary significantly by product lifecycle stage
- Seasonal products may show periodic high and low rates
- New products typically start with lower rates
- 'Good performance: High sell-through rates indicate strong demand and efficient
  inventory'
- 'Potential issues: Low rates suggest overstocking or weak demand'
- 'Benchmark guidance: Varies by industry'
- Purchase frequency differs from sales volume (many small vs. few large orders)
- Frequently purchased items often drive customer loyalty
- May indicate essential or consumable product characteristics
- None
- Only includes completed return orders
- Revenue timing is based on return order completion, not refund processing
- May indicate systemic fulfillment or quality issues
- 'Good performance: Low items per return indicates isolated product issues'
- Use COUNT(returnOrders) where status = {COMPLETE_STATUS} for specific time period
- COMPLETE_STATUS is configurable with a default value of COMPLETE
- Return rates directly impact customer satisfaction and profitability
- Seasonal variations are normal, especially after gift-giving periods
- 'The webhook configuration setting is of type JSON using the structure: {"name":
  "String", "url": "String"}'
- 'Fluent''s Platform APIs are REST based and deal with platform related activities
  such as: Authentication (OAuth)'
- 'Fluent''s Domain related APIs are GraphQL based, and used for activities such as:
  Creation of entities like orders, fulfilment options, etc.'
- Fluent Commerce cryptographically signs each webhook request before sending to the
  target endpoint with a private key.
- The resulting signature is included in the 'flex.signature' header as part of the
  request.
- The signature is created by generating an MD5 checksum of the exact full request
  body and then signing the checksum with RSA and the Fluent Commerce private key.
- Each call to any external system through webhook may be logged in connector logs
  through the Event Log Service of the Connect SDK.
- Although it is possible to use any 3rd party library to connect to external systems,
  both OKHTTP and Spring RestTemplate are already available and should be preferred
  over alternatives as much as possible.
- Each call to any 3rd party system through webhook may be logged in connector logs
  through the Event Log Service of the Connect SDK.
- Webhook's payload will be processed provided that the webhook's name corresponds
  with a designated 'message handler' with a route matching the webhook name.
- The CC pack label can be customised via an HTML template.
- The printed pack label can be attached to the paper bag or parcel ready for customer
  collection in-store.
- This template helper is used to display createdOn dates in specific time zones.
- Part of additional data that is needed for correct work of Create Order Component
  was hardcoded.
- Mystique mutation action doesn't allow to group few input fields and uses one component
  for them.
- The component shows a loading indicator while fetching data.
- Extend Knowledge capabilities may not be available out of the box and may require
  additional development.
- Ensure to configure the Waves fragment for custom labels.
- The roles must be assigned to use certain features.
- Current solution does not provide some side functionality that needs to be implemented
  based on the client specific Workflow features.
- Requires setup of connected app in Fluent OMS
- Workflow defines the end to end process for return orders.
- Uses OAuth2 with refresh token — requires setup of connected app in Fluent OMS
- RMA type requires location information (Location Ref for Return Location or Customer
  Address for Courier PickUp).
- The default customer Address will be selected by the field name that contains First
  Name and Last Name of the Customer.
- 'Mandatory Cancellation Reason: When a user selects a line item for cancellation,
  a cancellation reason must be provided.'
- Uses OOTB components, so it does not require any custom components.
- The filter panel will now be visible on the UI with Order Ref and Product Ref as
  free text fields.
- Create a new setting for the new empty screen
- Refresh the store screen and you should be able to see the new Store Dashboard page
- Locker locations (VR01, VR02, VR03, VR04 & VR05) are part of the CC_NETWORK and
  must have an ACTIVE status.
- The attribute IS_LOCKER_STORE is used to identify locker stores, and if its value
  is set to 'true,' the store is treated as a locker collection point.
- The page uses the component fc.filterPanel to look up customer entries.
- The FC.list has a row expansion with fc.filterPanel to look up orders.
- The session timeout is managed with Access token time to live, Last sign-on older
  than, and Prompt for re-authentication controls which could be configured independently.
- It is strongly recommended to use equal values for all those controls to avoid inconsistent
  behaviour.
- User should be created in Fluent Web app and the username should be the same as
  the username in your corporate system.
- SSO is only supported by the OMX framework
- All API users will be stored in Fluent IdP and cannot be stored in Corporate IdP
  as it’s not an individual user and has a separate machine-to-machine authentication
  flow
- It is strongly recommended to use equal values for both Access token time to live
  and Last sign-on older than… controls to avoid inconsistent behaviour.
- Uses OAuth2 with refresh token — requires setup of connected app in Fluent
- The below configuration is only applicable for Fluent IdP customers, as clients
  with corporate IdP setup, need to use their own IdP and MFA configuration.
- Enables single sign-on access to Fluent OMS for multiple organizations.
- PingOne automatically routes users to the correct IdP by email domain.
- The Fluent deployment Environment type for the particular Fluent Account (SANDBOX,
  PRODUCTION, TEST, STAGING).
- It is possible to configure Change Address functionality via UI and via Postman.
- Order Revision implementation can be done either from the UI or via Postman.
- The Order Revision is only suitable for orders with order lines with unique product
  References.
- Strategies can be managed independently within a profile.
- Actions include activating, deactivating, and removing strategies.
- Changes create a new draft version of the profile.
- Conditions are order-independent, while criteria are executed in sequence and can
  be reordered by drag-and-drop.
- Adding, editing, or deleting conditions and criteria always creates a new draft
  version of the profile.
- Always add translations for newly created conditions and criteria to make the UI
  user-friendly and business-oriented.
- Creating a Sourcing Profile.
- Configuring the Order Sourcing.
- Creating a Sourcing Profile involves several strategies and conditions.
- 'Order Criteria deliberately: put Exclusion Criteria first, then your primary ranking
  Criterion, then tie-breakers'
- Provide exact values and enforce strict types via schema-driven components (e.g.,
  units in select, numeric bands)
- Test boundary and edge cases thoroughly
- Apply overrides in `fc.rubix.order.sourcing.criteria.custom` when tailoring Criteria
  for specific Accounts / Retailers
- Return only a float (use -1f for “exclude”)
- Validate required data from the context; handle nulls defensively
- Mirror conventions from reference Criteria (naming, logging, units)
- Creating a Sourcing Profile, including Sourcing Strategies with Conditions.
- Creating the Setting for Custom Sourcing Conditions requires specific input structure.
- You can acquire the following Certifications of Completion by completing the corresponding
  Learning Pathways.
- Ensure the file starts with [ and ends with ]
- Robust rules have been implemented as per best practice, unit and integration testing,
  and should be minimal in complexity and lines of code.
- Fluent does not provide a Remote Debugging capability whereby you can step through
  the code running in the deployed environment.
- The Rules SDK is a Java and Maven based software development kit.
- By default, Rules SDK expects JDK 8 and Maven 3.6.3, however later versions may
  be used by modifying the generated project and environment.
- 'If you are using a JDK later than version 8, make sure to follow the Optional guide
  after you have completed Step 2: Create a new Rules Plugin Project.'
- IntelliJ is recommended, however Visual Studio Code can also be used.
- A fully setup and functioning Fluent Account is required as of this activity.
- Master-Retailer Inventory Catalog will be used as the inventory source for the Virtual
  Catalog(s) associated with the corresponding Sub-Retailer(s).
- Cross-Retailer events sending is based on the 'Three-Level Fallback' logic.
- If a custom manifest utilizes a User Action for createWave, the User Action may
  not appear, as createWave has been renamed to waveCreate.
- This use case is for users who want to look up orders using the order ID.
- Typically, the graphQL query orderById is used to look up an order by ID.
- 'There are 2 Chinese Languages in writing: Traditional and Simplified.'
- Users must have ARTICLEITEM_VIEW permission to see packed items in parcels.
- The capability is not a reference solution but an extension.
- The packing process is responsive. It adjusts to the size of the screen and provides
  a seamless experience on all devices.
- Default grey colour for non-configurable statuses to preserve the same structure
  if you want to skip a configuration for some values.
- Use an HTML template to tailor the Order Labels to your specific needs.
- HTML template for pack slips can be customized.
- This method only allows you to use GraphQLQueries where the variable is at the topmost
  level.
- RUBIX_ENABLED retailer setting should be set to TRUE
- Please note, you can configure different parcel types on all Context levels.
- Ensure Fluent Store is enabled on your existing account
- The context switcher must be enabled for Fluent Store
- Ensure the query contains the correct field that you want to display on the table.
- To be qualified to obtain a Builders' Portal account, you must be part of an organization
  that has signed an NDA with Fluent Commerce.
- Settings will impact the timing of the fulfillment process for each order with the
  requested delivery date.
- 'The Multi-Value Search Component supports two search modes: Context Search (default)
  and Exact Search (configurable).'
- Invalid inputs are automatically rejected, preserving data integrity.
- Dynamically fetches and filters data based on a configurable GraphQL request.
- Wildcard-enabled, case-insensitive search applies to product name and reference
  fields.
- A new customer filter in the Orders query adds flexible lookup by customer name,
  email, phone, and other identifiers.
- A step by step guide on how to create Order Line / Order Item search page in Fluent
  Store
- Disable SSL verification globally for all Node.js applications using npm
- Disable certificate validation for HTTPS connections
- Uses GraphQL queries for data fetching
- The component can be configured via manifest or utilized during custom component
  development.
- Only use the 'Retailer Users' to log into the Fluent OMS web app
- Do not use the Account User credentials to log in to the administration interface
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check your OAuth token and permissions.'
- '404 Not Found: The requested resource does not exist.'
- '401 Unauthorized: Check credentials and token validity.'
- '404 Not Found: Verify the endpoint path.'
- '429 Too Many Requests: Implement exponential backoff.'
- '401 Unauthorized: Check API key or token'
- '404 Not Found: Verify endpoint path'
- '500 Internal Server Error: Try again later'
- '429 Too Many Requests: Reduce request frequency.'
- '401 Unauthorized: Check API key and token.'
- '400 Bad Request: Check request parameters and data format'
- '401 Unauthorized: Verify your authentication details'
- '429 Too Many Requests: Reduce request rate or wait before retrying'
- 'QUERY_TIMEOUT: Optimize query parameters'
- 'RetriesExceededException: Maximum retries exceeded for webhook.'
- 'ActionException: Failed due to issue in generating digital signature.'
- 'Invalid Event Name: Check the event name in your request.'
- 'Unauthorized Access: Ensure that your credentials are correct.'
- GraphQL API Error Codes Overview
- '400: Client Error - Bad Request'
- '401: Authorization Error - Invalid Bearer Token / No permission'
- '403: Authorization Error - Forbidden'
- '404: Client Error - Not Found'
- '500: Server Error'
- 'C0001E: Indicates that a GraphQL query was made with a higher complexity than is
  allowed by the server: Simplify the query by reducing: nesting, requested fields,
  or number of records'
- 'C0003E: Indicates that a Virtual View is still initializing and data is not yet
  available: Wait until the Virtual View setup completes and status changes to ACTIVE'
- 'C0011E: User has exceeded the allowable number of GraphQL queries in a given time
  period: Reduce query frequency'
- 'C0020E: User lacks required Permissions to execute the query or mutation: Review
  the required missing Permissions listed in the Error Message, Assign a User Role
  with the missing Permissions'
- 'C0100E: User passed a non-UTC date value: Pass a valid UTC date format'
- 'C0101E: User is querying on dates without passing from or to parameter: Pass at
  least one of the from or to parameters'
- 'C0102E: User is querying on dates without passing both from and to parameters:
  Pass both from and to parameters'
- 'C0103E: Indicates that a query timeframe exceeds allowed max range for the chosen
  granularity: Reduce timeframe or change granularity'
- 'C0120E: Validation error when entity cannot be found during operation (e.g., delete
  mutation): Ensure inputs refer to existing Entities accessible by the User'
- 'C0121E: Input ref violates a unique constraint: Verify the input ref'
- 'C0122E: Integer field does not allow negative values: Use a positive integer'
- 'C0123E: Input field violates a unique constraint: Verify the input field value'
- 'C0124E: Indicates that object validation failed (e.g., Inventory Feed): Verify
  that destination attributes are not empty, Ensure the following attributes are provided:
  AWS Account ID, AWS S3 Bucket Name'
- 'C0125E: User is querying on ranges without passing from or to parameter: Pass at
  least one of the from or to range parameters'
- 'CO127E: Indicates that the system could not find a Retailer Entity for the given
  Type: Ensure that the provided Type is valid and that a corresponding Retailer Entity
  exists and is accessible'
- 'C0128E: Indicates that multiple Products with the same Reference exist within a
  Product Catalog: Ensure Product Reference uniqueness within a Product Catalog'
- 'C0140E: Missing variables in a query or mutation: Pass the required variables in
  the query'
- 'C0141E: Input field value exceeds max character length: Find the character limit
  from the documentation, Pass a value within this limit'
- 'C0160E: Custom validation failed on a specific input field: Review and correct
  field value per schema custom validations'
- 'C0161E: Hash (#) character not allowed in this field input: Remove # character
  from input'
- 'C0162E: The provided timezone is not a valid timezone: Check if the timezone value
  matches an existing and valid TZ identifier in the Continent/City format'
- 'S0001E: Indicates that the Entity-level Permission Setting is missing: Raise a
  support ticket to set the Permission Setting'
- 'S0002E: Indicates a general server failure in processing a GraphQL request: Try
  again later or contact support if the issue persists'
- 'S0003E: Indicates that the Account Setting contains invalid JSON values: Update
  the value using the existing setting API'
- 'S0004E: Indicates a failure when trying to create a User in Fluent IDP: Raise a
  support ticket to investigate'
- 'S0005E: Indicates a failure when trying to update a User in Fluent IDP: Raise a
  support ticket to investigate'
- 'S0006E: Indicates that a failure occurred while trying to upsert an Inventory Feed:
  Review the Inventory Feed configuration or contact support'
- 'S0020E: Indicates an unspecified server-side error: Retry the request later, Contact
  support if the issue continues'
- 'S0030E: Indicates a failure in setting up the Virtual View: Contact support to
  investigate Virtual View setup issues'
- 'S0040E: Indicates a failure while MeQuery extracting username from a JWT access
  token: Retry the operation later, If not resolved, then raise a support ticket to
  investigate'
- 'S0126E: Indicates that Observability features are turned off: Contact support to
  enable Observability'
- 'S0127E: Indicates that Analytics query feature is turned off: Contact support to
  enable Analytics'
- 'Error: There is no setting {{settingName}}'
- 'Error: Catalog in {{settingForDefaultCatalogue}} setting should be aggregate'
- If you are swallowing exceptions or throwing new exceptions excluding the root cause
  exception, then you may well be missing key information that will help you identify
  the root cause of the issue.
- '401 Unauthorized: Check your authentication tokens.'
- '401 Unauthorized: Recheck user roles or access permissions'
- Exact Search may enforce strict, case-sensitive matching, which could lead to no
  matches found.
- 'UNABLE_TO_GET_ISSUER_CERT_LOCALLY: Error during the CLI installation'
- 'AxiosError: Got error: unable to get local issuer certificate'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - ORCHESTRATION_ADMIN
  - DEVELOPER
  - createRole
  - updateUser
  - Retailer Users
client:
  base_url: https://api.fluentcommerce.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.fluentcommerce.com/oauth2/token
    client_id: '{{ dlt.secrets[''fluent_client_id''] }}'
    client_secret: '{{ dlt.secrets[''fluent_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''fluent_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
