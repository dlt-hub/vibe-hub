resources:
- name: local_api
  endpoint:
    path: /local-api
    method: GET
- name: AWS Lambda Function
  endpoint:
    path: /deploy/lambda
    method: POST
- name: Amazon S3 Bucket
  endpoint:
    path: /deploy/s3
    method: POST
- name: Frontend
  endpoint:
    path: /
    method: GET
- name: deployFrontend
  endpoint:
    path: /src/deployFrontend
    method: POST
- name: newItem
  endpoint:
    path: /src/newItem
    method: POST
- name: getItems
  endpoint:
    path: /src/getItems
    method: GET
- name: Website Builder
  endpoint:
    path: /docs/api/nodes/Function
    method: POST
    data_selector: resources
    params: {}
- name: Object Store
  endpoint:
    path: /docs/api/nodes/ObjectStore
    method: POST
    data_selector: resources
    params: {}
- name: CDN
  endpoint:
    path: /docs/api/nodes/CDN
    method: POST
    data_selector: resources
    params: {}
- name: Frontend
  endpoint:
    path: /s3
    method: GET
    data_selector: Website Hosting Address
    params: {}
- name: deployFrontend
  endpoint:
    path: /lambda/deployFrontend
    method: POST
    data_selector: records
    params: {}
- name: newItem
  endpoint:
    path: /lambda/newItem
    method: POST
    data_selector: records
    params: {}
- name: getItems
  endpoint:
    path: /lambda/getItems
    method: GET
    data_selector: records
    params: {}
- name: Cdn
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Website Builder
  endpoint:
    path: /resources/website-builder
    method: POST
    data_selector: resources
    params: {}
- name: Object Store
  endpoint:
    path: /resources/object-store
    method: POST
    data_selector: resources
    params:
      enable_website_hosting: true
      index_document: index.html
- name: Cdn
  endpoint:
    path: /services/data/vXX.X/sobjects/Cdn
    method: GET
    data_selector: records
    params: {}
- name: listUsers
  endpoint:
    path: /users
    method: GET
- name: createUser
  endpoint:
    path: /users
    method: POST
- name: updateUser
  endpoint:
    path: /users/{id}
    method: GET
- name: deleteUser
  endpoint:
    path: /users/{id}
    method: DELETE
- name: getUser
  endpoint:
    path: /users/{id}
    method: PUT
- name: users
  endpoint:
    path: /users
    method: GET
- name: createUser
  endpoint:
    path: /users
    method: POST
- name: getUser
  endpoint:
    path: /users/{id}
    method: GET
- name: updateUser
  endpoint:
    path: /users/{id}
    method: PUT
- name: deleteUser
  endpoint:
    path: /users/{id}
    method: DELETE
- name: Rest Api
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params: {}
- name: Function
  endpoint:
    path: /src/newItem
    method: POST
    data_selector: ''
    params: {}
- name: Function
  endpoint:
    path: /src/getItems
    method: GET
    data_selector: ''
    params: {}
- name: Table
  endpoint:
    path: /
    method: POST
    data_selector: ''
    params: {}
- name: Rest API
  endpoint:
    path: ''
    method: GET
    data_selector: ''
    params: {}
- name: Function
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: Table
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: QuickstartApi
  endpoint:
    path: /items
    method: GET
- name: newItem
  endpoint:
    path: /newItem
    method: POST
- name: Items
  endpoint:
    path: /Table
    method: GET
- name: RestApi
  endpoint:
    path: /api
    method: GET
    data_selector: items
    params: {}
- name: Function
  endpoint:
    path: /src/getItems
    method: GET
    data_selector: items
    params: {}
- name: Table
  endpoint:
    path: /dynamodb/Items
    method: POST
    data_selector: items
    params: {}
- name: Items
  endpoint:
    path: /
    method: POST
    data_selector: Item
    params:
      ConditionExpression: attribute_not_exists(id)
- name: RestApi
  endpoint:
    path: /items
    method: GET
    data_selector: records
    params: {}
- name: newItemFunction
  endpoint:
    path: /newItem
    method: POST
    data_selector: records
    params: {}
- name: ItemsTable
  endpoint:
    path: /Items
    method: GET
    data_selector: records
    params: {}
- name: Items
  endpoint:
    path: /getItems
    method: GET
    data_selector: Items
- name: Items
  endpoint:
    path: /
    method: PUT
    data_selector: Item
- name: Rest API
  endpoint:
    path: /api/v1/rest
    method: GET
    data_selector: items
- name: Function
  endpoint:
    path: /api/v1/function
    method: POST
    data_selector: items
- name: Table
  endpoint:
    path: /api/v1/table
    method: GET
    data_selector: items
- name: Rest API
  endpoint:
    path: /api/rest
    method: GET
    data_selector: records
    params: {}
- name: Function
  endpoint:
    path: /functions
    method: POST
    data_selector: records
    params: {}
- name: Table
  endpoint:
    path: /tables
    method: GET
    data_selector: records
    params: {}
- name: QuickstartApi
  endpoint:
    path: /items
    method: GET
- name: newItem
  endpoint:
    path: /newItem
    method: POST
- name: Items
  endpoint:
    path: ''
    method: ''
- name: Rest API
  endpoint:
    path: /api/v1/rest
    method: GET
    data_selector: items
    params: {}
- name: Function
  endpoint:
    path: /api/v1/function
    method: POST
    data_selector: newItem
    params: {}
- name: Table
  endpoint:
    path: /api/v1/table
    method: GET
    data_selector: Items
    params: {}
- name: newItem
  endpoint:
    path: /src/newItem
    method: POST
    data_selector: Item
    params: {}
- name: getItems
  endpoint:
    path: /src/getItems
    method: GET
    data_selector: Items
    params: {}
- name: newItem
  endpoint:
    path: /src/newItem/index.ts
    method: POST
    data_selector: Item
    params: {}
- name: getItems
  endpoint:
    path: /src/getItems/index.ts
    method: GET
    data_selector: Items
    params: {}
- name: Rest API
  endpoint:
    path: /api/rest
    method: GET
    data_selector: items
    params: {}
- name: Function
  endpoint:
    path: /api/function
    method: POST
    data_selector: result
    params: {}
- name: Table
  endpoint:
    path: /api/table
    method: GET
    data_selector: records
    params: {}
- name: Rest API
  endpoint:
    path: /services/data/vXX.X/sobjects/RestApi
    method: GET
- name: Function
  endpoint:
    path: /services/data/vXX.X/sobjects/Function
    method: POST
- name: Table
  endpoint:
    path: /services/data/vXX.X/sobjects/Table
    method: GET
- name: QuickstartApi
  endpoint:
    path: /items
    method: GET
- name: newItem
  endpoint:
    path: /newItem
    method: POST
- name: Items
  endpoint:
    path: /Items
    method: DynamoDB
- name: Rest API
  endpoint:
    path: /items
    method: GET
- name: Function
  endpoint:
    path: /newItem
    method: POST
- name: Table
  endpoint:
    path: /Items
    method: GET
- name: newItem
  endpoint:
    path: /stackery-quickstart/src/newItem
    method: POST
    data_selector: item_values
- name: getItems
  endpoint:
    path: /stackery-quickstart/src/getItems
    method: GET
    data_selector: items
- name: newItem
  endpoint:
    path: /src/newItem/src/main/java/Handler.java
    method: POST
    data_selector: item_values
    params: {}
- name: getItems
  endpoint:
    path: /src/getItems/src/main/java/Handler.java
    method: GET
    data_selector: items
    params: {}
- name: Rest API
  endpoint:
    path: ''
    method: GET, POST
    data_selector: ''
    params: {}
- name: Function
  endpoint:
    path: ''
    method: POST, GET
    data_selector: ''
    params: {}
- name: Table
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Rest API
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params: {}
- name: Function
  endpoint:
    path: /
    method: POST
    data_selector: ''
    params: {}
- name: Table
  endpoint:
    path: /
    method: ''
    data_selector: ''
    params: {}
- name: Rest API
  endpoint:
    path: /api
    method: GET
    data_selector: records
- name: Function
  endpoint:
    path: /function
    method: POST
    data_selector: records
- name: Table
  endpoint:
    path: /table
    method: GET
    data_selector: records
- name: Rest API
  endpoint:
    path: /api
    method: GET
    data_selector: items
    params: {}
- name: Function
  endpoint:
    path: /function
    method: POST
    data_selector: newItem
    params: {}
- name: Table
  endpoint:
    path: /table
    method: GET
    data_selector: Items
    params: {}
- name: items
  endpoint:
    path: /items
    method: PUT
    data_selector: item
    params:
      table_name: TABLE_NAME
      return_consumed_capacity: TOTAL
      condition_expression: attribute_not_exists(id)
- name: RestApi
  endpoint:
    path: /items
    method: GET
- name: Function
  endpoint:
    path: /newItem
    method: POST
- name: Table
  endpoint:
    path: /Items
    method: GET
- name: RestApi
  endpoint:
    path: /api/items
    method: GET
    data_selector: items
- name: Function
  endpoint:
    path: /api/newItem
    method: POST
    data_selector: newItem
- name: Table
  endpoint:
    path: /api/Items
    method: GET
    data_selector: Items
- name: Items
  endpoint:
    path: /
    method: PUT
    data_selector: item
    params:
      return_consumed_capacity: TOTAL
      condition_expression: attribute_not_exists(id)
- name: items
  endpoint:
    path: /
    method: PUT
    data_selector: item
    params:
      table_name: TABLE_NAME
      return_consumed_capacity: TOTAL
      condition_expression: attribute_not_exists(id)
- name: Rest API
  endpoint:
    path: /api/rest
    method: GET
    data_selector: items
- name: Function
  endpoint:
    path: /api/function
    method: POST
    data_selector: item
- name: Table
  endpoint:
    path: /api/table
    method: GET
    data_selector: records
- name: QuickstartApi
  endpoint:
    path: /items
    method: GET
- name: newItem
  endpoint:
    path: /newItem
    method: POST
- name: Items
  endpoint:
    path: ''
    method: DynamoDB
- name: QuickstartApi
  endpoint:
    path: /items
    method: GET
- name: newItem
  endpoint:
    path: /newItem
    method: POST
- name: Items
  endpoint:
    path: /table/Items
    method: GET
- name: Items
  endpoint:
    path: /items
    method: GET
    data_selector: items
    params: {}
- name: newItem
  endpoint:
    path: /src/newItem/main.go
    method: POST
    data_selector: result
    params: {}
- name: getItems
  endpoint:
    path: /src/getItems/main.go
    method: GET
    data_selector: result
    params: {}
- name: Rest Api
  endpoint:
    path: /api/rest
    method: GET
    data_selector: records
- name: Function
  endpoint:
    path: /api/function
    method: GET
    data_selector: records
- name: Job Queue
  endpoint:
    path: /api/jobqueue
    method: GET
    data_selector: records
- name: restApi
  endpoint:
    path: /api/nodes/RestApi
    method: POST
    data_selector: resource
    params: {}
- name: getEvent
  endpoint:
    path: /api/nodes/Function
    method: POST
    data_selector: resource
    params: {}
- name: queuedJobs
  endpoint:
    path: /api/nodes/JobQueue
    method: POST
    data_selector: resource
    params: {}
- name: Bastion
  endpoint:
    path: /api/nodes/Bastion
    method: GET
- name: Function
  endpoint:
    path: /api/nodes/Function
    method: GET
- name: Database
  endpoint:
    path: /api/nodes/Database
    method: GET
- name: Bastion
  endpoint:
    path: /api/nodes/Bastion
    method: GET
- name: Database
  endpoint:
    path: /api/nodes/Database
    method: GET
- name: SendMessage
  endpoint:
    path: /src/SendMessage/.stackery-config.yaml
    method: GET
    data_selector: function-id
- name: RetrieveMessage
  endpoint:
    path: /src/RetrieveMessage/.stackery-config.yaml
    method: GET
    data_selector: function-id
- name: MessagingStack
  endpoint:
    path: /.stackery-config.yaml
    method: GET
    data_selector: stack-name
- name: SendMessage
  endpoint:
    path: /src/SendMessage/.stackery-config.yaml
    method: GET
    data_selector: function-id
    params: {}
- name: RetrieveMessage
  endpoint:
    path: /src/RetrieveMessage/.stackery-config.yaml
    method: GET
    data_selector: function-id
    params: {}
- name: MessagingStack
  endpoint:
    path: /.stackery-config.yaml
    method: GET
    data_selector: stack-name
    params: {}
- name: Function
  endpoint:
    path: /api/nodes/Function
    method: GET
- name: deployment_pipeline
  endpoint:
    path: /deployments
    method: GET
- name: active_deployments
  endpoint:
    path: /active-deployments
    method: GET
- name: notifications
  endpoint:
    path: /notifications
    method: GET
- name: settings
  endpoint:
    path: /settings
    method: GET
- name: usage
  endpoint:
    path: /usage
    method: GET
- name: billing
  endpoint:
    path: /billing
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: linked_aws_accounts
  endpoint:
    path: /linked-aws-accounts
    method: GET
- name: build_environment
  endpoint:
    path: /build-environment
    method: GET
- name: cli_tokens
  endpoint:
    path: /cli-tokens
    method: GET
- name: integrations
  endpoint:
    path: /integrations
    method: GET
- name: stack_blueprints
  endpoint:
    path: /stack-blueprints
    method: GET
- name: environments
  endpoint:
    path: /environments
    method: GET
    data_selector: environments
    params: {}
- name: Deployment Pipeline
  endpoint:
    path: /deployments
    method: GET
    data_selector: pipelines
    params: {}
- name: Active Deployments
  endpoint:
    path: /active-deployments
    method: GET
    data_selector: activeDeployments
    params: {}
- name: Notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
    params: {}
- name: Settings
  endpoint:
    path: /settings
    method: GET
    data_selector: settings
    params: {}
- name: Usage
  endpoint:
    path: /usage
    method: GET
    data_selector: usage
    params: {}
- name: Billing
  endpoint:
    path: /billing
    method: GET
    data_selector: billing
    params: {}
- name: Users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: Password
  endpoint:
    path: /password
    method: GET
    data_selector: password
    params: {}
- name: Linked AWS Accounts
  endpoint:
    path: /linked-accounts
    method: GET
    data_selector: linkedAccounts
    params: {}
- name: Build Environment
  endpoint:
    path: /build-environment
    method: GET
    data_selector: buildEnvironment
    params: {}
- name: CLI Tokens
  endpoint:
    path: /cli-tokens
    method: GET
    data_selector: cliTokens
    params: {}
- name: Integrations
  endpoint:
    path: /integrations
    method: GET
    data_selector: integrations
    params: {}
- name: Stack Blueprints
  endpoint:
    path: /blueprints
    method: GET
    data_selector: blueprints
    params: {}
- name: environment
  endpoint:
    path: /environments
    method: GET
    data_selector: environments
- name: StackeryRole
  endpoint:
    path: /resources/stackery-role
    method: GET
    data_selector: resources
    params: {}
- name: StackeryAgentCommanderFunction
  endpoint:
    path: /templates/stackeryAgentCommanderOnly.json
    method: GET
- name: AssetsBucket
  endpoint:
    path: AWS::S3::Bucket
    method: ''
    data_selector: ''
    params: {}
- name: CloudFormationNotificationsTopic
  endpoint:
    path: AWS::SNS::Topic
    method: ''
    data_selector: ''
    params: {}
- name: CustomResourceProvisionCheckQueue
  endpoint:
    path: AWS::SQS::Queue
    method: ''
    data_selector: ''
    params: {}
- name: CloudFormationNotificationsHandler
  endpoint:
    path: AWS::Lambda::Function
    method: ''
    data_selector: ''
    params: {}
- name: StackeryAgentCommander
  endpoint:
    path: AWS::Lambda::Function
    method: ''
    data_selector: ''
    params: {}
- name: CloudFormationNotificationsTopicToHandlerPermission
  endpoint:
    path: AWS::Lambda::Permission
    method: ''
    data_selector: ''
    params: {}
- name: StackeryAgentCommanderProvisionCheckEvents
  endpoint:
    path: AWS::Lambda::EventSourceMapping
    method: ''
    data_selector: ''
    params: {}
- name: CloudFormationNotificationsHandlerRole
  endpoint:
    path: AWS::IAM::Role
    method: ''
    data_selector: ''
    params: {}
- name: StackeryAgentCommanderRole
  endpoint:
    path: AWS::IAM::Role
    method: ''
    data_selector: ''
    params: {}
- name: StackeryCloudFormationRole
  endpoint:
    path: AWS::IAM::Role
    method: ''
    data_selector: ''
    params: {}
- name: StackeryRole
  endpoint:
    path: AWS::IAM::Role
    method: ''
    data_selector: ''
    params: {}
- name: Stackery
  endpoint:
    path: Custom::Stackery
    method: ''
    data_selector: ''
    params: {}
- name: StackeryAgentCommanderBootstrap
  endpoint:
    path: Custom::StackeryAgentCommanderBootstrap
    method: ''
    data_selector: ''
    params: {}
- name: StackeryAgentCommander
  endpoint:
    path: /templates/stackeryAgentCommanderOnly.json
    method: GET
- name: Function
  endpoint:
    path: /docs/api/nodes/Function
    method: GET
- name: EdgeFunction
  endpoint:
    path: /docs/api/nodes/EdgeFunction
    method: GET
- name: Layer
  endpoint:
    path: /docs/api/nodes/Layer
    method: GET
- name: Database
  endpoint:
    path: /docs/api/nodes/Database
    method: GET
- name: CDN
  endpoint:
    path: /docs/api/nodes/CDN
    method: GET
- name: Website
  endpoint:
    path: /docs/api/nodes/Website
    method: GET
- name: DockerTask
  endpoint:
    path: /docs/api/nodes/DockerTask
    method: GET
- name: GraphDatabase
  endpoint:
    path: /docs/api/nodes/GraphDatabase
    method: GET
- name: GraphQLApi
  endpoint:
    path: /docs/api/nodes/GraphQLApi
    method: GET
- name: HttpApi
  endpoint:
    path: /docs/api/nodes/HttpApi
    method: GET
- name: RestApi
  endpoint:
    path: /docs/api/nodes/RestApi
    method: GET
- name: WebSocketApi
  endpoint:
    path: /docs/api/nodes/WebSocketApi
    method: GET
- name: JobQueue
  endpoint:
    path: /docs/api/nodes/JobQueue
    method: GET
- name: ObjectStore
  endpoint:
    path: /docs/api/nodes/ObjectStore
    method: GET
- name: PubSubTopic
  endpoint:
    path: /docs/api/nodes/PubSubTopic
    method: GET
- name: Secrets
  endpoint:
    path: /docs/api/nodes/Secrets
    method: GET
- name: StateMachine
  endpoint:
    path: /docs/api/nodes/StateMachine
    method: GET
- name: Stream
  endpoint:
    path: /docs/api/nodes/Stream
    method: GET
- name: Table
  endpoint:
    path: /docs/api/nodes/Table
    method: GET
- name: Timer
  endpoint:
    path: /docs/api/nodes/Timer
    method: GET
- name: EventRule
  endpoint:
    path: /docs/api/nodes/EventRule
    method: GET
- name: UserPool
  endpoint:
    path: /docs/api/nodes/UserPool
    method: GET
- name: VirtualNetwork
  endpoint:
    path: /docs/api/nodes/VirtualNetwork
    method: GET
- name: stackery-travis-demo
  endpoint:
    path: /stacks/stackery-travis-demo
    method: GET
- name: FunctionDeployTrigger
  endpoint:
    path: /functions/deploy-trigger
    method: POST
    data_selector: result
    params: {}
- name: Function
  endpoint:
    path: /docs/api/nodes/Function
    method: GET
- name: EdgeFunction
  endpoint:
    path: /docs/api/nodes/EdgeFunction
    method: GET
- name: Layer
  endpoint:
    path: /docs/api/nodes/Layer
    method: GET
- name: Database
  endpoint:
    path: /docs/api/nodes/Database
    method: GET
- name: CDN
  endpoint:
    path: /docs/api/nodes/CDN
    method: GET
- name: Website
  endpoint:
    path: /docs/api/nodes/Website
    method: GET
- name: DockerTask
  endpoint:
    path: /docs/api/nodes/DockerTask
    method: GET
- name: GraphDatabase
  endpoint:
    path: /docs/api/nodes/GraphDatabase
    method: GET
- name: GraphQLApi
  endpoint:
    path: /docs/api/nodes/GraphQLApi
    method: GET
- name: HttpApi
  endpoint:
    path: /docs/api/nodes/HttpApi
    method: GET
- name: RestApi
  endpoint:
    path: /docs/api/nodes/RestApi
    method: GET
- name: WebSocketApi
  endpoint:
    path: /docs/api/nodes/WebSocketApi
    method: GET
- name: JobQueue
  endpoint:
    path: /docs/api/nodes/JobQueue
    method: GET
- name: ObjectStore
  endpoint:
    path: /docs/api/nodes/ObjectStore
    method: GET
- name: PubSubTopic
  endpoint:
    path: /docs/api/nodes/PubSubTopic
    method: GET
- name: Secrets
  endpoint:
    path: /docs/api/nodes/Secrets
    method: GET
- name: StateMachine
  endpoint:
    path: /docs/api/nodes/StateMachine
    method: GET
- name: Stream
  endpoint:
    path: /docs/api/nodes/Stream
    method: GET
- name: Table
  endpoint:
    path: /docs/api/nodes/Table
    method: GET
- name: Timer
  endpoint:
    path: /docs/api/nodes/Timer
    method: GET
- name: EventRule
  endpoint:
    path: /docs/api/nodes/EventRule
    method: GET
- name: UserPool
  endpoint:
    path: /docs/api/nodes/UserPool
    method: GET
- name: VirtualNetwork
  endpoint:
    path: /docs/api/nodes/VirtualNetwork
    method: GET
- name: Layer
  endpoint:
    path: /docs/api/nodes/Layer
    method: GET
    data_selector: records
- name: api-stack
  endpoint:
    path: stacks/api-stack/template.yaml
- name: email-stack
  endpoint:
    path: stacks/email-stack/template.yaml
- name: frontend-stack
  endpoint:
    path: stacks/frontend-stack/template.yaml
- name: stackery-travis-demo
  endpoint:
    path: /stacks/stackery-travis-demo
    method: GET
    data_selector: stack
    params: {}
- name: stackery-travis-demo
  endpoint:
    path: /api/v1/stackery-travis-demo
    method: GET
- name: MyNestedApp
  endpoint:
    path: /MyNestedApp/template.yaml
    method: GET
- name: MyNestedApp2
  endpoint:
    path: /MyNestedApp2/template.yaml
    method: GET
- name: Lambda Function
- name: DynamoDB Table
- name: Kinesis Stream
- name: SQS Queue
- name: SNS Topic
- name: RDS Database
- name: Virtual Private Cloud
- name: Layer
  endpoint:
    path: /docs/api/nodes/Layer
    method: GET
- name: shared-vpc-1
  endpoint:
    path: /vpc
    method: GET
    data_selector: VPC_CONFIG
    params: {}
- name: shared-vpc-2
  endpoint:
    path: /vpc
    method: GET
    data_selector: VPC_CONFIG
    params: {}
- name: api-stack
  endpoint:
    path: stacks/api-stack/template.yaml
    method: POST
- name: email-stack
  endpoint:
    path: stacks/email-stack/template.yaml
    method: POST
- name: frontend-stack
  endpoint:
    path: stacks/frontend-stack/template.yaml
    method: POST
- name: Accounts
  endpoint:
    path: /
    method: POST
- name: Accounts
  endpoint:
    path: /{id}
    method: GET
- name: Users
  endpoint:
    path: /users
    method: POST
- name: Users
  endpoint:
    path: /users/{id}
    method: GET
- name: Users
  endpoint:
    path: /users
    method: GET
    data_selector: Resources
    params: {}
- name: MyNestedApp
  endpoint:
    path: MyNestedApp/template.yaml
    method: AWS::Serverless::Application
    data_selector: Resources
    params: {}
- name: MyNestedApp2
  endpoint:
    path: MyNestedApp2/template.yaml
    method: AWS::Serverless::Application
    data_selector: Resources
    params: {}
- name: ghost
  endpoint:
    path: /ghost
    method: GET
    data_selector: records
    params: {}
- name: Lambda Function
- name: DynamoDB Table
- name: Kinesis Stream
- name: SQS Queue
- name: SNS Topic
- name: RDS Database
- name: Virtual Private Cloud
- name: VPC_CONFIG
  endpoint:
    path: /vpc
    method: GET
    data_selector: VpcId
- name: DB_ARN
  endpoint:
    path: /db
    method: GET
    data_selector: Database ARN
- name: DB_ROOT_PASSWORD
  endpoint:
    path: /db-password
    method: GET
    data_selector: Root Password
- name: Accounts
  endpoint:
    path: /
    method: POST
- name: Accounts
  endpoint:
    path: /{id}
    method: GET
- name: Users
  endpoint:
    path: /
    method: POST
- name: Users
  endpoint:
    path: /{id}
    method: GET
- name: AWS CodeCommit
  endpoint:
    path: /api/nodes/AWS_CodeCommit
    method: GET
- name: Bitbucket
  endpoint:
    path: /api/nodes/Bitbucket
    method: GET
- name: GitHub
  endpoint:
    path: /api/nodes/GitHub
    method: GET
- name: GitLab
  endpoint:
    path: /api/nodes/GitLab
    method: GET
- name: RestApi
  endpoint:
    path: /api
    method: GET
- name: Function
  endpoint:
    path: /function/getWelcomePage
    method: GET
- name: Users
  endpoint:
    path: /users
    method: GET
    data_selector: resources
    params: {}
- name: createUser
  endpoint:
    path: /users
    method: POST
    data_selector: resources
    params: {}
- name: getUser
  endpoint:
    path: /users/{id}
    method: GET
    data_selector: resources
    params: {}
- name: updateUser
  endpoint:
    path: /users/{id}
    method: PUT
    data_selector: resources
    params: {}
- name: deleteUser
  endpoint:
    path: /users/{id}
    method: DELETE
    data_selector: resources
    params: {}
- name: welcome_page
  endpoint:
    path: /getWelcomePage
    method: GET
    data_selector: response
    params: {}
- name: ghost
  endpoint:
    path: /ghost
    method: GET
    data_selector: data
- name: Epsagon key
  endpoint:
    path: /settings
    method: GET
    data_selector: key
    params: {}
- name: Stackery settings
  endpoint:
    path: /settings/integrations
    method: GET
    data_selector: token
    params: {}
- name: AWS CodeCommit
  endpoint:
    path: /codecommit
    method: GET
    data_selector: repositories
    params: {}
- name: Bitbucket
  endpoint:
    path: /bitbucket
    method: GET
    data_selector: repositories
    params: {}
- name: GitHub
  endpoint:
    path: /github
    method: GET
    data_selector: repositories
    params: {}
- name: GitLab
  endpoint:
    path: /gitlab
    method: GET
    data_selector: repositories
    params: {}
- name: Rest API
  endpoint:
    path: /
    method: GET
- name: Function
  endpoint:
    path: /src/getWelcomePage
    method: GET
- name: welcome_page
  endpoint:
    path: /getWelcomePage
    method: GET
    data_selector: response
    params: {}
notes:
- To use the stackery local start-api command, your stack needs to include an API
  resource and be deployed in order to interact with additional cloud resources.
- The stackery local api command uses port 3000 by default.
- The default host is 127.0.0.1.
- The stack needs to include an API resource and be deployed in order to interact
  with additional cloud resources.
- The `stackery local api` command uses port 3000 by default.
- The default host is `127.0.0.1`.
- The frontend will be served from an S3 bucket.
- The function deployFrontend will upload the latest frontend content to the object
  store.
- A single page application is a website that does not require page reloading when
  in use.
- Monitor the cloud resources in your AWS account to ensure you're within your team,
  or individual, billing and cost limitations.
- The S3 bucket will be populated by a Lambda function that uploads the latest frontend
  content.
- Ensure all function code changes are saved before deployment.
- If you plan to use a custom domain for your React website, enabling the `Use Custom
  Domain` property in the `Cdn` settings will prompt you for the `Domain` you want
  to use, as well as the `Validation Domain` used to validate it.
- Stackery is serverless acceleration software, a set of development and operations
  tools for engineers building production serverless applications.
- If you're completely new to serverless architecture, read our Introduction to Stackery
  first.
- get the table name from the automatically populated environment variables
- modify with each invoke so the id does not repeat
- modify content here
- do not overwrite existing entries
- If you were invited by a team member, follow the link in your email to create an
  account.
- Ensure the TABLE_NAME environment variable is set correctly.
- Do not overwrite existing entries in the table
- Uses AWS SDK to access DynamoDB
- Items may not be in order due to asynchronous nature of function code
- The `--build` flag runs a script to transpile index.ts into index.js.
- Uses AWS SDK to connect to DynamoDB and write items.
- Ensure that the function is running in the same environment as the DynamoDB table.
- Uses AWS CloudFormation for resource management
- Uses OAuth2 — requires setup of connected app in Stackery
- Deployment process will take a few minutes.
- Items are not in order due to asynchronous nature.
- After each invoke, your output should look similar to the provided terminal output.
- Make sure this function is running in the same environment as the table.
- Uses OAuth2 for authentication
- Requires setup of AWS account
- The stack includes an API Gateway with GET and POST endpoints.
- The stack includes two Lambda functions to interact with a DynamoDB table.
- Modify the id with each invoke so it does not repeat.
- Modify content in the item object as needed.
- The function code above uses the AWS SDK to access the designated DynamoDB table
  and puts all of its contents.
- Items are not in order - that's due to the asynchronous nature of the function code.
- Use dynamodb to get items from the Items table
- Items are not in order due to the asynchronous nature of the function code
- Rest assured, the overall functionality of Stackery remains the same.
- An API Gateway with GET and POST endpoints
- Two Lambda functions will POST and GET items to and from the table.
- Uses AWS SDK for Go to connect to DynamoDB and write items.
- Deployment process takes a few minutes.
- Using the Stackery CLI for local development requires installation of AWS CLI and
  Docker.
- The first deployment must be done before invoking functions locally.
- In order to invoke a Lambda function locally, the resources it depends on must exist
  in the designated cloudside environment.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Accessing resources behind a VPC adds some complexity to local development.
- 'Environment variables defined in the override file should be separated by a new
  line and formatted as NAME: VALUE.'
- The `stackery local invoke` command allows you to run your serverless functions
  locally.
- The `stackery pluck-event` command can take the single most recent event from your
  function's CloudWatch logs.
- The `pluck-event` command allows you to get the most recent event from the CloudWatch
  logs.
- Only follow this guide once you have set up your local serverless development environment
  using our local development guide.
- Local template editing is only supported for AWS SAM and CloudFormation templates.
- You can edit your template locally and see the changes in your browser, even in
  offline mode (though you'll need to be online for authentication).
- To grant your local machine access to the Bastion, you'll need to add your machine's
  public SSH key.
- The default Aurora Serverless DB Cluster will use MySQL engine and set the root
  db password to 'password'.
- Default parameters defined in parent directories, and not overridden, are used to
  populate the CLI command arguments.
- Environment variables defined in the shell must be upper-case and use underscores
  in place of dashes
- Stackery provides multiple pre-configured strategies for deploying your serverless
  applications.
- Stacks using the CodeBuild deployment strategy can specify which build image to
  use in the Stack Settings page.
- This strategy has the benefit of building your function code artifacts in your AWS
  account.
- Deploying AWS SAM applications involves a series of steps by which the application
  code and infrastructure configuration are published to an AWS account and made active.
- Newly-created stacks default to the latest Amazon Linux image, currently version
  3.0, whereas some existing stacks may be set to Ubuntu Standard 2.0.
- A notable error you may encounter when working with Lambda Layers stored as Stackery
  environment variables, is an `Invalid Lambda ARN` error.
- If permissions for the Lambda Layer are scoped correctly, and you've confirmed it
  exists (in your account or another), the error may be related to this open sam build
  issue.
- A notable error you may encounter when working with Lambda Layers stored as Stackery
  environment variables, is an Invalid Lambda ARN error.
- If permissions for the Lambda Layer are scoped correctly, and you've confirmed it
  exists (in your account or another), the error may be related to an open sam build
  issue.
- The Stackery CLI will provision a new API key for your account.
- Stackery now offers a set of continuous integration functionality to help you and
  your team verify, review, and iterate on changes before they go live.
- Once authenticated, the Stackery CLI will provision a new API key for your account.
- Environment secrets are stored in AWS Secrets Manager within your AWS account and
  can be accessed by your application using the AWS SDK.
- The Stackery Role that is provisioned in your AWS account includes a tightly scoped
  IAM role that grants only specific actions to Stackery.
- Stackery provides the mechanism for managing developer, test, and production environments
  across AWS accounts and regions.
- Stackery never uses any IAM users and/or long-term credentials to manage resources
  in your AWS account.
- Unlinking your account will delete the Stackery Agent Commander Lambda Function.
- Stackery automatically creates the IAM role that allows the application to retrieve
  the secret from AWS Secrets Manager at runtime.
- New stacks are created using the AWS SAM template format by default, though AWS
  SAM, AWS CloudFormation, AWS CDK, and Serverless Framework formats are supported.
- Build environment variables are stored encrypted at rest and transmitted in encrypted
  form to the Stackery CLI during the packaging process.
- We recommend using read-only authentication tokens where available.
- First 100 builds free for private repositories (orgs)
- Always free for public repositories (open source)
- Developing and deploying your stack is now a part of a CI/CD process!
- Custom resource triggers functions on stack deployment.
- Functions with layers can be deployed like any other stack, either locally or with
  CodeBuild.
- Users who are using layers with their nested applications need to make sure to use
  !Ref to reference their layer or layer ARN rather than !Sub.
- This walkthrough does not reference this repository. It is meant to be used as a
  boilerplate to clone and create your own mono-repo repository.
- 'Two sets of credentials are needed to deploy a stack using Stackery: AWS credentials
  and Stackery credentials.'
- Requires AWS credentials and Stackery credentials for deployment.
- Nested applications or stacks are stacks that contain one or more other applications,
  which are all deployed together.
- Stackery comes in to help at both the beginning and end of your existing CI/CD procedure.
- Trigger on Every Deploy is only available after Trigger on First Deploy has been
  enabled
- When locally invoking a function that uses layers, the `--build` flag is necessary,
  or the call will result in an error.
- Stackery provides a way to reference shared infrastructure components which can
  be used by multiple services.
- Domain stack references output provided by both Accounts and Users.
- Both API stacks need to be deployed before the domain stack for the initial deploy.
- Stackery can be used to quickly visualize existing AWS CloudFormation YAML infrastructure-as-code
  architectures.
- It's not possible to have two functions with the same name in the same stack, but
  it's acceptable to have function names repeat between nested stacks.
- The '🏠 View site' interface in Ghost's admin portal is not configured and will not
  work.
- To add the Lumigo SDK to your stack, all you need to do is grab your Lumigo token
  from the 'Onboarding' page.
- 'This walkthrough covers a common use case: incorporating the use of an existing
  Virtual Private Cloud (VPC) and Relational Database Service (RDS) database.'
- Thundra increases the observability of serverless stacks, giving you health information
  and deep tracing of poorly performing AWS Lambda functions.
- GitHub OAuth authentication for your personal GitHub should happen automatically
  when you click the Link my GitHub account button in the Dashboard.
- Enabling SSO will eliminate the need for team members in your organization to create
  additional credentials for Stackery.
- GitHub OAuth authentication for organizations may require manual request for access.
- Uses AWS Cloudformation for deployment.
errors:
- 'ERROR: Failed to update Stackery with local build result: Not Found'
- 'ResourceNotFoundException: The table can''t be found.'
- 'AmazonServiceException: Error in service call.'
- 'Aws::DynamoDB::Errors::ServiceError: Error writing to table.'
- 'Aws::DynamoDB::Errors::ServiceError: stop execution if dynamodb is not available'
- 'ServiceError: Error writing to table. Make sure this function is running in the
  same environment as the table.'
- '400 Bad Request: Check your request parameters.'
- '403 Forbidden: Ensure your AWS credentials are correct.'
- '500 Internal Server Error: Review your function code for errors.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'unknown command ''local'' for ''stackery'': your Stackery CLI is below version
  2.6.0'
- 'Failed to assume role: Access Denied. This error is likely to be transient; maybe
  retry in several seconds.'
- 'Template file not found at location: You''re trying to run the stackery local invoke
  command from a different directory.'
- 'Event not found error when running `pluck-event`: This command works best on the
  starter function that is generated when your function resource is initially created
  in Stackery.'
- 'Bad username or password: Check if logged in correctly with the Stackery CLI.'
- 'Bad username or password: Ensure you are logged in to the Stackery CLI with the
  correct account.'
- 'Template not in root directory: Provide a --template-path flag with a path relative
  to your root directory.'
- 'Invalid Lambda ARN: Check permissions and existence of the Lambda Layer.'
- 'Invalid Lambda ARN: Ensure permissions are scoped correctly and the Lambda Layer
  exists.'
- 'CREATE_FAILED: Trigger function failed during stack deployment.'
- 'CREATE_IN_PROGRESS: Stack deployment is taking longer than 10-15 minutes'
- 'CREATE_FAILED: A rollback event will begin on your stack following this create
  failed event'
- 200 resource per stack limit for AWS CloudFormation.
- '401 Unauthorized: Recheck API key or permissions'
auth_info:
  mentioned_objects:
  - OAuth Apps
client:
  base_url: https://app.stackery.io/
  headers:
    Accept: application/json
source_metadata: null
