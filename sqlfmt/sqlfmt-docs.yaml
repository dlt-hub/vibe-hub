resources:
- name: Mode
  endpoint:
    path: /api/mode
    method: GET
    data_selector: mode
    params: {}
- name: polyglot
  endpoint:
    path: /dialects/polyglot
    method: GET
    data_selector: supported_dialects
    params: {}
- name: clickhouse
  endpoint:
    path: /dialects/clickhouse
    method: GET
    data_selector: dialect_info
    params: {}
notes:
- 'sqlfmt is not configurable, except for line length: it enforces a single style.'
- sqlfmt is not a linter.
- sqlfmt will not always produce the formatted output you might want.
- It is highly recommended to only run sqlfmt on files in a version control system
  (like git).
- Caution is highly advised in domains where sqlfmt is nowhere near 'feature complete'.
- sqlfmt supports nearly all SQL dialects without configuration, and doesn't require
  a Jinja templater.
- The jinjafmt extra is installed in the container. You can configure sqlfmt to disable
  Jinja formatting.
- To ignore specific commits when viewing the blame for a file, create a file named
  .git-blame-ignore-revs in the root of your project.
- sqlfmt uses Python, and Python uses Unicode to represent strings of text, including
  your SQL code while it is being formatted.
- By default, sqlfmt assumes your .sql files are encoded in UTF-8, which is becoming
  the de facto standard Unicode encoding.
- The only thing you can configure with sqlfmt is the desired line length of the formatted
  file.
- The default is 88.
- The only thing you can configure with sqlfmt is the desired line length of the formatted
  file. The default is 88.
errors: []
auth_info:
  mentioned_objects: []
client:
  base_url: ghcr.io/tconbeer/sqlfmt
  headers:
    Accept: application/json
source_metadata: null
