resources:
- name: initiate_call
  endpoint:
    path: /calls.add
    method: POST
- name: update_call
  endpoint:
    path: /calls.update
    method: POST
- name: add_participants
  endpoint:
    path: /calls.participants.add
    method: POST
- name: remove_participants
  endpoint:
    path: /calls.participants.remove
    method: POST
- name: end_call
  endpoint:
    path: /calls.end
    method: POST
- name: post_message
  endpoint:
    path: /chat.postMessage
    method: POST
- name: unfurl_call
  endpoint:
    path: /chat.unfurl
    method: POST
- name: channel_events
  endpoint:
    path: /api/conversations.history
    method: GET
    data_selector: messages
    params: {}
- name: user_info
  endpoint:
    path: /api/users.info
    method: GET
    data_selector: user
    params: {}
- name: file_info
  endpoint:
    path: /api/files.info
    method: GET
    data_selector: file
    params: {}
- name: disconnect_shared_channel
  endpoint:
    path: /admin/conversations.disconnectShared
    method: POST
- name: accept_shared_invite
  endpoint:
    path: /conversations.acceptSharedInvite
    method: POST
- name: approve_shared_invite
  endpoint:
    path: /conversations.approveSharedInvite
    method: POST
- name: decline_shared_invite
  endpoint:
    path: /conversations.declineSharedInvite
    method: POST
- name: set_external_invite_permissions
  endpoint:
    path: /conversations.externalInvitePermissions.set
    method: POST
- name: invite_shared
  endpoint:
    path: /conversations.inviteShared
    method: POST
- name: list_connect_invites
  endpoint:
    path: /conversations.listConnectInvites
    method: GET
- name: approve_request_shared_invite
  endpoint:
    path: /conversations.requestSharedInvite.approve
    method: POST
- name: deny_request_shared_invite
  endpoint:
    path: /conversations.requestSharedInvite.deny
    method: POST
- name: list_request_shared_invite
  endpoint:
    path: /conversations.requestSharedInvite.list
    method: GET
- name: disconnect_external_teams
  endpoint:
    path: /team.externalTeams.disconnect
    method: POST
- name: list_external_teams
  endpoint:
    path: /team.externalTeams.list
    method: GET
- name: lookup_discoverable_contacts
  endpoint:
    path: /users.discoverableContacts.lookup
    method: POST
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: event
- name: enable_socket_mode
  endpoint:
    path: /apps.connections.open
    method: POST
    data_selector: url
- name: shared_channel_invite
  endpoint:
    path: /conversations.inviteShared
    method: POST
- name: shared_channel_accept_invite
  endpoint:
    path: /conversations.acceptSharedInvite
    method: POST
- name: shared_channel_approve_invite
  endpoint:
    path: /conversations.approveSharedInvite
    method: POST
- name: shared_channel_decline_invite
  endpoint:
    path: /conversations.declineSharedInvite
    method: POST
- name: list_connect_invites
  endpoint:
    path: /conversations.listConnectInvites
    method: GET
- name: request_invite_approval
  endpoint:
    path: /conversations.requestSharedInvite.approve
    method: POST
- name: request_invite_denial
  endpoint:
    path: /conversations.requestSharedInvite.deny
    method: POST
- name: disconnect_shared_conversations
  endpoint:
    path: /admin.conversations.disconnectShared
    method: POST
- name: disconnect_external_teams
  endpoint:
    path: /team.externalTeams.disconnect
    method: POST
- name: list_external_teams
  endpoint:
    path: /team.externalTeams.list
    method: GET
- name: lookup_discoverable_contacts
  endpoint:
    path: /users.discoverableContacts.lookup
    method: GET
- name: set_external_invite_permissions
  endpoint:
    path: /conversations.externalInvitePermissions.set
    method: POST
- name: conversations
  endpoint:
    path: /conversations.list
    method: GET
    data_selector: channels
    params: {}
- name: conversation_members
  endpoint:
    path: /conversations.members
    method: GET
    data_selector: members
    params: {}
- name: event_subscriptions
  endpoint:
    path: /events
    method: POST
    data_selector: event
- name: users_list
  endpoint:
    path: /api/users.list
    method: GET
    data_selector: members
    params:
      limit: 2
      cursor: dXNlcjpVMEc5V0ZYTlo%3D
- name: user_custom_status
  endpoint:
    path: /api/users.profile.set
    method: POST
    data_selector: profile
- name: user_presence
  endpoint:
    path: /api/users.setPresence
    method: POST
- name: user_presence_info
  endpoint:
    path: /api/users.getPresence
    method: GET
- name: user_profile_info
  endpoint:
    path: /api/users.profile.get
    method: GET
- name: conversations_history
  endpoint:
    path: /conversations.history
    method: GET
- name: conversations_replies
  endpoint:
    path: /conversations.replies
    method: GET
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
- name: incoming_webhooks
  endpoint:
    path: /webhooks
    method: POST
- name: events_api_events
  endpoint:
    path: /events
    method: POST
- name: workflow_triggers_event_triggers
  endpoint:
    path: /workflow_triggers/event_triggers
    method: POST
- name: workflow_triggers_webhook_triggers
  endpoint:
    path: /workflow_triggers/webhook_triggers
    method: POST
- name: workflow_steps_ai_summary
  endpoint:
    path: /workflow_steps/ai_summary
    method: POST
- name: users_profile_set
  endpoint:
    path: /users.profile.set
    method: POST
- name: rtm_start
  endpoint:
    path: /rtm.start
    method: GET
- name: rtm_connect
  endpoint:
    path: /rtm.connect
    method: GET
- name: current_status
  endpoint:
    path: /current
    method: GET
    data_selector: status
- name: incident_history
  endpoint:
    path: /history
    method: GET
    data_selector: status
- name: open_socket_connection
  endpoint:
    path: /apps.connections.open
    method: POST
- name: web_api_methods
  endpoint:
    path: /api/web
    method: GET
- name: events_api
  endpoint:
    path: /api/events
    method: GET
- name: send_message
  endpoint:
    path: /services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX
    method: POST
    data_selector: text
- name: slack_identity_transfer
  endpoint:
    path: /openid/connect/authorize
    method: GET
    params:
      response_type: id_token
      scope: openid email profile
      response_mode: form_post
- name: app_migration
  endpoint:
    path: /oauth/v2/authorize
    method: GET
- name: app_scopes_update
  endpoint:
    path: /api/scopes.update
    method: POST
- name: conversations_list
  endpoint:
    path: /api/conversations.list
    method: GET
    data_selector: .
    params:
      limit: 50
- name: oauth_access
  endpoint:
    path: /api/oauth.v2.access
    method: POST
- name: bot_token
  endpoint:
    method: POST
    path: /api/oauth.v2.access
    params:
      grant_type: authorization_code
      redirect_uri: https://oauth.pstmn.io/v1/browser-callback
      scope: chat:write
- name: user_token
  endpoint:
    method: POST
    path: /api/oauth.v2.access
    params:
      grant_type: authorization_code
      redirect_uri: https://oauth.pstmn.io/v1/browser-callback
      scope: chat:write,admin
- name: bot_user_token
  endpoint:
    path: /oauth/v2/access
    method: POST
- name: oauth_exchange
  endpoint:
    path: /api/oauth.v2.exchange
    method: POST
- name: oauth_access
  endpoint:
    path: /api/oauth.v2.access
    method: POST
- name: openid_connect_token
  endpoint:
    path: /api/links.accountLinkedResult
    method: POST
    data_selector: .
    params:
      user_id: U123ABC456
      team_id: T123ABC456
      result: NEW_ACCOUNT_CREATED
      source: IDENTITY_LINKS
- name: openid_connect_authorization
  endpoint:
    path: /openid/connect/authorize
    method: GET
- name: openid_connect_token
  endpoint:
    path: /api/openid.connect.token
    method: POST
- name: openid_connect_userinfo
  endpoint:
    path: /api/openid.connect.userInfo
    method: GET
- name: bot_token
  endpoint:
    path: /services/bots
    method: GET
- name: workflow_token
  endpoint:
    path: /services/workflows
    method: GET
- name: user_token
  endpoint:
    path: /services/users
    method: GET
- name: configuration_token
  endpoint:
    path: /services/configurations
    method: GET
- name: app_level_token
  endpoint:
    path: /services/apps
    method: GET
- name: service_token
  endpoint:
    path: /services/workflowapps
    method: GET
- name: event_verification
  endpoint:
    path: /webhook
    method: POST
- name: drafts
  endpoint:
    path: /datastores/drafts.ts
    method: POST
    data_selector: attributes
    params:
      primary_key: id
      attributes:
        id:
          type: string
        created_by:
          type: user_id
        message:
          type: string
        channels:
          type: array
          items:
            type: channel_id
        channel:
          type: channel_id
        message_ts:
          type: string
        icon:
          type: string
        username:
          type: string
        status:
          type: string
- name: drafts
  endpoint:
    params:
      id:
        type: string
      created_by:
        type: Schema.slack.types.user_id
      message:
        type: string
      channels:
        type: array
        items:
          type: Schema.slack.types.channel_id
      channel:
        type: Schema.slack.types.channel_id
      message_ts:
        type: string
      icon:
        type: string
      username:
        type: string
      status:
        type: string
- name: app_manifest
  endpoint:
    path: /automation/manifest
    method: GET
- name: messages_tab
  endpoint:
    method: POST
    data_selector: features
- name: app
  endpoint:
    path: /my-app
    method: POST
- name: trigger
  endpoint:
    path: /triggers/sample_trigger.ts
    method: POST
- name: workflow_builder
  endpoint:
    path: /automation/workflow_builder
    method: GET
- name: non_workflow_app
  endpoint:
    path: /automation/non_workflow_app
    method: GET
- name: workflow_app
  endpoint:
    path: /automation/workflow_app
    method: GET
- name: blocks
  endpoint:
    method: GET
    data_selector: blocks
- name: users
  endpoint:
    path: /users.list
    method: GET
    data_selector: members
    params:
      incremental: updated
- name: conversations_history
  endpoint:
    path: /conversations.history
    method: GET
    data_selector: messages
    params:
      channel: '{{ channel_id }}'
- name: conversations_replies
  endpoint:
    path: /conversations.replies
    method: GET
    data_selector: messages
    params:
      channel: '{{ channel_id }}'
      ts: '{{ thread_ts }}'
- name: conversations_history
  endpoint:
    path: /api/conversations.history
    method: GET
    params:
      limit: 15
- name: conversations_replies
  endpoint:
    path: /api/conversations.replies
    method: GET
    params:
      limit: 15
- name: conversations_history
  endpoint:
    path: /conversations.history
    method: GET
    data_selector: messages
    params:
      incremental: ts
- name: conversations_replies
  endpoint:
    path: /conversations.replies
    method: GET
    data_selector: messages
    params:
      incremental: ts
- name: app_manifest
  endpoint:
    path: /services/data/v2/app_manifest
    method: POST
    data_selector: data
    params:
      major_version: 2
      minor_version: 1
- name: bot_token
  endpoint:
    path: /services/bot/{app_id}
    method: GET
- name: workflow_token
  endpoint:
    path: /services/workflow/{app_id}
    method: GET
- name: user_token
  endpoint:
    path: /services/user/{app_id}
    method: GET
- name: configuration_token
  endpoint:
    path: /services/configuration/{app_id}
    method: GET
- name: app_level_token
  endpoint:
    path: /services/app_level/{app_id}
    method: GET
- name: service_token
  endpoint:
    path: /services/service/{app_id}
    method: GET
- name: workflow_step
  endpoint:
    path: /App Manifest
    method: POST
    data_selector: functions
    params:
      event_subscriptions: bot_events
- name: conversations_info
  endpoint:
    path: /conversations.info
    method: GET
    params:
      include_locale: 'true'
- name: users_info
  endpoint:
    path: /users.info
    method: GET
    params:
      include_locale: 'true'
- name: message_send
  endpoint:
    path: /api/chat.postMessage
    method: POST
- name: message_retrieve
  endpoint:
    path: /api/chat.getMessage
    method: GET
- name: message_edit
  endpoint:
    path: /api/chat.update
    method: POST
- name: message_delete
  endpoint:
    path: /api/chat.delete
    method: POST
- name: app_home_opened
  endpoint:
    path: /events/app_home_opened
    method: POST
- name: app_mention
  endpoint:
    path: /events/app_mention
    method: POST
- name: slash_commands
  endpoint:
    path: /commands
    method: POST
- name: agent
  endpoint:
    path: /agents
    method: GET
- name: ai_app
  endpoint:
    path: /ai_apps
    method: GET
- name: block_kit_builder
  endpoint:
    path: /docs/apps/ai-best-practices
    method: GET
- name: ai_app_features
  endpoint:
    path: /apps
    method: POST
    data_selector: features
    params: {}
- name: teams_list
  endpoint:
    path: /auth.teams.list
    method: GET
- name: conversations_list
  endpoint:
    path: /conversations.list
    method: GET
    params:
      team_id: '{{ team_id }}'
- name: post_message
  endpoint:
    path: /chat.postMessage
    method: POST
    params:
      channel: '{{ channel_id }}'
      text: '{{ message_text }}'
      team_id: '{{ workspace_id }}'
- name: message_search
  endpoint:
    path: /assistant.search.context
    method: POST
    data_selector: results.messages
    params:
      limit: 20
- name: conversations
  endpoint:
    path: /conversations.list
    method: GET
    params:
      incremental: channels:read, groups:read, mpim:read, im:read
- name: conversations_history
  endpoint:
    path: /conversations.history
    method: GET
    params:
      incremental: channels:read
- name: conversations_info
  endpoint:
    path: /conversations.info
    method: GET
    params:
      incremental: channels:read
- name: conversations_members
  endpoint:
    path: /conversations.members
    method: GET
    params:
      incremental: channels:read
- name: developer_sandbox
  endpoint:
    path: /sandboxes
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
- name: settings
  endpoint:
    path: /settings
    method: GET
- name: message_formatting
  endpoint:
    path: /docs/message-attachments
    method: GET
- name: messages
  endpoint:
    path: /chat.postMessage
    method: POST
- name: user_info
  endpoint:
    path: /users.info
    method: GET
- name: user_groups_list
  endpoint:
    path: /usergroups.list
    method: GET
- name: conversations_info
  endpoint:
    path: /conversations.info
    method: GET
- name: conversations_history
  endpoint:
    path: /conversations.history
    method: GET
    params: {}
- name: conversations_replies
  endpoint:
    path: /conversations.replies
    method: GET
    params: {}
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
    params: {}
- name: users_profile_set
  endpoint:
    path: /users.profile.set
    method: POST
    params: {}
- name: rtm_start
  endpoint:
    path: /rtm.start
    method: GET
    params: {}
- name: rtm_connect
  endpoint:
    path: /rtm.connect
    method: GET
    params: {}
- name: workflow_app
  endpoint:
    path: /services/api/workflow
    method: POST
- name: non_workflow_app
  endpoint:
    path: /services/api/non-workflow
    method: POST
- name: token_management
  endpoint:
    path: /services/api/tokens
    method: GET
- name: enterprise_user
  endpoint:
    path: /enterprise_user
    method: GET
    data_selector: enterprise_user
    params:
      incremental: enterprise_id
- name: legal_hold_policies_activate
  endpoint:
    path: /admin.legalHold.policies.activate
    method: POST
    data_selector: policy
    params:
      token: required
      policy_id: required
- name: legal_hold_policies_create
  endpoint:
    path: /admin.legalHold.policies.create
    method: POST
    data_selector: policy
    params:
      token: required
      name: required
      description: optional
      policy_start_date: optional
      policy_end_date: optional
      restrictions: optional
- name: legal_hold_policies_info
  endpoint:
    path: /admin.legalHold.policies.info
    method: POST
    data_selector: policy
    params:
      token: required
      policy_id: required
- name: legal_hold_policies_list
  endpoint:
    path: /admin.legalHold.policies.list
    method: POST
    data_selector: policies
    params:
      token: required
      cursor: optional
      limit: optional
      status: optional
- name: legal_hold_policies_release
  endpoint:
    path: /admin.legalHold.policies.release
    method: POST
    data_selector: policy
    params:
      token: required
      policy_id: required
- name: legal_hold_policies_set
  endpoint:
    path: /admin.legalHold.policies.set
    method: POST
    data_selector: policy
    params:
      token: required
      policy_id: required
      name: optional
      description: optional
- name: legal_hold_entities_add
  endpoint:
    path: /admin.legalHold.entities.add
    method: POST
    data_selector: created_entities
    params:
      token: required
      policy_id: required
      entities: required
- name: legal_hold_entities_list
  endpoint:
    path: /admin.legalHold.entities.list
    method: POST
    data_selector: entities
    params:
      token: required
      policy_id: required
      cursor: optional
      limit: optional
      include_deleted: optional
- name: legal_hold_entities_remove
  endpoint:
    path: /admin.legalHold.entities.remove
    method: POST
    data_selector: failed_ids
    params:
      token: required
      policy_id: required
      ids: required
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
- name: migration_exchange
  endpoint:
    path: /migration.exchange
    method: GET
- name: audit_logs
  endpoint:
    path: /audit/logs
    method: GET
- name: scim_api
  endpoint:
    path: /scim
    method: GET
- name: organization_ready_app_installation
  endpoint:
    path: /oauth.v2.access
    method: GET
    data_selector: ok
    params: {}
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: event
- name: app_home_opened
  endpoint:
    path: /app_home_opened
    method: POST
    data_selector: event
- name: app_mention
  endpoint:
    path: /app_mention
    method: POST
    data_selector: event
- name: bot_message
  endpoint:
    path: /message/bot_message
    method: POST
    data_selector: event
- name: workflow_deleted
  endpoint:
    path: /workflow_deleted
    method: POST
    data_selector: workflow_draft_configuration.app_steps
- name: workflow_published
  endpoint:
    path: /events/workflow_published
    method: POST
    data_selector: workflow_published_configuration.app_steps
- name: workflow_unpublished
  endpoint:
    path: /events/workflow_unpublished
    method: POST
- name: workflow_step_deleted
  endpoint:
    path: /workflow_step_deleted
    method: POST
    data_selector: event
- name: workflow_step_execute
  endpoint:
    path: /events/workflow_step_execute
    method: POST
    data_selector: event
- name: workflow_unpublished
  endpoint:
    path: /workflow_unpublished
    method: POST
    data_selector: workflow_draft_configuration.app_steps
- name: workflow_published
  endpoint:
    path: /workflow_published
    method: POST
- name: test_api
  endpoint:
    path: /api.test
    method: GET
    data_selector: ok
- name: auth_test
  endpoint:
    path: /auth.test
    method: GET
    data_selector: ok
- name: conversations_list
  endpoint:
    path: /conversations.list
    method: GET
    data_selector: channels
- name: conversations_info
  endpoint:
    path: /conversations.info
    method: GET
    data_selector: channel
- name: conversations_history
  endpoint:
    path: /conversations.history
    method: GET
    data_selector: messages
- name: app_manifest
  endpoint:
    path: /apps/settings/manifest
    method: PUT
    params:
      fedramp_authorization:
      - None
      - Low
      - Moderate
      - High
      - Customer Responsibility
      dod_srg_ilx:
      - None
      - IL2
      - IL4
      - IL5
      - IL6
      - Customer Responsibility
      itar_compliant:
      - false
      - Customer Responsibility
- name: interaction_payloads
  endpoint:
    path: /services/hooks
    method: POST
    data_selector: payload
- name: global_shortcuts
  endpoint:
    path: /api/shortcuts/create
    method: POST
    params:
      type: global
- name: message_shortcuts
  endpoint:
    path: /api/shortcuts/create
    method: POST
    params:
      type: message
- name: slash_command
  endpoint:
    path: /1234/5678
    method: POST
    data_selector: blocks
    params:
      command: /weather
      text: 94070
      response_url: https://hooks.slack.com/commands/1234/5678
      trigger_id: 13345224609.738474920.8088930838d88f008e0
      api_app_id: A123456
      team_id: T0001
      enterprise_id: E0001
      channel_id: C2147483705
      user_id: U2147483697
- name: api_test
  endpoint:
    path: /api.test
    method: GET
- name: auth_revoke
  endpoint:
    path: /auth.revoke
    method: GET
- name: auth_test
  endpoint:
    path: /auth.test
    method: GET
- name: bots_info
  endpoint:
    path: /bots.info
    method: GET
- name: calls_add
  endpoint:
    path: /calls.add
    method: GET
- name: calls_end
  endpoint:
    path: /calls.end
    method: GET
- name: calls_info
  endpoint:
    path: /calls.info
    method: GET
- name: calls_participants_add
  endpoint:
    path: /calls.participants.add
    method: GET
- name: calls_participants_remove
  endpoint:
    path: /calls.participants.remove
    method: GET
- name: calls_update
  endpoint:
    path: /calls.update
    method: GET
- name: user_information
  endpoint:
    path: /auth.test
    method: POST
    params:
      scopes: identify
- name: data_request
  endpoint:
    path: /api.read
    method: POST
    params:
      scopes: read
- name: content_posting
  endpoint:
    path: /api.post
    method: POST
    params:
      scopes: post
- name: real_time_streaming
  endpoint:
    path: /api.client
    method: POST
    params:
      scopes: client
- name: admin_actions
  endpoint:
    path: /api.admin
    method: POST
    params:
      scopes: admin
- name: message_channels
  endpoint:
    path: /events/message.channels
    method: POST
    data_selector: text
- name: message_channels
  endpoint:
    path: /events/message.channels
    method: GET
- name: incoming_webhooks
  endpoint:
    path: /webhooks/incoming
    method: POST
- name: slash_commands
  endpoint:
    path: /commands
    method: POST
- name: dialog_submission
  endpoint:
    path: /dialog.open
    method: POST
    data_selector: submission
    params:
      trigger_id: '{{ trigger_id }}'
      dialog: '{{ dialog_json }}'
- name: dialog_cancellation
  endpoint:
    path: /dialog.cancellation
    method: POST
    data_selector: cancellation
    params:
      response_url: '{{ cancellation_response_url }}'
- name: event_payloads
  endpoint:
    path: /
    method: POST
- name: send_message
  endpoint:
    path: /chat.postMessage
    method: POST
- name: interactive_message
  endpoint:
    path: /services/hooks/interactive-message
    method: POST
- name: options_load
  endpoint:
    path: /services/hooks/options-load
    method: POST
- name: interactive_message_actions
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: message
    params:
      content_type: application/x-www-form-urlencoded
- name: interactive_message_updates
  endpoint:
    path: /chat.update
    method: POST
    data_selector: message
    params:
      content_type: application/x-www-form-urlencoded
- name: interactive_message_action
  endpoint:
    path: /actions
    method: POST
- name: interactive_message_responses
  endpoint:
    path: /actions
    method: POST
    data_selector: actions
- name: conversations_list
  endpoint:
    path: /api/conversations.list
    method: GET
    data_selector: conversations
    params:
      limit: 50
- name: conversations_post
  endpoint:
    path: /api/conversations.list
    method: POST
    data_selector: conversations
- name: messages
  endpoint:
    path: /T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX
    method: POST
    data_selector: text
- name: actions
  endpoint:
    path: /chat.update
    method: POST
    data_selector: attachments
- name: ephemeral_messages
  endpoint:
    path: /chat.postEphemeral
    method: POST
    data_selector: text
- name: rtm_connect
  endpoint:
    path: /api/rtm.connect
    method: GET
- name: conversations_list
  endpoint:
    path: /api/conversations.list
    method: GET
- name: chat_postMessage
  endpoint:
    path: /api/chat.postMessage
    method: POST
- name: authorize
  endpoint:
    path: /oauth/v2/authorize
    method: GET
    params:
      user_scope: identity.basic
      client_id: '{{ dlt.secrets[''slack_client_id''] }}'
- name: token_exchange
  endpoint:
    path: /api/oauth.v2.access
    method: GET
    params:
      client_id: '{{ dlt.secrets[''slack_client_id''] }}'
      client_secret: '{{ dlt.secrets[''slack_client_secret''] }}'
      code: code
- name: users_identity
  endpoint:
    path: /api/users.identity
    method: GET
    headers:
      Authorization: Bearer {{ dlt.secrets['slack_access_token'] }}
- name: workflow_step_execute
  endpoint:
    path: /workflow_step_execute
    method: POST
- name: workflows_updateStep
  endpoint:
    path: /workflows.updateStep
    method: POST
- name: workflows_stepCompleted
  endpoint:
    path: /workflows.stepCompleted
    method: POST
- name: workflows_stepFailed
  endpoint:
    path: /workflows.stepFailed
    method: POST
- name: message_composition
  endpoint:
    path: /messaging/attachments-to-blocks
    method: GET
- name: file_upload
  endpoint:
    path: /files.upload
    method: POST
- name: file_delete
  endpoint:
    path: /files.delete
    method: POST
- name: file_info
  endpoint:
    path: /files.info
    method: GET
- name: file_list
  endpoint:
    path: /files.list
    method: GET
- name: file_remote_add
  endpoint:
    path: /files.remote.add
    method: POST
- name: file_remote_update
  endpoint:
    path: /files.remote.update
    method: POST
- name: file_remote_remove
  endpoint:
    path: /files.remote.remove
    method: POST
- name: file_remote_share
  endpoint:
    path: /files.remote.share
    method: POST
- name: chat_unfurl
  endpoint:
    path: /chat.unfurl
    method: POST
- name: interactive_message
  endpoint:
    path: /messaging/interactivity
    method: POST
    data_selector: blocks
    params:
      channel: channel_id
- name: interaction_payload
  endpoint:
    path: /interaction
    method: POST
    data_selector: payload
- name: chat_update
  endpoint:
    path: /chat.update
    method: POST
- name: chat_delete
  endpoint:
    path: /chat.delete
    method: POST
- name: conversations_list
  endpoint:
    path: /conversations.list
    method: GET
    data_selector: channels
    params: {}
- name: conversations_history
  endpoint:
    path: /conversations.history
    method: GET
    data_selector: messages
    params:
      channel: YOUR_CONVERSATION_ID
      latest: YOUR_TS_VALUE
      limit: 1
      inclusive: true
- name: conversations_replies
  endpoint:
    path: /conversations.replies
    method: GET
    data_selector: messages
    params:
      channel: YOUR_CONVERSATION_ID
      ts: PARENT_MESSAGE_TS
- name: conversations_list
  endpoint:
    path: /conversations.list
    method: GET
    data_selector: channels
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
- name: chat_scheduleMessage
  endpoint:
    path: /chat.scheduleMessage
    method: POST
- name: chat_scheduledMessages_list
  endpoint:
    path: /chat.scheduledMessages.list
    method: POST
    data_selector: scheduled_messages
- name: chat_deleteScheduledMessage
  endpoint:
    path: /chat.deleteScheduledMessage
    method: POST
- name: incoming_webhook
  endpoint:
    path: /TXXXXX/BXXXXX/XXXXXXXXXX
    method: POST
    data_selector: text
- name: messages
  endpoint:
    path: /chat.postMessage
    method: POST
- name: ephemeral_messages
  endpoint:
    path: /chat.postEphemeral
    method: POST
- name: incoming_webhooks
  endpoint:
    path: /webhooks
    method: POST
- name: interactive_messages
  endpoint:
    path: /response_url
    method: POST
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
- name: conversations_history
  endpoint:
    path: /conversations.history
    method: GET
    params:
      include_all_metadata: true
- name: chat_delete
  endpoint:
    path: /chat.delete
    method: POST
    data_selector: ok
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
- name: post_message
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: message
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: message
- name: conversations_history
  endpoint:
    path: /conversations.history
    method: POST
    data_selector: messages
    params:
      limit: 100
- name: conversations_join
  endpoint:
    path: /conversations.join
    method: POST
    data_selector: channel
- name: conversations
  endpoint:
    path: /conversations.list
    method: GET
    data_selector: channels
    params:
      exclude_archived: true
- name: conversation_replies
  endpoint:
    path: /conversations.replies
    method: GET
    data_selector: messages
    params:
      token: '{{ dlt.secrets[''slack_token''] }}'
      channel: '{{ dlt.secrets[''slack_channel''] }}'
      ts: '{{ dlt.secrets[''slack_ts''] }}'
      limit: 200
- name: files_upload
  endpoint:
    path: /files.upload
    method: POST
- name: rtm_connect
  endpoint:
    path: /rtm.connect
    method: GET
    data_selector: ok
- name: users
  endpoint:
    path: /users.list
    method: GET
    data_selector: members
- name: item_allow_read
  endpoint:
    path: /methods/admin.audit.anomaly.allow.getItem
    method: GET
- name: item_allow_update
  endpoint:
    path: /methods/admin.audit.anomaly.allow.updateItem
    method: POST
- name: ekm_channel_info
  endpoint:
    path: /admin/conversations/ekm/listOriginalConnectedChannelInfo
    method: GET
- name: functions_visibility_lookup
  endpoint:
    path: /admin/functions/permissions/lookup
    method: GET
- name: functions_visibility_set
  endpoint:
    path: /admin/functions/permissions/set
    method: POST
- name: set_user_owner
  endpoint:
    path: /admin/users/setOwner
    method: POST
- name: set_user_regular
  endpoint:
    path: /admin/users/setRegular
    method: POST
- name: clear_user_session
  endpoint:
    path: /admin/users/session/clearSettings
    method: POST
- name: get_user_session
  endpoint:
    path: /admin/users/session/getSettings
    method: GET
- name: reset_user_session_bulk
  endpoint:
    path: /admin/users/session/resetBulk
    method: POST
- name: set_user_session
  endpoint:
    path: /admin/users/session/setSettings
    method: POST
- name: unsupported_versions_export
  endpoint:
    path: /admin/users/unsupportedVersions/export
    method: GET
- name: open_app_connection
  endpoint:
    path: /apps/connections/open
    method: POST
- name: update_datastore
  endpoint:
    path: /apps/datastore/update
    method: POST
- name: event_authorizations_list
  endpoint:
    path: /apps/event/authorizations/list
    method: GET
- name: function_distribution_permissions_list
  endpoint:
    path: /functions/distributions/permissions/list
    method: GET
- name: function_distribution_permissions_set
  endpoint:
    path: /functions/distributions/permissions/set
    method: POST
- name: post_message
  endpoint:
    path: /services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX
    method: POST
    data_selector: text
- name: app_home_publish
  endpoint:
    path: /views.publish
    method: POST
    data_selector: view
- name: block_elements
  endpoint:
    path: /block-elements
    method: GET
- name: interactive_components
  endpoint:
    path: /interactive-components
    method: GET
- name: blocks
  endpoint:
    path: /blocks
    method: GET
- name: confirmation_dialog
  endpoint:
    path: /reference/block-kit/composition-objects
    method: GET
    data_selector: composition_objects
- name: conversation_selector_menu
  endpoint:
    path: /reference/block-kit/composition-objects
    method: GET
    data_selector: composition_objects
- name: plain_text_input_element
  endpoint:
    path: /reference/block-kit/composition-objects
    method: GET
    data_selector: composition_objects
- name: single_selectable_item
  endpoint:
    path: /reference/block-kit/composition-objects
    method: GET
    data_selector: composition_objects
- name: option_groups
  endpoint:
    path: /reference/block-kit/composition-objects
    method: GET
    data_selector: composition_objects
- name: text_object
  endpoint:
    path: /reference/block-kit/composition-objects
    method: GET
    data_selector: composition_objects
- name: trigger_information
  endpoint:
    path: /reference/block-kit/composition-objects
    method: GET
    data_selector: composition_objects
- name: workflow_information
  endpoint:
    path: /reference/block-kit/composition-objects
    method: GET
    data_selector: composition_objects
- name: slack_file_information
  endpoint:
    path: /reference/block-kit/composition-objects
    method: GET
    data_selector: composition_objects
- name: block
  endpoint:
    path: /reference/block-kit
    method: GET
- name: block_element
  endpoint:
    path: /reference/block-kit
    method: GET
- name: composition_object
  endpoint:
    path: /reference/block-kit
    method: GET
- name: block_actions
  endpoint:
    path: /api/interactions
    method: POST
    data_selector: actions
- name: block_suggestion_modal_view
  endpoint:
    path: /block-suggestion/modal-view
    method: POST
    data_selector: view.blocks
- name: block_suggestion_message
  endpoint:
    path: /block-suggestion/message
    method: POST
    data_selector: message.blocks
- name: shortcut_interaction
  endpoint:
    path: /reference/interaction-payloads/shortcuts
    method: POST
    data_selector: payload
- name: message_shortcut_interaction
  endpoint:
    path: /reference/interaction-payloads/shortcuts
    method: POST
    data_selector: payload
- name: view_submission
  endpoint:
    path: /reference/interaction-payloads/views
    method: GET
    data_selector: .
    params: {}
- name: view_closed
  endpoint:
    path: /reference/interaction-payloads/views
    method: GET
    data_selector: .
    params: {}
- name: block_actions
- name: message_actions
- name: view_closed
- name: view_submission
- name: app_creation
  endpoint:
    path: /apps.manifest.create
    method: POST
- name: app_update
  endpoint:
    path: /apps.manifest.update
    method: POST
- name: app_deletion
  endpoint:
    path: /apps.manifest.delete
    method: POST
- name: app_export
  endpoint:
    path: /apps.manifest.export
    method: POST
- name: app_validate
  endpoint:
    path: /apps.manifest.validate
    method: POST
- name: attachments
  endpoint:
    path: /reference/messaging/attachments
    method: POST
    data_selector: attachments
- name: link_shared
  endpoint:
    path: /link_shared
    method: POST
    data_selector: links
    params: {}
- name: chat_unfurl
  endpoint:
    path: /chat.unfurl
    method: POST
    data_selector: unfurls
- name: metadata_event
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: event_payload
- name: message_formatting
  endpoint:
    path: /reference/surfaces/formatting
    method: GET
- name: modal_view
  endpoint:
    path: /views.update
    method: POST
    data_selector: view
    params:
      type: modal
      blocks_max: 100
      title_max_length: 24
      close_max_length: 24
      submit_max_length: 24
      private_metadata_max_length: 3000
      callback_id_max_length: 255
- name: home_tab_view
  endpoint:
    path: /views.publish
    method: POST
    data_selector: view
    params:
      type: home
      blocks_max: 100
      private_metadata_max_length: 3000
      callback_id_max_length: 255
- name: workflow_step
  endpoint:
    method: POST
    data_selector: blocks
- name: workflow_step_edit_interaction
  endpoint:
    path: /reference/workflows/workflow_step_edit
    method: POST
    data_selector: .
- name: workflow_step
  endpoint:
    path: /reference/workflows/workflow_step
    method: GET
    params:
      workflow_step_execute_id: String
      workflow_step_edit_id: String
      workflow_instance_id: String
      workflow_id: String
      step_id: String
      inputs: Object
      outputs: Object[]
- name: rtm_connect
  endpoint:
    path: /rtm.connect
    method: GET
- name: send_message
  endpoint:
    path: /send
    method: POST
- name: announcement_bot
  endpoint:
    path: /announcements
    method: POST
- name: give_kudos
  endpoint:
    path: /kudos
    method: POST
- name: hello_world
  endpoint:
    path: /hello
    method: POST
- name: request_time_off
  endpoint:
    path: /time_off
    method: POST
- name: reacjilator
  endpoint:
    path: /translate
    method: POST
- name: issue_submission
  endpoint:
    path: /issues
    method: POST
- name: triage_bot
  endpoint:
    path: /triage_reports
    method: POST
- name: triage_rotation
  endpoint:
    path: /triage_rotation
    method: POST
- name: jira_functions
  endpoint:
    path: /jira_interaction
    method: POST
- name: ai_chatbot
  endpoint:
    path: /ai_chat
    method: POST
- name: simple_survey
  endpoint:
    path: /survey
    method: POST
- name: message_translator
  endpoint:
    path: /translate_message
    method: POST
- name: timesheet_approval
  endpoint:
    path: /timesheet
    method: POST
- name: slack_connect_admin
  endpoint:
    path: /slack_connect
    method: POST
- name: upgrade_app
  endpoint:
    path: /upgrade
    method: POST
- name: channels
  endpoint:
    path: /conversations.list
    method: GET
- name: channel_information
  endpoint:
    path: /conversations.info
    method: GET
- name: channel_members
  endpoint:
    path: /conversations.members
    method: GET
- name: user_conversations
  endpoint:
    path: /users.conversations
    method: GET
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
- name: chat_message
  endpoint:
    method: POST
    data_selector: messages
    params:
      token_type: user
- name: messages
  endpoint:
    method: POST
    params:
    - chat.delete
    - chat.deleteScheduledMessage
    - chat.postEphemeral
    - chat.postMessage
    - chat.scheduleMessage
    - chat.update
- name: conversations_connect_write
  endpoint:
    method: POST
- name: conversations_history
  endpoint:
    method: GET
- name: conversations_read
  endpoint:
    method: GET
- name: conversations_write
  endpoint:
    method: POST
- name: events
  endpoint:
    path: /events
    method: POST
- name: web_api
  endpoint:
    path: /web
    method: POST
- name: conversations_api
  endpoint:
    path: /conversations
    method: GET
- name: global_shortcuts
  endpoint:
    path: /shortcuts/global
    method: POST
- name: message_shortcuts
  endpoint:
    path: /shortcuts/message
    method: POST
- name: slash_commands
  endpoint:
    path: /commands
    method: POST
- name: marketplace_apps
  endpoint:
    path: /oauth/v2/authorize
    method: GET
- name: slash_command_interaction
  endpoint:
    path: /
    method: POST
    data_selector: data
- name: events
  endpoint:
    path: /events
    method: POST
- name: web_api_actions
  endpoint:
    path: /web_api
    method: POST
- name: conversations
  endpoint:
    path: /conversations
    method: GET
- name: events
  endpoint:
    path: /events
    method: POST
- name: web_api
  endpoint:
    path: /web
    method: POST
- name: conversations
  endpoint:
    path: /conversations
    method: GET
- name: events
  endpoint:
    path: /events
    method: POST
- name: conversations
  endpoint:
    path: /conversations
    method: GET
- name: post_message
  endpoint:
    path: /services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX
    method: POST
    data_selector: text
- name: workflow_builder
  endpoint:
    method: GET
- name: non_workflow_app
  endpoint:
    method: GET
- name: workflow_app
  endpoint:
    method: GET
- name: home_tab_view_publish
  endpoint:
    path: /api/views.publish
    method: POST
    data_selector: view
    params:
      token: '{{ dlt.secrets[''slack_bot_user_oauth_access_token''] }}'
      user_id: app_home_opened
      view:
        type: home
        blocks: null
- name: canvas
  endpoint:
    path: /conversations.canvases.create
    method: POST
    data_selector: document_content
    params:
      channel_id: C07317JTXCP
- name: messages
  endpoint:
    path: /chat.postMessage
    method: POST
- name: ephemeral_messages
  endpoint:
    path: /chat.postEphemeral
    method: POST
- name: incoming_webhooks
  endpoint:
    path: /webhooks
    method: POST
- name: response_url
  endpoint:
    path: /response_url
    method: POST
- name: modal_view
  endpoint:
    path: /views.open
    method: POST
    data_selector: view
    params:
      trigger_id: '{{ trigger_id }}'
- name: modal_view_update
  endpoint:
    path: /views.update
    method: POST
    data_selector: view
    params:
      view_id: '{{ view_id }}'
      hash: '{{ hash }}'
- name: modal_view_push
  endpoint:
    path: /views.push
    method: POST
    data_selector: view
    params:
      trigger_id: '{{ trigger_id }}'
- name: home_tab_view_publish
  endpoint:
    path: /views.publish
    method: POST
    data_selector: ok
    params:
      user_id: app_home_opened
      view:
        type: home
        blocks:
        - type: section
          text:
            type: mrkdwn
            text: This is a Block Kit example
          accessory:
            type: image
            image_url: https;//api.slack.com/img/blocks/bkb_template_images/notifications.png
            alt_text: calendar thumbnail
        - type: actions
          elements:
          - type: button
            text:
              type: plain_text
              text: Click Me
              emoji: true
            value: click_me_123
            action_id: actionId-0
- name: chat_post_message
  endpoint:
    method: POST
    data_selector: response
- name: search_messages
  endpoint:
    method: POST
    data_selector: response
- name: logger_configuration
  endpoint:
    method: CONFIG
    data_selector: configuration
- name: channel
  endpoint:
    path: /types/channel
    method: GET
    data_selector: channel
- name: conversation_info
  endpoint:
    path: /conversations.info
    method: GET
    data_selector: channel
- name: conversation_history
  endpoint:
    path: /conversations.history
    method: GET
    data_selector: messages
- name: event_callback
  endpoint:
    path: /events
    method: POST
    data_selector: event
- name: file
  endpoint:
    path: /files.info
    method: GET
    data_selector: file
- name: private_channel
  endpoint:
    path: /types/group
    method: GET
    data_selector: .
    params: {}
- name: conversation
  endpoint:
    path: /conversations
    method: GET
    data_selector: .
    params: {}
- name: im
  endpoint:
    path: /types/im
    method: GET
    data_selector: .
- name: mpim
  endpoint:
    path: /types/mpim
    method: GET
    data_selector: ''
- name: usergroup
  endpoint:
    path: /types/usergroup
    method: GET
    data_selector: usergroup
- name: user
  endpoint:
    path: /users.info
    method: GET
    data_selector: user
    params:
      user: '{{user_id}}'
- name: users
  endpoint:
    path: /users.list
    method: GET
    data_selector: members
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: attachments
    params:
      token: '{{ dlt.secrets[''slack_token''] }}'
- name: conversations_create
  endpoint:
    path: /conversations.create
    method: POST
    params:
      token: '{{ dlt.secrets[''slack_token''] }}'
      name: something-urgent
- name: create_issue
  endpoint:
    path: /functions/create-issue
    method: POST
    data_selector: options
    params:
      project: '{{input_parameters.project}}'
      support_channel: '{{input_parameters.support_channel}}'
- name: get_projects
  endpoint:
    path: /functions/get-projects
    method: POST
    data_selector: options
notes:
- Requires OAuth2 with specific scopes for calling functions
- API calls must handle both audio and video call types
- Interaction can start via both slash commands and direct Call icon
- Channels can be shared across workspaces and organizations; channel IDs may change
  when shared.
- Certain user properties might differ when interacting with users from other teams.
- File info must be explicitly requested for files in Slack Connect channels.
- Events API allows subscription to various Slack events.
- Supports both Socket Mode and HTTP request URL setups.
- Event subscriptions require setting up a Slack app and configuring OAuth scopes.
- Socket Mode uses WebSocket connections instead of HTTP request URLs for communication.
- Socket Mode is only available for apps using granular permissions.
- WebSockets are stateful and bidirectional, designed for low latency communication.
- WebSocket URLs are not static and refresh regularly.
- Apps in Socket Mode cannot be listed in the public Slack Marketplace.
- Requires OAuth2 authentication with specific scopes for various actions
- API methods allow management of Slack Connect processes including invites and approvals
- Different settings and scopes are required for workflow apps and granular bot apps
- API uses cursor-based pagination by default.
- Channel IDs may change; use conversations.list to monitor changes.
- Access control is managed through multiple permission scopes.
- Workspace apps were retired in August 2021.
- HTTP is stateless and well-suited for static content and standard API requests.
- WebSocket allows for simultaneous two-way communication and is best for real-time
  applications.
- Slack limits the number of concurrent WebSocket connections to 10 per app.
- HTTP connections are short-lived; WebSocket connections are long-lived.
- Using HTTP in production applications is recommended for higher reliability.
- Socket Mode is recommended for local development and situations where HTTP endpoints
  can't be exposed due to firewall restrictions.
- HTTP is required for apps submitted to the Slack Marketplace.
- Support for both HTTP and WebSocket is built into the Slack Bolt frameworks without
  the need for SDKs.
- Events API uses OAuth permission scoping system to control access.
- Events are sent via HTTP POST in JSON format.
- Requires setting up Event Subscriptions in Slack app settings.
- Supports handling high volumes with rate limiting.
- Events API request URL must be verified and is case-sensitive
- Request URLs can receive high volumes of events; consider decoupling event ingestion
  from processing
- The 'token' field in the event payload is deprecated
- Status text must be a string of no more than 100 characters; does not support markup
  or user mentions
- status_emoji must be a string corresponding to an emoji installed on the workspace
- status_expiration is an integer specifying seconds since the epoch, known as UNIX
  time
- Endpoints are unauthenticated and can be accessed directly in a browser.
- Version 1.0.0 shows only one incident at a time; version 2.0.0 shows all active
  incidents.
- Poll 'current' endpoint once a minute for immediate notifications; more frequent
  polling not recommended.
- Socket Mode replaces the need for a public HTTP Request URL
- Apps using Socket Mode are not allowed in the public Slack Marketplace
- Socket Mode can be toggled on or off any time
- Requires granular permissions for apps created after December 2019
- Web API supplies a collection of HTTP methods supporting the majority of Slack app
  functionality
- Events API allows apps to respond to activities in Slack
- Slack apps need scopes to perform actions and cannot access RTM API directly.
- Domain verification is required for using Sign in with Slack features.
- The issuer URL for OpenID Connect is https://slack.com/.well-known/openid-configuration.
- User Token scopes include openid, profile, email, and several identity scopes.
- Migration to new app permissions required by May 27th, 2022 for apps in the Slack
  Marketplace
- Classic apps will not be supported after March 2026
- Classic apps can no longer be created after June 4, 2024
- No new classic app submissions or updates after December 2020
- OAuth tokens do not expire unless revoked.
- Supports token rotation for granular permissions.
- Using OAuth 2.0 Authorization Code flow for obtaining bot and user tokens
- Enterprise Grid-level scopes require additional configuration for public distribution
- Bot user API access tokens may not access RTM
- Granular scopes required for each method call
- Deactivation of the installing user does not affect API access
- RTM access continues only with classic app bot tokens
- Token rotation feature is available for both bot and user tokens.
- The refresh token is revoked after a new one is used.
- The access token expires every 12 hours (43200 seconds).
- Refresh tokens are designed to be used once.
- Sign in with Slack links is a paid feature.
- Uses OAuth2 with refresh token.
- Requires domain verification and app settings configured under Basic Information
  and Submit to Slack Marketplace tabs.
- Uses OpenID Connect built on top of OAuth 2.0
- Token rotation supports refresh_token grant type
- Workflow tokens expire either 15 minutes after being issued or upon completion of
  a function step; they cannot be refreshed.
- Service tokens do not expire and are not refreshable.
- Slack uses a signing secret to verify requests; older verification tokens are deprecated
- Signature is created by hashing the request body with SHA-256 and combining it with
  an HMAC signing secret
- Security implementation using HMAC with SHA-256 to verify Slack requests
- Switch from deprecated verification token to Signing Secret for new integrations
- Mutual TLS allows app to verify outgoing HTTP request is authentic
- Uses OAuth 2.0 with refresh token
- Tokens frequently expire and need regeneration
- Datastores are only available for workflow apps
- Datastores are backed by DynamoDB
- Attributes cannot be nullable if using built-in Slack types
- Updates to an existing datastore that could result in data loss may require the
  use of the --force flag when re-deploying the app.
- OAuth2 uses access tokens to verify a user's identity instead of sharing passwords.
- Requires explicit permission to access external resources; ensure outgoing domains
  are listed if making HTTP requests to them.
- Messages tab in Slack apps is read-only by default; can be configured in manifest
- Authorization data is saved locally in ~/.slack/credentials.json
- Use `slack auth list` to verify setup
- Slack API supports various SDKs including Bolt for Python, JavaScript, and Java
- Workflow Builder and workflow apps have different capabilities and API access levels
  depending on the plan
- When posting messages, screen readers will default to the top-level `text` field
  of the post and will not read the content of any interior `blocks`
- Modals do not rely on a channel context unlike dialogs; the view_submission event
  will not contain a response_url
- Modals can contain up to 100 blocks compared to the 10 elements limit in dialogs
- Bolt framework simplifies app installation, authentication, and permissions handling
- Includes support for Socket Mode using websocket
- Deprecation of username in favor of display_name and user ID
- Use of user ID for referencing and mentioning users
- Transition period where both username and user ID are functional
- Prefer using Authorization headers with Bearer tokens for OAuth credentials.
- Supports JSON bodies for POST requests.
- Slack message 'text' field initially limited to 500,000 characters; reduced to 40,000
  characters over time
- Messages exceeding the limit are truncated and a warning 'message_truncated' is
  provided
- Rate limits apply to API methods; handle HTTP 429 responses appropriately.
- New rate limits for conversations.history and conversations.replies effective from
  September 2, 2025.
- Ensure OAuth scopes are correctly set for accessing user emails and other sensitive
  data.
- Rate limits for non-Marketplace apps are 1 request per minute with a maximum of
  15 messages per request
- New installations and apps created after May 29, 2025, are immediately subject to
  new rate limits
- Existing installations will be affected starting September 2, 2025
- Internal customer-built apps created before May 29, 2025, retain current rate limits
- Real-time Search API is in limited beta; general availability not yet announced
- API rate limits are enforced; handle HTTP 429 responses by implementing retry logic
  with exponential backoff.
- Uses OAuth2 with refresh token; requires setup of connected app in Slack
- Manifests are reusable configurations designed to make an app's configuration "portable"
- Uses OAuth2 with refresh token for CLI authentication
- Enterprise Key Management (EKM) allows customers to use their own AWS KMS keys for
  encryption
- Workflow tokens expire either 15 minutes after being issued or when a function step
  is completed
- Workflow tokens cannot be refreshed and are revoked immediately after expiry
- App-level tokens are obtained upon app creation
- To add workflow steps to your app in the app settings, first select your app from
  the list, then navigate to App Manifest and add the event subscription.
- Apps containing workflow steps cannot be distributed publicly or submitted to the
  Slack Marketplace.
- External users cannot use a workflow that contains connector steps or workflow steps
  built by your organization, may see 'home_team_only' warning.
- Tokens are the keys to the Slack platform; various types available
- Ensure that the most common language is chosen for the entire audience in each context
- Cannot localize pre-configured text in slash commands or message actions
- Requires compliance with Slack API developer policies and guidelines
- Requires proper data encryption and secure application operation
- Requires adherence to privacy policies and legal compliance regarding data use
- Uses OAuth2 with refresh token
- The app should not DM users out of the blue for onboarding.
- Use events like `app_home_opened` and `app_mention` to start interaction.
- Direct Install URL simplifies the OAuth authorization step.
- OAuth 2.0 flow needed for apps to be installed on multiple workspaces
- Apps can be distributed listed or unlisted
- Listed apps go through a review process in the Slack Marketplace
- Direct installs and Add to Slack buttons are available for distributed apps
- Distributed apps must support SSL
- Permissions requested by the app are crucial for admin approval in some workspaces
- Agentforce available on all paid Slack plans without additional add-on
- Sandbox or trial environments available for development and testing
- Markdown in Slack is different from common markup, requiring specific formatting.
- Socket mode is not intended for use in production environments.
- AI apps feature is in active development, suggesting possible future changes to
  API.
- Workspace guests are not permitted to access AI apps.
- App submissions to the Slack Marketplace with the Agents & AI Apps feature are reserved
  for select partners only.
- Requires OAuth2 Browser Flow for authentication
- Named Credentials are used for storing OAuth tokens
- The action_token is short-lived and should be used promptly after being received.
- The Data Access API does not have semantic retrieval capabilities.
- Formatting in the search string can affect results; strip any formatting before
  sending.
- Data must not be stored or used for training LLMs as per Slack policy.
- Requires multiple scopes to access different types of conversations
- Uses cursor-based pagination by default
- Channel IDs may change, especially in shared environments
- Possible discrepancies in data like channel types or member lists due to transitions
  or API updates
- Developer sandboxes are for application testing and development
- Sandbox provisioning requires being part of the Slack Developer Program
- Up to 10 sandboxes can be provisioned over 30 days
- Active sandboxes are limited to two at any time
- Sandboxes are active for six months by default
- Sandbox lifetime can be extended every six months
- Slack message formatting uses `mrkdwn` type for markdown-like formatting in Block
  Kit.
- Special characters like `&`, `<`, `>` must be escaped using HTML entities.
- Emoji included in messages are converted to colon format upon publishing.
- Text objects can refer to Slack channels or user IDs with special link formatting.
- The `<!date>` command in messages allows for formatting and localization of timestamps.
- Block Kit is recommended for creating rich message layouts, with legacy support
  for attachments.
- Slack uses special characters (&, <, >) as control characters that must be escaped
  unless used for their parsing purpose.
- Markdown (mrkdwn) is used for formatting messages with certain elements only allowing
  plain_text.
- Automatic parsing of URLs and mentions can be disabled to prevent unintentional
  parsing.
- Messages built with blocks are not supported in all Slack views like 'All unreads',
  'Threads', etc.
- OAuth scopes define permissions for various actions and objects.
- Certain scopes cannot be combined, such as 'bot' and 'client'.
- Deprecated scopes ('read', 'post', 'client') should not be used.
- Legacy tokens act like passwords and should be handled carefully
- Tokens are tied to user and team and include various scopes
- Unused legacy tokens are periodically invalidated
- Use auth.revoke to programmatically revoke tester tokens
- Rate limit changes effective May 29, 2025 for non-Marketplace apps
- Existing installations affected from September 2, 2025
- Rate limits vary by method and are assigned to tiers or special conditions
- Burst limits are allowed but not precisely defined externally
- Multiple SDKs available including Python, JavaScript, and Java
- Custom actions available through Bolt SDK
- Free plan allows access to most Slack API methods but developing certain types of
  apps requires a paid plan
- Enterprise Grid may affect app behaviors due to shared channels and multiple workspaces.
- Use migration.exchange to update records with global user IDs.
- OAuth tokens are linked to the authorizing user's account status
- Ensure apps are organization-ready for Enterprise Grid deployment
- User tokens continue to function after transitioning to organization-wide app
- Existing user and bot tokens are preserved and usable without re-authentication
- Single token setup for organization-wide apps
- Installed at the organization level, not automatically added to workspaces
- OAuth flow needed for Slack Marketplace apps
- Use of 'team_id' parameter required for certain API methods in org-wide installations
- Sandbox not intended for normal use; for testing only.
- Data retention limited to three days for messages and files.
- The Events API can be used with Socket Mode or designated HTTP endpoints.
- OAuth scopes are required to control access to events.
- Server must respond to HTTP POST requests within three seconds to avoid delivery
  failures.
- Rate limiting may apply, with specifics provided via the 'app_rate_limited' event.
- app_home_opened events are sent each time a user enters into the App Home space
- Only app_mention events are sent over the Events API for messages mentioning the
  app
- Direct messages to the app are not dispatched via app_mention
- Must subscribe to message.im to receive direct messages
- Steps from Apps is deprecated and will be retired in September 2024
- Steps from Apps is deprecated and will be retired in September 2024.
- Access tokens are known as bearer tokens
- Web API accepts both application/x-www-form-urlencoded and application/json
- Use Mutual TLS for verifying identity
- Authorization codes should be exchanged within 10 minutes
- GovSlack instances run on a separate domain, slack-gov.com, for compliance with
  US public sector security standards.
- Apps must be deployed and approved in the GovSlack environment to be available in
  the GovSlack Slack Marketplace.
- Compliance with FedRAMP, FIPS 140.2, DOD IL, and ITAR is managed by the infrastructure
  providers and is partly the responsibility of the app developers.
- Certain events like 'link_shared' behave differently in GovSlack, and 'preview'
  field should not be used for unfurling to avoid errors.
- HTTP POST request must be acknowledged within 3 seconds with an HTTP 200 OK response.
- Interaction payloads are form-urlencoded with the 'payload' parameter as JSON.
- The 'response_url' bypasses channel posting permissions for actions.
- Requires 'commands' scope for shortcuts functionality
- Shortcuts require a Request URL to receive interaction payloads
- Up to 5 global and 5 message shortcuts can be created per app
- Requires HTTPS URL for Request URL
- Response must be acknowledged within 3000 ms
- Response message visibility can be controlled with response_type parameter
- Refresh token by default is not enabled and requires enabling through official documentation
  in English
- Discontinuing legacy custom bot creation after June 4, 2024
- Legacy bots do not support interactive messages features
- Legacy tokens are deprecated and should be replaced with OAuth 2.0 tokens.
- Legacy tokens are revoked if unused for a long period.
- Outgoing Webhooks are a legacy method and should not be used; migrate to Slack apps
  and the Events API.
- 'Outgoing webhook rate limit: no more than one message per second; bursts allowed
  over short periods.'
- Legacy custom integrations are deprecated in favor of Slack apps
- Use of Events API recommended over Outgoing Webhooks
- New token generation necessary for Slack Web API
- Requires OAuth2 for authentication and uses Bearer token in Authorization header
- Supports dynamic form elements and validations based on user input
- Uses response_url for asynchronous interactions after initial dialog submission
- Legacy bot users and tokens have restricted API access
- Bots will be discontinued after March 31, 2025, for legacy custom bots
- Interactive messages require specific fields like callback_id and actions when using
  buttons or menus
- Interactive messages require a callback_id for identifying actions.
- All interactive message actions require HTTPS with valid SSL for the Request URL.
- Interactive messages must be handled within 3 seconds or use the response_url for
  extended interactions.
- Interactive messages require a Slack app setup
- Message menus allow for single selections only.
- Dynamic options can be loaded externally with a limit of 100 options per menu.
- Slack uses OAuth scopes in the format object:action:perspective
- Certain scopes cannot be requested together due to compatibility issues
- Slack uses OAuth 2.0 authorization code grant flow to issue access tokens
- Access tokens do not expire, and bot user tokens may be revoked by uninstalling
  the app
- Redirect URLs must use HTTPS and exactly match the callback URL
- Messages posted via RTM API cannot include attachments or buttons.
- Incoming webhooks and Web API support richly formatted messages.
- Sign in with Slack uses OAuth 2.0 with an authorization code flow
- Requires enabling interactivity in app settings
- Interacts with Slack's Workflow Builder
- Uses custom modals for configurations
- Supports up to 10 custom steps per app
- Automatic re-authentication needed upon scope addition
- It's recommended to switch from old message attachments to block layouts.
- Direct equivalents for most attachment fields exist, except for 'color'.
- Blocks allow for more flexible and complex message compositions.
- The 'text' field now integrates markdown and plain text settings directly.
- New limits apply to text length and number of elements in blocks.
- Scopes required for file operations include files:read, files:write, files:write:user
- Scopes for remote files include remote_files:read, remote_files:share, remote_files:write,
  chat:write, links:read, links:write
- Interaction payloads are sent to a configured Request URL via HTTP POST.
- The payload parameter should be parsed as JSON.
- Requires scopes 'channels:read' and 'channels:history' for operating on messages
  within channels
- Requires OAuth2 for authentication with specific scopes like channels:read and chat:write.
- Channels and message IDs are needed for various API calls.
- Incoming webhooks are URLs to which you send a JSON payload.
- Do not share your webhook URL publicly.
- Incoming webhooks cannot delete messages.
- OAuth2 is used for generating incoming webhook URLs during app installation.
- Ephemeral messages are not retrievable via APIs and do not persist across sessions.
- Interactive messages rely on user interactions for updates or deletions.
- Message metadata allows for custom event_type and event_payload within messages
- Supports application/json and application/x-www-form-urlencoded content types; prefers
  JSON for complex data.
- Method posts a message to a public channel, private channel, or direct message conversation.
- Authentication token must have the correct scopes.
- Supports both 'application/x-www-form-urlencoded' and 'application/json' content
  types.
- Rate limit of 1 request per minute for new non-Marketplace apps from May 29, 2025
- Existing non-Marketplace apps will be subject to new rate limits from September
  2, 2025
- files.upload is deprecated and will stop functioning on March 11, 2025.
- Newly created apps will be unable to use files.upload beginning May 8, 2024.
- Slack apps require specific scopes to perform actions
- Slack apps cannot access the RTM API directly; use Events API
- Interactivity must be enabled for users to interact with components like buttons.
- UI inconsistencies in multi-select menus on iOS
- Some fields such as 'url' in slack_file may require access permissions
- Interactive elements in messages or views trigger block_actions payloads
- Different components like buttons, inputs, and menus can trigger these payloads
- Payload types include modal views and messages
- Interaction payloads can vary based on the source of the interactive elements
- Response URL is only included for message shortcuts
- Payloads are specific to modal interactions in Slack apps.
- Legacy feature; prefer using layout blocks
- Limit of 20 attachments per message
- Attachments may look different on mobile devices
- Avoid using multiple attachments when one will suffice
- Requires app settings configuration for OAuth scopes and domain registration
- Events API used for receiving link_shared events
- Domain registration without protocols required
- Unicode domains not supported
- React to link_shared events with chat.unfurl method
- Guidelines are strong recommendations, not enforced programmatically.
- Use double quotes for JSON keys and values in event_payload.
- Steps from Apps functionality is deprecated and will be retired in September 2024
- RTM API uses WebSocket for real-time communication.
- The WebSocket URL from rtm.connect is single-use and expires in 30 seconds.
- Message size should not exceed 16 kilobytes.
- Message frequency should not exceed one message per second to avoid rate limits.
- Classic apps are required to use RTM; new classic app creation will be discontinued
  after June 4, 2024.
- Token rotation mechanism available
- Supports both legacy and current OAuth flows
- Token rotation is supported
- Supports legacy authentication methods
- This scope is only available to Slack apps
- To use this scope, your app must also request `chat:write`
- Supports token rotation
- Legacy and current OAuth scopes available
- conversations:history is deprecated
- conversations:read is deprecated
- conversations:write is deprecated
- Socket Mode allows use of WebSocket Protocol without exposing a static HTTP endpoint
- Apps unsuitable for listing include those that export or backup message data; are
  built for searching Slack data outside Slack; use legacy/restricted scopes or methods;
  allow possibly destructive behavior; embed Slack into another site; only use Sign
  in with Slack functionality; replicate Slack client functionality; request large
  number of scopes for non-work related functionality; share sensitive information
  in Slack; circumvent admin features in Slack; do not provide any functionality deemed
  valuable in Slack; enable remote execution via third party scripts; facilitate sharing
  of third party service accounts; are installed on less than 10 active workspaces;
  are in private beta, still being built, or not fully tested; enable financial transactions,
  including cryptocurrency or NFTs; use Slack data to train Large Language Models;
  perform sentiment analysis unless providing clear aggregate level value.
- Direct install needs HTTP 302 redirect to the OAuth authorization URL
- Landing page and support page must be publicly accessible
- Ensure to respond within 3000ms to avoid timeout errors for shortcuts
- Slash command names should be unique to avoid name collisions
- Adhere to the 'principle of least privilege' for scope requests
- Avoid using scopes intended for future functionality
- Avoid requesting legacy/restricted scopes
- Broad access to workspace message/file data and admin scopes are unlikely to be
  approved unless part of partner program
- Use of user token scopes should be minimized and only requested when necessary
- Be cautious about circumventing Slack's product limitations, particularly on free
  tier regarding 90-day history limit
- Only select partners have access to Data Access API and related scopes
- Be transparent about AI interactions and data handling in app submissions
- Do not use Slack data to train LLMs
- Do not perform unexpected actions such as joining all public channels by default
- API tokens must be stored securely and not exposed to end users
- API access must comply with Slack's privacy model
- Only apps on Slack's paid plans are allowed
- All traffic must use TLS version 1.2 or greater as of February 19, 2020
- Apps must meet quality and utility standards for listing in the Slack Marketplace
- Direct Install URL must HTTP 302 redirect to slack.com/oauth/v2/authorize
- Apps not used actively may be delisted
- Slash commands require HTTPS URLs for the request URL to ensure security.
- Escape channels, users, and links sent to your app can be controlled, affecting
  how data is received.
- Response must be sent within 3000 milliseconds to avoid operation_timeout errors.
- response_type can be set to 'ephemeral' or 'in_channel' to control message visibility.
- Events API uses HTTP POST to communicate events
- Socket Mode uses WebSocket Protocol instead of HTTP
- Conversations API deals specifically with channel-like objects
- Uses various APIs for different functionalities
- Socket Mode does not require a static HTTP endpoint
- Bolt framework available to simplify app development in JavaScript, Python, and
  Java
- Socket Mode uses WebSocket Protocol instead of exposing a static HTTP endpoint
- Bolt framework available in JavaScript, Python, and Java
- Slack apps require explicit permission for actions through scopes
- Slack apps need to be invited to channels to post messages unless "chat:write.public"
  scope is used
- Access to the Real Time Messaging API is restricted to legacy Slack apps
- Slack's platform allows for various integrations and customizations through different
  APIs and SDKs.
- Workflow Builder and workflow apps require a paid plan for developing automations.
- Free plan allows access to many features but with limitations.
- Enterprise Grid plan is needed for multi-workspace apps, Admin API, SCIM API, Discovery
  API, Legal Holds API, and Audit Logs API.
- Ensure to have chat:write and im:history permissions for full functionality.
- Blocks in Home tabs must not exceed 100.
- private_metadata and external_id are optional but have character limits.
- Messages can be formatted with `mrkdwn`.
- Ephemeral messages disappear after the session closes and cannot be retrieved.
- Interactivity can be added through response_url and interactive components in messages.
- Modals require a valid, unexpired trigger_id obtained from an interaction payload
  to open.
- trigger_id expires 3 seconds after it's sent.
- Use hash in views.update to prevent race conditions and ensure data consistency.
- Update home tab view via POST to /views.publish with user_id and view JSON
- Requires 'chat:write' permission for Messages tab functionality
- Apps require permissions to send messages or create modals
- Modals are transient and only invoked in response to user actions
- Bolt for Java is a framework to build Slack apps on JVM
- Focuses on handling events from Slack with minimal setup
- Token management is handled internally; user does not need to manually provide tokens.
- Using 'ctx.client()' holds a valid bot token automatically.
- Overwriting token is possible by providing a user token explicitly.
- Middleware turns unsuccessful response codes like 404 to 200 OK in debug mode when
  SLACK_APP_DEBUG_MODE=1
- Properties such as `is_channel`, `is_group`, etc., can have overlapping meanings
  and should be used carefully to determine the type of conversation.
- Conversation types like DMs might not include `num_members` in responses.
- Authentication is required to retrieve file URLs
- Editable-mode files will also have a `url_private_download` parameter, which includes
  headers to force a browser download
- users:read.email OAuth scope required for accessing email field
- Uses bearer token for OAuth 2.0 authentication in the Authorization header.
- Slack Web API requires HTTPS, SSL, and TLS v1.2 or above with SNI and specific cipher
  suites for secure connections.
- Dynamic options in Workflow Builder can be rendered as a drop-down menu or a set
  of fields.
- The dynamic option's output must adhere to a defined interface, either options_select
  or options_field.
- Synchronous handling of function_executed events is recommended for dynamic options
  to ensure responsive UI updates.
errors:
- call_rejected: Handle according to your app logic
- channel_not_found: The channel ID used in the API request does not refer to an existing
    or accessible channel.
- frozen_reason: <connection_severed> Indicates a conversation was frozen due to disconnection
    between organizations.
- app_rate_limited: Reduce request rate or handle rate limiting logic to prevent suspension.
- http_timeout: Ensure the server responds within 3 seconds to avoid retries.
- too_many_redirects: Limit redirects to avoid excessive retry attempts.
- connection_failed: Check server connectivity and DNS settings.
- ssl_error: Ensure SSL certificates are valid.
- http_error: Handle HTTP errors gracefully.
- unknown_error: Prepare for unexpected issues and check Slack API status.
- type: disconnect
  reason: link_disabled
  debug_info:
    host: example_host
- type: disconnect
  reason: refresh_requested
  debug_info:
    host: example_host
- not specified
- app_rate_limited: Your app has been rate limited for too many events; adjust your
    event subscription settings.
- http_timeout: Your server took longer than 3 seconds to respond.
- too_many_redirects: Too many HTTP redirects encountered.
- connection_failed: Failed to connect to your server.
- ssl_error: SSL certificate could not be verified.
- http_error: HTTP status code outside the 200 OK range was received.
- unknown_error: An unexpected error occurred.
- Server Timeout: Use the "Retry" button for URL verification if initial attempt fails
- invalid_cursor: Provide a valid cursor value or recheck its encoding
- 401 Unauthorized: Check if the correct OAuth scopes are used and token is valid
- HTTP 429 Too Many Requests:
    advice: Wait for the time specified in the 'Retry-After' header before retrying
      the request.
- When toggling Socket Mode off, you may lose events until the WebSocket connection
  is established.
- 'Not in channel: Invite the app to the channel or check scopes.'
- invalid_auth: Request from IP not in allowed list
- Authentication Request without matching login_hint will fail.
- Error: Slack API scope error
  Advice: Add necessary scopes as per the Slack API documentation and resubmit the
    app for review
- bad_redirect_uri: Ensure redirect_uri matches configured values.
- invalid_scope: Verify requested scopes exist and do not conflict.
- invalid_team_for_non_distributed_app: Cannot authorize undistributed apps on unauthorized
    teams.
- scope_not_allowed_on_enterprise: Check if scopes are compatible with Enterprise
    Grid org.
- unapproved_scope: Ensure scopes are approved or under review for your app.
- INVALID_CLIENT_ID: Ensure the client ID is correct and registered in Slack App settings
- INVALID_SCOPE: Verify the scopes are correct and supported for the token type being
    requested
- AUTHORIZATION_DENIED: User denied the authorization request
- 'Token revoked: Use auth.revoke method to handle or prevent'
- invalid_app_icon: Check your app setup above.
- invalid_app_icon_background: Check your app setup above.
- invalid_app_privacy_link: Check your app setup above.
- invalid_app_tos: Check your app setup above.
- uri_not_handled_by_app: Contact Slack.
- scope_conflict: Separate OAuth flows needed for different scopes
- legacy_bot_token_usage: Avoid using legacy bot tokens for new applications as they
    are deprecated and do not support new platform features.
- 401 Unauthorized: Verify the signing secret and ensure the request is coming from
    Slack
- Replay_Attack: Ignore requests with reused timestamp and signature
- 401 Unauthorized: Recheck OAuth scopes or token expiration
- TypeScript errors: Ensure optional properties are handled correctly to avoid runtime
    issues
- primary key is formatted as a string: Ensure primary key is correctly formatted
    as a string
- Failed to retrieve the external auth token due to ${tokenResponse.error}
- Failed to call my endpoint! (status; ${response.status}, body; ${body})
- access_token_exchange_failed: An error was returned from the configured token_url
- external_user_identity_not_found: The configured account_identifier was not found
    in user identity response
- internal_error: An internal system error happened. Please reach out to Slack if
    this occurs consistently
- invalid_identity_config_response: url in the configured identity_config returned
    an invalid response
- invalid_token_response: token_url returned an invalid response
- missing_client_secret: Optional client secret was found for this provider
- no_refresh_token: Token to refresh the expired access token does not exist
- oauth2_callback_error: The OAuth2 provider returned an error
- oauth2_exchange_error: There was an error while obtaining the OAuth2 token from
    the configured provider
- scope_mismatch_error: Slack was not able to find an OAuth2 token that matched the
    scope configured on your provider
- token_not_found: Slack was not able to find an OAuth2 token for this user and provider
- sdk_hook_not_found: Ensure this hook is implemented in your `slack.json`
- cli_update_required: Run `slack upgrade` to get the latest version
- If authorization fails, reauthorize with `slack login`
- Unauthorized: Ensure proper OAuth tokens are used
- Plan Restriction: Some features require a paid plan or higher service tier
- If JSON is improperly formatted or credentials are incorrect, methods may not understand
  requests.
- message_truncated: Adjust message content to avoid truncation
- TOO_MANY_REQUESTS: Handle rate limits with exponential backoff.
- INVALID_AUTH: Check OAuth tokens and scopes.
- Rate limit exceeded: Consider reducing request frequency or check if application
    qualifies for Marketplace
- too_many_attachments: Reduce the number of attachments per message to below 100
- not_authed: Ensure that the OAuth token is valid and has not expired
- REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency
- home_team_only: External users cannot use a workflow that contains connector steps
    or workflow steps built by your organization.
- Data breach: Notify affected users and Slack immediately via feedback@slack.com
- 401 Unauthorized: Check OAuth permissions and token validity.
- NOT_FOUND: Check if Salesforce and Slack orgs are correctly connected
- If errors occur in processing, clear the status to prevent the app from appearing
  stuck.
- error: API Error; '{{ error_message }}'
- 401 Unauthorized: Ensure the action_token and Slack token are correctly provided
    and valid.
- If not on a paid plan, a valid payment method is needed for identity verification
  only; no charges applied
- Org Admin approval might be required for sandbox provisioning if set within organization's
  settings
- If markdown formatting does not appear as expected, ensure that `type` is set to
  `mrkdwn` and verify the syntax.
- For issues with special character display, ensure they are properly escaped as HTML
  entities.
- Incorrect message formatting may lead to parsing errors or display issues in Slack.
- invalid_scope: Cannot request service scope (bot) with deprecated scopes.
- Unused legacy tokens: Use your tokens regularly to avoid automatic revocation
- HTTP 429 Too Many Requests: Retry-After header indicates wait time
- 401 Unauthorized: Check OAuth scopes or token validity
- 429 Too Many Requests: Implement exponential backoff in API requests
- team_added_to_org: Practice an exponential backoff strategy during Enterprise Grid
    migrations.
- invalid_cursor: The pagination cursor provided is invalid
- legal_hold_not_found: The requested policy does not exist
- released_policy_edit_not_allowed: Polices which are released cannot be edited
- too_many_entities: The request cannot be completed because it includes too many
    entities
- max_active_entities_reached: A legal hold policy can have up to 1000 entities
- unknown_method: The requested method cannot be found
- Token Revoked: If the original installer's account is deactivated or loses "Org
    Owner" status, the token will be revoked
- Incorrect channel identifier: Use channel IDs instead of channel names for methods
    like chat.postMessage
- team_access_not_granted: The app will fail to retrieve information from channels
    that only exist on a single workspace
- app_rate_limited: Occurs when event delivery rate exceeds 30,000 per workspace per
    app per 60 minutes.
- http_timeout: Server response took longer than 3 seconds.
- too_many_redirects: More than 2 HTTP redirects encountered.
- connection_failed: Server could not be reached or found.
- http_error: HTTP status code outside the 200 OK range was encountered.
- '401 Unauthorized: Recheck API key or token expiration'
- 200 OK: API is operational
- cli_update_required: Update Slack CLI to the latest version
- 200 OK: Ensure to respond within 3000ms to avoid generic error messages
- Generic Error: Occurs if the app does not acknowledge the interaction payload quickly
- operation_timeout: Ensure your response is sent within 3000 milliseconds
- 500 Internal Server Error: Indicates an error in processing and responding, not
    in receiving the data payload
- Token Revoked: Reissue or regenerate a new token.
- 'Non-200 responses: Retried a reasonable number of times.'
- 401 Unauthorized: Ensure new OAuth tokens are properly generated and permissions
    are correctly set
- dialog_expired: Handle by re-prompting the user to initiate the action again
- invalid_dialog_element: Provide detailed error messages to help correct form input
- 'Invalid SSL Certificate: Verify your server''s SSL certificate is valid.'
- 'Invalid signature: Ensure the x-slack-signature header matches your computed signature.'
- 429 Too Many Requests: Reduce request rate as per Slack API guidelines.
- invalid_scope: Cannot request service scope (bot) with deprecated scopes
- access_denied: Check if the user denied the request and handle accordingly
- 401 Unauthorized: Check token scope for 'chat:write:bot' or 'chat:write:user'.
- Socket URL has expired: Reconnect using rtm.connect
- message text is missing: Ensure message content is included
- 'error: Display an error message if state doesn''t match expectations'
- 429 Too Many Requests: Reduce frequency of requests or handle rate limits
- If using older interactive components, update to handle new block-based interaction
  payloads.
- 'not_authed: Token is invalid or missing'
- 'invalid_auth: Authentication token is for a deleted user or team'
- 'account_inactive: Authentication token is for a deactivated account'
- REQUEST_TIMEOUT: Increase timeout settings or optimize data handling.
- error: Log and handle as per the SlackApiException or similar error responses.
- action_prohibited: Admin restrictions may block posting; do not retry.
- channel_is_archived: Channel archived, choose an active channel.
- invalid_payload: Ensure JSON is correctly structured.
- invalid_token: Check the token validity or refresh it.
- no_active_hooks: Webhook disabled or invalid, verify webhook status.
- no_service: Webhook service unavailable or removed, verify webhook status.
- no_service_id: Verify the service ID in the webhook URL.
- no_team: Ensure the Slack workspace is correct and active.
- no_text: Ensure the 'text' field is included in the payload.
- posting_to_general_channel_denied: 'Restricted posting to the #general channel.'
- team_disabled: The Slack workspace has been disabled.
- too_many_attachments: Limit messages to a maximum of 100 attachments.
- user_not_found: Verify the user exists.
- channel_not_found: Verify the channel exists and is correct.
- 'not_found: Check the channel ID or message ID'
- 'invalid_auth: Recheck the OAuth token or permissions'
- cant_delete_message: Authenticated user does not have permission to delete this
    message.
- channel_not_found: Value passed for channel is unknown or invalid.
- message_not_found: No message exists with the requested timestamp.
- access_denied: Access to a resource specified in the request is denied.
- account_inactive: Authentication token is for a deleted user or workspace.
- deprecated_endpoint: The endpoint has been deprecated.
- ekm_access_denied: Administrators have suspended the ability to post a message.
- enterprise_is_restricted: The method cannot be called from an Enterprise.
- invalid_auth: Some aspect of authentication cannot be validated.
- method_deprecated: The method has been deprecated.
- missing_scope: The token used is not granted the specific scope permissions required
    to complete this request.
- not_allowed_token_type: The token type used in this request is not allowed.
- not_authed: No authentication token provided.
- no_permission: The workspace token used in this request does not have the permissions
    necessary to complete the request.
- org_login_required: The workspace is undergoing an enterprise migration and will
    not be available until migration is complete.
- token_expired: Authentication token has expired.
- token_revoked: Authentication token is for a deleted user or workspace or the app
    has been removed.
- two_factor_setup_required: Two factor setup is required.
- team_access_not_granted: The token used is not granted the specific workspace access
    required to complete this request.
- accesslimited: Access to this method is limited on the current network.
- fatal_error: The server could not complete your operation(s) without encountering
    a catastrophic error.
- internal_error: The server could not complete your operation(s) without encountering
    an error, likely due to a transient issue on our end.
- invalid_arg_name: The method was passed an argument whose name falls outside the
    bounds of accepted or expected values.
- invalid_arguments: The method was either called with invalid arguments or some detail
    about the arguments passed is invalid.
- invalid_array_arg: The method was passed an array as an argument.
- invalid_charset: The method was called via a request with an invalid charset.
- invalid_form_data: The method was called via a request with invalid form data.
- invalid_post_type: The method was called via a request with an invalid post type.
- missing_post_type: The method was called via a request missing a post type.
- ratelimited: The request has been ratelimited.
- request_timeout: The method was called via a request that timed out.
- service_unavailable: The service is temporarily unavailable.
- team_added_to_org: The workspace associated with your request is currently undergoing
    migration to an Enterprise Organization.
- too_many_attachments: Limit message attachments to a maximum of 100.
- channel_not_found: Ensure the channel ID exists and the app has permissions to post
    messages in it.
- rate_limited: Adhere to the rate limit of 1 message per second per channel; consider
    implementing retry logic.
- as_user_not_supported: The
- channel_not_found: Value passed for
- duplicate_channel_not_found: Channel associated with
- duplicate_message_not_found: No duplicate message exists associated with
- invalid_blocks: Blocks submitted with this message are not valid
- invalid_blocks_format: The
- invalid_metadata_format: Invalid metadata format provided
- invalid_metadata_schema: Invalid metadata schema provided
- is_archived: Channel has been archived.
- message_limit_exceeded: Members on this team are sending too many messages. For
    more details, see https://slack.com/help/articles/115002422943-Usage-limits-for-free-workspaces
- messages_tab_disabled: Messages tab for the app is disabled.
- metadata_must_be_sent_from_app: Message metadata can only be posted or updated using
    an app-level token
- metadata_too_large: Metadata exceeds size limit
- msg_blocks_too_long: Blocks submitted with this message are too long.
- no_text: No message text provided
- not_in_channel: Cannot post user messages to a channel they are not in.
- rate_limited: Application has posted too many messages, read the Rate Limit documentation
    for more information
- restricted_action: A workspace preference prevents the authenticated user from posting.
- restricted_action_non_threadable_channel: Cannot post thread replies into a non_threadable
    channel.
- restricted_action_read_only_channel: Cannot post any message into a read-only channel.
- restricted_action_thread_locked: Cannot post replies to a thread that has been locked
    by admins.
- restricted_action_thread_only_channel: Cannot post top-level messages into a thread-only
    channel.
- slack_connect_canvas_sharing_blocked: Admin has disabled Canvas File sharing in
    all Slack Connect communications
- slack_connect_file_link_sharing_blocked: Admin has disabled Slack File sharing in
    all Slack Connect communications
- slack_connect_lists_sharing_blocked: Admin has disabled Lists sharing in all Slack
    Connect communications
- team_not_found: This error occurs if, when using an org-wide token, the
- too_many_attachments: Too many attachments were provided with this message. A maximum
    of 100 attachments are allowed on a message.
- too_many_contact_cards: Too many contact_cards were provided with this message.
    A maximum of 10 contact cards are allowed on a message.
- cannot_reply_to_message: This message type cannot have thread replies.
- missing_file_data: Attempted to share a file but some required data was missing.
- attachment_payload_limit_exceeded: Attachment payload size is too long.
- markdown_text_conflict: Markdown text cannot be used in conjunction with
- account_inactive: Authentication token is for a deleted user or workspace when using
    a
- invalid_auth: Some aspect of authentication cannot be validated. Either the provided
    token is invalid or the request originates from an IP address disallowed from
    making the request.
- no_permission: The workspace token used in this request does not have the permissions
    necessary to complete the request. Make sure your app is a member of the conversation
    it's attempting to post a message to.
- token_expired: Authentication token has expired
- token_revoked: Authentication token is for a deleted user or workspace or the app
    has been removed when using a
- accesslimited: Access to this method is limited on the current network
- fatal_error: The server could not complete your operation(s) without encountering
    a catastrophic error. It's possible some aspect of the operation succeeded before
    the error was raised.
- internal_error: The server could not complete your operation(s) without encountering
    an error, likely due to a transient issue on our end. It's possible some aspect
    of the operation succeeded before the error was raised.
- invalid_arg_name: The method was passed an argument whose name falls outside the
    bounds of accepted or expected values. This includes very long names and names
    with non-alphanumeric characters other than
- invalid_arguments: The method was either called with invalid arguments or some detail
    about the arguments passed is invalid, which is more likely when using complex
    arguments like blocks or attachments.
- invalid_array_arg: The method was passed an array as an argument. Please only input
    valid strings.
- invalid_charset: The method was called via a
- invalid_form_data: The method was called via a
- invalid_post_type: The method was called via a
- missing_post_type: The method was called via a
- ratelimited: The request has been ratelimited. Refer to the
- request_timeout: The method was called via a
- service_unavailable: The service is temporarily unavailable
- team_added_to_org: The workspace associated with your request is currently undergoing
    migration to an Enterprise Organization. Web API and other platform operations
    will be intermittently unavailable until the transition is complete.
- channel_not_found: If your app doesn't have permission to enter into a DM with the
    intended user.
- channel_not_found: Check if the channel ID is correct and accessible by the token
- invalid_cursor: Ensure the cursor value is correct or not expired
- invalid_metadata_filter_keys: Verify the filter keys used in the request
- invalid_ts_latest: Check the format of the "latest" timestamp parameter
- invalid_ts_oldest: Check the format of the "oldest" timestamp parameter
- not_in_channel: Ensure the token used has access to the channel
- access_denied: Confirm permissions and access levels for the resource
- account_inactive: Use an active account or token
- deprecated_endpoint: Use the current version of the endpoint
- ekm_access_denied: Check Enterprise Key Management permissions
- enterprise_is_restricted: Confirm if the method can be used with enterprise restrictions
- invalid_auth: Validate the authentication token used
- method_deprecated: Update to use the non-deprecated method
- missing_scope: Ensure the token has the required scopes to perform the operation
- not_allowed_token_type: Confirm the type of token used is permitted for this method
- not_authed: Provide a valid authentication token
- no_permission: Check if the token has necessary permissions for the operation
- org_login_required: Wait for the enterprise migration to complete
- token_expired: Refresh or obtain a new authentication token
- token_revoked: Check the status of the token or obtain a new one
- two_factor_setup_required: Complete two-factor authentication setup
- team_access_not_granted: Ensure the token has access to the specific workspace
- accesslimited: Check network restrictions for method access
- fatal_error: Retry the operation, ensuring all parameters are correct
- internal_error: Retry the request, possibly after some time if the issue persists
- invalid_arg_name: Ensure argument names are within accepted bounds
- invalid_arguments: Verify the arguments for correctness and completeness
- invalid_array_arg: Ensure only valid strings are used as arguments
- invalid_charset: Use a supported character set
- invalid_form_data: Ensure the form data is correct
- invalid_post_type: Verify the method of the post request
- missing_post_type: Specify the post type for the request
- ratelimited: Follow the rate limits specified for the method
- request_timeout: Ensure the server is reachable and operational
- service_unavailable: Check the service status and retry when available
- team_added_to_org: Wait for the workspace migration to an Enterprise Organization
    to complete
- channel_not_found: The channel specified was not found
- is_archived: Channel has been archived and cannot be joined
- method_not_supported_for_channel_type: This method cannot be used with the specified
    type of conversation
- missing_scope: The token used does not have the required scope for this operation
- too_many_members: The channel has exceeded the maximum number of members
- access_denied: Access to the specified resource is denied
- account_inactive: The token used is for a deleted user or workspace
- deprecated_endpoint: The endpoint used has been deprecated
- ekm_access_denied: EKM restrictions prevent this action
- enterprise_is_restricted: The method cannot be used from an Enterprise account
- invalid_auth: The authentication provided is invalid
- is_bot: Bots cannot call this method
- user_is_restricted: Restricted users or guests cannot call this method
- method_deprecated: The method has been deprecated
- not_allowed_token_type: The type of token used is not permitted for this method
- not_authed: No authentication token was provided
- no_permission: Insufficient permissions to execute this method
- org_login_required: The workspace is undergoing an enterprise migration
- token_expired: The authentication token has expired
- token_revoked: The authentication token has been revoked
- two_factor_setup_required: Two-factor authentication setup is required
- team_access_not_granted: The token does not have the required workspace access
- fatal_error: A catastrophic error occurred during the operation
- internal_error: An internal error occurred during the operation
- invalid_arg_name: The argument name provided is invalid
- invalid_arguments: Invalid or improperly formatted arguments were provided
- invalid_array_arg: An array was provided as an argument, which is not accepted
- invalid_charset: The charset specified is invalid
- invalid_form_data: The form data is invalid
- invalid_post_type: The post type is invalid
- missing_post_type: A required post type is missing
- ratelimited: The request has been rate limited
- request_timeout: The request timed out
- team_added_to_org: The workspace is undergoing migration to an enterprise organization
- invalid_cursor: Check if the cursor value is correct
- invalid_limit: Ensure the limit is an integer under 1000
- invalid_types: Verify the types parameter
- method_not_supported_for_channel_type: This type of conversation cannot be used
    with this method
- missing_argument: A required argument is missing
- missing_scope: The token used is not granted the specific scope permissions required
    to complete this request
- team_access_not_granted: The token used is not granted the specific workspace access
    required to complete this request
- access_denied: Access to a resource specified in the request is denied
- account_inactive: Authentication token is for a deleted user or workspace
- deprecated_endpoint: The endpoint has been deprecated
- ekm_access_denied: Administrators have suspended the ability to post a message
- enterprise_is_restricted: The method cannot be called from an Enterprise
- invalid_auth: Some aspect of authentication cannot be validated
- not_allowed_token_type: The token type used in this request is not allowed
- not_authed: No authentication token provided
- no_permission: The workspace token used in this request does not have the permissions
    necessary to complete the request
- org_login_required: The workspace is undergoing an enterprise migration and will
    not be available until migration is complete
- token_revoked: Authentication token is for a deleted user or workspace or the app
    has been removed
- two_factor_setup_required: Two factor setup is required
- fatal_error: The server encountered a catastrophic error
- internal_error: The server encountered an error, likely due to a transient issue
- invalid_arg_name: The method was passed an argument whose name falls outside the
    bounds of accepted or expected values
- invalid_arguments: The method was either called with invalid arguments or some detail
    about the arguments passed is invalid
- invalid_array_arg: The method was passed an array as an argument
- invalid_charset: The method was called via a method that does not support the charset
    used
- invalid_form_data: The method was called via a method that does not support the
    form data used
- invalid_post_type: The method was called via a method that does not support the
    post type used
- missing_post_type: The method was called via a method that expects a post type that
    was not provided
- ratelimited: The request has been ratelimited
- request_timeout: The method was called via a method that timed out
- team_added_to_org: The workspace is undergoing migration to an Enterprise Organization
- thread_not_found: Check if the thread still exists or if the ts value is correct
- channel_not_found: Ensure the channel ID is correct and accessible
- invalid_cursor: Check the cursor value or start pagination anew if the cursor is
    no longer valid
- missing_scope: Ensure the token used has the correct permissions for the requested
    operation
- ratelimited: Reduce request frequency or handle retries after a cooldown
- blocked_file_type: Admin has disabled uploading this type of file.
- channel_not_found: At least one of the values passed for channels is not found.
- invalid_channel: One or more channels supplied are invalid.
- malware_detected: This file may contain a virus or other malware and can't be uploaded
    to Slack.
- not_in_channel: Authenticated user is not in the channel.
- post_contents_too_large: File content is larger than 130kb.
- posting_to_general_channel_denied: 'An admin has restricted posting to the #general
    channel.'
- slack_connect_blocked_file_type: File uploads with certain types are blocked in
    all Slack Connect communications.
- slack_connect_clip_sharing_blocked: Admin has disabled Clip sharing in Slack Connect
    channels.
- slack_connect_file_upload_sharing_blocked: Admin has disabled File uploads in all
    Slack Connect communications.
- invalid_thread_ts: Value passed to thread_ts was invalid.
- internal_error: The server could not complete your operation(s) without encountering
    an error.
- invalid_charset: The method was called via a method not supporting the charset.
- invalid_form_data: The method was called via a method not supporting the form data.
- invalid_post_type: The method was called via a method not supporting the post type.
- missing_post_type: The method was called via a method not specifying the post type.
- request_timeout: The method was called via a method that timed out.
- migration_in_progress: Team is being migrated between servers
- fatal_error: The server could not complete your operation(s) without encountering
    a catastrophic error
- internal_error: The server could not complete your operation(s) without encountering
    an error, likely due to a transient issue on our end
- team_added_to_org: The workspace associated with your request is currently undergoing
    migration to an Enterprise Organization
- limit_required: Set a limit for large teams
- missing_argument: Ensure all required arguments are provided
- team_access_not_granted: Verify that the token grants access to the specified workspace
- invalid_auth: Verify the token or the request's originating IP address
- missing_scope: Ensure the token has the required scope permissions
- not_allowed_token_type: Check the token type used in the request
- not_authed: Ensure an authentication token is provided
- no_permission: Verify app membership in the conversation
- token_revoked: Check the status of the user, workspace, or app
- fatal_error: A catastrophic error occurred on the server
- internal_error: A transient issue occurred on the server
- invalid_arg_name: Check the argument names for accepted values
- invalid_arguments: Verify the arguments passed, especially for complex types
- invalid_array_arg: Ensure only valid strings are passed as arguments
- invalid_charset: Check the character set used in the method call
- invalid_form_data: Check the form data used in the method call
- invalid_post_type: Check the post type used in the method call
- missing_post_type: Ensure a post type is provided in the method call
- ratelimited: Reduce the request frequency to avoid rate limits
- request_timeout: Increase the timeout settings
- 'Not in channel: Invite the app to the channel or check the scope.'
- 'ok: false': Check if the bot user OAuth token is correct and has the necessary
    scopes.
- Payload Rejected: Ensure only URL or ID is provided for Slack file, not both.
- 'token_expired: Refresh your OAuth token using the refresh_token flow'
- 'token deprecated: Verify requests using signing secret instead'
- invalid_manifest: Review the error pointers and messages provided to correct your
    manifest
- 'Exceeding 20 attachments: Reduce number of attachments'
- invalid_blocks: Ensure using supported Block Kit elements, rich text sections not
    supported
- 'Incorrect property name: Use correct naming conventions as per guidelines.'
- unicode_conversion: Be aware that non-standard characters are converted to unicode
- code: 1
  message: Socket URL has expired
- code: 2
  message: message text is missing
- '401 Unauthorized: Check OAuth scopes or token validity'
- '401 Unauthorized: Verify OAuth scopes and token validity'
- 401 Unauthorized: Check authentication credentials
- Response time: Support requests should receive a response within 2 business days
- Unauthorized access to private channels or restricted actions: Ensure compliance
    with Slack's privacy model and do not expose restricted information
- 302 Redirect Failure: Ensure the Direct Install URL correctly redirects to the OAuth
    authorization URL
- operation_timeout: Ensure the response is sent within 3000 milliseconds of the request.
- 500 Internal Server Error: Indicates a failure in processing the command, not in
    receiving it.
- 401 Unauthorized: Check authentication tokens and permissions
- 401 Unauthorized: Ensure proper OAuth scopes are configured
- 401 Unauthorized: Check that the OAuth scopes and tokens are correctly configured
    and valid
- 'Invalid auth: Recheck Bot User OAuth Token and permissions.'
- response_action: errors
  error_message: You may not select a due date in the past
- ok: false; "Check the token validity or permissions"
- 'Failed to search by query: Ensure valid query and token permissions.'
- 404 Not Found: Transforms to a 200 OK with an ephemeral message for debugging
- invalid_json: Ensure JSON attribute keys are strings wrapped with double-quote characters.
- json_not_object: Ensure that JSON is correctly formatted as a hash of key/value
    pairs.
- function_executed: Ensure synchronous event handling to avoid delays in dynamic
    options.
auth_info:
  mentioned_objects:
  - OAuth & Permissions
  - Scopes
  - OAuth scopes
  - authorized_users
  - App manifest
  - App Settings
  - permission_scopes
  - OAuth
  - bot scope
  - SSL certificate
  - OAuthToken
  - App-level token
  - access_token
  - scopes
  - Client ID
  - Client Secret
  - Bot user token
  - User token
  - OpenID Connect Relying Party
  - Domain Verification
  - OAuth redirect URL
  - Development Workspace
  - Redirect URL
  - Authorization Code
  - Bot Token
  - User Token
  - Bot Token Scopes
  - App Credentials
  - Basic Information
  - app_id
  - user_id
  - team_id
  - App
  - Bot token
  - Workflow token
  - Configuration token
  - Service token
  - Signing Secret
  - Mutual TLS
  - OpenID Connect
  - DefineDatastore
  - Schema
  - OAuth2 credentials
  - manifest file
  - OAuth2Provider
  - DefineOAuth2Provider
  - externalAuthProviders
  - Schema.slack.types.oauth2
  - Manifest
  - Token
  - External authentication
  - OAuth access token
  - users:read permission scope
  - Bearer Token
  - OauthToken
  - AuthProvider
  - xoxp token
  - App Manifest
  - Workflow Steps
  - Tokens
  - Events API
  - access token
  - OAuth 2.0 flow
  - Salesforce org
  - Slack org
  - Agentforce
  - Socket Mode
  - Install App
  - OAuth2
  - Enterprise Grid
  - Web API
  - HTTP headers
  - Slack app
  - OAuth flow
  - OAuth tokens
  - admin account
  - bot user token
  - organization-wide user token
  - Bot user
  - bot_id
  - bot_profile
  - Access Token
  - Bot User Token
  - verification_token
  - BotToken
  - UserToken
  - Legacy Tokens
  - Bearer token
  - Bot User OAuth Access Token
  - Request URL
  - OAuth permission scopes
  - chat:write:bot
  - chat:write:user
  - OAuth2.0
  - authorization code
  - Slack App
  - Event Subscriptions
  - App Unfurl Domains
  - WebClient
  - incoming_webhook
  - metadata
  - event_type
  - event_payload
  - token
  - OAuth Tokens
  - composition_objects
  - block_actions
  - interactive_message
  - bot_access_token
  - App settings
  - App unfurl domains
  - view_submission
  - Legacy Bot Token
  - Slack apps
  - chat:write
  - Legacy bot
  - SDK
  - WebSocket Protocol
  - API tokens
  - Conversations API
  - OAuth & Permissions page
  - trigger_id
  - App Home
  - Modals
  - Messages
  - bot_token
  - user_token
  - OAuth Scopes
  - users:read.email
  - users:read
  - function
  - inputs
  - function_executed
  - function.completeSuccess
  - function.completeError
  - ack
client:
  base_url: https://slack.com/api
  auth:
    type: oauth2
    flow: refresh_token
    location: header
    header_name: Authorization
    token_url: https://slack.com/api/openid.connect.token
    client_secret: '{{ dlt.secrets[''slack_client_secret''] }}'
    client_id: '{{ dlt.secrets[''slack_client_id''] }}'
    refresh_token: '{{ dlt.secrets[''slack_refresh_token''] }}'
    scopes:
    - admin.legalHolds:read
    - admin.legalHolds:write
  headers:
    Accept: application/json
    Content-Type: application/json
    Content-type: application/x-www-form-urlencoded
    X-Slack-Signature: '{{ dlt.secrets[''slack_signing_secret''] }}'
    Authorization: Bearer xoxb-your-token
  paginator:
    type: unknown
    cursor_path: response_metadata.next_cursor
    cursor_param: cursor
    page_size_param: limit
    default_page_size: 100
source_metadata: null
