resources:
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: content
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: content
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: content
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: content
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: content
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: messages
    params: {}
- name: Claude Opus 4
  endpoint:
    path: /claude-opus-4
    method: GET
    data_selector: model_info
    params: {}
- name: claude
  endpoint:
    path: /api/v1/claude
    method: GET
    data_selector: data
- name: claude_opus_4
  endpoint:
    path: /models/claude-opus-4-20250514
    method: GET
    data_selector: model_info
- name: Claude Sonnet 4
  endpoint:
    path: /api/claude-sonnet-4
    method: GET
    data_selector: data
- name: claude_sonnet_4
  endpoint:
    path: /v1/models/claude-sonnet-4-20250514
    method: GET
    data_selector: model
- name: claude_model
  endpoint:
    path: /api/v1/claude/sonnet4
    method: GET
    data_selector: model_info
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: content
    params:
      max_tokens: 1024
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: content
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: content
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: content
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: usage
    params:
      service_tier: auto
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: content
- name: models
  endpoint:
    path: /api/models
    method: GET
    data_selector: models
- name: service_tiers
  endpoint:
    path: /en/api/service-tiers
    method: GET
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: choices
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: id
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: message
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: choices
    params: {}
- name: message_batch
  endpoint:
    path: /v1/messages/batches
    method: POST
    data_selector: id
    params: {}
- name: message_batch_results
  endpoint:
    path: /v1/messages/batches/results
    method: GET
    data_selector: result
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: content
- name: model
  endpoint:
    path: /bedrock/list-foundation-models
    method: GET
    data_selector: modelSummaries
    params:
      region: us-west-2
      by-provider: anthropic
- name: message_batch
  endpoint:
    path: /messages/batches
    method: POST
    data_selector: requests
- name: model_access
  endpoint:
    path: /bedrock/model-access
    method: GET
- name: list_foundation_models
  endpoint:
    path: /bedrock/list-foundation-models
    method: GET
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: message
    params: {}
- name: list_foundation_models
  endpoint:
    path: /list-foundation-models
    method: GET
    data_selector: modelSummaries[*].modelId
    params:
      region: us-west-2
      by-provider: anthropic
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: content
- name: organization_members
  endpoint:
    path: /v1/organizations/users
    method: GET
    params:
      limit: '10'
- name: api_keys
  endpoint:
    path: /v1/organizations/api_keys
    method: GET
    params:
      limit: '10'
      status: active
- name: organization_info
  endpoint:
    path: /v1/organizations/me
    method: GET
- name: create_invite
  endpoint:
    path: /v1/organizations/invites
    method: POST
- name: list_invites
  endpoint:
    path: /v1/organizations/invites
    method: GET
    params:
      limit: '10'
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: message
    params:
      anthropic_version: vertex-2023-10-16
- name: organization_members
  endpoint:
    path: /v1/organizations/users
    method: GET
    data_selector: users
    params:
      limit: '10'
- name: organization_invites
  endpoint:
    path: /v1/organizations/invites
    method: GET
    data_selector: invites
    params:
      limit: '10'
- name: workspaces
  endpoint:
    path: /v1/organizations/workspaces
    method: GET
    data_selector: workspaces
    params:
      limit: '10'
      include_archived: 'false'
- name: organization_info
  endpoint:
    path: /v1/organizations/me
    method: GET
    data_selector: organization
- name: organization_members
  endpoint:
    path: /v1/organizations/users
    method: GET
    data_selector: ''
    params:
      limit: '10'
- name: api_keys
  endpoint:
    path: /v1/organizations/api_keys
    method: GET
    data_selector: ''
    params:
      limit: '10'
      status: active
      workspace_id: wrkspc_xxx
- name: organization_info
  endpoint:
    path: /v1/organizations/me
    method: GET
    data_selector: ''
    params: {}
- name: create_invite
  endpoint:
    path: /v1/organizations/invites
    method: POST
    data_selector: ''
    params: {}
- name: list_invites
  endpoint:
    path: /v1/organizations/invites
    method: GET
    data_selector: ''
    params:
      limit: '10'
- name: organization_members
  endpoint:
    path: /v1/organizations/users
    method: GET
    data_selector: users
    params:
      limit: 10
- name: organization_invites
  endpoint:
    path: /v1/organizations/invites
    method: GET
    data_selector: invites
    params:
      limit: 10
- name: workspaces
  endpoint:
    path: /v1/organizations/workspaces
    method: GET
    data_selector: workspaces
    params:
      limit: 10
      include_archived: false
- name: organization_info
  endpoint:
    path: /v1/organizations/me
    method: GET
    data_selector: organization
- name: organization_users
  endpoint:
    path: /v1/organizations/users
    method: GET
    data_selector: null
    params:
      limit: '10'
- name: organization_invites
  endpoint:
    path: /v1/organizations/invites
    method: GET
    data_selector: null
    params:
      limit: '10'
- name: organization_workspaces
  endpoint:
    path: /v1/organizations/workspaces
    method: GET
    data_selector: null
    params:
      limit: '10'
      include_archived: 'false'
- name: organization_api_keys
  endpoint:
    path: /v1/organizations/api_keys
    method: GET
    data_selector: null
    params:
      limit: '10'
      status: active
- name: organization_info
  endpoint:
    path: /v1/organizations/me
    method: GET
    data_selector: null
    params: {}
- name: usage_report
  endpoint:
    path: /v1/organizations/usage_report/messages
    method: GET
    data_selector: messages
    params:
      starting_at: '2025-01-01T00:00:00Z'
      ending_at: '2025-01-31T00:00:00Z'
      limit: 7
- name: cost_report
  endpoint:
    path: /v1/organizations/cost_report
    method: GET
    data_selector: costs
    params:
      starting_at: '2025-01-01T00:00:00Z'
      ending_at: '2025-01-31T00:00:00Z'
      group_by[]:
      - workspace_id
      - description
- name: organization_members
  endpoint:
    path: /v1/organizations/users
    method: GET
    data_selector: users
    params:
      limit: '10'
- name: organization_invites
  endpoint:
    path: /v1/organizations/invites
    method: GET
    data_selector: invites
    params:
      limit: '10'
- name: workspaces
  endpoint:
    path: /v1/organizations/workspaces
    method: GET
    data_selector: workspaces
    params:
      limit: '10'
      include_archived: 'false'
- name: api_keys
  endpoint:
    path: /v1/organizations/api_keys
    method: GET
    data_selector: api_keys
    params:
      limit: '10'
      status: active
- name: usage_report
  endpoint:
    path: /v1/organizations/usage_report/claude_code
    method: GET
    data_selector: records
    params:
      starting_at: '2025-09-08'
- name: usage_report
  endpoint:
    path: /v1/organizations/usage_report/messages
    method: GET
    data_selector: results
    params: {}
- name: cost_report
  endpoint:
    path: /v1/organizations/cost_report
    method: GET
    data_selector: results
    params: {}
- name: inbound_ip_addresses_ipv4
  endpoint:
    path: /ip/inbound/ipv4
    method: GET
    data_selector: addresses
- name: inbound_ip_addresses_ipv6
  endpoint:
    path: /ip/inbound/ipv6
    method: GET
    data_selector: addresses
- name: outbound_ip_addresses_ipv4
  endpoint:
    path: /ip/outbound/ipv4
    method: GET
    data_selector: addresses
- name: usage_report
  endpoint:
    path: /v1/organizations/usage_report/claude_code
    method: GET
    data_selector: records
    params:
      starting_at: YYYY-MM-DD
      limit: '20'
- name: inbound_ip_addresses
  endpoint:
    path: /inbound/ip_addresses
    method: GET
    data_selector: ipv4
    params: {}
- name: outbound_ip_addresses
  endpoint:
    path: /outbound/ip_addresses
    method: GET
    data_selector: ipv4
    params: {}
- name: delete_message_batch
  endpoint:
    path: /v1/messages/batches/{message_batch_id}
    method: DELETE
- name: message_batch
  endpoint:
    path: /v1/messages/batches
    method: POST
    data_selector: requests
- name: message_batch
  endpoint:
    path: /v1/messages/batches/{message_batch_id}
    method: GET
    data_selector: results_url
    params: {}
- name: message_batch_results
  endpoint:
    path: /v1/messages/batches/{message_batch_id}/results
    method: GET
    data_selector: result
    params: {}
- name: delete_message_batch
  endpoint:
    path: /v1/messages/batches/{message_batch_id}
    method: DELETE
    data_selector: id
- name: message_batches
  endpoint:
    path: /v1/messages/batches
    method: GET
    data_selector: data
- name: message_batch
  endpoint:
    path: /v1/messages/batches
    method: POST
    data_selector: requests
    params: {}
- name: cancel_message_batch
  endpoint:
    path: /v1/messages/batches/{message_batch_id}/cancel
    method: POST
- name: files
  endpoint:
    path: /files
    method: POST
    data_selector: created_at
- name: message_batches
  endpoint:
    path: /v1/messages/batches/{message_batch_id}
    method: GET
    data_selector: results_url
    params: {}
- name: message_batch_results
  endpoint:
    path: /v1/messages/batches/{message_batch_id}/results
    method: GET
    data_selector: result
- name: models
  endpoint:
    path: /v1/models
    method: GET
    data_selector: data
    params:
      limit: 20
- name: message_batches
  endpoint:
    path: /v1/messages/batches
    method: GET
    data_selector: data
    params:
      limit: 20
- name: model
  endpoint:
    path: /v1/models/{model_id}
    method: GET
    data_selector: id
- name: cancel_message_batch
  endpoint:
    path: /v1/messages/batches/{message_batch_id}/cancel
    method: POST
- name: count_tokens
  endpoint:
    path: /v1/messages/count_tokens
    method: POST
    data_selector: input_tokens
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: content
    params: {}
- name: create_file
  endpoint:
    path: /v1/files
    method: POST
    data_selector: created_at
- name: list_files
  endpoint:
    path: /v1/files
    method: GET
    data_selector: files
- name: get_file_metadata
  endpoint:
    path: /v1/files/{id}
    method: GET
    data_selector: metadata
- name: download_file
  endpoint:
    path: /v1/files/{id}/content
    method: GET
    data_selector: content
- name: delete_file
  endpoint:
    path: /v1/files/{id}
    method: DEL
    data_selector: deleted
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: content
    params: {}
- name: models
  endpoint:
    path: /models
    method: GET
    data_selector: data
- name: model
  endpoint:
    path: /v1/models/{model_id}
    method: GET
    data_selector: ''
- name: count_message_tokens
  endpoint:
    path: /v1/messages/count_tokens
    method: POST
    data_selector: input_tokens
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: content
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: content
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: content
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: messages
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: message
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages/create
    method: POST
    data_selector: content
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: content
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: message
    params: {}
- name: messages
  endpoint:
    path: /beta/messages
    method: POST
    data_selector: content
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: choices
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: id
- name: message_batch
  endpoint:
    path: /messages/batches
    method: POST
    data_selector: id
    params: {}
- name: models
  endpoint:
    path: /api/models
    method: GET
    data_selector: modelSummaries
- name: list_foundation_models
  endpoint:
    path: /bedrock/list-foundation-models
    method: GET
    data_selector: modelSummaries
    params:
      region: us-west-2
      by_provider: anthropic
- name: generate_text
  endpoint:
    path: /bedrock/messages
    method: POST
    data_selector: content
    params:
      model: global.anthropic.claude-sonnet-4-5-20250929-v1:0
      max_tokens: 256
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: message
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: content
- name: organizations_users
  endpoint:
    path: /v1/organizations/users
    method: GET
    data_selector: users
    params:
      limit: '10'
- name: organizations_api_keys
  endpoint:
    path: /v1/organizations/api_keys
    method: GET
    data_selector: api_keys
    params:
      limit: '10'
      status: active
- name: organizations_me
  endpoint:
    path: /v1/organizations/me
    method: GET
    data_selector: organization
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: choices
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: messages
- name: organizations_users
  endpoint:
    path: /v1/organizations/users
    method: GET
    data_selector: users
    params:
      limit: '10'
- name: organizations_invites
  endpoint:
    path: /v1/organizations/invites
    method: GET
    data_selector: invites
    params:
      limit: '10'
- name: organizations_me
  endpoint:
    path: /v1/organizations/me
    method: GET
    data_selector: organization
- name: message_batch
  endpoint:
    path: /messages/batches
    method: POST
    data_selector: requests
- name: organizations_users
  endpoint:
    path: /v1/organizations/users
    method: GET
    data_selector: users
    params:
      limit: '10'
- name: organizations_invites
  endpoint:
    path: /v1/organizations/invites
    method: GET
    data_selector: invites
    params:
      limit: '10'
- name: organizations_workspaces
  endpoint:
    path: /v1/organizations/workspaces
    method: GET
    data_selector: workspaces
    params:
      limit: '10'
      include_archived: 'false'
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: modelSummaries
- name: organizations_users
  endpoint:
    path: /v1/organizations/users
    method: GET
    data_selector: users
    params:
      limit: '10'
- name: organizations_invites
  endpoint:
    path: /v1/organizations/invites
    method: GET
    data_selector: invites
    params:
      limit: '10'
- name: organizations_workspaces
  endpoint:
    path: /v1/organizations/workspaces
    method: GET
    data_selector: workspaces
    params:
      limit: '10'
      include_archived: 'false'
- name: organizations_api_keys
  endpoint:
    path: /v1/organizations/api_keys
    method: GET
    data_selector: api_keys
    params:
      limit: '10'
      status: active
- name: organizations_me
  endpoint:
    path: /v1/organizations/me
    method: GET
    data_selector: organization
- name: models
  endpoint:
    path: /bedrock/models
    method: GET
    data_selector: modelSummaries
    params: {}
- name: messages
  endpoint:
    path: /bedrock/messages
    method: POST
    data_selector: message
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: message
- name: usage_report
  endpoint:
    path: /v1/organizations/usage_report/messages
    method: GET
    data_selector: records
    params:
      starting_at: '2025-01-01T00:00:00Z'
      ending_at: '2025-01-08T00:00:00Z'
      bucket_width: 1d
- name: cost_report
  endpoint:
    path: /v1/organizations/cost_report
    method: GET
    data_selector: records
    params:
      starting_at: '2025-01-01T00:00:00Z'
      ending_at: '2025-01-31T00:00:00Z'
- name: usage_report
  endpoint:
    path: /v1/organizations/usage_report/claude_code
    method: GET
    data_selector: data
- name: organizations_users
  endpoint:
    path: /v1/organizations/users
    method: GET
    data_selector: ''
    params:
      limit: '10'
- name: organizations_api_keys
  endpoint:
    path: /v1/organizations/api_keys
    method: GET
    data_selector: ''
    params:
      limit: '10'
      status: active
- name: organizations_me
  endpoint:
    path: /v1/organizations/me
    method: GET
    data_selector: ''
    params: {}
- name: organizations_invites
  endpoint:
    path: /v1/organizations/invites
    method: GET
    data_selector: ''
    params:
      limit: '10'
- name: usage_report
  endpoint:
    path: /v1/organizations/usage_report/claude_code
    method: GET
    data_selector: data
    params:
      starting_at: YYYY-MM-DD
      limit: '20'
- name: organizations_users
  endpoint:
    path: /v1/organizations/users
    method: GET
    data_selector: ''
    params:
      limit: '10'
- name: organizations_invites
  endpoint:
    path: /v1/organizations/invites
    method: GET
    data_selector: ''
    params:
      limit: '10'
- name: organizations_workspaces
  endpoint:
    path: /v1/organizations/workspaces
    method: GET
    data_selector: ''
    params:
      limit: '10'
      include_archived: 'false'
- name: organizations_me
  endpoint:
    path: /v1/organizations/me
    method: GET
    data_selector: ''
    params: {}
- name: inbound_ip_addresses
  endpoint:
    path: /api/ip-addresses/inbound
    method: GET
- name: outbound_ip_addresses
  endpoint:
    path: /api/ip-addresses/outbound
    method: GET
- name: organization_users
  endpoint:
    path: /v1/organizations/users
    method: GET
    data_selector: users
    params:
      limit: '10'
- name: organization_invites
  endpoint:
    path: /v1/organizations/invites
    method: GET
    data_selector: invites
    params:
      limit: '10'
- name: organization_workspaces
  endpoint:
    path: /v1/organizations/workspaces
    method: GET
    data_selector: workspaces
    params:
      limit: '10'
      include_archived: 'false'
- name: organization_info
  endpoint:
    path: /v1/organizations/me
    method: GET
    data_selector: organization
- name: organization_users
  endpoint:
    path: /v1/organizations/users
    method: GET
    data_selector: users
    params:
      limit: 10
- name: organization_invites
  endpoint:
    path: /v1/organizations/invites
    method: GET
    data_selector: invites
    params:
      limit: 10
- name: organization_workspaces
  endpoint:
    path: /v1/organizations/workspaces
    method: GET
    data_selector: workspaces
    params:
      limit: 10
      include_archived: 'false'
- name: organization_api_keys
  endpoint:
    path: /v1/organizations/api_keys
    method: GET
    data_selector: api_keys
    params:
      limit: 10
      status: active
- name: organization_me
  endpoint:
    path: /v1/organizations/me
    method: GET
    data_selector: organization
- name: count_tokens
  endpoint:
    path: /v1/messages/count_tokens
    method: POST
    data_selector: input_tokens
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: response.content
- name: usage_report
  endpoint:
    path: /v1/organizations/usage_report/messages
    method: GET
    data_selector: records
    params:
      starting_at: '2025-01-01T00:00:00Z'
      ending_at: '2025-01-31T00:00:00Z'
- name: cost_report
  endpoint:
    path: /v1/organizations/cost_report
    method: GET
    data_selector: records
    params:
      starting_at: '2025-01-01T00:00:00Z'
      ending_at: '2025-01-31T00:00:00Z'
- name: claude-sonnet-4-5
  endpoint:
    path: /v1/models/claude-sonnet-4-5-20250929
    method: GET
    data_selector: model_details
- name: claude-opus-4-1
  endpoint:
    path: /v1/models/claude-opus-4-1-20250805
    method: GET
    data_selector: model_details
- name: usage_report
  endpoint:
    path: /v1/organizations/usage_report/claude_code
    method: GET
    data_selector: records
    params:
      starting_at: '2025-09-08'
      limit: 20
- name: usage_report
  endpoint:
    path: /v1/organizations/usage_report/claude_code
    method: GET
    data_selector: data
    params:
      starting_at: YYYY-MM-DD
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: messages
    params: {}
- name: inbound_ip_addresses
  endpoint:
    path: /api/ip-addresses/inbound
    method: GET
    data_selector: ip_addresses
    params: {}
- name: outbound_ip_addresses
  endpoint:
    path: /api/ip-addresses/outbound
    method: GET
    data_selector: ip_addresses
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: content
    params: {}
- name: models
  endpoint:
    path: /v1/models
    method: GET
    data_selector: data
    params:
      limit: '20'
- name: count_tokens
  endpoint:
    path: /v1/messages/count_tokens
    method: POST
    data_selector: input_tokens
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: messages
- name: messages
  endpoint:
    path: /api/messages
    method: POST
- name: claude-sonnet-4-5
  endpoint:
    path: /api/models/claude-sonnet-4-5
    method: GET
- name: claude-opus-4-1
  endpoint:
    path: /api/models/claude-opus-4-1
    method: GET
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params:
      model: claude-sonnet-4-5
      stream: true
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: data
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: null
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: content
- name: templatize_prompt
  endpoint:
    path: /v1/experimental/templatize_prompt
    method: POST
    data_selector: messages
- name: models
  endpoint:
    path: /v1/models
    method: GET
    data_selector: data
- name: generate_prompt
  endpoint:
    path: /v1/experimental/generate_prompt
    method: POST
    data_selector: messages
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: content
- name: improve_prompt
  endpoint:
    path: /v1/experimental/improve_prompt
    method: POST
    data_selector: messages
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: templatize_prompt
  endpoint:
    path: /v1/experimental/templatize_prompt
    method: POST
    data_selector: messages
- name: generate_prompt
  endpoint:
    path: /v1/experimental/generate_prompt
    method: POST
    data_selector: messages
- name: improve_prompt
  endpoint:
    path: /v1/experimental/improve_prompt
    method: POST
    data_selector: messages
notes:
- The legacy API is being phased out in favor of the Messages API.
- Ensure to review rate limits to avoid throttling.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- The maximum number of tokens to generate is specified by max_tokens parameter.
- Each input message must include a role and content.
- The API has a maximum request size of 32 MB for standard endpoints.
- If you exceed the request size limit, you’ll receive a 413 request_too_large error.
- Get your API key from the Claude Console and set it as an environment variable.
- The API has a maximum request size of 32 MB for standard endpoints, including the
  Messages API and Token Counting API.
- If you exceed the maximum request size, you’ll receive a 413 request_too_large error
  from Cloudflare.
- Some customers might encounter 429 (`rate_limit_error`) errors following a sharp
  increase in API usage due to acceleration limits on the API.
- Cache control must now be specified directly in the parent content block of tool_result
  and document.source.
- We’ve added support for tool use in the Workbench.
- Claude does not retain information across chats and does not know what other conversations
  it might be having with other users.
- Claude cannot or will not help the human with something, it does not say why or
  what it could lead to.
- Uses OAuth2 with refresh token — requires setup of connected app in Claude
- Some responses may be limited by knowledge cutoff
- Claude can provide guidance on effective prompting techniques for getting Claude
  to be most helpful.
- Claude is accessible via an API.
- Claude does not know other details about Claude models or Anthropic’s products.
- This iteration of Claude is part of the Claude 3 model family.
- Claude Sonnet 3.7 is the most intelligent model.
- Claude cannot open URLs, links, or videos.
- Claude uses Markdown formatting.
- Never add text blocks immediately after tool results - This teaches Claude to expect
  user input after every tool use
- Don’t retry empty responses without modification - Simply sending the empty response
  back won’t help
- Use continuation prompts as a last resort - Only if the above fixes don’t resolve
  the issue
- Never add text blocks immediately after tool results
- Don’t retry empty responses without modification
- Use continuation prompts as a last resort
- Always check stop_reason in response handling logic.
- Use continuation prompts as a last resort for empty responses.
- Check stop_reason in response handling logic.
- Claude’s response includes a stop_reason field that indicates why the model stopped
  generating its response.
- Use continuation prompts as a last resort — only if the above fixes don’t resolve
  the issue
- 'Some responses may return empty with stop_reason: ''end_turn''.'
- Responses may be truncated due to max_tokens or model context window exceeded.
- Requests must include an x-api-key header
- The API always accepts JSON in request bodies and returns JSON in response bodies
- Limits are designed to prevent API abuse, while minimizing impact on common customer
  usage patterns.
- All limits described here represent maximum allowed usage, not guaranteed minimums.
- Requests in Priority Tier are prioritized over all other requests.
- When using streaming, stop_reason is null in the initial message_start event, provided
  in the message_delta event, and not provided in any other events.
- All requests must include an x-api-key header with your API key.
- Beta headers allow access to experimental features and new model capabilities before
  they become part of the standard API.
- Additional configuration is needed to use Anthropic’s Client SDKs through a partner
  platform.
- The compatibility layer is primarily intended to test and compare model capabilities.
- Most unsupported fields are silently ignored rather than producing errors.
- Beta features are experimental and may have breaking changes without notice
- Beta features may not have the same SLA guarantees as stable API features
- The strict parameter for function calling is ignored.
- Audio input is not supported.
- Uses OAuth2 with refresh token — requires setup of connected app in API
- Anthropic model availability varies by region
- Supports memory-efficient streaming of results.
- Anthropic model availability varies by region.
- anthropic_version must be set to the value vertex-2023-10-16
- Model availability varies by region.
- Regional endpoints include a 10% pricing premium over global endpoints.
- The Admin API is unavailable for individual accounts.
- The Admin API requires a special Admin API key (starting with sk-ant-admin...) that
  differs from standard API keys.
- In Vertex, model is specified in the Google Cloud endpoint URL.
- anthropic_version is passed in the request body.
- The Admin API requires a special Admin API key (starting with sk-ant-admin...)
- Only organization members with the admin role can provision Admin API keys through
  the Claude Console.
- The Admin API requires special access and an Admin API key (starting with sk-ant-admin...)
- Admin API key required
- Admin API key required — differs from standard API keys.
- Claude Code analytics data typically appears within 1 hour of user activity completion.
  To ensure consistent pagination results, only data older than 1 hour is included
  in responses.
- This API only tracks Claude Code usage on the Claude API (1st party). Usage on Amazon
  Bedrock, Google Vertex AI, or other third-party platforms is not included.
- API usage from the Workbench is not associated with an API key
- Anthropic services use fixed IP addresses for both inbound and outbound connections.
- Admin API key required. These endpoints require an Admin API key (starting with
  sk-ant-admin...) that differs from standard API keys.
- Only data older than 1 hour is included in responses.
- We monitor inboxes for user safety and privacy issues.
- We monitor inboxes for data access and user safety issues.
- Batches may contain up to 100,000 requests and be up to 256 MB in total size.
- The Files API is currently in beta.
- This endpoint is idempotent and can be used to poll for Message Batch completion.
- The version of the Claude API you want to use is required in headers.
- Number of items to return per page defaults to 20.
- Input messages must include a role and content.
- There is a limit of 100,000 messages in a single request.
- Some objects may return nulls in deeply nested fields
- Responses are generated using AI and may contain mistakes.
- 所有对Claude API的请求都必须包含一个带有您的API密钥的`x-api-key`头部
- 限制旨在防止API滥用，同时最大限度地减少对常见客户使用模式的影响。
- 所有限制代表最大允许使用量，而不是保证的最小值。
- Claude 是由 Anthropic 构建的高性能、可信赖且智能的 AI 平台。
- Request prioritization helps to minimize 'server overload' errors even during peak
  times.
- 确保完整响应
- 永远不要在工具结果后立即添加文本块 - 这会教 Claude 期望在每次工具使用后都有用户输入
- 不要在不修改的情况下重试空响应 - 简单地将空响应发送回去不会有帮助
- 将继续提示作为最后手段 - 只有在上述修复无法解决问题时才使用
- All requests must include an 'x-api-key' header with your API key.
- 使用流式传输时，`stop_reason` 是：在初始 `message_start` 事件中为 `null`
- Claude stops generating responses based on stop reasons such as end_turn, max_tokens,
  tool_use.
- 限制由使用层级定义，每个层级都与不同的支出和速率限制集相关联。
- API响应包括显示强制执行的速率限制、当前使用情况以及限制何时重置的头部。
- 使用流式传输时，`stop_reason` 是：在初始 `message_start` 事件中为 `null`，在 `message_delta` 事件中提供，在任何其他事件中不提供
- 优先层级支持：Claude Opus 4.1, Claude Opus 4, Claude Sonnet 4, Claude Sonnet 3.7, Claude
  Sonnet 3.5（两个版本）, Claude Haiku 3.5
- 处理响应时始终检查 stop_reason
- Ensure to handle stop_reason in responses appropriately.
- 避免在工具结果后立即添加文本块
- 不要在不修改的情况下重试空响应
- 使用流式传输时，stop_reason 在初始 message_start 事件中为 null
- 处理不同的停止原因，包括 end_turn、max_tokens、tool_use 等
- Claude API responses include a stop_reason field indicating why the model stopped
  generating.
- 通过正确处理 stop_reason 值，您可以构建更健壮的应用程序，优雅地处理不同的响应场景并提供更好的用户体验。
- 使用流式传输时，stop_reason 是：在初始 message_start 事件中为 null，在 message_delta 事件中提供，在任何其他事件中不提供
- Handles different stop_reasons in responses
- Best practices for managing empty responses
- 使用 API 处理停止原因的最佳实践包括检查 stop_reason 字段
- 永远不要在工具结果后立即添加文本块
- Uses API key for authentication
- 使用 OAuth2，要求设置连接应用程序
- Rate limits follow Anthropic's standard limits
- Uses OAuth2 with refresh token for authentication.
- Anthropic模型的可用性因地区而异
- 区域端点比全球端点有10%的价格溢价
- Beta features are experimental and may undergo breaking changes without notice
- Beta features may have different rate limits or pricing
- 使用AWS凭证进行身份验证
- Claude Sonnet 4.5在Amazon Bedrock上支持1M令牌上下文窗口
- 在Vertex中，`model`不在请求体中传递。相反，它在Google Cloud端点URL中指定。
- '`anthropic_version`在请求体中传递，并且必须设置为值`vertex-2023-10-16`。'
- Uses API key for access
- Admin API requires special access permissions with a specific Admin API key.
- 重要的 OpenAI 兼容性限制
- Admin API requires special access and is not available for individual accounts.
- Admin API requires special Admin API key starting with 'sk-ant-admin...' and only
  accessible to organization members with admin role.
- 从Claude Sonnet 4.5和所有未来模型开始，Amazon Bedrock提供两种端点类型：全球端点和区域端点。
- 区域端点比全球端点有10%的价格溢价。
- 在Vertex中，`anthropic_version`在请求体中传递（而不是作为标头），并且必须设置为值`vertex-2023-10-16`。
- This API requires a management API key (starting with sk-ant-admin...)
- Requires Admin API key (starts with sk-ant-admin...)
- 需要 Admin API 密钥
- 基于游标的分页适用于拥有大量用户的组织
- Admin API requires special access with Admin API key starting with sk-ant-admin...
- Only organization members with admin roles can obtain Admin API keys.
- 此 API 仅提供每日聚合指标。对于实时监控，请考虑使用 OpenTelemetry 集成
- 这些地址不会在没有通知的情况下更改
- 我们监控以下邮箱用于技术支持
- Admin API requires special Admin API key that starts with 'sk-ant-admin...'.
- Your unique API key for authentication is required in the header of all API requests.
- Use the `system` parameter to set Claude’s role.
- Experiment with roles for different insights.
- Use specific model versions in production applications to ensure consistent behavior.
- 此 API 是 Admin API 的一部分
- Requires Admin API key starting with sk-ant-admin...
- Pagination uses an opaque cursor for stability.
- Anthropic-defined tools use versioned types to ensure compatibility across model
  versions.
- 所有日期都是 UTC。`starting_at` 参数应为 YYYY-MM-DD 格式，代表该日的 UTC 午夜。
- Anthropic services use fixed IP addresses for inbound and outbound connections.
- Tool results must be formatted correctly to avoid API errors.
- Currently supports access in various countries and regions.
- Monitor the following emails for specific issues related to privacy and user safety.
- Claude is designed to empower enterprises at scale with strong performance across
  benchmark evaluations for reasoning, math, coding, and fluency in English and non-English
  languages.
- 'Starting with Claude Sonnet 4.5 and all future models, AWS Bedrock and Google Vertex
  AI offer two endpoint types: global and regional.'
- Use server-sent events (SSE) for streaming responses
- Handle event types including message_start, content_block_start, content_block_delta,
  message_delta, and message_stop
- Streaming requests require specific content types and handle multiple content blocks.
- Client tools require user-defined input schemas.
- 文本补全 API 已被弃用，改为使用消息 API。
- 使用消息时，您需要指定输入消息列表而不是原始提示。
- Tool use requests are priced based on the total number of input tokens sent to the
  model.
- This API is in closed research preview.
- Get your API key from the Claude Console and set it as an environment variable
- This API is in a closed research preview phase.
- Streaming requests can be interrupted and resumed.
- Tool use and extended thinking blocks cannot be partially recovered.
- 使用文本补全时，模型生成的文本在响应的 completion 值中返回。
- 使用消息时，响应是 content 值，它是内容块的列表。
- API is in closed research preview phase.
- This API is in a closed research preview.
errors:
- 'Invalid prompt format: Ensure prompt starts with ''\n\nHuman:'' and ends with ''\n\nAssistant:'''
- 'Token limit exceeded: Prompt length must be less than 100,000 - 1 tokens.'
- '429 Too Many Requests: Reduce request frequency.'
- '401 Unauthorized: Check your access token.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 4XX
- '4XX: Check request parameters or body'
- '4XX: Check request format and parameters'
- '413 request_too_large: Max request size exceeded.'
- '413 request_too_large: The request size exceeds the limit.'
- '429: Rate limit exceeded'
- '401: Unauthorized'
- '429 rate_limit_error: Throttle API calls or reduce frequency'
- 'max_tokens: Response was truncated due to max tokens limit.'
- 'model_context_window_exceeded: Response reached model''s context window limit.'
- 'refusal: Claude declined to respond due to safety concerns.'
- '500: Server error'
- '413 request_too_large: Exceeded maximum request size'
- '429 error: Too many requests — reduce request rate.'
- 'server overloaded: Requests may be declined during peak times.'
- '400 - invalid_request_error: There was an issue with the format or content of your
  request.'
- '401 - authentication_error: There’s an issue with your API key.'
- '403 - permission_error: Your API key does not have permission to use the specified
  resource.'
- '404 - not_found_error: The requested resource was not found.'
- '413 - request_too_large: Request exceeds the maximum allowed number of bytes. The
  maximum request size is 32 MB for standard API endpoints.'
- '429 - rate_limit_error: Your account has hit a rate limit.'
- '500 - api_error: An unexpected error has occurred internal to Anthropic’s systems.'
- '529 - overloaded_error: The API is temporarily overloaded.'
- '413 request_too_large: Exceeded maximum request size.'
- 'invalid_request_error: Unsupported beta header: invalid-beta-name'
- '429 error: describing which rate limit was exceeded'
- '401 Unauthorized: Check the API key.'
- Rate limits follow Anthropic’s standard limits for the /v1/messages endpoint.
- 'Unsupported beta header: invalid-beta-name'
- REQUEST_LIMIT_EXCEEDED
- QUERY_TIMEOUT
- 401 Unauthorized
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '401 Unauthorized: Recheck AWS credentials or permissions'
- '401 Unauthorized: Recheck AWS credentials'
- 'Rate limits: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Check your Admin API key.'
- 'Unauthorized: Ensure the Admin API key is valid and has the correct permissions.'
- 'API_KEY_INVALID: Check if the API key is correctly set up'
- '403 Forbidden: Ensure you have admin privileges to access this endpoint'
- '401 Unauthorized: Check Admin API key and permissions'
- '401 Unauthorized: Recheck Admin API key'
- '401 Unauthorized: Recheck API key validity'
- '200: Successful Response'
- '4XX: Client Error'
- '4XX: Client error response'
- '200'
- '4XX: Check request parameters or authentication.'
- '4XX: Client error, check your request.'
- '4XX: Client error'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Recheck API key'
- '404 Not Found: Verify model_id'
- '413 request_too_large: 请求超过最大限制'
- '429错误: 描述超过了哪个速率限制，以及一个retry-after头部指示等待多长时间'
- 'SERVER_OVERLOAD: Request prioritization helps to minimize server overload errors.'
- 400 - invalid_request_error：您的请求格式或内容存在问题。
- 401 - authentication_error：您的 API 密钥存在问题。
- 403 - permission_error：您的 API 密钥没有使用指定资源的权限。
- 404 - not_found_error：未找到请求的资源。
- 413 - request_too_large：请求超过了允许的最大字节数。标准 API 端点的最大请求大小为 32 MB。
- 429 - rate_limit_error：您的账户已达到速率限制。
- 500 - api_error：Anthropic 系统内部发生了意外错误。
- 529 - overloaded_error：API 暂时过载。
- '413 request_too_large: Exceeded maximum request size limit.'
- 'max_tokens: 响应被截断'
- 'stop_sequence: 在序列处停止'
- 'max_tokens: Response was truncated at token limit.'
- Claude 无法处理此请求
- 'max_tokens: 响应在令牌限制处被截断'
- 'refusal: Claude 无法处理此请求'
- 400 - invalid_request_error：您的请求格式或内容存在问题。我们也可能对下面未列出的其他 4XX 状态代码使用此错误类型。
- 'REQUEST_LIMIT_EXCEEDED: 请减小请求频率'
- 'QUERY_TIMEOUT: 增加请求选择性'
- '401 Unauthorized: 请检查OAuth权限或令牌有效性'
- 超出速率限制
- 服务器错误
- 'model_context_window_exceeded: 响应达到模型的上下文窗口限制'
- 'refusal: Claude 拒绝响应'
- 'refusal: Claude 拒绝处理此请求'
- '401 Unauthorized: Recheck API key or token expiration'
- '超出速率限制: 429'
- '服务器错误: 500'
- 'Rate limit exceeded: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck Admin API key or permissions'
- 'Request failed: Check API key and endpoint'
- 'Rate limit exceeded: Reduce request frequency'
- 'Unauthorized: Check API key validity'
- '401 Unauthorized: Check if your Admin API key is valid.'
- '401 Unauthorized: Recheck Admin API key and permissions'
- '401 Unauthorized: Recheck API key or access permissions'
- '401 Unauthorized: Recheck API key or permissions'
- Throttle API calls or reduce frequency
- Break down filters or add selectivity
- Recheck OAuth scopes or token expiration
- '401 Unauthorized: Recheck Admin API key or permissions.'
- '4XX: Client error, check request format or parameters.'
- 'Invalid API key: Check the API key and try again.'
- 'Exceeded request limit: Throttle API calls or reduce frequency.'
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Ensure API key is valid.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Verify API key'
- '429 Too Many Requests: Rate limit exceeded'
- '4XX: Check the request parameters or headers'
- 'overloaded_error: Overloaded'
- Error recovery is possible by capturing partial responses and constructing continuation
  requests.
- '400 Bad Request: Check request format and parameters.'
- '401 Unauthorized: Verify API key.'
- '429 Too Many Requests: Reduce frequency of requests.'
- '4XX: Client-side errors may occur due to request validation.'
- '4XX: Client error responses'
- Error recovery involves capturing partial responses and constructing continuation
  requests.
- '4XX: Client error, check your request format.'
- '4XX: Check your request parameters.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Admin API key
  - x-api-key
client:
  base_url: https://api.anthropic.com
  auth:
    type: oauth2
    flow: refresh_token
  headers:
    Accept: application/json
source_metadata: null
