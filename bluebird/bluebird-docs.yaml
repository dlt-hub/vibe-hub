resources:
- name: new_promise
  endpoint:
    path: /api/new-promise
    method: GET
    data_selector: promise
    params: {}
- name: Promise.join
  endpoint:
    path: /docs/api/promise.join.html
    method: GET
    data_selector: Promise.join
- name: promise_try
  endpoint:
    path: /docs/api/promise.try
    method: GET
    data_selector: Promise
    params: {}
- name: promise_attempt
  endpoint:
    path: /docs/api/promise.attempt
    method: GET
    data_selector: Promise
    params: {}
- name: reason
  endpoint:
    path: /reason
    method: GET
    data_selector: any
- name: Promise.some
  endpoint:
    path: /docs/api/promise.some
    method: GET
    data_selector: input
    params: {}
- name: Promise.reduce
  endpoint:
    path: /docs/api/promise.reduce
    method: GET
    data_selector: Promise.reduce
- name: promise_filter
  endpoint:
    path: /api/promise/filter
    method: GET
    data_selector: records
    params: {}
- name: Promise.each
  endpoint:
    path: /docs/api/promise.each.md
    method: GET
    data_selector: records
    params: {}
- name: filter
  endpoint:
    path: /api/filter
    method: GET
    data_selector: records
    params: {}
- name: each
  endpoint:
    path: /docs/api/each
    method: GET
    data_selector: Promise
    params: {}
- name: promisify
  endpoint:
    path: /docs/api/promise.promisify
    method: GET
    data_selector: example
    params: {}
- name: timeout
  endpoint:
    path: .timeout
    method: POST
    data_selector: Promise
    params: {}
- name: tap
  endpoint:
    path: /docs/api/tap
    method: GET
    data_selector: Promise
    params: {}
- name: tapCatch
  endpoint:
    path: /docs/api/tapcatch
    method: GET
    data_selector: examples
    params: {}
- name: get
  endpoint:
    path: /get
    method: GET
    data_selector: Promise
    params: {}
- name: reflect
  endpoint:
    path: /api/reflect
    method: GET
    data_selector: PromiseInspection
    params: {}
- name: getNewLibraryCopy
  endpoint:
    path: /docs/api/promise.getnewlibrarycopy
    method: GET
    data_selector: Object
notes:
- Promises are now not cancellable by default. This is backwards incompatible change.
- Cancellation has been redesigned for bluebird 3.0.
- Promisification API changes now ignore multiple arguments passed to the callback
  adapter.
- Bluebird is built with pragmatic design principles
- Fully featured without bloat while providing tools for asynchronous JavaScript
- Easy to debug with long stack traces and warning system
- Zero overhead abstraction for server-side performance
- Runs everywhere, providing a consistent cross-platform experience
- Spec compatible and can work as a drop-in replacement for native promises
- Bluebird supports cancellation as an optional feature that is turned off by default.
- This page will contain common promise anti-patterns that are exercised in the wild.
- Promise exception handling mirrors native exception handling in JavaScript.
- Promise.join is easier for coordinating multiple concurrent discrete promises.
- Get the rejection reason of this promise.
- Promise.filter is an efficient shortcut for doing a .map and then Array#filter
- If a disposer method throws or returns a rejected promise, it's highly likely that
  it failed to dispose of the resource.
- Promisification means converting an existing promise-unaware API to a promise-returning
  API.
- Returns a function that wraps the given nodeFunction.
- Same as calling Promise.delay(ms, this).
- Returns a promise that will be fulfilled with this promise's fulfillment value or
  rejection reason.
- If this promise is not fulfilled or rejected within ms milliseconds, the returned
  promise is rejected with a TimeoutError.
- Cancellation feature is by default turned off, can be enabled using `Promise.config`.
- .reflect() method returns a promise that is always successful when this promise
  is settled.
- Represents an error is an explicit promise rejection as opposed to a thrown error.
- Signals that an operation has timed out.
- The default approach of bluebird is to immediately log the stack trace when there
  is an unhandled rejection.
- Starting from 2.7.0 all bluebird instances also fire rejection events globally.
- A development environment might be detected which automatically enables long stack
  traces and warnings.
- For webpack and browserify development environment is always enabled.
- Uses .suppressUnhandledRejections() to prevent premature unhandled rejection reporting.
- Deferreds are deprecated in favor of the promise constructor.
- If set to exactly "development" it will have the same effect as if the "BLUEBIRD_DEBUG"
  variable was set.
errors:
- Promise.promisify called on an object
- the promise constructor requires a resolver function
- the promise constructor cannot be invoked directly
- expecting an array, a promise or a thenable
- generatorFunction must be a function
- fn must be a function
- cannot enable long stack traces after promises have been created
- cannot get fulfillment value of a non-fulfilled promise
- cannot get rejection reason of a non-rejected promise
- the target of promisifyAll must be an object or a function
- circular promise resolution chain
- cannot await properties of a non-object
- expecting a positive integer
- A value was yielded that could not be treated as a promise
- cannot await properties of a non object
- Cannot promisify an API that has normal methods
- Catch filter must inherit from Error or be a simple predicate function
- No async scheduler available
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'TimeoutError: Operation timed out'
- 'OperationalError: Represents an error is an explicit promise rejection as opposed
  to a thrown error.'
- 'TimeoutError: Used as a custom cancellation reason in `.timeout`.'
- 'unhandledRejection: corresponds to the local Promise.onPossiblyUnhandledRejection'
- 'rejectionHandled: corresponds to the local Promise.onUnhandledRejectionHandled'
auth_info:
  mentioned_objects: []
client:
  base_url: https://cdn.jsdelivr.net/npm/bluebird@3.7.2
  headers:
    Accept: application/javascript
source_metadata: null
