resources:
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: records
- name: dois
  endpoint:
    path: /dois
    method: GET
- name: metadata
  endpoint:
    path: /metadata
    method: GET
- name: media
  endpoint:
    path: /media
    method: GET
- name: usage_tracker
  endpoint:
    path: /usage-tracker
    method: GET
- name: DOI
  endpoint:
    path: /services/data/vXX.X/sobjects/DOI
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: data
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: DOI metadata record
- name: doi
  endpoint:
    path: /dois/{id}
    method: GET
- name: doi
  endpoint:
    path: /api/get-doi
    method: GET
- name: doi_list
  endpoint:
    path: /api/get-lists
    method: GET
- name: dois
  endpoint:
    path: /dois
    method: GET
- name: doi
  endpoint:
    path: /api/get-lists
    method: GET
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: data
    params: {}
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: data
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: results
    params: {}
- name: clients
  endpoint:
    path: /clients
    method: GET
    data_selector: results
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: results
    params: {}
- name: prefixes
  endpoint:
    path: /prefixes
    method: GET
    data_selector: results
    params: {}
- name: providers
  endpoint:
    path: /providers
    method: GET
    data_selector: results
    params: {}
- name: reports
  endpoint:
    path: /reports
    method: GET
    data_selector: results
    params: {}
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: data
- name: dois
  endpoint:
    path: /dois
    method: GET
    params:
      sample: '10'
      sample-group: client
      page[size]: '20'
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: data
    params:
      random: 'true'
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: dois
  endpoint:
    path: /dois
    method: POST
    data_selector: data
    params: {}
- name: create_doi
  endpoint:
    path: /dois
    method: POST
    data_selector: doi
    params: {}
- name: dois
  endpoint:
    path: /dois
    method: POST
    data_selector: data.attributes
    params: {}
- name: doi_update
  endpoint:
    path: /dois/:id
    method: PUT
    data_selector: data
    params: {}
- name: doi
  endpoint:
    path: /doi
    method: POST
    data_selector: data
    params: {}
- name: activities
  endpoint:
    path: /activities
    method: GET
    data_selector: data
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: data
    params: {}
- name: dois
  endpoint:
    path: /api/dois
    method: GET
    data_selector: data
    params: {}
- name: repository_info
  endpoint:
    path: /repository/settings
    method: GET
    data_selector: repository
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
    params: {}
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: data
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: POST
    data_selector: data
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: POST
    data_selector: data
    params: {}
- name: Delete Draft Records
  endpoint:
    path: /fabrica-delete-doi
    method: DELETE
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: doi_metadata
  endpoint:
    path: /doi
    method: GET
    data_selector: data
    params: {}
- name: DOI_Metadata
  endpoint:
    path: /services/data/vXX.X/sobjects/DOIMetadata
    method: GET
    data_selector: records
    params: {}
- name: consortium_organizations
  endpoint:
    path: /services/data/vXX.X/sobjects/ConsortiumOrganizations
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: data
    params: {}
- name: search
  endpoint:
    path: /
    method: GET
    data_selector: data
- name: DOI
  endpoint:
    path: /services/data/vXX.X/sobjects/DOI
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: records
    params:
      publisher: 'true'
- name: works
  endpoint:
    path: /works
    method: GET
    data_selector: data
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: creator
  endpoint:
    path: /services/data/vXX.X/sobjects/Creator
    method: GET
    data_selector: records
- name: contributor
  endpoint:
    path: /services/data/vXX.X/sobjects/Contributor
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: data
    params: {}
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: results
    params:
      client-id: abcd.efgh
      schema-version: '3'
- doi: 10.21384/cgkg-j274
  relatedIdentifiers:
  - relationType: IsVersionOf
    relatedIdentifier: 10.213842/pddx-xy13
    relatedIdentifierType: DOI
- doi: 10.21384/pddx-xy13
  relatedIdentifiers:
  - relationType: HasVersion
    relatedIdentifier: 10.213842/cgkg-j274
    relatedIdentifierType: DOI
- doi: 10.21384/0557-d709
  relatedIdentifiers:
  - relationType: IsVersionOf
    relatedIdentifier: 10.21384/pddx-xy13
    relatedIdentifierType: DOI
- doi: 10.21384/zkap-qb12
  relatedIdentifiers:
  - relationType: IsOriginalFormOf
    relatedIdentifier: 10.213842/xzyg-y712
    relatedIdentifierType: DOI
  formats:
  - text/csv
- doi: 10.21384/xzyg-y712
  relatedIdentifiers:
  - relationType: IsVariantFormOf
    relatedIdentifier: 10.21384/zkap-qb12
    relatedIdentifierType: DOI
  formats:
  - application/json
- doi: 10.82433/45e5-xy14
  creators:
  - name: Green, Simon
    nameType: Personal
  titles:
  - lang: en
    title: Climate Change and Adaptation Strategies
  publisher:
    name: Institute for Environmental Research
  publicationYear: 2024
  contributors:
  - name: Schneider, Anna
    nameType: Personal
    contributorType: Translator
  dates:
  - date: '2024-09-15'
    dateType: Issued
  language: en
  types:
    resourceTypeGeneral: Report
  relatedIdentifiers:
  - relationType: IsTranslationOf
    relatedIdentifier: 10.82433/pma6-nf93
    relatedIdentifierType: DOI
  descriptions:
  - lang: en
    description: This report examines the impacts of climate change and explores potential
      adaptation strategies. It addresses issues such as extreme weather events, adaptation
      measures for urban and rural areas, and policy recommendations to mitigate climate
      risks.
    descriptionType: Abstract
- doi: 10.82433/pma6-nf93
  creators:
  - name: Green, Simon
  titles:
  - lang: de
    title: Klimawandel und Anpassungsstrategien
  publisher:
    name: Institut für Umweltforschung
  publicationYear: 2022
  dates:
  - date: '2022-07-07'
    dateType: Issued
  language: de
  types:
    resourceTypeGeneral: Report
  relatedIdentifiers:
  - relationType: HasTranslation
    relatedIdentifier: 10.82433/45e5-xy14
    relatedIdentifierType: DOI
  descriptions:
  - lang: de
    description: Dieser Bericht untersucht die Auswirkungen des Klimawandels und erkundet
      mögliche Anpassungsstrategien. Er befasst sich mit Themen wie extremen Wetterereignissen,
      Anpassungsmaßnahmen für städtische und ländliche Gebiete und politischen Empfehlungen
      zur Minderung von Klimarisiken.
    descriptionType: Abstract
- doi: 10.21384/dbvb-9c15
  relatedIdentifiers:
  - relationType: IsIdenticalTo
    relatedIdentifier: 10.21384/sdez-dt48
    relatedIdentifierType: DOI
- name: Notices
  endpoint:
    path: /notice
    method: GET
    data_selector: notices
- name: Labels
  endpoint:
    path: /labels
    method: GET
    data_selector: labels
- rights: 'Local Contexts TK Notice https://localcontexts.org/notice/tk-notice: The
    TK Notice is a visible notification that there are accompanying cultural rights
    and responsibilities that need further attention for any future sharing and use
    of this material. The TK Notice may indicate that TK Labels are in development
    and their implementation is being negotiated.'
  rightsUri: https://localcontextshub.org/projects/7894f2fd-bbcb-423c-afff-ea67b4e1e4f7/
  rightsIdentifier: TK-Notice
  rightsIdentifierScheme: Local Contexts
  schemeUri: https://localcontexts.org
- rights: 'Local Contexts TK Attribution: This Label is being used to correct historical
    mistakes or exclusions pertaining to this material. This is especially in relation
    to the names of the people involved in performing or making this work and/or correctly
    naming the community from which it originally derives. As a user you are being
    asked to also apply the correct attribution in any future use of this work.'
  rightsUri: https://localcontextshub.org/projects/259854f7-b261-4c8c-8556-4b153deebc18/
  rightsIdentifier: TK-A
  rightsIdentifierScheme: Local Contexts
  schemeUri: https://localcontexts.org
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: DOI
  endpoint:
    path: /dois
    method: GET
    data_selector: records
- name: DOI
  endpoint:
    path: /services/data/vXX.X/sobjects/DOI
    method: GET
    data_selector: records
    params: {}
- name: metadata
  endpoint:
    path: /metadata/doi
    method: GET
    data_selector: null
    params: {}
- name: register_metadata
  endpoint:
    path: /metadata/{doi}
    method: PUT
    data_selector: null
    params: {}
- name: register_doi
  endpoint:
    path: /doi
    method: PUT
    data_selector: ''
    params: {}
- name: fetch_doi
  endpoint:
    path: /doi/{doi}
    method: GET
    data_selector: ''
    params: {}
- name: register_metadata
  endpoint:
    path: /metadata/{prefix}
    method: PUT
    data_selector: ''
    params: {}
- name: delete_metadata
  endpoint:
    path: /metadata/{doi}
    method: DELETE
    data_selector: ''
    params: {}
- name: delete_doi
  endpoint:
    path: /doi/{doi}
    method: DELETE
    data_selector: ''
    params: {}
- name: doi
  endpoint:
    path: /doi
    method: GET
- name: metadata
  endpoint:
    path: /metadata
    method: GET
- name: media
  endpoint:
    path: /media
    method: GET
- name: members
  endpoint:
    path: /members
    method: POST
    data_selector: data
- name: repositories
  endpoint:
    path: /repositories
    method: POST
    data_selector: data
- name: prefixes
  endpoint:
    path: /prefixes
    method: POST
    data_selector: data
- name: dois
  endpoint:
    path: /dois
    method: POST
    data_selector: data
- name: researchers
  endpoint:
    path: /researchers
    method: POST
    data_selector: data
- name: funders
  endpoint:
    path: /funders
    method: POST
    data_selector: data
- name: organizations
  endpoint:
    path: /organizations
    method: POST
    data_selector: data
- name: Identify
  endpoint:
    path: /oai?verb=Identify
    method: GET
- name: ListIdentifiers
  endpoint:
    path: /oai?verb=ListIdentifiers
    method: GET
- name: ListRecords
  endpoint:
    path: /oai?verb=ListRecords
    method: GET
- name: ListSets
  endpoint:
    path: /oai?verb=ListSets
    method: GET
- name: ListMetadataFormats
  endpoint:
    path: /oai?verb=ListMetadataFormats
    method: GET
- name: GetRecord
  endpoint:
    path: /oai?verb=GetRecord
    method: GET
- name: dataset
  endpoint:
    path: /oai_datacite
    method: GET
    data_selector: payload.resource
    params: {}
- name: formatted_citations
  endpoint:
    path: /10.82206/yb55-6d89
    method: GET
    data_selector: response
    params: {}
- name: reports
  endpoint:
    path: /reports
    method: POST
- name: update_report
  endpoint:
    path: /reports/{report-id}
    method: PUT
- name: reports
  endpoint:
    path: /reports
    method: GET
    data_selector: report
    params: {}
- name: report_id
  endpoint:
    path: /reports/report-id
    method: PUT
    data_selector: report
    params: {}
- name: event_data
  endpoint:
    path: /event-data
    method: GET
    data_selector: events
- name: doi
  endpoint:
    path: /doi
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: service_status
  endpoint:
    path: /api/v2/summary.json
    method: GET
- name: DOIs
  endpoint:
    path: /dois
    method: GET
    data_selector: records
    params:
      disable-facets: 'true'
      publisher: 'true'
      affiliation: 'true'
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: data
    params: {}
- name: DOI registration statistics
  endpoint:
    path: /providers/totals
    method: GET
- name: DOI registration statistics for each Repository
  endpoint:
    path: /clients/totals
    method: GET
    params:
      provider-id: cern
- name: DOI registration statistics for a prefix
  endpoint:
    path: /prefixes/totals
    method: GET
    params:
      client-id: cern.zenodo
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: data
    params:
      incremental: created
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: meta
    params: {}
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: viewCount, viewsOverTime, downloadCount, downloadsOverTime
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    params:
      source-id: datacite-usage
      doi: ''
- name: events
  endpoint:
    path: /reports
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /reports
    method: GET
    data_selector: data
    params: {}
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: response
    params: {}
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: meta
- name: usage_report
  endpoint:
    path: /api/check/da-1a2b34
    method: GET
- name: dois
  endpoint:
    path: /dois/{doi}
    method: GET
    data_selector: viewsOverTime
    params: {}
- name: usage_reports
  endpoint:
    path: /reports
    method: GET
    data_selector: reports
    params:
      created_by: da_{Repository Account ID associated with your data-repoid}
- name: event_data
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params:
      subj-id: https://api.datacite.org/reports/{report_id}
      doi: '{doi}'
      source-id: datacite-usage
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: data
    params: {}
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: relationships
- name: Data Metrics Badge
  endpoint:
    path: /data-metrics-badge
    method: GET
- name: DOI
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /api/doi
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: geoLocation
  endpoint:
    path: /geoLocations
    method: GET
    data_selector: geoLocations
- name: igsn_id
  endpoint:
    path: /metadata/igsn
    method: POST
    data_selector: records
    params: {}
- name: igsn_metadata
  endpoint:
    path: /igsn
    method: GET
    data_selector: data
    params: {}
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: data
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /doi
    method: GET
    data_selector: data
    params: {}
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: data
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: data
    params: {}
- name: DMP
  endpoint:
    path: /dmp
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
- name: contributors
  endpoint:
    path: /contributors
    method: GET
    data_selector: contributors
- name: fundingReferences
  endpoint:
    path: /fundingReferences
    method: GET
    data_selector: fundingReferences
- name: relatedIdentifiers
  endpoint:
    path: /relatedIdentifiers
    method: GET
    data_selector: relatedIdentifiers
- name: DMP
  endpoint:
    path: /datacite/dmp
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /doi
    method: GET
    data_selector: data
    params: {}
- name: dois
  endpoint:
    path: /dois
    method: POST
    data_selector: data
    params: {}
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: records
    params: {}
- name: DOI
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
- name: DOI
  endpoint:
    path: /doi
    method: GET
    data_selector: records
    params: {}
- name: DOI
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: dois
  endpoint:
    path: /dois
    method: GET
    params: {}
- name: doi_metadata
  endpoint:
    path: /dois/:id
    method: PUT
    data_selector: data
- name: doi
  endpoint:
    path: /api/doi
    method: POST
    data_selector: records
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: metadata
    params: {}
- name: doi
  endpoint:
    path: /doi
    method: GET
    data_selector: data
    params: {}
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: records
    params: {}
- name: doi_metadata
  endpoint:
    path: /doi/metadata
    method: GET
    data_selector: records
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: records
    params: {}
- name: dois
  endpoint:
    path: /dois
    method: GET
    data_selector: data
    params:
      state: registered
      sort: -updated
      disable-facets: 'true'
      publisher: 'true'
      affiliation: 'true'
- name: doi
  endpoint:
    path: /api/doi
    method: GET
    data_selector: records
    params: {}
- name: DOI
  endpoint:
    path: /dois
    method: POST
    data_selector: data
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: data
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: data
    params: {}
- name: doi_metadata
  endpoint:
    path: /dois
    method: GET
    data_selector: data
    params: {}
- name: DOI
  endpoint:
    path: /services/data/vXX.X/sobjects/DOI
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: data
- name: DOI
  endpoint:
    path: /api/dois
    method: GET
    data_selector: data
- name: resource_types
  endpoint:
    path: /resourceTypes
    method: GET
    data_selector: resourceTypeGeneral
    params: {}
- name: nameIdentifier
  endpoint:
    path: /path/to/endpoint
    method: GET
    data_selector: records
    params: {}
- name: DOI
  endpoint:
    path: /doi
    method: GET
    data_selector: records
    params: {}
- name: dois
  endpoint:
    path: /dois
    method: GET
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /doi
    method: GET
    data_selector: data
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: records
    params: {}
- name: DOI
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /doi
    method: GET
    data_selector: data
    params: {}
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: records
    params: {}
- name: DOI
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /doi
    method: GET
    data_selector: records
    params: {}
- name: DOI
  endpoint:
    path: /services/data/vXX.X/sobjects/DOI
    method: GET
    data_selector: records
    params: {}
- name: doi_list
  endpoint:
    path: /dois
    method: GET
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /doi
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: data
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: POST
    data_selector: records
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: records
- name: DOI
  endpoint:
    path: /doi
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /services/data/vXX.X/sobjects/DOI
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /doi
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /dois
    method: POST
    data_selector: data
    params: {}
- name: doi
  endpoint:
    path: /doi
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /api/doi
    method: GET
    data_selector: data
    params: {}
- name: DOI
  endpoint:
    path: /services/data/vXX.X/sobjects/DOI
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: DOI
  endpoint:
    path: /doi
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: DOI
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /doi
    method: GET
    data_selector: records
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
- name: DOI
  endpoint:
    path: /api/doi
    method: GET
    data_selector: data
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: DOI
  endpoint:
    path: /dois
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /services/doi
    method: GET
    data_selector: records
    params: {}
- name: doi_metadata
  endpoint:
    path: /api/dois
    method: GET
    data_selector: records
    params: {}
- name: metadata_catalogue
  endpoint:
    path: /api/metadata
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /doi
    method: GET
    data_selector: records
    params: {}
- name: doi
  endpoint:
    path: /doi
    method: GET
    data_selector: data
    params: {}
- name: doi
  endpoint:
    path: /api/dois
    method: GET
    data_selector: data
    params: {}
- name: doi
  endpoint:
    path: /dois
    method: GET
    data_selector: records
    params: {}
notes:
- Public API can be accessed without authentication.
- Member API requires authentication to create and update DOIs.
- Some objects may return nulls in deeply nested fields
- DOIs can be registered using DataCite's web interface Fabrica or one of our APIs.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- DOIs can be registered using DataCite's web interface Fabrica or one of our APIs
- If your organization is part of a Consortium, please contact your Consortium Lead
  first.
- The test system uses a test handle server. Test DOIs resolve via this test handle
  server. DOIs created in the test system aren’t real and don’t resolve using the
  global handle system.
- Test accounts require separate credentials from production services.
- Your Member credentials for your test account are entirely separate from the credentials
  for your production account.
- The production system and the test system are separate, as are your accounts in
  both systems.
- DOIs are managed by DataCite and other DOI registration agencies.
- Findable DOIs are registered within the global Handle System.
- Draft records are not yet registered within the global Handle System, which means
  the identifier can be deleted.
- DOIs cannot be deleted
- Suffixes cannot be changed
- DOIs must resolve to a publicly available landing page. The underlying content does
  not need to be publicly available but the metadata must be open.
- Uses OAuth2 with refresh token — requires setup of connected app in DataCite
- DataCite recommends adding Schema.org markup to repository landing pages to expose
  them to Google Dataset Search.
- DataCite does not currently provide any tombstone pages automatically.
- The mapping can be used to convert records described following version 4.4 of the
  DataCite Metadata Schema into records that comply with the Dublin Core Metadata
  Initiative Schema.
- Affiliation identifiers are not included in REST API responses by default.
- Publisher identifiers are not included in REST API responses by default.
- The API supports filter parameters that refine the list of results.
- Uses OAuth2 for authentication
- DataCite's test and production environments are completely separate.
- Provenance information is available for all DOI registrations since March 10, 2019.
- Only Repository accounts can create and update DOIs through Fabrica.
- The same account credentials used to access DataCite Fabrica are also used for API
  authentication.
- Repositories can update their settings through the Settings tab on the Repository
  dashboard.
- Member ID is established during onboarding and can't be modified.
- Only one contact can exist for a unique email address. It is not possible to save
  a second contact with the same email address, even if the contact with this email
  was deleted.
- Fabrica will automatically assign just one prefix to a newly created Repository
  account.
- To request additional prefixes, send an email to support@datacite.org.
- A Repository account in DataCite has one prefix which is assigned automatically
  when the account is created.
- Requires setup of connected app in DataCite Fabrica
- The Fabrica DOI Form is intended to provide a user-friendly way for DataCite users
  to create DOIs and metadata.
- Requires setup of connected app in DataCite
- Only Repository accounts can create and update DOIs
- Draft records require only the identifier number in order to be created or saved.
- Draft records can be updated to either Registered DOIs or Findable DOIs
- Only Draft records can be deleted
- The 'Delete DOI' button is only available for Draft records. Registered and Findable
  DOIs cannot be deleted.
- Requires proper OAuth2 setup for authentication
- DataCite Commons provides a public web search interface to the PID Graph.
- The people search uses the ORCID API and its query options.
- The license information is contained in property 16 'rights' of the DataCite Metadata
  Schema.
- DataCite Commons uses GraphQL queries (not the REST API) to search both Fabrica
  and re3data.
- Some objects like Contact may return nulls in deeply nested fields
- Only DataCite DOIs can be claimed in DataCite Commons.
- Content negotiation requests include publisher identifiers as of February 27, 2024.
- GraphQL API supports publisher identifiers as of February 27, 2024.
- DataCite DOIs describe resources such as datasets, samples, software and publications
  with rich metadata.
- Whole/part relationships can be represented using related identifiers with the relationTypes
  HasPart and IsPartOf.
- Including identifiers (e.g. ORCID iDs) in the nameIdentifier property helps to create
  connections between people and works.
- Schema 3 has been deprecated as of January 2025.
- New DOIs can only be registered using Schema 4.
- This is an initial recommendation to begin registering DOIs for awards and grants
  with DataCite.
- All requests to the MDS API require authentication.
- Only traffic via a secure connection (HTTPS) is supported.
- 'DOIs can exist in three states: draft, registered, and findable.'
- 'Request body must be exactly two lines: DOI and URL; wrong domain, wrong prefix
  will cause a 400 Bad Request.'
- GraphQL API currently supports queries only, not mutations or subscriptions.
- Service is open to everyone and is meant to be accessed by OAI-PMH compliant harvesters.
- Content Negotiation is not available for handles registered in the test environment.
- DataCite Content Negotiation is open to the whole community and does not require
  authentication.
- Direct requests to the DataCite Content Negotiation service via https://data.crosscite.org
  only support DataCite DOIs.
- JWT needs to be put in quotes
- By default, all events are sorted in ascending chronological order (using the last
  updated timestamp).
- When using a sort parameter, only the first 10,000 events can be retrieved, as pagination
  based on page number is used.
- Event Data is not part of the DataCite test system.
- DataCite Members and Consortium Organizations have access to APIs which enable DOI
  registration.
- For new integrations, we recommend using the DataCite REST API over the DataCite
  MDS API.
- Integrations should be tested using the DataCite test system.
- Our firewall imposes a rate limit of 3,000 requests per 5 minute window per IP address
  for all of our APIs.
- Registered Service Providers must demonstrate functional DOI registration workflow.
- To register DOIs you need a DataCite account!
- You will have to become a DataCite Member or join as part of a Consortium in order
  to register DOIs.
- All metadata contained in the file is freely available under a CC0 waiver.
- DataCite Profiles provides a single sign-on for DataCite's integration with ORCID.
- DataCite provides Persistent Identifiers (DOIs) for all research outputs.
- ORCID provides Persistent Identifiers (ORCID iDs) for all researchers.
- Auto-update will only trigger for findable DOIs registered or updated after the
  user enables the auto-update token.
- If you are using Counter Processor v0.1.04 or earlier, we recommend updating to
  a later version released by the Global Dataverse Community Consortium to maintain
  compatibility with the Usage Reports API.
- License is under https://creativecommons.org/publicdomain/zero/1.0/
- Ensure to handle rate limits appropriately.
- The Usage Tracker won't work for test DOIs created in the test system.
- Citations and references can be created by adding relatedIdentifiers to DataCite
  DOI metadata.
- At this time, events sourced from Crossref only include links between scholarly
  literature and datasets.
- Citations include events where the given DOI is the subject of a citation relationship
  or the object of a reference relationship.
- DataCite Data File is free for use, but free of any warranties or guarantees.
- Repository transfers must be approved by the Member/Consortium currently managing
  the Repository.
- All the required information must be submitted before the transfer can proceed.
- The test system should never be used as part of any production application or integration
  requests.
- Test DOIs in Draft state can be deleted since they have not yet been registered
  in the test handle server.
- IGSN IDs may be registered for all material samples from any research domain.
- Best practices are still developing for the use of IGSN IDs.
- Sensitive information may be omitted or blurred (e.g., location information may
  be included at a coarser granularity).
- Discussions are needed with the domain experts who are collecting and managing the
  material samples.
- IGSN IDs are functionally DOIs.
- A new, separate IGSN ID Catalog Repository must be created that is exclusively for
  registering IGSN IDs.
- This Repository must be used exclusively to register IGSN IDs for material samples.
- IGSN IDs must be created within a designated IGSN ID Catalog Repository.
- May not be relevant for samples that are ‘non-geographic’ (e.g., a synthetic material).
- IGSN IDs must be registered with at least the six mandatory properties in the DataCite
  Metadata Schema.
- If the date of public availability cannot be determined, use the date of registration.
- If an embargo period has been in effect, use the date when the embargo period ends.
- IGSN IDs in the Registered state will not appear in DataCite discovery systems.
- Metadata should not contain private or sensitive information.
- The DataCite Metadata Schema is not designed to capture all of a material sample’s
  catalog metadata.
- The contributors defined in the RDA standard should be passed through to the DataCite
  contributors section.
- The RDA standard does not provide a way to convey a name/title for the award so
  we just repeat the title of the DMP here.
- RAiDs will be registered by RAiD Registration Agencies through DataCite’s standard
  processes with the resourceTypeGeneral 'Project'.
- RAiDs can also be searched in DataCite Commons by specifying the repository type.
- The default page size is 25 records per page, which can be changed up to 1000 records
  per page.
- DataCite DOIs can be created in three states 'draft', 'registered' or 'findable'.
- Findable and registered DOIs cannot be deleted.
- To see the draft and registered state metadata in the response, you need to authenticate,
  otherwise you will only see the public facing DOIs (in findable state)
- To include affiliation identifiers, add the URL parameter &affiliation=true to your
  REST API requests.
- To include publisher identifiers, add the URL parameter &publisher=true to your
  REST API requests.
- Check API documentation for specific usage limits and data formats.
- The REST API allows you to update DOI metadata either in full or partially via the
  attributes you specify.
- Check API documentation for specific authentication requirements.
- There is a top level hard limit imposed by DataCite's firewall of 3000 requests
  in a 5 minute window, based on IP address.
- There is also an upper limit for requests that come via doi.org of 1000 requests
  in a 5 minute window.
- When placing requests to the test system, please do not exceed 750 requests per
  5 minute window.
- For large-scale DOI registrations and updates (around 100,000+ requests to the /dois
  endpoint in a single day), we recommend 300-500 requests in a 5 minute window.
- It is helpful to ensure that your script has incremental backoffs in the case of
  failure.
- The DataCite REST API uses a standard JSON API format based on https://jsonapi.org/
- A successful query will generate a response from the REST API which includes all
  of the metadata fields in JSON format.
- Remember that it takes 2 calls to the MDS API to successfully create a resolvable
  DOI.
- The `identifiers` attribute in the REST API is unrelated to the mandatory `identifier`
  property in the DataCite Metadata Schema.
- Make sure to add the URL parameter &affiliation=true to your REST API requests to
  see additional affiliation information.
- Use the `disable-facets=true` URL parameter to improve efficiency of DOI list queries.
- Filter lists using filter parameters instead of the `query` parameter for better
  efficiency.
- read timeout reached errors may occur while paging through DataCite DOI metadata
- Errors like 'read timeout reached' may occur when retrieving a page containing unusually
  large DOI records.
- To retrieve XML metadata, include the &detail=true parameter in your requests.
- To create DOIs and metadata, you must use your Repository account.
- You can include up to 25 creators when you create a DOI using the DOI form in Fabrica.
- Some API responses may contain nulls in deeply nested fields
- 'DataCite DOIs can have three states: Draft, Registered or Findable.'
- The DataCite test and production environments are completely separate.
- Prefixes cannot be shared between different Repository accounts. Sharing prefixes
  between Repositories brings a potential risk to the uniqueness of a DOI name.
- Make sure all possible domain names are separated by a comma, and that there is
  no space before or after the comma.
- 'If you are having trouble accessing Fabrica with a specific account, you are redirected
  to the homepage after logging in, or you notice some Fabrica functionalities are
  not working as expected, please try the following: Check the password is correct.
  Log in to Fabrica using a different browser. To make sure you see the latest version
  of Fabrica in your browser you need to clear the cache memory. Clear the browser
  cache with a hard refresh (ctrl + F5 in Windows / Command + Shift + R on a Mac).
  You will know you are running the latest version of Fabrica when you see the ''About''
  tab at the top right of the page.'
- Each Repository has one prefix. When a new Repository account is created a new prefix
  is automatically assigned. It is not possible to share a prefix between multiple
  Repositories.
- Each type of account in DataCite Fabrica has different permissions.
- Remember to update the contact information in your Fabrica accounts to receive DataCite
  communications.
- The DOI Form in DataCite Fabrica allows users to input all of the available metadata
  properties in the DataCite Metadata Schema.
- The Form does limit the number of times certain metadata fields can be repeated.
- Some responses may include nested structures
- New repositories can't be created without the required billing, service and voting
  contacts.
- Only a Repository account can be used for DOI registration with both DataCite Fabrica
  and the API.
- 'You can send DOI metadata to DataCite in different formats including: DataCite
  XML, schema.org in JSON-LD, Crossref Unixref, Citeproc JSON, RIS, and BibTeX.'
- The awardURI field in the DataCite metadata schema is the appropriate place to include
  a URI for a grant.
- For all information about the DataCite Metadata Schema please refer to the schema
  page.
- If the resource being published received grant funding from a funder e.g The Seventh
  Framework Programme (European Union), this information can be included in the DOI
  metadata in the fundingReferences section.
- Some funders may have multiple identifiers. For example the European Union has numerous
  funding mechanisms each with a separate DOI.
- DataCite Members are encouraged to provide metadata in English, in addition to any
  other language that may be required by the funder or hosting organization.
- The DataCite metadata should always reflect the latest, correct information.
- Includes nameIdentifiers in the DOI metadata.
- The easiest way to see the distribution of DOIs by resourceTypeGeneral is via the
  REST API.
- It is common practice to assign a new DOI to different versions of a resource.
- As of DataCite Metadata Schema 4.5, “Instrument” is included in the resourceTypeGeneral
  controlled list values.
- An instrument is defined as “A device, tool or apparatus used to obtain, measure
  and/or analyze data.”
- Schema Version 4.6 includes support for DOIs for Awards.
- You must accept this request or your email address won’t be synced to the mailing
  list.
- It is possible to transfer a prefix from one DOI Registration Agency (RA) to another.
- DataCite Members and Consortium Leads wishing to transfer a prefix from DataCite
  to a different RA will be asked to sign a form to confirm that they approve the
  transfer request.
- Familiarity with Counter Code of Practice for Research Data is needed for usage
  reports.
- Content negotiation is possible for all DOI Registration Agencies via doi.org.
- There is an upper limit of 20 Creators or Contributors that can be displayed in
  DataCite Commons for a DOI record.
- There is currently no formal citation format for support pages.
- The organizational information that appears on the Members page of the DataCite
  website for Direct Members and Consortia is synced directly from DataCite Fabrica.
- If no license information is included in the rightsIdentifier property when a DOI
  is registered, the Licenses graph will automatically represent this as 'unknown.'
- Shall a Consortium Organization discontinue the use of the DOI Registration Service,
  the Consortium Lead must make reasonable efforts to ensure that each Identifier
  assigned to the Consortium Organization's Content continuously resolves to a response
  page (a 'Landing Page').
- 'In practical terms, the best way to manage this is: Transfer the repository account(s)
  of the departing consortium organization to another consortium organization under
  the consortium (this can be the consortium organization belonging to the consortium
  lead, or another, as agreed).'
- DataCite is open to all organizations that share our commitment to sharing research.
- DataCite does not provide individual DOIs but enables research organizations that
  join DataCite as members directly or through a consortium to provide DOIs.
- 'There are three types of DataCite membership: Supporting Member, Direct Member,
  Consortium Lead.'
- Only Members and Consortium Organization accounts can create and manage Repository
  accounts.
- Only Repository accounts can create and manage DOIs.
- There is no credit (refund of fees) if the number of DOIs registered is lower than
  the estimated DOIs, so we recommend you take this into account when entering an
  estimate.
- There is also no additional charge if you register more DOIs than estimated.
- Some responses may have deeply nested structures
- Some endpoints may have rate limits that require handling.
- Some objects like DOI may return nulls in deeply nested fields
- Uses OAuth2 authentication
- Requires setup of connected app in api
- Is there a rate limit for making requests against the DataCite APIs?
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Invalid credentials: Check your Repository account username and password.'
- 'Prefix not associated with Repository ID: Ensure the prefix is linked to your account.'
- '401 Unauthorized: Recheck credentials'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- There are no contacts in your contacts list. Please add at least one contact
- '401 Unauthorized: Check your credentials'
- '404 Not Found: The requested DOI does not exist'
- 'No user and/or ORCID token: Check that the ORCID token is enabled in DataCite Profiles.'
- '422: Schema 3 is no longer supported'
- '401 Unauthorized: no login'
- '403 Forbidden: permission problem or dataset belongs to another party'
- '404 Not Found: DOI does not exist in our database'
- '422 Unprocessable Entity: metadata failed validation against the DataCite Schema'
- '200 OK: operation successful'
- '204 No Content: the DOI is known to DataCite Metadata Store (MDS), but no metadata
  have been registered'
- '201 Created: operation successful'
- '400 Bad Request: request body must be exactly two lines: DOI and URL; wrong domain,
  wrong prefix'
- '403 Forbidden: login problem'
- '412 Precondition failed: metadata must be uploaded first'
- '401 Unauthorized: no login provided'
- '403 Forbidden: login problem or DOI belongs to another party'
- '404 Not Found: DOI does not exist in our database or you are not authorized with
  your username/password combination'
- '422 Unprocessable Entity: metadata not validating against DataCite schema'
- '500 Internal Server Error: internal server error'
- '200: The request was OK.'
- '204: The request was OK but there was no metadata available.'
- '404: The DOI requested doesn''t exist.'
- '4xx errors: Attempt to resolve the source of the error before resending the request.'
- '5xx errors: Wait before retrying the request.'
- '401 Unauthorized: Check your API key.'
- '404 Not Found: Verify the endpoint path.'
- Requests in excess of 750 requests per 5 minutes is considered misuse of the test
  system.
- '401 Unauthorized: Recheck OAuth credentials or token expiration'
- '403 Forbidden: Check permissions'
- '404 Not Found: Verify endpoint URL'
- '500 Internal Server Error: Retry the request'
- '400: Bad Request: Check the docs again and try to reproduce.'
- '401: Bad credentials: Unauthorized - Check your password.'
- '403: You are not authorized to access this resource: Forbidden - Check your password
  or validate that you are updating a DOI/prefix/repository you have permissions for.'
- '404: The resource you are looking for doesn''t exist: Not Found - The resource
  is not found e.g. fetching a DOI/Repository/Member details. May also indicate an
  issue with credentials. Check your username and password.'
- '405: Method Not Allowed: The http method on the request made is not supported.
  Check documentation.'
- '422: Unprocessable Entity: Check the contents of your request, the system understood
  but it was unable to process it. For a DOI update this might be invalid URL or metadata
  is invalid.'
- '409: The resource already exists: Check whether the DOI has already been registered:
  https://api.datacite.org/dois/YOURDOINAME'
- '500: Internal Server Error: Try to reproduce and report steps that caused it.'
- '502: Bad Gateway: Most likely a temporary issue, try again'
- '503: Service Unavailable: Check our status page https://status.datacite.org.'
- '504: Gateway Timeout: Check our status page/releases https://status.datacite.org.'
- '401 Unauthorized: Check your credentials and permissions.'
- '401 Unauthorized: Recheck your repository ID and password'
- 'unauthorized: There is a problem with either the prefix/ID or password'
- 'access denied: There is a problem with either the prefix/ID or password'
- '403: There is a problem with either the prefix/ID or password'
- read timeout reached
- '400: read timeout reached'
- '404 Not Found: Verify the DOI exists'
- New repositories can't be created because you have not provided the required billing,
  service and voting contacts.
- '401 Unauthorized: Ensure valid authentication credentials.'
- '404 Not Found: Check the DOI or resource identifier.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - clients
  - OAuthToken
client:
  base_url: https://support.datacite.org
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
