resources:
- name: Feature Flags
  endpoint:
    path: /feature_flags
    method: GET
    data_selector: features
    params: {}
- name: Related Projects
  endpoint:
    path: /related_projects
    method: GET
    data_selector: projects
    params: {}
- name: Default Features
  endpoint:
    path: features/default
    method: GET
    data_selector: features
    params: {}
- name: Optional Features
  endpoint:
    path: features/optional
    method: GET
    data_selector: features
    params: {}
- name: Experimental Features
  endpoint:
    path: features/experimental
    method: GET
    data_selector: features
    params: {}
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: definition
    params: {}
- name: Default Features
  endpoint:
    path: /default_features
    method: GET
    data_selector: features
    params: {}
- name: Optional features
  endpoint:
    path: /optional_features
    method: GET
    data_selector: features
    params: {}
- name: Experimental features
  endpoint:
    path: /experimental_features
    method: GET
    data_selector: features
    params: {}
- name: Derive API
  endpoint:
    path: /derive
    method: GET
    data_selector: attributes
- name: Builder API
  endpoint:
    path: /builder
    method: GET
    data_selector: attributes
- name: default_features
  endpoint:
    path: /features/default
    method: GET
    data_selector: features
    params: {}
- name: optional_features
  endpoint:
    path: /features/optional
    method: GET
    data_selector: features
    params: {}
- name: experimental_features
  endpoint:
    path: /features/experimental
    method: GET
    data_selector: features
    params: {}
- name: Default Features
  endpoint:
    path: /features/default
    method: GET
    data_selector: features
    params: {}
- name: Optional Features
  endpoint:
    path: /features/optional
    method: GET
    data_selector: features
    params: {}
- name: Experimental Features
  endpoint:
    path: /features/experimental
    method: GET
    data_selector: features
    params: {}
- name: command_line_argument_parser
  endpoint:
    path: /api/command_line_argument_parser
    method: GET
    data_selector: records
    params: {}
- name: arguments
  endpoint:
    path: /usage
    method: GET
    data_selector: args
- name: Default Features
  endpoint:
    path: /features/default
    method: GET
    data_selector: features
    params: {}
- name: Optional Features
  endpoint:
    path: /features/optional
    method: GET
    data_selector: features
    params: {}
- name: Experimental Features
  endpoint:
    path: /features/experimental
    method: GET
    data_selector: features
    params: {}
- name: cli
  endpoint:
    path: /
    method: GET
- name: parser
  endpoint:
    path: /parser
    method: GET
    data_selector: records
    params: {}
- name: feature_flags
  endpoint:
    path: /feature_flags
    method: GET
    data_selector: features
    params: {}
- name: cli
  endpoint:
    path: /cli
    method: GET
    data_selector: arguments
    params: {}
- name: cli
  endpoint:
    path: /cli
    method: GET
    data_selector: args
- name: help
  endpoint:
    path: /help
    method: GET
    data_selector: message
- name: version
  endpoint:
    path: /version
    method: GET
    data_selector: version_info
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: args
  endpoint:
    path: /args
    method: GET
    data_selector: args
    params: {}
- name: cli
  endpoint:
    path: /cli
    method: GET
    data_selector: arguments
    params: {}
- name: cli
  endpoint:
    path: /cli
    method: GET
    data_selector: items
- name: cli
  endpoint:
    path: /cli
    method: GET
    data_selector: args
    params: {}
- name: config
  endpoint:
    path: cli.yml
    method: GET
    data_selector: args
    params: {}
- name: input
  endpoint:
    path: cli.yml
    method: GET
    data_selector: args
    params:
      required: true
      index: 1
- name: verbose
  endpoint:
    path: cli.yml
    method: GET
    data_selector: args
    params: {}
- name: myapp
  endpoint:
    path: cli.yml
    method: GET
    data_selector: args
    params: {}
- name: usage
  endpoint:
    path: /usage
    method: GET
- name: help
  endpoint:
    path: /help
    method: GET
- name: version
  endpoint:
    path: /version
    method: GET
- name: myapp
  endpoint:
    path: /
    method: GET
- name: help
  endpoint:
    path: /help
    method: GET
    data_selector: info
    params: {}
notes:
- To disable features, add to your Cargo.toml
- You can selectively enable only the features you'd like to include
- Can auto-derive the order from declaration order
- Help messages can now be optionally colored
- Uses YAML for building CLIs
- Supports multiple occurrences of flags and arguments
- clap follows semantic versioning, so breaking changes should only happen upon major
  version bumps.
- Ensure your args are using the proper names throughout the code.
- clap takes SemVer and compatibility seriously.
- Minimum required version of Rust is current stable minus two releases.
- Requires feature derive
- Supports building CLIs from YAML
- Auto-generated Help, Version, and Usage information
- Minimum Version of Rust is 1.19.0 for clap
- clap follows semantic versioning
- Old method names will be left around for several minor version bumps, or one major
  version bump.
- Default Features include std, color, suggestions.
- Optional features include derive, cargo, env, regex, unicode, wrap_help.
- Will support the last two minor Rust releases (MSRV, currently 1.56.1)
- Not Currently Used. Placeholder for supporting no_std environments in a backwards
  compatible manner.
- Default Features include color and suggestions.
- Optional features allow for custom derive and environment variable usage.
- We recommend users to not update to the prerelease version yet and to wait for the
  official 3.0.
- 'Default Features: std, color, suggestions'
- 'Optional features: derive, cargo, env, regex, unicode, wrap_help'
- 'Experimental features: unstable-replace, unstable-multicall, unstable-grouped,
  unstable-v4'
- 'note: requires feature derive'
- Out of the box, users get a polished CLI experience
- Will support the last two minor Rust releases (MSRV, currently 1.54.0)
- Flexible enough to port your existing CLI interface
- Easier to read, write, and modify
- 'Experimental features: unstable-replace, unstable-grouped, unstable-v4'
- We follow semver and will wait about 6-9 months between major breaking changes
- We recommend users to not update to the prerelease version yet and to wait for the
  official `3.0`.
- Argument values now take precedence over subcommand names.
- Fewer lifetimes! Yay!
- Value names can now be specified inline.
- clap takes SemVer and compatibility seriously
- Breaking changes should only happen upon major version bumps
- Uses YAML for building CLIs.
- Auto-generated bash completion scripts at compile time
- The minimum required version of Rust is now 1.13.0 (Stable)
- Some performance improvements by reducing the amount of duplicate work, cloning,
  and allocations in all cases.
- Default features include color and suggestions.
- Experimental features may contain breaking changes between minor releases.
- clap is used to parse and validate the string of command line arguments provided
  by the user at runtime.
- Optional features provide additional functionality.
- Experimental features may contain breaking changes.
- Uses semantic versioning, breaking changes happen only upon major version bumps
- clap is used to parse and validate command line arguments.
- Supports many features including auto-generated help and version information.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- This may break code that was relying on this bug! If you add a flag with a long
  of `help` manually*and*rely on the help message to be printed automatically your
  code could break.
- This may break code that was relying on this bug! If you add a flag with a long
  of `App::long_about` `App::long_version` `App::print_long_help` `App::write_long_help`
  `App::print_long_version` `App::write_long_version` `Arg::long_help`
- Default features include std, color, suggestions.
- Optional features include deprecated, derive, cargo, env, regex, unicode, wrap_help.
- Experimental features include unstable-replace, unstable-grouped, unstable-v4.
- requires feature derive
- clap will officially support current stable Rust, minus two releases, but may work
  with prior releases as well.
- At the 1.22.0 stable release, clap will be guaranteed to compile with 1.20.0 and
  beyond.
- Easier to keep the argument declaration and reading of argument in sync
- Easier to reuse, e.g. clap-verbosity-flag
- clap is used to parse and validate the string of command line arguments provided
  by a user at runtime.
- It provides auto-generated help, version, and usage information.
- Supports building CLIs from YAML.
- Default features include std, color, suggestions
- Optional features include deprecated, derive, cargo, env, regex, unicode, wrap_help
- Experimental features may contain breaking changes
- clap requires rustc 1.21.0 or greater.
- clap takes SemVer and compatibility seriously, this is the official policy regarding
  breaking changes and minimum required versions of Rust.
- It is highly recommended to use the '~major.minor.patch' style in your Cargo.toml
  only if you wish to target a version of Rust that is older than current stable minus
  two releases.
- This may break code that was relying on this bug!
- All arguments can be defined once and be available to all child subcommands.
- Uses auto-generated help, version, and usage information
- Uses YAML for configuration
- Supports auto-generated help and version information
- Turns on colored error messages.
- Turns on the 'Did you mean '--myoption'?' feature for when users make typos.
- Minimum version of Rust is guaranteed to compile with 1.19.0 and beyond.
- Uses YAML to build CLI
- Supports auto-generated Help, Version, and Usage information
- Simply Renamed
- Removed Deprecated Functions and Methods
- Renamed Error Variants
- Usage Parser
- Some massive performance gains when using many args (i.e. things like shell glob
  expansions).
- Can optionally be fully, or partially overridden if you want a custom help, version,
  or usage
- Automatically generates bash completion scripts at compile time
- This example demonstrates clap's full 'builder pattern' style of creating arguments
  which is more verbose, but allows easier editing, and at times more advanced options,
  or the possibility to generate arguments dynamically.
- This example demonstrates clap's 'usage strings' method of creating arguments which
  is less verbose.
- It is highly recommended to use the '~major.minor.patch' style in your 'Cargo.toml'
- Uses auto-generated Help, Version, and Usage information
- clap will pin the minimum required version of Rust to the CI builds.
- Bumping the minimum version of Rust is considered a minor breaking change.
- For example, current stable Rust at the time of this writing is 1.13.0, meaning
  clap is guaranteed to compile with 1.11.0 and beyond.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some features may break code relying on previous versions.
- 'Bash Completion: allows bash completion to fall back to traditional bash completion
  upon no matching completing function'
- Supports multiple values (i.e. myprog <file>...)
- Fewer lifetimes in API
- Deprecated functions and methods have been removed
- Ensure your args are using the proper names (i.e. typically the long or short and
  NOT the value name) throughout the code.
- Uses auto-generated help/version and usage information
- Supports multiple values and occurrences for arguments.
- Allows building CLIs from YAML for better organization.
- Uses Rust for command line argument parsing.
- The minimum required version of Rust is now 1.18.0 (Stable)
- Uses YAML to build CLIs for cleaner code.
- Uses automatic version from Cargo.toml
- Breaking changes only happen upon major version bumps
- Argument values now take precedence over subcommand names
- Value names can now be specified inline
- clap provides many things 'for free' including the traditional version and help
  switches.
- Uses Cargo.toml for versioning
- clap also provides the traditional version and help switches automatically.
- Minimum version of Rust is 1.19.0 for compatibility.
- Breaking changes only occur on major version bumps, except for security fixes or
  bug-related changes.
- clap is licensed under the MIT license.
- If you are concerned with supporting a minimum version of Rust that is older than
  the current stable Rust minus 2 stable releases, it's recommended to use the ~major.minor.patch
  style versions in your Cargo.toml which will only update the patch version automatically.
- It provides many things 'for free' including the traditional version and help switches.
- Uses YAML for building CLI options.
- clap will pin the minimum required version of Rust to the CI builds
- All of these examples are functionally the same, but show different styles in which
  to use clap
- This feature requires additional dependencies that not everyone may want, it is
  not compiled in by default and we need to enable a feature flag in Cargo.toml
- Uses auto-generated help and version information
- Adds fish subcommand help support
- Options that use require_equals(true) now display the equals sign in help messages
- Setting the max term width now correctly propagates down through child subcommands
- Uses auto-generated help, version, and usage information.
- Minimum required version of Rust is current stable minus two releases
- This release also contains a very minor breaking change to fix a bug
- Uses YAML for defining command line arguments.
- Here's the highlights for v2.25.1
- impl Default for Values + OsValues for any lifetime. (fb7d6231f1)
- Here's the highlights for v2.21.0 to v2.25.0
- use textwrap crate for wrapping help texts
- suggests to use flag after subcommand when applicable
- Bumps bitflags crate to v0.9
- fixes a bug where args that allow values to start with a hyphen couldnt contain
  a double hyphen -- as a value
- fixes a bug where positional argument help text is misaligned
- Automatically generates help and version messages.
- Requires setup of connected app in api
- Help text auto wraps and aligns at term width on Linux and OS X.
- Subcommands now support aliases.
- clap is licensed under the MIT license. Please read the LICENSE-MIT file in this
  repository for more information.
- Automatically generates help, version, and usage information.
- You can also run myapp test --help or myapp help test to see the help message for
  the test subcommand.
- Uses YAML for argument definitions
- Supports multiple localized translations
- Breaking changes should only happen upon major version bumps.
- Usage Parser - Value names can now be specified inline.
- Uses YAML for building CLIs, allowing for tidy source and localization support.
- Can define specific value sets for arguments
- Uses YAML for command line interface definitions
- Supports auto-generated help, version, and usage information
- fixes the precedence of this error to prioritize over other error messages
- fixes some regression bugs resulting from old asserts in debug mode
- Uses Cargo.toml for configuration
- Auto-generates help, version, and usage information
- There are a few goals of clap that I'd like to maintain throughout contributions.
- Help text auto wraps and aligns at term width!
- Help text auto wraps and aligns at for subcommands too!
- Uses Cargo.toml for version and description
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Breaking changes should only happen upon major version bumps
- 'InvalidUnicode: InvalidUtf8'
- 'InvalidArgument: UnknownArgument'
- 'InvalidUnicode: Invalid UTF-8'
- 'InvalidArgument: Unknown argument'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Breaking changes should only happen upon major version bumps.
- InvalidUnicode => InvalidUtf8
- InvalidArgument => UnknownArgument
- Did you mean '--myoption'?
- Did you mean '--myoption'? error and exit gracefully
- Old method names will be left around for several minor version bumps, or one major
  version bump.
- Colorized Errors (Non Windows OS only)
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: ''
  headers:
    Accept: application/json
  auth:
    type: none
    flow: refresh_token
    token_url: https://login.api.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  paginator:
    type: cursor
    cursor_path: nextRecordsUrl
    cursor_param: nextUrl
    page_size_param: pageSize
    default_page_size: 200
source_metadata: null
