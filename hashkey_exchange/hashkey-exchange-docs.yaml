resources:
- name: place_order
  endpoint:
    path: /api/v1/spot/order
    method: POST
    data_selector: response
    params: {}
- name: order
  endpoint:
    path: /api/v1/spot/order
    method: POST
    data_selector: response
    params: {}
- name: Test New Order
  endpoint:
    path: /api/v1/spot/orderTest
    method: POST
    data_selector: '{}'
- name: create_order
  endpoint:
    path: /api/v1/spot/order
    method: POST
- name: create_order_v1.1
  endpoint:
    path: /api/v1.1/spot/order
    method: POST
- name: create_order
  endpoint:
    path: /spot/order
    method: POST
- name: batch_orders
  endpoint:
    path: /api/v1/spot/batchOrders
    method: POST
    data_selector: result
    params:
      timestamp: LONG
- name: cancel_order
  endpoint:
    path: /api/v1/spot/order
    method: DELETE
    data_selector: response_content
    params:
      timestamp: required
      orderId: conditional
      clientOrderId: conditional
- name: cancel_all_open_orders
  endpoint:
    path: /api/v1/spot/openOrders
    method: DELETE
    data_selector: success
    params:
      symbol: ''
      timestamp: ''
- name: cancel_multiple_orders
  endpoint:
    path: /api/v1/spot/cancelOrderByIds
    method: DELETE
    data_selector: result
    params:
      ids: 202212231234567895,202212231234567896
      timestamp: '1714311403031'
- name: order
  endpoint:
    path: /api/v1/spot/order
    method: GET
    data_selector: response
    params:
      timestamp: required
- name: open_orders
  endpoint:
    path: /api/v1/spot/openOrders
    method: GET
    data_selector: 'No'
    params:
      timestamp: '1714311403031'
- name: trade_orders
  endpoint:
    path: /api/v1/spot/tradeOrders
    method: GET
    data_selector: 'No'
    params: {}
- name: Get Account Information
  endpoint:
    path: /reference/get-account-information
    method: GET
- name: Get End of Day Balance
  endpoint:
    path: /reference/get-end-of-day-balance
    method: GET
- name: Get Fiat History
  endpoint:
    path: /reference/get-fiat-history
    method: GET
- name: vip_info
  endpoint:
    path: /api/v1/account/vipInfo
    method: GET
    data_selector: data
    params: {}
- name: account_information
  endpoint:
    path: /account
    method: GET
    data_selector: balances
    params:
      timestamp: required
- name: end_of_day_balance
  endpoint:
    path: /api/v1/account/eodBalance
    method: GET
    data_selector: balances
    params: {}
- name: account_trades
  endpoint:
    path: /api/v1/account/trades
    method: GET
    data_selector: Object Array
    params:
      timestamp: Y
- name: account_trade_list_by_client_order_id
  endpoint:
    path: /api/v1/account/tradesByClOrderId
    method: GET
    data_selector: trades
    params:
      clientOrderId: required
      timestamp: required
- name: account_type
  endpoint:
    path: /api/v1/account/type
    method: GET
    data_selector: results
    params:
      timestamp: LONG
- name: internal_account_transfer
  endpoint:
    path: /api/v1/account/assetTransfer
    method: POST
    data_selector: success
    params:
      fromAccountId: '1467296062716909568'
      toAccountId: '1473231491689395200'
      coin: USDT
      quantity: 20
      timestamp: '1712317312973'
- name: account_type
  endpoint:
    path: /api/v1/account/checkApiKey
    method: GET
    data_selector: accountType
    params:
      timestamp: LONG
- name: fiat_history
  endpoint:
    path: /api/v1/account/fiat/history
    method: GET
    data_selector: records
    params:
      type: deposit
      startTime: required
      endTime: required
      timestamp: required
- name: account_balance_flow
  endpoint:
    path: /api/v1/account/balanceFlow
    method: GET
    data_selector: records
    params:
      type: trade
      startTime: required
      endTime: required
      timestamp: required
- name: fiatDepositWithdraw
  endpoint:
    path: /fiatDepositWithdraw
    method: GET
    data_selector: records
    params: {}
- name: depositWithdrawRefund
  endpoint:
    path: /depositWithdrawRefund
    method: GET
    data_selector: records
    params: {}
- name: transfer
  endpoint:
    path: /transfer
    method: GET
    data_selector: records
    params: {}
- name: trades
  endpoint:
    path: /api/v1/account/brokerage/trades
    method: GET
    data_selector: records
    params:
      startTime: LONG
      endTime: LONG
      orderId: STRING
      source: STRING
      pages: INTEGER
      limit: INTEGER
      timestamp: LONG
- name: Get Deposit Address
  endpoint:
    path: /reference/get-deposit-address
    method: GET
- name: Get Deposit History
  endpoint:
    path: /reference/get-deposit-history
    method: GET
- name: Withdrawal Records
  endpoint:
    path: /reference/withdrawal-records
    method: GET
- name: Withdraw
  endpoint:
    path: /reference/withdraw
    method: POST
- name: Withdraw Fiat
  endpoint:
    path: /reference/withdraw-fiat
    method: POST
- name: Get Verify Whitelist Address
  endpoint:
    path: /reference/get-verify-whitelist-address
    method: GET
- name: Wallet Signing Verification
  endpoint:
    path: /reference/wallet-signing-verification
    method: POST
- name: Get Whitelisted Address
  endpoint:
    path: /reference/get-whitelist-address
    method: GET
- name: Deposit Refund
  endpoint:
    path: /reference/deposit-refund
    method: POST
- name: Get Refund Orders
  endpoint:
    path: /reference/refund-orders
    method: GET
- name: Get ChainType
  endpoint:
    path: /reference/get-chaintype
    method: GET
- name: account_deposit_address
  endpoint:
    path: /api/v1/account/deposit/address
    method: GET
- name: account_withdraw
  endpoint:
    path: /api/v1/account/withdraw
    method: GET
- name: deposit_address
  endpoint:
    path: /api/v1/account/deposit/address
    method: GET
    data_selector: response
    params:
      coin: USDT
      chainType: ETH
      timestamp: '1712317312973'
- name: deposit_orders
  endpoint:
    path: /api/v1/account/depositOrders
    method: GET
    data_selector: records
    params: {}
- name: withdraw_orders
  endpoint:
    path: /api/v1/account/withdrawOrders
    method: GET
    data_selector: '*'
    params:
      timestamp: required
- name: withdraw
  endpoint:
    path: /api/v1/account/withdraw
    method: POST
    data_selector: success
    params:
      coin: USDT
      clientOrderId: w12912
      address: '0x132346ef629483974879a2e68A3557cA1c494D2E'
      quantity: 0.2
      chainType: ETH
      timestamp: 1712317312973
- name: withdraw_fiat
  endpoint:
    path: /api/v1/account/fiat/withdraw
    method: POST
    data_selector: success
    params:
      bankAccount: required
      asset: required
      amount: required
      timestamp: required
- name: verify_whitelist_address
  endpoint:
    path: /api/v1/whitelist/verify
    method: GET
    data_selector: response
    params:
      coin: USDT
      chainType: USDT_ETH
      quantity: '0.1'
- name: wallet_signing_verification
  endpoint:
    path: /api/v1/whitelist/walletSigning
    method: POST
    data_selector: response
- name: whitelisted_address
  endpoint:
    path: /api/v1/account/whitelistAddress
    method: GET
    data_selector: fromAddress
    params:
      coin: USDT_ETH
      type: Deposit
- name: deposit_refund
  endpoint:
    path: /api/v1/account/depositRefund
    method: POST
    data_selector: success
    params:
      depositOrderId: ''
      walletId: ''
- name: chain_type
  endpoint:
    path: /api/v1/account/chainType
    method: GET
    data_selector: chainTypeList
    params:
      coinId: ETH
- name: ping
  endpoint:
    path: /api/v1/ping
    method: GET
    data_selector: '{}'
- name: server_time
  endpoint:
    path: /api/v1/time
    method: GET
    data_selector: serverTime
- name: create_listen_key
  endpoint:
    path: /api/v1/userDataStream
    method: POST
    data_selector: listenKey
    params:
      timestamp: required
      recvWindow: optional
- name: reset_listen_key_validity
  endpoint:
    path: /api/v1/userDataStream
    method: PUT
    data_selector: ''
- name: reset_listen_key_validity
  endpoint:
    path: /api/v1/userDataStream
    method: PUT
    data_selector: null
    params:
      listenKey: Y
      timestamp: Y
      recvWindow: null
- name: delete_listen_key
  endpoint:
    path: /api/v1/userDataStream
    method: DELETE
    data_selector: null
    params:
      listenKey: Y
      timestamp: Y
      recvWindow: null
- name: delete_listen_key
  endpoint:
    path: /api/v1/userDataStream
    method: DELETE
    data_selector: None
    params:
      listenKey: required
      timestamp: required
      recvWindow: optional
- name: exchange_info
  endpoint:
    path: /exchangeInfo
    method: GET
    data_selector: data
    params: {}
- name: trading_pair_status
  endpoint:
    path: /exchange/status
    method: GET
    data_selector: symbols
- name: trading_pair_status
  endpoint:
    path: /exchange/status
    method: GET
    data_selector: symbols
- name: coin_info
  endpoint:
    path: /api/v1/coinInfo
    method: GET
    data_selector: coin
    params: {}
- name: coin_info
  endpoint:
    path: /api/v1/coinInfo
    method: GET
    data_selector: coin
    params: {}
- name: order_book
  endpoint:
    path: /quote/v1/depth
    method: GET
    data_selector: response
    params:
      symbol: ETHUSD
      limit: 10
- name: order_book
  endpoint:
    path: /quote/v1/depth
    method: GET
    data_selector: response
    params:
      symbol: ETHUSD
      limit: 10
- name: recent_trade
  endpoint:
    path: /quote/v1/trades
    method: GET
    data_selector: Latest trades list
    params:
      symbol: ETHUSD
      limit: 60
- name: recent_trade
  endpoint:
    path: /quote/v1/trades
    method: GET
    data_selector: trades
    params:
      symbol: ETHUSD
      limit: 60
- name: kline
  endpoint:
    path: /klines
    method: GET
    data_selector: Array of Arrays
    params:
      symbol: ETHUSDT
      interval: 1m
      limit: 10
      startTime: 1478692862000
      endTime: 1478696782000
- name: 24hr_ticker_price_change
  endpoint:
    path: /quote/v1/ticker/24hr
    method: GET
    data_selector: 24hrs price change list
    params:
      symbol: ETHUSD
- name: 24hr_ticker_price_change
  endpoint:
    path: /quote/v1/ticker/24hr
    method: GET
    data_selector: 24hrs price change list
    params:
      symbol: ETHUSD
- name: symbol_price_ticker
  endpoint:
    path: /quote/v1/ticker/price
    method: GET
    data_selector: '[]'
- name: symbol_price_ticker
  endpoint:
    path: /quote/v1/ticker/price
    method: GET
    data_selector: Array of Object
    params:
      symbol: ETHUSD
- name: top_order_book
  endpoint:
    path: /quote/v1/ticker/bookTicker
    method: GET
    data_selector: Array of Object
    params:
      symbol: BTCUSD
- name: top_order_book
  endpoint:
    path: /quote/v1/ticker/bookTicker
    method: GET
    data_selector: Array of Object
    params:
      symbol: BTCUSD
- name: merge_depth
  endpoint:
    path: /quote/v1/depth/merged
    method: GET
    data_selector: data
    params:
      symbol: BTCUSD
      limit: 10
      scale: 1
- name: merge_depth
  endpoint:
    path: /quote/v1/depth/merged
    method: GET
    data_selector: results
    params:
      symbol: BTCUSD
      limit: 10
      scale: 1
- name: quote_pair
  endpoint:
    path: /convertCurrency/getQuotePair
    method: GET
    data_selector: quotePair
    params: {}
- name: quote_pair
  endpoint:
    path: /api/v1/convertCurrency/getQuotePair
    method: GET
    data_selector: quotePair
    params: {}
- name: get_quote
  endpoint:
    path: /api/v1/convertCurrency/getQuote
    method: GET
    data_selector: quote
- name: get_quote
  endpoint:
    path: /api/v1/convertCurrency/getQuote
    method: GET
    data_selector: quote
    params: {}
- name: transact_status
  endpoint:
    path: /api/v1/convertCurrency/transactStatus
    method: GET
    data_selector: fxOrders
    params:
      startTime: '1751870337876'
      endTime: '1751870337876'
- name: transact_status
  endpoint:
    path: /api/v1/convertCurrency/transactStatus
    method: GET
    data_selector: fxOrders
    params:
      startTime: '1751870337876'
      endTime: '1751870337876'
- name: transact
  endpoint:
    path: /api/v1/convertCurrency/transact
    method: POST
- name: currency_conversion
  endpoint:
    path: /convertCurrency/transact
    method: POST
    data_selector: response
    params: {}
- name: quote_pairs
  endpoint:
    path: /market-place/get-pairs
    method: GET
    data_selector: quotePair
    params:
      timestamp: '1691567587389'
      signature: ''
- name: quote_pairs
  endpoint:
    path: /market-place/get-pairs
    method: GET
    data_selector: quotePair
    params:
      timestamp: '1691567587389'
      signature: ''
- name: create_rfq
  endpoint:
    path: /api/v1/market-place/create-rfq
    method: POST
    data_selector: response
    params: {}
- name: create_rfq
  endpoint:
    path: /api/v1/market-place/create-rfq
    method: POST
    data_selector: ''
    params: {}
- name: accept_quote
  endpoint:
    path: /api/v1/market-place/accept-quote
    method: GET
    data_selector: response
    params: {}
- name: accept_quote
  endpoint:
    path: /api/v1/market-place/accept-quote
    method: GET
- name: rfq_history
  endpoint:
    path: /api/v1/market-place/rfqs
    method: GET
    data_selector: records
    params:
      startTime: Y
      endTime: Y
      timestamp: Y
      rfqId: ''
      quoteId: ''
      rfqClOrderId: ''
      limit: ''
      status: ''
- name: rfq_history
  endpoint:
    path: /api/v1/market-place/rfqs
    method: GET
    data_selector: records
    params:
      limit: '500'
- name: active_quotes
  endpoint:
    path: /api/v1/market-place/rfq-active/{rfqId}
    method: GET
    params:
      rfqId: STRING
      timestamp: LONG
      signature: STRING
- name: active_quotes
  endpoint:
    path: /api/v1/market-place/rfq-active/{rfqId}
    method: GET
    data_selector: quotes
    params:
      rfqId: STRING
      timestamp: LONG
      signature: STRING
- name: public_stream
  endpoint:
    path: /quote/ws/v1
    method: GET
    data_selector: messages
- name: private_stream
  endpoint:
    path: /api/v1/ws/{listenKey}
    method: GET
    data_selector: messages
- name: trade
  endpoint:
    path: quote/ws/v1
    method: GET
    data_selector: data
    params:
      symbol: BTCUSDT
      topic: trade
      event: sub
      params:
        binary: false
      id: 1
- name: realtimes
  endpoint:
    path: quote/ws/v1
    method: GET
    data_selector: data
    params:
      symbol: BTCUSDT
      topic: realtimes
      event: sub
      params:
        binary: false
      id: 1
- name: kline
  endpoint:
    path: quote/ws/v1
    method: GET
    data_selector: data
    params:
      symbol: BTCUSDT
      topic: kline_1m
      event: sub
      params:
        binary: false
      id: 1
- name: trade
  endpoint:
    path: /api/v1/ws/{listen_key}
    method: GET
    data_selector: data
    params:
      symbol: BTCUSDT
      topic: trade
      event: sub
      params:
        binary: false
      id: 1
- name: realtimes
  endpoint:
    path: /api/v1/ws/{listen_key}
    method: GET
    data_selector: data
    params:
      symbol: BTCUSDT
      topic: realtimes
      event: sub
      params:
        binary: false
      id: 1
- name: kline
  endpoint:
    path: /api/v1/ws/{listen_key}
    method: GET
    data_selector: data
    params:
      symbol: BTCUSDT
      topic: kline_1m
      event: sub
      params:
        binary: false
      id: 1
- name: depth
  endpoint:
    path: /api/v1/ws/{your_listenkey_here}
    method: GET
    data_selector: data
    params:
      symbol: BTCUSDT
      topic: depth
      event: sub
      params:
        binary: false
- name: Account Update
  endpoint:
    path: /api/v1/ws/<listenKey>
    method: GET
    data_selector: outboundAccountInfo
- name: Order Update
  endpoint:
    path: /api/v1/ws/<listenKey>
    method: GET
    data_selector: executionReport
- name: Ticket push
  endpoint:
    path: /api/v1/ws/<listenKey>
    method: GET
    data_selector: ticketInfo
- name: kline
  endpoint:
    path: /ws/v2/kline
    method: GET
    data_selector: data
    params:
      topic: kline
      event: sub
- name: realtimes
  endpoint:
    path: /realtimes
    method: GET
    data_selector: data
    params:
      topic: realtimes
      event: sub
- name: kline
  endpoint:
    path: /ws/v2/kline
    method: GET
    data_selector: data
    params:
      topic: kline
      event: sub
- name: depth
  endpoint:
    path: /ws/v2/depth
    method: GET
    data_selector: data
    params:
      topic: depth
      event: sub
      params:
        symbol: USDTUSDC
- name: realtimes
  endpoint:
    path: /ws/v2/realtimes
    method: GET
    data_selector: data
    params:
      topic: realtimes
      event: sub
- name: trade
  endpoint:
    path: /ws/v2/trade
    method: GET
    data_selector: data
    params:
      topic: trade
- name: depth
  endpoint:
    path: /ws/v2/depth
    method: GET
    data_selector: data
    params:
      topic: depth
      event: sub
- name: bbo
  endpoint:
    path: /ws/v2/bbo
    method: GET
    data_selector: data
    params:
      topic: bbo
      event: sub
      symbol: ETHUSDT
- name: trade
  endpoint:
    path: /ws/v2/trade
    method: POST
    data_selector: data
    params:
      topic: trade
      event: sub
- name: rfqs
  endpoint:
    path: /rfqs
    method: GET
    data_selector: data
    params: {}
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: data
    params: {}
- name: bbo
  endpoint:
    path: /ws/v2/bbo
    method: GET
    data_selector: data
    params:
      topic: bbo
      event: sub
      params:
        symbol: ETHUSDT
- name: Create a Listen Key
  endpoint:
    path: /create-a-listen-key
    method: POST
- name: Private Stream
  endpoint:
    path: /ws/{listenKey}
    method: GET
- name: rfqs
  endpoint:
    path: ''
    method: SUBSCRIBE
    data_selector: data
    params: {}
- name: quotes
  endpoint:
    path: ''
    method: SUBSCRIBE
    data_selector: data
    params: {}
- name: bestQuote
  endpoint:
    path: /bestQuote
    method: GET
    data_selector: data
    params: {}
- name: rfqUpdates
  endpoint:
    path: /rfqUpdates
    method: GET
    data_selector: data
    params: {}
- name: Logon
  endpoint:
    path: /logon
    method: GET
    data_selector: records
    params: {}
- name: Heartbeat
  endpoint:
    path: /heartbeat
    method: GET
    data_selector: records
    params: {}
- name: Logout
  endpoint:
    path: /logout
    method: GET
    data_selector: records
    params: {}
- name: Logon
  endpoint:
    path: /reference/logon-a
    method: GET
- name: Heartbeat
  endpoint:
    path: /heartbeat
    method: GET
    data_selector: null
    params: {}
- name: Logon
  endpoint:
    path: /reference/logon-a
    method: GET
- name: Test Request
  endpoint:
    path: /reference/test-request-1
    method: GET
    data_selector: records
    params: {}
- name: Resend Request
  endpoint:
    path: /reference/resend-request-2
    method: GET
    data_selector: messages
    params: {}
- name: Test Request
  endpoint:
    path: /reference/test-request-1
    method: GET
    data_selector: records
    params: {}
- name: Resend Request
  endpoint:
    path: /reference/resend-request-2
    method: GET
    data_selector: records
    params: {}
- name: Sequence Reset
  endpoint:
    path: /reference/sequence-reset-4
    method: POST
    data_selector: records
- name: Reject
  endpoint:
    path: /reference/reject-3
    method: GET
    data_selector: records
    params: {}
- name: create_new_order
  endpoint:
    path: /reference/create-new-order-d
    method: POST
- name: Create New Order
  endpoint:
    path: /create-new-order
    method: POST
    data_selector: order
    params: {}
- name: cancel_order
  endpoint:
    path: /cancel-order
    method: DEL
    data_selector: order_cancel_request
- name: cancel_order
  endpoint:
    path: /reference/cancel-order
    method: DEL
    data_selector: Order Cancel Request message
- name: mass_cancel_request
  endpoint:
    path: /order-mass-cancel-request
    method: POST
    data_selector: records
- name: Order Mass Cancel Request
  endpoint:
    path: /order-mass-cancel-request
    method: POST
    data_selector: records
    params: {}
- name: execution_report
  endpoint:
    path: /reference/execution-report-8
    method: GET
    data_selector: Execution Report
    params: {}
- name: Execution Report
  endpoint:
    path: /reference/execution-report-8
    method: GET
    data_selector: records
    params: {}
- name: Request for Positions
  endpoint:
    path: /reference/request-for-positions-an
    method: GET
    data_selector: records
    params: {}
- name: Request for Positions
  endpoint:
    path: /reference/request-for-positions-an
    method: GET
    data_selector: records
    params: {}
- name: Position Report
  endpoint:
    path: /reference/request-for-positions-an-copy
    method: GET
    data_selector: records
    params: {}
- name: position_report
  endpoint:
    path: /reference/request-for-positions-an-copy
    method: GET
    data_selector: records
- name: security_definition_request
  endpoint:
    path: /reference/security-definition-request-c
    method: GET
    data_selector: records
    params: {}
- name: Security Definition Request
  endpoint:
    path: /reference/security-definition-request-c
    method: GET
    data_selector: records
- name: Security Definition
  endpoint:
    path: /reference/security-definition
    method: GET
    data_selector: records
    params: {}
- name: Security Definition
  endpoint:
    path: /reference/security-definition
    method: GET
    data_selector: records
    params: {}
- name: SecurityListRequest
  endpoint:
    path: /reference/securitylistrequest-x
    method: GET
    data_selector: records
    params:
      SecurityReqID: '320'
      SecurityListRequestType: '559'
      Currency: '15'
- name: Security List Request
  endpoint:
    path: /reference/securitylistrequest-x
    method: GET
    data_selector: records
    params:
      SecurityReqID: '320'
      SecurityListRequestType: '559'
      Currency: '15'
- name: security_list
  endpoint:
    path: /securitylist
    method: GET
    data_selector: records
    params: {}
- name: security_list
  endpoint:
    path: /securitylist
    method: GET
    data_selector: records
    params: {}
- name: Market Data Request
  endpoint:
    path: /reference/market-data-request-v
    method: GET
    data_selector: records
- name: Market Data Request
  endpoint:
    path: /reference/market-data-request-v
    method: GET
    data_selector: records
    params: {}
- name: snapshot_full_refresh
  endpoint:
    path: /snapshot/full/refresh
    method: GET
    data_selector: records
    params: {}
- name: Snapshot/Full Refresh
  endpoint:
    path: /reference/snapshotfull-refresh-w
    method: GET
    data_selector: records
    params: {}
- name: rfq_quote
  endpoint:
    path: /api/v1/rfq/getQuote
    method: POST
    data_selector: response
    params: {}
- name: rfq_quote
  endpoint:
    path: /api/v1/rfq/getQuote
    method: POST
    data_selector: quote
    params: {}
notes:
- HashKey have now released RFQ API to support our Brokerage business.
- API Key Auto-Expiration after 90 days of inactivity
- Mandatory Two-Factor Authentication for withdrawals if enabled
- All HTTP requests to API endpoints require authentication and authorization.
- A relatively small recvWindow (5000 or less) is recommended!
- 'Recommendation: For enhanced functionality and flexibility, we strongly recommend
  using the new v1.1 endpoint (/api/v1.1/spot/order) for all order creations'
- Create orders in batches up to 20 orders at a time. Currently only support for same
  symbol.
- A return code of `0` indicates the cancel order request has been executed.
- If `result` is null, it means all were successful. If non-empty, it indicates which
  order failed.
- Average price can be calculated by cumulativeQuoteQty / executedQty
- 'Frequency Limit Type: WEIGHT: 5'
- This endpoint should be called no more than once per second.
- Need to grant the account with 'Read/Write Permission - Allow internal transfer'
  authority.
- SCB intra-bank transfers are not supported for now.
- Only master account Master API key can call this interface, sub-accounts will return
  insufficient privilege type error code
- All orders returned are final
- Deposit, Withdrawal failed will not be returned
- Query of trade history supports the past 14 days time range(though the endpoint
  support up to get 7 days data for each request). The other types support maximum
  30 days. Exceeded amount will return error code 'Exceed maximum time range of N
  days'
- Remark can only support up to 128 characters
- Default limit is 500; Max is 1000
- Must get quote before requesting a currency conversion order
- If rfqId is not specified, will return all records.
- 'Limit per page for records - Default: 500, Max: 1000.'
- Ping message format is required every 10 seconds to keep the connection alive.
- If the client has no heartbeat activity for 60 minutes, the session will be closed
  by the server.
- Ping message should be sent every 10 seconds to keep the connection alive.
- If no heartbeat activity for 60 minutes, the session will be closed by the server.
- Update frequency for trade and realtimes is 300ms.
- Update frequency for kline is 500ms.
- A User Data Stream listenKey is valid for 60 minutes after creation.
- Doing a PUT on a listenKey will reset its validity to 60 minutes.
- Doing a DELETE on a listenKey will close the stream and invalidate the listenKey.
- Doing a POST on an account with an active listenKey will return the currently active
  listenKey and extend its validity for 60 minutes.
- Currently only support JSON format.
- Binary format is not yet available
- 'Update frequency: 100ms'
- The subscription to this WebSocket will not immediately push data; it will only
  push trade data when subsequent transaction events occur.
- Private stream can be accessed using listenKey
- '`listenKey` can be obtained from [Create a Listen Key](/reference/create-a-listen-key)'
- 'Sandbox Environment: `wss://stream-pro.sim.hashkeydev.com/api/v1/ws/{listenKey}`'
- 'Production Environment: `wss://stream-pro.hashkey.com/api/v1/ws/{listenKey}`'
- HashKey Exchange supports FIX Protocol version 4.4 and 5.0 SP2.
- All FIX messages must begin with header fields and end with a trailer field.
- Logon message authenticates a user and starts a session.
- The Logon <A> message authenticates a user and starts a session.
- The Heartbeat monitors the status of the communication link.
- FIX message ‘New Order – Single (D)’ is used to submit orders to the HashKey PRO
  Trading system and available only in Trading Gateway
- Unique ID of cancel request as assigned by the client is required.
- If not specified, open orders for all accounts are listed for cancellation
- Required if the scope of mass cancel is for an instrument
- Required for sessions that route to multiple sub-accounts
- MsgType <35> = AP
- MsgType <35> = d
- Minimum cash notional required for Limit order is 10
- Minimum cash notional required for Market order is 10
- This is a Security List API
- Unique identifier for Market Data request
- Indicates to the other party what type of response is expected
- MsgType <35> = W
- 'Weight: 100 times / second'
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck API key validity'
- '429: Rate limit exceeded'
- '418: IP blocked due to repeated 429 errors'
- '4XX: Invalid request content'
- '5XX: Internal system error'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '0000: executed'
- '-2013: Return error code for each unsuccessful order'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Error code
- '200: Success request'
- '0000: Success request'
- '0001: Required field ''%s'' missing or invalid'
- '0001: Incorrect signature'
- '0003: Rate limit exceeded'
- '0102: Invalid APIKey'
- '0103: APIKey expired'
- '0104: accountId is not allowed'
- '0201: Instrument not found'
- '0202: Invalid IP'
- '0206: Unsupported order type'
- '0207: Invalid price'
- '0209: Invalid price precision'
- '0210: Price outside of allowed range'
- '0211: Order not found'
- '0212: Order has already been completed (filled, canceled, etc) or does not exist.'
- '0401: Insufficient asset'
- '-1000: An unknown error occurred while processing the request'
- '-1001: Internal error'
- '-1002: Unauthorized operation'
- '-1004: Bad request'
- '-1005: No permission'
- '-1006: Execution status unknown'
- '-1007: Timeout waiting for response from server'
- '-1014: Unsupported order combination'
- '-1015: Too many new orders, current limit is %s orders per %s'
- '-1020: Unsupported operation'
- '-1021: Timestamp for this request is outside of the recvWindow'
- '-1024: Duplicate request'
- '-1101: Feature has been offline'
- '-1115: Invalid timeInForce'
- '-1117: Invalid order side'
- '-1123: Invalid client order id'
- '-1124: Invalid price'
- '-1126: Invalid quantity'
- '-1129: Invalid parameters, quantity and amount are not allowed to be sent at the
  same time.'
- '-1130: Illegal parameter ''%s'''
- '-1132: Order price greater than the maximum'
- '-1133: Order price lower than the minimum'
- '-1135: Order quantity greater than the maximum'
- '-1136: Order quantity lower than the minimum'
- '-1137: Order quantity precision too large'
- '-1139: Order has been filled'
- '-1140: Order amount lower than the minimum'
- '-1141: Duplicate order'
- '-1142: Order has been cancelled'
- '-1143: Order not found on order book'
- '-1144: Order has been locked'
- '-1145: Cancellation on this order type not supported'
- '-1146: Order creation timeout'
- '-1147: Order cancellation timeout'
- '-1148: Order amount precision too large'
- '-1149: Order creation failed'
- '-1150: Order cancellation failed'
- '-1151: The trading pair is not open yet'
- '-1152: User does not exist'
- '-1153: Invalid price type'
- '-1154: Invalid position side'
- '-1155: The trading pair is not available for api trading'
- '-1156: Limit maker order rejected: Improper price may cause immediate fill.'
- '-1160: Account does not exist'
- '-1161: Balance transfer failed'
- '-1162: Unsupport contract address'
- '-1163: Illegal withdrawal address'
- '-1164: Withdraw failed'
- '-1165: Withdrawal amount cannot be null'
- '-1166: Withdrawal amount exceeds the daily limit'
- '-1167: Withdrawal amount less than the minimum'
- '-1168: Illegal withdrawal amount'
- '-1169: Withdraw not allowed'
- '-1170: Deposit not allowed'
- '-1171: Withdrawal address not in whitelist'
- '-1172: Invalid from account id'
- '-1173: Invalid to account id'
- '-1174: Transfer not allowed between the same account'
- '-1175: Invalid fiat deposit status'
- '-1176: Invalid fiat withdrawal status'
- '-1177: Invalid fiat order type'
- '-1182: The newly whitelisted withdrawal address will take effect in 30 min. Please
  try it later.'
- '-1186: Placing orders via api is not allowed, please check the API permission'
- '-1193: Order creation count exceeds the limit'
- '-1194: Market order creation forbidden'
- '-1200: Order buy quantity too small'
- '-1201: Order buy quantity too large'
- '-1202: Order sell quantity too small'
- '-1203: Order sell quantity too large'
- '-1204: From account must be a main account'
- '-1205: Account not authorized'
- '-1206: Order amount greater than the maximum'
- '-1207: The status of deposit is invalid'
- '-1208: The orderType of fiat is invalid'
- '-1209: The status of withdraw is invalid'
- '-1210: The deposit amount %s must not be less than the minimum deposit amount %s
  %s.'
- '-1211: Withdrawal in progress'
- '-1212: The order of deposit does not exist'
- '-1213: The status of deposit cannot apply refund'
- '-1214: The account of deposit does not exist'
- '-1215: User account status is abnormal'
- '-2010: Limit maker order rejected: Improper price may cause immediate fill.'
- '-2011: Order cancellation rejected'
- '-2016: API key creation exceeds the limit'
- '-2017: Open orders exceeds the limit of the trading pair'
- '-2018: Trade user creation exceeds the limit'
- '-2019: Trader and omnibus user not allowed to login app'
- '-2020: Not allowed to trade this trading pair'
- '-2021: Not allowed to trade this trading pair'
- '-2022: Order batch size exceeds the limit'
- '-2023: Need to pass KYC verification'
- '-2024: Fiat account does not exist'
- '-2025: Custody account not exist'
- '-2026: Invalid type'
- '-2027: Exceed maximum time range of 30 days'
- '-2028: The search is limited to data within the last one month'
- '-2029: The search is limited to data within the last three months'
- '-2030: Order batch size exceeds the limit'
- '-3117: Invalid permission'
- '-3143: Currently, your trading account has exceeded its limit and is temporarily
  unable to perform trades'
- '-3144: Currently, your trading account has exceeded its limit and is temporarily
  unable to perform transfers'
- '-3145: Please DO NOT submit request too frequently'
- '-4000: Invalid bank account number'
- '-4001: Invalid asset'
- '-4002: Withdrawal amount less than the minimum withdrawal amount'
- '-4003: Insufficient Balance'
- '-4004: Invalid bank account number'
- '-4005: Assets are not listed'
- '-4006: Kyc is not certified'
- '-4007: Withdrawal channels are not supported'
- '-4008: This currency does not support this customer type'
- '-4009: No withdrawal permission'
- '-4010: Withdrawals on the same day exceed the maximum limit for a single day'
- '-4011: System error'
- '-4012: Parameter error'
- '-4013: Withdraw repeatedly'
- '-4014: The type of whitelist is invalid'
- '-4016: twoFaToken missing. Please send valid twoFaToken as 2FA is enabled for this
  action'
- '-4017: twoFaToken wrong, please send valid twoFaToken'
- '-4018: twoFaToken used before. Please wait and try again later'
- '-4019: The withdraw exceeded the predefined maximum limit, and has been rejected'
- '-4020: The withdrawal happened during abnormal operation hours, and had been rejected'
- '-5000: Duplicate IN-KIND subscription order'
- '-5001: Fund code is invalid'
- '-5002: Deposit address does not exist'
- '-5003: Invalid address. Please verify'
- '-5004: Signature verification failed because the address had been whitelisted by
  another account.'
- '-5005: Signature verification fails because client submits incorrect signature
  result.'
- '-5006: Signature verification failed because the address had been whitelisted before.'
- '-5011: No Subscription found.'
- '-5012: Unknown subscriptionId'
- '-5013: Subscription failed.'
- '-5021: Only one of ''buyAmount'' or ''sellAmount'' must be specified.'
- '-5022: quoteId expired. Please get a quote again.'
- '-5023: Insufficient Fund Position.'
- '-5024: The amount is below the minimum required: 100 USD or equivalent USD.'
- '-5025: Exceed the maximum buy amount.'
- '-5026: Unsupported Quote Pair.'
- '-5027: Invalid orderId: %s provided.'
- '-5030: The Length of ''%s'' cannot exceed %s'
- '-5031: Unsupported quote pair'
- '-5032: Precision illegal'
- '-5033: Precision illegal'
- '-5034: Fail to generate the clientOrderId'
- '0212: Order has already been completed (filled, canceled, etc) or does not exist.
  Please check the order status to verify'
- '401 Unauthorized: Check API key and permissions'
- '408 Request Timeout: Possibly due to network issues or server unavailability'
- Parameter error!
- Reject <3> message is issued by the server when a message is received but cannot
  be properly processed due to session-level rule.
- Reject message is issued by the server when a message is received but cannot be
  properly processed due to session-level rule.
- '3000: Cone client order id exist'
- '3001: Cone order not found'
- '3008: Cone deposit order not found'
- '3011: Cone withdraw order not found'
- '3018: Cone buy order not allowed'
- '3019: Cone sell order not allowed'
- '3021: Cone order out of memory'
- '3022: Cone history order out of memory'
- '3026: Cone batch order num invalid'
- '3027: Cone max open order exceeded'
- '3033: Cone invalid price too high'
- '3034: Cone invalid price too low'
- '3035: Cone exceed the maximum limit'
- '3036: Cone invalid quantity too high'
- '3037: Cone invalid quantity too low'
- '3038: Cone invalid amount too high'
- '3039: Cone invalid amount too low'
- '3040: Cone invalid order type'
- '3041: Cone unable push market order'
- '3042: Cone order time too slow'
- '3043: Cone order time too fast'
- '3044: Cone order complex order invalid price'
- '3045: Cone max special order exceeded'
- '3046: Cone futures open order not allowed'
- '3047: Cone futures close order not allowed'
- '3048: Cone futures invalid operation order'
- '3052: Cone open order exist'
- '30200: Maximum open orders exceeded'
- '31084: Order has been canceled'
- '31085: Order has been filled'
- '31086: Cannot be found on order book'
- '31087: Order has been locked'
- '31088: This order type does not support cancellation'
- '31089: Cannot be found on order book'
- '31090: Order creation timeout'
- '31091: Order cancellation timeout'
- '31102: In order to protect your assets, please set account password first'
- '32000: Order processing error'
- '32001: Wrong order side'
- '32002: Wrong order type'
- '32003: Duplicate order request'
- '32004: Order does not exist'
- '32005: Create order failed'
- '32006: Cancel order failed'
- '32007: Please enter the price'
- '32008: Please enter the correct price'
- '32009: Please enter the quantity'
- '32010: Please enter the correct quantity'
- '32011: Order filled'
- '32012: Transaction amount too large'
- '32013: Create Marker Order Failed.'
- '32014: Exceed the maximum number of conditional orders of `{0}`'
- '32015: Exceed the maximum number of commissioned orders of `{0}`'
- '32016: Market orders are restricted at present'
- '32017: The order price cannot be below `{0}{1}`'
- '32018: The order price cannot exceed `{0} {1}`'
- '32019: The buy price cannot exceed `{0}` of the marked price'
- '32020: The sell price cannot be below `{0}` of the marked price'
- '32021: The buy quantity cannot be below `{0} {1}`'
- '32022: The buy quantity cannot exceed `{0} {1}`'
- '32023: Cannot exceed the maximum sell price of `{0} {1}`'
- '32024: The sell quantity cannot be below `{0} {1}`'
- '32025: The sell quantity cannot exceed `{0} {1}`'
- '32026: The turnover cannot be below `{0} {1}`'
- '32027: The turnover cannot exceed `{0} {1}`'
- '32028: Cannot be less than the minimum buy price of `{0} {1}`'
- '32029: The buy price cannot exceed `{0}` of the latest price'
- '32030: The sell price cannot be below `{0}` of the latest price'
- '32031: The order price cannot be higher than the trigger price `{0}`'
- '32032: The order price cannot be lower than the trigger price `{0}`'
- '32033: Trading for closing position only supports market price'
- '32034: Trading does not support reverse opening position'
- '32035: Trading for limit order only supports IOC/FOK modes'
- '32036: Trading for trigger order only supports market price'
- '32046: Copy trading follow order failed status'
- '32100: Order sign error'
- '32102: Order price too high'
- '32103: Order price lower than the minimum'
- '32104: Order price decimal exceed precision limit'
- '32105: Order quantity too large'
- '32106: Order quantity lower than the minimum'
- '32107: Order amount decimal exceed precision limit'
- '32108: Order price exceeds permissible range'
- '32113: Order quantity lower than the minimum `{0}`'
- '32123: Price too high, please order again!'
- '32124: Price too low, please order again!'
- '32125: This order price is unreasonable to exceed (or be lower than) the liquidation
  price, this order is not accepted.'
- '32126: Contract order quantity is invalid'
- '32139: Create order rejected'
- '32141: Open order exists'
- '32142: Open order not allow'
- '32143: Close order not allow'
- '32144: Position and order data error'
- '32148: The margin mode cannot be changed while you have an open order/position'
- '32149: Request order size too long'
- '32153: The number of open orders exceeds the limit.'
- '32170: Order price is less than min ask price'
- '32171: Order price is greater than max bid price'
- '32172: Order margin rate less than min margin rate'
- '32173: Order reduce position but open'
- '32174: Order system balance error'
- '32175: Order margin insufficient'
- '32176: Order open value insufficient'
- '32177: Order rejected open margin rate'
- '32178: Order match rejected'
- '32179: Order time expired'
- '32301: Invalid plan order type'
- '32302: Create stop profit-loss plan order reject, make sure is close.'
- '32401: Fail to create order: untriggered stop-limit order of this pair reached
  upper limit.'
- '32402: Fail to create order: exceed the total balance of the asset.'
- '32403: Fail to create order: this trading pair does not support stop-limit orders.'
- '33001: Insufficient account balance'
- '36014: This order cannot be canceled'
- '41103: The same type of ad order has not finished, the new ad can''t be post yet'
- '41200: Order no longer exist'
- '41302: User placed an order, but payment type does not match OTC merchant payment
  type'
- '42001: Order Failed'
- '42006: Due to excessive cancellation of your order, your trading is suspended today'
- '42020: Only one order is allowed at the same time!'
- '42037: The order already exists. Please wait for the payment result.'
- '43001: Order payment failed, please try again later'
- '43002: client_order_id parameter value exceeds length limit'
- '-32183: Unsupported ClOrdID (11)'
- '-32184: CIOrdID no more than 20 characters'
- '-32185: Invalid accountID'
- '-32186: Invalid accountID (1)'
- '-32187: Unsupported OrderType (40)'
- '-32188: Invalid symbol (55)'
- '-32189: Unsupported Side (54)'
- '-32190: Maker flag value error:market order can only be taker'
- '-32191: Unsupported OrderQty (38)'
- '-32192: Unsupported CashOrderQty or OrderQty (152)'
- 'Business Message Reject <j>: Check the message format or required fields'
- 'Error Codes: Refer to the documentation for specific error handling'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api-pro.sim.hashkeydev.com
  auth:
    type: oauth2
source_metadata: null
