resources:
- name: payment
  endpoint:
    path: /api/v2/pos/payment/<idPayment>
    method: GET
    data_selector: MethodCallRequest
    params: {}
- name: poll
  endpoint:
    path: /api/v2/pos/poll
    method: POST
    data_selector: MethodCallRequest
    params: {}
- name: poll
  endpoint:
    path: /api/v2/pos/poll
    method: POST
    data_selector: MethodCallRequest
    params: {}
- name: payment
  endpoint:
    path: /api/v2/pos/payment/<idPayment>
    method: GET
    data_selector: MethodCallRequest
    params: {}
- name: payment_capture
  endpoint:
    path: /api/v2/pos/payment/<idPayment>/capture
    method: POST
    data_selector: MethodCallRequest
    params: {}
- name: ping
  endpoint:
    path: /webhooks/ping
    method: POST
- name: error
  endpoint:
    path: /webhooks/error
    method: POST
- name: who_am_i
  endpoint:
    path: /who-am-i
    method: POST
- name: configure
  endpoint:
    path: /configure
    method: POST
- name: who_am_i
  endpoint:
    path: /who-am-i
    method: POST
    data_selector: response
    params: {}
- name: configure
  endpoint:
    path: /configure
    method: POST
    data_selector: response
    params: {}
- name: ping
  endpoint:
    path: /webhooks/ping
    method: POST
    data_selector: response
    params: {}
- name: error
  endpoint:
    path: /webhooks/error
    method: POST
    data_selector: response
    params: {}
- name: getBill
  endpoint:
    path: /api/v1/getBill
    method: POST
    data_selector: Bill
- name: getPostponedReceipt
  endpoint:
    path: /api/v1/getPostponedReceipt
    method: POST
    data_selector: Receipt
- name: getTableList
  endpoint:
    path: /api/v1/getTableList
    method: GET
    data_selector: Table[]
- name: getTableContents
  endpoint:
    path: /api/v1/getTableContents
    method: POST
    data_selector: Bill[]
- name: paymentStart
  endpoint:
    path: /api/v1/paymentStart
    method: POST
    data_selector: null | PaymentOptions
- name: paymentProcessed
  endpoint:
    path: /api/v1/paymentProcessed
    method: POST
    data_selector: Receipt
- name: paymentClosed
  endpoint:
    path: /api/v1/paymentClosed
    method: POST
    data_selector: 'null'
- name: cancelPayment
  endpoint:
    path: /api/v1/cancelPayment
    method: POST
    data_selector: 'null'
- name: capturePayment
  endpoint:
    path: /api/v1/capturePayment
    method: POST
    data_selector: 'null'
- name: getPayment
  endpoint:
    path: /api/v1/getPayment
    method: GET
    data_selector: Payment
- name: error
  endpoint:
    path: /api/v1/error
    method: POST
    data_selector: 'null'
- name: noop
  endpoint:
    path: /api/v1/noop
    method: GET
    data_selector: 'null'
- name: getBill
  endpoint:
    path: /getBill
    method: GET
    data_selector: Bill
    params: {}
- name: getPostponedReceipt
  endpoint:
    path: /getPostponedReceipt
    method: GET
    data_selector: Receipt
    params: {}
- name: getTableList
  endpoint:
    path: /getTableList
    method: GET
    data_selector: Table
    params: {}
- name: getTableContents
  endpoint:
    path: /getTableContents
    method: GET
    data_selector: Bill
    params: {}
- name: paymentStart
  endpoint:
    path: /paymentStart
    method: POST
    data_selector: 'null'
    params: {}
- name: paymentProcessed
  endpoint:
    path: /paymentProcessed
    method: POST
    data_selector: Receipt
    params: {}
- name: paymentClosed
  endpoint:
    path: /paymentClosed
    method: POST
    data_selector: 'null'
    params: {}
- name: calculateUpcharges
  endpoint:
    path: /calculateUpcharges
    method: POST
    data_selector: CalculatedBillUpcharge
    params: {}
- name: cancelPayment
  endpoint:
    path: /cancelPayment
    method: POST
    data_selector: 'null'
    params: {}
- name: capturePayment
  endpoint:
    path: /capturePayment
    method: POST
    data_selector: 'null'
    params: {}
- name: getPayment
  endpoint:
    path: /getPayment
    method: GET
    data_selector: Payment
    params: {}
- name: error
  endpoint:
    path: /error
    method: POST
    data_selector: 'null'
    params: {}
- name: noop
  endpoint:
    path: /noop
    method: GET
    data_selector: 'null'
    params: {}
- name: bill
  endpoint:
    path: /api/v1/bills
    method: GET
    data_selector: bills
    params: {}
- name: payment
  endpoint:
    path: /api/v1/payments
    method: POST
    data_selector: payments
    params: {}
- name: bill
  endpoint:
    path: /api/bills
    method: GET
    data_selector: bills
- name: payment
  endpoint:
    path: /api/payments
    method: POST
    data_selector: payments
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: payment
    params: {}
- name: paymentOptions
  endpoint:
    path: /paymentOptions
    method: GET
    data_selector: paymentOptions
    params: {}
- name: receipt
  endpoint:
    path: /receipt
    method: GET
    data_selector: receipt
    params: {}
- name: taxInfo
  endpoint:
    path: /taxInfo
    method: GET
    data_selector: taxInfo
    params: {}
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: payment
    params: {}
- name: paymentOptions
  endpoint:
    path: /paymentOptions
    method: GET
    data_selector: paymentOptions
    params: {}
- name: receipt
  endpoint:
    path: /receipt
    method: GET
    data_selector: receipt
    params: {}
- name: table
  endpoint:
    path: /table
    method: GET
    data_selector: table
    params: {}
- name: orderPrepare
  endpoint:
    path: /orderPrepare
    method: POST
- name: orderStart
  endpoint:
    path: /orderStart
    method: POST
- name: orderMarkAsPaid
  endpoint:
    path: /orderMarkAsPaid
    method: POST
- name: orderClose
  endpoint:
    path: /orderClose
    method: POST
- name: updateQerkoOrderStatus
  endpoint:
    path: /updateQerkoOrderStatus
    method: POST
- name: getMealMenus
  endpoint:
    path: /getMealMenus
    method: GET
    data_selector: meals
    params: {}
- name: updateMenus
  endpoint:
    path: /updateMenus
    method: POST
    data_selector: result
    params: {}
- name: orderPrepare
  endpoint:
    path: /orderPrepare
    method: POST
    data_selector: order
    params: {}
- name: orderStart
  endpoint:
    path: /orderStart
    method: POST
    data_selector: orderStatus
    params: {}
- name: orderMarkAsPaid
  endpoint:
    path: /orderMarkAsPaid
    method: POST
    data_selector: paymentStatus
    params: {}
- name: orderClose
  endpoint:
    path: /orderClose
    method: POST
    data_selector: closureStatus
    params: {}
- name: updateQerkoOrderStatus
  endpoint:
    path: /updateQerkoOrderStatus
    method: POST
    data_selector: statusUpdate
    params: {}
- name: getMealMenus
  endpoint:
    path: /getMealMenus
    method: GET
    data_selector: menus
    params: {}
- name: orderPrepare
  endpoint:
    path: /orderPrepare
    method: POST
    data_selector: result
    params: {}
- name: orderStart
  endpoint:
    path: /orderStart
    method: POST
    data_selector: result
    params: {}
- name: orderMarkAsPaid
  endpoint:
    path: /orderMarkAsPaid
    method: POST
    data_selector: result
    params: {}
- name: orderClose
  endpoint:
    path: /orderClose
    method: POST
    data_selector: result
    params: {}
- name: orderStatus
  endpoint:
    path: /orderStatus
    method: POST
    data_selector: result
    params: {}
- name: getResource
  endpoint:
    path: /getResource
    method: POST
    data_selector: result
    params: {}
- name: getMealMenus
  endpoint:
    path: /getMealMenus
    method: GET
    data_selector: result.menus
    params: {}
- name: orderPrepare
  endpoint:
    path: /orderPrepare
    method: POST
    data_selector: result
    params: {}
- name: orderStart
  endpoint:
    path: /orderStart
    method: POST
    data_selector: result
    params: {}
- name: orderMarkAsPaid
  endpoint:
    path: /orderMarkAsPaid
    method: POST
    data_selector: result
    params: {}
- name: orderClose
  endpoint:
    path: /orderClose
    method: POST
    data_selector: result
    params: {}
- name: orderStatus
  endpoint:
    path: /orderStatus
    method: POST
    data_selector: result
    params: {}
- name: getResource
  endpoint:
    path: /getResource
    method: POST
    data_selector: result
    params: {}
- name: updateMenus
  endpoint:
    path: /api/v2/pos/update-menus
    method: POST
    data_selector: result
- name: updateQerkoOrderStatus
  endpoint:
    path: /api/v2/pos/update-qerko-order-status
    method: POST
    data_selector: result
- name: getQerkoOrderStatus
  endpoint:
    path: /api/v2/pos/get-qerko-order-status
    method: POST
    data_selector: result
- name: updateMenus
  endpoint:
    path: /api/v2/pos/update-menus
    method: POST
    data_selector: null
    params: {}
- name: updateQerkoOrderStatus
  endpoint:
    path: /api/v2/pos/update-qerko-order-status
    method: POST
    data_selector: null
    params: {}
- name: getQerkoOrderStatus
  endpoint:
    path: /api/v2/pos/get-qerko-order-status
    method: POST
    data_selector: null
    params: {}
- name: OrderableTimeSlot
  endpoint:
    path: /OrderableTimeSlot
    method: GET
    data_selector: OrderableTimeSlots
- name: OrderDeliveryByOperator
  endpoint:
    path: /OrderDeliveryByOperator
    method: GET
    data_selector: OrderDeliveryByOperators
- name: OrderDeliveryByCustomer
  endpoint:
    path: /OrderDeliveryByCustomer
    method: GET
    data_selector: OrderDeliveryByCustomers
- name: OrderDeliveryToTable
  endpoint:
    path: /OrderDeliveryToTable
    method: GET
    data_selector: OrderDeliveryToTables
- name: OrderDeliveryToBill
  endpoint:
    path: /OrderDeliveryToBill
    method: GET
    data_selector: OrderDeliveryToBills
- name: Payment
  endpoint:
    path: /Payment
    method: GET
    data_selector: Payments
- name: Receipt
  endpoint:
    path: /Receipt
    method: GET
    data_selector: Receipts
- name: DeliveryInfo
  endpoint:
    path: /DeliveryInfo
    method: GET
    data_selector: DeliveryInfos
- name: OrderableTimeSlot
  endpoint:
    path: /orderableTimeSlot
    method: GET
    data_selector: records
- name: OrderDeliveryByOperator
  endpoint:
    path: /orderDeliveryByOperator
    method: GET
    data_selector: records
- name: OrderDeliveryByCustomer
  endpoint:
    path: /orderDeliveryByCustomer
    method: GET
    data_selector: records
- name: OrderDeliveryToTable
  endpoint:
    path: /orderDeliveryToTable
    method: GET
    data_selector: records
- name: OrderDeliveryToBill
  endpoint:
    path: /orderDeliveryToBill
    method: GET
    data_selector: records
- name: Payment
  endpoint:
    path: /payment
    method: GET
    data_selector: records
- name: Receipt
  endpoint:
    path: /receipt
    method: GET
    data_selector: records
- name: DeliveryInfo
  endpoint:
    path: /deliveryInfo
    method: GET
    data_selector: records
- name: searchBill
  endpoint:
    path: /searchBills
    method: GET
    data_selector: Bill[]
    params: {}
- name: searchBill
  endpoint:
    path: /searchBills
    method: GET
    data_selector: Bill[]
    params: {}
- name: authorizeLoyaltyCard
  endpoint:
    path: /api/v2/card-authority/authorize-loyalty-card
    method: POST
- name: loyaltyCardAuthorizationFinished
  endpoint:
    path: /api/v2/card-authority/loyalty-card-authorization-finished
    method: POST
- name: startIndividualBill
  endpoint:
    path: /api/v2/card-authority/start-individual-bill
    method: POST
- name: updateIndividualBill
  endpoint:
    path: /api/v2/card-authority/update-individual-bill
    method: POST
- name: cancelIndividualBill
  endpoint:
    path: /api/v2/card-authority/cancel-individual-bill
    method: POST
- name: authorizeLoyaltyCard
  endpoint:
    path: /api/v2/card-authority/authorize-loyalty-card
    method: POST
    data_selector: AuthorizationResponse
    params: {}
- name: loyaltyCardAuthorizationFinished
  endpoint:
    path: /api/v2/card-authority/loyalty-card-authorization-finished
    method: POST
    data_selector: 'null'
    params: {}
- name: startIndividualBill
  endpoint:
    path: /api/v2/card-authority/start-individual-bill
    method: POST
    data_selector: IndividualBillData
    params: {}
- name: updateIndividualBill
  endpoint:
    path: /api/v2/card-authority/update-individual-bill
    method: POST
    data_selector: IndividualBillData
    params: {}
- name: cancelIndividualBill
  endpoint:
    path: /api/v2/card-authority/cancel-individual-bill
    method: POST
    data_selector: 'null'
    params: {}
- name: whoAmI
  endpoint:
    path: /api/v2/pos/who-am-i
    method: GET
- name: whoAmI
  endpoint:
    path: /api/v2/pos/who-am-i
    method: GET
    data_selector: Restaurant
notes:
- Qerko is an open platform that makes paying at restaurants fast, easy, and comfortable.
- Send the API key in the Authorization HTTP header with every request. The value
  should be prefixed with Bearer.
- Each restaurant gets its own API key. You’ll need this for authorization.
- All POS systems are required to use a Pos-Id. This is a unique identifier for every
  vendor.
- Contact techsupport@qerko.com to configure orders for you. Orders are not part of
  the default configuration.
- Orders are not part of the default configuration.
- Each restaurant can have only one dedicated connection to Qerko.
- Do not use websocket and long-polling at once.
- Webhook signature mismatches are treated by POS with **`401`** HTTP status code
- Both [“synchronous”](#synchronous-flow) and [“asynchronous”](#asynchronous-flow)
  responses are subjected to 15 second timeouts
- Webhook calls are considered stale after 15 seconds of not receiving reply
- Both synchronous and asynchronous responses are subjected to 15 second timeouts
- Qerko supports both WebSocket and REST API methods.
- This API supports various payment methods and integration with POS systems.
- Ensure to allow Qerko to send additional properties in data structures.
- Uses OAuth2 with refresh token — requires setup of connected app in Qerko
- Ensure to handle the additional properties in data structures.
- The total amount on the receipt will be the sum of item prices.
- Delivery byOperator is not ready yet. If you want to use it, please contact Qerko.
- Qerko syncs menu every 2 minutes if there is a customer asking for the menu.
- Offering discounts and upsells is not ready in this moment. Please contact Qerko
  if you want to use this feature.
- 'Beware: setting the order to `Cancelled` status is irreversible and will return
  money to the customer.'
- The card authority must add query parameters token and signature when redirecting
  to the callback URL.
- The card authority should call the loyaltyCardAuthorizationFinished method with
  response.result = PENDING when the response is not final.
- Qerko can be used as a payment method on your own e-shop.
errors:
- '400 Bad Request: You have sent something wrong'
- '401 Unauthorized: Invalid API key, or Pos-Id'
- '409 Conflict: Server ends connection because another concurrent connection has
  been open to the same restaurant'
- '503 Service Unavailable: Server is about to be restarted. Try again in 2 minutes'
- '503 Service Unavailable: server is about to be restarted. Try again in 2 minutes.'
- '1001 Going Away: Our server needs to restart the connection. You should try to
  reconnect immediately.'
- '4503 Service Unavailable: server is about to be restarted. Try again in 2 minutes.'
- '4401 Unauthorized: invalid API key, or Pos-Id.'
- '4409 Conflict: server ends connection because another concurrent connection has
  been open to the same restaurant.'
- '503 Service Unavailable: Try again in 2 minutes.'
- '1001 Going Away: Try to reconnect immediately.'
- '4503 Service Unavailable: Try again in 2 minutes.'
- '4401 Unauthorized: Invalid API key or Pos-Id.'
- '4409 Conflict: Another concurrent connection has been open.'
- '401 Unauthorized: Recheck API key or authorization headers'
- '400 Bad Request: Ensure request matches specs'
- '410 Gone: Incorrect timing in webhook invocation'
- '500 Internal Server Error: Server errors from POS webhook calls'
- '400 Bad Request: Ensure request data matches Qerko specs'
- '500 Internal Server Error: Automatically retried up to 3 times'
- '401 Unauthorized: Invalid API key or unauthorized access'
- '400 Bad Request: Incorrect data shape'
- '410 Gone: Request timing issues'
- '500 Internal Server Error: Server error on POS webhook calls'
- '401 Unauthorized: Recheck API key or Pos-Id'
- '400 Bad Request: Incorrect data shape in request'
- 'BILL_CLOSED: Qerko has requested a closed bill.'
- 'BILL_NOT_FOUND: Qerko sent an invalid id.'
- '400 Bad Request: Check the request parameters and data structure.'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: The requested resource could not be found.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'null: Unknown error.'
- 'ACCESS_DENIED: Access to the respective item was denied. Ex: when you try to cancel
  a payment which belongs to another restaurant.'
- 'ALREADY_AUTHORIZED: When POS sends auth-request when already authorized'
- 'BAD_PARAMETER: A parameter in the incoming payload is invalid.'
- 'BAD_PAYLOAD: Server can not parse the incoming payload.'
- 'NO_SUCH_METHOD: Received MethodCallRequest.method is unknown.'
- 'NOT_FOUND: Requested item was not found. Ex: POS sent invalid idPayment to the
  getPayment(…) method'
- 'POS_BLOCKED: Pos-Id is valid, but access is denied. Usually to prevent further
  damage, because we have identified an error in your implementation.'
- 'POS_UNKNOWN: Pos-Id is invalid.'
- 'TIME_LIMIT_EXPIRED: When you try to cancel a payment after the allowed time limit.'
- 'UNAUTHORIZED: Api-Key is invalid.'
- 'NOT_FOUND: Requested item was not found. Ex: POS sent invalid idPayment to the
  method.'
- 'OrderWaiting: The order is waiting for restaurant personnel to accept it.'
- 'OrderPreparing: The order is accepted and the cook is working on it.'
- 'ReadyForPickUp: The order is waiting for the customer/operator to pick it up.'
- 'Completed: The order is completed and picked up/sent.'
- 'Cancelled: The order is cancelled.'
- ITEM_NOT_AVAILABLE
- INVALID_ITEM_PRICE
- BILL_LOCKED
- BILL_NOT_FOUND
- TABLE_NOT_FOUND
- BILL_CLOSED
- 'NOT_FOUND: We couldn’t find specified order.'
- 'NOT_FOUND: We couldn’t find specified order. For POS it means that the order is
  cancelled.'
- 'INVALID_LOYALTY_CARD_TOKEN: The Qerko app will announce that the loyalty card is
  invalid and suggest the customer reauthorize it.'
- 'BILL_NOT_CUSTOMIZABLE: The Qerko app will announce that the loyalty card cannot
  be used with this bill.'
- '401: invalid API key'
- 'ACCESS_DENIED: Check permissions'
- 'ALREADY_AUTHORIZED: Token already valid'
- 'NO_SUCH_METHOD: Check the method name'
- 'NOT_FOUND: Resource not found'
- 'TIME_LIMIT_EXPIRED: Request time limit exceeded'
auth_info:
  mentioned_objects: []
client:
  base_url: https://sandbox.qerko.com
  auth:
    type: apikey
    location: header
    header_name: Authorization
  headers:
    Accept-Language: en
    Content-Type: application/json
source_metadata: null
