resources:
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/list_users
    method: GET
    data_selector: users
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /list_users
    method: GET
- name: site_definition
  endpoint:
    path: /export/site_definition
    method: GET
    data_selector: site_definitions
    params: {}
- name: project
  endpoint:
    path: /t/creating-a-wappler-project-based-on-existing-git-repository/25996
    method: GET
- name: Reset Frameworks
  endpoint:
    path: /how-to/reset-your-project-default-frameworks
    method: GET
- name: modal_properties
  endpoint:
    path: /modal/properties
    method: GET
    data_selector: properties
    params: {}
- name: event
  endpoint:
    path: /event
    method: POST
    data_selector: events
    params: {}
- name: delete_database_records
  endpoint:
    path: /delete-database-records
    method: POST
- name: delete_record
  endpoint:
    path: /delete
    method: POST
    data_selector: result
    params:
      clientid: clientid
- name: page_preloader
  endpoint:
    path: /t/applying-a-page-preloader/2875
    method: GET
- name: Toggle Component
  endpoint:
    path: /toggle-component
    method: GET
- name: event
  endpoint:
    path: /events
    method: GET
    data_selector: records
- name: countries
  endpoint:
    path: /api/countries
    method: GET
    data_selector: countries
    params: {}
- name: countries
  endpoint:
    path: /database/query/countries
    method: GET
    data_selector: countries
    params: {}
- name: Displaying a Confirmation Dialog on Form Submit
- name: Deleting Database Records with Confirmation
- name: products
  endpoint:
    path: /products
    method: INSERT
    data_selector: categories
    params: {}
- name: delete_database_records
  endpoint:
    path: /delete-database-records
    method: DELETE
- name: delete_record
  endpoint:
    path: /delete
    method: POST
    data_selector: records
    params:
      clientid: clientid
- name: meetings
  endpoint:
    path: /api/meetings
    method: POST
    data_selector: data
    params: {}
- name: tagify
  endpoint:
    path: /tagify/setup
    method: POST
    data_selector: data
    params: {}
- name: category_insert
  endpoint:
    path: /category_insert
    method: GET
    data_selector: records
    params: {}
- name: App Connect Flow Component
  endpoint:
    path: /components/AppConnectFlow
    method: GET
    data_selector: workflow
    params: {}
- name: Action Scheduler
  endpoint:
    path: /components/ActionScheduler
    method: GET
    data_selector: scheduler
    params:
      interval: '5'
- name: countries
  endpoint:
    path: /api/countries
    method: GET
    data_selector: countries
    params: {}
- name: records
  endpoint:
    path: /api/records
    method: POST
- name: products
  endpoint:
    path: /products
    method: POST
    data_selector: data
    params: {}
- name: Creating Custom SQL Queries
  endpoint:
    path: /t/creating-custom-sql-queries/10653
    method: GET
- name: Custom SQL Queries
  endpoint:
    path: /custom/sql/queries
    method: POST
    data_selector: results
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: records
    params: {}
- name: Database Single Query
  endpoint:
    path: /t/database-single-query
    method: GET
    data_selector: records
    params: {}
- name: category_insert
  endpoint:
    path: /category_insert
    method: GET
    data_selector: ''
    params:
      category: ''
- name: blog_posts
  endpoint:
    path: /t/creating-sub-tables-with-database-manager/40721
    method: GET
    data_selector: nested_data
    params: {}
- name: courses
  endpoint:
    path: /courses
    method: GET
    data_selector: records
- name: Database
  endpoint:
    path: /t/connecting-to-a-database/2873
    method: GET
- name: records
  endpoint:
    path: /api/records
    method: GET
    data_selector: results
- name: product_details
  endpoint:
    path: /product_details
    method: GET
    data_selector: records
    params:
      productid: lowercase
- name: Creating Custom SQL Queries
  endpoint:
    path: /t/creating-custom-sql-queries/10653
    method: GET
- name: database_custom_query
  endpoint:
    path: /database/custom/query
    method: POST
    data_selector: results
    params: {}
- name: Dynamic Paging
  endpoint:
    path: /t/applying-dynamic-paging/2865
    method: GET
- name: blog_posts
  endpoint:
    path: /api/v1/blog_posts
    method: GET
    data_selector: records
    params: {}
- name: comments
  endpoint:
    path: /api/v1/comments
    method: GET
    data_selector: records
    params: {}
- name: insert_database_record
  endpoint:
    path: /t/insert-database-record
    method: GET
- name: courses
  endpoint:
    path: /courses_list
    method: GET
    data_selector: records
- name: inserted_record_id
  endpoint:
    path: /t/get-inserted-record-id
    method: GET
- name: Delete Database Records
  endpoint:
    path: /delete-database-records
    method: DELETE
- name: product_details
  endpoint:
    path: /product_details
    method: GET
    data_selector: records
    params:
      productid: productid
- name: delete
  endpoint:
    path: /delete
    method: POST
    data_selector: records
- name: sending_form_data_to_email
  endpoint:
    path: /t/sending-form-data-to-email
    method: GET
- name: formtoemail
  endpoint:
    path: /send-email
    method: POST
    data_selector: response
    params: {}
- name: records_paged
  endpoint:
    path: /your/database/connection/path
    method: GET
    data_selector: records
    params:
      offset: offset
- name: category
  endpoint:
    params:
      category: array
- name: dynamic_sortable_table
  endpoint:
    path: /dynamic/sortable/table
    method: GET
    data_selector: records
- name: Generating UUID
  endpoint:
    path: /t/generating-an-unique-uuid-identifier/36568
    method: GET
- name: database_records
  endpoint:
    path: /server/action
    method: GET
    data_selector: records
    params: {}
- name: Set Value
  endpoint:
    path: /using-set-value-in-server-connect
    method: GET
- name: Insert Database Record
  endpoint:
    path: /insert-database-record
    method: POST
- name: inserted_record_id
  endpoint:
    path: /t/get-inserted-record-id/
    method: GET
    data_selector: record_id
    params: {}
- name: sending_a_value_for_unchecked_checkbox
  endpoint:
    path: /t/sending-a-value-for-unchecked-checkbox-on-database-insert-update/36365
- name: delete_database_records
  endpoint:
    path: /delete-database-records
    method: DELETE
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: delete
  endpoint:
    path: /delete
    method: POST
- name: Sending Form Data to Email
  endpoint:
    path: /t/sending-form-data-to-email/2858
    method: GET
- name: formtoemail
  endpoint:
    path: /mailer/send
    method: POST
    data_selector: form_data
    params: {}
- name: category
  endpoint:
    params:
      name: category
- name: header
  endpoint:
    path: /header.php
    method: POST
    data_selector: include
    params: {}
- name: session_variables
  endpoint:
    path: /t/using-session-variables/3320
    method: GET
- name: Create Array List
  endpoint:
    path: /createArrayList
    method: POST
    data_selector: arrayList
    params: {}
- name: Get Array List Value
  endpoint:
    path: /getArrayListValue
    method: GET
    data_selector: arrayListValue
    params: {}
- name: Add in Array List
  endpoint:
    path: /addInArrayList
    method: POST
    data_selector: addResult
    params: {}
- name: Add All in Array List
  endpoint:
    path: /addAllInArrayList
    method: POST
    data_selector: addAllResult
    params: {}
- name: Clear Array List
  endpoint:
    path: /clearArrayList
    method: POST
    data_selector: clearResult
    params: {}
- name: Sort Array List
  endpoint:
    path: /sortArrayList
    method: POST
    data_selector: sortResult
    params: {}
- name: Array List Size
  endpoint:
    path: /arrayListSize
    method: GET
    data_selector: sizeResult
    params: {}
- name: Remove Array List Item
  endpoint:
    path: /removeArrayListItem
    method: POST
    data_selector: removeResult
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: upload_file
  endpoint:
    path: /upload
    method: POST
    data_selector: file
    params: {}
- name: upload_single_file
  endpoint:
    path: /upload/single-file
    method: POST
    data_selector: fileUploadResponse
    params: {}
- name: Database Connections
  endpoint:
    path: /globals/database-connections
    method: GET
    data_selector: connections
- name: Global Steps
  endpoint:
    path: /globals/steps
    method: GET
    data_selector: steps
- name: progress_bar
  endpoint:
    path: /uploadProgress
    method: GET
    data_selector: percent
    params: {}
- name: uploaded_file_names
  endpoint:
    path: /inserting-uploaded-file-names-in-a-database
    method: GET
- name: first_database_query
  endpoint:
    path: /first/database/query
    method: GET
    data_selector: orders
    params: {}
- name: second_database_query
  endpoint:
    path: /second/database/query
    method: GET
    data_selector: product_details
    params: {}
- name: upload_multiple_files
  endpoint:
    path: /upload/multiple-files
    method: POST
    data_selector: files
    params: {}
- name: insert_multiple_file_names
  endpoint:
    path: /insert/multiple-file-names
    method: POST
    data_selector: fileNames
    params: {}
- name: file_names
  endpoint:
    path: /inserting/multiple/file/names/in/database
    method: POST
    data_selector: records
- name: Array List Components
  endpoint:
    path: /array-list/components
    method: GET
    data_selector: components
    params: {}
- name: listing_files
  endpoint:
    path: /listing-files
    method: GET
    data_selector: files
- name: Resize Image and Create a Thumbnail on Upload
  endpoint:
    path: /resize-image-and-create-a-thumbnail-on-upload
    method: GET
- name: check_if_database_record_exists
  endpoint:
    path: /t/check-if-a-database-record-already-exists-before-inserting-a-new-entry/2847
    method: GET
- name: file_download
  endpoint:
    path: /file/download
    method: GET
    data_selector: file
    params: {}
- name: custom_file_downloader
  endpoint:
    path: /custom-file-downloader
    method: GET
    data_selector: files
    params: {}
- name: upload_single_file
  endpoint:
    path: /upload/single
    method: POST
- name: upload_multiple_files
  endpoint:
    path: /upload/multiple
    method: POST
- name: upload_file
  endpoint:
    path: /upload/file
    method: POST
- name: Adding Progress Bar to Upload Form
  endpoint:
    path: /t/adding-progress-bar-to-upload-form/4271
    method: GET
- name: Single User
  endpoint:
    path: /path/to/single_user
    method: POST
    data_selector: user_data
    params: {}
- name: Static Users List
  endpoint:
    path: /path/to/static_users
    method: POST
    data_selector: users_data
    params: {}
- name: Database Users
  endpoint:
    path: /path/to/database_users
    method: POST
    data_selector: db_users_data
    params: {}
- name: login
  endpoint:
    path: /api/login
    method: POST
    data_selector: response
    params: {}
- name: Inserting Uploaded File Names in a Database
  endpoint:
    path: /inserting-uploaded-file-names-in-a-database
    method: POST
- name: Uploading Single File
  endpoint:
    path: /uploading-single-file-to-your-server
    method: POST
- name: Uploading Multiple Files
  endpoint:
    path: /uploading-multiple-files-to-your-server
    method: POST
- name: upload_multiple_files
  endpoint:
    path: /upload/multiple/files
    method: POST
- name: upload_multiple_files
  endpoint:
    path: /upload/multiple/files
    method: POST
- name: listing_files
  endpoint:
    path: /listing-files-from-a-folder-on-your-server
    method: GET
- name: Resize Image and Create a Thumbnail on Upload
  endpoint:
    path: /resize-image-and-create-a-thumbnail-on-upload
    method: POST
- name: dropzone
  endpoint:
    path: /using-the-dropzone-component
    method: GET
- name: file-upload
  endpoint:
    path: /file-upload-server-action
    method: POST
- name: File Downloads
  endpoint:
    path: /file-downloads
    method: GET
    data_selector: downloads
    params: {}
- name: logged_in_user
  endpoint:
    path: /getting-details-of-the-logged-in-user
    method: GET
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: userDetails
- name: custom_file_downloader
  endpoint:
    path: /custom/file/downloader
    method: GET
    data_selector: data
    params: {}
- name: password_reset_request
  endpoint:
    path: /request-password-reset
    method: POST
    data_selector: response
- name: request_new
  endpoint:
    path: /Passwords/request_new
    method: POST
- name: SingleUser
  endpoint:
    path: /add/single-user
    method: POST
- name: StaticUsersList
  endpoint:
    path: /add/static-users-list
    method: POST
- name: DatabaseUsers
  endpoint:
    path: /add/database-users
    method: POST
- name: password_reset
  endpoint:
    path: /reset_password
    method: POST
    data_selector: form_data
    params:
      id: url_id
      email: url_email
- name: password_update
  endpoint:
    path: /update_password
    method: POST
- name: login
  endpoint:
    path: /api/login
    method: POST
    data_selector: data
    params: {}
- name: register_new_user
  endpoint:
    path: /register-new-user
    method: POST
    data_selector: user
    params: {}
- name: auto_login
  endpoint:
    path: /auto-login
    method: GET
    data_selector: session
    params: {}
- name: userdetails
  endpoint:
    path: /user/roles
    method: GET
    data_selector: roles
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: Security - Restricting Access to Your Page
  endpoint:
    path: /t/security-restricting-access-to-your-page/2853
    method: GET
- name: user_info
  endpoint:
    path: /v12.0/me
    method: GET
    data_selector: data
    params:
      fields: email
- name: Logout
  endpoint:
    path: /logout-create-a-working-user-logout-button
    method: GET
- name: user
  endpoint:
    path: /user
    method: GET
- name: Logged User Session Name
  endpoint:
    path: /t/logged-user-session-name/3319
    method: GET
- name: Password Reset Functionality - Part 1
  endpoint:
    path: /t/password-reset-functionality-part-1/4943
    method: GET
- name: Password Reset Functionality - Part 2
  endpoint:
    path: /t/password-reset-functionality-part-2/5160
    method: GET
- name: userinfo
  endpoint:
    path: /oauth2/v3/userinfo
    method: GET
    data_selector: data
    params:
      fields: email
- name: password_reset
  endpoint:
    path: /request_password_reset
    method: POST
    data_selector: email
    params:
      validation: required
- name: request_new
  endpoint:
    path: /Passwords/request_new
    method: POST
- name: Password Reset Functionality
  endpoint:
    path: /t/password-reset-functionality-part-2
    method: GET
- name: password_reset
  endpoint:
    path: /password/reset
    method: POST
    data_selector: records
    params:
      id: id
      email: email
- name: shopping_cart
  endpoint:
    path: /services/data/store/cart
    method: POST
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: register_new_user
  endpoint:
    path: /register/new/user
    method: POST
- name: auto_login
  endpoint:
    path: /auto/login
    method: GET
- name: data-source
  endpoint:
    path: /api/data-source
    method: GET
    data_selector: data
    params: {}
- name: user_info
  endpoint:
    path: /v12.0/me
    method: GET
    data_selector: data
    params:
      fields: email
- name: home_page
  endpoint:
    path: /home
    method: GET
    data_selector: content
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: login_google
  endpoint:
    path: /api/login_google
    method: GET
- name: Get Photos
  endpoint:
    path: /camera/getPhotos
    method: POST
    data_selector: photos
    params:
      image_width: 800
      quality: 90
      source: prompt
      result_type: dataUrl
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: cookie_consent_alert
  endpoint:
    path: /t/creating-a-cookie-consent-alert/18543
    method: GET
- name: shopping_cart
  endpoint:
    path: /v1/checkout/sessions
    method: POST
    data_selector: data
    params: {}
- name: checkout_session
  endpoint:
    path: /v1/checkout/sessions
    method: POST
- name: products
  endpoint:
    path: /api/products
    method: GET
    data_selector: items
- name: cart
  endpoint:
    path: /api/cart
    method: POST
    data_selector: cartDetails
- name: shopping_cart
  endpoint:
    path: /services/data/vXX.X/sobjects/ShoppingCart
    method: POST
    data_selector: records
- name: Stripe Embedded Checkout
  endpoint:
    path: /using-stripe-embedded-checkout
    method: GET
- name: checkout_session
  endpoint:
    path: /v1/checkout/sessions
    method: POST
    data_selector: id
- name: webhook_event
  endpoint:
    path: /v1/webhook_events
    method: POST
    data_selector: data
    params: {}
- name: checkout.session.completed
  endpoint:
    path: /webhooks/stripe/
    method: POST
    data_selector: data
- name: cart_checkout
  endpoint:
    path: /cart_checkout
    method: POST
    data_selector: data
    params: {}
- name: data-source
  endpoint:
    path: /data-source
    method: POST
- name: home_page
  endpoint:
    path: /home
    method: GET
    data_selector: content
    params: {}
- name: checkout_session
  endpoint:
    path: /checkout/sessions
    method: POST
    data_selector: id
- name: users
  endpoint:
    path: /database/users
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: data
    params: {}
- name: Get Photos
  endpoint:
    path: /get-photos
    method: POST
    data_selector: photos
    params:
      image_width: 800
      quality: 90
      source: prompt
      result_type: dataUrl
- name: customers
  endpoint:
    path: /v1/customers
    method: GET
    data_selector: data
- name: customers
  endpoint:
    path: /v1/customers
    method: GET
    data_selector: data
    params:
      limit: '10'
- name: customer
  endpoint:
    path: /v1/customers
    method: GET
    data_selector: data
- name: shopping_cart
  endpoint:
    path: /v1/checkout/sessions
    method: POST
- name: customer
  endpoint:
    path: /v1/customers/{{$GET.cus}}
    method: GET
- name: checkout_session
  endpoint:
    path: /v1/checkout/sessions
    method: POST
- name: payment_action
  endpoint:
    path: /v1/payment_intents
    method: POST
    data_selector: data
    params: {}
- name: payment_intents
  endpoint:
    path: /v1/payment_intents
    method: POST
    data_selector: data
    params: {}
- name: customers
  endpoint:
    path: /v1/customers
    method: GET
    data_selector: data
    params: {}
- name: Stripe Address
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Stripe Embedded Checkout
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Stripe Express Checkout
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Stripe Link Authentication
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Stripe Payment
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Stripe Payment Method Messaging
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Stripe Buy Button
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Stripe Pricing Table
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: buy_button
  endpoint:
    path: /creating-a-stripe-buy-button
    method: GET
    data_selector: button
    params: {}
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: response
    params:
      currency: gbp
      description: '{{description}}'
      source: '{{$POST.stripeToken}}'
      amount: '{{itemprice}}'
- name: shipping_details
  endpoint:
    path: /v1/checkout/sessions
    method: POST
    data_selector: shipping
    params: {}
- name: Stripe Integration Part 1 - Customer Creation
  endpoint:
    path: /t/stripe-integration-part-1-customer-creation/7601
- name: Stripe Integration Part 2 - Listing Customers
  endpoint:
    path: /t/stripe-integration-part-2-listing-customers/7605
- name: Stripe Integration Part 3 - retrieving a customer object
  endpoint:
    path: /t/stripe-integration-part-3-retrieving-a-customer-object/7611
- name: Stripe Integration Part 4a - The basic Payment Action - App Connect Page
  endpoint:
    path: /t/stripe-integration-part-4a-the-basic-payment-action-app-connect-page/7627
- name: Stripe Integration Part 4b - The Basic Payment Action - Server Connect Page
  endpoint:
    path: /t/stripe-integration-part-4b-the-basic-payment-action-server-connect-page/7671
- name: Stripe Integration Part 5 - Adding shipping Details to your checkout
  endpoint:
    path: /t/stripe-integration-part-5-adding-shipping-details-to-your-checkout/7803
- name: checkout.session.completed
  endpoint:
    path: /webhooks/stripe/
    method: POST
- name: shipping_details
  endpoint:
    path: /v1/checkout/sessions
    method: POST
    data_selector: data
    params:
      shipping[name]: $_POST.shippingname
      shipping[address][line1]: $_POST.address_line1
      shipping[address][line2]: $_POST.address_line2
      shipping[address][city]: $_POST.address_city
      shipping[address][postal_code]: $_POST.address_zip
      shipping[address][state]: $_POST.address_state
      shipping[address][country]: $_POST.address_country
- name: cart_checkout
  endpoint:
    path: /cart_checkout
    method: POST
    data_selector: data
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/subscriptions
    method: GET
    data_selector: data
    params: {}
- name: customers
  endpoint:
    path: /v1/customers
    method: GET
    data_selector: data
    params: {}
- name: checkout_session
  endpoint:
    path: /v1/checkout/sessions
    method: POST
    data_selector: id
- name: customers
  endpoint:
    path: /v1/customers
    method: POST
    data_selector: data
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: customer
    params: {}
- name: customers
  endpoint:
    path: /v1/customers
    method: GET
    data_selector: data
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: data
    params:
      limit: ''
- name: product_details
  endpoint:
    path: /details/:id/:product_name
    method: GET
    data_selector: product
    params:
      id: id
- name: customer
  endpoint:
    path: /v1/customers
    method: GET
    data_selector: data
- name: user
  endpoint:
    path: /server/user
    method: POST
    data_selector: data
    params: {}
- name: customer
  endpoint:
    path: /v1/customers/{{$GET.cus}}
    method: GET
- name: Docker
  endpoint:
    path: /docker
    method: POST
- name: Database
  endpoint:
    path: /database
    method: POST
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: object
- name: message
  endpoint:
    path: /sockets/message
    method: emit
    data_selector: message_text
    params: {}
- name: direct_message
  endpoint:
    path: /sockets/direct_message
    method: send
    data_selector: message_text
    params: {}
- name: shipping_details
  endpoint:
    path: /v1/checkout/sessions
    method: POST
    data_selector: shipping_details
    params: {}
- name: chat_message
  endpoint:
    path: /sockets/chat_message
    method: EMIT
    data_selector: message
    params: {}
- name: shipping_details
  endpoint:
    path: /v1/checkout/sessions
    method: POST
    data_selector: data
    params:
      shipping[name]: $_POST.shippingname
      shipping[address][line1]: $_POST.address_line1
      shipping[address][line2]: $_POST.address_line2
      shipping[address][city]: $_POST.address_city
      shipping[address][postal_code]: $_POST.address_zip
      shipping[address][state]: $_POST.address_state
      shipping[address][country]: $_POST.address_country
- name: chat_messages
  endpoint:
    path: /api/chat/messages
    method: GET
    data_selector: messages
    params: {}
- name: send_message
  endpoint:
    path: /api/chat/send
    method: POST
    data_selector: response
    params: {}
- name: database_table
  endpoint:
    path: /database/table
    method: GET
    data_selector: records
- name: Creating Sub Tables
  endpoint:
    path: /t/creating-sub-tables-with-database-manager
    method: GET
- name: blog_posts
  endpoint:
    path: /blog_posts
    method: POST
    data_selector: records
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: POST
    data_selector: records
    params: {}
- name: SSH Keys
  endpoint:
    path: /t/understanding-ssh-keys-enhancing-server-security-and-access-control
    method: GET
- name: Using a Single Local Database Server for all Your Projects
  endpoint:
    path: /t/using-a-single-local-database-server-for-all-your-projects/50138
- name: database_cluster
  endpoint:
    path: /v1/databases/clusters
    method: POST
    data_selector: clusters
- name: database
  endpoint:
    path: /v1/databases
    method: POST
    data_selector: databases
- name: SSH Keys
  endpoint:
    path: /managing-ssh-keys-with-resource-manager
    method: GET
- name: layout_page
  endpoint:
    path: /pages/layouts
    method: POST
    data_selector: layouts
    params: {}
- name: content_page
  endpoint:
    path: /pages/views
    method: POST
    data_selector: pages
    params: {}
- name: Product Details
  endpoint:
    path: /details/:id/:product_name
    method: GET
    data_selector: product_data
    params:
      id: id
- name: user
  endpoint:
    path: /action/user
    method: POST
    data_selector: results
    params: {}
- name: realtime_data
  endpoint:
    path: /realtime/data
    method: GET
    data_selector: data
    params: {}
- name: WebSocket
  endpoint:
    path: /websockets
    method: GET
- name: message
  endpoint:
    path: /Sockets
    method: POST
    data_selector: message
    params: {}
- name: captain-definition
  endpoint:
    path: /
    method: GET
    data_selector: schemaVersion
    params: {}
- name: messages
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
- name: chat_message
  endpoint:
    path: /sockets/chat_message
    method: EMIT
    data_selector: message
    params: {}
- name: CORS Configuration
  endpoint:
    path: /s3/cors
    method: PUT
    data_selector: CORSRule
    params: {}
- name: S3 Upload Sign Server Action
  endpoint:
    path: /s3/sign-upload
    method: POST
    data_selector: signUpload
    params: {}
- name: chat_messages
  endpoint:
    path: /chat/messages
    method: GET
    data_selector: messages
    params: {}
- name: send_message
  endpoint:
    path: /chat/send
    method: POST
    data_selector: response
    params: {}
- name: Creating Database Connections
  endpoint:
    path: /t/creating-database-connections-with-the-database-manager/20664
    method: GET
    data_selector: records
- name: Creating Database Relations
  endpoint:
    path: /t/creating-database-relations-with-the-database-manager/20653
    method: GET
    data_selector: records
- name: Editing Database Data
  endpoint:
    path: /t/editing-database-data-with-the-new-database-manager/21867
    method: GET
    data_selector: records
- name: Creating Sub Tables
  endpoint:
    path: /t/creating-sub-tables-with-database-manager/40721
    method: GET
    data_selector: records
- name: Using Multi References
  endpoint:
    path: /t/using-multi-references-in-the-database-manager/40991
    method: GET
    data_selector: records
- name: Database Manager
  endpoint:
    path: /t/editing-database-data-with-the-new-database-manager/21867
    method: GET
- name: creating_sub_tables
  endpoint:
    path: /creating-sub-tables
    method: GET
- name: blog_posts
  endpoint:
    path: /blog_posts
    method: CREATE
    data_selector: records
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: CREATE
    data_selector: records
    params: {}
- name: Multi Reference
  endpoint:
    path: /t/using-multi-references-in-the-database-manager
    method: GET
- name: cloud_provider
  endpoint:
    path: /cloud_providers
    method: POST
    data_selector: provider
    params: {}
- name: server
  endpoint:
    path: /servers
    method: POST
    data_selector: server
    params: {}
- name: SSH Keys
  endpoint:
    path: /managing-ssh-keys-with-resource-manager
    method: GET
- name: Use SSH for Remote Docker Targets
  endpoint:
    path: /t/use-ssh-for-remote-docker-targets/49842
    method: GET
- name: S3 Upload
  endpoint:
    path: /setup/s3
    method: POST
    data_selector: response
    params: {}
- name: Droplet
  endpoint:
    path: /create_droplet
    method: POST
    data_selector: droplet_info
    params: {}
- name: Firewall
  endpoint:
    path: /create_firewall
    method: POST
    data_selector: firewall_info
    params: {}
- name: Domain
  endpoint:
    path: /assign_domain
    method: POST
    data_selector: domain_info
    params: {}
- name: definition_file
  endpoint:
    path: /captain-definition
    method: GET
    data_selector: schemaVersion
    params: {}
- name: Using Elastic IP with Amazon AWS
  endpoint:
    path: /using-elastic-ip-with-amazon-aws
    method: GET
- name: docker_machines
  endpoint:
    path: /connecting-existing-servers-in-wappler-for-docker-deployments
    method: GET
notes:
- API Connector is client side only and runs in the browser! The API key or Authentication
  you use will be easily visible to the user!
- Uses dynamic data and attributes binding
- Supports conditional rendering and event handling
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Dynamic data and attributes binding
- Visual tools make it easy to use
- Uses SQLite as the database engine
- No need for a local database server
- Project setup requires no additional installations
- Can use dynamic expressions in JavaScript functions.
- Access JavaScript variable values with App Connect.
- 'Deprecation: the .text-black-50 and .text-white-50 are deprecated as of v5.1.0.
  They’ll be removed in v6.0.0.'
- 'Deprecation: the .text-muted utility has been deprecated as of v5.3.0. It will
  be removed in v6.0.0.'
- Bootstrap is a mobile first responsive design framework.
- Containers are the most basic layout element in Bootstrap.
- Gutters are the padding between your columns.
- Modals are built with HTML, CSS, and JavaScript.
- Clicking on the modal backdrop will automatically close the modal.
- Bootstrap only supports one modal window at a time.
- 'Modals use position: fixed, which can sometimes be a bit particular about its rendering.'
- There are some caveats with using modals on mobile devices.
- The autofocus HTML attribute has no effect in Bootstrap modals.
- Placeholders can enhance the experience of your application while data is loading.
- You can add hidden sidebars for your web sites and apps for navigation, shopping
  carts, and more which appear from the left, right, or bottom edge of the viewport.
- You can show and hide them using buttons, links or other elements on your page.
- The converter will never run automatically and it will never change anything on
  your pages automatically or when you load your Bootstrap 4 pages in Wappler.
- Make sure to backup your pages before converting them to Bootstrap 5.
- There are some components like Summernote, Event Calendar (Full Calendar), Date
  Range Picker and Bootbox, so if you are using them you might want to leave the pages
  they are used on to Bootstrap 4 as these components are not fully Bootstrap 5 compatible
  yet and also they require jQuery.
- Also note that you can safely mix Bootstrap 4 and Bootstrap 5 in your websites -
  so some pages can use Bootstrap 4 and others Bootstrap 5 and there won’t be any
  issues.
- Clicking on the modal 'backdrop' will automatically close the modal.
- Placeholders can be used to enhance the experience of your application.
- The appearance, color, and sizing of the placeholders can be easily customized.
- Allows the addition of static and dynamic events.
- Supports selectable dates and editable events.
- Uses App Connect framework for dynamic functionality
- Flow actions are executed synchronously
- Allows users to highlight multiple days or timeslots by clicking and dragging.
- Editable events are enabled by dragging and resizing.
- Use Server Connect as a ground base for the other server side components and extend
  its functionality even further
- Each flow can produce data that is placed under the flow component name.
- Flow Actions are executed synchronously after each other.
- You can easily debug issues related to server-side processing such as - form not
  sending email, record not inserting or updating, query not showing data etc.
- In your browser, open the Developer tools. If you don't know how to open them please
  refer to your browser's documentation.
- Nested data structure is being returned by our database query
- To debug server-side processing issues, enable Debug Mode in the server connect
  settings.
- You can access nested data created with the help of sub tables using a single database
  query in your API Action.
- The loop is done client-side, so your records are being loaded once and no additional
  server calls are done.
- Uses OAuth2 for authentication
- Logic for accessing the inserted record ID is always the same.
- The second insert record step will use the ID returned by the first step.
- You want your users to see when a record is deleted, so you need to reload the data
  source which shows the data on the page.
- Creating a dynamic select menu is really easy with Wappler.
- We have a form on our page - that’s where we are going to insert our select menu.
- Uses a mailer component integrated in Wappler for sending emails.
- Enable the sortable headers option. This way your table headers become sortable
  on click.
- In Server Connect you can define, use and re-use Session Variables.
- Once you define your session variables, they become available to choose in the dynamic
  data picker.
- Records are being loaded once and no additional server calls are done.
- Looping can be enabled for infinite record navigation.
- Creating the Set Value step is simple, just right click the database query and under
  core actions, select Set Value.
- If you want to output this value on your page(s), then you need to enable the Output
  option.
- You can use the inserted record ID for filtering a query, updating a record, or
  sending an email.
- Array List can hold simple or complex objects.
- Each item can be added dynamically or statically.
- Client-side validation enhances user experience by providing real-time feedback.
- Server-side validation ensures security and data integrity.
- Allows you to create reusable actions to include in API Actions.
- The progress bar won’t work if you don’t add '%' to the width property.
- You can assign a value to the array list when it's created.
- If you don't want to define a schema, the items will be added to the array as comma
  separated strings.
- Server-side validation ensures security and validates data integrity on the server.
- Setting up Site Security Settings
- Define a single user for your site using username and password.
- Static Users list allows defining users and optional permissions without a database.
- Database users require a database connection and table setup for user data.
- You can add a label inside it, we add the following text `Uploading...`
- Then, we set the default width to 0, as we are going to use dynamic width.
- We set it to primary as blue is our favorite color.
- Enable the striped and animated options if you want your progress bar to be animated
  and striped.
- This sets the dynamic value for the width, but the width property expects the value
  to be followed by an unit. In our case the unit is `%` so we just add `+'%'` to
  the expression. This is required and the progress bar won’t work if you don’t add
  it.
- We’d like to show the progress, only when the upload server action runs.
- Having a Login page is an important part of any website, we strive to make the process
  completely secure using the most robust technologies.
- Ensure to create a form with fields named 'username', 'password', and 'remember'.
- Alert text should be wrapped in single quotes.
- Using the Argon2 hashing algorithm requires a little different workflow for creating
  and validating the users using Security Provider.
- When creating the users in your database you need to store their hashed password
  there. For storing the hashed passwords in your database we recommend using a varchar(255)
  database field.
- The difference with Argon2 hashing is that you need to enable the Use Password Hash
  Verify option.
- Inserting multiple file names in a database
- Security - Restricting Access to Your Page
- Wappler provides simple setup to ensure server data cannot be accessed by unauthorized
  users.
- Server actions can be secured using security provider tools.
- Logout - Create a Working User Logout Button
- Ensure to turn off the output option for the database query step.
- Ensure to turn off the output option for the repeat step.
- The email with the dynamic reset page link will be generated and send to any user,
  which email exists in the database.
- For invalid emails you will see an error message.
- Security settings are globally available for all server actions.
- You can define as many users and permissions as you need.
- Form ID is new_password
- Two inputs for the new password and password confirmation
- Form fields must be named 'username', 'password', and 'remember'.
- Redirect on success and alert on failure are implemented.
- Requires setup of connected app in wappler
- Using the Argon2 hashing algorithm requires a different workflow for creating and
  validating users.
- For storing hashed passwords, it is recommended to use a varchar(255) database field.
- Enable the 'Use Password Hash Verify' option when setting up the Security Provider.
- Requires Facebook Developer account and app setup
- No data will be shown to unauthorised users
- Server action does not require any specific permissions so it is set to 'All Logged
  In'
- This is just a basic example of how to use the OAuth2 Provider with Facebook, so
  you can extend this as per your needs.
- Uses OAuth2 with refresh token — requires setup of Google Developer account
- This is just a basic example of how to use the OAuth2 Provider with Google, so you
  can extend this as per your needs.
- Form ID is 'new_password'
- Hidden fields for 'hash' and 'email' are set
- Data is stored in local storage to persist after browser close.
- Dynamic table displays cart content.
- Requires setup of OAuth2 client for authentication
- Sometimes data APIs have restrictions like limits for requests per IP or hourly
  request limits.
- You can cache the data in local storage or session.
- We need to get the logged user role right after the user logs in.
- The role column is mandatory here, as that is what we need for the redirect.
- Server actions created in the Data API Project provide data to the Desktop/Mobile
  App.
- Uses OAuth2 with client secret — requires setup of Facebook Developer account
- User email is available in the user’s default public profile info
- The local SQLite database will be created based on how it’s defined in Wappler’s
  Database Manager.
- You can create multiple databases for your project if needed.
- Requires setup of Google Developer account and OAuth consent screen
- You need to make sure the required URL rewrite components for your server are installed
  and enabled.
- Wappler adjusts the .htaccess file if found locally, so always make sure you have
  your existing .htaccess file downloaded from your target first. Otherwise Wappler
  will create a new .htaccess file locally which will overwrite your existing one
  on upload.
- Requires API key for authentication
- Only card payments are supported. Other payment methods are not supported.
- Coupons, Discounts, Promotion codes, and Tax rates are not supported.
- Creating one-time payments with existing Customers is not supported.
- Placing a hold on a card before charging it is not supported.
- One-time and recurring payments in a single transaction is not supported.
- Requires setup of Stripe API key from the Stripe dashboard.
- Uses Local Storage to keep products in the shopping cart.
- Data Store Schema must be defined to store product details.
- Requires setup of Stripe account and products
- client_secret is returned after creating a Checkout Session
- This API requires an api key, which we already retrieved.
- Setup requires configuration of webhooks in Stripe Dashboard
- Add the time to cache your data for (in seconds) and you are done
- Each of the events has its own data available under $_POST > data
- 'Stripe checkout expects 4 values to be sent: title, amount, currency, and quantity.'
- Make sure the Client-Only Integration is enabled in your Stripe account
- Routes will be auto generated for each of your content pages, so that they can be
  loaded in the main page.
- Don’t forget to fill your success and cancel URLs in the appropriate UI fields.
- The database will be created locally on the users device initially on app start.
- You can also just provide your users with an empty database table.
- Ensure API key is kept secure and not exposed in client-side code.
- Integration with Stripe requires a valid API key.
- Ensure that your API key is kept secure and not exposed in client-side code.
- Account is in test mode currently, which means the payments won’t be made - so it’s
  like a sandbox.
- You may have an issue generating the schema for the API as $_GET.cus is undefined
  and an error will occur.
- The Secret Key can be found on https://dashboard.stripe.com/test/apikeys
- The Public API Key can be found on https://dashboard.stripe.com/apikeys
- Ensure your API key is kept secure.
- API versioning is important to ensure compatibility with Stripe's changes.
- Ensure your API keys are kept secure and not exposed in client-side code.
- Uses OAuth2 for authentication when integrating with Stripe.
- Keep 'Pass Errors' checked until fully debugged so errors are echoed to the console.
- UI Mode should be set to Embedded for Embedded Checkout
- Ensure to handle shipping details correctly in checkout sessions
- Test Signing Secret was added automatically, replace it with the one for the live
  endpoint.
- shippingname is mandatory for the stripe API when adding shipping addresses.
- address_line1 is also mandatory and is the minimum address details that can be supplied.
- address_country requires an ISO 3166-1 alpha-2 country code.
- Checkout session requires specific setup in Stripe dashboard
- 'Stripe checkout expects 4 values to be sent: title (mandatory), amount (mandatory),
  currency, quantity (defaults to 1 if not provided).'
- Uses GitHub Personal Access Token for authentication
- Uses API key for authentication — find it on your Stripe Dashboard
- Integrates with Stripe for customer creation
- The value for authorization should be 'Bearer sk_test_xxxxxxxxxxxxxxxxxxxxxxx'.
- Ensure to handle API keys securely.
- Uses URL parameters for filtering database queries
- SEO-friendly URLs created using Slugify formatter
- Uses Docker for deployment
- API key is required for Digital Ocean
- When adding APP connect and Bootstrap to the page, the card processing div did not
  display correctly and appeared to have a width of 0.
- A width attribute of width:100% was added to the CSS to resolve the display issue.
- Integration requires Stripe API key.
- Pass Errors checked until fully debugged so errors are echoed to the console
- Ensure to include API key in the header for authorization.
- Uses OAuth2 with refresh token — requires setup of connected app in Chat API
- Uses WebSockets for real-time communication
- address_line1 is also mandatory.
- If your project is using Docker - the connection called 'db' is already available
  for you.
- To specify different settings you will have to switch the active target first.
- Allows saving edits directly to the database or as queued changes.
- Seeds can be created for initial data import or backups.
- Wappler is now an officially registered app for Github, Gitlab, and BitBucket
- You need to authorize GitHub Access for Wappler
- SSH keys are a critical component of secure server management, access control, and
  various deployment processes, including Docker deployments.
- Wappler simplifies the process of managing SSH keys for Docker deployments.
- Requires Docker Desktop to be installed and running on your computer.
- Changes made on the layout page will be applied automatically to all pages created
  using it.
- URL parameters include id for filtering and product_name for SEO purposes.
- Dynamic data binding is used for page title and description.
- You need to setup an user and access keys for your AWS account.
- Make sure to copy the Access key ID and the Secret access key for your user, as
  they will be needed for the S3 Connector.
- Uses WebSockets for real-time data updates
- Uses SSH keys for security instead of root password to prevent brute-force attacks
- This API supports real-time messaging through WebSockets.
- Uses NodeJS and Socket.IO integration for real-time messaging
- schemaVersion is always 2.
- Uses WebSockets for real-time bi-directional communication
- Requires setup of S3 Full Access on AWS
- CORS configuration is necessary for file uploads
- To be able to connect to an existing running server you need its IP address and
  an authorized SSH key.
- Only the public key is used. an extension .pub is automatically added to the filename.
- It is advisable to run Ubuntu on the server as it is most convenient for Docker.
- Make sure the server has the following ports open 80, 443 and 2376, next to 22 used
  for SSH.
- Default the connection will use local development server.
- You need to add a valid credit card to create an account.
- Ensure you have a personal SSH key generated before creating an instance.
- Live data manipulation in Wappler can be really easy with the new Database Manager.
- Options to save your data changes together with schema changes make database migrations
  and upgrades really easy and safe.
- Predefined providers include Linode, Digital Ocean, and Hetzner.
- Custom providers can be connected by defining your own servers.
- SSH keys are a critical component of secure server management, access control, and
  various deployment processes.
- A single cluster can contain multiple databases.
- Default database is created when the cluster is created.
- No specific API ingestion configurations provided in the documentation.
- Using a Single Local Database Server for all Your Projects
- Setup the public access option as per your needs, following the AWS documentation.
- Requires setup of connected app in Wappler
- CapRover allows creating and managing applications on a VPS.
- Recommended to use SSH keys for enhanced security.
- Each app requires a captain-definition file.
- Make sure the server has the following ports open 80, 443, and 2376, next to 22
  used for SSH.
- Uses SSH for server access
- Ports 80, 443, 2376, and 9906 need to be opened for external access
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: Invalid response'
- '401 Unauthorized: Wrong login details provided.'
- '401 Unauthorized: Recheck OAuth credentials or token expiration'
- '400 Bad Request: Ensure the request parameters are correct'
- '401 Unauthorized: Check OAuth2 credentials and scopes'
- 'Invalid Client ID: Recheck your App ID'
- 'Invalid Client Secret: Ensure correct App Secret is used'
- '401 Unauthorized: Verify OAuth token validity'
- '400 Bad Request: Check the request parameters and their values.'
- '401 Unauthorized: Verify your API key.'
- '404 Not Found: Check the requested resource.'
- '404 Not Found: Check if the customer ID is correct.'
- '400 Bad Request: Ensure all required parameters are included.'
- '400: Invalid request - check parameters'
- '401: Unauthorized - invalid API key'
- '402: Payment failed - check payment method'
- '401 Unauthorized: Invalid API key provided.'
- '400 Bad Request: Request was malformed or missing required parameters.'
- Check your stripe account for confirmation of the transaction
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Verify your API keys'
- '404 Not Found: Ensure the endpoint is correct'
- '401 Unauthorized: Check your API key'
- '404 Not Found: Resource not found'
- '400 Bad Request: Verify the request parameters'
- 'card_error: The card was declined.'
- 'invalid_request_error: The request was invalid.'
- 'api_error: An error occurred on Stripe''s servers.'
- '404 Not Found: Check if the customer ID is valid.'
- '402 Payment Required: Ensure the payment method is valid.'
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Check the request parameters.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - securityProviderName
  - User
  - oauth
  - ClientId
  - ClientSecret
  - siteSecurity
  - OAuth2
  - Client Secret
  - OAuth client ID
  - OAuth consent screen
client:
  base_url: https://wappler.io
  auth:
    type: oauth2
source_metadata: null
