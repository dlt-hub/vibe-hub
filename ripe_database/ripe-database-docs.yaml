resources:
- name: lookup
  endpoint:
    path: /{source}/{objectType}/
    method: GET
- name: search
  endpoint:
    path: /search
    method: GET
- name: mirrored_databases
  endpoint:
    path: /whois/ripe.net/sources
    method: GET
    data_selector: databases
    params: {}
- name: inetnum
  endpoint:
    path: /api/internet-objects/inetnum
    method: GET
    data_selector: records
- name: aut-num
  endpoint:
    path: /api/internet-objects/aut-num
    method: GET
    data_selector: records
- name: route
  endpoint:
    path: /api/internet-objects/route
    method: GET
    data_selector: records
- name: domain
  endpoint:
    path: /api/internet-objects/domain
    method: GET
    data_selector: records
- name: person
  endpoint:
    path: /api/internet-objects/person
    method: GET
    data_selector: records
- name: organisation
  endpoint:
    path: /api/internet-objects/organisation
    method: GET
    data_selector: records
- name: aut-num
  endpoint:
    path: /aut-num
    method: GET
- name: domain
  endpoint:
    path: /domain
    method: GET
- name: inet6num
  endpoint:
    path: /inet6num
    method: GET
- name: inetnum
  endpoint:
    path: /inetnum
    method: GET
- name: route
  endpoint:
    path: /route
    method: GET
- name: route6
  endpoint:
    path: /route6
    method: GET
- name: as-set
  endpoint:
    path: /as-set
    method: GET
- name: filter-set
  endpoint:
    path: /filter-set
    method: GET
- name: inet-rtr
  endpoint:
    path: /inet-rtr
    method: GET
- name: peering-set
  endpoint:
    path: /peering-set
    method: GET
- name: route-set
  endpoint:
    path: /route-set
    method: GET
- name: rtr-set
  endpoint:
    path: /rtr-set
    method: GET
- name: as-block
  endpoint:
    path: /as-block
    method: GET
- name: irt
  endpoint:
    path: /irt
    method: GET
- name: key-cert
  endpoint:
    path: /key-cert
    method: GET
- name: mntner
  endpoint:
    path: /mntner
    method: GET
- name: organisation
  endpoint:
    path: /organisation
    method: GET
- name: person
  endpoint:
    path: /person
    method: GET
- name: poem
  endpoint:
    path: /poem
    method: GET
- name: poetic-form
  endpoint:
    path: /poetic-form
    method: GET
- name: role
  endpoint:
    path: /role
    method: GET
- name: organisation
  endpoint:
    path: /organization
    method: GET
    data_selector: records
- name: role
  endpoint:
    path: /role
    method: GET
    data_selector: records
- name: person
  endpoint:
    path: /person
    method: GET
    data_selector: records
- name: mntner
  endpoint:
    path: /mntner
    method: GET
    data_selector: records
- name: WhoisResources
  endpoint:
    path: /whois/resources
    method: GET
    data_selector: resources
- name: whois_resources
  endpoint:
    path: /whois-resources
    method: GET
    data_selector: objects
- name: person
  endpoint:
    path: /ripe/person/PP1-RIPE
    method: GET
    data_selector: objects.object
    params: {}
- name: person
  endpoint:
    path: /metadata/templates/person
    method: GET
- name: aut-num
  endpoint:
    path: /aut-num
    method: GET
    data_selector: records
    params: {}
- name: domain
  endpoint:
    path: /domain
    method: GET
    data_selector: records
- name: inet6num
  endpoint:
    path: /inet6num
    method: GET
    data_selector: records
- name: inetnum
  endpoint:
    path: /inetnum
    method: GET
    data_selector: records
    params: {}
- name: route
  endpoint:
    path: /route
    method: GET
    data_selector: records
    params: {}
- name: route6
  endpoint:
    path: /route6
    method: GET
    data_selector: records
    params: {}
- name: as-set
  endpoint:
    path: /as-set
    method: GET
    data_selector: records
    params: {}
- name: filter-set
  endpoint:
    path: /filter-set
    method: GET
    data_selector: records
    params: {}
- name: inet-rtr
  endpoint:
    path: /inet-rtr
    method: GET
    data_selector: records
    params: {}
- name: peering-set
  endpoint:
    path: /peering-set
    method: GET
    data_selector: records
    params: {}
- name: route-set
  endpoint:
    path: /route-set
    method: GET
    data_selector: route-sets
- name: rtr-set
  endpoint:
    path: /rtr-set
    method: GET
    data_selector: rtr-sets
- name: as-block
  endpoint:
    path: /as-block
    method: GET
    data_selector: records
- name: irt
  endpoint:
    path: /irt
    method: GET
    data_selector: records
- name: key-cert
  endpoint:
    path: /key-cert
    method: GET
- name: mntner
  endpoint:
    path: /mntner
    method: GET
- name: organisation
  endpoint:
    path: /organisation
    method: GET
- name: person
  endpoint:
    path: /person
    method: GET
- name: poem
  endpoint:
    path: /poem
    method: GET
- name: poetic-form
  endpoint:
    path: /poetic-form
    method: GET
- name: role
  endpoint:
    path: /roles
    method: GET
- name: syncupdates
  endpoint:
    path: /
    method: POST
    data_selector: results
    params:
      DATA: update message
      NEW: yes or no
      HELP: yes or no
- name: update_message
  endpoint:
    path: /Updating-Objects-in-the-RIPE-Database/Format-of-the-Update-Message/
    method: GET
    data_selector: update_message
- name: person_role
  endpoint:
    path: /creating-person-role-objects
    method: POST
    data_selector: objects
    params: {}
- name: organisation
  endpoint:
    path: /creating-organisation-objects
    method: POST
    data_selector: objects
    params: {}
- name: garbage_collection
  endpoint:
    path: /garbage-collection
    method: GET
- name: as-set
  endpoint:
    path: /set-objects/as-set
    method: POST
    data_selector: data
    params: {}
- name: route-set
  endpoint:
    path: /set-objects/route-set
    method: POST
    data_selector: data
    params: {}
- name: rtr-set
  endpoint:
    path: /set-objects/rtr-set
    method: POST
    data_selector: data
    params: {}
- name: peering-set
  endpoint:
    path: /set-objects/peering-set
    method: POST
    data_selector: data
    params: {}
- name: filter-set
  endpoint:
    path: /set-objects/filter-set
    method: POST
    data_selector: data
    params: {}
- name: acknowledgment_message
  endpoint:
    path: /acknowledgment
    method: GET
    data_selector: acknowledgment
- name: mntner
  endpoint:
    path: /mntner
    method: GET
    data_selector: records
- name: inetnum
  endpoint:
    path: /inetnum
    method: GET
- name: inet6num
  endpoint:
    path: /inet6num
    method: GET
- name: route
  endpoint:
    path: /route
    method: POST
    data_selector: route
    params: {}
- name: domain
  endpoint:
    path: /domain
    method: POST
    data_selector: creation
    params: {}
- name: as-set
  endpoint:
    path: /as-set
    method: GET
- name: member_of
  endpoint:
    path: /path/to/member_of
    method: GET
    data_selector: records
- name: set
  endpoint:
    path: /path/to/set
    method: GET
    data_selector: records
- name: organisation
  endpoint:
    path: /organisation
    method: GET
    data_selector: records
- name: irt
  endpoint:
    path: /irt
    method: GET
- name: inetnum
  endpoint:
    path: /inetnum
    method: GET
- name: inet6num
  endpoint:
    path: /inet6num
    method: GET
- name: irt
  endpoint:
    path: /irt
    method: POST
    data_selector: irt
    params: {}
- name: force_delete
  endpoint:
    path: /force_delete
    method: POST
    data_selector: objects
    params: {}
- name: domain
  endpoint:
    path: /domain
    method: POST
    data_selector: domain_object
    params: {}
- name: domain
  endpoint:
    path: /domain
    method: POST
    data_selector: domainObject
    params: {}
- name: full_text_search
  endpoint:
    path: /fulltextsearch/select
    method: GET
    data_selector: documents
    params:
      q: ''
      rows: 10
      start: 0
      hl: 'false'
      wt: xml
      facet: 'true'
- name: lookup
  endpoint:
    path: /{source}/{objectType}/
    method: GET
- name: search
  endpoint:
    path: /search
    method: GET
    params:
      source: RIPE
- name: route
  endpoint:
    path: /whois
    method: GET
    data_selector: records
    params:
      query: -rBGTroute
- name: autnum
  endpoint:
    path: /autnum/{key}
    method: GET
- name: domain
  endpoint:
    path: /domain/{key}
    method: GET
- name: ip
  endpoint:
    path: /ip/{key}
    method: GET
- name: entity
  endpoint:
    path: /entity/{key}
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: domains
  endpoint:
    path: /domains
    method: GET
- name: help
  endpoint:
    path: /help
    method: GET
- name: person
  endpoint:
    path: /person
    method: GET
    data_selector: results
- name: role
  endpoint:
    path: /role
    method: GET
    data_selector: results
- name: ip_networks
  endpoint:
    path: /queries/ip-networks
    method: GET
    data_selector: records
- name: autonomous_systems
  endpoint:
    path: /queries/autonomous_systems
    method: GET
- name: reverse_domains
  endpoint:
    path: /query
    method: GET
    data_selector: domain_objects
    params:
      query_flags: -d
- name: abuse_contacts
  endpoint:
    path: /abuse-contacts
    method: GET
    data_selector: abuse-mailbox
- name: abuse_contact
  endpoint:
    path: /abuse-contact
    method: GET
    data_selector: records
    params:
      query_flag: -B
- name: route
  endpoint:
    path: /whois
    method: GET
    data_selector: prefixes
    params:
      query: origin<asn>
- name: route6
  endpoint:
    path: /whois
    method: GET
    data_selector: prefixes
    params:
      query: origin<asn>
- name: as-set
  endpoint:
    path: /whois
    method: GET
    data_selector: members
    params:
      query: <as-set>
- name: members
  endpoint:
    path: /getting/all/the/members/of/set/objects
    method: GET
    data_selector: members
- name: inetnum
  endpoint:
    path: /query/inetnum
    method: GET
    data_selector: objects
    params: {}
- name: historical_data
  endpoint:
    path: /historical-data
    method: GET
    data_selector: versions
- name: grs_import
  endpoint:
    path: /stats/delegated-ripencc-extended-latest
    method: GET
    data_selector: data
    params: {}
- name: ripe_db
  endpoint:
    path: /dbase/ripe.db.gz
    method: GET
    data_selector: data
    params: {}
- name: snapshot
  endpoint:
    path: /nrtm-snapshot
    method: GET
    data_selector: ''
    params: {}
- name: deltas
  endpoint:
    path: /nrtm-deltas
    method: GET
    data_selector: ''
    params: {}
- name: update_notification
  endpoint:
    path: /update-notification-file.json
    method: GET
    data_selector: ''
    params: {}
- name: NRTM stream
  endpoint:
    path: /nrtm
    method: GET
    data_selector: stream
    params: {}
- name: public_key_prod
  endpoint:
    path: https://ftp.ripe.net/ripe/dbase/nrtmv4/nrtmv4_public_key.txt
    method: GET
- name: public_key_rc
  endpoint:
    path: https://ftp.ripe.net/ripe/dbase/nrtmv4/nrtmv4_public_key_rc.txt
    method: GET
- name: inetnum
  endpoint:
    path: /query/inetnum
    method: GET
    data_selector: objects
    params: {}
- name: route
  endpoint:
    path: /query/route
    method: GET
    data_selector: objects
    params: {}
- name: inet6num
  endpoint:
    path: /query/inet6num
    method: GET
    data_selector: objects
    params: {}
- name: route6
  endpoint:
    path: /query/route6
    method: GET
    data_selector: objects
    params: {}
- name: domain
  endpoint:
    path: /query/domain
    method: GET
    data_selector: objects
    params: {}
- name: aut-num
  endpoint:
    path: /query/aut-num
    method: GET
    data_selector: objects
    params: {}
- name: person
  endpoint:
    path: /query/person
    method: GET
    data_selector: objects
    params: {}
- name: role
  endpoint:
    path: /query/role
    method: GET
    data_selector: objects
    params: {}
- name: organisation
  endpoint:
    path: /query/organisation
    method: GET
    data_selector: objects
    params: {}
- name: mntner
  endpoint:
    path: /query/mntner
    method: GET
    data_selector: objects
    params: {}
- name: irt
  endpoint:
    path: /query/irt
    method: GET
    data_selector: objects
    params: {}
- name: key-cert
  endpoint:
    path: /query/key-cert
    method: GET
    data_selector: objects
    params: {}
- name: poem
  endpoint:
    path: /query/poem
    method: GET
    data_selector: objects
    params: {}
- name: poetic-form
  endpoint:
    path: /query/poetic-form
    method: GET
    data_selector: objects
    params: {}
- name: miscellaneous_queries
  endpoint:
    path: /miscellaneous-queries
    method: GET
- name: informational_queries
  endpoint:
    path: /informational-queries
    method: GET
- name: mntner
  endpoint:
    path: /mntner
    method: POST
    data_selector: data
    params: {}
- name: whois_test
  endpoint:
    path: /whois/test/inetnum/10.11.11.0/24
    method: GET
    data_selector: data
    params: {}
- name: maintainer
  endpoint:
    path: /maintainers
    method: GET
    data_selector: objects
- name: domain
  endpoint:
    path: /domain
    method: POST
    data_selector: domain_objects
- name: syncupdates
  endpoint:
    path: /syncupdates
    method: POST
- name: command_line
  endpoint:
    path: /whois
    method: GET
- name: web_application
  endpoint:
    path: /
    method: GET
- name: mailupdates
  endpoint:
    path: /mailupdates
    method: POST
- name: person
  endpoint:
    path: /person
    method: GET
    data_selector: records
- name: role
  endpoint:
    path: /role
    method: GET
    data_selector: records
- name: inetnum
  endpoint:
    path: /inetnum
    method: GET
    data_selector: records
- name: aut-num
  endpoint:
    path: /aut-num
    method: GET
    data_selector: records
- name: mnt-lower
  endpoint:
    path: /mnt-lower
    method: GET
    data_selector: list of <mntner-name>
- name: mnt-nfy
  endpoint:
    path: /mnt-nfy
    method: GET
    data_selector: <e-mail>
- name: mnt-ref
  endpoint:
    path: /mnt-ref
    method: GET
    data_selector: list of <mntner-name>
- name: mnt-routes
  endpoint:
    path: /mnt-routes
    method: GET
    data_selector: <mnt-name>
- name: mp-default
  endpoint:
    path: /mp-default
    method: GET
    data_selector: to <peering>
- name: mp-export
  endpoint:
    path: /mp-export
    method: GET
    data_selector: '[protocol <protocol-1>] [into <protocol-1>]'
- name: mp-filter
  endpoint:
    path: /mp-filter
    method: GET
    data_selector: Defines the set's multiprotocol policy filter
- name: mp-import
  endpoint:
    path: /mp-import
    method: GET
    data_selector: '[protocol <protocol-1>] [into <protocol-1>]'
- name: mp-members
  endpoint:
    path: /mp-members
    method: GET
    data_selector: afi <afi-list>
- name: mp-peer
  endpoint:
    path: /mp-peer
    method: GET
    data_selector: <protocol> afi <afi> <ipv4- or ipv6- address>
- name: mp-peering
  endpoint:
    path: /mp-peering
    method: GET
    data_selector: <peering>
- name: netname
  endpoint:
    path: /netname
    method: GET
    data_selector: <netname>
- name: nic-hdl
  endpoint:
    path: /nic-hdl
    method: GET
    data_selector: <nic-handle>
- name: notify
  endpoint:
    path: /notify
    method: GET
    data_selector: <e-mail>
- name: nserver
  endpoint:
    path: /nserver
    method: GET
    data_selector: <domain-name>
- name: org
  endpoint:
    path: /org
    method: GET
    data_selector: <org-id>
- name: org-name
  endpoint:
    path: /org-name
    method: GET
    data_selector: <organisation-name>
- name: organisation
  endpoint:
    path: /organisation
    method: GET
    data_selector: <org-id>
- name: origin
  endpoint:
    path: /origin
    method: GET
    data_selector: <as-number>
- name: owner
  endpoint:
    path: /owner
    method: GET
    data_selector: <generated>
- name: peering
  endpoint:
    path: /peering
    method: GET
    data_selector: <peering>
- name: peering-set
  endpoint:
    path: /peering-set
    method: GET
    data_selector: <object-name>
- name: person
  endpoint:
    path: /person
    method: GET
    data_selector: <person-name>
- name: phone
  endpoint:
    path: /phone
    method: GET
    data_selector: <telephone-number>
- name: ref-nfy
  endpoint:
    path: /ref-nfy
    method: GET
    data_selector: <e-mail>
- name: remarks
  endpoint:
    path: /remarks
    method: GET
    data_selector: <freeform>
- name: role
  endpoint:
    path: /role
    method: GET
    data_selector: <role-name>
- name: route
  endpoint:
    path: /route
    method: GET
    data_selector: <address-prefix>
- name: route6
  endpoint:
    path: /route6
    method: GET
    data_selector: <ipv6-address>/<prefix-length>
- name: route-set
  endpoint:
    path: /route-set
    method: GET
    data_selector: <object-name>
- name: rtr-set
  endpoint:
    path: /rtr-set
    method: GET
    data_selector: <object-name>
- name: signature
  endpoint:
    path: /signature
    method: GET
    data_selector: PGPKEY-<id>
- name: source
  endpoint:
    path: /source
    method: GET
    data_selector: <registry-name>
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: <status>
- name: tech-c
  endpoint:
    path: /tech-c
    method: GET
    data_selector: <nic-handle>
- name: zone-c
  endpoint:
    path: /zone-c
    method: GET
    data_selector: <nic-handle>
- name: person
  endpoint:
    path: /person
    method: GET
- name: role
  endpoint:
    path: /role
    method: GET
- name: organisation
  endpoint:
    path: /organisation
    method: GET
- name: irt
  endpoint:
    path: /irt
    method: GET
- name: person
  endpoint:
    path: /ripe/person/ES7554-RIPE.json
    method: GET
    params:
      unfiltered: ''
- name: mntner
  endpoint:
    path: /webupdates/select
    method: GET
    data_selector: objects
- name: inetnum
  endpoint:
    path: /webupdates/create/TEST/inetnum
    method: POST
    data_selector: objects
- name: aut-num
  endpoint:
    path: /webupdates/create/TEST/aut-num
    method: POST
    data_selector: objects
- name: route
  endpoint:
    path: /webupdates/create/TEST/route
    method: POST
    data_selector: objects
- name: organisation
  endpoint:
    path: /services/data/vXX.X/sobjects/Organisation
    method: GET
    data_selector: records
    params: {}
- name: role
  endpoint:
    path: /services/data/vXX.X/sobjects/Role
    method: GET
    data_selector: records
    params: {}
- name: person
  endpoint:
    path: /services/data/vXX.X/sobjects/Person
    method: GET
    data_selector: records
    params: {}
- name: mntner
  endpoint:
    path: /services/data/vXX.X/sobjects/Mntner
    method: GET
    data_selector: records
    params: {}
- name: whois_resources
  endpoint:
    path: /whois-resources
    method: GET
    data_selector: objects
- name: person
  endpoint:
    path: /ripe/person/PP1-RIPE
    method: GET
    data_selector: objects.object
    params: {}
- name: mntner
  endpoint:
    path: /mntner
    method: GET
- name: aut-num
  endpoint:
    path: /aut-num
    method: GET
    data_selector: records
- name: domain
  endpoint:
    path: /domain
    method: GET
    data_selector: records
- name: inet6num
  endpoint:
    path: /inet6num
    method: GET
    data_selector: records
- name: inetnum
  endpoint:
    path: /inetnum
    method: GET
    data_selector: records
- name: route
  endpoint:
    path: /route
    method: GET
    data_selector: records
- name: route6
  endpoint:
    path: /route6
    method: GET
    data_selector: records
- name: as-set
  endpoint:
    path: /as-set
    method: GET
    data_selector: records
- name: filter-set
  endpoint:
    path: /filter-set
    method: GET
    data_selector: records
- name: inet-rtr
  endpoint:
    path: /inet-rtr
    method: GET
    data_selector: records
- name: peering-set
  endpoint:
    path: /peering-set
    method: GET
    data_selector: records
- name: route-set
  endpoint:
    path: /route-set
    method: GET
    data_selector: records
- name: rtr-set
  endpoint:
    path: /rtr-set
    method: GET
    data_selector: records
- name: as-block
  endpoint:
    path: /as-block
    method: GET
    data_selector: records
- name: irt
  endpoint:
    path: /irt
    method: GET
    data_selector: records
- name: key-cert
  endpoint:
    path: /key-cert
    method: GET
    data_selector: records
- name: mntner
  endpoint:
    path: /mntner
    method: GET
    data_selector: attributes
- name: organisation
  endpoint:
    path: /organisation
    method: GET
    data_selector: attributes
- name: person
  endpoint:
    path: /person
    method: GET
    data_selector: attributes
- name: poem
  endpoint:
    path: /poem
    method: GET
    data_selector: attributes
- name: poetic-form
  endpoint:
    path: /poetic-form
    method: GET
    data_selector: attributes
- name: inetnum
  endpoint:
    path: /ripe/inetnum
    method: GET
- name: inet6num
  endpoint:
    path: /ripe/inet6num
    method: GET
- name: route
  endpoint:
    path: /ripe/route
    method: GET
- name: route6
  endpoint:
    path: /ripe/route6
    method: GET
- name: domain
  endpoint:
    path: /ripe/domain
    method: GET
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: WhoisResource
    params:
      source: RIPE
- name: geolocation
  endpoint:
    path: /geolocation
    method: GET
    data_selector: WhoisResource
- name: abuse-contact
  endpoint:
    path: /abuse-contact
    method: GET
    data_selector: AbuseResources
- name: autnum
  endpoint:
    path: /autnum/{key}
    method: GET
    data_selector: objects
- name: domain
  endpoint:
    path: /domain/{key}
    method: GET
    data_selector: objects
- name: ip
  endpoint:
    path: /ip/{key}
    method: GET
    data_selector: objects
- name: entity
  endpoint:
    path: /entity/{key}
    method: GET
    data_selector: objects
- name: snapshot
  endpoint:
    path: /nrtmv4/RIPE/nrtm-snapshot
    method: GET
    data_selector: records
- name: delta
  endpoint:
    path: /nrtmv4/RIPE/nrtm-deltas
    method: GET
    data_selector: records
- name: update_notification
  endpoint:
    path: /nrtmv4/RIPE/update-notification-file.json
    method: GET
    data_selector: records
- name: inetnum
  endpoint:
    path: /whois/inetnum
    method: GET
    data_selector: objects
    params: {}
- name: inet6num
  endpoint:
    path: /whois/inet6num
    method: GET
    data_selector: objects
    params: {}
- name: route
  endpoint:
    path: /whois/route
    method: GET
    data_selector: objects
    params: {}
- name: route6
  endpoint:
    path: /whois/route6
    method: GET
    data_selector: objects
    params: {}
- name: domain
  endpoint:
    path: /whois/domain
    method: GET
    data_selector: objects
    params: {}
- name: person
  endpoint:
    path: /whois/person
    method: GET
    data_selector: objects
    params: {}
- name: organisation
  endpoint:
    path: /whois/organisation
    method: GET
    data_selector: objects
    params: {}
- name: aut-num
  endpoint:
    path: /services/data/aut-num
    method: GET
    data_selector: records
- name: domain
  endpoint:
    path: /services/data/domain
    method: GET
    data_selector: records
- name: inetnum
  endpoint:
    path: /services/data/inetnum
    method: GET
    data_selector: records
- name: inet6num
  endpoint:
    path: /services/data/inet6num
    method: GET
    data_selector: records
- name: route
  endpoint:
    path: /services/data/route
    method: GET
    data_selector: records
- name: route6
  endpoint:
    path: /services/data/route6
    method: GET
    data_selector: records
- name: organisation
  endpoint:
    path: /services/data/organisation
    method: GET
    data_selector: records
- name: person
  endpoint:
    path: /services/data/person
    method: GET
    data_selector: records
- name: link
  endpoint:
    path: /invalid/person/TP1-RIPE
    method: GET
    data_selector: link
- name: errormessages
  endpoint:
    path: /invalid/person/TP1-RIPE
    method: GET
    data_selector: errormessages
- name: terms-and-conditions
  endpoint:
    path: /db/support/db-terms-conditions.pdf
    method: GET
    data_selector: terms-and-conditions
- name: inet6num
  endpoint:
    path: /inet6num
    method: GET
- name: inetnum
  endpoint:
    path: /inetnum
    method: GET
- name: route
  endpoint:
    path: /route
    method: GET
- name: route6
  endpoint:
    path: /route6
    method: GET
- name: as-set
  endpoint:
    path: /as-set
    method: GET
- name: as-set
  endpoint:
    path: /as-set
    method: GET
- name: filter-set
  endpoint:
    path: /filter-set
    method: GET
- name: inet-rtr
  endpoint:
    path: /inet-rtr
    method: GET
- name: peering-set
  endpoint:
    path: /peering-set
    method: GET
- name: route-set
  endpoint:
    path: /route-set
    method: GET
- name: rtr-set
  endpoint:
    path: /rtr-set
    method: GET
- name: irt
  endpoint:
    path: /irt
    method: GET
- name: poem
  endpoint:
    path: /{source}/poem
    method: POST
    data_selector: WhoisResource
- name: poetic-form
  endpoint:
    path: /{source}/poetic-form
    method: POST
    data_selector: WhoisResource
- name: role
  endpoint:
    path: /{source}/role
    method: POST
    data_selector: WhoisResource
- name: person
  endpoint:
    path: /ripe/person/{objectType}
    method: DELETE
    data_selector: ''
    params:
      password: ''
- name: irt_object
  endpoint:
    path: /irt
    method: POST
    data_selector: irt
    params: {}
- name: inetnum_object
  endpoint:
    path: /inetnum
    method: POST
    data_selector: inetnum
    params: {}
- name: inetnum
  endpoint:
    path: /ripe/inetnum
    method: GET
    data_selector: records
- name: inet6num
  endpoint:
    path: /ripe/inet6num
    method: GET
    data_selector: records
- name: route
  endpoint:
    path: /ripe/route
    method: GET
    data_selector: records
- name: route6
  endpoint:
    path: /ripe/route6
    method: GET
    data_selector: records
- name: domain
  endpoint:
    path: /ripe/domain
    method: GET
    data_selector: records
- name: search
  endpoint:
    path: /search
    method: GET
    params:
      source: RIPE
      query-string: ''
- name: geolocation
  endpoint:
    path: /geolocation
    method: GET
    params:
      ipkey: ''
- name: abuse-contact
  endpoint:
    path: /abuse-contact
    method: GET
    params:
      resource: ''
- name: versions
  endpoint:
    path: /{source}/{objecttype}/{key}/versions
    method: GET
    params:
      source: RIPE
      objecttype: ''
      key: ''
- name: autnum
  endpoint:
    path: /autnum/{key}
    method: GET
    data_selector: object
- name: domain
  endpoint:
    path: /domain/{key}
    method: GET
    data_selector: object
- name: ip
  endpoint:
    path: /ip/{key}
    method: GET
    data_selector: object
- name: entity
  endpoint:
    path: /entity/{key}
    method: GET
    data_selector: object
- name: Exact Match Queries
  endpoint:
    path: /exact-match-queries
    method: GET
    data_selector: records
    params: {}
- name: More Specific Range Queries
  endpoint:
    path: /more-specific-range-queries
    method: GET
    data_selector: records
    params: {}
- name: Less Specific Range Queries
  endpoint:
    path: /less-specific-range-queries
    method: GET
    data_selector: records
    params: {}
- name: Inverse Queries
  endpoint:
    path: /inverse-queries
    method: GET
    data_selector: records
    params: {}
- name: Abuse Contacts
  endpoint:
    path: /abuse-contacts
    method: GET
    data_selector: records
    params: {}
- name: person
  endpoint:
    path: /services/data/person
    method: GET
- name: role
  endpoint:
    path: /services/data/role
    method: GET
- name: inetnum
  endpoint:
    path: /services/data/inetnum
    method: GET
- name: grs_import
  endpoint:
    path: /services/data/vXX.X/sobjects/GrsImport
    method: GET
    data_selector: records
- name: server_configuration
  endpoint:
    path: /opt/homebrew/etc/my.cnf.d/ripedb.cnf
    method: SET
    data_selector: configuration
    params:
      default-time-zone: +00:00
      innodb_file_per_table: 'OFF'
      max_connections: '1000'
- name: whois_server_configuration
  endpoint:
    path: /opt/homebrew/etc/my.cnf.d/ripedb.cnf
    method: SET
    data_selector: configuration
    params:
      max_allowed_packet: 20M
      innodb_buffer_pool_size: 2G
- name: user_management
  endpoint:
    path: /
    method: CREATE
    data_selector: users
    params:
      create_user_dbint: CREATE USER 'dbint'@'localhost' IDENTIFIED BY ''
      grant_privileges_dbint: GRANT ALL PRIVILEGES ON *.* TO 'dbint'@'localhost'
      create_user_rdonly: CREATE USER 'rdonly'@'localhost' IDENTIFIED BY ''
      grant_privileges_rdonly: GRANT SELECT PRIVILEGES ON *.* TO 'rdonly'@'localhost'
- name: aut-num
  endpoint:
    path: /aut-num
    method: GET
    data_selector: records
- name: domain
  endpoint:
    path: /domain
    method: GET
    data_selector: records
- name: inet6num
  endpoint:
    path: /inet6num
    method: GET
    data_selector: records
- name: inetnum
  endpoint:
    path: /inetnum
    method: GET
    data_selector: records
- name: route
  endpoint:
    path: /route
    method: GET
    data_selector: records
- name: route6
  endpoint:
    path: /route6
    method: GET
    data_selector: records
- name: as-set
  endpoint:
    path: /as-set
    method: GET
    data_selector: records
- name: filter-set
  endpoint:
    path: /filter-set
    method: GET
    data_selector: records
- name: inet-rtr
  endpoint:
    path: /inet-rtr
    method: GET
    data_selector: records
- name: peering-set
  endpoint:
    path: /peering-set
    method: GET
    data_selector: records
- name: route-set
  endpoint:
    path: /route-set
    method: GET
    data_selector: records
- name: rtr-set
  endpoint:
    path: /rtr-set
    method: GET
    data_selector: records
- name: as-set
  endpoint:
    path: /as-set
    method: GET
- name: filter-set
  endpoint:
    path: /filter-set
    method: GET
- name: inet-rtr
  endpoint:
    path: /inet-rtr
    method: GET
- name: peering-set
  endpoint:
    path: /peering-set
    method: GET
- name: route-set
  endpoint:
    path: /route-set
    method: GET
- name: rtr-set
  endpoint:
    path: /rtr-set
    method: GET
- name: irt
  endpoint:
    path: /irt
    method: GET
- name: key-cert
  endpoint:
    path: /key-cert
    method: GET
- name: mntner
  endpoint:
    path: /mntner
    method: GET
- name: organisation
  endpoint:
    path: /organisation
    method: GET
- name: person
  endpoint:
    path: /person
    method: GET
- name: person
  endpoint:
    path: /ripe/person
    method: DELETE
    data_selector: null
    params:
      password: required
- name: mntner
  endpoint:
    path: /ripe/mntner
    method: DELETE
    data_selector: null
    params:
      password: required
- name: inetnum
  endpoint:
    path: /ripe/inetnum
    method: GET
- name: inet6num
  endpoint:
    path: /ripe/inet6num
    method: GET
- name: route
  endpoint:
    path: /ripe/route
    method: GET
- name: route6
  endpoint:
    path: /ripe/route6
    method: GET
- name: domain
  endpoint:
    path: /ripe/domain
    method: GET
- name: search
  endpoint:
    path: /search
    method: GET
    params:
      source: RIPE
      query-string: ''
- name: geolocation
  endpoint:
    path: /geolocation
    method: GET
    params:
      ipkey: ''
- name: abuse-contact
  endpoint:
    path: /abuse-contact
    method: GET
    params:
      resource: ''
- name: autnum
  endpoint:
    path: /autnum/{key}
    method: GET
    data_selector: data
- name: domain
  endpoint:
    path: /domain/{key}
    method: GET
    data_selector: data
- name: ip
  endpoint:
    path: /ip/{key}
    method: GET
    data_selector: data
- name: entity
  endpoint:
    path: /entity/{key}
    method: GET
    data_selector: data
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: data
- name: domains
  endpoint:
    path: /domains
    method: GET
    data_selector: data
- name: help
  endpoint:
    path: /help
    method: GET
    data_selector: data
- name: Exact Match Queries
  endpoint:
    path: /exact-match
    method: GET
- name: More Specific Range Queries
  endpoint:
    path: /more-specific
    method: GET
- name: Less Specific Range Queries
  endpoint:
    path: /less-specific
    method: GET
- name: IRTs
  endpoint:
    path: /irt
    method: GET
- name: Abuse Contacts
  endpoint:
    path: /abuse-contacts
    method: GET
- name: Inverse Queries
  endpoint:
    path: /inverse
    method: GET
- name: Autonomous Systems
  endpoint:
    path: /autonomous-systems
    method: GET
- name: mirrored_databases
  endpoint:
    path: /mirrored_databases
    method: GET
    data_selector: resources
- name: whois_mirror_ripe_grs
  endpoint:
    path: /services/data/vXX.X/sobjects/WHOIS_MIRROR_RIPE_GRS
    method: GET
    data_selector: records
    params: {}
- name: Update Notification File
  endpoint:
    path: /ripe/dbase/nrtmv4/RIPE/update-notification-file.jose
    method: GET
- name: Snapshot File
  endpoint:
    path: /ripe/dbase/nrtmv4/RIPE/nrtm-snapshot
    method: GET
- name: Delta File
  endpoint:
    path: /ripe/dbase/nrtmv4/RIPE/nrtm-delta
    method: GET
- name: inetnum
  endpoint:
    path: /query/inetnum
    method: GET
    data_selector: objects
    params: {}
- name: route
  endpoint:
    path: /query/route
    method: GET
    data_selector: objects
    params: {}
- name: inet6num
  endpoint:
    path: /query/inet6num
    method: GET
    data_selector: objects
    params: {}
- name: route6
  endpoint:
    path: /query/route6
    method: GET
    data_selector: objects
    params: {}
- name: aut-num
  endpoint:
    path: /query/aut-num
    method: GET
    data_selector: objects
    params: {}
- name: domain
  endpoint:
    path: /query/domain
    method: GET
    data_selector: objects
    params: {}
- name: mntner
  endpoint:
    path: /query/mntner
    method: GET
    data_selector: objects
    params: {}
- name: organisation
  endpoint:
    path: /query/organisation
    method: GET
    data_selector: objects
    params: {}
- name: person
  endpoint:
    path: /query/person
    method: GET
    data_selector: objects
    params: {}
- name: role
  endpoint:
    path: /query/role
    method: GET
    data_selector: objects
    params: {}
- name: whois_local
  endpoint:
    path: /whois/whois_local
    method: GET
    data_selector: records
- name: mailupdates_local
  endpoint:
    path: /whois/mailupdates_local
    method: GET
    data_selector: records
- name: acl_local
  endpoint:
    path: /whois/acl_local
    method: GET
    data_selector: records
- name: internals_local
  endpoint:
    path: /whois/internals_local
    method: GET
    data_selector: records
- name: nrtm_local
  endpoint:
    path: /whois/nrtm_local
    method: GET
    data_selector: records
- name: domain
  endpoint:
    path: /domain
    method: POST
    data_selector: domain
    params: {}
- name: domain
  endpoint:
    path: /domain
    method: POST
    data_selector: records
    params: {}
- name: role
  endpoint:
    path: /role
    method: POST
    data_selector: records
    params: {}
- name: mntner
  endpoint:
    path: /mntner
    method: POST
    data_selector: records
    params: {}
- name: abuse-contact
  endpoint:
    path: /abuse-contact
    method: GET
    data_selector: records
- name: ipv4-address
  endpoint:
    path: /ipv4-address
    method: GET
    data_selector: records
- name: mnt-lower
  endpoint:
    path: /mnt-lower
    method: GET
- name: mnt-nfy
  endpoint:
    path: /mnt-nfy
    method: GET
- name: mnt-ref
  endpoint:
    path: /mnt-ref
    method: GET
- name: mnt-routes
  endpoint:
    path: /mnt-routes
    method: GET
- name: mp-default
  endpoint:
    path: /mp-default
    method: GET
- name: mp-export
  endpoint:
    path: /mp-export
    method: GET
- name: mp-filter
  endpoint:
    path: /mp-filter
    method: GET
- name: mp-import
  endpoint:
    path: /mp-import
    method: GET
- name: mp-members
  endpoint:
    path: /mp-members
    method: GET
- name: mp-peer
  endpoint:
    path: /mp-peer
    method: GET
- name: mp-peering
  endpoint:
    path: /mp-peering
    method: GET
- name: netname
  endpoint:
    path: /netname
    method: GET
- name: nic-hdl
  endpoint:
    path: /nic-hdl
    method: GET
- name: notify
  endpoint:
    path: /notify
    method: GET
- name: nserver
  endpoint:
    path: /nserver
    method: GET
- name: org
  endpoint:
    path: /org
    method: GET
- name: org-name
  endpoint:
    path: /org-name
    method: GET
- name: organisation
  endpoint:
    path: /organisation
    method: GET
- name: origin
  endpoint:
    path: /origin
    method: GET
- name: owner
  endpoint:
    path: /owner
    method: GET
- name: peering
  endpoint:
    path: /peering
    method: GET
- name: peering-set
  endpoint:
    path: /peering-set
    method: GET
- name: person
  endpoint:
    path: /person
    method: GET
- name: phone
  endpoint:
    path: /phone
    method: GET
- name: ref-nfy
  endpoint:
    path: /ref-nfy
    method: GET
- name: remarks
  endpoint:
    path: /remarks
    method: GET
- name: role
  endpoint:
    path: /role
    method: GET
- name: route
  endpoint:
    path: /route
    method: GET
- name: route6
  endpoint:
    path: /route6
    method: GET
- name: route-set
  endpoint:
    path: /route-set
    method: GET
- name: rtr-set
  endpoint:
    path: /rtr-set
    method: GET
- name: signature
  endpoint:
    path: /signature
    method: GET
- name: source
  endpoint:
    path: /source
    method: GET
- name: status
  endpoint:
    path: /status
    method: GET
- name: tech-c
  endpoint:
    path: /tech-c
    method: GET
- name: text
  endpoint:
    path: /text
    method: GET
- name: upd-to
  endpoint:
    path: /upd-to
    method: GET
- name: zone-c
  endpoint:
    path: /zone-c
    method: GET
- name: person
  endpoint:
    path: /ripe/person/{object_id}
    method: GET
    data_selector: person
    params:
      unfiltered: ''
- name: mntner
  endpoint:
    path: /ripe/mntner/{mntner_name}
    method: GET
    data_selector: unfiltered
- name: person
  endpoint:
    path: /ripe/person/{person_id}
    method: GET
    data_selector: unfiltered
- name: aut-num
  endpoint:
    path: /aut-num
    method: GET
- name: domain
  endpoint:
    path: /domain
    method: GET
- name: inet6num
  endpoint:
    path: /inet6num
    method: GET
- name: inetnum
  endpoint:
    path: /inetnum
    method: GET
- name: route
  endpoint:
    path: /route
    method: GET
- name: route6
  endpoint:
    path: /route6
    method: GET
- name: as-set
  endpoint:
    path: /as-set
    method: GET
- name: filter-set
  endpoint:
    path: /filter-set
    method: GET
- name: inet-rtr
  endpoint:
    path: /inet-rtr
    method: GET
- name: peering-set
  endpoint:
    path: /peering-set
    method: GET
- name: route-set
  endpoint:
    path: /route-set
    method: GET
- name: rtr-set
  endpoint:
    path: /rtr-set
    method: GET
- name: as-block
  endpoint:
    path: /as-block
    method: GET
- name: irt
  endpoint:
    path: /irt
    method: GET
- name: key-cert
  endpoint:
    path: /key-cert
    method: GET
- name: mntner
  endpoint:
    path: /mntner
    method: GET
- name: organisation
  endpoint:
    path: /organisation
    method: GET
- name: person
  endpoint:
    path: /person
    method: GET
- name: poem
  endpoint:
    path: /poem
    method: GET
- name: poetic-form
  endpoint:
    path: /poetic-form
    method: GET
- name: role
  endpoint:
    path: /role
    method: GET
- name: whoisResources
  endpoint:
    path: /ripe
    method: GET
    data_selector: objects
- name: route
  endpoint:
    path: /route
    method: mandatory
    data_selector: route
    params: {}
- name: route6
  endpoint:
    path: /route6
    method: mandatory
    data_selector: route6
    params: {}
- name: as-set
  endpoint:
    path: /as-set
    method: mandatory
    data_selector: as-set
    params: {}
- name: filter-set
  endpoint:
    path: /filter-set
    method: GET
- name: inet-rtr
  endpoint:
    path: /inet-rtr
    method: GET
- name: peering-set
  endpoint:
    path: /peering-set
    method: GET
- name: route-set
  endpoint:
    path: /route-set
    method: GET
- name: rtr-set
  endpoint:
    path: /rtr-set
    method: GET
- name: irt
  endpoint:
    path: /path/to/irt/endpoint
    method: GET
    data_selector: irt_data
    params: {}
- name: person
  endpoint:
    path: /ripe/person/{key}
    method: DELETE
    data_selector: WhoisResource
    params:
      password: password
- name: person
  endpoint:
    path: /create/person
    method: POST
    data_selector: objects
    params: {}
- name: role
  endpoint:
    path: /create/role
    method: POST
    data_selector: objects
    params: {}
- name: organisation
  endpoint:
    path: /create/organisation
    method: POST
    data_selector: objects
    params: {}
- name: mntner
  endpoint:
    path: /create/mntner
    method: POST
    data_selector: objects
    params: {}
- name: inetnum
  endpoint:
    path: /ripe/inetnum
    method: GET
    data_selector: objects
- name: route
  endpoint:
    path: /ripe/route
    method: GET
    data_selector: objects
- name: domain
  endpoint:
    path: /ripe/domain
    method: GET
    data_selector: objects
- name: search
  endpoint:
    path: /search
    method: GET
    params: {}
- name: geolocation
  endpoint:
    path: /geolocation
    method: GET
    params: {}
- name: abuse-contact
  endpoint:
    path: /abuse-contact
    method: GET
    params: {}
- name: autnum
  endpoint:
    path: /autnum/{key}
    method: GET
- name: domain
  endpoint:
    path: /domain/{key}
    method: GET
- name: ip
  endpoint:
    path: /ip/{key}
    method: GET
- name: entity
  endpoint:
    path: /entity/{key}
    method: GET
- name: WHOIS_MIRROR_RIPE_GRS
  endpoint:
    path: /whois/MIRROR
    method: GET
    data_selector: records
    params: {}
- name: inetnum
  endpoint:
    path: /inetnum
    method: GET
    data_selector: objects
    params: {}
- name: route
  endpoint:
    path: /route
    method: GET
    data_selector: objects
    params: {}
- name: inet6num
  endpoint:
    path: /inet6num
    method: GET
    data_selector: objects
    params: {}
- name: route6
  endpoint:
    path: /route6
    method: GET
    data_selector: objects
    params: {}
- name: aut-num
  endpoint:
    path: /aut-num
    method: GET
    data_selector: objects
    params: {}
- name: domain
  endpoint:
    path: /domain
    method: GET
    data_selector: objects
    params: {}
- name: person
  endpoint:
    path: /person
    method: GET
    data_selector: objects
    params: {}
- name: role
  endpoint:
    path: /role
    method: GET
    data_selector: objects
    params: {}
- name: mntner
  endpoint:
    path: /mntner
    method: GET
    data_selector: objects
    params: {}
- name: organisation
  endpoint:
    path: /organisation
    method: GET
    data_selector: objects
    params: {}
- name: key-cert
  endpoint:
    path: /key-cert
    method: GET
    data_selector: objects
    params: {}
- name: poem
  endpoint:
    path: /poem
    method: GET
    data_selector: objects
    params: {}
- name: poetic-form
  endpoint:
    path: /poetic-form
    method: GET
    data_selector: objects
    params: {}
- name: WHOIS_LOCAL
  endpoint:
    path: /whois/whois-commons/src/main/resources/whois_schema.sql
    method: CREATE
    data_selector: schema
    params: {}
- name: MAILUPDATES_LOCAL
  endpoint:
    path: /whois/whois-commons/src/main/resources/mailupdates_schema.sql
    method: CREATE
    data_selector: schema
    params: {}
- name: ACL_LOCAL
  endpoint:
    path: /whois/whois-commons/src/main/resources/acl_schema.sql
    method: CREATE
    data_selector: schema
    params: {}
- name: INTERNALS_LOCAL
  endpoint:
    path: /whois/whois-commons/src/main/resources/internals_schema.sql
    method: CREATE
    data_selector: schema
    params: {}
- name: NRTM_LOCAL
  endpoint:
    path: /whois/whois-commons/src/main/resources/nrtm_schema.sql
    method: CREATE
    data_selector: schema
    params: {}
- name: domain
  endpoint:
    path: /db-web-ui/webupdates/select
    method: POST
    data_selector: domain
    params: {}
- name: query
  endpoint:
    path: /query
    method: GET
    data_selector: data
    params: {}
- name: update
  endpoint:
    path: /update
    method: POST
    data_selector: data
    params: {}
notes:
- The RIPE NCC does not store any personal data from other registries.
- Use the --resource flag to query only the dummified GRS databases.
- A RESTful API was introduced, which was deployed to production in 2013.
- Most personal data is not registered in the RIPE Database by the RIPE NCC but by
  others.
- There are limits on how many personal data objects can be queried in a 24-hour period.
- Every object in the RIPE Database must now be protected by a mntner object referenced
  by a 'mnt-by:' attribute.
- You can use notifications to keep track of changes to your data.
- Some objects may return nulls in deeply nested fields
- Terms and conditions can be found at http://www.ripe.net/db/support/db-terms-conditions.pdf
- Refer to terms and conditions at http://www.ripe.net/db/support/db-terms-conditions.pdf
- The aut-num object serves a dual purpose in the database.
- Authorisation for creation of route(6) objects can and must be provided by both
  the address space holder and the holder of the AS number.
- The inetnum object is used for allocations and assignments of IPv4 address space
  resources.
- The route object contains routing information for IPv4 address space resources.
- Each evening, at midnight (UTC) the whole contents of this database are deleted.
- Users can choose to authenticate as any maintainer, including NCC maintainers.
- Some are front-ends to the others.
- Objects up to a maximum size of 10MB can be managed through the Webupdates interface.
- Problems sometimes occur with reverse domain objects. Because of all the DNS checks
  made, reverse domain objects sometimes take longer to process, and your connection
  may occasionally time out.
- Email update messages must be in plain text and can be MIME-encoded.
- There is no limit on how many objects that can be included in an email update message,
  or MIME part.
- To obtain object templates, use netcat or telnet commands.
- Using '-v' instead of '-t' provides the full template description.
- The order of processing the objects in the message only changes in specific situations.
- The database software tries to process the objects one by one, starting with the
  first recognized object.
- If a DoS attack is detected, we temporarily block the user's IP address.
- Users exhibiting suspected abusive behavior may be permanently blocked from the
  system.
- Personal historical data is not available.
- NIC handles for person and role objects are no longer reusable.
- When first using the RIPE Database, a mntner object must be created.
- If errors occur during object creation, no objects will be created.
- To use the dry-run feature, submit an update by any available update method.
- The TEST Database has very little data. It is also reset every 24 hours.
- The RIPE Database returns different types of information to various specified users.
- The RESTful API response is returned either as XML or JSON.
- Authorisation in the RIPE Database is based on the Routing Policy System Security
  (RPSS) that is explained in more detail in RFC 2725.
- MD5 hashed passwords are deprecated and will be removed by end 2025.
- PGP-signed updates cannot be submitted using the RESTful API.
- Individual data objects must be protected with a mntner object.
- Only those mntner objects referenced by the 'mnt-by:' attributes are authorised
  to modify or delete the object.
- Authorisation checks work in line with the logical 'OR'.
- An object's protection level is determined by the weakest authorisation method used
  in the mntner objects referenced by that object.
- All new objects must have at least one 'mnt-by:'.
- A person object must be maintained and a mntner must reference an existing person.
- New users must follow the procedure in the section 'New Organisation Startup' to
  get started.
- You can only create a route(6) object for a prefix you manage.
- 'If the originating AS Number exists in the RIPE Database, and if the aut-num object
  contains one or more notify: attributes, these will be used to notify the originating
  AS Number holder when the route(6) object is created.'
- Creation of domain objects must satisfy its own mntner object references.
- Modification and deletion of a domain object requires its own mntner object to authorise
  the operation.
- RPSL set objects do not have a natural hierarchy of their own but allow hierarchical
  names.
- Membership of a set is specified through the use of the 'member-of:' attribute.
- Authorisation from the organisation object is required when an 'org:' attribute
  is added to a referencing object.
- 'Authorisation from the irt object is required when a mnt-irt: attribute is added
  to a referencing object.'
- Creation of an irt object is a manual process.
- Authorisation can be provided by a PGP signature, password or SSO account.
- Both maintainer of the inet(6)num object and the team who owns the irt object will
  receive change notifications by e-mail.
- Force delete allows deletion of inet(6)num, route(6) and domain objects using the
  maintainer of a covering address space object.
- It is only possible to delete objects; modifying them is not possible.
- Ensure that the zone you are serving is signed and it contains a Key Signing Key
  (KSK) marked with the SEP flag.
- The ultimate test is to query a recursive name server that is not authoritative
  for your zone for a record from your zone.
- The domain objects wizard in the webupdates does not support requesting DNSSEC delegations
  yet.
- Not allowed to fetch more than 10,000 documents per request.
- There is a maximum of 100,000 results per query (with paging).
- The maximum highlight characters is trimmed to 100,000 characters.
- Queries can be run from almost any computer (connected to the Internet) using standard
  features built into most operating systems.
- The objects are in RPSL format.
- The same response will be returned from the server for all query methods.
- Output lines starting with the % sign are either a server response code or server
  messages (a comment, information message or an error with description).
- A message contains a white space after the % sign, while a server response code
  starts right after the % sign.
- Do not write scripts to parse the messages. The text is subject to change at any
  time.
- An empty line terminates a database object in the output.
- Two empty lines, each containing only a new-line character, mean the end of a server
  response.
- Access to personal data is limited per user IP address.
- Temporary blocks are automatically released at midnight (UTC).
- The RIPE Database provides information about IP networks allocated or assigned within
  the RIPE NCC service region.
- AS numbers can be either 32-bit or 16-bit.
- The RIPE Database supports IP network queries including the `-x`, `-M`, `-m`, `-L`
  and `-l` functionality for reverse delegation domains.
- There is no hierarchy allowed with reverse domain objects.
- Default response is grouped.
- Some attributes containing email addresses are filtered out of the default response.
- Including the -B or --no-filtering query flag will not filter the response.
- The client can request a persistent connection by sending the -k or --persistent-connection
  query flag to the server.
- The server operates a 'stop-and-wait' protocol during a persistent connection.
- Not all users can use the -V flag. You must contact RIPE Database Administration
  and tell us why you need this facility.
- Attempting to use the -V flag without approval may result in permanent denial of
  access to the RIPE Database.
- Bulk access to any of the mirrored databases is not possible.
- The mirrors of the other RIRs' databases only contain the resource information.
- Default behavior returns referenced secondary objects
- Excessive querying of personal data objects can lead to blocking
- Historical query flags do not have a short format and can only be used from the
  command line.
- All timestamps use the UTC timezone.
- Any attribute containing email addresses is filtered out from the query response.
- It is not possible to query for historical personal data objects.
- The GRS import will run automatically every midnight.
- The mirrored content has to be persisted to WHOIS_MIRROR_grs.source.
- The RIPE NCC NRTM is a publicly available service that allows users to receive a
  stream of available data from the RIPE Database.
- NRTMv4 is a protocol for database mirroring that improves upon existing protocols
  by publishing records via an HTTPS endpoint.
- The public key will rotate approximately once a year for security reasons.
- The client pulls available data from the server by submitting requests which can
  be periodic or continuous.
- Updates are only available from the server as a data stream for two weeks.
- Recovery process involves email access verification for mntner object.
- Default max_allowed_packet is 1M, needs to be set to 20M for large objects
- Default innodb_buffer_pool_size is 128MB, should be set to use available memory
- Uses OAuth2 with refresh token — requires setup of connected app in api
- The Whois server can block a client's IP.
- To allow unlimited queries from a certain IP, specific SQL commands must be executed.
- Ensure the database schema contains the necessary source for full-text search.
- ElasticFullTextIndex job will run each minute to keep the index updated.
- Any data entered into the RIPE Database must comply with the RIPE Database Terms
  and Conditions.
- New personal data should not be stored in the RIPE Database beyond a reasonable
  'work in progress' period before it is referenced by operation data objects.
- Every object in the RIPE Database must be protected, to ensure that only authorised
  people can make changes.
- Keep in mind that when as inet(6)num, route(6) or a domain object is created, authentication
  is required from the parent object.
- If the parent has a 'mnt-lower:', 'mnt-routes:' or 'mnt-domains:' attribute, this
  is the mntner that will need to be authenticated against.
- The creation and maintenance of domain objects must be handled by a designated maintainer.
- Some objects like Contact may return nulls in deeply nested fields
- The RIPE Database contains objects formatted according to the Routing Policy Specification
  Language (RPSL), which has a set of syntax rules you have to comply with when creating,
  updating or deleting objects.
- The RIPE NCC enforces certain business rules to ensure data integrity and registry
  accuracy.
- All objects in the RIPE Database must be protected using mntner objects.
- The RIPE NCC is authorised by the RIPE community to act as the registration authority
  for Internet number resources.
- Access Control Lists (ACLs) are active.
- The Release Candidate database contains snapshot of the live data from the start
  of the testing period.
- Support OAuth 2.0
- Always add Warning When using Password Authentication
- Unreferenced person objects will be deleted after 90 days.
- Personal data is not available in bulk format.
- Forward domain should remove its data from the RIPE Database if the TLD is not responsive.
- Reverse domain objects should be deleted and removed from the DNS system.
- inet(6)num address space must be returned to the appropriate Internet Registry before
  deletion.
- aut-num objects should be deleted after cancelling routing arrangements.
- Role objects referencing a person should be treated as direct references.
- Mntner objects should be deleted after removing all references.
- Key-cert references to person objects are optional and can be removed.
- Irt objects should be deleted after removing references from inet(6)num objects.
- Organisation references to person objects are optional and can be removed.
- Uses PGP authentication method
- The database is reset to a default state each night.
- The data in the TEST database is not authoritative.
- API keys are a way to authenticate updates in the RIPE database.
- Keys are time-limited for security reasons and are valid up to a year in the future.
- The RIPE Database service is only used as intended and defined in documents and
  manuals associated with the service.
- Users do not act in a way that disrupts the RIPE Database services for other Users.
- Access to the RIPE Database is available to anyone provided these Terms and Conditions
  are followed.
- A Maintainer can authenticate updates by using a personal or organisation's identifier
  of a type supported by the RIPE Database authentication scheme.
- The RIPE Database is intended for those who have, or will soon have Internet resources.
- The organisation object should be the centre of your presence in the RIPE Database.
- Terms and conditions are available at http://www.ripe.net/db/support/db-terms-conditions.pdf
- The inet6num object specifies a block of IPv6 addresses.
- The status attributes can indicate various levels of allocation and assignment.
- An inetnum object contains information on allocations and assignments of IPv4 address
  space resources.
- Attributes must follow the specified formats for route-set and rtr-set.
- Objects in the RIPE Database are protected using mntner objects.
- Maintainers can choose to be notified when references are added or removed.
- The subject line can have a special meaning in email update messages by using keywords.
- Use the NEW keyword if you want the database to only accept new objects.
- The HELP keyword causes a piece of text to be returned in the acknowledgement that
  contains information about how to query and update the database.
- HOWTO performs the same action as the HELP keyword.
- Uses dry-run feature for testing updates
- Automatic deletion of unreferenced objects after a period
- PGP signed updates cannot be submitted using the RESTful API.
- SSO authorisation only works with web-based update methods.
- API keys are associated with a user's RIPE NCC Access account.
- 'Authorisation from the irt object is only required when a mnt-irt: attribute is
  added to a referencing object.'
- Both the maintainer of the inet(6)num object and the team who owns the irt object
  will receive a change notifications by e-mail when the request has been completed.
- The RIPE Database supports IP network queries including various query flags.
- NRTMv4 is a protocol for database mirroring that improves upon existing protocols.
- This protocol has draft RFC status and is subject to change.
- The client must connect to the host whois.ripe.net at port 4444.
- Only use a person object as a holder of personal information.
- All objects more specific to the allocation are created and managed in the RIPE
  Database by the member organisation, not by the RIPE NCC.
- There is a maximum limit on the size of an email message, which is 40 MB.
- Only one ack message is returned for each update message.
- When creating a NIC handle, the number is required.
- The initials for NIC handles are optional and can be taken from the name in the
  'person:' or 'role:' attribute if not specified.
- NIC handles cannot be reused once deleted.
- The organisation ID is always auto-generated and must be specified as 'AUTO-n'.
- A 'mntner' object must be created for any first objects in the database.
- 'Authorisation from the organisation object is required when an org: attribute is
  added.'
- 'Authorisation from the irt object is required when a mnt-irt: attribute is added.'
- Access control limits apply to personal data queries.
- The default response is grouped unless the -G or --no-grouping query flag is included.
- Retrieving any other object type does not affect the counters for person and role
  objects.
- You cannot mirror a remote database directly to the main source (LOCAL).
- The server will send a stream of available data from the database on a server operated
  by the RIPE NCC.
- If the client has not pulled any data from the NRTM stream for more than 14 days,
  the database must be reinitialized.
- Uses various flags for querying different object types.
- Some query flags affect the specificity of returned objects.
- All your human resources and Internet resources and authentication tokens should
  hang off this central point.
- A netname is made up of letters, digits, the underscore character and the hyphen
  character.
- The first character of a name must be a letter, and the last character of a name
  must be a letter or a digit.
- Sets can be built with hierarchical names.
- All set name components of a hierarchical name must be specified.
- The IRT object may only be referenced from inetnum and inet6num objects.
- The maximum limit on the size of an email message is 40 MB.
- It is strongly recommended to keep MIME encapsulation simple.
- NIC handles are no longer reusable after being used.
- Objects cannot be deleted if referenced by other objects.
- PGP can be used with updates submitted by e-mail or using the syncupdates facility.
- X.509 signed updates cannot be submitted via the RESTful API.
- Authorisation from the organisation object is required when an org attribute is
  added to a referencing object.
- Authorisation from the irt object is required when a mnt-irt attribute is added
  to a referencing object.
- The RIPE NCC mirrors several other databases in near real-time.
- Running your own mirror is not supported!
- Initial data set is available from the FTP site in individual and single data file
  formats.
- Clients can request data using the -g query flag.
- Ensure database username and password matches what you have locally. (Normally this
  should be 'dbint' with no password)
- If MariaDB was installed through brew on an Apple Silicon machine, new configuration
  files can be added under /opt/homebrew/etc/my.cnf.d/
- Restart MariaDB once all configuration changes have been made.
- Authentication is required from the parent object when creating inet(6)num, route(6)
  or domain objects.
- 'Full list of changes can be found in the source repository: https://github.com/RIPE-NCC/whois/blob/master/changes.txt'
- Uses OAuth 2.0
- Requires setup of authentication scheme as per RIPE Database guidelines.
- Please refer to [RPSL RFC 2622](https://tools.ietf.org/html/rfc2622) and [RPSLng
  RFC 4012](https://tools.ietf.org/html/rfc4012) for more information.
- The TEST database is reset to a default state each night.
- No value should be put on the data in the TEST database.
- 'The API key is composed of two parts: a username and a password.'
- The contact details provided by an irt object must be business information and must
  not contain any personal information.
- Maximum limit on the size of an email message is 40 MB.
- It is strongly recommended to keep MIME encapsulation simple. Complex MIME structures
  are more likely to generate errors.
- Authorisation from the organisation object is only required when an 'org:' attribute
  is added to a referencing object.
- Authorisation can be approved by any of the mntner objects referenced in any of
  the 'mnt-ref:' attributes of the organisation object.
- Queries for Autonomous Systems can be either 32-bit or 16-bit.
- Abuse contact email addresses appear in the query output as a comment line.
- The import could take several hours.
- If the client has not pulled data for more than 14 days, reinitialisation is required.
- Ensure MariaDB and the needed databases are created and populated
- Use 'mysql' to create databases and run schema scripts
- If the update was successful, you should then be able to query for your object in
  the RIPE Database.
- The purpose of the RIPE Database is to assist the operation of the Internet in the
  RIPE region.
- Uses client certificate authentication — no secret shared with the Whois server
  during the request.
- API keys are a way to authenticate updates in the RIPE Database.
- Queries can be sent to the RIPE Database without the need to wait for the previous
  query to return.
errors:
- '400: Bad request'
- '401: Authentication failure'
- '403: Forbidden'
- '404: Not Found'
- '429: Too Many Request'
- '500: Internal Server Error'
- '400: Illegal input - incorrect value in one or more of the parameters'
- '404: No object(s) found'
- The RIPE NCC does not guarantee the accuracy, completeness or availability of the
  RIPE Database or of the data contained therein.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Authorisation for [%s] %s failed

  using "%s:"

  not authenticated by: %s'
- '400 Bad request: Incorrect value for object type or key.'
- '401 Authentication failure: Incorrect password.'
- '403 Forbidden: Query limit exceeded.'
- '404 Not Found: No results were found.'
- '429 Too Many Request: Query limit exceeded.'
- '500 Internal Server Error: The server encountered an unexpected condition.'
- 'Authentication failure (401): Incorrect password'
- 'Forbidden (403): Query limit exceeded.'
- 'Too Many Request (429): Query limit exceeded.'
- 'Not Found (404): No results were found (on a search request), or object specified
  in URI does not exist.'
- 'Method not Allowed (405): No results were found (on a search request), or object
  specified in URI does not exist.'
- 'Conflict (409): Integrity constraint was violated (e.g. when creating, object already
  exists).'
- 'Unsupported Media Type (415): Unsupported/missing value for Accept/Content-Type
  header.'
- 'Internal Server Error (500): The server encountered an unexpected condition which
  prevented it from fulfilling the request.'
- Error occurs if you paste more than one object into a text area.
- No acknowledgement will be returned if the connection has timed out.
- '200 OK: successful'
- '400 Bad Request: invalid HTTP request, URL or parameters'
- Invalid keywords in subject line will be reported in the acknowledgement reply.
- Connection closed by foreign host.
- If one of the checks fails, the operation fails for this object.
- If a person object creation fails, a later object creation which references this
  person object will fail the referential integrity checks.
- '401 Unauthorized: Check permissions or authentication details.'
- '409 Conflict: Attempting to reuse a deleted NIC handle.'
- '403: Authorisation error'
- '200: Update successfully processed'
- '401 Unauthorized: Recheck authorisation tokens'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- Update will fail if no suitable maintainer is found in the 'mnt-ref:' attributes.
- If there is an error, both will receive a notification.
- 'Unauthorized: Operation not authorized by maintainer.'
- 'Object not found: The specified object does not exist.'
- 'Unauthorized: Recheck your authentication details.'
- 'Not Found: Verify the domain object exists.'
- Unsupported digest type for ds-rdata attribute
- '405 Method not Allowed: No results found.'
- '409 Conflict: Integrity constraint was violated.'
- '415 Unsupported Media Type: Unsupported/missing value for Accept/Content-Type header.'
- 'QUERY_LIMIT_EXCEEDED: Query execution aborted due to limits.'
- 'ACCESS_BLOCKED: IP address has been temporarily blocked.'
- Filtered output can therefore not be accidentally used for updates.
- 'QUERY_LIMIT_EXCEEDED: The query execution is aborted and the connection is terminated.'
- 'PERMANENT_BLOCK: Your IP address will remain on the blocked list.'
- Blocked for excessive querying of personal data
- Connection issues may occur if the TCP keepalive option is not set.
- If a client is blocked from Whois for excessive querying of personal data, they
  will also be blocked from NRTM.
- '401 Unauthorized: Recheck access permissions or account status'
- 'IP_BLOCKED: The client''s IP has been blocked.'
- 'DATABASE_ERROR: An error occurred while accessing the database.'
- 'AUTHORIZATION_FAILED: Check your credentials or permissions.'
- 'ERROR: Update rejected due to critical test failure.'
- 'ERROR: No SOA RR were found. | No Start of Authority records were found. This tends
  to indicate that the nominated name servers are not replying correctly for the zone
  in question. Usually, the fix for this involves reloading all of the name servers.'
- 'WARNING: some of the specified name servers appear to be in the same subnet. According
  to RFC 2182, they should be geographically separated. | If you supply two or more
  name servers that appear to be in the same physical location, this warning is a
  reminder that the zone may not be visible if your connection to the Internet fails.
  We highly recommend that you have multiple geographically distributed secondary
  name servers.'
- 'ERROR: NS RR for abc.b.c.d found on xyz.b.c.d but not in template. | The machine
  abc.b.c.d is reported to be a name server for this domain by the machine xyz.b.c.d,
  but you did not list abc.b.c.d when submitting the domain object.'
- 'ERROR: nserver: a.b.c.d ERROR: The specified name server is not responding | The
  name server a.b.c.d has failed to respond because: * a name server process is not
  running on port 53; or * the name server does not accept both UDP and TCP port 53
  queries; or * the name server process is running on the given host but has not been
  loaded with information about itself Correct your name server or firewall/router
  configuration and resubmit the domain object.'
- 'ERROR: cross-check of listed NS RR failed. | The name servers on both zones should
  be the same.'
- 'ERROR: SOA on "machine1.b.c.d" does not match SOA on "machine2.b.c.d". | Some of
  the name servers supplied could not be contacted, or some of them failed to respond
  appropriately, i.e. there may not be a name server running on the hosts, or they
  may not know about the zone in question. This message is also generated when the
  list of name servers that you supply does not match the list of name servers that
  you set up. The comparison is done on a textual basis, meaning that supplying IP
  addresses will not work.'
- 'REQUEST_LIMIT_EXCEEDED: An object cannot be created if it already exists.'
- '401 Unauthorized: Only the RIPE NCC is authorised to add or remove RIPE NCC maintainers.'
- 'Error: Authorisation failed'
- '201: Access Denied'
- '%ERROR:101: no entries found'
- '%ERROR:102: unknown source'
- '%ERROR:103: unknown object type'
- '%ERROR:104: unknown attribute'
- '%ERROR:105: attribute is not searchable'
- '%ERROR:106: no query argument specified'
- '%ERROR:107: input line too long'
- '%ERROR:108: bad character in input'
- '%ERROR:109: invalid combination of flags passed'
- '%ERROR:110: multiple use of flag'
- '%ERROR:111: invalid option supplied'
- '%ERROR:112: unsupported query'
- '%ERROR:114: unsupported query'
- '%ERROR:115: invalid search key'
- '%ERROR:116: unsupported query'
- '%ERROR:117: version cannot exceed X for this object'
- '%ERROR:201: access denied'
- '%ERROR:202: access control limit reached'
- '%ERROR:203: address passing not allowed'
- '%ERROR:301: connection has been closed'
- '%ERROR:302: referral timeout'
- '%ERROR:303: no referral host'
- '%ERROR:304: referral host not responding'
- '%ERROR:305: connection has been closed'
- '%ERROR:306: connections exceeded'
- '%ERROR:401: invalid range: Not within <rst>-<last>'
- 'AUTHORIZATION_FAILED: Check your maintainer password.'
- '200 OK: The person object is updated successfully if the response is 200 OK.'
- User may not use the RIPE Database or the data contained therein for advertising,
  direct marketing, marketing research or similar purposes.
- 'Unrecognized source: %s'
- '"%s" is not valid for this object type'
- Object [%s] %s is referenced from other objects
- '400 Bad Request: Check the syntax of your request.'
- '404 Not Found: The requested resource does not exist.'
- 'Bad request (400): Incorrect value for object type or key. The server is unable
  to understand and process the request.'
- '401 Authentication failure: Incorrect password'
- '429 Too Many Requests: Query limit exceeded.'
- '404 Not Found: No results were found (on a search request), or object specified
  in URI does not exist.'
- '405 Method Not Allowed: No results were found (on a search request), or object
  specified in URI does not exist.'
- '409 Conflict: Integrity constraint was violated (e.g. when creating, object already
  exists).'
- '500 Internal Server Error: The server encountered an unexpected condition which
  prevented it from fulfilling the request.'
- '403 Forbidden: Authorisation failure'
- '200 OK: Update successfully processed'
- Syntax error in %s
- '401 Unauthorized: Check your RIPE NCC Access account credentials.'
- 'Permission Denied: Ensure you have the correct maintainer credentials.'
- 'Not Found (404): Resource specified was not found'
- 'Authorisation for [%s] %s failed using "%s:" not authenticated by: %s'
- 'Object type and key specified in URI (%s: %s) do not match the WhoisResources contents'
- Invalid source '%s'
- '405 Method not Allowed: No results were found (on a search request), or object
  specified in URI does not exist.'
- '401 Unauthorized: Recheck API key or SSO credentials'
- '200: Search successful'
- '404 Not Found: The requested object does not exist.'
- 'OK (200): Successful update'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '200: Update processed successfully'
- 'Not Found (404): No results were found.'
- 'Bad request (400): Incorrect value for object type or key.'
- 'Conflict (409): Integrity constraint was violated.'
- 'Internal Server Error (500): The server encountered an unexpected condition.'
- 'BLOCKED_ACCESS: Contact RIPE Database Administration if you believe this is an
  error.'
- 'CONNECTION_LIMIT_REACHED: Limit on the number of simultaneous connections from
  a host has been reached.'
- 'NRTM server: nrtm.enabled=false'
- 'NRTM client: nrtm.import.enabled=true'
- 'ERROR: No SOA RR were found.'
- 'ERROR: The specified name server is not responding.'
- '401 Unauthorized: Recheck authentication scheme or credentials'
- '404 Not Found: Check the endpoint path or parameters'
- '429 Too Many Requests: Rate limit exceeded, please slow down requests'
- '200 OK: The update was successful.'
- '401 Unauthorized: Ensure the API key is correct.'
- '404 Not Found: No results were found'
- '500 Internal Server Error: The server encountered an unexpected condition'
- '403: Authorization error'
- 'ERROR: No SOA RR were found. | No Start of Authority records were found.'
- 'WARNING: some of the specified name servers appear to be in the same subnet.'
- '429 Too Many Requests: User is temporarily blocked from making further queries.'
auth_info:
  mentioned_objects:
  - mntner
  - irt
  - key-cert
  - inet(6)num
  - TEST-DBM-MNT
  - TEST-NCC-HM-MNT
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://rest.db.ripe.net
  headers:
    Accept: application/json
source_metadata: null
