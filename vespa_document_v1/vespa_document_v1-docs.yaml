resources:
- name: document
  endpoint:
    path: /document/v1/<namespace>/<document-type>/docid/<document-id>
    method: GET
    data_selector: fields
    params: {}
- name: visit
  endpoint:
    path: /document/v1/
    method: GET
    data_selector: documents
    params:
      cluster: <cluster>
- name: put_document
  endpoint:
    path: /document/v1/<namespace>/<document-type>/docid/<document-id>
    method: POST
    data_selector: fields
    params: {}
- name: music
  endpoint:
    path: /music
    method: GET
    data_selector: '*'
    params:
      hits: 5
- name: sources
  endpoint:
    path: /sources
    method: GET
    data_selector: '*'
    params: {}
- name: document_put
  endpoint:
    path: /document/put
    method: PUT
    data_selector: fields
- name: document_update
  endpoint:
    path: /document/update
    method: UPDATE
    data_selector: fields
- name: document_get
  endpoint:
    path: /document/get
    method: GET
    data_selector: fields
- name: document_remove
  endpoint:
    path: /document/remove
    method: DELETE
    data_selector: fields
- name: feed_documents
  endpoint:
    path: /feed
    method: POST
    data_selector: operations
- name: export_documents
  endpoint:
    path: /visit
    method: GET
    data_selector: documents
- name: inlinks
  endpoint:
    path: /search/?yql=select%20*%20from%20doc%20where%20true&ranking=inlinks
    method: GET
    data_selector: results
- name: inlinks_age
  endpoint:
    path: /search/?yql=select%20*%20from%20doc%20where%20true&ranking=inlinks_age
    method: GET
    data_selector: results
- name: term_count_similarity
  endpoint:
    path: /search/?yql=select%20*%20from%20doc%20where%20true;&ranking=term_count_similarity&input.query(q_term_count)=1000
    method: GET
    data_selector: results
- name: inlink_similarity
  endpoint:
    path: /search/?yql=select%20*%20from%20doc%20where%20true&ranking=inlink_similarity&input.query(links)={%20{%20links:/en/query-profiles.html%7D:1,%20{%20links:/en/page-templates.html%7D:1,%20{%20links:/en/overview.html%7D:1%20}
    method: GET
    data_selector: results
- name: inlinks_twophase
  endpoint:
    path: /search/?yql=select%20*%20from%20doc%20where%20title%20contains%20%22attribute%22&ranking=inlinks_twophase
    method: GET
    data_selector: results
- name: weakAnd
  endpoint:
    path: /search/?yql=select%20*%20from%20doc%20where%20%7BscoreThreshold:%200,%20targetHits:%2010%7DweakAnd(default%20contains%20%22vespa%22,default%20contains%20%22documents%22,default%20contains%20%22about%22,default%20contains%20%22ranking%22,default%20contains%20%22and%22,default%20contains%20%22retrieval%22)
    method: GET
    data_selector: results
- name: news
  endpoint:
    path: /document
    method: POST
    data_selector: documents
    params: {}
- name: news
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: news
  endpoint:
    path: /news
    method: GET
    data_selector: documents
    params: {}
- name: news
  endpoint:
    path: /mind/news
    method: GET
    data_selector: records
- name: behaviors
  endpoint:
    path: /mind/behaviors
    method: GET
    data_selector: records
- name: news
  endpoint:
    path: /news
    method: GET
    data_selector: results
    params: {}
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: results
    params: {}
- name: user_profile_searcher
  endpoint:
    path: /search/
    method: GET
    data_selector: results
    params:
      user_id: U33527
      searchChain: user
- name: category_ctr
  endpoint:
    path: /schemas/category_ctr.sd
    method: GET
    data_selector: records
    params: {}
- name: news
  endpoint:
    path: /schemas/news.sd
    method: GET
    data_selector: records
    params: {}
- name: msmarco
  endpoint:
    path: /msmarco
    method: GET
    data_selector: root.children
    params:
      language: en
- name: msmarco
  endpoint:
    path: /msmarco
    method: GET
    data_selector: children
    params: {}
- name: documents
  endpoint:
    path: /documents
    method: POST
    data_selector: records
- name: documents
  endpoint:
    path: /search/
    method: POST
    data_selector: root.children
    params:
      targetHits: 10
- name: rank_feature_data
  endpoint:
    path: /query
    method: POST
    data_selector: root.children
    params:
      ranking.listFeatures: 'true'
- name: document
  endpoint:
    path: /document
    method: PUT
    data_selector: fields
    params: {}
- name: query
  endpoint:
    path: /query
    method: GET
    data_selector: queries
    params: {}
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: documents
    params: {}
- name: doc
  endpoint:
    path: /schema/doc
    method: GET
    data_selector: records
- name: doc
  endpoint:
    path: /doc
    method: GET
    data_selector: records
    params: {}
- name: query_profile_deepresearch
  endpoint:
    path: /query-profile/deepresearch
    method: GET
    data_selector: query_profiles
    params:
      hits: '100'
      timeout: 5s
- name: query_profile_rag_with_gbdt
  endpoint:
    path: /query-profile/rag-with-gbdt
    method: GET
    data_selector: query_profiles
    params:
      hits: '50'
      searchChain: openai
      presentation.format: sse
- name: similarity_scores
  endpoint:
    path: /api/v1/similarity_scores
    method: GET
    data_selector: scores
    params: {}
- name: first_phase_ranking
  endpoint:
    path: /eval/evaluate_ranking.py
    method: GET
    data_selector: results
    params: {}
- name: second_phase_ranking
  endpoint:
    path: /eval/evaluate_ranking.py
    method: GET
    data_selector: results
    params:
      second_phase: true
- name: document
  endpoint:
    path: /document/v1
    method: GET
    data_selector: documents
    params: {}
- name: query
  endpoint:
    path: /query
    method: GET
    data_selector: results
    params: {}
- name: query
  endpoint:
    path: /query
    method: GET
    data_selector: records
- name: feed
  endpoint:
    path: /feed
    method: POST
    data_selector: records
- name: music
  endpoint:
    path: /schemas/music
    method: GET
    data_selector: document
    params: {}
- name: books
  endpoint:
    path: /schemas/books
    method: GET
    data_selector: document
    params: {}
- name: documents
  endpoint:
    path: /document/v1/
    method: POST
    data_selector: documents
    params: {}
- name: advertiser
  endpoint:
    path: /services/data/v1.0/documents/advertiser
    method: GET
    data_selector: fields
    params: {}
- name: campaign
  endpoint:
    path: /services/data/v1.0/documents/campaign
    method: GET
    data_selector: fields
    params: {}
- name: salesperson
  endpoint:
    path: /services/data/v1.0/documents/salesperson
    method: GET
    data_selector: fields
    params: {}
- name: ad
  endpoint:
    path: /services/data/v1.0/documents/ad
    method: GET
    data_selector: fields
    params: {}
- name: schema
  endpoint:
    path: /schema/v1/
    method: GET
- name: reindex
  endpoint:
    path: /deploy/rest/api/v2/reindex
    method: POST
- name: reindexing_progress
  endpoint:
    path: /deploy/rest/api/v2/reindexing
    method: GET
- name: document
  endpoint:
    path: /document/v1/
    method: GET
    data_selector: ''
    params: {}
- name: document
  endpoint:
    path: /document/v1
    method: GET
    data_selector: records
    params: {}
- name: music_document
  endpoint:
    path: /document/v1/mynamespace/music/docid
    method: GET
    data_selector: documents
- name: visit
  endpoint:
    path: /document/v1
    method: GET
    data_selector: documents
    params: {}
- name: document
  endpoint:
    path: /document
    method: GET
    data_selector: documents
    params: {}
- name: VisitorSession
  endpoint:
    path: /createVisitorSession
    method: POST
    data_selector: VisitorSessionData
    params: {}
- name: VisitorDestinationSession
  endpoint:
    path: /createVisitorDestinationSession
    method: POST
    data_selector: VisitorDestinationData
    params: {}
- name: doc
  endpoint:
    path: /search/
    method: GET
    data_selector: hits
    params:
      timeout: 10s
- name: documents
  endpoint:
    path: /search/
    method: GET
    data_selector: hits
    params:
      timeout: 10s
- name: web
  endpoint:
    path: /search
    method: GET
- name: java-api
  endpoint:
    path: /search
    method: GET
- name: query_profile
  endpoint:
    path: /search/query-profiles
    method: GET
    data_selector: profiles
    params: {}
- name: query_profile_type
  endpoint:
    path: /search/query-profiles/types
    method: GET
    data_selector: types
    params: {}
- name: product
  endpoint:
    path: /product
    method: GET
    data_selector: documents
    params:
      targetHits: '100'
- name: nearest_neighbor_search
  endpoint:
    path: /nearestNeighbor
    method: POST
    data_selector: results
    params:
      targetHits: 100
      approximate: true
- name: track
  endpoint:
    path: /services/data/vXX.X/sobjects/track
    method: GET
    data_selector: records
    params: {}
- name: track
  endpoint:
    path: /track
    method: GET
    data_selector: root.children
    params:
      targetHits: '10'
- name: track
  endpoint:
    path: /track
    method: GET
    data_selector: children
    params:
      targetHits: '100'
- name: track
  endpoint:
    path: /track
    method: GET
    data_selector: fields
    params:
      targetHits: 10
- name: rank_profile
  endpoint:
    path: /reference/rank-profile
    method: GET
    data_selector: rank_profiles
    params: {}
- name: rank_features
  endpoint:
    path: /reference/rank-features
    method: GET
    data_selector: rank_features
    params: {}
- name: hugging-face-embedder
  endpoint:
    path: /container/default
    method: GET
- name: bert-embedder
  endpoint:
    path: /container
    method: GET
- name: colbert-embedder
  endpoint:
    path: /container
    method: GET
- name: splade-embedder
  endpoint:
    path: /container
    method: GET
- name: tensor_playground
  endpoint:
    path: /playground
    method: GET
    data_selector: examples
    params: {}
- name: adding_scalars_to_a_tensor
  endpoint:
    path: /adding_scalars_to_a_tensor
    method: GET
    data_selector: records
- name: dot_product_between_query_and_document_vectors
  endpoint:
    path: /dot_product_between_query_and_document_vectors
    method: GET
    data_selector: records
- name: logistic_regression_models_with_cross_features
  endpoint:
    path: /logistic_regression_models_with_cross_features
    method: GET
    data_selector: records
- name: matrix_product_between_1d_vector_and_2d_matrix
  endpoint:
    path: /matrix_product_between_1d_vector_and_2d_matrix
    method: GET
    data_selector: records
- name: using_a_tensor_as_a_lookup_structure
  endpoint:
    path: /using_a_tensor_as_a_lookup_structure
    method: GET
    data_selector: records
- name: slicing_with_lambda
  endpoint:
    path: /slicing_with_lambda
    method: GET
    data_selector: records
- name: doc
  endpoint:
    path: /
    method: GET
    data_selector: root.children
- name: export_model
  endpoint:
    path: /exporting/cross-encoder/models
    method: POST
    data_selector: model
    params: {}
- name: import_model
  endpoint:
    path: /import/onnx/tokenizer
    method: POST
    data_selector: model
    params: {}
- name: model
  endpoint:
    path: /api/v1/models
    method: POST
    data_selector: model_data
    params: {}
- name: rank_profile
  endpoint:
    path: /api/v1/rank_profiles
    method: POST
    data_selector: rank_profile_data
    params: {}
- name: document
  endpoint:
    path: /document/v1
    method: GET
    data_selector: records
    params: {}
- name: my_onnx_model
  endpoint:
    path: files/my_model.onnx
    method: POST
    data_selector: model_output_0
- name: XGBoostModel
  endpoint:
    path: /models/xgboost
    method: POST
    data_selector: model
    params: {}
- name: stateless_model_evaluation
  endpoint:
    path: /models/
    method: GET
    data_selector: models
- name: model_evaluation
  endpoint:
    path: /model-evaluation/v1/
    method: GET
    data_selector: models
- name: model_eval
  endpoint:
    path: /model-evaluation/v1/<model-name>/<function>/eval
    method: GET
    data_selector: evaluation
- name: significance_models
  endpoint:
    path: /services/data/vXX.X/significance
    method: GET
    data_selector: models
    params: {}
- name: document
  endpoint:
    path: /document/v1
    method: GET
    data_selector: records
- name: blog
  endpoint:
    path: /search/
    method: GET
    data_selector: results
    params:
      query: vespa ranking
      datetime: now
      ranking.profile: blog
      input.query(textMatchWeight): '0.1'
      input.query(deservesFreshness): '0.85'
- name: passages
  endpoint:
    path: /passages
    method: GET
    data_selector: documents
- name: hugging-face-embedder
  endpoint:
    path: /transformer-model
    method: POST
    data_selector: transformer-model
    params:
      model-id: e5-small-v2
- name: bert-embedder
  endpoint:
    path: /transformer-model
    method: POST
    data_selector: transformer-model
    params:
      model-id: minilm-l6-v2
- name: open_nlp_config
  endpoint:
    path: /config/ai.vespa.opennlp.open-nlp
    method: GET
    data_selector: config
    params: {}
- name: application_package
  endpoint:
    path: /deploy
    method: POST
    data_selector: application
    params: {}
- name: query-service
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: feed-service
  endpoint:
    path: /
    method: POST
    data_selector: records
- name: metrics
  endpoint:
    path: /metrics/
    method: GET
    data_selector: response
    params: {}
- name: document
  endpoint:
    path: /document/v1/
    method: DELETE
    data_selector: response
    params:
      cluster: music
      selection: 'true'
- name: document
  endpoint:
    path: /document/v1
    method: GET
    data_selector: records
    params: {}
- name: query
  endpoint:
    path: /query/v1
    method: GET
    data_selector: results
    params: {}
- name: system_test
  endpoint:
    path: /path-to/system-test
    method: GET
    data_selector: tests
    params: {}
- name: staging_setup
  endpoint:
    path: /path-to/staging-setup
    method: GET
    data_selector: tests
    params: {}
- name: staging_test
  endpoint:
    path: /path-to/staging-test
    method: GET
    data_selector: tests
    params: {}
- name: production_test
  endpoint:
    path: /path-to/production-test
    method: GET
    data_selector: tests
    params: {}
- name: search_chain
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params: {}
- name: document_processor
  endpoint:
    path: /services
    method: POST
    data_selector: document-processing
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: MyComponent
  endpoint:
    path: /services/data/v1.0/com.yahoo.example.MyComponent
    method: GET
    data_selector: components
    params: {}
- name: MyDependency
  endpoint:
    path: /services/data/v1.0/com.yahoo.example.MyDependency
    method: GET
    data_selector: components
    params: {}
- name: default
  endpoint:
    path: /searchchains/default
    method: GET
- name: document_processing_default
  endpoint:
    path: /document-processing/default
    method: GET
- name: my-component
  endpoint:
    path: /src/main/resources/configdefinitions/my-component.def
    method: GET
    data_selector: records
    params: {}
- name: basic-application
  endpoint:
    path: /services/data/vXX.X/sobjects/BasicApplication
    method: GET
    data_selector: records
    params: {}
- name: DemoHandler
  endpoint:
    path: http://*/*
    method: GET
    data_selector: queries
    params: {}
- name: demo
  endpoint:
    path: /demo
    method: GET
    data_selector: result
    params:
      terms: something completely different
- name: main-server
  endpoint:
    path: /
    method: GET
- name: server_provider
  endpoint:
    path: /services.xml
    method: POST
    data_selector: server
    params: {}
- name: hello-world-server
  endpoint:
    path: /components/src/main/resources/configdefinitions/hello-world-server.def
    method: GET
    data_selector: response
    params:
      port: 16889
- name: LLM
  endpoint:
    path: /query
    method: GET
    data_selector: data
    params:
      format: sse
- name: myChunks
  endpoint:
    path: myDocumentType/myChunks
    method: POST
    data_selector: myChunks
    params: {}
- name: myEmbeddings
  endpoint:
    path: myDocumentType/myEmbeddings
    method: POST
    data_selector: myEmbeddings
    params: {}
- name: local_llm
  endpoint:
    path: /services/data/vXX.X/sobjects/LocalLLM
    method: GET
    data_selector: records
    params: {}
- name: rag_searcher
  endpoint:
    path: /search
    method: GET
    params:
      query: what was the manhattan project?
- name: passage
  endpoint:
    path: /schema/passage
    method: GET
    data_selector: records
- name: barley_description
  endpoint:
    path: /barley/description
    method: GET
    data_selector: text
    params: {}
- name: barley_questions
  endpoint:
    path: /barley/questions
    method: GET
    data_selector: questions
    params: {}
- name: barley_names
  endpoint:
    path: /barley/names
    method: GET
    data_selector: names
    params: {}
- name: questions_generator
  endpoint:
    path: /services/data/vXX.X/sobjects/QuestionsGenerator
    method: GET
    data_selector: records
- name: names_extractor
  endpoint:
    path: /services/data/vXX.X/sobjects/NamesExtractor
    method: GET
    data_selector: records
- name: attribute_flush
  endpoint:
    path: /services/data/proton/attribute_flush
    method: GET
    data_selector: job
    params: {}
- name: memory_index_flush
  endpoint:
    path: /services/data/proton/memory_index_flush
    method: GET
    data_selector: job
    params: {}
- name: disk_index_fusion
  endpoint:
    path: /services/data/proton/disk_index_fusion
    method: GET
    data_selector: job
    params: {}
- name: document_store_flush
  endpoint:
    path: /services/data/proton/document_store_flush
    method: GET
    data_selector: job
    params: {}
- name: document_store_compaction
  endpoint:
    path: /services/data/proton/document_store_compaction
    method: GET
    data_selector: job
    params: {}
- name: bucket_move
  endpoint:
    path: /services/data/proton/bucket_move
    method: GET
    data_selector: job
    params: {}
- name: lid_space_compaction
  endpoint:
    path: /services/data/proton/lid_space_compaction
    method: GET
    data_selector: job
    params: {}
- name: removed_documents_pruning
  endpoint:
    path: /services/data/proton/removed_documents_pruning
    method: GET
    data_selector: job
    params: {}
- name: bucket_operations
  endpoint:
    path: /buckets/operations
    method: GET
    data_selector: operations
    params: {}
- name: track
  endpoint:
    path: /search
    method: GET
    data_selector: fields
    params: {}
- name: track
  endpoint:
    path: /document/v1/music/track/docid/{track_id}
    method: GET
    data_selector: fields
    params: {}
- name: query
  endpoint:
    path: /search/
    method: GET
    data_selector: root
    params: {}
- name: track
  endpoint:
    path: /app/schemas/track.sd
    method: POST
    data_selector: schema
    params: {}
- name: my-content
  endpoint:
    path: /services/data/v1.0/my-content
    method: GET
    data_selector: documents
    params: {}
- name: doc
  endpoint:
    path: /api/doc
    method: GET
    data_selector: records
    params: {}
- name: Rate Limiting Searcher
  endpoint:
    path: /search
    method: GET
    params:
      rate.id: clientA
      rate.quota: 300
- name: Query Profile Default
  endpoint:
    path: /query-profiles/default
    method: GET
    params:
      rate.quota: 100
      rate.id: default
- name: Query Profile ClientA
  endpoint:
    path: /query-profiles/clientA
    method: GET
    params:
      rate.quota: 200
      rate.id: clientA
- name: Query Profile ClientB
  endpoint:
    path: /query-profiles/clientB
    method: GET
    params:
      rate.quota: 400
      rate.id: clientB
- name: search
  endpoint:
    path: /search/
    method: GET
    data_selector: request_1
    params:
      query: ${userinput}
- name: nodes
  endpoint:
    path: /nodes
    method: GET
    data_selector: resources
    params:
      count: '8'
      vcpu: '4'
      memory: 16Gb
      disk: 300Gb
- name: deployment
  endpoint:
    path: /deployment.xml
    method: GET
- name: services
  endpoint:
    path: /services.xml
    method: GET
- name: documents
  endpoint:
    path: /bank
    method: GET
    data_selector: documents
    params: {}
- name: index
  endpoint:
    path: /_cat/indices
    method: GET
    data_selector: indices
    params: {}
- name: document_export
  endpoint:
    path: /document/v1
    method: GET
    data_selector: documents
    params: {}
- name: document_delete
  endpoint:
    path: /document/v1
    method: DELETE
    data_selector: continuation_token
    params: {}
- name: export_documents
  endpoint:
    path: /config/set/application
    method: POST
- name: backup_documents
  endpoint:
    path: /visit
    method: GET
- name: feed_documents
  endpoint:
    path: /feed
    method: POST
- name: document_export
  endpoint:
    path: /document/v1/
    method: GET
    data_selector: documents
    params:
      cluster: documentation
- name: documents
  endpoint:
    path: /document/v1/${NAMESPACE}/${DOCTYPE}/docid
    method: DELETE
    data_selector: continuation
    params:
      selection: doc.path%3D~%22%5E%2Fold%2F%22
      cluster: ${CLUSTER}
- name: document
  endpoint:
    path: /document/v1/
    method: GET
    data_selector: ''
    params:
      cluster: documentation
- name: document_export
  endpoint:
    path: /document/v1/
    method: GET
    data_selector: documents
    params:
      cluster: $CLUSTER
- name: export_documents
  endpoint:
    path: /export/documents
    method: GET
    data_selector: records
    params: {}
- name: backup_documents
  endpoint:
    path: /backup/documents
    method: POST
    data_selector: records
    params: {}
- name: feed_documents
  endpoint:
    path: /feed/documents
    method: POST
    data_selector: records
    params: {}
- name: document_export
  endpoint:
    path: /document/v1/
    method: GET
    data_selector: documents
    params:
      cluster: documentation
- name: application_package
  endpoint:
    path: /fetch
    method: GET
    data_selector: application
    params: {}
- name: access_log
  endpoint:
    path: /logs/vespa/access/JsonAccessLog.default
    method: GET
    data_selector: logs
    params: {}
- name: prometheus_metrics
  endpoint:
    path: /prometheus/v1/values
    method: GET
    data_selector: values
    params: {}
- name: prometheus_metrics
  endpoint:
    path: /prometheus/v1/values
    method: GET
    data_selector: values
    params: {}
- name: metrics
  endpoint:
    path: /prometheus/v1/values
    method: GET
    data_selector: metrics
    params: {}
- name: private_endpoint
  endpoint:
    path: /endpoints/private
    method: POST
    data_selector: service_id
    params:
      auth-method: token
- name: access_logs
  endpoint:
    path: gs://vespa-cloud-data-prod-gcp-us-central1-f-73770f/mytenant/myapp/myinstance/h404a/logs/access
    method: GET
    data_selector: logs
    params: {}
- name: archive_logs
  endpoint:
    path: /vespa-cloud-data-prod.aws-us-east-1c-9eb633/vespa-team/
    method: GET
    data_selector: Contents
    params:
      request_payer: requester
- name: document
  endpoint:
    path: /document/v1
    method: GET
    data_selector: records
    params: {}
- name: query
  endpoint:
    path: /query/v1
    method: GET
    data_selector: results
    params: {}
- name: metrics_v2_values
  endpoint:
    path: /metrics/v2/values
    method: GET
    data_selector: nodes
    params:
      consumer: vespa
- name: prometheus_v1_values
  endpoint:
    path: /prometheus/v1/values
    method: GET
    data_selector: metrics
    params:
      consumer: vespa
- name: access_log
  endpoint:
    path: /access/log
    method: GET
    data_selector: logs
    params: {}
- name: connection_log
  endpoint:
    path: /connection/log
    method: GET
    data_selector: connections
    params: {}
- name: configserver
  endpoint:
    path: /state/v1/health
    method: GET
    data_selector: status
    params: {}
- name: Config server
  endpoint:
    path: /en/operations-selfhosted/configuration-server.html
    method: GET
    data_selector: records
    params: {}
- name: Config sentinel
  endpoint:
    path: /en/operations-selfhosted/config-sentinel.html
    method: GET
    data_selector: records
    params: {}
- name: Config proxy
  endpoint:
    path: /en/operations-selfhosted/config-proxy.html
    method: GET
    data_selector: records
    params: {}
- name: Slobrok
  endpoint:
    path: /en/operations-selfhosted/slobrok.html
    method: GET
    data_selector: records
    params: {}
- name: logd
  endpoint:
    path: /en/reference/logs.html#logd
    method: GET
    data_selector: records
    params: {}
- name: Log server
  endpoint:
    path: /en/reference/logs.html#log-server
    method: GET
    data_selector: records
    params: {}
- name: Metrics proxy
  endpoint:
    path: /en/operations-selfhosted/monitoring.html#metrics-proxy
    method: GET
    data_selector: records
    params: {}
- name: Distributor
  endpoint:
    path: /en/content/content-nodes.html#distributor
    method: GET
    data_selector: records
    params: {}
- name: Cluster controller
  endpoint:
    path: /en/content/content-nodes.html#cluster-controller
    method: GET
    data_selector: records
    params: {}
- name: proton
  endpoint:
    path: /en/proton.html
    method: GET
    data_selector: records
    params: {}
- name: container
  endpoint:
    path: /en/jdisc/index.html
    method: GET
    data_selector: records
    params: {}
- name: service
  endpoint:
    path: /state/v1/health
    method: GET
    data_selector: status
- name: tls_configuration
  endpoint:
    path: /absolute/path/to/my-tls-config.json
    method: GET
    data_selector: files
    params: {}
- name: health
  endpoint:
    path: /state/v1/health
    method: GET
- name: config
  endpoint:
    path: /state/v1/config
    method: GET
- name: config-sentinel
  endpoint:
    path: /config/sentinel
    method: RPC
    data_selector: services
- name: vespa-configproxy-cmd
  endpoint:
    path: /vespa-configproxy-cmd
    method: GET
    data_selector: active configIds
    params: {}
- name: vespa-configserver-remove-state
  endpoint:
    path: /vespa-configserver-remove-state
    method: POST
    data_selector: remove state
    params:
      force: true
- name: vespa-config-status
  endpoint:
    path: /vespa-config-status
    method: GET
    data_selector: running services
    params: {}
- name: vespa-deploy
  endpoint:
    path: /vespa-deploy
    method: POST
    data_selector: deploy application package
    params: {}
- name: vespa-get-cluster-state
  endpoint:
    path: /vespa-get-cluster-state
    method: GET
    data_selector: cluster state
    params: {}
- name: vespa-get-config
  endpoint:
    path: /vespa-get-config
    method: GET
    data_selector: configuration payload
    params:
      n: defName
      i: configId
- name: vespa-get-node-state
  endpoint:
    path: /vespa-get-node-state
    method: GET
    data_selector: node state
    params: {}
- name: vespa-logctl
  endpoint:
    path: /vespa-logctl
    method: GET
    data_selector: log_levels
    params: {}
- name: vespa-logfmt
  endpoint:
    path: /vespa-logfmt
    method: GET
    data_selector: formatted_messages
    params: {}
- name: vespa-model-inspect
  endpoint:
    path: /vespa-model-inspect
    method: GET
    data_selector: model_info
    params: {}
- name: vespa-sentinel-cmd
  endpoint:
    path: /vespa-sentinel-cmd
    method: GET
    data_selector: service_status
    params: {}
- name: vespa-significance
  endpoint:
    path: /vespa-significance
    method: POST
    data_selector: significance_model
    params: {}
- name: vespa-stat
  endpoint:
    path: /vespa-stat
    method: GET
- name: vespa-status-filedistribution
  endpoint:
    path: /vespa-status-filedistribution
    method: GET
- name: vespa-stop-configserver
  endpoint:
    path: /vespa-stop-configserver
    method: POST
- name: vespa-stop-services
  endpoint:
    path: /vespa-stop-services
    method: POST
- name: vespa-visit
  endpoint:
    path: /vespa-visit
    method: POST
- name: vespa-visit-target
  endpoint:
    path: /vespa-visit-target
    method: POST
- name: album-recommendation
  endpoint:
    path: /album-recommendation
    method: GET
    data_selector: data
    params: {}
- name: multinode-HA
  endpoint:
    path: /multinode-HA
    method: GET
    data_selector: data
    params: {}
- name: node_metrics
  endpoint:
    path: /metrics/v1/values
    method: GET
    data_selector: services
- name: process_metrics
  endpoint:
    path: /state/v1/metrics
    method: GET
    data_selector: metrics
- name: aggregated_metrics
  endpoint:
    path: /metrics/v2/values
    method: GET
    data_selector: nodes
- name: prometheus_metrics
  endpoint:
    path: /prometheus/v1/values
    method: GET
    data_selector: services
- name: node_metrics
  endpoint:
    path: /metrics/v1/values
    method: GET
    data_selector: metrics
    params: {}
- name: process_metrics
  endpoint:
    path: /state/v1/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: aggregated_node_metrics
  endpoint:
    path: /metrics/v2/values
    method: GET
    data_selector: metrics
    params: {}
- name: prometheus_metrics
  endpoint:
    path: /prometheus/v1/values
    method: GET
    data_selector: metrics
    params: {}
- name: health
  endpoint:
    path: /state/v1/health
    method: GET
    data_selector: status
- name: metrics
  endpoint:
    path: /state/v1/metrics
    method: GET
    data_selector: status
- name: metrics_v1_values
  endpoint:
    path: /metrics/v1/values
    method: GET
    data_selector: services
- name: metrics_v2_values
  endpoint:
    path: /metrics/v2/values
    method: GET
    data_selector: nodes
- name: prometheus_values
  endpoint:
    path: /prometheus/v1/values
    method: GET
    data_selector: services
- name: default
  endpoint:
    path: /routing/version/1.0
    method: GET
- name: service
  endpoint:
    path: /services
    method: GET
    data_selector: ''
    params: {}
- name: container-search
  endpoint:
    path: /services/version/1.0/container-search
    method: GET
    data_selector: nodes
    params: {}
- name: container-indexing
  endpoint:
    path: /services/version/1.0/container-indexing
    method: GET
    data_selector: nodes
    params: {}
- name: services
  endpoint:
    path: /services.xml
    method: GET
    data_selector: services
- name: deployment
  endpoint:
    path: /deployment.xml
    method: GET
    data_selector: deployment
- name: security_clients
  endpoint:
    path: /security/clients.pem
    method: GET
    data_selector: clients
- name: rank-features
  endpoint:
    path: /rank/profile/rank-features
    method: GET
- name: inputs
  endpoint:
    path: /rank/profile/inputs
    method: GET
- name: constants
  endpoint:
    path: /rank/profile/constants
    method: GET
- name: rank-properties
  endpoint:
    path: /rank/profile/rank-properties
    method: GET
- name: function
  endpoint:
    path: /rank/profile/function
    method: GET
- name: second-phase
  endpoint:
    path: /rank/profile/second-phase
    method: GET
- name: global-phase
  endpoint:
    path: /rank/profile/global-phase
    method: GET
- name: summary-features
  endpoint:
    path: /rank/profile/summary-features
    method: GET
- name: match-features
  endpoint:
    path: /rank/profile/match-features
    method: GET
- name: mutate
  endpoint:
    path: /rank/profile/mutate
    method: GET
- name: constant
  endpoint:
    path: /rank/profile/constant
    method: GET
- name: onnx-model
  endpoint:
    path: /rank/profile/onnx-model
    method: GET
- name: significance
  endpoint:
    path: /rank/profile/significance
    method: GET
- name: document-summary
  endpoint:
    path: /rank/profile/document-summary
    method: GET
- name: stemming
  endpoint:
    path: /rank/profile/stemming
    method: GET
- name: normalizing
  endpoint:
    path: /rank/profile/normalizing
    method: GET
- name: dictionary
  endpoint:
    path: /rank/profile/dictionary
    method: GET
- name: container
  endpoint:
    path: /services/container
    method: GET
    data_selector: ''
    params: {}
- name: content
  endpoint:
    path: /services/content
    method: GET
    data_selector: ''
    params: {}
- name: admin
  endpoint:
    path: /services/admin
    method: GET
    data_selector: ''
    params: {}
- name: routing
  endpoint:
    path: /services/routing
    method: GET
    data_selector: ''
    params: {}
- name: adminserver
  endpoint:
    path: /adminserver
    method: GET
    data_selector: admin
    params: {}
- name: cluster-controllers
  endpoint:
    path: /cluster-controllers
    method: GET
    data_selector: controllers
    params: {}
- name: configserver
  endpoint:
    path: /configserver
    method: GET
    data_selector: config
    params: {}
- name: logserver
  endpoint:
    path: /logserver
    method: GET
    data_selector: logs
    params: {}
- name: slobrok
  endpoint:
    path: /slobrok
    method: GET
    data_selector: slobroks
    params: {}
- name: monitoring
  endpoint:
    path: /monitoring
    method: GET
    data_selector: metrics
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metric
    params: {}
- name: container
  endpoint:
    path: /services/data/v1.0/container
    method: GET
    data_selector: container
    params: {}
- name: documents
  endpoint:
    path: /content/documents
    method: GET
    data_selector: document
- name: max-document-size
  endpoint:
    path: /tuning/max-document-size
    method: GET
    data_selector: max-document-size
    params: {}
- name: merges
  endpoint:
    path: /tuning/merges
    method: GET
    data_selector: merges
    params: {}
- name: persistence-threads
  endpoint:
    path: /tuning/persistence-threads
    method: GET
    data_selector: persistence-threads
    params: {}
- name: visitors
  endpoint:
    path: /tuning/visitors
    method: GET
    data_selector: visitors
    params: {}
- name: max-concurrent
  endpoint:
    path: /tuning/visitors/max-concurrent
    method: GET
    data_selector: max-concurrent
    params: {}
- name: resource-limits
  endpoint:
    path: /tuning/resource-limits
    method: GET
    data_selector: resource-limits
    params: {}
- name: dispatch
  endpoint:
    path: /tuning/dispatch
    method: GET
    data_selector: dispatch
    params: {}
- name: cluster-controller
  endpoint:
    path: /tuning/cluster-controller
    method: GET
    data_selector: cluster-controller
    params: {}
- name: documentprocessor
  endpoint:
    path: /documentprocessor
    method: GET
    data_selector: records
- name: server1
  endpoint:
    path: /server1
    method: GET
    data_selector: records
    params:
      id: server1
      port: 8080
- name: server2
  endpoint:
    path: /server2
    method: GET
    data_selector: records
    params:
      id: server2
      port: 9000
- name: processor1
  endpoint:
    path: processor
    method: GET
    data_selector: id
    params: {}
- name: processor2
  endpoint:
    path: processor
    method: GET
    data_selector: id
    params: {}
- name: renderer1
  endpoint:
    path: renderer
    method: GET
    data_selector: id
    params: {}
- name: default
  endpoint:
    path: chain
    method: GET
    data_selector: id
    params: {}
- name: group
  endpoint:
    path: /bcp/group
    method: GET
    data_selector: groups
    params: {}
- name: host
  endpoint:
    path: /hosts.xml
    method: GET
    data_selector: hosts.host
    params: {}
- name: validation-overrides
  endpoint:
    path: /validation-overrides
    method: GET
    data_selector: validation-id
    params: {}
- name: service_config_generation
  endpoint:
    path: /state/v1/config
    method: GET
    data_selector: config
    params: {}
- name: service_version
  endpoint:
    path: /state/v1/version
    method: GET
    data_selector: version
    params: {}
- name: service_health
  endpoint:
    path: /state/v1/health
    method: GET
    data_selector: status
    params: {}
- name: service_metrics
  endpoint:
    path: /state/v1/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: service_metric_histograms
  endpoint:
    path: /state/v1/metrics/histograms
    method: GET
    data_selector: histograms
    params: {}
- name: prepareandactivate
  endpoint:
    path: /application/v2/tenant/default/prepareandactivate
    method: POST
    data_selector: session-id
- name: session
  endpoint:
    path: /application/v2/tenant/default/session
    method: POST
    data_selector: session-id
- name: content
  endpoint:
    path: /application/v2/tenant/default/session/{session-id}/content/{path}
    method: GET
    data_selector: content
- name: list_configs
  endpoint:
    path: /config/v2/tenant/mytenant/application/myapplication/
    method: GET
    data_selector: children
    params:
      recursive: 'false'
- name: list_namespace
  endpoint:
    path: /config/v2/tenant/mytenant/application/myapplication/[namespace.name]/
    method: GET
    data_selector: children
    params: {}
- name: list_prefix
  endpoint:
    path: /config/v2/tenant/mytenant/application/myapplication/[namespace.name]/[config/subid]/
    method: GET
    data_selector: children
    params: {}
- name: get_config
  endpoint:
    path: /config/v2/tenant/mytenant/application/myapplication/[namespace.name]/[config/id]
    method: GET
    data_selector: payload
    params: {}
- name: list_tenants
  endpoint:
    path: /application/v2/tenant/
    method: GET
    data_selector: '[]'
    params: {}
- name: get_tenant
  endpoint:
    path: /application/v2/tenant/default
    method: GET
    data_selector: message
    params: {}
- name: create_tenant
  endpoint:
    path: /application/v2/tenant/default
    method: PUT
    data_selector: message
    params: {}
- name: delete_tenant
  endpoint:
    path: /application/v2/tenant/default
    method: DELETE
    data_selector: message
    params: {}
- name: list_clusters
  endpoint:
    path: /cluster/v2/
    method: GET
    data_selector: clusters
    params: {}
- name: get_cluster_state
  endpoint:
    path: /cluster/v2/<cluster>
    method: GET
    data_selector: cluster_state
    params: {}
- name: list_nodes_per_service_type
  endpoint:
    path: /cluster/v2/<cluster>/<service-type>
    method: GET
    data_selector: nodes
    params: {}
- name: get_node_state
  endpoint:
    path: /cluster/v2/<cluster>/<service-type>/<node>
    method: GET
    data_selector: node_state
    params: {}
- name: set_node_state
  endpoint:
    path: /cluster/v2/<cluster>/<service-type>/<node>
    method: PUT
    data_selector: set_state
    params: {}
- name: node_metrics
  endpoint:
    path: /metrics/v1/values
    method: GET
    data_selector: services
    params:
      consumer: default
- name: application_metrics
  endpoint:
    path: /values
    method: GET
    data_selector: nodes
    params: {}
- name: node_metrics
  endpoint:
    path: /values
    method: GET
    data_selector: ''
    params: {}
- name: primitive_functions
  endpoint:
    path: /tensor/functions/primitive
    method: GET
    data_selector: functions
    params: {}
- name: lambda_functions
  endpoint:
    path: /tensor/functions/lambda
    method: GET
    data_selector: functions
    params: {}
- name: non_primitive_functions
  endpoint:
    path: /functions/non-primitive
    method: GET
    data_selector: functions
    params: {}
- name: rank_profile
  endpoint:
    path: /services/directory/rank_profiles
    method: POST
    data_selector: rank-properties
    params: {}
- name: example
  endpoint:
    path: /models/example.model
    method: GET
    data_selector: model
    params: {}
- name: huggingface_embedder
  endpoint:
    path: /services/data/vXX.X/embedding
    method: POST
    data_selector: results
- name: bert_embedder
  endpoint:
    path: /services/data/vXX.X/bert
    method: POST
    data_selector: results
- name: colbert_embedder
  endpoint:
    path: /services/data/vXX.X/colbert
    method: POST
    data_selector: results
- name: sentencepiece_embedder
  endpoint:
    path: /services/data/vXX.X/sentencepiece
    method: POST
    data_selector: results
- name: wordpiece_embedder
  endpoint:
    path: /services/data/vXX.X/wordpiece
    method: POST
    data_selector: results
- name: query
  endpoint:
    path: /query
    method: GET
    data_selector: results
    params: {}
- name: sources
  endpoint:
    path: /search/
    method: GET
    data_selector: documents
    params: {}
- name: root
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: timing
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: trace
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: page
  endpoint:
    path: /page
    method: GET
    data_selector: results
    params: {}
- name: section
  endpoint:
    path: /section
    method: GET
    data_selector: results
    params: {}
- name: titles
  endpoint:
    path: /titles
    method: GET
    data_selector: titles
    params: {}
- name: alternates
  endpoint:
    path: /alternates
    method: GET
    data_selector: alternates
    params: {}
- name: built-in chunkers
  endpoint:
    path: /chunkers
    method: GET
    data_selector: chunkers
    params: {}
- name: custom chunker
  endpoint:
    path: /chunker/components
    method: POST
    data_selector: components
    params: {}
- name: document_operations
  endpoint:
    path: /document/v1/
    method: POST
    data_selector: fields
- name: add_array_elements
  endpoint:
    path: /add/array/elements
    method: POST
    data_selector: fields.tracks.add
- name: add_weighted_set_entries
  endpoint:
    path: /add/weighted/set/entries
    method: POST
    data_selector: fields.int_weighted_set.add
- name: add_tensor_cells
  endpoint:
    path: /add/tensor/cells
    method: POST
    data_selector: fields.tensorfield.add
- name: remove_weighted_set_entries
  endpoint:
    path: /remove/weighted/set/entries
    method: POST
    data_selector: fields.string_weighted_set.remove
- name: remove_tensor_cells
  endpoint:
    path: /remove/tensor/cells
    method: POST
    data_selector: fields.tensorfield.remove
- name: arithmetic_operations
  endpoint:
    path: /arithmetic
    method: POST
    data_selector: fields.sales.increment
- name: match_weighted_set
  endpoint:
    path: /match/weighted/set
    method: POST
    data_selector: fields.track_popularity.match
- name: modify_tensors
  endpoint:
    path: /modify/tensors
    method: POST
    data_selector: fields.tensorfield.modify
- name: cluster_controller_metrics
  endpoint:
    path: /metrics/cluster_controller
    method: GET
    data_selector: metrics
    params: {}
- name: container_metrics
  endpoint:
    path: /metrics/container
    method: GET
    data_selector: metrics
    params: {}
- name: distributor_metrics
  endpoint:
    path: /distributor/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: logd_metrics
  endpoint:
    path: /logd/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: nodeadmin_metrics
  endpoint:
    path: /nodeadmin/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: bitvector_lookups
  endpoint:
    path: /content/proton/index/cache/bitvector/lookups
    method: GET
    data_selector: operation
    params: {}
- name: bitvector_invalidations
  endpoint:
    path: /content/proton/index/cache/bitvector/invalidations
    method: GET
    data_selector: operation
    params: {}
- name: index_memory_usage_allocated_bytes
  endpoint:
    path: /content/proton/documentdb/index/memory_usage/allocated_bytes
    method: GET
    data_selector: byte
    params: {}
- name: index_memory_usage_used_bytes
  endpoint:
    path: /content/proton/documentdb/index/memory_usage/used_bytes
    method: GET
    data_selector: byte
    params: {}
- name: index_memory_usage_dead_bytes
  endpoint:
    path: /content/proton/documentdb/index/memory_usage/dead_bytes
    method: GET
    data_selector: byte
    params: {}
- name: index_memory_usage_onhold_bytes
  endpoint:
    path: /content/proton/documentdb/index/memory_usage/onhold_bytes
    method: GET
    data_selector: byte
    params: {}
- name: index_io_search_read_bytes
  endpoint:
    path: /content/proton/documentdb/index/io/search/read_bytes
    method: GET
    data_selector: byte
    params: {}
- name: index_io_search_cached_read_bytes
  endpoint:
    path: /content/proton/documentdb/index/io/search/cached_read_bytes
    method: GET
    data_selector: byte
    params: {}
- name: index_disk_usage
  endpoint:
    path: /content/proton/documentdb/ready/index/disk_usage
    method: GET
    data_selector: byte
    params: {}
- name: matching_queries
  endpoint:
    path: /content/proton/documentdb/matching/queries
    method: GET
    data_selector: query
    params: {}
- name: matching_soft_doomed_queries
  endpoint:
    path: /content/proton/documentdb/matching/soft_doomed_queries
    method: GET
    data_selector: query
    params: {}
- name: matching_query_latency
  endpoint:
    path: /content/proton/documentdb/matching/query_latency
    method: GET
    data_selector: second
    params: {}
- name: matching_query_setup_time
  endpoint:
    path: /content/proton/documentdb/matching/query_setup_time
    method: GET
    data_selector: second
    params: {}
- name: matching_docs_matched
  endpoint:
    path: /content/proton/documentdb/matching/docs_matched
    method: GET
    data_selector: document
    params: {}
- name: matching_rank_profile_queries
  endpoint:
    path: /content/proton/documentdb/matching/rank_profile/queries
    method: GET
    data_selector: query
    params: {}
- name: matching_rank_profile_soft_doomed_queries
  endpoint:
    path: /content/proton/documentdb/matching/rank_profile/soft_doomed_queries
    method: GET
    data_selector: query
    params: {}
- name: matching_rank_profile_soft_doom_factor
  endpoint:
    path: /content/proton/documentdb/matching/rank_profile/soft_doom_factor
    method: GET
    data_selector: fraction
    params: {}
- name: matching_rank_profile_query_latency
  endpoint:
    path: /content/proton/documentdb/matching/rank_profile/query_latency
    method: GET
    data_selector: second
    params: {}
- name: matching_rank_profile_query_setup_time
  endpoint:
    path: /content/proton/documentdb/matching/rank_profile/query_setup_time
    method: GET
    data_selector: second
    params: {}
- name: matching_rank_profile_grouping_time
  endpoint:
    path: /content/proton/documentdb/matching/rank_profile/grouping_time
    method: GET
    data_selector: second
    params: {}
- name: matching_rank_profile_rerank_time
  endpoint:
    path: /content/proton/documentdb/matching/rank_profile/rerank_time
    method: GET
    data_selector: second
    params: {}
- name: matching_rank_profile_docs_matched
  endpoint:
    path: /content/proton/documentdb/matching/rank_profile/docs_matched
    method: GET
    data_selector: document
    params: {}
- name: matching_rank_profile_limited_queries
  endpoint:
    path: /content/proton/documentdb/matching/rank_profile/limited_queries
    method: GET
    data_selector: query
    params: {}
- name: feeding_commit_operations
  endpoint:
    path: /content/proton/documentdb/feeding/commit/operations
    method: GET
    data_selector: operation
    params: {}
- name: feeding_commit_latency
  endpoint:
    path: /content/proton/documentdb/feeding/commit/latency
    method: GET
    data_selector: second
    params: {}
- name: sentinel_metrics
  endpoint:
    path: /sentinel/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: slobrok_metrics
  endpoint:
    path: /slobrok/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: storage_metrics
  endpoint:
    path: /storage/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: cluster-controller
  endpoint:
    path: /metrics/cluster-controller
    method: GET
    data_selector: metrics
    params: {}
- name: container
  endpoint:
    path: /metrics/container
    method: GET
    data_selector: metrics
    params: {}
- name: distributor
  endpoint:
    path: /metrics/distributor
    method: GET
    data_selector: metrics
    params: {}
- name: nodeadmin
  endpoint:
    path: /metrics/nodeadmin
    method: GET
    data_selector: metrics
    params: {}
- name: searchnode
  endpoint:
    path: /metrics/searchnode
    method: GET
    data_selector: metrics
    params: {}
- name: sentinel
  endpoint:
    path: /metrics/sentinel
    method: GET
    data_selector: metrics
    params: {}
- name: storage
  endpoint:
    path: /metrics/storage
    method: GET
    data_selector: metrics
    params: {}
- name: buckets_rechecking
  endpoint:
    path: /vds/idealstate/buckets_rechecking
    method: GET
    data_selector: bucket
- name: idealstate_diff
  endpoint:
    path: /vds/idealstate/idealstate_diff
    method: GET
    data_selector: bucket
- name: buckets_toofewcopies
  endpoint:
    path: /vds/idealstate/buckets_toofewcopies
    method: GET
    data_selector: bucket
- name: buckets_toomanycopies
  endpoint:
    path: /vds/idealstate/buckets_toomanycopies
    method: GET
    data_selector: bucket
- name: buckets
  endpoint:
    path: /vds/idealstate/buckets
    method: GET
    data_selector: bucket
- name: buckets_notrusted
  endpoint:
    path: /vds/idealstate/buckets_notrusted
    method: GET
    data_selector: bucket
- name: bucket_replicas_moving_out
  endpoint:
    path: /vds/idealstate/bucket_replicas_moving_out
    method: GET
    data_selector: bucket
- name: bucket_replicas_copying_out
  endpoint:
    path: /vds/idealstate/bucket_replicas_copying_out
    method: GET
    data_selector: bucket
- name: bucket_replicas_copying_in
  endpoint:
    path: /vds/idealstate/bucket_replicas_copying_in
    method: GET
    data_selector: bucket
- name: bucket_replicas_syncing
  endpoint:
    path: /vds/idealstate/bucket_replicas_syncing
    method: GET
    data_selector: bucket
- name: max_observed_time_since_last_gc_sec
  endpoint:
    path: /vds/idealstate/max_observed_time_since_last_gc_sec
    method: GET
    data_selector: second
- name: distributor_stats_failures
  endpoint:
    path: /vds/distributor/stats/failures
    method: GET
    data_selector: operation
    params: {}
- name: distributor_update_gets_failures
  endpoint:
    path: /vds/distributor/update_gets/failures
    method: GET
    data_selector: operation
    params: {}
- name: distributor_update_metadata_gets_failures
  endpoint:
    path: /vds/distributor/update_metadata_gets/failures
    method: GET
    data_selector: operation
    params: {}
- name: distributor_update_puts_failures
  endpoint:
    path: /vds/distributor/update_puts/failures
    method: GET
    data_selector: operation
    params: {}
- name: idealstate_bucket_state
  endpoint:
    path: /vds/idealstate/set_bucket_state
    method: GET
    data_selector: operation
    params: {}
- name: bouncer_clock_skew_aborts
  endpoint:
    path: /vds/bouncer/clock_skew_aborts
    method: GET
    data_selector: operation
    params: {}
- name: documentdb
  endpoint:
    path: /content/proton/documentdb
    method: GET
    data_selector: documents
    params: {}
- name: document_store_cache
  endpoint:
    path: /content/proton/documentdb/store/cache
    method: GET
    data_selector: cache
    params: {}
- name: index_cache_postinglist
  endpoint:
    path: /content/proton/index/cache/postinglist
    method: GET
    data_selector: postinglist
    params: {}
- name: index_cache_bitvector
  endpoint:
    path: /content/proton/index/cache/bitvector
    method: GET
    data_selector: bitvector
    params: {}
- name: documentdb_matching
  endpoint:
    path: /content/proton/documentdb/matching
    method: GET
    data_selector: matching
    params: {}
- name: session_cache_grouping
  endpoint:
    path: /content/proton/session_cache/grouping
    method: GET
    data_selector: grouping
    params: {}
- name: session_cache_search
  endpoint:
    path: /content/proton/session_cache/search
    method: GET
    data_selector: search
    params: {}
- name: datastored_alldisks_buckets
  endpoint:
    path: /vds/datastored/alldisks/buckets
    method: GET
    data_selector: bucket
- name: datastored_alldisks_docs
  endpoint:
    path: /vds/datastored/alldisks/docs
    method: GET
    data_selector: document
- name: datastored_alldisks_bytes
  endpoint:
    path: /vds/datastored/alldisks/bytes
    method: GET
    data_selector: byte
- name: datastored_alldisks_activebuckets
  endpoint:
    path: /vds/datastored/alldisks/activebuckets
    method: GET
    data_selector: bucket
- name: datastored_alldisks_readybuckets
  endpoint:
    path: /vds/datastored/alldisks/readybuckets
    method: GET
    data_selector: bucket
- name: visitor_allthreads_averagevisitorlifetime
  endpoint:
    path: /vds/visitor/allthreads/averagevisitorlifetime
    method: GET
    data_selector: millisecond
- name: visitor_allthreads_averagequeuewait
  endpoint:
    path: /vds/visitor/allthreads/averagequeuewait
    method: GET
    data_selector: millisecond
- name: visitor_allthreads_queuesize
  endpoint:
    path: /vds/visitor/allthreads/queuesize
    method: GET
    data_selector: operation
- name: visitor_allthreads_completed
  endpoint:
    path: /vds/visitor/allthreads/completed
    method: GET
    data_selector: operation
- name: visitor_allthreads_created
  endpoint:
    path: /vds/visitor/allthreads/created
    method: GET
    data_selector: operation
- name: visitor_allthreads_failed
  endpoint:
    path: /vds/visitor/allthreads/failed
    method: GET
    data_selector: operation
- name: visitor_allthreads_averagemessagesendtime
  endpoint:
    path: /vds/visitor/allthreads/averagemessagesendtime
    method: GET
    data_selector: millisecond
- name: visitor_allthreads_averageprocessingtime
  endpoint:
    path: /vds/visitor/allthreads/averageprocessingtime
    method: GET
    data_selector: millisecond
- name: visitor_allthreads_aborted
  endpoint:
    path: /vds/visitor/allthreads/aborted
    method: GET
    data_selector: instance
- name: visitor_allthreads_averagevisitorcreationtime
  endpoint:
    path: /vds/visitor/allthreads/averagevisitorcreationtime
    method: GET
    data_selector: millisecond
- name: visitor_allthreads_destination_failure_replies
  endpoint:
    path: /vds/visitor/allthreads/destination_failure_replies
    method: GET
    data_selector: instance
- name: merge_failures
  endpoint:
    path: /vds/mergethrottler/mergechains/failures
    method: GET
    data_selector: failures
    params: {}
- name: memory_usage
  endpoint:
    path: /vds/server/memoryusage
    method: GET
    data_selector: memory_usage
    params: {}
- name: visitor_queue
  endpoint:
    path: /vds/visitor/cv_queue
    method: GET
    data_selector: visitor_queue
    params: {}
- name: network_capability_checks
  endpoint:
    path: /vds/server/network/capability-checks
    method: GET
    data_selector: capability_checks
    params: {}
- name: connections
  endpoint:
    path: /vds/server/fnet/num-connections
    method: GET
    data_selector: num_connections
    params: {}
- name: configserver_requests
  endpoint:
    path: /configserver/requests
    method: GET
    data_selector: requests
- name: configserver_failedRequests
  endpoint:
    path: /configserver/failedRequests
    method: GET
    data_selector: failedRequests
- name: configserver_latency
  endpoint:
    path: /configserver/latency
    method: GET
    data_selector: latency
- name: configserver_hosts
  endpoint:
    path: /configserver/hosts
    method: GET
    data_selector: hosts
- name: configserver_tenants
  endpoint:
    path: /configserver/tenants
    method: GET
    data_selector: tenants
- name: configserver_applications
  endpoint:
    path: /configserver/applications
    method: GET
    data_selector: applications
- name: configserver_delayedResponses
  endpoint:
    path: /configserver/delayedResponses
    method: GET
    data_selector: delayedResponses
- name: configserver_sessionChangeErrors
  endpoint:
    path: /configserver/sessionChangeErrors
    method: GET
    data_selector: sessionChangeErrors
- name: configserver_unknownHostRequests
  endpoint:
    path: /configserver/unknownHostRequests
    method: GET
    data_selector: unknownHostRequests
- name: logd_processed_lines
  endpoint:
    path: /logd/metrics
    method: GET
    data_selector: logd.processed.lines
    params: {}
- name: endpoint_certificate_expiry
  endpoint:
    path: /endpoint/certificate/expiry/seconds
    method: GET
    data_selector: expiry
    params: {}
- name: node_certificate_expiry
  endpoint:
    path: /node-certificate/expiry/seconds
    method: GET
    data_selector: expiry
    params: {}
- name: slobrok_metrics
  endpoint:
    path: /metrics/v1/slobrok
    method: GET
    data_selector: metrics
    params: {}
- name: slobrok_heartbeats_failed
  endpoint:
    path: /slobrok/metrics/heartbeats/failed
    method: GET
    data_selector: request
- name: slobrok_requests_register
  endpoint:
    path: /slobrok/metrics/requests/register
    method: GET
    data_selector: request
- name: slobrok_requests_mirror
  endpoint:
    path: /slobrok/metrics/requests/mirror
    method: GET
    data_selector: request
- name: slobrok_requests_admin
  endpoint:
    path: /slobrok/metrics/requests/admin
    method: GET
    data_selector: request
- name: slobrok_missing_consensus
  endpoint:
    path: /slobrok/metrics/missing/consensus
    method: GET
    data_selector: second
- name: cluster_controller_metrics
  endpoint:
    path: /metrics/cluster-controller
    method: GET
    data_selector: metrics
    params: {}
- name: sentinel_restarts
  endpoint:
    path: /sentinel/restarts
    method: GET
    data_selector: sentinel.restarts
- name: sentinel_total_restarts
  endpoint:
    path: /sentinel/totalRestarts
    method: GET
    data_selector: sentinel.totalRestarts
- name: sentinel_uptime
  endpoint:
    path: /sentinel/uptime
    method: GET
    data_selector: sentinel.uptime
- name: sentinel_running
  endpoint:
    path: /sentinel/running
    method: GET
    data_selector: sentinel.running
- name: document
  endpoint:
    path: /document/v1
    method: GET
    data_selector: records
- name: query
  endpoint:
    path: /query/v1
    method: POST
    data_selector: results
- name: indexing_documents
  endpoint:
    path: /indexing/documents
    method: POST
    data_selector: documents
    params: {}
- name: index_configuration
  endpoint:
    path: /index/configuration
    method: GET
    data_selector: configuration
    params: {}
- name: serializing_index
  endpoint:
    path: /index/serialize
    method: POST
    data_selector: serialized_index
    params: {}
- name: creating_searcher
  endpoint:
    path: /searcher/create
    method: POST
    data_selector: searcher
    params: {}
- name: creating_query
  endpoint:
    path: /query/create
    method: POST
    data_selector: query
    params: {}
- name: executing_query
  endpoint:
    path: /query/execute
    method: GET
    data_selector: query_results
    params: {}
- name: get_document
  endpoint:
    path: /document/v1/<namespace>/<document-type>/docid/<document-id>
    method: GET
    data_selector: ''
    params:
      cluster: ''
- name: visit_documents
  endpoint:
    path: /document/v1/
    method: GET
    data_selector: ''
    params:
      cluster: ''
- name: put_document
  endpoint:
    path: /document/v1/<namespace>/<document-type>/docid/<document-id>
    method: POST
    data_selector: ''
    params: {}
- name: update_document
  endpoint:
    path: /document/v1/<namespace>/<document-type>/docid/<document-id>
    method: PUT
    data_selector: ''
    params: {}
- name: remove_document
  endpoint:
    path: /document/v1/<namespace>/<document-type>/docid/<document-id>
    method: DELETE
    data_selector: ''
    params: {}
notes:
- Requires specifying a content cluster for visiting documents.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Vespa CLI is the command-line client for Vespa.
- Single binary without any runtime dependencies available for Linux, macOS and Windows.
- The input files for vespa feed contains either a JSON array of feed operations,
  or one JSON operation per line (JSONL).
- The <document-api> must be enabled in the container before documents can be fed
  or accessed.
- It is a single binary without any runtime dependencies.
- Uses document types for items, reviews, and queries.
- Supports custom document processors and searchers.
- Includes partial update functionality for existing documents.
- This website utilizes technologies such as cookies to enable essential site functionality.
- Vespa does not have a language like painless - it is more flexible to write application
  logic in a JVM-supported language.
- The only mandatory parameter is the query, using either yql=<yql query> or query=<simple-query>.
- Uses attribute fields for sorting, ranking, and grouping
- Attributes require more memory but enable faster access for sorting and grouping
- Requires setup of connected app in api
- The training script writes these embeddings to the files mind/user_embeddings.tsv
  and mind/news_embeddings.tsv.
- This website utilizes technologies such as cookies to enable essential site functionality,
  as well as for analytics, personalization, and targeted advertising.
- Uses HNSW for approximate nearest neighbor search.
- Adding a trace.level is generally helpful when debugging vespa queries.
- Uses parent-child relationships for efficient updates of global CTR values.
- The sample data must be converted to Vespa JSON feed format.
- Starting the container can take a short while.
- Uses hugging-face-embedder for text embedding
- Ensure Docker or Podman is installed
- Minimum 4 GB RAM required for Docker/Podman
- Uses hybrid search techniques combining lexical keyword matching with text scoring
  and embedding-based search.
- The effectiveness of the hybrid model depends on the dataset and the retrieval strategies.
- Uses Vespa query API to collect rank feature data.
- This is not a 'Deploy RAG in 5 minutes' tutorial.
- Uses a custom dataset generated by a Large Language Model (LLM)
- The dataset contains structured fields for a document search application
- Assume you have chosen a document as your searchable unit.
- Vespa supports automatic chunking in the indexing language.
- This is not a 'Deploy RAG in 5 minutes' tutorial (although you can technically do
  that by following the README in our sample app). This focus is more about providing
  you with the insights and tools for you to apply it to your own use case. Therefore
  we suggest taking your time to look at the code in the sample app, and run the described
  steps.
- The ranking expression may seem complex due to independent embedding of each chunk
  and storing embeddings in a binarized format.
- It is recommended to use a ranking profile that does not use any first-phase ranking,
  to run the match-phase evaluation faster.
- This is not a 'Deploy RAG in 5 minutes' tutorial (although you can technically do
  that by following the README in our sample app). This focus is more about providing
  you with the insights and tools for you to apply it to your own use case.
- Uses OpenAI API for LLM generation.
- Requires an API key stored in the secret store.
- The targetHits parameter does not make sense until your dataset reaches a certain
  scale.
- Use 5-fold stratified cross-validation for model evaluation.
- Consider using different models for different query types.
- Only one docker container named 'vespa' can run at a time.
- Minimum 4 GB RAM dedicated to Docker/Podman
- A document has a string identifier, set by the application, unique across all documents.
- The document identifier string may only contain text characters.
- The namespace has no relation to other configuration elsewhere, like in services.xml
  or in schemas.
- Cyclic or self references are not allowed.
- Concrete types are often used in a docproc, used for feeding data into stateful
  clusters.
- Concrete document types are not supported for document updates or removes.
- Upserts are supported using create parameter.
- A continuation token is used for pagination.
- Visiting does not have snapshot isolation—it returns the state of documents as they
  were when iterated over.
- Uses DocumentAccess class for document operations
- AsyncSession allows for high throughput document repository writes
- The default VisitorDataHandler is VisitorDataQueue which implements a polling API.
- 'When running Vespa in a Docker image on a laptop, one can easily get [UNKNOWN(251009)
  @ tcp/vespa-host:19112/default]: ReturnCode(NO_SPACE, External feed is blocked due
  to resource exhaustion: in content cluster ''example'': disk on node 0 [vespa-host]
  is 76.7% full (the configured limit is 75.0%, effective limit lowered to 74.0% until
  feed unblocked).'
- Fix this by increasing allocated storage for the Docker daemon, clean up unused
  volumes or remove unused Docker images.
- 'HTTP clients will see *507 Server Error: Insufficient Storage* when this happens.'
- When feed is blocked, write operations are rejected by *Distributors*.
- Always **add** nodes, do not change node capacity - this is in practise safer and
  quicker.
- Security filters can block GET and POST requests differently.
- HTTP keepalive is supported.
- Grouping is, by default, tuned to favor performance over correctness.
- Continuations work best when the ordering of hits is stable
- The provider search chain will then be limited to use 100 ms to execute each query.
- If configuring your own federation searcher, you are not limited to a subset of
  these sources.
- The nearestNeighbor query operator calculates values used by the closeness rank
  feature.
- Nearest neighbors search is limited to products where in_stock is true.
- The default query timeout is 500ms, which may be too low for an exact search over
  many vectors.
- Using lower tensor cell type precision can reduce memory footprint significantly.
- Dataset is released under research only, strictly non-commercial terms.
- Utilizing a combination of various query embeddings within a single query request
  holds numerous applications, particularly in cases involving shorter queries with
  inherent ambiguity.
- Vespa allows developers to control how filters are combined with nearestNeighbor
  query operator
- Uses query tracing to debug text matching.
- Old formats for position (those used in Vespa 5, 6, and 7) are still accepted as
  feed input; enabling legacy output is temporarily possible also.
- geoLocation doesn't do proper great-circle-distance calculations.
- Using predicate fields is complex and tuning the configuration for performance requires
  insight in the underlying algorithms.
- The default value for dense-posting-list-threshold is 0.40. Valid range is (0, 1].
- Using both streaming and indexed mode in the same cluster is discouraged.
- Streaming search requires 45 bytes of memory per document regardless of the document
  content.
- Renderers do not need to be thread safe - they can safely use and store state during
  rendering in member variables.
- Page templates are defined as XML configuration files
- A proper optimizing resolver must be deployed as part of the application
- This greedy approach gives the best overall result when documents are sufficiently
  dissimilar.
- Vespa has a set of features that can be used to create diversity.
- Using collapsefield is a cheap option when results only contain a small number of
  duplicates on average.
- Rank profiles can define multiple ranking phases where different ranking expressions
  are applied in sequence.
- Machine learned ranking supports importing models in ONNX, XGBoost, and LightGBM
  formats.
- Vespa uses ranking expressions to rank documents matching a query.
- Ranking expressions can be handwritten or automatically generated using machine
  learning.
- The reranking searcher uses multiphase searching.
- The custom searcher re-ranks the global top 200 documents.
- Uses Vespa for search and re-ranking
- Requires Docker to run Vespa
- Using cross-encoder models can be computationally complex.
- Model must be converted to ONNX format before deployment.
- Requires setup of connected app in Vespa
- When dumping XGBoost models to a JSON representation some of the model information
  is lost
- For training, features should be scraped from Vespa, using either match-features
  or summary-features
- Vespa's speciality is evaluating machine-learned models quickly over large numbers
  of data points.
- Model evaluation requests accepts parameters like format.tensors
- The field must be enabled for usage with the bm25 feature by setting the enable-bm25
  flag in the index section of the field definition.
- Specifying significance models in services.xml is available in Vespa as of version
  8.426.8.
- Some objects may return nulls in deeply nested fields
- The wand query operator allows full control over both query side weights and document
  side weights.
- Nodes that have been provisioned with GPU acceleration, will automatically use GPU
  for embedding inference.
- The E5 family uses keywords with the input to differentiate query and document side
  embedding.
- The default Vespa linguistics implementation uses OpenNLP.
- Never try to debug encoding problems with a web browser.
- Always use a hexdump tool.
- Lucene Linguistics doesn't provide language detection.
- A change to code and configuration is atomically deployed to running instances.
- To ensure code and config consistency, config definition files are compiled to Java
  code.
- An application package is a set of files in a specific structure that defines a
  deployable application.
- As configs are not stored as files locally on the nodes, there is no possibility
  of inconsistencies due to local edits.
- Application code and config is generally pulled from the config server.
- Application packages contain all the configuration, components and machine-learned
  models necessary to deploy and run the application.
- Vespa Cloud upgrades daily, and applications in dev and perf also have their Vespa
  platform upgraded.
- Application does not set up *content* nodes, only *container*.
- It is hence fully stateless, and intended for unit testing the functionality of
  application components.
- System tests should generally start by clearing all documents from the cluster to
  test.
- Tests are written in JSON format
- Uses OAuth2 with refresh token — requires setup of connected app in Vespa
- Some API calls may return rate limiting errors
- To run tests with Maven belonging to a specific category, a JUnit 5 test tag must
  be specified
- Set up a Vespa instance using the quick start.
- This API requires an OAuth2 token for access.
- The container processes requests in a synchronous model using worker threads.
- Each searcher must handle its own state locally to ensure thread safety.
- Searchers which changes the query or contain workflows do not need to do anything
- Searchers which accesses field information (not just id and relevance) from hits
  should always call either fill() to get the default set of fields for each hit type
  or fill(summaryClassName) to get a particular collection of fields known to exist
  in the backend(s) in question.
- Federating searchers should implement both the regular search method and the fill
  method.
- Backend searchers, which wish to support multiphase searching, should initially
  deliver unfilled hits and implement a fill method.
- Changing chain ids, components in a chain, component configuration and schema mapping
  all takes effect after vespa activate - no restart required.
- Changing a cluster name (i.e. the container id) requires a restart of docproc services
  after vespa activate.
- Some objects like Contact may return nulls in deeply nested fields
- The Container only supports constructor injection
- Circular dependencies is not supported
- Files can be transferred using either file distribution or URL download.
- OSGi uses a framework for modular development of Java applications.
- OSGi bundles must have a MANIFEST.MF file that describes its content.
- The bundle version must conform to OSGi's strict versioning rules.
- Make sure that the jar files (i.e. bundles) are actually deployed with correct names
  per services.xml.
- OSGi has a strict definition of version numbers that need to be followed for bundles
  to work correctly.
- If the strategy above does not resolve the case, it's most likely because the class
  in question is loaded by reflection, e.g. `Class.forName("com.acme.utils.Helper")`.
- If the bundle has an Import-Package for a package that is not available at runtime,
  the OSGi framework will report an unresolved constraint error.
- When two bundles interact via their public APIs, it is crucial that both bundles
  resolve each and every participating class to the same Class object.
- ZooKeeper must be explicitly enabled in the container cluster configuration
- The application must specify a dependency on zkfacade
- Libraries for pluggable frameworks rely on loading classes dynamically at runtime
- The ClassNotFoundException means that the bundle is not importing the package
- All server providers require a local reference to CurrentContainer.
- To install a server provider in a container, use the server element in services.xml.
- 'Vespa supports LLMs in three ways: External LLMs, Local LLMs, and Custom language
  models.'
- This feature is available in Vespa versions >= 8.327
- Using a schema like search myDocumentType allows for defining properties of fields
  such as myChunks and myEmbeddings.
- Chunking can be done manually or automatically by Vespa.
- Note that this is currently a Beta feature so changes can be expected.
- Running large language models (LLMs) directly in your Vespa application offers various
  advantages, particularly in terms of data security and privacy.
- Uses GPU if available
- Model URL should point to a valid model
- This is currently a Beta feature so changes can be expected.
- Distributors do not persist the bucket database, the bucket-to-content-node mapping
  is kept in memory in the distributor.
- The algorithm is designed to minimize data movement on state changes.
- Skew in distribution can occur based on random number generation.
- Vespa Cloud locks distribution bit count to 16.
- The loose mode allows for more waste, allowing the amount of nodes to change considerably
  without altering the distribution bit counts.
- The strict mode attempts to keep the waste below 1.0 %.
- Distributors schedule maintenance operations and issue them to content nodes.
- Scheduling a maintenance operation does not block any external operations.
- Vespa per default limits the max hits to 400 per default
- Using dedicated document summaries can improve performance for large number of hits
- Using fast-search can significantly reduce query time.
- Changing the global threads per search requires a restart of the searchnode process.
- Adding a new rank-profile does not require any restart.
- 'Query tracing can be enabled using the parameters: trace.level, trace.explainLevel,
  trace.timestamps.'
- Vespa can scale in multiple scaling dimensions.
- This document helps sizing an application correctly with as low cost as possible.
- Split too-large documents into smaller units for better search quality and performance!
- As of 2025, this is still true also if the 'user' is an LLM in a RAG or agentic
  workflow.
- Returning large document values in the query response over HTTP has a significant
  cost, both in CPU time spent in rendering the response, compression, and network
  transfer time.
- Vespa will block feed operations if resource limits have been reached.
- Vespa cannot sustain a higher write rate than the underlying storage can handle.
- Binarization reduces memory requirements and can improve feeding performance.
- Input must be a list of 8 floats for binarization.
- The document meta store scales linearly with number of documents - using approximately
  30 bytes per document.
- Use vespa-fbench for benchmarking and tuning.
- Vespa-fbench latency results include network latency between the client and the
  Vespa instance.
- The user running benchmarks must have read access to the endpoint - if you already
  have, you can skip this section.
- Monitoring is useful to track metrics when benchmarking.
- Memory Visualizer lets you browse the attribute fields and observe absolute and
  relative size.
- Use the Memory Visualizer to track memory when adding a field.
- Assume there is an installation in a data center that you would like to profile,
  preferably with a nice UI running on your local desktop.
- By default the YourKit agent runs on port 10001.
- Minimum 8 threads.
- Minimum 650 queue capacity (if queue is not disabled).
- The default heap size with docker image is 1.5g which can for high throughput applications
  be on the low side, causing frequent garbage collection.
- Rate-limiting applies to search requests.
- The rate limiting searcher is bundled with Vespa but needs to be configured in services.xml
  before it is loaded.
- Rate limiting can be activated using query parameters or query profiles.
- Default query timeout is 500 ms.
- If the requested document-summary only contains fields that are attributes, the
  summary store (and cache) is not used.
- Simulation runs a constant rate of 100 users for 10 seconds.
- Always re-use connections to avoid connection overhead.
- Clients must use sufficient number of connections to spread the load evenly among
  all containers.
- Vespa Cloud will terminate idle connections after a timeout and active connections
  after a max age threshold is exceeded.
- Prefer HTTP/2 over HTTP/1.1 for better efficiency.
- Handle transient and partial failures with a retry strategy with backoff.
- HTTP/2 is enabled by default on a container for all connectors
- We recommend HTTP/2 with TLS for added security
- The server does not perform a protocol upgrade if a request contains content (POST,
  PUT, PATCH with payload)
- Use fast-search if the attribute field is searched without any other query terms
- Use fast-search if the attribute field could limit the total number of hits efficiently
- Changing fast-search aspect of the attribute is a live change which does not require
  any re-feeding
- Adding or removing fast-search requires restart
- 'When using tensor types with at least one mapped dimension (sparse or mixed tensor),
  attribute: fast-rank can be used to optimize the tensor attribute for ranking expression
  evaluation at the cost of using more memory.'
- To save both memory and compute resources, use multiphase ranking.
- Keep in mind to reset that after profiling session is completed.
- After running valgrind, copy *callgrind.out.* to a host that has *kcachegrind* installed.
- It might also be nice to have access to the code - path to code can be specified
  in kcachegrind.
- Auto-deploy production applications using GitHub Actions
- Deployments run sequentially by default, but can be configured to run in parallel
- Autoscaling lets you adjust the hardware resources allocated to application clusters
  automatically depending on actual usage.
- Autoscaling is not considering latency differences achieved by different configurations.
- Adjusting the allocation of a cluster may happen quickly for stateless container
  clusters, and much more slowly for content clusters with a lot of data.
- The ideal utilization takes into account that a node may be down or failing, that
  another region may be down causing doubling of traffic, and that we need headroom
  for maintenance operations and handling requests with low latency.
- It acts on what it has observed on your system in the recent past.
- Vespa Cloud supports a one-level grouped topology - a group of groups is hence not
  supported.
- Redundancy is a function of data availability / criticality and cost, and varies
  from application to application.
- Use this topology with care - it has few/no benefits over the alternatives, and
  is included here for completeness.
- The application package needs the public key in the security directory.
- At least 2 nodes are required for each cluster to ensure availability during maintenance
  tasks and upgrades.
- Deployments to dev expire after 7 days of inactivity
- Use the Vespa Console to extend the expiry period, or redeploy the application to
  add 7 more days
- Uses Vespa CLI for deployment
- Requires Docker or Podman for local deployment
- The ENDPOINT must be a regional endpoint, do not use '*.g.vespa-app.cloud/'
- Each request will return a response after roughly one minute—change this by specifying
  *timeChunk* (default 60).
- Use the latest version of the vespa command-line client.
- Fieldsets are useful to select a subset of fields to export.
- Instances in dev/perf environments are auto-expired, so application cloning is a
  safe way to work with Vespa.
- Ensure the cluster is never more than 50% full - this gives headroom to later increase/shrink
  the index and change schema configuration easily using automatic reindexing.
- The content node resource configuration should not have ranges for index bootstrap,
  as autoscaling will interfere with the evaluation in this step.
- The resource configuration should be modified so disk is in the 50-80% range of
  memory.
- It is better to add a node than increasing node resources, as data migration is
  quicker.
- Metrics can be fed into external monitoring tools using the Prometheus metrics API.
- Prometheus metrics can be pulled into external monitoring tools using the Prometheus
  metrics API.
- Metrics can be fed into Grafana Cloud or self-hosted Grafana instance.
- This page's content is applicable to Vespa Cloud.
- Following these steps will remove production instances or regions and all data within
  them.
- Data will be unrecoverable.
- Private endpoints use mTLS authentication by default, and token-based authentication
  must be explicitly enabled.
- Only one authentication method can be enabled at the same time.
- Global endpoints do not support feeding. Feeding must be done through zone endpoints.
- If all deployments of an endpoint are deactivated, requests are distributed as if
  all deployments were active.
- 'Always set RequestPayer: ''requester'' to access the objects - transfer cost is
  assigned to the requester.'
- Archiving is per tenant, and a log file is normally stored with a specific key format.
- Always set a user project to access the objects - transfer cost is assigned to the
  requester.
- Running vespa-stop-services on a content node will call prepareRestart to optimize
  restart time.
- A broken content node may end up with processes constantly restarting.
- If Vespa is running in a local container (named "vespa"), run `docker exec vespa
  vespa-logfmt` to quickly dump logs.
- Vespa start scripts will modify the environment (directories, system limits), requiring
  root access.
- The procedure is a bare minimum, for educational purposes.
- Processes are run as user `vespa`.
- Many services are allocated ports dynamically.
- The number of ports used in a range depends on number of instances that are running.
- Vespa is a multiprocess application that can be configured to run multiple services
  per node.
- Start with an 8 GB node to ensure the application is functionally correct.
- 'Ports are allocated dynamically: Config server: 19071, Container node: 8080, Content
  node: 19107'
- Wait for configserver start - wait for 200 OK
- When running self-hosted Vespa instances, hosts running Vespa MUST NOT be directly
  exposed to the public internet or to untrusted networks.
- Inter-node communication inside a Vespa installation is not encrypted by default
  and will need to be configured explicitly as documented in Securing Vespa with mutually
  authenticated TLS.
- By default, the container allows unauthenticated writes to, and reads from, the
  Vespa installation.
- All Vespa processes run under the Linux user given by $VESPA_USER and store their
  data under $VESPA_HOME.
- Securing Vespa with mutually authenticated TLS (mTLS)
- By default, all communication between self-hosted Vespa nodes is unauthenticated
  and unencrypted.
- Enabling TLS is therefore a fundamental part of a secure Vespa installation.
- Only use CAs that you (or your organization) directly control or trust.
- Private keys must be kept secret and protected against unauthorized access.
- Ensure that host.key is only readable by the Vespa user on your host(s)
- The config server serves this configuration to all other Vespa nodes.
- The application packages deployed will not change the config server.
- The other nodes in the system will not receive config until they are upgraded to
  the new version
- 'There will be warnings in vespa log containing ''Request callback failed: UNKNOWN_VESPA_VERSION''
  until the node is upgraded'
- Wait until the node is fully up before doing the next node
- The config sentinel starts and stops services and restarts failed services unless
  they are manually stopped.
- Each service subscribes to configuration from config-proxy.
- The config proxy will always be started in default mode.
- A restart will lose all cached configs.
- Vespa performance improves significantly by enabling Transparent Huge Pages (THP),
  especially for memory-intensive applications.
- All Nvidia GPUs on the host should now be available inside the container, with devices
  exposed at /dev/nvidiaN.
- The current version of Vespa for x86_64 is compiled only for Haswell (2013) or later
  CPUs.
- If trying to run on an older CPU, you will likely see error messages related to
  illegal instructions.
- Changing between index and attribute is a common field change operation to optimize
  performance.
- The reindexing process will populate the field's index structure, but this takes
  time, depending on corpus size.
- 'If the field is used as a filter only (i.e. no ranking), consider adding rank:
  filter.'
- The first thing to validate when troubleshooting query errors is to make sure that
  the endpoint is correct.
- Metrics can be pulled into CloudWatch from both Vespa Cloud and self-hosted Vespa.
- The recommended solution is to use an AWS lambda function for CloudWatch.
- The metrics-proxy normally listens on port 19092
- Metrics are reported in snapshots, where the snapshot specifies the time window
  the metrics are gathered from.
- Only the protocol 'document' is defined.
- Set up *document-api* on the same cluster as indexing to avoid network hop from
  feed endpoint to indexing processors
- If no *document-processing* is configured, it defaults to a container cluster named
  *default*.
- An application package is the deployment unit in Vespa.
- Using tar / gzip is not supported.
- Specifying the index keyword in the indexing statement of a tensor creates an HNSW
  index with default settings, even if this block is not specified!
- HNSW indexes are not supported in streaming search.
- All document frequency calculations are done using content node-local document statistics.
- Results may differ across different content nodes and/or content node groups.
- All the changes listed below require re-feeding of all documents.
- Unless a change is listed in the above sections, treat it as if it were listed here.
- Until re-feed is complete, affected fields will be empty or have potentially wrong
  annotations not matching the query processing.
- Default value is 128 MiB.
- It is strongly recommended to make sure this is not set too high, 10 MiB is a reasonable
  setting for most use cases, setting it above 100 MiB is not recommended.
- The http block is used to configure http servers and filters.
- If a BCP element contains no group elements it will implicitly define a single group
  of all the regions of the instance.
- The current execution value is set to null prior to executing a statement.
- Only cipher suites supporting forward secrecy can be negotiated
- TLS compression is explicitly disabled to mitigate CRIME/BREACH-style compression
  oracle attacks
- TLS renegotiation is explicitly disabled
- TLS session resumption is explicitly disabled
- This API requires authentication
- By default, a container configures an instance of VipStatusHandler to serve /status.html.
- Applications with multiple content clusters should implement custom handlers for
  healthchecks, if the built-in logic is inadequate for the usage.
- Responses are in Prometheus format, the values are the same as in /metrics/v1/values
- The nativeRank feature is a pure text match scoring feature.
- Does not take static rank, geographical location, or age of documents into account.
- 'Types: All rank feature values are floats.'
- Features which are *normalized* are between 0 and 1.
- A query may override *any* rank feature value by submitting that value as a feature
  with the query.
- Some of these features have the same names as features used with the nearestNeighbor
  query operator. Take care not to get them mixed up!
- about is the default ranking type used when it is not explicitly specified which
  type to use.
- The model must be saved as 'example.model' somewhere in the models directory tree
- Deprecated in favor of adding a geoLocation item to the query tree.
- Tracing is subject to change at any time, the below is a guide for trace levels.
- There is no way to query for a field that is not set / equals null or NaN.
- Using a multivalued attribute in a grouping expression affects performance.
- Tensors cannot be used in grouping.
- Using more than one sort expression will give you multilevel sorting.
- If `+`/`-` is omitted, the default is used, either the system-wide default of `+`
  or any override in schema.
- When sorting on attributes, it is recommended to use the built-in *unranked* rank-profile.
- All request handlers need to implement some request handling logic, as well as some
  response dispatch logic.
- A request may or may not have an assigned timeout.
- Uses OAuth2 for authentication
- The identifiers used in this language are not case-sensitive.
- Special care needs to be taken when using document selections referencing imported
  fields.
- The index cannot be changed once built.
- Deserializing an index is significantly faster than creating a new index.
- Deployments to dev are removed 7 days after you last deployed it.
- You can extend the expiry time in the Vespa Console.
errors:
- '400: Bad request. Check document types.'
- '404: Document not found.'
- '429: Too many requests.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Deployment failed, code: 413 ("Payload Too Large.")'
- '429: Slowing down feed speed due to resource contention'
- '400 Bad Request: Check the query syntax or parameters.'
- '404 Not Found: Verify the endpoint and resource availability.'
- '401 Unauthorized: Recheck API key.'
- '408 Request Timeout: Increase timeout or optimize query.'
- 'Invalid query profile: Check profile id and ensure it inherits correctly.'
- '404 Not Found: Document does not exist.'
- '429 Too Many Requests: Implement retry strategies.'
- 'HANDSHAKE_FAILED: An error occurred while resolving version of recipient(s)'
- 'ReturnCode(NO_SPACE, External feed is blocked due to resource exhaustion: in content
  cluster ''example'': memory on node 0 [my-vespa-node-0.example.com] is 82.0% full
  (the configured limit is 80.0%, effective limit lowered to 79.0% until feed unblocked)'
- 'ReturnCode(NO_SPACE, External feed is blocked due to resource exhaustion: in content
  cluster ''example'': attribute-address-space:example.ready.a1.enum-store on node
  0 [my-vespa-node-0.example.com] is 91.0% full (the configured limit is 90.0%))'
- 'Null query: If Vespa cannot generate a valid search expression from the query string.'
- '8: Error in search reply.'
- 'Missing yql parameter: Will emit a Null query error.'
- Total hit count is not accurate.
- Grouping counts are not accurate when using nearestNeighbor search.
- '403 Forbidden: Check tenant and application configuration'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- 'Timed out: Error in execution of chain ''top-chain'': Chain timed out.'
- 'java.lang.IllegalArgumentException: Could not create a component with id ''com.mydomain.lib.FibonacciProducer''.
  Tried to load class directly, since no bundle was found for spec: multiple-bundles-typo.'
- 'java.lang.IllegalArgumentException: Could not load class ''com.example.MissingClass''
  from bundle my-bundle'
- 'java.lang.NoClassDefFoundError: com/acme/utils/Helper'
- 'java.lang.ClassNotFoundException: com.acme.utils.Helper not found by my_bundle
  [29]'
- 'Could not create component: Ensure that the jar files are actually deployed with
  correct names per services.xml.'
- 'Could not load class: Check that the class exists in the declared bundle.'
- 'java.lang.ClassNotFoundException: com.sun.imageio.plugins.jpeg.JPEGImageReaderSpi
  not found by my-bundle'
- '401 Unauthorized: Incorrect API key provided'
- 0 documents returned due to aggressive filter removing many documents.
- Large sets can slow down YQL-parsing of the query
- Bad network connectivity (try 1)
- '200: OK'
- 'BAD_REQUEST: Bad request. Client error. The error message should indicate the cause.'
- 'INVALID_APPLICATION_PACKAGE: There is an error in the application package. The
  error message should indicate the cause.'
- 'OUT_OF_CAPACITY: Not enough nodes available for the request to be fulfilled.'
- 'NOT_FOUND: Not found. E.g. when using a session-id that doesn''t exist.'
- 'METHOD_NOT_ALLOWED: Method not implemented. E.g. using GET where only POST or PUT
  is allowed.'
- 'ACTIVATION_CONFLICT: Conflict, returned when activating an application fails due
  to a conflict with other changes to the same application (in another session). Client
  should retry.'
- 'INTERNAL_SERVER_ERROR: Internal server error. Generic error. The error message
  should indicate the cause.'
- '400: Bad request. Client error. The error message should indicate the cause.'
- '404: Not found. For example using a session id that does not exist.'
- '405: Method not implemented. E.g. using GET where only POST or PUT is allowed.'
- '500: Internal server error. Generic error. The error message should indicate the
  cause.'
- '303: Cluster controller not master - master known.'
- '503: Cluster controller not master - unknown or no master.'
- '200: OK.'
- 200 OK
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '404: Not Found'
- '500: Internal Server Error'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://vespa.ai
  auth:
    type: oauth2
source_metadata: null
