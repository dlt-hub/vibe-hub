resources:
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: auth
- name: invite
  endpoint:
    path: /invitations
    method: GET
    data_selector: auth
- name: policy
  endpoint:
    path: /policies
    method: GET
    data_selector: auth
- name: listActivityLogs
  endpoint:
    path: /listActivityLogs
    method: GET
    data_selector: records
    params: {}
- name: updateSettings
  endpoint:
    path: /updateSettings
    method: POST
    data_selector: auth
    params: {}
- name: patchSettings
  endpoint:
    path: /patchSettings
    method: PATCH
    data_selector: auth
    params: {}
- name: listRoutes
  endpoint:
    path: /listRoutes
    method: GET
    data_selector: auth
    params: {}
- name: createRoute
  endpoint:
    path: /createRoute
    method: POST
    data_selector: auth
    params: {}
- name: deleteRoute
  endpoint:
    path: /deleteRoute
    method: DELETE
    data_selector: auth
    params: {}
- name: getRoute
  endpoint:
    path: /getRoute
    method: GET
    data_selector: auth
    params: {}
- name: updateRoute
  endpoint:
    path: /updateRoute
    method: PUT
    data_selector: auth
    params: {}
- name: getRouteCertificates
  endpoint:
    path: /getRouteCertificates
    method: GET
    data_selector: auth
    params: {}
- name: token
  endpoint:
    path: /token
    method: POST
    data_selector: auth
    params: {}
- name: getIdToken
  endpoint:
    path: /getIdToken
    method: POST
    data_selector: auth
    params: {}
- name: listKeyPairs
  endpoint:
    path: /listKeyPairs
    method: GET
    data_selector: auth
    params: {}
- name: createKeyPair
  endpoint:
    path: /createKeyPair
    method: POST
    data_selector: auth
    params: {}
- name: deleteKeyPair
  endpoint:
    path: /deleteKeyPair
    method: DELETE
    data_selector: auth
    params: {}
- name: getKeyPair
  endpoint:
    path: /getKeyPair
    method: GET
    data_selector: auth
    params: {}
- name: updateKeyPair
  endpoint:
    path: /updateKeyPair
    method: PUT
    data_selector: auth
    params: {}
- name: listNamespaces
  endpoint:
    path: /listNamespaces
    method: GET
    data_selector: auth
    params: {}
- name: listChangesets
  endpoint:
    path: /listChangesets
    method: GET
    data_selector: changesets
    params:
      organizationId: string
      status: string
      clusterId: string
      filter: object
      limit: integer
      offset: integer
      orderBy: Array of strings
- name: compareChangesets
  endpoint:
    path: /compareChangesets
    method: GET
    data_selector: changesetComparison
    params:
      organizationId: string
      clusterId: string
      firstId: string
      secondId: string
- name: applyChangeset
  endpoint:
    path: /applyChangeset
    method: POST
    data_selector: applyResult
    params:
      organizationId: string
      changesetId: string
- name: updateSettings
  endpoint:
    path: /updateSettings
    method: PATCH
    data_selector: updateResult
    params:
      organizationId: string
      clusterId: string
- name: getSettings
  endpoint:
    path: /getSettings
    method: GET
    data_selector: settings
    params:
      organizationId: string
      clusterId: string
- name: patchSettings
  endpoint:
    path: /patchSettings
    method: PATCH
    data_selector: patchResult
    params:
      organizationId: string
      clusterId: string
- name: updateSettings
  endpoint:
    path: /updateSettings
    method: POST
    data_selector: auth
    params: {}
- name: patchSettings
  endpoint:
    path: /patchSettings
    method: PATCH
    data_selector: auth
    params: {}
- name: createOrganization
  endpoint:
    path: /createOrganization
    method: POST
    data_selector: auth
    params: {}
- name: listClusters
  endpoint:
    path: /listClusters
    method: GET
    data_selector: auth
    params: {}
- name: createCluster
  endpoint:
    path: /createCluster
    method: POST
    data_selector: auth
    params: {}
- name: deleteCluster
  endpoint:
    path: /deleteCluster
    method: DELETE
    data_selector: auth
    params: {}
- name: getCluster
  endpoint:
    path: /getCluster
    method: GET
    data_selector: auth
    params: {}
- name: updateCluster
  endpoint:
    path: /updateCluster
    method: POST
    data_selector: auth
    params: {}
- name: listClusterReplicas
  endpoint:
    path: /listClusterReplicas
    method: GET
    data_selector: auth
    params: {}
- name: getClusterHealth
  endpoint:
    path: /getClusterHealth
    method: GET
    data_selector: auth
    params: {}
- name: rotateClusterToken
  endpoint:
    path: /rotateClusterToken
    method: POST
    data_selector: auth
    params: {}
- name: getQuotas
  endpoint:
    path: /getQuotas
    method: GET
    data_selector: auth
    params: {}
- name: generateSubdomainName
  endpoint:
    path: /generateSubdomainName
    method: GET
    data_selector: auth
    params: {}
- name: checkIdentityProviderSettings
  endpoint:
    path: /checkIdentityProviderSettings
    method: POST
    data_selector: auth
    params: {}
- name: startOnboarding
  endpoint:
    path: /startOnboarding
    method: POST
    data_selector: auth
    params: {}
- name: configureOnboarding
  endpoint:
    path: /configureOnboarding
    method: POST
    data_selector: auth
    params: {}
- name: runHealthChecks
  endpoint:
    path: /runHealthChecks
    method: POST
    data_selector: auth
    params: {}
- name: getDistributionSum
  endpoint:
    path: /getDistributionSum
    method: GET
    data_selector: auth
    params: {}
- name: getDistributionTimeSeries
  endpoint:
    path: /getDistributionTimeSeries
    method: GET
    data_selector: auth
    params: {}
- name: getTimeSeries
  endpoint:
    path: /getTimeSeries
    method: GET
    data_selector: auth
    params: {}
- name: getTimeSeriesSum
  endpoint:
    path: /getTimeSeriesSum
    method: GET
    data_selector: auth
    params: {}
- name: pingCluster
  endpoint:
    path: /pingCluster
    method: GET
    data_selector: auth
    params: {}
- name: getVersion
  endpoint:
    path: /getVersion
    method: GET
    data_selector: auth
    params: {}
- name: listOrganizations
  endpoint:
    path: /notifications/authorize
    method: POST
- name: createOrganization
  endpoint:
    path: /notifications/authorize
    method: POST
- name: deleteOrganization
  endpoint:
    path: /notifications/authorize
    method: POST
- name: getOrganization
  endpoint:
    path: /notifications/authorize
    method: POST
- name: updateOrganization
  endpoint:
    path: /notifications/authorize
    method: POST
- name: leaveOrganization
  endpoint:
    path: /notifications/authorize
    method: POST
- name: listInvoices
  endpoint:
    path: /notifications/authorize
    method: POST
- name: getPaymentInformation
  endpoint:
    path: /notifications/authorize
    method: POST
- name: getSubscriptionInformation
  endpoint:
    path: /notifications/authorize
    method: POST
- name: getBillingUsage
  endpoint:
    path: /notifications/authorize
    method: POST
- name: listServiceAccounts
  endpoint:
    path: /notifications/authorize
    method: POST
- name: createServiceAccount
  endpoint:
    path: /notifications/authorize
    method: POST
- name: deleteServiceAccount
  endpoint:
    path: /notifications/authorize
    method: POST
- name: getServiceAccount
  endpoint:
    path: /notifications/authorize
    method: POST
- name: authorizeNotifications
  endpoint:
    path: /notifications/authorize
    method: POST
    data_selector: auth
- name: listCustomDomains
  endpoint:
    path: /customDomain
    method: GET
    data_selector: auth
- name: addCustomDomain
  endpoint:
    path: /customDomain
    method: POST
    data_selector: auth
- name: deleteCustomDomain
  endpoint:
    path: /customDomain
    method: DELETE
    data_selector: auth
- name: retryCustomDomain
  endpoint:
    path: /customDomain/retry
    method: POST
    data_selector: auth
- name: pomerium
  endpoint:
    path: /services/data/v0.30/sobjects/Pomerium
    method: GET
    data_selector: records
- name: pomerium
  endpoint:
    path: /services/data/vXX.X/sobjects/pomerium
    method: POST
    data_selector: services
- name: verify
  endpoint:
    path: /services/data/vXX.X/sobjects/verify
    method: POST
    data_selector: services
- name: access_log_fields
  endpoint:
    path: /docs/reference/access-log-fields
    method: GET
    data_selector: fields
    params: {}
- name: address
  endpoint:
    path: /
    method: GET
    data_selector: address
    params: {}
- name: authenticate_callback_path
  endpoint:
    path: /oauth2/callback
- name: branding_settings
  endpoint:
    path: /docs/reference/branding
    method: GET
    data_selector: branding_settings
    params: {}
- name: circuit_breaker_thresholds
  endpoint:
    path: /circuit_breaker_thresholds
    method: GET
    data_selector: thresholds
    params: {}
- name: codec_type
  endpoint:
    path: /docs/reference/codec-type
    method: GET
- name: dns_lookup_family
  endpoint:
    path: /docs/reference/dns-lookup-family
    method: GET
    data_selector: config file keys
    params: {}
- name: envoy_admin_address
  endpoint:
    path: envoy_admin_address
    method: GET
    data_selector: string
- name: envoy_admin_access_log_path
  endpoint:
    path: envoy_admin_access_log_path
    method: GET
    data_selector: string
- name: envoy_admin_profile_path
  endpoint:
    path: envoy_admin_profile_path
    method: GET
    data_selector: string
- name: read_timeout
  endpoint:
    path: timeout_read
    method: GET
    data_selector: 30s
- name: write_timeout
  endpoint:
    path: timeout_write
    method: GET
    data_selector: '0'
- name: idle_timeout
  endpoint:
    path: timeout_idle
    method: GET
    data_selector: 5m
- name: default_upstream_timeout
  endpoint:
    path: default_upstream_timeout
    method: GET
    data_selector: 30s
- name: authorization_metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: memory_usage
  endpoint:
    path: /metrics/memory_usage
    method: GET
    data_selector: metrics
- name: cpu_utilization
  endpoint:
    path: /metrics/cpu_utilization
    method: GET
    data_selector: metrics
- name: uptime_threads
  endpoint:
    path: /metrics/uptime_threads
    method: GET
    data_selector: metrics
- name: connection_counts
  endpoint:
    path: /metrics/connection_counts
    method: GET
    data_selector: metrics
- name: authorization_metrics
  endpoint:
    path: /metrics/authorization_metrics
    method: GET
    data_selector: metrics
- name: cache_metrics
  endpoint:
    path: /metrics/cache_metrics
    method: GET
    data_selector: metrics
- name: database_metrics
  endpoint:
    path: /metrics/database_metrics
    method: GET
    data_selector: metrics
- name: downstream_ingress_metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: override_certificate_name
  endpoint:
    path: override_certificate_name
    method: string
    data_selector: optional
    params: {}
- name: programmatic_redirect_domain_whitelist
  endpoint:
    path: /programmatic_redirect_domain_whitelist
    method: GET
    data_selector: domains
    params: {}
- name: routes
  endpoint:
    path: /routes
    method: GET
    data_selector: routes
    params: {}
- name: use_proxy_protocol
  endpoint:
    path: /docs/reference/use-proxy-protocol
    method: GET
    data_selector: config
    params: {}
- name: X-Forwarded-For Settings
  endpoint:
    path: /docs/reference/x-forwarded-for-settings
    method: GET
    data_selector: settings
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: GET
- name: http-ingress
  endpoint:
    path: /http-ingress
    method: TCP
    data_selector: traffic
    params: {}
- name: https-ingress
  endpoint:
    path: /https-ingress
    method: TCP
    data_selector: traffic
    params: {}
- name: quic-ingress
  endpoint:
    path: /quic-ingress
    method: UDP
    data_selector: traffic
    params: {}
- name: grpc-ingress
  endpoint:
    path: /grpc-ingress
    method: TCP
    data_selector: traffic
    params: {}
- name: grpc-egress
  endpoint:
    path: /grpc-egress
    method: TCP
    data_selector: traffic
    params: {}
- name: envoy-admin
  endpoint:
    path: /envoy-admin
    method: TCP
    data_selector: traffic
    params: {}
- name: metrics-ingress
  endpoint:
    path: /metrics-ingress
    method: TCP
    data_selector: traffic
    params: {}
- name: ssh
  endpoint:
    path: /ssh
    method: TCP
    data_selector: traffic
    params: {}
- name: databroker
  endpoint:
    path: /docs/internals/data-storage
    method: GET
- name: namespace
  endpoint:
    path: /namespaces
    method: GET
    data_selector: namespaces
- name: policy
  endpoint:
    path: /policies
    method: GET
    data_selector: policies
- name: route
  endpoint:
    path: /routes
    method: POST
    data_selector: route
- name: organizations
  endpoint:
    path: /api/v0/organizations
    method: GET
- name: clusters
  endpoint:
    path: /api/v0/organizations/{organizationId}/clusters
    method: GET
- name: policies
  endpoint:
    path: /api/v0/organizations/{organizationId}/policies
    method: POST
- name: routes
  endpoint:
    path: /api/v0/organizations/{organizationId}/routes
    method: POST
- name: Namespaces
  endpoint:
    path: /docs/internals/namespacing
    method: GET
    data_selector: resources
    params: {}
- name: login
  endpoint:
    path: /.pomerium/api/v1/login
    method: GET
- name: user_info
  endpoint:
    path: /.pomerium/
    method: GET
- name: user_data
  endpoint:
    path: /.pomerium/user
    method: GET
- name: programmatic_login
  endpoint:
    path: /.pomerium/api/v1/login
    method: GET
- name: sign_out
  endpoint:
    path: /.pomerium/sign_out
    method: GET
- name: webauthn
  endpoint:
    path: /.pomerium/webauthn
    method: GET
- name: device_enrolled
  endpoint:
    path: /.pomerium/device-enrolled
    method: GET
- name: health_check_ping
  endpoint:
    path: /ping
    method: GET
- name: health_check_healthz
  endpoint:
    path: /healthz
    method: GET
- name: oidc_discovery
  endpoint:
    path: /.well-known/pomerium
    method: GET
- name: jwks
  endpoint:
    path: /.well-known/pomerium/jwks.json
    method: GET
- name: hpke_public_key
  endpoint:
    path: /.well-known/pomerium/hpke-public-key
    method: GET
- name: route
  endpoint:
    path: /api
    method: GET
- name: routes
  endpoint:
    path: /.pomerium/api/v1/routes
    method: GET
    data_selector: routes
    params: {}
- name: MCP Server
  endpoint:
    path: /mcp
    method: GET
- name: ssh_routes
  endpoint:
    path: /routes
    method: POST
    data_selector: routes
    params: {}
- name: ssh_configuration
  endpoint:
    path: /config.yaml
    method: GET
    data_selector: ssh_configuration
    params: {}
- name: ssh_routes
  endpoint:
    path: /ssh/routes
    method: POST
    data_selector: routes
- name: ssh_route
  endpoint:
    path: /ssh/routes
    method: POST
    data_selector: routes
    params: {}
- name: envoy_admin_address
  endpoint:
    path: envoy_admin_address
    method: GET
    data_selector: string
    params: {}
- name: envoy_admin_access_log_path
  endpoint:
    path: envoy_admin_access_log_path
    method: GET
    data_selector: string
    params: {}
- name: envoy_admin_profile_path
  endpoint:
    path: envoy_admin_profile_path
    method: GET
    data_selector: string
    params: {}
- name: routes
  endpoint:
    path: /routes
    method: GET
    data_selector: routes
    params: {}
notes:
- Pomerium is trusted by global enterprises, AI innovators, and high-scale engineering
  teams.
- We do not rent, sell or trade your Personal Information.
- Pomerium was designed to close gaps to protect every request.
- Pomerium enables secure, clientless access to internal applications, databases and
  services from a centralized control plane.
- Dynamic systems need dynamic access control.
- Pomerium secures internal service communication with identity- and context-aware
  policies that evaluate every request in real time.
- Policy-driven, self-hosted access control for agents, scripts, and LLM systems.
- No static tokens. No blind trust.
- No agents to install, configure, and update
- Works with your existing SSO and identity provider
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Just-in-Time access allows granting precise, time-bound access only when needed.
- Access ends the moment it’s no longer needed.
- Pomerium keeps a tamper-proof log of every policy change
- 'Continuous Authorization: Access is re-evaluated live. Revoke access instantly,
  mid-session.'
- 'Session Recording: Optional: Every SSH session is recorded and replayable.'
- Pomerium operates as a reverse proxy, intercepting requests and enforcing access
  policies.
- Only Pomerium is exposed to the internet
- You host the gateway and keep full control
- No agents or client installs. Access via browser. No software to distribute or manage.
- Pomerium secures agentic access to MCP servers.
- Federated access that respects identity, context, and policy.
- Self-hosted and framework-agnostic
- Eliminate the need for shared keys or baked-in credentials
- Enforce continuous authorization across LLMs, agents, and AI-driven systems.
- Self-hosted deployment to keep data flows, access logic, and decisions within your
  infrastructure.
- Pomerium Enterprise provides detailed, per-request logs for every agent interaction.
- Pomerium Enforces Granular Data Access Boundaries for Agents
- Designed for Agentic Systems
- Public endpoints invite unauthorized requests and scraping
- API keys are hard to rotate, revoke, or scope cleanly
- Lack of audit trails leads to blind spots and billing surprises
- Pomerium enables web-based, secure application access without a VPN or any client-side
  software.
- Your data stays secure and within your control because you host Pomerium's reverse
  proxy.
- Embrace Seamless Resource Access, Robust Zero Trust Integration, and Streamlined
  Compliance with Our App.
- Pomerium provides clientless, secure remote access.
- Pomerium allows great control, speed and flexibility when securing internal web
  applications.
- Pomerium uses OAuth 2.0 and OIDC protocols for authentication.
- Pomerium now supports Additional Login Redirect Hosts to solve cross-origin authentication
  challenges in modern web applications.
- This is an experimental feature and may change in future releases.
- Pomerium offers a clientless access for frictionless security.
- Pomerium can be deployed and scaled however your organization requires it.
- 'Zero trust architecture answers the following questions: Who is trying to access,
  and how do we know? Should we allow them access? Are there other contextual factors
  we should consider? Has anything changed between then and now?'
- Pomerium is self-hosted so the Pomerium team cannot mess with your instance.
- Pomerium enables true zero trust security without getting in the way of workflow
  or productivity.
- Turning on autocert allows Pomerium to automatically retrieve, manage, and renew
  public facing TLS certificates from Lets Encrypt.
- Replace CLUSTER_TOKEN with the cluster token generated for you in the onboarding
  config
- Replace CLUSTER_STARTER_SUBDOMAIN with your generated starter subdomain
- Your Pomerium Enterprise version should always match the same minor version number
  as your Pomerium Core version.
- Pomerium requires setup of connected app in api
- Query parameters often contain sensitive information. Do not enable the query log
  field without careful consideration.
- address is a bootstrap configuration setting and is not configurable in the Console.
- address is included in the deployment manifest and not customizable.
- Pomerium's default behavior is to pass bearer tokens to upstream applications without
  interpreting them.
- Since v0.30 access and identity tokens are supported by all IdPs, except Apple does
  not support access tokens, and GitHub does not support identity tokens.
- Branding Settings is an Enterprise feature that allows customization of Console,
  logo, favicon, error messages, and more.
- All certificates supplied to Pomerium must be in PEM format.
- Circuit breaker thresholds are a dangerous configuration setting. When set to low
  values, Pomerium may no longer be able to serve requests to the Enterprise Console
  itself resulting in a broken installation that can't easily be fixed.
- cookie_name is a bootstrap configuration setting and is not configurable in the
  Console.
- cookie_secret is a bootstrap configuration setting and is not configurable in the
  Console.
- cookie_domain is a bootstrap configuration setting and is not configurable in the
  Console.
- cookie_http_only is a bootstrap configuration setting and is not configurable in
  the Console.
- cookie_expire is a bootstrap configuration setting and is not configurable in the
  Console.
- cookie_same_site is a bootstrap configuration setting and is not configurable in
  the Console.
- cookie_secret_file is a bootstrap configuration setting and is not configurable
  in the Console.
- databroker_storage_type is a bootstrap configuration setting and is not configurable
  in the Console.
- databroker_storage_connection_string is a bootstrap configuration setting and is
  not configurable in the Console.
- Kubernetes does not support dns_lookup_family
- Global Timeouts set the global server timeouts for HTTP request and response streams.
- Kubernetes does not support google_cloud_serverless_authentication_service_account
- Pomerium should never be exposed to the internet without TLS encryption.
- This setting has no effect if directory sync is not enabled.
- Kubernetes does not support log_level
- 'Use with caution: the endpoint can expose frontend and backend server names or
  addresses. Do not externally expose the metrics if this is sensitive information.'
- Resource monitoring is only available in the cgroup environment where the limits
  are set (i.e. Kubernetes, Docker, systemd, etc.).
- Provides insights into the traffic received by Envoy from clients.
- Kubernetes does not support Override Certificate Name
- Whitelisted domains must match the redirect URL exactly; otherwise, the domain will
  be rejected.
- Kubernetes does not support Programmatic Redirect Domain Whitelist
- While Pomerium will start without a route configured, it will not authorize or proxy
  any traffic until a route is defined.
- Several security-related headers are not set by default since doing so might break
  legacy sites.
- signing_key is a bootstrap configuration setting and is not configurable in the
  Console.
- signout_redirect_url is a bootstrap configuration setting and is not configurable
  in the Console.
- Signout Redirect URL is not configurable in Kubernetes
- tls_derive is a bootstrap configuration setting and is not configurable in the Console.
- Uses OpenTelemetry for tracing
- Common mistakes include typos in OAuth2 issuer URL configuration
- The recommended way to configure tracing is by using the standard OpenTelemetry
  environment variables.
- Source Address is not configurable in the Enterprise Console.
- Source Address is not configurable by the Pomerium Ingress Controller.
- Freebind is not configurable in the Enterprise Console.
- Freebind is not configurable by the Pomerium Ingress Controller.
- use_proxy_protocol is a bootstrap configuration setting and is not configurable
  in the Console.
- Kubernetes does not support skip_xff_append
- Kubernetes does not support xff_num_trusted_hops
- Pomerium can be configured using a configuration file (YAML/JSON/TOML) or environmental
  variables.
- Pomerium can hot-reload route configuration details, authorization policy, certificates,
  and other proxy settings.
- Pomerium uses the term “downstream mTLS” for the client-to-Pomerium connection,
  and “upstream mTLS” for the connection between Pomerium and protected services.
- Cluster token does not have a set expiration time.
- Rotating the cluster token invalidates the current token, and shuts your cluster
  down.
- By default, Pomerium uses an in-memory storage backend to synchronize a cluster's
  configuration and session state. This is suitable for test environments, but not
  for production.
- To avoid service outages, we recommend that you deploy a PostgreSQL database to
  persist your cluster's configuration state.
- Replicas left inactive for over 24 hours will not appear on the Status page.
- If your cluster uses managed certificates provisioned by Pomerium, then this error
  is a bug.
- This cluster status alert may indicate cluster connectivity issues.
- Pomerium enables proxying of protocols such as HTTP, SSH, and even MCP over TCP
  and UDP.
- QUIC requires UDP reachability and proper ALPN support by clients.
- The default storage backend for databroker is memory based.
- When using multiple hosts make sure to specify target_session_attrs=read-write.
- Service account token must be stored securely after creation.
- Keep API User Token and ID token safe; they cannot be viewed again.
- Open-source users must configure metrics collection and visualization manually.
- Pomerium Enterprise provides simplified, built-in metrics collection and visualizations.
- Runtime metrics are not supported in Pomerium Zero.
- Pomerium only grants access to authorized users.
- This model depends on the security of your network perimeter.
- Mutual authentication examples
- While your network should be secured to only allow traffic at specified ports and
  directed to specified services, this creates a single point of failure. A hacker
  only needs to bypass your firewall to get direct access to the upstream service.
- Pomerium applies a zero trust security model to the application layer of the infrastructure's
  network model.
- Pomerium applies a zero trust security model to the protocol layer of the infrastructure's
  network model.
- By default only localhost URLs are allowed as the pomerium_redirect_uri.
- 'Supports Authorization: Bearer Pomerium-${pomerium_jwt}'
- 'Supports X-Pomerium-Authorization: ${pomerium_jwt}'
- Pomerium incorporates a single sign-on flow with third-party providers to delegate
  authentication.
- Pomerium maintains a clear separation between its authentication layer and your
  application logic, enhancing overall security.
- Cookie Expiration sets the lifetime of session cookies. After this interval, users
  must reauthenticate.
- Cookie Domain sets the scope of session cookies issued by Pomerium.
- Open the port so that it grants Pomerium inbound access on port 443.
- If you've reserved port 443 for something else, you can change the port Pomerium
  sends inbound requests to by specifying a different listening port.
- To generate a token, run the `pomerium-console generate-recovery token` command
  with the specified flags.
- If your directory sync fails, use the External Data > Last Error and Metrics dashboards
  to determine the source of the failure.
- If the failure is due to a timeout, increase the IdP Polling Min/Max Delay settings
  until the sync completes.
- Configuration file keys and environment variables of the type string are case sensitive.
- Limited sign-in options
- Session management
- Pomerium enforces dynamic, context-aware authorization on every request.
- JWT-based identity & context verification lets your upstream service confirm each
  request is coming from a trusted policy enforcement point (Pomerium) and that the
  user's identity is valid.
- Only secure schemes (https, tcp+https and udp+https) are supported.
- Pomerium will check your system's trust/key store for valid certificates first.
- The Routes Portal is publicly available, but only authenticated users will be able
  to see the routes they have access to.
- MCP support is currently an experimental feature.
- MCP support is currently an experimental feature only available in the main branch
  or Docker images built from main.
- Pomerium provides fine-grained access control for MCP tools through a specialized
  mcp_tool policy criterion in Pomerium Policy Language (PPL).
- The mcp_tool criterion is designed specifically for MCP routes and allows policy
  enforcement at the individual tool level.
- Verbose logging to help users audit, manage, and troubleshoot their configurations.
- Pomerium can be leveraged as a proxy for user requests to the API Server.
- Any supported IdP can be supported for authentication, in any environment.
- With Structured Authentication Configuration, the Kubernetes API server can be configured
  to authenticate users using the Pomerium JWT natively.
- Pomerium v0.30.0 or later is required
- Identity provider with Device Code OAuth grant type enabled is required
- Network connectivity between Pomerium and SSH servers is necessary
- Pomerium can be used as a native SSH reverse proxy, adding OAuth authentication
  and flexible Pomerium policy enforcement to standard SSH connections.
- In version 0.30.0, SSH access only supports the Device Code OAuth flow.
- SSH access only supports the Device Code OAuth flow.
- Pomerium is fully protocol-aware, allowing for a native SSH experience.
- Pass identity headers to preserve original user context
- Service accounts offer a protected and standardized method of authenticating machine-to-machine
  communication between services protected by Pomerium.
- A service account can only be used in the Namespace it was created in, including
  its children Namespaces.
- Pomerium is configured via environment variables or a YAML file (config.yaml).
- Shared secret and cookie secret need to be generated and replaced.
- Pomerium will use the Hosted Authenticate Service by default in configurations that
  don't specify an authenticate service URL.
- Authenticate Internal Service URL is only required for split-service mode deployments.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403 Unauthorized: Custom error message can be applied to routes with Show Error
  Details setting enabled.'
- A typo in the OAuth2 issuer URL configuration is a common mistake that can lead
  to unexpected errors.
- 'Certificates are expired or invalid: Upload a valid certificate, or allow Pomerium
  to automate certificate management.'
- 'Hostnames do not have matching certificates: Make sure all From URLs are correct,
  and that the hostnames have matching certificates.'
- 'Cluster configuration is not current: Restart the cluster. If that doesn''t resolve
  the issue, please contact support.'
- Hacker attempting to access backend without sidecar
- '401 Unauthorized: Ensure that the Proxy service knows about and trusts the certificate
  authority that signed the Authorize service''s certificate.'
- 'no_healthy_upstream: Check that there are no errors in the server''s configuration
  files or application code that prevent it from running as expected.'
- 'upstream_max_stream_duration_reached: By default, Pomerium sets a 10-second timeout
  for all requests.'
- 'upstream_per_try_timeout: See the Connections - Timeouts page to learn how timeouts
  work with upstream connections.'
- 'upstream_reset_after_response_started: See the Connections - Timeouts page to learn
  how timeouts work with upstream connections.'
- 'upstream_reset_before_response_started: See the Connections - Timeouts page to
  learn how timeouts work with upstream connections.'
- 'upstream_response_timeout: See the Connections - Timeouts page to learn how timeouts
  work with upstream connections.'
- 'via_upstream: To resolve this error, check the upstream service''s application
  logs for more information about how the response status code is set.'
auth_info:
  mentioned_objects:
  - API User Token
  - ID Token
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Auth0
  - Azure Active Directory
  - GitHub
  - GitLab
  - Google Workspace
  - Okta
  - OneLogin
  - OpenID Connect
  - Ping Identity
client:
  base_url: https://console.pomerium.app
  headers:
    Accept: application/json
source_metadata: null
