resources:
- name: data_nft
  endpoint:
    path: /data-nfts
    method: GET
    data_selector: data
    params: {}
- name: OCEAN address
  endpoint:
    path: /optimism/sepolia
    method: GET
    data_selector: address
    params: {}
- name: OCEAN faucet
  endpoint:
    path: /faucet/op-sepolia.oceanprotocol.com/
    method: GET
    data_selector: faucet
    params: {}
- name: Explorer
  endpoint:
    path: /sepolia-optimism.etherscan.io
    method: GET
    data_selector: explorer
    params: {}
- name: Ethereum Mainnet
  endpoint:
    path: /networks/ethereum/mainnet
    method: GET
    data_selector: records
    params: {}
- name: Polygon Mainnet
  endpoint:
    path: /networks/polygon/mainnet
    method: GET
    data_selector: records
    params: {}
- name: Oasis Sapphire Mainnet
  endpoint:
    path: /networks/oasis/sapphire/mainnet
    method: GET
    data_selector: records
    params: {}
- name: BNB Smart Chain
  endpoint:
    path: /networks/bnb/smart-chain
    method: GET
    data_selector: records
    params: {}
- name: Energy Web Chain
  endpoint:
    path: /networks/energy-web/chain
    method: GET
    data_selector: records
    params: {}
- name: Optimism Mainnet
  endpoint:
    path: /networks/optimism/mainnet
    method: GET
    data_selector: records
    params: {}
- name: Moonriver
  endpoint:
    path: /networks/moonriver
    method: GET
    data_selector: records
    params: {}
- name: Sepolia
  endpoint:
    path: /networks/sepolia
    method: GET
    data_selector: records
    params: {}
- name: Oasis Sapphire Testnet
  endpoint:
    path: /networks/oasis/sapphire/testnet
    method: GET
    data_selector: records
    params: {}
- name: node_status
  endpoint:
    path: /nodes/status
    method: GET
    data_selector: status
    params: {}
- name: node_dashboard
  endpoint:
    path: /nodes/dashboard
    method: GET
    data_selector: dashboard
    params: {}
- name: data_assets
  endpoint:
    path: /api/v1/data_assets
    method: GET
    data_selector: assets
- name: assets
  endpoint:
    path: /api/assets
    method: GET
- name: S3 Bucket
  endpoint:
    path: /s3
    method: GET
    data_selector: buckets
    params: {}
- name: data_nft
  endpoint:
    path: /path/to/data_nft
    method: POST
    data_selector: data
    params: {}
- name: datatokens
  endpoint:
    path: /path/to/datatokens
    method: POST
    data_selector: data
    params: {}
- name: datatoken_templates
  endpoint:
    path: /developers/contracts/datatoken-templates
    method: GET
    data_selector: templates
    params: {}
- name: roles_nft
  endpoint:
    path: /roles/nft
    method: GET
    data_selector: roles
    params: {}
- name: addToCreateERC20List
  endpoint:
    path: /addToCreateERC20List
    method: POST
    data_selector: result
- name: removeFromCreateERC20List
  endpoint:
    path: /removeFromCreateERC20List
    method: POST
    data_selector: result
- name: addMultipleUsersToRoles
  endpoint:
    path: /addMultipleUsersToRoles
    method: POST
    data_selector: result
- name: addMinter
  endpoint:
    path: /addMinter
    method: POST
    data_selector: result
- name: removeMinter
  endpoint:
    path: /removeMinter
    method: POST
    data_selector: result
- name: addPaymentManager
  endpoint:
    path: /addPaymentManager
    method: POST
    data_selector: result
- name: removePaymentManager
  endpoint:
    path: /removePaymentManager
    method: POST
    data_selector: result
- name: fixed_pricing
  endpoint:
    path: /developers/contracts/pricing-schemas#fixed-pricing
    method: GET
    data_selector: fixed_pricing_data
    params: {}
- name: free_pricing
  endpoint:
    path: /developers/contracts/pricing-schemas#free-pricing
    method: GET
    data_selector: free_pricing_data
    params: {}
- name: data_nft
  endpoint:
    path: /data_nft
    method: GET
    data_selector: records
    params: {}
- name: payment_collector
  endpoint:
    path: /payment_collector
    method: POST
    data_selector: records
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: assets
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: records
- name: services
  endpoint:
    path: /services
    method: GET
    data_selector: records
- name: credentials
  endpoint:
    path: /credentials
    method: GET
    data_selector: records
- name: datatokens
  endpoint:
    path: /datatokens
    method: GET
    data_selector: datatokens
    params: {}
- name: nft
  endpoint:
    path: /nft
    method: GET
    data_selector: nft
    params: {}
- name: event
  endpoint:
    path: /event
    method: GET
    data_selector: event
    params: {}
- name: purgatory
  endpoint:
    path: /purgatory
    method: GET
    data_selector: purgatory
    params: {}
- name: stats
  endpoint:
    path: /stats
    method: GET
    data_selector: stats
    params: {}
- name: access_service
  endpoint:
    path: /services/access
    method: GET
- name: compute_service
  endpoint:
    path: /services/compute
    method: GET
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: records
    params: {}
- name: services
  endpoint:
    path: /services
    method: GET
    data_selector: records
    params: {}
- name: Static URLs
  endpoint:
    path: /static_urls
    method: POST
    data_selector: files
    params: {}
- name: Interplanetary File System
  endpoint:
    path: /ipfs
    method: POST
    data_selector: files
    params: {}
- name: GraphQL
  endpoint:
    path: /graphql
    method: POST
    data_selector: query
    params: {}
- name: Smart Contract Data
  endpoint:
    path: /smart_contract
    method: POST
    data_selector: contract_data
    params: {}
- name: Arweave
  endpoint:
    path: /arweave
    method: POST
    data_selector: files
    params: {}
- name: datatoken_address
  endpoint:
    path: /retrieve-datatoken-address
    method: GET
- name: chain_id
  endpoint:
    path: /retrieve-chain-id
    method: GET
- name: datatoken_address
  endpoint:
    path: /api/aquarius/assets/ddo
    method: GET
    data_selector: metadata
    params: {}
- name: chain_id
  endpoint:
    path: /api/aquarius/assets/ddo
    method: GET
    data_selector: metadata
    params: {}
- name: metadata
  endpoint:
    path: /update/metadata
    method: POST
    data_selector: metadata
    params: {}
- name: consume_asset
  endpoint:
    path: /consume/asset
    method: POST
    data_selector: asset
    params: {}
- name: dataset
  endpoint:
    path: /publish
    method: POST
    data_selector: metadata
    params: {}
- name: C2D Jobs
  endpoint:
    path: /run/c2d/jobs
    method: GET
    data_selector: jobs
    params: {}
- name: Algorithm Logs
  endpoint:
    path: /retrieve/algorithm/logs
    method: GET
    data_selector: logs
    params: {}
- name: access_service
  endpoint:
    path: /access
    method: GET
    data_selector: services
    params: {}
- name: DDO
  endpoint:
    path: /ddo
    method: GET
    data_selector: fields
- name: ddo_validation
  endpoint:
    path: /developers/ddo.js/validate
    method: GET
    data_selector: records
- name: UpdateFields
  endpoint:
    path: /updateFields
    method: POST
    data_selector: data
    params: {}
- name: storage_info
  endpoint:
    path: /getStorageInfo
    method: GET
    data_selector: info
    params: {}
- name: quote
  endpoint:
    path: /getQuote
    method: POST
    data_selector: quoteResult
    params: {}
- name: upload
  endpoint:
    path: /upload
    method: POST
    data_selector: uploadStatus
    params: {}
- name: status
  endpoint:
    path: /getStatus
    method: GET
    data_selector: status
    params: {}
- name: link
  endpoint:
    path: /getLink
    method: GET
    data_selector: link
    params: {}
- name: history
  endpoint:
    path: /getHistory
    method: GET
    data_selector: history
    params:
      page: 1
      pageSize: 25
- name: uploader
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: compute_jobs
  endpoint:
    path: /compute/jobs
    method: POST
    data_selector: results
- name: Aquarius
  endpoint:
    path: /aquarius
    method: GET
    data_selector: data
    params: {}
- name: Provider
  endpoint:
    path: /provider
    method: GET
    data_selector: data
    params: {}
- name: Subgraph
  endpoint:
    path: /subgraph
    method: GET
    data_selector: data
    params: {}
- name: data_nfts
  endpoint:
    path: /services/data-nfts
    method: GET
    data_selector: records
- name: datatokens
  endpoint:
    path: /services/datatokens
    method: GET
    data_selector: records
- name: subgraph
  endpoint:
    path: /subgraphs/name/oceanprotocol/ocean-subgraph/graphql
    method: GET
    data_selector: data
    params: {}
- name: data_nfts
  endpoint:
    path: /developers/old-infrastructure/subgraph/list-data-nfts
    method: GET
- name: data_nft_information
  endpoint:
    path: /developers/old-infrastructure/subgraph/get-data-nft-information
    method: GET
- name: datatokens
  endpoint:
    path: /developers/old-infrastructure/subgraph/list-datatokens
    method: GET
- name: datatoken_information
  endpoint:
    path: /developers/old-infrastructure/subgraph/get-datatoken-information
    method: GET
- name: datatoken_buyers
  endpoint:
    path: /developers/old-infrastructure/subgraph/get-datatoken-buyers
    method: GET
- name: fixed_rate_exchanges
  endpoint:
    path: /developers/old-infrastructure/subgraph/list-fixed-rate-exchanges
    method: GET
- name: veocean_stats
  endpoint:
    path: /developers/old-infrastructure/subgraph/get-veocean-stats
    method: GET
- name: data_services
  endpoint:
    path: /data/services
    method: GET
    data_selector: services
    params: {}
- name: data_nft
  endpoint:
    path: /assets/create_url_asset
    method: POST
    data_selector: DATA_data_nft
    params: {}
- name: datatoken
  endpoint:
    path: /assets/create_url_asset
    method: POST
    data_selector: DATA_datatoken
    params: {}
- name: ddo
  endpoint:
    path: /assets/create_url_asset
    method: POST
    data_selector: DATA_ddo
    params: {}
- name: dataset
  endpoint:
    path: /assets
    method: POST
    data_selector: data
    params: {}
- name: algorithm
  endpoint:
    path: /assets
    method: POST
    data_selector: data
    params: {}
- name: dataset
  endpoint:
    path: /assets/create_url_asset
    method: POST
- name: algorithm
  endpoint:
    path: /assets/create_algo_asset
    method: POST
- name: compute_job
  endpoint:
    path: /compute/start
    method: POST
- name: dataset
  endpoint:
    path: /assets/create_url_asset
    method: POST
    data_selector: DATA_ddo
    params: {}
- name: algorithm
  endpoint:
    path: /assets/create_algo_asset
    method: POST
    data_selector: ALGO_ddo
    params: {}
- name: compute_job
  endpoint:
    path: /compute/start
    method: POST
    data_selector: job_id
    params: {}
- name: compute_status
  endpoint:
    path: /compute/status
    method: GET
    data_selector: status
    params: {}
- name: compute_result
  endpoint:
    path: /compute/result
    method: GET
    data_selector: output
    params: {}
- name: datatoken
  endpoint:
    path: /ocean/get_datatoken
    method: GET
    data_selector: DatatokenBase
    params: {}
- name: user_orders
  endpoint:
    path: /ocean/get_user_orders
    method: GET
    data_selector: List[AttributeDict]
    params: {}
- name: provider_fees
  endpoint:
    path: /ocean/retrieve_provider_fees
    method: GET
    data_selector: dict
    params: {}
- name: provider_fees_for_compute
  endpoint:
    path: /ocean/retrieve_provider_fees_for_compute
    method: GET
    data_selector: dict
    params: {}
- name: assets
  endpoint:
    path: /assets
    method: GET
    data_selector: records
- name: datatokens
  endpoint:
    path: /datatokens
    method: GET
    data_selector: records
- name: create_onchain_asset
  endpoint:
    path: /create_onchain_asset
    method: POST
    data_selector: tuple
    params:
      name: string
      contract_address: string
      contract_abi: dict
      publisher_wallet: eth Account
      wait_for_aqua: bool
- name: create
  endpoint:
    path: /create
    method: POST
    data_selector: tuple
    params:
      metadata: dict
      publisher_wallet: eth Account
      credentials: Optional[dict]
      data_nft_address: Optional[str]
      data_nft_args: Optional[DataNFTArguments]
      deployed_datatokens: Optional[List[Datatoken]]
      services: Optional[list]
      datatoken_args: Optional[List[DatatokenArguments]]
      encrypt_flag: Optional[bool]
      compress_flag: Optional[bool]
      wait_for_aqua: bool
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: list
    params:
      text: string
- name: search_ddo
  endpoint:
    path: /api/v1/ddo/search
    method: GET
    data_selector: ddo
    params: {}
- name: create_algorithm_asset
  endpoint:
    path: /api/v1/assets/algorithm
    method: POST
    data_selector: asset
    params: {}
- name: create_arweave_asset
  endpoint:
    path: /api/v1/assets/arweave
    method: POST
    data_selector: asset
    params: {}
- name: create_graphql_asset
  endpoint:
    path: /api/v1/assets/graphql
    method: POST
    data_selector: asset
    params: {}
- name: create_onchain_asset
  endpoint:
    path: /ocean/assets/create
    method: POST
    data_selector: tuple
    params: {}
- name: url_asset
  endpoint:
    path: /create_url_asset
    method: POST
- name: algo_asset
  endpoint:
    path: /create_algo_asset
    method: POST
- name: arweave_asset
  endpoint:
    path: /create_arweave_asset
    method: POST
- name: graphql_asset
  endpoint:
    path: /create_graphql_asset
    method: POST
- name: onchain_asset
  endpoint:
    path: /create_onchain_asset
    method: POST
- name: update_asset
  endpoint:
    path: /update
    method: POST
    data_selector: DDO
    params: {}
- name: search_asset_by_query
  endpoint:
    path: /search
    method: POST
    data_selector: DDO
    params: {}
- name: resolve_asset
  endpoint:
    path: /resolve
    method: GET
    data_selector: DDO
    params: {}
- name: search_asset_by_text
  endpoint:
    path: /search/text
    method: GET
    data_selector: DDO
    params: {}
- name: download_asset
  endpoint:
    path: /download
    method: POST
    data_selector: string
    params: {}
- name: pay_for_access_service
  endpoint:
    path: /pay
    method: POST
    data_selector: string
    params: {}
- name: pay_for_compute_service
  endpoint:
    path: /initializeCompute
    method: POST
    data_selector: datasets
    params: {}
- name: search_asset
  endpoint:
    path: /search
    method: POST
    data_selector: ddos
    params: {}
- name: url_asset
  endpoint:
    path: /create_url_asset
    method: POST
    data_selector: tuple
    params: {}
- name: algo_asset
  endpoint:
    path: /create_algo_asset
    method: POST
    data_selector: tuple
    params: {}
- name: arweave_asset
  endpoint:
    path: /create_arweave_asset
    method: POST
    data_selector: tuple
    params: {}
- name: graphql_asset
  endpoint:
    path: /create_graphql_asset
    method: POST
    data_selector: tuple
    params: {}
- name: onchain_asset
  endpoint:
    path: /create_onchain_asset
    method: POST
    data_selector: tuple
    params: {}
- name: create_asset
  endpoint:
    path: /assets/create
    method: POST
    data_selector: tuple
    params: {}
- name: update_asset
  endpoint:
    path: /assets/update
    method: POST
    data_selector: DDO
    params: {}
- name: resolve_asset
  endpoint:
    path: /assets/resolve
    method: GET
    data_selector: DDO
    params: {}
- name: search_assets
  endpoint:
    path: /assets/search
    method: GET
    data_selector: list
    params: {}
- name: download_asset
  endpoint:
    path: /assets/download
    method: GET
    data_selector: str
    params: {}
- name: pay_for_access_service
  endpoint:
    path: /assets/pay
    method: POST
    data_selector: str
    params: {}
- name: compute_job
  endpoint:
    path: /compute/job
    method: POST
    data_selector: jobId
    params: {}
- name: compute_job_status
  endpoint:
    path: /compute/job/status
    method: GET
    data_selector: status
    params: {}
- name: compute_job_result
  endpoint:
    path: /compute/job/result
    method: GET
    data_selector: result
    params: {}
- name: compute_job_result_logs
  endpoint:
    path: /compute/job/result/logs
    method: GET
    data_selector: logs
    params: {}
- name: stop_compute_job
  endpoint:
    path: /compute/job/stop
    method: POST
    data_selector: status
    params: {}
- name: c2d_environments
  endpoint:
    path: /get_c2d_environments
    method: GET
    data_selector: list
    params:
      service_endpoint: string
      chain_id: int
- name: free_c2d_environments
  endpoint:
    path: /get_free_c2d_environment
    method: GET
    data_selector: list
    params:
      service_endpoint: string
      chain_id: int
- name: reuse_order
  endpoint:
    path: /reuse_order
    method: POST
    data_selector: transaction_hash
    params: {}
- name: create_dispenser
  endpoint:
    path: /create_dispenser
    method: POST
    data_selector: transaction_hash
    params: {}
- name: dispense
  endpoint:
    path: /dispense
    method: POST
    data_selector: transaction_hash
    params: {}
- name: reuse_order
  endpoint:
    path: /models/datatoken/reuse_order
    method: POST
    data_selector: result
    params: {}
- name: dispense_and_order
  endpoint:
    path: /models/datatoken/dispense_and_order
    method: POST
    data_selector: result
    params: {}
- name: dispense_and_order
  endpoint:
    path: /dispense_and_order
    method: POST
    data_selector: result
    params: {}
- name: reuse_order
  endpoint:
    path: /reuse_order
    method: POST
    data_selector: result
    params: {}
- name: dispenser_status
  endpoint:
    path: /dispenser_status
    method: GET
    data_selector: result
    params: {}
- name: create_exchange
  endpoint:
    path: /create_fixed_rate_exchange
    method: POST
    data_selector: exchange
    params: {}
- name: reuse_order
  endpoint:
    path: /reuse_order
    method: POST
    data_selector: transaction_hash
    params: {}
- name: buy_DT_and_order
  endpoint:
    path: /buy_datatokens_and_order
    method: POST
    data_selector: transaction_hash
    params: {}
- name: dispenser
  endpoint:
    path: /dispense
    method: POST
    data_selector: transaction_hash
    params: {}
- name: create_exchange
  endpoint:
    path: /models/datatoken/create_exchange
    method: POST
    data_selector: exchange
    params: {}
- name: buy_DT_and_order
  endpoint:
    path: /models/datatoken/buy_DT_and_order
    method: POST
    data_selector: transaction_hash
    params: {}
- name: reuse_order
  endpoint:
    path: /models/datatoken/reuse_order
    method: POST
    data_selector: return
    params: {}
- name: create_dispenser
  endpoint:
    path: /create_dispenser
    method: POST
    data_selector: transaction_hash
    params: {}
- name: dispense
  endpoint:
    path: /dispense
    method: POST
    data_selector: transaction_hash
    params: {}
- name: dispense_and_order
  endpoint:
    path: /dispense_and_order
    method: POST
    data_selector: transaction_hash
    params: {}
- name: create_exchange
  endpoint:
    path: /create_exchange
    method: POST
    data_selector: exchange
    params: {}
- name: buy_DT_and_order
  endpoint:
    path: /buy_DT_and_order
    method: POST
    data_selector: transaction_hash
    params: {}
- name: get_exchanges
  endpoint:
    path: /get_exchanges
    method: GET
    data_selector: exchanges
    params: {}
- name: create_dispenser
  endpoint:
    path: /create_dispenser
    method: POST
    data_selector: transaction_hash
    params: {}
- name: dispense
  endpoint:
    path: /dispense
    method: POST
    data_selector: transaction_hash
    params: {}
- name: dispense_and_order
  endpoint:
    path: /dispense_and_order
    method: POST
    data_selector: transaction_hash
    params: {}
- name: dispenser_status
  endpoint:
    path: /dispenser_status
    method: GET
    data_selector: status
    params: {}
- name: start_order
  endpoint:
    path: /models/datatoken.py/start_order
    method: POST
    data_selector: transaction_hash
    params: {}
- name: reuse_order
  endpoint:
    path: /models/datatoken.py/reuse_order
    method: POST
    data_selector: transaction_hash
    params: {}
- name: data_nfts
  endpoint:
    path: /api/data_nfts
    method: GET
    data_selector: records
- name: datatokens
  endpoint:
    path: /api/datatokens
    method: GET
    data_selector: records
- name: aquarius
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: aquarius-events-sepolia
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: aquarius
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params: {}
- name: aquarius-events-sepolia
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params: {}
- name: provider
  endpoint:
    path: /services/data/vXX.X/sobjects/Provider
    method: GET
    data_selector: records
    params: {}
- name: provider
  endpoint:
    path: /services/data/v1.0/provider
    method: GET
    data_selector: records
- name: ocean-subgraph
  endpoint:
    path: /oceanprotocol/ocean-subgraph
    method: POST
    data_selector: data
- name: ocean-subgraph
  endpoint:
    path: /subgraphs/name/oceanprotocol/ocean-subgraph/graphql
    method: GET
    data_selector: ''
- name: subgraph
  endpoint:
    path: /graphql
    method: GET
    data_selector: data
    params: {}
- name: postgresql
  endpoint:
    path: /infrastructure/deploying-ocean-subgraph#1.-deploy-postgresql
    method: GET
    data_selector: data
    params: {}
- name: ipfs
  endpoint:
    path: /infrastructure/deploying-ocean-subgraph#2.-deploy-ipfs
    method: GET
    data_selector: data
    params: {}
- name: graph-node
  endpoint:
    path: /infrastructure/deploying-ocean-subgraph#deploy-graph-node
    method: GET
    data_selector: data
    params: {}
- name: operator-service
  endpoint:
    path: /api/v1/operator/pgsqlinit
    method: POST
    data_selector: response
    params: {}
- name: my-docker-registry
  endpoint:
    path: /auth/htpasswd
    method: POST
- name: registry
  endpoint:
    path: /v2/_catalog
    method: GET
    data_selector: repositories
    params: {}
- name: registry
  endpoint:
    path: /v2/_catalog
    method: GET
    data_selector: repositories
- name: registry
  endpoint:
    path: /v2/_catalog
    method: GET
    data_selector: repositories
    params: {}
notes:
- Data NFTs represent copyright and allow ownership transfer.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- 'DF currently has one stream: Predictoor DF. Run prediction bots to earn continuously.
  Weekly Predictoor rewards are 3,750 OCEAN + 20,000 ROSE rewards through 2025.'
- All streams repeat weekly that start on Thursdays 00:00 at UTC and end on Wed at
  23:59 UTC.
- Python library to privately & securely publish, exchange, and consume data.
- Ocean's mission is to level the playing field for AI and data.
- Data can be on Azure or AWS, Filecoin or Arweave, REST APIs or smart contract feeds.
- Build Your Token-gated AI dApp
- Build Your Token-gated REST API
- Build Your Data Market
- The Ocean Token (OCEAN) was the utility token powering the Ocean Protocol ecosystem.
- On March 26th, Ocean Protocol, SingularityNET, and Fetch.ai joined forces to form
  the Superintelligence Alliance.
- You need the network's native token to pay for gas to make transactions.
- Tokens on test networks do not hold real economic value.
- Ocean helps manage data all along the AI model life cycle
- Nodes should be run on the latest LTS version of Ubuntu or the latest iOS.
- Running nodes on smaller devices like phones may lead to performance issues.
- Ocean Protocol is designed to be a Web3-compatible platform that allows users to
  create and operate decentralized data marketplaces.
- Blockchain technology enables the creation of immutable and auditable records of
  data transactions.
- Ocean Protocol is a decentralized data exchange protocol that enables individuals
  and organizations to share, sell, and consume data in a secure, transparent, and
  privacy-preserving manner.
- Uses OAuth2 with refresh token — requires setup of connected app in Ocean Protocol
- MetaMask can be connected with a TREZOR or Ledger hardware wallet but we don't cover
  those options below
- You can now manage ETH and OCEAN with your wallet
- Security considerations apply.
- Use a proper hosting solution to keep your files.
- Requires setup of connected app in api
- Using Arweave with Uploader
- How to use AWS centralized hosting for your NFT assets
- Permissions of accessing the file from the S3 bucket are set to private by default.
- To publish an asset on the market, the S3 URL needs to be public.
- GitHub can be used to host and share files.
- Make sure your Repo is public.
- To use your file on the Market you need to use the raw url of the asset.
- Liquidity pools and dynamic pricing used to be supported in previous versions of
  the Ocean Market. However, these features have been deprecated and now we advise
  everyone to remove their liquidity from the remaining pools.
- Compute-to-Data represents a groundbreaking paradigm within the Ocean Protocol ecosystem,
  revolutionizing the way data is processed and analyzed.
- Nodes must have a public IP address
- Nodes must expose both HTTP API and P2P ports to facilitate seamless communication
  within the network
- Ocean brings forth enhanced opportunities for dApp owners, creating a conducive
  environment for the emergence of a thriving market of third-party Providers.
- Use of ERC721 for data NFTs and ERC20 for datatokens
- The default template used is 1.
- By default, all assets published through the Ocean Market use the Enterprise Template.
- Some objects like Contact may return nulls in deeply nested fields
- The NFT owner can perform any action or assign any role but cannot be assigned to
  multiple users.
- Only ERC20Deployer (at 721 level) can update roles and permissions.
- The free pricing model gives data consumers access to your asset without requiring
  them to make a direct payment.
- Ocean Protocol offers flexible and customizable pricing options.
- Supports multiple pricing schemas for different datasets.
- When you publish an asset on the Ocean marketplace, there are currently no charges
  for publishing fees.
- The specific value of the swap fee depends on the type of token being used in the
  exchange.
- Revenue is directed to the owner of the NFT by default.
- Can designate a new payment collector.
- Ocean gives you superpowers to scale up and manage your data project.
- Each asset has a DID and DDO. The DDO should include metadata about the asset.
- All DDOs are stored on-chain in encrypted form to be fully GDPR-compatible.
- Each asset must have at least one service to be accessible.
- API calls may require additional setup for authentication.
- Some endpoints may have rate limits.
- Fine-grained permissions allow for more precise access control.
- Setup of connected app in Ocean Protocol is required.
- Using an API key provided by a third-party Ethereum node provider allows interaction
  with Ocean Protocol's smart contracts.
- Barge is not for the faint-hearted — works great on Linux but has limitations on
  macOS and doesn't work at all on Windows.
- Strongly recommend trying first on a testnet.
- Treat the .env file as a secret and do not commit this file to git or share the
  content publicly.
- Treat .env file as a secret and do not commit this file to git or share the content
  publicly.
- Treat this file as a secret and do not commit this file to git or share the content
  publicly.
- Make sure .env file and config.js are created and setup correctly
- Ensure .env file and config.js are created and setup correctly
- Even when utilizing free assets, network gas fees still apply.
- Compute-to-Data is a powerful feature that enables privacy-preserving data analysis
  and computation.
- CLI tool to interact with the oceanprotocol's JavaScript library to privately &
  securely publish, consume and run compute on data.
- The CLI tool requires the configuration of the account's 'private key' or a 'mnemonic'.
- The provided example creates a consumable asset with a predetermined price of 2
  OCEAN.
- To create an asset that is freely accessible, replace the value of 'stats.price.value'
  with 0.
- To make changes to a dataset, you'll need to start by retrieving the asset's Decentralized
  Data Object (DDO).
- The process of consuming an asset is straightforward.
- Execute a single command to consume an asset.
- To monitor the algorithm logs execution and setup configuration for algorithm, use
  the command 'npm run cli computeStreamableLogs'.
- Uses Ocean Protocol DDO format for datasets and assets.
- DDO fields can be accessed through various methods.
- For DDO validation, indexedMetadata will not be taken in consideration in this process.
- There are some restrictions that need to be taken care of before updating fields
  which do not exist for certain DDO.
- Certain datasets, such as health records and personal information, are too sensitive
  to be directly sold.
- Compute-to-Data offers a solution that allows you to monetize these datasets while
  keeping the data private.
- Some objects may return nulls in deeply nested fields
- Uploader streamlines the file uploading process, providing users with a seamless
  experience to effortlessly incorporate their digital assets into a decentralized
  network.
- Documentation is provided in the repos to facilitate seamless integration and interaction
  with the Uploader.
- Requires a wallet connector library to function optimally
- Simplifies the process of storing and managing files
- Integrates with the Ocean Marketplace
- Node URL is pre-filled with default Ocean compute node
- Optional private key for your wallet can be entered
- Aquarius is designed to track and cache metadata from each chain where the Ocean
  Protocol smart contracts are deployed.
- When making subgraph queries, parameters must be in lowercase.
- If you have an Apple M1 processor, coincurve and cryptography installation may fail
  due missing packages.
- If you run MacOS, you may encounter an 'Unsupported Architecture' issue.
- Make sure that you have autoconf, pkg-config and build-essential or their equivalents
  installed on your host.
- Ocean local setup uses Docker, which is fine for Linux/Ubuntu but plays badly with
  MacOS and Windows.
- DDO is stored on-chain. It's encrypted and compressed by default.
- Supports GDPR 'right-to-be-forgotten' compliance rules by default.
- Bob sends a datatoken to the service to get access
- Function assumes the documented defaults.
- Uses Ocean Compute to Data (C2D) environment — requires no provider fees
- If the dataset/algorithm contains a transfer_tx_id property, it will try to reuse
  that previous transfer id.
- This step makes sure you are not paying unnecessary or duplicated fees.
- Uses ocean.py to manage assets and compute flows.
- Requires setup of connected app in Ocean Protocol
- Requires setup of connected app for OAuth2
- The DDO is stored on-chain. It's encrypted and compressed by default.
- Waiting for aquarius to fetch the asset takes additional time
- Using this class, we are able to manipulate a compute job, run it on Ocean environment
  and retrieve the results after the execution is finished.
- Compute jobs are initiated and managed through Ocean Protocol API.
- It is implemented in Datatoken class and it is also inherited in Datatoken2 class.
- This function is used to retrieve funds or datatokens for a user who wants to start
  an order.
- Dispenser functionality may vary based on the instance setup
- Some functions may return nulls in certain conditions
- Creating blog posts and hosting Twitter Spaces is a good way to spread the word
  about your data challenge.
- Make money by closing the data value-creation loop.
- Governments serve as a rich and reliable source of data.
- Data scientists can query blockchain data to build and sell valuable datasets for
  consumers.
- Predictoor docs are now at docs.predictoor.ai.
- Predictoor DF started counting on Nov 9, 2023, at the beginning of Data Farming
  Round 63 (DF63). It runs indefinitely.
- To claim OCEAN rewards, run the OCEAN payout script.
- To claim ROSE rewards, run the OCEAN payout script within the specified timeframe.
- Deploying Ocean components requires a good understanding of Linux operating system,
  Docker Engine, Docker Compose or Kubernetes.
- 'Minimum server configuration: 1 core, 1 GB RAM'
- 'For simple configurations: Minimum server configuration is 1 core and 1 GB RAM.'
- Aquarius is an off-chain component that caches the asset's metadata published on-chain.
- Aquarius continually monitors the chains for MetadataCreated and MetadataUpdated
  events.
- Aquarius supports indexing multiple chains using a single instance to serve API
  requests.
- Aquarius supports indexing multiple chains using a single instance to serve API
  requests and one instance for each chain that must be indexed.
- Provider encrypts the URL and metadata during publishing and decrypts the URL when
  the dataset is downloaded or a compute job is started.
- Ocean Subgraph allows querying the datatoken, data NFT, and all event information
  using GraphQL.
- Ocean Subgraph is deployed under /subgraphs/name/oceanprotocol/ocean-subgraph/
- graph-node up-and-running
- For ocean-subgraph deployment in the Kubernetes environment, both graph-node and
  ipfs services must be locally forwarded using kubectl port-forward command.
- Requires a server capable of running compute jobs (e.g. 8 CPUs, 16 GB RAM, 100GB
  SSD, and a fast internet connection).
- 'Operating system: Ubuntu 22.04 LTS.'
- Congrats, pgsql is running now.
- Congrats,your c2d environment is running.
- Allow registry access only to the C2D environment
- Allow anonymous pull operations
- Allow registry access only to the C2D environment.
- Anyone can pull the image from the registry but, only authenticated users will push
  images to the registry.
- Allowed request size should be large enough to allow push operations
- Allowed request size should be large enough to allow pull operations
- Help develop Ocean Protocol software like a superhero
- Uses OAuth2 with refresh token — requires setup of connected app in API
- This API requires OAuth2 authentication.
- All Ocean Protocol code (software) is licensed under an Apache 2.0 license.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Ensure correct credentials are used.'
- 'No peer data: Check configuration or restart the node.'
- 'Reward Eligibility: false: May be due to random round checks or configuration issues.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'INVALID_TOKEN: Ensure the token is valid and not expired'
- 'NETWORK_ERROR: Check network connectivity or API endpoint'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '403 Forbidden: Ensure permissions for the requested resource'
- '404 Not Found: Verify endpoint and resource availability'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Check API key validity'
- '401 Unauthorized: Recheck API key or permissions'
- 'Validation true/false: '
- '401 Unauthorized: Check OAuth configuration'
- 'AquariusError: Asset id is already registered to another asset.'
- 'Warning: Creating new NFT failed.'
- '400 Bad Request: Check the parameters provided in the request'
- '400 Bad Request: Check your input parameters'
- '404 Not Found: Endpoint may not exist'
- '401 Unauthorized: Recheck credentials'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - data NFT
  - datatokens
  - NamedCredential
  - DDO
  - Asset
  - Dispenser
  - Datatoken
client:
  base_url: https://oceanprotocol.com
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
