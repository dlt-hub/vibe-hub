resources:
- name: run_agent
  endpoint:
    path: /v1/playground/agent/run
    method: POST
    data_selector: message
    params: {}
- name: Agent
  endpoint:
    path: /reference/agent
    method: GET
- name: blog_post
  endpoint:
    path: /blog_post_generator
    method: POST
    data_selector: content
- name: WorkspaceSettings
  endpoint:
    path: /workspace/settings.py
    method: GET
    data_selector: ws_settings
    params: {}
- name: DockerResources
  endpoint:
    path: /docker/resources
    method: GET
    data_selector: resources
    params: {}
- name: AwsResources
  endpoint:
    path: /aws/resources
    method: GET
    data_selector: resources
    params: {}
- name: PgVectorDb
  endpoint:
    path: /docker/app/postgres
    method: POST
    data_selector: resources
    params:
      pg_user: ai
      pg_password: ai
      pg_database: ai
- name: Jupyter
  endpoint:
    path: /docker/app/jupyter
    method: POST
    data_selector: resources
    params:
      mount_workspace: true
- name: PgVector
  endpoint:
    path: /pgvector
    method: POST
    data_selector: data
    params: {}
- name: Jupyter
  endpoint:
    path: /jupyter
    method: POST
    data_selector: data
    params: {}
- name: WorkspaceSettings
  endpoint:
    path: /workspace/settings
    method: GET
    data_selector: settings
- name: Dev SSH Access
  endpoint:
    path: /dev/ssh/access
    method: POST
    data_selector: ssh_commands
    params: {}
- name: Production SSH Access
  endpoint:
    path: /production/ssh/access
    method: POST
    data_selector: ssh_commands
    params: {}
- name: workspace_settings
  endpoint:
    path: /workspace/settings.py
    method: GET
    data_selector: ws_settings
    params: {}
- name: UsersTable
  endpoint:
    path: /db/tables/user
    method: GET
    data_selector: records
    params: {}
- name: Streamlit App
  endpoint:
    path: /llm-app/workspace/prd_resources.py
    method: POST
- name: FastApi App
  endpoint:
    path: /llm-app/workspace/prd_resources.py
    method: POST
- name: run_agent
  endpoint:
    path: /v1/playground/agent/run
    method: POST
    data_selector: message
    params: {}
notes:
- Phidata is now Agno! We've moved!
- Phidata is now Agno! We’ve moved! Check out our new home at Agno AGI.
- The Agent class provides an easy to use interface to language models.
- Phidata uses docker-py to run containers
- If the /var/run/docker.sock is missing or has incorrect permissions, it cannot connect
  to docker
- Reasoning is an experimental feature and will break ~20% of the time.
- Results are cached in the database and can be re-used for future runs.
- The RDS database takes about 5 minutes to activate.
- 'Open localhost:8888 to view the Jupyterlab UI. Password: admin'
- The directory is automatically mounted in the notebook.
- Set to True to push images after building
- Set to True to build images locally
- The repo name should match the ws_name. Meaning if you’re using the default workspace
  name, the repo name would be ai.
- Your application uses the phidata images by default.
- 'To use your own image: Update the image_repo to your image repository and Set build_images=True.'
- Secret management is a critical part of your application security and should be
  taken seriously.
- Local secrets are defined in the `workspace/secrets` directory which is excluded
  from version control.
- Phidata templates come pre-configured with SqlAlchemy and alembic to manage databases.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- To enable HTTPS, create an ACM certificate and add the ARN to your Apps.
- The certificate should be Issued before applying it.
- Your front-end/product will call the /v1/playground/agent/run to run Agents.
errors: []
auth_info:
  mentioned_objects: []
client:
  base_url: https://phidata.app
  headers:
    Accept: application/json
source_metadata: null
