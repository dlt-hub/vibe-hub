resources:
- name: control_app_details
  endpoint:
    path: /rest-api/api-reference/get-control-app-details
    method: GET
    data_selector: records
- name: send_data_to_control_app
  endpoint:
    path: /rest-api/api-reference/send-data-to-a-control-app
    method: POST
    data_selector: records
- name: take_out_all_apps_output
  endpoint:
    path: /rest-api/api-reference/take-out-all-of-an-apps-output
    method: GET
    data_selector: records
- name: control_app
  endpoint:
    path: /apiv2/controlapps/:appToken/control
    method: GET
    data_selector: controlNode.payload
- name: control_app
  endpoint:
    path: /api/control-apps
    method: GET
    data_selector: data
- name: sub_composition
  endpoint:
    path: /api/sub-compositions
    method: GET
    data_selector: data
- name: control_app_control_data
  endpoint:
    path: /controlapps/:appToken/control
    method: GET
- name: sub_composition_ids_and_names
  endpoint:
    path: /api/composition/sub-compositions
    method: GET
    data_selector: subCompositions
    params: {}
- name: control_app_model
  endpoint:
    path: /controlapps/:appToken/model
    method: GET
- name: control_app_control_data
  endpoint:
    path: /controlapps/:appToken/control
    method: GET
- name: control_app_metadata
  endpoint:
    path: /apiv2/controlapps/:appToken
    method: GET
    data_selector: id
    params: {}
- name: get_control_app_model
  endpoint:
    path: /controlapps/:appToken/model
    method: GET
- name: update_control_app
  endpoint:
    path: /apiv2/controlapps/:appToken/control
    method: PATCH
- name: control_app_metadata
  endpoint:
    path: /apiv2/controlapps/:appToken
    method: GET
    data_selector: control app's metadata
    params: {}
- name: update_animation_state
  endpoint:
    path: /apiv2/controlapps/:appToken/control
    method: PATCH
- name: update_sub_composition
  endpoint:
    path: /apiv2/controlapps/:appToken/control
    method: PATCH
    data_selector: success
- name: update_sub_composition
  endpoint:
    path: /apiv2/controlapps/:appToken/control
    method: PATCH
- name: control_app_animation
  endpoint:
    path: /apiv2/controlapps/:appToken/control
    method: PATCH
    data_selector: success
- name: control_app
  endpoint:
    path: /controlapps/:appToken/control
    method: PATCH
- name: update_sub_composition
  endpoint:
    path: /apiv2/controlapps/:appToken/control
    method: PATCH
- name: control_app_details
  endpoint:
    path: /rest-api/api-reference/get-control-app-details
    method: GET
    data_selector: records
    params: {}
- name: update_control_app
  endpoint:
    path: /controlapps/:appToken/control
    method: PATCH
- name: control_app
  endpoint:
    path: /controlapps/:appToken/control
    method: PATCH
- name: take_out_all_output
  endpoint:
    path: /controlapps/:appToken/command
    method: POST
    data_selector: success
    params: {}
- name: control_app_metadata
  endpoint:
    path: /rest-api/api-reference/get-control-app-details/get-a-control-apps-metadata
    method: GET
- name: control_app_model
  endpoint:
    path: /rest-api/api-reference/get-control-app-details/get-a-control-apps-model
    method: GET
- name: controllable_elements
  endpoint:
    path: /rest-api/api-reference/get-control-app-details/get-a-control-apps-control-data
    method: GET
- name: control_app
  endpoint:
    path: /controlapps/:appToken/control
    method: PATCH
- name: take_out_all_output
  endpoint:
    path: /controlapps/:appToken/command
    method: POST
    data_selector: success
    params: {}
- name: data_stream
  endpoint:
    path: /datastreams/:datastreamPrivateToken
    method: PUT
- name: update_data_stream_content
  endpoint:
    path: /datastreams/:datastreamPrivateToken
    method: PUT
    data_selector: null
    params: {}
- name: update_data_stream_content
  endpoint:
    path: /datastreams/:datastreamPrivateToken
    method: PUT
    data_selector: body
    params: {}
- name: control_app
  endpoint:
    path: /rest-api/get-control-app-details
    method: GET
    data_selector: records
- name: data_stream
  endpoint:
    path: /data-stream-api/create-data-stream
    method: POST
    data_selector: records
- name: sub_compositions
  endpoint:
    path: /compositions/{composition_id}/sub-compositions
    method: GET
    data_selector: subCompositions
- name: widgets
  endpoint:
    path: /compositions/{composition_id}/widgets
    method: GET
    data_selector: widgets
- name: control_app
  endpoint:
    path: /api/control_app
    method: GET
    data_selector: data
- name: data_stream
  endpoint:
    path: /api/data_stream
    method: POST
    data_selector: data
- name: control_app
  endpoint:
    path: /rest-api/get-control-app-details
    method: GET
    data_selector: data
    params: {}
- name: data_stream
  endpoint:
    path: /data-stream-api/create-data-stream
    method: POST
    data_selector: data
    params: {}
- name: control_nodes
  endpoint:
    path: /control_nodes
    method: GET
    data_selector: nodes
- name: control_app_metadata
  endpoint:
    path: /rest-api/api-reference/get-control-apps-metadata
    method: GET
- name: control_app_model
  endpoint:
    path: /rest-api/api-reference/get-control-apps-model
    method: GET
- name: control_app_metadata
  endpoint:
    path: /services/data/vXX.X/sobjects/ControlAppMetadata
    method: GET
    data_selector: records
- name: control_app_model
  endpoint:
    path: /services/data/vXX.X/sobjects/ControlAppModel
    method: GET
    data_selector: records
- name: control_node
  endpoint:
    path: /api/control_nodes
    method: GET
    data_selector: nodes
    params: {}
- name: widget_properties
  endpoint:
    path: /api/v1/widget/properties
    method: GET
    data_selector: properties
- name: control_app_details
  endpoint:
    path: /rest-api/api-reference/get-control-app-details
    method: GET
    data_selector: records
    params: {}
- name: data_stream
  endpoint:
    path: /data-stream-api/api-reference
    method: GET
    data_selector: records
    params: {}
- name: control_app_metadata
  endpoint:
    path: /api/control_app/metadata
    method: GET
- name: control_app_model
  endpoint:
    path: /api/control_app/model
    method: GET
- name: control_app
  endpoint:
    path: /api/v1/control-apps
    method: GET
    data_selector: data
    params: {}
- name: data_stream
  endpoint:
    path: /api/v1/data-streams
    method: GET
    data_selector: data
    params: {}
- name: image_widget
  endpoint:
    path: /set-image-widget-url
    method: POST
    data_selector: image
    params: {}
- name: control_app
  endpoint:
    path: /api/control_app
    method: GET
    data_selector: data
- name: data_stream
  endpoint:
    path: /api/data_stream
    method: POST
    data_selector: data
- name: widget
  endpoint:
    path: /widget
    method: GET
    data_selector: properties
- name: control_app
  endpoint:
    path: /rest-api/api-reference/get-control-app-details
    method: GET
    data_selector: records
    params: {}
- name: control_app_metadata
  endpoint:
    path: /rest-api/control-app/metadata
    method: GET
    data_selector: records
- name: control_app_model
  endpoint:
    path: /rest-api/control-app/model
    method: GET
    data_selector: records
- name: widget_properties
  endpoint:
    path: /widget/properties
    method: GET
    data_selector: properties
- name: control_app
  endpoint:
    path: /rest-api/api-reference/get-control-app-details
    method: GET
    data_selector: data
    params: {}
- name: data_stream
  endpoint:
    path: /data-stream-api/api-reference/create-a-data-stream
    method: POST
    data_selector: data
    params: {}
- name: control_nodes
  endpoint:
    path: /control/nodes
    method: GET
- name: text_widget
  endpoint:
    path: /widgets/text
    method: POST
- name: control_nodes
  endpoint:
    path: /api/control_nodes
    method: GET
    data_selector: nodes
- name: control_app
  endpoint:
    path: /control/5kYH7oYCt94a2gnG44O9ev
    method: GET
- name: control_app_details
  endpoint:
    path: /api/control_app/details
    method: GET
    data_selector: data
- name: graphics_sdk
  endpoint:
    path: /libs/singulargraphics/1.0.0/singulargraphics.js
    method: GET
    data_selector: null
    params: {}
- name: non_interactive_overlay
  endpoint:
    path: /singularplayer/client
    method: GET
    data_selector: null
    params: {}
- name: interactive_overlay
  endpoint:
    path: /singularplayer/client
    method: GET
    data_selector: null
    params:
      interactive: '1'
- name: control_nodes
  endpoint:
    path: /control/nodes
    method: GET
    data_selector: nodes
- name: control_app
  endpoint:
    path: /control/5kYH7oYCt94a2gnG44O9ev
    method: GET
    data_selector: data
    params: {}
- name: control_app_metadata
  endpoint:
    path: /rest-api/get-control-apps-metadata
    method: GET
- name: control_app_model
  endpoint:
    path: /rest-api/get-control-apps-model
    method: GET
- name: overlay
  endpoint:
    path: /sdk/functions
    method: POST
    data_selector: overlay
- name: control_app
  endpoint:
    path: /rest-api/api-reference/get-control-app-details
    method: GET
    data_selector: records
- name: data_stream
  endpoint:
    path: /data-stream-api/api-reference
    method: GET
    data_selector: records
- name: overlay
  endpoint:
    path: /overlay
    method: POST
    data_selector: overlay
    params: {}
- name: composition
  endpoint:
    path: /api/composition
    method: POST
    data_selector: data
    params: {}
- name: widget_deployment
  endpoint:
    path: /deploywidget
    method: POST
    data_selector: widget
- name: control_app_details
  endpoint:
    path: /rest-api/api-reference/get-control-app-details
    method: GET
- name: data_stream
  endpoint:
    path: /data-stream-api/api-reference
    method: GET
- name: control_app
  endpoint:
    path: /api/control-apps
    method: GET
    data_selector: data
    params: {}
- name: data_stream
  endpoint:
    path: /api/data-streams
    method: GET
    data_selector: data
    params: {}
- name: control_app_metadata
  endpoint:
    path: /rest-api/api-reference/get-control-apps-metadata
    method: GET
    data_selector: metadata
- name: control_app_model
  endpoint:
    path: /rest-api/api-reference/get-control-apps-model
    method: GET
    data_selector: model
- name: control_app_details
  endpoint:
    path: /api/v1/control_app/details
    method: GET
    data_selector: data
    params: {}
- name: data_stream
  endpoint:
    path: /api/v1/data_stream
    method: POST
    data_selector: data
    params: {}
- name: control_app
  endpoint:
    path: /api/control-apps
    method: GET
    data_selector: data
    params: {}
- name: data_stream
  endpoint:
    path: /api/data-streams
    method: GET
    data_selector: data
    params: {}
- name: control_app
  endpoint:
    path: /api/v1/control-apps
    method: GET
    data_selector: data
    params: {}
- name: control_app
  endpoint:
    path: /rest/api/v1/control_app
    method: GET
    data_selector: data
    params: {}
- name: composition
  endpoint:
    path: /rest/api/v1/composition
    method: GET
    data_selector: data
    params: {}
- name: control_app
  endpoint:
    path: /api/v1/control-apps
    method: GET
    data_selector: data
    params: {}
- name: composition
  endpoint:
    path: /api/v1/compositions
    method: GET
    data_selector: data
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Uses Shared App Token for authentication.
- The Singular REST API v2 allows you to programmatically send and receive data and
  trigger animations from Singular overlays.
- Rate limits are in place to manage the volume of requests.
- Daily and burst rate limiters depend on your subscription type.
- Tokens are used as path variables in the query URL. Requests using Tokens require
  no authentication and support calls for sending data and trigger animations.
- Private and public tokens are used for sending data and receiving data.
- Rate limits apply based on subscription type
- Common error status code 429 indicates too many requests
- Requires a Singular account to access the API.
- Every API request requires an app token, which refers to a specific instance of
  a control app and is required for authorization.
- Requires setup of connected app in Singular
- To update graphics in a control app, you need their sub-composition IDs and payload
  structures.
- Send a GET request to the endpoint for Get a control app's metadata, replacing :appToken
  with the app token for your app instance.
- By getting an app's model, or payload descriptions, you can see its control parameters
  in detail, including data types of the control node fields.
- Requires app token for the particular instance of the control app
- Requires app token for the particular instance of the control app.
- Replace :appToken with the actual app token for your app instance.
- Prepare a PATCH request to update multiple sub-compositions in one API call
- Include the actual sub-composition IDs and payload structures in the request body
- These API calls return information about control apps, including their metadata,
  model, and controllable elements.
- Requires app token for the control app instance
- Sub-composition IDs and payload structures are necessary for updates
- Animates all overlays in a control app to their Out state.
- The maximum size of one data package is limited to 60 KB.
- The maximum number of simultaneous connections for one data stream is limited to
  100.
- Data streams have no daily or burst rate limiters.
- Locate the private token and public token, which you'll need to link a data stream
  to a composition and send data to a control app using the data stream API.
- The private token is used by the REST API to send data to the data stream and must
  be kept secret.
- Requires setup of connected app in api
- Requires composition scripting to prepare the composition to accept data from the
  data stream API.
- Overlay script is general only required in very specific cases and requires advanced
  composition scripting skills.
- Some objects may return nulls in deeply nested fields
- 'The sub-composition contains three widgets: lowerTitle, lowerSubtitle, and lowerLogo'
- Uses OAuth2 with refresh token — requires setup of connected app in Singular
- The overlay script is general only required in very specific cases and requires
  advanced composition scripting skills.
- Control nodes can be read and updated using composition scripting.
- This example explains how to read control nodes, concat strings, and update a widget’s
  text property.
- Some properties may return nulls in deeply nested fields
- Uses OAuth2 for authentication.
- Some responses may include additional metadata fields
- The example composition has one sub-composition called Lower.
- The widget object provides methods to read and update widget specific properties.
- Some methods include getDomElement, getPayload, getPositionX, getPositionY, getSizeX,
  getSizeY.
- Uses OAuth2 for authentication
- This example explains how to read control nodes and use the text widget’s HTML feature
  to style text with auto-sizing background.
- Read control nodes, update ticker messages, and restart ticker on In animation
- Include the Singular Overlay SDK JavaScript library in your HTML code
- The overlay SDK can be customized with various configuration options.
- Requires a local installation of Node.js.
- Include the Singular Graphics SDK JavaScript library in your HTML code.
- 'Widgets never get deleted from the Singular.live platform. They are always in one
  of the following states: development, published, archived, depreciated.'
- Include the Singular overlay SDK JavaScript library in your HTML code
- Uses interactive true to handle mouse events.
- Delay is specified in milliseconds.
- To create a control app, right-click on the composition and select New > Control
  app.
- The new composition will appear in the Compositions section of the same fold that
  contains the control app.
- User Administration and Developer Tools should be switched on.
- Animation is important for creating dynamic and compelling overlays.
- Defines how an overlay behaves when taken on-air or off-air, or sitting on screen.
- 'Access your Dashboard here: https://app.singular.live/dashboard'
- Interactive overlays only work if you prepare and set up embed codes on your website.
- Singular’s overlay builder, Composer, is where you create and edit custom HTML5
  overlays.
- If you want to customize an app template, you'll first need to extract a composition
  from it.
- Each template in the UNO is designed to do one thing and do it brilliantly.
- General support resources available online.
- Developer support includes access to Postman API collection.
- Ensure all outputs run smoothly at a constant 60fps.
- Using a GPU is recommended for smooth scrolling ticker animations.
- As a developer, you'll mostly be updating and controlling overlays with the Singular
  APIs.
- Requires setup of connected app in API
- Some responses may contain null values for optional fields
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '429 Too Many Requests: Implement retry mechanism with exponential backoff'
- '401 Unauthorized: Invalid credentials or token expired.'
- '200 OK: Indicates a successful request'
- '200 OK: Indicates successful request.'
- '200 OK: Success response'
- '200 OK: Indicates successful update with payload { ''success'': true }'
- '200 OK: Success response with payload of { ''success'': true }'
- '200 OK: Success response with payload { "success": true }'
- '200: OK Success'
- '401 Unauthorized: Check your API token'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuthToken
  - AppToken
  - ControlApplication
client:
  base_url: https://app.singular.live
  auth:
    type: oauth2
source_metadata: null
