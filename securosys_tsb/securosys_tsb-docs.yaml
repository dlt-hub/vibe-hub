resources:
- name: versionInfo
  endpoint:
    path: /v1/versionInfo
    method: GET
    data_selector: Version
- name: createKey
  endpoint:
    path: /v1/key
    method: POST
    data_selector: json
- name: synchronousSign
  endpoint:
    path: /v1/synchronousSign
    method: POST
    data_selector: signature
- name: DKE Web Service
  endpoint:
    path: /dke/webservice
    method: GET
    data_selector: data
    params: {}
- name: version_info
  endpoint:
    path: /versionInfo
    method: GET
    data_selector: Version
    params: {}
- name: create_key
  endpoint:
    path: /v1/key
    method: POST
    data_selector: json
    params: {}
- name: sign_payload
  endpoint:
    path: /v1/synchronousSign
    method: POST
    data_selector: signature
    params: {}
- name: FortiGate
  endpoint:
    path: /fortigate/overview
    method: GET
    data_selector: data
    params: {}
- name: FortiWeb
  endpoint:
    path: /fortiweb/overview
    method: GET
    data_selector: data
    params: {}
- name: Rest-API
  endpoint:
    path: /tsb/overview
    method: GET
    data_selector: records
- name: PKCS#11
  endpoint:
    path: /pkcs/overview
    method: GET
    data_selector: records
- name: Java Cryptography Extension
  endpoint:
    path: /jce/overview
    method: GET
    data_selector: records
- name: ServicePackages
  endpoint:
    path: /cloudhsm/Packages/overview
    method: GET
    data_selector: packages
- name: CloudHSM
  endpoint:
    path: /cloudhsm/overview
    method: GET
    data_selector: overview
- name: generate_key
  endpoint:
    path: /v1/pki/keys/generate/securosys-hsm
    method: POST
    data_selector: data
    params: {}
- name: import_cert_and_key
  endpoint:
    path: /v1/pki/issuers/import/securosys-hsm
    method: POST
    data_selector: data
    params: {}
- name: import_key
  endpoint:
    path: /v1/pki/keys/import/securosys-hsm
    method: POST
    data_selector: data
    params: {}
- name: export_private_key
  endpoint:
    path: /v1/pki/key/{key_reference}/export
    method: GET
    data_selector: data
    params:
      pkcs11Token: YOUR_HSM_USERNAME
- name: export_private_key_and_certificate
  endpoint:
    path: /v1/pki/issuer/{issuer_reference}/export
    method: GET
    data_selector: data
    params:
      pkcs11Token: YOUR_HSM_USERNAME
- name: rotate_key
  endpoint:
    path: /v1/securosys-hsm/keys/{key-name}/rotate
    method: PUT
- name: block_key
  endpoint:
    path: /v1/securosys-hsm/keys/{key-name}/block
    method: PUT
- name: unblock_key
  endpoint:
    path: /v1/securosys-hsm/keys/{key-name}/unblock
    method: PUT
- name: delete_key
  endpoint:
    path: /v1/securosys-hsm/keys/{key-name}
    method: DELETE
- name: key_attestation
  endpoint:
    path: /v1/securosys-hsm/keys/{key-name}/xml
    method: GET
- name: keys
  endpoint:
    path: /v1/securosys-hsm/keys
    method: LIST
- name: key_versions
  endpoint:
    path: /v1/securosys-hsm/keys/{key-name}
    method: LIST
- name: read_key
  endpoint:
    path: /v1/securosys-hsm/keys/{key-name}
    method: GET
- name: write_key
  endpoint:
    path: /v1/securosys-hsm/keys/{key-type}/{key-name}
    method: PUT
- name: register_key
  endpoint:
    path: /v1/securosys-hsm/keys/{key-name}/register
    method: PUT
- name: import_key
  endpoint:
    path: /v1/securosys-hsm/keys/{key-name}/import
    method: PUT
- name: export_key
  endpoint:
    path: /v1/securosys-hsm/keys/{key-name}/export
    method: PUT
- name: modify_key
  endpoint:
    path: /v1/securosys-hsm/keys/{key-name}/modify
    method: PUT
- name: update_key_password
  endpoint:
    path: /v1/securosys-hsm/keys/{key-name}/update-password
    method: PUT
- name: encrypt
  endpoint:
    path: /v1/securosys-hsm/operation/encrypt/{key-name}
    method: PUT
    data_selector: payload
    params: {}
- name: decrypt
  endpoint:
    path: /v1/securosys-hsm/operation/decrypt/{key-name}
    method: PUT
    data_selector: encryptedPayload
    params: {}
- name: sign
  endpoint:
    path: /v1/securosys-hsm/operation/sign/{key-name}
    method: PUT
    data_selector: signatureAlgorithm
    params: {}
- name: verify
  endpoint:
    path: /v1/securosys-hsm/operation/verify/{key-name}
    method: PUT
    data_selector: signatureAlgorithm
    params: {}
- name: wrap
  endpoint:
    path: /v1/securosys-hsm/operation/wrap/{key-to-be-wrapped}/{wrap-key-name}
    method: PUT
    data_selector: wrapMethod
    params: {}
- name: unwrap
  endpoint:
    path: /v1/securosys-hsm/operation/unwrap/{new-unwrapped-key-name}/{wrap-key-name}
    method: PUT
    data_selector: keyLabel
    params: {}
- name: requests
  endpoint:
    path: /v1/securosys-hsm/requests
    method: LIST
    data_selector: map[]
    params: {}
- name: request_detail
  endpoint:
    path: /v1/securosys-hsm/requests/{id}
    method: GET
    data_selector: map[key:custom_rsa3 keyLabel:CUSTOM_RSA_4]
    params: {}
- name: delete_request
  endpoint:
    path: /v1/securosys-hsm/requests/{id}
    method: DELETE
    data_selector: n/a
    params: {}
- name: FortiGate
  endpoint:
    path: /fortigate/overview
    method: GET
- name: FortiWeb
  endpoint:
    path: /fortiweb/overview
    method: GET
- name: HSM Registration
  endpoint:
    path: /config/system/nethsm
    method: SET
    data_selector: status
    params:
      status: enable
- name: Upload HSM Configuration File
  endpoint:
    path: /execute/nethsm/upload-primus-cfg-raw
    method: EXECUTE
    data_selector: configFileName
    params:
      tftp-server-ip: 192.168.159.1
- name: Primus HSM Configuration
  endpoint:
    path: /fortinet/Installation/ProviderPreparation
    method: POST
    data_selector: configuration
    params: {}
- name: Master Encryption Key
  endpoint:
    path: /oracle-tde/Tutorials/configuration
    method: GET
    data_selector: records
    params: {}
- name: HSM Configuration
  endpoint:
    path: /oracle-tde/Tutorials/configuration
    method: GET
    data_selector: records
    params: {}
- name: PrimusAPI_PKCS11
  endpoint:
    path: /artifactory/p11/PrimusAPI_PKCS11-v2.1.1.zip
    method: GET
    data_selector: credentials
    params:
      USER: support.reader.p11
      CRED: REPLACE_ME
      VERSION: v2.1.1
- name: HSM Configuration
  endpoint:
    path: /hsm/configuration
    method: GET
    data_selector: configuration
    params: {}
- name: Login
  endpoint:
    path: /hsm/login
    method: POST
    data_selector: login_response
    params: {}
- name: Logout
  endpoint:
    path: /hsm/logout
    method: POST
    data_selector: logout_response
    params: {}
- name: Fetch Permanent Secret
  endpoint:
    path: /hsm/secret
    method: GET
    data_selector: secret
    params: {}
- name: KeyStore
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: certificate
  endpoint:
    path: /api/v1/certificate
    method: GET
    data_selector: data
    params: {}
- name: cryptocurrency
  endpoint:
    path: /api/v1/cryptocurrency
    method: GET
    data_selector: data
    params: {}
- name: PrimusAPI_JCE
  endpoint:
    path: /PrimusAPI_JCE-X-v2.5.1.zip
    method: GET
notes:
- Uses JWT for authentication — required for CloudHSM only
- DKE provides powerful control, but its security effectiveness is entirely dependent
  on your organization's ability to secure its components.
- SKAs allow applications to define authorization policies directly on keys.
- Authorization rules are enforced by the HSM inside its protected environment.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Default connectivity details are provided in the On-Premises - Primus HSM guide.
- In some cases, connectivity details may differ. Please contact your HSM administrator
  if you experience any issues.
- JWT-Token is required for authentication
- API is deployed as a Docker container
- JCE connection must be enabled both for the device and the user partition (enabled
  by default in the Dev Program).
- OpenSSL v3.x Provider API offers native support for the PKCS#11 API.
- OpenSSL v1.x OpenSC Engine API is for compatibility with older systems.
- OpenSSL v1.x Engine API provides centralized management of PKCS#11 modules.
- The CNG/KSP Provider is delivered as an MSI package.
- CNG/KSP Provider V1.40 onwards supports installation of multiple instances.
- Setting up the tool is a breeze - a simple process of downloading the .zip file,
  extracting it, and it's ready for immediate use.
- No interaction with your data
- AWS KMS or the Securosys XKS proxy never directly interact with your cryptographic
  data
- If you want to fully keep your keys in your own HSM (instead of copying them to
  AWS), take a look at the AWS XKS integration.
- Installation of the Securosys Primus PKCS#11 Provider requires that you are already
  familiar with Microsoft Windows Server administration.
- For on-premises HSM deployed operation administrative skills are required for Securosys
  Primus HSMs.
- Securosys Hardware Security Modules (HSM) are optimized for the physical protection
  of private key material.
- Securosys Smart Key Attributes (SKA) allow for complex organizational policies.
- Securosys Primus HSMs are optimized for the physical protection of private key material
  and FIPS 140-2 Level 3 and Common Criteria certified.
- Seamless key operations without exposing private keys
- Hardware-backed certificate signing for all CA operations
- Integrates with Securosys Primus HSM or CloudHSM for secure key management.
- Securosys Primus HSMs and CloudHSM integrate seamlessly with both the Enterprise
  and Community editions of EJBCA.
- All certificate issuance and validation processes occur within the protected confines
  of the HSM.
- Private keys are never accessible outside the HSM.
- Data always needed to be secure. AE brings another layer of data in motion protection,
  filling the gap if other transport security mechanisms are compromised.
- Salesforce provides robust solutions for various industries, leveraging cloud computing,
  artificial intelligence, and data analytics to drive business growth and innovation.
- Bring Your Own Key (BYOK) is a security procedure that allows organizations to manage
  their encryption keys independently, enhancing control over data protection.
- Salesforce Shield Platform Encryption with BYOK enables customers to use their own
  encryption keys to safeguard sensitive data stored in Salesforce.
- A Hardware Security Module (HSM) is required for integration.
- IDcentral Identity Registration Platform (IRP) must be installed and configured.
- Consult the Quickstart section for a comprehensive task listing.
- For detailed installation and configuration instructions, follow the Installation
  section.
- Includes AWS, Azure, Vault, Kubernetes integrations.
- Uses JSON Web Token (bearer token) for authentication.
- Alternative authentication through mutual TLS for dedicated TSBaaS instance.
- FIPS 140-2 Level 3 certified for v2.5.14-f
- FIPS 140-3 certification in progress, expected in 2025
- CC EAL4+ certified for v2.8.21, with evaluation for v3.1.0 ongoing
- The permanent secret must be retrieved within the lifespan (168h) of the setup password
  after first use.
- Get started with CloudHSM for free.
- Securosys employs HSM clusters consisting of a minimum of two and a maximum of four
  HSMs.
- Each data center is equipped with multiple redundant internet connections to safeguard
  against network disruptions.
- The CloudHSM disaster recovery procedures are exclusively applicable to service
  packages with Disaster Recovery site setup.
- Pre-built binaries tested with Securosys HSMs are available in the download section
  (login required).
- The p11-kit was designed to work with OpenSSL v1.1. When running OpenSSL 3.x we
  recommend using the OpenSSL pkcs11-provider instead.
- RedHat Enterprise Linux 8 onwards improves support for storing secrets on external
  hardware like smartcards and HSMs via PKCS#11.
- Integrate seamlessly with HSM for enhanced security.
- To use keys to creating issuer etc., always use keyId/key as a reference!
- All keys are stored as reference to existing keys on HSM
- Manage keys securely stored on the Hardware Security Module (HSM).
- Perform cryptographic operations on the Hardware Security Module (HSM).
- Use enhanced HSM features such as hardware-enforced multi-authorization workflows
  for compliance, signature services, or blockchain transactions.
- Ensure that Transaction Security Broker (TSB) is installed, configured and updated
  to version TSB Software v.1.18.0 or higher.
- Ensure that your Securosys Primus HSM is updated to Primus HSM Firmware v2.8.21,
  v2.11 or higher.
- 'Add the following parameter in the configuration file config.hcl: plugin_directory
  - must contain the absolute path to the directory where the plugins are stored'
- 'After building the plugin, it must be enabled with the following command before
  running it on the test server: $ vault secrets enable securosys-hsm'
- In case of 'no handler for route "securosys-hsm/...". route entry found, but backend
  is nil.' error, try to replace the secrets engine binary and to register the new
  upgraded plugin.
- Some key types are symmetric, and therefore don't have a public key nor a SKA policy.
- Probably the provided key label is already in use with another key on the HSM, or
  the request contains a policy for a symmetric key.
- 'All Securosys Secrets Engine commands have the additional options: -field and -format.'
- The command path-help will print help information of a specific path.
- At least one cryptographic operation must be allowed.
- To download the Secrets Engine plugin, you must be a registered support user.
- If you are new to developing applications with a Securosys-HSM, you can obtain a
  free developer account by contacting us at info@securosys.com.
- Fixed authentication with TSB using mTLS
- Securosys Hardware Security Modules (HSMs) are available as on-premises solutions
  (Primus HSM) or cloud service (CloudHSM).
- Securosys PKCS#11 provider v2.2.4 or later is already integrated into Fortinet (no
  installation needed).
- A valid configuration file and secrets have to be prepared and tested in advance
  on a separate client machine.
- The PKCS#11 API must be licensed and enabled.
- A fresh valid user setup password is required for client onboarding.
- The Security Policy should restrict Import/Export/Extract.
- Logging must be disabled (write_log_file = false; write_syslog = false;)
- Establish all connections on initialization for latency optimization (connect_on_init
  = true;)
- DNS is currently not supported in the configuration file (host = 'a.b.c.d'), use
  IP addresses instead
- Any quotes in the configuration file have to be escaped by a backslash!
- The maximum secrets length supported by FortiGate is 3k bytes.
- FortiWeb must be explicitly configured to use an HSM for cryptographic operations.
- Select Status Enable to activate the HSM integration.
- All certificate issuance and validation processes occur within the protected confines
  of the HSM. Private keys are never accessible outside the HSM.
- These procedures are an example to showcase the integration of Securosys CloudHSM
  or on-premises Primus HSM with Microsoft AD CS.
- The below mentioned version of all the Hardware and Software were used for our testing.
- Other version combinations need to be additionally tested and verified.
- This document assumes you have already completed the Configuration steps and meet
  all Prerequisites.
- Securosys always recommends to store your keys on a Primus HSM
- Once the keystore is on an HSM, backups are not possible natively, via Oracle.
- Due to the way Oracle DBs functions, they do not allow to preserve the history of
  the encryption key within the keystore itself when using an HSM.
- Primus HSM does not natively support auto-login but Oracle TDE allows similar behavior
  by storing the HSM password securely in an external software keystore.
- Ensure that your oracle user has the correct permissions over the Primus Library
  files
- Allow traffic between CyberArk Primary Vault and the HSM in the DBParm.ini file.
- Securosys CloudHSM is a Hardware Security Module (HSM) available as cloud service.
- Now the setup is complete and you can use CyberArk Vault with the HSM
- If a policy is left set to null during creation, the key will not use SKA.
- Keys not configured with SKA during creation cannot be modified later to use SKA.
- If you plan to use SKA Keys later in your project, start with an empty (but non-null)
  policy.
- This setup is designed for organizations that want to centrally manage approvers
  and be able to back up approver keys.
- The integrity key is not created automatically, but needs to be explicitly created
  by the application accessing the HSM partition.
- Uses OAuth2 with refresh token — requires setup of connected app in Securosys
- Some operations may throw exceptions when capabilities are disabled
- The API login is protected against brute force attacks (setup password and permanent
  secret). After too many wrong trials the API login is locked for some time.
- Uses TLS for secure communication
- HSM credentials are required for setup
- Learn to implement secure login, create signatures, manage key attributes, and perform
  key enumeration using Java Cryptography Extension (JCE) and Java Cryptography Architecture
  (JCA) with Securosys Hardware Security Modules (HSMs).
- Direct connection to the HSM without reverse proxy is assumed.
- When using Securosys CloudHSM or other HSM as a service, apply lessons from CloudHSMSample.
- Private Key Operations within HSM
- Requires setup of connected app in Securosys.
- Some operations may require specific authorizations.
- To download the PrimusJCE Provider retrieve the Download-Link-File from the Securosys
  Support Portal.
- Bug fixes included in this version.
- New features such as External key storage and Weighted cluster list.
- Docker image signing have emerged as essential components of this security posture
- Securosys HSM innovations like hardware enforced multi-authorization are at one’s
  disposal
errors:
- '0x80000065: ERR_MASTER_NOT_REACHABLE - API Command execution failed because master
  is not reachable'
- '0x80000066: ERR_HA_REQUEST_TIMEOUT - API Command execution failed because master
  is not responding'
- no handler for route "securosys-hsm/...". route entry found, but backend is nil.
- 'status: 500, body: {"errorCode":701,"reason":"res.error.in.hsm","message":"Error
  unwrapping key"}'
- 'ORA-00600: internal error code, arguments: [invalid keystore location], [4], ...'
- 'PrimusProviderException: Error during signing or verification due to disabled capabilities'
auth_info:
  mentioned_objects:
  - PrimusConfiguration
  - PrimusLogin
  - PrimusProvider
  - PrimusKeyStore
  - PrimusKeyTypes
  - PrimusKeyAttributes
  - Download-Link-File
client:
  base_url: https://cloud.securosys.com/cloudhsm
  headers:
    Accept: application/json
source_metadata: null
