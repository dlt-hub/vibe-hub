resources:
- name: products
  endpoint:
    path: /admin/api/2025-07/products.json
    method: POST
    data_selector: product
- name: product
  endpoint:
    path: /admin/api/2025-07/products/{product_id}.json
    method: PUT
    data_selector: product
- name: products
  endpoint:
    path: /admin/api/v2021-01/products.json
    method: GET
    data_selector: products
- name: orders
  endpoint:
    path: /admin/api/v2021-01/orders.json
    method: GET
    data_selector: orders
- name: webhooks
  endpoint:
    path: /api/webhooks
    method: POST
    data_selector: webhook_data
- name: metafields
  endpoint:
    path: /api/{api_version}/graphql.json
    method: POST
    data_selector: data.productUpdate.product.metafield
    params: {}
- name: metaobjects
  endpoint:
    path: /api/{api_version}/graphql.json
    method: POST
    data_selector: data.metafieldDefinitionCreate.createdDefinition
    params: {}
- name: themes
  endpoint:
    path: /admin/api/2021-01/themes.json
    method: GET
    data_selector: themes
    params: {}
- name: products
  endpoint:
    path: /admin/api/v1/products.json
    method: GET
    data_selector: products
- name: orders
  endpoint:
    path: /admin/api/v1/orders.json
    method: GET
    data_selector: orders
- name: Checkout Kit
  endpoint:
    path: /docs/storefronts/mobile/checkout-kit
    method: GET
- name: Customer Account API
  endpoint:
    path: /docs/api/customer
    method: GET
- name: Storefront API
  endpoint:
    path: /docs/api/storefront/latest/queries/customer
    method: GET
- name: Multipass
  endpoint:
    path: /docs/api/multipass
    method: GET
- name: Cart Buyer Identity
  endpoint:
    path: /docs/api/storefront/latest/mutations/cartBuyerIdentityUpdate
    method: GET
- name: app_blocks
  endpoint:
    path: /admin/api/app_blocks
    method: GET
- name: app_embed_blocks
  endpoint:
    path: /admin/api/app_embed_blocks
    method: GET
- name: script_tags
  endpoint:
    path: /admin/api/script_tags
    method: GET
- name: assets
  endpoint:
    path: /admin/api/assets
    method: GET
- name: app_proxies
  endpoint:
    path: /admin/api/app_proxies
    method: GET
- name: cart
  endpoint:
    path: /cart.js
    method: GET
    data_selector: data
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: categories
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
- name: categories
  endpoint:
    path: /categories
    method: GET
- name: tags
  endpoint:
    path: /tags
    method: GET
- name: products
  endpoint:
    path: /admin/api/2023-01/products.json
    method: GET
    data_selector: products
- name: orders
  endpoint:
    path: /admin/api/2023-01/orders.json
    method: GET
    data_selector: orders
- name: categories
  endpoint:
    path: /categories
    method: GET
- name: tags
  endpoint:
    path: /tags
    method: GET
- name: products
  endpoint:
    path: /admin/api/v2021-07/products.json
    method: GET
    data_selector: products
- name: products
  endpoint:
    path: /admin/api/v2023-10/products.json
    method: GET
    data_selector: products
- name: orders
  endpoint:
    path: /admin/api/v2023-10/orders.json
    method: GET
    data_selector: orders
- name: categories
  endpoint:
    path: /categories
    method: GET
- name: latest_topics
  endpoint:
    path: /tag/remix/l/latest
    method: GET
- name: top_topics
  endpoint:
    path: /tag/remix/l/top
    method: GET
- name: products
  endpoint:
    path: /admin/api/2021-04/products.json
    method: GET
    data_selector: products
- name: collections
  endpoint:
    path: /admin/api/2021-04/custom_collections.json
    method: GET
    data_selector: custom_collections
- name: categories
  endpoint:
    path: /categories
    method: GET
- name: latest
  endpoint:
    path: /tag/liquid/l/latest
    method: GET
- name: top
  endpoint:
    path: /tag/liquid/l/top
    method: GET
- name: products
  endpoint:
    path: /admin/api/vXX.X/products.json
    method: GET
    data_selector: products
    params:
      incremental: updated_at
- name: customers
  endpoint:
    path: /admin/api/vXX.X/customers.json
    method: GET
    data_selector: customers
    params: {}
- name: product
  endpoint:
    path: /admin/api/vXX.X/products.json
    method: GET
    data_selector: products
    params: {}
- name: customer
  endpoint:
    path: /admin/api/vXX.X/customers.json
    method: GET
    data_selector: customers
    params: {}
- name: products
  endpoint:
    path: /admin/api/2021-04/products.json
    method: GET
    data_selector: products
- name: orders
  endpoint:
    path: /admin/api/2021-04/orders.json
    method: GET
    data_selector: orders
- name: products
  endpoint:
    path: /admin/api/2021-07/products.json
    method: GET
    data_selector: products
    params: {}
- name: products
  endpoint:
    path: /admin/api/2023-01/products.json
    method: GET
    data_selector: products
    params: {}
- name: orders
  endpoint:
    path: /admin/api/2023-01/orders.json
    method: GET
    data_selector: orders
    params: {}
- name: products
  endpoint:
    path: /admin/api/2021-04/products.json
    method: GET
    data_selector: products
- name: orders
  endpoint:
    path: /admin/api/2021-04/orders.json
    method: GET
    data_selector: orders
- name: checkout
  endpoint:
    path: /admin/api/2021-07/checkouts.json
    method: GET
    data_selector: checkouts
    params: {}
- name: products
  endpoint:
    path: /admin/api/2021-07/products.json
    method: GET
    data_selector: products
    params: {}
- name: webhook_order_created
  endpoint:
    path: /api/webhooks/order-created
    method: POST
    data_selector: webhook_data
    params:
      topics:
      - orders/create
- name: publications
  endpoint:
    path: /api/2025-07/graphql.json
    method: POST
    data_selector: data
    params: {}
- name: discount
  endpoint:
    path: /discount/CODE
    method: GET
- name: products
  endpoint:
    path: /admin/api/graphql
    method: POST
    data_selector: data.products
    params: {}
- name: discussions
  endpoint:
    path: /c/partner-discussions
    method: GET
    data_selector: topics
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: GET
- name: dev-stores
  endpoint:
    path: /tag/dev-stores/l/latest
    method: GET
- name: collects
  endpoint:
    path: /admin/api/latest/collects.json
    method: GET
    data_selector: records
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: GET
- name: latest_topics
  endpoint:
    path: /tag/app-store/l/latest
    method: GET
- name: top_topics
  endpoint:
    path: /tag/app-store/l/top
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Send marketing email
  endpoint:
    path: /t/shopify-flow-send-marketing-email-not-rendering-dynamic-variables-from-run-code-step
    method: GET
    data_selector: records
    params: {}
- name: flow_action
  endpoint:
    path: /admin/api/2021-01/flow_actions.json
    method: GET
    data_selector: flow_actions
- name: categories
  endpoint:
    path: /tag/automation/l/latest
    method: GET
- name: automation
  endpoint:
    path: /tag/automation/l/top
    method: GET
- name: draft_order
  endpoint:
    path: /admin/api/vX.X/draft_orders.json
    method: GET
    data_selector: draft_orders
- name: myapp
  endpoint:
    path: /apps/myapp/api/proxy/uploadPic
    method: POST
- name: Get Support email
  endpoint:
    path: /t/change-get-support-email/22569
    method: GET
- name: app_proxy
  endpoint:
    path: /apps/test-app/get-sth
    method: GET
- name: ui-nav-bar
  endpoint:
    path: /t/ui-nav-bar-shake-method
    method: GET
- name: publications
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.publications.nodes
    params:
      catalogType: APP
- name: admin.product-index.selection-action.render
  endpoint:
    path: /admin/product-index/selection-action/render
    method: GET
- name: AppProvider
  endpoint:
    path: /app/routes/auth/$.tsx
    method: GET
    data_selector: json
    params: {}
- name: product
  endpoint:
    path: /admin/api/2025-04/products.json
    method: POST
    data_selector: product
    params: {}
- name: webhook_subscriptions
  endpoint:
    path: /webhooks
    method: POST
    data_selector: subscriptions
- name: products
  endpoint:
    path: /graphql.json
    method: POST
    data_selector: edges
    params:
      first: 5
- name: Admin API
  endpoint:
    path: /admin/api
    method: GET
    data_selector: data
    params: {}
- name: Storefront API
  endpoint:
    path: /storefront/api
    method: GET
    data_selector: data
    params: {}
- name: discount
  endpoint:
    path: /discount/:functionId
    method: GET
    data_selector: operations
    params: {}
- name: conversations
  endpoint:
    path: /{org_id}/api/2025-04/graphql.json
    method: POST
    data_selector: data.conversations.edges
    params:
      first: 20
      unreadOnly: true
      statuses:
      - ACTIVE
- name: products
  endpoint:
    path: /api/2025-04/graphql.json
    method: POST
    data_selector: products
    params: {}
- name: productDetails
  endpoint:
    path: /productDetails
    method: GET
    data_selector: productByHandle
    params: {}
- name: storefront
  endpoint:
    path: /api/storefront
    method: GET
    data_selector: data
    params: {}
- name: customer_account
  endpoint:
    path: /api/customer
    method: GET
    data_selector: data
    params: {}
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: products
- name: customer_account
  endpoint:
    path: /{shop_id}/account/customer/api/2025-04/graphql
    method: POST
- name: customer
  endpoint:
    path: /account/customer/api/2025-04/graphql
    method: POST
    data_selector: customer
    params: {}
- name: webhook
  endpoint:
    path: /app/routes/webhooks.app.product_updated
    method: POST
- name: customer_events
  endpoint:
    path: /customer/events
    method: POST
    data_selector: events
    params: {}
- name: orders
  endpoint:
    path: /admin/api/v1/orders.json
    method: GET
    data_selector: orders
    params: {}
- name: products
  endpoint:
    path: /admin/api/v1/products.json
    method: GET
    data_selector: products
    params: {}
- name: GraphQL Admin API
  endpoint:
    path: /admin/api/{api_version}/graphql.json
    method: POST
- name: Storefront API
  endpoint:
    path: /api/{api_version}/graphql.json
    method: POST
- name: Payments Apps API
  endpoint:
    path: /payments_apps/api/{api_version}/graphql.json
    method: POST
- name: ui_extension
  endpoint:
    path: /checkout-ui-extensions
    method: GET
    data_selector: extensions
- name: checkout_extension
  endpoint:
    path: /admin/api/v1/checkout_extensions.json
    method: GET
    data_selector: extensions
notes:
- All REST Admin API queries require a valid Shopify access token.
- Apps need to request specific access scopes during the install process.
- The REST Admin API supports a limit of 40 requests per app per store per minute.
- Uses OAuth2 with refresh token — requires setup of a Shopify app
- Apps should be built using accessibility best practices.
- Shopify uses OAuth2 for authentication.
- Shopify uses cookies to provide necessary site functionality and improve your experience.
- Uses OAuth2 for authentication.
- Metafields serve as the foundation for extending Shopify's data model.
- Metaobjects are a powerful way to create and reuse custom data structures.
- Webhooks are organized into topics.
- Webhooks are divided by topic.
- Shopify recommends using Google Pub/Sub whenever possible.
- Ensure to set up OAuth authentication in your Shopify app.
- Shopify APIs require OAuth2 authentication.
- Ensure that you have the necessary permissions for the API scopes.
- If your app integrates with a Shopify theme and you plan to submit it to the Shopify
  App Store, you must use theme app extensions.
- This is an unauthenticated API.
- All API responses return JSON-formatted data.
- Product JSON responses are limited to a maximum of 250 variants.
- API may have restrictions based on access scopes configured in app toml file.
- Shopify API uses OAuth2 with a refresh token mechanism.
- Ensure to set the correct scopes in your app settings.
- Fully aware of the documentation that does not list South Africa as a country supported
  by address autocompletion at checkout.
- Ensure to configure your app's access scopes in the app toml file.
- API rate limits are enforced
- Access tokens must be securely stored
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Requires setup of connected app in Shopify
- Some objects may return nulls in deeply nested fields
- Uses OAuth2 with refresh token — requires setup of connected app in Shopify
- Ensure that the correct permissions are set for the API access.
- Some objects like Contact may return nulls in deeply nested fields
- Requires setup of OAuth application in Shopify
- In the visual preview, `{{ section.id }}` includes invalid characters which break
  the section.
- Certain types of products appear to not be showing up in storefront but DO in customizer/editor.
- Requires setup of Shopify app for OAuth2.
- Some endpoints may be rate limited.
- Uses OAuth2 with refresh token — requires setup of Shopify app
- Some objects may return limited fields based on API version
- Requires the Shopify API key and secret to be configured in the app settings.
- Rate limits are enforced; be aware of the limits to avoid throttling.
- Uses OAuth2 with authorization code flow — requires setup of app in Shopify Partner
  Dashboard
- Uses OAuth2 with refresh token — requires setup of app in Shopify admin
- Some objects like products may have rate limits on API requests
- Requires a valid Shopify store URL and API credentials.
- No error messaging, it just quietly fails.
- Payments must be handled within Shopify’s checkout.
- You will need to invited as a payment partner to achieve this.
- Requires setup of OAuth in Shopify Partner Dashboard
- Im trying to implement horizontal scroller for products in checkout extensions fro
  thank you page , im using ScrollView and direction=”inline” to make it scroll horizonatlly
  , but in Frontend , its still stacked along v
- This app is not approved to subscribe to webhook topics containing protected customer
  data.
- HMAC verification is needed for webhooks.
- Once processingFailed, it can never reset to false for the same theme. The only
  solution would be to upload it as a new theme.
- Some queries may return unexpected results due to API limitations
- Some objects like publications may return nulls in deeply nested fields
- 'Required access: read_products access scope.'
- shopify app dev localhost is not supported webhook/app proxy/ Flow actions.
- You now can serve your app using localhost (127.0.0.1) with a self-signed HTTPS
  certificate, which Shopify CLI generates for you.
- Known issue where apps that do not configure their access scopes in the app toml
  file have accepted access scopes wiped when starting a CLI dev session on the Dev
  platform.
- You need to re-trigger OAuth from your app to re-request the access scopes on the
  installed Shop one more time.
- This behavior doesn’t happen with built-in shopify discounts.
- This behavior doesn’t happen if you enter the code directly on checkout. Only when
  you access the discount via /discount/CODE?redirect=…
- Hello, this is not a critical bug but can cause headaches. It seems that putting
  println (not to be confused with eprintln) anywhere in a discount function will
  silently make it fail with a InvalidOutputError.
- Existing app proxies may experience a 404 when you deploy your app.
- Deploys for apps with app proxies remain blocked to protect merchant stores.
- All of these configuration options are now versioned as a part of an app.
- Filtering by collection_id has unexpected behavior, causing duplicates or no results.
- Connectives like AND or OR may not work as expected with collection_id.
- These forums are for developers using Shopify API’s.
- API response structure may not match expected data types.
- 'Access denied for customer field. Required access: `customer_read_customers` access
  scope.'
- Has anyone successfully passed Run code output variables into a 'Send marketing
  email' step in Shopify Flow?
- Some errors in Flow may self heal if the page is refreshed.
- Uses app theme extension proxy configuration
- Uses OAuth2 with refresh token — requires setup of connected app in API
- It is important that merchants add our theme app extension to the correct template.
- I’m aware of the 100KB size limit for theme app extensions and the maximum of 25
  interactive settings per block.
- Recommended strategy to cache admin queries to prevent throttle errors when navigating
  quickly in the app.
- There’s a technical problem that has prevented your Shopify store from being created.
- Foloosi is a UAE-based payment platform that supports card payments, UPI, Apple
  Pay, and QR-based transactions.
- There isn’t currently a way to directly restrict discounts to markets in native
  Shopify discounts, programatically or otherwise.
- You can restrict based on market id/handle/title through a Shopify discount function.
  However, even this is currently ‘deprecated’, with no current replacement.
- Merchant can change the prefix and subpath for the app proxy, hardcoded URLs may
  break the app.
- App proxy doesn't work after Next-Gen Dev Platform migration
- 404 error when proxy URL is accessed
- The name field is deprecated, use catalog instead.
- 'The catalog field works when you add the catalogType: APP filter to your publications
  query.'
- There is a limit on pagination size. Initially it was 50, then it was changed to
  the higher value, but there is a reason for the limit – performance, both from on
  the storefront and server side.
- The cap is now 250 items per page. The old 1000-item behavior wasn’t a supported
  guarantee and was changed for consistency and performance.
- Address autocompletion for South African addresses was enabled briefly in 2022 but
  was disabled due to low quality results.
- Verify that your redirect URLs match your deployed app’s URLs (this can be set in
  either the partner dashboard or your app configuration file).
- The CSP frame-ancestors directive must be set dynamically for each shop installing
  your app.
- Forms have been broken in Admin Action extensions.
- Technically Form isn’t supposed to be used in an Action extension. It’s meant to
  only be used within a Block extension.
- The Admin Extensions are no longer passing the selected IDs to the app.
- Uses OAuth2 for authentication
- Support for embedded apps
- Shopify recommends using an app template for authorization code grant implementation.
- Embedded apps should use token exchange to acquire access tokens.
- Your app should store the token somewhere to make authenticated requests for a shop's
  data.
- An online access token can be used for as long as the app is installed or for the
  next 24 hours, whichever comes first.
- If your app is distributed through the Shopify App Store, it must be subscribed
  to Shopify's mandatory compliance topics.
- If you're connecting a new development store, then you can't set up the GitHub app
  on the initial login after the store is created.
- If you access GitHub with SAML/SSO, you need an active SAML session to use the Shopify
  GitHub app.
- If your GitHub organization enables SAML/SSO and you already had the Shopify GitHub
  app installed, then you'll need to re-authorize all your GitHub apps.
- The Shopify GitHub app doesn't support the IP allow list feature of GitHub Enterprise
  Cloud.
- If you convert your user account to an organization, then you'll need to uninstall
  and reinstall the Shopify GitHub app.
- Feature previews might still be under development and are subject to change.
- This feature preview is available on an invite-only basis (i.e., this will not be
  visible on all development stores).
- Functions run in the context of key purchase flows, like discounts and checkout.
- Functions run in the context of key purchase flows like discounts and checkout.
- Each API client has access only to the data belonging to the organization in which
  it is created.
- Tokenless access allows API queries without an access token providing access to
  essential features.
- Token-based authentication is required for access to all Storefront API features.
- Both the Storefront API and Customer Account API offer public credentials for client-side
  applications.
- Public API token is used in client-side code.
- Private API token should only be used in server-side contexts.
- Collecting data without consent might not comply with applicable laws. Consult legal
  counsel to discuss the requirements that apply to your business.
- The Customer Privacy API is backwards compatible.
- Customer Accounts must be enabled.
- Include `logged_in=true` in the checkout URL to stay authenticated.
- Your store must be on a Shopify Plus plan.
- Make sure you keep your secret private to reduce security risks.
- App Bridge components don't render as part of the app's component hierarchy.
- The latest version of App Bridge is built on top of web components and APIs.
- Using Prisma session storage for session management.
- The ShopifyQL API is being sunset as of version 2024-07. Please consider using alternative
  sources of data in the Admin GraphQL API.
- UI Extensions run on a different origin than the Shopify Admin. For network calls
  to succeed, your server must support cross-origin resource sharing (CORS) for the
  origin https://extensions.shopifycdn.com.
- Checkout UI extensions that render on the information and shipping and payment steps
  in checkout are available only to stores on a Shopify Plus plan.
- Extensions that appear after a purchase has been completed will be available to
  all plans except Shopify Starter.
- Custom Pixels are loaded within a lax sandbox
- App Pixels are loaded in a strict sandbox
- Whenever possible, you should create embedded apps that use Shopify managed installation
  and token exchange.
- Some scopes aren't available within the GraphiQL app.
- The app also can't be used to access data owned by other apps.
- API versioning allows Shopify to continuously evolve the platform while offering
  third-party developers a predictable path for feature upgrades and deprecations.
- Shopify releases a new API version every 3 months at the beginning of the quarter.
- Checkout UI extensions for the information, shipping and payment step are available
  only to stores on a Shopify Plus plan.
- Checkout apps and extensions have design requirements that apply to custom apps
  as well as public apps.
- Checkout branding is available only to Shopify Plus merchants.
- Localization is only supported for checkout UI extensions. Localization for post-purchase
  extensions isn't supported.
- Merchants can use the Shopify admin to install apps.
- Checkout apps and extensions have design requirements that apply to custom apps.
- Development stores are always password protected.
- You can create an unlimited number of unique products.
- All public apps must be built using the new GraphQL product APIs as of Feb 1st.
- A request that includes the page_info parameter can't include any other parameters
  except for limit and fields.
- The link header URLs are temporary and we don't recommend saving them to use later.
errors:
- '429 Too Many Requests: Throttle API calls or reduce frequency.'
- '429 Too Many Requests: Exceeded 2 calls per second for api client. Reduce request
  rates to resume uninterrupted service.'
- '401 Unauthorized: Invalid API key or access token (unrecognized login or wrong
  password)'
- '402 Payment Required: This shop''s plan does not have access to this feature'
- '403 Access Denied: User does not have access'
- '404 Not Found: Not Found'
- '422 Unprocessable Entity: The fulfillment order is not in an open state.'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '404 Not Found: Check the resource path and parameters'
- '429 Too Many Requests: Reduce the rate of requests.'
- '401 Unauthorized: Check your API credentials.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '429 Too Many Requests: Reduce the rate of API calls.'
- '401 Unauthorized: Verify your access token.'
- '429 Too Many Requests: Throttle your requests.'
- '401 Unauthorized: Check your API credentials and access permissions.'
- Rate limits subject to Shopify's standard API abuse-prevention measures.
- '404 Not Found: Check the endpoint and ensure the app is correctly configured.'
- '401 Unauthorized: Verify your OAuth token and scopes.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Invalid access token.'
- '404 Not Found: The requested resource could not be found.'
- '404 Not Found: Resource not found'
- '401 Unauthorized: Check access token validity'
- '429 Too Many Requests: Rate limit exceeded'
- '401 Unauthorized: Invalid access token'
- '429 Too Many Requests: Rate limit exceeded, slow down your request rate.'
- '401 Unauthorized: Check your API credentials and any required scopes.'
- 'INTERNAL_SERVER_ERROR: Check the App Management GraphQL API for issues'
- Authorization is required to connect to the Shopify CLI
- '500 Internal Server Error: Check API endpoint and request format'
- 'Invalid HTML id: `{{ section.id }}` contains `=` which is not valid.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '404 Not Found: Check endpoint path and resource existence'
- '429 Too Many Requests: Reduce the frequency of requests to avoid rate limiting.'
- '404 Not Found: Ensure the endpoint path is correct and the resource exists.'
- '401 Unauthorized: Check for valid access tokens or scopes.'
- '429 Too Many Requests: Reduce request frequency'
- '401 Unauthorized: Check API token or permissions'
- '429 Too Many Requests: Slow down your request rate'
- '401 Unauthorized: Check your access token or permissions'
- '404 Not Found: Verify the endpoint and resource IDs'
- '429 Too Many Requests: Reduce the frequency of requests.'
- '401 Unauthorized: Check API credentials and permissions.'
- '401 Unauthorized: Check access permissions or token expiration'
- '404 Not Found: Check endpoint path or resource existence'
- 'Version couldn''t be created: The following topic is invalid.'
- 'ACCESS_DENIED: Recheck OAuth scopes or permissions'
- 'DAILY_LIMIT_EXCEEDED: Reduce frequency of API calls'
- '404: App proxy not working after migrating to dev dashboard.'
- Deployment blocked due to app proxy restriction.
- Expected field to be a positive integer or UUID, received `-9833428025658`.
- '429: Too Many Requests'
- There’s a problem creating your store
- '404: Not Found - Check your proxy URL and action route'
- '405: Method Not Allowed - Ensure the method used is supported'
- It looks like the URL isn’t appending the expected parameters which is breaking
  our app’s functionality.
- 'THROTTLED: The client has exceeded the rate limit.'
- 'ACCESS_DENIED: The client doesn’t have correct authentication credentials.'
- 'SHOP_INACTIVE: The shop is not active.'
- 'INTERNAL_SERVER_ERROR: Shopify experienced an internal error.'
- OAuth process can't happen inside the admin iframe
- Your app is requesting data that isn't permitted by the scope of the access_token.
- Your app uses online tokens and the access_token you're using has expired.
- 'Function not found: Referencing a function from another app results in this error.'
- The maximum size for an input query, excluding comments, is 3000 bytes.
- '400: Bad Request'
- '401: Unauthorized'
- '404: Not Found'
- '500: Internal Server Error'
- 'INTERNAL_SERVER_ERROR: Shopify experienced an internal error while processing the
  request.'
- '401 Unauthorized: Recheck access token validity'
- 'INTERNAL_SERVER_ERROR: Internal error. Looks like something went wrong on our end.'
- 'THROTTLED: Throttled'
- 'MAX_COMPLEXITY_EXCEEDED: Complexity exceeded'
- '401 Unauthorized: Verify client_id and ensure correct scopes.'
- '500 Internal Server Error: Check for misspelled parameters.'
- 'INTERNAL_SERVER_ERROR: An internal error occurred.'
- '429 Too Many Requests: Reduce the frequency of requests'
- '401 Unauthorized: Check OAuth credentials'
- '400 Bad Request: The request wasn''t understood by the server, generally due to
  bad syntax or because the Content-Type header wasn''t correctly set to application/json.'
- '401 Unauthorized: The necessary authentication credentials are not present in the
  request or are incorrect.'
- '402 Payment Required: The requested shop is currently frozen.'
- '403 Forbidden: The server is refusing to respond to the request.'
- '404 Not Found: The requested resource was not found but could be available again
  in the future.'
- '405 Method Not Allowed: The server recognizes the request but rejects the specific
  HTTP method.'
- '406 Not Acceptable: The request''s Accept header doesn''t specify any content formats
  that the server is able to fulfill.'
- '409 Resource Conflict: The requested resource couldn''t be processed because of
  conflict in the request.'
- '414 URI Too Long: The server is refusing to accept the request because the Uniform
  Resource Identifier (URI) provided was too long.'
- '415 Unsupported Media Type: The request''s Content-Type header specifies a payload
  format that the server doesn''t support.'
- '422 Unprocessable Entity: The request body was well-formed but contains semantic
  errors.'
- '423 Locked: The requested shop is currently locked.'
- '429 Too Many Requests: The request was not accepted because the application has
  exceeded the rate limit.'
- '430 Shopify Security Rejection: The request was not accepted because the request
  might be malicious.'
- '500 Internal Server Error: An internal error occurred in Shopify.'
- '501 Not Implemented: The requested endpoint is not available on that particular
  shop.'
- '502 Bad Gateway: The server, while acting as a gateway or proxy, received an invalid
  response from the upstream server.'
- '503 Service Unavailable: The server is currently unavailable.'
- '504 Gateway Timeout: The request couldn''t complete in time.'
- '530 Origin DNS Error: Cloudflare can''t resolve the requested DNS record.'
- '540 Temporarily Disabled: The requested endpoint isn''t currently available.'
- '783 Unexpected Token: The request includes a JSON syntax error.'
- '400 Bad Request: Check request parameters and format.'
- '401 Unauthorized: Ensure authentication is set up correctly.'
- '404 Not Found: Verify the API endpoint and version.'
- '403 Forbidden: Check app permissions.'
- '404 Not Found: Verify the endpoint path.'
- '500 Internal Server Error: Retry the request.'
- 'INTERNAL_SERVER_ERROR: Check the ''column'' attribute on the collections/ruleSet/rules.'
- Any request that sends the page parameter will return an error.
auth_info:
  mentioned_objects:
  - SHOPIFY_API_KEY
  - SHOPIFY_API_SECRET
  - HOST
  - SCOPES
  - OauthToken
  - AuthProvider
  - ShopifyAPI
  - AccessToken
  - NamedCredential
  - Shop
  - OAuth
  - shopifyApp
  - AppProvider
  - PUBLIC_STOREFRONT_API_TOKEN
  - PRIVATE_STOREFRONT_API_TOKEN
  - PUBLIC_STORE_DOMAIN
  - PUBLIC_STOREFRONT_ID
  - Storefront API token
  - client_id
  - id_token
  - authenticate.admin
  - authenticate.webhook
client:
  base_url: https://{shop}.myshopify.com/admin/api/2025-07
  auth:
    type: oauth2
    location: header
    header_name: X-Shopify-Access-Token
source_metadata: null
