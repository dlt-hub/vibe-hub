resources:
- name: Users
  endpoint:
    path: /Users
    method: POST
    data_selector: multi-channel guest users
    params: {}
- name: users
  endpoint:
    path: /scim/v1/Users
    method: GET
    data_selector: Users
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /scim/v1/Groups
    method: GET
    data_selector: Groups
    params: {}
- name: users
  endpoint:
    path: /Users
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /Users/<id>
    method: PATCH
    data_selector: user
    params: {}
- name: user
  endpoint:
    path: /Users/<id>
    method: PUT
    data_selector: user
    params: {}
- name: user
  endpoint:
    path: /Users/<id>
    method: DELETE
    data_selector: user
    params: {}
- name: Users
  endpoint:
    path: /Users/<id>
    method: PUT
    data_selector: schemas
    params: {}
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: Resources
    params:
      startIndex: '1'
      count: '1'
- name: user_by_id
  endpoint:
    path: /scim/v2/Users/<id>
    method: GET
    data_selector: Resources
- name: create_user
  endpoint:
    path: /scim/v2/Users
    method: POST
    data_selector: Resources
- name: create_guest_user
  endpoint:
    path: /scim/v2/Users
    method: POST
    data_selector: Resources
- name: user
  endpoint:
    path: /users
    method: PATCH
    data_selector: Operations
- name: Users
  endpoint:
    path: /Users/<id>
    method: PATCH
    data_selector: Operations
- name: groups
  endpoint:
    path: /scim/v1/Groups
    method: GET
    data_selector: Resources
    params:
      startIndex: '1'
      count: '10'
- name: group
  endpoint:
    path: /scim/v1/Groups/<id>
    method: GET
    data_selector: Resources
    params: {}
- name: create_group
  endpoint:
    path: /scim/v1/Groups
    method: POST
    data_selector: Resources
    params: {}
- name: update_group
  endpoint:
    path: /scim/v1/Groups/<id>
    method: PUT
    data_selector: Resources
    params: {}
- name: delete_group
  endpoint:
    path: /scim/v1/Groups/<id>
    method: DELETE
    data_selector: Resources
    params: {}
- name: slackLists.create
  endpoint:
    path: /slackLists.create
    method: POST
- name: slackLists.update
  endpoint:
    path: /slackLists.update
    method: POST
- name: slackLists.download.start
  endpoint:
    path: /slackLists.download.start
    method: POST
- name: slackLists.download.get
  endpoint:
    path: /slackLists.download.get
    method: GET
- name: slackLists.items.create
  endpoint:
    path: /slackLists.items.create
    method: POST
- name: slackLists.items.update
  endpoint:
    path: /slackLists.items.update
    method: POST
- name: slackLists.items.delete
  endpoint:
    path: /slackLists.items.delete
    method: POST
- name: slackLists.items.deleteMultiple
  endpoint:
    path: /slackLists.items.deleteMultiple
    method: POST
- name: slackLists.items.list
  endpoint:
    path: /slackLists.items.list
    method: GET
- name: slackLists.items.info
  endpoint:
    path: /slackLists.items.info
    method: GET
- name: slackLists.access.set
  endpoint:
    path: /slackLists.access.set
    method: POST
- name: slackLists.access.delete
  endpoint:
    path: /slackLists.access.delete
    method: POST
- name: reminders
  endpoint:
    path: /reminders
    method: POST
    data_selector: reminders
    params: {}
- name: app_home_opened
  endpoint:
    path: /api/apps.event.authorizations
    method: POST
- name: interaction_payloads
  endpoint:
    path: /reference/interaction-payloads
    method: GET
    data_selector: payloads
- name: analytics_data
  endpoint:
    path: /admin/analytics.getFile
    method: GET
- name: app_logs
  endpoint:
    path: /admin.apps.activities.list
    method: GET
- name: approved_apps
  endpoint:
    path: /admin.apps.approved.list
    method: GET
- name: workspace_invite_requests
  endpoint:
    path: /admin.inviteRequests.list
    method: GET
- name: users_list
  endpoint:
    path: /admin.users.list
    method: GET
- name: teams_list
  endpoint:
    path: /admin.teams.list
    method: GET
- name: admin.conversations.disconnectShared
  endpoint:
    path: /admin.conversations.disconnectShared
    method: POST
- name: conversations.acceptSharedInvite
  endpoint:
    path: /conversations.acceptSharedInvite
    method: POST
- name: conversations.approveSharedInvite
  endpoint:
    path: /conversations.approveSharedInvite
    method: POST
- name: conversations.declineSharedInvite
  endpoint:
    path: /conversations.declineSharedInvite
    method: POST
- name: conversations.externalInvitePermissions.set
  endpoint:
    path: /conversations.externalInvitePermissions.set
    method: POST
- name: conversations.inviteShared
  endpoint:
    path: /conversations.inviteShared
    method: POST
- name: conversations.listConnectInvites
  endpoint:
    path: /conversations.listConnectInvites
    method: GET
- name: conversations.requestSharedInvite.approve
  endpoint:
    path: /conversations.requestSharedInvite.approve
    method: POST
- name: conversations.requestSharedInvite.deny
  endpoint:
    path: /conversations.requestSharedInvite.deny
    method: POST
- name: conversations.requestSharedInvite.list
  endpoint:
    path: /conversations.requestSharedInvite.list
    method: GET
- name: team.externalTeams.disconnect
  endpoint:
    path: /team.externalTeams.disconnect
    method: POST
- name: team.externalTeams.list
  endpoint:
    path: /team.externalTeams.list
    method: GET
- name: users.discoverableContacts.lookup
  endpoint:
    path: /users.discoverableContacts.lookup
    method: GET
- name: audit_logs
  endpoint:
    path: /audit-logs
    method: GET
- name: admin.legalHold.entities.remove
  endpoint:
    path: /admin.legalHold.entities.remove
    method: POST
- name: policies_activate
  endpoint:
    path: /admin.legalHold.policies.activate
    method: POST
    data_selector: policy
    params:
      token: xxxx-xxxxxxxxx-xxxx
      policy_id: Hxxxxxxxxx
- name: policies_create
  endpoint:
    path: /admin.legalHold.policies.create
    method: POST
    data_selector: policy
    params:
      token: xxxx-xxxxxxxxx-xxxx
      name: Policy name
- name: policies_info
  endpoint:
    path: /admin.legalHold.policies.info
    method: POST
    data_selector: policy
    params:
      token: xxxx-xxxxxxxxx-xxxx
      policy_id: Hxxxxxxxxx
- name: policies_list
  endpoint:
    path: /admin.legalHold.policies.list
    method: POST
    data_selector: policies
    params:
      token: xxxx-xxxxxxxxx-xxxx
- name: policies_release
  endpoint:
    path: /admin.legalHold.policies.release
    method: POST
    data_selector: policy
    params:
      token: xxxx-xxxxxxxxx-xxxx
      policy_id: Hxxxxxxxxx
- name: policies_set
  endpoint:
    path: /admin.legalHold.policies.set
    method: POST
    data_selector: policy
    params:
      token: xxxx-xxxxxxxxx-xxxx
      policy_id: Hxxxxxxxxx
- name: entities_add
  endpoint:
    path: /admin.legalHold.entities.add
    method: POST
    data_selector: created_entities
    params:
      token: xxxx-xxxxxxxxx-xxxx
      policy_id: Hxxxxxxxxx
      entities: '[{"entity_type": "USER","entity_id":"W8V90M2U9"}]'
- name: entities_list
  endpoint:
    path: /admin.legalHold.entities.list
    method: POST
    data_selector: entities
    params:
      token: xxxx-xxxxxxxxx-xxxx
      policy_id: Hxxxxxxxxx
- name: current_status
  endpoint:
    path: /current
    method: GET
    data_selector: status
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: incidents
- name: chat
  endpoint:
    path: /api/chat.postMessage
    method: POST
    data_selector: message
- name: Agentforce
  endpoint:
    path: /ai/using-data-access-api
    method: GET
- name: Slack App
  endpoint:
    path: /apps
    method: GET
- name: Admin Oversight API
  endpoint:
    path: /admins/admin-oversight-api
    method: GET
- name: Audit Logs API
  endpoint:
    path: /admins/audit-logs-api
    method: GET
- name: Legal Holds API
  endpoint:
    path: /admins/legal-holds-api
    method: GET
- name: SCIM API
  endpoint:
    path: /admins/scim-api
    method: GET
- name: chat.postMessage
  endpoint:
    path: /api/chat.postMessage
    method: POST
- name: chat.postEphemeral
  endpoint:
    path: /api/chat.postEphemeral
    method: POST
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: message_data
- name: modals
  endpoint:
    path: /api/modals
    method: POST
    data_selector: modal_data
- name: app_home
  endpoint:
    path: /api/app_home
    method: GET
    data_selector: home_data
- name: canvases
  endpoint:
    path: /api/canvases
    method: GET
    data_selector: canvas_data
- name: lists
  endpoint:
    path: /api/lists
    method: GET
    data_selector: list_data
- name: join_conversation
  endpoint:
    path: /conversations.join
    method: POST
    data_selector: channel
    params:
      token: string
      channel: string
- name: rtm.connect
  endpoint:
    path: /rtm.connect
    method: POST
    data_selector: url
- name: rtm.connect
  endpoint:
    path: /rtm.connect
    method: GET
    data_selector: self
    params:
      token: string
- name: chat_postMessage
  endpoint:
    path: /api/chat.postMessage
    method: POST
    data_selector: message
    params:
      token: string
      channel: string
- name: app_mention
  endpoint:
    path: /reference/events/app_mention
    method: GET
    data_selector: events
    params: {}
- name: app_mention_event
  endpoint:
    path: /events/app_mention
    method: POST
    data_selector: event
    params: {}
- name: incoming_webhook
  endpoint:
    path: /services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX
    method: POST
    data_selector: text
- name: conversations.info
  endpoint:
    path: /conversations.info
    method: GET
    params:
      include_locale: 'true'
- name: users.info
  endpoint:
    path: /users.info
    method: GET
    params:
      include_locale: 'true'
- name: users
  endpoint:
    path: /users.list
    method: GET
    data_selector: members
    params: {}
- name: channels
  endpoint:
    path: /channels.list
    method: GET
    data_selector: channels
    params: {}
- name: apps.connections.open
  endpoint:
    path: /api/apps.connections.open
    method: POST
    data_selector: url
- name: Admin Oversight API
  endpoint:
    path: /admins/admin-oversight-api
    method: GET
- name: Audit Logs API
  endpoint:
    path: /admins/audit-logs-api
    method: GET
- name: Legal Holds API
  endpoint:
    path: /admins/legal-holds-api
    method: GET
- name: SCIM API
  endpoint:
    path: /admins/scim-api
    method: GET
- name: assistant.search.context
  endpoint:
    path: /assistant.search.context
    method: POST
    data_selector: results.messages
    params:
      query: What is project gizmo?
- name: bot_token
  endpoint:
    path: /auth.test
    method: GET
- name: user_token
  endpoint:
    path: /users.info
    method: GET
- name: events_api
  endpoint:
    path: /apis/events-api/
    method: GET
- name: slash_commands
  endpoint:
    path: /interactivity/implementing-slash-commands
    method: GET
- name: bot_token
  endpoint:
    path: /api/oauth.v2.access
    method: POST
    data_selector: authed_user.access_token
- name: Users
  endpoint:
    path: /scim/VERSION/Users
    method: GET
    data_selector: Resources
- name: messages
  endpoint:
    path: /api/chat.postMessage
    method: POST
- name: modals
  endpoint:
    path: /api/views.open
    method: POST
- name: app_home
  endpoint:
    path: /api/views.publish
    method: POST
- name: canvases
  endpoint:
    path: /api/canvas.create
    method: POST
- name: lists
  endpoint:
    path: /api/lists.create
    method: POST
- name: views.open
  endpoint:
    path: /views.open
    method: POST
    data_selector: view
    params: {}
- name: modal_submission
  endpoint:
    path: /views.open
    method: POST
    data_selector: view
    params: {}
- name: views.publish
  endpoint:
    path: /views.publish
    method: POST
    data_selector: ok
- name: app_home_opened
  endpoint:
    path: /events/app_home_opened
    method: POST
    data_selector: event
- name: files_list
  endpoint:
    path: /files.list
    method: GET
- name: canvases
  endpoint:
    path: /api/conversations.canvases.create
    method: POST
    data_selector: ok
- name: messages
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: message
    params: {}
- name: messages
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: message
    params: {}
- name: GetSlackChannelAction
  endpoint:
    path: /auth.teams.list
    method: GET
- name: SendSlackMessageAction
  endpoint:
    path: /chat.postMessage
    method: POST
- name: Agentforce Custom Actions
  endpoint:
    path: /oauth/v2/authorize
    method: GET
    data_selector: records
    params: {}
- name: assistant_thread_started
  endpoint:
    path: /reference/events/assistant_thread_started
    method: GET
- name: assistant_thread_context_changed
  endpoint:
    path: /reference/events/assistant_thread_context_changed
    method: GET
- name: message.im
  endpoint:
    path: /reference/events/message.im
    method: GET
- name: chat.postMessage
  endpoint:
    path: /reference/methods/chat.postMessage
    method: POST
- name: assistant.threads.setStatus
  endpoint:
    path: /reference/methods/assistant.threads.setStatus
    method: POST
- name: assistant.threads.setSuggestedPrompts
  endpoint:
    path: /reference/methods/assistant.threads.setSuggestedPrompts
    method: POST
- name: slash_command
  endpoint:
    path: /commands
    method: POST
    data_selector: payload
- name: slash_command
  endpoint:
    path: /commands
    method: POST
- name: event_subscriptions
  endpoint:
    path: /api/event_subscriptions
    method: POST
- name: events
  endpoint:
    path: /slack/events
    method: POST
    data_selector: event
- name: events
  endpoint:
    path: /slack/events
    method: POST
    data_selector: event
    params: {}
- name: message_hello
  endpoint:
    path: /message/hello
    method: POST
    data_selector: blocks
    params: {}
- name: action_button_click
  endpoint:
    path: /action/button_click
    method: POST
    data_selector: user
    params: {}
- name: messages
  endpoint:
    path: /api/chat.postMessage
    method: POST
    data_selector: message
    params: {}
- name: events
  endpoint:
    path: /slack/events
    method: POST
    data_selector: events
- name: message
  endpoint:
    path: /slack/events
    method: POST
- name: events
  endpoint:
    path: /slack/events
    method: POST
- name: events
  endpoint:
    path: /slack/events
    method: POST
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: events
- name: oauth
  endpoint:
    path: /api/oauth.access
    method: POST
    data_selector: oauth
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
- name: chat_update
  endpoint:
    path: /chat.update
    method: POST
- name: chat_delete
  endpoint:
    path: /chat.delete
    method: POST
- name: conversations_open
  endpoint:
    path: /conversations.open
    method: POST
- name: conversations_create
  endpoint:
    path: /conversations.create
    method: POST
- name: conversations_info
  endpoint:
    path: /conversations.info
    method: GET
- name: conversations_list
  endpoint:
    path: /conversations.list
    method: GET
- name: conversations_members
  endpoint:
    path: /conversations.members
    method: GET
- name: conversations_join
  endpoint:
    path: /conversations.join
    method: POST
- name: conversations_leave
  endpoint:
    path: /conversations.leave
    method: POST
- name: views_open
  endpoint:
    path: /views.open
    method: POST
- name: views_update
  endpoint:
    path: /views.update
    method: POST
- name: views_push
  endpoint:
    path: /views.push
    method: POST
- name: reactions_add
  endpoint:
    path: /reactions.add
    method: POST
- name: reactions_remove
  endpoint:
    path: /reactions.remove
    method: POST
- name: incoming_webhook
  endpoint:
    path: /services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX
    method: POST
- name: logs
  endpoint:
    path: /logs
    method: GET
- name: schemas
  endpoint:
    path: /schemes
    method: GET
- name: actions
  endpoint:
    path: /actions
    method: GET
- name: users
  endpoint:
    path: /Users
    method: POST
- name: groups
  endpoint:
    path: /Groups
    method: POST
- name: chat
  endpoint:
    path: /api/chat.postMessage
    method: POST
    data_selector: message
    params: {}
- name: openid.connect.token
  endpoint:
    path: /openid.connect.token
    method: POST
- name: openid.connect.userInfo
  endpoint:
    path: /openid.connect.userInfo
    method: GET
- name: filesUploadV2
  endpoint:
    path: /api/filesUploadV2
    method: POST
    data_selector: files
- name: chat.postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: result
- name: views.open
  endpoint:
    path: /views.open
    method: POST
    data_selector: result
- name: views.update
  endpoint:
    path: /views.update
    method: POST
    data_selector: result
- name: webhook
  endpoint:
    path: /messaging/sending-messages-using-incoming-webhooks
    method: POST
- name: conversations.list
  endpoint:
    path: /conversations.list
    method: GET
- name: conversations.members
  endpoint:
    path: /conversations.members
    method: GET
- name: calls.add
  endpoint:
    path: /calls.add
    method: POST
    data_selector: call
    params: {}
- name: chat.postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: message
    params: {}
- name: calls.participants.add
  endpoint:
    path: /calls.participants.add
    method: POST
    data_selector: participants
    params: {}
- name: calls.participants.remove
  endpoint:
    path: /calls.participants.remove
    method: POST
    data_selector: participants
    params: {}
- name: calls.update
  endpoint:
    path: /calls.update
    method: POST
    data_selector: update
    params: {}
- name: calls.end
  endpoint:
    path: /calls.end
    method: POST
    data_selector: end
    params: {}
- name: conversations.create
  endpoint:
    path: /conversations.create
    method: POST
    data_selector: ''
    params: {}
- name: chat.postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: ''
    params: {}
- name: admin.conversations.createForObjects
  endpoint:
    path: /admin.conversations.createForObjects
    method: POST
    data_selector: ''
    params: {}
- name: users.profile.set
  endpoint:
    path: /api/users.profile.set
    method: POST
    data_selector: profile
    params: {}
- name: users.profile.get
  endpoint:
    path: /api/users.profile.get
    method: GET
    data_selector: profile
    params: {}
- name: users.getPresence
  endpoint:
    path: /api/users.getPresence
    method: GET
    data_selector: presence
    params: {}
- name: users.setPresence
  endpoint:
    path: /api/users.setPresence
    method: POST
    data_selector: presence
    params: {}
- name: dialog.open
  endpoint:
    path: /dialog.open
    method: POST
    data_selector: ok
    params: {}
- name: conversations.create
  endpoint:
    path: /conversations.create
    method: POST
    data_selector: channel
    params:
      token: string
      name: string
      is_private: boolean
      team_id: string
- name: bugs_list
  endpoint:
    path: /your-external-suggestions-url
    method: GET
    data_selector: options
- name: chat.postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: message
- name: chat.postEphemeral
  endpoint:
    path: /chat.postEphemeral
    method: POST
    data_selector: message
- name: legal_holds
  endpoint:
    path: /api/legal_holds
    method: POST
- name: users
  endpoint:
    path: /scim/v1/Users
    method: GET
    params:
      count: '1000'
      startIndex: '1'
- name: groups
  endpoint:
    path: /scim/v1/Groups
    method: GET
    params:
      count: '1000'
      startIndex: '1'
- name: admin.apps.requests.list
  endpoint:
    path: /admin/apps/requests.list
    method: GET
    data_selector: requests
    params:
      enterprise_id: your_enterprise_id
- name: rtm.connect
  endpoint:
    path: /rtm.connect
    method: POST
    data_selector: url
- name: team.preferences.list
  endpoint:
    path: /team.preferences.list
    method: GET
    data_selector: preferences
- name: team.billing.info
  endpoint:
    path: /team.billing.info
    method: GET
    data_selector: billing_info
- name: admin.apps.requests.list
  endpoint:
    path: /admin/apps/requests.list
    method: GET
    data_selector: is_user_app_collaborator
- name: app_requests
  endpoint:
    path: /admin.apps.requests.list
    method: GET
    data_selector: app_requests
- name: approved_apps
  endpoint:
    path: /admin.apps.approved.list
    method: GET
    data_selector: approved_apps
- name: restricted_apps
  endpoint:
    path: /admin.apps.restricted.list
    method: GET
    data_selector: restricted_apps
- name: authorizations_list
  endpoint:
    path: /apps.event.authorizations.list
    method: GET
    data_selector: authorizations
    params:
      event_context: event_context
- name: users
  endpoint:
    path: /users.list
    method: GET
    data_selector: members
    params: {}
- name: channels
  endpoint:
    path: /channels.list
    method: GET
    data_selector: channels
    params: {}
- name: users_list
  endpoint:
    path: /users.list
    method: GET
    data_selector: users
    params:
      presence: 'false'
- name: users_getPresence
  endpoint:
    path: /users.getPresence
    method: GET
    data_selector: presence
- name: presence_sub
  endpoint:
    path: /presence_sub
    method: POST
    data_selector: subscription
- name: users
  endpoint:
    path: /api/users.list
    method: GET
    data_selector: members
- name: presence_change
  endpoint:
    path: /rtm.start
    method: POST
    params:
      batch_presence_aware: '1'
- name: presence_sub
  endpoint:
    path: /rtm.connect
    method: POST
    params:
      presence_sub: 'true'
- name: team_accessLogs
  endpoint:
    path: /team/accessLogs
    method: GET
    data_selector: logs
    params: {}
- name: slackLists.create
  endpoint:
    path: /reference/methods/slackLists.create/
    method: POST
- name: slackLists.update
  endpoint:
    path: /reference/methods/slacklists.update
    method: POST
- name: slackLists.download.start
  endpoint:
    path: /reference/methods/slackLists.download.start
    method: POST
- name: slackLists.download.get
  endpoint:
    path: /reference/methods/slacklists.download.get
    method: GET
- name: slackLists.items.create
  endpoint:
    path: /reference/methods/slacklists.items.create
    method: POST
- name: slackLists.items.update
  endpoint:
    path: /reference/methods/slacklists.items.update
    method: POST
- name: slackLists.items.delete
  endpoint:
    path: /reference/methods/slacklists.items.delete
    method: POST
- name: slackLists.items.deleteMultiple
  endpoint:
    path: /reference/methods/slacklists.items.deletemultiple
    method: POST
- name: slackLists.items.list
  endpoint:
    path: /reference/methods/slacklists.items.list
    method: GET
- name: slackLists.items.info
  endpoint:
    path: /reference/methods/slacklists.items.info
    method: GET
- name: slackLists.access.set
  endpoint:
    path: /reference/methods/slacklists.access.set
    method: POST
- name: slackLists.access.delete
  endpoint:
    path: /reference/methods/slacklists.access.delete
    method: POST
- name: files_info
  endpoint:
    path: /files.info
    method: GET
    data_selector: file
- name: chat_update
  endpoint:
    path: /chat.update
    method: POST
    data_selector: message
- name: users
  endpoint:
    path: /users.list
    method: GET
    data_selector: members
- name: channels
  endpoint:
    path: /channels.list
    method: GET
    data_selector: channels
- name: users
  endpoint:
    path: /users.list
    method: GET
    data_selector: members
    params: {}
- name: channels
  endpoint:
    path: /channels.list
    method: GET
    data_selector: channels
    params: {}
notes:
- Returns a paginated list of users, ten users per page by default.
- Pagination will be required for large lists of users.
- Updates to the `password`, `externalId`, and `profileUrl` attributes are not supported.
- Deactivated users can be re-enabled by setting the `active` attribute to `true`.
- Some attributes become locked in Slack when synced via SCIM.
- Groups are for organizing users in logical divisions across a workspace.
- Use the Slack CLI to manage your app's lifecycle.
- Authorization headers are now required for most Web API requests involving file
  URLs.
- The `external-auth select-auth` command is mandatory when using new coded workflows
  that have a step containing `credentialSource DEVELOPER`.
- As of January 4th, 2016, authorization headers are now required for most Web API
  requests involving file URLs.
- New reminders API methods for managing reminders in Slack
- New OAuth scopes for calling the new methods
- Requires setup of connected app in Slack.
- Interaction payloads vary in structure depending on the source.
- The Audit Logs API is RESTful and uses a single HTTP verb — GET.
- Slack apps can't post to any public channel by default; they gain that ability by
  asking for permission explicitly with the use of scopes.
- API documentation available for developers.
- Agentforce in Slack and custom apps using AI features are available on all paid
  Slack plans
- GovSlack does not run on the slack.com domain.
- Data between commercial Slack and GovSlack are completely isolated from one another.
- Users can directly invoke your app via entry points
- Interactions can be triggered automatically or by user input
- Workflows are a subset of Slack apps with unique abilities and restrictions.
- Functionality varies slightly when choosing which framework to create custom steps
  in.
- Tokens should be passed as an HTTP Authorization header or alternatively, as a POST
  parameter.
- 'Rate limits are Tier 3: 50+ per minute.'
- The Websocket URLs provided by rtm.connect are single-use and are only valid for
  30 seconds.
- Granular permission Slack apps cannot use the RTM API.
- The Events API is recommended over the RTM API for most use cases.
- You can subscribe your Slack apps to events related to channels and direct messages
  they are party to.
- Events will contain a single, compact authorizations field that shows one installation
  of your app that the event is visible to.
- Not all events provide an event_context.
- Monitor app's channel membership separately from this event.
- Incoming webhooks do not allow you to delete a message after it's been posted.
- Ensure proper permissions are set for the app in the Slack workspace.
- Tokens cannot be sent as a query parameter.
- We're still working on Slack Connect. It's likely you'll run into a bug or two.
- Channels between organizations can have different settings.
- Be aware of frozen and disconnected channels when using Slack Connect.
- Requires xoxb- token for authentication
- Socket Mode helps developers working behind a corporate firewall or who have other
  security concerns that don't allow exposing a static HTTP endpoint.
- Apps using Socket Mode are not currently allowed in the public Slack Marketplace.
- The SCIM API is only available to Slack workspaces on Business+ or Enterprise plans.
- Users can not be permanently deleted from Slack, they can only be deactivated.
- Apps requesting the auditlogs:read scope must be installed by the Owner of an Enterprise
  organization.
- This API is currently in a limited access stage.
- You must be enrolled in the program to get a valid response.
- Bot tokens begin with 'xoxb-'
- User tokens begin with 'xoxp-'
- OAuth 2.0 flow requires user approval for app installation
- Redirect URL must use HTTPS
- Token rotation may not be turned off once it's turned on
- Access tokens expire every 12 hours when token rotation is enabled
- Signing secrets replace the old verification tokens.
- We strongly recommend you only use the Signing Secret from now on.
- Store user and bot user tokens with care and never place them in a public code repository
  or client-side code such as JavaScript.
- The token will be added to the headers of your requests.
- The flow is based on the OpenID Connect standard, built on top of OAuth 2.0.
- You need to set up a Slack app with a Redirect URL.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- The OAuth token used for calling SCIM API methods must be obtained from installing
  the app on the organization.
- Apps must return a required acknowledgment response back to the HTTP request that
  sent the payload.
- Each modal can hold up to 3 views at a time in a view stack.
- A trigger_id will expire 3 seconds after it's sent to your app.
- Modals are intended for short-term interaction.
- Users should not be prompted for confidential information like passwords within
  modals.
- Your app needs at least one permission scope to enable the Home tab.
- Your app needs the chat:write permission scope to use the Messages tab.
- Currently, Block Kit is not supported in canvases.
- Canvas tables have a limit of 300 cells per table.
- Apps created with the Deno Slack SDK can send messages with built-in Slack functions.
- These special groups should be mentioned sparingly, as they tend to notify a large
  group of users.
- We don't have any specific guidelines, but use your discretion when mentioning individuals
  or more specific groups where possible.
- Uses OAuth2 for authentication
- Ensure that URLs do not contain spaces
- Requires OAuth2 authorization for API access
- Global shortcuts are not visible for all types of guest user.
- An app responding to a shortcut initiated from a threaded message cannot currently
  publish a message back to that thread.
- Please review our Best practices for security documentation
- Be mindful of the OWASP Top 10 Vulnerabilities when creating your web application
- Your application must be 'feature-complete' and function as your final product will
  function on the Slack Marketplace
- Agentforce in Slack and custom apps using AI features are available on all paid
  Slack plans without the need for an additional add-on or SKU.
- Install your agent in Slack requires specific steps including navigating to Salesforce
  and reviewing the agent.
- Requires setup of connected Slack app and Auth Provider in Salesforce
- Apps using AI features require a paid plan.
- Workspace guests are not permitted to access apps with the Agents & AI Apps feature
  enabled.
- Uses OAuth2 with refresh token — requires setup of connected app in Slack
- 'If you''re not ready to respond to an incoming command but still want to acknowledge
  the user''s action by having their slash command displayed within the channel, respond
  to your URL''s invocation with a simplified JSON response containing only the response_type
  field set to in_channel: {"response_type": "in_channel"}.'
- If your command doesn't need to post anything back (either privately or publicly),
  respond with an empty HTTP 200 response.
- Slash commands cannot be invoked in message threads.
- Slash commands require an HTTPS URL for payload receipt.
- Acknowledge receipt of the payload within 3000 milliseconds.
- This Code of Conduct only applies to events, discussions, and interactions that
  occur within the Slack Community workspace.
- Our goal is to maintain a safe, helpful and friendly community for everyone.
- Users log in to sandbox workspaces using a time-limited, single-use code (PIN) sent
  to their verified work email.
- A basic web server to run your app on
- Authentication and installation handling for all the ins and outs of OAuth
- Simplified interfaces for all Slack APIs and app features
- Automatic token validation, retry, and rate-limiting logic
- Workflow apps require a paid plan
- The app management UI on api.slack.com/apps doesn’t support configuring workflow
  apps
- Workflow apps are also currently not eligible for listing in the Slack Marketplace
- Treat your tokens like a password and keep it safe.
- Keep your tokens secure and do not check them into public version control.
- Uses OAuth to manage access to Slack's APIs
- Requires setup of bot token and signing secret in environment variables
- Slack apps use OAuth to manage access to Slack's APIs.
- Use bot and app-level tokens for app functionality.
- Keep tokens secure and avoid public version control.
- Requires environment variables for SLACK_BOT_TOKEN and SLACK_SIGNING_SECRET
- Keep your tokens secure and avoid checking them into public version control.
- Requires setup of Slack app with bot token and signing secret
- Bot tokens are used for most apps
- Your app may need different tokens depending on the actions you want it to perform.
- Uses OAuth2 for managing access to the APIs
- Tokens should be kept secure and not shared.
- Your app uses these to retrieve and send information to Slack.
- Uses OAuth2 with bot token and signing secret
- Uses OAuth2 with bot and app tokens.
- Keep tokens and signing secrets secure.
- When using built-in OAuth support, an `authorize` function will automatically be
  created.
- Uses OAuth2 with state secret — requires setup of Slack app in the developer portal
- The Slack platform offers several APIs to build apps.
- When posting messages to a channel, Slack allows apps to send no more than one message
  per channel per second.
- Webhook client requires a valid webhook URL
- OAuth allows a user in any Slack workspace to install your app.
- A valid token is required to use the Audit Logs API.
- The Slack app needs to be installed in the Enterprise Grid organization.
- Events using the Legacy RTM API must use a Slack app with a plain bot scope.
- If you don't have a Slack app with a plain bot scope, you can create one here.
- An OAuth token with the admin scope is required to access the SCIM API.
- The PyPI project has been renamed from `slackclient` to `slack_sdk`.
- Importing `slack_sdk.*` is recommended.
- In version 2.x, a failed API call will throw an exception. To handle this in your
  code, you will have to wrap API calls with a try except block.
- Use the `chat.postMessage` method to send a message from this app
- This project is mostly written and built using TypeScript.
- The `@slack/web-api` package used to provide types only for Web API arguments until
  version 6.2 release.
- The file parameter accepts either the path to a file, a Buffer, or a ReadStream.
- Multiple files can also be uploaded at once using the files_uploads parameter.
- The @slack/oauth package does not support Sign in with Slack.
- The URL can come from installation in your development workspace, which is shown
  in the app configuration pages.
- The URL could be in the response from oauth.v2.access when the app is distributed
  and installed into another workspace.
- The Java Slack SDK supports OpenJDK 8 and higher LTS versions.
- Tokens must be sent in the Authorization HTTP header.
- Cursor-paginated methods accept cursor and limit parameters.
- Paginated responses include a top-level response_metadata object that includes a
  next_cursor when there are additional results to be retrieved.
- Effective May 29, 2025, new rate limits apply to non-Marketplace apps.
- The Conversations API uses cursor-based pagination.
- Users of non-partnered apps will need to initiate Calls using a slash command.
- The admin.* scopes are highly privileged. Only users with sufficient administrative
  rights in the workspace can grant them during the installation step.
- Setting status requires the users.profile:write scope.
- Admins on paid teams may set a user's status.
- A maximum of 100 options may be included.
- Use the min_query_length attribute to set the fewest number of typed characters
  required before dispatch.
- Interactive messages require a functional Request URL.
- On March 4, 2020, we'll require all apps, custom integrations, bots, and users communicating
  with Slack to use TLS version 1.2 or greater.
- All TLS connections must use the SNI extension.
- OAuth authentication supported
- Develop custom workflow steps using the Deno Slack SDK and Bolt framework
- Apps containing workflow steps cannot be distributed publicly or submitted to the
  Slack Marketplace
- The 'xoxp' token used by the CLI has a time-to-live of 12 hours and must be refreshed
  using the provided refresh token.
- Workflow tokens (or 'xwfp' tokens) expire but cannot be refreshed.
- Legal holds are not supported on Slack Connect channels.
- Small bursts above the limit are acceptable. If you receive an HTTP `429` response
  from Slack, you've come up against the rate limit - parse the `Retry-After` header
  and retry your request after that time.
- Have SCIM, will paginate
- Beginning March 31, 2025, we will discontinue support for legacy custom bots.
- In November 2026, we will discontinue support for classic apps.
- Starting June 11, 2024, we are enforcing admin restrictions on built-in steps and
  webhook triggers in coded workflows.
- As part of good business practices, Applications and developers are prohibited from
  circumventing Slack’s intended limitations.
- Minor developer policy update
- The files.upload method is retiring on November 12, 2025. Existing apps will be
  able to continue using it until that date.
- Discontinuing creation of classic apps and legacy custom integration bot users on
  June 4, 2024.
- Legacy Workflow Builder, legacy workflows, and Workflow Builder Steps from Apps
  will all retire on September 26, 2024.
- Apps can no longer add the workflow:steps.execute scope as of October 2023.
- APIs for Save it for Later are not yet available and we don’t have a timeline for
  when or if they'll be made available.
- The stars.* Web API methods will continue responding to your requests until they
  are retired.
- Either one of the arg (enterprise_id, team_id) should be populated.
- If you don't plan to fetch organization AAA requests, you don't need to do anything.
- admin.apps.requests.list API is enhanced to fetch Org AAA requests using enterprise_id
  arg.
- Apps created on or after November 30, 2021 will no longer be able to use rtm.start.
- Existing apps may continue using the RTM API.
- The link_shared event will now be sent when a user types a link into the message
  composer.
- If you make assumptions about the channel for link_shared events being a real channel,
  those assumptions won't work for the COMPOSER channel.
- Your app could receive invalid channel errors if it tries to use Slack APIs in response
  to receiving a link_shared event.
- admin.apps.requests.list API response is enhanced to include the is_user_app_collaborator
  of the app.
- If you don't plan to consume the developer_type, you don't need to do anything.
- Newly created Slack apps and custom integrations may no longer send token as a query
  string parameter and must send it instead as a POST parameter or better yet, a HTTP
  Authorization header.
- Workspace apps were retired on August 24, 2021.
- No more tokens in querystrings for newly created apps
- Tokens may no longer be passed in the query string for apps created after Feb 24,
  2021
- Use authorization headers whenever possible
- Events API truncate authed users
- Using the apps.event.authorizations.list method requires a separate, user-less token.
- Legacy tester tokens may no longer be created. Users must migrate to Slack apps
  with specifically named scopes.
- We resolutely recommend migrating to the Conversations API immediately.
- Expect these methods to continue to degrade and become incompatible with evolving
  channel types on Slack.
- Free teams feature a 5 GB limit on file uploads.
- Expect tombstoned files in 3 sets of API endpoints.
- Your app must be awarded a conversations 'history' scope like channels:history to
  read file message threads.
- Your app must be awarded a 'chat:write' scope to comment on files.
- Uses OAuth2 for user authentication.
- Rate limits are applicable based on the endpoint.
- Messages longer than 40,000 characters will be truncated.
- The `presence` parameter in `users.list` will no longer function after September
  26, 2018.
- Open websocket connections will no longer receive `presence_change` events without
  a subscription.
- Workspace apps must request `chat:write` instead of `chat:write:user` during installation
  or when seeking elevated permissions.
- Tokens used in the Slack API are bearer tokens.
- Best practice is to send your token as an Authorization header.
- Presence subscriptions will become mandatory on November 15, 2017.
- Users created after September 11, 2017 will have their @username set for them.
- Use user IDs to reliably identify users across teams.
- Batched presence events require parameters to be passed to rtm.start or rtm.connect.
- Subscriptions last only the length of an open websocket connection.
- All Slack apps must request the `users:read.email` OAuth scope to access the `email`
  field in user objects.
- It's unlikely that you need to do anything at all.
- If your app relies on a team's populated skype field, you'll need to look for it
  as part of the user's profile available in expanded user objects.
- The team.accessLogs method now supports cursor-based pagination.
- Addressing email addresses
- Apps created after January 4th, 2017 must request the new users:read.email scope
  to access the email field in user objects.
- Changes to errors for incoming webhooks
- RTM API Presence is now only available via subscription.
- Arrays of members found in API methods will become truncated.
- Slack is phasing out the @username artifact in favor of display names.
- Slack will limit members to the first 1,500 users and then gradually lower the number
  of users returned.
- Slack Marketplace submissions must now have a minimum of 10 active workspace installations
  to be reviewed.
- Workspace apps are deprecated
- Simplifying the installation process for workspace apps
- Deprecation of various API methods and support for legacy apps and bots.
- The `deno` runtime is no longer installed with the Slack CLI installation script.
  We recommend installing `deno` separately and configuring CI systems as needed for
  app development.
- We now allow new projects to be created more quickly by using a HTTP HEAD request
  to check whether the template URL exists.
- The `app list` command no longer requires authentication, and will instead display
  an `unknown` app status in cases where no authentication is found.
- Requires user token for many methods.
- The deno runtime is no longer installed with the Slack CLI installation script.
  We recommend installing deno separately and configuring CI systems as needed for
  app development.
- The minimum supported PowerShell version as of this release is `v6.0`. If you attempt
  to use an older version of PowerShell, you may encounter errors reading the Slack
  Configuration file (`slack.json`) or running the `get hooks` hook.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'missing_primary_email: Attempts to delete the primary email without providing a
  replacement value will result in this error.'
- '400 Bad Request: Check the request body for required attributes.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'missing_primary_email: Attempts to delete the primary email without providing a
  replacement value will result in a missing_primary_email error.'
- 'addresses_invalid: The addresses attribute provided is invalid.'
- 'bad_email_address: The email address provided does not exist or was poorly formatted.'
- 'bad_endpoint: The endpoint URL does not exist.'
- 'cannot_make_user_guest: Admins, Owners and Primary owners cannot be made guests
  via SCIM.'
- 'cannot_decode_user_id: The given user ID cannot be decoded.'
- 'cannot_modify_owner: A Workspace''s ownership can not be modified via SCIM, please
  use the Slack admin.'
- 'cannot_modify_gdpr: Users who have had their personal information forgotten under
  GDPR can not be modified.'
- 'cannot_disable_bot_user_with_scim: The SCIM API can not be used to deactivate a
  bot user, this must be done via the bot admin.'
- 'cannot_disable_primary_owner: The primary owner of a Workspace can not be deactivated.
  If this user needs to be deactivated, please make another team member the primary
  owner first.'
- 'email_empty: The user''s primary email is missing from the request.'
- 'email_invalid: The provided user email values are invalid.'
- 'email_taken: The provided user email value already exists.'
- 'emails_invalid: The emails attribute provided is invalid.'
- 'failed_to_remove_users_for_linked_subteam: An error occurred when removing users
  from this IDP group.'
- 'group_members_create_failed: An error occurred during an update to a user group.'
- 'group_member_max_exceeded: 15k is the recommended limit for IDP groups, The maximum
  is 4k for user groups. Additional users cannot be added unless some are removed.'
- 'group_creation_failed: The request to create a user group has failed.'
- 'groups_invalid: The groups attribute provided is invalid.'
- 'idp_group_linked_to_channels: This IDP group is linked to one or more channels
  via admin.conversations.restrictAccess.addGroup. You must call admin.conversations.restrictAccess.removeGroup
  for each link before you can delete the group.'
- 'improper_enterprise_schema_format: The urn:scim:schemas:extension:enterprise:1.0.manager
  sub-attribute is missing the required managerId sub-attribute.'
- 'incomplete_filter: A malformed filter query has been specified. Please check that
  the filter are separated by a single space. filter=attribute eq "value"'
- 'invalid_attribute_format: A singular or multi-valued attribute has been specified
  with the wrong type.'
- 'invalid_authentication: There''s a problem with the OAuth token. It may not have
  been granted the proper admin scope or may not have been installed by an administrator.
  The token may also be malformed or not properly sent via an Authorization header
  with a type of Bearer.'
- 'invalid_display_name: The provided display name is not allowed. Only send the display
  name from your IDP upon account creation (not upon subsequent updates or to sync
  to a Slack account), or disable the Allow users to change their display name setting.'
- 'invalid_emoji_not_allowed: An attribute value contains an emoji.'
- 'invalid_filter_group: The provided filter contains a group that is malformed.'
- 'invalid_name_maxlength: The provided display name is not allowed because it exceeds
  the maximum allowable characters.'
- 'invalid_name_specials: The provided display name is not allowed because it is using
  invalid special characters such as @.'
- 'invalid_name_required: Only a string containing spaces has been provided for both
  the givenName and familyName sub-attributes.'
- 'invalid_query: There''s a problem with the filter parameter. Please check that
  the entities and operators are valid.'
- 'invalid_request_payload: The provided request payload may contain unsupported attributes
  or properties.'
- 'invalid_reserved_word: A reserved word has been specified in an attribute.'
- 'invalid_starts_with_at: The displayName attribute value provided starts with an
  @'
- 'invalid_sort_order: The sortOrder parameter is not equal to ascending or descending.'
- 'long_nickname: The nickName parameter is longer than we allow. Max length is 21
  characters.'
- 'method_not_allowed: Unsupported http method provided. Only GET, POST, PUT, PATCH
  and DELETE are supported.'
- 'missing_authentication: The authentication token is missing.'
- 'missing_primary_email: The request is attempting to remove the primary email without
  providing a replacement value.'
- 'missing_schema_element: The schemas attribute is missing from the request.'
- 'missing_group_id: The group ID has not been specified.'
- 'missing_user_id: The user ID has not been specified.'
- 'no_filters: The filter query parameter was provided but no filters were specified.'
- 'no_such_group: The group provided does not exist.'
- 'no_such_group_members: The group members provided do not exist.'
- 'no_such_user: The user provided does not exist.'
- 'non_org_teams_only: When using SCIM in an Enterprise organization, the app must
  be installed on the organization, not individual workspaces. SCIM methods are called
  against the entire org organization.'
- 'query_building_failed: The provided filter did not translate to a proper database
  query.'
- 'database_query_failure: An error was encountered while executing a filter.'
- 'password_change_not_allowed: Updates to the password attribute via SCIM is prohibited.'
- 'permission_denied: The OAuth token has not been granted permission to perform the
  requested action.'
- 'phoneNumbers_invalid: The phoneNumbers attribute provided is invalid.'
- 'photos_invalid: The photos attribute provided is invalid.'
- 'plus_teams_only: The SCIM APIs are only available for Business+ and Enterprise
  plans. SCIM access is not available for Free and Pro plans.'
- 'primary_owner_check_failure: The primary owner of a Workspace within an organization
  can not deactivated. If this user needs to be deactivated, please make another team
  member the primary owner first.'
- 'resource_locked: The app is making too many requests over a short period of time
  for group update requests. Please make fewer requests to stay within Slack''s rate
  limits.'
- 'roles_invalid: The roles attribute provided is invalid.'
- 'too_many_requests: The app is making too many requests over a short period of time.
  Please make fewer requests to stay within Slack''s rate limits.'
- 'too_many_users: The request to update a Group contains more than 15,000 users.
  Please make the request with smaller batches of users.'
- 'truncation_error: The userName could not be truncated in an attempt to avoid a
  username conflict for the organization.'
- 'unable_to_add_deleted_or_guest_to_group: Deleted or guest users cannot be added
  to the Group.'
- 'unable_to_create_team_profile_fields: An error occurred during custom profile creation.'
- 'unknown_user: The user provided does not exist.'
- 'unsupported_version: The provided SCIM version is not supported.'
- 'user_creation_failed: The specified user already exists or an error was encountered
  when attempting to create a user.'
- 'username_empty: The userName attribute is empty when the user''s endpoint is invoked
  via PUT or POST'
- 'username_invalid: The userName attribute provided is invalid.'
- 'username_not_allowed: The provided userName is reserved.'
- 'username_required: This method requires a username parameter.'
- 'username_taken: When provisioning a new user via SCIM, usernames must be unique
  and must also be unique from channel names.'
- 'username_too_long: The specified username is too long (max length is 21 characters).'
- 'too_many_attachments: Limit the number of message attachments per message to 100'
- 'too_many_attachments: Limit of 100 attachments per message exceeded.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'invalid_auth: Invalid authentication token.'
- 'not_found: The requested resource could not be found.'
- Standard HTTP status codes to indicate success or failure.
- 'invalid_cursor: The pagination cursor provided is invalid. Please use the next_cursor
  value from a previous request response only.'
- 'legal_hold_not_found: The requested policy does not exist. Check that the policy
  ID provided is valid.'
- 'released_policy_edit_not_allowed: Polices which are released cannot be edited.'
- 'too_many_entities: The request cannot be completed because it includes too many
  entities. Retry the request with a smaller number of entities.'
- 'max_active_entities_reached: A legal hold policy can have up to 1000 entities.
  Try reducing the number of entities being added.'
- 'unknown_method: The requested method cannot be found. You will see this error if
  the Legal Holds API is enabled, but your token does not have admin.legalHolds:*
  scopes.'
- access_denied
- accesslimited
- account_inactive
- channel_is_limited_access
- channel_not_found
- deprecated_endpoint
- ekm_access_denied
- enterprise_is_restricted
- fatal_error
- internal_error
- invalid_arg_name
- invalid_arguments
- invalid_array_arg
- invalid_auth
- invalid_charset
- invalid_form_data
- invalid_post_type
- is_archived
- method_deprecated
- method_not_supported_for_channel_type
- missing_post_type
- missing_scope
- no_permission
- not_allowed_token_type
- not_authed
- org_login_required
- ratelimited
- request_timeout
- service_unavailable
- team_access_not_granted
- team_added_to_org
- token_expired
- token_revoked
- too_many_members
- two_factor_setup_required
- 'Socket URL has expired: Check the connection timing.'
- 'message text is missing: Ensure that all required message fields are included.'
- 'http_timeout: Your server took longer than 3 seconds to respond to the previous
  event delivery attempt.'
- 'too_many_redirects: We''ll follow you down the rabbit hole of HTTP redirects only
  so far.'
- 'channel_not_found: Ensure the channel ID is correct and your app has access to
  it.'
- 'too_many_attachments: Reduce the number of attachments included in the message.'
- as_user_not_supported
- attachment_payload_limit_exceeded
- cannot_reply_to_message
- duplicate_channel_not_found
- duplicate_message_not_found
- invalid_blocks
- invalid_blocks_format
- invalid_metadata_format
- invalid_metadata_schema
- markdown_text_conflict
- message_limit_exceeded
- messages_tab_disabled
- metadata_must_be_sent_from_app
- metadata_too_large
- missing_file_data
- no_text
- not_in_channel
- rate_limited
- restricted_action
- restricted_action_non_threadable_channel
- restricted_action_read_only_channel
- restricted_action_thread_locked
- restricted_action_thread_only_channel
- slack_connect_canvas_sharing_blocked
- slack_connect_file_link_sharing_blocked
- slack_connect_lists_sharing_blocked
- team_not_found
- too_many_attachments
- too_many_contact_cards
- action_prohibited
- channel_is_archived
- invalid_payload
- invalid_token
- no_active_hooks
- no_service
- no_service_id
- no_team
- posting_to_general_channel_denied
- team_disabled
- user_not_found
- 'invalid_auth: Check your authentication credentials.'
- 'channel_not_found: Verify the channel ID provided.'
- 'rate_limited: Try again after some time.'
- 'invalid_json: The JSON you''ve included in your POST body cannot be parsed.'
- 'json_not_object: We could understand that your code was JSON-like enough to parse
  it, but it''s not actually a JSON hash of attribute key/value pairs.'
- 'channel_not_found: The channel ID does not exist.'
- 'invalid_auth: The authentication token is invalid'
- 'access_denied: The app does not have permission to perform this action'
- 'link_disabled: Received when toggling off Socket Mode'
- 'refresh_requested: Indicates a need for connection refresh'
- 'HTTP: 429: The SCIM API is rate limited.'
- 'bad_redirect_uri: Occurs when there are multiple redirect_url parameter values
  configured and they do not match.'
- 'invalid_scope: Occurs if requesting a non-existent scope or requesting a set of
  scopes that are in conflict with each other.'
- You may not select a due date in the past
- 'invalid_auth: The access token is invalid or has expired.'
- 'view_not_found: The view is not found or has been closed.'
- 'invalid_auth: The provided authentication token is invalid.'
- 'not_allowed_token_type: The token used is not allowed for the requested resource.'
- '401 Unauthorized: Invalid token or insufficient scopes'
- 'account_inactive: Account is inactive'
- 'invalid_auth: Invalid authentication credentials'
- 'channel_not_found: Channel not found'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- HTTP 500 response should not be returned for command errors.
- 'operation_timeout: Confirm receipt within 3000 milliseconds'
- 'operation_timeout: Must acknowledge receipt within 3000 milliseconds.'
- You can provision up to 10 sandboxes over the course of 30 days.
- You can have up to two active sandboxes at any given time.
- A sandbox is active for six months, by default.
- '403 Forbidden: Check your token scopes and permissions.'
- '404 Not Found: Verify the endpoint URL and parameters.'
- 'INVALID_AUTH: Check your token'
- 'rate_limited: You are being rate-limited, please try again later'
- 'Invalid_auth: Check your tokens.'
- 'rate_limited: Slow down your requests.'
- 'invalid_auth: Invalid authentication token'
- 'not_in_channel: Bot is not in the channel'
- 'AppInitializationError: Invalid initialization options were passed.'
- 'AuthorizationError: Error exclusively thrown when installation information can''t
  be fetched or parsed.'
- 'ContextMissingPropertyError: Error thrown when the context object is missing necessary
  information.'
- 'HTTP 429 Too Many Requests: Rate limited requests.'
- 'ConnectionError: Verify your webhook URL and network connection'
- '[Errno 104] Connection reset by peer'
- Certain packages might conflict with one another.
- 'ErrorCode.PlatformError: Check the error data for detailed information.'
- 'ErrorCode.RequestError: Ensure network connectivity.'
- 'ErrorCode.RateLimitedError: Wait for the specified retryAfter duration before retrying.'
- 'json_not_object: The JSON is not actually a JSON hash of attribute key/value pairs.'
- 'invalid_cursor: Returned when navigating a paginated collection and providing a
  cursor value that just does not compute.'
- 'HTTP 429 Too Many Requests: Wait for the Retry-After header before retrying.'
- 'missing_argument: Required parameter is missing'
- 'not_in_channel: App is not in the channel'
- 'not_allowed_token_type: Used the bot token instead of the user token'
- app_missing_action_url
- cannot_create_dialog
- failed_sending_dialog
- invalid_trigger
- missing_dialog
- missing_trigger
- trigger_exchanged
- trigger_expired
- validation_errors
- cannot_create_channel
- canvas_disabled_user_team
- invalid_name
- invalid_name_maxlength
- invalid_name_punctuation
- invalid_name_required
- invalid_name_specials
- missing_argument
- name_taken
- no_channel
- 'invalid_auth: The authentication token is invalid.'
- 'channel_not_found: The specified channel does not exist.'
- 'HTTP 429: Rate limit exceeded'
- API calls made by legacy custom bots will be rejected.
- API calls made by classic apps will be rejected.
- user_cannot_use_function
- user_cannot_use_trigger_type
- 'method_deprecated: These methods will return this error once fully retired.'
- 'method_deprecated: This method is deprecated and you should migrate to rtm.connect'
- 'method_deprecated: Requests to deprecated Web API methods return this error.'
- 'invalid_auth: All API calls using a workspace token will fail.'
- 'method_deprecated: All API methods used solely by workspace app tokens will fail.'
- If token is passed as a query string parameter, the API will respond with an error
- '401 Unauthorized: Ensure you are using the correct token'
- 'method_deprecated: This method is deprecated and is scheduled to cease functioning
  on 2021-20-24. Please use conversations.* instead.'
- tombstoned files will be shown with a hidden_by_limit field
- 'channel_not_found: The specified channel was not found.'
- 'message_truncated: Your message was truncated but still posted.'
- 'HTTP 400-series code: When `users.setActive` fails to prevent a user from being
  marked away.'
- 'invalid_auth: The authentication token is invalid or malformed.'
- 'user_not_found: The specified user could not be found.'
- 'rate_limited: Throttle API calls or reduce frequency'
- 'invalid_auth: Recheck OAuth scopes or token expiration'
- Changes to errors for incoming webhooks
- 'HTTP 400 Bad Request: invalid_payload - the data sent in your request cannot be
  understood as presented; verify your content body matches your content type and
  is structurally valid.'
- 'HTTP 400 Bad Request: user_not_found - the user used in your request does not actually
  exist.'
- 'HTTP 403 Forbidden: action_prohibited - the team associated with your request has
  some kind of restriction on the webhook posting in this context.'
- 'HTTP 404 Not Found: channel_not_found - the channel associated with your request
  does not exist.'
- 'HTTP 410 Gone: channel_is_archived - the channel has been archived and doesn''t
  accept further messages, even from your incoming webhook.'
- 'HTTP 500 Server Error: rollup_error - something strange and unusual happened that
  was likely not your fault at all.'
- 'cli_update_required: Run slack upgrade to get the latest version.'
- 'runtime_not_found: Hook script cannot be found because the runtime for a project
  wasn''t found during execution.'
- 'sdk_hook_not_found: Provides a link to the Deno starter template hooks.json file
  as a working example.'
- 'invalid_auth: Invalid authentication credentials.'
- 'channel_not_found: The specified channel could not be found.'
- 'runtime_not_found: A hook script cannot be found because the runtime for a project
  wasn''t found during execution.'
- 'cli_update_required: Log in with an older version of the CLI.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - admin.legalHolds:read
  - admin.legalHolds:write
  - Bot
  - Legacy Bot
  - channels:join
  - channels:write
  - User
  - OAuth permission scopes
  - bot
  - chat:write
  - bearer token
  - admin
  - action_token
  - Auth. Provider
  - Named Credential
  - connections:write
  - assistant:write
  - im:history
  - User tokens
  - Bot tokens
  - App-level tokens
  - user
  - app-level
  - Bot Token
  - App-Level Token
  - OAuth
  - Bot User OAuth Access Token
  - OAuth Scope
  - user tokens
  - bot tokens
  - app-level tokens
  - xapp token
  - Bot User OAuth Token
  - App Token
  - InstallationStore
  - OAuthStateStore
  - AuthorizeUrlGenerator
  - admin scope
  - OAuth token
  - channels:manage
  - groups:write
  - im:write
  - mpim:write
  - OAuthToken
client:
  base_url: https://slack.com/api
  auth:
    type: oauth2
    flow: authorization_code
    token_url: https://slack.com/api/oauth.access
    client_id: '{{ dlt.secrets[''slack_client_id''] }}'
    client_secret: '{{ dlt.secrets[''slack_client_secret''] }}'
    location: header
    header_name: Authorization
source_metadata: null
