resources:
- name: create_conversation
  endpoint:
    path: /rest/ws/group/conversation
    method: POST
    data_selector: ''
    params: {}
- name: get_user_detail
  endpoint:
    path: /rest/ws/user/v2/detail
    method: POST
    data_selector: ''
    params:
      fetchLatestMessageTime: 'True'
- name: send_message
  endpoint:
    path: /rest/ws/message/v2/send
    method: POST
    data_selector: ''
    params: {}
- name: send_attachments
  endpoint:
    path: /rest/ws/message/send
    method: POST
    data_selector: ''
    params: {}
- name: change_conversation_status
  endpoint:
    path: /rest/ws/group/status/change
    method: PATCH
    data_selector: ''
    params: {}
- name: update_user_details
  endpoint:
    path: /rest/ws/user/update
    method: POST
    data_selector: ''
    params: {}
- name: change_conversation_assignee
  endpoint:
    path: /rest/ws/group/assignee/change
    method: PATCH
    data_selector: ''
    params: {}
- name: chat_widget
  endpoint:
    path: /chat
    method: GET
    data_selector: kommunicateSettings
    params:
      appId: YOUR_APP_ID
- name: chat_widget
  endpoint:
    path: /install
    method: GET
    data_selector: settings
    params: {}
- name: install_script
  endpoint:
    path: /settings/install
    method: GET
    data_selector: script
- name: user_details
  endpoint:
    path: /api/user/details
    method: GET
- name: pre_lead_collection
  endpoint:
    path: /api/pre_lead_collection
    method: POST
- name: chat_localization
  endpoint:
    path: /docs/web-localization
    method: GET
    data_selector: labels
- name: sdk_installation
  endpoint:
    path: /docs/web-installation
    method: GET
    data_selector: records
- name: permissions
  endpoint:
    path: /docs/web-authentication
    method: GET
    data_selector: records
- name: pre_chat_lead_collection
  endpoint:
    path: /settings/pre-chat-lead-collection
    method: GET
- name: authentication
  endpoint:
    path: /api-authentication
    method: GET
- name: conversation
  endpoint:
    path: /api/conversations
    method: POST
    data_selector: conversationId
- name: conversation
  endpoint:
    path: /conversation
    method: POST
    data_selector: data
- name: message
  endpoint:
    path: /message
    method: POST
    data_selector: data
- name: unread_count
  endpoint:
    path: /unread/count
    method: GET
    data_selector: data
- name: speech_to_text
  endpoint:
    path: /services/data/v1.0/speech_to_text
    method: POST
    data_selector: speechToText
    params: {}
- name: text_to_speech
  endpoint:
    path: /services/data/v1.0/text_to_speech
    method: POST
    data_selector: textToSpeech
    params: {}
- name: AppDelegate
  endpoint:
    path: /ios-swiftui-setup
    method: GET
    data_selector: AppDelegate
    params: {}
- name: Push Notifications
  endpoint:
    path: /ios-pushnotification
    method: GET
    data_selector: PushNotifications
    params: {}
- name: conversation
  endpoint:
    path: /docs/reactnative-conversation
    method: POST
    data_selector: conversationObject
- name: user
  endpoint:
    path: /api/v1/user
    method: POST
    data_selector: user
    params: {}
- name: conversation
  endpoint:
    path: /buildConversation
    method: POST
    data_selector: responseMessage
- name: flutter_web
  endpoint:
    path: /docs/flutter-web-installation
    method: GET
- name: conversation
  endpoint:
    path: /conversation
    method: POST
- name: message
  endpoint:
    path: /message
    method: POST
- name: conversation
  endpoint:
    path: /conversation
    method: POST
    data_selector: clientChannelKey
- name: form_text_area_with_validation
  endpoint:
    path: /form_text_area_with_validation
    method: POST
    data_selector: payload
- name: form_text_area_without_validation
  endpoint:
    path: /form_text_area_without_validation
    method: POST
    data_selector: payload
- name: custom_input_field
  endpoint:
    path: /custom_input_field
    method: POST
    data_selector: metadata.KM_FIELD
- name: form_template
  endpoint:
    path: /forms
    method: POST
    data_selector: payload
- name: card_carousel
  endpoint:
    path: /carousel
    method: POST
    data_selector: payload
- name: video
  endpoint:
    path: /videos
    method: POST
    data_selector: payload
- name: html_content
  endpoint:
    path: /html
    method: POST
    data_selector: payload
- name: update_user_language
  endpoint:
    path: /updateUserLanguage
    method: POST
    data_selector: response
    params: {}
- name: update_user_timezone
  endpoint:
    path: /updateUserTimezone
    method: POST
    data_selector: response
    params: {}
- name: fetch_agent_availability
  endpoint:
    path: /fetchAgentAvailability
    method: POST
    data_selector: response
    params: {}
- name: bot
  endpoint:
    path: /bots
    method: POST
    data_selector: bot
    params: {}
- name: watson_assistant
  endpoint:
    path: /v2/assistants
    method: GET
    data_selector: assistants
- name: custom_bot_integration
  endpoint:
    path: /bot-custom-integration
    method: POST
    data_selector: messages
- name: import_kompose_bot
  endpoint:
    path: /import/kompose
    method: POST
    data_selector: intents
    params: {}
- name: send_template_message
  endpoint:
    path: /rest/ws/conversation/message/send
    method: POST
    data_selector: null
    params: {}
- name: send_campaign_message
  endpoint:
    path: /rest/ws/message/campaign/send
    method: POST
    data_selector: null
    params: {}
- name: webhook
  endpoint:
    path: /whatsapp/cloud-api/webhook
    method: POST
    data_selector: messages
- name: Close Ticket
  endpoint:
    path: /zendesk-sunshine/webhook/<KOMMUNICATE_APP_ID>
    method: POST
    data_selector: events
    params: {}
- name: tickets
  endpoint:
    path: /api/v2/tickets
    method: POST
    data_selector: ticket
    params: {}
- name: persons
  endpoint:
    path: /v1/persons
    method: POST
    data_selector: data
    params:
      api_token: 4165b095d47bc21a02e52c45bddf55bfb7981652
- name: activities
  endpoint:
    path: /v1/activities
    method: POST
    data_selector: data
    params:
      api_token: 4165b095d47bc21a02e52c45bddf55bfb7981652
- name: Agile CRM
  endpoint:
    path: /api/agilecrm
    method: POST
    data_selector: data
    params: {}
- name: slack_notifications
  endpoint:
    path: /integrations/slack
    method: POST
    data_selector: notifications
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: campaign_messaging
  endpoint:
    path: /campaign-message
    method: GET
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: message
    params: {}
- name: launch_chat
  endpoint:
    path: /launch/chat
    method: POST
    data_selector: response
notes:
- GDPR compliant - GDPR Copy 12
- Add permissions for Camera, Photo Library, Microphone and Location usage.
- Replace 'YOUR_APP_ID' with your APP Id provided in the install section
- Use web server to view HTML files as real-time updates will not work if you directly
  open the HTML file in the browser.
- APP_ID is a unique application ID assigned to your Kommunicate account.
- At least one of the (name, email, phone) fields is required.
- Kommunicate expires the user session if a user is anonymous and inactive for 30
  days.
- If 'Assign new conversations to bot' is enabled, then irrespective of the routing
  rules for human agents, the conversation will be assigned to the 'selected bot'.
- The Welcome and Away messages configured from the Dashboard will not come. The welcome
  messages configured by the bot will come here.
- User location information will only be visible on the dashboard if the user has
  explicitly granted location-sharing permission through their web browser settings.
- Replace 'APP_ID' with the application Id that you get from https://dashboard.kommunicate.io/settings/install
- Supports 100+ languages for the chatbot
- If you're not receiving sound notifications when a new chat opens or a new message
  is received, it might be a common browser setting issue.
- Add permissions if you need to use certain features like Camera, Storage, Location.
- You can perform operations such as opening the conversation, creating a new conversation
  or update user details on success
- You can perform actions such as repeating the login call or throw an error message
  on failure
- Pre-chat lead collection supports adding custom fields such as email, text, number,
  password, and dropdown.
- Requires Firebase account for push notifications setup
- Firebase Cloud Messaging API must be enabled for the firebase project
- All the methods in this section accept activityContext since the process involves
  launching an Activity.
- Conversation parameters can be configured programmatically.
- Unread count can be fetched without opening the chat.
- Uses OAuth2 for authentication.
- 'Text to speech: Works only when the conversation is open and a new message is received
  within the conversation.'
- 'Speech to text: The mic button used to record and send audio will function as STT
  starter.'
- RTL support is necessary to accommodate languages such as Arabic, Hebrew, and Persian.
- From version 2.5.0, we have removed Permissions from our SDK.
- If you use Camera and Gallery Storage feature, add these permissions.
- If you use Audio record / Speech to text feature, add these permissions.
- If you use Location feature, add these permissions.
- Kommunicate SDK intentionally sets allowBackup and fullBackupContent to false for
  security reasons.
- Initialize Kommunicate with your App ID
- Using UIApplicationDelegateAdaptor allows you to maintain UIKit-style configuration
  and lifecycle management while still leveraging SwiftUI
- To avoid calling in registration every time use isLoggedIn to check if the user
  is already logged in or not.
- Upload development and distribution APNs certificates on Kommunicate dashboard,
  this will allow Kommunicate to send the notification for new messages to your mobile
  app.
- Post setting up APNs, the next step is to enable 'Push Notifications' and 'Background
  Modes' within your project.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Add these customization codes either in AppDelegate didFinishLaunchingWithOptions
  method or before creating the conversation.
- Kommunicate requires min ios platform version 13 and uses dynamic frameworks.
- You can test the Kommunicate plugin using the sample Expo app.
- Ensure the newArchEnabled property is set to false.
- Uses OAuth2 with APP_ID from Kommunicate Dashboard for authentication
- Requires setup of connected app in Kommunicate dashboard
- Follow Firebase setup instructions
- Requires setup of connected app in Kommunicate
- Kommunicate provides easy settings to customize message text color, background colors
  and enable of disable any particular feature.
- Can logout using the logout function
- Add 'tools:replace="android:label"' in your application tag on AndroidManifest.xml
  to avoid manifest merger failed issue during compilation of the project.
- Kommunicate flutter(iOS) plugin requires minimum deployment version to be iOS 13.0
  and uses dynamic frameworks.
- All fields in the kmUser object are optional.
- updateUserDetail function has to be called after conversationBuilder's success.
- 'Changing the theme color will automatically change the below Kommunicate colors
  on the mobile apps: Toolbar color, Sent message background color, Message status
  icon colors, Rich message primary colors.'
- 'If you encounter this error while installing pods, include the following code in
  your Podfile: use_frameworks! platform :ios, ''13.0'''
- Additionally, raise the minimum iOS deployment target to version 13.
- If you're experiencing problems with publishing the release build to App Store Connect,
  downgrade your Xcode version to 15.4 to resolve the issue.
- The required version of the Kommunicate Plugin is v1.9.1 or above.
- Need to log in at the start to initialize the Chat Widget.
- Login anonymously or as an existing user by passing user details.
- All the values in the conversation object are optional.
- 'NOTE: This installation code works on Android and iOS and it may not work on Web.'
- Refer to the official documentation for specific implementation details.
- Most of the strings converted to Spanish locale.
- 'If you get the error related to ''ReferenceError: kommunicate is not defined'',
  ensure the variable is defined in the page where you are calling any function from
  the plugin.'
- Uses native modules for android and ios
- Create your app on firebase and download the google-services.json file
- Copy the firebase server key and add it in Kommunicate dashboard under Developer
  -> Push notifications -> Android -> FCM/GCM Key
- Some objects like Contact may return nulls in deeply nested fields
- Rich messages can be used with all platforms including Kompose, Dialogflow, Amazon
  Lex, IBM Watson and Custom bot.
- Currently, only a collection of rich messages are supported with facebook integration,
  which are listed below.
- Validation can be done for text area.
- Supports integration with third-party bots like Dialogflow, Amazon Lex, and custom
  bots.
- Dialogflow integration requires setting up a service account and uploading the JSON
  key to the Kommunicate dashboard.
- Multilingual agents are supported only with Dialogflow V2 APIs
- Webhook call is needed to get the user's phone number
- Make sure to choose the same language for the bot in both Lex and Kommunicate.
- Amazon Lex V2 does not support clarification prompts and hang up phrases.
- Webhook feature in Kompose allows you to send responses to your user from your own
  custom webhook server.
- Do not use the URL mentioned under Assistant Settings, the URL must be from the
  Manage section of the Assistant.
- Webhook URL is required at your backend server so that messages sent to bot can
  be forwarded to your server.
- The JSON file must include 'intents' and 'languageCodes' attributes.
- Only certain media files are allowed to be sent or received.
- Only template messages will be allowed if more than 24 hours have passed since the
  last user message.
- WhatsApp does not support more than 3 buttons at a time.
- There are some limitations with WhatsApp Bot building.
- Twilio is used for WhatsApp integration, and the Twilio signup process must be completed
  before starting the integration with Kommunicate.
- To send and receive messages, you need to verify the Business details.
- Ensure that you have granted all required permissions during the Facebook login
  process.
- If the integration fails, try reconnecting by following the steps above.
- 'Text Message Limit: Telegram allows messages with up to 4096 characters.'
- 'Media Caption Limit: Captions for media (such as images, videos, etc.) can be up
  to 1024 characters.'
- The value of the 'message' key in the JSON payload should always be 'CLOSE TICKET'.
- Your <ZENDESK_USER_NAME> is the email address associated with your Zendesk account.
- Replace 'Your_Freshdesk_Api_Key' with your Freshdesk API key retrieved from your
  Freshdesk account.
- Replace 'Your_Freshdesk_Domain' with your Freshdesk domain.
- Replace your own API Key & domain on lines 17 & 18 of the provided code.
- Integrating Kommunicate with Slack enables agents to receive real-time notifications
  directly within Slack.
- This integration allows them to view key ticket details such as the requester's
  name, creation time, ticket status, and a summary of the issue.
- All timestamps are in your browser/system timezone.
- GDPR compliant
- Supports integration with leading AI platforms such as OpenAI, Dialogflow, and Amazon
  Lex.
- Helpcenter allows you to create knowledge-based articles and FAQs, and you can host
  them on a dedicated webpage.
- Currently, we support WhatsApp & Viber channels.
- WhatsApp wants to ensure that businesses are not spamming their customers.
- If you want to allow only a few domains to initiate a chat, you can add those domain
  URLs here.
- Currently this feature is only available on the Enterprise (previously Business)
  plan.
- All messages will be sent to the configured webhook URL in JSON format.
- Authentication token can be any random string and is passed as a base64 value.
- Access Token URL can be configured by the Application admin in Kommunicate Dashboard.
- When the user receives first fallback email, then a separate email is also sent
  to SUBSCRIBE to the email chat notifications. The user needs to subscribe to email
  alerts in order to get further email notifications from Kommunicate.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Login failed: Check user details and try again.'
- 'ReferenceError: kommunicate is not defined'
- '400 Bad Request: Check the request parameters.'
- '403 Forbidden: Verify that you have access to the requested resource.'
- '401 Unauthorized: Ensure you have a valid access token.'
- 'Error creating ticket: Please enter a valid Email Id'
- '401 Unauthorized: If user is not authenticated'
auth_info:
  mentioned_objects:
  - AccessToken
  - BusinessAccount
  - App
client:
  base_url: https://dashboard.kommunicate.io
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
