resources:
- name: TsdTensor
  endpoint:
    path: /api/TsdTensor
    method: GET
    data_selector: records
- name: TsdFrame
  endpoint:
    path: /api/TsdFrame
    method: GET
    data_selector: records
- name: Tsd
  endpoint:
    path: /api/Tsd
    method: GET
    data_selector: records
- name: Ts
  endpoint:
    path: /api/Ts
    method: GET
    data_selector: records
- name: interpolate
  endpoint:
    path: /generated/pynapple.Tsd.interpolate
    method: GET
    data_selector: records
    params: {}
- name: value_from
  endpoint:
    path: /generated/pynapple.Tsd.value_from
    method: GET
    data_selector: records
    params: {}
- name: TsdThreshold
  endpoint:
    path: /generated/pynapple.Tsd.threshold.html
    method: GET
    data_selector: records
    params: {}
- name: TsdDerivative
  endpoint:
    path: /generated/pynapple.Tsd.derivative.html
    method: GET
    data_selector: records
    params: {}
- name: TsdToTrialTensor
  endpoint:
    path: /generated/pynapple.Tsd.to_trial_tensor.html
    method: GET
    data_selector: records
    params: {}
- name: TsdTimeDiff
  endpoint:
    path: /generated/pynapple.Ts.time_diff.html
    method: GET
    data_selector: records
    params: {}
- name: TsGroupToTsd
  endpoint:
    path: /generated/pynapple.TsGroup.to_tsd.html
    method: GET
    data_selector: records
    params: {}
- name: TsGroup
  endpoint:
    path: /TsGroup
    method: GET
    data_selector: records
    params: {}
- name: IntervalSet
  endpoint:
    path: /IntervalSet
    method: GET
    data_selector: records
    params: {}
- name: TsdFrame
  endpoint:
    path: /TsdFrame
    method: GET
    data_selector: records
    params: {}
- name: autocorrelogram
  endpoint:
    path: /generated/pynapple.process.correlograms.html#pynapple.process.correlograms.compute_autocorrelogram
    method: GET
    data_selector: autocorrs
- name: crosscorrelogram
  endpoint:
    path: /generated/pynapple.process.correlograms.html#pynapple.process.correlograms.compute_crosscorrelogram
    method: GET
    data_selector: crosscorrs
- name: eventcorrelogram
  endpoint:
    path: /generated/pynapple.process.correlograms.html#pynapple.process.correlograms.compute_eventcorrelogram
    method: GET
    data_selector: eventcorrs
- name: isi_distribution
  endpoint:
    path: /generated/pynapple.process.correlograms.html#pynapple.process.correlograms.compute_isi_distribution
    method: GET
    data_selector: isi_distribution
- name: tuning_curves_1d
  endpoint:
    path: /tuning_curves/1d
    method: GET
    data_selector: results
- name: tuning_curves_2d
  endpoint:
    path: /tuning_curves/2d
    method: GET
    data_selector: results
- name: tuning_curves
  endpoint:
    path: /compute_discrete_tuning_curves
    method: GET
    data_selector: DataFrame
    params: {}
- name: 1d_tuning_curves
  endpoint:
    path: /compute_1d_tuning_curves
    method: GET
    data_selector: DataFrame
    params: {}
- name: tuning_curves_1d
  endpoint:
    path: /compute_1d_tuning_curves
    method: POST
    data_selector: tuning_curves
- name: tuning_curves_2d
  endpoint:
    path: /compute_2d_tuning_curves
    method: POST
    data_selector: tcurves2d
- name: tuning_curves
  endpoint:
    path: /compute_2d_tuning_curves_continuous
    method: POST
    data_selector: tuning_curves
    params:
      nb_bins: 5
- name: tuning_curves
  endpoint:
    path: /tuning_curves
    method: GET
    data_selector: records
    params: {}
- name: tuning_curves_1d
  endpoint:
    path: /compute_1d_tuning_curves
    method: POST
    data_selector: tuning_curves
    params: {}
- name: tuning_curves_2d
  endpoint:
    path: /compute_2d_tuning_curves
    method: POST
    data_selector: tcurves2d
    params: {}
- name: tuning_curves
  endpoint:
    path: /compute_2d_tuning_curves_continuous
    method: GET
    data_selector: tuning_curves
    params:
      nb_bins: 5
- name: perievent
  endpoint:
    path: /perievent
    method: GET
    data_selector: data
    params: {}
- name: shift_timestamps
  endpoint:
    path: /generated/pynapple.process.randomize.html#pynapple.process.randomize.shift_timestamps
    method: GET
    data_selector: records
- name: shuffle_ts_intervals
  endpoint:
    path: /generated/pynapple.process.randomize.html#pynapple.process.randomize.shuffle_ts_intervals
    method: GET
    data_selector: records
- name: jitter_timestamps
  endpoint:
    path: /generated/pynapple.process.randomize.html#pynapple.process.randomize.jitter_timestamps
    method: GET
    data_selector: records
- name: resample_timestamps
  endpoint:
    path: /generated/pynapple.process.randomize.html#pynapple.process.randomize.resample_timestamps
    method: GET
    data_selector: records
- name: power_spectral_density
  endpoint:
    path: /compute_power_spectral_density
    method: GET
    data_selector: DataFrame
- name: mean_power_spectral_density
  endpoint:
    path: /compute_mean_power_spectral_density
    method: GET
    data_selector: DataFrame
- name: wavelet_transform
  endpoint:
    path: /generated/pynapple.process.wavelets.compute_wavelet_transform
    method: GET
    data_selector: mwt
- name: build_tensor
  endpoint:
    path: /generated/pynapple.process.warping.build_tensor
    method: GET
    data_selector: tensor
    params: {}
- name: warp_tensor
  endpoint:
    path: /generated/pynapple.process.warping.warp_tensor
    method: GET
    data_selector: tensor
    params: {}
- name: Tsd
  endpoint:
    path: /pynapple/Tsd
    method: GET
    data_selector: records
- name: TsdFrame
  endpoint:
    path: /pynapple/TsdFrame
    method: GET
    data_selector: records
- name: TsdTensor
  endpoint:
    path: /pynapple/TsdTensor
    method: GET
    data_selector: records
- name: IntervalSet
  endpoint:
    path: /pynapple/IntervalSet
    method: GET
    data_selector: records
- name: Tsd
  endpoint:
    path: /Tsd
    method: GET
    data_selector: records
    params: {}
- name: TsGroup
  endpoint:
    path: /TsGroup
    method: GET
    data_selector: records
    params: {}
- name: as_units
  endpoint:
    path: /Tsd/as_units
    method: GET
    data_selector: series
    params:
      units: s
- name: bin_average
  endpoint:
    path: /bin_average
    method: POST
    data_selector: out
    params:
      bin_size: '0.1'
      time_units: s
- name: Tsd.convolve
  endpoint:
    path: /pynapple/Tsd/convolve
    method: GET
    data_selector: records
- name: Tsd.convolve
  endpoint:
    path: /Tsd/convolve
    method: GET
    data_selector: convolved_time_series
- name: count_events
  endpoint:
    path: /tsd/count
    method: GET
    data_selector: out
    params:
      bin_size: None or float
      ep: None or IntervalSet
      time_units: str
      dtype: type
- name: decimate
  endpoint:
    path: /pynapple/Tsd/decimate
    method: GET
    data_selector: parameters
    params: {}
- name: Tsd.derivative
  endpoint:
    path: /pynapple/Tsd/derivative
    method: GET
    data_selector: derivative
    params: {}
- name: dropna
  endpoint:
    path: /pynapple/Tsd/dropna
    method: GET
    data_selector: returns
    params:
      update_time_support: true
- name: end_time
  endpoint:
    path: /pynapple/Tsd/end_time
    method: GET
    data_selector: out
    params:
      units: s
- name: find_support
  endpoint:
    path: /Tsd/find_support
    method: GET
    data_selector: records
    params: {}
- name: Tsd.get
  endpoint:
    path: /Tsd/get
    method: GET
    data_selector: timestamps
    params:
      start: float or int
      end: float or int or None
- name: get_slice
  endpoint:
    path: pynapple.Tsd.get_slice
    method: GET
    data_selector: slice object
- name: get_slice
  endpoint:
    path: /get_slice
    method: GET
    data_selector: slice
    params:
      start: start
      end: end
      time_unit: time_unit
- name: restrict
  endpoint:
    path: /pynapple/Tsd/restrict
    method: GET
    data_selector: Tsd object restricted to ep
- name: Tsd
  endpoint:
    path: /pynapple/Tsd/save
    method: POST
    data_selector: Tsd object
    params:
      filename: string
- name: start_time
  endpoint:
    path: /Tsd/start_time
    method: GET
- name: threshold
  endpoint:
    path: /pynapple/Tsd/threshold
    method: POST
    data_selector: out
    params: {}
- name: time_diff
  endpoint:
    path: /Tsd/time_diff
    method: GET
    data_selector: results
    params:
      align: center
      epochs: null
- name: times
  endpoint:
    path: /pynapple/Tsd/times
    method: GET
    data_selector: out
    params:
      units: '''s'''
- name: to_trial_tensor
  endpoint:
    path: /Tsd/to_trial_tensor
    method: GET
    data_selector: trial_tensor
    params: {}
- name: trial_tensor
  endpoint:
    path: /Tsd/to_trial_tensor
    method: GET
    data_selector: tensor
    params:
      ep: IntervalSet
      align: start
      padding_value: np.nan
- name: Tsd
  endpoint:
    path: /pynapple/Tsd
    method: GET
    data_selector: grouped_timestamps
    params: {}
- name: TsGroup
  endpoint:
    path: /pynapple/TsGroup
    method: GET
    data_selector: grouped_timestamps
    params: {}
- name: value_from
  endpoint:
    path: /pynapple/Tsd/value_from
    method: GET
    data_selector: data
- name: Tsd
  endpoint:
    path: /Tsd/value_from
    method: POST
    data_selector: out
    params: {}
- name: TsdFrame
  endpoint:
    path: /TsdFrame/value_from
    method: POST
    data_selector: out
    params: {}
- name: TsdTensor
  endpoint:
    path: /TsdTensor/value_from
    method: POST
    data_selector: out
    params: {}
- name: TsdFrame
  endpoint:
    path: /pynapple/TsdFrame
    method: GET
    data_selector: data
    params: {}
- name: Tsd
  endpoint:
    path: /Tsd
    method: GET
    data_selector: returns
    params: {}
- name: TsdFrame
  endpoint:
    path: /TsdFrame
    method: GET
    data_selector: returns
    params: {}
- name: TsdTensor
  endpoint:
    path: /TsdTensor
    method: GET
    data_selector: returns
    params: {}
- name: times
  endpoint:
    path: /times
    method: GET
    data_selector: out
    params:
      units: s
- name: to_numpy
  endpoint:
    path: /to_numpy
    method: GET
    data_selector: out
    params: {}
- name: to_trial_tensor
  endpoint:
    path: /to_trial_tensor
    method: GET
    data_selector: out
    params:
      align: start
      padding_value: nan
- name: value_from
  endpoint:
    path: /value_from
    method: GET
    data_selector: out
    params:
      mode: closest
- name: as_units
  endpoint:
    path: /pynapple/TsdFrame/as_units
    method: GET
    data_selector: DataFrame
    params:
      units: s
- name: bin_average
  endpoint:
    path: /bin_average
    method: POST
    data_selector: out
    params:
      bin_size: float
      ep: IntervalSet
      time_units: str
- name: TsdFrame.convolve
  endpoint:
    path: /pynapple/TsdFrame/convolve
    method: GET
    data_selector: discrete linear convolution of the time series
    params: {}
- name: TsdFrame.convolve
  endpoint:
    path: /pynapple/TsdFrame/convolve
    method: GET
    data_selector: returns
    params: {}
- name: count_events
  endpoint:
    params:
      bin_size: None or float
      ep: None or IntervalSet
      time_units: str
      dtype: type
- name: decimate
  endpoint:
    params:
      down: int
      order: int, optional
      filter_type: literal, 'iir' or 'fir'
      ep: IntervalSet
- name: TsdFrame_derivative
  endpoint:
    path: /pynapple/TsdFrame/derivative
    method: GET
    data_selector: derivative
    params: {}
- name: drop_info
  endpoint:
    path: /pynapple/TsdFrame/drop_info
    method: GET
    data_selector: None
- name: dropna
  endpoint:
    path: /pynapple/TsdFrame/dropna
    method: GET
    data_selector: time_series_without_NaNs
    params:
      update_time_support: 'True'
- name: TsdFrame.end_time
  endpoint:
    path: /pynapple/TsdFrame/end_time
    method: GET
    data_selector: out
    params:
      units: s
- name: find_support
  endpoint:
    path: /pynapple/TsdFrame/find_support
    method: GET
    data_selector: returns
    params:
      min_gap: min_gap
      time_units: time_units
- name: TsdFrame.get
  endpoint:
    path: /pynapple/TsdFrame/get
    method: GET
    data_selector: records
    params: {}
- name: TsdFrame_get_info
  endpoint:
    path: /TsdFrame/get_info
    method: GET
    data_selector: metadata
    params: {}
- name: metadata_info
  endpoint:
    path: /metadata/info
    method: GET
    data_selector: metadata
- name: get_slice
  endpoint:
    path: /TsdFrame/get_slice
    method: GET
- name: get_slice
  endpoint:
    path: /TsdFrame/get_slice
    method: GET
    data_selector: slice
    params:
      start: int or float
      end: int or float, optional
      time_unit: str, optional
- name: TsdFrame.groupby
  endpoint:
    path: /pynapple/TsdFrame/groupby
    method: GET
    data_selector: dict or pynapple object
- name: groupby_apply
  endpoint:
    path: /pynapple/TsdFrame/groupby_apply
    method: GET
    data_selector: results
- name: TsdFrame
  endpoint:
    path: /TsdFrame/interpolate
    method: GET
- name: TsdFrame.restrict
  endpoint:
    path: /pynapple/TsdFrame/restrict
    method: GET
    data_selector: returns
    params: {}
- name: tsd_smooth
  endpoint:
    path: /tsd/smooth
    method: POST
    data_selector: result
    params: {}
- name: start_time
  endpoint:
    path: /pynapple/TsdFrame/start_time
    method: GET
    data_selector: out
- name: time_diff
  endpoint:
    path: /pynapple/TsdFrame/time_diff
    method: GET
    data_selector: parameters
    params:
      align: center
      epochs: null
- name: times
  endpoint:
    path: /pynapple/TsdFrame/times
    method: GET
    data_selector: out
    params:
      units: s
- name: to_trial_tensor
  endpoint:
    path: /pynapple/TsdFrame/to_trial_tensor
    method: GET
    data_selector: return value
- name: TsdFrame.value_from
  endpoint:
    path: /TsdFrame/value_from
    method: GET
    data_selector: data
    params:
      mode: closest
- name: Tsd
  endpoint:
    path: /pynapple/Tsd
    method: GET
    data_selector: out
- name: TsdFrame
  endpoint:
    path: /pynapple/TsdFrame
    method: GET
    data_selector: out
- name: TsdTensor
  endpoint:
    path: /pynapple/TsdTensor
    method: GET
    data_selector: out
- name: dropna
  endpoint:
    path: /dropna
    method: GET
    data_selector: None
    params:
      update_time_support: 'True'
- name: end
  endpoint:
    path: /end
    method: GET
    data_selector: None
    params: {}
- name: end_time
  endpoint:
    path: /end_time
    method: GET
    data_selector: None
    params:
      units: s
- name: find_support
  endpoint:
    path: /find_support
    method: GET
    data_selector: None
    params:
      min_gap: float
      time_units: s
- name: get
  endpoint:
    path: /get
    method: GET
    data_selector: None
    params:
      start: float or int
      end: float or int or None
- name: get_slice
  endpoint:
    path: /get_slice
    method: GET
    data_selector: None
    params:
      start: int or float
      end: int or float or None
      time_unit: s
- name: interpolate
  endpoint:
    path: /interpolate
    method: GET
    data_selector: None
    params:
      ts: Tsd, TsdFrame, or TsdTensor
      ep: IntervalSet
      left: None
      right: None
- name: restrict
  endpoint:
    path: /restrict
    method: GET
    data_selector: None
    params:
      iset: IntervalSet
- name: save
  endpoint:
    path: /save
    method: GET
    data_selector: None
    params:
      filename: str
- name: smooth
  endpoint:
    path: /smooth
    method: GET
    data_selector: None
    params:
      std: Number
      windowsize: Number
      time_units: s
      size_factor: '100'
      norm: 'True'
- name: time_diff
  endpoint:
    path: /time_diff
    method: GET
    data_selector: None
    params:
      align: center
      epochs: IntervalSet
- name: times
  endpoint:
    path: /times
    method: GET
    data_selector: None
    params:
      units: s
- name: value_from
  endpoint:
    path: /value_from
    method: GET
    data_selector: None
    params:
      data: Tsd, TsdFrame, or TsdTensor
      ep: IntervalSet
      mode: closest
- name: TsdTensor
  endpoint:
    path: /pynapple/TsdTensor
    method: GET
    data_selector: values
    params: {}
- name: bin_average
  endpoint:
    path: /bin_average
    method: POST
    data_selector: out
    params:
      bin_size: '0.1'
      time_units: s
- name: TsdTensor.convolve
  endpoint:
    path: /TsdTensor/convolve
    method: GET
    data_selector: convolved time series
    params: {}
- name: count
  endpoint:
    path: /tsd/count
    method: GET
    data_selector: out
    params:
      bin_size: optional
      ep: optional
      time_units: optional
      dtype: optional
- name: decimate
  endpoint:
    path: /TsdTensor/decimate
    method: GET
    data_selector: parameters
    params:
      down: int
      order: int
      filter_type: literal
      ep: IntervalSet
- name: TsdTensor.derivative
  endpoint:
    path: pynapple.TsdTensor.derivative
    method: GET
    data_selector: derivative
    params:
      ep: IntervalSet
- name: dropna
  endpoint:
    path: pynapple.TsdTensor.dropna
    method: GET
    data_selector: NaNs
    params:
      update_time_support: true
- name: TsdTensor.end_time
  endpoint:
    path: /pynapple/TsdTensor/end_time
    method: GET
    data_selector: out
    params:
      units: s
- name: TsdTensor.find_support
  endpoint:
    path: TsdTensor.find_support
    method: GET
    data_selector: ''
    params:
      min_gap: ''
      time_units: s
- name: TsdTensor.get
  endpoint:
    path: /pynapple/TsdTensor/get
    method: GET
    data_selector: records
    params: {}
- name: get_slice
  endpoint:
    path: pynapple.TsdTensor.get_slice
    method: GET
    data_selector: slice
- name: TsdTensor_interpolate
  endpoint:
    path: pynapple.TsdTensor.interpolate
    method: GET
- name: TsdTensor.start_time
  endpoint:
    path: /pynapple.TsdTensor.start_time
    method: GET
    data_selector: out
- name: time_diff
  endpoint:
    path: TsdTensor.time_diff
    method: GET
- name: TsdTensor.times
  endpoint:
    path: /pynapple/TsdTensor/times
    method: GET
    data_selector: out
    params:
      units: s
- name: to_trial_tensor
  endpoint:
    path: /pynapple/TsdTensor/to_trial_tensor
    method: GET
    data_selector: trial_tensor
    params: {}
- name: TsdTensor
  endpoint:
    path: /TsdTensor/to_trial_tensor
    method: GET
    data_selector: trial_tensor
    params: {}
- name: TsdTensor.value_from
  endpoint:
    path: /pynapple/TsdTensor/value_from
    method: GET
    data_selector: records
- name: Tsd
  endpoint:
    path: pynapple.Tsd.value_from
    method: GET
    data_selector: out
    params: {}
- name: TsdFrame
  endpoint:
    path: pynapple.TsdFrame.value_from
    method: GET
    data_selector: out
    params: {}
- name: TsdTensor
  endpoint:
    path: pynapple.TsdTensor.value_from
    method: GET
    data_selector: out
    params: {}
- name: IntervalSet
  endpoint:
    path: /_modules/pynapple/core/interval_set.html#IntervalSet
    method: GET
    data_selector: records
    params: {}
- name: as_units
  endpoint:
    path: /pynapple/IntervalSet/as_units
    method: GET
    data_selector: out
    params:
      units: s
- name: drop_info
  endpoint:
    path: /IntervalSet/drop_info
    method: GET
    data_selector: None
    params: {}
- name: drop_long_intervals
  endpoint:
    path: pynapple.IntervalSet.drop_long_intervals
    method: GET
    data_selector: parameters
    params:
      threshold: numeric
      time_units: s
- name: drop_short_intervals
  endpoint:
    path: /pynapple/IntervalSet/drop_short_intervals
    method: GET
    data_selector: parameters
    params: {}
- name: IntervalSet.get_info
  endpoint:
    path: /IntervalSet/get_info
    method: GET
    data_selector: metadata
    params: {}
- name: IntervalSet
  endpoint:
    path: /pynapple/IntervalSet
    method: GET
    data_selector: metadata
- name: get_intervals_center
  endpoint:
    path: /get_intervals_center
    method: GET
    data_selector: timestamps
- name: IntervalSet
  endpoint:
    path: /IntervalSet/groupby
    method: GET
    data_selector: grouped_data
- name: groupby_apply
  endpoint:
    path: /pynapple/IntervalSet/groupby_apply
    method: GET
    data_selector: results
- name: in_interval
  endpoint:
    path: /IntervalSet/in_interval
    method: GET
    data_selector: out
    params: {}
- name: IntervalSet.merge_close_intervals
  endpoint:
    path: /pynapple/IntervalSet/merge_close_intervals
    method: GET
    data_selector: out
    params:
      threshold: numeric
      time_units: s
- name: IntervalSet
  endpoint:
    path: /pynapple/IntervalSet/save
    method: POST
    data_selector: filename
    params: {}
- name: IntervalSet
  endpoint:
    path: /pynapple/IntervalSet
    method: GET
    data_selector: set_diff
    params: {}
- name: set_info
  endpoint:
    path: /pynapple/IntervalSet/set_info
    method: POST
    data_selector: metadata
    params: {}
- name: tot_length
  endpoint:
    path: /pynapple/IntervalSet/tot_length
    method: GET
    data_selector: out
    params:
      time_units: s
- name: IntervalSet
  endpoint:
    path: /IntervalSet
    method: GET
    data_selector: union
    params: {}
- name: Ts.as_units
  endpoint:
    path: /pynapple/Ts/as_units
    method: GET
    data_selector: pandas.Series
    params:
      units: s
- name: tsd_count
  endpoint:
    path: /tsd/count
    method: GET
    data_selector: out
- name: Ts.end_time
  endpoint:
    path: pynapple.Ts.end_time
    method: GET
    data_selector: out
    params:
      units: s
- name: Ts.fillna
  endpoint:
    path: /Ts/fillna
    method: POST
    data_selector: value
- name: find_support
  endpoint:
    path: /find_support
    method: GET
    data_selector: records
    params: {}
- name: Ts.get
  endpoint:
    path: Ts.get
    method: GET
    data_selector: parameters
- name: get_slice
  endpoint:
    path: Ts.get_slice
    method: GET
    data_selector: slice_object
- name: get_slice
  endpoint:
    path: /pynapple/Ts/get_slice
    method: GET
    data_selector: slice
    params:
      start: float
      end: float
- name: restrict
  endpoint:
    path: /pynapple/Ts/restrict
    method: GET
    data_selector: returns
- name: Ts
  endpoint:
    path: /Ts/save
    method: POST
    data_selector: filename
    params: {}
- name: start_time
  endpoint:
    path: /pynapple/Ts/start_time
    method: GET
    data_selector: out
    params:
      units: s
- name: Ts.time_diff
  endpoint:
    path: pynapple.Ts.time_diff
    method: GET
- name: times
  endpoint:
    path: /Ts/times
    method: GET
    data_selector: out
    params:
      units: s
- name: trial_count
  endpoint:
    path: /pynapple/Ts/trial_count
    method: GET
    data_selector: tensor
    params:
      bin_size: bin_size
      align: start
      padding_value: nan
      time_unit: s
- name: value_from
  endpoint:
    path: pynapple.Ts.value_from
    method: GET
- name: TsGroup
  endpoint:
    path: /pynapple/TsGroup
    method: GET
    data_selector: Ts/Tsd objects
    params: {}
- name: drop_info
  endpoint:
    path: TsGroup.drop_info
    method: GET
    data_selector: None
    params: {}
- name: TsGroup
  endpoint:
    path: /pynapple/TsGroup
    method: GET
    data_selector: records
    params: {}
- name: TsGroup.get_info
  endpoint:
    path: /pynapple/TsGroup/get_info
    method: GET
    data_selector: metadata
    params: {}
- name: TsGroup
  endpoint:
    path: /TsGroup/getby_category
    method: GET
    data_selector: TsGroup
    params:
      key: metainfo_column_name
- name: getby_intervals
  endpoint:
    path: /TsGroup/getby_intervals
    method: GET
    data_selector: list
    params: {}
- name: getby_threshold
  endpoint:
    path: /pynapple/TsGroup/getby_threshold
    method: GET
    data_selector: TsGroup
    params: {}
- name: TsGroup
  endpoint:
    path: /pynapple/TsGroup
    method: GET
    data_selector: elements
- name: TsGroup
  endpoint:
    path: /TsGroup/groupby
    method: GET
- name: TsGroup
  endpoint:
    path: /TsGroup/merge
    method: POST
    data_selector: TsGroup
    params: {}
- name: TsGroup
  endpoint:
    path: /pynapple/TsGroup/restrict
    method: GET
    data_selector: TsGroup
    params: {}
- name: IntervalSet
  endpoint:
    path: /pynapple/IntervalSet
    method: GET
    data_selector: IntervalSet
    params: {}
- name: TsGroup
  endpoint:
    path: /pynapple/TsGroup/time_diff
    method: GET
    data_selector: align
- name: time_diff
  endpoint:
    path: /pynapple/TsGroup/time_diff
    method: GET
    data_selector: dict
    params: {}
- name: TsGroup
  endpoint:
    path: /pynapple/TsGroup
    method: GET
    data_selector: TsGroup
- name: TsGroup.value_from
  endpoint:
    path: pynapple/TsGroup/value_from
    method: GET
- name: TsGroup
  endpoint:
    path: /pynapple/TsGroup
    method: GET
    data_selector: out
    params: {}
- name: NWBFile
  endpoint:
    path: /pynapple.io.NWBFile
    method: GET
    data_selector: data
    params: {}
- name: nwb_file
  endpoint:
    path: /nwbfile
    method: GET
    data_selector: records
- name: NWBFile
  endpoint:
    path: /pynapple/io/NWBFile/__init__
    method: INIT
    data_selector: parameters
    params: {}
- name: npz_file
  endpoint:
    path: /pynapple/io/NPZFile
    method: GET
    data_selector: objects
    params: {}
- name: load
  endpoint:
    path: /load
    method: GET
    data_selector: pynapple object
- name: NPZFile
  endpoint:
    path: /path/to/npzfile
    method: GET
    data_selector: records
    params: {}
- name: append_NWB_LFP
  endpoint:
    path: pynapple/io/misc/append_NWB_LFP
    method: GET
    data_selector: parameters
    params: {}
- name: load_eeg
  endpoint:
    path: pynapple/io/misc/load_eeg
    method: GET
    data_selector: parameters
    params: {}
- name: load_file
  endpoint:
    path: pynapple/io/misc/load_file
    method: GET
    data_selector: parameters
    params: {}
- name: load_folder
  endpoint:
    path: pynapple/io/misc/load_folder
    method: GET
    data_selector: parameters
    params: {}
- name: load_session
  endpoint:
    path: pynapple/io/misc/load_session
    method: GET
    data_selector: parameters
    params: {}
- name: npz_files
  endpoint:
    path: /npz_files
    method: GET
    data_selector: list
- name: nwb_files
  endpoint:
    path: /nwb_files
    method: GET
    data_selector: list
- name: path
  endpoint:
    path: /path
    method: GET
    data_selector: str
- name: subfolds
  endpoint:
    path: /subfolds
    method: GET
    data_selector: dict
- name: Folder
  endpoint:
    path: /pynapple/io/folder
    method: GET
    data_selector: records
    params: {}
- name: doc
  endpoint:
    path: /Folder/doc
    method: GET
    data_selector: metadata
- name: FolderInfo
  endpoint:
    path: /Folder.info
    method: GET
    data_selector: metadata
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: json sidecar
- name: compute_autocorrelogram
  endpoint:
    path: /pynapple/process/correlograms/compute_autocorrelogram
    method: GET
    data_selector: autocorrelogram
- name: compute_crosscorrelogram
  endpoint:
    path: /pynapple/process/correlograms/compute_crosscorrelogram
    method: GET
    data_selector: crosscorrelogram
- name: compute_eventcorrelogram
  endpoint:
    path: /pynapple/process/correlograms/compute_eventcorrelogram
    method: GET
    data_selector: eventcorrelogram
- name: compute_isi_distribution
  endpoint:
    path: /pynapple/process/correlograms/compute_isi_distribution
    method: GET
    data_selector: isi_distribution
- name: apply_bandpass_filter
  endpoint:
    path: apply_bandpass_filter
    method: POST
    data_selector: filtered_data
- name: apply_bandstop_filter
  endpoint:
    path: apply_bandstop_filter
    method: POST
    data_selector: filtered_data
- name: apply_highpass_filter
  endpoint:
    path: apply_highpass_filter
    method: POST
    data_selector: filtered_data
- name: apply_lowpass_filter
  endpoint:
    path: apply_lowpass_filter
    method: POST
    data_selector: filtered_data
- name: get_filter_frequency_response
  endpoint:
    path: get_filter_frequency_response
    method: POST
    data_selector: frequency_response
- name: compute_event_trigger_average
  endpoint:
    path: /pynapple/process/perievent/compute_event_trigger_average
    method: GET
    data_selector: Event-Triggered Average
    params: {}
- name: compute_perievent
  endpoint:
    path: /pynapple/process/perievent/compute_perievent
    method: GET
    data_selector: Center Timestamps
    params: {}
- name: compute_perievent_continuous
  endpoint:
    path: /pynapple/process/perievent/compute_perievent_continuous
    method: GET
    data_selector: Center Continuous Time Series
    params: {}
- name: jitter_timestamps
  endpoint:
    path: /pynapple/process/randomize/jitter_timestamps
    method: GET
    data_selector: parameters
    params:
      max_jitter: float
      keep_tsupport: bool
- name: resample_timestamps
  endpoint:
    path: /pynapple/process/randomize/resample_timestamps
    method: GET
    data_selector: parameters
    params: {}
- name: shift_timestamps
  endpoint:
    path: /pynapple/process/randomize/shift_timestamps
    method: GET
    data_selector: parameters
    params:
      min_shift: float
      max_shift: float
- name: shuffle_ts_intervals
  endpoint:
    path: /pynapple/process/randomize/shuffle_ts_intervals
    method: GET
    data_selector: parameters
    params:
      min_shift: float
      max_shift: float
- name: compute_fft
  endpoint:
    path: /compute_fft
    method: GET
    data_selector: Time frequency representation of the input signal
    params: {}
- name: compute_mean_power_spectral_density
  endpoint:
    path: /compute_mean_power_spectral_density
    method: GET
    data_selector: mean power spectral density of the input signal
    params: {}
- name: compute_power_spectral_density
  endpoint:
    path: /compute_power_spectral_density
    method: GET
    data_selector: Power spectral density of the input signal
    params: {}
- name: compute_1d_mutual_info
  endpoint:
    path: /compute_1d_mutual_info
    method: GET
    data_selector: Spatial Information
    params: {}
- name: compute_1d_tuning_curves
  endpoint:
    path: /compute_1d_tuning_curves
    method: GET
    data_selector: DataFrame
    params: {}
- name: compute_1d_tuning_curves_continuous
  endpoint:
    path: /compute_1d_tuning_curves_continuous
    method: GET
    data_selector: DataFrame
    params: {}
- name: compute_2d_mutual_info
  endpoint:
    path: /compute_2d_mutual_info
    method: GET
    data_selector: Spatial Information
    params: {}
- name: compute_2d_tuning_curves
  endpoint:
    path: /compute_2d_tuning_curves
    method: GET
    data_selector: tuple
    params: {}
- name: compute_2d_tuning_curves_continuous
  endpoint:
    path: /compute_2d_tuning_curves_continuous
    method: GET
    data_selector: tuple
    params: {}
- name: compute_discrete_tuning_curves
  endpoint:
    path: /compute_discrete_tuning_curves
    method: GET
    data_selector: pandas.DataFrame
    params: {}
- name: compute_wavelet_transform
  endpoint:
    path: /compute_wavelet_transform
    method: GET
    data_selector: Time frequency representation of the input signal
    params:
      sig: Time series
      freqs: Frequency values to estimate with Morlet wavelets
      fs: Sampling rate, in Hz
      gaussian_width: 1.5
      window_length: 1.0
      precision: 16
      norm: l1
- name: generate_morlet_filterbank
  endpoint:
    path: /generate_morlet_filterbank
    method: GET
    data_selector: filter_bank
    params:
      freqs: frequency values to estimate with Morlet wavelets
      fs: Sampling rate, in Hz
      gaussian_width: 1.5
      window_length: 1.0
      precision: 16
- name: build_tensor
  endpoint:
    path: /pynapple/process/warping/build_tensor
    method: GET
    data_selector: numpy.ndarray
    params: {}
- name: warp_tensor
  endpoint:
    path: /pynapple/process/warping/warp_tensor
    method: GET
    data_selector: numpy.ndarray
    params: {}
- name: dandiset
  endpoint:
    path: /dandi/dandiset/000409
    method: GET
    data_selector: asset
    params: {}
- name: Dandiset 00409
  endpoint:
    path: /dandiset/000409/
    method: GET
    data_selector: asset
    params: {}
- name: nwb_file
  endpoint:
    path: /jb2gd/download
    method: GET
    data_selector: data
    params: {}
- name: nwb_file
  endpoint:
    path: /osf.io/jb2gd/download
    method: GET
    data_selector: data
    params: {}
- name: dandiset
  endpoint:
    path: /dandiset/{dandiset_id}
    method: GET
    data_selector: asset
    params: {}
- name: transients
  endpoint:
    path: /download
    method: GET
    data_selector: data
    params: {}
- name: angle
  endpoint:
    path: /download
    method: GET
    data_selector: data
    params: {}
- name: eeg
  endpoint:
    path: /2dfvp/download
    method: GET
    data_selector: data
    params: {}
- name: data
  endpoint:
    path: /osf.io/jb2gd/download
    method: GET
notes:
- Install in editable mode with `-e` or, equivalently, `--editable`
- To get the best of the pynajax backend, jax needs to use the GPU.
- While installing pynajax will install all the dependencies necessary to use jax,
  it does not guarantee the use of the GPU.
- Creating the NWB file is outside the scope of pynapple. The NWB files used here
  have already been created before.
- Pynapple does not implement any batching function internally. Calling a high level
  function of pynapple on a dataset that do not fit in memory will likely cause a
  memory error.
- The object Tsd contains all the timestamps with associated values.
- Align parameter can be set to 'start', 'center', or 'end' for time_diff.
- Uses metadata to slice or filter objects based on metadata values.
- Tuning curves can compute both 1-dimensional and 2-dimensional data.
- For continuous data, specific functions are used.
- Mean of empty slice warning may occur
- Invalid value encountered in divide warning may occur
- Uses continuous calcium imaging data for tuning curves.
- By default, L1 is used as it creates cleaner looking decomposition images.
- L2 normalization preserved the energy of the original signal in its reconstruction.
- 'Warning: In some cases, the transition bandwidth that is too high generates a kernel
  that is too short.'
- Return trial-based tensor from an IntervalSet object. The shape of the tensor array
  is (shape of time series, number of trials, number of time points)
- The align parameter controls how the time series are aligned. If align="start",
  the time series are aligned to the start of each trial. If align="end", the time
  series are aligned to the end of each trial.
- Default time_units is 's'
- Default load_array is True
- This function assumes a constant sampling rate of the time series.
- The only mode supported is full. The returned object is trimmed to match the size
  of the original object.
- Raises RuntimeError if filename is not str, path does not exist or filename is a
  directory.
- It is generally a good idea to visualize the kernel before applying any convolution.
- The first time index in the time series object
- The parameter padding_value determines which value is used to pad the array. Default
  is NaN.
- Assumes a constant sampling rate of the time series.
- Restricts a time series object to a set of time intervals delimited by an IntervalSet
  object
- The main purpose of the save function is to save small/medium sized IntervalSet
  objects.
- Drops the short intervals in the interval set with duration shorter than threshold.
- bin_size should be seconds unless specified
- If bin_size is used and no epochs is passed, the data will be binned based on the
  time support of the object.
- If start or end is not a number, a ValueError is raised.
- If start is greater than end, a ValueError is raised.
- Save Ts object in npz format. The file will contain the timestamps and the time
  support.
- The main purpose of this function is to save small/medium sized timestamps object.
- Metadata names are pulled from DataFrame columns or dictionary keys.
- Metadata can be overwritten.
- Computes the differences between subsequent timestamps.
- Parameters include file (str or pynwb.file.NWBFile) and lazy_loading (bool)
- The align parameter controls how the time series are aligned. If align='start',
  the time series are aligned to the start of each trial. If align='end', the time
  series are aligned to the end of each trial.
- This example is meant to provide a simple starting point for working with trial-aligned
  data and data from the IBL, and so it does not faithfully replicate the IBL’s quality
  control and filtering criteria.
- This example is meant to provide a simple starting point for working with trial-aligned
  data and data from the IBL.
- The NWB file for the example is hosted on OSF
- The entire dataset can be downloaded from the provided link
- No API interaction is mentioned, only plotting and data processing.
- Data can be streamed without downloading all the files.
- The NWB file for the example is hosted on OSF.
- Some objects like Contact may return nulls in deeply nested fields
errors:
- 'RuntimeWarning: invalid value encountered in divide'
- 'RuntimeError: If filename is not str, path does not exist or filename is a directory'
- 'ValueError: If metadata name does not exist'
- 'ValueError: If metadata index does not match input index (pandas.DataFrame, pandas.Series)'
- 'RuntimeError: If the metadata argument is passed as a pandas.Series (for more than
  one metadata index), numpy.ndarray, list or tuple.'
- 'TypeError: If key-word arguments are not of type pandas.Series, tuple, list, or
  numpy.ndarray and cannot be set.'
- 'RuntimeError: If filename is not str, path does not exist or filename is a directory.'
- 'RuntimeError: If start and end arguments are of unknown type.'
- 'RuntimeError: If time_unit not in [“s”, “ms”, “us”]'
- 'RuntimeError: Raise error if the union of time support of Ts/Tsd object is empty.'
- 'ValueError: If a key cannot be converted to integer.'
- 'ValueError: If metadata name does not exist.'
- 'TypeError: If the input objects are not TsGroup objects'
- 'ValueError: If ignore_metadata=False but metadata columns are not the same'
- 'ValueError: If reset_index=False but keys overlap'
- 'ValueError: If reset_time_support=False but time supports are not the same'
- 'RuntimeError: Metadata indices do not match'
- Values is not the same length
- Key not in metadata of TsGroup
- Unknown argument format
- 'RuntimeError: If time_unit not in ["s", "ms", "us"]'
auth_info:
  mentioned_objects: []
client:
  base_url: https://osf.io
  headers:
    Accept: application/json
source_metadata: null
