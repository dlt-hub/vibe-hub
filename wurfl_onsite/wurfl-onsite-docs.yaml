resources:
- name: wurfl_snapshot
  endpoint:
    path: /wurfl.zip
    method: GET
    data_selector: device_capabilities
    params: {}
- name: WURFL Updater
  endpoint:
    path: /wurfl/updater
    method: GET
- name: wurfl
  endpoint:
    path: /wurfl.xml
    method: GET
    data_selector: devices
    params: {}
- name: device
  endpoint:
    path: /wurfl/devices
    method: GET
    data_selector: devices
    params: {}
- name: User-Agent Client-Hints
  endpoint:
    path: /user-agent-client-hints
    method: GET
    data_selector: client-hints
    params: {}
- name: wurfl_api
  endpoint:
    path: /path/to/wurfl-api/
    method: GET
    data_selector: data
- name: wurfl_updater
  endpoint:
    path: /path/to/wurfl-updater
    method: GET
    data_selector: records
    params: {}
- name: wurfl_device_detection
  endpoint:
    path: /wurfl/device/detect
    method: GET
    data_selector: device_detection_result
    params: {}
- name: wurfl
  endpoint:
    path: /wurfl.zip
    method: GET
    data_selector: wurfl_id
    params: {}
- name: wurfl
  endpoint:
    path: /wurfl
    method: GET
    data_selector: records
- name: wurfl_data
  endpoint:
    path: /wurfl/data
    method: GET
    data_selector: records
    params: {}
- name: wurfl_data
  endpoint:
    path: /wurfl/data
    method: GET
    data_selector: wurfl_information
    params: {}
- name: wurfl
  endpoint:
    path: wurfl.zip
    method: GET
    data_selector: WurflIIS
    params: {}
- name: WurflIISServer
  endpoint:
    path: <WurflIISServer>
    method: MANDATORY
    data_selector: configurations
- name: WurflIIS
  endpoint:
    path: <WurflIIS>
    method: MANDATORY
    data_selector: configuration
    params: {}
- name: WurflRoot
  endpoint:
    path: <WurflRoot>
    method: MANDATORY
    data_selector: location
- name: WurflUpdater
  endpoint:
    path: <WurflUpdater>
    method: not mandatory
    data_selector: update_frequency
    params:
      frequency: DAILY
- name: WurflPatch
  endpoint:
    path: <WurflPatch>
    method: not mandatory
    data_selector: patch_file_location
- name: WurflRequestCapability
  endpoint:
    path: <WurflRequestCapability>
    method: not mandatory
    data_selector: capabilities
- name: WurflLogHeaderInjection
  endpoint:
    path: <WurflLogHeaderInjection>
    method: not mandatory
    data_selector: header_injection_activity
    params:
      value: 'false'
- name: WurflDoNotProcessUrl
  endpoint:
    path: <WurflDoNotProcessUrl>
    method: not mandatory
    data_selector: blacklist
- name: WurflProcessUrl
  endpoint:
    path: <WurflProcessUrl>
    method: not mandatory
    data_selector: whitelist
- name: wurfl_data
  endpoint:
    path: /wurfl.zip
    method: GET
    data_selector: data
- name: WURFL methods
  endpoint:
    path: /wurfl/methods
    method: GET
    data_selector: methods
    params: {}
- name: WURFL Device methods
  endpoint:
    path: /wurfl/device/methods
    method: GET
    data_selector: device_methods
    params: {}
- name: Global methods
  endpoint:
    path: /wurfl/global/methods
    method: GET
    data_selector: global_methods
    params: {}
- name: WurflInFuze.js utility functions
  endpoint:
    path: /wurfl/infuze/utility/functions
    method: GET
    data_selector: utility_functions
    params: {}
- name: wurfl_data
  endpoint:
    path: /xxxxx/wurfl.zip
    method: GET
    data_selector: wurfl
    params: {}
- name: wurfl_data
  endpoint:
    path: /wurfl
    method: GET
    data_selector: data
    params: {}
- name: lookup_device_id
  endpoint:
    path: /lookup_device_id
    method: GET
    data_selector: Device
    params: {}
- name: lookup_device_id_with_headers
  endpoint:
    path: /lookup_device_id_with_headers
    method: GET
    data_selector: Device
    params: {}
- name: lookup_with_headers
  endpoint:
    path: /lookup_with_headers
    method: GET
    data_selector: Device
    params: {}
- name: lookup_useragent
  endpoint:
    path: /lookup_useragent
    method: GET
    data_selector: Device
    params: {}
- name: device_capabilities
  endpoint:
    path: /wurfl.js
    method: GET
    data_selector: WURFL
- name: WURFL.js capabilities
  endpoint:
    path: https://wjs.wurflcloud.com/wurfl.js
    method: GET
    data_selector: WURFL
    params: {}
- name: WURFL.js Lite capabilities
  endpoint:
    path: https://wurfl.io/wurfl.js
    method: GET
    data_selector: WURFL
    params: {}
- name: capabilities
  endpoint:
    path: /wurfl/capabilities
    method: GET
    data_selector: capabilities
    params: {}
- name: capabilityNames
  endpoint:
    path: /v1/capabilityNames
    method: GET
    data_selector: capabilityNames
- name: capabilityDescriptors
  endpoint:
    path: /v1/capabilityDescriptors
    method: GET
    data_selector: capabilityDescriptors
- name: brands
  endpoint:
    path: /v1/brands
    method: GET
    data_selector: brands
- name: devices
  endpoint:
    path: /v1/devices
    method: GET
    data_selector: devices
- name: capabilityNames
  endpoint:
    path: /v1/capabilityNames
    method: GET
    data_selector: ''
- name: capabilityDescriptors
  endpoint:
    path: /v1/capabilityDescriptors
    method: GET
    data_selector: ''
- name: brands
  endpoint:
    path: /v1/brands
    method: GET
    data_selector: ''
- name: devices
  endpoint:
    path: /v1/devices/{WURFL ID}
    method: GET
    data_selector: ''
- name: findByModelName
  endpoint:
    path: /v1/devices/findByModelName
    method: GET
    data_selector: ''
- name: findByGenericName
  endpoint:
    path: /v1/devices/findByGenericName
    method: GET
    data_selector: records
    params: {}
- name: search
  endpoint:
    path: /v1/devices/search
    method: GET
    data_selector: records
    params: {}
- name: autofillBySubstring
  endpoint:
    path: /v1/devices/autofillBySubstring
    method: GET
    data_selector: records
    params: {}
- name: devices_notify
  endpoint:
    path: /devices/notify/{channel}
    method: GET
    data_selector: status
    params: {}
- name: JSONDeviceData
  endpoint:
    path: /v1/device
    method: GET
    data_selector: Capabilities
    params: {}
- name: JSONInfoData
  endpoint:
    path: /v1/info
    method: GET
    data_selector: Wurfl_info
    params: {}
- name: device_detection
  endpoint:
    path: /lookupUseragent
    method: POST
    data_selector: device
    params: {}
- name: device_makes
  endpoint:
    path: /getAllDeviceMakes
    method: GET
    data_selector: makes
    params: {}
- name: os_names
  endpoint:
    path: /getAllOSes
    method: GET
    data_selector: oses
    params: {}
- name: android_versions
  endpoint:
    path: /getAllVersionsForOS
    method: GET
    data_selector: versions
    params:
      os: Android
- name: device_detection
  endpoint:
    path: /lookupUserAgent
    method: POST
    data_selector: deviceData
- name: device_makes
  endpoint:
    path: /getAllDeviceMakes
    method: GET
    data_selector: deviceMakes
- name: device_models
  endpoint:
    path: /getAllDevicesForMake
    method: GET
    data_selector: modelMktNames
- name: oses
  endpoint:
    path: /getAllOSes
    method: GET
    data_selector: oses
- name: android_versions
  endpoint:
    path: /getAllVersionsForOS
    method: GET
    data_selector: versions
- name: device
  endpoint:
    path: /
    method: POST
    data_selector: capabilities
- name: device_makes
  endpoint:
    path: /get_all_device_makes
    method: GET
- name: operating_systems
  endpoint:
    path: /get_all_OSes
    method: GET
- name: devices_for_make
  endpoint:
    path: /get_all_devices_for_make
    method: GET
- name: versions_for_OS
  endpoint:
    path: /get_all_versions_for_OS
    method: GET
- name: device_detection
  endpoint:
    path: /lookupUseragent
    method: GET
    data_selector: capabilities
    params: {}
- name: device_makes
  endpoint:
    path: /getAllDeviceMakes
    method: GET
    data_selector: deviceMakes
    params: {}
- name: devices_for_make
  endpoint:
    path: /getAllDevicesForMake
    method: GET
    data_selector: devNames
    params: {}
- name: oses
  endpoint:
    path: /getAllOSes
    method: GET
    data_selector: oses
    params: {}
- name: android_versions
  endpoint:
    path: /getAllVersionsForOS
    method: GET
    data_selector: osVersions
    params: {}
- name: status
  endpoint:
    path: /v2/status/json
    method: GET
    data_selector: lookup_request
    params: {}
notes:
- The WURFL API is closely tied to the wurfl.xml file. New versions of the wurfl.xml
  are compatible with old versions of the API by nature, but the reverse is not true.
- A new WURFL device data snapshot is released weekly on Sunday night.
- WURFLUpdater will periodically check to see if a new version of the wurfl.zip has
  been released.
- WURFL contains tens of thousands of devices, each one with hundreds of properties.
- Accept-CH header must contain all high entropy User-Agent Client-Hints
- Users are encouraged to update to the newest WURFL snapshot weekly for maximum device
  detection accuracy.
- The device age restriction is calculated by using the deviceâ€™s release date.
- The WURFL API is closely tied to the wurfl.zip file. New versions of the wurfl.zip
  are compatible with old versions of the API by nature, but the reverse is not true.
  Old versions of the wurfl.zip are not guaranteed to be compatible with new versions
  of the API.
- The WURFL API is closely tied to the wurfl.xml file.
- Old versions of the wurfl.xml are not guaranteed to be compatible with new versions
  of the API.
- The wurfl-updater utility allows periodic checks for an updated version of the wurfl.zip
  file.
- 'Starting from version 1.12.5.0 the HttpRequest class provides two new methods:
  isUaFrozen(), headerQuality().'
- Enable the fast desktop browser match option is deprecated since 1.9.5.0.
- The WURFL OnSite Database API (Tera-WURFL) has been deprecated and, since February
  2017, is no longer supported.
- Starting from version 1.8 the DB API's features have been merged into the PHP API.
- New versions of the wurfl.xml are compatible with old versions of the API by nature,
  but the reverse is not true.
- 'IMPORTANT: Empty header values are treated as valid and those headers are not discarded.'
- WURFL user requested capabilities and properties have to be explicitly specified.
- The installed libwurfl library consists of a header file, wurfl.h, and a dynamic
  link library.
- A wurfl.zip file must already be present in a writable path in order for the updater
  to check the file and determine whether or not it needs to update the file.
- libwurfl library is essential for the module to work
- A .NET Framework of at least 4.5.2 is required for installation
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- libwurfl library is essential for the module to work.
- WURFL data snapshot is needed for lookups.
- Essential to install the libwurfl library on your system.
- You will need a copy of your WURFL data snapshot (wurfl.xml).
- Requires installation of libwurfl library
- WURFL device detection included in HAProxy from release 1.7-dev6
- 'Since version 1.8.3.0: the installation of libwurfl for Windows 1.8.3.0 or greater
  is required'
- The folder and WURFL data file must writable by IIS
- Since module version 1.8.4.1 you need to add a wurfl_enable on; command to the http
  section of your configuration file.
- WURFL data snapshot (wurfl.xml) must be provided for lookups.
- 'WURFL module is disabled by default and will need to be enabled: wurfl_enable on;'
- Ensure that the folder containing the wurfl.zip file is writable to all.
- The WURFL module is disabled by default and you will need to issue the `wurfl_enable
  on;` to enable it.
- In order to let the Updater perform its activities both the `wurfl_root` folder
  and file must be writable by NGINX.
- You must set the updater_data_url to your personal WURFL Snapshot URL.
- The root path should be writable, and a wurfl.zip file must already be present.
- ScientiaMobile does not distribute uncompressed XML data files via the updater.
- If you decide to use the WurflInFuze.js wrapper you may need to edit the default_wurfl_root
  variable, which must point to the WURFL database you're using.
- Python 2.7 will no longer be supported after December 31st 2023.
- libwurfl library must be installed for the Module to work.
- The WURFL data file and the path where it resides, specified in the WURFL engine
  construction, MUST have write/rename access.
- ScientiaMobile does not distribute uncompressed XML data files via the updater.
  This means that, if you plan to use the updater, you MUST use the compressed (i.e.
  a ZIP or a XML.GZ) data file in the engine construction call.
- WURFL data file must be in ZIP format for the updater.
- Some older Linux distributions, such as Fedora 15, may include outdated Varnish
  libraries that are incompatible with the WURFL VMOD.
- 'WURFL Varnish Module Installation Folder: Please note that the WURFL Varnish module
  `deb` package will install the module `.so` file in `/usr/lib/varnish/vmods/`.'
- Ensure you are running a supported version of Varnish Cache before installing this
  module.
- The WURFL Varnish module .deb package will install the module .so file in /usr/lib/varnish/vmods/
- WURFL data snapshot is required for lookups
- WURFL.js Lite provides limited device detection capabilities compared to paid versions.
- GA4 custom dimensions will not have data usable for reporting in GA4 due to a 24
  hour delay.
- WURFL.js Lite includes three standard WURFL capabilities.
- For the best detection experience, we recommend loading WURFL.js via the async method.
- The GA4 custom dimensions will not have data usable for reporting in GA4 due to
  a 24 hour delay on the GA4 side.
- QuWURFL utilizes the Openapi 3.0.0 specification format
- Business Edition users should use the api.query.wurflcloud.com domain.
- QuWURFL CE queries that match more than 1000 devices will fail with a 422 error.
- The /v1/devices/ endpoints will only return a maximum of 1000 devices.
- While the WM Client feels like a 'standalone API', it requires interaction with
  the WURFL Microservice HTTP server.
- ScientiaMobile reserves the right to modify the internal REST API or switch to different
  non-REST protocols without notice.
- Using HTTPServletRequest object for optimal detection accuracy
- While the wmclient is an API, it requires interaction with the WURFL Microservice
  server to work.
- For optimal detection accuracy, pass the complete HTTP request to the lookupRequest
  method.
- This guide assumes that you have access to a running instance of the WURFL Microservice
  HTTP Server.
- While the `wmclient` is an API, it requires interaction with the WURFL Microservice
  server to work.
- When building a request object for node, headers must be lowercase, according to
  Node standard.
- It is highly recommended that you pass the complete HTTP request to the lookupRequest
  method for optimal detection accuracy.
- 'Presence of a capability can be checked with: value, ok := JSONDeviceData.Capabilities["has_cellular_radio"]'
- Requires interaction with WURFL Microservice server, introducing some latency.
- Problems such as network errors or internal server problems may occur.
- Presence of a capability can be checked with device.capabilities.contains()
- While the `wmclient` is an API, it requires interaction with the WURFL Microservice
  server to work. This introduces some latency (hugely mitigated by a built-in caching
  layer).
- If you are using device detection from code running as part of an HTTP server, it
  is highly recommended that you pass the complete HTTP request to the lookup_headers
  method.
- The WM Server needs to have access to ScientiaMobile servers to obtain data and
  updates to the API logic.
- In high-security scenarios, access to outside internet-based services may be blocked.
- Security group configuration opens ports 80 and 22 by default.
- Your choice of GCE instance should depend on how much traffic you need to process
  through device detection.
- While an N1 machine type is sufficient for development and testing, a larger instance
  is recommended for production.
errors:
- '401 Unauthorized: Check your API key or OAuth token.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'wurfl_download : Error related to the folder used to store wurfl.zip or the data
  url format is wrong.'
- 'Updater cannot run : Error related to setting the data URL.'
- 'WURFLException: WURFL throws this exception'
- '401 Unauthorized: Recheck API key or token expiration'
- 'WURFL_OK: Successful operation'
- 'WURFL_ERROR: General error occurred'
- 'WURFL_FILE_NOT_FOUND: WURFL file not found'
- 'No such file or directory: Ensure the symbolic link to /usr/lib/varnish/vmods/libvmod_wurfl.so
  exists.'
- 'KeyNotFoundException: Verify the presence of the capability before retrieving it'
- 'Invalid input provided: Check user-agent or request parameters'
- 'Network errors: Verify server status and connectivity'
- 'Missing Capabilities: Return value of zero for unavailable capabilities.'
- 'WmClientError: An error has occurred'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects: []
client:
  base_url: https://data.scientiamobile.com
  headers:
    Accept: application/json
source_metadata: null
