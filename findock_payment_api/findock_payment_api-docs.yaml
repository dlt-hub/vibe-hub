resources:
- name: payments
  endpoint:
    path: /api/payments
    method: GET
    data_selector: data
- name: payment_profile
  endpoint:
    path: /api/payment_profiles
    method: GET
    data_selector: records
- name: mandate
  endpoint:
    path: /api/mandates
    method: GET
    data_selector: records
- name: recurring_payment
  endpoint:
    path: /api/recurring_payments
    method: GET
    data_selector: records
- name: installment
  endpoint:
    path: /api/installments
    method: GET
    data_selector: records
- name: Chatter Group
  endpoint:
    path: /setup/configure-processinghub#configure-file-exchanges
    method: GET
    data_selector: records
    params: {}
- name: email integration
  endpoint:
    path: /setup/automatic-chatter-file-upload-with-email
    method: GET
    data_selector: records
    params: {}
- name: Giving Pages
  endpoint:
    path: /api/giving-pages
    method: POST
- name: Payments
  endpoint:
    path: /api/payments
    method: POST
- name: payment
  endpoint:
    path: /api/payments
    method: GET
    data_selector: records
- name: payment_channels
  endpoint:
    path: /api/v1/payment_channels
    method: GET
    data_selector: channels
    params: {}
- name: PaymentMethods
  endpoint:
    path: /PaymentMethods
    method: GET
    data_selector: PaymentMethods
- name: SourceConnectors
  endpoint:
    path: /SourceConnectors
    method: GET
    data_selector: SourceConnectors
- name: PaymentIntent
  endpoint:
    path: /PaymentIntent
    method: POST
    data_selector: ''
    params: {}
- name: PaymentIntent
  endpoint:
    path: /PaymentIntent
    method: POST
- name: Recurring
  endpoint:
    path: /Recurring
    method: GET
- name: PaymentIntent
  endpoint:
    path: /PaymentIntent
    method: POST
    data_selector: records
- name: PaymentMethods
  endpoint:
    path: /PaymentMethods
    method: GET
    data_selector: records
- name: SourceConnectors
  endpoint:
    path: /SourceConnectors
    method: GET
    data_selector: records
- name: PackagesActions
  endpoint:
    path: /PackagesActions
    method: GET
    data_selector: records
- name: PaymentMethods
  endpoint:
    path: /GET/PaymentMethods
    method: GET
    data_selector: options
    params: {}
- name: PaymentMethods
  endpoint:
    path: /PaymentMethods
    method: GET
    data_selector: methods
    params: {}
- name: PaymentIntent
  endpoint:
    path: /PaymentIntent
    method: POST
    data_selector: records
- name: CheckInboundReportStatus
  endpoint:
    path: /PaymentIntent/{ID}
    method: GET
    data_selector: records
- name: get_installment_details
  endpoint:
    path: /Installment/{ID}
    method: GET
- name: recurring_payment
  endpoint:
    path: /Recurring/{ID}
    method: GET
- name: payment_methods
  endpoint:
    path: /PaymentMethods
    method: GET
    data_selector: PaymentMethods
- name: SourceConnectors
  endpoint:
    path: /SourceConnector
    method: GET
    data_selector: SourceConnectors
- name: package_actions
  endpoint:
    path: /PackageActions
    method: GET
    data_selector: PackageActions
    params: {}
- name: transaction_set
  endpoint:
    path: /services/data/vXX.X/sobjects/TransactionSet
    method: POST
    data_selector: records
    params: {}
- name: inbound_report
  endpoint:
    path: /services/data/vXX.X/sobjects/InboundReport
    method: POST
    data_selector: records
    params: {}
- name: inbound_report
  endpoint:
    path: /api/inbound-reports
    method: POST
    data_selector: records
- name: transaction_set
  endpoint:
    path: /api/transaction-sets
    method: GET
    data_selector: records
- name: PaymentIntent
  endpoint:
    path: /PaymentIntent
    method: POST
    data_selector: message
    params: {}
- name: bacs_reports
  endpoint:
    path: /v1/bacs_reports
    method: POST
    data_selector: reports
    params: {}
- name: auddis_reports
  endpoint:
    path: /v1/auddis_reports
    method: POST
    data_selector: reports
    params: {}
- name: addacs_reports
  endpoint:
    path: /v1/addacs_reports
    method: POST
    data_selector: reports
    params: {}
- name: arudd_reports
  endpoint:
    path: /v1/arudd_reports
    method: POST
    data_selector: reports
    params: {}
- name: ddic_reports
  endpoint:
    path: /v1/ddic_reports
    method: POST
    data_selector: reports
    params: {}
- name: BGMax file
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Inbound Report
  endpoint:
    path: /data-model/paymenthub-file
    method: GET
    data_selector: records
- name: camt053
  endpoint:
    path: /reconciliation/processing-camt-053-files
    method: GET
    data_selector: records
- name: camt.054.001.02
  endpoint:
    path: /camt.054.001.02
    method: POST
    data_selector: transactions
    params: {}
- name: camt.054.001.04
  endpoint:
    path: /camt.054.001.04
    method: POST
    data_selector: transactions
    params: {}
- name: coda_transaction
  endpoint:
    path: /services/data/vXX.X/sobjects/CodaTransaction
    method: POST
    data_selector: records
    params: {}
- name: transaction_set
  endpoint:
    path: /path/to/transaction_set
    method: POST
    data_selector: transaction_sets
    params: {}
- name: transaction
  endpoint:
    path: /path/to/transaction
    method: POST
    data_selector: transactions
    params: {}
- name: Transaction Set
  endpoint:
    path: /reconciliation/processing-n43-files
    method: GET
    data_selector: Transaction Set records
    params: {}
- name: Transaction
  endpoint:
    path: /reconciliation/processing-n43-files
    method: GET
    data_selector: Transaction records
    params: {}
- name: OCR processing
  endpoint:
    path: /reconciliation/processing-ocr-files
    method: GET
    data_selector: records
- name: pain.002
  endpoint:
    path: /processing/pain.002
    method: POST
    data_selector: inbound_reports
    params: {}
- name: inbound_reports
  endpoint:
    path: /path/to/inbound_reports
    method: POST
    data_selector: reports
    params:
      type: SEDA
      subtype: MndtAccptncRpt
- name: recurring_donation
  endpoint:
    path: /setup/custom-payment-methods
    method: POST
    data_selector: recurring_donation_data
    params: {}
- name: opportunity
  endpoint:
    path: /setup/configure-processinghub
    method: POST
    data_selector: opportunity_data
    params: {}
- name: Handelsbanken Swish report
  endpoint:
    path: /reconciliation/processing-swish-reports/handelsbanken
    method: POST
    data_selector: records
- name: Swedbank Swish report
  endpoint:
    path: /reconciliation/processing-swish-reports/swedbank
    method: POST
    data_selector: records
- name: transaction_set
  endpoint:
    path: /reconciliation/processing-total-in-files
    method: GET
    data_selector: transaction_sets
    params: {}
- name: transaction
  endpoint:
    path: /reconciliation/processing-total-in-files
    method: GET
    data_selector: transactions
    params: {}
- name: Guided Matching
  endpoint:
    path: /reconciliation/configuring-guided-matching
    method: GET
    data_selector: records
- name: payment_hub_file
  endpoint:
    path: /services/data/vXX.X/sobjects/PaymentHubFile
    method: POST
    data_selector: records
    params: {}
- name: installment
  endpoint:
    path: /services/data/vXX.X/sobjects/Installment
    method: POST
    data_selector: records
    params: {}
- name: data_load
  endpoint:
    path: /payments/retry-data-load
    method: GET
    data_selector: records
- name: payment_schedule
  endpoint:
    path: /data-model/payment-schedule
    method: GET
- name: installment
- name: mandate
- name: recurring_payment
- name: payment
- name: payment_profile
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: records
    params: {}
- name: payment_schedule
  endpoint:
    path: /services/data/vXX.X/sobjects/PaymentSchedule
    method: GET
    data_selector: records
    params: {}
- name: recurring_payment_schedule
  endpoint:
    path: /data-model/recurring-payment-schedule
    method: GET
    data_selector: records
- name: payment_schedule
  endpoint:
    path: /services/data/vXX.X/sobjects/PaymentSchedule
    method: GET
    data_selector: records
    params: {}
- name: Payment Schedule
  endpoint:
    path: /services/data/vXX.X/sobjects/PaymentSchedule
    method: GET
    data_selector: records
    params: {}
- name: payment_schedule
  endpoint:
    path: /api/payment_schedule
    method: GET
    data_selector: records
notes:
- Each Salesforce environment requires its own token.
- A refresh token can be used to acquire a new access token if the current token has
  expired.
- Requires configuration of OAuth2 connected app in FinDock
- Payment data is an essential part of the modern customer 360.
- Organizations need to be able to match and reconcile the CRM payment data with the
  data from banks and PSPs.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Salesforce Lightning Web Security (LWS) must be enabled to use the new FinDock Setup
- Authorization expires after some hours of idle time
- FinDock automatically enforces payment profile uniqueness and sets the default source.
- The ProcessingHub connection flow with a Salesforce Integration license currently
  does not support multi-factor authentication (MFA).
- Salesforce IP session locking needs to be disabled
- Ensure UTF-8 encoding for all imported data.
- Historical data must use the correct data import order.
- No immediate actions are required for ProcessingHub and WebHub apps.
- Connections are temporary and impacted by the changes.
- Recommended to carry out actions for ProcessingHub and WebHub at the next available
  opportunity.
- Use a unique email address for sending files to the Chatter Group.
- Limitations include 10,000 character limit for Chatter posts and maximum post size
  of 25 MB.
- Using a sysadmin account for setup is recommended.
- Ensure to plan and align tasks with the project responsible for the Salesforce roll
  out.
- Requires setup of connected app in FinDock
- Some payment methods may require additional actions before collection
- The API abstracts both Salesforce and FinDock configuration details for specific
  payment processors and methods.
- Requires setup of a licensed installation and configured FinDock app in a Salesforce
  org.
- The /Recurring endpoint and recurring payment update features are currently in beta
- If you are using the Apex option with public page integration, make sure the guest
  user account for the page is assigned the FinDock Experience Cloud permission set.
- The endpoint supports handling both one-time and recurring payments.
- Authentication is accomplished through an Oauth2.0 authorization flow.
- Guided Matching enhances the automated matching process for transaction sets and
  inbound reports.
- Upload files through Chatter for processing.
- Ensure file names do not contain whitespaces.
- Guided Matching rules can be configured through the Guided Matching setup.
- Payment Profiles are deduplicated automatically by FinDock.
- Bank Feed is an optional paid feature currently in beta.
- The authorization expires after a fixed period depending on the individual bank.
- Bacs reports are processed and matched with related mandate and installment records.
- The BGMax file format is used in Sweden to report Bankgiro Inbetalningar (Bankgiro
  Receivables) payments processed through Bankgirot.
- The status of an uploaded file can be tracked by taking a look at the comments on
  the post.
- 'Inbound report can have status values: New, Processed, Manual, Error.'
- Ensure to use select camt.053 for the CAMT message type in the target settings.
- Enable CAMT duplication protection unless specific testing scenario requires it
  to be off.
- FinDock supports multiple versions of camt.054 with slight variations.
- For a given target (bank account), you can only import camt.053 or camt.054 files,
  not both.
- FinDock automatically picks up new CODA files that are uploaded to Chatter
- Transaction records are created for each transaction in the CODA file
- MT 940 specification is less rigid, giving banks room to make their own MT 940 file
  definitions.
- It is recommended to use camt files instead of MT 940 if your bank provides the
  option.
- FinDock automatically polls the MPS file transfer service for new OCR files.
- The file structure is flat, so each line in the file is a complete entry or 'order.'
- The scope of FinDock processing of pain.002 files is limited to direct debit rejections
  (status RJCT).
- 'A pain.002 can report rejects on three levels: a whole file, one or more batches,
  or one or more individual transactions.'
- Only attach one file per post and replace any whitespaces in the filename with underscores
  (`_`)
- The entire XML body of the pain.012 entry is added to the Raw Message field
- Recommended workflow for handling standing orders.
- Customization and extension of the setup are possible.
- Files are first parsed by ProcessingHub into transaction sets and transactions.
- Matching is then carried out through Guided Matching managed and custom rules.
- Overuse of Guided Review can create processing delays that affect collection.
- Guided Matching does not support roll-up summary fields of transactions on the related
  transaction set.
- Ensure that the checkbox field 'Start Guided Matching' is visible on the list view.
- Payment schedules define a specific set of installments for collection.
- Payment collection steps differ depending on whether the processing is file-based
  or API-based.
- Supports various payment channels including online redirect and direct.
- Additional PCI compliance and security measures required before collecting MOTO
  credit card payments.
- If an installment or related record is deleted during the payment schedule run,
  you will encounter an ENTITY_DELETED error.
- Restore the deleted record to complete the payment schedule process.
- Payment schedules are used for bulk payment collections.
- Use caution with Additional SOQL.
- The Payment Schedule Path component makes executing a payment schedule much easier
  and intuitive.
- Automated collection can be configured per payment processor and payment method.
- To automatically create and run payment schedules, FinDock requires the heartbeat
  job to be scheduled.
- It is recommended to always create an approval process to govern the execution of
  a payment schedule.
- Make sure to add at least the Payment Schedule object to the list of selected objects.
- Make sure to test the process in your environment to rule out any unwanted interference
  with other processes in your org.
- Disbursements represent outgoing, payable amounts.
- Currently, disbursements through FinDock can only be made using SEPA Credit Transfer
  as the payment method.
errors:
- '010: Malformed request: missing one or more mandatory core parameter(s)'
- '011: Malformed request: missing one or more mandatory Payment Processor parameters'
- '012: Malformed request: missing one or more mandatory SourceConnector parameters'
- '200: Invalid data: the supplied data is incorrect (e.g. an invalid e-mail address).'
- '201: Sort code or bank account is invalid (Bacs Direct Debit).'
- '202: IBAN *<your-IBAN>* is not valid.'
- '203: The provided IBAN is not in SEPA geographical zone.'
- '204: BIC is required to collect SEPA Direct Debit from a non-EAA country bank account.'
- '205: Street, Housename or Number, Zip code and City are required to collect SEPA
  Direct Debit from a non-EEA country bank account.'
- '206: Clearing number and/or bank account invalid (Sweden).'
- '998: An object is missing and no default is specified in the org.'
- '999: Error without specific category: consult the `error_message` for details.'
- 'INVALID_REQUEST: Check the request format and parameters'
- 'UNAUTHORIZED: Ensure valid access token is provided'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '404 Not Found: Check if the endpoint path is correct.'
- '400 Bad Request: Validate request parameters.'
- '401 Unauthorized: Recheck OAuth token.'
- Unexpected connection issues from the security update in the future.
- 'INVALID_SESSION_ID: Session expired or invalid'
- '400: Bad Request'
- '422: Unprocessable Entity'
- '500: Internal Server Error'
- '999: Error without specific category: consult the error_message for details.'
- 'FILE_UPLOAD_ERROR: Ensure the file format is supported.'
- 'PROCESSING_TIMEOUT: Retry the operation.'
- '400 Bad Request: Check the request format and parameters provided.'
- '404 Not Found: Ensure the endpoint is correct and the resource exists.'
- '2.1: NO_KID_IN_AGREEMENT - Set mandate to Rejected'
- '2.2: MANDATE_NOT_FOUND - Set installment to Rejected and add code to Last Status
  Reason field'
- '2.3: INVALID_KID - Set installment to Rejected and add code to Last Status Reason
  field'
- Could not find a matching file for <OrgnlMsgId>
- Could not find a matching batch for <OrgnlPmtInfId>
- Could not find a matching Installment for <OrgnlEndToEndId>
- Duplicate Installment for <OrgnlEndToEndId>
- 'INVALID_IDENTIFIER: Check the payment reference provided'
- 'RECORD_NOT_FOUND: Verify the existence of the PaymentHub File or Installment'
- 'ENTITY_DELETED: Record is missing, either because it was deleted or merged.'
auth_info:
  mentioned_objects:
  - PaymentHubFile
  - Installment
client:
  base_url: https://api.findock.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.findock.com/oauth/token
    client_id: '{{ dlt.secrets[''fin_dock_client_id''] }}'
    client_secret: '{{ dlt.secrets[''fin_dock_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''fin_dock_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
