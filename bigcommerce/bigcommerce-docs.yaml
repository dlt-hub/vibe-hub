resources:
- name: margin
  endpoint:
    path: /margin
    method: GET
    data_selector: props
- name: status_message
  endpoint:
    path: /status/messages
    method: GET
    data_selector: messages
    params: {}
- name: abandoned_cart
  endpoint:
    path: /abandoned-carts/{token}
    method: GET
- name: StatefulTree
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: orders
  endpoint:
    path: /v2/orders
    method: POST
    data_selector: ''
    params: {}
- name: order_statuses
  endpoint:
    path: /v2/order_statuses
    method: GET
    data_selector: ''
    params: {}
- name: customers
  endpoint:
    path: /v3/customers
    method: GET
    data_selector: ''
    params: {}
- name: shipping_addresses
  endpoint:
    path: /v2/orders/{{order_id}}/shipping_addresses/{{shipping_address_id}}/shipping_quotes
    method: GET
    data_selector: ''
    params: {}
- name: taxes
  endpoint:
    path: /v2/orders/{{order_id}}/taxes
    method: GET
    data_selector: ''
    params: {}
- name: transactions
  endpoint:
    path: /v3/orders/{{order_id}}/transactions
    method: GET
    data_selector: ''
    params: {}
- name: Order Shipments
  endpoint:
    path: /order_shipments
    method: POST
- name: Order Shipping Addresses
  endpoint:
    path: /order_shipping_addresses
    method: GET
- name: Shipping Carrier Connection
  endpoint:
    path: /shipping_carrier_connection
    method: POST
- name: products
  endpoint:
    path: /v3/catalog/products
    method: POST
    data_selector: data
- name: brands
  endpoint:
    path: /v3/catalog/brands
    method: POST
    data_selector: data
- name: categories
  endpoint:
    path: /v3/catalog/categories
    method: POST
    data_selector: null
    params: {}
- name: category_tree
  endpoint:
    path: /v3/catalog/trees/{{TREE_ID}}/categories
    method: GET
    data_selector: null
    params: {}
- name: promotions
  endpoint:
    path: /v3/promotions
    method: GET
    data_selector: promotions
- name: create_coupon
  endpoint:
    path: /v3/promotions/{{promotion_id}}/codes
    method: POST
    data_selector: code
- name: promotions
  endpoint:
    path: /promotions
    method: GET
    data_selector: promotions
    params: {}
- name: Create Payment Access Token
  endpoint:
    path: /v3/payments/access_tokens
    method: POST
    data_selector: null
    params: {}
- name: Process Payment
  endpoint:
    path: /payments
    method: POST
    data_selector: null
    params: {}
- name: Get Payment Methods
  endpoint:
    path: /v3/payments/methods
    method: GET
    data_selector: null
    params: {}
- name: Get Stored Instruments
  endpoint:
    path: /v3/payments/methods
    method: GET
    data_selector: null
    params: {}
- name: Create Order
  endpoint:
    path: /v2/orders
    method: POST
    data_selector: null
    params: {}
- name: create_instrument_access_token
  endpoint:
    path: /stored-instruments/access-tokens
    method: POST
- name: import_instruments
  endpoint:
    path: /stored-instruments
    method: POST
- name: list_all_instruments
  endpoint:
    path: /stored-instruments
    method: GET
- name: update_instrument
  endpoint:
    path: /stored-instruments/{{instrument_token}}
    method: PUT
- name: remove_instrument
  endpoint:
    path: /stored-instruments/{{instrument_token}}
    method: DELETE
- name: bulk_delete_instruments
  endpoint:
    path: /stored-instruments
    method: DELETE
- name: list_available_payment_methods
  endpoint:
    path: /stored-instruments/methods
    method: GET
- name: attach_instrument_to_customer
  endpoint:
    path: /stored-instruments
    method: POST
- name: get_tax_settings
  endpoint:
    path: /v3/tax/settings
    method: GET
    data_selector: ''
    params: {}
- name: update_tax_settings
  endpoint:
    path: /v3/tax/settings
    method: PUT
    data_selector: ''
    params: {}
- name: customers
  endpoint:
    path: /v3/customers
    method: POST
    data_selector: ''
    params: {}
- name: subscribers
  endpoint:
    path: /v3/customers/subscribers
    method: POST
    data_selector: ''
    params: {}
- name: email_templates
  endpoint:
    path: /v3/marketing/email-templates
    method: GET
    data_selector: templates
    params: {}
- name: update_email_template
  endpoint:
    path: /v3/marketing/email-templates/{template-name}
    method: PUT
    data_selector: template
    params: {}
- name: products
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.site.products
    params: {}
- name: brands
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.site.brands
    params: {}
- name: checkout
  endpoint:
    path: /graphql
    method: POST
- name: payments
  endpoint:
    path: /stores/{{STORE_HASH}}/payments
    method: POST
- name: checkout
  endpoint:
    path: /checkout
    method: GET
    data_selector: checkout_data
- name: carts
  endpoint:
    path: /carts
    method: GET
    data_selector: cart_data
- name: widget
  endpoint:
    path: /v3/content/widgets
    method: GET
    data_selector: widgets
    params: {}
- name: widget_template
  endpoint:
    path: /v3/content/widget-templates
    method: GET
    data_selector: templates
    params: {}
- name: placement
  endpoint:
    path: /v3/content/placements
    method: POST
    data_selector: placement
    params: {}
- name: channels
  endpoint:
    path: /channels
    method: GET
- name: sites
  endpoint:
    path: /sites
    method: GET
- name: settings
  endpoint:
    path: /settings
    method: GET
- name: channel
  endpoint:
    path: /channel
    method: GET
    data_selector: data.channel
    params: {}
- name: customer
  endpoint:
    path: /customer
    method: GET
    data_selector: data.customer
    params: {}
- name: geography
  endpoint:
    path: /geography
    method: GET
    data_selector: data.geography
    params: {}
- name: inventory
  endpoint:
    path: /inventory
    method: GET
    data_selector: data.inventory
    params: {}
- name: shopperPreferences
  endpoint:
    path: /shopperPreferences
    method: GET
    data_selector: data.shopperPreferences
    params: {}
- name: site
  endpoint:
    path: /site
    method: GET
    data_selector: data.site
    params: {}
- name: store
  endpoint:
    path: /store
    method: GET
    data_selector: data.store
    params: {}
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: items
- name: product
  endpoint:
    path: /products
    method: GET
- name: AddCustomerAddressInput
  endpoint:
    path: /AddCustomerAddress
    method: POST
    data_selector: input
    params: {}
- name: AddProductReviewInput
  endpoint:
    path: /AddProductReview
    method: POST
    data_selector: input
    params: {}
- name: AddWishlistItemsInput
  endpoint:
    path: /AddWishlistItems
    method: POST
    data_selector: input
    params: {}
- name: ApplyCheckoutCouponInput
  endpoint:
    path: /ApplyCheckoutCoupon
    method: POST
    data_selector: input
    params: {}
- name: ApplyCheckoutSpamProtectionInput
  endpoint:
    path: /ApplyCheckoutSpamProtection
    method: POST
    data_selector: input
    params: {}
- name: AssignCartToCustomerInput
  endpoint:
    path: /AssignCartToCustomer
    method: POST
    data_selector: input
    params: {}
- name: BulkPricingFixedPriceDiscount
  endpoint:
    path: /BulkPricingFixedPriceDiscount
    method: GET
    data_selector: fields
- name: BulkPricingPercentageDiscount
  endpoint:
    path: /BulkPricingPercentageDiscount
    method: GET
    data_selector: fields
- name: BulkPricingRelativePriceDiscount
  endpoint:
    path: /BulkPricingRelativePriceDiscount
    method: GET
    data_selector: fields
- name: BulkPricingTier
  endpoint:
    path: /BulkPricingTier
    method: GET
    data_selector: fields
- name: CacheControlScope
  endpoint:
    path: /CacheControlScope
    method: GET
    data_selector: fields
- name: Cart
  endpoint:
    path: /Cart
    method: GET
    data_selector: fields
- name: CartCustomItem
  endpoint:
    path: /CartCustomItem
    method: GET
    data_selector: fields
- name: CartDigitalItem
  endpoint:
    path: /CartDigitalItem
    method: GET
    data_selector: fields
- name: CartDiscount
  endpoint:
    path: /CartDiscount
    method: GET
    data_selector: fields
- name: CartGiftCertificate
  endpoint:
    path: /CartGiftCertificate
    method: GET
    data_selector: fields
- name: CartGiftWrapping
  endpoint:
    path: /CartGiftWrapping
    method: GET
    data_selector: fields
- name: CartLineItems
  endpoint:
    path: /CartLineItems
    method: GET
    data_selector: fields
- name: CartRedirectUrls
  endpoint:
    path: /CartRedirectUrls
    method: GET
    data_selector: fields
- name: Catalog
  endpoint:
    path: /Catalog
    method: GET
    data_selector: fields
- name: Category
  endpoint:
    path: /Category
    method: GET
    data_selector: fields
- name: CategoryEdge
  endpoint:
    path: /api/category/edge
    method: GET
    data_selector: edges
- name: CategoryEntityIdsFilterInput
  endpoint:
    path: /api/category/entityIds
    method: GET
    data_selector: entityIds
- name: CategoryPageBannerConnection
  endpoint:
    path: /api/category/pageBanner
    method: GET
    data_selector: edges
- name: CategorySearchFilter
  endpoint:
    path: /api/category/searchFilter
    method: GET
    data_selector: filters
- name: CategoryTreeItem
  endpoint:
    path: /api/category/treeItem
    method: GET
    data_selector: items
- name: checkout_coupon
  endpoint:
    path: /checkout/coupons
    method: GET
    data_selector: coupons
- name: checkout_promotion_banner
  endpoint:
    path: /checkout/promotion_banners
    method: GET
    data_selector: banners
- name: checkout_shipping_consignment
  endpoint:
    path: /checkout/shipping_consignment
    method: GET
    data_selector: shipping_consignment
- name: checkout_selected_shipping_option
  endpoint:
    path: /checkout/selected_shipping_option
    method: GET
    data_selector: selected_shipping_option
- name: checkout_settings
  endpoint:
    path: /checkout/settings
    method: GET
    data_selector: settings
- name: checkout_tax
  endpoint:
    path: /checkout/tax
    method: GET
    data_selector: tax
- name: CustomerFormFieldValue
  endpoint:
    path: /customerFormFieldValue
    method: GET
    data_selector: entityId, name
    params: {}
- name: CustomerFormFieldsInput
  endpoint:
    path: /customerFormFieldsInput
    method: POST
    data_selector: checkboxes, multipleChoices, numbers, dates, texts, multilineTexts,
      passwords
    params: {}
- name: CustomerMutations
  endpoint:
    path: /customerMutations
    method: POST
    data_selector: changePassword, requestResetPassword
    params: {}
- name: CustomerPasswordError
  endpoint:
    path: /customerPasswordError
    method: GET
    data_selector: message
    params: {}
- name: CustomerRegistrationError
  endpoint:
    path: /customerRegistrationError
    method: GET
    data_selector: message
    params: {}
- name: CustomersSettings
  endpoint:
    path: /customersSettings
    method: GET
    data_selector: passwordComplexitySettings
    params: {}
- name: DateFieldOption
  endpoint:
    path: /dateFieldOption
    method: GET
    data_selector: defaultValue, earliest, latest, limitDateBy, entityId, displayName,
      isRequired, isVariantOption
    params: {}
- name: DateFormField
  endpoint:
    path: /dateFormField
    method: GET
    data_selector: defaultDate, minDate, maxDate, entityId, label, sortOrder, isBuiltIn,
      isRequired
    params: {}
- name: DateFormFieldValue
  endpoint:
    path: /dateFormFieldValue
    method: GET
    data_selector: date, entityId, name
    params: {}
- name: DeleteCartInput
  endpoint:
    path: /deleteCartInput
    method: POST
    data_selector: cartEntityId
    params: {}
- name: DeleteCartLineItemInput
  endpoint:
    path: /deleteCartLineItemInput
    method: POST
    data_selector: cartEntityId, lineItemEntityId, version
    params: {}
- name: DeleteCartMetafieldResult
  endpoint:
    path: /deleteCartMetafieldResult
    method: GET
    data_selector: deletedMetafieldEntityId, errors
    params: {}
- name: DeleteCartResult
  endpoint:
    path: /deleteCartResult
    method: GET
    data_selector: deletedCartEntityId
    params: {}
- name: DeleteCustomerAddressInput
  endpoint:
    path: /deleteCustomerAddressInput
    method: POST
    data_selector: addressEntityId
    params: {}
- name: DeleteCustomerAddressResult
  endpoint:
    path: /deleteCustomerAddressResult
    method: GET
    data_selector: errors
    params: {}
- name: DistanceFilter
  endpoint:
    path: /distanceFilter
    method: GET
    data_selector: radius, longitude, latitude, lengthUnit
    params: {}
- name: EmailAlreadyInUseError
  endpoint:
    path: /emailAlreadyInUseError
    method: GET
    data_selector: message
    params: {}
- name: Error
  endpoint:
    path: /error
    method: GET
    data_selector: message
    params: {}
- name: GenerateSessionSyncTokenResult
  endpoint:
    path: /generateSessionSyncTokenResult
    method: GET
    data_selector: result, errors
    params: {}
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: records
- name: order_address
  endpoint:
    path: /order/address
    method: GET
    data_selector: records
- name: order_billing_address
  endpoint:
    path: /order/billing_address
    method: GET
    data_selector: records
- name: order_consignment
  endpoint:
    path: /order/consignment
    method: GET
    data_selector: records
- name: order_discount
  endpoint:
    path: /order/discount
    method: GET
    data_selector: records
- name: order_digital_line_item
  endpoint:
    path: /order/digital_line_item
    method: GET
    data_selector: records
- name: order_physical_line_item
  endpoint:
    path: /order/physical_line_item
    method: GET
    data_selector: records
- name: order_pickup_consignments
  endpoint:
    path: /order/pickup_consignments
    method: GET
    data_selector: records
- name: order_shipments
  endpoint:
    path: /order/shipments
    method: GET
    data_selector: records
- name: OrderShippingConsignment
  endpoint:
    path: /order/shipping/consignment
    method: GET
    data_selector: edges
    params: {}
- name: OrdersConnection
  endpoint:
    path: /orders
    method: GET
    data_selector: edges
    params: {}
- name: ProductAvailable
  endpoint:
    path: /product/available
    method: GET
    data_selector: status
    params: {}
- name: ProductConditionType
  endpoint:
    path: /product/condition
    method: GET
    data_selector: condition
    params: {}
- name: ProductInventory
  endpoint:
    path: /product/inventory
    method: GET
    data_selector: isInStock
    params: {}
- name: ProductOption
  endpoint:
    path: /product/option
    method: GET
    data_selector: entityId
    params: {}
- name: ProductRedirect
  endpoint:
    path: /product/redirect
    method: GET
    data_selector: id
    params: {}
- name: ProductViewed
  endpoint:
    path: /product/viewed
    method: GET
    data_selector: productEntityId
    params: {}
- name: searchProducts
  endpoint:
    path: /search/products
    method: POST
    data_selector: searchProducts
- name: text_form_field
  endpoint:
    path: /textFormField
    method: GET
    data_selector: fields
    params: {}
- name: text_form_field_value
  endpoint:
    path: /textFormFieldValue
    method: GET
    data_selector: fields
    params: {}
- name: unapply_checkout_coupon_data
  endpoint:
    path: /unapplyCheckoutCouponData
    method: GET
    data_selector: fields
    params: {}
- name: unapply_checkout_coupon_input
  endpoint:
    path: /unapplyCheckoutCouponInput
    method: GET
    data_selector: fields
    params: {}
- name: unassign_cart_from_customer_input
  endpoint:
    path: /unassignCartFromCustomerInput
    method: GET
    data_selector: fields
    params: {}
- name: update_cart_currency_data_input
  endpoint:
    path: /updateCartCurrencyDataInput
    method: GET
    data_selector: fields
    params: {}
- name: update_cart_line_item_data_input
  endpoint:
    path: /updateCartLineItemDataInput
    method: GET
    data_selector: fields
    params: {}
- name: update_checkout_billing_address_data_input
  endpoint:
    path: /updateCheckoutBillingAddressDataInput
    method: GET
    data_selector: fields
    params: {}
- name: update_customer_address_data_input
  endpoint:
    path: /updateCustomerAddressDataInput
    method: GET
    data_selector: fields
    params: {}
- name: wishlist
  endpoint:
    path: /wishlist
    method: GET
    data_selector: items
    params: {}
- name: webpages
  endpoint:
    path: /webpages
    method: GET
    data_selector: pages
    params: {}
- name: elements
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: OffsetPagination
  endpoint:
    params:
      itemsPerPage: null
      currentPage: null
      totalItems: null
      itemsPerPageOptions: null
- name: panel_props
  endpoint:
    path: /panel/properties
    method: GET
    data_selector: props
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: items
- name: button_props
  endpoint:
    path: /buttons/props
    method: GET
    data_selector: props
    params: {}
- name: datepicker_props
  endpoint:
    path: /datepicker/properties
    method: GET
    data_selector: props
    params: {}
- name: dropdown_props
  endpoint:
    path: /dropdown/props
    method: GET
    data_selector: props
    params: {}
- name: file_upload
  endpoint:
    path: /upload
    method: POST
    data_selector: files
    params:
      multiple: true
      validators:
      - validator: file-size
        type: file-size
- name: multi_select
  endpoint:
    path: /multi-select
    method: GET
- name: toggle_example
  endpoint:
    path: /toggle/example
    method: GET
    data_selector: items
    params: {}
- name: textarea
  endpoint:
    path: /textarea
    method: GET
    data_selector: textarea_props
    params: {}
- name: Timepicker
  endpoint:
    path: /Timepicker
    method: GET
    data_selector: props
    params: {}
- name: alert
  endpoint:
    path: /alerts
    method: POST
    data_selector: alerts
    params: {}
- name: badge
  endpoint:
    path: /badge
    method: GET
    data_selector: badgeData
    params: {}
- name: message
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
    params: {}
- name: determinant_progress
  endpoint:
    path: /progress/determinant
    method: GET
    data_selector: percent
    params: {}
- name: ProgressCircle
  endpoint:
    data_selector: props
- name: steps
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: currentStep
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: page
  endpoint:
    path: /page
    method: GET
    data_selector: content
    params: {}
- name: flex
  endpoint:
    path: /flex
    method: GET
    data_selector: props
    params: {}
- name: grid
  endpoint:
    path: /grid
    method: GET
    data_selector: props
    params: {}
- name: padding
  endpoint:
    path: /padding
    method: GET
    data_selector: padding
    params: {}
- name: PopoverProps
  endpoint:
    path: /popover/props
    method: GET
    data_selector: props
    params: {}
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: webhook
    params: {}
- name: ProductCustomFieldOverrides
  endpoint:
    path: /ProductCustomFieldOverrides
    method: GET
    data_selector: edges
- name: ProductImagesOverrides
  endpoint:
    path: /ProductImagesOverrides
    method: GET
    data_selector: edges
- name: ProductOptions
  endpoint:
    path: /ProductOptions
    method: GET
    data_selector: edges
- name: ProductSeoInformationOverridesForLocale
  endpoint:
    path: /ProductSeoInformationOverridesForLocale
    method: GET
    data_selector: metaDescription, pageTitle
- name: ProductUrlPathOverridesForLocale
  endpoint:
    path: /ProductUrlPathOverridesForLocale
    method: GET
    data_selector: path
- name: ProductPreOrderSettingsField
  endpoint:
    path: /ProductPreOrderSettingsField
    method: GET
    data_selector: preOrderMessage
- name: ProductStorefrontDetailsField
  endpoint:
    path: /ProductStorefrontDetailsField
    method: GET
    data_selector: availabilityDescription, searchKeywords, warranty
- name: RemoveProductImagePropertiesOverridesResult
  endpoint:
    path: /RemoveProductImagePropertiesOverridesResult
    method: GET
    data_selector: images
    params: {}
- name: RemoveProductIsFeaturedOverrideResult
  endpoint:
    path: /RemoveProductIsFeaturedOverrideResult
    method: GET
    data_selector: product
    params: {}
- name: RemoveProductModifierOverridesDataInput
  endpoint:
    path: /RemoveProductModifierOverridesDataInput
    method: GET
    data_selector: modifiers
    params: {}
- name: RemoveProductModifiersOverridesInput
  endpoint:
    path: /RemoveProductModifiersOverridesInput
    method: GET
    data_selector: productId
    params: {}
- name: RemoveProductOptionsOverridesInput
  endpoint:
    path: /RemoveProductOptionsOverridesInput
    method: GET
    data_selector: data
    params: {}
- name: RemoveProductPreOrderSettingsOverridesInput
  endpoint:
    path: /RemoveProductPreOrderSettingsOverridesInput
    method: GET
    data_selector: localeContext
    params: {}
- name: RemoveProductSeoInformationOverridesInput
  endpoint:
    path: /RemoveProductSeoInformationOverridesInput
    method: GET
    data_selector: localeContext
    params: {}
- name: RemoveProductStorefrontDetailsOverridesInput
  endpoint:
    path: /RemoveProductStorefrontDetailsOverridesInput
    method: GET
    data_selector: localeContext
    params: {}
- name: RemoveProductUrlPathOverrideInput
  endpoint:
    path: /RemoveProductUrlPathOverrideInput
    method: GET
    data_selector: localeContext
    params: {}
- name: RemoveRadioButtonsProductModifierOverridesInput
  endpoint:
    path: /RemoveRadioButtonsProductModifierOverridesInput
    method: GET
    data_selector: fields
    params: {}
- name: RemoveRadioButtonsProductOptionOverridesInput
  endpoint:
    path: /RemoveRadioButtonsProductOptionOverridesInput
    method: GET
    data_selector: fields
    params: {}
- name: RemoveRectangleListProductModifierOverridesInput
  endpoint:
    path: /RemoveRectangleListProductModifierOverridesInput
    method: GET
    data_selector: fields
    params: {}
- name: RemoveSwatchProductModifierOverridesInput
  endpoint:
    path: /RemoveSwatchProductModifierOverridesInput
    method: GET
    data_selector: fields
    params: {}
- name: RemoveTextFieldProductModifierOverridesInput
  endpoint:
    path: /RemoveTextFieldProductModifierOverridesInput
    method: GET
    data_selector: fields
    params: {}
- name: SetProductBasicInformation
  endpoint:
    path: /SetProductBasicInformation
    method: POST
    data_selector: product
    params: {}
- name: SetProductIsFeatured
  endpoint:
    path: /SetProductIsFeatured
    method: POST
    data_selector: product
    params: {}
- name: SetProductModifiersInformation
  endpoint:
    path: /SetProductModifiersInformation
    method: POST
    data_selector: product
    params: {}
- name: SetProductOptionsInformation
  endpoint:
    path: /SetProductOptionsInformation
    method: POST
    data_selector: product
    params: {}
- name: SetProductPreOrderSettings
  endpoint:
    path: /SetProductPreOrderSettings
    method: POST
    data_selector: product
    params: {}
- name: SetProductSeoInformation
  endpoint:
    path: /SetProductSeoInformation
    method: POST
    data_selector: product
    params: {}
- name: SetProductStorefrontDetails
  endpoint:
    path: /SetProductStorefrontDetails
    method: POST
    data_selector: product
    params: {}
- name: SetProductUrlPath
  endpoint:
    path: /SetProductUrlPath
    method: POST
    data_selector: product
    params: {}
- name: StoreSettings
  endpoint:
    path: /store/settings
    method: GET
    data_selector: dataSolutions
    params: {}
- name: WebhookStatus
  endpoint:
    path: /webhook/status
    method: GET
    data_selector: status
    params: {}
- name: Webhook
  endpoint:
    path: /webhook
    method: GET
    data_selector: webhook
    params: {}
- name: WebhookEventDataFilter
  endpoint:
    path: /webhook/eventDataFilter
    method: GET
    data_selector: eventDataFilter
    params: {}
- name: WebhookFiltersInput
  endpoint:
    path: /webhook/filters
    method: GET
    data_selector: filters
    params: {}
- name: WebhookMutations
  endpoint:
    path: /webhook/mutations
    method: POST
    data_selector: mutations
    params: {}
- name: WebhookStatus
  endpoint:
    path: /webhook/status
    method: GET
    data_selector: status
    params: {}
- name: WebhooksSettings
  endpoint:
    path: /webhook/settings
    method: GET
    data_selector: settings
    params: {}
- name: account
  endpoint:
    path: /accounts/{{account_uuid}}/graphql
    method: POST
    data_selector: account
    params: {}
- name: current_customer
  endpoint:
    path: /customer/current.jwt
    method: GET
    params:
      app_client_id: API account client ID
- name: carts
  endpoint:
    path: /carts
    method: GET
    params:
      include: lineItems.physicalItems.options
- name: account
  endpoint:
    path: /account
    method: GET
    data_selector: data.account
    params: {}
- name: system
  endpoint:
    path: /system
    method: GET
    data_selector: data.system
    params: {}
- name: Money
  endpoint:
    path: /services/data/vXX.X/sobjects/Money
    method: GET
    data_selector: records
- name: MoneyInput
  endpoint:
    path: /services/data/vXX.X/sobjects/MoneyInput
    method: GET
    data_selector: records
- name: Customers
  endpoint:
    path: /customers
    method: GET
- name: Customers Addresses
  endpoint:
    path: /customers/addresses
    method: GET
- name: Customers Groups
  endpoint:
    path: /customers/groups
    method: GET
- name: Customers Validate Password
  endpoint:
    path: /customers/validate-password
    method: POST
- name: inventory_settings
  endpoint:
    path: /v3/inventory/settings
    method: GET
- name: inventory_quantities
  endpoint:
    path: /v3/inventory/quantities
    method: GET
- name: absolute_adjustments
  endpoint:
    path: /v3/inventory/adjustments/absolute
    method: POST
- name: relative_adjustments
  endpoint:
    path: /v3/inventory/adjustments/relative
    method: POST
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: Analytics
  endpoint:
    path: /settings/analytics
    method: GET
- name: Catalog
  endpoint:
    path: /settings/catalog
    method: GET
- name: Email Statuses
  endpoint:
    path: /settings/email-statuses
    method: GET
- name: Favicon Image
  endpoint:
    path: /settings/favicon-image
    method: POST
- name: Inventory
  endpoint:
    path: /settings/inventory
    method: GET
- name: Inventory Notifications
  endpoint:
    path: /settings/inventory-notifications
    method: GET
- name: Logo
  endpoint:
    path: /settings/logo
    method: GET
- name: Logo Image
  endpoint:
    path: /settings/logo-image
    method: POST
- name: Search Filters
  endpoint:
    path: /settings/search-filters
    method: GET
- name: Store Locale
  endpoint:
    path: /settings/store-locale
    method: GET
- name: Store Profile
  endpoint:
    path: /settings/store-profile
    method: GET
- name: Storefront Category
  endpoint:
    path: /settings/storefront-category
    method: GET
- name: Storefront Product
  endpoint:
    path: /settings/storefront-product
    method: GET
- name: Storefront Robots.txt
  endpoint:
    path: /settings/storefront-robots.txt
    method: GET
- name: Storefront Search
  endpoint:
    path: /settings/storefront-search
    method: GET
- name: Storefront Security
  endpoint:
    path: /settings/storefront-security
    method: GET
- name: Storefront SEO
  endpoint:
    path: /settings/storefront-seo
    method: GET
- name: Storefront Status
  endpoint:
    path: /settings/storefront-status
    method: GET
- name: Units of Measurement
  endpoint:
    path: /settings/units-of-measurement
    method: GET
- name: site_routes
  endpoint:
    path: /stores/{{STORE_HASH}}/v3/sites/{site_id}/routes
    method: POST
    data_selector: null
    params: {}
- name: store_information
  endpoint:
    path: /store/information
    method: GET
- name: payment_access_token
  endpoint:
    path: /v3/payments/access_tokens
    method: POST
    data_selector: null
    params: {}
- name: process_payment
  endpoint:
    path: /payments
    method: POST
    data_selector: null
    params: {}
- name: get_payment_methods
  endpoint:
    path: /v3/payments/methods
    method: GET
    data_selector: null
    params: {}
- name: get_stored_instruments
  endpoint:
    path: /v3/payments/methods
    method: GET
    data_selector: null
    params: {}
- name: create_order
  endpoint:
    path: /v2/orders
    method: POST
    data_selector: null
    params: {}
- name: orders
  endpoint:
    path: /v2/orders
    method: POST
    data_selector: order
    params: {}
- name: order_statuses
  endpoint:
    path: /v2/order_statuses
    method: GET
    data_selector: statuses
    params: {}
- name: customers
  endpoint:
    path: /v3/customers
    method: GET
    data_selector: customers
    params: {}
- name: shipping_addresses
  endpoint:
    path: /v2/orders/{{order_id}}/shipping_addresses/{{shipping_address_id}}/shipping_quotes
    method: GET
    data_selector: quotes
    params: {}
- name: taxes
  endpoint:
    path: /v2/orders/{{order_id}}/taxes
    method: GET
    data_selector: taxes
    params: {}
- name: transactions
  endpoint:
    path: /v3/orders/{{order_id}}/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: create_webhook
  endpoint:
    path: /v3/hooks
    method: POST
    data_selector: null
    params: {}
- name: custom_template_associations
  endpoint:
    path: /upsert/custom_template_associations
    method: POST
- name: categories
  endpoint:
    path: /get/categories
    method: GET
- name: products
  endpoint:
    path: /get/products
    method: GET
- name: brands
  endpoint:
    path: /get/brands
    method: GET
- name: pages
  endpoint:
    path: /get/pages
    method: GET
- name: all_themes
  endpoint:
    path: /get/all_themes
    method: GET
- name: custom_templates
  endpoint:
    path: /get/custom_templates
    method: GET
- name: active_theme
  endpoint:
    path: /get/channel/active_theme
    method: GET
- name: products
  endpoint:
    path: /stores/{{STORE_HASH}}/v3/catalog/products
    method: GET
    data_selector: records
- name: storefront_token
  endpoint:
    path: /stores/{store_hash}/v3/storefront/api-token
    method: POST
    data_selector: allowed_cors_origins
- name: shipping_quote
  endpoint:
    path: /rate
    method: POST
    data_selector: carrier_quotes
- name: check_connection_options
  endpoint:
    path: /check_connection_options
    method: POST
    data_selector: valid
notes:
- The method of authentication is determined by the carrier server.
- Now available for the Price list, Price list records, and Price list assignments
  endpoints.
- You cannot specify the order_source; its value is external.
- Coupon redemption is unavailable.
- New Developer Portal is in beta and will replace the legacy UI.
- Only one product can be created at a time.
- Files can only be added to digital products via control panel or WebDav.
- Indicates how many items are displayed per page.
- Indicates options for per-page ranges.
- Transactional currencies can't be created via API, so they'll need to be added via
  the active MSF-enabled control panel.
- Do not change the default currency -- this may lead to unintended currency conversion
  issues.
- Promotions can have multiple rules.
- Free shipping is not the same as 100% off shipping.
- BigCommerce recommends having less than 100 active promotions on storefronts, and
  there should be at most ten rules per promotion.
- Currently in Beta and subject to changes
- Rate limits apply
- Only available on Catalyst storefronts
- Requires the 'modify' permission level for the Stored Payment Instruments scope.
- The V3 customers API allows for more efficient API calls.
- Saving an email template that exceeds 65,536 characters returns an 'Email body too
  large' error message and truncates extra characters.
- GraphQL Storefront API supports bi-directional pagination
- Maximum products per query is 50
- Invalid or missing headers will cause requests to be treated as coming from the
  proxy IP
- After three attempts with invalid session-sync JWT tokens, the system will block
  the IP address for five minutes.
- The REST Management API currently does not support using store credit or gift certificates
  as payment methods.
- Props ending with * are required
- Coupon types include FREE_SHIPPING
- Ensure to check for errors related to customer address operations
- Choose meaningful headers that describe the content revealed on expand.
- Use the icon prop sparingly; an appropriate use would be the status of a task hidden
  in the accordion.
- Use accordions to present parallel content or like items.
- Limit the number of tasks hidden in each accordion to one.
- Start with all panels collapsed unless the user has been redirected to the content.
- Use on long pages to improve navigation between sections.
- Label sections clearly and use descriptive IDs.
- Keep section content well-spaced to improve visibility of the active section.
- Supports pagination, row selection, and sorting out of the box.
- Ensure the 'default' action is the primary button.
- Primary button should only appear once per page.
- Supports all native <input /> element attributes.
- Supports all native <form /> element attributes.
- Default page view should have no PillTabs selected.
- Allows users to make a single selection or multiple selections from a list of options.
- Alerts are non-disruptive messages that provide quick feedback on the outcome of
  an action.
- Use Badges to indicate the connection status of a 3rd party integration or to call
  attention to new features.
- Use Lozenges to indicate the status of a feature (e.g. “alpha”, "beta", "new").
- Aim for 3-5 steps, if a process requires more than 5 steps, consider simplifying
  the process or break it down into multi-tasks.
- Strongly recommend content should only be saved/created at the end of flow and it
  should be explicitly called out when it’s saved/created.
- Use the header to provide a clear overview of the page’s purpose.
- Limit the number of actions to three.
- Utilize the back link option for easy navigation.
- Use badges to indicate system status.
- Use lozenges to indicate feature lifecycle.
- Use with two-dimensional layouts (columns and rows).
- When you care about the exact positioning of elements.
- Used on complex layouts.
- Webhook is active.
- Webhook is disabled.
- Webhook is inactive.
- Webhook destination must return a 200 response.
- Substitute your storefront domain for yourstore.example.com
- The Send a Test Request feature is not currently supported for this endpoint.
- Some endpoints only work with one kind of API account.
- Unless your frontend client proxies requests, attempts to authenticate from the
  browser using customer impersonation tokens will be rejected.
- The REST Storefront API uses CORS headers for authentication, and therefore has
  no required scopes.
- When reCAPTCHA is enabled on the store, use the token field in the request body.
- The REST Storefront API uses CORS headers for authentication and has no required
  scopes.
- You do not need to send any BigCommerce-specific tokens with your requests to these
  endpoints.
- Customer Groups are only available on specific plans.
- You cannot assign Price Lists to a customer group with customer group discounts
  -- You must delete the customer group discounts first.
- Bulk pricing Tiers can additionally be associated with a price record to indicate
  different pricing as the quantity in the cart increases.
- If a variant has a Price Record, any existing product-level bulk pricing will not
  apply to the cart. For variants without Price Records, any existing product bulk
  pricing will apply.
- Price Lists Records accepts bulk upsert. You can only do one bulk upsert at a time.
  Running more than one bulk upsert in parallel on the same store will cause a 429
  error and the request will fail.
- There are webhooks available for Price Lists assignments. The price list assignment
  webhook fires when a price list assignment is assigned, reassigned, or unassigned.
  Note that since Price Lists do not directly relate to products, neither product
  nor SKU webhooks are going to fire for corresponding changes, such as pricing.
- A Payment Access Token (PAT) is required to authorize payment processing requests.
- The X-Auth-Token header is not required in requests to the payment processing endpoint.
- 3D Secure must be handled in a server-to-server context.
- The Payments API does not support the BigCommerce Test Payment Gateway.
- To create an order that triggers email notifications, create a cart and convert
  it into an order.
- Creating order shipments triggers email notifications.
- The destination URL must be served on port 443; custom ports are not currently supported.
- A webhook subscription becomes deactivated after 90 days of inactivity.
- Merchants can enable, configure, and disable the carrier for any defined zone.
- The Catalog V3 categories endpoints were primarily useful in applications for single
  storefront stores and are deprecated.
- To manage categories, use the Catalog V3 category trees endpoints.
errors:
- '204 No Content: No shipping quote available.'
- '401 Unauthorized: Invalid authentication credentials.'
- '400 Bad Request: Invalid request format or parameters.'
- '422: The product is currently associated with an option set, please remove it before
  editing an option or modifier.'
- '10000: We''re experiencing difficulty processing your transaction. Please try again
  later.'
- '10001: Unable to process the payment because invalid data was supplied with the
  transaction.'
- '30000: Merchant payment configuration could not be found.'
- '30001: Merchant payment configuration is not configured correctly.'
- '30002: Vaulting service is currently not available.'
- '30003: Order could not be found.'
- '30004: The validation on line item and grand total does not match.'
- '30050: Payment instrument could not be saved.'
- '30051: That stored payment instrument could not be found.'
- '30100: Payment access token could not be created.'
- '30101: Order is invalid.'
- '30102: Your card details could not be verified.'
- '30103: Your card has expired.'
- '30104: There was a problem processing your card.'
- '30105: This is a duplicate transaction.'
- '30106: The payment was declined due to insufficient funds.'
- '30107: The authorization for this transaction has been revoked.'
- '401 Unauthorized: Recheck access token or permissions'
- '400 Bad Request: Check request body for required fields'
- 'Email body too large: Truncate the email template body to under 65,536 characters.'
- The query is too complex as it has a complexity score of 12230 out of 10000. Please
  remove some elements and try again
- 'Invalid JWT: Check the format of the token'
- 'IP_BLOCKED: Too many invalid attempts'
- 'CustomerAddressCreationError: Unexpected error while creating a customer address.'
- 'CustomerAddressDeletionError: Unexpected error while deleting a customer address.'
- 'CustomerAlreadyReviewedProductError: Customer submitted multiple reviews to the
  same product.'
- 'InvalidSessionSyncJwtError: Invalid Jwt token.'
- 'JwtTokenExpiredError: JWT token is expired.'
- 'NotFoundError: Subject not found error.'
- Do not use accordions to hide important user tasks.
- Do not use the icon prop unless it provides benefit to the user.
- Do not nest accordions within accordions.
- Do not use an accordion to hide a singular piece of content.
- AlreadyExistsError
- EntityNotFoundError
- '400 Bad Request: Check the provided parameters.'
- '404 Not Found: Verify the webhook URL.'
- '400 Bad Request: Invalid request parameters.'
- '401 Unauthorized: Check your access token.'
- '200: Successful response. Ensure your app responds with a 200 status.'
- 'Not receiving webhook event callbacks: Ensure your app returns HTTP 200 after receiving
  the webhook event payload.'
auth_info:
  mentioned_objects:
  - Customer Access Token
  - Session Sync
client:
  base_url: https://api.bigcommerce.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.api.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: X-Auth-Token
  headers:
    Accept: application/json
    Content-Type: application/json
    X-Auth-Token: API account access token
  paginator:
    type: cursor
source_metadata: null
