resources:
- name: workspace_audit_logs
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/auditlogs
    method: POST
- name: audit_logs
  endpoint:
    path: /workspaces/workspace_id/auditlogs
    method: POST
- name: workspace_audit_logs
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/auditlogs
    method: POST
- name: audit_logs
  endpoint:
    path: /workspaces/workspace_id/auditlogs
    method: POST
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
- name: create_task_attachment
  endpoint:
    path: /reference/createtaskattachment
    method: POST
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
- name: Get Tasks
  endpoint:
    path: /reference/gettasks
    method: GET
    data_selector: tasks
- name: Get Filtered Team Tasks
  endpoint:
    path: /reference/getfilteredteamtasks
    method: GET
    data_selector: tasks
- name: Get Accessible Custom Fields
  endpoint:
    path: /reference/getaccessiblecustomfields
    method: GET
    data_selector: custom_fields
- name: create_task_attachment
  endpoint:
    path: /reference/createtaskattachment
    method: POST
- name: filtered_team_tasks
  endpoint:
    path: /team/{team_Id}/task
    method: GET
    data_selector: custom_fields
    params: {}
- name: Get Tasks
  endpoint:
    path: /reference/gettasks
    method: GET
- name: Get Filtered Team Tasks
  endpoint:
    path: /reference/getfilteredteamtasks
    method: GET
- name: Get Accessible Custom Fields
  endpoint:
    path: /reference/getaccessiblecustomfields
    method: GET
- name: filtered_team_tasks
  endpoint:
    path: /team/{team_Id}/task
    method: GET
    data_selector: custom_fields
- name: update_comment
  endpoint:
    path: /reference/updatecomment
    method: POST
- name: delete_comment
  endpoint:
    path: /reference/deletecomment
    method: DELETE
- name: views
  endpoint:
    path: /views
    method: GET
- name: update_comment
  endpoint:
    path: /reference/updatecomment
    method: POST
- name: delete_comment
  endpoint:
    path: /reference/deletecomment
    method: DELETE
- name: webhook
  endpoint:
    path: /createWebhook
    method: POST
    data_selector: webhook
    params: {}
- name: webhook_health_status
  endpoint:
    path: /api/v2/webhook/{webhook_id}
    method: PUT
    data_selector: webhook
    params: {}
- name: webhook
  endpoint:
    path: /reference/createwebhook
    method: POST
    data_selector: event
    params: {}
- name: spaceCreated
  endpoint:
    path: /webhook/spaceCreated
    method: POST
    data_selector: event
- name: spaceUpdated
  endpoint:
    path: /webhook/spaceUpdated
    method: POST
    data_selector: event
- name: spaceDeleted
  endpoint:
    path: /webhook/spaceDeleted
    method: POST
    data_selector: event
- name: webhook_signature
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: webhook_health_status
  endpoint:
    path: /api/v2/webhook/{webhook_id}
    method: PUT
    data_selector: null
    params: {}
- name: listCreated
  endpoint:
    path: /webhooks/listCreated
    method: POST
    data_selector: event
    params: {}
- name: listUpdated
  endpoint:
    path: /webhooks/listUpdated
    method: POST
    data_selector: event
    params: {}
- name: listDeleted
  endpoint:
    path: /webhooks/listDeleted
    method: POST
    data_selector: event
    params: {}
- name: spaceCreated
  endpoint:
    path: /webhook/spaceCreated
    method: POST
    data_selector: event
    params: {}
- name: spaceUpdated
  endpoint:
    path: /webhook/spaceUpdated
    method: POST
    data_selector: event
    params: {}
- name: spaceDeleted
  endpoint:
    path: /webhook/spaceDeleted
    method: POST
    data_selector: event
    params: {}
- name: folderCreated
  endpoint:
    path: /webhook/folderCreated
    method: POST
    data_selector: folder_id
- name: folderUpdated
  endpoint:
    path: /webhook/folderUpdated
    method: POST
    data_selector: folder_id
- name: folderDeleted
  endpoint:
    path: /webhook/folderDeleted
    method: POST
    data_selector: folder_id
- name: taskTagUpdated
  endpoint:
    path: /webhooks/taskTagUpdated
    method: POST
    data_selector: event
    params: {}
- name: taskUpdated
  endpoint:
    path: /webhooks/taskUpdated
    method: POST
    data_selector: event
    params: {}
- name: taskMoved
  endpoint:
    path: /webhooks/taskMoved
    method: POST
    data_selector: event
    params: {}
- name: taskCommentPosted
  endpoint:
    path: /webhooks/taskCommentPosted
    method: POST
    data_selector: event
    params: {}
- name: taskCommentUpdated
  endpoint:
    path: /webhooks/taskCommentUpdated
    method: POST
    data_selector: event
    params: {}
- name: taskTimeEstimateUpdated
  endpoint:
    path: /webhooks/taskTimeEstimateUpdated
    method: POST
    data_selector: event
    params: {}
- name: taskTimeTrackedUpdated
  endpoint:
    path: /webhooks/taskTimeTrackedUpdated
    method: POST
    data_selector: event
    params: {}
- name: taskUpdated
  endpoint:
    path: /webhook/taskUpdated
    method: POST
    data_selector: history_items
    params: {}
- name: automationCreated
  endpoint:
    path: /automation/webhook
    method: POST
    data_selector: payload
- name: taskCreated
  endpoint:
    path: /api/taskCreated
    method: POST
    data_selector: history_items
    params: {}
- name: taskUpdated
  endpoint:
    path: /api/taskUpdated
    method: POST
    data_selector: history_items
    params: {}
- name: taskDeleted
  endpoint:
    path: /api/taskDeleted
    method: POST
    data_selector: task_id
    params: {}
- name: taskStatusUpdated
  endpoint:
    path: /api/taskStatusUpdated
    method: POST
    data_selector: history_items
    params: {}
- name: taskPriorityUpdated
  endpoint:
    path: /api/taskPriorityUpdated
    method: POST
    data_selector: history_items
    params: {}
- name: taskAssigneeUpdated
  endpoint:
    path: /api/taskAssigneeUpdated
    method: POST
    data_selector: history_items
    params: {}
- name: taskDueDateUpdated
  endpoint:
    path: /api/taskDueDateUpdated
    method: POST
    data_selector: history_items
    params: {}
- name: goalCreated
  endpoint:
    path: /webhook/goalCreated
    method: POST
    data_selector: event
    params: {}
- name: goalUpdated
  endpoint:
    path: /webhook/goalUpdated
    method: POST
    data_selector: event
    params: {}
- name: goalDeleted
  endpoint:
    path: /webhook/goalDeleted
    method: POST
    data_selector: event
    params: {}
- name: keyResultCreated
  endpoint:
    path: /webhook/keyResultCreated
    method: POST
    data_selector: event
    params: {}
- name: keyResultUpdated
  endpoint:
    path: /webhook/keyResultUpdated
    method: POST
    data_selector: event
    params: {}
- name: keyResultDeleted
  endpoint:
    path: /webhook/keyResultDeleted
    method: POST
    data_selector: event
    params: {}
- name: automationCreated
  endpoint:
    path: /automation/webhook/legacy
    method: POST
    data_selector: payload
    params: {}
- name: taskTagUpdated
  endpoint:
    path: /taskTagUpdated
    method: POST
    data_selector: history_items
    params: {}
- name: taskUpdated
  endpoint:
    path: /taskUpdated
    method: POST
    data_selector: history_items
    params: {}
- name: taskMoved
  endpoint:
    path: /taskMoved
    method: POST
    data_selector: history_items
    params: {}
- name: taskCommentPosted
  endpoint:
    path: /taskCommentPosted
    method: POST
    data_selector: history_items
    params: {}
- name: taskCommentUpdated
  endpoint:
    path: /taskCommentUpdated
    method: POST
    data_selector: history_items
    params: {}
- name: taskTimeEstimateUpdated
  endpoint:
    path: /taskTimeEstimateUpdated
    method: POST
    data_selector: history_items
    params: {}
- name: taskTimeTrackedUpdated
  endpoint:
    path: /taskTimeTrackedUpdated
    method: POST
    data_selector: history_items
    params: {}
- name: task_updated
  endpoint:
    path: /webhooks/taskUpdated
    method: POST
    data_selector: history_items
    params: {}
- name: goal
  endpoint:
    path: /webhook/goal
    method: POST
    data_selector: goal
    params: {}
- name: key_result
  endpoint:
    path: /webhook/keyResult
    method: POST
    data_selector: keyResult
    params: {}
- name: automation_created_payload
  endpoint:
    path: /automation/webhook/legacy
    method: POST
    data_selector: payload
- name: authorized_workspaces
  endpoint:
    path: /team
    method: GET
    data_selector: workspaces
- name: custom_fields
  endpoint:
    path: /api/v2/list/{list_id}/field
    method: GET
- name: custom_task_types
  endpoint:
    path: /list//field
    method: GET
- name: workspace_audit_logs
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/auditlogs
    method: POST
- name: authorized_user
  endpoint:
    path: /api/v2/user
    method: GET
- name: task_attachment
  endpoint:
    path: /api/v2/task/{task_id}/attachment
    method: POST
- name: authorized_workspaces
  endpoint:
    path: /api/v2/team
    method: GET
    data_selector: workspaces
- name: custom_fields
  endpoint:
    path: /list/{list_id}/field
    method: GET
    data_selector: fields
- name: task_comments
  endpoint:
    path: /task/{task_id}/comment
    method: GET
    data_selector: comments
    params: {}
- name: task_comment
  endpoint:
    path: /api/v2/task/{task_id}/comment
    method: POST
- name: Custom Task Types
  endpoint:
    path: /custom-task-types
    method: GET
- name: Folder Custom Fields
  endpoint:
    path: /folder/availablefields
    method: GET
- name: chat_view_comments
  endpoint:
    path: /api/v2/view/{view_id}/comment
    method: GET
    data_selector: comments
    params:
      start: start
      start_id: start_id
- name: workspace_audit_logs
  endpoint:
    path: /workspaces/{workspace_id}/auditlogs
    method: POST
- name: create_chat_view_comment
  endpoint:
    path: /view/{view_id}/comment
    method: POST
- name: get_authorized_user
  endpoint:
    path: /api/v2/user
    method: GET
- name: list_comments
  endpoint:
    path: /list/{list_id}/comment
    method: GET
    data_selector: comments
    params:
      start: date
      start_id: comment_id
- name: task_attachment
  endpoint:
    path: /api/v2/task/{task_id}/attachment
    method: POST
- name: comments
  endpoint:
    path: /list//comment
    method: GET
- name: task_comments
  endpoint:
    path: /api/v2/task/{task_id}/comment
    method: GET
    data_selector: comments
    params:
      incremental: start_id
- name: list_comment
  endpoint:
    path: /list/{list_id}/comment
    method: POST
- name: update_comment
  endpoint:
    path: /comment/{comment_id}
    method: PUT
- name: task_comment
  endpoint:
    path: /task/{task_id}/comment
    method: POST
- name: comment
  endpoint:
    path: /comment/{comment_id}
    method: DELETE
- name: chat_view_comments
  endpoint:
    path: /view/{view_id}/comment
    method: GET
    params:
      start: ''
      start_id: ''
- name: threaded_comments
  endpoint:
    path: /comment/{comment_id}/reply
    method: GET
- name: comment
  endpoint:
    path: /comment//reply
    method: GET
- name: chat_view_comment
  endpoint:
    path: /view/{view_id}/comment
    method: POST
- name: create_threaded_comment
  endpoint:
    path: /comment/{comment_id}/reply
    method: POST
- name: list_comments
  endpoint:
    path: /list/{list_id}/comment
    method: GET
    data_selector: comments
    params:
      start: ''
      start_id: ''
- name: custom_task_types
  endpoint:
    path: /api/v2/team/{team_id}/custom_item
    method: GET
    data_selector: custom_item
- name: list_comment
  endpoint:
    path: /list//comment
    method: GET
- name: chat_view_comment
  endpoint:
    path: /chat/view/comment
    method: GET
- name: folder_custom_fields
  endpoint:
    path: /api/v2/folder/{folder_id}/field
    method: GET
- name: space_custom_fields
  endpoint:
    path: /space/{space_id}/field
    method: GET
- name: list_comment
  endpoint:
    path: /list/{list_id}/comment
    method: POST
- name: workspace_custom_fields
  endpoint:
    path: /team/{team_id}/field
    method: GET
    data_selector: fields
- name: update_comment
  endpoint:
    path: /api/v2/comment/{comment_id}
    method: PUT
- name: set_custom_field_value
  endpoint:
    path: /api/v2/task/{task_id}/field/{field_id}
    method: POST
- name: comment
  endpoint:
    path: /comment/{comment_id}
    method: DELETE
- name: remove_custom_field_value
  endpoint:
    path: /api/v2/task/{task_id}/field/{field_id}
    method: DELETE
- name: docs
  endpoint:
    path: /workspaces/{workspaceId}/docs
    method: GET
- name: threaded_comments
  endpoint:
    path: /comment/{comment_id}/reply
    method: GET
- name: create_doc
  endpoint:
    path: /api/v3/workspaces/{workspaceId}/docs
    method: POST
- name: comment
  endpoint:
    path: /comment//reply
    method: GET
- name: threaded_comment
  endpoint:
    path: /comment/{comment_id}/reply
    method: POST
- name: docs
  endpoint:
    path: /workspaces/workspaceId/docs
    method: POST
    data_selector: id
    params: {}
- name: custom_task_types
  endpoint:
    path: /api/v2/team/{team_id}/custom_item
    method: GET
- name: docs
  endpoint:
    path: /workspaces/{workspaceId}/docs/{docId}
    method: GET
- name: folder_custom_fields
  endpoint:
    path: /folder/{folder_id}/field
    method: GET
- name: docs
  endpoint:
    path: /workspaces/workspaceId/docs/docId
    method: GET
    data_selector: object
    params: {}
- name: space_custom_fields
  endpoint:
    path: /space/{space_id}/field
    method: GET
- name: doc_page_listing
  endpoint:
    path: /api/v3/workspaces/{workspaceId}/docs/{docId}/pageListing
    method: GET
- name: workspace_custom_fields
  endpoint:
    path: /api/v2/team/{team_id}/field
    method: GET
- name: doc_pages
  endpoint:
    path: /workspaces/{workspaceId}/docs/{docId}/pages
    method: GET
- name: set_custom_field_value
  endpoint:
    path: /api/v2/task/{task_id}/field/{field_id}
    method: POST
- name: create_page
  endpoint:
    path: /api/v3/workspaces/{workspaceId}/docs/{docId}/pages
    method: POST
- name: remove_custom_field_value
  endpoint:
    path: /api/v2/task/{task_id}/field/{field_id}
    method: DELETE
- name: doc_pages
  endpoint:
    path: /workspaces/workspaceId/docs/docId/pages
    method: POST
- name: docs
  endpoint:
    path: /workspaces/{workspaceId}/docs
    method: GET
- name: get_page
  endpoint:
    path: /workspaces/{workspaceId}/docs/{docId}/pages/{pageId}
    method: GET
    params:
      content_format: text/md
- name: docs
  endpoint:
    path: /workspaces/workspaceId/docs/docId/pages/pageId
    method: GET
    data_selector: object
- name: create_doc
  endpoint:
    path: /api/v3/workspaces/{workspaceId}/docs
    method: POST
- name: docs
  endpoint:
    path: /workspaces/workspaceId/docs
    method: POST
    data_selector: data
    params: {}
- name: edit_page
  endpoint:
    path: /api/v3/workspaces/{workspaceId}/docs/{docId}/pages/{pageId}
    method: PUT
- name: doc
  endpoint:
    path: /workspaces/{workspaceId}/docs/{docId}
    method: GET
- name: edit_page
  endpoint:
    path: /workspaces/workspaceId/docs/docId/pages/pageId
    method: PUT
    data_selector: object
    params: {}
- name: doc
  endpoint:
    path: /workspaces/workspaceId/docs/docId
    method: GET
    data_selector: object
    params: {}
- name: folders
  endpoint:
    path: /space/{space_id}/folder
    method: GET
    data_selector: folders
    params:
      archived: false
- name: folders
  endpoint:
    path: /space//folder
    method: GET
- name: folders_list
  endpoint:
    path: /folders
    method: GET
- name: doc_page_listing
  endpoint:
    path: /workspaces/{workspaceId}/docs/{docId}/pageListing
    method: GET
- name: folders
  endpoint:
    path: /space/{space_id}/folder
    method: POST
- name: doc_pages
  endpoint:
    path: /api/v3/workspaces/{workspaceId}/docs/{docId}/pages
    method: GET
- name: folders
  endpoint:
    path: /space//folder
    method: POST
- name: get_folders
  endpoint:
    path: /folders
    method: GET
- name: create_page
  endpoint:
    path: /workspaces/{workspaceId}/docs/{docId}/pages
    method: POST
- name: folder
  endpoint:
    path: /folder/{folder_id}
    method: GET
- name: Get Doc pages
  endpoint:
    path: /workspaces/workspaceId/docs/docId/pages
    method: POST
    data_selector: object
    params: {}
- name: folder
  endpoint:
    path: /folder/{folder_id}
    method: PUT
- name: get_page
  endpoint:
    path: /workspaces/{workspaceId}/docs/{docId}/pages/{pageId}
    method: GET
    data_selector: responses
    params:
      content_format: text/md
- name: folder
  endpoint:
    path: /folder/{folder_id}
    method: DELETE
- name: docs
  endpoint:
    path: /workspaces/workspaceId/docs/docId/pages/pageId
    method: GET
- name: folder
  endpoint:
    path: /folder
    method: DELETE
- name: folders
  endpoint:
    path: /folders
    method: GET
- name: edit_page
  endpoint:
    path: /workspaces/{workspaceId}/docs/{docId}/pages/{pageId}
    method: PUT
- name: create_folder_from_template
  endpoint:
    path: /space/{space_id}/folder_template/{template_id}
    method: POST
- name: edit_page
  endpoint:
    path: /workspaces/workspaceId/docs/docId/pages/pageId
    method: PUT
    data_selector: content_edit_mode
    params: {}
- name: folders
  endpoint:
    path: /space/{space_id}/folder
    method: GET
    params: {}
- name: goals
  endpoint:
    path: /team/{team_id}/goal
    method: GET
- name: folders
  endpoint:
    path: /space//folder
    method: GET
- name: goal
  endpoint:
    path: /team/{team_id}/goal
    method: POST
- name: folder
  endpoint:
    path: /space/{space_id}/folder
    method: POST
- name: goal
  endpoint:
    path: /goal/{goal_id}
    method: GET
- name: folders
  endpoint:
    path: /space//folder
    method: POST
- name: spaces
  endpoint:
    path: /spaces
    method: GET
- name: goal
  endpoint:
    path: /goal/{goal_id}
    method: PUT
- name: folder
  endpoint:
    path: /folder/{folder_id}
    method: GET
- name: goal
  endpoint:
    path: /goal/{goal_id}
    method: DELETE
- name: goal
  endpoint:
    path: /goal
    method: DELETE
- name: folder
  endpoint:
    path: /api/v2/folder/{folder_id}
    method: PUT
- name: folder
  endpoint:
    path: /folder/{folder_id}
    method: DELETE
- name: key_result
  endpoint:
    path: /goal/{goal_id}/key_result
    method: POST
- name: folder
  endpoint:
    path: /folder/
    method: DELETE
- name: key_result
  endpoint:
    path: /api/v2/key_result/{key_result_id}
    method: PUT
- name: create_folder_from_template
  endpoint:
    path: /space/{space_id}/folder_template/{template_id}
    method: POST
- name: key_result
  endpoint:
    path: /key_result/{key_result_id}
    method: DELETE
- name: key_result
  endpoint:
    path: /key_result
    method: DELETE
- name: goals
  endpoint:
    path: /team/{team_id}/goal
    method: GET
- name: invite_guest
  endpoint:
    path: /api/v2/team/{team_id}/guest
    method: POST
- name: goal
  endpoint:
    path: /team/{team_id}/goal
    method: POST
- name: team
  endpoint:
    path: /team
    method: GET
    data_selector: object
    params: {}
- name: goal
  endpoint:
    path: /goal/{goal_id}
    method: GET
- name: guest
  endpoint:
    path: /team/{team_id}/guest/{guest_id}
    method: GET
- name: goal
  endpoint:
    path: /goal/{goal_id}
    method: PUT
- name: edit_guest_on_workspace
  endpoint:
    path: /api/v2/team/{team_id}/guest/{guest_id}
    method: PUT
- name: goal
  endpoint:
    path: /goal/{goal_id}
    method: DELETE
- name: goal
  endpoint:
    path: /goal
    method: DELETE
- name: remove_guest_from_workspace
  endpoint:
    path: /api/v2/team/{team_id}/guest/{guest_id}
    method: DELETE
- name: key_result
  endpoint:
    path: /goal/{goal_id}/key_result
    method: POST
- name: add_guest_to_task
  endpoint:
    path: /api/v2/task/{task_id}/guest/{guest_id}
    method: POST
- name: remove_guest_from_task
  endpoint:
    path: /task//guest/
    method: POST
- name: key_result
  endpoint:
    path: /key_result/{key_result_id}
    method: PUT
- name: remove_guest_from_task
  endpoint:
    path: /task/{task_id}/guest/{guest_id}
    method: DELETE
- name: key_result
  endpoint:
    path: /key_result/{key_result_id}
    method: DELETE
- name: add_guest_to_list
  endpoint:
    path: /list/{list_id}/guest/{guest_id}
    method: POST
- name: key_result
  endpoint:
    path: /key_result/
    method: DELETE
- name: remove_guest_from_task
  endpoint:
    path: /list//guest/
    method: POST
- name: remove_guest_from_list
  endpoint:
    path: /list//guest/
    method: DELETE
- name: invite_guest_to_workspace
  endpoint:
    path: /team/{team_id}/guest
    method: POST
- name: team
  endpoint:
    path: /team
    method: GET
    data_selector: object
- name: remove_guest_from_list
  endpoint:
    path: /list/{list_id}/guest/{guest_id}
    method: DELETE
- name: guest
  endpoint:
    path: /team/{team_id}/guest/{guest_id}
    method: GET
- name: add_guest_to_folder
  endpoint:
    path: /api/v2/folder/{folder_id}/guest/{guest_id}
    method: POST
- name: remove_guest_from_folder
  endpoint:
    path: /folder/{folder_id}/guest/{guest_id}
    method: DELETE
    params:
      include_shared: 'true'
- name: edit_guest_on_workspace
  endpoint:
    path: /api/v2/team/{team_id}/guest/{guest_id}
    method: PUT
- name: guest
  endpoint:
    path: /folder//guest/
    method: DELETE
- name: remove_guest_from_workspace
  endpoint:
    path: /team/{team_id}/guest/{guest_id}
    method: DELETE
- name: lists
  endpoint:
    path: /folder/{folder_id}/list
    method: GET
- name: add_guest_to_task
  endpoint:
    path: /api/v2/task/{task_id}/guest/{guest_id}
    method: POST
    params: {}
- name: list
  endpoint:
    path: /folder/{folder_id}/list
    method: POST
- name: remove_guest_from_task
  endpoint:
    path: /task//guest/
    method: POST
- name: folderless_lists
  endpoint:
    path: /space/{space_id}/list
    method: GET
- name: remove_guest_from_task
  endpoint:
    path: /api/v2/task/{task_id}/guest/{guest_id}
    method: DELETE
- name: folderless_list
  endpoint:
    path: /space/{space_id}/list
    method: POST
- name: add_guest_to_list
  endpoint:
    path: /list/{list_id}/guest/{guest_id}
    method: POST
- name: list
  endpoint:
    path: /list/{list_id}
    method: GET
- name: guest
  endpoint:
    path: /list//guest
    method: POST
- name: list
  endpoint:
    path: /list/{list_id}
    method: PUT
- name: remove_guest_from_list
  endpoint:
    path: /api/v2/list/{list_id}/guest/{guest_id}
    method: DELETE
- name: Delete List
  endpoint:
    path: /list/{list_id}
    method: DELETE
- name: add_guest_to_folder
  endpoint:
    path: /folder/{folder_id}/guest/{guest_id}
    method: POST
- name: add_task_to_list
  endpoint:
    path: /list/{list_id}/task/{task_id}
    method: POST
- name: remove_guest_from_folder
  endpoint:
    path: /api/v2/folder/{folder_id}/guest/{guest_id}
    method: DELETE
    params:
      include_shared: 'true'
- name: folder_guest
  endpoint:
    path: /folder//guest
    method: DELETE
    data_selector: object
    params: {}
- name: remove_task_from_list
  endpoint:
    path: /api/v2/list/{list_id}/task/{task_id}
    method: DELETE
- name: lists
  endpoint:
    path: /folder/{folder_id}/list
    method: GET
- name: create_list_from_template
  endpoint:
    path: /folder/{folder_id}/list_template/{template_id}
    method: POST
- name: lists
  endpoint:
    path: /folder/{folder_id}/list
    method: POST
- name: Create List From Template in Space
  endpoint:
    path: /space/{space_id}/list_template/{template_id}
    method: POST
- name: folderless_lists
  endpoint:
    path: /space/{space_id}/list
    method: GET
- name: task_members
  endpoint:
    path: /task/{task_id}/member
    method: GET
- name: folderless_list
  endpoint:
    path: /space/{space_id}/list
    method: POST
- name: list_members
  endpoint:
    path: /list/{list_id}/member
    method: GET
- name: list
  endpoint:
    path: /list/{list_id}
    method: GET
- name: update_privacy_access
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/{object_type}/{object_id}/acls
    method: PATCH
    data_selector: entries
- name: update_list
  endpoint:
    path: /list/{list_id}
    method: PUT
- name: members
  endpoint:
    path: /workspaces/workspace_id/object_type/object_id/acls
    method: PATCH
- name: delete_list
  endpoint:
    path: /list/{list_id}
    method: DELETE
- name: custom_roles
  endpoint:
    path: /team/{team_id}/customroles
    method: GET
- name: add_task_to_list
  endpoint:
    path: /list/{list_id}/task/{task_id}
    method: POST
- name: shared_hierarchy
  endpoint:
    path: /api/v2/team/{team_id}/shared
    method: GET
- name: remove_task_from_list
  endpoint:
    path: /list/{list_id}/task/{task_id}
    method: DELETE
- name: lists
  endpoint:
    path: /team//shared
    method: GET
- name: spaces
  endpoint:
    path: /team/{team_id}/space
    method: GET
- name: create_list_from_template
  endpoint:
    path: /folder/{folder_id}/list_template/{template_id}
    method: POST
- name: spaces
  endpoint:
    path: /team//space
    method: GET
- name: create_list_from_template_in_space
  endpoint:
    path: /space/{space_id}/list_template/{template_id}
    method: POST
- name: space
  endpoint:
    path: /team/{team_id}/space
    method: POST
- name: task_members
  endpoint:
    path: /task/{task_id}/member
    method: GET
- name: spaces
  endpoint:
    path: /team//space
    method: POST
    data_selector: object
- name: list_member
  endpoint:
    path: /list/{list_id}/member
    method: GET
- name: space
  endpoint:
    path: /space/{space_id}
    method: GET
- name: Update Space
  endpoint:
    path: /space/{space_id}
    method: PUT
- name: update_privacy_and_access
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/{object_type}/{object_id}/acls
    method: PATCH
- name: space
  endpoint:
    path: /space/
    method: PUT
    data_selector: object
- name: members
  endpoint:
    path: /members
    method: GET
- name: lists
  endpoint:
    path: /lists
    method: GET
- name: Delete Space
  endpoint:
    path: /space/{space_id}
    method: DELETE
- name: space
  endpoint:
    path: /space/
    method: DELETE
- name: custom_roles
  endpoint:
    path: /team/{team_id}/customroles
    method: GET
- name: shared_hierarchy
  endpoint:
    path: /team/{team_id}/shared
    method: GET
- name: space_tags
  endpoint:
    path: /space/{space_id}/tag
    method: GET
    data_selector: ''
- name: lists
  endpoint:
    path: /team//shared
    method: GET
- name: space_tag
  endpoint:
    path: /space//tag
    method: GET
    data_selector: object
- name: spaces
  endpoint:
    path: /api/v2/team/{team_id}/space
    method: GET
- name: space_tag
  endpoint:
    path: /space/{space_id}/tag
    method: POST
- name: spaces
  endpoint:
    path: /spaces
    method: GET
- name: teams
  endpoint:
    path: /team
    method: GET
- name: space_tags
  endpoint:
    path: /space//tag
    method: POST
- name: create_space
  endpoint:
    path: /api/v2/team/{team_id}/space
    method: POST
- name: edit_space_tag
  endpoint:
    path: /space/{space_id}/tag/{tag_name}
    method: PUT
- name: spaces
  endpoint:
    path: /spaces
    method: GET
- name: space_tag
  endpoint:
    path: /space//tag/
    method: PUT
- name: Delete Space Tag
  endpoint:
    path: /space/{space_id}/tag/{tag_name}
    method: DELETE
- name: space
  endpoint:
    path: /space/{space_id}
    method: GET
- name: space_tag
  endpoint:
    path: /space//tag/
    method: DELETE
- name: Update Space
  endpoint:
    path: /space/{space_id}
    method: PUT
- name: space
  endpoint:
    path: /space/
    method: PUT
    data_selector: object
- name: add_tag_to_task
  endpoint:
    path: /api/v2/task/{task_id}/tag/{tag_name}
    method: POST
- name: space
  endpoint:
    path: /space/{space_id}
    method: DELETE
- name: space
  endpoint:
    path: /space/
    method: DELETE
- name: remove_tag_from_task
  endpoint:
    path: /api/v2/task/{task_id}/tag/{tag_name}
    method: DELETE
- name: space_tags
  endpoint:
    path: /space/{space_id}/tag
    method: GET
- name: space_tag
  endpoint:
    path: /space//tag
    method: GET
    data_selector: tags
- name: tasks
  endpoint:
    path: /list/{list_id}/task
    method: GET
    data_selector: tasks
    params:
      archived: false
      include_markdown_description: false
- name: tasks
  endpoint:
    path: /list//task
    method: GET
- name: create_space_tag
  endpoint:
    path: /space/{space_id}/tag
    method: POST
- name: task
  endpoint:
    path: /list/{list_id}/task
    method: POST
- name: space_tag
  endpoint:
    path: /space//tag
    method: POST
- name: get_space_tags
  endpoint:
    path: /space/tags
    method: GET
- name: Edit Space Tag
  endpoint:
    path: /space/{space_id}/tag/{tag_name}
    method: PUT
    data_selector: null
    params: {}
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
- name: task
  endpoint:
    path: /task
    method: GET
    data_selector: task
- name: custom task types
  endpoint:
    path: /custom-task-types
    method: GET
    data_selector: custom_task_types
- name: space_tag
  endpoint:
    path: /space//tag/
    method: PUT
- name: task
  endpoint:
    path: /task/{task_id}
    method: GET
    data_selector: task
    params: {}
- name: Delete Space Tag
  endpoint:
    path: /space/{space_id}/tag/{tag_name}
    method: DELETE
- name: task
  endpoint:
    path: /task/
    method: GET
- name: update_task
  endpoint:
    path: /task/{task_id}
    method: PUT
- name: task
  endpoint:
    path: /task/
    method: PUT
- name: add_tag_to_task
  endpoint:
    path: /task/{task_id}/tag/{tag_name}
    method: POST
- name: delete_task
  endpoint:
    path: /task/{task_id}
    method: DELETE
    params:
      custom_task_ids: boolean
      team_id: number
- name: task
  endpoint:
    path: /task/
    method: DELETE
- name: remove_tag_from_task
  endpoint:
    path: /api/v2/task/{task_id}/tag/{tag_name}
    method: DELETE
    params:
      custom_task_ids: boolean
      team_id: number
- name: filtered_team_tasks
  endpoint:
    path: /team/{team_Id}/task
    method: GET
    params: {}
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
- name: tasks
  endpoint:
    path: /team//task
    method: GET
    data_selector: tasks
- name: tasks
  endpoint:
    path: /tasks
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: tasks
  endpoint:
    path: /list/{list_id}/task
    method: GET
    data_selector: tasks
    params:
      archived: false
- name: tasks
  endpoint:
    path: /list//task
    method: GET
    data_selector: tasks
- name: merge_tasks
  endpoint:
    path: /task/{task_id}/merge
    method: POST
    data_selector: null
    params: {}
- name: create_task
  endpoint:
    path: /api/v2/list/{list_id}/task
    method: POST
- name: task_time_in_status
  endpoint:
    path: /task/{task_id}/time_in_status
    method: GET
    data_selector: response
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
- name: task_time_in_status
  endpoint:
    path: /task//time_in_status
    method: GET
- name: task
  endpoint:
    path: /task/{task_id}
    method: GET
    data_selector: attachments
    params:
      custom_task_ids: 'true'
      team_id: number
      include_subtasks: 'false'
      include_markdown_description: 'false'
      custom_fields: array of strings
- name: bulk_time_in_status
  endpoint:
    path: /api/v2/task/bulk_time_in_status/task_ids
    method: GET
    params:
      task_ids: string
      custom_task_ids: boolean
      team_id: number
- name: task_time_in_status
  endpoint:
    path: /task/bulk_time_in_status/task_ids
    method: GET
- name: task
  endpoint:
    path: /task/
    method: GET
    data_selector: records
- name: create_task_from_template
  endpoint:
    path: /list/{list_id}/taskTemplate/{template_id}
    method: POST
- name: update_task
  endpoint:
    path: /api/v2/task/{task_id}
    method: PUT
- name: bulk_tasks_time_in_status
  endpoint:
    path: /list//taskTemplate/
    method: POST
- name: task
  endpoint:
    path: /task
    method: PUT
- name: delete_task
  endpoint:
    path: /api/v2/task/{task_id}
    method: DELETE
    params:
      custom_task_ids: boolean
      team_id: number
- name: checklist
  endpoint:
    path: /task/{task_id}/checklist
    method: POST
    data_selector: response
- name: task
  endpoint:
    path: /task/
    method: DELETE
- name: task_checklist
  endpoint:
    path: /task//checklist
    method: POST
    data_selector: object
    params: {}
- name: filtered_team_tasks
  endpoint:
    path: /team/{team_Id}/task
    method: GET
    params: {}
- name: checklist
  endpoint:
    path: /api/v2/checklist/{checklist_id}
    method: PUT
- name: tasks
  endpoint:
    path: /team//task
    method: GET
- name: checklist
  endpoint:
    path: /checklist/
    method: PUT
- name: checklist
  endpoint:
    path: /checklist/{checklist_id}
    method: DELETE
- name: tasks
  endpoint:
    path: /tasks
    method: GET
- name: goals
  endpoint:
    path: /goals
    method: GET
- name: spaces
  endpoint:
    path: /spaces
    method: GET
- name: checklist
  endpoint:
    path: /checklist/
    method: DELETE
- name: merge_tasks
  endpoint:
    path: /api/v2/task/{task_id}/merge
    method: POST
    data_selector: Tasks merged successfully
    params: {}
- name: task_time_in_status
  endpoint:
    path: /task/{task_id}/time_in_status
    method: GET
    data_selector: ''
- name: Get Bulk Tasks' Time in Status
  endpoint:
    path: /task//time_in_status
    method: GET
- name: bulk_tasks_time_in_status
  endpoint:
    path: /api/v2/task/bulk_time_in_status/task_ids
    method: GET
    params:
      task_ids: required
      custom_task_ids: boolean
      team_id: number
- name: task_time_in_status
  endpoint:
    path: /task/bulk_time_in_status/task_ids
    method: GET
- name: Create Task From Template
  endpoint:
    path: /list/{list_id}/taskTemplate/{template_id}
    method: POST
- name: checklist
  endpoint:
    path: /task/{task_id}/checklist
    method: POST
- name: checklist
  endpoint:
    path: /task//checklist
    method: POST
    data_selector: object
- name: checklist
  endpoint:
    path: /checklist/{checklist_id}
    method: PUT
- name: checklist
  endpoint:
    path: /checklist/
    method: PUT
- name: checklist_item
  endpoint:
    path: /checklist/{checklist_id}/checklist_item
    method: POST
- name: checklist
  endpoint:
    path: /checklist/{checklist_id}
    method: DELETE
- name: checklist_item
  endpoint:
    path: /checklist//checklist_item
    method: POST
- name: checklist
  endpoint:
    path: /checklist/
    method: DELETE
- name: checklist_item
  endpoint:
    path: /checklist/{checklist_id}/checklist_item/{checklist_item_id}
    method: PUT
- name: checklist_item
  endpoint:
    path: /checklist/{checklist_id}/checklist_item
    method: POST
- name: checklist_item
  endpoint:
    path: /checklist//checklist_item/
    method: PUT
- name: checklist_item
  endpoint:
    path: /checklist//checklist_item
    method: POST
- name: delete_checklist_item
  endpoint:
    path: /api/v2/checklist/{checklist_id}/checklist_item/{checklist_item_id}
    method: DELETE
- name: edit_checklist_item
  endpoint:
    path: /checklist/{checklist_id}/checklist_item/{checklist_item_id}
    method: PUT
- name: checklist_item
  endpoint:
    path: /checklist//checklist_item
    method: DELETE
- name: checklist_item
  endpoint:
    path: /checklist//checklist_item/
    method: PUT
- name: add_dependency
  endpoint:
    path: /api/v2/task/{task_id}/dependency
    method: POST
- name: delete_checklist_item
  endpoint:
    path: /checklist/{checklist_id}/checklist_item/{checklist_item_id}
    method: DELETE
- name: checklist_item
  endpoint:
    path: /checklist//checklist_item/
    method: DELETE
- name: delete_dependency
  endpoint:
    path: /api/v2/task/{task_id}/dependency
    method: DELETE
    params:
      depends_on: ''
      dependency_of: ''
      custom_task_ids: true
      team_id: ''
- name: add_dependency
  endpoint:
    path: /task/{task_id}/dependency
    method: POST
- name: task_dependency
  endpoint:
    path: /task//dependency
    method: DELETE
- name: task_link
  endpoint:
    path: /task/{task_id}/link/{links_to}
    method: POST
- name: delete_dependency
  endpoint:
    path: /api/v2/task/{task_id}/dependency
    method: DELETE
    params:
      depends_on: string
      dependency_of: string
      custom_task_ids: boolean
      team_id: number
- name: delete_task_link
  endpoint:
    path: /api/v2/task/{task_id}/link/{links_to}
    method: DELETE
    data_selector: null
    params: {}
- name: task_dependency
  endpoint:
    path: /task//dependency
    method: DELETE
    data_selector: object
- name: task
  endpoint:
    path: /task
    method: GET
- name: add_task_link
  endpoint:
    path: /task/{task_id}/link/{links_to}
    method: POST
- name: task_template
  endpoint:
    path: /team/{team_id}/taskTemplate
    method: GET
- name: delete_task_link
  endpoint:
    path: /api/v2/task/{task_id}/link/{links_to}
    method: DELETE
- name: taskTemplate
  endpoint:
    path: /team//taskTemplate
    method: GET
- name: task
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
- name: workspace_seats
  endpoint:
    path: /api/v2/team/{team_id}/seats
    method: GET
- name: task_template
  endpoint:
    path: /team/{team_id}/taskTemplate
    method: GET
    data_selector: response
    params:
      page: ''
- name: workspace_seats
  endpoint:
    path: /team//seats
    method: GET
- name: taskTemplate
  endpoint:
    path: /team//taskTemplate
    method: GET
- name: Workspace Plan
  endpoint:
    path: /getworkspaceplan
    method: GET
- name: workspace_seats
  endpoint:
    path: /api/v2/team/{team_id}/seats
    method: GET
- name: workspace_plan
  endpoint:
    path: /team/{team_id}/plan
    method: GET
- name: workspace_seats
  endpoint:
    path: /team//seats
    method: GET
- name: create_group
  endpoint:
    path: /api/v2/team/{team_id}/group
    method: POST
- name: workspace_plan
  endpoint:
    path: /getworkspaceplan
    method: GET
- name: team
  endpoint:
    path: /team
    method: GET
- name: workspace_plan
  endpoint:
    path: /team/{team_id}/plan
    method: GET
- name: update_group
  endpoint:
    path: /api/v2/group/{group_id}
    method: PUT
- name: user_group
  endpoint:
    path: /team/{team_id}/group
    method: POST
- name: group
  endpoint:
    path: /group/
    method: PUT
- name: team
  endpoint:
    path: /team
    method: POST
- name: delete_group
  endpoint:
    path: /group/{group_id}
    method: DELETE
- name: update_group
  endpoint:
    path: /group/{group_id}
    method: PUT
- name: groups
  endpoint:
    path: /group/
    method: DELETE
- name: groups
  endpoint:
    path: /group
    method: GET
    params:
      team_id: number
      group_ids: string
- name: group
  endpoint:
    path: /group/
    method: PUT
- name: groups
  endpoint:
    path: /group
    method: GET
- name: delete_group
  endpoint:
    path: /api/v2/group/{group_id}
    method: DELETE
    data_selector: ''
- name: time_entries
  endpoint:
    path: /team/{team_Id}/time_entries
    method: GET
    data_selector: time_entries
    params: {}
- name: groups
  endpoint:
    path: /group/
    method: DELETE
- name: time_entries
  endpoint:
    path: /team//time_entries
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /group
    method: GET
    params:
      team_id: number
      group_ids: string
- name: time_entry
  endpoint:
    path: /team/{team_Id}/time_entries
    method: POST
- name: group
  endpoint:
    path: /group
    method: GET
    data_selector: groups
- name: time_entry
  endpoint:
    path: /api/v2/team/{team_id}/time_entries/{timer_id}
    method: GET
    data_selector: ''
- name: time_entries
  endpoint:
    path: /team//time_entries/
    method: GET
- name: time_entries
  endpoint:
    path: /team/{team_Id}/time_entries
    method: GET
    data_selector: time_entries
    params:
      start_date: number
      end_date: number
      assignee: number
      include_task_tags: boolean
      include_location_names: boolean
      include_approval_history: boolean
      include_approval_details: boolean
      space_id: number
      folder_id: number
      list_id: number
      task_id: string
      custom_task_ids: boolean
      team_id: number
      is_billable: boolean
- name: delete_time_entry
  endpoint:
    path: /team/{team_id}/time_entries/{timer_id}
    method: DELETE
- name: time_entries
  endpoint:
    path: /team//time_entries
    method: GET
- name: time_entry
  endpoint:
    path: /api/v2/team/{team_id}/time_entries/{timer_id}
    method: PUT
- name: time_entry
  endpoint:
    path: /api/v2/team/{team_Id}/time_entries
    method: POST
- name: time_entry_history
  endpoint:
    path: /api/v2/team/{team_id}/time_entries/{timer_id}/history
    method: GET
    data_selector: changes
- name: time_entry
  endpoint:
    path: /team/{team_id}/time_entries/{timer_id}
    method: GET
    data_selector: ''
- name: time_entries_history
  endpoint:
    path: /team//time_entries//history
    method: GET
- name: time_entries
  endpoint:
    path: /team//time_entries/
    method: GET
- name: running_time_entry
  endpoint:
    path: /api/v2/team/{team_id}/time_entries/current
    method: GET
    data_selector: ''
- name: time_entry
  endpoint:
    path: /api/v2/team/{team_id}/time_entries/{timer_id}
    method: DELETE
- name: time_entries
  endpoint:
    path: /team//time_entries/current
    method: GET
- name: time_entry_history
  endpoint:
    path: /time_entry_history
    method: GET
- name: time_entry
  endpoint:
    path: /api/v2/team/{team_id}/time_entries/{timer_id}
    method: PUT
- name: remove_tags_from_time_entries
  endpoint:
    path: /team/{team_id}/time_entries/tags
    method: DELETE
- name: time_entry_history
  endpoint:
    path: /team/{team_id}/time_entries/{timer_id}/history
    method: GET
    data_selector: ''
- name: time_entries_tags
  endpoint:
    path: /team/{team_id}/time_entries/tags
    method: GET
    data_selector: tags
- name: time_entry_history
  endpoint:
    path: /team//time_entries//history
    method: GET
- name: time_entries_tags
  endpoint:
    path: /team//time_entries/tags
    method: GET
- name: running_time_entry
  endpoint:
    path: /team/{team_id}/time_entries/current
    method: GET
- name: add_tags_from_time_entries
  endpoint:
    path: /team/{team_id}/time_entries/tags
    method: POST
- name: time_entries
  endpoint:
    path: /team//time_entries/current
    method: GET
    data_selector: data
- name: tags
  endpoint:
    path: /team//time_entries/tags
    method: POST
- name: remove_tags_from_time_entries
  endpoint:
    path: /team/{team_id}/time_entries/tags
    method: DELETE
    data_selector: null
    params: {}
- name: change_tag_names
  endpoint:
    path: /team/{team_id}/time_entries/tags
    method: PUT
- name: time_entries_tags
  endpoint:
    path: /api/v2/team/{team_id}/time_entries/tags
    method: GET
    data_selector: null
    params: {}
- name: start_time_entry
  endpoint:
    path: /team/{team_Id}/time_entries/start
    method: POST
    params:
      custom_task_ids: 'true'
      team_id: number
- name: time_entries_tags
  endpoint:
    path: /team//time_entries/tags
    method: GET
- name: time_entries
  endpoint:
    path: /team//time_entries/start
    method: POST
- name: add_tags_from_time_entries
  endpoint:
    path: /api/v2/team/{team_id}/time_entries/tags
    method: POST
- name: stop_time_entry
  endpoint:
    path: /team/{team_id}/time_entries/stop
    method: POST
- name: tags
  endpoint:
    path: /team//time_entries/tags
    method: POST
- name: time_entries
  endpoint:
    path: /team//time_entries/stop
    method: POST
- name: change_tag_names
  endpoint:
    path: /team/{team_id}/time_entries/tags
    method: PUT
- name: tracked_time
  endpoint:
    path: /task/{task_id}/time
    method: GET
    data_selector: response
    params:
      custom_task_ids: 'true'
      team_id: number
- name: start_time_entry
  endpoint:
    path: /team/{team_Id}/time_entries/start
    method: POST
- name: time
  endpoint:
    path: /task//time
    method: GET
- name: time_entries
  endpoint:
    path: /team//time_entries/start
    method: POST
- name: stop_time_entry
  endpoint:
    path: /team/{team_id}/time_entries/stop
    method: POST
- name: track_time
  endpoint:
    path: /api/v2/task/{task_id}/time
    method: POST
- name: time_entries
  endpoint:
    path: /team//time_entries/stop
    method: POST
- name: start_time_entry
  endpoint:
    path: /time_entries/start
    method: POST
- name: tracked_time
  endpoint:
    path: /task//time
    method: POST
- name: tracked_time
  endpoint:
    path: /api/v2/task/{task_id}/time
    method: GET
- name: edit_time_tracked
  endpoint:
    path: /task/{task_id}/time/{interval_id}
    method: PUT
- name: time_entries
  endpoint:
    path: /task//time
    method: GET
- name: task
  endpoint:
    path: /task
    method: PUT
- name: time tracked
  endpoint:
    path: /time
    method: DELETE
- name: track_time
  endpoint:
    path: /api/v2/task/{task_id}/time
    method: POST
- name: delete_time_tracked
  endpoint:
    path: /task/{task_id}/time/{interval_id}
    method: DELETE
- name: tracked_time
  endpoint:
    path: /task//time
    method: POST
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: invite_user_to_workspace
  endpoint:
    path: /api/v2/team/{team_id}/user
    method: POST
- name: edit_time_tracked
  endpoint:
    path: /api/v2/task/{task_id}/time/{interval_id}
    method: PUT
- name: time_tracking
  endpoint:
    path: /task//time/
    method: PUT
- name: delete_time_tracked
  endpoint:
    path: /api/v2/task/{task_id}/time/{interval_id}
    method: DELETE
- name: team
  endpoint:
    path: /team//user
    method: POST
    data_selector: null
    params: {}
- name: user
  endpoint:
    path: /api/v2/team/{team_id}/user/{user_id}
    method: GET
    data_selector: user
    params: {}
- name: invite_user
  endpoint:
    path: /api/v2/team/{team_id}/user
    method: POST
- name: user
  endpoint:
    path: /team//user/
    method: GET
    data_selector: object
    params: {}
- name: team
  endpoint:
    path: /team/{team_id}/user
    method: POST
    data_selector: user
    params: {}
- name: edit_user_on_workspace
  endpoint:
    path: /api/v2/team/{team_id}/user/{user_id}
    method: PUT
- name: user
  endpoint:
    path: /team/{team_id}/user/{user_id}
    method: GET
    params: {}
- name: user
  endpoint:
    path: /team//user/
    method: PUT
    data_selector: object
    params: {}
- name: user
  endpoint:
    path: /team//user/
    method: GET
- name: remove_user_from_workspace
  endpoint:
    path: /api/v2/team/{team_id}/user/{user_id}
    method: DELETE
- name: edit_user_on_workspace
  endpoint:
    path: /team/{team_id}/user/{user_id}
    method: PUT
- name: workspace_views
  endpoint:
    path: /team/{team_id}/view
    method: GET
- name: user
  endpoint:
    path: /team//user/
    method: PUT
    data_selector: object
- name: remove_user_from_workspace
  endpoint:
    path: /api/v2/team/{team_id}/user/{user_id}
    method: DELETE
- name: Create Workspace View
  endpoint:
    path: /api/v2/team/{team_id}/view
    method: POST
- name: view
  endpoint:
    path: /api/v2/team/{team_id}/view
    method: GET
- name: Create Workspace View
  endpoint:
    path: /team/{team_id}/view
    method: POST
- name: team_view
  endpoint:
    path: /team/view
    method: POST
    data_selector: data
    params: {}
- name: workspace_views
  endpoint:
    path: /team/views
    method: GET
    data_selector: views
    params: {}
- name: views
  endpoint:
    path: /team/view
    method: POST
    data_selector: object
    params: {}
- name: space_view
  endpoint:
    path: /space/{space_id}/view
    method: GET
- name: space_view
  endpoint:
    path: /space/{space_id}/view
    method: GET
- name: view
  endpoint:
    path: /space//view
    method: GET
- name: views
  endpoint:
    path: /views
    method: GET
    data_selector: views
- name: create_space_view
  endpoint:
    path: /space/{space_id}/view
    method: POST
- name: create_space_view
  endpoint:
    path: /space/{space_id}/view
    method: POST
- name: space_view
  endpoint:
    path: /space//view
    method: POST
    data_selector: grouping
    params: {}
- name: folder_view
  endpoint:
    path: /folder//view
    method: POST
    data_selector: grouping
    params: {}
- name: folder_view
  endpoint:
    path: /folder/{folder_id}/view
    method: GET
- name: space_views
  endpoint:
    path: /space//view
    method: POST
    data_selector: grouping, divide, filters, team_sidebar, settings
- name: folder_views
  endpoint:
    path: /folder//view
    method: POST
    data_selector: grouping, divide, filters, team_sidebar, settings
- name: folder_view
  endpoint:
    path: /folder//view
    method: GET
- name: space_view
  endpoint:
    path: /space/view
    method: POST
- name: workspace_view
  endpoint:
    path: /team/view
    method: POST
- name: folder_views
  endpoint:
    path: /folder/{folder_id}/view
    method: GET
- name: create_folder_view
  endpoint:
    path: /folder/{folder_id}/view
    method: POST
- name: views
  endpoint:
    path: /views
    method: GET
    data_selector: views
- name: folder_views
  endpoint:
    path: /folder//view
    method: POST
    data_selector: grouping
    params: {}
- name: create_folder_view
  endpoint:
    path: /folder/{folder_id}/view
    method: POST
- name: list_views
  endpoint:
    path: /list/{list_id}/view
    method: GET
- name: folder_view
  endpoint:
    path: /folder//view
    method: POST
- name: list_view
  endpoint:
    path: /list//view
    method: POST
- name: views
  endpoint:
    path: /views
    method: GET
- name: create_list_view
  endpoint:
    path: /list/{list_id}/view
    method: POST
- name: list_views
  endpoint:
    path: /list/{list_id}/view
    method: GET
- name: list_view
  endpoint:
    path: /list//view
    method: POST
- name: views
  endpoint:
    path: /list//view
    method: GET
    data_selector: views
- name: view
  endpoint:
    path: /view/{view_id}
    method: GET
- name: create_list_view
  endpoint:
    path: /list/{list_id}/view
    method: POST
- name: list_views
  endpoint:
    path: /list//view
    method: POST
    data_selector: grouping
    params: {}
- name: view
  endpoint:
    path: /view/{view_id}
    method: GET
- name: view
  endpoint:
    path: /view/
    method: GET
    data_selector: object
- name: view
  endpoint:
    path: /view/
    method: GET
    data_selector: object
- name: update_view
  endpoint:
    path: /view/{view_id}
    method: PUT
- name: view
  endpoint:
    path: /view/{view_id}
    method: PUT
- name: view
  endpoint:
    path: /view
    method: GET
    data_selector: object
- name: view
  endpoint:
    path: /view/{view_id}
    method: DELETE
    params: {}
- name: view
  endpoint:
    path: /view/
    method: PUT
- name: view
  endpoint:
    path: /view/
    method: DELETE
- name: view
  endpoint:
    path: /view/{view_id}
    method: DELETE
- name: view_tasks
  endpoint:
    path: /view/{view_id}/task
    method: GET
    data_selector: tasks
- name: view
  endpoint:
    path: /view/
    method: DELETE
- name: tasks
  endpoint:
    path: /view//task
    method: GET
- name: view_tasks
  endpoint:
    path: /view/{view_id}/task
    method: GET
    params:
      page: integer
- name: webhook
  endpoint:
    path: /api/v2/team/{team_id}/webhook
    method: GET
- name: tasks
  endpoint:
    path: /view//task
    method: GET
- name: webhook
  endpoint:
    path: /team//webhook
    method: GET
    data_selector: webhooks
    params: {}
- name: webhook
  endpoint:
    path: /api/v2/team/{team_id}/webhook
    method: POST
- name: webhooks
  endpoint:
    path: /api/v2/team/{team_id}/webhook
    method: GET
- name: webhook
  endpoint:
    path: /team//webhook
    method: POST
- name: get_webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: webhooks
  endpoint:
    path: /team//webhook
    method: GET
    data_selector: webhooks
- name: webhook
  endpoint:
    path: /api/v2/webhook/{webhook_id}
    method: PUT
- name: webhook
  endpoint:
    path: /api/v2/team/{team_id}/webhook
    method: POST
    data_selector: null
    params: {}
- name: webhook
  endpoint:
    path: /webhook
    method: PUT
- name: webhook
  endpoint:
    path: /team//webhook
    method: POST
    data_selector: webhook
    params: {}
- name: webhook
  endpoint:
    path: /api/v2/webhook/{webhook_id}
    method: DELETE
- name: update_webhook
  endpoint:
    path: /api/v2/webhook/{webhook_id}
    method: PUT
    data_selector: ''
- name: webhook
  endpoint:
    path: /webhook/
    method: DELETE
- name: webhook
  endpoint:
    path: /webhook
    method: PUT
    data_selector: object
    params: {}
- name: channels
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels
    method: GET
    data_selector: data
    params:
      limit: 50
      is_follower: false
      include_hidden: false
- name: channels
  endpoint:
    path: /workspaces/workspace_id/chat/channels
    method: GET
    params:
      limit: '50'
      is_follower: 'false'
      include_hidden: 'false'
- name: webhook
  endpoint:
    path: /api/v2/webhook/{webhook_id}
    method: DELETE
- name: webhook
  endpoint:
    path: /webhook/
    method: DELETE
- name: create_channel
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels
    method: POST
- name: channels
  endpoint:
    path: /workspaces/workspace_id/chat/channels
    method: POST
- name: channels
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels
    method: GET
    data_selector: data
    params: {}
- name: create_channel
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels/location
    method: POST
- name: channels
  endpoint:
    path: /workspaces/workspace_id/chat/channels
    method: GET
    params:
      limit: '50'
      is_follower: 'false'
      include_hidden: 'false'
- name: create_direct_message
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels/direct_message
    method: POST
- name: create_channel
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels
    method: POST
- name: channel
  endpoint:
    path: /workspaces/workspace_id/chat/channels/direct_message
    method: POST
- name: channel_by_id
  endpoint:
    path: /chat/channel/{channel_id}
    method: GET
- name: create_channel
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels/location
    method: POST
- name: channel
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels/{channel_id}
    method: GET
    data_selector: data
    params: {}
- name: chat_channel
  endpoint:
    path: /workspaces/workspace_id/chat/channels/channel_id
    method: GET
- name: create_direct_message
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels/direct_message
    method: POST
- name: update_channel
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels/{channel_id}
    method: PATCH
- name: Channel
  endpoint:
    path: /workspaces/workspace_id/chat/channels/direct_message
    method: POST
- name: channel
  endpoint:
    path: /workspaces/workspace_id/chat/channels/channel_id
    method: PATCH
- name: channel
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels/{channel_id}
    method: GET
    data_selector: data
    params: {}
- name: delete_channel
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/chat/channels/{channel_id}
    method: DELETE
- name: channel
  endpoint:
    path: /workspaces/workspace_id/chat/channels/channel_id
    method: DELETE
- name: update_channel
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels/{channel_id}
    method: PATCH
- name: followers
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels/{channel_id}/followers
    method: GET
    data_selector: data
    params:
      limit: 50
- name: channel
  endpoint:
    path: /workspaces/workspace_id/chat/channels/channel_id
    method: PATCH
    data_selector: null
    params: {}
- name: channel_followers
  endpoint:
    path: /workspaces/workspace_id/chat/channels/channel_id/followers
    method: GET
    params:
      limit: '50'
- name: Delete Channel
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/chat/channels/{channel_id}
    method: DELETE
- name: channel_members
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels/{channel_id}/members
    method: GET
- name: channel_messages
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels/{channel_id}/messages
    method: GET
    data_selector: data
    params:
      limit: 50
- name: followers
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels/{channel_id}/followers
    method: GET
    data_selector: data
- name: channel_followers
  endpoint:
    path: /workspaces/workspace_id/chat/channels/channel_id/followers
    method: GET
    params:
      limit: 50
- name: channel_members
  endpoint:
    path: /workspaces/workspace_id/chat/channels/channel_id/messages
    method: GET
    data_selector: messages
    params:
      limit: '50'
      content_format: text/md
- name: channel_members
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/chat/channels/{channel_id}/members
    method: GET
    data_selector: members
- name: send_message
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels/{channel_id}/messages
    method: POST
- name: channel_messages
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels/{channel_id}/messages
    method: GET
    data_selector: data
    params:
      limit: 50
- name: update_message
  endpoint:
    path: /workspaces/{workspace_id}/chat/messages/{message_id}
    method: PATCH
- name: channel_members
  endpoint:
    path: /workspaces/workspace_id/chat/channels/channel_id/messages
    method: GET
    params:
      limit: '50'
      content_format: text/md
- name: send_message
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels/{channel_id}/messages
    method: POST
- name: delete_message
  endpoint:
    path: /workspaces/{workspace_id}/chat/messages/{message_id}
    method: DELETE
- name: update_message
  endpoint:
    path: /workspaces/{workspace_id}/chat/messages/{message_id}
    method: PATCH
- name: reactions_for_message
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/chat/messages/{message_id}/reactions
    method: GET
    data_selector: data
    params:
      limit: 50
- name: messages
  endpoint:
    path: /api/v3/workspaces/workspace_id/chat/messages/message_id
    method: PATCH
    data_selector: content_format
    params: {}
- name: message_reaction
  endpoint:
    path: /workspaces/workspace_id/chat/messages/message_id/reactions
    method: GET
- name: delete_message
  endpoint:
    path: /workspaces/{workspace_id}/chat/messages/{message_id}
    method: DELETE
- name: create_message_reaction
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/chat/messages/{message_id}/reactions
    method: POST
    data_selector: object
    params: {}
- name: reactions
  endpoint:
    path: /workspaces/workspace_id/chat/messages/message_id/reactions
    method: POST
- name: reactions
  endpoint:
    path: /workspaces/{workspace_id}/chat/messages/{message_id}/reactions
    method: GET
    data_selector: data
    params:
      limit: '50'
- name: delete_message_reaction
  endpoint:
    path: /workspaces/{workspace_id}/chat/messages/{message_id}/reactions/{reaction}
    method: DELETE
- name: chat_messages
  endpoint:
    path: /workspaces/workspace_id/chat/messages/message_id/reactions
    method: GET
    data_selector: messages
    params:
      limit: '50'
- name: create_message_reaction
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/chat/messages/{message_id}/reactions
    method: POST
    data_selector: object
    params: {}
- name: replies_to_message
  endpoint:
    path: /workspaces/{workspace_id}/chat/messages/{message_id}/replies
    method: GET
    data_selector: data
    params: {}
- name: reactions
  endpoint:
    path: /workspaces/workspace_id/chat/messages/message_id/reactions
    method: POST
- name: chat_messages
  endpoint:
    path: /workspaces/workspace_id/chat/messages/message_id/replies
    method: GET
    params:
      limit: 50
      content_format: text/md
- name: delete_message_reaction
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/chat/messages/{message_id}/reactions/{reaction}
    method: DELETE
    data_selector: null
    params: {}
- name: create_reply_message
  endpoint:
    path: /workspaces/{workspace_id}/chat/messages/{message_id}/replies
    method: POST
- name: replies_to_message
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/chat/messages/{message_id}/replies
    method: GET
    data_selector: data
    params:
      cursor: cursor
      limit: limit
      content_format: content_format
- name: tagged_users
  endpoint:
    path: /workspaces/{workspace_id}/chat/messages/{message_id}/tagged_users
    method: GET
    data_selector: data
    params:
      limit: 50
- name: messages
  endpoint:
    path: /workspaces/workspace_id/chat/messages/message_id/replies
    method: GET
    params:
      limit: 50
      content_format: text/md
- name: create_reply_message
  endpoint:
    path: /workspaces/{workspace_id}/chat/messages/{message_id}/replies
    method: POST
- name: workspace_audit_logs
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/auditlogs
    method: POST
- name: audit_logs
  endpoint:
    path: /workspaces/workspace_id/auditlogs
    method: POST
- name: tagged_users
  endpoint:
    path: /workspaces/{workspace_id}/chat/messages/{message_id}/tagged_users
    method: GET
    data_selector: data
    params:
      limit: 50
- name: task_attachment
  endpoint:
    path: /api/v2/task/{task_id}/attachment
    method: POST
    data_selector: attachment
- name: workspace_audit_logs
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/auditlogs
    method: POST
- name: audit_logs
  endpoint:
    path: /workspaces/workspace_id/auditlogs
    method: POST
- name: task_comments
  endpoint:
    path: /api/v2/task/{task_id}/comment
    method: GET
    data_selector: comments
    params:
      custom_task_ids: true
- name: task_comment
  endpoint:
    path: /task//comment
    method: GET
    data_selector: comments
- name: custom_task_types
  endpoint:
    path: /team/{team_id}/custom_item
    method: GET
    data_selector: custom_task_types
    params: {}
- name: task_attachment
  endpoint:
    path: /api/v2/task/{task_id}/attachment
    method: POST
    data_selector: attachment
    params:
      custom_task_ids: 'true'
      team_id: number
- name: custom_item
  endpoint:
    path: /team//custom_item
    method: GET
    data_selector: custom_items
- name: task_attachment
  endpoint:
    path: /api/v2/task//attachment
    method: POST
- name: custom_fields
  endpoint:
    path: /list/{list_id}/field
    method: GET
- name: custom_task_types
  endpoint:
    path: /custom-task-types
    method: GET
- name: folder_custom_fields
  endpoint:
    path: /folder/available-fields
    method: GET
- name: task_comments
  endpoint:
    path: /api/v2/task/{task_id}/comment
    method: GET
    params:
      custom_task_ids: 'true'
      team_id: '123'
      start: timestamp
      start_id: comment_id
- name: docs
  endpoint:
    path: /workspaces/{workspaceId}/docs
    method: GET
    params: {}
- name: task_comment
  endpoint:
    path: /task//comment
    method: GET
- name: docs
  endpoint:
    path: /workspaces/workspaceId/docs
    method: GET
    params:
      deleted: 'false'
      archived: 'false'
      limit: 50
- name: custom_task_types
  endpoint:
    path: /api/v2/team/{team_id}/custom_item
    method: GET
- name: folders
  endpoint:
    path: /space/{space_id}/folder
    method: GET
    data_selector: folders
- name: custom_task_types
  endpoint:
    path: /team//custom_item
    method: GET
    data_selector: custom_items
- name: folders
  endpoint:
    path: /space//folder
    method: GET
- name: spaces
  endpoint:
    path: /spaces
    method: GET
- name: list_custom_fields
  endpoint:
    path: /list/{list_id}/field
    method: GET
    data_selector: ''
- name: goal
  endpoint:
    path: /api/v2/team/{team_id}/goal
    method: GET
    data_selector: goals
    params:
      include_completed: 'true'
- name: docs
  endpoint:
    path: /workspaces/{workspaceId}/docs
    method: GET
- name: goal
  endpoint:
    path: /team//goal
    method: GET
- name: goals
  endpoint:
    path: /goals
    method: GET
- name: docs
  endpoint:
    path: /workspaces/workspaceId/docs
    method: GET
    params:
      deleted: 'false'
      archived: 'false'
      limit: 50
- name: invite_guest_to_workspace
  endpoint:
    path: /api/v2/team/{team_id}/guest
    method: POST
- name: folders
  endpoint:
    path: /space/{space_id}/folder
    method: GET
- name: team
  endpoint:
    path: /team
    method: GET
    data_selector: object
- name: folders
  endpoint:
    path: /space//folder
    method: GET
- name: spaces
  endpoint:
    path: /spaces
    method: GET
- name: lists
  endpoint:
    path: /folder/{folder_id}/list
    method: GET
    data_selector: lists
- name: goals
  endpoint:
    path: /team/{team_id}/goal
    method: GET
    params:
      include_completed: 'true'
- name: folder
  endpoint:
    path: /folder//list
    method: GET
- name: lists
  endpoint:
    path: /lists
    method: GET
- name: goals
  endpoint:
    path: /team//goal
    method: GET
- name: task_members
  endpoint:
    path: /task/{task_id}/member
    method: GET
    data_selector: members
- name: invite_guest
  endpoint:
    path: /api/v2/team/{team_id}/guest
    method: POST
- name: update_privacy_access
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/{object_type}/{object_id}/acls
    method: PATCH
- name: list_members
  endpoint:
    path: /workspaces/workspace_id/object_type/object_id/acls
    method: PATCH
- name: team
  endpoint:
    path: /team
    method: GET
    data_selector: team
    params: {}
- name: guest
  endpoint:
    path: /team//guest
    method: POST
    data_selector: guest
    params: {}
- name: lists
  endpoint:
    path: /folder/{folder_id}/list
    method: GET
    params: {}
- name: custom_roles
  endpoint:
    path: /api/v2/team/{team_id}/customroles
    method: GET
    data_selector: custom_roles
- name: folder
  endpoint:
    path: /folder/{folder_id}/list
    method: GET
    data_selector: object
    params: {}
- name: shared_hierarchy
  endpoint:
    path: /team/{team_id}/shared
    method: GET
- name: task_member
  endpoint:
    path: /api/v2/task/{task_id}/member
    method: GET
- name: spaces
  endpoint:
    path: /team/{team_id}/space
    method: GET
- name: spaces
  endpoint:
    path: /team//space
    method: GET
- name: update_privacy_access
  endpoint:
    path: /api/v3/workspaces/{workspace_id}/{object_type}/{object_id}/acls
    method: PATCH
- name: space_tags
  endpoint:
    path: /space/{space_id}/tag
    method: GET
    data_selector: tags
    params: {}
- name: custom_roles
  endpoint:
    path: /team/{team_id}/customroles
    method: GET
- name: tag
  endpoint:
    path: /space//tag
    method: GET
- name: tasks
  endpoint:
    path: /list/{list_id}/task
    method: GET
    params: {}
- name: shared_hierarchy
  endpoint:
    path: /team/{team_id}/shared
    method: GET
- name: tasks
  endpoint:
    path: /list//task
    method: GET
- name: spaces
  endpoint:
    path: /team/{team_id}/space
    method: GET
- name: checklist
  endpoint:
    path: /task/{task_id}/checklist
    method: POST
- name: spaces
  endpoint:
    path: /team//space
    method: GET
- name: dependency
  endpoint:
    path: /task/{task_id}/dependency
    method: POST
- name: space_tags
  endpoint:
    path: /space/{space_id}/tag
    method: GET
    data_selector: tags
- name: task_templates
  endpoint:
    path: /reference/gettasktemplates
    method: GET
- name: space_tag
  endpoint:
    path: /space//tag
    method: GET
- name: task_template
  endpoint:
    path: /team/{team_id}/taskTemplate
    method: GET
- name: authorized_workspaces
  endpoint:
    path: /api/v2/team
    method: GET
- name: tasks
  endpoint:
    path: /list/{list_id}/task
    method: GET
    data_selector: tasks
    params:
      archived: false
      include_markdown_description: false
- name: team
  endpoint:
    path: /team
    method: GET
- name: tasks
  endpoint:
    path: /list//task
    method: GET
- name: create_user_group
  endpoint:
    path: /api/v2/team/{team_id}/group
    method: POST
- name: checklist
  endpoint:
    path: /task/{task_id}/checklist
    method: POST
- name: time_entries
  endpoint:
    path: /team/{team_Id}/time_entries
    method: GET
    data_selector: time_entries
    params: {}
- name: add_dependency
  endpoint:
    path: /task/{task_id}/dependency
    method: POST
- name: time_entries
  endpoint:
    path: /team//time_entries
    method: GET
- name: task_templates
  endpoint:
    path: /reference/gettasktemplates
    method: GET
- name: tracked_time
  endpoint:
    path: /task/{task_id}/time
    method: GET
    data_selector: response
- name: task_template
  endpoint:
    path: /team/{team_id}/taskTemplate
    method: GET
- name: time_entries
  endpoint:
    path: /task//time
    method: GET
    data_selector: data
- name: authorized_workspaces
  endpoint:
    path: /api/v2/team
    method: GET
- name: teams
  endpoint:
    path: /team
    method: GET
- name: invite_user
  endpoint:
    path: /api/v2/team/{team_id}/user
    method: POST
- name: team
  endpoint:
    path: /team
    method: POST
    data_selector: members
    params: {}
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: user
    params: {}
- name: user_group
  endpoint:
    path: /team/{team_id}/group
    method: POST
- name: team_view
  endpoint:
    path: /team/{team_id}/view
    method: GET
- name: time_entries
  endpoint:
    path: /team/{team_Id}/time_entries
    method: GET
    data_selector: time_entries
    params:
      start_date: number
      end_date: number
      assignee: number
      include_task_tags: boolean
      include_location_names: boolean
      include_approval_history: boolean
      include_approval_details: boolean
      space_id: number
      folder_id: number
      list_id: number
      task_id: string
      custom_task_ids: boolean
      team_id: number
      is_billable: boolean
- name: view
  endpoint:
    path: /team//view
    method: GET
    data_selector: views
- name: time_entries
  endpoint:
    path: /team//time_entries
    method: GET
    data_selector: data
    params: {}
- name: tracked_time
  endpoint:
    path: /api/v2/task/{task_id}/time
    method: GET
    params:
      custom_task_ids: 'true'
      team_id: ''
- name: webhook
  endpoint:
    path: /api/v2/team/{team_id}/webhook
    method: GET
- name: time_entries
  endpoint:
    path: /task//time
    method: GET
    data_selector: data
- name: webhooks
  endpoint:
    path: /team//webhook
    method: GET
- name: invite_user_to_workspace
  endpoint:
    path: /api/v2/team/{team_id}/user
    method: POST
- name: channels
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels
    method: GET
    data_selector: data
    params:
      description_format: text/md
      is_follower: false
      include_hidden: false
- name: team_user
  endpoint:
    path: /team//user
    method: POST
    data_selector: object
    params: {}
- name: channels
  endpoint:
    path: /workspaces/workspace_id/chat/channels
    method: GET
    params:
      limit: '50'
      is_follower: 'false'
      include_hidden: 'false'
- name: views
  endpoint:
    path: /team/{team_id}/view
    method: GET
- name: views
  endpoint:
    path: /team//view
    method: GET
- name: webhook
  endpoint:
    path: /api/v2/team/{team_id}/webhook
    method: GET
- name: webhook
  endpoint:
    path: /team//webhook
    method: GET
    data_selector: webhooks
- name: channels
  endpoint:
    path: /workspaces/{workspace_id}/chat/channels
    method: GET
    data_selector: data
    params: {}
- name: channels
  endpoint:
    path: /workspaces/workspace_id/chat/channels
    method: GET
    params:
      limit: '50'
      is_follower: 'false'
      include_hidden: 'false'
notes:
- Free Forever Plans have 60 uses of Custom Fields. Each use of the Set Custom Field
  Value endpoint counts as 1 use per request. Uses accumulate across a Workspace and
  do not reset. When you reach the use limit, you won't lose any data, but you won't
  be able to edit or create new items with that feature.
- ClickUp uses the authorization code grant type.
- The access token currently does not expire. This is subject to change.
- All API calls are made against the Workspace from which the API token was generated.
- Dates are formatted as milliseconds since the Unix epoch (January 1, 1970) returned
  as an integer OR in a string.
- Our API always returns timestamps in UTC (Coordinated Universal Time).
- In API v2, 'Teams' refer to what ClickUp now more commonly calls 'Workspaces'.
- In API v3, 'Workspaces' are used consistently to refer to the main organizational
  unit.
- If a list contains many tasks and subtasks, the request body can become quite large,
  potentially causing API timeouts.
- Only OAuth authentication is supported.
- No, you cannot authenticate using your own API keys or Auth access tokens.
- Tasks in ClickUp are the building blocks for organizing work.
- The maximum file size is 1 GB.
- No limitations on file types.
- Use Get Tasks when you know the List where the tasks are located.
- Use Get Filtered Team Tasks to find tasks anywhere in your Workspace.
- Filter tasks in a view via API.
- The filtering system is structured around fields, operators, values, and groups.
- The Chat API endpoints are experimental and subject to change at any time.
- Filtering system designed to refine task list by specifying criteria based on task
  attributes.
- Webhooks are created using the user's auth token and therefore are tied to the user.
- If the user who created a webhook is disabled, the webhook remains but stops triggering.
- Signatures are always digested in hexadecimal format.
- Currently, no notification is sent when your webhook's health status changes.
- Webhooks are immediately suspended when a 410 status code is received.
- Webhook triggered for various task events such as tag updates, task movement, comment
  posting, and time tracking updates.
- Webhook payload is triggered when the Call webhook Action is used in an Automation.
- Webhook payloads include task updates such as creation, deletion, and status changes.
- This webhook is triggered when the Call webhook (Legacy) Action is used in an Automation.
- Uses webhook for task updates
- OAuth access tokens do not expire at this time.
- Any action performed through the public API will trigger all of the same notifications
  that would occur when using ClickUp.
- OAuth tokens are not supported when using the Try It feature of our Reference docs.
- View the Workspaces available to the authenticated user.
- If you do not include the `start` and `start_id` parameters, this endpoint will
  return the most recent 25 comments.
- Audit logs can only be created by the Workspace owner on Enterprise Plans.
- If you do not include the start and start_id parameters, this endpoint will return
  the most recent 25 comments.
- Use the start and start_id parameters of the oldest comment to retrieve the next
  25 comments.
- Add a comment to a List.
- Add a new comment to a task.
- Delete a task comment.
- Add a new comment to a Chat view.
- The parent Doc type. Use `4` for Space, `5` for Folder, `6` for List, `7` for Everything,
  and `12` for Workspace.
- View the PageListing for a Doc.
- This does not delete the option from the Custom Field.
- 'URL Expired: The URL for this request expired after 30 days.'
- Uses OAuth2 for authentication
- The URL for this request expired after 30 days.
- Requires workspaceId and docId to access specific documents
- Publicly shared templates must be added to your Workspace before you can use them
  with the public API.
- Log in to see full request history
- View the Goals available in a Workspace.
- This endpoint is only available to Workspaces on our Enterprise Plan.
- Updated 16 days ago
- View the details of a Goal including its Targets.
- Update a Target.
- Requires setup of connected app in ClickUp
- This endpoint is only available to Workspaces on our Enterprise Plan
- Delete a List from your Workspace.
- This endpoint requires the Tasks in Multiple List ClickApp to be enabled.
- View the Lists within a Folder.
- Get Workspace members who have access to a List.
- Get information about a List.
- Some objects may have specific requirements or parameters.
- Responses do not include people with inherited Hierarchy permission to the task.
- View the Spaces available in a Workspace.
- Note that sharing an item may incur charges.
- Authorization required for access to ClickUp API endpoints.
- View the Custom Roles available in a Workspace.
- View the tasks, Lists, and Folders that have been shared with the authenticated
  user.
- Use of API is limited by rate limits.
- Requires setup of connected app in API
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Allowing or restricting admins from managing private Spaces using 'admin_can_manage'
  is an Enterprise Plan feature.
- Some objects like Contact may return nulls in deeply nested fields
- Responses are limited to 100 tasks per page.
- Tasks added to the list_id with a different home List are not included in the response
  by default.
- Uses OAuth2 with refresh token
- To update Custom Fields on a task, you must use the Set Custom Field endpoint.
- You can only view task information of tasks you can access.
- The Total time in Status ClickApp must first be enabled by the Workspace owner or
  an admin.
- Tasks with attachments will return an 'attachments' response.
- Uses OAuth2 with refresh token — requires setup of connected app in ClickUp
- Uses OAuth2 for authentication.
- Adding a guest with view-only permissions to a User Group automatically converts
  them to a paid guest.
- Adding a guest with view-only permissions to a Team automatically converts them
  to a paid guest.
- If no paid guest seats are available, an additional member seat will be added.
- If you don't have any paid guest seats available, a new member seat is automatically
  added to increase the number of paid guest seats.
- Some objects may return nulls in deeply nested fields
- By default, this endpoint returns time entries from the last 30 days created by
  the authenticated user.
- 'Only one of the following location filters can be included at a time: `space_id`,
  `folder_id`, `list_id`, or `task_id`.'
- If your time entry is associated with a task that uses custom task ids, you can
  expect a `custom_id` field in the body of the response.
- A time entry that has a negative duration means that timer is currently running
  for that user.
- Rename an time entry label.
- This is a legacy time tracking endpoint. We recommend using the Time Tracking API
  endpoints to manage time entries.
- This endpoint is only available to Workspaces on the Enterprise Plan.
- Custom Fields added to a view at the Everything level will be added to all tasks
  in your Workspace.
- Custom Fields added to a view at the Everything level will be added to all tasks
  in your Workspace. Once Custom Fields are added to one of these views, you cannot
  move it to another level of the Hierarchy.
- Custom Fields added to a view at the Everything level will be added to all tasks
  in your Workspace
- Once Custom Fields are added to one of these views, you cannot move it to another
  level of the Hierarchy
- Once Custom Fields are added to one of these views, you cannot move it to another
  level of the Hierarchy.
- 'Headers for API requests should include ''accept: application/json''.'
- The parent parameter specifies where the view is located in the ClickUp Hierarchy.
  Both `id` and `type` are required.
- We do not have a dedicated IP address for webhooks. We use our domain name and dynamic
  addressing.
- If a Channel with the specified name already exists it returns it.
- This endpoint retrieves members of a specific Channel given its ID.
- Retrieves members of a specific Channel given its ID.
- This request uses multipart/form-data as the content type.
- URL for this request expired after 30 days.
- Requires setup of connected app in api
- Add a new checklist to a task.
- Requires authorization to access task templates
- Tasks can only be viewed if you have access.
- 'Only one of the following location filters can be included at a time: space_id,
  folder_id, list_id, or task_id.'
- If your time entry is associated with a task that uses custom task ids you can expect
  a `custom_id` field in the body of the response.
- If no paid guest seats are available, an additional member seat will be added, increasing
  the number of paid guest seats.
- The API requires proper authorization headers.
- API requires setup of webhooks
- Defaults to 50 results per page
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'HTTP 429: Rate limit exceeded'
- 'GBUSED_005: Account storage limit has been exceeded'
- 'GBUSED_005: Account storage limit has been exceeded.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck user authentication or token'
- '410: Webhook is immediately suspended.'
- '401: Returning this status will immediately mark the webhook as suspended.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '410: Webhook immediately suspended.'
- '401: Webhook suspended.'
- HTTP status code 429
- OAUTH_023
- OAUTH_026
- OAUTH_027
- OAUTH_029
- OAUTH_045
- OAUTH_019
- OAUTH_021
- OAUTH_025
- OAUTH_077
- OAUTH_017
- OAUTH_010
- OAUTH_007
- OAUTH_171
- 'HTTP status code 429: Rate limit reached'
- 'OAUTH_023: Team not authorized'
- 'OAUTH_026: Team not authorized'
- 'OAUTH_027: Team not authorized'
- 'OAUTH_029: Team not authorized'
- 'OAUTH_045: Team not authorized'
- 'OAUTH_019: Token not found'
- 'OAUTH_021: Token not found'
- 'OAUTH_025: Token not found'
- 'OAUTH_077: Token not found'
- 'OAUTH_017: Authorization Header Required'
- 'OAUTH_010: Client Not Found'
- 'OAUTH_017: Redirect URI not passed'
- 'OAUTH_007: Redirect URI does not match the redirect uris of this application'
- 'OAUTH_171: Webhook configuration already exists'
- '404: Doc not found'
- 400 Bad request - Name is required
- 401 Unauthorized
- 403 Forbidden
- 404 Template or space not found
- 500 Internal server error
- '401 Unauthorized: Check your API key or token.'
- 'URL Expired: The URL for this request expired after 30 days.'
- '400: Bad request - invalid task IDs or other validation errors'
- '403: Unauthorized to merge these tasks'
- '404: One or more tasks not found'
- '401 Unauthorized: Recheck API key or token expiration'
- '404: Requested {channelId} was not found'
- 400 Invalid update request for {channelId}.
- 404 Returns when the requested {channelId} was not found when updating a Channel
- '400: Bad Request'
- '404: Not Found'
- '500: Internal Server Error'
- '404: Channel not found'
- '200: Success'
- 404 Returns when the requested {channelId} was not found when deleting a Channel
- '404: The requested resource could not be found'
- '404: Returns when the specified {channelId} was not found.'
- 404 Returns when {channelId} was not found.
- default Generic Error response
- 400 Returns when the request is invalid.
- 404 Returns when {messageId} was not found.
- '200'
- '400'
- '404'
- '404: Returns when the specified {messageId} was not found'
- 204 The message was deleted
- '400: Returns when the reaction {reaction} is not supported or already exists.'
- '404: Returns when the message {messageId} is not found.'
- '404: The specified {messageId} was not found'
- 400 Returns when the reaction {reaction} is not supported.
- 404 Returns when the message {messageId} or the reaction {reaction} is not found.
- '404: Returns when the specified {messageId} was not found.'
- '400: Returns when the reaction {reaction} is not supported.'
- '404: Returns when the message {messageId} or the reaction {reaction} is not found.'
- '401 Unauthorized: Check your access token.'
- '404 Not Found: The specified list_id does not exist.'
- '401 Unauthorized: Check API key or token'
auth_info:
  mentioned_objects:
  - client_id
  - client_secret
  - OauthToken
  - Authorization
client:
  base_url: https://api.clickup.com/api/v2
  auth:
    type: oauth2
    flow: authorization_code
    token_url: https://api.clickup.com/api/v2/oauth/token
    client_id: '{{ dlt.secrets[''client_id''] }}'
    client_secret: '{{ dlt.secrets[''client_secret''] }}'
    location: header
    header_name: Authorization
source_metadata: null
