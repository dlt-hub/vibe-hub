resources:
- name: ServiceStack Reference
  endpoint:
    path: /add-servicestack-reference
    method: GET
    data_selector: records
    params: {}
- name: Blazor Server Tailwind
  endpoint:
    path: /templates/blazor-server
    method: GET
    data_selector: records
    params: {}
- name: Blazor WASM Tailwind
  endpoint:
    path: /templates/blazor-tailwind
    method: GET
    data_selector: records
    params: {}
- name: Blazor Components
  endpoint:
    path: /templates/blazor-components
    method: GET
    data_selector: records
    params: {}
- name: Vue IdentityAuth SPA Template
  endpoint:
    path: /templates/vue
    method: GET
    data_selector: records
    params: {}
- name: Blazor Server Tailwind
  endpoint:
    path: /templates/blazor-server
    method: GET
- name: Blazor WASM Tailwind
  endpoint:
    path: /templates/blazor-tailwind
    method: GET
- name: Vue IdentityAuth SPA Template
  endpoint:
    path: /templates/vue
    method: GET
- name: React IdentityAuth SPA Template
  endpoint:
    path: /templates/react
    method: GET
- name: Angular IdentityAuth SPA Template
  endpoint:
    path: /templates/angular
    method: GET
- name: Empty Templates
  endpoint:
    path: /templates/empty
    method: GET
- name: Website Templates
  endpoint:
    path: /templates/websites
    method: GET
- name: MVC Templates
  endpoint:
    path: /templates/mvc
    method: GET
- name: Single Page App Templates
  endpoint:
    path: /templates/single-page-apps
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: records
    params: {}
- name: ServiceStack.Blazor Components
  endpoint:
    path: /templates/blazor-components
    method: GET
    data_selector: components
    params: {}
- name: bookings
  endpoint:
    path: /bookings
    method: POST
    data_selector: records
    params:
      incremental: updated_at
- name: bookings
  endpoint:
    path: /bookings
    method: POST
    data_selector: records
    params: {}
- name: Contact
  endpoint:
    path: /AutoQuery/Contact
    method: GET
    data_selector: Results
- name: weatherforecast
  endpoint:
    path: /weatherforecast
    method: GET
    data_selector: data
    params: {}
- name: bookings
  endpoint:
    path: /bookings
    method: POST
    data_selector: records
    params: {}
- name: CreateBooking
  endpoint:
    path: /CreateBooking
    method: POST
    data_selector: Response
    params: {}
- name: Contact
  endpoint:
    path: /AutoQuery/QueryContacts
    method: GET
- name: JobApplication
  endpoint:
    path: /JobApplications
    method: POST
- name: UpdateContact
  endpoint:
    path: /UpdateContact
    method: PATCH
- name: empty_project
  endpoint:
    path: /dotnet/new
    method: GET
    data_selector: templates
    params: {}
- name: weather_forecast
  endpoint:
    path: /weatherforecast
    method: GET
    data_selector: json
    params: {}
- name: admin_coupons
  endpoint:
    path: /admin/coupons
    method: GET
    data_selector: json
    params: {}
- name: admin_bookings
  endpoint:
    path: /admin/bookings
    method: GET
    data_selector: json
    params: {}
- name: mvc
  endpoint:
    path: /templates/mvc
    method: GET
- name: razor
  endpoint:
    path: /templates/razor
    method: GET
- name: script
  endpoint:
    path: /templates/script
    method: GET
- name: angular-spa
  endpoint:
    path: /templates/angular-spa
    method: GET
    data_selector: templates
- name: react-spa
  endpoint:
    path: /templates/react-spa
    method: GET
    data_selector: templates
- name: vue-spa
  endpoint:
    path: /templates/vue-spa
    method: GET
    data_selector: templates
- name: Empty Web Template
  endpoint:
    path: http://web.web-templates.io
    method: GET
- name: Empty SelfHost Console Template
  endpoint:
    path: http://selfhost.web-templates.io
    method: GET
- name: mvc
  endpoint:
    path: https://github.com/NetCoreTemplates/mvc
    method: GET
- name: razor
  endpoint:
    path: https://github.com/NetCoreTemplates/razor
    method: GET
- name: script
  endpoint:
    path: https://github.com/NetCoreTemplates/script
    method: GET
- name: angular-spa
  endpoint:
    path: /templates/angular-spa
    method: GET
- name: react-spa
  endpoint:
    path: /templates/react-spa
    method: GET
- name: vue-spa
  endpoint:
    path: /templates/vue-spa
    method: GET
- name: vuetify-spa
  endpoint:
    path: /templates/vuetify-spa
    method: GET
- name: vue-nuxt
  endpoint:
    path: /templates/vue-nuxt
    method: GET
- name: vuetify-nuxt
  endpoint:
    path: /
    method: GET
    data_selector: none
    params: {}
- name: Redis Admin App
  endpoint:
    path: /sharp-apps/redis
    method: GET
- name: SQLite powered Blog App
  endpoint:
    path: /sharp-apps/blog
    method: GET
- name: SVG Spirals App
  endpoint:
    path: /sharp-apps/spirals
    method: GET
- name: Multi Layout CMS + DB Admin UI Example
  endpoint:
    path: /sharp-apps/rockwind
    method: GET
- name: Svelte .NET Core Single Page App Templates
  endpoint:
    path: /templates/svelte-spa
    method: GET
- name: nav_items
  endpoint:
    path: /GetNavItems
    method: GET
    data_selector: NAV_ITEMS
    params: {}
- name: authenticate
  endpoint:
    path: /Authenticate
    method: POST
    data_selector: responseStatus
    params: {}
- name: GetNavItems
  endpoint:
    path: /GetNavItems
    method: GET
    data_selector: NAV_ITEMS
- name: Authenticate
  endpoint:
    path: /Authenticate
    method: POST
    data_selector: responseStatus
- name: ProjectTemplates
  endpoint:
    path: /templates/
    method: GET
    data_selector: templates
    params: {}
- name: entry_points
  endpoint:
    path: /webpack/entry
    method: GET
    data_selector: entry
- name: output
  endpoint:
    path: /webpack/output
    method: GET
    data_selector: output
- name: loaders
  endpoint:
    path: /webpack/loaders
    method: GET
    data_selector: loaders
- name: plugins
  endpoint:
    path: /webpack/plugins
    method: GET
    data_selector: plugins
- name: angular-spa
  endpoint:
    path: /x/new/angular-spa/ProjectName
    method: POST
- name: mvcauth
  endpoint:
    path: /x/new/mvcauth/ProjectName
    method: POST
- name: mvcidentityserver
  endpoint:
    path: /x/new/mvcidentityserver/ProjectName
    method: POST
- name: razor
  endpoint:
    path: /x/new/razor/ProjectName
    method: POST
- name: react-spa
  endpoint:
    path: /x/new/react-spa/ProjectName
    method: POST
- name: react-lite
  endpoint:
    path: /x/new/react-lite/ProjectName
    method: POST
- name: script
  endpoint:
    path: /x/new/script/ProjectName
    method: POST
- name: vue-spa
  endpoint:
    path: /x/new/vue-spa/ProjectName
    method: POST
- name: vue-lite
  endpoint:
    path: /x/new/vue-lite/ProjectName
    method: POST
- name: vue-nuxt
  endpoint:
    path: /x/new/vue-nuxt/ProjectName
    method: POST
- name: bookings
  endpoint:
    path: /bookings
    method: POST
    data_selector: api
    params: {}
- name: projects
  endpoint:
    path: /x/new
    method: GET
    data_selector: templates
    params: {}
- name: hello
  endpoint:
    path: /hello/{Name}
    method: GET
    data_selector: Result
    params: {}
- name: prerender
  endpoint:
    path: /prerender
    method: GET
    data_selector: content
    params: {}
- name: docs
  endpoint:
    path: /docs
    method: GET
    data_selector: content
    params: {}
- name: JavaScript Minifier
  endpoint:
    path: /Minifiers/JavaScript
    method: POST
    data_selector: minifiedJs
- name: CSS Minifier
  endpoint:
    path: /Minifiers/Css
    method: POST
    data_selector: minifiedCss
- name: HTML Compressor
  endpoint:
    path: /Minifiers/Html
    method: POST
    data_selector: minifiedHtml
- name: hello
  endpoint:
    path: /hello/{Name}
    method: GET
    data_selector: Result
- name: Minifiers
  endpoint:
    path: /Minifiers
    method: GET
    data_selector: minifiers
- name: minify_static_files
  endpoint:
    path: /virtual-file-system
    method: GET
    data_selector: resources
    params: {}
- name: minify_dynamic_razor_views
  endpoint:
    path: /razor-format
    method: GET
    data_selector: settings
    params:
      MinifyHtml: 'true'
      UseAdvancedCompression: 'true'
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: Results
    params: {}
- name: customer
  endpoint:
    path: /customers/{Id}
    method: GET
    data_selector: ''
    params: {}
- name: create_customer
  endpoint:
    path: /customers
    method: POST
    data_selector: ''
    params: {}
- name: update_customer
  endpoint:
    path: /customers/{Id}
    method: PUT
    data_selector: ''
    params: {}
- name: delete_customer
  endpoint:
    path: /customers/{Id}
    method: DELETE
    data_selector: ''
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: Results
    params: {}
- name: customer
  endpoint:
    path: /customers/{Id}
    method: GET
    data_selector: Customer
    params: {}
- name: Release Notes
  endpoint:
    path: /release-notes-history
    method: GET
    data_selector: release_notes
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: Result
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: result
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: Results
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
    params: {}
- name: update_contact
  endpoint:
    path: /contacts/{Id}
    method: PATCH
    data_selector: Contact
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: Results
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: List<Contact>
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
- name: event_reviews
  endpoint:
    path: /events/{EventId}/reviews
    method: GET
- name: create_event
  endpoint:
    path: /events
    method: POST
- name: update_event
  endpoint:
    path: /events/{Id}
    method: PUT
- name: GetBooking
  endpoint:
    path: /bookings/{Id}
    method: GET
    data_selector: Result
- name: SearchBookings
  endpoint:
    path: /bookings/search
    method: GET
    data_selector: Results
- name: ConfigureAutoQuery
  endpoint:
    path: /ConfigureAutoQuery
    method: GET
    data_selector: records
    params: {}
- name: TypeScript DTOs
  endpoint:
    path: /get-dtos/typescript
    method: GET
- name: C# DTOs
  endpoint:
    path: /get-dtos/csharp
    method: GET
- name: project_templates
  endpoint:
    path: /templates
    method: GET
    data_selector: templates
    params: {}
- name: projects
  endpoint:
    path: /x/new
    method: GET
    data_selector: repositories
    params: {}
- name: app
  endpoint:
    path: /dotnet/tool/install
    method: GET
    data_selector: records
    params: {}
- name: blog
  endpoint:
    path: /install/blog
    method: GET
- name: redis
  endpoint:
    path: /install/redis
    method: GET
- name: spirals
  endpoint:
    path: /install/spirals
    method: GET
- name: blog
  endpoint:
    path: /install/blog
    method: GET
    data_selector: records
- name: redis
  endpoint:
    path: /install/redis
    method: GET
    data_selector: records
- name: favorites
  endpoint:
    path: /jump_to_favorites
    method: GET
    data_selector: favorites
    params: {}
- name: favorites
  endpoint:
    path: /favorites
    method: GET
    data_selector: records
- name: mongodb
  endpoint:
    path: /gistlyn/f777396583262127a66e2369ae475d3f
    method: GET
- name: redis
  endpoint:
    path: /gistlyn/512309b3cb7d734bb0f7323907499b08
    method: GET
- name: sqlserver
  endpoint:
    path: /gistlyn/7075e53e1fe69d3da12996677b5f3a5a
    method: GET
- name: postgres
  endpoint:
    path: /gistlyn/faf62da8b8ef30849506631025a5d06c
    method: GET
- name: mongodb
  endpoint:
    path: /mongodb
    method: GET
    data_selector: features
- name: redis
  endpoint:
    path: /redis
    method: GET
    data_selector: features
- name: sqlserver
  endpoint:
    path: /sqlserver
    method: GET
    data_selector: features
- name: postgres
  endpoint:
    path: /postgres
    method: GET
    data_selector: features
- name: mysql
  endpoint:
    path: /mysql
    method: GET
    data_selector: features
- name: oracle
  endpoint:
    path: /oracle
    method: GET
    data_selector: features
- name: firebird
  endpoint:
    path: /firebird
    method: GET
    data_selector: features
- name: dynamodb
  endpoint:
    path: /dynamodb
    method: GET
    data_selector: features
- name: ravendb
  endpoint:
    path: /ravendb
    method: GET
    data_selector: features
- name: marten
  endpoint:
    path: /marten
    method: GET
    data_selector: features
- name: auth
  endpoint:
    path: /auth
    method: GET
    data_selector: results
    params: {}
- name: auth-db
  endpoint:
    path: /auth-db
    method: GET
    data_selector: results
    params: {}
- name: mq
  endpoint:
    path: /mq
    method: GET
    data_selector: results
    params: {}
- name: user_auth
  endpoint:
    path: /auth/user
    method: GET
- name: Ping
  endpoint:
    path: /ping
    method: GET
- name: GetOrganization
  endpoint:
    path: /orgs/{Id}
    method: GET
- name: CreateOrganization
  endpoint:
    path: /orgs
    method: POST
- name: UpdateOrganization
  endpoint:
    path: /orgs/{Id}
    method: PUT
- name: DeleteOrganization
  endpoint:
    path: /orgs/{Id}
    method: DELETE
- name: GetOrganization
  endpoint:
    path: /orgs/{Id}
    method: GET
    data_selector: GetOrganizationResponse
- name: CreateOrganization
  endpoint:
    path: /orgs
    method: POST
    data_selector: CreateOrganizationResponse
- name: UpdateOrganization
  endpoint:
    path: /orgs/{Id}
    method: PUT
    data_selector: UpdateOrganizationResponse
- name: DeleteOrganization
  endpoint:
    path: /orgs/{Id}
    method: DELETE
    data_selector: ''
- name: LockTechStack
  endpoint:
    path: /admin/techstacks/{TechnologyStackId}/lock
    method: PUT
- name: LockTechStack
  endpoint:
    path: /admin/techstacks/{TechnologyStackId}/lock
    method: PUT
- name: StoreLogs
  endpoint:
    path: /json/reply/StoreLogs
    method: GET
    data_selector: existingLogs
- name: AttachVolume
  endpoint:
    path: /ec2.amazonaws.com/
    method: POST
    data_selector: AttachVolumeResponse
    params:
      Action: AttachVolume
- name: Auto HTML API
  endpoint:
    path: /api/GetCustomerDetails
    method: GET
    data_selector: response
    params:
      format: html
- name: API Fallback HTML Page
  endpoint:
    path: /api/GetCustomerDetails
    method: GET
- name: CreateBooking
  endpoint:
    path: /bookings
    method: POST
- name: QueryBookings
  endpoint:
    path: /bookings
    method: GET
- name: CreateCustomers
  endpoint:
    path: /customers
    method: POST
- name: Register
  endpoint:
    path: /register
    method: POST
- name: CreateBooking
  endpoint:
    path: /bookings
    method: POST
- name: Managing Users UI
  endpoint:
    path: /admin-ui-users
    method: GET
- name: Profiling & Logging UI
  endpoint:
    path: /admin-ui-profiling
    method: GET
- name: Redis Admin
  endpoint:
    path: /admin-ui-redis
    method: GET
- name: Database Admin
  endpoint:
    path: /admin-ui-database
    method: GET
- name: DB Validation UI
  endpoint:
    path: /admin-ui-validation
    method: GET
- name: Managing Users UI
  endpoint:
    path: /admin-ui-users
    method: GET
- name: Profiling & Logging UI
  endpoint:
    path: /admin-ui-profiling
    method: GET
- name: Redis Admin
  endpoint:
    path: /admin-ui-redis
    method: GET
- name: Database Admin
  endpoint:
    path: /admin-ui-database
    method: GET
- name: DB Validation UI
  endpoint:
    path: /admin-ui-validation
    method: GET
- name: Admin Users UI
  endpoint:
    path: /admin-ui/users
    method: GET
- name: API Keys
  endpoint:
    path: /api-keys
    method: GET
    data_selector: analytics
    params: {}
- name: IPs
  endpoint:
    path: /ips
    method: GET
    data_selector: analytics
    params: {}
- name: Blocking User Agents
  endpoint:
    path: /blocking-user-agents
    method: GET
    data_selector: analytics
    params: {}
- name: admin_users
  endpoint:
    path: /admin-ui/users
    method: GET
    data_selector: results
- name: Admin Users UI
  endpoint:
    path: /admin-ui/users
    method: GET
- name: Roles Admin UI
  endpoint:
    path: /admin-ui-identity-roles
    method: GET
- name: AdminDatabaseFeature
  endpoint:
    path: /api/admin/database
    method: GET
    data_selector: results
- name: AdminCreateUser
  endpoint:
    path: /admin/users/create
    method: POST
    data_selector: Result
- name: AdminUpdateUser
  endpoint:
    path: /admin/users/update
    method: PUT
    data_selector: Result
- name: AdminGetUser
  endpoint:
    path: /admin/users/get
    method: GET
    data_selector: Result
- name: AdminDeleteUser
  endpoint:
    path: /admin/users/delete
    method: DELETE
    data_selector: ResponseStatus
- name: AdminQueryUsers
  endpoint:
    path: /admin/users/query
    method: GET
    data_selector: Results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: validation_rules
  endpoint:
    path: /GetValidationRules
    method: POST
    data_selector: rules
    params: {}
- name: modify_validation_rules
  endpoint:
    path: /ModifyValidationRules
    method: POST
    data_selector: result
    params: {}
- name: Redis Stats
  endpoint:
    path: /admin-ui#dashboard
    method: GET
    data_selector: stats
- name: Redis Info
  endpoint:
    path: /commands/info
    method: GET
    data_selector: info
- name: Redis Command History
  endpoint:
    path: /admin-ui-redis-command
    method: GET
    data_selector: command_history
- name: validation_rules
  endpoint:
    path: /validation/rules
    method: POST
    data_selector: rules
- name: Request Logging
  endpoint:
    path: /admin-ui/logging
    method: GET
    data_selector: requests
    params: {}
- name: Profiling
  endpoint:
    path: /admin-ui/profiling
    method: GET
    data_selector: profilingEvents
    params: {}
- name: Admin Users
  endpoint:
    path: /admin-ui/users
    method: GET
- name: Redis Admin
  endpoint:
    path: /admin-ui/redis
    method: GET
- name: Database Admin
  endpoint:
    path: /admin-ui/database
    method: GET
- name: Request Logging & Profiling
  endpoint:
    path: /admin-ui/profiling
    method: GET
- name: Validation
  endpoint:
    path: /admin-ui/validation
    method: GET
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: response
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: response
    params: {}
- name: Service Name
  endpoint:
    path: /MyApp
    method: GET
    data_selector: Service Interfaces
    params: {}
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: ''
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: ''
    params: {}
- name: AppSettings
  endpoint:
    path: /appsettings
    method: GET
    data_selector: settings
    params: {}
- name: SpeechToText
  endpoint:
    path: /SpeechToText
    method: POST
    data_selector: result
- name: ChatGPT
  endpoint:
    path: /ChatGPT
    method: POST
    data_selector: response
- name: GoogleCloudConfig
  endpoint:
    path: /modular-startup
    method: GET
    data_selector: records
    params: {}
- name: ISpeechToText
  endpoint:
    path: /api/speech-to-text
    method: POST
    data_selector: result
- name: HelloService
  endpoint:
    path: /Hello
    method: GET
    data_selector: response
- name: svg_images
  endpoint:
    path: /metadata/svg
    method: GET
    data_selector: images
    params: {}
- name: svg_icons
  endpoint:
    path: /css/svg-icons.css
    method: GET
    data_selector: css_classes
    params: {}
- name: buttons
  endpoint:
    path: /css/buttons.css
    method: GET
    data_selector: css_classes
    params: {}
- name: AppSettings
  endpoint:
    path: /appsettings
    method: GET
    data_selector: settings
    params: {}
- name: Hello
  endpoint:
    path: /hello
    method: GET
    data_selector: Body
    params: {}
- name: SpeechToText
  endpoint:
    path: /api/speech-to-text
    method: POST
    data_selector: result
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: Results
    params: {}
- name: add_customer
  endpoint:
    path: /customers
    method: POST
    data_selector: Results
    params: {}
- name: update_customer
  endpoint:
    path: /customers/{Id}
    method: PUT
    data_selector: Results
    params: {}
- name: delete_customer
  endpoint:
    path: /customers/{Id}
    method: DELETE
    data_selector: Results
    params: {}
- name: GoogleCloudConfig
  endpoint:
    path: /projects/servicestackdemo/locations/global/buckets/servicestack-typechat
    method: GET
    data_selector: GoogleCloudConfig
- name: SpeechToText
  endpoint:
    path: /speech-to-text
    method: POST
    data_selector: transcripts
    params:
      language: en-US
- name: ChatGPT
  endpoint:
    path: /chatgpt
    method: POST
    data_selector: response
    params: {}
- name: Audio Transcription
  endpoint:
    path: /transcribe
    method: POST
    data_selector: transcriptionResult
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: Results
- name: contact
  endpoint:
    path: /contacts/{Id}
    method: GET
    data_selector: Result
- name: create_contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: Result
- name: update_contact
  endpoint:
    path: /contacts/{Id}
    method: POST
    data_selector: ResponseStatus
- name: delete_contact
  endpoint:
    path: /contacts/{Id}
    method: DELETE
    data_selector: ResponseStatus
- name: svg_auth
  endpoint:
    path: /css/svg-auth.css
    method: GET
- name: svg_icons
  endpoint:
    path: /css/svg-icons.css
    method: GET
- name: metadata_svg
  endpoint:
    path: /metadata/svg
    method: GET
- name: svg_icons
  endpoint:
    path: /css/svg-icons.css
    method: GET
- name: buttons
  endpoint:
    path: /css/buttons.css
    method: GET
- name: ExampleValidators
  endpoint:
    path: /ExampleValidators
    method: POST
    data_selector: records
    params: {}
- name: Hello
  endpoint:
    path: /hello
    method: GET
    data_selector: Body
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: Results
- name: add_customer
  endpoint:
    path: /customers
    method: POST
    data_selector: Results
- name: update_customer
  endpoint:
    path: /customers/{Id}
    method: PUT
    data_selector: Results
- name: delete_customer
  endpoint:
    path: /customers/{Id}
    method: DELETE
    data_selector: Results
- name: Hello
  endpoint:
    path: /hello
    method: GET
    data_selector: Result
- name: SpeechToText
  endpoint:
    path: /ai/speech-to-text
    method: POST
    data_selector: Response
- name: customer
  endpoint:
    path: /customers/{Id}
    method: GET
- name: invoice
  endpoint:
    path: /invoices/generate
    method: POST
- name: technology
  endpoint:
    path: /technology/{Slug}
    method: GET
- name: server
  endpoint:
    path: /server
    method: GET
- name: server-ts
  endpoint:
    path: /server-ts
    method: GET
- name: server-jquery
  endpoint:
    path: /server-jquery
    method: GET
- name: server-razor
  endpoint:
    path: /server-razor
    method: GET
- name: vuetify
  endpoint:
    path: /vuetify
    method: GET
- name: client-ts
  endpoint:
    path: /client-ts
    method: GET
- name: client-jquery
  endpoint:
    path: /client-jquery
    method: GET
- name: client-razor
  endpoint:
    path: /client-razor
    method: GET
- name: client-vue
  endpoint:
    path: /client-vue
    method: GET
- name: client-react
  endpoint:
    path: /client-react
    method: GET
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: Results
- name: create_contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: Result
- name: update_contact
  endpoint:
    path: /contacts/{Id}
    method: POST
    data_selector: ResponseStatus
- name: delete_contact
  endpoint:
    path: /contacts/{Id}
    method: DELETE
    data_selector: ResponseStatus
- name: GetTechnology
  endpoint:
    path: /technology/{Slug}
    method: GET
    data_selector: technology
- name: FindTechnologies
  endpoint:
    path: /technologies
    method: GET
    data_selector: results
- name: ValidationFeature
  endpoint:
    path: /validation
    method: GET
    data_selector: validators
    params: {}
- name: GetTechnology
  endpoint:
    path: /GetTechnology
    method: GET
    data_selector: technology
    params: {}
- name: SpeechToText
  endpoint:
    path: /ai-server/speech-to-text
    method: POST
    data_selector: response
    params: {}
- name: Hello
  endpoint:
    path: /Hello
    method: GET
    data_selector: result
- name: HelloAuth
  endpoint:
    path: /HelloAuth
    method: GET
    data_selector: result
- name: Authenticate
  endpoint:
    path: /Authenticate
    method: POST
    data_selector: bearerToken
- name: FindTechnologies
  endpoint:
    path: /technology/search
    method: GET
    data_selector: results
- name: QueryPosts
  endpoint:
    path: /QueryPosts
    method: GET
    data_selector: results
- name: HelloImage
  endpoint:
    path: /HelloImage
    method: GET
    data_selector: imageBytes
- name: IServiceGateway
  endpoint:
    path: /servicegateway
    method: POST
    data_selector: response
    params: {}
- name: IServiceGatewayAsync
  endpoint:
    path: /servicegatewayasync
    method: POST
    data_selector: response
    params: {}
- name: event_subscribers
  endpoint:
    path: /event-subscribers
    method: GET
    data_selector: users
    params: {}
- name: chat_to_channel
  endpoint:
    path: /channels/{Channel}/chat
    method: POST
    data_selector: ChatMessage
    params: {}
- name: raw_to_channel
  endpoint:
    path: /channels/{Channel}/raw
    method: POST
    data_selector: void
    params: {}
- name: UpdateEventSubscriber
  endpoint:
    path: /event-subscribers/{Id}
    method: POST
    data_selector: null
    params: {}
- name: ServiceStack
  endpoint:
    path: /add-servicestack-reference
    method: GET
- name: custom_event
  endpoint:
    path: trigger.customEvent
    method: POST
    data_selector: msg
- name: ServerEventsClient
  endpoint:
    path: /
    method: GET
- name: ServerEvents
  endpoint:
    path: /event-stream
    method: GET
- name: FindTechnologies
  endpoint:
    path: /technology/search
    method: GET
    data_selector: results
- name: UpdateOrganization
  endpoint:
    path: /orgs/{Id}
    method: PUT
    data_selector: response
- name: receiver
  endpoint:
    path: /eventReceivers
    method: POST
    data_selector: receivers
    params: {}
- name: updateSubscriber
  endpoint:
    path: /updateSubscriber
    method: POST
    data_selector: subscriptions
    params: {}
- name: StreamServerEvents
  endpoint:
    path: /serverStreamServerEvents
    method: rpc
    data_selector: stream StreamServerEventsResponse
- name: FindTechnologies
  endpoint:
    path: /technology/search
    method: GET
    data_selector: records
- name: UpdateOrganization
  endpoint:
    path: /orgs/{Id}
    method: PUT
    data_selector: response
- name: RecurringCommand
  endpoint:
    path: /recurring-tasks
    method: POST
    data_selector: jobs
    params: {}
- name: AddTodoCommand
  endpoint:
    path: /commands/add-todo
    method: POST
    data_selector: result
- name: AddTodoCommand
  endpoint:
    path: /AddTodoCommand
    method: POST
    data_selector: result
- name: backgroundmq
  endpoint:
    path: /background-mq
    method: GET
- name: rabbitmq
  endpoint:
    path: /rabbit-mq
    method: GET
- name: sqs
  endpoint:
    path: /amazon-sqs-mq
    method: GET
- name: servicebus
  endpoint:
    path: /azure-service-bus-mq
    method: GET
- name: redismq
  endpoint:
    path: /redis-mq
    method: GET
- name: TestMq
  endpoint:
    path: /oneway
    method: POST
    data_selector: result
    params: {}
- name: AuthOnly
  endpoint:
    path: /authonly
    method: POST
    data_selector: result
    params: {}
- name: GetTechnology
  endpoint:
    path: /technology/{Slug}
    method: GET
    data_selector: technology
    params: {}
- name: SendNotification
  endpoint:
    path: /notifications/{Id}/send
    method: POST
    data_selector: records
- name: MqStart
  endpoint:
    path: /mq/start
    method: POST
    data_selector: records
- name: MqStop
  endpoint:
    path: /mq/stop
    method: POST
    data_selector: records
- name: MqStats
  endpoint:
    path: /mq/stats
    method: GET
    data_selector: records
- name: MqStatus
  endpoint:
    path: /mq/status
    method: GET
    data_selector: records
- name: SendNotification
  endpoint:
    path: /notifications/{Id}/send
    method: POST
    data_selector: none
    params: {}
- name: mq_stop
  endpoint:
    path: /mq/stop
    method: POST
- name: mq_start
  endpoint:
    path: /mq/start
    method: POST
- name: mq_stats
  endpoint:
    path: /mq/stats
    method: GET
- name: mq_status
  endpoint:
    path: /mq/status
    method: GET
- name: mq_collection_stats
  endpoint:
    path: /background-mq#mq-status
    method: GET
    data_selector: statsMap
- name: RabbitMqServer
  endpoint:
    path: /mq/rabbitmq
    method: POST
- name: Hello
  endpoint:
    path: /hello
    method: GET
    data_selector: None
    params: {}
- name: HelloResponse
  endpoint:
    path: /helloresponse
    method: GET
    data_selector: None
    params: {}
- name: Binder
  endpoint:
    path: /mybinder.org
    method: GET
    data_selector: not specified
    params: {}
- name: Covid Vaccinations
  endpoint:
    path: /covid-vac-watch.netcore.io
    method: GET
    data_selector: not specified
    params: {}
- name: Hello
  endpoint:
    path: /hello
    method: GET
    data_selector: result
- name: Authenticate
  endpoint:
    path: /auth
    method: POST
    data_selector: auth
- name: HelloAuth
  endpoint:
    path: /helloauth
    method: GET
    data_selector: result
- name: HelloImage
  endpoint:
    path: /helloimage
    method: GET
    data_selector: image
- name: FindTechnologies
  endpoint:
    path: /technology/search
    method: GET
    data_selector: results
- name: QueryPosts
  endpoint:
    path: /posts/query
    method: GET
    data_selector: results
- name: QueryVaccinationRates
  endpoint:
    path: /QueryVaccinationRates
    method: GET
    data_selector: response.Results
- name: QueryVaccinationRates
  endpoint:
    path: /QueryVaccinationRates
    method: GET
    data_selector: response.Results
- name: invoices
  endpoint:
    path: /QueryInvoices
    method: GET
    data_selector: results
- name: QueryInvoices
  endpoint:
    path: /QueryInvoices
    method: GET
    data_selector: results
- name: event-stream
  endpoint:
    path: /event-stream
    method: GET
- name: event-heartbeat
  endpoint:
    path: /event-heartbeat
    method: GET
- name: event-unregister
  endpoint:
    path: /event-unregister
    method: GET
- name: event-subscribers
  endpoint:
    path: /event-subscribers
    method: GET
- name: release-ghr-vanilla
  endpoint:
    path: /ssh-docker-compose-deploment
    method: GET
    data_selector: ''
    params: {}
- name: release-ecr-vanilla
  endpoint:
    path: /release-ecr-vanilla
    method: GET
    data_selector: ''
    params: {}
- name: release-hub-vanilla
  endpoint:
    path: /release-hub-vanilla
    method: GET
    data_selector: ''
    params: {}
- name: release-ecr-aws
  endpoint:
    path: /release-ecr-aws
    method: GET
    data_selector: ''
    params: {}
- name: UpdateEventSubscriber
  endpoint:
    path: /event-subscribers/{Id}
    method: POST
    data_selector: null
    params: {}
- name: nginx-proxy
  endpoint:
    path: /services/nginx-proxy
    method: GET
    data_selector: records
- name: letsencrypt
  endpoint:
    path: /services/letsencrypt
    method: GET
    data_selector: records
- name: docker-compose
  endpoint:
    path: ./docker-compose.yml,./docker-compose.prod.yml,./.env
    method: POST
- name: nginx-proxy
  endpoint:
    path: /nginx-proxy
    method: POST
    data_selector: services
    params: {}
- name: letsencrypt
  endpoint:
    path: /letsencrypt
    method: POST
    data_selector: services
    params: {}
- name: event-stream
  endpoint:
    path: /event-stream
    method: GET
- name: push_to_registry
  endpoint:
    path: /docker/build-push-action@v3
    method: POST
    data_selector: tags
    params:
      file: Dockerfile
      context: .
      push: 'true'
      tags: ghcr.io/${{ env.image_repository_name }}:${{ env.TAG_NAME }}
- name: copy_files_to_target_server
  endpoint:
    path: /appleboy/scp-action@v0.1.3
    method: POST
    data_selector: source
    params:
      host: ${{ secrets.DEPLOY_HOST }}
      username: ${{ secrets.DEPLOY_USERNAME }}
      port: 22
      key: ${{ secrets.DEPLOY_KEY }}
      source: ./docker-compose.yml,./docker-compose.prod.yml,./.env
      target: ~/.deploy/${{ github.event.repository.name }}/
- name: update_subscriber
  endpoint:
    path: /ss/updateSubscriber
    method: POST
    data_selector: response
    params: {}
- name: subscribe_to_channels
  endpoint:
    path: /ss/subscribeToChannels
    method: POST
    data_selector: response
    params: {}
- name: unsubscribe_from_channels
  endpoint:
    path: /ss/unsubscribeFromChannels
    method: POST
    data_selector: response
    params: {}
- name: StreamServerEvents
  endpoint:
    path: /server-stream-server-events
    method: rpc
    data_selector: stream StreamServerEventsResponse
- name: nginx-proxy
  endpoint:
    path: /nginx-proxy
    method: GET
    data_selector: records
- name: letsencrypt
  endpoint:
    path: /letsencrypt
    method: GET
    data_selector: records
- name: push_to_registry
  endpoint:
    path: /docker/build-push-action
    method: POST
    data_selector: image
    params: {}
- name: deploy_via_ssh
  endpoint:
    path: /appleboy/ssh-action
    method: POST
    data_selector: deploy
    params: {}
- name: GitHub Secrets
  endpoint:
    path: /actions/secrets
    method: POST
    params: {}
- name: deployment
  endpoint:
    path: /deploy
    method: POST
    data_selector: result
    params: {}
- name: recurring_tasks
  endpoint:
    path: /recurring-tasks
    method: GET
    data_selector: tasks
    params: {}
- name: docker_setup
  endpoint:
    path: /setup/docker
    method: POST
    data_selector: setup_info
- name: nginx_proxy
  endpoint:
    path: /setup/nginx-proxy
    method: POST
    data_selector: proxy_info
- name: GitHub Actions
  endpoint:
    path: /.github/workflows/release.yml
    method: GET
    data_selector: workflow
- name: AddTodoCommand
  endpoint:
    method: POST
- name: MyCommandNoArgs
  endpoint:
    method: POST
- name: MyCommandArgs
  endpoint:
    method: POST
- name: MyCommandWithResult
  endpoint:
    method: POST
- name: MyCommandWithArgsAndResult
  endpoint:
    method: POST
- name: backgroundmq
  endpoint:
    path: /background-mq
    method: GET
- name: rabbitmq
  endpoint:
    path: /rabbit-mq
    method: GET
- name: sqs
  endpoint:
    path: /amazon-sqs-mq
    method: GET
- name: servicebus
  endpoint:
    path: /azure-service-bus-mq
    method: GET
- name: redismq
  endpoint:
    path: /redis-mq
    method: GET
- name: ECS Cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/ECSCluster
    method: GET
    data_selector: records
    params: {}
- name: EC2 Instance
  endpoint:
    path: /services/data/vXX.X/sobjects/EC2Instance
    method: GET
    data_selector: records
    params: {}
- name: nginx-proxy
  endpoint:
    path: /nginx-proxy-compose.yml
    method: COPY
    data_selector: docker-compose
- name: GetPublicKey
  endpoint:
    path: /publickey
    method: GET
    data_selector: null
    params: {}
- name: EncryptedMessage
  endpoint:
    path: /encryptedmessage
    method: POST
    data_selector: null
    params: {}
- name: SendNotification
  endpoint:
    path: /notifications/{Id}/send
    method: POST
    data_selector: records
- name: MqStop
  endpoint:
    path: /mq/stop
    method: POST
- name: MqStart
  endpoint:
    path: /mq/start
    method: POST
- name: MqStats
  endpoint:
    path: /mq/stats
    method: GET
- name: MqStatus
  endpoint:
    path: /mq/status
    method: GET
- name: SendNotification
  endpoint:
    path: /notifications/{Id}/send
    method: POST
    data_selector: null
    params: {}
- name: mq_collection_stats
  endpoint:
    path: /background-mq#mq-status
    method: GET
    data_selector: statsMap
    params: {}
- name: RabbitMqServer
  endpoint:
    path: /services/rabbitmq
    method: GET
    data_selector: messages
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: FindTechnologies
  endpoint:
    path: /FindTechnologies
    method: GET
    data_selector: Results
    params: {}
- name: QueryVaccinationRates
  endpoint:
    path: /QueryVaccinationRates
    method: GET
    data_selector: response.Results
    params: {}
- name: tenant_config
  endpoint:
    path: /tenantConfig
    method: GET
    data_selector: Config
    params: {}
- name: ServiceInterface
  endpoint:
    path: /EventMan.ServiceInterface
    method: GET
    data_selector: records
- name: ServiceModel
  endpoint:
    path: /EventMan.ServiceModel
    method: GET
    data_selector: records
- name: TestProject
  endpoint:
    path: /TestProject
    method: GET
    data_selector: records
- name: QueryVaccinationRates
  endpoint:
    path: /QueryVaccinationRates
    method: GET
    data_selector: response.Results
- name: HotReloadFeature
  endpoint:
    path: /js/hot-fileloader.js
    method: GET
- name: SharpPagesFeature
  endpoint:
    path: /js/hot-loader.js
    method: GET
- name: invoices
  endpoint:
    path: /QueryInvoices
    method: GET
    data_selector: results
- name: NavItems
  endpoint:
    path: /navitems
    method: GET
    data_selector: NavItems
    params: {}
- name: NavItemsMap
  endpoint:
    path: /navitemsmap
    method: GET
    data_selector: NavItemsMap
    params: {}
- name: QueryInvoices
  endpoint:
    path: /QueryInvoices
    method: GET
    data_selector: results
- name: navItems
  endpoint:
    path: /GetNavItems
    method: GET
    data_selector: NavItems
    params: {}
- name: authenticate
  endpoint:
    path: /Authenticate
    method: GET
    data_selector: AUTH
    params:
      ifErrorReturn: 'null'
- name: release-ghr-vanilla
  endpoint:
    path: /ssh-docker-compose-deploment
    method: GET
    data_selector: reference
    params: {}
- name: release-ecr-vanilla
  endpoint:
    path: /aws-ecr
    method: GET
    data_selector: reference
    params: {}
- name: release-hub-vanilla
  endpoint:
    path: /docker-hub
    method: GET
    data_selector: reference
    params: {}
- name: release-ecr-aws
  endpoint:
    path: /aws-ecr-aws
    method: GET
    data_selector: reference
    params: {}
- name: DB Migration App Task
  endpoint:
    path: /ormlite/db-migrations
    method: GET
    data_selector: records
    params: {}
- name: nginx-proxy
  endpoint:
    path: /nginx-proxy
    method: POST
    data_selector: services
    params: {}
- name: letsencrypt
  endpoint:
    path: /letsencrypt
    method: POST
    data_selector: services
    params:
      DEFAULT_EMAIL: you@example.com
- name: SessionHttpHandlerFactory
  endpoint:
    path: MyApp/SessionHttpHandlerFactory
    method: GET
    data_selector: null
    params: {}
- name: docker-compose
  endpoint:
    path: /docker-compose.yml
    method: POST
    data_selector: services
- name: AppSettings
  endpoint:
    path: /appSettings
    method: GET
    data_selector: settings
    params: {}
- name: nginx-proxy
  endpoint:
    path: /nginx-proxy
    method: POST
    data_selector: services
- name: letsencrypt
  endpoint:
    path: /letsencrypt
    method: POST
    data_selector: services
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: Result
- name: push_to_registry
  endpoint:
    path: /docker/build-push-action@v3
    method: POST
    data_selector: tags
    params:
      file: Dockerfile
      context: .
      push: true
- name: deploy_via_ssh
  endpoint:
    path: /appleboy/ssh-action@v0.1.5
    method: POST
    data_selector: script
    params:
      port: 22
- name: docker_compose
  endpoint:
    path: /docker-compose
    method: POST
    data_selector: services
    params: {}
- name: push_to_registry
  endpoint:
    path: docker/build-push-action@v3
    method: POST
    data_selector: tags
    params:
      file: Dockerfile
      context: .
      push: true
      tags: ghcr.io/${{ env.image_repository_name }}:${{ env.TAG_NAME }}
- name: deploy_host
  endpoint:
    params:
      DEPLOY_HOST: hostname or IP address
- name: deploy_username
  endpoint:
    params:
      DEPLOY_USERNAME: username for SSH
- name: deploy_key
  endpoint:
    params:
      DEPLOY_KEY: private SSH key
- name: letsencrypt_email
  endpoint:
    params:
      LETSENCRYPT_EMAIL: email for certificate registration
- name: deployment
  endpoint:
    path: /deployments
    method: POST
    data_selector: deployments
- name: pocos
  endpoint:
    path: /pocos
    method: GET
    data_selector: ''
    params: {}
- name: droplet
  endpoint:
    path: /v2/droplets
    method: GET
    data_selector: droplets
- name: floating_ip
  endpoint:
    path: /v2/floating_ips
    method: GET
    data_selector: floating_ips
- name: example_resource
  endpoint:
    path: /api/example
    method: GET
    data_selector: data
    params: {}
- name: GetPublicKey
  endpoint:
    path: /publickey
    method: GET
    data_selector: null
    params: {}
- name: EncryptedMessage
  endpoint:
    path: /encryptedmessage
    method: POST
    data_selector: null
    params: {}
- name: All Customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
    params: {}
- name: Customer Details
  endpoint:
    path: /customers/ALFKI
    method: GET
    data_selector: customerDetails
    params: {}
- name: Customer Orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: dotnet_templates
  endpoint:
    path: /templates
    method: GET
    data_selector: templates
    params: {}
- name: FileSystemVirtualFiles
  endpoint:
    path: /FileSystemVirtualFiles
    method: GET
- name: MemoryVirtualFiles
  endpoint:
    path: /MemoryVirtualFiles
    method: GET
- name: FileSystemMapping
  endpoint:
    path: /FileSystemMapping
    method: GET
- name: S3VirtualFiles
  endpoint:
    path: /S3VirtualFiles
    method: GET
- name: AzureBlobVirtualFiles
  endpoint:
    path: /AzureBlobVirtualFiles
    method: GET
- name: GoogleCloudVirtualFiles
  endpoint:
    path: /GoogleCloudVirtualFiles
    method: GET
- name: R2VirtualFiles
  endpoint:
    path: /R2VirtualFiles
    method: GET
- name: ResourceVirtualFiles
  endpoint:
    path: /ResourceVirtualFiles
    method: GET
- name: GistVirtualFiles
  endpoint:
    path: /GistVirtualFiles
    method: GET
- name: MultiVirtualFiles
  endpoint:
    path: /MultiVirtualFiles
    method: GET
- name: gist
  endpoint:
    path: /gists
    method: GET
    data_selector: gists
- name: TenantConfig
  endpoint:
    path: /tenant/config
    method: GET
    data_selector: Config
    params: {}
- name: angular-spa
  endpoint:
    path: /angular-spa
    method: GET
    data_selector: records
- name: blazor
  endpoint:
    path: /blazor
    method: GET
    data_selector: records
- name: blazor-vue
  endpoint:
    path: /blazor-vue
    method: GET
    data_selector: records
- name: blazor-wasm
  endpoint:
    path: /blazor-wasm
    method: GET
    data_selector: records
- name: empty
  endpoint:
    path: /empty
    method: GET
    data_selector: records
- name: grpc
  endpoint:
    path: /grpc
    method: GET
    data_selector: records
- name: mvc
  endpoint:
    path: /mvc
    method: GET
    data_selector: records
- name: mvc-bootstrap
  endpoint:
    path: /mvc-bootstrap
    method: GET
    data_selector: records
- name: mvcauth
  endpoint:
    path: /mvcauth
    method: GET
    data_selector: records
- name: mvcidentityserver
  endpoint:
    path: /mvcidentityserver
    method: GET
    data_selector: records
- name: nextjs
  endpoint:
    path: /nextjs
    method: GET
    data_selector: records
- name: razor
  endpoint:
    path: /razor
    method: GET
    data_selector: records
- name: razor-bootstrap
  endpoint:
    path: /razor-bootstrap
    method: GET
    data_selector: records
- name: razor-pages
  endpoint:
    path: /razor-pages
    method: GET
    data_selector: records
- name: razor-press
  endpoint:
    path: /razor-press
    method: GET
    data_selector: records
- name: razor-ssg
  endpoint:
    path: /razor-ssg
    method: GET
    data_selector: records
- name: react-spa
  endpoint:
    path: /react-spa
    method: GET
    data_selector: records
- name: script
  endpoint:
    path: /script
    method: GET
    data_selector: records
- name: selfhost
  endpoint:
    path: /selfhost
    method: GET
    data_selector: records
- name: svelte-spa
  endpoint:
    path: /svelte-spa
    method: GET
    data_selector: records
- name: vue-desktop
  endpoint:
    path: /vue-desktop
    method: GET
    data_selector: records
- name: vue-mjs
  endpoint:
    path: /vue-mjs
    method: GET
    data_selector: records
- name: vue-nuxt
  endpoint:
    path: /vue-nuxt
    method: GET
    data_selector: records
- name: vue-spa
  endpoint:
    path: /vue-spa
    method: GET
    data_selector: records
- name: vue-ssg
  endpoint:
    path: /vue-ssg
    method: GET
    data_selector: records
- name: vue-vite
  endpoint:
    path: /vue-vite
    method: GET
    data_selector: records
- name: web
  endpoint:
    path: /web
    method: GET
    data_selector: records
- name: web-tailwind
  endpoint:
    path: /web-tailwind
    method: GET
    data_selector: records
- name: worker-rabbitmq
  endpoint:
    path: /worker-rabbitmq
    method: GET
    data_selector: records
- name: worker-redismq
  endpoint:
    path: /worker-redismq
    method: GET
    data_selector: records
- name: worker-servicebus
  endpoint:
    path: /worker-servicebus
    method: GET
    data_selector: records
- name: worker-sqs
  endpoint:
    path: /worker-sqs
    method: GET
    data_selector: records
- name: EventMan
  endpoint:
    path: /EventMan
    method: GET
    data_selector: events
    params: {}
- name: HotReloadFeature
  endpoint:
    path: /js/hot-fileloader.js
    method: GET
- name: SharpPagesFeature
  endpoint:
    path: /js/hot-loader.js
    method: GET
- name: NavItems
  endpoint:
    path: /NavItems
    method: GET
    data_selector: NavItems
    params: {}
- name: NavItemsMap
  endpoint:
    path: /NavItemsMap
    method: GET
    data_selector: NavItemsMap
    params: {}
- name: nginx
  endpoint:
    path: /etc/nginx/conf.d/my-app.org.conf
    method: CREATE
    data_selector: server
    params:
      proxy_pass: http://localhost:5000
      server_name: my-app.org
- name: navItems
  endpoint:
    path: /GetNavItems
    method: GET
    data_selector: results
- name: authenticate
  endpoint:
    path: /Authenticate
    method: POST
    data_selector: response
- name: ecsInstanceRole
  endpoint:
    path: /iam/roles
    method: POST
    data_selector: Role
    params:
      RoleName: ecsInstanceRole
- name: ecs_service
  endpoint:
    path: /ecs/services
    method: GET
- name: ecs_cluster
  endpoint:
    path: /ecs/clusters
    method: GET
- name: db_migration
  endpoint:
    path: /app-tasks/db-migration
    method: POST
    data_selector: tasks
    params: {}
- name: Hello
  endpoint:
    path: /hello/{Name}
    method: GET
    data_selector: null
    params: {}
- name: supervisor_configuration
  endpoint:
    path: /etc/supervisor/conf.d/web.myapp.conf
    method: GET
    data_selector: configuration
    params: {}
- name: nginx_configuration
  endpoint:
    path: /etc/nginx/sites-available/myapp.example.org
    method: GET
    data_selector: configuration
    params: {}
- name: AuthenticateService
  endpoint:
    path: /api/auth/{provider}
    method: POST
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
- name: orders
  endpoint:
    path: /api/orders
    method: GET
    data_selector: data
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: Result
- name: user_repos
  endpoint:
    path: /users/{user}/repos
    method: GET
    data_selector: repos
- name: user_timeline
  endpoint:
    path: /statuses/user_timeline.json
    method: GET
    data_selector: tweets
- name: users
  endpoint:
    path: /xml-rpc/users
    method: GET
    data_selector: users
- name: sales
  endpoint:
    path: /sales.csv
    method: GET
    data_selector: sales
- name: Dump
  endpoint:
    path: /dump
    method: GET
    data_selector: records
    params: {}
- name: Print
  endpoint:
    path: /print
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Image Resize
  endpoint:
    path: /Image/Resize
    method: GET
    data_selector: stream
    params: {}
- name: Image Crop
  endpoint:
    path: /Image/Crop
    method: GET
    data_selector: stream
    params: {}
- name: Enum Values
  endpoint:
    path: /Enum/Values
    method: GET
    data_selector: values
    params: {}
- name: MemoryCacheClient
  endpoint:
    path: /services/data/vXX.X/sobjects/MemoryCacheClient
    method: GET
    data_selector: records
    params: {}
- name: Redis
  endpoint:
    path: /services/data/vXX.X/sobjects/Redis
    method: GET
    data_selector: records
    params: {}
- name: OrmLiteCacheClient
  endpoint:
    path: /services/data/vXX.X/sobjects/OrmLiteCacheClient
    method: GET
    data_selector: records
    params: {}
- name: Memcached
  endpoint:
    path: /services/data/vXX.X/sobjects/Memcached
    method: GET
    data_selector: records
    params: {}
- name: AwsDynamoDB
  endpoint:
    path: /services/data/vXX.X/sobjects/AwsDynamoDB
    method: GET
    data_selector: records
    params: {}
- name: AzureTableStorage
  endpoint:
    path: /services/data/vXX.X/sobjects/AzureTableStorage
    method: GET
    data_selector: records
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: ''
    params: {}
- name: customer_orders
  endpoint:
    path: /customers/{customer_id}/orders
    method: GET
    data_selector: ''
    params: {}
- name: creatives
  endpoint:
    path: /creatives.jsonl
    method: GET
    data_selector: records
    params:
      IdGreaterThan: lastIndexedCreative
      OrderBy: Id
- name: CachedServiceClient
  endpoint:
    path: /CachedServiceClient
    method: GET
- name: CachedHttpClient
  endpoint:
    path: /CachedHttpClient
    method: GET
- name: MsgPackServiceClient
  endpoint:
    path: /MsgPackServiceClient
    method: GET
- name: JsonServiceClient
  endpoint:
    path: /JsonServiceClient
    method: GET
- name: JsonHttpClient
  endpoint:
    path: /JsonHttpClient
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: records
    params: {}
- name: customer_details
  endpoint:
    path: /customers/ALFKI
    method: GET
    data_selector: records
    params: {}
- name: customer_orders
  endpoint:
    path: /orders
    method: GET
    data_selector: records
    params: {}
- name: auth
  endpoint:
    path: /auth/{provider}
    method: GET
- name: register
  endpoint:
    path: /register
    method: POST
- name: assignroles
  endpoint:
    path: /assignroles
    method: POST
- name: unassignroles
  endpoint:
    path: /unassignroles
    method: POST
- name: CORS Plugin
  endpoint:
    path: /plugins/cors
    method: POST
    data_selector: CorsFeature
    params: {}
- name: techstacks
  endpoint:
    path: /techstacks
    method: GET
    data_selector: ''
    params: {}
- name: marketing
  endpoint:
    path: /marketing
    method: GET
    data_selector: ''
    params: {}
- name: finance
  endpoint:
    path: /finance
    method: GET
    data_selector: ''
    params: {}
- name: RequestLogs
  endpoint:
    path: /requestlogs
    method: GET
- name: RequestLogs
  endpoint:
    path: /request-logger
    method: GET
    data_selector: logs
- name: angular-spa
  endpoint:
    path: /angular-spa
    method: GET
    data_selector: records
- name: blazor
  endpoint:
    path: /blazor
    method: GET
    data_selector: records
- name: blazor-vue
  endpoint:
    path: /blazor-vue
    method: GET
    data_selector: records
- name: blazor-wasm
  endpoint:
    path: /blazor-wasm
    method: GET
    data_selector: records
- name: empty
  endpoint:
    path: /empty
    method: GET
    data_selector: records
- name: grpc
  endpoint:
    path: /grpc
    method: GET
    data_selector: records
- name: mvc
  endpoint:
    path: /mvc
    method: GET
    data_selector: records
- name: mvc-bootstrap
  endpoint:
    path: /mvc-bootstrap
    method: GET
    data_selector: records
- name: mvcauth
  endpoint:
    path: /mvcauth
    method: GET
    data_selector: records
- name: mvcidentityserver
  endpoint:
    path: /mvcidentityserver
    method: GET
    data_selector: records
- name: nextjs
  endpoint:
    path: /nextjs
    method: GET
    data_selector: records
- name: razor
  endpoint:
    path: /razor
    method: GET
    data_selector: records
- name: razor-bootstrap
  endpoint:
    path: /razor-bootstrap
    method: GET
    data_selector: records
- name: razor-pages
  endpoint:
    path: /razor-pages
    method: GET
    data_selector: records
- name: razor-press
  endpoint:
    path: /razor-press
    method: GET
    data_selector: records
- name: razor-ssg
  endpoint:
    path: /razor-ssg
    method: GET
    data_selector: records
- name: react-spa
  endpoint:
    path: /react-spa
    method: GET
    data_selector: records
- name: script
  endpoint:
    path: /script
    method: GET
    data_selector: records
- name: selfhost
  endpoint:
    path: /selfhost
    method: GET
    data_selector: records
- name: svelte-spa
  endpoint:
    path: /svelte-spa
    method: GET
    data_selector: records
- name: vue-desktop
  endpoint:
    path: /vue-desktop
    method: GET
    data_selector: records
- name: vue-mjs
  endpoint:
    path: /vue-mjs
    method: GET
    data_selector: records
- name: vue-nuxt
  endpoint:
    path: /vue-nuxt
    method: GET
    data_selector: records
- name: vue-spa
  endpoint:
    path: /vue-spa
    method: GET
    data_selector: records
- name: vue-ssg
  endpoint:
    path: /vue-ssg
    method: GET
    data_selector: records
- name: vue-vite
  endpoint:
    path: /vue-vite
    method: GET
    data_selector: records
- name: web
  endpoint:
    path: /web
    method: GET
    data_selector: records
- name: web-tailwind
  endpoint:
    path: /web-tailwind
    method: GET
    data_selector: records
- name: worker-rabbitmq
  endpoint:
    path: /worker-rabbitmq
    method: GET
    data_selector: records
- name: worker-redismq
  endpoint:
    path: /worker-redismq
    method: GET
    data_selector: records
- name: worker-servicebus
  endpoint:
    path: /worker-servicebus
    method: GET
    data_selector: records
- name: worker-sqs
  endpoint:
    path: /worker-sqs
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Postman Metadata
  endpoint:
    path: /postman
    method: GET
- name: sitemap
  endpoint:
    path: /sitemap.xml
    method: GET
    data_selector: urlset
- name: sitemap_index
  endpoint:
    path: /sitemap.xml
    method: GET
    data_selector: sitemapindex
- name: CancellableService
  endpoint:
    path: /cancellable-service
    method: POST
    data_selector: response
    params: {}
- name: CancelRequest
  endpoint:
    path: /cancel-request
    method: POST
    data_selector: response
    params: {}
- name: webhook_subscriptions
  endpoint:
    path: /webhooks/subscriptions
    method: POST
    data_selector: ''
    params: {}
- name: hello_event
  endpoint:
    path: /hello
    method: POST
    data_selector: ''
    params: {}
- name: RazorFormat
  endpoint:
    path: /plugins/razorformat
    method: GET
    data_selector: records
- name: login_page
  endpoint:
    path: /auth/credentials
    method: POST
    data_selector: form
    params: {}
- name: contacts_page
  endpoint:
    path: /contacts
    method: POST
    data_selector: form
    params: {}
- name: angular-spa
  endpoint:
    path: https://github.com/NetCoreTemplates/angular-spa
    method: GET
    data_selector: records
- name: blazor
  endpoint:
    path: https://github.com/NetCoreTemplates/blazor
    method: GET
    data_selector: records
- name: blazor-vue
  endpoint:
    path: https://github.com/NetCoreTemplates/blazor-vue
    method: GET
    data_selector: records
- name: blazor-wasm
  endpoint:
    path: https://github.com/NetCoreTemplates/blazor-wasm
    method: GET
    data_selector: records
- name: empty
  endpoint:
    path: https://github.com/NetCoreTemplates/empty
    method: GET
    data_selector: records
- name: grpc
  endpoint:
    path: https://github.com/NetCoreTemplates/grpc
    method: GET
    data_selector: records
- name: mvc
  endpoint:
    path: https://github.com/NetCoreTemplates/mvc
    method: GET
    data_selector: records
- name: mvc-bootstrap
  endpoint:
    path: https://github.com/NetCoreTemplates/mvc-bootstrap
    method: GET
    data_selector: records
- name: mvcauth
  endpoint:
    path: https://github.com/NetCoreTemplates/mvcauth
    method: GET
    data_selector: records
- name: mvcidentityserver
  endpoint:
    path: https://github.com/NetCoreTemplates/mvcidentityserver
    method: GET
    data_selector: records
- name: nextjs
  endpoint:
    path: https://github.com/NetCoreTemplates/nextjs
    method: GET
    data_selector: records
- name: razor
  endpoint:
    path: https://github.com/NetCoreTemplates/razor
    method: GET
    data_selector: records
- name: razor-bootstrap
  endpoint:
    path: https://github.com/NetCoreTemplates/razor-bootstrap
    method: GET
    data_selector: records
- name: razor-pages
  endpoint:
    path: https://github.com/NetCoreTemplates/razor-pages
    method: GET
    data_selector: records
- name: razor-press
  endpoint:
    path: https://github.com/NetCoreTemplates/razor-press
    method: GET
    data_selector: records
- name: razor-ssg
  endpoint:
    path: https://github.com/NetCoreTemplates/razor-ssg
    method: GET
    data_selector: records
- name: react-spa
  endpoint:
    path: https://github.com/NetCoreTemplates/react-spa
    method: GET
    data_selector: records
- name: script
  endpoint:
    path: https://github.com/NetCoreTemplates/script
    method: GET
    data_selector: records
- name: selfhost
  endpoint:
    path: https://github.com/NetCoreTemplates/selfhost
    method: GET
    data_selector: records
- name: svelte-spa
  endpoint:
    path: https://github.com/NetCoreTemplates/svelte-spa
    method: GET
    data_selector: records
- name: vue-desktop
  endpoint:
    path: https://github.com/NetCoreTemplates/vue-desktop
    method: GET
    data_selector: records
- name: vue-mjs
  endpoint:
    path: https://github.com/NetCoreTemplates/vue-mjs
    method: GET
    data_selector: records
- name: vue-nuxt
  endpoint:
    path: https://github.com/NetCoreTemplates/vue-nuxt
    method: GET
    data_selector: records
- name: vue-spa
  endpoint:
    path: https://github.com/NetCoreTemplates/vue-spa
    method: GET
    data_selector: records
- name: vue-ssg
  endpoint:
    path: https://github.com/NetCoreTemplates/vue-ssg
    method: GET
    data_selector: records
- name: vue-vite
  endpoint:
    path: https://github.com/NetCoreTemplates/vue-vite
    method: GET
    data_selector: records
- name: web
  endpoint:
    path: https://github.com/NetCoreTemplates/web
    method: GET
    data_selector: records
- name: web-tailwind
  endpoint:
    path: https://github.com/NetCoreTemplates/web-tailwind
    method: GET
    data_selector: records
- name: worker-rabbitmq
  endpoint:
    path: https://github.com/NetCoreTemplates/worker-rabbitmq
    method: GET
    data_selector: records
- name: worker-redismq
  endpoint:
    path: https://github.com/NetCoreTemplates/worker-redismq
    method: GET
    data_selector: records
- name: worker-servicebus
  endpoint:
    path: https://github.com/NetCoreTemplates/worker-servicebus
    method: GET
    data_selector: records
- name: worker-sqs
  endpoint:
    path: https://github.com/NetCoreTemplates/worker-sqs
    method: GET
    data_selector: records
- name: RazorRockstars
  endpoint:
    path: /RazorRockstars/CompiledViews
    method: GET
    data_selector: examples
    params: {}
- name: ServiceStack.Gap
  endpoint:
    path: /ServiceStack/Gap
    method: GET
    data_selector: examples
    params: {}
- name: default_page
  endpoint:
    path: /default.cshtml
    method: GET
- name: rockstars
  endpoint:
    path: /rockstars
    method: GET
- name: TypedModelNoController
  endpoint:
    path: /TypedModelNoController
    method: GET
- name: vuetify_markdown_editor
  endpoint:
    path: /vue-components/vuetify-markdown-editor
    method: GET
    data_selector: editor
    params: {}
- name: hero_backgrounds
  endpoint:
    path: /vue-components/hero-backgrounds
    method: GET
    data_selector: backgrounds
    params: {}
- name: image_upload_component
  endpoint:
    path: /vue-components/image-upload
    method: GET
    data_selector: fileUpload
    params: {}
- name: ajaxSubmit
  endpoint:
    path: /ajaxSubmit
    method: POST
    data_selector: response
    params: {}
- name: parseResponseStatus
  endpoint:
    path: /parseResponseStatus
    method: POST
    data_selector: response
    params: {}
- name: combinePaths
  endpoint:
    path: /combinePaths
    method: POST
    data_selector: response
    params: {}
- name: createUrl
  endpoint:
    path: /createUrl
    method: POST
    data_selector: response
    params: {}
- name: contact
  endpoint:
    path: /contacts/{id}
    method: GET
    data_selector: contact
    params: {}
- name: ServiceStack ASP.NET HttpHandler
  endpoint:
    path: /
    method: POST
    data_selector: ServiceStack.HttpHandlerFactory
    params: {}
- name: ServiceStack at /api custom path
  endpoint:
    path: /api
    method: POST
    data_selector: ServiceStack.HttpHandlerFactory
    params: {}
- name: hello_service
  endpoint:
    path: /hello/{Name}
    method: GET
    data_selector: Result
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: Results
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: Results
- name: customer
  endpoint:
    path: /customers/{Id}
    method: GET
    data_selector: ''
- name: create_customer
  endpoint:
    path: /customers
    method: POST
    data_selector: ''
- name: update_customer
  endpoint:
    path: /customers/{Id}
    method: PUT
    data_selector: ''
- name: delete_customer
  endpoint:
    path: /customers/{Id}
    method: DELETE
    data_selector: ''
- name: Dump
  endpoint:
    path: /dump
    method: GET
    data_selector: results
- name: admin
  endpoint:
    path: /admin
    method: GET
    data_selector: records
- name: file_upload
  endpoint:
    path: /file-upload
    method: POST
    data_selector: files
    params: {}
- name: Image Resize
  endpoint:
    path: /Get/Resize
    method: GET
    data_selector: Stream
    params: {}
- name: Image Crop
  endpoint:
    path: /Get/Crop
    method: GET
    data_selector: Stream
    params: {}
- name: IContainer
  endpoint:
    path: /ServiceStack.Common/SimpleContainer.cs
    method: GET
    data_selector: interface
    params: {}
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: records
- name: upload
  endpoint:
    path: /auth/credentials
    method: POST
    data_selector: records
    params:
      UseTokenCookie: 'true'
- name: Memory Cache
  endpoint:
    path: /caching/memory
    method: GET
- name: Redis
  endpoint:
    path: /caching/redis
    method: GET
- name: OrmLite
  endpoint:
    path: /caching/ormlite
    method: GET
- name: Memcached
  endpoint:
    path: /caching/memcached
    method: GET
- name: Aws DynamoDB
  endpoint:
    path: /caching/aws-dynamodb
    method: GET
- name: Azure Table Storage
  endpoint:
    path: /caching/azure-table-storage
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: customer_details
  endpoint:
    path: /customers/{customerId}
    method: GET
- name: customer_orders
  endpoint:
    path: /customers/{customerId}/orders
    method: GET
- name: settings_package
  endpoint:
    path: /deploy/package
    method: POST
    data_selector: settings
- name: ssl_installation
  endpoint:
    path: /install/ssl
    method: POST
    data_selector: ssl
- name: CachedServiceClient
  endpoint:
    path: /CachedServiceClient
    method: GET
- name: CachedHttpClient
  endpoint:
    path: /CachedHttpClient
    method: GET
- name: updateS3
  endpoint:
    path: /updateS3
    method: POST
    data_selector: result
- name: AutoQuery
  endpoint:
    path: /autoquery/
    method: GET
    data_selector: records
- name: Server Events
  endpoint:
    path: /server-events/
    method: GET
    data_selector: records
- name: Postman
  endpoint:
    path: /postman/
    method: GET
    data_selector: records
- name: Todo
  endpoint:
    path: /Todo
    method: GET
    data_selector: items
    params: {}
- name: Customer
  endpoint:
    path: /Customer
    method: POST
    data_selector: records
    params: {}
- name: Order
  endpoint:
    path: /CustomerOrder
    method: POST
    data_selector: records
    params: {}
- name: Table
  endpoint:
    path: /services/data/vXX.X/sobjects/Table
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /services/data/customers
    method: GET
    data_selector: records
    params: {}
- name: CORS Plugin
  endpoint:
    path: /plugins/corsfeature
    method: GET
    data_selector: CorsFeature
    params: {}
- name: customer
  endpoint:
    path: /customers
    method: GET
    data_selector: customer_details
    params: {}
- name: update_customer
  endpoint:
    path: /customers/update
    method: PUT
    data_selector: update_customer_response
    params: {}
- name: techstacks
  endpoint:
    path: /techstacks
    method: GET
    data_selector: response
    params: {}
- name: marketing
  endpoint:
    path: /marketing
    method: GET
    data_selector: response
    params: {}
- name: finance
  endpoint:
    path: /finance
    method: GET
    data_selector: response
    params: {}
- name: ServiceBusMqServer
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: AzureBlobVirtualFiles
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: AzureTableCacheClient
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: customer
  endpoint:
    path: /v1/customers
    method: POST
    data_selector: customer
- name: charge
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: charge
- name: request_logs
  endpoint:
    path: /requestlogs
    method: GET
    data_selector: logs
- name: request_logs
  endpoint:
    path: /requests
    method: GET
    data_selector: logs
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: records
- name: cards
  endpoint:
    path: /customers/{customerId}/cards
    method: GET
    data_selector: records
- name: subscriptions
  endpoint:
    path: /customers/{customerId}/subscriptions
    method: POST
    data_selector: records
- name: plans
  endpoint:
    path: /plans
    method: GET
    data_selector: records
- name: coupons
  endpoint:
    path: /coupons
    method: GET
    data_selector: records
- name: discounts
  endpoint:
    path: /discounts
    method: DELETE
    data_selector: records
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
- name: postman
  endpoint:
    path: /postman
    method: GET
    data_selector: null
    params: {}
- name: sitemap
  endpoint:
    path: /sitemap.xml
    method: GET
    data_selector: urlset
- name: sitemap_index
  endpoint:
    path: /sitemap.xml
    method: GET
    data_selector: sitemapindex
- name: todo
  endpoint:
    path: /todo
    method: GET
    data_selector: todos
    params: {}
- name: CancellableService
  endpoint:
    path: /cancellableService
    method: POST
    data_selector: response
    params: {}
- name: CancelRequest
  endpoint:
    path: /cancelRequest
    method: POST
    data_selector: cancelResponse
    params: {}
- name: webhook_subscriptions
  endpoint:
    path: /webhooks/subscriptions
    method: POST
    data_selector: null
    params: {}
- name: hello_event
  endpoint:
    path: /hello
    method: POST
    data_selector: null
    params: {}
- name: login_page
  endpoint:
    path: /auth/credentials
    method: POST
    data_selector: null
    params: {}
- name: contacts_page
  endpoint:
    path: /contacts
    method: POST
    data_selector: null
    params: {}
- name: GetPublicKey
  endpoint:
    path: /publickey
    method: GET
    data_selector: PublicKey
- name: EncryptedMessage
  endpoint:
    path: /encryptedmessage
    method: POST
    data_selector: EncryptedBody
- name: Razor Rockstars
  endpoint:
    path: https://github.com/ServiceStackApps/RazorRockstars
    method: GET
    data_selector: projects
    params: {}
- name: ServiceStack.Gap
  endpoint:
    path: https://github.com/ServiceStack/ServiceStack.Gap
    method: GET
    data_selector: projects
    params: {}
- name: default_page
  endpoint:
    path: /default.cshtml
    method: GET
    data_selector: default
    params: {}
- name: home_page
  endpoint:
    path: /home
    method: GET
    data_selector: home
    params: {}
- name: vuetify_markdown_editor
  endpoint:
    path: /vuetify-markdown-editor
    method: GET
    data_selector: records
    params: {}
- name: hero_backgrounds
  endpoint:
    path: /hero-backgrounds
    method: GET
    data_selector: records
    params: {}
- name: image_upload_component
  endpoint:
    path: /image-upload-component
    method: GET
    data_selector: records
    params: {}
- name: AppOverview
  endpoint:
    path: /AppOverview
    method: POST
    data_selector: response
- name: CreateContact
  endpoint:
    path: /contacts
    method: POST
    data_selector: result
- name: GetContact
  endpoint:
    path: /contacts/{id}
    method: GET
    data_selector: result
- name: DeleteContact
  endpoint:
    path: /contacts/{id}
    method: DELETE
    data_selector: result
- name: dto
  endpoint:
    path: /AddServiceStackReference
    method: POST
    data_selector: records
- name: Form Loading
  endpoint:
    path: /form/loading
    method: GET
    data_selector: response
    params: {}
- name: Server initiated actions
  endpoint:
    path: /server/actions
    method: GET
    data_selector: response
    params: {}
- name: ajaxSubmit
  endpoint:
    path: /ajax/submit
    method: POST
    data_selector: response
    params: {}
- name: parseResponseStatus
  endpoint:
    path: /response/status
    method: GET
    data_selector: response
    params: {}
- name: combinePaths and createUrl
  endpoint:
    path: /combine/paths
    method: GET
    data_selector: response
    params: {}
- name: contact
  endpoint:
    path: /contacts/{id}
    method: GET
    data_selector: contact
- name: dtos
  endpoint:
    path: /
    method: GET
    data_selector: dtos
    params: {}
- name: ServiceStack
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: ServiceStack API
  endpoint:
    path: /api
    method: GET
    data_selector: records
- name: Hello
  endpoint:
    path: /hello/{Name}
    method: GET
    data_selector: Result
    params: {}
- name: MarkdownFormat
  endpoint:
    path: /plugins/markdown
    method: GET
- name: CustomMarkdownPage
  endpoint:
    path: /custommarkdown
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: Results
- name: customer
  endpoint:
    path: /customers/{Id}
    method: GET
    data_selector: Customer
- name: create_customer
  endpoint:
    path: /customers
    method: POST
    data_selector: Customer
- name: update_customer
  endpoint:
    path: /customers/{Id}
    method: PUT
    data_selector: Customer
- name: delete_customer
  endpoint:
    path: /customers/{Id}
    method: DELETE
- name: admin
  endpoint:
    path: /admin
    method: GET
    data_selector: records
    params: {}
- name: auth
  endpoint:
    path: /auth
    method: GET
- name: auth_logout
  endpoint:
    path: /auth/logout
    method: GET
- name: auth_credentials
  endpoint:
    path: /auth/credentials
    method: POST
- name: auth_register
  endpoint:
    path: /register
    method: POST
- name: logout
  endpoint:
    path: /auth/logout
    method: GET
- name: authenticate
  endpoint:
    path: /auth/credentials
    method: POST
- name: project
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
- name: environment
  endpoint:
    path: /api/environments
    method: GET
    data_selector: environments
- name: AWS Instance
  endpoint:
    path: /deploy-multiple-sites-to-aws
    method: GET
- name: settings_package
  endpoint:
    path: /deploy/settings/package
    method: POST
    data_selector: package
    params: {}
- name: ssl_certificate
  endpoint:
    path: /deploy/ssl/certificate
    method: POST
    data_selector: certificate
    params: {}
- name: application_package
  endpoint:
    path: /deploy/application/package
    method: POST
    data_selector: application
    params: {}
- name: s3_virtual_files
  endpoint:
    path: /s3_virtual_files
    method: GET
    data_selector: records
- name: email_contact
  endpoint:
    path: /email_contact
    method: POST
    data_selector: records
- name: todo
  endpoint:
    path: /todo
    method: GET
    data_selector: records
- name: Todo
  endpoint:
    path: /
    method: POST
    data_selector: TableNames
    params: {}
- name: Customer
  endpoint:
    path: /Customer
    method: POST
    data_selector: records
- name: Order
  endpoint:
    path: /Order
    method: POST
    data_selector: records
- name: customers
  endpoint:
    path: /services/data/vXX.X/sobjects/Customer
    method: GET
    data_selector: records
    params: {}
- name: ElastiCache Cluster
  endpoint:
    path: /elasticache/home
    method: GET
    data_selector: nodes
    params:
      environment: Production
- name: ServiceBusMqServer
  endpoint:
    path: /ServiceBusMqServer
    method: POST
    data_selector: ServiceDto
    params: {}
- name: AzureBlobVirtualFiles
  endpoint:
    path: /AzureBlobVirtualFiles
    method: POST
    data_selector: AzureBlobVirtualFiles
    params: {}
- name: AzureTableCacheClient
  endpoint:
    path: /AzureTableCacheClient
    method: POST
    data_selector: AzureTableCacheClient
    params: {}
- name: customers
  endpoint:
    path: /v1/customers
    method: POST
    data_selector: customer
- name: charges
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: charge
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
- name: cards
  endpoint:
    path: /customers/{customerId}/cards
    method: GET
    data_selector: cards
- name: subscriptions
  endpoint:
    path: /customers/{customerId}/subscriptions
    method: GET
    data_selector: subscriptions
- name: plans
  endpoint:
    path: /plans
    method: GET
    data_selector: plans
- name: coupons
  endpoint:
    path: /coupons
    method: GET
    data_selector: coupons
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
- name: install_redis
  endpoint:
    path: /install-redis-windows
    method: GET
    data_selector: instructions
    params: {}
- name: todo
  endpoint:
    path: /todo
    method: GET
    data_selector: todos
    params: {}
- name: GetPublicKey
  endpoint:
    path: /publickey
    method: GET
- name: EncryptedMessage
  endpoint:
    path: /
    method: POST
- name: dto
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: MarkdownConfig
  endpoint:
    path: /markdown/config
    method: GET
    data_selector: config
- name: MarkdownViewBase
  endpoint:
    path: /markdown/viewbase
    method: GET
    data_selector: viewbase
- name: authenticate
  endpoint:
    path: /auth
    method: POST
- name: logout
  endpoint:
    path: /auth/logout
    method: POST
notes:
- The Add ServiceStack Reference dialog will default to dtos.kt for Kotlin DTOs.
- AutoQuery Services are ServiceStack Services, utilizing the same Request Pipeline.
- AutoQuery enables a highly productive platform capable of rapidly developing a majority
  of App's CRUD functionality.
- GET Authenticate Requests are disabled by default to discourage sending confidential
  information in the URL.
- 1 Class = 1 Table
- Simplicity - typed, wrist friendly API for common data access patterns.
- High performance - with support for indexes, text blobs, etc.
- AutoQuery Services are just normal ServiceStack Services, utilizing the same Request
  Pipeline which can be mapped to any user-defined route.
- Locode is a feature built into ServiceStack that provides a user-friendly interface
  to manage data using AutoQuery CRUD services.
- ServiceStack's gRPC support enables a highly productive development environment
  for developing high-performance gRPC HTTP/2 Services.
- Uses AutoQuery for rapid development of high-performance APIs.
- Supports querying various data sources including RDBMS and in-memory data.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- To provide the simplest and seamless end-to-end gRPC solution we're maintaining
  a public gRPC protoc Service and UI.
- Local .proto files aren't necessary for ServiceStack gRPC Services with gRPC clients
  only needing a URL.
- ServiceStack gRPC adds a number of useful features to simplify and provide a richer
  gRPC Services development experience
- The feature-rich Blazor WASM Tailwind template is ideal for teams with strong C#
  skills building Line Of Business (LOB) applications who prefer utilizing Tailwind's
  modern utility-first CSS design system to create beautiful, instant-loading Blazor
  WASM Apps.
- Utilizes Tailwind's modern utility-first CSS design system to create beautiful,
  instant-loading Blazor WASM Apps.
- The new InteractiveAuto mode in Blazor for .NET 8 provides the best of both worlds
  for Blazor applications.
- ServiceStack lets you define Any() services which can be invoked when called on
  each HTTP Method.
- To minimize gRPC surface area pollution, by default ServiceStack only generates
  different rpc endpoints for HTTP's primary Get*, Post*, Put* and Delete* verbs.
- Self-hosted private gateway to keep AI operations behind firewalls, limit access
  with API Keys
- Dark Mode support included in all ServiceStack.Blazor components
- Allows overriding users' color scheme preference with query params
- Filtering and Sorting are disabled for complex type columns by default
- Pre-configured with ASP.NET Core Identity Auth, including Sign In and Custom Registration
  APIs and UI Pages which can be customized as needed.
- Avoid sharing sensitive information via dependency injection, as this will be available
  to the client at runtime which will be able to be decompiled and inspected.
- Uses a proxy rule needed for every user-defined API route
- Requires setup of connected app
- Utilizes the ServiceStack.Blazor library containing integrated functionality for
  Blazor including an optimal JSON API HttpClient Factory
- Includes built-in UI components for rapid development of CRUD UIs in Blazor
- All ServiceStack.Blazor components take advantage of Tailwind DarkMode support to
  include full support for Dark Mode.
- Secured out-of-the-box, this template integrates seamlessly with ASP.NET Core Identity
- Uses Angular's newer Signal for reactivity
- FallbackAssetsBasePath allows you to specify a fallback path for Images.
- AssetsBasePath can be used for specifying a different primary CDN location.
- Uses ServiceStack API integration with a single proxy rule for all APIs
- Requires setup of connected app for Identity Auth
- Both `razor` and `script` project enjoy Hot Reloading where in development a long
  poll is used to detect and reload changes in the current Template Page or static
  files in `/wwwroot`.
- The '/api' route is particularly useful in Jamstack Apps as it improves the latency
  of GET and POST API Requests.
- Seamless integration with ServiceStack and follows its recommended Physical Project
  Structure
- Both razor and script project enjoy Hot Reloading where in development a long poll
  is used to detect and reload changes in the current Template Page or static files
  in /wwwroot.
- .NET Core projects can also benefit from Live Coding using dotnet watch which performs
  a 'watched build' where it automatically stops, recompiles and restarts your .NET
  Core App when it detects source file changes.
- AWS Lambda Containers allows the use of standard docker tooling with AWS serverless
  offering which for low traffic volume applications or APIs can be an extremely cost
  effective way of hosting an application.
- AWS provides a Lambda free-tier of 1M requests and 400,000GB-seconds of compute
  time per month.
- Bootstrapped with Nuxt.js + Vuetify.js starter template
- Uses OAuth2 for GitHub token authentication.
- Apps can be launched from URLs using the app:// URL Scheme.
- ASP.NET Core 2.1 LTS is still a great rock-solid platform to build on if you're
  unable to jump directly to .NET Core
- Support for whether a .NET Standard 2.0 library will run on the .NET Framework depends
  on whether external dependencies also support this scenario
- Just like any AWS Lambda application or function, the latency impacts of 'cold starts'
  are something that can impact user experience significantly depending on your expected
  traffic load.
- Razor Press is optimized for creating documentation and content-centric websites
- Includes customizable sidebar menus and document page navigation
- Apps can also be launched from private Gists and Repos by either having end users
  configure the GitHub Access Token with access to the private gist or repo in the
  GITHUB_TOKEN Environment variable or can be specified in the URL or command-line.
- Webpack powers many npm-based Single Page App templates to enable a flexible and
  feature-rich development model.
- ASP.NET Core 2.1 LTS is still a fantastic rock-solid platform to run your .NET Framework
  workloads when you need to.
- No formal task solution in dotnet projects
- Uses npm scripts for project templates
- Cross platform scripts supported
- All new Single Page App Project Templates have been pre-configured to use these
  libraries.
- All ServiceStack Projects can be created using the .NET Core x dotnet tool
- Webpack builds a graph of your App's dependencies which it traverses starting from
  its entry points
- The configuration is customized per build type where the optimal configuration is
  used in development for faster builds and easier debuggability whilst production
  builds are optimized for performance, size and cacheability
- Integrated Auth including dynamic menu, protected pages, auth redirect flow inc.
  Forbidden pages.
- Webpack dev server has built-in Live Reload feature
- Running 'dev-server' npm script launches the Webpack dev server listening at 'http://localhost:3000/'
- Using npm scripts is a prevalent convention for project templates
- Pages and Components requiring Authentication should inherit from AppAuthComponentBase
- Uses prerendering to improve perceived performance.
- Prerendered pages are located in the /prerender folder.
- Integrated Auth including dynamic menu, protected pages, auth redirect flow inc.
  Forbidden pages
- Use ?format=json to change the response format to JSON.
- The x dotnet tool can create every project template
- Uses prerendering to enhance perceived performance
- Pre-rendered content is served for SEO optimization
- Built-in minifiers optimize existing websites without requiring additional tooling.
- Single Page App templates utilize cssIncludes for inlining CSS files.
- To change the return format to Json, simply add ?format=json to the end of the URL.
- A nice benefit of this approach is that it doesn't pollute your project with minified
  build artifacts.
- Minification of Razor Views is easily enabled by specifying MinifyHtml=true when
  registering the RazorFormat plugin.
- ServiceStack provides a simple, fast, versatile and highly-productive full-featured
  Web and Web Services Framework.
- Uses built-in minifiers for optimizing existing websites without additional tooling
  or build steps.
- Minification of Razor Views is easily enabled by specifying MinifyHtml=true when
  registering the RazorFormat plugin
- Recommended option if you're caching Razor Pages to use UseAdvancedCompression=true
- All ServiceStack's ASP .NET Core Identity Auth Tailwind Templates have been upgraded
  to Tailwind CSS v4.0.
- Using npx without node_modules is no longer possible in Tailwind v4.
- AutoGen enables programmatically customizable code generation.
- Generated classes can optionally be 'ejected' for code-first development.
- All ServiceStack's ASP .NET Core Identity Auth Tailwind Templates have been upgraded
  to Tailwind CSS v4.0
- 'ServiceStack Versions adopt a 3-part versioning scheme: {MAJOR}.{MINOR}.{PATCH}'
- All ServiceStack packages are published together in 'lockstep' with the same version
  number.
- ServiceStack Services only need to implement the IService empty interface.
- All Services are accessible by their pre-defined routes.
- Uses Request DTOs to define inputs and outputs for services.
- Supports multiple HTTP verbs with an Any() method.
- One limitation of Services is that you can't split the handling of a single Resource
  (i.e. Request DTO) over multiple service implementations.
- Partial Content Support allows a resource to be split up and accessed in multiple
  chunks for clients that support HTTP Range Requests.
- The implementation of each Services then becomes straight-forward based on these
  messages, which (depending on code-base size) we'd recommend organizing in 2 EventsService
  and EventReviewsService classes.
- Although UpdateEvent and CreateEvent are seperate Services here, if the use-case
  permits they can instead be handled by a single idempotent StoreEvent Service.
- ServiceStack encourages a message-based design.
- ServiceStack encourages a message-based design for services.
- ServiceStack can return naked collections that don't require a ResponseStatus property.
- Modular Startup configurations are flexible enough to encapsulate customizing ASP.NET
  Core's IOC and the built WebApplication by registering a IStartupFilter.
- Easier to update, less chance of unintended side effects, easier to share standard
  configuration amongst multiple projects.
- Remembering also that infrastructure like your Dockerfile or host will likely need
  the runtimes/SDKs updated as well.
- Both `x` and `app` have equivalent base functionality, whilst `app` has superset
  Windows-only Desktop features.
- values prefixed with '$' are resolved from Environment Variables
- 'Note: values prefixed with ''$'' are resolved from Environment Variables'
- npx get-dtos can be used to generate DTOs for any ServiceStack API.
- All templates now use https://localhost:5001 and configured to use Same Site Cookies
  by default
- app includes a number of features and deep integration with GitHub that makes running
  .NET Core Chromium Desktop Apps a seamless experience.
- The app dotnet tool contains features for "Chromitizing" any .NET Core Web App into
  a .NET Core Windows Desktop App.
- Chrome Desktop Apps provide value with easy access to advanced Web technologies.
- Requires GitHub Access Token with gist scope
- This feature allows browsing and searching for registered users in an Auth Repository.
- Requires Auth
- Routes with an associated HTTP Verb only allows access with that specific verb
- Limit updates to TechStack to Owner or Admin users
- The -cookies Authentication option is the most versatile as it supports standard
  Server Sessions as well as stateless Authentication options.
- ServiceStack encourages typed service clients for easy request construction.
- ServiceStack achieves a lot of its simplicity and reuse by being able to reuse the
  same POCOs indiscriminately anywhere to interface and freely communicate between
  its different libraries and components.
- DTOs should be logic and dependency-free so the only dependency the ServiceModel
  project references is the impl-free `ServiceStack.Interfaces.dll`.
- API Explorer is powered by the rich API metadata provided by the MetadataFeature
  and can be customized through the UiFeature plugin.
- Create a new room Booking for our hotels.
- Required annotations are only documentative; your API still has to validate required
  reference types.
- Protected API limited to Authenticated Users with the Employee role
- Generated forms default to a two column layout, but this can be controlled using
  FormLayout for a specific operation.
- Comprehensive API Analytics is available to all ServiceStack Apps configured with
  SQLite Request Logging.
- Interactive Analytics are also available which allows drilling down to monitor activity
  of individual APIs, Users, API Keys and IPs.
- Admin UI is only accessible to Admin Users
- Claims added to Roles have similar behavior to having Claims individually applied
  to all Users with that Role.
- An IAuthRepository is a required registered dependency to be able to use the AdminUsersFeature
  plugin.
- Admin UI is only accessible to Admin Users for managing Identity Auth users.
- 'Changing your App''s Redis Configuration at runtime can be enabled with: Plugins.Add(new
  AdminRedisFeature { ModifiableConnection = true });'
- By default Redis Admin blocks running dangerous and unsuitable commands from a Web
  interface.
- Any Added or Removed Claims are only applied after clicking Update Role.
- Allows exporting data in CSV format
- Customizations available for resultsets and filtering options
- Validation rules are cached in memory after the first access.
- Requires authentication setup for API access
- Changing Redis Configuration at runtime can be enabled with ModifiableConnection.
- Redis Admin blocks running dangerous and unsuitable commands by default.
- Profiling should only be added when used, e.g. during development or when needing
  to debug production issues.
- DB Validation feature leverages existing Declarative Validation infrastructure.
- Validation rules added on Startup can enforce minimum validation rules.
- If desired, the /admin-ui features can be selectively or entirely disabled using
  the AdminUi Enum flags.
- Enables invaluable observability into your App, from being able to quickly inspect
  and browse incoming requests, to tracing their behavior.
- DebugMode should be not be `true` when deployed to production.
- Limit API access to users in role
- Turn On/Off Session Tracking
- Turn On/Off Logging of Raw Request Body, default is Off
- Turn On/Off Tracking of Responses
- Turn On/Off Tracking of Exceptions
- By default all dependencies registered in Funq have singleton scope, where the same
  instance is injected into all dependencies.
- 'Due to a behavior of StructureMap, you need your AppHost declare as internal, eg:
  internal class AppHost : AppHostBase'
- All dependencies, Services and Plugins should now be registered in IServiceCollection.
- ServiceStack Services support property injection convention by using the [FromServices]
  attribute.
- Admin UI features can be selectively or entirely disabled using the AdminUi Enum
  flags.
- Dynamic validation rules can be applied & modified at runtime.
- Pre-defined routes available for all services
- Fallback routes can be specified for unmatched routes
- Consider "pretty-urls" for public pages
- Permalinks important for SEO, usability and refactorability
- Pre-defined Routes are optimal for machines
- Optimize Custom Routes for humans
- Designing Clean URLs
- Get Inspired by GitHub
- DebugMode should not be true when deployed to production.
- Feature specific configuration for AutoQuery includes MaxLimit set to 100.
- Rate limiting helps ensure fair usage, maintains performance and availability, and
  defends against denial-of-service attacks.
- Basic setup includes a fixed window rate limiter with a limit of 100 requests per
  minute.
- ServiceStack uses a slightly modified version of Funq - which was adopted because
  of its excellent performance and memory characteristics.
- Each user will be rate limited independently based on their plan allowance.
- If a user exceeds their personal limit, they will receive a 429 Too Many Requests
  response.
- All new .NET 8+ Project Templates have switched to use Endpoint Routing and ASP.NET
  Core IOC.
- The primary difference between the IOC's is that ASP.NET Core's IOC does not support
  property injection by default.
- Custom HTTP responses can be achieved using various methods such as HttpResult,
  HttpError, and Request/Response Filters.
- Global Request Filters can be used to set custom HTTP headers.
- Uses ServiceStack.Text Serializers for JSON serialization
- Supports customization of JSON responses globally and per request
- 'Uses predefined routes for all services in the format: /api?/[xml|json|html|jsv|csv]/[reply|oneway]/[servicename]'
- The /api route is useful in Jamstack Apps for improving latency.
- Uses standard HTTP methods for routing
- Content negotiation can be achieved using Accept header or query string format
- In general it's not a good idea to let a technology to dictate what your public
  routes end up being.
- Ideally your external routes should be regarded as permalinks and decoupled from
  their internal implementations.
- Pretty URLs provide important usability and accessibility benefits to non technical
  users.
- Use Custom Routes to make your Services available at the optimal Clean URLs for
  humans.
- AppSettings can be read from appsettings.txt or Web.config
- AppSettings are writable with a new Set() API
- Metadata page provides automatic generated documentation around services
- Uses Endpoint Routing with ASP.NET Core
- Migration guide available for upgrading existing projects
- ServiceStack's APIs are authorized using Declarative Validation attributes converted
  into ASP.NET Core's [Authorize] attribute.
- The default behavior of MapEndpoints() is the strictest and recommended configuration.
- Open AI providers are maintained in the ServiceStack.AI NuGet Package
- Rate limiting is an important technique for protecting web APIs and applications
  from excessive traffic and abuse.
- By throttling the number of requests a client can make in a given time period, rate
  limiting helps ensure fair usage, maintains performance and availability, and defends
  against denial-of-service attacks.
- Supports multiple Speech-to-Text and ChatGPT providers.
- Uses modular startup for configuration.
- By combining ASP.NET Core rate limiting with ASP.NET Core Identity in this way,
  you can implement flexible, per-user rate limiting suitable for multi-tenant SaaS
  applications.
- Google Cloud configures their Security credentials differently to other providers
  where instead of storing Bearer Tokens or connection strings in Environment Variables,
  their GOOGLE_APPLICATION_CREDENTIALS Environment Variable is used to instead specify
  the path where the actual JSON credentials are stored on disk.
- To use any of the Google Cloud providers your pc needs to be configured with GoogleCloud
  Credentials on a project with Speech-to-Text enabled.
- Provides multiple ways to customize HTTP responses.
- Supports short-circuiting the Request Pipeline.
- A simple workaround you can do in your GitHub Actions release.yml instead is to
  Base64 encode the credentials which can then be passed as a Docker secret.
- ServiceStack uses the ServiceStack.Text Serializers for its built-in JSON/JSV and
  CSV serialization.
- SVGs can be registered programmatically using the Svg class.
- SVG images can be loaded from a custom directory.
- Instead of building verbose nested XML configSection classes our preference is to
  instead store structured configuration in Web.config's <appSetting/> which can still
  express rich config graphs but in a much more human-friendly and manageable way.
- ServiceStack's pluggable IAppSettings API is a cleaner alternative for storing your
  Application structured configuration.
- 'Uses SVG images in CSS and #Script pages'
- Provides methods to embed SVG images directly in Razor Pages
- AppSettings can be accessed directly in AppHost.Configure()
- Writable AppSettings via Set() API added to IAppSettings
- ServiceStack supports different formats (JSON, XML, etc).
- The metadata page contains a list of all visible web services and the endpoints
  they're accessible on.
- Metadata pages provide automatic generated documentation around your services, allowing
  consumers of your APIs to more easily introspect.
- Easily switch between different Speech-to-Text providers.
- Recommended to install GStreamer to support more audio formats.
- AI features can be added to .NET Apps with ServiceStack.AI providers.
- Audio Voice Recordings can be uploaded to preferred Virtual File System providers.
- SOAP expects that each request always returns the same response DTO.
- All DTO models must have [DataContract] attribute and [DataMember] for all properties.
- Google Cloud Speech-to-Text APIs supports the ability to improve transcription results
  by creating Custom PhraseSets and Recognizers
- Return null to continue with default error handling
- ServiceStack.AI provides abstractions for various AI providers.
- Google Cloud requires valid credentials for Speech-to-Text.
- Unfortunately passing the JSON configuration file as-is is incompatible with Docker
  Secrets for when you want Production App's credentials maintained outside of the
  Source Code repository.
- ServiceStack provides a rich array of error handling options that work intuitively
  out-of-the-box.
- All Error handling and validation options described are serialized into the ResponseStatus
  property of your Response DTO.
- 'If the rule fails, the JSON response will look like that: { ''ErrorCode'': ''ShouldNotBeEmpty'',
  ''FieldName'': ''Name'', ''Message'': ''''Name'' should not be empty.'' }'
- Azure AI Speech only supports limited Audio formats.
- All Services and Validators used in this App.
- Contacts UIs and Contacts Services are protected resources.
- SVG's are typically small in size and have great support in browsers where they
  can be optimally cached in .css style sheets to reduce the number of required image
  requests.
- Uses untyped string expressions for validation
- ServiceStack is capable to support different formats (JSON, XML, etc).
- 'ServiceStack allows additional debug information when in DebugMode, which is automatically
  set by default in Debug builds or explicitly with: SetConfig(new HostConfig { DebugMode
  = true });'
- Users with the Admin role or Requests with an AuthSecret can also view Debug Info
  in production.
- You can configure Strict Mode in ServiceStack to enforce stricter behavior and have
  it throw Exceptions when it sees certain failure conditions.
- Users in the Admin role have super-user access giving them access to any services
  or plugins protected with Roles and Permissions.
- ServiceStack's Request Info feature is useful for debugging requests.
- Add ?debug=requestinfo in your /pathinfo to debug HTTP Request parameters.
- The RequestInfoFeature is only enabled in DebugMode.
- 'Naming convention for DTOs: {Request DTO Name} + Response.'
- Default mapping of C# Exceptions to HTTP Errors returns ArgumentException, SerializationException,
  FormatException as 400 BadRequest; NotImplementedException, NotSupportedException
  as 405 MethodNotAllowed; FileNotFoundException as 404 NotFound; AuthenticationException
  as 401 Unauthorized; UnauthorizedAccessException as 403 Forbidden; OptimisticConcurrencyException
  as 409 Conflict; All other normal C# Exceptions as 500 InternalServerError.
- Error Response varies based on existence of a conventionally-named {RequestDto}Response
  DTO.
- Uses BasicAuth by default
- Client can automatically retry requests with Basic/Digest Auth headers if challenged
  by the Server
- All REST and ServiceClients share the same interfaces (`IServiceClient`, `IRestClient`
  and `IRestClientAsync`) so they can easily be replaced (for increased perf/debuggability/etc)
  with a single line of code.
- All error handling and validation options are treated in the same way - serialized
  into the ResponseStatus property of your Response DTO.
- By default display StackTraces in your Response DTOs are disabled, but they're a
  good to have for development.
- ServiceStack adds another extension method named RuleSet which can handle ApplyTo
  enum flags.
- Configured to not use any JSON HTTP Headers to enable more efficient CORS requests
  without preflight requests.
- Basic Auth support is implemented in JsonServiceClient
- The Service Gateway provides an optimal way for executing Services where it will
  transparently execute local requests in process or external requests remotely.
- JWT first-class support for Refresh Token Cookies is implicitly enabled when configuring
  the JwtAuthProvider
- When no longer valid, Auto Refreshes JWT Bearer Token using Refresh Token Cookie
- Add ServiceStack Reference feature allows adding generated Native Types for the
  most popular typed languages and client platforms.
- Options that do not start with a `//` are sent to the server to override any defaults
  set by the server.
- Requires AddDataContractAttributes=true
- ServiceStack's Add ServiceStack Reference feature allows clients to generate Native
  Types from directly within VS.NET.
- TypeScript declarations are just pure static type annotations.
- You can integrate with a ServiceStack service easily from your favorite JetBrains
  IDE when working with TypeScript.
- Uses DTOs generated as JavaScript ES6 classes.
- Basic Auth support is implemented in JsonServiceClient.
- Alternatively you can authenticate using userName/password credentials.
- 'This default behavior can be disabled with: appHost.ConfigurePlugin<ValidationFeature>(feature
  => { feature.ScanAppHostAssemblies = false; });'
- If FluentValidation isn't used for request DTOs, it behaves the same as documented
  in the Fluent Validation documentation.
- Supports Raw Data responses like string and byte[]
- Supports Basic Auth, JWT, and API Key authentication
- The Contacts Page is representative of a more complex page that utilizes a variety
  of different form controls where the same page is also responsible for rendering
  the list of existing contacts.
- Transparently handle 401 Unauthorized Responses
- Automatically refresh Access Tokens
- All of ServiceStack's Fluent Validation features is encapsulated within the ValidationFeature
  plugin which is pre-registered by default.
- Options that are preceded by a Swift single line comment // are defaults from the
  server that can be overridden
- To override a DTO option, remove '//' prefix before updating
- You can use Config.AdminAuthSecret to specify a special string to give you admin
  access without having to login by adding ?authsecret=xxx to the query string.
- To better highlight the presence of Startup Errors a red warning banner will also
  appear in /metadata pages when in DebugMode.
- HTTP Basic Auth is supported in JsonServiceClient following the implementation in
  .NET Service Client
- The JsonServiceClient initializes a CookieManager in its constructor to enable any
  Cookies received to be added on subsequent requests
- Java generated DTO Types follow camelCase naming convention.
- Gson JSON Serialization rules apply to public DTO fields.
- Uses JsonServiceClient for making API calls
- Supports platform-neutral client interface
- To upload multiple files use postFilesWithRequest.
- Uses BasicAuth and DigestAuth — automatically retries requests if challenged by
  the Server
- All API's are Async under-the-hood where any Sync API's that doesn't return a Task<T>
  just blocks on the Async Task.Result response.
- Is used as a Whitelist to specify only the types you would like to have code-generated
- Is used as a Blacklist to specify which types you would like excluded from being
  generated
- The Service Gateway is implemented on top of ServiceStack's existing message-based
  architecture.
- Server will cache the result by default when not running in HostContext.DebugMode.
- Server Sent Events is a web technology for efficiently receiving push notifications
  from any HTTP Server.
- Browsers automatically detect when a connection is broken and automatically reconnects.
- Server Sent Events is a single long-lived HTTP Request for receiving push notifications.
- Browsers automatically detect when a connection is broken and reconnect.
- Uses built-in Authentication with JWT and Refresh Token Cookies
- Server Events can be configured to use a distributed Redis backend allowing it to
  work across load-balanced app servers
- Uses OAuth2 with refresh token — requires setup of connected app in ServiceStack
- Automatically add a ResponseStatus property on all Response DTOs, regardless if
  it wasn't already defined
- Shares cookies with the WebRequest that connects to the /event-stream.
- JWT Token can be sent in the query string for authentication.
- DTOs can be referenced directly in JavaScript Modules
- Static analysis and intelli-sense can be enabled during development
- When using /types/mjs directly from a script tag, the server will cache the result
  by default when not running in DebugMode.
- This caching process can be disabled if required by using ?cache=false.
- The default url `/event-stream` can be modified with `ServerEventsFeature.StreamPath`
- Uses native `EventSource` object for server events
- Includes built-in support for a number of ServiceStack Auth options including HTTP
  Basic Auth and stateless Bearer Token Auth Providers.
- RedisServerEvents is a drop-in replacement for the built-in MemoryServerEvents.
- Requires a redis-server running on localhost.
- Easy to use library that integrates into existing ServiceStack Apps
- Built-in Management UI for real-time monitoring and management of background jobs
- Uses dataclasses for DTOs with support for JSON serialization
- DTOs are generated as Python dataclasses with type hints
- Uses SQLite for persistence, enabling low latency and fast disk persistence.
- Background Jobs Admin UI provides real-time monitoring and management.
- If the server returns a 401 Unauthorized Response, use onAuthenticationRequired
  callback to re-configure the client.
- Supports scheduling recurring tasks to execute APIs or Commands at fixed intervals.
- Scheduled Tasks are idempotent where the same registration with the same name will
  either create or update the scheduled task registration.
- Python developers of PyCharm can get a simplified development experience for consuming
  ServiceStack Services by installing the ServiceStack Plugin.
- Supports Basic Auth, API Key, JWT, and session-based authentication.
- ServiceStack provides a unified platform for building services.
- Supports multiple programming languages and frameworks.
- Automatically fetch new JWT Tokens behind the scenes before automatically retrying
  failed requests due to invalid or expired JWTs
- Commands are registered as transient dependencies.
- Supports Basic Auth, Bearer Token Auth, API Key, and JWT.
- Uses Background Jobs or MQ to execute commands in managed background threads.
- Commands can be executed directly, or through ICommandExecutor.
- Ensure you have PHP and Composer installed.
- The only requirements for PHP apps to perform typed API Requests are the generated
  PHP DTOs and the generic JsonServiceClient.
- Authenticated Requests via MQ require embedding Auth Info in the Request DTO.
- Generated PHP DTOs use the default dtos namespace.
- The BackgroundMqService allows services to be executed in the background.
- Admin role is required to access certain endpoints.
- The header comments in the generated DTO's allows for further customization of how
  the DTO's are generated which can then be updated with any custom Options provided
  using the Update ServiceStack Reference Menu Item in XCode.
- Uses BackgroundMqService to queue long-running tasks
- Does not persist messages across App restarts
- The only additional field is Package, required in order to comply with Java's class
  definition rules.
- As the Module's build.gradle file was modified you'll need to click on the Sync
  Now link in the top yellow banner to sync the build.gradle changes which will install
  or remove any modified dependencies.
- HTTP Basic Auth is supported
- Cookies-enabled Service Client
- RabbitMqServer looks for a Rabbit MQ Server instance on localhost at Rabbit MQ's
  default port 5672.
- Messages that generate exceptions can be re-tried, then published to the dead-letter-queue
  (.dlq)
- Redis is a NoSQL datastore that runs as a network server.
- The first RedisMQ host listening to the 'Hello' message will process the message.
- Trade-off latency vs efficiency when using DisableBuffering
- Polling duration can be configured with TimeSpan.FromMilliseconds()
- Support for registering Azure Service Bus as an MQ Server in ServiceStack is available
  in ServiceStack.Azure NuGet package.
- JWTs encapsulate a signed, stateless Authenticated UserSession
- Automatic saving of Session Cookies in JsonServiceClient
- As the ordering constraint in F# conflicted with the ordering of types by C# namespaces,
  the cleanest approach was to add all DTO's under a single namespace.
- This does mean that each type name needs to be unique which is a best-practice that's
  now a requirement in order to make use of F# native types.
- To run Notebooks on Binder, paste the URL of your public GitHub repo containing
  your Jupyter Notebooks at https://mybinder.org
- For private repositories, host and run your own infrastructure for your BinderHub
  environment.
- To run your Notebooks on Binder head over to mybinder.org and paste the URL of your
  public GitHub repo containing your Jupyter Notebooks to retrieve the generated URL
  for your repo.
- Being able to run the same Docker container locally to iterate on host notebooks
  that are in the same GitHub repository and then commit those changes to share with
  others and to run on MyBinder creates a great way of getting the most out of the
  repeatability that is a part of the Binder solution as well as having the same functionality
  locally to generate reports and share as PDF without needing to regularly rebuild
  the docker image which will slow down iteration.
- When using /types/js directly from a script tag, the server will cache the result
  by default when not running in HostContext.DebugMode.
- Browsers automatically detect when a connection is broken and automatically reconnect.
- Jupyter will generate working directory called .ipynb_checkpoints which you can
  add to your .gitignore
- Default In Memory provider enables sending real-time communications to all clients
  subscribed to the same ServiceStack Instance
- Redis Server Events utilizes a distributed redis-server back-end to provide a scale-out
  option
- Ensure your SSH key is generated using non RSA SHA1 algorithm when deploying to
  an Ubuntu 22.04 server.
- Sensitive information should be stored in GitHub Action Secrets.
- The Server Events Client shares cookies with the WebRequest that connects to the
  /event-stream.
- When using a JWT or API Key AuthProvider, you can send it inside a Cookie.
- Uses GitHub Actions to deploy Dockerized applications via SSH.
- Requires JWT Token Cookie for authentication
- The AndroidServerEventsClient requires the use of an external OkHttp Client dependency.
- The onJoin/onLeave/onUpdate events can be turned off with ServerEventsFeature.NotifyChannelOfSubscriptions=false.
- Requires setup of Docker and Docker Compose on the Linux server
- Uses GitHub Action Secrets for secure credentials
- Spaces in CSS selectors need to be encoded with %20
- The default url /event-stream can be modified with ServerEventsFeature.StreamPath
- The onJoin/onLeave/onUpdate events can be turned off with ServerEventsFeature.NotifyChannelOfSubscriptions=false
- The setup requires Docker and Docker Compose installed on the Linux server.
- NGINX and LetsEncrypt are set up using Docker containers.
- This will require a redis-server running on localhost.
- Durable Background Jobs and Scheduled Tasks for .NET 8 Apps
- Uses SQLite for low latency and fast disk persistence.
- Supports executing existing APIs or versatile Commands.
- Sending Emails is typically not an API you want to make externally available and
  would want to either restrict access or limit usage to specified users.
- Secrets can be shared across multiple repositories in an organization.
- Each deployed application shares the organization-level secrets.
- Kamal enables simple commands to deploy containerized applications to Linux hosts.
- Tasks can be scheduled using TimeSpan or CRON Expression intervals.
- Scheduled Tasks are idempotent.
- Basic Droplet at $5/month is suitable for low traffic applications.
- Enable Floating IP to get a static public IP address for your domain.
- Enable improved container support in GitHub account settings.
- Commands are registered as transient dependencies by default.
- Encapsulated units of logic with a single method to execute.
- Uses a messaging pattern for resilience and scalability.
- MQ Servers are interchangeable and can be monitored from the Admin UI Dashboard.
- This template provides a starting point with AWS ECS while keeping costs to a minimum.
- A dedicated ECS cluster and single EC2 server registered to that cluster are required.
- MQ Requests aren't executed within the Context of a HTTP Request.
- Authenticated Requests via MQ must pass the SessionId into the MQ Request.
- An additional docker compose file is provided via the `x mix` template, `nginx-proxy-compose.yml`
  under the `deploy` directory of your repository.
- Make sure your DNS is all setup before doing this.
- Encrypted Messages have their cookies stripped so they're no longer visible in the
  clear which minimizes their exposure to Session hijacking.
- Uses BackgroundMqService to handle notifications
- Notifications can be retried for failed tasks
- Provides an implementation-free logging interface
- Includes adapters for multiple logging providers
- ServiceStack's Global Request and Response filter lets you apply your own generic
  custom behavior to ServiceStack Requests.
- Async versions are available for GlobalRequestFilters and GlobalResponseFilters.
- Doesn't persist messages across App restarts; recommended to use with external data
  source.
- This lets you can call [/mq/stats](https://techstacks.io/mq/stats.json) to view
  a summary of all messages processed since the last time the App was restarted and
  [/mq/status](https://techstacks.io/mq/status) to view all Queues the Background
  Service is currently listening to and the statistics of each individual MQ worker.
- PublishMessageFilter and GetMessageFilter callbacks can be used to intercept outgoing
  and incoming messages.
- ServiceStack provides a clean, dependency-free IService to implement your Web Services
  logic in.
- ServiceStack's Convenient Service base class already implements IRequiresRequest.
- The ReplyTo address can even be a HTTP Uri
- Redis MQ works by listening for messages published to the central mq:topic:in Redis
  Channel
- Support for registering Amazon Simple Queue Service (SQS) as an MQ Server is available
  in ServiceStack.Aws NuGet package.
- Polling duration used to poll SQS queues can be configured.
- ServiceStack uses JSV-Format (JSON without quotes) to parse QueryStrings.
- ServiceStack serializes and deserializes your DTOs automatically.
- Support for registering Azure Service Bus as an MQ Server in ServiceStack is available
  in ServiceStack.Azure NuGet package
- Jupyter supports over 40 programming languages.
- ServiceStack enables high-level generic functionality like Request Batching.
- ServiceStack includes its own pluggable virtual file system API that lets it support
  multiple filesystem backends.
- Jupyter Commands lets you generate Python Jupyter Notebooks for calling ServiceStack
  APIs in a single command.
- Gist's are the perfect way to capture and share a publicly versionable snapshot
  of files that's validated against a authenticated user account
- GistVirtualFiles provides a transparent VFS abstraction over GitHub's Gist APIs
  so they can be used interchangeably with all other VFS providers
- To enable changing the database connection at runtime, populate the ConnectionInfo
  in a Request Filter.
- You can register a default SQL Server 2012 database and named connections for PostgreSQL
  and SQLite.
- Uses OrmLiteAuthRepositoryMultitenancy for managing User Auth tables per tenant
- The MVC Mini Profiler plugin is only available for classic ASP.NET Framework Web
  Apps.
- For .NET Core Apps you can use the official MiniProfiler.AspNetCore.Mvc NuGet package.
- To run your Notebooks on Binder head over to https://mybinder.org and paste the
  URL of your public GitHub repo containing your Jupyter Notebooks to retrieve the
  generated URL for your repo.
- Hot Reload feature allows instant UI changes on save
- Uses Docker to run Jupyter Notebooks for reporting tasks
- Requires a public GitHub repository for MyBinder to build and host the notebook
  environment
- NavItems collections can be initialized from appsettings.json.
- NavItems can also be created programmatically.
- Navigation items data structure is used with new Navigation Components for each
  JavaScript FX to render the menu navigation.
- ServiceStack provides a rich set of features for building web services.
- Ensure ssh key is generated using non RSA SHA1 algorithm when deploying to an Ubuntu
  22.04 server.
- Uses Docker and Docker Compose for application deployment
- Requires setup of GitHub Secrets for sensitive information
- ServiceStack's Authentication Providers require minimal configuration and support
  different Session Providers and Data Store back-ends.
- The Execute() and ForwardRequestToServiceStack() are high-level API's that call
  into ServiceStack's internal Request pipeline.
- Uses GitHub Actions for CI/CD deployment
- Requires setup of GitHub secrets for deployment
- Requires Docker and Docker Compose installed on the target Linux server
- Secrets must be set in GitHub repository settings
- ServiceStack doesn't have a configurable concurrency model per AppHost, it is dependent
  upon the AppHost that your ServiceStack services are hosted with.
- For ASP.NET web hosts, ServiceStack doesn't create any new threads itself, the requests
  are simply handled on the same IIS/Nginx/etc ASP.NET HTTP WebWorker that handles
  the request.
- The default Self-Host HttpListener option for ServiceStack executes requests on
  the SmartThreadPool. By default, it executes on Environment.ProcessorCount * 2 or
  a maximum of 16 worker threads.
- The default poolSize of the ThreadPool is 500 threads for HttpListener Pool Self-Host.
- This module prevents the asp.net built in FormsAuthenticationModule from hijacking
  401 requests and redirecting to a login page.
- This module uses a hack to get this done by temporarily replacing the 401 error
  with a 402.
- GitHub Secrets are used for sensitive information.
- ServiceStack supports various content types including JSON, XML, CSV, JSONL, JSV,
  SOAP, Message Pack, and Protocol Buffers.
- Some objects may return nulls in deeply nested fields
- ServiceStack.Text is an independent, dependency-free serialization library containing
  ServiceStack's core high-performance utils and text processing functionality, including
  its premier support for JSON.
- Secrets are stored in GitHub Actions for sensitive data.
- Uses CamelCaseNamingPolicy for property names
- Supports Case Insensitive Properties
- Not serialize null properties
- Serializes TimeSpan and TimeOnly Data Types with XML Schema Time format
- Supports [DataContract] annotations
- Supports Custom Enum Serialization
- Kamal is built by the BaseCamp team, developers of Hey email service and BaseCamp
  project management tool.
- CSV is an important format for transferring, migrating and quickly visualizing data
- The CSV format is effectively a first-class supported format
- Using Basic Droplet at $5/month is suitable for multiple low traffic applications.
- As most readers familiar with the CSV format will know there are some inherent limitations
  with CSV-format namely it is a flat-structured tabular data format that really only
  supports serialization of a single resultset.
- The second major limitation is that it doesn't yet include a CSV Deserializer (currently
  on the TODO list), so while you can view the results in CSV format you can't post
  data to your web service in CSV and have it automatically deserialize for you.
- The account or organization of your repository at the time of writing needs to 'Enable
  improved container support'.
- The initial deployment might take upto a minute for LetsEncrypt to generate and
  use the certificate with your domain.
- JSV is a text-based format that is optimized for both size and speed.
- JSV is white-space significant.
- This pattern is suitable for testing prototypes or low traffic applications as it
  is cost effective and makes it easy to bundle multiple apps onto 1 EC2 instance.
- Ensure to handle rate limiting properly.
- Ensure you have v2+ of Docker Compose
- The initial deployment might take up to a minute for Lets-Encrypt to generate and
  use the certificate with your domain
- JSON Lines format is similar to the CSV format where each line in the file represents
  a separate JSON object.
- Streaming data directly to and from HTTP APIs can dramatically improve the performance
  of data-intensive applications.
- Clients need to use the real Server's Public Key.
- It's safer to download the public key over a trusted https:// url.
- A new X-PROTOBUF column added for all services on the metadata pages
- New /x-protobuf/syncreply/{Service} and /x-protobuf/asynconeway/{Service} pre-defined
  routes
- Logging API is implementation and dependency-free.
- Supports contextual logging with ILogWithContext interface.
- Global Request Filters allow custom behavior to be applied to ServiceStack Requests.
- Global Response Filters enable modifications to the response after the service call.
- To view the web services in a different format simply append either . or ?format=
  to the query string
- Web service examples were developed before ServiceStack's CSV and HTML format existed.
- No code-changes were required in order to take advantage of the new formats.
- ServiceStack uses [Authenticate] and [RequiredPermission] filter attributes to decorate
  which Services should be protected with authentication or specific permissions
- ServiceStack's features are available on .NET Core.
- Supports running ASP.NET Core Apps on the .NET Framework.
- Uses ASP.NET Team's recommended multi-stage Docker Builds
- ServiceStack's features are maintained within a single code-base enabling excellent
  source-code compatibility.
- For .NET Core Docker deployments we have proper isolation and repeatable no-touch
  deployments.
- ServiceStack uses JSV-Format to parse QueryStrings.
- Custom formats can be registered using ContentTypes.
- One of the best ways to improve performance, efficiency and reduce latency is to
  minimize the number of network requests required.
- ServiceStack is able to enable high-level generic functionality like Request Batching
  which is now implicitly available for all Services.
- Gists are the perfect way to capture and share a publicly versionable snapshot of
  files.
- GistVirtualFiles provides a transparent VFS abstraction over GitHub's Gist APIs.
- To change the DB Connection that can be done by populating the ConnectionInfo in
  any Request Filter in the Request Pipeline.
- You can use a registered NamedConnection for this Request.
- You can use a different DB connection for this Request.
- You can use a different Dialect Provider for this Request.
- Uses OrmLiteAuthRepositoryMultitenancy to maintain isolated User Accounts per tenant
- Requires list of db connection strings for UserAuth tables
- JSON and JSV Text serializers are following .NET Core's default convention to use
  camelCase properties by default.
- Uses ASP.NET Core for hosting
- ServiceStack's HTTP Handlers can be registered as a .NET Core module
- The MVC Mini Profiler plugin is only available for classic ASP.NET Framework Web
  Apps, for .NET Core Apps you can use the official MiniProfiler.AspNetCore.Mvc NuGet
  package.
- Run dotnet dev-certs https --trust to trust the local development certificate.
- You can use local.servicestack.com or dev.servicestack.com for OAuth providers that
  don't allow localhost.
- Hot Reloading support in Sharp Pages enables the HotReloadFilesService when registering
  the SharpPagesFeature.
- Uses SSH to connect to Amazon Linux server
- Create a dedicated user account for hosting .NET Core Apps
- NavItems can be initialized from appsettings.json
- NavItems can be populated programmatically from code
- Create a dedicated user account for hosting and running your .NET Core Apps to mitigate
  potential abuse.
- Use supervisor to monitor dotnet self-hosting processes behind an nginx reverse
  proxy.
- A common way for reliably hosting .NET Core Apps on Linux is to use supervisor to
  monitor the dotnet self-hosting processes behind an nginx reverse proxy.
- Amazon Linux 2 is the next-generation Amazon Linux operating system that provides
  modern application environment.
- Navigation items data structure is embedded in the layout page and loaded once.
- Ensure to assign the appropriate IAM roles and policies for ECS access.
- Use Auto-assign Public IP for EC2 Instances to enable easier access.
- App Tasks allow running one-off tasks without maintaining a separate .exe.
- DB Migration support can be added to existing projects with specified configurations.
- If you don't have a RUNNING Task then you might need to restart the ECS container
  agent by SSH'ing into the EC2 Instance.
- Run the container using docker run to diagnose issues with exiting containers.
- Typically hosted at the '/api' custom route
- ServiceStack AppHost must be initialized on start up in Global.asax.cs
- SSH into your Ubuntu server and create the deploy user account with a /home/deploy
  home directory and add them to the sudo group.
- Uses ServiceStack's simple and flexible Authentication Providers which require minimal
  configuration.
- 'Due to limitations in IIS 6 - the /custompath must end with .ashx, e.g: path="api.ashx"'
- ServiceStack's message-based design promotes forward and backwards-compatible Service
  API designs.
- ServiceStack's Configuration API allows structured data storage in appSettings values.
- Easy to implement a new Configuration Provider.
- Requires OAuth2 setup in ServiceStack
- Rate limits apply based on user tier
- SuppressFormsAuthenticationRedirectModule prevents hijacking of 401 requests.
- The default API path is '/api'.
- ServiceStack can be hosted in various ways including console application, windows
  service, ASP.NET Web Form or MVC in IIS.
- Ensure to configure the application to tell ServiceStack where to find your web
  services.
- ServiceStack is now Ready!
- The Dump() methods are useful for debugging and testing.
- ServiceStack.Text JSON Serializers are designed for serializing Typed POCOs.
- You can use Eval to execute custom JavaScript functions.
- 'JSON is a lightweight text serialization format with a spec that''s so simple that
  it fits on one page: https://www.json.org.'
- Fast, small, minimal dependency IOC
- By default ServiceStack Serializers will try to deserialize as much as possible
  without error
- If you prefer you can opt-in to stricter parsing with Env.StrictMode = true
- CSV is an important format for transferring, migrating and quickly visualizing data
  as all spreadsheets support viewing and editing CSV files directly whilst its supported
  by most RDBMS support exporting and importing data.
- ServiceStack automatically registers a MemoryCacheClient if no ICacheClient is registered.
- CSV format is a flat-structured tabular data format that supports serialization
  of a single resultset.
- Currently, there is no CSV Deserializer available.
- Uses caching to improve performance and robustness of existing .NET Service Clients
- The minimum properties required for HTTP Caching is to specify either an ETag or
  LastModified Caching Validator.
- If MaxAge is omitted, ServiceStack falls back to use the HttpCacheFeature.DefaultMaxAge
  of 10 minutes which can be changed in your AppHost.
- Caches the response of All Service implementations for 60 seconds
- Using a Global Request Filter to customize caching behavior requires priority <0
- JSON Lines format is suitable for handling large datasets efficiently.
- Cache-aware clients can dramatically improve performance by eliminating server requests
  and reducing bandwidth for re-validated requests.
- They offer an additional layer of resiliency as re-validated requests that result
  in Errors will fallback to using cached responses.
- MsgPack is an efficient binary serialization format.
- It lets you exchange data among multiple languages like JSON but it's faster and
  smaller.
- Using [CompressResponse] is unnecessary when returning cached responses as ServiceStack
  automatically caches and returns the most optimal Response - typically compressed
  bytes for clients that supports compression.
- Brotli is currently not returned for Firefox browsers (by UserAgent detection in
  AppHost.GetCompressionType()) which for a yet to be determined reason is the only
  modern browser that doesn't support .NET's BrotliStream output.
- ProtoBuf support is not automatically bundled inside ServiceStack, but it is easily
  installed with the ServiceStack.ProtoBuf NuGet package.
- Utilizing the same ASP.NET Core Endpoint Routing that the rest of the ASP.NET Core
  App uses enables your ServiceStack APIs to integrate with your wider ASP.NET Core
  application.
- ServiceStack implements the OpenAPI Spec back-end and embeds the Swagger UI front-end
  in a separate plugin.
- You can view the Swagger UI from /swagger-ui/.
- Uses CORS Feature plugin to support CORS headers in ServiceStack services.
- Supports multiple config options incl. Rolling-size capacity, error and session
  tracking, hidden request bodies for sensitive services.
- SQLite logs will also make it easier to generate monthly aggregate reports to provide
  key insights into the usage of your App.
- Ensure the TCP Server is only accessible within a trusted network
- A secure approach is to bind to IPAddress.Loopback
- .NET Core enables an exciting era of .NET Web and Server App development
- Docker instances enable isolation with considerably more efficiency than VM's allowing
  you to pack them with greater density
- As Postman makes cross-site requests, is also requires CORS support.
- To cancel a remote Service, the client must assign the X-Tag HTTP Header with a
  user-defined string.
- Webhook events can be delivered securely to subscribers using signatures, that proves
  the authenticity of the sender only.
- Delivered events are never encrypted, and only signed.
- Currently ReSharper's tooling has issues with Razor Views inheriting Custom base
  classes.
- The Razor UI Controls are utilized in new Razor project templates and the World
  Validation Application.
- Bootstrap UI form controls include built-in support for validation.
- VS.NET Intelli-sense relies on the Web.config that VS.NET looks for in the root
  directory of your host projects.
- Self-hosting projects are Console Applications they instead use App.config.
- The Web.config is otherwise benign and has no other effect other than enabling VS.NET's
  intelli-sense.
- The ServiceStack.Razor NuGet package uses the official Microsoft.AspNet.Razor but
  to minimize errors in VS.NET's Razor editor, the ServiceStack' Razor templates also
  reference MVC's Microsoft.AspNet.WebPages NuGet package.
- ServiceStack doesn't use the ASP.NET WebPages implementation itself, the configuration
  is primarily included to enable VS.NET intelli-sense and provide a way to configure
  the default namespaces added to Razor pages.
- ServiceStack features that won't be supported in .NET Core include HttpListener,
  SOAP Support, Mini Profiler, Markdown Razor, ServiceStack.Authentication.OAuth2,
  ServiceStack.Authentication.OpenId, MVC FluentValidation Validators, and ServiceStack.Razor.
- Compiled views improve performance by eliminating compile times.
- Pre-compilation avoids the need to deploy *.cshtml files.
- View Pages cannot be called directly, only Content Pages can.
- Uses a self-signed certificate for local development.
- Run 'dotnet dev-certs https --trust' to trust the local development certificate.
- The Markdown Editor supports GitHub Flavored Markdown.
- The Image Upload component is designed to work with the JsonServiceClient.
- A UMD version of the @servicestack/client JavaScript client library is embedded
  in ServiceStack.dll.
- A common way for reliably hosting .NET Core Apps on Linux is to use supervisor to
  monitor the dotnet self-hosting processes behind an nginx reverse proxy
- You'll need access to a Unix environment on your client Desktop, either using Linux,
  OSX or Installing Windows Subsystem for Linux (WSL)
- You'll need access to a Unix environment on your client Desktop, either using Linux,
  OSX or Installing Windows Subsystem for Linux (WSL).
- 'To allow deploy to run supervisorctl without prompting for a password: %deploy
  ALL=(ALL:ALL) NOPASSWD: /usr/bin/supervisorctl.'
- Create a separate config file for each app in /etc/supervisor/conf.d/.
- ss-utils.js provides a number of convenience utilities for developing javascript
  web apps.
- No additional cost for using AWS's EC2 Container Service beyond the cost of the
  EBS and EC2 resources for storing and running your Docker Containers.
- Most bash scripts are generic and can be reused for deploying different projects
  with only minor config changes.
- Ensure to copy both the Access Key ID and Secret Access Key for IAM User setup.
- Assign the AmazonEC2ContainerRegistryFullAccess, AmazonEC2ContainerServiceFullAccess,
  and AmazonEC2ContainerServiceRole policies to the new IAM User.
- If you don't have a RUNNING Task then you might need to restart the ECS container
  agent by SSH'ing into the EC2 Instance and running the commands.
- If that still doesn't work you should see if any of the containers are stopping
  shortly after they have started.
- 'Due to limitations in IIS 6 - host ServiceStack at a /custompath which must end
  with .ashx, e.g: path="api.ashx"'
- If you want to host your webservice on a custom path to avoid conflicts with another
  web framework (eg ASP.Net MVC), see Run ServiceStack side-by-side with another Framework
- A common way for reliably hosting .NET Core Apps on Ubuntu is to use supervisor
  to monitor the dotnet self-hosting processes behind an nginx reverse proxy.
- 'To allow deploy to run supervisorctl without prompting for a password, add %deploy
  ALL=(ALL:ALL) NOPASSWD: /usr/bin/supervisorctl to visudo.'
- You'll then need to create symlink for each website to tell nginx you want each
  website to be enabled.
- Integration tests can be run using a self-hosted HttpListener AppHost.
- Unit tests can be performed by directly testing the service class.
- Uses HttpClient in .NET 6
- Encapsulates boilerplate behind extension methods
- Many of HTTP Utils also have async versions allowing them to participate in C#'s
  async/await workflows.
- Uses custom registered C# functions in SQLite for additional features.
- The ServiceStack.Text JSON Serializers are only designed for serializing Typed POCOs.
- You can also configure to use it in ServiceStack.Text Typed JSON Serializers outside
  of ServiceStack.
- TeamCity can be downloaded from here.
- The only requirement is that it's able to access your version control system and
  the Octopus Deploy server.
- API key is required for TeamCity integration.
- Ensure to save the API key after creation.
- It is good practice to restrict inbound ports to RDP and other ports related to
  administrative tasks to a subnet or even specific IP address to improve security.
- The password is stored in plain text in the configuration file.
- Automates installation of SSL certificates and settings management.
- Uses caching functionality encapsulated in the HttpCacheFeature plugin
- The CacheResponse attribute supports both Server and HTTP Client features
- Uses ETag or LastModified for HTTP caching
- Default MaxAge is 10 minutes unless changed in AppHost
- The script excludes copying the pfx certificate as this is not something we want
  to host in IIS application.
- There are some templates for common tasks like deleting files available to add to
  your Octopus Deploy instance.
- The SSL Thumbprint can be found in the Details tab of the original .crt file.
- Redirect to HTTPS requires an IIS module that may or may not be installed on your
  server.
- Caching behavior can be customized using CacheResponse properties.
- ServiceStack falls back to use the HttpCacheFeature.DefaultMaxAge which defaults
  to 10 minutes.
- ServiceStack's support for AWS is encapsulated within the single ServiceStack.Aws
  NuGet package.
- Cache-aware Service Clients can improve performance by eliminating server requests.
- They offer resiliency as re-validated requests can fallback to cached responses.
- Uses S3 to store content for the App
- Enables LiveReload of Razor Views and Markdown
- Using RequestCompressionType for HTTP Requests allows compression of request bodies.
- Brotli disabled for Firefox browsers based on UserAgent detection.
- PocoDynamo has a 10 Tables free-quota usage limit which is unlocked with a license
  key.
- PocoDynamo has a 10 Tables free-quota usage limit which can be unlocked with a commercial
  license key.
- 'DynamoDB''s UpdateItem supports 3 different operation types: PUT, ADD, DELETE.'
- Utilizes ASP.NET Core Endpoint Routing
- Supports Swagger metadata integration
- Uses OAuth2 with bearer token for authentication
- Default ReadCapacity is 10 and WriteCapacity is 5
- Uses Basic Auth — requires username and password for authentication
- Problems can occur if your default VPC is not setup to DNS Resolution and/or DNS
  Hostname.
- To use the smaller instances like the cache.t2.micro, Multi-AZ must be disabled
- If you haven't already setup a security group exposing this port, you'll need to
  create one by managing your VPC security groups
- Uses CorsFeature plugin to add CORS support to ServiceStack services.
- AWS ElastiCache servers are NOT accessible from outside AWS
- ProxyFeature forwards all the HTTP Request Headers and returns all the HTTP Response
  Headers and body of the downstream server.
- Use connection string to Azure Storage Emulator. For real application you should
  use connection string to your Azure Storage account.
- Databases can be created on-the-fly with requests persisted into isolated monthly
  databases.
- A secure approach would be to leave the default of only binding to IPAddress.Loopback
  so only trusted users with SSH access will be able to access it.
- Just like Redis AUTH you can also add password protection for an additional layer
  of Security.
- Recommended to use Redis on Linux in production
- It is often useful for developers on Windows platforms to have their own local version
  of redis running
- If you installed Redis using the MSI package, then Redis was already installed as
  a Windows service.
- This command does not start the service.
- Postman makes cross-site requests, requires CORS support.
- Calling authentication-only services can be done with the `/postman?exportSession=true`
  parameter.
- Sitemaps support multiple sitemap indexes for larger websites.
- Requires SSL for secure connections to Redis server instances.
- Connection string must include DNS name and password.
- To cancel a Server request, the client must assign the X-Tag HTTP Header with a
  user-defined string.
- Only affected a small number of users initially.
- Recommend switching to use RHEL's Legacy Cryptography Policy.
- As more customers upgraded to RHEL 9, support was added for a configurable Hashing
  algorithm.
- Webhook events can be delivered securely to subscribers using signatures.
- Currently ReSharper's tooling has issues with Razor Views inheriting Custom base
  classes - which can be resolved by installing the latest EAP or disabling its ASP.NET
  Razor support
- 'One drawback of page based routing is that MVC is unable to resolve Page Based
  Routes when pre-compiled and will need to disabled with: <RazorCompileOnPublish>false</RazorCompileOnPublish>'
- The Razor UI Controls are utilized in new Razor project templates.
- The Bootstrap UI form controls include built-in support for validation.
- Provides a simpler, cleaner and more versatile alternative to WCF's legacy Add Service
  Reference feature built into VS.NET.
- Razor Views are now debuggable for Debug builds by default.
- Built in Authentication options including OAuth Providers and Sign In with Apple.
- Built in Authentication options including OAuth Providers
- Refresh Token Cookies supported in all Service Clients
- The primary benefits of compiled views is improved performance by eliminating compile
  times of Razor views.
- They can provide static compilation benefits by highlighting compile errors during
  development.
- They simplify deployment by avoiding the need to deploy any `*.cshtml` files as
  they end up pre-compiled in the containing Assembly.
- View Pages cannot be called directly, that's the role of Content Pages.
- For Content Pages the default.cshtml is the index page for a folder.
- The Markdown Editor supports popular IDE shortcuts for authoring code.
- Image Upload component uploads to Imgur and saves the URL.
- Integrate with a ServiceStack service easily from your favorite JetBrains IDE when
  working with TypeScript.
- The above defaults are also overridable on the ServiceStack Server by modifying
  the default config on the NativeTypesFeature Plugin.
- CDN hosted version available on unpkg.com
- The Add ServiceStack Reference Dialog will be partially populated with the selected
  Package.
- The JsonServiceClient is made available after the net.servicestack:android package
  is automatically added to your build.gradle when adding a ServiceStack reference.
- To add a ServiceStack Reference, right-click on the Package folder in your Java
  sources where you want to add the POJO DTO's.
- The PhysicalPath for self-hosted HttpListener hosts is at the same directory where
  the .exe is run (e.g. in /bin).
- To serve any static files or execute any Razor Views you need to set the Copy Output
  Directory of all static assets you want available to Copy if newer.
- Integration tests can be performed using a self-hosted ServiceStack instance.
- Uses BasicAuth and DigestAuth — requires setup of credentials
- Must explicitly dispose all APIs returning either HttpWebResponse or Stream
- Much of ServiceStack functionality assumes there's an AppHost is available which
  for Unit Tests you can just use an In Memory AppHost
- Markdown Razor is the first HTML and Text (i.e. Markdown) view engine built into
  ServiceStack.
- Markdown Razor support is available by registering the MarkdownFormat Plugin.
- Markdown Razor is completely Open Source.
- Easiest way to register your license key is to add the servicestack license appSetting.
- Non ServiceStack .NET Core AppHost Apps will also need to explicitly register the
  license key from IConfiguration.
- You'll need to restart IIS or VS.NET for them to pickup any new Environment Variables.
- The license key is white-space insensitive so can be broken up over multiple lines.
- Blazor Diffusion demonstrates hybrid development for internal Apps CRUD functionality.
- The app utilizes custom AutoQueryGrid components for back office support.
- Uses R2 Object Storage solution with $0 egress fees
- R2 is mostly S3 compatible but required custom `S3VirtualFiles` provider
- The FileUploadFeature plugin provides an easy and flexible way to create API services
  backed by either popular cloud solutions like AWS S3, Azure Blob Storage, or your
  own file system.
- ServiceStack supports various authentication methods including OAuth, JWT, and API
  keys.
- Each Auth Provider can be configured separately.
- Use OAuth2 with a custom Auth provider for user authentication.
- Account can be locked after multiple invalid login attempts.
- Feature requests should be proposed on ServiceStack Ideas
- Requests are reviewed by the Core Team on a regular basis and will be updated with
  the status at each review.
- JWT Authentication is enabled at authentication where the UseTokenCookie parameter
  directs ServiceStack to capture the Authenticated Session in a stateless JWT Session
  Cookie.
- Both TeamCity and Octopus Deploy are best-in-class commercial tools with generous
  free-usage quotas, providing a flexible and hassle-free experience.
- If you are missing the public feed and want Octopus Deploy to not have to use authentication,
  you have to enable the use of Guest users.
- Octopus Deploy requires an API key for authentication.
- Web Deploy uses port 8172 by default.
- Ensure HTTP and HTTPS ports are added to security group.
- Sensitive environment specific information should not be stored in source control.
- Automating SSL installation and environment settings can streamline deployments.
- An easy way to find the Thumbprint of the certificate is to open the original .crt
  file, select the Details tab and select Properties Only from the Show drop down.
- This configuration uses an IIS module that may or may not be installed on your server.
- A good indication showing how simple it is to build ServiceStack + AWS solutions
  is the size of the AppHost which contains all the configuration for 5 different
  Apps below utilizing all the AWS technologies listed above contained within a single
  ASP.NET Web Application where each application's UI and back-end Service implementation
  are encapsulated under their respective sub directories.
- PocoDynamo has a 10 Tables free-quota usage limit which is unlocked with a license
  key
- DynamoDB Tables take a little while to create in AWS so you need to periodically
  poll to check the status for when it's ready.
- Uses typed LINQ expressions for creating and executing queries and scans.
- Ensure you select a VPC Security Group that exposes the default port 6379
- AWS does not allow external access to ElastiCache servers, so they can only be used
  when your ServiceStack application is deployed.
- Requires a registered Stripe API Key
- It is often useful for developers on Windows platforms to have their own local version
  of redis running to develop with.
- Installing the binaries using `make install` will not work. You need to copy them
  manually to `/usr/bin`.
- SSL Support in the Redis Client enables secure access to a redis-server instance
  over the Internet and public networks.
- A consequence of RedHat Enterprise Linux 9's hardened cryptographic policies is
  that it's incompatible with ServiceStack's current licensing mechanism which uses
  RSA encryption and SHA1 hashing algorithm to protect and validate license keys.
- Customers can regenerate a new License Key with a stronger SHA512 Hash Algorithm
  that's compatible with RHEL 9's default hardened cryptography policy.
- Encrypted Messaging support is enabled by registering the plugin.
- Private Key must be kept confidential.
- ServiceStack's Add ServiceStack Reference feature allows adding generated Native
  Types for the most popular typed languages and client platforms directly from within
  most major IDE's.
- JWT first-class support for Refresh Token Cookies is enabled
- Add ServiceStack Reference allows adding generated Native Types for the most popular
  typed languages and client platforms.
- Uses ServiceStack.Client for PCL Support
- Default options for generated DTOs can be overridden in the server configuration
- Add .NET's DataContract's ExtensionDataObject to all DTO's
- Generate DTOs with nullable reference types
- Annotates Request DTOs with an IReturn<TResponse> marker referencing the Response
  type
- Converts any textual Description in [Description] attributes as C# Doc comments
- Decorates all DTO types with [DataContract] and properties with [DataMember]
- Populates a DataMember Order index for all properties
- Emit [GeneratedCode] attribute on all generated Types
- Automatically add a ResponseStatus property on all Response DTOs
- Lets you specify the Version number to be automatically populated in all Request
  DTOs
- Lets you automatically initialize collections in Request DTOs
- Include additional C# namespaces
- This lets you change the default DataContract XML namespace used for all C# namespaces
- To make API requests using TypeScript's async/await feature you'll need to create
  a TypeScript tsconfig.json config file.
- With the VB.Net code generated on the Server, the role of ServiceStackVS's Add ServiceStack
  Reference is there just to integrate the remote VB.Net DTO's into the clients VS.NET
  project.
- Module's build.gradle file is modified and requires sync.
- Uses DTOs to define your web service interface
- Recommended to use JsonApiClient in .NET 6+
- 'Non ServiceStack .NET Core AppHost Apps will also need to explicitly register the
  license key from IConfiguration: Licensing.RegisterLicense(Configuration.GetValue<string>("servicestack:license"));'
- Maintaining a healthy contributor base is vital for the project as it provides us
  with a constant instant feedback loop.
- 'There are more useful endpoints and hosts in the pipeline: expanded MQ options,
  integration with non-.NET platforms.'
- Default session id is used to fetch the correct session from the cache.
- Feature requests can be proposed on ServiceStack's User Voice
- Requests are reviewed by the Core Team on a regular basis
errors:
- '404 Not Found: The requested resource could not be found.'
- '500 Internal Server Error: An unexpected error occurred.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Ensure valid GITHUB_TOKEN for private repos.'
- If your repo has published releases it will use your most recent release, otherwise
  it uses the master archive.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '404 NotFound: Returned when an unsupported HTTP verb is used.'
- '401 Not Authenticated: Recheck authentication parameters.'
- 'Argument Exceptions: Validation errors will be contextually displayed next to the
  invalid property.'
- Argument Exceptions
- Fluent Validation errors
- perm Claim with 'todos:write' is Required
- Claim with 'todos:write' is Required
- 'IllegalCommands: { BLMOVE, BLMPOP, BLPOP, BRPOP, BRPOPLPUSH, FLUSHDB, FLUSHALL,
  MONITOR }'
- todos:write Permission Required
- 'Invalid validation rule: Ensure the validator returns the appropriate type.'
- 'ILLEGAL_COMMAND: Command is blocked from execution.'
- 'HTTP 429 Too Many Requests: Too many requests. Please try again later.'
- '429 Too Many Requests: User has exceeded their personal rate limit.'
- '404 Not Found: The requested route does not exist.'
- '400 Bad Request: The request cannot be fulfilled due to bad syntax.'
- '429 Too Many Requests: If a user exceeds their personal limit.'
- SOAP exceptions are returned with a 200 OK HTTP Status.
- '400 BadRequest: ArgumentException, SerializationException, FormatException'
- '405 MethodNotAllowed: NotImplementedException, NotSupportedException'
- '404 NotFound: FileNotFoundException'
- '401 Unauthorized: AuthenticationException'
- '403 Forbidden: UnauthorizedAccessException'
- '409 Conflict: OptimisticConcurrencyException'
- '500 InternalServerError: All Other normal C# Exceptions'
- '400 BadRequest: ArgumentException'
- '405 MethodNotAllowed: NotImplementedException'
- '500 InternalServerError: Other normal C# Exceptions'
- '''Age'' must be greater than ''0''.'
- '''Company'' should not be empty.'
- Incorrect prefix
- 'Startup Exception: Validation fails if IPropertyValidator instance is invalid'
- '500 InternalServerError: All other normal C# Exceptions'
- 'Forbidden: Requires Admin Role'
- 'Forbidden: Must use stateless JWT Cookies'
- '400 BadRequest: Inheriting from ArgumentException'
- 'ErrorCode: ''GreaterThan'', Message: ''''Age'' must be greater than ''0''.'
- 'ErrorCode: ''NotEmpty'', Message: ''''Company'' should not be empty.'
- 'ErrorCode: ''ShouldNotBeEmpty'', Message: ''''Name'' should not be empty.'
- '401 Unauthorized: Recheck credentials or token expiration'
- 'Startup Errors: When plugins are registered their Exceptions are swallowed and
  captured in AppHost.StartupErrors.'
- Exceeding request limits may result in throttling.
- 'Command Execution Failed: Check command implementation and request parameters.'
- 'REQUEST_TIMEOUT: Ensure the MQ Server is running and accessible.'
- '401 Unauthorized: Invalid session id or the session has expired.'
- '401 Unauthorized: Ensure proper roles are assigned'
- 'WebServiceException: for structured remote server errors'
- '401 Unauthorized: Recheck Username/Password or token expiration'
- 'Invalid credentials: Check your DEPLOY_KEY.'
- 'SSH connection failed: Verify DEPLOY_HOST and DEPLOY_USERNAME.'
- Hit default limit (2) on number of requests allowed for a single domain.
- '401 Unauthorized: Recheck GitHub token or permissions'
- 'onException: Invoked on each error the client receives'
- 'onReconnect: Invoked after each time the client had to auto-reconnect'
- 'Failed to connect to the server: Check network and server status'
- 'Docker image not found: Ensure the image exists in the GitHub Container Registry'
- 'SSH Authentication failed: Verify DEPLOY_USERNAME and DEPLOY_KEY'
- 'SSH_CONNECTION_FAILED: Verify SSH credentials and server access.'
- 'DOCKER_IMAGE_NOT_FOUND: Ensure the image is available in the GitHub Container Registry.'
- Initial deployment might take up to a minute for LetsEncrypt to generate and use
  the certificate.
- '400 Bad Request: Ensure the request format is correct.'
- '404 Not Found: Check if the command exists.'
- '500 Internal Server Error: Review server logs for details.'
- Task failures may occur during email sending
- Duplicate queries identified in profiling results.
- 'SSH_CONNECTION_FAILED: Check your SSH credentials and server IP'
- 'DOCKER_IMAGE_NOT_FOUND: Ensure the image exists in the GitHub Container Registry'
- '401 Unauthorized: User is not authenticated.'
- '401 Unauthorized: Recheck GitHub token permissions'
- '403 Forbidden: Check repository access settings'
- 'SSH_CONNECTION_FAILED: Check server IP and credentials'
- 'DOCKER_IMAGE_PULL_FAILED: Ensure image exists in GHCR'
- '429 Too Many Requests: Reduce the frequency of requests.'
- '429 Too Many Requests: Implement exponential backoff strategy.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Recheck GitHub access token.'
- 'WebServiceException: Thrown when TenantId is not found'
- 'N+1 query warning: Indicates potential performance issue with querying.'
- '502 Bad Gateway: Indicates that nginx is not yet configured to listen to the specified
  port.'
- '403 Forbidden: Check IAM permissions for the user.'
- '404 Not Found: Verify the resource path and parameters.'
- '403 Forbidden: Check API key or user permissions'
- '404 Not Found: Verify endpoint path'
- '500 Internal Server Error: Retry after a few moments'
- 'CIRCULAR_REFERENCE: Handle circular references using ToSafeJson() or similar methods.'
- '304 NotModified: Indicates that the client''s local cache is still valid'
- Limit API access to users in role
- Turn On/Off Session Tracking
- Turn On/Off Logging of Raw Request Body, default is Off
- '404 Not Found: Thrown if the remote Service had completed or never existed.'
- 'Razor view not found: MyView'
- 'ArgumentException: Indicates a problem with input data during processing.'
- 'Certificate warning: If you haven’t setup the server with the appropriate certificates
  you can still continue.'
- '304 NotModified: Indicates that the client''s cached response is valid'
- '304 NotModified: Indicates client can use cached response'
- '401 Unauthorized: Recheck username and password'
- '404 Not Found: If the remote Service had completed or never existed.'
- 'ArgumentException: You already have contact named ''{request.Name}'''
- 'UPLOAD_ERROR: Check Imgur API configuration and file size limits.'
- '401 Unauthorized: Authentication failed.'
- '403 Forbidden: Access denied.'
- '404 Not Found: Resource does not exist.'
- '403 Forbidden: Check API key permissions'
- '404 Not Found: Verify the endpoint path'
- '401 Unauthorized: Check username and password.'
- Ensure file/folder permissions are correctly set for .nuspec and included files.
- 'USER_ACCOUNT_CONTROL: Administrative user credentials may be required.'
- '401 Unauthorized: Return if request is not authenticated.'
auth_info:
  mentioned_objects:
  - Twitter
  - GitHub
  - AppAuthComponentBase
  - JsonApiClient
  - twitter
  - github
  - jwt
  - servicestack
  - twitter (oauth)
  - github (oauth)
  - jwt (Bearer)
  - servicestack (credentials)
  - OauthToken
  - AuthProvider
  - JwtAuthProvider
  - CredentialsAuthProvider
  - FacebookAuthProvider
  - GoogleAuthProvider
  - MicrosoftGraphAuthProvider
  - NamedCredential
  - UserSession
  - Authenticate
  - SecureRequest
  - IMessageService
  - Notification
  - EmailTemplate
  - DEPLOY_HOST
  - DEPLOY_USERNAME
  - DEPLOY_KEY
  - LETSENCRYPT_EMAIL
  - GITHUB_TOKEN
  - AWS_ACCESS_KEY_ID
  - AWS_SECRET_ACCESS_KEY
  - AWS_REGION
  - AWS_ECS_CLUSTER
  - HOST_DOMAIN
  - SendNotification
  - MqStop
  - MqStart
  - MqStats
  - MqStatus
  - GitHub Actions
  - AuthUserSession
  - IAuthProvider
  - ICacheClient
  - AuthFilterContext
  - AuthResultContext
  - IAuthSession
  - AuthenticateResponse
  - IUserAuth
  - IUserAuthDetails
  - IAuthResponseFilter
  - ICustomUserAuth
  - IAuthMetadataProvider
client:
  base_url: https://techstacks.io
  headers:
    Accept: application/json
source_metadata: null
