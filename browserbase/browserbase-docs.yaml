resources:
- name: sessions
  endpoint:
    path: /v1/sessions
    method: POST
    data_selector: id
    params: {}
- name: sessions
  endpoint:
    path: /api/sessions
    method: POST
- name: projects
  endpoint:
    path: /api/projects
    method: GET
- name: contexts
  endpoint:
    path: /api/contexts
    method: POST
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: session
- name: sessions
  endpoint:
    path: /sessions
    method: POST
    data_selector: session
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: project_usage
  endpoint:
    path: /v1/projects/{id}/usage
    method: GET
    data_selector: browserMinutes, proxyBytes
    params: {}
- name: contexts
  endpoint:
    path: /v1/contexts
    method: POST
    data_selector: null
    params: {}
- name: project_usage
  endpoint:
    path: /v1/projects/{id}/usage
    method: GET
    data_selector: browserMinutes,proxyBytes
    params: {}
- name: contexts
  endpoint:
    path: /v1/contexts
    method: POST
    data_selector: id
    params: {}
- name: session
  endpoint:
    path: /sessions/create
    method: POST
    data_selector: session
- name: viewport_sizes
  endpoint:
    path: /features/viewports
    method: GET
    data_selector: viewport_sizes
- name: viewports
  endpoint:
    path: /features/viewports
    method: GET
    data_selector: supported_viewport_sizes
    params: {}
- name: session
  endpoint:
    path: /sessions
    method: POST
    data_selector: session
- name: session_logs
  endpoint:
    path: /sessions/logs
    method: GET
    data_selector: logs
- name: session_downloads
  endpoint:
    path: /downloads
    method: GET
    data_selector: downloads
- name: uploads
  endpoint:
    path: /reference/api/create-session-uploads
    method: POST
- name: screenshots
  endpoint:
    path: /screenshots
    method: POST
    data_selector: screenshot
- name: pdfs
  endpoint:
    path: /pdfs
    method: POST
    data_selector: pdf
- name: screenshots
  endpoint:
    path: /screenshots
    method: POST
- name: pdfs
  endpoint:
    path: /pdfs
    method: POST
- name: extensions
  endpoint:
    path: /extensions
    method: POST
- name: sessions
  endpoint:
    path: /sessions
    method: POST
- name: extensions
  endpoint:
    path: /extensions
    method: POST
- name: sessions
  endpoint:
    path: /sessions
    method: POST
- name: sessions
  endpoint:
    path: /reference/api/list-sessions
    method: GET
    data_selector: sessions
- name: create_session
  endpoint:
    path: /reference/api/create-a-session
    method: POST
    data_selector: session
- name: sessions
  endpoint:
    path: /reference/api/list-sessions
    method: GET
    data_selector: sessions
- name: create_session
  endpoint:
    path: /reference/api/create-a-session
    method: POST
    data_selector: session
- name: books
  endpoint:
    path: /scrape-books
    method: POST
    data_selector: books
- name: Browser Session
  endpoint:
    path: /fundamentals/create-browser-session
    method: POST
    data_selector: sessionData
- name: sessions
  endpoint:
    path: /v1/sessions
    method: POST
    data_selector: connectUrl
    params: {}
- name: sessions
  endpoint:
    path: /v1/sessions
    method: POST
    data_selector: connectUrl
    params:
      region: us-east-1
- name: project_usage
  endpoint:
    path: /v1/projects/{project_id}/usage
    method: GET
    data_selector: data
- name: project_usage
  endpoint:
    path: /v1/projects/${process.env.BROWSERBASE_PROJECT_ID}/usage
    method: GET
    data_selector: data
    params: {}
- name: session_metadata
  endpoint:
    path: /features/session-metadata
    method: GET
    data_selector: sessions
    params: {}
- name: browserbase_tool
  endpoint:
    path: /api/browserbase/tool
    method: GET
- name: Kayak Tool
  endpoint:
    path: /create-tool/kayak
    method: POST
    data_selector: tool
    params: {}
- name: Browserbase Tool
  endpoint:
    path: /create-tool/browserbase
    method: POST
    data_selector: tool
    params: {}
- name: flights
  endpoint:
    path: /api/v1/flights
    method: GET
    data_selector: flights
- name: flights
  endpoint:
    path: /api/flights
    method: GET
    data_selector: results
    params: {}
- name: flights
  endpoint:
    path: /api/flights
    method: GET
    data_selector: flights
- name: search_flights
  endpoint:
    path: /flights
    method: GET
    data_selector: results
- name: search_flights
  endpoint:
    path: /flights
    method: GET
    data_selector: results
    params: {}
- name: flight_details
  endpoint:
    path: /flight_details
    method: GET
    data_selector: providers
    params: {}
- name: search_flights
  endpoint:
    path: /flights/search
    method: POST
    data_selector: results
    params:
      departure: SFO
      destination: JFK
      date: '2024-09-21'
- name: search_booking_providers
  endpoint:
    path: /flights/providers
    method: GET
    data_selector: providers
    params: {}
- name: search_flights
  endpoint:
    path: /search_flights
    method: GET
- name: search_booking_providers
  endpoint:
    path: /search_booking_providers
    method: GET
- name: browser_session
  endpoint:
    path: /sessions
    method: POST
    data_selector: session
    params: {}
- name: browser_session
  endpoint:
    path: /sessions
    method: POST
    data_selector: session
    params:
      project_id: '{{ dlt.secrets[''BROWSERBASE_PROJECT_ID''] }}'
- name: browser_session
  endpoint:
    path: /sessions
    method: POST
    data_selector: id
    params:
      project_id: '{{ dlt.secrets[''BROWSERBASE_PROJECT_ID''] }}'
      api_key: '{{ dlt.secrets[''BROWSERBASE_API_KEY''] }}'
- name: Document Loader
  endpoint:
    path: /document-loader
    method: GET
- name: documents
  endpoint:
    path: /load
    method: POST
    data_selector: documents
    params: {}
- name: Document Loader
  endpoint:
    path: /integrations/langchain/python
    method: GET
    data_selector: documents
    params: {}
- name: loader
  endpoint:
    path: /load
    method: POST
    data_selector: documents
    params:
      urls:
      - https://www.espn.com
      - https://lilianweng.github.io/posts/2023-06-23-agent/
      text_content: true
- name: session_logs
  endpoint:
    path: /v1/sessions/{id}/logs
    method: GET
    data_selector: logs
    params: {}
- name: session_logs
  endpoint:
    path: /v1/sessions/{id}/logs
    method: GET
    data_selector: records
    params: {}
- name: list_sessions
  endpoint:
    path: /reference/api/list-sessions
    method: GET
- name: get_session
  endpoint:
    path: /reference/api/get-a-session
    method: GET
- name: session_live_urls
  endpoint:
    path: /reference/api/session-live-urls
    method: GET
- name: session_downloads
  endpoint:
    path: /reference/api/session-downloads
    method: GET
- name: session_logs
  endpoint:
    path: /reference/api/session-logs
    method: GET
- name: session_recording
  endpoint:
    path: /reference/api/session-recording
    method: GET
- name: list_sessions
  endpoint:
    path: /api/list-sessions
    method: GET
- name: session
  endpoint:
    path: /v1/sessions/{id}
    method: GET
    data_selector: id
- name: sessions
  endpoint:
    path: /v1/sessions/{id}
    method: GET
    data_selector: id
- name: sessions
  endpoint:
    path: /v1/sessions/{id}
    method: POST
    data_selector: ''
    params: {}
- name: sessions
  endpoint:
    path: /v1/sessions/{id}
    method: POST
    data_selector: id
    params: {}
- name: session_live_urls
  endpoint:
    path: /v1/sessions/{id}/debug
    method: GET
    data_selector: pages
- name: session_live_urls
  endpoint:
    path: /v1/sessions/{id}/debug
    method: GET
    data_selector: pages
- name: session_downloads
  endpoint:
    path: /v1/sessions/{id}/downloads
    method: GET
- name: session_downloads
  endpoint:
    path: /v1/sessions/{id}/downloads
    method: GET
- name: session_recording
  endpoint:
    path: /v1/sessions/{id}/recording
    method: GET
    data_selector: data
    params: {}
- name: session_recording
  endpoint:
    path: /v1/sessions/{id}/recording
    method: GET
    data_selector: data
    params: {}
- name: create_session_uploads
  endpoint:
    path: /v1/sessions/{id}/uploads
    method: POST
- name: create_session_uploads
  endpoint:
    path: /v1/sessions/{id}/uploads
    method: POST
    data_selector: message
    params: {}
- name: extensions
  endpoint:
    path: /v1/extensions
    method: POST
    data_selector: null
    params: {}
- name: extensions
  endpoint:
    path: /v1/extensions
    method: POST
    data_selector: id
- name: get_extension
  endpoint:
    path: /v1/extensions/{id}
    method: GET
    data_selector: id
    params: {}
- name: extensions
  endpoint:
    path: /v1/extensions/{id}
    method: GET
    data_selector: id
    params: {}
- name: delete_extension
  endpoint:
    path: /v1/extensions/{id}
    method: DELETE
- name: delete_extension
  endpoint:
    path: /v1/extensions/{id}
    method: DELETE
- name: Delete a Context
  endpoint:
    path: /v1/contexts/{id}
    method: DELETE
- name: delete_context
  endpoint:
    path: /v1/contexts/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: context
  endpoint:
    path: /v1/contexts/{id}
    method: GET
    data_selector: id
    params: {}
- name: context
  endpoint:
    path: /v1/contexts/{id}
    method: GET
    data_selector: id
- name: contexts
  endpoint:
    path: /v1/contexts/{id}
    method: PUT
    data_selector: id
    params: {}
- name: contexts
  endpoint:
    path: /v1/contexts/{id}
    method: PUT
    data_selector: response
    params: {}
notes:
- A browser session is the fundamental building block in Browserbase - it represents
  a single browser instance running in the cloud.
- Uses API key for authentication â€” ensure to set BROWSERBASE_API_KEY environment
  variable
- API is rate limited based on planâ€™s concurrent session limits.
- All REST endpoints are authenticated using your Browserbase API Key
- The create session API is rate limited based on your planâ€™s concurrent session limits.
- Real-time monitoring and debugging tools for your browser sessions
- Sessions have a default timeout configured at the project level, which can be customized
  when creating a session.
- To prevent premature termination, make sure to implement proper error handling and
  cleanup in your code.
- Required range for browserMinutes and proxyBytes is x >= 0
- The free plan includes one browser session running at a time
- 60 minutes of browser time per month
- AES-256-CBC is currently the only supported algorithm.
- Get your Browserbase API Key and Project ID from the Overview Dashboard
- Be sure to set your BROWSERBASE_API_KEY, BROWSERBASE_PROJECT_ID, and OPENAI_API_KEY
  environment variables to the values you copied.
- Headless browsers unlock new possibilities for developers.
- Running headless browsers in production presents significant challenges.
- The free plan includes one browser session running at a time and 60 minutes of browser
  time per month.
- Get your API key and Project ID from the Overview Dashboard.
- Get your API Key and Project ID from the Overview Dashboard.
- Be sure to set your BROWSERBASE_API_KEY and BROWSERBASE_PROJECT_ID environment variables.
- Stealth Mode enables your automated browser sessions to mimic real user behavior
  across different sessions and IPs.
- Basic Stealth Mode handles surface-level challenges like visual CAPTCHAs and generates
  random, realistic fingerprints and viewports for each session.
- Advanced Stealth Mode reduces the chances of being flagged as a bot by using a custom
  version of the Chrome browser.
- Set your BROWSERBASE_API_KEY and BROWSERBASE_PROJECT_ID environment variables.
- Enabling proxies is recommended for higher CAPTCHA success rates and required for
  bypassing some antibot systems.
- 'Certain high-risk categories are restricted by our proxy providers and cannot be
  accessed through proxies, including: All Apple domains, including iTunes and App
  stores, Entertainment (e.g., Netflix, Playstation), Banking and other financial
  institutions, Some Google domains, Streaming, Ticketing, Mailing, Some .gov domains'
- 'Certain high-risk categories are restricted by our proxy providers and cannot be
  accessed through proxies, including: All Apple domains, Entertainment, Banking and
  other financial institutions, Some Google domains, Streaming, Ticketing, Mailing,
  Some .gov domains.'
- Live Views can be useful for debugging and observability.
- Human in the loop - instantly take control or provide input.
- Uses OAuth2 with refresh token â€” requires setup of connected app in API
- Custom dimensions outside the predefined viewport sizes are not allowed.
- Custom dimensions outside supported values are not allowed to ensure consistent
  performance, rendering accuracy, and anti-bot stealth effectiveness.
- Session recordings provide a representation of the sessionâ€™s data, unique id, timestamp,
  and type of session.
- Our browser recording feature is only designed for single tab workflows.
- Session recordings are a representation of the sessionâ€™s data, unique id, timestamp,
  and type of session.
- Recordings are available about 30 seconds after session close
- Recordings are disabled on a few sites, like Opentable and the Salesforce family
  of sites
- Files downloaded during browser automation are stored in Browserbaseâ€™s cloud storage.
- The files are returned as a ZIP archive.
- The files must be retrieved using the API.
- You can easily upload files to websites using Playwright, Puppeteer, or Selenium.
- For optimal performance, it is recommended to use CDP sessions for screenshots.
- For optimal performance, use CDP sessions to capture screenshots.
- Automatically downloads PDFs when navigating to PDF URLs.
- Contexts allow you to persist user data across multiple browser sessions.
- Contexts are uniquely encrypted at rest to ensure security.
- The size of the stored JSON object is limited to 512 characters.
- Adding adequate waits between form interactions ensures the form has time to load
  and the elements are ready for interaction.
- Implement error handling for missing elements or validation failures.
- 'Respect robots.txt: Check the websiteâ€™s robots.txt file for crawling guidelines'
- 'Rate limiting: Implement reasonable delays between requests (2-5 seconds)'
- 'Terms of Service: Review the websiteâ€™s terms of service before scraping'
- 'Data usage: Only collect and use data in accordance with the websiteâ€™s policies'
- Every test session is automatically recorded and available in the Browserbase dashboard.
- Session recording happens automatically, allowing you to diagnose flaky tests and
  failures with ease.
- Avoid using multi tab browser sessions for better performance.
- Disable CSS, images, JavaScript, and other unwanted assets to speed up page downloads.
- To optimize your costs, consider reusing browser sessions since there is a one-minute
  minimum billing period for each session creation.
- Avoid using multi tab browser sessions for better performance
- Disable CSS, images, JavaScript, and other unwanted assets to speed up page downloads
- Optimize page loading with waitUntil option to improve load speed
- Session keep alive is only available on paid plans.
- The maximum duration of a session is 6 hours.
- Running browser sessions in or near your region will confer substantial performance
  gains.
- All sessions are created in us-west-2 by default.
- Session metadata allows you to tag and categorize sessions for better tracking,
  segmentation, and analysis.
- Metadata persists throughout the entire session lifecycle - if you restart your
  session, your metadata stays intact
- Only field queries are supported (no array querying)
- Only string equality checks are available
- Understanding your proxy and session usage is essential for optimizing costs, managing
  quotas, and ensuring efficient automation.
- Metadata can be under 512 characters and must be a nested JSON structure without
  arrays.
- Browser hours and proxy bandwidth renew monthly.
- Sessions are billed by the minute, with the first minute rounded up.
- Each browser session requires dedicated resources and has a minimum runtime of one
  minute, even if closed before.
- Many websites require authentication before allowing access to protected content
  or actions.
- Handling authentication in automation requires maintaining session state, avoiding
  bot detection, and resolving challenges like CAPTCHAs or multi-factor authentication
  (MFA).
- Browserbase provides flexible methods for handling authentication in automated sessions.
- SSO is available only to Enterprise Plans.
- Uses cookies-based Sessions to speed up automation.
- Session Live View allows for manual login to persist authentication.
- 'Zero Data Retention: Disable Logging and Session Recording via the Create Session
  API to ensure no data is recorded.'
- User roles only affect what permissions a user has within the dashboard itself.
  They donâ€™t change who can interact with sessions via the API, thatâ€™s what your API
  key is used for.
- Browserbase lets you run cloud browsers with the exact network identity you need.
- By routing traffic through your own static proxy or VPN, you can control your browserâ€™s
  IP address and location.
- User roles only affect what permissions a user has within the dashboard itself.
- Enable your crewAI Agents to browse the web like humans.
- Custom Kayak tool needed to assemble a valid Kayak search URL
- Browserbase tool required to navigate and interact with web pages
- Kayak website relies heavily on JavaScript for flight searches, requiring the use
  of headless browsers.
- Requires setup of Browserbase API key and project ID.
- API responses may vary depending on the search criteria.
- Browserbase requires a valid API key for access.
- The Kayak website relies heavily on JavaScript and performs a live flight search.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- The current year must be specified in the prompt for relative date reasoning.
- The description will be provided to the Flights Agent who will call the Kayak Tool
  to build a valid Kayak search URL.
- Set the BROWSERBASE_API_KEY and BROWSERBASE_PROJECT_ID environment variables in
  your .env file.
- Visit the Dashboardâ€™s Overview tab to get your API Key.
- Requires setting BROWSERBASE_API_KEY and BROWSERBASE_PROJECT_ID in environment variables.
- Browser disconnection after successful form submission is expected behavior
- The context manager ensures proper cleanup even if errors occur
- Playwright instance cleanup prevents hanging processes
- Emergency cleanup handles initialization failures gracefully
- Essential for proper cleanup
- Handles browser disconnections and cleanup failures gracefully
- Browserbase provides a Document Loader to enable your Langchain application to browse
  the web.
- Set status to REQUEST_RELEASE to request that the session complete.
- Requires your Browserbase API Key
- Requires Browserbase API Key
- Your Browserbase API Key is required for authentication.
- The request has no content to send, but the headers may be useful.
- Authorization requires a valid Browserbase API Key
errors:
- 'ERR_TUNNEL_CONNECTION_FAILED: indicates either a temporary proxy hiccup or a site
  unsupported by our built-in proxies.'
- 'Blank or Empty Window: Check if there are multiple tabs open.'
- 'Lag: Check out our performance guide.'
- 'Looks Off: Often bugs from a rendering headless browser.'
- 'Lost Connection: If the live view loses its connection to the browser.'
- 'Blank or Empty Window: We may be on another tab.'
- Missing required environment variables
- Navigation cancelled due to download (expected behavior)
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'SESSION_CREATION_RATE_LIMIT: Too many sessions created in a short time'
- '429 Too Many Requests: Reached the session concurrency limit of your plan.'
- 'SESSION_CREATION_RATE_LIMIT: Too many sessions created in a short time.'
- '429 Too Many Requests: Reaching the session concurrency limit of your plan.'
- '401 Unauthorized: Recheck API key or project ID'
- Make sure your proxy server is publicly accessible or properly tunneled.
- Confirm the proxy IP is correctly allowlisted in your system.
- Check the proxy authentication credentials.
- '401 Unauthorized: Check your API key and project ID.'
- '404 Not Found: Ensure the endpoint URL is correct.'
- '401 Unauthorized: Check API key validity.'
- '404 Not Found: Verify the endpoint path.'
- '500 Internal Server Error: Try again later.'
- '401 Unauthorized: Check API key and permissions.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Browser disconnection after successful form submission is expected behavior
- '401 Unauthorized: Recheck API key'
- '200: The request has succeeded.'
- '200 - application/json: The request has succeeded.'
- '401 Unauthorized: Recheck API key or permissions'
- '204 No Content: Successful deletion'
- '204 No Content: There is no content to send for this request.'
auth_info:
  mentioned_objects:
  - BROWSERBASE_API_KEY
  - BROWSERBASE_PROJECT_ID
  - Browserbase API Key
client:
  base_url: https://api.browserbase.com
  auth:
    type: apikey
    location: header
    header_name: X-BB-API-Key
source_metadata: null
