resources:
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: example_resource
  endpoint:
    path: /api/v1/example
    method: GET
    data_selector: data
    params: {}
- name: editor_versions
  endpoint:
    path: /api/editor/versions
    method: GET
    data_selector: versions
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: example_resource
  endpoint:
    path: /example/endpoint
    method: GET
    data_selector: data
    params: {}
- name: interoperable_objects
  endpoint:
    path: /api/interoperable_objects
    method: GET
    data_selector: objects
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workflows
  endpoint:
    path: /api/v1/workflows
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: players
  endpoint:
    path: /api/v1/players
    method: GET
    data_selector: data
    params: {}
- name: persistent_world
  endpoint:
    path: /creation/worlds
    method: POST
    data_selector: world
    params: {}
- name: events
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params: {}
- name: access_group
  endpoint:
    path: /access/groups
    method: GET
    data_selector: access_groups
    params: {}
- name: access_groups
  endpoint:
    path: /access_groups
    method: GET
    data_selector: accessGroups
    params: {}
- name: templates
  endpoint:
    path: /templates
    method: GET
    data_selector: templates
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: create_project
  endpoint:
    path: /projects/create
    method: POST
    data_selector: project
    params: {}
- name: list_projects
  endpoint:
    path: /projects/list
    method: GET
    data_selector: projects
    params: {}
- name: delete_project
  endpoint:
    path: /projects/delete
    method: DELETE
    data_selector: result
    params: {}
- name: user_auth_data
  endpoint:
    path: /auth/user
    method: GET
- name: create_user_account
  endpoint:
    path: /auth/user
    method: POST
- name: custom_token_generation
  endpoint:
    path: /token/generate
    method: POST
- name: token_refresh
  endpoint:
    path: /token/refresh
    method: POST
- name: sign_in_custom_token
  endpoint:
    path: /token/signin
    method: POST
- name: fetch_user_account
  endpoint:
    path: /users/{userid}
    method: GET
- name: update_user_account
  endpoint:
    path: /users/{userid}
    method: PATCH
- name: remove_user_account
  endpoint:
    path: /users/{userid}
    method: DELETE
- name: fetch_current_user_account
  endpoint:
    path: /users/current
    method: GET
- name: user_authentication
  endpoint:
    path: /auth/user
    method: GET
    data_selector: data
- name: create_user_account
  endpoint:
    path: /auth/user
    method: POST
    data_selector: data
- name: fetch_user_account
  endpoint:
    path: /auth/user/{userid}
    method: GET
    data_selector: data
- name: user_auth
  endpoint:
    path: /api/accounts/auth/user/
    method: GET
    data_selector: object[]
- name: create_user
  endpoint:
    path: /api/accounts/auth/user/
    method: POST
    data_selector: object
- name: generate_custom_token
  endpoint:
    path: /api/accounts/token/generate/
    method: POST
    data_selector: object
- name: refresh_token
  endpoint:
    path: /api/accounts/token/refresh/
    method: POST
    data_selector: object
- name: signin_with_custom_token
  endpoint:
    path: /api/accounts/token/signin/
    method: POST
    data_selector: object
- name: fetch_user_account
  endpoint:
    path: /api/accounts/users/{userId}/
    method: GET
    data_selector: object
- name: update_user_account
  endpoint:
    path: /api/accounts/users/{userId}/
    method: PATCH
    data_selector: object
- name: remove_user_account
  endpoint:
    path: /api/accounts/users/{userId}/
    method: DELETE
    data_selector: object
- name: fetch_current_user_account
  endpoint:
    path: /api/accounts/users/current/
    method: GET
    data_selector: object
- name: user_auth
  endpoint:
    path: /api/accounts/auth/user/
    method: GET
    data_selector: object[]
    params:
      userId: string
      email: string
- name: create_user
  endpoint:
    path: /api/accounts/auth/user/
    method: POST
    data_selector: object
    params: {}
- name: generate_custom_token
  endpoint:
    path: /api/accounts/token/generate/
    method: POST
    data_selector: object
    params:
      userId: string
- name: refresh_token
  endpoint:
    path: /api/accounts/token/refresh/
    method: POST
    data_selector: object
    params:
      refreshToken: string
- name: signin_with_custom_token
  endpoint:
    path: /api/accounts/token/signin/
    method: POST
    data_selector: object
    params:
      token: string
- name: fetch_user_account
  endpoint:
    path: /api/accounts/users/{userId}/
    method: GET
    data_selector: object
    params: {}
- name: update_user_account
  endpoint:
    path: /api/accounts/users/{userId}/
    method: PATCH
    data_selector: object
    params: {}
- name: remove_user_account
  endpoint:
    path: /api/accounts/users/{userId}/
    method: DELETE
    data_selector: object
    params: {}
- name: fetch_current_user_account
  endpoint:
    path: /api/accounts/users/current/
    method: GET
    data_selector: object
    params: {}
- name: get_all_events
  endpoint:
    path: /
    method: GET
    data_selector: all
    params: {}
- name: create_event
  endpoint:
    path: /
    method: POST
    data_selector: object
    params: {}
- name: get_public_events
  endpoint:
    path: /public/
    method: GET
    data_selector: all
    params: {}
- name: get_event
  endpoint:
    path: /{eventId}/
    method: GET
    data_selector: object
    params: {}
- name: update_event
  endpoint:
    path: /{eventId}/
    method: PATCH
    data_selector: object
    params: {}
- name: delete_event
  endpoint:
    path: /{eventId}/
    method: DELETE
    data_selector: object
    params: {}
- name: update_thumbnail
  endpoint:
    path: /{eventId}/pictureUrl/
    method: PATCH
    data_selector: object
    params: {}
- name: get_launch_context
  endpoint:
    path: /{eventId}/launchContext/
    method: GET
    data_selector: object
    params: {}
- name: get_all_events
  endpoint:
    path: /api/events/
    method: GET
    data_selector: all
- name: create_event
  endpoint:
    path: /api/events/
    method: POST
    data_selector: object
- name: get_public_events
  endpoint:
    path: /api/events/public/
    method: GET
    data_selector: all
- name: get_event
  endpoint:
    path: /api/events/{eventId}/
    method: GET
    data_selector: object
- name: update_event
  endpoint:
    path: /api/events/{eventId}/
    method: PATCH
    data_selector: object
- name: delete_event
  endpoint:
    path: /api/events/{eventId}/
    method: DELETE
- name: update_thumbnail
  endpoint:
    path: /api/events/{eventId}/pictureUrl/
    method: PATCH
    data_selector: object
- name: get_launch_context
  endpoint:
    path: /api/events/{eventId}/launchContext/
    method: GET
    data_selector: object
- name: read_kvstore
  endpoint:
    path: /api/kvstore/read/
    method: POST
    data_selector: response
    params: {}
- name: list_kvstore_keys
  endpoint:
    path: /api/kvstore/keys/
    method: GET
    data_selector: keys
    params: {}
- name: delete_kvstore_entries
  endpoint:
    path: /api/kvstore/keys/delete/
    method: POST
    data_selector: response
    params: {}
- name: upsert_kvstore_data
  endpoint:
    path: /api/kvstore/upsert/
    method: POST
    data_selector: response
    params: {}
- name: clear_kvstore_data
  endpoint:
    path: /api/kvstore/delete/
    method: POST
    data_selector: response
    params: {}
- name: read_kvstore_data
  endpoint:
    path: /api/kvstore/read/
    method: POST
    data_selector: object
    params:
      store: kvstoreClient
- name: list_kvstore_keys
  endpoint:
    path: /api/kvstore/keys/
    method: GET
    data_selector: keys
    params:
      store: kvstoreClient
- name: delete_kvstore_entries
  endpoint:
    path: /api/kvstore/keys/delete/
    method: POST
    data_selector: object
    params:
      store: kvstoreClient
- name: upsert_kvstore_data
  endpoint:
    path: /api/kvstore/upsert/
    method: POST
    data_selector: object
    params:
      store: kvstoreClient
- name: clear_kvstore_data
  endpoint:
    path: /api/kvstore/delete/
    method: POST
    data_selector: object
    params:
      store: kvstoreClient
- name: organization
  endpoint:
    path: /organizations
    method: GET
- name: api_keys
  endpoint:
    path: /api-keys
    method: GET
- name: organization
  endpoint:
    path: /organizations
    method: GET
    data_selector: details
- name: projects
  endpoint:
    path: /organizations/projects
    method: GET
    data_selector: projects
- name: organization
  endpoint:
    path: /organizations
    method: GET
- name: project
  endpoint:
    path: /organizations/projects
    method: GET
- name: webhook_endpoint
  endpoint:
    path: /webhooks/endpoints
    method: GET
- name: organizations
  endpoint:
    path: /api/organizations/
    method: GET
    data_selector: any[]
- name: create_organization
  endpoint:
    path: /api/organizations/
    method: POST
- name: api_keys
  endpoint:
    path: /api/organizations/apiKeys/
    method: GET
- name: create_api_key
  endpoint:
    path: /api/organizations/apiKeys/
    method: POST
- name: projects
  endpoint:
    path: /api/organizations/projects/
    method: GET
- name: create_project
  endpoint:
    path: /api/organizations/projects/
    method: POST
- name: organization
  endpoint:
    path: /api/organizations/
    method: GET
    data_selector: any of[]
- name: create_organization
  endpoint:
    path: /api/organizations/
    method: POST
    data_selector: object
- name: get_api_keys
  endpoint:
    path: /api/organizations/apiKeys/
    method: GET
    data_selector: object[]
- name: post_api_key
  endpoint:
    path: /api/organizations/apiKeys/
    method: POST
    data_selector: object
- name: get_organization_detail
  endpoint:
    path: /api/organizations/current/
    method: GET
    data_selector: object
- name: update_organization
  endpoint:
    path: /api/organizations/current/
    method: PATCH
    data_selector: No content
- name: get_projects
  endpoint:
    path: /api/organizations/projects/
    method: GET
    data_selector: any of[]
- name: create_project
  endpoint:
    path: /api/organizations/projects/
    method: POST
    data_selector: object
- name: get_project_details
  endpoint:
    path: /api/organizations/projects/current/
    method: GET
    data_selector: object
- name: project_update
  endpoint:
    path: /api/organizations/projects/current/
    method: PATCH
    data_selector: Response
    params: {}
- name: project_delete
  endpoint:
    path: /api/organizations/projects/current/
    method: DELETE
    data_selector: Response
    params: {}
- name: webhook_endpoints
  endpoint:
    path: /api/organizations/webhooks/endpoints/
    method: GET
    data_selector: Response
    params: {}
- name: webhook_endpoint_update
  endpoint:
    path: /api/organizations/webhooks/endpoints/{endpointId}/
    method: PUT
    data_selector: Response
    params: {}
- name: webhook_endpoint_delete
  endpoint:
    path: /api/organizations/webhooks/endpoints/{endpointId}/
    method: DELETE
    data_selector: Response
    params: {}
- name: webhook_endpoint_details
  endpoint:
    path: /api/organizations/webhooks/endpoints/{endpointId}/
    method: GET
    data_selector: Response
    params: {}
- name: update_project
  endpoint:
    path: /api/organizations/projects/current/
    method: PATCH
    data_selector: Response
    params:
      x-m2-organization-id: text
      x-m2-project-id: text
- name: delete_project
  endpoint:
    path: /api/organizations/projects/current/
    method: DELETE
    data_selector: Response
    params:
      x-m2-organization-id: text
      x-m2-project-id: text
- name: webhook_endpoints
  endpoint:
    path: /api/organizations/webhooks/endpoints/
    method: GET
    data_selector: Response
- name: update_webhook_endpoint
  endpoint:
    path: /api/organizations/webhooks/endpoints/{endpointId}/
    method: PUT
    data_selector: Response
    params:
      x-m2-organization-id: text
- name: delete_webhook_endpoint
  endpoint:
    path: /api/organizations/webhooks/endpoints/{endpointId}/
    method: DELETE
    data_selector: Response
    params:
      x-m2-organization-id: text
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: kvStore
  endpoint:
    path: /connect/
    method: GET
- name: collections
  endpoint:
    path: /connect/
    method: GET
- name: liveConfig
  endpoint:
    path: /connect/
    method: GET
- name: KVStore
  endpoint:
    path: /api/realtime/connect/
    method: GET
    data_selector: resource
    params: {}
- name: Collections
  endpoint:
    path: /api/realtime/connect/
    method: GET
    data_selector: resource
    params: {}
- name: Liveconfig
  endpoint:
    path: /api/realtime/connect/
    method: GET
    data_selector: resource
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: user_profile
  endpoint:
    path: /api/user/profile
    method: GET
    data_selector: data
    params: {}
- name: user_profile
  endpoint:
    path: /api/profile/
    method: GET
    data_selector: profile
    params: {}
- name: upsert_user_profile
  endpoint:
    path: /api/profile/
    method: PUT
    data_selector: user_profile
    params: {}
- name: deny_usernames
  endpoint:
    path: /api/profile/username/deny/
    method: POST
    data_selector: denylist_response
    params: {}
- name: delete_denylist_usernames
  endpoint:
    path: /api/profile/username/deny/
    method: DELETE
    data_selector: deletion_response
    params: {}
- name: overwrite_denylist
  endpoint:
    path: /api/profile/username/denylist/
    method: PUT
    data_selector: overwrite_response
    params: {}
- name: user_profile
  endpoint:
    path: /api/profile/
    method: GET
    data_selector: profile
    params: {}
- name: upsert_user_profile
  endpoint:
    path: /api/profile/
    method: PUT
    data_selector: profile
    params: {}
- name: deny_usernames
  endpoint:
    path: /api/profile/username/deny/
    method: POST
    data_selector: response
    params: {}
- name: delete_usernames_denylist
  endpoint:
    path: /api/profile/username/deny/
    method: DELETE
    data_selector: response
    params: {}
- name: overwrite_denylist
  endpoint:
    path: /api/profile/username/denylist/
    method: PUT
    data_selector: response
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: content
  endpoint:
    path: /api/world-builder/content/
    method: GET
    data_selector: string[]
    params: {}
- name: create_content
  endpoint:
    path: /api/world-builder/content/
    method: POST
    data_selector: object
    params: {}
- name: embed_content
  endpoint:
    path: /api/world-builder/content/embed/
    method: GET
    data_selector: object[]
    params: {}
- name: mods
  endpoint:
    path: /api/world-builder/mods/
    method: GET
    data_selector: object[]
    params: {}
- name: content
  endpoint:
    path: /api/world-builder/content/
    method: GET
    data_selector: string[]
- name: mods
  endpoint:
    path: /api/world-builder/mods/
    method: GET
    data_selector: object[]
- name: mod
  endpoint:
    path: /api/world-builder/mods/{modId}/
    method: GET
    data_selector: object
- name: mod_contents
  endpoint:
    path: /api/world-builder/mods/{modId}/contents/
    method: GET
    data_selector: contents
- name: mod_contents
  endpoint:
    path: /api/world-builder/mods/{modId}/contents/
    method: GET
    data_selector: contents
    params:
      limit: number
      startAfter: string
      endBefore: string
      orderBy: object[]
      searchBy: object
      filterBy: object
- name: worlds
  endpoint:
    path: /apis-and-tooling/api-reference/worlds
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: worlds
  endpoint:
    path: /apis-and-tooling/api-reference/worlds
    method: GET
- name: worlds
  endpoint:
    path: /apis-and-tooling/api-reference/worlds
    method: GET
- name: world_details
  endpoint:
    path: /apis-and-tooling/api-reference/worlds/{worldId}
    method: GET
- name: worlds
  endpoint:
    path: /api/worlds/
    method: GET
    data_selector: object[]
- name: create_world
  endpoint:
    path: /api/worlds/
    method: POST
    data_selector: object
- name: travel_locations
  endpoint:
    path: /api/worlds/travel/locations/
    method: GET
    data_selector: object
- name: scaling_profiles
  endpoint:
    path: /api/worlds/scalingProfiles/
    method: GET
    data_selector: object[]
- name: world_details
  endpoint:
    path: /api/worlds/{worldId}/
    method: GET
    data_selector: object
- name: update_world
  endpoint:
    path: /api/worlds/{worldId}/
    method: PATCH
    data_selector: object
- name: worlds
  endpoint:
    path: /apis-and-tooling/api-reference/worlds
    method: GET
- name: world_details
  endpoint:
    path: /apis-and-tooling/api-reference/worlds/{worldId}
    method: GET
- name: delete_world
  endpoint:
    path: /api/worlds/{worldId}/
    method: DELETE
    data_selector: ''
- name: get_world_bot_deployments
  endpoint:
    path: /api/worlds/{worldId}/bots/
    method: GET
    data_selector: ''
- name: create_world_bot_deployment
  endpoint:
    path: /api/worlds/{worldId}/bots/
    method: POST
    data_selector: ''
- name: get_world_bot_deployment
  endpoint:
    path: /api/worlds/{worldId}/bots/{botDeploymentId}/
    method: GET
    data_selector: ''
- name: update_world_bot_deployment
  endpoint:
    path: /api/worlds/{worldId}/bots/{botDeploymentId}/
    method: PATCH
    data_selector: ''
- name: delete_world_bot_deployment
  endpoint:
    path: /api/worlds/{worldId}/bots/{botDeploymentId}/
    method: DELETE
    data_selector: ''
- name: get_world_deployments
  endpoint:
    path: /api/worlds/{worldId}/deployments/
    method: GET
    data_selector: ''
- name: world_update_picture_url
  endpoint:
    path: /api/worlds/{worldId}/pictureUrl/
    method: PATCH
    data_selector: ''
- name: get_active_roles
  endpoint:
    path: /api/worlds/{worldId}/roles/
    method: GET
    data_selector: ''
- name: start_world
  endpoint:
    path: /api/worlds/{worldId}/start/
    method: POST
    data_selector: ''
- name: stop_world
  endpoint:
    path: /api/worlds/{worldId}/stop/
    method: POST
    data_selector: ''
- name: check_user_access
  endpoint:
    path: /api/worlds/{worldId}/users/{userId}/access/
    method: GET
    data_selector: ''
- name: worlds
  endpoint:
    path: /api/worlds/
    method: GET
    data_selector: object[]
    params:
      x-m2-organization-id: string
      x-m2-project-id: string
- name: scaling_profiles
  endpoint:
    path: /api/worlds/scalingProfiles/
    method: GET
    data_selector: object[]
    params: {}
- name: launch_locations
  endpoint:
    path: /api/worlds/travel/locations/
    method: GET
    data_selector: object[]
    params: {}
- name: world_details
  endpoint:
    path: /api/worlds/{worldId}/
    method: GET
    data_selector: object
    params:
      x-m2-organization-id: string
      x-m2-project-id: string
- name: create_world
  endpoint:
    path: /api/worlds/
    method: POST
    data_selector: object
    params:
      x-m2-organization-id: string
      x-m2-project-id: string
- name: update_world
  endpoint:
    path: /api/worlds/{worldId}/
    method: PATCH
    data_selector: object
    params:
      x-m2-organization-id: string
      x-m2-project-id: string
- name: Moderation
  endpoint:
    path: /api/
    method: GET
    data_selector: messages
    params: {}
- name: delete_world
  endpoint:
    path: /api/worlds/{worldId}/
    method: DELETE
    data_selector: not
    params: {}
- name: get_world_bot_deployments
  endpoint:
    path: /api/worlds/{worldId}/bots/
    method: GET
    data_selector: object[]
    params: {}
- name: create_world_bot_deployment
  endpoint:
    path: /api/worlds/{worldId}/bots/
    method: POST
    data_selector: not
    params: {}
- name: get_world_bot_deployment
  endpoint:
    path: /api/worlds/{worldId}/bots/{botDeploymentId}/
    method: GET
    data_selector: object
    params: {}
- name: update_world_bot_deployment
  endpoint:
    path: /api/worlds/{worldId}/bots/{botDeploymentId}/
    method: PATCH
    data_selector: not
    params: {}
- name: delete_world_bot_deployment
  endpoint:
    path: /api/worlds/{worldId}/bots/{botDeploymentId}/
    method: DELETE
    data_selector: not
    params: {}
- name: get_world_deployments
  endpoint:
    path: /api/worlds/{worldId}/deployments/
    method: GET
    data_selector: object[]
    params: {}
- name: update_world_picture_url
  endpoint:
    path: /api/worlds/{worldId}/pictureUrl/
    method: PATCH
    data_selector: object
    params: {}
- name: get_active_roles
  endpoint:
    path: /api/worlds/{worldId}/roles/
    method: GET
    data_selector: object[]
    params: {}
- name: start_world
  endpoint:
    path: /api/worlds/{worldId}/start/
    method: POST
    data_selector: not
    params: {}
- name: stop_world
  endpoint:
    path: /api/worlds/{worldId}/stop/
    method: POST
    data_selector: not
    params: {}
- name: check_user_access
  endpoint:
    path: /api/worlds/{worldId}/users/{userId}/access/
    method: GET
    data_selector: object
    params: {}
- name: settings
  endpoint:
    path: /Config/settings.json
    method: GET
    data_selector: clientsDirectory, editorsDirectory, cacheDirectory
- name: Example Resource
  endpoint:
    path: /services/data/vXX.X/sobjects/Example
    method: GET
    data_selector: records
    params: {}
- name: Moderation
  endpoint:
    path: /api/
    method: GET
    data_selector: messages
    params: {}
- name: Assets
  endpoint:
    path: /apis-and-tooling/dashboard/assets
    method: GET
    data_selector: Assets
    params: {}
- name: Assets Versions
  endpoint:
    path: /apis-and-tooling/dashboard/assets/assets-versions
    method: GET
    data_selector: AssetsVersions
    params: {}
- name: Engine Plugins
  endpoint:
    path: /apis-and-tooling/dashboard/assets/engine-plugins
    method: GET
    data_selector: EnginePlugins
    params: {}
- name: Project Plugins
  endpoint:
    path: /apis-and-tooling/dashboard/assets/project-plugins
    method: GET
    data_selector: ProjectPlugins
    params: {}
- name: Templates
  endpoint:
    path: /apis-and-tooling/dashboard/assets/templates
    method: GET
    data_selector: Templates
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: settings
  endpoint:
    path: /Config/settings.json
    method: GET
    data_selector: clientsDirectory, editorsDirectory, cacheDirectory
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /track
    method: POST
    data_selector: data
    params: {}
- name: user_profiles
  endpoint:
    path: /people
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: import_events
  endpoint:
    path: /import
    method: POST
    data_selector: events
- name: chat_application
  endpoint:
    path: /pubnub/chat
    method: POST
    data_selector: data
    params: {}
- name: Publish API
  endpoint:
    path: /publish/{my-pub-key}/{my-sub-key}/0/{my-channel-name}/0
    method: POST
- name: Subscribe API
  endpoint:
    path: /v2/subscribe/{my-sub-key}/{my-channel-name}/0
    method: GET
- name: History API
  endpoint:
    path: /v3/history/sub-key/{my-sub-key}/channel/{my-channel-name}
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: import_events
  endpoint:
    path: /import
    method: POST
    data_selector: events
    params: {}
- name: moderation_function
  endpoint:
    path: /functions/moderation
    method: POST
    data_selector: request
    params: {}
- name: rate_limiting_function
  endpoint:
    path: /functions/rate_limiting
    method: POST
    data_selector: request
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: example_resource
  endpoint:
    path: /api/v1/example
    method: GET
    data_selector: data
    params: {}
- name: chat_messages
  endpoint:
    path: /v1/chat/messages
    method: GET
    data_selector: messages
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: publish
  endpoint:
    path: /publish/{my-pub-key}/{my-sub-key}/0/{my-channel-name}/0
    method: POST
    data_selector: response
    params:
      uuid: '{my-unique-id}'
- name: subscribe
  endpoint:
    path: /v2/subscribe/{my-sub-key}/{my-channel-name}/0
    method: GET
    data_selector: response
    params:
      uuid: '{my-unique-id}'
      tt: '{my-time-token}'
      tr: '{my-region}'
- name: history
  endpoint:
    path: /v3/history/sub-key/{my-sub-key}/channel/{my-channel-name}
    method: GET
    data_selector: response
    params:
      include_message_type: 'true'
      include_uuid: 'true'
      include_meta: 'true'
      max: 100
      uuid: '{my-unique-id}'
- name: moderation_function
  endpoint:
    path: /functions/moderation
    method: POST
    data_selector: request
    params: {}
- name: rate_limiting_function
  endpoint:
    path: /functions/rate_limiting
    method: POST
    data_selector: request
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Rate limits apply, handle 429 status code with exponential backoff
- All endpoints live under a dedicated customer URL
- 'Rate limit error code: 429 Too Many Requests'
- Requires OAuth2 setup to access the API.
- Uses OAuth2 with refresh token — requires setup of connected app in Morpheus
- Some endpoints may have rate limits
- Requires setup of connected app in api
- All amounts due or payable to MSquared in connection with your use of our paid-for
  Services shall be paid by you within thirty (30) days of being billed for such Services.
- Interest shall accrue on all amounts not paid by the applicable due date at a rate
  of three (3) per cent per annum above the base rate for the time being of Barclays
  Bank plc.
- All payments made hereunder shall be payable in United States Dollars.
- You are responsible for the payment of all taxes which may arise from your Virtual
  Experiences and the creation and/or sale of your Virtual Items in connection with
  such experiences.
- Some corporate firewalls block access to certain ports or IPs used by GCP.
- If GeForce NOW is running behind a corporate or school firewall, the firewall should
  allow traffic to/from GeForce NOW servers’ UDP ports between 10000 and 20000.
- You must immediately cease using the MSquared Platform, and uninstall it from your
  devices as well as those of your Collaborators.
- Downloading and running the MSquared client requires access to GCP.
- Uses authenticated bots to mimic real player actions
- Ensure to set up proper OAuth2 credentials in Morpheus.
- There are several potential issues with leaving Worlds and Unreal running for extended
  periods of time, such as spiralling costs due to Worlds left running, unrecoverable
  errors of Unreal or infrastructure, necessary maintenance of infrastructure, potential
  memory leaks, and unexpected behavior due to limitations of single-precision floating-point
  numbers.
- Morpheus Platform does not guarantee uptime for running Worlds.
- Morpheus Platform does not guarantee persistence of state.
- Events require permissions to create and manage.
- Event is not by default visible to unauthenticated users.
- To enable public access for users, set both the world's and event's Public Stream
  Client Access toggle to true.
- Requires OAuth2 authentication.
- Ensure proper permissions are granted for API access.
- Requires setup of connected app in Morpheus
- Before the event however, you may want to test with a limited group of external
  stakeholders.
- We recommend testing setting your event and world to public at least once before
  the event day to check all the required permissions are set up correctly.
- Scale testing with bots is a crucial part of your project development process -
  many bugs/issues may not present unless stress-tested at sufficient scale.
- We highly recommend projects scale test at regular intervals throughout the project
  development life cycle.
- When performance testing, you're looking to validate that your world performs as
  expected when under load.
- For reserving streaming capacity, Nvidia streaming requires 4 weeks notice for reservations.
- This should be tested as part of final rehearsals, ~ 1 week before the event.
- Easy Anti-Cheat (EAC) protected clients can be enabled in the dashboard once you
  have an event.
- When these steps are complete, any PC user attempting to join your game will be
  required to use the Easy Anti-Cheat protected client.
- Requires OAuth2 authentication setup
- Ensure to handle token expiration
- This feature is roadmapped but not currently available for use!
- For failover, set up a 2nd world with matching configurations.
- Retrieve World ID and Deployment ID from Support Engineer.
- For any crashes encountered during performance testing, we recommend sending a report
  (a prompt will appear upon crashing) and raising a request in your support channel.
- Please notify your support engineer ahead of time, as these tests can be costly
  if left running for extended periods of time.
- If you want to disable queuing specifically for downloaded clients, you can modify
  your world's live config to disable native client queuing.
- If you want to set a failsafe maximum capacity alongside your admissions policy
  setting, you can modify your worlds live config to set a maximum number of clients
  per server.
- Some objects may return nulls in deeply nested fields
- Easy Anti-Cheat protected clients can be enabled in the dashboard once you have
  an event.
- Group name is arbitrary and can be changed at any time
- Members are who will be getting access and can be done based on emails, email domains,
  wallets, etc.
- Access type is the type of access you're granting - whether the members should also
  be admins in the metaverse, admins in just a given project, developers in a given
  project, etc
- It is highly recommended for projects to also run a backup deployment/server.
- Please check the settings of the failover world before launching.
- Minimum term is 3 months
- 'Support is available during working hours: 10AM - 5PM UK Time'
- War Room Support is priced at $500 per person per hour
- To schedule an event war room, customers need to provide 4 weeks notice
- If cancelling a war room within 2 weeks, MSquared still requires full payment
- Dashboard does not allow you to delete a project directly.
- If you are using a 'Fast Play' mod for a large scale event please note that Nvidia
  recommend the Fast Play mod is completed at least 24 hours prior to the event as
  to allow the build to be fully propagated across their pixel streaming network.
- 'An indicator to the mod not being propagated on Nvidia''s pixel streaming network
  is if you receive the following error message when trying to launch the world: 0xC0F22129.
  In this situation, please allow some time for the build to propagate fully.'
- An indicator to the mod not being propagated on Nvidia's pixel streaming network
  is if you receive the following error message when trying to launch the world.
- Specifically if you receive the `0xC0F22129` code present at the bottom of the page.
- Requires setup of OAuth2 authentication.
- Data can be read from either the client or server store by both the user and Unreal
  server or service accounts.
- Client store data can only be written by the user whose store it is but can be read
  by the user and an Unreal server or service account.
- The server store can only be written by the Unreal server or service account but
  may be read by both the user and the server.
- Data can be read from either the client or server store.
- Client store data can only be written by the user whose store it is.
- Server store data can only be written by the Unreal server or service account.
- DEPRECATED. Previously used to manage player profile data. This service is being
  phased out in favor of the more flexible Key/Value Store.
- 'Deprecated: this API is no longer supported and will be removed in a future release.'
- None of the usernames in the request need to obey the restrictions regarding length
  and allowed characters.
- Endpoint requires organization and project IDs in headers.
- You can embed streaming clients in it by passing their WORLD_ID as an Environment
  Variable.
- If you append /admin to the end of the URL, you can access an admin page where you
  can manage permissions and perform moderation.
- ModerationSiteUrl is set as localhost for local testing.
- An MSquared ID token is required to use the Pixel Streaming Client.
- Users must have a username set, or they will be unable to enter a world.
- Default installation is to ~/AppData/Local/M2Launcher
- Users can customize the download location by editing settings.json
- You will need a Vercel Pro Plan to deploy your application.
- ModerationSiteUrl is set as localhost for testing against a locally deployed version
  of morpheus-platform-example-app
- We do not allow Assets to be deleted if they contain one or more published Assets
  Versions.
- Users must have a username set, or they will be unable to enter a world
- The Assets Version (Engine Plugin) must be created with the same editor that you
  wish to bundle it with.
- Requires setup of OAuth2 credentials
- Ensure proper API scopes are assigned
- Uses Mixpanel SDK for tracking events and user profiles
- API body must be in the form of a json array as each request can accept up to 2000
  different events.
- 'Presence: ON'
- 'App Context: ON'
- 'Message Persistence: ON'
- 'Stream Controller: ON'
- 'File Sharing: OFF'
- 'Mobile Push Notifications: OFF'
- 'Apple Push Notifications: OFF'
- 'Firebase Cloud Messaging: OFF'
- 'Enable Access Manager: ON'
- Every request made must be associated with a Pubnub Channel.
- Channels are created automatically when providing a value for channel name in API
  calls.
- Route events from Mixpanel’s SDKs via a proxy in your own domain - prevents adblockers
  impacting tracking.
- Pubnub functions on free tier automatically pause after running for 7 days.
- Presence detection is enabled by default
- Message persistence retention is set to 7 days
- Rate limits apply; handle 429 status with exponential backoff
- Rate limit is enforced with a status 429 Too Many Requests.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '429 Too Many Requests: Handle with exponential backoff or retry logic'
- '401 Unauthorized: Check your credentials and token expiration.'
- 'Unauthorized: Recheck OAuth scopes or token expiration.'
- '401 Unauthorized: Check your OAuth credentials.'
- '403 Forbidden: You do not have permission to access this resource.'
- 'INVALID_CREDENTIALS: Check your client ID and secret.'
- 'ACCESS_DENIED: Confirm your user permissions.'
- '401 Unauthorized: Check your credentials'
- '403 Forbidden: You do not have permission to access this resource'
- '429 Too Many Requests: Rate limit exceeded'
- '0xC0F22129: Mod not being propagated on Nvidia''s pixel streaming network.'
- '0xC0F22129: Allow some time for the build to propagate fully.'
- '401 Unauthorized: Recheck OAuth token'
- '404 Not Found: User account does not exist'
- '4XX: The error object returned by the API when an error occurs'
- '4XX: The error object returned by the API when an error occurs.'
- Invalid message format
- '404: Not Found'
- '403: Forbidden'
- '401 Unauthorized: Invalid credentials or token expired'
- '429 Too Many Requests: Handle with exponential backoff'
- '429 Too Many Requests: Handle this error with exponential backoff or retry logic.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - UserAccount
  - ApiKeyAuth
  - BearerAuth
client:
  base_url: https://msquared.io
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
