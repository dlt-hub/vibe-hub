resources:
- name: ocr_process
  endpoint:
    path: /api/ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /api/mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr
  endpoint:
    path: /api/ocr
    method: POST
    data_selector: data
    params:
      max_file_size: 10MB
- name: text_extraction
  endpoint:
    path: /api/v1/ocr
    method: POST
    data_selector: data
    params: {}
- name: ocr
  endpoint:
    path: /api/ocr
    method: POST
    data_selector: results
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: ''
    params: {}
- name: document_processing
  endpoint:
    path: /api/v1/process
    method: POST
    data_selector: results
- name: text_extraction
  endpoint:
    path: /api/extract
    method: POST
    data_selector: results
    params: {}
- name: ocr
  endpoint:
    path: /api/ocr
    method: POST
    data_selector: results
- name: ocr_process
  endpoint:
    path: /api/ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /api/mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr_process
  endpoint:
    path: /api/ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /api/mcp
    method: POST
    data_selector: ''
    params: {}
- name: ocr_process
  endpoint:
    path: /api/ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /api/mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: jsonrpc
    params: {}
- name: ocr_process
  endpoint:
    path: /api/ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /api/mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr_process
  endpoint:
    path: /api/ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /api/mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: null
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: null
    params: {}
- name: ocr_process
  endpoint:
    path: /api/ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /api/mcp
    method: POST
    data_selector: ''
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: ''
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: ''
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: success
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: extractedText
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: tools
- name: ocr_process
  endpoint:
    path: /api/ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /api/mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: success
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr_process
  endpoint:
    path: /api/ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /api/mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr_process
  endpoint:
    path: /process
    method: POST
    data_selector: null
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: success
    params: {}
- name: process_ocr
  endpoint:
    path: /api/ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /api/mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr_process
  endpoint:
    path: /process
    method: POST
    data_selector: response
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: result
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: capabilities
    params: {}
- name: ocr_process
  endpoint:
    path: /process
    method: POST
    data_selector: image
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: success
    params: {}
- name: ocr_process
  endpoint:
    path: /ocr/process
    method: POST
    data_selector: success
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: POST
    data_selector: ''
    params: {}
notes:
- Uses API key for authentication.
- Supports extraction of text, images, tables, and formulas from images, PDFs, and
  scanned documents.
- JSON output format.
- Supports multiple languages and JSON output.
- Supports multiple languages and JSON output
- Provides 'Doc-as-prompt' functionality for structured output
- Supports Base64 encoding for images less than 1MB
- Supports URL uploads for images greater than 1MB
- Supports structured output in JSON format.
- Provides structured output for easy integration.
- Supports multilingual text extraction and JSON output.
- Authorization requires API key in the header.
- Select between Base64 encoding for small files or URL upload for large files.
- API key authentication required in headers.
- Supports both Base64 and URL upload methods.
- Supports Base64 encoding for files less than 1 MB and URL uploads for larger files.
- Requires API key for authentication
- Supports Base64 encoding for files smaller than 1MB and URL uploads for larger files.
- Authentication requires API key to be included in requests.
- Supports both Base64 and URL upload methods for OCR processing.
- Requires API key for authentication.
- Base64 encoding is for small files (< 1MB), URL upload is for larger files (> 1MB).
- 'Supports multiple upload methods: Base64 encoding for small files (<1MB) and URL
  for large files (>1MB).'
- API-sleutelauthenticatie vereist voor alle verzoeken
- Supports both Base64 encoding and URL uploads for documents.
- Base64 method is limited to files smaller than 1MB.
- Supports both base64 and URL uploads for images and PDFs
- 'Base64: < 1 MB, URL: > 1 MB'
- Supports Base64 and URL upload methods for OCR.
- Supports Base64 and URL upload methods for images and PDFs.
- Supports both base64 and URL upload methods.
- Supports both Base64 and URL upload methods
- API key authentication required for all requests.
- Supports both Base64 and URL upload methods for images and PDFs.
- All MCP requests require API key authentication.
- Uses API key authentication â€” requires API key setup.
- API requires an API key for authentication.
- Supports multiple upload methods including Base64 and URL.
- Supports both Base64 and URL upload methods for OCR processing
- API key is required in the request header
- Requires an API key to access.
- Supports Base64 encoding for images under 1MB.
- Requires API key in header for authentication.
- Supports multiple upload methods.
- API key authentication is required for all requests.
- Supports Base64 encoding for files under 1MB and URL uploads for larger files.
errors:
- '401 Unauthorized: Recheck API key.'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Check API key'
- 'Invalid API Key: Check your API key'
- '400 Bad Request: Ensure request format is correct'
- '401 Unauthorized: Include your API key in the request headers.'
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Ensure the API key is valid.'
- '401 Unauthorized: Recheck API key'
- 'Invalid API Key: Check your API key and try again.'
- 'Request Timeout: Ensure the request is correctly formed and the server is reachable.'
- '401 Unauthorized: Ensure the API key is correct.'
- '404 Not Found: Verify the endpoint path.'
- '401 Unauthorized: Recheck API key or token expiration.'
- '401 Unauthorized: Ensure to include a valid API key in the request headers.'
- '401 Unauthorized: Include a valid API key in the request headers.'
- '400 Bad Request: Check your request format and parameters.'
- '401 Unauthorized: Ensure your API key is valid.'
- '401 Unauthorized: Check your API key.'
- '400 Bad Request: Validate the input data.'
- 'Invalid API Key: Ensure you are using a valid key'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check API key or authentication method.'
- '401 Unauthorized: Check API key.'
- '400 Bad Request: Check input data format.'
- '401 Unauthorized: Invalid API key.'
- '500 Internal Server Error: Try again later.'
- '401 Unauthorized: Check API key authentication'
- '400 Bad Request: Check the request body for errors'
- 'Invalid API Key: Check your API key for correctness.'
- '400 Bad Request: Check request format and parameters'
- '401 Unauthorized: Check API key or authorization method'
- '400 Bad Request: Check the request format or parameters.'
- 'Invalid API Key: Check your API key.'
auth_info:
  mentioned_objects:
  - x-api-key
  - Authorization
client:
  base_url: https://www.freeolmocr.com/api
  auth:
    type: api_key
    header_name: x-api-key
  headers:
    Content-Type: application/json
source_metadata: null
