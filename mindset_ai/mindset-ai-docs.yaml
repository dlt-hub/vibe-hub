resources:
- name: agent_session
  endpoint:
    path: /api/agentsessions
    method: GET
    data_selector: agentSessions
- name: agentSession
  endpoint:
    path: /sdk-api/api/agentsessions-api
    method: GET
    data_selector: agentSessions
- name: agent
  endpoint:
    path: /sdk-api/sdk/agents-api
    method: GET
- name: contexts
  endpoint:
    path: /sdk-api/sdk/contexts-api
    method: GET
- name: context_files
  endpoint:
    path: /sdk-api/sdk/context-files-api
    method: GET
- name: labels
  endpoint:
    path: /sdk-api/sdk/labels-api
    method: GET
- name: agent_sessions
  endpoint:
    path: /sdk-api/sdk/agentsessions-api
    method: GET
- name: sdk_users
  endpoint:
    path: /sdk-api/sdk/sdkusers-api
    method: GET
- name: sdk_users
  endpoint:
    path: /api/v1/appuid/{YOUR-APP-UID}/sdkusers/auth
    method: POST
    data_selector: data
- name: theme
  endpoint:
    path: /sdk-api/sdk/agent-color-theme
    method: GET
    data_selector: theme
    params: {}
- name: mindset-container
  endpoint:
    path: /sdk-api/sdk/embedding-agent
    method: GET
    data_selector: records
    params: {}
- name: font_customization
  endpoint:
    path: /sdk-api/sdk/fonts-customization
    method: GET
    data_selector: records
- name: sdk_users
  endpoint:
    path: /api/v1/appuid/YOUR-APP-UID/sdkusers/auth
    method: POST
    data_selector: data
- name: theme
  endpoint:
    path: /sdk-api/sdk/agent-color-theme
    method: GET
- name: sdk_users_auth
  endpoint:
    path: /api/v1/appuid/YOUR-APP-UID/sdkusers/auth
    method: POST
    data_selector: authToken
- name: mindset-container
  endpoint:
    path: /sdk-api/sdk/flexible-ui
    method: POST
    data_selector: agent
    params: {}
- name: agent_sessions
  endpoint:
    path: /api/v1/appuid/YOUR-APP-UID/agentsessions
    method: POST
    data_selector: data
    params: {}
- name: sdk_users
  endpoint:
    path: /api/v1/appuid/YOUR-APP-UID/sdkusers/auth
    method: POST
    data_selector: data
    params: {}
- name: sdk_users
  endpoint:
    path: /api/v1/appuid/YOUR-APP-UID/sdkusers/auth
    method: POST
    data_selector: authToken
- name: mindset-agent
  endpoint:
    path: /mindset-agent
    method: POST
    data_selector: agentUid
- name: mindset-container
  endpoint:
    path: /mindset-container
    method: POST
    data_selector: agentUid
- name: agent_sessions
  endpoint:
    path: /api/v1/appuid/YOUR-APP-UID/agentsessions
    method: POST
    data_selector: ''
    params: {}
- name: sdk_users
  endpoint:
    path: /api/v1/appuid/YOUR-APP-UID/sdkusers/auth
    method: POST
    data_selector: ''
    params: {}
- name: agentsessions
  endpoint:
    path: /api/v1/appuid/${YOUR-APP-UID}/agentsessions
    method: POST
    data_selector: agentUid
    params: {}
- name: sdkusers
  endpoint:
    path: /api/v1/appuid/YOUR-APP-UID/sdkusers/auth
    method: POST
    data_selector: userEmail
    params: {}
- name: mindset-agent
  endpoint:
    path: /mindset-agent
    method: POST
    data_selector: agentData
    params: {}
- name: mindset-container
  endpoint:
    path: /mindset-container
    method: POST
    data_selector: containerData
    params: {}
- name: agent_sessions
  endpoint:
    path: /api/v1/appuid/YOUR-APP-UID/agentsessions
    method: POST
    data_selector: agentUid
    params: {}
- name: sdk_users_auth
  endpoint:
    path: /api/v1/appuid/YOUR-APP-UID/sdkusers/auth
    method: POST
    data_selector: externalId
    params: {}
- name: agentsessions
  endpoint:
    path: /api/v1/appuid/${YOUR-APP-UID}/agentsessions
    method: POST
    data_selector: ''
    params: {}
- name: sdkusers
  endpoint:
    path: /api/v1/appuid/YOUR-APP-UID/sdkusers/auth
    method: POST
    data_selector: ''
    params: {}
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: context
  endpoint:
    path: /contexts
    method: GET
    data_selector: contexts
- name: context_files
  endpoint:
    path: /sdk-api/api/context-files
    method: GET
    data_selector: files
- name: agents
  endpoint:
    path: /sdk-api/api/agents
    method: GET
    data_selector: agents
    params: {}
- name: auth_token
  endpoint:
    path: /api/sdkusers
    method: POST
    data_selector: authToken
- name: context
  endpoint:
    path: /contexts
    method: GET
    data_selector: results
- name: create_label
  endpoint:
    path: /api/labels
    method: POST
- name: update_label
  endpoint:
    path: /api/labels
    method: PATCH
- name: get_labels
  endpoint:
    path: /api/labels
    method: GET
- name: delete_label
  endpoint:
    path: /api/labels
    method: DELETE
- name: auth_token
  endpoint:
    path: /sdk-api/api/sdk-users/generate-an-auth-token-for-a-given-user-identifier
    method: POST
    data_selector: authToken
    params: {}
notes:
- Deprecated userEmail parameter should not be used, prefer externalUserId
- When querying for more results, use the startAfter parameter with the createdAt
  string of the last agent session.
- The future belongs to those who move fast, empower their teams, and build agentic
  experiences that truly deliver value.
- Data is stored in GCP (Google Cloud Platform) hosted databases and secured with
  row-level security.
- All user data is secured at the user level.
- Data is stored in Google’s Europe-west2 data center in London, UK.
- All data is encrypted in transfer and at rest using 2048-bit RSA encryption.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- AI works best with human involvement.
- Users can report inappropriate responses for review.
- In case your agent uses the authenticated access, you have to set the fetchAuthentication
  param in the Mindset.init() method.
- User session requires externalId or userEmail parameter.
- Authentication process must be handled server-side. This is to ensure the security
  of your API key.
- Uses <mindset-container> to enable flexible UI mode for an embedded agent.
- The authentication process must be handled server-side.
- Uses authenticated access with a function to fetch authentication token.
- Agent Sessions are intended to be generated on demand each time you create a web
  page that contains an embedded agent.
- They become inactive after 31 days of non-use.
- When embedding the agent in an IFRAME, ensure the IFRAME has the allow="microphone
  www.yourweburl.com" attribute set.
- Ensure the IFRAME has the allow="microphone www.yourweburl.com" attribute set for
  voice to text feature.
- Ensure IFRAME has the 'allow="microphone www.yourweburl.com"' attribute set for
  voice to text feature in Safari.
- Do not provide investment advice, tax guidance, or legal counsel. Direct users to
  qualified professionals for these topics.
- Only discuss our company's products and services. Do not make comparisons with or
  recommendations about competitor products.
- 'Always include a disclaimer when providing technical instructions: ''Please backup
  your data before making any system changes.'''
- Provide general guidance only. For account-specific issues, direct users to log
  into their account or contact support directly.
- Never provide instructions that could be used to harm systems, bypass security,
  or violate terms of service.
- Keep all conversations professional and on-topic. Do not engage in personal discussions
  unrelated to business needs.
- Never ask for or process personal information like passwords, social security numbers,
  or payment details in conversations.
- When providing information from documentation, always reference the source and suggest
  users verify details in the latest official documentation.
- Never provide medical advice or health recommendations. Always direct users to consult
  healthcare professionals.
- Do not mention or compare with products from companies such as Google, Microsoft,
  or Amazon. Only discuss and provide information about our company’s (ACME Corp)
  solutions.
- Our current implementation still limits the number of agents per page to one. We
  are working to remove this limitation and will let you know as soon as it is lifted.
- The voice to text feature in the embedded agent UI is not supported yet in the Firefox
  browser.
- Access control mode for this agent can be restrictedAccess or openAccess.
- Ensure that the IFRAME has the allow="microphone www.yourweburl.com" attribute set
  for voice to text feature.
- The API is very strict with thumbnail validation.
- If the thumbnail fails, the content will still be processed.
- Use Agent Sessions with restrictedAccess agents.
- Prefer using externalId over userEmail for user identification
- Some content types have to be sent in the request body - using documentContent
- Some content types have to be stored externally with a URL sent to the API, so that
  it can in turn download them for ingestion - using sourceUrl
errors:
- 'No Third-Party Sharing Policy: We do not share, sell, or trade our clients’ data
  with third parties or other clients under any circumstance.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Error getting token
- 'Invalid request: You must provide either externalId or userEmail.'
- 'Invalid request: Must provide either externalId or userEmail, not both.'
- '500: Error getting token'
- 'HTTP error! status: ${response.status}'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck API key or token expiration'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '404: No more results available for pagination.'
auth_info:
  mentioned_objects:
  - authToken
  - sdkusers
  - AgentSession
  - SDK Users
client:
  base_url: https://MINDSET-API-HOST
  auth:
    type: apikey
  headers:
    Content-Type: application/json
    x-api-key: YOUR-MINDSET-API-KEY
source_metadata: null
