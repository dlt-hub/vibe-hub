resources:
- name: properties
  endpoint:
    path: /inventory/v1/properties
    method: GET
    data_selector: properties
- name: properties
  endpoint:
    path: /inventory/v1/properties
    method: GET
    data_selector: properties
    params: {}
- name: properties
  endpoint:
    path: /inventory/v1/properties/{property_id}
    method: GET
    data_selector: propertyDetails
- name: subscriptions
  endpoint:
    path: /v1/subscriptions
    method: GET
- name: delete_subscriptions
  endpoint:
    path: /v1/subscriptions/{id}
    method: DELETE
- name: properties_v1
  endpoint:
    path: /inventory/v1/properties
    method: GET
- name: properties_nsfw
  endpoint:
    path: /inventory/v0-nsfw/properties
    method: GET
- name: properties
  endpoint:
    path: /inventory/v1/properties
    method: GET
- name: nsfw_properties
  endpoint:
    path: /inventory/v0-nsfw/properties
    method: GET
- name: companies
  endpoint:
    path: /companies
    method: GET
- name: reservations
  endpoint:
    path: /reservations
    method: GET
- name: account_events
  endpoint:
    path: /webhooks/account
    method: POST
    data_selector: events
- name: property_events
  endpoint:
    path: /webhooks/property
    method: POST
    data_selector: events
- name: reservation_events
  endpoint:
    path: /webhooks/reservation
    method: POST
    data_selector: events
- name: booking_events
  endpoint:
    path: /webhooks/booking
    method: POST
    data_selector: events
- name: company_events
  endpoint:
    path: /webhooks/company
    method: POST
    data_selector: events
- name: group_events
  endpoint:
    path: /webhooks/group
    method: POST
    data_selector: events
- name: block_events
  endpoint:
    path: /webhooks/block
    method: POST
    data_selector: events
- name: unit_events
  endpoint:
    path: /webhooks/unit
    method: POST
    data_selector: events
- name: unitgroup_events
  endpoint:
    path: /webhooks/unitgroup
    method: POST
    data_selector: events
- name: unitattributedefinition_events
  endpoint:
    path: /webhooks/unitattributedefinition
    method: POST
    data_selector: events
- name: folio_events
  endpoint:
    path: /webhooks/folio
    method: POST
    data_selector: events
- name: rateplan_events
  endpoint:
    path: /webhooks/rateplan
    method: POST
    data_selector: events
- name: nightaudit_events
  endpoint:
    path: /webhooks/nightaudit
    method: POST
    data_selector: events
- name: maintenance_events
  endpoint:
    path: /webhooks/maintenance
    method: POST
    data_selector: events
- name: citytax_events
  endpoint:
    path: /webhooks/citytax
    method: POST
    data_selector: events
- name: service_events
  endpoint:
    path: /webhooks/service
    method: POST
    data_selector: events
- name: paymenttransaction_events
  endpoint:
    path: /webhooks/paymenttransaction
    method: POST
    data_selector: events
- name: subscription
  endpoint:
    path: /v1/subscriptions
    method: POST
    data_selector: subscription
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/subscriptions/{id}
    method: GET
- name: account
  endpoint:
    path: /events/account
    method: POST
    data_selector: events
- name: property
  endpoint:
    path: /events/property
    method: POST
    data_selector: events
- name: reservation
  endpoint:
    path: /events/reservation
    method: POST
    data_selector: events
- name: booking
  endpoint:
    path: /events/booking
    method: POST
    data_selector: events
- name: company
  endpoint:
    path: /events/company
    method: POST
    data_selector: events
- name: group
  endpoint:
    path: /events/group
    method: POST
    data_selector: events
- name: block
  endpoint:
    path: /events/block
    method: POST
    data_selector: events
- name: unit
  endpoint:
    path: /events/unit
    method: POST
    data_selector: events
- name: unitgroup
  endpoint:
    path: /events/unitgroup
    method: POST
    data_selector: events
- name: unitattributedefinition
  endpoint:
    path: /events/unitattributedefinition
    method: POST
    data_selector: events
- name: folio
  endpoint:
    path: /events/folio
    method: POST
    data_selector: events
- name: rateplan
  endpoint:
    path: /events/rateplan
    method: POST
    data_selector: events
- name: nightaudit
  endpoint:
    path: /events/nightaudit
    method: POST
    data_selector: events
- name: maintenance
  endpoint:
    path: /events/maintenance
    method: POST
    data_selector: events
- name: citytax
  endpoint:
    path: /events/citytax
    method: POST
    data_selector: events
- name: service
  endpoint:
    path: /events/service
    method: POST
    data_selector: events
- name: paymenttransaction
  endpoint:
    path: /events/paymenttransaction
    method: POST
    data_selector: events
- name: update_subscription
  endpoint:
    path: /v1/subscriptions/{id}
    method: PUT
- name: subscriptions
  endpoint:
    path: /v1/subscriptions
    method: POST
    data_selector: subscription
    params: {}
- name: delete_subscription
  endpoint:
    path: /v1/subscriptions/{id}
    method: DELETE
- name: subscriptions
  endpoint:
    path: /v1/subscriptions/{id}
    method: GET
    data_selector: subscriptions
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
- name: subscription
  endpoint:
    path: /v1/subscriptions/{id}
    method: PUT
- name: subscription
  endpoint:
    path: /v1/subscriptions/{id}
    method: DELETE
- name: DashboardAccountContext
  endpoint:
    path: /home
    params:
      accountCode: ACCOUNT
      propertyId: PROPERTY
- name: DashboardPropertyContext
  endpoint:
    path: /home
    params: {}
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: payload
- name: ui-integrations
  endpoint:
    path: /integration/v1/ui-integrations/{target}
    method: POST
- name: ui-integrations
  endpoint:
    path: /integration/v1/ui-integrations/{target}
    method: POST
- name: navigation
  endpoint:
    path: /navigation
    method: POST
    data_selector: message
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: POST
    data_selector: message
    params: {}
- name: payment_methods
  endpoint:
    path: /paymentMethods
    method: GET
    data_selector: paymentMethods
- name: payments
  endpoint:
    path: /checkout/V52/payments
    method: POST
- name: payment_methods
  endpoint:
    path: /paymentMethods
    method: GET
    data_selector: paymentMethods
- name: payments
  endpoint:
    path: /checkout/V52/payments
    method: POST
- name: payment_transactions
  endpoint:
    path: /payment/v1/payment-transactions/by-terminal
    method: POST
- name: folios_payments
  endpoint:
    path: /finance/v1/folios/{folioId}/payments/by-authorization
    method: POST
- name: payment_transactions
  endpoint:
    path: /payment/v1/payment-transactions/by-terminal
    method: POST
- name: folio_payments
  endpoint:
    path: /finance/v1/folios/{folioId}/payments/by-authorization
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: resultCode
- name: payments_details
  endpoint:
    path: /payments/details
    method: POST
    data_selector: resultCode
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: result
    params: {}
- name: payments_details
  endpoint:
    path: /payments/details
    method: POST
    data_selector: result
    params: {}
- name: payments_by_authorization
  endpoint:
    path: /finance/v1/folios/{folioId}/payments/by-authorization
    method: POST
- name: payments_by_payment_account
  endpoint:
    path: /finance/v1/folios/{folioId}/payments/by-payment-account
    method: POST
- name: payments_by_link
  endpoint:
    path: /finance/v1/folios/{folioId}/payments/by-link
    method: POST
- name: payments_by_terminal
  endpoint:
    path: /finance/v1/folios/{folioId}/payments/by-terminal
    method: POST
- name: payments_by_authorization
  endpoint:
    path: /finance/v1/folios/{folioId}/payments/by-authorization
    method: POST
- name: payments_by_payment_account
  endpoint:
    path: /finance/v1/folios/{folioId}/payments/by-payment-account
    method: POST
- name: payments_by_link
  endpoint:
    path: /finance/v1/folios/{folioId}/payments/by-link
    method: POST
- name: payments_by_terminal
  endpoint:
    path: /finance/v1/folios/{folioId}/payments/by-terminal
    method: POST
- name: transaction_details
  endpoint:
    path: /payment/v1/transactions/{pspReference}
    method: GET
- name: transactions
  endpoint:
    path: /payment/v1/transactions
    method: GET
- name: transactions
  endpoint:
    path: /payment/v1/transactions/{pspReference}
    method: GET
    data_selector: journal
- name: payment_account
  endpoint:
    path: /pal/servlet/Payment/v68/authorise
    method: POST
    data_selector: paymentAccount
    params:
      shopperInteraction: Ecommerce
      recurringProcessingModel: UnscheduledCardOnFile
      storePaymentMethod: 'true'
- name: transactions
  endpoint:
    path: /payment/v1/transactions
    method: GET
- name: payment_account
  endpoint:
    path: /payment/account
    method: POST
    data_selector: response
    params: {}
- name: payment_account
  endpoint:
    path: /pal/servlet/Payment/v68/authorise
    method: POST
    data_selector: response
    params:
      shopperInteraction: Ecommerce
      recurringProcessingModel: UnscheduledCardOnFile
      storePaymentMethod: 'true'
- name: payment_account
  endpoint:
    path: /payment/account
    method: POST
    data_selector: paymentAccount
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: property
  endpoint:
    path: /inventory/v1/properties/MUC
    method: GET
    data_selector: propertyDetails
- name: subscriptions
  endpoint:
    path: /v1/subscriptions
    method: POST
notes:
- apaleo APIs are accessible via Swagger UI
- Uses OAuth 2.0 Authorization Code flow
- Authorization code is single use only
- Uses OAuth 2.0 authorization code grant flow.
- Refresh tokens are subject to strict storage requirements to ensure that they are
  not leaked.
- New OAuth2 access tokens have expirations.
- Client credentials grant flow is the least secure and should only be used for trusted
  internal clients.
- Client credentials grant type is recommended for internal client apps highly trusted
  by the resource server.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Ensure your application follows best practices for OAuth 2.0.
- Keep in mind that the hotel must send you back the client Id and client secret after
  creating them.
- Only users with administration management privileges can disconnect or delete apps.
- apaleo limits API call usage to maintain a high level of availability and ensure
  that we provide an excellent API experience to all our customers.
- Rate limiting and throttling policies are designed to limit API access, but have
  different purposes.
- APIs reject requests that exceed the limit.
- A total of 3500 requests/minute with 100 requests/second on average and a burst
  of up to 200 requests/second.
- To be prepared for future changes, your app should be prepared to handle rate limiting
  on all endpoints, rather than just those that are listed above.
- We recommend not using a pageSize higher than 100.
- Always specify a pageSize, ideally 100, to ensure predictable and consistent data
  handling.
- Never assume that a single response contains all available data.
- APIs reject requests that exceed the limit. It is necessary to guarantee the system’s
  stability and quick response times to every app and user.
- Webhooks should be protected using basic authentication or HTTPS
- Webhook URLs need to be reachable from apaleo.com
- The scope restricts the endpoints to which a client has access.
- Webhook allows you to build or set up apps that subscribe to certain events on apaleo.
- Webhooks should be protected using basic authentication or HTTPS.
- Webhook URLs need to be reachable from apaleo.com.
- Subscriptions must be for at least one event
- If no properties are specified, the subscription will work for all properties
- The response will be an array of objects representing your subscriptions.
- 'Whitelist the apaleo outbound IP addresses: 34.240.36.71, 52.212.76.75, 63.33.249.221'
- The endpointUrl must be working via HTTPS
- Guard against duplicate events by making your event processing idempotent
- Appended a unique token to your URL can help you authenticate and certify that you
  are receiving a valid webhook notification
- You have to check accountCode and subjectId with every request.
- A webhook is considered successful when the endpointUrl responds with 2xx code.
- responsive (full content page)
- iFrame Resizer supported
- Webhook service sends events as a POST request to the endpointUrl set up for the
  subscription, which must be via HTTPS.
- Webhooks might occasionally be sent more than once. It's advised to guard against
  duplicate events by making event processing idempotent.
- supported
- Uses OAuth2 with refresh token — requires setup of connected app in apaleo
- Uses OAuth2 with refresh token
- This section only applies to private integrations, public integrations are not testable.
- If you make any changes on your side, you may want to make sure that our integration
  service can get your integration without any hiccups.
- Apaleo supports multiple CRM integrations simultaneously. Each integration is registered
  separately using a unique code in the request body.
- Ensure proper detection of when the CRM is embedded in an iframe.
- Uses postMessage API for secure communication between iframe and host
- Apaleo uses iframe-resizer v4. Newer versions will not be integrated with Apaleo.
- All apaleo One / UI integrations are acting as third-party, therefore if your application
  stores cookies, it’s possible that they will be completely purged or at least have
  some limitations and restrictions applied based on the browsers implementation of
  the Storage Access API.
- You need to clear the certification process before going live.
- Uses API Key for authentication
- You must get a list of the available payment methods that are available for the
  merchant account.
- You must send subMerchantID. It has to be part of the payment configuration.
- Make sure to set the deliveryDate to the earliest arrival of all reservations.
- Ensure PCI compliance when handling card details.
- Uses OAuth2
- For this API, payment:transactions.read scope should be enabled in your app.
- The transaction can be refused or cancelled for some reason. The refusal reason
  is primarily based on the authorization response code that is received from the
  issuer or card scheme.
- shopperReference is the unique identifier to use when storing this recurring authorization
- You need to send booking for generic credit cards in the similar way. Please note
  that the credit card has to be tokenized first.
- Only Apaleo Connect instances enable you to set up an app store listing
- Your app uses OAuth 2.0 Grant Flow for authentication and the user should be able
  to set up and use the app immediately after the OAuth 2.0 Grant Flow connection.
- Your app only specifies the scopes that it requires to work and does not ask for
  unnecessary permissions.
- Your app must use webhooks instead of polling.
- Your app must use webhooks instead of polling. This way, you won’t hit the rate
  limit.
- Client credentials grant type is the least secure grant type.
- The client app acts on its own behalf and assumes the role of the resource owner.
- Uses OAuth2 with client credentials — requires setup of connected app in apaleo
- Your app can appropriately handle issues like 404s.
- Your app still works after 3600 seconds (lifetime of the access_token).
- We recommend that your webhook URLs be protected using basic authentication or HTTPS.
- It also needs to be reachable from apaleo.com.
- When subscribing to set-to-live events, leave propertyIds empty.
- Important considerations for webhook configuration.
- It is necessary to guarantee the system’s stability and quick response times to
  every app and user.
- When subscribing to these events make sure to leave `propertyIds` empty. Since these
  are account-level events, they will not be delivered for subscriptions with property
  filter.
- Only available for Apaleo Pay accounts.
- To be prepared for future changes, your app should be prepared to handle rate limiting
  on all endpoints.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Ensure correct client credentials and grant type.'
- '401 Unauthorized: Recheck client credentials'
- 'invalid_request: Check whether all the parameters are correct, client_id exists,
  and so on.'
- 'unauthorized_client: Make sure that the provided redirect_URI is correct, and at
  least one redirect_uri is defined in the client app.'
- 'unsupported_response_type: Try to change the selected method of authorization.'
- 'invalid_scope: Make sure that the request is correct.'
- '429 Too many requests: The server provides you with more information about which
  throttling limit you hit and when you can resume your calls.'
- '401: Unauthorized. When you are using the client credentials flow, this means there
  is something wrong with your token, or the way you pass it.'
- '403: Forbidden. Your client or user does not have the rights to access a specific
  resource.'
- '404: Not Found. You can get this, when you try getting, updating or deleting a
  resource.'
- '405: Method not allowed. You will get this, if you use the wrong HTTP verb.'
- '422: Something’s wrong. The apaleo API uses this as a catch-all for client side
  errors.'
- '500: Server errors. Oh no! This should never happen, as it means there is something
  broken on our side.'
- Check firewalls if incoming traffic is blocked on port 443
- '401 Unauthorized: Check the Getting Started Guide or Connect your app with OAuth
  2.0'
- '403 Forbidden: Contact us to request more access.'
- '404 Not Found: Check for typos in the URL or wrong id in query parameter.'
- '405 Method not allowed: Check the API definition for correct HTTP verb.'
- '422 Something’s wrong: Ensure mandatory fields are set correctly.'
- '500 Server errors: Contact api@apaleo.com for issues on our side.'
- If firewalls prevent incoming traffic on port 443, ask to whitelist apaleo's outbound
  IP addresses.
- If a delivery attempt fails, we will try resending the event every minute
- '204: No Content'
- '404: Not Found'
- 'Status code: 404'
- 'Status code: 404: Response from https://www.example.com was not successful (2xx)'
- '401 Unauthorized: Check API Key'
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Invalid parameters in the request'
- '401 Unauthorized: Invalid API key or token'
- '403 Forbidden: Access denied'
- Check firewall settings to ensure apaleo can reach your webhook URLs.
- '429 Too many requests: Retry after specified time.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - payment:transactions.read
  - NamedCredential
client:
  base_url: https://api.apaleo.com
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
