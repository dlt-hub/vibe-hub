resources:
- name: hello
  endpoint:
    path: /api/v3/hello
    method: GET
    data_selector: hello
    params: {}
- name: Create Return
  endpoint:
    path: /operation/createReturn
    method: POST
    data_selector: ''
    params: {}
- name: Complete Return
  endpoint:
    path: /operation/completeReturn
    method: POST
    data_selector: ''
    params: {}
- name: Get Returns
  endpoint:
    path: /operation/getReturns
    method: GET
    data_selector: ''
    params: {}
- name: Get Return Change Log
  endpoint:
    path: /operation/getReturnChangeLog
    method: GET
    data_selector: ''
    params: {}
- name: Create or Complete Return Small Batch
  endpoint:
    path: /operation/createOrCompleteReturnSmallBatch
    method: POST
    data_selector: ''
    params: {}
- name: Create or Complete Return Large Batch
  endpoint:
    path: /operation/createOrCompleteReturnLargeBatch
    method: POST
    data_selector: ''
    params: {}
- name: Data Collector API
  endpoint:
    path: /operation/collectData
    method: POST
    data_selector: ''
    params: {}
- name: Create Function API
  endpoint:
    path: /operation/createFunction
    method: POST
    data_selector: ''
    params: {}
- name: List Functions API
  endpoint:
    path: /operation/listFunctions
    method: GET
    data_selector: ''
    params: {}
- name: Get Function by ID API
  endpoint:
    path: /operation/getFunctionById
    method: GET
    data_selector: ''
    params: {}
- name: Update Function API
  endpoint:
    path: /operation/updateFunction
    method: PUT
    data_selector: ''
    params: {}
- name: Delete Function API
  endpoint:
    path: /operation/deleteFunction
    method: DELETE
    data_selector: ''
    params: {}
- name: Update Catalog Small Batch API
  endpoint:
    path: /operation/updateCatalogSmallBatch
    method: PUT
    data_selector: ''
    params: {}
- name: Update Catalog Large Batch API
  endpoint:
    path: /operation/updateCatalogLargeBatch
    method: PUT
    data_selector: ''
    params: {}
- name: Create Order API
  endpoint:
    path: /operation/createOrder
    method: POST
    data_selector: ''
    params: {}
- name: List Streams API
  endpoint:
    path: /operation/listStreams
    method: GET
    data_selector: ''
    params: {}
- name: Get Stream Events From Position API
  endpoint:
    path: /operation/getStreamEventsFromPosition
    method: GET
    data_selector: ''
    params: {}
- name: Get Stream Events In Range API
  endpoint:
    path: /operation/getStreamEventsInRange
    method: GET
    data_selector: ''
    params: {}
- name: Create Stream API
  endpoint:
    path: /operation/createStream
    method: POST
    data_selector: ''
    params: {}
- name: Update Stream API
  endpoint:
    path: /operation/updateStream
    method: PUT
    data_selector: ''
    params: {}
- name: Update Stream Position API
  endpoint:
    path: /operation/updateStreamPosition
    method: PUT
    data_selector: ''
    params: {}
- name: Delete Stream API
  endpoint:
    path: /operation/deleteStream
    method: DELETE
    data_selector: ''
    params: {}
- name: create_assortment
  endpoint:
    path: /assortment
    method: POST
    data_selector: results
- name: list_assortments
  endpoint:
    path: /assortment
    method: GET
    data_selector: results
- name: retrieve_assortment
  endpoint:
    path: /assortment/{id}
    method: GET
    data_selector: results
- name: update_assortment
  endpoint:
    path: /assortment/{id}
    method: PUT
    data_selector: results
- name: delete_assortment
  endpoint:
    path: /assortment/{id}
    method: DELETE
    data_selector: results
- name: add_item_to_assortment
  endpoint:
    path: /assortment/{id}/item
    method: POST
    data_selector: results
- name: remove_item_from_assortment
  endpoint:
    path: /assortment/{id}/item
    method: DELETE
    data_selector: results
- name: add_items_to_assortment
  endpoint:
    path: /assortment/{id}/items
    method: POST
    data_selector: results
- name: remove_items_from_assortment
  endpoint:
    path: /assortment/{id}/items
    method: DELETE
    data_selector: results
- name: add_items_to_assortment_small_batch
  endpoint:
    path: /assortment/{id}/batch/small
    method: POST
    data_selector: results
- name: remove_items_from_assortment_small_batch
  endpoint:
    path: /assortment/{id}/batch/small
    method: DELETE
    data_selector: results
- name: get_assortment_change_log
  endpoint:
    path: /assortment/log
    method: GET
    data_selector: results
- name: hello_world
  endpoint:
    path: /hello
    method: GET
    data_selector: results
- name: get_catalog_object
  endpoint:
    path: /catalog
    method: GET
    data_selector: results
- name: update_catalog_small_batch
  endpoint:
    path: /catalog/batch/small
    method: POST
    data_selector: results
- name: update_catalog_large_batch
  endpoint:
    path: /catalog/batch/large
    method: POST
    data_selector: results
- name: get_catalog_change_log
  endpoint:
    path: /catalog/log
    method: GET
    data_selector: results
- name: get_catalog_attribution
  endpoint:
    path: /catalogattr/catalog/{accountId}
    method: GET
- name: update_catalog_attribution_large_batch
  endpoint:
    path: /catalogattr/batch/large
    method: POST
    params:
      fileType: tsv
- name: get_catalog_attribution_change_log
  endpoint:
    path: /catalogattr/log
    method: GET
    params:
      endDate: string
      requestId: string
      scrollId: string
      startDate: string
      status: string
- name: assortment
  endpoint:
    path: /assortment
    method: POST
- name: assortments
  endpoint:
    path: /assortment
    method: GET
- name: assortment_by_id
  endpoint:
    path: /assortment/{id}
    method: GET
- name: update_assortment
  endpoint:
    path: /assortment/{id}
    method: PUT
- name: delete_assortment
  endpoint:
    path: /assortment/{id}
    method: DELETE
- name: add_item_to_assortment
  endpoint:
    path: /assortment/{id}/item
    method: POST
- name: remove_item_from_assortment
  endpoint:
    path: /assortment/{id}/item
    method: DELETE
    data_selector: success
- name: add_items_to_assortment
  endpoint:
    path: /assortment/{id}/items
    method: POST
    data_selector: success
- name: remove_items_from_assortment
  endpoint:
    path: /assortment/{id}/items
    method: DELETE
    data_selector: success
- name: add_items_to_assortment_small_batch
  endpoint:
    path: /assortment/{id}/batch/small
    method: POST
    data_selector: status
- name: remove_items_from_assortment_small_batch
  endpoint:
    path: /assortment/{id}/batch/small
    method: DELETE
    data_selector: status
- name: get_assortment_change_log
  endpoint:
    path: /assortment/log
    method: GET
    data_selector: logs
- name: hello_world
  endpoint:
    path: /hello
    method: GET
    data_selector: hello
- name: get_catalog_object
  endpoint:
    path: /catalog
    method: GET
    data_selector: ItemCatalog
- name: Update Catalog Small Batch
  endpoint:
    path: /catalog/batch/small
    method: POST
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: products
- name: catalog_batch_large
  endpoint:
    path: /catalog/batch/large
    method: POST
- name: catalog_change_log
  endpoint:
    path: /catalog/log
    method: GET
- name: get_catalog_attribution
  endpoint:
    path: /catalogattr/catalog/{accountId}
    method: GET
    data_selector: catalog
    params:
      accountId: required
- name: update_catalog_attribution_large_batch
  endpoint:
    path: /catalogattr/batch/large
    method: POST
    data_selector: dataUrl
    params:
      fileType: tsv
- name: get_catalog_attribution_change_log
  endpoint:
    path: /catalogattr/log
    method: GET
    data_selector: logs
    params: {}
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: logs
- name: Update Channel Overrides Small Batch
  endpoint:
    path: /catalog/overrides/batch/small
    method: PUT
    data_selector: results
- name: Create Conversation
  endpoint:
    path: /conversation
    method: POST
    data_selector: results
- name: addException
  endpoint:
    path: /addException
    method: POST
    data_selector: results
- name: function
  endpoint:
    path: /function
    method: POST
    data_selector: results
- name: inventory
  endpoint:
    path: /inventory
    method: GET
    data_selector: results
- name: invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: invoices
    params: {}
- name: order
  endpoint:
    path: /order/
    method: POST
    data_selector: order
    params: {}
- name: packing_slip
  endpoint:
    path: /packingslip
    method: POST
    data_selector: results
    params: {}
- name: pricing_approvals
  endpoint:
    path: /pricing/approval
    method: GET
    data_selector: approvals
    params: {}
- name: settlement_records
  endpoint:
    path: /marketplace/settlements
    method: GET
    data_selector: settlements
    params: {}
- name: Create Return
  endpoint:
    path: /return/
    method: POST
    data_selector: results
    params: {}
- name: stream
  endpoint:
    path: /stream
    method: POST
    data_selector: id
    params: {}
- name: trading_partner
  endpoint:
    path: /tradingpartner
    method: GET
    data_selector: TradingPartners
    params: {}
- name: create_monitored_shipments_small_batch
  endpoint:
    path: /monitoredshipments/batch/small
    method: POST
    data_selector: results
- name: create_shipping_labels
  endpoint:
    path: /shippinglabels
    method: POST
    data_selector: results
- name: delivery_promise
  endpoint:
    path: /deliverypromise
    method: POST
    data_selector: results
notes:
- Each HTTP request must include the Authorization header with the customer's auth
  token prefixed by 'bearer'.
- Use the Delivery Promise API to generate promise dates at or before order creation.
- This synchronous API is not meant to be used to retrieve lots of objects and as
  such is rate-limited.
- You can call this API 1 times per second, or up to 3600 times per hour.
- Data must be sent in JSON Lines format.
- Use the streams API to retrieve CatalogChangeLog data with the requestId.
- Change logs will stay in the system for two weeks.
- The API allows setting and removing SKU holds.
- 'Rate limit: 15 calls per second, up to 300 calls per minute.'
- API is rate-limited to 15 calls per second, or 1000 calls per minute.
- Retailers should use the asynchronous API to send external shipment details.
- The API accepts small batches (up to 5 megabytes) of order shipments.
errors:
- 408 - request timeout
- 429 - too many requests
- 500 - internal server error
- 502 - bad gateway
- 503 - service unavailable
- 504 - gateway timeout
- 'HTTP 404: The page doesn''t exist - perhaps it expired.'
- '202: the request was received and is being processed'
- '400 Bad Request: Check the request format and required fields.'
- '207 Multi-Status: Multiple resources processed successfully.'
- '400: There was a problem with the request, either missing required param, a bad
  grant type or an invalid scope'
- '401: The client credentials are either invalid or not authorized'
- '400: Couldn''t request cancellation.'
- '400: Invalid request payload'
- '400 Bad Request: Invalid input data.'
- '202 Accepted: Request has been accepted for processing.'
- '207: The results of a successful request.'
- '400: The results of a bad request.'
auth_info:
  mentioned_objects:
  - DscoAuth
  - DscoOauth
client:
  base_url: https://api.dsco.io/api/v3
  headers:
    Accept: application/json
    Content-Type: application/json
source_metadata: null
