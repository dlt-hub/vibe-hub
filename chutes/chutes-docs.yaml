resources:
- name: user_growth
  endpoint:
    path: /users/growth
    method: GET
- name: user_id_lookup
  endpoint:
    path: /users/user_id_lookup
    method: GET
    params:
      username: ''
- name: me_usage
  endpoint:
    path: /users/me/usage
    method: GET
- name: set_logo
  endpoint:
    path: /users/set_logo
    method: GET
    params:
      logo_id: ''
- name: list_usage
  endpoint:
    path: /users/me/usage
    method: GET
    data_selector: usage_summary
    params: {}
- name: username_check
  endpoint:
    path: /users/name_check
    method: GET
    data_selector: username_check_result
    params:
      username: string
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Chutes
  endpoint:
    path: /app/chute
    method: GET
- name: chute
  endpoint:
    path: /app/chute
    method: GET
    data_selector: records
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: ''
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: records
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: ''
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: ''
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: results
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: completions
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: records
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: results
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: completion
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: responses
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: ''
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: records
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: records
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: records
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: records
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: records
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: results
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: records
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: responses
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: null
    params: null
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: records
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: records
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: null
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: ''
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: completions
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: records
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: responses
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: completions
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: completions
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: miner_data
  endpoint:
    path: /audit/miner_data
    method: POST
    data_selector: null
    params: {}
- name: audit_entries
  endpoint:
    path: /audit/
    method: GET
    data_selector: null
    params: {}
- name: download_audit_data
  endpoint:
    path: /audit/download
    method: GET
    data_selector: null
    params:
      path: ''
- name: registry_auth
  endpoint:
    path: /registry/auth
    method: GET
- name: delete_api_key
  endpoint:
    path: /api_keys/{api_key_id}
    method: DELETE
- name: chutes
  endpoint:
    path: /chutes/
    method: GET
    data_selector: records
    params: {}
- name: bounties
  endpoint:
    path: /bounties/
    method: GET
    data_selector: records
    params: {}
- name: list_bounties
  endpoint:
    path: /bounties/
    method: GET
    data_selector: ''
- name: analyze_model
  endpoint:
    path: /guess/vllm_config
    method: GET
    data_selector: records
    params:
      model: string
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: latest_metrics
  endpoint:
    path: /_metrics
    method: GET
- name: stream_build_logs
  endpoint:
    path: /images/{image_id}/logs
    method: GET
- name: delete_image
  endpoint:
    path: /images/{image_id_or_name}
    method: DELETE
- name: launch_config
  endpoint:
    path: /instances/launch_config
    method: GET
    data_selector: null
    params: {}
- name: delete_instance
  endpoint:
    path: /instances/{chute_id}/{instance_id}
    method: DELETE
    data_selector: null
    params: {}
- name: get_usage
  endpoint:
    path: /invocations/usage
    method: GET
- name: get_exports
  endpoint:
    path: /invocations/exports/{year}/{month}/{day}/{hour_format}
    method: GET
- name: report_invocation
  endpoint:
    path: /invocations/{invocation_id}/report
    method: POST
    params:
      invocation_id: string
- name: get_recent_exports
  endpoint:
    path: /invocations/exports/recent
    method: GET
- name: create_job
  endpoint:
    path: /jobs/{chute_id}/{method}
    method: POST
- name: upload_job_file
  endpoint:
    path: /jobs/{job_id}/upload
    method: PUT
- name: get_job
  endpoint:
    path: /jobs/{job_id}
    method: GET
- name: download_output_file
  endpoint:
    path: /jobs/{job_id}/download/{file_id}
    method: GET
- name: create_logo
  endpoint:
    path: /logos/
    method: POST
    data_selector: null
    params: {}
- name: render_logo
  endpoint:
    path: /logos/{logo_id}.{extension}
    method: GET
    data_selector: null
    params: {}
- name: chutes
  endpoint:
    path: /miner/chutes/
    method: GET
    data_selector: records
- name: utilization_instances
  endpoint:
    path: /miner/utilization_instances
    method: GET
    data_selector: records
- name: stats
  endpoint:
    path: /miner/stats
    method: GET
    data_selector: records
- name: scores
  endpoint:
    path: /miner/scores
    method: GET
    data_selector: records
- name: utilization_instances
  endpoint:
    path: /miner/utilization_instances
    method: GET
    data_selector: records
    params:
      hotkey: string|null
- name: nodes
  endpoint:
    path: /nodes/
    method: GET
    data_selector: response
    params: {}
- name: delete_node
  endpoint:
    path: /nodes/{node_id}
    method: DELETE
    data_selector: response
    params: {}
- name: quota_unlock_amount
  endpoint:
    path: /quota_unlock_amount
    method: GET
    data_selector: null
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: null
    params:
      page: null
      limit: null
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: messages
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: result
    params: {}
- name: chutes
  endpoint:
    path: /chutes/
    method: GET
    data_selector: records
- name: analyze_sentiment
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
- name: analyze_batch
  endpoint:
    path: /batch
    method: POST
    data_selector: results
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: status
- name: analyze
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
    params: {}
- name: batch
  endpoint:
    path: /batch
    method: POST
    data_selector: results
    params: {}
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: status
    params: {}
- name: predict
  endpoint:
    path: /predict
    method: POST
    data_selector: prediction
    params: {}
- name: predict
  endpoint:
    path: /predict
    method: POST
    data_selector: prediction
- name: predict
  endpoint:
    path: /predict
    method: POST
    data_selector: result
- name: batch_predict
  endpoint:
    path: /batch-predict
    method: POST
    data_selector: result
- name: predict
  endpoint:
    path: /predict
    method: POST
    data_selector: result
- name: predict
  endpoint:
    path: /predict
    method: POST
- name: batch_predict
  endpoint:
    path: /batch-predict
    method: POST
- name: predict
  endpoint:
    path: /predict
    method: POST
    data_selector: result
    params: {}
- name: cached_predict
  endpoint:
    path: /cached-predict
    method: POST
    data_selector: result
    params: {}
- name: secure_endpoint
  endpoint:
    path: /secure-endpoint
    method: POST
    data_selector: secure_data
    params: {}
- name: predict
  endpoint:
    path: /predict
    method: POST
    data_selector: result
- name: batch_predict
  endpoint:
    path: /batch-predict
    method: POST
    data_selector: result
- name: predict
  endpoint:
    path: /predict
    method: POST
- name: cached_predict
  endpoint:
    path: /cached-predict
    method: POST
- name: secure_endpoint
  endpoint:
    path: /secure-endpoint
    method: POST
- name: predict
  endpoint:
    path: /predict
    method: POST
    data_selector: result
- name: cached_predict
  endpoint:
    path: /cached-predict
    method: POST
    data_selector: result
- name: secure_endpoint
  endpoint:
    path: /secure-endpoint
    method: GET
    data_selector: secure_data
- name: predict
  endpoint:
    path: /predict
    method: POST
- name: cached_predict
  endpoint:
    path: /cached-predict
    method: POST
- name: secure_endpoint
  endpoint:
    path: /secure-endpoint
    method: POST
- name: predict
  endpoint:
    path: /predict
    method: POST
- name: batch_predict
  endpoint:
    path: /batch-predict
    method: POST
- name: predict
  endpoint:
    path: /predict
    method: POST
- name: batch_predict
  endpoint:
    path: /batch-predict
    method: POST
- name: predict
  endpoint:
    path: /predict
    method: POST
- name: batch_predict
  endpoint:
    path: /batch-predict
    method: POST
- name: stream_generate
  endpoint:
    path: /stream
    method: POST
- name: predict
  endpoint:
    path: /predict
    method: POST
    data_selector: prediction
- name: batch_predict
  endpoint:
    path: /batch-predict
    method: POST
    data_selector: result
- name: predict
  endpoint:
    path: /predict
    method: POST
    data_selector: null
    params: {}
- name: hello
  endpoint:
    path: /hello
    method: POST
    data_selector: null
    params: {}
- name: greet
  endpoint:
    path: /greet
    method: POST
    data_selector: null
    params: {}
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: null
    params: {}
- name: update
  endpoint:
    path: /update
    method: PUT
    data_selector: null
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: null
    params: {}
- name: generate-image
  endpoint:
    path: /generate-image
    method: POST
    data_selector: null
    params: {}
- name: generate-audio
  endpoint:
    path: /generate-audio
    method: POST
    data_selector: null
    params: {}
- name: stream-generate
  endpoint:
    path: /stream-generate
    method: POST
    data_selector: null
    params: {}
- name: chat-completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: null
    params: {}
- name: predict
  endpoint:
    path: /predict
    method: POST
- name: say_hello
  endpoint:
    path: /hello
    method: POST
- name: greet
  endpoint:
    path: /greet
    method: POST
- name: get_status
  endpoint:
    path: /status
    method: GET
- name: update_config
  endpoint:
    path: /update
    method: PUT
- name: generate
  endpoint:
    path: /generate
    method: POST
- name: stream_generate
  endpoint:
    path: /stream-generate
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: predict
  endpoint:
    path: /predict
    method: POST
- name: greet
  endpoint:
    path: /greet
    method: POST
- name: get_status
  endpoint:
    path: /status
    method: GET
- name: update_config
  endpoint:
    path: /update
    method: PUT
- name: generate
  endpoint:
    path: /generate
    method: POST
- name: stream_generate
  endpoint:
    path: /stream-generate
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: predict
  endpoint:
    path: /predict
    method: POST
- name: hello
  endpoint:
    path: /hello
    method: POST
- name: greet
  endpoint:
    path: /greet
    method: POST
- name: status
  endpoint:
    path: /status
    method: GET
- name: update
  endpoint:
    path: /update
    method: PUT
- name: stream-generate
  endpoint:
    path: /stream-generate
    method: POST
- name: upload
  endpoint:
    path: /upload
    method: POST
- name: events
  endpoint:
    path: /events
    method: POST
- name: predict
  endpoint:
    path: /predict
    method: POST
- name: greet
  endpoint:
    path: /greet
    method: POST
- name: generate
  endpoint:
    path: /generate
    method: POST
- name: upload
  endpoint:
    path: /upload
    method: POST
- name: predict
  endpoint:
    path: /predict
    method: POST
- name: hello
  endpoint:
    path: /hello
    method: POST
- name: greet
  endpoint:
    path: /greet
    method: POST
- name: status
  endpoint:
    path: /status
    method: GET
- name: update
  endpoint:
    path: /update
    method: PUT
- name: upload
  endpoint:
    path: /upload
    method: POST
- name: stream-generate
  endpoint:
    path: /stream-generate
    method: POST
- name: events
  endpoint:
    path: /events
    method: GET
- name: predict
  endpoint:
    path: /predict
    method: POST
- name: hello
  endpoint:
    path: /hello
    method: POST
- name: greet
  endpoint:
    path: /greet
    method: POST
- name: status
  endpoint:
    path: /status
    method: GET
- name: upload
  endpoint:
    path: /upload
    method: POST
- name: stream-text
  endpoint:
    path: /stream-text
    method: POST
    params: {}
- name: rate-limited
  endpoint:
    path: /rate-limited
    method: POST
- name: predict
  endpoint:
    path: /predict
    method: POST
- name: hello
  endpoint:
    path: /hello
    method: POST
- name: greet
  endpoint:
    path: /greet
    method: POST
- name: status
  endpoint:
    path: /status
    method: GET
- name: update
  endpoint:
    path: /update
    method: PUT
- name: stream-generate
  endpoint:
    path: /stream-generate
    method: POST
- name: upload
  endpoint:
    path: /upload
    method: POST
- name: cached
  endpoint:
    path: /cached
    method: POST
- name: rate-limited
  endpoint:
    path: /rate-limited
    method: POST
- name: image
  endpoint:
    path: /api/images
    method: POST
    data_selector: image_data
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: images
  endpoint:
    path: /api/images
    method: GET
    data_selector: records
- name: image
  endpoint:
    path: /images
    method: GET
- name: images
  endpoint:
    path: /api/images
    method: GET
    data_selector: records
    params: {}
- name: jobs
  endpoint:
    path: /api/jobs
    method: POST
    data_selector: job_results
- name: job
  endpoint:
    path: /jobs/{job_id}/status
    method: GET
    data_selector: status
    params: {}
- name: job_results
  endpoint:
    path: /jobs/{job_id}/results
    method: GET
    data_selector: results
    params: {}
- name: jobs
  endpoint:
    path: /jobs
    method: POST
    data_selector: result
    params: {}
- name: jobs
  endpoint:
    path: /jobs
    method: POST
    data_selector: results
- name: job_status
  endpoint:
    path: /jobs/{job_id}/status
    method: GET
    data_selector: status
- name: job_results
  endpoint:
    path: /jobs/{job_id}/results
    method: GET
    data_selector: results
- name: job
  endpoint:
    path: /jobs
    method: POST
    data_selector: results
- name: node_selector
  endpoint:
    path: /node/selector
    method: POST
    data_selector: node_selection
    params:
      gpu_count: 1
      min_vram_gb_per_gpu: 16
- name: NodeSelector
  endpoint:
    path: /node-selector
    method: GET
    data_selector: records
    params: {}
- name: small_language_models
  node_selector:
    gpu_count: 1
    min_vram_gb_per_gpu: 8
- name: medium_language_models
  node_selector:
    gpu_count: 1
    min_vram_gb_per_gpu: 16
    include:
    - rtx4090
    - a100
    - h100
- name: large_language_models
  node_selector:
    gpu_count: 1
    min_vram_gb_per_gpu: 24
    include:
    - a100
    - h100
    exclude:
    - rtx3080
    - rtx4080
- name: underpowered
  node_selector:
    gpu_count: 1
    min_vram_gb_per_gpu: 8
    include:
    - rtx3080
- name: small_language_models
  node_selector:
    gpu_count: 1
    min_vram_gb_per_gpu: 8
- name: medium_language_models
  node_selector:
    gpu_count: 1
    min_vram_gb_per_gpu: 16
    include:
    - rtx4090
    - a100
    - h100
- name: large_language_models
  node_selector:
    gpu_count: 1
    min_vram_gb_per_gpu: 24
    include:
    - a100
    - h100
    exclude:
    - rtx3080
    - rtx4080
- name: very_large_language_models
  node_selector:
    gpu_count: 2
    min_vram_gb_per_gpu: 80
    include:
    - a100_80gb
    - h100_80gb
- name: massive_models
  node_selector:
    gpu_count: 8
    min_vram_gb_per_gpu: 80
    include:
    - a100_80gb
    - h100_80gb
    min_cpu_count: 64
    min_memory_gb: 512
- name: NodeSelector
  endpoint:
    path: /node_selector
    method: POST
    data_selector: selector
- name: Chute
  endpoint:
    path: /chute
    method: POST
    data_selector: chute
- name: NodeSelector
  endpoint:
    path: /docs/api-reference/nodes
    method: GET
    data_selector: records
    params: {}
- name: node_selector
  endpoint:
    path: /node/selector
    method: GET
    data_selector: node_selection
- name: vllm
  endpoint:
    path: /chutes/chute/template/vllm
    method: POST
    data_selector: chute
    params: {}
- name: sglang
  endpoint:
    path: /chutes/chute/template/sglang
    method: POST
    data_selector: chute
    params: {}
- name: tei
  endpoint:
    path: /chutes/chute/template/tei
    method: POST
    data_selector: chute
    params: {}
- name: diffusion
  endpoint:
    path: /chutes/chute/template/diffusion
    method: POST
    data_selector: chute
    params: {}
- name: VLLM Template
  endpoint:
    path: /docs/templates/vllm
    method: POST
    data_selector: chute
    params: {}
- name: SGLang Template
  endpoint:
    path: /docs/templates/sglang
    method: POST
    data_selector: chute
    params: {}
- name: TEI Template
  endpoint:
    path: /docs/templates/tei
    method: POST
    data_selector: chute
    params: {}
- name: Diffusion Template
  endpoint:
    path: /docs/templates/diffusion
    method: POST
    data_selector: chute
    params: {}
- name: chute
  endpoint:
    path: /secure_generate
    method: POST
- name: chute
  endpoint:
    path: /chute
    method: POST
    data_selector: records
- name: generate_text
  endpoint:
    path: /generate
    method: POST
- name: generate_image
  endpoint:
    path: /generate_image
    method: POST
- name: stream_generate
  endpoint:
    path: /stream_generate
    method: POST
- name: stats
  endpoint:
    path: /stats
    method: GET
- name: secure_generate
  endpoint:
    path: /secure_generate
    method: POST
    data_selector: result
    params: {}
- name: chute
  endpoint:
    path: /chutes
    method: POST
- name: generate
  endpoint:
    path: /generate
    method: POST
- name: generate_image
  endpoint:
    path: /generate_image
    method: POST
- name: stream_generate
  endpoint:
    path: /stream_generate
    method: POST
- name: stats
  endpoint:
    path: /stats
    method: GET
- name: chat
  endpoint:
    path: /chat
    method: websocket
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: generated_text
- name: generate_batched
  endpoint:
    path: /generate_batched
    method: POST
    data_selector: generated_text
- name: secure_generate
  endpoint:
    path: /secure_generate
    method: POST
    data_selector: generated_text
- name: generate_text
  endpoint:
    path: /generate_text
    method: POST
    data_selector: generated_text
- name: generate_image
  endpoint:
    path: /generate_image
    method: POST
    data_selector: generated_text
- name: embed_text
  endpoint:
    path: /embed_text
    method: POST
    data_selector: generated_text
- name: custom_generate
  endpoint:
    path: /custom_generate
    method: POST
    data_selector: generated_text
- name: generate
  endpoint:
    path: /generate
    method: POST
- name: users
  endpoint:
    path: /users/{user_id}
    method: POST
- name: models
  endpoint:
    path: /models/{model_id}/generate
    method: POST
- name: process_large_file
  endpoint:
    path: /process_large_file
    method: POST
    data_selector: data
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
- name: protected_generate
  endpoint:
    path: /protected_generate
    method: POST
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: null
    params: {}
- name: users
  endpoint:
    path: /users/{user_id}
    method: GET
    data_selector: null
    params: {}
- name: upload_file
  endpoint:
    path: /upload
    method: POST
    data_selector: null
    params: {}
- name: protected_generate
  endpoint:
    path: /protected_generate
    method: POST
    data_selector: null
    params: {}
- name: custom_response
  endpoint:
    path: /custom_response
    method: GET
    data_selector: data
    params: {}
- name: conditional_generate
  endpoint:
    path: /conditional_generate
    method: GET
    data_selector: generated_text
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users/{user_id}
    method: GET
    data_selector: records
    params: {}
- name: custom_response
  endpoint:
    path: /custom_response
    method: POST
    data_selector: generated_text
    params: {}
- name: conditional_generate
  endpoint:
    path: /conditional_generate
    method: POST
    data_selector: generated_text
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: generated_text
    params: {}
- name: stream_generate
  endpoint:
    path: /stream_generate
    method: POST
    data_selector: tokens
- name: Image
  endpoint:
    path: /images
    method: POST
    data_selector: image
- name: Image
  endpoint:
    path: /image
    method: POST
- name: Image
  endpoint:
    path: /api/v1/images
    method: POST
    data_selector: data
    params: {}
- name: Image
  endpoint:
    path: /api/v1/images
    method: POST
    data_selector: image
    params: {}
- name: Image
  endpoint:
    path: /images
    method: POST
    data_selector: image_data
- name: Image
  endpoint:
    path: /api/images
    method: POST
    data_selector: image
    params: {}
- name: minimal-app
  endpoint:
    path: /app/main.py
    method: GET
    data_selector: records
- name: requirements-minimal
  endpoint:
    path: /tmp/requirements.txt
    method: GET
    data_selector: records
- name: Image
  endpoint:
    path: /api/image
    method: POST
    data_selector: image
    params: {}
- name: minimal_image
  endpoint:
    path: /create_minimal_image
    method: GET
    data_selector: image
    params: {}
- name: testing_image_builds
  endpoint:
    path: /test_image_builds
    method: GET
    data_selector: image
    params: {}
- name: testing_image_security
  endpoint:
    path: /test_image_security
    method: GET
    data_selector: image
    params: {}
- name: web_server_job
  endpoint:
    path: /jobs/web_server
    method: POST
    data_selector: job_status
    params: {}
- name: multi_port_job
  endpoint:
    path: /jobs/multi_port
    method: POST
    data_selector: job_status
    params: {}
- name: quick_batch_job
  endpoint:
    path: /jobs/quick_batch
    method: POST
    data_selector: job_status
    params: {}
- name: job
  endpoint:
    path: /job
    method: POST
    data_selector: job_details
- name: job
  endpoint:
    path: /chute/job
    method: POST
    data_selector: result
    params: {}
- name: job_status
  endpoint:
    path: /job_status/{job_id}
    method: GET
    data_selector: status
    params: {}
- name: cancel_job
  endpoint:
    path: /cancel_job/{job_id}
    method: DELETE
    data_selector: message
    params: {}
- name: NodeSelector
  endpoint:
    path: /node-selector
    method: GET
    data_selector: records
    params: {}
- name: NodeSelector
  endpoint:
    path: /NodeSelector
    method: POST
    data_selector: node_selector
- name: NodeSelector
  endpoint:
    path: /docs/sdk-reference/node-selector
    method: GET
    data_selector: NodeSelector
    params: {}
- name: Node Selector
  endpoint:
    path: /node-selector
    method: GET
    data_selector: records
- name: NodeSelector
  endpoint:
    path: /chutes/chute
    method: POST
    data_selector: node_selector
- name: NodeSelector
  endpoint:
    path: /node-selector
    method: GET
    data_selector: records
- name: NodeSelector
  endpoint:
    path: /node-selector
    method: GET
    data_selector: records
- name: NodeSelector
  endpoint:
    path: /node_selector
    method: POST
    data_selector: node_selector
- name: NodeSelector
  endpoint:
    path: /api/reference/nodes
    method: GET
    data_selector: records
- name: NodeSelector
  endpoint:
    path: /docs/sdk-reference/node-selector
    method: GET
- name: NodeSelector
  endpoint:
    path: /chutes/node-selector
    method: GET
    data_selector: records
    params: {}
- name: NodeSelector
  endpoint:
    path: /chutes/node_selector
    method: POST
    data_selector: ''
    params: {}
- name: NodeSelector
  endpoint:
    path: /node-selector
    method: GET
    data_selector: node_requirements
    params: {}
- name: NodeSelector
  endpoint:
    path: /api/nodes
    method: GET
    data_selector: nodes
- name: vllm_chute
  endpoint:
    path: /build_vllm_chute
    method: POST
    data_selector: chute
    params: {}
- name: sglang_chute
  endpoint:
    path: /build_sglang_chute
    method: POST
    data_selector: chute
    params: {}
- name: text_embeddings_inference
  endpoint:
    path: /build_tei_chute
    method: POST
- name: diffusion
  endpoint:
    path: /build_diffusion_chute
    method: POST
- name: vllm
  endpoint:
    path: /build_vllm_chute
    method: POST
- name: sglang
  endpoint:
    path: /build_sglang_chute
    method: POST
- name: health_check
  endpoint:
    path: /health_detailed
    method: GET
- name: vllm_template
  endpoint:
    path: /vllm/template
    method: POST
    data_selector: config
    params: {}
- name: tei_template
  endpoint:
    path: /tei/template
    method: POST
    data_selector: config
    params: {}
- name: account
  endpoint:
    path: /account
    method: GET
    data_selector: details
- name: api_keys
  endpoint:
    path: /keys
    method: GET
    data_selector: keys
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: results
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: result
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: records
    params: {}
- name: build
  endpoint:
    path: /chutes/build
    method: POST
    data_selector: buildStatus
- name: deployment
  endpoint:
    path: /deploy
    method: POST
    data_selector: deployment_status
    params: {}
- name: chute_deploy
  endpoint:
    path: /deploy
    method: POST
    data_selector: deployment_status
    params: {}
- name: deploy
  endpoint:
    path: /chutes/deploy
    method: POST
    data_selector: deployments
    params: {}
- name: deploy
  endpoint:
    path: /deploy
    method: POST
    data_selector: deployment
    params: {}
- name: chute
  endpoint:
    path: /deploy
    method: POST
    data_selector: deployment
    params: {}
- name: chute_list
  endpoint:
    path: /chutes/chutes/list
    method: GET
    data_selector: results
    params: {}
- name: chute_get
  endpoint:
    path: /chutes/chutes/get
    method: GET
    data_selector: details
    params: {}
- name: chute_delete
  endpoint:
    path: /chutes/chutes/delete
    method: DELETE
    data_selector: response
    params: {}
- name: chute_logs
  endpoint:
    path: /chutes/logs
    method: GET
    data_selector: logs
    params: {}
- name: chute
  endpoint:
    path: /chutes
    method: GET
- name: logs
  endpoint:
    path: /logs
    method: GET
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: chutes
  endpoint:
    path: /chutes
    method: GET
    data_selector: records
- name: chutes
  endpoint:
    path: /chutes
    method: GET
    data_selector: chutes
    params: {}
- name: chutes
  endpoint:
    path: /chutes
    method: GET
    data_selector: items
    params:
      limit: 25
      page: 0
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: items
    params: {}
- name: keys
  endpoint:
    path: /keys
    method: GET
    data_selector: items
    params: {}
- name: audio_processing
  endpoint:
    path: /api/audio_processing
    method: POST
    data_selector: result
    params: {}
- name: speech_recognition
  endpoint:
    path: /api/speech_recognition
    method: POST
    data_selector: result
    params: {}
- name: text_to_speech
  endpoint:
    path: /api/text_to_speech
    method: POST
    data_selector: result
    params: {}
- name: speech_recognition
  endpoint:
    path: /speech/recognize
    method: POST
    data_selector: results
    params: {}
- name: process_batch
  endpoint:
    path: /process-batch
    method: POST
    data_selector: results
    params:
      texts: texts
      batch_size: batch_size
- name: batch_stats
  endpoint:
    path: /batch-stats
    method: GET
    data_selector: stats
- name: process_batch_stream
  endpoint:
    path: /process-batch-stream
    method: POST
    data_selector: final_results
    params:
      texts: texts
      batch_size: batch_size
- name: process_batch
  endpoint:
    path: /process-batch
    method: POST
    data_selector: results
- name: batch_stats
  endpoint:
    path: /batch-stats
    method: GET
    data_selector: stats
- name: process_batch_stream
  endpoint:
    path: /process-batch-stream
    method: POST
    data_selector: final_results
- name: process_batch
  endpoint:
    path: /process-batch
    method: POST
    data_selector: results
- name: batch_stats
  endpoint:
    path: /batch-stats
    method: GET
    data_selector: stats
- name: process_batch_stream
  endpoint:
    path: /process-batch-stream
    method: POST
    data_selector: final_results
- name: process_batch
  endpoint:
    path: /process-batch
    method: POST
    data_selector: results
- name: batch_stats
  endpoint:
    path: /batch-stats
    method: GET
    data_selector: stats
- name: process_batch
  endpoint:
    path: /process-batch
    method: POST
    data_selector: results
- name: batch_stats
  endpoint:
    path: /batch-stats
    method: GET
    data_selector: stats
- name: process_batch
  endpoint:
    path: /process-batch
    method: POST
    data_selector: results
- name: batch_stats
  endpoint:
    path: /batch-stats
    method: GET
    data_selector: stats
- name: process_batch_stream
  endpoint:
    path: /process-batch-stream
    method: POST
    data_selector: results
- name: process_batch
  endpoint:
    path: /process-batch
    method: POST
    data_selector: results
- name: batch_stats
  endpoint:
    path: /batch-stats
    method: GET
    data_selector: stats
- name: process_batch_stream
  endpoint:
    path: /process-batch-stream
    method: POST
    data_selector: final_results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: status
    params: {}
- name: text_analysis_service
  endpoint:
    path: /services/data/vXX.X/chutes/text-analysis
    method: POST
    data_selector: results
- name: text_analysis
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
- name: analysis_requests_total
  endpoint:
    path: /metrics
    method: GET
    data_selector: analysis_requests_total
- name: analysis_duration_seconds
  endpoint:
    path: /metrics
    method: GET
    data_selector: analysis_duration_seconds
- name: analysis_errors_total
  endpoint:
    path: /metrics
    method: GET
    data_selector: analysis_errors_total
- name: text_analysis
  endpoint:
    path: /run
    method: POST
    data_selector: results
    params:
      analysis_types: all
- name: text_analysis
  endpoint:
    path: /api/v1/analyze
    method: POST
    data_selector: results
    params: {}
- name: text_analysis
  endpoint:
    path: /text-analysis
    method: POST
    data_selector: results
    params: {}
- name: analysis
  endpoint:
    path: /analyze
    method: POST
    data_selector: result
    params: {}
- name: text-analysis
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
- name: health_check
  endpoint:
    path: /health_check
    method: GET
    data_selector: status
    params: {}
- name: text_analysis
  endpoint:
    path: /run
    method: POST
    data_selector: results
    params: {}
- name: health_check
  endpoint:
    path: /health_check
    method: GET
- name: text_analysis
  endpoint:
    path: /services/data/vXX.X/sobjects/TextAnalysis
    method: POST
    data_selector: results
    params:
      incremental: updated_at
- name: text_analysis
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
- name: health_check
  endpoint:
    path: /health_check
    method: GET
    data_selector: status
    params: {}
- name: analyze_text
  endpoint:
    path: /analyze_text
    method: POST
    data_selector: analysis_result
    params: {}
- name: text_analysis
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
    params:
      incremental: text_id
- name: text_analysis
  endpoint:
    path: /analyze
    method: POST
    data_selector: result
    params: {}
- name: analysis_requests
  endpoint:
    path: /metrics/analysis_requests_total
    method: GET
    data_selector: total_requests
    params: {}
- name: analysis_duration
  endpoint:
    path: /metrics/analysis_duration_seconds
    method: GET
    data_selector: duration_histograms
    params: {}
- name: analysis_errors
  endpoint:
    path: /metrics/analysis_errors_total
    method: GET
    data_selector: error_counts
    params: {}
- name: text_analysis
  endpoint:
    path: /text-analysis
    method: POST
    data_selector: results
    params: {}
- name: health_check
  endpoint:
    path: /health_check
    method: GET
    data_selector: status
- name: text_analysis
  endpoint:
    path: /api/v1/text-analysis
    method: POST
    data_selector: results
    params: {}
- name: analysis_requests_total
  endpoint:
    path: /metrics
    method: GET
    data_selector: analysis_requests_total
- name: analysis_duration_seconds
  endpoint:
    path: /metrics
    method: GET
    data_selector: analysis_duration_seconds
- name: analysis_errors_total
  endpoint:
    path: /metrics
    method: GET
    data_selector: analysis_errors_total
- name: custom-nlp
  endpoint:
    path: /custom-nlp
    method: POST
- name: gpu-ml
  endpoint:
    path: /gpu-ml
    method: POST
- name: optimized-app
  endpoint:
    path: /optimized-app
    method: POST
- name: llm-server
  endpoint:
    path: /llm-server
    method: POST
- name: full-stack-ai
  endpoint:
    path: /full-stack-ai
    method: POST
- name: cv-pipeline
  endpoint:
    path: /cv-pipeline
    method: POST
- name: audio-ml
  endpoint:
    path: /audio-ml
    method: POST
- name: scientific-gpu
  endpoint:
    path: /scientific-gpu
    method: POST
- name: cached-build
  endpoint:
    path: /cached-build
    method: POST
- name: minimal-prod
  endpoint:
    path: /minimal-prod
    method: POST
- name: secure-app
  endpoint:
    path: /secure-app
    method: POST
- name: secure-env
  endpoint:
    path: /secure-env
    method: POST
- name: custom-nlp
  endpoint:
    path: /services/data/vXX.X/sobjects/CustomNLP
    method: GET
    data_selector: records
    params: {}
- name: gpu-ml
  endpoint:
    path: /services/data/vXX.X/sobjects/GPU_ML
    method: GET
    data_selector: records
    params: {}
- name: full-stack-ai
  endpoint:
    path: /api/v1/full-stack-ai
    method: POST
    data_selector: image
    params: {}
- name: image
  endpoint:
    path: /chutes/image
    method: POST
    data_selector: records
- name: custom_image
  endpoint:
    path: /custom/image
    method: POST
    data_selector: image_data
- name: deploy_chute
  endpoint:
    path: /deploy/chute
    method: POST
    data_selector: deployment_info
- name: training_chute
  endpoint:
    path: /create_training_chute
    method: POST
    data_selector: training_chute
    params: {}
- name: training_chute
  endpoint:
    path: /chutes/training
    method: POST
    data_selector: result
    params: {}
- name: inference_chute
  endpoint:
    path: /chutes/inference
    method: POST
    data_selector: result
    params: {}
- name: embedding
  endpoint:
    path: /embed
    method: POST
    data_selector: outputs
- name: text-embeddings-service
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
- name: similarity
  endpoint:
    path: /similarity
    method: POST
    data_selector: similarity
- name: rerank
  endpoint:
    path: /rerank
    method: POST
    data_selector: scored_texts
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
- name: similarity
  endpoint:
    path: /similarity
    method: POST
    data_selector: similarity
- name: rerank
  endpoint:
    path: /rerank
    method: POST
    data_selector: results
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: store_add
  endpoint:
    path: /store/add
    method: POST
- name: store_search
  endpoint:
    path: /store/search
    method: POST
- name: store_collections
  endpoint:
    path: /store/collections
    method: GET
- name: search_store
  endpoint:
    path: /store/search
    method: POST
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
    params: {}
- name: similarity
  endpoint:
    path: /similarity
    method: POST
    data_selector: similarities
    params: {}
- name: rerank
  endpoint:
    path: /rerank
    method: POST
    data_selector: scored_texts
    params: {}
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
    params: {}
- name: store_add
  endpoint:
    path: /store/add
    method: POST
    data_selector: added_count
    params: {}
- name: store_search
  endpoint:
    path: /store/search
    method: POST
    data_selector: results
    params: {}
- name: store_collections
  endpoint:
    path: /store/collections
    method: GET
    data_selector: collections
    params: {}
- name: embed
  endpoint:
    path: /embed
    method: POST
- name: similarity
  endpoint:
    path: /similarity
    method: POST
- name: rerank
  endpoint:
    path: /rerank
    method: POST
- name: search
  endpoint:
    path: /search
    method: POST
- name: store_add
  endpoint:
    path: /store/add
    method: POST
- name: store_search
  endpoint:
    path: /store/search
    method: POST
- name: store_collections
  endpoint:
    path: /store/collections
    method: GET
- name: batch_embeddings
  endpoint:
    path: /embed/batch
    method: POST
- name: cluster_texts
  endpoint:
    path: /cluster
    method: POST
    data_selector: clusters
    params: {}
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
- name: similarity
  endpoint:
    path: /similarity
    method: POST
    data_selector: similarity
- name: rerank
  endpoint:
    path: /rerank
    method: POST
    data_selector: results
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: store_add
  endpoint:
    path: /store/add
    method: POST
    data_selector: added_count
- name: store_search
  endpoint:
    path: /store/search
    method: POST
    data_selector: results
- name: list_collections
  endpoint:
    path: /store/collections
    method: GET
    data_selector: collections
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
- name: similarity
  endpoint:
    path: /similarity
    method: POST
    data_selector: results
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: rerank
  endpoint:
    path: /rerank
    method: POST
    data_selector: results
- name: add_to_store
  endpoint:
    path: /store/add
    method: POST
    data_selector: result
- name: search_store
  endpoint:
    path: /store/search
    method: POST
    data_selector: results
- name: cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: clusters
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
- name: similarity
  endpoint:
    path: /similarity
    method: POST
    data_selector: similarities
- name: rerank
  endpoint:
    path: /rerank
    method: POST
    data_selector: scored_texts
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: store_add
  endpoint:
    path: /store/add
    method: POST
    data_selector: added_count
- name: store_search
  endpoint:
    path: /store/search
    method: POST
    data_selector: results
- name: store_collections
  endpoint:
    path: /store/collections
    method: GET
    data_selector: collections
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
- name: similarity
  endpoint:
    path: /similarity
    method: POST
    data_selector: results
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: store_add
  endpoint:
    path: /store/add
    method: POST
    data_selector: ''
- name: store_search
  endpoint:
    path: /store/search
    method: POST
    data_selector: results
- name: cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: clusters
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
- name: similarity
  endpoint:
    path: /similarity
    method: POST
    data_selector: similarity
- name: rerank
  endpoint:
    path: /rerank
    method: POST
    data_selector: results
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: store_add
  endpoint:
    path: /store/add
    method: POST
    data_selector: added_count
- name: store_search
  endpoint:
    path: /store/search
    method: POST
    data_selector: results
- name: store_collections
  endpoint:
    path: /store/collections
    method: GET
    data_selector: collections
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
- name: similarity
  endpoint:
    path: /similarity
    method: POST
    data_selector: results
- name: cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: clusters
- name: store_add
  endpoint:
    path: /store/add
    method: POST
- name: store_search
  endpoint:
    path: /store/search
    method: POST
    data_selector: results
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
    params: {}
- name: similarity
  endpoint:
    path: /similarity
    method: POST
    data_selector: results
    params: {}
- name: rerank
  endpoint:
    path: /rerank
    method: POST
    data_selector: results
    params: {}
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
    params: {}
- name: store_add
  endpoint:
    path: /store/add
    method: POST
    data_selector: added_count
    params: {}
- name: store_search
  endpoint:
    path: /store/search
    method: POST
    data_selector: results
    params: {}
- name: list_collections
  endpoint:
    path: /store/collections
    method: GET
    data_selector: collections
    params: {}
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
- name: similarity
  endpoint:
    path: /similarity
    method: POST
    data_selector: results
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: store_add
  endpoint:
    path: /store/add
    method: POST
    data_selector: ''
- name: store_search
  endpoint:
    path: /store/search
    method: POST
    data_selector: results
- name: cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: clusters
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
- name: similarity
  endpoint:
    path: /similarity
    method: POST
    data_selector: similarity
- name: rerank
  endpoint:
    path: /rerank
    method: POST
    data_selector: results
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: store
  endpoint:
    path: /store/add
    method: POST
    data_selector: added_count
- name: store_search
  endpoint:
    path: /store/search
    method: POST
    data_selector: results
- name: store_collections
  endpoint:
    path: /store/collections
    method: GET
    data_selector: collections
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
- name: similarity
  endpoint:
    path: /similarity
    method: POST
    data_selector: results
- name: cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: clusters
- name: search_store
  endpoint:
    path: /store/search
    method: POST
    data_selector: results
- name: add_to_store
  endpoint:
    path: /store/add
    method: POST
    data_selector: null
- name: FLUX.1-dev-generator
  endpoint:
    path: /chutes/FLUX.1-dev-generator
    method: POST
    data_selector: result
    params: {}
- name: stable-diffusion-xl
  endpoint:
    path: /chutes/stable-diffusion-xl
    method: POST
    data_selector: images
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: image/jpeg
- name: sdxl
  endpoint:
    path: /sdxl
    method: POST
    data_selector: image/png
- name: batch
  endpoint:
    path: /batch
    method: POST
    data_selector: list of images
- name: generate_image
  endpoint:
    path: /generate
    method: POST
    data_selector: result.images
    params: {}
- name: generate_batch
  endpoint:
    path: /batch
    method: POST
    data_selector: results
    params: {}
- name: image_to_image
  endpoint:
    path: /img2img
    method: POST
    data_selector: result.images
    params: {}
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
    data_selector: result.images
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: image/jpeg
- name: batch
  endpoint:
    path: /batch
    method: POST
- name: img2img
  endpoint:
    path: /img2img
    method: POST
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: images
    params: {}
- name: sdxl
  endpoint:
    path: /sdxl
    method: POST
    data_selector: images
    params: {}
- name: batch
  endpoint:
    path: /batch
    method: POST
    data_selector: images
    params: {}
- name: img2img
  endpoint:
    path: /img2img
    method: POST
    data_selector: images
    params: {}
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
    data_selector: images
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: images
    params: {}
- name: batch
  endpoint:
    path: /batch
    method: POST
    data_selector: images
    params: {}
- name: img2img
  endpoint:
    path: /img2img
    method: POST
    data_selector: image
    params: {}
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
    data_selector: image
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: result
    params: {}
- name: sdxl
  endpoint:
    path: /sdxl
    method: POST
    data_selector: images
    params: {}
- name: batch
  endpoint:
    path: /batch
    method: POST
    data_selector: results
    params: {}
- name: img2img
  endpoint:
    path: /img2img
    method: POST
    data_selector: result
    params: {}
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
    data_selector: result
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: images
    params: {}
- name: sdxl
  endpoint:
    path: /sdxl
    method: POST
    data_selector: images
    params: {}
- name: batch
  endpoint:
    path: /batch
    method: POST
    data_selector: images
    params: {}
- name: img2img
  endpoint:
    path: /img2img
    method: POST
    data_selector: images
    params: {}
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
    data_selector: images
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: image/jpeg
- name: sdxl
  endpoint:
    path: /sdxl
    method: POST
- name: batch
  endpoint:
    path: /batch
    method: POST
- name: img2img
  endpoint:
    path: /img2img
    method: POST
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
- name: DeepSeek R1
  endpoint:
    path: /build_sglang_chute
    method: POST
    data_selector: chute
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: multi_model_analysis
  endpoint:
    path: /api/multi-model-analysis
    method: POST
    data_selector: results
- name: music_generation
  endpoint:
    path: /music/generate
    method: POST
    data_selector: generated_music
- name: input_args
  endpoint:
    path: /input-args
    method: POST
    data_selector: records
    params: {}
- name: audio_processing
  endpoint:
    path: /audio-processing
    method: POST
    data_selector: records
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: Response
    params: {}
- name: style_generate
  endpoint:
    path: /style_generate
    method: POST
    data_selector: Response
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: audio/mp3
    params: {}
- name: style_generate
  endpoint:
    path: /style_generate
    method: POST
    data_selector: audio/mp3
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: response
    params: {}
- name: style_generate
  endpoint:
    path: /style_generate
    method: POST
    data_selector: response
    params: {}
- name: lyrics_to_music
  endpoint:
    path: /lyrics_to_music
    method: POST
    data_selector: response
    params: {}
- name: style_transfer
  endpoint:
    path: /style_transfer
    method: POST
    data_selector: response
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: audio/mp3
- name: style_generate
  endpoint:
    path: /style_generate
    method: POST
    data_selector: audio/mp3
- name: lyrics_to_music
  endpoint:
    path: /lyrics_to_music
    method: POST
    data_selector: audio/mp3
- name: style_transfer
  endpoint:
    path: /style_transfer
    method: POST
    data_selector: audio/mp3
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: output_content_type
    params: {}
- name: lyrics_to_music
  endpoint:
    path: /lyrics_to_music
    method: POST
    data_selector: output_content_type
    params: {}
- name: style_transfer
  endpoint:
    path: /style_transfer
    method: POST
    data_selector: output_content_type
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: null
    params: {}
- name: lyrics_to_music
  endpoint:
    path: /lyrics_to_music
    method: POST
    data_selector: null
    params: {}
- name: style_transfer
  endpoint:
    path: /style_transfer
    method: POST
    data_selector: null
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: audio/mp3
- name: lyrics_to_music
  endpoint:
    path: /lyrics_to_music
    method: POST
    data_selector: audio/mp3
- name: style_transfer
  endpoint:
    path: /style_transfer
    method: POST
    data_selector: audio/mp3
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: output_content_type
    params: {}
- name: lyrics_to_music
  endpoint:
    path: /lyrics_to_music
    method: POST
    data_selector: output_content_type
    params: {}
- name: style_transfer
  endpoint:
    path: /style_transfer
    method: POST
    data_selector: output_content_type
    params: {}
- name: style_generate
  endpoint:
    path: /style_generate
    method: POST
    data_selector: output_content_type
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: null
    params: {}
- name: lyrics_to_music
  endpoint:
    path: /lyrics_to_music
    method: POST
    data_selector: null
    params: {}
- name: style_transfer
  endpoint:
    path: /style_transfer
    method: POST
    data_selector: null
    params: {}
- name: style_generate
  endpoint:
    path: /style_generate
    method: POST
    data_selector: null
    params: {}
- name: performance_monitoring
  endpoint:
    path: /generate_timed
    method: POST
    data_selector: result
- name: embedding_service
  endpoint:
    path: /embed
    method: POST
    data_selector: response
    params: {}
- name: semantic_search
  endpoint:
    path: /embed
    method: POST
    data_selector: results
    params: {}
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: add_document
  endpoint:
    path: /documents
    method: POST
    data_selector: status
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: status
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: documents
  endpoint:
    path: /documents
    method: POST
    data_selector: status
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: status
- name: analyze_sentiment
  endpoint:
    path: /analyze
    method: POST
    data_selector: ''
    params: {}
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: ''
    params: {}
- name: process_stream
  endpoint:
    path: /process-stream
    method: POST
    data_selector: JSON
    params: {}
- name: generate_stream
  endpoint:
    path: /generate-stream
    method: POST
    data_selector: text/plain
    params: {}
- name: process_batch
  endpoint:
    path: /process-batch
    method: POST
    data_selector: JSON
    params: {}
- name: process_stream
  endpoint:
    path: /process-stream
    method: POST
    data_selector: chunk
    params: {}
- name: generate_stream
  endpoint:
    path: /generate-stream
    method: POST
    data_selector: generated_text
    params: {}
- name: process_batch
  endpoint:
    path: /process-batch
    method: POST
    data_selector: results
    params: {}
- name: process_stream
  endpoint:
    path: /process-stream
    method: POST
    data_selector: streaming results
- name: generate_stream
  endpoint:
    path: /generate-stream
    method: POST
    data_selector: text generation
- name: process_batch
  endpoint:
    path: /process-batch
    method: POST
    data_selector: batch processing
- name: process_stream
  endpoint:
    path: /process-stream
    method: POST
    data_selector: status
- name: generate_stream
  endpoint:
    path: /generate-stream
    method: POST
    data_selector: status
- name: process_batch
  endpoint:
    path: /process-batch
    method: POST
    data_selector: results
- name: process_stream
  endpoint:
    path: /process-stream
    method: POST
    data_selector: ''
    params: {}
- name: generate_stream
  endpoint:
    path: /generate-stream
    method: POST
    data_selector: ''
    params: {}
- name: process_batch
  endpoint:
    path: /process-batch
    method: POST
    data_selector: ''
    params: {}
- name: process_stream
  endpoint:
    path: /process-stream
    method: POST
    data_selector: status
    params: {}
- name: generate_stream
  endpoint:
    path: /generate-stream
    method: POST
    data_selector: status
    params: {}
- name: process_batch
  endpoint:
    path: /process-batch
    method: POST
    data_selector: processing_time
    params: {}
- name: process_stream
  endpoint:
    path: /process-stream
    method: POST
    data_selector: status
    params: {}
- name: generate_stream
  endpoint:
    path: /generate-stream
    method: POST
    data_selector: status
    params: {}
- name: process_batch
  endpoint:
    path: /process-batch
    method: POST
    data_selector: status
    params: {}
- name: input_args
  endpoint:
    path: /input_args
    method: POST
    data_selector: records
    params:
      max_duration_ms: 10000
- name: speak
  endpoint:
    path: /speak
    method: POST
- name: conversation
  endpoint:
    path: /conversation
    method: POST
- name: text_to_speech
  endpoint:
    path: /speak
    method: POST
    data_selector: audio/wav
- name: conversation
  endpoint:
    path: /conversation
    method: POST
    data_selector: audio/wav
- name: voice_cloning
  endpoint:
    path: /clone_voice
    method: POST
    data_selector: audio/wav
- name: speak
  endpoint:
    path: /speak
    method: POST
    data_selector: audio/wav
- name: conversation
  endpoint:
    path: /conversation
    method: POST
    data_selector: audio/wav
- name: clone_voice
  endpoint:
    path: /clone_voice
    method: POST
    data_selector: audio/wav
- name: batch_speak
  endpoint:
    path: /batch_speak
    method: POST
    data_selector: audio/wav
- name: speak
  endpoint:
    path: /speak
    method: POST
    data_selector: audio/wav
- name: clone_voice
  endpoint:
    path: /clone_voice
    method: POST
    data_selector: audio/wav
- name: conversation
  endpoint:
    path: /conversation
    method: POST
    data_selector: audio/wav
- name: batch_speak
  endpoint:
    path: /batch_speak
    method: POST
    data_selector: audio/wav
- name: speak
  endpoint:
    path: /speak
    method: POST
    data_selector: audio
    params: {}
- name: clone_voice
  endpoint:
    path: /clone_voice
    method: POST
    data_selector: audio
    params: {}
- name: conversation
  endpoint:
    path: /conversation
    method: POST
    data_selector: audio
    params: {}
- name: batch_speak
  endpoint:
    path: /batch_speak
    method: POST
    data_selector: audio
    params: {}
- name: contextual_speak
  endpoint:
    path: /contextual_speak
    method: POST
    data_selector: audio
    params: {}
- name: speak
  endpoint:
    path: /speak
    method: POST
    data_selector: audio
    params: {}
- name: clone_voice
  endpoint:
    path: /clone_voice
    method: POST
    data_selector: audio
    params: {}
- name: conversation
  endpoint:
    path: /conversation
    method: POST
    data_selector: audio
    params: {}
- name: batch_speak
  endpoint:
    path: /batch_speak
    method: POST
    data_selector: audio
    params: {}
- name: contextual_speak
  endpoint:
    path: /contextual_speak
    method: POST
- name: quality_controlled_speak
  endpoint:
    path: /quality_speak
    method: POST
- name: speak
  endpoint:
    path: /speak
    method: POST
    data_selector: audio/wav
- name: clone_voice
  endpoint:
    path: /clone_voice
    method: POST
    data_selector: audio/wav
- name: conversation
  endpoint:
    path: /conversation
    method: POST
    data_selector: audio/wav
- name: batch_speak
  endpoint:
    path: /batch_speak
    method: POST
    data_selector: audio/wav
- name: contextual_speak
  endpoint:
    path: /contextual_speak
    method: POST
- name: quality_controlled_speak
  endpoint:
    path: /quality_speak
    method: POST
- name: optimized_speak
  endpoint:
    path: /optimized_speak
    method: POST
- name: speak
  endpoint:
    path: /speak
    method: POST
    data_selector: audio/wav
- name: clone_voice
  endpoint:
    path: /clone_voice
    method: POST
    data_selector: audio/wav
- name: conversation
  endpoint:
    path: /conversation
    method: POST
    data_selector: audio/wav
- name: batch_speak
  endpoint:
    path: /batch_speak
    method: POST
    data_selector: base64
- name: contextual_speak
  endpoint:
    path: /contextual_speak
    method: POST
- name: quality_controlled_speak
  endpoint:
    path: /quality_speak
    method: POST
- name: optimized_speak
  endpoint:
    path: /optimized_speak
    method: POST
- name: cached_speak
  endpoint:
    path: /cached_speak
    method: POST
- name: robust_speak
  endpoint:
    path: /robust_speak
    method: POST
- name: video_generation
  endpoint:
    path: /video/generate
    method: POST
    data_selector: results
    params:
      incremental: timestamp
- name: text_to_video
  endpoint:
    path: /text2video
    method: POST
    data_selector: video
    params: {}
- name: text_to_image
  endpoint:
    path: /text2image
    method: POST
- name: image_to_video
  endpoint:
    path: /image2video
    method: POST
- name: batch_video_generation
  endpoint:
    path: /batch_video
    method: POST
- name: text_to_video
  endpoint:
    path: /text2video
    method: POST
    data_selector: video
    params: {}
- name: text_to_image
  endpoint:
    path: /text2image
    method: POST
- name: image_to_video
  endpoint:
    path: /image2video
    method: POST
- name: batch_video_generation
  endpoint:
    path: /batch_video
    method: POST
- name: video_generation
  endpoint:
    path: /text2video
    method: POST
    data_selector: video
    params: {}
- name: text_to_image
  endpoint:
    path: /text2image
    method: POST
- name: image_to_video
  endpoint:
    path: /image2video
    method: POST
- name: batch_video_generation
  endpoint:
    path: /batch_video
    method: POST
- name: styled_video_generation
  endpoint:
    path: /styled_video
    method: POST
- name: video_interpolation
  endpoint:
    path: /interpolate_video
    method: POST
    data_selector: body
    params: {}
- name: video_generation
  endpoint:
    path: /text2video
    method: POST
    data_selector: video
    params: {}
- name: text_to_image
  endpoint:
    path: /text2image
    method: POST
- name: image_to_video
  endpoint:
    path: /image2video
    method: POST
- name: batch_video_generation
  endpoint:
    path: /batch_video
    method: POST
- name: styled_video_generation
  endpoint:
    path: /styled_video
    method: POST
- name: video_interpolation
  endpoint:
    path: /interpolate_video
    method: POST
- name: text_to_video
  endpoint:
    path: /text2video
    method: POST
    data_selector: response.content
- name: image_to_video
  endpoint:
    path: /image2video
    method: POST
    data_selector: response.content
- name: text_to_image
  endpoint:
    path: /text2image
    method: POST
    data_selector: response.content
- name: styled_video
  endpoint:
    path: /styled_video
    method: POST
    data_selector: response.content
- name: text_to_video
  endpoint:
    path: /text2video
    method: POST
    data_selector: video
    params: {}
- name: text_to_video
  endpoint:
    path: /text2video
    method: POST
    data_selector: null
    params: {}
- name: image_to_video
  endpoint:
    path: /image2video
    method: POST
    data_selector: null
    params: {}
- name: batch_video_generation
  endpoint:
    path: /batch_video
    method: POST
    data_selector: null
    params: {}
- name: styled_video
  endpoint:
    path: /styled_video
    method: POST
    data_selector: null
    params: {}
- name: video_interpolation
  endpoint:
    path: /interpolate_video
    method: POST
    data_selector: null
    params: {}
- name: optimized_video
  endpoint:
    path: /optimized_video
    method: POST
    data_selector: null
    params: {}
- name: video_generation
  endpoint:
    path: /preset_video
    method: POST
    data_selector: Response
    params: {}
- name: text_to_video
  endpoint:
    path: /text2video
    method: POST
    data_selector: output
    params: {}
- name: text_to_video
  endpoint:
    path: /text2video
    method: POST
    data_selector: response
    params: {}
- name: image_to_video
  endpoint:
    path: /image2video
    method: POST
    data_selector: response
    params: {}
- name: batch_video
  endpoint:
    path: /batch_video
    method: POST
    data_selector: response
    params: {}
- name: styled_video
  endpoint:
    path: /styled_video
    method: POST
    data_selector: response
    params: {}
- name: interpolate_video
  endpoint:
    path: /interpolate_video
    method: POST
    data_selector: response
    params: {}
- name: optimized_video
  endpoint:
    path: /optimized_video
    method: POST
    data_selector: response
    params: {}
- name: preset_video
  endpoint:
    path: /preset_video
    method: POST
    data_selector: response
    params: {}
- name: text_to_video
  endpoint:
    path: /text2video
    method: POST
    data_selector: output
    params: {}
- name: text_to_video
  endpoint:
    path: /text2video
    method: POST
    data_selector: response.content
- name: image_to_video
  endpoint:
    path: /image2video
    method: POST
    data_selector: response.content
- name: batch_video_generation
  endpoint:
    path: /batch_video
    method: POST
    data_selector: response
- name: styled_video
  endpoint:
    path: /styled_video
    method: POST
    data_selector: response.content
- name: video_interpolation
  endpoint:
    path: /interpolate_video
    method: POST
    data_selector: response.content
- name: preset_video_generation
  endpoint:
    path: /preset_video
    method: POST
    data_selector: response.content
- name: monitored_video
  endpoint:
    path: /monitored_video
    method: POST
- name: text_generation
  endpoint:
    path: /generate_cached
    method: POST
    data_selector: result
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics_summary
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: protected_generate
  endpoint:
    path: /protected_generate
    method: POST
- name: generate_cached
  endpoint:
    path: /generate_cached
    method: POST
- name: chute
  endpoint:
    path: /services/api/chutes
    method: GET
    data_selector: records
- name: inference_chute
  endpoint:
    path: /chutes/inference
    method: POST
    data_selector: result
    params:
      username: myuser
      name: cost-optimized-inference
      image: your_image
      entry_file: app.py
      entry_point: run
      timeout_seconds: 300
      concurrency: 8
- name: batch_chute
  endpoint:
    path: /chutes/batch
    method: POST
    data_selector: result
    params:
      username: myuser
      name: batch-processing
      image: your_image
      entry_file: batch_app.py
      entry_point: run
      timeout_seconds: 1800
      concurrency: 4
- name: spot_chute
  endpoint:
    path: /chutes/spot
    method: POST
    data_selector: result
    params:
      username: myuser
      name: spot-training
      image: training_image
      entry_file: training.py
      entry_point: run
      timeout_seconds: 7200
      concurrency: 1
- name: chute
  endpoint:
    path: /api/chutes
    method: POST
    data_selector: data
    params: {}
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: message
- name: analyze
  endpoint:
    path: /analyze
    method: POST
    data_selector: result
- name: process
  endpoint:
    path: /process
    method: POST
    data_selector: result
- name: process_cached
  endpoint:
    path: /process_cached
    method: POST
    data_selector: result
- name: stats
  endpoint:
    path: /stats
    method: GET
    data_selector: statistics
- name: chute
  endpoint:
    path: /chutes
    method: GET
    data_selector: records
- name: job
  endpoint:
    path: /jobs
    method: POST
    data_selector: record
- name: submit_job
  endpoint:
    path: /jobs
    method: POST
- name: get_job_status
  endpoint:
    path: /jobs/{job_id}
    method: GET
- name: list_jobs
  endpoint:
    path: /jobs
    method: GET
- name: robust_endpoint
  endpoint:
    path: /robust
    method: POST
- name: submit_job
  endpoint:
    path: /jobs
    method: POST
- name: get_job_status
  endpoint:
    path: /jobs/{job_id}
    method: GET
- name: list_jobs
  endpoint:
    path: /jobs
    method: GET
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: message
    params: {}
- name: analyze
  endpoint:
    path: /analyze
    method: POST
    data_selector: result
    params: {}
- name: process
  endpoint:
    path: /process
    method: POST
    data_selector: result
    params: {}
- name: process_cached
  endpoint:
    path: /process_cached
    method: POST
    data_selector: result
    params: {}
- name: stats
  endpoint:
    path: /stats
    method: GET
    data_selector: statistics
    params: {}
- name: submit_job
  endpoint:
    path: /jobs
    method: POST
    data_selector: job
    params: {}
- name: get_job_status
  endpoint:
    path: /jobs/{job_id}
    method: GET
    data_selector: job
    params: {}
- name: list_jobs
  endpoint:
    path: /jobs
    method: GET
    data_selector: jobs
    params:
      limit: 50
- name: chute
  endpoint:
    path: /api/chutes
    method: GET
    data_selector: data
    params: {}
- name: submit_job
  endpoint:
    path: /jobs
    method: POST
    data_selector: job_id
    params: {}
- name: get_job_status
  endpoint:
    path: /jobs/{job_id}
    method: GET
    data_selector: status
    params: {}
- name: list_jobs
  endpoint:
    path: /jobs
    method: GET
    data_selector: jobs
    params:
      limit: 50
- name: image
  endpoint:
    path: /api/images
    method: POST
    data_selector: image_data
    params: {}
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: security_score
    params: {}
- name: image
  endpoint:
    path: /build_image
    method: POST
    data_selector: image
    params: {}
- name: custom_image
  endpoint:
    path: /api/custom_image
    method: POST
    data_selector: image
    params: {}
- name: docker_build
  endpoint:
    path: /api/docker_build
    method: POST
    data_selector: build
    params: {}
- name: development
  endpoint:
    path: /services/data/vXX.X/sobjects/Development
    method: GET
    data_selector: records
    params: {}
- name: staging
  endpoint:
    path: /services/data/vXX.X/sobjects/Staging
    method: GET
    data_selector: records
    params: {}
- name: production
  endpoint:
    path: /services/data/vXX.X/sobjects/Production
    method: GET
    data_selector: records
    params: {}
- name: text_classification
  endpoint:
    path: /text/classification
    method: POST
    data_selector: template
    params:
      required_params:
      - model_name
      - num_labels
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: checks
- name: detailed_status
  endpoint:
    path: /status
    method: GET
    data_selector: health
- name: model
  endpoint:
    path: /services/data/vXX.X/models
    method: GET
    data_selector: records
    params: {}
- name: text-analyzer
  endpoint:
    path: /analyze
    method: POST
    data_selector: result
    params: {}
- name: analyze_text
  endpoint:
    path: /analyze
    method: POST
    data_selector: result
- name: analyze_text
  endpoint:
    path: /analyze
    method: POST
    data_selector: result
    params: {}
- name: process_universal
  endpoint:
    path: /process
    method: POST
    data_selector: result
    params: {}
- name: UserFriendlySchema
  endpoint:
    path: /register
    method: POST
    data_selector: errors
    params: {}
- name: text-analyzer
  endpoint:
    path: /analyze
    method: POST
    data_selector: result
    params: {}
- name: universal-processing
  endpoint:
    path: /process
    method: POST
    data_selector: results
    params: {}
- name: analyze_text
  endpoint:
    path: /analyze
    method: POST
    data_selector: result
    params: {}
- name: process_universal
  endpoint:
    path: /process
    method: POST
    data_selector: result
    params: {}
- name: stream_text
  endpoint:
    path: /stream_text
    method: POST
- name: generate_stream
  endpoint:
    path: /generate_stream
    method: POST
- name: websocket_endpoint
  endpoint:
    path: /ws
    method: WEBSOCKET
- name: generate_streaming_text
  endpoint:
    path: /generate_stream
    method: POST
    data_selector: data
    params: {}
- name: generate_streaming_image
  endpoint:
    path: /generate_image_stream
    method: POST
    data_selector: data
    params: {}
- name: process_data_stream
  endpoint:
    path: /process_stream
    method: POST
    data_selector: data
    params: {}
- name: pipeline_stream
  endpoint:
    path: /pipeline_stream
    method: POST
    data_selector: data
    params: {}
- name: chat
  endpoint:
    path: /chat
    method: GET
- name: stream_text_generation
  endpoint:
    path: /stream_text
    method: POST
- name: generate_streaming_text
  endpoint:
    path: /generate_stream
    method: POST
- name: generate_streaming_image
  endpoint:
    path: /generate_image_stream
    method: POST
- name: process_data_stream
  endpoint:
    path: /process_stream
    method: POST
- name: stream_pipeline_processing
  endpoint:
    path: /pipeline_stream
    method: POST
- name: chat_websocket
  endpoint:
    path: /chat
    method: WEBSOCKET
- name: collaborative_editing
  endpoint:
    path: /collaborate/{doc_id}
    method: GET
    data_selector: ''
    params: {}
- name: buffered_streaming_endpoint
  endpoint:
    path: /buffered_stream
    method: GET
    data_selector: ''
    params: {}
- name: stream_text_generation
  endpoint:
    path: /stream_text
    method: POST
- name: generate_streaming_text
  endpoint:
    path: /generate_stream
    method: POST
- name: generate_streaming_image
  endpoint:
    path: /generate_image_stream
    method: POST
- name: process_data_stream
  endpoint:
    path: /process_stream
    method: POST
- name: stream_pipeline_processing
  endpoint:
    path: /pipeline_stream
    method: POST
- name: chat_websocket
  endpoint:
    path: /chat
    method: WEBSOCKET
- name: streaming_buffer
  endpoint:
    path: /buffered_stream
    method: GET
    data_selector: data
- name: stream_text_generation
  endpoint:
    path: /stream_text
    method: POST
- name: generate_streaming_text
  endpoint:
    path: /generate_stream
    method: POST
- name: generate_streaming_image
  endpoint:
    path: /generate_image_stream
    method: POST
- name: process_data_stream
  endpoint:
    path: /process_stream
    method: POST
- name: stream_pipeline_processing
  endpoint:
    path: /pipeline_stream
    method: POST
- name: chat_websocket
  endpoint:
    path: /chat
    method: GET
- name: generate_stream
  endpoint:
    path: /generate_stream
    method: POST
    data_selector: data
    params: {}
- name: chat
  endpoint:
    path: /chat
    method: GET
    data_selector: messages
    params: {}
- name: buffered_stream
  endpoint:
    path: /buffered_stream
    method: GET
    data_selector: data
    params: {}
- name: safe_stream
  endpoint:
    path: /safe_stream
    method: POST
    data_selector: data
    params: {}
- name: streaming_metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: vllm_template
  endpoint:
    path: /api/vllm
    method: POST
    data_selector: response
    params: {}
- name: sglang_template
  endpoint:
    path: /api/sglang
    method: POST
    data_selector: response
    params: {}
- name: tei_template
  endpoint:
    path: /api/tei
    method: POST
    data_selector: response
    params: {}
- name: diffusion_template
  endpoint:
    path: /api/diffusion
    method: POST
    data_selector: response
    params: {}
- name: sglang_template
  endpoint:
    path: /chutes/chute/template/sglang
    method: POST
- name: vllm_template
  endpoint:
    path: /chutes/chute/template/vllm
    method: POST
- name: tei_template
  endpoint:
    path: /chutes/chute/template/tei
    method: POST
- name: diffusion_template
  endpoint:
    path: /chutes/chute/template/diffusion
    method: POST
- name: chat-service
  endpoint:
    path: /api/chat
    method: POST
    data_selector: response
    params: {}
- name: embedding-service
  endpoint:
    path: /api/embedding
    method: POST
    data_selector: embedding
    params: {}
- name: image-generator
  endpoint:
    path: /api/image
    method: POST
    data_selector: image_response
    params: {}
- name: vllm_template
  endpoint:
    path: /services/data/vXX.X/sobjects/VLLMTemplate
    method: GET
    data_selector: records
- name: sglang_template
  endpoint:
    path: /services/data/vXX.X/sobjects/SGLangTemplate
    method: GET
    data_selector: records
- name: tei_template
  endpoint:
    path: /services/data/vXX.X/sobjects/TEITemplate
    method: GET
    data_selector: records
- name: diffusion_template
  endpoint:
    path: /services/data/vXX.X/sobjects/DiffusionTemplate
    method: GET
    data_selector: records
- name: vllm
  endpoint:
    path: /v1/models
    method: GET
    data_selector: {}
    params: {}
- name: sglang
  endpoint:
    path: /health
    method: GET
    data_selector: {}
    params: {}
- name: tei
  endpoint:
    path: /health
    method: GET
    data_selector: {}
    params: {}
- name: diffusion
  endpoint:
    path: /health
    method: GET
    data_selector: {}
    params: {}
- name: vllm
  endpoint:
    path: /v1/models
    method: GET
    data_selector: null
    params: {}
- name: sglang
  endpoint:
    path: /health
    method: GET
    data_selector: null
    params: {}
- name: tei
  endpoint:
    path: /health
    method: GET
    data_selector: null
    params: {}
- name: diffusion
  endpoint:
    path: /health
    method: GET
    data_selector: null
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: prompt
    params: {}
- name: img2img
  endpoint:
    path: /img2img
    method: POST
    data_selector: image
    params: {}
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
    data_selector: image
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: response
    params: {}
- name: img2img
  endpoint:
    path: /img2img
    method: POST
    data_selector: response
    params: {}
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
    data_selector: response
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: null
    params: {}
- name: img2img
  endpoint:
    path: /img2img
    method: POST
    data_selector: null
    params: {}
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
    data_selector: null
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: response
    params: {}
- name: img2img
  endpoint:
    path: /img2img
    method: POST
    data_selector: response
    params: {}
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
    data_selector: response
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
- name: img2img
  endpoint:
    path: /img2img
    method: POST
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: images
- name: img2img
  endpoint:
    path: /img2img
    method: POST
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: images
- name: img2img
  endpoint:
    path: /img2img
    method: POST
    data_selector: images
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
    data_selector: images
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: images
- name: img2img
  endpoint:
    path: /img2img
    method: POST
    data_selector: result
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
    data_selector: result
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: images
    params: {}
- name: img2img
  endpoint:
    path: /img2img
    method: POST
    data_selector: images
    params: {}
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
    data_selector: images
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: images
- name: img2img
  endpoint:
    path: /img2img
    method: POST
    data_selector: images
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
    data_selector: images
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: images
- name: img2img
  endpoint:
    path: /img2img
    method: POST
    data_selector: images
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
    data_selector: images
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: images
- name: img2img
  endpoint:
    path: /img2img
    method: POST
    data_selector: images
- name: inpaint
  endpoint:
    path: /inpaint
    method: POST
    data_selector: images
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: response
    params: {}
- name: reason
  endpoint:
    path: /reason
    method: POST
    data_selector: response
    params: {}
- name: chain-of-thought
  endpoint:
    path: /chain-of-thought
    method: POST
    data_selector: response
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: response
    params: {}
- name: reason
  endpoint:
    path: /reason
    method: POST
    data_selector: response
    params: {}
- name: chain-of-thought
  endpoint:
    path: /chain-of-thought
    method: POST
    data_selector: response
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: data
    params: {}
- name: reason
  endpoint:
    path: /reason
    method: POST
    data_selector: data
    params: {}
- name: structured
  endpoint:
    path: /structured
    method: POST
    data_selector: data
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: ''
    params: {}
- name: reason
  endpoint:
    path: /reason
    method: POST
    data_selector: ''
    params: {}
- name: chain-of-thought
  endpoint:
    path: /chain-of-thought
    method: POST
    data_selector: ''
    params: {}
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: generated_text
- name: reason
  endpoint:
    path: /reason
    method: POST
    data_selector: steps
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: generated_text
- name: reason
  endpoint:
    path: /reason
    method: POST
    data_selector: steps
- name: structured
  endpoint:
    path: /structured
    method: POST
    data_selector: structured_output
- name: generate
  endpoint:
    path: /generate
    method: POST
    data_selector: generated_text
- name: reason
  endpoint:
    path: /reason
    method: POST
    data_selector: steps
- name: chain-of-thought
  endpoint:
    path: /chain-of-thought
    method: POST
    data_selector: output
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: inputs
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: inputs
- name: health
  endpoint:
    path: /health
    method: GET
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: model
    params: {}
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: inputs
    params: {}
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: ''
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: embeddings
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: embeddings
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: status
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
    params: {}
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: data
    params: {}
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: null
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: data
- name: health
  endpoint:
    path: /health
    method: GET
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: data
- name: health
  endpoint:
    path: /health
    method: GET
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: data
- name: health
  endpoint:
    path: /health
    method: GET
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: data
- name: health
  endpoint:
    path: /health
    method: GET
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
- name: embed
  endpoint:
    path: /embed
    method: POST
    data_selector: data
- name: health
  endpoint:
    path: /health
    method: GET
- name: v1/chat/completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
- name: completions
  endpoint:
    path: /v1/completions
    method: POST
    data_selector: choices
- name: tokenize
  endpoint:
    path: /tokenize
    method: POST
    data_selector: tokens
- name: detokenize
  endpoint:
    path: /detokenize
    method: POST
    data_selector: text
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
- name: text_completions
  endpoint:
    path: /v1/completions
    method: POST
    data_selector: choices
- name: tokenize
  endpoint:
    path: /tokenize
    method: POST
    data_selector: tokens
- name: detokenize
  endpoint:
    path: /detokenize
    method: POST
    data_selector: text
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
- name: text_completions
  endpoint:
    path: /v1/completions
    method: POST
- name: tokenize
  endpoint:
    path: /tokenize
    method: POST
- name: detokenize
  endpoint:
    path: /detokenize
    method: POST
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
- name: text_completions
  endpoint:
    path: /v1/completions
    method: POST
    data_selector: choices
- name: tokenize
  endpoint:
    path: /tokenize
    method: POST
    data_selector: tokens
- name: detokenize
  endpoint:
    path: /detokenize
    method: POST
    data_selector: text
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
- name: text_completions
  endpoint:
    path: /v1/completions
    method: POST
    data_selector: choices
- name: tokenize
  endpoint:
    path: /tokenize
    method: POST
    data_selector: tokens
- name: detokenize
  endpoint:
    path: /detokenize
    method: POST
    data_selector: text
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: text_completions
  endpoint:
    path: /v1/completions
    method: POST
    data_selector: text
    params: {}
- name: tokenize
  endpoint:
    path: /tokenize
    method: POST
    data_selector: tokens
    params: {}
- name: detokenize
  endpoint:
    path: /detokenize
    method: POST
    data_selector: text
    params: {}
- name: chute
  endpoint:
    path: /chutes
    method: GET
    data_selector: records
    params: {}
- name: chute
  endpoint:
    path: /api/chute
    method: GET
    data_selector: data
    params: {}
- name: chute
  endpoint:
    path: /predict
    method: POST
    data_selector: result
- name: chute
  endpoint:
    path: /chutes
    method: POST
    data_selector: result
- name: stream
  endpoint:
    path: /stream
    method: GET
    data_selector: result
- name: chute
  endpoint:
    path: /chutes
    method: GET
    data_selector: records
- name: validators
  endpoint:
    path: /validators
    method: GET
- name: minerApi
  endpoint:
    path: /minerApi
    method: GET
    params:
      nodePort: '32000'
- name: chutes
  endpoint:
    path: /api/chutes
    method: GET
- name: nodes
  endpoint:
    path: /api/nodes
    method: GET
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Chutes expands its global GPU network, offering one-click access to training and
  inference for LLMs, images, audio, and beyond.
- Public API, no authentication required.
- Public API with no authentication required.
- Public API with no authentication required
- Playground available to use through our API
- Runs with our API
- $0.0518 USD / Million Input Tokens
- $0.2074 USD / Million Output Tokens
- $0.0170 USD / Million Input Tokens
- $0.0682 USD / Million Output Tokens
- $0.0100 USD / Million Input Tokens
- $0.0100 USD / Million Output Tokens
- Free to Use
- Limited-time free rotation model
- Runs on consumer hardware
- This Chute is available to use through our playground.
- Uses a pay-per-use pricing model based on input and output tokens.
- Chutes uses Bittensor for secure authentication. You'll need a Bittensor wallet
  with a hotkey.
- Access to images only (requires action parameter)
- Chutes automatically scales based on demand. Configure concurrency to control how
  many requests each instance handles.
- Uses Bittensor for secure, decentralized authentication.
- Uses Bittensor wallet-based authentication
- Chutes uses Bittensor for secure, decentralized authentication.
- API keys provide granular access control.
- Advanced sentiment analysis service using RoBERTa with confidence scoring and batch
  processing.
- Model downloads on first run (normal)
- Check internet connection during build
- Chute is a FastAPI application optimized for AI workloads.
- Supports serverless deployment to GPU clusters.
- Handle up to 8 requests simultaneously
- FastAPI application with serverless deployment to GPU clusters
- Chutes can be deployed serverlessly to GPU clusters.
- Chutes API allows for serverless deployment of AI applications.
- Chute is a FastAPI application with superpowers for AI workloads.
- Chutes extends FastAPI, you can use FastAPI features directly.
- Chutes API provides serverless deployment to GPU clusters
- Chutes are AI applications deployable on GPU infrastructure.
- Serverless deployment with automatic scaling.
- Uses OAuth2 with refresh token — requires setup of connected app in Chutes
- Some objects may return nulls in deeply nested fields
- Uses FastAPI for API definition
- Requires setup of FastAPI for endpoint definitions
- Handles streaming and input validation
- Images define the Docker environment where AI applications run.
- You can use pre-built images or create custom ones.
- Images in Chutes define the Docker environment where your AI applications run.
- Images define the Docker environment where AI applications run
- Jobs can run for extended periods and handle file uploads.
- Jobs can run for extended periods
- Jobs can handle file uploads and downloads
- Jobs can run for extended periods, handle file uploads, and track progress.
- Jobs are background tasks that handle long-running operations, file uploads, and
  asynchronous processing.
- Jobs can run for extended periods and handle long-running operations.
- Node Selection defines the hardware requirements for your chute.
- Ensure optimal performance while controlling costs by only using the GPU resources
  you actually need.
- Chute class represents a deployable AI application unit.
- Keep prompt under 10,000 characters.
- Must use lowercase alphanumeric with hyphens for username and name.
- Keep tagline under 100 characters.
- Image field is required.
- Prompt cannot be empty
- Prompt too long (max 10,000 characters)
- Rate limit is 100 requests per 60 seconds
- 'Use kebab-case for multi-word paths: /generate-text'
- Keep paths concise but descriptive
- API key required for protected endpoints
- Must be lowercase alphanumeric with hyphens
- Cannot start or end with hyphen
- Maximum 63 characters
- Should match your Chutes username
- Uses OAuth2 for authentication.
- Multi-stage builds not supported in current API
- Multi-stage builds are not directly supported by the current Image API.
- Use external build tools for multi-stage builds.
- Use Non-Root Users — run command for useradd
- Minimize Attack Surface — remove unnecessary tools
- Keep Images Updated — update packages regularly
- Image API requires Docker to be installed and configured.
- Designed for GPU-accelerated text generation.
- Jobs can expose network ports for external access.
- Maximum execution time for the job can be between 30 seconds and 24 hours.
- Maximum execution time for the job can be set.
- Job is designed for tasks that need persistent compute resources, specific network
  ports, or long-running processes.
- Jobs can expose network ports for external access
- Maximum execution time for the job in seconds can be None for unlimited time
- Port must be 2202 or in range 8002-65535.
- Maximum execution time for the job must be between 30 seconds and 24 hours.
- Port must be 2202 or in range 8002-65535
- Each port must have a unique number
- Name must match pattern ^[a-z]+[0-9]*$
- If specified, timeout must be between 30 seconds and 24 hours
- Maximum execution time for the job must be between 30 seconds and 24 hours
- Specifies hardware requirements for Chutes deployments.
- 'Valid range for gpu_count: 1-8 GPUs.'
- 'Valid range for min_vram_gb_per_gpu: 16-140 GB.'
- Valid range for gpu_count is 1-8 GPUs.
- Valid range for min_vram_gb_per_gpu is 16-140 GB.
- Specify hardware requirements for Chutes deployments.
- Templates provide quick setup and consistent configuration.
- 'Quick Setup: Instant deployment of popular AI models'
- 'Best Practices: Pre-configured optimization settings'
- 'Consistent Configuration: Standardized deployment patterns'
- 'Customization: Full control over parameters and settings'
- Chutes provides pre-built templates for common AI/ML frameworks and use cases.
- API keys provide programmatic access to your Chutes account and are essential for
  CI/CD and automation.
- Deleted keys cannot be recovered.
- Builds can be optimized for faster execution.
- Local builds may have resource limits.
- Builds can be done both locally and remotely.
- Uses API key for authentication
- Use multi-stage builds for smaller images
- Clean up package caches
- Builds can be done remotely for better performance
- Local builds are useful for debugging
- The chutes build command creates Docker images for your chutes with all necessary
  dependencies and optimizations for the Chutes platform.
- Builds can be done locally or on the Chutes infrastructure.
- Build process may require specific permissions and checks.
- Remote building is recommended for faster build times.
- Build a Docker image for your chute.
- Enable debug logging for local builds.
- Build without cache for clean rebuild
- Builds can be done locally or remotely
- Production builds require a clean workspace and tests
- Uses API key for authentication — requires setup of API key.
- Build command creates Docker images for your chutes with all necessary dependencies
  and optimizations.
- Optimize Layer Caching
- Pin Dependencies
- Build fails with dependency errors.
- Out of memory during build.
- Build takes too long.
- Permission errors.
- Use remote building for large models
- Uses API key for authentication — requires setup in api
- Set up comprehensive monitoring using alerts for error rate, response time, and
  availability.
- Public deployment benefits include marketplace visibility and potential revenue
  sharing.
- Public deployment (visible in marketplace)
- Deployments can be made public or private
- Auto-scaling settings supported
- Public deployment benefits include marketplace visibility and community discovery.
- High latency or timeouts may require scaling up instances.
- Validates image exists
- Creates deployment configuration
- Provisions GPU resources
- Starts your chute
- Returns public URL
- Deploys images as live, scalable AI applications on the Chutes platform.
- Requires setup of connected app in Chutes.
- Private deployment (default)
- Auto-scaling settings can be defined in chute configuration
- Public deployment (visible in marketplace) requires setting --public flag.
- Always implement health checks
- Deletion is permanent and cannot be undone!
- Chute management includes commands for listing, getting details, and deleting chutes.
- Monitoring includes viewing logs and performance metrics.
- Chute management via CLI commands.
- Chute management includes commands for listing, getting, deleting, and monitoring
  performance of deployed chutes.
- Health checks and metrics can be monitored through CLI commands.
- Default config file location is ~/.chutes/config.ini
- Override config path with CHUTES_CONFIG_PATH environment variable
- Check config file for API base URL.
- Uses API key for authentication.
- Common issues include authentication errors and build failures.
- Default API base URL is configurable via environment variable CHUTES_API_URL.
- The CLI provides options for building and deploying chutes.
- Deploy speech recognition chute requires specific configurations.
- Audio processing server started on ws://0.0.0.0:8765
- Processes multiple texts in a single request with optimized GPU utilization
- Handles variable input sizes with dynamic padding
- Allows processing multiple texts in a single request
- Optimizes GPU utilization by batching requests
- Processes multiple texts in a single request
- Optimizes GPU utilization with efficient batching
- Processes multiple texts in a single request optimizing GPU utilization.
- Efficiently process multiple texts in a single request with optimized GPU utilization.
- Uses semaphore-controlled concurrency with a maximum of 10 concurrent analyses.
- 'Multi-model Architecture: Combining different AI models in a single service'
- 'Batch Processing: Handling multiple texts efficiently'
- 'Error Handling: Robust error management across models'
- Robust error management across models
- Performance optimization for repeated queries
- Service implements intelligent caching
- Optimized node selection for production
- Uses semaphore-controlled concurrency
- The service implements intelligent caching.
- Uses Redis-based caching with 1-hour TTL for cached results
- Semaphore-controlled concurrency with a maximum of 10 concurrent analyses
- Timeouts are set to 600 seconds for large batches
- 1-hour TTL for cached results
- Graceful degradation when cache is unavailable
- Higher concurrency for production
- Service includes multiple AI models for comprehensive analysis.
- Caching is implemented for performance optimization.
- Uses Redis-based caching with 1-hour TTL
- Max 10 concurrent analyses
- Semaphore-controlled concurrency (max 10 concurrent analyses)
- Async/await patterns for non-blocking operations
- Batch processing for multiple texts
- Error isolation prevents single failures from affecting the batch
- Uses OAuth2 with refresh token — requires setup of connected app in chutes
- Some analysis types may return nulls in deeply nested fields
- Longer timeout for large batches
- Analysis with fallback strategies
- Uses Redis-based caching for repeated text analyses
- Circuit breaker pattern to handle failures
- Uses failure_threshold and timeout settings
- The service implements intelligent caching
- Intelligent caching is implemented to optimize performance.
- Uses asynchronous processing for non-blocking operations
- Cost-optimized configuration for development
- This comprehensive example demonstrates how to build a production-ready text analysis
  service
- Service implements intelligent caching.
- Uses Redis for caching with a 1-hour TTL
- Custom images allow you to pre-install dependencies.
- CUDA-optimized images can be used for deep learning.
- Custom Docker images allow for pre-installing dependencies and optimizing performance.
- Supports custom model training and inference
- Optimized for batch processing and low latency
- Auto-scaling and error handling
- High-performance text embeddings and similarity search
- Production-ready text embedding service with similarity search, reranking, and semantic
  analysis capabilities
- 'Fast Inference: Optimized for batch processing and low latency'
- 'Production Ready: Auto-scaling and error handling'
- High-performance text embeddings with TEI
- Production-ready text embedding service with similarity search
- High-performance embedding server optimized for batch processing and low latency.
- Supports multiple pooling strategies for embeddings
- High-performance text embedding service with similarity search and reranking
- Ensure appropriate GPU and memory requirements for optimal performance
- Requires setup of connected app in API
- Handles multiple concurrent requests
- Clear cache before each batch if hasattr(self, 'torch')
- FLUX.1 requires significant GPU memory
- Limit concurrency due to memory requirements
- Requires GPU for optimal performance
- DeepSeek R1 - Advanced reasoning and problem-solving model
- Both VLLM and SGLang provide OpenAI-compatible endpoints.
- Both VLLM and SGLang provide OpenAI-compatible endpoints
- Enable real-time streaming for better user experience
- OpenAI-compatible endpoints
- Supports OpenAI-compatible endpoints
- Real-time streaming responses available
- OpenAI-compatible endpoints available.
- Supports multiple languages and musical genres
- Generates high-quality 44.1kHz audio output
- Requires setup of connected app in Chutes API
- Requires setup of connected app in api
- Generate music from text descriptions and style prompts
- Convert lyrics with timing information into musical performances
- Generate music from style prompts and/or lyrics.
- Ensure lyrics are in proper LRC format with timestamps.
- Requires setup of connected app in Chutes
- Ensure proper LRC format for lyrics
- Multiple GPUs for parallel processing
- Handle multiple requests
- For highest quality output, use maximum duration for better quality.
- Memory-optimized generation includes clearing GPU memory between generations.
- Semantic search enables meaning-based search, similarity matching, and multi-language
  support.
- Model loads on first request (normal)
- Consider warming up with health check
- Real-time streaming text processing
- Each response line contains JSON with the current processing step
- Chunked text processing for large inputs
- Supports multiple speakers (2 speakers available)
- 24GB required for optimal performance
- High-quality text-to-speech service.
- Supports multiple speakers.
- Produces audio in WAV format
- Quality passed, return audio after validation
- Clear cache before generation
- Generate with memory efficiency
- High-quality text-to-speech with CSM-1B
- Supports multiple speakers and context awareness
- Uses TTSCache for caching results of text-to-speech requests
- Configurable duration limits
- 'High Quality: Up to 720p video generation with 44.1kHz audio'
- 'Distributed Processing: Multi-GPU support for large-scale deployment'
- High-quality video generation using Wan2.1 14B model with support for multiple formats
  and resolutions
- Ensure the correct GPU configuration for video processing
- Requires setup of OAuth2 connected app in Chutes API
- Generate video that interpolates between two prompts.
- High-quality video generation using Wan2.1 14B model with support for multiple formats
  and resolutions.
- Monitor service health and resource usage
- View detailed logs
- Production-ready Chutes applications require scalable architecture and security.
- Requires HTTPS for security.
- Requires setup of API key manager and JWT manager for authentication.
- HTTPS is required for production environment.
- Memory increase should be reasonable (less than 100MB)
- Cost optimization strategies include resource right-sizing, auto-scaling, and spot
  instances.
- Custom Chutes give you complete control over your AI application architecture.
- Advanced processing with preprocessing, postprocessing, and business logic.
- Handles job submissions and status checks.
- Metrics collection occurs every minute.
- Errors in metrics collection are logged.
- Uses OAuth2 with refresh token — requires setup of connected app in Chutes API
- Monitor and iterate on the deployed service using chutes chutes logs and chutes
  chutes metrics commands.
- Custom images in Chutes provide full control over the software stack and optimization.
- Consider using non-root user
- Add health check
- Debug common image building issues using ImageDebugger
- Custom images provide full control over the software stack.
- Images can be optimized for performance and security.
- Use non-root user
- Remove setuid/setgid binaries
- Don't embed secrets
- Use minimal base images
- Keep system packages updated
- Use appropriate base image
- Minimize layers
- Leverage build cache
- Clean up in same layer
- Use multi-stage builds
- Pin package versions
- Use semantic versioning
- Add descriptive labels
- Document custom configurations
- Include health checks
- Remove package caches
- Use slim base images
- Avoid unnecessary dependencies
- Compress layers where possible
- Use .dockerignore
- 'Standardize Deployments: Create consistent deployment patterns'
- 'Reduce Code Duplication: Reuse common configurations'
- 'Simplify Complex Setups: Abstract away complexity for end users'
- 'Enable Team Collaboration: Share best practices across teams'
- 'Graceful Degradation: Handle failures without complete system breakdown'
- 'User-Friendly Messages: Provide clear, actionable error information'
- 'Logging and Monitoring: Track errors for debugging and improvement'
- 'Retry Strategies: Automatically recover from transient failures'
- 'Circuit Breakers: Prevent cascading failures'
- 'Fallback Mechanisms: Provide alternative responses when primary methods fail'
- Effective error handling in Chutes includes graceful degradation and user-friendly
  messages.
- Middleware to catch and handle all errors.
- Model-specific error handling for LLM and Image Generation.
- If still failing, try with even more conservative parameters
- Uses Prometheus for performance metrics
- Optimize for your specific hardware
- Performance optimization strategies include model optimization, resource management,
  scaling strategies, caching, and network optimization.
- Performance optimization in Chutes involves several key areas.
- Performance optimization strategies are critical for efficient API usage.
- 'API Documentation: Generate comprehensive API docs from schemas'
- Automatic type validation and conversion with Pydantic
- Error handling with clear validation error messages
- Password must contain at least one uppercase letter
- Password must contain at least one lowercase letter
- Password must contain at least one number
- Pydantic schemas provide type safety and automatic validation.
- 'Client Generation: Auto-generate typed clients from schemas'
- 'Database Integration: Connect schemas with ORMs and databases'
- 'Testing Strategies: Implement comprehensive schema testing'
- Pydantic schemas provide automatic type validation and conversion
- Secure API key handling is required
- User roles should be stored in a database in production
- Secure API access and user management
- Encrypting sensitive data and communications
- Rate limiting is applied with a maximum of 100 requests per minute and 5000 requests
  per hour.
- Security monitoring is in place to track failed authentication attempts and suspicious
  request patterns.
- Enable authentication and authorization
- Implement input validation and sanitization
- Use encryption for sensitive data
- Build secure Docker images
- Configure TLS/SSL properly
- Set up rate limiting
- Implement security monitoring
- Test for common vulnerabilities
- Monitor for security events
- Implement incident response procedures
- Keep dependencies updated
- Regular security audits
- Backup and recovery procedures
- Access logging and monitoring
- Streaming responses enabled for all endpoints with stream=true.
- Handles real-time collaborative document editing.
- Includes streaming data management with buffering and backpressure.
- Pre-built templates provide rapid deployment and production-ready configurations.
- Use OAuth2 with refresh token — requires setup of connected app in api
- Pre-built templates support rapid deployment and customization.
- Pre-built templates provide rapid deployment and best practices.
- Optimized configurations for performance tuning.
- Monitor template performance over time.
- Safely upgrade a template to a new version.
- Diagnose common template deployment issues.
- High-resolution image generation (up to 1024x1024)
- Multiple generation modes available
- Multiple generation modes
- ControlNet support for guided generation
- Safety filtering for appropriate content
- Multiple generation modes supported
- High-quality image generation with various modes
- Generates images based on prompts with specific parameters
- Reduce num_inference_steps (try 20-30)
- Use a faster scheduler like 'euler_a'
- Lower the resolution (512x512 instead of 1024x1024)
- Enable memory optimizations
- 'Enable CPU offloading: enable_cpu_offload=True'
- 'Enable attention slicing: enable_attention_slicing=True'
- Use a smaller model (SD 1.5 instead of SDXL)
- Increase num_inference_steps (try 50-80)
- Adjust guidance_scale (7.5-12.0)
- Set safety_checker=False if appropriate for your use case
- Supports multiple generation modes
- Reduce num_inference_steps (try 20-30) for faster generation
- 'Enable CPU offloading: enable_cpu_offload=True for out of memory errors'
- Adjust prompts to be more appropriate for NSFW content
- 'Multiple generation modes available: text-to-image, image-to-image, inpainting'
- Reduce num_inference_steps (try 20-30) for faster generation.
- 'Enable CPU offloading: enable_cpu_offload=True to avoid out of memory errors.'
- Common issues include generation speed, out of memory errors, and poor image quality.
- Enable safety checking for public-facing applications
- SGLang provides structured generation capabilities for complex prompting and reasoning.
- API supports complex reasoning and structured generation.
- Chutes API provides structured generation capabilities using SGLang for complex
  reasoning and multi-step AI workflows.
- Ensure to provide structured inputs for optimal results.
- Enable structured output formatting
- Optimized for embedding generation using Hugging Face models.
- Supports batch processing and automatic request queuing.
- Optimized performance with Rust-based implementation
- Batch processing for efficient throughput
- Automatic batching and optimization
- Production-ready performance
- Optimized for text embedding generation
- Supports batching and request queuing
- Optimized for text embedding generation using Hugging Face models.
- Automatic batching and request queuing
- Automatic model downloading and caching
- Built-in streaming support
- Optimized inference settings
- Auto-scaling based on demand
- OpenAI-compatible API for easy integration
- Provides OpenAI-compatible API for easy integration.
- OpenAI-compatible API for easy integration.
- Chutes is designed for production workloads with 99.9% uptime SLA
- Chutes handles containerization automatically
- Chutes is a serverless AI compute platform that lets you deploy and scale AI models
  on GPU infrastructure without managing servers.
- Chutes is a serverless AI compute platform that lets you deploy and scale AI models
  on GPU infrastructure.
- API key required for authentication
- Check API key configuration
- Contact support if you need additional permissions
- Ensure you're using the correct username in deployments
- Verify key is working
- Do not run more than one UID to maximize compute time.
- All servers must be bare metal/VM with unique static IPs.
- Ensure the highest probability of success by provisioning servers with Ubuntu 22.04.
- Chutes API/validator requires each GPU node to have a publicly routeable IP address.
- The scoring system aims to fairly distribute rewards based on actual computational
  work performed, with mechanisms to prevent gaming and ensure network health.
errors:
- '422: Validation Error'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Invalid hotkey: Check wallet status'
- 'Config not found: Check config location'
- 'API key invalid: Verify key exists'
- '500 Internal Server Error: Check model loading in startup'
- '401 Unauthorized: Verify input validation'
- '401: Invalid or missing API key'
- '403: Access denied to the chute'
- '404: Chute not found'
- '429: Rate limit exceeded'
- '500: Internal server error'
- '503: Service temporarily unavailable'
- '401 Unauthorized: Missing or invalid token'
- 429 Rate limit exceeded
- 'REQUEST_TIMEOUT: Increase job timeout or optimize processing.'
- '401 Unauthorized: Recheck authentication credentials'
- '404 Not Found: Check job ID'
- 'REQUEST_TIMEOUT: Job exceeded timeout limit'
- 'JOB_FAILED: Job encountered an error'
- '400: Prompt cannot be empty'
- '400: Prompt too long (max 10,000 characters)'
- '400 Bad Request: Ensure all required fields are filled correctly.'
- '401 Unauthorized: Check OAuth credentials.'
- '500 Internal Server Error: Occurs when the server encounters an unexpected condition.'
- 500 Internal server error
- '400 Bad Request: Prompt cannot be empty'
- '400 Bad Request: Prompt too long (max 10,000 characters)'
- '401 Unauthorized: API key required'
- '401 Unauthorized: Invalid API key'
- '422: Unprocessable Entity'
- '400: Bad Request'
- '400: Invalid training configuration'
- '404: Job not found'
- '400 Bad Request: Invalid training configuration'
- '404 Not Found: Job not found'
- '409 Conflict: Job cannot be cancelled'
- No available nodes match your requirements
- Out of memory errors
- '401 Unauthorized: Recheck API key validity'
- Build fails with dependency errors.
- Out of memory during build.
- Permission errors.
- Build fails with dependency errors
- Out of memory during build
- Build takes too long
- Permission errors
- '401 Unauthorized: Recheck API key'
- 'Build fails with dependency errors: Check requirements.txt'
- 'BUILD_FAILED: Check dependencies and build context.'
- 'OUT_OF_MEMORY: Optimize image layers or use remote build.'
- 'Out of memory during build: Use remote building for large models'
- 'Build takes too long: Use remote building (usually faster)'
- Build fails with dependency errors?
- Out of memory during build?
- '401 Unauthorized: Recheck API key or permissions.'
- '401 Unauthorized: Recheck API key or permissions'
- 'Deployment failed: Check configuration and resource allocation.'
- 'Deployment failed: Check configuration and resources'
- '429 Too Many Requests: Throttle deployment requests'
- 'Image not found: Check if image was built.'
- 'Pending state: Check resource availability.'
- Deployment fails with 'Image not found'
- Deployment stuck in 'Pending' state
- Health checks failing
- 'Health checks failing: Check chute logs.'
- Deployment fails with 'Image not found'?
- Deployment stuck in 'Pending' state?
- Health checks failing?
- '401 Unauthorized: Recheck API key or token expiration'
- Chute not responding
- High resource usage
- Deployment issues
- 'Chute not responding: Check chute status and view recent logs.'
- 'High resource usage: Check metrics and scale if needed.'
- 'Deployment issues: Check deployment status and view logs.'
- 'Command not found: Check installation.'
- 'Authentication errors: Re-register if needed.'
- '500: Batch processing failed'
- Circuit breaker is OPEN
- 'ANALYSIS_SERVICE_ERROR: Analysis service error occurred'
- 'Circuit breaker is OPEN: Too many failures in a row'
- '500 Internal Server Error: Check server logs for details'
- '400 Bad Request: Check input schema for validation errors.'
- '500 Internal Server Error: Service failure, retry later.'
- '400 Bad Request: Check input format and required fields.'
- '500 Internal Server Error: An unexpected error occurred on the server.'
- 'Circuit breaker is OPEN: Too many failures'
- '400 Bad Request: Check input parameters.'
- '401 Unauthorized: Verify token validity.'
- '500 Internal Server Error: An unexpected error occurred.'
- 'BUILD_FAILURE: Check if explicit package versions are used.'
- '500: Embedding generation failed'
- '500: Similarity computation failed'
- '500: Clustering failed'
- '404: Collection not found'
- '400 Bad Request: Check input format or parameters'
- '404 Not Found: Endpoint does not exist or incorrect path'
- '500 Internal Server Error: Issue with server processing request'
- '400 Bad Request: Check input validation and format'
- '500 Internal Server Error: General error, check logs for details'
- Batch size too large. Maximum 1000 texts allowed.
- Text too short after preprocessing
- No valid texts after preprocessing
- Embedding generation failed
- '404 Not Found: Endpoint not found or invalid path'
- 'Error: 401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'OUT_OF_MEMORY: Reduce image resolution or parameters'
- 'OutOfMemoryError: Reduce resolution to avoid out of memory issues'
- '401 Unauthorized: Check API key'
- 'Out of Memory (OOM): Reduce memory usage'
- 'Slow Response Times: Optimize for speed'
- 'Connection Timeouts: Increase timeouts'
- 'INVALID_INPUT: Check the input schema for errors'
- 'MODEL_NOT_FOUND: Ensure the model is properly initialized'
- '400 Bad Request: Invalid input audio_b64 provided'
- '400 Bad Request: Error validating lyrics'
- 'HTTP_400_BAD_REQUEST: Invalid input provided'
- 'HTTP_401_UNAUTHORIZED: Check authentication credentials'
- '400 BAD REQUEST: Invalid input audio'
- '400 BAD REQUEST: Line exceeds character limit'
- '400 BAD REQUEST: Total duration exceeds maximum allowed length'
- '400 Bad Request: You must provide either style_prompt or audio_b64!'
- '400 Bad Request: Total duration exceeds maximum allowed length'
- '400 Bad Request: Invalid input provided'
- 'HTTP_400_BAD_REQUEST: Check input values and formats'
- '500: Analysis failed: Check input or model loading'
- 'Invalid JSON: Handle specific result types'
- 'HTTPException: Check audio input format or size'
- '400 BAD REQUEST: Invalid input audio_b64 provided'
- '500 Internal Server Error: Unexpected server error'
- '400 Bad Request: Invalid input provided.'
- '500 Internal Server Error: Unexpected server error.'
- '500 Internal Server Error: Check server logs for more details'
- '500: Failed to generate quality audio after multiple attempts'
- '400: Text too long. Maximum 1000 characters allowed.'
- '500: Generated audio failed quality checks'
- '503: GPU memory exhausted. Please try again or reduce duration.'
- 'QUERY_TIMEOUT: Adjust request parameters for optimal performance'
- '401 Unauthorized: Verify authentication credentials'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '401 Unauthorized: Authentication required'
- '400 Bad Request: Invalid input parameters.'
- '401 Unauthorized: Check your authentication credentials.'
- '500 Internal Server Error: Server encountered an unexpected condition.'
- 'MODEL_LOADING_FAILED: Classification of AI-specific errors.'
- 'INFERENCE_TIMEOUT: Model inference timeout.'
- 'OUT_OF_MEMORY: GPU/CPU memory exhaustion error.'
- 'INVALID_INPUT: This field must be text.'
- 'MODEL_OVERLOADED: Circuit breaker is OPEN for function.'
- 'GENERATION_FAILED: Model inference failed due to insufficient memory.'
- 'CONTEXT_LENGTH_EXCEEDED: Input length exceeds model''s maximum context length.'
- 'MODEL_LOADING_FAILED: Model failed to load.'
- 'INFERENCE_TIMEOUT: Model inference exceeded time limits.'
- 'OUT_OF_MEMORY: Model ran out of memory.'
- 'INVALID_INPUT: Provided input is invalid.'
- 'MODEL_OVERLOADED: Model is currently overloaded.'
- 'GENERATION_FAILED: Model generation failed.'
- 'CONTEXT_LENGTH_EXCEEDED: Input exceeds model maximum context length.'
- 'MODEL_LOADING_FAILED: Model loading failed'
- 'INFERENCE_TIMEOUT: Inference process took too long'
- 'OUT_OF_MEMORY: Model inference failed due to insufficient memory'
- 'INVALID_INPUT: Provided input is not valid'
- 'MODEL_OVERLOADED: Model is currently overloaded'
- 'GENERATION_FAILED: Failed to generate output'
- 'CONTEXT_LENGTH_EXCEEDED: Input length exceeds model''s maximum context length'
- '507: Insufficient Storage'
- '504: Gateway Timeout'
- '500: Internal Server Error'
- An unexpected error occurred
- '422: ValidationError'
- 'MODEL_LOADING_FAILED: Model loading failed.'
- 'INFERENCE_TIMEOUT: Inference timed out.'
- 'OUT_OF_MEMORY: Model inference failed due to insufficient memory.'
- 'INVALID_INPUT: Input provided is invalid.'
- '422: ValidationError - Input validation error'
- '507: OutOfMemoryError - Insufficient Storage'
- '504: InferenceTimeoutError - Gateway Timeout'
- '400: ModelError - Bad Request'
- 'All models in fallback chain failed: Model overload'
- '422: Validation error'
- '400 Bad Request: Check input data and validation rules.'
- This field is required
- This field must be text
- This field must be a number
- This field must be at least {error['ctx']['limit_value']}
- This field must be at most {error['ctx']['limit_value']}
- 'ValidationError: Clear validation error messages'
- 'Unauthorized: Check API key'
- 'Forbidden: Insufficient permissions'
- 'Unauthorized: Recheck API key or other authentication issues'
- 'Unauthorized: Recheck API key validity'
- Client blocked due to security incident
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Invalid credentials'
- '500 Internal Server Error: Retry the request'
- '400 Bad Request: Check your input parameters'
- '401 Unauthorized: Provide valid authentication token'
- '500 Internal Server Error: Try again later'
- '400 Bad Request: Check the request format and parameters'
- '401 Unauthorized: Ensure proper authentication'
- '500 Internal Server Error: An issue occurred on the server'
- '400 Bad Request: Check input parameters'
- '400 Bad Request: Ensure input parameters are correct'
- '401 Unauthorized: Check authentication credentials'
- '500 Internal Server Error: Retry after a few moments'
- 'Out of memory errors: Enable CPU offloading or adjust image resolution.'
- '400 Bad Request: Check request format and parameters.'
- '401 Unauthorized: Recheck authentication credentials.'
- '500 Internal Server Error: Try again later.'
- '400 Bad Request: Check input format or parameters.'
- '401 Unauthorized: Verify authentication details.'
- '429 Too Many Requests: Reduce request frequency.'
- 'REQUEST_FAILED: Request failed due to network issues'
- 'TIMEOUT: Request exceeded the timeout limit'
- '400 Bad Request: Check request format'
- 'Request failed: Check network connection or API endpoint'
- '400 Bad Request: Check input data format.'
- '400 Bad Request: Check input format'
- 'Slow embedding generation: Increase max_batch_tokens for better throughput'
- 'Out of memory errors: Reduce max_batch_tokens or max_batch_requests'
- 'Poor embedding quality: Use a larger model or ensure proper text preprocessing'
- 'High latency: Reduce batch sizes or use a smaller model'
- 'Out of memory errors: Reduce max_batch_tokens or decrease max_batch_requests'
- 'High latency: Reduce batch sizes for faster response'
- 'Request failed: {e}'
- 'Slow Model Loading: The model downloads on first startup'
- 'Model Not Found: Ensure model exists and is public'
- 'Deployment Fails: Check image build status'
- 'HTTPException: 401 Unauthorized'
- 'HTTPException: 403 Forbidden'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Bittensor
  - Wallet
  - API Key
  - verify_token
  - NodeSelector
client:
  base_url: /v1/chat/completions
  auth:
    type: apikey
source_metadata: null
