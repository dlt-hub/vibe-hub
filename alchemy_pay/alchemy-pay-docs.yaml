resources:
- name: query_order
  endpoint:
    path: /open/api/payment/query
    method: POST
    data_selector: orderNo
- name: query_order
  endpoint:
    path: /payment/query
    method: POST
    data_selector: order
    params:
      appId: ACH order number
      merchantOrderNo: merchant order number
- name: crypto_payment
  endpoint:
    path: /api-integration-3
    method: GET
- name: merchant_settlement
  endpoint:
    path: /merchant-settlement
    method: GET
- name: crypto_payment
  endpoint:
    path: /api-integration-3
    method: GET
    data_selector: payment_methods
    params: {}
- name: merchant_settlement
  endpoint:
    path: /merchant-settlement
    method: GET
    data_selector: settlement_methods
    params: {}
- name: on_ramp
  endpoint:
    path: /index/rampPageBuy
    method: GET
- name: off_ramp
  endpoint:
    path: /index/rampPageSell
    method: GET
- name: on_ramp
  endpoint:
    path: /index/rampPageBuy
    method: GET
    data_selector: params
    params:
      crypto: USDT
      fiat: USD
      merchantOrderNo: '1631231234567890123455'
      network: BSC
- name: on_ramp
  endpoint:
    path: /index/rampPageBuy
    method: GET
- name: off_ramp
  endpoint:
    path: /index/rampPageSell
    method: GET
- name: On Ramp Custom Parameters
  endpoint:
    path: /on-ramp-custom-parameters
    method: GET
    data_selector: parameters
    params:
      appId: string
      timestamp: string
      merchantOrderNo: string
      sign: string
- name: on_ramp
  endpoint:
    path: /index/rampPageBuy
    method: GET
    data_selector: ''
    params:
      crypto: USDT
      fiat: USD
      fiatAmount: '200'
      merchantOrderNo: '1731231234567890123455'
      network: BSC
      callbackUrl: https://google.com
      redirectUrl: https://google.com
      timestamp: ''
      appId: ''
- name: on_ramp_custom_parameters
  endpoint:
    path: /on-ramp-custom-parameters
    method: GET
    data_selector: parameters
    params:
      appId: Y
      timestamp: Y
      merchantOrderNo: Y
      sign: Y
- name: merchant_create_order
  endpoint:
    path: /webhooks/off/merchant
    method: POST
    data_selector: data
    params: {}
- name: merchant_notification
  endpoint:
    path: /webhooks/off/merchant
    method: POST
    data_selector: data
    params: {}
- name: getToken
  endpoint:
    path: /open/api/v4/merchant/getToken
    method: POST
    data_selector: data
    params:
      email: string
- name: getToken
  endpoint:
    path: /open/api/v4/merchant/getToken
    method: POST
- name: create_order
  endpoint:
    path: /open/api/v4/merchant/trade/create
    method: POST
- name: query_order
  endpoint:
    path: /open/api/v4/merchant/query/trade
    method: GET
- name: create_order
  endpoint:
    path: /open/api/v4/merchant/trade/create
    method: POST
- name: query_order
  endpoint:
    path: /open/api/v4/merchant/query/trade
    method: GET
- name: get_token
  endpoint:
    path: /open/api/v4/merchant/getToken
    method: POST
    data_selector: data
    params: {}
- name: get_token
  endpoint:
    path: /open/api/v4/merchant/getToken
    method: POST
    data_selector: data
    params: {}
- name: create_order
  endpoint:
    path: /open/api/v4/merchant/trade/create
    method: POST
    data_selector: data
    params: {}
- name: Get Token
  endpoint:
    path: /get-token
    method: GET
- name: Crypto Query
  endpoint:
    path: /crypto-query
    method: GET
- name: Fiat Query
  endpoint:
    path: /fiat-query
    method: GET
- name: Quote Query
  endpoint:
    path: /quote-query-api
    method: GET
- name: Payment Method Form Query
  endpoint:
    path: /payment-method-form-query
    method: GET
- name: Submit Form
  endpoint:
    path: /submit-form
    method: POST
- name: Create Order
  endpoint:
    path: /create-order-3
    method: POST
- name: quote
  endpoint:
    path: /open/api/v4/merchant/quotes
    method: POST
    data_selector: data
    params: {}
- name: get_token
  endpoint:
    path: /get-token
    method: POST
- name: crypto_query
  endpoint:
    path: /crypto-query
    method: GET
- name: fiat_query
  endpoint:
    path: /fiat-query
    method: GET
- name: quote_query
  endpoint:
    path: /quote-query-api
    method: GET
- name: payment_method_form_query
  endpoint:
    path: /payment-method-form-query
    method: GET
- name: submit_form
  endpoint:
    path: /submit-form
    method: POST
- name: create_order
  endpoint:
    path: /create-order-3
    method: POST
- name: requiredField
  endpoint:
    path: /requiredField
    method: GET
    data_selector: data.fields
    params:
      payWayCode: string
      fiat: string
      side: string
- name: quote
  endpoint:
    path: /open/api/v4/merchant/quotes
    method: POST
    data_selector: data
- name: submit_form
  endpoint:
    path: /merchant/payment/account/create
    method: POST
    data_selector: data
- name: payment_method_form
  endpoint:
    path: /open/api/v4/merchant/payment/requiredField
    method: GET
    data_selector: data.fields
    params:
      payWayCode: Y
      fiat: Y
      side: Y
- name: create_order
  endpoint:
    path: /open/api/v4/merchant/order/create
    method: POST
    data_selector: data
    params: {}
- name: submit_form
  endpoint:
    path: /merchant/payment/account/create
    method: POST
    data_selector: data
    params: {}
- name: channelCookie
  endpoint:
    path: /getChannelCookie
    method: GET
    data_selector: channelCookie
- name: cookie
  endpoint:
    path: /getCookie
    method: GET
    data_selector: cookie
- name: create_order
  endpoint:
    path: /open/api/v4/merchant/order/create
    method: POST
    data_selector: data
    params: {}
- name: get_cookie
  endpoint:
    path: /get-cookie-for-credit-card-payment
    method: GET
    data_selector: channelCookie
    params: {}
- name: query_order
  endpoint:
    path: /docs/query-order-2
    method: GET
- name: crypto_query
  endpoint:
    path: /docs/crypto-query
    method: GET
- name: crypto_fiat_query
  endpoint:
    path: /docs/crypto-fiat-query
    method: GET
- name: price_query
  endpoint:
    path: /docs/price-query
    method: GET
- name: estimate_price_query
  endpoint:
    path: /docs/estimate-price-query
    method: GET
- name: ip_query
  endpoint:
    path: /docs/ip-query
    method: GET
- name: payment_method_query
  endpoint:
    path: /docs/payment-method-query
    method: GET
- name: query_order
  endpoint:
    path: /open/api/v4/merchant/query/trade
    method: GET
    params:
      side: BUY
- name: query_order
  endpoint:
    path: /docs/query-order-2
    method: GET
- name: crypto_query
  endpoint:
    path: /docs/crypto-query
    method: GET
- name: crypto_fiat_query
  endpoint:
    path: /docs/crypto-fiat-query
    method: GET
- name: price_query
  endpoint:
    path: /docs/price-query
    method: GET
- name: estimate_price_query
  endpoint:
    path: /docs/estimate-price-query
    method: GET
- name: ip_query
  endpoint:
    path: /docs/ip-query
    method: GET
- name: payment_method_query
  endpoint:
    path: /docs/payment-method-query
    method: GET
- name: query_order_history
  endpoint:
    path: /open/api/v4/merchant/query/UserHistory
    method: POST
    data_selector: data.result
    params:
      pageSize: '100'
- name: query_order
  endpoint:
    path: /open/api/v4/merchant/query/trade
    method: GET
    data_selector: response
    params:
      side: BUY
- name: crypto_query
  endpoint:
    path: /open/api/v4/merchant/crypto/list
    method: GET
    data_selector: data
- name: user_history
  endpoint:
    path: /merchant/query/UserHistory
    method: POST
    data_selector: data.result
    params:
      appId: app_id
      timestamp: current_utc_timestamp
      sign: sign_value
- name: fiat_currency
  endpoint:
    path: /open/api/v4/merchant/fiat/list
    method: GET
- name: crypto_list
  endpoint:
    path: /open/api/v4/merchant/crypto/list
    method: GET
    data_selector: data
- name: price_query
  endpoint:
    path: /merchant/order/quote
    method: POST
    data_selector: data
    params: {}
- name: fiat_currency
  endpoint:
    path: /open/api/v4/merchant/fiat/list
    method: GET
    data_selector: data
    params:
      type: BUY
- name: payment_method
  endpoint:
    path: /merchant/query/cryptoFiatMethod
    method: POST
    data_selector: data
    params: {}
- name: estimate_price
  endpoint:
    path: /open/api/v4/merchant/order/quoted/result
    method: POST
- name: price_query
  endpoint:
    path: /open/api/v4/merchant/order/quote
    method: POST
    data_selector: data
    params: {}
- name: ip_query
  endpoint:
    path: /open/api/v4/merchant/ach/ip
    method: GET
    data_selector: data
    params:
      ipAddress: The IP address
- name: payment_method
  endpoint:
    path: /open/api/v4/merchant/query/cryptoFiatMethod
    method: POST
    data_selector: data
    params: {}
- name: on_ramp_webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: payload
    params: {}
- name: off_ramp_webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: payload
    params: {}
- name: signature_fields
  endpoint:
    path: /webhook/signature
    method: POST
    data_selector: signature_fields
    params: {}
- name: estimate_price
  endpoint:
    path: /open/api/v4/merchant/order/quoted/result
    method: POST
    data_selector: data
    params: {}
- name: on_ramp_status
  endpoint:
    path: /list-of-order-status/on-ramp
    method: GET
    data_selector: status
    params: {}
- name: off_ramp_status
  endpoint:
    path: /list-of-order-status/off-ramp
    method: GET
    data_selector: status
    params: {}
- name: ip_query
  endpoint:
    path: /open/api/v4/merchant/ach/ip
    method: GET
    data_selector: data
    params:
      ipAddress: ip_address
- name: Webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: payload
    params: {}
- name: webhook_signature
  endpoint:
    path: /webhook/signature
    method: POST
- name: memo
  endpoint:
    path: /memo
    method: GET
    data_selector: network_memo_info
    params: {}
- name: webhook_signature
  endpoint:
    path: /onRamp/callback
    method: POST
- name: on_ramp_status
  endpoint:
    path: /list-of-order-status
    method: GET
    data_selector: On Ramp
    params: {}
- name: off_ramp_status
  endpoint:
    path: /list-of-order-status
    method: GET
    data_selector: Off Ramp
    params: {}
- name: network_memo_requirements
  endpoint:
    path: /memo-list
    method: GET
    data_selector: memo_requirements
    params: {}
- name: price_query
  endpoint:
    path: API defined by merchant
    method: GET
    data_selector: data
    params:
      crypto: Crypto for querying the price
- name: token_transfer
  endpoint:
    path: /API defined by merchant
    method: POST
- name: update_order_status
  endpoint:
    path: /webhooks/treasure
    method: POST
    data_selector: data
    params: {}
- name: file_upload
  endpoint:
    path: /open/api/kyc/share/fileUpload
    method: POST
    data_selector: model
    params: {}
- name: price_query
  endpoint:
    path: API defined by merchant
    method: GET
    data_selector: data
    params:
      crypto: string
- name: submit_basic_information
  endpoint:
    path: /share/information
    method: POST
    data_selector: success
    params: {}
- name: token_transfer
  endpoint:
    path: API defined by merchant
    method: POST
- name: merchantProcess
  endpoint:
    path: /open/api/kyc/share/merchantProcess
    method: GET
    params:
      appId: Y
      timestamp: Y
      sign: Y
- name: update_order_status
  endpoint:
    path: /webhooks/treasure
    method: POST
    data_selector: data
    params: {}
- name: userToken
  endpoint:
    path: /share/userToken
    method: POST
    data_selector: data
    params: {}
- name: file_upload
  endpoint:
    path: /share/fileUpload
    method: POST
- name: Submit Basic Information
  endpoint:
    path: /open/api/kyc/share/information
    method: POST
    data_selector: model
    params: {}
- name: merchant_process
  endpoint:
    path: /open/api/kyc/share/merchantProcess
    method: GET
    data_selector: model
    params:
      appId: string
      timestamp: string
      sign: string
      requestNo: string
- name: order
  endpoint:
    path: /nft/openapi/trade/order
    method: POST
- name: share_user_token
  endpoint:
    path: /share/userToken
    method: POST
    data_selector: data
    params: {}
- name: fiat_currency
  endpoint:
    path: /nft/openapi/fiat/list
    method: GET
    data_selector: records
- name: payment_methods
  endpoint:
    path: /api/payment_methods
    method: GET
    data_selector: data
    params: {}
- name: get_token
  endpoint:
    path: /nft/openapi/merchant/getToken
    method: POST
    data_selector: data
    params: {}
- name: nft_order
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: query_order
  endpoint:
    path: /nft/openapi/query/trade
    method: GET
    data_selector: data
    params: {}
- name: webhook
  endpoint:
    path: /merchant/defined/api
    method: POST
    data_selector: payload
- name: order
  endpoint:
    path: /nft/openapi/trade/order
    method: POST
    data_selector: data
    params: {}
- name: merchant_notification
  endpoint:
    path: /nft/openapi/merchant/notice
    method: POST
    data_selector: data
    params: {}
- name: refund_order
  endpoint:
    path: /nft/openapi/order/refund
    method: POST
    data_selector: data
    params: {}
- name: fiat_currency
  endpoint:
    path: /nft/openapi/fiat/list
    method: GET
    data_selector: currency_list
    params: {}
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: GET
    data_selector: data
    params: {}
- name: get_token
  endpoint:
    path: /merchant/getToken
    method: POST
- name: query_order
  endpoint:
    path: /nft/openapi/query/trade
    method: GET
    data_selector: data
    params: {}
- name: Quick Page Integration
  endpoint:
    path: /
    method: GET
    data_selector: null
    params:
      appid: 'Yes'
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: records
- name: login_free_page_integration
  endpoint:
    path: /open/merchant/api/v2
    method: POST
    data_selector: model
- name: merchant_notification
  endpoint:
    path: /nft/openapi/merchant/notice
    method: POST
    data_selector: data
    params: {}
- name: refund_order
  endpoint:
    path: /nft/openapi/order/refund
    method: POST
    data_selector: data
- name: Query User Card Information
  endpoint:
    path: /query_user_card_information
    method: GET
- name: Query Card Balance
  endpoint:
    path: /query_card_balance
    method: GET
- name: Card Deposit
  endpoint:
    path: /card_deposit
    method: POST
- name: findUserCard
  endpoint:
    path: /open/merchant/api/findUserCard
    method: POST
    data_selector: model
    params: {}
- name: quick_page_integration
  endpoint:
    path: /
    method: GET
    params:
      appid: merchant appid
- name: find_user_card_balance
  endpoint:
    path: /open/merchant/api/findUserCardBalance
    method: POST
    data_selector: model
    params:
      cardId: required
      appId: required
      sign: optional
- name: login_free_page_integration
  endpoint:
    path: /open/merchant/api/v2
    method: POST
- name: card_deposit
  endpoint:
    path: /open/merchant/api/cardDeposit
    method: POST
    data_selector: model
    params: {}
- name: query_user_card_information
  endpoint:
    path: /path/to/query_user_card_information
    method: GET
- name: query_card_balance
  endpoint:
    path: /path/to/query_card_balance
    method: GET
- name: card_deposit
  endpoint:
    path: /path/to/card_deposit
    method: POST
- name: voucher_code
  endpoint:
    path: /voucher-code
    method: GET
    data_selector: data
    params: {}
- name: user_card_information
  endpoint:
    path: /open/merchant/api/findUserCard
    method: POST
    data_selector: model
    params: {}
- name: findUserCardBalance
  endpoint:
    path: /open/merchant/api/findUserCardBalance
    method: POST
    data_selector: model
    params:
      cardId: required
      appId: required
      sign: optional
- name: create_card
  endpoint:
    path: /open/api/card/create
    method: POST
    data_selector: response
    params: {}
- name: API For Creating Virtual Card
  endpoint:
    path: /open/api/card/create
    method: GET
- name: API For Virtual Card Deposit
  endpoint:
    path: /open/api/card/deposit
    method: GET
- name: API For Card Refund
  endpoint:
    path: /open/api/card/withdraw/refund
    method: GET
- name: API For Deleting Card
  endpoint:
    path: /open/api/card/cancel
    method: GET
- name: card_deposit
  endpoint:
    path: /open/merchant/api/cardDeposit
    method: POST
    data_selector: model
    params:
      appId: qmamnbodyqzbdr0w
      cardId: c_48c7125626a84d3a82e1
      orderNo: test00001
      amount: '15'
      cryptoCurrency: USDT
      network: ETH
      sign: ''
- name: user_register
  endpoint:
    path: /open/api/kyc/userRegister
    method: POST
    data_selector: model
    params: {}
- name: KYC Webhook
  endpoint:
    path: /callback
    method: POST
    data_selector: response
    params: {}
- name: voucher_code
  endpoint:
    path: /voucher/code
    method: GET
    data_selector: voucher_codes
    params: {}
- name: kyc_status
  endpoint:
    path: /open/api/kyc/getKycStatus
    method: POST
    data_selector: model
- name: create_virtual_card
  endpoint:
    path: /open/api/card/create
    method: POST
    data_selector: model
    params: {}
- name: card_activation_link
  endpoint:
    path: /card/findLink
    method: GET
    data_selector: model
- name: card_create
  endpoint:
    path: /open/api/card/create
    method: POST
    data_selector: response
    params: {}
- name: virtual_card_deposit
  endpoint:
    path: /open/api/card/deposit
    method: POST
    data_selector: model
    params:
      cardId: string
      amount: string
      payCurrency: string
      orderNo: string
- name: API For Creating Virtual Card
  endpoint:
    path: /open/api/card/create
    method: GET
- name: API For Virtual Card Deposit
  endpoint:
    path: /open/api/card/deposit
    method: GET
- name: API For Card Refund
  endpoint:
    path: /open/api/card/withdraw/refund
    method: GET
- name: API For Deleting Card
  endpoint:
    path: /open/api/card/cancel
    method: GET
- name: card_refund
  endpoint:
    path: /open/api/card/withdraw/refund
    method: POST
    data_selector: model
    params:
      cardId: string
      amount: string
      orderNo: string
- name: user_register
  endpoint:
    path: /open/api/kyc/userRegister
    method: POST
    data_selector: model
- name: card_info
  endpoint:
    path: /card/info
    method: POST
    data_selector: model
    params:
      cardId: string
- name: kyc_webhook
  endpoint:
    path: /callback
    method: POST
    data_selector: response
    params: {}
- name: order_history
  endpoint:
    path: /open/api/card/trade/list
    method: POST
    data_selector: model.records
    params:
      cardId: string
      current: Integer
      size: Integer
- name: card_created
  endpoint:
    path: /api-for-querying-order-history-copy-1
    method: GET
    data_selector: data
    params: {}
- name: kyc_status
  endpoint:
    path: /open/api/kyc/getKycStatus
    method: POST
    data_selector: model
    params: {}
- name: funds
  endpoint:
    path: /funds/findFunds
    method: GET
    data_selector: ''
    params: {}
- name: create_virtual_card
  endpoint:
    path: /open/api/card/create
    method: POST
    data_selector: model
    params: {}
- name: card_activation_link
  endpoint:
    path: /card/findLink
    method: GET
    data_selector: model
    params: {}
- name: card_deposit
  endpoint:
    path: /open/api/card/deposit
    method: POST
    data_selector: model
    params:
      cardId: Y
      amount: Y
      payCurrency: Y
      orderNo: Y
- name: card_refund
  endpoint:
    path: /open/api/card/withdraw/refund
    method: POST
    data_selector: model
    params: {}
- name: virtual_card_issued
  endpoint:
    path: /api/virtual_card/issued
    method: GET
    data_selector: data
- name: virtual_card_removed
  endpoint:
    path: /api/virtual_card/removed
    method: GET
    data_selector: data
- name: recharge_data
  endpoint:
    path: /api/virtual_card/recharge
    method: GET
    data_selector: data
- name: withdrawal_data
  endpoint:
    path: /api/virtual_card/withdrawal
    method: GET
    data_selector: data
- name: account_info
  endpoint:
    path: /api/account
    method: GET
    data_selector: data
- name: card_info
  endpoint:
    path: /card/info
    method: POST
    data_selector: model
    params:
      cardId: cardId
- name: order_history
  endpoint:
    path: /open/api/card/trade/list
    method: POST
    data_selector: records
    params:
      cardId: ''
      current: ''
      size: ''
- name: card_created_successfully
  endpoint:
    path: /webhook/card_created_successfully
    method: POST
    data_selector: data
    params: {}
- name: query_user_card_information
  endpoint:
    path: /docs/query-of-user-card-information-1
    method: GET
- name: query_card_balance
  endpoint:
    path: /docs/query-of-card-balance-1
    method: GET
- name: card_deposit
  endpoint:
    path: /docs/card-deposit-interface-1
    method: POST
- name: available_funds
  endpoint:
    path: /findFunds
    method: GET
    data_selector: model
- name: user_card_information
  endpoint:
    path: /open/merchant/api/findUserCard
    method: POST
    data_selector: model
    params: {}
- name: card_balance
  endpoint:
    path: /open/merchant/api/findUserCardBalance
    method: POST
    data_selector: model
    params: {}
- name: card_deposit
  endpoint:
    path: /open/merchant/api/cardDeposit
    method: POST
    data_selector: model
    params: {}
- name: virtual_card_issued_data
  endpoint:
    path: /docs/virtual-card-issued-data
    method: GET
    data_selector: issued_cards
- name: virtual_card_removed_data
  endpoint:
    path: /docs/virtual-card-removed-data
    method: GET
    data_selector: removed_cards
- name: recharge_data
  endpoint:
    path: /docs/recharge-data
    method: GET
    data_selector: recharge_records
- name: withdrawal_data
  endpoint:
    path: /docs/withdrawal-data
    method: GET
    data_selector: withdrawal_records
- name: account_info
  endpoint:
    path: /docs/account
    method: GET
    data_selector: account_info
- name: physical_card_transaction
  endpoint:
    path: /webhook-for-physical-card-transactions
    method: POST
- name: orders
  endpoint:
    path: /webhook-for-orders
    method: POST
- name: Query User Card Information
  endpoint:
    path: /docs/query-of-user-card-information-1
    method: GET
- name: Query Card Balance
  endpoint:
    path: /docs/query-of-card-balance-1
    method: GET
- name: Card Deposit
  endpoint:
    path: /docs/card-deposit-interface-1
    method: POST
- name: Webhook Return Parameters
  endpoint:
    path: /webhook/physical-card-transactions
    method: POST
    data_selector: parameters
    params: {}
- name: order_notifications
  endpoint:
    path: /webhook-for-orders
    method: POST
    data_selector: orderData
- name: user_card_information
  endpoint:
    path: /open/merchant/api/findUserCard
    method: POST
    data_selector: model
    params: {}
- name: physical_card
  endpoint:
    path: /api/mastercard/holderQuery.html
    method: POST
- name: findUserCardBalance
  endpoint:
    path: /open/merchant/api/findUserCardBalance
    method: POST
    data_selector: model
    params:
      cardId: string
      appId: string
      sign: string
- name: cardDeposit
  endpoint:
    path: /open/merchant/api/cardDeposit
    method: POST
    data_selector: model
    params: {}
- name: holderPhotoUpload
  endpoint:
    path: /holderPhotoUpload.html
    method: POST
    data_selector: ''
    params:
      holderId: string
      photoType: integer
      photoData: string
      randomStr: string
- name: holder_query
  endpoint:
    path: /holderQuery.html
    method: POST
    data_selector: auditStatus
    params: {}
- name: physical_card_transaction
  endpoint:
    path: /webhook-for-physical-card-transactions
    method: POST
    data_selector: results
- name: order_notification
  endpoint:
    path: /webhook-for-orders
    method: POST
    data_selector: order
    params: {}
- name: bank_card_application
  endpoint:
    path: /masterCardApply.html
    method: POST
    data_selector: applyStatus
    params:
      orderNo: string
      holderId: string
      cardChannel: integer
      cardType: integer
      countryCode: string
      town: string
      address: string
      postCode: string
      contactName: string
      contactMobile: string
      randomStr: string
- name: create_cardholder
  endpoint:
    path: /api/mastercard/holderCreate.html
    method: POST
    data_selector: auditStatus
    params: {}
- name: bank_card_application_result
  endpoint:
    path: /api/mastercard/masterCardApplyQuery.html
    method: POST
    data_selector: applyStatus
    params:
      orderNo: string
      holderId: string
      randomStr: string
- name: bank_card_activation
  endpoint:
    path: /masterCardBind.html
    method: POST
    data_selector: activeStatus
    params:
      cardId: cardId
      cardNo: cardNo
      holderId: holderId
      randomStr: randomStr
- name: bank_card_top_up
  endpoint:
    path: /masterCardTopup.html
    method: POST
    data_selector: topupStatus
    params:
      orderNo: required
      amount: required
      currency: required
      randomStr: required
- name: topup_order_query
  endpoint:
    path: /api/mastercard/topupOrderQuery.html
    method: POST
    data_selector: topupStatus
    params:
      orderNo: '12345678901'
      randomStr: abcdef12345saas67890
- name: cardholder_query
  endpoint:
    path: /holderQuery.html
    method: POST
    data_selector: auditStatus
    params: {}
- name: bank_card_application
  endpoint:
    path: /api/mastercard/masterCardApply.html
    method: POST
    data_selector: applyStatus
    params:
      orderNo: string
      holderId: string
      cardChannel: integer
      cardType: integer
      countryCode: string
      town: string
      address: string
      postCode: string
      contactName: string
      contactMobile: string
      randomStr: string
- name: bank_card_transaction_details
  endpoint:
    path: /api/mastercard/masterCardTradeList.html
    method: POST
    data_selector: tradeList
    params:
      beginDate: '2023-07-01'
      endDate: '2023-07-31'
      maxSize: 10
      start: 0
      tradeStatus: ALL
      currency: EUR
- name: bank_card_application_result
  endpoint:
    path: /masterCardApplyQuery.html
    method: POST
    data_selector: applyStatus
    params:
      orderNo: string
      holderId: string
      randomStr: string
- name: bank_card_replacement
  endpoint:
    path: /changeCard.html
    method: POST
    data_selector: ''
    params:
      oldCardId: old_card123
      oldCardNo: '**** **** **** 5678'
      randomStr: abcdef1234567890
- name: bank_card_unloss
  endpoint:
    path: /api/mastercard/masterCardUnLoss.html
    method: POST
    data_selector: changeStatus
    params:
      cardId: ''
      cardNo: ''
      randomStr: required
- name: bank_card_password_retrieval
  endpoint:
    path: /masterCardRetrievePin.html
    method: POST
    data_selector: retrieveStatus
    params: {}
- name: bank_card_authorized_transaction_details
  endpoint:
    path: /masterCardAuthTradeList.html
    method: POST
    data_selector: tradeList
    params:
      beginDate: '2023-07-01'
      endDate: '2023-07-31'
      start: 0
      maxSize: 10
- name: topupOrderQuery
  endpoint:
    path: /api/mastercard/topupOrderQuery.html
    method: POST
    data_selector: topupStatus
    params:
      orderNo: string
      randomStr: string
- name: partner_account_balance
  endpoint:
    path: /queryPartnerAccount.html
    method: POST
    data_selector: accountList
    params:
      randomStr: abcdef1234567890
- name: bank_card_query
  endpoint:
    path: /masterCardQuery.html
    method: POST
    data_selector: response
    params: {}
- name: partner_topup_account_information
  endpoint:
    path: /queryTopupAccount.html
    method: POST
    data_selector: accountList
    params:
      currency: USDT
      randomStr: abcdef1234567890
- name: cardholder_audit_result_notification
  endpoint:
    path: /cardholder-audit-result-notification
    method: POST
    data_selector: parameters
    params: {}
- name: bank_card_transaction_details
  endpoint:
    path: /api/mastercard/masterCardTradeList.html
    method: POST
    data_selector: tradeList
    params:
      beginDate: '2023-07-01'
      endDate: '2023-07-31'
      maxSize: 10
      start: 0
      tradeStatus: ALL
- name: bank_card_transaction
  endpoint:
    path: /bank-card-transaction-notification
    method: POST
    data_selector: notification_parameters
    params: {}
- name: bank_card_replacement
  endpoint:
    path: /changeCard.html
    method: POST
    data_selector: response
    params:
      cardId: string
      cardNo: string
      cvv: string
      oldCardId: string
      oldCardNo: string
      randomStr: string
- name: transaction
  endpoint:
    path: /transaction
    method: GET
    data_selector: data
- name: customer
  endpoint:
    path: /customer
    method: GET
    data_selector: data
- name: shipping_status
  endpoint:
    path: /shipping-status
    method: GET
    data_selector: data
- name: bank_card_password_retrieval
  endpoint:
    path: /masterCardRetrievePin.html
    method: POST
    data_selector: retrieveStatus
    params: {}
- name: refund_order
  endpoint:
    path: /refund
    method: POST
    data_selector: refundDetails
    params: {}
- name: bank_card_authorized_transaction_details
  endpoint:
    path: /masterCardAuthTradeList.html
    method: POST
    data_selector: tradeList
    params:
      beginDate: '2023-07-01'
      endDate: '2023-07-31'
      start: 0
      maxSize: 10
- name: partner_account_balance
  endpoint:
    path: /queryPartnerAccount.html
    method: POST
    data_selector: accountList
    params:
      randomStr: abcdef1234567890
- name: topup_account
  endpoint:
    path: /api/mastercard/queryTopupAccount.html
    method: POST
    data_selector: accountList
    params:
      currency: USDT
      randomStr: abcdef1234567890
- name: create_order
  endpoint:
    path: /open/api/payment/V2
    method: POST
    data_selector: model
    params: {}
- name: create_order
  endpoint:
    path: /open/api/tg/payment/V2
    method: POST
    data_selector: model
    params: {}
- name: cardholder_audit_result
  endpoint:
    path: /cardholder-audit-result
    method: POST
    data_selector: notification_parameters
    params: {}
- name: create_order
  endpoint:
    path: /open/api/address/payment
    method: POST
- name: Bank Card Transaction Notification
  endpoint:
    path: /bank-card-transaction-notification
    method: POST
    data_selector: notification
    params: {}
- name: verify_refund_order
  endpoint:
    path: /docs/verify-refund-order
    method: GET
- name: refund_api
  endpoint:
    path: /docs/api-for-refund
    method: POST
- name: refund_order_query_api
  endpoint:
    path: /docs/query-refund-order
    method: GET
- name: webhook_for_refund_order
  endpoint:
    path: /docs/webhook-for-refund-order
    method: POST
- name: verify_refund_order
  endpoint:
    path: /checkRefund
    method: POST
    data_selector: model
    params: {}
- name: refund
  endpoint:
    path: /open/api/payment/refund
    method: POST
    data_selector: model
    params: {}
- name: refund_query
  endpoint:
    path: /refundQuery
    method: POST
    data_selector: model
    params:
      appId: appID
      merchantOrderNo: Merchant order number
      sign: Signature
- name: create_order
  endpoint:
    path: /open/api/payment/V2
    method: POST
    data_selector: model
    params: {}
- name: refund_webhook
  endpoint:
    path: /webhook/refund
    method: POST
    data_selector: notification
    params: {}
- name: create_order
  endpoint:
    path: /open/api/tg/payment/V2
    method: POST
    data_selector: model
- name: order_status
  endpoint:
    path: /webhook/order-status
    method: POST
    data_selector: notification
    params: {}
- name: order_status
  endpoint:
    path: /webhook/order-status
    method: POST
    data_selector: payload
    params: {}
- name: create_order
  endpoint:
    path: /open/api/address/payment
    method: POST
    data_selector: model
    params: {}
- name: payment_notification
  endpoint:
    path: /webhook-for-order-accumulation-mode-payment
    method: POST
    data_selector: ''
    params: {}
- name: supported_tokens
  endpoint:
    path: /supported-token-list
    method: GET
    data_selector: tokens
    params: {}
- name: verify_refund_order
  endpoint:
    path: /docs/verify-refund-order
    method: GET
- name: refund_api
  endpoint:
    path: /docs/api-for-refund
    method: POST
- name: refund_order_query_api
  endpoint:
    path: /docs/query-refund-order
    method: GET
- name: webhook_for_refund_order
  endpoint:
    path: /docs/webhook-for-refund-order
    method: POST
- name: verify_refund_order
  endpoint:
    path: /checkRefund
    method: POST
    data_selector: model
    params: {}
- name: refund
  endpoint:
    path: /open/api/payment/refund
    method: POST
    data_selector: model
    params: {}
- name: refund_query
  endpoint:
    path: /refundQuery
    method: POST
    data_selector: model
    params:
      appId: appID
      merchantOrderNo: Merchant order number
      sign: Signature
- name: user_registration
  endpoint:
    path: /open/api/user/core/register
    method: POST
    data_selector: model
- name: refund_order
  endpoint:
    path: /webhook/refund
    method: POST
    data_selector: notification
    params: {}
- name: kyc_status
  endpoint:
    path: /core/getKycStatusInfo
    method: POST
    data_selector: null
    params: {}
- name: order_status
  endpoint:
    path: /webhook/order/status
    method: POST
    data_selector: orderStatus
    params: {}
- name: order_status
  endpoint:
    path: /webhook/order-status
    method: POST
    data_selector: data
    params: {}
- name: callback_parameters
  endpoint:
    path: /webhooks/kyc/notify
    method: POST
    data_selector: callback data
    params: {}
- name: user_information
  endpoint:
    path: /queryUserInfo
    method: POST
    data_selector: model
    params:
      userNum: userNum
      merchantNo: merchantNo
      subMerchantNo: subMerchantNo
      businessSubcategories: businessSubcategories
- name: webhook_notification
  endpoint:
    path: /webhook/order_accumulation_mode_payment
    method: POST
    data_selector: notification
    params: {}
- name: user_registration
  endpoint:
    path: /open/api/user/core/register
    method: POST
    data_selector: model
- name: get_kyc_status_info
  endpoint:
    path: /getKycStatusInfo
    method: POST
    data_selector: model
    params: {}
- name: callback_parameters
  endpoint:
    path: /registration/callback
    method: POST
    data_selector: parameters
    params: {}
- name: retrieve_user_information
  endpoint:
    path: /queryUserInfo
    method: POST
    data_selector: model
    params:
      userNum: '100516923407528221713'
      merchantNo: NFT0001
      subMerchantNo: a01a123
      businessSubcategories: VSR
notes:
- Settlement default support USDT-TRX.
- AlchemyPay NFT Checkout provides a fast and secure way for web3 NFT platforms to
  enable their users to buy NFTs using credit, debit cards, and local payment methods
  from 173 countries.
- Settlement default support USDT-TRX. Please contact us for other settlement token
  or currency.
- Sandbox environment is real transaction.No KYC verification is required for amounts
  below $50. It's recommended to test with an amount not exceeding $20.
- Do NOT testing KYC in sandbox environment.
- The URL that the merchant redirects to must include the signature string.
- Sandbox environment is real transaction. No KYC verification is required for amounts
  below $50. It's recommended to test with an amount not exceeding $20.
- Applicable to the On Ramp/Off Ramp interface.
- All the parameter sent need to be signature.
- URL encoding is required when concatenating to the request URL.
- Merchants can whitelist their Egress IP (for sending notifications to ACH) in the
  merchant dashboard.
- Order timeout in 48 hours.
- Merchants can whitelist their Egress IP in the merchant dashboard.
- Token is valid for 10 days
- The environment configuration specifies whether to use the sandbox or production
  environment.
- appId&appSecret will be delivered to the partner upon request from Alchemy Pay's
  operation team.
- Please do not expose the appSecret in any API request.
- All request and response bodies should be in JSON format with the appropriate application/JSON.
- The returned payment link is valid for 24 hours.
- All requests are rate-limited. The rate limit for requests from the same IP in the
  production environment is 20 requests per second.
- This API can only be invoked on the server side.
- Requires PCI certificate to integrate.
- Require PCI certificate to integrate.
- Token for no-login access, obtained from the no-login token API is required.
- Current UTC 13-digit timestamp must be valid for 5 minutes.
- Token for no-login access, obtained from the no-login token API
- Current UTC 13-digit timestamp, valid for 5 minutes
- After user successfully paid with one credit card (payWayCode=10001), save userAccountId,
  can't request Submit form interface with the same card again.
- Using userAccountId instead of calling Submit form interface for create new order.
- The front-end page needs to obtain cookies and upload them when creating an order.
- API can only be invoked on the server side.
- If beginTime and endTime are empty, return the last 30 days of data.
- Only support query API Integration mode order.
- Merchant can query by user's email to query all the ramp orders of this user.
- expiration period is 5 minutes
- This interface can only be called on the server-side.
- 'Retry Mechanism: Webhooks are sent only once by default. Contact to configure retries.'
- Webhook retries are only supported for OnRamp.
- Some networks require the memo field to be uploaded. Please refer to the table below.
- Use the testing environment at https://ramptest.alchemypay.org before going live.
- To go live, replace the test API key with the production API key.
- When a merchant sets up an account in the production environment, they will receive
  an email with the merchant dashboard account information for logging into the merchant
  backend.
- The accuracy of the number of interfaces should not exceed 8 digits
- Perform SHA1 hash calculation on the concatenated string of appId, appSecret, and
  timestamp to generate a signature.
- Some networks require the memo field to be uploaded.
- Merchant need to transfer crypto according to parameters.
- Test environment URL is https://ramptest.alchemypay.org
- To go live, replace test API key with production API key and update the base URL.
- The appId, timestamp, and sign headers are mandatory.
- Merchants can send user information to ACH via API, allowing users to skip the KYC
  process on the front end and thereby improve the user experience.
- Before integration, approval from ACH’s compliance team is required.
- 'Supported format for ID and face photos: jpg, jpeg, png'
- 'Supported format for aml/idv reports: pdf'
- All types must be uploaded (except idBack)
- Request timestamp must be valid within 5 minutes.
- After user payment, AlchemyPay will send webhook including user's payment information.
- Current UTC 13-digit timestamp, valid within 5 minutes
- Expiration period for timestamp is 5 minutes.
- Merchants can send user information to ACH via API, allowing users to skip the KYC
  process on the front end and thereby improve the user experience. Approval from
  ACH’s compliance team is required.
- No merchant dashboard in sandbox environment is provided.
- Request must include unique request number, email, and KYC platform.
- Partner is redirected to Alchemy Pay's NFT checkout page.
- Request parameters include appId, timestamp, sign, and requestNo.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Only for merchants integrated with Sumsub
- Please test Sumsub share token api in production environment
- Order will be timeout in 15 minutes.
- All requests must carry appid, timestamp and sign.
- The difference between the requested timestamp and the current time cannot exceed
  5 minutes, otherwise the request will not be accepted.
- Updated 4 months ago
- The appId is used to identify the partner, while appSecret is for signature purposes.
- Unique identifier for the application is required in the header.
- Current UTC 13-digit timestamp is required and valid for 5 minutes.
- Signature is required in the header.
- Requires appId and appSecret for signing
- Partner unique ID is provided after onboarding with Alchemy Pay.
- timestamp must be in UTC with 13 digits representing milliseconds.
- Merchants must return a success response; otherwise, the system will retry the callback
  every 5 minutes, up to a total of 3 attempts.
- Merchants are required to verify the signature of the webhook parameters.
- The difference between the requested timestamp and the current time cannot exceed
  5 minutes.
- AccessToken from Fetch Token API is required
- Partner unique ID is provided after merchant onboarding
- Timestamp must be in UTC with 13 digits
- Sign is calculated using SHA1(appId + appSecret + timestamp)
- Response includes payment methods and their details.
- Use testing environment at https://ramptest.alchemypay.org before going live
- Update integration from testing to production by replacing the test API key with
  the production API key
- The page integration method requires Domain Customization.
- 'Brand Logo: N (80~300) x 80, within 100k size limit.'
- 'Card Design (default design will be used if not specified): 686x386, within 300k
  size limit.'
- Merchants must return a success response upon receiving the webhook.
- Integration method requires customizing your own domain for access.
- Currently, the secret (secrete) is obtained through offline methods or the merchant
  management platform.
- The secret is used to digest and sign the input parameters for API requests.
- appId and appSecret are provided after merchant onboarding
- timestamp should be in UTC time with 13 digits
- To go live, you only need to update your integration from the testing environment
  to the production environment.
- Replace the test API key with the production API key.
- Currently, the secret is obtained through offline methods or the merchant management
  platform.
- 'Secret: The secret is used to digest and sign the input parameters for API requests.'
- Query user card information (only return card of normal status)
- Quick Page Integration requires users to undergo email verification.
- This integration method requires customizing your own domain for access.
- For more error codes, please refer to the error code description on the homepage.
- The currency and network used for the transfer must match the order; otherwise,
  it may fail.
- A voucher code cannot be used for both physical and virtual cards.
- Voucher code cannot be reused once used.
- Each coupon code can only be used once.
- Secret should be kept by the merchant themselves, and it is essential to ensure
  strict security measures to prevent its disclosure to external parties.
- Only return card of normal status
- To ensure security, a reverse validation process is required for each transaction
  operation.
- IP identification is required for each operation.
- The request header 'ach-access-sign' is generated by encrypting the concatenation
  of timestamp + method + requestPath + body using the HMAC SHA256 method with a SecretKey.
- Both the secretKey and apiKey are case-sensitive.
- Signature indicates whether the parameter needs to be included in the signature
  calculation.
- Prior to testing or going live, merchants need to provide reverse verification addresses
  for the four interfaces mentioned above. Otherwise, testing or going live will not
  be possible.
- If the order amount is less than the payment amount, the payment will be made according
  to the order amount, and the transaction fee will be calculated based on the order
  fee. If the order amount is greater than the payment amount, the recharge will be
  made according to the payment amount, and transaction fee still based on the order
  fee.
- Supported networks and currencies are TRX-USDT, BSC-USDT, ETH-USDT, SOL-USDT, TRX-USDC,
  BSC-USDC, ETH-USDC.
- KYC user registration requires redirectUrl and callbackUrl in the body.
- Response HTTP code 200 for success or ACH will retry
- A voucher code cannot be reused once used.
- Merchants need to apply for a testing account.
- Tokens used in the test environment are real and require recharging.
- For more error codes, please see the error code description on the homepage
- The resulting signature is encoded in Base64 format.
- Recharge amount, 1000 represents $10.00
- Fixed value for payCurrency is USD
- After receiving a request from Alchemy Pay, the merchant must correctly return the
  signature in order to proceed with the next steps.
- At least 1 USD must be retained in the card
- For more error codes, please see the error code description on the home page
- Response HTTP code 200 for success or ACH will retry.
- KYC user registration status query
- Get available funds.
- Card activation link valid for 24 hours
- Integration of the physical card page is a quick and simple way for merchants to
  integrate, without requiring backend development.
- Card Balance Query
- When merchant sets up an account in the production environment, will receive an
  email with the merchant dashboard account information for login.
- One account login for both Physical Card and Virtual Card.
- Card production process must be completed before enabling.
- Pre-loading of card quantity is required.
- Merchants can contact staff to configure webhook url as needed.
- All required field values participate in the signature calculation (excluding 'sign').
- Contact us to configure your Webhook Endpoint URL in the backend. The URL must be
  HTTPS.
- When the order status changes, push the corresponding order message to your Webhook
  Endpoint URL.
- Upon receiving the Webhook message, if you return HTTP CODE 200, it indicates successful
  reception.
- Please contact the staff to configure your Webhook Endpoint Url. The Url must be
  HTTPS.
- When the order status changes, corresponding order messages will be pushed to your
  Webhook Endpoint Url.
- Upon receiving the Webhook message, if you return HTTP CODE 200, it means you have
  successfully received it.
- Merchants need to handle token deposits themselves.
- Success response includes currency, balance, and topUpBalance.
- Failure response includes error code and message.
- 'Status: 0 - Pending review, 1 - Under review, 2 - Approved, 3 - Rejected.'
- If the order amount is less than the payment amount, the payment will be made according
  to the order amount, and the transaction fee will be calculated based on the order
  fee.
- If the order amount is greater than the payment amount, the recharge will be made
  according to the payment amount, and transaction fee still based on the order fee.
- 'Document upload status: 1 - Upload successful, 2 - Upload failed'
- 'Cardholder query: Audit status - 0 Pending review, 1 Under review, 2 Approved,
  3 Rejected, 4 Data to be completed'
- Shipping address, country code (two-letter country code) is required.
- A random string of 32 characters is required.
- 'Application status: 1. Order completed. 2. Waiting for shipment.'
- Either cardId or cardNo must be provided
- A random string of 32 characters is required
- Maximum 30 records, default 10. Start is the starting line number, starting from
  0 by default.
- cardId or cardNo must be filled in at least.
- Either cardId or cardNo must be filled in at least
- 32-digit random string is required
- At least one of card token and card number is required.
- Order number and random string are required in the request body.
- Request must include parameters like holderId, auditStatus, errMsg, mobile, lastName,
  firstName, idnoType, and idno.
- Maximum 30 records, default 10
- Start is the starting line number, starting from 0 by default
- Notification requires specific parameters as described
- Default option includes all supported tokens
- User returns to the merchant's designated default page in any case
- The secret key used to generate a signature for API request input parameters should
  be securely maintained by the merchant.
- MUST Keep the `orderNo` from response, it uniquely identifies for order query.
- MUST Keep the `orderNo` from response, it is uniquely identifies for order query.
- Request method is POST
- Parameters include cardId, cardNo, currency, amount, fee, currencyTxn, txnAmount,
  businessDate, tradeId, authCode, tradeType, tradeSrc, tradeStatus, remark
- It is recommended that merchants verify if an order is eligible for a refund before
  processing it, to avoid duplicate refunds or order in non-refundable statuses.
- Contact business team to obtain appid and secret for production environment.
- Integrate with test environment first.
- Merchants can use this API to check the refund status of an order.
- Notifications may be sent multiple times, so the merchant must be able to handle
  duplicate notifications correctly.
- If the merchant’s HTTP response does not equal 200 and the response does not include
  'success,' the notification is considered failed, triggering a retry.
- This interface can be used when accessing Crypto Payment on telegram.
- Merchant must verify the signature of the payment result notification.
- Fields with values of null or "" are not included in the signature.
- Merchant must handle duplicate notifications correctly.
- Merchant's HTTP response code needs to be `200` or response content must include
  `success`.
- Merchant's HTTP response code needs to be 200 or response content must include success.
- Merchant system must verify the signature of the payment result notification.
- 'Minimum refund amount: Equivalent to 1 USD.'
- Only the gas fee is deducted for refunds, with no additional fees.
- It should be noted that the sorting of data in lists during transmission should
  ideally not have any relevance to the transmitted content.
- If the email field is filled out, ACH will send a refund notification email to the
  user after the refund is processed.
- Fields that are empty (null or '') are not included in the signature.
- Merchant's HTTP response code needs to be 200 or response content include success.
- The same notification may be sent to the merchant multiple times, and the merchant
  must be able to handle duplicate notifications correctly.
- For orders within 10 minutes, a request is made every 10 seconds; for orders within
  1 hour, a request is made every 5 minutes; for orders within 48 hours, a request
  is made every hour.
- Merchant's HTTP response code needs to be 200 or the response content include success.
- This api is used to summit user registration.
- This API is used to query user KYC status.
- The same notification may be sent to the merchant multiple times.
errors:
- 'Invalid parameters: Check the request parameters for correctness.'
- 'Unauthorized: Check your appId and signature.'
- '3108: Missing Parameter - Must send one of the parameters'
- '3108: Missing Parameter'
- Rate limit for requests from the same IP in the production environment is 20 requests
  per second.
- Error returned is a JSON object with a code property describing the problem.
- '3103: Please refresh timestamp'
- 'Unauthorized: Check access token or app ID'
- 'Invalid access-token: Check if token is correct'
- '400 Bad Request: Check required parameters'
- '401 Unauthorized: Recheck access-token'
- 'Invalid access-token: Check the token validity'
- 'Missing required parameters: Ensure all mandatory fields are filled'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '3100: Please contact with our team to configure commission'
- '3101: Please contact with our team to configure crypto'
- '3102: Quote amount is out of the range, The Min purchase amount is XX, The max
  purchase amount is XX'
- '81010: Merchant parameter error'
- '81012: crypto is not supported'
- '81013: crypto and network do not match'
- '81016: fiat not match'
- '3102: Quote amount is out of the range'
- '0000: SUCCESS'
- Other error codes may apply
- '3102: Quote amount is out of the range, The Min purchase amount is %s, The max
  purchase amount is %s'
- '3104: Please contact with our team to create account'
- '3105: Invalid Crypto Address'
- '3106: Your current withdrawal address is at risk, please check or change to another
  one'
- '3107: Illegal request path'
- '3108: The decimal places of the fiat amount are not correct.'
- '10001: Access denied. Please log in.'
- '10005: Invalid Request Parameters'
- '10010: Invalid data.'
- '60005: Limited Payment Amount'
- '70008: Illegal requests'
- '70009: token expired'
- '70010: ip not permitted'
- '70012: For regulatory reasons, users in this country are currently unable to use
  this service.'
- '81003: Invalid Merchant Sign'
- '99999: An error has occurred. Please try again later.'
- '1: create order success'
- '2: user transferred token'
- '3: start to pay fiat to user'
- '4: payment success'
- '5: payment fail'
- '6: refund success'
- '7: order expired'
- 'Invalid memo format: Check memo regex for the respective network.'
- '9999: Invalid request'
- '0000: success'
- '9999: failure'
- Refer to the error code description on the homepage for more error codes.
- '0: Operation successful'
- '1: Error occurred'
- 'returnCode: 0000 - success'
- 'returnCode: 9999 - failure'
- Other error codes available in the error code description on the homepage
- Refer to the error code description on the homepage for more error codes
- Other error codes can be found on the home page.
- 'Non-zero: Refer to error code description on the homepage.'
- 'Invalid appId: Check if the appId is correct.'
- 'Timestamp expired: Ensure the timestamp is valid.'
- 'Invalid signature: Verify the signature calculation.'
- 'PAY_SUCCESS: fiat payment succeed'
- 'PAY_FAIL: fiat payment fail'
- 'TIME_OUT: time out'
- '10005: Invalid Request Parameters.'
- 'RETURN_CODE: 0000 indicates success.'
- 'RETURN_CODE: Other codes indicate failure.'
- '1006: Signature error'
- '0: Success'
- '1: System Exception'
- '1002: Parameter Validation Error'
- '1006: Signature Verification Failed'
- 'Invalid access-token: Recheck the token'
- 'Invalid appId: Ensure correct partner ID'
- 'Request timeout: Ensure timely request within 5 minutes'
- '2606: user does not exist'
- '1002: User card information does not exist'
- '1: System exception'
- '1002: Parameter validation error'
- '2601: Merchant does not exist'
- '2604: Signature verification failed'
- '2606: User does not exist'
- '2638: Failed to retrieve merchant configuration'
- '2642: Network not supported'
- '2646: Minimum amount validation failed. Minimum amount: %s Current amount: %s'
- '2647: Monthly limit validation failed. Monthly limit: %s Current: %s'
- '2648: Card not created'
- '2654: User card information does not exist'
- '2673: Physical card daily limit: %s EUR'
- '2674: Maximum balance for physical card: %s EUR'
- '2712: Physical card issuer maintenance'
- '2720: Unsupported currency'
- '2722: Duplicate order number'
- '2723: Incorrect order amount'
- '2724: Card status abnormal'
- '0: SUCCESS'
- '1: ERROR'
- KYC was submitted but rejected by the compliance department.
- '1: Fail'
- '100000: Card issuer error'
- '200001: Parameter verification: ''% s'' cannot be null'
- '200002: Parameter verification: ''% s'' parameter error% s'
- '200003: the content must be application/json，[ %s ]'
- '200004: Request parameter format error requires JSON:% s'
- '200005: Ach access timestamp is not within the validity period (1 minute)'
- '200006: signature error'
- '200007: IP illegal'
- '200008: Reverse verification failed'
- '200009: Counter verification signature error'
- '300001: Duplicate business order number'
- '300002: Merchant information does not exist'
- '300003: Single amount limit'
- '300004: Insufficient balance, minimum reserve 1$'
- '300005: Card exception'
- '300006: Not meeting purchase conditions'
- '400000: Parameter abnormality'
- '400004: Open API status is abnormal'
- '400005: Illegal amount'
- '400006: Abnormal address length'
- '404005: Card does not exist'
- '400007: Currency error'
- '403009: User and card mismatch'
- '403010: Card status is abnormal'
- '403101: Insufficient account amount'
- '500000: System abnormality'
- '600000: user does not exist'
- '600001: email incomplete KYC'
- '600002: create card error'
- '600003: Card already applied, please do not make duplicate requests'
- '600004: recharge error'
- '600005: refund error'
- '600006: card need active'
- '600010: kyc finish'
- '600011: Decryption failed'
- '600012: User not registered'
- '600013: mint user nft fail'
- '600015: Authorization error'
- '600016: Activation of the card failed'
- '200003: the content must be application/json，[%s]'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '1002: User card information does not exist.'
- '200 Response: Status description'
- For more error codes, please refer to the error code description on the homepage.
- 'applyStatus: 1 - Success, 2 - Failure'
- '400 Bad Request: Check request parameters'
- '404 Not Found: Verify endpoint URL'
- '500 Internal Server Error: Try again later'
- '200: Activation successful, 1: Success, 2: Failure'
- '400 Bad Request: Check required fields and parameters.'
- '401 Unauthorized: Invalid authentication credentials.'
- '404 Not Found: Endpoint does not exist.'
- '200 Response: Success or Failure with changeStatus'
- '200 Response: Activation successful, 1: Success, 2: Failure'
- '200 Response: Indicates success or failure based on retrieveStatus.'
- '400 Bad Request: Verify required fields are included in the request.'
- '200 Response: Change status can indicate success or failure'
- '200 Response: Indicates success or failure of retrieval'
- 'lower_amount: Sending amount lower than order amount, order failed'
- 'currency_fluctuation: When the merchant has set payment slippage, the difference
  in the floating exchange rate of the payment token is greater than the payment slippage,
  causing the payment amount to be less than the order amount, an automatic refund
  will be triggered'
- 'wrong_payment: User send crypto with different crypto or network'
- 'Error withdraw limit: front number: minimum amount of this refund token and network
  second number: minimum amount of this order refund'
- 'code: ''0'', msg: ''success'''
- 'error: false'
- 'COMPLETED: Refund succeeded'
- 'FAILED: Refund failed'
- '1: Error'
- '400 Bad Request: The request is invalid or malformed.'
- '401 Unauthorized: The request has not been applied because it lacks valid authentication
  credentials for the target resource.'
- '500 Internal Server Error: An unexpected condition was encountered.'
- 'Payment success: COMPLETED'
- 'Payment cancel: TIMEOUT'
- 'Payment failure: FAILED'
- Handle duplicate notifications.
- Verify signature to prevent false notifications.
- '1: Payment exception'
- '8000: Parameter validation error'
- '8003: content-type must be application/json'
- '8004: Request parameter format error, must be JSON'
- '8007: Signature error'
- '8011: Duplicate payment order number'
- '8012: Invalid IP address'
- '8013: Unsupported currency'
- '8029: Merchant payment order number does not exist'
- '8031: Order exception: No payment record'
- '8033: Duplicate application not allowed'
- '8034: Duplicate refund order number'
- '8035: Already reached settlement account'
- '8036: User is currently applying for a refund'
- '8037: Current amount %S, minimum refund amount must be greater than 1 USD'
- 'Error withdraw limit: front number:minimum amount of this refund token and network
  second number:minimum amount of this order refund'
- '0: success'
- '1: failure'
- '1: Failure'
- '3000: Parameter validation: ''%s'' cannot be null'
- '4001: Unsupported file format'
- '4002: File size exceeds 5MB'
- '4003: File upload error'
- '4004: Invalid parameter'
- '4005: Duplicate request number'
- '4006: Request number not found'
- '4007: Document type mismatch'
- '4008: Failed to submit for review'
- '4009: Incomplete information/file upload'
- '4010: Duplicate email'
- '4011: SSN cannot be empty'
- '4012: Order has already been reviewed'
- '200002: Parameter validation: ''%s'' parameter error %s'
- '200005: ach-access-timestamp is not valid (1 minute)'
- '200006: Signature failure'
- '200007: Merchant does not exist, please retry after confirmation'
- Other error codes may be present in response
- '200: Successful response required'
- 'Signature verification failed: Check the signature of the notification'
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Verify the authentication credentials.'
- '500 Internal Server Error: Contact support if the issue persists.'
- Handle duplicate notifications correctly.
- If the notification has been processed, return a successful response directly.
- '2002: User registered'
- '2003: User not registered'
auth_info:
  mentioned_objects:
  - appId
  - appSecret
client:
  base_url: /api/mastercard
  resources:
  - name: Create Cardholder
    endpoint:
      path: /holderCreate.html
      method: POST
      data_selector: response
      params: {}
source_metadata: null
