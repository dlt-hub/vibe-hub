resources:
- name: agent
  endpoint:
    path: to_cli_sync
    method: None
    data_selector: None
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /agent/run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /agent/run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: StreamedRunResult
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: AgentStreamEvent | AgentRunResultEvent
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: GET
- name: next_node
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: result
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: usage
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: all_messages
  endpoint:
    path: all_messages
    method: GET
    data_selector: list[ModelMessage]
    params: {}
- name: all_messages_json
  endpoint:
    path: all_messages_json
    method: GET
    data_selector: bytes
    params: {}
- name: new_messages
  endpoint:
    path: new_messages
    method: GET
    data_selector: list[ModelMessage]
    params: {}
- name: new_messages_json
  endpoint:
    path: new_messages_json
    method: GET
    data_selector: bytes
    params: {}
- name: response
  endpoint:
    path: response
    method: GET
    data_selector: ModelResponse
    params: {}
- name: usage
  endpoint:
    path: usage
    method: GET
    data_selector: RunUsage
    params: {}
- name: timestamp
  endpoint:
    path: timestamp
    method: GET
    data_selector: datetime
    params: {}
- name: pydantic_ai
  endpoint:
    path: /api/pydantic_ai
    method: GET
- name: pydantic_evals
  endpoint:
    path: /api/pydantic_evals
    method: GET
- name: pydantic_graph
  endpoint:
    path: /api/pydantic_graph
    method: GET
- name: agent
  endpoint:
    path: /pydantic_ai/agent
    method: GET
    data_selector: agents
    params: {}
- name: model
  endpoint:
    path: /pydantic_ai/models
    method: GET
    data_selector: models
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: POST
    data_selector: result
    params: {}
- name: get_historic_weather
  endpoint:
    path: /get_historic_weather
    method: POST
    data_selector: result
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params:
      location: Paris
      forecast_date: '2030-01-01'
- name: joke_material
  endpoint:
    path: https://example.com#jokes
    method: GET
    params:
      subject: subject
- name: validate_output
  endpoint:
    path: https://example.com#validate
    method: POST
    params:
      query: output
- name: dice_game
  endpoint:
    path: /api/dice_game
    method: GET
    data_selector: output
    params: {}
- name: foobar
  endpoint:
    path: /agent/tool_plain
    method: GET
    data_selector: parameters_json_schema
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: all_messages
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: messages
- name: results
  endpoint:
    path: /api/results
    method: GET
    data_selector: results
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: records
    params: {}
- name: ModelRequest
  endpoint:
    path: /api/messages/ModelRequest
    method: GET
    data_selector: parts
    params: {}
- name: ModelResponse
  endpoint:
    path: /api/messages/ModelResponse
    method: GET
    data_selector: parts
    params: {}
- name: direct_model_requests
  endpoint:
    path: /direct/model_requests
    method: POST
    data_selector: model_response
    params: {}
- name: OpenAI
  endpoint:
    path: /openai
    method: GET
- name: Anthropic
  endpoint:
    path: /anthropic
    method: GET
- name: Gemini
  endpoint:
    path: /google
    method: GET
- name: Groq
  endpoint:
    path: /groq
    method: GET
- name: Mistral
  endpoint:
    path: /mistral
    method: GET
- name: Cohere
  endpoint:
    path: /cohere
    method: GET
- name: Bedrock
  endpoint:
    path: /bedrock
    method: GET
- name: Hugging Face
  endpoint:
    path: /huggingface
    method: GET
- name: OpenAIChatModel
  endpoint:
    path: /openai/chat
    method: POST
    data_selector: response
    params: {}
- name: AnthropicModel
  endpoint:
    path: /anthropic/chat
    method: POST
    data_selector: response
    params: {}
- name: FallbackModel
  endpoint:
    path: /fallback/chat
    method: POST
    data_selector: response
    params: {}
- name: GoogleModel
  endpoint:
    path: /generativelanguage.googleapis.com
    method: GET
- name: Vertex AI
  endpoint:
    path: /*-aiplatform.googleapis.com
    method: GET
- name: FunctionToolset
  endpoint:
    path: /api/toolsets/FunctionToolset
    method: GET
    data_selector: records
- name: CombinedToolset
  endpoint:
    path: /api/toolsets/CombinedToolset
    method: GET
    data_selector: records
- name: FilteredToolset
  endpoint:
    path: /api/toolsets/FilteredToolset
    method: GET
    data_selector: records
- name: CombinedToolset
  endpoint:
    path: /api/toolsets/CombinedToolset
    method: GET
- name: RenamedToolset
  endpoint:
    path: /api/toolsets/RenamedToolset
    method: GET
- name: PreparedToolset
  endpoint:
    path: /api/toolsets/PreparedToolset
    method: GET
- name: ApprovalRequiredToolset
  endpoint:
    path: /api/toolsets/ApprovalRequiredToolset
    method: GET
- name: WrapperToolset
  endpoint:
    path: /api/toolsets/WrapperToolset
    method: GET
- name: ExternalToolset
  endpoint:
    path: /api/toolsets/ExternalToolset
    method: GET
- name: DynamicToolset
  endpoint:
    path: /api/toolsets/DynamicToolset
    method: GET
- name: CustomToolset
  endpoint:
    path: /api/toolsets/CustomToolset
    method: GET
- name: weather_temperature_celsius
  endpoint:
    path: /api/weather/temperature/celsius
    method: GET
    data_selector: temperature
    params: {}
- name: weather_temperature_fahrenheit
  endpoint:
    path: /api/weather/temperature/fahrenheit
    method: GET
    data_selector: temperature
    params: {}
- name: weather_conditions
  endpoint:
    path: /api/weather/conditions
    method: GET
    data_selector: conditions
    params: {}
- name: datetime_now
  endpoint:
    path: /api/datetime/now
    method: GET
    data_selector: current_time
    params: {}
- name: WebSearchTool
  endpoint:
    path: /api/builtin_tools/#pydantic_ai.builtin_tools.WebSearchTool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /api/builtin_tools/#pydantic_ai.builtin_tools.CodeExecutionTool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /api/builtin_tools/#pydantic_ai.builtin_tools.ImageGenerationTool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /api/builtin_tools/#pydantic_ai.builtin_tools.UrlContextTool
    method: GET
- name: MemoryTool
  endpoint:
    path: /api/builtin_tools/#pydantic_ai.builtin_tools.MemoryTool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /api/builtin_tools/#pydantic_ai.builtin_tools.MCPServerTool
    method: GET
- name: github
  endpoint:
    path: /mcp/
    method: GET
    data_selector: records
    params: {}
- name: google-calendar
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
    data_selector: records
    params: {}
- name: image_input
  endpoint:
    path: /api/messages/ImageUrl
    method: GET
    data_selector: output
    params: {}
- name: audio_input
  endpoint:
    path: /api/messages/AudioUrl
    method: GET
    data_selector: output
    params: {}
- name: video_input
  endpoint:
    path: /api/messages/VideoUrl
    method: GET
    data_selector: output
    params: {}
- name: document_input
  endpoint:
    path: /api/messages/DocumentUrl
    method: GET
    data_selector: output
    params: {}
- name: OpenAI
  endpoint:
    path: /api/models/openai
    method: GET
    data_selector: models
    params: {}
- name: Anthropic
  endpoint:
    path: /api/models/anthropic
    method: GET
    data_selector: models
    params: {}
- name: Google
  endpoint:
    path: /api/models/google
    method: GET
    data_selector: models
    params: {}
- name: Bedrock
  endpoint:
    path: /api/models/bedrock
    method: GET
    data_selector: models
    params: {}
- name: Groq
  endpoint:
    path: /api/models/groq
    method: GET
    data_selector: models
    params: {}
- name: Mistral
  endpoint:
    path: /api/models/mistral
    method: GET
    data_selector: models
    params: {}
- name: Cohere
  endpoint:
    path: /api/models/cohere
    method: GET
    data_selector: models
    params: {}
- name: Hugging Face
  endpoint:
    path: /api/models/huggingface
    method: GET
    data_selector: models
    params: {}
- name: mcpServers
  endpoint:
    path: /mcp_config.json
    method: GET
    data_selector: mcpServers
    params: {}
- name: echo_deps
  endpoint:
    path: /echo_deps
    method: POST
    data_selector: echo_deps
- name: book_table
  endpoint:
    path: /book_table
    method: POST
    data_selector: booking_details
- name: calculator
  endpoint:
    path: /mcp
    method: GET
- name: weather-api
  endpoint:
    path: /sse
    method: GET
- name: python-runner
  endpoint:
    path: /stdio
    method: GET
- name: echo_deps
  endpoint:
    path: /echo_deps
    method: POST
    data_selector: echo_deps
- name: book_table
  endpoint:
    path: /book_table
    method: POST
    data_selector: booking
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: POST
    data_selector: results
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: POST
    data_selector: parts
    params: {}
- name: Dataset
  endpoint:
    path: /api/pydantic_evals/dataset/
    method: GET
    data_selector: cases
    params: {}
- name: Case
  endpoint:
    path: /api/pydantic_evals/dataset/case/
    method: GET
    data_selector: inputs
    params: {}
- name: Evaluator
  endpoint:
    path: /api/pydantic_evals/evaluators/
    method: GET
    data_selector: evaluators
    params: {}
- name: Experiment
  endpoint:
    path: /api/pydantic_evals/experiment/
    method: POST
    data_selector: report
    params: {}
- name: Dataset
  endpoint:
    path: /api/pydantic_evals/dataset/
    method: GET
    data_selector: records
    params: {}
- name: Case
  endpoint:
    path: /api/pydantic_evals/case/
    method: GET
    data_selector: records
    params: {}
- name: Evaluator
  endpoint:
    path: /api/pydantic_evals/evaluators/
    method: GET
    data_selector: records
    params: {}
- name: EvaluationReport
  endpoint:
    path: /api/pydantic_evals/reporting/
    method: GET
    data_selector: records
    params: {}
- name: dataset
  endpoint:
    path: /api/pydantic_evals/dataset/
    method: GET
    data_selector: records
- name: case
  endpoint:
    path: /api/pydantic_evals/case/
    method: GET
    data_selector: records
- name: evaluator
  endpoint:
    path: /api/pydantic_evals/evaluators/
    method: GET
    data_selector: records
- name: evaluation_report
  endpoint:
    path: /api/pydantic_evals/reporting/
    method: GET
    data_selector: records
- name: Case
  endpoint:
    path: /pydantic_evals/cases
    method: GET
    data_selector: cases
- name: Evaluator
  endpoint:
    path: /pydantic_evals/evaluators
    method: GET
    data_selector: evaluators
- name: Dataset
  endpoint:
    path: /api/pydantic_evals/dataset/
    method: GET
    data_selector: records
    params: {}
- name: Case
  endpoint:
    path: /api/pydantic_evals/dataset/case/
    method: GET
    data_selector: records
    params: {}
- name: Evaluator
  endpoint:
    path: /api/pydantic_evals/evaluators/
    method: GET
    data_selector: records
    params: {}
- name: EvaluationReport
  endpoint:
    path: /api/pydantic_evals/reporting/
    method: GET
    data_selector: records
    params: {}
- name: Case
  endpoint:
    path: /pydantic_evals/Case
    method: GET
    data_selector: cases
    params: {}
- name: Evaluator
  endpoint:
    path: /pydantic_evals/Evaluator
    method: GET
    data_selector: evaluators
    params: {}
- name: EvaluationReport
  endpoint:
    path: /pydantic_evals/EvaluationReport
    method: GET
    data_selector: reports
    params: {}
- name: OpenTelemetry
  endpoint:
    path: /api/otel
    method: POST
    data_selector: data
    params: {}
- name: prefect_agent
  endpoint:
    path: /api/durable_exec/prefect
    method: POST
    data_selector: result
- name: run_agent
  endpoint:
    path: /
    method: POST
    data_selector: event_stream
- name: latlng
  endpoint:
    path: /latlng
    method: GET
    data_selector: LatLng
    params: {}
- name: weather
  endpoint:
    path: /weather
    method: GET
    data_selector: weather
    params: {}
- name: number
  endpoint:
    path: /number
    method: GET
    data_selector: number
    params:
      min: 10
      max: 30
- name: messages
  endpoint:
    path: /chat/
    method: POST
    data_selector: messages
- name: data_analyst_example
  endpoint:
    path: /pydantic_ai_examples/data_analyst
    method: GET
    data_selector: output
    params: {}
- name: whales
  endpoint:
    path: /whales
    method: GET
    data_selector: output
- name: flight_details
  endpoint:
    path: /flight_details
    method: GET
    data_selector: flights
    params: {}
- name: chat_postMessage
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: ok
    params: {}
- name: generate_task_steps
  endpoint:
    path: /generate_task_steps
    method: POST
    data_selector: steps
    params: {}
- name: write_document
  endpoint:
    path: /write_document
    method: POST
    data_selector: document
    params: {}
- name: document_predict_state
  endpoint:
    path: /document_predict_state
    method: POST
    data_selector: event
    params: {}
- name: shared_state
  endpoint:
    path: /pydantic-ai/feature/shared_state
    method: GET
    data_selector: snapshot
    params: {}
- name: tool_based_generative_ui
  endpoint:
    path: /pydantic-ai/feature/tool_based_generative_ui
    method: GET
    data_selector: tool_output
    params: {}
- name: run_agent
  endpoint:
    path: /
    method: POST
- name: ToolDefinition
  endpoint:
    path: /dataclass
    method: GET
    data_selector: records
    params: {}
- name: RunContext
  endpoint:
    path: /dataclass
    method: GET
    data_selector: records
    params: {}
- name: Tool
  endpoint:
    path: /dataclass
    method: GET
    data_selector: function
    params: {}
- name: tool
  endpoint:
    path: /tools
    method: POST
- name: ToolDefinition
  endpoint:
    path: /pydantic_ai/tools.py
    method: GET
    data_selector: properties
    params: {}
- name: PrefixedToolset
  endpoint:
    path: /pydantic_ai/toolsets/prefixed
    method: GET
    data_selector: records
    params: {}
- name: RenamedToolset
  endpoint:
    path: /pydantic_ai/toolsets/renamed
    method: GET
    data_selector: records
    params: {}
- name: PreparedToolset
  endpoint:
    path: /pydantic_ai/toolsets/prepared
    method: GET
    data_selector: records
    params: {}
- name: WrapperToolset
  endpoint:
    path: /pydantic_ai/toolsets/wrapper
    method: GET
    data_selector: records
    params: {}
- name: AbstractBuiltinTool
  endpoint:
    path: /pydantic_ai/builtin_tools/AbstractBuiltinTool
    method: GET
    data_selector: records
    params: {}
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
    data_selector: records
    params: {}
- name: WebSearchUserLocation
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchUserLocation
    method: GET
    data_selector: records
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
    data_selector: records
    params: {}
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
    data_selector: records
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
    data_selector: records
    params: {}
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
    data_selector: records
    params: {}
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
    data_selector: records
    params: {}
- name: duckduckgo_search_tool
  endpoint:
    path: /pydantic_ai/common_tools/duckduckgo
    method: GET
    data_selector: results
    params:
      max_results: null
- name: tavily_search_tool
  endpoint:
    path: /pydantic_ai/common_tools/tavily
    method: GET
    data_selector: results
    params:
      api_key: required
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
    params: {}
- name: PrefectAgent
  endpoint:
    path: /api/prefect_agent
    method: GET
    data_selector: records
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
- name: ToolOutput
  endpoint:
    path: /pydantic_ai/output
    method: GET
    data_selector: output
    params: {}
- name: NativeOutput
  endpoint:
    path: /pydantic_ai/NativeOutput
    method: GET
- name: PromptedOutput
  endpoint:
    path: /pydantic_ai/PromptedOutput
    method: GET
- name: TextOutput
  endpoint:
    path: /pydantic_ai/TextOutput
    method: GET
- name: StructuredDict
  endpoint:
    path: /pydantic_ai/StructuredDict
    method: GET
- name: DeferredToolRequests
  endpoint:
    path: /pydantic_ai/DeferredToolRequests
    method: GET
- name: SystemPromptPart
  endpoint:
    path: SystemPromptPart
    method: GET
    data_selector: content
    params: {}
- name: FileUrl
  endpoint:
    path: FileUrl
    method: GET
    data_selector: url
    params: {}
- name: VideoUrl
  endpoint:
    path: VideoUrl
    method: GET
    data_selector: url
    params: {}
- name: AudioUrl
  endpoint:
    path: AudioUrl
    method: GET
    data_selector: url
    params: {}
- name: ImageUrl
  endpoint:
    path: ImageUrl
    method: GET
    data_selector: url
    params: {}
- name: BaseToolReturnPart
  endpoint:
    path: /BaseToolReturnPart
    method: GET
    data_selector: content
- name: ToolReturnPart
  endpoint:
    path: /ToolReturnPart
    method: GET
    data_selector: content
- name: BuiltinToolReturnPart
  endpoint:
    path: /BuiltinToolReturnPart
    method: GET
    data_selector: content
- name: RetryPromptPart
  endpoint:
    path: /RetryPromptPart
    method: GET
    data_selector: content
- name: ModelRequest
  endpoint:
    path: /ModelRequest
    method: GET
    data_selector: parts
- name: TextPart
  endpoint:
    path: /TextPart
    method: GET
    data_selector: content
- name: thinking_part
  endpoint:
    path: /pydantic_ai/messages/thinking_part
    method: GET
    data_selector: content
    params: {}
- name: file_part
  endpoint:
    path: /pydantic_ai/messages/file_part
    method: GET
    data_selector: content
    params: {}
- name: tool_call_part
  endpoint:
    path: /pydantic_ai/messages/tool_call_part
    method: GET
    data_selector: tool_name
    params: {}
- name: builtin_tool_call_part
  endpoint:
    path: /pydantic_ai/messages/builtin_tool_call_part
    method: GET
    data_selector: provider_name
    params: {}
- name: model_response
  endpoint:
    path: /pydantic_ai/messages
    method: GET
    data_selector: parts
- name: TextPartDelta
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content_delta
    params: {}
- name: ThinkingPartDelta
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content_delta
    params: {}
- name: ToolCallPartDelta
  endpoint:
    path: /pydantic_ai/messages/ToolCallPartDelta
    method: GET
    data_selector: tool_call_part_delta
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/messages/PartStartEvent
    method: GET
    data_selector: part_start_event
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/messages/PartDeltaEvent
    method: GET
    data_selector: part_delta_event
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/messages/FinalResultEvent
    method: GET
    data_selector: final_result_event
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolCallEvent
    method: GET
    data_selector: function_tool_call_event
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolResultEvent
    method: GET
    data_selector: function_tool_result_event
    params: {}
- name: ModelRetry
  endpoint:
    path: /ModelRetry
    method: GET
    data_selector: message
    params: {}
- name: CallDeferred
  endpoint:
    path: /CallDeferred
    method: GET
    data_selector: message
    params: {}
- name: ApprovalRequired
  endpoint:
    path: /ApprovalRequired
    method: GET
    data_selector: message
    params: {}
- name: UserError
  endpoint:
    path: /UserError
    method: GET
    data_selector: message
    params: {}
- name: AgentRunError
  endpoint:
    path: /AgentRunError
    method: GET
    data_selector: message
    params: {}
- name: UsageLimitExceeded
  endpoint:
    path: /UsageLimitExceeded
    method: GET
    data_selector: message
    params: {}
- name: UnexpectedModelBehavior
  endpoint:
    path: /UnexpectedModelBehavior
    method: GET
    data_selector: message
    params: {}
- name: ModelHTTPError
  endpoint:
    path: /ModelHTTPError
    method: GET
    data_selector: message
    params: {}
- name: FallbackExceptionGroup
  endpoint:
    path: /FallbackExceptionGroup
    method: GET
    data_selector: message
    params: {}
- name: IncompleteToolCall
  endpoint:
    path: /IncompleteToolCall
    method: GET
    data_selector: message
    params: {}
- name: ModelRetry
  endpoint:
    path: /exceptions/ModelRetry
    method: GET
    data_selector: message
    params: {}
- name: CallDeferred
  endpoint:
    path: /exceptions/CallDeferred
    method: GET
    data_selector: message
    params: {}
- name: ApprovalRequired
  endpoint:
    path: /exceptions/ApprovalRequired
    method: GET
    data_selector: message
    params: {}
- name: UserError
  endpoint:
    path: /exceptions/UserError
    method: GET
    data_selector: message
    params: {}
- name: AgentRunError
  endpoint:
    path: /exceptions/AgentRunError
    method: GET
    data_selector: message
    params: {}
- name: UsageLimitExceeded
  endpoint:
    path: /exceptions/UsageLimitExceeded
    method: GET
    data_selector: message
    params: {}
- name: UnexpectedModelBehavior
  endpoint:
    path: /exceptions/UnexpectedModelBehavior
    method: GET
    data_selector: message
    params: {}
- name: ModelSettings
  endpoint:
    path: /pydantic_ai/settings
    method: GET
    data_selector: settings
    params: {}
- name: RequestUsage
  endpoint:
    path: /pydantic_ai/usage
    method: GET
    data_selector: usage_data
    params: {}
- name: RunUsage
  endpoint:
    path: /pydantic_ai/run_usage
    method: GET
    data_selector: run_usage_data
    params: {}
- name: mcp_servers
  endpoint:
    path: load_mcp_servers
    method: GET
    data_selector: list[MCPServerStdio | MCPServerStreamableHTTP | MCPServerSSE]
    params:
      config_path: str | Path
- name: model_request
  endpoint:
    path: /direct/model_request
    method: POST
    data_selector: ModelResponse
- name: model_request_sync
  endpoint:
    path: /direct/model_request_sync
    method: POST
    data_selector: ModelResponse
- name: model_request_stream
  endpoint:
    path: /direct/model_request_stream
    method: POST
    data_selector: ModelResponse
- name: model_request_stream_sync
  endpoint:
    path: /direct/model_request_stream_sync
    method: POST
    data_selector: ModelResponse
- name: model_request_sync
  endpoint:
    path: /model_request_sync
    method: POST
    data_selector: ModelResponse
    params: {}
- name: model_request_stream
  endpoint:
    path: /model_request_stream
    method: POST
    data_selector: StreamedResponse
    params: {}
- name: model_request_stream_sync
  endpoint:
    path: /model_request_stream_sync
    method: POST
    data_selector: StreamedResponseSync
    params: {}
- name: ModelResponseStreamEvent
  endpoint:
    path: /pydantic_ai/messages/ModelResponseStreamEvent
    method: GET
    data_selector: records
- name: ModelResponse
  endpoint:
    path: /pydantic_ai/messages/ModelResponse
    method: GET
    data_selector: records
- name: RequestUsage
  endpoint:
    path: /pydantic_ai/messages/RequestUsage
    method: GET
    data_selector: records
- name: google_json_schema_transformer
  endpoint:
    path: /pydantic_ai/profiles/google
    method: GET
    data_selector: records
    params: {}
- name: meta_model_profile
  endpoint:
    path: /pydantic_ai/profiles/meta
    method: GET
    data_selector: records
    params: {}
- name: amazon_model_profile
  endpoint:
    path: /pydantic_ai/profiles/amazon
    method: GET
    data_selector: records
    params: {}
- name: deepseek_model_profile
  endpoint:
    path: /pydantic_ai/profiles/deepseek
    method: GET
    data_selector: records
    params: {}
- name: grok_model_profile
  endpoint:
    path: /pydantic_ai/profiles/grok
    method: GET
    data_selector: records
    params: {}
- name: mistral_model_profile
  endpoint:
    path: /pydantic_ai/profiles/mistral
    method: GET
    data_selector: records
    params: {}
- name: qwen_model_profile
  endpoint:
    path: /pydantic_ai/profiles/qwen
    method: GET
    data_selector: records
    params: {}
- name: AgentRunResultEvent
  endpoint:
    path: /pydantic_ai/run/AgentRunResultEvent
    method: GET
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
    params: {}
- name: ctx
  endpoint:
    path: GraphRunContext[GraphAgentState, GraphAgentDeps[AgentDepsT, Any]]
    method: GET
- name: next_node
  endpoint:
    path: AgentNode[AgentDepsT, OutputDataT] | End[FinalResult[OutputDataT]]
    method: GET
- name: result
  endpoint:
    path: AgentRunResult[OutputDataT] | None
    method: GET
- name: __aiter__
  endpoint:
    path: AsyncIterator[AgentNode[AgentDepsT, OutputDataT] | End[FinalResult[OutputDataT]]]
    method: GET
- name: __anext__
  endpoint:
    path: AgentNode[AgentDepsT, OutputDataT] | End[FinalResult[OutputDataT]]
    method: GET
- name: next
  endpoint:
    path: AgentNode[AgentDepsT, OutputDataT] | End[FinalResult[OutputDataT]]
    method: POST
- name: usage
  endpoint:
    path: RunUsage
    method: GET
- name: AgentRunResult
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/run.py
    method: GET
    data_selector: output
- name: AgentRunResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/run.py
    method: GET
    data_selector: result
- name: Broker
  endpoint:
    path: /broker
    method: GET
- name: Skill
  endpoint:
    path: /skill
    method: GET
- name: Storage
  endpoint:
    path: /storage
    method: GET
- name: Worker
  endpoint:
    path: /worker
    method: GET
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: HEAD
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: customer_balance
  endpoint:
    path: /number
    method: GET
    data_selector: temperature
    params:
      min: 10
      max: 30
- name: weather
  endpoint:
    path: /weather
    method: GET
    data_selector: description
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: result
    params: {}
- name: weather_forecast
  endpoint:
    path: /forecast
    method: GET
    data_selector: forecast_data
- name: historic_weather
  endpoint:
    path: /historic
    method: GET
    data_selector: historic_data
- name: Agent
  endpoint:
    path: /api/models/anthropic/
    method: GET
    data_selector: records
- name: SupportDependencies
  endpoint:
    path: /api/models/openai/
    method: GET
    data_selector: records
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: result
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: result
    params: {}
- name: github
  endpoint:
    path: /mcp/
    method: GET
    data_selector: output
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: document
  endpoint:
    path: /generative-ai/pdf/2403.05530.pdf
    method: GET
    data_selector: output
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: mcp_server
  endpoint:
    path: /mcp
    method: GET
    data_selector: ''
    params: {}
- name: all_messages
  endpoint:
    path: /all_messages
    method: GET
    data_selector: messages
    params: {}
- name: new_messages
  endpoint:
    path: /new_messages
    method: GET
    data_selector: messages
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui/document_state
    method: GET
    data_selector: records
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: records
- name: user_id
  endpoint:
    path: /user/getByName
    method: GET
    data_selector: user_id
    params:
      name: John Doe
- name: github
  endpoint:
    path: /mcp/
    method: GET
    data_selector: records
- name: messages_and_chat_history
  endpoint:
    path: /messages
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: results
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: agent
  endpoint:
    path: /agents
    method: POST
    data_selector: results
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model_request
    method: POST
    data_selector: result
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result.messages
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: MCPServerTool
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /result
    method: GET
    data_selector: all_messages
    params: {}
- name: streamed_messages
  endpoint:
    path: /streamed_result
    method: GET
    data_selector: new_messages
    params: {}
- name: seat_preference
  endpoint:
    path: /seat_preference
    method: GET
    data_selector: output
    params: {}
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: output
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: output
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: MCPServerTool
  endpoint:
    path: /mcp
    method: GET
- name: RunResult
  endpoint:
    path: /run/result
    method: GET
    data_selector: results
    params: {}
- name: StreamedRunResult
  endpoint:
    path: /stream/run/result
    method: GET
    data_selector: results
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AnthropicStreamedResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/anthropic.py
    method: GET
    data_selector: records
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: output
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast_data
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic_data
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: tool_results
  endpoint:
    path: /tool_results
    method: GET
    data_selector: results
- name: dependencies
  endpoint:
    path: /dependencies
    method: GET
    data_selector: dependencies
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: results
- name: support_agent
  endpoint:
    path: /api/support_agent
    method: POST
    data_selector: results
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: image_input
  endpoint:
    path: /image/input
    method: POST
    data_selector: output
- name: audio_input
  endpoint:
    path: /audio/input
    method: POST
    data_selector: output
- name: video_input
  endpoint:
    path: /video/input
    method: POST
    data_selector: output
- name: document_input
  endpoint:
    path: /document/input
    method: POST
    data_selector: output
- name: joke_factory
  endpoint:
    path: /
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /
    method: GET
    data_selector: text
    params:
      count: count
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: RunResult
  endpoint:
    path: /run/result
    method: GET
    data_selector: results
- name: StreamedRunResult
  endpoint:
    path: /streamed/run/result
    method: GET
    data_selector: results
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: FlightDetails
    params: {}
- name: seat_preference
  endpoint:
    path: /seat_preference
    method: GET
    data_selector: SeatPreference
    params: {}
- name: OpenAIChatModel
  endpoint:
    path: /v1/models
    method: POST
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: records
    params: {}
- name: historic_weather
  endpoint:
    path: /historic_weather
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: user_id
    params: {}
- name: message
  endpoint:
    path: /message
    method: POST
    data_selector: message_id
    params: {}
- name: deepwiki
  endpoint:
    path: https://mcp.deepwiki.com/mcp
    method: GET
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: response
    params: {}
- name: deferred_tool_requests
  endpoint:
    path: /deferred-tool-requests
    method: POST
    data_selector: calls
    params: {}
- name: deferred_tool_results
  endpoint:
    path: /deferred-tool-results
    method: POST
    data_selector: calls
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: output
- name: agent_state
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: state
    params: {}
- name: agent_tool_events
  endpoint:
    path: /ag_ui_tool_events
    method: GET
    data_selector: events
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: joke
  endpoint:
    path: /joke
    method: GET
    data_selector: response
    params: {}
- name: document
  endpoint:
    path: /document
    method: POST
    data_selector: content
    params: {}
- name: tool
  endpoint:
    path: /tools
    method: GET
    data_selector: tools
    params: {}
- name: frontend_tool_definitions
  endpoint:
    path: /deferred_tools/frontend_tool_definitions
    method: GET
    data_selector: frontend_tools
    params: {}
- name: GoogleModel
  endpoint:
    path: /generativelanguage.googleapis.com
    method: GET
- name: StatePersistence
  endpoint:
    path: /state_persistence
    method: GET
    data_selector: implementations
    params: {}
- name: CountDown
  endpoint:
    path: /count_down
    method: GET
    data_selector: nodes
    params: {}
- name: Evaluate
  endpoint:
    path: /evaluate
    method: GET
    data_selector: evaluation
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: records
- name: weather_forecast
  endpoint:
    path: /ag_ui_tool_events
    method: POST
    data_selector: records
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast_data
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic_data
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: Cloud Storage bucket URIs
  endpoint:
    path: gs://
    method: GET
- name: Public HTTP(S) URLs
  endpoint:
    path: http://
    method: GET
- name: Public YouTube video URL
  endpoint:
    path: https://www.youtube.com/watch?v=
    method: GET
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
    params:
      count: int
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: int
- name: GoogleModel
  endpoint:
    path: /api-endpoint
    method: GET
    data_selector: data
    params: {}
- name: deepseek-chat
  endpoint:
    path: /api/chat
    method: POST
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /historic_weather
    method: GET
    data_selector: historic
    params: {}
- name: sum
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: hitchhiker
  endpoint:
    path: /hitchhiker
    method: POST
    data_selector: output
    params: {}
- name: greet
  endpoint:
    path: /greet
    method: POST
    data_selector: output
    params: {}
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: output
    params: {}
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: output
    params: {}
- name: get_default_language
  endpoint:
    path: ''
    method: GET
    data_selector: ''
    params: {}
- name: get_user_name
  endpoint:
    path: ''
    method: GET
    data_selector: ''
    params: {}
- name: get_preferred_language
  endpoint:
    path: /deferred-tools/get_preferred_language
    method: GET
    data_selector: result
    params: {}
- name: groq_model
  endpoint:
    path: /models/groq
    method: GET
    data_selector: models
    params: {}
- name: huggingface_model
  endpoint:
    path: /models/huggingface
    method: GET
    data_selector: models
    params: {}
- name: mistral_model
  endpoint:
    path: /models/mistral
    method: GET
    data_selector: models
    params: {}
- name: openai_model
  endpoint:
    path: /models/openai
    method: GET
    data_selector: models
    params: {}
- name: deepseek-chat
  endpoint:
    path: /api/chat
    method: POST
- name: count_down
  endpoint:
    path: /count_down
    method: GET
    data_selector: records
    params: {}
- name: question_graph
  endpoint:
    path: /question_graph
    method: GET
    data_selector: records
    params: {}
- name: handle_ag_ui_request
  endpoint:
    path: /handle_ag_ui_request
    method: POST
    data_selector: Response
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: AsyncIterator[str]
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: results
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: results
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: github
  endpoint:
    path: /mcp
    method: GET
- name: google_calendar
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: FlightDetails
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: jokes
    params:
      count: count
- name: sum
  endpoint:
    path: /sum
    method: POST
    data_selector: sum
    params: {}
- name: foobar
  endpoint:
    path: /tool/foobar
    method: POST
    data_selector: output
    params: {}
- name: deferred_toolset
  endpoint:
    path: /deferred_toolset
    method: POST
    data_selector: toolsets
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: StreamingResponse
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: tool
  endpoint:
    path: /agent/tool
    method: POST
- name: agent
  endpoint:
    path: /run
    method: POST
    data_selector: output
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: message
  endpoint:
    path: /messages
    method: POST
    data_selector: result
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: document
  endpoint:
    path: /storage.googleapis.com/cloud-samples-data/generative-ai/pdf/2403.05530.pdf
    method: GET
    data_selector: content
    params: {}
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: text
    params:
      count: count
- name: tool
  endpoint:
    path: /tool
    method: POST
    data_selector: results
- name: FunctionToolset
  endpoint:
    path: /function_toolset
    method: GET
    data_selector: tools
- name: Agent
  endpoint:
    path: /agent
    method: GET
    data_selector: agents
- name: DeferredToolRequests
  endpoint:
    path: /deferred_tool_requests
    method: GET
    data_selector: requests
- name: DeferredToolResults
  endpoint:
    path: /deferred_tool_results
    method: GET
    data_selector: results
- name: models
  endpoint:
    path: /model-garden/models
    method: GET
    data_selector: models
    params: {}
- name: deepseek-chat
  endpoint:
    path: /api/chat
    method: POST
- name: vending_machine
  endpoint:
    path: /vending_machine
    method: POST
    data_selector: result
    params: {}
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: POST
    data_selector: result
    params: {}
- name: EmailRequiresWrite
  endpoint:
    path: /email/write
    method: POST
    data_selector: feedback
- name: EmailOk
  endpoint:
    path: /email/ok
    method: GET
    data_selector: result
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: streaming event chunks encoded as strings
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: FunctionModel
  endpoint:
    method: GET
- name: agent
  endpoint:
    path: /pydantic_ai/agent
    method: GET
    data_selector: agent_data
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params:
      location: Paris
      forecast_date: '2030-01-01'
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params:
      location: Paris
      forecast_date: '2030-01-01'
- name: MCP Server Tool
  endpoint:
    path: https://mcp.deepwiki.com/mcp
    method: GET
- name: GitHub MCP Server
  endpoint:
    path: https://api.githubcopilot.com/mcp/
    method: GET
- name: Google Calendar Connector
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
    params: {}
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: result
    params: {}
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: result
    params: {}
- name: foobar
  endpoint:
    path: foobar
    method: POST
    data_selector: parameters
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /chat
    method: POST
- name: email_writer_agent
  endpoint:
    path: /write_email
    method: POST
    data_selector: output
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result.output
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: streaming events
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: GET
    data_selector: overrides
    params: {}
- name: sequential_tool_calls
  endpoint:
    path: /sequential_tool_calls
    method: GET
    data_selector: tool_calls
    params: {}
- name: iter
  endpoint:
    path: iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: override
    method: GET
    data_selector: nodes
    params: {}
- name: AbstractBuiltinTool
  endpoint:
    path: /pydantic_ai/builtin_tools/AbstractBuiltinTool
    method: GET
    data_selector: records
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
    data_selector: records
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
    data_selector: records
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
    data_selector: records
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
    data_selector: records
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
    data_selector: records
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
    data_selector: records
- name: tavily_search_tool
  endpoint:
    path: /tavily/search
    method: POST
- name: model_response
  endpoint:
    path: /model_response
    method: GET
    data_selector: response
    params: {}
- name: usage
  endpoint:
    path: /usage
    method: GET
    data_selector: usage
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: response
    params: {}
- name: model_request_stream
  endpoint:
    path: /model/request_stream
    method: GET
    data_selector: streamed_response
    params: {}
- name: agent_run_async
  endpoint:
    path: /agent/run
    method: POST
    data_selector: output
    params: {}
- name: agent_run_sync
  endpoint:
    path: /agent/run_sync
    method: POST
    data_selector: output
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: data
    params: {}
- name: Agent
  endpoint:
    path: /agent
    method: POST
    data_selector: data
    params: {}
- name: send_message
  endpoint:
    path: tasks/send
    method: POST
    data_selector: submitted
- name: get_task
  endpoint:
    path: tasks/get
    method: POST
    data_selector: task
- name: cancel_task
  endpoint:
    path: tasks/cancel
    method: POST
    data_selector: canceled
- name: push_notification
  endpoint:
    path: tasks/pushNotification/get
    method: GET
    data_selector: working
- name: video_url
  endpoint:
    path: /video_url
    method: GET
    data_selector: url
    params: {}
- name: audio_url
  endpoint:
    path: /audio_url
    method: GET
    data_selector: url
    params: {}
- name: image_url
  endpoint:
    path: /image_url
    method: GET
    data_selector: url
    params: {}
- name: document_url
  endpoint:
    path: /document_url
    method: GET
    data_selector: url
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ThinkingPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.ThinkingPart
    method: GET
    data_selector: content
- name: FilePart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.FilePart
    method: GET
    data_selector: content
- name: BaseToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.BaseToolCallPart
    method: GET
    data_selector: tool_name
- name: ToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.ToolCallPart
    method: GET
    data_selector: tool_name
- name: BuiltinToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.BuiltinToolCallPart
    method: GET
    data_selector: provider_name
- name: ModelResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.ModelResponse
    method: GET
    data_selector: parts
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/messages/PartStartEvent
    method: GET
    data_selector: index
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/messages/PartDeltaEvent
    method: GET
    data_selector: index
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/messages/FinalResultEvent
    method: GET
    data_selector: tool_name
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolCallEvent
    method: GET
    data_selector: part
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolResultEvent
    method: GET
    data_selector: result
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolCallEvent
    method: GET
    data_selector: part
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolResultEvent
    method: GET
    data_selector: result
- name: json_schema
  endpoint:
    path: /pydantic_ai/structured_dict
    method: POST
    data_selector: output
    params: {}
- name: AgentRunResult
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
- name: AgentRunResultEvent
  endpoint:
    path: /agent/run/result/event
    method: GET
    data_selector: event
- name: model_names
  endpoint:
    path: /model/names
    method: GET
    data_selector: titles
- name: groq_model
  endpoint:
    path: /models/groq
    method: POST
    data_selector: data
    params: {}
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: mistral_model
  endpoint:
    path: /models/mistral
    method: POST
    data_selector: data
    params: {}
- name: OpenAIChatModel
  endpoint:
    path: /openai/chat/models
    method: GET
    data_selector: models
- name: OpenAIResponsesModel
  endpoint:
    path: /openai/responses/models
    method: GET
    data_selector: models
- name: TestModel
  endpoint:
    path: /v1/models/test
    method: GET
    data_selector: data
    params: {}
- name: Case
  endpoint:
    path: /pydantic_evals/Case
    method: GET
    data_selector: inputs
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: POST
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: dataset
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: json_schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
    params: {}
- name: span_node
  endpoint:
    path: /span_node
    method: GET
    data_selector: records
- name: ReportCase
  endpoint:
    path: /reporting/reportcase
    method: GET
    data_selector: cases
    params: {}
- name: ReportCaseFailure
  endpoint:
    path: /reporting/reportcasefailure
    method: GET
    data_selector: failures
    params: {}
- name: EvaluationReport
  endpoint:
    path: /reporting/evaluationreport
    method: GET
    data_selector: reports
    params: {}
- name: cases
  endpoint:
    data_selector: list[ReportCase[InputsT, OutputT, MetadataT]]
- name: failures
  endpoint:
    data_selector: list[ReportCaseFailure[InputsT, OutputT, MetadataT]]
- name: EndNode
  endpoint:
    path: /end_node
    method: GET
    data_selector: records
    params: {}
- name: StartNode
  endpoint:
    path: /start_node
    method: GET
    data_selector: records
    params: {}
- name: StepContext
  endpoint:
    path: /step_context
    method: GET
    data_selector: records
    params: {}
- name: StepNode
  endpoint:
    path: /step_node
    method: GET
    data_selector: records
    params: {}
- name: Decision
  endpoint:
    path: /pydantic_graph/beta/decision
    method: GET
    data_selector: branches
    params: {}
- name: DecisionBranch
  endpoint:
    path: /pydantic_graph/beta/decision_branch
    method: GET
    data_selector: source
    params: {}
- name: graph_task
  endpoint:
    path: /pydantic_graph/beta/graph.py
    method: GET
- name: graph_run
  endpoint:
    path: /pydantic_graph/beta/graph.py
    method: GET
- name: graph_builder
  endpoint:
    path: /pydantic_graph/beta/graph_builder.py
    method: GET
- name: JoinState
  endpoint:
    path: /pydantic_graph/beta/join
    method: GET
    data_selector: current
    params: {}
- name: ReducerContext
  endpoint:
    path: /pydantic_graph/beta/reducer_context
    method: GET
    data_selector: _state
    params: {}
- name: StepContext
  endpoint:
    path: /pydantic_graph/beta/step_context
    method: GET
    data_selector: _inputs
    params: {}
- name: mermaid_code
  endpoint:
    path: /mermaid/generate_code
    method: POST
    data_selector: code
    params: {}
- name: mermaid_image
  endpoint:
    path: /mermaid/image
    method: POST
    data_selector: image
    params: {}
- name: mermaid_save
  endpoint:
    path: /mermaid/save
    method: POST
    data_selector: save_status
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: FileStatePersistence
  endpoint:
    path: /pydantic_graph/persistence/file.py
    method: GET
    data_selector: snapshots
    params: {}
- name: dataset_evaluation
  endpoint:
    path: /evaluate_sync
    method: POST
    data_selector: evaluation_report
    params: {}
- name: MCPServerStreamableHTTP
  endpoint:
    path: /mcp
    method: POST
- name: MCPServerSSE
  endpoint:
    path: /sse
    method: POST
- name: MCPServerStdio
  endpoint:
    path: /stdio
    method: POST
- name: agent
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic_weather
    params: {}
- name: mcp_server_deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: all_messages
    params: {}
- name: message_history
  endpoint:
    path: /message_history
    method: GET
    data_selector: new_messages
    params: {}
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: result
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: name
- name: toolset
  endpoint:
    path: /toolset
    method: POST
    data_selector: toolset
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
    params: {}
- name: GoogleModel
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: email_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: response
    params: {}
- name: count_down
  endpoint:
    path: /count_down
    method: GET
    data_selector: records
    params: {}
- name: ai_q_and_a
  endpoint:
    path: /ai_q_and_a
    method: POST
    data_selector: records
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: AsyncIterator[AgentRun[AgentDepsT, Any]]
- name: override
  endpoint:
    path: /override
    method: GET
    data_selector: Iterator[None]
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: result
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
- name: user
  endpoint:
    path: /api/user
    method: GET
    data_selector: user_info
- name: deepwiki_tool
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: response
    params: {}
- name: image_input
  endpoint:
    path: /image/input
    method: POST
    data_selector: response
    params: {}
- name: audio_input
  endpoint:
    path: /audio/input
    method: POST
    data_selector: response
    params: {}
- name: video_input
  endpoint:
    path: /video/input
    method: POST
    data_selector: response
    params: {}
- name: document_input
  endpoint:
    path: /document/input
    method: POST
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result.messages
- name: foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: deferred_tools
  endpoint:
    path: /deferred-tools
    method: POST
    data_selector: results
- name: groq_model
  endpoint:
    path: /keys
    method: GET
- name: huggingface_model
  endpoint:
    path: /huggingface
    method: GET
- name: mistral_model
  endpoint:
    path: /mistral
    method: GET
- name: openai_model
  endpoint:
    path: /openai
    method: GET
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: GET
- name: feedback_graph
  endpoint:
    path: /feedback/graph
    method: POST
    data_selector: results
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: iter
  endpoint:
    path: /agent/iter
    method: POST
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: run_stream_events
  endpoint:
    path: /agent/run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /agent/iter
    method: POST
    data_selector: nodes
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /iter
    method: GET
- name: web_search
  endpoint:
    path: /search
    method: GET
- name: mcp_server
  endpoint:
    path: /mcp
    method: GET
    data_selector: response
    params: {}
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: result
    params: {}
- name: dice_game
  endpoint:
    path: /dice_game
    method: POST
    data_selector: result
    params: {}
- name: foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
    params: {}
- name: meta/llama-3.3-70b-instruct-maas
  endpoint:
    path: /v1/models/meta/llama-3.3-70b-instruct-maas
    method: POST
    data_selector: model_output
- name: gemini-2.5-pro
  endpoint:
    path: /v1/models/gemini-2.5-pro
    method: POST
    data_selector: model_output
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: email_feedback
  endpoint:
    path: /feedback_graph
    method: POST
    data_selector: result
- name: GraphRun
  endpoint:
    path: /graph/run
    method: POST
    data_selector: data
    params: {}
- name: Graph
  endpoint:
    path: /graph
    method: GET
    data_selector: data
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
    params: {}
- name: run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: run_sync
  endpoint:
    path: /agent/run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /agent/run_stream
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
    data_selector: tool_parameters
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
    data_selector: tool_parameters
    params: {}
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
    data_selector: tool_parameters
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
    data_selector: tool_parameters
    params: {}
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
    data_selector: tool_parameters
    params: {}
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
    data_selector: tool_parameters
    params: {}
- name: tavily_search
  endpoint:
    path: /tavily/search
    method: POST
- name: ModelResponseStreamEvent
  endpoint:
    path: /pydantic_ai/durable_exec/temporal/_agent
    method: GET
    data_selector: stream
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_async
  endpoint:
    path: /run_async
    method: POST
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
- name: iter
  endpoint:
    path: /iter
    method: POST
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: wrapped_request_step
  endpoint:
    path: /model/request
    method: POST
    data_selector: messages
    params: {}
- name: wrapped_request_stream_step
  endpoint:
    path: /model/request_stream
    method: GET
    data_selector: streamed_response
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: result
    params: {}
- name: get_task
  endpoint:
    path: /tasks/get
    method: POST
    data_selector: result
    params: {}
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: result
    params: {}
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: result
    params: {}
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
- name: has_content
  endpoint:
    path: /has_content
    method: GET
    data_selector: has_content
- name: structured_dict
  endpoint:
    path: /pydantic_ai/StructuredDict
    method: GET
    data_selector: properties
    params: {}
- name: agent_run_result
  endpoint:
    path: /agent_run_result
    method: GET
    data_selector: result
    params: {}
- name: agent_run_result_event
  endpoint:
    path: /agent_run_result_event
    method: GET
    data_selector: result
    params: {}
- name: Bedrock Converse API
  endpoint:
    path: /runtime/converse
    method: POST
    data_selector: output
    params: {}
- name: cohere_model
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
- name: MCP Sampling Model
  endpoint:
    path: /mcp_sampling
    method: POST
    data_selector: results
- name: Mistral Model
  endpoint:
    path: /mistral
    method: POST
    data_selector: results
- name: OpenAIResponsesModel
  endpoint:
    path: /v1/responses
    method: POST
    data_selector: data
    params: {}
- name: test_model
  endpoint:
    path: /v1/models/test
    method: GET
    data_selector: data
    params: {}
- name: Case
  endpoint:
    path: /pydantic_evals/dataset/case
    method: POST
    data_selector: inputs
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: POST
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataclass
    method: GET
    data_selector: cases
    params: {}
- name: name
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: cases
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: evaluators
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: results
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: results
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: POST
    data_selector: results
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: results
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: results
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: results
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: POST
    data_selector: results
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: results
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: results
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
- name: contains
  endpoint:
    path: /contains
    method: POST
    data_selector: evaluation
- name: equals
  endpoint:
    path: /equals
    method: POST
    data_selector: evaluation
- name: equals_expected
  endpoint:
    path: /equals_expected
    method: POST
    data_selector: evaluation
- name: has_matching_span
  endpoint:
    path: /has_matching_span
    method: POST
    data_selector: evaluation
- name: is_instance
  endpoint:
    path: /is_instance
    method: POST
    data_selector: evaluation
- name: llm_judge
  endpoint:
    path: /llm_judge
    method: POST
    data_selector: evaluation
- name: max_duration
  endpoint:
    path: /max_duration
    method: POST
    data_selector: evaluation
- name: EvaluatorFailure
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/evaluator.py
    method: GET
    data_selector: records
    params: {}
- name: EvaluatorOutput
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/evaluator.py
    method: GET
    data_selector: records
    params: {}
- name: EvaluatorSpec
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/spec.py
    method: GET
    data_selector: records
    params: {}
- name: GradingOutput
  endpoint:
    path: /grading/output
    method: GET
    data_selector: records
    params: {}
- name: SpanNode
  endpoint:
    path: /pydantic_evals/pydantic_evals/otel/span_tree.py
    method: GET
    data_selector: nodes
    params: {}
- name: ReportCase
  endpoint:
    path: /report_case
    method: POST
    data_selector: case_data
    params: {}
- name: ReportCaseFailure
  endpoint:
    path: /report_case_failure
    method: POST
    data_selector: failure_data
    params: {}
- name: ReportCaseAggregate
  endpoint:
    path: /report_case_aggregate
    method: GET
    data_selector: aggregate_data
    params: {}
- name: EvaluationReport
  endpoint:
    path: /evaluation_report
    method: GET
    data_selector: report_data
    params: {}
- name: Graph
  endpoint:
    path: /graph
    method: GET
    data_selector: nodes
    params: {}
- name: start_node
  endpoint:
    path: /start_node
    method: GET
    data_selector: records
- name: end_node
  endpoint:
    path: /end_node
    method: GET
    data_selector: records
- name: Decision
  endpoint:
    path: /pydantic_graph/beta/decision
    method: GET
    data_selector: Decision
    params: {}
- name: DecisionBranch
  endpoint:
    path: /pydantic_graph/beta/decision/branch
    method: GET
    data_selector: DecisionBranch
    params: {}
- name: Graph
  endpoint:
    path: /pydantic_graph/graph
    method: GET
    data_selector: nodes
    params: {}
- name: graph_run
  endpoint:
    path: /graph/run
    method: POST
- name: graph_run_sync
  endpoint:
    path: /graph/run_sync
    method: POST
- name: graph_iter
  endpoint:
    path: /graph/iter
    method: GET
- name: graph_iter_from_persistence
  endpoint:
    path: /graph/iter_from_persistence
    method: GET
- name: graph_initialize
  endpoint:
    path: /graph/initialize
    method: POST
- name: graph_mermaid_code
  endpoint:
    path: /graph/mermaid_code
    method: GET
- name: NodeSnapshot
  endpoint:
    path: /pydantic_graph/nodes/NodeSnapshot
    method: GET
    data_selector: records
    params: {}
- name: EndSnapshot
  endpoint:
    path: /pydantic_graph/nodes/EndSnapshot
    method: GET
    data_selector: records
    params: {}
- name: node_snapshot
  endpoint:
    path: /pydantic_graph/node_snapshot
    method: POST
    data_selector: snapshot
    params: {}
- name: load_all_snapshots
  endpoint:
    path: /pydantic_graph/load_all_snapshots
    method: GET
    data_selector: snapshots
    params: {}
- name: FileStatePersistence
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/file.py
    method: GET
    data_selector: records
    params: {}
- name: dump_json
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/in_mem.py
    method: GET
    data_selector: records
    params: {}
- name: load_json
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/in_mem.py
    method: GET
    data_selector: records
    params: {}
- name: evaluation_summary
  endpoint:
    path: /evaluation/summary
    method: GET
    data_selector: results
- name: daily_report_flow
  endpoint:
    path: /daily_report_flow
    method: POST
    data_selector: output
    params:
      cron: 0 9 * * *
      parameters:
        user_prompt: Generate today's report
      tags:
      - production
      - reports
- name: mcp_config
  endpoint:
    path: /mcp_config.json
    method: GET
    data_selector: mcpServers
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: output
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params:
      location: location
      forecast_date: forecast_date
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params:
      location: location
      forecast_date: forecast_date
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /direct/model_request
    method: POST
    data_selector: response
    params: {}
- name: model_request_sync
  endpoint:
    path: /direct/model_request_sync
    method: POST
    data_selector: response
    params: {}
- name: model_request_stream
  endpoint:
    path: /direct/model_request_stream
    method: POST
    data_selector: response
    params: {}
- name: model_request_stream_sync
  endpoint:
    path: /direct/model_request_stream_sync
    method: POST
    data_selector: response
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek-chat
    method: GET
- name: email_writer_agent
  endpoint:
    path: /agents/email_writer
    method: POST
    data_selector: output
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result.output
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: AgentStreamEvent | AgentRunResultEvent
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: AgentRun
    params: {}
- name: override
  endpoint:
    path: /override
    method: GET
    data_selector: None
    params: {}
- name: sequential_tool_calls
  endpoint:
    path: /sequential_tool_calls
    method: GET
    data_selector: None
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: AgentRun
    params: {}
- name: override
  endpoint:
    path: /override
    method: GET
    data_selector: None
    params: {}
- name: user
  endpoint:
    path: /get_user_by_name
    method: GET
    data_selector: user_id
    params: {}
- name: calc_volume
  endpoint:
    path: /calc_volume
    method: POST
    data_selector: volume
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: github
  endpoint:
    path: /mcp
    method: GET
- name: google-calendar
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: results
- name: results
  endpoint:
    path: /results
    method: GET
    data_selector: outputs
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: POST
    data_selector: output
    params:
      count: int
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: text
    params:
      count: int
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: properties
    params:
      required:
      - x
      - y
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: GET
- name: vending_machine
  endpoint:
    path: /vending_machine
    method: POST
    data_selector: result
- name: email_feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: feedback
- name: AGUIApp
  endpoint:
    path: /ag_ui
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: agent_stream_events
  endpoint:
    path: /pydantic_ai/agent/stream_events
    method: GET
    data_selector: events
    params: {}
- name: AgentRun
  endpoint:
    path: /agent_run
    method: GET
    data_selector: nodes
- name: UserPromptNode
  endpoint:
    path: /agent/run
    method: POST
    data_selector: nodes
    params: {}
- name: ModelRequestNode
  endpoint:
    path: /agent/request
    method: POST
    data_selector: nodes
    params: {}
- name: CallToolsNode
  endpoint:
    path: /agent/call
    method: POST
    data_selector: nodes
    params: {}
- name: End
  endpoint:
    path: /agent/end
    method: POST
    data_selector: nodes
    params: {}
- name: DeleteTaskPushNotificationConfigParams
  endpoint:
    path: /delete_task_push_notification
    method: DELETE
    data_selector: params
    params: {}
- name: agent
  endpoint:
    path: /api/v1/agent
    method: POST
    data_selector: result
- name: support_agent
  endpoint:
    path: /api/v1/support
    method: POST
    data_selector: support_advice
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: state
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather
    method: GET
    data_selector: forecast
    params:
      location: Paris
      date: '2023-01-01'
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast_data
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic_data
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: joke
  endpoint:
    path: /jokes
    method: GET
    data_selector: jokes
- name: sum
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: hitchhiker
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: greet
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: roll_dice
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: get_player_name
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: get_preferred_language
  endpoint:
    path: /deferred/get_preferred_language
    method: GET
    data_selector: result
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: POST
    data_selector: result
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai/agent/abstract.py
    method: GET
- name: AgentRunResultEvent
  endpoint:
    path: /pydantic_ai/agent/abstract.py
    method: GET
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
    data_selector: records
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
    data_selector: records
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
    data_selector: records
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
    data_selector: records
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
    data_selector: records
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
    data_selector: records
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: document_state
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: document
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: forecast
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast_data
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic_data
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: result
    params: {}
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: name
    params: {}
- name: foobar
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: deferred_tool
  endpoint:
    path: /deferred/tool
    method: POST
    data_selector: result
    params: {}
- name: Gemini
  endpoint:
    path: /model/gemini
    method: GET
- name: Groq
  endpoint:
    path: /model/groq
    method: GET
- name: Hugging Face
  endpoint:
    path: /model/huggingface
    method: GET
- name: Mistral
  endpoint:
    path: /model/mistral
    method: GET
- name: OpenAI
  endpoint:
    path: /model/openai
    method: GET
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
    data_selector: result
- name: email_writer_agent
  endpoint:
    path: /agents/write_email
    method: POST
    data_selector: output
    params: {}
- name: EmailRequiresWrite
  endpoint:
    path: /email/requires/write
    method: POST
    data_selector: feedback
- name: EmailOk
  endpoint:
    path: /email/ok
    method: GET
    data_selector: success
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: agent
  endpoint:
    path: /agent
    method: GET
    data_selector: records
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: agent_stream
  endpoint:
    path: /agent/stream
    method: GET
    data_selector: events
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: parts
    params: {}
- name: image_input
  endpoint:
    path: /image/input
    method: POST
    data_selector: parts
    params: {}
- name: audio_input
  endpoint:
    path: /audio/input
    method: POST
    data_selector: parts
    params: {}
- name: video_input
  endpoint:
    path: /video/input
    method: POST
    data_selector: parts
    params: {}
- name: document_input
  endpoint:
    path: /document/input
    method: POST
    data_selector: parts
    params: {}
- name: dice_game
  endpoint:
    path: /dice_game
    method: POST
    data_selector: result
- name: foobar
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
- name: gemini
  endpoint:
    path: /generateContent
    method: POST
    data_selector: content
- name: deepseek-chat
  endpoint:
    path: /
    method: GET
- name: email_writer
  endpoint:
    path: /email/writer
    method: POST
    data_selector: output
    params: {}
- name: Feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result.output
    params: {}
- name: EmailRequiresWrite
  endpoint:
    path: /email_requires_write
    method: GET
    data_selector: result.output
    params: {}
- name: EmailOk
  endpoint:
    path: /email_ok
    method: GET
    data_selector: result.output
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: POST
    data_selector: none
    params: {}
- name: sequential_tool_calls
  endpoint:
    path: /sequential_tool_calls
    method: POST
    data_selector: none
    params: {}
- name: is_model_request_node
  endpoint:
    path: /is_model_request_node
    method: GET
    data_selector: type_check
    params: {}
- name: is_call_tools_node
  endpoint:
    path: /is_call_tools_node
    method: GET
    data_selector: type_check
    params: {}
- name: is_user_prompt_node
  endpoint:
    path: /is_user_prompt_node
    method: GET
    data_selector: type_check
    params: {}
- name: is_end_node
  endpoint:
    path: /is_end_node
    method: GET
    data_selector: type_check
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: AgentRun
    params: {}
- name: result
  endpoint:
    path: /result
    method: GET
    data_selector: output
- name: next_node
  endpoint:
    path: /next_node
    method: GET
    data_selector: next_node
- name: usage
  endpoint:
    path: /usage
    method: GET
    data_selector: usage
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
    data_selector: attributes
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
    data_selector: attributes
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
    data_selector: attributes
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
    data_selector: attributes
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
    data_selector: attributes
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
    data_selector: attributes
- name: tavily_search_tool
  endpoint:
    path: /tavily/search
    method: POST
    data_selector: results
    params:
      api_key: required
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast_data
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic_data
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: joke_selection_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
    params:
      count: int
- name: joke_generation_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
    params:
      count: int
- name: flight_search_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
    params:
      origin: str
      destination: str
- name: seat_preference_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
    params:
      seat: str
- name: sum
  endpoint:
    path: /foobar
    method: POST
    data_selector: sum
    params: {}
- name: hitchhiker
  endpoint:
    path: /hitchhiker
    method: POST
    data_selector: hitchhiker
    params: {}
- name: greet
  endpoint:
    path: /greet
    method: POST
    data_selector: greet
    params: {}
- name: Foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: PersonalizedGreeting
  endpoint:
    path: /greet
    method: POST
    data_selector: output
    params: {}
- name: deferred_tools
  endpoint:
    path: /deferred_tools
    method: GET
    data_selector: tools
    params: {}
- name: deepseek-chat
  endpoint:
    path: /api/v1/chat
    method: POST
- name: feedback_graph
  endpoint:
    path: /feedback
    method: POST
    data_selector: output
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: records
- name: all_messages
  endpoint:
    path: /all_messages
    method: GET
    data_selector: messages
    params: {}
- name: all_messages_json
  endpoint:
    path: /all_messages_json
    method: GET
    data_selector: bytes
    params: {}
- name: new_messages
  endpoint:
    path: /new_messages
    method: GET
    data_selector: messages
    params: {}
- name: new_messages_json
  endpoint:
    path: /new_messages_json
    method: GET
    data_selector: bytes
    params: {}
- name: response
  endpoint:
    path: /response
    method: GET
    data_selector: ModelResponse
    params: {}
- name: usage
  endpoint:
    path: /usage
    method: GET
    data_selector: RunUsage
    params: {}
- name: timestamp
  endpoint:
    path: /timestamp
    method: GET
    data_selector: datetime
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: POST
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: POST
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: POST
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: POST
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: POST
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: POST
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: agent_run
  endpoint:
    method: async
    data_selector: AgentRunResult[OutputDataT]
    params:
      user_prompt: str | Sequence[UserContent] | None
      output_type: OutputSpec[RunOutputDataT] | None
      message_history: Sequence[ModelMessage] | None
      deferred_tool_results: DeferredToolResults | None
      model: Model | KnownModelName | str | None
      deps: AgentDepsT
      model_settings: ModelSettings | None
      usage_limits: UsageLimits | None
      usage: RunUsage | None
      infer_name: bool
      toolsets: Sequence[AbstractToolset[AgentDepsT]] | None
      builtin_tools: Sequence[AbstractBuiltinTool] | None
      event_stream_handler: EventStreamHandler[AgentDepsT] | None
- name: run_sync
  endpoint:
    method: sync
    data_selector: AgentRunResult[OutputDataT]
    params:
      user_prompt: str | Sequence[UserContent] | None
      output_type: None
      message_history: Sequence[ModelMessage] | None
      deferred_tool_results: DeferredToolResults | None
      model: Model | KnownModelName | str | None
      deps: AgentDepsT
      model_settings: ModelSettings | None
      usage_limits: UsageLimits | None
      usage: RunUsage | None
      infer_name: bool
      toolsets: Sequence[AbstractToolset[AgentDepsT]] | None
      builtin_tools: Sequence[AbstractBuiltinTool] | None
      event_stream_handler: EventStreamHandler[AgentDepsT] | None
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: AgentStreamEvent | AgentRunResultEvent
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: AsyncIterator[AgentRun[AgentDepsT, Any]]
    params: {}
- name: override
  endpoint:
    path: /override
    method: POST
    data_selector: None
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: records
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: POST
    data_selector: forecast
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: joke_factory
  endpoint:
    path: /tools/joke_factory
    method: GET
    data_selector: output
    params: {}
- name: flight_search
  endpoint:
    path: /tools/flight_search
    method: GET
    data_selector: output
    params: {}
- name: get_jokes
  endpoint:
    path: /tools/get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: sum
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: toolset
  endpoint:
    path: /toolset
    method: GET
    data_selector: tools
    params: {}
- name: function_tool
  endpoint:
    path: /function_tool
    method: GET
    data_selector: functions
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: agent_response
    params: {}
- name: get_preferred_language
  endpoint:
    path: /get_preferred_language
    method: GET
    data_selector: records
    params: {}
- name: EmailRequiresWrite
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: feedback
- name: EmailOk
  endpoint:
    path: /email/success
    method: GET
    data_selector: success
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: output
- name: WebSearchTool
  endpoint:
    path: /web_search
    method: GET
    data_selector: results
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /code_execution
    method: POST
    data_selector: result
    params: {}
- name: UrlContextTool
  endpoint:
    path: /url_context
    method: GET
    data_selector: content
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /image_generation
    method: POST
    data_selector: image
    params: {}
- name: MemoryTool
  endpoint:
    path: /memory
    method: POST
    data_selector: memory
    params: {}
- name: MCPServerTool
  endpoint:
    path: /mcp_server
    method: POST
    data_selector: server_response
    params: {}
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: agent
  endpoint:
    path: /api/v1/agent
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: output
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: output
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: output
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
- name: model
  endpoint:
    path: /api/model
    method: GET
    data_selector: models
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params:
      location: location
      forecast_date: forecast_date
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params:
      location: location
      forecast_date: forecast_date
- name: mcp_server
  endpoint:
    path: /mcp
    method: GET
- name: Foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: properties
    params: {}
- name: deferred_tools
  endpoint:
    path: /deferred/tools
    method: GET
    data_selector: tools
- name: deepseek-chat
  endpoint:
    path: /
    method: GET
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
- name: iter
  endpoint:
    path: /iter
    method: GET
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: POST
    data_selector: none
    params: {}
- name: sequential_tool_calls
  endpoint:
    path: /sequential_tool_calls
    method: POST
    data_selector: none
    params: {}
- name: is_model_request_node
  endpoint:
    path: /is_model_request_node
    method: POST
    data_selector: none
    params: {}
- name: is_call_tools_node
  endpoint:
    path: /is_call_tools_node
    method: POST
    data_selector: none
    params: {}
- name: is_user_prompt_node
  endpoint:
    path: /is_user_prompt_node
    method: POST
    data_selector: none
    params: {}
- name: is_end_node
  endpoint:
    path: /is_end_node
    method: POST
    data_selector: none
    params: {}
- name: AgentRun
  endpoint:
    path: /AgentRun
    method: GET
    data_selector: result
    params: {}
- name: web_search
  endpoint:
    path: /builtin/web_search_tool
    method: GET
- name: code_execution
  endpoint:
    path: /builtin/code_execution_tool
    method: GET
- name: url_context
  endpoint:
    path: /builtin/url_context_tool
    method: GET
- name: image_generation
  endpoint:
    path: /builtin/image_generation_tool
    method: GET
- name: memory
  endpoint:
    path: /builtin/memory_tool
    method: GET
- name: mcp_server
  endpoint:
    path: /builtin/mcp_server_tool
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: agent_run_sync
  endpoint:
    path: /pydantic_ai/Agent/run_sync
    method: POST
    data_selector: result
    params: {}
- name: agent_run_stream
  endpoint:
    path: /pydantic_ai/Agent/run_stream
    method: POST
    data_selector: result
    params: {}
- name: agent_run_stream_events
  endpoint:
    path: /pydantic_ai/Agent/run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /pydantic_ai/run_stream_events
    method: GET
    data_selector: records
    params: {}
- name: iter
  endpoint:
    path: /pydantic_ai/iter
    method: GET
    data_selector: records
    params: {}
- name: override
  endpoint:
    path: /pydantic_ai/override
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: output
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: document
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: forecast
    params:
      location: Paris
      forecast_date: '2030-01-01'
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params:
      location: Paris
      forecast_date: '2030-01-01'
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: text
- name: dice_game
  endpoint:
    path: /dice_game
    method: GET
    data_selector: records
    params: {}
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: foobar
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: email_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: AgentRun
  endpoint:
    path: /agent_run
    method: GET
    data_selector: nodes
    params:
      user_prompt: What is the capital of France?
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: result
    params: {}
- name: tavily_search
  endpoint:
    path: /tavily/search
    method: POST
- name: user_events
  endpoint:
    path: /api/v1/user/events
    method: GET
    data_selector: events
    params:
      incremental: timestamp
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: agent_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: agent_iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: GET
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /direct/model_request
    method: POST
    data_selector: results
    params: {}
- name: model_request_sync
  endpoint:
    path: /direct/model_request_sync
    method: POST
    data_selector: results
    params: {}
- name: model_request_stream
  endpoint:
    path: /direct/model_request_stream
    method: POST
    data_selector: results
    params: {}
- name: model_request_stream_sync
  endpoint:
    path: /direct/model_request_stream_sync
    method: POST
    data_selector: results
    params: {}
- name: joke_selection_agent
  endpoint:
    path: /example/joke_selection
    method: GET
    data_selector: output
    params: {}
- name: joke_generation_agent
  endpoint:
    path: /example/joke_generation
    method: GET
    data_selector: output
    params: {}
- name: flight_search_agent
  endpoint:
    path: /example/flight_search
    method: GET
    data_selector: output
    params: {}
- name: seat_preference_agent
  endpoint:
    path: /example/seat_preference
    method: GET
    data_selector: output
    params: {}
- name: sql_agent
  endpoint:
    path: /example/sql
    method: GET
    data_selector: output
    params: {}
- name: router_agent
  endpoint:
    path: /example/router
    method: GET
    data_selector: output
    params: {}
- name: Foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: properties
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
- name: deepseek-chat
  endpoint:
    path: /api/chat
    method: POST
- name: WriteEmail
  endpoint:
    path: /api/v1/write_email
    method: POST
    data_selector: output
    params: {}
- name: Feedback
  endpoint:
    path: /api/v1/feedback
    method: POST
    data_selector: output
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
- name: user_prompt
  endpoint:
    path: /agent/iter
    method: GET
    data_selector: agent_run
    params: {}
- name: run_stream_events
  endpoint:
    path: /run/stream/events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: GET
    data_selector: overrides
    params: {}
- name: sequential_tool_calls
  endpoint:
    path: /sequential_tool_calls
    method: GET
    data_selector: tool_calls
    params: {}
- name: AgentRun
  endpoint:
    path: /agent_run
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
- name: model
  endpoint:
    path: /api/models
    method: GET
    data_selector: models
- name: agent
  endpoint:
    path: /agent
    method: GET
    data_selector: data
    params: {}
- name: weather_forecast
  endpoint:
    path: /v1/weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /v1/weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: output
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
    data_selector: records
    params: {}
- name: FunctionToolset
  endpoint:
    path: /function_toolset
    method: GET
    data_selector: records
- name: Agent
  endpoint:
    path: /agent
    method: GET
    data_selector: records
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
    params: {}
- name: GoogleModel
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: email_writer_agent
  endpoint:
    path: /agents/google-gla:gemini-1.5-pro
    method: POST
    data_selector: output_type
    params: {}
- name: feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: result.output
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: results
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: ModelResponseStreamEvent
  endpoint:
    path: /model_response_stream_event
    method: GET
    data_selector: event
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: DBOSModel
  endpoint:
    path: /services/dbos/model
    method: POST
    data_selector: data
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: results
    params: {}
- name: override
  endpoint:
    path: /override
    method: GET
    data_selector: results
    params: {}
- name: model.request
  endpoint:
    method: POST
- name: model.request_stream
  endpoint:
    method: POST
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
    params: {}
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: nodes
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: mcp_server_anthropic
  endpoint:
    path: /mcp
    method: GET
- name: mcp_server_openai
  endpoint:
    path: /mcp
    method: GET
- name: mcp_server_configured_url
  endpoint:
    path: /mcp/
    method: GET
- name: mcp_server_configured_connector_id
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: result
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: name
- name: get_default_language
  endpoint:
    path: /get_default_language
    method: GET
    data_selector: default_language
- name: get_user_name
  endpoint:
    path: /get_user_name
    method: GET
    data_selector: user_name
- name: tool_definition
  endpoint:
    path: /api/tool_definitions
    method: GET
    data_selector: tool_definitions
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: feedback_graph
  endpoint:
    path: /feedback
    method: POST
    data_selector: result
- name: email
  endpoint:
    path: /email/send
    method: POST
    data_selector: response
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: override
  endpoint:
    path: /override
    method: POST
- name: instructions
  endpoint:
    path: /instructions
    method: POST
- name: system_prompt
  endpoint:
    path: /system_prompt
    method: POST
- name: output_validator
  endpoint:
    path: /output_validator
    method: POST
- name: tool
  endpoint:
    path: /tool
    method: POST
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
    params: {}
- name: AGUIApp
  endpoint:
    path: /ag-ui
    method: GET
    data_selector: records
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run_nodes
  endpoint:
    path: /agent/run/nodes
    method: GET
    data_selector: nodes
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/web_search
    method: GET
    data_selector: search_results
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/code_execution
    method: GET
    data_selector: execution_results
    params: {}
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/url_context
    method: GET
    data_selector: url_contents
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/image_generation
    method: GET
    data_selector: image_results
    params: {}
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/memory
    method: GET
    data_selector: memory_results
    params: {}
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/mcp_server
    method: GET
    data_selector: mcp_server_results
    params: {}
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
- name: wrapped_request_step
  endpoint:
    path: /model.request
    method: POST
- name: wrapped_request_stream_step
  endpoint:
    path: /model.request_stream
    method: POST
- name: run_stream
  endpoint:
    path: /pydantic_ai/run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /pydantic_ai/run_stream_events
    method: POST
    data_selector: result
- name: iter
  endpoint:
    path: /pydantic_ai/iter
    method: POST
    data_selector: result
- name: call_tool
  endpoint:
    path: /call_tool
    method: POST
    data_selector: ToolResult
    params: {}
- name: request
  endpoint:
    path: /request
    method: POST
    data_selector: ModelResponse
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: mcp_server
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /direct/model_request
    method: POST
    data_selector: response
    params: {}
- name: model_request_sync
  endpoint:
    path: /direct/model_request_sync
    method: POST
    data_selector: response
    params: {}
- name: model_request_stream
  endpoint:
    path: /direct/model_request_stream
    method: POST
    data_selector: response
    params: {}
- name: model_request_stream_sync
  endpoint:
    path: /direct/model_request_stream_sync
    method: POST
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /result/messages
    method: GET
    data_selector: messages
- name: joke_factory
  endpoint:
    path: ''
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: ''
    method: GET
    data_selector: text
    params:
      count: count
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: result
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: name
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: output
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
- name: gemini_model
  endpoint:
    path: /generateContent
    method: POST
    data_selector: results
    params: {}
- name: deepseek-chat
  endpoint:
    path: /api/chat
    method: POST
- name: vending_machine
  endpoint:
    path: /vending_machine
    method: POST
    data_selector: result
    params: {}
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: POST
    data_selector: result
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: output
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter_agent
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin/tools/web_search
    method: POST
    data_selector: response
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /builtin/tools/code_execution
    method: POST
    data_selector: response
    params: {}
- name: UrlContextTool
  endpoint:
    path: /builtin/tools/url_context
    method: POST
    data_selector: response
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /builtin/tools/image_generation
    method: POST
    data_selector: response
    params: {}
- name: MemoryTool
  endpoint:
    path: /builtin/tools/memory
    method: POST
    data_selector: response
    params: {}
- name: MCPServerTool
  endpoint:
    path: /builtin/tools/mcp_server
    method: POST
    data_selector: response
    params: {}
- name: duckduckgo_search
  endpoint:
    path: duckduckgo_search
    method: None
    data_selector: None
    params: {}
- name: tavily_search
  endpoint:
    path: tavily_search
    method: None
    data_selector: None
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: nodes
    params: {}
- name: PrefectModel
  endpoint:
    path: /pydantic_ai/PrefectModel
    method: GET
    data_selector: model
    params: {}
- name: model_request
  endpoint:
    path: /request
    method: POST
- name: model_request_stream
  endpoint:
    path: /request_stream
    method: GET
- name: TaskConfig
  endpoint:
    data_selector: Configuration for a task in Prefect.
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params:
      location: location
      forecast_date: forecast_date
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic_weather
    params:
      location: location
      forecast_date: forecast_date
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
    data_selector: result
    params: {}
- name: joke_factory
  endpoint:
    path: /
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /
    method: GET
    data_selector: text
    params:
      count: count
- name: Tool Output
  endpoint:
    path: /tool/output
    method: GET
    data_selector: records
- name: Native Output
  endpoint:
    path: /native/output
    method: GET
    data_selector: records
- name: Prompted Output
  endpoint:
    path: /prompted/output
    method: GET
    data_selector: records
- name: foobar
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: get_preferred_language
  endpoint:
    path: /deferred_toolset/get_preferred_language
    method: GET
    data_selector: result
    params: {}
- name: GoogleModel
  endpoint:
    path: /generateContent
    method: POST
    data_selector: output
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: email_writer_agent
  endpoint:
    path: /api/v1/email_writer
    method: POST
    data_selector: output
    params: {}
- name: feedback_agent
  endpoint:
    path: /api/v1/feedback
    method: POST
    data_selector: output
    params: {}
- name: email_feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: result.output
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: run_stream_events
  endpoint:
    path: /run/stream/events
    method: GET
- name: iter
  endpoint:
    path: /iter
    method: GET
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: POST
    data_selector: overridden
    params: {}
- name: sequential_tool_calls
  endpoint:
    path: /sequential_tool_calls
    method: POST
    data_selector: sequential
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
- name: messages_to_otel_events
  endpoint:
    path: /pydantic_ai/messages_to_otel_events
    method: POST
    data_selector: events
    params: {}
- name: EventStreamHandler
  endpoint:
    path: /pydantic_ai/event_stream_handler
    method: POST
    data_selector: events
    params: {}
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: model_response_stream_event
  endpoint:
    path: /stream_response
    method: GET
    data_selector: ModelResponseStreamEvent
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /run
    method: POST
    data_selector: output
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: wrapped_request_step
  endpoint:
    path: /model/request
    method: GET
- name: wrapped_request_stream_step
  endpoint:
    path: /model/request_stream
    method: GET
- name: AgentRun
  endpoint:
    path: /AgentRun
    method: GET
    data_selector: nodes
    params: {}
- name: LangChainTool
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/ext/langchain.py
    method: GET
    data_selector: Tool
    params: {}
- name: ACI.dev Tool
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/ext/aci.py
    method: GET
    data_selector: Tool
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: mcp_server
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: result
    params: {}
- name: image_input
  endpoint:
    path: /image/input
    method: POST
    data_selector: result
    params: {}
- name: audio_input
  endpoint:
    path: /audio/input
    method: POST
    data_selector: result
    params: {}
- name: video_input
  endpoint:
    path: /video/input
    method: POST
    data_selector: result
    params: {}
- name: document_input
  endpoint:
    path: /document/input
    method: POST
    data_selector: result
    params: {}
- name: RunResult
  endpoint:
    path: /run_result
    method: GET
    data_selector: result
    params: {}
- name: StreamedRunResult
  endpoint:
    path: /streamed_run_result
    method: GET
    data_selector: result
    params: {}
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
    params: {}
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: properties
    params:
      required:
      - x
      - y
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: email_writer_agent
  endpoint:
    path: /agents/email_writer
    method: POST
    data_selector: output
- name: Feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run/ag/ui
    method: POST
    data_selector: streaming
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: run_stream_events
  endpoint:
    path: /agent/run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /agent/iter
    method: GET
    data_selector: nodes
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: results
    params: {}
- name: agent_run
  endpoint:
    path: /agent_run
    method: POST
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /web_search
    method: GET
    data_selector: tool_parameters
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /code_execution
    method: POST
    data_selector: tool_parameters
    params: {}
- name: UrlContextTool
  endpoint:
    path: /url_context
    method: GET
    data_selector: tool_parameters
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /image_generation
    method: POST
    data_selector: tool_parameters
    params: {}
- name: MemoryTool
  endpoint:
    path: /memory
    method: POST
    data_selector: tool_parameters
    params: {}
- name: MCPServerTool
  endpoint:
    path: /mcp_server
    method: POST
    data_selector: tool_parameters
    params: {}
- name: tavily_search
  endpoint:
    path: /tavily_search
    method: GET
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent_run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: nodes
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: output
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: document_state
  endpoint:
    path: /document/state
    method: POST
    data_selector: state
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: sum
  endpoint:
    path: /tools/sum
    method: POST
    data_selector: result
    params: {}
- name: hitchhiker
  endpoint:
    path: /tools/hitchhiker
    method: POST
    data_selector: result
    params: {}
- name: greet
  endpoint:
    path: /tools/greet
    method: POST
    data_selector: result
    params: {}
- name: roll_dice
  endpoint:
    path: /tools/roll_dice
    method: POST
    data_selector: result
    params: {}
- name: get_player_name
  endpoint:
    path: /tools/get_player_name
    method: POST
    data_selector: result
    params: {}
- name: greeting
  endpoint:
    path: /greet
    method: POST
    data_selector: output
    params: {}
- name: toolset
  endpoint:
    path: /toolset
    method: POST
    data_selector: tools
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: output
- name: gemini_model
  endpoint:
    path: /v1/models/{model_id}
    method: GET
    data_selector: model
    params: {}
- name: deepseek-chat
  endpoint:
    path: /chat
    method: POST
- name: WriteEmail
  endpoint:
    path: /write-email
    method: POST
    data_selector: email
    params: {}
- name: Feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: AG-UI run input
- name: run_ag_ui
  endpoint:
    path: /run/ag/ui
    method: POST
    data_selector: event_chunks
- name: agent
  endpoint:
    path: /agent/iter
    method: POST
    data_selector: results
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/WebSearchTool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/CodeExecutionTool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/UrlContextTool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/ImageGenerationTool
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/MemoryTool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/MCPServerTool
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params: {}
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params: {}
- name: agent_run_sync
  endpoint:
    path: /agent/run_sync
    method: POST
    data_selector: result
    params: {}
- name: agent_run_stream
  endpoint:
    path: /agent/run_stream
    method: POST
    data_selector: result
    params: {}
- name: agent_run_stream_events
  endpoint:
    path: /agent/run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /agent/run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /agent/run_stream
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: agent_run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: events
    params: {}
- name: override
  endpoint:
    path: /override
    method: GET
    data_selector: overrides
    params: {}
- name: wrapped_request_step
  endpoint:
    method: GET
- name: wrapped_request_stream_step
  endpoint:
    method: GET
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: agent_run_sync
  endpoint:
    path: /agent/run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
- name: iter
  endpoint:
    path: /iter
    method: POST
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: request
  endpoint:
    path: /request
    method: POST
- name: request_stream
  endpoint:
    path: /request_stream
    method: POST
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
- name: support_agent
  endpoint:
    path: /api/support_agent
    method: POST
    data_selector: result
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: state
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: POST
    data_selector: forecast
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: user_id
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model-request
    method: POST
    data_selector: parts
    params: {}
- name: joke_selection_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
    params:
      count: count
- name: flight_search_agent
  endpoint:
    path: flight_search
    method: GET
    data_selector: output
    params:
      origin: origin
      destination: destination
- name: seat_preference_agent
  endpoint:
    path: seat_preference
    method: GET
    data_selector: output
    params:
      seat: seat
- name: ToolDefinition
  endpoint:
    path: /
    method: GET
    data_selector: ToolDefinition
    params: {}
- name: GoogleModel
  endpoint:
    path: /v1/models
    method: GET
- name: HuggingFaceModel
  endpoint:
    path: /v1/huggingface/models
    method: GET
- name: MistralModel
  endpoint:
    path: /v1/mistral/models
    method: GET
- name: OpenAIChatModel
  endpoint:
    path: /v1/openai/models
    method: GET
- name: deepseek-chat
  endpoint:
    path: /path/to/deepseek/endpoint
    method: POST
- name: email_writer_agent
  endpoint:
    path: /google-gla:gemini-1.5-pro
    method: POST
- name: run_ag_ui
  endpoint:
    path: /pydantic_ai/run_ag_ui
    method: POST
    data_selector: streaming
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: event
    params: {}
- name: run_stream_events
  endpoint:
    path: /agent/run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /agent/iter
    method: GET
    data_selector: nodes
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: all_messages
  endpoint:
    path: /all_messages
    method: GET
    data_selector: messages
    params: {}
- name: all_messages_json
  endpoint:
    path: /all_messages_json
    method: GET
    data_selector: bytes
    params: {}
- name: new_messages
  endpoint:
    path: /new_messages
    method: GET
    data_selector: messages
    params: {}
- name: new_messages_json
  endpoint:
    path: /new_messages_json
    method: GET
    data_selector: bytes
    params: {}
- name: response
  endpoint:
    path: /response
    method: GET
    data_selector: ModelResponse
    params: {}
- name: usage
  endpoint:
    path: /usage
    method: GET
    data_selector: RunUsage
    params: {}
- name: timestamp
  endpoint:
    path: /timestamp
    method: GET
    data_selector: datetime
    params: {}
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: POST
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: wrapped_request_step
  endpoint:
    path: /model/request
    method: GET
- name: wrapped_request_stream_step
  endpoint:
    path: /model/request_stream
    method: GET
- name: agent_run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params:
      user_prompt: user_prompt
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: AgentExtension
  endpoint:
    path: uri
    method: GET
    data_selector: description
- name: Skill
  endpoint:
    path: id
    method: GET
    data_selector: name
- name: Artifact
  endpoint:
    path: artifact_id
    method: GET
    data_selector: parts
- name: PushNotificationConfig
  endpoint:
    path: url
    method: GET
    data_selector: token
- name: TaskPushNotificationConfig
  endpoint:
    path: id
    method: GET
    data_selector: push_notification_config
- name: Message
  endpoint:
    path: role
    method: GET
    data_selector: parts
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: flight_number
    params:
      origin: origin
      destination: destination
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: jokes
    params:
      count: count
- name: tool
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: foobar
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: email_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: response
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: output
- name: WebSearchTool
  endpoint:
    path: /web_search
    method: POST
    data_selector: tool_data
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /code_execution
    method: POST
    data_selector: tool_data
    params: {}
- name: UrlContextTool
  endpoint:
    path: /url_context
    method: POST
    data_selector: tool_data
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /image_generation
    method: POST
    data_selector: tool_data
    params: {}
- name: MemoryTool
  endpoint:
    path: /memory
    method: POST
    data_selector: tool_data
    params: {}
- name: MCPServerTool
  endpoint:
    path: /mcp_server
    method: POST
    data_selector: tool_data
    params: {}
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
- name: agent
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
    params: {}
- name: agent
  endpoint:
    path: /agent/run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /agent/iter
    method: POST
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /agent/override
    method: POST
    data_selector: overridden
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run_result
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: task
  endpoint:
    path: /tasks
    method: POST
    data_selector: task
    params: {}
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: task
    params: {}
- name: get_task
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: task
    params: {}
- name: format_as_xml
  endpoint:
    path: /pydantic_ai/format_as_xml
    method: GET
    data_selector: records
    params: {}
- name: support_agent
  endpoint:
    path: /api/models/openai/gpt-5
    method: POST
    data_selector: output
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: image_input
  endpoint:
    path: /v1/image/input
    method: POST
    data_selector: result
    params: {}
- name: audio_input
  endpoint:
    path: /v1/audio/input
    method: POST
    data_selector: result
    params: {}
- name: video_input
  endpoint:
    path: /v1/video/input
    method: POST
    data_selector: result
    params: {}
- name: document_input
  endpoint:
    path: /v1/document/input
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: frontend_tool_definitions
  endpoint:
    path: /deferred/tools
    method: GET
    data_selector: tools
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: events
- name: AgentRunResultEvent
  endpoint:
    path: /AgentRunResultEvent
    method: GET
    data_selector: results
- name: next_node
  endpoint:
    path: /next_node
    method: GET
    data_selector: next_node
- name: result
  endpoint:
    path: /result
    method: GET
    data_selector: result
- name: usage
  endpoint:
    path: /usage
    method: GET
    data_selector: usage
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
    data_selector: records
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
    data_selector: records
    params: {}
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
    data_selector: records
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
    data_selector: records
    params: {}
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
    data_selector: records
    params: {}
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
    data_selector: records
    params: {}
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: wrapped_request_step
  endpoint:
    path: /model/request
    method: POST
- name: wrapped_request_stream_step
  endpoint:
    path: /model/request_stream
    method: GET
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: output
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: MCPServerTool
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: get_default_language
  endpoint:
    path: /get_default_language
    method: GET
    data_selector: result
- name: get_user_name
  endpoint:
    path: /get_user_name
    method: GET
    data_selector: result
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result
    params: {}
- name: google_models
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: agent_run
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
- name: stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: POST
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: output
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/WebSearchTool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/CodeExecutionTool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/UrlContextTool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/ImageGenerationTool
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/MemoryTool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/MCPServerTool
    method: GET
- name: tavily_search
  endpoint:
    path: /tavily/search
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
- name: iter
  endpoint:
    path: /iter
    method: POST
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
- name: DocumentState
  endpoint:
    path: /ag_ui/state
    method: POST
    data_selector: state
- name: CustomEvent
  endpoint:
    path: /ag_ui/events
    method: POST
    data_selector: events
- name: mcp_server_tool
  endpoint:
    path: /mcp
    method: GET
- name: calculate_answer
  endpoint:
    path: /calculate_answer
    method: POST
    data_selector: result
- name: joke
  endpoint:
    path: /jokes
    method: GET
    data_selector: joke
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result.messages
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result.output
    params: {}
- name: sum
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: hitchhiker
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: greet
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: roll_dice
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: get_player_name
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: toolset
  endpoint:
    path: /toolset
    method: GET
    data_selector: tools
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
    params: {}
- name: vending_machine
  endpoint:
    path: /vending_machine
    method: POST
    data_selector: result
    params: {}
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_input
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: input_data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: next_node
  endpoint:
    path: /api/next_node
    method: GET
    data_selector: data
    params: {}
- name: result
  endpoint:
    path: /api/result
    method: GET
    data_selector: data
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: POST
    data_selector: tool
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: POST
    data_selector: tool
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: POST
    data_selector: tool
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: POST
    data_selector: tool
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: POST
    data_selector: tool
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: POST
    data_selector: tool
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run/sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run/stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run/stream/events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: wrapped_request_step
  endpoint:
    path: wrapped_request_step
    method: async
    data_selector: messages
- name: wrapped_request_stream_step
  endpoint:
    path: wrapped_request_stream_step
    method: async
    data_selector: streamed_response
- name: run
  endpoint:
    path: /pydantic_ai/Agent/run
    method: POST
    data_selector: output
    params: {}
- name: run_sync
  endpoint:
    path: /pydantic_ai/Agent/run_sync
    method: POST
    data_selector: output
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: records
    params: {}
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: submitted
    params: {}
- name: get_task
  endpoint:
    path: /tasks/get
    method: POST
    data_selector: task
    params: {}
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: canceled
    params: {}
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: working
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic_data
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
    data_selector: results
    params: {}
- name: joke
  endpoint:
    path: /jokes
    method: GET
    data_selector: records
    params: {}
- name: system_prompt
  endpoint:
    path: /system_prompt
    method: GET
    data_selector: prompt
    params: {}
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: vending_machine
  endpoint:
    path: /vending_machine
    method: GET
    data_selector: records
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: GET
    data_selector: records
- name: email_feedback
  endpoint:
    path: /v1/feedback
    method: GET
    data_selector: data
    params:
      incremental: created_at
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /web_search
    method: POST
    data_selector: results
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /code_execution
    method: POST
    data_selector: results
    params: {}
- name: UrlContextTool
  endpoint:
    path: /url_context
    method: POST
    data_selector: results
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /image_generation
    method: POST
    data_selector: results
    params: {}
- name: MemoryTool
  endpoint:
    path: /memory
    method: POST
    data_selector: results
    params: {}
- name: MCPServerTool
  endpoint:
    path: /mcp_server
    method: POST
    data_selector: results
    params: {}
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: model_response
  endpoint:
    path: /model_response
    method: GET
    data_selector: response
    params: {}
- name: usage
  endpoint:
    path: /usage
    method: GET
    data_selector: usage
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: get_tools
  endpoint:
    path: /get_tools
    method: GET
    data_selector: tools
    params: {}
- name: call_tool
  endpoint:
    path: /call_tool
    method: POST
    data_selector: result
    params: {}
- name: model_request
  endpoint:
    path: /model/request
    method: POST
- name: model_request_stream
  endpoint:
    path: /model/request_stream
    method: POST
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: send_message
  endpoint:
    path: tasks/send
    method: POST
- name: get_task
  endpoint:
    path: tasks/get
    method: POST
- name: cancel_task
  endpoint:
    path: tasks/cancel
    method: POST
- name: push_notification_get
  endpoint:
    path: tasks/pushNotification/get
    method: GET
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: document
- name: CustomEvent
  endpoint:
    path: /ag_ui_tool_events
    method: POST
    data_selector: events
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: user_id
- name: message
  endpoint:
    path: /messages
    method: POST
    data_selector: message
- name: github
  endpoint:
    path: /mcp
    method: GET
- name: google-calendar
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
    params: {}
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: output
    params: {}
- name: seat_preference
  endpoint:
    path: /seat_preference
    method: GET
    data_selector: output
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
- name: get_user_name
  endpoint:
    path: /get_user_name
    method: GET
    data_selector: user_name
- name: get_default_language
  endpoint:
    path: /get_default_language
    method: GET
    data_selector: default_language
- name: get_preferred_language
  endpoint:
    path: /get_preferred_language
    method: POST
    data_selector: output
    params: {}
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /run_stream_events
    method: POST
- name: AgentRunResultEvent
  endpoint:
    path: /run_stream_events
    method: POST
- name: next_node
  endpoint:
    path: /next_node
    method: GET
    data_selector: node
    params: {}
- name: result
  endpoint:
    path: /result
    method: GET
    data_selector: result
    params: {}
- name: usage
  endpoint:
    path: /usage
    method: GET
    data_selector: usage
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: agent_run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: agent_run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: agent_run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: tasks
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: records
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: records
- name: video
  endpoint:
    path: /video-url
    method: GET
    data_selector: video
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: user
  endpoint:
    path: /get_user_by_name
    method: GET
- name: message
  endpoint:
    path: /send_message
    method: POST
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: POST
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: toolset
  endpoint:
    path: /toolset
    method: GET
    data_selector: tools
    params: {}
- name: get_preferred_language
  endpoint:
    path: /get_preferred_language
    method: POST
    data_selector: result
    params: {}
- name: model
  endpoint:
    path: /projects/{project}/locations/{location}/publishers/{publisher}/models/{model_id}
    method: GET
    data_selector: models
    params: {}
- name: email_feedback
  endpoint:
    path: /api/v1/email/feedback
    method: POST
    data_selector: result
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: StreamingResponse
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: GET
    data_selector: 'null'
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: messages_to_otel_events
  endpoint:
    path: /pydantic_ai/messages_to_otel_events
    method: POST
    data_selector: events
    params: {}
- name: EventStreamHandler
  endpoint:
    path: /pydantic_ai/event_stream_handler
    method: POST
    data_selector: events
    params: {}
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: output
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: output
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: output
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: wrapped_request_step
  endpoint:
    path: /model/request
    method: POST
    data_selector: result
- name: wrapped_request_stream_step
  endpoint:
    path: /model/request_stream
    method: POST
    data_selector: result
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
      event_stream_handler: null
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: results
    params: {}
- name: ModelRequest
  endpoint:
    path: /model/request
    method: POST
    data_selector: response
    params: {}
- name: video_url
  endpoint:
    path: /video
    method: GET
    data_selector: url
    params: {}
- name: audio_url
  endpoint:
    path: /audio
    method: GET
    data_selector: url
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: document
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: forecast
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: github
  endpoint:
    path: /mcp/
    method: GET
    data_selector: ''
    params: {}
- name: google-calendar
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
    data_selector: ''
    params: {}
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
    params: {}
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: sum
  endpoint:
    path: foobar
    method: GET
    data_selector: result
    params:
      required:
      - a
      - b
- name: hitchhiker
  endpoint:
    path: hitchhiker
    method: GET
    data_selector: result
    params: {}
- name: greet
  endpoint:
    path: greet
    method: GET
    data_selector: result
    params:
      required:
      - name
- name: roll_dice
  endpoint:
    path: roll_dice
    method: GET
    data_selector: result
    params: {}
- name: get_player_name
  endpoint:
    path: get_player_name
    method: GET
    data_selector: result
    params: {}
- name: foobar
  endpoint:
    path: /tool/foobar
    method: GET
    data_selector: properties
    params:
      required:
      - x
      - y
- name: run_agent
  endpoint:
    path: /api/run_agent
    method: POST
    data_selector: output
    params: {}
- name: google_model
  endpoint:
    path: /generateContent
    method: POST
    data_selector: model_output
    params: {}
- name: model_response
  endpoint:
    path: /v1/models/response
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: email_feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: result.output
    params: {}
- name: email_ok
  endpoint:
    path: /email/ok
    method: POST
    data_selector: result.output
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: run_agent
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
    params: {}
- name: all_messages
  endpoint:
    path: /all_messages
    method: GET
    data_selector: messages
    params: {}
- name: all_messages_json
  endpoint:
    path: /all_messages_json
    method: GET
    data_selector: bytes
    params: {}
- name: new_messages
  endpoint:
    path: /new_messages
    method: GET
    data_selector: messages
    params: {}
- name: new_messages_json
  endpoint:
    path: /new_messages_json
    method: GET
    data_selector: bytes
    params: {}
- name: response
  endpoint:
    path: /response
    method: GET
    data_selector: ModelResponse
    params: {}
- name: usage
  endpoint:
    path: /usage
    method: GET
    data_selector: RunUsage
    params: {}
- name: timestamp
  endpoint:
    path: /timestamp
    method: GET
    data_selector: datetime
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
    data_selector: tool_info
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
    data_selector: tool_info
    params: {}
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
    data_selector: tool_info
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
    data_selector: tool_info
    params: {}
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
    data_selector: tool_info
    params: {}
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
    data_selector: tool_info
    params: {}
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: model_response
  endpoint:
    path: /model/response
    method: GET
    data_selector: response
- name: usage
  endpoint:
    path: /model/usage
    method: GET
    data_selector: usage
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: wrapped_request_step
  endpoint:
    path: /model/request
    method: POST
    data_selector: messages
    params: {}
- name: wrapped_request_stream_step
  endpoint:
    path: /model/request_stream
    method: GET
    data_selector: streamed_response
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params:
      user_prompt: What is the capital of the UK?
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params:
      user_prompt: What is the capital of France?
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: data
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: video_url
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
    params: {}
- name: audio_url
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
    params: {}
- name: image_url
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui/document_state
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: sum
  endpoint:
    path: /sum
    method: POST
    data_selector: result
    params: {}
- name: hitchhiker
  endpoint:
    path: /hitchhiker
    method: GET
    data_selector: response
    params: {}
- name: greet
  endpoint:
    path: /greet
    method: POST
    data_selector: greeting
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
- name: AgentRunResultEvent
  endpoint:
    path: /run_result_event
    method: GET
    data_selector: result
- name: UserPromptNode
  endpoint:
    path: /user_prompt
    method: GET
    data_selector: user_prompt
- name: ModelRequestNode
  endpoint:
    path: /model_request
    method: POST
    data_selector: model_request
- name: CallToolsNode
  endpoint:
    path: /call_tools
    method: POST
    data_selector: model_response
- name: EndNode
  endpoint:
    path: /end
    method: GET
    data_selector: final_result
- name: all_messages
  endpoint:
    path: /all_messages
    method: GET
    data_selector: messages
- name: all_messages_json
  endpoint:
    path: /all_messages_json
    method: GET
    data_selector: bytes
- name: new_messages
  endpoint:
    path: /new_messages
    method: GET
    data_selector: messages
- name: new_messages_json
  endpoint:
    path: /new_messages_json
    method: GET
    data_selector: bytes
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: override
  endpoint:
    path: /override
    method: POST
    data_selector: none
- name: agent_run
  endpoint:
    path: /api/agent/run
    method: POST
    data_selector: result
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: submitted
    params: {}
- name: get_task
  endpoint:
    path: /tasks/get
    method: POST
    data_selector: task
    params: {}
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: canceled
    params: {}
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: working
    params: {}
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
    params: {}
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
    params: {}
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
    params: {}
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
    params: {}
- name: binary_data
  endpoint:
    path: /binary/content
    method: POST
    data_selector: data
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: documents
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: weather_forecast
  endpoint:
    path: /forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: agent
  endpoint:
    path: /
    method: POST
    data_selector: output
    params: {}
- name: model_request
  endpoint:
    path: /model_request
    method: POST
    data_selector: output
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result
    params: {}
- name: joke_selection_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
    params:
      count: count
- name: flight_search_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
    params:
      origin: origin
      destination: destination
- name: seat_preference_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
    params:
      seat: seat
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: greet
  endpoint:
    path: /
    method: GET
    data_selector: response
- name: roll_dice
  endpoint:
    path: /roll
    method: GET
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: streaming_event_chunks
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: results
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: result
- name: all_messages
  endpoint:
    path: all_messages
    method: GET
    data_selector: List of messages.
- name: all_messages_json
  endpoint:
    path: all_messages_json
    method: GET
    data_selector: JSON bytes representing the messages.
- name: new_messages
  endpoint:
    path: new_messages
    method: GET
    data_selector: List of new messages.
- name: new_messages_json
  endpoint:
    path: new_messages_json
    method: GET
    data_selector: JSON bytes representing the new messages.
- name: usage
  endpoint:
    path: usage
    method: GET
    data_selector: Run usage.
- name: timestamp
  endpoint:
    path: timestamp
    method: GET
    data_selector: Timestamp of last response.
- name: capture_run_messages
  endpoint:
    path: capture_run_messages
    method: GET
    data_selector: Messages used in a run.
- name: WebSearchTool
  endpoint:
    kind: web_search
    search_context_size: medium
    user_location: WebSearchUserLocation
    blocked_domains: []
    allowed_domains: []
    max_uses: null
- name: CodeExecutionTool
  endpoint:
    kind: code_execution
- name: UrlContextTool
  endpoint:
    kind: url_context
- name: ImageGenerationTool
  endpoint:
    background: auto
    input_fidelity: null
    moderation: auto
    output_compression: 100
    output_format: png
    partial_images: 0
    quality: auto
    size: auto
    kind: image_generation
- name: MemoryTool
  endpoint:
    kind: memory
- name: MCPServerTool
  endpoint:
    id: string
    url: string
    authorization_token: null
    description: null
    allowed_tools: []
    headers: {}
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: model_response_stream_event
  endpoint:
    path: /pydantic_ai/stream
    method: GET
    data_selector: event
    params: {}
- name: agent_run
  endpoint:
    path: /v1/agent/run
    method: POST
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: output
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
      event_stream_handler: null
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
      event_stream_handler: null
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: submitted
- name: get_task
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: task
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: canceled
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: working
- name: Skill
  endpoint:
    path: /skills
    method: GET
- name: Artifact
  endpoint:
    path: /artifacts
    method: POST
- name: PushNotificationConfig
  endpoint:
    path: /push-notifications
    method: POST
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: url
- name: BinaryContent
  endpoint:
    path: /from_data_uri
    method: POST
    data_selector: BinaryContent
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: joke_factory
  endpoint:
    path: /
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /
    method: GET
    data_selector: text
    params:
      count: count
- name: tool
  endpoint:
    path: /tool
    method: POST
    data_selector: tool_definition
- name: default_language
  endpoint:
    path: /get_default_language
    method: GET
    data_selector: greeting
    params: {}
- name: user_name
  endpoint:
    path: /get_user_name
    method: GET
    data_selector: user_name
    params: {}
- name: get_preferred_language
  endpoint:
    path: /deferred_tools/get_preferred_language
    method: GET
    data_selector: language
    params: {}
- name: groq_model
  endpoint:
    path: /groq/models
    method: GET
    data_selector: models
- name: huggingface_model
  endpoint:
    path: /huggingface/models
    method: GET
    data_selector: models
- name: mistral_model
  endpoint:
    path: /mistral/models
    method: GET
    data_selector: models
- name: openai_model
  endpoint:
    path: /openai/models
    method: GET
    data_selector: models
- name: fallback_model
  endpoint:
    path: /
    method: GET
    data_selector: output
    params: {}
- name: EmailRequiresWrite
  endpoint:
    path: /email/write
    method: POST
    data_selector: feedback
- name: EmailOk
  endpoint:
    path: /email/ok
    method: GET
    data_selector: output
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: streaming event chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user_prompt
  endpoint:
    path: /run_stream
    method: POST
    data_selector: output
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: output
    params: {}
- name: UserPromptNode
  endpoint:
    path: UserPromptNode
    method: GET
    data_selector: user_prompt
- name: ModelRequestNode
  endpoint:
    path: ModelRequestNode
    method: GET
    data_selector: request
- name: CallToolsNode
  endpoint:
    path: CallToolsNode
    method: GET
    data_selector: model_response
- name: End
  endpoint:
    path: End
    method: GET
    data_selector: data
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_async
  endpoint:
    path: /run/async
    method: POST
    data_selector: output
    params: {}
- name: run_sync
  endpoint:
    path: /run/sync
    method: POST
    data_selector: output
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: records
    params: {}
- name: tasks_send
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: submitted
    params: {}
- name: tasks_get
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: tasks
    params: {}
- name: tasks_cancel
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: canceled
    params: {}
- name: tasks_pushNotification_get
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: working
    params: {}
- name: video_url
  endpoint:
    path: /video-url
    method: GET
- name: audio_url
  endpoint:
    path: /audio-url
    method: GET
- name: image_url
  endpoint:
    path: /image-url
    method: GET
- name: document_url
  endpoint:
    path: /document-url
    method: GET
- name: binary_content
  endpoint:
    path: /binary-content
    method: GET
- name: BinaryContent
  endpoint:
    path: /from_data_uri
    method: POST
    data_selector: data
    params: {}
- name: BinaryImage
  endpoint:
    path: /BinaryImage
    method: POST
    data_selector: data
    params: {}
- name: ToolReturn
  endpoint:
    path: /ToolReturn
    method: GET
    data_selector: return_value
    params: {}
- name: UserPromptPart
  endpoint:
    path: /UserPromptPart
    method: GET
    data_selector: content
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: document
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: forecast
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: model_request
  endpoint:
    path: /model_request
    method: POST
    data_selector: response
    params: {}
- name: function_toolset
  endpoint:
    path: /function/toolset
    method: GET
    data_selector: tools
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result
    params: {}
- name: deepseek-chat
  endpoint:
    path: /chat
    method: POST
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: GET
    data_selector: graph
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run/ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: agent
  endpoint:
    path: /pydantic_ai/agent
    method: GET
    data_selector: nodes
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: agent_run
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: results
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: results
- name: override
  endpoint:
    path: /override
    method: POST
    data_selector: results
- name: sequential_tool_calls
  endpoint:
    path: /sequential_tool_calls
    method: POST
    data_selector: results
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: nodes
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: messages_to_otel_events
  endpoint:
    path: /messages_to_otel_events
    method: POST
    data_selector: events
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params:
      user_prompt: None
      output_type: None
      message_history: None
      deferred_tool_results: None
      model: None
      deps: None
      model_settings: None
      usage_limits: None
      usage: None
      infer_name: true
      toolsets: None
      builtin_tools: None
      event_stream_handler: None
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params:
      user_prompt: None
      output_type: None
      message_history: None
      deferred_tool_results: None
      model: None
      deps: None
      model_settings: None
      usage_limits: None
      usage: None
      infer_name: true
      toolsets: None
      builtin_tools: None
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params:
      user_prompt: None
      output_type: None
      message_history: None
      deferred_tool_results: None
      model: None
      deps: None
      model_settings: None
      usage_limits: None
      usage: None
      infer_name: true
      toolsets: None
      builtin_tools: None
- name: agent_run
  endpoint:
    path: /v1/agents/run
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
      event_stream_handler: null
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
      event_stream_handler: null
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: results
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params:
      user_prompt: What is the capital of France?
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: submitted
    params: {}
- name: get_task
  endpoint:
    path: /tasks/get
    method: POST
    data_selector: task
    params: {}
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: canceled
    params: {}
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: working
    params: {}
- name: AgentExtension
  endpoint:
    path: uri
    method: GET
- name: Skill
  endpoint:
    path: id
    method: GET
- name: Artifact
  endpoint:
    path: artifact_id
    method: GET
- name: PushNotificationConfig
  endpoint:
    path: url
    method: GET
- name: TaskPushNotificationConfig
  endpoint:
    path: id
    method: GET
- name: Message
  endpoint:
    path: role
    method: GET
- name: TaskStatus
  endpoint:
    path: state
    method: GET
- name: Task
  endpoint:
    path: id
    method: GET
- name: TaskStatusUpdateEvent
  endpoint:
    path: task_id
    method: GET
- name: TaskArtifactUpdateEvent
  endpoint:
    path: task_id
    method: GET
- name: TaskIdParams
  endpoint:
    path: id
    method: GET
- name: TaskQueryParams
  endpoint:
    path: history_length
    method: GET
- name: MessageSendConfiguration
  endpoint:
    path: accepted_output_modes
    method: GET
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: BaseToolReturnPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: Agent
  endpoint:
    path: /api/agent/
    method: POST
    data_selector: data
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: records
    params: {}
- name: forecast
  endpoint:
    path: /v1/forecast
    method: GET
    data_selector: data
    params: {}
- name: historic_weather
  endpoint:
    path: /v1/historic
    method: GET
    data_selector: data
    params: {}
- name: mcp_server
  endpoint:
    path: /mcp
    method: GET
- name: foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /v1
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: iter
  endpoint:
    path: iter
    method: AsyncIterator
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: result
    params: {}
- name: all_messages
  endpoint:
    path: /all_messages
    method: GET
    data_selector: messages
- name: all_messages_json
  endpoint:
    path: /all_messages_json
    method: GET
    data_selector: bytes
- name: new_messages
  endpoint:
    path: /new_messages
    method: GET
    data_selector: messages
- name: new_messages_json
  endpoint:
    path: /new_messages_json
    method: GET
    data_selector: bytes
- name: response
  endpoint:
    path: /response
    method: GET
    data_selector: ModelResponse
- name: usage
  endpoint:
    path: /usage
    method: GET
    data_selector: RunUsage
- name: timestamp
  endpoint:
    path: /timestamp
    method: GET
    data_selector: datetime
- name: capture_run_messages
  endpoint:
    path: /capture_run_messages
    method: GET
    data_selector: list[ModelMessage]
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
    data_selector: records
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
    data_selector: records
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
    data_selector: records
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
    data_selector: records
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
    data_selector: records
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
    data_selector: records
- name: tavily_search_tool
  endpoint:
    path: /tavily_search_tool
    method: POST
    data_selector: results
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: output
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
      event_stream_handler: null
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: output
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
      event_stream_handler: null
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: agent
  endpoint:
    path: /api/v1/agent
    method: POST
    data_selector: data
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: output
    params:
      infer_name: 'true'
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params:
      infer_name: 'true'
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: result
    params:
      infer_name: 'true'
- name: send_task
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: submitted
    params: {}
- name: get_task
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: task_info
    params: {}
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: cancellation_status
    params: {}
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
    data_selector: records
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
    data_selector: records
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
    data_selector: records
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
    data_selector: records
- name: BinaryContent
  endpoint:
    path: /binary-content
    method: GET
    data_selector: records
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: BinaryContent
    params: {}
- name: ThinkingPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py/ThinkingPart
    method: GET
    data_selector: content
    params: {}
- name: FilePart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py/FilePart
    method: GET
    data_selector: content
    params: {}
- name: BaseToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py/BaseToolCallPart
    method: GET
    data_selector: content
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params:
      location: location
      forecast_date: date
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params:
      location: location
      forecast_date: date
- name: mcp_deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result.messages
- name: Fruit
  endpoint:
    path: /tool/fruit
    method: GET
    data_selector: records
- name: Vehicle
  endpoint:
    path: /tool/vehicle
    method: GET
    data_selector: records
- name: foobar
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: get_preferred_language
  endpoint:
    path: /get_preferred_language
    method: GET
    data_selector: user_preferred_language
    params: {}
- name: gemini
  endpoint:
    path: /model/gemini
    method: GET
    data_selector: models
- name: groq
  endpoint:
    path: /model/groq
    method: GET
    data_selector: models
- name: huggingface
  endpoint:
    path: /model/huggingface
    method: GET
    data_selector: models
- name: mistral
  endpoint:
    path: /model/mistral
    method: GET
    data_selector: models
- name: openai
  endpoint:
    path: /model/openai
    method: GET
    data_selector: models
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: email_writer_agent
  endpoint:
    path: /email_writer_agent
    method: POST
    data_selector: output
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: run
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: results
    params:
      output_type: OutputSpec[RunOutputDataT]
      message_history: Sequence[ModelMessage]
      model: Model | KnownModelName | str
      model_settings: ModelSettings | None
      usage_limits: UsageLimits | None
      usage: RunUsage | None
      toolsets: Sequence[AbstractToolset[AgentDepsT]] | None
      builtin_tools: Sequence[AbstractBuiltinTool] | None
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
- name: messages_to_otel_events
  endpoint:
    path: /messages_to_otel_events
    method: POST
    data_selector: events
    params: {}
- name: tavily_search_tool
  endpoint:
    path: /tavily_search_tool
    method: POST
    data_selector: results
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: events
    params: {}
- name: wrapped_request_step
  endpoint:
    path: /model/request
    method: POST
    data_selector: messages
    params: {}
- name: wrapped_request_stream_step
  endpoint:
    path: /model/request_stream
    method: GET
    data_selector: streamed_response
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
- name: get_task
  endpoint:
    path: /tasks/get
    method: POST
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
- name: VideoUrl
  endpoint:
    path: /video/url
    method: GET
    data_selector: url
    params: {}
- name: AudioUrl
  endpoint:
    path: /audio/url
    method: GET
    data_selector: url
    params: {}
- name: ImageUrl
  endpoint:
    path: /image/url
    method: GET
    data_selector: url
    params: {}
- name: DocumentUrl
  endpoint:
    path: /document/url
    method: GET
    data_selector: url
    params: {}
- name: BinaryContent
  endpoint:
    path: /binary/content
    method: GET
    data_selector: data
    params: {}
- name: BinaryContent
  endpoint:
    path: /data_uri
    method: POST
    data_selector: content
    params: {}
- name: BinaryImage
  endpoint:
    path: /binary_image
    method: POST
    data_selector: content
    params: {}
- name: ToolReturn
  endpoint:
    path: /tool_return
    method: POST
    data_selector: return_value
    params: {}
- name: UserPromptPart
  endpoint:
    path: /user_prompt
    method: POST
    data_selector: content
    params: {}
- name: ThinkingPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: FilePart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: BaseToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
- name: thinking_response
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: agent_tool
  endpoint:
    path: /tool/retries=2
    method: GET
    data_selector: ''
    params: {}
- name: mcp_server_anthropic
  endpoint:
    path: /mcp
    method: GET
    data_selector: output
- name: mcp_server_openai
  endpoint:
    path: /mcp
    method: GET
    data_selector: output
- name: mcp_server_configured_url
  endpoint:
    path: /mcp/
    method: GET
    data_selector: output
- name: mcp_server_configured_connector_id
  endpoint:
    path: /mcp/connector_googlecalendar
    method: GET
    data_selector: output
- name: joke_material
  endpoint:
    path: /example/jokes
    method: GET
    data_selector: jokes
    params: {}
- name: validate_output
  endpoint:
    path: /example/validate
    method: POST
    data_selector: output
    params: {}
- name: messages
  endpoint:
    path: /results/messages
    method: GET
    data_selector: all_messages
- name: streamed_messages
  endpoint:
    path: /results/streamed
    method: GET
    data_selector: new_messages
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: text
    params:
      count: count
- name: roll_dice
  endpoint:
    path: /dice/roll
    method: GET
    data_selector: result
- name: get_player_name
  endpoint:
    path: /player/name
    method: GET
    data_selector: name
- name: foobar
  endpoint:
    path: foobar
    method: POST
    data_selector: output
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result
    params: {}
- name: GoogleModel
  endpoint:
    path: /model
    method: GET
- name: deepseek-chat
  endpoint:
    path: /chat
    method: POST
- name: write_email
  endpoint:
    path: /email/write
    method: POST
    data_selector: output
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run/ag_ui
    method: POST
    data_selector: events
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /agent/stream/events
    method: GET
    data_selector: events
- name: AgentRunResultEvent
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
- name: WebSearchTool
  endpoint:
    path: /path/to/web_search_tool
    method: GET
    data_selector: records
- name: CodeExecutionTool
  endpoint:
    path: /path/to/code_execution_tool
    method: GET
    data_selector: records
- name: UrlContextTool
  endpoint:
    path: /path/to/url_context_tool
    method: GET
    data_selector: records
- name: ImageGenerationTool
  endpoint:
    path: /path/to/image_generation_tool
    method: GET
    data_selector: records
- name: MemoryTool
  endpoint:
    path: /path/to/memory_tool
    method: GET
    data_selector: records
- name: MCPServerTool
  endpoint:
    path: /path/to/mcp_server_tool
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params:
      user_prompt: user_prompt
      output_type: output_type
      message_history: message_history
      deferred_tool_results: deferred_tool_results
      model: model
      deps: deps
      model_settings: model_settings
      usage_limits: usage_limits
      usage: usage
      infer_name: infer_name
      toolsets: toolsets
      builtin_tools: builtin_tools
      event_stream_handler: event_stream_handler
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params:
      user_prompt: user_prompt
      output_type: output_type
      message_history: message_history
      deferred_tool_results: deferred_tool_results
      model: model
      deps: deps
      model_settings: model_settings
      usage_limits: usage_limits
      usage: usage
      infer_name: infer_name
      toolsets: toolsets
      builtin_tools: builtin_tools
      event_stream_handler: event_stream_handler
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: video
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: BinaryContent
  endpoint:
    path: /from_data_uri
    method: POST
- name: BinaryImage
  endpoint:
    path: /binary_image
    method: POST
- name: ToolReturn
  endpoint:
    path: /tool_return
    method: POST
- name: UserPromptPart
  endpoint:
    path: /user_prompt
    method: POST
- name: ModelRequest
  endpoint:
    path: /model_request
    method: POST
- name: ThinkingPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: FilePart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: BaseToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: state
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: forecast
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: message
  endpoint:
    path: /messages
    method: POST
    data_selector: result
- name: github
  endpoint:
    path: /mcp/
    method: GET
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: result
    params: {}
- name: model_request_sync
  endpoint:
    path: /model/request_sync
    method: POST
    data_selector: result
    params: {}
- name: model_request_stream
  endpoint:
    path: /model/request_stream
    method: POST
    data_selector: result
    params: {}
- name: model_request_stream_sync
  endpoint:
    path: /model/request_stream_sync
    method: POST
    data_selector: result
    params: {}
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
    params: {}
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params: {}
- name: dice_game
  endpoint:
    path: /dice_game
    method: POST
    data_selector: output
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
    params: {}
- name: gemini
  endpoint:
    path: /v1/models/{model_id}
    method: GET
- name: groq
  endpoint:
    path: /v1/models/{model_id}
    method: GET
- name: huggingface
  endpoint:
    path: /v1/models/{model_id}
    method: GET
- name: mistral
  endpoint:
    path: /v1/models/{model_id}
    method: GET
- name: openai
  endpoint:
    path: /v1/models/{model_id}
    method: GET
- name: CountDown
  endpoint:
    path: /count_down
    method: GET
    data_selector: records
    params: {}
- name: QuestionState
  endpoint:
    path: /question_state
    method: GET
    data_selector: records
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run/ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
- name: AgentRunResultEvent
  endpoint:
    path: /run_result_event
    method: GET
    data_selector: result
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: agent_run
  endpoint:
    method: GET
- name: WebSearchTool
  endpoint:
    path: /web_search
    method: POST
    data_selector: results
- name: CodeExecutionTool
  endpoint:
    path: /code_execution
    method: POST
    data_selector: result
- name: UrlContextTool
  endpoint:
    path: /url_context
    method: GET
    data_selector: content
- name: ImageGenerationTool
  endpoint:
    path: /image_generation
    method: POST
    data_selector: image
- name: MemoryTool
  endpoint:
    path: /memory
    method: POST
    data_selector: memory
- name: MCPServerTool
  endpoint:
    path: /mcp_server
    method: POST
    data_selector: server
- name: tavily_search_tool
  endpoint:
    path: /tavily_search_tool
    method: POST
    data_selector: response
    params: {}
- name: model_response_stream_event
  endpoint:
    path: /pydantic_ai/stream
    method: GET
    data_selector: events
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: output
    params: {}
- name: agent
  endpoint:
    path: /agent/execute
    method: POST
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: response
    params: {}
- name: model_request_stream
  endpoint:
    path: /model/request_stream
    method: POST
    data_selector: stream
    params: {}
- name: agent_run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
      event_stream_handler: null
- name: run_stream
  endpoint:
    method: POST
- name: run_stream_events
  endpoint:
    method: POST
- name: iter
  endpoint:
    method: POST
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: nodes
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: video
  endpoint:
    path: /services/data/vXX.X/sobjects/VideoUrl
    method: GET
    data_selector: records
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/BinaryImage
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/ToolReturn
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/UserPromptPart
    method: GET
    data_selector: records
- name: content
  endpoint:
    path: /content
    method: GET
- name: thinking_part
  endpoint:
    path: /thinking_part
    method: GET
- name: file_part
  endpoint:
    path: /file_part
    method: GET
- name: base_tool_call_part
  endpoint:
    path: /base_tool_call_part
    method: GET
- name: BuiltinToolCallPart
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolCallPart
    method: GET
    data_selector: provider_name
    params: {}
- name: ModelResponsePart
  endpoint:
    path: /pydantic_ai/messages/ModelResponsePart
    method: GET
    data_selector: parts
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: output
- name: weather_forecast
  endpoint:
    path: /forecast
    method: GET
    data_selector: forecast_data
    params: {}
- name: historic_weather
  endpoint:
    path: /historic
    method: GET
    data_selector: historic_data
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: result
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result.messages
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: result
    params: {}
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: name
    params: {}
- name: foobar
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: get_preferred_language
  endpoint:
    path: /api/get_preferred_language
    method: GET
- name: model
  endpoint:
    path: /models/{model_id}
    method: GET
- name: deepseek-chat
  endpoint:
    path: /api/v1/chat
    method: POST
- name: email_feedback
  endpoint:
    path: /api/feedback
    method: POST
    data_selector: email
    params: {}
- name: email_feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: feedback
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user_prompt
  endpoint:
    path: /user_prompt
    method: GET
    data_selector: nodes
    params: {}
- name: model_request
  endpoint:
    path: /model_request
    method: GET
    data_selector: nodes
    params: {}
- name: call_tools
  endpoint:
    path: /call_tools
    method: GET
    data_selector: nodes
    params: {}
- name: end
  endpoint:
    path: /end
    method: GET
    data_selector: nodes
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
    data_selector: tool_data
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
    data_selector: tool_data
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
    data_selector: tool_data
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
    data_selector: tool_data
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
    data_selector: tool_data
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
    data_selector: tool_data
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: get_tools
  endpoint:
    path: /get_tools
    method: GET
    data_selector: tools
    params: {}
- name: call_tool
  endpoint:
    path: /call_tool
    method: POST
    data_selector: result
    params: {}
- name: model_request
  endpoint:
    path: /model/request
    method: POST
- name: model_request_stream
  endpoint:
    path: /model/request_stream
    method: GET
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: agent_run_sync
  endpoint:
    path: /agent/run_sync
    method: POST
    data_selector: result
    params: {}
- name: AgentRun
  endpoint:
    path: iter
    method: GET
    data_selector: nodes
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: url
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ModelRequest
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: TextPartDelta
  endpoint:
    path: /pydantic_ai/messages/TextPartDelta
    method: GET
    data_selector: content_delta
    params: {}
- name: ThinkingPartDelta
  endpoint:
    path: /pydantic_ai/messages/ThinkingPartDelta
    method: GET
    data_selector: content_delta
    params: {}
- name: ToolCallPartDelta
  endpoint:
    path: /pydantic_ai/messages/ToolCallPartDelta
    method: GET
    data_selector: tool_name_delta
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: output
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: user
  endpoint:
    path: /get_user_by_name
    method: GET
    data_selector: user_id
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: image_input
  endpoint:
    path: /agent/image
    method: POST
    data_selector: output
- name: audio_input
  endpoint:
    path: /agent/audio
    method: POST
    data_selector: output
- name: video_input
  endpoint:
    path: /agent/video
    method: POST
    data_selector: output
- name: document_input
  endpoint:
    path: /agent/document
    method: POST
    data_selector: output
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result
    params: {}
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: POST
    data_selector: output
    params:
      count: count
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: text
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
- name: gemini
  endpoint:
    path: /model-garden/gemini
    method: GET
- name: deepseek-chat
  endpoint:
    path: /deepseek-chat
    method: GET
- name: WriteEmail
  endpoint:
    path: /write_email
    method: POST
    data_selector: email
    params: {}
- name: Feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
    params: {}
- name: email_feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: result.output
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: StreamingResponse
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: AgentRun
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent_run
    method: POST
    data_selector: result
    params: {}
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params: {}
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: nodes
    params: {}
- name: wrapped_request_step
  endpoint:
    path: model.request
    method: POST
    data_selector: messages
    params: {}
- name: wrapped_request_stream_step
  endpoint:
    path: model.request_stream
    method: POST
    data_selector: messages
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: agent_run
    params: {}
- name: tasks
  endpoint:
    path: /tasks
    method: POST
    data_selector: records
- name: tasks_get
  endpoint:
    path: /tasks/get
    method: POST
    data_selector: records
- name: tasks_cancel
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: records
- name: tasks_send
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: records
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ModelRequestPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ModelRequest
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: text_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: thinking_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: file_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: base_tool_call_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
- name: tool_call_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
- name: builtin_tool_call_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: provider_name
- name: model_response
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/messages/part_start_event
    method: GET
    data_selector: index
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/messages/final_result_event
    method: GET
    data_selector: tool_name
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/function_tool_result_event
    method: GET
    data_selector: result
    params: {}
- name: HandleResponseEvent
  endpoint:
    path: /pydantic_ai/messages/handle_response_event
    method: GET
    data_selector: event_kind
    params: {}
- name: agent
  endpoint:
    path: /api/models/agent
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: user
  endpoint:
    path: /get_user_by_name
    method: GET
    data_selector: user_id
    params: {}
- name: message
  endpoint:
    path: /send_message
    method: POST
    data_selector: message
    params: {}
- name: DeepWiki
  endpoint:
    path: /mcp
    method: GET
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: properties
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
    params: {}
- name: model
  endpoint:
    path: /models/{model_id}
    method: GET
    data_selector: model_data
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: email_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
- name: handle_ag_ui_request
  endpoint:
    path: /
    method: POST
    data_selector: AG-UI protocol events
- name: agent_run
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: StreamingResponse
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: results
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: tavily_search
  endpoint:
    path: /tavily/search
    method: POST
- name: response
  endpoint:
    path: /response
    method: GET
- name: usage
  endpoint:
    path: /usage
    method: GET
- name: model_name
  endpoint:
    path: /model_name
    method: GET
- name: timestamp
  endpoint:
    path: /timestamp
    method: GET
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: override
  endpoint:
    path: /override
    method: POST
    data_selector: override_response
- name: request
  endpoint:
    path: /model/request
    method: POST
    data_selector: data
    params: {}
- name: request_stream
  endpoint:
    path: /model/request_stream
    method: GET
    data_selector: data
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: nodes
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: video
  endpoint:
    path: /video/url
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: BinaryContent
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: ToolReturn
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: UserPromptPart
    params: {}
- name: ThinkingPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: FilePart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: BaseToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
    params: {}
- name: ModelResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/messages/PartStartEvent
    method: GET
    data_selector: index
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/messages/PartDeltaEvent
    method: GET
    data_selector: index
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/messages/FinalResultEvent
    method: GET
    data_selector: tool_name
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolCallEvent
    method: GET
    data_selector: part
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolResultEvent
    method: GET
    data_selector: result
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolCallEvent
    method: GET
    data_selector: part
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolResultEvent
    method: GET
    data_selector: result
- name: document_state
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: records
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: records
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: output
    params: {}
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: deferred_toolset_agent
  endpoint:
    path: /deferred_toolset_agent
    method: POST
    data_selector: result
    params: {}
- name: external_toolset
  endpoint:
    path: /external_toolset
    method: POST
    data_selector: result
    params: {}
- name: groq_model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: deepseek-chat
  endpoint:
    path: /api/chat
    method: POST
- name: CountDown
  endpoint:
    path: /count_down
    method: GET
    data_selector: records
    params: {}
- name: EmailFeedback
  endpoint:
    path: /email_feedback
    method: POST
    data_selector: records
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AgentStream
  endpoint:
    path: /agent/stream
    method: GET
    data_selector: stream_events
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
    data_selector: records
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
    data_selector: records
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
    data_selector: records
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
    data_selector: records
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
    data_selector: records
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
    data_selector: records
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run
  endpoint:
    path: /dbos/run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /dbos/run_sync
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: data
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
- name: wrapped_request_step
  endpoint:
    path: /model/request
    method: POST
- name: wrapped_request_stream_step
  endpoint:
    path: /model/request_stream
    method: POST
- name: video_url
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
    params: {}
- name: audio_url
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
    params: {}
- name: image_url
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
    params: {}
- name: document_url
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: data
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: has_content
  endpoint:
    path: /has_content
    method: GET
    data_selector: has_content
    params: {}
- name: text
  endpoint:
    path: /text
    method: GET
- name: thinking
  endpoint:
    path: /thinking
    method: GET
- name: files
  endpoint:
    path: /files
    method: GET
- name: images
  endpoint:
    path: /images
    method: GET
- name: tool_calls
  endpoint:
    path: /tool_calls
    method: GET
- name: builtin_tool_calls
  endpoint:
    path: /builtin_tool_calls
    method: GET
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: index
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: index
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: part
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: result
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: part
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: result
    params: {}
- name: HandleResponseEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: event_kind
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: event_kind
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: output
    params: {}
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: Tool
  endpoint:
    path: /tool
    method: GET
    data_selector: tools
    params: {}
- name: Agent
  endpoint:
    path: /agent
    method: GET
    data_selector: agents
    params: {}
- name: foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: function_tools
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek-chat
    method: GET
- name: email_writer_agent
  endpoint:
    path: /agents/email_writer
    method: POST
    data_selector: output
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result.output
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: request
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run/ag/ui
    method: POST
    data_selector: StreamingResponse
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: result
    params: {}
- name: override
  endpoint:
    path: /override
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: tavily_search_tool
  endpoint:
    path: /tavily/search
    method: POST
- name: model_response_stream_event
  endpoint:
    path: /stream/model_response
    method: GET
    data_selector: events
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: results
- name: request
  endpoint:
    path: /model/request
    method: POST
- name: request_stream
  endpoint:
    path: /model/request_stream
    method: POST
- name: run_async
  endpoint:
    path: /agent/run
    method: POST
    data_selector: run_results
    params: {}
- name: run_sync
  endpoint:
    path: /agent/run_sync
    method: POST
    data_selector: run_results
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: video_url
  endpoint:
    path: /video
    method: GET
    data_selector: url
    params: {}
- name: audio_url
  endpoint:
    path: /audio
    method: GET
    data_selector: url
    params: {}
- name: image_url
  endpoint:
    path: /image
    method: GET
    data_selector: url
    params: {}
- name: document_url
  endpoint:
    path: /document
    method: GET
    data_selector: url
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/BinaryImage
    method: GET
    data_selector: BinaryContent
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/ToolReturn
    method: GET
    data_selector: content
    params: {}
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/RetryPromptPart
    method: GET
    data_selector: content
    params: {}
- name: ThinkingPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: FilePart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: BaseToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
- name: ToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_call_id
- name: BuiltinToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: provider_name
- name: ModelResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: mcp_server_anthropic
  endpoint:
    path: /mcp
    method: GET
- name: mcp_server_openai
  endpoint:
    path: /mcp
    method: GET
- name: mcp_server_configured_url
  endpoint:
    path: /mcp/
    method: GET
- name: mcp_server_configured_connector_id
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
- name: model_request
  endpoint:
    path: /model_request
    method: POST
    data_selector: result
    params: {}
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: output
    params: {}
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
    params: {}
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: seat_preference
  endpoint:
    path: /seat_preference
    method: GET
    data_selector: output
    params: {}
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: output
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
- name: gemini
  endpoint:
    path: /models/gemini
    method: GET
    data_selector: models
    params: {}
- name: mistral
  endpoint:
    path: /models/mistral
    method: GET
    data_selector: models
    params: {}
- name: huggingface
  endpoint:
    path: /models/huggingface
    method: GET
    data_selector: models
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek-chat
    method: GET
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: GET
    data_selector: graph
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
    params: {}
- name: email
  endpoint:
    path: /email
    method: GET
    data_selector: email
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: run_stream_events
  endpoint:
    path: /pydantic_ai/agent/run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /pydantic_ai/agent/iter
    method: GET
    data_selector: nodes
    params: {}
- name: AgentRun
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: tavily_search_tool
  endpoint:
    path: /tavily_search
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /services/data/vXX.X/sobjects/Agent
    method: POST
    data_selector: records
    params:
      incremental: created_at
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: agent_iter
  endpoint:
    path: /agent/iter
    method: POST
    data_selector: nodes
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: GET
    data_selector: none
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run_results
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: nodes
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
    params: {}
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
    params: {}
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
    params: {}
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
    params: {}
- name: BinaryContent
  endpoint:
    path: /binary-content
    method: GET
    data_selector: data
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: BinaryContent
    params: {}
- name: ModelResponse
  endpoint:
    path: /models/response
    method: GET
    data_selector: parts
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/PartStartEvent
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/PartDeltaEvent
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/FinalResultEvent
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/FunctionToolCallEvent
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/FunctionToolResultEvent
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolCallEvent
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolResultEvent
    method: GET
    data_selector: records
- name: HandleResponseEvent
  endpoint:
    path: /pydantic_ai/HandleResponseEvent
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai/AgentStreamEvent
    method: GET
    data_selector: records
- name: model_profile
  endpoint:
    path: /v1/models/{model_name}
    method: GET
    data_selector: model_profile
- name: agent
  endpoint:
    path: /agents
    method: POST
    data_selector: result
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: agent
  endpoint:
    path: /agent
    method: GET
    data_selector: data
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: results
    params:
      location: location
      forecast_date: date
- name: model_requests
  endpoint:
    path: /direct
    method: POST
- name: image_input
  endpoint:
    path: /image
    method: POST
- name: audio_input
  endpoint:
    path: /audio
    method: POST
- name: video_input
  endpoint:
    path: /video
    method: POST
- name: document_input
  endpoint:
    path: /document
    method: POST
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result.messages
- name: agent_runs
  endpoint:
    path: /agent_runs
    method: GET
    data_selector: result.runs
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
    params: {}
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: dice_game
  endpoint:
    path: /dice_game
    method: GET
    data_selector: output
- name: ToolDefinition
  endpoint:
    path: /tools
    method: GET
    data_selector: tools
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: model_response
  endpoint:
    path: /api/model_response
    method: GET
    data_selector: parts
    params: {}
- name: user_prompt
  endpoint:
    path: /api/user_prompt
    method: POST
    data_selector: parts
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: request
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: iter
  endpoint:
    path: iter
    method: GET
    data_selector: AgentRun
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
- name: WebSearchTool
  endpoint:
    path: /web_search
    method: POST
    data_selector: results
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /code_execution
    method: POST
    data_selector: results
    params: {}
- name: UrlContextTool
  endpoint:
    path: /url_context
    method: POST
    data_selector: results
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /image_generation
    method: POST
    data_selector: results
    params: {}
- name: MemoryTool
  endpoint:
    path: /memory
    method: POST
    data_selector: results
    params: {}
- name: MCPServerTool
  endpoint:
    path: /mcp_server
    method: POST
    data_selector: results
    params: {}
- name: tavily_search
  endpoint:
    path: /tavily_search
    method: POST
    data_selector: results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: results
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: GET
    data_selector: nodes
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: send
  endpoint:
    path: /tasks/send
    method: POST
- name: get
  endpoint:
    path: /tasks/get
    method: GET
- name: cancel
  endpoint:
    path: /tasks/cancel
    method: POST
- name: pushNotification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
- name: video_url
  endpoint:
    path: /path/to/video/url
    method: GET
    data_selector: url
    params: {}
- name: BinaryImage
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: BinaryContent
    params: {}
- name: ToolReturn
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: ToolReturn
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/messages/PartStartEvent
    method: GET
    data_selector: records
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/messages/PartDeltaEvent
    method: GET
    data_selector: records
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/messages/FinalResultEvent
    method: GET
    data_selector: records
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolCallEvent
    method: GET
    data_selector: records
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolResultEvent
    method: GET
    data_selector: records
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolCallEvent
    method: GET
    data_selector: records
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolResultEvent
    method: GET
    data_selector: records
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai/messages/AgentStreamEvent
    method: GET
    data_selector: records
    params: {}
- name: support_agent
  endpoint:
    path: /api/v1/support_agent
    method: POST
    data_selector: output
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: document
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: forecast
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: sum
  endpoint:
    path: /sum
    method: POST
    data_selector: result
    params: {}
- name: greet
  endpoint:
    path: /greet
    method: POST
    data_selector: greeting
    params: {}
- name: get_preferred_language
  endpoint:
    path: /get_preferred_language
    method: GET
    data_selector: result
- name: model
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: email_writer_agent
  endpoint:
    path: /api/v1/email
    method: POST
    data_selector: email
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: results
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
    data_selector: records
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
    data_selector: records
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
    data_selector: records
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
    data_selector: records
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
    data_selector: records
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
    data_selector: records
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: output
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: output
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: output
- name: get_tools
  endpoint:
    path: /get_tools
    method: GET
    data_selector: tools
    params: {}
- name: call_tool
  endpoint:
    path: /call_tool
    method: POST
    data_selector: result
    params: {}
- name: wrapped_request_step
  endpoint:
    path: /model.request
    method: POST
- name: wrapped_request_stream_step
  endpoint:
    path: /model.request_stream
    method: POST
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: tasks_send
  endpoint:
    path: tasks/send
    method: POST
- name: tasks_get
  endpoint:
    path: tasks/get
    method: POST
- name: tasks_cancel
  endpoint:
    path: tasks/cancel
    method: POST
- name: tasks_pushNotification_get
  endpoint:
    path: tasks/pushNotification/get
    method: GET
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: BinaryContent
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/PartStartEvent
    method: GET
    data_selector: index, part, event_kind
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/PartDeltaEvent
    method: GET
    data_selector: index, delta, event_kind
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/FinalResultEvent
    method: GET
    data_selector: tool_name, tool_call_id, event_kind
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/FunctionToolCallEvent
    method: GET
    data_selector: part, event_kind, tool_call_id
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/FunctionToolResultEvent
    method: GET
    data_selector: result, content, event_kind, tool_call_id
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/BuiltinToolCallEvent
    method: GET
    data_selector: part, event_kind
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/BuiltinToolResultEvent
    method: GET
    data_selector: result, event_kind
    params: {}
- name: anthropic_model_profile
  endpoint:
    path: /anthropic/model/profile
    method: GET
    data_selector: ModelProfile
    params: {}
- name: google_model_profile
  endpoint:
    path: /google/model/profile
    method: GET
    data_selector: ModelProfile
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: output
- name: tools
  endpoint:
    path: /api/tools
    method: GET
    data_selector: tools
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: github
  endpoint:
    path: /mcp/
    method: POST
    data_selector: results
- name: google-calendar
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: POST
    data_selector: results
- name: model_request_sync
  endpoint:
    path: /direct/model_request_sync
    method: POST
    data_selector: result
    params: {}
- name: model_request
  endpoint:
    path: /direct/model_request
    method: POST
    data_selector: result
    params: {}
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: output
    params: {}
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: text
    params:
      count: count
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: parameters_json_schema
    params: {}
- name: get_preferred_language
  endpoint:
    path: /services/data/vXX.X/sobjects/GetPreferredLanguage
    method: GET
    data_selector: records
    params:
      default_language: en-US
- name: deepseek-chat
  endpoint:
    path: /
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: AgentRun
  endpoint:
    path: /agent_run
    method: GET
    data_selector: results
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: result
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
- name: iter
  endpoint:
    path: /pydantic_ai/iter
    method: GET
    data_selector: nodes
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: AgentRunResult
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: AgentRunResult
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: data
    params: {}
- name: tasks
  endpoint:
    path: /tasks/send
    method: POST
- name: pushNotification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
- name: video_url
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
    params: {}
- name: audio_url
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
    params: {}
- name: image_url
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
    params: {}
- name: document_url
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
    params: {}
- name: BinaryContent
  endpoint:
    path: /from_data_uri
    method: POST
    data_selector: data
- name: BinaryImage
  endpoint:
    path: /binary_image
    method: POST
    data_selector: data
- name: ToolReturn
  endpoint:
    path: /tool_return
    method: POST
    data_selector: return_value
- name: UserPromptPart
  endpoint:
    path: /user_prompt
    method: POST
    data_selector: content
- name: ModelRequest
  endpoint:
    path: /model_request
    method: POST
    data_selector: parts
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: has_content
  endpoint:
    path: /has_content
    method: GET
    data_selector: has_content
    params: {}
- name: google_model_profile
  endpoint:
    path: /google_model_profile
    method: GET
    data_selector: ModelProfile
    params: {}
- name: meta_model_profile
  endpoint:
    path: /profiles/meta_model_profile
    method: GET
    data_selector: ModelProfile
- name: amazon_model_profile
  endpoint:
    path: /profiles/amazon_model_profile
    method: GET
    data_selector: ModelProfile
- name: deepseek_model_profile
  endpoint:
    path: /profiles/deepseek_model_profile
    method: GET
    data_selector: ModelProfile
- name: grok_model_profile
  endpoint:
    path: /profiles/grok_model_profile
    method: GET
    data_selector: ModelProfile
- name: mistral_model_profile
  endpoint:
    path: /profiles/mistral_model_profile
    method: GET
    data_selector: ModelProfile
- name: agent
  endpoint:
    path: /agents
    method: POST
    data_selector: agent
    params: {}
- name: event
  endpoint:
    path: /events
    method: POST
    data_selector: event
    params: {}
- name: weather_forecast
  endpoint:
    path: /v1/weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /v1/weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: MCPServerTool
  endpoint:
    path: /mcp
    method: GET
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: jokes
    params:
      count: number_of_jokes
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: flights
    params: {}
- name: Tool Output
  endpoint:
    path: /tool/output
    method: GET
    data_selector: output
- name: Native Output
  endpoint:
    path: /native/output
    method: GET
    data_selector: output
- name: Prompted Output
  endpoint:
    path: /prompted/output
    method: GET
    data_selector: output
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: result
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: player_name
- name: get_preferred_language
  endpoint:
    path: /get_preferred_language
    method: GET
    data_selector: output
    params: {}
- name: model
  endpoint:
    path: /model
    method: GET
    data_selector: models
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: count_down
  endpoint:
    path: /count_down
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: question_graph
  endpoint:
    path: /question_graph
    method: GET
    data_selector: records
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: request
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /agent/iter
    method: POST
- name: agent_stream_events
  endpoint:
    path: /agent/stream/events
    method: GET
    data_selector: events
    params: {}
- name: agent_run_result
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
    params: {}
- name: web_search
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
    data_selector: records
- name: code_execution
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
    data_selector: records
- name: url_context
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
    data_selector: records
- name: image_generation
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
    data_selector: records
- name: memory
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
    data_selector: records
- name: mcp_server
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
    data_selector: records
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: model_response_stream_event
  endpoint:
    path: /stream/model_response
    method: GET
    data_selector: events
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AgentRun
  endpoint:
    path: /path/to/agent/run
    method: GET
    data_selector: records
    params: {}
- name: tasks_send
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: task
    params: {}
- name: tasks_get
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: task
    params: {}
- name: tasks_cancel
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: task
    params: {}
- name: pushNotification_get
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: notification
    params: {}
- name: video
  endpoint:
    path: url
    method: GET
    data_selector: url
    params: {}
- name: audio
  endpoint:
    path: url
    method: GET
    data_selector: url
    params: {}
- name: image
  endpoint:
    path: url
    method: GET
    data_selector: url
    params: {}
- name: document
  endpoint:
    path: url
    method: GET
    data_selector: url
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py/BinaryImage
    method: GET
    data_selector: records
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py/ToolReturn
    method: GET
    data_selector: records
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py/UserPromptPart
    method: GET
    data_selector: records
    params: {}
- name: ModelResponsePart
  endpoint:
    path: /pydantic_ai/messages
    method: GET
    data_selector: parts
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: index
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: index
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: tool_name
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: part
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: result
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: part
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: result
    params: {}
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: GET
    data_selector: event_kind
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: event_kind
    params: {}
- name: ToolOutput
  endpoint:
    path: /ToolOutput
    method: GET
    data_selector: output
    params: {}
- name: NativeOutput
  endpoint:
    path: /NativeOutput
    method: GET
    data_selector: outputs
    params: {}
- name: PromptedOutput
  endpoint:
    path: /PromptedOutput
    method: GET
    data_selector: outputs
    params: {}
- name: TextOutput
  endpoint:
    path: /TextOutput
    method: GET
    data_selector: output_function
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: records
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: records
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: run_results
  endpoint:
    path: /run_results
    method: GET
    data_selector: results
- name: foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: deferred_tools
  endpoint:
    path: /deferred-tools
    method: POST
    data_selector: results
- name: dynamic_toolset
  endpoint:
    path: /dynamic-toolset
    method: GET
    data_selector: tools
- name: email_writer_agent
  endpoint:
    path: /agents/google-gla:gemini-1.5-pro
    method: POST
    data_selector: output
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: output
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: AG-UI run input
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: StreamedRunResult
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: AgentStreamEvent
    params: {}
- name: AgentRun
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
    data_selector: records
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
    data_selector: records
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
    data_selector: records
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
    data_selector: records
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
    data_selector: records
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
    data_selector: records
- name: tavily_search_tool
  endpoint:
    path: /home
    method: GET
- name: model_response_stream_event
  endpoint:
    path: /model_response_stream_event
    method: GET
    data_selector: stream_events
- name: model_response
  endpoint:
    path: /model_response
    method: GET
    data_selector: response_data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /run
    method: POST
    data_selector: result
- name: temporal_run_context
  endpoint:
    path: /pydantic_ai/temporal/run_context
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: wrapped_request_step
  endpoint:
    method: GET
- name: wrapped_request_stream_step
  endpoint:
    method: GET
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: agent_run
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: task
  endpoint:
    path: /tasks/send
    method: POST
- name: task_status
  endpoint:
    path: /tasks/get
    method: GET
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
- name: VideoUrl
  endpoint:
    path: /video/url
    method: GET
    data_selector: url
- name: AudioUrl
  endpoint:
    path: /audio/url
    method: GET
    data_selector: url
- name: ImageUrl
  endpoint:
    path: /image/url
    method: GET
    data_selector: url
- name: DocumentUrl
  endpoint:
    path: /document/url
    method: GET
    data_selector: url
- name: BinaryContent
  endpoint:
    path: /binary/content
    method: GET
    data_selector: data
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/BinaryImage
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/ToolReturn
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/UserPromptPart
    method: GET
    data_selector: records
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/RetryPromptPart
    method: GET
    data_selector: records
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: mcp_server_tool
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /direct/model_request
    method: POST
    data_selector: results
    params: {}
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
    params:
      count: count
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: foobar
  endpoint:
    path: foobar
    method: POST
    data_selector: output
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
- name: graphs
  endpoint:
    path: /graphs
    method: GET
    data_selector: graphs
    params: {}
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
    params: {}
- name: CountDown
  endpoint:
    path: /countdown
    method: GET
    data_selector: records
    params: {}
- name: Feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: results
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: messages
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: output
    params: {}
- name: AgentRunResult
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: output
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
    data_selector: records
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
    data_selector: records
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
    data_selector: records
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
    data_selector: records
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
    data_selector: records
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
    data_selector: records
- name: tavily_search_tool
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /run
    method: POST
    data_selector: result
- name: AgentRun
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: result
- name: get_task
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: result
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: result
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: result
- name: video_url
  endpoint:
    path: url
    method: GET
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: CREATE
    data_selector: BinaryContent
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: CREATE
    data_selector: ToolReturn
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: CREATE
    data_selector: UserPromptPart
    params: {}
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: CREATE
    data_selector: RetryPromptPart
    params: {}
- name: ThinkingPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: FilePart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: BaseToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
    params: {}
- name: ToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
    params: {}
- name: BuiltinToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: provider_name
    params: {}
- name: ModelResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
    params: {}
- name: text
  endpoint:
    path: /text
    method: GET
    data_selector: text
- name: thinking
  endpoint:
    path: /thinking
    method: GET
    data_selector: thinking
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: tool_calls
  endpoint:
    path: /tool_calls
    method: GET
    data_selector: tool_calls
- name: builtin_tool_calls
  endpoint:
    path: /builtin_tool_calls
    method: GET
    data_selector: builtin_tool_calls
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: sum
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: hitchhiker
  endpoint:
    path: /hitchhiker
    method: POST
    data_selector: output
    params: {}
- name: greet
  endpoint:
    path: /greet
    method: POST
    data_selector: output
    params: {}
- name: get_preferred_language
  endpoint:
    path: /api/deferred/tools/get_preferred_language
    method: POST
    data_selector: result
    params: {}
- name: gemini_model
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: feedback_graph
  endpoint:
    path: /v1/feedback_graph
    method: POST
    data_selector: results
    params: {}
- name: email_feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: feedback
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run/ag/ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: ModelResponseStreamEvent
  endpoint:
    path: /pydantic_ai/messages/ModelResponseStreamEvent
    method: GET
- name: ModelResponse
  endpoint:
    path: /pydantic_ai/messages/ModelResponse
    method: GET
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: get_tools
  endpoint:
    path: /get_tools
    method: GET
    data_selector: tools
    params: {}
- name: call_tool
  endpoint:
    path: /call_tool
    method: POST
    data_selector: result
    params: {}
- name: model.request
  endpoint:
    path: /model/request
    method: POST
- name: model.request_stream
  endpoint:
    path: /model/request_stream
    method: POST
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: StreamedRunResult
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: AgentStreamEvent | AgentRunResultEvent
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: AgentRun
    params: {}
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: BinaryImage
    method: init
    data_selector: data
    params: {}
- name: ToolReturn
  endpoint:
    path: ToolReturn
    method: init
    data_selector: return_value
    params: {}
- name: UserPromptPart
  endpoint:
    path: UserPromptPart
    method: init
    data_selector: content
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: github
  endpoint:
    path: /mcp
    method: GET
- name: google-calendar
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
- name: messages
  endpoint:
    path: /results/messages
    method: GET
    data_selector: all_messages
    params: {}
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    params:
      count: count
- name: toolset
  endpoint:
    path: /toolset
    method: GET
    data_selector: tools
    params: {}
- name: google_model
  endpoint:
    path: /generateContent
    method: POST
    data_selector: response
    params: {}
- name: vending_machine_graph
  endpoint:
    path: /vending_machine/graph
    method: GET
    data_selector: result
    params: {}
- name: feedback_graph
  endpoint:
    path: /feedback/graph
    method: GET
    data_selector: result
    params: {}
- name: CountDown
  endpoint:
    path: /count_down
    method: GET
    data_selector: records
- name: Feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: records
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run/ag_ui
    method: POST
    data_selector: events
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
    data_selector: tools
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
    data_selector: tools
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
    data_selector: tools
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
    data_selector: tools
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
    data_selector: tools
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
    data_selector: tools
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: wrapped_run_workflow
  endpoint:
    path: /pydantic_ai/slim/pydantic_ai/durable_exec/dbos/_agent
    method: POST
    data_selector: result
- name: wrapped_run_sync_workflow
  endpoint:
    path: /pydantic_ai/slim/pydantic_ai/durable_exec/dbos/_agent
    method: POST
    data_selector: result
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: response.data
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: tasks
  endpoint:
    path: /tasks/send
    method: POST
- name: tasks_get
  endpoint:
    path: /tasks/get
    method: GET
- name: tasks_cancel
  endpoint:
    path: /tasks/cancel
    method: POST
- name: tasks_pushNotification_get
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
- name: VideoUrl
  endpoint:
    path: /video
    method: POST
    data_selector: url
    params: {}
- name: AudioUrl
  endpoint:
    path: /audio
    method: POST
    data_selector: url
    params: {}
- name: ImageUrl
  endpoint:
    path: /image
    method: POST
    data_selector: url
    params: {}
- name: DocumentUrl
  endpoint:
    path: /document
    method: POST
    data_selector: url
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: BinaryContent
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: records
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: records
- name: ToolOutput
  endpoint:
    path: /ToolOutput
    method: GET
    data_selector: records
- name: NativeOutput
  endpoint:
    path: /NativeOutput
    method: GET
    data_selector: records
- name: PromptedOutput
  endpoint:
    path: /PromptedOutput
    method: GET
    data_selector: records
- name: TextOutput
  endpoint:
    path: /TextOutput
    method: GET
    data_selector: records
- name: agent
  endpoint:
    path: /run
    method: POST
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: response
    params: {}
- name: function_tool
  endpoint:
    path: /function_tool
    method: GET
- name: FunctionToolset
  endpoint:
    path: /function_toolset
    method: GET
    data_selector: function_tools
- name: Agent
  endpoint:
    path: /agent
    method: POST
    data_selector: agent_response
- name: get_preferred_language
  endpoint:
    path: /get_preferred_language
    method: POST
    data_selector: result
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek-chat
    method: GET
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: GET
    data_selector: records
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result.output
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
    params: {}
- name: agent_stream_events
  endpoint:
    path: /agent/stream/events
    method: GET
    data_selector: events
    params: {}
- name: agent_run_result
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
- name: AbstractBuiltinTool
  endpoint:
    path: /builtin_tools/AbstractBuiltinTool
    method: GET
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/WebSearchTool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/CodeExecutionTool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/UrlContextTool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/ImageGenerationTool
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/MemoryTool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/MCPServerTool
    method: GET
- name: tavily_search_tool
  endpoint:
    path: /tavily_search
    method: POST
- name: model_response_stream_event
  endpoint:
    path: /stream/model_response_event
    method: GET
    data_selector: events
    params: {}
- name: request_usage
  endpoint:
    path: /usage
    method: GET
    data_selector: usage
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: model_request
  endpoint:
    path: /model/request
    method: POST
- name: model_request_stream
  endpoint:
    path: /model/request_stream
    method: GET
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
- name: iter
  endpoint:
    path: /pydantic_ai/iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /pydantic_ai/override
    method: GET
    data_selector: nodes
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: documentation
  endpoint:
    path: /docs
    method: GET
- name: tasks
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: submitted
    params: {}
- name: pushNotification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: working
    params: {}
- name: VideoUrl
  endpoint:
    path: /VideoUrl
    method: POST
    data_selector: url
    params: {}
- name: AudioUrl
  endpoint:
    path: /AudioUrl
    method: POST
    data_selector: url
    params: {}
- name: ImageUrl
  endpoint:
    path: /ImageUrl
    method: POST
    data_selector: url
    params: {}
- name: DocumentUrl
  endpoint:
    path: /DocumentUrl
    method: POST
    data_selector: url
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: BinaryImage
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: ToolReturn
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: UserPromptPart
    params: {}
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: RetryPromptPart
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/PartStartEvent
    method: GET
    data_selector: index, part, event_kind
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/PartDeltaEvent
    method: GET
    data_selector: index, delta, event_kind
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/FinalResultEvent
    method: GET
    data_selector: tool_name, tool_call_id, event_kind
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/FunctionToolCallEvent
    method: GET
    data_selector: part, event_kind, tool_call_id
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/FunctionToolResultEvent
    method: GET
    data_selector: result, content, event_kind, tool_call_id
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolCallEvent
    method: GET
    data_selector: part, event_kind
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolResultEvent
    method: GET
    data_selector: result, event_kind
    params: {}
- name: HandleResponseEvent
  endpoint:
    path: /pydantic_ai/HandleResponseEvent
    method: GET
    data_selector: event_kind
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai/AgentStreamEvent
    method: GET
    data_selector: event_kind
    params: {}
- name: json_schema
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: name
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: description
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: deepwiki
  endpoint:
    path: https://mcp.deepwiki.com/mcp
    method: GET
- name: sum
  endpoint:
    path: /sum
    method: POST
    data_selector: result
    params: {}
- name: greet
  endpoint:
    path: /greet
    method: POST
    data_selector: greeting
    params: {}
- name: deferred_tool_results
  endpoint:
    path: /api/deferred_tool_results
    method: GET
    data_selector: results
- name: feedback
  endpoint:
    path: /api/feedback
    method: POST
    data_selector: data
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event
    params: {}
- name: web_search
  endpoint:
    path: /web_search
    method: GET
- name: code_execution
  endpoint:
    path: /code_execution
    method: GET
- name: url_context
  endpoint:
    path: /url_context
    method: GET
- name: image_generation
  endpoint:
    path: /image_generation
    method: GET
- name: memory
  endpoint:
    path: /memory
    method: GET
- name: mcp_server
  endpoint:
    path: /mcp_server
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
- name: BinaryContent
  endpoint:
    path: /binary-content
    method: GET
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: ModelRequest
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: PartStartEvent
  endpoint:
    path: /part_start_event
    method: GET
- name: PartDeltaEvent
  endpoint:
    path: /part_delta_event
    method: GET
- name: FinalResultEvent
  endpoint:
    path: /final_result_event
    method: GET
- name: FunctionToolCallEvent
  endpoint:
    path: /function_tool_call_event
    method: GET
- name: FunctionToolResultEvent
  endpoint:
    path: /function_tool_result_event
    method: GET
- name: BuiltinToolCallEvent
  endpoint:
    path: /builtin_tool_call_event
    method: GET
- name: BuiltinToolResultEvent
  endpoint:
    path: /builtin_tool_result_event
    method: GET
- name: HandleResponseEvent
  endpoint:
    path: /handle_response_event
    method: GET
- name: AgentStreamEvent
  endpoint:
    path: /agent_stream_event
    method: GET
- name: json_schema
  endpoint:
    path: /json_schema
    method: GET
    data_selector: records
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: records
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: records
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
- name: foobar
  endpoint:
    path: /tool/foobar
    method: POST
    data_selector: output
    params: {}
- name: deferred_toolset
  endpoint:
    path: /deferred_toolset
    method: POST
    data_selector: data
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: output
- name: count_down
  endpoint:
    path: /count_down
    method: GET
    data_selector: records
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: records
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /AgentRun
    method: GET
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/WebSearchTool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/CodeExecutionTool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/UrlContextTool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/ImageGenerationTool
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/MemoryTool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/MCPServerTool
    method: GET
- name: tavily_search_tool
  endpoint:
    path: /tavily_search_tool
    method: POST
    data_selector: results
    params:
      api_key: required
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params:
      user_prompt: user_prompt
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params:
      user_prompt: user_prompt
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: AgentRun
  endpoint:
    path: /pydantic_ai/agent/run
    method: GET
    data_selector: result
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: message_send
  endpoint:
    path: /tasks/send
    method: POST
- name: tasks_get
  endpoint:
    path: /tasks/get
    method: POST
- name: tasks_cancel
  endpoint:
    path: /tasks/cancel
    method: POST
- name: push_notification_get
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
- name: video_url
  endpoint:
    path: /video_url
    method: GET
    data_selector: url
- name: audio_url
  endpoint:
    path: /audio_url
    method: GET
    data_selector: url
- name: image_url
  endpoint:
    path: /image_url
    method: GET
    data_selector: url
- name: document_url
  endpoint:
    path: /document_url
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: has_content
  endpoint:
    path: /has_content
    method: GET
    data_selector: has_content
    params: {}
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: records
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: weather_forecast
  endpoint:
    path: /services/data/vXX.X/sobjects/WeatherForecast
    method: GET
    data_selector: records
- name: web_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
    params:
      count: count
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: text
    params:
      count: count
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: output
    params: {}
- name: gemini
  endpoint:
    path: /generateContent
    method: POST
    data_selector: response
    params: {}
- name: deepseek-chat
  endpoint:
    path: /chat
    method: POST
- name: email_feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: output
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: request
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: results
    params: {}
- name: override
  endpoint:
    path: /override
    method: POST
    data_selector: results
    params: {}
- name: WebSearchTool
  endpoint:
    path: /services/data/vXX.X/sobjects/WebSearchTool
    method: GET
    data_selector: records
- name: CodeExecutionTool
  endpoint:
    path: /services/data/vXX.X/sobjects/CodeExecutionTool
    method: GET
    data_selector: records
- name: UrlContextTool
  endpoint:
    path: /services/data/vXX.X/sobjects/UrlContextTool
    method: GET
    data_selector: records
- name: ImageGenerationTool
  endpoint:
    path: /services/data/vXX.X/sobjects/ImageGenerationTool
    method: GET
    data_selector: records
- name: MemoryTool
  endpoint:
    path: /services/data/vXX.X/sobjects/MemoryTool
    method: GET
    data_selector: records
- name: MCPServerTool
  endpoint:
    path: /services/data/vXX.X/sobjects/MCPServerTool
    method: GET
    data_selector: records
- name: tavily_search
  endpoint:
    path: /tavily_search
    method: POST
    data_selector: results
    params:
      api_key: required
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: output
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: output
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: output
    params: {}
- name: wrapped_request_step
  endpoint:
    path: /model/request
    method: POST
    data_selector: response
    params: {}
- name: wrapped_request_stream_step
  endpoint:
    path: /model/request_stream
    method: GET
    data_selector: stream
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
    params: {}
- name: agent_run
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: nodes
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: tasks
  endpoint:
    path: /tasks/send
    method: POST
- name: task_status
  endpoint:
    path: /tasks/get
    method: GET
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
- name: video
  endpoint:
    path: /url
    method: GET
    data_selector: url
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/BinaryImage
    method: GET
    data_selector: content
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/ToolReturn
    method: GET
    data_selector: content
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/UserPromptPart
    method: GET
    data_selector: content
    params: {}
- name: thinking_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: file_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: base_tool_call_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
    params: {}
- name: tool_call_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
    params: {}
- name: builtin_tool_call_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: provider_name
    params: {}
- name: model_response_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
    params: {}
- name: model_response
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: usage
    params: {}
- name: agent
  endpoint:
    path: /agents
    method: POST
    data_selector: agent_data
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: mcp_server_openai
  endpoint:
    path: /mcp
    method: GET
- name: mcp_server_anthropic
  endpoint:
    path: /mcp
    method: GET
- name: mcp_server_configured_url
  endpoint:
    path: /mcp
    method: GET
- name: mcp_server_configured_connector_id
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: result
    params: {}
- name: chat_history
  endpoint:
    path: /api/chat_history
    method: GET
    data_selector: history
    params: {}
- name: joke_factory
  endpoint:
    path: /
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /
    method: GET
    data_selector: text
    params:
      count: count
- name: get_default_language
  endpoint:
    path: /get_default_language
    method: GET
    data_selector: greeting
- name: get_user_name
  endpoint:
    path: /get_user_name
    method: GET
    data_selector: name
- name: get_preferred_language
  endpoint:
    path: /deferred_tool/get_preferred_language
    method: POST
    data_selector: calls
    params: {}
- name: deepseek-chat
  endpoint:
    path: /chat
    method: POST
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: POST
    data_selector: graph
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: results
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: AG-UI application
  endpoint:
    path: /ag-ui
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: tavily_search
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: task
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: response
    params: {}
- name: task_status
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: status
    params: {}
- name: task_cancel
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: response
    params: {}
- name: VideoUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: AudioUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: ImageUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: DocumentUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: BinaryContent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: thinking_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: file_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: base_tool_call_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
    params: {}
- name: tool_call_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_call_id
    params: {}
- name: builtin_tool_call_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: provider_name
    params: {}
- name: model_response_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
    params: {}
- name: model_response
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: usage
    params: {}
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: records
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: records
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: records
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: records
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: records
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: records
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: records
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: records
    params: {}
- name: agent_run_result
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
- name: agent_run_result_event
  endpoint:
    path: /agent/run/result/event
    method: POST
    data_selector: event
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historical_weather
  endpoint:
    path: /weather/historical
    method: GET
    data_selector: historical
    params: {}
- name: mcp_server
  endpoint:
    path: /mcp
    method: GET
    data_selector: results
- name: model_request
  endpoint:
    path: /direct/model_request
    method: POST
    data_selector: result
    params: {}
- name: model_request_sync
  endpoint:
    path: /direct/model_request_sync
    method: POST
    data_selector: result
    params: {}
- name: model_request_stream
  endpoint:
    path: /direct/model_request_stream
    method: POST
    data_selector: result
    params: {}
- name: model_request_stream_sync
  endpoint:
    path: /direct/model_request_stream_sync
    method: POST
    data_selector: result
    params: {}
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
    params: {}
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: dice_game
  endpoint:
    path: /dice_game
    method: GET
    data_selector: result
    params: {}
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: properties
    params:
      required:
      - x
      - y
- name: tool_call
  endpoint:
    path: /api/tool/call
    method: POST
    data_selector: output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /api/chat
    method: POST
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: output
    params: {}
- name: email_feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: feedback
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: AgentRunResult
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: streaming_response
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: _messages.AgentStreamEvent | AgentRunResultEvent[Any]
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: AgentRun[AgentDepsT, Any]
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: node
  endpoint:
    path: /agent/run/nodes
    method: GET
    data_selector: nodes
- name: WebSearchTool
  endpoint:
    path: /web_search
    method: POST
- name: CodeExecutionTool
  endpoint:
    path: /code_execution
    method: POST
- name: UrlContextTool
  endpoint:
    path: /url_context
    method: POST
- name: ImageGenerationTool
  endpoint:
    path: /image_generation
    method: POST
- name: MemoryTool
  endpoint:
    path: /memory
    method: POST
- name: MCPServerTool
  endpoint:
    path: /mcp_server
    method: POST
- name: tavily_search
  endpoint:
    path: /tavily/search
    method: POST
- name: model_response
  endpoint:
    path: /model_response
    method: GET
    data_selector: response
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: model.request
  endpoint:
    path: /model.request
    method: POST
- name: model.request_stream
  endpoint:
    path: /model.request_stream
    method: POST
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: output
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: output
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: StreamedRunResult
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: AgentStreamEvent | AgentRunResultEvent
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: AgentRun
    params: {}
- name: VideoUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: url
    params: {}
- name: AudioUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: url
    params: {}
- name: ImageUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: url
    params: {}
- name: DocumentUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: url
    params: {}
- name: BinaryContent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: data
    params: {}
- name: BinaryImage
  endpoint:
    path: /BinaryImage
    method: POST
    data_selector: data
    params: {}
- name: ToolReturn
  endpoint:
    path: /ToolReturn
    method: POST
    data_selector: return_value
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: support_agent
  endpoint:
    path: /api/models/openai/gpt-5
    method: POST
    data_selector: output
    params: {}
- name: customer_balance
  endpoint:
    path: /api/models/openai/gpt-5/tools/customer_balance
    method: POST
    data_selector: output
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: user
  endpoint:
    path: /users/get
    method: GET
    data_selector: user_id
    params: {}
- name: message
  endpoint:
    path: /messages/send
    method: POST
    data_selector: message_id
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
    params: {}
- name: run_results
  endpoint:
    path: /run_results
    method: GET
    data_selector: results
    params: {}
- name: dice_game
  endpoint:
    path: /dice_game
    method: POST
    data_selector: result
    params: {}
- name: foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
    params: {}
- name: count_down
  endpoint:
    path: /count_down
    method: GET
    data_selector: data
    params: {}
- name: question_graph
  endpoint:
    path: /question_graph
    method: GET
    data_selector: data
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: nodes
    params:
      user_prompt: What is the capital of France?
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: wrapped_request_step
  endpoint:
    path: /model/request
    method: POST
- name: wrapped_request_stream_step
  endpoint:
    path: /model/request_stream
    method: GET
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: tasks
  endpoint:
    path: /tasks
    method: POST
    data_selector: result
    params: {}
- name: tasks_send
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: result
    params: {}
- name: tasks_get
  endpoint:
    path: /tasks/get
    method: POST
    data_selector: result
    params: {}
- name: tasks_cancel
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: result
    params: {}
- name: video_url
  endpoint:
    path: /services/data/vXX.X/sobjects/VideoUrl
    method: GET
    data_selector: records
- name: audio_url
  endpoint:
    path: /services/data/vXX.X/sobjects/AudioUrl
    method: GET
    data_selector: records
- name: image_url
  endpoint:
    path: /services/data/vXX.X/sobjects/ImageUrl
    method: GET
    data_selector: records
- name: document_url
  endpoint:
    path: /services/data/vXX.X/sobjects/DocumentUrl
    method: GET
    data_selector: records
- name: binary_content
  endpoint:
    path: /services/data/vXX.X/sobjects/BinaryContent
    method: GET
    data_selector: records
- name: BinaryContent
  endpoint:
    path: /from_data_uri
    method: POST
    data_selector: data
    params: {}
- name: BinaryImage
  endpoint:
    path: /binary_image
    method: POST
    data_selector: data
    params: {}
- name: ToolReturn
  endpoint:
    path: /tool_return
    method: POST
    data_selector: return_value
    params: {}
- name: UserPromptPart
  endpoint:
    path: /user_prompt
    method: POST
    data_selector: content
    params: {}
- name: ModelRequest
  endpoint:
    path: /model_request
    method: POST
    data_selector: parts
    params: {}
- name: TextPart
  endpoint:
    path: /text_part
    method: GET
    data_selector: content
    params: {}
- name: ThinkingPart
  endpoint:
    path: /thinking_part
    method: GET
    data_selector: content
    params: {}
- name: FilePart
  endpoint:
    path: /file_part
    method: GET
    data_selector: content
    params: {}
- name: BaseToolCallPart
  endpoint:
    path: /base_tool_call_part
    method: GET
    data_selector: tool_name
    params: {}
- name: ToolCallPart
  endpoint:
    path: /tool_call_part
    method: GET
    data_selector: tool_name
    params: {}
- name: BuiltinToolCallPart
  endpoint:
    path: /builtin_tool_call_part
    method: GET
    data_selector: provider_name
    params: {}
- name: ModelResponse
  endpoint:
    path: /model_response
    method: GET
    data_selector: parts
    params: {}
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: records
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: records
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: records
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: records
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: records
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: records
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: records
    params: {}
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: GET
    data_selector: records
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: records
    params: {}
- name: ToolOutput
  endpoint:
    path: /ToolOutput
    method: GET
    data_selector: records
    params: {}
- name: NativeOutput
  endpoint:
    path: /NativeOutput
    method: GET
    data_selector: records
    params: {}
- name: PromptedOutput
  endpoint:
    path: /PromptedOutput
    method: GET
    data_selector: records
    params: {}
- name: TextOutput
  endpoint:
    path: /TextOutput
    method: GET
    data_selector: records
    params: {}
- name: AgentRunResult
  endpoint:
    path: /pydantic_ai/agent_run_result
    method: GET
    data_selector: result
- name: AgentRunResultEvent
  endpoint:
    path: /pydantic_ai/agent_run_result_event
    method: GET
    data_selector: result
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki_tool
  endpoint:
    path: /mcp
    method: GET
- name: deferred_tool_requests
  endpoint:
    path: /deferred_tool_requests
    method: POST
    data_selector: result
    params: {}
- name: deferred_tool_results
  endpoint:
    path: /deferred_tool_results
    method: GET
    data_selector: result
    params: {}
- name: GoogleModel
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: deepseek-chat
  endpoint:
    path: /api/chat
    method: POST
- name: vending_machine
  endpoint:
    path: /vending_machine
    method: POST
    data_selector: vending_machine_data
    params: {}
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: POST
    data_selector: feedback_graph_data
    params: {}
- name: CountDown
  endpoint:
    path: /count_down
    method: GET
    data_selector: records
    params: {}
- name: EmailFeedback
  endpoint:
    path: /email_feedback
    method: POST
    data_selector: feedback
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: POST
    data_selector: overrides
    params: {}
- name: sequential_tool_calls
  endpoint:
    path: /sequential_tool_calls
    method: POST
    data_selector: tool_calls
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/WebSearchTool
    method: GET
    data_selector: tool_data
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/CodeExecutionTool
    method: GET
    data_selector: tool_data
    params: {}
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/UrlContextTool
    method: GET
    data_selector: tool_data
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/ImageGenerationTool
    method: GET
    data_selector: tool_data
    params: {}
- name: MemoryTool
  endpoint:
    path: /builtin_tools/MemoryTool
    method: GET
    data_selector: tool_data
    params: {}
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/MCPServerTool
    method: GET
    data_selector: tool_data
    params: {}
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: ModelResponseStreamEvent
  endpoint:
    path: /stream/ModelResponseStreamEvent
    method: GET
    data_selector: events
- name: ModelResponse
  endpoint:
    path: /response/ModelResponse
    method: GET
    data_selector: response
- name: RequestUsage
  endpoint:
    path: /usage/RequestUsage
    method: GET
    data_selector: usage
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: agent_run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: PATCH
    data_selector: none
    params: {}
- name: DBOSModelRequest
  endpoint:
    path: /model/request
    method: POST
- name: DBOSModelRequestStream
  endpoint:
    path: /model/request_stream
    method: POST
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: results
    params: {}
- name: VideoUrl
  endpoint:
    path: /video/url
    method: GET
    data_selector: url
    params: {}
- name: AudioUrl
  endpoint:
    path: /audio/url
    method: GET
    data_selector: url
    params: {}
- name: ImageUrl
  endpoint:
    path: /image/url
    method: GET
    data_selector: url
    params: {}
- name: DocumentUrl
  endpoint:
    path: /document/url
    method: GET
    data_selector: url
    params: {}
- name: BinaryContent
  endpoint:
    path: /binary/content
    method: GET
    data_selector: data
    params: {}
- name: BinaryContent
  endpoint:
    path: /data-uri
    method: POST
    data_selector: content
    params: {}
- name: BinaryImage
  endpoint:
    path: /binary-image
    method: POST
    data_selector: content
    params: {}
- name: ToolReturn
  endpoint:
    path: /tool-return
    method: POST
    data_selector: content
    params: {}
- name: UserPromptPart
  endpoint:
    path: /user-prompt
    method: POST
    data_selector: content
    params: {}
- name: ThinkingPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: FilePart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: BaseToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
- name: ToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
- name: BuiltinToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: provider_name
- name: ModelResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
- name: RetryConfig
  endpoint:
    path: /pydantic_ai/retries
    method: GET
    data_selector: configuration
    params: {}
- name: AnthropicStreamedResponse
  endpoint:
    path: /models/streamed_response
    method: GET
    data_selector: response
    params: {}
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: function_tools
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: _settings
    params: {}
- name: Agent
  endpoint:
    path: /api/agent
    method: GET
    data_selector: records
- name: SupportAgent
  endpoint:
    path: /api/support-agent
    method: POST
    data_selector: records
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: mcp_server
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: result
    params: {}
- name: model_request_sync
  endpoint:
    path: /model/request_sync
    method: POST
    data_selector: result
    params: {}
- name: model_request_stream
  endpoint:
    path: /model/request_stream
    method: POST
    data_selector: result
    params: {}
- name: model_request_stream_sync
  endpoint:
    path: /model/request_stream_sync
    method: POST
    data_selector: result
    params: {}
- name: joke_factory
  endpoint:
    path: /example.com
    method: GET
    data_selector: output
    params:
      count: count
- name: flight_search
  endpoint:
    path: /unknown
    method: GET
    data_selector: output
    params:
      origin: origin
      destination: destination
- name: get_preferred_language
  endpoint:
    path: /get_preferred_language
    method: POST
    data_selector: output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek-chat
    method: POST
- name: WriteEmail
  endpoint:
    path: /WriteEmail
    method: POST
- name: Feedback
  endpoint:
    path: /Feedback
    method: POST
- name: EmailRequiresWrite
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: feedback
    params: {}
- name: EmailOk
  endpoint:
    path: /email/success
    method: GET
    data_selector: result
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /agent/stream/events
    method: GET
    data_selector: events
- name: AgentRunResultEvent
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
- name: WebSearchTool
  endpoint:
    path: /web_search
    method: POST
    data_selector: results
- name: CodeExecutionTool
  endpoint:
    path: /code_execution
    method: POST
    data_selector: results
- name: UrlContextTool
  endpoint:
    path: /url_context
    method: POST
    data_selector: results
- name: ImageGenerationTool
  endpoint:
    path: /image_generation
    method: POST
    data_selector: results
- name: MemoryTool
  endpoint:
    path: /memory
    method: POST
    data_selector: results
- name: MCPServerTool
  endpoint:
    path: /mcp_server
    method: POST
    data_selector: results
- name: tavily_search_tool
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: agent
  endpoint:
    path: /api/v1/agent
    method: POST
    data_selector: data
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: output
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: BinaryContent
  endpoint:
    path: /from_data_uri
    method: POST
    data_selector: data
    params: {}
- name: BinaryImage
  endpoint:
    path: /BinaryImage
    method: POST
    data_selector: data
    params: {}
- name: ToolReturn
  endpoint:
    path: /ToolReturn
    method: POST
    data_selector: return_value
    params: {}
- name: ThinkingPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
    params: {}
- name: FilePart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
    params: {}
- name: BaseToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
    params: {}
- name: ToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
    params: {}
- name: BuiltinToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
    params: {}
- name: ModelResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
    params: {}
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: part
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: delta
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: tool_name
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: part
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: result
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: part
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: result
    params: {}
- name: StructuredDict
  endpoint:
    path: /StructuredDict
    method: POST
- name: KnownModelName
  endpoint:
    path: /KnownModelName
    method: GET
    data_selector: model_names
    params: {}
- name: ModelRequestParameters
  endpoint:
    path: /ModelRequestParameters
    method: GET
    data_selector: request_parameters
    params: {}
- name: Model
  endpoint:
    path: /Model
    method: GET
    data_selector: model_info
    params: {}
- name: DocumentState
  endpoint:
    path: ag_ui_state.py
    method: GET
- name: weather_forecast
  endpoint:
    path: ag_ui_tool_events.py
    method: GET
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: joke_selection_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
    params:
      count: count
- name: joke_generation_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
    params:
      count: count
- name: flight_search_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
    params:
      origin: origin
      destination: destination
- name: seat_preference_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
    params:
      seat: seat
- name: sum
  endpoint:
    path: /foobar
    method: POST
    data_selector: sum
    params: {}
- name: hitchhiker
  endpoint:
    path: /hitchhiker
    method: POST
    data_selector: hitchhiker
    params: {}
- name: greet
  endpoint:
    path: /greet
    method: POST
    data_selector: greet
    params: {}
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: roll
    params: {}
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: name
    params: {}
- name: deepseek-chat
  endpoint:
    path: /api/chat
    method: POST
- name: email_writer_agent
  endpoint:
    path: /google-gla:gemini-1.5-pro
    method: POST
    data_selector: output
- name: GraphRun
  endpoint:
    path: /graph/run
    method: POST
    data_selector: result
    params: {}
- name: StatePersistence
  endpoint:
    path: /state/persistence
    method: GET
    data_selector: history
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: agent_stream_events
  endpoint:
    path: /pydantic_ai/agent/stream_events
    method: GET
    data_selector: events
- name: agent_run_result
  endpoint:
    path: /pydantic_ai/agent/run_result
    method: GET
    data_selector: result
- name: WebSearchTool
  endpoint:
    path: /builtin/tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin/tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin/tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin/tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin/tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin/tools/mcp_server
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: StepConfig
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/durable_exec/dbos/_utils.py
    method: GET
    data_selector: retries_allowed
    params: {}
- name: PrefectAgent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/durable_exec/prefect/_agent.py
    method: GET
    data_selector: name
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: iteration
    params: {}
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
    params: {}
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
    params: {}
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
    params: {}
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
    params: {}
- name: ThinkingPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: FilePart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: BaseToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
- name: ModelResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: records
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: records
- name: AgentRunResult
  endpoint:
    path: /agent_run_result
    method: GET
    data_selector: output
    params: {}
- name: AgentRunResultEvent
  endpoint:
    path: /agent_run_result_event
    method: GET
    data_selector: result
    params: {}
- name: DeferredToolRequests
  endpoint:
    path: /deferred_tool_requests
    method: GET
    data_selector: calls
    params: {}
- name: ToolApproved
  endpoint:
    path: /tool_approved
    method: POST
    data_selector: override_args
    params: {}
- name: ToolDenied
  endpoint:
    path: /tool_denied
    method: POST
    data_selector: message
    params: {}
- name: DeferredToolResults
  endpoint:
    path: /deferred_tool_results
    method: GET
    data_selector: calls
    params: {}
- name: KnownModelName
  endpoint:
    path: /model/names
    method: GET
    data_selector: models
- name: ModelRequestParameters
  endpoint:
    path: /model/request-parameters
    method: POST
    data_selector: parameters
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
- name: user
  endpoint:
    path: /agent/tool
    method: GET
    data_selector: user_id
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: joke_factory
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params: {}
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: output
    params: {}
- name: sum
  endpoint:
    path: /foobar
    method: POST
    data_selector: sum
    params:
      required:
      - a
      - b
- name: Foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result
    params: {}
- name: feedback_graph
  endpoint:
    path: /feedback
    method: POST
    data_selector: output
    params: {}
- name: count_down
  endpoint:
    path: /count_down
    method: GET
    data_selector: records
    params: {}
- name: question_graph
  endpoint:
    path: /question_graph
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: records
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: records
    params: {}
- name: WebSearchTool
  endpoint:
    path: web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: mcp_server
    method: GET
- name: tavily_search_tool
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: output
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: output
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: output
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: results
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: results
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: BinaryContent
  endpoint:
    path: /from_data_uri
    method: POST
    data_selector: content
    params: {}
- name: BinaryImage
  endpoint:
    path: /binary_image
    method: POST
    data_selector: content
    params: {}
- name: ToolReturn
  endpoint:
    path: /tool_return
    method: POST
    data_selector: return_value
    params: {}
- name: UserPromptPart
  endpoint:
    path: /user_prompt
    method: POST
    data_selector: content
    params: {}
- name: RetryPromptPart
  endpoint:
    path: /retry_prompt
    method: POST
    data_selector: content
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: records
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: records
- name: model_settings
  endpoint:
    path: /pydantic_ai/toolsets/ModelSettings
    method: GET
    data_selector: settings
    params: {}
- name: AbstractToolset
  endpoint:
    path: /pydantic_ai/toolsets/abstract
    method: GET
    data_selector: tools
    params: {}
- name: CombinedToolset
  endpoint:
    path: /pydantic_ai/toolsets/combined
    method: GET
    data_selector: tools
    params: {}
- name: ExternalToolset
  endpoint:
    path: /pydantic_ai/toolsets/external
    method: GET
    data_selector: tools
    params: {}
- name: model_name
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: cohere_model
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: document
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: forecast
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: response
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: output
    params: {}
- name: joke_factory
  endpoint:
    path: https://example.com
    method: GET
    data_selector: list[str]
    params:
      count: int
- name: flight_search
  endpoint:
    path: https://example.com
    method: GET
    data_selector: FlightDetails | Failed
    params:
      origin: str
      destination: str
- name: get_jokes
  endpoint:
    path: https://example.com
    method: GET
    data_selector: str
    params:
      count: int
- name: Foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
- name: EmailRequiresWrite
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: feedback
    params: {}
- name: EmailOk
  endpoint:
    path: /email/success
    method: GET
    data_selector: success
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
- name: AgentRunResultEvent
  endpoint:
    path: /AgentRunResultEvent
    method: GET
- name: AgentRun
  endpoint:
    path: /pydantic_ai/agent/run
    method: GET
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: result
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/WebSearchTool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/CodeExecutionTool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/UrlContextTool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/ImageGenerationTool
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/MemoryTool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/MCPServerTool
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: agent_iter
  endpoint:
    path: /agent/iter
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: results
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: content
  endpoint:
    path: content
    method: GET
    data_selector: content
- name: id
  endpoint:
    path: id
    method: GET
    data_selector: id
- name: part_kind
  endpoint:
    path: part_kind
    method: GET
    data_selector: part_kind
- name: has_content
  endpoint:
    path: has_content
    method: GET
    data_selector: has_content
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: index
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: index
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: tool_name
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: part
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: result
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: part
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: result
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: GET
    data_selector: event_kind
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: event_kind
- name: OutputDataT
  endpoint:
    path: /OutputDataT
    method: GET
    data_selector: output
- name: ToolOutput
  endpoint:
    path: /ToolOutput
    method: GET
    data_selector: name
- name: NativeOutput
  endpoint:
    path: /NativeOutput
    method: GET
    data_selector: outputs
- name: PromptedOutput
  endpoint:
    path: /PromptedOutput
    method: GET
    data_selector: outputs
- name: TextOutput
  endpoint:
    path: /TextOutput
    method: GET
    data_selector: output_function
- name: agent_run_result
  endpoint:
    path: /agent_run_result
    method: GET
    data_selector: result
    params: {}
- name: agent_run_result_event
  endpoint:
    path: /agent_run_result_event
    method: GET
    data_selector: event_kind
    params: {}
- name: ModelSettings
  endpoint:
    path: /model/settings
    method: GET
    data_selector: settings
    params: {}
- name: RunContext
  endpoint:
    path: /run/context
    method: GET
    data_selector: context
    params: {}
- name: cohere_model
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: FallbackModel
  endpoint:
    path: /pydantic_ai/models/fallback
    method: GET
- name: FunctionModel
  endpoint:
    path: /pydantic_ai/models/function
    method: GET
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
- name: support_agent
  endpoint:
    path: /api/support_agent
    method: POST
    data_selector: result
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: mcp_server_deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: mcp_server_github
  endpoint:
    path: /mcp/
    method: GET
- name: mcp_server_google_calendar
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
- name: image_input
  endpoint:
    path: /example/image_input
    method: POST
    data_selector: results
- name: audio_input
  endpoint:
    path: /example/audio_input
    method: POST
    data_selector: results
- name: video_input
  endpoint:
    path: /example/video_input
    method: POST
    data_selector: results
- name: document_input
  endpoint:
    path: /example/document_input
    method: POST
    data_selector: results
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: result
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: name
- name: foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
- name: deepseek-chat
  endpoint:
    path: /api/chat
    method: POST
- name: email_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result.output
- name: AGUIApp
  endpoint:
    path: /ag_ui
    method: POST
    data_selector: agent_run_result
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: run_stream_events
  endpoint:
    path: /agent/run_stream_events
    method: GET
    data_selector: events
- name: iter
  endpoint:
    path: /agent/iter
    method: GET
    data_selector: nodes
- name: override
  endpoint:
    path: /agent/override
    method: POST
    data_selector: none
- name: sequential_tool_calls
  endpoint:
    path: /agent/sequential_tool_calls
    method: POST
    data_selector: none
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/WebSearchTool
    method: GET
    data_selector: tool
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/CodeExecutionTool
    method: GET
    data_selector: tool
    params: {}
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/UrlContextTool
    method: GET
    data_selector: tool
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/ImageGenerationTool
    method: GET
    data_selector: tool
    params: {}
- name: MemoryTool
  endpoint:
    path: /builtin_tools/MemoryTool
    method: GET
    data_selector: tool
    params: {}
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/MCPServerTool
    method: GET
    data_selector: tool
    params: {}
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: DBOSAgent
  endpoint:
    path: /dbos/agent
    method: POST
    data_selector: result
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: StreamedRunResult
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: AgentStreamEvent | AgentRunResultEvent
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: AgentRun
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: tasks
  endpoint:
    path: /tasks/send
    method: POST
- name: task_status
  endpoint:
    path: /tasks/get
    method: GET
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
- name: tools
  endpoint:
    path: /tools
    method: GET
    data_selector: tools
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
    data_selector: records
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
    data_selector: records
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
    data_selector: records
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
    data_selector: records
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: text
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: thinking
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: file
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: tool_call
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: builtin_tool_call
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: model_response
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: get_tools
  endpoint:
    path: /get_tools
    method: GET
    data_selector: tools
    params: {}
- name: call_tool
  endpoint:
    path: /call_tool
    method: POST
    data_selector: result
    params: {}
- name: hello_world
  endpoint:
    path: /api/models/anthropic/
    method: GET
    data_selector: output
- name: bank_support
  endpoint:
    path: /examples/bank-support/
    method: GET
    data_selector: output
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: documents
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: forecast
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model_request
    method: POST
    data_selector: result
    params: {}
- name: joke_selection_agent
  endpoint:
    path: /joke_selection_agent
    method: GET
    data_selector: output
    params: {}
- name: joke_generation_agent
  endpoint:
    path: /joke_generation_agent
    method: GET
    data_selector: output
    params: {}
- name: flight_search_agent
  endpoint:
    path: /flight_search_agent
    method: GET
    data_selector: output
    params: {}
- name: seat_preference_agent
  endpoint:
    path: /seat_preference_agent
    method: GET
    data_selector: output
    params: {}
- name: sql_agent
  endpoint:
    path: /sql_agent
    method: GET
    data_selector: output
    params: {}
- name: router_agent
  endpoint:
    path: /router_agent
    method: GET
    data_selector: output
    params: {}
- name: foobar
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: get_preferred_language
  endpoint:
    path: /get_preferred_language
    method: GET
    data_selector: result
    params: {}
- name: vending_machine
  endpoint:
    path: /vending_machine
    method: POST
    data_selector: result
    params: {}
- name: email_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result
    params: {}
- name: Feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result.output
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: AgentRun
  endpoint:
    path: /AgentRun
    method: GET
    data_selector: result
    params: {}
- name: web_search
  endpoint:
    path: /web_search
    method: POST
    data_selector: results
    params: {}
- name: code_execution
  endpoint:
    path: /code_execution
    method: POST
    data_selector: results
    params: {}
- name: url_context
  endpoint:
    path: /url_context
    method: POST
    data_selector: results
    params: {}
- name: image_generation
  endpoint:
    path: /image_generation
    method: POST
    data_selector: results
    params: {}
- name: memory
  endpoint:
    path: /memory
    method: POST
    data_selector: results
    params: {}
- name: mcp_server
  endpoint:
    path: /mcp_server
    method: POST
    data_selector: results
    params: {}
- name: tavily_search_tool
  endpoint:
    path: /tavily/search
    method: GET
    data_selector: results
- name: ModelResponseStreamEvent
  endpoint:
    path: /model/response/stream/event
    method: GET
    data_selector: events
- name: ModelResponse
  endpoint:
    path: /model/response
    method: GET
    data_selector: response
- name: RequestUsage
  endpoint:
    path: /request/usage
    method: GET
    data_selector: usage
- name: temporal_run_context
  endpoint:
    path: /temporal/run_context
    method: GET
    data_selector: data
- name: dbos_agent
  endpoint:
    path: /dbos/agent
    method: POST
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: nodes
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: VideoUrl
  endpoint:
    path: /path/to/video
    method: GET
    data_selector: video_data
- name: AudioUrl
  endpoint:
    path: /path/to/audio
    method: GET
    data_selector: audio_data
- name: ImageUrl
  endpoint:
    path: /path/to/image
    method: GET
    data_selector: image_data
- name: DocumentUrl
  endpoint:
    path: /path/to/document
    method: GET
    data_selector: document_data
- name: BinaryContent
  endpoint:
    path: /path/to/binary
    method: GET
    data_selector: binary_data
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: records
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
- name: has_content
  endpoint:
    path: /has_content
    method: GET
    data_selector: has_content
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: BedrockModelSettings
  endpoint:
    path: /bedrock/model/settings
    method: GET
    data_selector: settings
    params: {}
- name: model_response
  endpoint:
    path: /api/v1/model_response
    method: POST
    data_selector: response
    params: {}
- name: agent
  endpoint:
    path: /pydantic_ai/agent
    method: POST
    data_selector: result
- name: run
  endpoint:
    path: /pydantic_ai/run
    method: POST
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: records
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: sum
  endpoint:
    path: /foobar
    method: POST
    data_selector: sum
    params: {}
- name: hitchhiker
  endpoint:
    path: /hitchhiker
    method: POST
    data_selector: hitchhiker
    params: {}
- name: greet
  endpoint:
    path: /greet
    method: POST
    data_selector: greet
    params: {}
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: POST
    data_selector: roll_dice
    params: {}
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: POST
    data_selector: get_player_name
    params: {}
- name: toolset
  endpoint:
    path: /tools
    method: GET
    data_selector: tools
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
    params: {}
- name: GoogleModel
  endpoint:
    path: /models
    method: GET
- name: Groq
  endpoint:
    path: /models/groq
    method: GET
- name: HuggingFace
  endpoint:
    path: /models/huggingface
    method: GET
- name: Mistral
  endpoint:
    path: /models/mistral
    method: GET
- name: OpenAI
  endpoint:
    path: /models/openai
    method: GET
- name: deepseek-chat
  endpoint:
    path: /deepseek-chat
    method: GET
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: POST
    data_selector: output
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: AgentStreamEvent | AgentRunResultEvent[Any]
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: AgentRun[AgentDepsT, Any]
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin/tools/web_search
    method: GET
    data_selector: tool_data
- name: CodeExecutionTool
  endpoint:
    path: /builtin/tools/code_execution
    method: GET
    data_selector: tool_data
- name: UrlContextTool
  endpoint:
    path: /builtin/tools/url_context
    method: GET
    data_selector: tool_data
- name: ImageGenerationTool
  endpoint:
    path: /builtin/tools/image_generation
    method: GET
    data_selector: tool_data
- name: MemoryTool
  endpoint:
    path: /builtin/tools/memory
    method: GET
    data_selector: tool_data
- name: MCPServerTool
  endpoint:
    path: /builtin/tools/mcp_server
    method: GET
    data_selector: tool_data
- name: tavily_search_tool
  endpoint:
    path: api_key
    method: POST
- name: model_response
  endpoint:
    path: /api/v1/model_response
    method: GET
    data_selector: response
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: wrapped_request_step
  endpoint:
    path: /model/request
    method: POST
    data_selector: response
    params: {}
- name: wrapped_request_stream_step
  endpoint:
    path: /model/request_stream
    method: GET
    data_selector: streamed_response
    params: {}
- name: agent_run
  endpoint:
    path: /run
    method: POST
    data_selector: output
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
    params: {}
- name: video_url
  endpoint:
    path: /video-url
    method: GET
    data_selector: video_data
- name: audio_url
  endpoint:
    path: /audio-url
    method: GET
    data_selector: audio_data
- name: image_url
  endpoint:
    path: /image-url
    method: GET
    data_selector: image_data
- name: document_url
  endpoint:
    path: /document-url
    method: GET
    data_selector: document_data
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ThinkingPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: FilePart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: BaseToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
    params: {}
- name: ModelResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/PartStartEvent
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/PartDeltaEvent
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/FinalResultEvent
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/FunctionToolCallEvent
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/FunctionToolResultEvent
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolCallEvent
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolResultEvent
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai/AgentStreamEvent
    method: GET
    data_selector: records
- name: agent_run_result
  endpoint:
    path: /agent_run_result
    method: GET
    data_selector: result
- name: agent_run_result_event
  endpoint:
    path: /agent_run_result_event
    method: GET
    data_selector: result
- name: ModelRequestParameters
  endpoint:
    path: ModelRequestParameters
    method: GET
    data_selector: parameters
    params: {}
- name: Model
  endpoint:
    path: Model
    method: GET
    data_selector: models
    params: {}
- name: FallbackModel
  endpoint:
    path: /pydantic_ai/models/fallback
    method: GET
- name: FunctionModel
  endpoint:
    path: /pydantic_ai/models/function
    method: GET
- name: FunctionStreamedResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/function.py
    method: GET
    data_selector: response
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: output
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: user_id
    params: {}
- name: message
  endpoint:
    path: /messages
    method: POST
    data_selector: message_id
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: results
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
    params: {}
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: output
    params:
      origin: origin
      destination: destination
- name: seat_preference
  endpoint:
    path: /seat_preference
    method: GET
    data_selector: output
    params:
      row: row
      seat: seat
- name: Tool
  endpoint:
    path: /tools
    method: GET
    data_selector: tools
    params: {}
- name: Agent
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
    params: {}
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: properties
    params:
      required:
      - x
      - y
- name: deferred_tool_requests
  endpoint:
    path: /deferred_tool_requests
    method: POST
    data_selector: output.requests
    params: {}
- name: email_writer_agent
  endpoint:
    path: /google-gla:gemini-1.5-pro
    method: POST
    data_selector: output
    params: {}
- name: feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: result.output
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: streaming_events
    params: {}
- name: run_stream_events
  endpoint:
    path: /run/stream/events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: agent_stream_events
  endpoint:
    path: /agent/stream/events
    method: GET
- name: agent_run_result
  endpoint:
    path: /agent/run/result
    method: GET
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: results
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
- name: WebSearchTool
  endpoint:
    path: /models/web_search_tool
    method: POST
    data_selector: tool_data
- name: CodeExecutionTool
  endpoint:
    path: /models/code_execution_tool
    method: POST
    data_selector: tool_data
- name: UrlContextTool
  endpoint:
    path: /models/url_context_tool
    method: POST
    data_selector: tool_data
- name: ImageGenerationTool
  endpoint:
    path: /models/image_generation_tool
    method: POST
    data_selector: tool_data
- name: MemoryTool
  endpoint:
    path: /models/memory_tool
    method: POST
    data_selector: tool_data
- name: MCPServerTool
  endpoint:
    path: /models/mcp_server_tool
    method: POST
    data_selector: tool_data
- name: tavily_search_tool
  endpoint:
    path: /tavily/search
    method: POST
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: AgentRunResult
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: AgentRunResult
    params: {}
- name: user_prompt
  endpoint:
    path: /api/v1/user_prompt
    method: POST
    data_selector: data
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: nodes
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: response
    params: {}
- name: get_task
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: response
    params: {}
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: response
    params: {}
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: response
    params: {}
- name: message_send
  endpoint:
    path: /
    method: POST
- name: get_task
  endpoint:
    path: /
    method: POST
- name: video_url
  endpoint:
    path: /video_url
    method: GET
- name: audio_url
  endpoint:
    path: /audio_url
    method: GET
- name: image_url
  endpoint:
    path: /image_url
    method: GET
- name: document_url
  endpoint:
    path: /document_url
    method: GET
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: BinaryContent
    params: {}
- name: thinking_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: file_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: base_tool_call_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
- name: tool_call_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_call_id
- name: builtin_tool_call_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: provider_name
- name: model_response
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
- name: text
  endpoint:
    path: /text
    method: GET
    data_selector: text
- name: thinking
  endpoint:
    path: /thinking
    method: GET
    data_selector: thinking
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: tool_calls
  endpoint:
    path: /tool_calls
    method: GET
    data_selector: tool_calls
- name: builtin_tool_calls
  endpoint:
    path: /builtin_tool_calls
    method: GET
    data_selector: builtin_tool_calls
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: index
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: index
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: tool_name
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: part
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: result
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: part
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: result
    params: {}
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: GET
    data_selector: event_kind
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: event_kind
    params: {}
- name: agent_run_result
  endpoint:
    path: /pydantic_ai/agent_run_result
    method: GET
    data_selector: result
    params: {}
- name: agent_run_result_event
  endpoint:
    path: /pydantic_ai/agent_run_result_event
    method: GET
    data_selector: result
    params: {}
- name: cohere_model
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
    params: {}
- name: model_name
- name: agent
  endpoint:
    path: /api/agent/
    method: POST
    data_selector: result
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: user
  endpoint:
    path: /users/get_by_name
    method: GET
    data_selector: user_id
- name: message
  endpoint:
    path: /messages/send
    method: POST
    data_selector: message_id
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: records
    params: {}
- name: foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: foobar
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /chat
    method: POST
- name: vending_machine_graph
  endpoint:
    path: /vending_machine
    method: GET
    data_selector: graph
    params: {}
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: GET
    data_selector: graph
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
    params: {}
- name: run_input
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: input_data
    params: {}
- name: run_stream_events
  endpoint:
    path: /pydantic_ai/agent/run_stream_events
    method: GET
    data_selector: AgentStreamEvent | AgentRunResultEvent
    params: {}
- name: iter
  endpoint:
    path: /pydantic_ai/agent/iter
    method: GET
    data_selector: AgentRun
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: node
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: model_response_stream_event
  endpoint:
    path: /model_response_stream_event
    method: GET
    data_selector: ModelResponseStreamEvent
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: tasks
  endpoint:
    path: /tasks/send
    method: POST
- name: pushNotification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
- name: video_url
  endpoint:
    path: /video-url
    method: GET
- name: audio_url
  endpoint:
    path: /audio-url
    method: GET
- name: image_url
  endpoint:
    path: /image-url
    method: GET
- name: document_url
  endpoint:
    path: /document-url
    method: GET
- name: binary_content
  endpoint:
    path: /binary-content
    method: GET
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: BinaryImage
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: ToolReturn
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: UserPromptPart
- name: BaseToolReturnPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: BaseToolReturnPart
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: RetryPromptPart
- name: ModelRequest
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: ModelRequest
- name: content
  endpoint:
    path: content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: has_content
  endpoint:
    path: has_content
    method: GET
    data_selector: has_content
    params: {}
- name: json_schema
  endpoint:
    path: json_schema
    method: POST
    data_selector: properties
- name: name
  endpoint:
    path: name
    method: GET
    data_selector: properties
- name: description
  endpoint:
    path: description
    method: GET
    data_selector: properties
- name: request_limit
  endpoint:
    path: /request_limit
    method: GET
    data_selector: records
- name: tool_calls_limit
  endpoint:
    path: /tool_calls_limit
    method: GET
    data_selector: records
- name: input_tokens_limit
  endpoint:
    path: /input_tokens_limit
    method: GET
    data_selector: records
- name: output_tokens_limit
  endpoint:
    path: /output_tokens_limit
    method: GET
    data_selector: records
- name: total_tokens_limit
  endpoint:
    path: /total_tokens_limit
    method: GET
    data_selector: records
- name: fallback_model
  endpoint:
    path: /models/fallback
    method: POST
    data_selector: models
- name: function_model
  endpoint:
    path: /models/function
    method: POST
    data_selector: function
- name: task_run
  endpoint:
    path: /api/v1/task_run
    method: POST
    data_selector: data
- name: forecast
  endpoint:
    path: /v1/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /v1/historic_weather
    method: GET
    data_selector: historic_data
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model_request
    method: POST
    data_selector: response
    params: {}
- name: image_input
  endpoint:
    path: /image_input
    method: POST
    data_selector: response
    params: {}
- name: audio_input
  endpoint:
    path: /audio_input
    method: POST
    data_selector: response
    params: {}
- name: video_input
  endpoint:
    path: /video_input
    method: POST
    data_selector: response
    params: {}
- name: document_input
  endpoint:
    path: /document_input
    method: POST
    data_selector: response
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
- name: email_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: AG-UI run input
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
- name: tavily_search_tool
  endpoint:
    path: /search
    method: POST
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: output
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
- name: agent_run
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
    params: {}
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: records
- name: send_message
  endpoint:
    path: /message/send
    method: POST
    data_selector: result
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: result
- name: video
  endpoint:
    path: /video/url
    method: GET
    data_selector: url
    params: {}
- name: audio
  endpoint:
    path: /audio/url
    method: GET
    data_selector: url
    params: {}
- name: image
  endpoint:
    path: /image/url
    method: GET
    data_selector: url
    params: {}
- name: document
  endpoint:
    path: /document/url
    method: GET
    data_selector: url
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: has_content
  endpoint:
    path: /has_content
    method: GET
    data_selector: has_content
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: PartStartEvent
  endpoint:
    path: /part_start_event
    method: GET
    data_selector: part
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /part_delta_event
    method: GET
    data_selector: delta
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /final_result_event
    method: GET
    data_selector: result
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /function_tool_call_event
    method: GET
    data_selector: part
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /function_tool_result_event
    method: GET
    data_selector: result
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /builtin_tool_call_event
    method: GET
    data_selector: part
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /builtin_tool_result_event
    method: GET
    data_selector: result
    params: {}
- name: HandleResponseEvent
  endpoint:
    path: /handle_response_event
    method: GET
    data_selector: event
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /agent_stream_event
    method: GET
    data_selector: event
    params: {}
- name: agent_run_result
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
- name: agent_run_result_event
  endpoint:
    path: /agent/run/result/event
    method: GET
    data_selector: event
- name: max_tokens
  endpoint:
    path: /path/to/max_tokens
    method: GET
    data_selector: records
- name: temperature
  endpoint:
    path: /path/to/temperature
    method: GET
    data_selector: records
- name: top_p
  endpoint:
    path: /path/to/top_p
    method: GET
    data_selector: records
- name: timeout
  endpoint:
    path: /path/to/timeout
    method: GET
    data_selector: records
- name: parallel_tool_calls
  endpoint:
    path: /path/to/parallel_tool_calls
    method: GET
    data_selector: records
- name: seed
  endpoint:
    path: /path/to/seed
    method: GET
    data_selector: records
- name: presence_penalty
  endpoint:
    path: /path/to/presence_penalty
    method: GET
    data_selector: records
- name: frequency_penalty
  endpoint:
    path: /path/to/frequency_penalty
    method: GET
    data_selector: records
- name: logit_bias
  endpoint:
    path: /path/to/logit_bias
    method: GET
    data_selector: records
- name: stop_sequences
  endpoint:
    path: /path/to/stop_sequences
    method: GET
    data_selector: records
- name: extra_headers
  endpoint:
    path: /path/to/extra_headers
    method: GET
    data_selector: records
- name: extra_body
  endpoint:
    path: /path/to/extra_body
    method: GET
    data_selector: records
- name: model_response
  endpoint:
    path: /model/response
    method: GET
    data_selector: contents
- name: groq_model
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: ModelRequest
  endpoint:
    path: /models/request
    method: POST
    data_selector: result
    params: {}
- name: joke_selection
  endpoint:
    path: /joke_selection
    method: GET
    data_selector: output
- name: joke_generation
  endpoint:
    path: /joke_generation
    method: GET
    data_selector: output
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: output
- name: seat_preference
  endpoint:
    path: /seat_preference
    method: GET
    data_selector: output
- name: foobar
  endpoint:
    path: foobar
    method: GET
    data_selector: function_tools
    params: {}
- name: email_writer_agent
  endpoint:
    path: /models/google-gla:gemini-1.5-pro
    method: POST
    data_selector: output
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: AgentStreamEvent
  endpoint:
    path: /agent/stream/events
    method: GET
    data_selector: events
- name: AgentRunResultEvent
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: ModelResponseStreamEvent
  endpoint:
    path: /pydantic_ai/models/cohere
    method: GET
    data_selector: response
    params: {}
- name: ModelResponse
  endpoint:
    path: /pydantic_ai/models/cohere/get
    method: GET
    data_selector: response
    params: {}
- name: RequestUsage
  endpoint:
    path: /pydantic_ai/models/cohere/usage
    method: GET
    data_selector: usage
    params: {}
- name: DBOSAgent
  endpoint:
    path: /dbos/agent
    method: POST
    data_selector: data
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: results
    params:
      user_prompt: user_prompt
      output_type: output_type
      message_history: message_history
      deferred_tool_results: deferred_tool_results
      model: model
      deps: deps
      model_settings: model_settings
      usage_limits: usage_limits
      usage: usage
      infer_name: infer_name
      toolsets: toolsets
      builtin_tools: builtin_tools
      event_stream_handler: event_stream_handler
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: results
    params:
      user_prompt: user_prompt
      output_type: output_type
      message_history: message_history
      deferred_tool_results: deferred_tool_results
      model: model
      deps: deps
      model_settings: model_settings
      usage_limits: usage_limits
      usage: usage
      infer_name: infer_name
      toolsets: toolsets
      builtin_tools: builtin_tools
      event_stream_handler: event_stream_handler
- name: VideoUrl
  endpoint:
    path: /video-understanding
    method: GET
    data_selector: vendor_metadata
- name: AudioUrl
  endpoint:
    path: /audio
    method: GET
    data_selector: vendor_metadata
- name: ImageUrl
  endpoint:
    path: /image
    method: GET
    data_selector: vendor_metadata
- name: DocumentUrl
  endpoint:
    path: /document
    method: GET
    data_selector: vendor_metadata
- name: BinaryContent
  endpoint:
    path: /binary-content
    method: GET
    data_selector: vendor_metadata
- name: BinaryContent
  endpoint:
    path: /from_data_uri
    method: POST
    data_selector: data
    params: {}
- name: BinaryImage
  endpoint:
    path: /binary_image
    method: POST
    data_selector: data
    params: {}
- name: ToolReturn
  endpoint:
    path: /tool_return
    method: POST
    data_selector: return_value
    params: {}
- name: UserPromptPart
  endpoint:
    path: /user_prompt_part
    method: POST
    data_selector: content
    params: {}
- name: RetryPromptPart
  endpoint:
    path: /retry_prompt_part
    method: POST
    data_selector: content
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
- name: has_content
  endpoint:
    path: /has_content
    method: GET
    data_selector: has_content
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/PartStartEvent
    method: GET
    data_selector: records
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/PartDeltaEvent
    method: GET
    data_selector: records
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/FinalResultEvent
    method: GET
    data_selector: records
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/FunctionToolCallEvent
    method: GET
    data_selector: records
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/FunctionToolResultEvent
    method: GET
    data_selector: records
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolCallEvent
    method: GET
    data_selector: records
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolResultEvent
    method: GET
    data_selector: records
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai/AgentStreamEvent
    method: GET
    data_selector: records
    params: {}
- name: KnownModelName
  endpoint:
    path: /models/known
    method: GET
    data_selector: models
- name: cohere_model
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
- name: FallbackModel
  endpoint:
    path: /fallback
    method: POST
    data_selector: models
    params: {}
- name: FunctionModel
  endpoint:
    path: /function
    method: POST
    data_selector: function
    params: {}
- name: groq_model
  endpoint:
    path: /models/groq
    method: POST
    data_selector: data
    params: {}
- name: huggingface_model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: model
  endpoint:
    path: /models/{model_name}
    method: GET
    data_selector: model_info
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: POST
    data_selector: state
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: forecast
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: get_system_prompt
  endpoint:
    path: /get_system_prompt
    method: GET
    data_selector: response.text
- name: get_joke_material
  endpoint:
    path: /get_joke_material
    method: GET
    data_selector: response.text
    params:
      subject: joke
- name: validate_output
  endpoint:
    path: /validate_output
    method: POST
    data_selector: output
    params:
      query: output
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
- name: sum
  endpoint:
    path: /sum
    method: POST
    data_selector: properties
- name: hitchhiker
  endpoint:
    path: /hitchhiker
    method: POST
    data_selector: properties
- name: greet
  endpoint:
    path: /greet
    method: POST
    data_selector: properties
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: result
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: result
- name: FunctionToolset
  endpoint:
    path: /toolsets/function
    method: GET
    data_selector: tools
    params: {}
- name: CombinedToolset
  endpoint:
    path: /toolsets/combined
    method: GET
    data_selector: tools
    params: {}
- name: FilteredToolset
  endpoint:
    path: /toolsets/filtered
    method: GET
    data_selector: tools
    params: {}
- name: RenamedToolset
  endpoint:
    path: /toolsets/renamed
    method: GET
    data_selector: tools
    params: {}
- name: PreparedToolset
  endpoint:
    path: /toolsets/prepared
    method: GET
    data_selector: tools
    params: {}
- name: ApprovalRequiredToolset
  endpoint:
    path: /toolsets/approval-required
    method: GET
    data_selector: tools
    params: {}
- name: WrapperToolset
  endpoint:
    path: /toolsets/wrapper
    method: GET
    data_selector: tools
    params: {}
- name: ExternalToolset
  endpoint:
    path: /toolsets/external
    method: GET
    data_selector: tools
    params: {}
- name: groq_model
  endpoint:
    path: /models/groq
    method: GET
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: streaming_event_chunks
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: POST
    data_selector: override_result
    params: {}
- name: sequential_tool_calls
  endpoint:
    path: /sequential_tool_calls
    method: GET
    data_selector: tool_calls
    params: {}
- name: UserPromptNode
  endpoint:
    path: /
    method: GET
    data_selector: nodes
    params: {}
- name: ModelRequestNode
  endpoint:
    path: /
    method: GET
    data_selector: nodes
    params: {}
- name: CallToolsNode
  endpoint:
    path: /
    method: GET
    data_selector: nodes
    params: {}
- name: End
  endpoint:
    path: /
    method: GET
    data_selector: nodes
    params: {}
- name: WebSearchTool
  endpoint:
    path: /web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /code_execution
    method: POST
- name: UrlContextTool
  endpoint:
    path: /url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /image_generation
    method: POST
- name: MemoryTool
  endpoint:
    path: /memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /mcp_server
    method: POST
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
- name: run_stream_events
  endpoint:
    path: /pydantic_ai/agent/run_stream_events
    method: GET
- name: iter
  endpoint:
    path: /pydantic_ai/agent/iter
    method: GET
- name: override
  endpoint:
    path: /pydantic_ai/agent/override
    method: GET
- name: tasks
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: null
    params: {}
- name: task_operations
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: null
    params: {}
- name: ThinkingPart
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: FilePart
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: BaseToolCallPart
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
    params: {}
- name: ToolCallPart
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_call_id
    params: {}
- name: BuiltinToolCallPart
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: provider_name
    params: {}
- name: ModelResponse
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
    params: {}
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: POST
    data_selector: part
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: POST
    data_selector: delta
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: POST
    data_selector: result
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: POST
    data_selector: part
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: POST
    data_selector: result
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: POST
    data_selector: part
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: POST
    data_selector: result
    params: {}
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: POST
    data_selector: event
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: POST
    data_selector: event
    params: {}
- name: OutputDataT
  endpoint:
    path: /OutputDataT
    method: POST
    data_selector: output
    params: {}
- name: ToolOutput
  endpoint:
    path: /ToolOutput
    method: POST
    data_selector: output
    params: {}
- name: NativeOutput
  endpoint:
    path: /NativeOutput
    method: POST
    data_selector: outputs
    params: {}
- name: PromptedOutput
  endpoint:
    path: /PromptedOutput
    method: POST
    data_selector: outputs
    params: {}
- name: TextOutput
  endpoint:
    path: /TextOutput
    method: POST
    data_selector: output_function
    params: {}
- name: KnownModelName
  endpoint:
    path: /models/known
    method: GET
    data_selector: models
    params: {}
- name: ModelRequestParameters
  endpoint:
    path: /models/request
    method: POST
    data_selector: parameters
    params: {}
- name: LatestBedrockModelNames
  endpoint:
    path: /latest-bedrock-models
    method: GET
    data_selector: models
    params: {}
- name: cohere_model
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
- name: fallback_model
  endpoint:
    path: /fallback/model
    method: POST
- name: function_model
  endpoint:
    path: /function/model
    method: POST
- name: google_model
  endpoint:
    path: /google-genai/models
    method: GET
    data_selector: models
- name: groq_model
  endpoint:
    path: /models/groq
    method: GET
    data_selector: models
    params: {}
- name: huggingface_model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: model_name
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: instrumented_model
  endpoint:
    path: /pydantic_ai/models/instrumented
    method: GET
- name: mcp_sampling_model_settings
  endpoint:
    path: /pydantic_ai/models/mcp_sampling
    method: GET
- name: mcp_sampling
  endpoint:
    path: /mcp/sampling
    method: POST
    data_selector: result
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: output
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: user
  endpoint:
    path: /get_user_by_name
    method: GET
    data_selector: user_id
    params: {}
- name: message
  endpoint:
    path: /send_message
    method: POST
    data_selector: message
    params: {}
- name: MCPServerTool
  endpoint:
    path: /mcp
    method: GET
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: output
    params: {}
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: output
    params: {}
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: properties
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek-chat
    method: GET
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: output
- name: email_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result.output
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: events
    params: {}
- name: AgentRun
  endpoint:
    path: /agent_run
    method: GET
    data_selector: nodes
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/WebSearchTool
    method: GET
    data_selector: tool
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/CodeExecutionTool
    method: GET
    data_selector: tool
    params: {}
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/UrlContextTool
    method: GET
    data_selector: tool
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/ImageGenerationTool
    method: GET
    data_selector: tool
    params: {}
- name: MemoryTool
  endpoint:
    path: /builtin_tools/MemoryTool
    method: GET
    data_selector: tool
    params: {}
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/MCPServerTool
    method: GET
    data_selector: tool
    params: {}
- name: tavily_search
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: request
  endpoint:
    path: /model/request
    method: POST
- name: request_stream
  endpoint:
    path: /model/request_stream
    method: GET
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
- name: video_url
  endpoint:
    path: /video-url
    method: GET
- name: audio_url
  endpoint:
    path: /audio-url
    method: GET
- name: image_url
  endpoint:
    path: /image-url
    method: GET
- name: document_url
  endpoint:
    path: /document-url
    method: GET
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: BaseToolReturnPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: result
    params: {}
- name: AgentRunResult
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
    params: {}
- name: AgentRunResultEvent
  endpoint:
    path: /agent/run/result/event
    method: GET
    data_selector: event
    params: {}
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: records
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: records
    params: {}
- name: LatestCohereModelNames
  endpoint:
    path: ''
    method: GET
    data_selector: ''
    params: {}
- name: CohereModel
  endpoint:
    path: ''
    method: GET
    data_selector: ''
    params: {}
- name: groq_model
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: model_name
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: mcp_sampling
  endpoint:
    path: /services/data/vXX.X/sobjects/MCPSampling
    method: GET
    data_selector: records
- name: mistral
  endpoint:
    path: /services/data/vXX.X/sobjects/MistralModel
    method: GET
    data_selector: records
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: state
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather
    method: GET
    data_selector: forecast
    params: {}
- name: weather_forecast
  endpoint:
    path: /api/weather/forecast
    method: GET
    data_selector: forecast_data
    params: {}
- name: historic_weather
  endpoint:
    path: /api/weather/historic
    method: GET
    data_selector: historic_data
    params: {}
- name: mcp_server
  endpoint:
    path: /mcp
    method: GET
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: get_preferred_language
  endpoint:
    path: /deferred_toolset/get_preferred_language
    method: POST
    data_selector: result
    params: {}
- name: model
  endpoint:
    path: /generateContent
    method: POST
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: GET
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: POST
    data_selector: output
    params: {}
- name: vending_machine_graph
  endpoint:
    path: /vending_machine_graph
    method: POST
    data_selector: output
    params: {}
- name: EmailRequiresWrite
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: feedback
- name: EmailOk
  endpoint:
    path: /email/ok
    method: GET
    data_selector: status
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run/ag-ui
    method: POST
    data_selector: streaming event chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: AgentRun
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: web_search_tool
  endpoint:
    path: /web_search
    method: GET
- name: code_execution_tool
  endpoint:
    path: /code_execution
    method: POST
- name: url_context_tool
  endpoint:
    path: /url_context
    method: GET
- name: image_generation_tool
  endpoint:
    path: /image_generation
    method: POST
- name: memory_tool
  endpoint:
    path: /memory
    method: GET
- name: mcp_server_tool
  endpoint:
    path: /mcp_server
    method: POST
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: model_response_stream_event
  endpoint:
    path: /stream/model_response
    method: GET
    data_selector: events
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: results
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai/model
    method: GET
    data_selector: models
    params: {}
- name: tasks
  endpoint:
    path: /tasks/send
    method: POST
- name: tasks_get
  endpoint:
    path: /tasks/get
    method: GET
- name: tasks_cancel
  endpoint:
    path: /tasks/cancel
    method: POST
- name: tasks_pushNotification_get
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
- name: VideoUrl
  endpoint:
    path: N/A
    method: N/A
    data_selector: N/A
    params: {}
- name: AudioUrl
  endpoint:
    path: N/A
    method: N/A
    data_selector: N/A
    params: {}
- name: ImageUrl
  endpoint:
    path: N/A
    method: N/A
    data_selector: N/A
    params: {}
- name: DocumentUrl
  endpoint:
    path: N/A
    method: N/A
    data_selector: N/A
    params: {}
- name: BinaryContent
  endpoint:
    path: N/A
    method: N/A
    data_selector: N/A
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/PartStartEvent
    method: GET
    data_selector: index, part, event_kind
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/PartDeltaEvent
    method: GET
    data_selector: index, delta, event_kind
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/FinalResultEvent
    method: GET
    data_selector: tool_name, tool_call_id, event_kind
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/FunctionToolCallEvent
    method: GET
    data_selector: part, event_kind, tool_call_id
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/FunctionToolResultEvent
    method: GET
    data_selector: result, content, event_kind, tool_call_id
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolCallEvent
    method: GET
    data_selector: part, event_kind
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolResultEvent
    method: GET
    data_selector: result, event_kind
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai/AgentStreamEvent
    method: GET
    data_selector: event_kind
    params: {}
- name: agent_run_result
  endpoint:
    path: /agent_run_result
    method: GET
    data_selector: result
- name: agent_run_result_event
  endpoint:
    path: /agent_run_result_event
    method: GET
    data_selector: event
- name: max_tokens
  endpoint:
    path: /max_tokens
    method: GET
    data_selector: max_tokens
- name: temperature
  endpoint:
    path: /temperature
    method: GET
    data_selector: temperature
- name: top_p
  endpoint:
    path: /top_p
    method: GET
    data_selector: top_p
- name: timeout
  endpoint:
    path: /timeout
    method: GET
    data_selector: timeout
- name: parallel_tool_calls
  endpoint:
    path: /parallel_tool_calls
    method: GET
    data_selector: parallel_tool_calls
- name: seed
  endpoint:
    path: /seed
    method: GET
    data_selector: seed
- name: presence_penalty
  endpoint:
    path: /presence_penalty
    method: GET
    data_selector: presence_penalty
- name: frequency_penalty
  endpoint:
    path: /frequency_penalty
    method: GET
    data_selector: frequency_penalty
- name: logit_bias
  endpoint:
    path: /logit_bias
    method: GET
    data_selector: logit_bias
- name: stop_sequences
  endpoint:
    path: /stop_sequences
    method: GET
    data_selector: stop_sequences
- name: extra_headers
  endpoint:
    path: /extra_headers
    method: GET
    data_selector: extra_headers
- name: extra_body
  endpoint:
    path: /extra_body
    method: GET
    data_selector: extra_body
- name: message
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: model_request_parameters
  endpoint:
    path: /ModelRequestParameters
    method: GET
    data_selector: parameters
    params: {}
- name: model
  endpoint:
    path: /Model
    method: GET
    data_selector: models
    params: {}
- name: converse
  endpoint:
    path: /runtime/converse
    method: POST
    data_selector: output
    params: {}
- name: cohere_model
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: openai_builtin_tools
  endpoint:
    path: /openai/builtin/tools
    method: GET
    data_selector: tools
- name: openai_reasoning_summary
  endpoint:
    path: /openai/reasoning/summary
    method: GET
    data_selector: summary
- name: dataset
  endpoint:
    path: /dataset
    method: POST
    data_selector: data
    params: {}
- name: mcp_server
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result.messages
- name: sum
  endpoint:
    path: /sum
    method: POST
    data_selector: output
    params:
      a: integer
      b: integer
- name: hitchhiker
  endpoint:
    path: /hitchhiker
    method: POST
    data_selector: output
    params:
      answer: string
- name: greet
  endpoint:
    path: /greet
    method: POST
    data_selector: output
    params:
      name: string
- name: Foobar
  endpoint:
    path: foobars
    method: POST
    data_selector: output
    params: {}
- name: deferred_tool_requests
  endpoint:
    path: /deferred_tool_requests
    method: POST
    data_selector: results
    params: {}
- name: gemini
  endpoint:
    path: /models/gemini
    method: GET
    data_selector: models
- name: groq
  endpoint:
    path: /models/groq
    method: GET
    data_selector: models
- name: huggingface
  endpoint:
    path: /models/huggingface
    method: GET
    data_selector: models
- name: mistral
  endpoint:
    path: /models/mistral
    method: GET
    data_selector: models
- name: openai
  endpoint:
    path: /models/openai
    method: GET
    data_selector: models
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: feedback_graph
  endpoint:
    path: /feedback
    method: POST
    data_selector: graph
    params: {}
- name: email_feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: feedback
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: AG-UI run input
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /api/agent_run
    method: POST
    data_selector: result
    params: {}
- name: agent_run_result
  endpoint:
    path: /
    method: GET
    data_selector: output
- name: tavily_search_tool
  endpoint:
    path: api_key
    method: str
- name: ModelResponseStreamEvent
  endpoint:
    path: /stream/events
    method: GET
    data_selector: events
- name: ModelResponse
  endpoint:
    path: /model/response
    method: GET
    data_selector: response
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: result
- name: run_sync
  endpoint:
    path: /run/sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run/stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run/stream/events
    method: POST
    data_selector: result
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: AgentRun
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: video_url
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
- name: audio_url
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
- name: image_url
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
- name: document_url
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: BinaryContent
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: ToolReturn
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: UserPromptPart
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: RetryPromptPart
- name: ModelResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: result
    params: {}
- name: AgentRunResult
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
    params: {}
- name: AgentRunResultEvent
  endpoint:
    path: /agent/run/result/event
    method: GET
    data_selector: event
    params: {}
- name: max_tokens
- name: temperature
- name: top_p
- name: timeout
- name: parallel_tool_calls
- name: seed
- name: presence_penalty
- name: frequency_penalty
- name: logit_bias
- name: stop_sequences
- name: extra_headers
- name: extra_body
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: function_tools
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: _profile
    params: {}
- name: FallbackModel
  endpoint:
    path: /pydantic_ai/models/fallback
    method: GET
    data_selector: models
- name: FunctionModel
  endpoint:
    path: /pydantic_ai/models/function
    method: GET
    data_selector: models
- name: groq_model
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: latest_mistral_models
  endpoint:
    path: /models/latest
    method: GET
    data_selector: models
- name: mistral_model_settings
  endpoint:
    path: /models/settings
    method: GET
    data_selector: settings
- name: request
  endpoint:
    path: /request
    method: POST
    data_selector: response
    params: {}
- name: request_stream
  endpoint:
    path: /request_stream
    method: POST
    data_selector: response
    params: {}
- name: OpenAIResponsesModel
  endpoint:
    path: /v1/models
    method: GET
    data_selector: data
- name: tool
  endpoint:
    path: /v1/tools
    method: GET
    data_selector: data
    params: {}
- name: case
  endpoint:
    path: /pydantic_evals/Case
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /direct/model_request
    method: POST
    data_selector: result
    params: {}
- name: model_request_sync
  endpoint:
    path: /direct/model_request_sync
    method: POST
    data_selector: result
    params: {}
- name: model_request_stream
  endpoint:
    path: /direct/model_request_stream
    method: POST
    data_selector: result
    params: {}
- name: model_request_stream_sync
  endpoint:
    path: /direct/model_request_stream_sync
    method: POST
    data_selector: result
    params: {}
- name: joke_factory
  endpoint:
    path: ''
    method: GET
    data_selector: ''
    params: {}
- name: get_jokes
  endpoint:
    path: ''
    method: GET
    data_selector: ''
    params:
      count: count
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: result
    params: {}
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: name
    params: {}
- name: get_preferred_language
  endpoint:
    path: /get_preferred_language
    method: POST
    data_selector: result
    params: {}
- name: gemini_model
  endpoint:
    path: /generateContent
    method: POST
    data_selector: output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: question_graph
  endpoint:
    path: /question_graph
    method: GET
    data_selector: output
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: request
    params: {}
- name: run_ag_ui
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/ag_ui.py
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: GET
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
- name: UserPromptNode
  endpoint:
    path: /user/prompt
    method: GET
    data_selector: nodes
- name: ModelRequestNode
  endpoint:
    path: /model/request
    method: GET
    data_selector: nodes
- name: CallToolsNode
  endpoint:
    path: /call/tools
    method: GET
    data_selector: nodes
- name: End
  endpoint:
    path: /end
    method: GET
    data_selector: nodes
- name: WebSearchTool
  endpoint:
    path: /builtin/tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin/tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin/tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin/tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin/tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin/tools/mcp_server
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params:
      api_key: required
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params:
      user_prompt: str | Sequence[UserContent] | None
      output_type: OutputSpec[RunOutputDataT] | None
      message_history: Sequence[ModelMessage] | None
      deferred_tool_results: DeferredToolResults | None
      model: Model | KnownModelName | str | None
      deps: AgentDepsT
      model_settings: ModelSettings | None
      usage_limits: UsageLimits | None
      usage: RunUsage | None
      infer_name: bool
      toolsets: Sequence[AbstractToolset[AgentDepsT]] | None
      builtin_tools: Sequence[AbstractBuiltinTool] | None
      event_stream_handler: EventStreamHandler[AgentDepsT] | None
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params:
      user_prompt: str | Sequence[UserContent] | None
      output_type: OutputSpec[RunOutputDataT] | None
      message_history: Sequence[ModelMessage] | None
      deferred_tool_results: DeferredToolResults | None
      model: Model | KnownModelName | str | None
      deps: AgentDepsT
      model_settings: ModelSettings | None
      usage_limits: UsageLimits | None
      usage: RunUsage | None
      infer_name: bool
      toolsets: Sequence[AbstractToolset[AgentDepsT]] | None
      builtin_tools: Sequence[AbstractBuiltinTool] | None
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
- name: get_task
  endpoint:
    path: /tasks/get
    method: POST
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
- name: VideoUrl
  endpoint:
    path: /services/data/vXX.X/sobjects/VideoUrl
    method: GET
    data_selector: records
- name: AudioUrl
  endpoint:
    path: /services/data/vXX.X/sobjects/AudioUrl
    method: GET
    data_selector: records
- name: ImageUrl
  endpoint:
    path: /services/data/vXX.X/sobjects/ImageUrl
    method: GET
    data_selector: records
- name: DocumentUrl
  endpoint:
    path: /services/data/vXX.X/sobjects/DocumentUrl
    method: GET
    data_selector: records
- name: BinaryContent
  endpoint:
    path: /services/data/vXX.X/sobjects/BinaryContent
    method: GET
    data_selector: records
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: content
  endpoint:
    path: content
    method: GET
    data_selector: content
- name: id
  endpoint:
    path: id
    method: GET
    data_selector: id
- name: part_kind
  endpoint:
    path: part_kind
    method: GET
    data_selector: part_kind
- name: has_content
  endpoint:
    path: has_content
    method: GET
    data_selector: has_content
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: response
    params: {}
- name: max_tokens
  endpoint:
    path: /max_tokens
    method: GET
    data_selector: tokens
    params: {}
- name: temperature
  endpoint:
    path: /temperature
    method: GET
    data_selector: temperature
    params: {}
- name: top_p
  endpoint:
    path: /top_p
    method: GET
    data_selector: top_p
    params: {}
- name: timeout
  endpoint:
    path: /timeout
    method: GET
    data_selector: timeout
    params: {}
- name: parallel_tool_calls
  endpoint:
    path: /parallel_tool_calls
    method: GET
    data_selector: parallel_tool_calls
    params: {}
- name: seed
  endpoint:
    path: /seed
    method: GET
    data_selector: seed
    params: {}
- name: presence_penalty
  endpoint:
    path: /presence_penalty
    method: GET
    data_selector: presence_penalty
    params: {}
- name: frequency_penalty
  endpoint:
    path: /frequency_penalty
    method: GET
    data_selector: frequency_penalty
    params: {}
- name: logit_bias
  endpoint:
    path: /logit_bias
    method: GET
    data_selector: logit_bias
    params: {}
- name: stop_sequences
  endpoint:
    path: /stop_sequences
    method: GET
    data_selector: stop_sequences
    params: {}
- name: extra_headers
  endpoint:
    path: /extra_headers
    method: GET
    data_selector: extra_headers
    params: {}
- name: extra_body
  endpoint:
    path: /extra_body
    method: GET
    data_selector: extra_body
    params: {}
- name: model_names
  endpoint:
    path: /model/names
    method: GET
    data_selector: titles
- name: bedrock_model_settings
  endpoint:
    path: /models/bedrock
    method: GET
    data_selector: models
- name: gemini_model
  endpoint:
    path: /models/gemini
    method: POST
    data_selector: response
    params: {}
- name: model_name
  endpoint:
    path: /services/data/vXX.X/sobjects/ModelName
    method: GET
    data_selector: records
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: mistral_model
  endpoint:
    path: /api/v1/models
    method: GET
    data_selector: models
- name: OpenAIResponsesModel
  endpoint:
    method: POST
- name: function_tool
  endpoint:
    path: /functions
    method: POST
    data_selector: functions
    params: {}
- name: dataset
  endpoint:
    path: /dataset
    method: GET
    data_selector: cases
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dataset
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: POST
    data_selector: self
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: self
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: self
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: self
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: POST
    data_selector: self
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
    params: {}
- name: model
  endpoint:
    path: /api/model
    method: GET
    data_selector: models
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: mcp_server
  endpoint:
    path: /mcp
    method: GET
- name: joke_selection_agent
  endpoint:
    path: /joke_selection_agent
    method: GET
    data_selector: output
    params: {}
- name: joke_generation_agent
  endpoint:
    path: /joke_generation_agent
    method: GET
    data_selector: output
    params: {}
- name: flight_search_agent
  endpoint:
    path: /flight_search_agent
    method: GET
    data_selector: output
    params: {}
- name: seat_preference_agent
  endpoint:
    path: /seat_preference_agent
    method: GET
    data_selector: output
    params: {}
- name: sql_agent
  endpoint:
    path: /sql_agent
    method: GET
    data_selector: output
    params: {}
- name: router_agent
  endpoint:
    path: /router_agent
    method: GET
    data_selector: output
    params: {}
- name: deferred_toolset
  endpoint:
    path: /deferred/tools
    method: POST
    data_selector: result
    params: {}
- name: run_agent
  endpoint:
    path: /run/agent
    method: POST
    data_selector: output
    params: {}
- name: GoogleModel
  endpoint:
    path: /models
    method: GET
- name: deepseek-chat
  endpoint:
    path: /chat
    method: POST
- name: vending_machine
  endpoint:
    path: /vending_machine
    method: GET
    data_selector: results
- name: email_feedback
  endpoint:
    path: /email_feedback
    method: POST
    data_selector: feedback
- name: email_feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: feedback
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
- name: agent_stream_events
  endpoint:
    path: /agent_stream_events
    method: GET
- name: agent_run_result_event
  endpoint:
    path: /agent_run_result_event
    method: GET
- name: AgentRun
  endpoint:
    path: /iter
    method: GET
    data_selector: result
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: nodes
    params: {}
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
- name: tavily_search
  endpoint:
    path: /tavily_search
    method: POST
    data_selector: results
    params: {}
- name: model_response
  endpoint:
    path: /model/response
    method: GET
    data_selector: response
    params: {}
- name: usage
  endpoint:
    path: /usage
    method: GET
    data_selector: usage
    params: {}
- name: run
  endpoint:
    path: /pydantic_ai/run
    method: POST
    data_selector: result
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
      event_stream_handler: null
- name: run_sync
  endpoint:
    path: /pydantic_ai/run_sync
    method: POST
    data_selector: result
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
      event_stream_handler: null
- name: agent_run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: run_async
  endpoint:
    path: /run/async
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run/sync
    method: POST
    data_selector: result
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: nodes
    params: {}
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
- name: get_task
  endpoint:
    path: /tasks/get
    method: POST
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: url
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/BinaryImage
    method: GET
    data_selector: content
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/ToolReturn
    method: GET
    data_selector: content
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/UserPromptPart
    method: GET
    data_selector: content
    params: {}
- name: ModelRequest
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/ModelRequest
    method: GET
    data_selector: content
    params: {}
- name: ModelResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run_result
  endpoint:
    path: /agent_run_result
    method: GET
    data_selector: result
- name: agent_run_result_event
  endpoint:
    path: /agent_run_result_event
    method: GET
    data_selector: result
- name: max_tokens
  endpoint:
    path: /max_tokens
    method: GET
    data_selector: supported_models
    params: {}
- name: temperature
  endpoint:
    path: /temperature
    method: GET
    data_selector: supported_models
    params: {}
- name: top_p
  endpoint:
    path: /top_p
    method: GET
    data_selector: supported_models
    params: {}
- name: timeout
  endpoint:
    path: /timeout
    method: GET
    data_selector: supported_models
    params: {}
- name: parallel_tool_calls
  endpoint:
    path: /parallel_tool_calls
    method: GET
    data_selector: supported_models
    params: {}
- name: seed
  endpoint:
    path: /seed
    method: GET
    data_selector: supported_models
    params: {}
- name: presence_penalty
  endpoint:
    path: /presence_penalty
    method: GET
    data_selector: supported_models
    params: {}
- name: frequency_penalty
  endpoint:
    path: /frequency_penalty
    method: GET
    data_selector: supported_models
    params: {}
- name: logit_bias
  endpoint:
    path: /logit_bias
    method: GET
    data_selector: supported_models
    params: {}
- name: stop_sequences
  endpoint:
    path: /stop_sequences
    method: GET
    data_selector: supported_models
    params: {}
- name: extra_headers
  endpoint:
    path: /extra_headers
    method: GET
    data_selector: supported_models
    params: {}
- name: extra_body
  endpoint:
    path: /extra_body
    method: GET
    data_selector: supported_models
    params: {}
- name: model_response
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: records
- name: Model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: records
- name: BedrockModelSettings
  endpoint:
    path: /api/bedrock/models/settings
    method: GET
    data_selector: settings
    params: {}
- name: FallbackModel
  endpoint:
    path: /fallback/model
    method: POST
    data_selector: model_response
    params: {}
- name: FunctionModel
  endpoint:
    path: /function/model
    method: POST
    data_selector: model_response
    params: {}
- name: groq_model
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: model
  endpoint:
    path: /models/{model_name}
    method: GET
    data_selector: model
    params: {}
- name: mistral_model_names
  endpoint:
    path: /models/latest
    method: GET
    data_selector: models
    params: {}
- name: test_model
  endpoint:
    path: /v1/models/test
    method: GET
    data_selector: data
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: cases
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluators
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: GET
    data_selector: datasets
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: datasets
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: datasets
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: results
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: json_schema
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: state
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: POST
    data_selector: forecast
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: response
    params: {}
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: output
    params: {}
- name: seat_preference
  endpoint:
    path: /seat_preference
    method: GET
    data_selector: output
    params: {}
- name: sum
  endpoint:
    path: /sum
    method: POST
    data_selector: sum
    params: {}
- name: hitchhiker
  endpoint:
    path: /hitchhiker
    method: POST
    data_selector: hitchhiker
    params: {}
- name: greet
  endpoint:
    path: /greet
    method: POST
    data_selector: greet
    params: {}
- name: email_writer_agent
  endpoint:
    path: google-gla:gemini-1.5-pro
    method: POST
    data_selector: output_type
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: POST
    data_selector: none
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: output
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: output
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: output
    params: {}
- name: agent_run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: agent_run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: agent_run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
- name: AgentRun
  endpoint:
    path: /pydantic_ai/models/openai
    method: GET
    data_selector: records
- name: VideoUrl
  endpoint:
    path: /pydantic_ai/models/openai/VideoUrl
    method: POST
    data_selector: url
- name: AudioUrl
  endpoint:
    path: /pydantic_ai/models/openai/AudioUrl
    method: POST
    data_selector: url
- name: ImageUrl
  endpoint:
    path: /pydantic_ai/models/openai/ImageUrl
    method: POST
    data_selector: url
- name: DocumentUrl
  endpoint:
    path: /pydantic_ai/models/openai/DocumentUrl
    method: POST
    data_selector: url
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: has_content
  endpoint:
    path: /has_content
    method: GET
    data_selector: has_content
    params: {}
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: function_tools
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: settings
    params: {}
- name: CohereModel
  endpoint:
    path: /models/cohere
    method: GET
- name: FallbackModel
  endpoint:
    path: /pydantic_ai/models/fallback
    method: GET
    data_selector: models
    params: {}
- name: FunctionModel
  endpoint:
    path: /pydantic_ai/models/function
    method: GET
    data_selector: models
    params: {}
- name: google_model
  endpoint:
    path: /generativelanguage.googleapis.com/v1/models
    method: GET
    data_selector: models
    params: {}
- name: production_groq_models
  endpoint:
    path: /models/production
    method: GET
    data_selector: models
    params: {}
- name: preview_groq_models
  endpoint:
    path: /models/preview
    method: GET
    data_selector: models
    params: {}
- name: huggingface_model
  endpoint:
    path: /api/models
    method: GET
    data_selector: models
    params: {}
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: test_model
  endpoint:
    path: /test/model
    method: POST
    data_selector: results
    params: {}
- name: TestModel
  endpoint:
    path: /test/model
    method: POST
    data_selector: model_response
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset/increment_eval_metric
    method: POST
    data_selector: result
    params: {}
- name: document_state
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: github
  endpoint:
    path: /mcp/
    method: GET
    params: {}
- name: google_calendar
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
    params: {}
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: jokes
    params: {}
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: flightDetails
    params: {}
- name: feedback_graph
  endpoint:
    path: /feedback/graph
    method: GET
    data_selector: records
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: StateHandler
  endpoint:
    path: /StateHandler
    method: GET
    data_selector: state
- name: web_search
  endpoint:
    path: /builtin_tools/WebSearchTool
    method: GET
- name: code_execution
  endpoint:
    path: /builtin_tools/CodeExecutionTool
    method: GET
- name: url_context
  endpoint:
    path: /builtin_tools/UrlContextTool
    method: GET
- name: image_generation
  endpoint:
    path: /builtin_tools/ImageGenerationTool
    method: GET
- name: memory
  endpoint:
    path: /builtin_tools/MemoryTool
    method: GET
- name: mcp_server
  endpoint:
    path: /builtin_tools/MCPServerTool
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent_run
    method: POST
    data_selector: results
    params: {}
- name: model_request
  endpoint:
    path: /v1/models
    method: GET
    data_selector: data
    params: {}
- name: event_stream
  endpoint:
    path: /v1/event_stream
    method: GET
    data_selector: events
    params: {}
- name: agent_run
  endpoint:
    path: /v1/agent/run
    method: POST
    data_selector: data
    params: {}
- name: video_url
  endpoint:
    path: /video-url
    method: GET
- name: audio_url
  endpoint:
    path: /audio-url
    method: GET
- name: image_url
  endpoint:
    path: /image-url
    method: GET
- name: document_url
  endpoint:
    path: /document-url
    method: GET
- name: binary_content
  endpoint:
    path: /binary-content
    method: GET
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: ModelRequest
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: deferred_tool_requests
  endpoint:
    path: /deferred/tool/requests
    method: GET
    data_selector: calls
    params: {}
- name: tool_approved
  endpoint:
    path: /tool/approved
    method: POST
    data_selector: override_args
    params: {}
- name: tool_denied
  endpoint:
    path: /tool/denied
    method: POST
    data_selector: message
    params: {}
- name: deferred_tool_results
  endpoint:
    path: /deferred/tool/results
    method: GET
    data_selector: calls
    params: {}
- name: KnownModelName
  endpoint:
    path: /KnownModelName
    method: GET
    data_selector: models
- name: ModelRequestParameters
  endpoint:
    path: /ModelRequestParameters
    method: GET
    data_selector: parameters
- name: groq_model
  endpoint:
    path: /models/groq
    method: GET
    data_selector: models
    params: {}
- name: mcp_sampling
  endpoint:
    path: /services/data/vXX.X/sobjects/MCPSampling
    method: GET
    data_selector: records
- name: mistral
  endpoint:
    path: /services/data/vXX.X/sobjects/Mistral
    method: GET
    data_selector: records
- name: model
  endpoint:
    path: /api/v1/models
    method: GET
    data_selector: models
    params: {}
- name: model
  endpoint:
    path: /v1/models
    method: GET
    data_selector: data
    params: {}
- name: case
  endpoint:
    path: /pydantic_evals/case
    method: POST
    data_selector: case
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: dataset
    params: {}
- name: test1
  endpoint:
    path: /test1
    method: GET
    data_selector: records
    params: {}
- name: test2
  endpoint:
    path: /test2
    method: GET
    data_selector: records
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: output
    params:
      name: string
      amount: int | float
- name: Contains
  endpoint:
    path: /Contains
    method: POST
    data_selector: output
    params:
      value: Any
      case_sensitive: bool
      as_strings: bool
      evaluation_name: string | None
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: results
    params: {}
- name: model
  endpoint:
    path: /api/model
    method: GET
    data_selector: models
    params: {}
- name: weather_forecast
  endpoint:
    path: /api/weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /api/weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: response
    params: {}
- name: model_request_sync
  endpoint:
    path: /model/request_sync
    method: POST
    data_selector: response
    params: {}
- name: model_request_stream
  endpoint:
    path: /model/request_stream
    method: POST
    data_selector: response
    params: {}
- name: model_request_stream_sync
  endpoint:
    path: /model/request_stream_sync
    method: POST
    data_selector: response
    params: {}
- name: joke_selection_agent
  endpoint:
    path: /example/path/to/joke_selection
    method: POST
    data_selector: result
    params: {}
- name: joke_generation_agent
  endpoint:
    path: /example/path/to/joke_generation
    method: POST
    data_selector: result
    params: {}
- name: flight_search_agent
  endpoint:
    path: /example/path/to/flight_search
    method: POST
    data_selector: result
    params: {}
- name: seat_preference_agent
  endpoint:
    path: /example/path/to/seat_preference
    method: POST
    data_selector: result
    params: {}
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: output
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
    params: {}
- name: gemini
  endpoint:
    path: /models/gemini
    method: GET
- name: groq
  endpoint:
    path: /models/groq
    method: GET
- name: huggingface
  endpoint:
    path: /models/huggingface
    method: GET
- name: mistral
  endpoint:
    path: /models/mistral
    method: GET
- name: openai
  endpoint:
    path: /models/openai
    method: GET
- name: deepseek-chat
  endpoint:
    path: /deepseek-chat
    method: GET
- name: vending_machine
  endpoint:
    path: /vending_machine
    method: POST
    data_selector: result
    params: {}
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: POST
    data_selector: result
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result.output
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: streaming events
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
- name: web_search
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
    data_selector: records
- name: code_execution
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
    data_selector: records
- name: url_context
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
    data_selector: records
- name: image_generation
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
    data_selector: records
- name: memory
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
    data_selector: records
- name: mcp_server
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
    data_selector: records
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params: {}
- name: ModelResponseStreamEvent
  endpoint:
    path: /pydantic_ai/stream
    method: GET
    data_selector: events
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: iter
  endpoint:
    path: /api/iter
    method: GET
    data_selector: nodes
- name: override
  endpoint:
    path: /api/override
    method: POST
    data_selector: 'null'
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: tasks
  endpoint:
    path: /tasks
    method: POST
    data_selector: result
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: updates
    params: {}
- name: VideoUrl
  endpoint:
    path: /VideoUrl
    method: GET
    data_selector: vendor_metadata
    params: {}
- name: AudioUrl
  endpoint:
    path: /AudioUrl
    method: GET
    data_selector: vendor_metadata
    params: {}
- name: ImageUrl
  endpoint:
    path: /ImageUrl
    method: GET
    data_selector: vendor_metadata
    params: {}
- name: DocumentUrl
  endpoint:
    path: /DocumentUrl
    method: GET
    data_selector: vendor_metadata
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ModelRequest
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: content
  endpoint:
    path: content
    method: GET
- name: id
  endpoint:
    path: id
    method: GET
- name: part_kind
  endpoint:
    path: part_kind
    method: GET
- name: has_content
  endpoint:
    path: has_content
    method: GET
- name: max_tokens
  endpoint:
    path: /max_tokens
    method: GET
    data_selector: supported_models
    params: {}
- name: temperature
  endpoint:
    path: /temperature
    method: GET
    data_selector: supported_models
    params: {}
- name: top_p
  endpoint:
    path: /top_p
    method: GET
    data_selector: supported_models
    params: {}
- name: timeout
  endpoint:
    path: /timeout
    method: GET
    data_selector: supported_models
    params: {}
- name: parallel_tool_calls
  endpoint:
    path: /parallel_tool_calls
    method: GET
    data_selector: supported_models
    params: {}
- name: seed
  endpoint:
    path: /seed
    method: GET
    data_selector: supported_models
    params: {}
- name: presence_penalty
  endpoint:
    path: /presence_penalty
    method: GET
    data_selector: supported_models
    params: {}
- name: frequency_penalty
  endpoint:
    path: /frequency_penalty
    method: GET
    data_selector: supported_models
    params: {}
- name: logit_bias
  endpoint:
    path: /logit_bias
    method: GET
    data_selector: supported_models
    params: {}
- name: stop_sequences
  endpoint:
    path: /stop_sequences
    method: GET
    data_selector: supported_models
    params: {}
- name: extra_headers
  endpoint:
    path: /extra_headers
    method: GET
    data_selector: supported_models
    params: {}
- name: extra_body
  endpoint:
    path: /extra_body
    method: GET
    data_selector: supported_models
    params: {}
- name: model_names
  endpoint:
    path: /model/names
    method: GET
    data_selector: model_names
- name: FallbackModel
  endpoint:
    path: /pydantic_ai/models/fallback
    method: GET
    data_selector: models
    params: {}
- name: FunctionModel
  endpoint:
    path: /pydantic_ai/models/function
    method: GET
    data_selector: models
    params: {}
- name: mistral_large
  endpoint:
    path: /models/mistral-large-latest
    method: POST
    data_selector: data
    params: {}
- name: mistral_small
  endpoint:
    path: /models/mistral-small-latest
    method: POST
    data_selector: data
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: case
  endpoint:
    path: /pydantic_evals/case
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: results
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: results
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: GET
    data_selector: results
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: results
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: results
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: results
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: results
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: results
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: results
    params: {}
- name: Contains
  endpoint:
    path: /pydantic_evals/evaluators/common/Contains
    method: GET
    data_selector: output
    params: {}
- name: Equals
  endpoint:
    path: /pydantic_evals/evaluators/common/Equals
    method: GET
    data_selector: output
    params: {}
- name: EqualsExpected
  endpoint:
    path: /pydantic_evals/evaluators/common/EqualsExpected
    method: GET
    data_selector: output
    params: {}
- name: HasMatchingSpan
  endpoint:
    path: /pydantic_evals/evaluators/common/HasMatchingSpan
    method: GET
    data_selector: output
    params: {}
- name: IsInstance
  endpoint:
    path: /pydantic_evals/evaluators/common/IsInstance
    method: GET
    data_selector: output
    params: {}
- name: LLMJudge
  endpoint:
    path: /pydantic_evals/evaluators/common/LLMJudge
    method: GET
    data_selector: output
    params: {}
- name: OutputConfig
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/common.py
    method: GET
    data_selector: outputs
    params: {}
- name: EvaluatorContext
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/context.py
    method: GET
    data_selector: context
    params: {}
- name: judge_output
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/llm_as_a_judge.py
    method: GET
    data_selector: judging_output
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki_tool
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: chat_history
  endpoint:
    path: /chat/history
    method: GET
    data_selector: history
- name: flight_search
  endpoint:
    path: /flight_search
    method: POST
    data_selector: flight
    params: {}
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: jokes
    params:
      count: count
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: properties
    params:
      required:
      - x
      - y
- name: deferred_tool_requests
  endpoint:
    path: /api/deferred_tool_requests
    method: POST
    data_selector: result
    params: {}
- name: deferred_tool_results
  endpoint:
    path: /api/deferred_tool_results
    method: GET
    data_selector: results
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: GET
- name: email_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: output
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: output
    params: {}
- name: agent_stream_events
  endpoint:
    path: /agent/stream_events
    method: GET
    data_selector: events
- name: agent_run_result
  endpoint:
    path: /agent/run_result
    method: GET
    data_selector: result
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: tavily_search_tool
  endpoint:
    path: /tavily_search_tool
    method: POST
    data_selector: results
    params: {}
- name: model_response
  endpoint:
    path: /model/response
    method: GET
    data_selector: response
- name: usage
  endpoint:
    path: /model/usage
    method: GET
    data_selector: usage
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: output
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: output
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: output
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: output
    params:
      user_prompt: user_prompt
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: output
    params:
      user_prompt: user_prompt
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
    params: {}
- name: message_send
  endpoint:
    path: /
    method: POST
- name: tasks_get
  endpoint:
    path: /
    method: POST
- name: video_url
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
    params: {}
- name: audio_url
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
    params: {}
- name: image_url
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
    params: {}
- name: document_url
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
    params: {}
- name: binary_content
  endpoint:
    path: /binary-content
    method: GET
    data_selector: data
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: BinaryContent
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
- name: id
  endpoint:
    path: /id
    method: GET
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
- name: has_content
  endpoint:
    path: /has_content
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: records
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: records
- name: ToolOutput
  endpoint:
    path: /ToolOutput
    method: GET
    data_selector: records
- name: NativeOutput
  endpoint:
    path: /NativeOutput
    method: GET
    data_selector: records
- name: PromptedOutput
  endpoint:
    path: /PromptedOutput
    method: GET
    data_selector: records
- name: TextOutput
  endpoint:
    path: /TextOutput
    method: GET
    data_selector: records
- name: model_response
  endpoint:
    path: /models/response
    method: POST
    data_selector: data
    params: {}
- name: model_request_parameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: ModelRequestParameters
    params: {}
- name: model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: Model
    params: {}
- name: cohere_model
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
- name: FallbackModel
  endpoint:
    path: /pydantic_ai/models/fallback
    method: GET
    data_selector: models
    params: {}
- name: FunctionModel
  endpoint:
    path: /pydantic_ai/models/function
    method: GET
    data_selector: models
    params: {}
- name: model_response
  endpoint:
    path: /models/gemini/response
    method: POST
    data_selector: data
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: mistral_model
  endpoint:
    path: /mistral/model
    method: POST
    data_selector: model_response
    params: {}
- name: TestStreamedResponse
  endpoint:
    path: /pydantic_ai/models/test
    method: GET
    data_selector: model_response
    params: {}
- name: Case
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: case
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: GET
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: dataset
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: result
    params: {}
- name: Contains
  endpoint:
    path: /Contains
    method: POST
    data_selector: result
    params: {}
- name: Equals
  endpoint:
    path: /Equals
    method: POST
    data_selector: result
    params: {}
- name: EqualsExpected
  endpoint:
    path: /EqualsExpected
    method: POST
    data_selector: result
    params: {}
- name: HasMatchingSpan
  endpoint:
    path: /HasMatchingSpan
    method: POST
    data_selector: result
    params: {}
- name: IsInstance
  endpoint:
    path: /IsInstance
    method: POST
    data_selector: result
    params: {}
- name: LLMJudge
  endpoint:
    path: /LLMJudge
    method: POST
    data_selector: result
    params: {}
- name: MaxDuration
  endpoint:
    path: /MaxDuration
    method: POST
    data_selector: result
    params: {}
- name: EvaluationResult
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/evaluator.py
    method: GET
    data_selector: details
    params: {}
- name: agent
  endpoint:
    path: /api/models/agent
    method: POST
    data_selector: result
    params: {}
- name: support_agent
  endpoint:
    path: /api/models/support_agent
    method: POST
    data_selector: result
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: direct_model_requests
  endpoint:
    path: /direct/request
    method: POST
    data_selector: response
    params: {}
- name: image_input
  endpoint:
    path: /image/input
    method: POST
    data_selector: response
    params: {}
- name: audio_input
  endpoint:
    path: /audio/input
    method: POST
    data_selector: response
    params: {}
- name: video_input
  endpoint:
    path: /video/input
    method: POST
    data_selector: response
    params: {}
- name: document_input
  endpoint:
    path: /document/input
    method: POST
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: GET
    data_selector: messages
- name: foobar
  endpoint:
    path: /tool/foobar
    method: POST
    data_selector: output
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: email_writer
  endpoint:
    path: /genai/email_writer
    method: POST
    data_selector: output
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_stream_events
  endpoint:
    path: /agent/stream/events
    method: GET
- name: agent_run_result
  endpoint:
    path: /agent/run/result
    method: GET
- name: AgentRun
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
    data_selector: tool
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
    data_selector: tool
    params: {}
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
    data_selector: tool
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
    data_selector: tool
    params: {}
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
    data_selector: tool
    params: {}
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
    data_selector: tool
    params: {}
- name: tavily_search_tool
  endpoint:
    path: /search
    method: GET
- name: ModelResponseStreamEvent
  endpoint:
    path: /model/stream/event
    method: GET
    data_selector: events
- name: ModelResponse
  endpoint:
    path: /model/response
    method: GET
    data_selector: response
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: model_request
  endpoint:
    method: POST
- name: request_stream
  endpoint:
    method: GET
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
    params: {}
- name: video_url
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
    params: {}
- name: audio_url
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
    params: {}
- name: image_url
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
    params: {}
- name: document_url
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
    params: {}
- name: binary_content
  endpoint:
    path: /binary-content
    method: GET
    data_selector: data
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: BinaryContent
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: ToolReturn
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: UserPromptPart
    params: {}
- name: thinking_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: file_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: base_tool_call_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
- name: tool_call_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_call_id
- name: builtin_tool_call_part
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: provider_name
- name: model_response
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run_result
  endpoint:
    path: /pydantic_ai/agent_run_result
    method: GET
- name: agent_run_result_event
  endpoint:
    path: /pydantic_ai/agent_run_result_event
    method: GET
- name: max_tokens
  endpoint:
    path: /max_tokens
    method: GET
    data_selector: value
- name: temperature
  endpoint:
    path: /temperature
    method: GET
    data_selector: value
- name: top_p
  endpoint:
    path: /top_p
    method: GET
    data_selector: value
- name: timeout
  endpoint:
    path: /timeout
    method: GET
    data_selector: value
- name: parallel_tool_calls
  endpoint:
    path: /parallel_tool_calls
    method: GET
    data_selector: value
- name: seed
  endpoint:
    path: /seed
    method: GET
    data_selector: value
- name: presence_penalty
  endpoint:
    path: /presence_penalty
    method: GET
    data_selector: value
- name: frequency_penalty
  endpoint:
    path: /frequency_penalty
    method: GET
    data_selector: value
- name: logit_bias
  endpoint:
    path: /logit_bias
    method: GET
    data_selector: value
- name: stop_sequences
  endpoint:
    path: /stop_sequences
    method: GET
    data_selector: value
- name: extra_headers
  endpoint:
    path: /extra_headers
    method: GET
    data_selector: value
- name: extra_body
  endpoint:
    path: /extra_body
    method: GET
    data_selector: value
- name: model_name
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: model_response
  endpoint:
    path: /v1/model/response
    method: POST
    data_selector: response
    params: {}
- name: groq_model
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: mcp_sampling
  endpoint:
    path: /mcp_sampling
    method: POST
    data_selector: records
- name: mistral
  endpoint:
    path: /mistral
    method: POST
    data_selector: records
- name: TestModel
  endpoint:
    path: /test/model
    method: GET
    data_selector: records
- name: Case
  endpoint:
    path: /pydantic_evals/Case
    method: POST
    data_selector: records
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/Dataset
    method: GET
    data_selector: records
    params: {}
- name: dataset
  endpoint:
    path: /datasets
    method: GET
    data_selector: cases
    params: {}
- name: case
  endpoint:
    path: /cases
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: GET
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: dataset
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
    params: {}
- name: Contains
  endpoint:
    path: /pydantic_evals/evaluators/Contains
    method: GET
- name: Equals
  endpoint:
    path: /pydantic_evals/evaluators/Equals
    method: GET
- name: EqualsExpected
  endpoint:
    path: /pydantic_evals/evaluators/EqualsExpected
    method: GET
- name: HasMatchingSpan
  endpoint:
    path: /pydantic_evals/evaluators/HasMatchingSpan
    method: GET
- name: IsInstance
  endpoint:
    path: /pydantic_evals/evaluators/IsInstance
    method: GET
- name: LLMJudge
  endpoint:
    path: /pydantic_evals/evaluators/LLMJudge
    method: GET
- name: MaxDuration
  endpoint:
    path: /pydantic_evals/evaluators/MaxDuration
    method: GET
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model_request
    method: POST
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result
- name: run_result
  endpoint:
    path: /run_result
    method: GET
    data_selector: result
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    params:
      count: count
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    params:
      origin: origin
      destination: destination
- name: seat_preference
  endpoint:
    path: /seat_preference
    method: GET
- name: ToolOutput
  endpoint:
    path: /tool/output
    method: GET
- name: NativeOutput
  endpoint:
    path: /native/output
    method: GET
- name: PromptedOutput
  endpoint:
    path: /prompted/output
    method: GET
- name: tool
  endpoint:
    path: /tool
    method: GET
    data_selector: tools
    params: {}
- name: Foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: email_writer_agent
  endpoint:
    path: /api/v1/generate_email
    method: POST
    data_selector: email
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: UserPromptNode
  endpoint:
    path: /agent/nodes/UserPrompt
    method: POST
    data_selector: nodes
    params: {}
- name: ModelRequestNode
  endpoint:
    path: /agent/nodes/ModelRequest
    method: POST
    data_selector: nodes
    params: {}
- name: CallToolsNode
  endpoint:
    path: /agent/nodes/CallTools
    method: POST
    data_selector: nodes
    params: {}
- name: EndNode
  endpoint:
    path: /agent/nodes/End
    method: POST
    data_selector: nodes
    params: {}
- name: messages_to_otel_events
  endpoint:
    path: /messages_to_otel_events
    method: POST
    data_selector: events
- name: tavily_search_tool
  endpoint:
    path: /tavily/search
    method: POST
    data_selector: results
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: results
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: request
  endpoint:
    path: /model.request
    method: GET
- name: request_stream
  endpoint:
    path: /model.request_stream
    method: GET
- name: run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /agent/run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: HEAD
    data_selector: null
    params: {}
- name: agent_run
  endpoint:
    path: /
    method: POST
    data_selector: null
    params: {}
- name: docs
  endpoint:
    path: /docs
    method: GET
    data_selector: null
    params: {}
- name: tasks/send
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: response
    params: {}
- name: tasks/get
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: response
    params: {}
- name: tasks/cancel
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: response
    params: {}
- name: tasks/pushNotification/get
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: response
    params: {}
- name: video_url
  endpoint:
    path: /video_url
    method: GET
    data_selector: url
- name: audio_url
  endpoint:
    path: /audio_url
    method: GET
    data_selector: url
- name: image_url
  endpoint:
    path: /image_url
    method: GET
    data_selector: url
- name: document_url
  endpoint:
    path: /document_url
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: BinaryContent
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: ToolReturn
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: UserPromptPart
    params: {}
- name: ThinkingPart
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: FilePart
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: BaseToolCallPart
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
- name: ToolCallPart
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_call_id
- name: BuiltinToolCallPart
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: provider_name
- name: ModelResponse
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
- name: AgentRunResult
  endpoint:
    path: /agent_run_result
    method: GET
    data_selector: result
- name: AgentRunResultEvent
  endpoint:
    path: /agent_run_result_event
    method: GET
    data_selector: result
- name: max_tokens
  endpoint:
    path: /max_tokens
    method: GET
    data_selector: max_tokens
- name: temperature
  endpoint:
    path: /temperature
    method: GET
    data_selector: temperature
- name: top_p
  endpoint:
    path: /top_p
    method: GET
    data_selector: top_p
- name: timeout
  endpoint:
    path: /timeout
    method: GET
    data_selector: timeout
- name: parallel_tool_calls
  endpoint:
    path: /parallel_tool_calls
    method: GET
    data_selector: parallel_tool_calls
- name: seed
  endpoint:
    path: /seed
    method: GET
    data_selector: seed
- name: presence_penalty
  endpoint:
    path: /presence_penalty
    method: GET
    data_selector: presence_penalty
- name: frequency_penalty
  endpoint:
    path: /frequency_penalty
    method: GET
    data_selector: frequency_penalty
- name: logit_bias
  endpoint:
    path: /logit_bias
    method: GET
    data_selector: logit_bias
- name: stop_sequences
  endpoint:
    path: /stop_sequences
    method: GET
    data_selector: stop_sequences
- name: extra_headers
  endpoint:
    path: /extra_headers
    method: GET
    data_selector: extra_headers
- name: extra_body
  endpoint:
    path: /extra_body
    method: GET
    data_selector: extra_body
- name: FallbackModel
  endpoint:
    path: /models/fallback
    method: POST
    data_selector: models
    params: {}
- name: FunctionModel
  endpoint:
    path: /models/function
    method: POST
    data_selector: function
    params: {}
- name: gemini_model
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: gemini_model
  endpoint:
    path: /models/gemini
    method: POST
    data_selector: model_response
- name: mcp_sampling
  endpoint:
    path: /mcp_sampling
    method: GET
    data_selector: records
- name: mistral
  endpoint:
    path: /mistral
    method: GET
    data_selector: records
- name: OpenAIModel
  endpoint:
    path: /v1/models
    method: GET
- name: OpenAIResponsesModel
  endpoint:
    path: /v1/responses
    method: POST
- name: test_model
  endpoint:
    path: /v1/models/test
    method: GET
    data_selector: data
- name: Case
  endpoint:
    path: /pydantic_evals/Case
    method: POST
    data_selector: case
    params: {}
- name: dataset
  endpoint:
    path: /pydantic/evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: EvaluatorFailure
  endpoint:
    path: /evaluators/failure
    method: POST
    data_selector: records
- name: EvaluatorOutput
  endpoint:
    path: /evaluators/output
    method: POST
    data_selector: records
- name: EvaluatorSpec
  endpoint:
    path: /evaluators/spec
    method: POST
    data_selector: records
- name: GradingOutput
  endpoint:
    path: /grading/output
    method: POST
    data_selector: records
- name: judge_output
  endpoint:
    path: /judge/output
    method: POST
    data_selector: records
- name: judge_input_output
  endpoint:
    path: /judge/input/output
    method: POST
    data_selector: records
- name: judge_input_output_expected
  endpoint:
    path: /judge/input/output/expected
    method: POST
    data_selector: records
- name: judge_output_expected
  endpoint:
    path: /judge/output/expected
    method: POST
    data_selector: records
- name: agent
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
    params: {}
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: user_id
    params: {}
- name: message
  endpoint:
    path: /messages
    method: POST
    data_selector: message_id
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /direct/model_request
    method: POST
    data_selector: response
    params: {}
- name: model_request_sync
  endpoint:
    path: /direct/model_request_sync
    method: POST
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /results/messages
    method: GET
    data_selector: messages
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
    params: {}
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: result
    params: {}
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: name
    params: {}
- name: deferred_tools
  endpoint:
    path: /deferred/tools
    method: POST
    data_selector: output
    params: {}
- name: model
  endpoint:
    path: /model
    method: GET
    data_selector: models
    params: {}
- name: deepseek-chat
  endpoint:
    path: /
    method: GET
- name: feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: feedback
    params: {}
- name: email
  endpoint:
    path: /email/send
    method: POST
    data_selector: email
    params: {}
- name: run_input
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: run_input
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
    data_selector: records
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
    data_selector: records
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
    data_selector: records
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
    data_selector: records
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
    data_selector: records
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
    data_selector: records
- name: tavily_search_tool
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: output
    params: {}
- name: run_sync
  endpoint:
    path: /agent/run_sync
    method: POST
    data_selector: output
    params: {}
- name: run_stream
  endpoint:
    path: /agent/run_stream
    method: POST
    data_selector: output
    params: {}
- name: run_stream_events
  endpoint:
    path: /agent/run_stream_events
    method: POST
    data_selector: output
    params: {}
- name: iter
  endpoint:
    path: /agent/iter
    method: POST
    data_selector: output
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: get_tools
  endpoint:
    path: /get_tools
    method: GET
    data_selector: tools
    params: {}
- name: call_tool
  endpoint:
    path: /call_tool
    method: POST
    data_selector: result
    params: {}
- name: wrapped_request_step
  endpoint:
    path: /model/request
    method: POST
- name: wrapped_request_stream_step
  endpoint:
    path: /model/request_stream
    method: POST
- name: agent_run
  endpoint:
    path: /run
    method: POST
    data_selector: output
    params:
      user_prompt: What is the capital of France?
      infer_name: true
- name: agent_run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: output
    params:
      user_prompt: What is the capital of Italy?
      infer_name: true
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
- name: get_task
  endpoint:
    path: /tasks/get
    method: POST
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
- name: send_message
  endpoint:
    path: /message/send
    method: POST
    data_selector: result
    params: {}
- name: get_task
  endpoint:
    path: /tasks/get
    method: POST
    data_selector: result
    params: {}
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/BinaryImage
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages/ToolReturn
    method: GET
    data_selector: records
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: has_content
  endpoint:
    path: /has_content
    method: GET
    data_selector: has_content
    params: {}
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: records
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: records
- name: model_names
  endpoint:
    path: /model_names
    method: GET
    data_selector: model_names
    params: {}
- name: model_response
  endpoint:
    path: /services/data/vXX.X/sobjects/ModelResponse
    method: GET
    data_selector: records
    params: {}
- name: mcp_sampling
  endpoint:
    path: /mcp_sampling
    method: POST
    data_selector: result
    params: {}
- name: mistral
  endpoint:
    path: /mistral
    method: POST
    data_selector: result
    params: {}
- name: request
  endpoint:
    path: /request
    method: POST
    data_selector: model_response
    params: {}
- name: request_stream
  endpoint:
    path: /request_stream
    method: POST
    data_selector: streamed_response
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: Contains
  endpoint:
    path: /pydantic_evals/evaluators/Contains
    method: GET
    data_selector: records
- name: Equals
  endpoint:
    path: /pydantic_evals/evaluators/Equals
    method: GET
    data_selector: records
- name: EqualsExpected
  endpoint:
    path: /pydantic_evals/evaluators/EqualsExpected
    method: GET
    data_selector: records
- name: HasMatchingSpan
  endpoint:
    path: /pydantic_evals/evaluators/HasMatchingSpan
    method: GET
    data_selector: records
- name: IsInstance
  endpoint:
    path: /pydantic_evals/evaluators/IsInstance
    method: GET
    data_selector: records
- name: LLMJudge
  endpoint:
    path: /pydantic_evals/evaluators/LLMJudge
    method: GET
    data_selector: records
- name: MaxDuration
  endpoint:
    path: /pydantic_evals/evaluators/MaxDuration
    method: GET
    data_selector: records
- name: GradingOutput
  endpoint:
    path: /pydantic_evals/grading
    method: GET
    data_selector: output
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/generation.py
    method: POST
    data_selector: Dataset[InputsT, OutputT, MetadataT]
    params:
      n_examples: 3
- name: Agent
  endpoint:
    path: /api/models/overview/
    method: GET
    data_selector: records
- name: SupportDependencies
  endpoint:
    path: /api/models/openai/
    method: GET
    data_selector: records
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: direct_model_requests
  endpoint:
    path: /direct/model_requests
    method: POST
    data_selector: results
    params: {}
- name: image_input
  endpoint:
    path: /image_input
    method: POST
    data_selector: results
    params: {}
- name: audio_input
  endpoint:
    path: /audio_input
    method: POST
    data_selector: results
    params: {}
- name: video_input
  endpoint:
    path: /video_input
    method: POST
    data_selector: results
    params: {}
- name: document_input
  endpoint:
    path: /document_input
    method: POST
    data_selector: results
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: results
- name: run_results
  endpoint:
    path: /run_results
    method: GET
    data_selector: results
- name: roll_dice
  endpoint:
    path: /dice_game/roll
    method: GET
    data_selector: result
- name: get_player_name
  endpoint:
    path: /dice_game/player_name
    method: GET
    data_selector: name
- name: foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: email_feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: response
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
    params: {}
- name: AgentRun
  endpoint:
    path: /agent_run
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: output
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/WebSearchTool
    method: GET
    data_selector: tool
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/CodeExecutionTool
    method: GET
    data_selector: tool
    params: {}
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/UrlContextTool
    method: GET
    data_selector: tool
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/ImageGenerationTool
    method: GET
    data_selector: tool
    params: {}
- name: MemoryTool
  endpoint:
    path: /builtin_tools/MemoryTool
    method: GET
    data_selector: tool
    params: {}
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/MCPServerTool
    method: GET
    data_selector: tool
    params: {}
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: model_response
  endpoint:
    path: /model_response
    method: GET
    data_selector: response
- name: usage
  endpoint:
    path: /usage
    method: GET
    data_selector: usage
- name: event_stream
  endpoint:
    path: /event_stream
    method: GET
    data_selector: events
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: submitted
- name: get_task
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: taskDetails
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: status
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: notifications
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
- name: has_content
  endpoint:
    path: /has_content
    method: GET
    data_selector: has_content
- name: agent_run_result
  endpoint:
    path: /agent_run_result
    method: GET
    data_selector: result
- name: agent_run_result_event
  endpoint:
    path: /agent_run_result_event
    method: GET
    data_selector: result
    params: {}
- name: streamed_response
  endpoint:
    path: /streamed_response
    method: GET
- name: fallback_model
  endpoint:
    path: /models/fallback
    method: POST
    data_selector: model
    params: {}
- name: function_model
  endpoint:
    path: /models/function
    method: POST
    data_selector: model
    params: {}
- name: google_model
  endpoint:
    path: /api/gemini/models
    method: GET
- name: gemini_streamed_response
  endpoint:
    path: /gemini/streamed_response
    method: GET
    data_selector: responses
    params: {}
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
- name: mistral_model
  endpoint:
    path: /models/mistral
    method: GET
    data_selector: models
- name: request
  endpoint:
    path: /request
    method: POST
    data_selector: model_response
    params: {}
- name: request_stream
  endpoint:
    path: /request_stream
    method: POST
    data_selector: streamed_response
    params: {}
- name: TestStreamedResponse
  endpoint:
    path: /pydantic_evals
    method: GET
    data_selector: parts
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: GET
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: dataset
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: json_schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: result
    params: {}
- name: span_node
  endpoint:
    path: /pydantic_evals/pydantic_evals/otel/span_tree.py
    method: GET
    data_selector: records
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params:
      location: Paris
      date: '2030-01-01'
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: records
    params:
      location: string
      forecast_date: date
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: records
    params:
      location: string
      forecast_date: date
- name: mcp_server
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /direct/model_request
    method: POST
    data_selector: result
    params: {}
- name: image_input
  endpoint:
    path: /image/input
    method: POST
    data_selector: result
    params: {}
- name: audio_input
  endpoint:
    path: /audio/input
    method: POST
    data_selector: result
    params: {}
- name: video_input
  endpoint:
    path: /video/input
    method: POST
    data_selector: result
    params: {}
- name: document_input
  endpoint:
    path: /document/input
    method: POST
    data_selector: result
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: result
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: name
- name: foobar
  endpoint:
    path: /path/to/foobar
    method: POST
    data_selector: properties
    params: {}
- name: deferred_toolset
  endpoint:
    path: /deferred-tools/run_agent
    method: POST
    data_selector: result.output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: CountDown
  endpoint:
    path: /count_down
    method: GET
    data_selector: records
- name: Feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: records
- name: AG-UI run input
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: input_data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /stream/events
    method: GET
    data_selector: events
- name: AgentRunResultEvent
  endpoint:
    path: /run/result
    method: GET
    data_selector: result
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
- name: web_search
  endpoint:
    path: /builtin_tools/web_search
    method: POST
- name: code_execution
  endpoint:
    path: /builtin_tools/code_execution
    method: POST
- name: url_context
  endpoint:
    path: /builtin_tools/url_context
    method: POST
- name: image_generation
  endpoint:
    path: /builtin_tools/image_generation
    method: POST
- name: memory
  endpoint:
    path: /builtin_tools/memory
    method: POST
- name: mcp_server
  endpoint:
    path: /builtin_tools/mcp_server
    method: POST
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: model_response
  endpoint:
    path: /model_response
    method: GET
    data_selector: response
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: output
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: output
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: output
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
- name: wrapped_request_step
  endpoint:
    path: /model/request
    method: POST
- name: wrapped_request_stream_step
  endpoint:
    path: /model/request_stream
    method: POST
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: output
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: result
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: records
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: send_message
  endpoint:
    path: tasks/send
    method: POST
- name: get_task
  endpoint:
    path: tasks/get
    method: POST
- name: cancel_task
  endpoint:
    path: tasks/cancel
    method: POST
- name: push_notification
  endpoint:
    path: tasks/pushNotification/get
    method: GET
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ModelRequest
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: content
  endpoint:
    path: /content
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/messages/PartStartEvent
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/messages/PartDeltaEvent
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/messages/FinalResultEvent
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolCallEvent
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolResultEvent
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolCallEvent
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolResultEvent
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai/messages/AgentStreamEvent
    method: GET
    data_selector: records
- name: agent_run_result
  endpoint:
    path: /agent_run_result
    method: GET
    data_selector: result
- name: agent_run_result_event
  endpoint:
    path: /agent_run_result_event
    method: GET
    data_selector: event_kind
- name: AbstractToolset
  endpoint:
    path: /pydantic_ai/toolsets/abstract.py
    method: GET
    data_selector: tools
- name: CombinedToolset
  endpoint:
    path: /pydantic_ai/toolsets/combined.py
    method: GET
    data_selector: tools
- name: ExternalToolset
  endpoint:
    path: /pydantic_ai/toolsets/external.py
    method: GET
    data_selector: tools
- name: cohere_model
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
- name: fallback_model
  endpoint:
    path: /models/fallback
    method: POST
- name: function_model
  endpoint:
    path: /models/function
    method: POST
- name: groq_model
  endpoint:
    path: /models/groq
    method: GET
    data_selector: models
- name: chat_completions
  endpoint:
    path: /api/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: mistral_model
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: OpenAIModel
  endpoint:
    path: /models/openai
    method: POST
    data_selector: model
    params: {}
- name: OpenAIResponsesModel
  endpoint:
    path: /models/openai/responses
    method: POST
    data_selector: response
    params: {}
- name: TestModel
  endpoint:
    path: /test/model
    method: GET
    data_selector: records
- name: Case
  endpoint:
    path: /pydantic_evals/case
    method: POST
    data_selector: case
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: POST
    data_selector: dataset
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: cases
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluators
- name: from_file
  endpoint:
    path: /from_file
    method: POST
    data_selector: dataset
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: success
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: success
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: success
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metrics
    params: {}
- name: contains
  endpoint:
    path: /contains
    method: POST
    data_selector: evaluation_results
    params: {}
- name: equals
  endpoint:
    path: /equals
    method: POST
    data_selector: evaluation_results
    params: {}
- name: equals_expected
  endpoint:
    path: /equals_expected
    method: POST
    data_selector: evaluation_results
    params: {}
- name: has_matching_span
  endpoint:
    path: /has_matching_span
    method: POST
    data_selector: evaluation_results
    params: {}
- name: is_instance
  endpoint:
    path: /is_instance
    method: POST
    data_selector: evaluation_results
    params: {}
- name: max_duration
  endpoint:
    path: /max_duration
    method: POST
    data_selector: evaluation_results
    params: {}
- name: llm_judge
  endpoint:
    path: /llm_judge
    method: POST
    data_selector: evaluation_results
    params: {}
- name: evaluate
  endpoint:
    path: /evaluate
    method: POST
    data_selector: result
- name: generate_dataset
  endpoint:
    path: /generate_dataset
    method: POST
    data_selector: dataset
- name: span_node
  endpoint:
    path: /span_tree
    method: GET
    data_selector: records
    params: {}
- name: SpanTree
  endpoint:
    path: /pydantic_evals/pydantic_evals/otel/span_tree.py
    method: GET
    data_selector: roots
    params: {}
- name: forecast
  endpoint:
    path: /api/v1/forecast
    method: GET
    data_selector: data
    params:
      incremental: date
- name: historic_weather
  endpoint:
    path: /api/v1/historic_weather
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /get_user_by_name
    method: GET
    data_selector: user_id
    params: {}
- name: agent_run
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /direct/model_request
    method: POST
    data_selector: parts
- name: foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: deferred_tools
  endpoint:
    path: /deferred_tools
    method: POST
    data_selector: result
    params: {}
- name: deepseek-chat
  endpoint:
    path: /chat
    method: POST
- name: vending_machine
  endpoint:
    path: /vending_machine
    method: GET
    data_selector: machine_state
- name: email_feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: feedback
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: GET
    data_selector: overrides
    params: {}
- name: sequential_tool_calls
  endpoint:
    path: /sequential_tool_calls
    method: GET
    data_selector: tool_calls
    params: {}
- name: AgentRun
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: WebSearchTool
  endpoint:
    path: /path/to/web_search_tool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /path/to/code_execution_tool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /path/to/url_context_tool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /path/to/image_generation_tool
    method: GET
- name: MemoryTool
  endpoint:
    path: /path/to/memory_tool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /path/to/mcp_server_tool
    method: GET
- name: tavily_search_tool
  endpoint:
    path: /search
    method: GET
- name: ModelResponseStreamEvent
  endpoint:
    path: /pydantic_ai/messages/ModelResponseStreamEvent
    method: GET
    data_selector: records
- name: ModelResponse
  endpoint:
    path: /pydantic_ai/messages/ModelResponse
    method: GET
    data_selector: records
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: agent_run_sync
  endpoint:
    path: /agent/run_sync
    method: POST
    data_selector: result
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: video
  endpoint:
    path: url
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: Binary content that's guaranteed to be an image.
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: A structured return value for tools that need to provide both a
      return value and custom content to the model.
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: A user prompt, generally written by the end user.
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: index
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: index
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: part
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: result
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: part
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: result
    params: {}
- name: HandleResponseEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: event_kind
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: event_kind
    params: {}
- name: ToolOutput
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/output.py
    method: GET
    data_selector: output
    params: {}
- name: NativeOutput
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/output.py
    method: GET
    data_selector: outputs
    params: {}
- name: PromptedOutput
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/output.py
    method: GET
    data_selector: outputs
    params: {}
- name: TextOutput
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/output.py
    method: GET
    data_selector: output_function
    params: {}
- name: max_tokens
- name: temperature
- name: top_p
- name: timeout
- name: parallel_tool_calls
- name: seed
- name: presence_penalty
- name: frequency_penalty
- name: logit_bias
- name: stop_sequences
- name: extra_headers
- name: extra_body
- name: AbstractToolset
  endpoint:
    path: /pydantic_ai/toolsets/abstract
    method: GET
    data_selector: toolset
- name: CombinedToolset
  endpoint:
    path: /pydantic_ai/toolsets/combined
    method: GET
    data_selector: toolset
- name: ExternalToolset
  endpoint:
    path: /pydantic_ai/toolsets/external
    method: GET
    data_selector: toolset
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: function_tools
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: _profile
    params: {}
- name: cohere_model
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
- name: FallbackModel
  endpoint:
    path: /pydantic_ai/models/fallback
    method: GET
- name: FunctionModel
  endpoint:
    path: /pydantic_ai/models/function
    method: GET
- name: groq_model
  endpoint:
    path: /models/groq
    method: GET
    data_selector: models
- name: model_name
  endpoint:
    path: /models
    method: GET
- name: mcp_sampling
  endpoint:
    path: /mcp_sampling
    method: POST
    data_selector: results
    params: {}
- name: mistral
  endpoint:
    path: /mistral
    method: POST
    data_selector: results
    params: {}
- name: Case
  endpoint:
    path: /pydantic_evals/Case
    method: POST
    data_selector: case_data
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/Dataset
    method: GET
    data_selector: dataset_data
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
- name: from_file
  endpoint:
    path: /from_file
    method: GET
- name: from_text
  endpoint:
    path: /from_text
    method: POST
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
- name: to_file
  endpoint:
    path: /to_file
    method: POST
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: result
    params:
      name: str
      amount: int | float
- name: contains
  endpoint:
    path: /contains
    method: POST
    data_selector: result
    params: {}
- name: equals
  endpoint:
    path: /equals
    method: POST
    data_selector: result
    params: {}
- name: equals_expected
  endpoint:
    path: /equals_expected
    method: POST
    data_selector: result
    params: {}
- name: has_matching_span
  endpoint:
    path: /has_matching_span
    method: POST
    data_selector: result
    params: {}
- name: is_instance
  endpoint:
    path: /is_instance
    method: POST
    data_selector: result
    params: {}
- name: llm_judge
  endpoint:
    path: /llm_judge
    method: POST
    data_selector: result
    params: {}
- name: max_duration
  endpoint:
    path: /max_duration
    method: POST
    data_selector: result
    params: {}
- name: EvaluatorSpec
  endpoint:
    path: /pydantic_evals/evaluators/spec
    method: GET
    data_selector: Evaluators
- name: GradingOutput
  endpoint:
    path: /pydantic_evals/evaluators/llm_as_a_judge
    method: GET
    data_selector: Grading
- name: SpanNode
  endpoint:
    path: /pydantic_evals/pydantic_evals/otel/span_tree.py
    method: GET
    data_selector: records
    params: {}
- name: ReportCase
  endpoint:
    path: /reportcase
    method: GET
    data_selector: records
- name: ReportCaseFailure
  endpoint:
    path: /reportcasefailure
    method: GET
    data_selector: records
- name: ReportCaseAggregate
  endpoint:
    path: /reportcaseaggregate
    method: GET
    data_selector: records
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: agents
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: POST
    data_selector: document
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: forecast
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast_data
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic_data
- name: user_id
  endpoint:
    path: /deps/users/get
    method: GET
    data_selector: user_id
    params:
      name: John Doe
- name: DeepWiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /direct/model_request
    method: POST
    data_selector: result
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: output
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: feedback_graph
  endpoint:
    path: /feedback
    method: POST
    data_selector: data
    params: {}
- name: vending_machine_graph
  endpoint:
    path: /vending_machine
    method: POST
    data_selector: data
    params: {}
- name: count_down
  endpoint:
    path: /services/data/vXX.X/sobjects/CountDown
    method: GET
    data_selector: records
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: streaming_events
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: override
  endpoint:
    path: /override
    method: POST
    data_selector: override_result
- name: sequential_tool_calls
  endpoint:
    path: /sequential_tool_calls
    method: POST
    data_selector: sequential_result
- name: AgentRun
  endpoint:
    path: /pydantic_ai/agent/run
    method: GET
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: tavily_search_tool
  endpoint:
    path: /tavily_search_tool
    method: POST
- name: ModelResponseStreamEvent
  endpoint:
    path: /stream/model_response
    method: GET
    data_selector: events
- name: ModelResponse
  endpoint:
    path: /response/model
    method: GET
    data_selector: response
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent/run
    method: POST
    data_selector: result.output
    params: {}
- name: agent_run
  endpoint:
    path: /run
    method: POST
    data_selector: output
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent_run
    method: POST
    data_selector: nodes
    params: {}
- name: video
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: BinaryImage
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: ToolReturn
    params: {}
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: records
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: records
- name: ToolOutput
  endpoint:
    path: /ToolOutput
    method: GET
    data_selector: records
- name: NativeOutput
  endpoint:
    path: /NativeOutput
    method: GET
    data_selector: records
- name: PromptedOutput
  endpoint:
    path: /PromptedOutput
    method: GET
    data_selector: records
- name: TextOutput
  endpoint:
    path: /TextOutput
    method: GET
    data_selector: records
- name: model
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: model_names
  endpoint:
    path: /model_names
    method: GET
    data_selector: model_names
- name: cohere_model
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
- name: model_response
  endpoint:
    path: /v1/models
    method: GET
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: mistral_model
  endpoint:
    path: /models/mistral
    method: GET
    data_selector: models
    params: {}
- name: completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: model_name
  endpoint:
    path: /model
    method: GET
    data_selector: model_name
- name: system
  endpoint:
    path: /system
    method: GET
    data_selector: system
- name: test_model
  endpoint:
    path: /v1/models/test
    method: GET
    data_selector: data
    params: {}
- name: Case
  endpoint:
    path: /pydantic_evals/case
    method: GET
    data_selector: records
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: records
    params: {}
- name: dataset
  endpoint:
    path: /datasets
    method: GET
    data_selector: cases
    params: {}
- name: Dataset
  endpoint:
    path: /dataset
    method: POST
    data_selector: dataset
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
- name: from_file
  endpoint:
    path: /from_file
    method: GET
- name: from_text
  endpoint:
    path: /from_text
    method: POST
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
- name: to_file
  endpoint:
    path: /to_file
    method: POST
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: None
    params: {}
- name: Contains
  endpoint:
    path: /Contains
    method: POST
    data_selector: None
    params: {}
- name: Equals
  endpoint:
    path: /Equals
    method: POST
    data_selector: None
    params: {}
- name: EqualsExpected
  endpoint:
    path: /EqualsExpected
    method: POST
    data_selector: None
    params: {}
- name: HasMatchingSpan
  endpoint:
    path: /HasMatchingSpan
    method: POST
    data_selector: None
    params: {}
- name: IsInstance
  endpoint:
    path: /IsInstance
    method: POST
    data_selector: None
    params: {}
- name: LLMJudge
  endpoint:
    path: /LLMJudge
    method: POST
    data_selector: None
    params: {}
- name: MaxDuration
  endpoint:
    path: /MaxDuration
    method: POST
    data_selector: None
    params: {}
- name: Evaluator
  endpoint:
    path: /pydantic_evals/evaluators/evaluator
    method: GET
    data_selector: records
    params: {}
- name: evaluate
  endpoint:
    path: /evaluate
    method: POST
    data_selector: results
- name: SpanNode
  endpoint:
    path: /pydantic_evals/pydantic_evals/otel/span_tree.py
    method: GET
    data_selector: nodes
    params: {}
- name: ReportCase
  endpoint:
    path: /report/case
    method: GET
    data_selector: case
    params: {}
- name: ReportCaseFailure
  endpoint:
    path: /report/case/failure
    method: GET
    data_selector: case
    params: {}
- name: ReportCaseAggregate
  endpoint:
    path: /report/case/aggregate
    method: GET
    data_selector: aggregate
    params: {}
- name: cases
  endpoint:
    path: /services/data/vXX.X/sobjects/Cases
    method: GET
    data_selector: cases
    params: {}
- name: failures
  endpoint:
    path: /services/data/vXX.X/sobjects/Failures
    method: GET
    data_selector: failures
    params: {}
- name: spans
  endpoint:
    path: /spans
    method: POST
    data_selector: spans
    params: {}
- name: find
  endpoint:
    path: /find
    method: GET
    data_selector: nodes
    params: {}
- name: first
  endpoint:
    path: /first
    method: GET
    data_selector: node
    params: {}
- name: any
  endpoint:
    path: /any
    method: GET
    data_selector: exists
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: repr_xml
  endpoint:
    path: /repr_xml
    method: GET
    data_selector: xml_representation
    params: {}
- name: hello_world_example
  endpoint:
    path: /hello_world
    method: GET
    data_selector: output
    params: {}
- name: bank_support_example
  endpoint:
    path: /bank_support
    method: GET
    data_selector: output
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: document
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: forecast
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: agent
  endpoint:
    path: /agents
    method: POST
    data_selector: agent
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: all_messages
    params: {}
- name: new_messages
  endpoint:
    path: /messages/new
    method: GET
    data_selector: new_messages
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
    params: {}
- name: google_model
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: vending_machine
  endpoint:
    path: /vending/machine
    method: POST
    data_selector: result
    params: {}
- name: feedback_graph
  endpoint:
    path: /genai/email/feedback
    method: POST
    data_selector: result
    params: {}
- name: email_feedback
  endpoint:
    path: /email/feedback
    method: POST
    data_selector: feedback
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: streaming_events
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: user_prompt
  endpoint:
    path: /agent_run
    method: GET
    data_selector: nodes
    params: {}
- name: model_request
  endpoint:
    path: /model_request
    method: GET
    data_selector: nodes
    params: {}
- name: call_tools
  endpoint:
    path: /call_tools
    method: GET
    data_selector: nodes
    params: {}
- name: end
  endpoint:
    path: /end
    method: GET
    data_selector: nodes
    params: {}
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: ModelResponseStreamEvent
  endpoint:
    path: /stream/events
    method: GET
    data_selector: events
- name: ModelResponse
  endpoint:
    path: /response/model
    method: GET
    data_selector: response
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: run
  endpoint:
    path: /dbos/run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /dbos/run_sync
    method: POST
    data_selector: result
    params: {}
- name: get_tools
  endpoint:
    path: /get_tools
    method: GET
    data_selector: tools
- name: call_tool
  endpoint:
    path: /call_tool
    method: POST
    data_selector: result
- name: wrapped_request_step
  endpoint:
    method: GET
- name: wrapped_request_stream_step
  endpoint:
    method: GET
- name: agent_run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
- name: get_task
  endpoint:
    path: /tasks/get
    method: POST
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
- name: video_url
  endpoint:
    path: url
    method: GET
    data_selector: url
    params: {}
- name: audio_url
  endpoint:
    path: url
    method: GET
    data_selector: url
    params: {}
- name: image_url
  endpoint:
    path: url
    method: GET
    data_selector: url
    params: {}
- name: document_url
  endpoint:
    path: url
    method: GET
    data_selector: url
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: BinaryContent
    params: {}
- name: content
  endpoint:
    path: content
    method: GET
    data_selector: content
- name: id
  endpoint:
    path: id
    method: GET
    data_selector: id
- name: part_kind
  endpoint:
    path: part_kind
    method: GET
    data_selector: part_kind
- name: PartStartEvent
  endpoint:
    method: POST
- name: PartDeltaEvent
  endpoint:
    method: POST
- name: FinalResultEvent
  endpoint:
    method: POST
- name: FunctionToolCallEvent
  endpoint:
    method: POST
- name: FunctionToolResultEvent
  endpoint:
    method: POST
- name: BuiltinToolCallEvent
  endpoint:
    method: POST
- name: BuiltinToolResultEvent
  endpoint:
    method: POST
- name: HandleResponseEvent
  endpoint:
    method: POST
- name: AgentStreamEvent
  endpoint:
    method: POST
- name: ToolOutput
  endpoint:
    method: POST
- name: NativeOutput
  endpoint:
    method: POST
- name: PromptedOutput
  endpoint:
    method: POST
- name: TextOutput
  endpoint:
    method: POST
- name: max_tokens
  endpoint:
    path: /max_tokens
    method: GET
    data_selector: supportedModels
    params: {}
- name: temperature
  endpoint:
    path: /temperature
    method: GET
    data_selector: supportedModels
    params: {}
- name: top_p
  endpoint:
    path: /top_p
    method: GET
    data_selector: supportedModels
    params: {}
- name: timeout
  endpoint:
    path: /timeout
    method: GET
    data_selector: supportedModels
    params: {}
- name: parallel_tool_calls
  endpoint:
    path: /parallel_tool_calls
    method: GET
    data_selector: supportedModels
    params: {}
- name: seed
  endpoint:
    path: /seed
    method: GET
    data_selector: supportedModels
    params: {}
- name: presence_penalty
  endpoint:
    path: /presence_penalty
    method: GET
    data_selector: supportedModels
    params: {}
- name: frequency_penalty
  endpoint:
    path: /frequency_penalty
    method: GET
    data_selector: supportedModels
    params: {}
- name: logit_bias
  endpoint:
    path: /logit_bias
    method: GET
    data_selector: supportedModels
    params: {}
- name: stop_sequences
  endpoint:
    path: /stop_sequences
    method: GET
    data_selector: supportedModels
    params: {}
- name: extra_headers
  endpoint:
    path: /extra_headers
    method: GET
    data_selector: supportedModels
    params: {}
- name: extra_body
  endpoint:
    path: /extra_body
    method: GET
    data_selector: supportedModels
    params: {}
- name: ModelRequestParameters
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: properties
    params: {}
- name: Model
  endpoint:
    path: pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: properties
    params: {}
- name: FallbackModel
  endpoint:
    path: /pydantic_ai/models/fallback
    method: GET
    data_selector: models
    params: {}
- name: FunctionModel
  endpoint:
    path: /pydantic_ai/models/function
    method: GET
    data_selector: models
    params: {}
- name: model_response
  endpoint:
    path: /v1/models/{model_name}/complete
    method: POST
    data_selector: choices
    params: {}
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
- name: dataset
  endpoint:
    path: /datasets
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: datasets
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: result
    params: {}
- name: evaluator_context
  endpoint:
    path: /evaluator_context
    method: GET
    data_selector: context
    params: {}
- name: ReportCase
  endpoint:
    path: /pydantic_evals/reporting/ReportCase
    method: GET
    data_selector: records
- name: ReportCaseFailure
  endpoint:
    path: /pydantic_evals/reporting/ReportCaseFailure
    method: GET
    data_selector: records
- name: ReportCaseAggregate
  endpoint:
    path: /pydantic_evals/reporting/ReportCaseAggregate
    method: GET
    data_selector: records
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: records
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: message
  endpoint:
    path: /messages
    method: POST
    data_selector: message
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: results
- name: joke_factory
  endpoint:
    path: /
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /
    method: GET
    data_selector: text
- name: foobar
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: iter
  endpoint:
    path: /agent/iter
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: _messages.AgentRunResultEvent
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
    data_selector: records
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
    data_selector: records
    params: {}
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
    data_selector: records
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
    data_selector: records
    params: {}
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
    data_selector: records
    params: {}
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
    data_selector: records
    params: {}
- name: tavily_search_tool
  endpoint:
    path: /tavily_search_tool
    method: POST
    data_selector: results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: GET
    data_selector: output
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: GET
    data_selector: output
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: output
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: tasks
  endpoint:
    path: /tasks
    method: POST
    data_selector: result
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
- name: BinaryContent
  endpoint:
    path: /binary-content
    method: GET
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: BinaryContent
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: ToolReturn
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: UserPromptPart
    params: {}
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: RetryPromptPart
    params: {}
- name: handle_request
  endpoint:
    path: /handle_request
    method: POST
    data_selector: response
    params: {}
- name: handle_async_request
  endpoint:
    path: /handle_async_request
    method: POST
    data_selector: response
    params: {}
- name: agent_run_result
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
    params: {}
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai/models/ModelRequestParameters
    method: GET
    data_selector: function_tools
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai/models/Model
    method: GET
    data_selector: model_name
    params: {}
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: model
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: case
  endpoint:
    path: /case
    method: POST
    data_selector: case_data
    params: {}
- name: test1
  endpoint:
    path: /pydantic_evals/test1
    method: GET
- name: test2
  endpoint:
    path: /pydantic_evals/test2
    method: GET
- name: cases
  endpoint:
    path: /pydantic_evals/dataset/cases
    method: GET
    data_selector: cases
    params: {}
- name: evaluators
  endpoint:
    path: /pydantic_evals/dataset/evaluators
    method: GET
    data_selector: evaluators
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: POST
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: dataset
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: None
    params: {}
- name: Contains
  endpoint:
    path: /Contains
    method: POST
    data_selector: None
    params: {}
- name: Equals
  endpoint:
    path: /Equals
    method: POST
    data_selector: None
    params: {}
- name: EqualsExpected
  endpoint:
    path: /EqualsExpected
    method: POST
    data_selector: None
    params: {}
- name: HasMatchingSpan
  endpoint:
    path: /HasMatchingSpan
    method: POST
    data_selector: None
    params: {}
- name: IsInstance
  endpoint:
    path: /IsInstance
    method: POST
    data_selector: None
    params: {}
- name: LLMJudge
  endpoint:
    path: /LLMJudge
    method: POST
    data_selector: None
    params: {}
- name: MaxDuration
  endpoint:
    path: /MaxDuration
    method: POST
    data_selector: None
    params: {}
- name: GradingOutput
  endpoint:
    path: /pydantic_evals/evaluators/llm_as_a_judge.py
    method: GET
    data_selector: records
    params: {}
- name: SpanNode
  endpoint:
    path: /span
    method: GET
    data_selector: nodes
    params: {}
- name: report_case
  endpoint:
    path: /report_case
    method: GET
    data_selector: records
- name: report_case_failure
  endpoint:
    path: /report_case_failure
    method: GET
    data_selector: records
- name: report_case_aggregate
  endpoint:
    path: /report_case_aggregate
    method: GET
    data_selector: records
- name: cases
  endpoint:
    path: ''
    method: ''
    data_selector: cases
    params: {}
- name: failures
  endpoint:
    path: ''
    method: ''
    data_selector: failures
    params: {}
- name: trace_id
  endpoint:
    path: ''
    method: ''
    data_selector: trace_id
    params: {}
- name: span_id
  endpoint:
    path: ''
    method: ''
    data_selector: span_id
    params: {}
- name: EvaluationRenderer
  endpoint:
    path: /pydantic_evals/reporting
    method: GET
    data_selector: renderers
    params: {}
- name: RenderNumberConfig
  endpoint:
    path: /pydantic_evals/reporting
    method: GET
    data_selector: configs
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: user_id
- name: mcp_server_tool
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model_request
    method: POST
    data_selector: parts
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: all_messages
    params: {}
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    params:
      count: count
- name: dice_game
  endpoint:
    path: /dice_game
    method: GET
    data_selector: result
    params: {}
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: output
    params: {}
- name: deferred_tool_results
  endpoint:
    path: /deferred_tool_results
    method: GET
    data_selector: results
- name: frontend_tool_definitions
  endpoint:
    path: /frontend_tool_definitions
    method: GET
    data_selector: definitions
- name: groq
  endpoint:
    path: /models/groq
    method: GET
- name: huggingface
  endpoint:
    path: /models/huggingface
    method: GET
- name: mistral
  endpoint:
    path: /models/mistral
    method: GET
- name: openai
  endpoint:
    path: /models/openai
    method: GET
- name: deepseek-chat
  endpoint:
    path: /path/to/deepseek/chat
    method: POST
- name: FallbackModel
  endpoint:
    path: /models/fallback
    method: POST
    data_selector: model
    params: {}
- name: Agent
  endpoint:
    path: /agents
    method: POST
    data_selector: agent
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: output
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: AgentRunResult
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run/ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: run_result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: event_stream
    params: {}
- name: iter
  endpoint:
    path: iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: override
    method: GET
    data_selector: override_data
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/WebSearchTool
    method: POST
    data_selector: tool_data
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/CodeExecutionTool
    method: POST
    data_selector: tool_data
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/UrlContextTool
    method: POST
    data_selector: tool_data
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/ImageGenerationTool
    method: POST
    data_selector: tool_data
- name: MemoryTool
  endpoint:
    path: /builtin_tools/MemoryTool
    method: POST
    data_selector: tool_data
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/MCPServerTool
    method: POST
    data_selector: tool_data
- name: tavily_search_tool
  endpoint:
    path: /tavily/search
    method: POST
    data_selector: results
    params:
      api_key: required
- name: run
  endpoint:
    path: run
    method: POST
    data_selector: AgentRunResult
    params: {}
- name: run_sync
  endpoint:
    path: run_sync
    method: POST
    data_selector: AgentRunResult
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: run_sync_result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: run_stream_result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: run_stream_events_result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: model.request
  endpoint:
    path: /model/request
    method: POST
    data_selector: response
    params: {}
- name: model.request_stream
  endpoint:
    path: /model/request_stream
    method: GET
    data_selector: streamed_response
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: AgentRunResult
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: AgentRunResult
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
- name: Agent
  endpoint:
    path: /agent
    method: POST
    data_selector: created_agent
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
- name: BinaryContent
  endpoint:
    path: /binary-content
    method: GET
    data_selector: data
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: return_value
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/messages/PartStartEvent
    method: GET
    data_selector: index
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/messages/PartDeltaEvent
    method: GET
    data_selector: index
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/messages/FinalResultEvent
    method: GET
    data_selector: tool_name
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolCallEvent
    method: GET
    data_selector: part
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolResultEvent
    method: GET
    data_selector: result
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolCallEvent
    method: GET
    data_selector: part
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolResultEvent
    method: GET
    data_selector: result
- name: HandleResponseEvent
  endpoint:
    path: /pydantic_ai/messages/HandleResponseEvent
    method: GET
    data_selector: event_kind
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai/messages/AgentStreamEvent
    method: GET
    data_selector: event_kind
- name: ToolOutput
  endpoint:
    path: /pydantic_ai/output/ToolOutput
    method: GET
    data_selector: output
- name: NativeOutput
  endpoint:
    path: /pydantic_ai/output/NativeOutput
    method: GET
    data_selector: outputs
- name: PromptedOutput
  endpoint:
    path: /pydantic_ai/output/PromptedOutput
    method: GET
    data_selector: outputs
- name: TextOutput
  endpoint:
    path: /pydantic_ai/output/TextOutput
    method: GET
    data_selector: output_function
- name: agent_run_result
  endpoint:
    path: /pydantic_ai/agent_run_result
    method: GET
    data_selector: result
- name: agent_run_result_event
  endpoint:
    path: /pydantic_ai/agent_run_result_event
    method: GET
    data_selector: result
- name: get_tools
  endpoint:
    path: /get/tools
    method: GET
    data_selector: tools
    params: {}
- name: call_tool
  endpoint:
    path: /call/tool
    method: POST
    data_selector: result
    params: {}
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: list
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: list
    params: {}
- name: model_name
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: model_names
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: model
  endpoint:
    path: /models
    method: GET
- name: mistral_model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: request
  endpoint:
    path: /request
    method: POST
    data_selector: model_response
    params: {}
- name: request_stream
  endpoint:
    path: /request_stream
    method: POST
    data_selector: streamed_response
    params: {}
- name: TestModel
  endpoint:
    path: /test/model
    method: GET
    data_selector: records
    params: {}
- name: case
  endpoint:
    path: /pydantic_evals/case
    method: POST
    data_selector: case
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: POST
    data_selector: dataset
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset
    method: GET
    data_selector: dataset
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: GET
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: PUT
    data_selector: dataset
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /pydantic_evals/dataset/increment_eval_metric
    method: POST
    data_selector: None
    params:
      name: str
      amount: int | float
- name: contains
  endpoint:
    path: /pydantic_evals/evaluators/contains
    method: POST
    data_selector: None
    params: {}
- name: equals
  endpoint:
    path: /pydantic_evals/evaluators/equals
    method: POST
    data_selector: None
    params: {}
- name: equals_expected
  endpoint:
    path: /pydantic_evals/evaluators/equals_expected
    method: POST
    data_selector: None
    params: {}
- name: has_matching_span
  endpoint:
    path: /pydantic_evals/evaluators/has_matching_span
    method: POST
    data_selector: None
    params: {}
- name: is_instance
  endpoint:
    path: /pydantic_evals/evaluators/is_instance
    method: POST
    data_selector: None
    params: {}
- name: llm_judge
  endpoint:
    path: /pydantic_evals/evaluators/llm_judge
    method: POST
    data_selector: None
    params: {}
- name: max_duration
  endpoint:
    path: /pydantic_evals/evaluators/max_duration
    method: POST
    data_selector: None
    params: {}
- name: span_node
  endpoint:
    path: /pydantic_evals/pydantic_evals/otel/span_tree.py
    method: GET
- name: ReportCase
  endpoint:
    path: /report/case
    method: GET
    data_selector: cases
- name: ReportCaseFailure
  endpoint:
    path: /report/case/failure
    method: GET
    data_selector: failures
- name: EvaluationReport
  endpoint:
    path: /report/evaluation
    method: GET
    data_selector: reports
- name: cases
  endpoint:
    path: /cases
    method: GET
    data_selector: cases
    params: {}
- name: failures
  endpoint:
    path: /failures
    method: GET
    data_selector: failures
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
    params:
      count: count
- name: deferred_tools
  endpoint:
    path: /services/data/vXX.X/sobjects/DeferredTools
    method: GET
    data_selector: records
    params: {}
- name: vending_machine
  endpoint:
    path: /vending_machine
    method: POST
    data_selector: result
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: POST
    data_selector: result
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: agent_run
  endpoint:
    path: /run-ag-ui
    method: POST
    data_selector: event_chunks
- name: agent_run
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: agent_iter
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: output
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: output
    params: {}
- name: agent_run
  endpoint:
    path: /iter
    method: GET
    data_selector: AgentRun
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    method: GET
- name: all_messages
  endpoint:
    path: /all_messages
    method: GET
    data_selector: messages
    params: {}
- name: new_messages
  endpoint:
    path: /new_messages
    method: GET
    data_selector: messages
    params: {}
- name: all_messages_json
  endpoint:
    path: /all_messages_json
    method: GET
    data_selector: bytes
    params: {}
- name: new_messages_json
  endpoint:
    path: /new_messages_json
    method: GET
    data_selector: bytes
    params: {}
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
    data_selector: records
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
    data_selector: records
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
    data_selector: records
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
    data_selector: records
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
    data_selector: records
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
    data_selector: records
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: wrapped_request_step
  endpoint:
    path: /model/request
    method: POST
- name: wrapped_request_stream_step
  endpoint:
    path: /model/request_stream
    method: POST
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: result
- name: agent_run
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: task
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: result
    params: {}
- name: task_status
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: status
    params: {}
- name: task_cancel
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: result
    params: {}
- name: VideoUrl
  endpoint:
    path: /video/url
    method: GET
    data_selector: url
    params: {}
- name: AudioUrl
  endpoint:
    path: /audio/url
    method: GET
    data_selector: url
    params: {}
- name: ImageUrl
  endpoint:
    path: /image/url
    method: GET
    data_selector: url
    params: {}
- name: DocumentUrl
  endpoint:
    path: /document/url
    method: GET
    data_selector: url
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: ModelRequest
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: ModelResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/PartStartEvent
    method: GET
    data_selector: records
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/PartDeltaEvent
    method: GET
    data_selector: records
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/FinalResultEvent
    method: GET
    data_selector: records
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/FunctionToolCallEvent
    method: GET
    data_selector: records
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/FunctionToolResultEvent
    method: GET
    data_selector: records
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolCallEvent
    method: GET
    data_selector: records
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolResultEvent
    method: GET
    data_selector: records
    params: {}
- name: HandleResponseEvent
  endpoint:
    path: /pydantic_ai/HandleResponseEvent
    method: GET
    data_selector: records
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai/AgentStreamEvent
    method: GET
    data_selector: records
    params: {}
- name: agent_run_result
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
    params: {}
- name: agent_run_result_event
  endpoint:
    path: /agent/run/result/event
    method: GET
    data_selector: event_kind
    params: {}
- name: max_tokens
  endpoint:
    path: /max_tokens
    method: GET
    data_selector: records
- name: temperature
  endpoint:
    path: /temperature
    method: GET
    data_selector: records
- name: top_p
  endpoint:
    path: /top_p
    method: GET
    data_selector: records
- name: timeout
  endpoint:
    path: /timeout
    method: GET
    data_selector: records
- name: parallel_tool_calls
  endpoint:
    path: /parallel_tool_calls
    method: GET
    data_selector: records
- name: seed
  endpoint:
    path: /seed
    method: GET
    data_selector: records
- name: presence_penalty
  endpoint:
    path: /presence_penalty
    method: GET
    data_selector: records
- name: frequency_penalty
  endpoint:
    path: /frequency_penalty
    method: GET
    data_selector: records
- name: logit_bias
  endpoint:
    path: /logit_bias
    method: GET
    data_selector: records
- name: stop_sequences
  endpoint:
    path: /stop_sequences
    method: GET
    data_selector: records
- name: extra_headers
  endpoint:
    path: /extra_headers
    method: GET
    data_selector: records
- name: extra_body
  endpoint:
    path: /extra_body
    method: GET
    data_selector: records
- name: RenamedToolset
  endpoint:
    path: /toolset/renamed
    method: GET
    data_selector: toolset
- name: PreparedToolset
  endpoint:
    path: /toolset/prepared
    method: GET
    data_selector: toolset
- name: WrapperToolset
  endpoint:
    path: /toolset/wrapper
    method: GET
    data_selector: toolset
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai/models/__init__.py
    method: GET
    data_selector: function_tools
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai/models/__init__.py
    method: GET
    data_selector: settings
    params: {}
- name: BedrockModelSettings
  endpoint:
    path: /bedrock/model/settings
    method: GET
    data_selector: settings
- name: google_model
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: mistral
  endpoint:
    path: /api/v1/mistral
    method: GET
    data_selector: data
- name: test_model
  endpoint:
    path: /v1/test
    method: GET
    data_selector: data
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /services/data/vXX.X/sobjects/Dataset
    method: GET
    data_selector: cases
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /pydantic_evals/dataset/increment_eval_metric
    method: POST
    data_selector: records
    params: {}
- name: Contains
  endpoint:
    path: /pydantic_evals/evaluators/Contains
    method: POST
    data_selector: records
    params: {}
- name: Equals
  endpoint:
    path: /pydantic_evals/evaluators/Equals
    method: POST
    data_selector: records
    params: {}
- name: EqualsExpected
  endpoint:
    path: /pydantic_evals/evaluators/EqualsExpected
    method: POST
    data_selector: records
    params: {}
- name: HasMatchingSpan
  endpoint:
    path: /pydantic_evals/evaluators/HasMatchingSpan
    method: POST
    data_selector: records
    params: {}
- name: IsInstance
  endpoint:
    path: /pydantic_evals/evaluators/IsInstance
    method: POST
    data_selector: records
    params: {}
- name: LLMJudge
  endpoint:
    path: /pydantic_evals/evaluators/LLMJudge
    method: POST
    data_selector: records
    params: {}
- name: MaxDuration
  endpoint:
    path: /pydantic_evals/evaluators/MaxDuration
    method: POST
    data_selector: records
    params: {}
- name: span_node
  endpoint:
    path: /pydantic_evals/pydantic_evals/otel/span_tree.py
    method: GET
    data_selector: nodes
    params: {}
- name: report
  endpoint:
    path: /report
    method: GET
    data_selector: cases
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: data
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: result
    params: {}
- name: deepwiki_tool
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: result
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: records
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: POST
    data_selector: jokes
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: joke
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: result
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: name
- name: Foobar
  endpoint:
    path: /toolsets/Foobar
    method: GET
    data_selector: properties
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /v1
    method: GET
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: output
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: AG-UI run input
- name: agent_run
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: streaming event chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AgentRun
  endpoint:
    path: /agent_run
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: model_response
  endpoint:
    path: /model/response
    method: GET
    data_selector: response
    params: {}
- name: usage
  endpoint:
    path: /usage
    method: GET
    data_selector: usage
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: tasks
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: result
- name: task_status
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: result
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: result
- name: Skill
  endpoint:
    path: /fasta2a/schema/Skill
    method: GET
- name: Artifact
  endpoint:
    path: /fasta2a/schema/Artifact
    method: GET
- name: PushNotificationConfig
  endpoint:
    path: /fasta2a/schema/PushNotificationConfig
    method: GET
- name: Task
  endpoint:
    path: /fasta2a/schema/Task
    method: GET
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: records
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: BinaryContent
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: ToolReturn
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: UserPromptPart
    params: {}
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: RetryPromptPart
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
- name: has_content
  endpoint:
    path: /has_content
    method: GET
    data_selector: has_content
- name: max_tokens
  endpoint:
    path: /max_tokens
    method: GET
    data_selector: max_tokens
    params: {}
- name: temperature
  endpoint:
    path: /temperature
    method: GET
    data_selector: temperature
    params: {}
- name: top_p
  endpoint:
    path: /top_p
    method: GET
    data_selector: top_p
    params: {}
- name: timeout
  endpoint:
    path: /timeout
    method: GET
    data_selector: timeout
    params: {}
- name: parallel_tool_calls
  endpoint:
    path: /parallel_tool_calls
    method: GET
    data_selector: parallel_tool_calls
    params: {}
- name: seed
  endpoint:
    path: /seed
    method: GET
    data_selector: seed
    params: {}
- name: presence_penalty
  endpoint:
    path: /presence_penalty
    method: GET
    data_selector: presence_penalty
    params: {}
- name: frequency_penalty
  endpoint:
    path: /frequency_penalty
    method: GET
    data_selector: frequency_penalty
    params: {}
- name: logit_bias
  endpoint:
    path: /logit_bias
    method: GET
    data_selector: logit_bias
    params: {}
- name: stop_sequences
  endpoint:
    path: /stop_sequences
    method: GET
    data_selector: stop_sequences
    params: {}
- name: extra_headers
  endpoint:
    path: /extra_headers
    method: GET
    data_selector: extra_headers
    params: {}
- name: extra_body
  endpoint:
    path: /extra_body
    method: GET
    data_selector: extra_body
    params: {}
- name: latest_bedrock_models
  endpoint:
    path: /models/latest
    method: GET
    data_selector: models
    params: {}
- name: FallbackModel
  endpoint:
    path: /models/fallback
    method: POST
    data_selector: models
- name: FunctionModel
  endpoint:
    path: /models/function
    method: POST
    data_selector: function
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: hugging_face_model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: mistral_model
  endpoint:
    path: /models/mistral
    method: GET
    data_selector: models
    params: {}
- name: OpenAIResponsesModel
  endpoint:
    path: /v1/responses
    method: POST
    data_selector: data
    params: {}
- name: TestModel
  endpoint:
    path: /test/model
    method: GET
    data_selector: model_data
- name: TestModel
  endpoint:
    path: /pydantic_ai/models/test
    method: GET
    data_selector: records
- name: dataset
  endpoint:
    path: /dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: results
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: results
- name: from_file
  endpoint:
    path: /from_file
    method: POST
    data_selector: results
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: results
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: results
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: results
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: POST
    data_selector: results
- name: get_serialization_name
  endpoint:
    path: /get_serialization_name
    method: GET
    data_selector: result
- name: evaluate
  endpoint:
    path: /evaluate
    method: POST
    data_selector: result
- name: evaluate_sync
  endpoint:
    path: /evaluate_sync
    method: POST
    data_selector: result
- name: evaluate_async
  endpoint:
    path: /evaluate_async
    method: POST
    data_selector: result
- name: EvaluatorSpec
  endpoint:
    path: /pydantic_evals/evaluators/spec
    method: GET
    data_selector: EvaluatorSpec
    params: {}
- name: GradingOutput
  endpoint:
    path: /pydantic_evals/evaluators/llm_as_a_judge
    method: GET
    data_selector: GradingOutput
    params: {}
- name: span_node
  endpoint:
    path: /pydantic_evals/pydantic_evals/otel/span_tree.py
    method: GET
- name: span_tree
  endpoint:
    path: /span_tree
    method: GET
    data_selector: spans
- name: report_case
  endpoint:
    path: /report_case
    method: GET
    data_selector: cases
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Decision
  endpoint:
    path: /beta/decision
    method: GET
    data_selector: decision_data
    params: {}
- name: EndMarker
  endpoint:
    path: /EndMarker
    method: GET
    data_selector: _value
    params: {}
- name: JoinItem
  endpoint:
    path: /JoinItem
    method: GET
    data_selector: inputs
    params: {}
- name: Graph
  endpoint:
    path: /Graph
    method: GET
    data_selector: nodes
    params: {}
- name: EndNode
  endpoint:
    path: /EndNode
    method: GET
    data_selector: id
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: results
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: POST
    data_selector: result
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: function_toolset
  endpoint:
    path: /toolset/function
    method: GET
    data_selector: tools
    params: {}
- name: agent
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: count_down
  endpoint:
    path: /count_down
    method: GET
    data_selector: records
    params: {}
- name: question_graph
  endpoint:
    path: /question_graph
    method: GET
    data_selector: records
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: streaming_events
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
- name: web_search
  endpoint:
    path: /web_search
    method: POST
    data_selector: results
- name: code_execution
  endpoint:
    path: /code_execution
    method: POST
    data_selector: results
- name: url_context
  endpoint:
    path: /url_context
    method: POST
    data_selector: results
- name: image_generation
  endpoint:
    path: /image_generation
    method: POST
    data_selector: results
- name: memory
  endpoint:
    path: /memory
    method: POST
    data_selector: results
- name: mcp_server
  endpoint:
    path: /mcp_server
    method: POST
    data_selector: results
- name: tavily_search
  endpoint:
    path: /tavily/search
    method: POST
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
      event_stream_handler: null
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
      event_stream_handler: null
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params:
      user_prompt: null
      output_type: null
      message_history: null
      deferred_tool_results: null
      model: null
      deps: null
      model_settings: null
      usage_limits: null
      usage: null
      infer_name: true
      toolsets: null
      builtin_tools: null
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent/run
    method: GET
    data_selector: events
    params: {}
- name: agent_iter
  endpoint:
    path: /pydantic_ai/agent/iter
    method: GET
    data_selector: nodes
    params: {}
- name: request
  endpoint:
    path: /model.request
    method: POST
- name: request_stream
  endpoint:
    path: /model.request_stream
    method: POST
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: agent_run_sync
  endpoint:
    path: /agent/run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: content
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: return_value
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: content
    params: {}
- name: content
  endpoint:
    path: content
    method: GET
    data_selector: content
- name: id
  endpoint:
    path: id
    method: GET
    data_selector: id
- name: part_kind
  endpoint:
    path: part_kind
    method: GET
    data_selector: part_kind
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/messages/PartStartEvent
    method: GET
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/messages/PartDeltaEvent
    method: GET
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/messages/FinalResultEvent
    method: GET
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolCallEvent
    method: GET
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolResultEvent
    method: GET
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolCallEvent
    method: GET
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolResultEvent
    method: GET
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai/messages/AgentStreamEvent
    method: GET
- name: agent_run_result
  endpoint:
    path: /agent_run/result
    method: GET
- name: agent_run_result_event
  endpoint:
    path: /agent_run/result_event
    method: GET
- name: bedrock_converse
  endpoint:
    path: /v1/converse
    method: POST
    data_selector: response
    params: {}
- name: cohere_model
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
    params: {}
- name: FallbackModel
  endpoint:
    path: /pydantic_ai/models/fallback
    method: GET
- name: FunctionModel
  endpoint:
    path: /pydantic_ai/models/function
    method: GET
- name: groq_model
  endpoint:
    path: /groq/model
    method: POST
    data_selector: data
    params: {}
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: OpenAIResponsesModel
  endpoint:
    path: /v1/responses
    method: POST
    data_selector: data
    params: {}
- name: TestModel
  endpoint:
    path: /pydantic_ai/models/test
    method: GET
    data_selector: records
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: POST
    data_selector: file
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: text
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dictionary
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: file
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset/increment_eval_metric
    method: POST
    data_selector: None
    params: {}
- name: contains_evaluator
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/Contains
    method: GET
    data_selector: None
    params: {}
- name: equals_evaluator
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/Equals
    method: GET
    data_selector: None
    params: {}
- name: equals_expected_evaluator
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/EqualsExpected
    method: GET
    data_selector: None
    params: {}
- name: has_matching_span_evaluator
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/HasMatchingSpan
    method: GET
    data_selector: None
    params: {}
- name: is_instance_evaluator
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/IsInstance
    method: GET
    data_selector: None
    params: {}
- name: llm_judge_evaluator
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/LLMJudge
    method: GET
    data_selector: None
    params: {}
- name: max_duration_evaluator
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/MaxDuration
    method: GET
    data_selector: None
    params: {}
- name: span_node
  endpoint:
    path: /span_tree
    method: GET
    data_selector: nodes
    params: {}
- name: ReportCase
  endpoint:
    path: /report_case
    method: GET
    data_selector: cases
    params: {}
- name: ReportCaseFailure
  endpoint:
    path: /report_case_failure
    method: GET
    data_selector: failures
    params: {}
- name: EvaluationReport
  endpoint:
    path: /evaluation_report
    method: GET
    data_selector: reports
    params: {}
- name: cases
  endpoint:
    path: /services/data/vXX.X/sobjects/Case
    method: GET
    data_selector: records
    params: {}
- name: failures
  endpoint:
    path: /services/data/vXX.X/sobjects/Failures
    method: GET
    data_selector: records
    params: {}
- name: EndNode
  endpoint:
    path: /EndNode
    method: GET
    data_selector: records
- name: StartNode
  endpoint:
    path: /StartNode
    method: GET
    data_selector: records
- name: StepContext
  endpoint:
    path: /StepContext
    method: GET
    data_selector: records
- name: StepNode
  endpoint:
    path: /StepNode
    method: GET
    data_selector: records
- name: GraphTask
  endpoint:
    path: /pydantic_graph/pydantic_graph/beta/graph.py
    method: GET
    data_selector: GraphTask
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: state
    params: {}
- name: ToolReturn
  endpoint:
    path: /ag_ui_tool_events
    method: GET
    data_selector: return_value
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: github
  endpoint:
    path: /mcp/
    method: GET
    data_selector: ''
    params: {}
- name: google-calendar
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
    data_selector: ''
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: all_messages
- name: run_results
  endpoint:
    path: /run_results
    method: GET
    data_selector: results
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
- name: toolset
  endpoint:
    path: /toolsets
    method: GET
    data_selector: function_tools
- name: agent
  endpoint:
    path: /agents
    method: POST
    data_selector: result
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
    params: {}
- name: email_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: agent_iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: result
    params: {}
- name: node
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: nodes
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: tavily_search
  endpoint:
    path: /tavily/search
    method: POST
    params: {}
- name: ModelResponseStreamEvent
  endpoint:
    path: /model/stream/event
    method: GET
    data_selector: events
- name: ModelResponse
  endpoint:
    path: /model/response
    method: GET
    data_selector: response
- name: RequestUsage
  endpoint:
    path: /request/usage
    method: GET
    data_selector: usage
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /api/agent/run
    method: POST
    data_selector: output
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: StreamedRunResult
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: AgentStreamEvent
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: AgentRun
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: task
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: submitted
    params: {}
- name: task_status
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: status
    params: {}
- name: task_cancel
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: canceled
    params: {}
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: working
    params: {}
- name: video_url
  endpoint:
    path: /video/url
    method: GET
    data_selector: url
    params: {}
- name: audio_url
  endpoint:
    path: /audio/url
    method: GET
    data_selector: url
    params: {}
- name: image_url
  endpoint:
    path: /image/url
    method: GET
    data_selector: url
    params: {}
- name: document_url
  endpoint:
    path: /document/url
    method: GET
    data_selector: url
    params: {}
- name: BinaryContent
  endpoint:
    path: /from_data_uri
    method: POST
    data_selector: data
    params: {}
- name: BinaryImage
  endpoint:
    path: /binary_image
    method: POST
    data_selector: data
    params: {}
- name: ToolReturn
  endpoint:
    path: /tool_return
    method: POST
    data_selector: content
    params: {}
- name: UserPromptPart
  endpoint:
    path: /user_prompt_part
    method: POST
    data_selector: content
    params: {}
- name: RetryPromptPart
  endpoint:
    path: /retry_prompt_part
    method: POST
    data_selector: content
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
- name: id
  endpoint:
    path: /id
    method: GET
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
- name: has_content
  endpoint:
    path: /has_content
    method: GET
- name: text
  endpoint:
    path: /text
    method: GET
    data_selector: text
    params: {}
- name: thinking
  endpoint:
    path: /thinking
    method: GET
    data_selector: thinking
    params: {}
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: tool_calls
  endpoint:
    path: /tool_calls
    method: GET
    data_selector: tool_calls
    params: {}
- name: builtin_tool_calls
  endpoint:
    path: /builtin_tool_calls
    method: GET
    data_selector: builtin_tool_calls
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: POST
    data_selector: result
- name: AgentRunResult
  endpoint:
    path: /pydantic_ai/agent_run_result
    method: GET
    data_selector: result
- name: AgentRunResultEvent
  endpoint:
    path: /pydantic_ai/agent_run_result_event
    method: GET
    data_selector: result
- name: model_name
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: function_tools
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: _profile
    params: {}
- name: cohere_model
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
- name: model_name
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: function_streamed_response
  endpoint:
    path: /v1/models/{model_name}:generateContent
    method: POST
    data_selector: candidates
    params: {}
- name: groq_model
  endpoint:
    path: /api/groq/model
    method: GET
    data_selector: models
- name: huggingface_model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
- name: mcp_sampling
  endpoint:
    path: /mcp_sampling
    method: GET
    data_selector: records
- name: mistral
  endpoint:
    path: /mistral
    method: GET
    data_selector: records
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: function_tool
  endpoint:
    path: /v1/tools
    method: POST
    data_selector: data
    params: {}
- name: Case
  endpoint:
    path: /pydantic_evals/Case
    method: POST
    data_selector: inputs
    params: {}
- name: dataset
  endpoint:
    path: /datasets
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: GET
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: dataset
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: result
    params:
      name: metric_name
      amount: increment_amount
- name: contains_evaluator
  endpoint:
    path: /contains_evaluator
    method: POST
    data_selector: result
    params: {}
- name: equals_evaluator
  endpoint:
    path: /equals_evaluator
    method: POST
    data_selector: result
    params: {}
- name: has_matching_span_evaluator
  endpoint:
    path: /has_matching_span_evaluator
    method: POST
    data_selector: result
    params: {}
- name: is_instance_evaluator
  endpoint:
    path: /is_instance_evaluator
    method: POST
    data_selector: result
    params: {}
- name: llm_judge
  endpoint:
    path: /llm_judge
    method: POST
    data_selector: result
    params: {}
- name: max_duration_evaluator
  endpoint:
    path: /max_duration_evaluator
    method: POST
    data_selector: result
    params: {}
- name: Evaluator
  endpoint:
    path: /pydantic_evals/evaluators/evaluator
    method: GET
    data_selector: records
    params: {}
- name: GradingOutput
  endpoint:
    path: /pydantic_evals/GradingOutput
    method: GET
    data_selector: records
    params: {}
- name: judge_output
  endpoint:
    path: /pydantic_evals/judge_output
    method: POST
    data_selector: records
    params: {}
- name: judge_input_output
  endpoint:
    path: /pydantic_evals/judge_input_output
    method: POST
    data_selector: records
    params: {}
- name: judge_output_expected
  endpoint:
    path: /pydantic_evals/judge_output_expected
    method: POST
    data_selector: records
    params: {}
- name: ReportCase
  endpoint:
    path: /reportcase
    method: GET
    data_selector: cases
    params: {}
- name: ReportCaseFailure
  endpoint:
    path: /reportcasefailure
    method: GET
    data_selector: failures
    params: {}
- name: EvaluationReport
  endpoint:
    path: /evaluationreport
    method: GET
    data_selector: reports
    params: {}
- name: report
  endpoint:
    path: /reports
    method: GET
- name: start_node
  endpoint:
    path: /start_node
    method: GET
    data_selector: records
- name: end_node
  endpoint:
    path: /end_node
    method: GET
    data_selector: records
- name: DecisionBranchBuilder
  endpoint:
    path: /pydantic_graph/beta/decision
    method: GET
    data_selector: records
- name: GraphTask
  endpoint:
    path: /pydantic_graph/beta/graph.py
    method: GET
    data_selector: GraphTask
    params: {}
- name: GraphRun
  endpoint:
    path: /pydantic_graph/beta/graph.py
    method: GET
    data_selector: GraphRun
    params: {}
- name: ReducerContext
  endpoint:
    path: /pydantic_graph/pydantic_graph/beta/join.py
    method: GET
    data_selector: context
    params: {}
- name: ReducerFunction
  endpoint:
    path: /pydantic_graph/pydantic_graph/beta/join.py
    method: GET
    data_selector: function
    params: {}
- name: reduce_null
  endpoint:
    path: /pydantic_graph/pydantic_graph/beta/join.py
    method: GET
    data_selector: function
    params: {}
- name: reduce_list_append
  endpoint:
    path: /pydantic_graph/pydantic_graph/beta/join.py
    method: GET
    data_selector: function
    params: {}
- name: reduce_list_extend
  endpoint:
    path: /pydantic_graph/pydantic_graph/beta/join.py
    method: GET
    data_selector: function
    params: {}
- name: reduce_dict_update
  endpoint:
    path: /pydantic_graph/pydantic_graph/beta/join.py
    method: GET
    data_selector: function
    params: {}
- name: reduce_sum
  endpoint:
    path: /pydantic_graph/pydantic_graph/beta/join.py
    method: GET
    data_selector: function
    params: {}
- name: ReduceFirstValue
  endpoint:
    path: /pydantic_graph/pydantic_graph/beta/join.py
    method: GET
    data_selector: class
    params: {}
- name: Join
  endpoint:
    path: /pydantic_graph/pydantic_graph/beta/join.py
    method: GET
    data_selector: class
    params: {}
- name: JoinNode
  endpoint:
    path: /pydantic_graph/pydantic_graph/beta/join.py
    method: GET
    data_selector: class
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: records
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: joke_factory
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
    params:
      count: count
- name: get_jokes
  endpoint:
    path: https://example.com
    method: GET
    data_selector: text
    params:
      count: count
- name: toolset
  endpoint:
    path: /toolset
    method: GET
    data_selector: tools
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: output
    params: {}
- name: WriteEmail
  endpoint:
    path: /write_email
    method: POST
    data_selector: result.output
    params: {}
- name: Feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result.output
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: GET
    data_selector: none
    params: {}
- name: sequential_tool_calls
  endpoint:
    path: /sequential_tool_calls
    method: GET
    data_selector: none
    params: {}
- name: AgentRun
  endpoint:
    path: /agent_run
    method: GET
    data_selector: nodes
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: output
    params: {}
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
    data_selector: records
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
    data_selector: records
    params: {}
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
    data_selector: records
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
    data_selector: records
    params: {}
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
    data_selector: records
    params: {}
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
    data_selector: records
    params: {}
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
- name: run
  endpoint:
    path: /dbos/run
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /dbos/run_sync
    method: POST
    data_selector: result
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: GET
    data_selector: nodes
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: records
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: result
- name: get_task
  endpoint:
    path: /tasks/get
    method: POST
    data_selector: result
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: result
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: result
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
    params: {}
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
    params: {}
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
    params: {}
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: content
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py/content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py/id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py/part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: has_content
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py/has_content
    method: GET
    data_selector: has_content
    params: {}
- name: handle_request
  endpoint:
    path: /handle_request
    method: POST
    data_selector: Response
    params: {}
- name: handle_async_request
  endpoint:
    path: /handle_async_request
    method: POST
    data_selector: Response
    params: {}
- name: wait_retry_after
  endpoint:
    path: /wait_retry_after
    method: GET
    data_selector: Callable[[RetryCallState], float]
    params: {}
- name: agent_run_result
  endpoint:
    path: /agent_run_result
    method: GET
    data_selector: result
- name: agent_run_result_event
  endpoint:
    path: /agent_run_result_event
    method: GET
    data_selector: result
- name: AbstractToolset
  endpoint:
    path: /pydantic_ai/toolsets/abstract.py
    method: GET
    data_selector: toolsets
    params: {}
- name: CombinedToolset
  endpoint:
    path: /pydantic_ai/toolsets/combined.py
    method: GET
    data_selector: toolsets
    params: {}
- name: ExternalToolset
  endpoint:
    path: /pydantic_ai/toolsets/external.py
    method: GET
    data_selector: toolsets
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: FallbackModel
  endpoint:
    path: /models/fallback
    method: POST
- name: FunctionModel
  endpoint:
    path: /models/function
    method: POST
- name: groq_model
  endpoint:
    path: /models/groq
    method: GET
    data_selector: models
    params: {}
- name: hugging_face_model
  endpoint:
    path: /api/models
    method: GET
    data_selector: models
    params: {}
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
- name: mistral_model
  endpoint:
    path: /models/mistral
    method: GET
- name: MistralStreamedResponse
  endpoint:
    path: /models/mistral
    method: GET
- name: OpenAIChatModel
  endpoint:
    method: POST
- name: OpenAIResponsesModel
  endpoint:
    method: POST
- name: TestModel
  endpoint:
    path: /pydantic_ai/models/test
    method: GET
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /pydantic_evals/dataset/increment_eval_metric
    method: POST
    data_selector: metrics
    params: {}
- name: contains
  endpoint:
    path: /pydantic_evals/evaluators/contains
    method: POST
    data_selector: evaluation_result
    params: {}
- name: equals
  endpoint:
    path: /pydantic_evals/evaluators/equals
    method: POST
    data_selector: evaluation_result
    params: {}
- name: equals_expected
  endpoint:
    path: /pydantic_evals/evaluators/equals_expected
    method: POST
    data_selector: evaluation_result
    params: {}
- name: has_matching_span
  endpoint:
    path: /pydantic_evals/evaluators/has_matching_span
    method: POST
    data_selector: evaluation_result
    params: {}
- name: is_instance
  endpoint:
    path: /pydantic_evals/evaluators/is_instance
    method: POST
    data_selector: evaluation_result
    params: {}
- name: llm_judge
  endpoint:
    path: /pydantic_evals/evaluators/llm_judge
    method: POST
    data_selector: evaluation_result
    params: {}
- name: max_duration
  endpoint:
    path: /pydantic_evals/evaluators/max_duration
    method: POST
    data_selector: evaluation_result
    params: {}
- name: GradingOutput
  endpoint:
    path: /pydantic_evals/grading_output
    method: GET
    data_selector: records
    params: {}
- name: judge_output
  endpoint:
    path: /pydantic_evals/judge_output
    method: POST
    data_selector: records
    params: {}
- name: judge_input_output
  endpoint:
    path: /pydantic_evals/judge_input_output
    method: POST
    data_selector: records
    params: {}
- name: judge_input_output_expected
  endpoint:
    path: /pydantic_evals/judge_input_output_expected
    method: POST
    data_selector: records
    params: {}
- name: judge_output_expected
  endpoint:
    path: /pydantic_evals/judge_output_expected
    method: POST
    data_selector: records
    params: {}
- name: set_default_judge_model
  endpoint:
    path: /pydantic_evals/set_default_judge_model
    method: POST
    data_selector: records
    params: {}
- name: generate_dataset
  endpoint:
    path: /pydantic_evals/generate_dataset
    method: POST
    data_selector: records
    params: {}
- name: SpanNode
  endpoint:
    path: /span_node
    method: GET
    data_selector: nodes
    params: {}
- name: ReportCase
  endpoint:
    path: /report/case
    method: GET
    data_selector: cases
    params: {}
- name: ReportCaseFailure
  endpoint:
    path: /report/case/failure
    method: GET
    data_selector: failures
    params: {}
- name: EvaluationReport
  endpoint:
    path: /report/evaluation
    method: GET
    data_selector: reports
    params: {}
- name: console_table
  endpoint:
    path: /console_table
    method: GET
    data_selector: table
    params: {}
- name: failures_table
  endpoint:
    path: /failures_table
    method: GET
    data_selector: failures
    params: {}
- name: GraphTask
  endpoint:
    path: /pydantic_graph/beta/graph_task
    method: GET
    data_selector: records
- name: GraphRun
  endpoint:
    path: /pydantic_graph/beta/graph_run
    method: GET
    data_selector: records
- name: GraphBuilder
  endpoint:
    path: /pydantic_graph/beta/graph_builder
    method: GET
    data_selector: records
- name: EndNode
  endpoint:
    path: /EndNode
    method: GET
    data_selector: id
    params: {}
- name: bank_support
  endpoint:
    path: /api/bank/support
    method: POST
    data_selector: output
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /direct/model_request
    method: POST
    data_selector: response
    params: {}
- name: Tool
  endpoint:
    path: /tools
    method: GET
    data_selector: tools
    params: {}
- name: Agent
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
    params: {}
- name: toolset
  endpoint:
    path: /toolset
    method: GET
    data_selector: tools
    params: {}
- name: function_toolset
  endpoint:
    path: /function_toolset
    method: GET
    data_selector: tools
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: vending_machine_graph
  endpoint:
    path: /vending_machine
    method: POST
    data_selector: result
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
    params: {}
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: email
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
- name: agent_run
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
    data_selector: records
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
    data_selector: records
    params: {}
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
    data_selector: records
    params: {}
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
    data_selector: records
    params: {}
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
    data_selector: records
    params: {}
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
    data_selector: records
    params: {}
- name: tavily_search_tool
  endpoint:
    path: /tavily/search
    method: POST
    data_selector: results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /iter
    method: GET
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: agent_run
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: result
    params: {}
- name: tasks_send
  endpoint:
    path: /tasks/send
    method: POST
- name: tasks_get
  endpoint:
    path: /tasks/get
    method: GET
- name: tasks_cancel
  endpoint:
    path: /tasks/cancel
    method: POST
- name: tasks_push_notification_get
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: BinaryContent
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AsyncTenacityTransport
  endpoint:
    path: /pydantic_ai/retries/AsyncTenacityTransport
    method: GET
    data_selector: response
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/run/AgentRun
    method: GET
    data_selector: response
    params: {}
- name: AgentRunResult
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
- name: AgentRunResultEvent
  endpoint:
    path: /agent/run/result/event
    method: GET
    data_selector: event
- name: model_name
  endpoint:
    path: /model_name
    method: GET
- name: system
  endpoint:
    path: /system
    method: GET
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: records
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: records
    params: {}
- name: fallback_model
  endpoint:
    path: /models/fallback
    method: POST
    data_selector: models
    params: {}
- name: function_model
  endpoint:
    path: /models/function
    method: POST
    data_selector: function
    params: {}
- name: FunctionStreamedResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/function.py
    method: GET
    data_selector: records
- name: GoogleModel
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/google.py
    method: GET
    data_selector: records
- name: model_name
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: mistral_models
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: OpenAIResponsesModel
  endpoint:
    path: /v1/responses
    method: POST
    data_selector: data
- name: TestModel
  endpoint:
    path: /pydantic_ai/models/test
    method: GET
    data_selector: data
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: GET
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: dataset
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: json_schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metrics
    params: {}
- name: contains_evaluator
  endpoint:
    path: /contains_evaluator
    method: POST
    data_selector: evaluation
    params: {}
- name: equals_evaluator
  endpoint:
    path: /equals_evaluator
    method: POST
    data_selector: evaluation
    params: {}
- name: equals_expected_evaluator
  endpoint:
    path: /equals_expected_evaluator
    method: POST
    data_selector: evaluation
    params: {}
- name: has_matching_span_evaluator
  endpoint:
    path: /has_matching_span_evaluator
    method: POST
    data_selector: evaluation
    params: {}
- name: is_instance_evaluator
  endpoint:
    path: /is_instance_evaluator
    method: POST
    data_selector: evaluation
    params: {}
- name: max_duration_evaluator
  endpoint:
    path: /max_duration_evaluator
    method: POST
    data_selector: evaluation
    params: {}
- name: llm_judge_evaluator
  endpoint:
    path: /llm_judge_evaluator
    method: POST
    data_selector: evaluation
    params: {}
- name: SpanNode
  endpoint:
    path: /pydantic_evals/pydantic_evals/otel/span_tree.py
    method: GET
    data_selector: nodes
- name: ReportCase
  endpoint:
    path: /report/case
    method: GET
    data_selector: cases
    params: {}
- name: ReportCaseFailure
  endpoint:
    path: /report/case/failure
    method: GET
    data_selector: failures
    params: {}
- name: ReportCaseAggregate
  endpoint:
    path: /report/case/aggregate
    method: GET
    data_selector: aggregate
    params: {}
- name: EvaluationReport
  endpoint:
    path: /report/evaluation
    method: GET
    data_selector: evaluations
    params: {}
- name: Graph
  endpoint:
    path: /pydantic_graph/beta/graph
    method: GET
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: records
- name: weather_forecast
  endpoint:
    path: /ag_ui_tool_events
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /result/messages
    method: GET
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: properties
    params: {}
- name: deferred_toolset
  endpoint:
    path: /deferred/tools
    method: GET
    data_selector: tools
- name: personalized_greeting
  endpoint:
    path: /greet
    method: POST
    data_selector: greeting
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: results
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: result.output
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
    data_selector: records
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
    data_selector: records
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
    data_selector: records
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
    data_selector: records
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
    data_selector: records
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
    data_selector: records
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: HEAD
    data_selector: null
    params: {}
- name: agent_run
  endpoint:
    path: /
    method: POST
    data_selector: null
    params: {}
- name: docs
  endpoint:
    path: /docs
    method: GET
    data_selector: null
    params: {}
- name: tasks
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: submitted
- name: tasks_status
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: tasks
- name: tasks_cancel
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: canceled
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
- name: BinaryContent
  endpoint:
    path: /binary-content
    method: GET
    data_selector: data
- name: BinaryContent
  endpoint:
    path: /from_data_uri
    method: POST
    data_selector: data
    params: {}
- name: BinaryImage
  endpoint:
    path: /BinaryImage
    method: POST
    data_selector: data
    params: {}
- name: ToolReturn
  endpoint:
    path: /ToolReturn
    method: POST
    data_selector: return_value
    params: {}
- name: UserPromptPart
  endpoint:
    path: /UserPromptPart
    method: POST
    data_selector: content
    params: {}
- name: ModelRequest
  endpoint:
    path: /ModelRequest
    method: POST
    data_selector: parts
    params: {}
- name: content
  endpoint:
    path: content
    method: GET
- name: id
  endpoint:
    path: id
    method: GET
- name: part_kind
  endpoint:
    path: part_kind
    method: GET
- name: has_content
  endpoint:
    path: has_content
    method: GET
- name: text
  endpoint:
    path: /text
    method: GET
    data_selector: text
- name: thinking
  endpoint:
    path: /thinking
    method: GET
    data_selector: thinking
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: tool_calls
  endpoint:
    path: /tool_calls
    method: GET
    data_selector: tool_calls
- name: builtin_tool_calls
  endpoint:
    path: /builtin_tool_calls
    method: GET
    data_selector: builtin_tool_calls
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: HandleResponseEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolOutput
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/output.py
    method: GET
    data_selector: records
- name: NativeOutput
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/output.py
    method: GET
    data_selector: records
- name: PromptedOutput
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/output.py
    method: GET
    data_selector: records
- name: TextOutput
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/output.py
    method: GET
    data_selector: records
- name: AgentRunResult
  endpoint:
    path: /pydantic_ai/run
    method: GET
    data_selector: result
- name: AgentRunResultEvent
  endpoint:
    path: /pydantic_ai/event
    method: GET
    data_selector: result
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: function_tools
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: _profile
    params: {}
- name: cohere_model
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: FunctionStreamedResponse
  endpoint:
    path: /pydantic_ai/models/function
    method: GET
    data_selector: records
- name: GoogleModel
  endpoint:
    path: /pydantic_ai/models/google
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dataset
  endpoint:
    path: /datasets
    method: POST
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: POST
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: POST
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: dataset
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: json_schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
    params: {}
- name: ExactMatch
  endpoint:
    path: /pydantic_evals/ExactMatch
    method: GET
    data_selector: records
- name: span_node
  endpoint:
    path: /pydantic_evals/otel/span_tree
    method: GET
    data_selector: nodes
- name: ReportCase
  endpoint:
    path: /reportcase
    method: GET
    data_selector: cases
- name: ReportCaseFailure
  endpoint:
    path: /reportcasefailure
    method: GET
    data_selector: failures
- name: ReportCaseAggregate
  endpoint:
    path: /reportcaseaggregate
    method: GET
    data_selector: aggregate
- name: EvaluationReport
  endpoint:
    path: /evaluationreport
    method: GET
    data_selector: reports
- name: graph
  endpoint:
    path: /pydantic_graph/beta/graph
    method: GET
- name: graph
  endpoint:
    path: /services/data/vXX.X/sobjects/Graph
    method: GET
    data_selector: records
    params: {}
- name: Step
  endpoint:
    path: /pydantic_graph/pydantic_graph/beta/step.py
    method: GET
    data_selector: Step
    params: {}
- name: StreamFunction
  endpoint:
    path: /pydantic_graph/pydantic_graph/beta/step.py
    method: GET
    data_selector: StreamFunction
    params: {}
- name: NodeStep
  endpoint:
    path: /pydantic_graph/pydantic_graph/beta/step.py
    method: GET
    data_selector: NodeStep
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result
- name: jokes
  endpoint:
    path: /jokes
    method: GET
    data_selector: joke
    params:
      count: number_of_jokes
- name: FunctionToolset
  endpoint:
    path: /function_toolset
    method: GET
    data_selector: toolset
    params: {}
- name: Agent
  endpoint:
    path: /agent
    method: GET
    data_selector: agent
    params: {}
- name: get_preferred_language
  endpoint:
    path: /get_preferred_language
    method: GET
    data_selector: response
    params: {}
- name: email_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: output
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /
    method: POST
    data_selector: all_messages
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: AgentRun
  endpoint:
    path: /agent_run
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/mcp_server
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: POST
- name: agent_run
  endpoint:
    path: /run
    method: POST
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: results
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: task
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: result
    params: {}
- name: task_status
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: status
    params: {}
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: result
    params: {}
- name: tools
  endpoint:
    path: /tools
    method: GET
    data_selector: tools
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ModelRequest
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: cohere_model
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
- name: model_request
  endpoint:
    path: /v1/models
    method: POST
    data_selector: models
    params: {}
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
- name: test_model
  endpoint:
    path: /v1/models/test
    method: GET
    data_selector: models
    params: {}
- name: Case
  endpoint:
    path: /dataset/case
    method: POST
    data_selector: case
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: None
    params: {}
- name: Contains
  endpoint:
    path: /Contains
    method: GET
    data_selector: None
    params: {}
- name: Equals
  endpoint:
    path: /Equals
    method: GET
    data_selector: None
    params: {}
- name: EqualsExpected
  endpoint:
    path: /EqualsExpected
    method: GET
    data_selector: None
    params: {}
- name: HasMatchingSpan
  endpoint:
    path: /HasMatchingSpan
    method: GET
    data_selector: None
    params: {}
- name: IsInstance
  endpoint:
    path: /IsInstance
    method: GET
    data_selector: None
    params: {}
- name: LLMJudge
  endpoint:
    path: /LLMJudge
    method: GET
    data_selector: None
    params: {}
- name: MaxDuration
  endpoint:
    path: /MaxDuration
    method: GET
    data_selector: None
    params: {}
- name: Evaluator
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/evaluator.py
    method: GET
    data_selector: records
- name: SpanNode
  endpoint:
    path: /span_node
    method: GET
    data_selector: records
- name: node
  endpoint:
    path: /services/data/vXX.X/nodes
    method: GET
    data_selector: records
    params: {}
- name: edge
  endpoint:
    path: /services/data/vXX.X/edges
    method: GET
    data_selector: records
    params: {}
- name: Decision
  endpoint:
    path: /decision
    method: GET
    data_selector: records
- name: DecisionBranch
  endpoint:
    path: /decision/branch
    method: GET
    data_selector: records
- name: snapshots
  endpoint:
    path: /services/data/vXX.X/sobjects/Snapshot
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: roll_dice
  endpoint:
    path: /dice_game/roll
    method: GET
    data_selector: result
- name: get_player_name
  endpoint:
    path: /dice_game/get_player_name
    method: GET
    data_selector: name
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: output
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
- name: deepseek-chat
  endpoint:
    path: /deepseek-chat
    method: GET
- name: email_writer_agent
  endpoint:
    path: /agents/email_writer
    method: POST
    data_selector: output
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result.output
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: request
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: output
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: output
    params: {}
- name: run_stream_events
  endpoint:
    path: /agent/run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /agent/iter
    method: GET
    data_selector: nodes
    params: {}
- name: AgentRun
  endpoint:
    path: /AgentRun
    method: GET
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/WebSearchTool
    method: GET
    data_selector: web_search_tool
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/CodeExecutionTool
    method: GET
    data_selector: code_execution_tool
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/UrlContextTool
    method: GET
    data_selector: url_context_tool
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/ImageGenerationTool
    method: GET
    data_selector: image_generation_tool
- name: MemoryTool
  endpoint:
    path: /builtin_tools/MemoryTool
    method: GET
    data_selector: memory_tool
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/MCPServerTool
    method: GET
    data_selector: mcp_server_tool
- name: tavily_search_tool
  endpoint:
    path: /tavily
    method: POST
    data_selector: results
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: agent_run
    params: {}
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: result
    params: {}
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
- name: get_task
  endpoint:
    path: /tasks/get
    method: POST
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
- name: push_notification
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
- name: video-url
  endpoint:
    path: /video-url
    method: GET
    data_selector: video
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: data
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: return_value
    params: {}
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/messages/PartStartEvent
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/messages/PartDeltaEvent
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/messages/FinalResultEvent
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolCallEvent
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolResultEvent
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolCallEvent
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolResultEvent
    method: GET
    data_selector: records
- name: HandleResponseEvent
  endpoint:
    path: /pydantic_ai/messages/HandleResponseEvent
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai/messages/AgentStreamEvent
    method: GET
    data_selector: records
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: result
    params: {}
- name: max_tokens
  endpoint:
    path: /max_tokens
    method: GET
    data_selector: tokens
    params: {}
- name: temperature
  endpoint:
    path: /temperature
    method: GET
    data_selector: temperature
    params: {}
- name: top_p
  endpoint:
    path: /top_p
    method: GET
    data_selector: top_p
    params: {}
- name: timeout
  endpoint:
    path: /timeout
    method: GET
    data_selector: timeout
    params: {}
- name: parallel_tool_calls
  endpoint:
    path: /parallel_tool_calls
    method: GET
    data_selector: parallel
    params: {}
- name: seed
  endpoint:
    path: /seed
    method: GET
    data_selector: seed
    params: {}
- name: presence_penalty
  endpoint:
    path: /presence_penalty
    method: GET
    data_selector: presence
    params: {}
- name: frequency_penalty
  endpoint:
    path: /frequency_penalty
    method: GET
    data_selector: frequency
    params: {}
- name: logit_bias
  endpoint:
    path: /logit_bias
    method: GET
    data_selector: logit_bias
    params: {}
- name: stop_sequences
  endpoint:
    path: /stop_sequences
    method: GET
    data_selector: stop_sequences
    params: {}
- name: extra_headers
  endpoint:
    path: /extra_headers
    method: GET
    data_selector: extra_headers
    params: {}
- name: extra_body
  endpoint:
    path: /extra_body
    method: GET
    data_selector: extra_body
    params: {}
- name: model_request_parameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: records
    params: {}
- name: model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: records
    params: {}
- name: cohere_model
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: FallbackModel
  endpoint:
    method: POST
- name: FunctionModel
  endpoint:
    method: POST
- name: Google GenAI
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: mistral_model
  endpoint:
    path: /models/mistral
    method: GET
    data_selector: models
    params: {}
- name: test_model
  endpoint:
    path: /models/test
    method: GET
    data_selector: data
    params: {}
- name: case
  endpoint:
    path: /case
    method: POST
    data_selector: case_data
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: POST
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: dataset
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: json_schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /pydantic_evals/increment_eval_metric
    method: POST
    data_selector: None
    params: {}
- name: Contains
  endpoint:
    path: /pydantic_evals/Contains
    method: GET
    data_selector: None
    params: {}
- name: Equals
  endpoint:
    path: /pydantic_evals/Equals
    method: GET
    data_selector: None
    params: {}
- name: EqualsExpected
  endpoint:
    path: /pydantic_evals/EqualsExpected
    method: GET
    data_selector: None
    params: {}
- name: HasMatchingSpan
  endpoint:
    path: /pydantic_evals/HasMatchingSpan
    method: GET
    data_selector: None
    params: {}
- name: IsInstance
  endpoint:
    path: /pydantic_evals/IsInstance
    method: GET
    data_selector: None
    params: {}
- name: LLMJudge
  endpoint:
    path: /pydantic_evals/LLMJudge
    method: GET
    data_selector: None
    params: {}
- name: MaxDuration
  endpoint:
    path: /pydantic_evals/MaxDuration
    method: GET
    data_selector: None
    params: {}
- name: Evaluator
  endpoint:
    path: /evaluators
    method: GET
    data_selector: evaluators
- name: SpanNode
  endpoint:
    path: /pydantic_evals/pydantic_evals/otel/span_tree.py
    method: GET
    data_selector: nodes
    params: {}
- name: graph
  endpoint:
    path: /api/v1/graph
    method: POST
    data_selector: graphData
    params: {}
- name: GraphTask
  endpoint:
    path: /graph/task
    method: POST
    data_selector: task_data
- name: GraphRun
  endpoint:
    path: /graph/run
    method: POST
    data_selector: run_data
- name: Graph
  endpoint:
    path: /pydantic_graph/graph
    method: GET
    data_selector: nodes
    params: {}
- name: graph
  endpoint:
    path: /mermaid/graph
    method: POST
    data_selector: diagram
    params: {}
- name: image
  endpoint:
    path: /mermaid/image
    method: POST
    data_selector: image
    params: {}
- name: support_agent
  endpoint:
    path: /api/agent
    method: POST
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: output
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: POST
    data_selector: output
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: text
- name: sum
  endpoint:
    path: /foobar
    method: GET
    data_selector: output
    params: {}
- name: greet
  endpoint:
    path: /greet
    method: GET
    data_selector: output
    params: {}
- name: foobar
  endpoint:
    path: /path/to/foobar
    method: GET
    data_selector: records
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: email_writer_agent
  endpoint:
    path: /email/writer
    method: POST
    data_selector: result
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: AgentRun
  endpoint:
    path: /pydantic_ai/agent/abstract.py
    method: GET
- name: WebSearchTool
  endpoint:
    params:
      search_context_size: medium
      kind: web_search
- name: CodeExecutionTool
  endpoint:
    params:
      kind: code_execution
- name: UrlContextTool
  endpoint:
    params:
      kind: url_context
- name: ImageGenerationTool
  endpoint:
    params:
      background: auto
      kind: image_generation
- name: MemoryTool
  endpoint:
    params:
      kind: memory
- name: MCPServerTool
  endpoint:
    params:
      kind: mcp_server
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: wrapped_request_step
  endpoint:
    method: GET
- name: wrapped_request_stream_step
  endpoint:
    method: GET
- name: agent_run
  endpoint:
    path: /api/agent/run
    method: POST
    data_selector: output
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: VideoUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: AudioUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: ImageUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: DocumentUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: BinaryContent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: BinaryContent
  endpoint:
    path: /from_data_uri
    method: POST
    data_selector: data
    params: {}
- name: BinaryImage
  endpoint:
    path: /BinaryImage
    method: POST
    data_selector: data
    params: {}
- name: ToolReturn
  endpoint:
    path: /ToolReturn
    method: POST
    data_selector: data
    params: {}
- name: UserPromptPart
  endpoint:
    path: /UserPromptPart
    method: POST
    data_selector: data
    params: {}
- name: RetryPromptPart
  endpoint:
    path: /RetryPromptPart
    method: POST
    data_selector: data
    params: {}
- name: ModelRequest
  endpoint:
    path: /ModelRequest
    method: POST
    data_selector: data
    params: {}
- name: ThinkingPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: FilePart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
- name: BaseToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
- name: ToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
- name: BuiltinToolCallPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: provider_name
- name: ModelResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: parts
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: index
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: index
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: tool_name
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: part
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: result
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: part
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: result
- name: FallbackModel
  endpoint:
    path: /models/fallback
    method: POST
    data_selector: models
- name: FunctionModel
  endpoint:
    path: /models/function
    method: POST
    data_selector: function
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: request
  endpoint:
    path: /request
    method: POST
- name: request_stream
  endpoint:
    path: /request_stream
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: evaluator
  endpoint:
    path: /pydantic_evals/evaluators
    method: GET
    data_selector: evaluators
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: POST
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: dataset
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: json_schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
    params: {}
- name: span
  endpoint:
    path: /spans
    method: GET
    data_selector: records
    params: {}
- name: ReportCase
  endpoint:
    path: /pydantic_evals/reporting/report_case
    method: GET
    data_selector: cases
    params: {}
- name: ReportCaseFailure
  endpoint:
    path: /pydantic_evals/reporting/report_case_failure
    method: GET
    data_selector: failures
    params: {}
- name: EvaluationReport
  endpoint:
    path: /pydantic_evals/reporting/evaluation_report
    method: GET
    data_selector: reports
    params: {}
- name: console_table
  endpoint:
    path: /console_table
    method: POST
- name: failures_table
  endpoint:
    path: /failures_table
    method: POST
- name: __str__
  endpoint:
    path: /__str__
    method: GET
- name: Graph
  endpoint:
    path: /pydantic_graph/beta/graph
    method: GET
    data_selector: nodes
    params: {}
- name: EndNode
  endpoint:
    path: /pydantic_graph/beta/node/EndNode
    method: GET
    data_selector: EndNode
    params: {}
- name: StartNode
  endpoint:
    path: /pydantic_graph/beta/node/StartNode
    method: GET
    data_selector: StartNode
    params: {}
- name: StepContext
  endpoint:
    path: /pydantic_graph/beta/step/StepContext
    method: GET
    data_selector: StepContext
    params: {}
- name: StepNode
  endpoint:
    path: /pydantic_graph/beta/step/StepNode
    method: GET
    data_selector: StepNode
    params: {}
- name: GraphTask
  endpoint:
    path: /pydantic_graph/beta/graph
    method: GET
    data_selector: task
    params: {}
- name: GraphRun
  endpoint:
    path: /pydantic_graph/beta/graph_run
    method: GET
    data_selector: run
    params: {}
- name: JoinState
  endpoint:
    path: /pydantic_graph/beta/join
    method: GET
    data_selector: JoinState
    params: {}
- name: ReducerContext
  endpoint:
    path: /pydantic_graph/beta/join
    method: GET
    data_selector: ReducerContext
    params: {}
- name: StartNode
  endpoint:
    path: /pydantic_graph/beta/node
    method: GET
    data_selector: StartNode
    params: {}
- name: EndNode
  endpoint:
    path: /pydantic_graph/beta/node
    method: GET
    data_selector: EndNode
    params: {}
- name: Fork
  endpoint:
    path: /pydantic_graph/beta/node
    method: GET
    data_selector: Fork
    params: {}
- name: StepContext
  endpoint:
    path: /pydantic_graph/beta/step
    method: GET
    data_selector: StepContext
    params: {}
- name: NodeSnapshot
  endpoint:
    path: /pydantic_graph/persistence/NodeSnapshot
    method: GET
    data_selector: state
    params: {}
- name: EndSnapshot
  endpoint:
    path: /pydantic_graph/persistence/EndSnapshot
    method: GET
    data_selector: result
    params: {}
- name: FileStatePersistence
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/file.py
    method: GET
    data_selector: snapshots
    params: {}
- name: evaluation_summary
  endpoint:
    path: /evaluate_sync
    method: POST
    data_selector: report
    params: {}
- name: restaurant_booking
  endpoint:
    path: /elicit
    method: POST
    data_selector: booking_details
    params: {}
- name: agent
  endpoint:
    path: /ag_ui/agent
    method: GET
    data_selector: agents
    params: {}
- name: event
  endpoint:
    path: /ag_ui/event
    method: POST
    data_selector: events
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historicWeather
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
    params: {}
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: output
    params: {}
- name: seat_preference
  endpoint:
    path: /seat_preference
    method: GET
    data_selector: output
    params: {}
- name: deferred_tool_requests
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
- name: groq
  endpoint:
    path: /groq-models
    method: GET
- name: huggingface
  endpoint:
    path: /huggingface-models
    method: GET
- name: mistral
  endpoint:
    path: /mistral-models
    method: GET
- name: openai
  endpoint:
    path: /openai-models
    method: GET
- name: deepseek-chat
  endpoint:
    path: /deepseek-chat
    method: GET
- name: GraphRunContext
  endpoint:
    path: /graph/run/context
    method: GET
    data_selector: context
    params: {}
- name: BaseNode
  endpoint:
    path: /graph/node
    method: GET
    data_selector: nodes
    params: {}
- name: Graph
  endpoint:
    path: /graph
    method: GET
    data_selector: graphs
    params: {}
- name: count_down
  endpoint:
    path: /count_down
    method: GET
    data_selector: records
    params: {}
- name: question_graph
  endpoint:
    path: /question_graph
    method: GET
    data_selector: records
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: request
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /stream/events
    method: GET
    data_selector: events
- name: AgentRunResultEvent
  endpoint:
    path: /run/result
    method: GET
    data_selector: result
- name: GraphRunContext
  endpoint:
    path: /ctx
    method: GET
- name: next_node
  endpoint:
    path: /next_node
    method: GET
- name: result
  endpoint:
    path: /result
    method: GET
- name: __aiter__
  endpoint:
    path: /__aiter__
    method: GET
- name: __anext__
  endpoint:
    path: /__anext__
    method: GET
- name: next
  endpoint:
    path: /next
    method: POST
- name: usage
  endpoint:
    path: /usage
    method: GET
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
    data_selector: tool_properties
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
    data_selector: tool_properties
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
    data_selector: tool_properties
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
    data_selector: tool_properties
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
    data_selector: tool_properties
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
    data_selector: tool_properties
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: agent_run
  endpoint:
    path: /run
    method: POST
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: VideoUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: url
    params: {}
- name: AudioUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: url
    params: {}
- name: ImageUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: url
    params: {}
- name: DocumentUrl
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: url
    params: {}
- name: BinaryContent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: data
    params: {}
- name: thinking_part
  endpoint:
    path: /pydantic_ai/messages/thinking
    method: GET
    data_selector: content
- name: file_part
  endpoint:
    path: /pydantic_ai/messages/file
    method: GET
    data_selector: content
- name: base_tool_call_part
  endpoint:
    path: /pydantic_ai/messages/base_tool_call
    method: GET
    data_selector: content
- name: tool_call_part
  endpoint:
    path: /pydantic_ai/messages/tool_call
    method: GET
    data_selector: content
- name: builtin_tool_call_part
  endpoint:
    path: /pydantic_ai/messages/builtin_tool_call
    method: GET
    data_selector: content
- name: model_response_part
  endpoint:
    path: /pydantic_ai/messages/model_response
    method: GET
    data_selector: content
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: index, part, event_kind
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: index, delta, event_kind
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name, tool_call_id, event_kind
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: part, event_kind, tool_call_id
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: result, content, event_kind, tool_call_id
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: part, event_kind
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: result, event_kind
    params: {}
- name: HandleResponseEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: event_kind
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: event_kind
    params: {}
- name: agent_run_result
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
    params: {}
- name: bedrock_models
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: bedrock_converse
  endpoint:
    path: /converse
    method: POST
    data_selector: response
- name: FallbackModel
  endpoint:
    path: /models/fallback
    method: GET
- name: FunctionModel
  endpoint:
    path: /models/function
    method: GET
- name: LatestGoogleModelNames
  endpoint:
    path: /latest/google/models
    method: GET
    data_selector: models
- name: GeminiStreamedResponse
  endpoint:
    path: /services/data/vXX.X/sobjects/GeminiStreamedResponse
    method: GET
    data_selector: records
    params: {}
- name: GroqModel
  endpoint:
    path: /services/data/vXX.X/sobjects/GroqModel
    method: GET
    data_selector: records
    params: {}
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: model_name
  endpoint:
    path: /services/data/vXX.X/sobjects/ModelName
    method: GET
    data_selector: records
    params: {}
- name: TestModel
  endpoint:
    path: /test/model
    method: GET
    data_selector: model_name
    params: {}
- name: dataset
  endpoint:
    path: /datasets
    method: GET
    data_selector: cases
- name: Dataset
  endpoint:
    path: pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: records
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: GET
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: dataset
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: schema
    params: {}
- name: SpanNode
  endpoint:
    path: /pydantic_evals/pydantic_evals/otel/span_tree.py
    method: GET
    data_selector: SpanNode
    params: {}
- name: SpanTree
  endpoint:
    path: /pydantic_evals/pydantic_evals/otel/span_tree.py
    method: GET
    data_selector: SpanTree
    params: {}
- name: ReportCase
  endpoint:
    path: /report/case
    method: GET
    data_selector: cases
- name: ReportCaseFailure
  endpoint:
    path: /report/case/failure
    method: GET
    data_selector: failures
- name: ReportCaseAggregate
  endpoint:
    path: /report/case/aggregate
    method: GET
    data_selector: aggregate
- name: EvaluationReport
  endpoint:
    path: /evaluation/report
    method: GET
    data_selector: reports
- name: console_table
  endpoint:
    path: /pydantic_evals/pydantic_evals/reporting/__init__.py
    method: GET
    data_selector: renderer.build_table
    params: {}
- name: failures_table
  endpoint:
    path: /pydantic_evals/pydantic_evals/reporting/__init__.py
    method: GET
    data_selector: renderer.build_failures_table
    params: {}
- name: Decision
  endpoint:
    path: /pydantic_graph/beta/decision
    method: GET
    data_selector: records
- name: DecisionBranch
  endpoint:
    path: /pydantic_graph/beta/decision_branch
    method: GET
    data_selector: records
- name: GraphTask
  endpoint:
    path: /pydantic_graph/beta/graph.py
    method: GET
    data_selector: GraphTask
    params: {}
- name: GraphRun
  endpoint:
    path: /pydantic_graph/beta/graph.py
    method: GET
    data_selector: GraphRun
    params: {}
- name: GraphRunResult
  endpoint:
    path: /pydantic_graph/graph.py
    method: GET
    data_selector: output
    params: {}
- name: node
  endpoint:
    path: /nodes
    method: GET
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic_data
    params: {}
- name: mcp_server
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /direct/model_request
    method: POST
    data_selector: response
    params: {}
- name: model_request_sync
  endpoint:
    path: /direct/model_request_sync
    method: POST
    data_selector: response
    params: {}
- name: model_request_stream
  endpoint:
    path: /direct/model_request_stream
    method: POST
    data_selector: response
    params: {}
- name: model_request_stream_sync
  endpoint:
    path: /direct/model_request_stream_sync
    method: POST
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: results
- name: result
  endpoint:
    path: /result
    method: GET
    data_selector: output
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: POST
    data_selector: output
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
- name: flight_search
  endpoint:
    path: /flight_search
    method: POST
    data_selector: output
- name: seat_preference
  endpoint:
    path: /seat_preference
    method: POST
    data_selector: output
- name: foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /chat
    method: POST
- name: vending_machine
  endpoint:
    path: /vending_machine
    method: POST
    data_selector: result
    params: {}
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: POST
    data_selector: result
    params: {}
- name: CountDown
  endpoint:
    path: /count_down
    method: GET
    data_selector: records
    params: {}
- name: Question
  endpoint:
    path: /question
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: AgentStreamEvent | AgentRunResultEvent
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: AgentRun
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: GET
    data_selector: results
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: results
- name: agent_run
  endpoint:
    path: /api/agent/run
    method: POST
    data_selector: result
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/WebSearchTool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/CodeExecutionTool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/UrlContextTool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/ImageGenerationTool
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/MemoryTool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/MCPServerTool
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params: {}
- name: ModelResponseStreamEvent
  endpoint:
    path: /pydantic_ai/stream_event
    method: GET
    data_selector: events
- name: ModelResponse
  endpoint:
    path: /pydantic_ai/model_response
    method: GET
    data_selector: response
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dbos_agent
  endpoint:
    path: /dbos/agent
    method: POST
    data_selector: data
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: result
- name: PrefectFunctionToolset
  endpoint:
    path: /pydantic_ai/PrefectFunctionToolset
    method: GET
    data_selector: result
- name: PrefectMCPServer
  endpoint:
    path: /pydantic_ai/PrefectMCPServer
    method: GET
    data_selector: result
- name: PrefectModel
  endpoint:
    path: /pydantic_ai/PrefectModel
    method: GET
    data_selector: result
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: HEAD
    data_selector: null
    params: {}
- name: agent_run
  endpoint:
    path: /
    method: POST
    data_selector: null
    params: {}
- name: docs
  endpoint:
    path: /docs
    method: GET
    data_selector: null
    params: {}
- name: task
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: tasks
    params: {}
- name: task_status
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: status
    params: {}
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: DELETE
    data_selector: result
    params: {}
- name: message/send
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: tasks/get
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: tasks/cancel
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: tasks/pushNotification/set
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: tasks/pushNotification/get
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: tasks/resubscribe
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: tasks/pushNotificationConfig/list
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: tasks/pushNotificationConfig/delete
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: index, part, event_kind
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: index, delta, event_kind
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: tool_name, tool_call_id, event_kind
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: part, event_kind
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: result, content, event_kind
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: part, event_kind
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: result, event_kind
    params: {}
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: GET
    data_selector: event_kind
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: event_kind
    params: {}
- name: ToolOutput
  endpoint:
    path: /ToolOutput
    method: GET
    data_selector: output, name, description, max_retries, strict
    params: {}
- name: NativeOutput
  endpoint:
    path: /NativeOutput
    method: GET
    data_selector: outputs, name, description, strict
    params: {}
- name: PromptedOutput
  endpoint:
    path: /PromptedOutput
    method: GET
    data_selector: outputs, name, description, template
    params: {}
- name: TextOutput
  endpoint:
    path: /TextOutput
    method: GET
    data_selector: output_function
    params: {}
- name: agent_run_result
  endpoint:
    path: /pydantic_ai/agent_run_result
    method: GET
    data_selector: result
    params: {}
- name: DeferredToolRequests
  endpoint:
    path: /deferred-tool-requests
    method: GET
    data_selector: calls
    params: {}
- name: ToolApproved
  endpoint:
    path: /tool-approved
    method: POST
    data_selector: override_args
    params: {}
- name: ToolDenied
  endpoint:
    path: /tool-denied
    method: POST
    data_selector: message
    params: {}
- name: DeferredToolResults
  endpoint:
    path: /deferred-tool-results
    method: GET
    data_selector: calls
    params: {}
- name: ModelRequestParameters
  endpoint:
    path: /dataclass/ModelRequestParameters
    method: GET
    data_selector: records
    params: {}
- name: Model
  endpoint:
    path: /dataclass/Model
    method: GET
    data_selector: records
    params: {}
- name: cohere_model
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: model_name
  endpoint:
    path: /models/groq
    method: GET
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: mistral_model
  endpoint:
    path: /models/mistral
    method: GET
    data_selector: models
    params: {}
- name: tool_definition
  endpoint:
    path: /v1/tools
    method: GET
    data_selector: tools
    params: {}
- name: model_response
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: Case
  endpoint:
    path: /pydantic_evals/case
    method: POST
    data_selector: case
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: dataset
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: cases
    params: {}
- name: Contains
  endpoint:
    path: /pydantic_evals/evaluators/Contains
    method: GET
    data_selector: records
    params: {}
- name: Equals
  endpoint:
    path: /pydantic_evals/evaluators/Equals
    method: GET
    data_selector: records
    params: {}
- name: EqualsExpected
  endpoint:
    path: /pydantic_evals/evaluators/EqualsExpected
    method: GET
    data_selector: records
    params: {}
- name: HasMatchingSpan
  endpoint:
    path: /pydantic_evals/evaluators/HasMatchingSpan
    method: GET
    data_selector: records
    params: {}
- name: IsInstance
  endpoint:
    path: /pydantic_evals/evaluators/IsInstance
    method: GET
    data_selector: records
    params: {}
- name: LLMJudge
  endpoint:
    path: /pydantic_evals/evaluators/LLMJudge
    method: GET
    data_selector: records
    params: {}
- name: MaxDuration
  endpoint:
    path: /pydantic_evals/evaluators/MaxDuration
    method: GET
    data_selector: records
    params: {}
- name: EvaluatorFailure
  endpoint:
    path: /pydantic_evals/evaluators/evaluator.py
    method: GET
    data_selector: records
- name: EvaluatorOutput
  endpoint:
    path: /pydantic_evals/evaluators/evaluator.py
    method: GET
    data_selector: records
- name: EvaluatorSpec
  endpoint:
    path: /pydantic_evals/evaluators/spec.py
    method: GET
    data_selector: records
- name: judge_output
  endpoint:
    path: /judge/output
    method: POST
    data_selector: output
    params: {}
- name: judge_input_output
  endpoint:
    path: /judge/input/output
    method: POST
    data_selector: output
    params: {}
- name: judge_output_expected
  endpoint:
    path: /judge/output/expected
    method: POST
    data_selector: output
    params: {}
- name: judge_input_output_expected
  endpoint:
    path: /judge/input/output/expected
    method: POST
    data_selector: output
    params: {}
- name: generate_dataset
  endpoint:
    path: /generate/dataset
    method: POST
    data_selector: dataset
    params:
      n_examples: 3
- name: SpanNode
  endpoint:
    path: /pydantic_evals/pydantic_evals/otel/span_tree.py
    method: GET
    data_selector: nodes
    params: {}
- name: ReportCase
  endpoint:
    path: /report/case
    method: GET
    data_selector: cases
    params: {}
- name: ReportCaseFailure
  endpoint:
    path: /report/case/failure
    method: GET
    data_selector: failures
    params: {}
- name: EvaluationReport
  endpoint:
    path: /report/evaluation
    method: GET
    data_selector: evaluation_reports
    params: {}
- name: report
  endpoint:
    path: /report
    method: GET
- name: Graph
  endpoint:
    path: /graph
    method: GET
    data_selector: nodes
- name: graph_task
  endpoint:
    path: /graph/task
    method: POST
    data_selector: task
- name: graph_run
  endpoint:
    path: /graph/run
    method: POST
    data_selector: run
- name: Step
  endpoint:
    path: /pydantic_graph/step
    method: GET
    data_selector: records
- name: Graph
  endpoint:
    path: /pydantic_graph/graph
    method: GET
    data_selector: records
- name: mermaid_image
  endpoint:
    path: /mermaid/image
    method: POST
    data_selector: image_bytes
    params:
      infer_name: true
- name: mermaid_save
  endpoint:
    path: /mermaid/save
    method: POST
    data_selector: save_status
    params:
      infer_name: true
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: result
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: forecast
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: output
    params: {}
- name: deferred_toolset
  endpoint:
    path: /deferred-tools
    method: GET
    data_selector: results
- name: run_agent
  endpoint:
    path: /run/agent
    method: POST
    data_selector: result
- name: CountDown
  endpoint:
    path: /count_down
    method: GET
    data_selector: records
- name: EmailFeedback
  endpoint:
    path: /email_feedback
    method: POST
    data_selector: records
- name: Question
  endpoint:
    path: /question
    method: GET
    data_selector: records
- name: WebSearchTool
  endpoint:
    path: /web/search
    method: POST
- name: CodeExecutionTool
  endpoint:
    path: /code/execute
    method: POST
- name: UrlContextTool
  endpoint:
    path: /url/context
    method: POST
- name: ImageGenerationTool
  endpoint:
    path: /image/generate
    method: POST
- name: MemoryTool
  endpoint:
    path: /memory/use
    method: POST
- name: MCPServerTool
  endpoint:
    path: /mcp/server
    method: POST
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: iter
  endpoint:
    path: /pydantic_ai/Agent/iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /pydantic_ai/Agent/override
    method: GET
    data_selector: overrides
    params: {}
- name: DBOSMCPServer
  endpoint:
    path: /pydantic_ai/DBOSMCPServer
    method: GET
    data_selector: mcp_server
    params: {}
- name: DBOSModel
  endpoint:
    path: /pydantic_ai/DBOSModel
    method: GET
    data_selector: dbos_model
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: BinaryContent
  endpoint:
    path: /from_data_uri
    method: POST
    data_selector: content
    params: {}
- name: BinaryImage
  endpoint:
    path: /BinaryImage
    method: POST
    data_selector: content
    params: {}
- name: ToolReturn
  endpoint:
    path: /ToolReturn
    method: POST
    data_selector: content
    params: {}
- name: UserPromptPart
  endpoint:
    path: /UserPromptPart
    method: POST
    data_selector: content
    params: {}
- name: content
  endpoint:
    path: content
    method: GET
- name: id
  endpoint:
    path: id
    method: GET
- name: part_kind
  endpoint:
    path: part_kind
    method: GET
- name: has_content
  endpoint:
    path: has_content
    method: GET
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: GET
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
- name: OutputDataT
  endpoint:
    path: /OutputDataT
    method: GET
- name: ToolOutput
  endpoint:
    path: /ToolOutput
    method: GET
- name: NativeOutput
  endpoint:
    path: /NativeOutput
    method: GET
- name: PromptedOutput
  endpoint:
    path: /PromptedOutput
    method: GET
- name: TextOutput
  endpoint:
    path: /TextOutput
    method: GET
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: function_tools
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: settings
    params: {}
- name: cohere_model
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
    params: {}
- name: production_groq_model_names
  endpoint:
    path: /models/production
    method: GET
    data_selector: models
- name: preview_groq_model_names
  endpoint:
    path: /models/preview
    method: GET
    data_selector: models
- name: model_name
  endpoint:
    path: /services/data/vXX.X/sobjects/model_name
    method: GET
    data_selector: records
    params: {}
- name: OpenAIModel
  endpoint:
    path: /openai/model
    method: POST
    data_selector: model_name
- name: OpenAIResponsesModel
  endpoint:
    path: /openai/responses
    method: POST
    data_selector: responses
- name: builtin_tools
  endpoint:
    path: /tools/builtin
    method: GET
    data_selector: tools
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: cases
    params: {}
- name: ExactMatch
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: GradingOutput
  endpoint:
    path: /grading/output
    method: GET
    data_selector: records
- name: judge_output
  endpoint:
    path: /judge/output
    method: POST
    data_selector: records
- name: judge_input_output
  endpoint:
    path: /judge/input/output
    method: POST
    data_selector: records
- name: set_default_judge_model
  endpoint:
    path: /judge/default/model
    method: POST
    data_selector: records
- name: span
  endpoint:
    path: /span
    method: GET
    data_selector: records
- name: Graph
  endpoint:
    path: /pydantic_graph/beta/graph
    method: GET
    data_selector: nodes
    params: {}
- name: Node
  endpoint:
    path: /nodes
    method: GET
    data_selector: records
- name: Edge
  endpoint:
    path: /edges
    method: GET
    data_selector: records
- name: decision_node
  endpoint:
    path: /pydantic_graph/beta/decision
    method: GET
    data_selector: decision
    params: {}
- name: DecisionBranchBuilder
  endpoint:
    path: /pydantic_graph/beta/decision
    method: GET
    data_selector: records
    params: {}
- name: Graph
  endpoint:
    path: /pydantic_graph/beta/graph
    method: GET
    data_selector: records
    params: {}
- name: GraphTask
  endpoint:
    path: /GraphTask
    method: POST
    data_selector: task
- name: GraphRun
  endpoint:
    path: /GraphRun
    method: POST
    data_selector: run
- name: StartNode
  endpoint:
    path: /__start__
    method: GET
    data_selector: id
    params: {}
- name: EndNode
  endpoint:
    path: /__end__
    method: GET
    data_selector: id
    params: {}
- name: graph
  endpoint:
    path: /pydantic_graph/graph
    method: GET
    data_selector: nodes
    params: {}
- name: NodeIdent
  endpoint:
    path: /NodeIdent
    method: GET
- name: StateT
  endpoint:
    path: /StateT
    method: GET
- name: GraphRunContext
  endpoint:
    path: /GraphRunContext
    method: GET
- name: BaseNode
  endpoint:
    path: /BaseNode
    method: GET
- name: End
  endpoint:
    path: /End
    method: GET
- name: NodeSnapshot
  endpoint:
    path: /NodeSnapshot
    method: GET
- name: EndSnapshot
  endpoint:
    path: /EndSnapshot
    method: GET
- name: snapshot_node
  endpoint:
    path: /snapshot_node
    method: POST
    data_selector: NodeSnapshot
    params: {}
- name: snapshot_node_if_new
  endpoint:
    path: /snapshot_node_if_new
    method: POST
    data_selector: NodeSnapshot
    params: {}
- name: snapshot_end
  endpoint:
    path: /snapshot_end
    method: POST
    data_selector: EndSnapshot
    params: {}
- name: record_run
  endpoint:
    path: /record_run
    method: POST
    data_selector: NodeSnapshot
    params: {}
- name: load_next
  endpoint:
    path: /load_next
    method: GET
    data_selector: NodeSnapshot
    params: {}
- name: load_all
  endpoint:
    path: /load_all
    method: GET
    data_selector: Snapshot
    params: {}
- name: FileStatePersistence
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/file.py
    method: GET
    data_selector: snapshots
    params: {}
- name: EvaluationReport
  endpoint:
    path: /evaluate_sync
    method: GET
    data_selector: report
- name: mcp_servers
  endpoint:
    path: /mcp_servers
    method: GET
    data_selector: servers
- name: DocumentState
  endpoint:
    path: /ag_ui_state
    method: GET
    data_selector: state
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: forecast
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result
- name: sum
  endpoint:
    path: /sum
    method: GET
    data_selector: output
    params: {}
- name: hitchhiker
  endpoint:
    path: /hitchhiker
    method: GET
    data_selector: output
    params: {}
- name: greet
  endpoint:
    path: /greet
    method: GET
    data_selector: output
    params: {}
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: output
    params: {}
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: output
    params: {}
- name: foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: deferred_toolset
  endpoint:
    path: /deferred_toolset
    method: POST
    data_selector: result
    params: {}
- name: deepseek-chat
  endpoint:
    path: /model
    method: POST
- name: run_ag_ui
  endpoint:
    path: /pydantic_ai/run_ag_ui
    method: POST
    data_selector: StreamingResponse
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: next_node
  endpoint:
    path: /next
    method: GET
    data_selector: result
- name: result
  endpoint:
    path: /result
    method: GET
    data_selector: output
- name: messages_to_otel_events
  endpoint:
    path: /messages_to_otel_events
    method: POST
    data_selector: events
- name: EventStreamHandler
  endpoint:
    path: /EventStreamHandler
    method: GET
    data_selector: events
- name: tavily_search
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: content
  endpoint:
    path: content
    method: GET
- name: id
  endpoint:
    path: id
    method: GET
- name: part_kind
  endpoint:
    path: part_kind
    method: GET
- name: has_content
  endpoint:
    path: has_content
    method: GET
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: records
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: records
- name: agent_run_result
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
- name: max_tokens
  endpoint:
    path: /max_tokens
    method: GET
- name: temperature
  endpoint:
    path: /temperature
    method: GET
- name: top_p
  endpoint:
    path: /top_p
    method: GET
- name: timeout
  endpoint:
    path: /timeout
    method: GET
- name: parallel_tool_calls
  endpoint:
    path: /parallel_tool_calls
    method: GET
- name: seed
  endpoint:
    path: /seed
    method: GET
- name: presence_penalty
  endpoint:
    path: /presence_penalty
    method: GET
- name: frequency_penalty
  endpoint:
    path: /frequency_penalty
    method: GET
- name: logit_bias
  endpoint:
    path: /logit_bias
    method: GET
- name: stop_sequences
  endpoint:
    path: /stop_sequences
    method: GET
- name: extra_headers
  endpoint:
    path: /extra_headers
    method: GET
- name: extra_body
  endpoint:
    path: /extra_body
    method: GET
- name: KnownModelName
  endpoint:
    path: /pydantic_ai/models/known_model_name
    method: GET
    data_selector: model_names
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai/models/model_request_parameters
    method: GET
    data_selector: parameters
- name: FallbackModel
  endpoint:
    path: /pydantic_ai/models/fallback
    method: GET
    data_selector: models
    params: {}
- name: FunctionModel
  endpoint:
    path: /pydantic_ai/models/function
    method: GET
    data_selector: models
    params: {}
- name: FunctionStreamedResponse
  endpoint:
    path: /pydantic_ai/models/function.py
    method: GET
    data_selector: ''
- name: GoogleModel
  endpoint:
    path: /pydantic_ai/models/google.py
    method: GET
    data_selector: ''
- name: groq_model
  endpoint:
    path: /models/groq
    method: POST
    data_selector: response
    params: {}
- name: MCPSamplingModel
  endpoint:
    path: /mcp/sampling
    method: POST
    data_selector: records
- name: MistralModel
  endpoint:
    path: /mistral
    method: POST
    data_selector: records
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: records
    params: {}
- name: TestModel
  endpoint:
    path: /pydantic_ai/models/test
    method: GET
    data_selector: records
- name: Case
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: records
- name: dataset
  endpoint:
    path: /datasets
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: POST
    data_selector: None
- name: Contains
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/common.py
    method: POST
    data_selector: None
- name: Equals
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/common.py
    method: POST
    data_selector: None
- name: EqualsExpected
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/common.py
    method: POST
    data_selector: None
- name: HasMatchingSpan
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/common.py
    method: POST
    data_selector: None
- name: IsInstance
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/common.py
    method: POST
    data_selector: None
- name: LLMJudge
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/common.py
    method: POST
    data_selector: None
- name: MaxDuration
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/common.py
    method: POST
    data_selector: None
- name: SpanNode
  endpoint:
    path: /services/data/vXX.X/sobjects/SpanNode
    method: GET
    data_selector: records
- name: SpanQuery
  endpoint:
    path: /services/data/vXX.X/sobjects/SpanQuery
    method: GET
    data_selector: records
- name: SpanTree
  endpoint:
    path: /services/data/vXX.X/sobjects/SpanTree
    method: GET
    data_selector: records
- name: report_case
  endpoint:
    path: /report_case
    method: GET
    data_selector: records
- name: report_case_failure
  endpoint:
    path: /report_case_failure
    method: GET
    data_selector: records
- name: report_case_aggregate
  endpoint:
    path: /report_case_aggregate
    method: GET
    data_selector: records
- name: evaluation_report
  endpoint:
    path: /evaluation_report
    method: GET
    data_selector: records
- name: console_table
  endpoint:
    path: /console_table
    method: POST
    data_selector: data
    params: {}
- name: failures_table
  endpoint:
    path: /failures_table
    method: POST
    data_selector: failures
    params: {}
- name: Decision
  endpoint:
    path: /decision
    method: GET
    data_selector: records
    params: {}
- name: DecisionBranch
  endpoint:
    path: /decision_branch
    method: GET
    data_selector: records
    params: {}
- name: GraphTask
  endpoint:
    path: /pydantic_graph/beta/graph
    method: GET
    data_selector: GraphTask
- name: GraphRun
  endpoint:
    path: /pydantic_graph/beta/graph_run
    method: GET
    data_selector: GraphRun
- name: GraphBuilder
  endpoint:
    path: /pydantic_graph/beta/graph_builder
    method: GET
    data_selector: GraphBuilder
- name: Step
  endpoint:
    path: /pydantic_graph/step
    method: GET
    data_selector: steps
    params: {}
- name: NodeStep
  endpoint:
    path: /pydantic_graph/node_step
    method: GET
    data_selector: node_steps
    params: {}
- name: EndSnapshot
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/__init__.py
    method: GET
    data_selector: records
    params: {}
- name: FileStatePersistence
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/file.py
    method: GET
    data_selector: records
    params: {}
- name: FullStatePersistence
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/in_mem.py
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: GET
    data_selector: records
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
    params:
      count: count
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: output
    params:
      origin: origin
      destination: destination
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: text
    params:
      count: count
- name: foobar
  endpoint:
    path: /foobar
    method: GET
    data_selector: output
    params: {}
- name: deferred_tool_results
  endpoint:
    path: /deferred_tool_results
    method: POST
    data_selector: results
- name: frontend_tool_definitions
  endpoint:
    path: /frontend_tool_definitions
    method: GET
    data_selector: definitions
- name: feedback_graph
  endpoint:
    path: /feedback_graph
    method: GET
    data_selector: output
    params: {}
- name: CountDown
  endpoint:
    path: /count_down
    method: GET
    data_selector: records
    params:
      incremental: counter
- name: EmailFeedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: records
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: null
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: stream_events
  endpoint:
    path: /pydantic_ai/agent/abstract.py
    method: GET
    data_selector: records
- name: UserPromptNode
  endpoint:
    path: UserPromptNode
    method: GET
    data_selector: user_prompt
- name: ModelRequestNode
  endpoint:
    path: ModelRequestNode
    method: GET
    data_selector: request
- name: CallToolsNode
  endpoint:
    path: CallToolsNode
    method: GET
    data_selector: model_response
- name: End
  endpoint:
    path: End
    method: GET
    data_selector: data
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: POST
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: POST
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: POST
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: POST
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: POST
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: POST
- name: tavily_search
  endpoint:
    path: /tavily/search
    method: POST
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
    params: {}
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
    params: {}
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
    params: {}
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
    params: {}
- name: content
  endpoint:
    path: content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: has_content
  endpoint:
    path: has_content
    method: GET
    data_selector: has_content
    params: {}
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: records
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: records
- name: AgentRunResult
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/run.py
    method: GET
    data_selector: AgentRunResult
    params: {}
- name: AgentRunResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/run.py
    method: GET
    data_selector: AgentRunResultEvent
    params: {}
- name: KnownModelName
  endpoint:
    path: /api/models/known
    method: GET
    data_selector: models
    params: {}
- name: groq_model
  endpoint:
    path: /models/groq
    method: GET
    data_selector: models
    params: {}
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: mcp_sampling_model
  endpoint:
    path: /mcp_sampling_model
    method: POST
    data_selector: results
- name: mistral_model
  endpoint:
    path: /mistral_model
    method: POST
    data_selector: results
- name: TestModel
  endpoint:
    path: /pydantic_ai/models/test/TestModel
    method: GET
    data_selector: records
    params: {}
- name: TestModel
  endpoint:
    path: /pydantic_graph/beta/join
    method: POST
    data_selector: model_response
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: cases
    params: {}
- name: EvaluatorSpec
  endpoint:
    path: /pydantic_graph/evaluators/spec
    method: GET
    data_selector: deserialized
- name: GradingOutput
  endpoint:
    path: /pydantic_graph/evaluators/llm_as_a_judge
    method: GET
    data_selector: output
- name: span_node
  endpoint:
    path: /span_node
    method: GET
    data_selector: records
    params: {}
- name: ReportCase
  endpoint:
    path: /report/case
    method: GET
    data_selector: cases
    params: {}
- name: ReportCaseFailure
  endpoint:
    path: /report/case/failure
    method: GET
    data_selector: failures
    params: {}
- name: EvaluationReport
  endpoint:
    path: /evaluation/report
    method: GET
    data_selector: reports
    params: {}
- name: graph_execution
  endpoint:
    path: /run
    method: POST
    data_selector: output
- name: graph_iterator
  endpoint:
    path: /iter
    method: GET
    data_selector: iterator
- name: graph_render
  endpoint:
    path: /render
    method: GET
    data_selector: diagram
- name: decision_branch
  endpoint:
    path: /pydantic_graph/beta/decision
    method: POST
    data_selector: records
- name: graph
  endpoint:
    path: /pydantic_graph/beta/graph
    method: GET
    data_selector: records
- name: GraphTask
  endpoint:
    method: GET
- name: GraphRun
  endpoint:
    method: GET
- name: GraphBuilder
  endpoint:
    method: GET
- name: Graph
  endpoint:
    path: /pydantic_graph
    method: GET
    data_selector: nodes
    params: {}
- name: snapshot_node
  endpoint:
    path: /snapshot_node
    method: POST
    data_selector: result
- name: snapshot_node_if_new
  endpoint:
    path: /snapshot_node_if_new
    method: POST
    data_selector: result
- name: snapshot_end
  endpoint:
    path: /snapshot_end
    method: POST
    data_selector: result
- name: record_run
  endpoint:
    path: /record_run
    method: POST
    data_selector: result
- name: load_next
  endpoint:
    path: /load_next
    method: GET
    data_selector: result
- name: load_all
  endpoint:
    path: /load_all
    method: GET
    data_selector: result
- name: FileStatePersistence
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/file.py
    method: GET
    data_selector: json_file
    params: {}
- name: dataset_evaluation
  endpoint:
    path: /evaluate_sync
    method: POST
    data_selector: report
- name: fetch_data
  endpoint:
    method: GET
- name: mcpServers
  endpoint:
    path: /mcpServers
    method: GET
    data_selector: servers
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params:
      location: Paris
      forecast_date: '2030-01-01'
- name: MCPServerTool
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model_request
    method: POST
    data_selector: results
    params: {}
- name: direct_api
  endpoint:
    path: /direct_api
    method: GET
    data_selector: results
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: result.messages
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    params:
      count: count
- name: tool
  endpoint:
    path: /tool
    method: GET
    data_selector: tools
    params: {}
- name: Foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
    params: {}
- name: CountDown
  endpoint:
    path: /countdown
    method: GET
    data_selector: records
    params: {}
- name: QuestionGraph
  endpoint:
    path: /question_graph
    method: POST
    data_selector: records
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: request
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
- name: agent_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: agent_run
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
    params: {}
- name: web_search_tool
  endpoint:
    path: /builtin_tools/web_search
    method: POST
- name: code_execution_tool
  endpoint:
    path: /builtin_tools/code_execution
    method: POST
- name: url_context_tool
  endpoint:
    path: /builtin_tools/url_context
    method: POST
- name: image_generation_tool
  endpoint:
    path: /builtin_tools/image_generation
    method: POST
- name: memory_tool
  endpoint:
    path: /builtin_tools/memory
    method: POST
- name: mcp_server_tool
  endpoint:
    path: /builtin_tools/mcp_server
    method: POST
- name: tavily_search
  endpoint:
    method: GET
- name: model_response
  endpoint:
    path: /model/response
    method: GET
    data_selector: response
    params: {}
- name: usage
  endpoint:
    path: /model/usage
    method: GET
    data_selector: usage
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: wrapped_request_step
  endpoint:
    path: /model/request
    method: POST
    data_selector: messages
    params: {}
- name: wrapped_request_stream_step
  endpoint:
    path: /model/request_stream
    method: GET
    data_selector: streamed_response
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
- name: AgentRun
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: nodes
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: tasks
  endpoint:
    path: /tasks
    method: POST
    data_selector: results
- name: video_url
  endpoint:
    path: /video-url
    method: GET
    data_selector: records
- name: audio_url
  endpoint:
    path: /audio-url
    method: GET
    data_selector: records
- name: image_url
  endpoint:
    path: /image-url
    method: GET
    data_selector: records
- name: document_url
  endpoint:
    path: /document-url
    method: GET
    data_selector: records
- name: BinaryContent
  endpoint:
    path: /from_data_uri
    method: POST
    data_selector: data
    params: {}
- name: BinaryImage
  endpoint:
    path: /binary_image
    method: POST
    data_selector: data
    params: {}
- name: ToolReturn
  endpoint:
    path: /tool_return
    method: POST
    data_selector: return_value
    params: {}
- name: UserPromptPart
  endpoint:
    path: /user_prompt_part
    method: POST
    data_selector: content
    params: {}
- name: RetryPromptPart
  endpoint:
    path: /retry_prompt_part
    method: POST
    data_selector: content
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: has_content
  endpoint:
    path: /has_content
    method: GET
    data_selector: has_content
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: index
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: index
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: part
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: result
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: part
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: result
    params: {}
- name: HandleResponseEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: event_kind
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: event_kind
    params: {}
- name: ToolOutput
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/output.py
    method: GET
    data_selector: output
    params: {}
- name: NativeOutput
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/output.py
    method: GET
    data_selector: outputs
    params: {}
- name: PromptedOutput
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/output.py
    method: GET
    data_selector: outputs
    params: {}
- name: TextOutput
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/output.py
    method: GET
    data_selector: output_function
    params: {}
- name: agent_run_result
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
    params: {}
- name: max_tokens
  endpoint:
    path: /max_tokens
    method: GET
- name: temperature
  endpoint:
    path: /temperature
    method: GET
- name: top_p
  endpoint:
    path: /top_p
    method: GET
- name: timeout
  endpoint:
    path: /timeout
    method: GET
- name: parallel_tool_calls
  endpoint:
    path: /parallel_tool_calls
    method: GET
- name: seed
  endpoint:
    path: /seed
    method: GET
- name: presence_penalty
  endpoint:
    path: /presence_penalty
    method: GET
- name: frequency_penalty
  endpoint:
    path: /frequency_penalty
    method: GET
- name: logit_bias
  endpoint:
    path: /logit_bias
    method: GET
- name: stop_sequences
  endpoint:
    path: /stop_sequences
    method: GET
- name: extra_headers
  endpoint:
    path: /extra_headers
    method: GET
- name: extra_body
  endpoint:
    path: /extra_body
    method: GET
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: function_tools
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: _profile
    params: {}
- name: FunctionStreamedResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/function.py
    method: GET
    data_selector: streamed_response
    params: {}
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: model_response
  endpoint:
    path: /models/groq
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: mcp_sampling
  endpoint:
    path: /mcp_sampling
    method: GET
- name: mistral
  endpoint:
    path: /mistral
    method: GET
- name: MistralStreamedResponse
  endpoint:
    path: /models/mistral/streamed_response
    method: GET
    data_selector: response
- name: OpenAIChatModel
  endpoint:
    path: /models/openai/chat
    method: POST
    data_selector: response
- name: TestModel
  endpoint:
    path: /test/model
    method: GET
    data_selector: records
- name: Case
  endpoint:
    path: /pydantic_evals/case
    method: GET
    data_selector: records
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: records
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: GET
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: dataset
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: None
    params: {}
- name: Contains
  endpoint:
    path: /Contains
    method: POST
    data_selector: None
    params: {}
- name: Equals
  endpoint:
    path: /Equals
    method: POST
    data_selector: None
    params: {}
- name: EqualsExpected
  endpoint:
    path: /EqualsExpected
    method: POST
    data_selector: None
    params: {}
- name: HasMatchingSpan
  endpoint:
    path: /HasMatchingSpan
    method: POST
    data_selector: None
    params: {}
- name: IsInstance
  endpoint:
    path: /IsInstance
    method: POST
    data_selector: None
    params: {}
- name: LLMJudge
  endpoint:
    path: /LLMJudge
    method: POST
    data_selector: None
    params: {}
- name: MaxDuration
  endpoint:
    path: /MaxDuration
    method: POST
    data_selector: None
    params: {}
- name: span_node
  endpoint:
    path: /span_tree
    method: GET
    data_selector: nodes
- name: ReportCase
  endpoint:
    path: /report_case
    method: GET
    data_selector: cases
    params: {}
- name: ReportCaseFailure
  endpoint:
    path: /report_case_failure
    method: GET
    data_selector: failures
    params: {}
- name: ReportCaseAggregate
  endpoint:
    path: /report_case_aggregate
    method: GET
    data_selector: aggregates
    params: {}
- name: EvaluationReport
  endpoint:
    path: /evaluation_report
    method: GET
    data_selector: reports
    params: {}
- name: evaluation_report
  endpoint:
    path: /pydantic_evals/reporting/evaluation_report
    method: GET
    data_selector: report
    params: {}
- name: Decision
  endpoint:
    path: /pydantic_graph/beta/decision
    method: GET
    data_selector: branches
    params: {}
- name: DecisionBranch
  endpoint:
    path: /pydantic_graph/beta/decision_branch
    method: GET
    data_selector: source
    params: {}
- name: GraphTask
  endpoint:
    path: /pydantic_graph/beta/graph.py
    method: GET
    data_selector: records
- name: GraphRun
  endpoint:
    path: /pydantic_graph/beta/graph.py
    method: GET
    data_selector: records
- name: GraphBuilder
  endpoint:
    path: /pydantic_graph/beta/graph_builder.py
    method: GET
    data_selector: records
- name: StartNode
  endpoint:
    path: /pydantic_graph/beta/node/StartNode
    method: GET
    data_selector: records
- name: EndNode
  endpoint:
    path: /pydantic_graph/beta/node/EndNode
    method: GET
    data_selector: records
- name: Fork
  endpoint:
    path: /pydantic_graph/beta/node/Fork
    method: GET
    data_selector: records
- name: Join
  endpoint:
    path: /pydantic_graph/beta/join
    method: GET
    data_selector: records
- name: Graph
  endpoint:
    path: /pydantic_graph/graph
    method: GET
    data_selector: nodes
    params: {}
- name: Step
  endpoint:
    path: /pydantic_graph/step
    method: GET
    data_selector: steps
    params: {}
- name: NodeSnapshot
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/NodeSnapshot
    method: GET
    data_selector: state
    params: {}
- name: EndSnapshot
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/EndSnapshot
    method: GET
    data_selector: result
    params: {}
- name: snapshot_node
  endpoint:
    path: /snapshot_node
    method: POST
    data_selector: snapshot
- name: snapshot_node_if_new
  endpoint:
    path: /snapshot_node_if_new
    method: POST
    data_selector: snapshot_if_new
- name: snapshot_end
  endpoint:
    path: /snapshot_end
    method: POST
    data_selector: snapshot_end
- name: record_run
  endpoint:
    path: /record_run
    method: POST
    data_selector: record
- name: load_next
  endpoint:
    path: /load_next
    method: GET
    data_selector: next_snapshot
- name: load_all
  endpoint:
    path: /load_all
    method: GET
    data_selector: all_snapshots
- name: FileStatePersistence
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/file.py
    method: GET
    data_selector: records
    params: {}
- name: load_json
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/in_mem.py
    method: GET
    data_selector: records
    params: {}
- name: dump_json
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/in_mem.py
    method: GET
    data_selector: records
    params: {}
- name: dataset_evaluation
  endpoint:
    path: /evaluate_sync
    method: POST
    data_selector: report
    params: {}
- name: mcp_servers
  endpoint:
    path: /mcp_servers
    method: GET
    data_selector: servers
- name: message_history
  endpoint:
    path: /agent/to_cli
    method: POST
    data_selector: message_history
    params: {}
- name: Agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: data
    params: {}
- name: DocumentState
  endpoint:
    path: /ag_ui_tool_events
    method: POST
    data_selector: metadata
- name: MCPServerTool
  endpoint:
    path: https://mcp.deepwiki.com/mcp
    method: GET
- name: GitHub MCP server
  endpoint:
    path: https://api.githubcopilot.com/mcp/
    method: GET
    params:
      authorization_token: os.getenv('GITHUB_ACCESS_TOKEN', 'mock-access-token')
- name: Google Calendar connector
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
    params:
      authorization_token: os.getenv('GOOGLE_API_KEY', 'mock-api-key')
- name: image_input
  endpoint:
    path: /image/input
    method: POST
    data_selector: output
- name: audio_input
  endpoint:
    path: /audio/input
    method: POST
    data_selector: output
- name: video_input
  endpoint:
    path: /video/input
    method: POST
    data_selector: output
- name: document_input
  endpoint:
    path: /document/input
    method: POST
    data_selector: output
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: all_messages
    params: {}
- name: streamed_messages
  endpoint:
    path: /streamed_messages
    method: GET
    data_selector: new_messages
    params: {}
- name: tool
  endpoint:
    path: /tools
    method: GET
    data_selector: tools
    params: {}
- name: agent_tool
  endpoint:
    path: /agent_tool
    method: GET
    data_selector: tools
    params: {}
- name: weather_tool
  endpoint:
    path: /weather_tool
    method: GET
    data_selector: weather_conditions
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result
    params: {}
- name: deepseek-chat
  endpoint:
    path: /api/chat
    method: POST
- name: fallback_model
  endpoint:
    path: /fallback
    method: POST
    data_selector: response
    params: {}
- name: vending_machine
  endpoint:
    path: /vending_machine
    method: POST
    data_selector: result
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
    data_selector: AG-UI run input
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: GET
    data_selector: stream
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: agent_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: agent_run_result
  endpoint:
    path: /run_result
    method: GET
    data_selector: result
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
    data_selector: nodes
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: agent
  endpoint:
    path: /pydantic_ai
    method: POST
    data_selector: data
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: output
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: output
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: output
    params: {}
- name: run
  endpoint:
    path: /dbos/run
    method: POST
    data_selector: results
    params: {}
- name: run_sync
  endpoint:
    path: /dbos/run_sync
    method: POST
    data_selector: results
    params: {}
- name: run_sync
  endpoint:
    path: run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: run_stream_events
    method: POST
    data_selector: result
- name: iter
  endpoint:
    path: iter
    method: POST
    data_selector: result
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: tasks_send
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: result
- name: tasks_get
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: result
- name: tasks_cancel
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: result
- name: tasks_pushNotification_get
  endpoint:
    path: /tasks/pushNotification/get
    method: GET
    data_selector: result
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: PartStartEvent
  endpoint:
    path: /PartStartEvent
    method: GET
    data_selector: index
- name: PartDeltaEvent
  endpoint:
    path: /PartDeltaEvent
    method: GET
    data_selector: index
- name: FinalResultEvent
  endpoint:
    path: /FinalResultEvent
    method: GET
    data_selector: tool_name
- name: FunctionToolCallEvent
  endpoint:
    path: /FunctionToolCallEvent
    method: GET
    data_selector: part
- name: FunctionToolResultEvent
  endpoint:
    path: /FunctionToolResultEvent
    method: GET
    data_selector: result
- name: BuiltinToolCallEvent
  endpoint:
    path: /BuiltinToolCallEvent
    method: GET
    data_selector: part
- name: BuiltinToolResultEvent
  endpoint:
    path: /BuiltinToolResultEvent
    method: GET
    data_selector: result
- name: HandleResponseEvent
  endpoint:
    path: /HandleResponseEvent
    method: GET
    data_selector: event_kind
- name: AgentStreamEvent
  endpoint:
    path: /AgentStreamEvent
    method: GET
    data_selector: event_kind
- name: ToolOutput
  endpoint:
    path: /ToolOutput
    method: GET
    data_selector: output
- name: NativeOutput
  endpoint:
    path: /NativeOutput
    method: GET
    data_selector: outputs
- name: PromptedOutput
  endpoint:
    path: /PromptedOutput
    method: GET
    data_selector: outputs
- name: TextOutput
  endpoint:
    path: /TextOutput
    method: GET
    data_selector: output_function
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: function_tools
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: _profile
    params: {}
- name: cohere_model
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
- name: model_name
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: groq_model
  endpoint:
    path: /models/groq
    method: POST
    data_selector: results
    params: {}
- name: mistral_model
  endpoint:
    path: /models/mistral
    method: GET
    data_selector: models
    params: {}
- name: mistral_streamed_response
  endpoint:
    path: /models/mistral/streamed_response
    method: POST
    data_selector: response
    params: {}
- name: test_model
  endpoint:
    path: /v1/models/test
    method: GET
    data_selector: data
    params: {}
- name: Case
  endpoint:
    path: /pydantic_evals/case
    method: GET
    data_selector: cases
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: datasets
    params: {}
- name: dataset
  endpoint:
    path: /datasets
    method: GET
    data_selector: cases
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /pydantic_evals/increment_eval_metric
    method: POST
    data_selector: output
    params: {}
- name: Contains
  endpoint:
    path: /pydantic_evals/Contains
    method: POST
    data_selector: output
    params: {}
- name: Equals
  endpoint:
    path: /pydantic_evals/Equals
    method: POST
    data_selector: output
    params: {}
- name: EqualsExpected
  endpoint:
    path: /pydantic_evals/EqualsExpected
    method: POST
    data_selector: output
    params: {}
- name: HasMatchingSpan
  endpoint:
    path: /pydantic_evals/HasMatchingSpan
    method: POST
    data_selector: output
    params: {}
- name: IsInstance
  endpoint:
    path: /pydantic_evals/IsInstance
    method: POST
    data_selector: output
    params: {}
- name: LLMJudge
  endpoint:
    path: /pydantic_evals/LLMJudge
    method: POST
    data_selector: output
    params: {}
- name: MaxDuration
  endpoint:
    path: /pydantic_evals/MaxDuration
    method: POST
    data_selector: output
    params: {}
- name: EvaluatorSpec
  endpoint:
    path: /pydantic_evals/pydantic_evals/evaluators/spec.py
    method: GET
    data_selector: name
    params: {}
- name: GradingOutput
  endpoint:
    path: /pydantic_evals/grading_output
    method: GET
    data_selector: output
    params: {}
- name: span
  endpoint:
    path: /spanTree
    method: GET
    data_selector: spans
- name: cases
  endpoint:
    path: /cases
    method: GET
    data_selector: cases
    params: {}
- name: failures
  endpoint:
    path: /failures
    method: GET
    data_selector: failures
    params: {}
- name: EvaluationRenderer
  endpoint:
    path: /pydantic_graph/beta/EvaluationRenderer
    method: GET
    data_selector: records
    params: {}
- name: Graph
  endpoint:
    path: /pydantic_graph/beta/Graph
    method: GET
    data_selector: records
    params: {}
- name: graph
  endpoint:
    path: /services/data/vXX.X/sobjects/Graph
    method: GET
    data_selector: records
    params: {}
- name: Decision
  endpoint:
    path: /pydantic_graph/beta/decision
    method: GET
    data_selector: Decision
    params: {}
- name: DecisionBranch
  endpoint:
    path: /pydantic_graph/beta/decision_branch
    method: GET
    data_selector: DecisionBranch
    params: {}
- name: GraphTask
  endpoint:
    path: /graph/task
    method: GET
    data_selector: task
- name: GraphRun
  endpoint:
    path: /graph/run
    method: GET
    data_selector: run
- name: GraphBuilder
  endpoint:
    path: /graph/builder
    method: GET
    data_selector: builder
- name: JoinState
  endpoint:
    path: /pydantic_graph/beta/join
    method: GET
    data_selector: JoinState
    params: {}
- name: ReducerContext
  endpoint:
    path: /pydantic_graph/beta/join
    method: GET
    data_selector: ReducerContext
    params: {}
- name: ReducerFunction
  endpoint:
    path: /pydantic_graph/beta/join
    method: GET
    data_selector: ReducerFunction
    params: {}
- name: Join
  endpoint:
    path: /pydantic_graph/beta/join
    method: GET
    data_selector: Join
    params: {}
- name: StartNode
  endpoint:
    path: /pydantic_graph/beta/node
    method: GET
    data_selector: StartNode
    params: {}
- name: EndNode
  endpoint:
    path: /pydantic_graph/beta/node
    method: GET
    data_selector: EndNode
    params: {}
- name: Fork
  endpoint:
    path: /pydantic_graph/beta/node
    method: GET
    data_selector: Fork
    params: {}
- name: StepContext
  endpoint:
    path: /pydantic_graph/beta/step
    method: GET
    data_selector: StepContext
    params: {}
- name: StepFunction
  endpoint:
    path: /pydantic_graph/beta/step
    method: GET
    data_selector: StepFunction
    params: {}
- name: Step
  endpoint:
    path: /pydantic_graph/step
    method: GET
    data_selector: records
    params: {}
- name: Graph
  endpoint:
    path: /pydantic_graph/graph
    method: GET
    data_selector: records
    params: {}
- name: NodeStep
  endpoint:
    path: /pydantic_graph/node_step
    method: GET
    data_selector: records
    params: {}
- name: GraphRunResult
  endpoint:
    path: /pydantic_graph/graph.py
    method: GET
    data_selector: output
    params: {}
- name: generate_code
  endpoint:
    path: /pydantic_graph/mermaid.py
    method: GET
    data_selector: code
    params: {}
- name: NodeSnapshot
  endpoint:
    path: /pydantic_graph/nodes/NodeSnapshot
    method: GET
    data_selector: records
    params: {}
- name: EndSnapshot
  endpoint:
    path: /pydantic_graph/nodes/EndSnapshot
    method: GET
    data_selector: records
    params: {}
- name: FileStatePersistence
  endpoint:
    path: /pydantic_graph/persistence/file.py
    method: GET
    data_selector: class
    params: {}
- name: geography
  endpoint:
    path: /agents/geography
    method: POST
    data_selector: output
    params: {}
- name: mcp_servers
  endpoint:
    path: /mcp_servers
    method: GET
    data_selector: servers
- name: elicitation
  endpoint:
    path: /elicitation
    method: POST
    data_selector: response
    params: {}
- name: restaurant_booking
  endpoint:
    path: /booking
    method: POST
    data_selector: results
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: get_user_by_name
  endpoint:
    path: /get_user_by_name
    method: GET
    data_selector: user_id
    params: {}
- name: calc_volume
  endpoint:
    path: /calc_volume
    method: POST
    data_selector: result
    params: {}
- name: github
  endpoint:
    path: /mcp/
    method: GET
- name: google-calendar
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
- name: joke_factory
  endpoint:
    path: ''
    method: GET
    data_selector: ''
    params: {}
- name: get_jokes
  endpoint:
    path: ''
    method: GET
    data_selector: ''
    params:
      count: count
- name: Foobar
  endpoint:
    path: /foobar
    method: POST
    data_selector: output
    params: {}
- name: Toolset
  endpoint:
    path: /toolset
    method: GET
    data_selector: available_tools
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
    params: {}
- name: deepseek-chat
  endpoint:
    path: /chat
    method: POST
- name: email_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result
    params: {}
- name: email_feedback
  endpoint:
    path: /feedback/email
    method: POST
    data_selector: result.output
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: WebSearchTool
  endpoint:
    path: /pydantic_ai/builtin_tools/WebSearchTool
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /pydantic_ai/builtin_tools/CodeExecutionTool
    method: GET
- name: UrlContextTool
  endpoint:
    path: /pydantic_ai/builtin_tools/UrlContextTool
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /pydantic_ai/builtin_tools/ImageGenerationTool
    method: GET
- name: MemoryTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MemoryTool
    method: GET
- name: MCPServerTool
  endpoint:
    path: /pydantic_ai/builtin_tools/MCPServerTool
    method: GET
- name: tavily_search_tool
  endpoint:
    path: /tavily_search_tool
    method: POST
    data_selector: results
    params:
      api_key: str
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: GET
    data_selector: results
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: iterations
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: send_message
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: submitted
    params: {}
- name: get_task
  endpoint:
    path: /tasks/get
    method: POST
    data_selector: working
    params: {}
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: canceled
    params: {}
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
    params: {}
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
    params: {}
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
    params: {}
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
    params: {}
- name: BinaryContent
  endpoint:
    path: /binary-content
    method: GET
    data_selector: data
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: ModelRequest
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: text_part
  endpoint:
    path: /messages/text
    method: GET
    data_selector: content
- name: thinking_part
  endpoint:
    path: /messages/thinking
    method: GET
    data_selector: content
- name: file_part
  endpoint:
    path: /messages/file
    method: GET
    data_selector: content
- name: tool_call_part
  endpoint:
    path: /messages/tool_call
    method: GET
    data_selector: content
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: HandleResponseEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
- name: agent_run_result
  endpoint:
    path: /agent_run_result
    method: GET
    data_selector: result
- name: agent_run_result_event
  endpoint:
    path: /agent_run_result_event
    method: GET
    data_selector: event_kind
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: function_tools
    params: {}
- name: Model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: _profile
    params: {}
- name: BedrockModels
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: BedrockConverse
  endpoint:
    path: /converse
    method: POST
    data_selector: response
    params: {}
- name: cohere_model
  endpoint:
    path: /v2/models
    method: GET
    data_selector: models
- name: FunctionStreamedResponse
  endpoint:
    path: /function/streamed_response
    method: GET
    data_selector: response
    params: {}
- name: groq_model
  endpoint:
    path: /models/groq
    method: GET
    data_selector: models
    params: {}
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: mistral_model
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: TestModel
  endpoint:
    path: /pydantic_ai/models/test
    method: GET
    data_selector: model_data
    params: {}
- name: Case
  endpoint:
    path: /pydantic_evals/Case
    method: GET
    data_selector: records
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/Dataset
    method: GET
    data_selector: records
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: EvaluatorSpec
  endpoint:
    path: /pydantic_evals/evaluators/spec
    method: GET
    data_selector: evaluators
    params: {}
- name: GradingOutput
  endpoint:
    path: /pydantic_evals/evaluators/llm_as_a_judge
    method: GET
    data_selector: grading_output
    params: {}
- name: span_node
  endpoint:
    path: /span_node
    method: GET
    data_selector: records
    params: {}
- name: cases
  endpoint:
    path: /
    method: GET
    data_selector: cases
- name: failures
  endpoint:
    path: /
    method: GET
    data_selector: failures
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Decision
  endpoint:
    path: /pydantic_graph/beta/decision
    method: GET
    data_selector: records
- name: DecisionBranch
  endpoint:
    path: /pydantic_graph/beta/decision_branch
    method: GET
    data_selector: records
- name: decision_branch
  endpoint:
    path: /beta/decision
    method: POST
    data_selector: output
    params: {}
- name: graph_execution
  endpoint:
    path: /beta/graph/run
    method: GET
    data_selector: execution_result
    params: {}
- name: graph_task
  endpoint:
    path: /pydantic_graph/beta/graph_task
    method: GET
    data_selector: records
    params: {}
- name: graph_run
  endpoint:
    path: /pydantic_graph/beta/graph_run
    method: GET
    data_selector: records
    params: {}
- name: Graph
  endpoint:
    path: /pydantic_graph/graph.py
    method: GET
    data_selector: nodes
    params: {}
- name: Step
  endpoint:
    path: /pydantic_graph/step.py
    method: GET
    data_selector: steps
    params: {}
- name: snapshot_node
  endpoint:
    path: /snapshot/node
    method: POST
- name: snapshot_node_if_new
  endpoint:
    path: /snapshot/node_if_new
    method: POST
- name: snapshot_end
  endpoint:
    path: /snapshot/end
    method: POST
- name: record_run
  endpoint:
    path: /record/run
    method: POST
- name: load_next
  endpoint:
    path: /load/next
    method: GET
- name: load_all
  endpoint:
    path: /load/all
    method: GET
- name: FileStatePersistence
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/file.py
    method: GET
    data_selector: class FileStatePersistence
    params: {}
- name: evaluations
  endpoint:
    path: /dataset/evaluate_sync
    method: POST
    data_selector: report
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: mcpServerStreamableHTTP
  endpoint:
    path: /mcp
    method: GET
    data_selector: records
    params: {}
- name: mcpServerSSE
  endpoint:
    path: /sse
    method: GET
    data_selector: records
    params: {}
- name: mcpServerStdio
  endpoint:
    path: /stdio
    method: GET
    data_selector: records
    params: {}
- name: booking
  endpoint:
    path: /book_table
    method: POST
    data_selector: result
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: output
    params: {}
- name: agent_run
  endpoint:
    path: /run
    method: POST
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params:
      location: location
      forecast_date: date
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params:
      location: location
      forecast_date: date
- name: mcp_server_anthropic
  endpoint:
    path: https://mcp.deepwiki.com/mcp
    method: GET
- name: mcp_server_openai
  endpoint:
    path: https://mcp.deepwiki.com/mcp
    method: GET
- name: mcp_server_configured_url
  endpoint:
    path: https://api.githubcopilot.com/mcp/
    method: GET
- name: mcp_server_configured_connector_id
  endpoint:
    path: x-openai-connector:connector_googlecalendar
    method: GET
- name: get_default_language
  endpoint:
    path: /get_default_language
    method: GET
    data_selector: result
    params: {}
- name: get_user_name
  endpoint:
    path: /get_user_name
    method: GET
    data_selector: result
    params: {}
- name: get_preferred_language
  endpoint:
    path: /get_preferred_language
    method: GET
    data_selector: records
- name: deepseek-chat
  endpoint:
    path: /deepseek/chat
    method: POST
- name: email_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: output
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: result.output
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: event
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
- name: override
  endpoint:
    path: /override
    method: GET
    data_selector: none
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: nodes
    params: {}
- name: WebSearchTool
  endpoint:
    path: /web_search_tool
    method: POST
- name: CodeExecutionTool
  endpoint:
    path: /code_execution_tool
    method: POST
- name: UrlContextTool
  endpoint:
    path: /url_context_tool
    method: POST
- name: ImageGenerationTool
  endpoint:
    path: /image_generation_tool
    method: POST
- name: MemoryTool
  endpoint:
    path: /memory_tool
    method: POST
- name: MCPServerTool
  endpoint:
    path: /mcp_server_tool
    method: POST
- name: tavily_search
  endpoint:
    path: /api/search
    method: GET
- name: agent
  endpoint:
    path: /agent
    method: POST
    data_selector: result
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: agent
  endpoint:
    path: /agents
    method: POST
    data_selector: result
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
    data_selector: agent_card
- name: agent_run
  endpoint:
    path: /
    method: POST
    data_selector: agent_run
- name: docs
  endpoint:
    path: /docs
    method: GET
    data_selector: docs
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
    data_selector: url
    params: {}
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
    data_selector: url
    params: {}
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
    data_selector: url
    params: {}
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
    data_selector: url
    params: {}
- name: BinaryContent
  endpoint:
    path: /binary-content
    method: GET
    data_selector: data
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: BinaryContent
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: ToolReturn
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: UserPromptPart
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/PartStartEvent
    method: GET
    data_selector: index
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/PartDeltaEvent
    method: GET
    data_selector: index
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/FinalResultEvent
    method: GET
    data_selector: tool_name
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/FunctionToolCallEvent
    method: GET
    data_selector: part
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/FunctionToolResultEvent
    method: GET
    data_selector: result
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolCallEvent
    method: GET
    data_selector: part
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolResultEvent
    method: GET
    data_selector: result
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai/AgentStreamEvent
    method: GET
    data_selector: event_kind
    params: {}
- name: agent_run_result
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
    params: {}
- name: agent_run_result_event
  endpoint:
    path: /agent/run/result/event
    method: GET
    data_selector: event
    params: {}
- name: model_request_parameters
  endpoint:
    path: ModelRequestParameters
    method: GET
    data_selector: function_tools
    params: {}
- name: model
  endpoint:
    path: Model
    method: GET
    data_selector: _profile
    params: {}
- name: FallbackModel
  endpoint:
    method: GET
- name: FunctionModel
  endpoint:
    method: GET
- name: groq_model
  endpoint:
    path: /api/groq/models
    method: GET
    data_selector: models
    params: {}
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: choices
- name: mistral_model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: tool_usage
  endpoint:
    path: /v1/tools
    method: GET
    data_selector: tools
    params: {}
- name: Case
  endpoint:
    path: /pydantic_evals/case
    method: GET
    data_selector: records
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: records
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: POST
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: dataset
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
    params: {}
- name: GradingOutput
  endpoint:
    path: /grading_output
    method: GET
    data_selector: output
    params: {}
- name: SpanNode
  endpoint:
    path: /pydantic_evals/pydantic_evals/otel/span_tree.py
    method: GET
    data_selector: nodes
    params: {}
- name: ReportCase
  endpoint:
    path: /report/case
    method: GET
    data_selector: cases
- name: ReportCaseFailure
  endpoint:
    path: /report/case/failure
    method: GET
    data_selector: failures
- name: ReportCaseAggregate
  endpoint:
    path: /report/case/aggregate
    method: GET
    data_selector: aggregate
- name: EvaluationReport
  endpoint:
    path: /report/evaluation
    method: GET
    data_selector: evaluation_reports
- name: report_cases
  endpoint:
    path: /report/cases
    method: GET
    data_selector: cases
- name: report_failures
  endpoint:
    path: /report/failures
    method: GET
    data_selector: failures
- name: decision_branch
  endpoint:
    path: /beta/decision
    method: GET
    data_selector: records
- name: graph
  endpoint:
    path: /beta/graph
    method: GET
    data_selector: records
- name: graph_task
  endpoint:
    path: /api/v1/graph/task
    method: POST
    data_selector: data
    params: {}
- name: graph_run
  endpoint:
    path: /api/v1/graph/run
    method: POST
    data_selector: data
    params: {}
- name: JoinState
  endpoint:
    path: /pydantic_graph/beta/join
    method: GET
    data_selector: current
    params: {}
- name: ReducerContext
  endpoint:
    path: /pydantic_graph/beta/join
    method: GET
    data_selector: _state
    params: {}
- name: StartNode
  endpoint:
    path: /pydantic_graph/beta/node
    method: GET
    data_selector: id
    params: {}
- name: EndNode
  endpoint:
    path: /pydantic_graph/beta/node
    method: GET
    data_selector: id
    params: {}
- name: Fork
  endpoint:
    path: /pydantic_graph/beta/node
    method: GET
    data_selector: id
    params: {}
- name: Graph
  endpoint:
    path: /pydantic_graph/graph.py
    method: GET
    data_selector: nodes
    params: {}
- name: graph_run
  endpoint:
    method: POST
- name: mermaid_code
  endpoint:
    path: /mermaid_code
    method: POST
    data_selector: code
    params: {}
- name: mermaid_image
  endpoint:
    path: /mermaid_image
    method: POST
    data_selector: image
    params: {}
- name: mermaid_save
  endpoint:
    path: /mermaid_save
    method: POST
    data_selector: save
    params: {}
- name: FileStatePersistence
  endpoint:
    path: /pydantic_graph/pydantic_graph/persistence/file.py
    method: GET
    data_selector: class
    params: {}
- name: dataset
  endpoint:
    path: /dataset/evaluate_sync
    method: POST
    data_selector: report
- name: geography
  endpoint:
    path: /geography
    method: POST
    data_selector: output
    params: {}
- name: mcp_servers
  endpoint:
    path: /mcp/mcp_servers
    method: GET
    data_selector: servers
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: mcp_server_tool
  endpoint:
    path: https://mcp.deepwiki.com/mcp
    method: GET
- name: joke_selection_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
- name: joke_generation_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
- name: flight_search_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
- name: seat_preference_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
- name: router_agent
  endpoint:
    path: https://example.com
    method: GET
    data_selector: output
- name: sum
  endpoint:
    path: /foobar
    method: POST
    data_selector: result
    params: {}
- name: hitchhiker
  endpoint:
    path: /only_if_42
    method: POST
    data_selector: result
    params: {}
- name: greet
  endpoint:
    path: /prepare_greet
    method: POST
    data_selector: result
    params: {}
- name: launch_potato
  endpoint:
    path: /launch_potato
    method: POST
    data_selector: result
    params: {}
- name: foobar
  endpoint:
    path: /your/endpoint/path
    method: GET
    data_selector: properties
    params: {}
- name: llama-3.3-70b-versatile
  endpoint:
    path: /groq/llama-3.3-70b-versatile
    method: GET
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event_chunks
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
- name: iter
  endpoint:
    path: /iter
    method: POST
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: results
- name: messages_to_otel_events
  endpoint:
    path: /messages_to_otel_events
    method: POST
    data_selector: events
    params: {}
- name: EventStreamHandler
  endpoint:
    path: /EventStreamHandler
    method: POST
    data_selector: stream_events
    params: {}
- name: WebSearchTool
  endpoint:
    path: /WebSearchTool
    method: POST
    data_selector: search_tool
    params: {}
- name: CodeExecutionTool
  endpoint:
    path: /CodeExecutionTool
    method: POST
    data_selector: execution_tool
    params: {}
- name: tavily_search
  endpoint:
    path: /search
    method: GET
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: AgentRunResult
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: AgentRunResult
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: run
    params: {}
- name: AgentRun
  endpoint:
    path: /pydantic_ai/AgentRun
    method: GET
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /id
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
    data_selector: part_kind
    params: {}
- name: has_content
  endpoint:
    path: /has_content
    method: GET
    data_selector: has_content
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: index, part, event_kind
    params: {}
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: index, delta, event_kind
    params: {}
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: tool_name, tool_call_id, event_kind
    params: {}
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: part, event_kind, tool_call_id
    params: {}
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: result, content, event_kind, tool_call_id
    params: {}
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: part, event_kind
    params: {}
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: result, event_kind
    params: {}
- name: GraphRunContext
  endpoint:
    path: /graph_run_context
    method: GET
    data_selector: context
- name: AgentRunResult
  endpoint:
    path: /agent_run_result
    method: GET
    data_selector: result
- name: AgentRunResultEvent
  endpoint:
    path: /agent_run_result_event
    method: GET
    data_selector: event
- name: model_name
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: ModelRequestParameters
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: records
- name: Model
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/__init__.py
    method: GET
    data_selector: records
- name: FallbackModel
  endpoint:
    method: GET
- name: FunctionModel
  endpoint:
    method: GET
- name: groq_model
  endpoint:
    path: /models/groq
    method: GET
    data_selector: models
    params: {}
- name: test1
  endpoint:
    path: /datasets/test1
    method: POST
    data_selector: results
    params: {}
- name: test2
  endpoint:
    path: /datasets/test2
    method: POST
    data_selector: results
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: cases
    params: {}
- name: GradingOutput
  endpoint:
    path: /pydantic_evals/grading_output
    method: GET
    data_selector: output
    params: {}
- name: report_case
  endpoint:
    path: /pydantic_evals/reporting/report_case
    method: GET
- name: report_case_failure
  endpoint:
    path: /pydantic_evals/reporting/report_case_failure
    method: GET
- name: evaluation_report
  endpoint:
    path: /pydantic_evals/reporting/evaluation_report
    method: GET
- name: Graph
  endpoint:
    path: /pydantic_graph/beta/graph
    method: POST
    data_selector: nodes
    params: {}
- name: decision_node
  endpoint:
    path: /api/decision_node
    method: POST
    data_selector: node
    params: {}
- name: branch
  endpoint:
    path: /api/branch
    method: POST
    data_selector: branch
    params: {}
- name: graph_task
  endpoint:
    path: /services/data/vXX.X/sobjects/GraphTask
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: graph_run
  endpoint:
    path: /services/data/vXX.X/sobjects/GraphRun
    method: GET
    data_selector: records
    params: {}
- name: Join
  endpoint:
    path: /pydantic_graph/beta/join
    method: GET
    data_selector: nodes
    params: {}
- name: StepContext
  endpoint:
    path: /pydantic_graph/beta/step
    method: GET
    data_selector: inputs
    params: {}
- name: snapshot_node
  endpoint:
    path: /snapshot_node
    method: POST
    data_selector: snapshot
    params: {}
- name: snapshot_node_if_new
  endpoint:
    path: /snapshot_node_if_new
    method: POST
    data_selector: snapshot
    params: {}
- name: snapshot_end
  endpoint:
    path: /snapshot_end
    method: POST
    data_selector: end_snapshot
    params: {}
- name: record_run
  endpoint:
    path: /record_run
    method: POST
    data_selector: run_record
    params: {}
- name: load_next
  endpoint:
    path: /load_next
    method: GET
    data_selector: next_snapshot
    params: {}
- name: load_all
  endpoint:
    path: /load_all
    method: GET
    data_selector: all_snapshots
    params: {}
- name: FileStatePersistence
  endpoint:
    path: /pydantic_graph/persistence/file.py
    method: GET
    data_selector: snapshots
    params: {}
- name: dataset
  endpoint:
    path: /dataset/evaluate_sync
    method: POST
    data_selector: report
- name: mcpServers
  endpoint:
    path: /mcpServers
    method: GET
    data_selector: servers
- name: elicitation
  endpoint:
    path: /elicitation
    method: POST
    data_selector: result
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /direct/model_request
    method: POST
    data_selector: result
- name: model_request_sync
  endpoint:
    path: /direct/model_request_sync
    method: POST
    data_selector: result
- name: model_request_stream
  endpoint:
    path: /direct/model_request_stream
    method: POST
    data_selector: result
- name: model_request_stream_sync
  endpoint:
    path: /direct/model_request_stream_sync
    method: POST
    data_selector: result
- name: messages
  endpoint:
    path: /result/messages
    method: GET
    data_selector: all_messages
- name: streamed_messages
  endpoint:
    path: /streamed/result/messages
    method: GET
    data_selector: new_messages
- name: joke_factory
  endpoint:
    path: /joke_factory
    method: GET
    data_selector: output
- name: flight_search
  endpoint:
    path: /flight_search
    method: GET
    data_selector: output
- name: get_jokes
  endpoint:
    path: /get_jokes
    method: GET
    data_selector: output
- name: roll_dice
  endpoint:
    path: /roll
    method: POST
    data_selector: result
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: name
- name: foobar
  endpoint:
    path: /tool/foobar
    method: POST
    data_selector: output
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: output
- name: gemini
  endpoint:
    path: /generateContent
    method: POST
    data_selector: result
- name: deepseek-chat
  endpoint:
    path: /api/chat
    method: POST
- name: feedback_graph
  endpoint:
    path: /feedback
    method: POST
    data_selector: output
    params: {}
- name: EmailRequiresWrite
  endpoint:
    path: /email/requires_write
    method: POST
    data_selector: feedback
- name: EmailOk
  endpoint:
    path: /email/ok
    method: GET
    data_selector: success
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: GET
    data_selector: none
    params: {}
- name: sequential_tool_calls
  endpoint:
    path: /sequential_tool_calls
    method: GET
    data_selector: none
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin_tools/web_search
    method: GET
    data_selector: tool_data
- name: CodeExecutionTool
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
    data_selector: tool_data
- name: UrlContextTool
  endpoint:
    path: /builtin_tools/url_context
    method: GET
    data_selector: tool_data
- name: ImageGenerationTool
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
    data_selector: tool_data
- name: MemoryTool
  endpoint:
    path: /builtin_tools/memory
    method: GET
    data_selector: tool_data
- name: MCPServerTool
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
    data_selector: tool_data
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: ModelResponseStreamEvent
  endpoint:
    path: __iter__
    method: GET
    data_selector: events
- name: ModelResponse
  endpoint:
    path: get
    method: GET
    data_selector: response
- name: RequestUsage
  endpoint:
    path: usage
    method: GET
    data_selector: usage
- name: model_name
  endpoint:
    path: model_name
    method: GET
    data_selector: model_name
- name: timestamp
  endpoint:
    path: timestamp
    method: GET
    data_selector: timestamp
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: agent_run
  endpoint:
    path: /api/run
    method: GET
    data_selector: events
    params: {}
- name: agent_run
  endpoint:
    path: /run
    method: POST
    data_selector: output
    params: {}
- name: agent_run_stream
  endpoint:
    path: /run_stream
    method: GET
    data_selector: results
- name: agent_run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
- name: video
  endpoint:
    path: /video
    method: GET
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: BinaryContent
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: ToolReturn
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: UserPromptPart
    params: {}
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: RetryPromptPart
    params: {}
- name: ModelRequest
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: POST
    data_selector: ModelRequest
    params: {}
- name: content
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: content
    params: {}
- name: id
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: id
    params: {}
- name: part_kind
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: part_kind
    params: {}
- name: has_content
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: has_content
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/PartStartEvent
    method: GET
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/PartDeltaEvent
    method: GET
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/FinalResultEvent
    method: GET
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/FunctionToolCallEvent
    method: GET
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/FunctionToolResultEvent
    method: GET
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolCallEvent
    method: GET
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/BuiltinToolResultEvent
    method: GET
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai/AgentStreamEvent
    method: GET
- name: OutputDataT
  endpoint:
    path: /pydantic_ai/OutputDataT
    method: GET
- name: ToolOutput
  endpoint:
    path: /pydantic_ai/ToolOutput
    method: GET
- name: NativeOutput
  endpoint:
    path: /pydantic_ai/NativeOutput
    method: GET
- name: PromptedOutput
  endpoint:
    path: /pydantic_ai/PromptedOutput
    method: GET
- name: TextOutput
  endpoint:
    path: /pydantic_ai/TextOutput
    method: GET
- name: agent_run_result
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
    params: {}
- name: agent_run_result_event
  endpoint:
    path: /agent/run/result/event
    method: GET
    data_selector: event
    params: {}
- name: max_tokens
  endpoint:
    path: /max_tokens
    method: GET
    data_selector: max_tokens
    params: {}
- name: temperature
  endpoint:
    path: /temperature
    method: GET
    data_selector: temperature
    params: {}
- name: top_p
  endpoint:
    path: /top_p
    method: GET
    data_selector: top_p
    params: {}
- name: timeout
  endpoint:
    path: /timeout
    method: GET
    data_selector: timeout
    params: {}
- name: parallel_tool_calls
  endpoint:
    path: /parallel_tool_calls
    method: GET
    data_selector: parallel_tool_calls
    params: {}
- name: seed
  endpoint:
    path: /seed
    method: GET
    data_selector: seed
    params: {}
- name: presence_penalty
  endpoint:
    path: /presence_penalty
    method: GET
    data_selector: presence_penalty
    params: {}
- name: frequency_penalty
  endpoint:
    path: /frequency_penalty
    method: GET
    data_selector: frequency_penalty
    params: {}
- name: logit_bias
  endpoint:
    path: /logit_bias
    method: GET
    data_selector: logit_bias
    params: {}
- name: stop_sequences
  endpoint:
    path: /stop_sequences
    method: GET
    data_selector: stop_sequences
    params: {}
- name: extra_headers
  endpoint:
    path: /extra_headers
    method: GET
    data_selector: extra_headers
    params: {}
- name: extra_body
  endpoint:
    path: /extra_body
    method: GET
    data_selector: extra_body
    params: {}
- name: model_names
  endpoint:
    path: /model/names
    method: GET
    data_selector: titles
- name: gemini_response
  endpoint:
    path: /api/v1/gemini_response
    method: GET
    data_selector: records
    params: {}
- name: mistral_model
  endpoint:
    path: /mistral/model
    method: POST
    data_selector: data
    params: {}
- name: Case
  endpoint:
    path: /pydantic_evals/case
    method: GET
    data_selector: cases
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: datasets
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: records
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: POST
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: dataset
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: POST
    data_selector: json_schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: attribute
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: metric
    params: {}
- name: SpanNode
  endpoint:
    path: /span_tree
    method: GET
    data_selector: spans
    params: {}
- name: ReportCase
  endpoint:
    path: /pydantic_evals/reporting/ReportCase
    method: GET
    data_selector: case
    params: {}
- name: ReportCaseFailure
  endpoint:
    path: /pydantic_evals/reporting/ReportCaseFailure
    method: GET
    data_selector: case_failure
    params: {}
- name: ReportCaseAggregate
  endpoint:
    path: /pydantic_evals/reporting/ReportCaseAggregate
    method: GET
    data_selector: aggregate_case
    params: {}
- name: EvaluationReport
  endpoint:
    path: /pydantic_evals/reporting/EvaluationReport
    method: GET
    data_selector: evaluation_report
    params: {}
- name: cases
  endpoint:
    path: /cases
    method: GET
    data_selector: cases
    params: {}
- name: failures
  endpoint:
    path: /failures
    method: GET
    data_selector: failures
    params: {}
- name: Graph
  endpoint:
    path: /pydantic_graph/beta/graph
    method: GET
    data_selector: nodes
    params: {}
- name: Decision
  endpoint:
    path: /pydantic_graph/beta/decision
    method: GET
    data_selector: branches
    params: {}
- name: DecisionBranch
  endpoint:
    path: /pydantic_graph/beta/decisionBranch
    method: GET
    data_selector: source
    params: {}
- name: GraphTask
  endpoint:
    path: /pydantic_graph/beta/graph.py
    method: GET
- name: GraphRun
  endpoint:
    path: /pydantic_graph/beta/graph.py
    method: GET
- name: GraphBuilder
  endpoint:
    path: /pydantic_graph/beta/graph_builder.py
    method: GET
- name: Step
  endpoint:
    path: /pydantic_graph/step
    method: GET
    data_selector: nodes
    params: {}
- name: Graph
  endpoint:
    path: /pydantic_graph/graph
    method: GET
    data_selector: graphs
    params: {}
- name: graph_run
  endpoint:
    path: /graph/run
    method: POST
    data_selector: result
- name: graph_iter
  endpoint:
    path: /graph/iter
    method: GET
    data_selector: result
- name: graph_initialize
  endpoint:
    path: /graph/initialize
    method: POST
    data_selector: result
- name: snapshot_node
  endpoint:
    path: /snapshot_node
    method: POST
- name: snapshot_node_if_new
  endpoint:
    path: /snapshot_node_if_new
    method: POST
- name: snapshot_end
  endpoint:
    path: /snapshot_end
    method: POST
- name: record_run
  endpoint:
    path: /record_run
    method: POST
- name: load_next
  endpoint:
    path: /load_next
    method: GET
- name: load_all
  endpoint:
    path: /load_all
    method: GET
- name: FileStatePersistence
  endpoint:
    path: /pydantic_graph/persistence/file.py
    method: GET
    data_selector: json_file
    params: {}
- name: agent
  endpoint:
    path: /api/pydantic_ai/agent
    method: POST
    data_selector: result
    params: {}
- name: mcpServers
  endpoint:
    path: /mcpServers
    method: GET
    data_selector: servers
    params: {}
- name: agent
  endpoint:
    path: /agents
    method: POST
    data_selector: agent
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /result/messages
    method: GET
    data_selector: messages
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
- name: dice_game
  endpoint:
    path: /dice_game
    method: GET
    data_selector: results
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result
    params: {}
- name: email_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
- name: feedback
  endpoint:
    path: /feedback/submit
    method: POST
    data_selector: result.output
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: records
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: records
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
    params: {}
- name: AgentStreamEvent
  endpoint:
    path: /agent/stream/events
    method: GET
    data_selector: events
- name: AgentRunResultEvent
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
    params: {}
- name: web_search
  endpoint:
    path: /builtin_tools/web_search
    method: GET
- name: code_execution
  endpoint:
    path: /builtin_tools/code_execution
    method: GET
- name: url_context
  endpoint:
    path: /builtin_tools/url_context
    method: GET
- name: image_generation
  endpoint:
    path: /builtin_tools/image_generation
    method: GET
- name: memory
  endpoint:
    path: /builtin_tools/memory
    method: GET
- name: mcp_server
  endpoint:
    path: /builtin_tools/mcp_server
    method: GET
- name: tavily_search_tool
  endpoint:
    path: /api/tavily/search
    method: POST
    data_selector: results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: DBOSAgent
  endpoint:
    path: /pydantic_ai/dbos_agent
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: result
- name: get_tools
  endpoint:
    path: /get_tools
    method: GET
    data_selector: tools
    params: {}
- name: call_tool
  endpoint:
    path: /call_tool
    method: POST
    data_selector: result
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params:
      user_prompt: str | Sequence[UserContent] | None
      output_type: OutputSpec[RunOutputDataT] | None
      message_history: Sequence[ModelMessage] | None
      deferred_tool_results: DeferredToolResults | None
      model: Model | KnownModelName | str | None
      deps: AgentDepsT | None
      model_settings: ModelSettings | None
      usage_limits: UsageLimits | None
      usage: RunUsage | None
      infer_name: bool
      toolsets: Sequence[AbstractToolset[AgentDepsT]] | None
      builtin_tools: Sequence[AbstractBuiltinTool] | None
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params:
      user_prompt: str | Sequence[UserContent] | None
      output_type: OutputSpec[RunOutputDataT] | None
      message_history: Sequence[ModelMessage] | None
      deferred_tool_results: DeferredToolResults | None
      model: Model | KnownModelName | str | None
      deps: AgentDepsT | None
      model_settings: ModelSettings | None
      usage_limits: UsageLimits | None
      usage: RunUsage | None
      infer_name: bool
      toolsets: Sequence[AbstractToolset[AgentDepsT]] | None
      builtin_tools: Sequence[AbstractBuiltinTool] | None
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: nodes
- name: VideoUrl
  endpoint:
    path: /video-url
    method: GET
- name: AudioUrl
  endpoint:
    path: /audio-url
    method: GET
- name: ImageUrl
  endpoint:
    path: /image-url
    method: GET
- name: DocumentUrl
  endpoint:
    path: /document-url
    method: GET
- name: BinaryContent
  endpoint:
    path: /binary-content
    method: POST
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
    data_selector: records
    params: {}
- name: request
  endpoint:
    path: /request
    method: POST
    data_selector: response
- name: AgentRunResult
  endpoint:
    path: /agent/run/result
    method: GET
    data_selector: result
    params: {}
- name: AgentRunResultEvent
  endpoint:
    path: /agent/run/result/event
    method: GET
    data_selector: event
    params: {}
- name: AbstractToolset
  endpoint:
    path: /pydantic_ai/toolsets/abstract
    method: GET
    data_selector: toolset
    params: {}
- name: CombinedToolset
  endpoint:
    path: /pydantic_ai/toolsets/combined
    method: GET
    data_selector: toolset
    params: {}
- name: ExternalToolset
  endpoint:
    path: /pydantic_ai/toolsets/external
    method: GET
    data_selector: toolset
    params: {}
- name: model_settings
  endpoint:
    path: /models/settings
    method: GET
    data_selector: settings
- name: MistralModel
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: model_name
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
- name: web_search
  endpoint:
    path: /v1/web_search
    method: POST
    data_selector: results
    params: {}
- name: code_interpreter
  endpoint:
    path: /v1/code_interpreter
    method: POST
    data_selector: output
    params: {}
- name: Case
  endpoint:
    path: /pydantic_evals/case
    method: POST
    data_selector: case
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: dataset
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: evaluator
  endpoint:
    path: /pydantic_evals/evaluator
    method: GET
    data_selector: evaluators
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/pydantic_evals/dataset.py
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: cases
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluators
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: GET
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: POST
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: POST
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: success
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: success
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: success
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: none
    params: {}
- name: contains
  endpoint:
    path: /contains
    method: POST
    data_selector: none
    params: {}
- name: equals
  endpoint:
    path: /equals
    method: POST
    data_selector: none
    params: {}
- name: equals_expected
  endpoint:
    path: /equals_expected
    method: POST
    data_selector: none
    params: {}
- name: has_matching_span
  endpoint:
    path: /has_matching_span
    method: POST
    data_selector: none
    params: {}
- name: is_instance
  endpoint:
    path: /is_instance
    method: POST
    data_selector: none
    params: {}
- name: llm_judge
  endpoint:
    path: /llm_judge
    method: POST
    data_selector: none
    params: {}
- name: max_duration
  endpoint:
    path: /max_duration
    method: POST
    data_selector: none
    params: {}
- name: SpanNode
  endpoint:
    path: /span_node
    method: GET
    data_selector: nodes
    params: {}
- name: ReportCase
  endpoint:
    path: /reportcase
    method: GET
    data_selector: cases
    params: {}
- name: ReportCaseFailure
  endpoint:
    path: /reportcasefailure
    method: GET
    data_selector: failures
    params: {}
- name: EvaluationReport
  endpoint:
    path: /evaluationreport
    method: GET
    data_selector: reports
    params: {}
- name: report_case
  endpoint:
    path: /report/cases
    method: GET
- name: report_failures
  endpoint:
    path: /report/failures
    method: GET
- name: Graph
  endpoint:
    path: /pydantic_graph/beta/graph
    method: GET
    data_selector: nodes
    params: {}
- name: Graph
  endpoint:
    path: /pydantic_graph/graph.py
    method: GET
    data_selector: nodes
    params: {}
- name: GraphRunResult
  endpoint:
    path: /pydantic_graph/graph_run_result
    method: GET
    data_selector: output
    params: {}
- name: FileStatePersistence
  endpoint:
    path: /pydantic_graph/persistence/file.py
    method: GET
    data_selector: FileStatePersistence
    params: {}
- name: dataset
  endpoint:
    path: /dataset/evaluate_sync
    method: POST
    data_selector: report
    params: {}
- name: agent
  endpoint:
    path: /agent/run
    method: POST
    data_selector: result
    params: {}
- name: MCPServerStreamableHTTP
  endpoint:
    path: /mcp
    method: GET
- name: MCPServerSSE
  endpoint:
    path: /sse
    method: GET
- name: MCPServerStdio
  endpoint:
    path: /stdio
    method: GET
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: GET
    data_selector: agent_data
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: model_request
  endpoint:
    path: /model/request
    method: POST
    data_selector: parts
    params: {}
- name: roll_dice
  endpoint:
    path: /roll_dice
    method: GET
    data_selector: result
    params: {}
- name: get_player_name
  endpoint:
    path: /get_player_name
    method: GET
    data_selector: name
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result.output
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AGUIApp
  endpoint:
    path: /
    method: POST
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: event
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: AgentRun
  endpoint:
    path: /iter
    method: POST
    data_selector: nodes
    params: {}
- name: agent_run
  endpoint:
    path: /agent_run
    method: GET
    data_selector: nodes
- name: messages_to_otel_events
  endpoint:
    path: /messages_to_otel_events
    method: POST
    data_selector: events
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: ModelResponseStreamEvent
  endpoint:
    path: /stream/response
    method: GET
    data_selector: events
- name: ModelResponse
  endpoint:
    path: /response
    method: GET
    data_selector: response
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_run
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
    params: {}
- name: agent_run_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: GET
    data_selector: records
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: video_url
  endpoint:
    path: /video_url
    method: GET
    data_selector: url
    params: {}
- name: audio_url
  endpoint:
    path: /audio_url
    method: GET
    data_selector: url
    params: {}
- name: image_url
  endpoint:
    path: /image_url
    method: GET
    data_selector: url
    params: {}
- name: document_url
  endpoint:
    path: /document_url
    method: GET
    data_selector: url
    params: {}
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: ModelRequest
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: content
  endpoint:
    path: /content
    method: GET
- name: id
  endpoint:
    path: /id
    method: GET
- name: part_kind
  endpoint:
    path: /part_kind
    method: GET
- name: has_content
  endpoint:
    path: /has_content
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: PartStartEvent
  endpoint:
    path: /pydantic_ai/messages/PartStartEvent
    method: GET
    data_selector: records
- name: PartDeltaEvent
  endpoint:
    path: /pydantic_ai/messages/PartDeltaEvent
    method: GET
    data_selector: records
- name: FinalResultEvent
  endpoint:
    path: /pydantic_ai/messages/FinalResultEvent
    method: GET
    data_selector: records
- name: FunctionToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolCallEvent
    method: GET
    data_selector: records
- name: FunctionToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/FunctionToolResultEvent
    method: GET
    data_selector: records
- name: BuiltinToolCallEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolCallEvent
    method: GET
    data_selector: records
- name: BuiltinToolResultEvent
  endpoint:
    path: /pydantic_ai/messages/BuiltinToolResultEvent
    method: GET
    data_selector: records
- name: AgentStreamEvent
  endpoint:
    path: /pydantic_ai/messages/AgentStreamEvent
    method: GET
    data_selector: records
- name: OutputDataT
  endpoint:
    path: /pydantic_ai/output/OutputDataT
    method: GET
    data_selector: records
- name: max_tokens
  endpoint:
    path: /max_tokens
    method: GET
- name: temperature
  endpoint:
    path: /temperature
    method: GET
- name: top_p
  endpoint:
    path: /top_p
    method: GET
- name: timeout
  endpoint:
    path: /timeout
    method: GET
- name: parallel_tool_calls
  endpoint:
    path: /parallel_tool_calls
    method: GET
- name: seed
  endpoint:
    path: /seed
    method: GET
- name: presence_penalty
  endpoint:
    path: /presence_penalty
    method: GET
- name: frequency_penalty
  endpoint:
    path: /frequency_penalty
    method: GET
- name: logit_bias
  endpoint:
    path: /logit_bias
    method: GET
- name: stop_sequences
  endpoint:
    path: /stop_sequences
    method: GET
- name: extra_headers
  endpoint:
    path: /extra_headers
    method: GET
- name: extra_body
  endpoint:
    path: /extra_body
    method: GET
- name: FallbackModel
  endpoint:
    path: /pydantic_ai/models/fallback
    method: GET
    data_selector: models
    params: {}
- name: FunctionModel
  endpoint:
    path: /pydantic_ai/models/function
    method: GET
    data_selector: models
    params: {}
- name: gemini_streamed_response
  endpoint:
    path: /gemini/streamed_response
    method: GET
    data_selector: responses
- name: chat_completion
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: mistral_model
  endpoint:
    path: /models/mistral
    method: GET
    data_selector: models
    params: {}
- name: MistralStreamedResponse
  endpoint:
    path: /streamed_response
    method: POST
    data_selector: response
    params: {}
- name: OpenAIChatModel
  endpoint:
    path: /chat_model
    method: POST
    data_selector: model_response
    params: {}
- name: TestModel
  endpoint:
    path: /test/model
    method: GET
    data_selector: data
    params: {}
- name: case
  endpoint:
    path: /pydantic_evals/case
    method: POST
    data_selector: case
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: dataset
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: add_case
  endpoint:
    path: /add_case
    method: POST
    data_selector: case
    params: {}
- name: add_evaluator
  endpoint:
    path: /add_evaluator
    method: POST
    data_selector: evaluator
    params: {}
- name: from_file
  endpoint:
    path: /from_file
    method: GET
    data_selector: dataset
    params: {}
- name: from_text
  endpoint:
    path: /from_text
    method: GET
    data_selector: dataset
    params: {}
- name: from_dict
  endpoint:
    path: /from_dict
    method: GET
    data_selector: dataset
    params: {}
- name: to_file
  endpoint:
    path: /to_file
    method: POST
    data_selector: success
    params: {}
- name: model_json_schema_with_evaluators
  endpoint:
    path: /model_json_schema_with_evaluators
    method: GET
    data_selector: schema
    params: {}
- name: set_eval_attribute
  endpoint:
    path: /set_eval_attribute
    method: POST
    data_selector: success
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: success
    params: {}
- name: ExactMatch
  endpoint:
    path: /pydantic_evals/evaluators/evaluator.py
    method: GET
    data_selector: records
    params: {}
- name: EvaluatorFailure
  endpoint:
    path: /pydantic_evals/evaluators/evaluator.py
    method: GET
    data_selector: records
    params: {}
- name: EvaluatorOutput
  endpoint:
    path: /pydantic_evals/evaluators/evaluator.py
    method: GET
    data_selector: records
    params: {}
- name: EvaluatorSpec
  endpoint:
    path: /pydantic_evals/evaluators/spec.py
    method: GET
    data_selector: records
    params: {}
- name: span_node
  endpoint:
    path: /span/node
    method: GET
    data_selector: records
- name: ReportCase
  endpoint:
    path: /report/case
    method: GET
    data_selector: cases
    params: {}
- name: ReportCaseFailure
  endpoint:
    path: /report/case/failure
    method: GET
    data_selector: failures
    params: {}
- name: EvaluationReport
  endpoint:
    path: /report/evaluation
    method: GET
    data_selector: reports
    params: {}
- name: Graph
  endpoint:
    path: /pydantic_graph/beta/graph
    method: GET
    data_selector: nodes
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: graph_task
  endpoint:
    path: /services/data/vXX.X/sobjects/GraphTask
    method: GET
    data_selector: records
- name: graph_run
  endpoint:
    path: /services/data/vXX.X/sobjects/GraphRun
    method: GET
    data_selector: records
- name: mermaid_image
  endpoint:
    path: /mermaid_image
    method: GET
    data_selector: bytes
- name: mermaid_save
  endpoint:
    path: /mermaid_save
    method: POST
    data_selector: None
- name: NodeSnapshot
  endpoint:
    path: /pydantic_graph/persistence/NodeSnapshot
    method: GET
    data_selector: records
- name: EndSnapshot
  endpoint:
    path: /pydantic_graph/persistence/EndSnapshot
    method: GET
    data_selector: records
- name: snapshot_node
  endpoint:
    path: /snapshot_node
    method: POST
    data_selector: NodeSnapshot
    params: {}
- name: snapshot_node_if_new
  endpoint:
    path: /snapshot_node_if_new
    method: POST
    data_selector: NodeSnapshot
    params: {}
- name: snapshot_end
  endpoint:
    path: /snapshot_end
    method: POST
    data_selector: EndSnapshot
    params: {}
- name: record_run
  endpoint:
    path: /record_run
    method: POST
    data_selector: NodeSnapshot
    params: {}
- name: load_next
  endpoint:
    path: /load_next
    method: GET
    data_selector: NodeSnapshot
    params: {}
- name: load_all
  endpoint:
    path: /load_all
    method: GET
    data_selector: Snapshot
    params: {}
- name: mcpServerStreamableHTTP
  endpoint:
    path: /mcpServerStreamableHTTP
    method: POST
    data_selector: results
- name: mcpServerSSE
  endpoint:
    path: /mcpServerSSE
    method: POST
    data_selector: results
- name: mcpServerStdio
  endpoint:
    path: /mcpServerStdio
    method: POST
    data_selector: results
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: deepwiki
  endpoint:
    path: /mcp
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: all_messages
    params: {}
- name: streamed_messages
  endpoint:
    path: /streamed/messages
    method: GET
    data_selector: streamed_messages
    params: {}
- name: run_agent
  endpoint:
    path: /run_agent
    method: POST
    data_selector: result
    params: {}
- name: model
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
    params: {}
- name: write_email
  endpoint:
    path: /write_email
    method: POST
    data_selector: output
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: output
- name: handle_ag_ui_request
  endpoint:
    path: /handle_ag_ui_request
    method: POST
    data_selector: response
    params: {}
- name: run_ag_ui
  endpoint:
    path: /run_ag_ui
    method: POST
    data_selector: events
- name: model
  endpoint:
    path: /agent/model
    method: GET
- name: tools
  endpoint:
    path: /agent/tools
    method: GET
- name: toolsets
  endpoint:
    path: /agent/toolsets
    method: GET
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: result
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: events
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: GET
    data_selector: events
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: nodes
    params: {}
- name: override
  endpoint:
    path: /override
    method: GET
    data_selector: none
    params: {}
- name: sequential_tool_calls
  endpoint:
    path: /sequential_tool_calls
    method: GET
    data_selector: none
    params: {}
- name: AgentRun
  endpoint:
    path: /agent/run
    method: GET
    data_selector: result
    params: {}
- name: agent_run
  endpoint:
    path: /pydantic_ai/agent_run
    method: GET
    data_selector: result
    params: {}
- name: WebSearchTool
  endpoint:
    path: /builtin/tools/web_search
    method: GET
- name: CodeExecutionTool
  endpoint:
    path: /builtin/tools/code_execution
    method: GET
- name: UrlContextTool
  endpoint:
    path: /builtin/tools/url_context
    method: GET
- name: ImageGenerationTool
  endpoint:
    path: /builtin/tools/image_generation
    method: GET
- name: MemoryTool
  endpoint:
    path: /builtin/tools/memory
    method: GET
- name: MCPServerTool
  endpoint:
    path: /builtin/tools/mcp_server
    method: GET
- name: duckduckgo_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params: {}
- name: tavily_search
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: output
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: output
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: output
    params: {}
- name: agent_run
  endpoint:
    path: /agent/run
    method: POST
    data_selector: nodes
    params: {}
- name: run_stream
  endpoint:
    path: /run_stream
    method: POST
    data_selector: StreamedRunResult
    params: {}
- name: run_stream_events
  endpoint:
    path: /run_stream_events
    method: POST
    data_selector: AgentStreamEvent | AgentRunResultEvent
    params: {}
- name: iter
  endpoint:
    path: /iter
    method: POST
    data_selector: AgentRun
    params: {}
- name: agent_card
  endpoint:
    path: /.well-known/agent.json
    method: GET
- name: agent_run
  endpoint:
    path: /
    method: POST
- name: docs
  endpoint:
    path: /docs
    method: GET
- name: task
  endpoint:
    path: /tasks/send
    method: POST
    data_selector: submitted
    params: {}
- name: task_status
  endpoint:
    path: /tasks/get
    method: GET
    data_selector: status
    params: {}
- name: task_cancel
  endpoint:
    path: /tasks/cancel
    method: POST
    data_selector: canceled
    params: {}
- name: video
  endpoint:
    path: /
    method: GET
    data_selector: url
- name: BinaryImage
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: ToolReturn
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: UserPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: RetryPromptPart
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/messages.py
    method: GET
- name: max_tokens
  endpoint:
    path: /max_tokens
    method: GET
    data_selector: max_tokens
- name: temperature
  endpoint:
    path: /temperature
    method: GET
    data_selector: temperature
- name: top_p
  endpoint:
    path: /top_p
    method: GET
    data_selector: top_p
- name: timeout
  endpoint:
    path: /timeout
    method: GET
    data_selector: timeout
- name: parallel_tool_calls
  endpoint:
    path: /parallel_tool_calls
    method: GET
    data_selector: parallel_tool_calls
- name: seed
  endpoint:
    path: /seed
    method: GET
    data_selector: seed
- name: presence_penalty
  endpoint:
    path: /presence_penalty
    method: GET
    data_selector: presence_penalty
- name: frequency_penalty
  endpoint:
    path: /frequency_penalty
    method: GET
    data_selector: frequency_penalty
- name: logit_bias
  endpoint:
    path: /logit_bias
    method: GET
    data_selector: logit_bias
- name: stop_sequences
  endpoint:
    path: /stop_sequences
    method: GET
    data_selector: stop_sequences
- name: extra_headers
  endpoint:
    path: /extra_headers
    method: GET
    data_selector: extra_headers
- name: extra_body
  endpoint:
    path: /extra_body
    method: GET
    data_selector: extra_body
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: KnownModelName
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: BedrockModelSettings
  endpoint:
    path: /models/settings
    method: GET
    data_selector: settings
- name: BedrockConverseModel
  endpoint:
    path: /models/converse
    method: POST
    data_selector: response
- name: cohere_model
  endpoint:
    path: /v2/chat
    method: POST
    data_selector: response
    params: {}
- name: FunctionStreamedResponse
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/function.py
    method: GET
    data_selector: records
    params: {}
- name: GoogleModel
  endpoint:
    path: /pydantic_ai_slim/pydantic_ai/models/google.py
    method: GET
    data_selector: records
    params: {}
- name: model_response
  endpoint:
    path: /v1/models
    method: GET
    data_selector: data
    params: {}
- name: model_name
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: mistral_model_settings
  endpoint:
    path: /models/mistral/settings
    method: GET
    data_selector: settings
    params: {}
- name: mistral_model
  endpoint:
    path: /models/mistral
    method: GET
    data_selector: models
    params: {}
- name: OpenAIResponsesModel
  endpoint:
    path: /v1/responses
    method: POST
- name: TestModel
  endpoint:
    path: /v1/models/test
    method: GET
    data_selector: data
    params: {}
- name: Case
  endpoint:
    path: /pydantic_evals/Case
    method: GET
    data_selector: cases
    params: {}
- name: Dataset
  endpoint:
    path: /pydantic_evals/Dataset
    method: GET
    data_selector: datasets
    params: {}
- name: dataset
  endpoint:
    path: /pydantic_evals/dataset
    method: GET
    data_selector: cases
    params: {}
- name: dataset
  endpoint:
    path: /dataset
    method: GET
    data_selector: cases
    params: {}
- name: increment_eval_metric
  endpoint:
    path: /increment_eval_metric
    method: POST
    data_selector: result
    params: {}
- name: contains
  endpoint:
    path: /contains
    method: POST
    data_selector: result
    params: {}
- name: equals
  endpoint:
    path: /equals
    method: POST
    data_selector: result
    params: {}
- name: equals_expected
  endpoint:
    path: /equals_expected
    method: POST
    data_selector: result
    params: {}
- name: has_matching_span
  endpoint:
    path: /has_matching_span
    method: POST
    data_selector: result
    params: {}
- name: is_instance
  endpoint:
    path: /is_instance
    method: POST
    data_selector: result
    params: {}
- name: llm_judge
  endpoint:
    path: /llm_judge
    method: POST
    data_selector: result
    params: {}
- name: max_duration
  endpoint:
    path: /max_duration
    method: POST
    data_selector: result
    params: {}
- name: GradingOutput
  endpoint:
    path: /grading/output
    method: GET
    data_selector: output
    params: {}
- name: descendants
  endpoint:
    path: /descendants
    method: GET
    data_selector: descendants
- name: ancestors
  endpoint:
    path: /ancestors
    method: GET
    data_selector: ancestors
- name: report_case
  endpoint:
    path: /report/case
    method: GET
    data_selector: cases
    params: {}
- name: report_case_failure
  endpoint:
    path: /report/case/failure
    method: GET
    data_selector: failures
    params: {}
- name: evaluation_report
  endpoint:
    path: /evaluation/report
    method: GET
    data_selector: reports
    params: {}
- name: console_table
  endpoint:
    path: /console_table
    method: GET
- name: failures_table
  endpoint:
    path: /failures_table
    method: GET
- name: __str__
  endpoint:
    path: /__str__
    method: GET
- name: graph
  endpoint:
    path: /services/data/vXX.X/sobjects/Graph
    method: GET
    data_selector: records
    params: {}
- name: EndNode
  endpoint:
    path: /pydantic_graph/beta/node/EndNode
    method: GET
    data_selector: __end__
- name: StartNode
  endpoint:
    path: /pydantic_graph/beta/node/StartNode
    method: GET
    data_selector: __start__
- name: graph_task
  endpoint:
    path: /pydantic_graph/graph_task
    method: GET
    data_selector: tasks
    params: {}
- name: graph_run
  endpoint:
    path: /pydantic_graph/graph_run
    method: GET
    data_selector: runs
    params: {}
- name: run
  endpoint:
    path: /run
    method: POST
    data_selector: result
- name: run_sync
  endpoint:
    path: /run_sync
    method: POST
    data_selector: result
- name: iter
  endpoint:
    path: /iter
    method: GET
    data_selector: result
- name: iter_from_persistence
  endpoint:
    path: /iter_from_persistence
    method: GET
    data_selector: result
- name: initialize
  endpoint:
    path: /initialize
    method: POST
    data_selector: result
- name: mermaid_code
  endpoint:
    path: /mermaid_code
    method: GET
    data_selector: result
- name: snapshot_node
  endpoint:
    path: /snapshot_node
    method: POST
    data_selector: snapshot
    params: {}
- name: snapshot_node_if_new
  endpoint:
    path: /snapshot_node_if_new
    method: POST
    data_selector: snapshot
    params: {}
- name: snapshot_end
  endpoint:
    path: /snapshot_end
    method: POST
    data_selector: snapshot
    params: {}
- name: record_run
  endpoint:
    path: /record_run
    method: POST
    data_selector: record
    params: {}
- name: load_next
  endpoint:
    path: /load_next
    method: GET
    data_selector: snapshot
    params: {}
- name: load_all
  endpoint:
    path: /load_all
    method: GET
    data_selector: snapshots
    params: {}
- name: FileStatePersistence
  endpoint:
    path: /pydantic_graph/persistence/file.py
    method: GET
    data_selector: snapshots
    params: {}
- name: geography_agent
  endpoint:
    path: /agents/geography
    method: POST
    data_selector: result
    params: {}
- name: agentic_chat
  endpoint:
    path: /pydantic-ai/feature/agentic_chat
    method: GET
    data_selector: records
    params: {}
- name: agentic_generative_ui
  endpoint:
    path: /pydantic-ai/feature/agentic_generative_ui
    method: GET
    data_selector: records
    params: {}
- name: human_in_the_loop
  endpoint:
    path: /pydantic-ai/feature/human_in_the_loop
    method: GET
    data_selector: records
    params: {}
- name: predictive_state_updates
  endpoint:
    path: /pydantic-ai/feature/predictive_state_updates
    method: GET
    data_selector: records
    params: {}
- name: shared_state
  endpoint:
    path: /pydantic-ai/feature/shared_state
    method: GET
    data_selector: recipe
- name: tool_based_generative_ui
  endpoint:
    path: /pydantic-ai/feature/tool_based_generative_ui
    method: GET
    data_selector: haiku
- name: flights
  endpoint:
    path: /flights/search
    method: POST
    data_selector: flights
    params: {}
- name: doc_sections
  endpoint:
    path: /services/data/vXX.X/sobjects/DocSections
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: send_slack_message
  endpoint:
    path: /chat.postMessage
    method: POST
    data_selector: ok
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather_forecast
    method: GET
    data_selector: output
    params: {}
- name: weather_forecast
  endpoint:
    path: /weather/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: historic_weather
  endpoint:
    path: /weather/historic
    method: GET
    data_selector: historic
    params: {}
- name: mcp
  endpoint:
    path: /mcp
    method: GET
- name: joke_generation
  endpoint:
    path: /
    method: GET
    data_selector: output
- name: number
  endpoint:
    path: /number
    method: GET
    params:
      min: 10
      max: 30
- name: weather
  endpoint:
    path: /weather
    method: GET
    params:
      lat: lat
      lng: lng
notes:
- The strategy for handling multiple tool calls when a final result is found
- Context manager to temporarily override agent name, dependencies, model, toolsets,
  tools, or instructions.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- 'Deprecated: use async with agent instead.'
- Supports running the agent in async and sync modes.
- Event stream handler is optional.
- Provide async-iteration over the nodes in the agent run.
- Requires Python 3.10+
- Logfire comes included with pydantic-ai but not the slim version
- 'UserError: API key must be provided or set in the [MODEL]_API_KEY environment variable'
- Uses async functions to handle requests.
- Streaming events are processed in real-time.
- Usage limits are especially relevant if you've registered many tools.
- The tool_calls_limit is checked before executing tool calls.
- Responses are generated based on the forecast date.
- An agent run might represent an entire conversation — there's no limit to how many
  messages can be exchanged in a single run.
- Be careful when slicing the message history
- When summarizing the message history, ensure tool calls and returns are paired
- History processors replace the message history in the state with the processed messages.
- By default, the OpenAIChatModel uses the OpenAIProvider with the base_url set to
  https://api.openai.com/v1.
- To use Anthropic, generate an API key at console.anthropic.com/settings/keys
- You can set your AWS credentials as environment variables.
- To use Cohere, you need to generate an API key from dashboard.cohere.com/api-keys
- To use Groq through their API, go to console.groq.com/keys and follow your nose
  until you find the place to generate an API key.
- Go to console.mistral.ai/api-keys/ to generate an API key.
- Set the HF_TOKEN environment variable to the token you just created.
- Some models (e.g. Gemini) natively support semi-structured return values, while
  some expect text (OpenAI) but seem to be just as good at extracting meaning from
  the data.
- The list of tool definitions passed to prepare_tools includes both regular function
  tools and tools from any toolsets registered on the agent, but not output tools.
- Dynamically enable or disable tools based on the current model, dependencies, or
  other context
- Modify tool definitions globally (e.g., set all tools to strict mode, change descriptions,
  etc.)
- Always use an async function unless doing blocking I/O or CPU-bound work
- Toolsets can be dynamically built ahead of each agent run or run step.
- LangChain tools can be used with Pydantic AI through LangChainToolset.
- Toolset can dynamically change based on context.
- Requires proper setup of tool definitions for external tools.
- Handling deferred tool calls requires DeferredToolRequests to be in the Agent's
  output_type so that the possible types of the agent run output are correctly inferred.
- When the result of a tool call cannot be generated inside the same agent run in
  which it was called, the tool is considered to be external.
- If whether a tool call should be executed externally depends on the tool call arguments,
  the agent run context, or how long the task is expected to take, you can define
  a tool function and conditionally raise the CallDeferred exception.
- Full feature support for OpenAI and Anthropic.
- Tavily is a paid service, but they have free credits to explore their product.
- Retry functionality for HTTP requests made by model providers through custom HTTP
  transports.
- Uses tenacity for retry functionality on HTTP requests
- Custom retry logic can be implemented for various error types
- 'Start Conservative: Begin with a small number of retries (3-5) and reasonable wait
  times.'
- 'Use Exponential Backoff: This helps avoid overwhelming servers during outages.'
- 'Set Maximum Wait Times: Prevent indefinite delays with reasonable maximum wait
  times.'
- 'Handle Rate Limits Properly: Respect `Retry-After` headers when possible.'
- 'Log Retry Attempts: Add logging to monitor retry behavior in production.'
- 'Consider Circuit Breakers: For high-traffic applications, consider implementing
  circuit breaker patterns.'
- Uses pytest for unit testing.
- TestModel can be used to mock responses.
- Pydantic Evals is a powerful evaluation framework for systematically testing and
  evaluating AI systems.
- Evaluators can be defined at Dataset-level or Case-level.
- Pydantic Evals is built around core concepts including Dataset, Case, and Evaluator.
- AI systems are probabilistic, allowing for qualitative and quantitative evaluations.
- Graphs are a powerful tool but not suitable for every job.
- pydantic-graph is a required dependency of pydantic-ai.
- The beta graph API provides enhanced capabilities for parallel execution, conditional
  branching, and complex workflows.
- The original graph API is still available and compatible with the new beta API.
- Logfire is a commercially supported, hosted platform with an extremely generous
  and perpetual free tier
- Pydantic AI uses OpenTelemetry for observability
- Sensitive content can be excluded from instrumentation events
- Pydantic Logfire is a commercially supported, hosted platform with an extremely
  generous and perpetual free tier.
- Logfire can also be self-hosted on the enterprise tier.
- Pydantic AI uses OpenTelemetry for observability.
- Temporal workflows need to be defined at the top level of the file
- Ensure that functions run in threads are async inside Temporal workflows
- Temporal limits payload size to 2MB.
- When logfire.info is used inside an activity and the pandas package is among your
  project's dependencies, you may encounter an AttributeError due to a circular import.
- DBOS workflows must be deterministic and generally cannot include I/O.
- Steps may perform I/O. If a step fails, it restarts from the beginning.
- Each agent instance must have a unique `name` so Prefect can correctly identify
  and track its flows and tasks.
- Prefect uses client-side task orchestration by default, with optional server connectivity
  for advanced features like scheduling and monitoring.
- Pydantic AI and provider API clients have their own retry logic.
- To access the Prefect UI, you can either use Prefect Cloud or run a local Prefect
  server.
- The AG-UI integration was originally built by the team at Rocket Science and contributed
  in collaboration with the Pydantic AI and CopilotKit teams.
- Uses ASGI application, can be used with any ASGI server
- FastA2A is an agentic framework agnostic implementation of the A2A protocol in Python.
- The only dependencies are starlette, pydantic, opentelemetry-api.
- Data is sent as newline-delimited JSON
- This example requires using a model that understands DuckDB SQL.
- Usage limits set to 15 requests.
- Requires setup of Slack app with specified permissions
- Logfire token and OpenAI API key need to be stored as secrets in Modal
- Requires SLACK_API_KEY environment variable to be set
- An OpenAI API key is required.
- Provides seamless integration between pydantic-ai agents and ag-ui for building
  interactive AI applications with streaming event-based communication.
- An ASGI application that handles every AG-UI request by running the agent.
- Uses a dataclass for tool definitions
- Supports both function tools and output tools
- Tool calls that require approval or external execution can be used as an agent's
  output type.
- Results can be passed to the next agent run using a DeferredToolResults object.
- This is used for both function tools and output tools.
- Can decorate a sync or async functions.
- This is a convenience method that wraps `self.run` with `loop.run_until_complete(...)`.
- This is a convenience method that wraps the run method and uses the event_stream_handler
  kwarg to get a stream of events from the run.
- Please install the `logfire` package to use the Logfire plugin, you can use the
  `logfire` optional group — `pip install "pydantic-ai-slim[logfire]"`
- An agent needs to have a unique `name` in order to be used with DBOS.
- An agent needs to have a `model` in order to be used with DBOS, it cannot be set
  at agent run time.
- A context manager which can be used to iterate over the agent graph's nodes as they
  are executed.
- An agent needs to have a unique `name` in order to be used with Prefect.
- An agent needs to have a `model` in order to be used with Prefect.
- Wrap an agent to enable it with Prefect durable flows.
- The original agent can still be used as normal outside of the Prefect flow.
- A wrapper for FunctionToolset that integrates with Prefect, turning tool calls into
  Prefect tasks.
- A wrapper for MCPServer that integrates with Prefect, turning call_tool and get_tools
  into Prefect tasks.
- A wrapper for Model that integrates with Prefect, turning request and request_stream
  into Prefect tasks.
- Setting output tool return content is not supported for this result type.
- Result validators will NOT be called on the text result if `delta=True`.
- Debouncing is particularly important for long structured responses to reduce the
  overhead of performing validation as each token is received.
- Usage is deprecated, use RunUsage instead
- Each of the limits can be set to `None` to disable that limit.
- Using this class as an async context manager will create a new pool of HTTP connections
  to connect to a server which should already be running.
- Set the `OLLAMA_BASE_URL` environment variable or pass it via `OllamaProvider(base_url=...)`
  to use the Ollama provider.
- If not provided, the `OLLAMA_BASE_URL` environment variable will be used if available.
- If not provided, the `OLLAMA_API_KEY` environment variable will be used if available.
- Create a tenacity-compatible wait strategy that respects HTTP Retry-After headers.
- A2A supports a secure notification mechanism whereby an agent can notify a client
  of an update outside of a connected session via a PushNotificationService.
- 'In September 2025, Pydantic AI reached V1, which means we''re committed to API
  stability: we will not introduce changes that break your code until V2 (if we do,
  you can shout at us as it''s definitely a mistake). Once we release V2, in April
  2026 at the earliest, we''ll continue to provide security fixes for V1 for another
  6 months minimum, so you have time to upgrade your applications.'
- Uses ASGI application and can be used with any ASGI server
- Use request_limit to bound the number of model turns, and tool_calls_limit to cap
  the number of successful tool executions within a run.
- Pydantic AI is designed to help you quickly build production grade applications
  with Generative AI.
- If you're on a Logfire Pro plan, you can also get a dedicated private slack collab
  channel with us.
- You can use custom httpx clients in your models in order to access specific requests,
  responses, and headers at runtime.
- Pydantic AI supports built-in tools like WebSearchTool, CodeExecutionTool, ImageGenerationTool,
  UrlContextTool, MemoryTool, and MCPServerTool.
- The GitHub MCP server requires an authorization token.
- If a tool call should be executed externally depends on the tool call arguments.
- In reality, you'd likely use Celery or a similar task queue to run the task in the
  background.
- Some models do not support image input. Please check the model's documentation to
  confirm whether it supports image input.
- Some models do not support audio input. Please check the model's documentation to
  confirm whether it supports audio input.
- Some models do not support video input. Please check the model's documentation to
  confirm whether it supports video input.
- Some models do not support document input. Please check the model's documentation
  to confirm whether it supports document input.
- Pydantic AI is designed to help you quickly, confidently, and painlessly build production
  grade applications and workflows with Generative AI.
- If you call run, run_sync, or run_stream more than once within a single capture_run_messages
  context, messages will represent the messages exchanged during the first call only.
- The DeepWiki MCP server does not require authorization.
- Final result message will NOT be added to result messages if using .stream_text(delta=True)
- If models behave unexpectedly (e.g., the retry limit is exceeded, or their API returns
  `503`), agent runs will raise UnexpectedModelBehavior.
- Usage limits can be set on token, requests, and tool calls.
- Model settings can influence requests with parameters like temperature and max_tokens.
- Uses async operations for API calls.
- 'Pydantic AI is available on PyPI as pydantic-ai so installation is as simple as:
  pip install pydantic-ai'
- app is an ASGI application, it can be used with any ASGI server
- Supports async operations for weather queries.
- If you call run, run_sync, or run_stream more than once within a single `capture_run_messages`
  context, `messages` will represent the messages exchanged during the first call
  only.
- Dependencies are accessed through the RunContext type.
- Asynchronous vs. Synchronous dependencies.
- When to Use the direct API vs Agent.
- Pydantic AI provides retry functionality for HTTP requests made by model providers
  through custom HTTP transports.
- The retry functionality is built on top of the tenacity library and integrates seamlessly
  with httpx clients.
- Automatically parses `Retry-After` headers from HTTP 429 responses
- Supports both seconds format (`"30"`) and HTTP date format (`"Wed, 21 Oct 2015 07:28:00
  GMT"`)
- Falls back to your chosen strategy when no header is present
- Respects the `max_wait` limit to prevent excessive delays
- Integrates with OpenTelemetry observability platform for debugging and performance
  monitoring.
- AG-UI integration requires installation of ag-ui-protocol and starlette
- Ensure to use a compatible ASGI server like uvicorn
- Pydantic AI supports both synchronous and asynchronous operations.
- Fully Type-safe
- Durable Execution
- Usage limits can be set for tokens, requests, and tool calls.
- Uses API key for authorization
- Built by the Pydantic Team, supporting various models and providers.
- Integrates with Pydantic Logfire for observability.
- You can instruct Pydantic AI to download file content instead of using URLs by setting
  force_download to True.
- YouTube video URLs are sent directly in the request to the model.
- This example is complete, it can be run 'as is', assuming you've installed the `pydantic_ai`
  package.
- Pydantic AI provides access to messages exchanged during an agent run.
- Both RunResult and StreamedRunResult have methods for accessing messages.
- Multiple agents can be called in succession.
- Uses dependencies for managing API keys.
- 'Model settings can be applied at multiple levels: model, agent, and run-time.'
- Dynamic instructions will always be reevaluated.
- Captures messages exchanged during the run to help diagnose issues.
- Validation of the tool arguments will not be performed, and this will pass all arguments
  as keyword arguments.
- Designed to help quickly build production grade applications with Generative AI.
- Uses asynchronous calls for streaming weather data.
- Models may have specific limitations regarding input types.
- GoogleModel supports multi-modal input, including documents, images, audio, and
  video.
- To use Hugging Face inference, you'll need to set up an account which will give
  you free tier allowance on Inference Providers.
- State persistence implementations include SimpleStatePersistence, FullStatePersistence,
  and FileStatePersistence.
- Built by the Pydantic Team
- 'Model-agnostic: Supports virtually every model and provider'
- Pydantic AI is available on PyPI as pydantic-ai
- Uses async functions to handle weather data requests.
- Gemini may not access certain URLs due to crawling restrictions.
- You can set the boolean flag `force_download` to `True` to instruct Pydantic AI
  to download file content.
- Usage now includes 4 requests — 2 from the calling agent and 2 from the delegate
  agent.
- Each model's options should be configured individually.
- The FallbackModel itself doesn't have settings - it uses the individual settings
  of whichever model successfully handles the request.
- Pydantic AI is designed to help build production-grade applications with Generative
  AI.
- State persistence allows graphs to be interrupted and resumed.
- FullStatePersistence retains a history of snapshots.
- Returns a streaming Starlette response with AG-UI protocol events.
- Only 'SELECT *' is supported in SQL queries.
- Handles AG-UI requests by running the agent.
- Defaults to 1 retry for tool functions.
- Defaults to 'auto' for docstring format.
- Installation is as simple as running 'pip install pydantic-ai'
- Pydantic AI is compatible with Python 3.10+
- Messages can be used to continue a coherent conversation.
- Messages can be stored and loaded to/from JSON.
- Requires GCP project setup and proper IAM permissions.
- Graphs are a powerful abstraction to model, execute, control and visualize complex
  workflows.
- If no sampling model is provided, the agent's model will be used.
- Either `function` or `stream_function` must be provided, providing both is allowed.
- Pydantic AI has an excellent (but completely optional) integration with Pydantic
  Logfire to help you view and understand agent runs.
- Capping tool calls can prevent excessive tool calling.
- Handles every AG-UI request by running the agent.
- Uses OAuth2 with refresh token — requires setup of connected app in pydantic_ai
- Some models may return nulls in deeply nested fields
- This is a convenience method that wraps self.run with `loop.run_until_complete(...)`.
- Please install the `logfire` package to use the Logfire plugin.
- You therefore can't use this method inside async code or if there's an active event
  loop.
- A context manager to temporarily override agent name, dependencies, model, toolsets,
  tools, or instructions.
- Wraps requests in a DBOS step.
- Requires setup for event stream handler.
- The server will always either send a "submitted" or a "failed" on `tasks/send`.
- Set the `OVHCLOUD_API_KEY` environment variable or pass it via `OVHcloudProvider(api_key=...)`
  to use OVHcloud AI Endpoints provider.
- StreamedRunResult.stream is deprecated, use stream_output instead.
- StreamedRunResult.stream_structured is deprecated, use stream_responses instead.
- validate_structured_output is deprecated, use validate_response_output instead.
- Use the Groq Python client for interaction with the API.
- Ensure the correct model name is provided.
- Use the appropriate provider for authentication.
- Ensure proper OAuth2 setup for Mistral API.
- Check model names in the API documentation for available options.
- Uses OAuth2 with refresh token — requires setup of connected app in mistral
- Use OpenAIResponsesModel for OpenAI Responses API.
- This model is specifically for testing purposes.
- The SpanTree builds a hierarchy of SpanNode objects from a list of finished spans.
- The reporting module evaluates model performance and logs results.
- This class serves as a wrapper for types that cannot normally be used in positions
  requiring `type[T]`, such as `Any`, `Union[...]`, or `Literal[...]`.
- This module provides the GraphBuilder class and related utilities for constructing
  typed, executable graph definitions with steps, joins, decisions, and edge routing.
- Graph is a collection of nodes that can be run in sequence.
- Uses external service at mermaid.ink to render images.
- Agent tools are automatically wrapped as Prefect tasks, which means they benefit
  from retry logic, caching, and observability.
- Model-agnostic
- Usage limits can be enforced on token usage, requests, and tool calls.
- This API does not require authentication.
- Custom HTTP client can be used with GoogleProvider.
- Supports state persistence for interrupted executions.
- This method allows streaming of events from the agent run.
- This API allows for streaming events from agent runs.
- A contextmanager which can be used to iterate over the agent graph's nodes as they
  are executed.
- Provides async-iteration over the nodes in the agent run.
- Uses web search capabilities for current data.
- Messages can be accessed after running an agent.
- Ensure to handle the output type correctly to avoid losing the provided output.
- GoogleModel supports multi-modal input.
- Ensure proper setup for API keys.
- Yields streaming event chunks encoded as strings according to the accept header
  value.
- This method builds an internal agent graph (using system prompts, tools and output
  schemas) and then runs the graph to completion.
- This is a convenience method that wraps self.run with loop.run_until_complete(...)
- Run the agent with a user prompt in async streaming mode.
- The AgentRun can be used to async-iterate over the nodes of the graph as they are
  executed.
- Model-agnostic and supports various AI models and providers
- Supports multi-modal input, including documents, images, audio, and video.
- Graphs are a powerful tool but not the right tool for every job.
- Supports Graphs with state persistence for interrupted execution.
- Allows for dependency injection in graph execution.
- Uses async methods for running the agent.
- This method builds an internal agent graph and runs the graph until the model produces
  output matching the `output_type`.
- Please install the `logfire` package to use the Logfire plugin, you can use the
  `logfire` optional group â€” `pip install "pydantic-ai-slim[logfire]"`
- An agent needs to have a unique `name` in order to be used with DBOS. The name will
  be used to identify the agent's workflows and steps.
- Uses async context manager for handling agent runs.
- Uses DBOS API for model requests and event streaming.
- This method builds an internal agent graph and runs it to completion.
- The run_sync method cannot be used inside async code or if there's an active event
  loop.
- Requires setup of Application Default Credentials for Vertex AI APIs.
- Check model configuration for Bedrock for details on authentication.
- Bedrock supports a variety of date-stamped models.
- Cohere supports a variety of date-stamped models.
- Uses OAuth2 with refresh token — requires setup of connected app in API
- 'Answer in JSON Object, respect the format:


  {schema}


  '
- Uses OAuth2 for authentication.
- This API requires authentication via OAuth2.
- Ensure you have the correct scopes for accessing the model.
- This library provides a way to organize and evaluate test cases.
- A container that builds a hierarchy of SpanNode objects from a list of finished
  spans.
- The Graph class represents a complete workflow graph with typed inputs, outputs,
  state, and dependencies.
- Graph builder requires specific type hints for nodes and edges.
- Uses external service
- In memory state persistence is used by default if no implementation is provided.
- File based state persistence that holds graph run state in a JSON file.
- Example includes simple evaluations and data processing
- Each agent instance must have a unique name so Prefect can correctly identify and
  track its flows and tasks.
- MCPServerStreamableHTTP requires an MCP server to be running and accepting HTTP
  connections before running the agent.
- The SSE transport in MCP is deprecated, you should use Streamable HTTP instead.
- Handles dynamic toolsets and deferred tool requests.
- Follow your nose until you find the place to generate an API key.
- Uses async functions for handling email feedback.
- Ensure proper user input for email content.
- Streaming response with AG-UI protocol events
- Accept header value defaults to SSE_CONTENT_TYPE
- This method builds an internal agent graph (using system prompts, tools and output
  schemas) and then returns an `AgentRun` object.
- If you're running into issues with setting the API key for your model, visit the
  Models page to learn more about how to set an environment variable and/or pass in
  an api_key argument.
- Usage limits are especially relevant if you've registered many tools. Use request_limit
  to bound the number of model turns, and tool_calls_limit to cap the number of successful
  tool executions within a run.
- Requires API key for authentication.
- The FallbackModel itself doesn't have settings.
- The email feedback must reference the user's specific interests.
- Streaming response with AG-UI protocol events.
- Input data must be validated against RunAgentInput.
- The method allows streaming of events from agent runs.
- Supports various LLM models and providers.
- Agent can be run with any ASGI server.
- Uses API key for authentication
- Uses dynamic toolsets based on agent run context
- Uses Google API with API key — requires setup of project in GCP
- Graphs are a powerful tool for modeling complex workflows.
- Returns a streaming response with AG-UI protocol events.
- This is a convenience method for running the agent in async mode.
- Ensure the API key is set in the headers for authentication.
- FallbackModel only moves on to the next model if the current model raises a ModelHTTPError.
- The email must reference the user's specific interests.
- Accept header default is SSE_CONTENT_TYPE.
- Uses OpenTelemetry for instrumentation.
- This method builds an internal agent graph using system prompts and tools.
- Older OTel/logfire versions don't support explicit_bucket_boundaries_advisory
- ASGI application can be used with any ASGI server.
- The API supports async operations for fetching weather data.
- Uses tools to perform actions and retrieve extra information.
- The FallbackModel uses the individual settings of whichever model successfully handles
  the request.
- This agent requires user input for feedback.
- To provide different `deps` for each request, use pydantic_ai.ag_ui.run_ag_ui or
  pydantic_ai.ag_ui.handle_ag_ui_request.
- Requires AG-UI run input containing thread_id, run_id, messages, etc.
- Streaming event chunks encoded as strings according to the accept header value.
- If you call `run`, `run_sync`, or `run_stream` more than once within a single `capture_run_messages`
  context, `messages` will represent the messages exchanged during the first call
  only.
- Pydantic AI is available on PyPI as `pydantic-ai`.
- Requires Python 3.10+.
- Uses ASGI application
- Usage limits are applied to prevent excessive requests.
- Dynamic instructions can change based on context.
- The FallbackModel only moves on to the next model if the current model raises a
  ModelHTTPError.
- Returns an ASGI application that handles every AG-UI request by running the agent.
- The app can be used with any ASGI server.
- This method builds an internal agent graph using system prompts, tools and output
  schemas.
- No authentication required for this API.
- This agent can be used asynchronously with a user prompt.
- This is a convenience method that wraps the run method with an event loop.
- Cannot be used inside async code or if there's an active event loop.
- Built by the Pydantic Team.
- Designed for type-safe agent development.
- Supports both seconds format and HTTP date format for Retry-After headers.
- Automatically detects Retry-After headers in 429 responses.
- This example is complete, it can be run 'as is'
- This is a convenience method that wraps self.run and uses the event_stream_handler
  kwarg to get a stream of events from the run.
- '`agent.run_sync()` cannot be used inside a Temporal workflow. Use `await agent.run()`
  instead.'
- '`agent.run_stream()` cannot be used inside a Temporal workflow. Set an `event_stream_handler`
  on the agent and use `agent.run()` instead.'
- '`agent.run_stream_events()` cannot be used inside a Temporal workflow. Set an `event_stream_handler`
  on the agent and use `agent.run()` instead.'
- '`agent.iter()` cannot be used inside a Temporal workflow. Set an `event_stream_handler`
  on the agent and use `agent.run()` instead.'
- Supports virtually every model and provider.
- Integrates tightly with Pydantic Logfire for observability.
- Usage limits can be set for response tokens, request limits, and tool calls.
- Supports both seconds format and HTTP date format
- You need to go to console.groq.com/keys to generate an API key.
- Supports async event streaming.
- The base Temporal activity config has a start_to_close_timeout of 60 seconds.
- Requires installation of the logfire package for logging.
- Some methods may throw a UserError for validation failures.
- This API method builds an internal agent graph using system prompts, tools, and
  output schemas.
- This method builds an internal agent graph and allows for async iteration over nodes.
- Some events may not be received after the final result is found
- Uses async context manager to iterate over agent graph nodes.
- Wraps an agent to enable it to be used inside a Temporal workflow.
- This API allows synchronous and asynchronous execution of agent methods.
- None means this tool should not be wrapped as a task
- Model-agnostic and supports various AI models
- Uses async for iteration for streaming responses.
- Uses asynchronous functions for processing.
- Email feedback requires user-specific interests.
- Convenience method that wraps self.run and uses the event_stream_handler kwarg to
  get a stream of events from the run.
- Stream response can be interacted with as an iterable of ModelResponseStreamEvents.
- Uses async methods for agent execution
- 'Multiple methods available for running the agent: run, run_sync, run_stream'
- DBOS workflows enable durable model requests.
- Agent name must be unique for DBOS integration.
- This API includes methods for running an agent with user prompts and streaming results.
- The run_stream method returns streamed responses.
- The run_stream_events method streams events from the run.
- This method builds an internal agent graph and returns an AgentRun object.
- The Agent class serves as the primary interface for interacting with LLMs.
- Usage limits are configurable via UsageLimits structure.
- Model settings can be fine-tuned using settings.ModelSettings.
- OpenAI's Google Calendar connector requires an authorization token.
- This example demonstrates how to use tools with the agent.
- Uses deferred tools to execute API calls
- Frontend provides user prompt via messages
- Requires setup of API keys for authentication.
- The email sending service does not require authentication.
- The app is an ASGI application that can be used with any ASGI server.
- Agents are intended to be instantiated once and reused throughout your application.
- Usage limits are relevant when many tools are registered.
- The joke_selection_agent uses the joke_generation_agent to generate jokes.
- Uses asynchronous execution for tool calls.
- Requires API key for access
- Supports multi-modal input types
- Graphs are a powerful tool for complex workflows.
- State persistence is available in Pydantic-Graph.
- The agent requires a user prompt to initiate.
- Streaming responses are available for run_stream and run_stream_events.
- Wraps an agent to enable it with Prefect durable flows.
- Async functions for streaming responses
- Utilizes event handlers for handling ongoing events
- Uses ASGI application for interaction
- Multiple agents can interact for complex workflows
- Uses async HTTP requests to generate jokes.
- Defaults to the function name for tool name.
- Defaults to the function docstring for tool description.
- Defaults to 1 for retries.
- This method builds an internal agent graph (using system prompts, tools and output
  schemas) and then runs the graph until the model produces output matching the `output_type`,
  for example text or structured data.
- This API allows async iteration over agent nodes and tool calls.
- An agent needs to have a unique `name` in order to be used with Temporal.
- An agent needs to have a `model` in order to be used with Temporal.
- Please install the `logfire` package to use the Logfire plugin, you can use the
  `logfire` optional group — `pip install "pydantic-ai-slim[logfire]"`.
- Run the agent with a user prompt in async mode.
- This method builds an internal agent graph (using system prompts, tools and result
  schemas) and then runs the graph to completion.
- This method builds an internal agent graph using system prompts, tools, and output
  schemas.
- Usage limits can be configured for model runs.
- Uses async HTTP client for requests.
- This is a Foobar
- This method wraps the agent run in an async mode and streams events.
- This API allows for asynchronous streaming of events from an agent run.
- To use the API, a user prompt must be provided.
- This API is designed for async-iterating over nodes of an internal agent graph.
- This API provides methods to run an agent synchronously and asynchronously.
- Output types may only be used if the agent has no output validators.
- Pydantic AI is designed for building production-grade applications with Generative
  AI.
- Uses Pydantic AI agents for managing state and events.
- ASGI applications can be used with any ASGI server.
- Model settings can be applied at model, agent, and run-time levels.
- Usage limits can prevent excessive API calls.
- Both RunResult and StreamedRunResult have methods to access messages exchanged during
  an agent run.
- Toolsets and agents can be dynamically defined
- Requires setup of API keys in GCP.
- Handles AG-UI requests by running the agent and returning a streaming response.
- Uses a context manager to iterate over the agent graph's nodes as they are executed.
- The agent can infer its name from the call frame if not explicitly set.
- This is particularly useful when testing.
- This method builds an internal agent graph using system prompts, tools and output
  schemas and runs until the model produces output matching the output_type.
- The parameters that PydanticAI passes depend on the model, as some parameters may
  not be supported by certain models.
- This API is designed for use with asynchronous workflows.
- Wraps an agent to enable it with DBOS durable workflows.
- Requires a unique name for the agent.
- This API allows synchronous and asynchronous execution of agents.
- The `iter` method returns an async iterable of stream events.
- The `override` method is useful for testing and temporarily changing parameters.
- For now, I don't think there's any reason to support any other input/output modes.
- Designed to build production grade applications with Generative AI.
- The AG-UI integration supports events, messages, state management, and tools.
- Uses async calls to handle HTTP requests.
- Automatically parses Retry-After headers from HTTP 429 responses
- Models support multi-modal input, including documents, images, audio, and video.
- This API allows for async processing of events and node execution.
- The `AgentRun` can be used to async-iterate over the nodes of the graph as they
  are executed.
- The strategy for handling multiple tool calls can be 'early' or 'exhaustive'.
- This API provides methods for synchronous and asynchronous execution of an agent.
- Ensure to handle the async context properly when using streaming methods.
- This method builds an internal agent graph using system prompts, tools, and result
  schemas.
- Uses OAuth2 authentication
- Ensure unique agent names are used in Temporal activities
- This is a convenience method that wraps self.run with loop.run_until_complete(...).
  You therefore can't use this method inside async code or if there's an active event
  loop.
- This library provides a context manager to manage agent execution.
- The agent can be used to iterate over events and node executions.
- Synchronously run the agent with a user prompt.
- Uses asynchronous programming for handling user prompts.
- 'Supports: `str`, `bytes`, `bytearray`, `bool`, `int`, `float`, `date`, `datetime`,
  `time`, `timedelta`, `Enum`, `Mapping`, `Iterable`, `dataclass`, and `BaseModel`.'
- Designed to help build production grade applications with Generative AI.
- Usage limits can be set to prevent excessive API calls.
- You can instruct Pydantic AI to download the file content by setting the boolean
  flag `force_download` to `True`.
- Automatically parses `Retry-After` headers from HTTP 429 responses.
- Respects the `max_wait` limit to prevent excessive delays.
- You can access models from the Model Garden that support the generateContent API.
- This is a convenience method for synchronous operation.
- Cannot be used inside an async context if there's an active event loop.
- An AI agent exposed as an A2A agent.
- The server will always either send a "submitted" or a "failed" on `tasks/send`.
  Never a "completed" on the first message.
- 'There are three possible ends for the task: The task was "completed" successfully,
  The task was "canceled", The task "failed".'
- The server will send a "working" on the first chunk on `tasks/pushNotification/get`.
- Pydantic AI offers integration with AG-UI for frontend applications.
- FastA2A can be used to expose agents as A2A servers.
- Uses a dynamic toolset that can be built ahead of each agent run step.
- Requires setup of connected app in GCP.
- Models support multi-modal input.
- Contains various optional parameters for configuring the agent's behavior.
- Defaults to 'auto', such that the format is inferred from the structure of the docstring.
- Defaults to False.
- Defaults to GenerateToolJsonSchema.
- Use of event_stream_handler allows streaming of events.
- This method builds an internal agent graph and runs it until the model produces
  output matching the output_type.
- The result is populated with an AgentRunResult once the run returns an End node.
- Toolsets that are 'leaves' need to have a unique `id` in order to be used with Temporal.
- This method builds an internal agent graph and then returns an AgentRun object.
- The server will always either send a 'submitted' or a 'failed' on `tasks/send`.
- Never a 'completed' on the first message.
- Using this class as an async context manager will start the server as a subprocess
  when entering the context, and stop it when exiting the context.
- Uses Pydantic AI with AG-UI tools
- Uses API key for authentication.
- State persistence is recorded after each node is run.
- This method builds an internal agent graph (using system prompts, tools and output
  schemas) and then returns an AgentRun object.
- Usage limits can be applied to prevent excessive API calls.
- Model settings can be configured to fine-tune model behavior.
- Some objects may return nulls in deeply nested fields
- Uses async HTTP client to fetch jokes.
- Requires setup of OAuth2 credentials in the application.
- The agent needs to have a unique `name` in order to be used with Temporal.
- A wrapper for MCPServer that integrates with DBOS, turning call_tool and get_tools
  to DBOS steps.
- Uses DBOS for workflow management
- Uses Pydantic AI for state management.
- Seamless integration with AG-UI frontend tools.
- Frontend provides user prompt via messages.
- Some models do not support image input.
- Some models do not support audio input.
- Some models do not support video input.
- Some models do not support document input.
- Requires API key for authorization.
- Create an API key by following the Quick Start guide.
- User prompt is required for each method.
- Output type can be specified for runs.
- This API allows synchronous and asynchronous execution of agent commands.
- This API allows for asynchronous operations with agent runs.
- If you're using a Starlette-based web framework like FastAPI, you'll typically want
  to use the second method.
- Usage limits are implemented to control token, requests, and tool calls.
- Uses ClientAndKey for dependencies
- Includes a usage limit of 15 requests
- Supports multi-modal input including documents, images, audio, and video.
- Uses OAuth2 with refresh token — requires setup of connected app in pydantic
- Some responses may contain null fields
- run_sync is a convenience method that wraps self.run with loop.run_until_complete(...)
- run_stream allows streaming responses from the agent.
- Uses DBOS for handling steps in workflows.
- Run the agent with a user prompt in async mode, returning a streamed response.
- The server will always either send a 'submitted' or a 'failed' on tasks/send.
- No list is going to be as convincing as giving it a try and seeing how it makes
  you feel!
- 'Tools can optionally be defined with another function: prepare.'
- Function tools provide a mechanism for models to perform actions.
- Custom HTTP Client can be used with GoogleProvider.
- This API allows for async iteration over nodes in the agent run.
- Convenience method that wraps self.run with `loop.run_until_complete(...)`.
- Uses async context manager for streaming responses.
- Pydantic AI is available on PyPI as `pydantic-ai`
- Usage limits are set to 15 requests.
- Uses dynamic tools that can be filtered based on context
- Provides methods to access the full message history, new messages, and usage statistics.
- Provides async iteration over nodes in the agent run
- Stream the response as an iterable of ModelResponseStreamEvents.
- Ensure that the wrapped agent has a unique name for DBOS workflows.
- The DBOSMCPServer wraps MCPServer and integrates with DBOS, enabling the use of
  DBOS steps for tool calls.
- Pydantic AI supports various models including OpenAI and Anthropic.
- Usage limits can be set for tokens and requests.
- The accept header value for the run is by default SSE_CONTENT_TYPE.
- This API can be used to consume outputs from LLM model responses.
- If None, the last message will not be modified.
- Please install the `logfire` package to use the Logfire plugin
- The run method builds an internal agent graph and runs it to completion.
- Uses AG-UI tools for enhancing user experiences
- The library provides a structure for defining agents and their behavior.
- You can customize model behavior using GoogleModelSettings.
- FallbackModel uses the individual settings of whichever model successfully handles
  the request.
- This agent can handle tool calls alongside a final result.
- Uses async iterator for streaming events.
- A context manager to iterate over the agent graph's nodes as they are executed.
- Requires setup of DBOS connected app
- Ensure agent has a unique name for DBOS workflows
- Uses an async iterator to handle streaming events.
- This API allows for async iteration over agent graph nodes.
- Supports virtually every model and provider
- Uses ASGI application for running agents.
- Ensure proper location formatting in requests
- API response may vary based on forecast date
- Requires valid input data for agent execution.
- Streaming response will yield event chunks.
- Optional model request settings to use for this agent's runs, by default.
- The decorator can be used bare (`agent.toolset`).
- Temporal client plugin for Logfire.
- Please install the `logfire` package to use the Logfire plugin, you can use the
  `logfire` optional group â€” `pip install "pydantic-ai-slim[logfire]"`.
- This API provides methods for synchronous and asynchronous operation.
- Event streaming is supported for real-time updates.
- Uses JSON as default input/output modes.
- Vendor-specific metadata for the file supported by GoogleModel and OpenAIChatModel
- 'Seamless Observability: Integrates with Pydantic Logfire'
- Powerful Evals
- MCP, A2A, and AG-UI integration
- Human-in-the-Loop Tool Approval
- Streamed Outputs
- Graph Support
- app is an ASGI application and can be used with any ASGI server
- Usage limits can be applied to limit tokens, requests, and tool calls.
- Messages exchanged during an agent run can be accessed from the result object.
- Uses AG-UI protocol for streaming events
- The agent can run in async mode and stream events from the run.
- Uses Temporal for managing workflows.
- Agents need a unique name for Temporal activities.
- This API is designed for asynchronous operations.
- The agent requires a unique name for Prefect flows.
- If using an event stream handler, ensure a run context is provided.
- Pydantic AI is a Python agent framework designed to help you quickly, confidently,
  and painlessly build production grade applications and workflows with Generative
  AI.
- FastAPI revolutionized web development by offering an innovative and ergonomic design.
- Model settings can be adjusted to fine-tune requests.
- Uses dependencies to make HTTP requests.
- This is a convenience method that wraps self.run with loop.run_until_complete(...).
- You can use the `logfire` optional group â€” `pip install "pydantic-ai-slim[logfire]"`
- This API operates in async mode and returns streamed responses.
- The results can be accessed through the `AgentRun` object.
- This version is based on the legacy event-based OpenTelemetry GenAI spec.
- Uses an asynchronous streaming approach for responses.
- Runs the agent with a user prompt in async mode.
- The agent needs to have a unique `name` in order to be used with DBOS
- Requires setup of connected app in api
- This API utilizes async context managers for executing agent runs.
- Uses a step config with retries and backoff rate for handling requests.
- Wrap an agent to enable it with Prefect durable flows, by automatically offloading
  model requests, tool calls, and MCP server communication to Prefect tasks.
- You can't use this method inside async code or if there's an active event loop.
- Supports various models and providers including OpenAI, Anthropic, and Google.
- The forecast API provides current weather data.
- The historic weather API returns past weather data.
- Uses deferred tools for dynamic toolsets
- You need to generate an API key from console.groq.com/keys.
- The agent run can be driven manually or automatically.
- Output from the agent run is available through the result property.
- The methods run_sync, run_stream, and run_stream_events are used to interact with
  the agent.
- Integrates with DBOS, turning call_tool and get_tools to DBOS steps.
- Uses ASGI framework for application deployment
- If no user found, a ModelRetry exception is raised.
- Does not require authentication.
- Provides async-iteration over nodes in the agent run.
- Final result is populated upon reaching an End node.
- This API provides an agent framework for running AI models and processing events.
- Wraps the request in a DBOS step.
- Wraps the request_stream in a DBOS step.
- Run method builds an internal agent graph and runs it to completion.
- Run_sync is a convenience method that wraps run with loop.run_until_complete.
- The run_stream method returns a streamed response for user prompts.
- The run_stream_events method streams events from the agent run.
- Binary content can be created from a data URI.
- The identifier for binary content can be provided to reference the file.
- Usage limits are relevant if you've registered many tools.
- System prompts might seem simple but crafting the right one is key.
- If models behave unexpectedly, capture_run_messages can be used to diagnose issues.
- Uses an async HTTP client for requests.
- Uses async functions for handling email writing and feedback.
- Decorator to register a tool function which takes RunContext as its first argument.
- The AgentRun provides methods to access the full message history, new messages,
  and usage statistics.
- The run should be stopped when you return an End node.
- The agent name cannot be changed after creation.
- An agent needs to have a `model` in order to be used with Temporal, it cannot be
  set at agent run time.
- Event stream handler cannot be set at agent run time inside a Temporal workflow,
  it must be set at agent creation time.
- Run methods can be used with user prompts to interact with the agent.
- A context manager that can be used to iterate over the agent graph's nodes as they
  are executed.
- Requires setup of event stream handler for streaming events.
- Uses Pydantic AI for agent management.
- Agents are designed for reuse, similar to FastAPI Apps.
- Requires setup of API key in Groq console.
- Each model's options should be configured individually. For example, `base_url`,
  `api_key`, and custom clients should be set on each model itself, not on the `FallbackModel`.
- Handles asynchronous processing and state persistence
- Manually drive the agent run using the next method.
- run_stream allows for async operations and streaming responses
- run_stream_events streams events from the run using event_stream_handler
- An agent needs to have a `model` in order to be used with DBOS.
- This is a synchronous method for running the agent.
- This is an asynchronous method for streaming responses.
- This method wraps the run method and allows streaming events.
- The server will always either send a 'submitted' or a 'failed' on `tasks/send`.
  Never a 'completed' on the first message.
- gemini supports JSON dict return values, but no other JSON types, hence we wrap
  anything else in a dict
- To run the examples, follow instructions in the examples docs.
- Agents are Pydantic AI's primary interface for interacting with LLMs.
- Each Agent uses pydantic-graph to manage its execution flow.
- Uses AsyncClient for HTTP requests.
- Includes usage limits for requests.
- Respect the `max_wait` limit to prevent excessive delays
- All docs examples are tested in CI and their their output is verified, so we need
  LOG to always have the same order whenever this code is run.
- Uses a loop to handle deferred tool requests.
- Stream responses can be handled using the event stream handler.
- Ensure that the model is defined for the agent to function correctly.
- The `model` needs to be set at agent run time.
- This is a convenience method that wraps the agent's functionalities.
- This API includes multiple methods for interacting with the agent.
- Ensure to handle async responses correctly.
- Wraps requests in a DBOS step for execution.
- Uses Prefect for managing workflows.
- Supports running the agent asynchronously and synchronously.
- Use async context manager for streaming responses.
- 'Pydantic AI is available on PyPI as `pydantic-ai` so installation is as simple
  as: `pip install pydantic-ai`.'
- Usage limits are relevant to prevent excessive tool calling or infinite loops.
- Model settings allow customization of parameters like temperature and max tokens.
- API key is required for access.
- The `iter` method can be used to iterate over the agent graph's nodes as they are
  executed.
- The `run_stream_events` method allows streaming of agent events.
- Uses async context manager to iterate over agent graph's nodes.
- Uses async context managers for agent operations.
- Use async context manager for running agent streams.
- '`BinaryImage` must have a media type that starts with ''image/'''
- Deprecation notices for BuiltinToolCallEvent and BuiltinToolResultEvent.
- Supports virtually every AI model and provider.
- Some URLs may not be accessible due to crawling restrictions.
- Dependencies for agents are passed through context.
- The accept header value defaults to SSE_CONTENT_TYPE.
- Provides the ability to iterate over the agent graph's nodes as they are executed.
- You cannot use run_sync inside async code or if there's an active event loop.
- This is the main endpoint for the A2A server.
- 'There are three possible ends for the task: ''completed'' successfully, ''canceled'',
  or ''failed''.'
- The server will send a 'working' on the first chunk on `tasks/pushNotification/get`.
- The URL of the video must end with a valid video file extension to infer the media
  type.
- AG-UI tools are provided to the Pydantic AI agent.
- The agent is designed to work well with static type checkers.
- System prompts can be static or dynamic based on context.
- This agent uses a joke generation tool to provide jokes.
- Toolset can be built dynamically ahead of each agent run.
- You can access models from the Model Garden that support the `generateContent` API
- Use the model_id patterns for Gemini models
- Requires input data with thread_id, run_id, messages, etc.
- The default model to use for this agent, if not provided, you must provide the model
  when calling it.
- If None, we try to infer the agent name from the call frame when the agent is first
  run.
- The result is populated once the run ends.
- Uses synchronous and asynchronous methods to run the agent.
- Event streaming is available for monitoring the run process.
- This can be set by a provider or user if the OpenAI-'compatible' API doesn't support
  strict tool definitions.
- Turn off to don't send sampling settings like `temperature` and `top_p` to models
  that don't support them, like OpenAI's o-series reasoning models.
- 'Installation is as simple as: pip install pydantic-ai'
- Usage limits are applied to prevent excessive API usage.
- Uses async HTTP client to make requests
- FallbackModel itself doesn't have settings - it uses the individual settings of
  whichever model successfully handles the request.
- Provides async-iteration over the nodes in the agent run
- The API does not require authentication.
- Ensure to handle the event streaming correctly to avoid data loss.
- Pydantic AI has an excellent integration with Pydantic Logfire to view and understand
  agent runs.
- Usage limits can be applied to requests.
- 'GoogleModel on GLA: YouTube video URLs are sent directly in the request to the
  model.'
- Uses authorization with API key.
- The API allows for agent delegation and complex control flows.
- Uses async functions with asyncio.create_task.
- Function tools provide actions and retrieve extra information for models.
- Requires generating an API key from the console.
- Users may provide input to continue the process.
- The `deps` object must be serializable using Pydantic's `TypeAdapter`.
- This is a convenience method that wraps self.run with loop.run_until_complete(...)
  for synchronous execution.
- You can use the `logfire` optional group — `pip install "pydantic-ai-slim[logfire]"`.
- This method builds an internal agent graph using system prompts, tools and result
  schemas and runs the graph to completion.
- Includes various message parts such as text, thinking, file, and tool calls.
- Usage limits can be applied to model runs.
- Dynamic instructions can benefit from runtime information.
- Requires API key to be set in the Authorization header
- Requires setup of API key from GCP
- Multi-modal input supported
- Stream response can be consumed as an iterable of ModelResponseStreamEvents.
- Requires the model to be set at agent creation time.
- Requires setup of connected app for OAuth2.
- Synchronous and asynchronous methods available for running the agent.
- A DBOS model cannot be used with `pydantic_ai.direct.model_request_stream()` as
  it requires a `run_context`.
- This method builds an internal agent graph and runs the graph to completion.
- Supports async operations.
- Event streaming is available.
- The server will send a 'working' on the first chunk on tasks/pushNotification/get.
- Uses dependencies for API key management.
- FallbackModel does not have settings — it uses the individual settings of the model
  that successfully handles the request.
- State persistence allows for interrupted execution and resumption.
- Use FullStatePersistence for capturing execution history.
- Streaming events encoded as strings according to the accept header value.
- This API allows iteration over the agent graph's nodes as they are executed.
- The URL of the video is required.
- Requires media type to start with 'image/' for BinaryImage.
- Tools can optionally be defined with a prepare method at each step.
- Dynamic tools allow for customization based on context.
- Uses a dynamic toolset that can be built ahead of each run or run step.
- Uses OAuth2 with refresh token.
- The run_sync method wraps the run method for synchronous execution.
- Uses Pydantic AI to manage agent interactions with LLMs.
- Titles:prefixItems is not currently supported in Gemini, so we convert it to items
  for best compatibility.
- To use Gemini via the Generative Language API, create an API key at aistudio.google.com.
- pydantic-graph provides state persistence.
- Graphs can model complex workflows effectively.
- Uses state persistence to allow graphs to be interrupted and resumed.
- prefixItems is not currently supported in Gemini, so we convert it to items for
  best compatibility
- prefixItems is not currently supported in Gemini, so we convert it to items for
  best compatibility.
- Uses async iteration for processing nodes.
- Set the `CO_API_KEY` environment variable or pass it via `CohereProvider(api_key=...)`
  to use the Cohere provider.
- To use Mistral through their API, go to console.mistral.ai/api-keys/ and follow
  your nose until you find the place to generate an API key.
- To use OpenAI models or OpenAI-compatible APIs, go to platform.openai.com and follow
  your nose until you find the place to generate an API key.
- This API supports streaming events and async iterations.
- The agent can be run in both async and sync modes.
- This API is designed for running agents with user prompts.
- Uses async context manager for agent execution.
- Can be used to iterate over agent graph nodes.
- DBOS model requires setup of connected app
- Context manager for iterating over the agent graph's nodes as they are executed.
- Uses async methods for streaming responses
- Requires user input for email feedback process
- Uses HTTP transport with retry capabilities.
- Pydantic AI includes integration with AG-UI for handling requests and responses.
- FastA2A allows exposure of agents as A2A servers.
- Multiple toolsets can be built dynamically based on the agent run context.
- The toolset can toggle between different functionalities during an agent run.
- Supports state persistence via SimpleStatePersistence, FullStatePersistence, and
  FileStatePersistence.
- Requires input in the format defined by RunAgentInput.
- This method runs the agent with a user prompt in async streaming mode.
- Run the agent with a user prompt in async mode and stream events from the run.
- Uses async iteration to consume outputs from the agent's execution.
- The agent can be used both in async and sync modes.
- Ensure that models and toolsets are properly configured before running.
- Cannot use run_sync inside an active event loop.
- API key required for access.
- This API provides synchronous and asynchronous methods to run agents.
- Wraps an agent to enable it with DBOS durable workflows, by automatically offloading
  model requests, tool calls, and MCP server communication to DBOS steps.
- Wraps requests and streams in DBOS steps.
- Uses Tenacity for retry logic on HTTP requests
- 'Supports both seconds format (`"30"`) and HTTP date format (`"Wed, 21 Oct 2015
  07:28:00 GMT"`) '
- This API provides asynchronous capabilities for running and streaming events.
- openai compatible models do not always need an API key, but a placeholder (non-empty)
  key is required.
- AG-UI tools are provided to enhance user experiences.
- Pydantic AI offers usage limits on tokens, requests, and tool calls.
- Dynamic system prompts can use runtime information.
- Requires a Starlette request containing the AG-UI run input.
- This method builds an internal agent graph and streams output as it comes in.
- This API is used to build an internal agent graph with LLM model responses.
- Asynchronous processing is supported for streaming responses.
- Wraps requests in DBOS steps
- Set the `GROQ_API_KEY` environment variable or pass it via `GroqProvider(api_key=...)`
  to use the Groq provider.
- Asynchronous HTTP transport with tenacity-based retry functionality.
- Pydantic AI is built on the Pydantic Validation framework.
- Forecasts are subject to change based on weather conditions.
- Ensure to handle token expiration and refresh appropriately.
- State persistence allows for interrupted execution.
- Streams AG-UI protocol events.
- Accept header value defaults to SSE_CONTENT_TYPE.
- Event streaming can be enabled using `event_stream_handler`.
- The AgentRun can be used to async-iterate over the nodes of the graph.
- Wrap an agent to enable it to be used inside a Temporal workflow, by automatically
  offloading model requests, tool calls, and MCP server communication to Temporal
  activities.
- This API provides synchronous and asynchronous methods to run an agent with user
  prompts.
- Non-DBOS model cannot be set at agent run time inside a DBOS workflow, it must be
  set at agent creation time.
- DBOS-ified toolsets cannot be swapped out after the fact.
- Wraps requests in DBOS steps for processing.
- This API provides context management for agent execution.
- The server will always either send a 'submitted' or a 'failed' on tasks/send. Never
  a 'completed' on the first message.
- Returns a JSON-RPC response containing either a result (Task) or an error.
- This module provides HTTP transport wrappers and wait strategies that integrate
  with the tenacity library to add retry capabilities to HTTP requests.
- Pydantic AI supports typed dependencies for agents.
- This example is complete, it can be run 'as is'.
- In production applications, implement your own state persistence.
- The agent requires a unique name to be used with Temporal.
- Toolsets that implement their own tool listing and calling need a unique ID.
- Optional additional toolsets for this run.
- Uses async iterators to stream events.
- Model must be set at agent creation time for non-DBOS models.
- Uses DBOS steps for wrapping requests.
- This method builds an internal agent graph.
- Designed to help build production-grade applications with Generative AI.
- Uses async functions for API calls.
- Ensure correct handling of dates in requests.
- Defaults to 'auto' for docstring format
- Defaults to False for require_parameter_descriptions
- Defaults to GenerateToolJsonSchema for schema_generator
- Defaults to False for strict
- Defaults to False for sequential
- Defaults to False for requires_approval
- This global setting allows you to disable request to most models, e.g. to make sure
  you don't accidentally make costly requests to a model during tests.
- The testing models TestModel and FunctionModel are not affected by this setting.
- System prompts are used to instruct agents on how to respond.
- If you want to always run the agent graph to completion, use agent.run() with an
  event_stream_handler.
- This API allows streaming of agent events and results.
- '`agent.run_stream_events()` cannot be used with DBOS. Set an `event_stream_handler`
  on the agent and use `agent.run()` instead.'
- Uses async operations for running agent
- Streaming events is supported for run results
- Can be configured to retry requests based on various conditions such as specific
  exception types, response status codes, or custom validation logic.
- Whether to allow requests to models.
- Designed to help you quickly, confidently, and painlessly build production grade
  applications and workflows with Generative AI.
- Pydantic AI is available on PyPI.
- Uses a model to get user ID by full name
- Handles unexpected model behavior with specific error messages
- Both RunResult and StreamedRunResult have methods to access messages.
- Uses async HTTP client.
- To use OpenAI models or OpenAI-compatible APIs, you need to either install `pydantic-ai`,
  or install `pydantic-ai-slim` with the `openai` optional group.
- Use FullStatePersistence for storing snapshots.
- Uses async context manager for iterating over agent graph's nodes.
- '`agent.run_stream()` cannot be used inside a Prefect flow. Set an `event_stream_handler`
  on the agent and use `agent.run()` instead.'
- Settings to configure an LLM apply to multiple models / model providers, though
  not all of these settings are supported by all models.
- A toolset is a collection of tools that can be used by an agent.
- It is responsible for listing the tools it contains, validating the arguments of
  the tools, and calling the tools.
- The docstring is inspected to extract both the tool description and description
  of each parameter.
- Uses OAuth2 with refresh token — requires setup of connected app in anthropic
- Some models may have specific requirements or limitations
- For details on how to set up authentication with this model, see model configuration
  for Bedrock.
- Cohere does not support built-in tools
- Uses a fallback mechanism to try each model in sequence until one succeeds.
- Requires setup of API keys for various models.
- The capital of France is Paris.
- With Anthropic, you can only use one of `blocked_domains` or `allowed_domains`,
  not both.
- Run methods can handle user prompts and manage conversation history.
- Streaming options are available for real-time updates during runs.
- Uses asynchronous and synchronous methods for running an agent.
- The agent can process user prompts asynchronously.
- This is currently only supported by OpenAI models.
- Check the model configuration for Bedrock for authentication setup.
- See [the Bedrock docs](https://docs.aws.amazon.com/bedrock/latest/userguide/models-supported.html)
  for a full list.
- A model that uses one or more fallback models upon failure.
- FunctionModel allows greater control over the model's behavior.
- Uses async programming for streaming data.
- Handles different types of weather data.
- You can instruct Pydantic AI to download the file content and send that instead
  of the URL by setting the boolean flag `force_download` to `True`.
- Tools can be registered via decorators or the Agent constructor.
- Function parameters are extracted from the function signature.
- This API call allows for dynamic toolset execution during agent runs.
- This agent requires user input to provide feedback on the email.
- Supports async operations for streaming events.
- Provides methods to access the full message history, new messages, usage statistics,
  and the final result.
- Uses async streaming capabilities.
- Requires handling of event streams.
- This is a context manager for iterating over agent graph nodes.
- The `run` method builds an internal agent graph and runs it to completion.
- The `run_sync` method wraps `run` with a synchronous call.
- Handles async HTTP requests with retry logic
- Supported by multiple models including Gemini, Anthropic, OpenAI, and others.
- See the Bedrock docs for a full list of models.
- Pydantic AI comes included with `pydantic-ai`
- Installation requires Python 3.10+
- State persistence is supported in graph executions.
- The API provides async event streaming capabilities.
- Runs an agent with a user prompt in async streaming mode.
- The `AgentRun` provides methods to access the full message history, new messages,
  usage statistics, and the final result of the run once it has completed.
- The agent must have a unique `name` to be used with Temporal.
- Requires setup of logfire for metrics tracking.
- This API allows async iteration over agent graph nodes.
- The broker class is in charge of scheduling the tasks.
- The HTTP server uses the broker to schedule tasks.
- A tool return message encodes the result of running a tool.
- The agent run should be stopped when returning an End node.
- Known model names that can be used with the `model` parameter of Agent.
- Check model configuration for Bedrock for authentication details.
- See the Bedrock docs for a full list of model names.
- Model name is required for initialization.
- Supports multiple providers for API access.
- Uses dynamic tools for custom behavior based on context
- All docs examples are tested in CI and their output is verified.
- Manual control of the agent run is possible by passing in the node to run next.
- A toolset ID is required for tools that implement their own tool listing and calling.
- The API supports synchronous and asynchronous running of agents.
- Convenience method that wraps self.run with loop.run_until_complete(...)
- The agent run can be manually driven by passing in the node you want to run next.
- The final result of the agent run is only available once an End node is returned.
- Supports a variety of date-stamped models
- Groq supports a variety of models and the list changes frequently.
- If models behave unexpectedly, agent runs will raise UnexpectedModelBehavior.
- To diagnose issues, capture_run_messages can be used.
- You need to set up an account with Hugging Face for access tokens.
- You can customize the provider with different models and settings.
- 'To run the application, you can use the following command: uvicorn app:app --host
  0.0.0.0 --port 8000'
- The run_sync method cannot be used inside async code.
- Uses async context manager for running agent
- Requires proper setup of agent and tools
- Uses OAuth2 with refresh token — requires setup of connected app in pydantic.ai
- This API is used to iterate over the agent graph's nodes as they are executed.
- The main endpoint for the A2A server.
- stream_output is the recommended method for streaming outputs.
- stream_text will not call result validators if delta=True.
- Supports a variety of date-stamped models.
- For details on how to set up authentication with this model, see model configuration
  for Google.
- API key is required for authentication
- Refer to the documentation for API key generation instructions
- The final result of the run can be accessed through the result property.
- This API allows running an agent synchronously or asynchronously with user prompts.
- The API allows for async-iteration over agent graph nodes.
- Result validators will NOT be called on the text result if delta=True.
- Either function or stream_function must be provided in FunctionModel.
- All fields must be `bedrock_` prefixed so you can merge them with other models.
- Rate limits apply on API calls
- API returns data in JSON format
- Pydantic AI is model-agnostic and has built-in support for multiple model providers.
- To use each model provider, you need to configure your local environment and make
  sure you have the right packages installed.
- Requires an instance of AbstractAgent and RunAgentInput for execution.
- This method runs the agent with a user prompt in async mode and streams events from
  the run.
- '`BinaryImage` must have a media type that starts with "image/"'
- Debouncing is particularly important for long structured outputs to reduce the overhead
  of performing validation as each token is received.
- Event indicating the agent run ended and containing the final result of the agent
  run.
- Google streams the grounding metadata after the text that was generated using it.
- Uses OAuth2 authentication.
- Uses OAuth2 for authentication
- Uses OAuth2 with a bearer token for authentication.
- Some objects like ModelResponse may return nulls in deeply nested fields
- Supports a variety of models including production and preview models.
- Requires a valid Hugging Face model name.
- Version 1 is based on the legacy event-based OpenTelemetry GenAI spec and will be
  removed in a future release.
- Pydantic AI requires an API key for access.
- Ensure to handle HTTP request errors properly.
- Usage includes 4 requests — 2 from the calling agent and 2 from the delegate agent.
- Uses retry strategies for handling rate limits and network errors.
- All examples are tested in CI and their output is verified.
- Requires an agent to run.
- Accept header value is defaulted to SSE_CONTENT_TYPE.
- The API key can be set via the GOOGLE_API_KEY environment variable.
- Models can be specified as either strings or instances.
- Fallback models will attempt to use the default model first.
- Uses Google API for access to Gemini models.
- Groq requires setup for authentication using OAuth2.
- HuggingFace models require authentication via an API key.
- Ensure to check model settings for specific configurations.
- Requires Hugging Face account for API access.
- Rate limits apply based on the account type.
- Max tokens is a required parameter for MCP Sampling, but optional on ModelSettings.
- MCP Sampling does not support streaming.
- Supports various models and providers.
- API calls may return nulls in certain conditions
- Rate limits may apply based on usage
- If models behave unexpectedly, use capture_run_messages to debug.
- Tools can be registered via decorators or agent arguments.
- Requires setup of API key in GCP project
- The `app` is an ASGI application that can be used with any ASGI server.
- run_sync is a convenience method that wraps the run method with loop.run_until_complete(...)
- run_stream returns a streamed response in async mode
- run_stream_events streams events from the run
- Streaming responses and events available.
- The main class for the FastA2A library.
- Must provide one of the `azure_endpoint` argument or the `AZURE_OPENAI_ENDPOINT`
  environment variable
- Handles async HTTP requests with retry logic.
- Utilizes tenacity for retry capabilities.
- Cohere supports a variety of date-stamped models, explicitly listing the latest
  models.
- Uses OAuth2 with refresh token — requires setup of connected app in Groq
- Some models may have specific settings that need to be configured
- Uses provider 'groq' for authentication and API access.
- MCP Sampling allows an MCP server to make requests to a model by calling back to
  the MCP client that connected to it.
- Mistral uses the Mistral Python client to interact with the API.
- 'The prompt to show when the model expects a JSON object as input is: ''Answer in
  JSON Object, respect the format:


  {schema}


  '''
- Ensure to handle rate limits appropriately.
- Check for null values in responses.
- Uses async HTTP client for requests
- Use pydantic_ai.ag_ui.run_ag_ui or pydantic_ai.ag_ui.handle_ag_ui_request to provide
  different deps for each request.
- Uses AG-UI run input containing thread_id, run_id, messages, etc.
- Uses async context manager for running agents.
- Supports custom output types for runs.
- This is a convenience method that wraps self.run.
- You cannot use this method inside async code or if there's an active event loop.
- This API wraps agent execution in synchronous and asynchronous modes.
- Wraps requests in DBOS steps.
- Requires setup of DBOS model and event stream handler.
- Convenience method that wraps self.run with loop.run_until_complete(...) for synchronous
  execution.
- The `AgentRun` provides methods to access message history and usage statistics.
- The output can be streamed as an async iterable.
- Requires setup of connected app in Anthropic
- Some responses may contain null values
- Configuration for an agent's request to a model, specifically related to tools and
  output handling.
- Refer to Groq documentation for detailed model configuration.
- Uses OAuth2 — requires setup of connected app in api
- All fields must be `openai_` prefixed so you can merge them with other models.
- Format of the file can be inferred from the file extension.
- Must be either 'yaml' or 'json'.
- app is an ASGI application, it can be used with any ASGI server.
- Some models may not support image, audio, video, or document input. Check the model's
  documentation for details.
- Ensure tool calls and returns are paired to avoid errors.
- Multi-modal input supported.
- ASGI application for running Pydantic AI agents with AG-UI protocol support.
- The AgentRun provides methods to access the full message history and new messages.
- This API allows async-iteration over the agent graph's nodes.
- The agent requires a unique name when used with Temporal.
- The model must be set before running the agent.
- For details on how to set up authentication with this model, see model configuration
  for Mistral.
- OpenAIModel was renamed to OpenAIChatModel to clearly distinguish it from OpenAIResponsesModel.
- Requires setup of connected app in OpenAI API
- Some responses may contain null values in certain fields
- No specific API endpoints were mentioned in the documentation.
- Uses ASGI for running the application
- Usage limits can be applied to prevent excessive requests and token usage.
- Graph can be paused and resumed, allowing for human interaction.
- The result of the run becomes available once an End is reached.
- The run_sync method cannot be used inside an async code or if there's an active
  event loop.
- The run_stream method requires an event_stream_handler to stream events.
- Asynchronous API for running agents with user prompts.
- Event streaming available for real-time responses.
- Handles HTTP requests asynchronously with retry logic.
- Token limits may affect processing, check limits after each streamed message.
- If there are no limits, processing can be skipped.
- Known model names that can be used with the model parameter of Agent.
- Global setting ALLOW_MODEL_REQUESTS = True allows requests to models.
- If model requests are not allowed, a RuntimeError will be raised.
- Uses OAuth2 with refresh token — requires setup of connected app in Hugging Face
- Some responses may include nested structures
- Ensure to set up the Mistral authentication correctly.
- Check the API limits and usage policies.
- OpenAI API requires a valid API key for authentication.
- Model name should be provided when initializing.
- Multiple agents can be called in succession with different dependencies.
- Uses async/await for graph execution
- State persistence is available for graphs
- Defaults to 'pydantic-ai' for CLI program name
- If the model is not set at agent run time, it cannot be used with Temporal.
- This method builds an internal agent graph using system prompts, tools and result
  schemas.
- 'Supported by GoogleModel: VideoUrl.vendor_metadata is used as video_metadata.'
- 'Supported by OpenAIChatModel, OpenAIResponsesModel: ImageUrl.vendor_metadata[''detail'']
  is used as detail setting for images.'
- Some responses may contain nulls in deeply nested fields
- Supports multiple Groq models including production and preview.
- Ensure to have the correct scopes for the API access
- Rate limits apply to the number of requests
- Uses OAuth2 with refresh token — requires setup of connected app in Mistral
- Some models may have specific configuration requirements
- OpenAI does not provide `.inv` files for their API.
- Defaults to using the 'openai' provider.
- You need to create an API key in the respective provider's console.
- This API allows for streaming events from the agent.
- Method parameters can be adjusted according to user needs.
- The agent can run in both async and sync modes.
- The agent can be used both inside and outside of the Temporal workflow.
- Run methods provide synchronous and asynchronous execution options for the agent.
- Setup for the Logfire plugin requires installation of the `logfire` package.
- Handles HTTP requests with retry logic.
- Supports asynchronous request handling.
- Here we include only settings which apply to multiple models / model providers,
  though not all of these settings are supported by all models.
- Supports various Groq models including production and preview models.
- Ensure to set up your Hugging Face account to generate tokens
- Uses OAuth2 with refresh token — requires setup of connected app in huggingface
- Some models may have specific requirements or limitations.
- Ensure the state field in the dataclass is non-optional for proper validation.
- Includes options for usage limits and model settings.
- API requires an API key for authentication.
- Uses tenacity for retry handling
- Handles network errors with retries
- '`model` must either be set on the agent or included when calling it.'
- Requires an API key for authentication.
- Requires OAuth2 authentication with a connected app setup.
- Uses OAuth2 with refresh token — requires setup of connected app in OpenAI
- Rate limits and usage quotas apply
- Some API responses may vary based on user input
- ALL FIELDS MUST BE `openai_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.
- API key can be set via the GOOGLE_API_KEY environment variable.
- Uses tenacity for retry capabilities in HTTP requests
- Supports various models including production and preview Groq models.
- Uses OpenTelemetry for tracing.
- Some model responses may return nulls in deeply nested fields
- Unfortunately, despite being asked to do so, OpenAI do not provide .inv files for
  their API.
- Each case represents a single test scenario with inputs to test.
- Datasets can be loaded from and saved to YAML or JSON files.
- Optional name for the dataset.
- Sequence of test cases to include in the dataset.
- case_sensitive only applies when both the value and output are strings
- Usage limits are supported in the API.
- Ensure that the correct model settings are applied.
- Agents may have different dependencies.
- The agent requires a unique name for use with Temporal.
- Example usage provided for synchronous and asynchronous methods.
- Rate limits apply to API calls
- Uses OAuth2 with refresh token — requires setup of connected app in Google.
- Ensure to check the Mistral API documentation for detailed setup instructions.
- OpenAI API requires setup of API keys.
- AG-UI frontend tools are seamlessly provided to the Pydantic AI agent, enabling
  rich user experiences with frontend user interfaces.
- Dynamic system prompts can benefit from runtime information.
- You can access models from the Model Garden that support the generateContent API
  and are available under your GCP project.
- Accepts input data in JSON format.
- The method handles streaming events from the agent.
- This API provides asynchronous event streaming for agent runs.
- A stateful, async-iterable run of an Agent.
- Stream initialization may time out if not handled properly.
- This is a convenience method that wraps the agent.run method.
- The run method is asynchronous and builds an internal agent graph.
- The run_sync method is a convenience method that cannot be used inside async code.
- Use `infer_name` to automatically infer the agent name if not set.
- Defaults to 'auto' for tool docstring format.
- Defaults to False for require_parameter_descriptions.
- Defaults to GenerateToolJsonSchema for schema_generator.
- Defaults to False for sequential.
- Defaults to False for requires_approval.
- May encounter rate limits on requests
- Requires setup of connected app in Hugging Face
- Some responses may include non-standard formats
- See model configuration for Mistral for authentication setup.
- Cases can have their own specific evaluators which are run in addition to dataset-level
  evaluators.
- The `increment_eval_metric` function requires both `name` and `amount` parameters.
- Uses Pydantic for type validation — requires installation of Pydantic package.
- Installation is as simple as pip install pydantic-ai.
- System prompts can be static or dynamic.
- Instructions should be preferred over system prompts for most use cases.
- Multi-modal input supported including documents, images, audio, and video.
- FallbackModel handles exceptions from models.
- Some responses may require user input for completion.
- Asynchronous streaming of events from the agent.
- Stream the response can be iterated as events
- The stream method is deprecated, use stream_output instead.
- The validate_structured_output method is deprecated, use validate_response_output
  instead.
- The stream_structured method is deprecated, use stream_responses instead.
- Retries are handled using the tenacity library.
- Initialize a Gemini model with the required parameters.
- MCP Sampling allows an MCP server to make requests to a model.
- Uses a structured response that streams test data.
- Capping tool calls is important to prevent infinite loops.
- Uses messages to maintain context across multiple agent runs.
- The examples provided are complete and can be run as is.
- The final result is populated with an AgentRunResult
- Uses OpenTelemetry for event management.
- The version 1 is based on the legacy event-based OpenTelemetry GenAI spec.
- Uses DBOS for workflow integration.
- Identifier can be provided to the model for reference.
- Data URI must start with 'data:'
- The media type must start with 'image/' for BinaryImage.
- The transport can be configured to retry requests based on various conditions such
  as specific exception types, response status codes, or custom validation logic.
- For details on how to set up authentication with this model, see model configuration
  for Bedrock
- FunctionModel requires either a function or stream_function to be provided.
- Uses OAuth2 with refresh token for authentication.
- Ensure to set up appropriate permissions for the Google Cloud project.
- MCP Sampling does not support streaming
- Uses a dataset of test cases to evaluate against a task function.
- The default model starts as 'openai:gpt-4o', but this can be changed using the `set_default_judge_model`
  function.
- Model errors may include UnexpectedModelBehavior for unexpected model behavior.
- Use capture_run_messages to diagnose issues with model runs.
- Make sure to handle message history to maintain context across multiple agent runs.
- Graphs are a powerful tool, but they're not the right tool for every job.
- Uses async context manager for handling streaming responses.
- If True, perform a token counting pass before sending the request to the model,
  to enforce `request_tokens_limit` ahead of time. This may incur additional overhead
  (from calling the model's `count_tokens` API before making the actual request) and
  is disabled by default.
- Whether to allow requests to models is controlled by ALLOW_MODEL_REQUESTS
- Ensure to handle rate limits and token expiration.
- Default model starts as 'openai:gpt-4o', but this can be changed using the set_default_judge_model
  function.
- 'Pydantic AI is available on PyPI as `pydantic-ai` so installation is as simple
  as: pip install pydantic-ai'
- Model errors may raise UnexpectedModelBehavior.
- Use capture_run_messages to access messages exchanged during execution.
- Requires the 'accept' header with the value for the run.
- This API allows streaming events from the agent run.
- The API supports asynchronous operations.
- Asynchronous methods for stream processing.
- Uses async processing for streaming responses.
- This API is designed for synchronous and asynchronous execution of an agent with
  user prompts.
- This API provides async capabilities for agent execution.
- The `iter` method allows streaming of agent events.
- Uses async context manager for streaming responses
- Since Bedrock supports a variety of date-stamped models, we explicitly list the
  latest models but allow any name in the type hints.
- Either `function` or `stream_function` must be provided in FunctionModel.
- Uses Hugging Face API for model inference
- Pydantic AI has an excellent integration with Pydantic Logfire to help you view
  and understand agent runs.
- Dynamic tools allow customization at each run step.
- You can access models that support the generateContent API and are available under
  your GCP project.
- This API allows streaming events from a run.
- This API is used to consume outputs from LLM model responses and stream events from
  tool execution.
- Stream response is asynchronous and can yield multiple events.
- Some objects may require specific configurations
- Requires setup of event stream handler.
- Can be used for both async and sync runs.
- For details on how to set up authentication with this model, see the model configuration
  for Groq.
- Ensure to configure the OAuth2 settings correctly before accessing the API.
- Check the Mistral documentation for model-specific settings.
- Use the OpenAI Responses API for newer functionalities.
- A model specifically for testing purposes.
- Optional name for the case can be assigned in add_case.
- The evaluator can be added to all cases or a specific case.
- Returns the span's duration as a timedelta, or None if start/end not set.
- Uses OAuth2 with refresh token — requires setup of connected app in weather API
- Some endpoints may have rate limits
- Decorator to register a tool function which takes [`RunContext`][pydantic_ai.tools.RunContext]
  as its first argument.
- Decorator to register a toolset function which takes [`RunContext`][pydantic_ai.tools.RunContext]
  as its only argument.
- This API supports async operations for streaming events.
- The agent can infer its name from the call frame if not set.
- Event stream handler must be set at agent creation time.
- Run method allows asynchronous execution of the agent.
- Run_sync method is a synchronous wrapper around the run method.
- The API key to use for authentication, if not provided, the CO_API_KEY environment
  variable will be used if available.
- Abstract class for a model.
- Refer to Cohere's documentation for a list of all available models.
- Supports various Groq models as specified in the documentation.
- Some responses may not follow the expected JSON schema
- TestModel can be initialized with optional settings and profile.
- Installation instructions available on PyPI
- Pydantic AI is designed to work well with static type checkers
- Dynamic instructions should be defined using functions decorated with @agent.instructions
- If models behave unexpectedly, capture_run_messages can be used to access the messages
  exchanged during the run.
- The `FallbackModel` only moves on to the next model if the current model raises
  a ModelHTTPError.
- This method builds an internal agent graph and returns an AgentRun object which
  can be used to async-iterate over the nodes.
- Manually drive the agent run by passing in the node you want to run next.
- Stream initialization may timeout if the background thread does not signal readiness.
- Event stream handler must be set at agent creation time, not during runtime.
- This API uses a wrapper for MCPServer that integrates with DBOS.
- This method builds an internal agent graph and then runs the graph to completion.
- An error raised when an unexpected response is received from the server.
- Type identifier available as a discriminator.
- This model describes how requests to and responses from specific models or families
  of models need to be constructed and processed.
- Handles HTTP requests with retry logic using tenacity.
- Defaults to False for strict.
- Ensure to set up the OAuth2 with a valid client ID and secret.
- Check the API limits to avoid throttling.
- For details on how to set up authentication with this model, see model configuration
  for Groq.
- Model responses from this model should only have one text item.
- OpenAIModel was renamed to OpenAIChatModel.
- TestModel is specifically for testing purposes and will call all tools by default
- Supports creating datasets with test cases and evaluators.
- AG-UI integration was originally built by the team at Rocket Science
- ASGI application can be used with any ASGI server
- Uses async/await for operations
- Model behavior can be unpredictable, especially with retries.
- Ensure full names are provided when querying users.
- This is a convenience method that wraps the run method and uses event_stream_handler
  to get a stream of events from the run.
- The run returns an End node when completed.
- Runs an agent with a user prompt in async mode.
- Either `function` or `stream_function` must be provided for FunctionModel.
- Check the Hugging Face documentation for specific model configuration requirements.
- Supports loading from YAML or JSON files.
- Uses basic GET and POST methods for user and message interactions.
- Dynamic tools can be defined with a prepare method to customize definitions.
- Agent-wide prepare_tools function allows filtering or modifying tool definitions.
- This is a convenience method that wraps the agent's run method and streams events.
- This method builds an internal agent graph (using system prompts, tools and output
  schemas) and then runs the graph until the model produces output matching the `output_type`.
- API key can also be set via the GOOGLE_API_KEY environment variable.
- Credentials can be obtained from environment variables and default credentials.
- Includes async handling of requests with retry logic.
- An event indicating the agent run ended and containing the final result of the agent
  run.
- Uses OAuth2 with refresh token — requires setup of connected app in groq
- Uses a fixed seed for generating random data.
- List of test cases in the dataset.
- List of evaluators to be used on all cases in the dataset.
- Uses custom rendering logic for evaluation reports.
- Pydantic AI is available on PyPI as 'pydantic-ai'
- Uses capture_run_messages to access messages exchanged during agent runs.
- Tools can optionally be defined with a prepare method for customization.
- All examples are complete and can be run as is.
- Streaming event chunks encoded as strings according to the accept header.
- Uses async methods to handle events.
- This API is a convenience wrapper for running agents synchronously or asynchronously.
- Use 'await' for async methods.
- Ensure to handle exceptions properly.
- The main endpoint for the A2A server is the agent_run endpoint.
- The timeout in seconds to wait for the client to initialize.
- Maximum time in seconds to wait for new messages before timing out.
- See [the Bedrock Converse API docs](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_runtime_Converse.html#API_runtime_Converse_RequestSyntax)
  for a full list.
- See [the boto3 implementation](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/bedrock-runtime/client/converse.html)
  of the Bedrock Converse API.
- Requires setup of OAuth2 for authentication.
- Ensure to configure your Mistral API key and endpoint correctly.
- Handles test cases with inputs and expected outputs.
- Supports custom evaluators for specific cases.
- Evaluators can assess the performance of a task in a variety of ways, as a function
  of the EvaluatorContext.
- Fully Type-safe design for enhanced auto-completion and type checking.
- See the input documentation for details and examples.
- Defaults to True for per_run_step
- Uses DBOS to integrate with MCPServer.
- Wraps request and request_stream to DBOS steps.
- Uses DBOS for workflow steps.
- 'There are three possible ends for the task: ''completed'', ''canceled'', or ''failed''.'
- Uses API key for authentication. It can also be set via the GOOGLE_API_KEY environment
  variable.
- Uses tenacity for retry logic in async requests
- A toolset that renames the tools it contains using a dictionary mapping new names
  to original names.
- A toolset that prepares the tools it contains using a prepare function that takes
  the agent context and the original tool definitions.
- A toolset that wraps another toolset and delegates to it.
- See <https://docs.aws.amazon.com/bedrock/latest/APIReference/API_runtime_Converse.html>
  for more details.
- Refer to <https://docs.aws.amazon.com/bedrock/latest/APIReference/API_runtime_GuardrailConfiguration.html>
  for guardrail settings.
- See the Gemini API docs for more information on model settings and safety settings.
- Model responses should only have one text item.
- Ensure to set up the correct OAuth2 credentials prior to making requests.
- Some responses may vary based on model and settings
- Create an iterator for step-by-step graph execution, enabling inspection of intermediate
  states and results.
- Pydantic AI is designed to build production-grade applications with Generative AI.
- Pydantic AI allows access to messages exchanged during an agent run.
- Tools can be registered using decorators or as arguments in the Agent constructor.
- Function tools allow models to perform actions and retrieve information.
- Asynchronous transport with tenacity-based retry functionality
- Either function or stream_function must be provided for FunctionModel.
- Requires OAuth setup for API access.
- Model names may change frequently; check the Groq documentation for the latest list.
- Requires setup of authentication with Hugging Face.
- OpenAI API requires OAuth2 for authentication.
- Use OpenAIResponsesModel for the new API.
- Ensure to use the correct model name as per availability.
- This model will call all tools in the agent by default.
- This module provides functionality for creating and evaluating datasets.
- This is the main entry point for graph execution.
- Create an iterator for step-by-step graph execution.
- This module provides the Decision node type and related classes for implementing
  conditional branching logic in parallel control flow graphs.
- Uses state persistence to allow for interrupted execution.
- The agent run can be streamed for real-time updates.
- The context manager can be used to iterate over agent graph nodes.
- Wraps requests in DBOS steps for handling events and streaming.
- The run_sync method is a convenience method that wraps the run with loop.run_until_complete.
- See the Bedrock Converse API docs for detailed request structure.
- Cohere models include various date-stamped models.
- Ensure to check the latest models available via the API.
- Rate limits apply to API usage
- OpenAIResponsesModel uses the OpenAI Responses API.
- Uses EvaluationRenderer for rendering reports
- The EndNode marks the successful completion of a graph execution flow.
- The StartNode represents the beginning of a graph execution flow.
- StepNode bridges between the v1 and v2 graph execution systems.
- The integration receives messages in the form of a RunAgentInput object that describes
  the details of the requested agent run including message history, state, and available
  tools.
- Uses built-in tools for enhanced capabilities.
- The final result message will not be added to result messages if .stream_text(delta=True)
  is used.
- Access methods for message history, new messages, usage statistics, and final result
  once completed.
- The agent requires specific configuration to function properly.
- '`agent.run_stream_events()` cannot be used inside a Prefect flow. Set an `event_stream_handler`
  on the agent and use `agent.run()` instead.'
- Requires API key for authentication
- Ensure to check the model name for compatibility
- FunctionModel must receive a `function` to support non-streamed requests
- Groq supports a variety of models.
- Check the Groq documentation for the latest model names.
- The model name must be provided when initializing the model.
- Model which wraps another model.
- Supports loading datasets from YAML or JSON files.
- Includes evaluators for validating test cases.
- Optionally include input and output details in reports.
- This module provides the main `Graph` class and `GraphRun` execution engine that
  handles the orchestration of nodes, edges, and parallel execution paths in the graph-based
  workflow system.
- GraphTask encapsulates all the information needed to execute a specific node.
- GraphRun manages the execution state for a single run of a graph.
- No authentication required for using the Pydantic AI framework.
- Requires a valid AG-UI run input containing thread_id, run_id, messages, etc.
- Streaming event chunks are encoded as strings according to the accept header value.
- Uses asynchronous iterators to manage agent execution.
- Wraps an agent to enable it with Prefect durable flows, by automatically offloading
  model requests, tool calls, and MCP server communication to Prefect tasks.
- '`price` is deprecated, use `cost` instead'
- Uses tenacity library for retry functionality.
- Supports a variety of models
- List of available models can change frequently
- Ensure model names are checked against available models on Hugging Face.
- Requires model name to initialize a Hugging Face model.
- The provider must be set to 'huggingface'.
- The default model for judging starts as 'openai:gpt-4o'.
- Return a table containing the data from this report, or the diff between this report
  and a baseline report.
- Return a table containing the failures in this report.
- This is a workaround for the lack of TypeForm in the Python type system.
- Fixed identifier for the end node is '__end__'.
- If you need help getting started with Pydantic AI or with advanced usage, the following
  sources may be useful.
- The library supports both synchronous and asynchronous operations.
- Supports dynamic tool preparation and filtering based on context.
- Examples provided in the documentation are complete and can be run as is.
- The toolsets are additional to those provided to the Agent constructor
- model_name patterns include '{model_id}', '{publisher}/{model_id}', 'publishers/{publisher}/models/{model_id}',
  and 'projects/{project}/locations/{location}/publishers/{publisher}/models/{model_id}'
- The AG-UI run input contains thread_id, run_id, messages, etc.
- Uses async iteration to process agent graph nodes.
- This API provides synchronous and asynchronous methods for running an agent.
- Wraps an agent to enable it with Prefect durable flows
- The agent supports streaming responses and events.
- Ensure to set the event_stream_handler for event streaming.
- Uses tenacity for retry logic on HTTP requests.
- Asynchronous handling of requests.
- Requires setup of connected app in cohere
- Make sure to set up the authentication properly before making requests.
- OpenAI Responses API is the new API for OpenAI models.
- This is a convenience method that wraps self.run with `loop.run_until_complete(...)`.
  You therefore can't use this method inside async code or if there's an active event
  loop.
- This is not part of the A2A protocol - it's used internally for broker/worker communication.
- Dataset allows organization of a collection of test cases and evaluate against a
  task function.
- Optional name for the dataset can be provided.
- List of test cases must be included in the dataset.
- Base class for all evaluators.
- A complete graph definition ready for execution.
- Create a step from an async iterator (which functions like a 'stream').
- This method can be used as a decorator or called directly to create a step node
  from an async function.
- First create an API key by following the Quick Start guide.
- Handles streaming events encoded as strings according to the accept header value.
- This method builds an internal agent graph (using system prompts, tools and output
  schemas) and then runs the graph to completion. The result of the run is returned.
- Agent must have a unique name for Temporal activities.
- Event stream handler cannot be set at agent run time inside a Temporal workflow.
- This API allows running an agent with a user prompt in async mode and streaming
  responses.
- This API allows for async iteration over the nodes of the graph as they are executed.
- A toolset that prefixes the names of the tools it contains.
- Requires OAuth2 authentication setup.
- Requires a valid Hugging Face API token for authentication.
- Requires setup of connected app in OpenAI.
- Supports custom output arguments and text.
- A dataset allows you to organize a collection of test cases and evaluate them against
  a task function.
- Some nodes may return nulls in deeply nested fields
- This module provides the Decision node type and related classes for implementing
  conditional branching logic.
- Use a different file for each graph run, but a single file should be reused for
  multiple steps of the same run.
- DBOS can be configured to generate OpenTelemetry spans for each workflow and step
  execution.
- Durable agents have full support for streaming and MCP, with the added benefit of
  fault tolerance.
- Uses ASGI application with uvicorn server
- Pydantic AI offers a UsageLimits structure to limit usage.
- This is a convenience method that wraps the agent run and uses the event_stream_handler
  kwarg to get a stream of events from the run.
- The method can be used to consume the outputs coming from each LLM model response.
- This API is intended for synchronous and asynchronous execution of agent runs.
- '`run_stream` is used to run the agent with a user prompt in async mode, returning
  a streamed response.'
- '`run_stream_events` allows streaming events from the run.'
- The server will always either send a "submitted" or a "failed" on tasks/send.
- Multiple events can be processed in a response.
- Deprecated events should be replaced with recommended alternatives.
- Whether to allow requests to models is controlled by ALLOW_MODEL_REQUESTS.
- See Bedrock docs for full list of models
- Cohere does not support built-in tools.
- Ensure correct model name is used in requests
- Some responses may vary based on the model used
- Initializes with optional settings and profile.
- Model name is 'test'.
- Model provider is 'test'.
- Ensure to manage the state and dependencies properly during the graph execution.
- mermaid.ink is a free service not affiliated with Pydantic
- Supports multiple models and providers including OpenAI, Anthropic, and more.
- Since app is an ASGI application, it can be used with any ASGI server.
- System prompts are key to getting the model to behave as you want.
- Instructions should be used instead of system prompts for most use cases.
- Uses OAuth2 with Bearer token for authorization.
- Go to console.groq.com/keys to generate an API key.
- Uses async context manager for handling agent runs
- '`BuiltinToolCallEvent` is deprecated, look for `PartStartEvent` and `PartDeltaEvent`
  with `BuiltinToolCallPart` instead.'
- '`BuiltinToolResultEvent` is deprecated, look for `PartStartEvent` and `PartDeltaEvent`
  with `BuiltinToolReturnPart` instead.'
- Requires OAuth2 client credentials setup.
- Handles execution context for graph tasks
- Supports async iteration for task results
- In `pydantic-graph`, a graph is a collection of nodes that can be run in sequence.
- The status of a snapshot can be created, pending, running, success, or error.
- The kind of history step can be used as a discriminator when deserializing history.
- Path to the JSON file where the snapshots are stored.
- Uses evaluate_sync to run the function against all test cases in the dataset.
- MCP Elicitation requires careful handling - servers must not request sensitive information,
  and clients must implement user approval controls with clear explanations.
- Pydantic AI follows the OpenTelemetry Semantic Conventions for Generative AI systems
- No authentication required for using Pydantic AI.
- Agents can call each other in succession.
- Supports both structured output and plain text responses.
- Uses Deferred Tools for additional functionality
- FallbackModel doesn't have settings - it uses the individual settings of whichever
  model successfully handles the request.
- Supports dependency injection.
- Supports various date-stamped models.
- Either `function` or `stream_function` must be provided.
- Model names must be valid and available on Hugging Face
- You can then search or iterate the tree to make your assertions (using DFS for traversal).
- Seamless Observability integrates with Pydantic Logfire for real-time debugging
  and monitoring.
- Use the 'force_download' flag to download file content if URLs are inaccessible.
- Uses API key for authentication — requires setup of Google Cloud project
- The state concept provides an optional way to access and mutate an object as nodes
  run in a graph.
- Handles state persistence for graph execution.
- This API allows running agents with user prompts in async mode.
- This API integrates with Prefect to turn calls into tasks.
- 'There are three possible ends for the task: completed, canceled, or failed.'
- Binary content that's guaranteed to be an image.
- Uses async iteration over the nodes in the agent run
- The agent run should be stopped when returning an End node
- Uses a provider for authentication and API access.
- Some models may have specific usage limits
- Requires valid API key and OAuth setup.
- Rate limiting applies based on account level.
- TestModel initializes with default settings.
- Each case can specify a name, inputs, expected outputs, and metadata.
- Uses external service mermaid.ink to render images.
- The graph run should stop when you return an End node.
- Pydantic AI is designed for building applications with Generative AI.
- System prompts can be defined statically or dynamically.
- Uses Deferred Tools for executing tool calls and managing agent runs.
- To use Groq through their API, go to console.groq.com/keys and generate an API key.
- Content moderation and safety settings for Bedrock API requests.
- Performance optimization settings for model inference.
- Good API documentation is available at https://ai.google.dev/api.
- Use OpenAIResponsesModel for newer features.
- 'Deprecated: OpenAIModel renamed to OpenAIChatModel.'
- The model allows for calling tools and returns tool responses if possible.
- The output of a grading operation is represented by GradingOutput class.
- Core graph execution engine for the next version of the pydantic-graph library.
- Optional name for the graph, if not provided the name will be inferred from the
  calling frame on the first call to a graph method.
- The type of the graph state
- The type of the dependencies
- The type of the graph input data
- The type of the graph output data
- Whether to automatically create instrumentation spans
- Set a tool's config to `None` in `tool_task_config_by_name` to disable task wrapping
  for that specific tool.
- MCP server instances can be loaded from a JSON configuration file.
- MCP elicitation supports string, number, boolean, and enum types with flat object
  structures only.
- AG-UI tools are provided to the Pydantic AI agent for frontend user interfaces.
- Installation of pydantic-graph is required for pydantic-ai.
- This API is used to consume the outputs coming from each LLM model response.
- The parameters `event_mode` and `event_logger_provider` are only relevant for version
  1.
- A context manager can be used to iterate over the agent graph's nodes as they are
  executed.
- GraphTask executes a node in the graph.
- GraphRun manages execution state for a graph.
- GraphBuilder constructs executable graph definitions.
- The status of a snapshot can be 'created', 'pending', 'running', 'success', or 'error'.
- You should use a different file for each graph run, but a single file should be
  reused for multiple steps of the same run.
- Respects the max_wait limit to prevent excessive delays
- Uses a dynamic toolset based on the agent run context
- Uses async execution model
- Supports state persistence
- Settings for Bedrock models require a guardrail configuration.
- See the Groq docs for more details on available models.
- Ensure to handle model-specific settings for optimal performance
- Handles various short forms of evaluator specifications.
- This module provides a parallel control flow graph execution framework with support
  for various node types.
- This API allows for execution of graph-based workflows.
- Supports step-by-step execution and rendering of graphs.
- The EndNode marks the successful completion of a graph execution flow and can collect
  the final output data.
- The graph execution engine handles orchestration of nodes and edges.
- Whether to include notes on nodes in the diagram, defaults to true.
- Set a tool's config to None in tool_task_config_by_name to disable task wrapping
  for that specific tool.
- Each flow run executes in an isolated process, and all inputs and dependencies must
  be serializable.
- Temporal activities cannot stream output directly to the activity call site.
- System prompts might seem simple at first glance since they're just strings.
- Use instructions instead of system prompts for most use cases.
- The API uses a dependency injection pattern for managing client and API keys.
- Uses async functions for operation.
- State persistence allows for interrupted executions.
- handles AG-UI requests by running the agent
- This API supports asynchronous operations.
- The AgentRun provides methods to access the full message history and the final result
  of the run.
- '`run_stream` and `run_stream_events` can only be used outside a Prefect flow.'
- Default input/output modes are application/json.
- The identifier is automatically passed when BinaryContent is returned by a tool.
- Uses AsyncTenacityTransport for async HTTP requests with retry logic.
- Uses Google API for accessing Gemini models.
- Supports various model names, including production and preview models.
- Some responses may include streaming data
- Ensure to set up your Hugging Face account and obtain necessary tokens.
- Datasets allow you to organize a collection of test cases and evaluate them against
  a task function.
- A Decision node evaluates conditions and routes execution to different branches
  based on the input data type or custom matching logic.
- Use the last returned node as the input to Graph.next.
- Example includes a complete test case for evaluation.
- The SSE transport in MCP is deprecated, use Streamable HTTP instead.
- Handles elicitation requests to book a restaurant table
- Installation requires Python 3.10+.
- Streaming works with the standard Agent class, and doesn't require any special setup,
  just a model that supports streaming.
- Uses TestModel for easy tool tracking
- Examples are complete and can be run as is
- If you want to always run the agent graph to completion and stream events and output
  at the same time, use agent.run() with an event_stream_handler.
- This API provides async iterations of events during the agent's execution.
- The agent can be wrapped for use inside a Temporal workflow.
- This API allows synchronous and asynchronous interaction with agents.
- Events can be streamed during async runs.
- Agent card URL is exposed at '/.well-known/agent.json'
- Main endpoint for the A2A server is '/'.
- This identifier can be provided to the model in a message to allow it to refer to
  this file in a tool call argument.
- Model names can vary based on API updates.
- Supports various Groq models listed in documentation.
- Ensure to follow the Mistral API documentation for proper setup.
- This model is specifically for testing purposes and may not behave like production
  models.
- Stream functions are async callables that receive a step context and return an async
  iterator.
- Agent instances must have a unique name.
- Task inputs must be serializable.
- MCP servers can be configured via JSON files.
- Elicitation allows servers to request structured input from clients.
- Elicitation allows servers to request additional structured input from clients.
- Uses OpenAI GPT-4o for generating email feedback.
- The run_ag_ui function streams AG-UI protocol events.
- Uses asynchronous methods to handle streaming events from agent runs.
- This library provides an asynchronous interface for processing agent events.
- Some requests may result in rate limiting
- Uses tenacity for retry functionality.
- Model names can change frequently, refer to the documentation for the latest list.
- Mistral supports a variety of date-stamped models.
- Authentication requires a valid client ID and secret.
- Uses OAuth2 with refresh token
- Cases can also have their own specific evaluators which are run in addition to dataset-level
  evaluators.
- Terminal node representing the completion of graph execution.
- Entry point node for graph execution.
- Labels are used only in generated mermaid diagrams.
- Uses a synchronous evaluation method for test cases
- To ensure that Temporal knows what code to run when an activity fails or is interrupted
  and then restarted, each activity needs to have a name that's stable and unique.
- Handles structured booking details elicitation from client
- Model-agnostic and supports various models and providers.
- Use an LLM to summarize older messages to preserve context while reducing tokens.
- The final result of the run is populated with an AgentRunResult once it returns
  an End node.
- Agent must have a unique name to be used with Temporal.
- This API allows synchronous and asynchronous interactions with the agent.
- Supports async and synchronous runs with user prompts.
- Requires setup of connected app in Groq
- Mistral supports various models, see Mistral API documentation for details.
- Can be loaded from and saved to YAML or JSON files.
- Labels are only used in generated mermaid diagrams.
- Ensure the request payload matches the expected schema for graph execution
- File based state persistence that hold graph run state in a JSON file.
- Temporal server must be running locally for the agent to work.
- MCP Server requires a running instance before creating clients.
- The OpenTelemetry Semantic Conventions are still experimental and are likely to
  change.
- Pydantic AI is designed to help you build production-grade applications with Generative
  AI.
- Uses a synchronous and asynchronous method for running the agent.
- This API allows for running agent prompts in async mode.
- Utilizes event stream for handling responses.
- Requires setup of Application Default Credentials.
- The transport uses tenacity-based retry functionality.
- The final result is populated once the run returns an End node.
- Refer to the Groq documentation for model specifics.
- Includes support for step nodes, decision nodes, fork nodes, join nodes, and reducers.
- Initialization requires setup of the graph builder
- Graph structures must validate before execution
- The final result of the graph run if the run is completed, otherwise `None`.
- MCP Elicitation requires careful handling - servers must not request sensitive information.
- Join the `#pydantic-ai` channel in the Pydantic Slack to ask questions, get help,
  and chat about Pydantic AI.
- Usage limits are applicable to prevent excessive tool calling.
- Accessing messages can be done via all_messages() and new_messages() methods.
- This is a convenience method that wraps the run function and uses the event_stream_handler
  kwarg.
- Stream response as an iterable of ModelResponseStreamEvents
- This method builds an internal agent graph and runs to completion.
- This API allows running an agent with a user prompt and streaming events.
- Dataset allows you to organize a collection of test cases and evaluate them against
  a task function.
- Optionally include input and output details.
- Decision node allows conditional branching based on runtime conditions.
- A graph is a collection of nodes that can be run in sequence.
- The graph definition doesn't define the entry point, you need to provide the starting
  node.
- State persistence interface defaults to SimpleStatePersistence if None.
- If not specified, uses self.next_node, which is initialized to the start_node of
  the run and updated each time a new node is returned.
- In memory state persistence that holds the latest snapshot.
- Uses File based state persistence that hold graph run state in a JSON file.
- Agents must have a unique name for durability.
- DBOS workflows need to be defined before calling DBOS.launch()
- Event stream handlers behave differently when running inside a Prefect flow versus
  outside.
- Usage limits can be applied to token usage, requests, and tool calls.
- Model settings can be configured for temperature, max tokens, and more.
- Tools can optionally be defined with a prepare method.
- The feedback agent uses OpenAI's GPT-4o model.
- Use async mode to stream events from the run.
- Requires setup of connected app in pydantic_ai
- Some responses may contain nested errors
- The agent supports async operations.
- Asynchronous HTTP transport with tenacity-based retry functionality
- Check model configuration for Bedrock for details on how to set up authentication.
- Uses OAuth2 with refresh token — requires setup of connected app in cohere
- Some models may have specific requirements for inputs
- Ensure correct authentication setup for Mistral API access.
- Requires setup of OpenAI API key for access.
- Returns all descendants of this node in DFS order.
- Returns all ancestors of this node.
- Includes input and output details.
- A workaround for the lack of TypeForm in the Python type system.
- Each node defines its outgoing edges, e.g., which nodes may be run next.
- Uses async methods for graph manipulation
- Simple in memory state persistence that just hold the latest snapshot.
- In memory state persistence that hold a list of snapshots.
- Uses async context manager to iterate over the agent graph's nodes as they are executed.
- The agent can be run in sync and async modes.
- The run_stream function returns streamed responses.
- If True, perform a token counting pass before sending the request to the model,
  to enforce `request_tokens_limit` ahead of time. This may incur additional overhead.
- This is useful because if we have token limits, we need to check them after receiving
  each streamed message. If there are no limits, we can skip that processing in the
  streaming response iterator.
- See the Bedrock Converse API docs for a full list of settings.
- FallbackModel allows using multiple models in case of failure.
- Requires setup of connected app in Google Cloud.
- Streaming responses may have out-of-order content.
- Requires Groq model name and provider setup.
- Make sure to handle streamed responses properly.
- Requires a valid client ID and secret for authentication.
- Ensure to configure model settings correctly for optimal performance.
- The model name is required.
- The provider defaults to 'openai'.
- Each case must have inputs, and can optionally have a name, expected output, metadata,
  and case-specific evaluators.
- Pydantic Evals follows a code-first approach where all evaluation components are
  defined in Python.
- Evals are an emerging practice and have a flexible design.
- Uses durable execution with DBOS and Prefect.
- Elicitation allows servers to request additional context from clients.
- Requires an OpenAI API key
- Usage limits can be set via UsageLimits structure.
- Model settings can be configured using settings.ModelSettings.
- You need to set an API key as an environment variable.
- Wraps self.run and uses the event_stream_handler kwarg to get a stream of events
  from the run.
- '`run_stream()` runs the agent with a user prompt in async mode, returning a streamed
  response.'
- '`run_stream_events()` runs the agent with a user prompt in async mode and streams
  events from the run.'
- '`iter()` allows interaction with the agent in a more synchronous manner.'
- Uses tenacity for retry capabilities on HTTP requests.
- Uses OAuth2 with refresh token — requires setup of connected app in Anthropic
- Some responses may contain unexpected nulls in nested fields
- Ensure to set up the necessary OAuth2 credentials in the secrets.
- Prefect tasks can benefit from retry logic and caching.
- Pydantic AI follows OpenTelemetry Semantic Conventions for Generative AI systems.
- This example demonstrates the usage of Pydantic AI and FastAPI.
- Requires setup of OpenAI key for embeddings.
- Some objects like DocSections may return nulls in deeply nested fields
- Uses ASGI application with uvicorn server.
- Model settings can be configured for temperature and max_tokens.
- Uses ClientAndKey dependencies.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'RuntimeError: This event loop is already running'
- 'ModelHTTPError: Check the model configuration or API availability'
- 'ValidationError: Raised when validation fails due to incorrect types or missing
  required arguments'
- 'ModelRetry: Raised for transient network errors or when the tool determines the
  initial attempt needs modification'
- '401 Unauthorized: Check API key or token.'
- '429: Too Many Requests'
- '502: Bad Gateway'
- '503: Service Unavailable'
- '504: Gateway Timeout'
- '429: Too Many Requests - Throttle API calls or respect Retry-After headers'
- '502: Bad Gateway - Retry on server errors'
- '503: Service Unavailable - Retry on server errors'
- '504: Gateway Timeout - Retry on server errors'
- 'AssertionError: Check the expected output format.'
- 'Invalid credentials: Check your API key or OAuth token.'
- '401 Unauthorized: Check that SLACK_API_KEY is set and valid'
- 'Failed to send to Slack: Unknown error'
- The tool call was denied.
- 'UserError: An agent needs to have a unique `name` in order to be used with Prefect.'
- 'UserError: An agent needs to have a `model` in order to be used with Prefect.'
- 'UsageLimitExceeded: Error raised when a Model''s usage exceeds the specified limits.'
- 'UnexpectedModelBehavior: Error caused by unexpected Model behavior, e.g. an unexpected
  response code.'
- '4xx or 5xx: Raised when a model provider response has a status code of 4xx or 5xx'
- 'FileNotFoundError: If the configuration file does not exist.'
- 'ValidationError: If the configuration file does not match the schema.'
- 'UserError: Set the `OLLAMA_BASE_URL` environment variable or pass it via `OllamaProvider(base_url=...)`
  to use the Ollama provider.'
- InvalidRequestError
- MethodNotFoundError
- InvalidParamsError
- InternalError
- TaskNotFoundError
- TaskNotCancelableError
- PushNotificationNotSupportedError
- UnsupportedOperationError
- ContentTypeNotSupportedError
- InvalidAgentResponseError
- 'Invalid JSON payload: -32700'
- 'Request payload validation error: -32600'
- 'Method not found: -32601'
- 'Invalid parameters: -32602'
- 'Internal error: -32603'
- 'Task not found: -32001'
- 'Task not cancelable: -32002'
- 'Push notification not supported: -32003'
- 'This operation is not supported: -32004'
- 'Incompatible content types: -32005'
- 'Invalid agent response: -32006'
- 'UserError: API key must be provided or set in the [MODEL]_API_KEY environment variable'
- 'USAGE_LIMIT_EXCEEDED: Limit on tokens, requests, or tool calls has been exceeded.'
- 'HTTPStatusError: Raised for retryable HTTP status codes.'
- 'ConnectionError: Raised for connection issues.'
- 'UsageLimitExceeded: The next request would exceed the usage limit.'
- 'ModelRetry: Ask the user to try again if the model cannot fulfill the request.'
- 'UNEXPECTED_MODEL_BEHAVIOR: Check messages for details'
- 'MODEL_RETRY: Please try again.'
- 'UsageLimitExceeded: Check your token and request limits.'
- '400 Bad Request: Check request parameters for correctness.'
- '429 Too Many Requests: Rate limit exceeded, slow down requests.'
- '500 Internal Server Error: Try again later.'
- 'UsageLimitExceeded: Limit exceeded for tokens, requests, or tool calls.'
- 'Node not found: Ensure the specified node exists in the graph.'
- 'Invalid state: Confirm that the state provided is compatible with the graph.'
- '503: Service Unavailable — The service is temporarily unable to handle the request.'
- 'HTTPStatusError: Treat responses with HTTP status 4xx/5xx as failures that need
  to be retried.'
- 'Parameter description missing: Raise an error if require_parameter_descriptions
  is True.'
- 'UsageLimitExceeded: The next request would exceed the request_limit.'
- 'ModelHTTPError: Handle HTTP errors when executing model requests.'
- Tool 'calc_volume' exceeded max retries count of 1
- 'ImportError: Please install the `logfire` package to use the Logfire plugin'
- 'USER_ERROR: Check model and flow configurations.'
- 'TIMEOUT: Adjust request parameters for performance.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify API key or OAuth token.'
- '404 Not Found: Ensure the endpoint exists.'
- '401 Unauthorized: Check your API credentials.'
- '404 Not Found: Ensure the endpoint path is correct.'
- 'ModelHTTPError: Handle exceptions during model execution.'
- 'END: No output data from the graph run.'
- 'UNKNOWN_TOOL: The tool name provided is not recognized.'
- '401 Unauthorized: Recheck API key or permissions.'
- 'ModelHTTPError: Handle exceptions during model execution'
- 'AGENT_RUN_ERROR: The agent run did not finish properly.'
- Non-DBOS model cannot be set at agent run time inside a DBOS workflow, it must be
  set at agent creation time.
- '400 Bad Request: Ensure request parameters are correct.'
- '401 Unauthorized: Check API key validity.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Check your API key and token expiration.'
- '429 Too Many Requests: You have hit the rate limit.'
- 'GraphNodeRunningError: if the node status is not ''created'' or ''pending''.'
- 'LookupError: if the snapshot ID is not found in persistence.'
- 'UserError: API key must be provided or set in the [MODEL]_API_KEY environment variable.'
- 'ModelRetry: Please try again.'
- 'UnexpectedModelBehavior: An error occurred.'
- 'ModelHTTPError: Encountered during the execution of the agent.'
- '401 Unauthorized: Recheck API key'
- 'UsageLimitExceeded: Exceeded the output_tokens_limit'
- '401 Unauthorized: Check the API key and permissions.'
- 'ModelHTTPError: Exception raised during model execution.'
- '400 Bad Request: Ensure that the email structure is correct.'
- '500 Internal Server Error: Try again later or contact support.'
- 'ModelHTTPError: Raised when all models fail.'
- 'UsageLimitExceeded: Check response tokens and request limits.'
- 'ModelHTTPError: Error when the model fails to respond.'
- '429 Too Many Requests: Respect `Retry-After` headers'
- '500 Internal Server Error: Server error, retry after backoff'
- 'UsageLimitExceeded: The next tool call(s) would exceed the tool_calls_limit'
- 'ModelHTTPError: Check the request and response for more information.'
- 'USER_ERROR: Check input validation.'
- 'TOKEN_EXPIRED: Refresh your OAuth token.'
- 'UserError: Non-DBOS model cannot be set at agent run time inside a DBOS workflow.'
- 'UsageLimitExceeded: Exceeded the output_tokens_limit of 10'
- 'MODEL_HTTP_ERROR: Handle exceptions raised by models.'
- 'UserError: An agent needs to have a unique `name` in order to be used with Temporal.'
- 'UserError: An agent needs to have a `model` in order to be used with Temporal.'
- 'ImportError: Please install the `logfire` package.'
- 'UsageLimitExceeded: Limit exceeded for requests or tokens.'
- 'HTTPStatusError: Treat responses with HTTP status 4xx/5xx as failures that need
  to be retried'
- Please install the `logfire` package to use the Logfire plugin.
- 'USER_ERROR: An agent needs to have a unique name to be used with DBOS.'
- 'USER_ERROR: An agent needs to have a model to be used with DBOS.'
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Ensure the API key is valid and included in the request.'
- 'UserError: An agent needs to have a unique `name` in order to be used with DBOS.'
- 'UserError: An agent needs to have a `model` in order to be used with DBOS, it cannot
  be set at agent run time.'
- 'INVALID_MODEL: Check model configuration and parameters'
- 'TIMEOUT: Ensure the request is within the allowed execution time'
- '400 Bad Request: Check the parameters passed in the request.'
- '404 Not Found: Ensure the endpoint is correct.'
- '404 Not Found: Check the model name or the endpoint.'
- '400 Bad Request: Check input parameters.'
- '401 Unauthorized: Ensure API key is valid.'
- 'UserError: Event stream handler cannot be set at agent run time inside a Temporal
  workflow.'
- 'UserError: Toolsets that are ''leaves'' need to have a unique `id`.'
- 'UsageLimitExceeded: You have exceeded the limit set for this request.'
- '401 Unauthorized: Check API key'
- '404 Not Found: Verify endpoint path'
- '401 Unauthorized: Check API key.'
- 'UserError: An agent needs to have a `model` in order to be used with DBOS.'
- 'UserError: Non-DBOS model cannot be contextually overridden inside a DBOS workflow.'
- 'UnexpectedModelBehavior: An error occurred'
- '400 Bad Request: Check the user_prompt parameter for validity.'
- 'UnexpectedResponseError: An error raised when an unexpected response is received
  from the server.'
- 'UsageLimitExceeded: The next request would exceed the request limit.'
- 'USER_ERROR: Check agent name or model settings'
- 'TIMEOUT: Activity exceeded start to close timeout limit'
- 'UsageLimitExceeded: Exceeded the specified usage limit.'
- 'UnexpectedModelBehavior: If models behave unexpectedly (e.g., the retry limit is
  exceeded, or their API returns `503`)'
- UnexpectedResponseError
- 'UsageLimitExceeded: The next request would exceed the request_limit'
- 'UnexpectedModelBehavior: Content filter ''SAFETY'' triggered'
- '401 Unauthorized: Recheck API key.'
- 'An error occurred: Tool ''calc_volume'' exceeded max retries count of 1'
- 'ModelHTTPError: Handles HTTP errors in the fallback model.'
- 'USAGE_LIMIT_EXCEEDED: Limit for tokens or requests exceeded.'
- 'REQUEST_TIMEOUT: The request took too long to process.'
- 'INVALID_INPUT: The input provided is not valid.'
- 'ModelHTTPError: Handle exceptions raised during the run execution.'
- '401 Unauthorized: Verify the access token.'
- 'PydanticSerializationError: The `deps` object failed to be serialized.'
- 'USER_ERROR: Invalid user input or context.'
- 'SERVER_ERROR: An error occurred on the server.'
- 'UNEXPECTED_MODEL_BEHAVIOR: An error occurred'
- 'UserError: An agent needs to have a `model` in order to be used with Temporal,
  it cannot be set at agent run time.'
- 'UnexpectedModelBehavior: If models behave unexpectedly'
- 'ModelRetry: Raised if a model retry limit is exceeded'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Ensure valid credentials are provided.'
- '500 Internal Server Error: Retry the request.'
- 'UsageLimitExceeded: Exceeded the specified limit for tokens or requests.'
- 'UnexpectedModelBehavior: If models behave unexpectedly, capture_run_messages can
  be used to access the messages exchanged during the run to help diagnose the issue.'
- 'UsageLimitExceeded: Exceeded the output_tokens_limit or request_limit'
- 'USER_ERROR: Ensure the agent has a model defined.'
- 'NAME_ERROR: An agent must have a unique name for DBOS.'
- 'ImportError: Please install the `logfire` package'
- 'USER_ERROR: Ensure the agent has a valid model defined'
- 'DBOS_ERROR: Check if the DBOS service is reachable'
- 'USER_ERROR: Raised when an invalid request is made.'
- 'NotImplementedError: Method not implemented.'
- '401 Unauthorized: Check your API key and permissions'
- '404 Not Found: The requested resource does not exist'
- '429 Too Many Requests: Rate limit exceeded, try again later'
- 'UserError: Ensure the agent has a unique name.'
- 'PydanticUserError: Not retryable error.'
- 'ImportError: Please install the `logfire` package to use the Logfire plugin.'
- '400 Bad Request: Check request parameters.'
- 'UsageLimitExceeded: Exceeded the defined usage limits.'
- 'UnexpectedModelBehavior: The model behaved unexpectedly.'
- 'UnexpectedModelBehavior: Raised when models behave unexpectedly.'
- 'UserError: The agent name cannot be changed after creation.'
- 'USER_ERROR: Cannot be used inside a Prefect flow.'
- 'UsageLimitExceeded: Exceeded the output_tokens_limit of 10 (output_tokens=32)'
- 'UnexpectedModelBehavior: Capture run messages to diagnose.'
- An agent needs to have a `model` in order to be used with DBOS
- 'ModelHTTPError: Handle errors when all models fail'
- 'AgentRunError: Unexpected node encountered during the run.'
- 'UnexpectedModelBehavior: Unexpected behavior due to model errors.'
- '400 Bad Request: Check the request format and required fields.'
- 'USER_ERROR: Non-DBOS model cannot be set at agent run time inside a DBOS workflow.'
- 'UnexpectedModelBehavior: Check the messages exchanged during the run for diagnosis.'
- Non-DBOS model cannot be set at agent run time inside a DBOS workflow.
- Non-DBOS model cannot be contextually overridden inside a DBOS workflow.
- 'Could not infer media type from video URL: {url}. Explicitly provide a `media_type`
  instead.'
- '401 Unauthorized: Check your API key.'
- 'ModelRetry: Used to indicate that the model should try again with modified arguments.'
- 'USER_ERROR: Ensure that the agent has a unique name.'
- 'PydanticSerializationError: Check if the deps object is serializable.'
- '500 Internal Server Error: Server encountered an unexpected condition.'
- 'UnexpectedModelBehavior: Content filter ''SAFETY'' triggered.'
- 'ModelRetry: Indicates that the model should try again with modified arguments.'
- 'UnexpectedModelBehavior: Indicates unexpected behavior from the model.'
- 'ModelHTTPError: Indicates an error occurred during the model execution.'
- 'UNPROCESSABLE_ENTITY: Validation error with provided input.'
- '404 Not Found: Check the endpoint path.'
- '403 Forbidden: Verify API permissions.'
- '400 Bad Request: Check the request parameters and body.'
- '404 Not Found: Verify the endpoint path.'
- '500 Internal Server Error: Contact support.'
- An agent needs to have a unique `name` in order to be used with DBOS.
- An agent needs to have a `model` in order to be used with DBOS, it cannot be set
  at agent run time.
- 'UsageLimitExceeded: Usage limits exceeded during execution.'
- '401 Unauthorized: Recheck API key or permissions'
- '400 Bad Request: Check the input parameters for correctness.'
- '401 Unauthorized: Ensure proper authentication is provided.'
- '500 Internal Server Error: An unexpected error occurred on the server.'
- Non-Prefect model cannot be set at agent run time inside a Prefect flow.
- 'UsageLimitExceeded: Exceeded the defined usage limit.'
- 'ModelHTTPError: Handle HTTP errors from model requests.'
- '400 Bad Request: Check your input parameters.'
- '400 Bad Request: Check your request format and parameters.'
- '403 Forbidden: Check API key and permissions'
- '404 Not Found: Ensure the endpoint path is correct'
- 'USER_ERROR: Check the provided user input.'
- 'EVENT_STREAM_HANDLER_ERROR: Event stream handler cannot be set at agent run time
  inside a Temporal workflow.'
- 'ModelHTTPError: Handle this error when all models fail.'
- 'GRAPH_ERROR: Ensure nodes are correctly defined and connected.'
- 'STATE_PERSISTENCE_ERROR: Check the state persistence setup.'
- 'UserError: ''agent.run_sync()'' cannot be used inside a Temporal workflow.'
- 'UsageLimitExceeded: Exceeded the specified limit for tokens, requests, or tool
  calls.'
- 'Node execution failed: Check parameters passed to nodes.'
- 'Graph run timed out: Increase timeout settings or optimize nodes.'
- 'HTTPStatus.UNPROCESSABLE_ENTITY: Validation error occurred.'
- 'UsageLimitExceeded: Exceeded the output_tokens_limit or request_limit.'
- 'HTTPStatusError: Raised for 4xx/5xx responses if no response validator is present'
- Event stream handler cannot be set at agent run time inside a Temporal workflow,
  it must be set at agent creation time.
- No stream response or run result provided
- '400 Bad Request: Check the format of the input data'
- '401 Unauthorized: Verify OAuth token'
- 'INVALID_API_KEY: Check your API key.'
- 'TOOL_NOT_FOUND: Verify the tool name.'
- 'REQUEST_TIMEOUT: Increase the timeout setting.'
- '400 Bad Request: Check input parameters for validity'
- '404 Not Found: The requested resource was not found'
- '500 Internal Server Error: An unexpected error occurred'
- 'RuntimeError: If the retry controller did not make any attempts.'
- 'Exception: Any exception raised by the wrapped transport or validation function.'
- 'UnexpectedModelBehavior: If models behave unexpectedly, capture_run_messages can
  be used to access the messages exchanged during the run.'
- '401 Unauthorized: Check your authentication credentials.'
- 'Node not found: Check the specified node name.'
- 'Invalid state: Ensure the state is correctly initialized.'
- 'UserError: An agent needs to have a unique name to be used with Temporal.'
- 'UserError: An agent needs to have a model to be used with Temporal.'
- 'UsageLimitExceeded: Limit exceeded for requests or tokens'
- 'ModelHTTPError: Handle HTTP errors during model execution.'
- Non-DBOS model cannot be contextually overridden inside a DBOS workflow, it must
  be set at agent creation time.
- 'RuntimeError: If model requests are not allowed.'
- 'UnexpectedModelBehavior: Tool exceeded max retries count'
- 'FallbackExceptionGroup: All models from FallbackModel failed'
- No span was created for this agent run
- 'UsageLimitExceeded: Exceeded the output_tokens_limit.'
- 'ValidationError: Raised when tool arguments are invalid.'
- 'ModelRetry: Raised for transient errors during tool execution.'
- Set the `CO_API_KEY` environment variable or pass it via `CohereProvider(api_key=...)`
  to use the Cohere provider.
- 'ModelHTTPError: Handle with fallback models or customize behavior.'
- 'MODEL_NOT_FOUND: Ensure the model name is correct.'
- 'INVALID_PROVIDER: Check the provider configuration.'
- 'UnexpectedModelBehavior: If models behave unexpectedly, check capture_run_messages
  for details.'
- 'ModelHTTPError: Handle HTTP errors when all models fail.'
- 'UserError: The agent needs to have a `model` in order to be used with Temporal.'
- 'INVALID_ARGUMENT: Check input parameters for correctness'
- 'TIMEOUT: The request took too long to complete'
- 'UnexpectedModelBehavior: Tool exceeded max retries count.'
- '400 Bad Request: Check the parameters provided.'
- '401 Unauthorized: Verify your API key.'
- Invalid JSON payload
- Request payload validation error
- Method not found
- Invalid parameters
- Internal error
- Task not found
- Task not cancelable
- Push notification not supported
- This operation is not supported
- Incompatible content types
- Invalid agent response
- '401 Unauthorized: Verify API key.'
- '404 Not Found: Model not found.'
- 'CRAWL_RESTRICTION: Gemini can''t access certain URLs.'
- '401 Unauthorized: Check your API key'
- '404 Not Found: Verify the endpoint URL'
- 'Graph run failed: Check node definitions and connections.'
- 'State mutation error: Ensure state is properly passed.'
- '400 Bad Request: Check that either function or stream_function is provided.'
- '404 Not Found: Endpoint does not exist'
- '429 Too Many Requests: Rate limit exceeded'
- 'ModelHTTPError: Handle exceptions that occur during the model execution.'
- '400 Bad Request: Invalid request parameters.'
- '401 Unauthorized: Authentication failed.'
- '404 Not Found: Requested resource not found.'
- '404 Not Found: The requested model does not exist.'
- '404 Not Found: Check if the model name is correct.'
- '401 Unauthorized: Ensure that authentication credentials are valid.'
- 'INVALID_REQUEST: Check the request parameters.'
- '401 Unauthorized: Check your API key and permissions.'
- '429 Too Many Requests: Reduce request frequency.'
- '401 Unauthorized: Check your API token.'
- 'UsageLimitExceeded: Exceeded the defined usage limits'
- 'ModelRetry: Request should be retried due to transient error'
- 'ModelRetry: No user found with name.'
- 'UnexpectedModelBehavior: Tool exceeded max retries.'
- '401 Unauthorized: Recheck your API key or authentication method.'
- 'INVALID_MODEL_NAME: Check the provided model name against the available models'
- 'REQUEST_TIMEOUT: Increase the timeout settings for longer queries'
- '429 Too Many Requests: Implement exponential backoff strategy.'
- '404 Not Found: Verify endpoint URL and parameters.'
- 'HTTPError: Check if the API endpoint is correct'
- '500 Internal Server Error: The server encountered an unexpected condition'
- 'UserError: `agent.run_sync()` cannot be used inside a Temporal workflow.'
- 'INVALID_REQUEST: Ensure all required fields are provided'
- 'UNAUTHORIZED: Check your API key or token'
- '401 Unauthorized: Check your authentication details.'
- '400 Bad Request: Ensure the request format is correct.'
- 'ValidationError: If the file cannot be parsed as a valid dataset.'
- 'ValueError: If the format cannot be inferred from the file extension.'
- 'API_KEY_INVALID: Ensure your API key is correct.'
- 'MODEL_NOT_FOUND: Check if the model name is correct.'
- 'ModelHTTPError: Indicates an issue with the API call.'
- 'UserError: An agent needs to have a unique `name`.'
- 'PydanticUserError: The `deps` object failed to be serialized.'
- An agent needs to have a `model` in order to be used with Temporal.
- 'MODEL_NOT_FOUND: Check the model name and try again.'
- 'INVALID_REQUEST: Ensure that all required parameters are provided.'
- 'UsageLimitExceeded: Check request or token limits.'
- '400 Bad Request: Check request parameters and payload'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '401 Unauthorized: Check client credentials and permissions.'
- '401 Unauthorized: Invalid API key or token.'
- '401 Unauthorized: Check OAuth token.'
- 'GraphExecutionError: Handle execution errors gracefully'
- 'InvalidStateError: Ensure state types are correctly defined'
- 'UserError: An agent needs to have a `model`.'
- 'INVALID_ARGUMENT: Check the provided model name or parameters.'
- 'UNAUTHORIZED: Ensure correct authentication details are provided.'
- '401 Unauthorized: Check your credentials and token validity'
- '429 Too Many Requests: Exceeded the rate limit'
- 'INVALID_REQUEST: Check your request parameters.'
- 'UNAUTHORIZED: Verify your API key.'
- '400 Bad Request: Check the request parameters and format.'
- '401 Unauthorized: Check your authentication tokens and permissions'
- '404 Not Found: Verify the model name and endpoint'
- '429 Too Many Requests: You have exceeded the rate limit'
- 'USER_ERROR: API key must be provided or set in the [MODEL]_API_KEY environment
  variable'
- 'ModelHTTPError: Handle errors during model execution.'
- '429 Too Many Requests: Rate limit exceeded. Please try again later.'
- '500 Internal Server Error: An unexpected error occurred. Please try again.'
- '401 Unauthorized: Check OAuth token or scopes.'
- '400 Bad Request: Check the input parameters'
- '401 Unauthorized: Recheck OAuth token or scopes'
- '500 Internal Server Error: Retry the request'
- '400 Bad Request: Check the request format or parameters'
- '404 Not Found: Verify the endpoint or resource exists'
- 'UsageLimitExceeded: The next request would exceed the limit.'
- '400 Bad Request: Check your request format'
- '404 Not Found: Ensure the endpoint is correct'
- 'INVALID_MODEL: The specified model is not available.'
- '401 Unauthorized: Check your credentials or token expiration.'
- 'USER_ERROR: Ensure `event_stream_handler` is set when using async streams.'
- 'RATE_LIMIT_EXCEEDED: Reduce request frequency'
- '401 Unauthorized: Verify OAuth credentials'
- '401 Unauthorized: Check OAuth scopes or token validity'
- '429 Too Many Requests: Throttle API calls'
- 'RuntimeError: This event loop is already running.'
- 'ModelHTTPError: Check model configurations.'
- '400 Bad Request: Check the request format.'
- '401 Unauthorized: Verify your authentication credentials.'
- '404 Not Found: The requested resource does not exist.'
- 'UnexpectedModelBehavior: Content filter triggered.'
- 'Unexpected node: {task}'
- No response found in the message history
- '400 Bad Request: Check request parameters for validity.'
- '403 Forbidden: Check API key and OAuth scopes.'
- '400 Bad Request: Check model parameters and inputs.'
- '401 Unauthorized: Ensure valid authentication credentials.'
- 'Invalid model name: Ensure the model name is correct.'
- 'Authentication failed: Check your credentials.'
- 'InvalidRequestError: Request payload validation error'
- 'MethodNotFoundError: Method not found'
- 'InvalidParamsError: Invalid parameters'
- 'InternalError: Internal error'
- 'TaskNotFoundError: Task not found'
- 'TaskNotCancelableError: Task not cancelable'
- 'PushNotificationNotSupportedError: Push notification not supported'
- 'UnsupportedOperationError: This operation is not supported'
- 'ContentTypeNotSupportedError: Incompatible content types'
- 'InvalidAgentResponseError: Invalid agent response'
- '503: Service Unavailable - Try again later.'
- '401: Unauthorized - Check your credentials.'
- 'ModelHTTPError: Error encountered during model request execution.'
- 'UserError: Non-DBOS model cannot be set at agent run time inside a DBOS workflow'
- 'ModelHTTPError: Error occurred with model request.'
- 'USAGE_LIMIT_EXCEEDED: Exceeded the defined usage limits.'
- 'REQUEST_LIMIT_EXCEEDED: The next request would exceed the request limit.'
- '401 Unauthorized: Check your OAuth2 credentials.'
- '404 Not Found: Ensure the requested model exists.'
- 'ValueError: Raised when a duplicate case name is added.'
- 'ValidationError: Raised when the file cannot be parsed as a valid dataset.'
- 'ModelRetry: Raised when a retry limit is exceeded.'
- An agent needs to have a unique `name` in order to be used with DBOS. The name will
  be used to identify the agent's workflows and steps.
- '401 Unauthorized: Validate API key.'
- '404 Not Found: Ensure the model name is correct.'
- '401 Unauthorized: Check API key and permissions'
- '404 Not Found: Ensure the requested resource exists'
- '400 Bad Request: Check request parameters and formatting'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Recheck OAuth tokens'
- No user found with name 'John Doe', remember to provide their full name
- '400 Bad Request: Check the parameters or content type.'
- '401 Unauthorized: Check your API key or authentication method.'
- 'MODEL_HTTP_ERROR: Check if the model is available or if there are issues with the
  API request.'
- 'RuntimeError: Stream failed to initialize within timeout'
- 'RuntimeError: Stream failed to initialize'
- '401 Unauthorized: Check your OAuth2 token and scopes.'
- '429 Too Many Requests: Reduce the frequency of requests.'
- '400 Bad Request: Check your request parameters.'
- '500 Internal Server Error: Contact support if the issue persists.'
- '400 Bad Request: Invalid input parameters'
- '429 Too Many Requests: Rate limit exceeded, slow down requests'
- '503 Service Unavailable: The model may be temporarily down, please retry later.'
- 'ModelRetry: The tool exceeded the maximum retries, check the input.'
- 'TypeError: Either `function` or `stream_function` must be provided'
- '429 Too Many Requests: Rate limit exceeded. Try again later.'
- 'UsageLimitExceeded: Limit exceeded on tokens, requests, or tool calls.'
- '500 Internal Server Error: Server encountered a problem.'
- 'ModelHTTPError: Handle HTTP errors when models fail.'
- '404 Not Found: Endpoint does not exist.'
- 'INVALID_REQUEST: Check the parameters sent in the request.'
- 'UNAUTHORIZED: Ensure the correct authentication credentials are used.'
- '403 Forbidden: Ensure you have the correct permissions.'
- '404 Not Found: Verify the model name or endpoint'
- 'UsageLimitExceeded: Exceeded the limit for requests or tokens.'
- Could not understand seat preference. Please try again.
- 'ModelHTTPError: Raised when HTTP error occurs.'
- 'NOT_IMPLEMENTED: Method not implemented.'
- '401 Unauthorized: Check your OAuth2 credentials and scopes.'
- '404 Not Found: Verify the endpoint URL and resource path.'
- 'ModelHTTPError: Exception raised during model execution'
- 'USER_ERROR: The user input is invalid.'
- 'PydanticSerializationError: Error in serializing data.'
- Please install the `logfire` package to use the Logfire plugin
- 'INVALID_MODEL_NAME: Check the model name provided.'
- 'AUTHENTICATION_FAILED: Ensure the client ID and secret are correct.'
- '404 Not Found: Ensure the model name is valid.'
- '401 Unauthorized: Check your API key or token.'
- '500 Internal Server Error: Try the request again later.'
- '400 Bad Request: Check request parameters and body.'
- '401 Unauthorized: Verify API key or token.'
- '401 Unauthorized: Check authentication credentials.'
- '429 Too Many Requests: Slow down your request rate'
- '401 Unauthorized: Check your token and authentication method'
- 'UsageLimitExceeded: Exceeded the output_tokens_limit of {limit}.'
- 'USER_ERROR: Check agent configuration.'
- 'PydanticSerializationError: Ensure all objects are serializable.'
- '404 Not Found: Verify the requested model name'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Verify your authentication credentials'
- '404 Not Found: The requested model does not exist'
- '401 Unauthorized: Check OAuth token validity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'INVALID_MODEL_NAME: Check if the model name is available'
- 'AUTHENTICATION_FAILED: Verify your credentials'
- 'INVALID_REQUEST: Ensure all required parameters are included'
- '401 Unauthorized: Check your OAuth token and scopes.'
- '404 Not Found: Verify the model name.'
- '429 Too Many Requests: Rate limit exceeded, try again later.'
- 'UnexpectedModelBehavior: An error occurred: Tool ''calc_volume'' exceeded max retries
  count of 1'
- 'ModelHTTPError: Handle exceptions when running the agent.'
- 'UsageLimitExceeded: Exceeded the input_tokens_limit of {self.input_tokens_limit}'
- 'UsageLimitExceeded: Exceeded the total_tokens_limit of {self.total_tokens_limit}'
- '403 Forbidden: Check if your API key has the right permissions.'
- 'Invalid JSON payload: Check your JSON structure.'
- 'Request payload validation error: Ensure all required fields are present.'
- 'Method not found: Verify the method name you''re calling.'
- 'GraphSetupError: Error caused by an incorrectly configured graph.'
- 'GraphBuildingError: An error raised during graph-building.'
- 'GraphRuntimeError: Error caused by an issue during graph execution.'
- 'UNPROCESSABLE_ENTITY: Check the input data structure.'
- 'RunError: General error during the agent run.'
- '404 Not Found: Verify the task ID.'
- '401 Unauthorized: Verify API key is valid.'
- '429 Too Many Requests: Throttle API calls.'
- '401 Unauthorized: Check client credentials.'
- '400 Bad Request: Validate the request parameters.'
- '401 Unauthorized: Invalid API key.'
- '401 Unauthorized: Recheck API key or token.'
- 'USER_ERROR: Check agent configuration or parameters'
- '400 Bad Request: Verify request parameters.'
- '404 Not Found: Resource does not exist.'
- 'Invalid input: Ensure the input matches the expected format.'
- 'Execution timeout: Increase the timeout duration.'
- '404 Not Found: Model not found on Hugging Face'
- 'APIStatusError: Handle API errors properly.'
- '401 Unauthorized: Verify authentication credentials.'
- 'ValidationError: If the value cannot be deserialized.'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Ensure your authentication credentials are valid'
- '429 Too Many Requests: Respect the Retry-After header'
- 'TimeoutException: Retry on timeout'
- 'ConnectError: Retry on connection error'
- 'ReadError: Retry on read error'
- '401 Unauthorized: Set the GOOGLE_API_KEY environment variable or pass it via GoogleProvider(api_key=...)'
- '401 Unauthorized: Recheck OAuth credentials or token expiration'
- '429 Too Many Requests: Throttle API calls to avoid hitting rate limits'
- 'INVALID_INPUT: Check the input data format.'
- 'AUTHENTICATION_FAILED: Verify authentication credentials.'
- 'UNPROCESSABLE_ENTITY: Check the input data format.'
- '401 Unauthorized: Check if your access token is valid.'
- '429 Too Many Requests: You have exceeded your request limit.'
- 'AttributeError: partially initialized module ''pandas'' has no attribute ''_pandas_parser_CAPI'''
- 'ModelHTTPError: Indicates a failure in all models within the fallback.'
- '400 Bad Request: Check the request body for errors.'
- '401 Unauthorized: Verify the API key and permissions.'
- 'INVALID_REQUEST: Check the request parameters and try again.'
- 'UNAUTHORIZED: Ensure your API key is valid.'
- '401 Unauthorized: Ensure the provided credentials are valid.'
- '404 Not Found: Check if the requested model exists.'
- 'GraphRuntimeError: If required is True and no traceparent exists'
- 'MODEL_HTTP_ERROR: Handle fallback exceptions in a group.'
- 'StopAsyncIteration: Indicates the end of the async iteration.'
- 'QUERY_TIMEOUT: Adjust query parameters for better performance'
- '401 Unauthorized: Verify access token'
- '404 Not Found: Ensure the model name is correct'
- 'GRAPH_STRUCTURE_INVALID: Validate graph structure'
- 'NODE_ID_CONFLICT: Ensure unique node IDs'
- 'UsageLimitExceeded: Exceeded the specified usage limits.'
- 'StopAsyncIteration: Indicates that the async iteration has completed.'
- '401 Unauthorized: Invalid authentication credentials'
- 'TypeError: `next` must be called with a `BaseNode` instance'
- 'LookupError: Start node is not in the graph.'
- 'TypeError: Invalid node return type'
- 'INVALID_PROMPT: Ensure the user prompt is not empty.'
- 'TIMEOUT: Increase the timeout setting for long-running processes.'
- 'USER_ERROR: Validate user input and ensure proper format'
- 'PydanticSerializationError: Ensure all objects passed are serializable'
- 'INVALID_MODEL: Check the model name'
- '401 Unauthorized: Recheck API keys or credentials.'
- '401 Unauthorized: Check client credentials and token expiration.'
- '401 Unauthorized: Recheck API key or token expiration.'
- '429 Too Many Requests: Throttle API calls or reduce frequency.'
- 'UsageLimitExceeded: Exceeded the input_tokens_limit.'
- 'UsageLimitExceeded: Exceeded the total_tokens_limit.'
- 'ModelHTTPError: Indicates failure in model request.'
- '404 Not Found: Ensure endpoint is correct.'
- '401 Unauthorized: Verify OAuth token.'
- '401 Unauthorized: Verify authentication details.'
- '401 Unauthorized: Check your client ID and secret.'
- '400 Bad Request: Check the model name or parameters'
- '401 Unauthorized: Ensure valid OAuth token'
- '404 Not Found: Verify the endpoint path'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Verify the API key.'
- '401 Unauthorized: Check your OAuth token.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - GraphRunContext
  - AgentNode
  - FinalResult
  - MCPServerTool
  - Slack app
  - Logfire Write Token
  - OpenAI API Key
  - OAuth2SecurityScheme
  - ApiKeySecurityScheme
  - GroqModelName
  - Provider
  - ModelProfileSpec
  - ModelSettings
  - Provider[AsyncClientV2]
  - OAuthToken
  - DBOSModel
  - AgentDepsT
  - Agent
  - RunContext
  - ToolDefinition
  - GoogleModel
  - GoogleProvider
  - AgentRun
  - EventStreamHandler
  - ActivityConfig
  - TemporalRunContext
  - ClientAndKey
  - ApiKey
  - UserSession
  - AsyncAnthropicClient
  - Client
  - AgentInfo
  - FunctionModel
  - GoogleModelName
  - AsyncInferenceClient
  - Provider[AsyncGroq]
  - AsyncGroq
  - OAuth2Client
  - ModelProvider
  - OpenAIModelName
  - StateDeps
  - BaseModel
  - Credentials
  - Provider[Mistral]
  - OAuth2
  - BearerToken
  - Mistral
  - OAuth2Token
  - google-gla
  - google-vertex
  - DDGS
  - Tavily
  - AsyncClient
  - CohereModelName
  - AsyncClientV2
  - DBOSMCPServer
  - VertexAILocation
  - AsyncOpenAI
  - MistralClient
  - MistralApi
  - EvaluatorContext
  - Evaluators
  - EvaluatorOutput
  - GuardrailConfigurationTypeDef
  - PerformanceConfigurationTypeDef
  - PromptVariableValuesTypeDef
  - StateT
  - DepsT
  - InputT
  - OutputT
  - ModelResponse
  - ModelHTTPError
  - groq
  - gateway
client:
  base_url: http://localhost:8000
  headers:
    Accept: application/json
source_metadata: null
