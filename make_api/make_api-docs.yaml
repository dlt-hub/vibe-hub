resources:
- name: resource_name
  endpoint:
    path: /api/v1/resource
    method: GET
    data_selector: data
    params: {}
- name: Integrations
  endpoint:
    path: /portal/api/bridge/integrations
    method: GET
- name: scenario
  endpoint:
    path: /scenarios
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: scenario_blueprint_versions
  endpoint:
    path: /scenarios/{scenarioId}/blueprints
    method: GET
    data_selector: blueprints
    params:
      teamId: optional
- name: scenario_interface
  endpoint:
    path: /scenarios/{scenarioId}/interface
    method: GET
    data_selector: input
    params:
      teamId: optional
- name: scenarios
  endpoint:
    path: /portal/api/bridge/scenarios
    method: GET
    data_selector: scenarios
- name: scenario_by_id
  endpoint:
    path: /portal/api/bridge/scenarios/{scenarioId}
    method: GET
    data_selector: id
- name: scenario_usage
  endpoint:
    path: /portal/api/bridge/scenarios/{scenarioId}/usage
    method: GET
    data_selector: date
- name: scenario_logs
  endpoint:
    path: /portal/api/bridge/scenarios/{scenarioId}/logs
    method: GET
    data_selector: ANY_ADDITIONAL_PROPERTY
- name: scenario_execution_log
  endpoint:
    path: /portal/api/bridge/scenarios/{scenarioId}/logs/{executionId}
    method: GET
    data_selector: ANY_ADDITIONAL_PROPERTY
- name: scenario_blueprint
  endpoint:
    path: /portal/api/bridge/scenarios/{scenarioId}/blueprint
    method: GET
    data_selector: blueprint
- name: activate_scenario
  endpoint:
    path: /portal/api/bridge/scenarios/{scenarioId}/activate
    method: POST
- name: deactivate_scenario
  endpoint:
    path: /portal/api/bridge/scenarios/{scenarioId}/deactivate
    method: POST
- name: run_scenario
  endpoint:
    path: /portal/api/bridge/scenarios/{scenarioId}/run
    method: POST
- name: List Integrations
  endpoint:
    path: /integrations
    method: GET
    data_selector: integrations
    params: {}
- name: Initialize Integration
  endpoint:
    path: /integrations/init/{publicVersionId}
    method: POST
    data_selector: ''
    params: {}
- name: Check Integration Initiation
  endpoint:
    path: /integrations/check-init/{flowId}
    method: GET
    data_selector: flow
    params: {}
- name: Activate Integration
  endpoint:
    path: /integrations/{scenarioId}/activate
    method: POST
    data_selector: integration
    params: {}
- name: Deactivate Integration
  endpoint:
    path: /integrations/{scenarioId}/deactivate
    method: POST
    data_selector: integration
    params: {}
- name: Delete Integration
  endpoint:
    path: /integrations/{scenarioId}
    method: DELETE
    data_selector: ''
    params: {}
- name: Run Integration
  endpoint:
    path: /integrations/{scenarioId}/run
    method: POST
    data_selector: ''
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
    params: {}
- name: create_customer
  endpoint:
    path: /customers
    method: POST
    data_selector: customer
    params: {}
- name: delete_customer
  endpoint:
    path: /customers
    method: DELETE
    data_selector: deleted
    params: {}
- name: update_customer
  endpoint:
    path: /customers
    method: PATCH
    data_selector: customer
    params: {}
- name: templates
  endpoint:
    path: /portal/api/bridge/templates
    method: GET
    data_selector: templates
- name: template
  endpoint:
    path: /templates
    method: GET
- name: template
  endpoint:
    path: /portal/api/bridge/templates
    method: POST
    data_selector: response
    params: {}
- name: template_versions
  endpoint:
    path: /templates/{templateId}/versions
    method: GET
    data_selector: metadata
    params: {}
- name: set_instanceable
  endpoint:
    path: /templates/set-instanceable
    method: POST
    data_selector: templateId
    params: {}
- name: template_blueprint
  endpoint:
    path: /templates/{templateId}/blueprint
    method: GET
    data_selector: name
    params: {}
- name: template_blueprint
  endpoint:
    path: /portal/api/bridge/templates/{templateId}/blueprint
    method: PATCH
    data_selector: template
    params: {}
- name: template
  endpoint:
    path: /portal/api/bridge/templates/{templateId}
    method: PUT
- name: template
  endpoint:
    path: /template
    method: GET
    data_selector: template
    params: {}
- name: delete_template
  endpoint:
    path: /portal/api/bridge/templates/{templateId}
    method: DELETE
    data_selector: deleted
    params:
      templateId: integer
- name: scenarios
  endpoint:
    path: /scenarios
    method: GET
    data_selector: records
- name: data_stores
  endpoint:
    path: /api/v2/data-stores
    method: GET
    params:
      teamId: '{teamId}'
      pg[sortDir]: asc
- name: data_stores
  endpoint:
    path: /data-stores
    method: POST
    data_selector: dataStore
- name: data_stores
  endpoint:
    path: /data-stores
    method: GET
    params:
      incremental: teamId
- name: organizations
  endpoint:
    path: /organizations/{organizationId}
    method: GET
    data_selector: null
    params:
      cols[]:
      - id
      - name
      - teams
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: affiliate
  endpoint:
    path: /api/documentation/affiliate
    method: GET
    data_selector: records
    params: {}
- name: agents
  endpoint:
    path: /api/documentation/agents
    method: GET
    data_selector: records
    params: {}
- name: commissions
  endpoint:
    path: /affiliate/commissions
    method: GET
    data_selector: commissions
    params: {}
- name: commission_info
  endpoint:
    path: /affiliate/commission-info
    method: GET
    data_selector: ''
    params: {}
- name: payout_request
  endpoint:
    path: /affiliate/payout-request
    method: POST
    data_selector: ''
    params: {}
- name: partner_register
  endpoint:
    path: /affiliate/partner-register
    method: POST
    data_selector: ok
    params: {}
- name: commission_stats
  endpoint:
    path: /affiliate/stats
    method: GET
    data_selector: stats
    params: {}
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
    params:
      organizationId: integer
- name: agent_details
  endpoint:
    path: /agents/{agentId}
    method: GET
    data_selector: agent
    params:
      organizationId: integer
- name: agent
  endpoint:
    path: /agents/{agentId}
    method: POST
    data_selector: agent
    params: {}
- name: delete_agent
  endpoint:
    path: /agents/{agentId}
    method: DELETE
    data_selector: agent
    params: {}
- name: update_agent
  endpoint:
    path: /agents/{agentId}
    method: PATCH
    data_selector: agent
    params: {}
- name: run_agent
  endpoint:
    path: /ai-agents/v1/agents/{agentId}/run/stream
    method: POST
    data_selector: data
    params: {}
- name: agents
  endpoint:
    path: /ai-agents/v1/agents
    method: GET
    data_selector: response
- name: create_agent
  endpoint:
    path: /ai-agents/v1/agents
    method: POST
    data_selector: response
- name: get_agent_by_id
  endpoint:
    path: /ai-agents/v1/agents/{agentId}
    method: GET
    data_selector: response
- name: delete_agent_by_id
  endpoint:
    path: /ai-agents/v1/agents/{agentId}
    method: DELETE
    data_selector: response
- name: modify_agent_by_id
  endpoint:
    path: /ai-agents/v1/agents/{agentId}
    method: PATCH
    data_selector: response
- name: run_agent
  endpoint:
    path: /ai-agents/v1/agents/{agentId}/run
    method: POST
    data_selector: response
- name: context
  endpoint:
    path: /ai-agents/v1/contexts/{contextId}
    method: DELETE
    data_selector: No content
    params:
      contextId: string · uuid
      teamId: number
- name: context
  endpoint:
    path: /ai-agents/v1/contexts
    method: GET
    data_selector: List of context retrieved successfully
    params:
      agentId: string · uuid
      teamId: number
- name: create_context
  endpoint:
    path: /ai-agents/v1/contexts
    method: POST
    data_selector: Context created successfully
    params:
      teamId: number
      agentId: string · uuid
      file: any | nullable
- name: llm_providers_models
  endpoint:
    path: /ai-agents/v1/llm-providers/{providerId}/models
    method: GET
    data_selector: object[]
    params:
      providerId: number
      teamId: number
- name: llm_providers
  endpoint:
    path: /ai-agents/v1/llm-providers
    method: GET
    data_selector: '[]'
    params:
      teamId: number
- name: llm_provider_details
  endpoint:
    path: /ai-agents/v1/llm-providers/{providerId}
    method: GET
    data_selector: '[]'
    params:
      teamId: number
- name: organization_analytics
  endpoint:
    path: /analytics/{organizationId}
    method: GET
    data_selector: analytics
    params:
      organizationId: integer
- name: organization_audit_logs
  endpoint:
    path: /audit-logs/organization/{organizationId}
    method: GET
- name: team_audit_logs
  endpoint:
    path: /audit-logs/team/{teamId}
    method: GET
- name: audit_log_detail
  endpoint:
    path: /audit-logs/{uuid}
    method: GET
- name: organization_audit_logs
  endpoint:
    path: /audit-logs/organization/{organizationId}
    method: GET
    data_selector: auditLogs
    params: {}
- name: organization_audit_log_filters
  endpoint:
    path: /audit-logs/organization/{organizationId}/filters
    method: GET
    data_selector: filters
    params: {}
- name: audit_log_detail
  endpoint:
    path: /audit-logs/{uuid}
    method: GET
    data_selector: details
    params: {}
- name: products
  endpoint:
    path: /cashier/products
    method: GET
    data_selector: products
- name: price_detail
  endpoint:
    path: /cashier/prices/{priceId}
    method: GET
- name: connections
  endpoint:
    path: /connections
    method: GET
- name: connections
  endpoint:
    path: /connections
    method: GET
    data_selector: connections
    params:
      teamId: integer
- name: create_connection
  endpoint:
    path: /connections
    method: POST
    data_selector: connection
    params:
      teamId: integer
      accountName: string
      accountType: string
      scopes: string[]
- name: get_connection_details
  endpoint:
    path: /connections/{connectionId}
    method: GET
    data_selector: connection
    params:
      connectionId: integer
- name: delete_connection
  endpoint:
    path: /connections/{connectionId}
    method: DELETE
    data_selector: connection
    params:
      connectionId: integer
      confirmed: boolean
- name: update_connection
  endpoint:
    path: /connections/{connectionId}/set-data
    method: POST
    data_selector: ''
    params:
      connectionId: integer
- name: verify_connection
  endpoint:
    path: /connections/{connectionId}/test
    method: POST
    data_selector: ''
    params:
      connectionId: integer
- name: custom_property_structures
  endpoint:
    path: /custom-property-structures
    method: POST
    data_selector: customPropertyStructure
    params: {}
- name: custom_property_structures
  endpoint:
    path: /custom-property-structures
    method: GET
    data_selector: customPropertyStructures
    params:
      organizationId: integerRequired
- name: custom_property_structure_items
  endpoint:
    path: /custom-property-structures/{customPropertyStructureId}/custom-property-structure-items
    method: GET
- name: create_custom_property_structure_item
  endpoint:
    path: /custom-property-structures/{customPropertyStructureId}/custom-property-structure-items
    method: POST
- name: delete_custom_property_structure_item
  endpoint:
    path: /custom-property-structures/{customPropertyStructureId}/custom-property-structure-items/{customPropertyStructureItemId}
    method: DELETE
- name: update_custom_property_structure_item
  endpoint:
    path: /custom-property-structures/{customPropertyStructureId}/custom-property-structure-items/{customPropertyStructureItemId}
    method: PATCH
- name: custom_property_structure_items
  endpoint:
    path: /custom-property-structures/{customPropertyStructureId}/custom-property-structure-items
    method: GET
    data_selector: customPropertyStructureItems
    params: {}
- name: create_custom_property_structure_item
  endpoint:
    path: /custom-property-structures/{customPropertyStructureId}/custom-property-structure-items
    method: POST
    data_selector: customPropertyStructureItem
    params: {}
- name: delete_custom_property_structure_item
  endpoint:
    path: /custom-property-structures/custom-property-structure-items/{customPropertyStructureItemId}
    method: DELETE
    data_selector: customPropertyStructureItem
    params:
      confirmed: 'true'
- name: update_custom_property_structure_item
  endpoint:
    path: /custom-property-structures/custom-property-structure-items/{customPropertyStructureItemId}
    method: PATCH
    data_selector: customPropertyStructureItem
    params: {}
- name: data_stores
  endpoint:
    path: /data-stores
    method: GET
    data_selector: dataStores
    params:
      teamId: integer
- name: data_store
  endpoint:
    path: /data-stores
    method: POST
    data_selector: dataStore
    params: {}
- name: data_store_details
  endpoint:
    path: /data-stores/{dataStoreId}
    method: GET
    data_selector: dataStore
    params: {}
- name: update_data_store
  endpoint:
    path: /data-stores/{dataStoreId}
    method: PATCH
    data_selector: dataStore
    params: {}
- name: delete_data_stores
  endpoint:
    path: /data-stores
    method: DELETE
    data_selector: dataStores
    params: {}
- name: data_store_records
  endpoint:
    path: /data-stores/{dataStoreId}/data
    method: GET
    data_selector: records
    params:
      pg[offset]: 0
- name: create_data_store_record
  endpoint:
    path: /data-stores/{dataStoreId}/data
    method: POST
    data_selector: response
    params: {}
- name: delete_data_store_records
  endpoint:
    path: /data-stores/{dataStoreId}/data
    method: DELETE
    data_selector: response
    params: {}
- name: update_data_store_record
  endpoint:
    path: /data-stores/{dataStoreId}/data/{dataStoreKeyRecord}
    method: PUT
    data_selector: response
    params: {}
- name: patch_data_store_record
  endpoint:
    path: /data-stores/{dataStoreId}/data/{dataStoreKeyRecord}
    method: PATCH
    data_selector: response
    params: {}
- name: data_structures
  endpoint:
    path: /data-structures
    method: GET
    data_selector: dataStructures
    params:
      teamId: integerRequired
- name: data_structure
  endpoint:
    path: /data-structures
    method: POST
    data_selector: dataStructure
    params: {}
- name: get_data_structure
  endpoint:
    path: /data-structures/{dataStructureId}
    method: GET
    data_selector: dataStructure
    params: {}
- name: delete_data_structure
  endpoint:
    path: /data-structures/{dataStructureId}
    method: DELETE
    data_selector: dataStructure
    params: {}
- name: update_data_structure
  endpoint:
    path: /data-structures/{dataStructureId}
    method: PATCH
    data_selector: dataStructure
    params: {}
- name: clone_data_structure
  endpoint:
    path: /data-structures/{dataStructureId}/clone
    method: POST
    data_selector: dataStructure
    params: {}
- name: devices
  endpoint:
    path: /devices
    method: GET
    data_selector: devices
    params:
      teamId: integer
      assigned: boolean
      viewForScenarioId: integer
      scope[]: string
      cols[]: string
- name: device_detail
  endpoint:
    path: /devices/{deviceId}
    method: GET
    data_selector: device
    params:
      deviceId: integer
      inspector: integer
      cols[]: string
- name: delete_device
  endpoint:
    path: /devices/{deviceId}
    method: DELETE
    data_selector: device
    params:
      confirmed: 'true'
- name: partial_update_device
  endpoint:
    path: /devices/{deviceId}
    method: PATCH
    data_selector: device
    params: {}
- name: create_device_request
  endpoint:
    path: /devices/request
    method: POST
    data_selector: createDeviceRequest
    params: {}
- name: incomings
  endpoint:
    path: /devices/{deviceId}/incomings
    method: GET
    data_selector: incomings
    params:
      pg[limit]: '10000'
      pg[sortBy]: created
      pg[sortDir]: asc
      pg[offset]: '0'
- name: incomings
  endpoint:
    path: /devices/{deviceId}/incomings
    method: DELETE
    data_selector: incomings
    params: {}
- name: incoming_detail
  endpoint:
    path: /devices/{deviceId}/incomings/{incomingId}
    method: GET
    data_selector: id
    params: {}
- name: incoming_stats
  endpoint:
    path: /devices/{deviceId}/incomings/stats
    method: GET
    data_selector: incomingStat
    params: {}
- name: outgoings_delete
  endpoint:
    path: /devices/{deviceId}/outgoings
    method: DELETE
    data_selector: response
    params: {}
- name: outgoings_detail
  endpoint:
    path: /devices/{deviceId}/outgoings/{outgoingId}
    method: GET
    data_selector: response
    params: {}
- name: outgoings
  endpoint:
    path: /devices/{deviceId}/outgoings
    method: GET
    data_selector: outgoings
    params:
      pg[limit]: 10000
      pg[sortBy]: created
      pg[sortDir]: asc
      pg[offset]: 0
- name: incomplete_executions
  endpoint:
    path: /api/documentation/api-reference/incomplete-executions
    method: GET
- name: incomplete_executions
  endpoint:
    path: /dlqs
    method: GET
    data_selector: dlqs
    params:
      scenarioId: integer
- name: delete_incomplete_executions
  endpoint:
    path: /dlqs
    method: DELETE
    data_selector: dlqs
    params:
      scenarioId: integer
      confirmed: boolean
      ids: string[]
      exceptIds: string[]
      all: boolean
- name: incomplete_execution_detail
  endpoint:
    path: /dlqs/{dlqId}
    method: GET
    data_selector: dlq
    params:
      dlqId: string
- name: update_incomplete_execution
  endpoint:
    path: /dlqs/{dlqId}
    method: PATCH
    data_selector: dlq
    params:
      dlqId: string
      blueprint: string
      failer: integer
- name: failed_scenario_blueprint
  endpoint:
    path: /dlqs/{dlqId}/blueprint
    method: GET
    data_selector: response.blueprint
    params: {}
- name: incomplete_execution_bundles
  endpoint:
    path: /dlqs/{dlqId}/bundle
    method: GET
    data_selector: response
    params: {}
- name: incomplete_execution_logs
  endpoint:
    path: /dlqs/{dlqId}/logs
    method: GET
    data_selector: dlqLogs
    params: {}
- name: incomplete_execution_log_detail
  endpoint:
    path: /dlqs/{dlqId}/logs/{executionDlqId}
    method: GET
    data_selector: dlqLog
    params: {}
- name: retry_incomplete_execution
  endpoint:
    path: /dlqs/{dlqId}/retry
    method: POST
    data_selector: dlq
    params: {}
- name: retry_multiple_incomplete_executions
  endpoint:
    path: /dlqs/retry
    method: POST
    data_selector: dlqs
    params: {}
- name: timezones
  endpoint:
    path: /enums/timezones
    method: GET
    data_selector: timezoneId
    params: {}
- name: module_types
  endpoint:
    path: /enums/module-types
    method: GET
    data_selector: moduleTypes
    params: {}
- name: countries
  endpoint:
    path: /enums/countries
    method: GET
    data_selector: countries
- name: locales
  endpoint:
    path: /enums/locales
    method: GET
    data_selector: locales
- name: languages
  endpoint:
    path: /enums/languages
    method: GET
    data_selector: languages
- name: user_features
  endpoint:
    path: /enums/user-features
    method: GET
    data_selector: userFeatures
- name: organization_features
  endpoint:
    path: /enums/organization-features
    method: GET
    data_selector: organizationFeatures
- name: user_email_notifications
  endpoint:
    path: /enums/user-email-notifications
    method: GET
    data_selector: userEmailNotifications
- name: module_types
  endpoint:
    path: /enums/module_types
    method: GET
    data_selector: moduleTypes
- name: timezones
  endpoint:
    path: /enums/timezones
    method: GET
    data_selector: timezones
- name: countries
  endpoint:
    path: /enums/countries
    method: GET
    data_selector: countries
- name: locales
  endpoint:
    path: /enums/locales
    method: GET
    data_selector: locales
- name: languages
  endpoint:
    path: /enums/languages
    method: GET
    data_selector: languages
- name: user_features
  endpoint:
    path: /enums/user_features
    method: GET
    data_selector: userFeatures
- name: organization_features
  endpoint:
    path: /enums/organization_features
    method: GET
    data_selector: organizationFeatures
- name: email_notification_settings
  endpoint:
    path: /enums/email_notification_settings
    method: GET
    data_selector: emailNotificationSettings
- name: api_token_scopes
  endpoint:
    path: /enums/api_token_scopes
    method: GET
    data_selector: apiTokenScopes
- name: make_regions
  endpoint:
    path: /enums/make_regions
    method: GET
    data_selector: makeRegions
- name: make_zones
  endpoint:
    path: /enums/make_zones
    method: GET
    data_selector: makeZones
- name: apps_review_status
  endpoint:
    path: /enums/apps_review_status
    method: GET
    data_selector: appsReviewStatus
- name: variable_types
  endpoint:
    path: /enums/variable_types
    method: GET
    data_selector: variableTypes
- name: llm_models
  endpoint:
    path: /enums/llm_models
    method: GET
    data_selector: llmModels
- name: llm_builtin_tiers
  endpoint:
    path: /enums/llm_builtin_tiers
    method: GET
    data_selector: llmBuiltinTiers
- name: user_api_token_scopes
  endpoint:
    path: /enums/user-api-token-scopes
    method: GET
    data_selector: userApiTokenScopes
- name: imt_regions
  endpoint:
    path: /enums/imt-regions
    method: GET
    data_selector: imtRegions
- name: imt_zones
  endpoint:
    path: /enums/imt-zones
    method: GET
    data_selector: imtZones
- name: apps_review_statuses
  endpoint:
    path: /enums/apps-review-statuses
    method: GET
    data_selector: reviewStatuses
- name: variable_types
  endpoint:
    path: /enums/variable-types
    method: GET
    data_selector: variableTypes
- name: llm_models
  endpoint:
    path: /enums/llm-models
    method: GET
    data_selector: llmModels
- name: llm_builtin_tiers
  endpoint:
    path: /enums/llm-builtin-tiers
    method: GET
    data_selector: llmBuiltinTiers
- name: custom_functions
  endpoint:
    path: /api/documentation/custom-functions
    method: GET
- name: custom_functions
  endpoint:
    path: /functions
    method: GET
    data_selector: functions
- name: create_custom_function
  endpoint:
    path: /functions
    method: POST
    data_selector: function
- name: check_custom_function_code
  endpoint:
    path: /functions/eval
    method: POST
- name: custom_function_detail
  endpoint:
    path: /functions/{functionId}
    method: GET
- name: delete_custom_function
  endpoint:
    path: /functions/{functionId}
    method: DELETE
- name: update_custom_function
  endpoint:
    path: /functions/{functionId}
    method: PATCH
- name: custom_function_updates_history
  endpoint:
    path: /functions/{functionId}/history
    method: GET
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: text/plain
- name: hooks
  endpoint:
    path: /hooks
    method: GET
- name: hooks
  endpoint:
    path: /hooks
    method: GET
    data_selector: hooks
    params:
      teamId: string
- name: create_hook
  endpoint:
    path: /hooks
    method: POST
    data_selector: hook
- name: get_hook_details
  endpoint:
    path: /hooks/{hookId}
    method: GET
    data_selector: hook
- name: delete_hook
  endpoint:
    path: /hooks/{hookId}
    method: DELETE
- name: update_hook
  endpoint:
    path: /hooks/{hookId}
    method: PATCH
- name: ping_hook
  endpoint:
    path: /hooks/{hookId}/ping
    method: GET
- name: learn_start
  endpoint:
    path: /hooks/{hookId}/learn-start
    method: POST
- name: learn_stop
  endpoint:
    path: /hooks/{hookId}/learn-stop
    method: POST
- name: enable_hook
  endpoint:
    path: /hooks/{hookId}/enable
    method: POST
- name: disable_hook
  endpoint:
    path: /hooks/{hookId}/disable
    method: POST
- name: set_hook_details
  endpoint:
    path: /hooks/{hookId}/set-data
    method: POST
- name: webhook_queue
  endpoint:
    path: /hooks/{hookId}/incomings
    method: GET
    data_selector: incomings
    params:
      pg[sortBy]: created
      pg[limit]: 10000
      pg[sortDir]: asc
      pg[offset]: 0
- name: delete_incomings
  endpoint:
    path: /hooks/{hookId}/incomings
    method: DELETE
    data_selector: response
    params:
      confirmed: 'true'
      ids: []
      exceptIds: []
      all: false
- name: get_incoming_detail
  endpoint:
    path: /hooks/{hookId}/incomings/{incomingId}
    method: GET
    data_selector: incoming
    params: {}
- name: get_incoming_stats
  endpoint:
    path: /hooks/{hookId}/incomings/stats
    method: GET
    data_selector: incomingStat
    params: {}
- name: webhook_logs
  endpoint:
    path: /hooks/logs
    method: GET
- name: webhook_execution_detail
  endpoint:
    path: /hooks/{hookId}/logs/{logId}
    method: GET
- name: webhook_logs
  endpoint:
    path: /hooks/{hookId}/logs
    method: GET
    data_selector: hookLogs
    params: {}
- name: webhook_execution_detail
  endpoint:
    path: /hooks/{hookId}/logs/{logId}
    method: GET
    data_selector: hookLog
    params: {}
- name: keys
  endpoint:
    path: /keys
    method: GET
    data_selector: keys
    params:
      teamId: integer
- name: keys
  endpoint:
    path: /keys
    method: POST
    data_selector: key
    params: {}
- name: key_types
  endpoint:
    path: /keys/types
    method: GET
    data_selector: keysTypes
    params: {}
- name: get_key_details
  endpoint:
    path: /keys/{keyId}
    method: GET
    data_selector: key
    params: {}
- name: delete_key
  endpoint:
    path: /keys/{keyId}
    method: DELETE
    data_selector: key
    params:
      confirmed: 'true'
- name: update_key
  endpoint:
    path: /keys/{keyId}
    method: PATCH
    data_selector: key
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
- name: delete_notifications
  endpoint:
    path: /notifications
    method: DELETE
- name: notification_detail
  endpoint:
    path: /notifications/{notificationId}
    method: GET
- name: mark_notifications_as_read
  endpoint:
    path: /notifications/read
    method: POST
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
    params:
      unreadOnly: 'false'
      imtZoneId: '2'
      pg[sortBy]: id
      pg[sortDir]: desc
      pg[offset]: 0
- name: delete_notifications
  endpoint:
    path: /notifications
    method: DELETE
    data_selector: notifications
    params:
      imtZoneId: '2'
      ids: []
- name: get_notification_detail
  endpoint:
    path: /notifications/{notificationId}
    method: GET
    data_selector: notification
    params:
      imtZoneId: '2'
- name: mark_all_notifications_as_read
  endpoint:
    path: /notifications/mark-as-read
    method: POST
    data_selector: notifications
    params:
      ids: all
      imtZoneId: '2'
- name: organizations
  endpoint:
    path: /organizations
    method: GET
- name: user_organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
    params:
      pg[limit]: 10000
- name: create_organization
  endpoint:
    path: /organizations
    method: POST
    data_selector: organization
    params: {}
- name: accept_invitation
  endpoint:
    path: /organizations/accept-invitation
    method: POST
    data_selector: user
    params: {}
- name: get_organization_details
  endpoint:
    path: /organizations/{organizationId}
    method: GET
    data_selector: organization
    params:
      wait: true
- name: organization_variables
  endpoint:
    path: /organizations/{organizationId}/variables
    method: GET
    data_selector: organizationVariables
    params: {}
- name: create_organization_variable
  endpoint:
    path: /organizations/{organizationId}/variables
    method: POST
    data_selector: organizationVariable
    params: {}
- name: delete_organization_variable
  endpoint:
    path: /organizations/{organizationId}/variables/{variableName}
    method: DELETE
    data_selector: null
    params: {}
- name: update_organization_variable
  endpoint:
    path: /organizations/{organizationId}/variables/{variableName}
    method: PATCH
    data_selector: organizationVariable
    params: {}
- name: get_organization_usage
  endpoint:
    path: /organizations/{organizationId}/usage
    method: GET
    data_selector: data
    params: {}
- name: delete_organization
  endpoint:
    path: /api/v2/organizations/{organizationId}
    method: DELETE
    data_selector: organizationId
    params: {}
- name: update_organization
  endpoint:
    path: /api/v2/organizations/{organizationId}
    method: PATCH
    data_selector: organization
    params: {}
- name: get_custom_apps
  endpoint:
    path: /api/v2/organizations/{organizationId}/apps
    method: GET
    data_selector: installedApps
    params: {}
- name: get_payments
  endpoint:
    path: /api/v2/organizations/{organizationId}/payments
    method: GET
    data_selector: payments
    params: {}
- name: create_single_payment
  endpoint:
    path: /api/v2/organizations/{organizationId}/single-payment-create
    method: POST
    data_selector: ok
    params: {}
- name: get_subscription
  endpoint:
    path: /api/v2/organizations/{organizationId}/subscription
    method: GET
    data_selector: product
    params: {}
- name: create_subscription
  endpoint:
    path: /api/v2/organizations/{organizationId}/subscription
    method: POST
    data_selector: sessionId
    params: {}
- name: cancel_subscription
  endpoint:
    path: /api/v2/organizations/{organizationId}/subscription
    method: DELETE
    data_selector: ok
    params: {}
- name: change_subscription
  endpoint:
    path: /api/v2/organizations/{organizationId}/subscription
    method: PATCH
    data_selector: ok
    params: {}
- name: set_free_plan
  endpoint:
    path: /api/v2/organizations/{organizationId}/subscription-free
    method: POST
    data_selector: customerId
    params: {}
- name: apply_coupon
  endpoint:
    path: /api/v2/organizations/{organizationId}/subscription/coupon-apply
    method: POST
    data_selector: ok
    params: {}
- name: invite_user
  endpoint:
    path: /api/v2/organizations/{organizationId}/invite
    method: POST
    data_selector: user
    params: {}
- name: user_organization_roles
  endpoint:
    path: /organizations/{organizationId}/user-organization-roles
    method: GET
    data_selector: userOrganizationRoles
    params:
      cols: userId,organizationId,usersRoleId,invitation
- name: user_organization_roles
  endpoint:
    path: /organizations/{organizationId}/user-organization-roles/{userId}
    method: GET
    data_selector: userOrganizationRole
    params: {}
- name: transfer_organization_ownership
  endpoint:
    path: /organizations/{organizationId}/user-organization-roles/transfer
    method: POST
    data_selector: userOrganizationRoles
    params: {}
- name: remote_procedures
  endpoint:
    path: /rpcs/{appName}/{appVersion}/{rpcName}
    method: POST
    data_selector: data
    params: {}
- name: process_action
  endpoint:
    path: /rpcs/{appName}/{appVersion}/{rpcName}
    method: OPTIONS
    data_selector: config
    params:
      appName: string
      appVersion: string
      rpcName: string
- name: scenarios
  endpoint:
    path: /scenarios
    method: GET
- name: update_buildtime_variables
  endpoint:
    path: /scenarios/{scenarioId}/build-variables
    method: PUT
    data_selector: input
    params: {}
- name: delete_buildtime_variable
  endpoint:
    path: /scenarios/{scenarioId}/build-variables
    method: DELETE
    data_selector: ''
    params: {}
- name: scenarios
  endpoint:
    path: /scenarios
    method: GET
    data_selector: scenarios
    params: {}
- name: create_scenario
  endpoint:
    path: /scenarios
    method: POST
    data_selector: scenario
    params: {}
- name: get_scenario_details
  endpoint:
    path: /scenarios/{scenarioId}
    method: GET
    data_selector: scenario
    params: {}
- name: delete_scenario
  endpoint:
    path: /scenarios/{scenarioId}
    method: DELETE
    data_selector: scenario
    params: {}
- name: update_scenario
  endpoint:
    path: /scenarios/{scenarioId}
    method: PATCH
    data_selector: scenario
    params: {}
- name: get_trigger_details
  endpoint:
    path: /scenarios/{scenarioId}/triggers
    method: GET
    data_selector: ''
    params: {}
- name: clone_scenario
  endpoint:
    path: /scenarios/{scenarioId}/clone
    method: POST
    data_selector: response
    params: {}
- name: check_module_data
  endpoint:
    path: /scenarios/{scenarioId}/data/{moduleId}
    method: GET
    data_selector: exists
    params: {}
- name: activate_scenario
  endpoint:
    path: /scenarios/{scenarioId}/start
    method: POST
    data_selector: scenario.isActive
    params: {}
- name: deactivate_scenario
  endpoint:
    path: /scenarios/{scenarioId}/stop
    method: POST
    data_selector: scenario.isActive
    params: {}
- name: run_scenario
  endpoint:
    path: /scenarios/{scenarioId}/run
    method: POST
    data_selector: executionId
    params: {}
- name: get_scenario_interface
  endpoint:
    path: /scenarios/{scenarioId}/interface
    method: GET
    data_selector: interface
    params: {}
- name: update_scenario_interface
  endpoint:
    path: /scenarios/{scenarioId}/interface
    method: PATCH
    data_selector: interface
    params: {}
- name: get_scenario_usage
  endpoint:
    path: /scenarios/{scenarioId}/usage
    method: GET
    data_selector: data
    params: {}
- name: list_buildtime_variables
  endpoint:
    path: /scenarios/{scenarioId}/build-variables
    method: GET
    data_selector: variables.input
    params: {}
- name: add_buildtime_variables
  endpoint:
    path: /scenarios/{scenarioId}/build-variables
    method: POST
    data_selector: ok
    params: {}
- name: scenario_logs
  endpoint:
    path: /scenarios/{scenarioId}/logs
    method: GET
    data_selector: scenarioLogs
    params: {}
- name: execution_log
  endpoint:
    path: /scenarios/{scenarioId}/logs/{executionId}
    method: GET
    data_selector: scenarioLogs
    params: {}
- name: execution_details
  endpoint:
    path: /scenarios/{scenarioId}/executions/{executionId}
    method: GET
    data_selector: status
    params: {}
- name: module_operations
  endpoint:
    path: /scenarios/{scenarioId}/modules/operations
    method: GET
    data_selector: operations
    params: {}
- name: module_logs
  endpoint:
    path: /scenarios/{scenarioId}/modules/{moduleId}/logs
    method: GET
    data_selector: moduleLogs
    params: {}
- name: blueprint_versions
  endpoint:
    path: /scenarios/{scenarioId}/blueprints
    method: GET
    data_selector: scenariosBlueprints
    params:
      scenarioId: integer
- name: scenario_blueprint
  endpoint:
    path: /scenarios/{scenarioId}/blueprint
    method: GET
    data_selector: response.blueprint
    params:
      blueprintId: optional
      draft: optional
- name: scenarios_consumptions
  endpoint:
    path: /scenarios/consumptions
    method: GET
    data_selector: data
- name: scenarios_consumptions
  endpoint:
    path: /scenarios/consumptions
    method: GET
    data_selector: scenarioConsumptions
    params:
      teamId: integer
      organizationId: integer
- name: tools
  endpoint:
    path: /scenarios/tools
    method: GET
- name: tools
  endpoint:
    path: /scenarios/tools/{scenarioId}
    method: PATCH
    data_selector: scenario
    params:
      scenarioId: integer
- name: custom_properties
  endpoint:
    path: /scenarios/{scenarioId}/custom-properties
    method: GET
    data_selector: customProperties
    params:
      scenarioId: integer
- name: fill_custom_properties
  endpoint:
    path: /scenarios/{scenarioId}/custom-properties
    method: POST
    data_selector: customProperties
    params: {}
- name: set_custom_properties
  endpoint:
    path: /scenarios/{scenarioId}/custom-properties
    method: PUT
    data_selector: customProperties
    params: {}
- name: delete_custom_properties
  endpoint:
    path: /scenarios/{scenarioId}/custom-properties
    method: DELETE
    data_selector: null
    params:
      confirmed: 'true'
- name: update_custom_properties
  endpoint:
    path: /scenarios/{scenarioId}/custom-properties
    method: PATCH
    data_selector: customProperties
    params: {}
- name: scenario_folder_delete
  endpoint:
    path: /scenarios-folders/{folderId}
    method: DELETE
    data_selector: scenarioFolder
- name: scenario_folder_update
  endpoint:
    path: /scenarios-folders/{folderId}
    method: PATCH
    data_selector: scenarioFolder
- name: scenarios_folders
  endpoint:
    path: /scenarios-folders
    method: GET
    data_selector: scenariosFolders
    params:
      teamId: integer
- name: create_scenario_folder
  endpoint:
    path: /scenarios-folders
    method: POST
    data_selector: scenarioFolder
    params:
      name: string
      teamId: integer
- name: apps
  endpoint:
    path: /sdk/apps
    method: GET
- name: app_review_form
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/review/form
    method: GET
- name: submit_app_review_form
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/review/form
    method: PUT
- name: app_events_log
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/events-log
    method: GET
- name: app_common
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/common
    method: GET
- name: set_app_common_data
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/common
    method: PUT
- name: app_docs
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/readme
    method: GET
- name: Get App Section
  endpoint:
    path: /{SDK_appName}/{SDK_appVersion}/{SDK_appSection}
    method: GET
- name: Create app
  endpoint:
    path: /
    method: POST
- name: Get App
  endpoint:
    path: /{SDK_appName}/{SDK_appVersion}
    method: GET
- name: Delete App
  endpoint:
    path: /{SDK_appName}/{SDK_appVersion}
    method: DELETE
- name: Patch App
  endpoint:
    path: /{SDK_appName}/{SDK_appVersion}
    method: PATCH
- name: Clone App
  endpoint:
    path: /{SDK_appName}/{SDK_appVersion}/clone
    method: POST
- name: Get App Review
  endpoint:
    path: /{SDK_appName}/{SDK_appVersion}/review
    method: GET
- name: Request Review
  endpoint:
    path: /{SDK_appName}/{SDK_appVersion}/review
    method: POST
- name: app_review_form
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/review/form
    method: PUT
    data_selector: form
    params: {}
- name: app_events_log
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/events-log
    method: GET
    data_selector: events
    params: {}
- name: app_common
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/common
    method: GET
    data_selector: clientId
    params: {}
- name: app_docs
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/readme
    method: GET
    data_selector: string
    params: {}
- name: list_apps
  endpoint:
    path: /sdk/apps
    method: GET
    data_selector: apps
    params: {}
- name: create_app
  endpoint:
    path: /sdk/apps
    method: POST
    data_selector: app
    params: {}
- name: get_app
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}
    method: GET
    data_selector: app
    params: {}
- name: delete_app
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}
    method: DELETE
    data_selector: app
    params: {}
- name: patch_app
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}
    method: PATCH
    data_selector: app
    params: {}
- name: clone_app
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/clone
    method: POST
    data_selector: app
    params: {}
- name: get_app_review
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/review
    method: GET
    data_selector: review
    params: {}
- name: request_review
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/review
    method: POST
    data_selector: requested
    params: {}
- name: set_app_readme
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/readme
    method: PUT
    data_selector: changed
- name: get_app_section
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/{SDK_appSection}
    method: GET
    data_selector: baseUrl
- name: set_app_section
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/{SDK_appSection}
    method: PUT
- name: set_app_visibility
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/{SDK_appVisibility}
    method: POST
- name: set_app_opensource
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/opensource
    method: POST
- name: set_app_closedsource
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/closedsource
    method: POST
- name: get_change
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/changes/{SDK_changeId}
    method: GET
- name: commit_changes
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/commit
    method: POST
- name: rollback_changes
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/rollback
    method: POST
- name: get_app_logo
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/icon/{SDK_appIconSize}
    method: GET
- name: set_app_logo
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/icon
    method: PUT
- name: uninstall_app
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/uninstall
    method: POST
- name: Get App Invite
  endpoint:
    path: /sdk-apps/invites/sdk_appinvitetoken
    method: GET
- name: Accept App Invite
  endpoint:
    path: /sdk-apps/invites/sdk_appinvitetoken
    method: POST
- name: get_app_invite
  endpoint:
    path: /sdk/apps/invites/{SDK_appInviteToken}
    method: GET
    data_selector: appInvite
    params: {}
- name: accept_app_invite
  endpoint:
    path: /sdk/apps/invites/{SDK_appInviteToken}
    method: POST
    data_selector: appInvite
    params:
      organizationId: integer
- name: modules
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/modules
    method: GET
    data_selector: appModules
    params: {}
- name: create_module
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/modules
    method: POST
    data_selector: appModule
    params: {}
- name: get_module
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}
    method: GET
    data_selector: appModule
    params: {}
- name: delete_module
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}
    method: DELETE
    data_selector: appModule
    params: {}
- name: patch_module
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}
    method: PATCH
    data_selector: appModule
    params: {}
- name: get_module_section
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}/{SDK_moduleSection}
    method: GET
    data_selector: response
    params: {}
- name: set_module_section
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}/{SDK_moduleSection}
    method: PUT
    data_selector: response
    params: {}
- name: set_module_visibility
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}/{SDK_moduleVisibility}
    method: POST
    data_selector: response
    params: {}
- name: clone_module
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}/clone
    method: POST
    data_selector: module
    params: {}
- name: set_module_deprecation
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}/{SDK_moduleDeprecation}
    method: POST
    data_selector: response
    params: {}
- name: recreate_module
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}/{SDK_moduleConsumable}
    method: PUT
    data_selector: name
    params: {}
- name: App RPCs
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs
    method: GET
    data_selector: rpcs
    params:
      all: 'true'
      opensource: 'true'
      imt-admin: '1'
- name: create_rpc
  endpoint:
    path: /api/v2/sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs
    method: POST
    data_selector: appRpc
    params: {}
- name: get_rpc
  endpoint:
    path: /api/v2/sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs/{SDK_rpcName}
    method: GET
    data_selector: appRpc
    params: {}
- name: test_rpc
  endpoint:
    path: /api/v2/sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs/{SDK_rpcName}
    method: POST
    data_selector: appRpc
    params: {}
- name: delete_rpc
  endpoint:
    path: /api/v2/sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs/{SDK_rpcName}
    method: DELETE
    data_selector: appRpc
    params: {}
- name: patch_rpc
  endpoint:
    path: /api/v2/sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs/{SDK_rpcName}
    method: PATCH
    data_selector: appRpc
    params: {}
- name: get_rpc_section
  endpoint:
    path: /api/v2/sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs/{SDK_rpcName}/{SDK_rpcSection}
    method: GET
    data_selector: response
    params: {}
- name: set_rpc_section
  endpoint:
    path: /api/v2/sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs/{SDK_rpcName}/{SDK_rpcSection}
    method: PUT
    data_selector: change
    params: {}
- name: functions
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/functions
    method: GET
    data_selector: functions
    params: {}
- name: functions
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/functions
    method: POST
    data_selector: appFunction
    params: {}
- name: function_details
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/functions/{SDK_functionName}
    method: GET
    data_selector: appFunction
    params: {}
- name: function_code
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/functions/{SDK_functionName}/code
    method: GET
    data_selector: string
    params: {}
- name: set_function_code
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/functions/{SDK_functionName}/code
    method: PUT
    data_selector: change
    params: {}
- name: function_test
  endpoint:
    path: /sdk/apps/{SDK_appName}/{SDK_appVersion}/functions/{SDK_functionName}/test
    method: GET
    data_selector: No content
    params: {}
- name: connections
  endpoint:
    path: /sdk/apps/{SDK_appName}/connections
    method: GET
    data_selector: connections
    params: {}
- name: create_connection
  endpoint:
    path: /sdk/apps/{SDK_appName}/connections
    method: POST
    data_selector: appConnection
    params: {}
- name: get_connection
  endpoint:
    path: /sdk/apps/connections/{SDK_connectionName}
    method: GET
    data_selector: appConnection
    params: {}
- name: delete_connection
  endpoint:
    path: /sdk/apps/connections/{SDK_connectionName}
    method: DELETE
    data_selector: appConnection
    params: {}
- name: update_connection
  endpoint:
    path: /sdk/apps/connections/{SDK_connectionName}
    method: PATCH
    data_selector: appConnection
    params: {}
- name: get_connection_section
  endpoint:
    path: /sdk/apps/connections/{SDK_connectionName}/{SDK_connectionSection}
    method: GET
    data_selector: {}
    params: {}
- name: set_connection_section
  endpoint:
    path: /sdk/apps/connections/{SDK_connectionName}/{SDK_connectionSection}
    method: PUT
    data_selector: {}
    params: {}
- name: get_connection_common
  endpoint:
    path: /sdk/apps/connections/{SDK_connectionName}/common
    method: GET
    data_selector: {}
    params: {}
- name: set_connection_common
  endpoint:
    path: /sdk/apps/connections/{SDK_connectionName}/common
    method: PUT
    data_selector: {}
    params: {}
- name: recreate_connection
  endpoint:
    path: /sdk/apps/connections/{SDK_connectionName}/recreate
    method: POST
    data_selector: appConnection
    params: {}
- name: webhooks
  endpoint:
    path: /sdk/apps/{SDK_appName}/webhooks
    method: GET
    data_selector: webhooks
- name: webhook
  endpoint:
    path: /sdk/apps/{SDK_appName}/webhooks
    method: POST
    data_selector: appWebhook
    params: {}
- name: get_webhook
  endpoint:
    path: /sdk/apps/webhooks/{SDK_webhookName}
    method: GET
    data_selector: appWebhook
    params: {}
- name: delete_webhook
  endpoint:
    path: /sdk/apps/webhooks/{SDK_webhookName}
    method: DELETE
    data_selector: appWebhook
    params: {}
- name: update_webhook
  endpoint:
    path: /sdk/apps/webhooks/{SDK_webhookName}
    method: PATCH
    data_selector: appWebhook
    params: {}
- name: get_webhook_section
  endpoint:
    path: /sdk/apps/webhooks/{SDK_webhookName}/{SDK_webhookSection}
    method: GET
    data_selector: output
    params: {}
- name: set_webhook_section
  endpoint:
    path: /sdk/apps/webhooks/{SDK_webhookName}/{SDK_webhookSection}
    method: PUT
    data_selector: change
    params: {}
- name: sso_certificates
  endpoint:
    path: /organizations/{organizationId}/sso-certificates
    method: GET
    data_selector: response
    params:
      organizationId: integer
      type: string
- name: teams
  endpoint:
    path: /teams
    method: GET
- name: llm_configuration
  endpoint:
    path: /teams/{teamId}/llm-configuration
    method: PATCH
    data_selector: patch
    params: {}
- name: list_teams
  endpoint:
    path: /teams
    method: GET
    data_selector: teams
    params:
      organizationId: integer
- name: create_team
  endpoint:
    path: /teams
    method: POST
    data_selector: team
    params:
      name: string
      organizationId: integer
- name: get_team_details
  endpoint:
    path: /teams/{teamId}
    method: GET
    data_selector: team
    params:
      teamId: integer
- name: delete_team
  endpoint:
    path: /teams/{teamId}
    method: DELETE
    data_selector: team
    params:
      teamId: integer
- name: list_team_variables
  endpoint:
    path: /teams/{teamId}/variables
    method: GET
    data_selector: teamVariables
    params:
      teamId: integer
- name: create_team_variable
  endpoint:
    path: /teams/{teamId}/variables
    method: POST
    data_selector: teamVariable
    params:
      teamId: integer
      typeId: number
      value: one of
      name: string
- name: delete_team_variable
  endpoint:
    path: /teams/{teamId}/variables/{variableName}
    method: DELETE
    data_selector: ok
    params:
      teamId: integer
      variableName: string
- name: update_team_variable
  endpoint:
    path: /teams/{teamId}/variables/{variableName}
    method: PATCH
    data_selector: teamVariable
    params:
      teamId: integer
      variableName: string
      typeId: number
      value: one of
- name: get_team_usage
  endpoint:
    path: /teams/{teamId}/usage
    method: GET
    data_selector: data
    params:
      teamId: integer
- name: get_team_llm_configuration
  endpoint:
    path: /teams/{teamId}/llm-configuration
    method: GET
    data_selector: aiMappingAccountId
    params:
      teamId: integer
- name: user_team_role
  endpoint:
    path: /teams/{teamId}/user-team-roles/{userId}
    method: GET
    data_selector: userTeamRole
    params: {}
- name: user_team_roles
  endpoint:
    path: /teams/{teamId}/user-team-roles
    method: GET
    data_selector: userTeamRoles
    params:
      teamId: integer
- name: templates
  endpoint:
    path: /templates
    method: GET
- name: request_approval
  endpoint:
    path: /templates/{templateId}/request-approval
    method: POST
    params:
      templateId: integer
- name: templates
  endpoint:
    path: /templates
    method: GET
    data_selector: templates
    params: {}
- name: create_template
  endpoint:
    path: /templates
    method: POST
    data_selector: template
    params: {}
- name: get_template_details
  endpoint:
    path: /templates/{templateId}
    method: GET
    data_selector: template
    params: {}
- name: delete_template
  endpoint:
    path: /templates/{templateId}
    method: DELETE
    data_selector: template
    params: {}
- name: update_template
  endpoint:
    path: /templates/{templateId}
    method: PATCH
    data_selector: template
    params: {}
- name: get_template_blueprint
  endpoint:
    path: /templates/{templateId}/blueprint
    method: GET
    data_selector: blueprint
    params: {}
- name: publish_template
  endpoint:
    path: /templates/{templateId}/publish
    method: POST
    data_selector: template
    params: {}
- name: public_template
  endpoint:
    path: /templates/public/{templateUrl}
    method: GET
    data_selector: templatePublic
    params: {}
- name: public_template_blueprint
  endpoint:
    path: /templates/public/{templateUrl}/blueprint
    method: GET
    data_selector: blueprint
    params: {}
- name: public_templates
  endpoint:
    path: /templates/public
    method: GET
    data_selector: templatesPublic
    params:
      pg[limit]: 100
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: update_user
  endpoint:
    path: /users/{userId}
    method: PATCH
    data_selector: user
    params: {}
- name: update_user_email
  endpoint:
    path: /users/{userId}/attributes/email
    method: PUT
    data_selector: changed
    params: {}
- name: update_user_password
  endpoint:
    path: /users/{userId}/attributes/password
    method: PUT
    data_selector: changed
    params: {}
- name: send_password_reset_demand
  endpoint:
    path: /users/password-reset-demand
    method: POST
    data_selector: ok
    params: {}
- name: set_session_for_resetting_password
  endpoint:
    path: /users/password-reset
    method: GET
    data_selector: ok
    params: {}
- name: reset_lost_password
  endpoint:
    path: /users/password-reset
    method: POST
    data_selector: ok
    params: {}
- name: current_user
  endpoint:
    path: /users/me
    method: GET
    data_selector: authUser
    params:
      includeInvitedOrg: boolean
      cols: string[]
- name: current_authorization
  endpoint:
    path: /api/v2/users/me/current-authorization
    method: GET
    data_selector: authorization
    params: {}
- name: organization_invitations
  endpoint:
    path: /api/v2/users/me/organization-invitations
    method: GET
    data_selector: userOrganizationInvitations
    params: {}
- name: delete_api_token
  endpoint:
    path: /users/me/api-tokens/{timestamp}
    method: DELETE
- name: list_users_api_tokens
  endpoint:
    path: /users/me/api-tokens
    method: GET
    data_selector: apiTokens
    params: {}
- name: create_new_api_token
  endpoint:
    path: /users/me/api-tokens
    method: POST
    data_selector: apiToken
    params: {}
- name: update_user_role
  endpoint:
    path: /users/{userId}/user-team-roles/{teamId}
    method: POST
    data_selector: userTeamRole
    params: {}
- name: user_team_roles
  endpoint:
    path: /users/{userId}/user-team-roles
    method: GET
    data_selector: userTeamRoles
    params: {}
- name: user_team_role_detail
  endpoint:
    path: /users/{userId}/user-team-roles/{teamId}
    method: GET
    data_selector: userTeamRole
    params: {}
- name: user_team_notifications
  endpoint:
    path: /users/{userId}/user-team-notifications/{teamId}
    method: GET
    data_selector: userTeamNotifications
    params: {}
- name: user_team_notifications
  endpoint:
    path: /users/{userId}/user-team-notifications/{teamId}/{notificationId}
    method: GET
    data_selector: userTeamNotification
    params: {}
- name: update_user_team_notifications
  endpoint:
    path: /users/{userId}/user-team-notifications/{teamId}/{notificationId}
    method: PUT
    data_selector: userTeamNotification
    params:
      enabled: 'true'
- name: user_organization_roles
  endpoint:
    path: /users/{userId}/user-organization-roles
    method: GET
    data_selector: userOrganizationRoles
    params:
      cols:
      - userId
      - organizationId
      - usersRoleId
      - invitation
      - organizationTeamsCount
      - joinedTeamsCount
- name: user_organization_roles
  endpoint:
    path: /users/{userId}/user-organization-roles/{organizationId}
    method: GET
    data_selector: userOrganizationRole
    params: {}
- name: update_user_role
  endpoint:
    path: /users/{userId}/user-organization-roles/{organizationId}
    method: POST
    data_selector: userOrganizationRole
    params: {}
- name: transfer_organization_ownership
  endpoint:
    path: /users/{userId}/user-organization-roles/{organizationId}/transfer
    method: POST
    data_selector: userOrganizationRoles
    params: {}
- name: user_roles
  endpoint:
    path: /users/roles
    method: GET
    data_selector: roles
    params:
      userRoleId: userRoleId
- name: user_roles
  endpoint:
    path: /users/roles
    method: GET
    data_selector: usersRoles
- name: unread_notifications
  endpoint:
    path: /users/unread-notifications
    method: GET
    data_selector: userUnreadNotifications
- name: user_preferences
  endpoint:
    path: /mailhub/users/{userId}/preferences
    method: GET
    data_selector: preferences
    params: {}
- name: update_global_preferences
  endpoint:
    path: /mailhub/users/{userId}/preferences
    method: PATCH
    data_selector: preferences
    params: {}
- name: team_preferences
  endpoint:
    path: /mailhub/users/{userId}/organizations/{organizationId}/teams/{teamId}/preferences
    method: GET
    data_selector: team
    params: {}
- name: update_team_preferences
  endpoint:
    path: /mailhub/users/{userId}/organizations/{organizationId}/teams/{teamId}/preferences
    method: PATCH
    data_selector: team
    params: {}
- name: update_team_native_preferences
  endpoint:
    path: /mailhub/users/{userId}/organizations/{organizationId}/teams/{teamId}/native-preferences
    method: PATCH
    data_selector: team
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: some_resource
  endpoint:
    path: /some/endpoint
    method: GET
    data_selector: data
    params: {}
- name: helloworld
  endpoint:
    path: /helloworld
    method: GET
    data_selector: result
- name: custom_app_settings
  endpoint:
    path: /custom-apps-documentation/create-your-app
    method: GET
    data_selector: settings
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: hello_world
  endpoint:
    path: /helloworld
    method: GET
    data_selector: result
    params: {}
- name: module
  endpoint:
    path: /api/module
    method: GET
    data_selector: data
    params: {}
- name: books
  endpoint:
    path: /books
    method: GET
- name: example_resource
  endpoint:
    path: /v1/example
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /v1/campaigns/members
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: user_info
  endpoint:
    path: /2/users/get_current_account
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: body.data
- name: clients
  endpoint:
    path: /clients
    method: GET
    params:
      per_page: 100
- name: contacts_json_import
  endpoint:
    path: /v3/activities/contacts_json_import
    method: POST
- name: check_status
  endpoint:
    path: '{{temp._links.self.href}}'
    method: GET
    repeat:
      condition: '{{body.state != ''completed''}}'
      delay: 1000
      limit: 300
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
- name: mappable_parameters
  endpoint:
    path: /mappable-parameters
    method: GET
    data_selector: parameters
    params: {}
- name: parameters
  endpoint:
    data_selector: body
- name: contact
  endpoint:
    path: /contact/{{parameters.id}}
    method: PUT
    data_selector: body
- name: messages
  endpoint:
    path: /messages.json
    method: POST
    data_selector: body
- name: tasks
  endpoint:
    path: /tasks.json
    method: POST
    data_selector: body
- name: api_users
  endpoint:
    path: /api/users
    method: POST
    data_selector: body
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /campaigns/members
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /contacts
    method: GET
    data_selector: records
- name: custom_app
  endpoint:
    path: /api/v1/custom_app
    method: GET
    data_selector: data
    params: {}
- name: verification
  endpoint:
    path: /custom-apps-documentation/app-structure/webhooks#verification
    method: GET
    data_selector: verification
    params: {}
- name: books
  endpoint:
    path: /books
    method: GET
    data_selector: items
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: items
    params: {}
- name: email
  endpoint:
    path: /api/email
    method: POST
    data_selector: records
- name: name
  endpoint:
    path: /api/name
    method: GET
    data_selector: records
- name: newsletter
  endpoint:
    path: /api/newsletter
    method: PATCH
    data_selector: records
- name: size
  endpoint:
    path: /api/size
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Epoch RPC
  endpoint:
    path: /custom-apps-documentation/app-blocks/epoch#retrieving-data-for-the-epoch-panel
    method: GET
    data_selector: items
    params: {}
- name: epoch_panel
  endpoint:
    path: /epoch/rpc
    method: POST
    data_selector: response.output
    params:
      limit: 500
- name: samples
  endpoint:
    path: /api/samples
    method: GET
    data_selector: data
    params: {}
- name: example_resource
  endpoint:
    path: /v2/example
    method: GET
    data_selector: data
    params: {}
- name: example_resource
  endpoint:
    path: /api/v1/example
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: apps
  endpoint:
    path: /v1/apps
    method: GET
    data_selector: data
    params: {}
- name: templates
  endpoint:
    path: /api/templates
    method: GET
- name: scenarios
  endpoint:
    path: /api/scenarios
    method: GET
- name: organization_level
  endpoint:
    path: /sse?organizationId=<id>
    method: GET
- name: team_level
  endpoint:
    path: /sse?teamId=<id>
    method: GET
- name: scenario_level
  endpoint:
    path: /sse?scenarioId=<id>
    method: GET
- name: responses
  endpoint:
    path: /v1/responses
    method: POST
    data_selector: data
- name: mcpServers
  endpoint:
    path: /mcp-server/make-local-mcp-server-legacy
    method: POST
    data_selector: make
    params: {}
- name: mcpServers
  endpoint:
    path: /mcp-server
    method: POST
    data_selector: mcpServers
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Zone Assets
  endpoint:
    path: /assets
    method: GET
    data_selector: assets
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /campaign_member
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /contact
    method: GET
    data_selector: records
- name: audit_logs
  endpoint:
    path: /audit/logs
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /v1/campaigns/members
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /v1/contacts
    method: GET
    data_selector: records
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
    params: {}
- name: companies
  endpoint:
    path: /api/v1/companies
    method: GET
    data_selector: data
    params: {}
- name: tasks
  endpoint:
    path: /api/v1/tasks
    method: POST
    data_selector: data
    params: {}
- name: projects
  endpoint:
    path: /api/v1/projects
    method: POST
    data_selector: data
    params: {}
- name: scenario_usage
  endpoint:
    path: /api/scenario/usage
    method: GET
    data_selector: usage_records
- name: team_usage
  endpoint:
    path: /api/team/usage
    method: GET
    data_selector: usage_records
- name: organization_usage
  endpoint:
    path: /api/organization/usage
    method: GET
    data_selector: usage_records
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: accman
  endpoint:
    path: /services/data/vXX.X/sobjects/Accman
    method: GET
    data_selector: records
- name: apps-processor
  endpoint:
    path: /services/data/vXX.X/sobjects/AppsProcessor
    method: GET
    data_selector: records
- name: aws-rds-log-reader
  endpoint:
    path: /services/data/vXX.X/sobjects/AwsRdsLogReader
    method: GET
    data_selector: records
- name: native_apps
  endpoint:
    path: /white-label-documentation/install-and-configure-apps/native-apps
    method: GET
- name: custom_apps
  endpoint:
    path: /white-label-documentation/install-and-configure-apps/custom-apps
    method: GET
- name: preinstalled_tools
  endpoint:
    path: /tools
    method: GET
    data_selector: tools
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: recent_scenario_executions
  endpoint:
    path: /audit-activity/access-recent-executions
    method: GET
- name: recently_created_scenarios
  endpoint:
    path: /audit-activity/view-recently-created-scenarios
    method: GET
- name: user_recent_sessions
  endpoint:
    path: /audit-activity/log-out-a-users-current-session
    method: GET
- name: organization_operations
  endpoint:
    path: /audit-activity/organizations-operations-data-transfer-and-storage-usage
    method: GET
- name: recent_executions
  endpoint:
    path: /audit-activity/access-recent-executions
    method: GET
    data_selector: executions
- name: scenarios
  endpoint:
    path: /v1/scenarios
    method: GET
    data_selector: data
    params: {}
- name: provision_new_users
  endpoint:
    path: /api/v1/users
    method: POST
    data_selector: data
    params: {}
- name: maintain_users
  endpoint:
    path: /api/v1/users/maintain
    method: PATCH
    data_selector: data
    params: {}
- name: deprovision_users
  endpoint:
    path: /api/v1/users/deprovision
    method: DELETE
    data_selector: data
    params: {}
- name: provision_new_users
  endpoint:
    path: /white-label-documentation/manage-the-end-user-life-cycle/provision-new-users
    method: POST
- name: organizations
  endpoint:
    path: /manage/organizations
    method: GET
- name: teams
  endpoint:
    path: /manage/teams
    method: GET
- name: organizations
  endpoint:
    path: /admin/organizations
    method: POST
- name: remove_user
  endpoint:
    path: /administration/users/remove
    method: POST
    data_selector: results
    params: {}
- name: organizations
  endpoint:
    path: /api/organizations
    method: GET
    data_selector: data
- name: invite_user
  endpoint:
    path: /administration/organizations/invite_user
    method: POST
    data_selector: invitation_details
- name: default_organizations_permissions
  endpoint:
    path: /api/default-organizations-permissions
    method: GET
    data_selector: permissions
    params: {}
- name: team_permissions
  endpoint:
    path: /permissions/team
    method: GET
    data_selector: permissions
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: TrackJS
  endpoint:
    path: /trackjs/token
    method: POST
- name: Candu
  endpoint:
    path: /candu/token
    method: POST
- name: Userflow
  endpoint:
    path: /userflow/token
    method: POST
- name: Google Analytics
  endpoint:
    path: /google/analytics/token
    method: POST
- name: Google Verification
  endpoint:
    path: /google/verification/code
    method: POST
- name: user
  endpoint:
    path: /api/v1/users
    method: POST
    data_selector: user_data
- name: organization
  endpoint:
    path: /api/v1/organizations
    method: POST
    data_selector: organization_data
- name: team
  endpoint:
    path: /api/v1/teams
    method: POST
    data_selector: team_data
notes:
- Requires setup of OAuth2 authentication.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Make MCP server allows external AI systems to discover your scenarios and perform
  tasks using those scenarios.
- Model Context Protocol (MCP) is a communication standard between AI systems and
  external systems.
- Generate a secret that is used to create JWT tokens for authentication.
- Currently, data stores and data structures are not supported.
- You need to verify if the integration flow is complete before enabling the automation.
- Some objects like Contact may return nulls in deeply nested fields
- When a Bridge scenario triggers a webhook, include a user ID directly to identify
  the user.
- Add an HTTP > Make a request module to call your webhook.
- Recommended to be set to true, so users can complete the flow with a new component.
- Creates a new template.
- Patches a template's blueprint.
- Template updated successfully. Template data returned.
- version 1 of the template
- Make API uses standard HTTP methods to interact with endpoints.
- Always include a request body in POST, PUT, or PATCH requests.
- 'If you exceed your rate limit, you get error 429 with the message: Requests limit
  for organization exceeded, please try again later.'
- Requires setup of connected app in Make API
- The Make API requires authentication of the API requests with your API tokens or
  your OAuth 2.0 connection.
- Since editing the token is not possible, you can always delete the old token and
  replace it with a new one.
- The majority of responses containing a collection of resources are paginated.
- Default value for pg[offset] is 0.
- Default ordering direction is ascending.
- Some endpoints have specific filtering parameters.
- Use HTTPS at the beginning of the URL in your request.
- Ensure that you use the correct authentication token generated for this specific
  environment.
- The ID of the agent must be provided as a path parameter.
- These endpoints are available in open beta to all users. As beta endpoints, both
  functionality and availability may change.
- Endpoints are available in open beta to all users. Functionality and availability
  may change.
- Response body containing a list of models for a specific LLM provider.
- You can get the audit log entries only for organizations in which you have the 'Admin'
  or 'Owner' roles.
- You need to create a connection for most apps.
- Strict validation can be enforced for data structures
- The default number varies with different API endpoints.
- '"ids" and "all" can no be used together'
- '"ids" or "all" has to be set'
- '"exceptIds" is possible to use only with "all"'
- 'Required scope: devices:read'
- If a scenario terminates unexpectedly because of an error, then the scenario run
  is discarded.
- Custom functions are functions you or your team members create that you can use
  in a scenario.
- Check availability of the custom functions feature with the API call GET /organizations/{organizationId}
  for the organization to which the team belongs.
- Newly created hooks are enabled by default.
- The `confirmed` parameter is required to delete hooks assigned to scenarios.
- Webhooks process data in the same order as they arrive.
- Make stores webhook logs for 3 days. The webhook logs for organizations with the
  Enterprise plan are stored for 30 days.
- Some webhooks don't return the data object due to their implementation.
- Returned organizations are sorted by the organization name in ascending order by
  default.
- Buildtime variables should be prefixed either with a TAC_ (for team defined variables)
  or with a PAC_ (for personal user defined variables).
- Authorization requires an API key.
- For each request either teamId or organizationId must be defined.
- Scenario consumption is the information about the number of operations and data
  transfer used by a scenario.
- Set the `organizationId` or `teamId` parameters to limit the results to a specific
  organization or team.
- Any property that is not provided will be left unchanged.
- The name must be at most 100 characters long and does not need to be unique.
- Retrieves a list of all apps available to the user.
- Authorization requires API key in the header.
- Teams are containers that contain scenarios and data accessible only by the members
  of the team.
- Public templates can only be deleted by administrators.
- The following main user endpoints allow you to get a list of existing users and
  manage their basic details such as password change.
- Requires token for authorization
- API tokens are specific to the currently authenticated user.
- All modules can be tested directly in scenarios.
- Changes to communication configs are immediately active.
- You can see raw requests/responses in your browser's console.
- Changes in parameters and interface requires you to reload scenario editor page.
- Requires setup of connected app in Make
- Some responses may contain null values
- The communication with the VS Code extension and your Make account is authorized
  with an API key.
- The URL should start with / to use the baseUrl.
- Use OAuth2 with refresh token — requires setup of connected app in Make
- Some API endpoints may have rate limits
- Always sanitize personal information, like tokens, keys and authentication secrets
  so they are not visible to other people.
- The best way to deal with errors is to use an error handler.
- When all errors are handled, Make keeps scheduling scenario runs instead of disabling
  the scenario.
- You can easily debug your app using Make DevTool or Chrome DevTool's console.
- If API supports pagination, it should be implemented.
- It is recommended to set the page size to a low number, if possible.
- Possible pagination issues include incorrect stop conditions and next page conditions.
- By default RPC is created without any parameters.
- Debugging of Custom IML Functions
- Enabling console logging requires clicking the computer icon.
- Ensure the client ID and secret are correctly configured.
- Check API limits to avoid throttling.
- Uses OAuth2 with refresh token — requires setup of connected app in Make
- Every module should have a label that precisely describes the module's use.
- It is recommended to use the metadata parameter to store the account's name or email.
- Make sets a limit of 512 characters for the metadata.
- The service upon an action request returns a result, which can then be processed
  in the following modules in a scenario.
- The service doesn't return anything at all, or doesn't return useful output, e.
  g. a processed file.
- Supports predefined and custom queries for searching records.
- Custom queries can include new operators not available in the module.
- Requires setup of connected app in api
- If the API doesn't support a partial update approach, it is needed to add the support
  on the app's side.
- Users will not have to handle full updates by themselves or experience data loss.
- Some API services require date parameters that define the interval of records to
  be retrieved, e.g. from and to.
- Triggers don't allow mapping/functions, the user has to hardcode the From and To
  dates.
- The 'limit' parameter should be a static number which should be at max 300 or 3
  * number of objects per page.
- 'When adding an RPC to a Get, Update, or Delete module, it is required to add ''mode'':
  ''edit'' to the code.'
- A Create module should not have the mode set to 'edit', unless it contains a very
  large number of RPCs in its input.
- The Static Parameters tab is deprecated and should be left empty.
- 'Mappable parameters should follow a specific priority order: required, optional,
  advanced.'
- Advanced parameters should never be required.
- The best approach is to return the API response as it is.
- Make will automatically learn additional parameters from actual incoming data and
  propose them for mapping.
- If the app has over 10 modules, the modules should be put into special groups.
- The modules inside these groups should follow a specific order.
- API uses OAuth2 with refresh token.
- Logo must be a .png file with square dimensions between 512x512 px and 2048x2048
  px and a maximum size of 512 kB.
- A private app can only be used by the author of the app until the app is installed
  in an organization to which the author and other users have access.
- Make has the app review process.
- Your custom app uses a web service that is not already available in Make.
- Your custom app and its modules have to connect to a web service API. Avoid duplicating
  the same functionality as iterators, aggregators or other tools in Make.
- Avoid using APIs that have strong dependencies on other APIs, or APIs that function
  as redirects to other APIs.
- Avoid using APIs that don't have their own domain, or have their domain associated
  with service platforms like Heroku or AWS.
- Your custom app has to use only credentials that the service requires to create
  a connection. Don't request any additional credentials from the user.
- Some objects may return nulls in deeply nested fields
- The latest v2 version is currently in beta.
- All changes take immediate effect in running scenarios.
- Every change made to the app is visible only to you unless we commit it.
- Ensure not to have Javascript syntax warnings or errors in custom IML functions.
- Changes made to the app are locked once approved by Make.
- To make changes available, request approval of the changes.
- The timeout should only be extended if the API performs legitimately resource-intensive
  operations, such as video/image processing, file conversion, or complex AI computations,
  etc.
- Everything specified in the base is inherited by all modules and RPCs.
- Once the app becomes Approved, the Common Data gets locked and it cannot be changed
  anymore due to security reasons.
- Reserved words are variables used internally by Make platform. Using reserved words
  for the parameter `name` key can lead to unexpected results.
- Make sure nobody else knows the client secret, otherwise your app can get vulnerable
- If the webhook returns multiple items in one batch, you might need to use the iterate
  directive to specify which items to output.
- The API supports both REST and GraphQL endpoints.
- RPCs have specific output rules, so take a look at RPC Types before the implementation.
- Custom IML functions are not available by default. Contact us via our helpdesk if
  you need to create a custom IML function.
- Only JavaScript built-in objects + Buffer are available for you to use. You can
  use all features of ES 6, like arrow functions, destructuring, etc.
- Static parameters aren't used so much, because they can't be mapped from other modules.
- Mappable parameters can be filled in by the user or mapped from previous modules.
- Recommended limit of 300 paginated records.
- Requires OAuth2 authentication setup.
- Different modules require different scopes. That helps you to control the permissions
  of every single account.
- Integromat Data Types are derived from normal JSON data types, with some limitations
  and additions.
- Ensure that the correct OAuth scopes are set up in the API.
- Rate limits may apply based on the API usage.
- IML is a mustache-like markup language with support for evaluating complex expressions
  in javascript-like syntax.
- The processing of 'empty' values is completely managed by Make.
- Some APIs may have a JSON string inside a JSON object.
- If the API requires a parameter in JSON string format, Make has to send it in the
  required format.
- Starting from Fall 2025, Make will block HTTPS connections by default if the certificate
  is untrusted or invalid.
- Always prefer using a certificate issued by a globally trusted CA.
- The only secure solution for invalid or expired certificates is to replace the certificate
  on the server.
- This guide is relevant only for special cases where it is reasonably expected that
  the application may need to communicate with third-party servers using HTTPS connections
  that rely on either a self-signed certificate or a custom certificate authority
  (CA) instead of a widely trusted public CA.
- If your Custom App only interacts with services that use publicly trusted certificates,
  you can safely ignore this guide.
- The app is hosted by Make, in your organization as a published app with a generated
  invite link.
- All apps submitted to the Apps Marketplace need to be invite-only apps.
- The apps accepted to the Apps Marketplace for Partners need to be public but not
  approved.
- Ensure to handle rate limiting as per API guidelines
- Some endpoints may return paginated results
- Requires an active Make Partnership Agreement for app submissions
- API limits may apply depending on the plan
- To be documented.
- Users do not need to have Make accounts or understand complex integration concepts.
- Replace <MAKE_ZONE> and <MCP_TOKEN> with your actual values.
- To control which tools are visible to your AI, follow the Tool Access Controls guide.
- MCP token is a unique URL that allows external AI systems to access your tools in
  Make.
- MAKE_ZONE - The zone your organization is hosted in (e.g., eu2.make.com).
- MCP_TOKEN - You can generate your MCP token in your Make profile.
- Make API key with scenarios:read and scenarios:run scopes required
- You can generate an API key in your Make profile.
- The zone your organization is hosted in (e.g., eu2.make.com).
- You must have administrative access to see this button and access the Administration
  interface.
- Deploying Roleman is a mandatory prerequisite for an upcoming release
- Setting up Roleman now ensures a smooth transition later
- The Zone Assets Server is already running in your environment but isn't active yet.
- X (formerly Twitter) app integration discontinued due to API policy requirements
  and pricing.
- You can now connect third-party apps or clients with Make using the OAuth 2.0 protocol.
- The custom IML function for developing custom apps has been re-enabled.
- 2FA is required for account deletion
- Users now need to type the name of the organization or team to confirm the deletion.
- Improvements made to the scenario property creation process.
- Scenario editor updated for better usability.
- New API endpoints created to monitor operation usage.
- SSO settings updated with a new Audience URI field.
- Requires setup of OAuth 2.0 for authentication
- When rerunning an incomplete execution caused by an error in a route in a router,
  only the route where the error occurred would be executed while resolving the incomplete
  executions.
- Previously, custom functions couldn't handle parameters with binary data types,
  such as email attachments or pictures.
- Recently, when searching for modules in the scenario editor, the Instant tag was
  missing from instant triggers.
- Improved app search designed to help discover apps and build scenarios faster
- Users can filter users by their role at both organization and team levels
- Using templates to create scenarios is now much easier and more flexible.
- Custom scenario properties let your users add customized metadata to organize their
  scenarios.
- Dynamic connections allow users to use their connections as scenario inputs.
- Some objects like Accman may return nulls in deeply nested fields
- Managing apps requires an instance-level role such as `SA` or `Admin`.
- The longest possible timeout period is 5 minutes or 300,000 milliseconds.
- Make uses shared webhooks rarely, only in case there is no other implementation
  option.
- Preinstalled tools are necessary for scenario execution on your instance.
- Access to custom apps and their visibility to users varies according to the development
  stage.
- OAuth 2.0 setup is required for integration.
- Microsoft requires a verification process.
- Meta requires a verification process for users' scenarios to work with Meta apps.
- Requires setup of connected app in Asana
- Follow steps 6 and 7 of the page Steps in Asana.
- Requires setup of connected app in ClickUp
- Defines the maximum number of emails retrieved in the 'Choose where to start - Select
  the first email' action.
- 'Default: 120'
- 'Maximum: 121'
- Defines the connection timeout in milliseconds.
- 'Default: 30000'
- Google flags your app as unverified until you complete their process.
- Supports Default email and password login page
- Supports Single sign-on (SSO)
- Supports Two-factor authentication
- End-users must complete the process by going to their profiles and using Google
  Authenticator or a similar app.
- Owner or admin role in an Enterprise organization required
- Service provider certificate and private key that you create are prerequisites
- The recent executions page serves as an execution log for your entire instance.
- The administrative scenarios page lists all scenarios on your instance starting
  with the most recently created scenario.
- Make's organizations provide a structure that lets you grant only the access that
  you want to share with each end customer.
- Only one user can be the owner of an organization.
- Enable special options designed for app developers on your instance.
- End-users can invite new users to their organization to share their scenarios and
  other resources.
- Using organizations isolates end customers and restricts access to only the scenarios,
  templates, etc. that end-customer creates.
- New organizations inherit the license parameters of your White Label instance.
- An organization can have only one owner.
- Deleting an organization is permanent and deletes related assets such as data stores
  and data structures.
- Adding a new user via an email invitation is best practice because you do not need
  to manually send user credentials via email.
- The invitation email features the branding you define at Administration > System
  settings.
- All users are members of at least one organization and one team.
- The name and appearance settings do not impact the administration interface. You
  need to click Leave administration to confirm the changes. Recent changes may take
  several minutes to appear in your UI.
- Enable to allow users to configure two-factor authentication.
- Disable to turn off two-factor authentication. Recommended if you configure SSO
  for your instance.
- Users added via JWT receive the Admin role for the organization or team they are
  added to.
- You need to manage permissions on your system external to Make.
- Configuration requires the JWT Authorization secret and external parameters mapping
- Enable the 'read:packages' permission for the Personal Access Token.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '200: Template created successfully. Template data returned.'
- '200: Template blueprint patched successfully. Template data returned.'
- '200: Template updated successfully. Template data returned.'
- '429: Requests limit for organization exceeded, please try again later.'
- 403 Access denied
- '2xx: successful request'
- '4xx: error on the client side'
- '5xx: error on the server side'
- '400: Bad request'
- '403: Forbidden'
- '404: Not Found'
- '413: Payload Too Large'
- '424: Failed Dependency'
- '429: Too many requests'
- '503: Service Unavailable'
- '304: Account Does Not Exist'
- 'IM001: Access Denied'
- 'IM002: Insufficient Rights'
- 'IM003: Storage Not Enough Space'
- 'IM004: Confirmation Required'
- 'IM005: Invalid Input Parameters'
- 'IM011: Entity Limit Exceeded'
- 'IM016: Action is not possible due to dependencies'
- 'IM102: Invalid Credentials'
- 'Access denied: Ensure that scopes assigned to your authentication token correspond
  to the requested resource.'
- 'Not found: Check that you are using an incorrect endpoint.'
- '200: Successful response'
- '401: Unauthorized'
- '403 Forbidden: Owner role required for organization analytics'
- '403: Insufficient permissions to access audit log entries.'
- '401 Unauthorized: Recheck API key or token'
- '401 Unauthorized: Check API key'
- IM004 - Confirmation required (error with metadata) - needs confirmation
- IM405 - Device can't be deleted because it contains messages in queue (error with
  metadata) - needs confirmation
- IM005 - Device is locked by a running scenario and thus can't be deleted
- '401 Unauthorized: Recheck API key or scopes.'
- '401 Unauthorized: Check your API key or permissions'
- 'IM004: Confirmation required for deletion'
- '406: Invalid request'
- '401 Unauthorized: Recheck API key'
- 200 Successful response
- '404 Not Found: Ensure the hook ID is correct.'
- '400 Bad Request: Check the request parameters.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '404 NOT FOUND: Check the organizationId is correct.'
- '401 Unauthorized: Check API key and permissions.'
- '401 Unauthorized: Recheck API key or permissions'
- '200: Buildtime variable updated successfully'
- '200: Buildtime variable deleted successfully'
- '401 Unauthorized: Recheck API key.'
- '404 Not Found: Scenario ID does not exist.'
- '200: Blueprint retrieved'
- '200: Retrieved a list of Consumptions'
- '401: Unauthorized access - check your API key'
- '400: Bad Request'
- '401 Unauthorized: Ensure the API key is correct and has necessary permissions.'
- '401 Unauthorized: Check API key or permissions'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Check API key or token'
- '429 Too Many Requests: Slow down your requests'
- 'RATE_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'INVALID_REQUEST: Check your parameters and try again'
- Invalid or missing API key
- The stop condition `limit` set by the user doesn't work.
- The `next page` condition isn't set correctly so the next page isn't retrieved even
  though it should.
- The pagination is not optimized so it retrieves the next page which is empty.
- '401 Unauthorized: Invalid credentials or token expired.'
- '403 Forbidden: Insufficient permissions for the requested resource.'
- 'E101: The company with the given ID does not exist.'
- '401 Unauthorized: Check your access token.'
- '404 Not Found: The requested resource does not exist.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Ensure valid authentication credentials.'
- '404 Not Found: Verify the endpoint URL.'
- 'Max Execution Timeout: 40 seconds'
- 'Request Count: 3 calls performed by RPC'
- 'Record Count: 3 * number of objects per page'
- 'Max Execution Timeout: 10 seconds'
- 'Max Number: 5000 characters'
- '401 Unauthorized: Check your API key and permissions.'
- '401 Unauthorized: Verify the token and permissions.'
- '429 Too Many Requests: Rate limit exceeded.'
- 'Self-signed certificate: Connection allowed, produces warning'
- 'Custom CA certificate: Connection allowed, produces warning'
- 'Expired certificate: Connection allowed, produces warning'
- 'Invalid or weak certificate: Connection allowed, produces warning'
- 'INVALID_REQUEST: Check request parameters for correctness'
- 'UNAUTHORIZED: Verify API key or access token'
- 'RATE_LIMIT_EXCEEDED: Slow down requests or check usage limits'
- '401 Unauthorized: Check OAuth token'
- '403 Forbidden: Insufficient permissions'
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Recheck OAuth credentials.'
- 'USER_NOT_FOUND: Verify the user ID.'
- 'INVALID_LICENSE: Check the license parameters for the organization.'
auth_info:
  mentioned_objects:
  - JWT
  - OauthToken
  - AuthProvider
  - NamedCredential
  - devices:read
  - oauth.scope
  - oauth.redirectUri
  - parameters.clientId
  - common.clientId
  - parameters.clientSecret
  - common.clientSecret
  - connection.accessToken
  - OAuthToken
  - oauth-feedback@google.com
client:
  base_url: https://eu1.make.com/api/v2
source_metadata: null
