resources:
- name: wallet
  endpoint:
    path: /api/wallet
    method: POST
    data_selector: object
- name: currencies
  endpoint:
    path: /reference/listcurrenciescrypto
    method: GET
- name: merchant_ids
  endpoint:
    path: /reference/merchantidcreate
    method: POST
- name: crypto_payments
  endpoint:
    path: /reference/paymentcreate
    method: POST
- name: wallets
  endpoint:
    path: /reference/walletcreate
    method: POST
- name: customers
  endpoint:
    path: /reference/createcustomer
    method: POST
- name: onboarding
  endpoint:
    path: /reference/listcountries
    method: GET
- name: currencies
  endpoint:
    path: /reference/listcurrenciescrypto
    method: GET
- name: merchant_ids
  endpoint:
    path: /reference/merchantidlist
    method: GET
- name: crypto_payments
  endpoint:
    path: /reference/paymentlist
    method: GET
- name: wallets
  endpoint:
    path: /reference/walletlist
    method: GET
- name: trading_and_conversions
  endpoint:
    path: /reference/quotelist
    method: GET
- name: fiat_payments
  endpoint:
    path: /reference/wallets-1
    method: GET
- name: customers
  endpoint:
    path: /reference/listaccountcustomers
    method: GET
- name: onboarding
  endpoint:
    path: /reference/listcountries
    method: GET
- name: merchant
  endpoint:
    path: /api/v1/merchant
    method: GET
- name: merchant
  endpoint:
    path: /api/v1/merchant
    method: GET
- name: wallets
  endpoint:
    path: /ledger/v1/wallets
    method: GET
    params: {}
- name: currencies
  endpoint:
    path: /reference/listcurrenciescrypto
    method: GET
- name: merchant_ids
  endpoint:
    path: /reference/merchantidlist
    method: GET
- name: crypto_payments
  endpoint:
    path: /reference/paymentlist
    method: GET
- name: crypto_channels
  endpoint:
    path: /reference/channellist
    method: GET
- name: wallets
  endpoint:
    path: /reference/walletlist
    method: GET
- name: trading_and_conversions
  endpoint:
    path: /reference/quotelist
    method: GET
- name: fiat_payments
  endpoint:
    path: /reference/wallets-1
    method: GET
- name: customers
  endpoint:
    path: /reference/listaccountcustomers
    method: GET
- name: onboarding
  endpoint:
    path: /reference/listcountries
    method: GET
- name: List Exchange Rates
  endpoint:
    path: /list-exchange-rates
    method: GET
- name: Get Exchange Rate
  endpoint:
    path: /readexchangerate
    method: GET
- name: List Wallet Currencies
  endpoint:
    path: /listcurrenciesdeposit
    method: GET
- name: List Fiat Currencies
  endpoint:
    path: /listcurrenciesfiat
    method: GET
- name: List Crypto Currencies
  endpoint:
    path: /listcurrenciescrypto
    method: GET
- name: List Merchant IDs
  endpoint:
    path: /merchantidlist
    method: GET
- name: Create Merchant ID
  endpoint:
    path: /merchantidcreate
    method: POST
- name: List Payments
  endpoint:
    path: /paymentlist
    method: GET
- name: Create Payment
  endpoint:
    path: /paymentcreate
    method: POST
- name: Get Wallet
  endpoint:
    path: /walletread
    method: GET
- name: List Wallets
  endpoint:
    path: /walletlist
    method: GET
- name: Create Wallet
  endpoint:
    path: /walletcreate
    method: POST
- name: crypto_currencies
  endpoint:
    path: /api/currency/crypto
    method: GET
    data_selector: array of objects
    params:
      offset: 0
      max: 200
      allowDeposits: false
- name: fiat_currencies
  endpoint:
    path: /api/currency/fiat
    method: GET
    data_selector: array of objects
    params:
      offset: 0
      max: 200
- name: list_wallet_currencies
  endpoint:
    path: /api/currency/deposit
    method: GET
    data_selector: array of objects
    params:
      offset: 0
      max: 200
- name: exchange_rate
  endpoint:
    path: /api/currency/convert/{fromCode}/{toCode}
    method: GET
    data_selector: value
    params:
      amount: '1'
- name: list_exchange_rates
  endpoint:
    path: /api/currency/values/{baseCurrency}
    method: GET
    data_selector: array of objects
    params:
      baseCurrency: ETH
- name: merchant_id
  endpoint:
    path: /merchant
    method: POST
    data_selector: object
- name: merchant
  endpoint:
    path: /merchant
    method: GET
    data_selector: array of objects
- name: estimate_payment
  endpoint:
    path: /api/v1/pay/estimate
    method: POST
    data_selector: object
    params: {}
- name: estimate_payment
  endpoint:
    path: /api/v1/pay/estimate
    method: POST
    data_selector: object
- name: update_estimate_payout
  endpoint:
    path: /api/v1/pay/estimate/{externalId}/update
    method: PUT
- name: accept_estimated_payout
  endpoint:
    path: /api/v1/pay/estimate/{externalId}/accept
    method: POST
- name: confirm_payment
  endpoint:
    path: /api/v1/pay/{uuid}/confirm/summary
    method: PUT
- name: create_payment
  endpoint:
    path: /api/v1/pay/summary
    method: POST
- name: payments
  endpoint:
    path: /api/v1/pay/summary
    method: GET
    data_selector: array of objects
    params: {}
- name: update_payment
  endpoint:
    path: /api/v1/pay/{uuid}/update/summary
    method: PUT
    data_selector: object
    params: {}
- name: accept_payment
  endpoint:
    path: /api/v1/pay/{uuid}/accept/summary
    method: PUT
- name: get_payment
  endpoint:
    path: /api/v1/pay/{uuid}/summary
    method: GET
    data_selector: object
    params:
      uuid: 5C8D8D78-366A-4AFB-B658-A64CE543C5DB
- name: validate_address
  endpoint:
    path: /validate
    method: PUT
    data_selector: object
    params: {}
- name: channel
  endpoint:
    path: /api/v2/channel
    method: POST
    data_selector: object
    params: {}
- name: channels
  endpoint:
    path: /channel
    method: GET
    data_selector: array of objects
    params:
      walletId: string
      offset: string
      max: string
      sort: string
      order: string
- name: channel
  endpoint:
    path: /api/v2/channel/{uuid}
    method: GET
    data_selector: object
    params: {}
- name: Get Channel Payment
  endpoint:
    path: /api/v2/channel/payment/{uuid}
    method: GET
- name: list_channel_payments
  endpoint:
    path: /api/v2/channel/payment
    method: GET
    data_selector: array of objects
    params:
      walletId: string
      status: string
      fromDate: string
      toDate: string
      offset: string
      max: string
      order: string
      q: string
- name: wallets
  endpoint:
    path: /wallet
    method: GET
    data_selector: array of objects
    params:
      offset: 0
      max: 10
- name: wallet
  endpoint:
    path: /api/wallet/{walletId}
    method: GET
    data_selector: object
    params: {}
- name: wallet_balances
  endpoint:
    path: /api/wallet/balances
    method: GET
    data_selector: array of objects
    params:
      date: string
- name: transactions
  endpoint:
    path: /ledger/v1/transactions
    method: GET
    data_selector: content
    params:
      walletId: string
      statuses: array of strings
      page: integer
      size: integer
      start: date-time
      end: date-time
- name: transactions_report
  endpoint:
    path: /ledger/v1/reports
    method: POST
    data_selector: array of objects
- name: customer_fee_wallets
  endpoint:
    path: /platform/v1/fees/customer-fee-wallets
    method: GET
    data_selector: customerFeeWallets
- name: set_customer_fee_wallet
  endpoint:
    path: /platform/v1/fees/customer-fee-wallets
    method: PUT
- name: report_schedule
  endpoint:
    path: /ledger/v1/report-schedules
    method: GET
    data_selector: content
    params:
      page: 0
      size: 20
- name: report_schedule
  endpoint:
    path: /ledger/v1/report-schedules
    method: POST
    data_selector: report_schedule
    params: {}
- name: supported_timezones
  endpoint:
    path: /ledger/v1/report-schedules/timezones
    method: GET
- name: update_existing_report_schedule
  endpoint:
    path: /ledger/v1/report-schedules/{scheduleId}
    method: PUT
    data_selector: object
    params: {}
- name: quote
  endpoint:
    path: /quote
    method: POST
    data_selector: object
    params: {}
- name: accept_quote
  endpoint:
    path: /api/v1/quote/accept/{uuid}
    method: PUT
- name: quote
  endpoint:
    path: /quote/{uuid}
    method: GET
    data_selector: object
- name: quotes
  endpoint:
    path: /quote/{merchantId}
    method: GET
- name: create_wallet
  endpoint:
    path: /ledger/v1/wallets
    method: POST
    data_selector: object
    params: {}
- name: create_wallet
  endpoint:
    path: /ledger/v1/wallets
    method: POST
    data_selector: object
- name: wallet_profiles
  endpoint:
    path: /ledger/v1/wallets/profiles
    method: GET
    data_selector: profiles
- name: wallet
  endpoint:
    path: /ledger/v1/wallets/{id}
    method: GET
    data_selector: object
    params: {}
- name: wallets
  endpoint:
    path: /ledger/v1/wallets
    method: GET
    data_selector: content
    params: {}
- name: create_internal_transfer
  endpoint:
    path: /payment/v1/transfers
    method: POST
- name: transfer
  endpoint:
    path: /payment/v1/transfers/{transactionReference}
    method: GET
    data_selector: object
- name: list_transfer_beneficiaries
  endpoint:
    path: /payment/v1/transfers/{walletId}/beneficiaries
    method: GET
    data_selector: array of objects
- name: payout
  endpoint:
    path: /payment/v1/payouts/{transactionReference}
    method: GET
    data_selector: object
    params:
      transactionReference: 5dc4e061-31c6-4b96-8c4d-0ea984aece0b
- name: initiate_payout
  endpoint:
    path: /payment/v1/payouts
    method: POST
    data_selector: object
    params: {}
- name: initiate_payout_v2
  endpoint:
    path: /payment/v2/payouts
    method: POST
- name: verify_beneficiary
  endpoint:
    path: /platform/v1/beneficiaries/verification
    method: POST
- name: Confirm Beneficiary's Name
  endpoint:
    path: /payment/v2/payouts/{Id}/actions
    method: POST
    data_selector: object
- name: create_on_ramp_payment_rule
  endpoint:
    path: /payment/v1/rules
    method: POST
    data_selector: object
- name: update_payment_rule
  endpoint:
    path: /payment/v1/rules/{id}
    method: PATCH
- name: estimate_refund_fee
  endpoint:
    path: /payment/v1/payins/{transactionReference}/refund/estimate
    method: POST
    data_selector: object
- name: refund_payin
  endpoint:
    path: /payment/v1/payins/{transactionReference}/refund
    method: POST
    data_selector: object
    params: {}
- name: simulate_pay_in
  endpoint:
    path: /payment/v1/payins/simulate
    method: POST
- name: customer
  endpoint:
    path: /platform/v1/customers
    method: POST
- name: list_customers
  endpoint:
    path: /platform/v1/customers
    method: GET
- name: customers
  endpoint:
    path: /platform/v1/customers
    method: GET
    data_selector: content
    params:
      page: '0'
      size: '100'
- name: customer
  endpoint:
    path: /platform/v1/customers/{customerReference}
    method: GET
- name: list_required_information
  endpoint:
    path: /platform/v1/customers/{customerReference}/info-required
    method: GET
- name: upload_documents_to_customer
  endpoint:
    path: /platform/v1/customers/{customerReference}/documents
    method: POST
- name: industries
  endpoint:
    path: /platform/v1/accounts/industries
    method: GET
    data_selector: array of objects
- name: monthly_expected_volumes
  endpoint:
    path: /platform/v1/accounts/monthly-expected-volumes
    method: GET
    data_selector: array of objects
- name: create_agreement_signing_session
  endpoint:
    path: /platform/v1/customers/agreement/sessions
    method: POST
    data_selector: response
    params: {}
- name: agreement_session_status
  endpoint:
    path: /platform/v1/customers/agreement/sessions/{reference}
    method: GET
    data_selector: object
- name: update_agreement_session_status
  endpoint:
    path: /customers/agreement/sessions/{reference}
    method: PUT
    data_selector: status
- name: get_customer_documents
  endpoint:
    path: /platform/v1/customers/documents
    method: GET
    data_selector: content
- name: get_document_download_url
  endpoint:
    path: /platform/v1/customers/documents/{documentReference}/url
    method: GET
    data_selector: uri
    params: {}
- name: Remove a document
  endpoint:
    path: /platform/v1/customers/documents/{documentReference}
    method: DELETE
    data_selector: '204'
    params: {}
- name: country_codes
  endpoint:
    path: /api/country
    method: GET
    data_selector: array of objects
- name: agreements
  endpoint:
    path: /api/v1/agreement
    method: GET
    data_selector: array of objects
    params:
      product: embedded
      country: GB
- name: onboard_embedded_merchant
  endpoint:
    path: /api/accounts-management/v1/accounts/embedded
    method: POST
- name: Fetch Account Webhook URL
  endpoint:
    path: /api/accounts-management/v1/accounts/webhooks
    method: GET
- name: Create or Update Account Webhook URL
  endpoint:
    path: /api/accounts-management/v1/accounts/webhooks
    method: PUT
    data_selector: object
    params: {}
- name: get_questionnaire_definition
  endpoint:
    path: /platform/v1/customers/questionnaire/definitions
    method: GET
    data_selector: array of questionnaire schema objects
- name: submit_questionnaire
  endpoint:
    path: /platform/v1/customers/{customerReference}/questionnaires
    method: PUT
    data_selector: status
    params: {}
- name: search_questionnaire_submissions
  endpoint:
    path: /customers/questionnaires
    method: GET
    data_selector: array of questionnaire submissions that meet the criteria.
- name: complete_onboarding
  endpoint:
    path: /platform/v1/customers/{customerReference}/complete-onboarding
    method: POST
- name: crypto_currencies
  endpoint:
    path: /currency/crypto
    method: GET
    data_selector: array of objects
    params:
      offset: 0
      max: 200
      allowDeposits: false
- name: create_merchant_id
  endpoint:
    path: /merchant
    method: POST
- name: estimate_payment
  endpoint:
    path: /pay/estimate
    method: POST
- name: create_channel
  endpoint:
    path: /channel
    method: POST
    data_selector: object
    params: {}
- name: create_wallet
  endpoint:
    path: /wallet
    method: POST
    data_selector: object
    params: {}
- name: report_schedules
  endpoint:
    path: /ledger/v1/report-schedules
    method: GET
    data_selector: content
    params:
      page: 0
      size: 20
- name: customer_fee_wallets
  endpoint:
    path: /platform/v1/fees/customer-fee-wallets
    method: GET
    data_selector: customerFeeWallets
- name: quote
  endpoint:
    path: /quote
    method: POST
    data_selector: object
- name: create_wallet
  endpoint:
    path: /ledger/v1/wallets
    method: POST
    data_selector: object
- name: estimate_refund_fee
  endpoint:
    path: /payment/v1/payins/{transactionReference}/refund/estimate
    method: POST
    data_selector: object
- name: payout
  endpoint:
    path: /payment/v1/payouts/{transactionReference}
    method: GET
    data_selector: object
    params:
      transactionReference: 5dc4e061-31c6-4b96-8c4d-0ea984aece0b
- name: customer
  endpoint:
    path: /platform/v1/customers
    method: POST
    data_selector: object
- name: list_customers
  endpoint:
    path: /platform/v1/customers
    method: GET
    data_selector: array of objects
- name: customer_documents
  endpoint:
    path: /customers/documents
    method: GET
    data_selector: content
- name: create_agreement_signing_session
  endpoint:
    path: /platform/v1/customers/agreement/sessions
    method: POST
    data_selector: object
    params: {}
- name: country_codes
  endpoint:
    path: /api/country
    method: GET
    data_selector: array of objects
    params:
      max: '135'
- name: questionnaire_definitions
  endpoint:
    path: /platform/v1/customers/questionnaire/definitions
    method: GET
    data_selector: response
    params: {}
- name: wallet
  endpoint:
    path: /wallets
    method: POST
    data_selector: wallets
    params: {}
- name: Ethereum Wallet
  endpoint:
    path: /docs/setting-up-a-metamask-ethereum-wallet-for-eth-and-usdt-erc20-tokens
    method: GET
    data_selector: transaction
    params: {}
- name: USDT ERC20
  endpoint:
    path: /docs/setting-up-a-metamask-ethereum-wallet-for-eth-and-usdt-erc20-tokens
    method: GET
    data_selector: transaction
    params: {}
- name: tronlink_wallet
  endpoint:
    path: /setup/tronlink_wallet
    method: GET
    data_selector: wallet_setup_steps
    params: {}
- name: agreement_session
  endpoint:
    path: /customers/agreement/sessions
    method: POST
    data_selector: reference
- name: create_customer
  endpoint:
    path: /platform/v1/customers
    method: POST
    data_selector: reference
- name: customers
  endpoint:
    path: /platform/v1/customers
    method: GET
    data_selector: content
    params:
      incremental: reference
- name: customer_details
  endpoint:
    path: /platform/v1/customers/{customerReference}
    method: GET
    data_selector: company
    params: {}
- name: customers
  endpoint:
    path: /platform/v1/customers
    method: GET
    params:
      page: 0
      size: 20
- name: add_documents_to_customers
  endpoint:
    path: /customers/{customerReference}/documents
    method: POST
    data_selector: documents
- name: complete_onboarding
  endpoint:
    path: /customers/{customerReference}/complete-onboarding
    method: POST
    data_selector: reference
- name: check_verification_status
  endpoint:
    path: /customers/{customerReference}
    method: GET
    data_selector: verification_status
- name: questionnaire_definitions
  endpoint:
    path: /platform/v1/customers/questionnaire/definitions
    method: GET
    data_selector: questionnaires
- name: submit_questionnaire_responses
  endpoint:
    path: /platform/v1/customers/{customerReference}/questionnaires
    method: PUT
    data_selector: status
- name: search_questionnaire_submissions
  endpoint:
    path: /platform/v1/customers/questionnaires
    method: GET
    data_selector: submissions
- name: wallet_profiles
  endpoint:
    path: /ledger/v1/wallets/profiles
    method: GET
    data_selector: profiles
- name: create_customer_wallet
  endpoint:
    path: /ledger/v1/wallets
    method: POST
    data_selector: wallet
    params: {}
- name: customer_wallets
  endpoint:
    path: /retrieve-customer-wallets
    method: GET
    data_selector: wallets
- name: wallets
  endpoint:
    path: /ledger/v1/wallets
    method: GET
    data_selector: content
    params: {}
- name: wallets_by_customer_reference
  endpoint:
    path: /ledger/v1/wallets
    method: GET
    data_selector: content
    params:
      customerReference: '{customerReference}'
- name: wallets_by_id
  endpoint:
    path: /ledger/v1/wallets/{id}
    method: GET
    data_selector: id
    params: {}
- name: internal_transfer
  endpoint:
    path: /payment/v1/transfers
    method: POST
    data_selector: transactionReference
- name: check_transfer_status
  endpoint:
    path: /payment/v1/transfers/{transactionReference}
    method: GET
    data_selector: transfer_status
    params: {}
- name: payout
  endpoint:
    path: /api/v1/payouts
    method: POST
    data_selector: payoutDetails
    params: {}
- name: fiat_payout
  endpoint:
    path: /payment/v1/payouts
    method: POST
    data_selector: transactionReference
- name: stablecoin_payout
  endpoint:
    path: /api/v1/pay/summary
    method: POST
    data_selector: response
    params: {}
- name: crypto_payment
  endpoint:
    path: /v1/pay/summary
    method: POST
    data_selector: response
    params: {}
- name: channel
  endpoint:
    path: /api/v2/channel
    method: POST
    data_selector: id
    params: {}
- name: channel_uuid
  endpoint:
    path: /v2/channel/{uuid}
    method: GET
    data_selector: address
    params: {}
- name: customer_fee
  endpoint:
    path: /platform/v1/fees/customer-fee-wallets
    method: GET
    data_selector: content
    params: {}
- name: set_customer_fee_wallet
  endpoint:
    path: /platform/v1/fees/customer-fee-wallets
    method: PUT
    data_selector: ''
    params: {}
- name: payment_create
  endpoint:
    path: /reference/paymentcreate
    method: POST
    data_selector: ''
    params: {}
- name: payout_status
  endpoint:
    path: /payment/v1/payouts/{transactionReference}
    method: GET
    data_selector: transactionReference
- name: internal_transfer
  endpoint:
    path: /internal/transfers
    method: POST
    data_selector: data
- name: webhook
  endpoint:
    path: /webhooks/fiat-payins
    method: POST
    data_selector: data
    params: {}
- name: payout_webhook
  endpoint:
    path: /webhooks/payout
    method: POST
    data_selector: data
    params: {}
- name: status_change
  endpoint:
    path: /crypto/payins/status-change
    method: POST
    data_selector: data
    params: {}
- name: transaction_late
  endpoint:
    path: /webhook/transaction-late
    method: POST
    data_selector: data
- name: transaction_on_hold
  endpoint:
    path: /webhook/transaction-on-hold
    method: POST
    data_selector: data
- name: refund_initiated
  endpoint:
    path: /webhook/refund-initiated
    method: POST
    data_selector: data
- name: transaction_detected
  endpoint:
    path: /webhooks/payment/channel/transaction-detected
    method: POST
    data_selector: data
- name: transaction_confirmed
  endpoint:
    path: /webhooks/payment/channel/transaction-confirmed
    method: POST
    data_selector: data
- name: transaction_on_hold
  endpoint:
    path: /webhooks/payment/channel/transaction-on-hold
    method: POST
    data_selector: data
- name: Payout Webhooks
  endpoint:
    path: /webhooks
    method: POST
- name: crypto_status_change
  endpoint:
    path: /webhook/bvnk/payment/crypto/status-change
    method: POST
    data_selector: data
    params: {}
- name: refund_initiated
  endpoint:
    path: /bvnk/payment/crypto/refund-initiated
    method: POST
    data_selector: data
    params: {}
- name: customers_documents
  endpoint:
    path: /customers/{customerReference}/documents
    method: POST
- name: individual_requirements
  endpoint:
    path: /docs/compliance-requirements-for-individuals2
    method: GET
    data_selector: requirements
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: payment_details
    params: {}
- name: payment
  endpoint:
    path: /api/v1/pay/summary
    method: POST
    data_selector: uuid
    params: {}
- name: payment
  endpoint:
    path: /reference/paymentcreate
    method: POST
    data_selector: currencyOptions
- name: payment_notifications
  endpoint:
    path: /webhooks/payment_notifications
    method: POST
    data_selector: webhook_data
    params: {}
- name: transactionDetected
  endpoint:
    path: /transactionDetected
    method: POST
    data_selector: data
- name: statusChanged
  endpoint:
    path: /statusChanged
    method: POST
    data_selector: data
- name: transactionConfirmed
  endpoint:
    path: /transactionConfirmed
    method: POST
    data_selector: data
- name: transactionLate
  endpoint:
    path: /transactionLate
    method: POST
    data_selector: data
- name: statusChanged
  endpoint:
    path: /receivePaymentNotifications/statusChanged
    method: POST
    data_selector: data
- name: transactionOnHold
  endpoint:
    path: /receivePaymentNotifications/transactionOnHold
    method: POST
    data_selector: data
- name: refund_payments
  endpoint:
    path: /refunds
    method: POST
    data_selector: refunds
    params: {}
- name: refund_initiated
  endpoint:
    path: /refunds/initiate
    method: POST
    data_selector: data
    params: {}
- name: status_changed
  endpoint:
    path: /refunds/status
    method: POST
    data_selector: data
    params: {}
- name: payout
  endpoint:
    path: /payouts
    method: POST
    data_selector: data
- name: validate_crypto_address
  endpoint:
    path: /api/v1/pay/validate
    method: PUT
    data_selector: errorList
- name: create_payout
  endpoint:
    path: /api/v1/pay/summary
    method: POST
    data_selector: uuid
- name: webhook_events
  endpoint:
    path: /webhooks
    method: POST
    data_selector: events
- name: statusChanged
  endpoint:
    path: /webhooks/statusChanged
    method: POST
    data_selector: data
- name: transactionOnHold
  endpoint:
    path: /webhooks/transactionOnHold
    method: POST
    data_selector: data
- name: expired
  endpoint:
    path: /webhooks/expired
    method: POST
    data_selector: data
- name: complete
  endpoint:
    path: /webhooks/complete
    method: POST
    data_selector: data
- name: cancelled
  endpoint:
    path: /webhooks/cancelled
    method: POST
    data_selector: data
- name: payout
  endpoint:
    path: /payouts
    method: POST
    data_selector: payoutDetails
    params: {}
- name: payout_approval
  endpoint:
    path: /api/approval-workflow/v2/action
    method: POST
    data_selector: response
    params: {}
- name: crypto_payout
  endpoint:
    path: /api/v1/pay/summary
    method: POST
    data_selector: data
    params: {}
- name: confirm_payout
  endpoint:
    path: /api/v1/pay/{{uuid}}/confirm/summary
    method: PUT
    data_selector: data
    params: {}
- name: estimate_crypto_payouts
  endpoint:
    path: /api/v1/pay/estimate
    method: POST
    data_selector: estimateDetails
    params: {}
- name: channels
  endpoint:
    path: /reference/channels
    method: GET
- name: channel
  endpoint:
    path: /api/v2/channel
    method: POST
    data_selector: response
    params: {}
- name: Receive Channel Notifications
  endpoint:
    path: /webhooks/channel-notifications
    method: POST
- name: transactionDetected
  endpoint:
    path: /webhook/transactionDetected
    method: POST
    data_selector: data
- name: transactionConfirmed
  endpoint:
    path: /webhook/transactionConfirmed
    method: POST
    data_selector: data
- name: transactions
  endpoint:
    path: /api/transaction/{id}
    method: GET
    data_selector: ''
    params: {}
- name: wallets
  endpoint:
    path: /api/wallets
    method: GET
    data_selector: ''
    params: {}
- name: create_quote
  endpoint:
    path: /api/v1/quote
    method: POST
- name: accept_quote
  endpoint:
    path: /api/v1/accept-quote
    method: POST
- name: validate_address
  endpoint:
    path: /api/v1/pay/validate
    method: PUT
    data_selector: null
    params:
      code: crypto
      currency: USDT
      protocol: TRC20
      address: TFsmkjujT9omG5TFrEXYbDocTdjeeHgcrQ
- name: payment
  endpoint:
    path: /api/v1/pay/summary
    method: POST
    data_selector: null
    params: {}
- name: webhook_listener
  endpoint:
    path: /webhooks/settlement-status
    method: POST
    data_selector: data
- name: payins
  endpoint:
    path: /payment/v1/payins/simulate
    method: POST
    data_selector: payload
- name: payouts
  endpoint:
    path: /payment/v1/payouts
    method: POST
    data_selector: transactionReference
    params: {}
- name: check_payout_status
  endpoint:
    path: /payment/v1/payouts/{transactionReference}
    method: GET
    data_selector: transactionReference
    params: {}
- name: transactions
  endpoint:
    path: /ledger/v1/transactions
    method: GET
    data_selector: content
    params:
      walletId: ''
      start: ''
      end: ''
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: events
    params: {}
- name: payout_notification
  endpoint:
    path: /webhooks/payouts
    method: POST
    data_selector: data
    params: {}
- name: pay_in_notifications
  endpoint:
    path: /webhook/pay-in-notifications
    method: POST
    data_selector: data
    params: {}
- name: internal_transfer_notifications
  endpoint:
    path: /listening-for-internal-transfers-webhooks
    method: POST
    data_selector: event
    params: {}
- name: wallet_creation
  endpoint:
    path: /webhooks/wallet_creation
    method: POST
    data_selector: data
    params: {}
- name: refund_estimate
  endpoint:
    path: /payment/v1/payins/{transactionReference}/refund/estimate
    method: POST
    data_selector: ''
    params: {}
- name: refund_payin
  endpoint:
    path: /payment/v1/payins/{transactionReference}/refund
    method: POST
    data_selector: ''
    params: {}
- name: check_refund_status
  endpoint:
    path: /payment/v1/payins/{transactionReference}/refund
    method: GET
    data_selector: ''
    params: {}
- name: customer_virtual_accounts
  endpoint:
    path: /customer-virtual-accounts
    method: GET
- name: create_customer
  endpoint:
    path: /create-customer
    method: POST
- name: create_company_customer
  endpoint:
    path: /platform/v1/customers
    method: POST
    data_selector: reference
- name: create_customer
  endpoint:
    path: /platform/v1/customers
    method: POST
    data_selector: reference
    params: {}
- name: customer_details
  endpoint:
    path: /platform/v1/customers
    method: GET
    data_selector: content
    params: {}
- name: specific_customer_details
  endpoint:
    path: /platform/v1/customers/{customerReference}
    method: GET
    data_selector: reference
    params: {}
- name: customers
  endpoint:
    path: /platform/v1/customers
    method: GET
    data_selector: content
    params:
      page: '0'
      size: '20'
- name: create_customer_wallet
  endpoint:
    path: /ledger/v1/wallets
    method: POST
    data_selector: id
- name: list_wallet_profiles
  endpoint:
    path: /ledger/v1/wallets/profiles
    method: GET
    data_selector: profiles
- name: customer_wallets
  endpoint:
    path: /retrieve-customer-wallets
    method: GET
- name: wallets
  endpoint:
    path: /ledger/v1/wallets
    method: GET
    data_selector: content
    params:
      customerReference: a7e21c62-27b8-4b3b-b51e-eb10edeb1731
- name: wallet_details
  endpoint:
    path: /ledger/v1/wallets/{id}
    method: GET
    data_selector: id
- name: payment_rule
  endpoint:
    path: /payment/v1/rules
    method: POST
    data_selector: rules
    params: {}
- name: payin_webhook
  endpoint:
    path: /webhooks/payin
    method: POST
    data_selector: data
- name: internal_transfer
  endpoint:
    path: /payment/v1/transfers
    method: POST
    data_selector: transactionReference
    params: {}
- name: check_transfer_status
  endpoint:
    path: /payment/v1/transfers/{transactionReference}
    method: GET
    data_selector: transactionReference
- name: internal_transfer
  endpoint:
    path: /webhook/internal_transfer
    method: POST
    data_selector: data
- name: create_payout
  endpoint:
    path: /create/payout
    method: POST
    data_selector: payout
    params: {}
- name: payouts
  endpoint:
    path: /payment/v1/payouts
    method: POST
    data_selector: transactionReference
    params: {}
- name: payouts
  endpoint:
    path: /payment/v1/payouts
    method: POST
    data_selector: transactionReference
    params: {}
- name: payout
  endpoint:
    path: /payment/v2/payouts
    method: POST
    data_selector: data
    params: {}
- name: verify_beneficiary
  endpoint:
    path: /platform/v1/beneficiaries/verification
    method: POST
    data_selector: matchStatus
- name: confirm_payout
  endpoint:
    path: /payment/v2/payouts/{id}/actions
    method: POST
    data_selector: status
- name: create_payout
  endpoint:
    path: /payment/v2/payouts
    method: POST
    data_selector: payoutDetails
- name: check_payout_status
  endpoint:
    path: /payment/v1/payouts/{transactionReference}
    method: GET
    data_selector: transactionReference
- name: payout_webhook
  endpoint:
    path: /webhooks/payout
    method: POST
    data_selector: data
    params: {}
- name: payout_status_change
  endpoint:
    path: /payouts/status-change
    method: POST
    data_selector: data
- name: BVNK Digital Payments
  endpoint:
    path: /woocommerce/settings/payments/bvnk
    method: POST
    data_selector: settings
    params: {}
- name: currencies
  endpoint:
    path: /docs/currencies-1
    method: GET
    data_selector: currencies
- name: industries
  endpoint:
    path: /platform/v1/accounts/industries
    method: GET
    data_selector: ''
- name: parent_industry
  endpoint:
    path: /parent_industry
    method: GET
    data_selector: industries
- name: children_categories
  endpoint:
    path: /children_categories
    method: GET
    data_selector: sub_industries
- name: industries
  endpoint:
    path: /api/v1/industries
    method: GET
    data_selector: data
    params: {}
- name: industries
  endpoint:
    path: /api/industries
    method: GET
    data_selector: industries
    params: {}
- name: monthly_expected_volumes
  endpoint:
    path: /accounts/monthly-expected-volumes
    method: GET
    data_selector: volumes
- name: payment_summary
  endpoint:
    path: /api/v1/pay/summary
    method: GET
- name: payment_channel
  endpoint:
    path: /api/v2/channel
    method: GET
- name: supply_additional_data
  endpoint:
    path: /supplying/additional/data
    method: POST
    data_selector: response
    params: {}
- name: transactions_report
  endpoint:
    path: /ledger/v1/reports
    method: POST
    data_selector: data
    params:
      from: '2025-08-01T00:00:00'
      to: '2025-09-29T23:59:59'
      type: TRANSACTION
notes:
- Save your keys immediately — once you've created the keys, you'll see the Hawk Auth
  ID and Hawk Auth Key.
- Payment risk object data will no longer be available starting October 2023.
- The HTTP method and endpoint URL significantly influence the generation of the correct
  hash values in your authorization header.
- To make use of idempotency, include an `X-Idempotency-Key` header in your call.
- By default, most of the 'List' endpoints return paginated results.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Rates given by this endpoint are indicative, using mid-market rates.
- Retrieves a list of wallets on your account. Displays the first 10 wallets without
  max set to higher.
- The URL for this request expired after 30 days.
- Reports are delivered instantly but the data has a one-hour lag.
- Each user can create only one schedule per account.
- Only the user who created the schedule can update it.
- Creates a fiat payout with an existing beneficiary or by adding a new one.
- The Initiate Payouts (ver. 2) page will soon replace Initiate Payout endpoint.
- Only full refunds are supported for Automated Clearing House (ACH) transfers.
- Page number starts from 0
- Page size max is 100
- Files must be base64-encoded before submission.
- The customer must be in INFO_REQUIRED status.
- BVNK validates completeness asynchronously and transitions the customer to the next
  onboarding state when all required answers are present.
- In the sandbox environment, Customer verification is automatically approved.
- In production, if the EPC meets all compliance requirements, the status will update
  to `VERIFIED`. If there are outstanding requirements or issues, the status will
  move to `INFO_REQUIRED` or `REJECTED`, prompting manual review or further actions.
- Run this endpoint 10 seconds after uploading the documents.
- Creates a quote to convert currency between wallets.
- Defaults to USD for currencyCode
- Defaults to My Customer Wallet for name
- Defaults to unique customerReference
- The PENDING_APPROVAL status is only relevant for fiat payouts.
- Always check the status of the payment on the API after you receive a webhook, as
  further details may be required, such as the final amount paid for the transaction
  about which you have been notified.
- After you receive the final webhook from BVNK, do not update transactions in your
  system to prevent duplicate transaction IDs from affecting your customers.
- 'Some legacy webhooks may still require concatenation of the following items to
  create a signature: Webhook URL, content-type, Webhook payload. Note that these
  webhooks will be soon discontinued.'
- Make sure you do not parse your HTTP request into an object and then serialize it.
  Instead, provide the webhook raw payload as a string.
- Currently, Layer1 is integrated with the Sepolia Test Network for Ethereum (ETH)
  and USDT ERC20.
- Currently, Layer1 is integrated with the Nile Test Network for Tron (TRX) and USDT
  TRC20.
- Embedded Wallets provide Embedded Partners with seamless payment and fund management
  capabilities directly within their platform while maintaining their branding.
- This product is available to businesses and individual customers based in the US,
  UK, EEA, and other countries supported by BVNK outside of these regions.
- EPC must consent to BVNK's Terms of Service.
- Verification process ensures compliance with BVNK's Due Diligence requirements.
- Inform users clearly about the legally binding nature of agreements.
- Monitor and manage session expirations carefully.
- Idempotency supported endpoint — add the X-Idempotency-Key header with a unique
  value.
- This endpoint includes pagination.
- Use customerReference to attach documents to the correct customer.
- After uploading documents, wait ~10 seconds before confirming onboarding.
- Only required for the Business EPCs onboarding
- Ensure that the Customer provides the most comprehensive and complete answers to
  all required questions.
- Idempotency supported endpoint — add the `X-Idempotency-Key` header with a unique
  value (a UUID).
- Idempotency supported endpoint — add the X-Idempotency-Key header with a unique
  value
- Payouts can be either first-party payouts to the customer’s own bank account or
  third-party payouts to someone else’s bank account.
- If invalid bank details are provided, the payout request will be rejected.
- Metadata-supported endpoint allows including custom additional information.
- Payouts are done starting from your pre-funded Partner wallet, converted to crypto
  at BVNK.
- Use 'walletId' instead of 'merchantID' in the request.
- Use the redirectUrl for user top-ups to avoid mistyped addresses.
- 'Currently, the customer fees are only supported for payment type: OUT.'
- With internal transfer webhook, you can receive real-time notifications to your
  system about key internal transfer events, such as initiation, completion, or failure,
  enabling automated updates without manual intervention.
- To configure Pay-in webhooks, go to the BVNK Portal and navigate to Integrations
  > Webhooks.
- With the Payout webhook, you can send real-time notifications about key payout events.
- To configure Payout webhooks, go to the BVNK Portal and navigate to Integrations
  > Webhooks.
- If you use `walletID` in the request that produces the webhook, note that you will
  also receive this field in the webhook response.
- Webhooks for transaction detected, confirmed, and on hold.
- If you use walletID in the request that produces the webhook, note that you will
  also receive this field in the webhook response. In this case, you can ignore merchantID,
  since merchantId will be discontinued soon.
- Webhook notifies when a refund process has begun for a cryptocurrency payment.
- Make sure the image of oneself (SELFIE) is included along with the ID.
- 'For double-sided documents, always upload ''subType'': ''FRONT_SIDE'' before ''subType'':
  ''BACK_SIDE''.'
- Uses BVNK-hosted payments page for fast integration.
- 'Remember to use "walletId": {{wallet_lsId}} instead of the merchantID in the request.'
- Redirect the end-user to the Hosted Payments Page to complete the payment.
- If you use `walletID` in the request that produces the webhook, note that you will
  also receive this field in the webhook response. In this case, you can ignore `merchantID`,
  since merchantId will be discontinued soon.
- 'To see the actual received amount, on the transactionConfirmed webhook, compare
  the fields: paidCurrency.actual indicates the amount you received. paidCurrency.amount
  indicates the original expected amount.'
- To ensure the best customer experience when managing overpayments, it is advisable
  to adjust the final payment made by the end user to reflect the higher total amount
  received.
- To give greater flexibility to your end users on how much they send crypto top-ups
  is recommended.
- Adjust the end user's final payment to reflect the lower total amount received.
- Payments can expire if not completed in the specified timeframe.
- Auto Refund does not automatically return the funds to the sender's address.
- The default expiry limit for a refund is set to three months.
- Webhook events include refund initiation and status change.
- Payouts will remain in the pending state until a crypto address to send the payout
  to has been input, or the payout request is cancelled.
- Once you finalise a payout, please ensure no more API calls will be made to duplicate
  the withdrawal.
- It's recommended to validate the crypto address before making a payout.
- When creating USDC payouts remember to specify which protocol in the payoutDetails
  object - as it may be an ERC20, POLYGON or a BEP20 payout.
- When creating USDT payouts remember to specify which protocol in the payoutDetails
  object - as it may be an ERC20, TRC20 or a BEP20 payout.
- When creating XRP payouts, please specify a Destination Tag in the payoutDetails
  object.
- Contact your solutions consultant to enable payout approval flows for the API flow.
- Allows retrieval of exchange rates and fees without creating a payout request.
- Avoid assigning the same channel to multiple end-users, as you won’t be able to
  determine which customer sent the funds.
- If you use walletID in the request that produces the webhook, note that you will
  also receive this field in the webhook response.
- Before receiving notifications, you have to create a webhook listener.
- Most cryptocurrencies experience drastic volatility. We recommend using 1:1 collateralised
  stablecoins such as USDC as the value will maintain regardless of market volatility.
- The Fiat endpoints are currently in early access and may change as we continue to
  improve and refine their functionality.
- Not all USD wallets support all payment methods.
- Invalid bank details will result in payout request rejection.
- The returned transactions have extra search filters which are not set to be shown
  in the response but are present in each transaction.
- Webhook provides real-time notifications about key payout events.
- A pay-in webhook delivers real-time notifications to your system about key pay-in
  events.
- An internal transfer webhook sends real-time notifications about key internal transfer
  events.
- A wallet creation webhook provides real-time notifications to your system when a
  new wallet is successfully created.
- Webhooks require a 200 HTTP status code for acknowledgment.
- Capture the raw payload for signature verification.
- Refunds are returned via the original payment method.
- Refunds cannot exceed the original pay-in total amount.
- This product is primary for Financial Institutions who are regulated, and similar
  types of businesses which are also regulated.
- This product is available to businesses based in the UK and in countries supported
  by BVNK outside the EEA region.
- Idempotency supported endpoint — add `X-Idempotency-Key` header with a unique value
- Idempotency supported endpoint
- Pagination is supported by specifying page and size in the request.
- Idempotency supported endpoint — add the `X-Idempotency-Key` header with a unique
  value.
- Ensure wallet address validation when creating payment rules.
- Idempotency supported endpoint — use X-Idempotency-Key header with a unique value
- This process allows for the ability for the CUSTOMER ENABLED wallet to complete
  payouts to other bank accounts using their Virtual Account.
- A new flow is coming for Initiate Payouts (ver. 2) to support Verification of Payee
  (VoP).
- Verification results may return a status 202 indicating further action is required.
- Verification session expires after five minutes.
- This endpoint is used to check the status of a payout which was initiated.
- Webhook notifications can be configured in the BVNK Portal under Integrations >
  Webhooks.
- This webhook triggers on payout status changes.
- Ensure WooCommerce is installed and active before proceeding.
- The plugin supports cryptocurrencies and stablecoins supported by BVNK.
- Uptime of 99.90% availability.
- The changes must be implemented by December 30, 2024.
- Webhook response must return a 201 status code.
- The signature is available in the x-signature header of the webhook.
errors:
- 400 Bad Request
- 500 Unexpected Error
- code: BVNK:PAYMENT:0001
  message: Received Bad Request
  description: The system received a request with invalid parameters or missing required
    information. Check the request format, parameters, and ensure all required fields
    are correctly filled.
- code: BVNK:PAYMENT:0002
  message: Payout with the given identifier could not be found
  description: The system was unable to locate the requested payout using the provided
    ID. Verify that the payout ID is correct and exists in the system.
- code: BVNK:PAYMENT:0003
  message: Forbidden → received request with wrong authentication details
  description: The request was rejected due to an authentication failure. Ensure your
    API keys, tokens, or credentials are valid and correctly included in the request
    header.
- code: BVNK:PAYMENT:0004
  message: Error while receiving or validating beneficiary
  description: The beneficiary details could not be retrieved, or failed validation
    checks. This may occur due to missing or malformed fields (name, address, account
    identifiers), failed KYC/KYB or sanctions screening, or temporary downstream connectivity
    errors. Verify beneficiary data to ensure the required fields and formats (e.g.,
    IBAN/ABA) are accurate. Confirm the beneficiary is allowed, and retry once issues
    are resolved.
- code: BVNK:PAYMENT:0005
  message: Validation of the beneficiary has failed
  description: The beneficiary did not pass mandatory validation rules. Typical reasons
    include invalid account identifiers, an unsupported destination, a mismatched
    currency/network, or a compliance screening failure. Correct the beneficiary information
    (names, address, account numbers, tags/memos where required) or select a different,
    validated beneficiary before retrying.
- code: BVNK:PAYMENT:0006
  message: Payout with the idempotency key already exists
  description: A payout using the provided idempotency key already exists. For idempotent
    safety, the platform rejects creating a new payout with the same key. If you intend
    to retry the same request, use the original response; otherwise, generate a new,
    unique idempotency key for a new payout.
- code: BVNK:PAYMENT:0008
  message: The payment method is not supported
  description: The platform does not currently support the payment method specified
    in the request. Review the documentation for a list of supported payment methods.
- code: BVNK:PAYMENT:0009
  message: Specific functionality is not enabled for this account or wallet
  description: The specific functionality or flow is not enabled or provisioned for
    this account or wallet. Check your permissions and product enablement. If the
    feature is available, enable it in the portal; otherwise, contact support to request
    access.
- code: BVNK:PAYMENT:0010
  message: The Virtual Account has been disabled for this given wallet. Customer should
    use a different wallet or choose different payment method.
  description: The Virtual Account assigned to the specified wallet is disabled. Use
    a different wallet or select an alternative payment method. If you need this Virtual
    Account re-enabled, review the wallet configuration and contact support or your
    account manager.
- code: BVNK:PAYMENT:0030
  message: Could not find a single payment within a given payout batch
  description: The referenced payout batch contains no payments matching your query,
    or the payments have not been associated with the batch yet. Verify the payout
    batch identifier, ensure the batch was created successfully, and confirm that
    items were added and not removed by validation. If you are filtering, check the
    date/status filters to ensure you are querying the correct environment (sandbox
    vs. production).
- code: BVNK:PAYMENT:0031
  message: Could not find specific payout batch
  description: The payout batch could not be located. The batch identifier may be
    invalid, belong to another account, or the batch may have been archived/expired.
    Double-check the batch ID/token and your account permissions, then try again.
    If the batch was created recently, allow a short delay and retry.
- code: BVNK:PAYMENT:0032
  message: Cannot delete a single payout from a batch, as it has started processing
    already
  description: Once batch processing has started, individual payouts become immutable.
    Deletions are only permitted while the batch is in a pre‑processing state. To
    remove items, cancel the whole batch if supported, or create a new batch without
    the unwanted payout.
- code: BVNK:PAYMENT:0033
  message: Cannot update a single payout from a batch, as it has started processing
    already
  description: Individual payout updates are blocked after batch processing begins.
    Modify items only before submission. If you need changes, cancel the batch (where
    supported) and recreate it with corrected payout details, or submit a follow‑up
    adjustment as a new payout.
- code: BVNK:FEES:0001
  message: Invalid wallet selected on client request.
  description: The wallet selected in the client request is invalid. Check that the
    wallet identifier is correctly formatted and belongs to a valid wallet type.
- code: BVNK:FEES:0002
  message: Provided wallet not found for a specific account.
  description: The system was unable to find the specified wallet associated with
    the requested account. Verify that the wallet exists and is correctly linked to
    the account.
- code: BVNK:FEES:0003
  message: Invalid customer fee wallet configuration.
  description: The customer fee wallet configuration contains invalid settings or
    parameters. Review and correct the fee wallet configuration in your account settings.
- code: MER-PAY-1000
  message: Not authorized to perform this action
  description: A user or merchant is not authorised to perform the requested action.
    This can occur due to insufficient permissions or invalid authentication credentials.
- 'MER-PAY-2000: Invalid parameter value'
- 'MER-PAY-2001: Amount x.xx <currency> failed is less than minimum limit of x.xx
  <currency>'
- 'MER-PAY-2002: Payment has no quote'
- 'MER-PAY-2003: Exchange quote <id> for payment <id> has status ACCEPTED so cannot
  be accepted'
- 'MER-PAY-2004: Payment has expired'
- 'MER-PAY-2005: Instruction validation failed message'
- 'MER-PAY-2006: Merchant not found'
- 'MER-PAY-2008: Payment not found'
- 'MER-PAY-2009: Invalid request message'
- 'MER-PAY-2010: A payment with reference <reference> already exists. Please enter
  a unique reference.'
- 'MER-PAY-2011: Currency <currency> is disabled'
- 'MER-PAY-2012: Insufficient funds'
- 'MER-PAY-2014: Exchange quote <id> for payment <id> can no longer be accepted as
  acceptance has expired'
- 'MER-PAY-2015: Crypto instruction not found for payment <id>'
- 'MER-PAY-2016: Merchant not authorised to perform this action'
- 'MER-PAY-2017: Cannot cancel payment with external id <id> and status PROCESSING'
- 'MER-PAY-2018: Resource modified by another request'
- 'MER-PAY-2019: Currency <currency> not found'
- 'MER-PAY-2024: protocol <protocol> not found for currency <currency>'
- 'MER-PAY-2025: Please enter your own wallet address, not the address that you paid
  into originally.'
- 'MER-PAY-2027: address <address> has failed validation for currency: <currency>,
  protocol: <protocol> and tag: <tag>'
- 'MER-PAY-2028: We couldn''t process your payout request to this address: <address>
  this time, please try another address.'
- 'MER-PAY-2029: Protocol with code <protocol> not found'
- 'MER-PAY-2030: Unable to find protocol <protocol> for currency code <currency>'
- 'MER-PAY-2031: Account not enabled for flow: <flow>. Please check your permissions
  or contact support for more information.'
- 'MER-PAY-2033: Multiple protocols found for currency <currency> Please specify which
  one to use: <protocols>.'
- 'MER-PAY-2035: mass payout data row validation failed'
- 'MER-PAY-2036: <rows> payments uploaded. This exceeds the maximum number of <max_rows>
  rows. Please reduce your file to <max_rows> rows.'
- 'MER-PAY-2037: Failed to process mass upload file. File name already exists.'
- 'MER-PAY-2038: Failed to process mass upload file. File is required.'
- 'MER-PAY-2039: Failed to process mass upload file. One of Merchant id or Wallet
  id fields have to be provided.'
- 'MER-PAY-2040: Failed to process mass upload file. Header is invalid.'
- 'MER-PAY-2041: Deleting mass payout item with status CREATED is not allowed.'
- 'MER-PAY-2042: Updating mass payout item with status <status> is not allowed.'
- 'MER-PAY-2043: One of merchantId or walletId properties have to be provided, both
  are missing'
- 'MER-PAY-2044: network <network> not found'
- 'MER-PAY-2045: Payout details currency <currency> and network <network> mismatch
  from previously provided currency <currency> and network <network>'
- 'MER-PAY-2046: protocol not found for currency <currency> and network <network>'
- 'MER-PAY-2047: Estimate cannot be modified. Payment with uuid <uuid> already created
  for estimate <estimate id>.'
- 'MER-PAY-2048: Failed to process mass upload file. File is empty.'
- 'MER-PAY-2049: Recipient address is not associated with a contact. You will assign
  or add a contact to it on the next step.'
- 'MER-PAY-2050: Recipient address is associated with more than 1 contact. You''ll
  be asked to choose which contact to use for this transaction.'
- 'MER-PAY-2051: Crypto account <crypto account> is not verified. Please verify your
  crypto account before using it'
- 'MER-PAY-2052: This country is unavailable. If you require this region, please reach
  out to your account manager.'
- 'MER-PAY-2053: The payment can not be processed.'
- 'MER-PAY-2054: Payment direction ''IN'' is not compatible with flow ''EMBEDDED_CRYPTO'''
- 'MER-PAY-2055: mesh client invalid request message'
- 'MER-PAY-2056: Customer not found for reference: <customer reference>'
- 'MER-PAY-2057: required header missing'
- 'MER-PAY-2058: Cannot confirm/accept payment <uuid> as it has been cancelled'
- 'MER-PAY-2059: Wallet with ID <walletId> not found'
- 'BVNK:LEDGER:5001: Wallet not found'
- 'BVNK:LEDGER:5050: Wallet balance not found'
- 'BVNK:LEDGER:5040: Bad Request'
- 'BVNK:LEDGER:5051: Wallet creation failed'
- 'MER-PAY-5001: The requested wallet could not be located in the system.'
- 'MER-PAY-5050: The system could not retrieve balance information for the specified
  wallet.'
- 'MER-PAY-5040: The request contained invalid data, malformed parameters, or violated
  validation constraints.'
- 'MER-PAY-5051: The wallet creation process failed to complete successfully.'
- 'bvnk:payment:rules:5001: Feature not implemented'
- 'bvnk:payment:rules:5003: Wallet validation error'
- 'bvnk:payment:rules:5004: Internal error'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check input that is causing the error'
- '500 Unexpected Error: Check exception message for details'
- '400 Bad Request: Check the input causing the error'
- '500 Unexpected Error: Check the error message for details'
- '400 Bad Request: Check the input that is causing the error'
- '404 Not Found: Check the status or definition of the error'
- '500 Unexpected Error: Review the exception message'
- '400 Bad Request: Invalid input causing the error'
- '404 Not Found: Resource not found'
- '500 Unexpected Error: Internal server error'
- '400 Bad Request: Check input causing the error'
- '500 Unexpected Error: Check error document for details'
- 'VALIDATION: The request is invalid.'
- 'FORBIDDEN: Expected error when requested resource does not exist'
- 'INTERNAL_ERROR: Something unexpected occurred.'
- '400 Bad Request: Check input parameters'
- '500 Unexpected Error: Check error message for details'
- '500 Unexpected Error: Review the error status or definition'
- '400 Bad Request: used to get internationalisation translation'
- '500 Unexpected Error: used to get internationalisation translation'
- '400 Bad Request: Check the input parameters'
- '500 Unexpected Error: Refer to the error document for more information'
- 404 Not Found
- '400 Bad Request: Validation error example'
- 403 Forbidden - Authorization token not found
- 404 Not Found - Wallet not found
- 422 Unprocessable Entity - Invalid input parameters
- 400 Bad request - Invalid query parameters
- 400 Bad request - Invalid input parameters
- 409 Conflict - Report schedule already exists for this user
- '400: Bad Request'
- '404: Not Found'
- 400 Bad request.
- 403 Forbidden.
- 404 Not found
- 400 Bad request
- 403 Forbidden
- 404 Not found.
- '400 Bad request: Error code representing the specific error type.'
- '403 Forbidden: Error code representing the specific error type.'
- 401 Unauthorized
- 401 Unauthorized - Invalid authentication
- '400: Bad request (e.g., expired confirmation window)'
- '404: Transaction not found'
- 401 Unauthorized.
- '400: Bad request.'
- '401: Unauthorized.'
- '403: Forbidden.'
- 400 Estimate could not be produced because the pay-in is not refundable or the amount
  is invalid.
- 200 successful operation
- 404 The specified resource was not found
- 400 Bad request — missing or invalid data.
- '401: Unauthorized'
- '404: The specified resource was not found'
- VALIDATION - The request is invalid.
- FORBIDDEN - Expected error when requested resource does not exist
- INTERNAL_ERROR - Something unexpected occurred.
- '400 Bad Request: Check input parameters for errors'
- '500 Unexpected Error: Check API status'
- '400: Invalid or missing `codes` parameter.'
- '400: Validation error (e.g., unknown codes, missing required answers).'
- '404: Customer reference not found.'
- '400: Missing `customerReference` parameter.'
- '400 Bad Request: This is used to get internationalisation translation'
- '500 Unexpected Error: This is used to get internationalisation translation'
- '400: Bad request'
- '403: Forbidden'
- '404 Not found: Payout Not Found'
- '400 Bad request: Industry reference does not exist'
- 400 Invalid or missing `codes` parameter.
- Webhook retry policy will kick in if BVNK does not receive a 200 status code.
- Callback endpoints might occasionally receive the same event more than once.
- 'Invalid webhook signature: Signature mismatch'
- Invalid JSON in webhook payload
- 'BAD_REQUEST: Invalid request'
- 'ACCOUNTS-2000: Industry with reference does not exist'
- 'DOCUMENTS-4000: Invalid document content'
- '400 Bad Request: Ensure all required fields are provided in the request.'
- '404 Not Found: Check if the customerReference is valid.'
- '401 Unauthorized: Verify OAuth token validity.'
- '400 Bad Request: Check parameters for correctness.'
- '404 Not Found: Ensure the endpoint exists.'
- '401 Unauthorized: Verify authentication credentials.'
- 'PENDING_APPROVAL: Payout requires approvals.'
- 'PROCESSING: Payout is being processed.'
- 'COMPLETED: Payout has been completed.'
- 'FAILED: Payout could not be completed.'
- 'CANCELLED: Payout has been cancelled.'
- 'RETURNED: Funds have been returned.'
- 'ON_HOLD: Payout is on hold due to screening.'
- Invalid bank details will lead to a payout request rejection.
- 'insufficient funds: Return an ''insufficient funds'' error to the user.'
- 'invalidPayout: Invalid Instruction for Payout'
- 'unique: Duplicate Reference'
- 'MER-PAY-2012: insufficient funds'
- '200 OK: Successful request.'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Recheck OAuth credentials.'
- 'Invalid bank details: Ensure account number and bank code are correct.'
- '400 Bad Request: Detailed message explaining the reason for the failure if the
  refund cannot be completed.'
- 'bvnk:payment:rules:4002: Address validation error'
- '400: The payout has validation errors.'
- 'Invalid bank details provided: Check bank code or account number.'
- '400: Invalid verificationId or expired session'
- '202: Further confirmation needed'
- Ensure correct handling of duplicate events.
auth_info:
  mentioned_objects:
  - WebhookVerifier
  - webhook_secret_key
client:
  base_url: https://api.sandbox.bvnk.com
  auth:
    type: hawk
    algorithm: HmacSHA256
source_metadata: null
