resources:
- name: merge_entries
  endpoint:
    path: /data/merge/{{entryTypeId}}
    method: POST
    data_selector: body
    params: {}
- name: cells
  endpoint:
    path: /data/cells
    method: GET
    data_selector: records
- name: rows
  endpoint:
    path: /data/rows
    method: GET
    data_selector: records
- name: entry_types
  endpoint:
    path: /docs/schema/entrytypes/all_entry_types
    method: GET
    data_selector: apiName
    params: {}
- name: entry_type_by_id
  endpoint:
    path: /docs/schema/entrytypes/entry_type_id
    method: GET
    data_selector: apiName
    params: {}
- name: fields
  endpoint:
    path: /docs/schema/fields/all_fields
    method: GET
- name: fields_by_entry_type
  endpoint:
    path: /docs/schema/fields/entry_type_fields
    method: GET
- name: fields_by_id
  endpoint:
    path: /docs/schema/fields/field_id
    method: GET
- name: multiple_fields_by_id
  endpoint:
    path: /docs/schema/fields/fields
    method: GET
- name: choice_field_values
  endpoint:
    path: /docs/schema/fields/choice_field_values
    method: POST
- name: entries
  endpoint:
    path: /docs/data/cells/entries
    method: GET
- name: filter
  endpoint:
    path: /docs/data/cells/filter
    method: GET
- name: get
  endpoint:
    path: /docs/data/cells/get
    method: GET
- name: postput
  endpoint:
    path: /docs/data/cells/postput
    method: POST
- name: query
  endpoint:
    path: /docs/data/rows/query
    method: POST
- name: get
  endpoint:
    path: /docs/data/rows/get
    method: GET
- name: create
  endpoint:
    path: /docs/data/rows/post
    method: POST
- name: update
  endpoint:
    path: /docs/data/rows/patchput
    method: PUT
- name: views
  endpoint:
    path: /docs/data/rows/view
    method: GET
- name: get_data_from_view
  endpoint:
    path: /docs/data/rows/get_view_data
    method: GET
- name: entryfiles
  endpoint:
    path: /data/entryfiles/{{entryId}}/fields/{{fieldId}}
    method: GET
    data_selector: value
    params: {}
- name: entrydata
  endpoint:
    path: /data/entrydata/get
    method: POST
    data_selector: value
    params:
      wrapIntoArrays: 'true'
- name: delete_entry
  endpoint:
    path: /data/entrydata/{{entryTypeId}}
    method: DELETE
    data_selector: entryId
    params:
      entryTypeId: path
      body: Array[integer]
- name: user
  endpoint:
    path: /management/user
    method: GET
    data_selector: records
    params: {}
- name: user_group
  endpoint:
    path: /management/user_groups
    method: GET
    data_selector: records
    params: {}
- name: create_user
  endpoint:
    path: /management/user
    method: POST
    data_selector: ''
    params: {}
- name: user
  endpoint:
    path: /management/user
    method: GET
    data_selector: users
    params:
      modifiedSince: '2019-07-15T15:53:00.050Z'
      email: user@firm.com
      userGroupID: 1
      pageNumber: 1
      pageSize: 10
- name: users
  endpoint:
    path: /management/user
    method: POST
    data_selector: records
    params:
      body: int[]
- name: update_user
  endpoint:
    path: /management/user
    method: PUT
    data_selector: null
    params: {}
- name: delete_user
  endpoint:
    path: /api/rest/v1/management/user/{{userId}}
    method: DELETE
    data_selector: none
    params:
      userId: integer
- name: user_group
  endpoint:
    path: /management/user/group
    method: GET
    data_selector: ''
    params:
      pageNumber: 1
      pageSize: 1000
- name: user_group
  endpoint:
    path: /management/user/group/{{groupId}}
    method: GET
    data_selector: users
    params:
      groupId: integer
- name: create_user_proxy
  endpoint:
    path: /management/user/proxy
    method: POST
    data_selector: null
    params: {}
- name: user_proxy
  endpoint:
    path: /management/user/proxy
    method: GET
    params: {}
- name: invite_user
  endpoint:
    path: /management/user/invite
    method: POST
    data_selector: body
    params: {}
- name: user_activity
  endpoint:
    path: /management/user/activity
    method: POST
    data_selector: rows
    params: {}
- name: topics
  endpoint:
    path: /api/rest/v1/publication/topics
    method: GET
    data_selector: topics
- name: data_event
  endpoint:
    path: /docs/publications/types/data
    method: GET
    data_selector: records
- name: schema_event
  endpoint:
    path: /docs/publications/types/schema
    method: GET
    data_selector: records
- name: user_event
  endpoint:
    path: /docs/publications/types/user
    method: GET
    data_selector: records
- name: init_bootstrap
  endpoint:
    path: /publication/initbootstrap
    method: POST
    data_selector: ''
    params: {}
- name: request_backup
  endpoint:
    path: /docs/backups/request
    method: POST
- name: retrieve_backups
  endpoint:
    path: /docs/backups/list
    method: GET
- name: delete_backup
  endpoint:
    path: /docs/backups/delete
    method: DELETE
- name: request_backup
  endpoint:
    path: /api/rest/v4/backups/request
    method: POST
    data_selector: 204 No Content
    params: {}
- name: Retrieve Backups
  endpoint:
    path: /backups/list
    method: GET
- name: backups
  endpoint:
    path: /backups
    method: GET
    data_selector: model
- name: delete_backup
  endpoint:
    path: /api/rest/v4/backups/delete/{backup_name}
    method: POST
- name: emails
  endpoint:
    path: /emails
    method: POST
- name: meetings
  endpoint:
    path: /meetings
    method: POST
- name: status
  endpoint:
    path: /status
    method: GET
- name: settings
  endpoint:
    path: /settings
    method: GET
- name: emails
  endpoint:
    path: /ri/import/emails
    method: POST
    data_selector: ''
    params: {}
- name: meetings
  endpoint:
    path: /ri/import/meetings
    method: POST
    data_selector: ''
    params: {}
- name: user_status
  endpoint:
    path: /ri/import/status
    method: GET
    data_selector: '[]'
    params:
      userIds: optional
- name: settings
  endpoint:
    path: /ri/import/settings
    method: GET
    data_selector: '[]'
- name: Attachment
  endpoint:
    path: /data/entrydata/attachment
    method: POST
    data_selector: storeRequests
    params: {}
- name: Deal
  endpoint:
    path: /schema/entrytypes/Deal/fields
    method: GET
    data_selector: fields
    params: {}
- name: Deals
  endpoint:
    path: /data/entrydata/Deals
    method: POST
    data_selector: storeRequests
- name: audit_trail
  endpoint:
    path: /publications/topics
    method: GET
    data_selector: topics
- name: poll_events
  endpoint:
    path: /publications/poll
    method: POST
    data_selector: auditTrailEvents
- name: Company
  endpoint:
    path: /services/data/vXX.X/sobjects/Company
    method: POST
    data_selector: records
- name: StockPrices
  endpoint:
    path: /services/data/vXX.X/sobjects/StockPrices
    method: POST
    data_selector: records
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
- name: currencies
  endpoint:
    path: /api/currencies
    method: GET
    data_selector: currencies
- name: objects
  endpoint:
    path: /api/objects
    method: GET
    data_selector: objects
- name: fields
  endpoint:
    path: /api/fields
    method: GET
    data_selector: fields
- name: schema
  endpoint:
    path: /api/schema
    method: GET
    data_selector: schema
- name: Company
  endpoint:
    path: /api/v1/Company
    method: GET
    data_selector: data
- name: cells
  endpoint:
    path: /data/cells
    method: GET
    data_selector: records
- name: rows
  endpoint:
    path: /data/rows
    method: GET
    data_selector: records
- name: files
  endpoint:
    path: /data/files
    method: GET
    data_selector: records
- name: user_management
  endpoint:
    path: /management
    method: GET
    data_selector: records
- name: currencies
  endpoint:
    path: /api/schema/currencies
    method: GET
    data_selector: currencies
- name: users
  endpoint:
    path: /api/schema/users
    method: GET
    data_selector: users
- name: objects
  endpoint:
    path: /api/schema/objects
    method: GET
    data_selector: objects
- name: fields
  endpoint:
    path: /api/schema/fields
    method: GET
    data_selector: fields
- name: schema
  endpoint:
    path: /api/schema
    method: GET
    data_selector: schema
- name: cells
  endpoint:
    path: /data/cells
    method: GET
    data_selector: records
- name: rows
  endpoint:
    path: /data/rows
    method: GET
    data_selector: records
- name: Company
  endpoint:
    path: /Client.Data.ReadObject
    method: GET
    data_selector: Rows
notes:
- You can have up to 10 entries in the mergeEntries array.
- You can have up to 100 entries in the request.
- This means with one request you are able to merge up to 1000 entries.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- 'Treat your API key like a password: do not share it or expose it in public code
  repositories.'
- Rotate your API key periodically and immediately if you suspect it has been compromised.
- Disable API access for users who no longer require it.
- Tokens expire after 900 seconds (15 minutes) and must be refreshed by repeating
  the flow.
- Use the largest limit value that is practical for your application to minimize the
  number of requests.
- Always check totalRecords to determine how many requests are needed.
- Handle empty rows arrays gracefully, as they indicate there are no more records
  to retrieve.
- Limits are applied on an endpoint basis.
- When a rate limit is exceeded, an HTTP 429 error will be triggered with a message
  similar to 'API calls quota exceeded! maximum admitted 5 per 1 second'.
- Requests to the Schema APIs are limited to 5 calls per second.
- By default, all date-time values are returned in UTC.
- To return date-times in the user's local time zone, add the dateTimeBehavior=1 query
  parameter to your request.
- If you want to remove a value from a field, use the endpoints for updating an entry
  and pass null or "" for the value of the field.
- If password is not provided, a password reset email will be sent to the user. (No
  email will be sent if IDM is enabled)
- Paging is supported, with a maximum page size of 1000.
- ID of users to get should be passed in the body as an array of integers.
- Authorization requires a Bearer token
- All parameters are optional.
- Max items to return do not exceed 1000.
- Users can be invited temporarily or permanently.
- Data is retained in topics for 9 days.
- You must provide the scope `publish` when calling the token endpoint to generate
  a token that is authorized to call the Publication APIs.
- Data events include updates, creations, and deletions of records.
- Schema events are infrequent and only consumed from the default-schema topic.
- User events are related to user and user group messages.
- Bootstrap allows you to do a full export of the existing data within DealCloud.
- Initiating a Bootstrap is an intensive & heavy operation as it is essentially a
  full data dump of your DealCloud data.
- A maximum of two backups can be generated per day.
- Must provide either apiName or object ids.
- Backup data is protected with a password-encrypted .zip file.
- The password itself is encrypted using the certificate provided.
- Email and Meeting data must be uploaded in chronological order
- Batch email and meeting posts are preferred over continuous API calls
- Concurrent execution of requests is not allowed. Limit of 5 requests per minute
  allowed
- Email data must be uploaded in chronological order.
- Each request can include up to 1,000 emails per enabled user and up to 50,000 emails
  in total.
- Meeting data must be uploaded in chronological order.
- Each request can include up to 100 meetings per enabled user and up to 5,000 meetings
  in total.
- All file attachments are stored in a dedicated object/entrylist called Attachments.
- The Title field is ID 2099 and the Document field is ID 2103.
- We recommend backlinking up to 500,000 or fewer total documents.
- Validate you can see the Audit trail topic by executing the GET Topics API endpoint.
- Use timeOut and count parameters in the poll API request.
- The DealCloud API allows you to query the schema of a given site.
- Only one of object_id or view_id can be populated
- No support is provided by Intapp for the Supplemental Software or the Company Integration.
- Some objects like Contact may return nulls in deeply nested fields
- Some objects may return nulls in deeply nested fields
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403 Forbidden: Missing scope or user group permissions'
- 'HTTP 429: API calls quota exceeded! maximum admitted 5 per 1 second'
- '401 - Unauthorized: A 401 Unauthorized error means the request lacks valid authentication
  credentials. This occurs if the authorization token has expired or if the API client
  ID or API key is invalid.'
- '403 - Forbidden: A 403 Forbidden error indicates that the server understood the
  request but refuses to authorize it. This usually happens when required user group
  permissions or scopes are missing, or if the API endpoint is incorrect.'
- '429 - Rate Limit Exceeded: A 429 error is received when a rate limit or throttling
  event has been met. The response may include a ''Retry-After'' header specifying
  the number of seconds to wait before retrying.'
- '415 - Unsupported Media Type: An unsupported media type error will be primary caused
  when no, or an invalid Content-Type header is sent in the payload.'
- '400 Bad Request: Field with Id does not exist'
- '404 Not Found: File not found'
- '200 OK: Successful deletion'
- '404 Not Found: Entry type or entry ID does not exist'
- 200 OK
- '200 OK: Successful request'
- '404 Not Found: Group ID does not exist'
- '400 Bad Request: DateTo should be greater than DateFrom.'
- '204 No Content: Backup request successful'
- '200 OK: Request successful'
- '401 Unauthorized: Cannot perform the action. User capabilities are required: AccessRiWebService'
- '400 Bad Request: API must be selected as the Exchange connection type to use this
  API endpoint'
- '400 Bad Request: Email or Event collection must be enabled to use this API endpoint'
- 'Attempting to upload files to fields that are not ''fieldType'': 13 will result
  in error.'
- Having the wrong object and field IDs in any of the requests
- Attempting to upload files to an incorrect type of field. Note, file uploads are
  only possible to a binary field type, which is fieldType 13
- Attmepting to upload files directly to an Attachment field in a random object. Remember,
  files must first be uploaded to the right field in the Attachments system list,
  then referenced to any other necessary list.
- 'KeyError: "mapping error, could not map: [''UnmappableColumn'']"'
- 'ERROR: Primary Key error on object: {object}, record found without ''EntryId''
  field.'
auth_info:
  mentioned_objects:
  - Client
client:
  base_url: '{{host}}/api/rest/v1'
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
