resources:
- name: payment_token
  endpoint:
    path: /payment/token
    method: POST
- name: account_verification
  endpoint:
    path: /account/verification
    method: POST
- name: card_verification
  endpoint:
    path: /card-verification
    method: POST
    data_selector: CardVerificationRequest
    params: {}
- name: payments
  endpoint:
    path: /public/reference/payments-intro
    method: GET
- name: checkouts
  endpoint:
    path: /public/reference/postcheckouts
    method: GET
- name: payment_links
  endpoint:
    path: /public/reference/postpaymentlinks
    method: GET
- name: sca_exemptions
  endpoint:
    path: /public/reference/sca-exemptions-intro
    method: GET
- name: disputes
  endpoint:
    path: /public/reference/disputes-intro
    method: GET
- name: funding_rejects
  endpoint:
    path: /public/reference/rejects-intro
    method: GET
- name: financial_adjustments
  endpoint:
    path: /public/reference/adjustments-introduction
    method: GET
- name: transactional_data
  endpoint:
    path: /public/reference/transactional-data-intro
    method: GET
- name: statements
  endpoint:
    path: /public/reference/statements-intro
    method: GET
- name: generate_message_signature_v1
  endpoint:
    path: /api/generate_message_signature_v1
    method: POST
- name: make_card_payment
  endpoint:
    path: /api/make_card_payment
    method: POST
- name: look_up_card_information
  endpoint:
    path: /api/look_up_card_information
    method: GET
- name: refund_transaction
  endpoint:
    path: /api/refund_transaction
    method: POST
- name: generate_message_signature_v2
  endpoint:
    path: /api/generate_message_signature_v2
    method: POST
- name: get_todays_authorisations
  endpoint:
    path: /api/get_todays_authorisations
    method: GET
- name: checkout
  endpoint:
    path: /checkouts
    method: POST
- name: payment_link
  endpoint:
    path: /payment-links
    method: POST
- name: dispute
  endpoint:
    path: /get-disputes
    method: GET
- name: funding_reject
  endpoint:
    path: /getfundingrejects
    method: GET
- name: transaction
  endpoint:
    path: /gettransactions
    method: GET
- name: adjustment
  endpoint:
    path: /post-adjustment
    method: POST
- name: transaction
  endpoint:
    path: /public/reference/gettransactions
    method: GET
    data_selector: records
    params: {}
- name: authorisation
  endpoint:
    path: /public/reference/getauthorisations
    method: GET
    data_selector: records
    params: {}
- name: funding
  endpoint:
    path: /public/reference/getfundings
    method: GET
    data_selector: records
    params: {}
- name: statement
  endpoint:
    path: /public/reference/getstatements
    method: GET
    data_selector: records
    params: {}
- name: Hosted Payment Page
  endpoint:
    path: /public/v3.0/docs/payments-hpp-quickstart
    method: GET
- name: SOAP API
  endpoint:
    path: /public/v3.0/docs/payments-soap-api
    method: GET
- name: Nexo Acquirer API
  endpoint:
    path: /public/v3.0/docs/nexo-acquirer-protocol-v6
    method: GET
- name: Virtual Terminal
  endpoint:
    path: /public/v3.0/docs/virtual-terminal
    method: GET
- name: Checkout Solution
  endpoint:
    path: /public/v3.0/docs/payments-checkout-quickstart
    method: GET
- name: payments
  endpoint:
    path: /public/reference/payments-intro
    method: GET
- name: checkouts
  endpoint:
    path: /public/reference/postcheckouts
    method: GET
- name: payment_links
  endpoint:
    path: /public/reference/postpaymentlinks
    method: GET
- name: sca_exemptions
  endpoint:
    path: /public/reference/sca-exemptions-intro
    method: GET
- name: disputes
  endpoint:
    path: /public/reference/disputes-intro
    method: GET
- name: funding_rejects
  endpoint:
    path: /public/reference/rejects-intro
    method: GET
- name: financial_adjustments
  endpoint:
    path: /public/reference/adjustments-introduction
    method: GET
- name: transactional_data
  endpoint:
    path: /public/reference/transactional-data-intro
    method: GET
- name: statements
  endpoint:
    path: /public/reference/statements-intro
    method: GET
- name: address_verification_service
  endpoint:
    path: /public/docs/payments-address-verification-service
    method: GET
    data_selector: results
- name: test_cards
  endpoint:
    path: /public/docs/payments-test-cards
    method: GET
    data_selector: test_cards
    params: {}
- name: preauthorisation
  endpoint:
    path: /payments
    method: POST
    data_selector: approvedAmount
    params: {}
- name: preauthorisation_completion
  endpoint:
    path: /orders/:orderId
    method: POST
    data_selector: requestType
    params: {}
- name: void_transaction
  endpoint:
    path: /orders/{orderId}
    method: POST
    data_selector: response
    params: {}
- name: return_transaction
  endpoint:
    path: /orders/{orderId}
    method: POST
    data_selector: response
    params: {}
- name: transaction_completion
  endpoint:
    path: /transaction/completion
    method: PATCH
    data_selector: response
    params: {}
- name: authentication_request
  endpoint:
    path: /authentication/request
    method: POST
    data_selector: request
    params: {}
- name: authenticationRequest
  endpoint:
    path: /payment/authentication
    method: POST
    data_selector: authenticationRequest
    params: {}
- name: authenticationResponse
  endpoint:
    path: /payment/authentication/response
    method: POST
    data_selector: authenticationResponse
    params: {}
- name: methodNotification
  endpoint:
    path: /payment/methodNotification
    method: POST
    data_selector: methodNotification
    params: {}
- name: credit_naked_refund
  endpoint:
    path: /payments
    method: POST
    data_selector: transactionResponse
    params: {}
- name: sale_transaction
  endpoint:
    path: /payments
    method: POST
    data_selector: transactionResponse
    params: {}
- name: encrypted_apple_pay
  endpoint:
    path: /payments
    method: POST
    data_selector: walletPaymentMethod
    params: {}
- name: decrypted_apple_pay
  endpoint:
    path: /payments
    method: POST
    data_selector: walletPaymentMethod
    params: {}
- name: createToken
  endpoint:
    path: /payments/createToken
    method: POST
    data_selector: createTokenResponse
    params: {}
- name: payment_token_sale_transaction
  endpoint:
    path: /public/reference/submitprimarytransaction
    method: POST
    data_selector: transaction
    params:
      requestType: PaymentTokenSaleTransaction
- name: Delete Alias
  endpoint:
    path: /services/payment-tokens/{TokenID}
    method: DELETE
    data_selector: ''
    params:
      payment-method: BLIK
      storeId: '{storeId}'
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: transaction
    params: {}
- name: card_verification
  endpoint:
    path: /card-verification
    method: POST
    data_selector: transactionStatus
    params: {}
- name: wallet_sale_transaction
  endpoint:
    path: /payments
    method: POST
    data_selector: transactionResponse
- name: strong_customer_authentication
  endpoint:
    path: /payments/{{ipgTransactionId}}
    method: PATCH
    data_selector: transactionResponse
- name: exchange_rates
  endpoint:
    path: /exchange-rates
    method: POST
    data_selector: exchangeRateDetails
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: currencyConversion
    params: {}
- name: payment_tokens
  endpoint:
    path: /payment-tokens
    method: POST
    data_selector: paymentToken
- name: PaymentTokenSaleTransaction
  endpoint:
    path: /payments/tokenSale
    method: POST
    data_selector: requestType
    params: {}
- name: PaymentTokenDetails
  endpoint:
    path: /payments/tokenDetails
    method: GET
    data_selector: paymentToken
    params: {}
- name: primary_transaction
  endpoint:
    path: /submitprimarytransaction
    method: POST
    data_selector: request
    params:
      requestType: WalletSaleTransaction
- name: gateway
  endpoint:
    path: /
    method: POST
    data_selector: response
    params:
      gateway: fiservipg
- name: guest_checkout_token
  endpoint:
    path: /services/payment-tokens/guestcheckoutTokencryptogram
    method: POST
    data_selector: guestCheckoutToken
    params: {}
- name: payment
  endpoint:
    path: /services/payments/
    method: POST
    data_selector: transactionResponse
    params: {}
- name: ApmSaleTransaction
  endpoint:
    path: /public/docs/ideal-20
    method: POST
    data_selector: transactionResponse
- name: payment_status_inquiry
  endpoint:
    path: /payments/{ipgTransactionID}
    method: GET
    data_selector: transactionResponse
    params: {}
- name: debtor_token
  endpoint:
    path: /debtor/token
    method: POST
    data_selector: transactionResponse
    params: {}
- name: fast_checkout
  endpoint:
    path: /fast/checkout
    method: POST
    data_selector: transactionResponse
    params: {}
- name: airline
  endpoint:
    path: /airline
    method: POST
    data_selector: industrySpecificExtensions.airline
    params: {}
- name: redirect_url
  endpoint:
    path: /managed-redirect
    method: POST
    data_selector: redirectURL
- name: first_credentials_on_file_transaction
  endpoint:
    path: /payments/transaction
    method: POST
    data_selector: transactionResponse
- name: payment_tokens
  endpoint:
    path: /services/payment-tokens
    method: POST
    data_selector: paymentToken
- name: payment_tokens
  endpoint:
    path: /services/payment-tokens/{paymentTokenValue}
    method: GET
    data_selector: paymentToken
    params: {}
- name: payment_tokenization
  endpoint:
    path: /services/payment-tokens
    method: POST
    data_selector: paymentToken
    params:
      requestType: PaymentCardPaymentTokenizationRequest
      storeId: '330995118'
      accountVerification: false
- name: payment_sale
  endpoint:
    path: /services/payments
    method: POST
    data_selector: paymentToken
    params:
      requestType: PaymentCardSaleTransaction
      storeId: '330995118'
      transactionOrigin: ECOM
- name: transactions
  endpoint:
    path: /public/docs/payment-facilitator
    method: POST
    data_selector: transaction
    params: {}
- name: payment_url
  endpoint:
    path: /payment-url
    method: POST
    data_selector: paymentUrl
    params: {}
- name: Full Redirect
  endpoint:
    path: /path/to/full/redirect
    method: POST
    data_selector: integrationData
    params:
      requestType: ApmSaleTransaction
- name: payments
  endpoint:
    path: /ipgrestapi/v2/services/payments
    method: POST
    data_selector: transactions
    params: {}
- name: payment_details
  endpoint:
    path: /ipgrestapi/v2/services/payments/apm/
    method: GET
    data_selector: transactions
    params: {}
- name: payments
  endpoint:
    path: /ipgrestapi/v2/services/payments
    method: POST
    data_selector: transactionResponse
    params: {}
- name: payment_status
  endpoint:
    path: /ipgrestapi/v2/services/payments/apm/
    method: GET
    data_selector: transactionResponse
    params: {}
- name: cancel_billing_agreement
  endpoint:
    path: /payments/apm/
    method: POST
    data_selector: null
    params: {}
- name: recurring_payment
  endpoint:
    path: /payments
    method: POST
    data_selector: null
    params: {}
- name: payment_schedules
  endpoint:
    path: /payment-schedules
    method: POST
    data_selector: response
    params: {}
- name: view_subscription
  endpoint:
    path: /payment-schedules/{orderId}
    method: GET
    data_selector: response
    params: {}
- name: recurring_first_transaction
  endpoint:
    path: /recurring/first
    method: POST
    data_selector: request
    params: {}
- name: recurring_subsequent_transaction
  endpoint:
    path: /recurring/subsequent
    method: POST
    data_selector: request
    params: {}
- name: recurring_first_transaction_3ds
  endpoint:
    path: /recurring/first/3ds
    method: POST
    data_selector: request
    params: {}
- name: payer_auth
  endpoint:
    path: /PaymentCardPayerAuthTransaction
    method: POST
    data_selector: request
    params: {}
- name: otp_verification
  endpoint:
    path: /otpVerificationResponse
    method: PATCH
    data_selector: authenticationResponse
    params: {}
- name: sale_request
  endpoint:
    path: /PaymentCardSaleTransaction
    method: POST
    data_selector: request
    params: {}
- name: payer_auth_transaction
  endpoint:
    path: /api/payerauth
    method: POST
    data_selector: request
    params: {}
- name: sale_transaction
  endpoint:
    path: /api/sale
    method: POST
    data_selector: request
    params: {}
- name: SepaCreditTransaction
  endpoint:
    path: /transactions/sepa_credit
    method: POST
    data_selector: transactionResponse
- name: SepaSaleTransaction
  endpoint:
    path: /public/reference/submitprimarytransaction
    method: POST
    data_selector: ''
- name: paymentCard
  endpoint:
    path: /paymentCard
    method: POST
    data_selector: paymentMethod.paymentCard
- name: paymentCardProtected
  endpoint:
    path: /paymentCardProtected
    method: POST
    data_selector: paymentMethod.paymentCardProtected
- name: ReversalReason
  endpoint:
    path: /reversalReason
    method: POST
    data_selector: reversalReason
- name: terminalRequestData
  endpoint:
    path: /transactions/terminalRequestData
    method: POST
    data_selector: data
    params:
      posEntryMode: mandatory
      offlineVerificationMethod: mandatory
      cardholderPresentIndicator: optional
      cardPresentIndicator: optional
      singleTapPinPerformed: optional
      offlineIndicator: optional
      onlineReason: optional
      attendanceContext: optional
      emvData: conditional
      approvalCode: conditional
- name: pointOfSaleDevice
  endpoint:
    path: /devices/pointOfSaleDevice
    method: POST
    data_selector: data
    params:
      terminalProvider: mandatory
      serialNumber: mandatory
      softwareProvider: optional
      softwareVersion: optional
      model: mandatory
- name: inquiry_request
  endpoint:
    path: /v2/services/orders/{orderId}
    method: GET
    data_selector: transactionStatus
    params: {}
- name: installment_plans
  endpoint:
    path: /installment/plans
    method: POST
    data_selector: installmentPlans
    params: {}
- name: payment_transaction
  endpoint:
    path: /payment/transaction
    method: POST
    data_selector: transactionResponse
    params: {}
- name: SOAPRequest
  endpoint:
    path: ''
    method: POST
    data_selector: SOAP-ENV:Envelope
    params: {}
- name: Sale
  endpoint:
    path: /ipgapi/schemas/v1/Sale
    method: POST
    data_selector: Transaction
    params: {}
- name: Preauthorisation
  endpoint:
    path: /ipgapi/schemas/v1/PreAuth
    method: POST
    data_selector: Transaction
    params: {}
- name: Postauthorisation
  endpoint:
    path: /ipgapi/schemas/v1/PostAuth
    method: POST
    data_selector: Transaction
    params: {}
- name: Return
  endpoint:
    path: /ipgapi/schemas/v1/Return
    method: POST
    data_selector: Transaction
    params: {}
- name: Credit
  endpoint:
    path: /ipgapi/schemas/v1/Credit
    method: POST
    data_selector: Transaction
    params: {}
- name: Void
  endpoint:
    path: /ipgapi/schemas/v1/Void
    method: POST
    data_selector: Transaction
    params: {}
- name: IPGApiOrderRequest
  endpoint:
    path: /ipgapi/IPGApiOrderRequest
    method: POST
    data_selector: v1:Transaction
    params: {}
- name: IPGApiOrderResponse
  endpoint:
    path: /ipgapi/IPGApiOrderResponse
    method: GET
    data_selector: ipgapi:IPGApiOrderResponse
    params: {}
- name: transaction_approval
  endpoint:
    path: /ipgapi/TransactionApproval
    method: POST
    data_selector: ipgapi:IPGApiOrderResponse
    params: {}
- name: transaction_failure
  endpoint:
    path: /ipgapi/TransactionFailure
    method: POST
    data_selector: ipgapi:IPGApiOrderResponse
    params: {}
- name: void_transaction
  endpoint:
    path: /public/docs/generic-transaction-type-for-voids-and-returns-soap-api
    method: POST
    data_selector: SubsequentTransaction
    params: {}
- name: return_transaction
  endpoint:
    path: /public/docs/generic-transaction-type-for-voids-and-returns-soap-api
    method: POST
    data_selector: SubsequentTransaction
    params: {}
- name: partial_authorisation
  endpoint:
    path: /ipgapi/partial_authorisation
    method: POST
    data_selector: ipgapi:IPGApiOrderResponse
    params: {}
- name: return
  endpoint:
    path: /ipgapi/return
    method: POST
    data_selector: ipgapi:IPGApiOrderResponse
    params: {}
- name: sale_transaction
  endpoint:
    path: /ipgapi/schemas/ipgapi
    method: POST
    data_selector: ipgapi:IPGApiOrderRequest
    params:
      AllowPartialApproval: 'true'
- name: GetLastTransactions
  endpoint:
    path: /GetLastTransactions
    method: POST
    data_selector: TransactionValues
    params:
      count: '2'
- name: GetLastTransactionsById
  endpoint:
    path: /GetLastTransactions
    method: POST
    data_selector: TransactionValues
    params:
      count: '2'
      OrderId: A-eb65437a-c538-4cdd-82b3-d316ae160c22
      TDate: '1407373211'
- name: InitiateClearing
  endpoint:
    path: /ipgapi/InitiateClearing
    method: POST
    data_selector: ipgapi:IPGApiActionResponse
    params: {}
- name: InquiryOrder
  endpoint:
    path: /ipgapi/InquiryOrder
    method: POST
    data_selector: ipgapi:IPGApiActionResponse
    params: {}
- name: InquiryTransaction
  endpoint:
    path: /ipgapi/InquiryTransaction
    method: POST
    data_selector: ipgapi:IPGApiActionResponse
    params: {}
- name: GetLastOrders
  endpoint:
    path: /ipgapi/GetLastOrders
    method: POST
    data_selector: ipgapi:IPGApiActionResponse
    params: {}
- name: GetExternalTransactionState
  endpoint:
    path: /public/docs/external-transaction-status
    method: GET
    data_selector: transactionState
    params: {}
- name: SendEMailNotification
  endpoint:
    path: /public/docs/trigger-email-notifications
    method: POST
    data_selector: ns2:SendEMailNotification
    params: {}
- name: card_information
  endpoint:
    path: /public/docs/card-information-inquiry
    method: POST
    data_selector: CardInformation
    params: {}
- name: basket_information
  endpoint:
    path: /public/docs/basket-information-and-product-catalogue
    method: GET
    data_selector: Basket
    params: {}
- name: ManageProducts
  endpoint:
    path: /ManageProducts
    method: POST
    data_selector: Product
    params: {}
- name: ManageProductStock
  endpoint:
    path: /ManageProductStock
    method: POST
    data_selector: ProductStock
    params: {}
- name: SaleTransaction
  endpoint:
    path: /SaleTransaction
    method: POST
    data_selector: Transaction
    params: {}
- name: authentication
  endpoint:
    path: /api/authentication
    method: POST
    data_selector: transaction
    params: {}
- name: IPGApiOrderRequest
  endpoint:
    path: /ipg-api/order
    method: POST
    data_selector: SOAP-ENV:Body/ns4:IPGApiOrderRequest/ns2:Transaction
    params: {}
- name: IPGApiOrderResponse
  endpoint:
    path: /ipg-api/order/response
    method: GET
    data_selector: SOAP-ENV:Body/ipgapi:IPGApiOrderResponse
    params: {}
- name: IPGApiOrderRequest
  endpoint:
    path: /schemas/ipgapi
    method: POST
    data_selector: IPGApiOrderRequest
    params: {}
- name: IPGApiOrderResponse
  endpoint:
    path: /schemas/ipgapi
    method: GET
    data_selector: IPGApiOrderResponse
    params: {}
- name: IPGApiOrderRequest
  endpoint:
    path: /ipgapi/schemas/ipgapi
    method: POST
    data_selector: Transaction
    params: {}
- name: IPGApiOrderResponse
  endpoint:
    path: /ipgapi/schemas/ipgapi
    method: GET
    data_selector: ApprovalCode
    params: {}
- name: payerAuth
  endpoint:
    path: /IPGApiOrderRequest
    method: POST
    data_selector: Transaction
    params: {}
- name: payerAuth
  endpoint:
    path: /payerAuth
    method: POST
    data_selector: Transaction
    params: {}
- name: sale
  endpoint:
    path: /sale
    method: POST
    data_selector: Transaction
    params: {}
- name: IPGApiOrderRequest
  endpoint:
    path: /ipg-online.com/ipgapi/schemas/ipgapi
    method: POST
    data_selector: SOAP-ENV:Body/ns4:IPGApiOrderRequest
    params: {}
- name: transaction_request
  endpoint:
    path: /ipg-online.com/ipgapi/schemas/ipgapi
    method: POST
    data_selector: Transaction
    params: {}
- name: transaction_response
  endpoint:
    path: /ipg-online.com/ipgapi/schemas/ipgapi
    method: GET
    data_selector: TransactionResult
    params: {}
- name: StoreHostedData
  endpoint:
    path: /ipgapi/schemas/ipgapi
    method: POST
    data_selector: DataStorageItem
    params: {}
- name: DeleteHostedData
  endpoint:
    path: /ipgapi/schemas/ipgapi
    method: POST
    data_selector: DataStorageItem
    params: {}
- name: DisplayStoredData
  endpoint:
    path: /ipgapi/schemas/ipgapi
    method: POST
    data_selector: DataStorageItem
    params: {}
- name: IPGApiOrderRequest
  endpoint:
    path: /ipgapi
    method: POST
    data_selector: Transaction
    params: {}
- name: IPGApiActionRequest
  endpoint:
    path: /ipgapi/action
    method: POST
    data_selector: Action
    params: {}
- name: exchange_rate_request_global_choice
  endpoint:
    path: /ipgapi/schemas/ipgapi/RequestCardRateForDCC
    method: POST
    data_selector: ipgapi:CardRateForDCC
    params:
      StoreId: '110994125'
      BIN: '402939'
      BaseAmount: '100.5'
- name: exchange_rate_request_dynamic_pricing
  endpoint:
    path: /ipgapi/schemas/ipgapi/RequestMerchantRateForDynamicPricing
    method: POST
    data_selector: ipgapi:MerchantRateForDynamicPricing
    params:
      StoreId: '110994125'
      ForeignCurrency: '826'
      BaseAmount: '100.5'
- name: IPGApiActionRequest
  endpoint:
    path: /ipgapi/schemas/ipgapi
    method: POST
    data_selector: IPGApiActionRequest
    params: {}
- name: IPGApiOrderRequest
  endpoint:
    path: /ipgapi/schemas/ipgapi
    method: POST
    data_selector: IPGApiOrderRequest
    params: {}
- name: Transaction
  endpoint:
    path: /ipgapi/Order
    method: POST
    data_selector: Transaction
    params: {}
- name: transaction
  endpoint:
    path: /ipgapi/Transaction
    method: POST
    data_selector: Transaction
    params: {}
- name: transaction
  endpoint:
    path: /schemas/ipgapi
    method: POST
    data_selector: SOAP-ENV:Body/ns4:IPGApiOrderRequest/ns2:Transaction
    params: {}
- name: network_token
  endpoint:
    path: /ipgapi/schemas/ipgapi
    method: POST
    data_selector: ipgapi:IPGApiActionResponse
    params: {}
- name: transaction
  endpoint:
    path: /public/docs/payment-facilitator
    method: POST
    data_selector: Transaction
    params: {}
- name: create_payment_url
  endpoint:
    path: /ipgapi/schemas/ipgapi
    method: POST
    data_selector: ipgapi:IPGApiActionResponse
- name: DeletePaymentURL
  endpoint:
    path: /ipgapi/schemas/ipgapi
    method: POST
    data_selector: SOAP-ENV:Body/ns5:IPGApiActionRequest/ns2:Action/ns2:DeletePaymentURL
    params: {}
- name: CreatePaymentURL
  endpoint:
    path: /ipgapi/schemas/ipgapi
    method: POST
    data_selector: SOAP-ENV:Body/ns5:IPGApiActionRequest/ns2:Action/ns2:CreatePaymentURL
    params: {}
- name: IPGApiOrderRequest
  endpoint:
    path: /ipg-online.com/ipgapi/schemas/ipgapi
    method: POST
    data_selector: Transaction
    params: {}
- name: Recurring Payment
  endpoint:
    path: /recurring-payments
    method: POST
    data_selector: transaction
    params: {}
- name: RecurringPayment
  endpoint:
    path: /ipgapi/schemas/ipgapi
    method: POST
    data_selector: Transaction
    params: {}
- name: payerauth
  endpoint:
    path: /ipgapi/OrderRequest
    method: POST
    data_selector: ipg:IPGApiOrderRequest
- name: sale
  endpoint:
    path: /ipgapi/OrderRequest
    method: POST
    data_selector: ipg:IPGApiOrderRequest
- name: payerauth
  endpoint:
    path: /payerauth
    method: POST
    data_selector: response
    params:
      AuthenticateTransaction: 'true'
      TermUrl: URL to redirect the result of the authentication
      CardHolderBrowserParameters:
        BrowserAcceptHeader: value
        BrowserIP: value
        BrowserLanguage: value
        BrowserUserAgent: value
- name: payerauth
  endpoint:
    path: /IPGApiOrderRequest
    method: POST
    data_selector: ipgapi:IPGApiOrderResponse
    params: {}
- name: sale
  endpoint:
    path: /IPGApiOrderRequest
    method: POST
    data_selector: ipgapi:IPGApiOrderResponse
    params: {}
- name: Sale
  endpoint:
    path: /ipgapi/transactions/sale
    method: POST
    data_selector: Transaction
    params: {}
- name: Void
  endpoint:
    path: /ipgapi/transactions/void
    method: POST
    data_selector: Transaction
    params: {}
- name: Credit
  endpoint:
    path: /ipgapi/transactions/credit
    method: POST
    data_selector: Transaction
    params: {}
- name: Return
  endpoint:
    path: /ipgapi/transactions/return
    method: POST
    data_selector: Transaction
    params: {}
- name: transaction_request
  endpoint:
    path: /ipgapi/transaction
    method: POST
    data_selector: Transaction
    params: {}
- name: Standing Instructions
  endpoint:
    path: /public/docs/standing-instructions
    method: POST
    data_selector: Transaction
    params: {}
- name: transaction
  endpoint:
    path: /ipg/online/api/v1/transactions
    method: POST
    data_selector: Transaction
    params: {}
- name: GetEligibleInstallmentPlans
  endpoint:
    path: /ipgapi/schemas/ipgapi
    method: POST
    data_selector: EligibleInstallmentPlanResponse
- name: IPGApiOrderRequest
  endpoint:
    path: /ipgapi/schemas/ipgapi
    method: POST
    data_selector: Transaction
- name: EMVRequestData
  endpoint:
    path: /ipgapi/EMVCardPresentRequest
    method: POST
    data_selector: v1:EMVCardPresentRequest
    params: {}
- name: EMVResponseData
  endpoint:
    path: /ipgapi/EMVCardPresentResponse
    method: GET
    data_selector: ipgapi:EMVResponseData
    params: {}
- name: IPGApiOrderRequest
  endpoint:
    path: /ipgapi/OrderRequest
    method: POST
    data_selector: ipg:IPGApiOrderRequest
    params: {}
- name: IPGApiOrderResponse
  endpoint:
    path: /ipgapi/OrderResponse
    method: POST
    data_selector: ipgapi:IPGApiOrderResponse
    params: {}
- name: payment_transaction
  endpoint:
    path: /payment/transaction
    method: POST
    data_selector: checkout
    params: {}
- name: status_update
  endpoint:
    path: /payment/status
    method: GET
    data_selector: status
    params: {}
- name: payment_transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: checkout
    params: {}
- name: webhooks
  endpoint:
    path: /checkouts
    method: POST
    data_selector: checkoutSettings.webHooksUrl
    params: {}
- name: transaction_inquiry
  endpoint:
    path: /checkouts/{checkoutId}
    method: GET
    data_selector: transactionStatus
    params: {}
- name: Supported Payment Methods
  endpoint:
    path: /public/docs/payment-methods
    method: GET
    data_selector: paymentMethods
    params: {}
- name: Supported Languages
  endpoint:
    path: /public/docs/languages-and-payment-methods-checkout
    method: GET
    data_selector: languages
    params: {}
- name: token_creation
  endpoint:
    path: /public/docs/data-vault-tokenisation
    method: POST
    data_selector: transaction
    params: {}
- name: Fast Checkout
  endpoint:
    path: /public/docs/ideal-20
    method: POST
    data_selector: paymentMethodDetails
    params: {}
- name: webhook_notification
  endpoint:
    path: /webhooks/notification
    method: POST
    data_selector: ''
    params: {}
- name: generate_payment_link
  endpoint:
    path: /generate-payment-link
    method: POST
    data_selector: paymentLink
    params: {}
- name: payment_link_details
  endpoint:
    path: /payment-link/{paymentLinkId}
    method: GET
    data_selector: paymentLink
    params: {}
- name: sale_and_preauthorization
  endpoint:
    path: /public/docs/sale-and-preauthorization
    method: GET
- name: complete_a_pre_authorisation
  endpoint:
    path: /public/docs/complete-a-pre-authorisation
    method: GET
- name: return_refund
  endpoint:
    path: /public/docs/return-refund
    method: GET
- name: void_reversal
  endpoint:
    path: /public/docs/void
    method: GET
- name: credit_naked_refund
  endpoint:
    path: /public/docs/credit-naked-refund
    method: GET
- name: order_lookup
  endpoint:
    path: /public/docs/order-details-manage-order
    method: GET
- name: order_management
  endpoint:
    path: /public/docs/manage-your-order
    method: GET
- name: void_transaction
  endpoint:
    path: /public/docs/void
    method: GET
- name: credit_transaction
  endpoint:
    path: /public/docs/credit-naked-refund
    method: POST
    data_selector: transaction
    params: {}
- name: order_transaction_history
  endpoint:
    path: /public/docs/order-details-manage-order
    method: GET
    data_selector: transactions
- name: completion
  endpoint:
    path: /public/docs/complete-a-pre-authorisation
    method: GET
    data_selector: transaction
    params: {}
- name: return
  endpoint:
    path: /public/docs/return-refund
    method: GET
    data_selector: refund
    params: {}
- name: void
  endpoint:
    path: /public/docs/void
    method: GET
    data_selector: transaction
    params: {}
- name: send_notification
  endpoint:
    path: /public/docs/send-notification
    method: POST
    data_selector: notification
    params: {}
- name: payment_form
  endpoint:
    path: /connect/gateway/processing
    method: POST
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /connect/gateway/processing
    method: POST
    data_selector: transactionData
    params: {}
- name: transaction
  endpoint:
    path: /connect/gateway/processing
    method: POST
    data_selector: transaction_details
    params:
      storename: '10123456789'
      timezone: Europe/London
      txntype: sale
      chargetotal: '13.00'
      currency: '978'
      checkoutoption: combinedpage
      hash_algorithm: HMACSHA256
- name: transaction
  endpoint:
    path: /connect/gateway/processing
    method: POST
    data_selector: ''
    params: {}
- name: payment_form
  endpoint:
    path: /connect/gateway/processing
    method: POST
    data_selector: form_data
    params: {}
- name: direct_post
  endpoint:
    path: /public/docs/payments-direct-post
    method: POST
    data_selector: transaction
    params: {}
- name: 3-D Secure
  endpoint:
    path: /3-d-secure
    method: POST
    data_selector: transaction
    params:
      authenticateTransaction: 'true'
      threeDSRequestorChallengeIndicator: '1'
      tokenCryptogram: AGX1lvbYlypcAAV22IGgADFA==
      cardnumber: 540215******2355
- name: Recurring Payment Scheduler
  endpoint:
    path: /recurring-payment-scheduler
    method: POST
    data_selector: recurringTransaction
    params:
      recurringInstallmentCount: 2
      recurringInstallmentPeriod: month
      recurringInstallmentFrequency: 1
- name: Network Tokenisation
  endpoint:
    path: /network-tokenisation
    method: POST
    data_selector: tokenTransaction
    params:
      tokenCryptogram: AGX1lvbYlypcAAV22IGgADFA==
      cardnumber: 540215******2355
- name: custom_fields
  endpoint:
    path: /public/docs/custom-fields
    method: GET
    data_selector: custom_fields
    params: {}
- name: transaction_response
  endpoint:
    path: /public/docs/response-fields
    method: GET
    data_selector: fields
- name: sale_transaction
  endpoint:
    path: /connect/gateway/processing
    method: POST
    data_selector: response
    params:
      txntype: sale
      checkoutoption: combinedpage
      timezone: Europe/Berlin
      hash_algorithm: HMACSHA256
      currency: '978'
      authenticateTransaction: 'true'
- name: payer_auth_transaction
  endpoint:
    path: /connect/gateway/processing
    method: POST
    data_selector: response
    params:
      txntype: payer_auth
      timezone: Europe/Berlin
      hash_algorithm: HMACSHA256
      currency: '978'
      authenticateTransaction: 'true'
- name: payment
  endpoint:
    path: /public/docs/apple-pay
    method: POST
    data_selector: transaction
    params:
      checkoutoption: combinedpage
      paymentMethod: applePay
- name: creating_token
  endpoint:
    path: /data-vault-tokenisation/creating-token
    method: POST
    data_selector: data
    params: {}
- name: using_token
  endpoint:
    path: /data-vault-tokenisation/using-token
    method: POST
    data_selector: data
    params: {}
- name: avoiding_duplicate_cardholder_data
  endpoint:
    path: /data-vault-tokenisation/avoiding-duplicate-cardholder-data
    method: POST
    data_selector: data
    params: {}
- name: fraud_score
  endpoint:
    path: /fraud-detect
    method: POST
    data_selector: fraudScore
    params: {}
- name: payment
  endpoint:
    path: /hosted/payment
    method: POST
    data_selector: response
    params:
      checkoutoption: combinedpage
      full_bypass: 'false'
      paymentMethod: giropay
- name: payment_request
  endpoint:
    path: /public/docs/guest-checkout-tokenization-rest-api
    method: POST
    data_selector: tokenCryptogram
    params: {}
- name: transaction_request
  endpoint:
    path: /public/docs/ideal-20
    method: POST
    data_selector: transaction
    params:
      checkoutoption: combinedpage
      storename: unique_store_name
      paymentMethod: ideal
      txntype: sale
      chargetotal: '12.34'
      currency: '978'
      responseFailURL: https://your-fail-url.com
      responseSuccessURL: https://your-success-url.com
- name: payment_methods
  endpoint:
    path: /public/docs/payments-local-payments
    method: GET
    data_selector: payment_methods
    params: {}
- name: SaleTransaction
  endpoint:
    path: /connect/gateway/processing
    method: POST
    data_selector: transaction
    params:
      txntype: sale
      timezone: America/New_York
      hash_algorithm: HMACSHA256
      checkoutoption: combinedpage
      currency: '840'
- name: money_transfer
  endpoint:
    path: /public/docs/payin
    method: POST
    data_selector: transaction
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: transaction_response
  endpoint:
    path: /public/docs/paypal-recurring-billing-agreement
    method: GET
    data_selector: response
    params: {}
- name: recurring_payments
  endpoint:
    path: /public/docs/recurring-scheduler
    method: POST
    data_selector: parameters
    params:
      recurringInstallmentCount: numeric; min 2 max 999
      recurringInstallmentPeriod: day, week, month, year
      recurringInstallmentFrequency: 'numeric: min 1 max 99'
- name: hosted_payment_page_localisations
  endpoint:
    path: /public/docs/hosted-payment-page-localisations
    method: GET
    data_selector: records
    params: {}
- name: payment_methods
  endpoint:
    path: /public/docs/payment-methods-2
    method: GET
    data_selector: payment_methods
    params: {}
- name: AcceptorAuthorisationRequest
  endpoint:
    path: /AcceptorAuthorisationRequest
    method: POST
    data_selector: Hdr
    params: {}
- name: cancellation_advice
  endpoint:
    path: /cancellation/advice
    method: POST
    data_selector: cancellationAdvice
    params: {}
- name: transaction
  endpoint:
    path: /acceptor/completion/advice
    method: POST
    data_selector: Tx
    params: {}
- name: reservation_cancellation
  endpoint:
    path: /AcceptorCompletionAdvice
    method: POST
    data_selector: response
    params: {}
- name: completion_cancellation
  endpoint:
    path: /CompletionCancellation
    method: POST
    data_selector: response
    params: {}
- name: initial_preauthorisation
  endpoint:
    path: /payments/preauthorisation
    method: POST
    data_selector: response
    params:
      Tx/TxTp: RESA
      Tx/SvcAttr: IRES
- name: balance_inquiry
  endpoint:
    path: /payments/balance-inquiry
    method: POST
    data_selector: response
    params:
      Hdr/MsgFctn: AUTQ
      Tx/TxTp: BALC
- name: update_preauthorisation
  endpoint:
    path: /payments/update-preauthorisation
    method: POST
    data_selector: response
    params:
      Tx/TxTp: RESA
      Tx/SvcAttr: URES
- name: postauthorisation
  endpoint:
    path: /payments/postauthorisation
    method: POST
    data_selector: response
    params:
      Tx/TxTp: RESA
      Hdr/MsgFctn: FCMV/FCMK
      Tx/SvcAttr: PRES
- name: return_credit
  endpoint:
    path: /refund
    method: POST
    data_selector: transaction
    params: {}
- name: AcceptorReconciliationRequest
  endpoint:
    path: /AcceptorReconciliationRequest
    method: POST
    data_selector: Tx
    params: {}
- name: AcceptorReconciliationResponse
  endpoint:
    path: /AcceptorReconciliationResponse
    method: GET
    data_selector: Tx
    params: {}
- name: AcceptorReconciliationRequest
  endpoint:
    path: /AcceptorReconciliationRequest
    method: POST
    data_selector: TxTtls
- name: AcceptorReconciliationResponse
  endpoint:
    path: /AcceptorReconciliationResponse
    method: POST
    data_selector: TxTtls
- name: purchase_with_tip
  endpoint:
    path: /public/docs/gratuity-tip-and-cashback
    method: GET
    data_selector: purchase_with_tip
- name: purchase_with_cashback
  endpoint:
    path: /public/docs/gratuity-tip-and-cashback
    method: GET
    data_selector: purchase_with_cashback
- name: card_validity_check
  endpoint:
    path: /card-validity-check
    method: POST
    data_selector: response
    params: {}
- name: unattended_terminal
  endpoint:
    path: /unattended/terminal
    method: POST
    data_selector: transactions
    params:
      Cntxt/PmtCntxt/AttndncCntxt: UATT
      TxDtls/UattnddLvlCtgy: 0, 1, 2
- name: AcceptorCurrencyConversionRequestV04
  endpoint:
    path: /AcceptorCurrencyConversionRequestV04
    method: POST
    data_selector: Hdr
    params: {}
- name: AcceptorCurrencyConversionResponseV04
  endpoint:
    path: /AcceptorCurrencyConversionResponseV04
    method: POST
    data_selector: Hdr
    params: {}
- name: AcceptorCurrencyConversion
  endpoint:
    path: /AcceptorCurrencyConversion
    method: POST
    data_selector: AcceptorCurrencyConversionResponse
    params: {}
- name: direct_debit_transactions
  endpoint:
    path: /public/docs/direct-debit-transactions
    method: GET
    data_selector: transactions
    params: {}
- name: balance_inquiry
  endpoint:
    path: /Installment/EligablePlansQuery
    method: POST
    data_selector: response
    params: {}
- name: sale_request
  endpoint:
    path: /AcceptorAuthorisationRequest
    method: POST
    data_selector: response
    params: {}
- name: return_credit
  endpoint:
    path: /return_credit
    method: POST
    data_selector: Actn
    params: {}
- name: receipt_printing
  endpoint:
    path: /receipt_printing
    method: POST
    data_selector: Actn
    params: {}
- name: Acceptor Authorisation Request
  endpoint:
    path: /AcceptorAuthorisationRequest
    method: POST
    data_selector: AccptrAuthstnReq
    params: {}
- name: Acceptor Authorisation Response
  endpoint:
    path: /AcceptorAuthorisationResponse
    method: GET
    data_selector: AccptrAuthstnRspn
    params: {}
- name: Acceptor Completion Advice
  endpoint:
    path: /api/reversal
    method: POST
    data_selector: AccptrCmpltnAdvc
- name: WooCommerce
  endpoint:
    path: /public/docs/woocommerce
    method: GET
- name: Magento v2 (Adobe Commerce)
  endpoint:
    path: /public/docs/magento-v2
    method: GET
- name: Payments
  endpoint:
    path: /payments
    method: POST
- name: Checkout
  endpoint:
    path: /checkout
    method: POST
- name: giropay
  endpoint:
    path: /public/docs/giropay-copy
    method: GET
- name: iDEAL 2.0
  endpoint:
    path: /public/docs/ideal-20
    method: GET
- name: MCC Mandates
  endpoint:
    path: /public/docs/mcc-mandates
    method: GET
- name: PayPal
  endpoint:
    path: /public/docs/paypal-2
    method: GET
- name: PayPal Recurring Payment (Billing Agreement)
  endpoint:
    path: /public/docs/paypal-recurring-billing-agreement-1
    method: GET
- name: SEPA Direct Debit
  endpoint:
    path: /public/docs/sepa-direct-debit-1
    method: GET
- name: Visa Mobile
  endpoint:
    path: /public/docs/visa-mobile-1
    method: GET
- name: Guest Checkout Tokenization
  endpoint:
    path: /public/docs/guest-checkout-tokenization-rest-api
    method: GET
- name: RuPay
  endpoint:
    path: /public/docs/rupay-2
    method: GET
- name: Debit Disbursement
  endpoint:
    path: /public/docs/debit-disbursement-1
    method: GET
- name: encrypted_google_pay
  endpoint:
    path: '.../payments-gateway/v2/payments'
    method: POST
    data_selector: walletPaymentMethod
    params:
      requestType: WalletSaleTransaction
- name: decrypted_google_pay
  endpoint:
    path: '.../payments-gateway/v2/payments'
    method: POST
    data_selector: walletPaymentMethod
    params:
      requestType: WalletPreAuthTransaction
- name: transactions_initiated_from_pos
  endpoint:
    path: /public/docs/transactions-initiated-from-pos
    method: GET
    data_selector: ''
- name: soap_api
  endpoint:
    path: /public/docs/soap-api-emv-appendix
    method: GET
    data_selector: ''
- name: nexo_acquirer_protocol
  endpoint:
    path: /public/docs/introduction-2
    method: GET
    data_selector: ''
- name: disputes
  endpoint:
    path: /public/reference/get-disputes
    method: GET
    data_selector: records
- name: dispute
  endpoint:
    path: /public/reference/get-disputes-id
    method: GET
    data_selector: dispute
    params: {}
- name: allowedActions
  endpoint:
    path: /disputes/{disputeId}/events/{eventId}/actions
    method: POST
    data_selector: ''
    params: {}
- name: disputes
  endpoint:
    path: /disputes
    method: GET
    data_selector: disputes
    params: {}
- name: dispute_details
  endpoint:
    path: /disputes/{id}
    method: GET
    data_selector: dispute
    params: {}
- name: execute_action
  endpoint:
    path: /disputes/{disputeId}/events/{eventId}/actions
    method: POST
    data_selector: action_response
    params: {}
- name: dispute_notes
  endpoint:
    path: /sandbox/exp/v1/disputes/{dispute_id}/notes
    method: POST
    data_selector: id
    params: {}
- name: dispute_stages
  endpoint:
    path: /public/docs/dispute-stages
    method: GET
    data_selector: stages
    params: {}
- name: funding_rejects
  endpoint:
    path: /public/reference/getfundingrejects
    method: GET
    data_selector: records
- name: update_funding_reject
  endpoint:
    path: /public/reference/updatefundingreject
    method: POST
    data_selector: records
- name: search_funding_rejects
  endpoint:
    path: /public/docs/search-for-list-of-funding-rejects
    method: GET
- name: update_funding_reject_status
  endpoint:
    path: /public/docs/update-an-existing-funding-reject-status
    method: POST
- name: funding_rejects
  endpoint:
    path: /funding-rejects
    method: GET
    data_selector: records
    params:
      fundingId: ''
      merchantId: ''
      limit: ''
      offset: ''
      rejectedAfter: ''
      rejectedBefore: ''
      sort: +posted
      status: ''
- name: funding_rejects
  endpoint:
    path: /funding-rejects
    method: PATCH
    data_selector: id
    params: {}
- name: authorisations
  endpoint:
    path: /api/authorisations
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /api/transactions
    method: GET
    data_selector: records
- name: fundings
  endpoint:
    path: /api/fundings
    method: GET
    data_selector: records
- name: funding_details
  endpoint:
    path: /api/funding-details
    method: GET
    data_selector: records
- name: card_brands
  endpoint:
    path: /public/docs/card-brands
    method: GET
    data_selector: brands
    params: {}
- name: alternative_payment_methods
  endpoint:
    path: /public/docs/alternative-payment-methods
    method: GET
    data_selector: methods
    params: {}
- name: Payments API
  endpoint:
    path: /payments-api
    method: GET
- name: Hosted Payments Page
  endpoint:
    path: /hosted-payments-page
    method: GET
- name: SCA Exemptions
  endpoint:
    path: /sca-exemptions
    method: GET
- name: Disputes
  endpoint:
    path: /disputes
    method: GET
- name: Transactional Data
  endpoint:
    path: /transactional-data
    method: GET
- name: Statements
  endpoint:
    path: /statements
    method: GET
- name: documents
  endpoint:
    path: /exp/v1/documents
    method: GET
    params:
      limit: '20'
      offset: '40'
- name: merchant-applications
  endpoint:
    path: /exp/v1/merchant-boarding/merchant-applications/1234/bank-accounts
    method: GET
    params:
      filter: accountHolderName:bob;bankAccountCurrency:GBP
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: null
    params: {}
- name: payments
  endpoint:
    path: /sandbox/ipp/payments-gateway/v2/payments/
    method: POST
    data_selector: response
    params: {}
- name: airlines
  endpoint:
    path: /airlines
    method: GET
    data_selector: records
- name: passenger_railways
  endpoint:
    path: /api/passenger_railways
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: authorisations
  endpoint:
    path: /authorisations
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
- name: funding
  endpoint:
    path: /funding
    method: GET
    data_selector: records
- name: create_financial_adjustment
  endpoint:
    path: /public/reference/post-adjustment
    method: POST
- name: update_financial_adjustment
  endpoint:
    path: /public/reference/modify-adjustment
    method: POST
- name: cancel_financial_adjustment
  endpoint:
    path: /public/reference/cancel-adjustment
    method: POST
- name: view_financial_adjustments
  endpoint:
    path: /public/reference/get-adjustments
    method: GET
- name: view_reference_data
  endpoint:
    path: /public/reference/get-reference-data
    method: GET
- name: Create an Adjustment
  endpoint:
    path: /omnipay/financial/adjustments/v1.0/post-adjustment
    method: POST
- name: Modify an Adjustment
  endpoint:
    path: /omnipay/financial/adjustments/v1.0/modify-adjustment
    method: POST
- name: Cancel an Adjustment
  endpoint:
    path: /omnipay/financial/adjustments/v1.0/cancel-adjustment
    method: POST
- name: Retrieve Adjustments - Staged
  endpoint:
    path: /omnipay/financial/adjustments/v1.0/get-adjustments-staged
    method: GET
- name: Retrieve Reference Data
  endpoint:
    path: /omnipay/financial/adjustments/v1.0/reference-data
    method: GET
- name: create_adjustment
  endpoint:
    path: /post-adjustment
    method: POST
- name: retrieve_reference_data
  endpoint:
    path: /retrieve-reference-data
    method: GET
- name: modify_adjustment
  endpoint:
    path: /modify-adjustment
    method: PUT
    data_selector: data
    params:
      adjustmentSlipNumber: Unique slip number generated for the adjustment
- name: cancel_adjustment
  endpoint:
    path: /cancel-adjustment
    method: DELETE
    data_selector: adjustmentSlipNumber
    params: {}
- name: list_adjustments
  endpoint:
    path: /get-adjustments-staged
    method: GET
    data_selector: adjustments
    params:
      dateFrom: YYYY-MM-DD
      dateTo: YYYY-MM-DD
      limit: number_of_items
      offset: number_of_items_to_skip
- name: reference_data
  endpoint:
    path: /reference-data
    method: GET
    data_selector: values
    params:
      Classification: Optional field to be passed in the Query parameter of the API
        request
- name: payment
  endpoint:
    path: /public/reference/submitprimarytransaction
    method: POST
- name: transaction
  endpoint:
    path: /public/reference/transactioninquiry
    method: GET
- name: account_verification
  endpoint:
    path: /account-verification
    method: POST
    data_selector: TransactionResponse
- name: exchange_rates
  endpoint:
    path: /exchange-rates
    method: POST
    data_selector: ExchangeRateResponse
- name: card_information
  endpoint:
    path: /card-information
    method: POST
    data_selector: CardInfoLookupResponse
- name: account_information
  endpoint:
    path: /account-information
    method: POST
    data_selector: CardInfoLookupResponse
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: responses
    params: {}
- name: transaction_inquiry
  endpoint:
    path: /payments/{transaction-id}
    method: GET
    data_selector: responses
    params: {}
- name: finalize_secure_transaction
  endpoint:
    path: /payments/{transaction-id}
    method: PATCH
    data_selector: responses
    params: {}
- name: submit_secondary_transaction
  endpoint:
    path: /payments/{transaction-id}
    method: POST
    data_selector: responses
    params: {}
- name: apm_action
  endpoint:
    path: /payments/apm/{transaction-id}
    method: post
- name: transaction_update
  endpoint:
    path: /payments/apm/{transaction-id}
    method: patch
- name: secondary_transaction
  endpoint:
    path: /orders/{order-id}
    method: post
- name: order_inquiry
  endpoint:
    path: /orders/{order-id}
    method: get
- name: payment_schedule
  endpoint:
    path: /payment-schedules
    method: post
- name: payment_schedule_inquiry
  endpoint:
    path: /payment-schedules/{order-id}
    method: get
- name: payment_url
  endpoint:
    path: /payment-url
    method: post
- name: payment_token
  endpoint:
    path: /payment-tokens
    method: post
- name: PaymentTokenizationResponse
  endpoint:
    path: /payment/tokenization
    method: POST
    data_selector: response
    params: {}
- name: PaymentSchedulesResponse
  endpoint:
    path: /payment/schedules
    method: POST
    data_selector: response
    params: {}
- name: PaymentCardForcedTicketTransaction
  endpoint:
    path: /PaymentCardForcedTicketTransaction
    method: POST
    data_selector: example
    params: {}
- name: PaymentCardPayerAuthTransaction
  endpoint:
    path: /PaymentCardPayerAuthTransaction
    method: POST
    data_selector: example
    params: {}
- name: transaction
  endpoint:
    path: /payment/transaction
    method: GET
    data_selector: transactions
    params: {}
- name: payment_tokenization
  endpoint:
    path: /v1/payment/tokenization
    method: POST
    data_selector: tokenDetails
- name: payment_verification
  endpoint:
    path: /v1/payment/verification
    method: POST
    data_selector: verificationDetails
- name: PaymentCardSaleTransaction
  endpoint:
    path: /transactions/paymentCardSale
    method: POST
    data_selector: example
    params: {}
- name: PaymentCardCreditTransaction
  endpoint:
    path: /transactions/paymentCardCredit
    method: POST
    data_selector: example
    params: {}
- name: PaymentCardDisbursementTransaction
  endpoint:
    path: /transactions/paymentCardDisbursement
    method: POST
    data_selector: example
    params: {}
- name: PaymentTokenDisbursementTransaction
  endpoint:
    path: /transactions/paymentTokenDisbursement
    method: POST
    data_selector: example
    params: {}
- name: PaymentDevicePreAuthTransaction
  endpoint:
    path: /transactions/paymentDevicePreAuth
    method: POST
    data_selector: example
    params: {}
- name: PostAuthTransaction
  endpoint:
    path: /api/v1/post-auth-transaction
    method: POST
- name: AchPostAuthTransaction
  endpoint:
    path: /api/v1/ach-post-auth-transaction
    method: POST
- name: ReturnTransaction
  endpoint:
    path: /api/v1/return-transaction
    method: POST
- name: VoidTransaction
  endpoint:
    path: /api/v1/void-transaction
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: PaymentDevicePreAuthTransaction
  endpoint:
    path: /transactions/preauth
    method: POST
    data_selector: example
    params: {}
- name: PaymentDeviceSaleTransaction
  endpoint:
    path: /transactions/sale
    method: POST
    data_selector: example
    params: {}
- name: PaymentDeviceCreditTransaction
  endpoint:
    path: /transactions/credit
    method: POST
    data_selector: example
    params: {}
- name: PaymentDeviceDisbursementTransaction
  endpoint:
    path: /transactions/disbursement
    method: POST
    data_selector: example
    params: {}
- name: KoreanPaymentSaleTransaction
  endpoint:
    path: /transactions/korean-sale
    method: POST
    data_selector: example
    params: {}
- name: AchPreAuthTransaction
  endpoint:
    path: /transactions/ach-preauth
    method: POST
    data_selector: example
    params: {}
- name: AchSaleTransaction
  endpoint:
    path: /transactions/ach-sale
    method: POST
    data_selector: example
    params: {}
- name: AchCreditTransaction
  endpoint:
    path: /transactions/ach-credit
    method: POST
    data_selector: example
    params: {}
- name: secure3DAuthentication
  endpoint:
    path: /process3dSecure
    method: POST
    data_selector: params
- name: PaymentSchedulesPaymentCardEncrypted
  endpoint:
    path: /payment/schedules/payment-card/encrypted
    method: POST
    data_selector: encryptedData
- name: payment_card
  endpoint:
    path: /components/schemas/PaymentCard
    method: GET
    data_selector: properties
    params: {}
- name: payment_card_encrypted
  endpoint:
    path: /components/schemas/PaymentCardEncrypted
    method: GET
    data_selector: properties
    params: {}
- name: payment_method_type
  endpoint:
    path: /components/schemas/PaymentMethodType
    method: GET
    data_selector: enum
    params: {}
- name: payment_method_brand
  endpoint:
    path: /components/schemas/PaymentMethodBrand
    method: GET
    data_selector: enum
    params: {}
- name: EncryptedGooglePay
  endpoint:
    path: /some/path
    method: POST
    data_selector: data
    params: {}
- name: TaxRefundData
  endpoint:
    path: /tax/refund
    method: GET
    data_selector: indicator
    params: {}
- name: CardholderInfoResponse
  endpoint:
    path: /cardholder/info
    method: GET
    data_selector: postalCodeOrZipMatch
    params: {}
- name: PaymentUrlRequest
  endpoint:
    path: /payment/url
    method: POST
- name: PaymentUrlDetail
  endpoint:
    path: /payment/url/detail
    method: GET
- name: payment_order
  endpoint:
    path: /v1/payments/orders
    method: POST
    data_selector: orderDetails
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: CardInfoLookupRequest
  endpoint:
    path: /CardInfoLookupRequest
    method: POST
    data_selector: cardDetails
    params: {}
- name: AccountInfoLookupRequest
  endpoint:
    path: /AccountInfoLookupRequest
    method: POST
    data_selector: accountDetails
    params: {}
- name: ManagedRedirectTransaction
  endpoint:
    path: /managedRedirectTransaction
    method: POST
- name: GetEligibleInstallmentPaymentRequest
  endpoint:
    path: /eligible-installment-payment
    method: POST
- name: GetEligibleInstallmentPlansResponse
  endpoint:
    path: /eligible-installment-plans
    method: GET
- name: GetGuestCheckoutTokenCryptogramResponse
  endpoint:
    path: /guest-checkout/token/cryptogram
    method: POST
- name: GetNetworkTokenCryptogramResponse
  endpoint:
    path: /network-token/cryptogram
    method: POST
- name: create_payment_transaction
  endpoint:
    path: /payments/transaction
    method: POST
    data_selector: checkout
    params: {}
- name: create_payment_transaction
  endpoint:
    path: /createPaymentTransaction
    method: POST
    data_selector: checkout
    params: {}
- name: redirect_customer
  endpoint:
    path: /redirectCustomer
    method: POST
    data_selector: checkout
    params: {}
- name: receive_status_updates
  endpoint:
    path: /statusUpdates
    method: GET
    data_selector: status
    params: {}
- name: checkout
  endpoint:
    path: /checkouts
    method: POST
    data_selector: object
    params: {}
- name: payment_method_details
  endpoint:
    path: /payment/methods
    method: GET
- name: transaction_response
  endpoint:
    path: /transaction
    method: POST
- name: checkouts
  endpoint:
    path: /checkouts
    method: POST
    data_selector: checkout
    params: {}
- name: checkouts_id
  endpoint:
    path: /checkouts/{checkoutId}
    method: GET
    data_selector: checkouts
    params: {}
- name: checkout_details
  endpoint:
    path: /payment-links/{paymentLinkId}
    method: GET
- name: payment_link
  endpoint:
    path: /payment-links
    method: POST
    data_selector: object
- name: payment_links
  endpoint:
    path: /payment-links
    method: POST
    data_selector: Payment link
    params: {}
- name: payment_link_details
  endpoint:
    path: /payment-links/{paymentLinkId}
    method: GET
    data_selector: Payment link details
    params: {}
- name: PaymentLinkRequest
  endpoint:
    path: /payment-link
    method: POST
    data_selector: paymentLink
    params: {}
- name: RetrievePaymentLinkResponse
  endpoint:
    path: /payment-link/{paymentLinkId}
    method: GET
    data_selector: paymentLink
    params: {}
- name: evaluate_transaction_for_sca_exemption
  endpoint:
    path: /public/reference/evaluatescaexemptions
    method: POST
- name: provide_data_for_sca_exemption_engine
  endpoint:
    path: /public/reference/postscaexemptionsdata
    method: POST
- name: Funding Rejects
  endpoint:
    path: /public/reference/getfundingrejects
    method: GET
- name: Evaluate transaction for SCA exemption
  endpoint:
    path: /public/reference/evaluatescaexemptions
    method: POST
- name: Payment REST API
  endpoint:
    path: /public/docs/payments-api-quickstart
    method: GET
- name: Checkouts
  endpoint:
    path: /public/docs/payments-checkout-quickstart
    method: GET
- name: Payment Links
  endpoint:
    path: /public/docs/payment-links-quickstart
    method: GET
- name: SCA Exemptions
  endpoint:
    path: /public/docs/sca-exemptions
    method: GET
- name: Disputes
  endpoint:
    path: /public/docs/disputes
    method: GET
- name: Funding Rejects
  endpoint:
    path: /public/docs/funding-management
    method: GET
- name: Financial Adjustments
  endpoint:
    path: /public/docs/adjustments
    method: GET
- name: Transactional Data
  endpoint:
    path: /public/docs/transactional-data
    method: GET
- name: Statements
  endpoint:
    path: /public/docs/statements
    method: GET
- name: disputes
  endpoint:
    path: /public/reference/get-disputes
    method: GET
- name: dispute_detail
  endpoint:
    path: /public/reference/get-disputes-id
    method: GET
- name: dispute_document
  endpoint:
    path: /public/reference/get-disputes-id-documents-documentid
    method: GET
- name: execute_action
  endpoint:
    path: /public/reference/post-disputes-disputeid-actions-actionid
    method: POST
- name: undo_action
  endpoint:
    path: /public/reference/post-disputes-disputeid-actions-actionid-undo
    method: POST
- name: add_note
  endpoint:
    path: /public/reference/post-disputes-disputeid-notes
    method: POST
- name: payments
  endpoint:
    path: /public/reference/payments-intro
    method: GET
- name: checkouts
  endpoint:
    path: /public/reference/postcheckouts
    method: GET
- name: payment_links
  endpoint:
    path: /public/reference/postpaymentlinks
    method: GET
- name: sca_exemptions
  endpoint:
    path: /public/reference/sca-exemptions-intro
    method: GET
- name: disputes
  endpoint:
    path: /public/reference/disputes-intro
    method: GET
- name: funding_rejects
  endpoint:
    path: /public/reference/rejects-intro
    method: GET
- name: financial_adjustments
  endpoint:
    path: /public/reference/adjustments-introduction
    method: GET
- name: transactional_data
  endpoint:
    path: /public/reference/transactional-data-intro
    method: GET
- name: statements
  endpoint:
    path: /public/reference/statements-intro
    method: GET
- name: funding_rejects
  endpoint:
    path: /public/reference/getfundingrejects
    method: GET
    data_selector: funding_rejects
    params: {}
- name: update_funding_reject
  endpoint:
    path: /public/reference/updatefundingreject
    method: PATCH
    data_selector: funding_reject
    params: {}
- name: Funding Rejects
  endpoint:
    path: /public/reference/getfundingrejects
    method: GET
- name: Disputes
  endpoint:
    path: /public/reference/get-disputes
    method: GET
- name: funding-rejects
  endpoint:
    path: /funding-rejects
    method: GET
    data_selector: items
    params:
      limit: 20
      offset: 0
- name: update-funding-reject
  endpoint:
    path: /funding-rejects
    method: PATCH
    data_selector: null
    params: {}
- name: create_financial_adjustment
  endpoint:
    path: /public/reference/post-adjustment
    method: POST
    data_selector: adjustment
    params: {}
- name: update_financial_adjustment
  endpoint:
    path: /public/reference/modify-adjustment
    method: PUT
    data_selector: adjustment
    params: {}
- name: cancel_financial_adjustment
  endpoint:
    path: /public/reference/cancel-adjustment
    method: DELETE
    data_selector: adjustment
    params: {}
- name: view_financial_adjustments
  endpoint:
    path: /public/reference/get-adjustments
    method: GET
    data_selector: adjustments
    params: {}
- name: view_reference_data
  endpoint:
    path: /public/reference/get-reference-data
    method: GET
    data_selector: reference_data
    params: {}
- name: create_adjustment
  endpoint:
    path: /post-adjustment
    method: POST
    data_selector: AdjustmentResponse
- name: modify_adjustment
  endpoint:
    path: /modify-adjustment
    method: PUT
    data_selector: AdjustmentResponse
- name: cancel_adjustment
  endpoint:
    path: /cancel-adjustment
    method: DELETE
    data_selector: AdjustmentResponse
- name: get_adjustments_staged
  endpoint:
    path: /get-adjustments-staged
    method: GET
    data_selector: data
- name: get_reference_data
  endpoint:
    path: /reference-data
    method: GET
    data_selector: data
- name: authorisations
  endpoint:
    path: /public/reference/getauthorisations
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /public/reference/gettransactions
    method: GET
    data_selector: records
- name: fundings
  endpoint:
    path: /public/reference/getfundings
    method: GET
    data_selector: records
- name: statements
  endpoint:
    path: /public/reference/statements
    method: GET
- name: authorisations
  endpoint:
    path: /public/reference/getauthorisations
    method: GET
- name: transactions
  endpoint:
    path: /public/reference/gettransactions
    method: GET
- name: fundings
  endpoint:
    path: /public/reference/getfundings
    method: GET
- name: adjustments
  endpoint:
    path: /public/reference/get-adjustments
    method: GET
- name: Payments API
  endpoint:
    path: /public/reference/payments-intro
    method: GET
- name: Checkouts
  endpoint:
    path: /public/reference/postcheckouts
    method: GET
- name: Payment Links
  endpoint:
    path: /public/reference/postpaymentlinks
    method: GET
- name: SCA Exemptions
  endpoint:
    path: /public/reference/sca-exemptions-intro
    method: GET
- name: Disputes
  endpoint:
    path: /public/reference/disputes-intro
    method: GET
- name: Funding Rejects
  endpoint:
    path: /public/reference/rejects-intro
    method: GET
- name: Financial Adjustments
  endpoint:
    path: /public/reference/adjustments-introduction
    method: GET
- name: Transactional Data
  endpoint:
    path: /public/reference/transactional-data-intro
    method: GET
- name: Statements
  endpoint:
    path: /public/reference/statements-intro
    method: GET
- name: statements
  endpoint:
    path: /public/reference/getstatements
    method: GET
    data_selector: records
- name: single_statement
  endpoint:
    path: /public/reference/getstatementbyid
    method: GET
    data_selector: record
- name: payments
  endpoint:
    path: /public/reference/payments-intro
    method: GET
- name: checkouts
  endpoint:
    path: /public/reference/postcheckouts
    method: GET
- name: payment_links
  endpoint:
    path: /public/reference/postpaymentlinks
    method: GET
- name: sca_exemptions
  endpoint:
    path: /public/reference/sca-exemptions-intro
    method: GET
- name: disputes
  endpoint:
    path: /public/reference/disputes-intro
    method: GET
- name: funding_rejects
  endpoint:
    path: /public/reference/rejects-intro
    method: GET
- name: financial_adjustments
  endpoint:
    path: /public/reference/adjustments-introduction
    method: GET
- name: transactional_data
  endpoint:
    path: /public/reference/transactional-data-intro
    method: GET
- name: statements
  endpoint:
    path: /public/reference/statements-intro
    method: GET
- name: checkout
  endpoint:
    path: /checkouts
    method: POST
- name: payment_link
  endpoint:
    path: /payment-links
    method: POST
- name: dispute
  endpoint:
    path: /disputes
    method: GET
- name: funding_reject
  endpoint:
    path: /funding-rejects
    method: GET
- name: sca_exemption
  endpoint:
    path: /sca-exemptions
    method: POST
- name: statement
  endpoint:
    path: /statements
    method: GET
- name: transaction
  endpoint:
    path: /transactions
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: payment
  endpoint:
    path: /public/reference/submitprimarytransaction
    method: POST
- name: transaction_inquiry
  endpoint:
    path: /public/reference/transactioninquiry
    method: GET
- name: finalize_secure_transaction
  endpoint:
    path: /public/reference/finalizesecuretransaction
    method: PATCH
- name: submit_secondary_transaction
  endpoint:
    path: /public/reference/submitsecondarytransaction
    method: POST
- name: update_transaction
  endpoint:
    path: /public/reference/submitupdatetransaction
    method: PATCH
- name: cancel_payment_schedule
  endpoint:
    path: /payment-schedules/{order-id}
    method: DELETE
    params:
      storeId: optional outlet ID
- name: delete_payment_url
  endpoint:
    path: /payment-url
    method: DELETE
    params: {}
- name: payment_token
  endpoint:
    path: /payment-tokens/{token-id}
    method: GET
    data_selector: object
    params: {}
- name: payment_card_details
  endpoint:
    path: /payment-tokens/{token-id}
    method: GET
    data_selector: object
    params: {}
- name: delete_payment_token
  endpoint:
    path: /v2/payment-tokens/{token-id}
    method: DELETE
    params:
      storeId: ''
      payment-method: ''
- name: checkout
  endpoint:
    path: /checkouts
    method: POST
- name: payment_link
  endpoint:
    path: /payment-links
    method: POST
- name: dispute
  endpoint:
    path: /disputes
    method: GET
- name: create_checkout
  endpoint:
    path: /checkouts
    method: POST
    data_selector: checkout
    params: {}
- name: retrieve_checkout
  endpoint:
    path: /checkouts/{checkoutId}
    method: GET
    data_selector: checkout
    params: {}
- name: create_checkout
  endpoint:
    path: /public/reference/postcheckouts
    method: POST
    data_selector: checkout
    params: {}
- name: retrieve_checkout
  endpoint:
    path: /public/reference/get-checkouts-id
    method: GET
    data_selector: checkout
    params: {}
- name: checkouts
  endpoint:
    path: /checkouts
    method: POST
    data_selector: transaction
    params: {}
- name: checkout_details
  endpoint:
    path: /{checkoutId}
    method: GET
    data_selector: object
    params: {}
- name: payment_link_details
  endpoint:
    path: /payment-links/{paymentLinkId}
    method: GET
    params: {}
- name: payment_link
  endpoint:
    path: /payment-links/{paymentLinkId}
    method: GET
    data_selector: object
    params: {}
- name: list_disputes
  endpoint:
    path: /sandbox/exp/v1/disputes
    method: GET
    params:
      limit: 20
      status: OPEN
- name: disputes
  endpoint:
    path: /disputes
    method: GET
    data_selector: array of objects
    params:
      status: OPEN
- name: dispute_document
  endpoint:
    path: /disputes/{disputeId}/documents/{documentId}
    method: GET
    data_selector: file
- name: execute_action
  endpoint:
    path: /disputes/{disputeId}/events/{eventId}/actions
    method: POST
- name: undo_action
  endpoint:
    path: /disputes/{disputeId}/actions/{actionId}/undo
    method: POST
- name: Add a Note
  endpoint:
    path: /disputes/{disputeId}/notes
    method: POST
- name: List disputes
  endpoint:
    path: /get-disputes
    method: GET
- name: funding_rejects
  endpoint:
    path: /exp/v1/funding-rejects
    method: GET
    data_selector: array of objects
    params:
      merchantId: string
      status: string of strings
      rejectedAfter: string
      rejectedBefore: string
      offset: int32
      limit: int32
      sort: string
      fundingId: string of strings
- name: Update Funding Reject Status
  endpoint:
    path: /exp/v1/funding-rejects
    method: PATCH
- name: Retrieve Funding Rejects
  endpoint:
    path: /getfundingrejects
    method: GET
- name: evaluate_transaction_for_sca_exemption
  endpoint:
    path: /sca-exemptions
    method: POST
    data_selector: object
- name: sca_exemptions_data
  endpoint:
    path: /sca-exemptions-data
    method: POST
- name: statements
  endpoint:
    path: /statements
    method: GET
    data_selector: array of objects
    params:
      createdAfter: date-time
      createdBefore: date-time
      documentNumber: string
      offset: integer
      limit: int32
- name: statement
  endpoint:
    path: /{id}
    method: GET
    data_selector: object
- name: list_authorisations
  endpoint:
    path: /authorisations
    method: GET
    params:
      limit: '20'
      offset: '0'
- name: authorisations
  endpoint:
    path: /authorisations
    method: GET
    data_selector: array of objects
    params:
      createdAfter: date
      createdBefore: date
      limit: integer
      offset: integer
      sort: string
      storeId: string
      terminalId: string
      orderId: string
- name: authorisation_summaries
  endpoint:
    path: /authorisations/authorisation-summaries
    method: GET
    params:
      createdAfter: date
      createdBefore: date
      limit: integer
      offset: integer
- name: transactions
  endpoint:
    path: /sandbox/exp/v1/transactions
    method: GET
    data_selector: transactions
    params:
      limit: '20'
      offset: '0'
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: array of objects
    params:
      postedAfter: date
      postedBefore: date
      limit: integer
      offset: integer
      sort: string
      terminalId: string
      orderId: string
      fundingId: string
      fundingDetailId: string
- name: transaction
  endpoint:
    path: /transactions/{id}
    method: GET
- name: transactions
  endpoint:
    path: /sandbox/exp/v1/transactions/{id}
    method: GET
    data_selector: object
    params: {}
- name: fundings
  endpoint:
    path: /sandbox/exp/v1/fundings
    method: GET
    data_selector: records
    params:
      limit: '20'
      offset: '0'
- name: fundings
  endpoint:
    path: /fundings
    method: GET
    data_selector: array of objects
    params:
      fundedAfter: date
      fundedBefore: date
      limit: integer
      offset: integer
      sort: string
      fundingDetailId: string
- name: funding
  endpoint:
    path: /fundings/{id}
    method: GET
    data_selector: object
    params: {}
- name: funding_summaries
  endpoint:
    path: /fundings/funding-summaries
    method: GET
    data_selector: combined
    params:
      fundedAfter: date
      fundedBefore: date
      limit: integer
      offset: integer
- name: create_adjustment
  endpoint:
    path: /post-adjustment
    method: POST
- name: retrieve_adjustments
  endpoint:
    path: /get-adjustments
    method: GET
- name: Modify an Adjustment
  endpoint:
    path: /financial/adjustments/modify-adjustment
    method: PUT
- name: cancel_adjustment
  endpoint:
    path: /sandbox/exp/v1/financial/adjustments/cancel-adjustment
    method: DELETE
    data_selector: null
    params: {}
- name: get_adjustments
  endpoint:
    path: /get-adjustments-staged
    method: GET
    data_selector: object
    params: {}
- name: adjustments
  endpoint:
    path: /get-adjustments-staged
    method: GET
    data_selector: data
    params: {}
- name: card_information
  endpoint:
    path: /card-information
    method: POST
    data_selector: cardDetails
- name: payment_link
  endpoint:
    path: /payment-links
    method: POST
    data_selector: object
    params: {}
- name: payment_link
  endpoint:
    path: /payment-links/{paymentLinkId}
    method: GET
    data_selector: object
- name: payment_links
  endpoint:
    path: /payment-links/{paymentLinkId}
    method: GET
    data_selector: object
    params: {}
- name: disputes
  endpoint:
    path: /sandbox/exp/v1/disputes
    method: GET
    data_selector: array of objects
    params:
      limit: '20'
      status: OPEN
- name: disputes
  endpoint:
    path: /disputes
    method: GET
    data_selector: array of objects
    params:
      status: OPEN
      limit: 20
      offset: 0
notes:
- API requires authentication to access data
- Our APIs use API keys to authenticate your requests and ensure your data stays protected
  and secure.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Combine your api key and some request data into a single string
- Hash the string using the HMAC SHA256 method and your secret key
- Add the hash to your request
- 3DS test cards are configured to support only listed authentication scenarios and
  are not meant for end-to-end testing including authorization processing.
- Uses 'splitShipment' field for multiple shipments against a single original preauthorisation.
- Highly recommended to include optional cardholder billing address and security code.
- It is highly recommended to include also Billing and Shipping details in your transaction
  request to lower the risk of authentication declines.
- Using full screen mode in app-based flows where the authentication of the cardholder
  happens on a smartphone or tablet might cause time-outs.
- This transaction type is not supported to all acquirers.
- This feature is only available in Middle East region and limited to certain acquirers.
- This feature is only available in EMEA and limited to certain acquirers.
- Registration requires authentication via 3-D Secure.
- One-click payment be authorised up to 500 EUR, recurring or installment up to 1500
  EUR.
- Requires setup of connected app in api
- Alias registration necessary for One-Click payments
- Only to be used in regions where PSD2 is not mandatory
- Click to Pay solution works only when you are using Fiserv's as your 3-D Secure
  provider.
- For first-time users, Strong Customer Authentication (3DS) is required.
- For recognized users, SCA is no longer required after the Click to Pay profile is
  created.
- Two types of dynamic currency conversion requests defined via the `requestType`
  field.
- For a preauthorisation use requestType with value 'WalletPreAuthTransaction'.
- For a sale use requestType with value 'WalletSaleTransaction'.
- Your integration must use the latest Google Pay API version 2.0
- iDEAL session timeout is 60 minutes by default
- Requires user to have an iDEAL profile and consent to provide a user token in a
  previous transaction.
- This data is only processed via specific authorisation platforms.
- API response contains the parameter redirectURL which generates a hosted payment
  page.
- For MIT payments must be always set to 'false'
- The element 'schemeTransactionId' must be submitted in your next MIT transaction
  request in 'referencedSchemeTransactionId' parameter.
- Mandated to perform 3-D Secure authentication for every eCommerce transaction in
  European Union or India.
- Use POST to make a call to /payment-url to create a URL for a sale payment.
- Uses OAuth2 with refresh token — requires setup of connected app in PayPal
- To retain full purchase amount for PayPal’s Seller Protection, shipping address
  must be submitted.
- Invalid shipping address details will result in transaction decline.
- Recurring Scheduler cannot be used in a combination with 3-D Secure authentication
  flow.
- 'Rupay cards can be authenticated through 2 different methods: Redirection Flow
  and Seamless Flow.'
- For a credit use requestType = 'SepaCreditTransaction' in combination with paymentMethod
  = 'sepa'.
- 'Under the sepa object the following fields are expected: iban, name, email, mandate.reference,
  mandate.signatureDate, mandate.type.'
- For initial testing card data can be sent in clear format.
- The data encapsulated under paymentCard needs to be encrypted.
- Transactions initiated from a physical device must contain additional data elements.
- In case you store or process cardholder data within your own application, you must
  ensure that your system components are compliant with the Data Security Standard
  of the Payment Card Industry (PCI DSS).
- Only TLS secured communication over standard HTTPS TCP port 443 is accepted.
- The elements in XML structure must be kept in the same order as shown in examples,
  otherwise the OrderRequest will fail.
- Credit is a transaction type that requires special user permissions.
- The SOAP body contains the actual transaction result contained in the ipgapi:IPGApiOrderResponse
  element.
- The transaction amount in a return or void needs to be the same as in previously
  approved sale transaction.
- To enable partial authorisation, the parameter AllowPartialApproval in the sale
  transaction must be set to ‘true’.
- Uses SOAP for API calls
- This functionality is not enabled by default, requires additional configuration
- Do not use this functionality to regularly request the result of transactions processed
- Some payment endpoints do not send the final result of a payment transaction within
  their response. In such cases the Gateway returns an approval code that starts with
  a question mark (?:…)
- Using full screen mode in app-based flows where the authentication of the cardholder
  happens on a smartphone or tablet might cause time-outs and trigger an error on
  issuer/ACS side.
- You MUST include the 3DSMethod in your website as hidden iFrame.
- No user interface screen is presented to the cardholder.
- Do not apply any validations of 'Secure3DMethodForm' content, as it may change dynamically.
- Decoupled Authentication is supported by some issuers.
- Failed or rejected authentications are not allowed to be passed to the authorization
  platform and will be declined by the Gateway.
- This transaction type only performs the authentication and stores the authentication
  results.
- This feature is currently only available through the payment SOAP API and can only
  be done as a passthrough, where the 3-D Secure authentication is handled by an external
  3DS provider.
- You can send up to 10 additional parameters as individual key-value pairs.
- The values will be stored so that they can be returned in Inquiry Actions and be
  visible in the Virtual Terminal’s Order Details view.
- For payment method 'CUP_domestic' the element 'BankId' is mandatory and 'CustomerId'
  is recommended.
- For payment method Alipay use 'AlipayTxType' AND 'AlipayDomesticInformation'.
- For payment method WeChat use 'WeChatTxType' AND 'WeChatDomesticInformation'.
- The default token type is MULTIPAY if not specified.
- It is not allowed to store the card code (CVV) for credit card transactions.
- An InquiryRateId may be used only once.
- Re-using a conversion-rate will result in an error message CORE-DCC-10.
- A payment transaction using Alt id token can be initiated by submitting the `GuestCheckoutTokenNumber`.
- If you are operating in a specific industry, then you can use our SOAP API to submit
  the addendum data, what may provide an incentive rate for a market segment.
- Mandatory elements are highlighted in the XML example.
- Please note, that the solution and examples described above are available only if
  you utilize Fiserv as your 3DS service provider and your store is setup accordingly.
- You must obtain customer’s consent and perform strong customer authentication via
  3-D Secure before submitting the request to store card credentials.
- In case you are located in India or European Economic Area, you need to obtain and
  capture customer’s consent and perform Strong Customer Authentication (SCA) before
  customer’s credit card is tokenized.
- It is not allowed to store the card code (in most cases on the back of the card)
  so that for credit card transactions, the cardholder still needs to enter this value.
- The URL request stays valid for 182 days + 1 day on which the URL was generated.
- A merchant can override these settings by setting 'Expiration element' to desired
  value.
- Allows for Level I, Level II, and Level III transaction data.
- A PurchaseCard element can contain 0-100 LineItemData elements.
- The default value for TransactionOrigin is ‘ECI’.
- If you set the RecurringStartDate to the actual date, the first payment will immediately
  be initiated.
- Rupay cards can be authenticated through Redirection Flow or Seamless Flow.
- For card BINs supporting both methods, a seamless authentication is usually preferred.
- Seamless flow supported by the issuer requires OTP submission.
- OtpVerificationRequest can be used for both OTP verification and regeneration.
- DE_DirectDebitTxType is mandatory for all debit transactions.
- Credit and Return transactions require special user permissions.
- DUKPT key management is used with separated BDK’s for card data encryption and PIN.
- The API supports either eligible XML elements or TLVData for EMV transaction, a
  mixed form is not allowed.
- Requires additional EMV TLV Data for EFTPOS processing.
- The terminal is responsible for consistent data when including Online PIN.
- In-built cardholder authentication with 3-D Secure
- Highly customizable to match your corporate brand design and preferences
- Webhook notifications require a specified webhook URL.
- If status remains 'WAITING' for more than 5 minutes, implement transaction inquiry.
- A token value gets created and returned by the Gateway if customTokenValue is not
  passed.
- The total amount of the transaction must equal the sum of components.shipping and
  components.subtotal for FastCheckout to work properly.
- Customers can complete payments on their own device by clicking the payment link.
- You can set an expiry date and time to the payment link, after which the link expires.
- This User Guide will be the most helpful for processing transactions with the Virtual
  Terminal, using the integrated Reports, setting configuration options and administrating
  users.
- The availability of the various transaction types depends on the permissions granted
  to an individual user.
- If the functionality is enabled, you can void a specific transaction if it has not
  been settled.
- Cashback transactions cannot be voided.
- If you are a UK merchant with a category code of 6012 and cards issued by Visa or
  MasterCard have been selected as the payment method, you are required to enter additional
  information about the primary recipient of funds.
- Displays order details including transactions history
- Successful transactions are indicated with a green border, while declined ones are
  highlighted with a red border
- This is for UK compliance only
- This applies to both 'sale' and 'preauthorisation'
- You can always pass new redirection URL using an API request.
- The default number of retries before failure is 3.
- The minimum time for session time out is 1 minute, and the maximum is 20 minutes.
  The default value is 08 minutes.
- The Hosted Payment Page (Connect) enables the processing of payments in a simple,
  hosted solution without the need for storing payment information and PCI Compliance
  concerns.
- In order to use the full feature-set of these APIs in production you must have an
  approved production API Key.
- Do not recommend embedding hosted payment forms inside an iFrame.
- The POST URL used is for integration testing only. When you are ready to go into
  production, please contact Fiserv and you will be provided with the live production
  URL.
- Ensure compliance with PCI DSS if storing or processing cardholder data.
- The transaction types ‘preauth’ and ‘postauth’ only apply to the payment methods
  credit card or PayPal.
- The transaction type ‘payer_auth’ is only required if you want to split the 3-D
  Secure authentication process from the payment transaction (authorization) process.
- Scheme data integrity requirements demand to provide also customer's billing information
  in the transaction request, if available and possible to be collected upfront.
- Up to 10 custom fields can be submitted in a way that they will be stored within
  the Gateway.
- Make sure to use the parameter `response_hash` to recheck if the received transaction
  response has really been sent by Fiserv to protect you from fraudulent manipulations.
- You must always use the https-connection (instead of http) to prevent eavesdropping
  of transaction details.
- 'In case you submitted ''OrderId'' element in your request, please make sure to
  include only allowed characters: A-Z, a-z, 0-9, ''-'''
- Apple Pay on the web transaction can only be initiated with Apple’s Safari browser
  and authorization from an iOS device like iPhone, Apple Watch or MacBook.
- These parameters have no impact on the transaction processing flow.
- Some parameters for Giropay are recommended to include specific fields.
- For merchants located in India, it is recommended to send the Payment account reference
  number initiated for guest checkout Token and cryptogram request, or network token
  and cryptogram request
- Mandatory parameters include checkoutoption, storename, paymentMethod, txntype,
  chargetotal, currency, responseFailURL, and responseSuccessURL.
- Mandatory fields include bname, bcountry, and chargeTotal.
- Returns using currencies other than EUR or USD are not limited.
- Money Transfer functionality is represented by scheme programs also known as Visa
  Account Funding Transaction (AFT) and Mastercard MoneySend.
- In order to use this special type of payment, your store must be enabled with the
  respective service.
- In case you preferred to board all your sub-merchants in our Gateway and your stores
  have been setup properly, you do not need to include any additional details when
  initiating a transaction request from a sub-store.
- PayPal JS Smart Buttons are rendered on hosted payment page.
- On the gateway side, your account must be set up with the Data Vault / Hosted Data
  service.
- Please contact PayPal to verify if your PayPal business account meets the PayPal
  requirements for this feature.
- The start date of the recurring payments is the current date automatically calculated
  by the system.
- Fiserv currently only supports single messaging service/mode (SMS, capture in authorization
  request)
- NEXO dual message and batch mode are not supported as of now.
- For a successful market entry in Germany support of Girocard is required.
- For this a NEXO certification is required, which has to be executed with an approved
  certification agency.
- Terminal certifications with the schemes are also mandatory. All certifications
  are required per terminal type.
- For the integration via Fiserv's terminal connector (=Datawire) a separate integration
  test and certification with Fiserv's Datawire team is mandatory.
- Message Authentication Value may be disabled or set to optional in our gateway.
- This API handles cancellation advice transactions.
- MAC may be disabled or set to optional by a parameter configured in our gateway.
- Reservation cancellation is not a reversal of an individual transaction, but a closure
  of the aggregated reservation.
- For completion cancellation, a balance inquiry step is recommended.
- Some authorization systems don't support decrements, only cancellations of previous
  increments.
- The term 'credit' is used for a naked refund (i.e. a credit transaction without
  reference to an original transaction)
- The term 'return' is used for a linked refund (partial or complete) with reference
  to an original sale
- Reconciliation is the process of performing checks and balances of captured transactions
  between the Acceptor and the Gateway.
- Cutover is the formal process of switching from the current to next terminal business
  day.
- The Gateway's Nexo API only supports the initialization if the first transaction
  in a recurring series.
- Card Validity Check transaction has no financial impact on the card account.
- Supplementary amount or cashback amount is not allowed for this service.
- All message types will use the same URL.
- The implementation uses NEXO Acquirer Protocol v6
- The encryption of the PINBlock is optional - only used for online PIN transactions.
- Currently ISO-0 and ISO-1 PIN blocks are supported.
- Partial approval is only possible for a limited set of MCCs
- In case of an accepted DCC offer, the transaction must contain the following amounts/currencies.
- DCC is supported for Visa and MasterCard only.
- DCC can also be used for preauthorisations.
- Requires account to be enabled with the respective service.
- The terminal must capture the mobile phone number in format +9711743xxxx88 for linked
  refunds.
- AANI transaction limit is 50.000 AED
- Terminal should start to pull the payment status at the 6th second, not earlier.
- You must have given your consent within the AANI app by performing a special authentication.
- This feature is only available in central Europe region and limited to certain acquirers.
- This feature can only be used if your account has been enabled with the respective
  service.
- To acquire the API key and secret, create an account on the Developer Portal.
- Payment method availability may vary by region.
- This payment method is available only in Germany.
- This functionality is only available through selected distribution channels in EMEA
  region.
- Please note that this payment method is available in Poland only.
- The Merchant App communicates with the merchant server and creates a transaction
  ID.
- The Merchant App obtains the encrypted transaction payload from Apple's Pass Kit
  Framework.
- Google Pay enables developers to add payment processing to merchants’ Android-compatible
  apps and on Chrome on Android.
- The checkout process can be initiated with a 'Google Pay' button on the website.
- Transactions contain a list of financial transactions associated with this dispute
  and will contain the original disputed transaction, refunds or further adjustments
  made during the processing of this dispute.
- Documents contains a list of various evidences and other pieces of documentation
  either provided by the Merchant, Cardholder, Issuer or Card Scheme during the processing
  of the dispute and can be used for reference when responding.
- Proof of delivery can be provided where Address Validation Service (AVS) was used
  to identify cardholder's address.
- This is a document used in evidence as part of the dispute. Maximum supported file
  size is 5MB
- Requires evidence in specific formats for dispute actions
- In order to use the full feature-set of these APIs in production, you must have
  an approved production API Key and be onboarded as a Fiserv customer.
- Funding rejects only occur where the merchant number is at billing level = 'true'
- Any amendments to merchant details will need to be modified through the corresponding
  Merchant Maintenance API.
- 'Transactional data APIs expose 4 types of items: Authorisations, Transactions,
  Fundings, Funding Details.'
- Query params should be used for anything non-sensitive
- Header params should be used for anything sensitive
- Some forced filtering is performed to ensure security based on your API key
- Generate the message signature using API Key, ClientRequestId, time, and request
  body.
- 'Your ''app'' and its API Key will be tied to one or more of the following pieces
  of information: Alliance Code, Partner Code, Merchant ID.'
- The maximum allowed value in limit is 100.
- Only one adjustment per API call is allowed.
- Consumer cannot create any adjustment if the end of day batching process execution
  in progress.
- Modify not allowed if adjustment status is 'Released' or 'Cancelled'.
- If 'Error' status adjustment record has been modified, OmniPay change the status
  to 'Entered'.
- Modify not allowed if batching process running at that time.
- Cancel not allowed if adjustment status is 'Released' or 'Cancelled'.
- Cancel not allowed if batching process running at that time.
- Multiple objects of the financial adjustments API only accepts predefined values
  which are configured for an acquirer at time of set up.
- 'Accepted request types: PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction,
  PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction,
  PaymentTerminalSaleTransaction, PaymentTerminalCreditTransaction, PaymentTerminalPreAuthTransaction,
  PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction,
  SepaSaleTransaction, SepaCreditTransaction, WalletSaleTransaction, and WalletPreAuthTransaction.'
- Requires setup of connected app in first data
- Monitor for transaction declines
- Ensure to handle token expiration and refresh appropriately.
- The transaction origin will be fixed as PHONE when data is manually entered into
  the device and as RETAIL when data is entered into the device via swipe.
- This object encapsulates sensitive card data in an encrypted format, ensuring that
  it's encrypted during transmission.
- Response if card holder postal code matches that on file.
- Ensure to provide valid merchant credentials.
- Ensure to use the correct OAuth2 scopes.
- Transaction IDs may vary based on payment method.
- DEPRECATED - use Secure3DAuthenticationUpdateRequest instead
- Requires specific setup for TeleCheck services.
- Supports multiple languages and currencies.
- Requires setup of webhooks for status updates.
- 'When testing via the Fiserv developer portal you do not need to provide values
  for the following headers: Message-Signature, Client-Request-Id, Timestamp.'
- Ensure to use valid API key for authentication.
- API requires setup of API key for access.
- Our Funding rejects API is currently in development and specification is subject
  to change.
- Utilizes OAuth2 for authentication.
- Webhook URL can be specified when creating a checkout.
- You can start accepting payments with default pre-built checkout pages or customize
  the user interface for complete control over your checkout experience.
errors:
- BadRequest
- Unauthenticated
- Unauthorized
- NotFound
- GatewayDeclined
- EndpointDeclined
- ServerError
- EndpointCommunicationError
- UnsupportedMediaType
- 400 The request cannot be validated.
- 401 The request was unauthorized.
- 404 The requested resource doesn't exist.
- 409 There was a problem communicating with the endpoint.
- 422 There was a problem communicating with the endpoint.
- 500 An unexpected internal server error occurred.
- '401 Unauthorized: Check authentication details'
- '404 Not Found: Ensure endpoint is correct'
- '500 Internal Server Error: Try again later'
- '00: Approved or completed successfully'
- '01: Refer to card issuer'
- '02: Refer to card issuer''s special conditions'
- '03: Invalid merchant'
- '04: Pick-up card'
- '05: Do not honor'
- '06: Error'
- '07: Pick-up card, special condition'
- '08: Honour with identification'
- '09: Request in progress'
- '10: Approved for partial amount'
- '11: Approved (VIP)'
- '12: Invalid transaction'
- '13: Invalid amount'
- '14: Invalid card number (no such number)'
- '15: No such issuer'
- '16: Approved, update track 3'
- '17: Customer cancellation'
- '18: Customer dispute'
- '19: Re-enter transaction'
- '20: Invalid response'
- '21: No action taken'
- '22: Suspected malfunction'
- '23: Unacceptable transaction fee'
- '24: File update not supported by receiver'
- '25: Unable to locate record on file'
- '26: Duplicate file update record, old record replaced'
- '27: File update field edit error'
- '28: File update file locked out'
- '29: File update not successful, contact acquirer'
- '30: Format error'
- '31: Bank not supported by switch'
- '32: Completed partially'
- '33: Expired card - pick up'
- '34: Suspected fraud - pick up'
- '35: Card acceptor contact acquirer - pick up'
- '36: Restricted card - pick up'
- '37: Card acceptor call acquirer security - pick up'
- '38: Allowable PIN tries exceeded'
- '39: No credit account'
- '40: Requested function not supported'
- '41: Lost card - pick up'
- '42: No universal account'
- '43: Stolen card - pick-up'
- '44: No investment account'
- '51: Insufficient funds'
- '52: No checking account'
- '53: No savings account'
- '54: Expired card'
- '55: Incorrect personal identification number'
- '56: No card record'
- '57: Transaction not permitted to cardholder'
- '58: Transaction not permitted to terminal'
- '59: Suspected fraud'
- '60: Card acceptor contact acquirer'
- '61: Exceeds withdrawal amount limit'
- '62: Restricted card'
- '63: Security violation'
- '64: Original amount incorrect'
- '65: Exceeds withdrawal frequency limit'
- '66: Card acceptor call acquirer''s security department'
- '67: Hard capture (requires that card be picked up at ATM)'
- '68: Response received too late'
- '75: Allowable number of PIN tries exceeded'
- '90: Cutoff is in process (switch ending a day''s business and starting the next.
  Transaction can be sent again in a few minutes)'
- '91: Issuer or switch is inoperative'
- '92: Financial institution or intermediate network facility cannot be found for
  routing'
- '93: Transaction cannot be completed. Violation of law'
- '94: Duplicate transmission'
- '95: Reconcile error'
- '96: System malfunction'
- '50292: No incremental preauth allowed since it is completed'
- '10601: Total amount passed is more than the Return/Void amount.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'INVALID_TRANSACTION: Transaction details are incorrect.'
- 'TRANSACTION_TIMEOUT: The transaction did not complete in the expected time frame.'
- 'Open: Transaction is still being processed.'
- 'WAITING: Payment is pending.'
- '500: SOAP exception thrown due to invalid value in the SOAP request message.'
- 'SOAP-ENV:Client: MerchantException'
- 'SOAP-ENV:Client: ProcessingException'
- 'SOAP-ENV:Server: InternalException'
- 'Invalid characters in OrderId: only A-Z, a-z, 0-9, ''-'' are allowed.'
- HTTP POST message from ACS may not be received within 10 seconds.
- Function performed error-free
- APPROVAL
- 'TransactionResult: DECLINED: Failed or rejected authentications'
- 'InvalidTokenType: Ensure TokenType is either ONETIME or MULTIPAY.'
- 'TransactionFailed: The transaction must be an approved transaction.'
- 'SGS-27440: no amount given'
- 'CORE-DCC-10: Rate inquiry already associated with another transaction.'
- 'Invalid Order ID: Ensure you are using the correct Order ID for modifications or
  cancellations.'
- 'Transaction not allowed: Changing transaction amount without cardholder’s consent
  is not permitted.'
- 'SGS-030052: Communication Error'
- '?:waiting authentication: Indicates that authentication is pending.'
- 'Y:00:OTP verified successfully.: Indicates successful OTP verification.'
- 'Function performed error-free: Indicates successful transaction.'
- Decline response codes may be returned based on issuer’s decision.
- 'Transaction unsuccessful: View reason for decline.'
- N:-5103:Cardholder did not return from ACS
- 'INPUT_DATA: There was a problem in the data passed/submitted'
- 'LOCAL_ERROR: Local system error'
- 'REMOTE_ERROR: There was a remote processing error'
- '50719: Authorization captured'
- '50730: Authorization settled'
- 'Invalid card number: Ensure the card number is correct.'
- 'Transaction declined: Check terminal settings.'
- 'APPR: Payment has been successfully completed'
- 'DECL: Payment is still in waiting status'
- 'DECL: Payment failed'
- 'Tx/FailrRsn=''TIMO'': timeout'
- 'Tx/FailrRsn=''CUCL'': customer cancellation'
- 'Tx/FailrRsn=''MALF'': malfunction'
- 'INVALID_API_KEY: Check if the API Key is correct'
- 'NOT_FOUND: Ensure the dispute ID exists'
- 'BAD_REQUEST: Verify the request body format'
- '400: Bad Request - something in the input wasn''t right. We''ll usually include
  more detail in the response body'
- '401: Unauthorised - check your API key'
- '403: Forbidden - you''re trying to access something you don''t have privileges
  for'
- '404: Not Found - the resource you''re operating on doesn''t exist'
- '429: Too Many Requests - you''re at your rate limit and should wait before retrying
  the operation'
- '500: Internal Server Error - Something went wrong at our end, this should only
  happen in rare cases'
- '401 Unauthorized: Check API Key and Secret Key.'
- '400: The request cannot be validated.'
- '401: The request cannot be authenticated or was submitted with the wrong credentials.'
- '403: The request was unauthorized.'
- '404: The requested resource doesn''t exist.'
- '500: An unexpected internal server error occurred.'
- '400 Bad Request: Invalid request parameters.'
- '401 Unauthorized: Invalid API key.'
- '403 Forbidden: Access denied.'
- '404 Not Found: Resource not found.'
- '409 Conflict: Transaction gateway declined.'
- '415 Unsupported Media Type: Invalid content type.'
- '422 Unprocessable Entity: Transaction endpoint declined.'
- '500 Internal Server Error: Server error occurred.'
- '502 Bad Gateway: Communication error with the endpoint.'
- '400: Bad Request'
- '401: Unauthorized'
- '404: Not Found'
- '409: TransactionGatewayDeclined'
- '415: UnsupportedMediaType'
- '422: TransactionEndpointDeclined'
- '500: ServerError'
- '502: EndpointCommunicationError'
- 'INVALID_REQUEST: Check the request parameters'
- 'UNAUTHORIZED: Ensure valid credentials'
- 'NOT_FOUND: Verify the endpoint URL'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify authentication and permissions.'
- '404 Not Found: The requested resource does not exist.'
- 'INVALID_REQUEST: Check request parameters for correctness'
- 'UNAUTHORIZED: Verify authentication credentials'
- 'NOT_FOUND: Resource requested does not exist'
- '401 Unauthorized: Check API credentials.'
- '400 Bad Request: Ensure all required fields are present.'
- 400 - Bad request
- 401 - Unauthorized
- 403 - Forbidden
- 404 - Not found
- 429 - Too many requests
- 500 - Internal server error
- '400 Bad request: Readable error message that could be displayed in a UI'
- '401 Unauthorised: Readable error message that could be displayed in a UI'
- '403 Forbidden: Readable error message that could be displayed in a UI'
- '404 Not found: Readable error message that could be displayed in a UI'
- '429 Too many requests: Readable error message that could be displayed in a UI'
- title: Invalid API Key
  detail: The provided API key is invalid or expired.
- title: Transaction Failed
  detail: The transaction could not be processed due to an error.
- '400: Bad request'
- '401: Authentication Error'
- '403: Access Forbidden'
- '404: Resource Not Found'
- '429: Too many requests'
- '500: Internal Server Error'
- 401 - Unauthorised
- 400 Bad request
- 401 Unauthorized
- 403 Forbidden
- 404 Not found
- 429 Too many requests
- '429: Too Many Requests'
- 'AccessForbidden: Access to the requested resource is forbidden.'
- 'AuthenticationError: No valid API key or credential has been provided in the request.'
- 'TooManyRequests: Too many requests have been received too quickly.'
- '400: Bad Request - Incorrect or Missing Query Parameter/Header/Field'
- '401: Authentication error - No valid API key or credential has been provided in
  the request.'
- '403: Forbidden error - Access to the requested resource is forbidden.'
- '404: Resource not found - The requested resource cannot be found.'
- '422: Invalid reject status - The status is unknown for funding id'
- '429: Too many requests - Too many requests have been received too quickly.'
- '500: Internal server error - Sorry, something has gone wrong at our end.'
- 'ACCOUNT_NUMBER_NOT_FOUND: The authorization credentials required for this request
  are invalid.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401: The request was unauthorized.'
- '409: There was a problem communicating with the endpoint.'
- '415: Format that is not supported by the server for the HTTP method.'
- '422: There was a problem communicating with the endpoint.'
- 415 Format that is not supported by the server for the HTTP method.
- 401 Unauthorised
- 500 Internal server error
- 400 - Invalid request
- 401 - Authentication error
- 403 - Forbidden error
- 404 - Resource not found
- 429 - authenticationError
- 500 - InternalServerError
- '400 Invalid request: Readable error message that could be displayed in a UI'
- '401 Authorization error: Readable error message that could be displayed in a UI'
- '403 Forbidden error: Readable error message that could be displayed in a UI'
- '404 Record does not exist: Readable error message that could be displayed in a
  UI'
- 400 Invalid request
- 401 Authorization error
- 403 Forbidden error
- 404 Record does not exist
- 422 Unprocessable Entity
- 500 Internal Server Error
- 400 - Bad Request
- 401 - Authentication Error
- 403 - Access Forbidden
- 404 - Resource Not Found
- 405 - Method Not Allowed
- 429 - Too Many Requests
- 500 - Internal Server Error
- 503 - Service Unavailable
- '400 Bad Request: Contains one or more error messages and is mutually exclusive
  with the data item.'
- '401 Authentication Error: Contains one or more error messages and is mutually exclusive
  with the data item.'
- '403 Access Forbidden: Contains one or more error messages and is mutually exclusive
  with the data item.'
- '404 Resource Not Found: Contains one or more error messages and is mutually exclusive
  with the data item.'
- '405 Method Not Allowed: Contains one or more error messages and is mutually exclusive
  with the data item.'
- '429 Too Many Requests: Contains one or more error messages and is mutually exclusive
  with the data item.'
- '500 Internal Server Error: Contains one or more error messages and is mutually
  exclusive with the data item.'
- 400 Bad Request
- 401 Authentication Error
- 403 Access Forbidden
- 404 Resource Not Found
- 405 Method Not Allowed
- 429 Too Many Requests
- '400 Bad Request: Readable error message that could be displayed in a UI'
- '401 Unauthorized: Readable error message that could be displayed in a UI'
- '404 Not Found: Readable error message that could be displayed in a UI'
- '500 Internal Server Error: Readable error message that could be displayed in a
  UI'
- '429 Too Many Requests: Readable error message that could be displayed in a UI'
- '500 Internal server error: Readable error message that could be displayed in a
  UI'
- '403: Forbidden'
- '400 Bad Request: Errors in request parameters'
- '401 Unauthorized: Invalid credentials or unauthorized access'
- '403 Forbidden: Access denied'
- '404 Not Found: Resource not found'
- '429 Too Many Requests: Rate limit exceeded'
- 404 Not Found
- 400 - Badrequest
- 401 - Unauthorised
- 403 - Forbidden
- 404 - Notfound
- '500'
- 403 AccessForbidden
- 400 - Badrequest
- 404 - Notfound
- '400 Bad request: Readable error message that could be displayed in a UI.'
- '401 Unauthorised: Readable error message that could be displayed in a UI.'
- '403 AccessForbidden: Readable error message that could be displayed in a UI.'
- '404 Not found: Readable error message that could be displayed in a UI.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - AccessTokenRequest
  - PaymentCardPaymentTokenizationRequest
  - PaymentTokenVerificationRequest
  - API-Key
  - Api-Key
client:
  base_url: https://fiserv.dev
  auth:
    type: oauth2
source_metadata: null
