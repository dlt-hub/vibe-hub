resources:
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: titles
  endpoint:
    path: /api/titles
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: titles
  endpoint:
    path: /services/data/vXX.X/sobjects/Titles
    method: GET
    data_selector: records
- name: Titles
  endpoint:
    path: /services/data/vXX.X/sobjects/Titles
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: APT Detection
  endpoint:
    path: /apt-detection/
    method: GET
    data_selector: ''
    params: {}
- name: CDN Cache Efficiency
  endpoint:
    path: /cdn/
    method: GET
    data_selector: ''
    params: {}
- name: Password Spraying
  endpoint:
    path: /password-spraying/
    method: GET
    data_selector: ''
    params: {}
- name: Temporal Locality
  endpoint:
    path: /duration/
    method: GET
    data_selector: ''
    params: {}
- name: Monitor an MMO
  endpoint:
    path: /planetside-2/
    method: GET
    data_selector: ''
    params: {}
- name: IMDB Movie Data
  endpoint:
    path: /movieData/
    method: GET
    data_selector: ''
    params: {}
- name: Wikipedia Page Creation Feed
  endpoint:
    path: /wikipedia/
    method: GET
    data_selector: ''
    params: {}
- name: Entity Resolution
  endpoint:
    path: /entity-resolution/
    method: GET
    data_selector: ''
    params: {}
- name: Webhook Data Enrichment
  endpoint:
    path: /webhook/
    method: GET
    data_selector: ''
    params: {}
- name: Ethereum Tag Propagation
  endpoint:
    path: /ethereum/
    method: GET
    data_selector: ''
    params: {}
- name: Basic File Ingest
  endpoint:
    path: /ingest/
    method: GET
    data_selector: ''
    params: {}
- name: Harry Potter
  endpoint:
    path: /hpotter/
    method: GET
    data_selector: ''
    params: {}
- name: Apache Log Analytics
  endpoint:
    path: /apache_log/
    method: GET
    data_selector: ''
    params: {}
- name: Certstream Firehose
  endpoint:
    path: /certstream-firehose/
    method: GET
    data_selector: ''
    params: {}
- name: Quine Logs Recipe
  endpoint:
    path: /quine-logs-recipe/
    method: GET
    data_selector: ''
    params: {}
- name: Approximating Pi
  endpoint:
    path: /pi/
    method: GET
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: wikipedia-page-create
  endpoint:
    path: /api/v1/ingest/wikipedia-page-create
    method: POST
    data_selector: data
    params: {}
- name: cypher-query
  endpoint:
    path: /api/v1/query/cypher
    method: POST
    data_selector: results
    params: {}
- name: standing-query
  endpoint:
    path: /api/v1/query/standing/wikipedia-new-page-node
    method: POST
    data_selector: data
    params: {}
- name: pause-ingest
  endpoint:
    path: /api/v1/ingest/wikipedia-page-create/pause
    method: PUT
    data_selector: status
    params: {}
- name: shutdown
  endpoint:
    path: /api/v1/admin/shutdown
    method: POST
    data_selector: status
    params: {}
- name: admin_build_info
  endpoint:
    path: /api/v1/admin/build-info
    method: GET
    data_selector: .
- name: admin_shutdown
  endpoint:
    path: /api/v1/admin/shutdown
    method: POST
    data_selector: .
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: wikipedia-revision-create
  endpoint:
    path: /api/v1/ingest/wikipedia-revision-create
    method: POST
    data_selector: format
    params: {}
- name: pause
  endpoint:
    path: /api/v1/ingest/wikipedia-revision-create/pause
    method: PUT
    data_selector: ''
    params: {}
- name: wikipedia-revision-create
  endpoint:
    path: /api/v1/ingest/wikipedia-revision-create
    method: POST
    data_selector: settings.format.query
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: standing_query
  endpoint:
    path: /api/v1/query/standing/not-a-bot
    method: POST
    data_selector: meta
    params: {}
- name: ingest_stream
  endpoint:
    path: /api/v1/ingest/{name}
    method: POST
    data_selector: ingestStreams
    params: {}
- name: standing_query
  endpoint:
    path: /api/v1/standing-query
    method: POST
    data_selector: standingQueries
    params: {}
- name: statusQuery
  endpoint:
    path: /api/v1/ingest/INGEST-1/pause
    method: PUT
    data_selector: status
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: KafkaIngest
  endpoint:
    path: /reference/rest-api/#/paths/api-v1-ingest-name/post
    method: POST
    data_selector: ingestStreams
    params: {}
- name: KinesisIngest
  endpoint:
    path: /reference/rest-api/#/paths/api-v1-ingest-name/post
    method: POST
    data_selector: ingestStreams
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: ingest_streams
  endpoint:
    path: /api/v1/ingest/{name}
    method: POST
    data_selector: ingestStreams
    params: {}
- name: list_running_ingest_streams
  endpoint:
    path: /api/v1/ingest
    method: GET
    data_selector: ingestStreams
    params: {}
- name: lookup_running_ingest_stream
  endpoint:
    path: /api/v1/ingest/{name}
    method: GET
    data_selector: ingestStream
    params: {}
- name: pause_ingest_stream
  endpoint:
    path: /api/v1/ingest/{name}/pause
    method: PUT
    data_selector: result
    params: {}
- name: unpause_ingest_stream
  endpoint:
    path: /api/v1/ingest/{name}/start
    method: PUT
    data_selector: result
    params: {}
- name: cancel_running_ingest_stream
  endpoint:
    path: /api/v1/ingest/{name}
    method: DELETE
    data_selector: result
    params: {}
- name: Random Walk
  endpoint:
    path: /random-walk/
    method: GET
    data_selector: description
    params: {}
- name: nodes
  endpoint:
    path: /nodes
    method: POST
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: telemetry_event
  endpoint:
    path: /telemetry/events
    method: POST
    data_selector: event
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: INGEST-1
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: type
    params: {}
- name: STANDING-1
  endpoint:
    path: /api/v1/query/standing/STANDING-1
    method: POST
    data_selector: pattern
    params: {}
- name: standing_query
  endpoint:
    path: /api/v1/query/standing/STANDING-1
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: stolen-data
  outputs:
    type: CypherQuery
    query: MATCH (p1)-[:EVENT]->(e1)-[:EVENT]->(f)<-[:EVENT]-(e2)<-[:EVENT]-(p2),
      (f)<-[:EVENT]-(e3)<-[:EVENT]-(p2)-[:EVENT]->(e4)-[:EVENT]->(ip) WHERE id(f)
      = $that.data.fileId AND e1.type = "WRITE" AND e2.type = "READ" AND e3.type =
      "DELETE" AND e4.type = "SEND" AND e1.time < e2.time AND e2.time < e3.time AND
      e2.time < e4.time CREATE (e1)-[:NEXT]->(e2)-[:NEXT]->(e4)-[:NEXT]->(e3) WITH
      e1, e2, e3, e4, p1, p2, f, ip, "http://localhost:8080/#MATCH" + text.urlencode("
      (e1),(e2),(e3),(e4),(p1),(p2),(f),(ip) WHERE id(p1)='" + strId(p1) + "' AND
      id(e1)='" + strId(e1) + "' AND id(f)='" + strId(f) + "' AND id(e2)='" + strId(e2)
      + "' AND id(p2)='" + strId(p2) + "' AND id(e3)='" + strId(e3) + "' AND id(e4)='"
      + strId(e4) + "' AND id(ip)='" + strId(ip) + "' RETURN e1, e2, e3, e4, p1, p2,
      f, ip") as URL RETURN URL
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: INGEST-1
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: type
    params: {}
- name: INGEST-2
  endpoint:
    path: /api/v1/ingest/INGEST-2
    method: POST
    data_selector: type
    params: {}
- name: STANDING-1
  endpoint:
    path: /api/v1/query/standing/STANDING-1
    method: POST
    data_selector: pattern
    params: {}
- name: cdn_data
  endpoint:
    path: /cdn-data
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: missEvents
  endpoint:
    path: /missEvents
    method: GET
    data_selector: records
    params: {}
- name: event
  endpoint:
    path: /event
    method: GET
    data_selector: records
    params: {}
- name: server
  endpoint:
    path: /server
    method: GET
    data_selector: records
    params: {}
- name: asset
  endpoint:
    path: /asset
    method: GET
    data_selector: records
    params: {}
- name: clientGeo
  endpoint:
    path: /clientGeo
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: cdn_data
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: data
    params: {}
- name: standing_query
  endpoint:
    path: /api/v1/query/standing/STANDING-1
    method: POST
    data_selector: pattern
    params: {}
- name: log-new-certs
  endpoint:
    path: /api/v1/query/standing/STANDING-1
    method: GET
    data_selector: n.data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: entity
  endpoint:
    path: /entity-resolution
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: propagate-tainted
  outputs:
    query: MATCH (tainted), (otherAccount) WHERE tainted <> otherAccount AND id(tainted)
      = $that.data.accountId AND id(otherAccount) = $that.data.otherAccountId WITH
      *, coll.min([($that.data.oldTaintedLevel + 1), otherAccount.tainted]) AS newTaintedLevel
      SET otherAccount.tainted = newTaintedLevel RETURN strId(tainted) AS taintedSource,
      strId(otherAccount) AS newlyTainted, newTaintedLevel
    type: CypherQuery
    andThen:
      type: PrintToStandardOut
- name: INGEST-1
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: format
    params: {}
- name: INGEST-2
  endpoint:
    path: /api/v1/ingest/INGEST-2
    method: POST
    data_selector: format
    params: {}
- name: FileIngest
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: type
    params: {}
- name: APT Detection
  endpoint:
    path: /apt-detection
    method: GET
- name: CDN Cache Efficiency
  endpoint:
    path: /cdn
    method: GET
- name: Password Spraying
  endpoint:
    path: /password-spraying
    method: GET
- name: Temporal Locality
  endpoint:
    path: /duration
    method: GET
- name: Monitor an MMO
  endpoint:
    path: /planetside-2
    method: GET
- name: IMDB Movie Data
  endpoint:
    path: /movieData
    method: GET
- name: Wikipedia Page Creation Feed
  endpoint:
    path: /wikipedia
    method: GET
- name: Entity Resolution
  endpoint:
    path: /entity-resolution
    method: GET
- name: Webhook Data Enrichment
  endpoint:
    path: /webhook
    method: GET
- name: Ethereum Tag Propagation
  endpoint:
    path: /ethereum
    method: GET
- name: Basic File Ingest
  endpoint:
    path: /ingest
    method: GET
- name: Harry Potter
  endpoint:
    path: /hpotter
    method: GET
- name: Apache Log Analytics
  endpoint:
    path: /apache_log
    method: GET
- name: Certstream Firehose
  endpoint:
    path: /certstream-firehose
    method: GET
- name: Quine Logs Recipe
  endpoint:
    path: /quine-logs-recipe
    method: GET
- name: Approximating Pi
  endpoint:
    path: /pi
    method: GET
- name: movie
  endpoint:
    path: $movie_file
    method: POST
    data_selector: records
- name: rating
  endpoint:
    path: $rating_file
    method: POST
    data_selector: records
- name: wikipedia-page-create
  endpoint:
    path: /api/v1/ingest/wikipedia-page-create
    method: POST
    data_selector: ''
    params: {}
- name: standing-query-wikipedia-new-page-node
  endpoint:
    path: /api/v1/query/standing/wikipedia-new-page-node
    method: POST
    data_selector: ''
    params: {}
- name: pause-wikipedia-page-create
  endpoint:
    path: /api/v1/ingest/wikipedia-page-create/pause
    method: PUT
    data_selector: ''
    params: {}
- name: shutdown
  endpoint:
    path: /api/v1/admin/shutdown
    method: POST
    data_selector: ''
    params: {}
- name: ingest_stream
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: null
    params: {}
- name: standing_query_1
  endpoint:
    path: /api/v1/query/standing/STANDING-1
    method: POST
    data_selector: null
    params: {}
- name: standing_query_2
  endpoint:
    path: /api/v1/query/standing/STANDING-2
    method: POST
    data_selector: null
    params: {}
- name: build_info
  endpoint:
    path: /api/v1/admin/build-info
    method: GET
    data_selector: .
- name: shutdown
  endpoint:
    path: /api/v1/admin/shutdown
    method: POST
    data_selector: .
- name: wikipedia-revision-create
  endpoint:
    path: /api/v1/ingest/wikipedia-revision-create
    method: POST
    data_selector: ''
    params: {}
- name: pause
  endpoint:
    path: /api/v1/ingest/wikipedia-revision-create/pause
    method: PUT
    data_selector: ''
    params: {}
- name: wikipedia-revision-create
  endpoint:
    path: /api/v1/ingest/wikipedia-revision-create
    method: POST
    data_selector: query
    params:
      type: ServerSentEventsIngest
- name: standing_query
  endpoint:
    path: /api/v1/query/standing/not-a-bot
    method: POST
    data_selector: meta
    params: {}
- name: '[Node] Previous Attempt'
  endpoint:
    path: ''
    method: MATCH
    data_selector: attempt
    params: {}
- name: '[Node] Next Attempt'
  endpoint:
    path: ''
    method: MATCH
    data_selector: attempt
    params: {}
- name: '[Node] Show Client and ASN'
  endpoint:
    path: ''
    method: MATCH
    data_selector: n,m,o
    params: {}
- name: '[Node] Targeted Assets'
  endpoint:
    path: ''
    method: MATCH
    data_selector: asset
    params: {}
- name: '[Text] Authentication attempts in chronological order'
  endpoint:
    path: ''
    method: MATCH
    data_selector: m.timestamp,m.eventId,n.ipAddress,m.zone,m.entityId,m.outcomeResult
    params: {}
- name: '[Node] Failed Password Authentication Attempts'
  endpoint:
    path: ''
    method: MATCH
    data_selector: attempt
    params: {}
- name: '[Node] Targeted Assets'
  endpoint:
    path: ''
    method: MATCH
    data_selector: asset
    params: {}
- name: '[Text] Authentication attempts in chronological order'
  endpoint:
    path: ''
    method: MATCH
    data_selector: m.timestamp,m.eventId,o.ipAddress,m.zone,m.entityId,m.outcomeResult
    params: {}
- name: '[Node] Attempts Timeline'
  endpoint:
    path: ''
    method: MATCH
    data_selector: m
    params: {}
- name: attempt
  endpoint:
    path: /attempts
    method: GET
    data_selector: attempts
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: client
  endpoint:
    path: /clients
    method: GET
    data_selector: clients
- name: asn
  endpoint:
    path: /asns
    method: GET
    data_selector: asns
- name: asset
  endpoint:
    path: /assets
    method: GET
    data_selector: assets
- name: time
  endpoint:
    path: /times
    method: GET
    data_selector: times
- name: standing_query
  endpoint:
    path: /standing-queries
    method: GET
- name: attempts
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: attempts
    params: {}
- name: Cypher
  endpoint:
    path: /query/cypher
    method: POST
- name: Gremlin
  endpoint:
    path: /query/gremlin
    method: POST
- name: Quine Log Reader
  endpoint:
    path: /api/v1/admin/readiness
    method: GET
- name: Shutdown Quine
  endpoint:
    path: /api/v1/admin/shutdown
    method: POST
- name: stream-feed
  endpoint:
    path: /ingest-streams
    method: POST
    data_selector: ingestStreams
    params: {}
- name: quine-output
  endpoint:
    path: /standing-queries
    method: POST
    data_selector: standingQueries
    params: {}
- name: INGEST-1
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: type
    params: {}
- name: email_ingest
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: data
    params: {}
- name: number
  endpoint:
    path: /webhook
    method: POST
    data_selector: data
    params: {}
- name: ingest_streams
  endpoint:
    path: /api/v1/ingest/{name}
    method: POST
    data_selector: ingestStreams
    params: {}
- name: list_running_streams
  endpoint:
    path: /api/v1/ingest
    method: GET
    data_selector: streams
    params: {}
- name: lookup_running_stream
  endpoint:
    path: /api/v1/ingest/{name}
    method: GET
    data_selector: stream
    params: {}
- name: pause_stream
  endpoint:
    path: /api/v1/ingest/{name}/pause
    method: PUT
    data_selector: status
    params: {}
- name: unpause_stream
  endpoint:
    path: /api/v1/ingest/{name}/start
    method: PUT
    data_selector: status
    params: {}
- name: cancel_stream
  endpoint:
    path: /api/v1/ingest/{name}
    method: DELETE
    data_selector: status
    params: {}
- name: Random Walk
  endpoint:
    path: /random-walk
    method: GET
    data_selector: algorithm
- name: persistence_config
  endpoint:
    path: /configuration/persistence
    method: POST
    data_selector: persistence
    params:
      journal-enabled: true
      snapshot-schedule: on-node-sleep
      snapshot-singleton: false
      standing-query-schedule: on-node-sleep
- name: rocksdb_config
  endpoint:
    path: /configuration/rocksdb
    method: POST
    data_selector: rocksdb
    params:
      type: rocks-db
- name: mapdb_config
  endpoint:
    path: /configuration/mapdb
    method: POST
    data_selector: mapdb
    params:
      type: map-db
- name: cassandra_config
  endpoint:
    path: /configuration/cassandra
    method: POST
    data_selector: cassandra
    params:
      type: cassandra
- name: ethereum_tag_propagation
  endpoint:
    path: /recipes/ethereum/
    method: GET
    data_selector: records
    params: {}
- name: ingest_stream
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: type
    params: {}
- name: standing_query
  endpoint:
    path: /api/v1/query/standing/STANDING-1
    method: POST
    data_selector: pattern
    params: {}
- name: standing_query
  endpoint:
    path: /api/v1/query/standing/STANDING-1
    method: GET
    data_selector: data
    params: {}
- name: stolen-data
  outputs:
    type: CypherQuery
    query: MATCH (p1)-[:EVENT]->(e1)-[:EVENT]->(f)<-[:EVENT]-(e2)<-[:EVENT]-(p2),
      (f)<-[:EVENT]-(e3)<-[:EVENT]-(p2)-[:EVENT]->(e4)-[:EVENT]->(ip) WHERE id(f)
      = $that.data.fileId AND e1.type = "WRITE" AND e2.type = "READ" AND e3.type =
      "DELETE" AND e4.type = "SEND" AND e1.time < e2.time AND e2.time < e3.time AND
      e2.time < e4.time CREATE (e1)-[:NEXT]->(e2)-[:NEXT]->(e4)-[:NEXT]->(e3) WITH
      e1, e2, e3, e4, p1, p2, f, ip, "http://localhost:8080/#MATCH" + text.urlencode("
      (e1),(e2),(e3),(e4),(p1),(p2),(f),(ip) WHERE id(p1)='"+strId(p1)+"' AND id(e1)='"+strId(e1)+"'
      AND id(f)='"+strId(f)+"' AND id(e2)='"+strId(e2)+"' AND id(p2)='"+strId(p2)+"'
      AND id(e3)='"+strId(e3)+"' AND id(e4)='"+strId(e4)+"' AND id(ip)='"+strId(ip)+"'
      RETURN e1, e2, e3, e4, p1, p2, f, ip") as URL RETURN URL
- name: INGEST-1
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: data
    params: {}
- name: INGEST-2
  endpoint:
    path: /api/v1/ingest/INGEST-2
    method: POST
    data_selector: data
    params: {}
- name: STANDING-1
  endpoint:
    path: /api/v1/query/standing/STANDING-1
    method: POST
    data_selector: data
    params: {}
- name: cdn_data_50k
  endpoint:
    path: /cdn_data_50k.json
    method: GET
    data_selector: cdn_data
- name: missEvents
  endpoint:
    path: /missEvents
    method: MATCH
    data_selector: missEvents
- name: event
  endpoint:
    path: /event
    method: MATCH
    data_selector: event
- name: asset
  endpoint:
    path: /asset
    method: MATCH
    data_selector: asset
- name: server
  endpoint:
    path: /server
    method: MATCH
    data_selector: server
- name: clientGeo
  endpoint:
    path: /clientGeo
    method: MATCH
    data_selector: clientGeo
- name: origin
  endpoint:
    path: /origin
    method: MATCH
    data_selector: origin
- name: pop
  endpoint:
    path: /pop
    method: MATCH
    data_selector: pop
- name: asn
  endpoint:
    path: /asn
    method: MATCH
    data_selector: asn
- name: cdn_data
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: type
    params:
      path: cdn_data_50k.json
      format:
        type: CypherJson
        query: 'MATCH (event), (client), (asset), (asn), (server), (pop), (origin),
          (clientGeo) WHERE $that.cache_status IS NOT NULL AND id(event) = idFrom(''event'',
          $that.timestamp, $that.request_id) AND id(client) = idFrom(''client'', $that.client_ip,
          $that.business_unit) AND id(asset) = idFrom(''asset'', $that.path) AND id(asn)
          = idFrom(''asn'', toString($that.client_asn)) AND id(server) = idFrom(''server'',
          $that.pop, $that.server_id) AND id(pop) = idFrom(''pop'', $that.pop) AND
          id(origin) = idFrom(''origin'', $that.backend_ip) AND id(clientGeo) = idFrom(''clientGeo'',
          $that.client_geo_country) WITH *, text.regexFirstMatch($that.cache_status,
          ''(HIT|MISS(?!.*HIT)).*'') AS hmp WHERE hmp[1] IS NOT NULL CALL incrementCounter(client,
          "count",1) YIELD count AS clientCount CALL incrementCounter(client, toLower(hmp[1]),1)
          YIELD count AS clientHitMissCount CALL incrementCounter(asset, "count",1)
          YIELD count AS assetCount CALL incrementCounter(asset, toLower(hmp[1]),1)
          YIELD count AS assetHitMissCount CALL incrementCounter(asn, "count",1) YIELD
          count AS asnCount CALL incrementCounter(asn, toLower(hmp[1]),1) YIELD count
          AS asnHitMissCount CALL incrementCounter(server, "count",1) YIELD count
          AS serverCount CALL incrementCounter(server, toLower(hmp[1]),1) YIELD count
          AS serverHitMissCount CALL incrementCounter(pop, "count",1) YIELD count
          AS popCount CALL incrementCounter(pop, toLower(hmp[1]),1) YIELD count AS
          popHitMissCount CALL incrementCounter(clientGeo, "count",1) YIELD count
          AS clientGeoCount CALL incrementCounter(clientGeo, toLower(hmp[1]),1) YIELD
          count AS clientGeoHitMissCount CALL incrementCounter(origin, "count",1)
          YIELD count AS originGeoCount CALL incrementCounter(origin, toLower(hmp[1]),1)
          YIELD count AS originGeoHitMissCount SET event = $that, event.cache_class
          = hmp[1], event: event SET origin.backend_ip = $that.backend_ip, origin:
          origin SET client.client_geo_country = $that.client_geo_country, client.client_ip
          = $that.client_ip, client.user_agent = $that.user_agent, client: client
          WITH *, text.regexFirstMatch($that.user_agent, ''\\((.*?)\\)(\\s|$)|(.*?)\\/(.*?)(\\s|$)'')
          AS cb SET client.browser = cb[3], client.browserVer = cb[4], client.first_seen
          = coll.min([$that.timestamp, coalesce(client.first_seen, $that.timestamp)]),
          client.last_seen = coll.max([$that.timestamp, coalesce(client.last_seen,
          $that.timestamp)]) SET clientGeo.client_geo_country = $that.client_geo_country,
          clientGeo: clientGeo WITH *, text.regexFirstMatch($that.path, ''^(.+\/)([^\/]+)$'')
          AS ap SET asset.path = ap[1], asset.name = ap[2], asset.full_path = $that.path,
          asset.if_modified_since = coll.max([$that.timestamp, coalesce(asset.if_modified_since,
          $that.timestamp)]), asset: asset SET asn.asn_id = toString($that.client_asn),
          asn: asn SET server.server_id = $that.server_id, server.server_ip = $that.server_ip,
          server.cache_shield = $that.cache_shield, server.environment = $that.environment,
          server.host = $that.host, server.role = $that.role, server.pop = $that.pop,
          server: server SET pop.source = $that.pop, pop.environment = $that.environment,
          pop: pop CREATE (asset)<-[:REQUESTED]-(event)-[:REQUESTED_OVER]->(asn)-[:IN_CLIENT_GEO]->(clientGeo),(origin)<-[:FROM]-(pop)<-[:WITHIN]-(server)<-[:TARGETED]-(event)<-[:ORIGINATED]-(client)'
- name: standing_query
  endpoint:
    path: /api/v1/query/standing/STANDING-1
    method: POST
    data_selector: pattern
    params:
      type: Cypher
      query: MATCH (server1:server)<-[:TARGETED]-(event1 {cache_class:"MISS"})-[:REQUESTED]->(asset)<-[:REQUESTED]-(event2
        {cache_class:"MISS"})-[:TARGETED]->(server2:server) RETURN DISTINCT id(event1)
        AS event1
- name: log-new-certs
  endpoint:
    path: /api/v1/query/standing/STANDING-1
    method: MATCH
    data_selector: n.data
    params: {}
- name: resolved
  endpoint:
    path: public-record-addresses-2021.ndjson
    method: FileIngest
    data_selector: records
- name: record
  endpoint:
    path: /public-record-addresses-2021.ndjson
    method: GET
    data_selector: records
    params: {}
- name: block
  nodeAppearances:
  - predicate:
      dbLabel: block
      propertyKeys: []
- name: transaction
  nodeAppearances:
  - predicate:
      dbLabel: transaction
      propertyKeys: []
- name: account
  nodeAppearances:
  - predicate:
      dbLabel: account
      propertyKeys: []
- name: ingest_1
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: format
    params: {}
- name: ingest_2
  endpoint:
    path: /api/v1/ingest/INGEST-2
    method: POST
    data_selector: format
    params: {}
- name: ingest_stream
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: ''
    params: {}
- name: movie
  endpoint:
    path: $movie_file
    method: POST
    data_selector: records
    params: {}
- name: person
  endpoint:
    path: $movie_file
    method: POST
    data_selector: records
    params: {}
- name: role
  endpoint:
    path: $movie_file
    method: POST
    data_selector: records
    params: {}
- name: directed
  endpoint:
    path: $movie_file
    method: POST
    data_selector: records
    params: {}
- name: rating
  endpoint:
    path: $rating_file
    method: POST
    data_selector: records
    params: {}
- name: killfeed
  endpoint:
    path: /streaming
    method: GET
- name: ingest_stream
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: type
    params: {}
- name: standing_query_1
  endpoint:
    path: /api/v1/query/standing/STANDING-1
    method: POST
    data_selector: pattern
    params: {}
- name: standing_query_2
  endpoint:
    path: /api/v1/query/standing/STANDING-2
    method: POST
    data_selector: pattern
    params: {}
- name: attempt
  endpoint:
    path: attempts.json
    method: FileIngest
    data_selector: records
- name: '[Node] Previous Attempt'
  endpoint:
    path: /MATCH (n)<-[:NEXT]-(attempt) RETURN attempt
    method: GET
    data_selector: attempt
    params: {}
- name: '[Node] Next Attempt'
  endpoint:
    path: /MATCH (n)-[:NEXT]->(attempt) RETURN attempt
    method: GET
    data_selector: attempt
    params: {}
- name: '[Node] Show Client and ASN'
  endpoint:
    path: /MATCH (n)-[:USING]->(m) MATCH (n)-[:OVER]->(o) RETURN DISTINCT n,m,o
    method: GET
    data_selector: n,m,o
    params: {}
- name: '[Node] Targeted Assets'
  endpoint:
    path: /MATCH (n)<-[:USING]-(attempt)-[:TARGETED]->(asset:asset) RETURN asset
    method: GET
    data_selector: asset
    params: {}
- name: '[Text] Authentication attempts in chronological order'
  endpoint:
    path: /MATCH (n)<-[:USING]->(m) RETURN m.timestamp AS Timestamp, m.eventId AS
      Attempt, n.ipAddress AS Source, m.zone AS Zone, m.entityId AS Entity, m.outcomeResult
      AS Outcome ORDER BY m.timestamp
    method: GET
    data_selector: m.timestamp, m.eventId, n.ipAddress, m.zone, m.entityId, m.outcomeResult
    params: {}
- name: '[Node] Failed Password Authentication Attempts'
  endpoint:
    path: /MATCH (n)-[:ORIGINATED]->(attempt {outcomeResult:"FAILURE"}) RETURN attempt
    method: GET
    data_selector: attempt
    params: {}
- name: '[Node] Targeted Assets'
  endpoint:
    path: /MATCH (n)-[:ORIGINATED]->(attempt)-[:TARGETED]->(asset:asset) RETURN asset
    method: GET
    data_selector: asset
    params: {}
- name: '[Text] Authentication attempts in chronological order'
  endpoint:
    path: /MATCH (n)-[:ORIGINATED]->(m)-[:USING]->(o) MATCH (n)-[:ORIGINATED]->(m)
      RETURN m.timestamp AS Timestamp, m.eventId AS Attempt, o.ipAddress AS Source,
      m.zone AS Zone, m.entityId AS Entity, m.outcomeResult AS Outcome ORDER BY m.timestamp
    method: GET
    data_selector: m.timestamp, m.eventId, o.ipAddress, m.zone, m.entityId, m.outcomeResult
    params: {}
- name: '[Node] Attempts Timeline'
  endpoint:
    path: /MATCH (n)-[:ORIGINATED]->(event)-[:NEXT]->(m) RETURN DISTINCT m
    method: GET
    data_selector: m
    params: {}
- name: attempt
  endpoint:
    path: /attempts
    method: GET
    data_selector: attempts
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: client
  endpoint:
    path: /clients
    method: GET
    data_selector: clients
    params: {}
- name: asn
  endpoint:
    path: /asn
    method: GET
    data_selector: asn
    params: {}
- name: asset
  endpoint:
    path: /assets
    method: GET
    data_selector: assets
    params: {}
- name: time
  endpoint:
    path: /time
    method: GET
    data_selector: time
    params: {}
- name: ingest_stream
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: null
    params: {}
- name: standing_query
  endpoint:
    path: /api/v1/query/standing/STANDING-1
    method: POST
    data_selector: null
    params: {}
- name: INGEST-1
  endpoint:
    path: /api/v1/ingest/INGEST-1
    method: POST
    data_selector: type
    params: {}
- name: Number
  endpoint:
    path: /api/v1/query/cypher
    method: POST
    data_selector: data
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Quine is a stateful streaming graph interpreter.
- Quine eliminates complex challenges of managing data ordering and scalability.
- You will need cURL and jq installed in your environment to use the tutorial commands.
- Uses ServerSentEventsIngest type for streaming.
- The ingest stream configuration is based on a Cypher query.
- Standing queries are unique to Quine and monitor streams for specified patterns.
- The Exploration UI is fully supported in Chrome. Other browsers are likely to work
  for most cases, but may experience some unusual behavior.
- Quine ingest streams are backpressured
- Quine is designed to solve for both read-heavy and write-heavy workloads.
- Quine saves the history of changes to each node.
- Support for Gremlin in Quine is much less complete than for Cypher.
- Quine can shape, filter, analyze, or take action based on patterns matched in the
  event stream.
- Quine ingest is backpressured which makes it very stable in a high-volume event
  stream.
- Quine uses a novel caching strategy that we call 'semantic caching'.
- The graph operates in memory, but saves its data to disk.
- RocksDB is the default option for data storage locally.
- Recipes are NOT useful for production workloads. Once you are ready to put the recipe
  into production, you need to convert it to API calls because API calls allow for
  naming of ingest streams and standing queries.
- Starting the Quine application jar without providing a configuration file, Quine
  creates a RocksDB-based persistent data store in the local directory.
- Quine supports a dialect of OpenCypher v9.
- Participation in our telemetry is anonymous and optional (you may easily opt out).
- The recipe reads log entries from the sample data files using an ingest stream to
  manifest a graph in Quine.
- The recipe is completely self contained.
- 'Warning: Once you submit the query to begin processing, Quine will immediately
  begin to produce new approximations for pi.'
- Graph is ready
- 'Running Recipe: APT Detection'
- Using 5 node appearances
- Using 14 quick queries
- Sample data file for this recipe is in the file 'cdn_data_50k.json' which can be
  accessed at https://that.re/cdn-data
- Time between consecutive cache MISSes between 5-45 minutes expressed in ISO 8601
  duration format
- Feel free to alter the range to meet your requirements
- A standing query is configured to look for 10 consecutive cache MISS events involving
  the same server and asset pair within a defined duration.
- Download the sample data to the same directory where you will run Quine.
- Standing queries incrementally MATCH on the emergence of :poBox and :postcode edges
- The Ethereum diamond logo is property of the Ethereum Foundation, used under the
  terms of the Creative Commons Attribution 3.0 License.
- Quine is a stateful streaming graph interpreter that consumes high volume data streams.
- Before running this recipe beyond a few seconds, you'll need to apply for a service
  ID from Daybreak Games in order to access their API.
- The service ID 's:example' is available for casual use--it is throttled to 10 requests
  per minute per client IP address.
- Verify that Quine is operating using the admin/build-info API endpoint.
- You can connect to the Quine exploration UI by entering http://127.0.0.1:8080 into
  your browser.
- Can verify the stream is active by sending GET to /api/v1/ingest
- A standing query is a feature unique to Quine.
- Standing queries monitor streams for specified patterns.
- Remember that for recipes, the name of the ingest stream is assigned when the recipe
  is run.
- The Exploration UI is fully supported in Chrome. Other browsers are likely to work
  for most cases, but may experience some unusual behavior. In particular, Safari
  occasionally does not update or garbles text values returned in the interactive
  documentation.
- Uses streaming data sources like Kafka, Kinesis, or POSIX named pipes.
- The recipe reads Quine log events from a file using ingest streams to manifest a
  graph in Quine.
- Running the recipe requires passing the filename at runtime.
- Keep in mind that setting the maximum heap size is not the same as limiting the
  total memory used by the application.
- This recipe looks for emails sent or received by cto@company.com within a 4-6 minute
  window as a means of highlighting a technique for matching on temporal locality
  of nodes.
- This recipe will stream numbers into the graph and stream them out to an HTTP endpoint,
  which will then calculate the factors of those numbers, and create relationships
  between the numbers and their factors.
- This recipe can serve as a boilerplate for other streaming recipes using the Wikipedia
  EventStreams source.
- Data is durably stored, allowing for seamless operation of the graph without time-windows
  for matching up data in memory.
- Changes to properties and edges are saved to disk as deltas in an append-only log
  using event-sourcing.
- 'Recipes are NOT useful for production workloads. Once you are ready to put the
  recipe into production, you need to convert it to API calls because: API calls allow
  for naming of ingest streams and standing queries.'
- A standing query is configured to detect nodes that have a type of log and then
  create relationships between the nodes and their verbs.
- Incrementally approximates pi using Leibniz' formula
- Once you submit the '[No Output] Run this query to begin processing.' query, Quine
  will immediately begin to produce new approximations for pi.
- Reproduces the behavior of the certstream website by connecting to the certstream
  firehose via SSL-encrypted websocket and printing to standard out each time a new
  certificate is detected.
- Entities will always be resolved for downstream.
- This is the entity resolution problem for addresses, which this recipe will demo.
- The ingest query can ingest data from a file or any other streaming source.
- Before running this Recipe, download the dataset using curl https://quine.io/tutorials/harry_potter_data.json
  -o harry_potter_data.json
- Characters can be renamed, but this is rare because it costs the player $25.
- You'll need to apply for a service ID from Daybreak Games in order to access their
  API.
- 'Ensure that the attemps.json file is in the same directory as Quine and issue the
  following command to begin: java -jar {{ quine }} -r password_spraying.yml'
- Ingest Quine Log Lines
- The regular expression parses each log file into parts.
- Quick Queries are available by right clicking on a node.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Error suggesting that you run with the option to use MapDB instead.
- Missing required parameter in-file; use --recipe-value in-file=
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: http://localhost:8080
  headers:
    Accept: application/json
source_metadata: null
