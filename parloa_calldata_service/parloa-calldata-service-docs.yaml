resources:
- name: call_data
  endpoint:
    path: /
    method: POST
    data_selector: input
    params:
      callerid: '+111111111'
      callid: 145644644ff
- name: retrieve_call_data
  endpoint:
    path: /
    method: GET
    data_selector: caller
    params:
      caller: '%2B111111111'
      callid: 145644644ff
- name: address_search
  endpoint:
    path: /services/address_search
    method: GET
    data_selector: results
    params: {}
- name: date_recognition
  endpoint:
    path: /services/date_recognition
    method: GET
    data_selector: results
    params: {}
- name: call_data
  endpoint:
    path: /api/call_data
    method: GET
    data_selector: data
    params: {}
- name: conversation_history
  endpoint:
    path: /api/conversation_history
    method: GET
    data_selector: data
    params: {}
- name: Conversation Logic
  endpoint:
    path: /using-blocks/conversation-logic
    method: GET
    data_selector: blocks
    params: {}
- name: Technical Logic
  endpoint:
    path: /using-blocks/technical-logic
    method: GET
    data_selector: blocks
    params: {}
- name: Other
  endpoint:
    path: /using-blocks/other
    method: GET
    data_selector: blocks
    params: {}
- name: intents
  endpoint:
    path: /rule-based-automation/dialog-interface/speech-assets/intents
    method: GET
- name: slots
  endpoint:
    path: /rule-based-automation/dialog-interface/speech-assets/slots
    method: GET
- name: dictionary
  endpoint:
    path: /rule-based-automation/dialog-interface/speech-assets/dictionary
    method: GET
- name: debugger
  endpoint:
    path: /debugger
    method: GET
    data_selector: transactions
- name: dialogflow_agents
  endpoint:
    path: /v2/projects/{project_id}/agent
    method: GET
    data_selector: agents
    params: {}
- name: Phone 2
  endpoint:
    path: /api/v1/phone2
    method: POST
- name: Chat 2
  endpoint:
    path: /api/v1/chat2
    method: POST
- name: Textchat 2
  endpoint:
    path: /api/v1/textchat2
    method: POST
- name: call_data
  endpoint:
    path: /api/call_data
    method: GET
    data_selector: data
    params: {}
- name: conversation_history
  endpoint:
    path: /api/conversation_history
    method: GET
    data_selector: data
    params: {}
- name: conversation_history
  endpoint:
    path: /conversation/history
    method: GET
    data_selector: transactions
- name: conversation_history
  endpoint:
    path: /conversation-history/<CONVERSATIONID>
    method: GET
    data_selector: conversationFlow
- name: conversation
  endpoint:
    path: ?dialog=<releaseId>&platform=textchatV2
    method: POST
    data_selector: responseElements
- name: call_data_service
  endpoint:
    path: /parloa-apis/calldata-service-+-api
    method: GET
    data_selector: records
    params: {}
- name: conversation_history
  endpoint:
    path: /parloa-apis/conversation-history
    method: GET
    data_selector: records
    params: {}
- name: textchat_v2
  endpoint:
    path: /parloa-apis/textchat-v2-api
    method: GET
    data_selector: records
    params: {}
- name: Analytics API
  endpoint:
    path: /analytics/api
    method: GET
    data_selector: records
- name: ConversationHistory API
  endpoint:
    path: /conversation/history/api
    method: GET
    data_selector: records
- name: hangup_event
  endpoint:
    path: /hangup-event
    method: GET
    data_selector: analytics
    params: {}
- name: Hangup Event
  endpoint:
    path: /analytics/hangup-event
    method: POST
    data_selector: transactions
    params: {}
- name: transactions
  endpoint:
    path: /analytics/transactions
    method: POST
    data_selector: transactions
    params: {}
- name: analytics_hook
  endpoint:
    path: /analytics/hook
    method: POST
    data_selector: response
    params: {}
- name: exported_audit_logs
  endpoint:
    path: /export/audit_logs
    method: GET
    data_selector: logs
    params: {}
- name: Training
  endpoint:
    path: /rule-based-automation/training
    method: GET
    data_selector: utterances
- name: create_collection
  endpoint:
    path: /knowledge-collections
    method: POST
    data_selector: collection
    params: {}
- name: search_collection
  endpoint:
    path: /knowledge-collections/search
    method: GET
    data_selector: collections
    params: {}
- name: delete_collection
  endpoint:
    path: /knowledge-collections/{id}
    method: DELETE
    data_selector: status
    params: {}
- name: Import Knowledge Source
  endpoint:
    path: /knowledge-sources/import
    method: POST
    data_selector: imported_records
    params: {}
- name: Search Knowledge Source
  endpoint:
    path: /knowledge-sources/search
    method: GET
    data_selector: search_results
    params: {}
- name: Edit Knowledge Source
  endpoint:
    path: /knowledge-sources/edit
    method: PUT
    data_selector: edited_record
    params: {}
- name: Delete Knowledge Source
  endpoint:
    path: /knowledge-sources/delete
    method: DELETE
    data_selector: deleted_record
    params: {}
- name: call_data
  endpoint:
    path: /v1/call-data
    method: GET
    data_selector: data
    params: {}
- name: conversation_history
  endpoint:
    path: /v1/conversation-history
    method: GET
    data_selector: history
    params: {}
notes:
- Data can also be transmitted back to the customer via SIP headers, but there are
  limitations on the number of characters that can be sent.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Enabled the AddressSearch Service to return a 'position' field containing latitude
  and longitude
- Ensure proper API access rights are configured.
- Parloa enables disabling password-based logins, a recommended step for administrator
  roles to enhance account security.
- Microsoft accounts support Multi-Factor Authentication (MFA), also known as Two-Factor
  Authentication (2FA). Implementing MFA in conjunction with SSO provides an additional
  security layer.
- 'Ensure that your OIDC account is configured to whitelist the following Redirect
  URI/Callback URI: https://app.parloa.com/api/v1/auth/oidc/callback'
- Your OIDC account must support the code grant flow.
- Parloa employs traditional authentication methods to ensure the security of your
  data by encrypting your credentials.
- After ten failed login attempts, your account locks temporarily to prevent unauthorized
  access.
- Uses OAuth2 with refresh token — requires setup of connected app in Parloa
- Profile and team management features available.
- Parloa currently provides the following types of blocks.
- Handles complex interactions using subdialogs
- Enables dynamic branching based on user inputs
- Variables with 'session' lifetime are volatile and will be cleared after the session
  ends.
- Ensure that each 'Input Name' accurately reflects the expected input for the external
  service or API.
- We currently only support input type `string`.
- Debugging releases are strictly for internal use.
- It's advisable to address warnings to prevent unexpected behavior.
- Environments in Parloa provide a structured framework to manage and organize your
  development, testing, and production stages.
- They serve as containers that hold a set of parameters, configurations, and environment
  variables that define the behavior of your releases.
- Variable names cannot be changed. Name your variable carefully to ensure clarity
  and consistency across your project's lifecycle.
- Marking a value as Secret is irreversible.
- Parloa's integration with Dialogflow-based platforms offers a seamless automation
  feature for uploading and updating speech assets.
- Requires setup of role with specific permissions in Google Cloud Platform
- The release now includes the option to apply global Prosody settings, enhancing
  voice consistency across all interactions.
- Some API responses may include null values.
- Azure's TTS service supports SSML for customization of voice outputs.
- Voice expressiveness can vary based on age.
- Azure provides versatility for different languages and dialects.
- ElevenLabs is generally available. However, it is currently an optional provider
  that has to be activated in your account.
- ElevenLabs voices cost extra and need to be added to your contract and Data Processing
  Agreement.
- The service is still in public preview by Microsoft Azure.
- Absence of Speech Synthesis Markup Language (SSML) support.
- The API returns all transactions from a conversation in one comprehensive record.
- Tokens are valid for 1 year from creation by default.
- Monitor the token expiration date and contact support for renewal when necessary.
- Sessions are not time-scoped and persist until explicitly terminated.
- Persistent data remains across sessions unless manually reset.
- The API is in active development and may change.
- Ensure to review rate limits and quotas.
- Parloa favors SIP for its efficiency, cost-effectiveness, and advanced features
  like direct call routing and data linkage capabilities.
- For secure, encrypted communication, it's recommended to use TLS port 5061.
- Requires setup of connected app in Parloa
- Dual Tone Multifrequency (DTMF) is a feature exclusive to Parloa's Phone 2 releases.
- This functionality enables users to interact with bots by pressing numbers on their
  phone's keypad.
- By default, Parloa allows a 1-second (1000 milliseconds) pause between each digit
  entered by the user. This interval is customizable.
- Designed for retrieving the complete history of an individual conversation
- Session data becomes subject to review and cleaning processes after 30 days of inactivity
  or at the beginning of a new call.
- Anonymous or blocked numbers are treated similarly to regular calls, with limitations
  on certain caller ID-dependent functionalities.
- All processes comply with GDPR, ensuring data privacy and security.
- The Hangup Event is unique to phone-based interactions.
- 'Raw Data Size: Transactions can become large, especially for bots with numerous
  storage variables. Consider filtering empty variables before storing them in a database.'
- The Audit Logs screen enables you to track changes made to dialogs.
- Audit logs are retained for one year, after which they are automatically deleted.
- Anonymizing Personally Identifiable Information
- Anonymization of PII is currently applicable only to the Training screen.
- The feature is enabled by default for all projects and can be turned off using the
  toggle on the screen.
- This feature is enabled by default on the Training screen for all new unassigned
  utterances, and one can opt-out of this feature using the toggle.
- The feature can be turned off or on for a Project.
- Currently, English (US & UK) and German (DACH) are supported.
- The anonymization process for unassigned utterances can take up to 2 minutes.
- Enabling the Training Data option when creating a new release allows the NLU to
  retain and utilize the new utterances provided by users.
- All utterances that have PII data displayed in the Training tab are anonymized.
- Balance is essential in training data. Each request type or intent should be equally
  represented, with a minimum of 50 utterances per intent to ensure stability and
  prevent overfitting.
- Achieving the right balance between system complexity and adaptability is key. Avoid
  overly detailed examples that may not generalize well to variations of a query.
- Implementing special responses for queries that fall outside the bot’s capabilities
  (Out-of-Scope) or are unclear (Fallback) improves user interactions by providing
  clear guidance when the bot cannot fulfill a request.
- Regularly update the training data with new phrases and expressions that reflect
  evolving language trends and adjust for specific intent changes.
- Ensure training examples are straightforward, focusing on the main information.
- Infinite loop handling is necessary to prevent the bot from running indefinitely.
- End of the bot flow. Too many errors encountered. Please try again later or contact
  support.
- This error usually indicates an infinite loop—a situation where your Parloa bot
  repeats the same action without progressing.
- Most often, these loops are due to an error in the global error handling, causing
  the error-handling flow to loop indefinitely.
- Infinite loops often arise from issues in global error handling or bot flow misconfigurations.
- If the error occurs immediately after a bot prompt, consider retraining the Natural
  Language Understanding (NLU) module.
- The default similarity threshold is 0.7.
- The default source chunk amount limit is 4.
- The agent needs to be published in the Studio to appear in the dropdown menu.
- OAuth2 authentication is required for accessing the API.
- 'Automating contact centers: By reducing wait times and motivating agents, we deliver
  superior customer service experiences.'
- 'Augmenting agent capabilities with AI: We provide real-time translations and fast
  responses, which streamline communication and efficiency.'
- Begin your journey in Parloa by starting a new project.
- Each project encapsulates all the elements of a Dialog, constructed from Blocks,
  which are the fundamental components of a conversation.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify token validity.'
- '404 Not Found: Endpoint does not exist.'
- Data inconsistency may occur if debugging releases are used for client projects.
- 'PERMISSION_DENIED: Check permissions for the service account'
- '400 Bad Request: The request was invalid or missing required information.'
- '401 Unauthorized: Your API key is missing or incorrect. Verify the Authorization
  header.'
- '404 Not Found: The chatbot release or session could not be found. Check releaseId
  and sessionId.'
- '500 Internal Server Error: An error occurred on the server. Try again later or
  contact support.'
- '401 Unauthorized: Check your credentials.'
- '404 Not Found: The requested resource does not exist.'
- '500 Internal Server Error: Try again later.'
auth_info:
  mentioned_objects:
  - OAuth2
client:
  base_url: https://api.parloa.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.parloa.com/oauth/token
    client_id: '{{ dlt.secrets[''parloa_client_id''] }}'
    client_secret: '{{ dlt.secrets[''parloa_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''parloa_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
