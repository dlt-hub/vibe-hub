resources:
- name: location_data
  endpoint:
    path: /spf-api-location-data-and-address-verification
    method: GET
    data_selector: locationData
- name: locationData
  endpoint:
    path: /locationData
    method: GET
    data_selector: locationData
- name: Symmetry Tax Engine
  endpoint:
    path: /symmetry-tax-engine
    method: GET
- name: Symmetry Payroll Forms
  endpoint:
    path: /symmetry-payroll-forms
    method: GET
- name: Symmetry I-9
  endpoint:
    path: /symmetry-i9
    method: GET
- name: Symmetry Payroll Point
  endpoint:
    path: /payroll-point
    method: GET
- name: Minimum Wage Tracker
  endpoint:
    path: /minimum-wage-finder
    method: GET
- name: Calculators by Symmetry
  endpoint:
    path: /calculators-by-symmetry
    method: GET
- name: Payroll Calculations
  endpoint:
    path: /reference/compute-gross-to-net-calculations
    method: POST
- name: Retrieving Taxation Information
  endpoint:
    path: /reference/translate-an-address-to-a-location-code-sls
    method: POST
- name: Account Information and Schema
  endpoint:
    path: /reference/retrieve-account-information-get
    method: GET
- name: Symmetry Payroll Forms API
  endpoint:
    path: /reference/getallformids
    method: GET
- name: Symmetry I-9
  endpoint:
    path: /reference/getallemployers
    method: GET
- name: Symmetry Payroll Point API
  endpoint:
    path: /reference/retrieve-taxes
    method: POST
- name: Minimum Wage Finder API
  endpoint:
    path: /reference/mwf-id
    method: GET
- name: Symmetry Tax Engine
  endpoint:
    path: /docs/ste-basic-concepts
    method: GET
- name: Symmetry Payroll Forms
  endpoint:
    path: /docs/spf-api-overview
    method: GET
- name: Symmetry I-9
  endpoint:
    path: /docs/i9-overview
    method: GET
- name: Symmetry Payroll Point
  endpoint:
    path: /docs/prp-api-overview
    method: GET
- name: Symmetry Minimum Wage Finder
  endpoint:
    path: /docs/mwf-api-get-started
    method: GET
- name: Calculators by Symmetry
  endpoint:
    path: /docs/cbs-api-overview
    method: GET
- name: minimum_wage
  endpoint:
    path: /mwf-api/mw-rates-by-location
    method: GET
    data_selector: records
    params: {}
- name: taxes
  endpoint:
    path: /prp-api/taxes-endpoint
    method: GET
    data_selector: records
    params: {}
- name: setTaxList
  endpoint:
    path: /setTaxList
    method: POST
    data_selector: taxReference
    params: {}
- name: taxItem
  endpoint:
    path: /SetTaxListResponse
    method: GET
    data_selector: taxItem
- name: jurisdictionData
  endpoint:
    path: /taxes/jurisdictionData
    method: GET
    data_selector: jurisdictionData
    params: {}
- name: PayCalcRequest
  endpoint:
    path: /payCalc
    method: POST
    data_selector: PayCalcRequest
- name: payCalc
  endpoint:
    path: /payCalc
    method: POST
    data_selector: payCalc
    params: {}
- name: location_codes
  endpoint:
    path: /api/location-codes
    method: GET
    data_selector: location_codes
    params: {}
- name: setTaxList
  endpoint:
    path: /v2/setTaxList
    method: POST
    data_selector: SetTaxListRequest
    params: {}
- name: SetTaxListResponse
  endpoint:
    path: /SetTaxListResponse
    method: GET
    data_selector: taxItem
- name: SetTaxListResponse
  endpoint:
    path: /setTaxList
    method: POST
    data_selector: taxItem
    params: {}
- name: payCalc
  endpoint:
    path: /payCalc
    method: POST
    data_selector: PayCalcRequest
- name: payCalc
  endpoint:
    path: /paycalc
    method: GET
    data_selector: PayCalcResponse.payCalc
    params: {}
- name: guided-flows
  endpoint:
    path: /guided-flows
    method: POST
- name: forms
  endpoint:
    path: /forms
    method: POST
- name: formQuestionSet
  endpoint:
    path: /formQuestionSet
    method: GET
- name: tax_parameters
  endpoint:
    path: /fillPdf
    method: GET
- name: payroll_forms
  endpoint:
    path: /spf-api-endpoints
    method: GET
- name: forms
  endpoint:
    path: /forms
    method: POST
- name: formQuestionSet
  endpoint:
    path: /formQuestionSet/{formID}/{questionSetID}
    method: GET
- name: fillPdf
  endpoint:
    path: /fillPdf
    method: POST
- name: guided_flows
  endpoint:
    path: /guided-flows
    method: POST
    data_selector: flows
    params: {}
- name: flowQuestionSet
  endpoint:
    path: /flowQuestionSet
    method: GET
    data_selector: questions
    params: {}
- name: authentication
  endpoint:
    path: /authentication/login
    method: GET
    data_selector: accessToken
- name: forms
  endpoint:
    path: /forms
    method: POST
    data_selector: forms
    params: {}
- name: guided-flows
  endpoint:
    path: /guided-flows
    method: POST
    data_selector: flows
    params: {}
- name: fillPDF
  endpoint:
    path: /fillPDF
    method: POST
    data_selector: pdf
    params: {}
- name: getAllFormIds
  endpoint:
    path: /getAllFormIds
    method: GET
    data_selector: formIds
    params: {}
- name: forms
  endpoint:
    path: /forms
    method: POST
    data_selector: forms
    params: {}
- name: guided-flows
  endpoint:
    path: /guided-flows
    method: POST
    data_selector: flows
    params: {}
- name: flowQuestionSet
  endpoint:
    path: /flowQuestionSet/{flowId}/{questionSetId}
    method: GET
    data_selector: questions
- name: isTerminatingMilitarySpouseExemption
  endpoint:
    path: /flowQuestionSet
    method: GET
    data_selector: questions
- name: formQuestions
  endpoint:
    path: /formQuestionSet/{formId}/{questionSetId}
    method: GET
    data_selector: questions
- name: fillPdf
  endpoint:
    path: /fillPdf
    method: POST
    data_selector: form
    params: {}
- name: fillPdf
  endpoint:
    path: /fillPdf/{formId}
    method: GET
    data_selector: formFields
    params:
      formVersion: ''
- name: getAllFormIds
  endpoint:
    path: /getAllFormIds
    method: GET
    data_selector: ''
    params: {}
- name: getPdf
  endpoint:
    path: /getPdf/{formId}
    method: GET
    data_selector: ''
    params:
      formVersion: ''
- name: getAllFormsCatalog
  endpoint:
    path: /getAllFormsCatalog
    method: GET
    data_selector: ''
    params: {}
- name: residency
  endpoint:
    path: /spf-api-endpoints/guided-flows
    method: POST
    data_selector: flows
- name: nexus
  endpoint:
    path: /spf-api-endpoints/nexus
    method: POST
    data_selector: nexus
    params: {}
- name: lock_in_letters
  endpoint:
    path: /spf-api-lock-in-letters
    method: POST
    data_selector: lockInLetters
    params: {}
- name: interstate_employee
  endpoint:
    path: /spf-api-interstate-employees
    method: POST
    data_selector: interstateEmployee
    params: {}
- name: W-4
  endpoint:
    path: /forms/W4101
    method: GET
    data_selector: forms
- name: CLGS-32-6
  endpoint:
    path: /forms/PA114
    method: GET
    data_selector: forms
- name: W-4(SP)
  endpoint:
    path: /forms/W4101SP
    method: GET
    data_selector: forms
- name: '673'
  endpoint:
    path: /forms/W6101
    method: GET
    data_selector: forms
- name: '8233'
  endpoint:
    path: /forms/W8101
    method: GET
    data_selector: forms
- name: SPF Registration
  endpoint:
    path: /spf/registration
    method: POST
    data_selector: data
    params: {}
- name: Returning Form & Form Data
  endpoint:
    path: /spf/returning-form-data
    method: GET
    data_selector: formData
    params: {}
- name: register
  endpoint:
    path: /spf/register
    method: POST
- name: register_forward
  endpoint:
    path: /spf/register-forward
    method: POST
- name: get_started
  endpoint:
    path: /spf/get-started
    method: POST
- name: form_submission
  endpoint:
    path: /spf-api-endpoints
    method: POST
    data_selector: formSubmissionMode
    params: {}
- name: nexus
  endpoint:
    path: /spf-hosted-nexus
    method: GET
- name: lockInLetters
  endpoint:
    path: /spf-hosted-lock-in-letters
    method: GET
- name: Symmetry Payroll Forms API
  endpoint:
    path: /spf-api-guide
    method: GET
    data_selector: records
- name: employers
  endpoint:
    path: /i9/v1/employers
    method: GET
- name: generateToken
  endpoint:
    path: /i9/v1/employers/{employerId}/employees/{employeeId}/generateToken
    method: GET
- name: employer
  endpoint:
    path: /docs/i9-register-employers
    method: POST
- name: employee
  endpoint:
    path: /docs/getemployees
    method: GET
- name: administrator
  endpoint:
    path: /docs/getadmins
    method: GET
- name: E-Verify configuration
  endpoint:
    path: /docs/i9-configure-e-verify
    method: POST
- name: generate employee access token
  endpoint:
    path: /docs/i9-start-i9
    method: POST
- name: generate administrator access token
  endpoint:
    path: /docs/i9-administrate-an-organizations-i-9s
    method: POST
- name: employer
  endpoint:
    path: /docs/i9-register-employers
    method: POST
- name: employees
  endpoint:
    path: /docs/getemployees
    method: GET
- name: administrators
  endpoint:
    path: /docs/getadmins
    method: GET
- name: E-Verify
  endpoint:
    path: /docs/i9-configure-e-verify
    method: POST
- name: completed I-9 data
  endpoint:
    path: /docs/i9-receive-completed-i-9-data
    method: POST
- name: employers
  endpoint:
    path: /employers
    method: POST
    data_selector: employer
    params: {}
- name: register_administrator
  endpoint:
    path: /employers/{employerId}/admins
    method: POST
    data_selector: admin
    params: {}
- name: register_employee
  endpoint:
    path: /employers/{employerId}/employees
    method: POST
    data_selector: employee
    params: {}
- name: everifySettings
  endpoint:
    path: /employers/{employerId}/admins/{adminId}/everifySettings/generateToken
    method: POST
    data_selector: authenticateUri, embeddedUri
- name: generate_token
  endpoint:
    path: /i9/v1/employers/{employerId}/employees/{employeeId}/generateToken
    method: GET
    data_selector: token
- name: generate_token
  endpoint:
    path: /i9/v1/employers/{employerId}/admins/{adminId}/generateToken
    method: GET
    data_selector: token
    params: {}
- name: i9_submission
  endpoint:
    path: /i9/v1/employers/{employerId}/employees/{employeeId}/submissions/{submissionId}
    method: GET
    data_selector: submission
- name: audit_logs
  endpoint:
    path: /i9/audit-logs
    method: GET
    data_selector: auditLogs
- name: document_verification_resolution
  endpoint:
    path: /i9/document-verification-resolution
    method: GET
    data_selector: documentVerificationResolution
- name: reverification_rehire
  endpoint:
    path: /i9/reverification-rehire
    method: GET
    data_selector: reverificationRehire
- name: fields
  endpoint:
    path: /i9/fields
    method: GET
    data_selector: fields
- name: audit_logs
  endpoint:
    path: /employers/{employerId}/employees/{employeeId}/submissions/{submissionId}
    method: GET
    data_selector: submission.auditLogs
- name: audit_logs
  endpoint:
    path: /employers/{employerId}/employees/{employeeId}/submissions/{submissionId}
    method: GET
    data_selector: submission.auditLogs
- name: document_verification_results
  endpoint:
    path: /employers/{employerId}/employees/{employeeId}/submissions/{submissionId}
    method: GET
- name: employers
  endpoint:
    path: /employers
    method: GET
    data_selector: records
    params: {}
- name: employees
  endpoint:
    path: /employers/{employerId}/employees
    method: GET
    data_selector: records
    params: {}
- name: submissions
  endpoint:
    path: /employers/{employerId}/employees/{employeeId}/submissions
    method: GET
    data_selector: records
    params: {}
- name: admins
  endpoint:
    path: /employers/{employerId}/admins
    method: GET
    data_selector: records
    params: {}
- name: everifyCases
  endpoint:
    path: /employers/{employerId}/everifyCases
    method: GET
    data_selector: records
    params: {}
- name: everify_cases
  endpoint:
    path: /employers/{employerId}/everifyCases/{id}
    method: GET
    data_selector: everifyCase
    params:
      id: string
      employerId: string
- name: detailed_e_verify_case
  endpoint:
    path: /retrieve/detailed_e_verify_case
    method: GET
    data_selector: everifyCase
- name: case_statuses
  endpoint:
    path: /i9/e-verify-case-statuses
    method: GET
    data_selector: statuses
    params: {}
- name: webhook_events
  endpoint:
    path: /employers
    method: POST
- name: timezones
  endpoint:
    path: /i9/timezones
    method: GET
    data_selector: timezones
- name: taxes
  endpoint:
    path: /taxes
    method: GET
- name: account_info
  endpoint:
    path: /account_info
    method: GET
- name: tax_results
  endpoint:
    path: /api/tax_results
    method: GET
    data_selector: taxes
    params: {}
- name: Minimum Wage Rates by Location
  endpoint:
    path: /mw-api/mw-rates-by-location
    method: GET
- name: Minimum Wage Rates by ID
  endpoint:
    path: /mw-api/mw-rates-by-id
    method: GET
- name: Minimum Wage Rates by Upcoming Effective Date
  endpoint:
    path: /mw-api/get-minimum-wage-rates-by-upcoming-effective-date
    method: GET
- name: minimum_wage_rates_by_location
  endpoint:
    path: /mwf-api/mw-rates-by-location
    method: GET
    data_selector: rates
    params: {}
- name: minimum_wage_rates_by_id
  endpoint:
    path: /mwf-api/mw-rates-by-id
    method: GET
    data_selector: rates
    params: {}
- name: minimum_wage_rates_by_upcoming_effective_date
  endpoint:
    path: /mwf-api/get-minimum-wage-rates-by-upcoming-effective-date
    method: GET
    data_selector: rates
    params: {}
- name: authentication
  endpoint:
    path: /authentication/login
    method: GET
- name: taxes
  endpoint:
    path: /prp/v1/taxes
    method: POST
- name: accountInfo
  endpoint:
    path: /prp/v1/accountInfo
    method: GET
- name: minimumWageById
  endpoint:
    path: /prp/v1/minimumwage/id
    method: GET
- name: minimumWageByLocation
  endpoint:
    path: /prp/v1/minimumwage/location
    method: GET
- name: minimumWageEffective
  endpoint:
    path: /prp/v1/minimumwage/rates/effective
    method: GET
- name: taxes
  endpoint:
    path: /prp/v1/taxes
    method: GET
    data_selector: result
    params: {}
- name: locationDetails
  endpoint:
    path: /prp/v1/taxes
    method: GET
    data_selector: locationDetails
    params: {}
- name: features
  endpoint:
    path: /prp/v1/taxes
    method: GET
    data_selector: features
    params: {}
- name: addressResults
  endpoint:
    path: /prp/v1/taxes
    method: GET
    data_selector: addressResults
    params: {}
- name: taxResults
  endpoint:
    path: /prp/v1/taxes
    method: GET
    data_selector: taxResults
    params: {}
- name: minimumWage
  endpoint:
    path: /prp/v1/taxes
    method: GET
    data_selector: minimumWage
    params: {}
- name: account_info
  endpoint:
    path: /prp/v1/accountInfo
    method: GET
    data_selector: transactions
    params:
      startDate: '2021-08-01'
      endDate: '2022-12-31'
- name: minimum_wage_by_location
  endpoint:
    path: /prp/v1/minimumwage/location
    method: GET
    data_selector: rates
    params:
      streetAddress1: string
      city: string
      state: string
      zipCode: string
      effectiveDate: YYYY-MM-DD
      latitude: string
      longitude: string
      useAddressSuggestion: boolean
- name: minimum_wage_by_id
  endpoint:
    path: /prp/v1/minimumwage/id
    method: GET
    data_selector: rates
    params: {}
- name: minimum_wage_by_effective_date
  endpoint:
    path: /prp/v1/minimumwage/rates/effective
    method: GET
    data_selector: rates
    params: {}
- name: minimum_wage_by_id
  endpoint:
    path: /prp/v1/minimumwage/id
    method: GET
    data_selector: ratesPage.content
    params:
      mwUid: required
- name: upcoming_minimum_wage_rates
  endpoint:
    path: /prp/v1/minimumwage/rates/effective
    method: GET
    data_selector: ''
    params: {}
- name: minimum_wage_by_location
  endpoint:
    path: /prp/v1/minimumwage/location
    method: GET
    data_selector: rates
    params:
      streetAddress1: string
      city: string
      state: string
      zipCode: XXXXX or XXXXX-XXXX
      effectiveDate: YYYY-MM-DD
      latitude: string
      longitude: string
      useAddressSuggestion: boolean
- name: minimum_wage_by_id
  endpoint:
    path: /prp/v1/minimumwage/id
    method: GET
    data_selector: rates
- name: minimum_wage_upcoming_effective
  endpoint:
    path: /prp/v1/minimumwage/rates/effective
    method: GET
    data_selector: rates
- name: address_suggestions
  endpoint:
    path: /prp-api-address-suggestions
    method: GET
    data_selector: records
    params:
      useAddressSuggestion: 'false'
- name: minimum_wage_by_id
  endpoint:
    path: /prp/v1/minimumwage/id
    method: GET
    data_selector: ratesPage.content
    params:
      mwUid: required
- name: upcoming_minimum_wage_rates
  endpoint:
    path: /prp/v1/minimumwage/rates/effective
    method: GET
    data_selector: ''
    params: {}
- name: minimum_wage_rates_by_location
  endpoint:
    path: /api/mwf/mw-rates-by-location
    method: GET
- name: minimum_wage_rates_by_id
  endpoint:
    path: /api/mwf/mw-rates-by-id
    method: GET
- name: minimum_wage_rates_by_upcoming_effective_date
  endpoint:
    path: /api/mwf/mw-rates-by-upcoming-effective-date
    method: GET
- name: address_suggestions
  endpoint:
    path: /prp-api-address-suggestions
    method: GET
    data_selector: records
    params:
      useAddressSuggestion: 'false'
- name: minimum_wage_rates_by_location
  endpoint:
    path: /mw-api/mw-rates-by-location
    method: GET
- name: minimum_wage_rates_by_id
  endpoint:
    path: /mw-api/mw-rates-by-id
    method: GET
- name: minimum_wage_rates_by_upcoming_effective_date
  endpoint:
    path: /mw-api/get-minimum-wage-rates-by-upcoming-effective-date
    method: GET
- name: Address Exceptions
  endpoint:
    path: /mwf-api-address-exceptions
    method: GET
- name: minimum_wage_by_location
  endpoint:
    path: /mwf/v1/location
    method: GET
- name: minimum_wage_by_id
  endpoint:
    path: /mwf/v1/id
    method: GET
- name: upcoming_minimum_wage_rates
  endpoint:
    path: /mwf/v1/rates/effective
    method: GET
- name: address_exceptions
  endpoint:
    path: /mwf-api-address-exceptions
    method: GET
    data_selector: records
    params: {}
- name: minimum_wage_by_location
  endpoint:
    path: /mwf/v1/location
    method: GET
- name: minimum_wage_by_id
  endpoint:
    path: /mwf/v1/id
    method: GET
- name: upcoming_minimum_wage_rates
  endpoint:
    path: /mwf/v1/rates/effective
    method: GET
- name: minimum_wage_rates_by_location
  endpoint:
    path: /mwf/v1/location
    method: GET
    data_selector: rates
    params:
      streetAddress1: ''
      streetAddress2: ''
      city: ''
      state: ''
      zipCode: ''
      effectiveDate: ''
      latitude: ''
      longitude: ''
- name: minimum_wage_rates_by_id
  endpoint:
    path: /mwf/v1/id
    method: GET
    data_selector: ratesPage.content
    params:
      mwUid: String
      effectiveDate: YYYY-MM-DD
      pageNumber: Number
      pageSize: Number
- name: minimum_wage_rates_by_location
  endpoint:
    path: /mwf/v1/location
    method: GET
    data_selector: rates
    params:
      streetAddress1: string
      streetAddress2: string
      city: string
      state: string
      zipCode: string
      effectiveDate: YYYY-MM-DD
      latitude: string
      longitude: string
- name: get_minimum_wage_rates_by_upcoming_effective_date
  endpoint:
    path: /mwf/v1/rates/effective
    method: GET
    data_selector: content
    params:
      from: '2025-09-01'
      to: '2025-12-31'
- name: minimum_wage_by_id
  endpoint:
    path: /mwf/v1/id
    method: GET
    data_selector: content
    params:
      mwUid: String
- name: minimum_wage_rates
  endpoint:
    path: /mwf/v1/rates/effective
    method: GET
    data_selector: content
    params:
      from: '2025-09-01'
      to: '2025-12-31'
- name: rates
  endpoint:
    path: /mwf/v1/id
    method: GET
    data_selector: content
    params: {}
- name: rates
  endpoint:
    path: /mwf/v1/id
    method: GET
    data_selector: rates
    params: {}
- name: salary_calculator
  endpoint:
    path: /widget/js/salary.js
    method: GET
    data_selector: calculator
    params:
      key: yourKey
- name: salary_calculator_widget
  endpoint:
    path: /widget/js/salary.js
    method: GET
- name: calculator
  endpoint:
    path: /widget/js/salary.js
    method: GET
    data_selector: helptext
    params: {}
- name: default_values
  endpoint:
    path: /widget/js/salary.js
    method: GET
    data_selector: model
- name: model
  endpoint:
    path: /docs/examples/model.json
    method: GET
    data_selector: model
    params: {}
- name: styles
  endpoint:
    path: /widget/js/salary.js
    method: GET
    data_selector: style
    params:
      url: https://calculators.symmetry.com/docs/examples/style.json
- name: helptext
  endpoint:
    path: /widget/js/salary.js
    method: GET
    data_selector: helptext
    params:
      url: https://calculators.symmetry.com/docs/examples/helptext.json
- name: salary
  endpoint:
    path: /widget/js/salary.js
    method: GET
- name: hourly
  endpoint:
    path: /widget/js/hourly.js
    method: GET
- name: gross_up
  endpoint:
    path: /widget/js/grossup.js
    method: GET
- name: flat_bonus
  endpoint:
    path: /widget/js/flatbonus.js
    method: GET
- name: aggregate_bonus
  endpoint:
    path: /widget/js/agbonus.js
    method: GET
- name: 401k
  endpoint:
    path: /widget/js/401k.js
    method: GET
- name: 403b
  endpoint:
    path: /widget/js/403b.js
    method: GET
- name: final_pay
  endpoint:
    path: /widget/js/finalpay.js
    method: GET
- name: stock_option
  endpoint:
    path: /widget/js/stockoption.js
    method: GET
- name: tuition
  endpoint:
    path: /widget/js/tuition.js
    method: GET
- name: tax_tip
  endpoint:
    path: /widget/js/taxtip.js
    method: GET
- name: multi_scenario
  endpoint:
    path: /widget/js/multi.js
    method: GET
- name: salary_widget
  endpoint:
    path: /widget/js/salary.js
    method: GET
- name: hourly_widget
  endpoint:
    path: /widget/js/hourly.js
    method: GET
- name: gross_up_widget
  endpoint:
    path: /widget/js/grossup.js
    method: GET
- name: flat_bonus_widget
  endpoint:
    path: /widget/js/flatbonus.js
    method: GET
- name: aggregate_bonus_widget
  endpoint:
    path: /widget/js/agbonus.js
    method: GET
- name: 401k_widget
  endpoint:
    path: /widget/js/401k.js
    method: GET
- name: 403b_widget
  endpoint:
    path: /widget/js/403b.js
    method: GET
- name: final_pay_widget
  endpoint:
    path: /widget/js/finalpay.js
    method: GET
- name: stock_option_widget
  endpoint:
    path: /widget/js/stockoption.js
    method: GET
- name: tuition_widget
  endpoint:
    path: /widget/js/tuition.js
    method: GET
- name: tax_tip_widget
  endpoint:
    path: /widget/js/taxtip.js
    method: GET
- name: multi_scenario_widget
  endpoint:
    path: /widget/js/multi.js
    method: GET
- name: multi_calculator
  endpoint:
    path: /widget/js/multi.js
    method: GET
    data_selector: widgets
- name: calculators
  endpoint:
    path: /calculators
    method: GET
    data_selector: content
- name: calculators
  endpoint:
    path: /calculators
    method: GET
    data_selector: content
- name: calculate
  endpoint:
    path: /calculators/:calculator
    method: POST
    data_selector: content
    params:
      showcalc: 'false'
      report: ''
- name: report_model
  endpoint:
    path: /api/print
    method: GET
    data_selector: content
    params: {}
- name: create_report
  endpoint:
    path: /api/print
    method: POST
    data_selector: content
    params: {}
- name: calculator
  endpoint:
    path: /calculators/:calculator
    method: POST
    data_selector: content
    params: {}
- name: Compute gross-to-net tax withholding
  endpoint:
    path: /payCalc
    method: POST
- name: report_model
  endpoint:
    path: /print
    method: GET
    params: {}
- name: create_report
  endpoint:
    path: /print
    method: POST
    params: {}
- name: compute_gross_to_net_tax_withholding
  endpoint:
    path: /payCalc
    method: POST
- name: tax_engine
  endpoint:
    path: /reference/compute-gross-to-net-calculations
    method: POST
- name: payroll_forms
  endpoint:
    path: /reference/getallformids
    method: GET
- name: i9
  endpoint:
    path: /reference/getallemployers
    method: GET
- name: payroll_point
  endpoint:
    path: /reference/retrieve-taxes
    method: POST
- name: minimum_wage_finder
  endpoint:
    path: /reference/mwf-id
    method: GET
- name: forms
  endpoint:
    path: /reference/getallformids
    method: GET
- name: questions
  endpoint:
    path: /reference/getguidedflowquestionset
    method: GET
- name: pdf_and_tax_parameters
  endpoint:
    path: /reference/fillformdata
    method: POST
- name: gross_up_payment
  endpoint:
    path: /grossUp
    method: POST
- name: gross_up_payment
  endpoint:
    path: /grossUp
    method: POST
- name: location_code
  endpoint:
    path: /locationCode
    method: POST
- name: retrieve_potentially_applicable_taxes
  endpoint:
    path: /setTaxList
    method: POST
- name: location_code
  endpoint:
    path: /locationCode
    method: POST
- name: retrieve_unique_tax_ids
  endpoint:
    path: /v2/taxIdList
    method: POST
- name: retrieve_potentially_applicable_taxes
  endpoint:
    path: /setTaxList
    method: POST
- name: unique_parameters_for_specific_taxes
  endpoint:
    path: /jurisdictionData
    method: POST
    data_selector: response
- name: retrieve_unique_tax_ids
  endpoint:
    path: /ste-hosted/v2/taxIdList
    method: POST
- name: unique_parameters_for_specific_taxes
  endpoint:
    path: /jurisdictionData
    method: POST
    data_selector: response
- name: benefit_status
  endpoint:
    path: /benefitStatus
    method: POST
    data_selector: response
    params: {}
- name: benefit_status
  endpoint:
    path: /benefitStatus
    method: POST
- name: account_information
  endpoint:
    path: /accountInfo
    method: GET
    data_selector: response
    params: {}
- name: account_information
  endpoint:
    path: /accountInfo
    method: GET
    data_selector: accountInfo
    params: {}
- name: account_information
  endpoint:
    path: /accountInfo
    method: POST
- name: account_information
  endpoint:
    path: /v1/accountInfo
    method: POST
- name: Retrieve API schema
  endpoint:
    path: /getSchema
    method: GET
- name: Retrieve API schema
  endpoint:
    path: /getSchema
    method: GET
- name: form_ids
  endpoint:
    path: /spf/getAllFormIds
    method: GET
    data_selector: formIds
- name: forms
  endpoint:
    path: /spf/forms
    method: POST
- name: form_ids
  endpoint:
    path: /spf/getAllFormIds
    method: GET
    data_selector: formIds
- name: guided_flows
  endpoint:
    path: /spf/guided-flows
    method: POST
- name: forms
  endpoint:
    path: /spf/forms
    method: POST
    data_selector: response
    params: {}
- name: flowQuestionSet
  endpoint:
    path: /spf/flowQuestionSet/{flowId}/{questionSetId}
    method: GET
- name: guided_flows
  endpoint:
    path: /spf/guided-flows
    method: POST
- name: formQuestionSet
  endpoint:
    path: /spf/formQuestionSet/{formId}/{questionSetId}
    method: GET
    data_selector: response
    params: {}
- name: flowQuestionSet
  endpoint:
    path: /spf/flowQuestionSet/{flowId}/{questionSetId}
    method: GET
    data_selector: response
- name: fillPdf
  endpoint:
    path: /spf/fillPdf
    method: POST
    data_selector: response
    params: {}
- name: formQuestionSet
  endpoint:
    path: /spf/formQuestionSet/{formId}/{questionSetId}
    method: GET
- name: getPdf
  endpoint:
    path: /spf/getPdf/{formId}
    method: GET
    data_selector: byte stream
- name: fillPdf
  endpoint:
    path: /spf/fillPdf
    method: POST
    data_selector: response
    params: {}
- name: fillPdf
  endpoint:
    path: /spf/fillPdf/{formId}
    method: GET
    data_selector: fields
- name: forms
  endpoint:
    path: /getallformids
    method: GET
- name: questions
  endpoint:
    path: /getguidedflowquestionset
    method: GET
- name: pdf_and_tax_parameters
  endpoint:
    path: /fillformdata
    method: POST
- name: getPdf
  endpoint:
    path: /spf/getPdf/{formId}
    method: GET
    data_selector: byte stream
- name: employers
  endpoint:
    path: /employers
    method: GET
    data_selector: employers
- name: fillPdf
  endpoint:
    path: /spf/fillPdf/{formId}
    method: GET
    data_selector: fields
    params: {}
- name: employers
  endpoint:
    path: /employers
    method: POST
- name: E-Verify Settings
  endpoint:
    path: /i9/v1/employers/{employerId}/everifySettings
    method: POST
- name: forms
  endpoint:
    path: /getallformids
    method: GET
- name: taxation_information
  endpoint:
    path: /retrieve-potentially-applicable-taxes-for-a-location
    method: POST
- name: employer_data
  endpoint:
    path: /employers/{employerId}
    method: GET
- name: employers
  endpoint:
    path: /employers
    method: GET
    data_selector: employers
- name: employer
  endpoint:
    path: /employers/{employerId}
    method: PATCH
- name: employer
  endpoint:
    path: /employers
    method: POST
- name: employees
  endpoint:
    path: /employers/{employerId}/employees
    method: GET
- name: configure_e_verify_settings
  endpoint:
    path: /i9/v1/employers/{employerId}/everifySettings
    method: POST
- name: employer
  endpoint:
    path: /employers/{employerId}
    method: GET
    data_selector: employerData
- name: employee
  endpoint:
    path: /i9/v1/employers/{employerId}/employees
    method: POST
    data_selector: employee
    params: {}
- name: employer
  endpoint:
    path: /employers/{employerId}
    method: PATCH
- name: employee
  endpoint:
    path: /employers/{employerId}/employees/{employeeId}
    method: GET
    data_selector: response
- name: employees
  endpoint:
    path: /employers/{employerId}/employees
    method: GET
- name: employee
  endpoint:
    path: /employers/{employerId}/employees/{employeeId}
    method: DELETE
- name: update_employee
  endpoint:
    path: /i9/v1/employers/{employerId}/employees/{employeeId}
    method: PATCH
- name: register_employee
  endpoint:
    path: /i9/v1/employers/{employerId}/employees
    method: POST
- name: I9_submissions
  endpoint:
    path: /i9/v1/employers/{employerId}/employees/{employeeId}/submissions
    method: GET
- name: employee
  endpoint:
    path: /employers/{employerId}/employees/{employeeId}
    method: GET
    data_selector: response
- name: submission
  endpoint:
    path: /employers/{employerId}/employees/{employeeId}/submissions/{submissionId}
    method: GET
- name: delete_employee
  endpoint:
    path: /i9/v1/employers/{employerId}/employees/{employeeId}
    method: DELETE
- name: generate_token
  endpoint:
    path: /i9/v1/employers/{employerId}/employees/{employeeId}/generateToken
    method: GET
- name: update_employee
  endpoint:
    path: /employers/{employerId}/employees/{employeeId}
    method: PATCH
- name: admin
  endpoint:
    path: /i9/v1/employers/{employerId}/admins
    method: GET
- name: i9_submissions
  endpoint:
    path: /i9/v1/employers/{employerId}/employees/{employeeId}/submissions
    method: GET
- name: admin
  endpoint:
    path: /employers/{employerId}/admins
    method: POST
- name: I9 submission
  endpoint:
    path: /i9/v1/employers/{employerId}/employees/{employeeId}/submissions/{submissionId}
    method: GET
- name: generate_token
  endpoint:
    path: /i9/v1/employers/{employerId}/employees/{employeeId}/generateToken
    method: GET
- name: admin
  endpoint:
    path: /employers/{employerId}/admins/{adminId}
    method: GET
- name: admin
  endpoint:
    path: /employers/{employerId}/admins
    method: GET
- name: admin
  endpoint:
    path: /i9/v1/employers/{employerId}/admins/{adminId}
    method: DELETE
- name: admin
  endpoint:
    path: /employers/{employerId}/admins
    method: POST
- name: admin
  endpoint:
    path: /i9/v1/employers/{employerId}/admins/{adminId}
    method: PATCH
- name: admin
  endpoint:
    path: /employers/{employerId}/admins/{adminId}
    method: GET
- name: generate_token
  endpoint:
    path: /employers/{employerId}/admins/{adminId}/generateToken
    method: GET
- name: admin
  endpoint:
    path: /i9/v1/employers/{employerId}/admins/{adminId}
    method: DELETE
- name: generate_pending_countersign_uri
  endpoint:
    path: /i9/v1/employers/{employerId}/admins/{adminId}/generatePendingCountersignUri
    method: GET
- name: admin
  endpoint:
    path: /employers/{employerId}/admins/{adminId}/generatePendingCountersignUri
    method: GET
- name: admin
  endpoint:
    path: /i9/v1/employers/{employerId}/admins/{adminId}
    method: PATCH
- name: generate_token
  endpoint:
    path: /employers/{employerId}/admins/{adminId}/generateToken
    method: GET
- name: generate_e_verify_settings
  endpoint:
    path: /i9/v1/employers/{employerId}/admins/{adminId}/everifySettings/generateEverifySettingsUri
    method: GET
- name: EVerifyCases
  endpoint:
    path: /i9/v1/employers/{employerId}/admins/{adminId}/everifyCases/generateUri
    method: GET
- name: generate_pending_countersign_uri
  endpoint:
    path: /i9/v1/employers/{employerId}/admins/{adminId}/generatePendingCountersignUri
    method: GET
    data_selector: token
- name: EVerify Cases
  endpoint:
    path: /employers/{employerId}/admins/{adminId}/everifyCases/generateUri
    method: GET
    data_selector: token
- name: generate_e_verify_settings_uri
  endpoint:
    path: /i9/v1/employers/{employerId}/admins/{adminId}/everifySettings/generateEverifySettingsUri
    method: GET
- name: generate_employee_submission_link
  endpoint:
    path: /i9/v1/employers/{employerId}/admins/{adminId}/employees/{employeeId}/submissions/{submissionId}/generateUri
    method: GET
- name: E-Verify Settings
  endpoint:
    path: /i9/v1/employers/{employerId}/admins/{adminId}/everifySettings/generateEverifySettingsUri
    method: GET
    data_selector: token
- name: employee_submission
  endpoint:
    path: /employers/{employerId}/admins/{adminId}/employees/{employeeId}/submissions/{submissionId}/generateUri
    method: GET
    data_selector: token
- name: EVerifyCases
  endpoint:
    path: /i9/v1/employers/{employerId}/admins/{adminId}/everifyCases/generateUri
    method: GET
- name: version
  endpoint:
    path: /i9/version
    method: GET
- name: generate_e_verify_case_uri
  endpoint:
    path: /employers/{employerId}/admins/{adminId}/everifyCases/generateUri
    method: GET
    data_selector: token
- name: version
  endpoint:
    path: /version
    method: GET
    data_selector: object
- name: generate_employee_submission_link
  endpoint:
    path: /i9/v1/employers/{employerId}/admins/{adminId}/employees/{employeeId}/submissions/{submissionId}/generateUri
    method: GET
- name: employee_submission
  endpoint:
    path: /employers/{employerId}/admins/{adminId}/employees/{employeeId}/submissions/{submissionId}/generateUri
    method: GET
- name: everify_cases
  endpoint:
    path: /i9/v1/employers/{employerId}/everifyCases
    method: GET
    data_selector: everifyCases
    params:
      actionRequired: 'false'
      page: '1'
- name: version
  endpoint:
    path: /version
    method: GET
    data_selector: response
- name: version
  endpoint:
    path: /version
    method: GET
- name: e_verify_cases
  endpoint:
    path: /i9/v1/employers/{employerId}/everifyCases
    method: GET
    params:
      actionRequired: 'false'
      page: 1
- name: e_verify_case
  endpoint:
    path: /i9/v1/employers/{employerId}/everifyCases/{id}
    method: GET
    data_selector: response
- name: everify_cases
  endpoint:
    path: /i9/v1/employers/{employerId}/everifyCases
    method: GET
    data_selector: everifyCases
    params:
      actionRequired: 'false'
      page: 1
- name: postman_environment_variables
  endpoint:
    path: /postman/environment
    method: GET
- name: e_verify_case
  endpoint:
    path: /i9/v1/employers/{employerId}/everifyCases/{id}
    method: GET
    data_selector: ''
- name: Payroll Calculations
  endpoint:
    path: /compute-gross-to-net-calculations
    method: POST
- name: Retrieve Account Information
  endpoint:
    path: /retrieve-account-information-get
    method: GET
- name: Open API configuration
  endpoint:
    path: /docs/config
    method: GET
- name: employer
  endpoint:
    path: /getallemployers
    method: GET
- name: employee
  endpoint:
    path: /getemployees
    method: GET
- name: admin
  endpoint:
    path: /getadmins
    method: GET
- name: Payroll Calculations
  endpoint:
    path: /compute-gross-to-net-calculations
    method: POST
- name: Retrieve Account Information
  endpoint:
    path: /retrieve-account-information-get
    method: GET
- name: account_information
  endpoint:
    path: /reference/retrieve-account-information-get
    method: GET
    data_selector: records
- name: employer
  endpoint:
    path: /reference/getallemployers
    method: GET
    data_selector: records
- name: employee
  endpoint:
    path: /reference/getemployees
    method: GET
    data_selector: records
- name: Open API configuration
  endpoint:
    path: /i9/docs/config
    method: GET
- name: retrieve_taxes
  endpoint:
    path: /prp/v1/taxes
    method: POST
- name: Employer
  endpoint:
    path: /reference/getallemployers
    method: GET
    data_selector: records
    params: {}
- name: Employee
  endpoint:
    path: /reference/getemployees
    method: GET
    data_selector: records
    params: {}
- name: retrieve_taxes
  endpoint:
    path: /prp/v1/taxes
    method: POST
- name: retrieve_taxes
  endpoint:
    path: /prp/v1/taxes
    method: POST
- name: minimum_wage_rates
  endpoint:
    path: /prp/v1/minimumwage/id
    method: GET
- name: retrieve_taxes
  endpoint:
    path: /taxes
    method: POST
- name: minimum_wage_rates
  endpoint:
    path: /prp/v1/minimumwage/id
    method: GET
    data_selector: response
- name: minimum_wage_rates_by_location
  endpoint:
    path: /minimumwage/location
    method: GET
    data_selector: response
    params:
      streetAddress1: 14350 N 87th St
      streetAddress2: Ste 310
      city: Scottsdale
      state: AZ
      zipCode: '85260'
      effectiveDate: '2021-01-01'
- name: minimum_wage_rates_location
  endpoint:
    path: /prp/v1/minimumwage/location
    method: GET
    data_selector: response
    params:
      streetAddress1: 14350 N 87th St
      streetAddress2: Ste 310
      city: Scottsdale
      state: AZ
      zipCode: '85260'
      effectiveDate: '2021-01-01'
- name: Minimum Wage Rates by Location
  endpoint:
    path: /prp/v1/minimumwage/location
    method: GET
    data_selector: response
    params:
      streetAddress1: 14350 N 87th St
      streetAddress2: Ste 310
      city: Scottsdale
      state: AZ
      zipCode: '85260'
      effectiveDate: '2021-01-01'
- name: minimum_wage_rates_by_location
  endpoint:
    path: /prp/v1/minimumwage/location
    method: GET
    data_selector: json
    params:
      streetAddress1: 14350 N 87th St
      streetAddress2: Ste 310
      city: Scottsdale
      state: AZ
      zipCode: '85260'
      effectiveDate: '2021-01-01'
- name: account_info
  endpoint:
    path: /prp/v1/accountInfo
    method: GET
    data_selector: object
    params:
      startDate: '2022-01-01'
      endDate: '2022-12-31'
- name: account_info
  endpoint:
    path: /prp/v1/accountInfo
    method: GET
    data_selector: object
    params:
      startDate: '2022-01-01'
      endDate: '2022-12-31'
- name: account_information
  endpoint:
    path: /accountInfo
    method: GET
    data_selector: object
    params:
      startDate: '2022-01-01'
      endDate: '2022-12-31'
- name: account_information
  endpoint:
    path: /accountInfo
    method: GET
    data_selector: object
    params:
      startDate: '2022-01-01'
      endDate: '2022-12-31'
- name: Retrieve Minimum Wage Rates by Unique ID
  endpoint:
    path: /mwf/v1/id
    method: GET
    data_selector: response
    params:
      mwUid: ''
      effectiveDate: ''
      updatedSince: ''
      pageNumber: ''
      pageSize: ''
- name: retrieve_minimum_wage_rates_by_unique_id
  endpoint:
    path: /mwf/v1/id
    method: GET
    data_selector: response
    params:
      mwUid: required
      effectiveDate: ''
      updatedSince: ''
      pageNumber: required
      pageSize: required
- name: retrieve_minimum_wage_rates_by_unique_id
  endpoint:
    path: /mwf/v1/id
    method: GET
    data_selector: content
    params:
      mwUid: required
      effectiveDate: optional
      updatedSince: optional
      pageNumber: required
      pageSize: required
- name: minimum_wage_rates_by_location
  endpoint:
    path: /mwf/v1/location
    method: GET
- name: Retrieve Minimum Wage Rates by Unique ID
  endpoint:
    path: /mwf/v1/id
    method: GET
    data_selector: ratesPage.content
    params:
      mwUid: required
      effectiveDate: optional
      updatedSince: optional
      pageNumber: required
      pageSize: required
- name: minimum_wage_rates_effective_dates
  endpoint:
    path: /mwf/v1/rates/effective
    method: GET
    params: {}
- name: minimum_wage_rates
  endpoint:
    path: /mwf/v1/location
    method: GET
    data_selector: RESPONSE
- name: minimum_wage_rates_effective_dates
  endpoint:
    path: /mwf/v1/rates/effective
    method: GET
    data_selector: object
    params: {}
- name: retrieve_minimum_wage_rates_by_effective_dates
  endpoint:
    path: /mwf/v1/rates/effective
    method: GET
    data_selector: upcoming minimum wage rates
    params:
      mwUid: '*-*-*-*-*-*'
      from: date-time
      to: date-time
- name: minimum_wage_rates_by_effective_dates
  endpoint:
    path: /mwf/v1/rates/effective
    method: GET
    data_selector: object
    params: {}
- name: calculators
  endpoint:
    path: /calculators
    method: GET
- name: reports
  endpoint:
    path: /reports
    method: GET
- name: payroll_forms
  endpoint:
    path: /api/payroll_forms
    method: GET
    data_selector: records
- name: completed_i9_data
  endpoint:
    path: /i9/receive-completed-data
    method: GET
- name: completed_i9_data
  endpoint:
    path: /i9/receive-completed-data
    method: GET
- name: Calculators API
  endpoint:
    path: /edit/cbs-api-overview
    method: GET
- name: minimum_wage_rates_by_location
  endpoint:
    path: /mwf-api/mw-rates-by-location
    method: GET
- name: minimum_wage_rates_by_id
  endpoint:
    path: /mwf-api/mw-rates-by-id
    method: GET
- name: minimum_wage_rates_by_upcoming_effective_date
  endpoint:
    path: /mwf-api/get-minimum-wage-rates-by-upcoming-effective-date
    method: GET
- name: taxes
  endpoint:
    path: /spf-api-taxes-endpoint
    method: GET
- name: account_info
  endpoint:
    path: /spf-api-account-info-endpoint
    method: GET
- name: minimum_wage_rates_by_location
  endpoint:
    path: /get-minimum-wage-rates-by-location
    method: GET
- name: minimum_wage_rates_by_id
  endpoint:
    path: /get-minimum-wage-rates-by-id
    method: GET
- name: minimum_wage_rates_by_effective_date
  endpoint:
    path: /get-minimum-wage-rates-by-upcoming-effective-date
    method: GET
- name: minimum_wage_rates_by_location
  endpoint:
    path: /minimum_wage/rates/location
    method: GET
- name: minimum_wage_rates_by_id
  endpoint:
    path: /minimum_wage/rates/id
    method: GET
- name: minimum_wage_rates_by_effective_date
  endpoint:
    path: /minimum_wage/rates/effective_date
    method: GET
- name: minimum_wage_rates_by_location
  endpoint:
    path: /mwf/v1/location
    method: GET
    data_selector: data
- name: minimum_wage_rates_by_id
  endpoint:
    path: /mwf/v1/id
    method: GET
    data_selector: data
- name: minimum_wage_rates_by_upcoming_effective_date
  endpoint:
    path: /mwf/v1/upcoming
    method: GET
    data_selector: data
- name: get_minimum_wage_rates_by_location
  endpoint:
    path: /mwf-api/mw-rates-by-location
    method: GET
- name: get_minimum_wage_rates_by_id
  endpoint:
    path: /mwf-api/mw-rates-by-id
    method: GET
- name: get_minimum_wage_rates_by_upcoming_effective_date
  endpoint:
    path: /get-minimum-wage-rates-by-upcoming-effective-date
    method: GET
- name: minimum_wage_by_id
  endpoint:
    path: /mwf/v1/id
    method: GET
- name: minimum_wage_rates_by_upcoming_effective_date
  endpoint:
    path: /mwf/v1/rates/effective
    method: GET
- name: minimum_wage_rates_by_location
  endpoint:
    path: /mwf/v1/location
    method: GET
- name: minimum_wage_rates_by_id
  endpoint:
    path: /mwf/v1/id
    method: GET
- name: minimum_wage_rates_by_upcoming_effective_date
  endpoint:
    path: /mwf/v1/upcoming
    method: GET
- name: minimum_wage_by_id
  endpoint:
    path: /mwf-api/mw-rates-by-id
    method: GET
- name: minimum_wage_rates_by_upcoming_effective_date
  endpoint:
    path: /mwf/v1/rates/effective
    method: GET
- name: calculators
  endpoint:
    path: /calculators
    method: GET
    data_selector: data
    params: {}
- name: reports
  endpoint:
    path: /reports
    method: GET
    data_selector: data
    params: {}
notes:
- Address verification not supported for Canada
- PO Boxes and Private Mailboxes are not valid addresses
- 'If the address is a home address: homeSchoolDistrictName, homeSchoolDistrictCode'
- 'If the address is a work address: workSchoolDistrictName, workSchoolDistrictCode'
- The engine will convert addresses to location codes for you, but you must do this
  before calculating payroll taxes.
- The taxes returned by the STE should always be considered "potentially applicable".
- Uses OAuth2 with refresh token — requires setup of connected app in Symmetry
- Each object within the 'taxItem' array represents a separate tax.
- Uses miscellaneous parameters for calculating taxes
- The STE is stateless and does not store any information.
- 'Location codes for Canada: Federal - 80-000-0000, British Columbia - 82-000-0000'
- The date for payroll must be in YYYY-MM-DD format.
- Most miscellaneous parameters are only used for special scenarios.
- The payCalc endpoint has a batch size limit of 100.
- Uses a simple GET request for payroll calculation
- Use your API key to authorize access to the STE API endpoints.
- Guided Mode is designed to help determine the precise withholding form(s) a user
  may need based on their unique withholding scenario.
- Accept-Language can be specified using the Accept-Language HTTP header.
- SPF API is compliant for both United States and Canada
- Provide address information to the forms POST endpoint
- Final question set can be identified when hasMoreQuestions equals false
- Uses OAuth2 with refresh token — requires setup of connected app in api
- JWT tokens are valid for 24 hours.
- The `/forms` endpoint may be passed a `timezone` in the headers, as the **Timezone**
  header, of the request to specify the timezone that should be used when signing
  and dating a completed form.
- Due to the nature of using a VARIABLE navigation type, the next page (question set)
  could have multiple paths.
- Using a CONSTANT navigation type, the next page (question set) is always the next
  question with no variance.
- We provide form versioning through a query parameter.
- We provide language support for English, Spanish and French.
- Client implementations of the SPF API are responsible for capturing and storing
  answers from each question set.
- It is not recommended to target a specific revision of a form as a long-term workaround.
- 'signForm will accept three different values: PREVIEW, SIGN, SIGN_EXTERNALLY. The
  default value is PREVIEW.'
- Timezone header may be passed to specify the timezone for signing and dating forms.
- Timezone IDs accepted by the `Timezone` header passed to the `/fillPdf` and `/forms`
  endpoints.
- Residency is a critical component of form determination for residents and non-residents.
- If you are a resident of a state that you cannot be a non-resident of the same state
  and vice versa.
- Nexus does not impact Canadian form determination
- Nexus is only used within SPF United States.
- Lock in Letters does not impact Canadian forms
- The concept of Lock in Letters is only used within SPF United States and is not
  used within the Canadian implementation of SPF
- For Pennsylvania residents, this has the effect of limiting multi-state form determination
  to Federal forms and PA local forms, removing any other forms outside of those jurisdictions.
- SPF Hosted is compliant for both United States and Canada.
- One-step registration can be utilized as a client-side request.
- Two-step registration utilizes a token to direct users to the correct flow.
- Settings Builder allows you to generate a prototype of the SPF Registration JSON
  file and customizations within SPF.
- The tool bypasses your interface and communicates with Symmetry Payroll Forms.
- Both US and Canadian SPF support all three form submissions modes
- Print Only option cannot be used in conjunction with the Postback or Emailback options
- Symmetry strongly advises all clients to use safe browsers when using SPF.
- Without specified nexus, SPF will act as if a user has nexus in every state.
- Current Symmetry clients can log into the Symmetry Client Support Center to see
  the complete list of elements used by Symmetry Payroll Forms within the SPF Registration
  JSON file and the Postback.
- API key is provided by Symmetry's Client Success Team during onboarding and unique
  to your company.
- One-time access tokens have a 30 minute expiration and will timeout after 1 hour
  of inactivity.
- You are responsible for appropriately storing completed I-9 metadata and forms based
  on your platform’s requirements.
- You are responsible for storing completed I-9 metadata and forms based on your platform’s
  requirements.
- Webhook configuration is necessary for event notifications.
- Token used to authenticate the employee into the embedded experience. Valid for
  30 minutes.
- Audit logs are automatically generated for every Form I-9 and E-Verify case.
- Symmetry returns all completed Form I-9 metadata and PDF data as JSON to the postback
  URL that's configured for the relevant employer. You are responsible for storing
  completed I-9 metadata and forms based on your platform's requirements. Symmetry
  does not and will not act as the source of truth for completed I-9 data.
- Employers must retain Form I-9 for three years after the employee's hire date or
  one year after their termination date, whichever is later.
- All GET endpoints that return lists of records support pagination via the ?page
  query parameter.
- All case actions must be taken within the embedded E-Verify experience by the employer’s
  administrator.
- The API returns various E-Verify case status values.
- Administrator actions may be required for certain statuses.
- Webhooks allow real-time notifications for I-9 events.
- Timezones are set at the employer level when registering a new employer or updating
  an existing employer.
- Returns all applicable taxes for each taxing scenario.
- Payroll Point uses geolocation to determine the correct applicable taxes with pinpoint
  accuracy.
- Clients have different authorization keys for the production and staging environments.
- Batch data is retained within the user interface for 30 days from the day the batch
  file was uploaded to Symmetry Payroll Point.
- Minimum wage data will only appear for clients who have licensed the Minimum Wage
  add-on for Symmetry Payroll Point.
- Global settings affect all users in your organization. Review and adjust your company’s
  global settings in Payroll Point before running any tax lookups, as these settings
  affect how taxes are returned.
- Tokens are valid for 24 hours.
- Clients must provide an active access token (accessToken) as a credential when connecting
  to this endpoint.
- transactions returned represent total number of API requests to the Payroll Point
  endpoints.
- Clients can read more about Symmetry's minimum wage unique ID and the elements that
  compose the ID in Symmetry's Client Support Center.
- Batch allows clients to run multiple wage rate lookups at once.
- Batches can either be imported using a CSV template or manually created.
- The 'useAddressSuggestion' optional parameter helps clients with significant volume
  increase the efficiency of their internal processes. The default value is false.
- Batch file uploads and results are retained for 30 days from the day the batch file
  was uploaded to Payroll Point.
- The process of overriding geocoordinates for a particular location within Symmetry
  Minimum Wage Finder is referred to as an 'address exception.'
- Please log into Symmetry's Client Support Center for more details on address exceptions.
- Valid latitude/longitude coordinates will take precedence over a street address.
- Minimum wage unique id (mwUid) string is required for each rate.
- Pagination is supported and metadata about the pagination collection is returned.
- 'The widget can be configured three different ways: Setting default values via JSON
  inline in the widget script tag, passing an external url to the widget to load default
  values, setting property value pairs via our admin console.'
- The widget does require a unique key.
- If an invalid or expired key is provided to the widget, an error message will be
  displayed.
- The widget will accept any number of valid model properties.
- Requires login to Symmetry's Client Support Center for additional style documentation.
- The calculator displays help text in the form of a pop up when a field receives
  focus.
- The widget will accept custom text for each form field.
- The widget will still load if an invalid url or bad JSON is passed to it.
- The widget will still load if an invalid URL or bad JSON is passed to it.
- The multi-calculator widget accepts a data-defaults attribute to prepopulate fields.
- A unique feature allows copying information from the first calculator to others.
- To enable emailing of reports, contact Symmetry's Client Support Center.
- Disabling report printing must be set by Symmetry in the admin panel.
- The multi-calculator widget allows placing up to four widgets side by side.
- You can disable report printing by setting the print report select box to display
  only the 'none' option.
- You can have the calculator widgets email a pdf copy of each report.
- All API access is over HTTPS and all data is sent and received as JSON.
- All responses will contain a content property and a _links property.
- All other requests require a key in the header.
- Uses OAuth2 authentication.
- The checkDate field for POST requests must be provided in milliseconds.
- The API will generate one of several predefined reports in the form of a byte array.
- Some endpoints require POST requests for form processing.
- 'You''ll receive a 401 error if not authorized: "message": "Unauthorized".'
- This is purely informational and is not required to run before computing payroll
  calculations.
- Returns account information and transaction count between two dates (passed as parameters
  in a GET request).
- The API provides various endpoints for payroll calculations and taxation information.
- The getPdf endpoint returns a blank and unflattened pdf for the requested form ID.
- The fillPdf endpoint accepts a json object containing employee information, employer
  information, and the answers to the form questions.
- Returns information for a form, such as fields required and tax parameter schemas
- API requires authentication
- Deletes an Employee associated with an Employer
- Return admin data for the specified admin ID
- Updates an Admin associated with an Employer
- Generates a token for admin access
- The URL for this request expired after 30 days.
- Ensure proper authentication setup to access I-9 related endpoints.
- Uses Bearer token for authentication
- Ensure correct endpoint paths are used
- Log in to see full request history
- Determine potentially applicable taxes for an employee based on their home and work
  address.
- Return minimum wage rates by minimum wage unique IDs for Payroll Point.
- Returns minimum wage rates by minimum wage unique IDs for Payroll Point.
- Returns upcoming minimum wage rates by effective date range
- Requires authentication setup
- Uses OAuth2 authentication
- Uses OAuth2 for authentication
- Requires setup of connected app in api
- Authentication requires setup of connected app in Symmetry
- Requires setup of connected app in API
- Requires setup of connected app in Symmetry
- Requires setup of connected app in Symmetry.
- Login for full access required
- Requires authentication to access data.
- Requires OAuth2 authentication
- Some objects may return nulls in deeply nested fields
- Requires login for full access
- Getting minimum wage rates by upcoming effective date
- Authentication required for accessing minimum wage rates.
- Requires OAuth2 authentication with a refresh token.
errors:
- 'AE01: Postal Code Error/General Error'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Api key is invalid and/or expired'
- '401 Unauthorized: Recheck API key or token expiration'
- 'Invalid callback URL: Ensure the callback URL is publicly accessible.'
- 'IMPORT ERROR: Error messages displayed after importing the CSV batch file.'
- 'Invalid data: Lines that contain invalid data must be corrected and reprocessed.'
- '401 Unauthorized: An invalid, expired, or empty token will produce the message
  ''Unauthorized''.'
- '400 Bad Request: Invalid request input data. Check your JSON request object to
  ensure it conforms to the request schema.'
- '500 Internal Server Error: No message available'
- 'SLS-ERR-ADR-IID-010: Unable to verify address.'
- 'SLS-ERR-GCO-IID-012: Coordinates are outside of USA.'
- 'IMPORT ERROR: Indicates the number of lines in the batch that contain import errors.'
- 'INVALID: Status indicating invalid data in the batch.'
- '400 Bad Request: Check required parameters.'
- '404 Not Found: Verify mwUid is valid.'
- Unable to load calculator. Please make sure the key you are using is valid and has
  not expired.
- 'INVALID_CALCULATOR_TYPE: Ensure the calculator type is valid.'
- 'EXCEEDS_MAX_WIDGETS: The number of widgets must be between one and four.'
- 'X-Pcc-Api-Calc-Limit: The number of requests available per year'
- 'X-Pcc-Api-Calc-Remaining: The number of requests remaining'
- 'X-Pcc-Api-Exp-Date: The date your account will expire'
- '401 Unauthorized: "message": "Unauthorized".'
- '401 Unauthorized: "message": "Unauthorized"'
- '400: Bad Request, make sure to use proper POST request'
- '404: Resource not found'
- 400 Bad Request, make sure to use proper POST request
- 404 Resource not found
- '400: Bad Request, make sure to use GET request'
- '400: Bad Request, make sure to use POST request'
- 400 Bad Request, make sure to use GET request
- 400 Bad Request, make sure to use POST request
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - webhook
  - employerId
  - OAuth2
  - Authentication
client:
  base_url: https://api.symmetry.com
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
