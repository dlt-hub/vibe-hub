resources:
- name: current_user
  endpoint:
    path: /v2/users/me
    method: GET
- name: webhook_events
  endpoint:
    path: /v1/webhooks
    method: POST
    data_selector: payload
    params: {}
- name: webhook_secrets
  endpoint:
    path: /v1/webhooks/secrets
    method: GET
    data_selector: secrets
    params: {}
- name: referrals
  endpoint:
    path: /v1/referrals
    method: GET
    data_selector: items
    params:
      cursor: string or null
- name: create_referral
  endpoint:
    path: /v1/referrals
    method: POST
    data_selector: id
- name: get_referral_by_id
  endpoint:
    path: /v1/referrals/{id}
    method: GET
    data_selector: id
- name: upload_document
  endpoint:
    path: /v1/referrals/{id}/document_upload
    method: POST
    data_selector: uri
- name: users
  endpoint:
    path: /v2/users
    method: GET
    data_selector: items
    params: {}
- name: locations
  endpoint:
    path: /v2/locations
    method: GET
    data_selector: items
    params: {}
- name: departments
  endpoint:
    path: /v2/departments
    method: GET
    data_selector: items
    params: {}
- name: titles
  endpoint:
    path: /v2/titles
    method: GET
    data_selector: items
    params: {}
- name: cards
  endpoint:
    path: /v2/cards
    method: GET
    data_selector: items
    params: {}
- name: legal_entities
  endpoint:
    path: /v2/legal_entities
    method: GET
    data_selector: items
- name: legal_entity
  endpoint:
    path: /v2/legal_entities/{id}
    method: GET
- name: company
  endpoint:
    path: /v2/company
    method: GET
- name: vendors
  endpoint:
    path: /v1/vendors
    method: GET
    data_selector: items
    params:
      cursor: string or null
      limit: integer or null
- name: transfers
  endpoint:
    path: /v1/transfers
    method: GET
    data_selector: items
    params:
      cursor: string or null
      limit: integer or null
- name: linked_accounts
  endpoint:
    path: /v1/linked_accounts
    method: GET
    data_selector: items
    params: {}
- name: transactions_primary_card
  endpoint:
    path: /v2/transactions/card/primary
    method: GET
- name: transactions_cash_account
  endpoint:
    path: /v2/transactions/cash/{id}
    method: GET
- name: accounts_card
  endpoint:
    path: /v2/accounts/card
    method: GET
- name: accounts_primary_card_statements
  endpoint:
    path: /v2/accounts/card/primary/statements
    method: GET
- name: accounts_cash
  endpoint:
    path: /v2/accounts/cash
    method: GET
- name: accounts_primary_cash_account
  endpoint:
    path: /v2/accounts/cash/primary
    method: GET
- name: accounts_cash_statements
  endpoint:
    path: /v2/accounts/cash/{id}/statements
    method: GET
- name: expenses
  endpoint:
    path: /v1/expenses
    method: GET
    data_selector: items
    params: {}
- name: receipt_upload
  endpoint:
    path: /v1/expenses/card/{expense_id}/receipt_upload
    method: POST
    data_selector: id
    params: {}
- name: create_receipt_match
  endpoint:
    path: /v1/expenses/card/receipt_match
    method: POST
    data_selector: id
    params: {}
- name: list_expenses
  endpoint:
    path: /v1/expenses
    method: GET
    data_selector: items
    params: {}
- name: get_expense
  endpoint:
    path: /v1/expenses/{id}
    method: GET
    data_selector: id
    params: {}
- name: list_webhooks
  endpoint:
    path: /v1/webhooks
    method: GET
    data_selector: items
    params:
      limit: integer or null
- name: register_webhook
  endpoint:
    path: /v1/webhooks
    method: POST
    data_selector: ''
    params: {}
- name: list_webhook_secrets
  endpoint:
    path: /v1/webhooks/secrets
    method: GET
    data_selector: ''
    params: {}
- name: get_webhook
  endpoint:
    path: /v1/webhooks/{id}
    method: GET
    data_selector: ''
    params: {}
- name: update_webhook
  endpoint:
    path: /v1/webhooks/{id}
    method: PUT
    data_selector: ''
    params: {}
- name: unregister_webhook
  endpoint:
    path: /v1/webhooks/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: spend_limits
  endpoint:
    path: /v2/spend_limits
    method: GET
    data_selector: items
- name: spend_limits
  endpoint:
    path: /v2/spend_limits/{id}
    method: PUT
- name: budget_programs
  endpoint:
    path: /v1/budget_programs
    method: GET
- name: budgets
  endpoint:
    path: /v2/budgets
    method: GET
- name: create_budget
  endpoint:
    path: /v2/budgets
    method: POST
    data_selector: budget
    params: {}
- name: get_budget
  endpoint:
    path: /v2/budgets/{id}
    method: GET
    data_selector: budget
    params: {}
- name: update_budget
  endpoint:
    path: /v2/budgets/{id}
    method: PUT
    data_selector: budget
    params: {}
- name: archive_budget
  endpoint:
    path: /v2/budgets/{id}/archive
    method: POST
    data_selector: budget
    params: {}
- name: list_spend_limits
  endpoint:
    path: /v2/spend_limits
    method: GET
    data_selector: items
    params: {}
- name: create_spend_limit
  endpoint:
    path: /v2/spend_limits
    method: POST
    data_selector: spend_limit
    params: {}
- name: get_spend_limit
  endpoint:
    path: /v2/spend_limits/{id}
    method: GET
    data_selector: spend_limit
    params: {}
- name: update_spend_limit
  endpoint:
    path: /v2/spend_limits/{id}
    method: PUT
    data_selector: Spend Limit
    params: {}
- name: archive_spend_limit
  endpoint:
    path: /v2/spend_limits/{id}/archive
    method: POST
    data_selector: Spend Limit
    params: {}
- name: trips
  endpoint:
    path: /v1/trips
    method: GET
    data_selector: items
    params: {}
- name: trip
  endpoint:
    path: /v1/trips/{trip_id}
    method: GET
    data_selector: trip
    params: {}
- name: trip_bookings
  endpoint:
    path: /v1/trips/{trip_id}/bookings
    method: GET
    data_selector: items
    params: {}
- name: booking
  endpoint:
    path: /v1/trips/{trip_id}/bookings/{booking_id}
    method: GET
    data_selector: booking
    params: {}
- name: trips
  endpoint:
    path: /v1/trips
    method: GET
    data_selector: items
    params:
      cursor: string or null
      limit: integer or null <int64>
      last_updated_after: string or null <date-time>
- name: trip
  endpoint:
    path: /v1/trips/{trip_id}
    method: GET
    data_selector: trip
    params: {}
- name: trip_bookings
  endpoint:
    path: /v1/trips/{trip_id}/bookings
    method: GET
    data_selector: items
    params:
      cursor: string or null
      limit: integer or null <int64>
- name: booking
  endpoint:
    path: /v1/trips/{trip_id}/bookings/{booking_id}
    method: GET
    data_selector: booking
    params: {}
- name: fields
  endpoint:
    path: /v1/fields
    method: GET
    data_selector: items
- name: field_values
  endpoint:
    path: /v1/fields/{field_id}/values
    method: GET
    data_selector: items
- name: list_custom_fields
  endpoint:
    path: /v1/fields
    method: GET
    data_selector: items
- name: create_custom_field
  endpoint:
    path: /v1/fields
    method: POST
    data_selector: ''
    params: {}
- name: get_custom_field
  endpoint:
    path: /v1/fields/{id}
    method: GET
    data_selector: ''
    params: {}
- name: list_custom_field_values
  endpoint:
    path: /v1/fields/{field_id}/values
    method: GET
    data_selector: items
- name: update_custom_field_values
  endpoint:
    path: /v1/fields/{field_id}/values
    method: PUT
    data_selector: ''
    params: {}
- name: current_user
  endpoint:
    path: /v2/users/me
    method: GET
- name: current_user
  endpoint:
    path: /v2/users/me
    method: GET
notes:
- Brex API is fully compliant with OpenID Connect.
- Most Brex APIs require a Brex admin to grant access.
- Bookkeepers may access the accounting API.
- All the 'list' API endpoints for bulk fetches support pagination.
- The Brex API employs rate limits as a safeguard against abuse and to ensure API
  stability.
- Exceeding a rate limit will result in an HTTP 429 (too many requests) response.
- Rate limits may be reduced further to prevent abuse or ensure system reliability.
- The Brex API supports idempotency using an Idempotency-Key header to protect against
  duplicate operations.
- For endpoints where erroneous duplicate processing would be especially bad, such
  as Create transfer and Create card, we require an idempotency key.
- All POST and PUT requests accept idempotency keys.
- Currently only one webhook endpoint can be registered per customer / client_id.
- Each endpoint can be registered to listen to multiple event_types.
- Access token expires in 3600 seconds (1 hour) and will need to be refreshed every
  time after it expires.
- Partner integrations should always rotate the refresh_token.
- Account must be on Brex Empower to receive Expense Payment Events.
- The Fields API is currently in Alpha.
- To access the Fields Alpha API, please email developer-support@brex.com.
- The Fields API is currently in Alpha. To access the Fields Alpha API, please email
  developer-support@brex.com to express your interest.
- User tokens will expire if they are not used to make an API call for 90 days.
- Your user token is private and should not be shared.
errors:
- Refresh tokens expire every 90 days.
- '400 Bad Request: Returned when the limit is set to a value greater than 1000.'
- 'HTTP 429 (too many requests): Exceeding a rate limit'
- '401: Must be cash admin, bookkeeper or user.'
- '401: Only account admin, ap clerks and bookkeepers can access contacts'
- '400: [Field name] is invalid'
- '403: Expired token'
- 'Webhook Verification Failed: The webhook signature could not be verified.'
- 'Invalid Signature Headers: The signature headers sent in the request are invalid.'
- 'Message timestamp too old: The timestamp of the webhook message is beyond the allowed
  tolerance.'
- 'Message timestamp too new: The timestamp of the webhook message is in the future.'
- Insufficient scopes and/or permissions may cause integration failures.
- 400 Invalid cursor
- 401 Unauthorized
- 404 Referral not found
- 400 Bad request
- 403 Forbidden
- 500 Internal server error
- 404 Not found
- '400: Bad request'
- '401: Unauthorized'
- '403: Forbidden'
- '500: Internal server error'
- '404: Not Found'
- 404 Not Found
- '404: Not found'
- '401 Unauthorized: If your user token is compromised or leaked, revoke it.'
auth_info:
  mentioned_objects:
  - OAuth2 client id
  - OAuth2 client secret
  - Client Credentials Grant
  - X-Brex-Trace-Id
client:
  base_url: https://platform.brexapis.com
  headers:
    Authorization: Bearer <YOUR_TOKEN_FROM_STEP_1_HERE>
source_metadata: null
