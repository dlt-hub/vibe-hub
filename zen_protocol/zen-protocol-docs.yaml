resources:
- name: wallet
  endpoint:
    path: /apps/headless/api/wallet
    method: GET
- name: contracts
  endpoint:
    path: /apps/headless/api/contracts
    method: GET
- name: blockchain
  endpoint:
    path: /apps/headless/api/blockchain
    method: GET
- name: general
  endpoint:
    path: /apps/headless/api/general
    method: GET
- name: addressdb
  endpoint:
    path: /apps/headless/api/addressdb
    method: GET
- name: wallet
  endpoint:
    path: /apps/headless/api/wallet
    method: GET
    data_selector: records
    params: {}
- name: contracts
  endpoint:
    path: /apps/headless/api/contracts
    method: GET
    data_selector: records
    params: {}
- name: general
  endpoint:
    path: /apps/headless/api/general
    method: GET
    data_selector: records
    params: {}
- name: blockchain
  endpoint:
    path: /apps/headless/api/blockchain
    method: GET
    data_selector: records
    params: {}
- name: addressdb
  endpoint:
    path: /apps/headless/api/addressdb
    method: GET
    data_selector: records
    params: {}
- name: Executable Installers
  endpoint:
    path: /apps/wallet/deprecated-desktop-wallet/installers
    method: GET
- name: Wallet Structure
  endpoint:
    path: /apps/wallet/deprecated-desktop-wallet/wallet-walkthrough
    method: GET
- name: blocks
  endpoint:
    path: /blocks
    method: GET
    data_selector: blocks
    params: {}
- name: contracts
  endpoint:
    path: /contracts
    method: GET
    data_selector: contracts
    params: {}
- name: assets
  endpoint:
    path: /assets
    method: GET
    data_selector: assets
    params: {}
- name: wallet
  endpoint:
    path: /apps/headless/api/wallet
    method: GET
    data_selector: records
- name: contracts
  endpoint:
    path: /apps/headless/api/contracts
    method: GET
    data_selector: records
- name: general
  endpoint:
    path: /apps/headless/api/general
    method: GET
    data_selector: records
- name: blockchain
  endpoint:
    path: /apps/headless/api/blockchain
    method: GET
    data_selector: records
- name: addressdb
  endpoint:
    path: /apps/headless/api/addressdb
    method: GET
    data_selector: records
- name: transaction
  endpoint:
    path: /blockchain/publishtransaction
    method: POST
    data_selector: transaction
    params: {}
- name: send_assets
  endpoint:
    path: /wallet/send
    method: POST
- name: get_new_address
  endpoint:
    path: /wallet/getnewaddress
    method: POST
- name: received_by_address
  endpoint:
    path: /wallet/receivedbyaddress
    method: GET
- name: account_discovery
  endpoint:
    path: /wallet/restorenewaddresses
    method: POST
- name: commit
  endpoint:
    path: /commit
    method: POST
    data_selector: records
- name: query
  endpoint:
    path: /query
    method: GET
    data_selector: records
- name: attest
  endpoint:
    path: /attest
    method: POST
    data_selector: records
- name: audit
  endpoint:
    path: /audit
    method: GET
    data_selector: records
- name: server
  endpoint:
    path: /server
    method: GET
    data_selector: records
- name: attest_with_commit
  endpoint:
    path: /attest
    method: GET
    data_selector: commit
    params: {}
- name: attest_with_root_and_timestamp
  endpoint:
    path: /attest
    method: GET
    data_selector: root
    params: {}
- name: query_the_oracle
  endpoint:
    path: /query
    method: GET
    data_selector: item
    params: {}
- name: count_commits
  endpoint:
    path: /count/
    method: GET
    data_selector: ''
    params: {}
- name: get_values
  endpoint:
    path: /getValues
    method: POST
    data_selector: ''
    params: {}
- name: commitment_token
  endpoint:
    path: /commitment/token
    method: POST
    data_selector: commitment_token
    params: {}
- name: attestation_token
  endpoint:
    path: /attestation/token
    method: POST
    data_selector: attestation_token
    params: {}
- name: Attestation token
  endpoint:
    path: /apps/oracle/how-to-create-an-attestation-token
    method: POST
    data_selector: transaction
    params: {}
- name: ZenDex
  endpoint:
    path: /apps/dex
    method: GET
    data_selector: orders
    params: {}
- name: Fixed Payout
  endpoint:
    path: /apps/fixed-payout
    method: GET
    data_selector: ''
    params: {}
- name: Issue
  endpoint:
    path: /apps/fixed-payout/fixed-payout-generator/issue
    method: GET
- name: Redeem
  endpoint:
    path: /apps/fixed-payout/fixed-payout-generator/redeem
    method: GET
- name: Cancel
  endpoint:
    path: /apps/fixed-payout/fixed-payout-generator/cancel
    method: GET
- name: Verify
  endpoint:
    path: /apps/fixed-payout/fixed-payout-generator/verify
    method: GET
- name: Settings
  endpoint:
    path: /apps/fixed-payout/fixed-payout-generator/settings
    method: GET
- name: Fixed Payout Contract
  endpoint:
    path: /apps/fixed-payout
    method: GET
    data_selector: contract_details
    params: {}
- name: mint_information
  endpoint:
    path: /addressdb/contract/mint
    method: GET
    data_selector: dict
    params: {}
- name: contract_structure
  endpoint:
    path: /contract-structure
    method: GET
    data_selector: records
- name: activate_contract
  endpoint:
    path: /wallet/contract/activate
    method: POST
    data_selector: '200'
- name: create_contract
  endpoint:
    path: /create
    method: POST
    data_selector: result
    params: {}
- name: elaborate_contract
  endpoint:
    path: /elaborate
    method: POST
    data_selector: result
    params: {}
- name: verify_contract
  endpoint:
    path: /verify
    method: POST
    data_selector: result
    params: {}
- name: extract_contract
  endpoint:
    path: /extract
    method: POST
    data_selector: result
    params: {}
- name: compile_contract
  endpoint:
    path: /compile
    method: POST
    data_selector: result
    params: {}
- name: pack_contract
  endpoint:
    path: /pack
    method: POST
    data_selector: result
    params: {}
- name: generate_fsx
  endpoint:
    path: /generate-fsx
    method: POST
    data_selector: result
    params: {}
- name: run_fsx
  endpoint:
    path: /run-fsx
    method: POST
    data_selector: result
    params: {}
- name: contract_id
  endpoint:
    path: /contractid
    method: POST
    data_selector: result
    params: {}
- name: activation_cost
  endpoint:
    path: /acost
    method: POST
    data_selector: result
    params: {}
- name: contract_info
  endpoint:
    path: /info
    method: POST
    data_selector: result
    params: {}
- name: NamedToken
  endpoint:
    path: /NamedToken
    method: POST
    data_selector: messageBody
    params: {}
- name: bounty
  endpoint:
    path: /for-miners/gpu-bounties
    method: GET
    data_selector: bounties
    params: {}
- name: contract_templates
  endpoint:
    path: /ContractCreation
    method: GET
    data_selector: templates
- name: faucet
  endpoint:
    path: /Faucet
    method: GET
    data_selector: faucet_info
- name: contract_details
  endpoint:
    path: /ContractDetails
    method: GET
    data_selector: details
notes:
- The usage of the software is only permitted to anyone who purchased a license during
  the license sale period.
- Windows is not yet supported
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- The AddressDB is a component of the Zen Protocol node, it connects to the node service
  bus to store the blockchain data so that it can be retrieved faster.
- Last updated 1 year ago
- Transaction needs to be transformed into hexadecimal format (hex) before publishing
  on the network.
- Ensure all environment variables are provided and correct.
- The transaction must be signed, the provider who executed this command must authenticate
  the transaction.
- ZenDex is a true decentralised exchange, with no operator or fees.
- ZenDex stores orders as utxos that it locks to itself.
- When cancelling or taking an order, one must supply all of the order parameters
  directly to ZenDex in the messageBody.
- Orders are expressed in terms of underlying amount and pair amount to allow for
  rational price ratios.
- The underlying amount, order total, and payment amount are all 64 bit unsigned integers.
- The Fixed Payout contract assumes a working oracle service and an oracle contract.
- 'To verify the following examples use: zebra -v Filename.fst'
- 'To elaborate and verify the elaborated result use: zebra -e Filename.fst'
- The elaborated file will appear within the output subdirectory of your current directory.
- The CGP contract is a custodian contract which can unlock ('pay out') some of its
  available assets to a specified recipient - a PK address or a contract.
- Users will be able to vote on the portion of the coinbase outputs locked to the
  CGP contract ('allocation' vote), and on the recipient and spends (assets and amounts)
  of each payout ('payout' vote).
- Voting for allocation could be done anytime during the voting phase, however - voting
  for payout is split into 2 phases - nomination phase and voting phase.
- The CGP contract must be executed one block before and added to the payout block.
- There is at most one payout transaction per payout block.
- Each transaction must have a non-empty list of inputs and a list of outputs.
- Outputs must have an amount strictly greater than zero.
- Asset serialization is optimized to represent the Zen native token efficiently,
  as well as to efficiently represent assets with low version numbers and with subtypes
  that have many trailing zero bytes.
- The subtype is under the control of the contract generating the asset, contract
  writers can gain some efficiency for the assets their contracts make, by giving
  them short subtypes.
- Watch Mode allows users to import public addresses or a public key, facilitating
  direct observation of wallet activity without the need to expose private keys.
- Zen-node supports cold storage out of the box.
- Our programme awards between $300 and $50,000+, at our sole discretion, for the
  responsible disclosure of security vulnerabilities.
- Mined tokens are not able to be used until 100 blocks after they have been mined.
  Please wait for these blocks to pass and then try again.
- Some objects like Contact may return nulls in deeply nested fields
- Bounty of 2000ZP (AWARDED!) for open source GPU miner submission.
- The desktop wallet connects to the Zen testnet.
errors:
- 'Invalid transaction: All inputs cannot be mints.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://www.zenprotocol.com
  headers:
    Accept: application/json
source_metadata: null
