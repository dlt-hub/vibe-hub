resources:
- name: transactions
  endpoint:
    path: /transactions
    method: POST
- name: Poller
  endpoint:
    path: /pollingcontroller_list
    method: GET
- name: Relationship
  endpoint:
    path: /relationshipcontroller_listv3
    method: GET
- name: Organization
  endpoint:
    path: /organizationv3controller_getown
    method: GET
- name: Transaction
  endpoint:
    path: /transactioncontrollerv3_create
    method: POST
- name: Attachment
  endpoint:
    path: /attachmentcontroller_getbyidv3
    method: GET
- name: Delivery
  endpoint:
    path: /deliverycontroller_getdelivery
    method: GET
- name: Label
  endpoint:
    path: /labelcontroller_generate
    method: POST
- name: sales_orders
  endpoint:
    path: /api/v1/sales_orders
    method: GET
    data_selector: data
    params: {}
- name: inventory_advice
  endpoint:
    path: /api/v1/inventory_advice
    method: GET
    data_selector: data
    params: {}
- name: Poller
  endpoint:
    path: /pollingcontroller_list
    method: GET
- name: Relationship
  endpoint:
    path: /relationshipcontroller_listv3
    method: GET
- name: Organization
  endpoint:
    path: /organizationv3controller_getown
    method: GET
- name: Transaction
  endpoint:
    path: /transactioncontrollerv3_list
    method: GET
- name: Attachment
  endpoint:
    path: /attachmentcontroller_getbyidv3
    method: GET
- name: Delivery
  endpoint:
    path: /deliverycontroller_getdelivery
    method: GET
- name: Label
  endpoint:
    path: /labelcontroller_generate
    method: POST
- name: Integration Assistance
  endpoint:
    path: /integration-assistance
    method: GET
- name: Create Transaction
  endpoint:
    path: /create-transaction
    method: POST
- name: Transaction Status
  endpoint:
    path: /transactions
    method: GET
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: scenario_testing
  endpoint:
    path: /scenario-testing
    method: GET
- name: relationships
  endpoint:
    path: /relationships
    method: GET
- name: transactions
  endpoint:
    path: /v3/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: interchange_envelope
  endpoint:
    path: /x12/interchange
    method: GET
    data_selector: envelopes
- name: functional_group_envelope
  endpoint:
    path: /x12/functional_group
    method: GET
    data_selector: envelopes
- name: transaction_set_envelope
  endpoint:
    path: /x12/transaction_set
    method: GET
    data_selector: envelopes
- name: X12_envelopes
  endpoint:
    path: /x12/envelopes
    method: GET
    data_selector: envelopes
- name: Organization Setup
  endpoint:
    path: /docs/organization-setup-1
    method: GET
    data_selector: records
    params: {}
- name: Leader Requirements
  endpoint:
    path: /docs/design-leader-requirements
    method: GET
    data_selector: records
    params: {}
- name: Integration
  endpoint:
    path: /docs/integration
    method: GET
    data_selector: records
    params: {}
- name: Partnership Setup
  endpoint:
    path: /docs/partnership-setup
    method: GET
    data_selector: records
    params: {}
- name: Partnership testing and Go Live
  endpoint:
    path: /docs/partnership-testing-and-go-live
    method: GET
    data_selector: records
    params: {}
- name: purchase_order_acknowledgement
  endpoint:
    path: /edi/855
    method: POST
    data_selector: response
- name: invoice
  endpoint:
    path: /edi/810
    method: POST
    data_selector: response
- name: advanced_shipment_notice
  endpoint:
    path: /edi/856
    method: POST
    data_selector: response
- name: purchase_order_acknowledgement
  endpoint:
    path: /services/data/vXX.X/sobjects/PurchaseOrderAcknowledgement
    method: GET
    data_selector: records
- name: invoice
  endpoint:
    path: /services/data/vXX.X/sobjects/Invoice
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: Transaction
    params: {}
- name: acknowledgment
  endpoint:
    path: /v3/transactions/{transaction_id}/acknowledgment
    method: POST
    data_selector: acknowledgment
    params: {}
- name: purchase_order
  endpoint:
    path: /purchase_orders
    method: GET
    data_selector: records
- name: shipment_status
  endpoint:
    path: /shipment_status
    method: GET
    data_selector: records
- name: transaction
  endpoint:
    path: /v3/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
- name: acknowledgment
  endpoint:
    path: /v3/transactions/{transaction_id}/acknowledgment
    method: POST
    data_selector: acknowledgment
- name: delete_transactions
  endpoint:
    path: /transactions
    method: DELETE
    data_selector: records
- name: transactions
  endpoint:
    path: /v3/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
- name: delete_transactions
  endpoint:
    path: /transactions
    method: DELETE
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: Fix an Invalid Transaction
  endpoint:
    path: /fix-an-invalid-transaction
    method: POST
- name: transactions
  endpoint:
    data_selector: metadata.pagination.links
    params: {}
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: transactions
    params:
      acknowledgmentStatus: REJECTED
      transactionType: 810_INVOICE
      createdAt: '[YYYY-MM-DDTZhh:mm:ss.sssZ,YYYY-MM-DDTZhh:mm:ss.sssZ)'
- name: transaction_status
  endpoint:
    path: /transaction/statuses
    method: GET
    data_selector: statuses
- name: transactions
  endpoint:
    params: {}
- name: transaction_statuses
  endpoint:
    path: /transaction-statuses
    method: GET
- name: transaction
  endpoint:
    path: /reference/transactioncontrollerv3_getbyid
    method: GET
    data_selector: Transaction
    params: {}
- name: transaction
  endpoint:
    path: /api/v1/transactions/{transactionId}
    method: GET
    data_selector: transaction
    params: {}
- name: transaction_delivery
  endpoint:
    path: /transactions/delivery
    method: POST
    data_selector: transaction_status
    params: {}
- name: transaction_delivery
  endpoint:
    path: /delivery
    method: POST
    data_selector: transaction_status
- name: polling_bucket
  endpoint:
    path: /v3/polling-buckets/{bucketId}
    method: GET
    data_selector: '[]'
- name: approve_delivery
  endpoint:
    path: /v3/delivery/{deliveryId}/approve
    method: POST
    data_selector: '{}'
- name: fail_delivery
  endpoint:
    path: /v3/delivery/{deliveryId}/fail
    method: POST
    data_selector: '{}'
- name: polling_bucket
  endpoint:
    path: /v3/polling-buckets/{bucketId}
    method: GET
    data_selector: ''
    params:
      limit: '100'
- name: approve_delivery
  endpoint:
    path: /v3/delivery/{deliveryId}/approve
    method: POST
    data_selector: ''
    params: {}
- name: fail_delivery
  endpoint:
    path: /v3/delivery/{deliveryId}/fail
    method: POST
    data_selector: ''
    params: {}
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: workflow_validation
  endpoint:
    path: /api/v1/workflows/validation
    method: POST
    data_selector: validationResults
    params: {}
- name: relationship_statuses
  endpoint:
    path: /reference/relationshipcontroller_listv3
    method: GET
    data_selector: statuses
    params: {}
- name: Add data to a JSON transaction
  endpoint:
    path: /add-data-to-json
    method: POST
    data_selector: records
- name: search_relationships
  endpoint:
    path: /relationships
    method: GET
    data_selector: relationships
- name: trade_request_statuses
  endpoint:
    path: /trade-requests/statuses
    method: GET
    data_selector: statuses
- name: relationship_statuses
  endpoint:
    path: /reference/relationshipcontroller_listv3
    method: GET
    data_selector: statuses
- name: search_relationships
  endpoint:
    path: /relationships
    method: GET
    data_selector: relationships
- name: edi_account
  endpoint:
    path: /edi-accounts
    method: POST
    data_selector: account
    params: {}
- name: Trade Request statuses
  endpoint:
    path: /trade-requests/statuses
    method: GET
    data_selector: Trade Request statuses
    params: {}
- name: transaction_forwarding
  endpoint:
    path: /transaction/forwarding
    method: POST
    data_selector: transaction
    params: {}
- name: EDI Account
  endpoint:
    path: /edi-accounts
    method: POST
    data_selector: data
    params: {}
- name: Cleo Harmony Server
  endpoint:
    path: https://as2.orderful.com:443
    method: N/A
    data_selector: N/A
    params: {}
- name: IBM Sterling
  endpoint:
    path: http://as2.orderful.com
    method: N/A
    data_selector: N/A
    params:
      message_compression: disable
- name: scenarios
  endpoint:
    path: /scenarios
    method: GET
- name: users
  endpoint:
    path: /settings/users
    method: GET
    data_selector: users
    params:
      limit: '10'
      offset: '0'
- name: labels
  endpoint:
    path: /labels
    method: POST
    data_selector: pdf
- name: labels
  endpoint:
    path: /labels
    method: POST
    data_selector: pdf
- name: Inbound HTTP
  endpoint:
    path: /docs/inbound-http
    method: GET
- name: Inbound Poller
  endpoint:
    path: /docs/inbound-poller
    method: GET
- name: Inbound AS2
  endpoint:
    path: /docs/inbound-as2
    method: GET
- name: Inbound FTP and SFTP
  endpoint:
    path: /docs/inbound-ftp-and-sftp
    method: GET
- name: Inbound VAN
  endpoint:
    path: /docs/inbound-van
    method: GET
- name: Outbound HTTP
  endpoint:
    path: /docs/outbound-http
    method: GET
- name: Outbound AS2
  endpoint:
    path: /docs/outbound-as2
    method: GET
- name: Outbound FTP and SFTP
  endpoint:
    path: /docs/outbound-ftp-and-sftp
    method: GET
- name: Outbound VAN
  endpoint:
    path: /docs/outbound-van
    method: GET
- name: transactions
  endpoint:
    path: /transactions
    method: POST
- name: inbound_as2
  endpoint:
    path: /communication-channels/as2
    method: POST
    data_selector: transactions
    params: {}
- name: Orderful-hosted SFTP
  endpoint:
    path: /communication-channels
    method: POST
    data_selector: configuration
    params: {}
- name: Self-hosted SFTP
  endpoint:
    path: /communication-channels
    method: POST
    data_selector: configuration
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: POST
- name: Outbound AS2 Channel
  endpoint:
    path: /communication-channels/outbound-as2
    method: GET
- name: company_isa_id
  endpoint:
    path: /setup/company/general/preferences/custom/preferences
    method: GET
    data_selector: preferences
    params: {}
- name: test_isa_id
  endpoint:
    path: /setup/company/general/preferences/custom/preferences
    method: GET
    data_selector: preferences
    params: {}
- name: polling_bucket_id
  endpoint:
    path: /setup/company/general/preferences/custom/preferences
    method: GET
    data_selector: preferences
    params: {}
- name: transactions
  endpoint:
    path: /relationships
    method: GET
    data_selector: transactions
    params:
      limit: '100'
      offset: '0'
- name: purchase_order_acknowledgment
  endpoint:
    path: /api/v1/edi/855
    method: POST
    data_selector: acknowledgment
    params: {}
- name: Line Items
  endpoint:
    path: /line_items
    method: GET
    data_selector: PO1_loop[].baselineItemData[]
    params: {}
- name: Currency
  endpoint:
    path: /currency
    method: GET
    data_selector: currency[]
    params: {}
- name: invoice_header_information
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
    params: {}
- name: address_and_entity_mappings
  endpoint:
    path: /addresses
    method: GET
    data_selector: records
    params: {}
- name: shipment_details
  endpoint:
    path: /shipment/details
    method: GET
    data_selector: shipmentData
    params: {}
- name: line_items
  endpoint:
    path: /line/items
    method: GET
    data_selector: lineItemData
    params: {}
- name: reference_information
  endpoint:
    path: /reference/information
    method: GET
    data_selector: referenceData
    params: {}
- name: 850 Purchase Order
  endpoint:
    path: /docs/850-po
    method: GET
- name: 855 Purchase Order Acknowledgment
  endpoint:
    path: /docs/855-purchase-order-acknowledgement
    method: GET
- name: 856 Advance Ship Notice
  endpoint:
    path: /docs/856-asn
    method: GET
- name: 810 Invoice
  endpoint:
    path: /docs/810-invoice
    method: GET
- name: 880 Grocery Invoice
  endpoint:
    path: /docs/880-grocery-products-invoice
    method: GET
- name: 846 Inventory Advice
  endpoint:
    path: /docs/inventory-advice
    method: GET
- name: 940 Warehouse Shipping Order
  endpoint:
    path: /docs/940-warehouse-shipping-order
    method: GET
- name: 945 Warehouse Shipping Advice
  endpoint:
    path: /docs/945-warehouse-shipping-advice
    method: GET
- name: purchase_order_acknowledgment
  endpoint:
    path: /855
    method: POST
    data_selector: acknowledgment
    params: {}
- name: item_fulfillment
  endpoint:
    path: /v1/item_fulfillment
    method: GET
    data_selector: records
- name: line_items
  endpoint:
    path: /line_items
    method: GET
    data_selector: PO1_loop
    params: {}
- name: sln_kits_handling
  endpoint:
    path: /sln_kits_handling
    method: GET
    data_selector: SLN_loop
    params: {}
- name: currency
  endpoint:
    path: /currency
    method: GET
    data_selector: currency
    params: {}
- name: 810 Invoice
  endpoint:
    path: /api/invoice/810
    method: POST
    data_selector: invoiceData
    params: {}
- name: shipment_and_carrier_details
  endpoint:
    path: /shipment_and_carrier_details
    method: GET
- name: line_items_and_charges
  endpoint:
    path: /line_items_and_charges
    method: GET
- name: reference_information
  endpoint:
    path: /reference_information
    method: GET
- name: beginningSegmentForShipNotice
  endpoint:
    path: /beginningSegmentForShipNotice
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: DTM
  endpoint:
    path: /DTM
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: HL
  endpoint:
    path: /HL
    method: GET
    data_selector: TransactionSets[0].Hl_Loop[]
    params: {}
- name: carrierDetailsQuantityAndWeight
  endpoint:
    path: /carrierDetailsQuantityAndWeight
    method: GET
    data_selector: TransactionSets[0].Hl_Loop[].carrierDetailsQuantityAndWeight
    params: {}
- name: referenceInformation
  endpoint:
    path: /referenceInformation
    method: GET
    data_selector: TransactionSets[0].Hl_Loop[].referenceInformation
    params: {}
- name: dateTimeReference
  endpoint:
    path: /dateTimeReference
    method: GET
    data_selector: TransactionSets[0].Hl_Loop[].dateTimeReference
    params: {}
- name: FOBRelatedInstructions
  endpoint:
    path: /FOBRelatedInstructions
    method: GET
    data_selector: TransactionSets[0].Hl_Loop[].FOBRelatedInstructions
    params: {}
- name: N1_loop
  endpoint:
    path: /N1_loop
    method: GET
    data_selector: TransactionSets[0].Hl_Loop[].N1_loop[]
    params: {}
- name: purchaseOrderReference
  endpoint:
    path: /purchaseOrderReference
    method: GET
    data_selector: TransactionSets[0].Hl_Loop[].purchaseOrderReference
    params: {}
- name: referenceInformationOrderLevel
  endpoint:
    path: /referenceInformationOrderLevel
    method: GET
    data_selector: TransactionSets[0].Hl_Loop[].referenceInformationOrderLevel
    params: {}
- name: N1_loopOrderLevel
  endpoint:
    path: /N1_loopOrderLevel
    method: GET
    data_selector: TransactionSets[0].Hl_Loop[].N1_loopOrderLevel[]
    params: {}
- name: transaction_sets
  endpoint:
    path: /api/transaction_sets
    method: GET
    data_selector: TransactionSets
    params: {}
- name: purchase_order
  endpoint:
    path: /edi/875
    method: GET
    data_selector: transaction
    params: {}
- name: item_fulfillment
  endpoint:
    path: /services/data/vXX.X/sobjects/ItemFulfillment
    method: GET
    data_selector: records
    params: {}
- name: shipping_address
  endpoint:
    path: /services/data/vXX.X/sobjects/ShippingAddress
    method: GET
    data_selector: records
    params: {}
- name: shipping_details
  endpoint:
    path: /services/data/vXX.X/sobjects/ShippingDetails
    method: GET
    data_selector: records
    params: {}
- name: ordered_line_item
  endpoint:
    path: /services/data/vXX.X/sobjects/OrderedLineItem
    method: GET
    data_selector: records
    params: {}
- name: warehouse_address
  endpoint:
    path: /services/data/vXX.X/sobjects/WarehouseAddress
    method: GET
    data_selector: records
    params: {}
- name: return_address
  endpoint:
    path: /services/data/vXX.X/sobjects/ReturnAddress
    method: GET
    data_selector: records
    params: {}
- name: carton
  endpoint:
    path: /services/data/vXX.X/sobjects/Carton
    method: GET
    data_selector: records
    params: {}
- name: packed_item
  endpoint:
    path: /services/data/vXX.X/sobjects/PackedItem
    method: GET
    data_selector: records
    params: {}
- name: line_items
  endpoint:
    path: /line_items
    method: GET
    data_selector: transactionLines
    params: {}
- name: line_item_discounts
  endpoint:
    path: /line_item_discounts
    method: GET
    data_selector: transactionLines.discount
    params: {}
- name: invoice_identification
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
    params: {}
- name: extended_reference_information
  endpoint:
    path: /extendedReferenceInformation
    method: GET
    data_selector: extendedReferences
    params: {}
- name: date_and_shipping_information
  endpoint:
    path: /dateAndShipping
    method: GET
    data_selector: shippingInfo
    params: {}
- name: terms_of_sale
  endpoint:
    path: /termsOfSale
    method: GET
    data_selector: terms
    params: {}
- name: address_information
  endpoint:
    path: /addresses
    method: GET
    data_selector: addresses
    params: {}
- name: discount_information
  endpoint:
    path: /discounts
    method: GET
    data_selector: discounts
    params: {}
- name: line_items
  endpoint:
    path: /lineItems
    method: GET
    data_selector: lineItems
    params: {}
- name: summary_information
  endpoint:
    path: /summary
    method: GET
    data_selector: summaryInfo
    params: {}
- name: 850_purchase_order
  endpoint:
    path: /850_purchase_order
    method: POST
    data_selector: records
    params: {}
- name: 945 Warehouse Shipping Advice
  endpoint:
    path: /945-warehouse-shipping-advice
    method: GET
    data_selector: transactions
    params: {}
- name: beginningSegmentForShipNotice
  endpoint:
    path: /beginningSegmentForShipNotice
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: DTM
  endpoint:
    path: /DTM
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: HL
  endpoint:
    path: /HL
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: carrierDetailsQuantityAndWeight
  endpoint:
    path: /carrierDetailsQuantityAndWeight
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: referenceInformation
  endpoint:
    path: /referenceInformation
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: dateTimeReference
  endpoint:
    path: /dateTimeReference
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: FOBRelatedInstructions
  endpoint:
    path: /FOBRelatedInstructions
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: partyLocation
  endpoint:
    path: /partyLocation
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: purchaseOrderReference
  endpoint:
    path: /purchaseOrderReference
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: referenceInformationOrderLevel
  endpoint:
    path: /referenceInformationOrderLevel
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: N1_loop
  endpoint:
    path: /N1_loop
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: hierarchicalLevel
  endpoint:
    path: /hierarchicalLevel
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: marksAndNumbersInformation
  endpoint:
    path: /marksAndNumbersInformation
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: palletTypeAndLoadCharacteristics
  endpoint:
    path: /palletTypeAndLoadCharacteristics
    method: GET
    data_selector: TransactionSets[0]
    params: {}
- name: Item Lookup
  endpoint:
    path: /docs/items/custom-item-lookups
    method: GET
    data_selector: records
- name: TransactionSets
  endpoint:
    path: /TransactionSets
    method: GET
    data_selector: records
- name: store_mapping
  endpoint:
    path: /store_mapping
    method: GET
- name: Distribution Center
  endpoint:
    path: /distribution-center
    method: GET
    data_selector: records
- name: grocery_products_purchase_order
  endpoint:
    path: /services/data/vXX.X/sobjects/GroceryProductsPurchaseOrder
    method: GET
    data_selector: records
    params: {}
- name: line_items
  endpoint:
    path: /line_items
    method: GET
    data_selector: transactionLines
    params: {}
- name: line_item_discounts
  endpoint:
    path: /line_item_discounts
    method: GET
    data_selector: transactionLines.discount
    params: {}
- name: Shipping Lookup
  endpoint:
    path: /shipping/lookup
    method: GET
    data_selector: carrierDetailsRoutingSequenceTransitTime
- name: transactions
  endpoint:
    path: /inbound/transactions
    method: GET
    data_selector: transactions
- name: invoiceIdentification
  endpoint:
    path: /edi/invoiceIdentification
    method: GET
    data_selector: invoices
    params: {}
- name: extendedReferenceInformation
  endpoint:
    path: /edi/extendedReferenceInformation
    method: GET
    data_selector: invoices
    params: {}
- name: dateAndShippingInformation
  endpoint:
    path: /edi/dateAndShippingInformation
    method: GET
    data_selector: invoices
    params: {}
- name: termsOfSale
  endpoint:
    path: /edi/termsOfSale
    method: GET
    data_selector: invoices
    params: {}
- name: addressInformation
  endpoint:
    path: /edi/addressInformation
    method: GET
    data_selector: invoices
    params: {}
- name: discountInformation
  endpoint:
    path: /edi/discountInformation
    method: GET
    data_selector: invoices
    params: {}
- name: lineItems
  endpoint:
    path: /edi/lineItems
    method: GET
    data_selector: invoices
    params: {}
- name: summaryInformation
  endpoint:
    path: /edi/summaryInformation
    method: GET
    data_selector: invoices
    params: {}
- name: date_time_fields
  endpoint:
    path: /sales-order-dates
    method: GET
    data_selector: dateTimeQualifierMappings
    params: {}
- name: 850_purchase_order
  endpoint:
    path: /850_purchase_order
    method: POST
    data_selector: data
    params: {}
- name: order_acknowledgements
  endpoint:
    path: /acknowledging-orders
    method: GET
    data_selector: transactions
- name: fulfilling_orders
  endpoint:
    path: /docs/fulfilling-orders
    method: GET
- name: address_handling
  endpoint:
    path: /address/handling
    method: GET
    data_selector: addressHandling
    params: {}
- name: reference_identifiers
  endpoint:
    path: /reference/identifiers
    method: GET
    data_selector: referenceIdentifiers
    params: {}
- name: line_items
  endpoint:
    path: /line/items
    method: GET
    data_selector: lineItems
    params: {}
- name: discounts_and_adjustments
  endpoint:
    path: /discounts/adjustments
    method: GET
    data_selector: discountsAdjustments
    params: {}
- name: custom_mappings
  endpoint:
    path: /custom/mappings
    method: GET
    data_selector: customMappings
    params: {}
- name: packaging_data_source
  endpoint:
    path: /api/packaging_data_source
    method: POST
    data_selector: data
    params: {}
- name: item_lookup
  endpoint:
    path: /docs/items
    method: GET
    data_selector: records
    params: {}
- name: Packing Groups
  endpoint:
    path: /packing-groups
    method: GET
    data_selector: packingGroups
- name: Item Packing Group Assignments
  endpoint:
    path: /item-packing-group-assignments
    method: GET
    data_selector: itemPackingGroupAssignments
- name: store_mapping
  endpoint:
    path: /store_mapping
    method: GET
    data_selector: records
- name: Shipping Labels
  endpoint:
    path: /api/v1/shipping_labels
    method: POST
    data_selector: labels
    params: {}
- name: Locations For Customer
  endpoint:
    path: /locations-for-customer
    method: GET
- name: invoicing_orders
  endpoint:
    path: /invoicing/orders
    method: POST
    data_selector: transaction
    params: {}
- name: Shipping Lookup
  endpoint:
    path: /shipping-lookup
    method: GET
    data_selector: carrierDetailsRoutingSequenceTransitTime
    params: {}
- name: Polling Inbound Transactions
  endpoint:
    path: /inbound/scripts/orderful/polling
    method: GET
    data_selector: transactions
    params: {}
- name: order_acknowledgements
  endpoint:
    path: /acknowledging-orders
    method: GET
    data_selector: acknowledgements
- name: Custom Packaging Data Source
  endpoint:
    path: /path/to/custom/packaging/data/source
    method: POST
    data_selector: data
    params: {}
- name: carton
  endpoint:
    path: /edi/carton
    method: POST
    data_selector: cartons
- name: shipment
  endpoint:
    path: /edi/shipment
    method: PUT
    data_selector: shipments
- name: packing_group
  endpoint:
    path: /api/packing_groups
    method: POST
    data_selector: packing_groups
    params: {}
- name: item_packing_assignment
  endpoint:
    path: /api/item_packing_assignments
    method: POST
    data_selector: item_packing_assignments
    params: {}
- name: Label Data Source
  endpoint:
    path: /path/to/label/data/source
    method: POST
    data_selector: labels
    params: {}
- name: invoicing_orders
  endpoint:
    path: /invoicing/orders
    method: POST
    data_selector: transaction
    params: {}
- name: custom_process_transactions
  endpoint:
    path: /customrecord_orderful_transaction
    method: GET
    data_selector: records
    params:
      status: Pending - Custom Process
- name: inventory_advice
  endpoint:
    path: /inventory/advice
    method: POST
    data_selector: transaction
    params: {}
- name: Poller
  endpoint:
    path: /pollingcontroller_list
    method: GET
- name: Transaction
  endpoint:
    path: /transactioncontrollerv3_list
    method: GET
- name: Relationship
  endpoint:
    path: /relationshipcontroller_listv3
    method: GET
- name: Organization
  endpoint:
    path: /organizationv3controller_getown
    method: GET
- name: Conversion
  endpoint:
    path: /conversioncontroller_convertdata
    method: POST
- name: Attachment
  endpoint:
    path: /attachmentcontroller_getbyidv3
    method: GET
- name: Delivery
  endpoint:
    path: /deliverycontroller_getdelivery
    method: GET
- name: Label
  endpoint:
    path: /labelcontroller_generate
    method: POST
- name: transactions
  endpoint:
    path: /v3/polling-buckets/{bucketId}
    method: GET
    data_selector: array of objects
- name: custom_process
  endpoint:
    path: /custom-process
    method: POST
    data_selector: transactions
    params:
      incremental: status
- name: Remove Transactions from Bucket
  endpoint:
    path: /v3/polling-buckets/{id}/confirm-retrieval
    method: POST
    data_selector: confirmedTransactions
    params:
      resourceIds: []
- name: relationships
  endpoint:
    path: /v3/relationships
    method: GET
    data_selector: data
- name: Poller
  endpoint:
    path: /pollingcontroller_list
    method: GET
- name: Relationship
  endpoint:
    path: /relationshipcontroller_listv3
    method: GET
- name: Organization
  endpoint:
    path: /organizationv3controller_getown
    method: GET
- name: Transaction
  endpoint:
    path: /transactioncontrollerv3_list
    method: GET
- name: Attachment
  endpoint:
    path: /attachmentcontroller_getbyidv3
    method: GET
- name: Delivery
  endpoint:
    path: /deliverycontroller_getdelivery
    method: GET
- name: Label
  endpoint:
    path: /labelcontroller_generate
    method: POST
- name: organization
  endpoint:
    path: /v3/organizations/me
    method: GET
- name: conversion
  endpoint:
    path: /convert
    method: POST
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: metadata.pagination.links
    params: {}
- name: transaction
  endpoint:
    path: /v3/transactions
    method: POST
    data_selector: object
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
    data_selector: data
    params: {}
- name: Poller
  endpoint:
    path: /pollingcontroller_list
    method: GET
- name: Relationship
  endpoint:
    path: /relationshipcontroller_listv3
    method: GET
- name: Organization
  endpoint:
    path: /organizationv3controller_getown
    method: GET
- name: Transaction
  endpoint:
    path: /transactioncontrollerv3_list
    method: GET
- name: Attachment
  endpoint:
    path: /attachmentcontroller_getbyidv3
    method: GET
- name: Delivery
  endpoint:
    path: /deliverycontroller_getdelivery
    method: GET
- name: Label
  endpoint:
    path: /labelcontroller_generate
    method: POST
- name: transaction
  endpoint:
    path: /transactions/{transactionId}
    method: GET
- name: transaction_message
  endpoint:
    path: /v3/transactions/{transactionId}/message
    method: GET
    data_selector: object
- name: transactions
  endpoint:
    path: /v3/polling-buckets/{bucketId}
    method: GET
    data_selector: array of objects
    params:
      limit: 30
- name: confirm_retrieval
  endpoint:
    path: /v3/polling-buckets/{id}/confirm-retrieval
    method: POST
    data_selector: confirmedTransactions
    params:
      resourceIds: []
- name: confirm_delivery
  endpoint:
    path: /v3/transactions/confirm-delivery
    method: POST
- name: relationships
  endpoint:
    path: /v3/relationships
    method: GET
    data_selector: data
    params: {}
- name: acknowledgment
  endpoint:
    path: /v3/transactions/{transactionId}/acknowledgment
    method: POST
- name: organization
  endpoint:
    path: /v3/organizations/me
    method: GET
    data_selector: object
- name: Acknowledgment
  endpoint:
    path: /v3/transactions/{transactionId}/acknowledgment
    method: GET
    data_selector: object
- name: conversion
  endpoint:
    path: /v3/convert
    method: POST
- name: attachment
  endpoint:
    path: /v3/attachments/{attachmentId}
    method: GET
    data_selector: object
- name: transaction
  endpoint:
    path: /v3/transactions
    method: POST
    data_selector: object
- name: attachment_content
  endpoint:
    path: /v3/attachments/{attachmentId}/content
    method: GET
    data_selector: string
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: approve_delivery
  endpoint:
    path: /v3/deliveries/{deliveryId}/approve
    method: POST
- name: transaction
  endpoint:
    path: /v3/transactions/{transactionId}
    method: GET
- name: transaction_message
  endpoint:
    path: /v3/transactions/{transactionId}/message
    method: GET
    data_selector: object
- name: fail_delivery
  endpoint:
    path: /v3/deliveries/{deliveryId}/fail
    method: POST
- name: confirm_delivery
  endpoint:
    path: /v3/transactions/confirm-delivery
    method: POST
- name: delivery
  endpoint:
    path: /v3/deliveries/{deliveryId}
    method: GET
    data_selector: object
- name: generate_label
  endpoint:
    path: /v3/labels
    method: POST
- name: create_acknowledgment
  endpoint:
    path: /v3/transactions/{transactionId}/acknowledgment
    method: POST
    data_selector: errors
    params: {}
- name: acknowledgment
  endpoint:
    path: /v3/transactions/{transactionId}/acknowledgment
    method: GET
- name: Transaction
  endpoint:
    path: /transaction
    method: GET
    data_selector: transactions
- name: Organization
  endpoint:
    path: /organization
    method: GET
    data_selector: organization
- name: Delivery
  endpoint:
    path: /delivery
    method: GET
    data_selector: delivery
- name: Attachment
  endpoint:
    path: /attachment
    method: GET
    data_selector: attachment
- name: Label
  endpoint:
    path: /label
    method: POST
    data_selector: label
- name: attachment
  endpoint:
    path: /v3/attachments/{attachmentId}
    method: GET
    data_selector: object
- name: attachment_content
  endpoint:
    path: /v3/attachments/{attachmentId}/content
    method: GET
- name: purchase_order
  endpoint:
    path: /reference/purchase-order-850
    method: GET
    data_selector: transactionSets
    params: {}
- name: approve_delivery
  endpoint:
    path: /v3/deliveries/{deliveryId}/approve
    method: POST
- name: baseline_item_data
  endpoint:
    path: /baselineItemData
    method: GET
    data_selector: baselineItemData
    params: {}
- name: product_item_description
  endpoint:
    path: /productItemDescription
    method: GET
    data_selector: productItemDescription
    params: {}
- name: transaction_totals
  endpoint:
    path: /transactionTotals
    method: GET
    data_selector: transactionTotals
    params: {}
- name: fail_delivery
  endpoint:
    path: /v3/deliveries/{deliveryId}/fail
    method: POST
- name: purchase_order_acknowledgment
  endpoint:
    path: /transactioncontrollerv3_acknowledgetransaction
    method: POST
    data_selector: transactionSets
    params: {}
- name: delivery
  endpoint:
    path: /deliveries/{deliveryId}
    method: GET
    data_selector: object
    params: {}
- name: label
  endpoint:
    path: /v3/labels
    method: POST
- name: baselineItemData
  endpoint:
    path: /baselineItemData
    method: GET
    data_selector: baselineItemData
- name: productItemDescription
  endpoint:
    path: /productItemDescription
    method: GET
    data_selector: productItemDescription
- name: lineItemAcknowledgment
  endpoint:
    path: /lineItemAcknowledgment
    method: GET
    data_selector: lineItemAcknowledgment
- name: transactionTotals
  endpoint:
    path: /transactionTotals
    method: GET
    data_selector: transactionTotals
- name: ship_notice_manifest
  endpoint:
    path: /ship-notice-manifest
    method: POST
    data_selector: transactionSets
    params: {}
- name: poller
  endpoint:
    path: /pollingcontroller_list
    method: GET
- name: relationship
  endpoint:
    path: /relationshipcontroller_listv3
    method: GET
- name: organization
  endpoint:
    path: /organizationv3controller_getown
    method: GET
- name: conversion
  endpoint:
    path: /conversioncontroller_convertdata
    method: POST
- name: transaction
  endpoint:
    path: /transactioncontrollerv3_create
    method: POST
- name: attachment
  endpoint:
    path: /attachmentcontroller_getbyidv3
    method: GET
- name: delivery
  endpoint:
    path: /deliverycontroller_getdelivery
    method: GET
- name: label
  endpoint:
    path: /labelcontroller_generate
    method: POST
- name: purchase_order
  endpoint:
    path: /reference/purchase-order-850
    method: GET
    data_selector: transactionSets
    params: {}
- name: baselineItemData
  endpoint:
    path: /baselineItemData
    method: GET
    data_selector: baselineItemData
    params: {}
- name: productItemDescription
  endpoint:
    path: /productItemDescription
    method: GET
    data_selector: productItemDescription
    params: {}
- name: transactionTotals
  endpoint:
    path: /transactionTotals
    method: GET
    data_selector: transactionTotals
    params: {}
- name: geographicLocation
  endpoint:
    path: /geographicLocation
    method: GET
    data_selector: geographicLocation
    params: {}
- name: hierarchicalLevel2
  endpoint:
    path: /hierarchicalLevel2
    method: GET
    data_selector: hierarchicalLevel
    params: {}
- name: purchaseOrderReference
  endpoint:
    path: /purchaseOrderReference
    method: GET
    data_selector: purchaseOrderReference
    params: {}
- name: hierarchicalLevel3
  endpoint:
    path: /hierarchicalLevel3
    method: GET
    data_selector: hierarchicalLevel
    params: {}
- name: itemPhysicalDetails
  endpoint:
    path: /itemPhysicalDetails
    method: GET
    data_selector: itemPhysicalDetails
    params: {}
- name: marksAndNumbersInformation
  endpoint:
    path: /marksAndNumbersInformation
    method: GET
    data_selector: marksAndNumbersInformation
    params: {}
- name: hierarchicalLevel4
  endpoint:
    path: /hierarchicalLevel4
    method: GET
    data_selector: hierarchicalLevel
    params: {}
- name: itemIdentification
  endpoint:
    path: /itemIdentification
    method: GET
    data_selector: itemIdentification
    params: {}
- name: itemDetailShipment
  endpoint:
    path: /itemDetailShipment
    method: GET
    data_selector: itemDetailShipment
    params: {}
- name: productItemDescription
  endpoint:
    path: /productItemDescription
    method: GET
    data_selector: productItemDescription
    params: {}
- name: purchase_order_acknowledgment
  endpoint:
    path: /purchase_order_acknowledgment
    method: POST
    data_selector: transactionSets
- name: invoice
  endpoint:
    path: /reference/invoice-810
    method: GET
    data_selector: transactionSets
    params: {}
- name: baselineItemData
  endpoint:
    path: /baselineItemData
    method: GET
    data_selector: baselineItemData
- name: productItemDescription
  endpoint:
    path: /PID_loop
    method: GET
    data_selector: productItemDescription
- name: lineItemAcknowledgment
  endpoint:
    path: /ACK_loop
    method: GET
    data_selector: lineItemAcknowledgment
- name: transactionTotals
  endpoint:
    path: /CTT_loop
    method: GET
    data_selector: transactionTotals
- name: baselineItemDataInvoice
  endpoint:
    path: /invoices/baselineItemData
    method: GET
    data_selector: baselineItemDataInvoice
    params: {}
- name: productItemDescription
  endpoint:
    path: /invoices/productItemDescription
    method: GET
    data_selector: productItemDescription
    params: {}
- name: totalMonetaryValueSummary
  endpoint:
    path: /invoices/totalMonetaryValueSummary
    method: GET
    data_selector: totalMonetaryValueSummary
    params: {}
- name: transactionTotals
  endpoint:
    path: /invoices/transactionTotals
    method: GET
    data_selector: transactionTotals
    params: {}
- name: ship_notice_manifest
  endpoint:
    path: /api/v1/ship-notice-manifest
    method: POST
    data_selector: transactionSets
    params: {}
- name: Motor Carrier Load Tender
  endpoint:
    path: /reference/transportation-motor-carrier-load-tender-204
    method: GET
- name: Response to a Load Tender
  endpoint:
    path: /reference/transportation-response-to-a-load-tender-990
    method: GET
- name: Transportation Carrier Shipment Status Message
  endpoint:
    path: /reference/transportation-transportation-carrier-shipment-status-message-214
    method: GET
- name: transaction
  endpoint:
    path: /transactioncontrollerv3_create
    method: POST
    data_selector: transactionSets
    params: {}
- name: list_transactions
  endpoint:
    path: /transactioncontrollerv3_list
    method: GET
    data_selector: transactions
    params: {}
- name: get_transaction
  endpoint:
    path: /transactioncontrollerv3_getbyid
    method: GET
    data_selector: transaction
    params: {}
- name: geographicLocation
  endpoint:
    path: /geographicLocation
    method: GET
    data_selector: geographicLocation
- name: hierarchicalLevel2
  endpoint:
    path: /hierarchicalLevel2
    method: GET
    data_selector: hierarchicalLevel
    params: {}
- name: purchaseOrderReference
  endpoint:
    path: /purchaseOrderReference
    method: GET
    data_selector: purchaseOrderReference
- name: hierarchicalLevel3
  endpoint:
    path: /hierarchicalLevel3
    method: GET
    data_selector: hierarchicalLevel
- name: itemPhysicalDetails
  endpoint:
    path: /itemPhysicalDetails
    method: GET
    data_selector: itemPhysicalDetails
- name: marksAndNumbersInformation
  endpoint:
    path: /marksAndNumbersInformation
    method: GET
    data_selector: marksAndNumbersInformation
- name: hierarchicalLevel4
  endpoint:
    path: /hierarchicalLevel4
    method: GET
    data_selector: hierarchicalLevel
- name: itemIdentification
  endpoint:
    path: /itemIdentification
    method: GET
    data_selector: itemIdentification
- name: itemDetailShipment
  endpoint:
    path: /itemDetailShipment
    method: GET
    data_selector: itemDetailShipment
- name: productItemDescription
  endpoint:
    path: /productItemDescription
    method: GET
    data_selector: productItemDescription
- name: transaction
  endpoint:
    path: /transactioncontrollerv3_create
    method: POST
- name: delivery
  endpoint:
    path: /deliverycontroller_getdelivery
    method: GET
- name: invoice
  endpoint:
    path: /reference/invoice-810
    method: GET
    data_selector: transactionSets
- name: baseline_item_data_invoice
  endpoint:
    path: /invoice/baselineItemData
    method: GET
    data_selector: baselineItemDataInvoice
- name: product_item_description
  endpoint:
    path: /invoice/productItemDescription
    method: GET
    data_selector: productItemDescription
- name: total_monetary_value_summary
  endpoint:
    path: /invoice/totalMonetaryValueSummary
    method: GET
    data_selector: totalMonetaryValueSummary
- name: transaction_totals
  endpoint:
    path: /invoice/transactionTotals
    method: GET
    data_selector: transactionTotals
- name: Motor Carrier Load Tender
  endpoint:
    path: /reference/transportation-motor-carrier-load-tender-204
    method: POST
- name: Response to a Load Tender
  endpoint:
    path: /reference/transportation-response-to-a-load-tender-990
    method: POST
- name: Transportation Carrier Shipment Status Message
  endpoint:
    path: /reference/transportation-transportation-carrier-shipment-status-message-214
    method: GET
- name: transaction
  endpoint:
    path: /transactioncontrollerv3_create
    method: POST
    data_selector: transactionSets
- name: acknowledgment
  endpoint:
    path: /transactioncontrollerv3_acknowledgetransaction
    method: POST
    data_selector: acknowledgment
- name: delivery
  endpoint:
    path: /deliverycontroller_handledeliveryapproved
    method: POST
    data_selector: delivery
- name: total_weight_and_charges
  endpoint:
    path: /totalWeightAndCharges
    method: GET
    data_selector: totalWeightAndCharges
- name: shipment_status
  endpoint:
    path: /shipment_status
    method: GET
    data_selector: transactionSets
    params: {}
- name: response_to_load_tender
  endpoint:
    path: /response_to_load_tender
    method: POST
    data_selector: message.transactionSets
    params: {}
- name: transactionSets
  endpoint:
    path: /reference/transportation-carrier-shipment-status-message-214
    method: GET
- name: transaction_status
  endpoint:
    path: /v3/transaction
    method: GET
    data_selector: transactionSets
    params: {}
- name: poller
  endpoint:
    path: /pollingcontroller_list
    method: GET
- name: relationship
  endpoint:
    path: /relationshipcontroller_listv3
    method: GET
- name: organization
  endpoint:
    path: /organizationv3controller_getown
    method: GET
- name: conversion
  endpoint:
    path: /conversioncontroller_convertdata
    method: POST
- name: transaction
  endpoint:
    path: /transactioncontrollerv3_create
    method: POST
- name: attachment
  endpoint:
    path: /attachmentcontroller_getbyidv3
    method: GET
- name: delivery
  endpoint:
    path: /deliverycontroller_getdelivery
    method: GET
- name: label
  endpoint:
    path: /labelcontroller_generate
    method: POST
- name: Transaction
  endpoint:
    path: /transactioncontrollerv3_create
    method: POST
- name: List Transactions
  endpoint:
    path: /transactioncontrollerv3_list
    method: GET
- name: Get a Transaction
  endpoint:
    path: /transactioncontrollerv3_getbyid
    method: GET
- name: Get a Transaction Message
  endpoint:
    path: /transactioncontrollerv3_getmessage
    method: GET
- name: Confirm the delivery of a set of Transactions
  endpoint:
    path: /transactioncontrollerv3_confirmdelivery
    method: POST
- name: Create an Acknowledgment
  endpoint:
    path: /transactioncontrollerv3_acknowledgetransaction
    method: POST
- name: Get an Acknowledgment
  endpoint:
    path: /transactioncontrollerv3_getacknowledgment
    method: GET
- name: transactions
  endpoint:
    path: /v3/transactions
    method: GET
- name: transaction
  endpoint:
    path: /v3/transactions
    method: GET
- name: transactions
  endpoint:
    path: /v3/polling-buckets/{bucketId}
    method: GET
    data_selector: array of objects
    params:
      limit: 1-100
- name: transactions
  endpoint:
    path: /v3/polling-buckets/{bucketId}
    method: GET
    data_selector: array of objects
    params:
      limit: 100
- name: relationships
  endpoint:
    path: /v3/relationships
    method: GET
    data_selector: data
    params: {}
- name: relationships
  endpoint:
    path: /v3/relationships
    method: GET
    data_selector: data
    params:
      limit: 100
- name: organization
  endpoint:
    path: /v3/organizations/me
    method: GET
    data_selector: object
- name: organization
  endpoint:
    path: /v3/organizations/me
    method: GET
    data_selector: object
- name: conversion
  endpoint:
    path: /v3/convert
    method: POST
- name: convert_data
  endpoint:
    path: /convert
    method: POST
- name: transaction
  endpoint:
    path: /v3/transactions
    method: POST
    data_selector: object
- name: transaction
  endpoint:
    path: /v3/transactions
    method: POST
    data_selector: object
- name: attachment
  endpoint:
    path: /v3/attachments/{attachmentId}
    method: GET
- name: attachment
  endpoint:
    path: /v3/attachments/{attachmentId}
    method: GET
    data_selector: object
- name: approve_delivery
  endpoint:
    path: /v3/deliveries/{deliveryId}/approve
    method: POST
- name: label
  endpoint:
    path: /v3/labels
    method: POST
- name: label
  endpoint:
    path: /v3/labels
    method: POST
notes:
- When posting or uploading a JSON to Orderful, we recommend that you don't include
  any headers within the transaction.
- All calls are authenticated and go to and from your Orderful organization.
- Sales orders serve as the central source of truth for outbound transactions.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Every Orderful organization must have an associated EDI Account, and every EDI Account
  is identified using an ISA ID and ISA ID Qualifier.
- All Trading Partners are represented in Orderful, regardless of whether they are
  our customers.
- A Trading Partnership is a relation between two EDI Accounts that contains at least
  one Relationship.
- If you are a Follower who wants to trade EDI documents with a Leader, you must create
  a new Trading Partnership by sending a Trade Request to your Leader.
- 'If the Company Name is in our network: This means that we have this Leader in our
  network and have some or all of their requirements already configured. This means
  that some or all of the information required in the following steps will be prepopulated
  for you, which means you will not need to get this from your Trading Partner.'
- If you received a Trade Request from a claimed Leader who is already in our system,
  you can skip this step.
- 'Files you upload to Orderful must be in one of the following formats: .edi, .json,
  .x12, or .txt and be less than 50MB for X12/EDIFACT or 100MB for JSON.'
- Submitting a Trade Request requires ISA ID, ISA Qualifier, and contact email.
- You can send the Transaction data in either JSON or X12 format.
- Uses OAuth2 with refresh token — requires setup of connected app in Orderful
- An X12 file is organized in several nested envelopes, which are pairs composed of
  header and trailer segments.
- 'There are three important components found within an X12 document: Segments, Elements,
  and Loops.'
- Orderful only supports synchronous, encrypted AS2 transmission with no compression
  using HTTPS or HTTP.
- Orderful Onboarding Process guides new customers from initial setup to going live
  with one or multiple partners.
- Most Orderful customers connect to Orderful using our RESTful APIs.
- Orderful provides a set of training resources that outline the tasks for each major
  step in the onboarding process.
- Some objects like Contact may return nulls in deeply nested fields
- Partnership Setup outlines the process of setting up new partnerships as both a
  Follower or a Leader, focusing on gathering requirements, creating trade requests,
  and configuring relationships.
- The Partnership and Go Live training deck covers the core steps to successfully
  create and deliver valid, delivered and accepted test transactions.
- It outlines the types of testing errors you may encounter and provides links to
  a Troubleshooting Guide with all available options for resolving them.
- Common EDI data transmitted includes 990, 855, 860, 856, and 810 transactions.
- Common EDI data transmitted, per industry vertical
- Acknowledgments can only be sent once.
- If you mark a Transaction as 'Accepted' or 'Rejected' this cannot be undone.
- Common EDI data transmitted per industry vertical
- Some objects may return nulls in deeply nested fields
- You can only create one Transaction at a time.
- Transactions must correspond to an existing, configured Relationship in Orderful.
- You can’t create a Live transaction by copying an existing transaction, you can
  only copy to the Test stream.
- Any Transaction attachments, as well as the audit trail and status aren't copied
  to the new Transaction.
- Acknowledgments can only be sent once. If you mark a Transaction as 'Accepted' or
  'Rejected' this cannot be undone.
- Any outbound Transaction with a delivery status of 'Pending' can be deleted.
- Transactions must be in EDIFACT, JSON, or X12 format
- 50MB or less for EDIFACT/X12 files
- 100MB or less for JSON files
- Transactions can be downloaded in .JSON format and the format of its source (X12,
  EDIFACT).
- 850 Purchase Orders can be downloaded as a .csv from the main Transactions page.
- The Rules Engine is designed for minor changes to transaction data.
- The Rules Engine should only be used for minor data modifications, and everything
  else should be done in the connector.
- Transactions may have multiple statuses including Validation, Delivery, and Acknowledgement.
- Monitoring the validation status is recommended every 10 seconds until a new status
  appears or one minute has elapsed.
- Delivery status should be monitored every 5 minutes for a period of 24 hours.
- Acknowledgment status should be checked every 5 minutes for 24 hours.
- Transactions are created asynchronously, and their status must be monitored.
- HTTP 2xx response (other than 202) indicates delivery success.
- HTTP 202 response + confirmation sent to the /approve endpoint indicates delivery
  success.
- Negative MDN received indicates transaction failure.
- Unprocessed Transactions are Transactions sent to Orderful that can’t be created
  in Orderful.
- Transactions sit in a 'bucket' until they are retrieved and confirmed.
- To approve or fail delivery, use the provided endpoints.
- You can specify the number of transactions returned using the limit query parameter,
  to a maximum of 100 transactions or 200 MB payload size.
- 'Orderful currently supports three Transaction Workflows: Retail, Transportation,
  and Warehouse.'
- Each Workflow groups Transactions that share a common reference.
- After Transactions are grouped into Workflows, some of them have further validation
  performed on them.
- You can subscribe to workflow notifications for the Retail workflow
- Orderful will check whether a transaction is valid after it applies Rules.
- Rules that contain nested functions are evaluated from the inside out.
- Uses LOOKUPV2 function for copying values between properties.
- Supports error handling with IFERROR in rules.
- The Relationship status will have slightly different text depending on whether you
  view it on your Relationships settings page or using our List Relationships endpoint.
- By default 'Show empty fields' is toggled to 'Off' for the JSON view inside the
  Rules Editor.
- You can filter by Transaction Type, Direction, Your EDI Account/ISA ID, Partner
  EDI Account, Status, and Partner Org.
- Requires setup of connected app in api
- Your Interchange ID and Qualifier information can be found in your EDI Accounts
  settings page.
- Forwarding allows you to forward a JSON transaction from one Inbound Relationship
  to another Outbound Relationship.
- If Auto Send is enabled for your Inbound Relationship, then Inbound Transactions
  will be automatically forwarded.
- Interchange ID and Qualifier can be found in your EDI Accounts settings page.
- AS2 is a protocol to transmit signed and encrypted business data payloads over HTTP.
- The AS2 ID and certificate is used to secure the message by encryption and to authenticate
  the sender using hash-based signatures.
- Asynchronous transmission, compressed data and unencrypted data are not supported.
- For security reasons, Orderful recommends using the HTTPS protocol as data transmitted
  is SSL-encrypted.
- Some AS2 software is known to require additional configuration either in your AS2
  software and/or in Orderful's AS2 Communication Channel Advanced Settings.
- Your guideline has been now created as a draft guideline.
- You can update the loop and segment structure of a draft guideline at any time.
- Alternatively, you can create a new guideline from an existing one by opening it
  and clicking on 'Copy to new Draft'.
- Only users with an Admin role can manage users (add, edit and remove).
- You have to enter a unique email address for each user.
- 'You have to assign a role for each user: Admin, Manager, Integrator, Analyst, Support,
  Viewer.'
- Validation errors happen when the sender of a transaction doesn’t provide a mandatory
  loop or segment or elements.
- Validation errors happen when the sender of a transaction doesn’t use an allowed
  code for a specific element, regardless of its type.
- Conditional segments or loops, Optional, Recommended or Not Recommended loops are
  loops, segments or elements don’t trigger validation errors if you send the corresponding
  information or not.
- SSO is only available for Integrated organizations.
- Automated provisioning via SCIM is not available at this time.
- You will not be able to generate example payloads for Relationships that are in
  the 'Configure Setup' or 'Pending setup by partner' status.
- Orderful has 6 basic roles with different permissions.
- Orderful's print templates are built for a print density of 8 dpmm (203 dpi).
- You will not be able to generate example payloads for Relationships that are in
  the "Configure Setup" or “Pending setup by partner” status.
- Custom headers can be included with the Transaction that Orderful sends.
- Orderful creates, hosts and manages the SFTP server if using Orderful-hosted.
- Self-hosted requires user to create, host and manage the FTP/SFTP server.
- Custom headers can be included with the Transaction that Orderful sends. To set
  these up please contact us at support@orderful.com.
- Outbound Communication Channels are inactive when created, meaning Orderful isn’t
  polling files from your server.
- You'll find the Orderful AS2 URL `https://as2.orderful.com` on the outbound AS2
  side panel created and linked to your Inbound AS2.
- If you would like Orderful to connect to your systems you may need to whitelist
  the IP addresses that Orderful will use to connect to you.
- Automatic conversion may remove some transaction values when delivered.
- Orderful For Netsuite may not function as intended if your NetSuite environment
  includes extensive customizations, scripts, or third-party integrations that alter
  standard workflows.
- The SuiteApp communicates with Orderful via a Poller Communication Channel that
  syncs data every 15 minutes.
- 'Fixed: USD for currency acknowledgment'
- 'Fixed: Seller perspective indicated in currency'
- Choosing the same setting on a Company level will override the global defaults.
- Some fields may return nulls in deeply nested structures
- Up to two iterations depending on whether pallets and/or packs are present.
- Some fields are hardcoded values.
- Thank you for your continued partnership. We recommend testing these updates in
  your sandbox environment before production deployment.
- There may be multiple item fulfillments associated with an 856.
- First iteration of N1_loop uses the warehouse address that is joined to the Ordered
  Item.
- Second iteration of N1_loop uses the shipping address that is attached to the item
  Fulfillment.
- Incremental counter for hierarchicalIDNumber.
- Default SKU and UPC fields in NetSuite can be configured to map to other custom
  or native item fields.
- Use only one of ADDRESS BOOK or DISTRIBUTION CENTER
- Auto Send must be activated to send EDI transactions automatically.
- Date formatting converts from M/d/yyyy format to yyyyMMdd format for EDI requirements.
- You must have the GSI Prefix field populated in Company General Preferences or Subsidiary
  in order to leverage SSCC generation.
- The dataset created to map packing data does not require any filters.
- There is a maximum of 1000 labels currently supported by the bulk labels API in
  Orderful.
- AUTO SEND Check if you want the EDI transaction to automatically post to Orderful
  when generated.
- If you need to combine multiple NetSuite invoices into a single EDI invoice, choose
  how to identify which invoices should be grouped together.
- Discounts appearing on NetSuite invoices are automatically mapped to SAC segments
  when line items with item type 'Discount' are present.
- Shipping charges are automatically aggregated and mapped when line items with item
  type 'ShipItem' are present.
- Inventory advice can be scheduled to send to a trading partner by using Orderful
  Inventory Advice Handler script deployment.
- The 846 will generate an Orderful Transaction record for any customer configured
  with the 846 transaction type and settings.
- Transactions are pulled from your Orderful Polling Bucket by a script.
- 'For 850 and 875: new properties cannot be added or modified at the moment. However,
  existing property types can still be updated via JSONa can be over'
- 846 Inventory Advice is not supported via JSONata editing yet
- Manually packing is the process of creating cartons and assigning items to each
  carton.
- The SSCC18 field will auto populate with a unique serial number when using the Generate
  SSCC codes button.
- Configure Packing Groups first before processing fulfillments
- Monitor Map/Reduce tasks for large batch processing
- A maximum of 1000 labels currently supported by the bulk labels API in Orderful.
- Additional modifications may be required depending on your NetSuite configuration
  and customizations.
- Discounts appearing on NetSuite invoices are automatically mapped to SAC segments
  when line items with item type 'Discount' are present on the invoice.
- Shipping charges are automatically aggregated and mapped when line items with item
  type 'ShipItem' are present on the invoice.
- 'No Automatic Processing: Transactions marked for custom process will not create
  NetSuite transactions automatically.'
- All data you send will be validated against your Guidelines and must be valid EDIFACT/JSON/X12.
- Blank data and/or dummy IDs will likely result in an error.
- This guide explains how developers can extend and customize the SuiteApp by integrating
  with its data flow stages.
- 'Currently Orderful only supports: Inclusive start date and exclusive end date'
- Value can be 1-100. Default value is 30.
- Response size is limited to 200MB.
- Orderful will soon deprecate this endpoint.
- The URL for this request expired after 30 days.
- A maximum of 100 Transactions will be returned at a time.
- Orderful will soon deprecate this endpoint. After retrieving Transactions from a
  Polling Bucket, you should use the Delivery API to mark a Delivery as Approved or
  Failed.
- Update sender and receiver to test
- The baseline item data segment provides the line item data.
- The PID loop provides the description for each item in PO1.
- The CTT loop provides a summary of the order.
- Links to Delivery objects are available in Transactions retrieved from a Poller
  Bucket or via an Inbound HTTP Communication Channel.
- 'Each type of summary is included in one iteration of the CTT loop and is composed
  of one segment: Transaction Totals (CTT).'
- Ensure to update sender and receiver ISA IDs in test transactions.
- Ensure to update sender and receiver ISA IDs for testing.
- Make sure to edit the sender and receiver ISA IDs for test transactions.
- V3 is an incremental update that consists solely of API surface updates.
- V3 is an incremental update that consists solely of API surface updates designed
  to make integration easier.
- Set the Content-Type header as the format you are sending, and the Accept header
  as the format you would like to receive back.
- Only one Transaction can be posted at a time.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'HTTP 201: Acknowledgment created successfully.'
- 'HTTP 200: Successful response'
- 'HTTP 201: Transaction created'
- 'HTTP 400: Bad request - check input data'
- 'HTTP 201: Acknowledgment created successfully'
- '201 Created: Transaction successfully created'
- 'Invalid Validation status: Check the transaction data for errors.'
- HTTP 202 response + Delivery confirmation sent to the /fail endpoint
- HTTP 404, 408, 409, 423, 429, 502, 503 or 504 responses will result in a retry
- Any HTTP response not listed will immediately result in a failed Transaction
- HTTP 404, 408, 409, 423, 429, 502, 503, or 504 will trigger a retry.
- After 3 unsuccessful retries, the transaction will be marked as failed.
- HTTP 200 response is not received when creating a transaction.
- Limit of 100 transactions or 200 MB payload size.
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Check OAuth token and permissions.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '500 Internal Server Error: Retry the request.'
- '400 Bad Request: Your server thinks the incoming AS2 message from Orderful is malformed
  in some way.'
- '401 Unauthorized: Your server is requesting authentication for the incoming AS2
  message.'
- '403 Forbidden: Your server does not think that Orderful has permission to send
  the incoming AS2 message.'
- '404 Not Found: The incoming AS2 message is being sent to a URL that cannot be found.'
- '500 Internal Server Error: A general error has occurred within your server.'
- '504 Gateway Timeout: There was an error in a network gateway, such as your firewall.'
- 'argumentError: Field must be provided for this label type.'
- 'Error: Invalid label payload'
- 'Discounts Not Appearing in SAC: Check if Orderful Discount record exists for the
  discount item.'
- 'Incorrect SAC Codes: Verify correct SAC code is set in the Orderful Discount configuration.'
- 'ITEM_DOES_NOT_HAVE_UNITS_PER_CARTON: Assign item to a packing group or set the
  Units Per Carton field'
- 'ITEM_FULFILLMENT_ALREADY_PACKED: Delete existing cartons before re-running auto-pack'
- 'AUTO_PACK_PROCESS_RUNNING: Wait for the existing task to complete'
- 'Discounts Not Appearing in SAC: Check if the Orderful Discount record exists for
  the discount item.'
- 'Incorrect SAC Codes: Verify that the correct SAC code is set in the Orderful Discount
  configuration.'
- 'Shipping Charges Missing: Ensure shipping items are properly classified as ''ShipItem''
  type.'
- 'HTTP 429: Too Many Requests'
- '200: Successful response'
- 'URL Expired: The URL for this request expired after 30 days.'
- 200 The confirmation batch was successfully processed.
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.orderful.com
  auth:
    type: oauth2
source_metadata: null
