resources:
- name: receivable_contact
  endpoint:
    path: /contacts/receivable
    method: POST
- name: receivable_contact
  endpoint:
    path: /contacts/receivable
    method: POST
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: payment_request
  endpoint:
    path: /payment_requests
    method: POST
    data_selector: data
    params: {}
- name: Payments
  endpoint:
    path: /payments
    method: GET
    data_selector: records
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: payment_requests
  endpoint:
    path: /payment_requests
    method: POST
    data_selector: data
    params: {}
- name: agreements
  endpoint:
    path: /reference/listoutgoingagreements
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /reference/listallcontacts
    method: GET
    data_selector: data
    params: {}
- name: payments
  endpoint:
    path: /reference/listallpayments
    method: GET
    data_selector: data
    params: {}
- name: agreements
  endpoint:
    path: /reference/listoutgoingagreements
    method: GET
    data_selector: data
- name: bank_accounts
  endpoint:
    path: /reference/listallbankaccounts
    method: GET
    data_selector: data
- name: contacts
  endpoint:
    path: /reference/listallcontacts
    method: GET
    data_selector: data
- name: payments
  endpoint:
    path: /reference/listallpayments
    method: GET
    data_selector: data
- name: payouts
  endpoint:
    path: /reference/listallpayouts
    method: GET
    data_selector: data
- name: payment_requests
  endpoint:
    path: /reference/listpaymentrequestcollections
    method: GET
    data_selector: data
- name: refunds
  endpoint:
    path: /reference/listoutgoingrefunds
    method: GET
    data_selector: data
- name: transactions
  endpoint:
    path: /reference/listalltransactions
    method: GET
    data_selector: data
- name: transfers
  endpoint:
    path: /reference/listalltransfers
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /reference/getuserdetails
    method: GET
    data_selector: data
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: payment_requests
  endpoint:
    path: /payment_requests
    method: POST
    data_selector: data
    params: {}
- name: CoP Lookup
  endpoint:
    path: /cop/account/validate
    method: POST
- name: CoP Lookup
  endpoint:
    path: /cop/account/validate
    method: POST
- name: CoP Lookup
  endpoint:
    path: /cop/lookup
    method: GET
    data_selector: results
    params: {}
- name: financial_institution
  endpoint:
    path: /api/payto/financial_institutions
    method: GET
    data_selector: institutions
    params: {}
- name: payto_alias_resolution
  endpoint:
    path: /payto/alias_resolution
    method: POST
    data_selector: data
    params:
      type: alias_phone
      value: +61-411222333
      requester:
        id: user_G7MQWwkQZIP8vbfH
        remote_ip: 192.0.2.146
- name: financial_institutions
  endpoint:
    path: /payto/financial_institutions
    method: GET
    data_selector: institutions
- name: payto_agreements
  endpoint:
    path: /payto/agreements
    method: POST
- name: agreements
  endpoint:
    path: /payto/agreements
    method: POST
    data_selector: data
    params: {}
- name: payto_alias_resolution
  endpoint:
    path: /payto/alias_resolution
    method: POST
    data_selector: data
    params: {}
- name: payments
  endpoint:
    path: /payto/payments
    method: POST
    data_selector: data
    params: {}
- name: retry_payment
  endpoint:
    path: /payto/payments/{payment_uid}/retry
    method: POST
    data_selector: data
    params: {}
- name: payto_agreement
  endpoint:
    path: /payto/agreements
    method: POST
- name: agreements
  endpoint:
    path: /payto/agreements
    method: POST
    data_selector: data
- name: cancel_agreement
  endpoint:
    path: /payto/agreements/{agreement_uid}/cancellation
    method: POST
- name: suspend_agreement
  endpoint:
    path: /payto/agreements/{agreement_uid}/suspension
    method: POST
- name: reactivate_agreement
  endpoint:
    path: /payto/agreements/{agreement_uid}/reactivation
    method: POST
- name: payments
  endpoint:
    path: /payto/payments
    method: POST
    data_selector: data
    params: {}
- name: payment_retry
  endpoint:
    path: /payto/payments/{payment_uid}/retry
    method: POST
    data_selector: data
    params: {}
- name: cancel_payto_agreement
  endpoint:
    path: /payto/agreements/{agreement_uid}/cancellation
    method: POST
    data_selector: data
    params: {}
- name: suspend_payto_agreement
  endpoint:
    path: /payto/agreements/{agreement_uid}/suspension
    method: POST
    data_selector: data
    params: {}
- name: reactivate_payto_agreement
  endpoint:
    path: /payto/agreements/{agreement_uid}/reactivation
    method: POST
    data_selector: data
    params: {}
- name: payto_agreements
  endpoint:
    path: /payto/agreements
    method: GET
    data_selector: data
- name: payto_agreement_history
  endpoint:
    path: /payto/agreements/{agreement_uid}/history
    method: GET
    data_selector: data
- name: payto_payments
  endpoint:
    path: /payto/payments
    method: GET
    data_selector: data
- name: payto_payment
  endpoint:
    path: /payto/payments/{uid}
    method: GET
    data_selector: data
- name: unilateral_amendment
  endpoint:
    path: /payto/agreements/{agreement_uid}/amendment
    method: POST
    data_selector: data
    params: {}
- name: bilateral_amendment
  endpoint:
    path: /payto/agreements/{agreement_uid}/amendment
    method: POST
    data_selector: data
    params: {}
- name: recall_amendment
  endpoint:
    path: /payto/agreements/{agreement_uid}/amendment/recall
    method: POST
    data_selector: data
    params: {}
- name: payto_refunds
  endpoint:
    path: /payto/refunds
    method: POST
- name: payto_agreement
  endpoint:
    path: /payto/agreements
    method: POST
    data_selector: data
- name: payto_payment
  endpoint:
    path: /payto/payments
    method: POST
    data_selector: data
- name: payto_refunds
  endpoint:
    path: /payto/refunds
    method: POST
    data_selector: data
    params: {}
- name: payto_agreements
  endpoint:
    path: /payto/agreements
    method: GET
    data_selector: data
- name: payto_agreement_history
  endpoint:
    path: /payto/agreements/{agreement_uid}/history
    method: GET
    data_selector: data
- name: payto_payments
  endpoint:
    path: /payto/payments
    method: GET
    data_selector: data
- name: payto_payment
  endpoint:
    path: /payto/payments/{uid}
    method: GET
    data_selector: data
- name: debtor_action_types
  endpoint:
    path: /payto/agreement/actions
    method: GET
    data_selector: data
    params: {}
- name: payto_refunds
  endpoint:
    path: /payto/refunds
    method: POST
    data_selector: data
    params: {}
- name: refund
  endpoint:
    path: /payto/refunds
    method: POST
    data_selector: data
    params: {}
- name: debtor_action_types
  endpoint:
    path: /payto/agreement/actions
    method: POST
    data_selector: data
    params: {}
- name: agreements
  endpoint:
    path: /agreements/outgoing
    method: GET
    data_selector: data
    params:
      per_page: '25'
- name: agreements
  endpoint:
    path: /reference/post_payto-agreements
    method: POST
- name: payments
  endpoint:
    path: /reference/post_payto-payments
    method: POST
- name: refunds
  endpoint:
    path: /reference/post_payto-refunds
    method: POST
- name: Agreements
  endpoint:
    path: /reference/listoutgoingagreements
    method: GET
- name: Bank Accounts
  endpoint:
    path: /reference/listallbankaccounts
    method: GET
- name: Contacts
  endpoint:
    path: /reference/listallcontacts
    method: GET
- name: Payments
  endpoint:
    path: /reference/listallpayments
    method: GET
- name: Payouts
  endpoint:
    path: /reference/voidapayment
    method: DELETE
- name: Payment Requests
  endpoint:
    path: /reference/listpaymentrequestcollections
    method: GET
- name: Refunds
  endpoint:
    path: /reference/listoutgoingrefunds
    method: GET
- name: Transactions
  endpoint:
    path: /reference/listalltransactions
    method: GET
- name: Transfers
  endpoint:
    path: /reference/listalltransfers
    method: GET
- name: Users
  endpoint:
    path: /reference/getuserdetails
    method: GET
- name: Webhooks
  endpoint:
    path: /reference/getwebhooks
    method: GET
- name: agreements
  endpoint:
    path: /agreements/outgoing
    method: GET
    data_selector: data
    params:
      per_page: '25'
- name: agreement
  endpoint:
    path: /agreements/{agreement_ref}
    method: GET
- name: Cancel Agreement
  endpoint:
    path: /agreements/{agreement_ref}
    method: DELETE
- name: bank_accounts
  endpoint:
    path: /bank_accounts
    method: GET
    data_selector: data
- name: agreements
  endpoint:
    path: /reference/listoutgoingagreements
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /reference/listallcontacts
    method: GET
    data_selector: data
    params: {}
- name: payments
  endpoint:
    path: /reference/listallpayments
    method: GET
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /contacts/anyone
    method: POST
    data_selector: data
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params:
      per_page: '25'
- name: contact
  endpoint:
    path: /contacts/{id}
    method: GET
    data_selector: data
- name: Agreements
  endpoint:
    path: /reference/listoutgoingagreements
    method: GET
- name: Bank Accounts
  endpoint:
    path: /reference/listallbankaccounts
    method: GET
- name: Contacts
  endpoint:
    path: /reference/listallcontacts
    method: GET
- name: Payments
  endpoint:
    path: /reference/listallpayments
    method: GET
- name: Payouts
  endpoint:
    path: /reference/voidapayment
    method: DEL
- name: Payment Requests
  endpoint:
    path: /reference/listpaymentrequestcollections
    method: GET
- name: Refunds
  endpoint:
    path: /reference/listoutgoingrefunds
    method: GET
- name: Transactions
  endpoint:
    path: /reference/listalltransactions
    method: GET
- name: Transfers
  endpoint:
    path: /reference/listalltransfers
    method: GET
- name: Users
  endpoint:
    path: /reference/getuserdetails
    method: GET
- name: Webhooks
  endpoint:
    path: /reference/getwebhooks
    method: GET
- name: remove_contact
  endpoint:
    path: /contacts/{id}
    method: DELETE
    data_selector: '204'
- name: agreement
  endpoint:
    path: /agreements/{agreement_ref}
    method: GET
- name: contacts
  endpoint:
    path: /contacts/{id}
    method: PATCH
- name: cancel_agreement
  endpoint:
    path: /agreements/{agreement_ref}
    method: DELETE
- name: bank_accounts
  endpoint:
    path: /bank_accounts
    method: GET
    data_selector: data
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
- name: list_payments
  endpoint:
    path: /payments
    method: GET
    data_selector: data
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: data
    params:
      page: page
      per_page: per_page
- name: contact
  endpoint:
    path: /contacts/anyone
    method: POST
    data_selector: data
- name: payment
  endpoint:
    path: /payments/{payment_ref}
    method: GET
    data_selector: data
- name: all_payments
  endpoint:
    path: /payments/
    method: GET
    data_selector: data
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params:
      per_page: '25'
- name: void_payment
  endpoint:
    path: /payouts/{ref}
    method: DELETE
- name: contact
  endpoint:
    path: /contacts/{id}
    method: GET
    data_selector: data
- name: remove_contact
  endpoint:
    path: /contacts/{id}
    method: DELETE
- name: payment_requests
  endpoint:
    path: /payment_requests
    method: POST
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /contacts/{id}
    method: PATCH
- name: payment_request
  endpoint:
    path: /payment_requests/{payment_request_ref}
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: payment_request
  endpoint:
    path: /payment_requests/{payment_request_ref}
    method: DELETE
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: data
    params: {}
- name: collections
  endpoint:
    path: /payment_requests/collections
    method: GET
- name: receivables
  endpoint:
    path: /payment_requests/receivables
    method: GET
- name: payment
  endpoint:
    path: /payments/{payment_ref}
    method: GET
    data_selector: data
- name: void_a_payment
  endpoint:
    path: /payouts/{ref}
    method: DELETE
- name: refund
  endpoint:
    path: /credits/{credit_ref}/refunds
    method: POST
    data_selector: ''
    params: {}
- name: refunds
  endpoint:
    path: /refunds/outgoing
    method: GET
- name: payment_request
  endpoint:
    path: /payment_requests
    method: POST
    data_selector: data
    params: {}
- name: refund
  endpoint:
    path: /refunds/{refund_ref}
    method: GET
- name: payment_request
  endpoint:
    path: /payment_requests/{payment_request_ref}
    method: GET
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    params:
      min_created_date: ''
- name: cancel_payment_request
  endpoint:
    path: /payment_requests/{payment_request_ref}
    method: DELETE
- name: transfers
  endpoint:
    path: /transfers
    method: POST
- name: payment_requests_collections
  endpoint:
    path: /payment_requests/collections
    method: GET
- name: transfers
  endpoint:
    path: /transfers
    method: GET
- name: receivables
  endpoint:
    path: /payment_requests/receivables
    method: GET
- name: transfers
  endpoint:
    path: /transfers/{transfer_ref}
    method: GET
- name: refund
  endpoint:
    path: /credits/{credit_ref}/refunds
    method: POST
- name: user_details
  endpoint:
    path: /user
    method: GET
- name: refunds
  endpoint:
    path: /refunds/outgoing
    method: GET
- name: simulate_incoming_payid_payment
  endpoint:
    path: /simulate/incoming_npp_payid_payment
    method: POST
- name: refund
  endpoint:
    path: /refunds/{refund_ref}
    method: GET
- name: simulate_incoming_payment
  endpoint:
    path: /simulate/incoming_npp_bban_payment
    method: POST
- name: simulate_incoming_de_payment
  endpoint:
    path: /simulate/incoming_de_payment
    method: POST
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    params:
      min_created_date: last 30 days
- name: disable_receivable_contact
  endpoint:
    path: /contacts/{contact_id}/receivable/disable
    method: POST
- name: transfers
  endpoint:
    path: /transfers
    method: POST
- name: reactivate_receivable_contact
  endpoint:
    path: /contacts/{contact_id}/receivable/activate
    method: POST
- name: transfers
  endpoint:
    path: /transfers
    method: GET
- name: update_receivable_contact
  endpoint:
    path: /contacts/{contact_id}/receivable
    method: PATCH
- name: transfers
  endpoint:
    path: /transfers/{transfer_ref}
    method: GET
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: user_details
  endpoint:
    path: /user
    method: GET
- name: webhook_deliveries
  endpoint:
    path: /webhooks/{webhook_id}/deliveries
    method: GET
- name: simulate_incoming_payid_payment
  endpoint:
    path: /simulate/incoming_npp_payid_payment
    method: POST
- name: webhook_delivery
  endpoint:
    path: /webhook_deliveries/{id}
    method: GET
    data_selector: data
    params: {}
- name: simulate_incoming_payment
  endpoint:
    path: /simulate/incoming_npp_bban_payment
    method: POST
- name: webhook_delivery
  endpoint:
    path: /webhook_deliveries/{id}/redeliver
    method: POST
- name: create_agreement
  endpoint:
    path: /payto/agreements
    method: POST
- name: simulate_incoming_de_payment
  endpoint:
    path: /simulate/incoming_de_payment
    method: POST
- name: agreements
  endpoint:
    path: /payto/agreements
    method: GET
- name: disable_receivable_contact
  endpoint:
    path: /contacts/{contact_id}/receivable/disable
    method: POST
- name: show_agreement
  endpoint:
    path: /payto/agreements/{agreement_uid}
    method: GET
- name: reactivate_receivable_contact
  endpoint:
    path: /contacts/{contact_id}/receivable/activate
    method: POST
- name: agreement_history
  endpoint:
    path: /payto/agreements/{agreement_uid}/history
    method: GET
- name: receivable_contact
  endpoint:
    path: /contacts/{contact_id}/receivable
    method: PATCH
- name: create_amendment
  endpoint:
    path: /payto/agreements/{agreement_uid}/amendment
    method: POST
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: amendment
  endpoint:
    path: /payto/agreements/{agreement_uid}/amendment
    method: GET
- name: webhook_deliveries
  endpoint:
    path: /webhooks/{webhook_id}/deliveries
    method: GET
- name: create_amendment_recall
  endpoint:
    path: /payto/agreements/{agreement_uid}/amendment/recall
    method: POST
- name: cancel_agreement
  endpoint:
    path: /payto/agreements/{agreement_uid}/cancellation
    method: POST
- name: webhook_delivery
  endpoint:
    path: /webhook_deliveries/{id}
    method: GET
    data_selector: data
    params: {}
- name: suspend_agreement
  endpoint:
    path: /payto/agreements/{agreement_uid}/suspension
    method: POST
- name: webhook_deliveries
  endpoint:
    path: /webhook_deliveries/{id}/redeliver
    method: POST
- name: reactivate_agreement
  endpoint:
    path: /payto/agreements/{agreement_uid}/reactivation
    method: POST
    data_selector: response
- name: create_agreement
  endpoint:
    path: /payto/agreements
    method: POST
- name: simulate_debtor
  endpoint:
    path: /payto/agreements/{agreement_uid}/simulate_debtor_action
    method: POST
- name: agreements
  endpoint:
    path: /payto/agreements
    method: GET
- name: alias_resolution
  endpoint:
    path: /payto/alias_resolution
    method: POST
- name: show_agreement
  endpoint:
    path: /payto/agreements/{agreement_uid}
    method: GET
- name: create_payment
  endpoint:
    path: /payto/payments
    method: POST
- name: payments
  endpoint:
    path: /payto/payments
    method: GET
- name: list_agreement_history
  endpoint:
    path: /payto/agreements/{agreement_uid}/history
    method: GET
- name: payment
  endpoint:
    path: /payto/payments/{payment_uid}
    method: GET
- name: create_amendment
  endpoint:
    path: /payto/agreements/{agreement_uid}/amendment
    method: POST
- name: retry_payment
  endpoint:
    path: /payto/payments/{payment_uid}/retry
    method: POST
- name: agreement_amendment
  endpoint:
    path: /payto/agreements/{agreement_uid}/amendment
    method: GET
- name: refund
  endpoint:
    path: /payto/refunds
    method: POST
- name: refunds
  endpoint:
    path: /payto/refunds
    method: GET
- name: create_amendment_recall
  endpoint:
    path: /payto/agreements/{agreement_uid}/amendment/recall
    method: POST
- name: refund
  endpoint:
    path: /payto/refunds/{refund_uid}
    method: GET
- name: cancel_agreement
  endpoint:
    path: /payto/agreements/{agreement_uid}/cancellation
    method: POST
- name: generate_download_link
  endpoint:
    path: /merchant_reports/settlement/{report_date}/download
    method: POST
- name: suspend_agreement
  endpoint:
    path: /payto/agreements/{agreement_uid}/suspension
    method: POST
- name: accept_dispute
  endpoint:
    path: /investigations/action_requests/{action_request_id}/accept
    method: POST
- name: reactivate_agreement
  endpoint:
    path: /payto/agreements/{agreement_uid}/reactivation
    method: POST
- name: reject_dispute
  endpoint:
    path: /investigations/action_requests/{action_request_id}/reject
    method: POST
- name: simulate_debtor
  endpoint:
    path: /payto/agreements/{agreement_uid}/simulate_debtor_action
    method: POST
- name: upload_evidence
  endpoint:
    path: /investigations/action_requests/{action_request_id}/upload
    method: POST
- name: alias_resolution
  endpoint:
    path: /payto/alias_resolution
    method: POST
- name: disputes
  endpoint:
    path: /investigations/disputes
    method: GET
- name: create_payment
  endpoint:
    path: /payto/payments
    method: POST
- name: dispute
  endpoint:
    path: /investigations/disputes/{dispute_id}
    method: GET
- name: payments
  endpoint:
    path: /payto/payments
    method: GET
- name: simulate_incoming_message
  endpoint:
    path: /investigations/simulate_incoming_message
    method: POST
- name: payment
  endpoint:
    path: /payto/payments/{payment_uid}
    method: GET
- name: agreements
  endpoint:
    path: /reference/post_payto-agreements
    method: post
- name: payments
  endpoint:
    path: /reference/post_payto-payments
    method: post
- name: refunds
  endpoint:
    path: /reference/post_payto-refunds
    method: post
- name: retry_payment
  endpoint:
    path: /payto/payments/{payment_uid}/retry
    method: POST
- name: Investigation Message Received
  endpoint:
    path: /reference/post_investigations-message-received
    method: POST
- name: refund
  endpoint:
    path: /payto/refunds
    method: POST
- name: investigation_message_sent
  endpoint:
    path: /reference/post_investigations-message-sent
    method: POST
- name: clients
  endpoint:
    path: /clients
    method: POST
- name: refunds
  endpoint:
    path: /payto/refunds
    method: GET
- name: clients
  endpoint:
    path: /clients
    method: GET
- name: refund
  endpoint:
    path: /payto/refunds/{refund_uid}
    method: GET
- name: client
  endpoint:
    path: /clients/{client_id}
    method: GET
- name: generate_download_link
  endpoint:
    path: /merchant_reports/settlement/{report_date}/download
    method: POST
- name: account_name_validation
  endpoint:
    path: /cop/account/validate
    method: POST
- name: accept dispute
  endpoint:
    path: /investigations/action_requests/{action_request_id}/accept
    method: POST
- name: reject_dispute
  endpoint:
    path: /investigations/action_requests/{action_request_id}/reject
    method: POST
- name: upload_evidence
  endpoint:
    path: /investigations/action_requests/{action_request_id}/upload
    method: POST
- name: disputes
  endpoint:
    path: /investigations/disputes
    method: GET
- name: dispute
  endpoint:
    path: /investigations/disputes/{dispute_id}
    method: GET
- name: simulate_incoming_message
  endpoint:
    path: /investigations/simulate_incoming_message
    method: POST
- name: Investigation Action Requested
  endpoint:
    path: /reference/post_investigations-action-requests-action-request-id-accept
    method: POST
- name: investigation_message_received
  endpoint:
    path: /reference/post_investigations-message-received
    method: POST
- name: Investigation Message Sent
  endpoint:
    path: /reference/post_investigations-message-sent
    method: POST
- name: clients
  endpoint:
    path: /clients
    method: POST
- name: clients
  endpoint:
    path: /clients
    method: GET
    data_selector: response
    params: {}
- name: client
  endpoint:
    path: /clients/{client_id}
    method: GET
- name: account_name_validation
  endpoint:
    path: /cop/account/validate
    method: POST
notes:
- You can simulate this path in sandbox by adding +failure to your payid_email e.g
  test+failure@zeptopayments.com
- Personal access tokens do not expire.
- Authorization code is a ONE-TIME use code.
- Personal access tokens do not expire but can be deleted.
- Access tokens expire every 2 hours unless the offline_access scope is used.
- Uses OAuth2 with refresh token — requires setup of connected app in Zepto
- Please use offline_access with discretion, as you'll have no direct way to invalidate
  the token.
- Zepto uses OAuth2 over https to manage authentication and authorisation.
- Access tokens are short lived and last 2 hours but refresh tokens do not expire.
- All requests to the Zepto API require an access_token for authentication.
- 'All collection endpoints are paginated to Per-Page: 25 by default. (100 per page
  is max, any value above will revert to 100)'
- The remitter name MUST be between 3 and 16 characters.
- Uses OAuth2 with refresh token — requires setup of OAuth2 application in Zepto
- Tokens may expire every 2 hours unless offline_access scope is used.
- Please use `offline_access` with discretion, as you'll have no direct way to invalidate
  the token.
- Uses OAuth2 for authentication
- 'All collection endpoints are paginated to Per-Page: 25 by default.'
- Some objects may return nulls in deeply nested fields
- Enforce a 256-character limit for Idempotency-Key headers.
- Some endpoints may have limitations on request frequency
- Merchants can no longer self-serve to remove their float accounts.
- Merchants should ensure any validations they have on Zepto IDs generate are not
  explicitly checking for UUIDv4 compatibility.
- Validate that only ASCII characters with this Regex ^[ -~]+$ are used for the reference
  field in the PayTo Payments endpoint.
- Uses OAuth2 with authorization code flow
- Access tokens expire every 2 hours unless offline_access scope is used
- Webhooks are used to notify your application of changes to the status of Agreements,
  Payment Requests, Credits and Debits, etc. as they are processed through the system.
- The sandbox environment allows both HTTP and HTTPS webhook URLs.
- The live environment however will only POST to HTTPS URLs.
- Please use offline_access with discretion, as you'll have no direct way to invalidate
  the token. Please contact Zepto immediately if any token may have potentially been
  compromised.
- Webhooks are used to notify your application of changes to the status of Agreements,
  Payment Requests, Credits and Debits.
- Service User Account is recommended for API interactions to avoid potential service
  disruption.
- Currently support IDPs that are based on SAML 2.0 protocol
- SSO solutions that use the SAML 2.0 protocol include Okta, Azure, and Microsoft
  AD FS.
- A Service User Account is recommended for API interactions.
- Personal access tokens don't expire but can be deleted and replaced anytime.
- The Confirmation of Payee developer guides are currently in beta. Information and
  APIs are subject to change.
- Supports IDPs based on SAML 2.0 protocol such as Okta, Azure, and Microsoft AD FS.
- To make use of this function, please contact your Zepto Account Manager and enable
  the cop_account_validations scope within your Zepto API settings.
- Asynchronous operations are designed to maintain consistently fast response times.
- A guide to our Sandbox environment for simulating certain CoP lookup errors and
  behaviour.
- Please note, BSB's provided should be used as a guide only.
- We strongly recommend that our merchants understand and follow the branding guidelines.
- A PayTo Agreement can not be used to collect funds until it has been Accepted.
- Asynchronous operations designed to maintain fast response times
- Webhooks can be used for real-time notifications
- When using PayID as an account_identifier type, Zepto's Alias Resolution service
  must be used prior to initiating an agreement creation request.
- There is a limit of 6 agreement creation attempts within 24 hours per debtor account.
- A PayTo Agreement can not be used to collect funds until it has been Accepted. It
  must be in an Active state in order to initiate Payments against it.
- Once a PayTo Payment has been validated and submitted onto the NPP, it is irrevocable
  and cannot be cancelled.
- Once a PayTo Payment has been submitted onto the NPP Basic Infrastructure, it is
  irrevocable and can not be cancelled; funds are cleared & settled between the debtor
  and creditor account in real-time.
- The display_name associated with a registered PayID should not be displayed to the
  end customer.
- Use the pay_to_aliases scope within your Zepto API settings.
- Payments may be retried up to 10 times while within the related agreement's validity
  begin and end dates.
- Payments can only be retried 5 times within 24 hours.
- A cancelled PayTo Agreement is final and can no longer be used to collect funds.
- A suspended PayTo Agreement cannot be used to collect funds.
- In order to initiate a PayTo payment, you must have an Active PayTo Agreement with
  the payer.
- Only 1 amendment can be pending at any 1 time.
- Webhooks are used to notify your application of changes to the state of PayTo Agreements
  and PayTo Payments as and when they are processed through the system.
- A cancelled PayTo Agreement is final, and can no longer be used to collect funds.
- Refunds can be made against settled PayTo payments.
- Funds will be debited from the nominated Zepto float account and returned to the
  BBAN or PayID specified in the original PayTo agreement from which funds were collected.
- Webhooks notify changes to PayTo Agreements and Payments.
- The refund agreement must be authorised and in Active state before refunds can be
  processed.
- All Agreements and Agreement amendments will expire after 24 hours if no action
  is performed
- All 6 digits BSBs are valid in the sandbox with the exception of certain invalid
  scenarios
- As refunds are sent via NPP, both the debtor (Zepto float account) and creditor
  (original source account) must be NPP enabled.
- Multiple refunds can be processed against a single PayTo payment, up to the total
  value of the PayTo payment.
- 'All 6 digits BSBs are valid in the sandbox with the exception of the following:
  100000 simulates an invalid BSB, 100001 simulates a financial institution that does
  not have PayTo debtor capabilities, 100002 simulates a financial institution that
  is not able to receive an NPP payment'
- The debtor must have a BBAN with an account number of 9 digits or less
- Resource UID will vary per agreement
- Type follows the format payto_agreement.{event_type}
- Within the API endpoints for our sandbox environment, we provide the ability to
  perform asynchronous simulations.
- Certain branch codes will emulate the given institution having or lacking certain
  capabilities.
- New Pending state and callback for PayTo Payments introduced.
- Can be present on a failed payment refund and give more detail about why the refund
  has failed.
- By default, all outgoing Agreements will be returned. You can apply filters to your
  query to customise the returned Agreements.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- You cannot update a Contact's bank account details if they currently have an accepted
  agreement.
- Any active Bank Connections will be lost if you change the Contact's bank account.
- By default, all Bank Accounts will be returned.
- We now require supplying an `Idempotency-Key` header when performing this request
  to ensure you can safely retry the action in case of an issue.
- A Contact added this way cannot be debited.
- By default, all Contacts will be returned. You can apply filters to your query to
  customise the returned Contact list.
- The URL for this request expired after 30 days.
- We now require supplying an Idempotency-Key header when performing requests to ensure
  safe retries.
- We now require supplying an Idempotency-Key header when performing this request
  to ensure you can safely retry the action in case of an issue.
- OAuth2 Bearer token is required for authentication
- The Receivable Contact you are updating must be active.
errors:
- '403: Invalid/expired access_token or missing required scopes'
- 403 errors are generally returned from any of our endpoints if your application
  does not have the required authorisation.
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'E303: Account Not NPP Enabled'
- 'E102: Payment Stopped'
- 'E105: Account Not Found'
- '403: Invalid or expired access token'
- '409: Duplicate idempotency key'
- '403 Forbidden: Check if the application has the required authorisation'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'ZPPAY24: Participant not available'
- '409: A resource has already been created with this idempotency key'
- '403: Invalid/expired access_token or required scopes missing'
- 404 Requested resource not found with corresponding detail
- 422 Unprocessable entity with corresponding detail
- '404 - ZCOPR02: No account found'
- '422 - ZCOPR00: Unable to confirm'
- '422 - ZCOPR01: BBAN Lookup failed'
- '422 - ZCOPR04: Account limit reached'
- '422 - ZCOPR05: Requester ID limit reached'
- '404: ZCOPR02'
- '422: ZCOPR00'
- '422: ZCOPR01'
- '422: ZCOPR04'
- '422: ZCOPR05'
- '422: ZCOPR06'
- '422: ZCOPR07'
- 'ZCOPR00: We could not confirm the account name match.'
- 'ZCOPR01: Zepto was unable to validate the branch code for the given BBAN.'
- 'ZCOPR02: No record of the account can be found.'
- 'ZCOPR03: A CoP lookup with the given UID already exists.'
- 'ZCOPR04: The daily no match limit has been reached for the account.'
- 'ZCOPR05: The daily no match limit has been reached for the requester.'
- 'ZCOPR06: The daily request limit has been reached for the account.'
- 'ZCOPR07: The daily request limit has been reached for the requester.'
- '400 Bad Request: Invalid schema will be rejected immediately.'
- '422 Unprocessable Entity: Failed field validations will be rejected immediately
  with relevant error messages.'
- 'ZCOPR02: Simulates a failed CoP lookup where a match result could not be provided
  due to there being no record of the account.'
- 'ZCOPR00: Simulates a failed CoP lookup where a match result could not be provided
  due to the account holder having opted out of the CoP service.'
- 'ZCOPR01: Simulates a failed CoP lookup where a match result could not be provided
  due to there being an issue with validating the branch code for the given BBAN.'
- 'ZCOPR04: Simulates hitting the account level `no_match` enumeration control limit.'
- 'ZCOPR05: Simulates hitting the requester ID level `no_match` enumeration control
  limit.'
- 'ZCOPR06: Simulates hitting the account level enumeration control limit.'
- 'ZCOPR07: Simulates hitting the requester ID level enumeration control limit.'
- '400 Bad Request: Invalid schema will be rejected immediately'
- '422 Unprocessable Entity: Failed field validations will be rejected immediately'
- '400: Bad Request'
- '422: Unprocessable Entity'
- 'ZPADD01: Alias not found'
- 'MD17: Cancellation/amendment requested by the creditor or by the initiating party'
- 'AM04: Insufficient Funds'
- 'ZPREF06: Total refunds greater than original payment amount'
- '422 Unprocessable Entity: Check the request payload for errors.'
- '400: Bad request'
- '422: Unprocessable entity'
- 'Request body is not valid JSON: Error occurred while parsing request parameters'
- 'ZPREF06: Total refunds greater than original payment amount: The sum of all refunds
  is greater than the original payment'
- '422: Validation errors when using specific branch codes'
- 'ZPUNP00: One or more fields violate the relevant schema'
- 'ZPUNP01: Debtor''s financial institution does not support PayTo'
- 'ZPUNP02: Invalid creditor account'
- 'ZPUNP03: Creditor account number only zeroes'
- 'ZPUNP04: Creditor account number reserved'
- 'ZPUNP05: Creditor branch code does not exist'
- 'ZPUNP06: Error resolving alias'
- 'ZPUNP07: Debtor alias not found'
- 'ZPUNP08: Creditor alias not found'
- 'ZPUNP09: Alias resolution not enabled'
- 'ZPAGR00: Duplicate UID'
- 'ZPAGR01: No configured ABN'
- 'ZPAGR02: Invalid resolution requested before'
- 'ZPAGR03: Invalid resolution requested before'
- 'ZPAGR04: Past validity start date'
- 'ZPAGR05: Validity start date not amendable'
- 'ZPAGR06: Validity start date after end date'
- 'ZPAGR07: Validity start date after first payment date'
- 'ZPAGR08: Validity end date too early'
- 'ZPAGR09: First payment date in past'
- 'ZPAGR10: Last payment date before first payment date'
- 'ZPAGR11: Last payment date in the past'
- 'ZPAGR12: Debtor account number only zeroes'
- 'ZPAGR13: Debtor account number reserved'
- 'ZPAGR14: Debtor branch code does not exist'
- 'ZPAGR15: Mandate limit reached'
- 'ZPAGR16: Mandate create limit reached'
- 'ZPAGR17: Auto-Cancel Needs Resolution Date'
- 'ZPAGR18: Initiator must include either ABN or ACN'
- 'ZPPAY00: Duplicate UID'
- 'ZPPAY01: Over daily limit'
- 'ZPPAY02: Over per-transaction limit'
- 'ZPPAY03: Agreement not active'
- 'ZPPAY04: Creditor party name mismatch'
- 'ZPPAY05: Creditor ultimate party name mismatch'
- 'ZPPAY06: Creditor account mismatch'
- 'ZPPAY07: After validity end date'
- 'ZPPAY08: Before validity start date'
- 'ZPPAY09: Last payment required for balloon'
- 'ZPPAY10: Last payment given for non-balloon'
- 'ZPPAY11: Creditor details required'
- 'ZPPAY12: Amount over maximum'
- 'ZPPAY13: After last payment date'
- 'ZPPAY14: First payment date mismatch'
- 'ZPPAY15: Amount incorrect'
- 'ZPPAY16: Timing incorrect'
- 'ZPPAY17: Too many payments'
- 'ZPPAY18: First payment amount incorrect'
- 'ZPPAY19: Last payment amount incorrect'
- 'ZPPAY20: Last payment date mismatch'
- 'ZPPAY21: Last payment made'
- 'ZPPAY22: Agreement not found'
- 'ZPPAY23: Debtor account mismatch'
- 'ZPREF00: Duplicate UID'
- 'ZPREF01: Payment not found'
- 'ZPREF02: Payment not refundable'
- 'ZPREF03: Float bank account not found'
- 'ZPREF04: Float bank account not active'
- 'ZPREF05: Float bank account missing services'
- 'ZPREF07: The provided fund source has insufficient funds'
- 'ZPREF08: Refunding Via PayTo Not Enabled'
- 'ZPREF09: Original Payment is a Refund'
- 'ZPREF10: Debtor account alias is too long'
- 'ZPREF12: Description must start with REFUND'
- 'ZPAMN00: Agreement not amendable'
- 'ZPAMN01: Amendment already processing'
- 'ZPAMN02: No changes'
- 'ZPAMN03: Mandate doesn''t change'
- 'ZPAMN04: Validity end date not amendable'
- 'ZPAMN05: Initiator not permitted'
- 'ZPAMN06: Invalid resolution requested before'
- 'ZPAMN07: Resolution requested before in past'
- 'ZPAMN08: Last payment made'
- 'ZPPRY00: Payment not retryable'
- 'ZPPRY01: Too many retries'
- 'ZPPRY02: After mandate validity end date'
- 'ZPPRY03: Retry timeout'
- 'ZPPRY04: Retry timeout after validity end'
- 'ZPPRY05: Creditor Changed For Refund'
- 'ZPCAN00: Incorrect agreement state'
- 'ZPCAN01: Already processing'
- 'ZPREA00: Incorrect agreement state'
- 'ZPREA01: Already processing'
- 'ZPSUS00: Incorrect agreement state'
- 'ZPSUS01: Already processing'
- 'ZPARE00: Amendment not recallable'
- 'ZPARE01: Already processing'
- 'ZPARE02: Agreement has no amendment'
- 'ZPPGN00: One or more parameters are invalid'
- 'ZPADD02: Account lookup limit reached'
- 'ZPADD03: Remote IP lookup limit reached'
- 'ZPADD04: Requester ID lookup limit reached'
- 'UKNWN: Unknown Error'
- 'ZPPAY00: A payment with the given UID already exists'
- 'ZPREF07: The provided fund source has insufficient funds to process this refund'
- 'AC02: The Payer Customer Account does not exist within NPP'
- 'AC03: The Payee Customer Account does not exist within NPP'
- 'AC05: The Payer Customer account is closed'
- 'AC06: The Payer Customer Account is blocked'
- 'AC07: The Payee Customer account is closed'
- 'AC14: The Payee Customer Account does not allow funds to be debited within NPP'
- 'AG01: The Payer Customer Account is unable to be debited'
- 'AG03: The Payer Customer Account is able to make NPP Payments, but is not able
  to make NPP Payments to the Payee Customer Account type'
- 'AGNT: BSB/IIN of the account provided falls outside the range published in the
  NPP Reference Data'
- 'AM01: Specified message amount is equal to zero'
- 'AM02: Specified transaction amount is greater than allowed maximum'
- 'AM03: The Payer Customer Account cannot draw funds in AUD'
- 'AM06: The amount requested is below the agreed minimum amount'
- 'AM12: No amount and/or no maximum amount have been specified'
- 'AM19: The number of transactions in the NPP Payment Initiation Request is not 1'
- 'BE06: The Payer Customer associated with the nominated Payer Customer Account does
  not exist within the Payer Participant (or applicable identified Institution) customer
  list'
- 'BE08: Debtor name is missing'
- 'BE22: Creditor name is missing'
- 'CH20: The amount does not have two or zero fraction digits'
- 'CH21: One or more mandatory fields have not been provided'
- 'DT02: The CreationDateTime in the Group Header is not as per the required format'
- 'ED06: The FSS is unavailable so the Clearing Request cannot be made'
- 'FF04: The Service Level code in the NPP Payment Initiation Request is not as per
  the specified format'
- 'FF08: End to End Id missing or invalid'
- 'FF10: Responding Participant is unable to process the payment due to back office
  issues or outage'
- 'FF11: The Clearing Request associated to payment was aborted'
- 'TD03: The file format is incomplete or invalid'
- 'AB01: Clearing process aborted due to timeout'
- 'AB02: Clearing process aborted due to a fatal error'
- 'ZPPAY24: One of the participants is currently not available to process the payment.'
- 'AB03: Settlement aborted due to timeout'
- 'AB04: Settlement process aborted due to a fatal error'
- 'AB08: Payer Participant is unavailable to process the payment due to Payee Participant
  being unavailable'
- 'AC13: The Payer Customer Account does not allow funds to be debited within NPP'
- 'AC15: The account details for the counterparty have changed'
- 'AG07: Debtor account cannot be debited for a generic reason. May indicate insufficient
  funds'
- 'AM04: The specified Payer Customer Account has insufficient funds'
- 'AM09: The amount requested was not what the Payer Customer was expecting'
- 'AM21: The payment amount exceeds the agreed limit between the Responding Participant
  and the Debtor Customer'
- 'BE05: Debtor Customer has directed the Responding Participant to reject the payment
  as the Creditor is unknown to them'
- 'CURR: Currency of the payment is incorrect'
- 'CUST: Debtor Customer has directed the Responding Participant to reject the payment'
- 'DT04: The Business Service does not support future dated NPP payments'
- 'ED05: Settlement of the transaction has failed'
- 'FRAD: The NPP payment was rejected due to identified fraud or due to a scam'
- 'MD01: The NPP Payment Initiation Request did not contain a Agreement'
- 'MD02: Contact Zepto for more information'
- 'MD20: Contact Zepto for more information'
- 'MS02: The payment was rejected by the Debtor Customer, but no reason was provided'
- 'MS03: The payment was rejected by the Responding Participant, but no reason was
  provided'
- 'NARR: Contact Zepto for more information'
- 'NAUT: The payment contents do not align with the Agreement terms'
- 'RR02: Regulatory details of the Debtor were not provided in the NPP Payment Initiation
  Request'
- 'RR03: Regulatory details of the Creditor were not provided in the NPP Payment Initiation
  Request'
- 'RR04: The Agreement/Payment is rejected due to regulatory reasons'
- 'RC05: The BIC identifier in the Message Payload is invalid or missing'
- 'SL01: The NPP Payment Initiation Request was rejected specifically due to a service
  offered by the Responding Participant'
- 'SL11: The Payee or the Initiating Party is not included in the Payer Customer''s
  whitelist'
- 'SL12: The Payee or the Initiating Party is included in the Payer Customer''s blacklist'
- 'SL13: The payment was rejected because the number of transactions requested exceeds
  the Debtor Agent offering'
- 'SL14: The payment was rejected because the total value of transactions requested
  exceeds the Debtor Agent offering'
- 'TM01: The NPP Payment Initiation Request was received by the Responding Participant
  after an agreed cut-off time'
- 'AVED: It is after the agreement''s validity end date'
- 'BVSD: It is before the agreement''s validity start date'
- 'MCGP: The agreement has recently been migrated and is still in its grace period'
- 'NACT: Agreement is not active'
- 'ZPUNP01: Cannot create agreement with provided debtor account'
- 'ZPUNP02: The given creditor account cannot accept funds via NPP'
- 'ZPUNP06: Zepto was unable to reach the addressing service'
- 'ZPUNP07: Zepto was unable to resolve the given debtor alias'
- 'ZPUNP08: Zepto was unable to resolve the given creditor alias'
- 'UKNWN: An unexpected error occured. Reach out to Zepto for more information'
- 201 Created
- 404 Not Found
- '404: Not Found'
- 422 When a payment is requested from an Anyone Contact with no valid Agreement
- 'URL Expired: The URL for this request expired after 30 days.'
- '503 Service Unavailable: The addressing service is not available'
- '503 service unavailable: If the addressing service is not available'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - access_token
  - refresh_token
  - NamedCredential
client:
  base_url: https://api.sandbox.zeptopayments.com
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
