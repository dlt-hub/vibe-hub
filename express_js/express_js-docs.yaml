resources:
- name: redirect
  endpoint:
    path: /redirect
    method: GET
    data_selector: redirect
    params: {}
- name: render
  endpoint:
    path: /render
    method: GET
    data_selector: render
    params: {}
- name: send
  endpoint:
    path: /send
    method: POST
    data_selector: send
    params: {}
- name: sendFile
  endpoint:
    path: /sendFile
    method: GET
    data_selector: sendFile
    params: {}
- name: sendStatus
  endpoint:
    path: /sendStatus
    method: GET
    data_selector: sendStatus
    params: {}
- name: set
  endpoint:
    path: /set
    method: POST
    data_selector: set
    params: {}
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: status
    params: {}
- name: type
  endpoint:
    path: /type
    method: POST
    data_selector: type
    params: {}
- name: vary
  endpoint:
    path: /vary
    method: POST
    data_selector: vary
    params: {}
- name: hello_world
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: application skeleton
  endpoint:
    path: /
    method: GET
    data_selector: application structure
- name: homepage
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: post_homepage
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: user
  endpoint:
    path: /user
    method: PUT
    data_selector: response
    params: {}
- name: delete_user
  endpoint:
    path: /user
    method: DELETE
    data_selector: response
    params: {}
- name: static_files
  endpoint:
    path: /static
    method: GET
    data_selector: files
    params: {}
- name: example_route
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: middleware_example
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: template_engines
  endpoint:
    path: /en/guide/using-template-engines.html
    method: GET
    data_selector: template_engines
- name: books
  endpoint:
    path: /books/_search
    method: GET
    data_selector: hits.hits
    params: {}
- name: users
  endpoint:
    path: /users/:user_id
    method: GET
    data_selector: req.user
- name: template_engine
  endpoint:
    path: /advanced/developing-template-engines.html
    method: GET
    data_selector: content
- name: body-parser
  endpoint:
    path: /resources/middleware/body-parser.html
    method: GET
    data_selector: description
    params: {}
- name: compression
  endpoint:
    path: /resources/middleware/compression.html
    method: GET
    data_selector: description
    params: {}
- name: connect-rid
  endpoint:
    path: /resources/middleware/connect-rid.html
    method: GET
    data_selector: description
    params: {}
- name: cookie-parser
  endpoint:
    path: /resources/middleware/cookie-parser.html
    method: GET
    data_selector: description
    params: {}
- name: cookie-session
  endpoint:
    path: /resources/middleware/cookie-session.html
    method: GET
    data_selector: description
    params: {}
- name: cors
  endpoint:
    path: /resources/middleware/cors.html
    method: GET
    data_selector: description
    params: {}
- name: errorhandler
  endpoint:
    path: /resources/middleware/errorhandler.html
    method: GET
    data_selector: description
    params: {}
- name: method-override
  endpoint:
    path: /resources/middleware/method-override.html
    method: GET
    data_selector: description
    params: {}
- name: morgan
  endpoint:
    path: /resources/middleware/morgan.html
    method: GET
    data_selector: description
    params: {}
- name: multer
  endpoint:
    path: /resources/middleware/multer.html
    method: GET
    data_selector: description
    params: {}
- name: response-time
  endpoint:
    path: /resources/middleware/response-time.html
    method: GET
    data_selector: description
    params: {}
- name: serve-favicon
  endpoint:
    path: /resources/middleware/serve-favicon.html
    method: GET
    data_selector: description
    params: {}
- name: serve-index
  endpoint:
    path: /resources/middleware/serve-index.html
    method: GET
    data_selector: description
    params: {}
- name: serve-static
  endpoint:
    path: /resources/middleware/serve-static.html
    method: GET
    data_selector: description
    params: {}
- name: session
  endpoint:
    path: /resources/middleware/session.html
    method: GET
    data_selector: description
    params: {}
- name: timeout
  endpoint:
    path: /resources/middleware/timeout.html
    method: GET
    data_selector: description
    params: {}
- name: vhost
  endpoint:
    path: /resources/middleware/vhost.html
    method: GET
    data_selector: description
    params: {}
- name: website_issues
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
    params: {}
- name: content_issues
  endpoint:
    path: /content
    method: GET
    data_selector: content
    params: {}
- name: translation_issues
  endpoint:
    path: /translations
    method: GET
    data_selector: translations
    params: {}
- name: package.json
  endpoint:
    path: /package.json
    method: GET
    data_selector: records
- name: myapp
  endpoint:
    path: /myapp
    method: GET
    data_selector: records
- name: package_json
  endpoint:
    path: /files/package.json
    method: GET
    data_selector: records
    params: {}
- name: package.json
  endpoint:
    path: /
    method: POST
    data_selector: dependencies
    params: {}
- name: package_json
  endpoint:
    path: /files/package.json
    method: GET
    data_selector: default
    params: {}
- name: package_json
  endpoint:
    path: /files/package.json
    method: GET
    data_selector: dependencies
- name: res.redirect
  endpoint:
    path: /redirect
    method: GET
- name: res.render
  endpoint:
    path: /render
    method: GET
- name: res.send
  endpoint:
    path: /send
    method: POST
- name: res.sendFile
  endpoint:
    path: /sendFile
    method: GET
- name: res.sendStatus
  endpoint:
    path: /sendStatus
    method: GET
- name: res.set
  endpoint:
    path: /set
    method: POST
- name: res.status
  endpoint:
    path: /status
    method: POST
- name: res.type
  endpoint:
    path: /type
    method: POST
- name: res.vary
  endpoint:
    path: /vary
    method: POST
- name: hello_world
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: root
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: root_post
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: user_put
  endpoint:
    path: /user
    method: PUT
    data_selector: response
    params: {}
- name: user_delete
  endpoint:
    path: /user
    method: DELETE
    data_selector: response
    params: {}
- name: static_files
  endpoint:
    path: /static/images/kitten.jpg
    method: GET
- name: static_css
  endpoint:
    path: /static/css/style.css
    method: GET
- name: static_js
  endpoint:
    path: /static/js/app.js
    method: GET
- name: static_bg
  endpoint:
    path: /static/images/bg.png
    method: GET
- name: static_hello
  endpoint:
    path: /static/hello.html
    method: GET
- name: example_a
  endpoint:
    path: /example/a
    method: GET
    data_selector: response
    params: {}
- name: example_b
  endpoint:
    path: /example/b
    method: GET
    data_selector: response
    params: {}
- name: example_c
  endpoint:
    path: /example/c
    method: GET
    data_selector: response
    params: {}
- name: example_d
  endpoint:
    path: /example/d
    method: GET
    data_selector: response
    params: {}
- name: middleware_example
  endpoint:
    path: /api/middleware
    method: GET
    data_selector: middleware
    params: {}
- name: middleware_application
  endpoint:
    path: /user/:id
    method: GET
    data_selector: none
    params: {}
- name: middleware_router
  endpoint:
    path: /admin
    method: GET
    data_selector: none
    params: {}
- name: sendStatus
  endpoint:
    path: /res/sendStatus
    method: POST
    data_selector: response
    params: {}
- name: ip
  endpoint:
    path: /req/ip
    method: GET
    data_selector: request
    params: {}
- name: template_engine
  endpoint:
    path: /fr/guide/using-template-engines.html
    method: GET
    data_selector: template_engines
- name: books
  endpoint:
    path: /
    method: GET
    data_selector: hits.hits
    params: {}
- name: app
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: app_settings
  endpoint:
    path: /app/settings
    method: GET
    data_selector: settings
    params: {}
- name: template_engine
  endpoint:
    path: /advanced/developing-template-engines.html
    method: GET
    data_selector: content
    params: {}
- name: express-slash
  endpoint:
    path: /github.com/ericf/express-slash
    method: GET
    data_selector: description
    params: {}
- name: body-parser
  endpoint:
    path: /fr/resources/middleware/body-parser.html
    method: GET
    data_selector: description
    params: {}
- name: compression
  endpoint:
    path: /fr/resources/middleware/compression.html
    method: GET
    data_selector: description
    params: {}
- name: connect-rid
  endpoint:
    path: /fr/resources/middleware/connect-rid.html
    method: GET
    data_selector: description
    params: {}
- name: cookie-parser
  endpoint:
    path: /fr/resources/middleware/cookie-parser.html
    method: GET
    data_selector: description
    params: {}
- name: cookie-session
  endpoint:
    path: /fr/resources/middleware/cookie-session.html
    method: GET
    data_selector: description
    params: {}
- name: cors
  endpoint:
    path: /fr/resources/middleware/cors.html
    method: GET
    data_selector: description
    params: {}
- name: errorhandler
  endpoint:
    path: /fr/resources/middleware/errorhandler.html
    method: GET
    data_selector: description
    params: {}
- name: method-override
  endpoint:
    path: /fr/resources/middleware/method-override.html
    method: GET
    data_selector: description
    params: {}
- name: morgan
  endpoint:
    path: /fr/resources/middleware/morgan.html
    method: GET
    data_selector: description
    params: {}
- name: multer
  endpoint:
    path: /fr/resources/middleware/multer.html
    method: GET
    data_selector: description
    params: {}
- name: response-time
  endpoint:
    path: /fr/resources/middleware/response-time.html
    method: GET
    data_selector: description
    params: {}
- name: serve-favicon
  endpoint:
    path: /fr/resources/middleware/serve-favicon.html
    method: GET
    data_selector: description
    params: {}
- name: serve-index
  endpoint:
    path: /fr/resources/middleware/serve-index.html
    method: GET
    data_selector: description
    params: {}
- name: serve-static
  endpoint:
    path: /fr/resources/middleware/serve-static.html
    method: GET
    data_selector: description
    params: {}
- name: session
  endpoint:
    path: /fr/resources/middleware/session.html
    method: GET
    data_selector: description
    params: {}
- name: timeout
  endpoint:
    path: /fr/resources/middleware/timeout.html
    method: GET
    data_selector: description
    params: {}
- name: vhost
  endpoint:
    path: /fr/resources/middleware/vhost.html
    method: GET
    data_selector: description
    params: {}
- name: cookies
  endpoint:
    path: https://www.npmjs.com/package/cookies
    method: GET
- name: csrf
  endpoint:
    path: https://www.npmjs.com/package/csrf
    method: GET
- name: finalhandler
  endpoint:
    path: https://www.npmjs.com/package/finalhandler
    method: GET
- name: parseurl
  endpoint:
    path: https://www.npmjs.com/package/parseurl
    method: GET
- name: path-to-regexp
  endpoint:
    path: https://www.npmjs.com/package/path-to-regexp
    method: GET
- name: resolve-path
  endpoint:
    path: https://www.npmjs.com/package/resolve-path
    method: GET
- name: router
  endpoint:
    path: https://www.npmjs.com/package/router
    method: GET
- name: send
  endpoint:
    path: https://www.npmjs.com/package/send
    method: GET
- name: issues
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
    params: {}
- name: pull_requests
  endpoint:
    path: /pulls
    method: GET
    data_selector: pull_requests
    params: {}
- name: root
  endpoint:
    path: /
    method: GET
    data_selector: Hello World!
- name: hello_world
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: hello_world
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: hello_world
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: hello_world
  endpoint:
    path: /
    method: GET
    data_selector: Hello World!
    params: {}
- name: root
  endpoint:
    path: /
    method: GET
    data_selector: Hello World!
- name: hello_world
  endpoint:
    path: /
    method: GET
    data_selector: Hello World!
- name: router
  endpoint:
    path: /api/{*splat}
    method: ALL
- name: redirect
  endpoint:
    path: /res.redirect
    method: GET
- name: render
  endpoint:
    path: /res.render
    method: GET
- name: send
  endpoint:
    path: /res.send
    method: POST
- name: sendFile
  endpoint:
    path: /res.sendFile
    method: GET
- name: sendStatus
  endpoint:
    path: /res.sendStatus
    method: GET
- name: set
  endpoint:
    path: /res.set
    method: POST
- name: status
  endpoint:
    path: /res.status
    method: POST
- name: type
  endpoint:
    path: /res.type
    method: POST
- name: vary
  endpoint:
    path: /res.vary
    method: POST
- name: root_get
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: root_post
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: user_put
  endpoint:
    path: /user
    method: PUT
    data_selector: response
    params: {}
- name: user_delete
  endpoint:
    path: /user
    method: DELETE
    data_selector: response
    params: {}
- name: static_files
  endpoint:
    path: /static
    method: GET
    data_selector: files
    params: {}
- name: home
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: about
  endpoint:
    path: /about
    method: GET
    data_selector: response
    params: {}
- name: random_text
  endpoint:
    path: /random.text
    method: GET
    data_selector: response
    params: {}
- name: secret
  endpoint:
    path: /secret
    method: ALL
    data_selector: response
    params: {}
- name: users_books
  endpoint:
    path: /users/:userId/books/:bookId
    method: GET
    data_selector: req.params
    params: {}
- name: middleware_example
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: application_level_middleware
  endpoint:
    path: /middleware/application-level
    method: GET
    data_selector: middleware
- name: router_level_middleware
  endpoint:
    path: /middleware/router-level
    method: GET
    data_selector: middleware
- name: error_handling_middleware
  endpoint:
    path: /middleware/error-handling
    method: GET
    data_selector: middleware
- name: built_in_middleware
  endpoint:
    path: /middleware/built-in
    method: GET
    data_selector: middleware
- name: third_party_middleware
  endpoint:
    path: /middleware/third-party
    method: GET
    data_selector: middleware
- name: request
  endpoint:
    path: /express/request
    method: GET
    data_selector: properties
    params: {}
- name: response
  endpoint:
    path: /express/response
    method: GET
    data_selector: properties
    params: {}
- name: views
  endpoint:
    path: /de/guide/using-template-engines.html
    method: GET
    data_selector: views
- name: view engine
  endpoint:
    path: /de/guide/using-template-engines.html
    method: GET
    data_selector: view engine
- name: middleware
  endpoint:
    path: /de/guide/writing-middleware.html
    method: GET
    data_selector: middleware
- name: routing
  endpoint:
    path: /de/guide/routing.html
    method: GET
    data_selector: routing
- name: elasticsearch
  endpoint:
    path: /
    method: GET
    data_selector: hits.hits
- name: app.settings
  endpoint:
    params:
      env: process.env.NODE_ENV
- name: get_event
  endpoint:
    path: /events
    method: GET
    data_selector: json
    params: {}
- name: post_event
  endpoint:
    path: /events
    method: POST
    data_selector: json
    params: {}
- name: put_event
  endpoint:
    path: /events
    method: PUT
    data_selector: json
    params: {}
- name: delete_event
  endpoint:
    path: /events
    method: DELETE
    data_selector: json
    params: {}
- name: template_engine_example
  endpoint:
    path: /
    method: GET
    data_selector: index.ntl
    params: {}
- name: body-parser
  endpoint:
    path: /de/resources/middleware/body-parser.html
    method: GET
- name: compression
  endpoint:
    path: /de/resources/middleware/compression.html
    method: GET
- name: connect-rid
  endpoint:
    path: /de/resources/middleware/connect-rid.html
    method: GET
- name: cookie-parser
  endpoint:
    path: /de/resources/middleware/cookie-parser.html
    method: GET
- name: cookie-session
  endpoint:
    path: /de/resources/middleware/cookie-session.html
    method: GET
- name: cors
  endpoint:
    path: /de/resources/middleware/cors.html
    method: GET
- name: errorhandler
  endpoint:
    path: /de/resources/middleware/errorhandler.html
    method: GET
- name: method-override
  endpoint:
    path: /de/resources/middleware/method-override.html
    method: GET
- name: morgan
  endpoint:
    path: /de/resources/middleware/morgan.html
    method: GET
- name: multer
  endpoint:
    path: /de/resources/middleware/multer.html
    method: GET
- name: response-time
  endpoint:
    path: /de/resources/middleware/response-time.html
    method: GET
- name: serve-favicon
  endpoint:
    path: /de/resources/middleware/serve-favicon.html
    method: GET
- name: serve-index
  endpoint:
    path: /de/resources/middleware/serve-index.html
    method: GET
- name: serve-static
  endpoint:
    path: /de/resources/middleware/serve-static.html
    method: GET
- name: session
  endpoint:
    path: /de/resources/middleware/session.html
    method: GET
- name: timeout
  endpoint:
    path: /de/resources/middleware/timeout.html
    method: GET
- name: vhost
  endpoint:
    path: /de/resources/middleware/vhost.html
    method: GET
- name: cookies
  endpoint:
    path: https://www.npmjs.com/package/cookies
    method: GET
    data_selector: description
    params: {}
- name: csrf
  endpoint:
    path: https://www.npmjs.com/package/csrf
    method: GET
    data_selector: description
    params: {}
- name: finalhandler
  endpoint:
    path: https://www.npmjs.com/package/finalhandler
    method: GET
    data_selector: description
    params: {}
- name: parseurl
  endpoint:
    path: https://www.npmjs.com/package/parseurl
    method: GET
    data_selector: description
    params: {}
- name: path-to-regexp
  endpoint:
    path: https://www.npmjs.com/package/path-to-regexp
    method: GET
    data_selector: description
    params: {}
- name: resolve-path
  endpoint:
    path: https://www.npmjs.com/package/resolve-path
    method: GET
    data_selector: description
    params: {}
- name: router
  endpoint:
    path: https://www.npmjs.com/package/router
    method: GET
    data_selector: description
    params: {}
- name: send
  endpoint:
    path: https://www.npmjs.com/package/send
    method: GET
    data_selector: description
    params: {}
- name: issues
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
    params: {}
- name: pull_requests
  endpoint:
    path: /pulls
    method: GET
    data_selector: pull_requests
    params: {}
- name: v5.x
  endpoint:
    path: /de/5x/api.html
    method: GET
- name: v4.x
  endpoint:
    path: /de/4x/api.html
    method: GET
- name: v3.x
  endpoint:
    path: /de/3x/api.html
    method: GET
- name: v2.x
  endpoint:
    path: /2x/
    method: GET
- name: v1.x
  endpoint:
    path: /
    method: GET
- name: v0.14.x
  endpoint:
    path: /
    method: GET
- name: redirect
  endpoint:
    path: /res.redirect
    method: GET
- name: render
  endpoint:
    path: /res.render
    method: GET
- name: send
  endpoint:
    path: /res.send
    method: GET
- name: sendFile
  endpoint:
    path: /res.sendFile
    method: GET
- name: sendStatus
  endpoint:
    path: /res.sendStatus
    method: GET
- name: set
  endpoint:
    path: /res.set
    method: GET
- name: status
  endpoint:
    path: /res.status
    method: GET
- name: type
  endpoint:
    path: /res.type
    method: GET
- name: vary
  endpoint:
    path: /res.vary
    method: GET
- name: redirect
  endpoint:
    path: /res.redirect
    method: GET
    data_selector: redirects
- name: render
  endpoint:
    path: /res.render
    method: GET
    data_selector: renders
- name: send
  endpoint:
    path: /res.send
    method: POST
    data_selector: sends
- name: sendFile
  endpoint:
    path: /res.sendFile
    method: GET
    data_selector: sendFiles
- name: sendStatus
  endpoint:
    path: /res.sendStatus
    method: POST
    data_selector: sendStatuses
- name: set
  endpoint:
    path: /res.set
    method: POST
    data_selector: sets
- name: status
  endpoint:
    path: /res.status
    method: POST
    data_selector: statuses
- name: type
  endpoint:
    path: /res.type
    method: POST
    data_selector: types
- name: vary
  endpoint:
    path: /res.vary
    method: POST
    data_selector: varies
- name: urlencoded
  endpoint:
    path: /express.urlencoded
    method: POST
    data_selector: body
    params:
      limit: 100kb
      parameterLimit: 1000
      extended: false
      inflate: true
      depth: 32
- name: res.redirect
  endpoint:
    path: /redirect
    method: GET
    data_selector: redirects
- name: res.render
  endpoint:
    path: /render
    method: GET
    data_selector: renders
- name: res.send
  endpoint:
    path: /send
    method: POST
    data_selector: sends
- name: res.sendFile
  endpoint:
    path: /sendFile
    method: GET
    data_selector: sendFiles
- name: res.sendStatus
  endpoint:
    path: /sendStatus
    method: GET
    data_selector: sendStatus
- name: res.set
  endpoint:
    path: /set
    method: POST
    data_selector: sets
- name: res.status
  endpoint:
    path: /status
    method: POST
    data_selector: statuses
- name: res.type
  endpoint:
    path: /type
    method: POST
    data_selector: types
- name: res.vary
  endpoint:
    path: /vary
    method: POST
    data_selector: varies
- name: urlencoded_parser
  endpoint:
    path: /express.urlencoded
    method: GET
    data_selector: options
    params: {}
- name: redirect
  endpoint:
    path: /redirect
    method: GET
    data_selector: redirects
    params: {}
- name: render
  endpoint:
    path: /render
    method: GET
    data_selector: renders
    params: {}
- name: send
  endpoint:
    path: /send
    method: POST
    data_selector: sends
    params: {}
- name: sendFile
  endpoint:
    path: /sendFile
    method: GET
    data_selector: sendFiles
    params: {}
- name: sendStatus
  endpoint:
    path: /sendStatus
    method: GET
    data_selector: sendStatuses
    params: {}
- name: set
  endpoint:
    path: /set
    method: POST
    data_selector: sets
    params: {}
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: statuses
    params: {}
- name: type
  endpoint:
    path: /type
    method: POST
    data_selector: types
    params: {}
- name: vary
  endpoint:
    path: /vary
    method: POST
    data_selector: varies
    params: {}
- name: redirect
  endpoint:
    path: /res/redirect
    method: GET
    data_selector: records
    params: {}
- name: render
  endpoint:
    path: /res/render
    method: GET
    data_selector: records
    params: {}
- name: send
  endpoint:
    path: /res/send
    method: GET
    data_selector: records
    params: {}
- name: sendFile
  endpoint:
    path: /res/sendFile
    method: GET
    data_selector: records
    params: {}
- name: sendStatus
  endpoint:
    path: /res/sendStatus
    method: GET
    data_selector: records
    params: {}
- name: set
  endpoint:
    path: /res/set
    method: GET
    data_selector: records
    params: {}
- name: status
  endpoint:
    path: /res/status
    method: GET
    data_selector: records
    params: {}
- name: type
  endpoint:
    path: /res/type
    method: GET
    data_selector: records
    params: {}
- name: vary
  endpoint:
    path: /res/vary
    method: GET
    data_selector: records
    params: {}
- name: static_files
  endpoint:
    path: /static
    method: GET
    data_selector: files
    params: {}
notes:
- Express 5.0 requires Node.js 18 or higher.
- The `app` object conventionally denotes the Express application.
- Redirects can be a fully-qualified URL or relative to the root of the host name.
- The view argument in res.render performs file system operations; hence, it should
  not contain user input.
- Express 4.x requires Node.js 0.10 or higher.
- Express 5.x requires Node.js 18 or higher.
- This app starts a server and listens on port 3000 for connections.
- The app responds with 'Hello World!' for requests to the root URL ('/').
- For best results, use a reverse proxy cache to improve performance of serving static
  assets.
- Uses Express framework for routing
- Express comes with a default error handler so you don’t need to write your own to
  get started.
- If you pass an error to next() and you do not handle it in a custom error handler,
  it will be handled by the built-in error handler; the error will be written to the
  client with the stack trace.
- To see all the internal logs used in Express, set the DEBUG environment variable
  to express:* when launching your app.
- You can specify more than one debug namespace by assigning a comma-separated list
  of names.
- When running an Express app behind a reverse proxy, some of the Express APIs may
  return different values than expected.
- The application setting trust proxy may be set to one of the values listed in the
  following table.
- Express 4 is a breaking change from Express 3. Existing Express 3 apps will not
  work if updated to Express 4.
- Express 5 no longer supports the app.del() function.
- If you use any of the removed methods or properties in your app, it will crash.
- In Express 5, the app.listen method will invoke the user-provided callback function
  when the server receives an error event.
- The app.router object has made a comeback in Express 5.
- The req.body property returns undefined when the body has not been parsed.
- The req.host function maintains the port number.
- The req.query property is now a getter.
- The res.clearCookie method ignores maxAge and expires options.
- The res.status method only accepts integers in the range of 100 to 999.
- The res.vary throws an error when the field argument is missing.
- The res.render() method enforces asynchronous behavior for all view engines.
- Express 5 supports Brotli encoding for requests.
- Express 4.0 requires Node.js 0.10 or higher.
- Param callback functions are local to the router on which they are defined.
- All param callbacks will be called before any handler of any route in which the
  param occurs.
- This middleware is available in Express v4.16.0 onwards.
- The `depth` option was added in Express v4.20.0.
- '''back'' was deprecated in 4.21.0, use ''req.get(''Referrer'') || ''/'' as an argument
  instead.'
- This method is just like the router.METHOD() methods, except that it matches all
  HTTP methods (verbs).
- When you use router.route(), middleware ordering is based on when the route is created,
  not when method handlers are added to the route.
- Express 3.x is end-of-life and no longer maintained.
- Use the app.engine(ext, callback) method to create your own template engine.
- Specify the views directory with app.set('views', './views')
- Register the template engine with app.set('view engine', 'ntl')
- Do not trust user input
- Prevent open redirects
- Use Helmet
- Reduce fingerprinting
- Use cookies securely
- Prevent brute-force attacks against authorization
- Ensure your dependencies are secure
- Avoid other known vulnerabilities
- Set NODE_ENV to 'production' to improve performance.
- Set NODE_ENV to 'production'
- Use a reverse proxy
- Use a process manager to ensure app restarts if it crashes.
- Run your app in a cluster to improve performance on multi-core systems.
- Use a reverse proxy like Nginx or HAProxy for better request handling.
- Ensure your app automatically restarts if it crashes.
- A load balancer can improve your app’s performance and speed.
- Session affinity, or sticky sessions, may be addressed by using a data store such
  as Redis.
- When deploying a new version, the application should stop accepting new requests,
  finish ongoing requests, clean up resources, and exit.
- 'Kubernetes has two health checks: liveness for restarting containers, and readiness
  for traffic acceptance.'
- Encourages new contributions.
- Encourages contributors to remain involved.
- Avoids unnecessary processes and bureaucracy whenever possible.
- Documentation is translated into multiple languages via Crowdin.
- Website issues may include display problems, mobile responsiveness, accessibility
  features, outages, broken links, and user interface enhancements.
- Content issues may include spelling errors, outdated documentation, and missing
  content.
- Translation issues may include spelling errors and poorly translated words.
- Support for sending responses as Uint8Array
- Added support for ETag option in `res.sendFile()`
- Added support for adding multiple links with the same rel with `res.links()`
- 'Performance: Use loop for acceptParams'
- Only the latest version of any given major release line is supported.
- Versions that are EOL (end-of-life) may receive updates for critical security vulnerabilities,
  but the Express team offers no guarantee.
- Express 4.x requires Node.js version 0.10 or higher.
- Express 5.x requires Node.js version 18 or higher.
- Express 5.1.0 es ahora es la versión predeterminada en npm, y estamos introduciendo
  un cronograma oficial de LTS para las líneas de lanzamiento v4 y v5.
- Express 5.1.0 is now the default on npm, and we’re introducing an official LTS schedule
  for the v4 and v5 release lines.
- Middleware functions can modify request and response objects and must call next()
  to pass control.
- Middleware functions can modify request and response objects.
- Error-handling middleware requires four arguments.
- Some template engines do not follow the convention of exporting __express function.
- You must catch errors that occur in asynchronous code invoked by route handlers
  or middleware and pass them to Express for processing.
- If you have a route handler with multiple callback functions, you can use the route
  parameter to skip to the next route handler.
- You can specify multiple debugging namespaces by separating them with commas.
- The application setting trust proxy may be set to true or false.
- Le fichier app.js est désormais un module Node.js
- Le module doit être chargé dans un fichier Node.js et démarré via le fichier Node.js
- Express 4 est un changement novateur d’Express 3. Cela signifie qu’une application
  Express 3 existante ne fonctionnera pas si vous mettez à jour la version Express
  dans les dépendances.
- Les fonctions Express Middleware intégrées `express.favicon`, `express.logger`,
  `express.methodOverride`, `express.session`, `express.bodyParser` et `express.errorHandler`
  ne sont plus disponibles sur l’objet `express`.
- Uses asynchronous behavior for all view engines in res.render()
- Supports Brotli encoding for requests
- Express 5 introduces breaking changes from Express 4.
- To install this version, you need to have a Node.js version 18 or higher.
- Sub-apps will not inherit the value of settings that have a default value.
- Sub-apps will inherit the value of settings with no default value.
- Express 3.x is no longer supported.
- It is strongly recommended to use the latest version of Express.
- If you believe you have discovered a security vulnerability in Express, please see
  Security Policies and Procedures.
- Using npm to manage your application’s dependencies is powerful and convenient.
- The security of your app is only as strong as the weakest link in your dependencies.
- Définir NODE_ENV sur 'production' pour améliorer les performances
- Vérifier que votre application redémarre automatiquement
- Exécuter votre application dans un cluster
- Définir NODE_ENV sur 'production'
- Utilisation de StrongLoop PM avec un équilibreur de charge Nginx
- Utilisez un proxy inverse pour exploiter les fichiers statiques
- Define NODE_ENV as 'production' to improve performance
- Ensure your application restarts automatically
- Clustering is made possible with Node’s cluster module.
- When running an application with PM2, you can enable cluster mode to run it in a
  cluster.
- Pour améliorer les performances en production, vous pouvez également mettre en cache
  le résultat des demandes.
- La configuration d’un équilibreur de charge peut améliorer les performances et la
  vitesse de votre application.
- Un proxy inverse accompagne une application Web et exécute des opérations de prise
  en charge sur les demandes.
- Les instances d’application s’exécutent en tant que processus distincts, elles ne
  partagent pas le même espace mémoire.
- Vous pouvez toutefois utiliser un magasin de données en mémoire tel que Redis pour
  stocker les données de session et l’état.
- Chaque fois qu’un processus de traitement plante, veillez toujours à consigner l’événement
  et à génération un nouveau processus à l’aide de cluster.fork().
- Lorsque vous déployez votre application avec PM2, vous pouvez tirer parti du clustering
  sans modifier votre code d’application.
- When you deploy a new version of your application, you must replace the previous
  version.
- A load balancer uses health checks to determine if an application instance is healthy
  and can accept requests.
- Alpha and Beta releases are unstable and not suitable for production use.
- This document might be outdated relative to the documentation in English.
- We use Crowdin to manage our translations in multiple languages and achieve automatic
  translation with artificial intelligence.
- Versions that are EOL (end-of-life) may receive updates for critical security vulnerabilities.
- Application responds with 'Hello World!' for requests to the root URL ('/').
- For other paths, it will respond with a 404 Not Found error.
- This is a simple Express application that listens on port 3000.
- For every other path, it will respond with a 404 Not Found.
- Application listens on port 3000 for connections
- Responds with 'Hello World!' for requests to the root URL
- O aplicativo responde com 'Hello World!' às solicitações para a URL raiz.
- This middleware only parses urlencoded bodies with UTF-8 encoding.
- The order in which you define middleware with router.use() is very important.
- Express has no opinions on structuring applications.
- Express does not define a database; this is left to third-party Node modules.
- In express 5, the characters `?`, `+`, `*`, `[]`, and `()` are handled differently
  than in version 4
- Query strings are not part of the route path
- The order of middleware loading is important.
- Middleware functions require four arguments for error handling.
- Integrated middleware functions are now in separate modules.
- The view engine cache does not cache the contents of the template’s output, only
  the underlying template itself.
- 'Middleware for error handling is defined like other middleware, but has four arguments:
  (err, req, res, next).'
- When you only want to see logs from the router implementation, set DEBUG to express:router.
- If you want to see only logs from the application implementation, set DEBUG to express:application.
- 'It is important to ensure that the last reverse proxy trusted is removing/overwriting
  all of the following HTTP headers: `X-Forwarded-For`, `X-Forwarded-Host`, and `X-Forwarded-Proto`.'
- Die Datei `app.js` ist nun ein Node.js-Modul.
- Das Modul muss in eine Node.js-Datei geladen und über die Node.js-Datei gestartet
  werden.
- Express 4 erfordert Node.js 0.10.x oder höher und unterstützt nicht mehr Node.js
  0.8.x.
- Die integrierten Middlewarefunktionen müssen manuell installiert werden.
- Express 5.0 befindet sich noch in der Beta-Release-Phase.
- In Express 5, the express.static middleware’s dotfiles option defaults to 'ignore'.
- The app.listen method will invoke the user-provided callback function when the server
  receives an error event.
- The app.router object is available in Express 5 as a reference to the Express base
  router.
- The req.host function retains the port number in Express 5.
- The req.query property is no longer writable and is instead a getter.
- The res.clearCookie method ignores the maxAge and expires options.
- The res.vary method throws an error when the field argument is missing.
- Express 5 supports Brotli encoding for requests from clients that support it.
- Sub-apps will not inherit the value of settings that have a default value. You must
  set the value in the sub-app.
- Express 3.x is no longer maintained.
- Using npm to manage your application’s dependencies is powerful and convenient.
  But the packages that you use may contain critical security vulnerabilities that
  could also affect your application.
- NODE_ENV auf 'production' festlegen verbessert die Leistung.
- Verwenden Sie Middleware für statische Dateien.
- NODE_ENV auf “production” festlegen
- NODE_ENV auf 'production' festlegen verbessert die Anwendungsleistung.
- Verwendung eines Prozessmanagers zur Gewährleistung der Verfügbarkeit der Anwendung
  in Produktionsumgebungen.
- NODE_ENV auf “production” festlegen verbessert die Anwendungsleistung.
- Verwenden Sie Middleware für GZIP-Komprimierung zur Verbesserung der Geschwindigkeit.
- Verwenden Sie asynchrone Funktionen anstelle von synchronen Funktionen in Produktionsumgebungen.
- When running an application with PM2, you can enable cluster mode to run it in a
  cluster with a number of instances of your choosing.
- In einem Multi-Core-System können Sie die Leistung einer Node-Anwendung mehrmals
  erhöhen, indem Sie einen Cluster von Prozessen starten.
- Wenn ein Verarbeitungsprozess abstürzt, müssen Sie sicherstellen, dass das Ereignis
  protokolliert und ein neuer Prozess mithilfe von 'cluster.fork()' gestartet wird.
- Es wird empfohlen, Express hinter einem Reverse Proxy wie Nginx oder HAProxy in
  Produktion auszuführen.
- The process manager you’re using will first send a SIGTERM signal to the application
  to notify it that it will be killed.
- Avoids unnecessary processes and bureaucracy.
- This method requires that all routes from that point on would require authentication.
- This middleware only parses urlencoded bodies and only looks at requests where the
  Content-Type header matches the type option.
- The body object will contain key-value pairs, where the value can be a string or
  array.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Redirects can be a fully-qualified URL for redirecting to a different site
- Redirects can be relative to the root of the host name
- Redirects can be relative to the current URL
- Path-relative redirects are also possible
- Middleware functions are executed sequentially, therefore the order of middleware
  inclusion is important.
- This method requires authentication, and automatically load a user.
- This middleware only parses urlencoded bodies.
- The mount path is stripped and is not visible to the middleware function.
- This middleware only parses urlencoded bodies and only looks at requests with the
  Content-Type header matching the type option.
- The app object has methods for routing HTTP requests
- The app object can be referred from the request and response objects
- This method is extremely useful for mapping 'global' logic for specific path prefixes
  or arbitrary matches.
errors:
- '404 Not Found: For every other path that is not defined.'
- If you call next() with an error after you have started writing the response, the
  Express default error handler closes the connection and fails the request.
- You must catch errors that occur in asynchronous code invoked by route handlers
  or middleware and pass them to Express for processing.
- '404 Not Found: File or directory not found'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- If you call next() with an error after having started writing the response, the
  default error handler will close the connection and fail the request.
- If you do not call next() in an error-handling function, you are responsible for
  writing (and ending) the response.
- Security bugs should be reported by emailing express-security@lists.openjsf.org.
- '404 Não Encontrado: Para todos os outros caminhos.'
- If next() is called with an error after response started, the default error handler
  closes the connection and the request fails.
- If you call next() with an error in your code more than once, the default error
  handler can be triggered.
- Report security bugs by emailing express-security@lists.openjsf.org.
- '400 Bad Request: If the body cannot be parsed.'
- '400 Bad Request: If the request body is not urlencoded or is too large.'
- content encoding unsupported
- entity parse failed
- entity verify failed
- request aborted
- request entity too large
- request size did not match content length
- stream encoding should not be set
- stream is not readable
auth_info:
  mentioned_objects: []
client:
  base_url: http://localhost:3000
  headers:
    Accept: application/json
source_metadata: null
