resources:
- name: users
  endpoint:
    path: /db/users
    method: CREATE
    data_selector: rows
- name: databases
  endpoint:
    path: /v1/organizations/{organizationSlug}/databases
    method: POST
    data_selector: databases
- name: auth_tokens
  endpoint:
    path: /v1/organizations/{organizationSlug}/databases/{databaseName}/auth/tokens
    method: POST
    data_selector: tokens
- name: upload
  endpoint:
    path: /v1/upload
    method: POST
    data_selector: upload
- name: Create Database
  endpoint:
    path: /v1/organizations/{organizationSlug}/databases
    method: POST
    data_selector: ''
    params: {}
- name: Create Database Token
  endpoint:
    path: /v1/organizations/{organizationSlug}/databases/{databaseName}/auth/tokens
    method: POST
    data_selector: ''
    params: {}
- name: Upload SQLite Database
  endpoint:
    path: /v1/upload
    method: POST
    data_selector: ''
    params: {}
- name: movies
  endpoint:
    path: /movies
    method: CREATE
    data_selector: records
    params: {}
- name: movies
  endpoint:
    path: /movies
    method: CREATE
    data_selector: records
    params: {}
- name: databases
  endpoint:
    path: /v1/organizations/${{ secrets.ORGANIZATION_NAME }}/databases
    method: POST
    data_selector: databases
- name: JSON
  endpoint:
    path: /json
    method: GET
- name: FTS5
  endpoint:
    path: /fts5
    method: GET
- name: R*Tree
  endpoint:
    path: /rtree
    method: GET
- name: SQLean Crypto
  endpoint:
    path: /crypto
    method: GET
- name: SQLean Fuzzy
  endpoint:
    path: /fuzzy
    method: GET
- name: SQLean Math
  endpoint:
    path: /math
    method: GET
- name: SQLean Stats
  endpoint:
    path: /stats
    method: GET
- name: SQLean Text
  endpoint:
    path: /text
    method: GET
- name: SQLean UUID
  endpoint:
    path: /uuid
    method: GET
- name: SQLean Regexp
  endpoint:
    path: /regexp
    method: GET
- name: sqlite-vec
  endpoint:
    path: /vec
    method: GET
- name: Groups API
  endpoint:
    path: /api-reference/groups
    method: GET
- name: Database API
  endpoint:
    path: /api-reference/databases
    method: GET
- name: Locations API
  endpoint:
    path: /api-reference/locations
    method: GET
- name: Organizations API
  endpoint:
    path: /api-reference/organizations
    method: GET
- name: API Tokens API
  endpoint:
    path: /api-reference/tokens
    method: GET
- name: Audit Logs API
  endpoint:
    path: /api-reference/audit-logs
    method: GET
- name: locations
  endpoint:
    path: /v1/locations
    method: GET
- name: create_group
  endpoint:
    path: /v1/organizations/{organizationSlug}/groups
    method: POST
- name: create_database
  endpoint:
    path: /v1/organizations/{organizationSlug}/databases
    method: POST
- name: groups
  endpoint:
    path: /api-reference/groups
    method: GET
- name: databases
  endpoint:
    path: /api-reference/databases
    method: GET
- name: locations
  endpoint:
    path: /api-reference/locations
    method: GET
- name: organizations
  endpoint:
    path: /api-reference/organizations
    method: GET
- name: tokens
  endpoint:
    path: /api-reference/tokens
    method: GET
- name: audit_logs
  endpoint:
    path: /api-reference/audit-logs
    method: GET
- name: users
  endpoint:
    path: /execute
    method: POST
    data_selector: results
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: pipeline
  endpoint:
    path: /v2/pipeline
    method: POST
- name: version
  endpoint:
    path: /version
    method: GET
- name: health
  endpoint:
    path: /health
    method: GET
- name: dump
  endpoint:
    path: /dump
    method: GET
- name: jobs
  endpoint:
    path: /v1/jobs
    method: GET
- name: job_detail
  endpoint:
    path: /v1/jobs/:id
    method: GET
- name: listen
  endpoint:
    path: /beta/listen
    method: GET
- name: pipeline
  endpoint:
    path: /v2/pipeline
    method: POST
- name: version
  endpoint:
    path: /version
    method: GET
- name: health
  endpoint:
    path: /health
    method: GET
- name: dump
  endpoint:
    path: /dump
    method: GET
- name: jobs
  endpoint:
    path: /v1/jobs
    method: GET
- name: job_details
  endpoint:
    path: /v1/jobs/:id
    method: GET
- name: listen
  endpoint:
    path: /beta/listen
    method: GET
- name: database
  endpoint:
    path: /db
    method: GET
    data_selector: databases
- name: database
  endpoint:
    path: /db
    method: GET
    data_selector: databases
- name: database
  endpoint:
    path: /db
    method: GET
    data_selector: databases
- name: in_memory_databases
  endpoint:
    path: /in-memory-databases
    method: GET
- name: local_development
  endpoint:
    path: /local-development
    method: GET
- name: embedded_replicas
  endpoint:
    path: /embedded-replicas
    method: GET
- name: manual_sync
  endpoint:
    path: /manual-sync
    method: GET
- name: simple_query
  endpoint:
    path: /simple-query
    method: GET
- name: batch_transactions
  endpoint:
    path: /batch-transactions
    method: GET
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: pipeline
  endpoint:
    path: /v2/pipeline
    method: POST
    data_selector: results
- name: database
  endpoint:
    path: /db/show
    method: GET
    data_selector: url
    params: {}
- name: auth_token
  endpoint:
    path: /db/tokens/create
    method: POST
    data_selector: token
    params: {}
- name: database
  endpoint:
    path: /db
    method: GET
    data_selector: databases
- name: databases
  endpoint:
    path: /v1/organizations/{organizationSlug}/databases
    method: POST
    data_selector: databases
    params: {}
- name: db_create
  endpoint:
    path: /cli/db/create
    method: POST
    data_selector: data
    params: {}
- name: pipeline
  endpoint:
    path: /v2/pipeline
    method: POST
    data_selector: results
- name: databases
  endpoint:
    path: /v1/organizations/{organizationSlug}/databases
    method: POST
    data_selector: database
    params: {}
- name: database
  endpoint:
    path: /db
    method: GET
    data_selector: databases
    params: {}
- name: database
  endpoint:
    path: /db
    method: GET
    data_selector: databases
    params: {}
- name: parent_database
  endpoint:
    path: /v1/organizations/{organizationSlug}/databases
    method: POST
    data_selector: databases
    params:
      is_schema: true
- name: child_database
  endpoint:
    path: /v1/organizations/{organizationSlug}/databases
    method: POST
    data_selector: databases
    params:
      schema: parent-db
- name: pipeline
  endpoint:
    path: /v2/pipeline
    method: POST
    data_selector: results
- name: db_create
  endpoint:
    path: /db/create
    method: POST
    data_selector: records
- name: database
  endpoint:
    path: /v1/organizations/{organizationSlug}/databases
    method: POST
    data_selector: database
    params: {}
- name: database
  endpoint:
    path: /db
    method: GET
    data_selector: databases
- name: database_credentials
  endpoint:
    path: /db/show
    method: GET
    data_selector: url
    params: {}
- name: auth_token
  endpoint:
    path: /db/tokens/create
    method: POST
    data_selector: token
    params: {}
- name: pipeline
  endpoint:
    path: /v2/pipeline
    method: POST
- name: org_create
  endpoint:
    path: /cli/org/create
    method: POST
- name: org_list
  endpoint:
    path: /cli/org/list
    method: GET
    data_selector: organizations
    params: {}
- name: database
  endpoint:
    path: /db
    method: GET
    data_selector: records
    params: {}
- name: transfer_group
  endpoint:
    path: /v1/organizations/{organizationSlug}/groups/{groupName}/transfer
    method: POST
    data_selector: null
    params: {}
- name: org_list
  endpoint:
    path: /cli/org/list
    method: GET
- name: group_configuration
  endpoint:
    path: /v1/organizations/{organizationSlug}/groups/{groupName}/configuration
    method: GET
    data_selector: delete_protection
    params: {}
- name: delete_database
  endpoint:
    path: /v1/organizations/{organizationSlug}/databases/{databaseName}
    method: DELETE
- name: transfer_group
  endpoint:
    path: /v1/organizations/{organizationSlug}/groups/{groupName}/transfer
    method: POST
    data_selector: response
    params: {}
- name: organizations
  endpoint:
    path: /v1/organizations
    method: GET
    data_selector: ''
- name: groups
  endpoint:
    path: /v1/organizations/{organizationSlug}/groups
    method: POST
    data_selector: group
    params: {}
- name: group_configuration
  endpoint:
    path: /v1/organizations/{organizationSlug}/groups/{groupName}/configuration
    method: GET
    data_selector: delete_protection
    params: {}
- name: delete_database
  endpoint:
    path: /v1/organizations/{organizationSlug}/databases/{databaseName}
    method: DELETE
    data_selector: database
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: organizations
  endpoint:
    path: /v1/organizations
    method: GET
    data_selector: ''
    params: {}
- name: groups
  endpoint:
    path: /v1/organizations/{organizationSlug}/groups
    method: POST
    data_selector: group
    params: {}
- name: users
  endpoint:
    path: /connect/javascript
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
notes:
- If you’re using libsql locally or an sqlite file, you can ignore passing authToken.
- Embedded Replicas only work where you have access to the file system.
- Your fully managed SQLite-compatible database platform built on libSQL
- Uses OAuth2 with refresh token — requires setup of connected app in api
- 'authToken issued from the Turso Cloud: turso db tokens create <db>'
- You don’t need to provide an authToken in development.
- It’s recommended to use environment variables for both url and authToken for a seamless
  developer experience.
- Changes will be lost when you stop the server.
- libSQL is a fork of SQLite that aims to be a modern database, with a focus on low
  query latency and high availability.
- 'libSQL introduces an essential feature for production environments: encryption
  at rest.'
- 'The seed parameter with ''type'': ''database_upload'' indicates that you plan to
  upload a database file.'
- Free, Developer, Scaler, and Pro plans offer 99.999999999% durability guarantee.
- For all Turso AWS regions, we employ a diskless architecture where data is backed
  by a combination of S3-Express One Zone and S3.
- Traffic remains within AWS’s private network
- Standard AWS VPC endpoint pricing applies
- Applications can access the endpoint from any AZ in your VPC
- Each region has specific service names and supported availability zones
- Vector Similarity Search is built into Turso and libSQL Server as a native feature.
- LibSQL can only operate on vectors with no more than 65536 dimensions.
- Vector index works only for tables with ROWID or with singular PRIMARY KEY. Composite
  PRIMARY KEY without ROWID is not supported.
- Vector index works only for tables with ROWID or with singular PRIMARY KEY.
- Composite PRIMARY KEY without ROWID is not supported.
- Branches count towards your plan’s database quota.
- Database branches are completely separate from the original database.
- You will need to create a new token (or use a group token) to connect to the new
  database.
- You will need to manually delete the database branch when you no longer need it.
- Restoring from a PITR creates a new database. You will need to update your application
  to use the new database connection string.
- You cannot restore from a PITR to a database that already exists.
- Restores count towards your plan’s database quota.
- Installing the Turso CLI on Windows requires that you have WSL installed.
- The Turso CLI will automatically attempt to open a browser, or wait for further
  instructions when interacting with various commands.
- Make sure to save the token somewhere safe.
- Your database group must be using the version v0.24.18 or greater.
- Turso uses Bearer authentication — requires API token
- Requires setup of database credentials and authentication token.
- Embedded Replicas only works where you have access to the file system.
- You will need an existing database to continue.
- Assign credentials to the environment variables inside .env.
- This is currently in technical preview.
- You will want to make sure to handle database tokens securely.
- This API is currently in technical preview.
- Uses an API key for authentication.
- Join us in Discord to report any issues.
- You will want to store these as environment variables.
- Make sure to update the stmt.sql to select from a table you already have.
- The Turso CLI gives you everything you need from the command line to manage your
  database, API tokens, inviting users, and launching the database shell.
- Ensure database tokens are handled securely.
- You can only attach databases that have the attach feature enabled.
- You can only attach databases belonging to a group, and in the same group.
- There is a maximum of 10 databases that can be attached to a single transaction.
- The attached databases are read only.
- ATTACH statement can be used only within transactions.
- ATTACH doesn’t support Embedded Replicas.
- You cannot apply schema changes to a child database directly. You must use the parent
  (schema) database.
- Uses an auth token for database connection
- The file size is limited to 2GB.
- You must append to the Base URL the actual pipeline URL that accepts requests —
  /v2/pipeline.
- Some objects like Contact may return nulls in deeply nested fields
- Uses OAuth2 — requires setup of connected app in Turso
- The attached databases are read only
- Schema databases cannot be shared across groups or globally via an organization/account.
- This feature is now deprecated for all new users. Existing users can continue to
  use Edge Replicas on Fly.
- You can create a new database in a specific group using the --group flag.
- Do not open the local database while the embedded replica is syncing. This can lead
  to data corruption.
- In certain contexts, such as serverless environments without a filesystem, you can’t
  use embedded replicas.
- Store database URL and auth token as environment variables.
- Retrieve database credentials and store as environment variables.
- Sync method available for embedded replicas.
- Make sure to also add the following line after any COPY commands to copy the certificates
- Requires setup of Turso database and authentication token
- Page Not Found
- You will be asked to add a payment method and subscribe to the Scaler plan to successfully
  create a new organization.
- We couldn't find the page you were looking for.
- Prevent the group from being deleted.
- You can only transfer groups to organizations you own or are an admin.
- Existing database URL and tokens will continue to work, but should update your application
  to use the new URL and token as soon as possible.
- Page not found error could indicate issues with the endpoint or URL.
- Creating more than one group is limited to Scaler, Pro and Enterprise plans.
- API documentation is not accessible at the moment.
- Returns a list of organizations the authenticated user owns or is a member of.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'BLOCKED: Query exceeds monthly quotas for row reads, row writes, or total storage'
- '401: Unauthorized - Invalid or expired auth token'
- '402: Payment required - Check you have an active subscription'
- '403: Forbidden - You do not have permission to access this resource'
- '409: Conflict - Resource already exists'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: Bad Request'
- '409: Conflict'
- '400'
- '409'
- '401 Unauthorized: Check authentication token'
- '200: Successful response'
- '404: Database not found'
- '404: Not Found'
- '404: Page Not Found'
- '409 Conflict: Group already exists'
- '404 Not Found: The requested resource could not be found.'
- '409 Conflict: This error may indicate that the group already exists.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://turso.tech
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
