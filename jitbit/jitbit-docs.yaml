resources:
- name: tickets
  endpoint:
    path: /Tickets
    method: GET
    data_selector: ''
    params:
      mode: all
      count: 10
      offset: 0
- name: ticket
  endpoint:
    path: /ticket
    method: GET
    data_selector: ''
    params:
      id: '123'
- name: create_ticket
  endpoint:
    path: /ticket
    method: POST
    data_selector: ''
    params: {}
- name: update_ticket
  endpoint:
    path: /UpdateTicket
    method: POST
    data_selector: ''
    params:
      id: '321'
- name: close_ticket
  endpoint:
    path: /Close
    method: POST
    data_selector: ''
    params:
      id: '321'
- name: Search
  endpoint:
    path: /api/Search
    method: GET
    params:
      query: TEXT
      dateFrom: '2020-12-12'
      fromUserId: 123
- name: TicketCustomFields
  endpoint:
    path: /api/TicketCustomFields
    method: GET
    params:
      id: 123
- name: Attachment
  endpoint:
    path: /api/attachment
    method: GET
    params:
      id: 123
- name: Attachments
  endpoint:
    path: /api/Attachments
    method: GET
    params:
      id: 123
- name: AttachFile
  endpoint:
    path: /api/AttachFile
    method: POST
- name: DeleteFile
  endpoint:
    path: /api/DeleteFile
    method: GET
    params:
      id: 123
- name: AddSubscriber
  endpoint:
    path: /api/AddSubscriber
    method: POST
- name: RemoveSubscriber
  endpoint:
    path: /api/RemoveSubscriber
    method: POST
- name: Subscribers
  endpoint:
    path: /api/Subscribers
    method: GET
    params:
      id: 123
- name: Categories
  endpoint:
    path: /api/categories
    method: GET
- name: TechsForCategory
  endpoint:
    path: /api/TechsForCategory
    method: GET
    params:
      id: 123
- name: CustomFieldsForCategory
  endpoint:
    path: /api/CustomFieldsForCategory
    method: GET
    params:
      categoryId: 123
- name: AddCategory
  endpoint:
    path: /api/AddCategory
    method: POST
    params:
      name: test
      sectionId: 1
- name: Priorities
  endpoint:
    path: /api/Priorities
    method: GET
- name: MergeTickets
  endpoint:
    path: /api/MergeTickets
    method: POST
- name: LinkTickets
  endpoint:
    path: /api/LinkTickets
    method: POST
- name: UnlinkTickets
  endpoint:
    path: /api/UnlinkTickets
    method: POST
- name: AddSubTicket
  endpoint:
    path: /api/AddSubTicket
    method: POST
- name: RemoveSubTicket
  endpoint:
    path: /api/RemoveSubTicket
    method: POST
- name: LinkedTickets
  endpoint:
    path: /api/LinkedTickets
    method: GET
    params:
      id: 123
- name: SubTickets
  endpoint:
    path: /api/SubTickets
    method: GET
    params:
      id: 123
- name: ParentTicket
  endpoint:
    path: /api/ParentTicket
    method: GET
    params:
      id: 123
- name: TicketIntegrationData
  endpoint:
    path: /api/TicketIntegrationData
    method: GET
    params:
      id: 123
- name: TagTicket
  endpoint:
    path: /api/TagTicket
    method: POST
- name: Comments
  endpoint:
    path: /api/comments
    method: GET
    params:
      id: 123
- name: Comment
  endpoint:
    path: /api/comment
    method: POST
- name: UpdateComment
  endpoint:
    path: /api/updatecomment
    method: POST
- name: CommentTemplates
  endpoint:
    path: /api/CommentTemplates
    method: GET
- name: Users
  endpoint:
    path: /api/Users
    method: GET
- name: CreateUser
  endpoint:
    path: /api/CreateUser
    method: POST
- name: UpdateUser
  endpoint:
    path: /api/UpdateUser
    method: POST
- name: DeleteUser
  endpoint:
    path: /api/DeleteUser
    method: POST
- name: User
  endpoint:
    path: /api/User
    method: GET
    params:
      userId: 123
- name: SetCustomFieldForUser
  endpoint:
    path: /api/SetCustomFieldForUser
    method: POST
- name: UserByEmail
  endpoint:
    path: /api/UserByEmail
    method: GET
    data_selector: UserID
    params:
      email: admin@testmail.com
- name: MergeUsers
  endpoint:
    path: /api/MergeUsers
    method: POST
    data_selector: null
    params:
      fromUserId: 123
      toUserId: 321
- name: UserByUsername
  endpoint:
    path: /api/UserByUsername
    method: GET
    data_selector: UserID
    params:
      username: admin
- name: UserCustomFields
  endpoint:
    path: /api/UserCustomFields
    method: GET
    data_selector: null
    params:
      id: 123
- name: Users
  endpoint:
    path: /api/Users
    method: GET
    data_selector: UserID
    params:
      count: 500
- name: AddCategoryTechPermission
  endpoint:
    path: /api/AddCategoryTechPermission
    method: POST
    data_selector: null
    params:
      userId: 123
      categoryId: 321
- name: RemoveCategoryTechPermission
  endpoint:
    path: /api/RemoveCategoryTechPermission
    method: POST
    data_selector: null
    params:
      userId: 123
      categoryId: 321
- name: Companies
  endpoint:
    path: /api/Companies
    method: GET
    data_selector: CompanyID
    params: {}
- name: Company
  endpoint:
    path: /api/Company
    method: POST
    data_selector: null
    params: {}
- name: UpdateCompany
  endpoint:
    path: /api/UpdateCompany
    method: POST
    data_selector: null
    params: {}
- name: Departments
  endpoint:
    path: /api/Departments
    method: GET
    data_selector: DepartmentID
    params: {}
- name: SetCustomFieldForCompany
  endpoint:
    path: /api/SetCustomFieldForCompany
    method: POST
    data_selector: null
    params: {}
- name: CompanyCustomFields
  endpoint:
    path: /api/CompanyCustomFields
    method: GET
    data_selector: null
    params:
      id: 123
- name: Articles
  endpoint:
    path: /api/Articles
    method: GET
    data_selector: Articles
    params: {}
- name: Article
  endpoint:
    path: /api/Article/{id}
    method: GET
    data_selector: null
    params:
      id: 7
- name: Article
  endpoint:
    path: /api/article
    method: POST
    data_selector: null
    params: {}
- name: Rule
  endpoint:
    path: /api/Rule/{id}
    method: GET
    data_selector: null
    params:
      id: 1
- name: DisableRule
  endpoint:
    path: /api/DisableRule/{id}
    method: POST
    data_selector: null
    params:
      id: 1
- name: EnableRule
  endpoint:
    path: /api/EnableRule/{id}
    method: POST
    data_selector: null
    params:
      id: 1
- name: CustomFields
  endpoint:
    path: /api/CustomFields
    method: GET
    data_selector: null
    params:
      type: 3
- name: Assets
  endpoint:
    path: /api/Assets
    method: GET
    data_selector: null
    params:
      page: 1
- name: Asset
  endpoint:
    path: /api/Asset
    method: GET
    data_selector: null
    params:
      id: 91
- name: Asset
  endpoint:
    path: /api/Asset
    method: POST
    data_selector: null
    params: {}
- name: SetCustomFieldForAsset
  endpoint:
    path: /api/SetCustomFieldForAsset
    method: POST
    data_selector: null
    params: {}
- name: UpdateAsset
  endpoint:
    path: /api/UpdateAsset
    method: POST
    data_selector: null
    params: {}
- name: AssignAssetToUser
  endpoint:
    path: /api/AssignAssetToUser
    method: POST
    data_selector: null
    params: {}
- name: UnAssignAssetToUser
  endpoint:
    path: /api/UnAssignAssetToUser
    method: POST
    data_selector: null
    params: {}
- name: AddAssetToTicket
  endpoint:
    path: /api/AddAssetToTicket
    method: POST
    data_selector: null
    params: {}
- name: RemoveAssetFromTicket
  endpoint:
    path: /api/RemoveAssetFromTicket
    method: POST
    data_selector: null
    params: {}
- name: EnableAsset
  endpoint:
    path: /api/EnableAsset
    method: POST
    data_selector: null
    params: {}
- name: DisableAsset
  endpoint:
    path: /api/DisableAsset
    method: POST
    data_selector: null
    params: {}
- name: tickets
  endpoint:
    path: /tickets
    method: GET
    data_selector: records
- name: support_widget
  endpoint:
    path: /api/support_widget
    method: GET
    data_selector: widget_data
    params: {}
- name: tickets
  endpoint:
    path: /docs/activetickets/
    method: GET
- name: users
  endpoint:
    path: /docs/users/
    method: GET
- name: reports
  endpoint:
    path: /docs/reports/
    method: GET
- name: data_processing_agreement
  endpoint:
    path: /helpdesk/data-processing-agreement
    method: GET
- name: tickets
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: records
    params: {}
- name: Ticket
  endpoint:
    path: /api/Ticket
    method: POST
    data_selector: records
- name: User
  endpoint:
    path: /api/User
    method: GET
    data_selector: records
- name: tickets
  endpoint:
    path: /api/Tickets
    method: GET
    data_selector: records
    params: {}
- name: custom_fields
  endpoint:
    path: /api/CustomFields
    method: GET
    data_selector: records
    params: {}
- name: tickets
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: tickets
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
- name: tickets
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: tickets
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
- name: tickets
  endpoint:
    path: /activetickets/
    method: GET
- name: ticket
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: records
    params: {}
- name: New Ticket
  endpoint:
    path: /Tickets/New
    method: GET
    data_selector: ''
    params: {}
- name: scheduled_tickets
  endpoint:
    path: /docs/reports/scheduledtickets
    method: GET
- name: tickets
  endpoint:
    path: /api/tickets
    method: GET
- name: KB home page
  endpoint:
    path: /docs/kbase/
    method: GET
- name: KB settings
  endpoint:
    path: /docs/adminsettings/#knowledge-base-settings
    method: GET
- name: users
  endpoint:
    path: /docs/users/
    method: GET
- name: register_user
  endpoint:
    path: /register
    method: POST
    data_selector: user
    params: {}
- name: view_user
  endpoint:
    path: /docs/viewuser/
    method: GET
- name: activity_graph
  endpoint:
    path: /docs/kbase/activitygraph
    method: GET
- name: top_viewed_articles
  endpoint:
    path: /docs/kbase/topviewedarticles
    method: GET
- name: recent_searches
  endpoint:
    path: /docs/kbase/recentsearches
    method: GET
- name: total_activity_summary
  endpoint:
    path: /docs/kbase/totalactivitysummary
    method: GET
- name: overdue_tickets_report
  endpoint:
    path: /docs/reportoverdue/
    method: GET
    data_selector: tickets
    params: {}
- name: Technician Performance
  endpoint:
    path: /reports/technician_statistics
    method: GET
    data_selector: statistics
    params: {}
- name: audit_log
  endpoint:
    path: /docs/auditlog/
    method: GET
    data_selector: log_entries
- name: tags_management
  endpoint:
    path: /docs/tags/
    method: GET
    data_selector: tags
- name: custom_fields
  endpoint:
    path: /api/customfields
    method: GET
    data_selector: custom_fields
    params: {}
- name: custom_statuses
  endpoint:
    path: /api/custom_statuses
    method: GET
    data_selector: statuses
    params: {}
- name: custom_priorities
  endpoint:
    path: /admin/custompriorities
    method: GET
    data_selector: custom_priorities
    params: {}
- name: custom_status
  endpoint:
    path: /docs/admineditstatus/
    method: GET
    data_selector: status
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: records
    params: {}
- name: incoming_email
  endpoint:
    path: /adminpopservers/
    method: GET
    data_selector: servers
    params: {}
- name: available_trigger_types
  endpoint:
    path: /docs/api/available_trigger_types
    method: GET
    data_selector: triggers
    params: {}
- name: import_tickets_csv
  endpoint:
    path: /import/tickets/csv
    method: POST
    data_selector: ticket_import
    params: {}
- name: import_tickets_zendesk
  endpoint:
    path: /import/tickets/zendesk
    method: POST
    data_selector: ticket_import_zendesk
    params: {}
- name: import_tickets_freshdesk
  endpoint:
    path: /import/tickets/freshdesk
    method: POST
    data_selector: ticket_import_freshdesk
    params: {}
- name: import_kb_csv
  endpoint:
    path: /import/kb/csv
    method: POST
    data_selector: kb_import
    params: {}
- name: export_tickets_csv
  endpoint:
    path: /export/tickets/csv
    method: GET
    data_selector: tickets_export
    params: {}
- name: export_kb_csv
  endpoint:
    path: /export/kb/csv
    method: GET
    data_selector: kb_export
    params: {}
- name: user_lookup
  endpoint:
    path: /user_lookup
    method: GET
    data_selector: user_info
- name: assets
  endpoint:
    path: /docs/assets/
    method: GET
- name: asset_search
  endpoint:
    path: /docs/assetsearch/
    method: GET
- name: edit_asset
  endpoint:
    path: /docs/editasset/
    method: GET
- name: assets
  endpoint:
    path: /docs/assets/
    method: GET
    data_selector: assets
    params: {}
- name: discord_webhook
  endpoint:
    path: /api/webhooks/YOUR_WEBHOOK_ID/YOUR_WEBHOOK_TOKEN
    method: POST
    data_selector: content
    params: {}
- name: tickets
  endpoint:
    path: /tickets
    method: GET
    data_selector: records
- name: api
  endpoint:
    path: /docs/api
    method: GET
- name: user_lookup
  endpoint:
    path: /myscript.php
    method: GET
    data_selector: response
    params:
      email: '#email#'
- name: autologin
  endpoint:
    path: /User/AutoLogin
    method: GET
    data_selector: ''
    params: {}
- name: tickets
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: tickets
- name: helpdesk_tickets
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: tickets
- name: customers
  endpoint:
    path: /api/customers
    method: GET
    data_selector: customers
- name: tickets
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: records
    params: {}
- name: tickets
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: tickets
- name: support_email
  endpoint:
    path: /api/support_email
    method: POST
    data_selector: ticket
    params: {}
- name: helpdesk_tickets
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: tickets
- name: tickets
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: tickets
- name: tickets
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: records
- name: UserSearch
  endpoint:
    path: /api/UserSearch
    method: GET
    data_selector: records
- name: overdue_tickets
  endpoint:
    path: /api/overdue_tickets
    method: GET
    data_selector: records
- name: create_kb_article
  endpoint:
    path: /api/Create KB article
    method: POST
    data_selector: article
- name: ticket
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: tickets
  endpoint:
    path: /tickets
    method: GET
    data_selector: records
notes:
- Every API action checks the user's permissions before executing the action.
- Token authentication is also supported, but requires user interaction.
- Many of the resource-intensive methods in the Help Desk API have rate-limits and
  throttle abusive clients.
- Most of the calls are limited to 90 times per minute, while Search and UserByEmail
  are limited to 60 times per minute.
- Uses OAuth2 with refresh token.
- Uses OAuth2 — requires setup of connected app in Jitbit
- This manual is for Jitbit Helpdesk version 10 and later
- If you made any changes to the source codes, your changes might be lost.
- Installing a web-application on a server can be a complicated task.
- The hosted version supports Active Directory logins via your on-premises, Windows-integrated
  authentication.
- Single sign-on via SAML is supported.
- Uses built-in mailboxes for SaaS version only
- Jitbit does not store personal data other than full name and email of helpdesk app
  users.
- Clients can store personal data in their tickets.
- Uses OAuth2 with refresh token — requires setup of connected app in Jitbit
- Some objects may return nulls in deeply nested fields
- Uses OAuth2 with refresh token — requires setup of connected app in api
- This release lays the groundwork required for us to bring you more productivity
  features like these in the future.
- If you upgrade your database manually refer to the manual to see what changes you
  need to make to the web.config.
- Requires OAuth2 authentication for API access
- This feature is compatible with both our hosted helpdesk and the downloadable version.
- You can integrate it with any SAML 2.0 compliant provider.
- Users can also submit a support ticket without logging in if this feature is enabled
  by the helpdesk administrator.
- The dashboard is designed to give support teams a real-time snapshot of their performance
  and ticketing metrics for the day.
- The log is read-only and provides a timestamp for each entry to help with tracking
  and auditing purposes.
- The log keeps the data for 500 days and is being purged regularly, to keep it from
  growing indefinitely.
- Helpdesk URL should be initialized from the first request to the app.
- JavaScript and CSS changes may lead to bugs and glitches.
- The incoming mail handler periodically checks given mailboxes every 1-5 minutes.
- If there's been 5 errors in a row connecting to the server, helpdesk might disable
  the email account temporarily.
- The helpdesk app has a built-in junk email filter that filters bounce-emails.
- New tickets should be moved to the 'in process' status before moving to a custom
  status.
- Custom statuses can be marked 'for technicians only'.
- The most important settings are the status name and the 'button name' (caption for
  the button in the interface, that will move a ticket to this status).
- Users can upload their own avatar images, if avatars are enabled in your Helpdesk.
- 'The incoming email module works like this: The helpdesk software periodically checks
  a given POP/IMAP account(s). When an email is detected - it adds a ticket to the
  helpdesk (or adds a comment to an existing ticket) and removes the message from
  the server (when using POP) or optionally marks it as ''seen'' AKA ''read'' (if
  using IMAP) - if you enable this setting.'
- Time based automation rules run ONLY ONCE for a given ticket.
- Exercise caution when creating and managing automation rules.
- The settings are optional, and removing them will revert to default values.
- An asset can be assigned to a company or a department, can be checked out to one
  or more users, and can also be involved with one or more tickets.
- Integration is seamless for SaaS users, no further action required after enabling.
- On-premise users need to enter their ChatGPT API key.
- Supports attaching files from Dropbox and Google Drive
- SaaS version is GDPR/HIPAA compliant
- The connection between Jitbit Helpdesk and Office 365 is made using modern authentication
  protocols.
- Uses SHA256 for hashing in autologin feature.
- Requires setup of connected app in Jitbit.
- Some objects may return null values.
- Your local IIS server does not have to be in the DMZ zone, or have access to the
  Internet, it works on the client-side and works right out of the box
- You just have to specify the 'shared secret' in the IIS script
- Requires setup of connected app in Jitbit API
- Uses OAuth2 with refresh token — requires setup of connected app in Jitbit Helpdesk
- We track uptime by sending TCP and HTTP requests to our infrastructure every minute.
- Requires setup of connected app in api
- Data is encrypted at all times. Backups are also encrypted.
- Only one IP address in the world has any kind of access to our servers - it is our
  secure VPN server.
- Data is kept for four months after account expiration.
- Integrating with Google via SAML lets your existing user accounts to be used to
  login to Jitbit Helpdesk.
- You can import emails from your existing company mailboxes directly via POP, IMAP
  or Exchange.
- Make sure to keep the 'FWD' (or 'FW') word in the subject line when forwarding emails.
- 'IMPORTANT: starting December 2023 you can download your backup from your Helpdesk
  admin panel, FTP access is not offered any more for security and compliance reasons.'
- Jitbit Hosted Helpdesk is compliant with the HIPAA security standards
- Information applies to the hosted version only
- Hosted help desk requires no training or technical skill to run
- Offers free upgrades and support
- Supports all major languages of commerce
- Help desk software for iPhone can be incredibly useful for companies that need to
  send their technicians out on the field or who have employees that telecommute.
- Some endpoints may require specific permissions to access
- Supports Active Directory user authentication
- All communications are secured by an SSL channel
- Support API Token authentication when importing from Zendesk
- New API methods to get rule by ID, enable and disable a rule
- ChatGPT integration. Opt-in in Admin - Integrations
- Some objects like Contact may return nulls in deeply nested fields
- Google's app verification process is thorough and can take some time.
- The warning is only temporary.
- Most features discussed in this article apply to the SaaS version only.
errors:
- '200 OK: all good'
- '404: something is not found'
- '400: your request has an error'
- '429: rate-limit exceeded'
- '429: Too many requests'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Check OAuth credentials'
- '404 Not Found: Endpoint does not exist'
- 'Unauthorized: Check your credentials.'
- 'Not Found: The requested resource does not exist.'
- '404: Not Found'
- '401 Unauthorized: Recheck API token validity'
- '404 Not Found: Check the endpoint path'
auth_info:
  mentioned_objects:
  - Active Directory
  - SAML
  - Authentication API
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Single Sign On
client:
  base_url: https://www.jitbit.com/api/
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://www.jitbit.com/oauth/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
