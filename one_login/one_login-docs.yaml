resources:
- name: roles
  endpoint:
    path: /api/1/roles
    method: GET
    data_selector: data
- name: apps
  endpoint:
    path: /api/2/apps
    method: POST
    data_selector: id
- name: mappings
  endpoint:
    path: /api/2/mappings
    method: POST
    data_selector: id
- name: users
  endpoint:
    path: /api/2/users
    method: POST
    data_selector: id
- name: hooks
  endpoint:
    path: /api/2/hooks
    method: POST
    data_selector: ''
    params: {}
- name: envs
  endpoint:
    path: /api/2/hooks/envs
    method: POST
    data_selector: ''
    params: {}
- name: Core User Schema
  endpoint:
    path: /schemas/core
    method: POST
    data_selector: schemas
    params: {}
- name: Enterprise User Schema
  endpoint:
    path: /schemas/enterprise
    method: POST
    data_selector: schemas
    params: {}
- name: register_client
  endpoint:
    path: /oidc/2/register
    method: POST
    data_selector: null
    params: {}
- name: signing_key
  endpoint:
    path: /oidc/2/signing_keys/:kid
    method: DELETE
- name: logout
  endpoint:
    path: /oidc/2/logout
    method: GET
    params: {}
- name: user_profile
  endpoint:
    path: https://api.amazon.com/user/profile
    method: GET
- name: token_introspection
  endpoint:
    path: /oidc/token/introspection
    method: POST
- name: session
  endpoint:
    path: /session_via_api_token
    method: POST
- name: auth_user
  endpoint:
    path: /api/1/login/auth
    method: POST
- name: hooks
  endpoint:
    path: /api/2/hooks
    method: POST
    data_selector: ''
    params: {}
- name: envs
  endpoint:
    path: /api/2/hooks/envs
    method: POST
    data_selector: ''
    params: {}
- name: UserTracker
  endpoint:
    path: /oidc
    method: GET
- name: otp_devices
  endpoint:
    path: /api/1/users/{userId}/otp_devices
    method: GET
    data_selector: data.otp_devices
- name: signing_keys
  endpoint:
    path: /oidc/2/signing_keys
    method: POST
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: body
- name: user_info
  endpoint:
    path: /oidc/me
    method: GET
- name: signing_keys
  endpoint:
    path: /oidc/2/signing_keys
    method: GET
    data_selector: '[]'
- name: saml_settings
  endpoint:
    path: /saml/settings
    method: GET
    data_selector: settings
- name: pets
  endpoint:
    path: /dev/pets
    method: GET
- name: user_info
  endpoint:
    path: /oidc/2/me
    method: GET
- name: roles
  endpoint:
    path: /roles
    method: GET
- name: risk_rules
  endpoint:
    path: /risk/rules
    method: POST
    data_selector: null
    params: {}
- name: saml_assertion
  endpoint:
    path: /saml_assertion
    method: POST
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: saml_properties
  endpoint:
    path: /src/main/resources/onelogin.saml.properties
    method: GET
    data_selector: parameters
    params: {}
- name: signing_key
  endpoint:
    path: /signing_keys/:kid
    method: GET
    data_selector: kid
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: oauth_callback
  endpoint:
    path: /oauth/callback
    method: GET
- name: logout
  endpoint:
    path: /logout
    method: GET
- name: token_introspection
  endpoint:
    path: /oidc/2/token/introspection
    method: POST
    data_selector: active
    params: {}
- name: mappings
  endpoint:
    path: /mappings
    method: POST
    data_selector: null
    params: {}
- name: user_roles
  endpoint:
    path: /api/user_roles
    method: GET
    data_selector: roles
- name: mappings
  endpoint:
    path: /mappings
    method: POST
- name: apps
  endpoint:
    path: /api/2/apps
    method: POST
- name: users
  endpoint:
    path: /api/2/users
    method: POST
- name: users
  endpoint:
    path: /api/2/users/
    method: PUT
    data_selector: custom_attributes
    params: {}
- name: apps
  endpoint:
    path: /api/2/apps/
    method: PUT
    data_selector: parameters
    params: {}
- name: demo1
  endpoint:
    path: /php-saml-master/demo1
    method: GET
    data_selector: null
    params: {}
- name: authorization_server
  endpoint:
    path: /api/2/api_authorizations
    method: POST
    data_selector: data
    params: {}
- name: claims
  endpoint:
    path: /api/2/api_authorizations/{authorization_id}/claims
    method: POST
    data_selector: data
    params: {}
- name: scopes
  endpoint:
    path: /api/2/api_authorizations/{authorization_id}/scopes
    method: POST
    data_selector: data
    params: {}
- name: clients
  endpoint:
    path: /api/2/api_authorizations/{authorization_id}/clients
    method: POST
    data_selector: data
    params: {}
- name: token
  endpoint:
    path: /oidc/2/token
    method: POST
    data_selector: data
    params: {}
- name: token_introspection
  endpoint:
    path: /oidc/2/token/introspection
    method: POST
    data_selector: data
    params: {}
- name: device_authorization
  endpoint:
    path: /oidc/2/device/auth
    method: POST
- name: authorization
  endpoint:
    path: /oidc/2/auth
    method: GET
- name: settings
  endpoint:
    path: /saml/settings.json
    method: GET
- name: get_user_by_username
  endpoint:
    path: /Users?filter=userName eq ""
    method: GET
    data_selector: Resources
    params: {}
- name: create_user
  endpoint:
    path: /Users
    method: POST
    data_selector: Resources
    params: {}
- name: update_user
  endpoint:
    path: /Users/{id}
    method: PUT
    data_selector: Resources
    params: {}
- name: delete_user
  endpoint:
    path: /Users/{id}
    method: DELETE
    data_selector: Resources
    params: {}
- name: get_users
  endpoint:
    path: /Users
    method: GET
    data_selector: Resources
    params: {}
- name: create_group
  endpoint:
    path: /Groups
    method: POST
    data_selector: Resources
    params: {}
- name: patch_group
  endpoint:
    path: /Groups/{id}
    method: PATCH
    data_selector: Resources
    params: {}
- name: get_groups
  endpoint:
    path: /Groups
    method: GET
    data_selector: Resources
    params: {}
- name: authorization
  endpoint:
    path: /oidc/2/auth
    method: GET
- name: token
  endpoint:
    path: /oidc/2/token
    method: POST
- name: user
  endpoint:
    path: /oidc/2/me
    method: GET
- name: List Apps
  endpoint:
    path: /list-apps
    method: GET
    data_selector: apps
    params: {}
- name: Get App
  endpoint:
    path: /get-app
    method: GET
    data_selector: app
    params: {}
- name: saml_assertion
  endpoint:
    path: /saml/signon/12345
    method: POST
    data_selector: samlResponse
    params:
      assertionConsumerServiceUrl: http://localhost/SamlConsumer/Consume.aspx
      issuer: Your Application Name
notes:
- The API requires setup of connected app in OneLogin
- Smart Hooks are defined and created via the OneLogin API.
- Javascript hook functions must be supplied as a base64 encoded string.
- This endpoint will be removed from service on April 20th 2021.
- It is an abbreviated version of the standard SCIM User Schema.
- You can add other attributes to the OneLogin Core and Enterprise User Schemas from
  the SCIM User Schema.
- This flow works fine with browsers like Chrome or Firefox. Other browsers, such
  as Safari, make it harder to get this flow working unless you have a custom domain
  set up with OneLogin.
- Important to choose a URI with a unique scheme for the callback.
- Uses OAuth2 with authorization code grant for authentication.
- The session is valid if 'active' attribute is true
- Smart Hooks must be written in Javascript and are executed using a stable version
  of Node.js.
- Current Node version is nodejs18.x
- The offline_access scope is not supported on this grant type and will return an
  error if provided.
- The Redirect URI for the Android app should not include https:// or http:// at the
  beginning.
- This API is in early preview and may be subject to change.
- Email & SMS security factors must be enabled in the MFA section of your default
  security policy.
- All API requests require an OAuth2.0 Bearer token in the Authorization header.
- A valid credential pair of client_id and client_secret is required to generate the
  token.
- 'assertion_consumer_service_url: http://localhost:3000/saml/consume'
- 'idp_cert_fingerprint: 90:cc:16:f0:8D:a6:D1:c6:BB:27:2D:ba:93:80:1A:1f:16:8e:4E:08'
- 'name_identifier_format: urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress'
- Lambda authorizers allow for the additional customization of authorization logic,
  beyond validation and inspection of tokens.
- Caching the policy can reduce API latency from the user perspective, as well as
  the total amount of Lambda invocations.
- OneLogin reserves the right to update and change these Terms of Service from time
  to time without notice.
- You will be responsible for maintaining the security of your equipment and account
  access passwords.
- Smart Factor Authentication must be enabled on OneLogin account.
- Smart MFA Supression must be enabled on at least one user policy.
- The most restrictive API in this flow requires a scope of Manage Users or Manage
  All for the API credentials you use to generate the token.
- All requests to authorize access to an API must go through an OpenId Connect application.
- Access token is valid for 10 hours.
- Use OneLogin’s open-source SAML toolkit for JAVA to enable single sign-on (SSO)
  for your app.
- For demo purposes, we’ll build one for the demo1 app.
- The Refresh Token and Access Token expiration settings now apply to all grant types.
- You must supply the offline_access scope if you wish to obtain a Refresh Token.
- The grant_type MUST be set to refresh_token
- This flow is less secure than the full auth code flow.
- Tokens are not saved anywhere in this demo.
- OneLogin participates in and has certified its compliance with both the EU-U.S.
  Privacy Shield Framework and the Swiss-US Privacy Shield Framework.
- Ensure that the Enable provisioning for option is selected.
- Review and approve provisioning tasks before actual provisioning can take place.
- User enumeration mitigation is implemented by ensuring uniform request timings.
- Rules will not be automatically applied when they modified via this API.
- Entitlements will not be automatically refreshed when an App is created.
- Uses OAuth2 with Authorization Code flow
- Token introspection requires client_id and client_secret
- Paste an AuthnRequest XML, a RelayState, the private key of the Service Provider
  and the X.509 public certificate of the Identity Provider in order to obtain 2 different
  versions of the Signature
- An AuthnRequest with the Signature embedded in the XML (HTTP-POST binding)
- The Signature related to the AuthnRequest. (HTTP-Redirect binding)
- Paths starting with /api require Bearer authentication, while paths starting with
  /auth require Basic.
- Ensure that the policy is correctly applied before you proceed.
- Ensure that the selected Default role grants access to relevant users.
- Device Code Flow enables OIDC on devices that have an internet connection but don’t
  have a browser or an easy way to enter text.
- Ensure that your x509cert value is a one-line string, with no line breaks.
- ACS (Consumer) URL Validator should be set to '.*' initially.
- Single sign-on (SSO) is not just about convenience, it’s also about security.
- Disallow username/password login
- Disallow password resets
- Disallow email address change
- Enforce session timeouts
- Force sign-in
- The content type header for all responses must be of type application/json
- Return 404 Not Found for all requests made for deleted users
- Add OIDC library to INSTALLED_APPS after django.contrib.auth
- Store client ID and secret as environment variables
- This API does not yet support provisioning settings.
- While it is possible to create Forms Based & WS-Fed apps, you may find issues with
  these app types.
- Uses PKCE authentication flow - requires setup of OIDC app in OneLogin
errors:
- 'unsupported_grant_type: unsupported grant_type requested (xxxx)'
- 'invalid_request: invalid authorization header value format'
- 'invalid_client: client authentication failed'
- 'invalid_request: missing required parameter(s). (nonce)'
- 'invalid_request: missing required parameter(s). (redirect_uri)'
- 'redirect_uri_mismatch: redirect_uri did not match any client''s registered redirect_uri'
- 'invalid_client: client is invalid'
- '400 Bad Request: invalid_request'
- '401 Unauthorized: invalid_request'
- 'invalid_redirect_uri: redirect_uris is mandatory property'
- 'UnauthorizedError: Unauthorized'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'invalid_request: missing required parameter(s). (token)'
- '401 Unauthorized: Recheck Bearer token or permissions'
- 'invalid_request: Authentication Failed'
- 'invalid_request: Access is unauthorized'
- '401 Unauthorized: Authentication pending on OL Protect'
- 'invalid_request: no bearer token provided'
- 'invalid_token: invalid token provided'
- '401 Unauthorized: Recheck access token value'
- '401 Unauthorized: Typically, this error means that your access token value is invalid.'
- Unauthorized access to the Service or your Account may result in termination.
- Downgrading your account may cause loss of content, features or capacity.
- '400 Bad Request: username is empty'
- '400 Bad Request: password is empty'
- '400 Bad Request: Input JSON is not valid'
- '400 Bad Request: Id is incorrect. It should be a positive integer'
- '401 Unauthorized: Invalid subdomain'
- '401 Unauthorized: Authentication Failed: Invalid user credentials'
- '401 Unauthorized: Authentication Failed'
- '401 Unauthorized: User is locked. Access is unauthorized'
- '401 Unauthorized: Insufficient Permission'
- 'invalid_request: Resource not found'
- 'invalid_request: User is locked. Access is unauthorized'
- 'invalid_request: User is suspended. Access is unauthorized'
- '400 Bad Request: grant_type is incorrect/absent'
- '400 Bad Request: Content Type is not specified or specified incorrectly.'
- '401 Unauthorized: Authentication Failure'
- '404 Not Found: No Route Exists'
- 'invalid_request: Authentication Failed: Invalid user credentials'
- 'invalid_request: MFA is required for this user'
- 'invalid_request: Password expired'
- '401 Unauthorized: Your access token value is invalid.'
- 'Unauthorized: Scope not allowed for the requested app'
- 400 Bad Request
- 401 Unauthorized
- 'unsupported_token_type: revocation of the presented token type is not supported'
- 'invalid_grant: grant request is invalid'
- '401 Unauthorized: Missing or invalid token'
- '400 Bad Request: name_already_exists'
- '204 No Content: Successful request'
- '404 Not Found: User not found'
auth_info:
  mentioned_objects:
  - Access Token
  - ID Token
  - Client ID
  - Client Secret
  - access_token
  - refresh_token
  - client_id
  - client_secret
  - OIDCAuthenticationBackend
client:
  base_url: https://app.onelogin.com
  auth:
    type: oauth2
    flow: PKCE
    token_url: https://<subdomain>.onelogin-shadow01.com/oidc/2/token
    client_id: <client id>
    client_secret: <client_secret>
    location: header
    header_name: Authorization
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    scope: openid profile groups
    grant_type: password
    redirect_uri: <redirect uri>
    response_type: id_token token
  headers:
    Content-Type: application/json
    content-type: application/json
    Authorization: bearer <access_token>
    Accept: application/json
  paginator:
    default_page_size: 10
    type: page
    page_size_param: itemsPerPage
source_metadata: null
