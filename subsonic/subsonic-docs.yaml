resources:
- name: ping
  endpoint:
    path: /rest/ping
    method: GET
- name: getLicense
  endpoint:
    path: /rest/getLicense
    method: GET
- name: getMusicFolders
  endpoint:
    path: /rest/getMusicFolders
    method: GET
- name: getIndexes
  endpoint:
    path: /rest/getIndexes
    method: GET
- name: getMusicDirectory
  endpoint:
    path: /rest/getMusicDirectory
    method: GET
- name: getGenres
  endpoint:
    path: /rest/getGenres
    method: GET
- name: getArtists
  endpoint:
    path: /rest/getArtists
    method: GET
- name: getArtist
  endpoint:
    path: /rest/getArtist
    method: GET
- name: getAlbum
  endpoint:
    path: /rest/getAlbum
    method: GET
- name: getSong
  endpoint:
    path: /rest/getSong
    method: GET
- name: getVideos
  endpoint:
    path: /rest/getVideos
    method: GET
- name: getVideoInfo
  endpoint:
    path: /rest/getVideoInfo
    method: GET
- name: getArtistInfo
  endpoint:
    path: /rest/getArtistInfo
    method: GET
- name: getArtistInfo2
  endpoint:
    path: /rest/getArtistInfo2
    method: GET
- name: getAlbumInfo
  endpoint:
    path: /rest/getAlbumInfo
    method: GET
- name: getAlbumInfo2
  endpoint:
    path: /rest/getAlbumInfo2
    method: GET
- name: getSimilarSongs
  endpoint:
    path: /rest/getSimilarSongs
    method: GET
- name: getSimilarSongs2
  endpoint:
    path: /rest/getSimilarSongs2
    method: GET
- name: getTopSongs
  endpoint:
    path: /rest/getTopSongs
    method: GET
- name: getAlbumList
  endpoint:
    path: /getAlbumList
    method: GET
    data_selector: albumList
    params:
      type: random
      size: 10
      offset: 0
- name: getAlbumList2
  endpoint:
    path: /getAlbumList2
    method: GET
    data_selector: albumList2
    params:
      type: random
      size: 10
      offset: 0
- name: getRandomSongs
  endpoint:
    path: /getRandomSongs
    method: GET
    data_selector: randomSongs
    params:
      size: 10
- name: getSongsByGenre
  endpoint:
    path: /getSongsByGenre
    method: GET
    data_selector: songsByGenre
    params:
      genre: ''
      count: 10
      offset: 0
- name: getNowPlaying
  endpoint:
    path: /getNowPlaying
    method: GET
    data_selector: nowPlaying
    params: {}
- name: getStarred
  endpoint:
    path: /getStarred
    method: GET
    data_selector: starred
    params: {}
- name: getStarred2
  endpoint:
    path: /getStarred2
    method: GET
    data_selector: starred2
    params: {}
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: searchResult
    params:
      count: 20
      offset: 0
- name: search2
  endpoint:
    path: /search2
    method: GET
    data_selector: searchResult2
    params:
      artistCount: 20
      artistOffset: 0
      albumCount: 20
      albumOffset: 0
      songCount: 20
      songOffset: 0
- name: getPlaylists
  endpoint:
    path: /getPlaylists
    method: GET
    data_selector: playlists
    params: {}
- name: getPlaylist
  endpoint:
    path: /getPlaylist
    method: GET
    data_selector: playlist
    params:
      id: ''
- name: createPlaylist
  endpoint:
    path: /createPlaylist
    method: POST
    data_selector: subsonic-response
    params:
      name: ''
      songId: ''
- name: updatePlaylist
  endpoint:
    path: /updatePlaylist
    method: POST
    data_selector: subsonic-response
    params:
      playlistId: ''
      name: ''
      comment: ''
      public: ''
      songIdToAdd: ''
      songIndexToRemove: ''
- name: deletePlaylist
  endpoint:
    path: /deletePlaylist
    method: POST
    data_selector: subsonic-response
    params:
      id: ''
- name: stream
  endpoint:
    path: /stream
    method: GET
    data_selector: binary data
    params:
      id: ''
- name: download
  endpoint:
    path: /download
    method: GET
    data_selector: binary data
    params:
      id: ''
- name: hls
  endpoint:
    path: /hls.m3u8
    method: GET
    data_selector: application/vnd.apple.mpegurl
    params:
      id: ''
- name: getCaptions
  endpoint:
    path: /getCaptions
    method: GET
    data_selector: captions
    params:
      id: ''
- name: getCoverArt
  endpoint:
    path: /getCoverArt
    method: GET
    data_selector: cover art
    params:
      id: ''
- name: getLyrics
  endpoint:
    path: /getLyrics
    method: GET
    data_selector: lyrics
    params: {}
- name: getAvatar
  endpoint:
    path: /getAvatar
    method: GET
    data_selector: avatar
    params:
      username: ''
- name: star
  endpoint:
    path: /star
    method: POST
    data_selector: subsonic-response
    params:
      id: ''
      albumId: ''
      artistId: ''
- name: unstar
  endpoint:
    path: /unstar
    method: POST
    data_selector: subsonic-response
    params:
      id: ''
      albumId: ''
      artistId: ''
- name: setRating
  endpoint:
    path: /setRating
    method: POST
    data_selector: subsonic-response
    params:
      id: ''
      rating: ''
- name: scrobble
  endpoint:
    path: /scrobble
    method: POST
- name: getShares
  endpoint:
    path: /getShares
    method: GET
- name: createShare
  endpoint:
    path: /createShare
    method: POST
- name: updateShare
  endpoint:
    path: /updateShare
    method: POST
- name: deleteShare
  endpoint:
    path: /deleteShare
    method: POST
- name: getPodcasts
  endpoint:
    path: /getPodcasts
    method: GET
- name: getNewestPodcasts
  endpoint:
    path: /getNewestPodcasts
    method: GET
- name: refreshPodcasts
  endpoint:
    path: /refreshPodcasts
    method: POST
- name: createPodcastChannel
  endpoint:
    path: /createPodcastChannel
    method: POST
- name: deletePodcastChannel
  endpoint:
    path: /deletePodcastChannel
    method: POST
- name: deletePodcastEpisode
  endpoint:
    path: /deletePodcastEpisode
    method: POST
- name: downloadPodcastEpisode
  endpoint:
    path: /downloadPodcastEpisode
    method: POST
- name: jukeboxControl
  endpoint:
    path: /jukeboxControl
    method: POST
- name: getInternetRadioStations
  endpoint:
    path: /getInternetRadioStations
    method: GET
- name: createInternetRadioStation
  endpoint:
    path: /createInternetRadioStation
    method: POST
- name: updateInternetRadioStation
  endpoint:
    path: /updateInternetRadioStation
    method: POST
- name: deleteInternetRadioStation
  endpoint:
    path: /deleteInternetRadioStation
    method: POST
- name: getChatMessages
  endpoint:
    path: /getChatMessages
    method: GET
- name: addChatMessage
  endpoint:
    path: /addChatMessage
    method: POST
- name: getUser
  endpoint:
    path: /getUser
    method: GET
- name: getUsers
  endpoint:
    path: /getUsers
    method: GET
- name: createUser
  endpoint:
    path: /createUser
    method: POST
- name: updateUser
  endpoint:
    path: /updateUser
    method: POST
- name: deleteUser
  endpoint:
    path: /deleteUser
    method: POST
- name: changePassword
  endpoint:
    path: /changePassword
    method: POST
- name: getBookmarks
  endpoint:
    path: /getBookmarks
    method: GET
- name: createBookmark
  endpoint:
    path: /createBookmark
    method: POST
- name: deleteBookmark
  endpoint:
    path: /deleteBookmark
    method: POST
- name: getPlayQueue
  endpoint:
    path: /getPlayQueue
    method: GET
- name: savePlayQueue
  endpoint:
    path: /savePlayQueue
    method: POST
- name: getScanStatus
  endpoint:
    path: /getScanStatus
    method: GET
- name: startScan
  endpoint:
    path: /rest/startScan
    method: GET
    data_selector: scanStatus
    params: {}
- name: getAlbumList
  endpoint:
    path: /getAlbumList
    method: GET
    data_selector: albumList
    params:
      type: random
      size: 10
      offset: 0
- name: getNowPlaying
  endpoint:
    path: /getNowPlaying
    method: GET
    data_selector: nowPlaying
- name: getStarred
  endpoint:
    path: /getStarred
    method: GET
    data_selector: starred
    params: {}
- name: search2
  endpoint:
    path: /search2
    method: GET
    data_selector: searchResult2
    params:
      query: ''
      artistCount: 20
      artistOffset: 0
      albumCount: 20
      albumOffset: 0
      songCount: 20
      songOffset: 0
- name: playlist
  endpoint:
    path: /rest/getPlaylists
    method: GET
    data_selector: playlists
- name: song
  endpoint:
    path: /rest/getSongs
    method: GET
    data_selector: songs
- name: scrobble
  endpoint:
    path: /scrobble
    method: POST
    data_selector: subsonic-response
- name: getShares
  endpoint:
    path: /getShares
    method: GET
    data_selector: shares
- name: createShare
  endpoint:
    path: /createShare
    method: POST
    data_selector: shares
- name: updateShare
  endpoint:
    path: /updateShare
    method: POST
    data_selector: subsonic-response
- name: deleteShare
  endpoint:
    path: /deleteShare
    method: POST
    data_selector: subsonic-response
- name: getPodcasts
  endpoint:
    path: /getPodcasts
    method: GET
    data_selector: podcasts
- name: getNewestPodcasts
  endpoint:
    path: /getNewestPodcasts
    method: GET
    data_selector: newestPodcasts
- name: refreshPodcasts
  endpoint:
    path: /refreshPodcasts
    method: POST
    data_selector: subsonic-response
- name: createPodcastChannel
  endpoint:
    path: /createPodcastChannel
    method: POST
    data_selector: subsonic-response
- name: deletePodcastChannel
  endpoint:
    path: /deletePodcastChannel
    method: POST
    data_selector: subsonic-response
- name: deletePodcastEpisode
  endpoint:
    path: /deletePodcastEpisode
    method: POST
    data_selector: subsonic-response
- name: downloadPodcastEpisode
  endpoint:
    path: /downloadPodcastEpisode
    method: POST
    data_selector: subsonic-response
- name: jukeboxControl
  endpoint:
    path: /jukeboxControl
    method: POST
    data_selector: jukeboxStatus
- name: getInternetRadioStations
  endpoint:
    path: /getInternetRadioStations
    method: GET
    data_selector: internetRadioStations
- name: createInternetRadioStation
  endpoint:
    path: /createInternetRadioStation
    method: POST
    data_selector: subsonic-response
- name: updateInternetRadioStation
  endpoint:
    path: /updateInternetRadioStation
    method: POST
    data_selector: subsonic-response
- name: deleteInternetRadioStation
  endpoint:
    path: /deleteInternetRadioStation
    method: POST
    data_selector: subsonic-response
- name: getChatMessages
  endpoint:
    path: /getChatMessages
    method: GET
    data_selector: chatMessages
- name: addChatMessage
  endpoint:
    path: /addChatMessage
    method: POST
    data_selector: subsonic-response
- name: getUser
  endpoint:
    path: /getUser
    method: GET
    data_selector: user
- name: getUsers
  endpoint:
    path: /getUsers
    method: GET
    data_selector: users
- name: createUser
  endpoint:
    path: /createUser
    method: POST
    data_selector: subsonic-response
- name: updateUser
  endpoint:
    path: /updateUser
    method: POST
    data_selector: subsonic-response
- name: deleteUser
  endpoint:
    path: /deleteUser
    method: POST
    data_selector: subsonic-response
- name: changePassword
  endpoint:
    path: /changePassword
    method: POST
    data_selector: subsonic-response
- name: getBookmarks
  endpoint:
    path: /getBookmarks
    method: GET
    data_selector: bookmarks
- name: createBookmark
  endpoint:
    path: /createBookmark
    method: POST
    data_selector: subsonic-response
- name: deleteBookmark
  endpoint:
    path: /deleteBookmark
    method: POST
    data_selector: subsonic-response
- name: getPlayQueue
  endpoint:
    path: /getPlayQueue
    method: GET
    data_selector: playQueue
- name: savePlayQueue
  endpoint:
    path: /savePlayQueue
    method: POST
    data_selector: subsonic-response
- name: getScanStatus
  endpoint:
    path: /getScanStatus
    method: GET
    data_selector: scanStatus
- name: startScan
  endpoint:
    path: /startScan
    method: GET
    data_selector: scanStatus
    params: {}
- name: Subsonic Apps
  endpoint:
    path: /api/apps
    method: GET
    data_selector: apps
- name: Subsonic Features
  endpoint:
    path: /api/features
    method: GET
    data_selector: features
notes:
- Subsonic 5.2 and later has built-in Sonos support, and doesn't require this service.
- Subsonic uses a self-signed https certificate by default. This provides encryption
  but not proper authentication.
- Users must log in with a username and password. Users are assigned different privileges.
- Supports authentication in LDAP and Active Directory.
- By default, Subsonic uses an in-process HSQLDB database which requires no setup
  or maintenance.
- There is no automatic data migration from HSQLDB to MySQL/PostgreSQL/MariaDB.
- Most apps are made by third-party developers, and are not maintained by the Subsonic
  project.
- Subsonic is not affiliated with Sonos, Inc.
- Some objects like Contact may return nulls in deeply nested fields
- Uses OAuth2 with refresh token — requires setup of connected app in api
- 'Migration: Please note that there is no automatic data migration from HSQLDB to
  MySQL/PostgreSQL/MariaDB.'
errors:
- '0: A generic error.'
- '10: Required parameter is missing.'
- '20: Incompatible Subsonic REST protocol version. Client must upgrade.'
- '30: Incompatible Subsonic REST protocol version. Server must upgrade.'
- '40: Wrong username or password.'
- '41: Token authentication not supported for LDAP users.'
- '50: User is not authorized for the given operation.'
- '60: The trial period for the Subsonic server is over. Please upgrade to Subsonic
  Premium. Visit subsonic.org for details.'
- '70: The requested data was not found.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
client:
  base_url: http://localhost:4040
source_metadata: null
