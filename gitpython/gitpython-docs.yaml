resources:
- name: tag
  endpoint:
    path: /git/objects/tag
    method: GET
    data_selector: records
    params: {}
- name: tree
  endpoint:
    path: /git/objects/tree
    method: GET
    data_selector: records
    params: {}
- name: submodule
  endpoint:
    path: /git/objects/submodule/base/Submodule
    method: GET
    data_selector: records
- name: SymbolicReference
  endpoint:
    path: /git/refs/symbolic
    method: GET
    data_selector: records
    params: {}
- name: PushInfo
  endpoint:
    path: /git/remote/PushInfo
    method: GET
    data_selector: PushInfo
    params: {}
- name: Remote
  endpoint:
    path: /git/remote/Remote
    method: GET
    data_selector: Remote
    params: {}
- name: remote
  endpoint:
    path: /remote
    method: GET
- name: repository
  endpoint:
    path: /repo
    method: GET
    data_selector: repository_data
- name: commit
  endpoint:
    path: /commit
    method: GET
- name: common_dir
  endpoint:
    path: /common_dir
    method: GET
- name: config_level
  endpoint:
    path: /config_level
    method: GET
- name: git_dir
  endpoint:
    path: /git_dir
    method: GET
- name: Total_TD
  endpoint:
    path: /git/types/Total_TD
    method: GET
    data_selector: __dict__
    params: {}
- name: Tree_ish
  endpoint:
    path: /git/types/Tree_ish
    method: GET
    data_selector: __dict__
    params: {}
- name: Repo
  endpoint:
    path: /repo
    method: GET
    data_selector: repo_data
notes:
- Timezone information is in the same format and in the same sign as what time.altzone()
  returns. The sign is inverted compared to git’s UTC timezone.
- The ordering of the returned items will be partially lost.
- The submodule type does not have a string type associated with it, as it exists
  solely as a marker in the tree and index.
- Set the `GIT_PYTHON_TRACE` environment variable to print each invocation of the
  command to stdout.
- Set its value to `full` to see details about the returned values.
- When querying configuration, the configuration accessor will be cached to speed
  up subsequent accesses.
- Handles git repositories and allows querying, creating commits, generating diffs,
  and cloning.
- Ignored files will not appear here, i.e. files mentioned in .gitignore.
- This property is expensive, as no cache is involved. To process the result, please
  consider caching it yourself.
- Dictionary with total stats from any number of files.
- GitPython is not suited for long-running processes (like daemons) as it tends to
  leak system resources.
- Uses GitDB for memory efficiency when handling huge files
- GitCmdObjectDB operates fast but consumes more memory
errors:
- 'git.exc.GitCommandError: If the return status is not 0.'
- 'AmbiguousObjectName: Thrown if a possibly shortened name does not uniquely represent
  a single object in the database'
- 'BadName: A name provided to rev_parse wasn’t understood'
- 'BadObject: The object with the given SHA does not exist. Instantiate with the failed
  sha'
- 'BadObjectType: The object had an unsupported type'
- 'CacheError: Base for all errors related to the git index, which is called “cache”
  internally'
- 'CheckoutError: Thrown if a file could not be checked out from the index as it contained
  changes'
- 'CommandError: Base class for exceptions thrown at every stage of Popen execution'
- 'GitCommandError: Thrown if execution of the git command fails with non-zero status
  code'
- 'GitCommandNotFound: Thrown if we cannot find the `git` executable in the `PATH`
  or at the path given by the `GIT_PYTHON_GIT_EXECUTABLE` environment variable'
- 'GitError: Base class for all package exceptions'
- 'HookExecutionError: Thrown if a hook exits with a non-zero exit code'
- 'InvalidDBRoot: Thrown if an object database cannot be initialized at the given
  path'
- 'InvalidGitRepositoryError: Thrown if the given repository appears to have an invalid
  format'
- 'NoSuchPathError: Thrown if a path could not be accessed by the system'
- 'ODBError: All errors thrown by the object database'
- 'ParseError: Thrown if the parsing of a file failed due to an invalid format'
- 'RepositoryDirtyError: Thrown whenever an operation on a repository fails as it
  has uncommitted changes that would be overwritten'
- 'UnmergedEntriesError: Thrown if an operation cannot proceed as there are still
  unmerged entries in the cache'
- 'UnsafeOptionError: Thrown if unsafe options are passed without being explicitly
  allowed'
- 'UnsafeProtocolError: Thrown if unsafe protocols are passed without being explicitly
  allowed'
- 'UnsupportedOperation: Thrown if the given operation cannot be supported by the
  object database'
- 'WorkTreeRepositoryUnsupported: Thrown to indicate we can’t handle work tree repositories'
auth_info:
  mentioned_objects: []
client:
  base_url: git
  headers:
    Accept: application/json
source_metadata: null
