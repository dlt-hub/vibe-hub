resources:
- name: test_results
  endpoint:
    path: /api/test_results
    method: GET
    data_selector: results
- name: dashboard
  endpoint:
    path: /dashboard
    method: GET
- name: cypress-cloud
  endpoint:
    path: /cypress-cloud
    method: POST
    data_selector: data
- name: director
  endpoint:
    path: /
    method: GET
- name: dashboard
  endpoint:
    path: /
    method: GET
- name: api
  endpoint:
    path: /
    method: GET
- name: s3_bucket
  endpoint:
    path: /
    method: GET
- name: director
  endpoint:
    path: /services/data/vXX.X/sobjects/Director
    method: GET
    data_selector: records
    params: {}
- name: dashboard
  endpoint:
    path: /services/data/vXX.X/sobjects/Dashboard
    method: GET
    data_selector: records
    params: {}
- name: VPC
  endpoint:
    path: /vpcs
    method: GET
    data_selector: resources
    params:
      cidr_range: 10.0.0.0/16
- name: Public Subnets
  endpoint:
    path: /subnets
    method: GET
    data_selector: resources
    params:
      cidr_ranges:
      - 10.0.0.0/24
      - 10.0.1.0/24
- name: Private Subnets
  endpoint:
    path: /subnets
    method: GET
    data_selector: resources
    params:
      cidr_ranges:
      - 10.0.2.0/24
      - 10.0.3.0/24
- name: Internet Gateway
  endpoint:
    path: /internet-gateways
    method: GET
    data_selector: resources
- name: NAT Gateway
  endpoint:
    path: /nat-gateways
    method: GET
    data_selector: resources
- name: Route Tables
  endpoint:
    path: /route-tables
    method: GET
    data_selector: resources
- name: director
  endpoint:
    path: /services/director
    method: POST
- name: api
  endpoint:
    path: /services/api
    method: GET
- name: dashboard
  endpoint:
    path: /services/dashboard
    method: GET
- name: minio
  endpoint:
    path: /
    method: GET
- name: minio_bucket
  endpoint:
    path: /gcs/<bucket_name>
    method: POST
    data_selector: bucket
    params: {}
- name: director
  endpoint:
    path: /director
    method: POST
- name: api
  endpoint:
    path: /api
    method: POST
- name: dashboard
  endpoint:
    path: /dashboard
    method: POST
- name: director
  endpoint:
    path: /services/data/vXX.X/sobjects/Director
    method: GET
    data_selector: records
    params: {}
- name: api
  endpoint:
    path: /services/data/vXX.X/sobjects/Api
    method: GET
    data_selector: records
    params: {}
- name: dashboard
  endpoint:
    path: /services/data/vXX.X/sobjects/Dashboard
    method: GET
    data_selector: records
    params: {}
- name: docker_images
  endpoint:
    path: https://hub.docker.com/repository/docker/agoldis/sorry-cypress-director
    method: GET
- name: docker_images
  endpoint:
    path: https://hub.docker.com/repository/docker/agoldis/sorry-cypress-api
    method: GET
- name: docker_images
  endpoint:
    path: https://hub.docker.com/repository/docker/agoldis/sorry-cypress-dashboard
    method: GET
- name: director_service
  endpoint:
    path: /director
    method: GET
    data_selector: results
    params: {}
- name: api_service
  endpoint:
    path: /api
    method: GET
    data_selector: data
    params: {}
- name: web_dashboard_service
  endpoint:
    path: /dashboard
    method: GET
    data_selector: dashboardData
    params: {}
- name: service_account
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      serviceAccountName: ''
- name: s3_bucket
  endpoint:
    path: /sorry-cypress
    method: PUT
    data_selector: objectKey
    params: {}
- name: S3 Bucket
  endpoint:
    path: /sorry-cypress
    method: GET
- name: screenshots
  endpoint:
    path: /screenshots/azure-blob-storage.driver
    method: GET
    data_selector: screenshots
    params: {}
- name: screenshot
  endpoint:
    path: /screenshots
    method: POST
    data_selector: results
    params: {}
- name: video
  endpoint:
    path: /videos
    method: POST
    data_selector: results
    params: {}
- name: AWS S3
  endpoint:
    path: /configuration/director-configuration/aws-s3-configuration
    method: GET
    data_selector: details
    params: {}
- name: events
  endpoint:
    path: /integrations/events
    method: POST
- name: hooks
  endpoint:
    path: /hooks
    method: POST
    data_selector: hooks
    params: {}
- name: hooks
  endpoint:
    path: /hooks
    method: POST
    data_selector: hooks
    params: {}
- name: hooks
  endpoint:
    path: /hooks
    method: POST
    data_selector: ''
    params: {}
- name: hooks
  endpoint:
    path: /hooks
    method: POST
    data_selector: hooks
    params:
      projectId: test
- name: hooks
  endpoint:
    path: /hooks
    method: POST
    data_selector: hooks
    params: {}
- name: hooks
  endpoint:
    path: /hooks
    method: POST
    data_selector: ''
    params: {}
- name: hooks
  endpoint:
    path: /hooks
    method: POST
    data_selector: hooks
- name: hooks
  endpoint:
    path: /hooks
    method: POST
    data_selector: ''
    params: {}
- name: hooks
  endpoint:
    path: /hooks
    method: POST
    data_selector: ''
    params: {}
- name: test_details
  endpoint:
    path: /concepts/test-details
    method: GET
- name: test_details
  endpoint:
    path: /concepts/test-details
    method: GET
    data_selector: test details
    params: {}
- name: test_status
  endpoint:
    path: /concepts/test-status
    method: GET
    data_selector: test_statuses
- name: test_status
  endpoint:
    path: /test-status
    method: GET
    data_selector: statuses
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: cypress-cloud
  endpoint:
    path: /run
    method: POST
    data_selector: records
- name: minio
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: mongo
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: cypress-cloud
  endpoint:
    path: /cypress-cloud
    method: POST
    data_selector: results
    params: {}
notes:
- Uses MongoDB to store test runs and results
- minio service is used for storing files like videos and screenshots
- The stack creates AWS Application Load Balancer to provide access to the underlying
  services.
- Director service is available via the same URL but different port.
- Advanced deployment uses ECS to run sorry-cypress services and has many parameters
  for customization.
- This is not required to run sorry-cypress but is provided as a convenience when
  deploying the advanced template.
- Any pre-existing VPC with at least 1 subnet and routing to the Internet can be used.
- Create a new S3 bucket, enable public access (uncheck `Block all public access`)
- Set bucket's CORS configuration to allow all origins and methods
- Create new user in IAM dashboard, enable programmatic access, and keep the access
  key and secret
- Make sure that service account has the Storage Object Creator Role.
- Google Cloud Storage Signed URLs have a max expiration time of 7 days.
- Uses MinIO GCS Gateway to access Google Cloud Storage with AWS S3-compatible APIs.
- The MinIO Gateway is deprecated since February 2022.
- MinIO GCS Gateway allows to access Google Cloud Storage (GCS) with AWS S3-compatible
  APIs.
- The service account is granted admin access to all GC storage objects.
- Uses MongoDB as a persistence layer for storing and retrieving test results.
- Publicly available docker images for services.
- Publicly available docker images of 3 services that compose sorry-cypress kit are
  available on Dockerhub in ARM and AMD architectures.
- cypress-cloud is the preferred way to use Currents, it is compatible with cypress
  10.0.0+
- cy2 is a legacy integration, it is incompatible with cypress 12.6.0+
- cy2 is deprecated.
- 'Running `cy2` in an interactive shell can fail with `EPERM: operation not permitted`
  unless you need to explicitly allow the shell app to modify other applications.'
- Cypress 11 and 12+ deprecated agent configuration files. Please make sure to use
  the latest version of cy2 package.
- This setup might be useful for simple workflows when you do need parallelization
  but don't need the overhead of maintaining and paying for the infrastructure required
  to keep and browse tests results.
- To achieve parallelization for the same CI run, make sure that all CI machine are
  using the same sorry-cypress-director service and use the same --ci-build-id flag.
- Full setup requires the director to run in 'persisting' mode to use MongoDB driver
  and provide credentials.
- Full setup requires the director to run in "persisting" mode to use MongoDB driver
  and provide credentials.
- Director will listen on that port
- Run URL shown by Cypress agent when running tests
- Director uses the timeout value to define how long we should wait before checking
  for a runâ€™s inactivity
- Service's base path, useful for reverse proxies
- A service account that is annotated with a trust relationship should be used.
- The service account should be linked to an IAM role.
- AWS S3 ACL for putObject operation is public-read
- The expiration time for signed upload URLs is 90 seconds
- AWS Access Key and Secret are required for authentication.
- Upload expiry seconds for signed URLs is set to 90.
- Minio is an awesome tool that allows using local storage (or any other supported
  provider) instead of AWS S3.
- Make sure that the bucket is created and configured properly before using it.
- Uses signed URLs for both writing and reading operations.
- Minio Access Key and Secret should be treated as AWS credentials.
- Ensure bucket is created and configured before use.
- API service port is set to 1234
- Default number of items to serve for runs feed is 10
- Apollo playground landing page is disabled
- Implementation of Azure Blob Storage uses signed URLs for both writing and reading
  operations.
- Signed URLs used for writing will expire after the time set using AZURE_UPLOAD_URL_EXPIRY_IN_HOURS
  (defaults to a day).
- Signed URLs used for reading will expire after a year, which is the maximum duration.
- Apollo playground is disabled
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Dashboard will listen on that port
- MongoDB connection URL, required if using 'mongo' execution driver.
- MongoDB database name, required if using 'mongo' execution driver.
- To use a private S3 bucket, create a bucket with a public-read ACL and specific
  public access block settings.
- Please make sure Sorry Cypress services are up and running
- Ensure you're reconfiguring cypress to use Director's service URL.
- Ensure your 'projectId' matches that in your cypress.json or cypress.config.js that
  you wish to add hooks to.
- Bitbucket app password should have at least 'Repositories:write' permissions
- When using sorry-cypress you'll need to override the default configuration to set
  an alternative URL for contacting the remote dashboard.
- Flaky tests are automatically activated for all cypress tests with retries enabled.
- An environment variable is used to get the CI Run URL. It needs to be set before
  the Cypress tests start running in the CI configuration file.
- 'A cypress test can be in one of the following states: Passed, Failed, Ignored /
  Pending, Skipped, Flaky.'
- Prevent crash on GitHub http failure.
- Some objects like Contact may return nulls in deeply nested fields
- This basic director configuration keeps all the test results in memory. Restarting
  it wipes all the data.
- Add Azure Blob Storage support by @Hackatosh
- Make sure that associated services are available on the localhost - e.g. mongo,
  minio
errors:
- N/A
- 'GITLAB_JOB_RETRIES=false: Enables/disables the ability to retry tests by rerunning
  CI jobs on GitLab.'
- 'Invalid Access Key: Check your AWS_ACCESS_KEY_ID'
- 'Invalid Secret Key: Check your AWS_SECRET_ACCESS_KEY'
- Director should be able to access minio service within your network configuration
  using MINIO_ENDPOINT and MINIO_PORT
- Cypress agent should be able to access the signed upload URL that was generated
  earlier
- Network misconfiguration may prevent director from accessing minio.
- Signed URL generation will fail if director cannot reach minio.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
auth_info:
  mentioned_objects: []
client:
  base_url: http://localhost:1234
source_metadata: null
