resources:
- name: site_to_site_connectivity
  endpoint:
    path: /use-cases/site-to-site-connectivity
    method: GET
- name: api_gateway
  endpoint:
    path: /use-cases/api-gateway
    method: GET
- name: device_gateway
  endpoint:
    path: /use-cases/device-gateway
    method: GET
- name: kubernetes_operator
  endpoint:
    path: /use-cases/kubernetes-operator
    method: GET
- name: global_load_balancer
  endpoint:
    path: /use-cases/global-load-balancer
    method: GET
- name: identity_aware_proxy
  endpoint:
    path: /use-cases/identity-aware-proxy
    method: GET
- name: webhook_testing
  endpoint:
    path: /use-cases/webhook-testing
    method: GET
- name: developer_preview
  endpoint:
    path: /use-cases/developer-preview
    method: GET
- name: tunnel
  endpoint:
    path: /tunnels
    method: GET
    data_selector: tunnels
    params: {}
- name: tunnel
  endpoint:
    path: /tunnels
    method: GET
    data_selector: tunnels
    params: {}
- name: cli-quickstart
  endpoint:
    path: /
    method: POST
    data_selector: endpoints
    params: {}
- name: plans_pricing
  endpoint:
    path: /pricing
    method: GET
    data_selector: plans
- name: cli-quickstart
  endpoint:
    path: /
    method: GET
    data_selector: endpoints
    params: {}
- name: plans
  endpoint:
    path: /pricing
    method: GET
    data_selector: plans
    params: {}
- name: IP Restrictions
  endpoint:
    path: /dashboard/security/ip-restrictions
    method: GET
- name: ngrok agent API
  endpoint:
    path: /agent/api
    method: GET
- name: tunnels
  endpoint:
    path: /tunnels
    method: GET
    data_selector: tunnels
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: TPU Pricing
  endpoint:
    path: /pricing-limits/traffic-policy-unit-pricing
    method: GET
    data_selector: pricing
    params: {}
- name: http_endpoint
  endpoint:
    path: /http
    method: POST
    data_selector: endpoints
- name: tcp_endpoint
  endpoint:
    path: /tcp
    method: POST
    data_selector: endpoints
- name: tls_endpoint
  endpoint:
    path: /tls
    method: POST
    data_selector: endpoints
- name: IP Restrictions
  endpoint:
    path: /security/ip-restrictions
    method: GET
- name: ngrok Agent API
  endpoint:
    path: /api
    method: GET
- name: Traffic Policy Actions
  endpoint:
    path: /traffic-policy/actions
    method: GET
- name: IP Restrictions
  endpoint:
    path: /api/resources/ip-restrictions
    method: GET
- name: ngrok agent API
  endpoint:
    path: /agent/api
    method: GET
- name: user_sessions
  endpoint:
    path: /app/users
    method: GET
- name: session_details
  endpoint:
    path: /app/users/{session-id}
    method: GET
- name: revoke_session
  endpoint:
    path: /app/users/{session-id}
    method: DELETE
- name: endpoint_pooling
  endpoint:
    path: /universal-gateway/endpoint-pooling
    method: GET
    data_selector: pools
    params: {}
- name: reserved_addrs
  endpoint:
    path: /reserved_addrs
    method: GET
- name: tls_certificates
  endpoint:
    path: /tls_certificates
    method: GET
    data_selector: certificates
- name: user_sessions
  endpoint:
    path: /app/users
    method: GET
- name: session_details
  endpoint:
    path: /app/users/{session-id}
    method: GET
- name: revoke_session
  endpoint:
    path: /app/users/{session-id}
    method: DELETE
- name: endpoint_pooling
  endpoint:
    path: /universal-gateway/endpoint-pooling
    method: GET
    data_selector: traffic
    params: {}
- name: reserved_addresses
  endpoint:
    path: /reserved_addrs
    method: GET
- name: points_of_presence
  endpoint:
    path: /universal-gateway/points-of-presence
    method: GET
    data_selector: points
    params: {}
- name: tls_certificates
  endpoint:
    path: /tls_certificates
    method: GET
    data_selector: certificates
- name: endpoints
  endpoint:
    path: /endpoints
    method: GET
- name: agent_endpoint
  endpoint:
    path: /universal-gateway/agent-endpoints
    method: POST
    data_selector: data
- name: cloud_endpoint
  endpoint:
    path: /universal-gateway/cloud-endpoints
    method: POST
    data_selector: data
- name: kubernetes_endpoint
  endpoint:
    path: /kubernetes/endpoints
    method: POST
    data_selector: endpoints
    params: {}
- name: connect_url
  endpoint:
    path: /config/add-connect-url
    method: POST
- name: api_key
  endpoint:
    path: /config/add-api-key
    method: POST
- name: auth_token
  endpoint:
    path: /config/add-authtoken
    method: POST
- name: config_add_server_addr
  endpoint:
    path: /config/add-server-addr
    method: POST
- name: config_check
  endpoint:
    path: /config/check
    method: GET
- name: config_edit
  endpoint:
    path: /config/edit
    method: GET
- name: config_upgrade
  endpoint:
    path: /config/upgrade
    method: POST
- name: credits
  endpoint:
    path: /credits
    method: GET
- name: diagnose
  endpoint:
    path: /diagnose
    method: GET
- name: http
  endpoint:
    path: /http
    method: POST
- name: points_of_presence
  endpoint:
    path: /docs/universal-gateway/points-of-presence
    method: GET
    data_selector: Code
    params: {}
- name: http_tunnel
  endpoint:
    path: /http
    method: POST
    data_selector: tunnels
    params: {}
- name: tcp_tunnel
  endpoint:
    path: /tcp
    method: POST
    data_selector: tunnels
    params: {}
- name: kubernetes_endpoints
  endpoint:
    path: /kubernetes/endpoints
    method: POST
    data_selector: endpoint
    params:
      binding: kubernetes
- name: service
  endpoint:
    path: /ngrok/service
    method: GET
- name: start
  endpoint:
    path: /ngrok/start
    method: GET
- name: tcp
  endpoint:
    path: /ngrok/tcp
    method: GET
- name: tls_endpoint
  endpoint:
    path: /tls
    method: POST
    data_selector: tunnels
    params: {}
- name: requests
  endpoint:
    path: /inspect
    method: GET
    data_selector: requests
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: status
- name: http
  endpoint:
    path: /http
    method: POST
- name: tcp
  endpoint:
    path: /tcp
    method: POST
- name: tls
  endpoint:
    path: /tls
    method: POST
- name: http
  endpoint:
    path: /http
    method: POST
    data_selector: traffic
    params: {}
- name: tls_endpoint
  endpoint:
    path: /ngrok/tls
    method: POST
    data_selector: tls_configuration
    params:
      url: example.com
      port: 443
- name: abuse_reports
  endpoint:
    path: /api/abuse-reports
    method: POST
    data_selector: reports
- name: agent_ingresses
  endpoint:
    path: /api/agent-ingresses
    method: GET
    data_selector: ingresses
- name: api_keys
  endpoint:
    path: /api/api-keys
    method: GET
    data_selector: keys
- name: application_sessions
  endpoint:
    path: /api/application-sessions
    method: GET
    data_selector: sessions
- name: tcp
  endpoint:
    path: ngrok tcp
    method: START
    data_selector: flags
- name: tls
  endpoint:
    path: ngrok tls
    method: START
    data_selector: flags
- name: service
  endpoint:
    path: ngrok service
    method: MANAGE
    data_selector: flags
- name: application_sessions
  endpoint:
    path: /api/application-sessions
    method: GET
- name: application_users
  endpoint:
    path: /api/application-users
    method: GET
- name: backends
  endpoint:
    path: /api/backends
    method: GET
- name: tunnel
  endpoint:
    path: /tunnel
    method: POST
    data_selector: tunnels
- name: static_address
  endpoint:
    path: /api/backends/static-address
    method: DELETE
- name: tunnel_group
  endpoint:
    path: /api/backends/tunnel-group
    method: DELETE
- name: bot_users
  endpoint:
    path: /api/bot-users
    method: DELETE
- name: certificate_authorities
  endpoint:
    path: /api/certificate-authorities
    method: GET
- name: http
  endpoint:
    path: /api/http
    method: GET
- name: tcp
  endpoint:
    path: /api/tcp
    method: GET
- name: tls
  endpoint:
    path: /api/tls
    method: GET
- name: certificate-authorities
  endpoint:
    path: /api/certificate-authorities
    method: GET
- name: credentials
  endpoint:
    path: /api/credentials
    method: GET
- name: edge-modules
  endpoint:
    path: /api/edge-modules
    method: GET
- name: event_sources
  endpoint:
    path: /api/event-sources
    method: GET
    data_selector: data
    params: {}
- name: event_subscriptions
  endpoint:
    path: /api/event-subscriptions
    method: GET
    data_selector: data
    params: {}
- name: https-edge-route
  endpoint:
    path: /api/edge-modules/https-edge-route
    method: DELETE
- name: https-edge-route
  endpoint:
    path: /api/edge-modules/https-edge-route
    method: GET
- name: https-edge-route
  endpoint:
    path: /api/edge-modules/https-edge-route
    method: REPLACE
- name: circuit-breaker
  endpoint:
    path: /api/edge-modules/https-edge-route/circuit-breaker
    method: DELETE
- name: circuit-breaker
  endpoint:
    path: /api/edge-modules/https-edge-route/circuit-breaker
    method: GET
- name: circuit-breaker
  endpoint:
    path: /api/edge-modules/https-edge-route/circuit-breaker
    method: REPLACE
- name: compression
  endpoint:
    path: /api/edge-modules/https-edge-route/compression
    method: DELETE
- name: compression
  endpoint:
    path: /api/edge-modules/https-edge-route/compression
    method: GET
- name: compression
  endpoint:
    path: /api/edge-modules/https-edge-route/compression
    method: REPLACE
- name: ip-restriction
  endpoint:
    path: /api/edge-modules/https-edge-route/ip-restriction
    method: DELETE
- name: ip-restriction
  endpoint:
    path: /api/edge-modules/https-edge-route/ip-restriction
    method: GET
- name: ip-restriction
  endpoint:
    path: /api/edge-modules/https-edge-route/ip-restriction
    method: REPLACE
- name: oauth
  endpoint:
    path: /api/edge-modules/https-edge-route/oauth
    method: DELETE
- name: oauth
  endpoint:
    path: /api/edge-modules/https-edge-route/oauth
    method: GET
- name: oauth
  endpoint:
    path: /api/edge-modules/https-edge-route/oauth
    method: REPLACE
- name: abuse_reports
  endpoint:
    path: /api/abuse-reports
    method: POST
- name: api_keys
  endpoint:
    path: /api/api-keys
    method: POST
- name: agent_ingresses
  endpoint:
    path: /api/agent-ingresses
    method: POST
- name: application_sessions
  endpoint:
    path: /api/application-sessions
    method: GET
- name: application-sessions
  endpoint:
    path: /api/application-sessions
    method: GET
- name: application-users
  endpoint:
    path: /api/application-users
    method: GET
- name: backends
  endpoint:
    path: /api/backends
    method: GET
- name: https-edge-route-saml
  endpoint:
    path: /edge-modules/https-edge-route-saml
    method: GET
- name: https-edge-route-traffic-policy
  endpoint:
    path: /edge-modules/https-edge-route-traffic-policy
    method: GET
- name: https-edge-route-user-agent-filter
  endpoint:
    path: /edge-modules/https-edge-route-user-agent-filter
    method: GET
- name: https-edge-route-webhook-verification
  endpoint:
    path: /edge-modules/https-edge-route-webhook-verification
    method: GET
- name: https-edge-websocket-tcp-converter
  endpoint:
    path: /edge-modules/https-edge-websocket-tcp-converter
    method: GET
- name: https-edge-tls-termination
  endpoint:
    path: /edge-modules/https-edge-tls-termination
    method: GET
- name: static_address
  endpoint:
    path: /api/backends/static-address
    method: DELETE
- name: tunnel_group
  endpoint:
    path: /api/backends/tunnel-group
    method: CREATE
- name: bot_users
  endpoint:
    path: /api/bot-users
    method: LIST
- name: certificate_authorities
  endpoint:
    path: /api/certificate-authorities
    method: GET
- name: certificate_authorities
  endpoint:
    path: /api/certificate-authorities
    method: GET
    data_selector: records
- name: credentials
  endpoint:
    path: /api/credentials
    method: GET
    data_selector: records
- name: https-edge-route
  endpoint:
    path: /api/edge-modules/https-edge-route
    method: DELETE
- name: circuit-breaker
  endpoint:
    path: /api/edge-modules/https-edge-route/circuit-breaker
    method: GET
- name: ip-restriction
  endpoint:
    path: /api/edge-modules/https-edge-route/ip-restriction
    method: GET
- name: oauth
  endpoint:
    path: /api/edge-modules/https-edge-route/oauth
    method: GET
- name: https-edge-tls-termination
  endpoint:
    path: /api/edge-modules/https-edge-tls-termination
    method: GET
- name: tcp-edge-backend
  endpoint:
    path: /api/edge-modules/tcp-edge-backend
    method: GET
- name: tcp-edge-ip-restriction
  endpoint:
    path: /api/edge-modules/tcp-edge-ip-restriction
    method: GET
- name: tcp-edge-traffic-policy
  endpoint:
    path: /api/edge-modules/tcp-edge-traffic-policy
    method: GET
- name: tls-edge-backend
  endpoint:
    path: /api/edge-modules/tls-edge-backend
    method: GET
- name: tls-edge-ip-restriction
  endpoint:
    path: /api/edge-modules/tls-edge-ip-restriction
    method: GET
- name: edge-modules
  endpoint:
    path: /api/edge-modules
    method: GET
- name: https_edges
  endpoint:
    path: /api/edges/https
    method: GET
- name: https_routes
  endpoint:
    path: /api/edges/https-routes
    method: GET
- name: https_routes
  endpoint:
    path: /api/edges/https-routes
    method: GET
    data_selector: routes
    params: {}
- name: https-edge-tls-termination
  endpoint:
    path: /api/edge-modules/https-edge-tls-termination
    method: GET
- name: tcp-edge-backend
  endpoint:
    path: /api/edge-modules/tcp-edge-backend
    method: GET
- name: tcp-edge-ip-restriction
  endpoint:
    path: /api/edge-modules/tcp-edge-ip-restriction
    method: GET
- name: tcp-edge-traffic-policy
  endpoint:
    path: /api/edge-modules/tcp-edge-traffic-policy
    method: GET
- name: tls-edge-backend
  endpoint:
    path: /api/edge-modules/tls-edge-backend
    method: GET
- name: tls-edge-ip-restriction
  endpoint:
    path: /api/edge-modules/tls-edge-ip-restriction
    method: GET
- name: tcp_edge
  endpoint:
    path: /api/edges/tcp
    method: GET
    data_selector: edges
    params: {}
- name: https_edges
  endpoint:
    path: /api/edges/https
    method: GET
- name: https_routes
  endpoint:
    path: /api/edges/https-routes
    method: GET
- name: tls
  endpoint:
    path: /api/edges/tls
    method: POST
- name: endpoint_configurations
  endpoint:
    path: /api/endpoint-configurations
    method: POST
- name: endpoint_configurations
  endpoint:
    path: /api/endpoint-configurations
    method: GET
    data_selector: configurations
- name: endpoints
  endpoint:
    path: /api/endpoints
    method: GET
- name: tcp_edge
  endpoint:
    path: /api/edges/tcp
    method: GET
- name: event_destinations
  endpoint:
    path: /api/event-destinations
    method: POST
    data_selector: data
- name: event_subscriptions
  endpoint:
    path: /api/event-subscriptions
    method: POST
    data_selector: data
- name: tls_edge
  endpoint:
    path: /api/edges/tls
    method: POST
- name: endpoint_configuration
  endpoint:
    path: /api/endpoint-configurations
    method: POST
- name: endpoints
  endpoint:
    path: /api/endpoints
    method: GET
    data_selector: endpoints
- name: event_subscriptions
  endpoint:
    path: /api/event-subscriptions
    method: GET
    data_selector: subscriptions
- name: ip_policies
  endpoint:
    path: /api/ip-policies
    method: GET
    data_selector: policies
- name: ip_restrictions
  endpoint:
    path: /api/ip-restrictions
    method: GET
    data_selector: restrictions
- name: event-destinations
  endpoint:
    path: /api/event-destinations
    method: GET
- name: event-subscriptions
  endpoint:
    path: /api/event-subscriptions
    method: GET
- name: ip_restrictions
  endpoint:
    path: /api/ip-restrictions
    method: UPDATE
    data_selector: attributes
- name: kubernetes_operators
  endpoint:
    path: /api/kubernetes-operators
    method: GET
    data_selector: attributes
- name: pointcfg_module
  endpoint:
    path: /api/pointcfg-module
    method: GET
    data_selector: attributes
- name: event_subscriptions
  endpoint:
    path: /api/event-subscriptions
    method: GET
    data_selector: subscriptions
- name: ip_policies
  endpoint:
    path: /api/ip-policies
    method: GET
    data_selector: policies
- name: ip_restrictions
  endpoint:
    path: /api/ip-restrictions
    method: GET
    data_selector: restrictions
- name: ip_restrictions
  endpoint:
    path: /api/ip-restrictions
    method: POST
- name: kubernetes_operators
  endpoint:
    path: /api/kubernetes-operators
    method: POST
- name: pointcfg_module
  endpoint:
    path: /api/pointcfg-module
    method: POST
- name: reserved-addrs
  endpoint:
    path: /api/reserved-addrs
    method: GET
- name: reserved-domains
  endpoint:
    path: /api/reserved-domains
    method: GET
- name: circuit_breaker
  endpoint:
    path: /api/pointcfg-module/circuit-breaker
    method: replace
    params: {}
- name: compression
  endpoint:
    path: /api/pointcfg-module/compression
    method: replace
    params: {}
- name: ip_policy
  endpoint:
    path: /api/pointcfg-module/ip-policy
    method: replace
    params: {}
- name: mutual_tls
  endpoint:
    path: /api/pointcfg-module/mutual-tls
    method: replace
    params: {}
- name: oauth
  endpoint:
    path: /api/pointcfg-module/oauth
    method: replace
    params: {}
- name: reserved_domains
  endpoint:
    path: /api/reserved-domains
    method: GET
    data_selector: domains
- name: secrets
  endpoint:
    path: /api/secrets
    method: GET
    data_selector: secrets
- name: ssh_certificate_authorities
  endpoint:
    path: /api/ssh-certificate-authorities
    method: GET
    data_selector: authorities
- name: reserved_addrs
  endpoint:
    path: /api/reserved-addrs
    method: GET
- name: reserved_domains
  endpoint:
    path: /api/reserved-domains
    method: GET
- name: ssh-certificate-authorities
  endpoint:
    path: /api/ssh-certificate-authorities
    method: GET
    data_selector: sshCertificateAuthorities
- name: ssh-credentials
  endpoint:
    path: /api/ssh-credentials
    method: GET
    data_selector: sshCredentials
- name: ssh-host-certificates
  endpoint:
    path: /api/ssh-host-certificates
    method: GET
    data_selector: sshHostCertificates
- name: ssh-user-certificates
  endpoint:
    path: /api/ssh-user-certificates
    method: GET
    data_selector: sshUserCertificates
- name: reserved-domains
  endpoint:
    path: /api/reserved-domains
    method: GET
- name: ssh-certificate-authorities
  endpoint:
    path: /api/ssh-certificate-authorities
    method: GET
- name: secrets
  endpoint:
    path: /api/secrets
    method: GET
- name: ssh_user_certificates
  endpoint:
    path: /api/ssh-user-certificates
    method: GET
- name: tls_certificates
  endpoint:
    path: /api/tls-certificates
    method: GET
- name: tunnel_sessions
  endpoint:
    path: /api/tunnel-sessions
    method: GET
- name: vaults
  endpoint:
    path: /api/vaults
    method: GET
- name: ssh_certificate_authorities
  endpoint:
    path: /api/ssh-certificate-authorities
    method: GET
- name: ssh_credentials
  endpoint:
    path: /api/ssh-credentials
    method: GET
- name: ssh_host_certificates
  endpoint:
    path: /api/ssh-host-certificates
    method: GET
- name: ssh_user_certificates
  endpoint:
    path: /api/ssh-user-certificates
    method: GET
- name: vaults_get
  endpoint:
    path: /api/vaults/get
    method: GET
- name: vaults_get_secrets_by_vault
  endpoint:
    path: /api/vaults/get-secrets-by-vault
    method: GET
- name: vaults_list
  endpoint:
    path: /api/vaults/list
    method: GET
- name: vaults_update
  endpoint:
    path: /api/vaults/update
    method: POST
- name: ssh_user_certificates
  endpoint:
    path: /api/ssh-user-certificates
    method: GET
- name: tls_certificates
  endpoint:
    path: /api/tls-certificates
    method: GET
- name: tunnel_sessions
  endpoint:
    path: /api/tunnel-sessions
    method: GET
- name: vaults
  endpoint:
    path: /api/vaults
    method: GET
- name: tunnels
  endpoint:
    path: /api/tunnels
    method: GET
    data_selector: tunnels
    params: {}
- name: endpoints
  endpoint:
    path: /api/endpoints
    method: GET
    data_selector: endpoints
    params: {}
- name: captured_requests
  endpoint:
    path: /api/requests/http
    method: GET
    data_selector: requests
    params: {}
- name: vaults_get
  endpoint:
    path: /api/vaults/get
    method: GET
- name: vaults_get_secrets_by_vault
  endpoint:
    path: /api/vaults/get-secrets-by-vault
    method: GET
- name: vaults_list
  endpoint:
    path: /api/vaults/list
    method: GET
- name: vaults_update
  endpoint:
    path: /api/vaults/update
    method: POST
- name: agent_status
  endpoint:
    path: /api/status
    method: GET
    data_selector: status
- name: demo-tls
  endpoint:
    path: tls://your-domain.ngrok.app
    method: POST
    data_selector: endpoints
    params: {}
- name: tunnels
  endpoint:
    path: /api/tunnels
    method: GET
    data_selector: tunnels
- name: endpoints
  endpoint:
    path: /api/endpoints
    method: GET
    data_selector: endpoints
- name: captured_requests
  endpoint:
    path: /api/requests/http
    method: GET
    data_selector: requests
- name: agent_status
  endpoint:
    path: /api/status
    method: GET
    data_selector: status
    params: {}
- name: agent_endpoint
  endpoint:
    path: /agent-endpoint
    method: GET
- name: cloud_endpoint
  endpoint:
    path: /cloud-endpoint
    method: POST
- name: demo-tls
  endpoint:
    path: tls://your-domain.ngrok.app
    method: GET
    data_selector: records
    params: {}
- name: tls_endpoints
  endpoint:
    path: /universal-gateway/tls
    method: GET
    data_selector: tls_endpoints
    params: {}
- name: release_support_chart
  endpoint:
    path: /agent/version-support-policy
    method: GET
    data_selector: releases
    params: {}
- name: public_endpoints
  endpoint:
    path: /docs/universal-gateway/public-endpoints
    method: GET
- name: internal_endpoints
  endpoint:
    path: /docs/universal-gateway/internal-endpoints
    method: GET
- name: kubernetes_endpoints
  endpoint:
    path: /docs/universal-gateway/kubernetes-endpoints
    method: GET
- name: traffic_logs
  endpoint:
    path: /obs/events/reference#traffic-events
    method: GET
    data_selector: logs
- name: audit_logs
  endpoint:
    path: /obs/events/reference#audit-events
    method: GET
    data_selector: logs
- name: agent_endpoint
  endpoint:
    path: /
    method: GET
    data_selector: status
    params: {}
- name: cloud_endpoint
  endpoint:
    path: /endpoints
    method: POST
    data_selector: response
    params: {}
- name: public_endpoints
  endpoint:
    path: /public-endpoints
    method: GET
- name: internal_endpoints
  endpoint:
    path: /internal-endpoints
    method: GET
- name: kubernetes_endpoints
  endpoint:
    path: /kubernetes-endpoints
    method: GET
- name: Log Export
  endpoint:
    path: /docs/obs/events/reference
    method: GET
    data_selector: log_sources
    params: {}
- name: abuse_reports
  endpoint:
    path: /abuse_reports
    method: POST
- name: api_keys
  endpoint:
    path: /api_keys
    method: GET
- name: application_sessions
  endpoint:
    path: /application_sessions
    method: GET
- name: tunnels
  endpoint:
    path: /tunnels
    method: GET
- name: reserved_addrs
  endpoint:
    path: /services/ReservedAddrsClient
    method: GET
- name: reserved_domains
  endpoint:
    path: /services/ReservedDomainsClient
    method: GET
- name: secrets
  endpoint:
    path: /services/SecretsClient
    method: GET
- name: ssh_certificate_authorities
  endpoint:
    path: /services/SSHCertificateAuthoritiesClient
    method: GET
- name: ssh_credentials
  endpoint:
    path: /services/SSHCredentialsClient
    method: GET
- name: ssh_host_certificates
  endpoint:
    path: /services/SSHHostCertificatesClient
    method: GET
- name: ssh_user_certificates
  endpoint:
    path: /services/SSHUserCertificatesClient
    method: GET
- name: tls_certificates
  endpoint:
    path: /services/TLSCertificatesClient
    method: GET
- name: tunnel_sessions
  endpoint:
    path: /services/TunnelSessionsClient
    method: GET
- name: tunnels
  endpoint:
    path: /services/TunnelsClient
    method: GET
- name: vaults
  endpoint:
    path: /services/VaultsClient
    method: GET
- name: abuse_reports
  endpoint:
    path: /abuse_reports
    method: POST
    data_selector: report
    params: {}
- name: api_keys
  endpoint:
    path: /api_keys
    method: GET
    data_selector: keys
    params: {}
- name: reserved_addrs
  endpoint:
    path: /services/ReservedAddrsClient
    method: GET
- name: reserved_domains
  endpoint:
    path: /services/ReservedDomainsClient
    method: GET
- name: secrets
  endpoint:
    path: /services/SecretsClient
    method: GET
- name: ssh_certificate_authorities
  endpoint:
    path: /services/SSHCertificateAuthoritiesClient
    method: GET
- name: ssh_credentials
  endpoint:
    path: /services/SSHCredentialsClient
    method: GET
- name: ssh_host_certificates
  endpoint:
    path: /services/SSHHostCertificatesClient
    method: GET
- name: ssh_user_certificates
  endpoint:
    path: /services/SSHUserCertificatesClient
    method: GET
- name: tls_certificates
  endpoint:
    path: /services/TLSCertificatesClient
    method: GET
- name: tunnel_sessions
  endpoint:
    path: /services/TunnelSessionsClient
    method: GET
- name: tunnels
  endpoint:
    path: /services/TunnelsClient
    method: GET
- name: vaults
  endpoint:
    path: /services/VaultsClient
    method: GET
- name: tunnels
  endpoint:
    path: /tunnels
    method: GET
    data_selector: tunnels
- name: ip_policies
  endpoint:
    path: /ip_policies
    method: GET
    data_selector: policies
- name: tunnels
  endpoint:
    path: /tunnels
    method: GET
- name: ip_policies
  endpoint:
    path: /ip_policies
    method: GET
- name: abuse_reports
  endpoint:
    path: /v1/abuse_reports
    method: GET
    data_selector: reports
- name: agent_ingresses
  endpoint:
    path: /v1/agent_ingresses
    method: GET
    data_selector: ingresses
- name: EventTargetAzureLogsIngestion.client_id
- name: EventTargetAzureLogsIngestion.client_secret
- name: EventTargetAzureLogsIngestion.data_collection_rule_id
- name: EventTargetAzureLogsIngestion.data_collection_stream_name
- name: EventTargetAzureLogsIngestion.logs_ingestion_uri
- name: EventTargetAzureLogsIngestion.tenant_id
- name: SSHCredential
  endpoint:
    path: /ngrok/ssh_credentials
    method: GET
- name: SSHHostCertificate
  endpoint:
    path: /ngrok/ssh_host_certificates
    method: GET
- name: SSHUserCertificate
  endpoint:
    path: /ngrok/ssh_user_certificates
    method: GET
- name: Secret
  endpoint:
    path: /ngrok/secrets
    method: GET
- name: StaticBackend
  endpoint:
    path: /ngrok/static_backends
    method: GET
- name: Tunnel
  endpoint:
    path: /ngrok/tunnels
    method: GET
- name: SSHCredential
  endpoint:
    path: /datatypes/SSHCredential
    method: GET
- name: SSHHostCertificate
  endpoint:
    path: /datatypes/SSHHostCertificate
    method: GET
- name: SSHUserCertificate
  endpoint:
    path: /datatypes/SSHUserCertificate
    method: GET
- name: Secret
  endpoint:
    path: /datatypes/Secret
    method: GET
- name: StaticBackend
  endpoint:
    path: /datatypes/StaticBackend
    method: GET
- name: TCPEdge
  endpoint:
    path: /datatypes/TCPEdge
    method: GET
- name: TLSCertificate
  endpoint:
    path: /datatypes/TLSCertificate
    method: GET
- name: Tunnel
  endpoint:
    path: /datatypes/Tunnel
    method: GET
- name: UserAgent
  endpoint:
    path: /datatypes/UserAgent
    method: GET
- name: Vault
  endpoint:
    path: /datatypes/Vault
    method: GET
- name: Endpoints
  endpoint:
    path: /endpoints
    method: GET
    data_selector: records
    params: {}
- name: Event Destinations
  endpoint:
    path: /event_destinations
    method: GET
    data_selector: records
    params: {}
- name: Event Subscriptions
  endpoint:
    path: /event_subscriptions
    method: GET
    data_selector: records
    params: {}
- name: Event Sources
  endpoint:
    path: /event_sources
    method: GET
    data_selector: records
    params: {}
- name: IP Policies
  endpoint:
    path: /ip_policies
    method: GET
    data_selector: records
    params: {}
- name: IP Policy Rules
  endpoint:
    path: /ip_policy_rules
    method: GET
    data_selector: records
    params: {}
- name: IP Restrictions
  endpoint:
    path: /ip_restrictions
    method: GET
    data_selector: records
    params: {}
- name: Reserved Addresses
  endpoint:
    path: /reserved_addresses
    method: GET
    data_selector: records
    params: {}
- name: Reserved Domains
  endpoint:
    path: /reserved_domains
    method: GET
    data_selector: records
    params: {}
- name: Secrets
  endpoint:
    path: /secrets
    method: GET
    data_selector: records
    params: {}
- name: SSH Certificate Authorities
  endpoint:
    path: /ssh_certificate_authorities
    method: GET
    data_selector: records
    params: {}
- name: SSH Credentials
  endpoint:
    path: /ssh_credentials
    method: GET
    data_selector: records
    params: {}
- name: SSH Host Certificates
  endpoint:
    path: /ssh_host_certificates
    method: GET
    data_selector: records
    params: {}
- name: SSH User Certificates
  endpoint:
    path: /ssh_user_certificates
    method: GET
    data_selector: records
    params: {}
- name: TLS Certificates
  endpoint:
    path: /tls_certificates
    method: GET
    data_selector: records
    params: {}
- name: Tunnels
  endpoint:
    path: /tunnels
    method: GET
    data_selector: records
    params: {}
- name: Vaults
  endpoint:
    path: /vaults
    method: GET
    data_selector: records
    params: {}
- name: credential
  endpoint:
    path: /credentials/cr_1kYyunEyn6XHHlqyMBLrj5nxkoz
    method: GET
    data_selector: metadata
    params: {}
- name: APIKey
  endpoint:
    path: /datatypes/APIKey
    method: GET
- name: APIKeyList
  endpoint:
    path: /datatypes/APIKeyList
    method: GET
- name: AWSAuth
  endpoint:
    path: /datatypes/AWSAuth
    method: GET
- name: AWSCredentials
  endpoint:
    path: /datatypes/AWSCredentials
    method: GET
- name: AWSRole
  endpoint:
    path: /datatypes/AWSRole
    method: GET
- name: AbuseReport
  endpoint:
    path: /datatypes/AbuseReport
    method: GET
- name: AgentIngress
  endpoint:
    path: /datatypes/AgentIngress
    method: GET
- name: ApplicationSession
  endpoint:
    path: /datatypes/ApplicationSession
    method: GET
- name: ApplicationUser
  endpoint:
    path: /datatypes/ApplicationUser
    method: GET
- name: application_user
  endpoint:
    path: /application_users
    method: GET
    data_selector: application_users
- name: bot_user
  endpoint:
    path: /bot_users
    method: GET
    data_selector: bot_users
- name: credential
  endpoint:
    path: /credentials
    method: GET
    data_selector: credentials
- name: certificate_authority
  endpoint:
    path: /certificate_authorities
    method: GET
    data_selector: certificate_authorities
- name: abuse_reports
  endpoint:
    path: /abuse_reports
    method: GET
- name: agent_ingresses
  endpoint:
    path: /agent_ingresses
    method: GET
- name: api_keys
  endpoint:
    path: /api_keys
    method: GET
- name: application_sessions
  endpoint:
    path: /application_sessions
    method: GET
- name: application_users
  endpoint:
    path: /application_users
    method: GET
- name: tunnel_sessions
  endpoint:
    path: /tunnel_sessions
    method: GET
- name: failover_backends
  endpoint:
    path: /failover_backends
    method: GET
- name: http_response_backends
  endpoint:
    path: /http_response_backends
    method: GET
- name: static_backends
  endpoint:
    path: /static_backends
    method: GET
- name: tunnel_group_backends
  endpoint:
    path: /tunnel_group_backends
    method: GET
- name: weighted_backends
  endpoint:
    path: /weighted_backends
    method: GET
- name: bot_users
  endpoint:
    path: /bot_users
    method: GET
- name: certificate_authorities
  endpoint:
    path: /certificate_authorities
    method: GET
- name: tunnel_credentials
  endpoint:
    path: /tunnel_credentials
    method: GET
- name: edges_https_routes
  endpoint:
    path: /edges_https_routes
    method: GET
- name: edges_https
  endpoint:
    path: /edges_https
    method: GET
- name: https_edge_mutual_tls_module
  endpoint:
    path: /https_edge_mutual_tls_module
    method: GET
- name: https_edge_tls_termination_module
  endpoint:
    path: /https_edge_tls_termination_module
    method: GET
- name: https_edge_route_backend_module
  endpoint:
    path: /https_edge_route_backend_module
    method: GET
- name: https_edge_route_ip_restriction_module
  endpoint:
    path: /https_edge_route_ip_restriction_module
    method: GET
- name: https_edge_route_request_headers_module
  endpoint:
    path: /https_edge_route_request_headers_module
    method: GET
- name: https_edge_route_response_headers_module
  endpoint:
    path: /https_edge_route_response_headers_module
    method: GET
- name: https_edge_route_compression_module
  endpoint:
    path: /https_edge_route_compression_module
    method: GET
- name: https_edge_route_circuit_breaker_module
  endpoint:
    path: /https_edge_route_circuit_breaker_module
    method: GET
- name: https_edge_route_webhook_verification_module
  endpoint:
    path: /https_edge_route_webhook_verification_module
    method: GET
- name: https_edge_route_o_auth_module
  endpoint:
    path: /https_edge_route_o_auth_module
    method: GET
- name: https_edge_route_saml_module
  endpoint:
    path: /https_edge_route_saml_module
    method: GET
- name: https_edge_route_oidc_module
  endpoint:
    path: /https_edge_route_oidc_module
    method: GET
- name: https_edge_route_websocket_tcp_converter_module
  endpoint:
    path: /https_edge_route_websocket_tcp_converter_module
    method: GET
- name: https_edge_route_user_agent_filter_module
  endpoint:
    path: /https_edge_route_user_agent_filter_module
    method: GET
- name: https_edge_route_traffic_policy_module
  endpoint:
    path: /https_edge_route_traffic_policy_module
    method: GET
- name: edges_tcp
  endpoint:
    path: /edges_tcp
    method: GET
- name: IPPolicyList
  endpoint:
    path: /ip_policies
    method: GET
    data_selector: ip_policies
- name: IPPolicyRuleList
  endpoint:
    path: /ip_policy_rules
    method: GET
    data_selector: ip_policy_rules
- name: IPRestrictionList
  endpoint:
    path: /ip_restrictions
    method: GET
    data_selector: ip_restrictions
- name: ReservedAddrList
  endpoint:
    path: /reserved_addrs
    method: GET
    data_selector: reserved_addrs
- name: ReservedDomainList
  endpoint:
    path: /reserved_domains
    method: GET
    data_selector: reserved_domains
- name: reserved_domains
  endpoint:
    path: /reserved_domains
    method: GET
    data_selector: reserved_domains
- name: ssh_certificate_authorities
  endpoint:
    path: /ssh_certificate_authorities
    method: GET
    data_selector: ssh_certificate_authorities
- name: ssh_credentials
  endpoint:
    path: /ssh_credentials
    method: GET
    data_selector: ssh_credentials
- name: ssh_host_certificates
  endpoint:
    path: /ssh_host_certificates
    method: GET
    data_selector: ssh_host_certificates
- name: ssh_user_certificates
  endpoint:
    path: /ssh_user_certificates
    method: GET
    data_selector: ssh_user_certificates
- name: TCP Edge Backend Module
  endpoint:
    path: /tcp_edge_backend_module
    method: GET
- name: TCP Edge IP Restriction Module
  endpoint:
    path: /tcp_edge_ip_restriction_module
    method: GET
- name: TCP Edge Traffic Policy Module
  endpoint:
    path: /tcp_edge_traffic_policy_module
    method: GET
- name: TLS Edges
  endpoint:
    path: /edges_tls
    method: GET
- name: TLS Edge Backend Module
  endpoint:
    path: /tls_edge_backend_module
    method: GET
- name: TLS Edge IP Restriction Module
  endpoint:
    path: /tls_edge_ip_restriction_module
    method: GET
- name: TLS Edge Mutual TLS Module
  endpoint:
    path: /tls_edge_mutual_tls_module
    method: GET
- name: TLS Edge TLS Termination Module
  endpoint:
    path: /tls_edge_tls_termination_module
    method: GET
- name: TLS Edge Traffic Policy Module
  endpoint:
    path: /tls_edge_traffic_policy_module
    method: GET
- name: Endpoints
  endpoint:
    path: /endpoints
    method: GET
- name: Event Destinations
  endpoint:
    path: /event_destinations
    method: GET
- name: Event Subscriptions
  endpoint:
    path: /event_subscriptions
    method: GET
- name: Event Sources
  endpoint:
    path: /event_sources
    method: GET
- name: IP Policies
  endpoint:
    path: /ip_policies
    method: GET
- name: IP Policy Rules
  endpoint:
    path: /ip_policy_rules
    method: GET
- name: IP Restrictions
  endpoint:
    path: /ip_restrictions
    method: GET
- name: Reserved Addresses
  endpoint:
    path: /reserved_addrs
    method: GET
- name: Reserved Domains
  endpoint:
    path: /reserved_domains
    method: GET
- name: Secrets
  endpoint:
    path: /secrets
    method: GET
- name: SSH Certificate Authorities
  endpoint:
    path: /ssh_certificate_authorities
    method: GET
- name: SSH Credentials
  endpoint:
    path: /ssh_credentials
    method: GET
- name: SSH Host Certificates
  endpoint:
    path: /ssh_host_certificates
    method: GET
- name: SSH User Certificates
  endpoint:
    path: /ssh_user_certificates
    method: GET
- name: TLS Certificates
  endpoint:
    path: /tls_certificates
    method: GET
- name: Tunnels
  endpoint:
    path: /tunnels
    method: GET
- name: Vaults
  endpoint:
    path: /vaults
    method: GET
- name: TLSCertificateList
  endpoint:
    path: /TLSCertificateList
    method: GET
- name: TLSEdgeList
  endpoint:
    path: /TLSEdgeList
    method: GET
- name: TunnelList
  endpoint:
    path: /TunnelList
    method: GET
- name: TunnelSessionList
  endpoint:
    path: /TunnelSessionList
    method: GET
- name: VaultList
  endpoint:
    path: /VaultList
    method: GET
- name: WeightedBackendList
  endpoint:
    path: /WeightedBackendList
    method: GET
- name: APIKey
  endpoint:
    path: /modules/ngrok/datatypes/APIKey
    method: GET
    data_selector: APIKey
    params: {}
- name: APIKeyList
  endpoint:
    path: /modules/ngrok/datatypes/APIKeyList
    method: GET
    data_selector: keys
    params: {}
- name: AWSAuth
  endpoint:
    path: /modules/ngrok/datatypes/AWSAuth
    method: GET
    data_selector: creds
    params: {}
- name: AWSCredentials
  endpoint:
    path: /modules/ngrok/datatypes/AWSCredentials
    method: GET
    data_selector: aws_access_key_id
    params: {}
- name: AWSRole
  endpoint:
    path: /modules/ngrok/datatypes/AWSRole
    method: GET
    data_selector: role_arn
    params: {}
- name: AbuseReport
  endpoint:
    path: /modules/ngrok/datatypes/AbuseReport
    method: GET
    data_selector: status
    params: {}
- name: AgentIngress
  endpoint:
    path: /modules/ngrok/datatypes/AgentIngress
    method: GET
    data_selector: domain
    params: {}
- name: ApplicationSession
  endpoint:
    path: /modules/ngrok/datatypes/ApplicationSession
    method: GET
    data_selector: public_url
    params: {}
- name: ApplicationUser
  endpoint:
    path: /modules/ngrok/datatypes/ApplicationUser
    method: GET
    data_selector: email
    params: {}
- name: abuse_report
  endpoint:
    path: /abuse_reports
    method: POST
    data_selector: AbuseReport
    params: {}
- name: abuse_report_status
  endpoint:
    path: /abuse_reports/{id}
    method: GET
    data_selector: AbuseReport
    params: {}
- name: application_users
  endpoint:
    path: /application_users
    method: GET
    data_selector: application_users
- name: bot_users
  endpoint:
    path: /bot_users
    method: GET
    data_selector: bot_users
- name: credentials
  endpoint:
    path: /credentials
    method: GET
    data_selector: credentials
- name: certificate_authorities
  endpoint:
    path: /certificate_authorities
    method: GET
    data_selector: certificate_authorities
- name: endpoints
  endpoint:
    path: /endpoints
    method: GET
    data_selector: endpoints
- name: agent_ingresses
  endpoint:
    path: /agent_ingresses
    method: GET
    data_selector: AgentIngressList
    params: {}
- name: API Keys
  endpoint:
    path: /api/keys
    method: GET
    data_selector: APIKeyList
    params: {}
- name: application_sessions
  endpoint:
    path: /application_sessions
    method: GET
    data_selector: ApplicationSessionList
    params: {}
- name: application_users
  endpoint:
    path: /api/application-users
    method: GET
- name: tunnel_sessions
  endpoint:
    path: /tunnel_sessions
    method: GET
    data_selector: TunnelSessionList
    params: {}
- name: Failover Backends
  endpoint:
    path: /failover_backends
    method: GET
    data_selector: backends
- name: http_response_backends
  endpoint:
    path: /http_response_backends
    method: GET
- name: static_backend
  endpoint:
    path: /static_backends
    method: GET
- name: TunnelGroupBackend
  endpoint:
    path: /tunnel_group_backends
    method: GET
    data_selector: backends
- name: EndpointTLSTermination
  endpoint:
    path: /ngrok/datatypes/EndpointTLSTermination
    method: GET
- name: EndpointTLSTerminationAtEdge
  endpoint:
    path: /ngrok/datatypes/EndpointTLSTerminationAtEdge
    method: GET
- name: EndpointTrafficPolicy
  endpoint:
    path: /ngrok/datatypes/EndpointTrafficPolicy
    method: GET
- name: EndpointUserAgentFilter
  endpoint:
    path: /ngrok/datatypes/EndpointUserAgentFilter
    method: GET
- name: EndpointWebhookValidation
  endpoint:
    path: /ngrok/datatypes/EndpointWebhookValidation
    method: GET
- name: EndpointWebsocketTCPConverter
  endpoint:
    path: /ngrok/datatypes/EndpointWebsocketTCPConverter
    method: GET
- name: EventDestination
  endpoint:
    path: /ngrok/datatypes/EventDestination
    method: GET
- name: EventDestinationList
  endpoint:
    path: /ngrok/datatypes/EventDestinationList
    method: GET
- name: EventSource
  endpoint:
    path: /ngrok/datatypes/EventSource
    method: GET
- name: EventSourceList
  endpoint:
    path: /ngrok/datatypes/EventSourceList
    method: GET
- name: EventSourceReplace
  endpoint:
    path: /ngrok/datatypes/EventSourceReplace
    method: GET
- name: EventSubscription
  endpoint:
    path: /ngrok/datatypes/EventSubscription
    method: GET
- name: EventSubscriptionList
  endpoint:
    path: /ngrok/datatypes/EventSubscriptionList
    method: GET
- name: EventTarget
  endpoint:
    path: /ngrok/datatypes/EventTarget
    method: GET
- name: EventTargetAzureLogsIngestion
  endpoint:
    path: /ngrok/datatypes/EventTargetAzureLogsIngestion
    method: GET
- name: EventTargetCloudwatchLogs
  endpoint:
    path: /ngrok/datatypes/EventTargetCloudwatchLogs
    method: GET
- name: EventTargetDatadog
  endpoint:
    path: /ngrok/datatypes/EventTargetDatadog
    method: GET
- name: EventTargetFirehose
  endpoint:
    path: /ngrok/datatypes/EventTargetFirehose
    method: GET
- name: weighted_backends
  endpoint:
    path: /weighted_backends
    method: POST
- name: bot_user
  endpoint:
    path: /bot_users
    method: GET
- name: certificate_authorities
  endpoint:
    path: /certificate_authorities
    method: GET
    data_selector: CertificateAuthorityList
    params: {}
- name: tunnel_credentials
  endpoint:
    path: /tunnel_credentials
    method: POST
- name: IPPolicyList
  endpoint:
    path: /ip_policies
    method: GET
    data_selector: ip_policies
- name: IPPolicyRuleList
  endpoint:
    path: /ip_policy_rules
    method: GET
    data_selector: ip_policy_rules
- name: IPRestrictionList
  endpoint:
    path: /ip_restrictions
    method: GET
    data_selector: ip_restrictions
- name: ReservedAddrList
  endpoint:
    path: /reserved_addrs
    method: GET
    data_selector: reserved_addrs
- name: ReservedDomainList
  endpoint:
    path: /reserved_domains
    method: GET
    data_selector: reserved_domains
- name: https_edges
  endpoint:
    path: /api/edges/https
    method: GET
- name: reserved_domains
  endpoint:
    path: /reserved_domains
    method: GET
    data_selector: reserved_domains
- name: ssh_certificate_authorities
  endpoint:
    path: /ssh_certificate_authorities
    method: GET
    data_selector: ssh_certificate_authorities
- name: ssh_credentials
  endpoint:
    path: /ssh_credentials
    method: GET
    data_selector: ssh_credentials
- name: ssh_host_certificates
  endpoint:
    path: /ssh_host_certificates
    method: GET
    data_selector: ssh_host_certificates
- name: ssh_user_certificates
  endpoint:
    path: /ssh_user_certificates
    method: GET
    data_selector: ssh_user_certificates
- name: delete
  endpoint:
    path: /https_edge_mutual_tls_module/delete/{id}
    method: DELETE
    data_selector: null
    params:
      id: resource identifier
- name: get
  endpoint:
    path: /https_edge_mutual_tls_module/get/{id}
    method: GET
    data_selector: EndpointMutualTLS
    params:
      id: resource identifier
- name: replace
  endpoint:
    path: /https_edge_mutual_tls_module/replace/{id}
    method: POST
    data_selector: EndpointMutualTLS
    params:
      id: resource identifier
      module: EndpointMutualTLSMutate
- name: tls_edges
  endpoint:
    path: /api/tls_edges
    method: GET
    data_selector: tls_edges
- name: tunnels
  endpoint:
    path: /api/tunnels
    method: GET
    data_selector: tunnels
- name: vaults
  endpoint:
    path: /api/vaults
    method: GET
    data_selector: vaults
- name: weighted_backends
  endpoint:
    path: /api/weighted_backends
    method: GET
    data_selector: backends
- name: EdgeRouteIPRestrictionModuleClient
  endpoint:
    path: /api/edge-route-ip-restriction-module
    method: DELETE
    data_selector: parameters
- name: APIKey
  endpoint:
    path: /api/v1/api_keys
    method: GET
    data_selector: keys
    params: {}
- name: ApplicationSession
  endpoint:
    path: /api/v1/application_sessions
    method: GET
    data_selector: application_sessions
    params: {}
- name: EdgeRouteRequestHeadersModuleClient
  endpoint:
    path: /api/edge-route-request-headers-module
    method: GET
    data_selector: EndpointRequestHeaders
- name: edge_route_response_headers
  endpoint:
    path: /api/edge-route-response-headers-module
    method: DELETE
    data_selector: ''
    params: {}
- name: edge_route_response_headers
  endpoint:
    path: /api/edge-route-response-headers-module
    method: GET
    data_selector: ''
    params: {}
- name: edge_route_response_headers
  endpoint:
    path: /api/edge-route-response-headers-module
    method: REPLACE
    data_selector: ''
    params: {}
- name: EdgeRouteCompressionModuleClient.delete
  endpoint:
    path: /api-edge-route-compression-module-delete
    method: DELETE
    data_selector: parameters
- name: EdgeRouteCompressionModuleClient.get
  endpoint:
    path: /api-edge-route-compression-module-get
    method: GET
    data_selector: parameters
- name: EdgeRouteCompressionModuleClient.replace
  endpoint:
    path: /api-edge-route-compression-module-replace
    method: PUT
    data_selector: parameters
- name: TLSCertificate
  endpoint:
    path: /ngrok.datatypes.TLSCertificate
    method: GET
- name: TLSCertificateList
  endpoint:
    path: /ngrok.datatypes.TLSCertificateList
    method: GET
- name: TLSCertificateSANs
  endpoint:
    path: /ngrok.datatypes.TLSCertificateSANs
    method: GET
- name: TLSEdge
  endpoint:
    path: /ngrok.datatypes.TLSEdge
    method: GET
- name: TLSEdgeList
  endpoint:
    path: /ngrok.datatypes.TLSEdgeList
    method: GET
- name: Tunnel
  endpoint:
    path: /ngrok.datatypes.Tunnel
    method: GET
- name: TunnelGroupBackend
  endpoint:
    path: /ngrok.datatypes.TunnelGroupBackend
    method: GET
- name: TunnelGroupBackendList
  endpoint:
    path: /ngrok.datatypes.TunnelGroupBackendList
    method: GET
- name: TunnelList
  endpoint:
    path: /ngrok.datatypes.TunnelList
    method: GET
- name: TunnelSession
  endpoint:
    path: /ngrok.datatypes.TunnelSession
    method: GET
- name: TunnelSessionList
  endpoint:
    path: /ngrok.datatypes.TunnelSessionList
    method: GET
- name: UserAgent
  endpoint:
    path: /ngrok.datatypes.UserAgent
    method: GET
- name: Vault
  endpoint:
    path: /ngrok.datatypes.Vault
    method: GET
- name: VaultList
  endpoint:
    path: /ngrok.datatypes.VaultList
    method: GET
- name: WeightedBackend
  endpoint:
    path: /ngrok.datatypes.WeightedBackend
    method: GET
- name: WeightedBackendList
  endpoint:
    path: /ngrok.datatypes.WeightedBackendList
    method: GET
- name: EdgeRouteWebhookVerificationModuleClient
  endpoint:
    path: /api/edge-route-webhook-verification-module
    method: DELETE
    params:
      edge_id: unique identifier of this edge
      id: unique identifier of this edge route
- name: EdgeRouteWebhookVerificationModuleClient
  endpoint:
    path: /api/edge-route-webhook-verification-module
    method: GET
    params:
      edge_id: unique identifier of this edge
      id: unique identifier of this edge route
- name: EdgeRouteWebhookVerificationModuleClient
  endpoint:
    path: /api/edge-route-webhook-verification-module
    method: PUT
    params:
      edge_id: unique identifier of this edge
      id: unique identifier of this edge route
      module: EndpointWebhookValidation
- name: edge_route_saml_module
  endpoint:
    path: /api/edge-route-saml-module
    method: GET
- name: abuse_reports
  endpoint:
    path: /abuse_reports
    method: POST
    data_selector: AbuseReport
    params: {}
- name: abuse_report_status
  endpoint:
    path: /abuse_reports/{id}
    method: GET
    data_selector: AbuseReport
    params: {}
- name: Agent Ingresses
  endpoint:
    path: /agent_ingresses
    method: GET
    data_selector: AgentIngressList
    params: {}
- name: api_keys
  endpoint:
    path: /api/keys
    method: GET
- name: EdgeRouteWebsocketTCPConverterModuleClient
  endpoint:
    path: /api/edge-route-websocket-tcp-converter-module
    method: DELETE
    data_selector: parameters
    params: {}
- name: EdgeRouteWebsocketTCPConverterModuleClient
  endpoint:
    path: /api/edge-route-websocket-tcp-converter-module
    method: GET
    data_selector: Return type
    params: {}
- name: EdgeRouteWebsocketTCPConverterModuleClient
  endpoint:
    path: /api/edge-route-websocket-tcp-converter-module
    method: REPLACE
    data_selector: Return type
    params: {}
- name: application_sessions
  endpoint:
    path: /application_sessions
    method: GET
    data_selector: ApplicationSessionList
    params:
      limit: null
- name: EdgeRouteUserAgentFilterModuleClient
  endpoint:
    path: /api/edge-route-user-agent-filter-module
    method: DELETE
- name: EdgeRouteUserAgentFilterModuleClient
  endpoint:
    path: /api/edge-route-user-agent-filter-module
    method: GET
- name: EdgeRouteUserAgentFilterModuleClient
  endpoint:
    path: /api/edge-route-user-agent-filter-module
    method: REPLACE
- name: application_users
  endpoint:
    path: /application_users
    method: GET
- name: tunnel_sessions
  endpoint:
    path: /tunnel_sessions
    method: GET
- name: delete_edge_route
  endpoint:
    path: /api-edge-route-traffic-policy-module-delete
    method: DELETE
- name: get_edge_route
  endpoint:
    path: /api-edge-route-traffic-policy-module-get
    method: GET
- name: replace_edge_route
  endpoint:
    path: /api-edge-route-traffic-policy-module-replace
    method: PUT
- name: failover_backends
  endpoint:
    path: /failover_backends
    method: GET
- name: TCP Edges
  endpoint:
    path: /api-edges-tcp
    method: GET
- name: HTTPResponseBackendsClient
  endpoint:
    path: /api/http-response-backends
    method: GET
- name: tcp_edge_backend
  endpoint:
    path: /tcp_edge_backend_module
    method: DELETE
    data_selector: id
    params: {}
- name: tcp_edge_backend_get
  endpoint:
    path: /tcp_edge_backend_module
    method: GET
    data_selector: id
    params: {}
- name: tcp_edge_backend_replace
  endpoint:
    path: /tcp_edge_backend_module
    method: PUT
    data_selector: id
    params: {}
- name: TunnelGroupBackends
  endpoint:
    path: /tunnel_group_backends
    method: GET
- name: tcp_edge_ip_restriction
  endpoint:
    path: /tcp_edge_ip_restriction_module
    method: GET
- name: Weighted Backends
  endpoint:
    path: /weighted_backends
    method: GET
- name: bot_users
  endpoint:
    path: /bot_users
    method: GET
    data_selector: BotUserList
- name: tcp_edge_traffic_policy_module
  endpoint:
    path: /tcp_edge_traffic_policy_module
    method: GET
    data_selector: EndpointTrafficPolicy
- name: certificate_authorities
  endpoint:
    path: /api/certificate-authorities
    method: GET
    data_selector: CertificateAuthorityList
- name: TLS Edges
  endpoint:
    path: /edges_tls
    method: GET
    data_selector: TLSEdgeList
- name: TLSEdgeIPRestrictionModuleClient
  endpoint:
    path: /tls_edge_ip_restriction_module
    method: GET
    data_selector: EndpointIPPolicy
- name: TLS Edge Mutual TLS Module
  endpoint:
    path: /api/tls-edge-mutual-tls-module
    method: DELETE
    data_selector: resource_identifier
- name: get
  endpoint:
    path: /api/tls-edge-mutual-tls-module/{id}
    method: GET
    data_selector: EndpointMutualTLS
- name: replace
  endpoint:
    path: /api/tls-edge-mutual-tls-module/{id}
    method: PUT
    data_selector: EndpointMutualTLS
- name: EdgesHTTPSClient.create
  endpoint:
    path: /api-edges-https-create
    method: POST
- name: EdgesHTTPSClient.delete
  endpoint:
    path: /api-edges-https-delete
    method: DELETE
- name: EdgesHTTPSClient.get
  endpoint:
    path: /api-edges-https-get
    method: GET
- name: EdgesHTTPSClient.list
  endpoint:
    path: /api-edges-https-list
    method: GET
- name: EdgesHTTPSClient.update
  endpoint:
    path: /api-edges-https-update
    method: PUT
- name: tls_edge_tls_termination_module_client
  endpoint:
    path: /api/tls_edge_tls_termination_module
    method: DELETE
- name: HTTPSEdgeMutualTLSModuleClient
  endpoint:
    path: /api-https-edge-mutual-tls-module
    method: DELETE
    data_selector: resource_identifier
- name: HTTPSEdgeMutualTLSModuleClient
  endpoint:
    path: /api-https-edge-mutual-tls-module
    method: GET
    data_selector: EndpointMutualTLS
- name: HTTPSEdgeMutualTLSModuleClient
  endpoint:
    path: /api-https-edge-mutual-tls-module
    method: REPLACE
    data_selector: EndpointMutualTLS
- name: HTTPS Edge TLS Termination Module
  endpoint:
    path: /https_edge_tls_termination_module
    method: DELETE
    data_selector: resource identifier
    params: {}
- name: HTTPS Edge TLS Termination Module
  endpoint:
    path: /https_edge_tls_termination_module
    method: GET
    data_selector: EndpointTLSTermination
    params: {}
- name: HTTPS Edge TLS Termination Module
  endpoint:
    path: /https_edge_tls_termination_module
    method: REPLACE
    data_selector: EndpointTLSTermination
    params: {}
- name: Event Destinations
  endpoint:
    path: /event_destinations
    method: GET
    data_selector: EventDestinationList
    params: {}
- name: event_subscriptions
  endpoint:
    path: /event_subscriptions
    method: GET
    data_selector: subscriptions
- name: EdgeRouteBackendModuleClient
  endpoint:
    path: /api/edge-route-backend-module
    method: DELETE
- name: EdgeRouteBackendModuleClientGet
  endpoint:
    path: /api/edge-route-backend-module
    method: GET
- name: EdgeRouteBackendModuleClientReplace
  endpoint:
    path: /api/edge-route-backend-module
    method: PUT
- name: event_sources
  endpoint:
    path: /event_sources
    method: GET
    data_selector: EventSource
    params: {}
- name: ip_policy
  endpoint:
    path: /api/ip-policies
    method: GET
- name: EdgeRouteIPRestrictionModuleClient
  endpoint:
    path: /api/edge-route-ip-restriction-module
    method: DELETE
    data_selector: null
    params:
      edge_id: str
      id: str
- name: EdgeRouteIPRestrictionModuleClient
  endpoint:
    path: /api/edge-route-ip-restriction-module
    method: GET
    data_selector: null
    params:
      edge_id: str
      id: str
- name: EdgeRouteIPRestrictionModuleClient
  endpoint:
    path: /api/edge-route-ip-restriction-module
    method: PUT
    data_selector: null
    params:
      edge_id: str
      id: str
      module: EndpointIPPolicyMutate
- name: IPRestrictionsClient
  endpoint:
    path: /api/ip-restrictions
    method: GET
- name: edge_route_request_headers
  endpoint:
    path: /edge_route_request_headers_module
    method: DELETE
- name: edge_route_request_headers
  endpoint:
    path: /edge_route_request_headers_module
    method: GET
- name: edge_route_request_headers
  endpoint:
    path: /edge_route_request_headers_module
    method: REPLACE
- name: ssh_certificate_authorities
  endpoint:
    path: /ssh_certificate_authorities
    method: GET
    data_selector: SSHCertificateAuthorityList
- name: EdgeRouteResponseHeadersModuleClient
  endpoint:
    path: /api/edge-route-response-headers-module
    method: DELETE
    data_selector: parameters
- name: EdgeRouteResponseHeadersModuleClientGet
  endpoint:
    path: /api/edge-route-response-headers-module
    method: GET
    data_selector: parameters
- name: EdgeRouteResponseHeadersModuleClientReplace
  endpoint:
    path: /api/edge-route-response-headers-module
    method: PUT
    data_selector: parameters
- name: delete_edge_route
  endpoint:
    path: /api-edge-route-compression-module-delete
    method: DELETE
- name: get_edge_route
  endpoint:
    path: /api-edge-route-compression-module-get
    method: GET
- name: replace_edge_route
  endpoint:
    path: /api-edge-route-compression-module-replace
    method: PUT
- name: ssh_credentials
  endpoint:
    path: /ssh_credentials
    method: POST
    data_selector: ssh_credentials
    params: {}
- name: ssh_credentials_list
  endpoint:
    path: /ssh_credentials
    method: GET
    data_selector: ssh_credentials
    params: {}
- name: ssh_credentials_get
  endpoint:
    path: /ssh_credentials/{id}
    method: GET
    data_selector: ssh_credentials
    params: {}
- name: ssh_credentials_update
  endpoint:
    path: /ssh_credentials/{id}
    method: PUT
    data_selector: ssh_credentials
    params: {}
- name: ssh_credentials_delete
  endpoint:
    path: /ssh_credentials/{id}
    method: DELETE
    data_selector: ssh_credentials
    params: {}
- name: ssh_host_certificates
  endpoint:
    path: /ssh_host_certificates
    method: CREATE
- name: ssh_user_certificates
  endpoint:
    path: /ssh_user_certificates
    method: GET
- name: delete_edge_route
  endpoint:
    path: /api/edge-route-circuit-breaker-module-delete
    method: DELETE
    data_selector: null
    params:
      edge_id: unique identifier of this edge
      id: unique identifier of this edge route
- name: get_edge_route
  endpoint:
    path: /api/edge-route-circuit-breaker-module-get
    method: GET
    data_selector: null
    params:
      edge_id: unique identifier of this edge
      id: unique identifier of this edge route
- name: replace_edge_route
  endpoint:
    path: /api/edge-route-circuit-breaker-module-replace
    method: PUT
    data_selector: null
    params:
      edge_id: unique identifier of this edge
      id: unique identifier of this edge route
      module: EndpointCircuitBreaker
- name: TLS Certificates
  endpoint:
    path: /api/tls_certificates
    method: GET
    data_selector: TLSCertificateList
- name: tunnel
  endpoint:
    path: /tunnels
    method: GET
- name: EdgeRouteWebhookVerificationModuleClient
  endpoint:
    path: /api/edge-route-webhook-verification-module
    method: DELETE
    data_selector: parameters
    params:
      edge_id: unique identifier of this edge
      id: unique identifier of this edge route
- name: EdgeRouteWebhookVerificationModuleClient
  endpoint:
    path: /api/edge-route-webhook-verification-module
    method: GET
    data_selector: parameters
    params:
      edge_id: unique identifier of this edge
      id: unique identifier of this edge route
- name: EdgeRouteWebhookVerificationModuleClient
  endpoint:
    path: /api/edge-route-webhook-verification-module
    method: REPLACE
    data_selector: parameters
    params:
      edge_id: unique identifier of this edge
      id: unique identifier of this edge route
      module: EndpointWebhookValidation
- name: vaults
  endpoint:
    path: /vaults
    method: GET
    data_selector: VaultList
- name: EdgeRouteSAMLModuleClient.delete
  endpoint:
    path: /api-edge-route-saml-module-delete
    method: DELETE
    data_selector: parameters
    params:
      edge_id: str
      id: str
- name: EdgeRouteSAMLModuleClient.get
  endpoint:
    path: /api-edge-route-saml-module-get
    method: GET
    data_selector: parameters
    params:
      edge_id: str
      id: str
- name: EdgeRouteSAMLModuleClient.replace
  endpoint:
    path: /api-edge-route-saml-module-replace
    method: POST
    data_selector: parameters
    params:
      edge_id: str
      id: str
      module: EndpointSAMLMutate
- name: EdgeRouteWebsocketTCPConverterModuleClient
  endpoint:
    path: /api/edge-route/websocket-tcp-converter-module
    method: GET
- name: EdgeRouteUserAgentFilterModuleClient
  endpoint:
    path: /api/edge-route-user-agent-filter-module
    method: DELETE
    data_selector: delete
    params: {}
- name: EdgeRouteUserAgentFilterModuleClient
  endpoint:
    path: /api/edge-route-user-agent-filter-module
    method: GET
    data_selector: get
    params: {}
- name: EdgeRouteUserAgentFilterModuleClient
  endpoint:
    path: /api/edge-route-user-agent-filter-module
    method: REPLACE
    data_selector: replace
    params: {}
- name: tcp_edges
  endpoint:
    path: /api/edges/tcp
    method: GET
- name: tcp_edge_backend_module
  endpoint:
    path: /tcp_edge_backend_module
    method: GET
- name: tcp_edge_ip_restriction_module
  endpoint:
    path: /tcp_edge_ip_restriction_module
    method: GET
    data_selector: EndpointIPPolicy
    params: {}
- name: TcpEdgeBackendModule
  endpoint:
    path: /services/TcpEdgeBackendModule
    method: GET
- name: TcpEdgeIpRestrictionModule
  endpoint:
    path: /services/TcpEdgeIpRestrictionModule
    method: GET
- name: TlsCertificates
  endpoint:
    path: /services/TlsCertificates
    method: GET
- name: TunnelGroupBackends
  endpoint:
    path: /services/TunnelGroupBackends
    method: GET
- name: Tunnels
  endpoint:
    path: /services/Tunnels
    method: GET
- name: TunnelSessions
  endpoint:
    path: /services/TunnelSessions
    method: GET
- name: WeightedBackends
  endpoint:
    path: /services/WeightedBackends
    method: GET
- name: CertificateAuthorities
  endpoint:
    path: /services/CertificateAuthorities
    method: GET
- name: ReservedDomains
  endpoint:
    path: /services/ReservedDomains
    method: GET
- name: IpPolicyRules
  endpoint:
    path: /services/IpPolicyRules
    method: GET
- name: EdgesHttpsRoutes
  endpoint:
    path: /services/EdgesHttpsRoutes
    method: GET
- name: TLS Edges
  endpoint:
    path: /edges_tls
    method: GET
- name: Create TLS Edge
  endpoint:
    path: /edges_tls/create
    method: POST
- name: Delete TLS Edge
  endpoint:
    path: /edges_tls/delete
    method: DELETE
- name: Get TLS Edge
  endpoint:
    path: /edges_tls/get
    method: GET
- name: List TLS Edges
  endpoint:
    path: /edges_tls/list
    method: GET
- name: Update TLS Edge
  endpoint:
    path: /edges_tls/update
    method: PUT
- name: tls_edge_ip_restriction_module
  endpoint:
    path: /tls_edge_ip_restriction_module
    method: DELETE
- name: tls_edge_ip_restriction_module_get
  endpoint:
    path: /tls_edge_ip_restriction_module
    method: GET
- name: tls_edge_ip_restriction_module_replace
  endpoint:
    path: /tls_edge_ip_restriction_module
    method: PUT
- name: tls_edge_mutual_tls_module
  endpoint:
    path: /api/tls-edge-mutual-tls-module
    method: GET
- name: tls_edge_tls_termination_module
  endpoint:
    path: /api/tls-edge-tls-termination-module
    method: DELETE
    data_selector: resource_identifier
- name: tls_edge_tls_termination_module
  endpoint:
    path: /api/tls-edge-tls-termination-module
    method: GET
    data_selector: resource_identifier
- name: tls_edge_tls_termination_module
  endpoint:
    path: /api/tls-edge-tls-termination-module
    method: REPLACE
    data_selector: resource_identifier
- name: tls_edge_traffic_policy_module
  endpoint:
    path: /api/tls-edge-traffic-policy-module
    method: GET
- name: EventDestinations
  endpoint:
    path: /services/EventDestinations
    method: GET
- name: EventSources
  endpoint:
    path: /services/EventSources
    method: GET
- name: EventSubscriptions
  endpoint:
    path: /services/EventSubscriptions
    method: GET
- name: event_destinations
  endpoint:
    path: /event_destinations
    method: GET
    data_selector: EventDestinationList
- name: event_subscriptions
  endpoint:
    path: /event_subscriptions
    method: POST
    data_selector: EventSubscription
    params: {}
- name: event_sources
  endpoint:
    path: /event_sources
    method: GET
- name: ip_policies
  endpoint:
    path: /ip_policies
    method: GET
- name: ip_policy_rules
  endpoint:
    path: /api/ip-policy-rules
    method: GET
    data_selector: IPPolicyRuleList
- name: IPRestrictionsClient
  endpoint:
    path: /api/ip-restrictions
    method: GET
- name: create_reserved_address
  endpoint:
    path: /reserved_addrs
    method: POST
    data_selector: ReservedAddr
    params: {}
- name: delete_reserved_address
  endpoint:
    path: /reserved_addrs/{id}
    method: DELETE
    data_selector: ReservedAddr
    params: {}
- name: get_reserved_address
  endpoint:
    path: /reserved_addrs/{id}
    method: GET
    data_selector: ReservedAddr
    params: {}
- name: list_reserved_addresses
  endpoint:
    path: /reserved_addrs
    method: GET
    data_selector: ReservedAddrList
    params: {}
- name: update_reserved_address
  endpoint:
    path: /reserved_addrs/{id}
    method: PATCH
    data_selector: ReservedAddr
    params: {}
- name: reserved_domains
  endpoint:
    path: /reserved_domains
    method: GET
- name: abuse_report
  endpoint:
    path: /services/AbuseReports
    method: GET
    data_selector: report
- name: agent_ingress
  endpoint:
    path: /services/AgentIngresses
    method: GET
    data_selector: ingress
- name: api_key
  endpoint:
    path: /services/ApiKeys
    method: GET
    data_selector: apiKey
- name: certificate_authority
  endpoint:
    path: /services/CertificateAuthorities
    method: GET
    data_selector: certificateAuthority
- name: credentials
  endpoint:
    path: /services/Credentials
    method: GET
    data_selector: credential
- name: edges_https
  endpoint:
    path: /services/EdgesHttps
    method: GET
    data_selector: httpsEdge
- name: edges_tcp
  endpoint:
    path: /services/EdgesTcp
    method: GET
    data_selector: tcpEdge
- name: edges_tls
  endpoint:
    path: /services/EdgesTls
    method: GET
    data_selector: tlsEdge
- name: endpoints
  endpoint:
    path: /services/Endpoints
    method: GET
    data_selector: endpoint
- name: event_destinations
  endpoint:
    path: /services/EventDestinations
    method: GET
    data_selector: eventDestination
- name: event_subscriptions
  endpoint:
    path: /services/EventSubscriptions
    method: GET
    data_selector: eventSubscription
- name: failover_backends
  endpoint:
    path: /services/FailoverBackends
    method: GET
    data_selector: failoverBackend
- name: http_response_backends
  endpoint:
    path: /services/HttpResponseBackends
    method: GET
    data_selector: httpResponseBackend
- name: ip_policies
  endpoint:
    path: /services/IpPolicies
    method: GET
    data_selector: ipPolicy
- name: ip_policy_rules
  endpoint:
    path: /services/IpPolicyRules
    method: GET
    data_selector: ipPolicyRule
- name: ip_restrictions
  endpoint:
    path: /services/IpRestrictions
    method: GET
    data_selector: ipRestriction
- name: reserved_addrs
  endpoint:
    path: /services/ReservedAddrs
    method: GET
    data_selector: reservedAddr
- name: reserved_domains
  endpoint:
    path: /services/ReservedDomains
    method: GET
    data_selector: reservedDomain
- name: ssh_certificate_authorities
  endpoint:
    path: /services/SshCertificateAuthorities
    method: GET
    data_selector: sshCertificateAuthority
- name: ssh_credentials
  endpoint:
    path: /services/SshCredentials
    method: GET
    data_selector: sshCredential
- name: ssh_host_certificates
  endpoint:
    path: /services/SshHostCertificates
    method: GET
    data_selector: sshHostCertificate
- name: ssh_user_certificates
  endpoint:
    path: /services/SshUserCertificates
    method: GET
    data_selector: sshUserCertificate
- name: tunnels
  endpoint:
    path: /services/Tunnels
    method: GET
    data_selector: tunnel
- name: tunnel_sessions
  endpoint:
    path: /services/TunnelSessions
    method: GET
    data_selector: tunnelSession
- name: ssh_certificate_authorities
  endpoint:
    path: /ssh_certificate_authorities
    method: GET
    data_selector: SSHCertificateAuthorityList
- name: ssh_credentials
  endpoint:
    path: /ssh_credentials
    method: GET
- name: ssh_host_certificates
  endpoint:
    path: /ssh_host_certificates
    method: GET
- name: ssh_user_certificates
  endpoint:
    path: /ssh_user_certificates
    method: GET
    data_selector: SSHUserCertificateList
- name: tls_certificates
  endpoint:
    path: /tls_certificates
    method: GET
- name: tunnels
  endpoint:
    path: /tunnels
    method: GET
- name: vaults
  endpoint:
    path: /vaults
    method: GET
    data_selector: VaultList
- name: Agent Ingresses
  endpoint:
    path: /agent/ingresses
    method: GET
    data_selector: ingresses
- name: API Keys
  endpoint:
    path: /api/keys
    method: GET
    data_selector: keys
- name: Certificate Authorities
  endpoint:
    path: /certificates
    method: GET
    data_selector: authorities
- name: Credentials
  endpoint:
    path: /credentials
    method: GET
    data_selector: credentials
- name: Edges HTTPS
  endpoint:
    path: /edges/https
    method: GET
    data_selector: https_edges
- name: Edges TCP
  endpoint:
    path: /edges/tcp
    method: GET
    data_selector: tcp_edges
- name: Edges TLS
  endpoint:
    path: /edges/tls
    method: GET
    data_selector: tls_edges
- name: Endpoints
  endpoint:
    path: /endpoints
    method: GET
    data_selector: endpoints
- name: Event Destinations
  endpoint:
    path: /event/destinations
    method: GET
    data_selector: event_destinations
- name: Event Subscriptions
  endpoint:
    path: /event/subscriptions
    method: GET
    data_selector: event_subscriptions
- name: Failover Backends
  endpoint:
    path: /failover/backends
    method: GET
    data_selector: failover_backends
- name: IP Policies
  endpoint:
    path: /ip/policies
    method: GET
    data_selector: ip_policies
- name: IP Policy Rules
  endpoint:
    path: /ip/policy/rules
    method: GET
    data_selector: ip_policy_rules
- name: IP Restrictions
  endpoint:
    path: /ip/restrictions
    method: GET
    data_selector: ip_restrictions
- name: abuseReports
  endpoint:
    path: /abuseReports
    method: POST
    data_selector: abuseReport
    params: {}
- name: agentIngresses
  endpoint:
    path: /agentIngresses
    method: GET
    data_selector: agentIngressList
    params: {}
- name: apiKeys
  endpoint:
    path: /apiKeys
    method: GET
    data_selector: apiKeyList
    params: {}
- name: ReservedAddrs
  endpoint:
    path: /services/ReservedAddrs/list
    method: GET
    data_selector: records
- name: ReservedDomains
  endpoint:
    path: /services/ReservedDomains/list
    method: GET
    data_selector: records
- name: SshCertificateAuthorities
  endpoint:
    path: /services/SshCertificateAuthorities/list
    method: GET
    data_selector: records
- name: SshCredentials
  endpoint:
    path: /services/SshCredentials/list
    method: GET
    data_selector: records
- name: SshHostCertificates
  endpoint:
    path: /services/SshHostCertificates/list
    method: GET
    data_selector: records
- name: SshUserCertificates
  endpoint:
    path: /services/SshUserCertificates/list
    method: GET
    data_selector: records
- name: TlsCertificates
  endpoint:
    path: /services/TlsCertificates/list
    method: GET
    data_selector: records
- name: TunnelGroupBackends
  endpoint:
    path: /services/TunnelGroupBackends/list
    method: GET
    data_selector: records
- name: Tunnels
  endpoint:
    path: /services/Tunnels/list
    method: GET
    data_selector: records
- name: TunnelSessions
  endpoint:
    path: /services/TunnelSessions/list
    method: GET
    data_selector: records
- name: WeightedBackends
  endpoint:
    path: /services/WeightedBackends/list
    method: GET
    data_selector: records
- name: EventSources
  endpoint:
    path: /services/EventSources/list
    method: GET
    data_selector: records
- name: TcpEdgeBackendModule
  endpoint:
    path: /TcpEdgeBackendModule
    method: GET
- name: TcpEdgeIpRestrictionModule
  endpoint:
    path: /TcpEdgeIpRestrictionModule
    method: GET
- name: TlsCertificates
  endpoint:
    path: /TlsCertificates
    method: GET
- name: TunnelGroupBackends
  endpoint:
    path: /TunnelGroupBackends
    method: GET
- name: Tunnels
  endpoint:
    path: /Tunnels
    method: GET
- name: TunnelSessions
  endpoint:
    path: /TunnelSessions
    method: GET
- name: WeightedBackends
  endpoint:
    path: /WeightedBackends
    method: GET
- name: CertificateAuthorities
  endpoint:
    path: /CertificateAuthorities
    method: GET
- name: SshUserCertificate
  endpoint:
    path: /sshUserCertificates
    method: GET
- name: tunnel
  endpoint:
    path: /tunnels
    method: GET
    data_selector: tunnels
    params: {}
- name: tunnel_session
  endpoint:
    path: /tunnel_sessions
    method: GET
    data_selector: tunnel_sessions
    params: {}
- name: EventDestination
  endpoint:
    path: /event_destinations
    method: GET
    data_selector: data
- name: EventSource
  endpoint:
    path: /event_sources
    method: GET
    data_selector: data
- name: EventSubscription
  endpoint:
    path: /event_subscriptions
    method: GET
    data_selector: data
- name: AgentIngresses
  endpoint:
    path: /services/AgentIngresses
    method: update
    data_selector: null
    params: {}
- name: ApiKeys
  endpoint:
    path: /services/ApiKeys
    method: update
    data_selector: null
    params: {}
- name: CertificateAuthorities
  endpoint:
    path: /services/CertificateAuthorities
    method: update
    data_selector: null
    params: {}
- name: Credentials
  endpoint:
    path: /services/Credentials
    method: update
    data_selector: null
    params: {}
- name: EdgesHttps
  endpoint:
    path: /services/EdgesHttps
    method: update
    data_selector: null
    params: {}
- name: EdgesTcp
  endpoint:
    path: /services/EdgesTcp
    method: update
    data_selector: null
    params: {}
- name: EdgesTls
  endpoint:
    path: /services/EdgesTls
    method: update
    data_selector: null
    params: {}
- name: EventDestinations
  endpoint:
    path: /services/EventDestinations
    method: update
    data_selector: null
    params: {}
- name: EventSubscriptions
  endpoint:
    path: /services/EventSubscriptions
    method: update
    data_selector: null
    params: {}
- name: FailoverBackends
  endpoint:
    path: /services/FailoverBackends
    method: update
    data_selector: null
    params: {}
- name: HttpResponseBackends
  endpoint:
    path: /services/HttpResponseBackends
    method: update
    data_selector: null
    params: {}
- name: IpPolicies
  endpoint:
    path: /services/IpPolicies
    method: update
    data_selector: null
    params: {}
- name: IpPolicyRules
  endpoint:
    path: /services/IpPolicyRules
    method: update
    data_selector: null
    params: {}
- name: IpRestrictions
  endpoint:
    path: /services/IpRestrictions
    method: update
    data_selector: null
    params: {}
- name: ReservedAddrs
  endpoint:
    path: /services/ReservedAddrs
    method: update
    data_selector: null
    params: {}
- name: ReservedDomains
  endpoint:
    path: /services/ReservedDomains
    method: update
    data_selector: null
    params: {}
- name: SshCertificateAuthorities
  endpoint:
    path: /services/SshCertificateAuthorities
    method: update
    data_selector: null
    params: {}
- name: SshCredentials
  endpoint:
    path: /services/SshCredentials
    method: update
    data_selector: null
    params: {}
- name: SshHostCertificates
  endpoint:
    path: /services/SshHostCertificates
    method: update
    data_selector: null
    params: {}
- name: SshUserCertificates
  endpoint:
    path: /services/SshUserCertificates
    method: update
    data_selector: null
    params: {}
- name: TlsCertificates
  endpoint:
    path: /services/TlsCertificates
    method: update
    data_selector: null
    params: {}
- name: TunnelGroupBackends
  endpoint:
    path: /services/TunnelGroupBackends
    method: update
    data_selector: null
    params: {}
- name: TunnelSessions
  endpoint:
    path: /services/TunnelSessions
    method: update
    data_selector: null
    params: {}
- name: WeightedBackends
  endpoint:
    path: /services/WeightedBackends
    method: update
    data_selector: null
    params: {}
- name: AbuseReports
  endpoint:
    path: /services/AbuseReports
    method: GET
- name: AgentIngresses
  endpoint:
    path: /services/AgentIngresses
    method: GET
- name: ApiKeys
  endpoint:
    path: /services/ApiKeys
    method: GET
- name: CertificateAuthorities
  endpoint:
    path: /services/CertificateAuthorities
    method: GET
- name: Credentials
  endpoint:
    path: /services/Credentials
    method: GET
- name: EdgesHttps
  endpoint:
    path: /services/EdgesHttps
    method: GET
- name: EdgesTcp
  endpoint:
    path: /services/EdgesTcp
    method: GET
- name: EdgesTls
  endpoint:
    path: /services/EdgesTls
    method: GET
- name: Endpoints
  endpoint:
    path: /services/Endpoints
    method: GET
- name: EventDestinations
  endpoint:
    path: /services/EventDestinations
    method: GET
- name: EventSubscriptions
  endpoint:
    path: /services/EventSubscriptions
    method: GET
- name: FailoverBackends
  endpoint:
    path: /services/FailoverBackends
    method: GET
- name: HttpResponseBackends
  endpoint:
    path: /services/HttpResponseBackends
    method: GET
- name: HttpsEdgeMutualTlsModule
  endpoint:
    path: /services/HttpsEdgeMutualTlsModule
    method: GET
- name: HttpsEdgeTlsTerminationModule
  endpoint:
    path: /services/HttpsEdgeTlsTerminationModule
    method: GET
- name: IpPolicies
  endpoint:
    path: /services/IpPolicies
    method: GET
- name: IpPolicyRules
  endpoint:
    path: /services/IpPolicyRules
    method: GET
- name: IpRestrictions
  endpoint:
    path: /services/IpRestrictions
    method: GET
- name: ReservedAddrs
  endpoint:
    path: /services/ReservedAddrs
    method: GET
- name: ReservedDomains
  endpoint:
    path: /services/ReservedDomains
    method: GET
- name: SshCertificateAuthorities
  endpoint:
    path: /services/SshCertificateAuthorities
    method: GET
- name: SshCredentials
  endpoint:
    path: /services/SshCredentials
    method: GET
- name: SshHostCertificates
  endpoint:
    path: /services/SshHostCertificates
    method: GET
- name: SshUserCertificates
  endpoint:
    path: /services/SshUserCertificates
    method: GET
- name: TcpEdgeBackendModule
  endpoint:
    path: /services/TcpEdgeBackendModule
    method: GET
- name: TcpEdgeIpRestrictionModule
  endpoint:
    path: /services/TcpEdgeIpRestrictionModule
    method: GET
- name: TlsCertificates
  endpoint:
    path: /services/TlsCertificates
    method: GET
- name: TlsEdgeBackendModule
  endpoint:
    path: /services/TlsEdgeBackendModule
    method: GET
- name: TlsEdgeIpRestrictionModule
  endpoint:
    path: /services/TlsEdgeIpRestrictionModule
    method: GET
- name: TlsEdgeMutualTlsModule
  endpoint:
    path: /services/TlsEdgeMutualTlsModule
    method: GET
- name: TlsEdgeTlsTerminationModule
  endpoint:
    path: /services/TlsEdgeTlsTerminationModule
    method: GET
- name: TunnelGroupBackends
  endpoint:
    path: /services/TunnelGroupBackends
    method: GET
- name: Tunnels
  endpoint:
    path: /services/Tunnels
    method: GET
- name: TunnelSessions
  endpoint:
    path: /services/TunnelSessions
    method: GET
- name: WeightedBackends
  endpoint:
    path: /services/WeightedBackends
    method: GET
- name: credential
  endpoint:
    path: /definitions/Credential
    method: GET
    data_selector: authtoken
    params: {}
- name: tunnel
  endpoint:
    path: /definitions/Tunnel
    method: GET
    data_selector: tunnel
    params: {}
- name: endpoint
  endpoint:
    path: /definitions/Endpoint
    method: GET
    data_selector: endpoint
    params: {}
- name: IpPolicies
  endpoint:
    path: /ip_policies
    method: GET
- name: IpPolicy
  endpoint:
    path: /ip_policy
    method: GET
- name: IpRestrictions
  endpoint:
    path: /ip_restrictions
    method: GET
- name: agent_ingresses
  endpoint:
    path: /agent_ingresses
    method: GET
    data_selector: records
- name: api_keys
  endpoint:
    path: /api_keys
    method: GET
    data_selector: records
- name: certificate_authorities
  endpoint:
    path: /certificate_authorities
    method: GET
    data_selector: records
- name: credentials
  endpoint:
    path: /credentials
    method: GET
    data_selector: records
- name: edges_https
  endpoint:
    path: /edges_https
    method: GET
    data_selector: records
- name: edges_tcp
  endpoint:
    path: /edges_tcp
    method: GET
    data_selector: records
- name: edges_tls
  endpoint:
    path: /edges_tls
    method: GET
    data_selector: records
- name: endpoints
  endpoint:
    path: /endpoints
    method: GET
    data_selector: records
- name: event_destinations
  endpoint:
    path: /event_destinations
    method: GET
    data_selector: records
- name: event_subscriptions
  endpoint:
    path: /event_subscriptions
    method: GET
    data_selector: records
- name: failover_backends
  endpoint:
    path: /failover_backends
    method: GET
    data_selector: records
- name: http_response_backends
  endpoint:
    path: /http_response_backends
    method: GET
    data_selector: records
- name: ip_policies
  endpoint:
    path: /ip_policies
    method: GET
    data_selector: records
- name: ip_policy_rules
  endpoint:
    path: /ip_policy_rules
    method: GET
    data_selector: records
- name: ip_restrictions
  endpoint:
    path: /ip_restrictions
    method: GET
    data_selector: records
- name: ReservedAddrs
  endpoint:
    path: /services/ReservedAddrs
    method: GET
- name: ReservedDomains
  endpoint:
    path: /services/ReservedDomains
    method: GET
- name: SshCertificateAuthorities
  endpoint:
    path: /services/SshCertificateAuthorities
    method: GET
- name: SshCredentials
  endpoint:
    path: /services/SshCredentials
    method: GET
- name: SshHostCertificates
  endpoint:
    path: /services/SshHostCertificates
    method: GET
- name: SshUserCertificates
  endpoint:
    path: /services/SshUserCertificates
    method: GET
- name: TlsCertificates
  endpoint:
    path: /services/TlsCertificates
    method: GET
- name: TunnelGroupBackends
  endpoint:
    path: /services/TunnelGroupBackends
    method: GET
- name: Tunnels
  endpoint:
    path: /services/Tunnels
    method: GET
- name: TunnelSessions
  endpoint:
    path: /services/TunnelSessions
    method: GET
- name: WeightedBackends
  endpoint:
    path: /services/WeightedBackends
    method: GET
- name: EventSources
  endpoint:
    path: /services/EventSources
    method: GET
- name: sshUserCertificates
  endpoint:
    path: /services/SshUserCertificates
    method: GET
notes:
- ngrok is flexible API gateway for instant, secure connectivity
- Pay only for active endpoints and successful API calls
- ngrok is now HIPAA-compliant
- ngrok is SOC 2 Type II compliant.
- ngrok is now HIPAA-compliant!
- ngrok’s built-in API gateway enables secure and instant connectivity to APIs with
  just one command or one function call.
- With ngrok, we get comprehensive security with a full scope of functionality for
  all of our use cases.
- ngrok API requires OAuth2 authentication.
- Leverage industry-standard protocols such as mTLS, OAuth, SAML, JWT, or OpenID Connect
  to authenticate your apps and APIs.
- Implement Fine-Grained Access Control
- ngrok is SOC 2 Type 2 compliant.
- Connect remotely without VPN or SSH.
- Monthly Office Hours for ngrok knowledge.
- Looking for account-specific help? Reach out to us right now at support@ngrok.com.
- API requires OAuth2 authentication.
- Requests to the API must include an API key as a bearer token in the Authorization
  header.
- ngrok is useful for opening a tunnel to a port on localhost for service testing
- ngrok makes testing responsive designs easier
- Agent SDKs enable you to embed ngrok directly into your application.
- Usage credit is an amount that can be spent to use ngrok services.
- Uses OAuth2 with refresh token.
- The ngrok agent authenticates with an authtoken.
- Use a separate authtoken for each agent you configure.
- All agents must use an authtoken to authenticate with ngrok
- ngrok is a simplified API-first ingress-as-a-service that adds connectivity, security,
  and observability to your apps in one line
- ngrok makes it simple to add authentication to your app by implementing a Traffic
  Policy
- Agent SDKs are often a better fit for your use case over using the ngrok agent.
- Instant access to any system without network pain
- The ngrok agent is lightweight enough to run most everywhere
- You can configure whether the agent checks for updates via the update_check config
  parameter
- You can configure which release channel (e.g. stable, beta) the agent uses for updates
  via the update_channel config parameter
- Instant access to any system without network pain. No dynamic DNS, port forwarding,
  and VPNs required.
- Basic support included for all users.
- Ideal for hobbyist developers working on DIY projects.
- All previous items plus online support portal and prioritized incident support.
- To block phishing attacks using our platform, ngrok has added an interstitial page
  for free accounts receiving requests from browsers.
- Users should only see this page once per endpoint and it can be completely bypassed
  by adding the ngrok-skip-browser-warning header to your request.
- We do not knowingly sell or share the personal information of minors under 16 years
  of age.
- Requires an ngrok account for access to the API.
- Ensure proper OAuth scopes are set for the application.
- You will be solely responsible for all use of the ngrok Services accessed by you.
- You will take all reasonable precautions to prevent unauthorized access to or use
  of the ngrok Services.
- You can check your usage in the ngrok dashboard
- The free tier does NOT have timeouts on tunnels.
- ngrok injects an interstitial page in front of all HTML browser traffic on the free
  tier.
- ngrok works everywhere and the same in any environment and on any network.
- ngrok consolidates multiple ingress components into one platform.
- ngrok helps deliver apps to production sooner by automating setup work.
- Customer retains all right, title, and interest in Customer Personal Data.
- All users need to register for an account and use a valid authtoken to use ngrok.
- Applications exposed via ngrok’s HTTP endpoints will work with CORS.
- If you use any of ngrok’s authentication modules, CORS preflight options requests
  are blocked by default.
- This example uses ngrok’s default Google OAuth application.
- For the most complete limits and pricing information, please see our ngrok Pricing
  page.
- You can remove the interstitial by upgrading to any paid plan.
- The ngrok agent uses a simple YAML configuration file
- Authtokens isolate the security risk if an authtoken is compromised
- TPUs are sold in bundles of 100,000 for $1 and are charged as your policies execute.
- All agents must use an authtoken to authenticate with ngrok.
- You can reduce memory usage in the ngrok agent by disabling inspection in the configuration
  file.
- ngrok operates a global network of servers called the ngrok cloud service
- You can run the agent software in different form factors
- Removed the ability to use ngrok without an account. All users need to register
  for an account and use a valid authtoken to use ngrok.
- ngrok accepts traffic on port 80 for HTTP endpoints, 443 for HTTPS endpoints and
  port 443 as well for TLS endpoints. This behavior is not configurable.
- Traffic policies are optional for agent endpoints but required for cloud endpoints.
- If the internal agent endpoint is not reachable, a custom response will indicate
  that the app is offline.
- Secrets management is only available via the ngrok API (no dashboard UI)
- Secrets interpolated into certain actions may appear in cleartext in Traffic Inspector
  when full capture mode is enabled
- Separate authtokens isolate the security risk if an authtoken is compromised.
- IP Policies can specify which IPs and CIDRs agents may connect to your ngrok account
  from
- The ngrok Kubernetes Operator is deployed to a cluster and allows developers to
  self-service endpoints to their apps and services using a shared ngrok account.
- Endpoint pooling is disabled by default. Endpoint pooling is enabled on a per-endpoint
  basis.
- Traffic Policy enables consistent traffic management across endpoints.
- TCP Addresses are available on paid plans only, they are not available on the free
  plan.
- TLS certificates are available on all plans.
- Bringing your own certificates is available on the Pay-as-you-go plan.
- Edges, Routes, Modules, Backends and Labeled Tunnels are deprecated and will be
  sunset on December 31st, 2025.
- Custom load balancing strategies are not yet generally available, but you can request
  early access to the developer preview in your ngrok dashboard.
- Identities and Sessions were previously called ‘App Users’
- ngrok runs a global delivery network of PoPs for you.
- All endpoints you create in ngrok are available on ngrok’s worldwide global delivery
  network.
- ngrok automatically handles TLS (SSL) termination and certificate management
- You may customize each endpoint to choose where TLS is terminated, how it is terminated
  and even whether it is terminated at all.
- ngrok automatically protects your applications with out-of-the-box protection from
  distributed denial of service (DDoS) attacks.
- Traffic Policy is enforced in the ngrok cloud service so that only legitimate traffic
  is sent to the upstream service in your network.
- ngrok’s cloud service uses a dynamic, rotating set of multitenant IPs to serve your
  public Endpoints.
- Endpoint IPs may change frequently and without notice.
- Cloud Endpoints are persistent, always-on endpoints whose creation, deletion and
  configuration is managed centrally via the Dashboard or API.
- Cloud Endpoints must specify a fully qualified URL when created.
- Kubernetes endpoints are secure, private endpoints that are only addressable inside
  of Kubernetes clusters.
- Inspection is only supported for HTTP endpoints. TCP and TLS endpoints do not support
  any inspection.
- ngrok automatically routes traffic to the nearest healthy point of presence.
- There is no way to disable GSLB for HTTPS and TLS endpoints.
- ngrok automatically handles TLS termination and certificate management.
- You may choose to terminate TLS at your upstream service or at the ngrok agent to
  achieve end-to-end encryption.
- ngrok automatically protects your applications with out-of-the-box protection from
  DDoS attacks.
- If you hardcode any of ngrok’s IPs or rely on DNS answers past their TTL, your applications
  will break.
- Dedicated, static IPs for public endpoints coming soon, request access to the developer
  preview.
- ngrok’s cloud service universally supports IPv6.
- When you resolve Endpoint IPs via DNS, you will receive a partial list of IPs because
  ngrok’s global load balancer will return a different set of IPs depending on where
  you are located in the world.
- ngrok requires a valid account for advanced features.
- TCP endpoints are only available on a free plan after adding a valid payment method
  to your account.
- ngrok requires that you sign up for an account to use many advanced service features.
- Kubernetes endpoints support all Endpoint Types (agent and cloud).
- Starts a tunnel with labels so that it can be part of a tunnel-group.
- Forward HTTP traffic from an ngrok endpoint URL to a local port, address or URL.
- ngrok automatically chooses the region with lowest latency
- Some advanced service features require a paid account.
- API key is required for all operations.
- API key is required for all requests.
- Usage of `--log` flag can specify output to stdout, stderr, or a file.
- Do not run this command if you installed ngrok with a package manager (i.e. homebrew,
  chocolatey, apt, snap, etc). Instead, update ngrok by using your package manager’s
  update command.
- Requires setup of ngrok application with proper permissions.
- API key required for all requests
- All api subcommands require an API key.
- Initial API key can be found at https://dashboard.ngrok.com/api.
- Path to config files can be specified with --config flag.
- Logging options include --log, --log-format, and --log-level.
- API key is required for all requests
- API key is required for authentication.
- Default values are specified for various flags.
- The ngrok API requires an API key for authentication.
- Human-readable and machine-readable information is optional.
- Only active endpoints associated with a tunnel or backend are returned.
- IP policies and restrictions require an API key.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Logging level can be set to debug, info, warn, error, or crit.
- API requires an API key for authentication.
- The ngrok agent supports an optional, YAML configuration file.
- You’ll need to upload an SSH public key to authenticate with instead of using an
  ngrok authtoken.
- Custom Connect URLs are not available on self‑serve plans.
- The ngrok agent supports an optional, YAML configuration file which provides the
  power to run multiple tunnels simultaneously.
- ngrok does not generate CA and client certificates for you when you use mTLS; you
  must generate them yourself.
- Your client certificates need to be distributed to any client or device that needs
  access to your endpoints.
- Supports a minor release for 14 months including patches and critical security fixes.
- No more patches or critical security fixes will occur during the last two months
  of a support period.
- The diagnose command gathers environment information and tests connectivity.
- The SSH reverse tunnel agent has many functional limitations compared to the ngrok
  agent.
- You will need to upload an SSH public key to authenticate with instead of using
  an ngrok authtoken.
- Agents connecting via your custom Connect URL must authenticate to your ngrok account;
  connections using credentials from other accounts are rejected.
- Custom Connect URLs support both ngrok‑issued and Let’s Encrypt certificates.
- Endpoints must match a Domain on your account.
- Configure your endpoint with an agent configuration file
- Use 'ngrok start endpoint_name_here' to start an endpoint
- ngrok automatically handles TLS (SSL) certificate management and termination for
  you.
- TLS endpoints enable you to deliver any network service that runs over a TLS-based
  protocol.
- If you are delivering an HTTPS application, prefer to create an HTTP Endpoint.
- ngrok will support a minor release for 14 months.
- No more patches or critical security fixes will occur towards the end of the support
  period.
- The diagnose command gathers your environment information, including your sanitized
  configuration file.
- By default, ngrok diagnose tests IPv4 connectivity.
- Everyone gets three days of traffic retention, after which the traffic events are
  purged from the system.
- Storing the full request and response data may mean you and your team members have
  access to sensitive data flowing through your endpoints.
- Public endpoints are accessible to the public internet unless you secure them with
  authentication.
- HTTP/S endpoints are standards-compliant HTTP reverse proxies.
- When http2 forwarding is enabled, all requests to your upstream service will be
  transmitted over HTTP/2 Cleartext since TLS was already terminated at the ngrok
  cloud service.
- Add SSO, Mutual TLS, IP Policy, and webhook signature verification.
- ngrok is no longer using Slack for community feedback and support.
- For enterprise customers with dedicated ngrok Slack channels, there is no change.
- Requests to the API must set the ngrok-version header.
- This library wraps the ngrok HTTP API to make it easier to consume in Ruby.
- ngrok is no longer using Slack for community feedback and support
- The API pages all list resources but this library abstracts that away from you.
- 'Automatic Paging: The ngrok API pages all list resources but this library abstracts
  that away from you.'
- Create an API key on the API Keys page of your ngrok dashboard
- Requires an API key from the API Keys page of your ngrok dashboard.
- Requires OAuth setup for API access
- This API is only available to authorized accounts.
- APIKey endpoints allow for management of API keys.
- This API is only available to authorized accounts. Contact abuse@ngrok.com to request
  access.
- API Keys are used to authenticate to the ngrok API
- Tunnel Credentials are ngrok agent authtokens.
- Do not construct this object directly, instead access the edges_tcp property of
  an ngrok.Client object.
- Do not construct this object directly, instead access the secrets property of an
  ngrok.Client object.
- arbitrary user-defined machine-readable data of this edge; optional, max 4096 bytes.
- Uses OAuth2 with refresh token — requires setup of connected app in ngrok
- Some endpoints may have rate limits
errors:
- '401 Unauthorized: Check your API key or token'
- '403 Forbidden: Invalid credentials or insufficient permissions'
- '404 Not Found: The requested resource could not be found'
- '429 Too Many Requests: Rate limit exceeded'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: The requested resource does not exist.'
- 'ERR_NGROK_218: Your request has not specified an API version. Please include the
  version you wish to use in the Ngrok-Version header. Supported versions: 2.'
- '429: Rate limit exceeded. The ngrok API enforces a limit on all accounts of 120
  requests over a rolling 60 second window.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Input/output error: Indicates that ngrok is not able to find the config file and/or
  does not have permissions to do so.'
- '401 Unauthorized: Check your credentials.'
- '403 Forbidden: Ensure you have access to the resource.'
- Upgrade to a plan with higher limits if you hit a limit.
- '401 Unauthorized: Recheck your authtoken'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Invalid API key or missing token.'
- '404 Not Found: The requested endpoint does not exist.'
- '401 Unauthorized: Ensure API key is valid.'
- '404 Not Found: Check the resource ID or path.'
- '401 Unauthorized: Check your OAuth access token.'
- '404 Not Found: Verify endpoint URL.'
- '401 Unauthorized: Check your API key.'
- '403 Forbidden: You do not have permission to access this resource.'
- 'Invalid API key: Check your API key for correctness.'
- 'Configuration error: Ensure configuration file paths are correct.'
- 'Invalid API key: Check your API key and try again'
- 'Request failed: Ensure the endpoint is correct'
- 'Invalid API Key: Check your API key.'
- 'Not Found: Ensure the endpoint exists.'
- 'Invalid API key: Check the key you are using.'
- '404 Not Found: Ensure the endpoint exists.'
- '401 Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Recheck API key'
- '--api-key: API key to use'
- '--config: path to config files; they are merged if multiple'
- '--log: path to log file, ‘stdout’, ‘stderr’ or ‘false’'
- '--log-format: log record format: ‘term’, ‘logfmt’, ‘json’'
- '--log-level: logging level: ‘debug’, ‘info’, ‘warn’, ‘error’, ‘crit’'
- '401 Unauthorized: Recheck API key.'
- '401 Unauthorized: Ensure API key is valid'
- '401 Unauthorized: Check your API key or permissions.'
- 'INVALID_API_KEY: Ensure the API key is correct.'
- 'RESOURCE_NOT_FOUND: Check the resource ID used in the request.'
- 'UNAUTHORIZED_ACCESS: Verify permissions for the API key.'
- 'Unauthorized: API key is missing or invalid.'
- 'Not Found: The requested resource does not exist.'
- Connection will be closed if an error is encountered while handling connections
  to a TCP endpoint.
- 'INVALID_HOSTNAME: Ensure the hostname has a valid public suffix.'
- 'INVALID_PORT: Use port 80 for HTTP or 443 for HTTPS.'
- If a TLS handshake fails, an appropriate TLS abort code will be sent to the client.
- In all other cases, if an error is encountered while handling TLS connections to
  your endpoints, the connection will be closed.
- 'NGROK_ERR_8000: Failed to establish internet connectivity: resolver returned no
  IPs.'
- 'Invalid hostname: Hostname must be a domain with a valid public suffix.'
- 'Invalid port: Port number must be 80 for HTTP or 443 for HTTPS.'
- 'ngrok-error-code: Set in the HTTP response when ngrok fails to handle an HTTP request.'
- In all other cases, if an error is encountered while handling TLS connections to
  your endpoints (e.g. no available backends or internal server error), the connection
  will be closed.
- '401 Unauthorized: Invalid API key.'
- '403 Forbidden: API key does not have permission to access this resource.'
- http status code, ngrok error code, ngrok error message, optional additional error-specific
  details
- 'http status code: Detailed information when an API call fails.'
- '401 Unauthorized: Check your credentials'
- unexpected network error that you could retry
- An unexpected network error that you could retry
- '401 Unauthorized: Check OAuth token or scopes'
- '404 Not Found: Verify the endpoint or resource ID'
- code: ERR_NGROK_100
  message: Invalid metadata length
- code: ERR_NGROK_108
  message: You’ve hit your account limit for simultaneous ngrok agent sessions. Try
    stopping an existing agent or upgrading your account.
- code: ERR_NGROK_120
  message: 'Your ngrok agent version `VERSION` is no longer supported. Only the most
    recent version of the ngrok agent is supported without an account. Update to a
    newer version with `ngrok update` or by downloading from https://download.ngrok.com.
    Sign up for an account to avoid forced version upgrades: https://ngrok.com/signup.'
- code: ERR_NGROK_1205
  message: You failed to solve the catpcha, please try again.
- code: ERR_NGROK_1226
  message: You are disallowed from creating an ngrok account due to violation of the
    terms of service.
- code: ERR_NGROK_3004
  message: ngrok gateway error. The server returned an invalid or incomplete HTTP
    response. Try starting ngrok with the full upstream service URL (e.g. ngrok http
    https://localhost:8081)
- code: ERR_NGROK_3200
  message: Tunnel not found. This could be because your agent is not online or your
    tunnel has been flagged by our automated moderation system.
- code: ERR_NGROK_3208
  message: The account associated with this hostname has been banned. We’ve determined
    this account to be in violation of ngrok’s terms of service. If you are the account
    owner and believe this is a mistake, please contact support@ngrok.com.
- code: ERR_NGROK_4011
  message: Your password must be at least 10 characters.
- code: ERR_NGROK_4013
  message: You may not create a new account because you are already a member of a
    free account. Upgrade or delete that account first before creating a new account.
- code: ERR_NGROK_4100
  message: The email or password you entered is not valid.
- code: ERR_NGROK_4101
  message: A user with the email address already exists.
- code: ERR_NGROK_4108
  message: Sign ups are disallowed for the email provider. Please sign up with a different
    email provider.
- code: ERR_NGROK_6022
  message: Before you can serve HTML content, you must sign up for an ngrok account
    and install your authtoken.
- code: ERR_NGROK_6024
  message: You are about to visit `HOSTPORT`, served by `SERVINGIP`. This website
    is served for free through ngrok.com. You should only visit this website if you
    trust whoever sent the link to you.
- code: ERR_NGROK_8012
  message: Traffic was successfully tunneled to the ngrok agent, but the agent failed
    to establish a connection to the upstream web service.
- 'ERR_NGROK_312: Failed to bind a TLS tunnel for the account `<ACCOUNT>`. Only Enterprise
  and Pay-as-you-go plans may bind TLS tunnels. This account is on the `<PLAN>` plan.
  Upgrade to an Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_313: Custom subdomains are a feature on ngrok’s paid plans. Failed to
  bind the custom subdomain `<SUBDOMAIN>` for the account `<ACCOUNT>`. This account
  is on the `<PLAN>` plan. Upgrade to a paid plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_314: Only Personal, Pro, Enterprise, and Pay-as-you-go plans may bind
  custom hostnames. Failed to bind the custom hostname `<HOSTNAME>` for the account
  `<ACCOUNT>`. This account is on the `<PLAN>` plan. Upgrade to a paid plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_315: Wildcard domains are a feature reserved for ngrok’s Enterprise plan.
  Failed to bind the wildcard name `<DOMAIN>` for the account `<ACCOUNT>`. This account
  is on the `<PLAN>` plan. Upgrade to an Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_401: Only Personal, Pro, Enterprise, or Pay-as-you-go accounts can reserve
  domains. Your account can’t reserve domains. Upgrade to a paid plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_100: Invalid metadata length'
- 'ERR_NGROK_108: You’ve hit your account limit for simultaneous ngrok agent sessions.
  Try stopping an existing agent or upgrading your account.'
- 'ERR_NGROK_120: Your ngrok agent version `VERSION` is no longer supported. Only
  the most recent version of the ngrok agent is supported without an account. Update
  to a newer version with `ngrok update` or by downloading from https://download.ngrok.com.
  Sign up for an account to avoid forced version upgrades: https://ngrok.com/signup.'
- 'ERR_NGROK_1205: You failed to solve the captcha, please try again.'
- 'ERR_NGROK_1226: You are disallowed from creating an ngrok account due to violation
  of the terms of service.'
- 'ERR_NGROK_3004: ngrok gateway error. The server returned an invalid or incomplete
  HTTP response. Try starting ngrok with the full upstream service URL (e.g. ngrok
  http https://localhost:8081)'
- 'ERR_NGROK_3200: Tunnel not found. This could be because your agent is not online
  or your tunnel has been flagged by our automated moderation system.'
- 'ERR_NGROK_3208: The account associated with this hostname has been banned. We’ve
  determined this account to be in violation of ngrok’s terms of service. If you are
  the account owner and believe this is a mistake, please contact support@ngrok.com.'
- 'ERR_NGROK_4011: Your password must be at least 10 characters.'
- 'ERR_NGROK_4013: You may not create a new account because you are already a member
  of a free account. Upgrade or delete that account first before creating a new account.'
- 'ERR_NGROK_4100: The email or password you entered is not valid.'
- 'ERR_NGROK_4101: A user with the email address already exists.'
- 'ERR_NGROK_4108: Sign ups are disallowed for the email provider. Please sign up
  with a different email provider.'
- 'ERR_NGROK_6022: Before you can serve HTML content, you must sign up for an ngrok
  account and install your authtoken.'
- 'ERR_NGROK_6024: You are about to visit HOSTPORT, served by SERVINGIP. This website
  is served for free through ngrok.com. You should only visit this website if you
  trust whoever sent the link to you.'
- 'ERR_NGROK_8012: Traffic was successfully tunneled to the ngrok agent, but the agent
  failed to establish a connection to the upstream web service'
- 'ERR_NGROK_1207: Cannot switch to an account you are not a member of.'
- 'ERR_NGROK_1208: You failed to solve the CAPTCHA, please try again.'
- 'ERR_NGROK_1210: Invalid subscription interval `<INTERVAL>`. '
- 'ERR_NGROK_1211: Warning: Your IP does not match the IP Policy for this Account.
  When IP Restrictions are enforced you will not be able to access the dashboard.
  Please authenticate from an IP in the correct range or update your IP Restrictions.'
- 'ERR_NGROK_1212: Your IP does not match the IP Policy for this Account. Please authenticate
  from an IP in the correct range or update your IP Restrictions from the ngrok dashboard.'
- 'ERR_NGROK_1213: A new version of the ngrok dashboard is required to continue. Please
  refresh the page to update.'
- 'ERR_NGROK_1214: Your account is rate limited to `<MAX>` requests per `<INTERVAL>`.'
- 'ERR_NGROK_1215: The user `<EMAIL>` does not have permissions to invite other team
  members.'
- 'ERR_NGROK_1216: The user `<EMAIL>` does not have permissions to manage team members.'
- 'ERR_NGROK_1217: The user `<EMAIL>` does not have permissions to view billing information.'
- 'ERR_NGROK_1218: The user `<EMAIL>` does not have permissions to change billing
  information.'
- 'ERR_NGROK_1219: The user `<EMAIL>` does not have permissions to change developer
  resources.'
- 'ERR_NGROK_1220: The user `<EMAIL>` does not have administrative privileges which
  are required to perform this operation.'
- 'ERR_NGROK_1221: Refusing to perform an account delete operation because you are
  using the dashboard with a different active account than the one you requested deletion
  for.'
- 'ERR_NGROK_1222: You are not a member of any account.'
- 'ERR_NGROK_1223: You are logged out, please log back in.'
- 'ERR_NGROK_1224: You are no longer a member of the current account.'
- 'ERR_NGROK_1225: You must accept the terms of service and privacy policy to sign
  up for ngrok.'
- 'ERR_NGROK_1227: The number of login attempts with this email has been exceeded,
  please try again later.'
- 'ERR_NGROK_1228: You are no longer an active member of the current account.'
- 'ERR_NGROK_1229: The resource you are attempting to access requires MFA, please
  authenticate via a second factor.'
- 'ERR_NGROK_1230: We do not allow sign ups from your location. Your location was
  determined using your IP address.'
- 'ERR_NGROK_1231: The email address `<EMAIL>` already has an active, unredeemed invitation
  to this account.'
- 'ERR_NGROK_1232: We do not allow sign ups from anonymous proxies such as Tor.'
- 'ERR_NGROK_1233: The email address `<EMAIL>` is already associated with an SSO Identity
  Provider connection. Please contact support: support@ngrok.com'
- 'ERR_NGROK_1400: The IP Policy update failed because no values were provided. Specify
  at least one value'
- 'ERR_NGROK_1401: The IP Policy Rule update failed because no values were provided.
  Specify at least one value'
- 'ERR_NGROK_1402: IP Policy not found'
- 'ERR_NGROK_1404: IP Policy Rule not found'
- 'ERR_NGROK_1405: Required parameter is missing. Please specify `<PARAM>`'
- 'ERR_NGROK_1406: Invalid CIDR: `<CIDR>`'
- 'ERR_NGROK_1407: IP Policy with name `<NAME>` already exists'
- 'ERR_NGROK_1408: IP Policy Rule with CIDR `<CIDR>` already exists'
- 'ERR_NGROK_1409: IP Policy Rule CIDR `<CIDR>` must be specified using the lowest
  IP address in the range. Did you mean `<SUGGESTION>`?'
- 'ERR_NGROK_1410: Your account is limited to a maximum of `<MAX>` IP Policies'
- 'ERR_NGROK_1411: Your account is limited to a maximum of `<MAX>` IP Policy rules
  for each IP Policy'
- 'ERR_NGROK_1412: Only Pro, Enterprise, or Pay-as-you-go accounts can use per-tunnel
  IP policies. Your account is not authorized to use per-tunnel IP policies. Upgrade
  to a Pro, Enterprise, or Pay-as-you-go plan at: https://dashboard.ngrok.com/billing/subscription'
- 'ERR_NGROK_1413: IP Policy Rule is missing a network mask. Consider using `<IP>`/`<BITS>`
  if you want to target a single host IP.'
- 'ERR_NGROK_1414: The provided ip_policy_id is invalid. Please check the value given
  with your request.'
- 'ERR_NGROK_1415: Your account is limited to `<MAX>` IP Policies.'
- 'ERR_NGROK_1417: Your account is limited to `<MAX>` rules per IP Policy.'
- 'ERR_NGROK_1419: Cannot delete only rule (`<RULEID>`) in use by dashboard IP Restriction
  (`<RESTRICTIONID>`). Please detach this IP Policy from IP Restriction before deleting
  this rule.'
- 'ERR_NGROK_1420: Cannot delete IP Policy (`<POLICYID>`) because it is referenced
  by one or more IP Restrictions: (`<RESTRICTIONIDS>`). Please detach this IP Policy
  from all IP Restrictions before deleting it.'
- 'ERR_NGROK_1421: The IP Policy Rule description exceeds the maximum length of `<MAX>`,
  got `<SIZE>`.'
- 'ERR_NGROK_1422: An IP Policy Rule must have an ‘action’ of either ‘allow’ or ‘deny’.'
- 'ERR_NGROK_1423: An action should now be specified on the IP Policy Rule, not IP
  Policy. Please contact ngrok support if you need additional time to migrate.'
- 'ERR_NGROK_1500: Maintenance in progress, operations for some resources are read-only'
- 'ERR_NGROK_1501: Maintenance in progress, some operations are unavailable'
- 'ERR_NGROK_1600: Endpoint configuration not found'
- 'ERR_NGROK_1601: Invalid endpoint configuration ID'
- 'ERR_NGROK_1602: Invalid endpoint configuration request'
- 'ERR_NGROK_1607: The IP Policy ID `<ID>` specified for the IP Policy module does
  not exist.'
- 'ERR_NGROK_1608: Endpoint Configurations are deprecated. Please use Cloud Endpoints
  instead.'
- 'ERR_NGROK_1609: Your account is limited to a maximum of `<MAX>` endpoint configurations.'
- 'ERR_NGROK_1611: Invalid endpoint configuration, circuit breaker error threshold
  percentage must be between 0.0 and 1.0 inclusive, was `<VAL>`.'
- 'ERR_NGROK_1612: The auth provider `<VAL>` does not exist. Specify an auth provider
  ID or the special value ‘agent’.'
- 'ERR_NGROK_1613: The endpoint configuration exceeds the max number of ip policies.
  You specified `<VAL>`, the maximum is `<MAX>`.'
- 'ERR_NGROK_1614: The endpoint configuration TLS CA certificate size exceeds the
  max. You specified `<VAL>`, the maximum is `<MAX>`.'
- 'ERR_NGROK_1615: The endpoint configuration exceeds the max number of headers. You
  specified `<VAL>`, the maximum is `<MAX>`.'
- 'ERR_NGROK_1616: Invalid endpoint configuration, circuit breaker tripped duration
  must be greater than 0, was `<VAL>`.'
- 'ERR_NGROK_1617: Invalid endpoint configuration, circuit breaker rolling window
  must be greater than 0, was `<VAL>`.'
- 'ERR_NGROK_1618: Invalid endpoint configuration, circuit breaker num buckets must
  be greater than 0 and less than `<MAX>`, was `<VAL>`.'
- 'ERR_NGROK_1619: The endpoint configuration could not be deleted because it is still
  referenced by at least one reserved domain or reserved address.'
- 'ERR_NGROK_1620: The endpoint configuration must specify a type.'
- 'ERR_NGROK_1621: The module `<NAME>` is not supported on an endpoint configuration
  of type `<TYPE>`.'
- 'ERR_NGROK_1622: `<NAME>` is not a valid endpoint configuration type. Must be one
  of ‘http’, ‘https’, ‘tcp’.'
- 'ERR_NGROK_1623: `<KEY>` is not a valid HTTP header name because it contains at
  least one invalid character.'
- 'ERR_NGROK_1624: `<VAL>` is not a valid HTTP header value: `<REASON>`.'
- 'ERR_NGROK_1625: You must specify at least one IP policy in the IP Policy module.'
- 'ERR_NGROK_1626: SNS webhook validation does not accept a secret.'
- 'ERR_NGROK_1627: Webhook validation for `<T>` requires a secret.'
- 'ERR_NGROK_1628: There were validation errors while saving the endpoint configuration:`<ERRS>`.'
- 'ERR_NGROK_1629: You must specify a supported provider name. Supported providers:
  [`<T>`]'
- 'ERR_NGROK_1630: Webhook provider `<T>` is not supported. Supported providers: [`<TYPE>`]'
- 'ERR_NGROK_1631: Endpoint Configurations are deprecated. Please use Cloud Endpoints
  instead.'
- 'ERR_NGROK_1632: You may not configure the TLS termination parameter `<PARAMETER>`
  when the HTTPS module disables TLS termination.'
- 'ERR_NGROK_1633: Invalid endpoint configuration, unmanaged provider configurations
  must specify a client ID and a client secret.'
- 'ERR_NGROK_1634: Invalid endpoint configuration, custom OAuth scopes on a managed
  OAuth application are not allowed. Define a custom OAuth application to use custom
  scopes.'
- 'ERR_NGROK_1635: Invalid endpoint configuration, OAuth auth check interval must
  be at least `<MIN>`, was `<ACTUAL>`.'
- 'ERR_NGROK_1636: Invalid endpoint configuration, OAuth may only have one provider
  configuration but multiple are defined: [`<PROVIDER_NAMES>`].'
- 'ERR_NGROK_1637: Invalid endpoint configuration, OAuth does not define any provider
  configurations but one is required.'
- 'ERR_NGROK_1638: Invalid endpoint configuration, OAuth provider `<PROVIDER>` requires
  at least the `<SCOPE>` scope to authenticate by `<AUTH_FEATURE>`.'
- 'ERR_NGROK_1639: Invalid endpoint configuration, OAuth provider `<PROVIDER>` contains
  an invalid email domain: `<NAME>`.'
- 'ERR_NGROK_1640: Invalid endpoint configuration, OAuth GitHub Teams must be listed
  as either numerical ids or in the format ‘org_slug/team_slug’, `<TEAM>` does not
  match either format.'
- 'ERR_NGROK_1641: Endpoint Configurations are deprecated. Please use Cloud Endpoints
  instead.'
- 'ERR_NGROK_1642: Invalid endpoint configuration, OAuth cookie prefix `<PREFIX>`
  must consist of only alphanumeric characters with periods.'
- 'ERR_NGROK_1643: Invalid endpoint configuration, OAuth provider `<PROVIDER>` contains
  an invalid email address, `<NAME>`.'
- 'ERR_NGROK_1644: Invalid endpoint configuration, OAuth provider `<PROVIDER>` contains
  an email domain with invalid punycode: `<NAME>`.'
- 'ERR_NGROK_1645: Invalid endpoint configuration, OAuth provider `<PROVIDER>` contains
  an email address with invalid punycode: `<NAME>`.'
- 'ERR_NGROK_1646: Invalid endpoint configuration, OAuth provider `<PROVIDER>` email
  addresses must be unique, but a duplicate is present: `<DUPLICATE>`.'
- 'ERR_NGROK_1647: Invalid endpoint configuration, OAuth provider `<PROVIDER>` email
  domains must be unique, but a duplicate is present: `<DUPLICATE>`.'
- 'ERR_NGROK_1648: Invalid endpoint configuration, OAuth provider `<PROVIDER>` teams
  must be unique, but a duplicate is present: `<DUPLICATE>`.'
- 'ERR_NGROK_1649: Invalid endpoint configuration, OAuth provider `<PROVIDER>` organizations
  must be unique, but a duplicate is present: `<DUPLICATE>`.'
- 'ERR_NGROK_1650: Invalid endpoint configuration, OAuth provider `<PROVIDER>` groups
  must be unique, but a duplicate is present: `<DUPLICATE>`.'
- 'ERR_NGROK_1651: Invalid endpoint configuration, OAuth provider `<PROVIDER>` email
  addresses must not contain empty values'
- 'ERR_NGROK_1652: Invalid endpoint configuration, OAuth provider `<PROVIDER>` email
  domains must not contain empty values'
- 'ERR_NGROK_1653: Invalid endpoint configuration, OAuth provider `<PROVIDER>` teams
  must not contain empty values'
- 'ERR_NGROK_1654: Invalid endpoint configuration, OAuth provider `<PROVIDER>` organizations
  must not contain empty values'
- 'ERR_NGROK_1655: Invalid endpoint configuration, OAuth provider `<PROVIDER>` groups
  must not contain empty values'
- 'ERR_NGROK_1656: The endpoint configuration exceeds the maximum number of OAuth
  scopes. You specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_1657: The endpoint configuration exceeds the maximum number of OAuth
  Github teams. You specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_1658: The endpoint configuration exceeds the maximum number of OAuth
  Github orgs. You specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_1659: The endpoint configuration exceeds the maximum number of OAuth
  Google groups. You specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_1660: The endpoint configuration exceeds the maximum number of OAuth
  emails. You specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_1661: The endpoint configuration exceeds the maximum number of OAuth
  domains. You specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_1662: The endpoint configuration specifies the following modules which
  may not be enabled when TLS is not terminated: `<MODULE_NAMES>`.'
- 'ERR_NGROK_1667: Invalid endpoint configuration, email addresses must be lowercase
  but `<EMAIL>` is not.'
- 'ERR_NGROK_1668: Invalid endpoint configuration, email domains must be lowercase
  but `<DOMAIN>` is not.'
- 'ERR_NGROK_1669: Duplicate ‘add’ header, `<HEADER>` was provided twice with different
  casings: `<CASE_ONE>` and `<CASE_TWO>.'
- 'ERR_NGROK_100: Invalid metadata length: `<VAL>` bytes. Max: `<MAX>`'
- 'ERR_NGROK_102: The last payment for the `<ACCOUNT>` account failed. The account
  has been suspended. Update the payment information here: <https://dashboard.ngrok.com/billing/payment-method>'
- 'ERR_NGROK_103: The account `<ACCOUNT>` has been suspended. This is usually the
  result of violating the ngrok Terms of Service. Email [support@ngrok.com](mailto:support@ngrok.com)
  if you think your suspension is an error.'
- 'ERR_NGROK_105: The authtoken you specified does not look like a proper ngrok tunnel
  authtoken. Your authtoken: `<TOKEN>` Instructions to install your authtoken are
  on your ngrok dashboard: <https://dashboard.ngrok.com/get-started/your-authtoken>'
- 'ERR_NGROK_106: The authtoken you specified is an ngrok v1 authtoken, but you’re
  using ngrok v2. Your authtoken: `<TOKEN>` Instructions to install your authtoken
  are on your ngrok dashboard: <https://dashboard.ngrok.com/get-started/your-authtoken>'
- 'ERR_NGROK_107: The authtoken you specified is properly formed, but it is invalid.
  Your authtoken: `<TOKEN>` This usually happens when: - You reset your authtoken
  - Your authtoken was for a team account that you were removed from - You are using
  ngrok link and this credential was explicitly revoked Go to your ngrok dashboard
  and double check that your authtoken is correct: <https://dashboard.ngrok.com/get-started/your-authtoken>'
- 'ERR_NGROK_108: Your account is limited to `<MAX>` simultaneous ngrok agent sessions.
  You can run multiple simultaneous tunnels from a single agent session by defining
  the tunnels in your agent configuration file and starting them with the command
  `ngrok start --all`. Read more about the agent configuration file: [https://ngrok.com/docs/secure-tunnels/ngrok-agent/reference/config](/docs/agent/config)
  You can view your current agent sessions in the dashboard: <https://dashboard.ngrok.com/agents>'
- 'ERR_NGROK_109: The authentication payload you specified is not valid. This usually
  indicates a bug in the client’s protocol implementation. The parsing error encountered
  was: `<ERR>`'
- 'ERR_NGROK_110: The session cookie you specified is not valid. This usually indicates
  a bug in the client’s protocol implementation.'
- 'ERR_NGROK_111: The heartbeat interval you specified is not valid. It must be at
  least `<MIN>`, you specified `<VAL>`'
- 'ERR_NGROK_112: The heartbeat tolerance you specified is not valid. It must be at
  least `<MIN>`, you specified `<VAL>`'
- 'ERR_NGROK_115: Your IP `<IP>` does not match the IP Policies specified by the Agent
  IP Restriction for this account. Please authenticate from an IP in the correct range
  or update your Agent IP Restrictions from the ngrok dashboard. <https://dashboard.ngrok.com/ip-restrictions>'
- 'ERR_NGROK_116: Your IP `<IP>` does not match the IP ACL policy specified for your
  credentials. Please authenticate from an IP in the correct range or make sure you
  are using the correct credentials'
- 'ERR_NGROK_118: Only Enterprise accounts can use the enterprise tunnel ingress feature.
  Your account `<ACCOUNTNAME>` is not permitted to use the ngrok enterprise tunnel
  ingress. Upgrade to an Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_119: The agent specified an invalid semantic version string: `<VERSION>`'
- 'ERR_NGROK_120: Your `<PRODUCT>` version “`<VERSION>`” is no longer supported. Only
  the most recent version of the ngrok agent is supported without an account. Update
  to a newer version with `ngrok update`, by downloading from <https://ngrok.com/download>,
  or by updating your SDK version. Sign up for an account to avoid forced version
  upgrades: <https://ngrok.com/signup>.'
- 'ERR_NGROK_121: Your `<PRODUCT>` version “`<VERSION>`” is too old. The minimum supported
  agent version for your account is “`<MINVERSION>`”. Please update to a newer version
  with `ngrok update`, by downloading from <https://ngrok.com/download>, or by updating
  your SDK version. Paid accounts are currently excluded from minimum agent version
  requirements. To begin handling traffic immediately without updating your agent,
  upgrade to a paid plan: <https://dashboard.ngrok.com/billing/subscription>.'
- 'ERR_NGROK_122: Your account is not permitted to use the agent ingress “`<DOMAIN>`”.'
- 'ERR_NGROK_123: The account “`<NAME>`” may not start an ngrok agent session until
  the admin’s email address is verified. Verify your email at <https://dashboard.ngrok.com/user/settings>'
- 'ERR_NGROK_124: Your agent provided an invalid UserAgent: `<ERR>`'
- 'ERR_NGROK_125: The analytics payload you specified is not valid. This usually indicates
  a bug in the client’s protocol implementation. The parsing error encountered was:
  `<ERR>`'
- 'ERR_NGROK_126: The agent ingress “`<DOMAIN>`” is not available via “`<IP>`”.'
- 'ERR_NGROK_127: Your account is not permitted to use the agent ingress via “`<IP>`”.'
- 'ERR_NGROK_200: The ngrok API requires that you set the Authorization header for
  authentication. Your API keys and instructions are available on your dashboard:
  <https://dashboard.ngrok.com/api-keys>'
- 'ERR_NGROK_201: The ngrok API requires that you use Basic or Bearer authentication
  via the Authorization header. It could not parse the header in this request. Authorization
  Header: `<VAL>`. API keys and instructions are available on your dashboard: <https://dashboard.ngrok.com/api-keys>'
- 'ERR_NGROK_202: The API authentication you specified does not look like a valid
  credential. Your credential: `<TOKEN>`. API keys and instructions are available
  on your dashboard: <https://dashboard.ngrok.com/api-keys>'
- 'ERR_NGROK_203: The API authentication you specified is properly formed, but it
  is invalid. Your authentication: `<TOKEN>`. API keys and instructions are available
  on your dashboard: <https://dashboard.ngrok.com/api-keys>'
- 'ERR_NGROK_204: This is a valid API token, but the account `<ACCOUNT>` is not allowed
  to use the ngrok API. Email [support@ngrok.com](mailto:support@ngrok.com) to gain
  access.'
- 'ERR_NGROK_205: The account `<ACCOUNT>` has been suspended. This is usually the
  result of violating the ngrok Terms of Service. Email [support@ngrok.com](mailto:support@ngrok.com)
  if you think your suspension is an error.'
- 'ERR_NGROK_206: The authentication you specified is actually a tunnel credential.
  Your credential: `<TOKEN>`. Please check your records for an API key. API keys and
  instructions are available on your dashboard: <https://dashboard.ngrok.com/api-keys>'
- 'ERR_NGROK_207: The authentication you specified is actually a tunnel credential,
  not an API key token. Your key: `<TOKEN>`. Please check your records for an API
  key with the form FIRSTPART_SECONDPART. API keys and instructions are available
  on your dashboard: <https://dashboard.ngrok.com/api-keys>'
- 'ERR_NGROK_208: The authentication you specified is actually an API key ID, not
  an API key token. Your credential: `<TOKEN>`. Please check your records for an API
  key with the form FIRSTPART_SECONDPART. API keys and instructions are available
  on your dashboard: <https://dashboard.ngrok.com/api-keys>'
- 'ERR_NGROK_210: The content type you specified `<CTYPE>` is not supported by the
  API. Please check your API client implementation and see the list of supported content
  types: [https://ngrok.com/docs/api](/docs/api)#content-types'
- 'ERR_NGROK_211: The `<METHOD>` request you made does not expect a body, but you
  provided one. Please check your API client implementation and review the API documentation:
  [https://ngrok.com/docs/api](/docs/api)#service-api.'
- 'ERR_NGROK_212: The server was unable to read the complete request body. Please
  check your API client implementation and review the API documentation: [https://ngrok.com/docs/api](/docs/api)#service-api.'
- 'ERR_NGROK_213: The `<CTYPE>` request body could not be parsed. Please check your
  API client implementation and review the API documentation: [https://ngrok.com/docs/api](/docs/api)#service-api.'
- 'ERR_NGROK_214: The request parameter `<NAME>` is unknown and not expected. The
  supported fields are: `<SUPPORTED>`. Please check your API client implementation
  and review the API documentation: [https://ngrok.com/docs/api](/docs/api)#service-api.'
- 'ERR_NGROK_215: The value provided for the request parameter `<NAME>` is invalid.
  Please check your request and review the API documentation: [https://ngrok.com/docs/api](/docs/api)#service-api.'
- 'ERR_NGROK_216: You did not provide a Content-Type with your request. Please check
  your API client implementation and use one of the supported content types: [https://ngrok.com/docs/api](/docs/api)#content-types'
- 'ERR_NGROK_217: The provided API version `<VERSION>` is invalid or unsupported.
  Supported versions: `<SUPPORTED>`. Please check your API client implementation.'
- 'ERR_NGROK_218: Your request has not specified an API version. Please include the
  version you wish to use in the Ngrok-Version header. Supported versions: `<SUPPORTED>`.'
- 'ERR_NGROK_219: `<TLSVERSION>` is not a supported TLS version. Supported versions:
  `<SUPPORTED>`.'
- 'ERR_NGROK_220: Your IP does not match the IP Policy for this Account. Please authenticate
  from an IP in the correct range or update your IP Restrictions from the ngrok dashboard.
  <https://dashboard.ngrok.com/ip-restrictions>'
- 'ERR_NGROK_221: This is a valid API token, but the account `<ACCOUNT>` is not authorized
  to submit or view abuse reports. Email [support@ngrok.com](mailto:support@ngrok.com)
  if you believe this is an error.'
- 'ERR_NGROK_223: `<ID>` is not a valid resource reference identifier.'
- 'ERR_NGROK_224: The value `<VAL>` is not valid for the terminate_at property of
  the TLS Termination endpoint configuration module. Must be either ‘edge’, ‘agent’
  or ‘upstream’.'
- 'ERR_NGROK_225: Your account is limited to `<MAX>` simultaneous API requests.'
- 'ERR_NGROK_226: Your account is rate limited to `<MAX>` API requests per `<INTERVAL>`.'
- 'ERR_NGROK_227: The ID `<VAL>` is invalid. Expected an ID with a prefix of `<PREFIX>`.'
- 'ERR_NGROK_228: The ID `<VAL>` is not a valid Certificate Authority ID.'
- 'ERR_NGROK_229: The ID `<VAL>` is not a valid IP Policy ID.'
- 'ERR_NGROK_230: The query part of the requested URI is invalid: `<ERR>`. Please
  check your API client implementation and review the API documentation: [https://ngrok.com/docs/api](/docs/api)#service-api.'
- 'ERR_NGROK_231: The query part of the requested URI includes unknown parameters:
  `<UNKNOWN>`. The supported parameters are: `<SUPPORTED>`. Please check your API
  client implementation and review the API documentation: [https://ngrok.com/docs/api](/docs/api)#service-api.'
- 'ERR_NGROK_232: The request must specify only a single value for the `<NAME>` parameter
  but got `<COUNT>`: `<VALUES>`. Please check your API client implementation and review
  the API documentation: [https://ngrok.com/docs/api](/docs/api).'
- 'ERR_NGROK_233: The page size limit must be between 1 and `<MAX>` but `<VAL>` was
  provided.'
- 'ERR_NGROK_235: The Format `<VAL>` is missing or is not a valid Event Destination
  Format. Supported formats are: `<SUPPORTED>`.'
- 'ERR_NGROK_236: The destination target is invalid. Expected fields include one of
  the following: `<TARGETS>`'
- 'ERR_NGROK_238: The provided event type: `<TYP>` is not valid. Valid event types
  are `<ID>`'
- 'ERR_NGROK_239: The provided field: `<TYP>` is not valid.'
- 'ERR_NGROK_240: The provided event destination auth is invalid.'
- 'ERR_NGROK_241: The value “`<TS>`” is not a valid RFC3339 timestamp. Error while
  parsing: “`<ERR>`.”'
- 'ERR_NGROK_242: The ID `<VAL>` is not a valid Backend ID.'
- 'ERR_NGROK_243: The ID `<VAL>` is invalid. Expected an ID with prefix one of `<PREFIXES>`.'
- 'ERR_NGROK_244: The page size limit must be a number between 1 and `<MAX>` but `<VAL>`
  was provided.'
- 'ERR_NGROK_247: The account `<ACCOUNT>` has been suspended for non-payment. Update
  your payment method to pay your oustanding bill and resume service: <https://dashboard.ngrok.com/billing/payment-method>'
- 'ERR_NGROK_248: The endpoint create request passed an invalid type of `<TYPE>`.
  Currently we only support creation of cloud endpoints on this route.'
- 'ERR_NGROK_300: The authtoken credential `<ID>` has been revoked and is no longer
  valid.'
- 'ERR_NGROK_301: The bind payload you specified is not valid. This usually indicates
  a bug in the client’s protocol implementation. The parsing error encountered was:
  `<ERR>`'
- 'ERR_NGROK_302: TCP tunnels are only available to registered users. Sign up for
  free at: <https://dashboard.ngrok.com/signup> If you have already signed up, make
  sure your authtoken is installed. Your authtoken is available on your dashboard:
  <https://dashboard.ngrok.com/get-started/your-authtoken>'
- 'ERR_NGROK_303: TLS tunnels are only available for Enterprise or Pay-as-you-go plans.
  Sign up at: <https://dashboard.ngrok.com/signup> If you have already signed up,
  make sure your authtoken is installed. Your authtoken is available on your dashboard:
  <https://dashboard.ngrok.com/get-started/your-authtoken>'
- 'ERR_NGROK_304: HTTP auth is only available to registered users. Failed to bind
  a tunnel with HTTP authentication for an unauthenticated client. Sign up at: <https://dashboard.ngrok.com/signup>
  If you have already signed up, make sure your authtoken is installed. Your authtoken
  is available on your dashboard: <https://dashboard.ngrok.com/get-started/your-authtoken>'
- 'ERR_NGROK_305: Binding custom subdomains is a feature for paid accounts. Failed
  to bind the custom subdomain `<SUBDOMAIN>` for an unauthenticated client. Sign up
  at: <https://dashboard.ngrok.com/signup> If you have already signed up, make sure
  your authtoken is installed. Your authtoken is available on your dashboard: <https://dashboard.ngrok.com/get-started/your-authtoken>'
- 'ERR_NGROK_306: Only Personal, Pro, Enterprise, and Pay-as-you-go plans may use
  custom hostnames. Failed to bind the custom hostname `<HOSTNAME>` for an unauthenticated
  client. Sign up at: <https://dashboard.ngrok.com/signup> If you have already signed
  up, make sure your authtoken is installed. Your authtoken is available on your dashboard:
  <https://dashboard.ngrok.com/get-started/your-authtoken>'
- 'ERR_NGROK_307: You must reserve an address for your account before it can be bound.
  Failed to bind the address `<ADDR>` for the account `<ACCOUNT>` in region `<REGION>`.
  (Hint: Did you reserve the address in this region?) Reserve an address on your dashboard:
  <https://dashboard.ngrok.com/tcp-addresses>'
- 'ERR_NGROK_308: The credential ACL policy does not permit binding this address.
  Credential ID: `<ID>` Address: `<ADDR>`'
- 'ERR_NGROK_309: This address is reserved for another account. Failed to bind the
  address `<ADDR>` for the account `<ACCOUNT>`. Reserve an address on your dashboard:
  <https://dashboard.ngrok.com/tcp-addresses/new> If you have reserved this address,
  make sure that you are using an authtoken credential for the appropriate account.'
- 'ERR_NGROK_310: Only Personal, Pro, Enterprise, and Pay-as-you-go plans may bind
  reserved addresses. Failed to bind the address `<ADDR>` for the account `<ACCOUNT>`.
  This account is on the `<PLAN>` plan. This usually only happens if you downgraded
  your ngrok account and it no longer has permission to use reserved addresses. Upgrade
  your account at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_311: This address is allocated for a different region. Failed to bind
  the address `<ADDR>` in region `<WANT>` because it is reserved in the `<HAVE>` region.'
- 'ERR_NGROK_2203: Failed to parse the configuration for policy action type `<TYP>`.
  `<ERR>`'
- 'ERR_NGROK_2204: Configuration for policy action type `<TYP>` has invalid value:
  `<FIELD>`.'
- 'ERR_NGROK_2205: Policy action type `<TYP>` does not support the `<PROTO>` protocol.'
- 'ERR_NGROK_2206: A policy must define at least one action.'
- 'ERR_NGROK_2207: Policy action type `<TYP>` is unreachable due to a prior terminating
  action.'
- 'ERR_NGROK_2208: Failed to parse configuration for `<PHASE>` `<TYPE>`: exceeds maximum
  allowed name length of `<MAX>`, was `<VAL>`.'
- 'ERR_NGROK_2209: Failed to parse configuration for `<PHASE>` `<TYPE>`: exceeds maximum
  allowed value length of `<MAX>`, was `<VAL>`.'
- 'ERR_NGROK_2210: Failed to parse configuration for `<PHASE>` `<TYPE>`: name is invalid
  `<NAME>`.'
- 'ERR_NGROK_2211: Failed to parse configuration for `<PHASE>` `<TYPE>`: value is
  invalid `<NAME>`.'
- 'ERR_NGROK_2212: Failed to parse configuration for `<PHASE>` `<ACTION>`: can have
  at most `<MAX>` header values, but `<VAL>` were provided.'
- 'ERR_NGROK_2213: Failed to parse configuration for `<PHASE>` add-headers: contained
  an invalid template: `<TEMPLATE>`: `<ERR>`.'
- 'ERR_NGROK_2214: Failed to parse configuration for compress: contained an invalid
  algorithm: `<ALGORITHM>`.'
- 'ERR_NGROK_2215: Failed to parse configuration for `<ACTION>`: `<CONFIG>` must be
  between `<MIN>` and `<MAX>` inclusive, was `<ACTUAL>`.'
- 'ERR_NGROK_2216: Invalid IP Policy Reference(s): `<REFERENCE>`.'
- 'ERR_NGROK_2217: Invalid CIDR(s): `<CIDR>`.'
- 'ERR_NGROK_2218: Too many entries for `<FIELD>`. You provided `<ENTRIES>` entries,
  but the limit is `<LIMIT>`.'
- 'ERR_NGROK_2219: `<FIELD>` cannot be user-configured.'
- 'ERR_NGROK_2221: Invalid configuration for `<ACTION>`: `<CONFIG>` length of `<ACTUAL>`
  exceeded limit of `<MAX>`.'
- 'ERR_NGROK_2222: Invalid configuration for `<ACTION>`: `<CONFIG>` must be `<VALID>`,
  was `<ACTUAL>`.'
- 'ERR_NGROK_2223: Invalid configuration for `<ACTION>`: `<CONFIG>` cannot be empty.'
- 'ERR_NGROK_2224: Invalid configuration for action `<ACTION>`: failed to compile
  CEL template expressions in `<FIELD>`. `<ERR>`.'
- 'ERR_NGROK_2225: Invalid configuration for `<ACTION>`: `<CONFIG>` duration of `<ACTUAL>`
  exceeded limit of `<MAX>`.'
- 'ERR_NGROK_2226: Invalid configuration for `<ACTION>`: `<CONFIG>` must be a URL,
  but was `<ACTUAL>`.'
- 'ERR_NGROK_2227: Invalid configuration for `<ACTION>`: The issuer URL at `<CONFIG>`
  with a value of `<ISSUERURL>` did not return a valid OpenID Connect Discovery document.'
- 'ERR_NGROK_2228: Invalid configuration for `<ACTION>`: Failed to parse `<CONFIG>`:
  `<REASON>`.'
- 'ERR_NGROK_2229: Failed to validate Traffic Policy for unknown protocol `<PROTO>`.'
- 'ERR_NGROK_2230: Invalid Traffic Policy phase `<PHASE>` for protocol `<PROTO>`.'
- 'ERR_NGROK_2231: Invalid configuration for `<ACTION>`: `<CONFIG>` contains duplicate
  values: `<DUPLICATES>`.'
- 'ERR_NGROK_2232: Failed to resolve validated configuration for policy action type
  `<TYP>`. `<ERR>`'
- 'ERR_NGROK_2233: Failed to compile resolved configuration for policy action type
  `<TYP>`. `<ERR>`'
- 'ERR_NGROK_2234: Invalid configuration for `<ACTION>`: `<CONFIG>` is missing required
  element `<ELEMENT>`.'
- 'ERR_NGROK_2235: The traffic policy provided is not guaranteed to handle traffic.
  Ensure traffic always results in an action, e.g. custom response or forward action.'
- 'ERR_NGROK_2236: The traffic policy was not able to be parsed: `<ERROR>`'
- 'ERR_NGROK_2237: Invalid configuration for `<ACTION>`: `<CONFIG>` length of `<ACTUAL>`
  does not satisfy minimum length of `<MIN>`.'
- 'ERR_NGROK_2238: Failed to resolve interpolated CEL expression. The expression was:
  `<CEL>` ERROR: `<ERROR>`'
- 'ERR_NGROK_2239: Invalid policy: Only one auth action allowed per endpoint.'
- 'ERR_NGROK_2240: Invalid configuration for `<ACTION>`: `<MISSING>` is required when
  `<SPECIFIED>` is specified.'
- 'ERR_NGROK_2241: Invalid configuration for `<ACTION>`: The domain `<DOMAIN>` cannot
  be used as it doesn’t belong to the endpoint.'
- 'ERR_NGROK_2242: Invalid configuration for `<ACTION>`: `<CONFIG>` `<DOMAIN>` contains
  invalid puny code.'
- 'ERR_NGROK_2243: Invalid configuration for `<ACTION>`: `<CONFIG>` `<DOMAIN>` is
  not a valid domain.'
- 'ERR_NGROK_2244: Invalid configuration for `<PHASE>` `<ACTION>`: `<CONFIG>` can
  have at most `<MAX>` query key/value pairs, but `<VAL>` were provided.'
- 'ERR_NGROK_2245: Invalid configuration for `<PHASE>` `<ACTION>`: `<CONFIG>`: exceeds
  maximum allowed key length of `<MAX>`, was `<VAL>`.'
- 'ERR_NGROK_2246: Invalid configuration for `<PHASE>` `<ACTION>`: `<CONFIG>`: exceeds
  maximum allowed key length of `<MAX>`, was `<VAL>`.'
- 'ERR_NGROK_2247: Already validated url didn’t parse during `<STEP>` step: `<URL>`
  `<ERR>`'
- 'ERR_NGROK_2248: HTTPS Edges do not support the on_tcp_connect Traffic Policy phase.
  Use a Cloud Endpoint instead.'
- 'ERR_NGROK_2249: Memory limit exceeded by `<ACTION>` action: `<ERR>`'
- 'ERR_NGROK_2250: Invalid configuration for `<ACTION>`: Nested variables are too
  deep. Maximum nesting allowed is `<MAX>`'
- 'ERR_NGROK_2252: Invalid format for set-vars: vars must be a list of maps of exactly
  size 1'
- 'ERR_NGROK_2253: Failed to evaluate CEL expression: `<EXPRESSION>` for `<ACTION>`
  at runtime: `<ERR>`'
- 'ERR_NGROK_2254: Failed to resolve CEL expression. The expression was: `<CEL>` ERROR:
  `<ERROR>`'
- 'ERR_NGROK_2255: Invalid configuration for `<ACTION>`: Maximum `<ELEMENT>` allowed
  per action is `<MAX>`'
- 'ERR_NGROK_2256: The action `<ACTION>` is not available for your current plan. Please
  upgrade to `<PLANS>` to use this action.'
- 'ERR_NGROK_2257: Invalid basic auth credential. Username `<USERNAME>` fails to meet
  requirements of RFC 7617 #2.1: `<ERR>`'
- 'ERR_NGROK_2258: Invalid basic auth credential. The password of user `<USERNAME>`
  fails to meet requirements of RFC 7617 #2.1: `<ERR>`'
- 'ERR_NGROK_2259: No tunnels exist in this account'
- 'ERR_NGROK_2260: No tunnels could be found matching the supplied combination of
  labels'
- 'ERR_NGROK_2261: Failed to parse the configuration for policy action type `<TYP>`.
  Field `<FIELD>` is not a valid regular expression. ERROR: `<ERR>`.'
- 'ERR_NGROK_3002: Error performing TLS handshake: `<ERR>`'
- 'ERR_NGROK_3003: This client does not support TLS SNI, but the endpoint’s TLS configuration
  requires SNI. See [https://ngrok.com/docs/cloud-edge/edges/tls](/docs/universal-gateway/tls)#compatible-clients'
- 'ERR_NGROK_3004: ngrok gateway error The server returned an invalid or incomplete
  HTTP response.'
- 'ERR_NGROK_3005: ngrok gateway timeout A connection to the server not be established.'
- 'ERR_NGROK_3006: ngrok gateway error The server refused our connection'
- 'ERR_NGROK_3007: ngrok gateway error'
- 'ERR_NGROK_3008: ngrok gateway error None of the configured backends responded in
  time'
- 'ERR_NGROK_3009: ngrok gateway error Received an HTTP network error (status code
  0) from a backend'
- 'ERR_NGROK_3010: ngrok gateway error Received an HTTP response with unknown status
  code `<CODE>` from a backend'
- 'ERR_NGROK_3100: Your session has expired due to age. Refresh this page or use the
  link below to log back in with `<PROVIDER>`.'
- 'ERR_NGROK_3101: We lack permission to retrieve your data from `<PROVIDER>` and
  cannot continue. Make sure to allow all requested permissions for this application.'
- 'ERR_NGROK_3102: `<PROVIDER>` requires that you correct an issue with your account
  prior to using this website. Please log in to `<PROVIDER>`, correct the issue, and
  then refresh this page.'
- 'ERR_NGROK_3103: `<PROVIDER>` requires that you correct an issue with your account
  prior to using this website: `<ERROR_TITLE>`: `<ERROR_MESSAGE>` After correcting
  the issue with `<PROVIDER>`, refresh this page.'
- 'ERR_NGROK_3104: The email “`<EMAIL>`” associated with your `<PROVIDER>` account
  is not valid. Please correct your email with `<PROVIDER>` and then refresh this
  page.'
- 'ERR_NGROK_3105: You lack the required permission to use this site. Contact the
  owner to obtain permission and then refresh this page.'
- 'ERR_NGROK_3106: The initial information required to authenticate with `<PROVIDER>`
  is invalid.'
- 'ERR_NGROK_3107: The state parameter used to validate your request is missing. Please
  close this page and try again.'
- 'ERR_NGROK_3108: The state parameter used to validate your request cannot be read.
  Please close this page and try again.'
- 'ERR_NGROK_3109: `<PROVIDER>` did not provide an email for your account. Check that
  you have a primary email and that it’s confirmed before trying again.'
- 'ERR_NGROK_3110: The email permission from `<PROVIDER>` was not granted but is required.
  Please ensure that the email permission is granted.'
- 'ERR_NGROK_3111: All requested permissions with `<PROVIDER>` must be granted in
  order to use this site, but the following were not: `<PERMISSIONS>`.'
- 'ERR_NGROK_3112: `<PROVIDER>` has returned an error when attempting to authorize
  you to use this site: `<ERROR>`'
- 'ERR_NGROK_3113: `<PROVIDER>` denied access to this application when retrieving
  your information. This is likely caused by expiration or revocation of your authorization.'
- 'ERR_NGROK_3114: In order to continue, you must authorize this application’s access
  to `<PROVIDER>`.'
- 'ERR_NGROK_3115: The redirect_uri configured for this application is not properly
  configured or whitelisted with `<PROVIDER>`. Please contact the owner of this application
  in order to fix this error.'
- 'ERR_NGROK_3116: `<PROVIDER>` denied access to your data when attempting to authorize
  you. Please contact the owner of this application to ensure it is properly installed
  for your organization.'
- 'ERR_NGROK_3117: The initial link used to authorize with `<PROVIDER>` had unsupported
  parameters.'
- 'ERR_NGROK_3118: `<PROVIDER>` denied access to your data. Please contact the owner
  of this application to ensure it is properly installed for your organization.'
- 'ERR_NGROK_3119: Logging in with `<PROVIDER>` took more than 15 minutes and was
  rejected for security. Please try again.'
- 'ERR_NGROK_3120: The state parameter required to finish authorization with `<PROVIDER>`
  is missing. Please start over to try again.'
- 'ERR_NGROK_3121: The nonce cookie required to finish authorization with `<PROVIDER>`
  is missing. Please start over to try again.'
- 'ERR_NGROK_3122: The access code from `<PROVIDER>` has expired and cannot be used.
  Please try again and finish authorization more quickly.'
- 'ERR_NGROK_3123: The access code from `<PROVIDER>` has already been used. Please
  remove any bookmarks to this page and start reauthorization again.'
- 'ERR_NGROK_3124: The state parameter required to finish authorization with `<PROVIDER>`
  does not match this host. Please try again.'
- 'ERR_NGROK_3125: `<PROVIDER>` denied access to your data. The owner of this application
  should verify the OAuth application client ID and secret are valid.'
- 'ERR_NGROK_3126: `<PROVIDER>` rejected authorization due to a invalid or unknown
  scope requested by this application. The owner of this application must correct
  the application configuration before you can continue.'
- 'ERR_NGROK_3127: `<PROVIDER>` rejected authorization due to invalid or expired credentials.
  If this error persists after reauthorizing, contact the owner of the application
  to ensure you have permission.'
- 'ERR_NGROK_3150: An error occurred when retrieving your session. Please refresh
  the page to log in and try again.'
- 'ERR_NGROK_3151: `<PROVIDER>` rejected use of your session’s OAuth token: “`<ERROR>`”.
  Your session is invalid and cannot continue.'
- 'ERR_NGROK_3152: An invalid request was sent to `<PROVIDER>` but its response is
  required in order to continue. This is a bug and it has been reported; please try
  again in a couple of hours to see if it has been resolved.'
- 'ERR_NGROK_3160: An unexpected error occurred when communicating with `<PROVIDER>`.'
- 'ERR_NGROK_3161: `<PROVIDER>` has throttled this application and cannot be reached
  right now. Please try again in a few minutes.'
- 'ERR_NGROK_3162: `<PROVIDER>` has throttled this application and cannot be reached
  right now. Please try again in about an hour.'
- 'ERR_NGROK_3163: An error occurred when finishing authorization with `<PROVIDER>`.
  This is likely caused by authorization taking too long. Please try again.'
- 'ERR_NGROK_3164: An error occurred when authorizing with `<PROVIDER>`: `<ERROR>`'
- 'ERR_NGROK_3165: `<PROVIDER>` is too busy to handle requests and authorization cannot
  be completed at this time.'
- 'ERR_NGROK_3166: `<PROVIDER>` encountered an error and authorization cannot be completed
  at this time.'
- 'ERR_NGROK_316: The credential ACL policy does not permit binding this name. Credential
  ID: `<ID>` Name: `<DOMAIN>`'
- 'ERR_NGROK_317: You cannot bind the domain `<DOMAIN>` in region `<WANT>` because
  it is only available in the `<HAVE>` region. Try connecting to a different region:
  [https://ngrok.com/docs/platform/pops](/docs/universal-gateway/points-of-presence)'
- 'ERR_NGROK_318: You must reserve a wildcard domain for your account before it can
  be bound. Failed to bind the wildcard domain `<DOMAIN>` for the account `<ACCOUNT>`.
  Reserve a domain on your dashboard: <https://dashboard.ngrok.com/domains/new>'
- 'ERR_NGROK_319: You must reserve a custom hostname for your account before it can
  be bound. Failed to bind the domain `<DOMAIN>` for the account `<ACCOUNT>`’. Reserve
  this name on your dashboard: <https://dashboard.ngrok.com/domains/new>'
- 'ERR_NGROK_320: This domain is reserved for another account. Failed to bind the
  domain `<DOMAIN>` for the account `<ACCOUNT>`. If you have reserved this name, make
  sure that you are using an authtoken credential for the appropriate account. Reserve
  a name on your dashboard: <https://dashboard.ngrok.com/domains/new>'
- 'ERR_NGROK_321: Wildcard names must be reserved exactly. Failed to bind the wildcard
  domain `<DOMAIN>` for the account `<ACCOUNT>`. This name matches `<MATCH>` which
  is reserved for your account, but wildcard domains must be reserved with an exact
  match. Reserve this name on your dashboard: <https://dashboard.ngrok.com/domains/new>'
- 'ERR_NGROK_322: This name is reserved in a different region. Failed to bind the
  domain `<DOMAIN>` in the region `<WANT>` because it is reserved in the `<HAVE>`
  region. Try connecting to a different region: [https://ngrok.com/docs/platform/pops](/docs/universal-gateway/points-of-presence)'
- 'ERR_NGROK_323: You may not run more than `<MAX>` tunnels over a single ngrok session
  without an account. You may increase this limit by signing up and upgrading. The
  tunnels already running on this session are: `<URLS>` Sign up at: <https://dashboard.ngrok.com/signup>
  If you have already signed up, make sure your authtoken is installed. Your authtoken
  is available on your dashboard: <https://dashboard.ngrok.com/get-started/your-authtoken>'
- 'ERR_NGROK_324: Your account may not run more than `<MAX>` tunnels over a single
  ngrok agent session. The tunnels already running on this session are: `<URLS>`'
- 'ERR_NGROK_326: Invalid character `<CHAR>` in domain name. Valid domains may contain
  only a-z, A-Z, 0-9, . * and - characters. Failed to bind the domain `<DOMAIN>`.'
- 'ERR_NGROK_327: Domain has an invalid character sequence. Valid domains may not
  contain repeated periods ’..’. Failed to bind the domain `<DOMAIN>`.'
- 'ERR_NGROK_328: Domain part `<PART>` has an invalid first character. Valid domain
  parts must begin with a-z, A-Z, 0-9 or *. Failed to bind the domain `<DOMAIN>`.'
- 'ERR_NGROK_329: Domain part `<PART>` has an invalid last character. Valid domains
  must end with a-z A-Z or 0-9. Failed to bind the domain `<DOMAIN>`.'
- 'ERR_NGROK_330: Domain has an invalid character sequence. Valid domains may not
  contain ’—’ in positions 3 and 4 unless the domain has a punycode prefix of ‘xn—’.
  Failed to bind the domain `<DOMAIN>`.'
- 'ERR_NGROK_331: You may not bind a domain with the TLD `<SUFFIX>`. This TLD is not
  reachable over the public internet. Failed to bind the domain `<DOMAIN>`.'
- 'ERR_NGROK_332: `<PROTO>` is not a supported tunnel protocol'
- 'ERR_NGROK_333: No tunnel found with the ID `<ID>`'
- 'ERR_NGROK_334: The endpoint `<URL>` is already online. Either 1. stop your existing
  endpoint first, or 2. start both endpoints with `--pooling-enabled` to load balance
  between them.'
- 'ERR_NGROK_335: The bind cookie you specified is malformed. This usually indicates
  a bug in the client’s protocol implementation.'
- 'ERR_NGROK_336: Could not find an account while creating this endpoint. This is
  either an internal server error or you deleted your account.'
- 'ERR_NGROK_337: The last payment for the `<ACCOUNT>` account failed. The account
  has been suspended. Update the payment information here: <https://dashboard.ngrok.com/billing/payment-method>'
- 'ERR_NGROK_338: The account `<ACCOUNT>` has been suspended. This is usually the
  result of violating the ngrok Terms of Service. Email [support@ngrok.com](mailto:support@ngrok.com)
  if you think your suspension is an error.'
- 'ERR_NGROK_339: Forwarding to a local file:/// URL is only available after you sign
  up. Sign up at: <https://dashboard.ngrok.com/signup> If you have already signed
  up, make sure your authtoken is installed. Your authtoken is available on your dashboard:
  <https://dashboard.ngrok.com/get-started/your-authtoken>'
- 'ERR_NGROK_340: Forwarding to local port 443 or a local https:// URL is only available
  after you sign up. Sign up at: <https://dashboard.ngrok.com/signup> If you have
  already signed up, make sure your authtoken is installed. Your authtoken is available
  on your dashboard: <https://dashboard.ngrok.com/get-started/your-authtoken>'
- 'ERR_NGROK_341: IP Policy with ID `<ID>` not found'
- 'ERR_NGROK_343: Endpoint configuration `<ID>` does not allow the agent to set basic
  authentication. Update the endpoint configuration to specify ‘agent’ as the auth
  provider or remove the basic authentication settings from the agent’s tunnel creation
  definition.'
- 'ERR_NGROK_344: Endpoint configuration `<ID>` does not allow clients to set an IP
  policy.'
- 'ERR_NGROK_345: Endpoint configuration `<ID>`s HTTPS module terminates TLS which
  is incompatible with a ‘tls’ tunnel. You may either: - Modify the endpoint configuration
  to include the HTTPS module with ‘terminate_tls’ disabled. - OR start an ‘http’
  tunnel with -bind-tls=true or -bind-tls=both instead'
- 'ERR_NGROK_346: Endpoint configuration `<ID>`s HTTPS module does not terminate TLS
  which is incompatible with a ‘https’ tunnel. You may either: - Modify the endpoint
  configuration to enable the ‘terminate_tls’ option - OR start a ‘tls’ tunnel instead'
- 'ERR_NGROK_347: Domain has invalid punycode: `<IDNA_ERROR>`. Failed to bind the
  domain `<DOMAIN>`.'
- 'ERR_NGROK_348: Your account is limited to `<MAX>` sessions.'
- 'ERR_NGROK_349: Your account is rate limited for adding `<MAX>` sessions per `<INTERVAL>`.'
- 'ERR_NGROK_350: Your account is limited to `<MAX>` tunnels in a session.'
- 'ERR_NGROK_351: Your account is rate limited for adding `<MAX>` tunnels per `<INTERVAL>`.'
- 'ERR_NGROK_352: Unauthenticated sessions are limited to `<MAX>` tunnels.'
- 'ERR_NGROK_353: Unauthenticated sessions are rate limited for adding `<MAX>` tunnels
  per `<INTERVAL>`.'
- 'ERR_NGROK_354: Failed to bind `<DOMAIN>`. Nested subdomains of the ngrok base endpoint
  domain `<ENDPOINT_DOMAIN>` must be reserved first. Alternatively, try `<SUGGESTION>`
  instead.'
- 'ERR_NGROK_355: Invalid ’_’ in domain name. Valid domains may not contain underscores.
  Failed to bind the domain `<DOMAIN>`.'
- 'ERR_NGROK_356: The credential ACL policy does not permit binding random TCP addresses.
  Credential ID: `<ID>`'
- 'ERR_NGROK_357: Labeled tunnels are only available after you sign up. Sign up at:
  <https://dashboard.ngrok.com/signup> If you have already signed up, make sure your
  authtoken is configured. Your authtoken is available on your dashboard: <https://dashboard.ngrok.com/get-started/your-authtoken>'
- 'ERR_NGROK_358: Your account doesn’t have permission to create labeled tunnels.'
- 'ERR_NGROK_359: Invalid basic auth credential. Username must not be zero length.'
- 'ERR_NGROK_360: Invalid basic auth credential. Password must be between `<MINLENGTH>`
  and `<MAXLENGTH>` characters, got `<GOTLENGTH>`.'
- 'ERR_NGROK_361: Invalid circuit breaker configuration, error threshold percentage
  must be between 0.0 and 1.0 inclusive, was `<VAL>`.'
- 'ERR_NGROK_362: Invalid IP restriction configuration, invalid CIDR: `<CIDR>`'
- 'ERR_NGROK_363: You must specify a supported provider name. Supported providers:
  [`<SUPPORTED>`]'
- 'ERR_NGROK_364: Webhook provider `<PROVIDER>` is not supported. Supported providers:
  [`<SUPPORTED>`]'
- 'ERR_NGROK_365: OAuth provider `<PROVIDER>` is not supported. Supported providers:
  [`<SUPPORTED>`]'
- 'ERR_NGROK_366: You may not authorize more than `<MAX>` emails. Got `<GOT>`.'
- 'ERR_NGROK_367: You may not authorize more than `<MAX>` email domains. Got `<GOT>`.'
- 'ERR_NGROK_368: You may not request more than `<MAX>` oauth scopes. Got `<GOT>`.'
- 'ERR_NGROK_370: Added request header should be in key:value format, got `<VAL>`'
- 'ERR_NGROK_371: Added response header should be in key:value format, got `<VAL>`'
- 'ERR_NGROK_372: `<KEY>` is not a valid HTTP header name because it contains at least
  one invalid character.'
- 'ERR_NGROK_373: `<KEY>` is not a valid HTTP header name because it contains at least
  one invalid character.'
- 'ERR_NGROK_374: `<VAL>` is not a valid HTTP header value: `<REASON>`.'
- 'ERR_NGROK_375: Duplicate ‘add’ header, `<HEADER>` was provided twice with different
  casings: `<CASE_ONE>` and `<CASE_TWO>`.'
- 'ERR_NGROK_376: Exceeded the maximum number of added headers. You specified `<VAL>`,
  the maximum is `<MAX>`.'
- 'ERR_NGROK_377: The header beginning with `<PREFIX>`…’ exceeds the maximum header
  name length of `<BYTES>` bytes.'
- 'ERR_NGROK_378: The header value for `<HEADERKEY>` beginning with `<PREFIX>`…’ exceeds
  the maximum header value length of `<BYTES>` bytes.'
- 'ERR_NGROK_379: The sendgrid verification key is not a base64 encoded ecdsa public
  key. The following error was encountered while trying to parse it: “`<ERROR>`”'
- 'ERR_NGROK_380: The resource `<ID>` was referenced, but not found. Please retry,
  and contact support if this error persists.'
- 'ERR_NGROK_381: The host `<HOST>` and port `<PORT>` you requested is already reserved
  by an edge.'
- 'ERR_NGROK_382: The account “`<NAME>`” may not start an endpoint until the admin’s
  email address is verified. Verify your email at <https://dashboard.ngrok.com/user/settings>'
- 'ERR_NGROK_383: You may not specify an OAuth Client ID without also specifying a
  Client Secret. Specify both or neither.'
- 'ERR_NGROK_384: You may not specify an OAuth Client Secret without also specifying
  a Client ID. Specify both or neither.'
- 'ERR_NGROK_385: You must specify an OIDC Client ID.'
- 'ERR_NGROK_386: You must specify an OIDC Client Secret.'
- 'ERR_NGROK_387: You must specify the OIDC Issuer URL.'
- 'ERR_NGROK_388: You may not request more than `<MAX>` OIDC scopes. Got `<GOT>`.'
- 'ERR_NGROK_389: You must specify an OAuth client ID and secret for a custom application
  or neither client ID nor a secret for the ngrok-managed OAuth application.'
- 'ERR_NGROK_390: You must use your own OAuth application, specifying its client ID
  and secret, in order to specify scopes.'
- 'ERR_NGROK_391: You may not request an individual OAuth scope with length greater
  than `<MAX>`. Got scope `<SCOPE>` with length `<GOT>`. '
- 'ERR_NGROK_392: You may not request an individual OIDC scope with length greater
  than `<MAX>`. Got scope `<SCOPE>` with length `<GOT>`.'
- 'ERR_NGROK_393: When specifying CIDRs to deny, you must specify at least one CIDR
  to allow. Otherwise all traffic will be denied. Use 0.0.0.0/0 and ::0/0 to accept
  all traffic not explicitly blocked by your deny rules.'
- 'ERR_NGROK_394: Each tunnel must specify either a protocol or labels, but neither
  was set.'
- 'ERR_NGROK_395: Bind rules in authtoken ACLs are not supported with labeled tunnels
  at this time.'
- 'ERR_NGROK_396: Domain `<DOMAIN>` is not a valid DNS name. No domain part may be
  more than 63 characters long.'
- 'ERR_NGROK_397: Domain `<DOMAIN>` is not a valid DNS name. Domains may not be more
  than 253 characters long.'
- 'ERR_NGROK_398: The `<ID>` header cannot be removed without specifying a replacement.'
- 'ERR_NGROK_399: The credential ACL policy does not permit binding this label. Credential
  ID: `<ID>` Label: `<LABEL>`'
- 'ERR_NGROK_400: The region you specified, `<REGION>` is invalid. Please use one
  of the following acceptable values: `<VALID>`'
- 'ERR_NGROK_402: Only the first part of a reserved domain may be a ’*’ wildcard.
  Failed to reserve `<DOMAIN>`.'
- 'ERR_NGROK_403: The first subdomain of a wildcard domain must be a single ’*’ character.
  Failed to reserve `<DOMAIN>`.'
- 'ERR_NGROK_404: You may not reserve names on ngrok.com. Please use an ngrok.io suffix.
  Failed to reserve `<DOMAIN>`.'
- 'ERR_NGROK_405: You may not reserve a domain with the suffix `<SUFFIX>` in the `<WANT>`
  region because names with this suffix must be reserved for the `<HAVE>` region.
  Failed to reserve `<DOMAIN>`.'
- <PROVIDER> is too busy to handle requests and required data cannot be retrieved
  right now. Wait a few minutes before trying again.
- The endpoint <ENDPOINTURL> is offline.
- Circuit breaker tripped
- Request blocked by IP Policy
- Request failed webhook verification
- Request blocked by Endpoints IP Restriction
- 'Expected a websocket request with a “Connection: upgrade” header but did not receive
  one.'
- 'The ngrok account that was hosting this webpage has been banned for violation of
  ngrok’s Terms of Service. If you’re seeing this page instead of the one you were
  expecting, ngrok has most likely blocked a phishing attack targeting you. If you
  did enter any sensitive information before seeing this notice, please contact the
  real site by directly entering their URL in your browser. Learn more about how to
  protect yourself from phishing scams: https://consumer.ftc.gov/articles/how-recognize-and-avoid-phishing-scams'
- Tunnel not found
- Error forwarding the connection to the ngrok agent
- The server does not authorize requests from your user-agent
- Tunnel <HOSTNAME> has multiple bindings but no binding was specified
- Upgrade request origin forbidden
- 'exceeded maximum number of redirects <MAX>: <URLS>'
- URL “state” parameter is invalid
- URL “state” parameter is expired.
- URL “state” parameter is invalid.
- This request has expired. Please try again.
- The route match type <TYP> is incompatible with OAuth, OIDC, or SAML. Compatible
  selector match types are “EXACT_PATH” or “PATH_PREFIX”.
- 'Invalid Auth Cookie Domain: <DOMAIN>'
- Your request lacks valid credentials.
- You are forbidden from making this request.
- Token could not be found in request.
- Configured HTTP Header <TYP> was not found in request.
- Failed to parse JSON body.
- Failed to parse form.
- Configured prefix <TYP> not found.
- Failed to read content-type header.
- Tokens in body not supported for HTTP method <TYP>.
- Token could not be parsed, possibly malformed.
- Failed to fetch JWKS.
- ForwardInternal may only forward through <MAX> endpoints.
- The response received from the http-request target had a size exceeding the maximum
  allowed.
- The configured http-request timeout was reached before a successful request could
  be made.
- Request rejected, A loop was detected.
- HTTP Status Code <CODE> does not allow including a response body.
- The request was blocked by the WAF.
- Something went wrong with the WAF.
- The response was blocked by the WAF.
- The request could not be proxied to the AI provider successfully
- CEL interpolation was unsuccessful in action <ACTIONTYPE> field <FIELD>
- 'CEL interpolation in action <ACTIONTYPE> field <FIELD> did not result in a valid
  regex. ERROR: <ERROR>'
- 'Buffering for the body was not successfully initialized for action type <ACTIONTYPE>.
  ERROR: <ERROR>'
- The body could not be successfully buffered for action type <ACTIONTYPE>
- The body content could not be successfully modified for action type <ACTIONTYPE>
- The content-length header could not be successfully updated for action type <ACTIONTYPE>
- Plan <PLAN_ID> does not exist.
- Account name must not be empty.
- 'Account name exceeds max length, <LENGTH> bytes, max: <MAX>.'
- Another account is already configured with the GSuite domain <DOMAIN>.
- Your password must be at least <LENGTH> characters.
- 'Your account does not have access to <FEATURE>. Upgrade to get access: https://dashboard.ngrok.com/billing/subscription'
- You may not create a new account because you are already a member of the free account
  “<ACCOUNT_NAME>”. Upgrade or delete that account first before creating a new account.
- The account <NAME> was suspended. It may not be deleted. Contact support@ngrok.com
  if you believe this is an error.
- The account <NAME> was banned for violation of the terms of service. It may not
  be deleted. Contact support@ngrok.com if you believe this is an error.
- You may not create a new account because another account you were the administrator
  of was suspended. Contact support@ngrok.com if you believe this is an error.
- You may not create a new account because another account you were the administrator
  of was banned for violation of the terms of service. Contact support@ngrok.com if
  you believe this is an error.
- 'Usage of ngrok requires a verified account and authtoken. Sign up for an account:
  https://dashboard.ngrok.com/signup Install your authtoken: https://dashboard.ngrok.com/get-started/your-authtoken'
- This account cannot be deleted because it has an active billing subscription. Please
  contact support@ngrok.com for help deleting this account.
- Your password must be less then <LENGTH> characters.
- This account cannot be deleted because it has an unpaid invoice. Please contact
  support@ngrok.com for help deleting this account.
- You do not have permission to change the observability capture settings for this
  account. Please contact an admin for this account to change these settings.
- 'Your account does not have access to <FEATURE>. Contact us to get access to this
  feature: https://ngrok.com/enterprise/contact?ref=pricing-prod-custom'
- 'Your account plan cannot be downgraded: <REASON>'
- 'Your account plan cannot be upgraded: <REASON>'
- Your account has run out of credit, please upgrade to continue using paid actions,
  or use your dev domain and remove all paid traffic policy from it.
- The email or password you entered is not valid.
- A user with the email address <EMAIL> already exists.
- <EMAIL> is not a valid email address.
- User name must not be empty.
- 'User name exceeds max length, <LENGTH> bytes, max: <MAX>.'
- Your user <EMAIL> was suspended for violation of the terms of service. It may not
  be deleted. Contact support@ngrok.com if you believe this is an error.
- Your user <EMAIL> was banned for violation of the terms of service. It may not be
  deleted. Contact support@ngrok.com if you believe this is an error.
- Sign ups are disallowed for the email provider “<DOMAIN>”. Please sign up with a
  different email provider.
- Bot name must not be empty.
- 'Bot name exceeds max length, <LENGTH> bytes, max: <MAX>.'
- You must be an admin to create, update, or delete Bots.
- Bot names must be unique within an account.
- The email domain “<DOMAIN>” does not allow self-serve user registrations. Please
  contact your ngrok administrator or support@ngrok.com for access.
- The email domain “<DOMAIN>” does not allow account creation. Please contact your
  ngrok administrator or support@ngrok.com for access.
- The domain of the email entered is registered under a domain control and must signup
  via SSO
- The email address <EMAIL> already exists under a similar alias. Please use that
  email address to login.
- Sign ups are disallowed for the email provided “<EMAIL>”. Please sign up with a
  different email address.
- You may not delete all or your logins, you must have at least one.
- This <LOGIN> login is already connected to another ngrok user.
- No user with the email address <EMAIL> exists.
- You have not set a password for this account. Please login using Google or GitHub
  instead.
- 'Unable to redeem password: <REASON>'
- 'ERR_NGROK_406: Invalid character `<CHAR>` in domain name. Valid domains may contain
  only a-z, A-Z, 0-9, . * and - characters. Failed to reserve `<DOMAIN>`.'
- 'ERR_NGROK_407: Domain part `<PART>` has an invalid first character. Valid domain
  parts must begin with a-z, A-Z, 0-9 or *. Failed to reserve `<DOMAIN>`.'
- 'ERR_NGROK_408: Domain part `<PART>` has an invalid last character. Valid domains
  must end with a-z A-Z or 0-9. Failed to reserve `<DOMAIN>`.'
- 'ERR_NGROK_409: Domain has an invalid character sequence. Valid domains may not
  contain repeated periods ’..’. Failed to reserve `<DOMAIN>`.'
- 'ERR_NGROK_410: Domain has an invalid character sequence. Valid domains may not
  contain ’—’ in positions 3 and 4 unless the domain has a punycode prefix of ‘xn—’.
  Failed to reserve `<DOMAIN>`.'
- 'ERR_NGROK_411: You may not reserve a name on the TLD `<SUFFIX>`. This TLD is not
  reachable over the public internet. Failed to reserve `<DOMAIN>`.'
- 'ERR_NGROK_412: Only Personal, Pro, Enterprise, or Pay-as-you-go accounts can reserve
  tunnels on custom domains. Your account cannot reserve tunnels on custom domains
  (`<DOMAIN>` is not a subdomain of `<BASE>`). Upgrade to a paid plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_413: This domain is already reserved for your account. Failed to reserve
  `<DOMAIN>`.'
- 'ERR_NGROK_414: This domain is already reserved for another account. Failed to reserve
  `<DOMAIN>`.'
- 'ERR_NGROK_415: Your account is limited to `<MAX>` reserved domains. If you need
  more domains, you can turn overages on for your existing account or subscribe to
  a usage-based billing plan at: <https://dashboard.ngrok.com/billing/subscription>.'
- 'ERR_NGROK_416: You may not register a wildcard for all `<SUFFIX>` domains. Failed
  to reserve `<DOMAIN>`.'
- 'ERR_NGROK_417: This wildcard domain would conflict with a domain reserved for another
  account. Failed to reserve `<DOMAIN>`.'
- 'ERR_NGROK_418: Your account is limited to `<MAX>` wildcard domains. Email sales@ngrok.com
  to purchase additional wildcard domains.'
- 'ERR_NGROK_419: Only Enterprise accounts can reserve wildcard domains. Upgrade to
  an Enterprise plan at <https://dashboard.ngrok.com/billing/subscription>.'
- 'ERR_NGROK_420: A description is limited to `<MAX>` characters; you have entered
  `<VAL>` characters.'
- 'ERR_NGROK_421: Metadata is limited to `<MAX>` characters; you have entered `<VAL>`
  characters.'
- 'ERR_NGROK_422: The reserved domain name update failed because no values were provided.
  Specify at least one value.'
- 'ERR_NGROK_423: The reserved domain name is limited to `<MAX>` characters; you are
  using `<VAL>` characters. The name you’ve requested is: `<DOMAIN>`.'
- 'ERR_NGROK_424: Domain `<DOMAIN>` does not require a CNAME record.'
- 'ERR_NGROK_425: Domain `<DOMAIN>` CNAME record not found.'
- 'ERR_NGROK_426: Domain `<DOMAIN>` CNAME record not found, A record `<IPS>` found.'
- 'ERR_NGROK_427: Domain `<DOMAIN>` CNAME record resolved to `<HAVE>`, should have
  been `<WANT>`.'
- 'ERR_NGROK_428: You may not assign endpoint configuration `<ID>` because it is type
  `<TYPE>`. You must assign a configuration with type `<EXPECTEDTYPE>`.'
- 'ERR_NGROK_429: Domain has invalid punycode: `<IDNA_ERROR>`. Failed to reserve `<DOMAIN>`.'
- 'ERR_NGROK_430: Another account is running an active tunnel on the domain `<DOMAIN>`.
  You may not reserve domains that are actively in use.'
- 'ERR_NGROK_431: Your account is limited to `<MAX>` reserved domains. If you need
  more domains, you can turn overages on for your existing account or subscribe to
  a usage-based billing plan at: <https://dashboard.ngrok.com/billing/subscription>.'
- 'ERR_NGROK_432: Your account is rate limited for adding `<MAX>` reserved domains
  per `<INTERVAL>`.'
- 'ERR_NGROK_433: Your account is limited to `<MAX>` reserved wildcard domains. If
  you need more domains, you can turn overages on for your existing account or subscribe
  to a usage-based billing plan at: <https://dashboard.ngrok.com/billing/subscription>.'
- 'ERR_NGROK_434: Either a certificate or a certificate management policy may be specified,
  not both.'
- 'ERR_NGROK_435: Invalid authority specified in managed certificate policy.'
- 'ERR_NGROK_436: The certificate of a reserved domain with a managed certificate
  policy can not be detached directly, instead the managed certificate policy itself
  should be detached.'
- 'ERR_NGROK_438: Invalid ’_’ in domain name. Valid domains may not contain underscores.
  Failed to reserve `<DOMAIN>`.'
- 'ERR_NGROK_439: The certificate_management_policy field must be null for domains
  owned by ngrok.'
- 'ERR_NGROK_440: Uploaded certificates are not allowed for domains owned by ngrok.'
- 'ERR_NGROK_441: Domain `<DOMAIN>` does not require an ACME Challenge CNAME record.'
- 'ERR_NGROK_442: Domain `<RECORD>` ACME Challenge CNAME record not found.'
- 'ERR_NGROK_443: ACME Challenge `<RECORD>` CNAME record not found, A record `<IPS>`
  found.'
- 'ERR_NGROK_444: ACME Challenge `<RECORD>` CNAME record resolved to `<HAVE>`, should
  have been `<WANT>`.'
- 'ERR_NGROK_445: There was an error looking up the DNS `<RTYPE>` record for domain
  `<DOMAIN>` (status: `<STATUS>`): `<MSG>`.'
- 'ERR_NGROK_446: The domain `<DOMAIN>` could not be deleted because it is still referenced
  by an edge or cloud endpoint.'
- 'ERR_NGROK_447: Managed certificates are not allowed on direct subdomains of `<DOMAIN>`.'
- 'ERR_NGROK_448: The domain `<DOMAIN>` is not a fully qualified domain name.'
- 'ERR_NGROK_449: You may only specify one of ‘name’ or ‘domain’.'
- 'ERR_NGROK_450: You are not allowed to reserve subdomains of `<DOMAIN>`. Failed
  to reserve domain `<SUBDOMAIN>`.'
- 'ERR_NGROK_451: You are not allowed to change the region of `<DOMAIN>`.'
- 'ERR_NGROK_455: This subdomain is covered by `<WILDCARD_DOMAIN>` however the wildcard’s
  CNAME record resolved to `<HAVE>`, should have been `<WANT>`.'
- 'ERR_NGROK_456: You are not allowed to specify duplicate regions. Region `<DUPLICATE>`
  was specified multiple times.'
- 'ERR_NGROK_457: Custom error template URLs are limited to `<MAX>` characters; you
  have entered `<VAL>` characters.'
- 'ERR_NGROK_458: You are not allowed to delete your dev domain.'
- 'ERR_NGROK_500: The region you specified, `<REGION>` is invalid. Please use one
  of the following acceptable values: `<VALID>`.'
- 'ERR_NGROK_501: Only Personal, Pro, Enterprise, or Pay-as-you-go accounts can reserve
  addresses. Your account can’t reserve addresses. Upgrade to a paid plan at <https://dashboard.ngrok.com/billing/subscription>.'
- 'ERR_NGROK_502: Your account is limited to `<MAX>` reserved addresses. If you need
  more addresses, you can turn overages on for your existing account or subscribe
  to a usage-based billing plan at: <https://dashboard.ngrok.com/billing/subscription>.'
- 'ERR_NGROK_503: No available reserved addresses in region `<REGION>`.'
- 'ERR_NGROK_504: A description is limited to `<MAX>` characters; you have entered
  `<VAL>` characters.'
- 'ERR_NGROK_505: Metadata is limited to `<MAX>` characters; you have entered `<VAL>`
  characters.'
- 'ERR_NGROK_506: The reserved address update failed because no values were provided.
  Specify at least one value.'
- 'ERR_NGROK_507: You may not assign endpoint configuration `<ID>` because it is type
  `<TYPE>`. You must assign a configuration with type ‘tcp’.'
- 'ERR_NGROK_508: Your account is limited to `<MAX>` reserved addresses. If you need
  more addresses, you can turn overages on for your existing account or subscribe
  to a usage-based billing plan at: <https://dashboard.ngrok.com/billing/subscription>.'
- 'ERR_NGROK_509: Your account is rate limited for adding `<MAX>` reserved addresses
  per `<INTERVAL>`.'
- 'ERR_NGROK_511: The domain `<DOMAIN>` has a dangling CNAME record. The CNAME must
  be deleted before this domain can be reserved.'
- 'ERR_NGROK_512: The domain `<DOMAIN>` has a dangling A, AAAA, ALIAS or other record
  pointing to ngrok. The record must be deleted before this domain can be reserved.'
- 'ERR_NGROK_513: The domain `<DOMAIN>` is not a valid DNS name. No domain part may
  be more than 63 characters long.'
- 'ERR_NGROK_514: The domain `<DOMAIN>` is not a valid DNS name. Domains may not be
  more than 253 characters long.'
- 'ERR_NGROK_600: Invalid ACL rule. An ACL rule must be ’*’ or start with ‘bind:’.
  The bind value must match the format of a domain, address, or label. You specified:
  `<RULE>`.'
- 'ERR_NGROK_601: This credential is your tunnel token and cannot be deleted, only
  rotated. Credential ID: `<ID>` Description: `<DESCRIPTION>`.'
- 'ERR_NGROK_602: Your account is limited to `<MAX>` tunnel credentials. Please upgrade
  your account or contact support@ngrok.com to increase the limit.'
- 'ERR_NGROK_603: Your account is limited to `<MAX>` API keys. Please upgrade your
  account or contact support@ngrok.com to increase the limit.'
- 'ERR_NGROK_604: A description is limited to `<MAX>` characters; you have entered
  `<VAL>` characters.'
- 'ERR_NGROK_605: Metadata is limited to `<MAX>` characters; you have entered `<VAL>`
  characters.'
- 'ERR_NGROK_606: The credentials update failed because no values were provided. Specify
  at least one value.'
- 'ERR_NGROK_607: SSH tunnel feature is not enabled on your account.'
- 'ERR_NGROK_608: Your account is limited to `<MAX>` SSH keys. Please upgrade your
  account or contact support@ngrok.com to increase the limit.'
- 'ERR_NGROK_609: The public key `<PUBKEY>` already exists on your account.'
- 'ERR_NGROK_610: The public key `<PUBKEY>` is already used in a different account.
  Remove it from the other ngrok account or generate a new SSH key pair (hint: use
  ssh-keygen).'
- 'ERR_NGROK_611: Public key is missing or empty.'
- 'ERR_NGROK_612: Invalid public key `<PUBKEY>`: `<ERR>`.'
- 'ERR_NGROK_613: Your account is limited to `<MAX>` API keys.'
- 'ERR_NGROK_614: Your account is rate limited for adding `<MAX>` API keys per `<INTERVAL>`.'
- 'ERR_NGROK_615: Your account is limited to `<MAX>` tunnel credentials.'
- 'ERR_NGROK_617: Your account is limited to `<MAX>` SSH keys.'
- 'ERR_NGROK_619: Your account is not authorized to use this ACL rule type. You specified:
  `<RULE>`.'
- 'ERR_NGROK_620: Only Enterprise or Pay-as-you-go plans can use tunnel ACL rules.
  Your account is not authorized to use tunnel ACL rules. Upgrade to an Enterprise
  or Pay-as-you-go plan at: <https://dashboard.ngrok.com/billing/subscription>.'
- 'ERR_NGROK_622: Only Enterprise or Pay-as-you-go plans can use SSH ACL rules. Your
  account is not authorized to use SSH ACL rules. Upgrade to an Enterprise or Pay-as-you-go
  plan at: <https://dashboard.ngrok.com/billing/subscription>.'
- 'ERR_NGROK_627: The auth token is already owned by a user and cannot be re-assigned
  ownership.'
- 'ERR_NGROK_628: The API key is already owned by a user and cannot be re-assigned
  ownership.'
- 'ERR_NGROK_629: The SSH public key is already owned by a user and cannot be re-assigned
  ownership.'
- 'ERR_NGROK_630: You must be an admin to set credential ownership.'
- 'ERR_NGROK_631: You may specify owner_id or owner_email, but not both.'
- 'ERR_NGROK_632: You may specify owner or membership, but not both.'
- 'ERR_NGROK_633: Your account is not authorized to specify credential ownership.'
- 'ERR_NGROK_634: No credential owner could be determined.'
- 'ERR_NGROK_635: API access requires that the owner of the API key has write privileges.'
- 'ERR_NGROK_636: The credential owner is marked as inactive on the account.'
- 'ERR_NGROK_637: This credential cannot be deleted because it is the default authtoken
  tied to `<EMAIL>`. Removing the user from this account will also delete any associated
  tokens. Credential ID: `<ID>` Description: `<DESCRIPTION>`.'
- 'ERR_NGROK_638: Your account is not allowed to create credentials with pre-computed
  tokens. To create a new credential, omit pre-computed token field and let ngrok
  generate one for you. Its value will be available as part of the response.'
- 'ERR_NGROK_702: Too many connections! The tunnel session `<SESSION>` has violated
  the rate-limit policy of `<THRESHOLD>` connections per minute by initiating `<COUNT>`
  connections in the last `<SECONDS>` seconds. Please decrease your inbound connection
  volume or upgrade to a paid plan for additional capacity.'
- 'ERR_NGROK_703: Too many connections! The account hosting this endpoint has violated
  the rate-limit policy of `<THRESHOLD>` connections per minute by initiating `<COUNT>`
  connections in the last `<SECONDS>` seconds. Please decrease your inbound connection
  volume or upgrade your account plan for additional capacity.'
- 'ERR_NGROK_708: This URL has expired. Please sign up for a free ngrok account to
  create URLs that do not expire. You can also restart the ngrok agent which will
  create a new URL that will expire after the same amount of time.'
- 'ERR_NGROK_714: This ngrok account has reached its simultaneous connections limit.
  Please log into <https://dashboard.ngrok.com> to view your options.'
- 'ERR_NGROK_715: You have exceeded your limit on connections per minute. This limit
  will reset within 1 minute. If you expect to continually exceed these limits, please
  reach out to support (support@ngrok.com).'
- 'ERR_NGROK_716: This unauthenticated ngrok session has reached its simultaneous
  connections limit. Please sign up for a free account at <https://ngrok.com> for
  a higher limit.'
- 'ERR_NGROK_717: This unauthenticated ngrok session has reached its connection rate
  limit. Please sign up for a free account at <https://ngrok.com> for a higher limit.'
- 'ERR_NGROK_1670: Your account is limited to `<MAX>` endpoint configurations.'
- 'ERR_NGROK_1672: The CA ID `<ID>` specified for the Mutual TLS module does not exist.'
- 'ERR_NGROK_1673: Description is limited to `<MAX>` characters; you have entered
  `<VAL>` characters.'
- 'ERR_NGROK_1674: Metadata is limited to `<MAX>` characters; you have entered `<VAL>`
  characters.'
- 'ERR_NGROK_1675: The Mutual TLS configurations exceeds the limit of `<LIMIT>` attached
  certificate authorities.'
- 'ERR_NGROK_1679: The endpoint configuration specifies conflicting authentication
  modules. Only one of SAML, OIDC, OAuth or Basic Auth may be enabled.'
- 'ERR_NGROK_1680: The SAML metadata exceeds the maximum length of `<MAX>` bytes,
  got `<NBYTES>`.'
- 'ERR_NGROK_1681: You must specify only the SAML IdP metadata or the SAML IdP metadata
  URL, but not both.'
- 'ERR_NGROK_1688: The OIDC issuer property is required.'
- 'ERR_NGROK_1689: The OIDC Client ID property is required.'
- 'ERR_NGROK_1690: The OIDC Client Secret property is required.'
- 'ERR_NGROK_1691: One of the SAML IdP Metadata or IdP Metadata URL properties must
  be specified.'
- 'ERR_NGROK_1692: Invalid endpoint configuration, session inactivity timeout cannot
  be more than one year, was `<ACTUAL>`.'
- 'ERR_NGROK_1694: Mutual TLS at edge requires TLS termination at edge.'
- 'ERR_NGROK_1700: Only Enterprise accounts can use session operations. Your account
  is not authorized to use session operations.'
- 'ERR_NGROK_1800: You have reached the maximum of `<MAX>` IP Policies on a restriction.'
- 'ERR_NGROK_1801: Invalid IP Restriction. The policy `<POLICY_ID>` does not exist
  on your account.'
- 'ERR_NGROK_1803: The provided IP Restriction type “`<TYPE>`” is invalid. Valid types:
  `<SUPPORTED>`.'
- 'ERR_NGROK_1804: An IP Restriction must specify at least one IP Policy.'
- 'ERR_NGROK_1900: The provided certificate is in an unknown or unsupported format.
  The error encountered while parsing was: “`<ERROR>`”.'
- 'ERR_NGROK_1902: The provided private key is encrypted.'
- 'ERR_NGROK_1904: Your account can’t upload custom TLS certificates.'
- 'ERR_NGROK_1906: The domain `<DOMAIN>` is not a valid domain name.'
- 'ERR_NGROK_1908: Invalid authority `<AUTHORITY>`. Valid authorities: `<SUPPORTED>`.'
- 'ERR_NGROK_1921: The uploaded certificate PEM data exceeds the maximum length limit
  of `<MAX_SIZE>` bytes.'
- 'ERR_NGROK_1923: The provided certificate and private key do not match each other.'
- 'ERR_NGROK_1926: The uploaded certificate bundle contained the following certificates
  in this order: [`<ORDER>`], however `<INVALID>` has not been signed by `<INTERMEDIATE>`.'
- 'ERR_NGROK_1953: Your account is not allowed to use SSH certificates.'
- 'ERR_NGROK_1954: Your account is limited to `<MAX>` Certificate Authorities.'
- 'ERR_NGROK_1960: Your account is limited to `<MAX>` SSH User Certificates.'
- 'ERR_NGROK_5528: The access code from `<PROVIDER>` has expired and cannot be used.
  Please authorize again more quickly.'
- 'ERR_NGROK_5529: `<PROVIDER>` denied access to your data during the final step of
  authorization. Please contact the owner of this application to ensure it is properly
  installed for your organization.'
- 'ERR_NGROK_5530: OAuth is not enabled on the domain “`<HOSTNAME>`”.'
- 'ERR_NGROK_5531: `<PROVIDER>` denied access to your account as the correct account
  could not be chosen automatically. Please try authorizing again or contacting the
  owner of this application if the issue persists.'
- 'ERR_NGROK_5532: `<PROVIDER>` denied access to your account as reauthentication
  is required. Please try logging in again or contact the owner of this application
  if the issue persists.'
- 'ERR_NGROK_5533: `<PROVIDER>` had an internal server error when refreshing your
  information. Please try again or contact the owner of this application if the issue
  persists.'
- 'ERR_NGROK_5534: Encountered an error while attempting to fetch OIDC provider metadata:
  “`<ERROR>`”.'
- 'ERR_NGROK_5535: The OAuth provider “`<PROVIDER>`” cannot be used without a user-defined
  client ID and client secret.'
- 'ERR_NGROK_5536: Encountered an error while fetching user data: `<PROVIDER>` did
  not provide a user ID for your account.'
- 'ERR_NGROK_5537: Encountered an error while resolving client secret CEL expression.'
- 'ERR_NGROK_5538: Encountered an error while encrypting the client secret.'
- 'ERR_NGROK_5539: Encountered an error while decrypting the client secret.'
- 'ERR_NGROK_6000: This tunnel was unable to update; this may be temporary, please
  try again shortly.'
- 'ERR_NGROK_6001: This tunnel is no longer available as its account was not found.'
- 'ERR_NGROK_6002: This tunnel is no longer available as its account does not own
  resources required to run.'
- 'ERR_NGROK_6003: Endpoint configurations cannot be used with agent-specified basic
  auth. Either remove the endpoint configuration from this endpoint or restart the
  agent without basic auth.'
- 'ERR_NGROK_6006: The Event Destination `<EDID>` required by `<ECID>` was not found.
  If these were recently created or removed, this should be temporary and resolve
  itself.'
- 'ERR_NGROK_6008: This endpoint is unavailable as its account is suspended due to
  lack of payment.'
- 'ERR_NGROK_6009: The ngrok account that was hosting this webpage has been suspended
  for violation of ngrok’s Terms of Service. If you’re seeing this page instead of
  the one you were expecting, ngrok has most likely blocked a phishing attack targeting
  you. If you did enter any sensitive information before seeing this notice, please
  contact the real site by directly entering their URL in your browser. Learn more
  about how to protect yourself from phishing scams: <https://consumer.ftc.gov/articles/how-recognize-and-avoid-phishing-scams>'
- 'ERR_NGROK_6010: Endpoint configuration is incompatible with tunnel; module `<MODULE>`
  required by Endpoint Configuration `<ECID>` is incompatible with `<PROTO>` tunnels.'
- 'ERR_NGROK_6011: You may not specify `<MIDDLEWARE>` options from the ngrok agent
  because this domain has a configured endpoint configuration: `<ECID>`. Remove the
  endpoint configuration from this domain or remove the conflicting options when starting
  the ngrok agent.'
- 'ERR_NGROK_6013: Failed to compile filter for Event Subscription `<ESID>`.'
- 'ERR_NGROK_6014: Failed to run filter for Event Subscription `<ESID>`.'
- 'ERR_NGROK_6018: The Endpoint `<HOSTPORT>` has both an Endpoint Configuration (`<EPCID>`)
  and a Tunnel with incompatible configuration (`<TUNNELID>`) online.'
- 'ERR_NGROK_6019: The Endpoint `<HOSTPORT>` has both an Edge (`<EDGID>`) and Endpoint
  Configuration (`<EPCID>`) configured.'
- 'ERR_NGROK_6020: The Endpoint `<HOSTPORT>` has both an Edge (`<EDGID>`) and Tunnel
  (`<TUNID>`) online.'
- 'ERR_NGROK_6021: HTML content may only be served after you upgrade to a paid account.'
- 'ERR_NGROK_6023: HTML content may only be served in this region after you upgrade
  to a paid account.'
- 'ERR_NGROK_6024: You are about to visit  <HOSTPORT>``<SERVEDBYSTR> . This website
  is served for free through ngrok.com. You should only visit this website if you
  trust whoever sent the link to you.'
- 'ERR_NGROK_6025: The tunnel `<URL>` is already bound to another tunnel session.
  Please start the ngrok agent with a different domain.'
- 'ERR_NGROK_6026: The Endpoint `<HOSTPORT>` has both a Cloud Endpoint (`<CLEPID>`)
  and Tunnel (`<TUNID>`) online.'
- 'ERR_NGROK_6027: The Endpoint `<HOSTPORT>` has both a Cloud Endpoint (`<CLEPID>`)
  and Edge (`<EDGID>`) configured.'
- 'ERR_NGROK_6028: The Endpoint `<HOSTPORT>` has both a Cloud Endpoint (`<CLEPID>`)
  and Endpoint Configuration (`<TUNID>`) configured.'
- 'ERR_NGROK_6029: The traffic policy configured for cloud endpoint `<CLEPID>` is
  non-terminating.'
- 'ERR_NGROK_6030: The url `<URL>` has multiple endpoints, but they do not all have
  pooling enabled.'
- 'ERR_NGROK_6031: HTTP endpoints are disabled for HIPAA-enabled plans'
- 'ERR_NGROK_6500: Your account is not authorized to use the backends feature.'
- 'ERR_NGROK_6501: Cannot save backend reference `<ID>` because it does not exists.'
- 'ERR_NGROK_6502: The backend could not be deleted because it is still referenced
  by at least one backend.'
- 'ERR_NGROK_6503: Description is limited to `<MAX>` characters; you have entered
  `<VAL>` characters.'
- 'ERR_NGROK_6504: Metadata is limited to `<MAX>` characters; you have entered `<VAL>`
  characters.'
- 'ERR_NGROK_6505: Static backend requires address in the host:port form.'
- 'ERR_NGROK_6506: Static backend address `<ADDR>` is invalid (`<REASON>`). Use host:port
  as address.'
- 'ERR_NGROK_6507: Static backend address `<ADDR>` is missing host. Use host:port
  as address.'
- 'ERR_NGROK_6508: Tunnel group labels count is limited to `<MAX>`; you have `<VAL>`
  labels.'
- 'ERR_NGROK_6509: Tunnel group label key length is limited to between `<MIN>` and
  `<MAX>`; key `<NAME>` has `<VAL>` characters.'
- 'ERR_NGROK_6510: Tunnel group label value length is limited to between `<MIN>` and
  `<MAX>`; value `<NAME>` has `<VAL>` characters.'
- 'ERR_NGROK_6511: Weighted backends count is limited to `<MAX>`; you have `<VAL>`
  backends.'
- 'ERR_NGROK_6512: Weighted backend `<ID>` weight `<VAL>` is out of range; it must
  be between `<MIN>` and `<MAX>`.'
- 'ERR_NGROK_6513: Failover backends may only contain up to `<MAX>` failover backends;
  you have `<VAL>` failover backends.'
- 'ERR_NGROK_6514: Backend not found.'
- 'ERR_NGROK_6515: Tunnel Group Backend `<ID>` did not match any tunnels. Please start
  tunnels matching its labels in order to serve traffic.'
- 'ERR_NGROK_6516: HTTP Response Backend `<ID>` had too large of a body. The maximum
  is length `<MAX>` bytes, but the supplied body was `<VAL>` bytes long.'
- 'ERR_NGROK_6517: HTTP Response Backend `<ID>` had an invalid status code. The status
  code `<STATUS>` is an invalid HTTP Status Code.'
- 'ERR_NGROK_6522: The header beginning with `<PREFIX>`…’ exceeds the maximum header
  name length of `<BYTES>` bytes.'
- 'ERR_NGROK_6523: The header value for `<HEADERKEY>` beginning with `<PREFIX>`…’
  exceeds the maximum header value length of `<BYTES>` bytes.'
- 'ERR_NGROK_6524: A Weighted Backend may not reference the backend `<ID>` because
  it is a `<BACKENDTYPE>` backend.'
- 'ERR_NGROK_6525: A Failover Backend may not reference the backend `<ID>` because
  it is a `<BACKENDTYPE>` backend.'
- 'ERR_NGROK_6526: The id `<ID>` is not a valid backend ID.'
- 'ERR_NGROK_6527: The id `<ID>` is invalid; expected an id of type `<BACKENDTYPE>`
  backend.'
- 'ERR_NGROK_6528: Traffic made it to the ngrok edge, but there are no tunnels online
  serving an app.'
- 'ERR_NGROK_6529: Your account is not authorized to use the weighted backends feature.
  Upgrade to an Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_6530: The `<ID>` header cannot be removed without specifying a replacement.'
- 'ERR_NGROK_6531: The tunnel group label key/value `<ID>` may not contain ’=’ characters.'
- 'ERR_NGROK_6600: The account `<NAME>` has reached its team size limit and may not
  add additional users. Please ask the account owner to upgrade your plan: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_6601: Failed to add `<USER_NAME>` as a member of account `<ACCOUNT_NAME>`
  because they are already a member.'
- 'ERR_NGROK_6602: You may not remove the last administrator of the account. Grant
  administrator privileges to another member first.'
- 'ERR_NGROK_6603: Your account is not allowed to set membership permissions.'
- 'ERR_NGROK_6604: You may not remove an administrator from the account. Only administrators
  may remove other administrators.'
- 'ERR_NGROK_6605: You may not grant administrator privileges to an account member.
  Only administrators may grant administrative privileges.'
- 'ERR_NGROK_6606: You may not change an administrator’s permissions. Only other administrators
  may make that change.'
- 'ERR_NGROK_6607: You may not change the account administrator. Only the current
  accont administrator may make this change.'
- 'ERR_NGROK_6608: Could not transfer administrative control to membership `<ID>`
  because it could not be found on this account.'
- 'ERR_NGROK_6609: Swapping administrators is not supported on accounts with RBAC
  enabled.'
- 'ERR_NGROK_6612: You are not allowed to remove members.'
- 'ERR_NGROK_6613: You are not allowed to create members.'
- 'ERR_NGROK_6614: You are not allowed to set the permissions of members.'
- 'ERR_NGROK_6615: You may not create users with higher permissions than your own.'
- 'ERR_NGROK_6616: You may not set user permissions higher than your own.'
- 'ERR_NGROK_6617: Users must have a defined billing permission.'
- 'ERR_NGROK_6618: You are not allowed to create members, this account uses SCIM 2.0
  to manage members.'
- 'ERR_NGROK_6619: You are not allowed to remove members, this account uses SCIM 2.0
  to manage members.'
- 'ERR_NGROK_6620: You are not allowed to activate/deactivate members, this account
  uses SCIM 2.0 to manage members.'
- 'ERR_NGROK_6621: You are not allowed to activate/deactivate admins. Only other administrators
  may make that change.'
- 'ERR_NGROK_6622: You may not deactivate the last administrator of the account. Grant
  administrator privileges to another member first.'
- 'ERR_NGROK_6700: The description is limited to `<MAX>` characters, but the provided
  value had `<VAL>` characters.'
- 'ERR_NGROK_6701: Metadata is limited to `<MAX>` characters, but the provided value
  had `<VAL>` characters.'
- 'ERR_NGROK_6702: No DNS records were returned when querying for an NS record for
  the domain `<DOMAIN>`.'
- 'ERR_NGROK_6703: The NS records for the domain `<DOMAIN>` “`<GOT>`” do not match
  the expected targets “`<EXPECTED>`”.'
- 'ERR_NGROK_6704: The specified domain “`<DOMAIN>`” is not a valid domain name. Enter
  a valid DNS name.'
- 'ERR_NGROK_6705: The agent ingress domain “`<DOMAIN>`” must be a third party domain,
  you may not enter a domain controlled by ngrok.'
- 'ERR_NGROK_6706: The agent ingress domain “`<DOMAIN>`” already exists, choose another
  domain.'
- 'ERR_NGROK_6707: Your account can’t reserve custom agent ingresses. Contact us for
  access to the Agent Ingresses feature.'
- 'ERR_NGROK_6708: Multiple certificate sources provided.'
- 'ERR_NGROK_6709: Some of the dedicated IPs “`<IPS>`” are already used in a different
  agent ingress.'
- 'ERR_NGROK_6710: Dedicated IP “`<IP>`” is not a valid IP.'
- 'ERR_NGROK_6711: Dedicated IP “`<IP>`” is duplicated in the set of IPs.'
- 'ERR_NGROK_7000: Edge not found'
- 'ERR_NGROK_7001: Invalid edge ID'
- 'ERR_NGROK_7002: Invalid edge request'
- 'ERR_NGROK_7007: The IP Policy ID `<ID>` specified for the IP Restriction module
  does not exist.'
- 'ERR_NGROK_7008: Edges are deprecated and no longer available. If you’ve used edges
  before, a migration guide is available: [https://ngrok.com/docs/universal-gateway/edges](/docs/universal-gateway/edges)/#migration-guide.
  If you have lost access to actively running edges, this is an error, please contact
  [support@ngrok.com](mailto:support@ngrok.com) for help.'
- 'ERR_NGROK_7009: Your account is limited to a maximum of `<MAX>` edges.'
- Failed to parse the configuration for policy action type `<TYP>`. `<ERR>`
- 'Configuration for policy action type `<TYP>` has invalid value: `<FIELD>`.'
- Policy action type `<TYP>` does not support the `<PROTO>` protocol.
- A policy must define at least one action.
- Policy action type `<TYP>` is unreachable due to a prior terminating action.
- 'Failed to parse configuration for `<PHASE>` `<TYPE>`: exceeds maximum allowed name
  length of `<MAX>`, was `<VAL>`.'
- 'Failed to parse configuration for `<PHASE>` `<TYPE>`: exceeds maximum allowed value
  length of `<MAX>`, was `<VAL>`.'
- 'Failed to parse configuration for `<PHASE>` `<TYPE>`: name is invalid `<NAME>`.'
- 'Failed to parse configuration for `<PHASE>` `<TYPE>`: value is invalid `<NAME>`.'
- 'Failed to parse configuration for `<PHASE>` `<TYPE>`: can have at most `<MAX>`
  header values, but `<VAL>` were provided.'
- 'Failed to parse configuration for `<PHASE>` add-headers: contained an invalid template:
  `<TEMPLATE>`: `<ERR>`.'
- 'Failed to parse configuration for compress: contained an invalid algorithm: `<ALGORITHM>`.'
- 'Failed to parse configuration for `<ACTION>`: `<CONFIG>` must be between `<MIN>`
  and `<MAX>` inclusive, was `<ACTUAL>`.'
- 'Invalid IP Policy Reference(s): `<REFERENCE>`.'
- 'Invalid CIDR(s): `<CIDR>`.'
- Too many entries for `<FIELD>`. You provided `<ENTRIES>` entries, but the limit
  is `<LIMIT>`.
- '`<FIELD>` cannot be user-configured.'
- 'Invalid configuration for `<ACTION>`: `<CONFIG>` length of `<ACTUAL>` exceeded
  limit of `<MAX>`.'
- 'Invalid configuration for `<ACTION>`: `<CONFIG>` must be `<VALID>`, was `<ACTUAL>`.'
- 'Invalid configuration for `<ACTION>`: `<CONFIG>` cannot be empty.'
- 'Invalid configuration for action `<ACTION>`: failed to compile CEL template expressions
  in `<FIELD>`. `<ERR>`.'
- 'Invalid configuration for `<ACTION>`: `<CONFIG>` duration of `<ACTUAL>` exceeded
  limit of `<MAX>`.'
- 'Invalid configuration for `<ACTION>`: `<CONFIG>` must be a URL, but was `<ACTUAL>`.'
- 'Invalid configuration for `<ACTION>`: The issuer URL at `<CONFIG>` with a value
  of `<ISSUERURL>` did not return a valid OpenID Connect Discovery document.'
- 'Invalid configuration for `<ACTION>`: Failed to parse `<CONFIG>`: `<REASON>`.'
- Failed to validate Traffic Policy for unknown protocol `<PROTO>`.
- Invalid Traffic Policy phase `<PHASE>` for protocol `<PROTO>`.
- 'Invalid configuration for `<ACTION>`: `<CONFIG>` contains duplicate values: `<DUPLICATES>`.'
- Failed to resolve validated configuration for policy action type `<TYP>`. `<ERR>`
- Failed to compile resolved configuration for policy action type `<TYP>`. `<ERR>`
- 'Invalid configuration for `<ACTION>`: `<CONFIG>` is missing required element `<ELEMENT>`.'
- The traffic policy provided is not guaranteed to handle traffic. Ensure traffic
  always results in an action, e.g. custom response or forward action.
- 'The traffic policy was not able to be parsed: `<ERROR>`.'
- 'Invalid configuration for `<ACTION>`: `<CONFIG>` length of `<ACTUAL>` does not
  satisfy minimum length of `<MIN>`.'
- 'Failed to resolve interpolated CEL expression. The expression was: `<CEL>` ERROR:
  `<ERROR>`.'
- 'Invalid policy: Only one auth action allowed per endpoint.'
- 'Invalid configuration for `<ACTION>`: `<MISSING>` is required when `<SPECIFIED>`
  is specified.'
- 'Invalid configuration for `<ACTION>`: The domain `<DOMAIN>` cannot be used as it
  doesn’t belong to the endpoint.'
- 'Invalid configuration for `<ACTION>`: `<CONFIG>` `<DOMAIN>` contains invalid puny
  code.'
- 'Invalid configuration for `<ACTION>`: `<CONFIG>` `<DOMAIN>` is not a valid domain.'
- 'Invalid configuration for `<PHASE>` `<ACTION>`: `<CONFIG>` can have at most `<MAX>`
  query key/value pairs, but `<VAL>` were provided.'
- 'Invalid configuration for `<PHASE>` `<ACTION>`: `<CONFIG>`: exceeds maximum allowed
  key length of `<MAX>`, was `<VAL>`.'
- 'Already validated url didn’t parse during `<STEP>` step: `<URL>` `<ERR>`.'
- HTTPS Edges do not support the on_tcp_connect Traffic Policy phase. Use a Cloud
  Endpoint instead.
- 'Memory limit exceeded by `<ACTION>` action: `<ERR>`.'
- 'Invalid configuration for `<ACTION>`: Nested variables are too deep. Maximum nesting
  allowed is `<MAX>`.'
- 'Invalid format for set-vars: vars must be a list of maps of exactly size 1.'
- 'Failed to evaluate CEL expression: `<EXPRESSION>` for `<ACTION>` at runtime: `<ERR>`.'
- 'Failed to resolve CEL expression. The expression was: `<CEL>` ERROR: `<ERROR>`.'
- 'Invalid configuration for `<ACTION>`: Maximum `<ELEMENT>` allowed per action is
  `<MAX>`.'
- The action `<ACTION>` is not available for your current plan. Please upgrade to
  `<PLANS>` to use this action.
- 'Invalid basic auth credential. Username `<USERNAME>` fails to meet requirements
  of RFC 7617 #2.1: `<ERR>`.'
- 'Invalid basic auth credential. The password of user `<USERNAME>` fails to meet
  requirements of RFC 7617 #2.1: `<ERR>`.'
- No tunnels exist in this account.
- No tunnels could be found matching the supplied combination of labels.
- 'Failed to parse the configuration for policy action type `<TYP>`. Field `<FIELD>`
  is not a valid regular expression. ERROR: `<ERR>`.'
- 'Error performing TLS handshake: `<ERR>`.'
- This client does not support TLS SNI, but the endpoint’s TLS configuration requires
  SNI. See [https://ngrok.com/docs/cloud-edge/edges/tls](/docs/universal-gateway/tls)#compatible-clients.
- ngrok gateway error The server returned an invalid or incomplete HTTP response.
- ngrok gateway timeout A connection to the server not be established.
- ngrok gateway error The server refused our connection.
- ngrok gateway error.
- ngrok gateway error None of the configured backends responded in time.
- ngrok gateway error Received an HTTP network error (status code 0) from a backend.
- ngrok gateway error Received an HTTP response with unknown status code `<CODE>`
  from a backend.
- Your session has expired due to age. Refresh this page or use the link below to
  log back in with `<PROVIDER>`.
- We lack permission to retrieve your data from `<PROVIDER>` and cannot continue.
  Make sure to allow all requested permissions for this application.
- '`<PROVIDER>` requires that you correct an issue with your account prior to using
  this website. Please log in to `<PROVIDER>`, correct the issue, and then refresh
  this page.'
- '`<PROVIDER>` requires that you correct an issue with your account prior to using
  this website: `<ERROR_TITLE>`: `<ERROR_MESSAGE>` After correcting the issue with
  `<PROVIDER>`, refresh this page.'
- The email “`<EMAIL>`” associated with your `<PROVIDER>` account is not valid. Please
  correct your email with `<PROVIDER>` and then refresh this page.
- You lack the required permission to use this site. Contact the owner to obtain permission
  and then refresh this page.
- The initial information required to authenticate with `<PROVIDER>` is invalid.
- The state parameter used to validate your request is missing. Please close this
  page and try again.
- The state parameter used to validate your request cannot be read. Please close this
  page and try again.
- '`<PROVIDER>` did not provide an email for your account. Check that you have a primary
  email and that it’s confirmed before trying again.'
- The email permission from `<PROVIDER>` was not granted but is required. Please ensure
  that the email permission is granted.
- 'All requested permissions with `<PROVIDER>` must be granted in order to use this
  site, but the following were not: `<PERMISSIONS>`.'
- '`<PROVIDER>` has returned an error when attempting to authorize you to use this
  site: `<ERROR>`.'
- '`<PROVIDER>` denied access to this application when retrieving your information.
  This is likely caused by expiration or revocation of your authorization.'
- In order to continue, you must authorize this application’s access to `<PROVIDER>`.
- The redirect_uri configured for this application is not properly configured or whitelisted
  with `<PROVIDER>`. Please contact the owner of this application in order to fix
  this error.
- '`<PROVIDER>` denied access to your data when attempting to authorize you. Please
  contact the owner of this application to ensure it is properly installed for your
  organization.'
- The initial link used to authorize with `<PROVIDER>` had unsupported parameters.
- '`<PROVIDER>` denied access to your data. Please contact the owner of this application
  to ensure it is properly installed for your organization.'
- Logging in with `<PROVIDER>` took more than 15 minutes and was rejected for security.
  Please try again.
- The state parameter required to finish authorization with `<PROVIDER>` is missing.
  Please start over to try again.
- The nonce cookie required to finish authorization with `<PROVIDER>` is missing.
  Please start over to try again.
- The access code from `<PROVIDER>` has expired and cannot be used. Please try again
  and finish authorization more quickly.
- The access code from `<PROVIDER>` has already been used. Please remove any bookmarks
  to this page and start reauthorization again.
- The state parameter required to finish authorization with `<PROVIDER>` does not
  match this host. Please try again.
- '`<PROVIDER>` denied access to your data. The owner of this application should verify
  the OAuth application client ID and secret are valid.'
- '`<PROVIDER>` rejected authorization due to a invalid or unknown scope requested
  by this application. The owner of this application must correct the application
  configuration before you can continue.'
- '`<PROVIDER>` rejected authorization due to invalid or expired credentials. If this
  error persists after reauthorizing, contact the owner of the application to ensure
  you have permission.'
- An error occurred when retrieving your session. Please refresh the page to log in
  and try again.
- '`<PROVIDER>` rejected use of your session’s OAuth token: “`<ERROR>`”. Your session
  is invalid and cannot continue.'
- An invalid request was sent to `<PROVIDER>` but its response is required in order
  to continue. This is a bug and it has been reported; please try again in a couple
  of hours to see if it has been resolved.
- An unexpected error occurred when communicating with `<PROVIDER>`.
- '`<PROVIDER>` has throttled this application and cannot be reached right now. Please
  try again in a few minutes.'
- '`<PROVIDER>` has throttled this application and cannot be reached right now. Please
  try again in about an hour.'
- An error occurred when finishing authorization with `<PROVIDER>`. This is likely
  caused by authorization taking too long. Please try again.
- 'An error occurred when authorizing with `<PROVIDER>`: `<ERROR>`.'
- '`<PROVIDER>` is too busy to handle requests and authorization cannot be completed
  at this time.'
- '`<PROVIDER>` enountered an error and authorization cannot be completed at this
  time.'
- 'ERR_NGROK_6009: The ngrok account that was hosting this webpage has been suspended
  for violation of ngrok’s Terms of Service. If you’re seeing this page instead of
  the one you were expecting, ngrok has most likely blocked a phishing attack targeting
  you. If you did enter any sensitive information before seeing this notice, please
  contact the real site by directly entering their URL in your browser.'
- 'ERR_NGROK_6031: HTTP endpoints are disabled for HIPAA-enabled plans.'
- 'ERR_NGROK_6607: You may not change the account administrator. Only the current
  account administrator may make this change.'
- 'ERR_NGROK_7011: Invalid edge, circuit breaker error threshold percentage must be
  between 0.0 and 1.0 inclusive, was `<VAL>`.'
- 'ERR_NGROK_7012: The auth provider `<VAL>` does not exist. Specify an auth provider
  ID or the special value ‘agent’.'
- 'ERR_NGROK_7013: The edge module exceeds the max number of IP Policies. You specified
  `<VAL>`, the maximum is `<MAX>`.'
- 'ERR_NGROK_7014: The edge module TLS CA certificate size exceeds the max. You specified
  `<VAL>`, the maximum is `<MAX>`.'
- 'ERR_NGROK_7015: The edge module exceeds the max number of headers. You specified
  `<VAL>`, the maximum is `<MAX>`.'
- 'ERR_NGROK_7016: Invalid edge module, circuit breaker tripped duration must be greater
  than 0, was `<VAL>`.'
- 'ERR_NGROK_7017: Invalid edge module, circuit breaker rolling window must be greater
  than 0, was `<VAL>`.'
- 'ERR_NGROK_7018: Invalid edge module, circuit breaker num buckets must be greater
  than 0 and less than `<MAX>`, was `<VAL>`.'
- 'ERR_NGROK_7019: The edge could not be deleted because it is still referenced by
  at least one reserved domain or reserved address.'
- 'ERR_NGROK_7020: The edge must specify a type.'
- 'ERR_NGROK_7021: The module `<NAME>` is not supported on an edge of type `<TYPE>`.'
- 'ERR_NGROK_7022: `<NAME>` is not a valid edge type. Must be one of ‘http’, ‘https’,
  ‘tcp’.'
- 'ERR_NGROK_7023: `<KEY>` is not a valid HTTP header name because it contains at
  least one invalid character.'
- 'ERR_NGROK_7024: `<VAL>` is not a valid HTTP header value: `<REASON>`.'
- 'ERR_NGROK_7025: You must specify at least one IP Policy in the IP Restriction module.'
- 'ERR_NGROK_7026: SNS webhook verification does not accept a secret.'
- 'ERR_NGROK_7027: Webhook verification for `<T>` requires a secret.'
- 'ERR_NGROK_7028: There were validation errors while saving the edge:`<ERRS>`'
- 'ERR_NGROK_7029: You must specify a supported provider name. Supported providers:
  [`<T>`]'
- 'ERR_NGROK_7030: Webhook provider `<T>` is not supported. Supported providers: [`<TYPE>`]'
- 'ERR_NGROK_7031: Only Pro and Enterprise accounts can use edges webhook verification.
  Your account is not authorized to use webhook verification. Upgrade to a Pro or
  Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7032: You may not configure the TLS termination parameter `<PARAMETER>`
  when the HTTPS module disables TLS termination.'
- 'ERR_NGROK_7033: Invalid edge module, unmanaged provider configurations must specify
  a client ID and a client secret.'
- 'ERR_NGROK_7034: Invalid edge module, custom OAuth scopes on a managed OAuth application
  are not allowed. Define a custom OAuth application to use custom scopes.'
- 'ERR_NGROK_7035: Invalid edge module, OAuth auth check interval must be at least
  `<MIN>`, was `<ACTUAL>`.'
- 'ERR_NGROK_7036: Invalid edge module, OAuth may only have one provider configuration
  but multiple are defined: [`<PROVIDER_NAMES>`].'
- 'ERR_NGROK_7037: Invalid edge module, OAuth does not define any provider configurations
  but one is required.'
- 'ERR_NGROK_7038: Invalid edge module, OAuth provider `<PROVIDER>` requires at least
  the `<SCOPE>` scope to authenticate by `<AUTH_FEATURE>`.'
- 'ERR_NGROK_7039: Invalid edge module, OAuth provider `<PROVIDER>` contains an invalid
  email domain: `<NAME>`.'
- 'ERR_NGROK_7040: Invalid edge module, OAuth GitHub Teams must be listed as either
  numerical ids or in the format ‘org_slug/team_slug’, `<TEAM>` does not match either
  format.'
- 'ERR_NGROK_7041: Only Pro and Enterprise accounts can use edges OAuth. Your account
  is not authorized to use OAuth. Upgrade to a Pro or Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7042: Invalid edge module, OAuth cookie prefix `<PREFIX>` must consist
  of only alphanumeric characters with periods.'
- 'ERR_NGROK_7043: Invalid edge module, OAuth provider `<PROVIDER>` contains an invalid
  email address, `<NAME>`.'
- 'ERR_NGROK_7044: Invalid edge module, OAuth provider `<PROVIDER>` contains an email
  domain with invalid punycode: `<NAME>`.'
- 'ERR_NGROK_7045: Invalid edge module, OAuth provider `<PROVIDER>` contains an email
  address with invalid punycode: `<NAME>`.'
- 'ERR_NGROK_7046: Invalid edge module, OAuth provider `<PROVIDER>` email addresses
  must be unique, but a duplicate is present: `<DUPLICATE>`.'
- 'ERR_NGROK_7047: Invalid edge module, OAuth provider `<PROVIDER>` email domains
  must be unique, but a duplicate is present: `<DUPLICATE>`.'
- 'ERR_NGROK_7048: Invalid edge module, OAuth provider `<PROVIDER>` teams must be
  unique, but a duplicate is present: `<DUPLICATE>`.'
- 'ERR_NGROK_7049: Invalid edge module, OAuth provider `<PROVIDER>` organizations
  must be unique, but a duplicate is present: `<DUPLICATE>`.'
- 'ERR_NGROK_7050: Invalid edge module, OAuth provider `<PROVIDER>` groups must be
  unique, but a duplicate is present: `<DUPLICATE>`.'
- 'ERR_NGROK_7051: Invalid edge module, OAuth provider `<PROVIDER>` email addresses
  must not contain empty values'
- 'ERR_NGROK_7052: Invalid edge module, OAuth provider `<PROVIDER>` email domains
  must not contain empty values'
- 'ERR_NGROK_7053: Invalid edge module, OAuth provider `<PROVIDER>` teams must not
  contain empty values'
- 'ERR_NGROK_7054: Invalid edge module, OAuth provider `<PROVIDER>` organizations
  must not contain empty values'
- 'ERR_NGROK_7055: Invalid edge module, OAuth provider `<PROVIDER>` groups must not
  contain empty values'
- 'ERR_NGROK_7056: The edge module exceeds the maximum number of OAuth scopes. You
  specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_7057: The edge module exceeds the maximum number of OAuth GitHub teams.
  You specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_7058: The edge module exceeds the maximum number of OAuth GitHub orgs.
  You specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_7059: The edge module exceeds the maximum number of OAuth Google groups.
  You specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_7060: The edge module exceeds the maximum number of OAuth emails. You
  specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_7061: The edge module exceeds the maximum number of OAuth domains. You
  specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_7062: The edge specifies the following modules which may not be enabled
  when TLS is not terminated: `<MODULE_NAMES>`.'
- 'ERR_NGROK_7067: Invalid edge module, email addresses must be lowercase but `<EMAIL>`
  is not.'
- 'ERR_NGROK_7068: Invalid edge module, email domains must be lowercase but `<DOMAIN>`
  is not.'
- 'ERR_NGROK_7069: Duplicate ‘add’ header, `<HEADER>` was provided twice with different
  casings: `<CASE_ONE>` and `<CASE_TWO>`.'
- 'ERR_NGROK_7070: Your account is limited to `<MAX>` edges.'
- 'ERR_NGROK_7071: Your account is rate limited for adding `<MAX>` edges per `<INTERVAL>`.'
- 'ERR_NGROK_7072: The CA ID `<ID>` specified for the Mutual TLS module does not exist.'
- 'ERR_NGROK_7073: Description is limited to `<MAX>` characters; you have entered
  `<VAL>` characters.'
- 'ERR_NGROK_7074: Metadata is limited to `<MAX>` characters; you have entered `<VAL>`
  characters.'
- 'ERR_NGROK_7075: The Mutual TLS configurations exceeds the limit of `<LIMIT>` attached
  certificate authorities.'
- 'ERR_NGROK_7079: The edge specifies conflicting authentication modules. Only one
  of SAML, OIDC, or OAuth may be enabled.'
- 'ERR_NGROK_7080: The SAML metadata exceeds the maximum length of `<MAX>` bytes,
  got `<NBYTES>`.'
- 'ERR_NGROK_7081: You must specify only the SAML IdP metadata or the SAML IdP metadata
  URL, but not both.'
- 'ERR_NGROK_7082: Failed to connect to IdP metadata URL `<MDURL>`: `<ERR>`.'
- 'ERR_NGROK_7083: Failed to parse the SAML IdP metadata: `<ERR>`.'
- 'ERR_NGROK_7084: Received unexpected status code `<STATUSCODE>` while fetching metadata
  URL `<MDURL>`'
- 'ERR_NGROK_7085: Failed to parse the SAML IdP metadata fetched from URL `<MDURL>`:
  `<ERR>`.'
- 'ERR_NGROK_7086: Encountered an error while reading the response body from the IdP
  metadata URL `<MDURL>`: `<ERR>`.'
- 'ERR_NGROK_7087: The specified OIDC issuer has a maximum length of `<MAX>` bytes.
  The specified value is `<N>` bytes.'
- 'ERR_NGROK_7088: The OIDC issuer property is required.'
- 'ERR_NGROK_7089: The OIDC Client ID property is required.'
- 'ERR_NGROK_7090: The OIDC Client Secret property is required.'
- 'ERR_NGROK_7091: One of the SAML IdP Metadata or IdP Metadata URL properties must
  be specified.'
- 'ERR_NGROK_7092: Invalid edge module, session inactivity timeout cannot be more
  than one year, was `<ACTUAL>`.'
- 'ERR_NGROK_7093: Your account is not authorized to use basic auth. Upgrade to a
  Pro or Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7094: Your account is not authorized to use compression. Upgrade to a
  Pro or Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7095: Your account is not authorized to use circuit breaker. Upgrade
  to a Pro or Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7096: Your account is not authorized to use request headers. Upgrade
  to a Pro or Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7097: Your account is not authorized to use response headers. Upgrade
  to a Pro or Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7098: Your account is not authorized to use OIDC. Upgrade to an Enterprise
  plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7099: Your account is not authorized to use SAML. Upgrade to an Enterprise
  plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7100: Your account is not authorized to use TLS termination. Upgrade
  to a Pro or Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7101: Your account is not authorized to use IP Restrictions. Upgrade
  to an Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7102: Your account is not authorized to use TCP address backends. Upgrade
  to a Pro or Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7103: Your account is not authorized to use mutual TLS. Upgrade to an
  Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7104: Edge has invalid hostports, must be specified in the format ‘hostname:portnumber’:
  `<INVALID>`'
- 'ERR_NGROK_7105: The header beginning with `<PREFIX>`…’ exceeds the maximum header
  name length of `<BYTES>` bytes.'
- 'ERR_NGROK_7106: The header value for `<HEADERKEY>` beginning with `<PREFIX>`…’
  exceeds the maximum header value length of `<BYTES>` bytes.'
- 'ERR_NGROK_7107: The sendgrid verification key is not a base64 encoded ecdsa public
  key. The following error was encountered while trying to parse it: “`<ERROR>`”'
- 'ERR_NGROK_7108: Your account is not authorized to use the websocket to TCP converter.
  Upgrade to a Pro or Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7109: You may not configure the TLS termination parameter ‘terminate_at’
  for an HTTPS edge.'
- 'ERR_NGROK_7110: The request edge ID `<EID>` does not match the route edge ID `<REID>`.'
- 'ERR_NGROK_7111: The edge hostport `<HOST>`:`<PORT>` does not exist.'
- 'ERR_NGROK_7112: The hostport `<HOSTPORT>` has port out of range: `<PORT>` is not
  in range 1-65535.'
- 'ERR_NGROK_7113: The address `<HOSTPORT>` is not reserved.'
- 'ERR_NGROK_7114: The address `<HOSTPORT>` is not reserved by your account.'
- 'ERR_NGROK_7115: The address `<HOSTPORT>` has an endpoint configuration which must
  be removed before it can be used by an edge.'
- 'ERR_NGROK_7116: The domain `<HOSTPORT>` is unsupported because it does not use
  port 443.'
- 'ERR_NGROK_7117: The domain `<HOSTPORT>` is not reserved.'
- 'ERR_NGROK_7118: The domain `<HOSTPORT>` is not reserved by your account.'
- 'ERR_NGROK_7119: The domain `<HOSTPORT>` has an endpoint configuration which must
  be removed before it can be used by an edge.'
- 'ERR_NGROK_7120: TCP edges can only be associated with TCP addresses: `<HOSTPORT>`
  is a domain.'
- 'ERR_NGROK_7121: HTTPS edges can only be associated with reserved domains: `<HOSTPORT>`
  is a TCP address.'
- 'ERR_NGROK_7122: Hostport `<HOSTPORT>` already exists for another edge.'
- 'ERR_NGROK_7123: Edge routes require a match expression.'
- 'ERR_NGROK_7124: The edge route `<ID>` could not be found.'
- 'ERR_NGROK_7125: There is a duplicate route `<ID>` for HTTPS edge.'
- 'ERR_NGROK_7126: Route match expression `<MATCH>` must be unique across all routes
  for HTTPS edge.'
- 'ERR_NGROK_7127: OAuth may not currently be configured for any route except ’/’,
  could not configure for route `<MATCH>`.'
- 'ERR_NGROK_7128: Your account is limited to a maximum of `<MAX>` routes for a single
  edge.'
- 'ERR_NGROK_7129: Your account is limited to a maximum of `<MAX>` hostports for a
  single edge.'
- 'ERR_NGROK_7130: Invalid match type, valid values are “exact_path” and “path_prefix”.'
- 'ERR_NGROK_7131: The route selector expression `<MATCH>` is invalid. Valid route
  selector match expressions are of the form /path (e.g. “/foo”, or “/foo/bar”).'
- 'ERR_NGROK_7132: The hostport `<HOSTPORT>` is already in use by an agent directly.'
- 'ERR_NGROK_7133: TLS edges can only be associated with reserved domains: `<HOSTPORT>`
  is a TCP address.'
- 'ERR_NGROK_7134: OAuth, OIDC and SAML may only be configured for routes with path
  selectors (i.e. ‘exact_path’, ‘path_prefix’).'
- 'ERR_NGROK_7135: The route selector expression exceeds the maximum length of `<MAX>`,
  got `<SIZE>`.'
- 'ERR_NGROK_7136: The OAuth Cookie Prefix exceeds the maximum length of `<MAX>`,
  got `<SIZE>`.'
- 'ERR_NGROK_7137: The OAuth Client ID exceeds the maximum length of `<MAX>`, got
  `<SIZE>`.'
- 'ERR_NGROK_7138: The OAuth Client Secret exceeds the maximum length of `<MAX>`,
  got `<SIZE>`.'
- 'ERR_NGROK_7139: The OAuth Email Address exceeds the maximum length of `<MAX>`,
  got `<SIZE>`.'
- 'ERR_NGROK_7140: The OAuth Email Domain exceeds the maximum length of `<MAX>`, got
  `<SIZE>`.'
- 'ERR_NGROK_7141: The OAuth Scope exceeds the maximum length of `<MAX>`, got `<SIZE>`.'
- 'ERR_NGROK_7142: The edge module exceeds the maximum number of GitHub teams. You
  specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_7143: The edge module exceeds the maximum number of GitHub orgs. You
  specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_7144: The OAuth GitHub team exceeds the maximum length of `<MAX>`, got
  `<SIZE>`.'
- 'ERR_NGROK_7145: The OAuth GitHub org exceeds the maximum length of `<MAX>`, got
  `<SIZE>`.'
- 'ERR_NGROK_7146: The edge module exceeds the maximum number of Google groups. You
  specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_7147: The OAuth Google group exceeds the maximum length of `<MAX>`, got
  `<SIZE>`.'
- 'ERR_NGROK_7148: The OIDC Client ID exceeds the maximum length of `<MAX>`, got `<SIZE>`.'
- 'ERR_NGROK_7149: The OIDC Client Secret exceeds the maximum length of `<MAX>`, got
  `<SIZE>`.'
- 'ERR_NGROK_7150: The edge module exceeds the maximum number of OIDC scopes. You
  specified `<COUNT>`, the max is `<MAX>`.'
- 'ERR_NGROK_7151: The OIDC Scope exceeds the maximum length of `<MAX>`, got `<SIZE>`.'
- 'ERR_NGROK_7152: The OIDC Authn URL exceeds the maximum length of `<MAX>`, got `<SIZE>`.'
- 'ERR_NGROK_7153: The OIDC cookie prefix exceeds the maximum length of `<MAX>`, got
  `<SIZE>`.'
- 'ERR_NGROK_7154: The Webhook Verification secret exceeds the maximum length of `<MAX>`,
  got `<SIZE>`.'
- 'ERR_NGROK_7155: Enabling OAuth, OIDC, or SAML on more than one route is not supported.'
- 'ERR_NGROK_7158: Invalid edge module, OAuth auth check interval must be no greater
  than `<MAX>`, was `<ACTUAL>`.'
- 'ERR_NGROK_7159: Invalid edge module, OIDC auth check interval must be at least
  `<MIN>`, was `<ACTUAL>`.'
- 'ERR_NGROK_7160: Invalid edge module, OIDC auth check interval must be no greater
  than `<MAX>`, was `<ACTUAL>`.'
- 'ERR_NGROK_7161: Invalid edge module, OAuth max session duration must be no greater
  than `<MAX>`, was `<ACTUAL>`.'
- 'ERR_NGROK_7162: Invalid edge module, OIDC max session duration must be no greater
  than `<MAX>`, was `<ACTUAL>`.'
- 'ERR_NGROK_7163: Your account is not authorized to use the TLS edges. Upgrade to
  a Pro or Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7164: The `<ID>` header cannot be removed without specifying a replacement.'
- 'ERR_NGROK_7165: An unsupported OAuth Provider was configured.'
- 'ERR_NGROK_7166: The “`<PROVIDER>`” OAuth Provider does not currently have a managed
  app available, specify a client id and client secret.'
- 'ERR_NGROK_7167: Your account is not authorized to use user agent filter. Upgrade
  to a Pro or Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7168: Your account is not authorized to use JWT Validation. Upgrade to
  a Pay-as-you-go or Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_7169: The `<TYPE>` token type is invalid. Valid values are ‘jwt’, ‘at+jwt’,
  and ‘it+jwt’.'
- 'ERR_NGROK_7170: The `<METHOD>` token method is invalid. Valid values are ‘header’
  and ‘body’.'
- 'ERR_NGROK_7171: The JWT Validation configuration is invalid: `<DETAIL>`.'
- 'ERR_NGROK_7172: The JWT Validation configuration must have at least one issuer
  in the allow list.'
- 'ERR_NGROK_7173: The JWT Validation issuer is invalid: `<ISSUER>` is not a valid
  URL.'
- 'ERR_NGROK_7174: The JWT Validation configuration must have at least one audience
  in the allow list.'
- 'ERR_NGROK_7175: The JWT Validation audience is invalid: `<MSG>`.'
- 'ERR_NGROK_7176: The JWT Validation configuration must have at least one allowed
  algorithm.'
- 'ERR_NGROK_7177: The `<TYPE>` algorithm is invalid. Please consult the documentation
  for valid algorithms.'
- 'ERR_NGROK_7178: The JWT Validation configuration must have at least one token configuration.'
- 'ERR_NGROK_7179: The JWT Validation http token is invalid: `<MSG>`.'
- 'ERR_NGROK_7180: The JWT Validation http token name `<NAME>` is invalid.'
- 'ERR_NGROK_7181: The JWT Validation http token prefix `<PREFIX>` is invalid.'
- 'ERR_NGROK_7182: The JWT Validation signing key must have a way to be identified
  such as the ‘kid’ token claim.'
- 'ERR_NGROK_7183: The JWT Validation signing key must have a valid identification
  mechanism such as the ‘kid’ token claim.'
- 'ERR_NGROK_7184: The JWT Validation signing key must have at least one source.'
- 'ERR_NGROK_7185: The JWT Validation signing key source has an invalid additional
  jku: `<JKU>` is not a valid URL.'
- 'ERR_NGROK_7186: The JWT Validation signing key source has an invalid additional
  jku: `<JKU>` did not serve a JWKS.'
- 'ERR_NGROK_7187: The JWT Validation issuer `<ISSUER>` must be unique. Make sure
  to include it only once in the allow list.'
- 'ERR_NGROK_7188: The JWT Validation audience `<AUDIENCE>` must be unique. Make sure
  to include it only once in the allow list.'
- 'ERR_NGROK_7189: The JWT Validation http token identified by the method: `<METHOD>`
  and name: `<NAME>` must be unique. Make sure to include it only once in the token
  list.'
- 'ERR_NGROK_7190: The JWT Validation signing key algorithm `<ALGORITHM>` must be
  unique. Make sure to include it only once in the allowed algorithms list.'
- 'ERR_NGROK_7191: The JWT Validation signing key identification token claim `<CLAIM>`
  must be unique. Make sure to include it only once in the token claim list.'
- 'ERR_NGROK_7192: The JWT Validation signing key source additional jku `<JKU>` must
  be unique. Make sure to include it only once in the additional jku list.'
- 'ERR_NGROK_7193: The JWT Validation signing key sources have too many possible sources.
  You can supply at most 100.'
- 'ERR_NGROK_7194: Your account is not authorized to use policies.'
- 'ERR_NGROK_7195: This edge module has exceeded its policy rule limit of `<LIMIT>`.
  Please log into <https://dashboard.ngrok.com> to view your options.'
- 'ERR_NGROK_7196: Your account has read-only access to Edges. Edges are deprecated,
  and write access (including creating, updating, or deleting) is no longer supported
  for your account. For guidance on alternatives, see our migration guide: [https://ngrok.com/docs/universal-gateway/edges](/docs/universal-gateway/edges)/#migration-guide
  .If you believe you should still have write access to Edges, please contact [support@ngrok.com](mailto:support@ngrok.com)
  for help.'
- 'ERR_NGROK_8000: Failed to resolve host `<HOST>`: `<ERR>`'
- 'ERR_NGROK_8001: Failed to establish internet connectivity: `<ERR>`'
- 'ERR_NGROK_8002: Failed to establish TCP connection to `<HOST>` with error: `<ERR>`'
- 'ERR_NGROK_8003: Failed to establish TLS connection to `<HOST>` with error: `<ERR>`.
  Possible Man-in-the Middle.'
- 'ERR_NGROK_8004: Failed to establish tunnel protocol connection to `<HOST>` with
  error: `<ERR>`'
- 'ERR_NGROK_8005: Failed to resolve proxy IP with error: `<ERR>`'
- 'ERR_NGROK_8006: Failed to connect to proxy `<URL>` with error: `<ERR>`'
- 'ERR_NGROK_8007: No tunnel servers were reachable via TCP.'
- 'ERR_NGROK_8008: No tunnel servers could establish a TLS connection.'
- 'ERR_NGROK_8009: No tunnel servers could establish a tunnel connection.'
- 'ERR_NGROK_8010: `<RESOLVER>` was the only resolver to return `<IP>` for the hostname
  `<HOSTNAME>`. This, or the other resolvers, may be returning incorrect results.'
- 'ERR_NGROK_8011: IPV6 errors encountered - it may be disabled.'
- 'ERR_NGROK_8012: Traffic was successfully tunneled to the ngrok agent, but the agent
  failed to establish a connection to the upstream web service at `<ADDR>`.'
- 'ERR_NGROK_8013: You must add a credit or debit card before you can use TCP endpoints
  on a free account. We require a valid card as a way to combat abuse and keep the
  internet a safe place. This card will NOT be charged. Add a card to your account
  here: <https://dashboard.ngrok.com/settings>#id-verification'
- 'ERR_NGROK_8014: Your agent has been blocked from connecting to ngrok because it
  has been suspected of violating our Acceptable Use policy: <https://ngrok.com/tos>
  Your actions have been reported to our security team.'
- 'ERR_NGROK_9000: An account is required to use basic authentication. Please register
  for an ngrok account at: <https://dashboard.ngrok.com/signup> and install your authtoken.'
- 'ERR_NGROK_9001: Your account is not authorized to use compression.'
- 'ERR_NGROK_9002: Your account is not authorized to use circuit breaker.'
- 'ERR_NGROK_9003: Your account is not authorized to use request headers. Upgrade
  to a Pro or Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_9004: Your account is not authorized to use response headers. Upgrade
  to a Pro or Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_9005: Your account is not authorized to use OIDC. Upgrade to a Pro or
  Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_9006: Your account is not authorized to use SAML. Upgrade to a Pro or
  Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_9007: Your account is not authorized to use TLS Termination. Upgrade
  to a paid plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_9008: Your account is not authorized to run the agent as a service. Upgrade
  to a Pro or Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_9009: Running the agent with an http/s proxy is an enterprise feature.
  If this is unexpected, verify that there is no proxy_url value in your ngrok configuration
  file and that the http_proxy environment variable is not set. If you need this capability,
  upgrade to an Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_9010: Your account is not authorized to run the agent with socks5 proxy.
  Upgrade to an Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_9011: Your account is not authorized to run the agent on a custom network
  interface. Upgrade to an Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_9012: Your account is not authorized to run the agent with custom CAs.
  Upgrade to a Pro, Enterprise, or Pay-as-you-go plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_9013: Your account is not authorized to run the agent with mutual TLS.
  Please contact us at: [sales@ngrok.com](mailto:sales@ngrok.com)'
- 'ERR_NGROK_9014: Your account is not authorized to run the agent with proxy proto.
  Upgrade to an Enterprise plan at: <https://dashboard.ngrok.com/billing/subscription>'
- 'ERR_NGROK_9015: Your account is not authorized to use OAuth.'
- 'ERR_NGROK_9016: Your account is not authorized to use webhook verification.'
- 'ERR_NGROK_9017: Your account is not authorized to use ip restrictions. Upgrade
  to a Pro, Enterprise, or Pay-as-you-go plan at: https://dashboard.ngrok.com/billing/subscription'
- 'ERR_NGROK_9018: An account is required to use host header rewrite. Please register
  for an ngrok account at: https://dashboard.ngrok.com/signup and install your authtoken.'
- 'ERR_NGROK_9019: Your account is not authorized to use mutual TLS. Please contact
  us at: sales@ngrok.com'
- 'ERR_NGROK_9020: Your account is not authorized to use the websocket to TCP converter.
  Upgrade to a Personal, Pro, Enterprise, or Pay-as-you-go plan at: https://dashboard.ngrok.com/billing/subscription'
- 'ERR_NGROK_9021: You may specify at most one of subdomain, hostname, or domain for
  a tunnel.'
- 'ERR_NGROK_9022: Your account is not authorized to use user agent filtering. Please
  upgrade to a Pro or Enterprise plan at: https://dashboard.ngrok.com/billing/subscription'
- 'ERR_NGROK_9023: Your account is not authorized to use the policy module.'
- 'ERR_NGROK_9024: The account <ACCOUNT> is not authorized to use the requested leg
  number <LEG>.'
- 'ERR_NGROK_9025: You cannot specify both “Policy” and “TrafficPolicy”. Use “TrafficPolicy”
  as “Policy” is deprecated.'
- 'ERR_NGROK_9026: The TrafficPolicy you provided is invalid: <ERROR>.'
- 'ERR_NGROK_9027: Your account is not authorized to use internal bindings.'
- 'ERR_NGROK_9028: You must specify a domain name for a internally bound endpoint.'
- 'ERR_NGROK_9029: Failed to start endpoint with <URL>. Endpoints with a “internal”
  binding must have a url that ends in “.internal”.'
- 'ERR_NGROK_9030: Failed to start endpoint with URL <URL>, invalid port. Port must
  be in range range 1-65535.'
- 'ERR_NGROK_9031: Failed to start endpoint with URL <URL>. Endpoints must have at
  most 5 parts, but had <DEPTH>.'
- 'ERR_NGROK_9032: Provided domain <DOMAIN> could not be parsed: <ERROR>.'
- 'ERR_NGROK_9033: Provided domain <DOMAIN> had a non-numeric port component.'
- 'ERR_NGROK_9034: Malformed URL: <ERRMSG>.'
- 'ERR_NGROK_9035: Invalid port for URL with scheme <CURRENTSCHEME>, allowed ports
  are <WANTPORT>.'
- 'ERR_NGROK_9036: Invalid scheme <UNSUPPORTEDSCHEME>, allowed schemes: <ALLOWEDSCHEMES>.'
- 'ERR_NGROK_9037: Invalid URL <URL>, <PARTNAME> <PART> is not allowed.'
- 'ERR_NGROK_9038: Invalid URL, trailing ’/’ is not allowed. Did you mean <URLWITHOUTPATH>?'
- 'ERR_NGROK_9039: You must specify a domain name for a kubernetes operator bound
  endpoint.'
- 'ERR_NGROK_9040: We do not allow agents to connect to ngrok from your IP address
  (<IP>).'
- 'ERR_NGROK_9041: Supported protocols for kubernetes-bound endpoints are http, tls,
  and tcp. You provided <PROTO>.'
- 'ERR_NGROK_9042: TLS endpoints cannot be created on this version of the ngrok agent
  due to a vulnerability. Upgrade your agent to version 3.24.0 or later'
- 'ERR_NGROK_9043: HTTP endpoints are restricted for HIPAA-compliant accounts. Use
  HTTPS instead!'
- 'ERR_NGROK_10000: Internal Server Error. Please check our status page https://status.ngrok.com/
  or contact support: support@ngrok.com'
- 'ERR_NGROK_10001: Something went wrong with our code. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_10002: Could not read server rendered application data. Please refresh
  the page and try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_10003: Something went wrong when communicating with Stripe. Please try
  again later. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_10004: Could not find the credit card form. Do you have a script blocker
  installed?'
- 'ERR_NGROK_10005: Could not find the Stripe token. Do you have a script blocker
  installed?'
- 'ERR_NGROK_10006: Failed to load the required reCAPTCHA script! Are you blocking
  it? It is required to continue.'
- 'ERR_NGROK_10007: All rules must be prefixed with “bind:“'
- 'ERR_NGROK_10008: If the “HTTPS” module is enabled and “Terminate TLS” is unchecked,
  then your configuration may not include any other modules except the IP Policy module.'
- 'ERR_NGROK_10009: The request header name must be at least one character.'
- 'ERR_NGROK_10010: The request header value must be at least one character.'
- 'ERR_NGROK_10011: You have already added the request header name “<NAME>”.'
- 'ERR_NGROK_10012: The response header name must be at least one character.'
- 'ERR_NGROK_10013: The response header value must be at least one character.'
- 'ERR_NGROK_10014: You have already added the response header name “<NAME>”.'
- 'ERR_NGROK_10019: You haven’t added any Event Destinations'
- 'ERR_NGROK_10020: You haven’t added any Event Sources'
- 'ERR_NGROK_10021: Received partition “<PARTITION>” that does not include the word
  “aws”.'
- 'ERR_NGROK_10022: Received service “<SERVICE>” but expected “<TARGETSERVICENAME>”.'
- 'ERR_NGROK_10023: There were no changes to submit.'
- 'ERR_NGROK_10024: Cannot update non-existent IP Policy.'
- 'ERR_NGROK_10025: A TLS Certificate must be selected.'
- 'ERR_NGROK_10026: Failed to upload Certificate Authority. Invalid file format “<FORMAT>”
  given. Upload a Certificate Authority in PEM format.'
- 'ERR_NGROK_10027: Failed to upload SAML IdP Metadata. Invalid file format “<FORMAT>”
  given. Upload SAML IdP Metadata in XML format.'
- 'ERR_NGROK_10028: Failed to upload TLS Certificate. Invalid file format “<FORMAT>”
  given. Upload a TLS Certificate in PEM format.'
- 'ERR_NGROK_10029: Failed to upload TLS Certificate Private Key. Invalid file format
  “<FORMAT>” given. Upload a TLS Certificate Private Key in PEM format.'
- 'ERR_NGROK_10030: Failed to upload Certificate Authority. Please limit your file
  uploads to less than 16 KB.'
- 'ERR_NGROK_10031: Failed to upload SAML IdP Metadata. Please limit your file uploads
  to less than 16 KB.'
- 'ERR_NGROK_10032: Failed to upload TLS Certificate. Please limit your file uploads
  to less than 16 KB.'
- 'ERR_NGROK_10033: Failed to upload TLS Certificate Private Key. Please limit your
  file uploads to less than 16 KB.'
- 'ERR_NGROK_10034: Could not copy the AuthToken to your clipboard. Please ensure
  that you have granted the browser permission “clipboard-write”.'
- 'ERR_NGROK_10062: ARN must begin with “arn:“'
- 'ERR_NGROK_10063: ARN is invalid'
- 'ERR_NGROK_10064: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_10065: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_10066: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_10067: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_10068: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_10069: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_10072: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_10073: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_10074: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_10075: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_10076: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_10077: This account does not support JIT provisioning for SSO users.'
- 'ERR_NGROK_10078: This account requires users to be authenticated with a valid SSO
  provider.'
- 'ERR_NGROK_10079: The team member queried is of an unknown type. If the problem
  persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_10080: The invitation <INVITE_ID> was not found'
- 'ERR_NGROK_10081: You must specify only the correct ID for the requested team member
  entry.'
- 'ERR_NGROK_10082: You must specify a user, bot, or membership ID when attempting
  to update a credentials owner.'
- 'ERR_NGROK_10083: You already have a valid MFA configuration of this type enabled.'
- 'ERR_NGROK_10084: You cannot delete the SSO Identity Provider you used to logged
  when SSO Enforcement is enabled on your account.'
- 'ERR_NGROK_10085: The endpoint of the request you are trying to replay was not found.'
- 'ERR_NGROK_10086: You have exceeded the rate limit of <MAX> replay requests per
  <INTERVAL>.'
- 'ERR_NGROK_10087: Request header “<HEADER_NAME>” value too large.'
- 'ERR_NGROK_10088: Request body size too large.'
- 'ERR_NGROK_10089: Failed to replay the request.'
- 'ERR_NGROK_10090: The request you are trying to view was not found.'
- 'ERR_NGROK_10091: The usage page has timed out. Please refresh the page and try
  again.'
- 'ERR_NGROK_11000: Internal Server Error. Please refresh the page and try again.
  If the problem persists, please check our status page https://status.ngrok.com/
  or contact the frontend team.'
- 'ERR_NGROK_11001: Something went wrong with our code. Please refresh the page and
  try again. If the problem persists, please contact the frontend team.'
- 'ERR_NGROK_11002: Could not read server rendered application data. Please refresh
  the page and try again. If the problem persists, please contact the frontend team.'
- 'ERR_NGROK_11003: Something went wrong with our code. Please refresh the page and
  try again. If the problem persists, please contact the frontend team.'
- 'ERR_NGROK_11004: ARN must begin with “arn:“'
- 'ERR_NGROK_11005: ARN is invalid'
- 'ERR_NGROK_11006: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact the frontend team.'
- 'ERR_NGROK_12000: A new version of ngrok corp is required to continue. Please refresh
  the page to update.'
- 'ERR_NGROK_13001: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_13002: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_13003: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_13004: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_13005: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_13006: Encountered a type “never” value. Please refresh the page and
  try again. If the problem persists, please contact support: support@ngrok.com'
- 'ERR_NGROK_13007: Encountered a type “never” value. Please refresh the page and
  try again.'
- 'ERR_NGROK_9042: TLS endpoints cannot be created on this version of the ngrok agent
  due to a vulnerability. Upgrade your agent to version 3.24.0 or later.'
- 'ERR_NGROK_10007: All rules must be prefixed with “bind:”'
auth_info:
  mentioned_objects:
  - OAuthToken
  - OauthToken
  - AuthProvider
  - NamedCredential
  - NgrokAPI::Services::APIKeysClient
  - NgrokAPI::Services::CredentialsClient
  - APIKey
  - AWSAuth
  - AbuseReport
  - AgentIngress
  - ApplicationSession
  - Credential
  - Endpoint
  - EventDestination
  - EventSource
  - FailoverBackend
  - HTTPResponseBackend
  - IPPolicy
  - IdentityProvider
  - StaticBackend
  - Tunnel
  - AbuseReportsClient
  - ngrok.Client
  - EndpointIPPolicy
  - EndpointIPPolicyMutate
  - ReservedDomainsClient
  - EndpointOAuthFacebook
  - EndpointOAuthGitHub
  - EndpointOAuthGoogle
  - EndpointOAuthMicrosoft
  - EndpointOAuthProvider
  - EndpointOidc
  - EndpointRequestHeaders
  - EndpointResponseHeaders
  - EndpointSaml
  - EndpointTlsTermination
  - EndpointWebhookValidation
  - EndpointWebsocketTcpConverter
  - EventDestinationList
  - EndpointOAuth
  - ApiKey
  - ApiKeys
  - EndpointSamlMutate
  - EndpointOAuthGitHub.Builder
  - EndpointOAuthGoogle.Builder
  - EndpointOAuthMicrosoft.Builder
  - EndpointOidc.Builder
  - EndpointOAuthFacebook.Builder
  - NgrokApiClient
  - TunnelGroupBackend
  - TunnelSession
client:
  base_url: https://ngrok.com
  auth:
    type: oauth2
source_metadata: null
