resources:
- name: SAClient
  endpoint:
    path: /team
    method: GET
    data_selector: team_metadata
- name: annotations
  endpoint:
    path: /api/annotations
    method: GET
    data_selector: records
    params: {}
- name: annotations
  endpoint:
    path: /api/v1/annotations
    method: GET
    data_selector: annotations
    params:
      incremental: updated_at
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: annotations
  endpoint:
    path: /api/annotations
    method: GET
    data_selector: data
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: classes
  endpoint:
    path: /classes
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Items
  endpoint:
    path: /items
    method: POST
    data_selector: items
    params: {}
- name: Workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
    params: {}
- name: custom_component
  endpoint:
    path: /api/custom/component
    method: POST
    data_selector: data
- name: Text area
  endpoint:
    path: /text-area
    method: GET
    data_selector: parameters
    params: {}
- name: text_input
  endpoint:
    path: /docs/text-input
    method: GET
    data_selector: parameters
    params: {}
- name: number
  endpoint:
    path: /docs/number
    method: GET
    data_selector: parameters
    params: {}
- name: code
  endpoint:
    path: /docs/code
    method: GET
    data_selector: parameters
    params: {}
- name: paragraph
  endpoint:
    path: /docs/paragraph
    method: GET
    data_selector: parameters
    params: {}
- name: Checkbox
  endpoint:
    path: /docs/input-components/checkbox
    method: GET
    data_selector: parameters
    params: {}
- name: Radio
  endpoint:
    path: /docs/input-components/radio
    method: GET
    data_selector: parameters
    params: {}
- name: Voting
  endpoint:
    path: /docs/input-components/voting
    method: GET
    data_selector: parameters
    params: {}
- name: Rating
  endpoint:
    path: /docs/input-components/rating
    method: GET
    data_selector: parameters
    params: {}
- name: Date
  endpoint:
    path: /docs/input-components/date
    method: GET
    data_selector: parameters
    params: {}
- name: Time
  endpoint:
    path: /docs/input-components/time
    method: GET
    data_selector: parameters
    params: {}
- name: video
  endpoint:
    path: /video
    method: GET
    data_selector: video_data
- name: audio
  endpoint:
    path: /audio
    method: GET
    data_selector: audio_data
- name: avatar
  endpoint:
    path: /avatar
    method: GET
    data_selector: avatar_data
- name: csv
  endpoint:
    path: /csv
    method: GET
    data_selector: csv_data
- name: custom_component
  endpoint:
    path: /api/custom_component
    method: POST
    data_selector: data
    params: {}
- name: generate_items
  endpoint:
    path: /generate/items
    method: POST
    data_selector: items
    params: {}
- name: import_items
  endpoint:
    path: /import/items
    method: POST
    data_selector: items
    params: {}
- name: Text area
  endpoint:
    path: /text-area
    method: GET
    data_selector: parameters
- name: Text Input Parameters
  endpoint:
    path: /text-input/parameters
    method: GET
    data_selector: parameters
    params: {}
- name: download_items
  endpoint:
    path: /downloads
    method: GET
    data_selector: items
- name: run_model
  endpoint:
    path: /run_model
    method: POST
    data_selector: model_response
- name: find_items
  endpoint:
    path: /find_items
    method: GET
    data_selector: items
- name: sort_documents
  endpoint:
    path: /sort_documents
    method: GET
    data_selector: sorted_documents
- name: filter_items
  endpoint:
    path: /filter_items
    method: GET
    data_selector: filtered_items
- name: delete_items
  endpoint:
    path: /delete_items
    method: DELETE
    data_selector: deleted_items
- name: image
  endpoint:
    path: /media/image
    method: GET
    data_selector: records
    params: {}
- name: web
  endpoint:
    path: /media/web
    method: GET
    data_selector: records
    params: {}
- name: pdf
  endpoint:
    path: /media/pdf
    method: GET
    data_selector: records
    params: {}
- name: url
  endpoint:
    path: /media/url
    method: GET
    data_selector: records
    params: {}
- name: csv_component
  endpoint:
    path: /csv
    method: GET
    data_selector: parameters
    params: {}
- name: item_status
  endpoint:
    path: /docs/multimodal/item-status
    method: GET
    data_selector: statuses
    params: {}
- name: project_settings
  endpoint:
    path: /api/project/settings
    method: GET
    data_selector: settings
- name: annotations
  endpoint:
    path: /api/annotations
    method: POST
    data_selector: records
- name: item_status
  endpoint:
    path: /item/status
    method: GET
    data_selector: status
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: parameters
- name: project_settings
  endpoint:
    path: /project/settings
    method: GET
    data_selector: settings
    params: {}
- name: group
  endpoint:
    path: /group
    method: GET
    data_selector: components
- name: groupCount
  endpoint:
    path: /groupCount
    method: GET
    data_selector: counts
- name: sortBy
  endpoint:
    path: /sortBy
    method: GET
    data_selector: sortedItems
- name: measurement
  endpoint:
    path: /measurements
    method: GET
    data_selector: data
- name: breakdown
  endpoint:
    path: /breakdowns
    method: GET
    data_selector: data
- name: compare
  endpoint:
    path: /compare
    method: GET
    data_selector: data
- name: annotations
  endpoint:
    path: /api/annotations
    method: POST
    data_selector: data
- name: multimodal_items
  endpoint:
    path: /explore/items
    method: GET
    data_selector: items
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: parameters
- name: other_fields
  endpoint:
    path: /other_fields
    method: GET
    data_selector: fields
- name: images
  endpoint:
    path: /sdk-import-images
    method: GET
    data_selector: records
    params: {}
- name: videos
  endpoint:
    path: /sdk-import-videos
    method: GET
    data_selector: records
    params: {}
- name: documents
  endpoint:
    path: /sdk-import-documents
    method: GET
    data_selector: records
    params: {}
- name: annotations
  endpoint:
    path: /sdk-import-annotations
    method: GET
    data_selector: records
    params: {}
- name: audio
  endpoint:
    path: /sdk-import-audio
    method: GET
    data_selector: records
    params: {}
- name: tiled_imagery
  endpoint:
    path: /sdk-import-tiled-imagery
    method: GET
    data_selector: records
    params: {}
- name: point_cloud
  endpoint:
    path: /sdk-import-point-cloud
    method: GET
    data_selector: records
    params: {}
- name: component_fields
  endpoint:
    path: /component_fields
    method: GET
    data_selector: fields
    params: {}
- name: group_field
  endpoint:
    path: /group_field
    method: GET
    data_selector: fields
    params: {}
- name: groupCount
  endpoint:
    path: /groupCount
    method: GET
    data_selector: counts
    params: {}
- name: sort_by_query
  endpoint:
    path: /sort_by_query
    method: GET
    data_selector: sorts
    params: {}
- name: images
  endpoint:
    path: /api/images
    method: POST
    data_selector: data
    params: {}
- name: video_upload
  endpoint:
    path: /upload/videos
    method: POST
    data_selector: upload_response
    params: {}
- name: attach_video_urls
  endpoint:
    path: /attach/video/urls
    method: POST
    data_selector: attachment_response
    params: {}
- name: attach_audio_urls
  endpoint:
    path: /attach-audio-urls
    method: POST
    data_selector: attachments
    params: {}
- name: tiled_imagery
  endpoint:
    path: /tiled_imagery
    method: POST
    data_selector: attachments
    params:
      annotation_status: QualityCheck
- name: images
  endpoint:
    path: /api/images/upload
    method: POST
    data_selector: images
    params:
      annotation_status: QualityCheck
- name: download_image
  endpoint:
    path: /download_image
    method: GET
    data_selector: image_data
    params: {}
- name: download_image_with_annotations
  endpoint:
    path: /download_image_with_annotations
    method: GET
    data_selector: image_data_with_annotations
    params: {}
- name: upload_video
  endpoint:
    path: /upload_video
    method: POST
    data_selector: response
    params: {}
- name: attach_video_urls
  endpoint:
    path: /attach_video_urls
    method: POST
    data_selector: response
    params: {}
- name: exports
  endpoint:
    path: /exports
    method: GET
    data_selector: exports
    params: {}
- name: attach_audio_urls
  endpoint:
    path: /attach_audio_urls
    method: POST
    data_selector: attachments
    params: {}
- name: teams
  endpoint:
    path: /teams
    method: GET
    data_selector: teams
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: folders
  endpoint:
    path: /folders
    method: GET
    data_selector: folders
    params: {}
- name: classes
  endpoint:
    path: /classes
    method: GET
    data_selector: classes
    params: {}
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: items
    params: {}
- name: annotations
  endpoint:
    path: /annotations
    method: GET
    data_selector: annotations
    params: {}
- name: tiled_imagery
  endpoint:
    path: /tiled_imagery
    method: POST
    data_selector: attachments
    params:
      annotation_status: QualityCheck
- name: attach_point_cloud_urls
  endpoint:
    path: /attach_items
    method: POST
    data_selector: attachments
    params:
      project: Project Name
      annotation_status: QualityCheck
- name: team_metadata
  endpoint:
    path: /get_team_metadata
    method: GET
    data_selector: users
    params: {}
- name: images
  endpoint:
    path: /sdk/export/images
    method: GET
- name: annotations
  endpoint:
    path: /sdk/export/annotations
    method: GET
- name: projects
  endpoint:
    path: /sdk/export/projects
    method: GET
- name: create_project
  endpoint:
    path: /create_project
    method: POST
    data_selector: project
    params: {}
- name: rename_project
  endpoint:
    path: /rename_project
    method: POST
    data_selector: project
    params: {}
- name: set_project_status
  endpoint:
    path: /set_project_status
    method: POST
    data_selector: status
    params: {}
- name: delete_project
  endpoint:
    path: /delete_project
    method: DELETE
    data_selector: project
    params: {}
- name: clone_project
  endpoint:
    path: /clone_project
    method: POST
    data_selector: clone
    params: {}
- name: share_project
  endpoint:
    path: /add_contributors_to_project
    method: POST
    data_selector: contributors
    params: {}
- name: search_projects
  endpoint:
    path: /search_projects
    method: GET
    data_selector: projects
    params: {}
- name: get_subsets
  endpoint:
    path: /get_subsets
    method: GET
    data_selector: subsets
    params: {}
- name: get_project_settings
  endpoint:
    path: /get_project_settings
    method: GET
    data_selector: settings
    params: {}
- name: exports
  endpoint:
    path: /get_exports
    method: GET
    data_selector: exports
    params: {}
- name: prepare_export
  endpoint:
    path: /prepare_export
    method: POST
    data_selector: export
    params: {}
- name: download_export
  endpoint:
    path: /download_export
    method: POST
    data_selector: download
    params: {}
- name: get_project_steps
  endpoint:
    path: /api_project/get_project_steps
    method: GET
- name: set_project_steps
  endpoint:
    path: /api_project/set_project_steps
    method: POST
- name: create_folder
  endpoint:
    path: /create_folder
    method: POST
    data_selector: response
    params: {}
- name: search_folders
  endpoint:
    path: /search_folders
    method: GET
    data_selector: response
    params:
      status: InProgress
- name: set_folder_status
  endpoint:
    path: /set_folder_status
    method: POST
    data_selector: response
    params: {}
- name: delete_folders
  endpoint:
    path: /delete_folders
    method: DELETE
    data_selector: response
    params: {}
- name: tag
  endpoint:
    path: /create/tag
    method: POST
    data_selector: meta
    params: {}
- name: items
  endpoint:
    path: /search_items
    method: GET
    data_selector: metadata
    params:
      project: Project 1
- name: item_metadata
  endpoint:
    path: /get_item_metadata
    method: GET
    data_selector: metadata
    params:
      project: Project 1
      item_name: Image1.png
- name: annotations
  endpoint:
    path: /get_annotations
    method: GET
- name: delete_item_annotations
  endpoint:
    path: /delete_annotations
    method: DELETE
- name: integrations
  endpoint:
    path: /get_integrations
    method: GET
    data_selector: '[]'
    params: {}
- name: attach_items
  endpoint:
    path: /attach_items_from_integrated_storage
    method: POST
    data_selector: ''
    params: {}
- name: upload_priority_values
  endpoint:
    path: /upload/priority/values
    method: POST
    data_selector: scores
- name: team_metadata
  endpoint:
    path: /get_team_metadata
    method: GET
    data_selector: users
    params: {}
- name: custom_values_upload
  endpoint:
    path: /upload_custom_values
    method: POST
    data_selector: succeeded
    params:
      project: Medical Annotations
- name: custom_values_delete
  endpoint:
    path: /delete_custom_values
    method: POST
    data_selector: success
    params:
      project: Medical Annotations
- name: custom_values_get
  endpoint:
    path: /get_item_metadata
    method: GET
    data_selector: custom_metadata
    params:
      project: Medical Annotations
      include_custom_metadata: 'True'
- name: create_project
  endpoint:
    path: /create_project
    method: POST
    data_selector: project
- name: rename_project
  endpoint:
    path: /rename_project
    method: POST
    data_selector: project
- name: set_project_status
  endpoint:
    path: /set_project_status
    method: POST
    data_selector: status
- name: delete_project
  endpoint:
    path: /delete_project
    method: DELETE
    data_selector: project
- name: clone_project
  endpoint:
    path: /clone_project
    method: POST
    data_selector: clone
- name: share_project
  endpoint:
    path: /share_project
    method: POST
    data_selector: contributors
- name: search_projects
  endpoint:
    path: /search_projects
    method: GET
    data_selector: projects
- name: get_subsets
  endpoint:
    path: /get_subsets
    method: GET
    data_selector: subsets
- name: get_project_settings
  endpoint:
    path: /get_project_settings
    method: GET
    data_selector: settings
- name: get_project_steps
  endpoint:
    path: /api/project/steps
    method: GET
    data_selector: steps
    params: {}
- name: set_project_steps
  endpoint:
    path: /api/project/steps
    method: POST
    data_selector: steps
    params: {}
- name: instances
  endpoint:
    path: /instances
    method: GET
    data_selector: instances
    params: {}
- name: create_folder
  endpoint:
    path: /create_folder
    method: POST
    data_selector: result
    params: {}
- name: search_folders
  endpoint:
    path: /search_folders
    method: GET
    data_selector: results
    params:
      status: InProgress
- name: set_folder_status
  endpoint:
    path: /set_folder_status
    method: POST
    data_selector: result
    params: {}
- name: delete_folders
  endpoint:
    path: /delete_folders
    method: DELETE
    data_selector: result
    params: {}
- name: annotations
  endpoint:
    path: /import/annotations
    method: POST
    data_selector: annotations
    params: {}
- name: tag
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
    params: {}
- name: polygon
  endpoint:
    path: /polygons
    method: GET
    data_selector: polygons
    params: {}
- name: bounding_box
  endpoint:
    path: /bounding_boxes
    method: GET
    data_selector: bounding_boxes
    params: {}
- name: point
  endpoint:
    path: /points
    method: GET
    data_selector: points
    params: {}
- name: ellipse
  endpoint:
    path: /ellipses
    method: GET
    data_selector: ellipses
    params: {}
- name: cuboid
  endpoint:
    path: /cuboids
    method: GET
    data_selector: cuboids
    params: {}
- name: video_annotations
  endpoint:
    path: /import/video_annotations
    method: POST
    data_selector: metadata
    params: {}
- name: attach_items
  endpoint:
    path: /attach_items
    method: POST
    data_selector: attachments
    params: {}
- name: move_items
  endpoint:
    path: /move_items
    method: POST
    data_selector: items
    params: {}
- name: copy_items
  endpoint:
    path: /copy_items
    method: POST
    data_selector: items
    params: {}
- name: set_annotation_statuses
  endpoint:
    path: /set_annotation_statuses
    method: POST
    data_selector: statuses
    params: {}
- name: set_approval_statuses
  endpoint:
    path: /set_approval_statuses
    method: POST
    data_selector: approval_status
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: metadata
    params: {}
- name: bounding_box
  endpoint:
    path: /bounding_box
    method: GET
    data_selector: meta
    params: {}
- name: polygon
  endpoint:
    path: /polygon
    method: GET
    data_selector: meta
    params: {}
- name: polyline
  endpoint:
    path: /polyline
    method: GET
    data_selector: meta
    params: {}
- name: point
  endpoint:
    path: /point
    method: GET
    data_selector: meta
    params: {}
- name: items
  endpoint:
    path: /search_items
    method: POST
    data_selector: metadata_objects
    params: {}
- name: item_metadata
  endpoint:
    path: /get_item_metadata
    method: GET
    data_selector: metadata
    params: {}
- name: event
  endpoint:
    path: /events
    method: GET
    data_selector: meta
    params: {}
- name: tag
  endpoint:
    path: /tags
    method: GET
    data_selector: meta
    params: {}
- name: comment
  endpoint:
    path: /comments
    method: GET
    data_selector: meta
    params: {}
- name: get_annotations
  endpoint:
    path: /get_annotations
    method: GET
    data_selector: annotations
    params: {}
- name: delete_annotations
  endpoint:
    path: /delete_annotations
    method: DELETE
    data_selector: status
    params: {}
- name: audio_annotation
  endpoint:
    path: /import/audio_annotations
    method: POST
    data_selector: metadata
    params: {}
- name: integrations
  endpoint:
    path: /get_integrations
    method: GET
    data_selector: integrations
    params: {}
- name: attach_items
  endpoint:
    path: /attach_items_from_integrated_storage
    method: POST
    data_selector: response
    params: {}
- name: upload_priority_values
  endpoint:
    path: /upload/priority/values
    method: POST
    data_selector: scores
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: instances
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: meta
- name: annotations
  endpoint:
    path: /annotations
    method: POST
    data_selector: instances
    params: {}
- name: relationship
  endpoint:
    path: /relationships
    method: GET
    data_selector: relationships
- name: custom_fields
  endpoint:
    path: /custom/fields
    method: GET
    data_selector: fields
- name: create_custom_fields
  endpoint:
    path: /custom/fields/create
    method: POST
    data_selector: response
- name: delete_custom_fields
  endpoint:
    path: /custom/fields/delete
    method: DELETE
    data_selector: response
- name: export_annotations
  endpoint:
    path: /export/annotations
    method: GET
- name: annotations
  endpoint:
    path: /export/annotations
    method: GET
    data_selector: annotations
    params: {}
- name: upload_custom_values
  endpoint:
    path: /upload_custom_values
    method: POST
    data_selector: succeeded
    params:
      project: Medical Annotations
- name: delete_custom_values
  endpoint:
    path: /delete_custom_values
    method: POST
    data_selector: removed
    params:
      project: Medical Annotations
- name: get_item_metadata
  endpoint:
    path: /get_item_metadata
    method: GET
    data_selector: custom_metadata
    params:
      project: Medical Annotations
      include_custom_metadata: true
- name: instances
  endpoint:
    path: /instances
    method: GET
    data_selector: instances
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: metadata
    params: {}
- name: instances
  endpoint:
    path: /instances
    method: GET
    data_selector: instances
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
    params: {}
- name: annotations
  endpoint:
    path: /import/annotations
    method: POST
    data_selector: instances
    params: {}
- name: instances
  endpoint:
    path: /instances
    method: GET
    data_selector: instances
- name: polygon
  endpoint:
    path: /instances/polygon
    method: GET
    data_selector: points
    params: {}
- name: polyline
  endpoint:
    path: /instances/polyline
    method: GET
    data_selector: points
    params: {}
- name: bbox
  endpoint:
    path: /instances/bbox
    method: GET
    data_selector: points
    params: {}
- name: point
  endpoint:
    path: /instances/point
    method: GET
    data_selector: points
    params: {}
- name: ellipse
  endpoint:
    path: /instances/ellipse
    method: GET
    data_selector: points
    params: {}
- name: cuboid
  endpoint:
    path: /instances/cuboid
    method: GET
    data_selector: instances
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: metadata
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
    params: {}
- name: instances
  endpoint:
    path: /instances
    method: GET
    data_selector: instances
    params: {}
- name: annotations_timeline
  endpoint:
    path: /export/annotations/timeline
    method: GET
    data_selector: metadata
    params: {}
- name: annotations_frame
  endpoint:
    path: /export/annotations/frame
    method: GET
    data_selector: instances
    params: {}
- name: tag
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
- name: polygon
  endpoint:
    path: /polygons
    method: GET
    data_selector: polygons
- name: bbox
  endpoint:
    path: /bounding_boxes
    method: GET
    data_selector: bounding_boxes
- name: point
  endpoint:
    path: /points
    method: GET
    data_selector: points
- name: ellipse
  endpoint:
    path: /ellipses
    method: GET
    data_selector: ellipses
- name: cuboid
  endpoint:
    path: /cuboids
    method: GET
    data_selector: cuboids
- name: video_annotation
  endpoint:
    path: /import/video_annotation
    method: POST
    data_selector: metadata
    params: {}
- name: bounding_box
  endpoint:
    path: /bounding_boxes
    method: GET
    data_selector: meta
    params: {}
- name: polygon
  endpoint:
    path: /polygons
    method: GET
    data_selector: meta
    params: {}
- name: polyline
  endpoint:
    path: /polylines
    method: GET
    data_selector: meta
    params: {}
- name: point
  endpoint:
    path: /points
    method: GET
    data_selector: meta
    params: {}
- name: events_timeline
  endpoint:
    path: /events/timeline
    method: GET
    data_selector: events
    params: {}
- name: events_frame
  endpoint:
    path: /events/frame
    method: GET
    data_selector: events
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
    params: {}
- name: bounding_box
  endpoint:
    path: /bounding_box
    method: GET
    data_selector: meta
    params:
      start: 0
      end: 23332991
- name: polygon
  endpoint:
    path: /polygon
    method: GET
    data_selector: meta
    params:
      start: 0
      end: 8466792
- name: polyline
  endpoint:
    path: /polyline
    method: GET
    data_selector: meta
    params:
      start: 1569598
      end: 3110554
- name: point
  endpoint:
    path: /point
    method: GET
    data_selector: meta
    params:
      start: 0
      end: 4250000
- name: audio_annotations
  endpoint:
    path: /audio_annotations
    method: GET
    data_selector: instances
- name: events
  endpoint:
    path: /instances
    method: GET
    data_selector: instances
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: meta
    params: {}
- name: event
  endpoint:
    path: /event
    method: GET
    data_selector: meta
    params: {}
- name: tag
  endpoint:
    path: /tag
    method: GET
    data_selector: meta
    params: {}
- name: comment
  endpoint:
    path: /comment
    method: GET
    data_selector: meta
    params: {}
- name: annotations
  endpoint:
    path: /export/annotations
    method: GET
    data_selector: metadata
    params: {}
- name: metadata
  endpoint:
    data_selector: metadata
- name: instances
  endpoint:
    data_selector: instances
- name: tags
  endpoint:
    data_selector: tags
- name: relationship
  endpoint:
    path: /relationships
    method: GET
    data_selector: relationships
- name: entity
  endpoint:
    path: /entities
    method: GET
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: instances
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: meta
    params: {}
- name: annotations
  endpoint:
    path: /annotations
    method: POST
    data_selector: ''
    params: {}
- name: import_annotation
  endpoint:
    path: /import/annotation
    method: POST
    data_selector: data
    params:
      input_dir: ./coco
      output_dir: ./sa_vector
      dataset_format: COCO
      dataset_name: instances_train2017
      project_type: Vector
      task: instance_segmentation
- name: export_annotation
  endpoint:
    path: /export/annotation
    method: POST
    data_selector: data
    params:
      input_dir: ./exports/sa_vector
      output_dir: ./coco_panoptic
      dataset_format: COCO
      dataset_name: panoptic_train2017
      project_type: Pixel
      task: panoptic_segmentation
- name: relationships
  endpoint:
    path: /relationships
    method: GET
    data_selector: relationships
- name: annotations
  endpoint:
    path: /export/annotations
    method: GET
    data_selector: annotations
    params: {}
- name: upload_images
  endpoint:
    path: /upload/images
    method: POST
    data_selector: data
    params: {}
- name: upload_videos
  endpoint:
    path: /upload/videos
    method: POST
    data_selector: data
    params: {}
- name: annotations
  endpoint:
    path: /export/annotations
    method: GET
    data_selector: metadata
    params: {}
- name: integration
  endpoint:
    path: /docs/integration
    method: GET
    data_selector: integrations
    params: {}
- name: instances
  endpoint:
    path: /instances
    method: GET
    data_selector: instances
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: metadata
    params: {}
- name: instances
  endpoint:
    path: /instances
    method: GET
    data_selector: instances
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
    params: {}
- name: GCP Bucket
  endpoint:
    path: /gcp/bucket
    method: GET
    data_selector: bucket_info
- name: polygon
  endpoint:
    path: /api/polygon
    method: GET
    data_selector: points
    params: {}
- name: polyline
  endpoint:
    path: /api/polyline
    method: GET
    data_selector: points
    params: {}
- name: bbox
  endpoint:
    path: /api/bbox
    method: GET
    data_selector: points
    params: {}
- name: point
  endpoint:
    path: /api/point
    method: GET
    data_selector: points
    params: {}
- name: ellipse
  endpoint:
    path: /api/ellipse
    method: GET
    data_selector: points
    params: {}
- name: cuboid
  endpoint:
    path: /cuboid
    method: GET
    data_selector: id
- name: annotations_timeline
  endpoint:
    path: /export/annotations/timeline
    method: GET
    data_selector: metadata
    params: {}
- name: annotations_frame
  endpoint:
    path: /export/annotations/frame
    method: GET
    data_selector: annotations
    params: {}
- name: bounding_box
  endpoint:
    path: /bounding_boxes
    method: GET
    data_selector: meta
    params: {}
- name: polygon
  endpoint:
    path: /polygons
    method: GET
    data_selector: meta
    params: {}
- name: polyline
  endpoint:
    path: /polylines
    method: GET
    data_selector: meta
    params: {}
- name: point
  endpoint:
    path: /points
    method: GET
    data_selector: meta
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: records
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: records
    params: {}
- name: attachments
  endpoint:
    path: /api_reference/api_item.html#superannotate.SAClient.attach_items
    method: POST
    data_selector: attachments
    params: {}
- name: audio_annotation
  endpoint:
    path: /audio_annotations
    method: GET
    data_selector: metadata
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: instances
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: meta
- name: annotations
  endpoint:
    path: /annotations
    method: GET
    data_selector: instances
- name: relationships
  endpoint:
    path: /relationships
    method: GET
    data_selector: relationships
- name: annotation
  endpoint:
    path: /import_annotation
    method: POST
    data_selector: records
- name: export_annotation
  endpoint:
    path: /export_annotation
    method: POST
    data_selector: records
- name: Amazon S3 bucket
  endpoint:
    path: /permissions/cors
    method: PUT
    data_selector: corsConfiguration
    params: {}
- name: GCP storage
  endpoint:
    path: /cors
    method: PUT
    data_selector: corsConfiguration
    params: {}
- name: Azure blob storage
  endpoint:
    path: /settings/resource-sharing/cors
    method: PUT
    data_selector: corsConfiguration
    params: {}
- name: organizations
  endpoint:
    path: /manage/organizations
    method: GET
- name: aws_role
  endpoint:
    path: /roles
    method: POST
    data_selector: role
    params:
      Account ID: <SuperAnnotate_AWS_Account_ID>
      External ID: <external_ID>
- name: GCP bucket
  endpoint:
    path: /GCP/bucket
    method: POST
    data_selector: bucket_name
    params: {}
- name: Annotation location
  endpoint:
    path: /GCP/annotation_location
    method: POST
    data_selector: annotation_location
    params: {}
- name: statuses
  endpoint:
    path: /statuses
    method: POST
    data_selector: status
    params: {}
- name: role
  endpoint:
    path: /roles
    method: POST
    data_selector: role
    params: {}
- name: attach_items
  endpoint:
    path: /api_reference/api_item.html#superannotate.SAClient.attach_items
    method: POST
    data_selector: attachments
    params: {}
- name: invite_team_members
  endpoint:
    path: /invite/team/members
    method: POST
    data_selector: response
    params: {}
- name: SuperAnnotate IPs
  endpoint:
    path: /ip-whitelisting
    method: GET
    data_selector: ips
    params: {}
- name: SuperAnnotate URLs
  endpoint:
    path: /url-whitelisting
    method: GET
    data_selector: urls
    params: {}
- name: Add member
  endpoint:
    path: /docs/invite-team-members
    method: GET
    data_selector: members
    params: {}
- name: Remove member
  endpoint:
    path: /docs/manage-group
    method: GET
    data_selector: members
    params: {}
- name: Rename group
  endpoint:
    path: /docs/manage-group
    method: GET
    data_selector: group_name
    params: {}
- name: teams
  endpoint:
    path: /organizations/{organization_id}/teams
    method: GET
- name: integrations
  endpoint:
    path: /organizations/{organization_id}/integrations
    method: GET
- name: settings
  endpoint:
    path: /organizations/{organization_id}/settings
    method: GET
- name: permissions
  endpoint:
    path: /docs/team-permissions
    method: GET
    data_selector: permissions
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: project
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: roles
  endpoint:
    path: /roles
    method: POST
    data_selector: role
    params: {}
- name: Dog
  endpoint:
    path: /imported/classes
    method: GET
    data_selector: classes
- name: Cat
  endpoint:
    path: /exported/classes
    method: GET
    data_selector: classes
- name: group_data_scope
  endpoint:
    path: /define-group-data-scope
    method: GET
    data_selector: data
    params: {}
- name: members
  endpoint:
    path: /api/members
    method: GET
    data_selector: members
    params: {}
- name: custom_columns
  endpoint:
    path: /api/custom_columns
    method: GET
    data_selector: custom_columns
    params: {}
- name: project_settings
  endpoint:
    path: /settings/general
    method: GET
    data_selector: settings
    params: {}
- name: invite_team_members
  endpoint:
    path: /invite/team/members
    method: POST
    data_selector: response
    params: {}
- name: project_settings
  endpoint:
    path: /settings/project
    method: GET
    data_selector: settings
    params: {}
- name: project_settings
  endpoint:
    path: /api/v1.0/project/settings
    method: GET
    data_selector: settings
    params: {}
- name: add_member
  endpoint:
    path: /docs/invite-team-members
    method: GET
    data_selector: ''
    params: {}
- name: remove_member
  endpoint:
    path: /docs/manage-group
    method: GET
    data_selector: ''
    params: {}
- name: rename_group
  endpoint:
    path: /docs/manage-group
    method: GET
    data_selector: ''
    params: {}
- name: project
  endpoint:
    path: /settings/general
    method: GET
    data_selector: project_data
- name: permissions
  endpoint:
    path: /permissions
    method: GET
    data_selector: permissions_data
- name: Team permissions
  endpoint:
    path: /docs/team-permissions
    method: GET
- name: download_image_projects
  endpoint:
    path: /downloads/image_projects
    method: POST
    data_selector: download_settings
    params: {}
- name: download_video_audio_projects
  endpoint:
    path: /downloads/video_audio_projects
    method: POST
    data_selector: download_settings
    params: {}
- name: download_text_projects
  endpoint:
    path: /downloads/text_projects
    method: POST
    data_selector: download_settings
    params: {}
- name: folders
  endpoint:
    path: /data/folders
    method: GET
    data_selector: folders
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: project_permissions
  endpoint:
    path: /docs/project-permissions
    method: GET
    data_selector: permissions
- name: data_permissions
  endpoint:
    path: /docs/data-permissions
    method: GET
    data_selector: permissions
- name: integration_permissions
  endpoint:
    path: /docs/integrations-permissions
    method: GET
    data_selector: permissions
- name: folder_permissions
  endpoint:
    path: /docs/folder-permissions
    method: GET
    data_selector: permissions
- name: editor_permissions
  endpoint:
    path: /docs/editor-permissions
    method: GET
    data_selector: permissions
- name: class_permissions
  endpoint:
    path: /docs/class-permissions
    method: GET
    data_selector: permissions
- name: analytics_permissions
  endpoint:
    path: /docs/analytics-permissions
    method: GET
    data_selector: permissions
- name: images
  endpoint:
    path: /data/images
    method: GET
    data_selector: images
    params: {}
- name: image_status
  endpoint:
    path: /docs/manage-images
    method: GET
    data_selector: status
    params: {}
- name: assign_unassign_images
  endpoint:
    path: /assign_unassign_images
    method: POST
    data_selector: data
    params: {}
- name: classes
  endpoint:
    path: /api/classes
    method: GET
    data_selector: records
- name: request_images
  endpoint:
    path: /request/images
    method: POST
- name: imported_classes
  endpoint:
    path: /imported_classes
    method: GET
    data_selector: records
- name: exported_classes
  endpoint:
    path: /exported_classes
    method: GET
    data_selector: records
- name: contributors
  endpoint:
    path: /api/contributors
    method: GET
    data_selector: contributors
    params: {}
- name: manage_videos
  endpoint:
    path: /manage/videos
    method: GET
    data_selector: videos
    params: {}
- name: assign_unassign_videos
  endpoint:
    path: /assign/unassign/videos
    method: POST
    data_selector: assignments
    params: {}
- name: request_videos
  endpoint:
    path: /request/videos
    method: POST
    data_selector: requests
    params: {}
- name: video_status
  endpoint:
    path: /video/status
    method: GET
    data_selector: status
    params: {}
- name: delete_videos
  endpoint:
    path: /delete/videos
    method: DELETE
    data_selector: deletions
    params: {}
- name: group_access
  endpoint:
    path: /manage/project/access
    method: POST
    data_selector: access
    params: {}
- name: video_status
  endpoint:
    path: /video/status
    method: GET
- name: project_settings
  endpoint:
    path: /docs/project-settings
    method: GET
    data_selector: settings
    params: {}
- name: videos
  endpoint:
    path: /videos/assign_unassign
    method: POST
    data_selector: data
    params: {}
- name: project
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: videos
  endpoint:
    path: /data/videos
    method: GET
    data_selector: videos
    params: {}
- name: documents
  endpoint:
    path: /manage-documents
    method: GET
- name: documents
  endpoint:
    path: /data/documents
    method: GET
    data_selector: documents
    params: {}
- name: project_admin_permissions
  endpoint:
    path: /settings/general/project_admin_permissions
    method: GET
    data_selector: permissions
- name: annotator_permissions
  endpoint:
    path: /settings/general/annotator_permissions
    method: GET
    data_selector: permissions
- name: document_status
  endpoint:
    path: /document/statuses
    method: GET
    data_selector: statuses
    params: {}
- name: project
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: projects
- name: team_performance_metrics
  endpoint:
    path: /analytics/team_performance
    method: GET
    data_selector: performance_data
- name: images
  endpoint:
    path: /data/images
    method: GET
    data_selector: images
    params: {}
- name: assign_images
  endpoint:
    path: /assign_images
    method: POST
    data_selector: result
    params: {}
- name: unassign_images
  endpoint:
    path: /unassign_images
    method: POST
    data_selector: result
    params: {}
- name: request_images
  endpoint:
    path: /request/images
    method: GET
    data_selector: images
    params:
      min_request: 1
      max_request: 200
- name: Manage videos
  endpoint:
    path: /docs/manage-videos
    method: GET
- name: Assign/Unassign videos
  endpoint:
    path: /docs/assign-unassign-videos
    method: GET
- name: Request videos
  endpoint:
    path: /docs/request-videos
    method: GET
- name: Video status
  endpoint:
    path: /docs/video-status
    method: GET
- name: Delete videos
  endpoint:
    path: /docs/delete-videos
    method: GET
- name: create_subset
  endpoint:
    path: /create_subset
    method: POST
    data_selector: response
    params: {}
- name: copy_items
  endpoint:
    path: /copy_items
    method: POST
    data_selector: response
    params: {}
- name: move_items
  endpoint:
    path: /move_items
    method: POST
    data_selector: response
    params: {}
- name: share_subset
  endpoint:
    path: /share_subset
    method: POST
    data_selector: response
    params: {}
- name: delete_subset
  endpoint:
    path: /delete_subset
    method: DELETE
    data_selector: response
    params: {}
- name: delete_items
  endpoint:
    path: /delete_items
    method: DELETE
    data_selector: response
    params: {}
- name: video_status
  endpoint:
    path: /video/status
    method: GET
    data_selector: statuses
- name: assign_videos
  endpoint:
    path: /assign_videos
    method: POST
    data_selector: results
- name: unassign_videos
  endpoint:
    path: /unassign_videos
    method: POST
    data_selector: results
- name: Similarity Search
  endpoint:
    path: /similarity_search
    method: GET
    data_selector: items
- name: Annotate Similar
  endpoint:
    path: /annotate_similar
    method: POST
    data_selector: annotations
- name: videos
  endpoint:
    path: /request/videos
    method: GET
    data_selector: videos
    params:
      request_item_number:
        min: 1
        max: 50
- name: documents
  endpoint:
    path: /docs/manage-documents
    method: GET
- name: keypoint_steps
  endpoint:
    path: /keypoint_steps
    method: GET
    data_selector: steps
    params: {}
- name: delete_keypoint_steps
  endpoint:
    path: /delete_keypoint_steps
    method: POST
    data_selector: connections
    params: {}
- name: document_statuses
  endpoint:
    path: /docs/manage-documents
    method: GET
    data_selector: statuses
- name: documents
  endpoint:
    path: /assign-unassign-documents
    method: POST
    data_selector: results
    params: {}
- name: request_documents
  endpoint:
    path: /docs/request-documents
    method: GET
    data_selector: documents
    params: {}
- name: documents_received_by_status
  endpoint:
    path: /docs/documents-received-by-status
    method: GET
    data_selector: documents
    params: {}
- name: documents_received_by_order
  endpoint:
    path: /docs/documents-received-by-order
    method: GET
    data_selector: documents
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: POST
    data_selector: comments
    params: {}
- name: team_performance
  endpoint:
    path: /team/performance
    method: GET
    data_selector: performance_data
- name: filter_by_folder
  endpoint:
    path: /filter/folder
    method: GET
    data_selector: filters
    params: {}
- name: filter_by_role
  endpoint:
    path: /filter/role
    method: GET
    data_selector: filters
    params: {}
- name: filter_user
  endpoint:
    path: /filter/user
    method: GET
    data_selector: filters
    params: {}
- name: skeleton_annotation_steps
  endpoint:
    path: /skeleton/annotation/steps
    method: GET
    data_selector: steps
- name: Autotrack
  endpoint:
    path: /autotrack
    method: POST
    data_selector: tracked_items
    params:
      item_count: '10'
- name: QA Mode
  endpoint:
    path: /qa-mode
    method: GET
    data_selector: instances
- name: Similarity Search
  endpoint:
    path: /search/similar
    method: GET
    data_selector: items
- name: Annotate Similar
  endpoint:
    path: /annotate/similar
    method: POST
    data_selector: annotations
- name: tag
  endpoint:
    path: /tags
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: items
  endpoint:
    path: /api/items
    method: GET
    data_selector: records
- name: instances
  endpoint:
    path: /api/instances
    method: GET
    data_selector: records
- name: keypoint_steps
  endpoint:
    path: /keypoint/steps
    method: GET
    data_selector: steps
    params: {}
- name: delete_keypoint_steps
  endpoint:
    path: /keypoint/steps/delete
    method: DELETE
    data_selector: 'null'
    params: {}
- name: Autotrack
  endpoint:
    path: /docs/autotrack
    method: GET
    data_selector: Autotrack information
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: POST
    data_selector: comment_data
- name: tag
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
    params: {}
- name: skeleton_annotation
  endpoint:
    path: /skeleton/annotation
    method: POST
    data_selector: results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: image_autotrack
  endpoint:
    path: /autotrack/image
    method: POST
    data_selector: tracked_items
    params:
      item_count: '10'
- name: document
  endpoint:
    path: /services/data/vXX.X/sobjects/Document
    method: GET
    data_selector: records
    params: {}
- name: create_tag
  endpoint:
    path: /docs/classes
    method: GET
    data_selector: ''
    params: {}
- name: assign_tag
  endpoint:
    path: /docs/bulk-actions#addremove-tags
    method: GET
    data_selector: ''
    params: {}
- name: remove_tag
  endpoint:
    path: /docs/bulk-actions#addremove-tags
    method: GET
    data_selector: ''
    params: {}
- name: classes
  endpoint:
    path: /api/classes
    method: GET
    data_selector: records
- name: tags
  endpoint:
    path: /api/tags
    method: GET
    data_selector: tags
    params: {}
- name: relationship
  endpoint:
    path: /classes/relationships
    method: POST
    data_selector: relationships
    params: {}
- name: Image (Legacy) Editor
  endpoint:
    path: /docs/pixel-editor
    method: GET
    data_selector: instances
    params: {}
- name: video_audio
  endpoint:
    path: /video/audio
    method: GET
    data_selector: video_audio_records
- name: create_tag
  endpoint:
    path: /docs/classes
    method: GET
- name: assign_tag
  endpoint:
    path: /docs/bulk-actions#addremove-tags
    method: GET
- name: remove_tag
  endpoint:
    path: /docs/bulk-actions#addremove-tags
    method: GET
- name: class
  endpoint:
    path: /api/classes
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: event
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: custom_action_input
  endpoint:
    path: /trigger/custom_action
    method: POST
    data_selector: event
    params: {}
- name: send_webhook
  endpoint:
    path: /trigger/send_webhook
    method: POST
    data_selector: payload
    params: {}
- name: create_tag
  endpoint:
    path: /docs/classes
    method: GET
    data_selector: ''
    params: {}
- name: assign_tag
  endpoint:
    path: /docs/bulk-actions#addremove-tags
    method: GET
    data_selector: ''
    params: {}
- name: remove_tag
  endpoint:
    path: /docs/bulk-actions#addremove-tags
    method: GET
    data_selector: ''
    params: {}
- name: relationship
  endpoint:
    path: /relationships
    method: POST
    data_selector: relationships
    params: {}
- name: send_webhook_request
  endpoint:
    path: /send_webhook
    method: POST
    data_selector: before
    params: {}
- name: send_email_body
  endpoint:
    path: /send_email
    method: POST
    data_selector: event
    params: {}
- name: project_status
  endpoint:
    path: /project/status/updated
    method: POST
    data_selector: before
    params: {}
- name: Shortcuts
  endpoint:
    path: /shortcuts
    method: GET
    data_selector: shortcuts
- name: webhook_request
  endpoint:
    path: /send/webhook
    method: POST
    data_selector: before
    params: {}
- name: email_body
  endpoint:
    path: /send/email
    method: POST
    data_selector: email_body
    params: {}
- name: folder_status
  endpoint:
    path: /folder/status
    method: POST
    data_selector: before
    params: {}
- name: webhook_request
  endpoint:
    path: /send/webhook
    method: POST
    data_selector: payload
    params: {}
- name: email_body
  endpoint:
    path: /send/email
    method: POST
    data_selector: body
    params: {}
- name: Image (Legacy) Editor
  endpoint:
    path: /docs/pixel-semantic-and-instance-segmentation-modes
    method: GET
    data_selector: instances
    params: {}
- name: item_annotation_status_updated
  endpoint:
    path: /item_annotation_status_updated
    method: POST
    data_selector: items
    params: {}
- name: item_opened_in_editor
  endpoint:
    path: /item_opened_in_editor
    method: POST
    data_selector: items
    params: {}
- name: item_approval_status_updated
  endpoint:
    path: /item_approval_status_updated
    method: POST
    data_selector: items
    params: {}
- name: item_annotator_assignment_updated
  endpoint:
    path: /item_annotator_assignment_updated
    method: POST
    data_selector: items
    params: {}
- name: item_qa_assignment_updated
  endpoint:
    path: /item_qa_assignment_updated
    method: POST
    data_selector: items
    params: {}
- name: internal_event
  endpoint:
    path: /events/internal
    method: GET
    data_selector: events
    params: {}
- name: external_event
  endpoint:
    path: /events/external
    method: GET
    data_selector: events
    params: {}
- name: scheduled_event
  endpoint:
    path: /events/schedule
    method: GET
    data_selector: events
    params: {}
- name: manual_event
  endpoint:
    path: /events/manual
    method: GET
    data_selector: events
    params: {}
- name: custom_action_input
  endpoint:
    path: /event
    method: POST
    data_selector: event
    params: {}
- name: send_webhook_request
  endpoint:
    path: /webhook
    method: POST
    data_selector: payload
    params: {}
- name: event
  endpoint:
    path: /events
    method: POST
    data_selector: event
    params: {}
- name: export_status
  endpoint:
    path: /export/status/updated
    method: POST
    data_selector: data
    params: {}
- name: send_webhook_request
  endpoint:
    path: /send_webhook_request
    method: POST
    data_selector: before
    params: {}
- name: send_email_body
  endpoint:
    path: /send_email_body
    method: POST
    data_selector: event
    params: {}
- name: project_status
  endpoint:
    path: /projects/status
    method: POST
    data_selector: before
    params: {}
- name: send_webhook_request
  endpoint:
    path: /send_webhook
    method: POST
    data_selector: before
    params: {}
- name: send_email_body
  endpoint:
    path: /send_email
    method: POST
    data_selector: Event
    params: {}
- name: folder_deleted
  endpoint:
    path: /folder/deleted
    method: POST
    data_selector: payload
    params: {}
- name: folder_status_updated
  endpoint:
    path: /folder/status/updated
    method: POST
    data_selector: payload
    params: {}
- name: webhook_request
  endpoint:
    path: /send_webhook_request
    method: POST
    data_selector: payload
    params: {}
- name: email_body
  endpoint:
    path: /send_email_body
    method: POST
    data_selector: body
    params: {}
- name: item_annotation_status_updated
  endpoint:
    path: /path/to/item_annotation_status_updated
    method: POST
    data_selector: records
    params: {}
- name: item_opened_in_editor
  endpoint:
    path: /path/to/item_opened_in_editor
    method: POST
    data_selector: records
    params: {}
notes:
- SAClient can be used without arguments.
- 'Method 1: Define SA_TOKEN as an environment variable.'
- 'Method 2: Generate a config file using CLI.'
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses OAuth2 with refresh token — requires setup of connected app in SuperAnnotate
- Ensure to set the environment variable SA_TOKEN for the SuperAnnotate SDK token.
- Define the EXTERNAL_ID environment variable.
- Automating QA can make data delivery faster and more efficient
- It’s important to understand when automation is appropriate
- Data quality is crucial for a successful model
- Automation can't determine whether an annotation covers the entire object
- Uses OAuth2 for authentication.
- Automated QA scripts check annotations and upload changes.
- Uses OAuth2 with refresh token — requires setup of connected app in superannotate
- Automation relies on event triggers when items are marked as Completed.
- Annotations may require manual checks for data quality.
- BLEU and ROUGE are indispensable tools in the NLP landscape, serving as benchmarks
  for evaluating the performance of diverse models.
- Automation of QA process can be done using LLMs.
- Automation of the QA process can be done using LLMs.
- API requires specific endpoint paths for accessing resources.
- Uses API key for authentication.
- SuperAnnotate simplifies and accelerates your dataset creation and model development.
- Some objects like Contact may return nulls in deeply nested fields
- 'Our support team is available during the following business hours: Monday to Friday,
  24 hours.'
- Project Admins can’t upload or download data unless you give them permission from
  Settings.
- We use AWS Cognito services and keep your data secure in S3 buckets. Only your team
  has access to your data.
- We don't provide any public links. So, no one can access your data after you export
  it.
- If you request to delete your data, we will delete it the same day.
- SuperAnnotate will have read-only access to your data; your items are stored in
  your cloud storage(s) and are only displayed in SuperAnnotate.
- You can't upload more than 50,000 items to the root or a folder. The remaining items
  will be skipped.
- A project can't contain more than 500,000 items.
- 'A folder name can''t exceed 120 characters and can''t contain the following characters:
  `/ \ : * ? " < > |`'
- Users who have signed in with their email addresses can enable 2FA. If you’ve signed
  in to your account with Google, you won’t be able to use 2FA.
- Your password must contain at least 8 characters, including an uppercase letter,
  a lowercase letter, and a number.
- Your password can’t start or end with a blank space.
- 'Limited Library Support: You can’t install every Python package by default, though
  many popular libraries are available or can be installed dynamically with `pyodide_js`.'
- 'Performance Constraints: Pyodide handles small to medium tasks well but may struggle
  with heavy data processing or other compute intensive tasks.'
- Always save or copy your code elsewhere before regenerating the base code. The regeneration
  process can overwrite changes in **init**.py.
- Keep business logic, helper functions, and main event handlers in separate files
  for clarity and maintainability.
- Use the Run button in the Code Editor to verify changes in real-time. Log or print
  outputs to the console to debug.
- Pyodide runs in the main UI thread. Heavy operations can freeze the interface. For
  large computations, consider using Orchestrate.
- Validate data, run housekeeping tasks, or log user actions at key points in the
  annotation process (before/after save, on status change, etc.).
- Make your account more secure with two-factor authentication (2FA).
- All users who have signed in with their email addresses (not Google) can enable
  2FA.
- Requires setup of connected app in SuperAnnotate
- You can import data from external data sources like Snowflake, Databricks, AWS and
  more using Integrations.
- 'Limited Library Support: You can’t install every Python package by default, though
  many popular libraries are available or can be installed dynamically with pyodide_js.'
- Always save or copy your code elsewhere before regenerating the base code. The regeneration
  process can overwrite changes in init.py.
- You can generate up to 50,000 items in one folder.
- The character limit for Multimodal items is 120 characters.
- Signing items is required when the value of a key is an external item.
- This button can be integrated with a model connected to your team and then used
  to run basic or advanced prompts.
- If your CSV file contains private URLs from an external cloud storage, you must
  check the Access to external URLs box.
- The CSV files required for an Multimodal project have to be created with the following
  in mind.
- This feature must be enabled for the project in order to use it.
- Disabled by default. When enabled, it shows a tooltip icon on the component.
- Disabled by default. When enabled, input is considered invalid when there is no
  text.
- Disabled by default. When enabled, this component will be hidden on the main form.
- Disabled by default. When enabled, the value of the component will be excluded from
  the exported annotation JSON.
- Fired when the time value is changed by the user, receives the component's path
  and the time value.
- Only Annotators and QAs can request items.
- Items will be removed from a contributor's item list if an Annotator marks an item
  for Quality Check or marks it as Completed.
- 'An item can have one of the following statuses: Not started, In progress, Quality
  Check, Returned, Completed, Skipped.'
- The character limit for Multimodal items is 120 characters, which includes the numerical
  suffix that is automatically added based on item count.
- You'll only have to use this format to sign the image as an integrated item if your
  integrated items are set to private.
- Default batch size for request is 3.
- The request item number for Multimodal projects is 1 item to 200 items.
- 'This setting can only be enabled if: Automatic Assignment is enabled under Task
  Request Settings. Priority scores is disabled.'
- Ensure proper authentication is set up
- Each item can only have one category at a time.
- A project can only have 2000 categories maximum.
- The character limit for a category name is 200.
- The SuperAnnotate CSV format export is only supported for components whose values
  are a string or number, as CSV files don’t support complex data types.
- When an item is removed from a contributor's batch, they'll have space to request
  a number of items up to their project's batch size.
- Only one of the settings may be enabled at one time.
- Default batch size for task assignment is 3.
- Only Team Admins and users of higher roles can delete a project.
- Validating your connections may fail if there are issues with the connection’s credentials.
- You can only have up to 200 Credentials per team.
- Analytics is a useful tool that can be found in the FineTune tab in the left panel.
- When you upload images to a project, their status is NotStarted by default.
- Images with existing names will be skipped (not uploaded).
- The Insights feature is a flexible and easy to use tool for measuring and reviewing
  your team’s performance and project status in an in-depth manner during project
  curation.
- You have the ability to compare data through different charts to help you visualize
  the information easily.
- 'SuperAnnotate supports the following video file formats that HTML5 supports: OGG,
  WEBM, and MP4.'
- 'Users can select one or multiple statuses from the following: `Not Started`, `In
  Progress`, `Quality Check`, `Returned`, `Completed`, `Skipped`.'
- 'Users can select one or multiple approval statuses from the following: `Approved`,
  `Disapproved`, `None`.'
- 'Users can select one or multiple creator roles from the following: `Annotator`,
  `QA`, `Admin`.'
- 'Users can select one or multiple creation types from the following: `Manual`, `Prediction`,
  `Preannotation`.'
- 'Users can select one or multiple updater roles from the following: `Annotator`,
  `QA`, `Admin`.'
- 'Validating your connections: If there are any issues with the connection’s credentials
  (i.e. your tokens were exhausted), validation will fail.'
- Enable CORS in your storage for the storages you'll be using.
- 'SuperAnnotate supports the following audio file formats: MP3, WAV, and OGG.'
- When you upload annotations, the status of an image will change to `inProgress`.
- Use the `prepare_export` functionality to download images or annotations in bulk.
- Enable CORS in your storage for external text URLs.
- 'If the class name is already taken, you''ll see this message: ''Annotation class
  already exists.'''
- To invite team members, use sa.invite_contributors_to_team() method.
- You can create up to 25 custom fields.
- 'The project type isn’t supported: “Unsupported project type.” Note that this feature
  works only with Image Projects, Video or Audio Projects, and Text Projects.'
- This API supports only Image Projects, Video or Audio Projects, and Text Projects.
- Newly created projects will have a Not Started status.
- Please limit your item name to 120 characters. Uploading any items whose names exceed
  this limitation will result in their names cropped.
- The annotations you upload override the existing annotations.
- When you upload an annotation, the item's status will be changed to `inProgress`.
- 'The annotations JSON contains fields: metadata, instances, tags, and comments.'
- The object name is mandatory.
- Mandatory fields include name, status, url, projectId, annotatorEmail, and qaEmail
  in metadata.
- Uses JSON format for data representation.
- When you delete all the annotations, the items will have the `Not Started` annotation
  status.
- A field can’t have both maximum/minimum and enum field specs.
- 'You can create up to 25 custom fields. When you exceed the limit: ''Maximum number
  of custom fields is 25.'''
- This feature works only with Image Projects, Video or Audio Projects, and Text Projects.
- When you download the annotation data of a Image (Legacy) Project, you'll find JSON
  files and PNG images in your download folder.
- Please limit your item name to 120 characters. Uploading any items whose names exceed
  this limitation will result in their names cropped. This can be an issue if you
  have any pre-annotations or JSONs relying on the original filenames.
- The object `name` in metadata is mandatory.
- If the object `lastAction` exists, then the `email` and `timestamp` are mandatory.
- The array `correspondence` in comments and its objects are mandatory.
- The fields that are marked in bold in the descriptions are mandatory.
- When exporting the annotation JSON of a Video file, you'll receive a JSON with the
  structure by Timeline.
- If you want to export a list of annotations in a video by Frame, you'll need to
  use the provided SDK function.
- Supports bounding boxes, polygons, polylines, and points.
- Each document has its own JSON file.
- Currently, only Manual is the available option for creationType.
- Avoid using special characters when naming your items to prevent unexpected behavior.
- Each image has its own JSON file containing annotations.
- Only Team Owners and Team Admins can create and manage integrations.
- The annotation location path you choose when creating an integration will also define
  future upload methods.
- Only Organization Owners can set up an integration from the Organization tab.
- The Explore, Insights and Analytics features will be unavailable for any project
  that uses integrations whose annotations aren’t stored on SuperAnnotate’s servers.
- You’ll need to enable CORS in your storage to be able to make use of your items
  in the Text Editor.
- SuperAnnotate will have read-only access to your data.
- You can’t create an integration with a GCP bucket if it is empty.
- SuperAnnotate supports a two-level folder structure.
- Your integration won’t work if the personal access token expires. The data you've
  uploaded from the integration will still be accessible in the project.
- Unique instance ID for each cuboid.
- Probability value is always 100 for manually created instances.
- Databricks integration supports AWS, Azure, and GCP.
- When exporting the annotation JSON of a Video file, the structure includes metadata,
  instances, and tags.
- Mandatory fields for metadata include name and lastAction which requires email and
  timestamp.
- If you remove a Snowflake integration from the team, any data you’ve uploaded from
  it will remain accessible in your projects.
- If you delete a Snowflake integration, any data you’ve uploaded from it will remain
  accessible in your projects.
- 'Folder paths: All items within a folder will be uploaded; cannot select specific
  files.'
- When naming your items, please avoid using special characters as they may lead to
  unexpected behavior or compatibility issues.
- Each item has its own JSON file.
- You can upload PDF, DCM and Video files to Image Projects by frame.
- SuperAnnotate offers three ways to add extra protection to your data.
- IP whitelisting is a way of giving access to your data to specific, trusted, and
  pre-approved IP addresses. This increases the security of your data and ensures
  safe remote access.
- To make your data more secure, add accessibility restrictions to it including IP
  whitelisting and an expiration date.
- 'When naming your items, please avoid using the following special characters as
  they may lead to unexpected behavior or compatibility issues: < > : ” '' / \ | ?
  \* & $ ! +'
- SuperAnnotate will have read-only access to your data; your items are stored in
  your AWS S3 buckets and are only displayed in SuperAnnotate.
- Choosing an annotation location allows you to maintain an extra level of project
  privacy and security.
- Organization Owner can create and manage teams, and create and delete integrations.
- You can’t export in the COCO format when adding items from an integrated AWS bucket.
- You can’t set the upload quality in Settings.
- SuperAnnotate supports SAML 2.0 single sign-on with identity providers like Azure
  AD, Okta, and Ping Identity.
- Only organization owners can set up SSO.
- There is no limit to how many teams you can have in an organization.
- The team name can have a maximum of 120 characters.
- Please note that by deleting the integration, any items uploaded to your projects
  from this integration will no longer be accessible.
- SuperAnnotate supports a two-level folder structure. This means that you can have
  items and folders in a project, but you can’t create or upload subfolders.
- The team name can only have a maximum of 120 characters.
- You can create a workflow and link it with one or multiple projects to align the
  platform's workflow with their team’s processes.
- Custom statuses can be used within any workflow that you create.
- You can create up to 200 statuses per team, and they can't be edited or deleted
  yet.
- Your integration won’t work if the personal access token expires.
- Custom roles can be created by Team Admin or higher.
- Up to 200 roles can be created per team, and they can't be edited or deleted yet.
- You can have a maximum of 2,000 workflows in a team at one time, including system
  workflows.
- Make sure to enable cross-origin resource sharing (CORS) for the S3 storages you'll
  be using.
- You can only upload 2000 images at a time via the UI, and we recommend uploading
  up to 1000 items at a time for a smoother process.
- You can only have up to a maximum of 50,000 items in a project's root or in any
  folder.
- You can only have up to a maximum of 500,000 items per project.
- You can only have up to a maximum of 500 folders per project.
- You need to enable CORS for your Text Projects to be imported successfully.
- Team Admin can access all the team’s projects.
- Contributors have access to the projects that are shared with them.
- Members can only be added to one group at a time.
- You can only have up to 200 groups per team at a time.
- 'For extra security, you should replace `*` in `AllowedOrigins` with the following
  domains: https://app.superannotate.com/, https://editor.superannotate.com/'
- Team Admins can’t be added to groups.
- Contributors that are already grouped can’t be added to other groups.
- The new group name must be unique and case insensitive.
- The validity period of the token is displayed on the page.
- To change the Organization Owner, please contact our Support team.
- The SDK token belonging to all teams will be revoked when the Organization Owner
  is changed.
- Updated 26 days ago
- By deleting your team, you’ll lose your team’s data.
- SuperAnnotate supports SAML 2.0 single sign-on.
- SuperAnnotate will have read-only access to your data; your items are stored in
  your cloud storage and are only displayed in SuperAnnotate.
- Each team can only have up to 2000 projects created at a time.
- Only members with the role of Team Admin or higher can create and view a status.
- Only Team Owners, Team Admins, and Project Admins can rename projects.
- Only Team Owners and Team Admins can pin or unpin projects.
- Only Team Owners, Team Admins, and Project Admins can view and set their project’s
  status.
- Only Team Owners and Team Admins can delete projects.
- Custom roles can be created by members with the role of Team Admin or higher.
- You can create up to 200 roles per team, and they can't be edited or deleted yet.
- Members within that group won’t have access to any project’s data until the scope
  is defined.
- Users with the role of Team Admin and above can create, view and manage a Custom
  Column.
- Team Owners can set permissions for Team Admins in addition to the permissions they
  already have, provided the respective features are enabled for their organization.
- Team Admin can access all the team’s projects and can’t be a member of a group.
- The request item number for Video or Audio Projects is 1 item to 50 items.
- The following settings are disabled by default. You can enable them to provide your
  Project Admins additional permissions.
- Basic Tokenization is enabled by default.
- The request item number for Text Projects is 1 item to 50 items.
- Removing members from a group will remove their access to all projects shared with
  that group.
- The request item number for Tiled Imagery Projects is 1 item to 50 items.
- The request item number for Point Cloud Projects is 1 item to 50 items.
- A project can’t contain more than 500 folders.
- You can't create subfolders.
- Any modifications you apply to the table in this way will only be visible to you.
- Only Team Owners, Team Admins, and Project Admins can rename, pin, or delete projects.
- 'The project can have one of 4 statuses: Not Started, In Progress, Completed, On
  Hold.'
- You can assign images only to Annotators and QAs.
- You can’t assign items or folders to a user if their activity in that project is
  paused.
- Only Annotators and QAs can request images. They'll be automatically assigned up
  to the number of images that you set in Request item number in Settings. The minimum
  number is 1 and the maximum number is 200 for both Image Projects and Image (Legacy)
  Projects.
- Only one of the sub-settings may be enabled at one time.
- Only Team Owners, Team Admins, and Project Admins (with permission) can delete images.
- Team Owners and Team Admins can add and remove project contributors and change their
  roles.
- Project Admins can't delete or change the role of other Project Admins.
- 'You can define the group data scope in two ways: All project data, and Specific
  folders.'
- This is an optional step, you won’t have to define the group’s scope right away.
- You can't move folders.
- Videos with existing names will be skipped and will remain in their source folder.
- Videos that exceed the folder limit won't be moved.
- You can't copy videos and folders at the same time.
- Videos with existing names will be skipped.
- Videos that exceed the folder limit won't be copied.
- When Priority scores is disabled, the Annotators will receive the requested items
  ordered by name.
- You can assign videos only to Annotators and QAs.
- Only Annotators and QAs can request videos.
- The minimum request item number is 1 and the maximum is 50.
- Actions can be performed in the Data subsection of the FineTune tab
- Documents with existing names will be skipped and will remain in their source folder.
- Documents that exceed the folder limit won't be moved.
- Request item number for Point Cloud Projects is 1 item to 50 items.
- You can assign documents only to Annotators and QAs.
- A folder will only be exported if it contains images that have the image status
  or image statuses indicated in the download settings. The exported folder will only
  contain the relevant images.
- Instance count and Instance count in completed items are unavailable for Multimodal
  projects.
- You can copy only one folder at a time.
- You can't copy a folder to another folder.
- The Annotator hasn't started working on the image.
- An Annotator is working on the image.
- A QA is reviewing the image.
- The image is returned to the Annotator for further review.
- The Project Admin or Annotator approved the image.
- The image is complete, but it doesn't contain annotations.
- Only Annotators and QAs can request images.
- Items received when requesting new tasks count towards the batch size.
- For Multimodal projects, you can only add one comment to each component.
- Only one of the settings may be enabled at one time
- This feature can only be used with Bounding Box and Polygon instances.
- You can only select one reference at a time.
- Instances smaller than 64 pixels can't be used as a reference.
- If the Priority scores task assignment setting is enabled, contributors will receive
  items by priority score.
- Actions can be performed in the Data subsection of the FineTune tab in the left
  panel.
- You can't copy documents and folders at the same time.
- Documents with existing names will be skipped.
- Documents that exceed the folder limit won't be copied.
- Only Annotators and QAs can request documents.
- The minimum number for request item number is 1 and the maximum is 50.
- Users with non-admin roles can only see the hours that they have individually spent
  in their current role.
- Grouped Contributors will only be able to see the analytical information of the
  data scope shared with their group.
- Filters can be used for the different sections of your project’s Analytics and will
  affect the overall metrics displayed.
- You can’t select a user filter and then select a role filter.
- Keep in mind that if you repeat steps, it won't overwrite or delete the existing
  step.
- 'To choose how many items to run Autotrack on: enter a number between 1-20, default
  is 10.'
- The character limit for the text is 1024 characters.
- The Magic Box tool isn’t available when using Steps.
- If the text can’t be extracted, you’ll have to type the text manually.
- Even if the text was automatically added, you can still edit it.
- Some actions may have limitations based on the view or project type.
- Use QA Mode for a more effective QA process.
- To enable QA Mode, turn on the QA Mode toggle in the left panel of the Image Editor
  or press Shift + Q on the keyboard.
- The Insights tab is available for Team Owners, Team Admins, and Project Admins.
- In case of group projects, the Insights tab will only show information on the project
  visible within the group’s data scope.
- 'You can only sort the chart in this way when selecting the following Breakdown
  parameters: Instance Type, Approval Status, Class Name, Creation Type, Creator Name,
  Creator Role, Updater Name, Updater Role, and Group ID'
- 'This filter is only available if one of the following breakdown parameters is selected:
  For items: [Role_Name] date, or Last action date. For instances: Created At or Updated
  At'
- Use the Clip mode feature for all types of segmentation.
- You can use this feature with the Polygon and Magic Select (SAM) tools only.
- Comments are available in Multimodal, Image, Image (Legacy), Video, and Text projects
  only.
- Autotrack uses a tracking algorithm to help you automate part of the annotation
  process for faster annotation.
- When you add a comment, the image's status doesn't change.
- Only Team Owners, Team Admins, and Project Admins can resolve comments.
- Only Team Owners, Team Admins, Project Admins, and QAs can delete comments.
- Some objects may return nulls in deeply nested fields
- 'To choose how many items to run Autotrack on: ranges from 1-20 with a default value
  of 10.'
- 'Use QA Mode for a more effective QA process. When QA Mode is enabled: You can hover
  over an instance to see its class and attribute(s) (if available). When you hover
  over an instance in the right panel, it''ll be the only one visible on the image.'
- To create a tag, you must do this through the Classes tab.
- Only Team Admins, Team Owners, and Project Admins can approve or disapprove items.
- With Clip mode, you'll be able to create instances without having them overlapped.
- SuperAnnotate automatically saves your progress.
- Autotrack is available for video projects that have Frame mode enabled.
- Overwrite Mode allows you to add an instance over another instance. The part of
  the instance at the bottom that intersects with the instance at the top will be
  deleted.
- Only Team Admins, Team Owners, and Project Admins can approve and disapprove videos/audios.
- Annotators and QAs can't approve or disapprove videos/audios.
- Trigger-Based Automation allows actions to be triggered through events or upon the
  completion of other actions.
- Includes a Notification System for sending webhooks and emails.
- Custom Actions can be built manually through a code editor.
- Webhook payloads must be in JSON format.
- Payload size threshold is set to 128 KB.
- All incoming webhooks require API Key authentication for enhanced security.
- The Periodic event cannot be connected to the Send Email action.
- Specify whether the automation applies at a team level (All projects), or limit
  its scope to a list of specific projects (Specific projects).
- Tags are a good way to classify your items and assign keywords to them to help you
  identify or analyze them better later on.
- The first ten tags that you create in the Classes tab will automatically be assigned
  a number (from 1 to 0 on the keyboard) to be used as a shortcut when annotating.
- 'Scope: Specify whether the automation applies at a team level (All projects), or
  limit its scope to a list of specific projects (Specific projects).'
- Event - "Folder deleted"
- Triggered by - "MyTeam/MyProject/MyFolder"
- The card name must be unique.
- When QA Mode is enabled, you can hover over an instance to see its class and attribute(s)
  (if available).
- When you hover over an instance in the right panel, it'll be highlighted on the
  image.
- The Custom event cannot be connected to the Send Email action.
- Only one Custom event card can be used in a pipeline at a time.
- Custom actions are limited to a maximum concurrency of 32 instances.
- Custom actions have a TTL of 3 hours.
- Custom actions are limited to a maximum concurrency of 32 instances. If this limit
  is reached, additional actions will be queued and executed once a slot becomes available.
- Custom actions have a TTL of 3 hours. This means that once a custom action is triggered
  and its status changes to pending, it must be completed within 3 hours. If an action
  takes longer than 3 hours to complete, it will be marked as failed.
- Keep in mind that you can only test code when editing an existing action.
- SuperAnnotate accepts incoming webhook events only through the HTTP POST method.
- The payload size threshold is set to 128 KB.
- In draft mode, you can freely navigate between tabs—even run tests from the Testing
  tab—without losing your unsaved changes.
- You can define up to 20 keys per event.
- Scope may apply at a team level (All projects) or limit to specific projects (Specific
  projects).
- The monitoring tab allows review of actions carried out by automation and metrics
  of pipelines.
- Triggered by - MyTeam/MyProject
- Event - 'Project deleted'
- Triggered by - 'MyTeam/MyProject'
- Event was triggered by the MyFolder folder within the MyProject project and the
  MyTeam team.
- 'Action type: The Fired in Explore event cannot be connected to the Send Email action.'
- 'Name uniqueness: The card name must be unique.'
- The Fired in Explore event cannot be connected to the Send Email action.
- Updated about 2 months ago
- The amount of memory that this action can use up is defined in the Allocated memory
  setting.
- Any executions that exceed the allocated memory limit will fail automatically.
- The execution duration limit is defined in the Execution duration setting.
- Any actions that exceed this duration limit will fail automatically.
- The maximum number of executions that can take place simultaneously is defined in
  the Concurrency setting.
- Any actions that exceed the concurrency limit will be held in a queue in the Received
  state for up to 3 hours.
errors:
- 'Returned: Item does not meet the requirements'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'ValueError: Total number of n-grams is 0.'
- '401 Unauthorized: Recheck API key or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- There are any invalid or non-existent component IDs in your CSV.
- Your upload exceeds the folder’s 50,000 item limit.
- Your upload exceeds your organization’s subscription plan limit.
- You can't move folders.
- Items with existing names will be skipped and will remain in their source folder.
- Items that exceed the folder limit won't be moved.
- You can't copy items and folders at the same time.
- Only Team Admins and users of higher roles can delete a project.
- Items with existing names will be skipped.
- Annotation class already exists.
- Custom field name [field name] is not unique.
- Maximum number of custom fields is 25. You can only create {25 - currently created
  active fields} more custom fields.
- Field name [field name] is already used.
- Not supported field type for [field name].
- Spec value type of [field name] is not valid.
- Maximum spec value of [field name] can't be less than minimum value.
- Spec values of [field name] should be unique.
- 'InvalidProjectStatus: The status should be one of the following: NotStarted, InProgress,
  Completed, or OnHold.'
- Unsupported project type.
- You do not have sufficient access to explore.
- Corresponding fields and their values removed from items.
- 'Item naming restrictions: Avoid using special characters as they may lead to unexpected
  behavior.'
- Direct upload - You can only upload 2000 images at a time via the UI.
- Folder item limit - You can only have up to a maximum of 50,000 items in a project's
  root or in any folder.
- Project item limit - You can only have up to a maximum of 500,000 items per project.
- Project folder limit - You can only have up to a maximum of 500 folders per project.
- Oh no! The response from your identity provider (IdP) is missing some required attributes.
  Please contact your IT department or an Organization Admin.
- '403 Forbidden: Check user permissions for accessing or modifying resources.'
- Cannot assign to paused users.
- 'REQUEST_ITEM_NUMBER_EXCEEDED: Ensure the request number is between 1 and 200.'
- 'Unauthorized: User does not have permission to perform this action.'
- 'HTTP Method: SuperAnnotate accepts incoming webhook events only through the HTTP
  POST method.'
- Limitations and restrictions apply to the incoming webhook events.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - SAML
  - IdentityProvider
  - User
  - Given name
  - Surname
  - Email address
client:
  base_url: https://www.superannotate.com
  auth:
    type: oauth2
source_metadata: null
