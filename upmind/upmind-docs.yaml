resources:
- name: domain_provider
  endpoint:
    path: /api/domain_provider
    method: POST
    data_selector: provider
    params: {}
- name: products
  endpoint:
    path: /api/v1/products
    method: GET
    data_selector: records
- name: services
  endpoint:
    path: /api/v1/services
    method: GET
    data_selector: records
- name: brand
  endpoint:
    path: /settings/brand
    method: GET
    data_selector: settings
    params: {}
- name: custom_domain
  endpoint:
    path: /docs/how-to-add-a-custom-domain-name
    method: GET
    data_selector: records
- name: landing_page_options
  endpoint:
    path: /settings/landing-page
    method: GET
    data_selector: options
    params: {}
- name: client_area_templates
  endpoint:
    path: /client-area/templates
    method: GET
- name: webhook
  endpoint:
    path: /help/articles/115005265063-Incoming-webhooks-for-Slack
    method: POST
    data_selector: webhook_url
    params: {}
- name: client_email_notifications
  endpoint:
    path: /client_email_notifications
    method: GET
    data_selector: notifications
    params: {}
- name: staff_email_notifications
  endpoint:
    path: /staff_email_notifications
    method: GET
    data_selector: notifications
    params: {}
- name: web_socket_notifications
  endpoint:
    path: /web_socket_notifications
    method: GET
    data_selector: notifications
    params: {}
- name: support_department_email
  endpoint:
    path: /settings/support_department
    method: GET
    data_selector: support_departments
- name: bulk_notifications
  endpoint:
    path: /clients/bulk_notifications
    method: POST
    data_selector: notifications
- name: email_templates
  endpoint:
    path: /clients/email_templates
    method: GET
    data_selector: templates
- name: clients
  endpoint:
    path: /api/v1/clients
    method: GET
    data_selector: data
- name: tickets
  endpoint:
    path: /api/v1/tickets
    method: GET
    data_selector: data
- name: invoices
  endpoint:
    path: /api/v1/invoices
    method: GET
    data_selector: data
- name: products
  endpoint:
    path: /api/v1/products
    method: GET
    data_selector: data
- name: payment_methods
  endpoint:
    path: /api/v1/payment_methods
    method: GET
    data_selector: data
- name: products
  endpoint:
    path: /import/products
    method: POST
    data_selector: products
    params: {}
- name: users
  endpoint:
    path: /import/users
    method: POST
    data_selector: users
    params: {}
- name: clients
  endpoint:
    path: /import/clients
    method: POST
    data_selector: clients
    params: {}
- name: affiliates
  endpoint:
    path: /import/affiliates
    method: POST
    data_selector: affiliates
    params: {}
- name: client_payment_info
  endpoint:
    path: /import/client_payment_info
    method: POST
    data_selector: client_payment_info
    params: {}
- name: contracts
  endpoint:
    path: /import/contracts
    method: POST
    data_selector: contracts
    params: {}
- name: invoices
  endpoint:
    path: /import/invoices
    method: POST
    data_selector: invoices
    params: {}
- name: tickets
  endpoint:
    path: /import/tickets
    method: POST
    data_selector: tickets
    params: {}
- name: fraud_settings
  endpoint:
    path: /settings/fraud
    method: GET
    data_selector: settings
    params: {}
- name: keyword_fraud_rules
  endpoint:
    path: /settings/fraud/keyword_rules
    method: POST
    data_selector: rules
    params: {}
- name: country_fraud_rules
  endpoint:
    path: /settings/fraud/country_rules
    method: POST
    data_selector: country_rules
    params: {}
- name: ip_fraud_rules
  endpoint:
    path: /settings/fraud/ip_rules
    method: POST
    data_selector: ip_rules
    params: {}
- name: custom_field
  endpoint:
    path: /api/custom_fields
    method: POST
    data_selector: custom_fields
- name: guest_checkout
  endpoint:
    path: /guest/checkout
    method: GET
    data_selector: checkout_data
    params: {}
- name: terms_and_conditions
  endpoint:
    path: /terms-and-conditions
    method: GET
    data_selector: document
    params: {}
- name: custom_cancellation_fields
  endpoint:
    path: /api/custom_cancellation_fields
    method: POST
    data_selector: fields
    params: {}
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: records
    params: {}
- name: delegates
  endpoint:
    path: /api/v1/delegates
    method: GET
    data_selector: records
    params: {}
- name: client
  endpoint:
    path: /clients
    method: GET
    data_selector: records
    params: {}
- name: affiliate_system
  endpoint:
    path: /settings/affiliates
    method: GET
- name: client_tags
  endpoint:
    path: /clients/tags
    method: GET
    data_selector: tags
    params: {}
- name: client_number_settings
  endpoint:
    path: /settings/client_numbers
    method: GET
    data_selector: client_numbers
    params: {}
- name: spam_ticket_management
  endpoint:
    path: /api/spam_ticket_management
    method: POST
    data_selector: rules
    params: {}
- name: delegates
  endpoint:
    path: /tickets/delegates
    method: POST
    data_selector: delegates
    params: {}
- name: tickets
  endpoint:
    path: /tickets
    method: POST
    data_selector: tickets
    params: {}
- name: tickets
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: tickets
    params: {}
- name: scheduled_ticket
  endpoint:
    path: /support/tickets/scheduled
    method: GET
    data_selector: tickets
    params: {}
- name: ticket
  endpoint:
    path: /support/tickets
    method: GET
    data_selector: tickets
- name: tickets
  endpoint:
    path: /api/v1/tickets
    method: GET
    data_selector: records
    params: {}
- name: clients
  endpoint:
    path: /api/clients/register
    method: POST
    data_selector: response
    params: {}
- name: order
  endpoint:
    path: /services/data/vXX.X/sobjects/Order
    method: GET
    data_selector: records
    params: {}
- name: existing_product
  endpoint:
    path: /clients/manage/existing_product
    method: POST
    data_selector: data
    params: {}
- name: subscription
  endpoint:
    path: /services/data/vXX.X/sobjects/Subscription
    method: GET
    data_selector: records
    params:
      incremental: renewal_date
- name: invoice
  endpoint:
    path: /invoices
    method: POST
    data_selector: invoice_details
    params: {}
- name: proforma_invoice
  endpoint:
    path: /settings/order-options/proforma-invoice
    method: POST
    data_selector: proforma_invoice_settings
- name: tax_settings
  endpoint:
    path: /settings/tax
    method: GET
- name: currencies
  endpoint:
    path: /settings/currencies
    method: GET
    data_selector: currencies
    params: {}
- name: exchange_rates
  endpoint:
    path: /settings/exchange_rates
    method: GET
    data_selector: exchangeRates
    params: {}
- name: contract_product
  endpoint:
    path: /products/services/contract_product
    method: GET
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
    params: {}
- name: invoice_consolidation
  endpoint:
    path: /api/invoice/consolidation
    method: POST
    data_selector: records
- name: global_revenue_recognition
  endpoint:
    path: /settings/order-options
    method: GET
    data_selector: recognition_methods
    params: {}
- name: product_level_revenue_recognition
  endpoint:
    path: /settings/product-catalogue
    method: GET
    data_selector: product_recognition_methods
    params: {}
- name: payment_methods
  endpoint:
    path: /payments/methods
    method: GET
- name: payment_gateways
  endpoint:
    path: /payments/gateways
    method: GET
- name: payment_gateway
  endpoint:
    path: /payments/gateways
    method: GET
    data_selector: gateways
    params: {}
- name: payments
  endpoint:
    path: /api/v1/payments
    method: POST
    data_selector: payment
    params: {}
- name: invoices
  endpoint:
    path: /api/v1/invoices
    method: GET
    data_selector: invoices
    params: {}
- name: gateway_settings
  endpoint:
    path: /settings/payment-options/gateway
    method: GET
    data_selector: gateway_settings
    params: {}
- name: billing_automation
  endpoint:
    path: /settings/payment-options/billing-automation
    method: GET
    data_selector: billing_automation
    params: {}
- name: client_wallet
  endpoint:
    path: /settings/payment-options/client-wallet
    method: GET
    data_selector: client_wallet
    params: {}
- name: payment_currencies
  endpoint:
    path: /settings/payment-options/currencies
    method: GET
    data_selector: payment_currencies
    params: {}
- name: payment_interval
  endpoint:
    path: /settings/payment-options
    method: GET
    data_selector: payment_intervals
    params: {}
- name: pending_payments
  endpoint:
    path: /billing/pending-payments
    method: GET
    data_selector: pending_payments
    params: {}
- name: payment_methods
  endpoint:
    path: /docs/how-to-use-different-payment-methods
    method: GET
    data_selector: payment_methods
- name: PayPal Billing Agreements
  endpoint:
    path: /docs/how-to-add-paypal-billing-agreement-as-a-payment-method
    method: GET
    data_selector: API credentials
    params: {}
- name: PayPal Express
  endpoint:
    path: /docs/how-to-add-paypal-as-a-payment-method
    method: GET
    data_selector: API credentials
    params: {}
- name: PayPal Pro
  endpoint:
    path: /docs/how-to-add-paypal-pro-as-a-payment-method
    method: GET
    data_selector: API credentials
    params: {}
- name: PayPal Pro (REST)
  endpoint:
    path: /docs/how-to-add-paypal-pro-rest-as-a-payment-method
    method: GET
    data_selector: API credentials
    params: {}
- name: PayPal Subscription Agreement
  endpoint:
    path: /docs/how-to-add-paypal-subscription-agreement-as-a-payment-method
    method: GET
    data_selector: API credentials
    params: {}
- name: PayPal Legacy Subscriptions (Callbacks)
  endpoint:
    path: /docs/how-to-add-paypal-legacy-subscription-callbacks-as-payment-method
    method: GET
    data_selector: API credentials
    params: {}
- name: PayPal Billing Agreement
  endpoint:
    path: /api/paypal/billing-agreement
    method: POST
- name: PayPal Express
  endpoint:
    path: /api/paypal/express
    method: POST
    data_selector: response
- name: payment_provider
  endpoint:
    path: /settings/payment_providers
    method: POST
    data_selector: payment_provider
    params: {}
- name: webhook_endpoint
  endpoint:
    path: /payments/gocardless/callback
    method: POST
- name: payment_gateway
  endpoint:
    path: /payment/providers
    method: GET
- name: Stripe API
  endpoint:
    path: /v1/payment_intents
    method: POST
- name: payment_provider
  endpoint:
    path: /settings/payment_providers/bitpay
    method: POST
    data_selector: provider
    params: {}
- name: payment_provider
  endpoint:
    path: /merchant/api
    method: POST
    data_selector: data
    params: {}
- name: payment_provider
  endpoint:
    path: /api/payment_providers/flutterwave
    method: POST
    data_selector: provider
    params: {}
- name: GoCardless
  endpoint:
    path: /v1/payments
    method: POST
- name: gocardless_mandate
  endpoint:
    path: /mandates
    method: GET
    data_selector: data
- name: payment_provider
  endpoint:
    path: /settings/payment_providers
    method: POST
    data_selector: payment_provider
    params: {}
- name: paysafecard
  endpoint:
    path: /settings/payment_providers/paysafecard
    method: POST
    data_selector: payment_provider
    params:
      api_key: your_api_key
- name: paystack_api
  endpoint:
    path: /api/endpoint
    method: GET
    params:
      public_key: '{{ dlt.secrets[''paystack_public_key''] }}'
      secret_key: '{{ dlt.secrets[''paystack_secret_key''] }}'
- name: payment_provider
  endpoint:
    path: /api/payment_providers/pesapal
    method: POST
    data_selector: data
- name: payment_provider
  endpoint:
    path: /settings/payment_providers/dLocal
    method: POST
    data_selector: payment_provider
    params: {}
- name: braintree_credentials
  endpoint:
    path: /settings/api
    method: GET
    data_selector: credentials
- name: payment_provider
  endpoint:
    path: /settings/payment_providers
    method: POST
    data_selector: payment_provider
    params: {}
- name: payment_provider
  endpoint:
    path: /settings/payment_providers
    method: POST
    data_selector: provider
    params: {}
- name: product_billing
  endpoint:
    path: /billing/products
    method: GET
    data_selector: products
- name: product_attributes
  endpoint:
    path: /api/product_attributes
    method: GET
    data_selector: attributes
    params: {}
- name: product_categories
  endpoint:
    path: /api/product_categories
    method: GET
    data_selector: categories
    params: {}
- name: product_option
  endpoint:
    path: /api/v1/product-options
    method: POST
    data_selector: data
    params:
      incremental: created_at
- name: subscriptions
  endpoint:
    path: /api/v1/subscriptions
    method: GET
    data_selector: data
- name: Product Notifications
  endpoint:
    path: /notifications
    method: POST
    data_selector: notifications
    params: {}
- name: provision_categories
  endpoint:
    path: /provisioning-categories
    method: GET
- name: web_hosting
  endpoint:
    path: /provisioning/web_hosting
    method: POST
    data_selector: data
- name: domain_names
  endpoint:
    path: /provisioning/domain_names
    method: POST
    data_selector: data
- name: auto_login
  endpoint:
    path: /provisioning/auto_login
    method: POST
    data_selector: data
- name: seo
  endpoint:
    path: /provisioning/seo
    method: POST
    data_selector: data
- name: website_builders
  endpoint:
    path: /provisioning/website_builders
    method: POST
    data_selector: data
- name: software_licenses
  endpoint:
    path: /provisioning/software_licenses
    method: POST
    data_selector: data
- name: servers
  endpoint:
    path: /provisioning/servers
    method: POST
    data_selector: data
- name: office_tools
  endpoint:
    path: /provisioning/office_tools
    method: POST
    data_selector: data
- name: provision_blueprint
  endpoint:
    path: /docs/provision-blueprint
    method: GET
    data_selector: provision_blueprint_data
- name: provision_provider
  endpoint:
    path: /docs/provision-provider
    method: GET
    data_selector: provision_provider_data
- name: configuration_mode
  endpoint:
    path: /docs/configuration-mode
    method: GET
    data_selector: configuration_mode_data
- name: provider_configuration
  endpoint:
    path: /docs/provider-configuration
    method: GET
    data_selector: provider_configuration_data
- name: setup_functions
  endpoint:
    path: /docs/setup-functions
    method: GET
    data_selector: setup_functions_data
- name: order_setup_fields
  endpoint:
    path: /docs/order-setup-fields
    method: GET
    data_selector: order_setup_fields_data
- name: provision_fields
  endpoint:
    path: /docs/provision-fields
    method: GET
    data_selector: provision_fields_data
- name: provisioning_settings
  endpoint:
    path: /docs/provisioning-settings
    method: GET
    data_selector: settings
    params: {}
- name: product_catalogue
  endpoint:
    path: /docs/product-catalogue
    method: GET
    data_selector: catalogue
    params: {}
- name: account
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: data
    params: {}
- name: usage_data
  endpoint:
    path: /api/v1/usage
    method: GET
    data_selector: data
    params: {}
- name: promotion_code
  endpoint:
    path: /promotions
    method: GET
    data_selector: promotions
    params: {}
- name: promotion
  endpoint:
    path: /promotions
    method: POST
    data_selector: promotionDetails
    params: {}
- name: promotion
  endpoint:
    path: /promotions
    method: GET
    data_selector: promotions
    params: {}
- name: hosting_package
  endpoint:
    path: /services/data/vXX.X/sobjects/HostingPackage
    method: GET
    data_selector: records
    params: {}
- name: GA4 recommended events
  endpoint:
    path: /analytics/events
    method: POST
    data_selector: events
    params: {}
- name: Invoice Items
  endpoint:
    path: /reports/invoice_items_export_only
    method: GET
    data_selector: records
- name: affiliate_tiers
  endpoint:
    path: /api/affiliate/tiers
    method: GET
    data_selector: tiers
- name: manual_withdrawal_requests
  endpoint:
    path: /settings/affiliate/general-settings
    method: POST
    data_selector: withdrawal_requests
    params: {}
- name: rapid_order
  endpoint:
    path: /order/_
    method: GET
- name: account_settings
  endpoint:
    path: /account/settings
    method: GET
    data_selector: account_info
    params: {}
- name: payment_methods
  endpoint:
    path: /api/payment_methods
    method: POST
    data_selector: paymentMethods
    params: {}
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
    params: {}
- name: tickets
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: tickets
    params: {}
- name: invoices
  endpoint:
    path: /billing/invoices
    method: GET
    data_selector: invoices
- name: credit_notes
  endpoint:
    path: /billing/credit_notes
    method: GET
    data_selector: credit_notes
- name: account_credit
  endpoint:
    path: /billing/account_credit
    method: GET
    data_selector: account_credit
- name: account_balance
  endpoint:
    path: /billing/account_credit
    method: GET
    data_selector: account_balance
- name: top_up
  endpoint:
    path: /billing/top_up
    method: POST
    data_selector: top_up_status
- name: provision_configurations
  endpoint:
    path: /settings/provision-configurations
    method: POST
    data_selector: data
    params: {}
- name: payment_providers
  endpoint:
    path: /settings/payment-providers
    method: POST
    data_selector: data
    params: {}
- name: products_services
  endpoint:
    path: /settings/products-services
    method: POST
    data_selector: data
    params: {}
- name: .com
  endpoint:
    path: /api/tlds/com
    method: GET
    data_selector: data
    params:
      years: 1-10
      min_length: 2
      max_length: 63
      grace_period: 36
      late_renew: 36
      redemption: 30
      due_date_prior: 0
      manual_renewal_allowed: 'Yes'
      max_registration_years: 10
- name: .net
  endpoint:
    path: /api/tlds/net
    method: GET
    data_selector: data
    params:
      years: 1-10
      min_length: 2
      max_length: 63
      grace_period: 36
      late_renew: 36
      redemption: 30
      due_date_prior: 0
      manual_renewal_allowed: 'Yes'
      max_registration_years: 10
- name: .org
  endpoint:
    path: /api/tlds/org
    method: GET
    data_selector: data
    params:
      years: 1-10
      min_length: 2
      max_length: 63
      grace_period: 36
      late_renew: 36
      redemption: 30
      due_date_prior: 0
      manual_renewal_allowed: 'Yes'
      max_registration_years: 10
- name: .info
  endpoint:
    path: /api/tlds/info
    method: GET
    data_selector: data
    params:
      years: 1-10
      min_length: 2
      max_length: 63
      grace_period: 36
      late_renew: 36
      redemption: 30
      due_date_prior: 0
      manual_renewal_allowed: 'Yes'
      max_registration_years: 10
- name: .biz
  endpoint:
    path: /api/tlds/biz
    method: GET
    data_selector: data
    params:
      years: 1-10
      min_length: 2
      max_length: 63
      grace_period: 36
      late_renew: 36
      redemption: 30
      due_date_prior: 0
      manual_renewal_allowed: 'Yes'
      max_registration_years: 10
- name: .us
  endpoint:
    path: /api/tlds/us
    method: GET
    data_selector: data
    params:
      years: 1-10
      min_length: 2
      max_length: 63
      grace_period: 36
      late_renew: 36
      redemption: 30
      due_date_prior: 0
      manual_renewal_allowed: 'Yes'
      max_registration_years: 10
- name: .co
  endpoint:
    path: /api/tlds/co
    method: GET
    data_selector: data
    params:
      years: 1-5
      min_length: 2
      max_length: 63
      grace_period: 35
      late_renew: 36
      redemption: 15
      due_date_prior: 0
      manual_renewal_allowed: 'Yes'
      max_registration_years: 5
- name: .mx
  endpoint:
    path: /api/tlds/mx
    method: GET
    data_selector: data
    params:
      years: 1-10
      min_length: 2
      max_length: 63
      grace_period: 0
      late_renew: 0
      redemption: 30
      due_date_prior: 0
      manual_renewal_allowed: 'Yes'
      max_registration_years: 10
- name: .es
  endpoint:
    path: /api/tlds/es
    method: GET
    data_selector: data
    params:
      years: 1-10
      min_length: 2
      max_length: 63
      grace_period: 10
      late_renew: 10
      redemption: 0
      due_date_prior: 0
      manual_renewal_allowed: 'Yes'
      max_registration_years: 10
- name: .eu
  endpoint:
    path: /api/tlds/eu
    method: GET
    data_selector: data
    params:
      years: 1-10
      min_length: 2
      max_length: 63
      grace_period: 0
      late_renew: 0
      redemption: 0
      due_date_prior: 0
      manual_renewal_allowed: 'Yes'
      max_registration_years: 10
- name: domain_provider
  endpoint:
    path: /docs/how-to-sell-domain-names
    method: GET
    data_selector: registrars
    params: {}
- name: tld_product
  endpoint:
    path: /docs/how-to-add-a-tld
    method: POST
    data_selector: tld_products
    params: {}
- name: system_default
  endpoint:
    path: /HostControl/Registrars
    method: GET
    data_selector: default_registrar
    params: {}
- name: specific_tlds
  endpoint:
    path: /HostControl/TLDs
    method: GET
    data_selector: specific_registrar
    params: {}
- name: domain_availability_checker
  endpoint:
    path: /widgets/upm-dac.min.js
    method: GET
    data_selector: null
    params: {}
- name: domain_provider
  endpoint:
    path: /api/domain_provider
    method: POST
- name: reseller_info
  endpoint:
    params:
      reseller_id: Your Reseller Id
      api_key: Your API key
- name: domain_names
  endpoint:
    path: /settings/api
    method: GET
- name: domain_provider
  endpoint:
    path: /link
    method: POST
- name: link_account
  endpoint:
    path: /link_account
    method: POST
    data_selector: result
    params: {}
- name: LogicBoxes
  endpoint:
    params:
      reseller_id: your_reseller_id
      api_key: your_api_key
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: domain_updates
  endpoint:
    path: /GetInfo
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: link_account
  endpoint:
    path: /link/account
    method: POST
- name: realtime_register
  endpoint:
    path: /add-domain-provider/realtime-register
    method: POST
    params: {}
- name: domain
  endpoint:
    path: /v1/domains
    method: GET
    data_selector: domains
- name: domain_provider
  endpoint:
    path: /api/domain_provider
    method: POST
    data_selector: provider
    params: {}
- name: domain_provider
  endpoint:
    path: /api/domain-providers/eurodns
    method: POST
    data_selector: provider
    params: {}
- name: domain_provider
  endpoint:
    path: /HostControl/DomainNames
    method: POST
    params: {}
- name: domain_provider
  endpoint:
    path: /domain_provider
    method: POST
    data_selector: provider
    params: {}
- name: domain_provider
  endpoint:
    path: /domain_provider
    method: POST
    data_selector: provider
    params: {}
- name: domain_provider
  endpoint:
    path: /host_control/domain_names
    method: POST
    params:
      provider_name: CentralNic Reseller
      username: your_centralnic_username
      password: your_centralnic_password
- name: domain_provider
  endpoint:
    path: /HostControl/DomainNames
    method: POST
    data_selector: provider
    params: {}
- name: tpp_wholesale
  endpoint:
    path: /api/tpp_wholesale
    method: POST
    data_selector: data
    params:
      account_no: required
      api_login: required
      api_password: required
      api_hostname: optional
- name: NetimIntegration
  endpoint:
    params:
      customer_reference: Customer Reference
      api_password: DAS password
- name: cPanel
  endpoint:
    path: /manage_api_tokens
    method: POST
    data_selector: token
    params: {}
- name: service_plan
  endpoint:
    path: /service-plans
    method: GET
    data_selector: service_plans
    params: {}
- name: provision_configuration
  endpoint:
    path: /web_servers/add_new
    method: POST
- name: user_package
  endpoint:
    path: /account_manager/manage_user_packages
    method: POST
- name: contract_product
  endpoint:
    path: /services/data/vXX.X/sobjects/ContractProduct
    method: GET
    data_selector: records
    params: {}
- name: CWP Settings
  endpoint:
    path: /api/settings
    method: GET
    data_selector: settings
    params: {}
- name: API Manager
  endpoint:
    path: /api/api_manager
    method: GET
    data_selector: api_access
    params: {}
- name: IP Manager
  endpoint:
    path: /api/ip_manager
    method: GET
    data_selector: ip_addresses
    params: {}
- name: Packages
  endpoint:
    path: /api/packages
    method: GET
    data_selector: packages
    params: {}
- name: BasekitCredentials
  endpoint:
    path: /credentials
    method: POST
    data_selector: credentials
- name: provision_configuration
  endpoint:
    path: /api/v1/provision/configuration
    method: POST
- name: product
  endpoint:
    path: /api/v1/product
    method: POST
- name: product_creation
  endpoint:
    path: /docs/how-to-create-products
    method: GET
    data_selector: records
    params: {}
- name: order_management
  endpoint:
    path: /docs/manage-orders
    method: GET
    data_selector: records
    params: {}
- name: Marketgoo Configuration
  endpoint:
    path: /settings/provision-configurations
    method: POST
    params:
      name: Marketgoo
- name: Marketgoo Package
  endpoint:
    path: /settings/products-services
    method: POST
    params:
      billing: recurring
- name: Titan Product
  endpoint:
    path: /settings/provision-configurations
    method: POST
    data_selector: Titan
    params: {}
- name: provision
  endpoint:
    path: /provision
    method: POST
- name: product
  endpoint:
    path: /products
    method: POST
    data_selector: product
    params: {}
- name: webhook_endpoint
  endpoint:
    path: /webhooks
    method: POST
- name: client_events
  endpoint:
    path: /webhook/client/events
    method: POST
    data_selector: events
- name: client_address
  endpoint:
    path: /webhook/client_address
    method: POST
    data_selector: event
    params: {}
- name: contract_product_events
  endpoint:
    path: /webhook/contract_product/events
    method: POST
    data_selector: events
    params: {}
- name: invoice_events
  endpoint:
    path: /webhook/invoice/events
    method: POST
    data_selector: events
    params: {}
- name: invoice_payment
  endpoint:
    path: /webhook/invoice_payment
    method: POST
    data_selector: triggers
    params: {}
- name: provision_result
  endpoint:
    path: /webhook/provision_result
    method: POST
    data_selector: event
    params: {}
- name: ticket_category_triggers
  endpoint:
    path: /webhook/ticket/triggers
    method: GET
    data_selector: triggers
- name: orders
  endpoint:
    path: /api/orders/{id}/convert
    method: POST
    data_selector: ''
    params: {}
- name: payments
  endpoint:
    path: /api/payments
    method: POST
    data_selector: ''
    params: {}
notes:
- Upmind requires no technical experience or payment details.
- It's free to try. There's no need to enter payment details unless you want to continue
  using Upmind past the trial.
- Upmind requires no technical experience or payment details. It's free to try.
- It's free to try.
- By default, two-factor authentication is not enabled.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Admin/Staff can impersonate a client to activate two-factor authentication.
- Click here to review our current plans and pricing.
- Brand settings can be changed at any point.
- Country is used to calculate tax.
- Domain verification may take a few hours.
- Do not include 'https://' in the custom domain name.
- Templates are used to display messages on different parts of the client area.
- Staff Users have access based on the permissions set by the account administrator.
- Unlimited notifications can be sent per hook.
- You can disable notifications for specific actions based on your preferences.
- The Send test feature is a work in progress. It's available for many triggers but
  not all. We aim to expand the feature ASAP.
- When you're using Twig Syntax and the result displays 'Array' it indicates that
  some data is missing, and you might need to add the object.
- Upmind utilizes Amazon SES to send all transactional, event-based, and manual emails,
  including invoices, password resets, and ticket notifications, ensuring excellent
  deliverability.
- Automatically copy emails to external services for reviews or archiving
- Increases brand reputation and customer feedback automatically
- Most core information from WHMCS can be imported into Upmind.
- You need to whitelist the IP addresses shown in the settings.
- 'Ensure you whitelist the following IP addresses on your SupportPal instance: 54.246.211.116,
  52.48.214.19, 34.250.219.217'
- FraudMind scores every order placed by a client out of 100 based on various data
  points.
- Thresholds for blocking or reviewing orders are configurable in the Settings area.
- If they want to add their logo, they'll need to reach out to you, as it must be
  uploaded manually through the admin area.
- Images of products (and your avatar) with a 1:1 aspect ratio (i.e. square pictures)
  work best.
- For avatars, the smallest suggested image size is 128 x 128 pixels.
- For images of products or services, images between 680 x 680 and 2020 x 2080 are
  recommended.
- Smaller image sizes, such as 128 x 128, are not recommended. They may appear grainy.
- The maximum file size is 1 mb.
- Add custom fields to cancellation form to collect detailed reasons for cancellation.
- These custom cancellation questions are shown when your client cancels a product
  or service with immediate effect.
- Client notes and secrets allow you to store freeform notes against a client.
- Account notes are a way to capture and share non-sensitive information.
- Account secrets are a way to share sensitive information and are stored in a digital
  vault using AES-256 encryption.
- Some objects may return nulls in deeply nested fields
- Admins and store staff cannot change the two-factor authentication setting.
- The Vault is a way of sharing information about a client or client service.
- Client numbers don’t affect billing or automation and can be updated anytime.
- If client numbers were turned off and then back on, new clients registered during
  that period won’t have a number. When re-enabled, numbering continues from the last
  assigned number + new clients +1.
- Currently applicable only for pipe emails.
- Only admins and store staff can add delegates to a ticket.
- Upmind immediately removes delegate access to a ticket after the admin or staff
  user clicks the Revoke icon.
- In a world of spoofing, phishing, spam, and bots, it makes sense to add a layer
  of security to your support system.
- With a few clicks, you can protect your clients, reduce time spent on dead-end support
  requests, and allocate scarce resources to real clients who need help.
- To prevent clients from closing unresolved tickets, you can lock the ticket through
  the admin area.
- You can reactivate a cancelled or lapsed contract.
- You can refer to our guide on how clients can raise cancellation requests from their
  client area.
- Select the activation date you prefer for when you want to start using the domain/service;
  note that you cannot choose a date in the past so you likely want to choose today.
- Uses OAuth2 with refresh token — requires setup of connected app in Upmind
- Some objects like Subscription may return nulls in deeply nested fields
- Upmind automatically creates invoices for purchases and subscription payments.
- Admins and staff can customise invoice branding and terms for generation and cancellation.
- Invoice numbers must be incremental, but prefixes can be changed as needed.
- You can reset yearly invoice numbering by starting the invoice number with the year.
- 'Proforma invoices start at #PRF-000001 and convert to a regular invoice upon payment.'
- You can optionally import our system default tax templates, which cover the most
  common tax options.
- Base currency cannot be changed after the first invoice
- Clients can set their preferred payment currency
- Brand level settings apply to all products and clients by default, unless they are
  specifically overridden at the product or contract product level.
- Product level settings override the brand level settings for specific products.
- Contract product level settings override both brand and product level configurations
  for specific clients' contract products.
- Ensure the Invoice PDF Regenerate Trigger is set up under Settings > Actions.
- Invoice consolidation only applies to renewal invoices.
- If consolidation is enabled after there are existing unpaid renewal invoices, those
  invoices will not be automatically consolidated.
- By default, these links expire after 7 days, ensuring controlled and time-limited
  access to sensitive billing information.
- The credit limit operates in the brand's default currency.
- The Credit Limit feature is only available if the multi-currency setting is store
  credit in single currency.
- The selection of a revenue recognition method may vary based on factors like delivery
  of goods or service durations.
- Upmind generates 0 value invoices to bridge gaps between service periods.
- Integrates with over 30 payment gateways
- Supports multi-currency transactions with tax rules
- Admins receive alerts for failed payments.
- To add or remove payment gateways, visit the Payment Providers section.
- Payment data is tokenized, sensitive information is never stored directly on Upmind’s
  servers.
- Automatic payments make billing easier by charging the saved payment methods for
  clients on a set schedule.
- Clients can enable automatic payments by saving a payment method in their portal
  and selecting Allow Automatic Payments.
- Admins can enforce auto-pay for specific products or clients if required.
- Currency selection is only available if the payment gateway supports the chosen
  currency.
- Exchange rates are automatically applied based on your store’s configuration.
- Admins can only change the default card.
- Clients can only change the default card.
- PayPal Legacy Subscriptions (Callbacks) use NVP/SOAP APIs and are maintained for
  legacy clients.
- This method is deprecated for new integrations but remains available for existing
  subscriptions.
- Please make sure this feature is enabled on your PayPal account.
- You may need to contact PayPal or check their guide.
- Manually Adding GoCardless Mandate Tokens in Upmind
- For Stripe customers in India, only INR is supported for non-sole traders due to
  Stripe’s regulations.
- How to Add CoinGate as a Payment Method
- Requires setup of GoCardless account and access token.
- Set Test Mode to No
- Set Stored to No if you do not want to store payment details
- This integration is specifically for European merchants using PayU Europe.
- Supports card payments, bank transfers, and store payments.
- Select the appropriate Test Mode option.
- To obtain your Extended Public Key, refer to the Blockonomics documentation
- To avoid any issues, make sure to use one Extended Public Key for only one Blockonomics
  account.
- The Merchant Account ID lets you specify the currency for processing payments.
- By default, your Braintree account only supports your home currency.
- When setting up MercadoPago in Upmind, select one currency that matches your MercadoPago
  account (e.g., MercadoPago Colombia > COP).
- For multiple currencies, set up each MercadoPago account separately with its own
  credentials and currency (e.g., MercadoPago Argentina > ARS).
- MercadoPago Other Payments redirects customers to a payment page where they can
  make a one-time payment using any option available in your account.
- If test credentials are unavailable, request them via a Paytm support ticket. Some
  merchants may only have live credentials.
- To make this enable as default option, go to `Settings` > `Payment Options` > `Client
  Wallet` > `Force Credit Note on Top Up.`
- If you choose Inherit brand default, you can review the option under `Settings`
  > `Payment Options` > `Client Wallet`
- Requires setup of connected app in Upmind
- Ensure proper API token management
- Split product into separate baskets if possible
- Provision Configurations
- Provisioning options are configurable from Settings > Product Catalogue > Product
  > Provisioning.
- Ensure the package identifier matches the package name in cPanel.
- Reseller privileges and account limits cannot be managed without root access.
- Removing a configuration that is in use can disrupt service automation or cause
  provisioning failures. If dependencies exist, reassign those products to a different
  configuration or disable the products first.
- You should also backup important settings. Before deletion, document or export configuration
  details in case you need to restore or reference them later.
- The Upmind Marketplace is a simple yet effective platform that offers more than
  85 digital products and services.
- Discount code for all items
- Promo code discount applies to multiple products
- On the checkout page in the client area, each selected product must have one mandatory
  product to apply a discount.
- It is only used for recurring payments (subscriptions); it would not be used for
  one-time payments.
- You'll need Google Measurement ID and Google Measurement API Secret.
- Use Google Tag Manager for client-side tracking.
- Ids within Upmind are stored as uuid strings.
- Invoices and credits do not leak; there will always be a credit note for a cancelled
  invoice.
- To export reports from Upmind to Amazon S3, enable external storage and schedule
  report generation.
- Create unique affiliate programs - called Tiers - for specific products, triggers,
  or people.
- Requires setup of connected app in api
- Using this route will always create a NEW basket.
- If ANY error is encountered (incorrect config, malformed query etc) the rapid order
  attempt will fail silently.
- Clients can manage their password and address info.
- Clients can enable two-factor authentication.
- Clients can view invoices, credit notes, and account credit.
- Upmind's client area is not designed to replace your frontend sales website.
- We recommend that you run Upmind on a domain like my.domain.com or clientarea.domain.com.
- You can select the following options when a client logs in to the dashboard.
- Uses a custom domain for Upmind instance
- Requires cPanel/WHM account for provisioning
- Upmind is provider agnostic and supports multiple integrations with 26+ domain providers
- Late renew periods and redemption periods can vary by registrar and registry.
- To make the domain checker work, you need to add your domain to the list of domains
  under Settings -> Domains.
- 'You will need to whitelist the following IP addresses: 91.240.229.1, 91.240.229.2,
  194.147.95.70'
- 'You need to whitelist specific IP addresses: 34.250.219.217, 54.246.211.116, 52.48.214.19.'
- Nominet is the official registry of the .UK domain name.
- You will need an IPS tag and Nominet account password to link your account.
- Some objects like Contact may return nulls in deeply nested fields
- ConnectReseller implementation does not support polling -- this means we do not
  get automatic updates on domain transfers, expiries, etc.
- Username and Password required to enable API access.
- Make sure the API key is not set as Read-Only. The Read-Only checkbox must be unchecked,
  or the connection won’t work.
- You need an API Key and password from your InternetBS account to link.
- The API Key can be generated in your InternetBS account under 'My Account'.
- Provider name will not be visible to clients. Recommended to use 'EURid'.
- 'For guidance on where to find the required credentials, refer to Page 8 – Section
  1.0: Authentication.'
- If you're new to Netim, you may want to contact their support to become a reseller,
  and they can assist you in generating the API Key.
- Whitelisted Upmind's outgoing IP addresses for API access to Moniker account.
- You need to generate a General API Key from 20i.
- When creating an access token, grant Super admin permissions. It is recommended
  not to set an expiry date.
- Plesk calls packages Service Plans.
- The service plan name here is 'PlanOne'.
- To integrate with Upmind, you'll need an API Key and API Secret.
- You'll need an Auth Key and Brand ID.
- Create a Personal Access Token with Never expiry and All Read/Write access in Linode
  dashboard
- Requires API Key and API Password from Virtualizor dashboard.
- You will need to create an API/access token in your VirtFusion dashboard to do this.
- Orders for manually provisioned servers remain in 'Awaiting Activation' status until
  activated by staff.
- Upmind is free and easy to try
- Upmind is currently in beta
- Webhook requests time out after 30 seconds. The best practice is to queue incoming
  events first and then process them asynchronously using tools such as Redis, RabbitMQ,
  or SQS to avoid timeout errors.
- Sync service state with third-party provisioning systems and alert on failures to
  DevOps or support teams.
- store_on_payment and store_on_payment_auto_payment flags are passed to indicate
  intent to save and re-use payment methods.
- API-first, meaning every feature in the system is accessible through its API.
- You must keep your login details secure.
- You must notify us immediately of any unauthorised use of your account or security
  breach.
- You are responsible for your relationship with customers.
- You must ensure that the content and materials on your website contain material
  that you have created or have permission to use.
- At Upmind we do not have access to your customer data and we do not collect any
  data on your own Upmind instance.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Ensure API credentials are correct.'
- '403 Forbidden: Check if the API role has the required permissions.'
- 'CLIENT_BLOCKED: The client''s order has been blocked due to past history.'
- 'COUNTRY_BLOCKED: Orders from specific countries are not allowed.'
- 'IP_BLOCKED: Orders from specific IP addresses are not allowed.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'INVALID_PAYMENT_METHOD: Check payment method details'
- 'TRANSACTION_FAILED: Verify transaction status or try again'
- '401 Unauthorized: Check your access token.'
- '404 Not Found: Verify the mandate ID.'
- '401 Unauthorized: Check API Key'
- '403 Forbidden: Insufficient permissions'
- '404 Not Found: Resource does not exist'
- 'Error Create Account: Forbidden Access Denied: Please ensure the hostname, username,
  and API key are entered correctly in the Settings → Provision configurations.'
- 'Error If "xxxx" is not a valid package name, at /usr/local/Whostmg: You need to
  create a package in your Web Host Manager interface, and this needs to match with
  the package identifier you enter in Settings → Product Catalogue → Product → Provisioning
  → Package Identifier in Upmind.'
- 'Error: You cannot create a session for the user ''xxx'' because they do not exist:
  The cPanel account username is incorrect or the account does not exist on the server.'
- '401 Authentication Failure: Return HTTP 401; the event remains available in logs
  for review.'
- '500 Other Failures: Return HTTP 500. Upmind logs unsuccessful attempts for troubleshooting.'
- You may terminate your contract with us by cancelling the service in advance of
  the renewal date.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://upmind.com
  headers:
    Accept: application/json
source_metadata: null
