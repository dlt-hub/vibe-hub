resources:
- name: map_events
  endpoint:
    path: /modules/map_events
    method: GET
    data_selector: records
- name: db_out
  endpoint:
    path: /modules/db_out
    method: GET
    data_selector: records
- name: SQL Database
  endpoint:
    path: /how-to-guides/sinks/sql/sql-sink.md
    method: GET
- name: Direct Streaming
  endpoint:
    path: /how-to-guides/sinks/stream
    method: GET
- name: PubSub
  endpoint:
    path: /how-to-guides/sinks/pubsub
    method: GET
- name: Community Sinks
  endpoint:
    path: /how-to-guides/sinks/community-sinks
    method: GET
- name: db_out
  endpoint:
    path: /how-to-guides/sinks/sql/db_out
    method: GET
    data_selector: records
    params: {}
- name: relational_mappings
  endpoint:
    path: /how-to-guides/sinks/sql/relational-mappings
    method: GET
    data_selector: records
    params: {}
- name: Publish
  endpoint:
    path: /pubsub/v1/publish
    method: POST
    data_selector: data
    params: {}
- name: Relational Mappings
  endpoint:
    path: /how-to-guides/sinks/sql/relational-mappings
    method: GET
    data_selector: records
    params: {}
- name: Database Changes
  endpoint:
    path: /how-to-guides/sinks/sql/db_out
    method: GET
    data_selector: records
    params: {}
- name: Publish
  endpoint:
    path: /sf.substreams.sink.pubsub.v1.Publish
    method: POST
    data_selector: records
- name: jsonl_out
  endpoint:
    path: /substreams.yaml
    method: POST
    data_selector: lines
    params:
      block_range: ''
      state_store: ./localdata/working/state.yaml
      blocks_per_file: 10000
      buffer_max_size: 67108864
- name: jsonl_out
  endpoint:
    path: /substreams.yaml
    method: GET
    data_selector: lines
    params: {}
- name: Ethereum Mainnet
  endpoint:
    path: /chains/ethereum/mainnet
    method: GET
- name: Ethereum Sepolia
  endpoint:
    path: /chains/ethereum/sepolia
    method: GET
- name: Solana Mainnet-Beta
  endpoint:
    path: /chains/solana/mainnet-beta
    method: GET
- name: Ethereum Mainnet
  endpoint:
    path: /chains/ethereum/mainnet
    method: GET
- name: Ethereum Sepolia
  endpoint:
    path: /chains/ethereum/sepolia
    method: GET
- name: Ethereum Holesky
  endpoint:
    path: /chains/ethereum/holesky
    method: GET
- name: Polygon Mainnet
  endpoint:
    path: /chains/polygon/mainnet
    method: GET
- name: Mumbai Testnet
  endpoint:
    path: /chains/polygon/mumbai
    method: GET
- name: Arbitrum One
  endpoint:
    path: /chains/arbitrum/one
    method: GET
- name: BNB
  endpoint:
    path: /chains/bnb
    method: GET
- name: Optimism
  endpoint:
    path: /chains/optimism/mainnet
    method: GET
- name: Avalanche C-Chain Mainnet
  endpoint:
    path: /chains/avalanche/mainnet
    method: GET
- name: NEAR Mainnet
  endpoint:
    path: /chains/near/mainnet
    method: GET
- name: Solana Mainnet-Beta
  endpoint:
    path: /chains/solana/mainnet
    method: GET
- name: TRON Native
  endpoint:
    path: /chains/tron/native
    method: GET
- name: Bitcoin Mainnet
  endpoint:
    path: /chains/bitcoin/mainnet
    method: GET
- name: Block
  endpoint:
    path: /sf/ethereum/type/v2/Block
    method: GET
    data_selector: ver
    params: {}
- name: substreams_project
  endpoint:
    path: /substreams/project
    method: POST
    data_selector: data
    params: {}
- name: spl_transfers
  endpoint:
    path: /substreams.yaml
    method: GET
    data_selector: updates
- name: transfer_store
  endpoint:
    path: /substreams.yaml
    method: GET
    data_selector: transfers
- name: map_block
  endpoint:
    path: /modules/map_block
    method: GET
    data_selector: records
- name: spl_transfers
  endpoint:
    path: /substreams.yaml
    method: GET
- name: map_block
  endpoint:
    path: /modules/map_block
    method: GET
    data_selector: records
- name: PostgreSQL
  endpoint:
    path: /postgres
    method: GET
- name: ClickHouse
  endpoint:
    path: /clickhouse
    method: GET
- name: sink
  endpoint:
    path: /substreams.yaml
    method: POST
- name: PostgreSQL
  endpoint:
    path: postgres://<user>:<password>@<host>:<port>/<database>?<options>
    method: GET
- name: ClickHouse Cloud
  endpoint:
    path: clickhouse://default:password@instance-id.clickhouse.cloud:9440/default?secure=true
    method: GET
- name: ClickHouse with authentication
  endpoint:
    path: clickhouse://myuser:mypassword@localhost:9000/mydatabase
    method: GET
- name: PostgreSQL with SSL disabled
  endpoint:
    path: postgres://myuser:mypassword@localhost:5432/mydatabase?sslmode=disable
    method: GET
- name: database
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: PostgreSQL
  endpoint:
    path: postgres://<user>:<password>@<host>:<port>/<database>?<options>
    method: GET
- name: ClickHouse
  endpoint:
    path: clickhouse://<user>:<password>@<host>:<port>/<database>?<options>
    method: GET
- name: ethereum_mainnet
  endpoint:
    path: /chains/ethereum/mainnet
    method: GET
- name: ethereum_sepolia
  endpoint:
    path: /chains/ethereum/sepolia
    method: GET
- name: ethereum_holesky
  endpoint:
    path: /chains/ethereum/holesky
    method: GET
- name: polygon_mainnet
  endpoint:
    path: /chains/polygon/mainnet
    method: GET
- name: mumbai_testnet
  endpoint:
    path: /chains/polygon/mumbai
    method: GET
- name: arbitrum_one
  endpoint:
    path: /chains/arbitrum/one
    method: GET
- name: bnb
  endpoint:
    path: /chains/bnb
    method: GET
- name: optimism
  endpoint:
    path: /chains/optimism
    method: GET
- name: avalanche_c_chain_mainnet
  endpoint:
    path: /chains/avalanche/c-chain
    method: GET
- name: near_mainnet
  endpoint:
    path: /chains/near/mainnet
    method: GET
- name: near_testnet
  endpoint:
    path: /chains/near/testnet
    method: GET
- name: solana_mainnet_beta
  endpoint:
    path: /chains/solana/mainnet-beta
    method: GET
- name: solana_devnet
  endpoint:
    path: /chains/solana/devnet
    method: GET
- name: tron_native
  endpoint:
    path: /chains/tron/native
    method: GET
- name: bitcoin_mainnet
  endpoint:
    path: /chains/bitcoin/mainnet
    method: GET
- name: injective_mainnet
  endpoint:
    path: /chains/injective/mainnet
    method: GET
- name: starknet_mainnet
  endpoint:
    path: /chains/starknet/mainnet
    method: GET
- name: Ethereum Mainnet
  endpoint:
    path: /chains/ethereum/mainnet
    method: GET
- name: Ethereum Sepolia
  endpoint:
    path: /chains/ethereum/sepolia
    method: GET
- name: BNB Mainnet
  endpoint:
    path: /chains/bnb/mainnet
    method: GET
notes:
- Substreams allows extraction of data from several blockchains (Solana, Ethereum,
  Polygon, BNB).
- You can apply custom transformations to the data.
- CLI installation is supported only on Linux and macOS.
- If you're using Windows, consider using the DevContainer environment.
- The CLI installation is supported only on Linux and macOS.
- You can automatically send the data to a SQL data by using the SQL sink or through
  PubSub.
- The first streamable block for Stellar on Substreams is currently 55,411,000.
- The stellar-transactions-operations foundational module only decodes and indexes
  SOME operations.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Ensure you have the wasm32-unknown-unknown target installed on your Rust installation
- Substreams requires authentication to ensure secure and controlled access to providers.
- You need to generate a JWT token from The Graph Market to authenticate your Substreams
  execution.
- Some of the sinks are officially supported by StreamingFast (i.e. active support
  is provided), but other sinks are community-driven and support can't be guaranteed.
- Currently insert-only for relational mappings.
- In ClickHouse, reorgs are currently supported with delay.
- The sink tool writes bundles to disk when it has seen 10,000 blocks.
- You must ensure that the state store file is saved to a persistent location to avoid
  data loss.
- This documentation exists to assist you in understanding and beginning to use the
  StreamingFast substreams-sink-files tool.
- You must have the Substreams CLI installed.
- You must have a Substreams package (`.spkg`) that you want to publish.
- The substreams-sink-files tool writes bundles to disk when it has seen 10,000 blocks.
- Protobufs define the input and output for modules.
- The use of fully qualified protobuf file paths reduces the risk of naming conflicts
  when other community members build their Substreams packages.
- Currently, the only programming language supported to build Substreams is Rust.
- This version contains several known issues, which are described in the Protobuf
  definition itself (next to the corresponding field affected).
- The user must persist the cursor to handle disconnections.
- This version is current in place for all EVM chains, with the exception of Optimism
  from block 0 to the last pre-Prague hard fork block.
- The Substreams Dev Container is a tool to help you build your first project.
- Ensure Docker and VS Code are up-to-date.
- If you run into any problems within the Dev Container, use the help command to access
  trouble shooting tools.
- A Substreams package is a ready-to-consume binary file, which contains all the necessary
  dependencies (manifest, modules, protobufs...).
- Commands that accept manifest files support reading from standard input by specifying
  '-' as the manifest path.
- Substreams package is a ready-to-consume binary file, which contains all the necessary
  dependencies (manifest, modules, protobufs...)
- The standard file extension for a Substreams package is .spkg
- The server's execution schedule is a list of pairs of (module, range), where range
  contains N blocks.
- Forward parallel execution only occurs in production mode.
- The server currently has a limited amount of concurrency.
- In practice, the number of concurrent workers depends on the capabilities of the
  service provider.
- Requires setup of connected app in api
- SSL connection mode (`disable`, `require`, `verify-ca`, `verify-full`)
- Select a particular schema within the database
- Add ?secure=true to your DSN for ClickHouse Cloud
- Ensure you're using port 9440 for encrypted connections
- 'Primary keys required: All tables must have primary keys for re-org handling to
  work'
- 'Clickhouse delay: The ClickHouse sink supports re-org handling but with a slight
  delay compared to PostgreSQL'
- 'Performance impact: History tracking adds overhead to write operations'
- 'Storage growth: History table grows with write volume until cleanup occurs'
- the `--common-first-streamable-block` must be the lowest block available on disk,
  otherwise the server will fail to start.
- 'if you need to do `eth_calls` with the Ethereum, you can add: `--substreams-rpc-endpoints
  https://example.com/json-rpc/somekeysometimes`'
- the `--substreams-state-bundle-size=10` flag will write smaller stores snapshot,
  suitable for dev
- Ensure username and password are URL-encoded if they contain special characters
- Some objects like Contact may return nulls in deeply nested fields
- Running Substreams locally provides Indexers with the steps to test the Substreams
  data service in their own production environment.
- the --common-first-streamable-block must be the lowest block available on disk,
  otherwise the server will fail to start.
- 'if you need to do eth_calls with the Ethereum, you can add: --substreams-rpc-endpoints
  https://example.com/json-rpc/somekeysometimes'
- the --substreams-state-bundle-size=10 flag will write smaller stores snapshot, suitable
  for dev
- When using the `substreams gui` command, use the `L` key to toggle logs.
- Substreams is an open-source project and there are free (albeit rate-limited) endpoints
  available.
- Fixed error-passing between tier2 and tier1 (tier1 will not retry sending requests
  that fail deterministicly to tier2)
- Tier1 will now schedule a single job on tier2, quickly ramping up to the requested
  number of workers after 4 seconds of delay, to catch early exceptions
- '"store became too big" is now considered a deterministic error and returns code
  "InvalidArgument"'
- Added Tracing capabilities, using https://github.com/streamingfast/sf-tracing. See
  repository for details on how to enable.
- Endpoints serve protobuf models specific to the underlying blockchain protocol and
  must match the source field for the module.
errors:
- Latency of the last available bundle can be delayed by around 10,000 blocks.
- When running locally, make sure to verify that all Docker containers are healthy
  by running the `dev-status` command.
- When running locally, make sure to verify that all Docker containers are healthy
  by running the dev-status command.
- If you input the wrong start-block while generating your project, navigate to the
  substreams.yaml to change the block number, then re-run substreams build.
- 'ClickHouse "read: EOF" error: Add ?secure=true to your DSN for ClickHouse Cloud'
- 'PostgreSQL connection refused: Verify the port (usually 5432)'
- 'Authentication failures: Ensure username and password are URL-encoded if they contain
  special characters'
- 'Missing primary key error: Ensure all tables have primary keys defined and that
  substreams output matches the schema.'
- 'Performance issues: Consider adjusting flush intervals or using undo-buffer-size
  for high-throughput scenarios.'
- 'History table growth: Monitor cleanup operations and finality progression to ensure
  proper pruning.'
- 'ClickHouse ''read: EOF'' error: Add ''?secure=true'' to your DSN for ClickHouse
  Cloud'
- 'PostgreSQL connection refused: Verify the port (usually ''5432'')'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'InvalidArgument: store became too big'
- 'InvalidArgument: ''store became too big'' is now considered a deterministic error'
auth_info:
  mentioned_objects: []
client:
  base_url: https://mainnet.eth.streamingfast.io:443
  headers:
    Accept: application/json
source_metadata: null
