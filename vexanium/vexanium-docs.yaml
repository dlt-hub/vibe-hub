resources:
- name: wallet
  endpoint:
    path: /wallet
    method: POST
    data_selector: wallets
    params: {}
- name: import_key
  endpoint:
    path: /wallet/import
    method: POST
    data_selector: import_key
    params: {}
- name: wallet_create
  endpoint:
    path: /wallet/create
    method: POST
    data_selector: wallet
    params:
      to_console: true
- name: wallet_open
  endpoint:
    path: /wallet/open
    method: POST
    data_selector: wallet
    params: {}
- name: wallet_unlock
  endpoint:
    path: /wallet/unlock
    method: POST
    data_selector: wallet
    params: {}
- name: wallet_create_key
  endpoint:
    path: /wallet/create_key
    method: POST
    data_selector: key
    params: {}
- name: wallet_import
  endpoint:
    path: /wallet/import
    method: POST
    data_selector: import
    params:
      private_key: 5JjMtcY2j264vChLogZk3Y7sySSC4z3hWjBTvwLhJoqXv6YP4X3
- name: wallet_create
  endpoint:
    path: /v1/wallet/create
    method: GET
- name: wallet_create_key
  endpoint:
    path: /v1/wallet/create_key
    method: GET
- name: wallet_get_public_keys
  endpoint:
    path: /v1/wallet/get_public_keys
    method: GET
- name: wallet_import_key
  endpoint:
    path: /v1/wallet/import_key
    method: GET
- name: wallet_list_keys
  endpoint:
    path: /v1/wallet/list_keys
    method: GET
- name: wallet_list_wallets
  endpoint:
    path: /v1/wallet/list_wallets
    method: GET
- name: wallet_lock
  endpoint:
    path: /v1/wallet/lock
    method: GET
- name: wallet_lock_all
  endpoint:
    path: /v1/wallet/lock_all
    method: GET
- name: wallet_open
  endpoint:
    path: /v1/wallet/open
    method: GET
- name: wallet_remove_key
  endpoint:
    path: /v1/wallet/remove_key
    method: GET
- name: wallet_set_timeout
  endpoint:
    path: /v1/wallet/set_timeout
    method: GET
- name: wallet_sign_digest
  endpoint:
    path: /v1/wallet/sign_digest
    method: GET
- name: wallet_sign_transaction
  endpoint:
    path: /v1/wallet/sign_transaction
    method: GET
- name: wallet_unlock
  endpoint:
    path: /v1/wallet/unlock
    method: GET
- name: node_get_supported_apis
  endpoint:
    path: /v1/node/get_supported_apis
    method: GET
- name: wallet
  endpoint:
    path: /v1/wallet/create
    method: POST
- name: wallet_create_key
  endpoint:
    path: /v1/wallet/create_key
    method: POST
- name: wallet_get_public_keys
  endpoint:
    path: /v1/wallet/get_public_keys
    method: POST
- name: wallet_import_key
  endpoint:
    path: /v1/wallet/import_key
    method: POST
- name: wallet_list_keys
  endpoint:
    path: /v1/wallet/list_keys
    method: POST
- name: wallet_list_wallets
  endpoint:
    path: /v1/wallet/list_wallets
    method: POST
- name: wallet_lock
  endpoint:
    path: /v1/wallet/lock
    method: POST
- name: wallet_lock_all
  endpoint:
    path: /v1/wallet/lock_all
    method: POST
- name: wallet_open
  endpoint:
    path: /v1/wallet/open
    method: POST
- name: wallet_remove_key
  endpoint:
    path: /v1/wallet/remove_key
    method: POST
- name: wallet_set_timeout
  endpoint:
    path: /v1/wallet/set_timeout
    method: POST
- name: wallet_sign_digest
  endpoint:
    path: /v1/wallet/sign_digest
    method: POST
- name: wallet_sign_transaction
  endpoint:
    path: /v1/wallet/sign_transaction
    method: POST
- name: wallet_unlock
  endpoint:
    path: /v1/wallet/unlock
    method: POST
- name: node_get_supported_apis
  endpoint:
    path: /v1/node/get_supported_apis
    method: POST
- name: get_info
  endpoint:
    path: /v1/chain/get_info
    method: GET
    data_selector: result
    params: {}
- name: get_info
  endpoint:
    path: /v1/chain/get_info
    method: GET
    data_selector: result
    params: {}
- name: create_development_account
  endpoint:
    path: /system/newaccount
    method: POST
    data_selector: transaction
    params:
      transfer: true
      buy_ram: 0.0500 VEX
      stake_net: 0.0000 VEX
      stake_cpu: 0.0001 VEX
- name: create_account
  endpoint:
    path: /system/newaccount
    method: POST
    data_selector: executed transaction
    params:
      transfer: true
      buy_ram: 0.0500 VEX
      stake_net: 0.0000 VEX
      stake_cpu: 0.0001 VEX
- name: new_account
  endpoint:
    path: /system/newaccount
    method: POST
    data_selector: executed transaction
    params:
      incremental: created
- name: hello
  endpoint:
    path: /push/action/hello/hi
    method: POST
    data_selector: executed transaction
    params: {}
- name: new_account
  endpoint:
    path: /system/newaccount
    method: POST
    data_selector: transaction
    params:
      incremental: created_at
- name: hello
  endpoint:
    path: /push/action/hello/hi
    method: POST
    data_selector: transaction
    params: {}
- name: hello
  endpoint:
    path: /push/action/hello/hi
    method: POST
    data_selector: executed transaction
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: records
    params: {}
- name: hello
  endpoint:
    path: /reference/smart-contract/c++-smart-contract/hello-world
    method: GET
    data_selector: contract
    params: {}
- name: create_account
  endpoint:
    path: /create_account
    method: POST
    data_selector: account_creation
    params: {}
- name: deploy_contract
  endpoint:
    path: /deploy_contract
    method: POST
    data_selector: contract_deployment
    params: {}
- name: issue_tokens
  endpoint:
    path: /issue_tokens
    method: POST
    data_selector: token_issue
    params: {}
- name: transfer_tokens
  endpoint:
    path: /transfer_tokens
    method: POST
    data_selector: token_transfer
    params: {}
- name: create_account
  endpoint:
    path: /create_account
    method: POST
    data_selector: result
    params: {}
- name: compile_contract
  endpoint:
    path: /compile_contract
    method: POST
    data_selector: result
    params: {}
- name: deploy_contract
  endpoint:
    path: /deploy_contract
    method: POST
    data_selector: result
    params: {}
- name: create_token
  endpoint:
    path: /create_token
    method: POST
    data_selector: result
    params: {}
- name: issue_tokens
  endpoint:
    path: /issue_tokens
    method: POST
    data_selector: result
    params: {}
- name: transfer_tokens
  endpoint:
    path: /transfer_tokens
    method: POST
    data_selector: result
    params: {}
- name: eosio.token
  endpoint:
    path: /eosio.token
    method: POST
    data_selector: actions
    params: {}
- name: token
  endpoint:
    path: /eosio.token
    method: POST
    data_selector: actions
    params: {}
- name: create_token
  endpoint:
    path: /create
    method: POST
    data_selector: transaction
    params: {}
- name: issue_tokens
  endpoint:
    path: /issue
    method: POST
    data_selector: transaction
    params: {}
- name: eosio.token
  endpoint:
    path: /reference-contracts/contracts/eosio.token
    method: POST
    data_selector: actions
    params: {}
- name: create_account
  endpoint:
    path: /v1/accounts
    method: POST
    data_selector: account
    params: {}
- name: deploy_contract
  endpoint:
    path: /v1/contracts/deploy
    method: POST
    data_selector: contract
    params: {}
- name: create_token
  endpoint:
    path: /v1/tokens/create
    method: POST
    data_selector: token
    params: {}
- name: issue_tokens
  endpoint:
    path: /v1/tokens/issue
    method: POST
    data_selector: issue
    params: {}
- name: transfer_tokens
  endpoint:
    path: /v1/tokens/transfer
    method: POST
    data_selector: transfer
    params: {}
- name: token_creation
  endpoint:
    path: /api/token/create
    method: POST
    data_selector: transaction
    params: {}
- name: token_issue
  endpoint:
    path: /api/token/issue
    method: POST
    data_selector: transaction
    params: {}
- name: token_transfer
  endpoint:
    path: /api/token/transfer
    method: POST
    data_selector: transaction
    params: {}
- name: create_token
  endpoint:
    path: /create
    method: POST
    data_selector: result
    params: {}
- name: issue_tokens
  endpoint:
    path: /issue
    method: POST
    data_selector: result
    params: {}
- name: transfer_tokens
  endpoint:
    path: /transfer
    method: POST
    data_selector: result
    params: {}
- name: issue_tokens
  endpoint:
    path: /push/action/eosio.token/issue
    method: POST
    data_selector: records
- name: create_token
  endpoint:
    path: /push/action/eosio.token/create
    method: POST
    data_selector: records
- name: transfer_tokens
  endpoint:
    path: /push/action/eosio.token/transfer
    method: POST
    data_selector: records
- name: transfer
  endpoint:
    path: /eosio.token/transfer
    method: POST
    data_selector: executed transaction
    params: {}
- name: issue
  endpoint:
    path: /eosio.token/issue
    method: POST
    data_selector: executed transaction
    params: {}
- name: create
  endpoint:
    path: /eosio.token/create
    method: POST
    data_selector: executed transaction
    params: {}
- name: abi_file
  endpoint:
    path: /create-abi-file
    method: POST
    data_selector: abi
    params: {}
- name: transfer
  endpoint:
    path: /v1/transfer
    method: POST
    data_selector: transfer
    params: {}
- name: create
  endpoint:
    path: /v1/create
    method: POST
    data_selector: create
    params: {}
- name: issue
  endpoint:
    path: /v1/issue
    method: POST
    data_selector: issue
    params: {}
- name: actions
  endpoint:
    path: /actions
    method: GET
    data_selector: actions
    params: {}
- name: tables
  endpoint:
    path: /tables
    method: GET
    data_selector: tables
    params: {}
- name: addressbook
  endpoint:
    path: /addressbook
    method: POST
    data_selector: rows
- name: actions
  endpoint:
    path: /actions
    method: GET
    data_selector: actions
- name: tables
  endpoint:
    path: /tables
    method: GET
    data_selector: tables
- name: upsert
  endpoint:
    path: /upsert
    method: POST
    data_selector: records
- name: erase
  endpoint:
    path: /erase
    method: POST
    data_selector: records
- name: addressbook
  endpoint:
    path: /addressbook
    method: POST
    data_selector: rows
- name: addressbook
  endpoint:
    path: /addressbook
    method: POST
    data_selector: records
    params: {}
- name: person
  endpoint:
    path: /addressbook/person
    method: POST
    data_selector: records
    params: {}
- name: person
  endpoint:
    path: /services/data/vXX.X/sobjects/Person
    method: GET
    data_selector: records
    params: {}
- name: addressbook
  endpoint:
    path: /addressbook
    method: POST
    data_selector: records
- name: addressbook
  endpoint:
    path: /addressbook
    method: POST
    data_selector: rows
    params: {}
- name: people
  endpoint:
    path: /services/data/vXX.X/sobjects/people
    method: GET
    data_selector: records
    params: {}
- name: addressbook
  endpoint:
    path: /addressbook
    method: POST
    data_selector: records
    params: {}
- name: addressbook
  endpoint:
    path: /addressbook
    method: push action
    data_selector: rows
    params: {}
- name: addressbook
  endpoint:
    path: /addressbook
    method: POST
    data_selector: records
- name: people
  endpoint:
    path: /services/data/vXX.X/sobjects/people
    method: GET
    data_selector: rows
    params: {}
- name: people
  endpoint:
    path: /addressbook/people
    method: GET
    data_selector: rows
- name: addressbook
  endpoint:
    path: /addressbook
    method: POST
    data_selector: rows
    params: {}
- name: addressbook
  endpoint:
    path: /addressbook
    method: POST
    data_selector: rows
- name: people
  endpoint:
    path: /get/table/addressbook/addressbook/people
    method: GET
    data_selector: rows
    params:
      lower: alice
      limit: 1
- name: addressbook
  endpoint:
    path: /addressbook
    method: POST
    data_selector: rows
    params: {}
- name: person
  endpoint:
    path: /addressbook
    method: POST
    data_selector: people
    params: {}
- name: addressbook
  endpoint:
    path: /addressbook
    method: POST
    data_selector: data
    params: {}
- name: addressbook
  endpoint:
    path: /addressbook
    method: POST
    data_selector: records
- name: upsert
  endpoint:
    path: /upsert
    method: POST
    data_selector: none
- name: erase
  endpoint:
    path: /erase
    method: POST
    data_selector: none
- name: notify
  endpoint:
    path: /notify
    method: POST
    data_selector: none
- name: addressbook
  endpoint:
    path: /v1/addressbook
    method: POST
    data_selector: result
    params: {}
- name: addressbook
  endpoint:
    path: /addressbook
    method: POST
    data_selector: data
    params: {}
- name: person
  endpoint:
    path: /services/data/vXX.X/sobjects/Person
    method: GET
    data_selector: records
    params: {}
- name: abcounter
  endpoint:
    path: /abcounter
    method: POST
    data_selector: counts
    params: {}
- name: addressbook
  endpoint:
    path: /addressbook
    method: POST
    data_selector: records
    params: {}
- name: addressbook
  endpoint:
    path: /contracts/addressbook
    method: POST
    data_selector: rows
    params: {}
- name: abcounter
  endpoint:
    path: /contracts/abcounter
    method: POST
    data_selector: rows
    params: {}
- name: upsert
  endpoint:
    path: /addressbook/upsert
    method: POST
    data_selector: records
- name: erase
  endpoint:
    path: /addressbook/erase
    method: POST
    data_selector: records
- name: notify
  endpoint:
    path: /addressbook/notify
    method: POST
    data_selector: records
- name: count
  endpoint:
    path: /abcounter/count
    method: POST
    data_selector: records
- name: addressbook
  endpoint:
    path: /addressbook
    method: POST
    data_selector: records
    params: {}
- name: addressbook_upsert
  endpoint:
    path: /addressbook/upsert
    method: POST
    data_selector: records
    params: {}
- name: addressbook_erase
  endpoint:
    path: /addressbook/erase
    method: POST
    data_selector: records
    params: {}
- name: addressbook_notify
  endpoint:
    path: /addressbook/notify
    method: POST
    data_selector: records
    params: {}
- name: abcounter_count
  endpoint:
    path: /abcounter/count
    method: POST
    data_selector: records
    params: {}
- name: hodl
  endpoint:
    path: /hodl
    method: POST
    data_selector: records
    params: {}
- name: addressbook
  endpoint:
    path: /addressbook/actions
    method: POST
    data_selector: records
- name: hodl
  endpoint:
    path: /getting-started/smart-contract-development/payable-actions
    method: GET
    data_selector: content
- name: party
  endpoint:
    path: /hodl/party
    method: POST
    data_selector: hodler
    params: {}
- name: deposit
  endpoint:
    path: /hodl/deposit
    method: POST
    data_selector: hodler
    params: {}
- name: party
  endpoint:
    path: /party
    method: POST
    data_selector: hodler
- name: deposit
  endpoint:
    path: /deposit
    method: POST
    data_selector: hodler
- name: custom_permission
  endpoint:
    path: /v1/permissions/custom
    method: POST
    data_selector: data
    params: {}
- name: link_authorization
  endpoint:
    path: /v1/permissions/link
    method: POST
    data_selector: data
    params: {}
- name: custom_permission
  endpoint:
    path: /linking/custom/permission
    method: POST
    data_selector: results
- name: custom_permission
  endpoint:
    path: /custom_permission
    method: POST
    data_selector: created_permissions
- name: link_authorization
  endpoint:
    path: /link_authorization
    method: POST
    data_selector: linked_authorizations
- name: block_producers
  endpoint:
    path: /block/producers
    method: GET
    data_selector: producers
    params: {}
- name: consensus_models
  endpoint:
    path: /consensus/models
    method: GET
    data_selector: models
    params: {}
- name: transaction
  endpoint:
    path: /v1/transaction
    method: POST
    data_selector: transactions
    params: {}
- name: chain_controller
  endpoint:
    path: /protocol/network_peer_protocol#22-chain-controller
    method: GET
    data_selector: signals
- name: net_plugin
  endpoint:
    path: /protocol/network_peer_protocol#23-net-plugin
    method: GET
    data_selector: components
- name: account
  endpoint:
    path: /vexanium/accounts
    method: GET
    data_selector: accounts
- name: permissions
  endpoint:
    path: /vexanium/permissions
    method: GET
    data_selector: permissions
- name: active_block_producers
  endpoint:
    path: /v1/active_block_producers
    method: GET
- name: get_actions
  endpoint:
    path: /v1/history/get_actions
    method: POST
- name: get_transaction
  endpoint:
    path: /v1/history/get_transaction
    method: POST
- name: get_transaction_new
  endpoint:
    path: /v1/history/get_transaction
    method: GET
- name: get_actions_new
  endpoint:
    path: /v1/history/get_actions
    method: GET
- name: get_actions
  endpoint:
    path: /v1/history/get_actions
    method: POST
- name: get_transaction
  endpoint:
    path: /v1/history/get_transaction
    method: POST
- name: get_transaction_new
  endpoint:
    path: /v1/history/get_transaction
    method: GET
- name: get_actions_new
  endpoint:
    path: /v1/history/get_actions
    method: GET
- name: eosio
  endpoint:
    path: /api/v1/eosio
    method: GET
- name: ethereum
  endpoint:
    path: /api/v1/ethereum
    method: GET
notes:
- The VEXANIUM Contract Development Toolkit, CDT for short, is a collection of tools
  related to smart contract compilation.
- Never use the development key for a production account!
- Never use the development key for a production account.
- CORS is enabled for * for development purposes only.
- CORS is enabled for * for development purposes only, you should never enable CORS
  for * on a node that is publicly accessible.
- Follow the tutorials for a simple way of creating account on VEXANIUM blockchain.
- Two different keys are strongly recommended for production networks.
- Contract requires the authorizing user to match the user parameter.
- Uses cleos command for interactions with the blockchain
- Public key is associated with account ownership
- Check if your wallet needs to be unlocked.
- GET AN ERROR? Check if your wallet needs to be unlocked.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- An empty contract is not enough. Add a public access specifier and a using-declaration.
- Requires eosio development key for account creation
- Tokens must be issued by an authorized issuer
- Requires setup of connected app in API
- You need to unlock your wallet prior to the next step
- You need to unlock your wallet prior to the next step.
- Transaction executed locally, but may not be confirmed by the network yet
- Uses cleos commands to interact with the eosio.token contract
- Uses eosio.token contract for token operations
- Requires setup of eosio account for contract deployment
- Requires EOSIO account setup for contract deployment
- Token transactions may take time to be confirmed
- Requires an eosio account for issuing and transferring tokens.
- ABI files can be generated using the cdt-cpp utility provided by cdt.
- Advanced C++ patterns can trip it up and custom types can sometimes cause issues
  for ABI generation.
- Actions include create, issue, retire, transfer, close.
- Tables include accounts and stat.
- ABI can be bypassed when executing transactions. Messages and actions passed to
  a contract do not have to conform to the ABI. The ABI is a guide, not a gatekeeper.
- A table's data structure cannot be modified while it has data in it.
- Check that your table is accurately described in the ABI file.
- The only account authorized to modify the address book is the user.
- The primary_key of the table is unique, based on username.
- Uses EOSIO multi_index for data persistence.
- Users can create, modify and erase records.
- Contracts compiled without a Ricardian contract will generate a compiler warning
  for each action missing an entry in the Ricardian clause.
- Record does not exist error can occur when trying to erase.
- Table's data structure cannot be modified while it has data in it.
- Requires setup of connected app in eosio.
- VEXANIUM has the ability to sort tables by up to 16 indices.
- The eosio.code authority is a pseudo authority implemented to enhance security.
- Ensure that the contract has the necessary permissions set.
- Smart contracts on EOS are upgradeable.
- Only the addressbook account/contract can authorize the count action in abcounter.
- Payable actions require transferring tokens before using other functionalities of
  the smart contract.
- The party action will only allow withdrawals after the configured the_party time
  has elapsed.
- Check the current time has passed the the_party time.
- The party action will only allow withdrawals after the configured `the_party` time
  has elapsed.
- Check the withdrawing account is the account which made the deposit initially.
- Custom permissions are created under a parent permission.
- Ensure understanding of permission concepts and steps before use.
- Creates custom permissions for accounts on the VEXANIUM blockchain.
- Requires understanding of permission hierarchy and security implications.
- VEXCHAIN Core provides the basic building blocks for the system layer and because
  they are not implemented as smart contracts they do not provide the same level of
  flexibility.
- A new permission called upsert was created.
- Ensure you understand the concepts and steps prior to putting them to use.
- Block validation presents a challenge among any group of distributed nodes.
- The VEXANIUM blockchain is a highly efficient, deterministic, distributed state
  machine.
- Block production time is currently set at 500 ms.
- Maximum processing interval is currently set at 200 ms.
- Minimum propagation time is currently set at 300 ms.
- Data compression is optional and implemented at the transaction level.
- Binary encoding is implemented by the net serializer when sending object instances
  and protocol messages over the network.
- The Chain Controller manages basic operations on blocks and transactions.
- Syncs blocks and transactions between nodes
- Handles various operation modes based on node state
- In-sync mode trades bandwidth in favor of latency.
- Nodes spend most of their time in catchup mode validating transactions.
- Some objects like Contact may return nulls in deeply nested fields
- DPoS is designed to achieve both decentralization and efficiency in block production
  and verification.
- VEX holders can change their delegations at any time, and within minutes the selection
  of the 21 active BPs can automatically change.
- LOW GAS FEE on VEX EVM
- VEXEVM is using ethereum virtual machine so its different with Native public blockchain
  and you need GAS fee for do transaction
- 'LOW GAS FEE on VEX EVM: ~.01 VEX per transaction'
- Limited rate for API calls
- Requires a valid API key for access
errors:
- 'Error 3090004: Missing required authority'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck wallet unlock status'
- 'Error 3090004: Missing required authority Ensure that you have the related authority
  inside your transaction!; If you are currently using ''cleos push action'' command,
  try to add the relevant authority using -p option.'
- Transaction executed locally, but may not be confirmed by the network yet
- 'Unauthorized: Check your API key or permissions'
- 'Insufficient funds: Ensure your account has enough balance'
- 'ACCOUNT_NOT_FOUND: Ensure the account exists'
- 'INSUFFICIENT_BALANCE: Ensure the account has enough tokens'
- 'TRANSACTION_ERROR: Check the transaction format and parameters'
- Warning, action <upsert> does not have a ricardian contract
- Warning, action <erase> does not have a ricardian contract
- Record does not exist
- 'Unauthorized: Recheck OAuth scopes or token expiration'
- Hold your horses
- You're not allowed to party
- You're way late
- When pigs fly
- These are not the droids you are looking for.
- 'Error 3090005: Irrelevant authority included'
- '3090005: Irrelevant authority included. Please remove the unnecessary authority
  from your action!'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'INVALID_BLOCK: Block is not valid for the current state'
- 'TRANSACTION_EXPIRED: Transaction has expired and cannot be processed'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403 Forbidden: Invalid API key'
- '404 Not Found: Check the endpoint path'
- '500 Internal Server Error: Retry the request later'
auth_info:
  mentioned_objects:
  - eosio.code
  - require_recipient
  - require_auth
client:
  base_url: https://docs.vexanium.com
  auth:
    type: oauth2
source_metadata: null
