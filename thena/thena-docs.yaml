resources:
- name: requests
  endpoint:
    path: /rest/v2/requests
    method: GET
    data_selector: requests
    params: {}
- name: accounts
  endpoint:
    path: /reference/get-all-accounts
    method: GET
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /reference/get-all-users
    method: GET
    data_selector: ''
    params: {}
- name: custom_fields
  endpoint:
    path: /reference/get-all-custom-fields
    method: GET
    data_selector: ''
    params: {}
- name: forms
  endpoint:
    path: /reference/get-workspace-forms
    method: GET
    data_selector: ''
    params: {}
- name: requests
  endpoint:
    path: /rest/v2/requests
    method: GET
    data_selector: requests
    params: {}
- name: create_request
  endpoint:
    path: /rest/v2/requests
    method: POST
- name: request
  endpoint:
    path: /rest/v2/requests/{requestId}
    method: GET
- name: update_request
  endpoint:
    path: /rest/v2/requests/mutate/{requestId}
    method: PATCH
    data_selector: request
- name: sub_status
  endpoint:
    path: /rest/v2/requests/sub-status
    method: GET
    data_selector: data
- name: conversations
  endpoint:
    path: /rest/v2/requests/{requestId}/conversations
    method: GET
    data_selector: data.requests
    params: {}
- name: accounts
  endpoint:
    path: /rest/v2/accounts
    method: GET
    data_selector: accounts
    params:
      limit: '20'
      page: '1'
      sort_order: desc
- name: users
  endpoint:
    path: /rest/v2/users
    method: GET
    data_selector: data.users
- name: user
  endpoint:
    path: /rest/v2/users/{userId}
    method: GET
    data_selector: data.user
- name: custom_fields
  endpoint:
    path: /rest/v2/custom-fields
    method: GET
    data_selector: array of objects
- name: forms
  endpoint:
    path: /rest/v2/workspace/forms
    method: POST
- name: get_all_forms
  endpoint:
    path: /rest/v2/workspace/forms
    method: GET
- name: delete_multiple_forms
  endpoint:
    path: /rest/v2/workspace/forms
    method: DELETE
    data_selector: deletedForms
    params: {}
- name: forms
  endpoint:
    path: /rest/v2/workspace/forms
    method: GET
    data_selector: data.forms
    params:
      offset: 0
- name: form
  endpoint:
    path: /rest/v2/workspace/forms/{formId}
    method: GET
    data_selector: data
    params: {}
- name: search_forms
  endpoint:
    path: /rest/v2/workspace/forms/search
    method: GET
    data_selector: forms
    params:
      term: ''
      limit: 10
      offset: 0
- name: requests
  endpoint:
    path: /v3/requests
    method: GET
    data_selector: data.results
- name: update_request
  endpoint:
    path: /v3/requests/v2/mutate/{id}
    method: PATCH
- name: custom_fields
  endpoint:
    path: /v3/custom-fields
    method: GET
    data_selector: object
- name: requests
  endpoint:
    path: /rest/v2/requests
    method: GET
    data_selector: requests
    params: {}
- name: accounts
  endpoint:
    path: /rest/v2/accounts
    method: GET
    data_selector: accounts
    params:
      limit: '20'
      page: '1'
      sort_order: desc
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data.users
- name: custom_fields
  endpoint:
    path: /rest/v2/custom-fields
    method: GET
    data_selector: array of objects
    params: {}
- name: forms
  endpoint:
    path: /rest/v2/workspace/forms
    method: POST
    data_selector: data
- name: get_all_forms
  endpoint:
    path: /rest/v2/workspace/forms
    method: GET
    data_selector: data
- name: get_form_by_id
  endpoint:
    path: /rest/v2/workspace/forms/{id}
    method: GET
    data_selector: data
- name: requests
  endpoint:
    path: /v3/requests
    method: GET
    data_selector: data.results
    params: {}
- name: custom_fields
  endpoint:
    path: /v3/custom-fields
    method: GET
    data_selector: object
- name: requests
  endpoint:
    path: /api/v1/requests
    method: GET
    data_selector: data
    params: {}
- name: statuses
  endpoint:
    path: /statuses
    method: GET
    data_selector: statuses
    params: {}
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
    params: {}
- name: custom_fields
  endpoint:
    path: /settings/custom_fields
    method: POST
    data_selector: custom_fields
- name: internal_helpdesk
  endpoint:
    path: /internal/helpdesk
    method: GET
    data_selector: requests
    params: {}
- name: roles
  endpoint:
    path: /roles
    method: GET
    data_selector: roles
    params: {}
- name: broadcasts
  endpoint:
    path: /api/broadcasts
    method: POST
    data_selector: data
    params: {}
- name: requests
  endpoint:
    path: /requests
    method: GET
    data_selector: data
- name: request_created
  endpoint:
    path: /webhooks/request_created
    method: POST
    data_selector: request
    params: {}
- name: request_updated
  endpoint:
    path: /webhooks/request_updated
    method: POST
    data_selector: request
    params: {}
- name: request_escalated
  endpoint:
    path: /webhooks/request_escalated
    method: POST
    data_selector: request
    params: {}
- name: favorites
  endpoint:
    path: /favorites
    method: GET
    data_selector: requests
    params: {}
- name: saved_views
  endpoint:
    path: /api/saved_views
    method: GET
    data_selector: views
- name: drafts
  endpoint:
    path: /drafts
    method: GET
    data_selector: drafts
    params: {}
- name: Auto-add Thena to channels
  endpoint:
    path: /auto-add-thena-to-channels
    method: POST
- name: Reopen requests on customer response
  endpoint:
    path: /reopen-requests
    method: POST
- name: Move 'On hold' to 'In progress' on customer response
  endpoint:
    path: /move-on-hold
    method: POST
- name: User entry notification
  endpoint:
    path: /user-entry-notification
    method: POST
- name: User exit notification
  endpoint:
    path: /user-exit-notification
    method: POST
- name: AI summaries
  endpoint:
    path: /api/ai-summaries
    method: GET
    data_selector: summaries
- name: Slack Integration
  endpoint:
    path: /slack/integration
    method: POST
    data_selector: channel_configuration
    params: {}
- name: email_setup
  endpoint:
    path: /docs/email-setup
    method: GET
    data_selector: emails
    params: {}
- name: web_chat
  endpoint:
    path: /web-chat
    method: POST
- name: AI Summaries
  endpoint:
    path: /api/v1/summaries
    method: GET
    data_selector: summaries
- name: Request
  endpoint:
    path: /api/requests
    method: POST
    data_selector: data
- name: Companies
  endpoint:
    path: /services/data/vXX.X/sobjects/Companies
    method: GET
    data_selector: records
    params: {}
- name: tickets
  endpoint:
    path: /api/v2/tickets
    method: GET
    data_selector: tickets
- name: ticket
  endpoint:
    path: /api/v2/tickets
    method: POST
    data_selector: ticket
notes:
- Retrieves all requests for a workspace, sorted by createdAt
- Requires setup of connected app in Thena
- Version number is required for concurrency control
- Default forms cannot be deleted
- At least one form must be specified
- This endpoint returns all requests, sorted in the order they were created (oldest
  to newest).
- Get all the custom fields for your workspace!
- Requests are the core unit that captures conversations and holds essential data
  for managing ticketing processes.
- Users can log in using Slack, email, or Gmail authentication.
- Thena supports one session at a time.
- It is recommended to create a separate triage channel exclusively for internal helpdesk
  issues.
- Thena has rolled out role-based access control (RBAC), enabling organizations to
  define and manage user access and permissions based on their roles.
- Thena webhooks are dispatched almost instantly after the event occurs.
- Webhook endpoint should be capable of handling retries if the initial attempt fails.
- Ensure that your endpoint is capable of handling retry mechanisms for webhook failures.
- This can be set at the global as well as the account level.
- Thena triggers a pre-configured SLA time clock for requests.
- Ensure Thena has the necessary permissions to join channels automatically.
- Thena will not be able to automatically join private channels since Thena's application
  cannot see private Slack channels by default.
- Thena offers daily, weekly, and monthly summaries of conversations on Slack.
- IT administrator is required to configure DNS settings and activate email forwarding
- Spam blocking is disabled by default
- Enable test mode only for testing on local servers.
- It is mandatory to hash the email if you are not on test mode.
- Admin privileges for setup
- Creating, deleting, or editing channels across Teams and Slack is not supported.
- User statuses (online, offline, away, etc.) are not synced between Teams and Slack.
- You need to have a Teams account with necessary permission & licence and a Slack
  account.
- Teams licenses are required for all team members.
- You must have an admin access to your Salesforce to successfully integrate.
- Thena processes and compiles a daily summary at 00:00 UTC, based on your Slack interactions
  with the account from the previous day.
- Thena processes and compiles a weekly summary at 00:00 UTC every Monday, based on
  your Slack interactions with the account from the previous week.
- Thena processes and compiles a monthly summary at 00:00 UTC on the 1st of each month,
  based on your Slack interactions with the account from the previous month.
- Thena's connector is designed to be forward-looking. Therefore, only the requests
  created after the integration has been established are synchronized with Salesforce.
- Any updates to fields in Salesforce CRM that are mapped to Thena will be synchronized
  in real-time.
- One Vitally instance can be integrated with a single Slack workspace.
- It may take upto 10 minutes in some cases to sync requests with Vitally.
- Linear Administrator privileges are required to authenticate Thena with Linear
- The Jira integration uses the token of the user who authenticated it.
- We recommend using a service account (e.g., thena@yourdomain.com) for easier identification.
- You can configure a duration for 'solved' tickets to move into 'closed' on Zendesk.
- Webhook & Trigger creation is mandatory; if it fails, you won't be able to proceed.
- Thena integrates with Zendesk using API token integration, rather than OAuth or
  basic authentication methods.
- You do not need to log into the Thena web application with this service account.
- Change data capture should be enabled for the Case and Email Message objects.
- Intercom has approved the Thena integration, and we are currently in the process
  of getting Thena listed on the Intercom app store.
- Users can configure specific requests to sync with Rootly for tailored incident
  workflows.
- The integration is one-way. Updates in Rootly won't sync back to Thena.
- Thena allows for only one PagerDuty service ID to be mapped for incident creation.
- The Thena <> PagerDuty integration is unidirectional.
- Generate a new API token by following the steps in the incident.io documentation.
- The integration is one-way. Updates in incident.io follow the setup in Thena but
  don’t sync back.
errors:
- '400 Bad request: required'
- '500 Internal server error: required'
- 400 Bad request
- 500 Internal server error
- 404 Resource not found
- '400 Bad request: A brief description of the error'
- '500 Internal server error: A brief description of the error'
- '404 Resource not found: A brief description of the error'
- '400 Bad request: Check if at least one form is specified'
- '500 Internal server error: Server encountered an unexpected condition'
- '400 Bad request: message'
- '404 Form not found: message'
- '500 Internal server error: message'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Token expired: Reauthorise Thena to send messages.'
- 'REQUEST_NOT_FOUND: The specified request does not exist'
- 'INVALID_DATA: One or more fields contain invalid data'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck API token or permissions'
- 'Ticket creation failed: We couldn''t create a ticket after 3 attempts due to Zendesk
  rate limits.'
- 'Ticket creation failed: We couldn''t create a ticket due to a record validation
  error in Zendesk.'
- 'Status update error: The ticket you''re trying to update doesn''t exist in Zendesk.'
auth_info:
  mentioned_objects:
  - Bearer
  - OauthToken
  - AuthProvider
  - NamedCredential
  - User email
  - Zendesk URL
  - Zendesk API token
client:
  base_url: https://bolt.thena.ai
  headers:
    Accept: application/json
  paginator:
    type: page
    page_size_param: limit
    default_page_size: 100
source_metadata: null
