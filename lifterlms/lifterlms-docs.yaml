resources:
- name: courses
  endpoint:
    path: /llms/v1/courses
    method: GET
    data_selector: records
- name: courses
  endpoint:
    path: /courses
    method: GET
    data_selector: total
    params:
      context: view
      order: asc
      orderby: id
      page: 1
      per_page: 10
      status: publish
- name: update_course
  endpoint:
    path: /courses/{id}
    method: PUT
    data_selector: response
    params: {}
- name: retrieve_course
  endpoint:
    path: /courses/{id}
    method: GET
    data_selector: response
    params: {}
- name: delete_course
  endpoint:
    path: /courses/{id}
    method: DELETE
    data_selector: response
    params: {}
- name: list_course_content
  endpoint:
    path: /courses/{id}/content
    method: GET
    data_selector: response
    params: {}
- name: course_enrollments
  endpoint:
    path: /groups/{id}/seats
    method: PUT
    data_selector: total
    params:
      context: view
      order: asc
      orderby: date_updated
      page: 1
      per_page: 10
- name: sections
  endpoint:
    path: /sections
    method: GET
    data_selector: _links
    params:
      context: view
      order: asc
      orderby: id
      page: 1
      per_page: 10
- name: lessons
  endpoint:
    path: /lessons
    method: GET
    data_selector: lessons
    params:
      context: view
      status: publish
      per_page: 10
- name: lesson
  endpoint:
    path: /lessons/{id}
    method: GET
    data_selector: lesson
    params:
      context: view
- name: create_lesson
  endpoint:
    path: /lessons
    method: POST
    data_selector: lesson
- name: update_lesson
  endpoint:
    path: /lessons/{id}
    method: PUT
    data_selector: lesson
- name: access_plan
  endpoint:
    path: /access-plans/{id}
    method: GET
    data_selector: total
    params: {}
- name: list_access_plans
  endpoint:
    path: /access-plans
    method: GET
    data_selector: total
    params: {}
- name: create_access_plan
  endpoint:
    path: /access-plans
    method: POST
    data_selector: total
    params: {}
- name: instructors
  endpoint:
    path: /instructors
    method: GET
    data_selector: instructors
- name: create_instructor
  endpoint:
    path: /instructors
    method: POST
    data_selector: instructor
- name: retrieve_instructor
  endpoint:
    path: /instructors/{id}
    method: GET
    data_selector: instructor
- name: update_instructor
  endpoint:
    path: /instructors/{id}
    method: PUT
    data_selector: instructor
- name: delete_instructor
  endpoint:
    path: /instructors/{id}
    method: DELETE
    data_selector: instructor
- name: update_instructor
  endpoint:
    path: /groups/{id}/seats
    method: PUT
    data_selector: total
    params: {}
- name: delete_instructor
  endpoint:
    path: /groups/{id}/seats
    method: DELETE
    data_selector: total
    params: {}
- name: list_instructors_content
  endpoint:
    path: /groups/{id}/seats
    method: GET
    data_selector: total
    params: {}
- name: list_memberships
  endpoint:
    path: /groups/{id}/seats
    method: GET
    data_selector: total
    params: {}
- name: membership
  endpoint:
    path: /groups/{id}/seats
    method: PUT
    data_selector: total
    params: {}
- name: student
  endpoint:
    path: /students/{id}
    method: GET
    data_selector: _links
    params: {}
- name: student_enrollment
  endpoint:
    path: /students/{id}/enrollments
    method: GET
    data_selector: enrollments
    params:
      order: asc
      orderby: date_updated
      page: 1
      per_page: 10
- name: create_student_enrollment
  endpoint:
    path: /students/{id}/enrollments/{post_id}
    method: POST
    data_selector: enrollment
    params:
      trigger: any
- name: update_student_enrollment
  endpoint:
    path: /students/{id}/enrollments/{post_id}
    method: PUT
    data_selector: enrollment
    params:
      trigger: any
- name: get_student_enrollment
  endpoint:
    path: /students/{id}/enrollments/{post_id}
    method: GET
    data_selector: enrollment
    params: {}
- name: delete_student
  endpoint:
    path: /students/{id}
    method: DELETE
    data_selector: result
    params:
      reassign: 0
- name: webhook
  endpoint:
    path: /webhooks
    method: GET
    data_selector: webhooks
- name: create_webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
- name: retrieve_webhook
  endpoint:
    path: /webhooks/{id}
    method: GET
    data_selector: webhook
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: update_group
  endpoint:
    path: /groups/{id}
    method: PUT
    data_selector: group
    params: {}
- name: delete_group
  endpoint:
    path: /groups/{id}
    method: DELETE
    data_selector: group
    params:
      force: false
- name: group_invitations
  endpoint:
    path: /groups/{id}/invitations
    method: GET
    data_selector: invitations
    params: {}
- name: group_seats
  endpoint:
    path: /groups/{id}/seats
    method: PUT
    data_selector: seats
    params: {}
- name: group_members
  endpoint:
    path: /groups/{id}/members
    method: GET
    data_selector: members
    params: {}
- name: group_seats
  endpoint:
    path: /groups/{id}/seats
    method: PUT
    data_selector: total
    params:
      id: required
notes:
- Requests to most API resources require authentication.
- Requests to the REST API may only be made over HTTPS.
- The groups API is only available through the LifterLMS Groups advanced add-on.
errors:
- '400: Bad request.'
- '401: Unauthorized.'
- '403: Forbidden.'
- '404: Not Found.'
- 400 Bad request.
- 401 Unauthorized.
- 403 Forbidden.
- 404 Not Found.
- '400: Bad request'
- '401: Unauthorized'
- '403: Forbidden'
- '404: Not Found'
- 400 Bad Request
- 401 Unauthorized
- 403 Forbidden
- 404 Not Found
- 400 Bad request
- '400 Bad Request: An attempt to create a new invitation when one already exists.'
- '401 Unauthorized: Authentication required.'
- '403 Forbidden: Insufficient permissions.'
- '404 Not Found: Resource not found.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://example.tld/wp-json/
  auth:
    type: Basic Authentication
source_metadata: null
