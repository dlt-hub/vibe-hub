resources:
- name: products
  endpoint:
    path: /api/v1/products
    method: GET
- name: licenses
  endpoint:
    path: /api/v1/licenses
    method: GET
- name: blacklist
  endpoint:
    path: /api/v1/blacklist
    method: GET
- name: license_requests
  endpoint:
    path: /api/v1/license-requests
    method: GET
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
- name: health
  endpoint:
    path: /api/v2/healthy
    method: GET
- name: ping
  endpoint:
    path: /api/v2/ping
    method: GET
- name: products
  endpoint:
    path: /api/v2/products
    method: GET
- name: licenses
  endpoint:
    path: /api/v2/licenses
    method: GET
- name: blacklists
  endpoint:
    path: /api/v2/blacklists
    method: GET
- name: requests
  endpoint:
    path: /api/v2/requests
    method: GET
- name: customers
  endpoint:
    path: /api/v2/customers
    method: GET
- name: validate
  endpoint:
    path: /api/v2/validate
    method: POST
- name: webhook
  endpoint:
    path: /api/v1/bbb/{productId}
    method: GET
    data_selector: webhook_url
    params: {}
- name: health_check
  endpoint:
    path: /api/v2/healthy
    method: GET
- name: ping
  endpoint:
    path: /api/v2/ping
    method: GET
- name: products
  endpoint:
    path: /api/v2/products
    method: GET
- name: licenses
  endpoint:
    path: /api/v2/licenses
    method: GET
- name: blacklists
  endpoint:
    path: /api/v2/blacklists
    method: GET
- name: requests
  endpoint:
    path: /api/v2/requests
    method: GET
- name: customers
  endpoint:
    path: /api/v2/customers
    method: GET
- name: validate_license
  endpoint:
    path: /api/v2/validate
    method: POST
- name: License
  endpoint:
    path: /api/v2/license
    method: GET
    data_selector: license_data
- name: Webhook
  endpoint:
    path: /{productId}
    method: POST
    data_selector: data
    params: {}
- name: license
  endpoint:
    path: /api/v2/license
    method: POST
    data_selector: data
- name: SunLicenseAPI
  endpoint:
    path: /validate
    method: POST
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
    data_selector: response
    params: {}
- name: license
  endpoint:
    path: /api/license
    method: POST
    data_selector: license
    params: {}
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
    data_selector: status
    params: {}
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
    data_selector: response
    params: {}
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
    data_selector: ''
    params: {}
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
    data_selector: status
    params: {}
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
    data_selector: licenseKey
    params: {}
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
    data_selector: response
    params: {}
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
    data_selector: response
    params: {}
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
    data_selector: response.data
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
    data_selector: response
    params: {}
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
    data_selector: response
    params: {}
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
    data_selector: ''
    params: {}
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
    data_selector: response
    params: {}
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
    data_selector: ''
    params: {}
- name: license
  endpoint:
    path: /api/v1/licenses
    method: GET
    data_selector: licenses
    params: {}
- name: license_validation
  endpoint:
    path: /api/v1/validate
    method: POST
    data_selector: message
    params: {}
notes:
- License Key cannot be hardcoded its different from license to license and you have
  to write a logic to take license key from a config file and pass as a parameter.
- For production environments, load the license key from a file.
- Ensure the port is open in your firewall settings.
- This works only if no other services (like Nginx or Apache) are using port 80.
- 'Ensure your VPS meets the following requirements: Java 21+ installed, A valid SunLicense
  license key.'
- To keep SunLicense running even after closing the terminal, use screen or tmux.
- Authentication is required, and access is restricted to users with the ROLE_ADMIN
  permission.
- Always include the TOKEN header for all endpoints except /healthy.
- For all update (PUT) operations, always fetch the current object first and send
  all fields in your update request.
- Requires SunLicense API credentials for integration.
- Validate license before server initialization
- Implement graceful shutdown on validation failure
- Requires SunLicense API credentials
- Ensure config.yml is properly formatted
- Log validation status
- Validate before bot initialization
- Implement graceful shutdown
- Clear error logging
- Regular license checks
- Handle network issues
- Graceful error handling
- Requires setup of SunLicense API credentials
- Store your license key in server.cfg
- Never expose the key in client-side code
- Regularly rotate keys if possible
- Use axios for API calls
- Handle license validation failures gracefully
- Implement proper try-catch blocks
- Log validation failures
- Use environment variables for configuration management
- Implement proper exception handling
- Use environment variables for configuration management.
- Implement proper exception handling and log validation failures.
- Never expose license key in frontend code
- Implement server-side validation
- Use secure communication (HTTPS)
- Use pcall for error handling
- Secure storage of license key
- Implement HTTPS communication
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Handle sensitive data carefully
- Requires setup of connected app in SunLicense
- License key must be saved in 'license.txt' next to 'server.jar'
errors:
- Product has licenses, cannot delete
- '400: Max IPs reached'
- '401 Unauthorized: Error response'
- invalid token or missing required intent
- 'LICENSE_VALIDATION_FAILED: Check if license key is properly configured'
- 'PRODUCT_ID_MISMATCH: Verify product ID matches'
- 'SERVER_CONNECTIVITY: Check server connectivity to license API'
- 'Validation Failures: Check license key validity, verify network connectivity, confirm
  product ID'
- 'Runtime Issues: Monitor bot logs, check for API rate limits, verify license status'
- 'LICENSE_INVALID: Check the provided license key'
- 'NETWORK_ERROR: Check your internet connection'
- '200: License validated successfully'
- '1: License validation failed'
- '1: Failed to connect to license server'
- 'License validation failed: Check license key validity'
- 'Network issues: Verify network connectivity'
- 'API rate limits: Check for limits in your account'
- 'License validation failed: {response}'
- Failed to connect to license server
- Invalid License Format
- 'License validation failed: Check license key format or product ID'
- 'License validation failed: Check license key format and verify product ID'
- '403: Invalid license'
- 'HTTP error! status: response.status'
- 'License validation failed with code: '
- 'License validation failed with code: {code}'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects: []
client:
  base_url: YOUR_API_URL
  headers:
    Accept: application/json
source_metadata: null
