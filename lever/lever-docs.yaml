resources:
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: opportunities
  endpoint:
    path: /opportunities
    method: GET
- name: postings
  endpoint:
    path: /postings
    method: GET
- name: candidates
  endpoint:
    path: /candidates
    method: GET
- name: contacts
  endpoint:
    path: /contacts/:contact
    method: GET
    data_selector: data
- name: eeo_responses
  endpoint:
    path: /v1/eeo/responses/pii
    method: GET
    data_selector: data.eeoResponses
- name: interview
  endpoint:
    path: /opportunities/:opportunity/interviews/:interview
    method: GET
    data_selector: data
    params: {}
- name: candidates
  endpoint:
    path: /candidates
    method: GET
- name: applicationCreated
  endpoint:
    path: /yourWebhookUrl
    method: POST
    data_selector: data
    params: {}
- name: candidateHired
  endpoint:
    path: /yourWebhookUrl
    method: POST
    data_selector: data
    params: {}
- name: candidateStageChange
  endpoint:
    path: /yourWebhookUrl
    method: POST
    data_selector: data
    params: {}
- name: candidateArchiveChange
  endpoint:
    path: /yourWebhookUrl
    method: POST
    data_selector: data
    params: {}
- name: candidateDeleted
  endpoint:
    path: /yourWebhookUrl
    method: POST
    data_selector: data
    params: {}
- name: interviewCreated
  endpoint:
    path: /yourWebhookUrl
    method: POST
    data_selector: data
    params: {}
- name: interviewUpdated
  endpoint:
    path: /yourWebhookUrl
    method: POST
    data_selector: data
    params: {}
- name: interviewDeleted
  endpoint:
    path: /yourWebhookUrl
    method: POST
    data_selector: data
    params: {}
- name: contactCreated
  endpoint:
    path: /yourWebhookUrl
    method: POST
    data_selector: data
    params: {}
- name: contactUpdated
  endpoint:
    path: /yourWebhookUrl
    method: POST
    data_selector: data
    params: {}
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: applications
- name: applications
  endpoint:
    path: /opportunities/:opportunity/applications/:application
    method: GET
    data_selector: data
    params: {}
- name: applications
  endpoint:
    path: /candidates/:candidate_id/applications
    method: GET
    data_selector: data
    params: {}
- name: archive_reasons
  endpoint:
    path: /archive_reasons
    method: GET
    data_selector: data
    params: {}
- name: audit_events
  endpoint:
    path: /audit_events
    method: GET
    data_selector: data
    params: {}
- name: account_added
  endpoint:
    path: /events/account:added
    method: POST
    data_selector: meta.account
    params: {}
- name: account_deactivated
  endpoint:
    path: /events/account:deactivated
    method: POST
    data_selector: meta.account
    params: {}
- name: account_reactivated
  endpoint:
    path: /events/account:reactivated
    method: POST
    data_selector: meta.account
    params: {}
- name: user_added
  endpoint:
    path: /events/user:added
    method: POST
    data_selector: meta.user
    params: {}
- name: user_deactivated
  endpoint:
    path: /events/user:deactivated
    method: POST
    data_selector: meta.user
    params: {}
- name: eeo_responses
  endpoint:
    path: /v1/eeo/responses
    method: GET
    data_selector: eeoResponses
    params: {}
- name: feedback_form
  endpoint:
    path: /opportunities/:opportunity/feedback/:feedback
    method: GET
    data_selector: data
    params: {}
- name: feedback
  endpoint:
    path: /opportunities/:opportunity/feedback
    method: GET
    data_selector: data
    params: {}
- name: feedback
  endpoint:
    path: /opportunities/:opportunity/feedback
    method: POST
    data_selector: feedback
    params:
      perform_as: 8d49b010-cc6a-4f40-ace5-e86061c677ed
- name: feedback
  endpoint:
    path: /opportunities/:opportunity/feedback/:feedback
    method: PUT
    data_selector: data
    params:
      perform_as: 8d49b010-cc6a-4f40-ace5-e86061c677ed
- name: feedback_template
  endpoint:
    path: /feedback_templates/:feedback_template
    method: GET
    data_selector: data
    params: {}
- name: feedback_templates
  endpoint:
    path: /feedback_templates
    method: GET
    data_selector: data
- name: create_feedback_template
  endpoint:
    path: /feedback_templates
    method: POST
    data_selector: ''
    params: {}
- name: feedback_template
  endpoint:
    path: /feedback_templates/:feedback_template
    method: PUT
    data_selector: data
- name: file
  endpoint:
    path: /opportunities/:opportunity/files
    method: POST
    data_selector: data
- name: single_file
  endpoint:
    path: /opportunities/:opportunity/files/:file
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: /opportunities/:opportunity/files
    method: GET
    data_selector: files
    params:
      uploaded_at_start: ''
      uploaded_at_end: ''
- name: download_file
  endpoint:
    path: /opportunities/:opportunity/files/:file/download
    method: GET
    data_selector: ''
    params: {}
- name: delete_file
  endpoint:
    path: /opportunities/:opportunity/files/:file
    method: DELETE
    data_selector: ''
    params:
      perform_as: ''
- name: date
  endpoint:
    path: /date
    method: GET
    data_selector: records
- name: dropdown
  endpoint:
    path: /dropdown
    method: GET
    data_selector: records
- name: file_upload
  endpoint:
    path: /file_upload
    method: GET
    data_selector: records
- name: multiple_choice
  endpoint:
    path: /multiple_choice
    method: GET
    data_selector: records
- name: multiple_select
  endpoint:
    path: /multiple_select
    method: GET
    data_selector: records
- name: note
  endpoint:
    path: /note
    method: GET
    data_selector: records
- name: score_system
  endpoint:
    path: /score_system
    method: GET
    data_selector: records
- name: score
  endpoint:
    path: /score
    method: GET
    data_selector: records
- name: scorecard
  endpoint:
    path: /scorecard
    method: GET
    data_selector: records
- name: interviews
  endpoint:
    path: /opportunities/:opportunity/interviews
    method: GET
    data_selector: data
    params: {}
- name: create_interview
  endpoint:
    path: /opportunities/:opportunity/interviews
    method: POST
    data_selector: data
    params:
      perform_as: 8d49b010-cc6a-4f40-ace5-e86061c677ed
- name: update_interview
  endpoint:
    path: /opportunities/:opportunity/interviews/:interview
    method: PUT
    data_selector: data
    params:
      perform_as: 8d49b010-cc6a-4f40-ace5-e86061c677ed
- name: delete_interview
  endpoint:
    path: /opportunities/:opportunity/interviews/:interview
    method: DELETE
    data_selector: data
    params:
      perform_as: 8d49b010-cc6a-4f40-ace5-e86061c677ed
- name: retrieve_note
  endpoint:
    path: /opportunities/:opportunity/notes/:note
    method: GET
    data_selector: data
- name: list_all_notes
  endpoint:
    path: /opportunities/:opportunity/notes
    method: GET
    data_selector: data
    params: {}
- name: create_note
  endpoint:
    path: /opportunities/:opportunity/notes
    method: POST
    data_selector: data
    params: {}
- name: delete_note
  endpoint:
    path: /opportunities/:opportunity/notes/:noteId
    method: DELETE
    data_selector: data
    params: {}
- name: update_note
  endpoint:
    path: /opportunities/:opportunity/notes/:note
    method: PUT
    data_selector: data
    params: {}
- name: offers
  endpoint:
    path: /opportunities/:opportunity/offers
    method: GET
    data_selector: data
    params: {}
- name: download_offer
  endpoint:
    path: /opportunities/:opportunity/offers/:offer/download
    method: GET
    data_selector: null
    params:
      status: sent
- name: opportunities
  endpoint:
    path: /opportunities
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /contact
    method: GET
    data_selector: records
- name: opportunity
  endpoint:
    path: /opportunities/:opportunity
    method: GET
    data_selector: data
    params: {}
- name: opportunities
  endpoint:
    path: /opportunities
    method: GET
    data_selector: data
    params: {}
- name: deleted_opportunities
  endpoint:
    path: /opportunities/deleted
    method: GET
    params:
      deleted_at_start: '1407460069499'
- name: opportunity
  endpoint:
    path: /opportunities
    method: POST
    data_selector: Opportunity
    params:
      perform_as: 8d49b010-cc6a-4f40-ace5-e86061c677ed
      parse: 'true'
      perform_as_posting_owner: 'true'
- name: opportunity_stage
  endpoint:
    path: /opportunities/:opportunity/stage
    method: PUT
    data_selector: data
    params: {}
- name: opportunity_archived
  endpoint:
    path: /opportunities/:opportunity/archived
    method: PUT
    data_selector: data
    params: {}
- name: contact_links
  endpoint:
    path: /opportunities/:opportunity/addLinks
    method: POST
    data_selector: data
    params: {}
- name: opportunity_tags
  endpoint:
    path: /opportunities/:opportunity/addTags
    method: POST
    data_selector: data
    params: {}
- name: opportunity_sources
  endpoint:
    path: /opportunities/:opportunity/addSources
    method: POST
    data_selector: data
    params: {}
- name: retrieve_panel
  endpoint:
    path: /opportunities/:opportunity/panels/:panel
    method: GET
    data_selector: data
    params: {}
- name: panels
  endpoint:
    path: /opportunities/:opportunity/panels
    method: GET
    data_selector: data
    params: {}
- name: create_panel
  endpoint:
    path: /opportunities/:opportunity/panels
    method: POST
    data_selector: data
    params: {}
- name: update_panel
  endpoint:
    path: /opportunities/:opportunity/panels/:panel
    method: PUT
    params:
      perform_as: 8d49b010-cc6a-4f40-ace5-e86061c677ed
- name: delete_panel
  endpoint:
    path: /opportunities/:opportunity/panels/:panel
    method: DELETE
    params:
      perform_as: 8d49b010-cc6a-4f40-ace5-e86061c677ed
- name: posting
  endpoint:
    path: /postings/:posting
    method: GET
    data_selector: data
    params: {}
- name: postings
  endpoint:
    path: /postings
    method: GET
    data_selector: data
    params:
      include: content
- name: postings
  endpoint:
    path: /postings
    method: POST
    data_selector: data
    params: {}
- name: postings
  endpoint:
    path: /v1/postings/:posting
    method: POST
    data_selector: data
    params:
      perform_as: 8d49b010-cc6a-4f40-ace5-e86061c677ed
- name: posting_application_questions
  endpoint:
    path: /postings/:posting/apply
    method: GET
    data_selector: data
- name: apply_to_posting
  endpoint:
    path: /postings/:posting/apply
    method: POST
- name: profile_forms
  endpoint:
    path: /opportunities/:opportunity/forms
    method: GET
    data_selector: data
- name: retrieve_profile_form
  endpoint:
    path: /opportunities/:opportunity/forms/:form
    method: GET
    data_selector: data
- name: create_profile_form
  endpoint:
    path: /v1/opportunities/:opportunity/forms
    method: POST
    data_selector: id
    params:
      perform_as: 8d49b010-cc6a-4f40-ace5-e86061c677ed
- name: retrieve_profile_form_template
  endpoint:
    path: /v1/form_templates/:form_template
    method: GET
    data_selector: id
    params: {}
- name: form_templates
  endpoint:
    path: /form_templates
    method: GET
    data_selector: data
    params: {}
- name: form_templates
  endpoint:
    path: /form_templates/:form_template
    method: PUT
    data_selector: data
    params: {}
- name: referrals
  endpoint:
    path: /opportunities/:opportunity/referrals/:referral
    method: GET
    data_selector: data
    params: {}
- name: referrals
  endpoint:
    path: /opportunities/:opportunity/referrals
    method: GET
    data_selector: data
    params: {}
- name: requisition
  endpoint:
    path: /api/requisitions
    method: POST
    data_selector: requisitions
- name: approval_step
  endpoint:
    path: /api/approval_steps
    method: GET
    data_selector: approval_steps
- name: requisition
  endpoint:
    path: /requisitions/:requisition
    method: GET
    data_selector: data
- name: requisitions
  endpoint:
    path: /requisitions
    method: GET
    data_selector: data
    params: {}
- name: requisitions
  endpoint:
    path: /requisitions
    method: POST
    data_selector: data
- name: requisition
  endpoint:
    path: /requisitions/:requisition
    method: PUT
    data_selector: data
- name: requisition_fields
  endpoint:
    path: /requisition_fields
    method: GET
    data_selector: data
- name: single_requisition_field
  endpoint:
    path: /requisition_fields/:requisition_field
    method: GET
    data_selector: data
- name: requisition_field
  endpoint:
    path: /v1/requisition_fields
    method: POST
    data_selector: data
    params: {}
- name: resume
  endpoint:
    path: /opportunities/:opportunity/resumes/:resume
    method: GET
    data_selector: data
- name: resumes
  endpoint:
    path: /opportunities/:opportunity/resumes
    method: GET
    data_selector: data
- name: download_resume
  endpoint:
    path: /opportunities/:opportunity/resumes/:resume/download
    method: GET
- name: list_sources
  endpoint:
    path: /sources
    method: GET
- name: list_stages
  endpoint:
    path: /stages
    method: GET
- name: retrieve_diversity_survey
  endpoint:
    path: /surveys/diversity/:posting
    method: GET
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: data
    params: {}
- name: uploads
  endpoint:
    path: /uploads
    method: POST
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users/:user
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users/:user
    method: PUT
    data_selector: data
    params: {}
- name: deactivate_user
  endpoint:
    path: /users/:user/deactivate
    method: POST
    data_selector: data
    params: {}
- name: reactivate_user
  endpoint:
    path: /users/:user/reactivate
    method: POST
    data_selector: data
    params: {}
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: data
    params: {}
- name: create_webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: data
    params: {}
- name: webhook
  endpoint:
    path: /webhooks/
    method: PUT
    data_selector: data
- name: delete_webhook
  endpoint:
    path: /webhooks/:webhookId
    method: DELETE
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: candidates
  endpoint:
    path: /candidates
    method: GET
    data_selector: data
    params:
      include: followers
      expand: applications,stage,owner,followers,sourcedBy,contact
      tag: San Francisco
      email: shane@exampleq3.com
      origin: sourced
      source: linkedin
      confidentiality: non-confidential
      stage_id: fff60592-31dd-4ebe-ba8e-e7a397c30f8e
      posting_id: f2f01e16-27f8-4711-a728-7d49499795a0
      archived_posting_id: f2f01e16-27f8-4711-a728-7d49499795a0
      created_at_start: 1407460069499
      updated_at_start: 1407460069499
      advanced_at_start: 1407460069499
      archived_at_start: 1407460069499
      archived: true
      archive_reason_id: 63dd55b2-a99f-4e7b-985f-22c7bf80ab42
      snoozed: true
      contact_id: 7f23e772-f2cb-4ebb-b33f-54b872999992
- name: candidate
  endpoint:
    path: /candidates/:candidate
    method: GET
    data_selector: data
- name: create_candidate
  endpoint:
    path: /candidates
    method: POST
    data_selector: data
- name: update_candidate_stage
  endpoint:
    path: /candidates/:candidate/stage
    method: PUT
    data_selector: data
- name: update_candidate_archived
  endpoint:
    path: /candidates/:candidate/archived
    method: PUT
    data_selector: data
- name: add_candidate_links
  endpoint:
    path: /candidates/:candidate/addLinks
    method: POST
    data_selector: data
- name: remove_candidate_links
  endpoint:
    path: /candidates/:candidate/removeLinks
    method: POST
    data_selector: data
- name: add_candidate_tags
  endpoint:
    path: /candidates/:candidate/addTags
    method: POST
    data_selector: data
- name: remove_candidate_tags
  endpoint:
    path: /candidates/:candidate/removeTags
    method: POST
    data_selector: data
- name: add_candidate_sources
  endpoint:
    path: /candidates/:candidate/addSources
    method: POST
    data_selector: data
- name: remove_candidate_sources
  endpoint:
    path: /candidates/:candidate/removeSources
    method: POST
    data_selector: data
- name: add_candidate_postings
  endpoint:
    path: /candidates/:candidate/addPostings
    method: POST
    data_selector: data
- name: opportunities
  endpoint:
    path: /opportunities
    method: GET
    data_selector: data
    params: {}
- name: candidates
  endpoint:
    path: /candidates
    method: GET
    data_selector: data
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Stages are custom to each customer.
- Ensure to provide clear instructions on stages in integration documentation.
- Retrieve a single interview endpoint via '/candidates/' is deprecated but maintained
  for backwards compatibility.
- Access tokens expire after one hour.
- Refresh tokens will expire after one year or after 90 days of inactivity.
- We only support HTTPS endpoints
- Request signing is required to verify webhook authenticity
- This endpoint is deprecated but maintained for backwards compatibility.
- Please note this endpoint (/audit_events) is an add-on for customers.
- Requires setup of connected app in Lever.
- Some events may return nulls in deeply nested fields.
- Retrieve a feedback form endpoint via /candidates/ is deprecated but maintained
  for backwards compatibility.
- The List all feedback endpoint via `/candidates/` is deprecated but maintained for
  backwards compatibility.
- Feedback templates support various field types including score-system, dropdown,
  multiple choice, etc.
- Uses API Key for authentication
- The Upload a single file endpoint via /candidates/ is deprecated but maintained
  for backwards compatibility.
- The List all files endpoint via '/candidates/' is deprecated but maintained for
  backwards compatibility.
- Uses OAuth2 with refresh token — requires setup of connected app in Lever
- Some objects may return nulls in deeply nested fields
- The List all interviews endpoint via `/candidates/` is deprecated but maintained
  for backwards compatibility.
- Interviews can only be created on panels where externallyManaged == true.
- This endpoint cannot be used to update interviews that were created within the Lever
  application.
- This endpoint cannot be used to delete interviews that were created within the Lever
  application.
- 'WARNING: The List all notes endpoint via `/candidates/` is deprecated but maintained
  for backwards compatibility.'
- 'WARNING: The Create a note endpoint via `/candidates/` is deprecated but maintained
  for backwards compatibility.'
- Opportunities endpoints should be used instead of the now deprecated Candidates
  endpoints.
- Optional filtering parameters include confidentiality, stage_id, posting_id, archived,
  snoozed, and contact_id.
- If a candidate information is provided in the POST request and resume parsing is
  requested, the manually provided information will always take precedence over the
  parsed information from the candidate resume.
- If an email address is provided, we will always attempt to dedupe the candidate.
- Optional Perform this update on behalf of a specified user.
- The Create a panel endpoint via /candidates/ is deprecated but maintained for backwards
  compatibility.
- Optional distribution parameter can be used to return internal or external custom
  application questions.
- List requests for published postings will only return postings that appear on your
  public job site.
- It is not currently possible to create a confidential posting through the API.
- Updating a posting through the API will not go through the approvals chain.
- Lever will not automatically send an application confirmation email to the candidate,
  unless the send_confirmation_email=true is specified in the URL.
- Retrieve a single profile form endpoint via `/candidates/` is deprecated but maintained
  for backwards compatibility.
- Must include all fields in the request, regardless of whether they are required
  or not.
- The profile form will not be created or added to the candidate profile if fields
  do not match the baseTemplateId.
- To reduce the payload from this endpoint, you can use the include parameter to specify
  exactly the fields you want.
- Only templates that were created via the Create a profile form template endpoint
  can be deleted via this endpoint.
- The List all referrals endpoint via `/candidates/` is deprecated but maintained
  for backwards compatibility.
- Super Admin must enable API management to push requisitions.
- Lever validates custom fields schema against requisition field schema.
- Optional parameters available for filtering requisitions
- To make POST/PUT/DELETE requests to the requisitions endpoint, your Lever account
  must have API-management of requisitions enabled.
- Custom Fields are not required by default, but when they are created they can be
  marked required.
- You can have up to 100 requisition field schema on your account.
- Requisition fields of type object can have up to 10 subfields.
- Requisition fields of type dropdown can have up to 8000 total options.
- The List all resumes endpoint via `/candidates/` is deprecated but maintained for
  backwards compatibility.
- Only webhooks created via the API can be updated using this API.
- OAuth is required for all Lever integrations.
- Callback URLs can be different for Sandbox and Production.
- This endpoint is deprecated but maintained for backward compatibility.
- OAuth is required for authorization.
- Feedback forms now support additional field types.
- Email is turned off in Lever sandbox accounts.
- The Postman authentication tab will only work on Sandbox as it doesn’t include the
  audience parameter.
- Tags cannot be added directly to the global list of Lever accounts.
- Tags cannot be directly updated. Instead remove the tag and add again with the changes.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check OAuth token.'
- '404 Not Found: Check the endpoint URL.'
- 'access_denied: User did not authorize the request'
- '400 Invalid Request: This usually occurs because of a missing or malformed parameter.
  Check the documentation and the syntax of your request and try again.'
- '401 Unauthorized: A valid API key was not provided with the request. You must authenticate
  for all requests.'
- '403 Forbidden: Your Lever account settings don''t authorize you to perform the
  requested operation.'
- '404 Not Found: Either the request method and path supplied do not specify a known
  action in the API, or the object specified by the request does not exist.'
- '429 Too Many Requests: Lever imposes a limit of the number of requests a client
  can make in a short time.'
- '500 Server Error: Oops! There was an error on Lever''s end.'
- '503 Service Unavailable: Lever is temporarily down for maintenance. Please retry
  your requests with exponential backoff.'
- '403 Forbidden: Insufficient permissions for the action'
- '204 No Content: Successful deletion'
- '401 Unauthorized: Invalid API key'
- '401 Unauthorized: Recheck API Key'
- 'RequestTimeout: File took too long to upload.'
- '400: Malformed request due to improper timestamp'
- '422: Unprocessable entity when trying to download a file that was unable to be
  processed'
- '201 - Created: Successful creation of interview.'
- '204 No Content: Successful deletion of a note.'
- '201 Created: Note successfully created.'
- '201: Created'
- '401 Unauthorized: Check API key.'
- '201 - Created: Posting successfully created.'
- '200 - OK: Successful update of posting.'
- '201 - Created: Application successfully created.'
- 'Validation error: If the fields in the request do not match the fields in the baseTemplateId.'
- '201 - Created: status code for successful creation'
- '400: Malformed request if uploaded_at_start or uploaded_at_end is not a proper
  timestamp.'
- 422 - Unprocessable entity
- 201 - Created
- 200 - OK
- '401 Unauthorized: Check that the secret provided is being used for the ClientSecret.'
- '403 Forbidden: Ensure the scope for the endpoint is listed in the redirect.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Ensure valid authentication credentials are provided.'
- '404 Not Found: Endpoint may not exist or resource is unavailable.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuth
  - ClientID
  - ClientSecret
  - User
  - Opportunity
  - Contact
  - accessRole
  - contact
client:
  base_url: https://api.sandbox.lever.co/v1/
  auth:
    type: apikey
    flow: authorization_code
    token_url: https://api.lever.co/oauth/token
    client_id: '{{ dlt.secrets[''lever_client_id''] }}'
    client_secret: '{{ dlt.secrets[''lever_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
    scopes:
    - offline_access
    - opportunities:read:admin
    - opportunities:write:admin
    - tags:read:admin
    - stages:read:admin
    - notes:write:admin
    - files:write:admin
    redirect_uri: '{{ dlt.secrets[''lever_redirect_uri''] }}'
  headers:
    Accept: application/json
    Content-Type: application/json
  paginator:
    type: cursor
    cursor_path: nextPage
    cursor_param: cursor
    page_size_param: limit
    default_page_size: 100
source_metadata: null
