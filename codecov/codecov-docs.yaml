resources:
- name: upload
  endpoint:
    path: /upload/v4
    method: POST
    data_selector: reports
    params:
      commit: required
      token: required
- name: coverage
  endpoint:
    path: /upload
    method: POST
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v2/{{ SERVICE NAME }}/{{ ORGANIZATION NAME }}/users
    method: GET
- name: users
  endpoint:
    path: /{{ SERVICE NAME }}/{{ ORGANIZATION NAME }}/users
    method: GET
- name: user_detail
  endpoint:
    path: /{{ SERVICE NAME }}/{{ ORGANIZATION NAME }}/users/{{ USER ID }}
    method: GET
- name: user_list
  endpoint:
    path: /{{ SERVICE NAME }}/{{ ORGANIZATION NAME }}/users
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: repository_list
  endpoint:
    path: /repos_list
    method: GET
- name: commit_list
  endpoint:
    path: /repos_commits_list
    method: GET
- name: users
  endpoint:
    path: /{{ SERVICE NAME }}/{{ ORGANIZATION NAME }}/users
    method: GET
- name: service_owners
  endpoint:
    path: /{service}/
    method: GET
    data_selector: results
    params:
      page: '1'
      page_size: '10'
- name: service_owners
  endpoint:
    path: /{service}/
    method: GET
    data_selector: results
- name: owner_detail
  endpoint:
    path: /{service}/{owner_username}/
    method: GET
- name: owner_detail
  endpoint:
    path: /api/v2/{service}/{owner_username}/
    method: GET
- name: user_session
  endpoint:
    path: /{service}/{owner_username}/user-sessions/
    method: GET
    data_selector: results
    params:
      page: '1'
      page_size: '20'
- name: user_session_list
  endpoint:
    path: /{service}/{owner_username}/user-sessions/
    method: GET
    data_selector: results
    params: {}
- name: user_list
  endpoint:
    path: /{service}/{owner_username}/users/
    method: GET
    data_selector: results
- name: user_list
  endpoint:
    path: /{service}/{owner_username}/users/
    method: GET
- name: user_detail
  endpoint:
    path: /{service}/{owner_username}/users/{user_username_or_ownerid}/
    method: GET
    data_selector: object
- name: user_detail
  endpoint:
    path: /{service}/{owner_username}/users/{user_username_or_ownerid}/
    method: GET
- name: update_user
  endpoint:
    path: /api/v2/{service}/{owner_username}/users/{user_username_or_ownerid}/
    method: PATCH
- name: repository_list
  endpoint:
    path: /repos_list
    method: GET
- name: update_user
  endpoint:
    path: /api/v2/{service}/{owner_username}/users/{user_username_or_ownerid}/
    method: PATCH
- name: repository_detail
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/
    method: GET
- name: repository_list
  endpoint:
    path: /repos/
    method: GET
    data_selector: results
- name: repository_config
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/config/
    method: GET
- name: repository_detail
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/
    method: GET
- name: branch_list
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/branches/
    method: GET
    data_selector: results
    params: {}
- name: repository_config
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/config/
    method: GET
- name: branch_detail
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/branches/{name}/
    method: GET
    data_selector: object
- name: branch_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/branches/
    method: GET
    data_selector: results
    params: {}
- name: commit_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/commits/
    method: GET
- name: branch_detail
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/branches/{name}/
    method: GET
    data_selector: object
- name: commit_detail
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/commits/{commitid}/
    method: GET
- name: commit_uploads
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/commits/{commitid}/uploads/
    method: GET
    data_selector: results
    params:
      page: '1'
      page_size: '20'
- name: commit
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/commits
    method: GET
    data_selector: results
    params:
      branch: branch
- name: comparison
  endpoint:
    path: /repos/{service}/{owner_username}/repos/{repo_name}/compare/
    method: GET
- name: commit_detail
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/commits/{commitid}/
    method: GET
- name: component_comparison
  endpoint:
    path: /repos/{owner_username}/repos/{repo_name}/compare/components
    method: GET
- name: commit_uploads
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/commits/{commitid}/uploads/
    method: GET
    data_selector: results
- name: file_comparison
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/compare/file/{file_path}
    method: GET
- name: comparison
  endpoint:
    path: /repos/{owner_username}/repos/{repo_name}/compare/
    method: GET
- name: flag_comparison
  endpoint:
    path: /repos/{service}/{owner_username}/repos/{repo_name}/compare/flags
    method: GET
- name: component_comparison
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/compare/components
    method: GET
- name: impacted_files_comparison
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/compare/impacted_files
    method: GET
- name: file_comparison
  endpoint:
    path: /repos/{service}/{owner_username}/repos/{repo_name}/compare/file/{file_path}
    method: GET
- name: segmented_file_comparison
  endpoint:
    path: /compare/segments/{file_path}
    method: GET
    data_selector: segments
    params: {}
- name: flag_comparison
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/compare/flags
    method: GET
- name: component_list
  endpoint:
    path: /repos/{service}/{owner_username}/repos/{repo_name}/components/
    method: GET
- name: impacted_files_comparison
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/compare/impacted_files
    method: GET
- name: segmented_file_comparison
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/compare/segments/{file_path}
    method: GET
- name: coverage_trend
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/coverage/
    method: GET
    data_selector: results
    params:
      interval: 1d
- name: component_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/components/
    method: GET
- name: file_coverage_report
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/file_report/{path}/
    method: GET
- name: coverage_trend
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/coverage/
    method: GET
    params:
      interval: 1d
- name: commit_coverage_report
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/report/
    method: GET
- name: file_coverage_report
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/file_report/{path}/
    method: GET
- name: coverage_report_tree
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/report/tree
    method: GET
    data_selector: object
- name: commit_coverage_report
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/report/
    method: GET
- name: commit_coverage_totals
  endpoint:
    path: /repos/{repo_name}/totals/
    method: GET
    data_selector: totals
- name: coverage_report_tree
  endpoint:
    path: /repos/{service}/{owner_username}/repos/{repo_name}/report/tree
    method: GET
    data_selector: object
    params:
      depth: '1'
- name: flag_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/flags/
    method: GET
- name: commit_coverage_totals
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/totals/
    method: GET
- name: coverage_trend
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/flags/{flag_name}/coverage/
    method: GET
    data_selector: results
    params:
      interval: 1d
- name: flag_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/flags/
    method: GET
    data_selector: results
    params: {}
- name: pull_list
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/pulls/
    method: GET
- name: coverage_trend
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/flags/{flag_name}/coverage/
    method: GET
    data_selector: results
    params:
      interval: 1d
- name: pull_detail
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/pulls/{pullid}/
    method: GET
- name: pull_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/pulls/
    method: GET
    data_selector: results
    params: {}
- name: test_results
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/test-results/
    method: GET
    data_selector: results
- name: pull_detail
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/pulls/{pullid}/
    method: GET
- name: test_results_detail
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/test-results/{id}/
    method: GET
- name: test_results
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/test-results/
    method: GET
- name: service_owners
  endpoint:
    path: /{service}/
    method: GET
    data_selector: results
    params:
      page: '1'
      page_size: '10'
- name: test_results_detail
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/test-results/{id}/
    method: GET
- name: repository_list
  endpoint:
    path: /repos_list
    method: GET
    data_selector: results
    params: {}
- name: service_owners
  endpoint:
    path: /{service}/
    method: GET
    data_selector: results
    params:
      page: '1'
- name: branch_list
  endpoint:
    path: /repos/{service}/{owner_username}/repos/{repo_name}/branches/
    method: GET
- name: repository_list
  endpoint:
    path: /repos/
    method: GET
- name: commit_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/commits/
    method: GET
- name: comparison
  endpoint:
    path: /repos/{service}/{owner_username}/repos/{repo_name}/compare/
    method: GET
- name: branch_list
  endpoint:
    path: /repos/{service}/{owner_username}/repos/{repo_name}/branches/
    method: GET
- name: components
  endpoint:
    path: /repos/{service}/{owner_username}/repos/{repo_name}/components/
    method: GET
- name: commit
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/commits
    method: GET
    data_selector: results
- name: coverage_trend
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/coverage/
    method: GET
    data_selector: results
    params:
      interval: 1d
- name: comparison
  endpoint:
    path: /repos/{service}/{owner_username}/repos/{repo_name}/compare/
    method: GET
- name: component_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/components/
    method: GET
- name: flag_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/flags/
    method: GET
    data_selector: results
    params:
      page: integer
      page_size: integer
- name: pulls
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/pulls/
    method: GET
    data_selector: results
- name: coverage_trend
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/coverage/
    method: GET
    data_selector: results
    params:
      interval: 1d
      page: '1'
- name: test_results
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/test-results/
    method: GET
    data_selector: results
- name: flag_list
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/flags/
    method: GET
    data_selector: results
    params:
      page: '1'
      page_size: '30'
- name: pull_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/pulls/
    method: GET
- name: users
  endpoint:
    path: /{{ SERVICE NAME }}/{{ ORGANIZATION NAME }}/users
    method: GET
- name: test_results
  endpoint:
    path: /service/{owner_username}/repos/{repo_name}/test-results/
    method: GET
    data_selector: results
- name: users
  endpoint:
    path: /{{ SERVICE NAME }}/{{ ORGANIZATION NAME }}/users
    method: GET
- name: coverage
  endpoint:
    path: /api/coverage
    method: POST
    data_selector: data
    params: {}
- name: add
  endpoint:
    path: /api/add
    method: POST
- name: subtract
  endpoint:
    path: /api/subtract
    method: POST
- name: multiply
  endpoint:
    path: /api/multiply
    method: POST
- name: divide
  endpoint:
    path: /api/divide
    method: POST
- name: requirements
  endpoint:
    path: /api/requirements.txt
    method: GET
    data_selector: dependencies
    params: {}
- name: upload_coverage
  endpoint:
    path: /upload
    method: POST
- name: add
  endpoint:
    path: /api/add
    method: POST
    data_selector: result
- name: subtract
  endpoint:
    path: /api/subtract
    method: POST
    data_selector: result
- name: multiply
  endpoint:
    path: /api/multiply
    method: POST
    data_selector: result
- name: divide
  endpoint:
    path: /api/divide
    method: POST
    data_selector: result
- name: coverage
  endpoint:
    path: /gh/{repository}/commits
    method: GET
    data_selector: coverage
    params: {}
- name: calculator
  endpoint:
    path: /api/:operation
    method: POST
    data_selector: response.data
- name: flags
  endpoint:
    path: /flags
    method: POST
    data_selector: flags
    params: {}
- name: api_operation
  endpoint:
    path: /api/:operation
    method: POST
    data_selector: data
- name: home
  endpoint:
    path: /
    method: GET
    data_selector: file
- name: calculator_test
  endpoint:
    path: /static/js/calculator.test.js
    method: GET
    data_selector: tests
    params: {}
- name: coverage
  endpoint:
    path: /api/v4.6/coverage
    method: GET
    data_selector: data
    params: {}
- name: codecov_flags
  endpoint:
    path: /flags
    method: POST
    data_selector: flags
    params: {}
- name: add
  endpoint:
    path: /api/add
    method: POST
- name: subtract
  endpoint:
    path: /api/subtract
    method: POST
- name: multiply
  endpoint:
    path: /api/multiply
    method: POST
- name: divide
  endpoint:
    path: /api/divide
    method: POST
- name: coverage
  endpoint:
    path: /api/v4/coverage
    method: POST
    data_selector: data
    params: {}
- name: code coverage
  endpoint:
    path: /v4.6/docs/bitbucket-2-getting-a-codecov-account-and-uploading-coverage
    method: GET
    data_selector: coverage_data
- name: coverage
  endpoint:
    path: /api/coverage
    method: GET
    data_selector: coverage_data
    params: {}
- name: add
  endpoint:
    path: /api/add
    method: POST
- name: subtract
  endpoint:
    path: /api/subtract
    method: POST
- name: multiply
  endpoint:
    path: /api/multiply
    method: POST
- name: divide
  endpoint:
    path: /api/divide
    method: POST
- name: critical_files
  endpoint:
    path: /v4.6/docs/manual-critical-file-labelling
    method: GET
    data_selector: critical_files_paths
    params: {}
- name: calculator
  endpoint:
    path: /api/:operation
    method: POST
    data_selector: data
- name: flags
  endpoint:
    path: /v4.6/docs/bitbucket-5b-setting-coverage-standards-with-flags
    method: GET
    data_selector: flags
    params: {}
- name: flags
  endpoint:
    path: /flags
    method: POST
    data_selector: flags
    params: {}
- name: add
  endpoint:
    path: /api/add
    method: POST
    data_selector: result
- name: subtract
  endpoint:
    path: /api/subtract
    method: POST
    data_selector: result
- name: multiply
  endpoint:
    path: /api/multiply
    method: POST
    data_selector: result
- name: divide
  endpoint:
    path: /api/divide
    method: POST
    data_selector: result
- name: repository_coverage
  endpoint:
    path: /v4.6/repositories/{owner}/{repo}/coverage
    method: GET
    data_selector: data
    params: {}
- name: critical_file
  endpoint:
    path: /v4.6/docs/manual-critical-file-labelling
    method: GET
    data_selector: critical_files_paths
    params: {}
- name: api_operation
  endpoint:
    path: /api/:operation
    method: POST
    data_selector: data
    params: {}
- name: coverage
  endpoint:
    path: /v4.6/coverage
    method: POST
    data_selector: data
    params: {}
- name: frontend
  endpoint:
    path: /latest/linux/codecov
    method: GET
- name: add
  endpoint:
    path: /api/add
    method: POST
- name: subtract
  endpoint:
    path: /api/subtract
    method: POST
- name: multiply
  endpoint:
    path: /api/multiply
    method: POST
- name: divide
  endpoint:
    path: /api/divide
    method: POST
- name: flags
  endpoint:
    path: /flags
    method: POST
    data_selector: flags
- name: critical_files
  endpoint:
    path: /v4.6/docs/manual-critical-file-labelling
    method: GET
    data_selector: critical_files_paths
- name: repository_upload_token
  endpoint:
    path: /<owner>/<repo>/settings
    method: GET
    data_selector: token
    params: {}
- name: add_users
  endpoint:
    path: /account/<owner>/users
    method: GET
    data_selector: users
    params: {}
- name: api_operation
  endpoint:
    path: /api/:operation
    method: POST
    data_selector: data
- name: flags
  endpoint:
    path: /flags
    method: POST
    data_selector: flags
- name: metadata
  endpoint:
    path: /alpine/latest
    method: GET
    data_selector: artifact
- name: flags
  endpoint:
    path: /flags
    method: GET
- name: coverage
  endpoint:
    path: /upload
    method: POST
    data_selector: data
    params: {}
- name: merge_commits
  endpoint:
    path: /v4.6/merge_commits
    method: GET
    data_selector: data
    params: {}
- name: repository_users
  endpoint:
    path: /account/{provider}/{owner}/users
    method: GET
    data_selector: users
- name: metadata
  endpoint:
    path: /alpine/latest
    method: GET
    data_selector: artifact
- name: merge_commits
  endpoint:
    path: /merge_commits
    method: GET
    data_selector: data
    params: {}
- name: flags
  endpoint:
    path: /flags
    method: GET
    data_selector: data
- name: coverage
  endpoint:
    path: /codecov
    method: POST
    data_selector: status
    params: {}
- name: coverage
  endpoint:
    path: /coverage
    method: GET
    data_selector: project
    params: {}
- name: flags
  endpoint:
    path: /flags
    method: GET
    data_selector: flags
    params: {}
- name: comment
  endpoint:
    path: /pull-request-comments
    method: POST
    data_selector: comment
    params: {}
- name: coverage
  endpoint:
    path: status
    method: GET
    data_selector: project
    params: {}
- name: default_rules
  endpoint:
    path: /v4.6/docs/default_rules
    method: GET
    data_selector: default_rules
    params: {}
- name: slack_notification
  endpoint:
    path: coverage/notify/slack
    method: POST
    data_selector: default
    params: {}
- name: gitter_notification
  endpoint:
    path: coverage/notify/gitter
    method: POST
    data_selector: default
    params: {}
- name: pull_request_comments
  endpoint:
    path: /pull_request_comments
    method: POST
    data_selector: comments
- name: impact_analysis_token
  endpoint:
    path: /settings/token
    method: GET
- name: Impact Analysis Token
  endpoint:
    path: /repository/settings
    method: GET
    data_selector: token
    params: {}
- name: status_checks
  endpoint:
    path: /status/checks
    method: GET
    data_selector: checks
    params: {}
- name: default_rules
  endpoint:
    path: /v4.6/docs/default_rules
    method: GET
- name: impact_analysis
  endpoint:
    path: /impact_analysis
    method: POST
    data_selector: data
    params: {}
- name: impact_analysis_token
  endpoint:
    path: /impact/analysis/token
    method: GET
- name: slack
  endpoint:
    path: /slack/notify
    method: POST
    data_selector: default
- name: gitter
  endpoint:
    path: /gitter/notify
    method: POST
    data_selector: default
- name: impact_analysis
  endpoint:
    path: /impact
    method: GET
    data_selector: data
    params: {}
- name: impact_analysis
  endpoint:
    path: /impact-analysis
    method: POST
    data_selector: data
    params: {}
- name: impact_analysis
  endpoint:
    path: /impact-analysis
    method: POST
    data_selector: data
    params:
      token: CODECOV_OTEL_PROFILING_TOKEN
- name: impact_analysis
  endpoint:
    path: /impact-analysis
    method: POST
    data_selector: data
- name: ci_detection
  endpoint:
    path: /ci/detection
    method: POST
    data_selector: ci_status
    params: {}
- name: ci_ignore
  endpoint:
    path: /ci/ignore
    method: POST
    data_selector: ignored_ci_status
    params: {}
- name: impact_analysis
  endpoint:
    path: /v4.6/impact-analysis
    method: POST
    data_selector: data
    params: {}
- name: codecov
  endpoint:
    path: /codecov
    method: POST
    data_selector: token
    params: {}
- name: codecov_yml
  endpoint:
    path: codecov.yml
    method: POST
    data_selector: comment
    params: {}
- name: coverage
  endpoint:
    path: /coverage
    method: GET
    data_selector: coverage
    params: {}
- name: notifications
  endpoint:
    path: /services/notifications
    method: GET
    data_selector: records
- name: database
  endpoint:
    path: /services/database
    method: GET
    data_selector: records
- name: redis
  endpoint:
    path: /services/redis
    method: GET
    data_selector: records
- name: codecov
  endpoint:
    path: /codecov
    method: POST
    data_selector: report
    params: {}
- name: codecov
  endpoint:
    path: /codecov
    method: POST
    data_selector: uploads
    params: {}
- name: coverage_configuration
  endpoint:
    path: /coverage/configuration
    method: GET
    data_selector: coverage
    params: {}
- name: GitHub App Integration
  endpoint:
    path: /github/apps
    method: POST
    data_selector: app
    params: {}
- name: archive
  endpoint:
    path: /archive
    method: POST
    data_selector: reports
    params: {}
- name: notifications
  endpoint:
    path: /services/notifications
    method: POST
- name: database
  endpoint:
    path: /services/database
    method: GET
- name: redis
  endpoint:
    path: /services/redis
    method: GET
- name: users
  endpoint:
    path: /{{ SERVICE NAME }}/{{ ORGANIZATION NAME }}/users
    method: GET
    data_selector: ''
- name: owner_detail
  endpoint:
    path: /{service}/{owner_username}/
    method: GET
- name: user_list
  endpoint:
    path: /{service}/{owner_username}/users/
    method: GET
    data_selector: results
    params: {}
- name: repository_list
  endpoint:
    path: /{service}/{owner_username}/repos/
    method: GET
- name: repository_detail
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/
    method: GET
- name: github_app_integration
  endpoint:
    path: /organizations/YOUR_GITHUB_ORG/settings/apps/new
    method: GET
- name: branch_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/branches/
    method: GET
- name: branch_detail
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/branches/{name}/
    method: GET
- name: archive
  endpoint:
    path: /archive
    method: POST
    data_selector: reports
    params: {}
- name: commit_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/commits/
    method: GET
    params:
      branch: branch
- name: commit_detail
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/commits/{commitid}/
    method: GET
- name: Create a Backup
  endpoint:
    path: /database-backups/create
    method: POST
    data_selector: result
    params: {}
- name: Recover From a Backup
  endpoint:
    path: /database-backups/recover
    method: POST
    data_selector: result
    params: {}
- name: comparison
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/compare/
    method: GET
    data_selector: object
    params: {}
- name: file_comparison
  endpoint:
    path: /repos/{service}/{owner_username}/repos/{repo_name}/compare/file/{file_path}
    method: GET
- name: users
  endpoint:
    path: /{{ SERVICE NAME }}/{{ ORGANIZATION NAME }}/users
    method: GET
- name: flag_comparison
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/compare/flags
    method: GET
- name: owner_detail
  endpoint:
    path: /{service}/{owner_username}/
    method: GET
- name: coverage_trend
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/coverage/
    method: GET
    data_selector: results
    params: {}
- name: user_list
  endpoint:
    path: /{service}/{owner_username}/users/
    method: GET
- name: commit_coverage_report
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/report/
    method: GET
    data_selector: report
    params: {}
- name: repository_list
  endpoint:
    path: /{service}/{owner_username}/repos/
    method: GET
- name: flag_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/flags/
    method: GET
- name: repository_detail
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/
    method: GET
- name: coverage_trend
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/flags/{flag_name}/coverage/
    method: GET
- name: branch_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/branches/
    method: GET
    data_selector: results
    params: {}
- name: pulls
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/pulls/
    method: GET
- name: branch_detail
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/branches/{name}/
    method: GET
- name: pull_detail
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/pulls/{pullid}/
    method: GET
- name: commit_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/commits/
    method: GET
    data_selector: results
    params:
      branch: branch
- name: users
  endpoint:
    path: /v4.6/reference/users
    method: GET
- name: repos
  endpoint:
    path: /v4.6/reference/repos
    method: GET
- name: branches
  endpoint:
    path: /v4.6/reference/branches-1
    method: GET
- name: commits
  endpoint:
    path: /v4.6/reference/commits-1
    method: GET
- name: pulls
  endpoint:
    path: /v4.6/reference/pulls
    method: GET
- name: commit_detail
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/commits/{commitid}/
    method: GET
- name: settings
  endpoint:
    path: /api/pub/{gh|gl|bb}/{owner}/{repo}/settings
    method: GET
- name: comparison
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/compare/
    method: GET
- name: commits
  endpoint:
    path: /api/gh/:owner/:repo/commits
    method: GET
    params:
      page: 2
- name: pulls
  endpoint:
    path: /api/gh/:owner/:repo/pulls
    method: GET
    params:
      limit: 1
- name: file_comparison
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/compare/file/{file_path}
    method: GET
- name: flag_comparison
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/compare/flags
    method: GET
- name: users
  endpoint:
    path: /v4.6/reference/users
    method: GET
- name: repos
  endpoint:
    path: /v4.6/reference/repos
    method: GET
- name: branches
  endpoint:
    path: /v4.6/reference/branches
    method: GET
- name: pull_requests
  endpoint:
    path: /v4.6/reference/pulls
    method: GET
- name: commits
  endpoint:
    path: /v4.6/reference/commits
    method: GET
- name: coverage_trend
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/coverage/
    method: GET
    data_selector: results
    params:
      interval: 1d
- name: totals
  endpoint:
    path: /totals
    method: GET
    data_selector: totals
- name: diff
  endpoint:
    path: /diff
    method: GET
    data_selector: diff
- name: commit_coverage_report
  endpoint:
    path: /api/v2/{service}/{owner_username}/repos/{repo_name}/report/
    method: GET
- name: users
  endpoint:
    path: /v4.6/reference/users
    method: GET
- name: repos
  endpoint:
    path: /v4.6/reference/repos
    method: GET
- name: branches
  endpoint:
    path: /v4.6/reference/branches
    method: GET
- name: commits
  endpoint:
    path: /v4.6/reference/commits
    method: GET
- name: pulls
  endpoint:
    path: /v4.6/reference/pulls
    method: GET
- name: flags
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/flags/
    method: GET
- name: coverage_trend
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/flags/{flag_name}/coverage/
    method: GET
- name: users
  endpoint:
    path: /v4.6/reference/users
    method: GET
- name: repos
  endpoint:
    path: /v4.6/reference/repos
    method: GET
- name: branches
  endpoint:
    path: /v4.6/reference/branches
    method: GET
- name: commits
  endpoint:
    path: /v4.6/reference/commits
    method: GET
- name: pulls
  endpoint:
    path: /v4.6/reference/pulls
    method: GET
- name: teams
  endpoint:
    path: /api/gh
    method: GET
- name: single_team
  endpoint:
    path: /api/gh/:owner
    method: GET
- name: pulls
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/pulls/
    method: GET
    data_selector: results
- name: repositories
  endpoint:
    path: /api/gh/:owner
    method: GET
    data_selector: repos
- name: single_repository
  endpoint:
    path: /api/gh/:owner/:repo
    method: GET
    data_selector: ''
- name: pull_detail
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/pulls/{pullid}/
    method: GET
- name: branches_list
  endpoint:
    path: /api/gh/:owner/:repo/branches
    method: GET
- name: branch_detail
  endpoint:
    path: /api/gh/:owner/:repo/branch/:branch
    method: GET
- name: repository_settings
  endpoint:
    path: /api/pub/{gh|gl|bb}/{owner}/{repo}/settings
    method: GET
- name: pull_requests
  endpoint:
    path: /api/gh/:owner/:repo/pulls
    method: GET
    data_selector: pulls
    params:
      state: open
      sort: pullid
      order: desc
- name: single_pull_request
  endpoint:
    path: /api/gh/:owner/:repo/pull/1
    method: GET
- name: commits
  endpoint:
    path: /api/gh/:owner/:repo/commits
    method: GET
    params:
      page: 2
- name: pulls
  endpoint:
    path: /api/gh/:owner/:repo/pulls
    method: GET
    params:
      limit: 1
- name: commits
  endpoint:
    path: /api/gh/:owner/:repo/commits
    method: GET
    data_selector: commits
    params: {}
- name: single_commit
  endpoint:
    path: /api/gh/:owner/:repo/commit/:sha
    method: GET
    data_selector: null
    params: {}
- name: force_notifications
  endpoint:
    path: /api/gh/:owner/:repo/commit/:sha
    method: POST
    data_selector: null
    params: {}
- name: compare_commits
  endpoint:
    path: /api/gh/:owner/:repo/compare/:base...:head
    method: GET
    data_selector: null
    params: {}
- name: folder_totals
  endpoint:
    path: /api/gh/:owner/:repo/tree/:ref/:path
    method: GET
    data_selector: commit.folder_totals
    params: {}
- name: users
  endpoint:
    path: /v4.6/reference/users
    method: GET
- name: repos
  endpoint:
    path: /v4.6/reference/repos
    method: GET
- name: branches
  endpoint:
    path: /v4.6/reference/branches
    method: GET
- name: commits
  endpoint:
    path: /v4.6/reference/commits
    method: GET
- name: pulls
  endpoint:
    path: /v4.6/reference/pulls
    method: GET
- name: totals
  endpoint:
    path: /totals
    method: GET
    data_selector: totals
    params: {}
- name: diff
  endpoint:
    path: /diff
    method: GET
    data_selector: diff
    params: {}
- name: User list
  endpoint:
    path: /v4.6/reference/users_list
    method: GET
- name: Repository list
  endpoint:
    path: /v4.6/reference/repos_list
    method: GET
- name: Branch list
  endpoint:
    path: /v4.6/reference/repos_branches_list
    method: GET
- name: Commit list
  endpoint:
    path: /v4.6/reference/repos_commits_list
    method: GET
- name: Pull list
  endpoint:
    path: /v4.6/reference/repos_pulls_list
    method: GET
- name: sunburst
  endpoint:
    path: /gh/:owner/:repo/graphs/sunburst.svg
    method: GET
    data_selector: null
    params: {}
- name: author
  endpoint:
    path: /v4.6/reference/author
    method: GET
    data_selector: author
- name: users
  endpoint:
    path: /v4.6/reference/users
    method: GET
    data_selector: users
- name: repos
  endpoint:
    path: /v4.6/reference/repos
    method: GET
    data_selector: repos
- name: branches
  endpoint:
    path: /v4.6/reference/branches
    method: GET
    data_selector: branches
- name: commits
  endpoint:
    path: /v4.6/reference/commits
    method: GET
    data_selector: commits
- name: tree
  endpoint:
    path: /gh/:owner/:repo/commit/:sha/graphs/tree.svg
    method: GET
    data_selector: graphs
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: repos
  endpoint:
    path: /repos
    method: GET
- name: branches
  endpoint:
    path: /branches
    method: GET
- name: commits
  endpoint:
    path: /commits
    method: GET
- name: pulls
  endpoint:
    path: /pulls
    method: GET
- name: icicle
  endpoint:
    path: /gh/:owner/:repo/graphs/icicle.svg
    method: GET
    data_selector: ''
    params: {}
- name: list_teams
  endpoint:
    path: /api/gh
    method: GET
- name: get_single_team
  endpoint:
    path: /api/gh/:owner
    method: GET
- name: repositories
  endpoint:
    path: /api/gh/:owner
    method: GET
- name: single_repository
  endpoint:
    path: /api/gh/:owner/:repo
    method: GET
- name: activate_repository
  endpoint:
    path: /api/pub/gh/:owner/:repo/settings
    method: POST
    data_selector: action=activate
- name: deactivate_repository
  endpoint:
    path: /api/pub/gh/:owner/:repo/settings
    method: POST
    data_selector: action=deactivate
- name: regenerate_upload_token
  endpoint:
    path: /api/pub/gh/:owner/:repo/settings
    method: POST
    data_selector: action=regenerate
- name: list_branches
  endpoint:
    path: /api/gh/:owner/:repo/branches
    method: GET
- name: get_branch
  endpoint:
    path: /api/gh/:owner/:repo/branch/:branch
    method: GET
- name: owner_detail
  endpoint:
    path: /{service}/{owner_username}/
    method: GET
- name: repository_list
  endpoint:
    path: /{service}/{owner_username}/repos/
    method: GET
- name: pull_requests
  endpoint:
    path: /api/gh/:owner/:repo/pulls
    method: GET
    data_selector: pulls
    params:
      state: open
      sort: pullid
      order: desc
- name: single_pull_request
  endpoint:
    path: /api/gh/:owner/:repo/pull/1
    method: GET
    data_selector: pull
    params: {}
- name: branch_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/branches/
    method: GET
    data_selector: results
- name: commits
  endpoint:
    path: /api/gh/:owner/:repo/commits
    method: GET
    data_selector: commits
    params: {}
- name: single_commit
  endpoint:
    path: /api/gh/:owner/:repo/commit/:sha
    method: GET
    data_selector: commit
    params: {}
- name: force_notifications
  endpoint:
    path: /api/gh/:owner/:repo/commit/:sha
    method: POST
    data_selector: null
    params: {}
- name: compare_commits
  endpoint:
    path: /api/gh/:owner/:repo/compare/:base...:head
    method: GET
    data_selector: null
    params: {}
- name: folder_totals
  endpoint:
    path: /api/gh/:owner/:repo/tree/:ref/:path
    method: GET
    data_selector: commit.folder_totals
    params: {}
- name: commit_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/commits/
    method: GET
    data_selector: results
    params:
      branch: branch
- name: comparison
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/compare/
    method: GET
- name: sunburst
  endpoint:
    path: /gh/:owner/:repo/graphs/sunburst.svg
    method: GET
    data_selector: graph
    params: {}
- name: coverage_trend
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/coverage/
    method: GET
    data_selector: results
    params:
      interval: 1d
- name: repos
  endpoint:
    path: /gh/:owner/:repo/graphs/tree.svg
    method: GET
    data_selector: graphs
    params: {}
- name: icicle
  endpoint:
    path: /gh/:owner/:repo/graphs/icicle.svg
    method: GET
    data_selector: graph
    params: {}
- name: flags
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/flags/
    method: GET
    data_selector: results
    params:
      page: '1'
      page_size: '100'
- name: pulls
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/pulls/
    method: GET
    data_selector: results
    params: {}
- name: activate_repository
  endpoint:
    path: /api/pub/gh/:owner/:repo/settings
    method: POST
    data_selector: action=activate
- name: deactivate_repository
  endpoint:
    path: /api/pub/gh/:owner/:repo/settings
    method: POST
    data_selector: action=deactivate
- name: regenerate_upload_token
  endpoint:
    path: /api/pub/gh/:owner/:repo/settings
    method: POST
    data_selector: action=regenerate
- name: owner_detail
  endpoint:
    path: /{service}/{owner_username}/
    method: GET
- name: repository_list
  endpoint:
    path: /{service}/{owner_username}/repos/
    method: GET
- name: branch_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/branches/
    method: GET
- name: commit_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/commits/
    method: GET
    data_selector: results
    params:
      branch: branch
- name: comparison
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/compare/
    method: GET
- name: coverage_trend
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/coverage/
    method: GET
    data_selector: results
    params:
      interval: 1d
- name: flag_list
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/flags/
    method: GET
- name: pulls
  endpoint:
    path: /{service}/{owner_username}/repos/{repo_name}/pulls/
    method: GET
    data_selector: results
    params: {}
notes:
- Version 4 is recommended because it uploads and archives the reports to S3 immediately.
- Some objects like Contact may return nulls in deeply nested fields
- Uses a repository upload token for authentication.
- Requires integration setup for GitHub, Bitbucket, or GitLab.
- If you notice that data returned by the endpoints is out of date, you might have
  to login to Codecov.
- Must install the Codecov GitHub app for integration.
- GitHub users must install the Codecov GitHub app for their organization.
- If not an admin of a GitHub organization, may need to request access from an admin.
- If you are a GitHub user you MUST install the Codecov GitHub app for your organization
  - Codecov can't function without it.
- If you are signing up via GitHub and not an admin of your Github organization, you
  may need to request access from an admin to authorize Codecov as a third-party GitHub
  application.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- If you notice that data returned by the endpoints is out of date, you might have
  to login to Codecov. This re-triggers a synch with the code provider which should
  result in data being up-to-date once again.
- Service owners endpoint requires a valid service parameter.
- Requires the caller to be an admin of the requested organization
- Returns a paginated list of users for the specified owner (org)
- 'Allowed fields: activated (boolean value to activate or deactivate the user)'
- Returns a paginated list of repositories for the specified provider service and
  owner username
- Optionally filterable by a list of repository names or a search term
- Log in to see full request history
- URL for this request expired after 30 days
- Returns a paginated list of uploads for a single commit by commitid (SHA)
- Requires authentication via Bearer token
- Will only return pre-computed impacted files comparisons if available
- If unavailable `files` will be empty, however once the computation is ready the
  files will appear on subsequent calls
- Returns a paginated list of timeseries measurements aggregated by the specified
  interval.
- Requires setup of connected app in API
- Returns only top-level data by default but the depth of the traversal can be controlled
  via the depth parameter.
- Returns a paginated list of pulls for the specified repository
- URL for this request expired after 30 days.
- Use this token in your API requests as stated below.
- The URL for this request expired after 30 days.
- In some cases user auto activation was not working as expected. This has been resolved.
- Codecov v5 brings many new features to our on-premises release that have been rolling
  out to our cloud version of Codecov for quite some time.
- It is highly recommended to upgrade to v5 first then install the TimescaleDB dependency.
- GitLab integration now properly handles expiry and refreshing of oauth tokens based
  on Gitlab's new oauth token expiration scheme.
- GitLab integration no longer uses public bots to post commit statuses on public
  repos, as this behavior is now invalid in the GitLab API.
- Gitlab integration will not properly support API calls that contain files, folders,
  and branches with spaces in the file name.
- Due to a user impacting bug in enterprise-gateway and enterprise-frontend a point
  release was issued and pushed over the existing v5.0.1 tag.
- Codecov centrally supports the 'Function Coverage' from BullseyeCoverage, and not
  the 'Condition/Decision Coverage' that BullseyeCoverage additionally offers.
- Required configuration for enterprise-frontend includes setting CODECOV_BASE_HOST
  and CODECOV_API_HOST as environment variables.
- The notification task timeout can now be configured via an environment variable.
- 'Disabling the Rust-based processing feature can be handled via environment variable
  by setting: RUST_ENABLE_RATE = 0.0 in the worker.'
- Backup your Database Before Upgrading
- The Codecov Bash Uploader will be Deprecated in Self-Hosted
- Skipping this version recommended
- If you are uploading from version v4.6.2 or earlier, due to a potential error in
  database in migrations for certain users, we recommend skipping upgrade directly
  to v4.6.4 or later
- Codecov Self-hosted v4.6.0 marks the release of Codecov’s new internal REST API
  to our self-hosted clients.
- This new API will eventually assume all of the functionality of the current Codecov
  Self-hosted offering at the HTTP layer.
- Updated the Salesforce/APEX processor to properly ingest only the test-result-codecoverage.json
  file, thus supporting the most recent updates to APEX coverage reporting.
- After updating to v4.6.2, if issues with notification are encountered -- such as
  statuses not appearing on Pull Requests -- it is recommended to set RUST_ENABLE_RATE=0.0,
  restart, and see if the error is resolved.
- GitHub users may need to request access from an admin to authorize Codecov as a
  third-party application.
- Not ready to use Codecov on your own repositories? Try it out for yourself with
  the Codecov tutorials for GitHub, Bitbucket, or Gitlab to see what Codecov has to
  offer.
- Upgrading to 4.6.x requires adding a new container into your Codecov Self-Hosted
  infrastructure.
- 'Ensure your repository has the following structure: LICENSE, README.md, api/__init__.py,
  api/requirements.txt'
- Uses OAuth2 for authentication — requires setup in GitHub.
- Not ready to use Codecov on your own repositories?
- Try it out for yourself with the Codecov tutorials for GitHub, Bitbucket, or Gitlab
  to see what Codecov has to offer.
- If you are signing up via GitHub, you may need to request access from an admin to
  authorize Codecov as a third-party application.
- Configuration allows for a 1% threshold, meaning the true minimum is 99%.
- By marking files as critical in Codecov, you can more quickly identify changes in
  coverage to those files.
- These docs are for v4.6. Click to read the latest docs for v2023.
- Ensure that our coverage always hits 100% with a 1% threshold
- Ensure backend server is running on port 8080.
- This workflow does a similar set of steps as our API workflow.
- In order for api/calculator.py to be marked as a critical file, the codecov.yml
  file must be merged into the main branch.
- Creating flags backend and frontend for coverage management
- Ensure your repository has the following structure.
- Uses OAuth2 with refresh token — requires setup of connected app in Codecov
- Backend flag targets 100% overall coverage.
- Frontend flag is set to auto coverage increase.
- Ensure to set the carryforward flag management in the codecov.yml file.
- Be sure to pull the CODECOV_TOKEN from the settings tab of the repository in Codecov.
- Ensure your default branch is 'main' for coverage information.
- Configuration allows for a 1% threshold below the 100% target.
- Files must be marked as critical in the codecov.yml file to be recognized.
- Requires setup of OAuth for API access.
- Codecov automatically merges coverage reports together, regardless of the language
  or CI workflow.
- Ensure your default branch is main in Codecov settings.
- Codecov fails a status check if 100% of the codebase is not covered with tests,
  allowing for a 1% threshold.
- In order for 'api/calculator.py' to be marked as a critical file, the 'codecov.yml'
  file must be merged into the 'main' branch.
- Creating two flags 'backend' and 'frontend' that encompass the 'api' and 'web' directories.
- Uses OAuth2 with refresh token
- Requires setup of flags in codecov.yml
- Codecov supports OAuth2 authentication.
- These docs are for v4.6.
- Ensure default branch is main to see coverage information.
- Codecov configuration allows for a 1% threshold below 100% coverage.
- The codecov.yml file must be merged into the main branch for critical files to be
  recognized.
- The critical label will appear for files that have a coverage change.
- Backend service must be running on port 8080 for the frontend to communicate.
- Flags help group coverage reports by function.
- Requires setup of connected app in Codecov
- Uses OAuth2 for authentication
- Ensure your default branch is main to see coverage information.
- Files must be marked as critical to identify changes in coverage.
- The `codecov.yml` file must be merged into the `main` branch for changes to take
  effect.
- Upload token is required for all uploads, except originating from public projects
  using Travis-CI, Circle CI, Azure, Github Actions.
- Codecov supports a maximum of 150 uploads per commit.
- Codecov only chooses commits that have successful CI builds.
- Flag management allows grouping coverage reports by function.
- If you have a public project on TravisCI, CircleCI, AppVeyor, Azure Pipelines, or
  GitHub Actions an upload token is not required.
- While this is generally useful, the most obvious use case is leveraging this metadata
  to setup a vendoring pipeline that fetches and verifies latest whenever it updates.
- Flags can help separate out different test suites
- This bot user must have permissions on the repo and Codecov (by logging in)
- No setup required. Automatic report merging for all CI and languages into a single
  report.
- Codecov takes coverage to the next level. Unlike open source and paid products,
  Codecov focuses on integration and promoting healthy pull requests.
- Codecov uses GitHub/Bitbucket/GitLab API's to authorize users.
- Codecov only shows branches and commits when content is uploaded to these resources.
- Not required for some public uploaders
- Codecov needs to get the bot's account OAuth token and link the user to your team.
- Status pages are a way that a user can display coverage data on the readme of a
  repository.
- Codecov requires setup of OAuth application for authentication.
- Uses OAuth2 with refresh token — requires setup of OAuth application in Codecov
- The following languages, and their reports, will be adjusted upon uploading to Codecov.
- If no Carryfoward flag specified in YAML, the default configuration is false.
- Codecov will analyze the pull/commit diff, detecting lines of code that changed
  without being adjusted.
- Flags allow you to isolate and categorize coverage reports for different tests and
  features in your project.
- Carryforward Flags are designed for projects that do not upload total coverage for
  every commit.
- Components allow you to isolate and categorize coverage data from your project with
  virtual filters.
- Setting the `comment` key to `true` is not a valid configuration, as it will overwrite
  the default configuration with a boolean value and preclude the sending of any comment.
- Codecov will merge your reports for you.
- By adding -F nightly we mark all the coverage report data for this build as nightly
  coverage data.
- A top-level default_rules field can be added to specify some behaviors to be applied
  by default to every status check.
- GitHub Checks and annotations for the patch status are enabled by default for all
  GitHub users.
- If you have disabled patch status in your YAML, Github Checks Annotations will not
  show up.
- Codecov will merge your reports for you
- Codecov performs a number of default path fixes for specific CI providers and situations
  where we will need to fix the path every single time.
- Status Checks and Flags do not support Regex rules
- Codecov delays notifications to make sure all reports are uploaded.
- If you have a new project, the correct answer is likely Components.
- Impact Analysis was formerly marketed as Runtime Insights.
- Impact Analysis is available in Open Beta.
- Setting the `comment` key to `true` is not a valid configuration.
- If `after_n_builds` is greater than the number of reports you upload for a commit,
  no comment will post.
- Requires pcov PHP extension installed and enabled in php.ini.
- Requires installation of the pcov PHP extension.
- Laravel apps almost always require a path fix to function properly.
- Uses API key for authentication
- In order to get started, you will need a repository that is using python 3.6+.
- Be sure to save down the dependencies to requirements.txt or similar.
- Codecov's path fixing feature was built to address issues with file paths in coverage
  reports.
- If uploaded reports fail to process, path fixing may help.
- In your repository settings page on Codecov, copy the Impact analysis token to be
  used when uploading telemetry reports.
- File paths will be read as regex patterns, so special characters in regex will need
  to be escaped using \ prior to the character.
- API changes may take time to propagate
- Impact Analysis was formerly marketed as Runtime Insights
- Impact Analysis is available in Open Beta
- Requires setup of Impact Analysis token in repository settings.
- Values should be between 0 and 1.
- Impact Analysis requires the pcov PHP extension
- Enabling pcov is dependent on the underlying system where you are running PHP
- No runtime dependency is required to use Manual Critical File Labelling
- Manual Critical File Labelling and Impact Analysis can be Used Together
- This package relies heavily on the `takeCoverage` method added to Node 15.1.0.
- Bash Uploader and Language-specific uploaders are deprecated
- Not ready to try Impact Analysis on your own repos? Follow our example repository
  to see a complete setup.
- Every CI provider is supported by Codecov
- Codecov centrally ingests .xml .json and .txt type coverage report formats.
- Some objects may return nulls in deeply nested fields
- Set the 'CI' environment variable to 'true' when running Docker.
- The Impact analysis token is required when uploading telemetry reports.
- Ensure to set the environment variables for version and environment.
- Service provider administrators automatically have full privileges in Codecov
- Always fork a branch from a successful CI commit that has coverage uploaded.
- The environment in which the application is currently running can be 'production',
  'local', 'dev', or 'test'.
- The percentage of your application's calls that are instrumented using this package
  should be between 0.01 and 0.1 for most applications.
- Codecov will reject reports that are over 12 hours old according to the timestamp
  in the report.
- Changing your YAML? A reminder to always validate your YAML before you deploy
- The default configuration for all repositories on Codecov includes a coverage range
  of 70..100, rounding down, and precision of 2.
- Upload token is required for identifying project ownership.
- Codecov detects CI services through the Commit Status API provided by GitHub/Bitbucket/GitLab.
- Uses environment variables for configuration
- Some commands may require additional arguments
- The new uploader is still undergoing active development to be in parity with the
  old bash uploader. As such, some features have not yet been brought over.
- Worthwhile to mention that the docker run command should also set the 'CI' environment
  variable to 'true'.
- If a GitHub Organization you wish to integrate with Codecov has a 'Request' button
  in the Organization Access list, be sure to click the 'Request' button.
- Requires setup of connected app in your repository service provider.
- Always fork a branch from a successful CI commit that has coverage uploaded
- Do not add a trailing slash to the base URL
- A common configuration error is to indent the service provider configuration under
  the setup block in your codecov.yml.
- Restart your Codecov Self-Hosted instance to complete the integration.
- Include ssl.pem for self-signed SSL
- Changing your YAML? A reminder to always validate your YAML before you deploy https://api.codecov.io/validate
- Docker Compose is only meant for trialing Codecov Self-Hosted
- Codecov Self-Hosted will not run without a trial license key.
- Codecov has deprecated bare metal deployment support.
- We recommend placing your self-hosted install of Codecov behind your company's firewall.
- The default configuration for all repositories on Codecov includes range, round,
  and precision settings.
- Support for the Bash Uploader will be deprecated in the future.
- A unique upload token is required to identify which project the coverage belongs
  to.
- Webhooks need to be enabled for the GitHub App to work.
- Metrics are Populated as They're Encountered
- Archived reports may contain source code
- Use Bucket Retention Policy
- The Codecov Application must be approved by GitHub Organization admins for access.
- Codecov Self-hosted does not endorse or support custom deployments beyond AWS, GCP,
  and Azure.
- If you’re using S3, you can instead ensure codecov runs on a VM with a StorageAdmin
  S3 role, or using a suitably permissioned S3 role.
- In line with industry best practices, we recommend placing your self-hosted install
  of Codecov behind your company's firewall, or otherwise perform other access controls
  such that it is only accessible by trusted staff and employees.
- We recommend periodically restarting services to clear any memory leaks, and refresh
  the worker tasks. We recommend doing this daily or, at the very least, weekly.
- Due to a lack of cluster mode support in the underlying message queuing system we
  use, Codecov can not support clustered Redis at this time.
- If you are encountering errors on uploads, or clicking links in statuses or comments,
  confirm you did not add a trailing slack at the end of the url.
- Codecov never stores source code, and never clones repositories.
- Codecov uses service APIs to retrieve source code and interact with the repository.
- Do not indent your service provider configuration in your codecov.yml.
- Use the access token generated in your Codecov account settings as the Authorization
  header.
- By default, we will not support bare metal deployments, or on-premises deployments
  into a customer's own data center.
- Key integrations for Codecov self-hosted include Team Bot and integrating your CI
  provider using the Codecov Uploader.
- Returns a paginated list of branches for the specified repository
- Configuration requires Codecov Enterprise v4.4.4 or newer
- URL expires after 30 days
- Requires service provider username and repository name as path parameters
- Returns a paginated list of timeseries measurements aggregated by the specified
  interval
- Optionally filterable by branch, start_date, end_date
- Returns a single branch by name. Includes head commit information embedded in the
  response.
- Using the headers is the recommended method for passing the token.
- Codecov API v1 deprecation in progress
- Using the headers (recommended method)
- Codecov API v1 deprecation in progress, please use Codecov API v2.
- Codecov API v1 deprecation in progress.
- Codecov API v1 deprecation in progress — please use the Codecov API v2.
- URL expires after 30 days.
- Codecov API v1 is being deprecated. Use Codecov API v2.
- Returns a paginated list of flags for the specified repository
- Optionally filterable by the state of the pull
- Codecov API v1 deprecation in progress. Please use the Codecov API v2.
- Optionally filterable by a list of repository names, a search term which matches
  against the name, whether the repository is active or not
- Codecov supports a large set of standard coverage formats
errors:
- '400 Bad Request: Check if the repository upload token is valid.'
- '404 Not Found: Ensure the correct endpoint is being used.'
- '401 Unauthorized: Recheck the authentication token.'
- '401 Unauthorized: Recheck token and permissions'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck token validity'
- '401 Unauthorized: Recheck authentication credentials'
- 'URL Expired: The URL for this request expired after 30 days'
- 'URL Expired: The URL for this request expired after 30 days.'
- '401 Unauthorized: Check your token'
- URL Expired
- '200: Response body object contains coverage info'
- '200: Successful response'
- '401: Unauthorized access, check credentials'
- '404: Resource not found'
- A common cause of errors / confusion occurs as a result of test failures or flaky
  tests in a CI pipeline that result in less coverage being uploaded for subsequent
  commits.
- Soft time limit (45s) exceeded for app.tasks.notify.Notify
- GitLab integration now properly handles expiry and refreshing of oauth tokens based
  on Gitlab's new oauth token expiration scheme.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Check your OAuth token.'
- '403 Forbidden: Check your permissions.'
- '401 Unauthorized: Check OAuth token validity.'
- '403 Forbidden: Ensure proper permissions for the token.'
- '401 Unauthorized: Recheck CODECOV_TOKEN or access permissions.'
- Failing status check if coverage is below target.
- 'Token not found: Make sure that you have added the variable and that the CI pipeline
  has access to the variable.'
- 'Error: 4xx or 5xx responses indicate issues with the API request.'
- 'Token not found: Ensure that you have added the variable and that the CI pipeline
  has access to the variable.'
- Changes found in between 243277d...143e200 (pseudo...base) which prevent comparing
  this pull request
- '401 Unauthorized: Check if the upload token is correct or if the project is private.'
- 'REQUEST_LIMIT_EXCEEDED: Ensure that you are not uploading to Codecov for nightly
  builds.'
- '401 Unauthorized: Check your access rights for private repositories.'
- no output in the CI
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'Different tests run: For example, Dependencies changed resulting in a different
  execute plan or encrypted variables may prevent some execution paths.'
- 'Flaky tests: For example, different error handling paths result in some exception
  handlers being tested and some not.'
- '401 Unauthorized: Check the Impact analysis token.'
- '401 Unauthorized: Recheck API key or permissions'
- Codecov will fail to properly process reports if paths do not match the git file
  structure.
- '401 Unauthorized: Check if the Impact analysis token is correct.'
- '400 Bad Request: Validate the request payload structure.'
- '401 Unauthorized: Recheck the Impact Analysis token or configuration'
- '401 Unauthorized: Recheck API token or permissions'
- '400 Bad Request: Check the request format and required parameters'
- 'MISSING_BASE_REPORT: Ensure the base commit has coverage uploaded.'
- 'NO_COVERAGE_UPLOADED: Ensure coverage results are uploaded for the pull request
  head.'
- 'UNKNOWN_AUTHOR: Ensure the email used to commit matches your GitHub account.'
- '400: Invalid YAML'
- '200: Success'
- No coverage uploaded for pull request head.
- 'Unknown Author: make sure the email is the same you login to Github'
- 400 Errors when uploading coverage
- '403: Forbidden - bot does not have access to the repository'
- Codecov will no longer support installs of Codecov v4.3.x and prior.
- If you don't receive comments on Pull Requests for Repositories with the App Integration
  installed, check the GitHub Webhook section.
- '401 Unauthorized: Check access key and secret key'
- '404 Not Found: Ensure bucket exists'
- '4xx errors: Not providing the slug of the repo will result in 4xx errors.'
- 'ERROR: Couldn''t connect to Docker daemon at http+docker://localunixsocket - is
  it running?'
- Couldn't connect to Docker daemon at http+docker://localunixsocket - is it running?
- '400 Bad Request: Check the request format and parameters'
- '403 Forbidden: Ensure access permissions are correctly set'
- '404 Not Found: Verify the endpoint and bucket name'
- 'Unauthorized: Recheck token validity or permissions.'
- '401 Unauthorized: Invalid credentials or access token'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - GitHub OAuth Application
  - Team Bot
  - NamedCredential
  - Impact Analysis token
  - ImpactAnalysisToken
client:
  base_url: https://api.codecov.io/api/v2
  headers:
    accept: application/json
  paginator:
    type: page
source_metadata: null
