resources:
- name: html
  endpoint:
    path: /template/html
    method: GET
    data_selector: records
- name: django
  endpoint:
    path: /template/django
    method: GET
    data_selector: records
- name: handlebars
  endpoint:
    path: /template/handlebars
    method: GET
    data_selector: records
- name: jet
  endpoint:
    path: /template/jet
    method: GET
    data_selector: records
- name: ace
  endpoint:
    path: /template/ace
    method: GET
    data_selector: records
- name: amber
  endpoint:
    path: /template/amber
    method: GET
    data_selector: records
- name: mustache
  endpoint:
    path: /template/mustache
    method: GET
    data_selector: records
- name: pug
  endpoint:
    path: /template/pug
    method: GET
    data_selector: records
- name: slim
  endpoint:
    path: /template/slim
    method: GET
    data_selector: records
- name: Aerospike
  endpoint:
    path: /storage/aerospike/
    method: GET
- name: ArangoDB
  endpoint:
    path: /storage/arangodb/
    method: GET
- name: AzureBlob
  endpoint:
    path: /storage/azureblob/
    method: GET
- name: Badger
  endpoint:
    path: /storage/badger/
    method: GET
- name: Bbolt
  endpoint:
    path: /storage/bbolt
    method: GET
- name: Cassandra
  endpoint:
    path: /storage/cassandra/
    method: GET
- name: CloudflareKV
  endpoint:
    path: /storage/cloudflarekv/
    method: GET
- name: Coherence
  endpoint:
    path: /storage/coherence/
    method: GET
- name: Couchbase
  endpoint:
    path: /storage/couchbase/
    method: GET
- name: DynamoDB
  endpoint:
    path: /storage/dynamodb/
    method: GET
- name: Etcd
  endpoint:
    path: /storage/etcd/
    method: GET
- name: LevelDB
  endpoint:
    path: /storage/leveldb/
    method: GET
- name: Memcache
  endpoint:
    path: /storage/memcache/
    method: GET
- name: Memory
  endpoint:
    path: /storage/memory/
    method: GET
- name: Minio
  endpoint:
    path: /storage/minio/
    method: GET
- name: MockStorage
  endpoint:
    path: /storage/mockstorage/
    method: GET
- name: MongoDB
  endpoint:
    path: /storage/mongodb/
    method: GET
- name: MSSQL
  endpoint:
    path: /storage/mssql/
    method: GET
- name: MySQL
  endpoint:
    path: /storage/mysql/
    method: GET
- name: NATS
  endpoint:
    path: /storage/nats/
    method: GET
- name: Neo4j
  endpoint:
    path: /storage/neo4j/
    method: GET
- name: Pebble
  endpoint:
    path: /storage/pebble/
    method: GET
- name: Postgres
  endpoint:
    path: /storage/postgres/
    method: GET
- name: Redis
  endpoint:
    path: /storage/redis/
    method: GET
- name: Rueidis
  endpoint:
    path: /storage/rueidis/
    method: GET
- name: S3
  endpoint:
    path: /storage/s3/
    method: GET
- name: ScyllaDB
  endpoint:
    path: /storage/scylladb/
    method: GET
- name: SQLite3
  endpoint:
    path: /storage/sqlite3/
    method: GET
- name: ClickHouse
  endpoint:
    path: /storage/clickhouse/
    method: GET
- name: Valkey
  endpoint:
    path: /storage/valkey/
    method: GET
- name: SurrealDB
  endpoint:
    path: /storage/surrealdb/
    method: GET
- name: ace
  endpoint:
    path: /template/ace/
    method: GET
- name: amber
  endpoint:
    path: /template/amber/
    method: GET
- name: django
  endpoint:
    path: /template/django/
    method: GET
- name: handlebars
  endpoint:
    path: /template/handlebars/
    method: GET
- name: html
  endpoint:
    path: /template/html/
    method: GET
- name: jet
  endpoint:
    path: /template/jet/
    method: GET
- name: mustache
  endpoint:
    path: /template/mustache/
    method: GET
- name: pug
  endpoint:
    path: /template/pug/
    method: GET
- name: slim
  endpoint:
    path: /template/slim/
    method: GET
- name: Casbin
  endpoint:
    path: /contrib/opafiber_v2.x.x/casbin/
    method: GET
- name: Fgprof
  endpoint:
    path: /contrib/opafiber_v2.x.x/fgprof/
    method: GET
- name: Fiberi18n
  endpoint:
    path: /contrib/opafiber_v2.x.x/fiberi18n/
    method: GET
- name: Fibersentry
  endpoint:
    path: /contrib/opafiber_v2.x.x/fibersentry/
    method: GET
- name: Fiberzap
  endpoint:
    path: /contrib/opafiber_v2.x.x/fiberzap/
    method: GET
- name: Fiberzerolog
  endpoint:
    path: /contrib/opafiber_v2.x.x/fiberzerolog/
    method: GET
- name: HCaptcha
  endpoint:
    path: /contrib/opafiber_v2.x.x/hcaptcha/
    method: GET
- name: JWT
  endpoint:
    path: /contrib/opafiber_v2.x.x/jwt/
    method: GET
- name: Loadshed
  endpoint:
    path: /contrib/opafiber_v2.x.x/loadshed/
    method: GET
- name: Monitor
  endpoint:
    path: /contrib/opafiber_v2.x.x/monitor/
    method: GET
- name: Open Policy Agent
  endpoint:
    path: /contrib/opafiber_v2.x.x/opafiber/
    method: GET
- name: Otelfiber
  endpoint:
    path: /contrib/opafiber_v2.x.x/otelfiber/
    method: GET
- name: Paseto
  endpoint:
    path: /contrib/opafiber_v2.x.x/paseto/
    method: GET
- name: Socket.io
  endpoint:
    path: /contrib/opafiber_v2.x.x/socketio/
    method: GET
- name: Swagger
  endpoint:
    path: /contrib/opafiber_v2.x.x/swagger/
    method: GET
- name: Websocket
  endpoint:
    path: /contrib/opafiber_v2.x.x/websocket/
    method: GET
- name: Casbin
  endpoint:
    path: /contrib/casbin_v1.x.x/casbin/
    method: GET
- name: CircuitBreaker
  endpoint:
    path: /contrib/casbin_v1.x.x/circuitbreaker/
    method: GET
- name: Fgprof
  endpoint:
    path: /contrib/casbin_v1.x.x/fgprof/
    method: GET
- name: Fiberi18n
  endpoint:
    path: /contrib/casbin_v1.x.x/fiberi18n/
    method: GET
- name: Fibersentry
  endpoint:
    path: /contrib/casbin_v1.x.x/fibersentry/
    method: GET
- name: Fiberzap
  endpoint:
    path: /contrib/casbin_v1.x.x/fiberzap/
    method: GET
- name: Fiberzerolog
  endpoint:
    path: /contrib/casbin_v1.x.x/fiberzerolog/
    method: GET
- name: HCaptcha
  endpoint:
    path: /contrib/casbin_v1.x.x/hcaptcha/
    method: GET
- name: JWT
  endpoint:
    path: /contrib/casbin_v1.x.x/jwt/
    method: GET
- name: Loadshed
  endpoint:
    path: /contrib/casbin_v1.x.x/loadshed/
    method: GET
- name: Monitor
  endpoint:
    path: /contrib/casbin_v1.x.x/monitor/
    method: GET
- name: Open Policy Agent
  endpoint:
    path: /contrib/casbin_v1.x.x/opafiber/
    method: GET
- name: Otelfiber (OpenTelemetry)
  endpoint:
    path: /contrib/casbin_v1.x.x/otelfiber/
    method: GET
- name: Paseto
  endpoint:
    path: /contrib/casbin_v1.x.x/paseto/
    method: GET
- name: Socket.io
  endpoint:
    path: /contrib/casbin_v1.x.x/socketio/
    method: GET
- name: Swagger
  endpoint:
    path: /contrib/casbin_v1.x.x/swagger/
    method: GET
- name: Websocket
  endpoint:
    path: /contrib/casbin_v1.x.x/websocket/
    method: GET
- name: circuit_breaker_config
  endpoint:
    path: /contrib/circuitbreaker/
    method: GET
    data_selector: config
    params: {}
- name: fiberi18n
  endpoint:
    path: /contrib/fiberi18n/
    method: GET
    data_selector: localize
    params: {}
- name: fiberzap
  endpoint:
    path: /contrib/fiberzap/v2
    method: GET
    data_selector: records
    params: {}
- name: Casbin
  endpoint:
    path: /contrib/fibersentry_v1.x.x/casbin/
    method: GET
- name: Fgprof
  endpoint:
    path: /contrib/fibersentry_v1.x.x/fgprof/
    method: GET
- name: Fiberi18n
  endpoint:
    path: /contrib/fibersentry_v1.x.x/fiberi18n/
    method: GET
- name: Fibersentry
  endpoint:
    path: /contrib/fibersentry_v1.x.x/fibersentry/
    method: GET
- name: Fiberzap
  endpoint:
    path: /contrib/fibersentry_v1.x.x/fiberzap/
    method: GET
- name: Fiberzerolog
  endpoint:
    path: /contrib/fibersentry_v1.x.x/fiberzerolog/
    method: GET
- name: HCaptcha
  endpoint:
    path: /contrib/fibersentry_v1.x.x/hcaptcha/
    method: GET
- name: JWT
  endpoint:
    path: /contrib/fibersentry_v1.x.x/jwt/
    method: GET
- name: Loadshed
  endpoint:
    path: /contrib/fibersentry_v1.x.x/loadshed/
    method: GET
- name: Monitor
  endpoint:
    path: /contrib/fibersentry_v1.x.x/monitor/
    method: GET
- name: Opafiber
  endpoint:
    path: /contrib/fibersentry_v1.x.x/opafiber/
    method: GET
- name: Otelfiber
  endpoint:
    path: /contrib/fibersentry_v1.x.x/otelfiber/
    method: GET
- name: Paseto
  endpoint:
    path: /contrib/fibersentry_v1.x.x/paseto/
    method: GET
- name: Socket.io
  endpoint:
    path: /contrib/fibersentry_v1.x.x/socketio/
    method: GET
- name: Swagger
  endpoint:
    path: /contrib/fibersentry_v1.x.x/swagger/
    method: GET
- name: Websocket
  endpoint:
    path: /contrib/fibersentry_v1.x.x/websocket/
    method: GET
- name: site_verify
  endpoint:
    path: /siteverify
    method: POST
    data_selector: response
- name: LoadShed
  endpoint:
    path: /contrib/loadshed
    method: GET
    data_selector: records
- name: opafiber
  endpoint:
    path: /contrib/opafiber
    method: GET
    data_selector: data
    params: {}
- name: otelfiber
  endpoint:
    path: /contrib/otelfiber/
    method: GET
    data_selector: records
    params: {}
- name: Casbin
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/casbin/
    method: GET
- name: CircuitBreaker
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/circuitbreaker/
    method: GET
- name: Fgprof
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/fgprof/
    method: GET
- name: Fiberi18n
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/fiberi18n/
    method: GET
- name: Fibersentry
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/fibersentry/
    method: GET
- name: Fiberzap
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/fiberzap/
    method: GET
- name: Fiberzerolog
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/fiberzerolog/
    method: GET
- name: HCaptcha
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/hcaptcha/
    method: GET
- name: JWT
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/jwt/
    method: GET
- name: Loadshed
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/loadshed/
    method: GET
- name: Monitor
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/monitor/
    method: GET
- name: Open Policy Agent
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/opafiber/
    method: GET
- name: Otelfiber (OpenTelemetry)
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/otelfiber/
    method: GET
- name: Paseto
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/paseto/
    method: GET
- name: Socket.io
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/socketio/
    method: GET
- name: Swagger
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/swagger/
    method: GET
- name: Websocket
  endpoint:
    path: /contrib/fiberi18n_v2.x.x/websocket/
    method: GET
- name: restricted
  endpoint:
    path: /api/restricted
    method: GET
- name: restricted
  endpoint:
    path: /api/restricted
    method: GET
    data_selector: Welcome
    params: {}
- name: websocket
  endpoint:
    path: /ws/:id
    method: GET
- name: Casbin
  endpoint:
    path: /contrib/casbin/
    method: GET
- name: swagger
  endpoint:
    path: swagger
    method: GET
    data_selector: swagger.json
- name: circuit_breaker
  endpoint:
    path: /contrib/circuitbreaker
    method: GET
    data_selector: config
- name: fiberi18n
  endpoint:
    path: /contrib/fiberi18n/
    method: GET
- name: fibersentry
  endpoint:
    path: /contrib/fibersentry
    method: GET
- name: site_verify
  endpoint:
    path: /siteverify
    method: POST
    data_selector: response
    params: {}
- name: CPULoadCriteria
  endpoint:
    method: GET
    data_selector: criteria
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: opafiber_config
  endpoint:
    path: /contrib/opafiber/
    method: GET
    data_selector: config
- name: login
  endpoint:
    path: /login
    method: POST
    data_selector: ''
    params: {}
- name: restricted
  endpoint:
    path: /api/restricted
    method: GET
    data_selector: ''
    params: {}
- name: login
  endpoint:
    path: /login
    method: POST
    data_selector: token
    params: {}
- name: restricted
  endpoint:
    path: /api/restricted
    method: GET
    data_selector: Welcome
    params: {}
- name: websocket
  endpoint:
    path: /contrib/socketio/
    method: GET
- name: swagger
  endpoint:
    path: /api/v1/docs
    method: GET
    data_selector: swagger.json
- name: swagger_v2
  endpoint:
    path: /api/v2/docs
    method: GET
    data_selector: swagger.json
- name: hello_world
  endpoint:
    path: /
    method: GET
    data_selector: Hello, World!
- name: basic_routing
  endpoint:
    path: /:value
    method: GET
    data_selector: Get request with value
- name: optional_parameter
  endpoint:
    path: /:name?
    method: GET
    data_selector: Hello
- name: wildcards
  endpoint:
    path: /api/*
    method: GET
    data_selector: API path
- name: ClearCookie
  endpoint:
    path: /clear-cookie
    method: GET
    data_selector: cookies
    params: {}
- name: Cookie
  endpoint:
    path: /set-cookie
    method: GET
    data_selector: cookies
    params: {}
- name: Download
  endpoint:
    path: /download
    method: GET
    data_selector: files
    params: {}
- name: End
  endpoint:
    path: /end
    method: GET
    data_selector: response
    params: {}
- name: Format
  endpoint:
    path: /format
    method: GET
    data_selector: formats
    params: {}
- name: JSON
  endpoint:
    path: /json
    method: GET
    data_selector: json
    params: {}
- name: JSONP
  endpoint:
    path: /jsonp
    method: GET
    data_selector: jsonp
    params: {}
- name: MsgPack
  endpoint:
    path: /msgpack
    method: GET
    data_selector: msgpack
    params: {}
- name: CBOR
  endpoint:
    path: /cbor
    method: GET
    data_selector: cbor
    params: {}
- name: Links
  endpoint:
    path: /links
    method: GET
    data_selector: links
    params: {}
- name: Location
  endpoint:
    path: /location
    method: POST
    data_selector: location
    params: {}
- name: Render
  endpoint:
    path: /render
    method: GET
    data_selector: render
    params: {}
- name: Send
  endpoint:
    path: /send
    method: GET
    data_selector: send
    params: {}
- name: redirect
  endpoint:
    path: /next/api/redirect
    method: GET
- name: healthcheck_liveness
  endpoint:
    path: /live
    method: GET
- name: healthcheck_readiness
  endpoint:
    path: /ready
    method: GET
- name: healthcheck_startup
  endpoint:
    path: /startupz
    method: GET
- name: log_levels
  endpoint:
    path: /next/api/log/levels
    method: GET
    data_selector: log_levels
    params: {}
- name: custom_log
  endpoint:
    path: /next/api/log/custom
    method: GET
    data_selector: custom_log
    params: {}
- name: print_log
  endpoint:
    path: /next/api/log/print
    method: GET
    data_selector: print_log
    params: {}
- name: set_level
  endpoint:
    path: /next/api/log/set_level
    method: POST
    data_selector: set_level
    params: {}
- name: set_output
  endpoint:
    path: /next/api/log/set_output
    method: POST
    data_selector: set_output
    params: {}
- name: Config
  endpoint:
    path: /api/config
    method: GET
    data_selector: properties
- name: OnRoute
  endpoint:
    path: /next/api/hooks#onroute
    method: GET
    data_selector: handlers
- name: OnName
  endpoint:
    path: /next/api/hooks#onname
    method: GET
    data_selector: handlers
- name: OnGroup
  endpoint:
    path: /next/api/hooks#ongroup
    method: GET
    data_selector: handlers
- name: OnGroupName
  endpoint:
    path: /next/api/hooks#ongroupname
    method: GET
    data_selector: handlers
- name: OnListen
  endpoint:
    path: /next/api/hooks#onlisten
    method: GET
    data_selector: handlers
- name: OnFork
  endpoint:
    path: /next/api/hooks#onfork
    method: GET
    data_selector: handlers
- name: OnPreShutdown
  endpoint:
    path: /next/api/hooks#onpreshutdown
    method: GET
    data_selector: handlers
- name: OnPostShutdown
  endpoint:
    path: /next/api/hooks#onpostshutdown
    method: GET
    data_selector: handlers
- name: OnMount
  endpoint:
    path: /next/api/hooks#onmount
    method: GET
    data_selector: handlers
- name: State
  endpoint:
    path: /next/api/state
    method: GET
    data_selector: State
    params: {}
- name: user_create
  endpoint:
    path: /user/create
    method: GET
    data_selector: user
    params: {}
- name: user_get
  endpoint:
    path: /user/:id
    method: GET
    data_selector: user
    params: {}
- name: MethodGet
  endpoint:
    method: GET
- name: MethodHead
  endpoint:
    method: HEAD
- name: MethodPost
  endpoint:
    method: POST
- name: MethodPut
  endpoint:
    method: PUT
- name: MethodPatch
  endpoint:
    method: PATCH
- name: MethodDelete
  endpoint:
    method: DELETE
- name: MethodConnect
  endpoint:
    method: CONNECT
- name: MethodOptions
  endpoint:
    method: OPTIONS
- name: MethodTrace
  endpoint:
    method: TRACE
- name: ClearCookie
  endpoint:
    path: /clearcookie
    method: GET
    data_selector: ''
    params: {}
- name: Cookie
  endpoint:
    path: /cookie
    method: GET
    data_selector: ''
    params: {}
- name: Download
  endpoint:
    path: /download
    method: GET
    data_selector: ''
    params: {}
- name: End
  endpoint:
    path: /end
    method: GET
    data_selector: ''
    params: {}
- name: Format
  endpoint:
    path: /format
    method: GET
    data_selector: ''
    params: {}
- name: JSON
  endpoint:
    path: /json
    method: GET
    data_selector: ''
    params: {}
- name: JSONP
  endpoint:
    path: /jsonp
    method: GET
    data_selector: ''
    params: {}
- name: MsgPack
  endpoint:
    path: /msgpack
    method: GET
    data_selector: ''
    params: {}
- name: CBOR
  endpoint:
    path: /cbor
    method: GET
    data_selector: ''
    params: {}
- name: Links
  endpoint:
    path: /links
    method: GET
    data_selector: ''
    params: {}
- name: Location
  endpoint:
    path: /location
    method: POST
    data_selector: ''
    params: {}
- name: Render
  endpoint:
    path: /render
    method: GET
    data_selector: ''
    params: {}
- name: Send
  endpoint:
    path: /send
    method: GET
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: user
    params: {}
- name: root
  endpoint:
    path: /
    method: POST
    data_selector: person
    params: {}
- name: File
  endpoint:
    path: /file
    method: POST
    data_selector: file
    params: {}
- name: response
  endpoint:
    path: /response
    method: GET
    data_selector: response
- name: cookies
  endpoint:
    path: /cookies
    method: GET
    data_selector: cookies
- name: json
  endpoint:
    path: /json
    method: GET
    data_selector: json
- name: OnRoute
  endpoint:
    path: /next/api/hooks#onroute
    method: GET
    data_selector: hooks
- name: OnName
  endpoint:
    path: /next/api/hooks#onname
    method: GET
    data_selector: hooks
- name: OnGroup
  endpoint:
    path: /next/api/hooks#ongroup
    method: GET
    data_selector: hooks
- name: OnGroupName
  endpoint:
    path: /next/api/hooks#ongroupname
    method: GET
    data_selector: hooks
- name: OnListen
  endpoint:
    path: /next/api/hooks#onlisten
    method: GET
    data_selector: hooks
- name: OnFork
  endpoint:
    path: /next/api/hooks#onfork
    method: GET
    data_selector: hooks
- name: OnPreShutdown
  endpoint:
    path: /next/api/hooks#onpreshutdown
    method: GET
    data_selector: hooks
- name: OnPostShutdown
  endpoint:
    path: /next/api/hooks#onpostshutdown
    method: GET
    data_selector: hooks
- name: OnMount
  endpoint:
    path: /next/api/hooks#onmount
    method: GET
    data_selector: hooks
- name: user_create
  endpoint:
    path: /user/create
    method: GET
- name: user_get
  endpoint:
    path: /user/:id
    method: GET
- name: GET_root
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: GET_about
  endpoint:
    path: /about
    method: GET
    data_selector: null
    params: {}
- name: GET_random_txt
  endpoint:
    path: /random.txt
    method: GET
    data_selector: null
    params: {}
- name: GET_user_books
  endpoint:
    path: /user/:name/books/:title
    method: GET
    data_selector: null
    params: {}
- name: GET_user_plus
  endpoint:
    path: /user/+
    method: GET
    data_selector: null
    params: {}
- name: GET_user_optional
  endpoint:
    path: /user/:name?
    method: GET
    data_selector: null
    params: {}
- name: GET_user_wildcard
  endpoint:
    path: /user/*
    method: GET
    data_selector: null
    params: {}
- name: grouping
  endpoint:
    path: /next/guide/grouping
    method: GET
- name: MethodGet
  endpoint:
    path: GET
    method: GET
- name: MethodHead
  endpoint:
    path: HEAD
    method: HEAD
- name: MethodPost
  endpoint:
    path: POST
    method: POST
- name: MethodPut
  endpoint:
    path: PUT
    method: PUT
- name: MethodPatch
  endpoint:
    path: PATCH
    method: PATCH
- name: MethodDelete
  endpoint:
    path: DELETE
    method: DELETE
- name: MethodConnect
  endpoint:
    path: CONNECT
    method: CONNECT
- name: MethodOptions
  endpoint:
    path: OPTIONS
    method: OPTIONS
- name: MethodTrace
  endpoint:
    path: TRACE
    method: TRACE
- name: request
  endpoint:
    path: /get
    method: GET
    data_selector: response
- name: request
  endpoint:
    path: /client/request
    method: GET
- name: response
  endpoint:
    path: /client/response
    method: GET
- name: Reset
  endpoint:
    path: /reset
    method: POST
- name: static
  endpoint:
    path: /static
    method: GET
    data_selector: files
    params: {}
- name: App
  endpoint:
    path: /api/fiber
    method: POST
    data_selector: records
    params: {}
- name: root
  endpoint:
    path: /
    method: GET
    data_selector: null
    params: {}
- name: about
  endpoint:
    path: /about
    method: GET
    data_selector: null
    params: {}
- name: random_txt
  endpoint:
    path: /random.txt
    method: GET
    data_selector: null
    params: {}
- name: user_books
  endpoint:
    path: /user/:name/books/:title
    method: GET
    data_selector: null
    params: {}
- name: user_param
  endpoint:
    path: /user/:name?
    method: GET
    data_selector: null
    params: {}
- name: flights
  endpoint:
    path: /flights/:from-:to
    method: GET
    data_selector: null
    params: {}
- name: shop_product
  endpoint:
    path: /shop/product/color::color/size::size
    method: GET
    data_selector: null
    params: {}
- name: api_v1
  endpoint:
    path: /api/v1
    method: GET
- name: api_v2
  endpoint:
    path: /api/v2
    method: GET
- name: Queries
  endpoint:
    path: /
    method: GET
    data_selector: m
    params: {}
- name: Query
  endpoint:
    path: /
    method: GET
    data_selector: c.Query
    params: {}
- name: QueryBool
  endpoint:
    path: /
    method: GET
    data_selector: c.QueryBool
    params: {}
- name: QueryFloat
  endpoint:
    path: /
    method: GET
    data_selector: c.QueryFloat
    params: {}
- name: QueryInt
  endpoint:
    path: /
    method: GET
    data_selector: c.QueryInt
    params: {}
- name: QueryParser
  endpoint:
    path: /
    method: GET
    data_selector: c.QueryParser
    params: {}
- name: Range
  endpoint:
    path: /
    method: GET
    data_selector: c.Range
    params: {}
- name: Redirect
  endpoint:
    path: /
    method: GET
    data_selector: c.Redirect
    params: {}
- name: RedirectToRoute
  endpoint:
    path: /
    method: GET
    data_selector: c.RedirectToRoute
    params: {}
- name: RedirectBack
  endpoint:
    path: /
    method: GET
    data_selector: c.RedirectBack
    params: {}
- name: Render
  endpoint:
    path: /
    method: GET
    data_selector: c.Render
    params: {}
- name: Request
  endpoint:
    path: /
    method: GET
    data_selector: c.Request
    params: {}
- name: ReqHeaderParser
  endpoint:
    path: /
    method: GET
    data_selector: c.ReqHeaderParser
    params: {}
- name: Response
  endpoint:
    path: /
    method: GET
    data_selector: c.Response
    params: {}
- name: RestartRouting
  endpoint:
    path: /
    method: GET
    data_selector: c.RestartRouting
    params: {}
- name: Route
  endpoint:
    path: /
    method: GET
    data_selector: c.Route
    params: {}
- name: SaveFile
  endpoint:
    path: /
    method: POST
    data_selector: c.SaveFile
    params: {}
- name: SaveFileToStorage
  endpoint:
    path: /
    method: POST
    data_selector: c.SaveFileToStorage
    params: {}
- name: Secure
  endpoint:
    path: /
    method: GET
    data_selector: c.Secure
    params: {}
- name: Send
  endpoint:
    path: /
    method: GET
    data_selector: c.Send
    params: {}
- name: SendFile
  endpoint:
    path: /not-found
    method: GET
    data_selector: c.SendFile
    params: {}
- name: SendStatus
  endpoint:
    path: /not-found
    method: GET
    data_selector: c.SendStatus
    params: {}
- name: air
  endpoint:
    path: /next/extra/faq
    method: GET
- name: error_handling
  endpoint:
    path: /next/guide/error-handling
    method: GET
- name: template_engines
  endpoint:
    path: /next/api/template
    method: GET
- name: community_chat
  endpoint:
    path: /next/extra/faq
    method: GET
- name: subdomain_routing
  endpoint:
    path: /next/guide/subdomain-routing
    method: GET
- name: http_conversion
  endpoint:
    path: /next/middleware/adaptor
    method: GET
- name: log_levels
  endpoint:
    path: /api/log
    method: GET
    data_selector: levels
- name: static_files
  endpoint:
    path: /*
    method: GET
    data_selector: files
    params: {}
- name: static
  endpoint:
    path: /static
    method: GET
- name: route_handlers
  endpoint:
    path: /route
    method: GET
- name: mount
  endpoint:
    path: /mount
    method: GET
- name: group
  endpoint:
    path: /group
    method: GET
- name: server
  endpoint:
    path: /server
    method: GET
- name: root
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params: {}
- name: about
  endpoint:
    path: /about
    method: GET
    data_selector: ''
    params: {}
- name: random_txt
  endpoint:
    path: /random.txt
    method: GET
    data_selector: ''
    params: {}
- name: user_books
  endpoint:
    path: /user/:name/books/:title
    method: GET
    data_selector: ''
    params: {}
- name: user_greedy
  endpoint:
    path: /user/+:name
    method: GET
    data_selector: ''
    params: {}
- name: user_optional
  endpoint:
    path: /user/:name?
    method: GET
    data_selector: ''
    params: {}
- name: user_wildcard
  endpoint:
    path: /user/*
    method: GET
    data_selector: ''
    params: {}
- name: plantae
  endpoint:
    path: /plantae/:genus.:species
    method: GET
    data_selector: ''
    params: {}
- name: flights
  endpoint:
    path: /flights/:from-:to
    method: GET
    data_selector: ''
    params: {}
- name: shop_product
  endpoint:
    path: /shop/product/color::color/size::size
    method: GET
    data_selector: ''
    params: {}
- name: dynamic_route
  endpoint:
    path: /:sign:param
    method: GET
    data_selector: ''
    params: {}
- name: api_v1
  endpoint:
    path: /api-:name
    method: GET
    data_selector: ''
    params: {}
- name: customer_proxy
  endpoint:
    path: /*v1*/proxy
    method: GET
    data_selector: ''
    params: {}
- name: brand_shop
  endpoint:
    path: /v1/*/shop/*
    method: GET
    data_selector: ''
    params: {}
- name: User
  endpoint:
    path: /
    method: GET
    data_selector: none
    params: {}
- name: Set
  endpoint:
    path: /set
    method: GET
    data_selector: records
- name: SetParserDecoder
  endpoint:
    path: /setparserdecoder
    method: GET
    data_selector: records
- name: SetUserContext
  endpoint:
    path: /setusercontext
    method: GET
    data_selector: records
- name: Stale
  endpoint:
    path: /stale
    method: GET
    data_selector: records
- name: Status
  endpoint:
    path: /status
    method: GET
    data_selector: records
- name: Subdomains
  endpoint:
    path: /subdomains
    method: GET
    data_selector: records
- name: Type
  endpoint:
    path: /type
    method: GET
    data_selector: records
- name: UserContext
  endpoint:
    path: /usercontext
    method: GET
    data_selector: records
- name: Vary
  endpoint:
    path: /vary
    method: GET
    data_selector: records
- name: Write
  endpoint:
    path: /write
    method: GET
    data_selector: records
- name: Writef
  endpoint:
    path: /writef
    method: GET
    data_selector: records
- name: WriteString
  endpoint:
    path: /writestring
    method: GET
    data_selector: records
- name: XHR
  endpoint:
    path: /xhr
    method: GET
    data_selector: records
- name: XML
  endpoint:
    path: /xml
    method: GET
    data_selector: records
- name: OnRoute
  endpoint:
    path: /guide/hooks#onroute
    method: GET
    data_selector: handlers
- name: OnName
  endpoint:
    path: /guide/hooks#onname
    method: GET
    data_selector: handlers
- name: OnGroup
  endpoint:
    path: /guide/hooks#ongroup
    method: GET
    data_selector: handlers
- name: OnGroupName
  endpoint:
    path: /guide/hooks#ongroupname
    method: GET
    data_selector: handlers
- name: OnListen
  endpoint:
    path: /guide/hooks#onlisten
    method: GET
    data_selector: handlers
- name: OnFork
  endpoint:
    path: /guide/hooks#onfork
    method: GET
    data_selector: handlers
- name: OnShutdown
  endpoint:
    path: /guide/hooks#onshutdown
    method: GET
    data_selector: handlers
- name: OnMount
  endpoint:
    path: /guide/hooks#onmount
    method: GET
    data_selector: handlers
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: null
    params: {}
- name: greeting
  endpoint:
    path: /
    method: GET
    data_selector: message
- name: routing
  endpoint:
    path: /
    method: GET
    data_selector: root
- name: user
  endpoint:
    path: /api/user
    method: POST
    data_selector: null
    params: {}
- name: auth_login
  endpoint:
    path: /api/auth/login
    method: POST
    data_selector: null
    params: {}
- name: get_user
  endpoint:
    path: /api/user/:id
    method: GET
    data_selector: null
    params: {}
- name: update_user
  endpoint:
    path: /api/user/:id
    method: PATCH
    data_selector: null
    params: {}
- name: delete_user
  endpoint:
    path: /api/user/:id
    method: DELETE
    data_selector: null
    params: {}
- name: User
  endpoint:
    path: /
    method: GET
    data_selector: validationErrors
    params: {}
- name: auth_register
  endpoint:
    path: /api/auth/register
    method: POST
    data_selector: null
    params: {}
- name: auth_login
  endpoint:
    path: /api/auth/login
    method: POST
    data_selector: null
    params: {}
- name: user_get
  endpoint:
    path: /api/user/:id
    method: GET
    data_selector: null
    params: {}
- name: user_create
  endpoint:
    path: /api/user
    method: POST
    data_selector: null
    params: {}
- name: user_update
  endpoint:
    path: /api/user/:id
    method: PATCH
    data_selector: null
    params: {}
- name: user_delete
  endpoint:
    path: /api/user/:id
    method: DELETE
    data_selector: null
    params: {}
- name: product_get_all
  endpoint:
    path: /api/product
    method: GET
    data_selector: null
    params: {}
- name: product_get
  endpoint:
    path: /api/product/:id
    method: GET
    data_selector: null
    params: {}
- name: product_create
  endpoint:
    path: /api/product
    method: POST
    data_selector: null
    params: {}
- name: product_delete
  endpoint:
    path: /api/product/:id
    method: DELETE
    data_selector: null
    params: {}
- name: OnRoute
  endpoint:
    path: /guide/hooks#onroute
    method: GET
- name: OnName
  endpoint:
    path: /guide/hooks#onname
    method: GET
- name: OnGroup
  endpoint:
    path: /guide/hooks#ongroup
    method: GET
- name: OnGroupName
  endpoint:
    path: /guide/hooks#ongroupname
    method: GET
- name: OnListen
  endpoint:
    path: /guide/hooks#onlisten
    method: GET
- name: OnFork
  endpoint:
    path: /guide/hooks#onfork
    method: GET
- name: OnShutdown
  endpoint:
    path: /guide/hooks#onshutdown
    method: GET
- name: OnMount
  endpoint:
    path: /guide/hooks#onmount
    method: GET
- name: FirstFunction
  endpoint:
    path: /2015-03-31/functions/sam-app/invocations
    method: POST
    data_selector: body
- name: sam-app
  endpoint:
    path: /2015-03-31/functions/sam-app/invocations
    method: POST
    data_selector: body
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: null
    params: {}
- name: root
  endpoint:
    path: /
    method: GET
    data_selector: greeting message
- name: email_sending
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: messages
- name: topic_statistics
  endpoint:
    path: /v1/topics/:topicId
    method: GET
    data_selector: ''
- name: email_open_tracking
  endpoint:
    path: /v1/events/open
    method: GET
    data_selector: ''
- name: sending_statistics
  endpoint:
    path: /v1/events/counts/sent
    method: GET
    data_selector: ''
- name: results
  endpoint:
    path: /v1/events/results
    method: POST
- name: user
  endpoint:
    path: /api/user
    method: POST
- name: auth_login
  endpoint:
    path: /api/auth/login
    method: POST
- name: get_user
  endpoint:
    path: /api/user/:id
    method: GET
- name: update_user
  endpoint:
    path: /api/user/:id
    method: PATCH
- name: delete_user
  endpoint:
    path: /api/user/:id
    method: DELETE
- name: books
  endpoint:
    path: /books
    method: GET
    data_selector: records
- name: add_book
  endpoint:
    path: /books
    method: POST
    data_selector: records
- name: update_book
  endpoint:
    path: /books
    method: PUT
    data_selector: records
- name: remove_book
  endpoint:
    path: /books
    method: DELETE
    data_selector: records
- name: register
  endpoint:
    path: /api/auth/register
    method: POST
    data_selector: null
    params: {}
- name: login
  endpoint:
    path: /api/auth/login
    method: POST
    data_selector: null
    params: {}
- name: get_user
  endpoint:
    path: /api/user/:id
    method: GET
    data_selector: null
    params: {}
- name: create_user
  endpoint:
    path: /api/user
    method: POST
    data_selector: null
    params: {}
- name: update_user
  endpoint:
    path: /api/user/:id
    method: PATCH
    data_selector: null
    params: {}
- name: delete_user
  endpoint:
    path: /api/user/:id
    method: DELETE
    data_selector: null
    params: {}
- name: get_products
  endpoint:
    path: /api/product
    method: GET
    data_selector: null
    params: {}
- name: get_product
  endpoint:
    path: /api/product/:id
    method: GET
    data_selector: null
    params: {}
- name: create_product
  endpoint:
    path: /api/product
    method: POST
    data_selector: null
    params: {}
- name: delete_product
  endpoint:
    path: /api/product/:id
    method: DELETE
    data_selector: null
    params: {}
- name: books
  endpoint:
    path: /api/v1/books
    method: GET
    data_selector: records
    params: {}
- name: add_book
  endpoint:
    path: /api/v1/books
    method: POST
    data_selector: records
    params: {}
- name: healthchecker
  endpoint:
    path: /api/healthchecker
    method: GET
- name: scrape_coursera
  endpoint:
    path: /scrape/coursera
    method: GET
- name: scrape_quotes
  endpoint:
    path: /scrape/quotes
    method: GET
- name: csrf_demo
  endpoint:
    path: /
    method: GET
    data_selector: examples
    params: {}
- name: FirstFunction
  endpoint:
    path: /2015-03-31/functions/sam-app/invocations
    method: POST
    data_selector: body
    params: {}
- name: FirstFunction
  endpoint:
    path: /2015-03-31/functions/sam-app/invocations
    method: POST
    data_selector: body
- name: miscellaneous
  endpoint:
    path: /api/v1
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
- name: auth
  endpoint:
    path: /api/v1/auth/login
    method: POST
- name: cities
  endpoint:
    path: /api/v1/cities
    method: GET
- name: Hello
  endpoint:
    path: /hello
    method: GET
    data_selector: null
    params: {}
- name: products
  endpoint:
    path: /products/1
    method: GET
    data_selector: data
- name: email_sending_request
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: messages
- name: topic_statistics
  endpoint:
    path: /v1/topics/:topicId
    method: GET
    data_selector: ''
- name: email_open_tracking
  endpoint:
    path: /v1/events/open
    method: GET
    data_selector: ''
- name: sending_statistics
  endpoint:
    path: /v1/events/counts/sent
    method: GET
    data_selector: ''
- name: receive_sending_results
  endpoint:
    path: /v1/events/results
    method: POST
- name: books
  endpoint:
    path: /books
    method: GET
    data_selector: records
- name: add_book
  endpoint:
    path: /books
    method: POST
    data_selector: records
- name: update_book
  endpoint:
    path: /books
    method: PUT
    data_selector: records
- name: remove_book
  endpoint:
    path: /books
    method: DELETE
    data_selector: records
- name: book
  endpoint:
    path: /book
    method: GET
    data_selector: ''
    params: {}
- name: book_id
  endpoint:
    path: /book:id
    method: GET
    data_selector: ''
    params: {}
- name: create_book
  endpoint:
    path: /create
    method: POST
    data_selector: ''
    params: {}
- name: update_book
  endpoint:
    path: /update/:id
    method: PUT
    data_selector: ''
    params: {}
- name: delete_book
  endpoint:
    path: /delete/:id
    method: DELETE
    data_selector: ''
    params: {}
- name: books
  endpoint:
    path: /api/v1/books
    method: GET
    data_selector: all books
- name: books
  endpoint:
    path: /api/v1/books
    method: POST
    data_selector: add new book
- name: cloud-run-example
  endpoint:
    path: /cloud-run-example
    method: GET
    data_selector: records
- name: healthchecker
  endpoint:
    path: /api/healthchecker
    method: GET
- name: scrape_coursera
  endpoint:
    path: /scrape/coursera
    method: GET
- name: scrape_quotes
  endpoint:
    path: /scrape/quotes
    method: GET
- name: health
  endpoint:
    path: /health
    method: GET
- name: resource
  endpoint:
    path: /api/resource
    method: GET
- name: static_files
  endpoint:
    path: /
    method: GET
    data_selector: files
    params: {}
- name: csrf_demo
  endpoint:
    path: /
    method: GET
- name: message
  endpoint:
    path: message
    method: POST
    data_selector: ''
    params: {}
- name: health_check
  endpoint:
    path: /api/v1
    method: GET
    data_selector: health
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
    params: {}
- name: auth
  endpoint:
    path: /api/v1/auth/login
    method: POST
    data_selector: token
    params: {}
- name: cities
  endpoint:
    path: /api/v1/cities
    method: GET
    data_selector: records
    params: {}
- name: geoip
  endpoint:
    path: /geoip/:ip
    method: GET
    data_selector: record
    params: {}
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: ''
    params: {}
- name: geo_location
  endpoint:
    path: /geo/{ip}
    method: GET
    data_selector: response
- name: products
  endpoint:
    path: /products/1
    method: GET
    data_selector: data
- name: book
  endpoint:
    path: /api/v1/book
    method: GET
    data_selector: records
- name: book_by_id
  endpoint:
    path: /api/v1/book/:id
    method: GET
    data_selector: records
- name: create_book
  endpoint:
    path: /api/v1/book
    method: POST
    data_selector: records
- name: delete_book
  endpoint:
    path: /api/v1/book/:id
    method: DELETE
    data_selector: records
- name: hello
  endpoint:
    path: /hello
    method: GET
- name: allbooks
  endpoint:
    path: /allbooks
    method: GET
- name: book_by_id
  endpoint:
    path: /book/:id
    method: GET
- name: create_book
  endpoint:
    path: /book
    method: POST
- name: update_book
  endpoint:
    path: /book
    method: PUT
- name: delete_book
  endpoint:
    path: /book
    method: DELETE
- name: book
  endpoint:
    path: /book
    method: GET
- name: book_info
  endpoint:
    path: /book:id
    method: GET
- name: book_add
  endpoint:
    path: /create
    method: POST
- name: book_update
  endpoint:
    path: /update/:id
    method: PUT
- name: book_delete
  endpoint:
    path: /delete/:id
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: user
- name: todo_list
  endpoint:
    path: /api/v1/todo/list
    method: GET
    data_selector: todos
- name: todo_get
  endpoint:
    path: /api/v1/todo/get/:id
    method: GET
    data_selector: todo
- name: todo_create
  endpoint:
    path: /api/v1/todo/create
    method: POST
    data_selector: todo
- name: todo_update
  endpoint:
    path: /api/v1/todo/update/:id
    method: PUT
    data_selector: todo
- name: todo_delete
  endpoint:
    path: /api/v1/todo/delete/:id
    method: DELETE
    data_selector: todo
- name: graphql
  endpoint:
    path: /graphql
    method: ALL
    data_selector: ''
    params: {}
- name: health
  endpoint:
    path: /health
    method: GET
- name: resource
  endpoint:
    path: /api/resource
    method: GET
- name: add
  endpoint:
    path: /add/:a/:b
    method: GET
    data_selector: result
- name: mult
  endpoint:
    path: /mult/:a/:b
    method: GET
    data_selector: result
- name: message
  endpoint:
    path: message
    method: POST
    data_selector: ok
    params: {}
- name: products
  endpoint:
    path: /api/v1/products
    method: GET
    data_selector: all products
- name: product_by_id
  endpoint:
    path: /api/v1/product/:id
    method: GET
    data_selector: product by ID
- name: create_product
  endpoint:
    path: /api/v1/product
    method: POST
    data_selector: new product
- name: update_product
  endpoint:
    path: /api/v1/product/:id
    method: PUT
    data_selector: updated product
- name: delete_product
  endpoint:
    path: /api/v1/product/:id
    method: DELETE
    data_selector: deleted product
- name: Cloud Run
  endpoint:
    path: /cloud/run
    method: POST
- name: Google App Engine
  endpoint:
    path: /app/engine
    method: POST
- name: Cloud Function
  endpoint:
    path: /cloud/function
    method: POST
- name: translation
  endpoint:
    path: /?unread={unread}&lang={lang}
    method: GET
    data_selector: response
- name: geoip_lookup
  endpoint:
    path: /geoip/:ip
    method: GET
    data_selector: record
    params: {}
- name: login
  endpoint:
    path: /login
    method: POST
    data_selector: null
    params: {}
- name: restricted
  endpoint:
    path: /restricted
    method: GET
    data_selector: null
    params: {}
- name: geo_lookup
  endpoint:
    path: /geo/{ip_address}
    method: GET
    data_selector: response fields
    params: {}
- name: fiber-k8s-example
  endpoint:
    path: /k8s
    method: GET
    data_selector: pods
    params: {}
- name: graph
  endpoint:
    path: /graph
    method: GET
- name: developer
  endpoint:
    path: /developer/Andy
    method: GET
- name: hello
  endpoint:
    path: /hello
    method: GET
- name: allbooks
  endpoint:
    path: /allbooks
    method: GET
- name: book_by_id
  endpoint:
    path: /book/:id
    method: GET
- name: create_book
  endpoint:
    path: /book
    method: POST
- name: update_book
  endpoint:
    path: /book
    method: PUT
- name: delete_book
  endpoint:
    path: /book
    method: DELETE
- name: upload_single_file
  endpoint:
    path: /upload
    method: POST
    data_selector: response
    params: {}
- name: download_single_file
  endpoint:
    path: /file/<filename>
    method: GET
    data_selector: response
    params: {}
- name: upload_multiple_files
  endpoint:
    path: /upload
    method: POST
    data_selector: response
    params: {}
- name: download_multiple_files
  endpoint:
    path: /file/<filename>
    method: GET
    data_selector: response
    params: {}
- name: MongoDB Connection
  endpoint:
    path: /mongodb
    method: GET
    data_selector: connection
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: user
    params: {}
- name: books
  endpoint:
    path: /v1/books
    method: GET
- name: graphql_playground
  endpoint:
    path: /graphql
    method: GET
- name: add
  endpoint:
    path: /add/:a/:b
    method: GET
- name: mult
  endpoint:
    path: /mult/:a/:b
    method: GET
- name: redirect_to_google_login
  endpoint:
    path: /api/
    method: GET
- name: google_oauth2_callback
  endpoint:
    path: /api/auth/google/callback
    method: GET
- name: books
  endpoint:
    path: /books
    method: GET
    data_selector: Body
- name: user
  endpoint:
    path: /user/:id?
    method: GET
    data_selector: id
    params: {}
- name: https_example
  endpoint:
    path: /
    method: GET
    data_selector: Hello, HTTPS with TLS!
- name: say_hello
  endpoint:
    path: /say-hello
    method: GET
    data_selector: response
    params: {}
- name: login
  endpoint:
    path: /login
    method: POST
- name: restricted
  endpoint:
    path: /restricted
    method: GET
- name: prefork
  endpoint:
    path: /recipes/prefork
    method: GET
    data_selector: example
    params: {}
- name: fiber-k8s-example
  endpoint:
    path: /
    method: GET
    data_selector: Hello, Kubernetes!
- name: rss
  endpoint:
    path: /rss
    method: GET
    data_selector: feed.Items
    params: {}
- name: upload_single_file
  endpoint:
    path: /upload
    method: POST
- name: download_single_file
  endpoint:
    path: /file/<filename>
    method: GET
- name: upload_multiple_files
  endpoint:
    path: /upload
    method: POST
- name: download_multiple_files
  endpoint:
    path: /file/<filename>
    method: GET
- name: sessions
  endpoint:
    path: /sessions
    method: CREATE
    data_selector: sessions
    params: {}
- name: mongodb_connection
  endpoint:
    path: /mongodb
    method: GET
    data_selector: response
    params: {}
- name: websocket_connection
  endpoint:
    path: /ws/<user-id>
    method: GET
- name: hello
  endpoint:
    path: /api/hello
    method: GET
    data_selector: message
- name: multiple_ports_example
  endpoint:
    path: /multiple-ports
    method: GET
    data_selector: Hello, World!
- name: connection
  endpoint:
    path: /
    method: GET
- name: sqlboiler
  endpoint:
    path: /sqlboiler
    method: GET
- name: author
  endpoint:
    path: /author
    method: GET
    data_selector: records
- name: post
  endpoint:
    path: /post
    method: GET
    data_selector: records
- name: redirect
  endpoint:
    path: /api/
    method: GET
- name: google_callback
  endpoint:
    path: /api/auth/google/callback
    method: GET
- name: upload
  endpoint:
    path: /upload
    method: POST
    data_selector: stream
    params: {}
- name: books
  endpoint:
    path: /books
    method: GET
- name: book_by_id
  endpoint:
    path: /book/{id}
    method: GET
- name: user
  endpoint:
    path: /user/:id?
    method: GET
    data_selector: ''
    params: {}
- name: static_files
  endpoint:
    path: /*
    method: GET
    data_selector: file
    params: {}
- name: say_hello
  endpoint:
    path: /say-hello
    method: GET
    data_selector: msg
    params: {}
- name: accounts
  endpoint:
    path: /accounts/{id}
    method: GET
    data_selector: model.Account
- name: greeting
  endpoint:
    path: /
    method: GET
    data_selector: greeting
- name: prefork_example
  endpoint:
    path: /recipes/prefork
    method: GET
    data_selector: example
- name: RabbitMQ
  endpoint:
    path: /send
    method: GET
- name: Todo App with Auth using GORM
  endpoint:
    path: /recipes/todo-app-with-auth-gorm
    method: GET
    data_selector: records
    params: {}
- name: rss
  endpoint:
    path: /rss
    method: GET
    data_selector: null
    params: {}
- name: single_file_upload
  endpoint:
    path: /
    method: POST
    data_selector: document
    params: {}
- name: multiple_file_upload
  endpoint:
    path: /
    method: POST
    data_selector: documents
    params: {}
- name: server_timing
  endpoint:
    path: /
    method: GET
    data_selector: Server-Timing
    params: {}
- name: sessions
  endpoint:
    path: /sessions
    method: CREATE
    data_selector: sessions
    params: {}
- name: api_index
  endpoint:
    path: /api/index.go
    method: GET
    data_selector: uri
    params: {}
- name: version_v1
  endpoint:
    path: /v1
    method: GET
    data_selector: version
    params: {}
- name: version_v2
  endpoint:
    path: /v2
    method: GET
    data_selector: version
    params: {}
- name: message
  endpoint:
    path: /ws/<user-id>
    method: GET
- name: hello
  endpoint:
    path: /api/hello
    method: GET
    data_selector: message
    params: {}
- name: ws
  endpoint:
    path: /ws
    method: GET
- name: sqlboiler
  endpoint:
    path: /sqlboiler
    method: POST
    data_selector: models
    params: {}
- name: author
  endpoint:
    path: /author
    method: GET
    data_selector: records
    params: {}
- name: post
  endpoint:
    path: /post
    method: GET
    data_selector: records
    params: {}
- name: index
  endpoint:
    path: /
    method: GET
- name: sse
  endpoint:
    path: /sse
    method: GET
- name: publish
  endpoint:
    path: /publish
    method: PUT
- name: upload
  endpoint:
    path: /upload
    method: POST
    data_selector: streamed data
- name: netlify_functions
  endpoint:
    path: /.netlify/functions/gateway
    method: GET
    data_selector: functions
    params: {}
- name: static_files
  endpoint:
    path: /*
    method: GET
    data_selector: files
    params: {}
- name: Todo App with Auth using GORM
- name: single_file_upload
  endpoint:
    path: /
    method: POST
- name: multiple_file_upload
  endpoint:
    path: /
    method: POST
- name: validate
  endpoint:
    path: /validate
    method: POST
    data_selector: payload
    params: {}
- name: index
  endpoint:
    path: /api/index.go
    method: GET
    data_selector: version
- name: websocket
  endpoint:
    path: /ws
    method: GET
notes:
- API is rate limited to 10 calls every 30 minutes.
- Last updated on Oct 13, 2025
- Welcome to the official Fiber cookbook
- Requires Go 1.18 and above
- A Circuit Breaker is a software design pattern used to prevent system failures when
  a service is experiencing high failures or slow responses.
- When failures exceed the threshold, custom error responses will be sent.
- Requires Go 1.19 and above
- Requires Go 1.21 and above
- This middleware only supports Fiber v3
- 'Metrics page title: Fiber Monitor'
- 'Refresh period: 3 seconds'
- 'Expose only the monitoring API: false'
- 'FontURL: https://fonts.googleapis.com/css2?family=Roboto:wght@400;900&display=swap'
- 'ChartJsURL: https://cdn.jsdelivr.net/npm/chart.js@2.9/dist/Chart.bundle.min.js'
- Uses Paseto for token authentication
- Login requires username and password
- Requires Go 1.20 and above
- Circuit Breaker prevents cascading failures in microservices.
- Circuit Breaker improves system reliability by avoiding repeated failed requests.
- 'If you get the error websocket: bad handshake when using the cache middleware,
  please use config.Next to skip websocket path.'
- For internal implementation reasons, currently recover middleware is not work with
  websocket middleware, please use config.RecoverHandler to add recover handler to
  websocket endpoints.
- These docs are for the old Fiber v1, you can view the v2 docs here
- Fiber v3 drops support for Go versions below 1.25. We recommend upgrading to Go
  1.25 or higher to use Fiber v3.
- The github.com/gofiber/utils/v2 module also introduces new helpers like ParseInt,
  ParseUint, Walk, ReadFile, and Timestamp.
- Metrics page title defaults to 'Fiber Monitor'
- Refresh period defaults to '3 seconds'
- APIOnly defaults to 'false'
- With prefork enabled, the parent process will spawn child processes
- 'Default TestConfig is set to the following defaults: Timeout: time.Second(), FailOnTimeout:
  true'
- Uses Bearer token for authorization
- These docs are for the old Fiber v1, you can view the v2 docs here.
- This feature requires HTTP/2 or newer. Some legacy HTTP/1.1 clients may not support
  sendEarlyHints.
- Early Hints (103 responses) are supported in HTTP/2 and newer.
- 'Drop for old Go versions: Fiber v3 drops support for Go versions below 1.25. We
  recommend upgrading to Go 1.25 or higher to use Fiber v3.'
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Before using any MsgPack-related features, make sure to follow the MsgPack setup
  instructions.
- Fiber v3 removes the in-repo utils package in favor of the external github.com/gofiber/utils/v2
  module.
- Logs help you observe program behavior, diagnose issues, and trigger alerts.
- Structured logs improve searchability and speed up troubleshooting.
- Custom config can be passed when creating a new Fiber instance.
- 'This is not the same as supplying an empty TestConfig{} to app.Test(), but rather
  be the equivalent of supplying: Empty TestConfig'
- OnName only works with named routes, not groups.
- OnGroupName only works with named groups, not routes.
- OnName, OnRoute, OnGroup, and OnGroupName are mount-sensitive.
- Fiber starts and stops services automatically during development and testing.
- The services can be retrieved from the application's state.
- Web browsers and compliant clients will only clear the cookie if the given options
  are identical to those when creating the cookie, excluding Expires and MaxAge.
- When setting a cookie with SameSite=None, Fiber automatically sets Secure=true.
- Partitioned cookies allow partitioning the cookie jar by top-level site.
- Early Hints (`103` responses) are supported in HTTP/2 and newer. Older HTTP/1.1
  clients may ignore these interim responses or misbehave when receiving them.
- 'Lightweight and fast: built on FastHTTP for minimal overhead.'
- 'Flexible configuration: set global defaults like timeouts or headers and override
  them per request.'
- Binds the request MsgPack body to a struct.
- It is important to specify the correct struct tag based on the content type to be
  parsed.
- Our library uses shamaton-msgpack which uses msgpack struct tags by default.
- Run tests with the curl command.
- Hooks let you intercept and modify the request or response flow of the Fiber client.
- Hooks run in FIFO order (first in, first out), so they're executed in the order
  you add them.
- State management provides a global key–value store for application dependencies
  and runtime data.
- It allows storage and retrieval of dependencies and configurations in a Fiber application
  as well as thread–safe access to runtime data.
- Group prefixes follow the same slash-boundary rule as app.Use.
- Accessing /api, /v1, or /v2 directly returns a 404, so add error handlers as needed.
- Fiber does not recover from panics by default. Add the Recover middleware to catch
  panics in any handler.
- The default handler covers most cases, but a custom handler lets you react to specific
  error types.
- Some Fiber features require HTTP/2 or newer, which is easiest to enable using a
  reverse proxy.
- fiber.Ctx satisfies context.Context but its Deadline, Done, and Err methods are
  currently no-ops
- RequestCtx exposes the raw fasthttp context, whose Done channel closes when the
  client connection ends
- Different extraction sources have different security properties and use cases.
- When using multiple middleware that extract values, ensure they don't conflict
- Fiber doesn't bundle a MsgPack implementation because it's outside the Go standard
  library. Pick one of the popular libraries in the ecosystem.
- There's no single answer; the ideal structure depends on your application's scale
  and team. Fiber makes no assumptions about project layout.
- Fiber minimizes memory allocations by reusing Context objects and uses an optimized
  route-matching algorithm to rapidly determine the correct handler chain.
- By default, it serves index.html when a directory is requested.
- When enabled, the application will need to be ran through a shell because prefork
  mode sets environment variables.
- Default timeout is 1s if you want to disable a timeout altogether, pass -1 as a
  second argument.
- Running Fiber behind a reverse proxy is a common production setup.
- Some Fiber features (like SendEarlyHints) require HTTP/2 or newer, which is easiest
  to enable using a reverse proxy.
- This is unreleased documentation for Fiber Next version.
- Method is a chainable.
- Ensure middleware that extract values don't conflict.
- Fiber doesn't bundle a MsgPack implementation because it's outside the Go standard
  library.
- By default, will use isIdempotent function from fasthttp
- Hooks provide extension points for developers and maintainers to inject custom logic
  without modifying the core Fiber code.
- Running **/api**, **/v1** or **/v2** will result in **404** error, make sure you
  have the errors set.
- Custom template engines can implement the Views interface to be supported in Fiber.
- Fiber does not handle panics by default. To recover from a panic thrown by any handler
  in the stack, you need to include the Recover middleware.
- In most cases, the default error handler should be sufficient.
- Validation for Name requires 'required', min 5 char long, max 20
- Validation for Age requires 'required' and must implement 'teener' tag format (12-18
  years old)
- OnName only works with naming routes, not groups.
- OnName/OnRoute/OnGroup/OnGroupName hooks are mount-sensitive.
- Since Fiber v2.32.0, we use encoding/json as default json library due to stability
  and producibility. However, the standard library is a bit slow compared to 3rd party
  libraries.
- The method of calling the Fatal level will interrupt the program running after printing
  the log, please use it with caution.
- Log levels include LevelTrace, LevelDebug, LevelInfo, LevelWarn, LevelError, LevelFatal,
  LevelPanic.
- Fiber's routing supports dynamic and optional parameters.
- Middleware functions can modify requests and responses.
- Running /api, /v1 or /v2 will result in 404 error, make sure you have the errors
  set.
- If the Fiber config option PassLocalsToViews is enabled, then all locals set using
  ctx.Locals(key, value) will be passed to the template. It is important to avoid
  clashing keys when using this setting.
- Uses validator package for data validation
- This example provides a basic setup for a Go Fiber application with automatic TLS
  certificate management using Let's Encrypt.
- This example provides a basic setup for deploying a Go Fiber application to AWS
  Elastic Beanstalk.
- Since Fiber v2.32.0, we use encoding/json as default json library due to stability
  and producibility.
- However, the standard library is a bit slow compared to 3rd party libraries.
- You can find your API Gateway Endpoint URL in the output values displayed after
  deployment.
- This example demonstrates how to implement a custom 404 Not Found handler using
  the Fiber web framework in Go.
- Daily limits and per-second sending rates are designed into the service.
- Scheduled sending and message grouping features are available.
- The application should now be running on http://localhost:3000.
- It can be extended and customized further to fit the needs of more complex applications.
- Start the server without csrf to see the dangers of these attacks.
- AWS Lambda Golang runtime requires a flat folder with the executable generated on
  build step.
- To deploy an AWS CloudFormation stack which creates or modifies IAM roles, the CAPABILITY_IAM
  value for capabilities must be provided.
- CSRF Tokens are linked to the user's session.
- Pre-sessions are used, so that CSRF tokens are always available, even for anonymous
  users (eg for login forms).
- 'Cookies are set with a defense-in-depth approach: Secure: true, HttpOnly: true,
  SameSite: Lax, Expiration: 30 minutes (of inactivity), Cookie names are prefixed
  with ''__Host-'''
- 'To deploy your application for the first time, run the command: sam deploy --guided.'
- Use distroless image to build, The image size is only a few MB.
- Migrate to AWS SAM without changing your faber code using aws-lambda-adapter.
- Returns a 500 Internal Server Error if any issue occurs during the fetch.
- Returns the same status code as the external service if it's not a 200 OK.
- AWS SES service activated and sender email/domain verification required
- Request removal from SES sandbox mode for production
- Configure SMTP settings in config/config.go
- The API should now be running on http://localhost:3000
- Uses keyauth middleware for authorization.
- Server started and listening at localhost:3000
- Need Configured Firebase Authentication App and Google Service Account Credential
  (JSON file contain credential)
- After deploying the server on Cloud Run, you can get its url on GCP Console.
- Just follow the steps and fill the GCP_PROJECT variable with your Google Cloud Platform
  project ID.
- Endpoints classified under Users and Cities require authentication.
- Requires download of GeoLite2-City database from MaxMind
- This example relies on the use of channels, a data type in Go that allows you to
  send and receive data to/from specific places in an application.
- Serve static files from the 'public' directory
- Need Configured Firebase Authentication App and Google Service Account Credential
  (JSON file contain credential). You can get all these config from Firebase Console.
- Cloud Function route for Fiber app requires adaptation.
- Ensure to replace placeholder credentials with actual Firebase credentials.
- 'Ensure you have the following installed: Golang, Fiber package, PKCS12 certificate
  file (cert.p12)'
- Place your PKCS12 certificate file (cert.p12) in the project directory.
- 'Ensure you have the following installed: Golang, Fiber package, TLS certificates
  (self-signed or from a trusted CA).'
- Place your TLS certificate (cert.pem) and private key (key.pem) in the project directory.
- You must first download a database from the MaxMind website - https://dev.maxmind.com/geoip/geoip2/geolite2/.
- Place the database in the specified folder and run the command provided.
- Ensure you have Golang, Fiber package, Docker, Kubernetes, kubectl, and Minikube
  installed.
- Deploy the application using kubectl apply -f deployment.yaml.
- Ensure you have Golang and Air for hot reloading.
- The database is a Postgres instance created using the GoFiber's Testcontainers Service
  module.
- Obtain a client ID from Apitally by signing up and creating a new app in the dashboard
- This project demonstrates how to run a Go application using the Fiber framework
  on multiple ports.
- A sync.WaitGroup is used to wait for all goroutines to finish.
- Set up your MySQL database and update the connection string in the code.
- Ensure you have Golang installed
- Install Fiber package
- Obtain OAuth credentials from Google Developers Console
- Ensure you have Golang and Fiber package installed
- Place your PKCS12 certificate file (cert.p12) in the project directory
- The :id? parameter in the route is optional.
- If the id parameter is not provided, it defaults to 'defaultID'.
- Set up your PostgreSQL database and update the connection string in the code.
- Preforking can improve performance by utilizing multiple CPU cores
- Wait 2-3 minutes for the RabbitMQ container to be ready to use.
- 'This application has three routes: /, /react, and a catch-all, 404 route.'
- It is recommended that you use Docker to instantly run this application.
- This project demonstrates how to implement a recovery mechanism in a Go application
  using the Fiber framework's Recover middleware.
- Demonstrates how to implement Server-Timing headers in a Go application using the
  Fiber framework.
- Obtain a client ID from Apitally by signing up and creating a new app in the dashboard.
- The application listens on multiple ports (:3000 and :3001).
- It is a "database-first" ORM as opposed to "code-first".
- Create a .env file to add your Google OAuth credentials
- Netlify functions allows you to have up to 125,000 requests a month.
- Default listening port is 5502
- Access the Swagger UI at http://localhost:8080/swagger/index.html
- Ensure you have Golang, Node.js, and npm installed.
- You can see useful RabbitMQ dashboard at localhost:15672
- Ensure you have Golang installed and available in your GOPATH
- Uses JWT for authentication
- Ensure you have Golang and Fiber package installed.
- This project demonstrates how to create an RSS feed in a Go application using the
  Fiber framework.
- This example provides a basic setup for validating request data in a Go Fiber application
  using the go-playground/validator package.
- It is a 'database-first' ORM as opposed to 'code-first' (like gorm/gorp).
- You must first create your database schema.
- It is a 'database-first' ORM as opposed to 'code-first'.
- Make sure you use Cache in your request handlers.
- This example provides a basic setup for unit testing in a Go Fiber application.
- Designed to ease things up for fast development with zero memory allocation and
  performance in mind.
errors:
- '503 response: Circuit Open: Service unavailable'
- '429 response: Circuit Half-Open: Retrying service'
- '200 response: Circuit Closed: Service recovered'
- 401 Invalid or expired JWT
- 400 - Bad Request
- '400: Http status code to return when policy denies request'
- 401 Invalid or expired PASETO
- 400 BadRequest
- '401 Unauthorized: Invalid username or password'
- '503 Service Unavailable: Circuit Open'
- '429 Too Many Requests: Circuit Half-Open'
- '401 - Unauthorized: Invalid token'
- '400 - Bad Request: Missing token'
- '401 Unauthorized: Invalid user credentials'
- '413 - Request Entity Too Large: The maximum allowed size for a request body has
  been exceeded.'
- ErrBadRequest
- ErrUnauthorized
- ErrPaymentRequired
- ErrForbidden
- ErrNotFound
- ErrMethodNotAllowed
- ErrNotAcceptable
- ErrProxyAuthRequired
- ErrRequestTimeout
- ErrConflict
- ErrGone
- ErrLengthRequired
- ErrPreconditionFailed
- ErrRequestEntityTooLarge
- ErrRequestURITooLong
- ErrUnsupportedMediaType
- ErrRequestedRangeNotSatisfiable
- ErrExpectationFailed
- ErrTeapot
- ErrMisdirectedRequest
- ErrUnprocessableEntity
- ErrLocked
- ErrFailedDependency
- ErrTooEarly
- ErrUpgradeRequired
- ErrPreconditionRequired
- ErrTooManyRequests
- ErrRequestHeaderFieldsTooLarge
- ErrUnavailableForLegalReasons
- ErrInternalServerError
- ErrNotImplemented
- ErrBadGateway
- ErrServiceUnavailable
- ErrGatewayTimeout
- ErrHTTPVersionNotSupported
- ErrVariantAlsoNegotiates
- ErrInsufficientStorage
- ErrLoopDetected
- ErrNotExtended
- ErrNetworkAuthenticationRequired
- 'KEYVALS UNPAIRED: Mismatched pairs in key-value logging.'
- '500 Internal Server Error: Generic error'
- Specific error codes can be handled with custom messages.
- 'StatusBadRequest: 400'
- 'StatusUnauthorized: 401'
- 'StatusForbidden: 403'
- 'StatusNotFound: 404'
- 'StatusMethodNotAllowed: 405'
- 'StatusNotAcceptable: 406'
- 'StatusRequestTimeout: 408'
- 'StatusInternalServerError: 500'
- 'StatusServiceUnavailable: 503'
- 'StatusGatewayTimeout: 504'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '404 Not Found: Accessing /api, /v1, or /v2 directly'
- '500 Internal Server Error: Generic error response for unhandled errors.'
- '503 Service Unavailable: Use fiber.ErrServiceUnavailable to indicate service unavailability.'
- 'ErrMethodNotAllowed: Method not allowed for the requested route'
- 'StatusNotFound: Route not found'
- '404 Not Found: When the path is not found.'
- '404: Not Found'
- '500 Internal Server Error: Response is sent as standard error.'
- 'Status code defaults to 500: If the error is of type fiber.Error, the response
  is sent with the provided status code and message.'
- '[Name]: '''' | Needs to implement ''required'''
- '[Age]: ''0'' | Needs to implement ''required'''
- '[Age]: ''9'' | Needs to implement ''teener'''
- 'InvalidParameter: Check the parameters for the request.'
- 'AccessDenied: Ensure you have the correct permissions.'
- 'Throttling: Too many requests, please slow down.'
- Missing permissions for public access when the authentication type for the function
  URL is set to 'None'.
- '500 Internal Server Error: An issue occurs during the fetch.'
- 'Non-200 status code: Same status code as the external service.'
- '403: Missing API key'
- '403: Invalid API key'
- 'HTTP 400: Returned for invalid IP address'
- '500 Internal Server Error: if any issue occurs during the fetch'
- Returns the same status code as the external service if it's not a 200 OK
- invalid code
- 'HTTP 400: Returned if the IP address is invalid.'
- 'DATABASE_CONNECTION_ERROR: Recheck your database credentials or connection string.'
auth_info:
  mentioned_objects: []
client:
  base_url: http://localhost:3000
  headers:
    Accept: application/json
source_metadata: null
