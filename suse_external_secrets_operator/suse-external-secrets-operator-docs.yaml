resources:
- name: SecretStore
  endpoint:
    path: /apiVersion/external-secrets.io/v1
    method: POST
    data_selector: spec
    params: {}
- name: ExternalSecret
  endpoint:
    path: /apiVersion/external-secrets.io/v1
    method: POST
    data_selector: spec
    params: {}
- name: Metadata Service API
  endpoint:
    path: /swagger-ui/index.html?urls.primaryName=metadata
    method: GET
- name: Accounting Service API
  endpoint:
    path: /swagger-ui/index.html?urls.primaryName=accounting
    method: GET
- name: config
  endpoint:
    path: /v1/config
    method: GET
- name: artifacts
  endpoint:
    path: /v1/artifacts
    method: GET
    data_selector: items
    params:
      packaging_formats: CONTAINER
      architecture: x86_64
      page_number: 1
      page_size: 20
- name: sbom
  endpoint:
    path: /v1/artifacts/{artifactId}/resources
    method: GET
    data_selector: resources
    params:
      type: SBOM
      format: CYCLONEDX
- name: upload_bom
  endpoint:
    path: /api/v1/bom
    method: POST
    data_selector: null
    params: {}
- name: application-collection
  endpoint:
    path: /charts
    method: CREATE
    data_selector: applications
    params: {}
- name: imagePullSecret
  endpoint:
    path: /secrets
    method: CREATE
    data_selector: secrets
    params: {}
- name: application-collection
  endpoint:
    path: /charts
    method: POST
    data_selector: application-collection
- name: imagePullSecret
  endpoint:
    path: /secrets
    method: POST
    data_selector: application-collection
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: records
- name: application-collection
  endpoint:
    path: /
    method: GET
    data_selector: artifacts
    params: {}
- name: application_collection
  endpoint:
    path: /containers/postgresql
    method: GET
    data_selector: image
    params: {}
- name: application_collection_helm_chart
  endpoint:
    path: /charts/postgresql
    method: GET
    data_selector: chart
    params: {}
- name: application-collection
  endpoint:
    path: /repositories/application-collection
    method: POST
- name: oci_attestations
  endpoint:
    path: /containers/IMAGE_NAME@DIGEST
    method: GET
    data_selector: attestations
    params: {}
- name: helm_charts
  endpoint:
    path: /charts/CHART_NAME:VERSION
    method: GET
    data_selector: charts
    params: {}
- name: ClusterAdmissionPolicy
  endpoint:
    path: /v1/policies.kubewarden.io/ClusterAdmissionPolicy
    method: POST
    data_selector: policy
    params: {}
- name: sigstore_verifier
  endpoint:
    path: /assets/sigstore-verifiers
    method: POST
    data_selector: verifiers
    params: {}
- name: application_collection_registry
  endpoint:
    path: /assets/registries
    method: POST
    data_selector: registries
    params: {}
- name: admission_policy
  endpoint:
    path: /policy/admission-control
    method: POST
    data_selector: policies
    params: {}
- name: build
  endpoint:
    path: /src
    method: POST
    data_selector: build.xml
    params: {}
- name: admin
  endpoint:
    path: /apisix/admin
    method: GET
    data_selector: credentials
    params: {}
- name: ingress-controller
  endpoint:
    path: /apisix/ingress-controller
    method: POST
    data_selector: config
    params: {}
- name: external-etcd
  endpoint:
    path: /etcd
    method: GET
    data_selector: externalEtcd
    params: {}
- name: aws_route53
  endpoint:
    path: /route53
    method: POST
    data_selector: records
- name: FIPS-compliant program
  endpoint:
    path: /containers/go-fips
    method: GET
    data_selector: programs
    params: {}
- name: storageClass
  endpoint:
    path: /storageclass
    method: GET
    data_selector: storageClasses
    params: {}
- name: persistentVolumeClaim
  endpoint:
    path: /persistentvolumeclaim
    method: GET
    data_selector: persistentVolumeClaims
    params: {}
- name: pod
  endpoint:
    path: /pod
    method: GET
    data_selector: pods
    params: {}
- name: mariadb
  endpoint:
    path: /mariadb
    method: GET
    data_selector: records
    params: {}
- name: minio
  endpoint:
    path: /charts/minio
    method: GET
- name: ServiceMonitor
  endpoint:
    path: /_prometheus/metrics
    method: GET
- name: kubernetes_events
  endpoint:
    path: /kubernetes/events
    method: POST
    data_selector: event.name
    params: {}
- name: OpenTelemetryCollector
  endpoint:
    path: /api/v1/namespaces/default/opentelemetrycollectors
    method: GET
    data_selector: items
- name: OpAMPBridge
  endpoint:
    path: /api/v1/namespaces/default/opampbridges
    method: GET
    data_selector: items
- name: Instrumentation
  endpoint:
    path: /api/v1/namespaces/default/instrumentations
    method: GET
    data_selector: items
- name: TargetAllocator
  endpoint:
    path: /api/v1/namespaces/default/targetallocators
    method: GET
    data_selector: items
- name: postgresql
  endpoint:
    path: /charts/postgresql
    method: GET
    data_selector: records
    params:
      username: penpot
      password: penpot
      database: penpot
- name: redis
  endpoint:
    path: /charts/redis
    method: GET
    data_selector: records
    params:
      enabled: false
- name: postgresql
  endpoint:
    path: /charts/postgresql
    method: GET
    data_selector: records
    params:
      username: penpot
      password: penpot
      database: penpot
- name: redis
  endpoint:
    path: /charts/redis
    method: GET
    data_selector: records
    params:
      enabled: false
- name: postgresql_users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: postgresql_databases
  endpoint:
    path: /databases
    method: GET
    data_selector: databases
- name: volume_permissions
  endpoint:
    path: /podTemplates/initContainers/volume-permissions
    method: SET
    data_selector: enabled
    params:
      enabled: 'true'
- name: BackupStorageLocation
  endpoint:
    path: /backup-storage-location
    method: GET
    data_selector: records
- name: VolumeSnapshotLocation
  endpoint:
    path: /volume-snapshot-location
    method: GET
    data_selector: records
notes:
- Requires setup of Kubernetes Secret for AWS credentials.
- This section of the documentation contains a set of articles that will help you
  understand how the Application Collection works and how to start using it
- Although many of the endpoints available in the REST API are public, others require
  authentication.
- Most parts of the web application are publicly available and do not require users
  to log in.
- Service accounts have less restrictive rate limits than user accounts.
- You will need an access token for authenticating your user account in the REST API.
- Application Collection applies rate limits to certain operations.
- The default time window is set to 24 hours (86.400 seconds).
- All requests received when the rate limit is reached will not be processed and will
  receive a `429 TOO MANY REQUESTS` response.
- Each application in Application Collection requires the user to have a subscription
  to be able to pull it.
- Make sure you add the BOM_UPLOAD permission when creating the API Key.
- A user account with an access token will work as well. However, we don’t recommend
  it for production scenarios as it has some drawbacks.
- Authentication to Application Collection will be required from the first step.
- The charts provided by Application Collection use container images hosted in a private
  registry.
- Testcontainers does not only pull the images directly used in your tests, but it
  also pulls other images needed to support internal functionality.
- It is recommended to use a Manual substitution, pulling from Application Collection
  only the test images and relying on Docker Hub for the rest.
- Requires setup of connected app in Application Collection
- Make sure to configure proper authentication to Application Collection
- As of Harbor v2.1.1, the proxy cache feature was updated to support rate limit policies.
- Artifactory’s repositories support replication, though only from other Artifactory
  instances.
- Replication can’t be setup for Application Collection.
- You can configure your Metadata Service collection to use tokens and send them through
  Basic authentication.
- Remember to replace the USERNAME and PASSWORD placeholders with the authentication
  credentials that were created as described in the Authentication guide.
- Uses basic authentication with username and password.
- The PolicyServer must be configured with the Application Collection authentication
  credentials
- A cluster configured with authentication to Application Collection is required.
- Kubewarden version >= 1.1.0 is required.
- Admin API is enabled by default.
- Embedded Admin UI is enabled by default.
- SASL authentication enabled with PLAIN mechanism by default.
- The SASL/SCRAM mechanism is not yet supported in Kraft mode.
- SASL authentication enabled by default, using PLAIN mechanism.
- Modify default users in the initial setup.
- Apache Kafka supports the authentication of connections to nodes from clients, other
  nodes and tools using SSL, SASL or a combination of both.
- SASL authentication is enabled and uses the SASL/PLAIN mechanism by default.
- Even if you disable the freshclam daemon, it will still run at least once when the
  container starts if no virus database is present.
- You must use the above policy (represented by the POLICY_ARN environment variable)
  to allow ExternalDNS to update records in Route53 DNS zones.
- CGo builds are necessary to generate FIPS-enabled binaries. I.e., CGO_ENABLED must
  never be disabled.
- Programs built with Go FIPS are not linked dynamically to OpenSSL, but the library
  is loaded at runtime with Go’s dlopen.
- InfluxDB requires data persistence for any production use case.
- If persistence is explicitly disabled, all data will be permanently lost whenever
  the pod is restarted.
- By default, Istio uses the istio-system namespace.
- Kiali uses the token auth strategy by default. Users must log in to Kiali using
  a service account token.
- The chart will define a new storage class for dynamic provisioning of type hostPath.
- The Helm chart creates a couple of MariaDB users. A superuser root and a replication
  user repl. The passwords are randomly generated on installation.
- The number of replicas can be defined via Helm chart parameters.
- By default, the chart will deploy a MinIO cluster in distributed mode, adding one
  server pool of 16 MinIO servers with a single disk per server of 500Gi capacity
  each.
- NATS Clustering can be activated via Helm chart parameters.
- By default, the chart will deploy a single NATS Server replica and a single-pod
  deployment with nats-box.
- OpenSearch runs without authentication, role-based access control, or TLS when security
  is disabled.
- Please check our authentication guide if you need to configure Application Collection
  OCI credentials in your Kubernetes cluster.
- The Helm chart requires the mode parameter to be set. The mode can be either daemonset,
  deployment, or statefulset depending on your installation use case.
- Configures the collector to collect Kubernetes events.
- The default configuration requires cert-manager installed in your cluster.
- RBAC permissions for the Collector can be managed automatically via Helm chart parameters.
- Remember to remove any other resources you deployed during this guide.
- Penpot requires a PostgreSQL instance with specific database and user credentials.
- Penpot requires a Redis instance for deployment.
- Penpot requires a Redis instance that doesn’t use authentication.
- By default, the Helm chart deploys a single pod.
- The PostgreSQL data is stored in a 8Gi persistent volume.
- Usually, you only need to adapt the permissions once.
- The Rust container, like the official container images, does not specify any entrypoint
  to run the container image.
- Velero requires at least one BackupStorageLocation if backups are enabled.
- Velero requires at least one VolumeSnapshotLocation per cloud provider if snapshots
  are enabled.
errors:
- '429 TOO MANY REQUESTS: Rate limit has been reached.'
- 'Unauthorized: Check if the API Key is correct or if it has the required permissions.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'HTTP 429 Too Many Requests: Ensure source filter is properly constrained.'
- '401 Unauthorized: Recheck username or password'
- '403 Forbidden: Verify user permissions'
- '404 Not Found: Check image or chart name'
- 'Unauthorized: Check your API keys or permissions.'
- 'Not Found: Verify the endpoint path.'
- Connections using insecure transport are prohibited while --require_secure_transport=ON.
auth_info:
  mentioned_objects:
  - admin
  - viewer
client:
  base_url: https://apps.rancher.io
source_metadata: null
