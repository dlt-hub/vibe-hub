resources:
- name: agents
  endpoint:
    path: /agents/
    method: GET
    data_selector: ''
    params:
      detail: 'false'
- name: winupdate
  endpoint:
    path: /winupdate/{agent_id}/scan/
    method: POST
    data_selector: ''
    params: {}
- name: agents
  endpoint:
    path: /agents/
    method: GET
    data_selector: agents
    params: {}
- name: software
  endpoint:
    path: /software/{agent_id}/
    method: GET
    data_selector: software
    params: {}
- name: run_script
  endpoint:
    path: /agents/<agentid>/runscript/
    method: POST
    data_selector: result
    params: {}
- name: custom_fields
  endpoint:
    path: /agents/<agent_id>/
    method: PUT
    data_selector: updated_agent
    params: {}
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: audit_logs
  endpoint:
    path: /logs/audit/
    method: PATCH
    data_selector: audit
- name: software_refresh
  endpoint:
    path: /software/{agent_id}/
    method: PUT
    data_selector: refresh_response
- name: rmm
  endpoint:
    path: /rmm
    method: GET
- name: api
  endpoint:
    path: /api
    method: GET
- name: mesh
  endpoint:
    path: /mesh
    method: GET
- name: agent
  endpoint:
    path: /api/v1/agent
    method: GET
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/task
    method: GET
    data_selector: data
    params: {}
- name: automation_policy
  endpoint:
    path: /api/automation_policies
    method: POST
- name: Custom Fields
  endpoint:
    path: /api/custom_fields
    method: GET
    data_selector: fields
- name: maintenance_mode
  endpoint:
    path: /manage.py/server_maint_mode
    method: POST
    data_selector: options
- name: NATS Monitoring
  endpoint:
    path: /rmm/api/tacticalrmm/tacticalrmm/local_settings.py
    method: POST
    data_selector: NATS_HTTP_PORT
    params:
      NATS_HTTP_PORT: '8222'
- name: Define Root User
  endpoint:
    path: /rmm/api/tacticalrmm/tacticalrmm/local_settings.py
    method: POST
    data_selector: ROOT_USER
    params:
      ROOT_USER: username
- name: URL Actions
  endpoint:
    path: /api/url_actions
    method: GET
    data_selector: actions
    params: {}
- name: scripts
  endpoint:
    path: /api/scripts
    method: GET
    data_selector: scripts
    params: {}
- name: SNMP Checks
  endpoint:
    path: /snmp/checks
    method: GET
- name: agent
  endpoint:
    path: /api/tacticalrmm/agents/
    method: GET
    data_selector: agents
    params: {}
- name: client
  endpoint:
    path: /api/tacticalrmm/clients/
    method: GET
    data_selector: clients
    params: {}
- name: site
  endpoint:
    path: /api/tacticalrmm/sites/
    method: GET
    data_selector: sites
    params: {}
- name: alert
  endpoint:
    path: /api/tacticalrmm/alerts/
    method: GET
    data_selector: alerts
    params: {}
- name: agent
  endpoint:
    path: /api/tacticalrmm/agents
    method: GET
    data_selector: records
    params: {}
- name: client
  endpoint:
    path: /api/tacticalrmm/clients
    method: GET
    data_selector: records
    params: {}
- name: site
  endpoint:
    path: /api/tacticalrmm/sites
    method: GET
    data_selector: records
    params: {}
- name: alert
  endpoint:
    path: /api/tacticalrmm/alerts
    method: GET
    data_selector: records
    params: {}
- name: Antivirus Exclusions
  endpoint:
    path: /antivirus/exclusions
    method: GET
    data_selector: exclusions
    params: {}
- name: bulk_delete_agents
  endpoint:
    path: /api/manage.py/bulk_delete_agents
    method: POST
    data_selector: results
    params:
      days: 60
      agentver: 1.5.0
      site: examplesite
      client: exampleclient
      hostname: examplehostname
- name: reset_password
  endpoint:
    path: /api/manage.py/reset_password
    method: POST
    data_selector: results
    params:
      username: <username>
- name: reset_2fa
  endpoint:
    path: /api/manage.py/reset_2fa
    method: POST
    data_selector: results
    params:
      username: <username>
- name: delete_user
  endpoint:
    path: /api/manage.py/delete_user
    method: POST
    data_selector: results
    params:
      username: changeme
- name: find_software
  endpoint:
    path: /api/manage.py/find_software
    method: POST
    data_selector: results
    params:
      software: adobe
- name: find_services
  endpoint:
    path: /api/manage.py/find_services
    method: POST
    data_selector: results
    params:
      service: quickbooks
- name: show_outdated_agents
  endpoint:
    path: /api/manage.py/show_outdated_agents
    method: POST
    data_selector: results
- name: delete_tokens
  endpoint:
    path: /api/manage.py/delete_tokens
    method: POST
    data_selector: results
- name: remove_orphaned_tasks
  endpoint:
    path: /api/manage.py/remove_orphaned_tasks
    method: POST
    data_selector: results
- name: get_mesh_login_url
  endpoint:
    path: /api/manage.py/get_mesh_login_url
    method: POST
    data_selector: results
- name: get_mesh_exe_url
  endpoint:
    path: /api/manage.py/get_mesh_exe_url
    method: POST
    data_selector: results
- name: bulk_change_checkin
  endpoint:
    path: /bulk_change_checkin
    method: POST
    data_selector: commands
    params: {}
- name: get_mesh_login_url
  endpoint:
    path: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py get_mesh_login_url
    method: GET
- name: bulk_delete_agents
  endpoint:
    path: /manage.py/bulk_delete_agents
    method: POST
    data_selector: agents
    params:
      days: 60
- name: reset_password
  endpoint:
    path: /manage.py/reset_password
    method: POST
    data_selector: user
    params: {}
- name: reset_2fa
  endpoint:
    path: /manage.py/reset_2fa
    method: POST
    data_selector: user
    params: {}
- name: delete_user
  endpoint:
    path: /manage.py/delete_user
    method: POST
    data_selector: user
    params: {}
- name: find_software
  endpoint:
    path: /manage.py/find_software
    method: GET
    data_selector: software
    params: {}
- name: find_services
  endpoint:
    path: /manage.py/find_services
    method: GET
    data_selector: services
    params: {}
- name: show_outdated_agents
  endpoint:
    path: /manage.py/show_outdated_agents
    method: GET
    data_selector: agents
    params: {}
- name: delete_tokens
  endpoint:
    path: /manage.py/delete_tokens
    method: POST
    data_selector: tokens
    params: {}
- name: remove_orphaned_tasks
  endpoint:
    path: /manage.py/remove_orphaned_tasks
    method: POST
    data_selector: tasks
    params: {}
- name: get_mesh_login_url
  endpoint:
    path: /manage.py/get_mesh_login_url
    method: GET
    data_selector: url
    params: {}
- name: get_mesh_exe_url
  endpoint:
    path: /manage.py/get_mesh_exe_url
    method: GET
    data_selector: url
    params: {}
- name: custom_field
  endpoint:
    path: /settings/global_settings/custom_fields/agents
    method: POST
    data_selector: custom_fields
    params:
      target: Agent
      name: AnyNetID
      field_type: Text
- name: url_action
  endpoint:
    path: /settings/url_actions
    method: POST
    data_selector: url_actions
    params:
      name: AnyDesk Control
      description: Connect to a AnyDesk Session
      url_pattern: anydesk:{{agent.AnyNetID}}
- name: anydesk_collector
  endpoint:
    path: /agents/{agent_id}/tasks
    method: POST
    data_selector: collectors
    params:
      select_script: AnyDesk - Get AnyNetID for client
      descriptive_name_of_task: Collects the AnyNetID for AnyDesk.
      collector_task: CHECKED
      custom_field_to_update: AnyNetID
- name: Agents
  endpoint:
    path: /settings/global_settings/custom_fields/agents
    method: POST
    data_selector: results
    params: {}
- name: URL Actions
  endpoint:
    path: /settings/url_actions
    method: POST
    data_selector: results
    params: {}
- name: AnyDesk Control
  endpoint:
    path: /settings/url_actions
    method: POST
    data_selector: url_actions
    params: {}
- name: AnyDesk Collector
  endpoint:
    path: /tasks
    method: POST
    data_selector: tasks
    params:
      script: AnyDesk - Get AnyNetID for client
- name: Bomgar Connect
  endpoint:
    path: /api/client_script
    method: GET
    data_selector: response
    params:
      type: rep
      operation: generate
      action: start_jump_item_session
      client.hostname: '{{agent.hostname}}'
      client.private_ip: '{{agent.local_ips}}'
      jump.method: pinned
      session.custom.custom_field1: Custom Value
      session.custom.custom_field2: '123'
- name: ScreenConnect
  endpoint:
    path: /Host#Access/All%20Machines//{{agent.ScreenConnectGUID}}/Join
    method: GET
    data_selector: records
    params: {}
- name: RustDesk ID
  endpoint:
    path: /rustdesk/get-id
    method: GET
    data_selector: id
- name: RustDesk Password
  endpoint:
    path: /rustdesk/set-password
    method: POST
    data_selector: password
- name: custom_field_agents
  endpoint:
    path: /settings/global_settings/custom_fields/agents
    method: POST
    data_selector: custom_fields
    params:
      Target: Agent
      Name: TakeControlID
      Field Type: Text
- name: url_action
  endpoint:
    path: /settings/url_actions
    method: POST
    data_selector: url_actions
    params:
      Name: N-Able Take Control
      Description: Connect to a Take Control Session
      URL Pattern: mspasp://{{agent.TakeControlID}}
- name: script_take_control
  endpoint:
    path: /scripts/take_control
    method: POST
    data_selector: scripts
    params:
      script_name: Take Control - Get TakeControlID for client
      script_content: '$ConfigPath = $Env:ProgramData + "\GetSupportService\BASupSrvc.ini"

        $ResultsIdSearch = Select-String -Path $ConfigPath -Pattern ServerUniqueID

        $Result = @($ResultsIdSearch -split ''='')

        $id = $Result[1]

        $Text = "-s " + $id

        $ENCODED = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($Text))

        Write-Output $ENCODED'
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
    params: {}
- name: Bomgar Connect
  endpoint:
    path: /api/client_script
    method: GET
    data_selector: ''
    params:
      type: rep
      operation: generate
      action: start_jump_item_session
      client.hostname: '{{agent.hostname}}'
      client.private_ip: '{{agent.local_ips}}'
      jump.method: pinned
      session.custom.custom_field1: Custom Value
      session.custom.custom_field2: '123'
- name: ScreenConnect
  endpoint:
    path: /Host#Access/All%20Machines//{{agent.ScreenConnectGUID}}/Join
    method: GET
    data_selector: records
    params: {}
- name: SupremoID
  endpoint:
    path: /settings/global_settings/custom_fields/agents
    method: POST
    data_selector: CustomFields
    params: {}
- name: Supremo Control
  endpoint:
    path: /settings/global_settings/url_actions
    method: POST
    data_selector: URLActions
    params: {}
- name: Supremo Collector
  endpoint:
    path: /agents/tasks
    method: POST
    data_selector: Tasks
    params:
      script: Supremo - Get ClientID for client
      task_name: Collects the SupremoID for Supremo.
      collector_task: CHECKED
      custom_field_to_update: SupremoID
- name: agents
  endpoint:
    path: /device/{{agent.TeamViewerClientID}}/authorization/password/mode/control
    method: GET
    data_selector: records
    params: {}
- name: rustdesk_id
  endpoint:
    path: /rustdesk/get-id
    method: GET
    data_selector: output
- name: rustdesk_password
  endpoint:
    path: /rustdesk/set-password
    method: POST
    data_selector: output
- name: custom_fields_agents
  endpoint:
    path: /settings/global_settings/custom_fields/agents
    method: POST
    data_selector: Target
    params:
      Target: Agent
      Name: SplashtopSUUID
      Field Type: Text
- name: url_actions
  endpoint:
    path: /settings/global_settings/url_actions
    method: POST
    data_selector: Name
    params:
      Name: Splashtop
      Description: Connect to a Splashtop client
      URL Pattern: st-business://com.splashtop.business?account=&uuid={{agent.SplashtopSUUID}}&sessiontype=remote
- name: tickets
  endpoint:
    path: /api/v1/tickets
    method: POST
- name: SupremoID
  endpoint:
    path: /api/supremo/collect
    method: POST
    data_selector: data
    params: {}
- name: monitoring_endpoint
  endpoint:
    path: /rmm/api/tacticalrmm/tacticalrmm
    method: POST
    data_selector: widget_options
    params:
      token: Your MON_TOKEN
      url: Api url of your instance
- name: TeamViewer Control
  endpoint:
    path: /device/{{agent.TeamViewerClientID}}/authorization/password/mode/control
    method: GET
- name: tickets
  endpoint:
    path: /api/v1/tickets
    method: POST
    data_selector: tickets
- name: modsecurity
  endpoint:
    path: /etc/nginx/modsec
    method: POST
    data_selector: rules
- name: mesh
  endpoint:
    path: /meshcentral/meshcentral-data/config.json
    method: GET
    data_selector: settings
    params: {}
- name: trmm-backend
  endpoint:
    path: /services/data/vXX.X/sobjects/trmm-backend
    method: GET
    data_selector: records
- name: frontend
  endpoint:
    path: /services/data/vXX.X/sobjects/frontend
    method: GET
    data_selector: records
- name: API
  endpoint:
    path: /api.YOURDOMAIN.com
    method: GET
- name: MESH
  endpoint:
    path: /mesh.YOURDOMAIN.com
    method: GET
- name: RMM
  endpoint:
    path: /rmm.YOURDOMAIN.com
    method: GET
- name: trmm-backend
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: FrontendTCP
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: status
  endpoint:
    path: /core/v2/status/
    method: GET
    data_selector: response_fields
- name: API Domain
  endpoint:
    path: /api
    method: GET
    data_selector: details
    params:
      domain_name: api.YOURDOMAIN.com
      scheme: https
      forward_hostname: 192.168.1.155
      forward_port: 443
      enabled_options:
      - Cache Assets
      - Block Common Exploits
      - Websockets Support
      access_list: Publicly Accessible
- name: MESH Domain
  endpoint:
    path: /mesh
    method: GET
    data_selector: details
    params:
      domain_name: mesh.YOURDOMAIN.com
      scheme: http
      forward_hostname: 192.168.1.155
      forward_port: 4430
      enabled_options:
      - Block Common Exploits
      - Websockets Support
      access_list: Publicly Accessible
- name: RMM Domain
  endpoint:
    path: /rmm
    method: GET
    data_selector: details
    params:
      domain_name: rmm.YOURDOMAIN.com
      scheme: https
      forward_hostname: 192.168.1.155
      forward_port: 443
      enabled_options:
      - Cache Assets
      - Block Common Exploits
      - Websockets Support
      access_list: Publicly Accessible
- name: community_scripts
  endpoint:
    path: /scripts
    method: GET
- name: monitoring_status
  endpoint:
    path: /core/v2/status/
    method: GET
    data_selector: status
- name: dev_url
  endpoint:
    path: /rmm/web/.env
    method: GET
    data_selector: DEV_URL
    params: {}
- name: app_url
  endpoint:
    path: /rmm/web/.env
    method: GET
    data_selector: APP_URL
    params: {}
- name: dev_url
  endpoint:
    path: /rmm/web/.env
    method: GET
    data_selector: DEV_URL
- name: app_url
  endpoint:
    path: /rmm/web/.env
    method: GET
    data_selector: APP_URL
notes:
- Using an API key will bypass 2FA authentication.
- Pay attention to your trailing /; they matter.
- Pay attention to your trailing '/' they matter.
- Ensure to replace placeholders like CHANGEME with actual values for successful API
  interaction.
- One token is valid for 1 self hosted instance.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- There is no migration script. Once you've installed with one type there is no 'conversion'.
  You'll be installing a new server and migrating agents manually if you decide to
  go another way.
- Tactical RMM does not support changing DNS names, so choose your names wisely. If
  you need to change your DNS name later a paid migration is possible.
- 'Docker is more complicated in concept: has volumes and images.'
- Docker has container replication/mirroring options for redundancy/multiple servers.
- DO NOT use Series A or Series B VMs. You will need at least a Series F or better.
  Also, make sure there is no IO throttling / IOPS limits for the VM.
- Installation script configures a production-grade reverse proxy using Nginx.
- You must open all 3 subdomains in your web browser and accept the security warning
  for each site before login.
- Docker is not officially supported at the moment and not recommended for production
  use unless you are an advanced docker user and very comfortable managing and troubleshooting
  docker.
- You must add antivirus exclusions for the tactical agent.
- AV will usually flag the agent as a virus.
- The agent's version is directly tied to the RMM's version.
- Agents will automatically self-update themselves if you have auto self-update enabled
  in Settings > Global Settings.
- If you have strict outbound firewall rules these are the outbound rules needed for
  all functionality.
- Agent must connect to TRMM server on port 443.
- Ensure to have valid OAuth credentials for API access.
- The current Tactical RMM Windows Update process is relatively simple atm. As of
  right now, it is in the top 3 big items to be reworked.
- The default check frequency for the agent is set under Edit Agent > General in the
  Run Checks Every field.
- Everything between {{}} is CaSe sEnSiTive.
- The characters within the brackets are case-sensitive!
- Django admin is disabled by default as of Tactical RMM v0.4.19.
- To enable Django admin, change ADMIN_ENABLED from False to True in local_settings.py.
- As of Tactical RMM v0.4.19, the Django admin is disabled by default.
- Currently Twilio is the only support SMS service
- The key store is used to store values that need to be referenced from multiple scripts.
- Enabling maintenance mode for an agent will prevent any overdue/check/task email/sms
  alerts from being sent.
- It will also prevent clients/sites/agents from showing up as red in the dashboard
  if they have any failing checks or are overdue.
- DO NOT use the Web Terminal for running the Tactical update script as it will stop
  the service running the web terminal and bork your update.
- Use TRMM Server Web Terminal
- Run Scripts on TRMM Server
- Both of these functions are running under the linux user that you installed TRMM
  with (usually `tactical` if you followed the docs).
- These can be very dangerous features if not handled with care so think carefully
  before you enable/use them.
- These features can be disabled from the web UI in Global Settings.
- Docker Installs need to only update the .env file and issue command `docker compose
  down && docker compose up -d` for the variables to take effect.
- Directory path cannot contain spaces, this is a known issue and will be fixed in
  a future release.
- After adding any of these settings, you must restart both the RMM service (`sudo
  systemctl restart rmm`) and the agent service.
- An easy way to restart the agent service is by using the "Tools > Recover All Agents"
  function in the TRMM web UI.
- Some objects like Contact may return nulls in deeply nested fields
- Adjusting check-in intervals can control how frequently the agent checks in with
  the RMM server.
- After adding any settings, restart both the RMM service and the agent service.
- Request headers allow the server to learn more about the request context.
- The request body must contain valid JSON and can include anything you want.
- This is only applicable for the standard install, not Docker installs.
- The backup script does not self update itself. Always make sure you have latest
  version from the master branch by verifying the SCRIPT_VERSION at the top of the
  file matches.
- This script will only run on a freshly installed 'empty' server with no TRMM installed
  or TRMM failed install.
- The restore script will only restore to a different physical or virtual server.
- Antivirus software can misclassify Tactical RMM as malware.
- Engage with antivirus companies to report false positives.
- You MUST enable passwordless sudo for your linux user or you won't get all files
  backed up, do a dry run first before setting up a schedule!
- Don't use Firefox (test in vanilla Chrome first).
- If you don't see your agent (or it's offline), restart TRMM server.
- Restart Mesh Agent on client PC.
- Check again. Still not appearing in mesh.domain.com in Mesh go to My Server > Trace
  tab > Click tracing button > Check MeshAgent traffic.
- If you don't, you have firewall / connectivity issues.
- If you would like to restore to a different domain/subdomain, commercial support
  offers a paid domain name migration service.
- Uses proactive engagement with antivirus companies to report false positives.
- If you see an error about SSL or certificate expired, then your Let's Encrypt cert
  has probably expired and you'll need to renew it.
- This is a MeshCentral connection problem.
- Tactical, as a self-hosted solution, offers the potential for GDPR and HIPAA compliance
  as well as many other privacy laws, but its adherence largely depends on the hosting
  environment and how it's configured.
- MeshCentral has issues with Firefox, use a Chromium-based browser.
- Tactical RMM and MeshCentral are 2 completely separate products and can run independently
  of each other.
- You must specify at least one of --days, --agentver, --site, --client, or --hostname.
- You have to have AnyDesk installed on the local computer.
- Uses custom fields to collect TakeControlID from agents.
- Requires setting up tasks and URL actions for Take Control sessions.
- To make this work you will need to already have the Bomgar / BeyondTrust agent pinned,
  installed, and running on a Bomgar Guest.
- Uses a custom field 'ScreenConnectGUID' to identify agents.
- Requires installation of RustDesk Server and custom agent fields for RustDesk ID
  and password.
- 'Add Custom Field: Target = Agent, Name = SplashtopSUUID, Field Type = Text'
- 'Add a URL Action: Name = Splashtop, Description = Connect to a Splashtop client,
  URL Pattern = st-business://com.splashtop.business?account=&uuid={{agent.SplashtopSUUID}}&sessiontype=remote'
- Make sure to copy paste the exact windows service name here.
- You have to have Supremo installed on the local computer.
- You can setup a full automation policy to collect the machine GUID.
- Install time will vary based on internet speed and other AV removal by BitDefender
  BEST deployment
- Requires installation of RustDesk Server
- Custom fields for rustdeskid and rustdeskpwd need to be created
- BitDefender does not allow right click interactions in the entry field, so copy
  and paste using ctrl-c and ctrl-v if you want to do so.
- Ensure that the API token in the Authorization header has the necessary permissions
  (e.g., ticket.agent) to create tickets in Zammad.
- Adjust the title, group, customer, article fields in the request body as per your
  specific requirements and Zammad's API capabilities.
- Test the integration thoroughly to ensure that alerts from Tactical RMM are correctly
  creating tickets in Zammad with the expected data.
- You can setup a full automation policy to collect the machine GUID, but this example
  will collect from just one agent for testing purposes.
- These are not supported scripts/configurations by Tactical RMM, but it's provided
  here for your reference.
- Use the contents included in this guide and apply the security settings detailed
  here at your own discretion.
- All the settings covered in this document have been tested against Tactical RMM
  v0.7.2 and v0.8.0.
- Add a new line at the bottom with MON_TOKEN and give it a secure token value
- Uses OWASP Core Rule Set for security
- Requires setup of ModSecurity configuration in NGINX
- Using Proxies/reverse proxies with Tactical RMM is not a supported configuration,
  the information below is provided here for your reference.
- Between August 2023 and March 2024, MeshCentral would not work properly through
  CloudFlare proxy/tunnels.
- Make sure to run docker-compose or installation script at least once to create directory
  structures.
- HAProxy here will just pass the traffic to the NGINX on TRMM server.
- Caddy configuration for reverse proxy includes auto_https off, http_port 80, https_port
  443.
- HAProxy frontend and backend configurations contain specific timeout settings to
  maintain stable agent connection.
- Ngix adjustments may require editing the nginx.conf file to recognize X-Forwarded-For
  Header.
- Docker installs are currently unsupported, as is trying to help someone get it working
  on their own Synology NAS.
- Agent exe install shows `Server error (503)` pop-up during the installation process.
- Running the `troubleshoot_server.sh` reports `redis-server service isn't running
  (Tactical wont work without this)`.
- The health check endpoint provides key metrics and statuses about your RMM instance.
- Send a GET request to the monitoring endpoint with the X-Mon-Token header.
- After your changes are accepted, they won't be live in Tactical RMM until there
  is a new release.
- The URL has changed from /core/status/ to /core/v2/status/.
- Self-signed certs are in your dev environment. Navigate to https://api.example.com
  and https://rmm.example.com and accept the self signed certs to get rid of errors.
- Disable RMM and Daphne services as part of setup
- Ensure to merge migrations after installing dev requirements
- Make sure you are submitting Pull Requests to the develop branch.
errors:
- '401 Unauthorized: Recheck API key or permissions'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Check token validity and API permissions.'
- '404 Not Found: Verify endpoint path.'
- '500 Internal Server Error: Check server logs for details.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Error 500: These are always logged to /rmm/api/tacticalrmm/tacticalrmm/private/log/django_debug.log.'
- 'Error 400 login error: You''re sure you''re typing in everything right, giving
  it 2FA code.'
- '400: Bad Request'
- 'Bad credentials: Check your DNS settings and make sure the subdomains resolve to
  the correct IP.'
- 'Error 1005: Usually means something doesn''t match and/or the mesh username has
  to be all lower case.'
- 'Error 500: These are always logged to /rmm/api/tacticalrmm/tacticalrmm/private/log/django_debug.log'
- '400 login error: You''re sure you''re typing in everything right, giving it 2FA
  code.'
- '400 Bad Request: Check the request format.'
- '500 Internal Server Error: Server encountered an unexpected condition.'
- Job for redis-server.service failed because the control process exited with error
  code.
- 'Can''t open the log file: No such file or directory'
- Return code 98 is reserved and used by Tactical RMM when a script execution times
  out.
auth_info:
  mentioned_objects: []
client:
  base_url: https://raw.githubusercontent.com/amidaware/tacticalrmm/master
  headers:
    Accept: application/json
source_metadata: null
