resources:
- name: sectigo_lambda_function
  endpoint:
    path: /services/acme/lambda
    method: POST
- name: sectigo_api_gateway
  endpoint:
    path: /services/api/gateway
    method: GET
- name: certificates
  endpoint:
    path: /certificates
    method: POST
    data_selector: certificates
- name: SCM audit logs
  endpoint:
    path: /scm/audit/logs
    method: GET
    data_selector: logs
    params: {}
- name: sectigo-jenkins-plugin
  endpoint:
    path: /sectigo-jenkins-plugin
    method: GET
    data_selector: records
- name: certificate_management
  endpoint:
    path: /api/certificates
    method: POST
    data_selector: certificates
    params: {}
- name: sites
  endpoint:
    path: /api/v1/sites
    method: GET
    data_selector: sites
    params: {}
- name: pci_compliance
  endpoint:
    path: /api/v1/pci_compliance
    method: GET
    data_selector: compliance
    params: {}
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
- name: validations
  endpoint:
    path: /validations
    method: POST
    data_selector: validations
- name: departments
  endpoint:
    path: /departments
    method: POST
    data_selector: departments
- name: organizations
  endpoint:
    path: /organizations
    method: POST
    data_selector: organization
    params: {}
- name: validations
  endpoint:
    path: /validations
    method: POST
    data_selector: validation
    params: {}
- name: departments
  endpoint:
    path: /departments
    method: POST
    data_selector: department
    params: {}
- name: certificate_bucket
  endpoint:
    path: /discovery/certificate_buckets
    method: POST
    data_selector: certificates
    params: {}
- name: network_discovery_task
  endpoint:
    path: /discovery/network_discovery_tasks
    method: POST
    data_selector: discovery_tasks
    params: {}
- name: SSL Certificates
  endpoint:
    path: /api/v1/ssl-certificates
    method: GET
    data_selector: certificates
    params: {}
- name: ssl_certificates
  endpoint:
    path: /api/v1/ssl_certificates
    method: GET
    data_selector: certificates
    params: {}
- name: SSL Certificates
  endpoint:
    path: /Certificates/SSL Certificates
    method: GET
- name: SSL Certificates
  endpoint:
    path: /Certificates/SSL Certificates
    method: GET
- name: import_ssl_certificates
  endpoint:
    path: /ssl-certificates/import
    method: POST
- name: renew_ssl_certificate
  endpoint:
    path: /manage/ssl/renew
    method: POST
    data_selector: renewalDetails
    params: {}
- name: replace_ssl_certificate
  endpoint:
    path: /manage/ssl/replace
    method: POST
    data_selector: replacementDetails
    params: {}
- name: download_ssl_certificate
  endpoint:
    path: /manage/ssl/download
    method: GET
    data_selector: downloadDetails
    params: {}
- name: install_ssl_certificate
  endpoint:
    path: /manage/ssl/install
    method: POST
    data_selector: installationDetails
    params: {}
- name: edit_auto_renewal_settings
  endpoint:
    path: /manage/ssl/auto-renewal/edit
    method: POST
    data_selector: autoRenewalDetails
    params: {}
- name: Self-Enrollment
  endpoint:
    path: /self-enrollment
    method: GET
    data_selector: client_certificates
- name: MS agent
  endpoint:
    path: /ms-agent
    method: GET
    data_selector: client_certificates
- name: EST
  endpoint:
    path: /est
    method: GET
    data_selector: client_certificates
- name: SCEP
  endpoint:
    path: /scep
    method: GET
    data_selector: client_certificates
- name: REST API
  endpoint:
    path: /rest-api
    method: GET
    data_selector: client_certificates
- name: Admin API
  endpoint:
    path: /admin-api
    method: GET
    data_selector: client_certificates
- name: CA connector
  endpoint:
    path: /ca-connector
    method: GET
    data_selector: client_certificates
- name: client_certificates
  endpoint:
    path: /client_certificates
    method: GET
    data_selector: certificates
- name: client_certificate
  endpoint:
    path: /Certificates/ClientCertificates
    method: GET
    data_selector: client_certificates
- name: client_certificate_download
  endpoint:
    path: /client-certificates/download
    method: GET
    data_selector: certificate
    params: {}
- name: client_certificate_export_intune
  endpoint:
    path: /client-certificates/export/intune
    method: POST
    data_selector: export
    params: {}
- name: client_certificate_delete
  endpoint:
    path: /client-certificates/delete
    method: DELETE
    data_selector: delete
    params: {}
- name: client_certificate_revoke
  endpoint:
    path: /client-certificates/revoke
    method: POST
    data_selector: revoke
    params: {}
- name: device_certificates
  endpoint:
    path: /device_certificates
    method: GET
    data_selector: certificates
    params: {}
- name: code_signing_certificates
  endpoint:
    path: /code_signing_certificates
    method: GET
    data_selector: certificates
    params: {}
- name: device_certificate
  endpoint:
    path: /adding-device-certificates
    method: POST
    data_selector: fields
    params: {}
- name: code_signing_certificate
  endpoint:
    path: /Certificates/CodeSigningCertificates
    method: GET
    data_selector: certificates
- name: enrollment_invitation
  endpoint:
    path: /Certificates/CodeSigningCertificates/Invitations
    method: POST
    data_selector: invitations
- name: delete_certificate
  endpoint:
    path: /Certificates/CodeSigningCertificates/Delete
    method: DELETE
    data_selector: deletion
- name: revoke_certificate
  endpoint:
    path: /Certificates/CodeSigningCertificates/Revoke
    method: POST
    data_selector: revocation
- name: administrators
  endpoint:
    path: /api/v1/administrators
    method: GET
    data_selector: results
- name: device_certificate
  endpoint:
    path: /enroll/device_certificate
    method: POST
    data_selector: certificateRequest
    params: {}
- name: admin
  endpoint:
    path: /settings/admins
    method: POST
    data_selector: admin
    params: {}
- name: device_certificates
  endpoint:
    path: /Certificates/DeviceCertificates
    method: GET
    data_selector: certificates
    params: {}
- name: administrator
  endpoint:
    path: /settings/admins
    method: GET
    data_selector: records
- name: administrator
  endpoint:
    path: /admin/add
    method: POST
    data_selector: admin_details
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: admins
  endpoint:
    path: /Settings/Admins
    method: GET
- name: organization
  endpoint:
    path: /organizations
    method: POST
    data_selector: organization_data
    params: {}
- name: department
  endpoint:
    path: /departments
    method: POST
    data_selector: department_data
    params: {}
- name: organization
  endpoint:
    path: /organizations
    method: POST
    data_selector: organization
    params: {}
- name: department
  endpoint:
    path: /departments
    method: POST
    data_selector: department
    params: {}
- name: organizations
  endpoint:
    path: /organizations
    method: GET
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: organization_validation
  endpoint:
    path: /organizations/validation
    method: POST
    data_selector: validation_details
- name: organization_validation
  endpoint:
    path: /organizations/validations
    method: POST
    data_selector: validationRequest
    params: {}
- name: domains
  endpoint:
    path: /domains
    method: GET
    data_selector: domains
    params: {}
- name: domains
  endpoint:
    path: /api/v1/domains
    method: GET
    data_selector: domains
    params: {}
- name: domains
  endpoint:
    path: /adding-domains
    method: POST
    data_selector: domains
    params: {}
- name: domains
  endpoint:
    path: /domains
    method: GET
    data_selector: domains
    params: {}
- name: domains
  endpoint:
    path: /domains
    method: GET
    data_selector: domains
    params: {}
- name: validate_domain
  endpoint:
    path: /validate/domain
    method: POST
    data_selector: results
    params: {}
- name: validate_domain_no_prevalidation
  endpoint:
    path: /validate/domain/no/prevalidation
    method: POST
    data_selector: results
    params: {}
- name: persons
  endpoint:
    path: /api/persons
    method: GET
    data_selector: persons
    params: {}
- name: Validate a domain
  endpoint:
    path: /validating-domains
    method: GET
    data_selector: domains
    params: {}
- name: Validate a domain (no prevalidation)
  endpoint:
    path: /validate-domain-no-prevalidation
    method: GET
    data_selector: domains
    params: {}
- name: Validate domains in bulk
  endpoint:
    path: /validate-domains-bulk
    method: POST
    data_selector: domains
    params: {}
- name: Managing domain validations
  endpoint:
    path: /managing-domain-validations
    method: GET
    data_selector: domain_validations
    params: {}
- name: Revalidate a domain
  endpoint:
    path: /revalidate-domain
    method: POST
    data_selector: domain_revalidations
    params: {}
- name: Clear DCV
  endpoint:
    path: /clear-dcv
    method: POST
    data_selector: clear_dcv
    params: {}
- name: persons
  endpoint:
    path: /persons
    method: GET
    data_selector: records
- name: persons
  endpoint:
    path: /api/persons
    method: POST
    data_selector: personData
- name: password_policy
  endpoint:
    path: /api/password_policies
    method: POST
    data_selector: policy
    params: {}
- name: persons
  endpoint:
    path: /api/persons
    method: GET
    data_selector: data
    params: {}
- name: Password Policies
  endpoint:
    path: /settings/password-policies
    method: GET
    data_selector: policies
    params: {}
- name: network_agents
  endpoint:
    path: /network_agents
    method: GET
    data_selector: agents
- name: network_agents
  endpoint:
    path: /network-agents
    method: GET
    data_selector: agents
- name: network_agent
  endpoint:
    path: /network_agents
    method: GET
    data_selector: agents
- name: local_credential_store
  endpoint:
    path: /credstore/add/local
    method: POST
    data_selector: stores
    params:
      storename: <store-name>
- name: hashicorp_vault_credential_store
  endpoint:
    path: /credstore/add/hashicorp
    method: POST
    data_selector: stores
    params:
      storename: <store-name>
      vaulturl: <vault-url>
      authtype: Token
      token: <token>
      rootpath: <root-path>
      verify: <path-of-secret>
- name: cyberark_vault_credential_store
  endpoint:
    path: /credstore/add/cyberark
    method: POST
    data_selector: stores
    params:
      storename: <store-name>
      appid: <app-id>
      ccpurl: <ccp-url>
      verify: <query-string>
- name: delinea_secret_server_credential_store
  endpoint:
    path: /credstore/add/delinea-secret-server
    method: POST
    data_selector: stores
    params:
      storename: <store-name>
      url: <server-url>
      username: <username>
      password: <password>
      verify: <secret-id>
- name: local_credential_store
  endpoint:
    path: /credstore/add/local
    method: POST
    data_selector: store-name
    params: {}
- name: hashicorp_credential_store
  endpoint:
    path: /credstore/add/hashicorp
    method: POST
    data_selector: store-name
    params: {}
- name: cyberark_credential_store
  endpoint:
    path: /credstore/add/cyberark
    method: POST
    data_selector: store-name
    params: {}
- name: delinea_secret_server
  endpoint:
    path: /credstore/add/delinea-secret-server
    method: POST
    data_selector: store-name
    params: {}
- name: add_credentials
  endpoint:
    path: /credstore/credentials/add
    method: POST
    data_selector: credentials
    params:
      storename: <store-name>
      id: <id>
      username: <username>
      password: <password>
      privatekeypath: <private-key-path>
      passphrase: <passphrase>
- name: update_credentials
  endpoint:
    path: /credstore/credentials/update
    method: POST
    data_selector: credentials
    params:
      storename: <store-name>
      id: <id>
      username: <username>
      password: <password>
      privatekeypath: <private-key-path>
      passphrase: <passphrase>
- name: remove_credentials
  endpoint:
    path: /credstore/credentials/remove
    method: DELETE
    data_selector: credentials
    params:
      storename: <store-name>
      id: <id>
- name: add_credentials
  endpoint:
    path: /credstore/credentials/add
    method: POST
    data_selector: credentials
    params:
      storename: <store-name>
      id: <id>
      username: <username>
      password: <password>
      privatekeypath: <private-key-path>
      passphrase: <passphrase>
- name: update_credentials
  endpoint:
    path: /credstore/credentials/update
    method: POST
    data_selector: credentials
    params:
      storename: <store-name>
      id: <id>
      username: <username>
      password: <password>
      privatekeypath: <private-key-path>
      passphrase: <passphrase>
- name: remove_credentials
  endpoint:
    path: /credstore/credentials/remove
    method: DELETE
    data_selector: credentials
    params:
      storename: <store-name>
      id: <id>
- name: hashicorp_credential_store
  endpoint:
    path: /credstore/update/hashicorp
    method: POST
    data_selector: response
    params:
      storename: <store-name>
      vaulturl: <vault-url>
      authtype: <Token/AppRoleSecret/AppRoleFile>
      token: <token>
      rootpath: <root-path>
      roleid: <role-id>
      secretid: <secret-id>
      secretfile: <secret-file>
      appwrapped: <Yes/No>
      verify: <path-of-secret>
- name: cyberark_credential_store
  endpoint:
    path: /credstore/update/cyberark
    method: POST
    data_selector: response
    params:
      storename: <store-name>
      appid: <app-id>
      ccpurl: <ccp-url>
      authcert: <authcert-file-path>
      certpass: <password-of-authcert>
      verify: <query-string>
- name: delinea_secret_server
  endpoint:
    path: /credstore/update/delinea-secret-server
    method: POST
    data_selector: response
    params:
      storename: <store-name>
      url: <server-url>
      username: <username>
      password: <password>
      verify: <secret-id>
- name: network_agent_service_commands
  endpoint:
    path: /network-agent/service-commands
    method: GET
    data_selector: commands
    params: {}
- name: hashicorp
  endpoint:
    path: /credstore/update/hashicorp
    method: POST
    params:
      storename: <store-name>
      vaulturl: <vault-url>
      authtype: <Token/AppRoleSecret/AppRoleFile>
      token: <token>
      rootpath: <root-path>
      roleid: <role-id>
      secretid: <secret-id>
      secretfile: <secret-file>
      appwrapped: <Yes/No>
      verify: <path-of-secret>
- name: cyberark
  endpoint:
    path: /credstore/update/cyberark
    method: POST
    params:
      storename: <store-name>
      appid: <app-id>
      ccpurl: <ccp-url>
      authcert: <authcert-file-path>
      certpass: <password-of-authcert>
      verify: <query-string>
- name: delinea-secret-server
  endpoint:
    path: /credstore/update/delinea-secret-server
    method: POST
    params:
      storename: <store-name>
      url: <server-url>
      username: <username>
      password: <password>
      verify: <secret-id>
- name: network_agent_service_commands
  endpoint:
    path: /network-agent/service-commands
    method: GET
    data_selector: commands
- name: Microsoft_IIS
  endpoint:
    path: /adding-servers/microsoft-iis
    method: POST
- name: Apache
  endpoint:
    path: /adding-servers/apache
    method: POST
- name: Apache_Tomcat
  endpoint:
    path: /adding-servers/apache-tomcat
    method: POST
- name: F5_BIG-IP
  endpoint:
    path: /adding-servers/f5-big-ip
    method: POST
- name: ms_agents
  endpoint:
    path: /api/ms_agents
    method: GET
    data_selector: agents
- name: ms_agents
  endpoint:
    path: /api/ms_agents
    method: GET
    data_selector: agents
    params: {}
- name: AD domain discovery restrictions
  endpoint:
    path: /integrations/ms_agents/ad_domain_restrictions
    method: POST
    data_selector: restrictions
    params: {}
- name: MS agent clusters
  endpoint:
    path: /integrations/ms_agents/clusters
    method: POST
    data_selector: clusters
    params: {}
- name: MS Agent
  endpoint:
    path: /ms-agent
    method: GET
    data_selector: agents
    params: {}
- name: MS AD Certificate Template Mapping
  endpoint:
    path: /ms-ad-certificate-template-mapping
    method: GET
    data_selector: mappings
- name: AD Domain Restrictions
  endpoint:
    path: /api/ad_domain_restrictions
    method: POST
    data_selector: restrictions
    params: {}
- name: MS Agent Cluster
  endpoint:
    path: /api/ms_agent_cluster
    method: POST
    data_selector: clusters
    params: {}
- name: MS AD Certificate Template Mapping
  endpoint:
    path: /ms-ad-certificate-template-mapping
    method: GET
    data_selector: records
- name: MS AD Certificate Template Mapping
  endpoint:
    path: /services/data/mapping/msad/certificate/template
    method: POST
    data_selector: template
    params: {}
- name: ssl_certificate
  endpoint:
    path: /services/data/vXX.X/sobjects/SSL_Certificate
    method: POST
    data_selector: records
- name: client_certificate
  endpoint:
    path: /services/data/vXX.X/sobjects/Client_Certificate
    method: POST
    data_selector: records
- name: device_certificate
  endpoint:
    path: /services/data/vXX.X/sobjects/Device_Certificate
    method: POST
    data_selector: records
- name: MS AD Certificate Template Mapping
  endpoint:
    path: /Enrollment/MS_AD_Certificate_Template_Mapping
    method: GET
    data_selector: records
- name: MS AD Certificate Template Mapping
  endpoint:
    path: /enrollment/ms-ad-certificate-template-mapping
    method: GET
- name: MS AD certificate templates
  endpoint:
    path: /configuring-ad-policies-and-templates
    method: GET
    data_selector: templates
    params: {}
- name: Certificate Services Client - Auto-Enrollment Policy
  endpoint:
    path: /certificate-services-client-auto-enrollment-policy
    method: GET
    data_selector: auto_enrollment
    params: {}
- name: MS AD certificate templates
  endpoint:
    path: /configuring-ad-policies-and-templates
    method: GET
    data_selector: templates
    params: {}
- name: Certificate Services Client - Auto-Enrollment Policy
  endpoint:
    path: /certificate-services-client-auto-enrollment-policy
    method: GET
    data_selector: policies
    params: {}
- name: private_key_agent
  endpoint:
    path: /api/private_key_agent
    method: GET
    data_selector: private_key_agents
- name: private_key_agent
  endpoint:
    path: /private_key_agent
    method: GET
    data_selector: records
- name: upload_private_key
  endpoint:
    path: /upload/private/key
    method: POST
    data_selector: result
- name: download_certificate_and_private_key
  endpoint:
    path: /download/certificate/private/key
    method: GET
    data_selector: result
- name: remove_private_key
  endpoint:
    path: /remove/private/key
    method: DELETE
    data_selector: result
- name: backup_private_keys
  endpoint:
    path: /backup/private/keys
    method: POST
    data_selector: result
- name: restore_private_keys
  endpoint:
    path: /restore/private/keys
    method: POST
    data_selector: result
- name: AWS discovery tasks
  endpoint:
    path: /adding-aws-discovery-tasks.html
    method: POST
    data_selector: tasks
- name: AWS accounts
  endpoint:
    path: /integrations/aws/accounts
    method: GET
- name: aws_accounts
  endpoint:
    path: /api/aws_accounts
    method: GET
- name: aws_account
  endpoint:
    path: /adding-aws-accounts
    method: POST
    data_selector: account
    params: {}
- name: AWS Account
  endpoint:
    path: /adding-aws-accounts
    method: POST
    data_selector: account_details
    params: {}
- name: AWS accounts
  endpoint:
    path: /adding-aws-accounts.html
- name: aws_account
  endpoint:
    path: /api/aws-accounts
    method: POST
    data_selector: accounts
    params: {}
- name: aws_account
  endpoint:
    path: /integrations/aws/accounts
    method: GET
- name: Azure Key Vault
  endpoint:
    path: /configuring-azure-key-vault
    method: GET
- name: SCEP Intune
  endpoint:
    path: /configuring-intune-scep
    method: GET
- name: Intune Exporter
  endpoint:
    path: /configuring-intune-exporter
    method: GET
- name: Azure Key Vault
  endpoint:
    path: /configuring-azure-key-vault.html
    method: GET
- name: SCEP Intune
  endpoint:
    path: /configuring-intune-scep.html
    method: GET
- name: Intune Exporter
  endpoint:
    path: /configuring-intune-exporter.html
    method: GET
- name: azure_account
  endpoint:
    path: /integrations/azure_accounts
    method: POST
    data_selector: account
    params: {}
- name: Azure Account
  endpoint:
    path: /add-azure-account
    method: POST
- name: Azure Account
  endpoint:
    path: /integrations/azure-accounts
    method: GET
    data_selector: accounts
    params: {}
- name: Intune Certificate Exporter Settings
  endpoint:
    path: /IntuneExporter/settings
    method: POST
    data_selector: settings
    params: {}
- name: Intune Certificate Exporter
  endpoint:
    path: /services/data/vXX.X/intune/exporter
    method: POST
    data_selector: settings
    params: {}
- name: Intune Exporter Task
  endpoint:
    path: /integrations/intune-exporter
    method: POST
    data_selector: exporter_settings
    params: {}
- name: Intune Certificate Exporter Settings
  endpoint:
    path: /services/data/vXX.X/sobjects/IntuneExporter
    method: POST
    data_selector: settings
    params: {}
- name: GCP Account
  endpoint:
    path: /gcp/accounts
    method: GET
    data_selector: accounts
- name: GCP accounts
  endpoint:
    path: /gcp-accounts
    method: GET
- name: GCP account
  endpoint:
    path: /adding-gcp-accounts
    method: POST
    data_selector: GCP account details
    params: {}
- name: GCP Account
  endpoint:
    path: /integrations/gcp_accounts
    method: POST
    data_selector: account
    params: {}
- name: GCP Account
  endpoint:
    path: /integrations/gcp_accounts
    method: POST
    data_selector: account
    params: {}
- name: gcp_account
  endpoint:
    path: /api/gcp_accounts
    method: POST
    data_selector: account
    params: {}
- name: CA Connectors
  endpoint:
    path: /ca/connectors
    method: GET
- name: Supported Certificate Types
  endpoint:
    path: /certificate/types
    method: GET
- name: AWS Private CA
  endpoint:
    path: /backend/add
    method: POST
    data_selector: backend
    params:
      type: acmpca
      accesskeyid: <key_id>
      secretaccesskey: <secret_access_key>
      region: <region>
- name: DigiCert
  endpoint:
    path: /backend/add
    method: POST
    data_selector: backend
    params:
      type: digicert
      apikey: <digicert_api_key>
- name: Entrust
  endpoint:
    path: /backend/add
    method: POST
    data_selector: backend
    params:
      type: entrust
      username: <username>
      apikey: <entrust_api_key>
      cert: <path_to_user_certificate>
      key: <path_to_user_certificate_private_key>
- name: GCP CA Service
  endpoint:
    path: /backend/add
    method: POST
    data_selector: backend
    params:
      type: gcpcas
      project: <project_id>
      location: <location>
      key: <path_to_key_file>
- name: Microsoft CA
  endpoint:
    path: /backend/add
    method: POST
    data_selector: backend
    params:
      type: msca
      server: <server>
      ca: <ca_common_name>
- name: third_party_CA_backends
  endpoint:
    path: /create/third-party-ca-backends
    method: POST
    data_selector: backend
    params: {}
- name: certificate_profiles
  endpoint:
    path: /create/certificate-profiles
    method: POST
    data_selector: profile
    params: {}
- name: assign_external_organization
  endpoint:
    path: /assign/external-organization
    method: POST
    data_selector: organization
    params: {}
- name: acmpca
  endpoint:
    path: /backend/add
    method: POST
    data_selector: backend
    params:
      type: acmpca
      accesskeyid: <key_id>
      secretaccesskey: <secret_access_key>
      region: <region>
- name: digicert
  endpoint:
    path: /backend/add
    method: POST
    data_selector: backend
    params:
      type: digicert
      apikey: <digicert_api_key>
- name: entrust
  endpoint:
    path: /backend/add
    method: POST
    data_selector: backend
    params:
      type: entrust
      username: <username>
      apikey: <entrust_api_key>
      cert: <path_to_user_certificate>
      key: <path_to_user_certificate_private_key>
- name: gcpcas
  endpoint:
    path: /backend/add
    method: POST
    data_selector: backend
    params:
      type: gcpcas
      project: <project_id>
      location: <location>
      key: <path_to_key_file>
- name: msca
  endpoint:
    path: /backend/add
    method: POST
    data_selector: backend
    params:
      type: msca
      server: <server>
      ca: <ca_common_name>
- name: DNS Providers
  endpoint:
    path: /dns-providers
    method: GET
- name: dns_connector
  endpoint:
    path: /dns-connectors
    method: GET
    data_selector: connectors
    params: {}
- name: cloudflare
  endpoint:
    path: /provider/add
    method: POST
    data_selector: provider
    params:
      type: cloudflare
- name: route53
  endpoint:
    path: /provider/add
    method: POST
    data_selector: provider
    params:
      type: route53
- name: azure
  endpoint:
    path: /provider/add
    method: POST
    data_selector: provider
    params:
      type: azure
- name: godaddy
  endpoint:
    path: /provider/add
    method: POST
    data_selector: provider
    params:
      type: godaddy
- name: akamai
  endpoint:
    path: /provider/add
    method: POST
    data_selector: provider
    params:
      type: akamai
- name: dnsimple
  endpoint:
    path: /provider/add
    method: POST
    data_selector: provider
    params:
      type: dnsimple
- name: ovh
  endpoint:
    path: /provider/add
    method: POST
    data_selector: provider
    params:
      type: ovh
- name: cloudflare
  endpoint:
    path: /services/data/vXX.X/sobjects/Cloudflare
    method: POST
    data_selector: records
    params: {}
- name: route53
  endpoint:
    path: /services/data/vXX.X/sobjects/Route53
    method: POST
    data_selector: records
    params: {}
- name: azure
  endpoint:
    path: /services/data/vXX.X/sobjects/Azure
    method: POST
    data_selector: records
    params: {}
- name: godaddy
  endpoint:
    path: /services/data/vXX.X/sobjects/GoDaddy
    method: POST
    data_selector: records
    params: {}
- name: akamai
  endpoint:
    path: /services/data/vXX.X/sobjects/Akamai
    method: POST
    data_selector: records
    params: {}
- name: dnsimple
  endpoint:
    path: /services/data/vXX.X/sobjects/DNSimple
    method: POST
    data_selector: records
    params: {}
- name: ovh
  endpoint:
    path: /services/data/vXX.X/sobjects/OVH
    method: POST
    data_selector: records
    params: {}
- name: Cloudflare
  endpoint:
    path: /provider/add
    method: POST
    params:
      type: cloudflare
      token: <yourCloudflareToken>
- name: Amazon Route 53
  endpoint:
    path: /provider/add
    method: POST
    params:
      type: route53
      access-key-id: <yourAccessKeyID>
      region: <yourAWSRegion>
      secret-key: <yourSecretKey>
      session-token: <yourSessionToken>
- name: Azure DNS
  endpoint:
    path: /provider/add
    method: POST
    params:
      type: azure
      resource-group: <yourResourceGroupName>
      subscription: <yourSubscriptionID>
      tenant-id: <yourTenantID>
      client-id: <yourClientID>
      client-secret: <yourClientSecret>
- name: GoDaddy DNS
  endpoint:
    path: /provider/add
    method: POST
    params:
      type: godaddy
      api-key: <yourAPIKey>
      api-secret: <yourAPISecret>
- name: Akamai Edge DNS
  endpoint:
    path: /provider/add
    method: POST
    params:
      type: akamai
      access-token: <yourAccessToken>
      client-secret: <yourClientSecret>
      client-token: <yourClientToken>
      host: <yourHost>
- name: DNSimple DNS
  endpoint:
    path: /provider/add
    method: POST
    params:
      type: dnsimple
      access-token: <yourAccessToken>
      account-id: <yourAccountID>
- name: OVHcloud
  endpoint:
    path: /provider/add
    method: POST
    params:
      type: ovh
      endpoint: <yourOVHendpoint>
      app-key: <yourAPIkey>
      app-secret: <yourAppSecret>
      consumer-key: <yourConsumerKey>
- name: cloudflare
  endpoint:
    path: /provider/add
    method: POST
    params:
      type: cloudflare
      name: <yourProviderName>
      token: <yourCloudflareToken>
- name: route53
  endpoint:
    path: /provider/add
    method: POST
    params:
      type: route53
      name: <yourProviderName>
      access-key-id: <yourAccessKeyID>
      region: <yourAWSRegion>
      secret-key: <yourSecretKey>
      session-token: <yourSessionToken>
- name: azure
  endpoint:
    path: /provider/add
    method: POST
    params:
      type: azure
      name: <yourProviderName>
      resource-group: <yourResourceGroupName>
      subscription: <yourSubscriptionID>
      tenant-id: <yourTenantID>
      client-id: <yourClientID>
      client-secret: <yourClientSecret>
- name: godaddy
  endpoint:
    path: /provider/add
    method: POST
    params:
      type: godaddy
      name: <yourProviderName>
      api-key: <yourAPIKey>
      api-secret: <yourAPISecret>
- name: akamai
  endpoint:
    path: /provider/add
    method: POST
    params:
      type: akamai
      name: <yourProviderName>
      access-token: <yourAccessToken>
      client-secret: <yourClientSecret>
      client-token: <yourClientToken>
      host: <yourHost>
- name: dnsimple
  endpoint:
    path: /provider/add
    method: POST
    params:
      type: dnsimple
      name: <yourProviderName>
      access-token: <yourAccessToken>
      account-id: <yourAccountID>
- name: ovh
  endpoint:
    path: /provider/add
    method: POST
    params:
      type: ovh
      name: <yourProviderName>
      endpoint: <yourOVHendpoint>
      app-key: <yourAPIkey>
      app-secret: <yourAppSecret>
      consumer-key: <yourConsumerKey>
- name: audit_api_keys
  endpoint:
    path: /audit/api/keys
    method: POST
    data_selector: key
    params: {}
- name: assignment_rules
  endpoint:
    path: /discovery/assignment_rules
    method: GET
    data_selector: rules
    params: {}
- name: assignment_rule
  endpoint:
    path: /adding-assignment-rules
    method: GET
    data_selector: rules
    params: {}
- name: assignment_rules
  endpoint:
    path: /discovery/assignment_rules
    method: GET
    data_selector: rules
    params: {}
- name: assignment_rules
  endpoint:
    path: /adding-assignment-rules
    method: GET
    data_selector: rules
- name: certificate_buckets
  endpoint:
    path: /certificate-buckets
    method: GET
    data_selector: buckets
- name: certificate_buckets
  endpoint:
    path: /api/certificate_buckets
    method: GET
    data_selector: certificates
    params: {}
- name: certificate_buckets
  endpoint:
    path: /adding-certificate-buckets
    method: POST
- name: network_discovery_tasks
  endpoint:
    path: /Discovery/NetworkDiscoveryTasks
    method: POST
    data_selector: tasks
- name: network_discovery_task
  endpoint:
    path: /discovery/network_discovery_tasks
    method: POST
    data_selector: tasks
    params: {}
- name: import_network_discovery_tasks
  endpoint:
    path: /discovery/import_network_discovery_tasks
    method: POST
    data_selector: import_tasks
    params: {}
- name: network_discovery_task
  endpoint:
    path: /discovery/network_discovery_tasks
    method: GET
    data_selector: tasks
    params: {}
- name: ms_ad_discovery_tasks
  endpoint:
    path: /ms-ad-discovery-tasks
    method: GET
- name: MS AD Discovery Tasks
  endpoint:
    path: /discovery/ms-ad-tasks
    method: POST
    data_selector: tasks
    params: {}
- name: MS AD Discovery Tasks
  endpoint:
    path: /discovery/ms_ad_discovery_tasks
    method: GET
    data_selector: tasks
    params: {}
- name: AWS Discovery Tasks
  endpoint:
    path: /aws/discovery-tasks
    method: GET
- name: aws_discovery_task
  endpoint:
    path: /discovery/aws_tasks
    method: POST
    data_selector: tasks
    params: {}
- name: AWS Discovery Tasks
  endpoint:
    path: /discovery/aws-tasks
    method: GET
- name: AWS Discovery Task
  endpoint:
    path: /adding-aws-discovery-tasks
    method: POST
    data_selector: task
    params: {}
- name: AWS discovery tasks
  endpoint:
    path: /adding-aws-discovery-tasks
    method: GET
- name: Azure Key Vault Discovery Task
  endpoint:
    path: /discovery/azure-key-vault
    method: POST
    data_selector: taskDetails
    params: {}
- name: Azure Key Vault Discovery Tasks
  endpoint:
    path: /azure-key-vault/discovery-tasks
    method: GET
- name: Azure Key Vault Discovery Task
  endpoint:
    path: /discovery/azure-key-vault
    method: POST
    data_selector: taskDetails
    params: {}
- name: GCP discovery task
  endpoint:
    path: /adding-gcp-discovery-tasks
    method: POST
    data_selector: task_details
- name: Azure Key Vault discovery tasks
  endpoint:
    path: /adding-azure-key-vault-discovery-tasks
    method: GET
- name: Azure Key Vault Discovery Tasks
  endpoint:
    path: /discovery/azure-key-vault
    method: GET
- name: GCP discovery task
  endpoint:
    path: /adding-gcp-discovery-tasks
    method: GET
    data_selector: details
    params: {}
- name: GCP discovery tasks
  endpoint:
    path: /adding-gcp-discovery-tasks
    method: GET
- name: legacy_key_encryption
  endpoint:
    path: /legacy/key/encryption
    method: GET
    data_selector: records
- name: GCP Discovery Tasks
  endpoint:
    path: /discovery/gcp
    method: GET
    data_selector: tasks
    params: {}
- name: encryption_key_pair
  endpoint:
    path: /settings/legacy_key_encryption
    method: POST
    data_selector: encryption_key_pair
    params: {}
- name: legacy_key_encryption
  endpoint:
    path: /legacy/key/encryption
    method: POST
    data_selector: result
- name: client_certificates
  endpoint:
    path: /Certificates/ClientCertificates
    method: GET
    data_selector: client_certificates
- name: reports
  endpoint:
    path: /reports
    method: GET
    data_selector: reports
    params: {}
- name: Key Vault Management
  endpoint:
    path: /keyvault/manage
    method: GET
- name: Client Certificates
  endpoint:
    path: /Certificates/ClientCertificates
    method: GET
    data_selector: ClientCertificates
    params: {}
- name: reports
  endpoint:
    path: /reports
    method: GET
    data_selector: report_types
    params: {}
- name: ssl_certificates
  endpoint:
    path: /reports/ssl_certificates
    method: GET
- name: client_certificates
  endpoint:
    path: /reports/client_certificates
    method: GET
- name: code_signing_certificates
  endpoint:
    path: /reports/code_signing_certificates
    method: GET
- name: device_certificates
  endpoint:
    path: /reports/device_certificates
    method: GET
- name: audits
  endpoint:
    path: /reports/audits
    method: GET
- name: sent_notifications
  endpoint:
    path: /reports/sent_notifications
    method: GET
- name: private_key_agent_activity
  endpoint:
    path: /reports/private_key_agent_activity
    method: GET
- name: domains
  endpoint:
    path: /reports/domains
    method: GET
- name: admins
  endpoint:
    path: /reports/admins
    method: GET
- name: manual_report
  endpoint:
    path: /reports/manual
    method: POST
    data_selector: reports
    params: {}
- name: scheduled_report
  endpoint:
    path: /reports/scheduled
    method: POST
    data_selector: reports
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: POST
    data_selector: notification
    params: {}
- name: notifications
  endpoint:
    path: /settings/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: notification_template
  endpoint:
    path: /api/notification-templates
    method: POST
    data_selector: template
    params: {}
- name: notification_templates
  endpoint:
    path: /adding-notification-templates
    method: GET
    data_selector: templates
    params: {}
- name: custom_fields
  endpoint:
    path: /api/custom_fields
    method: POST
    data_selector: fields
    params: {}
- name: custom_fields
  endpoint:
    path: /api/custom_fields
    method: GET
    data_selector: fields
- name: custom_field
  endpoint:
    path: /settings/custom_fields
    method: POST
    data_selector: fields
    params: {}
- name: access_restrictions
  endpoint:
    path: /access/restrictions
    method: GET
    data_selector: restrictions
    params: {}
- name: edit_access_restriction
  endpoint:
    path: /edit/access/restriction
    method: POST
    data_selector: access_restrictions
    params: {}
- name: delete_access_restriction
  endpoint:
    path: /delete/access/restriction
    method: DELETE
    data_selector: access_restrictions
    params: {}
- name: certificate_profiles
  endpoint:
    path: /enrollment/certificate_profiles
    method: GET
    data_selector: profiles
    params: {}
- name: Access Restrictions
  endpoint:
    path: /access-restrictions
    method: GET
    data_selector: restrictions
    params: {}
- name: Access Control List
  endpoint:
    path: /access-control-list
    method: GET
    data_selector: access_control_list
    params: {}
- name: certificate_profile
  endpoint:
    path: /Enrollment/CertificateProfiles
    method: POST
    data_selector: certificateProfile
    params: {}
- name: certificate_profiles
  endpoint:
    path: /enrollment/certificate_profiles
    method: GET
    data_selector: profiles
- name: certificate_profile
  endpoint:
    path: /Enrollment/CertificateProfiles
    method: POST
    data_selector: certificate_profiles
- name: certificate_profile
  endpoint:
    path: /Enrollment/CertificateProfiles
    method: POST
    data_selector: profile
    params: {}
- name: certificate_profiles
  endpoint:
    path: /adding-certificate-profiles
    method: GET
- name: certificate_profiles
  endpoint:
    path: /enrollment/certificate_profiles
    method: GET
- name: certificate_profile
  endpoint:
    path: /enrollment/certificate_profiles
    method: POST
    data_selector: profiles
    params: {}
- name: certificate_profiles
  endpoint:
    path: /adding-certificate-profiles
    method: GET
- name: certificate_profiles
  endpoint:
    path: /enrollment/certificate_profiles
    method: GET
    data_selector: profiles
- name: enrollment_forms
  endpoint:
    path: /enrollment/forms
    method: GET
    data_selector: enrollmentForms
- name: sectigo_public_ca
  endpoint:
    path: /enrollment/certificate_profiles/sectigo_public
    method: GET
    data_selector: profile_details
- name: sectigo_private_ca
  endpoint:
    path: /enrollment/certificate_profiles/sectigo_private
    method: GET
    data_selector: profile_details
- name: microsoft_ca
  endpoint:
    path: /enrollment/certificate_profiles/microsoft
    method: GET
    data_selector: profile_details
- name: aws_ca
  endpoint:
    path: /enrollment/certificate_profiles/aws
    method: GET
    data_selector: profile_details
- name: digicert_ca
  endpoint:
    path: /enrollment/certificate_profiles/digicert
    method: GET
    data_selector: profile_details
- name: entrust_ca
  endpoint:
    path: /enrollment/certificate_profiles/entrust
    method: GET
    data_selector: profile_details
- name: gcp_ca
  endpoint:
    path: /enrollment/certificate_profiles/gcp
    method: GET
    data_selector: profile_details
- name: enrollment_forms
  endpoint:
    path: /enrollment/forms
    method: GET
    data_selector: forms
- name: enrollment_form
  endpoint:
    path: /enrollment/forms
    method: POST
    data_selector: form
    params: {}
- name: enrollment_form_account
  endpoint:
    path: /enrollment/forms/accounts
    method: POST
    data_selector: account
    params: {}
- name: enrollment_forms
  endpoint:
    path: /enrollment/forms
    method: GET
- name: enrollment_form
  endpoint:
    path: /enrollment/forms
    method: POST
    data_selector: enrollment_forms
- name: enrollment_form_account
  endpoint:
    path: /enrollment/form/accounts
    method: POST
    data_selector: enrollment_form_accounts
- name: bulk_ssl_enrollment
  endpoint:
    path: /bulk_ssl_enrollment
    method: POST
- name: enrollment_forms
  endpoint:
    path: /enrollment/forms
    method: GET
    data_selector: forms
- name: enrollment_form_accounts
  endpoint:
    path: /enrollment/form/accounts
    method: GET
    data_selector: accounts
- name: bulk_ssl_enrollment
  endpoint:
    path: /bulk_ssl_enrollment
    method: POST
    data_selector: requests
    params: {}
- name: bulk_enrollment_account
  endpoint:
    path: /bulk_ssl/enrollment
    method: POST
    data_selector: account
    params: {}
- name: bulk_enrollment_account
  endpoint:
    path: /bulk_ssl/enrollment/accounts
    method: POST
    data_selector: account
    params: {}
- name: bulk_ssl_enrollment
  endpoint:
    path: /bulk_ssl_enrollment
    method: GET
    data_selector: records
    params: {}
- name: ACME Enrollment
  endpoint:
    path: /enrollment/acme
    method: GET
    data_selector: endpoints
    params: {}
- name: ACME Accounts
  endpoint:
    path: /Enrollment/ACME/Accounts
    method: POST
    data_selector: account
    params: {}
- name: Adding ACME accounts
  endpoint:
    path: /adding-acme-accounts
    method: GET
- name: ACME accounts
  endpoint:
    path: /adding-acme-accounts.html
- name: SCEP Enrollment
  endpoint:
    path: /scep/enrollment
    method: GET
- name: SCEP Endpoint
  endpoint:
    path: /Enrollment/SCEP
    method: POST
- name: SCEP Account
  endpoint:
    path: /Enrollment/SCEP/Accounts
    method: POST
- name: SCEP Enrollment
  endpoint:
    path: /scep/enrollment
    method: GET
    data_selector: enrollment_data
- name: SCEP Endpoint
  endpoint:
    path: /enrollment/scep
    method: POST
    data_selector: endpoint
    params: {}
- name: SCEP Account
  endpoint:
    path: /enrollment/scep/accounts
    method: POST
    data_selector: account
    params: {}
- name: SSL EST
  endpoint:
    path: /est/ssl
    method: POST
- name: Client certificate EST
  endpoint:
    path: /est/client
    method: POST
- name: Device certificate EST
  endpoint:
    path: /est/device
    method: POST
- name: SCEP endpoint
  endpoint:
    path: /scep/endpoint
    method: GET
    data_selector: details
    params: {}
- name: EST endpoint
  endpoint:
    path: /enrollment/est
    method: POST
    data_selector: endpoint
    params: {}
- name: SSL_EST
  endpoint:
    path: /est/ssl
    method: GET
- name: Client_certificate_EST
  endpoint:
    path: /est/client_certificate
    method: GET
- name: Device_certificate_EST
  endpoint:
    path: /est/device_certificate
    method: GET
- name: EST
  endpoint:
    path: /Enrollment/EST
    method: POST
    data_selector: endpoint
    params: {}
- name: SSL certificates
  endpoint:
    path: /path/to/ssl_certificates
    method: GET
- name: Client certificates
  endpoint:
    path: /path/to/client_certificates
    method: GET
- name: Device certificates
  endpoint:
    path: /path/to/device_certificates
    method: GET
- name: Code Signing certificates
  endpoint:
    path: /path/to/code_signing_certificates
    method: GET
- name: SSL certificates
  endpoint:
    path: /enrollment/ssl
    method: GET
- name: Client certificates
  endpoint:
    path: /enrollment/client
    method: GET
- name: Device certificates
  endpoint:
    path: /enrollment/device
    method: GET
- name: Code Signing certificates
  endpoint:
    path: /enrollment/code-signing
    method: GET
- name: CA Backends
  endpoint:
    path: /api/ca-backends
    method: GET
    data_selector: backends
- name: CA Backend
  endpoint:
    path: /adding-ca-backends
    method: POST
    data_selector: backend_info
    params: {}
- name: CA backend
  endpoint:
    path: /add-ca-backend
    method: POST
    data_selector: response
    params: {}
- name: Adding private CAs
  endpoint:
    path: /adding-private-cas.html
- name: CA_certificate_download
  endpoint:
    path: /download/ca_certificate
    method: GET
    data_selector: certificate
    params: {}
- name: CA_certificate_revoke
  endpoint:
    path: /revoke/ca_certificate
    method: POST
    data_selector: confirmation
    params: {}
- name: CA_certificate_delete
  endpoint:
    path: /delete/ca_certificate
    method: DELETE
    data_selector: confirmation
    params: {}
- name: general_settings
  endpoint:
    path: /settings/general
    method: GET
    data_selector: fields
    params: {}
- name: Download CA Certificate
  endpoint:
    path: /managing-ca-certificates/download
    method: GET
    data_selector: certificates
    params: {}
- name: Revoke Intermediate CA Certificate
  endpoint:
    path: /managing-ca-certificates/revoke
    method: POST
    data_selector: revocation
    params: {}
- name: Delete Root Private CA
  endpoint:
    path: /managing-ca-certificates/delete
    method: DELETE
    data_selector: deletion
    params: {}
- name: general_settings
  endpoint:
    path: /settings/general
    method: GET
    data_selector: settings
    params: {}
notes:
- The connector is deployed to GCP with the Terraform CLI.
- The Google Cloud CLI is used to invoke the Cloud Function.
- The connector manages only the certificate enrollment with Sectigo SCM REST APIs
  and uploading the certificates to CPS.
- If you don’t want to provide the user passwords in the config.json file for security
  reasons, set the value to an empty string (""). The deploy.sh script will request
  the password value during deployment.
- Before using the destroy.sh script, ensure that all certificates are unassigned
  from applications and removed from the profile.
- You need to accept the SCM Client EULA when running deploy.sh for the first time.
- The connector supports RSA (2048-bit, 3072-bit, and 4096-bit) and ECDSA (P256r1
  and P384r1) key types.
- The connector can provision Domain Validation (DV), Organization Validation (OV),
  and Extended Validation (EV) SSL/TLS certificates, including SAN and wildcard certificates.
- It supports both public and private CAs.
- Certificates are automatically attached to the virtual services.
- The connector doesn’t control config sync for an HA group—​an SSL/TLS certificate
  is deployed to one of the devices in a device group, and the BIG-IP system is responsible
  for propagating configuration changes to all devices in the group.
- The private key is never exposed to the connector machine or outside BIG-IP during
  the TLS handshake.
- We recommend that you use persistent storage to get continuous synchronization without
  duplicates or loses.
- State is a small json (under 1kb) and doesn’t grow in size over time.
- SCM Pro is a cloud-based platform that provides complete visibility and lifecycle
  control over public SSL/TLS certificates.
- CaaS provides automated certificate issuance, validation, and lifecycle management
  via the ACME protocol.
- The maximum (and default) duration of a certificate issued through CaaS is 90 days.
- Ensure you have an active SCM Enterprise account.
- You must be a MRAO administrator or have necessary permissions.
- Domains must be validated before publicly trusted certificates can be issued.
- If a domain is used only for private certificates, it does not require validation.
- SCM supports various enrollment methods for SSL certificates.
- Certificates in the .zip file must be in .cer, .crt, or .pem format.
- Domains must be validated before publicly trusted SSL certificates can be issued.
- Depending on your configuration, additional custom fields may be available.
- If prevalidation is disabled for your account, you must validate your domain(s)
  before proceeding with certificate issuance.
- This requires the configuration of a private key agent.
- The auto-installation of an SSL certificate on Apache or Tomcat servers requires
  the server to be restarted following deployment.
- This requires the configuration of Azure Key Vault.
- Client certificates are used to authenticate the identity of a user or device to
  a server.
- Only certificates issued by the Sectigo Public CA can be replaced in SCM.
- Supports various enrollment methods for client certificates including Self-Enrollment,
  MS agent, EST, SCEP, REST API, Admin API, and CA connector.
- Exporting a client certificate and private key requires the configuration of Intune
  Exporter.
- Deleting a client certificate entry does not revoke the certificate itself.
- Administrators can be managed on the Settings Admins page.
- Enrollment methods include Enrollment Wizard, Self-Enrollment, MS agent, EST, SCEP,
  REST API, Admin API, and CA connector.
- Once an IdP administrator has been added in SCM, they are sent an email with links
  to all configured IdPs. They should use the most appropriate IdP link to complete
  their registration.
- Once created in SCM, the administrator can access SCM using a Sectigo Authentication
  Service account with the same email address. This account can be created from the
  SCM login page.
- You can create a maximum of two dynamic IdP templates — one for RAO admins and one
  for DRAO admins.
- You can choose to provide a password at a later time. However, the admin will not
  be able to log in until the password has been configured on the **Authentication**
  tab of the **Edit API Admin** dialog.
- Updating your identity provider can impact the access of existing administrators
  created using this template.
- IdP administrators created from an IdP template cannot have their roles and privileges
  edited unless they are unlinked from the template through the Menu icon in the top
  right of the Edit IdP Admin dialog.
- Updating your identity provider or IdP attribute can impact the access and organizations/departments
  available to existing administrators created using this template.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- IdP administrators created from an IdP template cannot have their roles and privileges
  edited unless they are unlinked from the template.
- When enabled, applicants can enroll through the Web Service API for SSL certificates
  managed by the organization.
- This option is only available if enabled for your account.
- This option is only available if enabled for your account. For more information,
  contact your Sectigo account manager.
- Requires setup of connected app in Sectigo
- Some fields may have specific requirements for input
- Enable Web/REST API for SSL certificates managed by the organization or department.
- OV SSL, OV S/MIME, and EV SSL certificates require additional validation to verify
  the organization’s identity.
- Requires additional validation to verify your organization’s identity.
- Once submitted, validation requests are sent to a Sectigo validation specialist
  for review.
- Domains can be configured for certificate transparency (CT) log monitoring.
- Once added, domains must be validated before publicly trusted certificates can be
  issued.
- Depending on the configuration of your account, the option to perform domain control
  validation (DCV) may not be available on the Domains page.
- Importing persons requires .csv file format specific to organization settings.
- There can only be one MRAO password policy.
- There can only be one RAO/DRAO password policy.
- The organization assignment policy needs to be delegated.
- Network agents can be managed on the Integrations Network Agents page.
- The organization assignment policy needs to be delegated. For more information,
  see [Delegate an organization/department password policy](managing-password-policies.html#_delegate_an_organizationdepartment_password_policy).
- Network agents require a number of platform-dependent permissions in order to be
  installed and to perform SSL certificate discovery and automatic installation.
- The agent should now be listed on the Network Agents page with a status of Connected.
- A local credential store named sectigo-store is automatically created when you install
  a network agent.
- A network agent installed on a single server can be configured to communicate with,
  and install certificates on, other remote servers in the network.
- Autoupdate is only available on agent version `3.0` or later.
- For Windows, the network agent logs are stored in %PROGRAMDATA%\Sectigo\Network
  Agent\logs and the configuration files are stored in %PROGRAMDATA%\Sectigo\Network
  Agent\conf.
- Linux native packages do not support auto-update.
- The Docker container does not support auto-update.
- Autoupdate is only available on agent version 3.0 or later.
- Once you have added the credential store, you must add servers to the network agent
  and configure them to use the credential store.
- Only remote auto-installation is supported on F5 BIG-IP. Remote installation is
  performed using the F5 REST API.
- The server types available are dependent on how your account is configured.
- The agent no longer automatically installs the required AD CS role. You must manually
  install the AD CS role on the target server before installing the agent.
- As of version 4.0, the agent no longer automatically installs the required AD CS
  role.
- Ensure that your OS proxy settings have been configured to allow access to https://dist.sectigo.com.
- LDAPS communication is the default protocol unless specified otherwise.
- Certificate Type for SSL certificates must be SSL Certificate.
- Certificate Type for Client certificates must be Client Certificate.
- Certificate Type for Device certificates must be Device Certificate.
- Attribute mapping is not available for SSL certificates.
- This mapping can override settings specified in the MS AD Certificate Template.
- Some attributes represent a mandatory detail of the connected Person profile and
  cannot be deleted.
- MS AD certificate templates and AD group policies are highly customizable and many
  of the configuration options have no requirements in relation to SCM.
- Private key agents can be managed on the Integrations Private Key Agent page.
- SCM currently only supports one private key agent at a time. Adding a new private
  key agent will remove any existing one from SCM.
- Certificate issuance from SCM is achieved by mapping SCM certificate profiles to
  custom MS AD certificate templates.
- The auto-enrollment policy is required for associated users or computers to automatically
  enroll certificates.
- If needed, you can retrieve the installation token from the **Integrations**  **Private
  Key Agent** page. This token is no longer available once the agent connects to SCM
  for the first time.
- For Windows, the private key agent logs are stored in `%PROGRAMDATA%\Sectigo\PK
  Agent\logs` and the configuration files are stored in `%PROGRAMDATA%\Sectigo\PK
  Agent\conf`.
- For Linux, the private key agent logs are stored in `/var/opt/sectigo-pk-agent/logs`
  and the configuration files are stored in `/var/opt/sectigo-pk-agent/conf`.
- Available for private key agent version `2.0` and later.
- If needed, you can retrieve the installation token from the Integrations Private
  Key Agent page. This token is no longer available once the agent connects to SCM
  for the first time.
- For Windows, the private key agent logs are stored in %PROGRAMDATA%\Sectigo\PK Agent\logs
  and the configuration files are stored in %PROGRAMDATA%\Sectigo\PK Agent\conf.
- For Linux, the private key agent logs are stored in /var/opt/sectigo-pk-agent/logs
  and the configuration files are stored in /var/opt/sectigo-pk-agent/conf.
- This cannot be undone. When using Local key storage, you must back up or export
  your keys before deleting this file to prevent losing your private keys. Only delete
  this folder if you want to completely remove all files and logs related to the agent.
- This cannot be undone. When using Local key storage, you must back up or export
  your keys before deleting this directory to prevent losing your private keys. Only
  delete this directory if you want to completely remove all files and logs related
  to the agent.
- Available for private key agent version 2.0 and later.
- Although the download is initiated via SCM, the private key is not transferred to
  the SCM servers, and the private key never leaves your network.
- The ACM integration is only available if enabled for your account. For more information,
  contact your Sectigo account manager.
- The AWS access key ID is used to authenticate API requests.
- The AWS secret access key is used to sign API requests.
- SCM integration with Azure Key Vault requires an active Azure subscription.
- Azure Global Administrator permissions are required.
- At least one resource group and one Key Vault must be configured.
- 'Access granted for the following Sectigo Certificate Manager public IP ranges:
  91.199.212.0/24, 91.209.196.0/24, 91.212.12.0/24.'
- The Intune SCEP integration is only available if enabled for your account.
- The Intune SCEP integration is only available if enabled for your account. For more
  information, contact your Sectigo account manager.
- The Intune Exporter integration is only available if enabled for your account.
- The Intune Exporter integration is only available if enabled for your account. For
  more information, contact your Sectigo account manager.
- Intune Exporter requires the completion of prerequisite configurations in SCM and
  Microsoft Azure.
- The Microsoft Graph Deployment URL is typically https://graph.microsoft.com.
- The provider name is typically Microsoft Software Key Storage Provider.
- The Provider name is typically Microsoft Software Key Storage Provider.
- The GCP integration is only available if enabled for your account. For more information,
  contact your Sectigo account manager.
- The GCP integration is only available if enabled for your account.
- GCP accounts require the configuration of a service account in your GCP project.
- The application’s configuration and log files are stored in C:\ProgramData\Sectigo
  Limited\SectigoCBCS.
- An SCM account and MRAO administrator permissions are required to install a CA connector.
- Administrator permissions for the CA are necessary.
- Requires connector version 1.1 or later.
- Navigate to Integrations Audit API Keys to add a key.
- Copy and save the client secret after creation.
- Navigate to Discovery Assignment Rules.
- Click the Add icon.
- Selects conditions based on certificate attributes like Common Name, Organization,
  and more.
- 'Optional: Enable Discovery Import API access to bucket to allow certificates to
  be imported directly into the bucket.'
- Tasks are scheduled for one minute after the import is completed. With the exception
  of Manual, and Daily, tasks are run on Sundays.
- Tasks are scheduled for one minute after the import is completed.
- With the exception of Manual and Daily, tasks are run on Sundays.
- Update scan ranges as required.
- MS AD discovery tasks require the installation and configuration of an MS agent.
- When left empty, the task scans all accessible AD domains.
- If the depth is set to 2, the task scans the top level (domain) and the next two
  nested levels.
- When the depth is set to 0, the task scans all accessible levels.
- AWS discovery tasks require the configuration of an AWS account in SCM.
- Azure Key Vault discovery tasks require the configuration of an Azure account in
  SCM.
- GCP discovery tasks require the configuration of a GCP account in SCM
- GCP discovery tasks require the configuration of a GCP account in SCM.
- Scanning external CAs requires a configured connector of version 3.0 or later.
- Discovered certificates are listed on the Certificate Buckets page under the certificate
  bucket specified for the scan.
- Legacy Key Encryption is only available if enabled for your account.
- It is suggested that you use Sectigo Key Vault for key storage.
- Sectigo Key Vault is only available if enabled for your account. For more information,
  contact your Sectigo account manager.
- There is only one encryption key pair for all MRAOs and it is not associated with
  specific organizations or departments.
- Reports summarize information and activity related to certificates, administrator
  accounts, domain control, and general system behavior.
- SSL Certificate reports provide details about SSL certificates and their related
  management activities.
- Some reports may have specific filter requirements
- Notifications can be marked inactive to prevent sending without deletion.
- The fields and variables available depend on the type of template you are creating.
- The total number of custom fields that you can add is specified by your Sectigo
  account manager.
- The total number of custom fields that you can add is specified by your Sectigo
  account manager. If you reach the maximum permitted, Add is no longer displayed
  in the interface. Contact your Sectigo account manager to have more fields added
  to your account.
- The configuration options available for a certificate profile are dependent on the
  issuing CA.
- Multiple authentication types are available for accessing enrollment forms.
- Supports various authentication types including Email Confirmation, Identity Provider,
  and Secret ID.
- Bulk SSL enrollment requires a configured PK agent to issue certificates.
- The bulk enrollment form cannot be used if there are mandatory custom fields configured
  for enrollment endpoints in your account.
- Users enrolling certificates using this account must have an email from a domain
  delegated to this organization.
- The organization cannot be changed once the account is created.
- The department cannot be changed once the account is created.
- Users enrolling certificates using this account must have an email from a domain
  delegated to this department.
- ACME endpoints are only available if enabled for your account.
- Access to SCEP endpoints is granted through accounts specifically created for each
  endpoint.
- The URL should be used on the EST client configuration so the client can access
  the EST server.
- The URL for the endpoint should be used on the EST client configuration so the client
  can access the EST server.
- When selected, certificate requests are automatically approved without needing administrator
  approval in SCM.
- The password is mandatory when certificate authentication is not in use.
- Automatically approve certificate requests is only available for SSL certificates.
- Revoking an intermediate CA certificate will revoke all certificates issued by the
  CA. Root CAs cannot be revoked.
- Deleting a root private CA does not automatically de-trust the CA certificate. You
  must manually remove the CA certificate from the client trust store.
- General settings enable you to tailor options to meet your specific preferences
  and requirements.
- Changes to the General Settings fields are global and will affect all administrators
  in your account.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Invalid credentials: Verify client ID and secret.'
- 'Access denied: Ensure proper role assignments.'
- 'Access granted for the following Sectigo Certificate Manager public IP ranges:
  91.199.212.0/24, 91.209.196.0/24, 91.212.12.0/24'
- '403 Access Denied: Blocked from accessing SCM due to access restrictions'
- 403 Access Denied
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://sectigo.com
  auth:
    type: oauth2
source_metadata: null
