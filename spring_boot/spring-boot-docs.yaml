resources:
- name: springfox-swagger2
  endpoint:
    path: /dependencies/springfox-swagger2
    method: GET
    data_selector: records
- name: springfox-swagger-ui
  endpoint:
    path: /dependencies/springfox-swagger-ui
    method: GET
    data_selector: records
- name: product_list
  endpoint:
    path: /product/list
    method: GET
    data_selector: productList
- name: show_product
  endpoint:
    path: /product/show/{id}
    method: GET
    data_selector: product
- name: add_product
  endpoint:
    path: /product/add
    method: POST
    data_selector: Product saved successfully
- name: update_product
  endpoint:
    path: /product/update/{id}
    method: PUT
    data_selector: Product updated successfully
- name: delete_product
  endpoint:
    path: /product/delete/{id}
    method: DELETE
    data_selector: Product deleted successfully
- name: products
  endpoint:
    path: /product/list
    method: GET
    data_selector: productList
- name: product_by_id
  endpoint:
    path: /product/show/{id}
    method: GET
    data_selector: product
- name: add_product
  endpoint:
    path: /product/add
    method: POST
- name: update_product
  endpoint:
    path: /product/update/{id}
    method: PUT
- name: delete_product
  endpoint:
    path: /product/delete/{id}
    method: DELETE
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: company
  endpoint:
    path: /company
    method: GET
    data_selector: businessNumber
- name: employee
  endpoint:
    path: /employee
    method: GET
    data_selector: name
- name: student
  endpoint:
    path: /student
    method: GET
    data_selector: collgeName
- name: college
  endpoint:
    path: /college
    method: GET
    data_selector: noStudentsEnrolled
- name: project_env
  endpoint:
    path: /project/env
    method: GET
- name: structured_logging
  endpoint:
    path: /logging/structured
    method: GET
    data_selector: logs
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: String to char using charAt
  endpoint:
    path: /convert/string/to/char/using/charAt
    method: GET
    data_selector: records
    params: {}
- name: String to char with toCharArray
  endpoint:
    path: /convert/string/to/char/with/toCharArray
    method: GET
    data_selector: records
    params: {}
- name: String to char using substring
  endpoint:
    path: /convert/string/to/char/using/substring
    method: GET
    data_selector: records
    params: {}
- name: How to Use Log4J 2 with Spring Boot
  endpoint:
    path: /using-log4j-2-spring-boot/
    method: GET
- name: Asynchronous Logging with Log4J 2
  endpoint:
    path: /asynchronous-logging-with-log4j-2/
    method: GET
- name: How to Configure Log4J2 Using Yaml
  endpoint:
    path: /log4j-2-configuration-using-yaml/
    method: GET
- name: 'Log4J 2 Configuration: Using JSON'
  endpoint:
    path: /log4j-2-configuration-using-json/
    method: GET
- name: 'Log4J 2 Configuration: Using XML'
  endpoint:
    path: /log4j-2-configuration-using-xml/
    method: GET
- name: 'Log4J 2 Configuration: Using Properties File'
  endpoint:
    path: /log4j-2-configuration-using-properties-file/
    method: GET
- name: Hibernate Pagination – How To
  endpoint:
    path: /hibernate-pagination/
    method: GET
- name: Introducing Log4J 2 – Enterprise Class Logging
  endpoint:
    path: /introducing-log4j-enterprise-class-logging/
    method: GET
- name: Why I use IntelliJ
  endpoint:
    path: /why-i-use-intellij/
    method: GET
- name: 'Java Language #1 in January 2016'
  endpoint:
    path: /java-1-programming-language-starting-2016/
    method: GET
- name: 'Sorting ArrayLists in Java: A Practical Guide'
  endpoint:
    path: /sorting-java-arraylist/
    method: GET
- name: Getting Current Date Time in Java
  endpoint:
    path: /getting-current-date-time-in-java/
    method: GET
- name: Mocking in Unit Tests with Mockito
  endpoint:
    path: /mocking-unit-tests-mockito/
    method: GET
- name: You Should Use JAXB Generated Classes for Restful Web Services
  endpoint:
    path: /you-should-use-jaxb-generated-classes-for-restful-web-services/
    method: GET
- name: Unit Testing with JUnit – Part 4 –Parameterized and Theories
  endpoint:
    path: /unit-testing-junit-part-4-parameterized-theories/
    method: GET
- name: Unit Testing with JUnit – Part 3 – Hamcrest Matchers
  endpoint:
    path: /unit-testing-junit-part-3-hamcrest-matchers/
    method: GET
- name: Unit Testing with JUnit – Part 2
  endpoint:
    path: /unit-testing-junit-part-2/
    method: GET
- name: Spring Boot Web Application – Part 3 – Spring Data JPA
  endpoint:
    path: /spring-boot-web-application-part-3-spring-data-jpa/
    method: GET
- name: Unit Testing with JUnit – Part 1
  endpoint:
    path: /unit-testing-junit-part-1/
    method: GET
- name: Integration Testing with Spring and JUnit
  endpoint:
    path: /integration-testing-with-spring-and-junit/
    method: GET
- name: jackson
  endpoint:
    path: /jackson
    method: GET
    data_selector: records
    params: {}
- name: ObjectMapper
  endpoint:
    path: /jackson/objectmapper
    method: GET
    data_selector: objectMapper
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: time_formatting
  endpoint:
    path: /time/formatting
    method: GET
    data_selector: records
    params: {}
- name: date_formatting
  endpoint:
    path: /date/formatting
    method: GET
    data_selector: records
    params: {}
- name: datetime_formatting
  endpoint:
    path: /datetime/formatting
    method: GET
    data_selector: records
    params: {}
- name: logback_configuration
  endpoint:
    path: /logback-spring.xml
    method: GET
    data_selector: configuration
- name: log_messages
  endpoint:
    path: /json-logging/logs
    method: GET
    data_selector: logs
    params: {}
- name: JSON Logging with Spring Boot Made Easy
  endpoint:
    path: /convert-offsetdatetime-to-zoneddatetime/
    method: GET
- name: Manage Docker Containers with Docker Compose
  endpoint:
    path: /manage-docker-containers-with-docker-compose/
    method: GET
- name: Fabric8 Docker Maven Plugin
  endpoint:
    path: /fabric8-docker-maven-plugin/
    method: GET
- name: How to Use Docker Hub for Spring Boot
  endpoint:
    path: /docker-hub-for-spring-boot/
    method: GET
- name: 'Consul Miniseries: Spring Boot Application and Consul Integration Part 3'
  endpoint:
    path: /consul-miniseries-spring-boot-application-and-consul-integration-part-3/
    method: GET
- name: Run Spring Boot on Docker
  endpoint:
    path: /run-spring-boot-on-docker/
    method: GET
- name: 'Consul Miniseries: Spring Boot Application and Consul Integration Part 2'
  endpoint:
    path: /consul-miniseries-spring-boot-application-and-consul-integration-part-2/
    method: GET
- name: 'Consul Miniseries: Spring Boot Application and Consul Integration Part 1'
  endpoint:
    path: /consul-miniseries-spring-boot-application-and-consul-integration-part-1/
    method: GET
- name: Why You Should be Using Spring Boot Docker Layers
  endpoint:
    path: /why-you-should-be-using-spring-boot-docker-layers/
    method: GET
- name: Spring Bean Scopes
  endpoint:
    path: /spring-bean-scopes/
    method: GET
- name: Debug your Code in IntelliJ IDEA
  endpoint:
    path: /debug-your-code-in-intellij-idea/
    method: GET
- name: What is the best UI to Use with Spring Boot?
  endpoint:
    path: /what-is-the-best-ui-to-use-with-spring-boot/
    method: GET
- name: Should I Use Spring REST Docs or OpenAPI?
  endpoint:
    path: /should-i-use-spring-rest-docs-or-openapi/
    method: GET
- name: How to Use Lombok with Java
  endpoint:
    path: /spring-boot-with-lombok-part-1/
    method: GET
- name: Using Project Lombok with Gradle
  endpoint:
    path: /using-project-lombok-with-gradle/
    method: GET
- name: Spring Bean Lifecycle
  endpoint:
    path: /spring-bean-lifecycle/
    method: GET
- name: Spring Profiles
  endpoint:
    path: /spring-profiles/
    method: GET
- name: How To Simplify Dependency Injection with @Autowired
  endpoint:
    path: /autowiring-in-spring/
    method: GET
- name: orElse
  endpoint:
    path: /orElse
    method: GET
    data_selector: records
    params: {}
- name: orElseGet
  endpoint:
    path: /orElseGet
    method: GET
    data_selector: records
    params: {}
- name: get
  endpoint:
    path: /get
    method: GET
    data_selector: records
    params: {}
- name: orElseThrow
  endpoint:
    path: /orElseThrow
    method: GET
    data_selector: records
    params: {}
- name: filter
  endpoint:
    path: /filter
    method: GET
    data_selector: records
    params: {}
- name: map
  endpoint:
    path: /map
    method: GET
    data_selector: records
    params: {}
- name: tutorials
  endpoint:
    path: /api/tutorials
    method: GET
    data_selector: records
- name: employee
  endpoint:
    path: /employee
    method: POST
    data_selector: employee_records
    params: {}
- name: ArrayDeque
  endpoint:
    path: /ArrayDeque
    method: GET
    data_selector: records
    params: {}
- name: ConcurrentLinkedDeque
  endpoint:
    path: /ConcurrentLinkedDeque
    method: GET
    data_selector: records
    params: {}
- name: LinkedBlockingDeque
  endpoint:
    path: /LinkedBlockingDeque
    method: GET
    data_selector: records
    params: {}
- name: ConcurrentLinkedDeque
  endpoint:
    path: /ConcurrentLinkedDeque
    method: GET
    data_selector: records
- name: LinkedBlockingDeque
  endpoint:
    path: /LinkedBlockingDeque
    method: GET
    data_selector: records
- name: add_methods
  endpoint:
    path: /LinkedBlockingDeque/add_methods
    method: GET
    data_selector: methods
    params: {}
- name: remove_methods
  endpoint:
    path: /LinkedBlockingDeque/remove_methods
    method: GET
    data_selector: methods
    params: {}
- name: iterator_method
  endpoint:
    path: /LinkedBlockingDeque/iterator_method
    method: GET
    data_selector: methods
    params: {}
- name: EnumSetExample
  endpoint:
    path: /EnumSetExample
    method: GET
    data_selector: records
- name: dependency
  endpoint:
    path: /dependency
    method: POST
    data_selector: dependencies
    params: {}
- name: test_csv
  endpoint:
    path: /test/csv
    method: GET
    data_selector: records
    params: {}
- name: isPlindromeString
  endpoint:
    path: /test/methodSource
    method: GET
    data_selector: records
    params: {}
- name: payment_instruction
  endpoint:
    path: /payments
    method: POST
    data_selector: response
    params: {}
- name: payment_result
  endpoint:
    path: /payments/result
    method: GET
    data_selector: result
    params: {}
- name: SendPayment
  endpoint:
    path: /send/payment
    method: POST
    data_selector: payload
- name: Payment
  endpoint:
    path: /api/payment
    method: POST
    data_selector: paymentRecords
- name: AchTransferObject
  endpoint:
    path: /api/achTransfer
    method: POST
    data_selector: transferRecords
- name: Payment
  endpoint:
    path: /payments
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Student
  endpoint:
    path: /Student
    method: GET
    data_selector: records
- name: Product
  endpoint:
    path: /api/v1/product
    method: GET
    data_selector: products
- name: product
  endpoint:
    path: /api/v1/product
    method: POST
    data_selector: Product
    params: {}
- name: products
  endpoint:
    path: /api/v1/products
    method: GET
    data_selector: List<Product>
    params: {}
- name: product_by_id
  endpoint:
    path: /api/v1/product/{id}
    method: GET
    data_selector: Product
    params: {}
- name: delete_product
  endpoint:
    path: /api/v1/product/{id}
    method: DELETE
    data_selector: Product
    params: {}
- name: product
  endpoint:
    path: /api/v1/product/1
    method: GET
    data_selector: JsonString
- name: product_delete
  endpoint:
    path: /api/v1/product/1
    method: DELETE
    data_selector: JsonString
- name: Product
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Java ArrayList vs LinkedList
  endpoint:
    path: /java-arraylist-vs-linkedlist/
    method: GET
- name: Java Timer
  endpoint:
    path: /java-timer/
    method: GET
- name: Java HashMap vs Hashtable
  endpoint:
    path: /java-hashmap-vs-hashtable/
    method: GET
- name: How To Sort Java Collections
  endpoint:
    path: /sorting-java-collections/
    method: GET
- name: How to Iterate Over Collections In Java
  endpoint:
    path: /iterating-over-collections-in-java/
    method: GET
- name: How to Tell if A String A Palindrome in Java
  endpoint:
    path: /is-string-a-palindrome/
    method: GET
- name: How to Use SDKMAN for Managing Java Versions
  endpoint:
    path: /using-sdkman-to-manage-java-versions/
    method: GET
- name: Installing Maven
  endpoint:
    path: /installing-maven/
    method: GET
- name: Merge Sort in Java
  endpoint:
    path: /merge-sort-in-java/
    method: GET
- name: Why Your JUnit 5 Tests Are Not Running Under Maven
  endpoint:
    path: /why-your-junit-5-tests-are-not-running-under-maven/
    method: GET
- name: Converting between Java List and Array
  endpoint:
    path: /converting-between-java-list-and-array/
    method: GET
- name: Using Java Enums
  endpoint:
    path: /using-java-enums/
    method: GET
- name: Converting Java Map to List
  endpoint:
    path: /converting-java-map-to-list/
    method: GET
- name: Java String to Int
  endpoint:
    path: /java-string-to-int/
    method: GET
- name: How to Use JAXB for XML Processing with Java
  endpoint:
    path: /using-jaxb-for-xml-with-java/
    method: GET
- name: Java 8 forEach
  endpoint:
    path: /java-8-foreach/
    method: GET
- name: Using the Jackson Mix-in Annotation
  endpoint:
    path: /jackson-mix-in-annotation/
    method: GET
- name: Enable Pretty Print of JSON with Jackson
  endpoint:
    path: /enable-pretty-print-of-json-with-jackson/
    method: GET
- name: Random Number Generation in Java
  endpoint:
    path: /random-number-generation-in-java/
    method: GET
- name: 'Mastering Jackson Annotations: A Guide to Simplified JSON Mapping for Java'
  endpoint:
    path: /jackson-annotations-json/
    method: GET
- name: Google GSON for JSON Processing
  endpoint:
    path: /google-gson-for-json-processing/
    method: GET
- name: 'Mockito Mock vs Spy: Key Differences and Best Practices'
  endpoint:
    path: /mockito-mock-vs-spy-in-spring-boot-tests/
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: merchant_account
  endpoint:
    path: /merchantaccount
    method: GET
    data_selector: records
    params: {}
- name: merchantaccount
  endpoint:
    path: merchantaccount
    method: GET
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /data/{dataId}
    method: GET
    data_selector: SimpleClientData
- name: manual_data
  endpoint:
    path: /data/manual/{id}
    method: GET
    data_selector: SimpleClientData
    params: {}
- name: installation
  endpoint:
    path: /clone
    method: GET
    data_selector: commands
    params: {}
- name: configuration
  endpoint:
    path: /configure
    method: GET
    data_selector: commands
    params: {}
- name: users-service
  endpoint:
    path: /users-service
    method: GET
    data_selector: records
    params: {}
- name: hello-service
  endpoint:
    path: /hello-service
    method: GET
    data_selector: records
    params: {}
- name: users-service
  endpoint:
    path: /actuator/health
    method: GET
- name: API Gateway
  endpoint:
    path: /api/gateway
    method: GET
    data_selector: records
    params: {}
- name: hello-service
  endpoint:
    path: /hello
    method: GET
- name: users-service
  endpoint:
    path: /user
    method: GET
- name: user
  endpoint:
    path: /user
    method: GET
- name: hello
  endpoint:
    path: /hello
    method: GET
- name: advanced_breakpoint
  endpoint:
    path: /advanced/breakpoint
    method: GET
- name: throwing_exception
  endpoint:
    path: /throw/exception
    method: GET
- name: changing_variable_value
  endpoint:
    path: /change/variable/value
    method: GET
- name: reloading_modified_classes
  endpoint:
    path: /reload/classes
    method: GET
- name: Spring Boot Microservices
  endpoint:
    path: /using-circleci-to-build-spring-boot-microservices/
    method: GET
- name: Spring Annotations
  endpoint:
    path: /spring-framework-annotations/
    method: GET
- name: JdbcTemplate with Spring Boot and Thymeleaf
  endpoint:
    path: /using-jdbctemplate-with-spring-boot-and-thymeleaf/
    method: GET
- name: RequestMapping Annotation
  endpoint:
    path: /spring-requestmapping-annotation/
    method: GET
- name: Spring Data MongoDB with Reactive MongoDB
  endpoint:
    path: /spring-data-mongodb-with-reactive-mongodb/
    method: GET
- name: Spring Boot with Embedded MongoDB
  endpoint:
    path: /spring-boot-with-embedded-mongodb/
    method: GET
- name: Spring Web Reactive
  endpoint:
    path: /spring-web-reactive/
    method: GET
- name: Reactive Streams in Java
  endpoint:
    path: /reactive-streams-in-java/
    method: GET
- name: What’s new in Spring Framework 5?
  endpoint:
    path: /what-is-new-with-spring-framework-5/
    method: GET
- name: Spring Boot RESTful API Documentation with Swagger 2
  endpoint:
    path: /spring-boot-restful-api-documentation-with-swagger-2/
    method: GET
- name: Mockito Mock vs Spy
  endpoint:
    path: /mockito-mock-vs-spy-in-spring-boot-tests/
    method: GET
- name: Spring Boot Mongo DB Example Application
  endpoint:
    path: /3402-2/
    method: GET
- name: Configuring Spring Boot for MariaDB
  endpoint:
    path: /configuring-spring-boot-for-mariadb/
    method: GET
- name: Spring Boot Web Application Security
  endpoint:
    path: /spring-boot-web-application-part-6-spring-security-with-dao-authentication-provider/
    method: GET
- name: Configuring Spring Boot for MongoDB
  endpoint:
    path: /configuring-spring-boot-for-mongo/
    method: GET
- name: Spring Boot Web Application Security Part 5
  endpoint:
    path: /spring-boot-web-application-part-5-spring-security/
    method: GET
- name: Chuck Norris for Spring Boot Actuator
  endpoint:
    path: /chuck-norris-for-spring-boot-actuator/
    method: GET
- name: Testing Spring MVC
  endpoint:
    path: /unit-testing-spring-mvc-spring-boot-1-4-part-1/
    method: GET
- name: Running Spring Boot in A Docker Container
  endpoint:
    path: /running-spring-boot-in-a-docker-container/
    method: GET
- name: lombok_dependency_maven
  endpoint:
    path: /dependency/maven
    method: GET
    data_selector: dependency
    params: {}
- name: lombok_dependency_gradle
  endpoint:
    path: /dependency/gradle
    method: GET
    data_selector: dependency
    params: {}
- name: Using Lombok with Java
  endpoint:
    path: /using-lombok-with-java
    method: GET
    data_selector: records
- name: Using Project Lombok with Gradle
  endpoint:
    path: /using-project-lombok-with-gradle
    method: GET
    data_selector: records
- name: Job
  endpoint:
    path: /jobs
    method: GET
    data_selector: records
- name: Person
  endpoint:
    path: /persons
    method: GET
    data_selector: records
- name: Department
  endpoint:
    path: /department
    method: GET
    data_selector: records
- name: Employee
  endpoint:
    path: /employee
    method: GET
    data_selector: records
- name: Autowired Example
  endpoint:
    path: /autowire/example
    method: GET
    data_selector: details
    params: {}
- name: One-to-Many Mappings
  endpoint:
    path: /jpa-one-to-many-mapping/
    method: GET
    data_selector: data
    params: {}
- name: JWT Token Authentication
  endpoint:
    path: /jwt-authentication-in-spring-microservices-jwt-token/
    method: GET
    data_selector: data
    params: {}
- name: Hikari Configuration for MySQL
  endpoint:
    path: /hikari-configuration-for-mysql-in-spring-boot-2/
    method: GET
    data_selector: data
    params: {}
- name: parser
  endpoint:
    path: /service/parse
    method: GET
    data_selector: parsers
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: employees
  endpoint:
    path: /employees
    method: GET
    data_selector: employees
    params: {}
- name: employees
  endpoint:
    path: /employees
    method: GET
    data_selector: records
    params: {}
- name: spring_jdbc_operations
  endpoint:
    path: /spring/jdbc/operations
    method: GET
    data_selector: operations
    params: {}
- name: ArrayList
  endpoint:
    path: /java/arraylist
    method: GET
    data_selector: records
    params: {}
- name: LinkedList
  endpoint:
    path: /java/linkedlist
    method: GET
    data_selector: records
    params: {}
- name: arrayListAdd
  endpoint:
    path: /performance/arrayListAdd
    method: GET
    data_selector: records
    params: {}
- name: linkedListAdd
  endpoint:
    path: /performance/linkedListAdd
    method: GET
    data_selector: records
    params: {}
- name: arrayListRemove
  endpoint:
    path: /performance/arrayListRemove
    method: GET
    data_selector: records
    params: {}
- name: linkedListRemove
  endpoint:
    path: /performance/linkedListRemove
    method: GET
    data_selector: records
    params: {}
- name: arrayListGet
  endpoint:
    path: /performance/arrayListGet
    method: GET
    data_selector: records
    params: {}
- name: linkedListGet
  endpoint:
    path: /performance/linkedListGet
    method: GET
    data_selector: records
    params: {}
- name: arrayListContains
  endpoint:
    path: /performance/arrayListContains
    method: GET
    data_selector: records
    params: {}
- name: linkedListContains
  endpoint:
    path: /performance/linkedListContains
    method: GET
    data_selector: records
    params: {}
- name: MyTask
  endpoint:
    path: /tasks/Mytask
    method: GET
    data_selector: records
- name: Collections.sort
  endpoint:
    path: /java/util/Collections/sort
    method: GET
    data_selector: usage_examples
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: maven-surefire-plugin
  endpoint:
    path: /org/apache/maven/plugins/maven-surefire-plugin
    method: GET
    data_selector: records
- name: maven-failsafe-plugin
  endpoint:
    path: /org/apache/maven/plugins/maven-failsafe-plugin
    method: GET
    data_selector: records
- name: ListToArrayConvertor
  endpoint:
    path: /converting/list/to/array
    method: GET
    data_selector: records
    params: {}
- name: JUnit Test for ListToArrayConvertor
  endpoint:
    path: /testing/list/to/array
    method: GET
    data_selector: records
    params: {}
- name: Days Enum
  endpoint:
    path: /springframework/guru/enumexample/Days
    method: GET
    data_selector: enum_values
    params: {}
- name: EnumInIfStatement
  endpoint:
    path: /springframework/guru/enumexample/EnumInIfStatement
    method: GET
    data_selector: enum_values
    params: {}
- name: MapToListConverter
  endpoint:
    path: /converting-java-map-to-list
    method: GET
    data_selector: records
    params: {}
- name: convertMapKeysToListWithStream
  endpoint:
    path: /convert/map/keys/to/list/stream
    method: GET
    data_selector: keys
    params: {}
- name: convertMapValuesToListWithStream
  endpoint:
    path: /convert/map/values/to/list/stream
    method: GET
    data_selector: values
    params: {}
- name: StringToIntConverter
  endpoint:
    path: /convert/StringToInt
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Product
  endpoint:
    path: /product
    method: POST
    data_selector: product
    params: {}
- name: User
  endpoint:
    path: /user
    method: POST
    data_selector: user
    params: {}
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: ListIteration
  endpoint:
    path: /list/iteration
    method: GET
    data_selector: records
- name: MapIteration
  endpoint:
    path: /map/iteration
    method: GET
    data_selector: records
- name: StreamIteration
  endpoint:
    path: /stream/iteration
    method: GET
    data_selector: records
- name: ParallelStreamIteration
  endpoint:
    path: /parallel/stream/iteration
    method: GET
    data_selector: records
- name: logback_configuration
  endpoint:
    path: /logback/configuration
    method: GET
    data_selector: records
- name: Product
  endpoint:
    path: /gson/product
    method: GET
    data_selector: products
    params: {}
- name: Product
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Dockerfile
  endpoint:
    path: /src/main/docker/Dockerfile
    method: CREATE
    data_selector: image configuration
    params: {}
- name: springframeworkguru/masteringthymeleaf
  endpoint:
    path: /Dockerfile
    method: GET
    data_selector: records
- name: docker_image
  endpoint:
    path: /docker-build.tar
    method: GET
    data_selector: docker
    params: {}
- name: spring_boot_application
  endpoint:
    path: /maven/sfg-thymeleaf-course-0.0.1-SNAPSHOT.jar
    method: ADD
    data_selector: ''
    params: {}
- name: springframeworkguru/masteringthymeleaf
  endpoint:
    path: dockerHost
    method: GET
    data_selector: images
    params: {}
- name: sfg-thymeleaf-course
  endpoint:
    path: /maven/sfg-thymeleaf-course-0.0.1-SNAPSHOT.jar
    method: ADD
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Spring Boot Dockerfile
  endpoint:
    path: /maven/sfg-thymeleaf-course-0.0.1-SNAPSHOT.jar
    method: ADD
    data_selector: sfg-thymeleaf-course.jar
- name: springframeworkguru/masteringthymeleaf
  endpoint:
    path: Dockerfile
    method: GET
    data_selector: image
    params: {}
- name: spring_thymeleaf_course
  endpoint:
    path: /maven/sfg-thymeleaf-course-0.0.1-SNAPSHOT.jar
    method: ADD
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: web_application
  endpoint:
    path: /spring-boot-web-application-part-1-spring-initializr/
    method: GET
    data_selector: records
    params: {}
- name: employee
  endpoint:
    path: /employee.json
    method: GET
    data_selector: rootNode
    params: {}
- name: jackson-databind
  endpoint:
    path: com.fasterxml.jackson.core/jackson-databind
    method: compile
- name: jackson-core
  endpoint:
    path: com.fasterxml.jackson.core/jackson-core
    method: compile
- name: jackson-annotations
  endpoint:
    path: com.fasterxml.jackson.core/jackson-annotations
    method: compile
- name: dependency
  endpoint:
    path: /dependency
    method: GET
    data_selector: dependencies
    params:
      groupId: com.fasterxml.jackson.core
      artifactId: jackson-databind
      version: 2.7.4
- name: jackson-databind
  endpoint:
    path: /dependency/com.fasterxml.jackson.core/jackson-databind
    method: GET
    data_selector: dependency
    params: {}
- name: jackson-core
  endpoint:
    path: /dependency/com.fasterxml.jackson.core/jackson-core
    method: GET
    data_selector: dependency
    params: {}
- name: jackson-annotations
  endpoint:
    path: /dependency/com.fasterxml.jackson.core/jackson-annotations
    method: GET
    data_selector: dependency
    params: {}
- name: service_locator_pattern
  endpoint:
    path: /service-locator-pattern-in-spring
    method: GET
    data_selector: content
    params: {}
- name: graphql_in_spring_boot
  endpoint:
    path: /using-graphql-in-a-spring-boot-application
    method: GET
    data_selector: content
    params: {}
- name: spring_jdbctemplate_crud
  endpoint:
    path: /spring-jdbctemplate-crud-operations
    method: GET
    data_selector: content
    params: {}
- name: java_arraylist_vs_linkedlist
  endpoint:
    path: /java-arraylist-vs-linkedlist
    method: GET
    data_selector: content
    params: {}
- name: java_timer
  endpoint:
    path: /java-timer
    method: GET
    data_selector: content
    params: {}
- name: java_hashmap_vs_hashtable
  endpoint:
    path: /java-hashmap-vs-hashtable
    method: GET
    data_selector: content
    params: {}
- name: how_to_sort_java_collections
  endpoint:
    path: /sorting-java-collections
    method: GET
    data_selector: content
    params: {}
- name: how_to_iterate_over_collections_in_java
  endpoint:
    path: /iterating-over-collections-in-java
    method: GET
    data_selector: content
    params: {}
- name: is_string_a_palindrome
  endpoint:
    path: /is-string-a-palindrome
    method: GET
    data_selector: content
    params: {}
- name: using_sdkman_for_managing_java_versions
  endpoint:
    path: /using-sdkman-to-manage-java-versions
    method: GET
    data_selector: content
    params: {}
- name: installing_maven
  endpoint:
    path: /installing-maven
    method: GET
    data_selector: content
    params: {}
- name: merge_sort_in_java
  endpoint:
    path: /merge-sort-in-java
    method: GET
    data_selector: content
    params: {}
- name: why_your_junit_5_tests_are_not_running_under_maven
  endpoint:
    path: /why-your-junit-5-tests-are-not-running-under-maven
    method: GET
    data_selector: content
    params: {}
- name: spring_5_webclient
  endpoint:
    path: /spring-5-webclient
    method: GET
    data_selector: content
    params: {}
- name: converting_between_java_list_and_array
  endpoint:
    path: /converting-between-java-list-and-array
    method: GET
    data_selector: content
    params: {}
- name: using_java_enums
  endpoint:
    path: /using-java-enums
    method: GET
    data_selector: content
    params: {}
- name: converting_java_map_to_list
  endpoint:
    path: /converting-java-map-to-list
    method: GET
    data_selector: content
    params: {}
- name: java_string_to_int
  endpoint:
    path: /java-string-to-int
    method: GET
    data_selector: content
    params: {}
- name: using_jaxb_for_xml_processing_with_java
  endpoint:
    path: /using-jaxb-for-xml-with-java
    method: GET
    data_selector: content
    params: {}
- name: java_8_foreach
  endpoint:
    path: /java-8-foreach
    method: GET
    data_selector: content
    params: {}
- name: jackson_mix_in_annotation
  endpoint:
    path: /jackson-mix-in-annotation
    method: GET
    data_selector: content
    params: {}
- name: spring_component_scan
  endpoint:
    path: /spring-component-scan
    method: GET
    data_selector: content
    params: {}
- name: enable_pretty_print_of_json_with_jackson
  endpoint:
    path: /enable-pretty-print-of-json-with-jackson
    method: GET
    data_selector: content
    params: {}
- name: dev
  endpoint:
    path: application-dev.yml
    method: GET
    data_selector: null
    params: {}
- name: production
  endpoint:
    path: application-production.yml
    method: GET
    data_selector: null
    params: {}
- name: default
  endpoint:
    path: application-default.yml
    method: GET
    data_selector: null
    params: {}
- name: IndexController
  endpoint:
    path: /
    method: GET
    data_selector: message
    params: {}
- name: LombokController
  endpoint:
    path: /lombok
    method: GET
    data_selector: message
    params: {}
- name: log4j2-spring
  endpoint:
    path: /path/to/log4j2-spring.xml
    method: GET
    data_selector: configuration
- name: log4j2
  endpoint:
    path: /path/to/log4j2.xml
    method: GET
    data_selector: configuration
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: testing_spring_boot_restful_services
  endpoint:
    path: /testing/spring/boot/restful/services
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Logback Configuration
  endpoint:
    path: /logback.groovy
    method: GET
    data_selector: configuration
    params: {}
- name: RollingFile-Appender
  endpoint:
    path: /appender/RollingFile-Appender
    method: GET
    data_selector: appender
    params: {}
- name: Async-Appender
  endpoint:
    path: /appender/Async-Appender
    method: GET
    data_selector: appender
    params: {}
- name: Console-Appender
  endpoint:
    path: /appender/Console-Appender
    method: GET
    data_selector: layout
    params: {}
- name: File-Appender
  endpoint:
    path: /appender/File-Appender
    method: GET
    data_selector: encoder
    params: {}
- name: RollingFile-Appender
  endpoint:
    path: /appender/RollingFile-Appender
    method: GET
    data_selector: rollingPolicy
    params: {}
- name: Async-Appender
  endpoint:
    path: /appender/Async-Appender
    method: GET
    data_selector: appender-ref
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: LogbackDemo
  endpoint:
    path: /logbackDemo
    method: GET
    data_selector: records
    params: {}
- name: LogbackDemoTest
  endpoint:
    path: /logbackDemoTest
    method: GET
    data_selector: records
    params: {}
- name: application_properties
  endpoint:
    path: /application.properties
    method: GET
    data_selector: properties
    params: {}
- name: Console-Appender
  endpoint:
    path: SYSTEM_OUT
    method: GET
    data_selector: AppenderRef
    params: {}
- name: App-File-Appender
  endpoint:
    path: ${log-path}/app_log.log
    method: GET
    data_selector: AppenderRef
    params: {}
- name: SpringBoot-File-Appender
  endpoint:
    path: ${log-path}/springboot_log.log
    method: GET
    data_selector: AppenderRef
    params: {}
- name: log4j-api
  endpoint:
    path: /log4j-api
    method: GET
    data_selector: dependencies
    params: {}
- name: log4j-core
  endpoint:
    path: /log4j-core
    method: GET
    data_selector: dependencies
    params: {}
- name: disruptor
  endpoint:
    path: /disruptor
    method: GET
    data_selector: dependencies
    params: {}
- name: Asynchronous Logging
  endpoint:
    path: /guru/springframework/blog/log4j2async
    method: GET
    data_selector: configuration
    params: {}
- name: dependencies
  endpoint:
    path: /log4j2/dependencies
    method: GET
    data_selector: dependencies
    params: {}
- name: RollingFile_Appender
  endpoint:
    path: log-path/rollingfile.log
    method: GET
    data_selector: logs/archive/rollingfile.log.%d{yyyy-MM-dd-hh-mm}.gz
    params: {}
- name: File_Appender
  endpoint:
    path: log-path/logfile.log
    method: GET
    data_selector: '[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n'
    params: {}
- name: Console_Appender
  endpoint:
    path: SYSTEM_OUT
    method: GET
    data_selector: '[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n'
    params: {}
- name: Maven Dependencies
  endpoint:
    path: /log4j2/dependencies
    method: GET
    data_selector: dependencies
- name: logger_configuration
  endpoint:
    path: /log4j2.xml
    method: GET
    data_selector: configuration
- name: Console-Appender
  endpoint:
    path: /appenders/console
    method: GET
    data_selector: ''
    params: {}
- name: File-Appender
  endpoint:
    path: /appenders/file
    method: GET
    data_selector: ''
    params:
      filename: ${log-path}/xmlfilelog.log
- name: RollingFile-Appender
  endpoint:
    path: /appenders/rollingfile
    method: GET
    data_selector: ''
    params:
      filename: ${log-path}/rollingfile.log
      filePattern: ${archive}/rollingfile.log.%d{yyyy-MM-dd-hh-mm}.gz
- name: log4j-api
  endpoint:
    path: /org/apache/logging/log4j/log4j-api/2.5
    method: GET
- name: log4j-core
  endpoint:
    path: /org/apache/logging/log4j/log4j-core/2.5
    method: GET
- name: log4j2.properties
  endpoint:
    path: /log4j2.properties
    method: GET
    data_selector: properties
    params: {}
- name: logger_file1
  endpoint:
    path: logger.file1.name
    method: SET
    data_selector: guru.springframework.blog.log4j2properties
    params:
      level: debug
      appenderRefs: file
      appenderRef.file.ref: LOGFILE
- name: logger_file2
  endpoint:
    path: logger.file2.name
    method: SET
    data_selector: guru.springframework.blog.example
    params:
      level: error
      appenderRefs: file
      appenderRef.file.ref: LOGFILE
- name: appender_file
  endpoint:
    path: appender.file.fileName
    method: SET
    data_selector: ${sys:logfile.name}
    params: {}
- name: Product
  endpoint:
    path: /Product
    method: GET
    data_selector: records
    params:
      firstResult: 0
      maxResults: 10
- name: Product
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: MyApp
  endpoint:
    path: /guru/springframework/blog/log4joverview/MyApp
    method: GET
    data_selector: messages
    params: {}
- name: MyAppTest
  endpoint:
    path: /guru/springframework/blog/log4joverview/MyAppTest
    method: GET
    data_selector: test_results
    params: {}
- name: current_time_date_calendar
  endpoint:
    path: /current_time_date_calendar
    method: GET
    data_selector: current_time
    params: {}
- name: current_time_with_timezone
  endpoint:
    path: /current_time_with_timezone
    method: GET
    data_selector: formattedTime
    params: {}
- name: current_time_with_offset
  endpoint:
    path: /current_time_with_offset
    method: GET
    data_selector: formattedTime
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Product
  endpoint:
    path: /guru/springframework/unittest/mockito/Product
    method: GET
    data_selector: records
- name: ProductDao
  endpoint:
    path: /guru/springframework/unittest/mockito/ProductDao
    method: GET
    data_selector: records
- name: ProductService
  endpoint:
    path: /guru/springframework/unittest/mockito/ProductService
    method: GET
    data_selector: records
- name: InsufficientProductsException
  endpoint:
    path: /guru/springframework/unittest/mockito/InsufficientProductsException
    method: GET
    data_selector: records
- name: MockCreationTest
  endpoint:
    path: /mock/creation/test
    method: GET
    data_selector: records
- name: ProductServiceTest
  endpoint:
    path: /product/service/test
    method: GET
    data_selector: records
- name: Product
  endpoint:
    path: /main/resources/jaxb.xsd
    method: GET
    data_selector: records
- name: Product
  endpoint:
    path: /Product
    method: GET
    data_selector: records
    params: {}
- name: CreateProductRequest
  endpoint:
    path: /CreateProductRequest
    method: POST
    data_selector: records
    params: {}
- name: EmailIdUtility
  endpoint:
    path: /guru/springframework/unittest/parameterized/EmailIdUtility
    method: GET
    data_selector: records
    params: {}
- name: EmailIdValidatorTest
  endpoint:
    path: /guru/springframework/unittest/parameterized/EmailIdValidatorTest
    method: GET
    data_selector: records
    params: {}
- name: EmailIDCreatorTest
  endpoint:
    path: /guru/springframework/unittest/parameterized/EmailIDCreatorTest
    method: GET
    data_selector: tests
    params: {}
- name: MatchersDemo
  endpoint:
    path: /unit-testing-junit-part-3-hamcrest-matchers/
    method: GET
    data_selector: records
    params: {}
- name: EmployeeEmail
  endpoint:
    path: /EmployeeEmail
    method: GET
    data_selector: records
    params: {}
- name: EmployeeEmailTest
  endpoint:
    path: /EmployeeEmailTest
    method: GET
    data_selector: records
    params: {}
- name: product
  endpoint:
    path: /console
    method: GET
    data_selector: records
    params: {}
- name: Product
  endpoint:
    path: /product
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Product
  endpoint:
    path: /api/v1/products
    method: GET
    data_selector: products
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: App
  endpoint:
    path: /App
    method: GET
    data_selector: code
- name: AppTest
  endpoint:
    path: /AppTest
    method: GET
    data_selector: code
- name: ProductServiceTestConfig
  endpoint:
    path: /guru/springframework/test/config/ProductServiceTestConfig
    method: GET
    data_selector: records
    params: {}
- name: ProductServiceImplIT
  endpoint:
    path: /guru/springframework/services/ProductServiceImplIT
    method: GET
    data_selector: records
    params: {}
- name: 'Java Language #1 in January 2016'
  endpoint:
    path: /java-1-programming-language-starting-2016/
    method: GET
    data_selector: posts
    params: {}
- name: Sorting ArrayLists in Java
  endpoint:
    path: /sorting-java-arraylist/
    method: GET
    data_selector: posts
    params: {}
- name: Getting Current Date Time in Java
  endpoint:
    path: /getting-current-date-time-in-java/
    method: GET
    data_selector: posts
    params: {}
- name: Mocking in Unit Tests with Mockito
  endpoint:
    path: /mocking-unit-tests-mockito/
    method: GET
    data_selector: posts
    params: {}
- name: You Should Use JAXB Generated Classes for Restful Web Services
  endpoint:
    path: /you-should-use-jaxb-generated-classes-for-restful-web-services/
    method: GET
    data_selector: posts
    params: {}
- name: Unit Testing with JUnit – Part 4 –Parameterized and Theories
  endpoint:
    path: /unit-testing-junit-part-4-parameterized-theories/
    method: GET
    data_selector: posts
    params: {}
- name: Unit Testing with JUnit – Part 3 – Hamcrest Matchers
  endpoint:
    path: /unit-testing-junit-part-3-hamcrest-matchers/
    method: GET
    data_selector: posts
    params: {}
- name: Unit Testing with JUnit – Part 2
  endpoint:
    path: /unit-testing-junit-part-2/
    method: GET
    data_selector: posts
    params: {}
- name: Unit Testing with JUnit – Part 1
  endpoint:
    path: /unit-testing-junit-part-1/
    method: GET
    data_selector: posts
    params: {}
- name: Integration Testing with Spring and JUnit
  endpoint:
    path: /integration-testing-with-spring-and-junit/
    method: GET
    data_selector: posts
    params: {}
- name: Testing Software
  endpoint:
    path: /testing-software/
    method: GET
    data_selector: posts
    params: {}
- name: Polymorphism in Java
  endpoint:
    path: /polymorphism-java/
    method: GET
    data_selector: posts
    params: {}
- name: Introduction to Java Variables
  endpoint:
    path: /introduction-to-java-variables/
    method: GET
    data_selector: posts
    params: {}
- name: Hello World With Spring 4
  endpoint:
    path: /hello-world-with-spring-4/
    method: GET
    data_selector: posts
    params: {}
- name: Getting Started With Spring Boot
  endpoint:
    path: /getting-started-with-spring-boot/
    method: GET
    data_selector: posts
    params: {}
- name: getCapital
  endpoint:
    path: /capital
    method: POST
    data_selector: output
- name: getCapitalWithInfo
  endpoint:
    path: /capitalWithInfo
    method: POST
    data_selector: output
- name: ask_question
  endpoint:
    path: /ask
    method: POST
    data_selector: Answer
- name: capital
  endpoint:
    path: /capital
    method: POST
    data_selector: response
    params: {}
- name: registerUserCredential
  endpoint:
    path: /api/v1/users
    method: POST
    data_selector: User
    params: {}
- name: registerUserCredentialThroughMap
  endpoint:
    path: /api/v1/map/users
    method: POST
    data_selector: Map
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Blog
  endpoint:
    path: api/v1/blogs
    method: GET
    data_selector: ''
    params: {}
- name: Blog
  endpoint:
    path: api/v1/blog
    method: POST
    data_selector: ''
    params: {}
- name: '@AssertFalse'
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: '@AssertTrue'
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: '@Max'
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: '@Min'
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: '@Future'
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: '@Past'
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: '@DecimalMax'
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: '@DecimalMin'
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: JdbcTemplate
  endpoint:
    path: /spring/jdbc/template
    method: GET
    data_selector: records
    params: {}
- name: blog
  endpoint:
    path: /api/blog
    method: POST
    data_selector: records
    params: {}
- name: blog
  endpoint:
    path: /api/v1/blog
    method: POST
    data_selector: savedBlog
    params: {}
- name: blogs
  endpoint:
    path: /api/v1/blogs
    method: GET
    data_selector: List
    params: {}
- name: blog_by_id
  endpoint:
    path: /api/v1/blog/{id}
    method: GET
    data_selector: blog
    params: {}
- name: beer
  endpoint:
    path: /api/v1/beer/{beerId}
    method: GET
    data_selector: responses
    params: {}
- name: DemoBeanA
  endpoint:
    path: /guru/springframework/blog/componentscan/example/demopackageA/DemoBeanA
    method: GET
    data_selector: records
- name: DemoBeanB2
  endpoint:
    path: /guru/springframework/blog/componentscan/example/demopackageB/DemoBeanB2
    method: GET
    data_selector: records
- name: DemoBeanC
  endpoint:
    path: /guru/springframework/blog/componentscan/example/demopackageC/DemoBeanC
    method: GET
    data_selector: records
- name: DemoBeanD
  endpoint:
    path: /guru/springframework/blog/componentscan/example/demopackageD/DemoBeanD
    method: GET
    data_selector: records
- name: ScheduledAnnotation
  endpoint:
    path: /@Scheduled
    method: GET
    data_selector: annotations
    params: {}
- name: EnableAsyncAnnotation
  endpoint:
    path: /@EnableAsync
    method: GET
    data_selector: annotations
    params: {}
- name: AsyncAnnotation
  endpoint:
    path: /@Async
    method: GET
    data_selector: annotations
    params: {}
- name: BootstrapWithAnnotation
  endpoint:
    path: /@BootstrapWith
    method: GET
    data_selector: annotations
    params: {}
- name: ContextConfigurationAnnotation
  endpoint:
    path: /@ContextConfiguration
    method: GET
    data_selector: annotations
    params: {}
- name: WebAppConfigurationAnnotation
  endpoint:
    path: /@WebAppConfiguration
    method: GET
    data_selector: annotations
    params: {}
- name: TimedAnnotation
  endpoint:
    path: /@Timed
    method: GET
    data_selector: annotations
    params: {}
- name: RepeatAnnotation
  endpoint:
    path: /@Repeat
    method: GET
    data_selector: annotations
    params: {}
- name: CommitAnnotation
  endpoint:
    path: /@Commit
    method: GET
    data_selector: annotations
    params: {}
- name: RollbackAnnotation
  endpoint:
    path: /@RollBack
    method: GET
    data_selector: annotations
    params: {}
- name: DirtiesContextAnnotation
  endpoint:
    path: /@DirtiesContext
    method: GET
    data_selector: annotations
    params: {}
- name: BeforeTransactionAnnotation
  endpoint:
    path: /@BeforeTransaction
    method: GET
    data_selector: annotations
    params: {}
- name: AfterTransactionAnnotation
  endpoint:
    path: /@AfterTransaction
    method: GET
    data_selector: annotations
    params: {}
- name: SqlAnnotation
  endpoint:
    path: /@Sql
    method: GET
    data_selector: annotations
    params: {}
- name: SqlConfigAnnotation
  endpoint:
    path: /@SqlConfig
    method: GET
    data_selector: annotations
    params: {}
- name: SqlGroupAnnotation
  endpoint:
    path: /@SqlGroup
    method: GET
    data_selector: annotations
    params: {}
- name: SpringBootTestAnnotation
  endpoint:
    path: /@SpringBootTest
    method: GET
    data_selector: annotations
    params: {}
- name: DataJpaTestAnnotation
  endpoint:
    path: /@DataJpaTest
    method: GET
    data_selector: annotations
    params: {}
- name: DataMongoTestAnnotation
  endpoint:
    path: /@DataMongoTest
    method: GET
    data_selector: annotations
    params: {}
- name: WebMVCTestAnnotation
  endpoint:
    path: /@WebMVCTest
    method: GET
    data_selector: annotations
    params: {}
- name: AutoConfigureMockMVCAnnotation
  endpoint:
    path: /@AutoConfigureMockMVC
    method: GET
    data_selector: annotations
    params: {}
- name: MockBeanAnnotation
  endpoint:
    path: /@MockBean
    method: GET
    data_selector: annotations
    params: {}
- name: JsonTestAnnotation
  endpoint:
    path: /@JsonTest
    method: GET
    data_selector: annotations
    params: {}
- name: TestPropertySourceAnnotation
  endpoint:
    path: /@TestPropertySource
    method: GET
    data_selector: annotations
    params: {}
- name: home
  endpoint:
    path: /home
    method: GET
    data_selector: null
    params: {}
- name: home_index
  endpoint:
    path: /home/index
    method: GET
    data_selector: null
    params: {}
- name: home_id
  endpoint:
    path: /home/id
    method: GET
    data_selector: null
    params: {}
- name: home_personId
  endpoint:
    path: /home/personId
    method: GET
    data_selector: null
    params: {}
- name: home_name
  endpoint:
    path: /home/name
    method: GET
    data_selector: null
    params: {}
- name: home_prod
  endpoint:
    path: /home/prod
    method: GET
    data_selector: null
    params: {}
- name: home_cons
  endpoint:
    path: /home/cons
    method: GET
    data_selector: null
    params: {}
- name: head
  endpoint:
    path: /home/head
    method: GET
    data_selector: Mapping applied along with headers
    params:
      content-type: text/plain
- name: fetch
  endpoint:
    path: /home/fetch
    method: GET
    data_selector: Fetched parameter using params attribute
    params:
      personId: '10'
- name: fetch
  endpoint:
    path: /home/fetch
    method: GET
    data_selector: Fetched parameter using params attribute
    params:
      personId: '20'
- name: dynamicUriValue
  endpoint:
    path: /home/fetch/{id}
    method: GET
- name: dynamicUriValueRegex
  endpoint:
    path: /home/fetch/{id:[a-z]+}/{name}
    method: GET
- name: default
  endpoint:
    path: /home
    method: GET
- name: person
  endpoint:
    path: /home/person
    method: GET
- name: personById
  endpoint:
    path: /home/person/{id}
    method: GET
- name: postPerson
  endpoint:
    path: /home/person
    method: POST
- name: putPerson
  endpoint:
    path: /home/person
    method: PUT
- name: deletePerson
  endpoint:
    path: /home/person
    method: DELETE
- name: patchPerson
  endpoint:
    path: /home/person
    method: PATCH
- name: user
  endpoint:
    path: /repositories/user
    method: GET
    data_selector: records
    params: {}
- name: role
  endpoint:
    path: /repositories/role
    method: GET
    data_selector: records
    params: {}
- name: User
  endpoint:
    path: /services/data/vXX.X/sobjects/User
    method: GET
    data_selector: records
    params: {}
- name: Role
  endpoint:
    path: /services/data/vXX.X/sobjects/Role
    method: GET
    data_selector: records
    params: {}
- name: UserDetails
  endpoint:
    path: /services/data/vXX.X/sobjects/UserDetails
    method: GET
    data_selector: records
    params: {}
- name: User
  endpoint:
    path: /services/data/vXX.X/sobjects/User
    method: GET
    data_selector: records
    params: {}
- name: product
  endpoint:
    path: /api/products
    method: POST
    data_selector: product
    params: {}
- name: user
  endpoint:
    path: /api/users
    method: POST
    data_selector: user
    params: {}
- name: role
  endpoint:
    path: /api/roles
    method: POST
    data_selector: role
    params: {}
- name: header
  endpoint:
    path: /header.html
    method: GET
- name: products
  endpoint:
    path: /products.html
    method: GET
- name: SecurityConfiguration
  endpoint:
    path: /
    method: GET
    data_selector: requests
    params: {}
- name: header
  endpoint:
    path: /header.html
    method: GET
    data_selector: header
    params: {}
- name: products
  endpoint:
    path: /products.html
    method: GET
    data_selector: products
    params: {}
- name: product_details
  endpoint:
    path: /productshow.html
    method: GET
    data_selector: product
    params: {}
- name: product
  endpoint:
    path: /product
    method: POST
    data_selector: product
    params: {}
- name: IndexController
  endpoint:
    path: /
    method: GET
    data_selector: index
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: ''
    params: {}
- name: product_show
  endpoint:
    path: product/{id}
    method: GET
    data_selector: ''
    params: {}
- name: product_edit
  endpoint:
    path: product/edit/{id}
    method: GET
    data_selector: ''
    params: {}
- name: product_new
  endpoint:
    path: product/new
    method: GET
    data_selector: ''
    params: {}
- name: product_save
  endpoint:
    path: product
    method: POST
    data_selector: ''
    params: {}
- name: product_delete
  endpoint:
    path: product/delete/{id}
    method: GET
    data_selector: ''
    params: {}
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: product
  endpoint:
    path: /product/{id}/
    method: GET
    data_selector: product
    params: {}
- name: product
  endpoint:
    path: /product/{id}/
    method: GET
    data_selector: product
    params: {}
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: null
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: product
  endpoint:
    path: /product/new
    method: GET
    data_selector: model
    params: {}
- name: product_save
  endpoint:
    path: /product
    method: POST
    data_selector: product
    params: {}
- name: product_show
  endpoint:
    path: /product/{id}
    method: GET
    data_selector: model
    params: {}
- name: product_list
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: product_edit
  endpoint:
    path: /product/edit/{id}
    method: GET
    data_selector: model
    params: {}
- name: product
  endpoint:
    path: /product/delete/{id}
    method: DELETE
    data_selector: product
    params: {}
- name: product_show
  endpoint:
    path: /product/show
    method: GET
    data_selector: product
- name: products
  endpoint:
    path: /product
    method: GET
    data_selector: products
    params: {}
- name: product_form
  endpoint:
    path: /product
    method: POST
    data_selector: product
    params: {}
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: products
- name: product
  endpoint:
    path: product/{id}
    method: GET
    data_selector: product
- name: create_product
  endpoint:
    path: product/new
    method: GET
    data_selector: productform
- name: save_product
  endpoint:
    path: product
    method: POST
    data_selector: redirect:/product/{id}
- name: edit_product
  endpoint:
    path: product/edit/{id}
    method: GET
    data_selector: productform
- name: delete_product
  endpoint:
    path: product/delete/{id}
    method: POST
    data_selector: redirect:/products
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: product
  endpoint:
    path: /product
    method: POST
    data_selector: product
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Subscriber
  endpoint:
    path: /reactive-streams/subscriber
    method: GET
    data_selector: records
- name: Subscription
  endpoint:
    path: /reactive-streams/subscription
    method: GET
    data_selector: records
- name: Processor
  endpoint:
    path: /reactive-streams/processor
    method: GET
    data_selector: records
- name: Publisher
  endpoint:
    path: /reactive-streams/publisher
    method: GET
    data_selector: records
    params: {}
- name: Subscriber
  endpoint:
    path: /reactive-streams/subscriber
    method: GET
    data_selector: records
    params: {}
- name: Subscription
  endpoint:
    path: /reactive-streams/subscription
    method: GET
    data_selector: records
    params: {}
- name: Processor
  endpoint:
    path: /reactive-streams/processor
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Product
  endpoint:
    path: /guru/springframework/gof/observer/observerimpl/Product
    method: GET
    data_selector: records
    params: {}
- name: Observer
  endpoint:
    path: /guru/springframework/gof/observer/observerimpl/Observer
    method: GET
    data_selector: records
    params: {}
- name: Bidder
  endpoint:
    path: /guru/springframework/gof/observer/observerimpl/Bidder
    method: GET
    data_selector: records
    params: {}
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: products
- name: product
  endpoint:
    path: /product
    method: GET
    data_selector: records
    params: {}
- name: user_profile
  endpoint:
    path: /user_profile
    method: GET
    data_selector: records
- name: user_profile
  endpoint:
    path: /user_profile
    method: GET
    data_selector: user_profile
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: ShoppingCart
  endpoint:
    path: /shoppingCart
    method: GET
    data_selector: records
- name: Product
  endpoint:
    path: /product
    method: GET
    data_selector: records
- name: ShoppingCart
  endpoint:
    path: /shoppingCart
    method: POST
    data_selector: shoppingCart
    params: {}
- name: Product
  endpoint:
    path: /product
    method: POST
    data_selector: product
    params: {}
- name: User
  endpoint:
    path: /users
    method: POST
    data_selector: user
    params: {}
- name: user
  endpoint:
    path: /api/v1/user/register
    method: POST
    data_selector: user
    params: {}
- name: login
  endpoint:
    path: /api/v1/user/login
    method: POST
    data_selector: token
    params: {}
- name: blog_restricted
  endpoint:
    path: /api/v1/blog/restricted
    method: GET
    data_selector: message
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: jdbc_template_operations
  endpoint:
    path: /spring-jdbctemplate-crud-operations/
    method: GET
    data_selector: records
    params: {}
- name: Concourse Pipeline
  endpoint:
    path: https://ci.spring.io
    method: GET
- name: meme
  endpoint:
    path: /meme
    method: GET
    data_selector: MemeMaker
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: employee-service
  endpoint:
    path: /eureka
    method: GET
    data_selector: services
    params:
      register-with-eureka: 'true'
- name: greet
  endpoint:
    path: /api/v1/greet
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: scheduling_task
  endpoint:
    path: /scheduling/tasks
    method: GET
    data_selector: records
    params: {}
- name: producer
  endpoint:
    path: /springboot-apachekafka/producer
    method: GET
    data_selector: message
    params: {}
- name: RetryService
  endpoint:
    path: /retry/service
    method: GET
    data_selector: response
    params:
      maxAttempts: '3'
      backoff: '200'
- name: health
  endpoint:
    path: /actuator/health
    method: GET
    data_selector: status
- name: info
  endpoint:
    path: /actuator/info
    method: GET
    data_selector: info
- name: env
  endpoint:
    path: /actuator/env
    method: GET
    data_selector: environment
- name: metrics
  endpoint:
    path: /actuator/metrics
    method: GET
    data_selector: metrics
- name: auditevents
  endpoint:
    path: /actuator/auditevents
    method: GET
    data_selector: auditEvents
- name: beans
  endpoint:
    path: /actuator/beans
    method: GET
    data_selector: beans
- name: mappings
  endpoint:
    path: /actuator/mappings
    method: GET
    data_selector: mappings
- name: caches
  endpoint:
    path: /actuator/caches
    method: GET
    data_selector: caches
- name: conditions
  endpoint:
    path: /actuator/conditions
    method: GET
    data_selector: conditions
- name: configprops
  endpoint:
    path: /actuator/configprops
    method: GET
    data_selector: configprops
- name: flyway
  endpoint:
    path: /actuator/flyway
    method: GET
    data_selector: flyway
- name: httpexchanges
  endpoint:
    path: /actuator/httpexchanges
    method: GET
    data_selector: httpExchanges
- name: integrationgraph
  endpoint:
    path: /actuator/integrationgraph
    method: GET
    data_selector: integrationGraph
- name: loggers
  endpoint:
    path: /actuator/loggers
    method: GET
    data_selector: loggers
- name: liquibase
  endpoint:
    path: /actuator/liquibase
    method: GET
    data_selector: liquibase
- name: quartz
  endpoint:
    path: /actuator/quartz
    method: GET
    data_selector: quartz
- name: scheduledtasks
  endpoint:
    path: /actuator/scheduledtasks
    method: GET
    data_selector: scheduledTasks
- name: sessions
  endpoint:
    path: /actuator/sessions
    method: GET
    data_selector: sessions
- name: shutdown
  endpoint:
    path: /actuator/shutdown
    method: POST
    data_selector: shutdown
- name: startup
  endpoint:
    path: /actuator/startup
    method: GET
    data_selector: startup
- name: threaddump
  endpoint:
    path: /actuator/threaddump
    method: GET
    data_selector: threadDump
- name: greetings
  endpoint:
    path: /api/message
    method: GET
    data_selector: greetings
    params:
      username: Albert Xin
- name: Person
  endpoint:
    path: /org/springframework/guru/domain/Person
    method: GET
    data_selector: records
- name: Address
  endpoint:
    path: /org/springframework/guru/domain/Address
    method: GET
    data_selector: records
- name: person
  endpoint:
    path: /person
    method: POST
    data_selector: savedPerson
    params: {}
- name: address
  endpoint:
    path: /address
    method: POST
    data_selector: savedAddress
    params: {}
- name: book
  endpoint:
    path: /beans.xml
    method: GET
    data_selector: beans
    params: {}
- name: bookPublisher
  endpoint:
    path: /beans.xml
    method: GET
    data_selector: beans
    params: {}
- name: blog
  endpoint:
    path: /titleCount
    method: GET
    data_selector: records
- name: blog_title
  endpoint:
    path: /titleCountP
    method: GET
    data_selector: records
    params:
      blogTitle: string
- name: GET_TOTAL_BLOGS_BY_TITLE
  endpoint:
    path: /GET_TOTAL_BLOGS_BY_TITLE
    method: GET
    data_selector: count_out
- name: BlogEvents
  endpoint:
    path: /path/to/BlogEvents
    method: GET
    data_selector: records
- name: BlogStates
  endpoint:
    path: /path/to/BlogStates
    method: GET
    data_selector: records
- name: blog
  endpoint:
    path: /blogPageable
    method: GET
    data_selector: Page
    params: {}
- name: blogPageable
  endpoint:
    path: /blogPageable
    method: GET
    params:
      size: 2
      sort: blogTitle
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: blog
  endpoint:
    path: /guru/springframework/blog
    method: GET
    data_selector: blog
    params:
      id: '202'
      title: The Huffington Post
      author: Arianna
      description: The history of political blogging might usefully be divided into
        the periods pre- and post-Huffington.
- name: blog
  endpoint:
    path: /guru.springframework.blog
    method: GET
    data_selector: id
    params: {}
- name: microblog
  endpoint:
    path: /guru.springframework.microblog
    method: GET
    data_selector: blogid
    params: {}
- name: MicroBlog
  endpoint:
    path: /
    method: GET
    data_selector: properties
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: message
  endpoint:
    path: /message/api/version1/message
    method: GET
    data_selector: ''
    params: {}
- name: product
  endpoint:
    path: /products
    method: DELETE
    data_selector: product
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/v1/user
    method: POST
    data_selector: ''
    params: {}
- name: user.queue
  endpoint:
    path: /api/v1/user
    method: POST
    data_selector: body
    params: {}
- name: Product
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: secure_message
  endpoint:
    path: /api/v1/password
    method: GET
    data_selector: String
- name: Book
  endpoint:
    path: /Book
    method: GET
    data_selector: records
    params: {}
- name: book
  endpoint:
    path: /books
    method: GET
    data_selector: books
- name: books
  endpoint:
    path: /books
    method: GET
    data_selector: records
    params: {}
- name: Pagination
  endpoint:
    path: /spring-boot-pagination/
    method: GET
    data_selector: posts
    params: {}
- name: Query
  endpoint:
    path: /spring-data-jpa/query
    method: GET
    data_selector: records
- name: Pagination
  endpoint:
    path: /spring-data-jpa/pagination
    method: GET
    data_selector: records
- name: memberdb
  endpoint:
    path: /memberdb
    method: CREATE
    data_selector: database
    params: {}
- name: carddb
  endpoint:
    path: /carddb
    method: CREATE
    data_selector: database
    params: {}
- name: cardholderdb
  endpoint:
    path: /cardholderdb
    method: CREATE
    data_selector: database
    params: {}
- name: carddb
  endpoint:
    path: /create/database/carddb
    method: POST
- name: cardholderdb
  endpoint:
    path: /create/database/cardholderdb
    method: POST
- name: memberdb
  endpoint:
    path: /create/database/memberdb
    method: POST
- name: mongo
  endpoint:
    path: mongo
    method: GET
    params: {}
- name: user-service
  endpoint:
    path: user
    method: POST
    params: {}
- name: mongo_init
  endpoint:
    path: /docker-entrypoint-initdb.d/mongo-init.js
    method: GET
- name: docker-maven-plugin
  endpoint:
    path: /docker-maven-plugin
    method: POST
    data_selector: images
    params: {}
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: User
- name: users-service
  endpoint:
    path: /config/users-service/data
    method: GET
- name: DemoController
  endpoint:
    path: /api/v1/message
    method: GET
    data_selector: message
- name: message
  endpoint:
    path: /api/v1/message
    method: GET
- name: docker_image
  endpoint:
    path: /docker/image
    method: GET
    data_selector: layers
- name: singleton_blog
  endpoint:
    path: /services/data/vXX.X/sobjects/Blog
    method: GET
    data_selector: records
    params: {}
- name: prototype_blog
  endpoint:
    path: /services/data/vXX.X/sobjects/Blog
    method: GET
    data_selector: records
    params: {}
- name: RequestScopeController
  endpoint:
    path: /message
    method: GET
- name: SessionScopeController
  endpoint:
    path: /session/message
    method: GET
- name: BpService
  endpoint:
    path: /BpService
    method: GET
    data_selector: records
- name: BpServiceImpl
  endpoint:
    path: /BpServiceImpl
    method: GET
    data_selector: records
- name: BpFinalConstructorController
  endpoint:
    path: /BpFinalConstructorController
    method: GET
    data_selector: records
- name: AwareBeanImpl
  endpoint:
    path: /guru/springframework/springbeanlifecycle/awareinterfaces/domain/AwareBeanImpl
    method: GET
    data_selector: properties
    params: {}
- name: bookBean
  endpoint:
    path: guru.springframework.springbeanlifecycle.beanpostprocessor.domain.BookBean
    method: GET
    data_selector: bookName
    params: {}
- name: book
  endpoint:
    path: guru.springframework.springbeanlifecycle.callbackinterfaces.domain.Book
    method: GET
    data_selector: bookName
    params: {}
- name: customLifeCycleBookBean
  endpoint:
    path: /beans.xml
    method: GET
    data_selector: bean
    params: {}
- name: test
  endpoint:
    params:
      spring.datasource.url: jdbc:mysql://localhost:3306/testDB
      spring.datasource.username: root
      spring.datasource.password: root123
      spring.datasource.driverClassName: com.mysql.cj.jdbc.Driver
      spring.jpa.hibernate.ddl-auto: update
      spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQL5Dialect
- name: dev
  endpoint:
    params:
      spring.h2.console.enabled: 'true'
      spring.h2.console.path: /h2
      spring.datasource.driverClassName: org.h2.Driver
      spring.datasource.url: jdbc:h2:mem:db
      spring.datasource.userName: sa
      spring.datasource.password: sa
- name: prod
  endpoint:
    params:
      spring.datasource.url: jdbc:mysql://localhost:3306/prodDB
      spring.datasource.userName: root
      spring.datasource.password: root123
      spring.datasource.driverClassName: com.mysql.cj.jdbc.Driver
      spring.jpa.hibernate.ddl-auto: update
      spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQL5Dialect
- name: DBConfiguration
  endpoint:
    path: spring.datasource
    method: GET
- name: EPubBook
  endpoint:
    path: /example.epub.com/books/thinkandgrowrich.epub
    method: GET
    data_selector: records
    params: {}
- name: using_ehcache
  endpoint:
    path: /using-ehcache-3-in-spring-boot/
    method: GET
    data_selector: records
    params: {}
- name: multiple_data_sources
  endpoint:
    path: /how-to-configure-multiple-data-sources-in-a-spring-boot-application/
    method: GET
    data_selector: records
    params: {}
- name: internationalization
  endpoint:
    path: /internationalization-with-spring-boot/
    method: GET
- name: one_to_one_relationship
  endpoint:
    path: /one-to-one-relationship-in-jpa/
    method: GET
- name: request_body_annotation
  endpoint:
    path: /requestbody-annotation/
    method: GET
- name: bean_factory_vs_application_context
  endpoint:
    path: /spring-beanfactory-vs-applicationcontext/
    method: GET
- name: mysql_stored_procedures
  endpoint:
    path: /mysql-stored-procedures-with-spring-boot/
    method: GET
- name: bean_validation
  endpoint:
    path: /bean-validation-in-spring-boot/
    method: GET
- name: spring_state_machine
  endpoint:
    path: /spring-state-machine/
    method: GET
- name: exception_handling
  endpoint:
    path: /exception-handling-in-spring-boot-rest-api/
    method: GET
- name: pagination
  endpoint:
    path: /spring-boot-pagination/
    method: GET
- name: spring_rest_docs
  endpoint:
    path: /spring-rest-docs/
    method: GET
- name: api_gateway
  endpoint:
    path: /api-gateway/
    method: GET
- name: testing_restful_services
  endpoint:
    path: /testing-spring-boot-restful-services/
    method: GET
- name: caching_part_2
  endpoint:
    path: /caching-in-spring-restful-service-part-2-cache-eviction/
    method: GET
- name: messaging_with_rabbitmq
  endpoint:
    path: /spring-boot-messaging-with-rabbitmq/
    method: GET
- name: caching_part_1
  endpoint:
    path: /caching-in-spring-boot-restful-service-part-1/
    method: GET
- name: http_basic_authentication
  endpoint:
    path: /implementing-http-basic-authentication-in-a-spring-boot-rest-api/
    method: GET
- name: immutable_property_binding
  endpoint:
    path: /immutable-property-binding/
    method: GET
- name: EhcacheDemo
  endpoint:
    path: /demo/ehcache
    method: GET
    data_selector: cacheResults
    params: {}
- name: areaOfCircleCache
  endpoint:
    path: /rest/calculate/areaOfCircle
    method: GET
    data_selector: result
    params:
      radius: int
- name: multiplyCache
  endpoint:
    path: /rest/calculate/multiply
    method: GET
    data_selector: result
    params:
      factor1: int
      factor2: int
- name: studentCache
  endpoint:
    path: /student
    method: POST
    data_selector: student
    params: {}
- name: member
  endpoint:
    path: /memberdb
    method: GET
    data_selector: records
    params: {}
- name: cardholder
  endpoint:
    path: /cardholderdb
    method: GET
    data_selector: records
    params: {}
- name: card
  endpoint:
    path: /carddb
    method: GET
    data_selector: records
    params: {}
- name: member
  endpoint:
    path: /services/data/vXX.X/sobjects/Member
    method: GET
    data_selector: records
- name: cardholder
  endpoint:
    path: /services/data/vXX.X/sobjects/CardHolder
    method: GET
    data_selector: records
- name: card
  endpoint:
    path: /services/data/vXX.X/sobjects/Card
    method: GET
    data_selector: records
- name: DataSourceConfiguration
  endpoint:
    path: /configuration/app/datasource
    method: GET
    data_selector: datasources
    params: {}
- name: employees
  endpoint:
    path: /rest/employees
    method: GET
- name: employee
  endpoint:
    path: /{id}
    method: GET
    data_selector: employee
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Resource
  endpoint:
    path: /resource
    method: GET
    data_selector: resources
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: ApplicationContextAware
  endpoint:
    path: /path/to/ApplicationContextAware
    method: GET
    data_selector: records
    params: {}
- name: BeanFactoryAware
  endpoint:
    path: /path/to/BeanFactoryAware
    method: GET
    data_selector: records
    params: {}
- name: BeanNameAware
  endpoint:
    path: /path/to/BeanNameAware
    method: GET
    data_selector: records
    params: {}
- name: books
  endpoint:
    path: /rest/books
    method: POST
    data_selector: data
    params: {}
- name: allBooks
  endpoint:
    path: /allBooks
    method: GET
    data_selector: allBooks
    params: {}
- name: book
  endpoint:
    path: /book
    method: GET
    data_selector: book
    params:
      id: String
- name: books
  endpoint:
    path: /rest/books
    method: POST
    data_selector: data.allBooks
- name: payor-service
  endpoint:
    path: /v1/payors/0a818933-087d-47f2-ad83-2f986ed087eb
    method: GET
- name: payor-service
  endpoint:
    path: /v1/payors/0a818933-087d-47f2-ad83-2f986ed087eb
    method: GET
    data_selector: records
    params: {}
- name: payor
  endpoint:
    path: /v1/payors/{payorId}
    method: GET
    data_selector: optionalPayor
    params:
      payorId: UUID
- name: payor
  endpoint:
    path: /payor/details
    method: GET
    data_selector: payor
    params: {}
- name: payor
  endpoint:
    path: /v1/payors/{payorId}
    method: GET
    data_selector: Payor
    params:
      payorId: required
- name: payor
  endpoint:
    path: /v1/payors/{payorId}
    method: GET
    data_selector: payorId
    params: {}
- name: payors
  endpoint:
    path: /v1/payors/{id}
    method: GET
    data_selector: response
    params: {}
- name: payor
  endpoint:
    path: /v1/payors/{payorId}
    method: GET
    data_selector: response
    params:
      payorId: required
- name: payor
  endpoint:
    path: /v1/payors/{payorId}
    method: GET
    data_selector: body
    params:
      incremental: payorId
- name: contract_verifier
  endpoint:
    path: /v1/payors/{id}
    method: GET
    data_selector: response
    params: {}
- name: payor
  endpoint:
    path: /payors/{id}
    method: GET
    data_selector: payorId
    params: {}
- name: movies
  endpoint:
    path: /
    method: GET
    data_selector: Search
    params:
      apikey: '{{ dlt.secrets[''omdb_api_key''] }}'
      t: movie_title
      i: imdb_id
- name: movie_by_title
  endpoint:
    path: /?apikey={apiKey}&t={title}
    method: POST
    data_selector: Movie
- name: movie_by_id
  endpoint:
    path: /?apikey={apiKey}&i={imdbId}
    method: POST
    data_selector: Movie
- name: movie_events
  endpoint:
    path: /api/v1/movies/events
    method: GET
    data_selector: MovieEvent
- name: movies_by_id
  endpoint:
    path: /movies/id/{imdbId}
    method: GET
    data_selector: responseBody
- name: movies_by_title
  endpoint:
    path: /movies/title/{name}
    method: GET
    data_selector: responseBody
- name: movie_events
  endpoint:
    path: /movies/events
    method: GET
    data_selector: responseBody
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: fraudcheck
  endpoint:
    path: /fraudcheck
    method: PUT
    data_selector: body
    params: {}
- name: fraudcheck
  endpoint:
    path: /fraudcheck
    method: PUT
    data_selector: body
    params: {}
- name: fraudcheck
  endpoint:
    path: /fraudcheck
    method: PUT
    data_selector: body
    params: {}
- name: fraudcheck
  endpoint:
    path: /fraudcheck
    method: PUT
    data_selector: body
    params: {}
- name: fraudcheck
  endpoint:
    path: /fraudcheck
    method: PUT
    data_selector: body
    params: {}
- name: fraud_check
  endpoint:
    path: /
    method: GET
    data_selector: body
    params: {}
- name: fraudcheck
  endpoint:
    path: /fraudcheck
    method: PUT
    data_selector: body
    params: {}
- name: fraudcheck
  endpoint:
    path: /fraudcheck
    method: PUT
    data_selector: body
    params: {}
- name: fraudCheck
  endpoint:
    path: /fraudCheck
    method: GET
    data_selector: body
    params: {}
- name: gamemanager
  endpoint:
    path: /gamemanager
    method: POST
    data_selector: body
    params: {}
- name: game-contract-for-score-greater_than_500
  request:
    method: POST
    urlPath: /gamemanager
    queryParameters:
      game: football
    body:
      name: Tim
      score: 600
    headers:
      contentType: application/json
  response:
    status: 200
    headers:
      contentType: application/json
    body:
      result: ELIGIBLE
- name: game-contract-for-score-lesser_than_500
  request:
    method: POST
    urlPath: /gamemanager
    queryParameters:
      game: football
    body:
      name: Tim
      score: 300
    headers:
      contentType: application/json
  response:
    status: 200
    headers:
      contentType: application/json
    body:
      result: NOT ELIGIBLE
- name: play_game
  endpoint:
    path: /play/{game}
    method: POST
    data_selector: result
    params: {}
- name: game_request
  endpoint:
    path: /gamemanager
    method: POST
    data_selector: result
    params:
      game: football
- name: mysql_server
  endpoint:
    path: /mysql-server-5.6
    method: GET
- name: Product
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: hibernate_sql_logging
  endpoint:
    path: /application.properties
    method: POST
    data_selector: logging.level.org.hibernate.SQL
    params:
      logging.level.org.hibernate.SQL: debug
      logging.level.org.hibernate.type.descriptor.sql: trace
      spring.jpa.show-sql: 'true'
      spring.jpa.properties.hibernate.format_sql: 'true'
- name: Product
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: jobs
    params: {}
- name: build
  endpoint:
    path: /
    method: GET
- name: build
  endpoint:
    path: /v2/build
    method: POST
    data_selector: builds
    params: {}
- name: build
  endpoint:
    path: /build
    method: POST
- name: build
  endpoint:
    path: /v2/project/:project_slug
    method: POST
    data_selector: build
    params: {}
- name: build
  endpoint:
    path: /v2/project
    method: POST
    data_selector: jobs
- name: build
  endpoint:
    path: /
    method: GET
    data_selector: jobs
    params: {}
- name: build
  endpoint:
    path: /builds
    method: POST
    data_selector: builds
- name: build
  endpoint:
    path: .circleci/config.yml
    method: GET
- name: dog
  endpoint:
    path: /dog
    method: GET
    data_selector: records
    params: {}
- name: dog
  endpoint:
    path: /
    method: GET
    data_selector: dogs
    params:
      search: q
- name: add_dog
  endpoint:
    path: /
    method: POST
    data_selector: add
    params:
      name: name
      rescued: rescued
      vaccinated: vaccinated
- name: delete_dog
  endpoint:
    path: /delete
    method: POST
    data_selector: delete
    params:
      name: name
      id: id
- name: generate_key
  endpoint:
    path: /genkey
    method: POST
    data_selector: generate
    params:
      name: name
      rescued: rescued
      vaccinated: vaccinated
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: mongodb-driver-reactivestreams
  endpoint:
    path: /dependencies/org/mongodb/mongodb-driver-reactivestreams
    method: GET
- name: embedded-mongodb
  endpoint:
    path: /dependencies/de/flapdoodle/embed/de.flapdoodle.embed.mongo
    method: GET
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: records
    params: {}
- name: MongoTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MongoTemplate
    method: GET
    data_selector: records
    params: {}
- name: product
  endpoint:
    path: /product
    method: GET
    data_selector: records
    params: {}
- name: mongo_collection
  endpoint:
    path: /test
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /user_tbl
    method: CRUD
    data_selector: records
- name: user
  endpoint:
    path: /user_tbl
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /user_tbl
    method: CRUD
    data_selector: User
    params: {}
- name: User
  endpoint:
    path: /user_tbl
    method: CRUD
    data_selector: User
    params: {}
- name: User
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: User
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: list_running_docker_containers
  endpoint:
    path: /docker/containers/running
    method: GET
    data_selector: containers
    params: {}
- name: list_all_docker_containers
  endpoint:
    path: /docker/containers/all
    method: GET
    data_selector: containers
    params: {}
- name: start_docker_container
  endpoint:
    path: /docker/containers/start
    method: POST
    data_selector: result
    params: {}
- name: stop_docker_container
  endpoint:
    path: /docker/containers/stop
    method: POST
    data_selector: result
    params: {}
- name: kill_all_running_containers
  endpoint:
    path: /docker/containers/kill
    method: POST
    data_selector: result
    params: {}
- name: view_logs_of_running_container
  endpoint:
    path: /docker/containers/logs
    method: GET
    data_selector: logs
    params: {}
- name: delete_all_stopped_containers
  endpoint:
    path: /docker/containers/delete/stopped
    method: DELETE
    data_selector: result
    params: {}
- name: remove_docker_image
  endpoint:
    path: /docker/images/remove
    method: DELETE
    data_selector: result
    params: {}
- name: delete_all_docker_images
  endpoint:
    path: /docker/images/delete/all
    method: DELETE
    data_selector: result
    params: {}
- name: ssh_into_running_container
  endpoint:
    path: /docker/containers/ssh
    method: GET
    data_selector: ssh_access
    params: {}
- name: use_docker_compose_build
  endpoint:
    path: /docker/compose/build
    method: POST
    data_selector: result
    params: {}
- name: use_docker_compose_start
  endpoint:
    path: /docker/compose/start
    method: POST
    data_selector: result
    params: {}
- name: follow_logs_with_docker_compose
  endpoint:
    path: /docker/compose/logs/follow
    method: GET
    data_selector: logs
    params: {}
- name: docker_images
  endpoint:
    path: /docker/images
    method: GET
    data_selector: images
    params: {}
- name: docker_ps
  endpoint:
    path: /docker/ps
    method: GET
    data_selector: containers
    params: {}
- name: docker_start
  endpoint:
    path: /docker/start
    method: POST
    data_selector: start
    params: {}
- name: docker_stop
  endpoint:
    path: /docker/stop
    method: POST
    data_selector: stop
    params: {}
- name: docker_kill
  endpoint:
    path: /docker/kill
    method: POST
    data_selector: kill
    params: {}
- name: docker_logs
  endpoint:
    path: /docker/logs
    method: GET
    data_selector: logs
    params: {}
- name: docker_rm
  endpoint:
    path: /docker/rm
    method: DELETE
    data_selector: remove
    params: {}
- name: docker_rmi
  endpoint:
    path: /docker/rmi
    method: DELETE
    data_selector: remove_image
    params: {}
- name: docker_volume_rm
  endpoint:
    path: /docker/volume/rm
    method: DELETE
    data_selector: remove_volume
    params: {}
- name: docker_exec
  endpoint:
    path: /docker/exec
    method: POST
    data_selector: exec
    params: {}
- name: docker_compose_build
  endpoint:
    path: /docker/compose/build
    method: POST
    data_selector: build
    params: {}
- name: docker_compose_up
  endpoint:
    path: /docker/compose/up
    method: POST
    data_selector: up
    params: {}
- name: docker_compose_logs
  endpoint:
    path: /docker/compose/logs
    method: GET
    data_selector: compose_logs
    params: {}
- name: docker_images
  endpoint:
    path: /docker/images
    method: GET
    data_selector: images
    params: {}
- name: docker_containers
  endpoint:
    path: /docker/containers
    method: GET
    data_selector: containers
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: defaultTemplateResolver
  endpoint:
    path: classpath:/templates/
    method: GET
    data_selector: resolver
    params: {}
- name: thymeleafResourceResolver
  endpoint:
    path: SpringResourceResourceResolver
    method: GET
    data_selector: resolver
    params: {}
- name: templateEngine
  endpoint:
    path: SpringTemplateEngine
    method: GET
    data_selector: engine
    params: {}
- name: thymeleafViewResolver
  endpoint:
    path: ThymeleafViewResolver
    method: GET
    data_selector: resolver
    params: {}
- name: layoutDialect
  endpoint:
    path: LayoutDialect
    method: GET
    data_selector: dialect
    params: {}
- name: ThymeleafAutoConfiguration
  endpoint:
    path: /spring-boot-autoconfigure
    method: GET
    data_selector: records
- name: defaultTemplateResolver
  endpoint:
    path: /defaultTemplateResolver
    method: GET
- name: thymeleafViewResolver
  endpoint:
    path: /thymeleafViewResolver
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: springbootdb
  endpoint:
    path: /createdb
    method: POST
    data_selector: database
    params:
      host: localhost
      port: 5432
      user: postgres
      dbname: springbootdb
- name: Customer
  endpoint:
    path: /guru/springframework/domain/Customer
    method: GET
    data_selector: records
- name: Address
  endpoint:
    path: /guru/springframework/domain/Address
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: spring_web_reactive
  endpoint:
    path: /spring/web/reactive
    method: GET
    data_selector: records
    params: {}
- name: h2_database
  endpoint:
    path: /schema-h2.sql
    method: POST
    data_selector: schema
    params: {}
- name: oracle_database
  endpoint:
    path: /application-oracle.properties
    method: POST
    data_selector: properties
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: OracleDataSource
  endpoint:
    path: /OracleDataSource
    method: GET
    data_selector: dataSource
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: springbootdb
  endpoint:
    path: /springbootdb
    method: CREATE
    data_selector: database
    params: {}
- name: helloJMSQueue
  endpoint:
    path: ''
    method: GET
    data_selector: ''
    params: {}
- name: hello_queue
  endpoint:
    path: /hello.queue
    method: POST
    data_selector: message
    params: {}
- name: dependency_groovy_all
  endpoint:
    path: /dependency/org.codehaus.groovy/groovy-all/2.4.3
    method: GET
- name: dependency_spock_core
  endpoint:
    path: /dependency/org.spockframework/spock-core/1.0-groovy-2.4
    method: GET
- name: dependency_spock_spring
  endpoint:
    path: /dependency/org.spockframework/spock-spring/1.0-groovy-2.4
    method: GET
- name: plugin_maven_compiler
  endpoint:
    path: /plugin/maven-compiler-plugin/3.1
    method: GET
- name: dependency_groovy_eclipse_compiler
  endpoint:
    path: /dependency/org.codehaus.groovy/groovy-eclipse-compiler/2.9.2-01
    method: GET
- name: dependency_groovy_eclipse_batch
  endpoint:
    path: /dependency/org.codehaus.groovy/groovy-eclipse-batch/2.4.3-01
    method: GET
- name: hello.queue
  endpoint:
    path: /helloJMSQueue
    method: GET
    data_selector: records
    params: {}
- name: helloJMSQueue
  endpoint:
    path: /helloJMSQueue
    method: GET
    data_selector: records
    params: {}
- name: SayHelloServiceJmsIT
  endpoint:
    path: /services/data/vXX.X/sobjects/SayHelloServiceJmsIT
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: index
  endpoint:
    path: /
    method: GET
    data_selector: index
    params: {}
- name: index
  endpoint:
    path: /
    method: GET
    data_selector: index
    params: {}
- name: spring-boot-starter-data-jpa
  endpoint:
    path: org/springframework/boot/spring-boot-starter-data-jpa
    method: GET
    data_selector: jar
    params: {}
- name: spring-boot-starter-web
  endpoint:
    path: org/springframework/boot/spring-boot-starter-web
    method: GET
    data_selector: jar
    params: {}
- name: h2_console
  endpoint:
    path: /console/*
    method: GET
    data_selector: ''
    params: {}
- name: h2_console
  endpoint:
    path: /console/*
    method: GET
    data_selector: records
    params: {}
- name: h2_console
  endpoint:
    path: /console
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: EventHolderBean
  endpoint:
    path: /event/holder
    method: GET
- name: AddressService
  endpoint:
    path: /services/data/vXX.X/sobjects/AddressService
    method: GET
    data_selector: records
    params: {}
- name: AddressServiceImpl
  endpoint:
    path: /services/data/vXX.X/sobjects/AddressServiceImpl
    method: GET
    data_selector: records
    params: {}
- name: OrderGateway
  endpoint:
    path: /placeOrderChannel
    method: POST
    data_selector: placeOrder
    params: {}
- name: AddressGateway
  endpoint:
    path: /verifyAddressChannel
    method: POST
    data_selector: verifyAddress
    params: {}
- name: InventoryGateway
  endpoint:
    path: /verifyOrderInventoryChannel
    method: POST
    data_selector: verifyOrderInventory
    params: {}
- name: PaymentGateway
  endpoint:
    path: /verifyCreditCardChannel
    method: POST
    data_selector: verifyCreditCard
    params: {}
- name: productService
  endpoint:
    path: /spring/si-product-gateway.xml
    method: GET
- name: addressService
  endpoint:
    path: /spring/si-config.xml
    method: GET
- name: inventoryService
  endpoint:
    path: /spring/si-config.xml
    method: GET
- name: paymentService
  endpoint:
    path: /spring/si-config.xml
    method: GET
- name: orderService
  endpoint:
    path: /spring/si-config.xml
    method: GET
- name: properties
  endpoint:
    path: /properties
    method: GET
    data_selector: properties
    params: {}
- name: dependency_injection
  endpoint:
    path: /dependency_injection
    method: GET
    data_selector: dependency_injection
    params: {}
- name: configuration_composition
  endpoint:
    path: /configuration_composition
    method: GET
    data_selector: configuration_composition
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Spring Data MongoDB with Reactive MongoDB
  endpoint:
    path: /spring-data-mongodb-with-reactive-mongodb
    method: GET
    data_selector: records
    params: {}
- name: Product
  endpoint:
    path: /getProductChannel
    method: GET
    data_selector: Product
    params: {}
- name: product
  endpoint:
    path: /spring/si-config.xml
    method: GET
- name: product
  endpoint:
    path: /api/products
    method: GET
    data_selector: products
    params:
      incremental: updated_at
- name: product
  endpoint:
    path: /product
    method: GET
    data_selector: product
    params: {}
- name: company
  endpoint:
    path: /springspelexample/Company
    method: GET
    data_selector: companyBean
    params: {}
- name: employee
  endpoint:
    path: /springspelexample/Employee
    method: GET
    data_selector: employeeBean
    params: {}
- name: student
  endpoint:
    path: /springspelexample/Student
    method: GET
    data_selector: studentBean
    params: {}
- name: college
  endpoint:
    path: /springspelexample/College
    method: GET
    data_selector: collegeBean
    params: {}
- name: projectEnvBean
  endpoint:
    path: /environment/projectEnvBean
    method: GET
    data_selector: environment variable value appHome
    params: {}
- name: secondProjectEnvBean
  endpoint:
    path: /environment/secondProjectEnvBean
    method: GET
    data_selector: environment variable value appHome
    params: {}
- name: helloWorldGateway
  endpoint:
    path: /gateway/helloWorld
    method: POST
    data_selector: response
    params: {}
- name: sayHello
  endpoint:
    path: /channel/say.hello.channel
    method: POST
    data_selector: response
    params: {}
- name: getHelloMessage
  endpoint:
    path: /channel/get.hello.channel
    method: GET
    data_selector: response
    params: {}
- name: sayHello
  endpoint:
    path: /sayHello
    method: POST
    data_selector: response
- name: getHelloMessage
  endpoint:
    path: /getHelloMessage
    method: GET
    data_selector: response
- name: getHelloMessageAsync
  endpoint:
    path: /getHelloMessageAsync
    method: GET
    data_selector: response
- name: sayHello
  endpoint:
    path: /sayHello
    method: POST
    data_selector: response
    params: {}
- name: getHelloMessage
  endpoint:
    path: /getHelloMessage
    method: GET
    data_selector: response
    params: {}
- name: getHelloMessageAsync
  endpoint:
    path: /getHelloMessageAsync
    method: GET
    data_selector: response
    params: {}
- name: xmlBean
  endpoint:
    path: /guru/springframework/xml/XmlBean
    method: GET
    data_selector: bean
    params: {}
- name: componentScanBean
  endpoint:
    path: /guru/springframework/componentscan/ComponentScanBean
    method: GET
    data_selector: bean
    params: {}
- name: JavaConfigBean
  endpoint:
    path: /services/data/vXX.X/sobjects/JavaConfigBean
    method: GET
- name: xmlBean
  endpoint:
    path: /spring/spring-config.xml
    method: GET
    data_selector: bean
    params: {}
- name: javaConfigBean
  endpoint:
    path: /path/to/java/config
    method: GET
    data_selector: bean
    params: {}
- name: component_scan_bean
  endpoint:
    path: /componentScanBean
    method: GET
    data_selector: hello
- name: java_config_bean
  endpoint:
    path: /javaConfigBean
    method: GET
    data_selector: hello
- name: xml_bean
  endpoint:
    path: /xmlBean
    method: GET
    data_selector: hello
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: spring_boot_example
  endpoint:
    path: /spring-boot-example-of-spring-integration-and-activemq/
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- Uses Swagger 2 for API documentation
- Includes Springfox as the implementation for Swagger
- Swagger UI available at http://localhost:8080/swagger-ui.html
- API documentation available at http://localhost:8080/v2/api-docs
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- If Swagger is behind any auth, you need to permit all requests to /swagger-resources/**
  in SpringBoot Security.
- SwaggerConfig should NOT extend from WebMvcConfigurationSupport.
- Some configuration in application.properties may not be taken when using specific
  Spring Boot versions.
- Uses XML and annotation based configuration for bean management.
- The Spring Expression Language is a powerful feature of the Spring Framework.
- Support for Structured Logging is a new feature introduced with the Spring Boot
  3.4.0 release.
- Structured Logging is common in distributed environments using consolidated logging.
- You can use JSON log format for easy searches with tools like Elasticsearch.
- Use charAt for single character extraction
- Convert using toCharArray for multi-character manipulation
- Validate Indexes to avoid exceptions
- 'IndexOutOfBoundsException: Ensure that startIndex and endIndex are within the string’s
  length.'
- 'Zero-Based Indexing: Java indices start at 0.'
- 'Immutable Strings: substring() creates a new string without modifying the original.'
- COMPANY reserves the right to modify, suspend or discontinue, temporarily or permanently,
  the Site (or any part thereof) from time to time, for any or no reason and without
  notice.
- Jackson is a high-performance, flexible JSON processing library for Java.
- Supports converting Java objects to JSON and JSON to Java objects.
- We have a lot of versatility for formatting time values.
- The examples used in this tutorial are available in my Github repository.
- Spring Boot uses Logback for its logging configuration.
- JSON logs are hard to read in the console, thus you can use normal log output in
  development.
- Uses Spring Boot 3.3.4 for JSON logging
- The Optional class prevents unwanted NullPointerExceptions.
- The Optional class is an attempt to reduce the number of null pointer exceptions
  in Java systems.
- Uses OAuth2 with refresh token — requires setup of connected app in Spring Framework
  Guru
- HikariCP is the default connection pool in Spring Boot 2.x
- Connection properties are defined in application.properties
- You can collect HikariCP metrics using Spring Boot Actuator.
- Once your application starts, access from your browser the Actuator metrics endpoint.
- Sealed classes and interfaces restrict which other classes or interfaces can extend
  or implement them.
- The metal pipeline requires macOS 10.14.x or later.
- The new Spring Framework 6 release is based on Java 17.
- Oracle has finally made Java 17 binaries free to use in production.
- Uses LinkedBlockingDeque for single-threaded applications with blocking.
- The removeFirst() method is equivalent to remove() method.
- To use JUnit 5 parameterized tests, add the dependencies in your pom.xml
- Parameterized tests are great ways to execute one test as many times as we want.
- MapStruct uses getters and setters for its mappers.
- Project Lombok requires enabling annotation processing in IDE.
- Java Records is a preview language feature in JDK 14, you need to enable preview
  features to use them.
- Java Records reduce boilerplate code without sacrificing the reliability of an immutable
  class.
- Constructor binding ensures that all the property fields are final thus no need
  for providing setters.
- Uses @ConfigurationProperties for binding configuration properties
- Documentation covers various topics related to Java and Spring Framework
- Feign has built-in support for load balancing.
- When using Feign, it is possible to use the built-in support for circuit breaker.
- No specific authentication required.
- jEnv makes setting the JAVA_HOME environment variable simple.
- Windows users can use jEnv from a Linux subsystem.
- The IP address of the docker bridge network is not constant and docker does not
  guarantee that this will be the default in each case.
- Consul server runs on port 8500 with host networking mode.
- Running the user service at http://localhost:8081/user
- The hello service at http://localhost:8080/hello currently returns an error.
- Records are a new feature in Java 14 that simplify the creation of data classes.
- SDKMAN is a command line utility we can use to make managing our development environments
  easier.
- Uses advanced breakpoint options for conditional stopping
- Ability to throw exceptions for specific frames during debugging
- Variable values can be altered during debugging sessions
- Classes modified during debugging can be reloaded without restarting
- If you’re using a Spring Boot POM, Project Lombok is a curated dependency. Thus,
  you can omit the version (which will then be inherited from the Spring Boot parent
  POM).
- Lombok is a convenient tool that all Java developers should have in their toolkit.
- When using Lombok for the first time, you might stumble on how to configure it in
  your IDE.
- Lombok internally uses the annotation processor API as the entry point. This API
  only allows the creation of new files during the compilation and not the modification
  of the existing files.
- To enable annotation processing in IntelliJ IDEA, go to File -> Settings -> Build,
  Execution, Deployment -> Compiler -> Annotation Processors and mark 'Enable annotation
  processing'.
- Using annotations such as @Data, @Setter, @Getter and @Builder makes classes more
  concise and readable
- 'Autowiring supports multiple modes: no, byName, byType, constructor, and autodetect'
- Autodetect functionality will work with the 2.5 and 2.0 schemas. It will not work
  from 3.0+.
- By default, Spring resolves @Autowired entries byType.
- Uses ServiceLocatorFactoryBean to manage parser instances
- Data in the database is not persisted permanently.
- Spring will automatically search for schema.sql and data.sql files at application
  startup.
- ArrayList uses a dynamic array for storing elements.
- LinkedList uses a doubly linked list to store elements.
- LinkedList is not as popular as ArrayList and is a specialized solution.
- Go for LinkedList if your use case is more insertion and deletion driven and without
  random access.
- TimerTask executes sequentially in a single background thread.
- Tasks should complete quickly to prevent delays in subsequent task executions.
- Hashtable is much slower than HashMap if used in single threaded environment.
- HashMap allows one null key and multiple null values whereas Hashtable doesn’t allow
  null values.
- The Collections.sort() method is designed to order elements within a list.
- Java’s Collections.sort() is a powerful tool for sorting Collections.
- When performance counts, use Arrays.sort() for optimal performance with primitive
  arrays.
- SDKMAN can be installed on Linux and Mac based system.
- 'To check the current SDKMAN version enter this command at the terminal: $ sdk version'
- 'This will display the current version: SDKMAN 5.7.3+33'
- Maven 3.3+ release requires JDK 1.7 or above to execute.
- JUnit 5 tests run fine from IDE but may fail under Maven
- Maven 3.6.0 is required to run JUnit 5 tests.
- Using the Maven wrapper can help ensure consistent Maven versions across environments.
- Uses JUnit 5 with Java 11
- Introduces different methods to convert List to Array in Java.
- Includes examples with JUnit testing.
- Enums remove 'magic numbers'.
- Enums prevent incorrect values from being passed to a function.
- Uses functional programming style with Java 8 streams.
- A common requirement while programming in Java is to convert String to int.
- The Integer class also provides an overloaded parseInt method that additionally
  accepts the radix (base) to be used while parsing.
- The parseInt method throws a NumberFormatException if the String does not contain
  a parsable int.
- Integer class provides methods to convert String to int.
- JAXB is bundled with JDK starting from JDK 1.6.
- Uses JAXB for XML processing.
- JAXB is no longer included on the JVM classpath by default in Java 9.
- From Java 11 more aggressive solutions will have to be employed to add JAXB.
- Typically this feature is disabled. Using Pretty Print with JSON adds additional
  characters for the line breaks to your JSON payloads, thus creates larger overall
  payloads.
- For production workloads, enabling the pretty print of JSON is typically avoided.
  You normally only wish to do this for development and debugging.
- 'Predictability: The Random class uses a linear congruential generator.'
- 'Regulatory Compliance: Many security protocols and standards require the use of
  cryptographically secure random number generation.'
- Jackson is a popular library in Java used for processing JSON data.
- Uses transient keyword to exclude fields from serialization and deserialization
- Custom serialization and deserialization can be achieved using JsonSerializer and
  JsonDeserializer
- To use Gson in your Spring Boot application, declare Gson in your Spring Boot Maven
  POM.
- Docker images are built in layers.
- Use the -p parameter to map ports.
- Dockerfiles should not be named DockerFile, use Dockerfile.
- The application runs on port 8080.
- Uses Docker Maven plugin for building Docker images
- The first time you build this Docker image will take longer since all the layers
  are being downloaded / built.
- Docker containers provide a resource-efficient environment for applications.
- Spring Boot applications can run in Docker with minimal performance impact.
- The default executable Jar artifact of Spring Boot is ideal for deploying Spring
  Boot applications in Docker.
- No specific authentication setup required.
- Uses Java 8
- EXPOSE 8081
- ENV JAVA_HOME /usr/java/latest
- ENV PATH $PATH:$JAVA_HOME/bin
- Uses ObjectMapper for JSON data binding
- Uses ObjectMapper to read JSON files
- Jackson is one of the several available libraries for processing JSON.
- The above dependency works well in other Java projects, but unfortunately in a Spring
  Boot 1.3.x application, you may stumble upon this error.
- Logback is the default logger under Spring Boot — no additional dependencies needed.
- Logback is the default logging framework for Spring Boot.
- Log levels can be set via command line, environment variables, application.properties,
  and XML configuration.
- To enable log output to a file, set logging.file.name or logging.file.path.
- If both logging.file.name and logging.file.path are set, only logging.file.name
  is used.
- Uses default logging framework for Spring Boot
- Log levels can be set in multiple locations with a specific hierarchy
- For environments which need to use consolidated logging, it is common to use JSON
  log output.
- One limitation of Spring Boot Logback is that with springProfile and springProperty,
  setting auto-scan results in error.
- Logback supports configuration through XML and Groovy.
- Auto-scan can be enabled using the scan() method.
- RollingFile-Appender writes to a file and rolls over according to a time-based policy.
- Async-Appender runs in a separate thread to decouple logging overhead.
- Logback have stopped supporting logback.groovy
- In a Spring Boot application, you can put the Logback.xml file in the resources
  folder.
- Encoders were introduced in Logback version 0.9.19.
- Logback has removed support for layouts in FileAppender from version 0.9.19 onwards.
- By default, the root logger is associated with the console appender and have the
  DEBUG level.
- Configuring Spring Boot to use Log4J 2 is easy to do.
- 'Spring Boot 1.2.4.RELEASE contains a bug, issue #3550. When you define a log level
  through application.properties, the bug changes the parent logger level, and in
  worst case the root logger level. Although the bug was fixed in 1.2.6.RELEASE, I
  suggest using the 1.2.8.RELEASE if you want to stick with 1.2.x.'
- Spring Boot expects the log4j2-spring.xml configuration file to be on the classpath.
- It is a known bug. The configuration in log4j2-spring.xml will work as expected.
- Uses AsyncLogger for asynchronous logging with a rolling random access file appender.
- Requires Jackson data format and Jackson data bind for YAML support
- Uses YAML configuration format
- Requires additional Jackson JARs to parse YAML
- Uses YAML configuration for Log4J2
- Log4J 2 supports configuration through XML, JSON, and YAML
- Logging configuration can differ between development and production environments
- monitorInterval is set to 60 seconds for configuration changes
- The log path is set to logs and an archive path is specified
- Multiple XML configuration files are not supported out of the box by Log4J 2.
- Using properties file is one of the several options you have to configure Log4J
  2.
- Properties configuration cannot handle some advanced features, such as custom error
  handlers, time-based rolling policies, nested appenders, and special types of appenders,
  such as async appenders.
- Pagination can be handled on the client side, the server side, the database, or
  a mix of them.
- Log4J 2 is an open source logging package distributed under the Apache Software
  License.
- Log4J 2 allows you to define different levels of importance, such as ERROR, WARN,
  INFO, and DEBUG for log messages.
- Log4J 2 uses a console appender by default
- Messages of the lower levels (WARN, INFO, and DEBUG) are not sent to the destination
  by default
- Uses java.time package for time calculations
- Time may vary based on the machine's timezone settings
- Mockito allows creating mock objects of both interfaces and classes.
- XML Schema is a widely accepted standard that is not tied to a specific programming
  language.
- Generated classes are bundled into a JAR file, which is portable and can be shared
- Parameterized tests allow testing methods with different input values and expected
  results.
- All data point fields and methods must be declared as public and static.
- Theories not only makes your tests more expressive but you will see how your test
  data becomes more independent of the code you’re testing.
- Hamcrest matchers improve test readability.
- JUnit’s assertThat combined with Hamcrest matchers has much better functionality.
- Hamcrest matchers provide more readable assertions.
- Proper unit tests should fail for exactly one reason
- The order in which JUnit executes test methods is not guaranteed
- JUnit Test Suites are containers of test classes and give you finer control over
  what order your test classes are executed in.
- Uses H2 database as an embedded in-memory database
- Uses H2 database for in-memory storage.
- No authentication required
- 'Be really careful to access the correct h2 database and to change the JDBC URL
  by : jdbc:h2:mem:testdb'
- JUnit creates the AppTest class with a testConcatAndConvertString method decorated
  with the @Test annotation.
- Code must first be testable to benefit from automated testing.
- Each type of test has its role; a combination of unit, integration, and functional
  tests is needed.
- Uses floating point numbers for monetary calculations can lead to inaccuracies.
- Recommended to use BigDecimal for accurate monetary calculations.
- BigDecimal is the ideal choice when it comes to monetary calculations.
- Polymorphism is a very powerful concept in Object Oriented programming.
- It gives you tremendous flexibility in composing your code.
- Local variables cannot be accessed outside of the declaring method.
- Local variables must be initialized before using them for the first time.
- Some objects may return nulls in deeply nested fields
- Only OpenAI will be consistently reliable for structured outputs.
- Requires OpenAI API key to be set as an environment variable.
- Proper exception handling ensures that the code doesn’t break when an exception
  occurs.
- Exceptions should not be sent to clients.
- Global Exception Handling with @ControllerAdvice
- OpenAPI Specifications are written in JSON or YAML.
- Spring can auto scan, detect, and instantiate components from pre-defined project
  packages.
- The default auto scanning will work for your Spring Boot project most of the time.
- Uses annotations for configuration and management of beans.
- The method value of @RequestMapping defaults to an empty array — it does NOT default
  to the GET method.
- A production-quality implementation would likely use the DAO authentication provider.
- Credentials stored in the H2 database.
- Uses Jasypt for password encryption.
- Requires setup of UserDetailsService and DAO authentication provider.
- Allows all requests to the `/`, `/products`, `/product/show/*`, `/console/**` paths
- Secures all other paths of the application to require authentication
- Allows everyone to view a custom `/login` page specified by `loginPage()`
- Permits all to make logout calls
- Disables CSRF protection
- Disables X-Frame-Options in Spring Security for access to H2 database console
- The Thymeleaf 'extras' module is not a part of the Thymeleaf core but fully supported
  by the Thymeleaf team.
- Authorization is handled by sec:authorize for role-based access.
- ROLE_ADMIN can create products, while ROLE_USER has limited access.
- The part i am actually looking for is missing. Its the part that receives the post
  request on clicking the login button.
- Are you sure that you not logged in? I have completed this post now and if go to
  the “http://localhost:8080/product/edit/1” i getting redirected to the login page.
- The version of Spring Boot we’ll be using is 1.4.0.RELEASE.
- Whenever possible, I will try to use standaloneSetup() for my SpringMVC tests. Your
  tests will remain true unit tests and stay blazing fast!
- Spring Security is auto-configured to set up BASIC authentication.
- CRUD operations mapped to respective endpoints
- Controller does not directly interact with persistence layer
- The entire Spring framework 5.0 codebase runs on Java 8. Therefore, Java 8 is the
  minimum requirement to work on Spring Framework 5.0.
- At the API level, Spring Framework 5.0 has discontinued support for certain packages
  and libraries.
- Reactive Programming is a significant paradigm shift introduced in Spring Framework
  5.0.
- Reactive streams is not part of the Java API in Java 1.8 but is available as a separate
  jar.
- In Java 1.9, Reactive Streams become part of the official Java 9 API.
- Reactive Programming paradigm complements Functional Programming.
- Reactive Streams is an API specification for Reactive Programming in Java.
- Uses embedded Tomcat as the server for the application
- Uses Flyway for database migrations
- Uses Flyway for database migrations.
- Migration scripts are located in resources/db/migration.
- Demo project for One to Many relationship
- JWT is an open standard for securely transmitting information between parties.
- The service is protected through JWT.
- Ensure to include the token in the Authorization header for restricted endpoints.
- Microservices Gateways can tend to become Single Point of Failure.
- This documentation covers CRUD operations using JdbcTemplate in Spring.
- Requires setup of connected app in api
- Spring Framework 6 requires JDK 17+.
- Minimum of Tomcat 10 / Jetty 11 required for Jakarta EE 9 compatibility.
- Spring Framework 6 has just been released and the developer community is yet to
  respond.
- Ensure to upgrade to Tomcat 10, Jetty 11, or Undertow 2.2.14.
- Uses GenericFilterBean for filter configuration
- A Spring Boot application can have multiple beans implementing CommandLineRunner.
- These can be ordered with @Order annotation.
- Client service, employee-service, will use the URL to register with the Eureka server.
- Uses @Scheduled annotation to configure scheduling tasks
- The method should typically have a void return type and not expect any parameters
- Kafka topic is named sample_topic_spring_boot_with_kafka
- The value attribute in Line 8 tells Spring retry to act if the method throws CustomRetryException.
- Spring Boot CLI avoids lots of boilerplate code and Spring Configuration, as it
  automatically detects which dependency JARs are to be downloaded based on the classes
  and annotations used in code, thereby reducing development time.
- 'Only two endpoints are enabled by default: /health and /info.'
- To enable all built-in endpoints, set management.endpoints.web.exposure.include=*.
- A one-to-one mapping refers to the relationship between two entities/database tables
  A and B in which only one element/row of A may only be linked to one element/row
  of B, and vice versa.
- This method creates a Person and Address objects and sets their association. As
  a result, it saves both the objects and retrieves their IDs.
- BeanFactory is usually preferred where the resources are limited like mobile devices
  or applet-based applications. Thus, use an ApplicationContext unless you have a
  good reason for not doing so.
- Stored procedures allow reusability of SQL code.
- The procedure name is GET_TOTAL_BLOGS_BY_TITLE which takes an input parameter of
  VARCHAR type title_in.
- No authentication required for API calls.
- The application uses an embedded H2 database
- Prefill data into the database using an import.sql file
- Spring REST Docs uses Test-Driven approach to generate documentation.
- The application.yml file contains configuration properties of the application.
- Uses @PropertySource to load properties from multiple files.
- Uses @ConfigurationProperties to load properties
- The API Gateway Service routes client requests to the Message Service.
- Cache should be aware of updates or deletions to avoid returning old product information.
- Uses RabbitMQ for messaging
- Service includes Producer and Consumer
- RabbitMQ server must be running before sending messages.
- Messages are sent in JSON format.
- Uses HTTP Basic Authentication to secure REST endpoint
- When we want to specify a directory location then we must make sure that the value
  of spring.config.location ends with /
- It is also possible to specify additional locations to be searched before the default
  locations using the property key spring.config.additional-location.
- It recommended to externalize our configuration data and if there are many configuration
  properties, then we can group them into a simple Java class and use the @ConfigurationProperties
  annotation to structure our configuration and make it type-safe.
- The biggest challenge with externalizing configuration is on the part of ensuring
  that the deployed application runs with the correct configuration.
- Uses embedded H2 database
- Pagination is supported through @Query annotations in Spring Data JPA
- Configuring Spring Boot for Microsoft SQL Server
- Configuring Spring Boot for MariaDB
- Configuring Spring Boot for MongoDB
- How to Run Spring Boot in A Docker Container
- Setting an empty password is a security risk and not recommended in production environments.
- Uses MySQL with CircleCI for integration tests
- Docker Compose defines and runs multi-container Docker applications.
- It lets you create and start all services from a configuration file with a single
  docker-compose command.
- 'The ports part in the docker compose file is not necessary when using network_mode:
  host.'
- Replace the USERNAME, PASSWORD, and EMAIL with your credentials.
- You might want to automatically build your images, whenever you push changes to
  your VCS.
- The environment doesn’t have Maven.
- Automated Build is a powerful feature in Docker Hub to implement Continuous Integration/Continuous
  Deployment (CI/CD) pipeline into your codebase with very little effort.
- failFast set to false will allow starting the application without a consul server
- Uses Consul key-value store for configuration data.
- Docker image is built in layers
- Docker images are immutable
- Uses Spring Boot 2.3.0 or higher for layer configuration
- Docker is using cached layers since they did not change.
- By using Spring Boot Docker Layers, you are isolating what is changing in your Docker
  image builds.
- It's a fairly common practice to use a common base image.
- Controllers should always be Singleton. It was only for the purpose of demonstration
  that a controller was shown with request scope.
- The client side technology and server side technology are independent of each other.
- Best practices for dependency injection is to utilize interfaces, constructors,
  and final properties.
- Spring IoC container manages Spring beans
- The container also manages the life cycle of beans
- Uses init-method and destroy-method attributes for custom bean lifecycle methods.
- 'Author Name: Napoleon Hill'
- 'Book Name: Think and Grow Rich'
- 'Book Price: 33.99'
- 'Download URL: http://example.epub.com/books/thinkandgrowrich.epub'
- JMX is disabled by default.
- Spring Boot 2.2 supports Java 13.
- Caching supports various cache providers such as Ehcache, Hazelcast, and Redis.
- Ehcache can be configured with multiple memory areas in a hierarchical tier.
- The cache entry for radius > 5 will be cached for 30 seconds.
- Uses @CachePut annotation to create and cache student objects.
- Events are only fired for CREATED event.
- Reduce ttl to 5 seconds for testing.
- Multiple data sources are configured for security reasons.
- The member data source is marked as the primary data source.
- When dealing with just one datasource and Spring Boot, data source configuration
  is simple.
- If you need to connect to multiple datasources with Spring Boot, additional configuration
  is needed.
- No specific notes provided.
- Application connects to over 15 different data sources.
- Issues may arise during deployments if one database is down.
- Without an own error handler, a default error handler would be used, which punishes
  us with an exception for an ordinary client error like 404 Not Found or 400 Bad
  Request.
- Uses RestTemplate for HTTP operations
- Spring Aware Interfaces allow you to hook into the inner workings of the Spring
  Framework.
- Implementing these interfaces ties your application to the Spring framework.
- Uses GraphQL to fetch data about books and individual book details.
- Enhancement allows contract generation at the service level from a OpenAPI specification.
- To filter on service name, read system environment variable called scc.enabled.servicenames.
- The payor id (UUID) is mandatory.
- The payor name is mandatory.
- The address is mandatory.
- The primary contact name is mandatory.
- The primary contact phone is mandatory.
- The primary contact email is mandatory.
- The preferred language is mandatory.
- All fields except fundingAccountRoutingNumber, fundingAccountAccountNumber, fundingAccountAccountName,
  kycState, manualLockout, payeeGracePeriodProcessingEnabled, payeeGracePeriodDays,
  collectiveAlias, supportContact, dbaName, allowsLanguageChoice, reminderEmailsOptOut,
  and includesReports are mandatory.
- A challenge to deal with is how Spring Cloud Contract (SCC) generates its unit tests.
- SCC by default uses Rest Assured, which is supported by the Swagger Request Validator.
- Uses Explicit mode for Spring Cloud Contract configuration
- This API operation provides the account balance of the given payor id.
- Spring Cloud Contract is configured to use Explicit mode - ie web server on localhost.
- Requires a free API key from OMDB API
- Requires setup of API key in application.properties
- Response timeout set to 36000 milliseconds.
- No specific authentication required for the Spring Reactive WebClient.
- WebClient is thread safe
- 'WebClientResponseException: 411 Length Required. Added content_length as given
  below.'
- Contracts are a technique for defining API interactions.
- Open API 3.0 specifications can be written in JSON or YAML.
- Expected response status is 200 with application/json content type.
- The API is designed for financial transactions.
- Consumer Driven Contracts are used for API evolution.
- Response includes fraudCheckStatus and rejection.reason
- Response has a Content-Type of application/json;charset=UTF-8
- API development is never an easy task.
- Evolving APIs is even more complicated.
- Spring Cloud Contract allows you to write a contract for a service using a Groovy
  or YAML DSL.
- It is very helpful to see the actual SQL statements being generated by Hibernate.
- To activate the logging of the executed SQL statements with Spring Boot, set the
  log level of the org.hibernate.SQL category to DEBUG.
- If you wish to see the bind values, you can set the log level of org.hibernate.type.descriptor.sql
  to TRACE.
- If you are using Spring Data JPA with Hibernate as the persistence provider, add
  the following two lines in application.properties.
- To activate the logging of the executed SQL statements, set the log level of the
  org.hibernate.SQL category to DEBUG.
- To see the bind values, set the log level of org.hibernate.type.descriptor.sql to
  TRACE.
- CircleCI has a free tier which you can use for your CI builds.
- The free tier is limited to one running container at a time.
- Signing up for CircleCI is easy with a GitHub, BitBucket, or Google account.
- 'Default value: -Xmx1024m -XX:MaxPermSize=256m'
- The setting is particularly useful for tweaking memory settings.
- ID is autogenerated when adding a dog.
- Uses MongoDB Reactive Streams Java Driver for asynchronous processing
- Embedded MongoDB for development and testing
- Uses ReactiveMongoTemplate for reactive operations
- Setup method drops existing documents and re-creates the Product collection
- Embedded MongoDB runs in memory and is useful for development and testing.
- To connect to a different database, set the spring.data.mongodb.database property.
- Uses Spring Boot with Embedded MongoDB.
- This is an example Spring Boot Application connected to Mongo DB.
- Not necessarily running in Docker.
- By default the application connecting on localhost:27017.
- Spring Boot sets default database properties only when you don’t configure it.
- Use SQL Server Authentication to connect to the database.
- spring.jpa.hibernate.dialect is an unknown property
- Spring Boot sets default database properties only when you don’t.
- Spring Boot sets default database properties only when you don’t configure them.
- MongoDB uses JSON documents to store records.
- The @Document annotation specifies the collection in MongoDB.
- Default MongoDB host is localhost
- Default MongoDB port is 27017
- Default MongoDB database is test
- Dynamic schema allows insertion of data without a pre-defined schema.
- Spring Data MongoDB intelligently picks up the defaults for configuration.
- Default host is localhost and port is 27017.
- This is an unofficial Docker Cheatsheet. Use with caution.
- This is an unofficial Docker Cheatsheet. Use with caution!
- This is my unofficial Docker Cheatsheet. Use with caution!
- Use with caution!
- Spring Boot is the most exciting thing to happen to Spring since Java annotations.
- 'Cannot find template location: (please add some templates or check your Thymeleaf
  configuration)'
- Provides Thymeleaf objects needed to configure Thymeleaf for use with Spring MVC.
- Use the createdb command line tool to create a database.
- You will also need to define the PostgreSQL schema in the datasource url.
- Embedded JPA Entities are stored as additional columns in the underlying relational
  database table.
- The Spring Boot default Hibernate naming strategy does not support using more than
  one Embedded JPA Entity property in a parent JPA Entity.
- Non-unique column names for mapped properties of Embedded JPA Entities can cause
  Hibernate Mapping Exceptions.
- By overriding the default Spring Boot Hibernate naming strategy, you can reduce
  the annotation complexity of your JPA mappings.
- The Spring Boot default Hibernate naming strategy does not support multiple Embedded
  JPA Entity properties in a parent JPA Entity.
- To override the default Spring Boot Hibernate Naming Strategy, provide the full
  class name of the Hibernate Naming strategy in application.properties.
- Automatic restart feature will have a positive impact on your productivity in developing
  web applications.
- The developer tools module is ready for production use.
- Normally, it is recommended that you allow Spring to manage dependent objects itself
  through the use of dependency injection.
- If you find the need to access the Spring bean factory through the use of the BeanFactoryAware
  interface, you’re likely doing something incorrect.
- Not usually recommended that an object depend on its bean name, as this represents
  a potentially brittle dependence on external configuration.
- H2 database runs in Oracle compatibility mode.
- Oracle database should not create or update; it will validate against JPA mappings.
- To set up our H2 database properly, we need to set the ‘h2’ profile active.
- To have Spring Boot run Oracle, we just need to change the active profile from ‘h2’
  to ‘oracle’.
- Oracle Compatibility Mode
- Hibernate using the Oracle dialect
- Auto creation of the database on startup via a schema generation script.
- H2 can persist to disk with a simple change to the connect URL.
- Oracle JDBC drivers are not in public Maven repositories.
- Requires manual installation of JDBC driver.
- Oracle JDBC drivers are not in public Maven repositories due to legal restrictions.
- Oracle supports ANSI SQL with its own nuances and extensions.
- For automatic table generation in Oracle, set the ddl-auto property of Hibernate
  to 'create-drop'.
- If this was actually a production database, you do not tell Hibernate to use the
  create-drop option.
- Use spring.datasource.url= jdbc:mysql://localhost:3306/springbootdb
- Use spring.datasource.username=root
- Use spring.datasource.password=
- Use spring.jpa.hibernate.ddl-auto=create-drop
- Uses Spring framework for building applications
- You don’t need to specify the driver or the Hibernate dialect. These are detected
  automatically.
- Spring Boot will manage the JMS queue configuration automatically.
- Intentionally left an error in the Spring Integration configuration to demonstrate
  this error.
- The solution is easy enough to implement. We just need to update the Spring Integration
  channel adapter to use the Spring Bean jmsConnectionFactory instead of its default
  value of connectionFactory.
- Spring Boot automatically sets up an ActiveMQ broker.
- Uses an embedded ActiveMQ broker for development.
- Uses embedded ActiveMQ broker for integration tests
- Uses an embedded ActiveMQ broker for development
- Failed to load ApplicationContext
- Requires configuration for IBM’s MQSeries in production
- Spring Boot is used to configure the ActiveMQ broker
- The technology landscape is always evolving.
- Understanding HTTP is critical for web developers.
- By default, Spring Boot configures the Thymeleaf template engine to read template
  files from /resources/templates
- You as the developer just need to start making Thymeleaf templates and dropping
  them into /resources/templates
- Thymeleaf is a natural templating language. Meaning, unlike JSP, you can view the
  templates directly browser. No JSP used in this example.
- Spring Boot will make decisions on what to create automatically when certain things
  are found on the classpath.
- Access to the H2 database console at http://localhost:8080/console
- Allow all access to the url path /console/*.
- Disable CSRF (Cross-Site Request Forgery).
- Since the H2 database console runs inside a frame, you need to enable this in Spring
  Security.
- As of Spring Boot 1.3.0.M3, the H2 console can be auto-configured.
- You are developing a web app
- Spring Boot Dev Tools are enabled
- H2 is on the classpath
- Event Processed?? - true
- It is possible to write Spring Beans in Groovy.
- Free Intro to Spring Boot Online Course available
- Learn to use Spring Framework 6!
- Utilizes Spring Integration for asynchronous processing.
- By default, Spring Integration is providing a thread pool for our use.
- Profiles allow you to define Spring Beans and specify when they should be loaded
  into the context.
- Using default profiles, your application can be deployed into production without
  an active profile being set.
- No specific authentication required for accessing content
- Gateway allows request to be abstracted from the messaging layer.
- No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore,
  a default DefaultHeaderChannelRegistry will be created.
- No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel
  will be created.
- No bean named 'taskScheduler' has been explicitly defined. Therefore, a default
  ThreadPoolTaskScheduler will be created.
- Mock service is used for testing instead of production service
- Uses component-scan to load beans automatically from specified package
- Bean definitions are loaded from XML and annotations
- A common use for SpEL is in defining database settings.
- Uses Spring Integration for messaging
- Service activators are decoupled from the gateway
- Uses Spring Boot to bring up the Spring Context.
- Configuration is in an XML file imported via @ImportResource.
- The Spring community is gradually converting over to prefer the use of Java based
  configuration over XML based configuration.
- Uses XML configuration files for Spring Beans
- Uses Spring Boot application context to manage beans
- Component scanning is enabled for package 'guru.springframework'
- Uses Spring Boot for application setup
- XML bean definitions loaded from spring-config.xml
- Uses Spring Integration
- Demonstrates a very basic example of Spring Dependency Injection using the Spring
  Framework.
errors:
- '401: You are not authorized to view the resource'
- '403: Accessing the resource you were trying to reach is forbidden'
- '404: The resource you were trying to reach is not found'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- No specific error codes or messages mentioned.
- 'NoSuchElementException: No value present'
- 'ConnectionTimeoutException: Check connection settings and database availability'
- Compile time error if Lombok has not run before MapStruct.
- 'No suitable bean found for autowiring: Check the bean name or type.'
- 'Constructor argument type mismatch: Ensure correct argument types in constructor.'
- 'NoUniqueBeanDefinitionException: More than one bean is available for autowiring.'
- 'WARMUP_RUNS exceeded: Reduce the number of warmup runs.'
- 'BUILD SUCCESS: No tests run'
- 'Tests run: 0, Failures: 0, Errors: 0, Skipped: 0: Indicates that tests are not
  running under the current Maven version.'
- 'NumberFormatException: Thrown if the String does not contain a parsable int.'
- 'java.lang.NoSuchMethodError: com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;'
- 'java.lang.NoClassDefFoundError: Could not initialize class com.fasterxml.jackson.databind.SerializationConfig'
- 'NoSuchMethodError: com.fasterxml.jackson.annotation.JsonFormat$Value.empty()'
- 'NoClassDefFoundError: Could not initialize class com.fasterxml.jackson.databind.SerializationConfig'
- No specific error patterns provided.
- Common mistakes include mixing sync and async loggers.
- System.out redirection affects the whole application.
- 'Invalid email format: Check the provided email string against the regex.'
- 'AssertionError: Check assertion conditions.'
- The variable number might not have been initialized.
- 'SQLException: Handle database errors gracefully.'
- 'BlogAlreadyExistsException: Blog already exists'
- 'BlogNotFoundException: Blog not found'
- 'Exception: Data connectivity is lost'
- 'ServletRequestParameterException: Parameter conditions “id={10, 20}” not met for
  actual request parameters: id={10, 20}'
- Unfortunately the given configureGlobal does not work well.
- '401 Unauthorized: Full authentication is required to access this resource.'
- 'UserName or Password is Empty: Check that both fields are provided.'
- 'UserName or Password is Invalid: Verify the credentials.'
- 'Job execution failed: Check the scheduling configuration'
- 'Task not found: Ensure the task is properly annotated'
- 'CustomRetryException: Indicates the method failed after all retry attempts.'
- 'NullPointerException: Ensure that the Person and Address objects are correctly
  initialized'
- 'EntityNotFoundException: Verify that the correct ID is being used for retrieval'
- '401 Unauthorized: Check username and password.'
- '404 Not Found: Ensure the endpoint is correct.'
- '401 Unauthorized: Bad credentials'
- 'Connection refused: Check if MySQL service is running'
- 'Access denied for user ''root'': Check username and password'
- '401 Unauthorized: Check your username and password'
- 'IllegalArgumentException: Cannot find cache named ‘areaOfCircleCache’.'
- No specific errors provided.
- 404 Not Found
- 400 Bad Request
- '400 Bad Request: Check required fields and formats.'
- '404: Payor Id Not Found'
- '500: Server Error'
- '404 Not Found: Endpoint does not exist'
- '500 Internal Server Error: Response does not meet schema validation'
- '404 Not Found: Payor not found'
- '404 Not Found: The requested payor was not found'
- '500 Internal Server Error: Object has missing required properties'
- '401 Unauthorized: Check your API key'
- '404 Not Found: Movie not found'
- 'WebClientResponseException: 411 Length Required'
- 'status: 200'
- '400 Bad Request: Ensure the request body is correctly formed.'
- '401 Unauthorized: Check the OAuth credentials.'
- '200: created ok'
- '200: OK'
- '404: Not Found'
- No errors documented.
- Process 'Gradle Test Executor 1' finished with non-zero exit value 137
- 'MongoClient connection error: Check your MongoDB server status'
- 'Collection not found: Ensure the collection is created before accessing'
- No data type checking on product creation.
- 'com.microsoft.sqlserver.jdbc.SQLServerException: The TCP/IP connection to the host
  localhost, port 1433 has failed.'
- 'SQLServerException: The TCP/IP connection to the host localhost, port 1433 has
  failed.'
- Cannot open database 'springbootdb' requested by the login. The login failed.
- 'Database connection failed: Check database server status and credentials.'
- Cannot determine embedded database driver class for database type NONE
- 'org.hibernate.MappingException: Repeated column in mapping for entity: guru.springframework.domain.Customer
  column: address_line1 (should be mapped with insert="false" update="false")'
- 'BeanCreationException: Error creating bean with name ''helloController'': Injection
  of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException:
  Could not autowire method: public void guru.springframework.controllers.HelloController.setHelloWorldService(guru.springframework.services.HelloWorldService);
  nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException:
  No qualifying bean of type [guru.springframework.services.HelloWorldService] found
  for dependency: expected at least 1 bean which qualifies as autowire candidate for
  this dependency.'
- Duplicate primary keys due to incorrect sequence creation.
- 'Unique index or primary key violation: “PRIMARY_KEY_5 ON PUBLIC.CUSTOMER(ID) VALUES
  (100, 100)”'
- 'SQLException: Issue with connection to Oracle database.'
- 'Access denied for user ''@''localhost'' (using password: NO)'
- No bean named 'connectionFactory' is defined
- 'Failed to load ApplicationContext: No bean named ''connectionFactory'' is defined'
- 'NoSuchBeanDefinitionException: No bean named ''connectionFactory'' is defined'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OpenAIService
  - JwtGeneratorImpl
  - JwtGeneratorInterface
  - JwtFilter
  - Spring Security
  - Address
  - KycState
  - Language
  - app.api.key
  - BeanFactoryAware
  - BeanFactory
client:
  base_url: https://springframework.guru
  headers:
    Accept: application/json
source_metadata: null
