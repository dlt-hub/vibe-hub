resources:
- name: competencies_structure
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/competencies/structure
    method: GET
    params:
      parentObjectId: optional
      depth: optional
      pageSize: optional
      bookmark: optional
      forUserId: optional
- name: log_messages
  endpoint:
    path: /d2l/api/lp/(version)/logging/
    method: GET
    data_selector: Message
    params: {}
- name: grouped_log_messages
  endpoint:
    path: /d2l/api/lp/(version)/logging/grouped/
    method: GET
    data_selector: MessageGroupSummary
    params: {}
- name: identified_log_message
  endpoint:
    path: /d2l/api/lp/(version)/logging/(logMessageId)/
    method: GET
    data_selector: Message
    params: {}
- name: special_access
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/quizzes/{quizId}/specialaccess/
    method: GET
- name: quizzes
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/quizzes/
    method: GET
- name: quiz_attempts
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/quizzes/{quizId}/attempts/
    method: GET
- name: quiz_categories
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/quizzes/categories/
    method: GET
- name: questions
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/quizzes/{quizId}/questions/
    method: GET
- name: special_access_user
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/quizzes/{quizId}/specialaccess/{userId}
    method: GET
    data_selector: SpecialAccessUserData
- name: special_access
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/quizzes/{quizId}/specialaccess
    method: GET
    data_selector: SpecialAccessData
- name: quizzes
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/quizzes
    method: GET
    data_selector: QuizReadData
- name: quiz
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/quizzes/{quizId}
    method: GET
    data_selector: QuizReadData
- name: Quiz Categories
  endpoint:
    path: /d2l/api/le/{version}/({orgUnitId})/quizzes/categories/
    method: GET
    data_selector: ObjectListPage
- name: Quiz Category
  endpoint:
    path: /d2l/api/le/{version}/({orgUnitId})/quizzes/categories/({categoryId})
    method: GET
    data_selector: QuizCategoryReadData
- name: Create Quiz Category
  endpoint:
    path: /d2l/api/le/{version}/({orgUnitId})/quizzes/categories/
    method: POST
    data_selector: QuizCategoryReadData
- name: Update Quiz Category
  endpoint:
    path: /d2l/api/le/{version}/({orgUnitId})/quizzes/categories/({categoryId})
    method: PUT
    data_selector: QuizCategoryReadData
- name: Retrieve Quiz Questions
  endpoint:
    path: /d2l/api/le/{version}/({orgUnitId})/quizzes/({quizId})/questions/
    method: GET
    data_selector: ObjectListPage
- name: activity
  endpoint:
    path: /d2l/api/eP/{version}/activity/
    method: GET
    data_selector: Activity
    params: {}
- name: activity_filters
  endpoint:
    path: /d2l/api/eP/{version}/activity/filters/
    method: GET
    data_selector: preset filter
    params: {}
- name: my_activity
  endpoint:
    path: /d2l/api/eP/{version}/activity/my/
    method: GET
    data_selector: Activity
    params: {}
- name: shared_activity
  endpoint:
    path: /d2l/api/eP/{version}/activity/shared/
    method: GET
    data_selector: Activity
    params: {}
- name: newsfeed_activity
  endpoint:
    path: /d2l/api/eP/{version}/newsfeed/
    method: GET
    data_selector: Activity
    params: {}
- name: newsfeed_filters
  endpoint:
    path: /d2l/api/eP/{version}/newsfeed/filters/
    method: GET
    data_selector: preset filter
    params: {}
- name: dashboard_activity
  endpoint:
    path: /d2l/api/eP/{version}/dashboard/
    method: GET
    data_selector: Activity
    params: {}
- name: dashboard_filters
  endpoint:
    path: /d2l/api/eP/{version}/dashboard/filters/
    method: GET
    data_selector: preset filter
    params: {}
- name: share_targets
  endpoint:
    path: /d2l/api/eP/{version}/users/sharing/
    method: GET
    data_selector: ShareTarget
    params:
      version: 2.5+
- name: sharing_groups
  endpoint:
    path: /d2l/api/eP/{version}/sharing/groups/
    method: GET
    data_selector: ShareTarget
    params:
      version: 2.5+
- name: sharing_users
  endpoint:
    path: /d2l/api/eP/{version}/sharing/users/
    method: GET
    data_selector: ShareTarget
    params:
      version: 2.5+
- name: ep_object_shares
  endpoint:
    path: /d2l/api/eP/{version}/objects/shares/
    method: GET
    data_selector: Share
    params:
      version: 2.5+
- name: shared_ep_objects
  endpoint:
    path: /d2l/api/eP/{version}/objects/shared/
    method: GET
    data_selector: EpObject
    params:
      version: 2.5+
- name: ignored_users
  endpoint:
    path: /d2l/api/eP/{version}/ignoredusers/
    method: GET
    data_selector: UserId
    params:
      version: 2.5+
- name: object
  endpoint:
    path: /d2l/api/eP/{version}/object
    method: GET
    data_selector: null
    params:
      context: null
- name: object_content
  endpoint:
    path: /d2l/api/eP/{version}/object/content
    method: GET
    data_selector: null
    params:
      context: null
- name: object_thumbnail
  endpoint:
    path: /d2l/api/eP/{version}/object/thumbnail
    method: GET
    data_selector: null
    params:
      context: null
      size: null
- name: object_by_id
  endpoint:
    path: /d2l/api/eP/{version}/object/{objectId}
    method: GET
    data_selector: null
    params:
      c: null
- name: object_associations
  endpoint:
    path: /d2l/api/eP/{version}/object/{objectId}/associations
    method: GET
    data_selector: null
    params:
      type: null
- name: object_content_by_id
  endpoint:
    path: /d2l/api/eP/{version}/object/{objectId}/content
    method: GET
    data_selector: null
    params: {}
- name: my_objects
  endpoint:
    path: /d2l/api/eP/{version}/objects/my
    method: GET
    data_selector: null
    params:
      c: null
      q: null
      bookmark: null
      pagesize: null
- name: data_export_bds
  endpoint:
    path: /d2l/api/lp/{version}/dataExport/bds
    method: GET
    params:
      version: D2LVERSION
- name: data_export_bds_plugin
  endpoint:
    path: /d2l/api/lp/{version}/dataExport/bds/{pluginid}/{identifier}
    method: GET
    params:
      version: D2LVERSION
      pluginId: GUID
      identifier: string
- name: data_export_bds_list
  endpoint:
    path: /d2l/api/lp/{version}/dataExport/bds/list
    method: GET
    params:
      version: D2LVERSION
- name: data_export_bds_download
  endpoint:
    path: /d2l/api/lp/{version}/dataExport/bds/download/{pluginid}
    method: GET
    params:
      version: D2LVERSION
      pluginId: GUID
- name: dataExportList
  endpoint:
    path: /d2l/api/lp/(version)/dataExport/list
    method: GET
- name: dataExportJobs
  endpoint:
    path: /d2l/api/lp/(version)/dataExport/jobs
    method: GET
- name: dataExportJobDetails
  endpoint:
    path: /d2l/api/lp/(version)/dataExport/jobs/(exportJobId)
    method: GET
- name: dataExportDownload
  endpoint:
    path: /d2l/api/lp/(version)/dataExport/download/(exportJobId)
    method: GET
- name: datasetsBds
  endpoint:
    path: /d2l/api/lp/(version)/datasets/bds
    method: GET
- name: datasetsBdsExtracts
  endpoint:
    path: /d2l/api/lp/(version)/datasets/bds/(schemaId)/extracts
    method: GET
- name: datasetsBdsPluginsExtracts
  endpoint:
    path: /d2l/api/lp/(version)/datasets/bds/(schemaId)/plugins/(pluginId)/extracts
    method: GET
- name: datasetsBdsPluginsExtractsById
  endpoint:
    path: /d2l/api/lp/(version)/datasets/bds/(schemaId)/plugins/(pluginId)/extracts/(extractId)
    method: GET
- name: link_user
  endpoint:
    path: /d2l/api/gae/(version)/linkuser
    method: POST
- name: retrieve_alerts
  endpoint:
    path: /d2l/api/lp/(version)/alerts/user/(*userId*)
    method: GET
- name: retrieve_carrier_channels
  endpoint:
    path: /d2l/api/lp/(version)/notifications/instant/carriers/
    method: GET
- name: retrieve_user_notification_settings
  endpoint:
    path: /d2l/api/lp/(version)/notifications/instant/users/(*userId*)/settings
    method: GET
- name: subscribe_to_notifications
  endpoint:
    path: /d2l/api/lp/(version)/notifications/instant/carriers/(*carrierId*)/subscriptions/(*messageTypeId*)
    method: PUT
- name: myProfile
  endpoint:
    path: /d2l/api/lp/(version)/profile/myProfile
    method: GET
    data_selector: UserProfile
- name: myProfileImage
  endpoint:
    path: /d2l/api/lp/(version)/profile/myProfile/image
    method: GET
    data_selector: file stream
- name: profileImageByProfileId
  endpoint:
    path: /d2l/api/lp/(version)/profile/(*profileId*)/image
    method: GET
    data_selector: file stream
- name: profileImageByUserId
  endpoint:
    path: /d2l/api/lp/(version)/profile/user/(*userId*)/image
    method: GET
    data_selector: file stream
- name: roles
  endpoint:
    path: /d2l/api/lp/(version)/roles/
    method: GET
    data_selector: Role
- name: users
  endpoint:
    path: /d2l/api/lp/(version)/users/
    method: GET
- name: user_activation
  endpoint:
    path: /d2l/api/lp/(version)/users/(userId)/activation
    method: GET
- name: user_creation
  endpoint:
    path: /d2l/api/lp/(version)/users/
    method: POST
- name: user_update
  endpoint:
    path: /d2l/api/lp/(version)/users/(userId)
    method: PUT
- name: link_user
  endpoint:
    path: /d2l/api/gae/(version)/linkuser
    method: POST
- name: global_user_mapping_users
  endpoint:
    path: /d2l/api/lp/{version}/globalusermapping/users/{userid}
    method: DELETE
    data_selector: MapIdentifier GlobalUserMapping.MapIdentifier
    params:
      version: D2LVERSION
      userId: D2LID
- name: global_user_mapping_identifiers
  endpoint:
    path: /d2l/api/lp/{version}/globalusermapping/identifiers/{identifier}
    method: GET
    data_selector: UserId
    params:
      version: D2LVERSION
      identifier: D2LID
- name: user_relationships
  endpoint:
    path: /d2l/api/bfp/{version}/relationships/
    method: DELETE
    data_selector: ParentalRelationshipMapping
    params:
      version: D2LVERSION
- name: user_attributes
  endpoint:
    path: /d2l/api/lp/{version}/attributes/users/{userId}
    method: GET
    data_selector: UserAttributes
    params:
      version: D2LVERSION
      userId: D2LID
- name: delete_subscription
  endpoint:
    path: /d2l/api/lp/{version}/notifications/instant/carriers/{carrierId}/subscriptions/{messageTypeId}
    method: DELETE
    data_selector: status
    params: {}
- name: unsubscribe_notification
  endpoint:
    path: /d2l/api/lp/{version}/notifications/instant/carriers/{carrierId}/subscriptions/{messageTypeId}/users/{userId}
    method: DELETE
    data_selector: status
    params: {}
- name: retrieve_alerts
  endpoint:
    path: /d2l/api/lp/{version}/alerts/user/{userId}
    method: GET
    data_selector: alerts
    params: {}
- name: retrieve_carriers
  endpoint:
    path: /d2l/api/lp/{version}/notifications/instant/carriers
    method: GET
    data_selector: carriers
    params: {}
- name: retrieve_subscriptions
  endpoint:
    path: /d2l/api/lp/{version}/notifications/instant/carriers/{carrierId}/subscriptions
    method: GET
    data_selector: subscriptions
    params: {}
- name: retrieve_user_subscriptions
  endpoint:
    path: /d2l/api/lp/{version}/notifications/instant/carriers/{carrierId}/subscriptions/users/{userId}
    method: GET
    data_selector: subscriptions
    params: {}
- name: retrieve_user_settings
  endpoint:
    path: /d2l/api/lp/{version}/notifications/instant/users/{userId}/settings
    method: GET
    data_selector: settings
    params: {}
- name: subscribe_notification
  endpoint:
    path: /d2l/api/lp/{version}/notifications/instant/carriers/{carrierId}/subscriptions/{messageTypeId}
    method: PUT
    data_selector: status
    params: {}
- name: subscribe_user_notification
  endpoint:
    path: /d2l/api/lp/{version}/notifications/instant/carriers/{carrierId}/subscriptions/{messageTypeId}/users/{userId}
    method: PUT
    data_selector: status
    params: {}
- name: update_user_settings
  endpoint:
    path: /d2l/api/lp/{version}/notifications/instant/users/{userId}/settings
    method: PUT
    data_selector: status
    params: {}
- name: clear_user_password
  endpoint:
    path: /d2l/api/lp/{version}/users/{userId}/password
    method: DELETE
    data_selector: status
    params: {}
- name: send_password_reset
  endpoint:
    path: /d2l/api/lp/{version}/users/{userId}/password
    method: POST
    data_selector: status
    params: {}
- name: update_user_password
  endpoint:
    path: /d2l/api/lp/{version}/users/{userId}/password
    method: PUT
    data_selector: status
    params: {}
- name: LIS Roles
  endpoint:
    path: /d2l/api/lp/(version)/imsconfig/roles/
    method: GET
    data_selector: LIS Role
- name: Role Mappings
  endpoint:
    path: /d2l/api/lp/(version)/imsconfig/map/roles/
    method: GET
    data_selector: LIS Role Mapping
- name: Global User Mapping
  endpoint:
    path: /d2l/api/lp/(version)/globalusermapping/users/(userid)
    method: GET
    data_selector: MapIdentifier GlobalUserMapping.MapIdentifier
- name: User Attributes Schema
  endpoint:
    path: /d2l/api/lp/(version)/attributes/schemas/
    method: GET
    data_selector: UserAttributeDefinitions
- name: myProfile
  endpoint:
    path: /d2l/api/lp/(version)/profile/myProfile
    method: GET
    data_selector: UserProfile
    params:
      version: D2LVERSION
- name: profileImage
  endpoint:
    path: /d2l/api/lp/(version)/profile/myProfile/image
    method: GET
    data_selector: file stream
    params:
      version: D2LVERSION
- name: deleteProfileImage
  endpoint:
    path: /d2l/api/lp/(version)/profile/myProfile/image
    method: DELETE
    data_selector: null
    params:
      version: D2LVERSION
- name: updateProfileImage
  endpoint:
    path: /d2l/api/lp/(version)/profile/myProfile/image
    method: POST
    data_selector: null
    params:
      version: D2LVERSION
- name: export_package
  endpoint:
    path: /d2l/api/eP/(version)/export/(exportId)/package
    method: GET
    data_selector: results
- name: export_status
  endpoint:
    path: /d2l/api/eP/(version)/export/(exportId)/status
    method: GET
    data_selector: status
- name: new_export
  endpoint:
    path: /d2l/api/eP/(version)/export/new
    method: POST
    data_selector: exportTaskId
- name: new_export_all
  endpoint:
    path: /d2l/api/eP/(version)/export/new/all
    method: POST
    data_selector: exportTaskId
- name: import_status
  endpoint:
    path: /d2l/api/eP/(version)/import/(importId)/status
    method: GET
    data_selector: importStatus
- name: new_import
  endpoint:
    path: /d2l/api/eP/(version)/import/new
    method: POST
    data_selector: importTaskId
- name: new_import_with_details
  endpoint:
    path: /d2l/api/eP/(version)/import/newwithdetails
    method: POST
    data_selector: EpImportJobResponse
- name: delete_tool_provider
  endpoint:
    path: /d2l/api/le/{version}/lti/tp/{tpId}
    method: DELETE
    data_selector: null
    params:
      version: D2LVERSION
      tpId: D2LID
- name: get_all_tool_providers
  endpoint:
    path: /d2l/api/le/{version}/lti/tp/{orgUnitId}
    method: GET
    data_selector: LtiToolProviderData
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: get_tool_provider
  endpoint:
    path: /d2l/api/le/{version}/lti/tp/{orgUnitId}/{tpId}
    method: GET
    data_selector: LtiToolProviderData
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      tpId: D2LID
- name: register_tool_provider
  endpoint:
    path: /d2l/api/le/{version}/lti/tp/{orgUnitId}
    method: POST
    data_selector: LtiToolProviderData
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: update_tool_provider
  endpoint:
    path: /d2l/api/le/{version}/lti/tp/{tpId}
    method: PUT
    data_selector: LtiToolProviderData
    params:
      version: D2LVERSION
      tpId: D2LID
- name: delete_sharing_rules
  endpoint:
    path: /d2l/api/le/{version}/lti/tp/{orgUnitId}/{tpId}/sharing
    method: DELETE
    data_selector: null
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      tpId: D2LID
- name: get_sharing_rules
  endpoint:
    path: /d2l/api/le/{version}/lti/tp/{orgUnitId}/{tpId}/sharing
    method: GET
    data_selector: SharingRuleWithDescendantTypes
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      tpId: D2LID
- name: add_sharing_rule
  endpoint:
    path: /d2l/api/le/{version}/lti/tp/{orgUnitId}/{tpId}/sharing
    method: POST
    data_selector: CreateSharingRule
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      tpId: D2LID
- name: update_sharing_rule
  endpoint:
    path: /d2l/api/le/{version}/lti/tp/{orgUnitId}/{tpId}/sharing/{sharingOrgUnitId}
    method: PUT
    data_selector: CreateSharingRule
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      tpId: D2LID
      sharingOrgUnitId: D2LID
- name: lti_link
  endpoint:
    path: /d2l/api/le/{version}/lti/link/{orgUnitId}/
    method: GET
- name: lti_link_detail
  endpoint:
    path: /d2l/api/le/{version}/lti/link/{orgUnitId}/{ltiLinkId}/
    method: GET
- name: create_lti_link
  endpoint:
    path: /d2l/api/le/{version}/lti/link/{orgUnitId}
    method: POST
- name: delete_lti_link
  endpoint:
    path: /d2l/api/le/{version}/lti/link/{ltiLinkId}
    method: DELETE
- name: forum
  endpoint:
    path: /services/data/v1.56/forums
    method: GET
    data_selector: forums
- name: topic
  endpoint:
    path: /services/data/v1.56/topics
    method: GET
    data_selector: topics
- name: posts
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/discussions/forums/{forumId}/topics/{topicId}/posts/
    method: GET
    data_selector: posts
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      forumId: D2LID
      topicId: D2LID
- name: posts
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/discussions/forums/{forumId}/topics/{topicId}/posts/
    method: GET
    data_selector: posts
    params:
      pageSize: 1000
      pageNumber: 1
- name: discussions_forums
  endpoint:
    path: /d2l/api/le/{version}/({orgUnitId})/discussions/forums/
    method: GET
    data_selector: Forum
    params: {}
- name: discussions_forum
  endpoint:
    path: /d2l/api/le/{version}/({orgUnitId})/discussions/forums/({forumId})
    method: GET
    data_selector: Forum
    params: {}
- name: create_forum
  endpoint:
    path: /d2l/api/le/{version}/({orgUnitId})/discussions/forums/
    method: POST
    data_selector: Forum
    params: {}
- name: update_forum
  endpoint:
    path: /d2l/api/le/{version}/({orgUnitId})/discussions/forums/({forumId})
    method: PUT
    data_selector: Forum
    params: {}
- name: delete_forum
  endpoint:
    path: /d2l/api/le/{version}/({orgUnitId})/discussions/forums/({forumId})
    method: DELETE
    data_selector: Forum
    params: {}
- name: discussions_forum_access
  endpoint:
    path: /d2l/api/le/{version}/({orgUnitId})/discussions/forums/({forumId})/access/
    method: GET
    data_selector: UserAccess
    params: {}
- name: discussions_forum_topics
  endpoint:
    path: /d2l/api/le/{version}/({orgUnitId})/discussions/forums/({forumId})/topics/
    method: GET
    data_selector: Topic
    params: {}
- name: create_topic
  endpoint:
    path: /d2l/api/le/{version}/({orgUnitId})/discussions/forums/({forumId})/topics/
    method: POST
    data_selector: Topic
    params: {}
- name: update_topic
  endpoint:
    path: /d2l/api/le/{version}/({orgUnitId})/discussions/forums/({forumId})/topics/({topicId})
    method: PUT
    data_selector: Topic
    params: {}
- name: delete_topic
  endpoint:
    path: /d2l/api/le/{version}/({orgUnitId})/discussions/forums/({forumId})/topics/({topicId})
    method: DELETE
    data_selector: Topic
    params: {}
- name: delete_forum
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/discussions/forums/(forumId)
    method: DELETE
    params: {}
- name: list_forums
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/discussions/forums/
    method: GET
    params: {}
- name: retrieve_forum
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/discussions/forums/(forumId)
    method: GET
    params: {}
- name: create_forum
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/discussions/forums/
    method: POST
    params:
      ForumData: Discussions.ForumData
- name: update_forum
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/discussions/forums/(forumId)
    method: PUT
    params:
      ForumData: Discussions.ForumData
- name: forum_access
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/discussions/forums/(forumId)/access/
    method: GET
    params: {}
- name: collection
  endpoint:
    path: /d2l/api/eP/(version)/collection/(objectId)
    method: GET
    data_selector: Collection
    params:
      version: D2LVERSION
      objectId: D2LID
- name: collection_contents
  endpoint:
    path: /d2l/api/eP/(version)/collection/(objectId)/contents/
    method: GET
    data_selector: Collection
    params:
      version: D2LVERSION
      objectId: D2LID
- name: new_collection
  endpoint:
    path: /d2l/api/eP/(version)/collections/new
    method: POST
    data_selector: Collection
    params:
      version: D2LVERSION
- name: update_collection
  endpoint:
    path: /d2l/api/eP/(version)/collection/(objectId)
    method: POST
    data_selector: Collection
    params:
      version: D2LVERSION
      objectId: D2LID
- name: add_to_collection
  endpoint:
    path: /d2l/api/eP/(version)/collection/(collectionId)/add/(objectId)
    method: POST
    data_selector: Collection
    params:
      version: D2LVERSION
      collectionId: D2LID
      objectId: D2LID
- name: remove_from_collection
  endpoint:
    path: /d2l/api/eP/(version)/collection/(collectionId)/remove/(objectId)
    method: POST
    data_selector: Collection
    params:
      version: D2LVERSION
      collectionId: D2LID
      objectId: D2LID
- name: survey_attempts
  endpoint:
    path: /d2l/api/le/(*version*)/(*orgUnitId*)/surveys/(*surveyId*)/attempts/
    method: GET
    data_selector: SurveyAttemptData
- name: survey_categories
  endpoint:
    path: /d2l/api/le/(*version*)/(*orgUnitId*)/surveys/categories/
    method: GET
    data_selector: SurveyCategoryReadData
- name: survey_questions
  endpoint:
    path: /d2l/api/le/(*version*)/(*orgUnitId*)/surveys/(*surveyId*)/questions/
    method: GET
    data_selector: QuestionData
- name: special_access
  endpoint:
    path: /d2l/api/le/(*version*)/(*orgUnitId*)/surveys/(*surveyId*)/specialaccess/
    method: GET
    data_selector: SpecialAccessUserData
- name: survey_read
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/surveys/
    method: GET
    data_selector: SurveyReadData
- name: survey_attempt
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/surveys/(surveyId)/attempts/
    method: GET
    data_selector: SurveyAttemptData
- name: survey_category
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/surveys/categories/
    method: GET
    data_selector: SurveyCategoryReadData
- name: LRWSBaseResult
  endpoint:
    path: /base/result
    method: GET
    data_selector: ExecutionStatus
    params: {}
- name: LRWSObjectLink
  endpoint:
    path: /object/link
    method: GET
    data_selector: ExecutionStatus
    params: {}
- name: LRWSObjectProperties
  endpoint:
    path: /object/properties
    method: GET
    data_selector: ExecutionStatus
    params: {}
- name: LRWSPublishResult
  endpoint:
    path: /publish/result
    method: GET
    data_selector: ExecutionStatus
    params: {}
- name: LRWSSearchResult
  endpoint:
    path: /search/result
    method: GET
    data_selector: ExecutionStatus
    params: {}
- name: repository_list_org_unit_trusts
  endpoint:
    path: /d2l/api/lr/(*version*)/repository/(*repositoryId*)/listorgUnittrusts/
    method: GET
    data_selector: LRWSTrustCollection
    params:
      version: D2LVERSION
      repositoryId: D2LID
- name: repositories_all
  endpoint:
    path: /d2l/api/lr/(*version*)/repositories/all/
    method: GET
    data_selector: LRWSRepositoryCollection
    params:
      version: D2LVERSION
- name: repositories_type
  endpoint:
    path: /d2l/api/lr/(*version*)/repositories/(*type*)/
    method: GET
    data_selector: LRWSRepositoryCollection
    params:
      version: D2LVERSION
      type: LR_REPOSITORY_T name
      orgUnitId: D2LID
      trustParams: CSV
- name: search
  endpoint:
    path: /d2l/api/lr/{version}/objects/search/
    method: GET
    params:
      query: ''
      offset: 0
      count: 200
      repositories: ''
- name: download_latest
  endpoint:
    path: /d2l/api/lr/{version}/objects/{objectId}/download/
    method: GET
- name: download_file_latest
  endpoint:
    path: /d2l/api/lr/{version}/objects/{objectId}/downloadfile/
    method: GET
- name: link_latest
  endpoint:
    path: /d2l/api/lr/{version}/objects/{objectId}/link/
    method: GET
- name: properties_latest
  endpoint:
    path: /d2l/api/lr/{version}/objects/{objectId}/properties/
    method: GET
- name: download_version
  endpoint:
    path: /d2l/api/lr/{version}/objects/{objectId}/{objectVersion}/download/
    method: GET
- name: download_file_version
  endpoint:
    path: /d2l/api/lr/{version}/objects/{objectId}/{objectVersion}/downloadfile/
    method: GET
- name: link_version
  endpoint:
    path: /d2l/api/lr/{version}/objects/{objectId}/{objectVersion}/link/
    method: GET
- name: metadata_version
  endpoint:
    path: /d2l/api/lr/{version}/objects/{objectId}/{objectVersion}/metadata/
    method: GET
- name: properties_version
  endpoint:
    path: /d2l/api/lr/{version}/objects/{objectId}/{objectVersion}/properties/
    method: GET
- name: delete_all_versions
  endpoint:
    path: /d2l/api/lr/{version}/objects/{objectId}/delete/
    method: POST
- name: publish_scorm
  endpoint:
    path: /d2l/api/lr/{version}/objects/{objectId}/
    method: POST
- name: update_properties_latest
  endpoint:
    path: /d2l/api/lr/{version}/objects/{objectId}/properties/
    method: POST
- name: update_properties_version
  endpoint:
    path: /d2l/api/lr/{version}/objects/{objectId}/{objectVersion}/properties/
    method: POST
- name: upload
  endpoint:
    path: /d2l/api/lr/{version}/{repositoryId}/upload
    method: POST
- name: upload_publish
  endpoint:
    path: /d2l/api/lr/{version}/{repositoryId}/upload/publish
    method: POST
- name: publish_new_object
  endpoint:
    path: /d2l/api/lr/{version}/objects/
    method: PUT
- name: publish_overwrite_object
  endpoint:
    path: /d2l/api/lr/{version}/{repositoryId}/upload/publish/{objectId}
    method: PUT
- name: checklist
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/checklists/
    method: GET
    data_selector: ObjectListPage
    params: {}
- name: checklist_category
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/checklists/{checklistId}/categories/
    method: GET
    data_selector: ObjectListPage
    params: {}
- name: checklist_item
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/checklists/{checklistId}/items/
    method: GET
    data_selector: ObjectListPage
    params: {}
- name: orgunit_associations
  endpoint:
    path: /d2l/api/bas/{version}/orgunits/{orgUnitId}/associations/
    method: GET
    data_selector: Associations
- name: awards
  endpoint:
    path: /d2l/api/bas/{version}/awards/
    method: GET
    data_selector: Award
- name: library_icons
  endpoint:
    path: /d2l/api/bas/(version)/library/icons/
    method: GET
    data_selector: ObjectListPage
    params:
      limit: 100
      offset: 0
- name: library_templates
  endpoint:
    path: /d2l/api/bas/(version)/library/templates/
    method: GET
    data_selector: ObjectListPage
    params:
      limit: 100
      offset: 0
- name: awards
  endpoint:
    path: /d2l/api/bas/(version)/awards/
    method: GET
    data_selector: ObjectListPage
    params:
      limit: 100
      offset: 0
- name: associations
  endpoint:
    path: /d2l/api/bas/(version)/orgunits/(orgUnitId)/associations/
    method: GET
    data_selector: ObjectListPage
    params:
      limit: 100
      offset: 0
- name: library_icons
  endpoint:
    path: /d2l/api/bas/{version}/library/icons/
    method: GET
    data_selector: ObjectListPage
    params: {}
- name: library_templates
  endpoint:
    path: /d2l/api/bas/{version}/library/templates/
    method: GET
    data_selector: ObjectListPage
    params: {}
- name: classlist
  endpoint:
    path: /d2l/api/bas/(version)/orgunits/(orgUnitId)/classlist/
    method: GET
    data_selector: ObjectListPage
- name: user_awards
  endpoint:
    path: /d2l/api/bas/(version)/issued/users/(userId)/
    method: GET
    data_selector: ObjectListPage
- name: revocable_awards
  endpoint:
    path: /d2l/api/bas/(version)/orgunits/(orgUnitId)/revocableawards/
    method: GET
    data_selector: ObjectListPage
- name: Learning Platform
  endpoint:
    path: /lp
    method: GET
    data_selector: ''
    params: {}
- name: Learning Environment
  endpoint:
    path: /le
    method: GET
    data_selector: ''
    params: {}
- name: Learning Repository
  endpoint:
    path: /lr
    method: GET
    data_selector: ''
    params: {}
- name: ePortfolio
  endpoint:
    path: /ep
    method: GET
    data_selector: ''
    params: {}
- name: Awards Service
  endpoint:
    path: /bas
    method: GET
    data_selector: ''
    params: {}
- name: Brightspace For Parents
  endpoint:
    path: /bfp
    method: GET
    data_selector: ''
    params: {}
- name: D2L Web Services (SOAP)
  endpoint:
    path: /d2lws
    method: GET
    data_selector: ''
    params: {}
- name: Learning Platform
  endpoint:
    path: /api/v1/learning-platform
    method: GET
    data_selector: records
- name: Learning Environment
  endpoint:
    path: /api/v1/learning-environment
    method: GET
    data_selector: records
- name: Learning Repository
  endpoint:
    path: /api/v1/learning-repository
    method: GET
    data_selector: records
- name: custom_widget_data
  endpoint:
    path: /d2l/api/lp/(*version*)/(*orgUnitId*)/widgetdata/(*customWidgetId*)
    method: GET
    data_selector: WidgetData
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      customWidgetId: D2LID
- name: local_authentication_security_overrides
  endpoint:
    path: /d2l/api/lp/(*version*)/localauthenticationsecurity/overrides/
    method: GET
    data_selector: LASOverrideData
    params:
      version: D2LVERSION
- name: widget_data
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/widgetdata/{customWidgetId}
    method: GET
    data_selector: WidgetData
- name: my_widget_data
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/widgetdata/{customWidgetId}/mydata
    method: GET
    data_selector: WidgetData
- name: user_widget_data
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/widgetdata/{customWidgetId}/{userId}
    method: GET
    data_selector: WidgetData
- name: update_widget_data
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/widgetdata/{customWidgetId}
    method: PUT
    data_selector: WidgetData
- name: update_my_widget_data
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/widgetdata/{customWidgetId}/mydata
    method: PUT
    data_selector: WidgetData
- name: update_user_widget_data
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/widgetdata/{customWidgetId}/{userId}
    method: PUT
    data_selector: WidgetData
- name: local_auth_overrides
  endpoint:
    path: /d2l/api/lp/{version}/localauthenticationsecurity/overrides/
    method: GET
    data_selector: LASOverrideData
- name: subscriptions_objects
  endpoint:
    path: /d2l/api/eP/(version)/subscriptions/objects/
    method: GET
    data_selector: EP object IDs
    params:
      version: D2LVERSION
- name: subscriptions_users
  endpoint:
    path: /d2l/api/eP/(version)/subscriptions/users/
    method: GET
    data_selector: User IDs
    params:
      version: D2LVERSION
- name: delete_config_variable_resolver
  endpoint:
    path: /d2l/api/lp/{version}/configVariables/{variableId}/resolver
    method: DELETE
    params: {}
- name: get_config_variable_resolver
  endpoint:
    path: /d2l/api/lp/{version}/configVariables/{variableId}/resolver
    method: GET
    params: {}
- name: put_config_variable_resolver
  endpoint:
    path: /d2l/api/lp/{version}/configVariables/{variableId}/resolver
    method: PUT
    params: {}
- name: config_variable_definitions
  endpoint:
    path: /d2l/api/lp/{version}/configVariables/definitions/
    method: GET
    data_selector: Definition
- name: config_variable_values
  endpoint:
    path: /d2l/api/lp/{version}/configVariables/{variableId}/values
    method: GET
    data_selector: Values
- name: config_variable_org_value
  endpoint:
    path: /d2l/api/lp/{version}/configVariables/{variableId}/values/org
    method: GET
    data_selector: OrgValue
- name: config_variable_system_value
  endpoint:
    path: /d2l/api/lp/{version}/configVariables/{variableId}/values/system
    method: GET
    data_selector: SystemValue
- name: config_variable_org_unit_values
  endpoint:
    path: /d2l/api/lp/{version}/configVariables/{variableId}/values/orgUnits/
    method: GET
    data_selector: OrgUnitValue
- name: config_variable_role_values
  endpoint:
    path: /d2l/api/lp/{version}/configVariables/{variableId}/values/roles/
    method: GET
    data_selector: RoleValue
- name: delete_user_demographics
  endpoint:
    path: /d2l/api/lp/(version)/demographics/users/(userId)
    method: DELETE
    data_selector: null
    params:
      version: D2LVERSION
      userId: D2LID
      entryIds: CSV
- name: get_user_demographics
  endpoint:
    path: /d2l/api/lp/(version)/demographics/users/(userId)
    method: GET
    data_selector: null
    params:
      version: D2LVERSION
      userId: D2LID
- name: get_all_user_demographics
  endpoint:
    path: /d2l/api/lp/(version)/demographics/users
    method: GET
    data_selector: null
    params:
      version: D2LVERSION
- name: get_demographics_fields
  endpoint:
    path: /d2l/api/lp/(version)/demographics/fields
    method: GET
    data_selector: null
    params:
      version: D2LVERSION
- name: get_demographics_data_types
  endpoint:
    path: /d2l/api/lp/(version)/demographics/dataTypes
    method: GET
    data_selector: null
    params:
      version: D2LVERSION
- name: AssociatedEntity
  endpoint:
    path: Calendar.AssociatedEntity
    method: GET
- name: EventData
  endpoint:
    path: Calendar.EventData
    method: POST
- name: EventDataInfo
  endpoint:
    path: Calendar.EventDataInfo
    method: GET
- name: RecurrenceInfo
  endpoint:
    path: Calendar.RecurrenceInfo
    method: POST
- name: VisibilityInfo
  endpoint:
    path: Calendar.VisibilityInfo
    method: GET
- name: calendar_event
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/calendar/event/{eventId}
    method: GET
    data_selector: EventDataInfo
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      eventId: D2LID
- name: user_calendar_events
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/calendar/events/myEvents/
    method: GET
    data_selector: EventDataInfo
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: create_event
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/calendar/event/
    method: POST
    data_selector: EventDataInfo
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: update_event
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/calendar/event/{eventId}
    method: PUT
    data_selector: EventDataInfo
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      eventId: D2LID
- name: remove_event
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/calendar/event/{eventId}
    method: DELETE
    data_selector: EventDataInfo
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      eventId: D2LID
- name: grade_object
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/grades/schemes
    method: GET
    data_selector: GradeScheme
    params: {}
- name: grade_scheme
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/grades/schemes/(gradeSchemeId)
    method: GET
    data_selector: GradeScheme
    params: {}
- name: grade_values_bulk
  endpoint:
    path: /d2l/api/le/(version)/grades/values/(userId)
    method: GET
    data_selector: grade values
    params: {}
- name: final_grade_values
  endpoint:
    path: /d2l/api/le/(version)/grades/final/values/myGradeValues/
    method: GET
    data_selector: final grade values
    params: {}
- name: final_grade_value
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/grades/final/values/(*userId)
    method: GET
    data_selector: final grade value
    params: {}
- name: bulk_grade_values
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/grades/values/
    method: GET
    data_selector: grade values
    params: {}
- name: course_completion
  endpoint:
    path: /d2l/api/le/(*version*)/(*orgUnitId*)/grades/courseCompletion/
    method: GET
    data_selector: CourseCompletion
    params: {}
- name: grade_statistics
  endpoint:
    path: /d2l/api/le/(*version*)/(*orgUnitId*)/grades/(*gradeObjectId*)/statistics
    method: GET
    data_selector: GradeStatisticsInfo
    params: {}
- name: grade_objects
  endpoint:
    path: /d2l/api/le/(*version*)/(*orgUnitId*)/grades/
    method: GET
    data_selector: GradeObject
    params: {}
- name: grade_categories
  endpoint:
    path: /d2l/api/le/(*version*)/(*orgUnitId*)/grades/categories/
    method: GET
    data_selector: GradeObjectCategory
    params: {}
- name: grade_schemes
  endpoint:
    path: /d2l/api/le/(*version*)/(*orgUnitId*)/grades/schemes/
    method: GET
    data_selector: GradeScheme
    params: {}
- name: grade_values
  endpoint:
    path: /grades/values/(*userId*)
    method: GET
    data_selector: grade values
- name: final_grade_values
  endpoint:
    path: /grades/final/values/myGradeValues/
    method: GET
    data_selector: final grade values
- name: bulk_grade_values
  endpoint:
    path: /grades/values/
    method: GET
    data_selector: bulk grade values
- name: course_completion
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/grades/courseCompletion/
    method: GET
    data_selector: CourseCompletion
    params: {}
- name: grade_statistics
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/grades/{gradeObjectId}/statistics
    method: GET
    data_selector: GradeStatisticsInfo
    params: {}
- name: grade_setup
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/grades/setup/
    method: GET
    data_selector: GradeSetupInfo
    params: {}
- name: grade_exemptions
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/grades/{gradeObjectId}/exemptions/
    method: GET
    data_selector: User
    params: {}
- name: feedback
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/dropbox/folders/(folderId)/feedback/(entityType)/(entityId)
    method: GET
    data_selector: DropboxFeedbackOut
    params: {}
- name: remove_feedback_attachment
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/dropbox/folders/(folderId)/feedback/(entityType)/(entityId)/attachments/(fileId)
    method: DELETE
    data_selector: ''
    params: {}
- name: retrieve_feedback_attachment
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/dropbox/folders/(folderId)/feedback/(entityType)/(entityId)/attachments/(fileId)
    method: GET
    data_selector: ''
    params: {}
- name: retrieve_link_attachment
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/dropbox/folders/(folderId)/feedback/(entityType)/(entityId)/links/(linkId)
    method: GET
    data_selector: ''
    params: {}
- name: post_feedback
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/dropbox/folders/(folderId)/feedback/(entityType)/(entityId)
    method: POST
    data_selector: ''
    params: {}
- name: attach_feedback_file
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/dropbox/folders/(folderId)/feedback/(entityType)/(entityId)/attach
    method: POST
    data_selector: ''
    params: {}
- name: initiate_resumable_upload
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/dropbox/folders/(folderId)/feedback/(entityType)/(entityId)/upload
    method: POST
    data_selector: ''
    params: {}
- name: dropbox_folder
  endpoint:
    path: /d2l/api/le/(version)/(*orgUnitId*)/dropbox/folders/
    method: GET
    data_selector: DropboxFolder
    params: {}
- name: dropbox_category
  endpoint:
    path: /d2l/api/le/(version)/(*orgUnitId*)/dropbox/categories/
    method: GET
    data_selector: DropboxCategory
    params: {}
- name: dropbox_special_access
  endpoint:
    path: /d2l/api/le/(version)/(*orgUnitId*)/dropbox/folders/(*folderId*)/access/
    method: GET
    data_selector: UserAccess
    params: {}
- name: entity_completion
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/entities/{entityId}/completion
    method: PUT
    data_selector: EntityCompletionDate
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      folderId: D2LID
      entityId: D2LID
- name: folder_category
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/categories
    method: GET
    data_selector: DropboxCategory
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: special_access
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/specialaccess
    method: GET
    data_selector: SpecialAccessUserData
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      folderId: D2LID
- name: submissions
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/submissions/
    method: GET
    data_selector: EntityDropbox
    params: {}
- name: paged_submissions
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/submissions/paged/
    method: GET
    data_selector: object list page
    params: {}
- name: submission_files
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/submissions/{submissionId}/files/{fileId}
    method: GET
    data_selector: file stream
    params: {}
- name: user_download
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/submissions/{userId}/download
    method: GET
    data_selector: file stream
    params: {}
- name: group_download
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/group-submissions/{groupId}/download
    method: GET
    data_selector: file stream
    params: {}
- name: group_submission
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/submissions/group/{groupId}
    method: POST
    data_selector: submission accepted
    params: {}
- name: my_submissions
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/submissions/mysubmissions/
    method: GET
    data_selector: EntityDropbox
    params: {}
- name: post_my_submission
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/submissions/mysubmissions/
    method: POST
    data_selector: submission accepted
    params: {}
- name: mark_as_read
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/submissions/{submissionId}/files/{fileId}/markAsRead
    method: POST
    data_selector: action successful
    params: {}
- name: remove_attachment
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/feedback/{entityType}/{entityId}/attachments/{fileId}
    method: DELETE
    data_selector: action succeeded
    params: {}
- name: retrieve_feedback
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/feedback/{entityType}/{entityId}
    method: GET
    data_selector: DropboxFeedbackOut
    params: {}
- name: retrieve_attachment
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/feedback/{entityType}/{entityId}/attachments/{fileId}
    method: GET
    data_selector: file stream
    params: {}
- name: retrieve_link
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/feedback/{entityType}/{entityId}/links/{linkId}
    method: GET
    data_selector: file stream
    params: {}
- name: post_feedback
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/feedback/{entityType}/{entityId}
    method: POST
    data_selector: action succeeded
    params: {}
- name: attach_file
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/feedback/{entityType}/{entityId}/attach
    method: POST
    data_selector: action succeeded
    params: {}
- name: initiate_upload
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/dropbox/folders/{folderId}/feedback/{entityType}/{entityId}/upload
    method: POST
    data_selector: action succeeded
    params: {}
- name: capabilities
  endpoint:
    path: /permissions/tools/(*toolId*)/capabilities/
    method: GET
    data_selector: Capability
    params:
      version: D2LVERSION
- name: claims
  endpoint:
    path: /permissions/tools/(*toolId*)/claims/
    method: GET
    data_selector: ClaimGrant
    params:
      version: D2LVERSION
- name: allowed_claims
  endpoint:
    path: /permissions/tools/(*toolId*)/claims/allowed/
    method: GET
    data_selector: ClaimGrant
    params:
      version: D2LVERSION
- name: claim_metadata
  endpoint:
    path: /permissions/tools/(*toolId*)/claims/metadata/
    method: GET
    data_selector: ClaimMetaData
    params:
      version: D2LVERSION
- name: invites
  endpoint:
    path: /d2l/api/eP/(version)/invites/
    method: GET
    data_selector: Invite
    params:
      unreadOnly: 'false'
- name: delete_invites
  endpoint:
    path: /d2l/api/eP/(version)/invites/delete
    method: POST
    data_selector: ''
    params:
      ids: ''
- name: new_invite
  endpoint:
    path: /d2l/api/eP/(version)/invites/new
    method: POST
    data_selector: ''
    params: {}
- name: status_invites
  endpoint:
    path: /d2l/api/eP/(version)/invites/status
    method: POST
    data_selector: ''
    params:
      ids: ''
      read: 'false'
- name: registration
  endpoint:
    path: /d2l/api/le/{version}/ltiadvantage/registration/
    method: GET
    data_selector: registrations
    params:
      isEnabled: true
- name: deployment
  endpoint:
    path: /d2l/api/le/{version}/ltiadvantage/deployment/
    method: GET
    data_selector: deployments
    params:
      clientId: true
      isEnabled: true
      isAvailable: true
- name: links_organization
  endpoint:
    path: /d2l/api/le/(version)/ltiadvantage/links/organization/
    method: GET
- name: links_orgunit
  endpoint:
    path: /d2l/api/le/(version)/ltiadvantage/links/orgunit/(*orgUnitId*)/
    method: GET
- name: migration_jobs
  endpoint:
    path: /d2l/api/le/(version)/ltiadvantage/migration/jobs/
    method: GET
- name: links_orgunit
  endpoint:
    path: /d2l/api/le/(version)/ltiadvantage/links/orgunit/
    method: GET
    data_selector: Links
- name: links_organization
  endpoint:
    path: /d2l/api/le/(version)/ltiadvantage/links/organization/
    method: GET
    data_selector: Links
- name: migration_jobs
  endpoint:
    path: /d2l/api/le/(version)/ltiadvantage/migration/jobs/
    method: GET
    data_selector: migration jobs
- name: migration_job_status
  endpoint:
    path: /d2l/api/le/(version)/ltiadvantage/migration/jobs/(jobId)
    method: GET
    data_selector: MigrationJobStatus
- name: tool_registration
  endpoint:
    path: /d2l/api/le/(version)/ltiadvantage/registration
    method: GET
    data_selector: registrations
    params: {}
- name: tool_deployment
  endpoint:
    path: /d2l/api/le/(version)/ltiadvantage/deployment
    method: GET
    data_selector: deployments
    params: {}
- name: course_offering
  endpoint:
    path: /d2l/api/le/{version}/import/{orgUnitId}/copy/
    method: POST
    data_selector: CreateCopyJobRequest
- name: course_import
  endpoint:
    path: /d2l/api/le/{version}/import/{orgUnitId}/imports/
    method: POST
    data_selector: ImportCourseLog
- name: courses
  endpoint:
    path: /d2l/api/lp/{version}/courses/{orgUnitId}
    method: GET
    data_selector: CourseOffering
    params: {}
- name: course_templates
  endpoint:
    path: /d2l/api/lp/{version}/coursetemplates/{orgUnitId}
    method: GET
    data_selector: CourseTemplate
    params: {}
- name: manage_files
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/managefiles
    method: GET
    data_selector: FileSystemObject
    params: {}
- name: copy_course_job_status
  endpoint:
    path: /d2l/api/le/(version)/import/(orgUnitId)/copy/(jobToken)
    method: GET
    data_selector: GetCopyJobResponse
    params: {}
- name: queue_course_copy_job
  endpoint:
    path: /d2l/api/le/(version)/import/(orgUnitId)/copy/
    method: POST
    data_selector: CreateCopyJobResponse
    params: {}
- name: course_copy_logs
  endpoint:
    path: /d2l/api/le/(version)/ccb/logs
    method: GET
    data_selector: object list page
    params: {}
- name: import_job_status
  endpoint:
    path: /d2l/api/le/(version)/import/(orgUnitId)/imports/(jobToken)
    method: GET
    data_selector: GetImportJobResponse
    params: {}
- name: import_job_logs
  endpoint:
    path: /d2l/api/le/(version)/import/(orgUnitId)/imports/(jobToken)/logs/
    method: GET
    data_selector: paged result set
    params: {}
- name: create_import_job
  endpoint:
    path: /d2l/api/le/(version)/import/(orgUnitId)/imports/
    method: POST
    data_selector: '{ "JobToken": <string> }'
    params: {}
- name: myUpdates
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/updates/myUpdates
    method: GET
    data_selector: OrgUnitUpdates
    params:
      version: '1.75'
      orgUnitId: <string:D2LID>
      updateTypesCSV: <CSV of UPDATETYPES_T>
- name: myUpdatesAcrossUnits
  endpoint:
    path: /d2l/api/le/{version}/updates/myUpdates/
    method: GET
    data_selector: ObjectListPage
    params:
      version: '1.75'
      orgUnitIdsCSV: <CSV of D2LIDs>
      updateTypesCSV: <CSV of UPDATETYPES_T>
- name: tools_org
  endpoint:
    path: /d2l/api/lp/(*version*)/tools/org/
    method: GET
    data_selector: OrgInformation
    params:
      includeRestrictedTools: false
      bookmark: ''
- name: tools_org_units
  endpoint:
    path: /d2l/api/lp/(*version*)/tools/orgUnits/(*orgUnitId*)
    method: GET
    data_selector: OrgUnitInformation
    params: {}
- name: org_units
  endpoint:
    path: /d2l/api/lp/(version)/tools/orgUnits/(orgUnitId)
    method: GET
    data_selector: paged result set
    params: {}
- name: tool_names
  endpoint:
    path: /d2l/api/lp/(version)/tools/orgUnits/(orgUnitId)/toolNames
    method: GET
    data_selector: paged result set
    params: {}
- name: tool_info
  endpoint:
    path: /d2l/api/lp/(version)/tools/orgUnits/(orgUnitId)/(toolId)
    method: GET
    data_selector: OrgUnitInformation
    params: {}
- name: update_tool
  endpoint:
    path: /d2l/api/lp/(version)/tools/orgUnits/(orgUnitId)/(toolId)
    method: PUT
    data_selector: OrgUnitInformation
    params: {}
- name: delete_my_locker_item
  endpoint:
    path: /d2l/api/le/{version}/locker/myLocker/{path}
    method: DELETE
    data_selector: null
    params: {}
- name: delete_user_locker_item
  endpoint:
    path: /d2l/api/le/{version}/locker/user/{userId}/{path}
    method: DELETE
    data_selector: null
    params: {}
- name: get_my_locker_item
  endpoint:
    path: /d2l/api/le/{version}/locker/myLocker/{path}
    method: GET
    data_selector: null
    params: {}
- name: get_user_locker_item
  endpoint:
    path: /d2l/api/le/{version}/locker/user/{userId}/{path}
    method: GET
    data_selector: null
    params: {}
- name: add_to_my_locker
  endpoint:
    path: /d2l/api/le/{version}/locker/myLocker/{path}
    method: POST
    data_selector: null
    params: {}
- name: add_to_user_locker
  endpoint:
    path: /d2l/api/le/{version}/locker/user/{userId}/{path}
    method: POST
    data_selector: null
    params: {}
- name: rename_my_locker_folder
  endpoint:
    path: /d2l/api/le/{version}/locker/myLocker/{path}
    method: PUT
    data_selector: null
    params: {}
- name: rename_user_locker_folder
  endpoint:
    path: /d2l/api/le/{version}/locker/user/{userId}/{path}
    method: PUT
    data_selector: null
    params: {}
- name: delete_group_locker_item
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/locker/group/{groupId}/{path}
    method: DELETE
    data_selector: null
    params: {}
- name: get_group_locker_item
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/locker/group/{groupId}/{path}
    method: GET
    data_selector: null
    params: {}
- name: setup_group_locker
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/groupcategories/{groupCategoryId}/locker
    method: POST
    data_selector: null
    params: {}
- name: add_to_group_locker
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/locker/group/{groupId}/{path}
    method: POST
    data_selector: null
    params: {}
- name: rename_group_locker_folder
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/locker/group/{groupId}/{path}
    method: PUT
    data_selector: null
    params: {}
- name: group_categories
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/groupcategories/
    method: GET
    data_selector: GroupCategoryData
    params: {}
- name: group_category
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/groupcategories/{groupCategoryId}
    method: GET
    data_selector: GroupCategoryData
    params: {}
- name: group_category_status
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/groupcategories/{groupCategoryId}/status
    method: GET
    data_selector: GroupCategoryJobStatus
    params: {}
- name: groups_in_category
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/groupcategories/{groupCategoryId}/groups/
    method: GET
    data_selector: GroupData
    params: {}
- name: specific_group
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/groupcategories/{groupCategoryId}/groups/{groupId}
    method: GET
    data_selector: GroupData
    params: {}
- name: create_group_category
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/groupcategories/
    method: POST
    data_selector: GroupsJobData
    params: {}
- name: create_group
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/groupcategories/{groupCategoryId}/groups/
    method: POST
    data_selector: GroupData
    params: {}
- name: sections
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/sections/
    method: GET
- name: section
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/sections/{sectionId}
    method: GET
- name: section_enrollments
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/sections/{sectionId}/enrollments/
    method: GET
- name: settings
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/sections/settings
    method: GET
- name: sections
  endpoint:
    path: /d2l/api/lp/(version)/(*orgUnitId*)/sections/
    method: GET
    data_selector: SectionData
    params: {}
- name: section_enrollments
  endpoint:
    path: /d2l/api/lp/(version)/(*orgUnitId*)/sections/(*sectionId*)/enrollments/
    method: GET
    data_selector: SectionEnrollment
    params: {}
- name: create_section
  endpoint:
    path: /d2l/api/lp/(version)/(*orgUnitId*)/sections/
    method: POST
    data_selector: SectionData
    params: {}
- name: update_section
  endpoint:
    path: /d2l/api/lp/(version)/(*orgUnitId*)/sections/(*sectionId*)
    method: PUT
    data_selector: SectionData
    params: {}
- name: group_category
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/groupcategories/
    method: GET
    data_selector: GroupCategoryData
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: group
  endpoint:
    path: /d2l/api/lp/{version}/{orgUnitId}/groupcategories/{groupCategoryId}/groups/
    method: GET
    data_selector: GroupData
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      groupCategoryId: D2LID
- name: grade_category
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/grades/categories/{categoryId}/ipsis
    method: GET
    data_selector: GradeCategoryInfo
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      categoryId: D2LID
- name: grade_object
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/grades/{gradeObjectId}/ipsis
    method: GET
    data_selector: GradeObjectDetails
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      gradeObjectId: D2LID
- name: update_grade_category
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/grades/categories/{categoryId}/ipsis
    method: PUT
    data_selector: GradeCategoryInfo
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      categoryId: D2LID
- name: update_grade_object
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/grades/{gradeObjectId}/ipsis
    method: PUT
    data_selector: GradeObjectDetails
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      gradeObjectId: D2LID
- name: generate_signed_url
  endpoint:
    path: /d2l/api/le/{version}/ipsis/upload/{sourceSystemId}/signedurl
    method: POST
    data_selector: SignedUrlData
    params:
      version: D2LVERSION
      sourceSystemId: D2LID
- name: tags
  endpoint:
    path: /d2l/api/eP/(version)/objects/tags/
    method: GET
- name: tags_add
  endpoint:
    path: /d2l/api/eP/(version)/objects/tags/add
    method: POST
- name: tags_remove
  endpoint:
    path: /d2l/api/eP/(version)/objects/tags/remove
    method: POST
- name: comments
  endpoint:
    path: /d2l/api/eP/(version)/object/(objectId)/comments/
    method: GET
- name: comments_new
  endpoint:
    path: /d2l/api/eP/(version)/object/(objectId)/comments/new
    method: POST
- name: cpd_record
  endpoint:
    path: /d2l/api/le/{version}/cpd/record/{recordId}
    method: GET
    data_selector: Record
    params:
      version: 1.84+
      recordId: D2LID
- name: cpd_record_user
  endpoint:
    path: /d2l/api/le/{version}/cpd/record/user/{userId}
    method: GET
    data_selector: ObjectListPage
    params:
      version: 1.84+
      userId: D2LID
- name: cpd_record_attachment
  endpoint:
    path: /d2l/api/le/{version}/cpd/record/{recordId}/attachment/{attachmentId}
    method: GET
    data_selector: file stream
    params:
      version: 1.84+
      recordId: D2LID
      attachmentId: D2LID
- name: cpd_target_progress_user
  endpoint:
    path: /d2l/api/le/{version}/cpd/target/progress/user/{userId}
    method: GET
    data_selector: TargetProgress
    params:
      version: 1.84+
      userId: D2LID
- name: cpd_category
  endpoint:
    path: /d2l/api/le/{version}/cpd/category/{categoryId}
    method: GET
    data_selector: Category
    params:
      version: 1.84+
      categoryId: D2LID
- name: cpd_method
  endpoint:
    path: /d2l/api/le/{version}/cpd/method/{methodId}
    method: GET
    data_selector: Method
    params:
      version: 1.84+
      methodId: D2LID
- name: cpd_question
  endpoint:
    path: /d2l/api/le/{version}/cpd/question/{questionId}
    method: GET
    data_selector: Question
    params:
      version: 1.84+
      questionId: D2LID
- name: locales
  endpoint:
    path: /d2l/api/lp/(version)/locales/
    method: GET
    data_selector: Locale
    params: {}
- name: locale_details
  endpoint:
    path: /d2l/api/lp/(version)/locales/(localeId)
    method: GET
    data_selector: Locale
    params: {}
- name: timezones
  endpoint:
    path: /d2l/api/lp/(version)/timezones/
    method: GET
    data_selector: TimeZone
    params: {}
- name: languages
  endpoint:
    path: /d2l/api/lp/(version)/language
    method: GET
    data_selector: Language
    params: {}
- name: NewsFeed
  endpoint:
    path: /news/feed
    method: GET
    data_selector: Resource
- name: NewsItem
  endpoint:
    path: /news/item
    method: GET
    data_selector: Resource
- name: news_item
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/news
    method: GET
    data_selector: NewsItem
    params: {}
- name: news_item_user
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/news/user/{userId}
    method: GET
    data_selector: NewsItem
    params: {}
- name: news_item_deleted
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/news/deleted
    method: GET
    data_selector: NewsItem
    params: {}
- name: news_item_access
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/news/{newsItemId}/access
    method: GET
    data_selector: UserAccess
    params: {}
- name: create_news_item
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/news
    method: POST
    data_selector: NewsItem
    params: {}
- name: update_news_item
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/news/{newsItemId}
    method: PUT
    data_selector: NewsItem
    params: {}
- name: ConditionsData
  endpoint:
    path: /conditions/data
    method: GET
- name: ExpressionData
  endpoint:
    path: /expressions/data
    method: GET
- name: ConditionData
  endpoint:
    path: /conditions/data
    method: GET
- name: custom_links
  endpoint:
    path: /custom_links
    method: GET
- name: quicklinks
  endpoint:
    path: /quicklinks
    method: GET
- name: custom_widgets
  endpoint:
    path: /custom_widgets
    method: GET
- name: users
  endpoint:
    path: /d2l/api/lp/1.0/users/whoami
    method: GET
- name: enrollments
  endpoint:
    path: /d2l/api/lp/1.0/enrollments/orgUnits/orgUnitId/users/
    method: GET
    params:
      roleId: roleId
- name: rubrics
  endpoint:
    path: /d2l/api/le/(*version*)/(*orgUnitId*)/rubrics
    method: GET
    data_selector: Rubric
    params: {}
- name: assessment
  endpoint:
    path: /d2l/api/le/(*version*)/(*orgUnitId*)/assessment
    method: GET
    data_selector: RubricAssessment
    params: {}
- name: update_assessment
  endpoint:
    path: /d2l/api/le/(*version*)/(*orgUnitId*)/assessment
    method: PUT
    data_selector: RubricAssessment
    params: {}
- name: auth_token
  endpoint:
    path: /d2l/auth/api/token
    method: GET
    params:
      x_target: https://clientURLHandler.com/process/userTokens
- name: module
  endpoint:
    path: /modules
    method: GET
- name: topic
  endpoint:
    path: /topics
    method: GET
- name: myItems
  endpoint:
    path: /d2l/api/le/(version)/content/myItems/
    method: GET
    data_selector: ObjectListPage
- name: myItemsDue
  endpoint:
    path: /d2l/api/le/(version)/content/myItems/due/
    method: GET
    data_selector: ObjectListPage
- name: myItemsItemCounts
  endpoint:
    path: /d2l/api/le/(version)/content/myItems/itemCounts/
    method: GET
    data_selector: ObjectListPage
- name: myItemsDueItemCounts
  endpoint:
    path: /d2l/api/le/(version)/content/myItems/due/itemCounts/
    method: GET
    data_selector: ScheduledItemCount
- name: myItemsCompletions
  endpoint:
    path: /d2l/api/le/(version)/content/myItems/completions/
    method: GET
    data_selector: ObjectListPage
- name: myItemsCompletionsDue
  endpoint:
    path: /d2l/api/le/(version)/content/myItems/completions/due/
    method: GET
    data_selector: ObjectListPage
- name: overdueItems
  endpoint:
    path: /d2l/api/le/(version)/overdueItems/
    method: GET
    data_selector: ObjectListPage
- name: overdueItemsMyItems
  endpoint:
    path: /d2l/api/le/(version)/overdueItems/myItems
    method: GET
    data_selector: ObjectListPage
- name: bookmarked_topics
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/content/bookmarks
    method: GET
    data_selector: Topic
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: recently_visited_topics
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/content/recent
    method: GET
    data_selector: Topic
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: table_of_contents
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/content/toc
    method: GET
    data_selector: TableOfContents
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: content_topic_completions
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/content/topics/(topicId)/completions/
    method: GET
    data_selector: ContentTopicCompletion
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      topicId: D2LID
- name: user_progress
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/content/userprogress/
    method: GET
    data_selector: UserProgressData
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: pacing_info
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/content/pacing
    method: GET
    data_selector: PacingInfo
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: delete_captions
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/deleteCaptions
    method: DELETE
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      topicId: D2LID
      language: string
- name: retrieve_metadata
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/metadata
    method: GET
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      topicId: D2LID
- name: provide_captions_file
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/provideCaptionsFile
    method: POST
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      topicId: D2LID
      language: string
- name: content_overview
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/overview
    method: GET
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: content_overview_attachment
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/overview/attachment
    method: GET
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: myItems
  endpoint:
    path: /d2l/api/le/(version)/content/myItems/
    method: GET
    data_selector: ObjectListPage
- name: userItems
  endpoint:
    path: /d2l/api/le/(version)/content/items/(userId)
    method: GET
    data_selector: ObjectListPage
- name: dueItems
  endpoint:
    path: /d2l/api/le/(version)/content/myItems/due/
    method: GET
    data_selector: ObjectListPage
- name: itemCounts
  endpoint:
    path: /d2l/api/le/(version)/content/myItems/itemCounts/
    method: GET
    data_selector: ObjectListPage
- name: dueItemCounts
  endpoint:
    path: /d2l/api/le/(version)/content/myItems/due/itemCounts/
    method: GET
    data_selector: ScheduledItemCount
- name: completedItems
  endpoint:
    path: /d2l/api/le/(version)/content/myItems/completions/
    method: GET
    data_selector: ObjectListPage
- name: completedDueItems
  endpoint:
    path: /d2l/api/le/(version)/content/myItems/completions/due/
    method: GET
    data_selector: ObjectListPage
- name: overdueItems
  endpoint:
    path: /d2l/api/le/(version)/overdueItems/
    method: GET
    data_selector: ObjectListPage
- name: myOverdueItems
  endpoint:
    path: /d2l/api/le/(version)/overdueItems/myItems
    method: GET
    data_selector: ObjectListPage
- name: bookmarks
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/content/bookmarks
    method: GET
    data_selector: Topic
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: recent_topics
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/content/recent
    method: GET
    data_selector: Topic
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: toc
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/content/toc
    method: GET
    data_selector: TableOfContents
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: user_progress
  endpoint:
    path: /d2l/api/le/(version)/(orgUnitId)/content/userprogress
    method: GET
    data_selector: UserProgressData
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: delete_captions
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/content/captions/delete
    method: DELETE
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      topicId: D2LID
      language: string
- name: retrieve_captions_metadata
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/content/captions
    method: GET
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      topicId: D2LID
- name: provide_captions_file
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/content/captions/upload
    method: POST
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      topicId: D2LID
      language: string
- name: order_content_object
  endpoint:
    path: /d2l/api/le/{version}/{orgUnitId}/content/order/objectId/{objectId}
    method: POST
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      objectId: D2LID
      position: string
- name: artifact
  endpoint:
    path: /d2l/api/eP/{version}/artifact/{objectId}
    method: GET
    data_selector: Artifact
- name: file_artifact
  endpoint:
    path: /d2l/api/eP/{version}/artifact/file/{objectId}
    method: GET
    data_selector: FileArtifact
- name: link_artifact
  endpoint:
    path: /d2l/api/eP/{version}/artifact/link/{objectId}
    method: GET
    data_selector: UrlArtifact
- name: new_file_artifact
  endpoint:
    path: /d2l/api/eP/{version}/artifacts/file/new
    method: POST
- name: new_link_artifact
  endpoint:
    path: /d2l/api/eP/{version}/artifacts/link/new
    method: POST
- name: user_accommodations
  endpoint:
    path: /d2l/api/le/{version}/accommodations/{orgUnitId}/users/{userId}
    method: GET
    data_selector: User Accommodations
    params: {}
- name: my_accommodations
  endpoint:
    path: /d2l/api/le/{version}/accommodations/{orgUnitId}/myaccommodations
    method: GET
    data_selector: User Accommodations
    params: {}
- name: update_user_accommodations
  endpoint:
    path: /d2l/api/le/{version}/accommodations/
    method: PUT
    data_selector: User Accommodations
    params: {}
- name: presentation
  endpoint:
    path: /d2l/api/eP/{version}/presentation/{objectId}
    method: GET
    data_selector: Presentation
    params:
      version: '2.5'
      objectId: D2LID
- name: new_presentation
  endpoint:
    path: /d2l/api/eP/{version}/presentations/new
    method: POST
    data_selector: Presentation
    params:
      version: '2.5'
- name: update_presentation
  endpoint:
    path: /d2l/api/eP/{version}/presentation/{objectId}
    method: POST
    data_selector: Presentation
    params:
      version: '2.5'
      objectId: D2LID
- name: delete_presentation
  endpoint:
    path: /d2l/api/eP/{version}/presentation/{objectId}
    method: DELETE
    data_selector: null
    params:
      version: '2.5'
      objectId: D2LID
- name: delete_user_enrollment_in_org_unit
  endpoint:
    path: /d2l/api/lp/(version)/enrollments/orgUnits/(*orgUnitId*)/users/(*userId*)
    method: DELETE
    data_selector: EnrollmentData
    params:
      version: D2LVERSION
      orgUnitId: D2LID
      userId: D2LID
- name: retrieve_enrolled_users_in_classlist
  endpoint:
    path: /d2l/api/le/(version)/(*orgUnitId*)/classlist/
    method: GET
    data_selector: ClasslistUser
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: retrieve_my_enrollments
  endpoint:
    path: /d2l/api/lp/(version)/enrollments/myenrollments/
    method: GET
    data_selector: MyOrgUnitInfo
    params:
      version: D2LVERSION
- name: create_or_update_enrollment
  endpoint:
    path: /d2l/api/lp/(version)/enrollments/
    method: POST
    data_selector: EnrollmentData
    params:
      version: D2LVERSION
- name: pin_org_unit
  endpoint:
    path: /d2l/api/lp/{version}/enrollments/myenrollments/{orgUnitId}/pin
    method: POST
    data_selector: MyOrgUnitInfo
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: remove_pin_org_unit
  endpoint:
    path: /d2l/api/lp/{version}/enrollments/myenrollments/{orgUnitId}/pin
    method: DELETE
    data_selector: MyOrgUnitInfo
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: auditee_info
  endpoint:
    path: /d2l/api/le/{version}/auditing/auditees/{auditeeId}
    method: GET
    data_selector: AuditedUser
    params:
      version: D2LVERSION
      auditeeId: D2LID
- name: auditor_info
  endpoint:
    path: /d2l/api/le/{version}/auditing/auditors/{auditorId}
    method: GET
    data_selector: Auditor
    params:
      version: D2LVERSION
      auditorId: D2LID
- name: auditor_auditees
  endpoint:
    path: /d2l/api/le/{version}/auditing/auditors/{auditorId}/auditees/
    method: GET
    data_selector: Auditee
    params:
      version: D2LVERSION
      auditorId: D2LID
- name: add_auditee
  endpoint:
    path: /d2l/api/le/{version}/auditing/auditors/{auditorId}/auditees/
    method: POST
    data_selector: ''
    params:
      version: D2LVERSION
      auditorId: D2LID
      AuditeeId: D2LID
- name: remove_auditee
  endpoint:
    path: /d2l/api/le/{version}/auditing/auditors/{auditorId}/auditees/
    method: DELETE
    data_selector: ''
    params:
      version: D2LVERSION
      auditorId: D2LID
      AuditeeId: D2LID
- name: organization_info
  endpoint:
    path: /d2l/api/lp/(version)/organization/info
    method: GET
    data_selector: Organization
    params:
      version: '1.46'
- name: organization_primary_url
  endpoint:
    path: /d2l/api/lp/(version)/organization/primary-url
    method: GET
    data_selector: text/plain
    params:
      version: '1.46'
- name: recycle_bin
  endpoint:
    path: /d2l/api/lp/(version)/orgstructure/recyclebin/
    method: GET
    data_selector: OrgUnitProperties
    params:
      version: D2LVERSION
- name: delete_org_unit
  endpoint:
    path: /d2l/api/lp/(version)/orgstructure/recyclebin/(orgUnitId)
    method: DELETE
    data_selector: null
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: send_to_recycle_bin
  endpoint:
    path: /d2l/api/lp/(version)/orgstructure/recyclebin/(orgUnitId)/recycle
    method: POST
    data_selector: null
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: restore_org_unit
  endpoint:
    path: /d2l/api/lp/(version)/orgstructure/recyclebin/(orgUnitId)/restore
    method: POST
    data_selector: null
    params:
      version: D2LVERSION
      orgUnitId: D2LID
- name: get_org_unit_types
  endpoint:
    path: /d2l/api/lp/(version)/outypes/
    method: GET
    data_selector: OrgUnitType
    params:
      version: D2LVERSION
- name: delete_org_unit_type
  endpoint:
    path: /d2l/api/lp/(version)/outypes/(orgUnitTypeId)
    method: DELETE
    data_selector: null
    params:
      version: D2LVERSION
      orgUnitTypeId: D2LID
- name: create_org_unit_type
  endpoint:
    path: /d2l/api/lp/(version)/outypes/
    method: POST
    data_selector: null
    params:
      version: D2LVERSION
- name: update_org_unit_type
  endpoint:
    path: /d2l/api/lp/(version)/outypes/(orgUnitTypeId)
    method: POST
    data_selector: null
    params:
      version: D2LVERSION
      orgUnitTypeId: D2LID
- name: org_structure_children
  endpoint:
    path: /d2l/api/lp/{version}/orgstructure/{orgUnitId}/children
    method: DELETE
    data_selector: records
    params: {}
- name: org_structure_parents
  endpoint:
    path: /d2l/api/lp/{version}/orgstructure/{orgUnitId}/parents
    method: DELETE
    data_selector: records
    params: {}
- name: org_structure
  endpoint:
    path: /d2l/api/lp/{version}/orgstructure/
    method: GET
    data_selector: OrgUnitProperties
    params: {}
- name: org_unit
  endpoint:
    path: /d2l/api/lp/{version}/orgstructure/{orgUnitId}
    method: GET
    data_selector: OrgUnit
    params: {}
- name: childless_org_units
  endpoint:
    path: /d2l/api/lp/{version}/orgstructure/childless/
    method: GET
    data_selector: OrgUnitProperties
    params: {}
- name: orphaned_org_units
  endpoint:
    path: /d2l/api/lp/{version}/orgstructure/orphans/
    method: GET
    data_selector: OrgUnitProperties
    params: {}
- name: org_unit_ancestors
  endpoint:
    path: /d2l/api/lp/{version}/orgstructure/{orgUnitId}/ancestors
    method: GET
    data_selector: OrgUnit
    params: {}
- name: org_unit_children
  endpoint:
    path: /d2l/api/lp/{version}/orgstructure/{orgUnitId}/children
    method: GET
    data_selector: OrgUnit
    params: {}
- name: org_unit_descendants
  endpoint:
    path: /d2l/api/lp/{version}/orgstructure/{orgUnitId}/descendants
    method: GET
    data_selector: OrgUnit
    params: {}
- name: create_custom_org_unit
  endpoint:
    path: /d2l/api/lp/{version}/orgstructure/
    method: POST
    data_selector: OrgUnit
    params: {}
- name: add_child_org_unit
  endpoint:
    path: /d2l/api/lp/{version}/orgstructure/{orgUnitId}/children/
    method: POST
    data_selector: OrgUnit
    params: {}
- name: add_parent_org_unit
  endpoint:
    path: /d2l/api/lp/{version}/orgstructure/{orgUnitId}/parents/
    method: POST
    data_selector: OrgUnit
    params: {}
- name: update_org_unit
  endpoint:
    path: /d2l/api/lp/{version}/orgstructure/{orgUnitId}
    method: PUT
    data_selector: OrgUnitProperties
    params: {}
- name: org_unit_colors
  endpoint:
    path: /d2l/api/lp/{version}/orgstructure/{orgUnitId}/colours
    method: GET
    data_selector: ColourScheme
    params: {}
- name: set_org_unit_colors
  endpoint:
    path: /d2l/api/lp/{version}/orgstructure/{orgUnitId}/colours
    method: PUT
    data_selector: ColourScheme
    params: {}
- name: learning_objective
  endpoint:
    path: /d2l/api/eP/{version}/learningobjective/{objectiveId}
    method: GET
    data_selector: LearningObjective
    params: {}
- name: delete_learning_objective
  endpoint:
    path: /d2l/api/eP/{version}/learningobjective/{objectiveId}
    method: DELETE
    data_selector: null
    params: {}
- name: update_learning_objective
  endpoint:
    path: /d2l/api/eP/{version}/learningobjective/{objectiveId}
    method: POST
    data_selector: LearningObjective
    params: {}
- name: create_association
  endpoint:
    path: /d2l/api/eP/{version}/learningobjective/{objectiveId}/association/{objectId}
    method: POST
    data_selector: null
    params: {}
- name: delete_association
  endpoint:
    path: /d2l/api/eP/{version}/learningobjective/{objectiveId}/association/{objectId}
    method: DELETE
    data_selector: null
    params: {}
notes:
- API version 1.75+ is required for full functionality.
- Quizzes can have special access rules for users.
- API version 1.75+ is required to access these endpoints.
- Some endpoints have rate limits; handle 429 status codes appropriately.
- D2L recommends that, if an application uses session state, it should use it for
  something akin to a single-use, time-limited unguessable string as a session key.
- Use of this legacy authentication system is deprecated; D2L no longer offers full
  support for, nor encourages the use of, this legacy authentication system.
- As of v4.0.0, the EP activity service can provide a set of preset filters.
- The dashboard activity actions are no longer supported as of EP API version 2.5
  and forward.
- API version 2.5+ is required for all actions.
- Older versions may not support certain features.
- 2.5+ – Route first appears in LMS v10.4.0.
- 2.4- – Obsolete as of LMS v10.7.0.
- You must be able to handle paginated results from this API.
- This action retrieves a JSON array of DataSetData blocks.
- This action retrieves an ObjectListPage JSON block containing a list of BrightspaceDataSetExtractInfo
  blocks.
- API versioning follows a pattern with major updates.
- Requires at least one of the users:profile:read or users:own_profile:read scopes.
- This action is subject to user privacy controls.
- This action is subject to user privacy controls. The calling user context must belong
  to a role granted permission to delete mappings.
- The calling user context requires at least one of the users:profile:read or users:own_profile:read
  scopes.
- API Version 1.46+ first appears in LMS v20.24.3.
- The authentication-related information applies to Brightspace API client applications
  using the legacy ID-Key authorization method.
- Each LMS deployment that supports extensibility to third-party applications and
  services must be configured upon deployment to synchronize application record data
  with the Keytool service.
- EP import and export actions can take a long time to complete.
- You must provide a JSON array for EP object IDs.
- 1.75+ – Route first appears in LMS v20.24.5
- 1.67-74 – Deprecated as of LMS v20.25.1
- 1.66- – Obsolete as of LMS v20.25.1
- API versions 1.75+ are supported.
- OAuth2 scopes must be specified for each action.
- Displays in calendars if start and end dates are provided.
- As of LMS v20.23.4 applications should use the discussions:posts:manage scope to
  gain access to this action.
- As of LMS v20.23.4 applications should use the discussions:forums:manage scope to
  gain access to this action.
- As of LMS v20.23.4 applications should use the discussions:forums:readonly scope
  to gain access to this action.
- As of LMS v20.23.4 applications should use the discussions:access:read scope to
  gain access to this action.
- As of LMS v20.23.4 applications should use the discussions:topics:manage scope to
  gain access to this action.
- As of LMS v20.23.4 applications should use the discussions:topics:readonly scope
  to gain access to this action.
- As of LMS v20.23.4 applications should use the discussions:forums:manage scope to
  gain access to this action. While the discussions:forums:read scope will still provide
  access, use of discussions:forums:read for this action is now deprecated.
- The information in this topic applies only to Brightspace API client applications
  using the ID-Key authorization method.
- API version 1.75+ is required for new functionality.
- Check the execution status returned in the action’s result JSON structure after
  any Learning Repository action.
- All query parameters are required for search.
- The API version must be specified for all endpoints.
- API version 1.4+ is the first appearance in LMS v20.25.4.
- Clients using OAuth2 authentication must have the content:toc:read scope associated
  with their token when accessing Table of contents routes.
- API deprecation and obsolescence notice for Learning Suites.
- D2L Web Services product end-of-life notice.
- API contracts introduced with the Learning Suite v10.3.0 will be deprecated late
  in the year 2015.
- You must provide a list of user IDs for which override information will be returned.
- The target user identified in the route for this action must have their enrollment
  role set to be visible within the classlist.
- API version 1.46+ is required.
- Routes deprecated in versions 1.43-1.45.
- Demographics data is associated with user records, not specific enrollments.
- Direct creation of grade object types through these APIs is not supported.
- GradeSchemeUrl contains the URL for an API action to retrieve the grade scheme associated
  with the grade object.
- API call-rate limit exceeded may occur with status code 429.
- API call-rate limit may be exceeded.
- Version 1.75+ is required for certain routes.
- OAuth2 scopes required include dropbox:folders:read.
- API versions 1.67-74 are deprecated, and 1.66- is obsolete.
- 2.4- Obsolete as of EP 10.7.0
- These structures and routes apply only to LTI Advantage (LTI 1.3+).
- A registration may only be deleted if it is not tied to any deployments.
- Before migrating links from legacy LTI to LTI Advantage, verify with the respective
  LTI Tool that it will properly support the link after migration.
- Legacy LTI links require an enabled registration where the link URL matches the
  registration domain.
- A LTI tool deployment may only be deleted if it is not tied to any links.
- Action to delete a course offering sends it to the recycle bin.
- CanSelfRegister field is required as of API version of LP v1.28.
- The source org unit must be of type Course Offering or Course Template.
- The target org unit must exist before creating a copy job.
- If updateTypesCSV parameter is not specified, corresponding property in returned
  JSON will use -1 as value.
- Actions may return paged result sets for tools.
- Bookmark query parameter can be used for pagination.
- You can use a bookmark query parameter as a paging offset.
- If you provide true for the namesOnly query parameter, this action returns a ToolWithName
  JSON block.
- Deprecation of legacy authentication workflow as of Brightspace 20.23.1 release.
- API versions 1.46+ are supported.
- Sections require proper authorization scopes.
- API version 1.46+ is required for most actions.
- Sections have settings that may need to be initialized before creating new sections.
- Conditions may use various operators and operands as specified in the documentation.
- Ensure that you’re providing a well formed route for the action you want.
- When testing your application against a server, use the standard web-application
  UI to verify that the user context has permission to perform the relevant actions.
- API calls must be made over HTTPS.
- Rate limiting is implemented with a token-bucket credit scheme.
- unstable API version
- The service must preserve and carry forward the x_target parameter through the entire
  authentication process.
- Exempted items do not have due dates.
- Invalid selection data on input is ignored, returning only accessible items.
- API version 1.75+ is required for this functionality.
- Version 2.5+ is required for certain routes.
- API versions 1.75+ for the route first appears in LMS v20.24.5
- Versions 1.67-74 are deprecated as of LMS v20.25.1
- Version 1.66- is obsolete as of LMS v20.25.1
- The View User Enrollments permission controls a user role’s ability to see user
  enrollments.
- In some cases, the service may let the call proceed, but will return back an empty
  result set.
- Some org units can have very large numbers of enrolled users, so the classlist can
  be a quite large collection.
- Support for the isActive query parameter was added to this action as of LP API v1.26.
- You can make this call anonymously.
- If you’re using OAuth2, you do not need to provide an Authorization header (containing
  a bearer token) with your call.
- You can only delete an org unit using this action if the org unit has already been
  sent to the recycle bin.
- Route first appears in LMS v20.24.3.
- Deprecated as of LMS v20.25.1.
errors:
- 200 OK – Action succeeded.
- 404 Not Found – Org unit not found.
- 429 Too Many Requests – API call-rate limit exceeded.
- '403 Forbidden: No permission to see log messages.'
- '429 Too Many Requests: API call-rate limit exceeded.'
- '403 Forbidden: No permission to see or manage quizzes.'
- '404 Not Found: Org unit, quiz, user, or special access rule not found.'
- 403 Forbidden – No permission to view quiz.
- 400 Bad Request – Invalid query string filter provided, or invalid page size provided,
  or unable to create list of results.
- '200 OK: Action succeeded.'
- '400 Bad Request: Invalid request parameters.'
- '403 Forbidden: No permission to access.'
- 403 Forbidden – No permission to see EP object.
- 403 Forbidden – No permission to access the Brightspace Data Sets.
- '403 Forbidden: No permission to access the Brightspace Data Sets.'
- '400 Bad Request: Invalid data provided.'
- '403 Forbidden: No permission to subscribe.'
- '404 Not Found: No such notification carrier or user.'
- '403 Forbidden: No permission to see personal profile for the current user context.'
- 403 Forbidden – No permission to access this resource.
- 404 Not Found – Resource not found.
- 400 Bad Request – Unable to bind user id.
- 403 Forbidden – No permission to retrieve users.
- 200 OK – Action succeeded
- 403 Forbidden – Tool or carrier disabled or no permission to subscribe
- 404 Not Found – No such notification carrier or user not found
- 429 Too Many Requests – API call-rate limit exceeded
- 400 Bad Request – Request failed; see `ProblemDetails` response body for details.
- 403 Forbidden – No permission to manage 1EdTech Role Configuration.
- '404 Not Found: Profile not found.'
- '400 Bad Request: Empty list of EP object IDs provided, or no matching EP objects
  found.'
- '403 Forbidden: No permission to export/import EP objects.'
- '404 Not Found: Export/Import task not found.'
- 403 Forbidden – No permission to manage tool providers.
- 404 Not Found – No such tool provider found.
- '403 Forbidden: No permission to manage LTI links.'
- '404 Not Found: No such link found.'
- 403 Forbidden – No permission to see posts.
- 404 Not Found – Topic not found.
- 404 Not Found – Post not found.
- 403 Forbidden – No permission to delete forums.
- 404 Not Found – Forum not found, or org unit not found.
- '200 OK: Action succeeded'
- '403 Forbidden: No permission'
- '429 Too Many Requests: API call-rate limit exceeded'
- '400 Bad Request: Survey is anonymous and cannot filter attempts by user ID'
- '403 Forbidden: No permission to view survey results'
- '404 Not Found: Org unit or survey not found'
- '403 Forbidden: No permission to see or manage surveys.'
- '404 Not Found: Org unit not found.'
- 200 OK – Action successfully attempted
- '400 Bad Request: No query string provided.'
- '403 Forbidden: No permission to retrieve from the repository.'
- 403 Forbidden – No permission to view checklists or write to checklists.
- 404 Not Found – Org unit not found, or checklist not found.
- 403 Forbidden – No permission to view or manage associations.
- 404 Not Found – Association not found for the provided org unit.
- 400 Bad Request – Invalid filters.
- 403 Forbidden – No permission to view.
- 403 Forbidden – No permission to view icons.
- 403 Forbidden – No permission to view awards.
- 404 Not Found – No such org unit.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Widget data does not exist.'
- '403 Forbidden: No permission to modify custom widget data within the org unit.'
- 400 Bad Request – Unable to find identified user.
- 403 Forbidden – No permission to subscribe to identified user.
- 404 Not Found – Unable to find identified object.
- 403 Forbidden – No permission to delete/view/edit the configuration variable.
- 404 Not Found – No such configuration variable.
- '403 Forbidden: No permission to view configuration variables.'
- '404 Not Found: No such configuration variable.'
- '403 Forbidden: No permission to view demographics entries.'
- '404 Not Found: No such user, or no matching entries found.'
- 403 Forbidden – No permission to see calendar event.
- 404 Not Found – Unable to find the calendar event.
- '403 Forbidden: No permission to manage grades.'
- '404 Not Found: No grade scheme found for org unit, or no org unit found.'
- '400 Bad Request: Invalid query parameter value.'
- '403 Forbidden: No permission to see grades.'
- '404 Not Found: No grades found for provided org unit, or org unit not found.'
- 403 Forbidden – No permission to manage grades.
- 404 Not Found – Grade category not found, or org unit not found.
- 400 Bad Request – Invalid query parameter value.
- 403 Forbidden – No permission to see grades.
- 404 Not Found – No grades found for provided user in org unit, or no org unit found.
- 403 Forbidden – No permission to access the resource.
- 400 Bad Request – Invalid permissions.
- 403 Forbidden – No permission to perform this action.
- '400 Bad Request: Action not supported for non-observational dropbox folders.'
- '403 Forbidden: No permission to modify feedback.'
- '404 Not Found: No such dropbox folder, or no such org unit, or no such file attachment.'
- '403 Forbidden: No permission to see this folder’s submissions.'
- '404 Not Found: No such folder, or no such org unit.'
- '403 Forbidden: No permission to change allowance state for capability grants.'
- '404 Not Found: No such tool.'
- 400 Bad Request – Badly formatted list of invite IDs
- 403 Forbidden – No permission to delete invites
- '403 Forbidden: No permission to manage registrations.'
- '404 Not Found: No such registration found.'
- '403 Forbidden: No permission to manage external learning tool links or create external
  learning tool links from external learning tool providers'
- '404 Not Found: No such link found'
- '403 Forbidden: No permission to manage deployments.'
- '403 Forbidden: No permission to create course copy job request.'
- '404 Not Found: Target org unit not found.'
- '403 Forbidden: No permission to manage or delete courses.'
- '403 Forbidden: No permission to retrieve status of copy job.'
- '404 Not Found: No such target org unit, no such source org unit (from copy job),
  no such copy job, or job token is invalid.'
- 403 Forbidden – User has no permission to access specified org unit.
- 404 Not Found – Org unit does not exist.
- 403 Forbidden – No permission to view tools’ information.
- '403 Forbidden: No permission to view tools’ information.'
- '404 Not Found: No such org unit or tool.'
- 400 Bad Request – No such org unit.
- 403 Forbidden – No permission to modify groups.
- 404 Not Found – Group category not found.
- '403 Forbidden: No permission to manage sections.'
- '404 Not Found: No such org unit or section.'
- 400 Bad Request – No such org unit, or group category contains groups.
- '400 Bad Request: The return body may contain further details.'
- '404 Not Found: Grade category not found, or org unit not found.'
- 404 Not Found – EP object not found.
- 403 Forbidden – Insufficient scope.
- 404 Not Found – Record not found or insufficient permissions.
- 429 Too Many Requests – Api call-rate limit exceeded.
- '400 Bad Request: Invalid bookmark provided.'
- '403 Forbidden: No permission to see locales.'
- '400 Bad Request: Invalid News Item data provided.'
- '403 Forbidden: No permission to manage news items for this org unit.'
- '404 Not Found: News item not found.'
- 400 Bad Request – Release conditions cannot be applied to the provided target (the
  message will describe the reason).
- 404 Not Found – Target not found in the org unit.
- 403 Forbidden – No permission to read conditions for the target.
- '403 status: permission problem for the action the service thinks you’re attempting'
- '400: Bad Request'
- '403: Forbidden'
- '404: Not Found'
- '429: Too many requests'
- '500: General service error'
- '403 Forbidden: Not permitted to view one of the matched rubrics.'
- '404 Not Found: No matching rubrics found.'
- 403 Forbidden – No permission to delete reflection.
- 400 Bad Request – Invalid org unit ID or provided start date later than end date.
- '403 Forbidden: No permission to view course content.'
- '400 Bad Request: Content object with provided topic ID is not an audio topic or
  video topic, or invalid language provided.'
- '403 Forbidden: No permission to manage content files.'
- '404 Not Found: No such topic or org unit found, or could not find captions file
  associated with the provided topic and language.'
- 403 Forbidden – No permission to see scheduled items for org unit.
- 400 Bad Request – Content object with provided topic ID is not an audio topic or
  video topic, or invalid language provided.
- 403 Forbidden – No permission to manage content files.
- 404 Not Found – No such topic or org unit found, or could not find captions file
  associated with the provided topic and language.
- 403 Forbidden – No permission to see artifact.
- '403 Forbidden: No permission to see/manage accommodations'
- '404 Not Found: No enrolled user found'
- '403 Forbidden: No permission to delete the presentation.'
- '400 Bad Request: Invalid Auditee ID provided.'
- '403 Forbidden: No permission to manage auditors.'
- '404 Not Found: No auditor found, or no auditee found.'
- 403 Forbidden – No permission to see enrollments.
- 200 OK
- 404 Not Found
- 429 Too Many Requests
- 404 Not Found – This organization hasn’t set its identifier and name.
- 403 Forbidden – No permission to delete org unit.
- 400 Bad Request – No permission to detach organization units.
- 403 Forbidden – No permission to edit organizational structure.
- '400 Bad Request: Unable to retrieve learning objective, or unable to retrieve EP
  object, or unable to remove the association between the two.'
- '403 Forbidden: No permission to delete association.'
- '404 Not Found: Learning objective not found, or association to EP object not found.'
auth_info:
  mentioned_objects:
  - UserProfile
  - Role
  - User.UserProfileUpdateData
  - discussions:posts:manage
  - discussions:posts:readonly
  - discussions:forums:manage
  - discussions:forums:readonly
  - discussions:access:read
  - discussions:topics:manage
  - discussions:topics:readonly
  - OauthToken
  - OrgUnit
  - SurveyReadData
  - checklists:checklist:read
  - checklists:checklist:write
  - AuthProvider
  - NewsItem
  - UserAccess
  - EnrollmentData
  - ClasslistUser
  - MyOrgUnitInfo
  - organizations:organization:delete
  - organizations:organization:read
  - organizations:organization:create
  - organizations:organization:update
client:
  base_url: /d2l/api/le/
  auth:
    type: oauth2
    location: header
    header_name: Authorization
    scopes:
    - discussions:forums:manage
    - discussions:forums:readonly
    - discussions:access:read
    - content:file:write
    - content:modules:manage content:topics:manage
    - accommodations:profile:read
    - accommodations:profile:manage
    flow: Authorization Code Grant
    token_url: https://auth.brightspace.com/core/connect/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
  paginator:
    type: bookmark
    page_size_param: limit
    default_page_size: 20
    cursor_param: Bookmark
  headers:
    Accept: application/json
    Content-Type: application/json
  resources:
  - name: reflection
    endpoint:
      path: /d2l/api/eP/(*version*)/reflection/(*objectId*)
      method: GET
      data_selector: Reflection
      params: {}
  - name: create_reflection
    endpoint:
      path: /d2l/api/eP/(*version*)/reflections/new
      method: POST
      data_selector: Reflection
      params: {}
  - name: update_reflection
    endpoint:
      path: /d2l/api/eP/(*version*)/reflection/(*objectId*)
      method: POST
      data_selector: Reflection
      params: {}
  - name: delete_reflection
    endpoint:
      path: /d2l/api/eP/(*version*)/reflection/(*objectId*)
      method: DELETE
      data_selector: {}
      params: {}
  - name: associate_reflection
    endpoint:
      path: /d2l/api/eP/(*version*)/reflection/(*reflectionId*)/on/(*objectId*)
      method: POST
      data_selector: {}
      params: {}
  - name: remove_association
    endpoint:
      path: /d2l/api/eP/(*version*)/reflection/(*reflectionId*)/on/(*objectId*)
      method: DELETE
      data_selector: {}
      params: {}
source_metadata: null
