resources:
- name: API keys
  endpoint:
    path: /api-reference/api-keys/overview
    method: GET
- name: Users
  endpoint:
    path: /api-reference/users/overview
    method: GET
- name: Context
  endpoint:
    path: /api-reference/context/overview
    method: GET
- name: Exports
  endpoint:
    path: /api-reference/exports/overview
    method: GET
- name: Logs
  endpoint:
    path: /api-reference/logs/overview
    method: POST
- name: Usage
  endpoint:
    path: /api-reference/usage/overview
    method: GET
- name: Search
  endpoint:
    path: /api-reference/search/search
    method: GET
- name: Forward
  endpoint:
    path: /api-reference/forward/overview
    method: POST
- name: Datastream2
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params:
      service_name: MyBrontoDataset
      service_namespace: MyBrontoCollection
- name: logpush_job
  endpoint:
    path: /accounts/<YOUR_CLOUDFLARE_ACCOUNT_ID>/logpush/jobs
    method: POST
    data_selector: jobs
    params: {}
- name: view_logpush_jobs
  endpoint:
    path: /accounts/<YOUR_CLOUDFLARE_ACCOUNT_ID>/logpush/jobs
    method: GET
    data_selector: jobs
    params: {}
- name: logpush_job
  endpoint:
    path: /client/v4/accounts/<YOUR_CLOUDFLARE_ACCOUNT_ID>/logpush/jobs
    method: POST
    data_selector: ''
    params: {}
- name: service_logs
  endpoint:
    path: /
    method: POST
    data_selector: logs
- name: fastly_logs
  endpoint:
    path: /
    method: POST
    data_selector: logs
- name: bronto_forwarder
  endpoint:
    path: /integrations/azure/terraform/latest/brontoForwarder.zip
    method: GET
    data_selector: records
- name: forwarder
  endpoint:
    path: /integrations/azure/terraform/latest/brontoForwarder.zip
    method: GET
    data_selector: data
    params: {}
- name: monitors
  endpoint:
    path: /core-features/monitors
    method: GET
- name: webhooks
  endpoint:
    path: /core-features/webhooks
    method: GET
- name: change_detection_monitor
  endpoint:
    path: /core-features/change-detection
    method: GET
    data_selector: monitors
    params: {}
- name: usage
  endpoint:
    path: /api/usage
    method: GET
    data_selector: data
    params: {}
- name: roles
  endpoint:
    path: /Account-Management/Roles
    method: GET
- name: datasets
  endpoint:
    path: /Fine-Grained-Access/Datasets
    method: GET
- name: api_key
  endpoint:
    path: /manage/api_keys
    method: GET
- name: usage
  endpoint:
    path: /api/usage
    method: GET
    data_selector: data
- name: logs
  endpoint:
    path: /search
    method: GET
    data_selector: logs
    params: {}
- name: api_keys
  endpoint:
    path: /api-keys
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: context
  endpoint:
    path: /context
    method: GET
- name: exports
  endpoint:
    path: /exports
    method: GET
- name: logs
  endpoint:
    path: /logs
    method: GET
- name: usage
  endpoint:
    path: /usage
    method: GET
- name: search
  endpoint:
    path: /search
    method: GET
- name: forward
  endpoint:
    path: /forward
    method: POST
- name: api_keys
  endpoint:
    path: /api-keys
    method: GET
    data_selector: api_keys
- name: api_keys
  endpoint:
    path: /api-keys
    method: POST
    data_selector: id
    params: {}
- name: api_keys
  endpoint:
    path: /api-keys
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: context
  endpoint:
    path: /context
    method: GET
- name: exports
  endpoint:
    path: /exports
    method: GET
- name: logs
  endpoint:
    path: /logs
    method: GET
- name: usage
  endpoint:
    path: /usage
    method: GET
- name: search
  endpoint:
    path: /search
    method: GET
- name: forward
  endpoint:
    path: /forward
    method: GET
- name: delete_api_key
  endpoint:
    path: /api-keys/{apiKeyId}
    method: DELETE
- name: api_keys
  endpoint:
    path: /api-keys
    method: GET
    data_selector: api_keys
- name: api_key
  endpoint:
    path: /api-keys/{apiKeyId}
    method: PATCH
    data_selector: none
    params: {}
- name: users
  endpoint:
    path: /api-reference/users/retrieve-a-list-of-users
    method: GET
- name: api_keys
  endpoint:
    path: /api-keys
    method: POST
    data_selector: id
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: delete_api_key
  endpoint:
    path: /api-keys/{apiKeyId}
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: id
    params: {}
- name: update_api_key
  endpoint:
    path: /api-keys/{apiKeyId}
    method: PATCH
    data_selector: default
    params: {}
- name: user
  endpoint:
    path: /users/{userId}
    method: GET
    data_selector: id
- name: users
  endpoint:
    path: /api-reference/users/retrieve-a-list-of-users
    method: GET
- name: delete_user_by_id
  endpoint:
    path: /users/{userId}
    method: DELETE
    data_selector: '204'
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: update_user
  endpoint:
    path: /users/{userId}
    method: PATCH
    data_selector: id
- name: user
  endpoint:
    path: /users
    method: POST
    data_selector: id
    params: {}
- name: context
  endpoint:
    path: /api-reference/context/get-context
    method: GET
- name: user
  endpoint:
    path: /users/{userId}
    method: GET
    data_selector: users
    params: {}
- name: context
  endpoint:
    path: /context
    method: GET
    data_selector: result
    params:
      limit: 100
- name: delete_user
  endpoint:
    path: /users/{userId}
    method: DELETE
- name: exports
  endpoint:
    path: /api-reference/exports/overview
    method: GET
    data_selector: exports
- name: export
  endpoint:
    path: /exports/{exportId}
    method: GET
    data_selector: export_id
- name: update_user
  endpoint:
    path: /users/{userId}
    method: PATCH
    data_selector: response
    params: {}
- name: delete_export
  endpoint:
    path: /exports/{exportId}
    method: DELETE
- name: context
  endpoint:
    path: /api-reference/context/get-context
    method: GET
- name: exports
  endpoint:
    path: /exports
    method: POST
    data_selector: export_id
    params: {}
- name: context
  endpoint:
    path: /context
    method: GET
    data_selector: result
    params:
      limit: 100
- name: exports
  endpoint:
    path: /exports
    method: GET
    data_selector: exports
- name: exports
  endpoint:
    path: /api-reference/exports/overview
    method: POST
    data_selector: export_id
- name: logs
  endpoint:
    path: /api-reference/logs/get-logs
    method: GET
- name: export
  endpoint:
    path: /exports/{exportId}
    method: GET
    data_selector: export_id
- name: logs
  endpoint:
    path: /logs
    method: POST
    data_selector: log
    params: {}
- name: delete_export
  endpoint:
    path: /exports/{exportId}
    method: DELETE
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: logs
- name: export
  endpoint:
    path: /exports
    method: POST
    data_selector: export_id
- name: api_keys
  endpoint:
    path: /api-reference/api-keys/overview
    method: GET
- name: users
  endpoint:
    path: /api-reference/users/overview
    method: GET
- name: context
  endpoint:
    path: /api-reference/context/overview
    method: GET
- name: exports
  endpoint:
    path: /api-reference/exports/overview
    method: GET
- name: logs
  endpoint:
    path: /api-reference/logs/overview
    method: GET
- name: usage
  endpoint:
    path: /api-reference/usage/overview
    method: GET
- name: search
  endpoint:
    path: /api-reference/search/overview
    method: GET
- name: forward
  endpoint:
    path: /api-reference/forward/overview
    method: GET
- name: exports
  endpoint:
    path: /exports
    method: GET
    data_selector: exports
- name: logs
  endpoint:
    path: /api-reference/logs/get-logs
    method: GET
- name: usage
  endpoint:
    path: /usage/organizations/logs
    method: GET
    data_selector: groups_series
    params: {}
- name: usage
  endpoint:
    path: /usage/users
    method: GET
    data_selector: groups_series
    params: {}
- name: create_log
  endpoint:
    path: /logs
    method: POST
    data_selector: logset
    params: {}
- name: get_logs
  endpoint:
    path: /logs
    method: GET
    data_selector: logs
    params: {}
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: logs
- name: search_query
  endpoint:
    path: /search
    method: GET
    data_selector: result
- name: poll_query_status
  endpoint:
    path: /search/get-search-status
    method: GET
    data_selector: result
- name: cancel_query
  endpoint:
    path: /search/delete-search
    method: DEL
    data_selector: result
- name: query
  endpoint:
    path: /search
    method: GET
    data_selector: result
    params:
      limit: 100
- name: api_keys
  endpoint:
    path: /api-reference/api-keys/overview
    method: GET
- name: users
  endpoint:
    path: /api-reference/users/overview
    method: GET
- name: context
  endpoint:
    path: /api-reference/context/overview
    method: GET
- name: exports
  endpoint:
    path: /api-reference/exports/overview
    method: GET
- name: logs
  endpoint:
    path: /api-reference/logs/overview
    method: GET
- name: usage
  endpoint:
    path: /api-reference/usage/overview
    method: GET
- name: search
  endpoint:
    path: /api-reference/search/overview
    method: GET
- name: forward
  endpoint:
    path: /api-reference/forward/overview
    method: GET
- name: execute_query
  endpoint:
    path: /search
    method: POST
    data_selector: result
- name: usage
  endpoint:
    path: /usage/organizations/logs
    method: GET
    data_selector: groups_series
    params: {}
- name: execute_query
  endpoint:
    path: /search
    method: POST
    data_selector: result
    params:
      limit: 50
      num_of_slices: 50
- name: usage
  endpoint:
    path: /usage/users
    method: GET
- name: poll_query_status
  endpoint:
    path: /search/status/{statusId}
    method: GET
    data_selector: result
    params: {}
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: result
- name: forward_configs
  endpoint:
    path: /forward-configs
    method: POST
    data_selector: id
    params: {}
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: result
    params:
      limit: 100
- name: delete_forward_config
  endpoint:
    path: /forward-configs/{forwardId}
    method: DELETE
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: result
    params:
      limit: 50
- name: forward_configs
  endpoint:
    path: /forward-configs
    method: GET
    data_selector: forward-configs
- name: test_access_to_destination
  endpoint:
    path: /forward-configs/test-destination
    method: POST
    data_selector: result
- name: execute_query
  endpoint:
    path: /search
    method: POST
    data_selector: result
    params:
      limit: 50
      num_of_slices: 50
      most_recent_first: true
      explain_only: false
      async_enabled: false
- name: poll_query_in_progress
  endpoint:
    path: /search/status/{statusId}
    method: GET
- name: forward_config
  endpoint:
    path: /forward-configs/{forwardId}
    method: PUT
    data_selector: id
    params: {}
- name: forward_configs
  endpoint:
    path: /forward-configs
    method: POST
    data_selector: id
    params: {}
- name: delete_forward_config
  endpoint:
    path: /forward-configs/{forwardId}
    method: DELETE
- name: forward_configs
  endpoint:
    path: /forward-configs
    method: GET
    data_selector: forward-configs
- name: test_access_to_destination
  endpoint:
    path: /forward-configs/test-destination
    method: POST
    data_selector: result
- name: forward_configs
  endpoint:
    path: /forward-configs/{forwardId}
    method: PUT
    data_selector: id
    params: {}
notes:
- Logs are delivered near realtime in small batches.
- This feature is only available with an enterprise plan or by subscribing to a paid
  workers plan.
- Cloudflare allows users to configure the max_upload_bytes setting via their API.
- Bronto does not enforce a limit on maximum logs sent in a single batch, so the value
  can be left 0.
- Bronto accepts payloads up to 10MiB, so maximum bytes should be set to 10485760.
- Content type used when sending logs is application/json.
- Bronto API key is required for sending logs.
- Payload accepted up to 10MiB.
- Azure logs forwarded through the Bronto integration are, by default, assigned to
  the unknown_service dataset within the azure collection.
- If you configure a custom parser, any dashboards, saved views or monitors relying
  on specific key names in the log may stop working if those keys are renamed.
- A query’s length cannot exceed 16,000 characters and cannot contain more than 400
  expressions.
- Regular expression operators are currently an early access feature which is disabled
  by default.
- Named capture groups may only be used in aggregate functions, e.g., count, min,
  max.
- Permissions for roles in Bronto are additive — if a user is assigned multiple roles,
  they receive the union of all permissions from those roles.
- 'For dataset access permissions, denials take precedence: if a dataset or collection
  is explicitly forbidden, access will be denied even if another role permits it.'
- Change detection monitors allow alerts on significant data changes.
- Aggregation functions include count, average, max, and sum.
- 'GDPR Compliance: Ensures the privacy and protection of personal data for customers
  in the EU, adhering to the General Data Protection Regulation.'
- 'CCPA Compliance: Guarantees the privacy and protection of personal data for customers
  in California, in accordance with the California Consumer Privacy Act (CCPA). Requests
  related to CCPA can be addressed by contacting support@bronto.io.'
- API keys are unique to your organization.
- An API key is used by our logging integration methods as a unique identifier to
  route log data to your account.
- Bronto integrates easily with your existing OpenTelemetry Collector setup.
- Routing is defined by headers, not log content.
- GDPR Compliance ensures the privacy and protection of personal data for customers
  in the EU.
- CCPA Compliance guarantees the privacy and protection of personal data for customers
  in California.
- Data is encrypted both at rest and in transit, adhering to industry standards.
- Bronto is designed to complement your existing Datadog setup
- Logs are indexed and searchable by default
- You must have admin privileges to create API keys.
- One of either the from or the from_tags parameters must be specified.
- The data to be exported can be filtered by entering the search parameters 'from',
  'where' and 'time_range' as per a normal query in the 'search_details' object.
- Export endpoints require an API key for access.
- Authorization requires an API key.
- Forward config to archive logs in another system, e.g., S3 bucket.
- Check access to the destination. A test file will be created and deleted to make
  sure Bronto can access your destination
- POST method is preferred to avoid problems related to maximum URL length when query
  parameters are very long.
- The compression algorithm to use is ZSTD.
- Required if all_logs is set to false, ignored if all_logs is set to true.
- Requires setup of API key for authentication
- The compression algorithm to use is ZSTD recommended
errors:
- 'Unauthorized: Recheck API key or permissions.'
- '401 Unauthorized: Recheck API key or token expiration'
- 'Invalid API key: Check the provided API key.'
- 'Payload too large: Reduce the size of the logs being sent.'
- '401 Unauthorized: Recheck API key or permissions'
- '403 Forbidden: Check API key or permissions'
- '429 Too Many Requests: Throttle API calls'
- '500 Internal Server Error: Retry the request'
- '201: API keys is created successfully'
- '400: Bad Request'
- '403: Forbidden'
- '429: Too Many Requests'
- '500: Internal Server Error'
- '403'
- '404'
- '429'
- '500'
- 403 Forbidden
- 404 Not Found
- 429 Too Many Requests
- 500 Internal Server Error
- '204: API key deleted successfully'
- '404: Not Found'
- '400 Bad Request: Check request parameters'
- '403 Forbidden: Insufficient permissions'
- '429 Too Many Requests: Rate limit exceeded'
- '500 Internal Server Error: Try again later'
- '400 Bad Request: Check required fields and their formats'
- '403 Forbidden: Verify API key and permissions'
- '429 Too Many Requests: Adjust request frequency'
- '500 Internal Server Error: Contact support'
- '403 Forbidden: Check API key'
- '404 Not Found: User ID does not exist'
- '500 Internal Server Error: Unexpected server error'
- '201: Export created successfully'
- '404 Not Found: The requested export does not exist'
- '400 Bad Request: Check the logset and log parameters'
- 400 Bad Request
- '201: Log created successfully'
- '400: Bad request'
- '429: Too many requests'
- '500: Internal server error'
- 410 Gone
- '400: Bad Request - Check the request body for errors.'
- '403: Forbidden - Ensure the API key is valid.'
- '429: Too Many Requests - Throttle your requests.'
- '500: Internal Server Error - Retry the request.'
- '400 Bad Request: Check query parameters'
- '400 Bad Request: Check request structure and parameters'
- '500 Internal Server Error: Retry after some time'
- '200'
- '400 Bad Request: Check the request parameters'
- '404 Not Found: Verify the statusId'
- '410 Gone: The query results have expired'
- '429 Too Many Requests: Slow down your request rate'
- '204: Config deleted successfully'
- '400'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.eu.bronto.io
  auth:
    type: apikey
    location: header
    header_name: X-BRONTO-API-KEY
source_metadata: null
