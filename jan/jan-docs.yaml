resources:
- name: chat_completions
  endpoint:
    path: /api/v1/chat/completions
    method: POST
    data_selector: model
    params: {}
- name: models
  endpoint:
    path: /api/v1/models
    method: GET
    data_selector: data
    params: {}
- name: completions
  endpoint:
    path: /api/v1/completions
    method: POST
    data_selector: model
    params: {}
- name: user_profile
  endpoint:
    path: /api/v1/user/profile
    method: GET
    data_selector: profile
    params: {}
- name: conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: conversations
    params: {}
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: status
    params: {}
- name: system_status
  endpoint:
    path: /api/v1/status
    method: GET
    data_selector: api_gateway
    params: {}
- name: chat_completions
  endpoint:
    path: /api/v1/chat/completions
    method: POST
    data_selector: null
    params: {}
- name: models
  endpoint:
    path: /api/v1/models
    method: GET
    data_selector: null
    params: {}
- name: completions
  endpoint:
    path: /api/v1/completions
    method: POST
    data_selector: null
    params: {}
- name: user_profile
  endpoint:
    path: /api/v1/user/profile
    method: GET
    data_selector: null
    params: {}
- name: conversations
  endpoint:
    path: /api/v1/conversations
    method: POST
    data_selector: null
    params: {}
- name: list_conversations
  endpoint:
    path: /api/v1/conversations
    method: GET
    data_selector: null
    params: {}
- name: get_conversation
  endpoint:
    path: /api/v1/conversations/{id}
    method: GET
    data_selector: null
    params: {}
- name: status
  endpoint:
    path: /api/v1/status
    method: GET
    data_selector: null
    params: {}
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: null
    params: {}
- name: Jan v1
  endpoint:
    path: /download
    method: GET
    data_selector: records
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: messages
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: messages
    params: {}
- name: assistants
  endpoint:
    path: /assistants/
    method: GET
    data_selector: assistants
    params: {}
- name: models
  endpoint:
    path: /models/
    method: GET
    data_selector: models
    params: {}
- name: service
  endpoint:
    path: /app/service/
    method: GET
    data_selector: records
    params: {}
- name: postgres
  endpoint:
    path: /logs
    method: GET
    data_selector: logs
    params: {}
- name: service
  endpoint:
    path: /app/service
    method: GET
    data_selector: records
- name: handler
  endpoint:
    path: /app/handler
    method: GET
    data_selector: records
- name: chat_completions
  endpoint:
    path: /api/v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: postgres
  endpoint:
    path: /jan
    method: GET
    data_selector: records
    params: {}
- name: chat_completions
  endpoint:
    path: /api/v1/chat/completions
    method: POST
    data_selector: response
    params: {}
- name: chat_completions
  endpoint:
    path: /api/v1/chat/completions
    method: POST
    data_selector: response
    params: {}
notes:
- Standard OpenAI chat completions API for conversational AI.
- API endpoints implement rate limiting to prevent abuse.
- Jan Server supports multiple authentication methods.
- Jan is an open-source replacement for ChatGPT
- JWT-based auth with Google OAuth2 integration
- Jan v1 achieves 91.1% accuracy on SimpleQA and excels at tool calling, making it
  perfect for web search and reasoning tasks.
- Your conversations never leave your computer
- No monthly subscription fees or API costs
- No internet required once models are downloaded
- 'Privacy: Your conversations never leave your computer'
- 'Cost: No monthly subscription fees or API costs'
- 'Speed: No internet required once models are downloaded'
- 'Control: Choose exactly which models to run and how they behave'
- Max out GPU Layers for performance
- Default Context Size is 8192 tokens
- Jan defaults to 8192 tokens (roughly 6000 words) or your model's maximum, whichever
  is smaller.
- Some models require a Hugging Face Access Token. Enter your token in Settings >
  Model Providers > Hugging Face before importing.
- Uses API keys for authentication
- Make sure the model you choose is MCP-compliant before integrating it into your
  workflows.
- Ensure your AI model supports tool calling capabilities
- Granting a model access to external tools is a significant security consideration
- API Key is required for all requests.
- API Key is required for all requests and must be included in the Authorization header.
- Most users don't need to change these settings. Jan picks good defaults for your
  hardware automatically.
- The default settings work well for most hardware. Only adjust these if you're experiencing
  specific issues or want to optimize for your particular setup.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Remove any personal information before sharing logs. We only keep logs for 24 hours.
- Uses CUDA Toolkit 11.7 or newer for GPU acceleration
- Some models require a Hugging Face Access Token.
- Jan stores your data locally in JSON format. Your data is yours alone.
- Ensure to redact any private or sensitive information when sharing logs or error
  details.
- We retain your logs for only 24 hours.
- Zero data collection until you say so.
- Your private stuff stays private.
- Jan Server is in early development. APIs and deployment methods may change.
- Jan grows through contribution. It is shaped by many and belongs to everyone who
  uses it.
- The inference model image downloads the Jan-v1-4B model from Hugging Face during
  build. This requires an internet connection and several GB of download.
- User authentication via JWT and OAuth2
- For local development, you can run PostgreSQL directly using Docker
- Set environment variables for local development
- Use Docker for PostgreSQL setup
- Local development requires setting environment variables.
- PostgreSQL can be run using Docker for local development.
- Uses Bearer token for authorization
- Uses OAuth2 with JWT — requires setup of connected app in jan
- Some features may require specific environment variables
- Use JWT for authentication.
- Uses JWT for authorization — set JWT_SECRET environment variable.
errors:
- '400: Bad Request - Invalid request format'
- '401: Unauthorized - Invalid or missing authentication'
- '403: Forbidden - Insufficient permissions'
- '404: Not Found - Resource not found'
- '429: Too Many Requests - Rate limit exceeded'
- '500: Internal Server Error - Server error'
- '503: Service Unavailable - Service temporarily unavailable'
- 'Models won''t load: Try a different backend (switch from CUDA to CPU or vice versa)'
- 'Very slow performance: Make sure you''re using GPU acceleration (CUDA/Metal/Vulkan
  backend)'
- 'Out of memory errors: Reduce Context Size in model settings'
- 'Random crashes: Switch to a more stable backend (try avx instead of avx2)'
- '401 Unauthorized: Your API Key is missing from the Authorization header or is incorrect.'
- '404 Not Found: The model ID in your request body does not match an available model
  in Jan.'
- 'Connection Refused: The server is not running, or your application is pointing
  to the wrong host or port.'
- '404 Not Found: The model ID in your request body does not match an available model.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'Failed to Fetch: Check System Requirements and adjust model settings'
- 'Bind address failed: Check if ports are in use'
- 'Failed to fetch: Check System Requirements or adjust Model Settings'
- 'Permission Denied: Fix npm permissions (macOS/Linux) sudo chown -R $(whoami) ~/.npm'
- 'Pods in `ImagePullBackOff` state: Ensure Docker images were built in the minikube
  environment'
- 'Port forwarding connection refused: Verify the service is running'
- 'Inference model download fails: Ensure internet connectivity during Docker build'
- '401 Unauthorized: Recheck your JWT secret'
- '401 Unauthorized: Check your credentials.'
- '404 Not Found: Verify the endpoint path.'
- '500 Internal Server Error: Check server logs for details.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck token validity.'
- '401 Unauthorized: Recheck JWT token or its expiration'
auth_info:
  mentioned_objects:
  - JWT_SECRET
  - APIKEY_SECRET
  - OAUTH2_GOOGLE_CLIENT_ID
  - OAUTH2_GOOGLE_CLIENT_SECRET
  - OAUTH2_GOOGLE_REDIRECT_URL
  - SERPER_API_KEY
client:
  base_url: http://localhost:8080
  headers:
    Accept: application/json
source_metadata: null
