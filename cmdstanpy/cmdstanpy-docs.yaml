resources:
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: pathfinder
  endpoint:
    path: /cmdstan/pathfinder
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: draws
  endpoint:
    path: /draws
    method: GET
    data_selector: results
- name: diagnose
  endpoint:
    path: /diagnose
    method: GET
    data_selector: diagnostics
- name: summary
  endpoint:
    path: /summary
    method: GET
    data_selector: summary_statistics
- name: CmdStanMLE
  endpoint:
    path: /cmdstan/mle
    method: GET
    data_selector: results
- name: CmdStanLaplace
  endpoint:
    path: /cmdstan/laplace
    method: GET
    data_selector: results
- name: bernoulli_model
  endpoint:
    path: /users-guide/examples/bernoulli.stan
    method: GET
    data_selector: model
    params: {}
- name: bernoulli_data
  endpoint:
    path: /users-guide/examples/bernoulli.data.json
    method: GET
    data_selector: data
    params: {}
- name: bernoulli_model
  endpoint:
    path: /users-guide/examples/bernoulli.stan
    method: GET
    data_selector: records
- name: model_variables
  endpoint:
    path: /model_variables
    method: GET
    data_selector: stan_variables
- name: method_variables
  endpoint:
    path: /method_variables
    method: GET
    data_selector: method_variables
- name: draws
  endpoint:
    path: /draws
    method: GET
    data_selector: draws
- name: summary
  endpoint:
    path: /api/cmdstan/summary
    method: GET
    data_selector: summary
- name: diagnose
  endpoint:
    path: /api/cmdstan/diagnose
    method: GET
    data_selector: diagnose
- name: stan_variable
  endpoint:
    path: /api/cmdstan/stan_variable
    method: GET
    data_selector: stan_variable
    params: {}
- name: stan_variables
  endpoint:
    path: /api/cmdstan/stan_variables
    method: GET
    data_selector: stan_variables
    params: {}
- name: draws
  endpoint:
    path: /api/cmdstan/draws
    method: GET
    data_selector: draws
    params: {}
- name: draws_pd
  endpoint:
    path: /api/cmdstan/draws_pd
    method: GET
    data_selector: draws_pd
    params: {}
- name: draws_xr
  endpoint:
    path: /api/cmdstan/draws_xr
    method: GET
    data_selector: draws_xr
    params: {}
- name: method_variables
  endpoint:
    path: /api/cmdstan/method_variables
    method: GET
    data_selector: method_variables
    params: {}
- name: summary
  endpoint:
    path: /cmdstan/summary
    method: GET
    data_selector: summary_stats
- name: diagnose
  endpoint:
    path: /cmdstan/diagnose
    method: GET
    data_selector: diagnostic_info
- name: CmdStanModel
  endpoint:
    path: /api/cmdstanmodel
    method: GET
    data_selector: model
- name: variational_inference
  endpoint:
    path: /docs/reference-manual/variational.html
    method: GET
    data_selector: variational_inference
- name: Hamiltonian Monte Carlo
  endpoint:
    path: /docs/reference-manual/mcmc.html#hamiltonian-monte-carlo
    method: GET
- name: HMC algorithm parameters
  endpoint:
    path: /docs/reference-manual/mcmc.html#hmc-algorithm-parameters
    method: GET
- name: sampler_output
  endpoint:
    path: /sampler/output
    method: GET
    data_selector: records
- name: variational_inference
  endpoint:
    path: /docs/reference-manual/variational.html
    method: GET
    data_selector: variational_inference_data
    params: {}
- name: sampler_output
  endpoint:
    path: /sampler/output
    method: GET
    data_selector: records
- name: diagnostic_output
  endpoint:
    path: /diagnostic/output
    method: GET
    data_selector: records
- name: profiling_output
  endpoint:
    path: /profiling/output
    method: GET
    data_selector: records
- name: profile_statement
  endpoint:
    path: /profile/statements
    method: GET
    data_selector: rows
- name: case_studies
  endpoint:
    path: /case_studies
    method: GET
    data_selector: studies
    params: {}
- name: Bayesian Workflow for disease transmission modeling
  endpoint:
    path: /learn-stan/case-studies/boarding_school_case_study.html
    method: GET
    data_selector: records
    params: {}
- name: Reduce Sum Example
  endpoint:
    path: /learn-stan/case-studies/reduce_sum_tutorial.html
    method: GET
    data_selector: records
    params: {}
- name: Stan Notebooks in the Cloud
  endpoint:
    path: /learn-stan/case-studies/jupyter_colab_notebooks_2020.html
    method: GET
    data_selector: records
    params: {}
- name: loo
  endpoint:
    path: /mc-stan.org/loo
    method: GET
- name: summarise_draws
  endpoint:
    path: /summarise_draws
    method: GET
    data_selector: draws
- name: weakly_informative_shapes
  endpoint:
    path: /learn-stan/case-studies/weakly_informative_shapes
    method: GET
- name: CARStan
  endpoint:
    path: /learn-stan/case-studies/mbjoseph-CARStan
    method: GET
- name: radon
  endpoint:
    path: /learn-stan/case-studies/radon
    method: GET
- name: mle-params
  endpoint:
    path: /learn-stan/case-studies/mle-params
    method: GET
- name: hierarchical_2pl
  endpoint:
    path: /learn-stan/case-studies/hierarchical_2pl
    method: GET
- name: rsm_and_grsm
  endpoint:
    path: /learn-stan/case-studies/rsm_and_grsm
    method: GET
- name: pcm_and_gpcm
  endpoint:
    path: /learn-stan/case-studies/pcm_and_gpcm
    method: GET
- name: rasch_and_2pl
  endpoint:
    path: /learn-stan/case-studies/rasch_and_2pl
    method: GET
- name: tutorial_twopl
  endpoint:
    path: /learn-stan/case-studies/tutorial_twopl
    method: GET
- name: dina_independent
  endpoint:
    path: /learn-stan/case-studies/dina_independent
    method: GET
- name: pool-binary-trials
  endpoint:
    path: /learn-stan/case-studies/pool-binary-trials
    method: GET
- name: dorazio-royle-occupancy
  endpoint:
    path: /learn-stan/case-studies/dorazio-royle-occupancy
    method: GET
- name: soil-knit
  endpoint:
    path: /learn-stan/case-studies/soil-knit
    method: GET
- name: bernoulli
  endpoint:
    path: examples/bernoulli/bernoulli
    method: MAKE
    data_selector: executable
    params: {}
- name: bernoulli_windows
  endpoint:
    path: examples/bernoulli/bernoulli.exe
    method: MAKE
    data_selector: executable
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: input_data
  endpoint:
    path: data file=<filepath>
    method: GET
- name: output_control
  endpoint:
    path: output
    method: GET
- name: initialize_parameters
  endpoint:
    path: init
    method: GET
- name: random_seed
  endpoint:
    path: random seed=<int>
    method: GET
- name: chain_identifier
  endpoint:
    path: id=<int>
    method: GET
- name: bernoulli
  endpoint:
    path: /examples/bernoulli
    method: GET
    data_selector: output
    params:
      file: bernoulli.data.json
- name: bernoulli
  endpoint:
    path: /examples/bernoulli
    method: GET
    data_selector: output
    params:
      file: bernoulli.data.json
- name: sampling
  endpoint:
    path: /sampling
    method: POST
    data_selector: draws
- name: stansummary
  endpoint:
    path: /stansummary
    method: GET
    data_selector: results
    params: {}
- name: sampler_output
  endpoint:
    path: /cmdstan/sampler_output
    method: GET
    data_selector: records
- name: diagnostic_output
  endpoint:
    path: /cmdstan/diagnostic_output
    method: GET
    data_selector: records
- name: bernoulli
  endpoint:
    path: /examples/bernoulli
    method: GET
    data_selector: records
    params: {}
- name: hmc
  endpoint:
    path: /hmc
    method: GET
    data_selector: samples
    params: {}
- name: fixed_param
  endpoint:
    path: /fixed_param
    method: GET
    data_selector: samples
    params: {}
- name: bernoulli
  endpoint:
    path: /examples/bernoulli
    method: GET
    data_selector: sampler_output
- name: sample
  endpoint:
    path: /sample
    method: POST
    data_selector: results
    params:
      num_warmup: 0
      adapt engaged: false
- name: input_data
  endpoint:
    path: /data/file=<filepath>
    method: GET
- name: output_control
  endpoint:
    path: /output/file=<filepath>
    method: GET
- name: initialize_parameters
  endpoint:
    path: /init=<value>
    method: GET
- name: random_number
  endpoint:
    path: /random/seed=<int>
    method: GET
- name: chain_identifier
  endpoint:
    path: /id=<int>
    method: GET
- name: optimize
  endpoint:
    path: /optimize
    method: POST
    data_selector: output
    params:
      algorithm: lbfgs
      init_alpha: 0.001
      tol_obj: 1.0e-12
      tol_rel_obj: 10000
      tol_grad: 1.0e-08
      tol_rel_grad: 10000000.0
      tol_param: 1.0e-08
      history_size: 5
      iter: 2000
      save_iterations: false
- name: bernoulli
  endpoint:
    path: /examples/bernoulli
    method: GET
    data_selector: records
- name: pathfinder
  endpoint:
    path: /pathfinder
    method: GET
    data_selector: results
    params:
      num_paths: 4
      num_draws: 1000
      num_psis_draws: 1000
      num_elbo_draws: 25
      save_single_paths: false
      psis_resample: true
      calculate_lp: true
      max_lbfgs_iters: 1000
- name: bernoulli
  endpoint:
    path: /examples/bernoulli/bernoulli
    method: GET
    data_selector: records
- name: output_files
  endpoint:
    path: /path/to/output/files
    method: GET
    data_selector: files
    params: {}
- name: model_parameters
  endpoint:
    path: /model/parameters
    method: GET
    data_selector: parameters
- name: variational
  endpoint:
    path: /docs/cmdstan-guide/variational_config.html
    method: GET
    data_selector: configuration
    params: {}
- name: generate_quantities
  endpoint:
    path: /generate_quantities
    method: POST
    data_selector: generated quantities
    params:
      fitted_params: bernoulli_fit.csv
      data: bernoulli.data.json
      output: bernoulli_ppc.csv
- name: iterations
  endpoint:
    path: /iterations
    method: GET
    data_selector: records
- name: adaptation
  endpoint:
    path: /adaptation
    method: GET
    data_selector: records
- name: laplace
  endpoint:
    path: /laplace
    method: POST
    data_selector: results
    params:
      mode: bernoulli_optimize_lbfgs.csv
      jacobian: 'true'
      draws: 1000
      calculate_lp: 'true'
- name: bernoulli
  endpoint:
    path: /bin/stansummary
    method: GET
    data_selector: output
    params: {}
- name: diagnose
  endpoint:
    path: /cmdstan/diagnose
    method: POST
    data_selector: diagnostic
    params: {}
- name: bernoulli
  endpoint:
    path: /examples/bernoulli
    method: GET
    data_selector: records
    params: {}
- name: stansummary
  endpoint:
    path: /cmdstan-guide/stansummary
    method: GET
    data_selector: statistics
- name: algorithm
  endpoint:
    path: /algorithm
    method: GET
    data_selector: records
    params: {}
- name: sample
  endpoint:
    path: /sample
    method: GET
    data_selector: sample
    params:
      num_samples: 1000
      num_warmup: 1000
      save_warmup: false
      thin: 1
      num_chains: 1
- name: warmup_schedule
  endpoint:
    path: /warmup
    method: POST
    data_selector: schedule
    params:
      init_buffer: 10
      window: 10
      term_buffer: 10
- name: algorithm
  endpoint:
    path: /algorithm
    method: GET
    data_selector: settings
    params:
      algorithm: hmc
- name: step_size
  endpoint:
    path: /step_size
    method: GET
    data_selector: settings
    params:
      stepsize: 1
      stepsize_jitter: 0.0
- name: integration_time
  endpoint:
    path: /integration_time
    method: GET
    data_selector: settings
    params:
      engine: nuts
      max_depth: 10
- name: optimize
  endpoint:
    path: /optimize
    method: POST
    data_selector: results
    params:
      algorithm: lbfgs
      init_alpha: 0.001
      tol_obj: 1.0e-12
      tol_rel_obj: 10000
      tol_grad: 1.0e-08
      tol_rel_grad: 10000000.0
      tol_param: 1.0e-08
      history_size: 5
      iter: 2000
      save_iterations: false
- name: pathfinder
  endpoint:
    path: /pathfinder
    method: GET
    data_selector: records
    params: {}
- name: variational_inference
  endpoint:
    path: /variational
    method: POST
    data_selector: output
    params:
      iter: 10000
      grad_samples: 1
      elbo_samples: 100
      eta: 1
      adapt:
        engaged: true
        iter: 50
      tol_rel_obj: 0.01
      eval_elbo: 100
      output_samples: 1000
- name: generate_quantities
  endpoint:
    path: /generate_quantities
    method: POST
    data_selector: generated_quantities
    params:
      fitted_params: bernoulli_fit.csv
      data_file: bernoulli.data.json
      output_file: bernoulli_ppc.csv
- name: laplace
  endpoint:
    path: /laplace
    method: POST
    data_selector: results
    params:
      mode: bernoulli_optimize_lbfgs.csv
      jacobian: true
      draws: 1000
      calculate_lp: true
- name: diagnose
  endpoint:
    path: /diagnose
    method: POST
    data_selector: diagnostics
    params: {}
- name: sampler_parameters
  endpoint:
    path: /bin/stansummary
    method: GET
    data_selector: sampler_parameters
    params: {}
- name: model_parameters
  endpoint:
    path: /bin/stansummary
    method: GET
    data_selector: model_parameters
    params: {}
- name: diagnose
  endpoint:
    path: /cmdstan-guide/diagnose_utility.html
    method: GET
    data_selector: output
    params: {}
- name: external_cpp_code
  endpoint:
    path: /docs/cmdstan-guide/external_code.html
    method: GET
    data_selector: content
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- If unspecified, output files will be written to a temporary directory which is deleted
  upon session exit.
- Default value is 100.
- Step size used by sampler for each chain.
- When sampler algorithm ‘fixed_param’ is specified, step size is None.
- Period between recorded iterations. (Default is 1)
- Period between recorded iterations. (Default is 1).
- CmdStanPy is a pure-Python3 package which wraps CmdStan, the command-line interface
  to Stan which is written in C++.
- 'Windows only: CmdStan requires that the Intel TBB library can be found by the Windows
  system.'
- The CmdStan Makefile is in the <cmdstan-home> directory and is named makefile.
- Make only works properly when invoked from the <cmdstan-home> directory.
- Recommended for Windows users to use conda for installation.
- Building CmdStan may take 10+ minutes and consume 2+ GB of memory.
- CmdStanPy is a lightweight interface to Stan for Python.
- CmdStanPy wraps the CmdStan file-based command line interface.
- CmdStan relies on the GNU Make utility to build both the Stan model executables
  and the CmdStan tools.
- Make only works properly when invoked from the <cmdstan-home> directory
- CmdStanPy accepts input data as a Python dictionary or JSON file.
- The model can be fit using methods like sample, pathfinder, variational, and optimize.
- CmdStan is file-based interface.
- Model compilation is carried out via the GNU Make build tool.
- The sampler outputs are the set of per-chain Stan CSV files, a non-standard CSV
  file format.
- Adaptation during warmup occurs in three stages.
- Outputs are written to a temporary directory to avoid filling up the filesystem
  with unneeded CmdStan output files.
- MCMC convergence time is roughly equivalent to the autocorrelation time.
- A divergence arises when the simulated Hamiltonian trajectory departs from the true
  trajectory.
- ADVI uses Monte Carlo integration to approximate the variational objective function.
- The recommended default value for elbo_samples is 100.
- The recommended default value for grad_samples is 1.
- Stan is able to automatically optimize step size to match an acceptance-rate target.
- The warmup period is split into three stages for adaptation.
- 'Stan allows a choice among three Euclidean HMC implementations: unit metric, diagonal
  metric, and dense metric.'
- The metric compensates for only linear correlations in the posterior.
- Data is strictly numerical, including representations of infinity and NaN.
- CSV files may contain comment rows making parsing difficult.
- ADVI optimizes the ELBO in the real-coordinate space using stochastic gradient ascent
- The number of draws used to approximate the ELBO is denoted by elbo_samples
- The number of draws used to approximate the gradients is denoted by grad_samples
- ADVI uses a warmup adaptation phase that selects a good value for eta
- ADVI tracks the progression of the ELBO through the stochastic optimization
- Data is strictly numerical, possible values include NaN, inf, +inf, -inf
- The number of significant digits can be controlled with argument sig_figs=<int>
- No guarantees are made about backwards compatibility between minor versions and
  refactors are expected.
- Conda simplifies the installation process by ensuring that all required libraries
  and tools are compatible with each other and is available for Linux, Mac, and Windows
  platforms.
- Stan CSV files have a header row containing the column names.
- Data is strictly numerical but can include NaN, inf, +inf, -inf.
- Warnings can indicate important problems with the model.
- In early stages of modelling, rough checks can help avoid extensive debugging.
- Diagnosing problems is best thought of as a part of larger workflow of model building,
  testing and critique/evaluation.
- Building blocks of such workflow are provided in our Bayesian Workflow article.
- Copyright 2011–2024, Stan Development Team and their assignees.
- The Stan name and logo are registered trademarks of NumFOCUS.
- The case studies reflect best practices in Bayesian methodology and Stan programming.
- This does not install the vignettes, which take a long time to build, but they are
  always available online at https://mc-stan.org/cmdstanr/articles/
- Stan is an expressive probabilistic programming language that abstracts the inference
  and allows users to focus on the modeling.
- RStan is the R interface to Stan
- RStan is licensed under GPLv3
- We do not recommend setting `build_vignettes=TRUE` when installing from GitHub because
  some of the vignettes take a long time to build and are always available online
  at [mc-stan.org/loo/articles/](https://mc-stan.org/loo/articles/).
- The posterior R package is intended to provide useful tools for both users and developers
  of packages for fitting Bayesian models or working with output from Bayesian models.
- Fitting models with rstanarm is also useful for experienced Bayesian software users
  who want to take advantage of the pre-compiled Stan programs that are written by
  Stan developers and carefully implemented to prioritize numerical stability and
  the avoidance of sampling problems.
- In most cases the warnings actually indicate important problems with your model.
- If warnings occur rarely or the diagnostics are just somewhat above the recommended
  threshold, it often makes sense to do some rough sanity checks before investigating
  the warnings in detail.
- Data is strictly numerical, can include NaN, inf, +inf, -inf.
- 'CSV files may contain comments starting with #.'
- Each case is problematic in its own way and there is no single approach that would
  always work.
- If your model has multiple components, build and test small models where each of
  the components is separate.
- Working with a suitable subset of the data can speed the process up.
- Including a reasonable prior will not always solve problems of computation, but
  often it gets rid of the worst problems.
- Problems are almost as likely a result of a programming error as they are a truly
  statistical issue.
- The Stan Development Team places a high priority on notifying users about any issue
  that could potentially be important.
- Data is strictly numerical with possible values including both positive and negative
  infinity and 'Not-a-Number'.
- The CSV header row lists all sampler parameters, model parameters, transformed parameters,
  and quantities of interest.
- The Make program may take 10+ minutes and consume 2+ GB of memory to build CmdStan.
- Stan is freedom-respecting, open-source software.
- Stan has grown from a small research project started in 2011 at Columbia University
  to a global community of developers, researchers, and users.
- The directory path names cannot contain spaces.
- Use forward slashes for paths on Windows.
- Models must be rewritten to use the `reduce_sum` and `map_rect` functions for multi-threading.
- OpenCL is supported on most modern CPUs and GPUs.
- CmdStan executable is built from the Stan model concept and the CmdStan command
  line parser.
- The default name of the output file is output.csv.
- Installation from GitHub does not include the vignettes by default because they
  take some time to build, but the vignettes can always be accessed online anytime
  at mc-stan.org/bayesplot/articles.
- We do *not* recommend setting `build_vignettes=TRUE` when installing from GitHub
  because some of the vignettes take a long time to build and are always available
  online at [mc-stan.org/loo/articles/](https://mc-stan.org/loo/articles/).
- Default method is sample using NUTS.
- Output is stored in a CSV file.
- By default, the metric is estimated during warmup adaptation.
- If adaptation is disabled, both the metric_file and stepsize arguments should be
  specified.
- As of Stan version 2.34, the adapted metric can be saved in JSON format.
- ShinyStan provides immediate, informative, customizable visual and numerical summaries
  of model parameters and convergence diagnostics for MCMC simulations.
- The default number of samples and warmup iterations is 1000.
- Data is strictly numerical with possible values including NaN, inf, +inf, -inf.
- The number of significant digits written can be controlled with argument sig_figs=<int>.
- CSV files have a header row containing column names.
- 'Extensive use of CSV comments, i.e., lines which begin with the # character.'
- Uses standard output from Stan for processing
- Results include mean, standard deviation, percentiles, and effective sample size
- Data is strictly numerical, and NaN values are represented as strings.
- Comment rows can make it difficult to use commonly used CSV parser packages.
- Default number of samples is 1000
- Default number of warmup iterations is 1000
- Default output file is output.csv
- CmdStan requires that the Intel TBB library can be found by the Windows system.
- CmdStan is known compatible with the RTools45 toolchain
- The default value for delta is 0.8.
- The default value for gamma is 0.05.
- The default value for kappa is 0.75.
- The default value for t_0 is 10.
- The default argument for algorithm is hmc.
- The default argument for engine is nuts.
- The default argument for max_depth is 10.
- The default argument for stepsize is 1.
- The default value for stepsize_jitter is 0.
- Models with difficult posterior geometries may required increasing the max_depth
  argument from its default value 10.
- Users can set flags for the C++ compiler and linker and compiler to optimize their
  executables.
- The use of these flags does considerably slow down compilation, so they are not
  used by default.
- Default method is sample with num_samples and num_warmup set to 1000.
- In order to enable the OpenCL backend the model must be compiled with the STAN_OPENCL
  makefile flag defined/non-empty.
- If you are using OpenCL with an integrated GPU you also need to define the INTEGRATED_OPENCL
  flag.
- Disabling adaptation disables both metric and stepsize adaptation, so a stepsize
  should be provided along with a metric to enable efficient sampling.
- The executable does not need to be recompiled in order to switch from sampling to
  optimization.
- Optimization algorithms provide a deterministic method to find the posterior mode.
- Default num_samples is 1000
- Default num_warmup is 1000
- Default save_warmup is false
- Default thin is 1
- Default num_chains is 1
- The method runs multi-path Pathfinder by default.
- Default number of samples is 1000.
- Default number of warmup iterations is 1000.
- HMC algorithm uses No-U-Turn Sampler (NUTS) by default.
- The boolean option `save_single_paths` is used to save both the draws and the ELBO
  iterations from the individual Pathfinder runs.
- The default value for delta is 0.8 and must be strictly between 0 and 1.
- The default value for stepsize is 1.
- The default value for engine is nuts.
- The default value for max_depth is 10.
- This procedure has not been thoroughly tested and may be unstable or buggy.
- The interface is subject to change.
- By default, the metric is estimated during warmup adaptation. If the initial guess
  is good, then adaptation should not change it much. If the metric is no good, then
  the adaptation will override the initial guess.
- Uses NUTS with a default step size of 1.
- The default Metropolis acceptance rate is 0.8.
- The default value for jacobian is true.
- The default value for draws is 1000.
- The default value for calculate_lp is true.
- Uses HMC with nuts for sampling
- For reproducibility, specify the same RNG seed across all chains
- Startup and data initialization costs mean that this method is not an efficient
  way to calculate these quantities.
- To relax the test threshold, specify the error argument.
- The default inference engine used is the No-U-Turn sampler (NUTS)
- Output is in CSV format with default name output.csv
- Each parameter's statistics are computed directly from all draws across all chains.
- The default delta value is 0.8 and must be strictly between 0 and 1.
- The default gamma value is 0.05.
- The default kappa value is 0.75.
- The default t_0 value is 10.
- The default stepsize value is 1.
- The default stepsize_jitter value is 0.
- The default engine value is nuts.
- The default max_depth value is 10.
- Models with difficult posterior geometries may required increasing the `max_depth`
  argument from its default value 10.
- Uses NUTS for sampling with Hamiltonian Monte Carlo
- Warnings about hitting the maximum treedepth are not as serious as warnings about
  divergent transitions.
- If the divergent transitions cannot be eliminated by increasing the adapt_delta
  parameter, we have to find a different way to write the model.
- By default, the metric is estimated during warmup adaptation. If the initial guess
  is good, then adaptation should not change it much.
- It is still advisable to run warmup iterations in order to allow the initial parameter
  values to be adjusted to estimates which fall within the typical set.
- Although the RDump format is still supported, I/O with JSON is faster and recommended.
- This is an advanced feature which is only recommended to users familiar with the
  internals of Stan’s Math library. Most existing C++ code will need to be modified
  to work with Stan, to varying degrees.
- By default, the Pathfinder algorithm runs 4 single-path Pathfinders in parallel,
  then uses importance resampling on the set of returned draws to produce the specified
  number of draws.
- Uses single-path Pathfinder with output CSV and JSON files.
- The algorithm runs until the mean change in ELBO drops below the specified tolerance.
- Uses the MAP estimate from optimization as the mode argument
- Default values for jacobian, draws, and calculate_lp are true, 1000, and true respectively
- Startup and data initialization costs mean that this method is not an efficient
  way to calculate these quantities. It is provided only for convenience and should
  not be used for serious computation.
- 'To relax the test threshold, specify the error argument as follows: > ./my_model
  diagnose test=gradient error=0.0001 data file=my_data'
- NaN values for some columns are expected if the value doesn’t change.
- Divergent transitions after warmup indicate potentially biased estimates.
- Warnings about hitting the maximum treedepth are efficiency concerns.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'make: *** No rule to make target `make/command''.  Stop.'
- Divergent transitions may indicate poor performance in sampling.
- 'Divergent transitions: Indicates extreme curvature and poorly-chosen step size.'
- 'Invalid CSV format: Ensure correct delimiter usage.'
- 'Sampling timeout: Increase sampling time or optimize model.'
- Divergent transitions after warmup can indicate biased estimates.
- Exceptions thrown when Hamiltonian proposal rejected may indicate numerical problems.
- High R-hat suggests poor chain mixing.
- Divergent transitions after warmup
- Exceptions thrown when Hamiltonian proposal rejected
- R-hat
- Bulk- and Tail-ESS
- Maximum treedepth
- BFMI low
- Rhat is less than 1.01 and ESS grows linearly with the number of iterations and
  eventually exceeds the recommended limit indicates sufficient mixing but high autocorrelation.
- 0 - Program ran to termination as expected.
- 'value in range [1 : 125] - Method invoked could not run due to problems with model
  or data.'
- value > 128 - Fatal error during execution, process terminated by signal.
- Output generated in CSV format.
- 'Invalid input data file: Ensure the file exists and is correctly formatted.'
- 'Invalid CSV format: Ensure correct formatting and check for comment rows.'
- 'Parameter mismatch: Verify parameter names in the Stan model.'
- 'No such file or directory: Check target paths and dependencies'
- 'No rule to make target: Ensure correct Makefile usage'
- 'Semantic error in ''bernoulli.stan'': Identifier ''thata'' not in scope.'
- 'Ill-typed arguments supplied to assignment operator =: lhs has type int and rhs
  has type real.'
- '0: Program ran to termination as expected.'
- '1-125: Method invoked could not run due to problems with model or data.'
- 'value > 128: Fatal error during execution, process terminated by signal.'
- 'Convergence detected: relative gradient magnitude is below tolerance'
- 'Invalid configuration: Ensure num_samples and num_warmup are non-negative integers.'
- Error reading fitted param names from sample csv file <filename.csv>
- 'Exception: lub_free: Bounded variable is 1.21397, but must be in the interval [0,
  1] (in ''bernoulli_ppc.stan'', line 5, column 2 to column 30)'
- 'Invalid configuration: Ensure the sampling parameters are set correctly'
- 'Invalid number of samples: must be a non-negative integer'
- 'Invalid warmup: must be a non-negative integer'
- Thinning must be a positive integer
- 'Divergent transitions after warmup: If there are any divergences after warmup,
  then the sample based estimates may be biased.'
- 'Maximum treedepth exceeded: When the maximum allowed tree depth is reached it indicates
  that NUTS is terminating prematurely to avoid excessively long execution time.'
- 'Low E-BFMI values: If the standard deviation of energy is much larger than D/2,
  the sampler is unlikely to explore the posterior adequately.'
- 'Low effective sample sizes: The higher the ESS the better.'
- 'High R^: If chains have not mixed well, R^ is larger than 1.'
- adapt is either mistyped or misplaced.
- Failed to parse arguments, terminating Stan
- 'Gradient evaluation took too long: Adjust expectations accordingly.'
- 'Exception: lub_free: Bounded variable is 1.21397, but must be in the interval [0,
  1]'
- Divergent transitions indicate that HMC is not fully able to explore the posterior
  distribution.
- Maximum treedepth exceeded indicates NUTS is terminating prematurely.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - CmdStanMCMC
  - CmdStanVB
client:
  base_url: https://mc-stan.org
  headers:
    Accept: application/json
source_metadata: null
