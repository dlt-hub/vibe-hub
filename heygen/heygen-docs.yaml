resources:
- name: list_all_avatars_in_one_avatar_group
  endpoint:
    path: /v2/avatar_group/{group_id}/avatars
    method: GET
    data_selector: avatar_list
- name: video_generate
  endpoint:
    path: /v2/video/generate
    method: POST
    data_selector: data
    params: {}
- name: video_status
  endpoint:
    path: /v1/video_status.get
    method: GET
    data_selector: data
    params: {}
- name: asset_list
  endpoint:
    path: /v1/asset/list
    method: GET
- name: asset_delete
  endpoint:
    path: /v1/asset/<asset_id>/delete
    method: DELETE
- name: streaming_new
  endpoint:
    path: /v1/streaming.new
    method: POST
- name: streaming_keep_alive
  endpoint:
    path: /v1/streaming.keep_alive
    method: POST
- name: knowledge_base_management
  endpoint:
    path: /v1/streaming/knowledge_base/*
    method: GET
- name: avatar_details
  endpoint:
    path: /v2/avatar/{avatar_id}/details
    method: GET
- name: voice_locales
  endpoint:
    path: /v2/voices/locales
    method: GET
- name: streaming_list_sessions
  endpoint:
    path: /v2/streaming.list
    method: GET
- name: video_generate
  endpoint:
    path: /v2/video/generate
    method: POST
    data_selector: data
    params: {}
- name: video_status
  endpoint:
    path: /v1/video_status.get
    method: GET
    data_selector: data
    params: {}
- name: list_avatars
  endpoint:
    path: /v2/avatars
    method: GET
    data_selector: data.avatars
- name: list_voices
  endpoint:
    path: /v2/voices
    method: GET
    data_selector: data.voices
- name: generate_video
  endpoint:
    path: /v2/video/generate
    method: POST
    data_selector: data.video_id
- name: video_status
  endpoint:
    path: /v1/video_status.get
    method: GET
    params:
      video_id: <video_id>
- name: generate_video
  endpoint:
    path: /v2/video/generate
    method: POST
    data_selector: data
    params: {}
- name: video_generation
  endpoint:
    path: /v2/video/generate
    method: POST
    data_selector: data
    params: {}
- name: avatars
  endpoint:
    path: /v2/avatars
    method: GET
    data_selector: data.avatars
- name: voices
  endpoint:
    path: /v2/voices
    method: GET
    data_selector: data.voices
- name: templates
  endpoint:
    path: /v2/templates
    method: GET
    data_selector: data.templates
- name: template
  endpoint:
    path: /v2/template/<template_id>
    method: GET
    data_selector: data.variables
- name: generate_video
  endpoint:
    path: /v2/template/<template_id>/generate
    method: POST
    data_selector: data.video_id
- name: video_status
  endpoint:
    path: /v1/video_status.get
    method: GET
    data_selector: data
- name: templates
  endpoint:
    path: /v2/templates
    method: GET
    data_selector: data.templates
    params: {}
- name: template_elements
  endpoint:
    path: /v2/template/<template_id>
    method: GET
    data_selector: data.variables
    params: {}
- name: generate_video
  endpoint:
    path: /v2/template/<template_id>/generate
    method: POST
    data_selector: data.video_id
    params: {}
- name: templates
  endpoint:
    path: /v2/templates
    method: GET
    data_selector: data.templates
    params: {}
- name: template_elements
  endpoint:
    path: /v2/template/<template_id>
    method: GET
    data_selector: data.variables
    params: {}
- name: generate_video
  endpoint:
    path: /v2/template/<template_id>/generate
    method: POST
    data_selector: data.video_id
    params: {}
- name: templates
  endpoint:
    path: /v2/templates
    method: GET
    data_selector: data.templates
- name: template_elements
  endpoint:
    path: /v2/template/<template_id>
    method: GET
    data_selector: data.variables
- name: generate_video
  endpoint:
    path: /v2/template/<template_id>/generate
    method: POST
    data_selector: data.video_id
- name: templates
  endpoint:
    path: /v2/templates
    method: GET
    data_selector: data.templates
- name: template
  endpoint:
    path: /v2/template/<template_id>
    method: GET
    data_selector: data.variables
- name: generate_video
  endpoint:
    path: /v2/template/<template_id>/generate
    method: POST
    data_selector: data.video_id
- name: voices
  endpoint:
    path: /v2/voices
    method: GET
    data_selector: data
- name: templates
  endpoint:
    path: /v2/templates
    method: GET
    data_selector: data.templates
    params: {}
- name: template_elements
  endpoint:
    path: /v2/template/<template_id>
    method: GET
    data_selector: data.variables
    params: {}
- name: generate_video
  endpoint:
    path: /v2/template/<template_id>/generate
    method: POST
    data_selector: data.video_id
    params: {}
- name: templates
  endpoint:
    path: /v2/templates
    method: GET
    data_selector: templates
- name: template_elements
  endpoint:
    path: /v2/template/<template_id>
    method: GET
    data_selector: variables
- name: generate_video
  endpoint:
    path: /v2/template/<template_id>/generate
    method: POST
    data_selector: data
- name: video_playback_styles
  endpoint:
    path: /video_playback_styles
    method: GET
    data_selector: styles
    params: {}
- name: video_generation
  endpoint:
    path: /v2/template/{template_id}/generate
    method: POST
    data_selector: data
    params: {}
- name: video_status
  endpoint:
    path: /v1/video_status.get
    method: GET
    data_selector: data
    params: {}
- name: webhook_events
  endpoint:
    path: /v1/webhook/webhook.list
    method: GET
    data_selector: data
    params: {}
- name: register_webhook
  endpoint:
    path: /v1/webhook/endpoint.add
    method: POST
    data_selector: data
    params: {}
- name: list_webhook_endpoints
  endpoint:
    path: /v1/webhook/endpoint.list
    method: GET
    data_selector: data
    params: {}
- name: update_webhook_endpoint
  endpoint:
    path: /v1/webhook/endpoint.update
    method: PATCH
    data_selector: data
    params: {}
- name: delete_webhook_endpoint
  endpoint:
    path: /v1/webhook/endpoint.delete
    method: DELETE
    data_selector: null
    params: {}
- name: webhook_endpoint
  endpoint:
    path: /v1/webhook/endpoint.add
    method: POST
    data_selector: data
    params: {}
- name: target_languages
  endpoint:
    path: /v2/video_translate/target_languages
    method: GET
    data_selector: data.languages
- name: video_translate
  endpoint:
    path: /v2/video_translate
    method: POST
    data_selector: data.video_translate_id
- name: video_translate_status
  endpoint:
    path: /v2/video_translate/<video_translate_id>
    method: GET
    data_selector: data
- name: generate_ai_avatar_photo
  endpoint:
    path: /v2/photo_avatar/photo/generate
    method: POST
    data_selector: data
- name: check_generation_status
  endpoint:
    path: /v2/photo_avatar/generation/{generation_id}
    method: GET
    data_selector: data
- name: create_photo_avatar_group
  endpoint:
    path: /v2/photo_avatar/avatar_group/create
    method: POST
    data_selector: data
    params: {}
- name: add_looks_to_avatar_group
  endpoint:
    path: /v2/photo_avatar/avatar_group/add
    method: POST
    data_selector: data
    params: {}
- name: train_photo_avatar_group
  endpoint:
    path: /v2/photo_avatar/train
    method: POST
    data_selector: data
    params: {}
- name: get_training_job_status
  endpoint:
    path: /v2/photo_avatar/train/status/{job_id}
    method: GET
    data_selector: data
    params: {}
- name: generate_look
  endpoint:
    path: /photo_avatar/look/generate
    method: POST
    data_selector: data
    params:
      group_id: 0711b7c97f844dda9fa8acab475beda0
      prompt: White shirt front-facing
      orientation: square
      pose: half_body
      style: Realistic
- name: check_generation_status
  endpoint:
    path: /photo_avatar/generation/{generation_id}
    method: GET
    data_selector: data
- name: avatar_group
  endpoint:
    path: /v2/avatar_group.list
    method: GET
    data_selector: data.avatar_group_list
    params: {}
- name: avatar_look
  endpoint:
    path: /v2/avatar_group/<group_id>/avatars
    method: GET
    data_selector: data.avatar_list
    params: {}
- name: generate_video
  endpoint:
    path: /v2/video/generate
    method: POST
    data_selector: data.video_id
    params: {}
- name: streaming.new
  endpoint:
    path: /v1/streaming.new
    method: POST
    data_selector: session_id
- name: streaming.start
  endpoint:
    path: /v1/streaming.start
    method: POST
    data_selector: session_info
- name: streaming.task
  endpoint:
    path: /v1/streaming.task
    method: POST
    data_selector: task_response
- name: streaming.stop
  endpoint:
    path: /v1/streaming.stop
    method: POST
    data_selector: stop_response
- name: create_token
  endpoint:
    path: /v1/streaming.create_token
    method: POST
    data_selector: data.token
- name: new_session
  endpoint:
    path: /v1/streaming.new
    method: POST
    data_selector: data
- name: start_streaming
  endpoint:
    path: /v1/streaming.start
    method: POST
    data_selector: data
- name: stop_streaming
  endpoint:
    path: /v1/streaming.stop
    method: POST
    data_selector: data
- name: task
  endpoint:
    path: /v1/streaming.task
    method: POST
    data_selector: data
- name: create_session_token
  endpoint:
    path: /v1/streaming.create_token
    method: POST
    data_selector: data.session_token
- name: create_new_session
  endpoint:
    path: /v1/streaming.new
    method: POST
    data_selector: data
- name: start_streaming_session
  endpoint:
    path: /v1/streaming.start
    method: POST
    data_selector: data
- name: close_session
  endpoint:
    path: /v1/streaming.stop
    method: POST
- name: send_text_to_avatar
  endpoint:
    path: /v1/streaming.task
    method: POST
- name: create_token
  endpoint:
    path: /v1/streaming.create_token
    method: POST
    data_selector: data.token
- name: start_streaming
  endpoint:
    path: /v1/streaming.start
    method: POST
    data_selector: data
    params: {}
- name: new_session
  endpoint:
    path: /v1/streaming.new
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /v1/streaming.task
    method: POST
    data_selector: data
    params: {}
- name: stop_streaming
  endpoint:
    path: /v1/streaming.stop
    method: POST
    data_selector: data
    params: {}
- name: streaming_new
  endpoint:
    path: /v1/streaming.new
    method: POST
    data_selector: ''
    params:
      activity_idle_timeout: 120
- name: streaming_keep_alive
  endpoint:
    path: /v1/streaming.keep_alive
    method: POST
    data_selector: ''
    params: {}
- name: create_session_token
  endpoint:
    path: /reference/create-session-token
    method: POST
- name: create_token
  endpoint:
    path: /reference/create-session-token
    method: POST
- name: newSession
  endpoint:
    path: /reference/new-session
    method: POST
- name: speak
  endpoint:
    path: /reference/send-task
    method: POST
- name: create_session_token
  endpoint:
    path: /reference/create-session-token
    method: POST
- name: new_session
  endpoint:
    path: /reference/new-session
    method: POST
- name: speak
  endpoint:
    path: /reference/send-task
    method: POST
- name: create_session_token
  endpoint:
    path: /reference/create-session-token
    method: POST
- name: speak
  endpoint:
    path: /reference/send-task
    method: POST
- name: streaming.create_token
  endpoint:
    path: /v1/streaming.create_token
    method: POST
    data_selector: data
- name: video_translate
  endpoint:
    path: /v2/video_translate
    method: POST
    data_selector: translation_id
- name: translation
  endpoint:
    path: /api/translation
    method: POST
    data_selector: responses
    params: {}
- name: account
  endpoint:
    path: /v1/pacific/account.get
    method: GET
    data_selector: data
- name: list_avatars
  endpoint:
    path: /v2/avatars
    method: GET
    data_selector: data.avatars
- name: list_voices
  endpoint:
    path: /v2/voices
    method: GET
    data_selector: data.voices
- name: generate_video
  endpoint:
    path: /v2/video/generate
    method: POST
    data_selector: data.video_id
- name: video_status
  endpoint:
    path: /v1/video_status.get
    method: GET
    data_selector: data
- name: templates
  endpoint:
    path: /v2/templates
    method: GET
    data_selector: data.templates
    params: {}
- name: template_elements
  endpoint:
    path: /v2/template/<template_id>
    method: GET
    data_selector: data.variables
    params: {}
- name: generate_video
  endpoint:
    path: /v2/template/<template_id>/generate
    method: POST
    data_selector: data.video_id
    params: {}
- name: video_status
  endpoint:
    path: /v1/video_status.get
    method: GET
    data_selector: data
    params:
      video_id: <video_id>
- name: video_status
  endpoint:
    path: /v1/video_status.get
    method: GET
    data_selector: data
    params: {}
- name: avatars
  endpoint:
    path: /v2/avatars
    method: GET
    data_selector: avatars
- name: list_all_voices
  endpoint:
    path: /v2/voices
    method: GET
    data_selector: voices
- name: locales
  endpoint:
    path: /voices/locales
    method: GET
- name: avatar_group
  endpoint:
    path: /avatar_group.list
    method: GET
    data_selector: avatar_group_list
    params:
      include_public: 'false'
- name: avatar_details
  endpoint:
    path: /v2/avatar/{avatar_id}/details
    method: GET
    data_selector: data
- name: create_avatar_video
  endpoint:
    path: /v2/video/generate
    method: POST
- name: create_avatar_video
  endpoint:
    path: /video/generate
    method: POST
- name: retrieve_video_status
  endpoint:
    path: /video/status
    method: GET
- name: delete_video
  endpoint:
    path: /v1/video.delete
    method: DELETE
    data_selector: object
    params:
      video_id: string
      type: string
- name: create_webm_video
  endpoint:
    path: /v1/video.webm
    method: POST
    data_selector: data
    params: {}
- name: create_avatar_iv_video
  endpoint:
    path: /v2/video/av4/generate
    method: POST
    data_selector: object
- name: video_list
  endpoint:
    path: /v1/video.list
    method: GET
    data_selector: data.videos
    params:
      limit: 'null'
- name: retrieve_sharable_video_url
  endpoint:
    path: /v1/video/share
    method: POST
    data_selector: object
    params: {}
- name: templates
  endpoint:
    path: /v2/templates
    method: GET
    data_selector: templates
- name: template
  endpoint:
    path: /v2/template/{template_id}
    method: GET
- name: template
  endpoint:
    path: /v3/template/{template_id}
    method: GET
- name: generate_video_from_template
  endpoint:
    path: /v2/template/{template_id}/generate
    method: POST
    data_selector: null
    params: {}
- name: list_supported_languages
  endpoint:
    path: /v2/video_translate/target_languages
    method: GET
- name: video_translate
  endpoint:
    path: /v2/video_translate
    method: POST
- name: check_translation_status
  endpoint:
    path: /v2/video_translate/{video_translate_id}
    method: GET
    data_selector: data
    params: {}
- name: video_translate_caption
  endpoint:
    path: /v2/video_translate/caption
    method: GET
    data_selector: data
    params: {}
- name: generate_proofread
  endpoint:
    path: /v2/video_translate/proofread
    method: POST
    data_selector: proofread_id
- name: check_proofread_status
  endpoint:
    path: /v2/video_translate/proofread/status/{proofread_id}
    method: GET
    data_selector: data
    params: {}
- name: download_proofread_srt
  endpoint:
    path: /v2/video_translate/proofread/{proofread_id}/download-srt
    method: GET
    data_selector: data.srt_url
    params: {}
- name: upload_srt
  endpoint:
    path: /v2/video_translate/proofread/<proofread_id>/upload-srt
    method: POST
- name: generate_video_from_proofread
  endpoint:
    path: /v2/video_translate/proofread/<proofread_id>/generate
    method: POST
    data_selector: video_translate_id
    params: {}
- name: new_session
  endpoint:
    path: /v1/streaming.new
    method: POST
- name: streaming_new
  endpoint:
    path: /streaming.new
    method: POST
    data_selector: object
- name: start_session
  endpoint:
    path: /v1/streaming.start
    method: POST
    data_selector: status
    params: {}
- name: list_sessions_active
  endpoint:
    path: /streaming.list
    method: GET
    data_selector: sessions
- name: list_sessions_history
  endpoint:
    path: /v2/streaming.list
    method: GET
    data_selector: data
    params:
      page: 1
      page_size: 10
- name: send_task
  endpoint:
    path: /v1/streaming.task
    method: POST
    data_selector: object
- name: close_session
  endpoint:
    path: /v1/streaming.stop
    method: POST
    data_selector: status
    params: {}
- name: interrupt_task
  endpoint:
    path: /v1/streaming.interrupt
    method: POST
- name: create_session_token
  endpoint:
    path: /v1/streaming.create_token
    method: POST
    data_selector: data.token
- name: streaming_avatar
  endpoint:
    path: /streaming/avatar.list
    method: GET
    data_selector: data
- name: keep_alive
  endpoint:
    path: /v1/streaming.keep_alive
    method: POST
- name: list_knowledge_bases
  endpoint:
    path: /v1/streaming/knowledge_base/list
    method: GET
- name: create_knowledge_base
  endpoint:
    path: /v1/streaming/knowledge_base/create
    method: POST
- name: list_knowledge_bases
  endpoint:
    path: /v1/streaming/knowledge_base
    method: GET
- name: update_knowledge_base
  endpoint:
    path: /v1/streaming/knowledge_base/{knowledge_base_id}
    method: POST
- name: delete_knowledge_base
  endpoint:
    path: /v1/streaming/knowledge_base/{knowledge_base_id}/delete
    method: POST
    data_selector: object
- name: generate_photo_avatar
  endpoint:
    path: /v2/photo_avatar/photo/generate
    method: POST
- name: create_photo_avatar_group
  endpoint:
    path: /v2/photo_avatar/avatar_group/create
    method: POST
- name: add_looks_to_photo_avatar_group
  endpoint:
    path: /v2/photo_avatar/avatar_group/add
    method: POST
- name: train_photo_avatar_group
  endpoint:
    path: /v2/photo_avatar/train
    method: POST
- name: generate_photo_avatar_looks
  endpoint:
    path: /v2/photo_avatar/look/generate
    method: POST
- name: add_motion
  endpoint:
    path: /v2/photo_avatar/add_motion
    method: POST
- name: add_sound_effect
  endpoint:
    path: /v2/photo_avatar/add_sound_effect
    method: POST
    data_selector: object
- name: photo_avatar_details
  endpoint:
    path: /v2/photo_avatar/{id}
    method: GET
- name: upscale_avatar
  endpoint:
    path: /v2/photo_avatar/upscale
    method: POST
    data_selector: object
- name: delete_photo_avatar
  endpoint:
    path: /v2/photo_avatar/{avatar_id}
    method: DELETE
    data_selector: object
    params: {}
- name: delete_photo_avatar_group
  endpoint:
    path: /v2/photo_avatar_group/{avatar_group_id}
    method: DELETE
- name: brand_voice
  endpoint:
    path: /v1/brand_voice/list
    method: GET
    data_selector: object
    params:
      limit: '100'
- name: update_brand_voice
  endpoint:
    path: /v1/brand_voice/{brand_voice_id}
    method: POST
- name: remaining_quota
  endpoint:
    path: /v2/user/remaining_quota
    method: GET
    data_selector: data
    params: {}
- name: current_user
  endpoint:
    path: /v1/user/me
    method: GET
    data_selector: object
- name: upload_asset
  endpoint:
    path: /v1/asset
    method: POST
    data_selector: data
    params: {}
- name: assets
  endpoint:
    path: /asset
    method: POST
- name: assets
  endpoint:
    path: /asset/list
    method: GET
    data_selector: assets
- name: delete_asset
  endpoint:
    path: /v1/asset/{asset_id}/delete
    method: POST
    data_selector: object
- name: webhook_endpoints
  endpoint:
    path: /v1/webhook/endpoint.list
    method: GET
    data_selector: data
- name: webhook_endpoint
  endpoint:
    path: /v1/webhook/endpoint.add
    method: POST
- name: list_webhook_endpoints
  endpoint:
    path: /v1/webhook/endpoints
    method: GET
- name: update_webhook_endpoint
  endpoint:
    path: /v1/webhook/endpoint.update
    method: PATCH
- name: delete_webhook_endpoint
  endpoint:
    path: /v1/webhook/endpoint.delete
    method: DELETE
- name: list_available_webhook_events
  endpoint:
    path: /v1/webhook/webhook.list
    method: GET
- name: update_webhook_endpoint
  endpoint:
    path: /v1/webhook/endpoint.update
    method: PATCH
    data_selector: data
- name: delete_webhook_endpoint
  endpoint:
    path: /v1/webhook/endpoint.delete
    method: DELETE
    data_selector: object
    params:
      endpoint_id: string
- name: list_available_webhook_events
  endpoint:
    path: /v1/webhook/webhook.list
    method: GET
    data_selector: data
- name: folders
  endpoint:
    path: /v1/folders
    method: GET
    data_selector: object
- name: create_folder
  endpoint:
    path: /v1/folders/create
    method: POST
    data_selector: object
    params: {}
- name: update_folder
  endpoint:
    path: /v1/folders/{folder_id}
    method: POST
- name: trash_folder
  endpoint:
    path: /v1/folders/{folder_id}/trash
    method: POST
- name: restore_folder
  endpoint:
    path: /v1/folders/{folder_id}/restore
    method: POST
- name: send_task
  endpoint:
    path: /v1/streaming.task
    method: POST
    data_selector: object
notes:
- While still on a Free Trial of the HeyGen API, your videos will be watermarked.
- The video file URL you get will expire in 7 days.
- KEEP TOKEN SECRET AND SAFE
- 'Streaming API V2: List Sessions (History) introduced.'
- Text input should be less than 1500 characters.
- You can choose from Color, Image or Video sources as the background.
- To use audio source as voice, set voice type as audio and provide either audio_url
  or audio_asset_id.
- Requires setup of API key for authentication
- Uses API key for authentication
- Scripts must be contained within a scene, or scenes must be contained within a script.
- Ensure audio aligns with scenes to avoid alignment errors.
- You can interchangeably use image and video within templates.
- Uses OAuth2 with refresh token — requires setup of connected app in HeyGen
- Images are sourced from Unsplash and Wikipedia Commons under creative commons license.
- Webhook validation performs an OPTIONS request to your endpoint with a 1-second
  timeout.
- Use Smee.io to expose your local endpoint to the internet.
- Create personalized AI avatars with customizable features.
- Ideal photo selection includes recent, high-resolution images that authentically
  represent the subject.
- To generate Photo Avatar videos, change 'Character Settings' type to 'talking_photo'
  and provide 'talking_photo_id'.
- Streaming API allows integration of dynamic Interactive Avatars.
- Requires API key for authentication.
- Use physical devices or simulators for WebRTC support.
- Set disable_idle_timeout to false. (It will soon be deprecated)
- Use /v1/streaming.keep_alive when you have periods without detectable activity but
  still consider the session 'alive' from the user’s perspective.
- Add your HeyGen API Token to your project.
- Authentication token for the session is not the HeyGen API key.
- You can retrieve the 'Session Token' by calling the create_token endpoint.
- Authentication token for the session is required.
- Always handle errors gracefully when dealing with asynchronous requests to avoid
  disruptions in the user experience.
- Add your HeyGen API key to your .env file in the root of your Vite project.
- 'Using dangerouslyAllowBrowser: true allows direct API calls from the browser.'
- For security, perform these calls on your backend instead of exposing the API key
  in the browser.
- Requires OpenAI API key to access Whisper API.
- Voice mode button starts disabled and enables only after stream is ready
- Always use language code 'en' instead of 'English'
- Voice chat status updates automatically through events
- Voice chat starts when switching to voice mode
- Make sure to handle cleanup when switching modes
- Uses OAuth2 with refresh token
- TLS encryption (port 443) ensures secure media and signaling.
- UDP is strongly recommended for low-latency audio/video performance.
- If UDP is blocked, TURN over TCP (443) will be used as a fallback but may degrade
  quality.
- Effective immediately, HeyGen Interactive Avatar API v1 and v2 versions have been
  deprecated and are no longer supported. All sessions must use v3 or higher versions
  to ensure optimal performance and access to the latest features.
- Automate workflows with Zapier by integrating HeyGen's avatar video creation capabilities.
- Using HeyGen’s integration with Zapier, you can efficiently automate the creation
  of customized videos from templates.
- We are sunsetting the standalone Personalized Video product from HeyGen Labs. Instead,
  we are integrating the personalized video capability into HeyGen’s core product
  suite.
- Mail merge in Gmail is only available to Google Workspace plan users.
- Email sending functionality is being removed.
- CSV upload functionality is temporarily removed.
- 'To use the HeyGen app for HubSpot, the following account types are required: ''Creator''
  plan tier or above on the HeyGen App an API plan may also be required.'
- This workflow is created but is not published, you can publish it by completing
  the needed configuration actions below.
- Requires an API key for authentication
- Uses OAuth2 with authorization code flow with PKCE.
- If you are on the free API plan, the export resolution limit is 720p.
- Keep token secret and safe.
- video_translate and proofread endpoints can only be used by Scale Plan and Enterprise
  Plan customers.
- The ID of the avatar's pose defaults to Vanessa-invest-20220722
- The style of the avatar can be 'normal' or other styles supported by the API.
- The input text defaults to 'This is a WebM video generated by HeyGen API'.
- The ID of the voice that the avatar will use defaults to 1bd001e7e50f421d891986aad5158bc8.
- API requires authentication via API key
- Testing or trial access is not available for the Video Translate API.
- The caption file URL you get will expire in 7 days.
- This endpoint is only available to Scale and Enterprise API plan users.
- Retrieves a paginated history of all streaming sessions, including metadata such
  as session duration, timestamps, and other details.
- All fields in the request body are optional. Only include the fields you want to
  update.
- Specify the content type of the image, which should be image/jpeg for JPEG files
  or image/png for PNG files.
- Specify the content type of the video, which should be video/mp4 for MP4 files or
  video/webm for WEBM files.
- Specify the content type of the audio, which should be audio/mpeg for MPEG files.
- The list endpoint supports cursor-based pagination.
errors:
- '400: Bad Request'
- Video is too long (> 3600.0s). Please upgrade your plan to generate longer videos.
- '40119: Video is too long (> 3600.0s). Please upgrade your plan to generate longer
  videos.'
- '100: Success'
- '401 Unauthorized: Check your API key'
- 'End of scene 1 does not align with script: Ensure that your scripts follow scene
  guidelines.'
- Start/End of audio 1 does not align with scene
- '401 Unauthorized: Recheck API key.'
- '404 Not Found: Check the template ID.'
- '100: Generic error code indicating an issue with the request'
- 'Invalid request: Ensure the HMAC signature matches.'
- Error sending speak command
- '10003: avatar version is deprecated, please update to v3+'
- '400014: Avatar version is deprecated, please update to v3+'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '404: Video doesn''t exist or access denied'
- '400: Request exceeds limits or corrupted body'
- '424: Invalid parameters'
- '40009: INVALID_CREDENTIALS: Invalid credentials provided'
- '400101: USER_NOT_FOUND: User not found'
- '400112: UNAUTHORIZED: Unauthorized'
- '401057: INVALID_ACCESS_TOKEN: Invalid access token'
- '401056: ACCESS_TOKEN_EXPIRED: Access token expired'
- '400561: SPACE_NOT_FOUND: space not found'
- '400573: PERMISSION_DENIED: permission denied'
- '400562: FORBIDDEN: forbidden'
- '400599: TIER_NOT_SUPPORT: Please upgrade to Creator / Business plan to use this
  feature.'
- '400631: USER_BLOCKED: Your account has been suspended due to detected violation
  of our policy and terms.'
- '40001: MISSING_PARAMS: Missing required input parameters'
- '400175: INVALID_PARAMETER: Invalid parameter'
- '40012: INVALID_QUERY_PARAM: Invalid querying parameter'
- '40065: INVALID_VIDEO_INFOS: Invalid video infos'
- '40039: INVALID_TEXT_INPUT: Invalid text detected'
- '400105: BLOCKED_WORDS_DETECTED: Blocked words detected'
- '40010: VIDEO_FORMAT_NOT_SUPPORTED: Video format not supported'
- '40031: INVALID_VIDEO_ID: Invalid video id'
- '400652: VIDEO_FILE_CORRUPTED: Video file corrupted'
- '400621: EMPTY_VIDEO_STREAM: empty video stream'
- '400624: EMPTY_AUDIO_STREAM: empty audio stream'
- '40044: INVALID_AUDIO_FORMAT: Invalid audio format'
- '40056: FAILED_TO_GENERATE_AUDIO: Failed to generate audio'
- '1000022: AUDIO_DURATION_TOO_LONG: Audio duration too long'
- '401035: AUDIO_LENGTH_MISMATCH: Audio length mismatch'
- '401015: AUDIO_CORRUPTION_ERROR: Audio or video may be corrupted'
- '400168: INAPPROPRIATE_CONTENT: NSFW content detected'
- '400625: CELEBRITY_CONTENT: Celebrity face detected'
- '402007: CHILD_SAFETY_MODERATION_FAILED: Moderation failed: Underage content detected.'
- '402008: CELEBRITY_MODERATION_FAILED: Moderation failed: Celebrity detected.'
- '402009: INAPPROPRIATE_CONTENT_MODERATION_FAILED: Moderation failed: NSFW content
  detected.'
- '401003: MODERATION_POLICY_VIOLATED: Moderation policy violated'
- '400680: UNSAFE_PROMPT: Unsafe prompt'
- '400165: MOVIO_VIDEO_TOO_SHORT: Duration is too short, try another video'
- '400150: MOVIO_VIDEO_IS_TOO_LONG: Video is too long'
- '400128: MOVIO_PHOTAR_DURATION_TOO_LONG: Duration is too long'
- '400664: TRIAL_VIDEO_LIMIT_EXCEEDED: You have reached your daily trial video limit'
- '400140: MOVIO_API_EXCEED_RATE_LIMIT: Exceed rate limit'
- '401028: QUOTA_LIMIT: Quota limit'
- '40019: EXCEED_USAGE_LIMIT: exceed usage limit'
- '400118: CREDIT_NOT_ENOUGH: Credit not enough'
- '400153: GUEST_GENERATE_LIMIT: Please sign up to make more videos'
- '400144: AVATAR_NOT_FOUND: Avatar not found'
- '400174: PHOTAR_NOT_FOUND: Photar not found'
- '40090: INVALID_AVATAR_INFO: Avatar info is invalid'
- '40004: NO_FACE_ERROR: No face detected'
- '40005: TOO_MANY_FACES_ERROR: Multiple faces found'
- '40006: BAD_QUALITY_IMAGE: Image quality is not good enough'
- '400685: AVATAR_USAGE_NOT_PERMITTED: Avatar usage not permitted'
- '400116: VOICE_NOT_FOUND: Voice not found'
- '400548: TTS_VOICE_UNAVAILABLE_ERR: Text to speech voice not available'
- '400552: TTS_CUSTOMER_VOICE_ERR: Voice not found'
- '400551: TTS_PAID_VOICE_ERR: Paid voice is only available for premium users'
- '400634: TTS_LANGUAGE_ERROR: tts language error'
- '400549: TTS_PROVIDER_ERR: Text to speech provider error'
- '401030: ELEVENLABS_TTS_ERROR: tts error'
- '400701: TTS_TOO_MANY_REQUEST_ERR: too many request, please try again later'
- '40072: TEMPLATE_NOT_FOUND: Template not found'
- '400608: HEYGEN_TEMPLATE_NOT_FOUND: heygen template not found'
- '40092: VIDEO_GENERATE_ERROR: Video generation encounted error'
- '40071: DUPLICATE_VIDEO_GENERATION: Duplicate video generation'
- '400576: VIDEO_RENDER_FAILED: Failed to render video'
- '40062: RETRIABLE_JOB_ERROR: Failed to generate video, please try again'
- '400171: VIDEO_NOT_COMPLETED: Video not completed'
- '404002: WORKFLOW_ALREADY_EXISTS: Workflow already exists'
- '404003: WORKFLOW_NOT_FOUND: Workflow not found'
- '404001: WORKFLOW_VALIDATION_ERROR: Workflow input validation error'
- '40051: RESOURCE_NOT_FOUND: Resource is not found'
- '400179: ASSET_NOT_FOUND: Asset not found'
- '400114: VIDEO_NOT_FOUND: Video not found'
- '400578: RESOURCE_ACCESS_DENIED: resource access denied'
- '40003: UPLOAD_FAILURE: Object upload failed'
- '40023: DOWNLOAD_FAILURE: Object download failed'
- '400609: S3_UPLOAD_FAILED: s3 upload failed'
- '400610: S3_DOWNLOAD_FAILED: s3 download failed'
- '400616: HTTP_DOWNLOAD_FAILED: http download failed'
- '400617: HTTP_UPLOAD_FAILED: http upload failed'
- '40002: IMAGE_FORMAT_NOT_SUPPORTED: Image format not supported'
- '400543: ASSET_FORMAT_NOT_SUPPORTED: Asset format not supported'
- '400111: INVALID_FILE_TYPE: Invalid file type'
- '40013: QUERY_URL_FAILURE: Failed on query url'
- '40045: NO_VIDEO_URL_FOUND: No video URL found'
- '401029: URL_NO_LONGER_AVAILABLE: The URL is no longer available'
- '400627: INVALID_GOOGLE_DRIVE_URL: invalid google drive url'
- '500000: INTERNAL_SERVER_ERROR: Internal server error'
- '40099: UNKNOWN_ERROR: Something is wrong, please contact contact@heygen.com'
- '400106: REQUEST_TIMEOUT: Request timeout'
- '400558: API_CONNECTION_ERROR: API connection error'
- '400591: THIRD_PARTY_ERROR: third party error'
- '40042: TRANSCODE_ERROR: Transcoding Error'
- '400611: VIDEO_TRANSCODE_NOT_READY: video transcode is not ready'
- '40032: PROCESS_VIDEO_STREAM_ERROR: Process video stream error'
- '40033: PROCESS_VIDEO_ANALYZE_ERROR: Process video analyze error'
- '400672: SRT_FILE_ERROR: SRT file error'
- '40041: JOB_NOT_READY: Job not ready'
- '40043: INVALID_JOB_ID: Invalid Job ID'
- '40029: UNKNOWN_JOB_TYPE: Unknown job type'
- '400164: MOVIO_JOB_NOT_FOUND: HeyGen job not found'
- '400557: MISSING_JOB_CONTEXT: Missing job context'
- '40038: PAYMENT_NOT_READY: Payment not ready'
- code: 10001
  message: 'Session state wrong: new'
  description: The session state is incorrect; it should not be "new".
- code: 10002
  message: 'Session state wrong: connecting'
  description: The session state is incorrect; it should not be "connecting".
- code: 10003
  message: 'Session state wrong: connected'
  description: The session state is incorrect; it should not be "connected".
- code: 10004
  message: 'Session state wrong: closing'
  description: The session state is incorrect; it should not be "closing".
- code: 10005
  message: 'Session state wrong: closed'
  description: The session state is incorrect; it should not be "closed".
- code: 10006
  message: Session not found
  description: The specified session could not be found.
- code: 10007
  message: Concurrent limit reached
  description: The concurrent limit for the user's plan has been reached; upgrade
    your plan for formal usage.
- code: 10012
  message: Avatar not found
  description: The specified avatar could not be found.
- code: 10013
  message: Avatar not allowed
  description: The specified avatar is not allowed.
- code: 10014
  message: Session full
  description: The session is full; please try again later.
- code: 10015
  message: Trial API limit reached
  description: The trial API limit has been reached.
- '400: Error message, if any (null if no error).'
- '404: Video not found'
- '400'
- '401: Unauthorized'
- '404: Not Found'
- '400: Bad Request - Check your request parameters.'
- '400: Bad Request - Check your query parameters.'
- '200: Success'
- '400: Error information if any.'
- '400 Bad Request: Check the request parameters and payload.'
- '200: Successful upload'
- '400: Bad request, check the content type or parameters'
auth_info:
  mentioned_objects:
  - x-api-key
  - Template
  - Voice
  - X-Api-Key
  - API Token
  - OauthToken
  - AuthProvider
client:
  base_url: https://api.heygen.com
  headers:
    accept: application/json
source_metadata: null
