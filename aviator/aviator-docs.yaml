resources:
- name: pause_unpause_queues
  endpoint:
    path: /api/v1/queues/pause_unpause
    method: POST
    data_selector: data
    params: {}
- name: pause_unpause_queue
  endpoint:
    path: /api/queues/pauseunpause
    method: POST
    data_selector: data
    params: {}
- name: pause_repo
  endpoint:
    path: /api/v1/repo/
    method: POST
    data_selector: null
    params: {}
- name: pause_branch
  endpoint:
    path: /api/v1/branches
    method: POST
    data_selector: null
    params: {}
- name: check_pause_status
  endpoint:
    path: /api/v1/branches
    method: GET
    data_selector: null
    params: {}
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /attentionset
    method: GET
    data_selector: data
- name: AttentionSet
  endpoint:
    path: /attentionset
    method: GET
    data_selector: records
    params: {}
- name: AttentionSet
  endpoint:
    path: /attentionset
    method: GET
    data_selector: records
- name: attentionset
  endpoint:
    path: /attentionset
    method: GET
    data_selector: records
- name: AttentionSet
  endpoint:
    path: /api/v1/attentionset
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
- name: project
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: data
- name: template
  endpoint:
    path: /api/v1/templates
    method: GET
    data_selector: data
    params: {}
- name: personas
  endpoint:
    path: /api/v1/personas
    method: GET
    data_selector: data
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
- name: Runbook Personas
  endpoint:
    path: /runbooks/personas
    method: GET
- name: Default System Personas
  endpoint:
    path: /runbooks/default-personas
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /api/campaign_member
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /api/contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: templates
  endpoint:
    path: /api/templates
    method: GET
    data_selector: templates
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: templates
  endpoint:
    path: /api/templates
    method: GET
    data_selector: data
    params: {}
- name: personas
  endpoint:
    path: /api/v1/personas
    method: GET
    data_selector: data
    params: {}
- name: personas
  endpoint:
    path: /api/v1/personas
    method: GET
    data_selector: data
    params: {}
- name: executions
  endpoint:
    path: /api/v1/executions
    method: GET
    data_selector: data
    params:
      filter: status:running
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: your_resource_name
  endpoint:
    path: /your/endpoint/path
    method: GET
    data_selector: your_data_selector
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: cloud_runners
  endpoint:
    path: /cloud/runners
    method: GET
    data_selector: runners
- name: environment_management
  endpoint:
    path: /environment/management
    method: GET
    data_selector: environments
- name: secrets_management
  endpoint:
    path: /secrets/management
    method: GET
    data_selector: secrets
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: releases
  endpoint:
    path: /api/releases
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/v1/user
    method: GET
    data_selector: data
    params: {}
- name: project
  endpoint:
    path: /api/v1/project
    method: GET
    data_selector: data
    params: {}
- name: releases
  endpoint:
    path: /api/releases
    method: GET
    data_selector: data
    params: {}
- name: sync_build_github_action
  endpoint:
    path: /api/v1/sync-build-github-action
    method: POST
    data_selector: response
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: sync_build_github_action
  endpoint:
    path: /api/v1/sync-build-github-action
    method: POST
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: releases
  endpoint:
    path: /releases
    method: GET
    data_selector: data
- name: merge_queue
  endpoint:
    path: /merge_queue
    method: GET
    data_selector: data
- name: Release Project
  endpoint:
    path: /releases-beta/concepts/terminology#release-project
    method: GET
- name: Environment
  endpoint:
    path: /releases-beta/concepts/terminology#environment
    method: GET
- name: Changelog
  endpoint:
    path: /releases-beta/concepts/terminology#changelog
    method: GET
- name: Release
  endpoint:
    path: /releases-beta/concepts/terminology#release
    method: GET
- name: Release Candidate
  endpoint:
    path: /releases-beta/concepts/terminology#release-candidate
    method: GET
- name: Release version
  endpoint:
    path: /releases-beta/concepts/terminology#release-version
    method: GET
- name: Release Candidate version
  endpoint:
    path: /releases-beta/concepts/terminology#release-candidate-version
    method: GET
- name: Build
  endpoint:
    path: /releases-beta/concepts/two-step-delivery
    method: GET
- name: Deployment
  endpoint:
    path: /releases-beta/concepts/deployment
    method: GET
- name: Cherry-pick
  endpoint:
    path: /releases-beta/concepts/cherry-picks
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Release Project
  endpoint:
    path: /releases/releases_project
    method: GET
    data_selector: records
- name: Environment
  endpoint:
    path: /releases/environment
    method: GET
    data_selector: records
- name: Changelog
  endpoint:
    path: /releases/changelog
    method: GET
    data_selector: records
- name: Release
  endpoint:
    path: /releases/release
    method: GET
    data_selector: records
- name: Release Candidate
  endpoint:
    path: /releases/release_candidate
    method: GET
    data_selector: records
- name: Release Version
  endpoint:
    path: /releases/release_version
    method: GET
    data_selector: records
- name: Build
  endpoint:
    path: /releases/build
    method: GET
    data_selector: records
- name: Deployment
  endpoint:
    path: /releases/deployment
    method: GET
    data_selector: records
- name: Cherry-pick
  endpoint:
    path: /releases/cherry_pick
    method: GET
    data_selector: records
- name: releases
  endpoint:
    path: /releases
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: cherry_picks
  endpoint:
    path: /api/cherry_picks
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dogfood
  endpoint:
    path: /api/dogfood
    method: GET
    data_selector: data
    params: {}
- name: canary
  endpoint:
    path: /api/canary
    method: GET
    data_selector: data
    params: {}
- name: rollout
  endpoint:
    path: /api/rollout
    method: GET
    data_selector: data
    params: {}
- name: cherry_picks
  endpoint:
    path: /api/cherry-picks
    method: GET
    data_selector: data
    params: {}
- name: release
  endpoint:
    path: /api/releases
    method: GET
    data_selector: data
- name: merge_queue
  endpoint:
    path: /api/merge-queue
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: release_project
  endpoint:
    path: /api/releases
    method: GET
    data_selector: projects
    params: {}
- name: scheduled_release
  endpoint:
    path: /api/scheduled_releases
    method: GET
    data_selector: scheduled_releases
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: release_project
  endpoint:
    path: /api/release/projects
    method: GET
    data_selector: projects
- name: project_name
  endpoint:
    path: /releases/projects
    method: POST
    data_selector: project
    params: {}
- name: release_project
  endpoint:
    path: /api/releases/projects
    method: GET
    data_selector: projects
    params: {}
- name: merge_queue
  endpoint:
    path: /api/mergequeue
    method: GET
    data_selector: queues
    params: {}
- name: events
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: releases
  endpoint:
    path: /api/releases
    method: GET
    data_selector: data
    params: {}
- name: mergeQueue
  endpoint:
    path: /api/mergeQueue
    method: GET
    data_selector: data
    params: {}
- name: releases
  endpoint:
    path: /api/releases
    method: GET
    data_selector: data
    params: {}
- name: mergeQueue
  endpoint:
    path: /api/mergeQueue
    method: GET
    data_selector: data
    params: {}
- name: environment
  endpoint:
    path: /releases-beta/concepts/terminology#environment
    method: GET
- name: release_project
  endpoint:
    path: /releases-beta/concepts/release-project
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: scheduled_release
  endpoint:
    path: /api/v1/scheduled_releases
    method: GET
    data_selector: data
    params: {}
- name: GitHub Actions
  endpoint:
    path: /releases-beta/how-to-guides/working-with-your-ci-cd/github-actions-workflow
    method: GET
- name: Buildkite
  endpoint:
    path: /releases-beta/how-to-guides/working-with-your-ci-cd/buildkite-workflow
    method: GET
- name: workflow_parameters
  endpoint:
    path: /api/v1/workflow_parameters
    method: GET
    data_selector: data
- name: cherry_pick
  endpoint:
    path: /api/v1/cherry-picks
    method: GET
    data_selector: data
    params: {}
- name: custom_workflow
  endpoint:
    path: /api/v1/custom_workflow
    method: GET
    data_selector: data
    params: {}
- name: build_workflow_parameters
  endpoint:
    path: /custom/workflow/parameters/build
    method: POST
    data_selector: parameters
    params: {}
- name: deploy_workflow_parameters
  endpoint:
    path: /custom/workflow/parameters/deploy
    method: POST
    data_selector: parameters
    params: {}
- name: cherry_picks
  endpoint:
    path: /api/cherry_picks
    method: GET
    data_selector: data
    params: {}
- name: project
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: projects
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: cherry_pick
  endpoint:
    path: /api/cherry_pick
    method: POST
    data_selector: data
    params: {}
- name: releases
  endpoint:
    path: /releases
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: deployments
  endpoint:
    path: /deployments
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /api/mergeQueue
    method: GET
    data_selector: records
- name: create_release
  endpoint:
    path: /<project_name>/releases/<release_candidate_version>
    method: POST
- name: create_deployment
  endpoint:
    path: /<project_name>/environments/<env_name>/deployments
    method: POST
- name: update_deployment_status
  endpoint:
    path: /<project_name>/environments/<env_name>/deployments
    method: PATCH
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: review
  endpoint:
    path: /api/reviews
    method: GET
    data_selector: data
    params: {}
- name: create_release
  endpoint:
    path: /releases/<project_name>/releases/<release_candidate_version>
    method: POST
- name: create_deployment
  endpoint:
    path: /releases/<project_name>/environments/<env_name>/deployments
    method: POST
- name: update_deployment_status
  endpoint:
    path: /releases/<project_name>/environments/<env_name>/deployments
    method: PATCH
- name: attention_set
  endpoint:
    path: /v1/attentionset
    method: GET
    data_selector: data
    params: {}
- name: repository
  endpoint:
    path: /repositories
    method: GET
- name: pull_request
  endpoint:
    path: /pull_requests
    method: GET
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: project
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: review_requests
  endpoint:
    path: /v1/review-requests
    method: GET
    data_selector: data
    params: {}
- name: reviews
  endpoint:
    path: /v1/reviews
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: review
  endpoint:
    path: /reviews
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
    params: {}
- name: review
  endpoint:
    path: /v1/reviews
    method: GET
    data_selector: results
- name: CODEOWNERS
  endpoint:
    path: /flexreview/codeowners
    method: GET
- name: Aviator OWNERS
  endpoint:
    path: /flexreview/aviator/owners
    method: GET
- name: owners
  endpoint:
    path: /src/aviator-config.yaml
    method: GET
    data_selector: owners
    params: {}
- name: reviewer_suggestion
  endpoint:
    path: /api/v1/reviewer_suggestion
    method: GET
    data_selector: data
    params: {}
- name: assignment
  endpoint:
    path: /api/v1/assignment
    method: GET
    data_selector: data
    params: {}
- name: pull_request
  endpoint:
    path: /flexreview/pull_request
    method: POST
    data_selector: suggested_reviewers
- name: review
  endpoint:
    path: /flexreview/api/v1/reviews
    method: GET
    data_selector: reviews
    params:
      incremental: updated_at
- name: team
  endpoint:
    path: /flexreview/api/v1/teams
    method: GET
    data_selector: teams
    params: {}
- name: CODEOWNERS
  endpoint:
    path: /flexreview/codeowners
    method: GET
    data_selector: entries
- name: Aviator OWNERS
  endpoint:
    path: /flexreview/aviator_owners
    method: GET
    data_selector: entries
- name: review
  endpoint:
    path: /api/review
    method: GET
    data_selector: data
    params: {}
- name: owners
  endpoint:
    path: /src/aviator-config.yaml
    method: GET
    data_selector: owners
    params: {}
- name: validation
  endpoint:
    path: /flexreview/validation
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: review
  endpoint:
    path: /api/v1/reviews
    method: GET
    data_selector: data
    params: {}
- name: validation
  endpoint:
    path: /flexreview/validation
    method: POST
    data_selector: data
    params: {}
- name: team_rules
  endpoint:
    path: /api/team_rules
    method: GET
    data_selector: data
- name: review_requests
  endpoint:
    path: /api/review_requests
    method: GET
    data_selector: data
    params: {}
- name: reviewers
  endpoint:
    path: /api/reviewers
    method: GET
    data_selector: data
    params: {}
- name: whitelist_teams
  endpoint:
    path: /whitelist/teams
    method: GET
    data_selector: teams
    params: {}
- name: reviewer_suggestion
  endpoint:
    path: /api/reviewer_suggestions
    method: GET
    data_selector: suggestions
- name: teams
  endpoint:
    path: /api/v1/teams
    method: GET
    data_selector: data
    params: {}
- name: reviews
  endpoint:
    path: /api/v1/reviews
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: reviewer_assignment
  endpoint:
    path: /api/reviewer_assignment
    method: GET
    data_selector: data
    params: {}
- name: incidents
  endpoint:
    path: /incidents
    method: GET
    data_selector: incidents
- name: services
  endpoint:
    path: /services
    method: GET
    data_selector: services
- name: escalation_policies
  endpoint:
    path: /escalation_policies
    method: GET
- name: oncalls
  endpoint:
    path: /oncalls
    method: GET
- name: schedules
  endpoint:
    path: /schedules
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: teams
  endpoint:
    path: /teams/whitelist
    method: GET
    data_selector: data
    params: {}
- name: validation
  endpoint:
    path: /flexreview/validation
    method: GET
    data_selector: records
    params: {}
- name: Reviewer Assignment
  endpoint:
    path: /api/reviewer-assignment
    method: POST
    data_selector: data
- name: out_of_office_reviewers
  endpoint:
    path: /v1/reviewers/out_of_office
    method: GET
    data_selector: reviewers
    params: {}
- name: incidents
  endpoint:
    path: /incidents
    method: GET
    data_selector: incidents
    params: {}
- name: review
  endpoint:
    path: /api/v1/reviews
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: review
  endpoint:
    path: /reviews
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: out_of_office_reviewers
  endpoint:
    path: /api/v1/out_of_office_reviewers
    method: GET
    data_selector: data
- name: slash_commands
  endpoint:
    path: /api/slash_commands
    method: GET
    data_selector: commands
    params: {}
- name: attention_set
  endpoint:
    path: /attention_set
    method: GET
    data_selector: records
- name: reviewer_suggestion
  endpoint:
    path: /reviewer_suggestion
    method: GET
    data_selector: records
- name: slash_commands
  endpoint:
    path: /api/slash_commands
    method: POST
    data_selector: data
    params: {}
- name: expert_scores
  endpoint:
    path: /expert_scores
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: commands
  endpoint:
    path: /api/slash-commands
    method: GET
    data_selector: commands
- name: commands
  endpoint:
    path: /api/v1/commands
    method: GET
    data_selector: data
    params: {}
- name: out_of_office_user_exclusion
  endpoint:
    path: /api/v1/out_of_office_user_exclusion
    method: GET
    data_selector: data
    params: {}
- name: expert_scores
  endpoint:
    path: /v1/expert/scores
    method: GET
    data_selector: scores
    params:
      incremental: updated_at
- name: review
  endpoint:
    path: /api/review
    method: GET
    data_selector: data
    params:
      status: open
- name: notify_teams
  endpoint:
    path: /flexreview/concepts/recursive-ownership#aviator-config.yaml
    method: GET
    data_selector: teams
- name: user_exclusion
  endpoint:
    path: /api/v1/out_of_office_exclusion
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /mergequeue
    method: GET
    data_selector: data
    params: {}
- name: repositories
  endpoint:
    path: /repositories
    method: GET
    data_selector: repositories
- name: merge_requests
  endpoint:
    path: /merge-requests
    method: GET
    data_selector: data
    params: {}
- name: branches
  endpoint:
    path: /branches
    method: GET
    data_selector: data
    params: {}
- name: merge_rules
  endpoint:
    path: /api/merge/rules
    method: GET
    data_selector: rules
    params: {}
- name: merge_rules
  endpoint:
    path: /api/merge_rules
    method: GET
- name: merge_rules
  endpoint:
    path: /merge_rules
    method: GET
    data_selector: rules
- name: merge_rules
  endpoint:
    path: /api/merge/rules
    method: GET
    data_selector: rules
    params: {}
- name: base_branches
  endpoint:
    path: /api/v1/base_branches
    method: GET
    data_selector: data
    params: {}
- name: base_branches
  endpoint:
    path: /merge_rules/base_branches
    method: GET
- name: merge_rules
  endpoint:
    path: /api/merge-rules
    method: GET
    data_selector: rules
- name: merge_rules
  endpoint:
    path: /merge_rules
    method: GET
    data_selector: merge_rules
    params: {}
- name: merge_queue
  endpoint:
    path: /api/merge_queue
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /api/mergequeue
    method: GET
    data_selector: data
    params: {}
- name: review
  endpoint:
    path: /api/review
    method: GET
    data_selector: data
    params: {}
- name: merge_rules
  endpoint:
    path: /merge_rules
    method: POST
    data_selector: merge_rules
    params: {}
- name: preconditions
  endpoint:
    path: /preconditions
    method: POST
    data_selector: preconditions
    params: {}
- name: base_branch
  endpoint:
    path: /api/base-branches
    method: GET
    data_selector: branches
- name: base_branches
  endpoint:
    path: /merge_rules/base_branches
    method: GET
    data_selector: branches
    params: {}
- name: merge_queue
  endpoint:
    path: /merge-queue
    method: GET
    data_selector: data
    params: {}
- name: queue
  endpoint:
    path: /api/queue
    method: POST
    data_selector: data
    params: {}
- name: pull_request
  endpoint:
    path: /api/v1/pull_request/
    method: POST
    data_selector: action
    params: {}
- name: merge_queue
  endpoint:
    path: /api/merge-queue
    method: POST
    data_selector: data
    params: {}
- name: preconditions
  endpoint:
    path: /mergequeue/concepts/pre-queue-conditions
    method: GET
    data_selector: validations
    params: {}
- name: merge_queue
  endpoint:
    path: /mergequeue
    method: GET
    data_selector: records
- name: flex_review
  endpoint:
    path: /flexreview
    method: GET
    data_selector: records
- name: merge_rules
  endpoint:
    path: /merge_rules
    method: GET
    data_selector: status_comment
    params: {}
- name: queue
  endpoint:
    path: /api/v1/queue
    method: POST
    data_selector: data
    params: {}
- name: dequeue
  endpoint:
    path: /api/v1/dequeue
    method: DELETE
    data_selector: data
    params: {}
- name: pull_request
  endpoint:
    path: /api/v1/pull_request/
    method: POST
    data_selector: action
    params: {}
- name: status_check
  endpoint:
    path: /api/v1/status/check
    method: GET
    data_selector: status
    params: {}
- name: aviator_checks
  endpoint:
    path: /merge_rules
    method: GET
    data_selector: publish_status_check
    params: {}
- name: merge_queue
  endpoint:
    path: /api/merge-queue
    method: GET
    data_selector: records
- name: sticky_comments
  endpoint:
    path: /how-to-guides/customize-sticky-comments
    method: GET
- name: pull_request
  endpoint:
    path: /api/v1/pull_requests
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /api/v1/merge_queue
    method: GET
    data_selector: data
    params: {}
- name: merge_rules
  endpoint:
    path: /merge_rules
    method: POST
    data_selector: status_comment
    params: {}
- name: pull_request
  endpoint:
    path: /api/v1/pull_requests
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: merge_queue
  endpoint:
    path: /api/v1/merge_queue
    method: GET
    data_selector: data
    params: {}
- name: status_check
  endpoint:
    path: /api/v1/status_check
    method: GET
    data_selector: data
    params: {}
- name: backport_pull_request
  endpoint:
    path: /api/v1/pull_request/backport
    method: POST
    data_selector: null
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: changesets
  endpoint:
    path: /api/changesets
    method: GET
    data_selector: records
- name: merge_queue
  endpoint:
    path: /api/v1/merge-queue
    method: GET
    data_selector: data
- name: pull_request_backport
  endpoint:
    path: /pull_request/backport
    method: POST
    data_selector: target_branch
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: changeset
  endpoint:
    path: /api/v1/changesets
    method: GET
    data_selector: data
    params: {}
- name: changesets
  endpoint:
    path: /api/v1/changesets
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: merge_queue
  endpoint:
    path: /api/mergequeue
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: stacked_prs
  endpoint:
    path: /api/v1/stacked_prs
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: block_until_pr
  endpoint:
    path: /aviator/block_until_pr
    method: POST
    data_selector: response
- name: block_until_timestamp
  endpoint:
    path: /aviator/block_until_timestamp
    method: POST
    data_selector: response
- name: cancel_block
  endpoint:
    path: /aviator/block_cancel
    method: POST
    data_selector: response
- name: stacked_prs
  endpoint:
    path: /api/stacked_prs
    method: GET
    data_selector: data
    params: {}
- name: queue_modes
  endpoint:
    path: /api/queue_modes
    method: GET
    data_selector: modes
    params: {}
- name: block_until_pr
  endpoint:
    path: /aviator/block/until
    method: POST
    data_selector: block_until_pr
    params: {}
- name: block_until_timestamp
  endpoint:
    path: /aviator/block/until/timestamp
    method: POST
    data_selector: block_until_timestamp
    params: {}
- name: cancel_block
  endpoint:
    path: /aviator/block/cancel
    method: POST
    data_selector: cancel_block
    params: {}
- name: pull_request
  endpoint:
    path: /api/v1/pull_requests
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /api/v1/attentionset
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /api/mergequeue
    method: GET
    data_selector: data
    params: {}
- name: time_in_queue
  endpoint:
    path: /api/time_in_queue
    method: GET
    data_selector: metrics
    params: {}
- name: bot_usage
  endpoint:
    path: /api/bot_usage
    method: GET
    data_selector: metrics
    params: {}
- name: pr_failure_reasons
  endpoint:
    path: /api/pr_failure_reasons
    method: GET
    data_selector: metrics
    params: {}
- name: pr_sync_frequency
  endpoint:
    path: /api/pr_sync_frequency
    method: GET
    data_selector: metrics
    params: {}
- name: queue_modes
  endpoint:
    path: /api/queue_modes
    method: GET
    data_selector: data
    params: {}
- name: actions
  endpoint:
    path: /api/v1/actions
    method: GET
    data_selector: data
    params: {}
- name: pull_request
  endpoint:
    path: /api/v1/pull_requests
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: merge_queue
  endpoint:
    path: /api/v1/merge_queue
    method: GET
    data_selector: data
    params: {}
- name: project
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: data
- name: branches
  endpoint:
    path: /api/branches
    method: GET
    data_selector: data
    params: {}
- name: time_in_queue
  endpoint:
    path: /api/analytics/time_in_queue
    method: GET
    data_selector: metrics
    params: {}
- name: bot_usage
  endpoint:
    path: /api/analytics/bot_usage
    method: GET
    data_selector: usage_metrics
    params: {}
- name: pr_failure_reasons
  endpoint:
    path: /api/analytics/pr_failure_reasons
    method: GET
    data_selector: failure_metrics
    params: {}
- name: pr_sync_frequency
  endpoint:
    path: /api/analytics/pr_sync_frequency
    method: GET
    data_selector: sync_metrics
    params: {}
- name: mq-bot-branches
  endpoint:
    path: /mq-bot-branches
    method: GET
    data_selector: branches
- name: mq-tmp-branches
  endpoint:
    path: /mq-tmp-branches
    method: GET
    data_selector: branches
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: projects
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: data
    params: {}
- name: branches
  endpoint:
    path: /api/v1/branches
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
    params: {}
- name: example_resource
  endpoint:
    path: /v1/example
    method: GET
    data_selector: data
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
- name: merge_queue
  endpoint:
    path: /api/v1/merge_queue
    method: GET
    data_selector: data
- name: attention_set
  endpoint:
    path: /api/v1/attention-set
    method: GET
    data_selector: data
    params: {}
- name: runbook
  endpoint:
    path: /api/v1/runbook
    method: GET
    data_selector: data
    params: {}
- name: optimistic_validation
  endpoint:
    path: /mergequeue/configuration
    method: POST
    data_selector: settings
    params:
      use_optimistic_validation: true
      optimistic_validation_failure_depth: 2
- name: sticky_comments
  endpoint:
    path: /api/sticky_comments
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: merge_queue
  endpoint:
    path: /mergequeue
    method: GET
    data_selector: data
    params: {}
- name: release
  endpoint:
    path: /releases
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /api/merge_queue
    method: GET
    data_selector: data
    params: {}
- name: paused_queues
  endpoint:
    path: /paused-queues
    method: GET
- name: AttentionSet
  endpoint:
    path: /api/v1/attentionset
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: pull_request
  endpoint:
    path: /pull_request/
    method: POST
    data_selector: pull_request
    params: {}
- name: paused_queues
  endpoint:
    path: /api/paused_queues
    method: GET
    data_selector: data
- name: changesets
  endpoint:
    path: /api/v1/changesets
    method: GET
    data_selector: data
- name: merges
  endpoint:
    path: /api/merges
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: pull_request
  endpoint:
    path: /pull_request/
    method: POST
    data_selector: pull_request
    params: {}
- name: merge_rules
  endpoint:
    path: /mergequeue/concepts/merge-rules
    method: GET
    data_selector: records
    params: {}
- name: changeset
  endpoint:
    path: /api/v1/changesets
    method: GET
    data_selector: data
    params: {}
- name: mergequeue
  endpoint:
    path: /api/v1/mergequeue
    method: GET
    data_selector: data
    params: {}
- name: merge_rules
  endpoint:
    path: /api/merge_rules
    method: GET
    data_selector: data
    params: {}
- name: audit_trail
  endpoint:
    path: /api/audit_trail
    method: GET
    data_selector: data
    params: {}
- name: configuration_history
  endpoint:
    path: /audit_trail/configuration_history
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: data
    params: {}
- name: priority_merges
  endpoint:
    path: /api/v1/priority_merges
    method: GET
    data_selector: merges
- name: merge_rules
  endpoint:
    path: /merge_rules
    method: GET
    data_selector: rules
    params: {}
- name: events
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: data
    params: {}
- name: merge_rules_audit_trail
  endpoint:
    path: /merge_rules/audit_trail
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /api/merge_queue
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: data
- name: merge_requests
  endpoint:
    path: /merge_requests
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: ready_hook
  endpoint:
    path: /api/v1/ready
    method: POST
    data_selector: data
    params: {}
- name: merge_requests
  endpoint:
    path: /merge_requests
    method: GET
    data_selector: data
    params: {}
- name: merge_rules
  endpoint:
    path: /mergequeue
    method: GET
    data_selector: merge_rules
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: merge_request
  endpoint:
    path: /api/v1/merge_requests
    method: GET
    data_selector: data
    params: {}
- name: merge_requests
  endpoint:
    path: /merge_requests
    method: GET
    data_selector: data
    params: {}
- name: merge_requests
  endpoint:
    path: /api/v1/merge_requests
    method: GET
    data_selector: data
    params: {}
- name: merge_rules
  endpoint:
    path: /merge_rules
    method: GET
    data_selector: merge_rules
    params: {}
- name: merge
  endpoint:
    path: /merge
    method: POST
    data_selector: data
    params: {}
- name: merge_request
  endpoint:
    path: /merge_request
    method: POST
    data_selector: data
- name: queue_status
  endpoint:
    path: /queue/status
    method: GET
    data_selector: status
- name: merge_rules
  endpoint:
    path: /mergequeue
    method: GET
    data_selector: merge_rules
    params: {}
- name: merge_rules
  endpoint:
    path: /merge/rules
    method: GET
    data_selector: rules
    params: {}
- name: merge_rules
  endpoint:
    path: /mergequeue
    method: GET
    data_selector: rules
    params: {}
- name: merge_requests
  endpoint:
    path: /merge_requests
    method: GET
    data_selector: data
    params: {}
- name: merge_requests
  endpoint:
    path: /api/merge_requests
    method: GET
    data_selector: merge_requests
    params: {}
- name: merge_rules
  endpoint:
    path: /mergequeue
    method: GET
    data_selector: merge_rules
    params: {}
- name: merge_queue
  endpoint:
    path: /api/merge_queue
    method: GET
    data_selector: records
- name: merge_rules
  endpoint:
    path: /mergequeue
    method: GET
    data_selector: merge_rules
    params: {}
- name: status_codes
  endpoint:
    path: /api/status-codes
    method: GET
    data_selector: records
- name: merge_queue
  endpoint:
    path: /api/merge_queue
    method: GET
    data_selector: records
    params: {}
- name: merge_rules
  endpoint:
    path: /mergequeue
    method: GET
    data_selector: merge_rules
    params: {}
- name: stacked_prs
  endpoint:
    path: /api/stacked_prs
    method: GET
    data_selector: data
    params: {}
- name: stacked_prs
  endpoint:
    path: /aviator-cli/
    method: GET
    data_selector: instructions
    params: {}
- name: merge_queue
  endpoint:
    path: /api/merge_queue
    method: GET
    data_selector: data
    params: {}
- name: merge_rules
  endpoint:
    path: /mergequeue
    method: GET
    data_selector: merge_rules
- name: stacked_prs
  endpoint:
    path: /api/stacked_prs
    method: GET
    data_selector: data
    params: {}
- name: git_commands
  endpoint:
    path: /api/git/commands
    method: GET
    data_selector: commands
- name: merge_queue
  endpoint:
    path: /api/merge/queue
    method: GET
    data_selector: queue
- name: attention_set
  endpoint:
    path: /attentionset
    method: GET
    data_selector: records
- name: merge_queue
  endpoint:
    path: /mergequeue
    method: GET
    data_selector: records
- name: merge
  endpoint:
    path: /aviator/merge
    method: POST
    data_selector: command
    params:
      targets: frontend,backend,api
- name: cancel
  endpoint:
    path: /aviator/cancel
    method: POST
    data_selector: command
    params: {}
- name: refresh
  endpoint:
    path: /aviator/refresh
    method: POST
    data_selector: command
    params: {}
- name: backport
  endpoint:
    path: /aviator/backport
    method: POST
    data_selector: command
    params:
      target_branch: <target_branch>
- name: sync
  endpoint:
    path: /aviator/sync
    method: POST
    data_selector: command
    params: {}
- name: block_until
  endpoint:
    path: /aviator/block_until
    method: POST
    data_selector: command
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: repository
  endpoint:
    path: /api/v1/repositories
    method: GET
    data_selector: data
    params: {}
- name: statuses
  endpoint:
    path: /api/statuses
    method: GET
    data_selector: data
    params: {}
- name: pull_request
  endpoint:
    path: /api/v1/pull_requests
    method: GET
    data_selector: data
    params: {}
- name: stacked_prs
  endpoint:
    path: /api/v1/stacked_prs
    method: GET
    data_selector: data
- name: stacked_prs
  endpoint:
    path: /api/stacked_prs
    method: GET
    data_selector: records
    params: {}
- name: stacked_prs
  endpoint:
    path: /api/v1/stacked_prs
    method: GET
    data_selector: data
    params: {}
- name: some_resource
  endpoint:
    path: /api/v1/some_resource
    method: GET
    data_selector: data
- name: stacked_prs
  endpoint:
    path: /api/v1/stacked_prs
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: action
  endpoint:
    path: /api/v1/actions
    method: GET
    data_selector: data
    params: {}
- name: commits
  endpoint:
    path: /v1/commits
    method: POST
    data_selector: data
    params: {}
- name: pull_requests
  endpoint:
    path: /api/v1/pull_requests
    method: GET
    data_selector: data
    params: {}
- name: pull_requests
  endpoint:
    path: /api/pull_requests
    method: GET
    data_selector: data
    params: {}
- name: stacked_prs
  endpoint:
    path: /api/stacked_prs
    method: POST
    data_selector: data
    params: {}
- name: branch_creation
  endpoint:
    path: /av/branch
    method: POST
    data_selector: output
    params: {}
- name: branch_commit
  endpoint:
    path: /av/commit
    method: POST
    data_selector: output
    params: {}
- name: pull_request_creation
  endpoint:
    path: /av/pr
    method: POST
    data_selector: output
    params: {}
- name: branches
  endpoint:
    path: /api/branches
    method: GET
    data_selector: branches
- name: pull_requests
  endpoint:
    path: /api/pull_requests
    method: GET
    data_selector: pull_requests
- name: stacked_pr
  endpoint:
    path: /api/v1/stacked_prs
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: branch
  endpoint:
    path: /api/branch
    method: GET
    data_selector: data
    params: {}
- name: commit
  endpoint:
    path: /api/commit
    method: GET
    data_selector: data
    params: {}
- name: commits
  endpoint:
    path: /api/v1/commits
    method: POST
    data_selector: data
    params: {}
- name: example_resource
  endpoint:
    path: /v1/example
    method: GET
    data_selector: data
    params: {}
- name: commit
  endpoint:
    path: /api/commits
    method: GET
    data_selector: data
- name: git_commands
  endpoint:
    path: /api/git/commands
    method: GET
    data_selector: commands
    params: {}
- name: pull_requests
  endpoint:
    path: /api/pull_requests
    method: GET
    data_selector: data
    params: {}
- name: split_pull_request
  endpoint:
    path: /aviator-cli/how-to-guides/split-pull-request
    method: GET
    data_selector: guides
- name: fold_pull_request
  endpoint:
    path: /aviator-cli/how-to-guides/fold-pull-request
    method: GET
    data_selector: guides
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: project
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: data
    params: {}
- name: branches
  endpoint:
    path: /api/branches
    method: GET
    data_selector: branches
    params: {}
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
    params: {}
- name: branches
  endpoint:
    path: /branches
    method: GET
    data_selector: data
    params: {}
- name: branch
  endpoint:
    path: /api/branches
    method: GET
    data_selector: data
    params: {}
- name: pull_request
  endpoint:
    path: /api/pull_requests
    method: GET
    data_selector: data
    params: {}
- name: branches
  endpoint:
    path: /branches
    method: GET
    data_selector: branches
    params: {}
- name: sync
  endpoint:
    path: /sync
    method: POST
    data_selector: sync
    params: {}
- name: access_token
  endpoint:
    path: /oauth2/token
    method: POST
    data_selector: access_token
    params: {}
- name: releases
  endpoint:
    path: /api/releases
    method: GET
    data_selector: data
- name: mergequeue
  endpoint:
    path: /api/mergequeue
    method: GET
    data_selector: data
- name: AttentionSet
  endpoint:
    path: /attentionset
    method: GET
    data_selector: data
    params: {}
- name: pullRequest
  endpoint:
    path: /pr/create
    method: POST
    data_selector: records
    params:
      draft: false
      rebaseWithDraft: false
      openBrowser: true
      noWipDetection: false
      branchNamePrefix: alice/
      writeStack: false
- name: stacked_prs
  endpoint:
    path: /api/v1/stacked_prs
    method: GET
    data_selector: data
- name: trunk_branches
  endpoint:
    path: /trunk_branches
    method: GET
    data_selector: branches
- name: topic_branches
  endpoint:
    path: /topic_branches
    method: GET
    data_selector: branches
- name: stacked_prs
  endpoint:
    path: /api/v1/stacked_prs
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: stacked_prs
  endpoint:
    path: /api/stacked_prs
    method: GET
    data_selector: data
    params: {}
- name: stacked_prs
  endpoint:
    path: /api/v1/stacked_prs
    method: GET
    data_selector: data
    params: {}
- name: stacked_prs
  endpoint:
    path: /api/stacked_prs
    method: GET
    data_selector: data
    params: {}
- name: pullRequest
  endpoint:
    path: /pullRequest
    method: POST
    data_selector: pullRequests
    params:
      draft: false
      rebaseWithDraft: false
      openBrowser: true
      noWipDetection: false
      branchNamePrefix: alice/
      writeStack: false
- name: status_check
  endpoint:
    path: /status_check
    method: GET
    data_selector: status
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: stacked_prs
  endpoint:
    path: /api/stacked_prs
    method: GET
    data_selector: data
    params: {}
- name: stacked_prs
  endpoint:
    path: /api/v1/stacked_prs
    method: GET
    data_selector: data
- name: pull_requests
  endpoint:
    path: /api/v1/pull_requests
    method: GET
    data_selector: data
    params: {}
- name: repositories
  endpoint:
    path: /api/v1/repositories
    method: GET
    data_selector: data
    params: {}
- name: stacked_prs
  endpoint:
    path: /api/stacked_prs
    method: GET
    data_selector: data
    params: {}
- name: default_branch
  endpoint:
    path: /branches/default
    method: PUT
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: branch
  endpoint:
    path: /api/branches
    method: GET
    data_selector: data
    params: {}
- name: stacked_prs
  endpoint:
    path: /api/v1/stacked_prs
    method: GET
    data_selector: records
    params: {}
- name: merge_queue
  endpoint:
    path: /api/merge-queue
    method: GET
    data_selector: data
    params: {}
- name: flex_review
  endpoint:
    path: /api/flex-review
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /api/attention_set
    method: GET
    data_selector: data
    params: {}
- name: remote_agents
  endpoint:
    path: /api/remote_agents
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /api/merge_queue
    method: GET
    data_selector: data
    params: {}
- name: default_branch_update
  endpoint:
    path: /api/default_branch/update
    method: POST
    data_selector: data
    params: {}
- name: stacked_prs
  endpoint:
    path: /api/v1/stacked_prs
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
- name: remote_agents
  endpoint:
    path: /api/v1/remote_agents
    method: GET
    data_selector: data
- name: attention_set
  endpoint:
    path: /api/v1/attention-set
    method: GET
    data_selector: data
- name: runbook
  endpoint:
    path: /api/v1/runbook
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: commit
  endpoint:
    path: /api/v1/commit
    method: POST
    data_selector: data
    params: {}
- name: commit_changes
  endpoint:
    path: /av/commit
    method: POST
    data_selector: commit_info
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /attentionset
    method: GET
    data_selector: data
    params: {}
- name: runbooks
  endpoint:
    path: /runbooks
    method: GET
    data_selector: data
    params: {}
- name: status
  endpoint:
    path: /v1/auth/status
    method: GET
    data_selector: data
    params: {}
- name: example_resource
  endpoint:
    path: /api/v1/example
    method: GET
    data_selector: data
- name: attention_set
  endpoint:
    path: /attentionset
    method: GET
    data_selector: records
- name: merge_queue
  endpoint:
    path: /mergequeue
    method: GET
    data_selector: records
- name: attention_set
  endpoint:
    path: /attentionset
    method: GET
    data_selector: data
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
    params: {}
- name: example_resource
  endpoint:
    path: /v1/example
    method: GET
    data_selector: data
- name: commit
  endpoint:
    path: /api/v1/commit
    method: POST
    data_selector: data
- name: commit
  endpoint:
    path: /api/v1/commits
    method: POST
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /merge-queue
    method: GET
    data_selector: records
    params: {}
- name: stacked_prs
  endpoint:
    path: /stacked-prs
    method: GET
    data_selector: records
    params: {}
- name: merge_queue
  endpoint:
    path: /api/merge-queue
    method: GET
    data_selector: items
    params: {}
- name: releases
  endpoint:
    path: /api/releases
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: attention_set
  endpoint:
    path: /api/attention_set
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /api/merge-queue
    method: GET
    data_selector: data
    params: {}
- name: stacked_prs
  endpoint:
    path: /api/stacked-prs
    method: GET
    data_selector: data
    params: {}
- name: pull_request
  endpoint:
    path: /api/v1/pull_requests
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /api/v1/merge_queue
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /api/v1/merge_queue
    method: GET
    data_selector: data
    params: {}
- name: AttentionSet
  endpoint:
    path: /attentionset
    method: GET
    data_selector: records
    params: {}
- name: Runbooks
  endpoint:
    path: /runbooks
    method: GET
    data_selector: records
    params: {}
- name: AttentionSet
  endpoint:
    path: /attentionset
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
- name: merge_queue
  endpoint:
    path: /api/merge_queue
    method: GET
    data_selector: data
    params: {}
- name: project
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: user
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /api/attentionset
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /api/mergequeue
    method: GET
    data_selector: data
    params: {}
- name: create_pull_request
  endpoint:
    path: /av/pr/create
    method: POST
    data_selector: pull_request_data
- name: orphan
  endpoint:
    path: /services/orphan
    method: GET
    data_selector: records
    params: {}
- name: attention_set
  endpoint:
    path: /api/v1/attentionSet
    method: GET
    data_selector: data
- name: runbooks
  endpoint:
    path: /api/v1/runbooks
    method: GET
    data_selector: data
- name: AttentionSet
  endpoint:
    path: /api/v1/attentionset
    method: GET
    data_selector: data
- name: attention_set
  endpoint:
    path: /api/attention_set
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: project
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
    params:
      incremental: updated_at
- name: task
  endpoint:
    path: /api/tasks
    method: GET
    data_selector: tasks
    params: {}
- name: AttentionSet
  endpoint:
    path: /api/attentionset
    method: GET
    data_selector: data
    params: {}
- name: pr_status
  endpoint:
    path: /api/v1/pr/status
    method: GET
    data_selector: data
    params: {}
- name: pull_request
  endpoint:
    path: /api/v1/pull_requests
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: attention_set
  endpoint:
    path: /api/v1/attention-set
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /api/v1/merge-queue
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /attentionset
    method: GET
    data_selector: records
- name: merge_queue
  endpoint:
    path: /mergequeue
    method: GET
    data_selector: records
- name: create_pull_request
  endpoint:
    path: /av/pr/create
    method: POST
    data_selector: pull_request
    params:
      title: <title>
      body: <body>
      draft: true
      edit: true
      force: true
      no_push: true
      reviewers: <reviewers>
      all: true
      current: true
      queue: true
- name: reparent
  endpoint:
    path: /av/reparent
    method: POST
    data_selector: result
    params:
      parent: <parent>
- name: attention_set
  endpoint:
    path: /api/attention_set
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /api/merge-queue
    method: GET
    data_selector: data
    params: {}
- name: pull_requests
  endpoint:
    path: /api/pull-requests
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: project
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: data
    params: {}
- name: checkout_previous_branch
  endpoint:
    path: /av/prev
    method: GET
    data_selector: branch
    params: {}
- name: commit_split
  endpoint:
    path: /api/v1/commit-split
    method: POST
    data_selector: data
    params: {}
- name: example_resource
  endpoint:
    path: /api/v1/example
    method: GET
    data_selector: data
    params: {}
- name: reparent
  endpoint:
    path: /reparent
    method: POST
    data_selector: data
- name: reparent
  endpoint:
    path: /av/reparent
    method: POST
    data_selector: parent
    params:
      parent: <parent>
- name: attention_set
  endpoint:
    path: /api/attentionset
    method: GET
    data_selector: records
    params: {}
- name: merge_queue
  endpoint:
    path: /api/mergequeue
    method: GET
    data_selector: records
    params: {}
- name: example_resource
  endpoint:
    path: /example/path
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: commit
  endpoint:
    path: /api/commits
    method: GET
    data_selector: data
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /api/attention_set
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /api/merge_queue
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /api/attention_set
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
    params: {}
- name: flex_review
  endpoint:
    path: /api/v1/flex_review
    method: GET
    data_selector: data
    params: {}
- name: AttentionSet
  endpoint:
    path: /api/attentionset
    method: GET
    data_selector: data
    params: {}
- name: scheduled_events
  endpoint:
    path: /api/scheduled_events
    method: GET
    data_selector: events
- name: javascript_execution
  endpoint:
    path: /api/js_execution
    method: POST
    data_selector: result
- name: scenarios
  endpoint:
    path: /scenarios
    method: GET
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
    params: {}
- name: scheduled_events
  endpoint:
    path: /api/scheduled_events
    method: GET
    data_selector: events
    params: {}
- name: javascript_execution
  endpoint:
    path: /api/js_execution
    method: POST
    data_selector: results
    params: {}
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
    params: {}
- name: runbook
  endpoint:
    path: /api/v1/runbook
    method: GET
    data_selector: data
    params: {}
- name: AttentionSet
  endpoint:
    path: /api/attentionset
    method: GET
    data_selector: results
- name: user_matches
  endpoint:
    path: /user/matches
    method: GET
    data_selector: matches
    params: {}
- name: add_comment
  endpoint:
    path: /issues/comments
    method: POST
    data_selector: comment
    params: {}
- name: add_label
  endpoint:
    path: /issues/labels
    method: POST
    data_selector: label
    params: {}
- name: add_reviewer
  endpoint:
    path: /pulls/reviewers
    method: POST
    data_selector: reviewer
    params: {}
- name: compare_commits
  endpoint:
    path: /compare
    method: GET
    data_selector: comparison
    params: {}
- name: copy_pull_request
  endpoint:
    path: /mergequeue/copy_pull_request
    method: POST
    data_selector: inputs
    params: {}
- name: instant_merge
  endpoint:
    path: /mergequeue/instant_merge
    method: POST
    data_selector: inputs
    params: {}
- name: pause
  endpoint:
    path: /mergequeue/pause
    method: POST
    data_selector: inputs
    params: {}
- name: queue
  endpoint:
    path: /mergequeue/queue
    method: POST
    data_selector: inputs
    params: {}
- name: synchronize_pull_request
  endpoint:
    path: /mergequeue/synchronize_pull_request
    method: POST
    data_selector: inputs
    params: {}
- name: unpause
  endpoint:
    path: /mergequeue/unpause
    method: POST
    data_selector: inputs
    params: {}
- name: PilotAutomatedActions
  endpoint:
    path: /pilot-automated-actions
    method: GET
    data_selector: actions
    params: {}
- name: scenarios
  endpoint:
    path: /scenarios
    method: GET
    data_selector: scenarios
    params: {}
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
- name: merge_queue
  endpoint:
    path: /api/v1/merge_queue
    method: GET
    data_selector: data
- name: pause_the_queue
  endpoint:
    path: /pause_the_queue
    method: POST
    data_selector: scenarios
    params:
      cron_utc: 0 23 * * 5
- name: nightly_build
  endpoint:
    path: /nightly_build
    method: POST
    data_selector: scenarios
    params:
      cron_utc: 0 12 * * *
      rerun:
        name: buildkite/pytest
        count: 5
        use_latest_green_commit: true
        branch: master
- name: channel
  endpoint:
    path: /slack.channel
    method: POST
    data_selector: message
    params: {}
- name: direct
  endpoint:
    path: /slack.direct
    method: POST
    data_selector: message
    params: {}
- name: attention_set
  endpoint:
    path: /api/v1/attention_set
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: actions
  endpoint:
    path: /pilot/actions
    method: GET
    data_selector: data
    params: {}
- name: attention_set
  endpoint:
    path: /api/attention_set
    method: GET
    data_selector: data
    params: {}
- name: merge_queue
  endpoint:
    path: /api/merge_queue
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/conversations.history
    method: GET
    data_selector: messages
    params:
      channel: C1234567890
- name: add_comment
  endpoint:
    path: github.add_comment
    method: POST
    data_selector: null
    params: {}
- name: add_label
  endpoint:
    path: github.add_label
    method: POST
    data_selector: null
    params: {}
- name: add_reviewer
  endpoint:
    path: github.add_reviewer
    method: POST
    data_selector: null
    params: {}
- name: compare_commits
  endpoint:
    path: github.compare_commits
    method: POST
    data_selector: null
    params: {}
- name: user_matches
  endpoint:
    path: github.user_matches
    method: POST
    data_selector: null
    params: {}
- name: channel_notifications
  endpoint:
    path: /api/channel_notifications
    method: POST
    data_selector: notifications
    params: {}
- name: personal_notifications
  endpoint:
    path: /api/personal_notifications
    method: POST
    data_selector: notifications
    params: {}
- name: pull_request
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.githubRepository.pullRequest
    params: {}
- name: copy_pull_request
  endpoint:
    path: /mergequeue/copy_pull_request
    method: POST
    data_selector: inputs
    params: {}
- name: instant_merge
  endpoint:
    path: /mergequeue/instant_merge
    method: POST
    data_selector: inputs
    params: {}
- name: pause
  endpoint:
    path: /mergequeue/pause
    method: POST
    data_selector: inputs
    params: {}
- name: queue
  endpoint:
    path: /mergequeue/queue
    method: POST
    data_selector: inputs
    params: {}
- name: synchronize_pull_request
  endpoint:
    path: /mergequeue/synchronize_pull_request
    method: POST
    data_selector: inputs
    params: {}
- name: unpause
  endpoint:
    path: /mergequeue/unpause
    method: POST
    data_selector: inputs
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: slack.channel
  endpoint:
    path: /slack/channel
    method: POST
    data_selector: message
    params: {}
- name: slack.direct
  endpoint:
    path: /slack/direct
    method: POST
    data_selector: message
    params: {}
- name: otel-collector
  endpoint:
    path: /api/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: message
  endpoint:
    path: /api/chat.postMessage
    method: POST
    data_selector: message
    params: {}
- name: repositories
  endpoint:
    path: /user/repos
    method: GET
- name: branches
  endpoint:
    path: /repos/{owner}/{repo}/branches
    method: GET
- name: pull_requests
  endpoint:
    path: /repos/{owner}/{repo}/pulls
    method: GET
- name: config
  endpoint:
    path: /repos/{owner}/{repo}/contents/.github/config.yml
    method: GET
- name: analytics
  endpoint:
    path: /repos/{owner}/{repo}/analytics
    method: GET
- name: example_resource
  endpoint:
    path: /api/v1/example
    method: GET
    data_selector: data
    params: {}
- name: repository
  endpoint:
    path: /api/v1/repo
    method: POST
    data_selector: org
    params: {}
- name: branches
  endpoint:
    path: /api/v1/branches
    method: POST
    data_selector: pattern
    params: {}
- name: pull_request
  endpoint:
    path: /api/v1/pull_request
    method: POST
    data_selector: pull_request
    params: {}
- name: config
  endpoint:
    path: /api/v1/config
    method: GET
    data_selector: merge_rules
    params: {}
- name: pull_request
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.githubRepository.pullRequest
    params: {}
- name: analytics
  endpoint:
    path: /api/v1/analytics
    method: GET
- name: queue_stats
  endpoint:
    path: /api/v1/queue/stats
    method: GET
- name: user_actions
  endpoint:
    path: /api/v1/user_actions
    method: GET
- name: otel-collector
  endpoint:
    path: /api/metrics
    method: GET
    data_selector: metrics
- name: monitoring_metrics
  endpoint:
    path: /monitoring/metrics
    method: GET
    data_selector: metrics
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: metrics
  endpoint:
    path: /api/metrics
    method: GET
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: project
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: data
    params: {}
- name: fetch_repositories
  endpoint:
    path: /fetch-repositories
    method: GET
- name: fetch_base_branches
  endpoint:
    path: /fetch-base-branches
    method: GET
- name: fetch_pull_request_info
  endpoint:
    path: /fetch-pull-request-info
    method: GET
- name: fetch_bot_pull_request_info
  endpoint:
    path: /fetch-bot-pull-request-info
    method: GET
- name: fetch_current_yaml_config
  endpoint:
    path: /fetch-current-yaml-config
    method: GET
- name: fetch_config_change_history
  endpoint:
    path: /fetch-config-change-history
    method: GET
- name: get_merge_queue_statistics
  endpoint:
    path: /get-merge-queue-statistics
    method: GET
- name: repo
  endpoint:
    path: /api/v1/repo
    method: POST
    data_selector: '200: OK Success'
    params: {}
- name: branches
  endpoint:
    path: /api/v1/branches
    method: POST
    data_selector: '200: OK'
    params: {}
- name: pull_request
  endpoint:
    path: /api/v1/pull_request
    method: GET
    data_selector: '200: OK Success'
    params: {}
- name: bot_pull_request
  endpoint:
    path: /api/v1/bot_pull_request
    method: GET
    data_selector: '200: OK Success'
    params: {}
- name: config
  endpoint:
    path: /api/v1/config
    method: GET
    data_selector: '200: OK'
    params: {}
- name: config_history
  endpoint:
    path: /api/v1/config/history
    method: GET
    data_selector: '200: OK Success'
    params: {}
- name: analytics
  endpoint:
    path: /api/v1/analytics
    method: GET
    data_selector: records
    params: {}
- name: queue_stats
  endpoint:
    path: /api/v1/queue/stats
    method: GET
    data_selector: depth
    params: {}
- name: user_actions
  endpoint:
    path: /api/v1/user_actions
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: project
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: data
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: metrics
  endpoint:
    path: /api/metrics
    method: GET
    data_selector: null
    params:
      repos:
      - octocat/Hello-World
      - octocat/Spoon-Knife
      branches:
      - main
- name: Aviator
  endpoint:
    path: /api/webhook
    method: POST
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: project
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: data
    params: {}
- name: permissions
  endpoint:
    path: /user/permissions
    method: GET
    data_selector: permissions
    params: {}
- name: attention_set
  endpoint:
    path: /api/attention_set
    method: GET
    data_selector: data
- name: merge_queue
  endpoint:
    path: /api/merge_queue
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /api/v1/campaign_member
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /api/v1/contact
    method: GET
    data_selector: data
    params: {}
- name: metrics
  endpoint:
    path: /debug/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: projects
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: data
    params: {}
- name: slash_command
  endpoint:
    path: /slack/slash_command
    method: POST
    data_selector: request
    params: {}
- name: event_subscriptions
  endpoint:
    path: /slack/events
    method: POST
    data_selector: event
    params: {}
- name: repos
  endpoint:
    path: /user/repos
    method: GET
    data_selector: repositories
    params: {}
- name: AttentionSet
  endpoint:
    path: /api/attentionset
    method: GET
    data_selector: data
    params: {}
- name: MergeQueue
  endpoint:
    path: /api/mergequeue
    method: GET
    data_selector: data
    params: {}
- name: merge_requests
  endpoint:
    path: /api/merge_requests
    method: GET
    data_selector: data
    params: {}
- name: AttentionSet
  endpoint:
    path: /api/v1/attentionset
    method: GET
    data_selector: data
- name: MergeQueue
  endpoint:
    path: /api/v1/mergequeue
    method: GET
    data_selector: data
- name: metrics
  endpoint:
    path: /api/v1/metrics
    method: GET
    data_selector: data
    params: {}
- name: web_application_server_metrics
  endpoint:
    path: /debug/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: background_worker_server_metrics
  endpoint:
    path: /debug/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: slash_command
  endpoint:
    path: /slack/slash_command
    method: POST
    data_selector: command
    params:
      command: /aviator
      description: connect your Slack account
      usage_hint: connect
- name: event_subscriptions
  endpoint:
    path: /slack/events
    method: POST
    data_selector: event
    params:
      event: app_home_opened
- name: repositories
  endpoint:
    path: /user/repos
    method: GET
    data_selector: repositories
    params: {}
- name: pull_requests
  endpoint:
    path: /repos/{owner}/{repo}/pulls
    method: GET
    data_selector: pull_requests
    params: {}
- name: merge_queue
  endpoint:
    path: /api/merge-queue
    method: GET
    data_selector: data
    params: {}
- name: billing_faqs
  endpoint:
    path: /billing/faqs
    method: GET
    data_selector: faqs
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in Aviator
- Ensure proper permissions are set for the API calls.
- Setup of connected app in Aviator is required.
- Requires setup of connected app in Aviator
- Requires OAuth2 setup for access.
- Some responses may vary based on user permissions
- Uses OAuth2 with refresh token — requires setup of connected app in api
- API may have rate limits that need to be monitored
- Some objects like Contact may return nulls in deeply nested fields
- Aviator supports both cloud and self-hosted sandboxes
- Ensure client ID and secret are correctly set in secrets
- API rate limits apply.
- Ensure client credentials are set in secrets.
- Requires OAuth2 authentication with a valid token.
- Rate limits are imposed on API calls.
- Personas ensure consistent, context-appropriate assistance across all runbook interactions.
- Some responses may include pagination limits
- 'Divide and Conquer: Break transformations into smaller Runbooks'
- 'Context Management: Carefully curate relevant documentation'
- 'Resource Planning: Monitor token usage trends'
- Some API calls may return unexpected results based on user permissions
- Templates can be updated with improved steps based on usage feedback.
- Every update is also internally maintained with version tracking.
- Ensure OAuth setup is completed before integration.
- Some API responses may include nested data structures.
- Supports parameterized templates that can be customized at runtime
- Conditional execution paths are supported
- Create shared personas that embody your team's best practices
- Develop personas tailored to specific projects or technologies
- Create personas that match different team roles
- 'Start Simple: Begin with clear, focused personas before adding complexity'
- 'Test Iteratively: Refine prompts based on actual usage and feedback'
- 'Document Intent: Clearly describe what each persona is designed to accomplish'
- 'Version Control: Keep track of persona changes and their impact'
- Requires OAuth2 authentication setup
- 'Establish Standards: Define when to use specific personas'
- 'Share Knowledge: Document successful persona patterns'
- 'Regular Review: Periodically evaluate and update personas based on team needs'
- 'Training: Ensure team members understand how to effectively use personas'
- Ensure OAuth2 is properly configured in your Aviator settings.
- Some known limitations may affect integration or data quality.
- Each cloud runner uses 4 core CPU with 4GB memory.
- All paused runners are permanently deleted after 4 months of inactivity.
- Some objects may return nulls in nested fields
- Cloud based sandboxes offer easy to setup environments managed by us.
- All our cloud runners are single tenant and do not share permissions or environment
  with any other task.
- A runner will automatically pause after 30 mins of inactivity.
- Uses OAuth2 with refresh token — requires setup of connected app in aviator
- Some objects may return nulls in deeply nested fields
- Agents can work with any codebase accessible via GitHub.
- Agents automatically analyze build and test results, then iteratively recreate changes
  to fix issues.
- You can provide your own Claude API keys.
- Ensure to use the correct OAuth scopes for accessing resources.
- Verify GitHub App permissions are correctly configured
- Check network connectivity from agent containers
- Ensure API gateway is accessible
- Some endpoints may require additional permissions.
- Rate limits apply to all API calls.
- Aviator triggers GitHub using workflow dispatch REST API
- The new workflows need to be merged to your default branch in order to take effect.
- Requires OAuth2 authentication with connected app setup
- Requires OAuth2 authentication with refresh tokens.
- Requires OAuth2 authentication setup.
- Ensure proper permissions are set for API access.
- Requires OAuth2 setup for API access
- Requires setup of OAuth2 for API access.
- API may have rate limits that require handling.
- Requires OAuth2 authentication for API access.
- Each project name within the Aviator workspace should have a unique name.
- Each Release Project is tied to 1 GitHub repository.
- Ensure proper OAuth setup for API access
- Requires a valid OAuth setup to access the API.
- Some endpoints may have rate limits.
- Requires setup of OAuth2 for access
- Ensure scopes are configured correctly
- Aviator recommends making release projects as granular as possible for better manageability.
- Once the Release Project is created, next step is to set up the environments.
- Ensure OAuth scopes are set correctly in the application.
- Changing the environment name will also update the all the past deployments associated
  with this environment.
- The tier can be production, staging or development.
- Requires OAuth2 setup for API access.
- Custom workflow parameters allow you to define and manage key-value pairs that can
  be accessed during your software build and deployment process.
- Ensure proper configuration of OAuth for API access
- Requires proper OAuth2 setup in the Aviator app.
- Custom workflow parameters can be defined for build and deployment processes.
- A cherry-picking workflow may fail due to a merge conflict.
- This document explains how to manage such an issue during a release process in Aviator.
- Cherry-picking enables you to apply specific commits from one branch to another
  without merging the entire branch.
- Aviator will flag such conflicts and provide tools to help resolve them.
- Integration requires OAuth2 setup.
- Requires setting up OAuth for API access
- Some endpoints may have rate limits
- Release candidate version must have '-rcX' suffix, where X is an integer.
- Case sensitivity is important for project and environment names.
- FlexReview operates in read-only mode initially.
- Indexing may take a few minutes, and FlexReview processes the last 1 year of results.
- Some responses may contain null values in certain fields
- FlexReview won't interact with any PRs directly in read-only mode.
- If it takes longer than 60 minutes to index the initial data, please try refreshing
  the page.
- Setup required for OAuth2 authentication.
- Data can be paginated using the 'page' query parameter.
- API supports both REST and GraphQL endpoints.
- Ensure OAuth2 is correctly implemented for authentication.
- When you install the Aviator app for FlexReview, it starts in read-only mode — it
  won’t take any actions or post any comments on the PRs automatically.
- Some fields may return nulls in deeply nested structures
- Aviator reviewer assignment should still work within the CODEOWNERS bounds.
- Ensure that the OAuth2 setup is correctly configured in the Aviator dashboard.
- These optional owner configuration files enhance FlexReview's capabilities by providing
  more flexibility than the traditional CODEOWNERS file.
- Requires setup of OAuth2 for API access
- Ensure client ID and secret are correctly configured
- If the pull request only contains unowned file paths, no reviewers will be assigned.
- FlexReview can override the add or remove reviewers based on CODEOWNERS.
- Some responses may have nested structures
- The format allows you to put multiple teams on one line.
- Some fields may return nulls in nested structures
- Requires configuration of OAuth2 connected app.
- Rate limits apply to API calls
- The excluded reviewers are still accepted for approval check validation, but are
  never suggested by FlexReview.
- This is ideal for bot users that are set as a normal User account in GitHub.
- Ensure proper authentication scopes are granted
- Requires setting up OAuth2 authentication.
- Data may be subject to rate limits
- Requires setup of connected app in Aviator.
- API may have rate limits that need to be considered
- These whitelists act as AND-gates, that means a pull request will be assigned a
  reviewer when it satisfies both the authors and the reviewers whitelists.
- Excluded reviewers are accepted for approval check validation but are never suggested
  by FlexReview.
- Ideal for bot users that are set as a normal User account in GitHub.
- Uses OAuth2 with refresh token — requires setup of connected app in PagerDuty
- OAuth setup required for access.
- Ensure OAuth scopes are correctly assigned in the app settings.
- These whitelists act as AND-gates, a pull request will be assigned a reviewer when
  it satisfies both the authors and the reviewers whitelists.
- Validation applies only to pull requests targeting specified branches.
- Isolated branches are excluded from Validation.
- Ensure Slack notifications can be delivered by enabling Slack integration.
- Recommended to set up a Team Default Slack Channel for every team.
- The API requires OAuth2 authentication.
- Ensure to set up the application in Aviator to obtain credentials.
- Ensure that the correct OAuth scopes are set for access to the API.
- This feature is currently available only for on-prem users.
- Uses OAuth2 with refresh token — requires setup of connected app in FlexReview
- Certain endpoints may have rate limits that could affect data extraction.
- Ensure to handle API errors gracefully.
- Validation applies only to pull request targeting specified branches.
- Make sure your admin has enabled Slack integration
- Recommended to set up a Team Default Slack Channel for every team
- Strongly recommend setting up new reviewer automation rules
- Requires setup of connected app in aviator
- Some API responses may vary based on user permissions
- Requires setup of OAuth2 credentials
- API requires OAuth2 authentication.
- Rate limits may apply depending on usage.
- Paths are interpreted relative to the directory containing aviator-config.yaml.
- OAuth2 with refresh token is required.
- The API may have rate limits that need to be considered.
- This API uses OAuth2 for authentication.
- Requires setup of connected app in api
- Requires valid OAuth2 credentials to access the API.
- Rate limit applies to API requests.
- The paths field is optional; if omitted, all files in the directory (recursively)
  will trigger an FYI notification.
- May return nulls in certain fields
- Default trigger label is called mergequeue.
- Uses OAuth2 with refresh token — requires connected app setup in Aviator
- API rate limits may apply
- Some endpoints may require additional permissions to access.
- Requires setup of OAuth in Aviator
- Some responses may include null fields.
- Ensure to set up necessary OAuth permissions in the Aviator application.
- Ensure to handle rate limiting effectively
- Ensure proper OAuth scopes are set for API access
- Set merge_mode type to parallel in the yaml configuration.
- Set use_fast_forwarding to true in the parallel_mode configuration.
- Requires proper OAuth setup to access resources
- Uses regex to validate PR title and body
- Requires setup of connected app for OAuth2 authentication.
- Requires a valid OAuth token for access
- Rate limits may apply based on the usage
- Some endpoints may require specific permissions to access.
- When the checks fail, you will see the 'name' of the validation reported in the
  comment as failure, blocking the PR from getting queued.
- Comments are enabled by default in your repository.
- Requires OAuth2 setup for connected app.
- Ensure proper OAuth scopes are configured for the app.
- The check typically contains similar details that you also see on the sticky comment.
- 'This check is enabled by default but it can be disabled using the config setting
  below: merge_rules: publish_status_check: false'
- Some objects may return nulls in certain fields
- Some objects may return incomplete data in nested fields
- The API supports OAuth2 authentication.
- Ensure to monitor API usage to avoid throttling.
- aviator/checks as a GitHub status check
- Enable comments for new PRs - When this setting is turned ON, Aviator will post
  a comment on each PR to link it with a new or existing ChangeSet.
- Require global CI validation - Continue to global CI validation for more details.
- Automatically add PRs with the same branch name to a ChangeSet - When turned on,
  Aviator will automatically add your PR to the matching ChangeSet when your changes
  share the same branch name. A new ChangeSet will be created if it doesn't exist.
- Check API limits for requests
- There are limitations when connecting as a GitHub app using SAML restricted authentication.
- Custom webhooks may need to be set up for requests to Aviator when using only Personal
  Access token.
- Ensure OAuth scopes are properly configured for access.
- If you haven't connected your GitHub repositories to Aviator yet, you can do so
  by clicking the 'Add Repos' button on the Repositories page.
- If you are using global CI validation, you must also make sure the webhook is configured.
- Setup requires OAuth2 authentication with a connected app.
- This is idp initiated authentication, so you can login in directly from the Okta
  portal.
- It’s also recommended to post an announcement for your users to explain how the
  migration will work.
- API supports pagination with cursor.
- Rate limits apply to API usage.
- Connect your app using a Personal Developer token instead of using Aviator app authentication
  when connecting as a GitHub app has limitations.
- You may have to also setup custom webhooks to send requests to Aviator.
- Ensure OAuth2 setup is completed for access.
- Ensure to configure OAuth app for access.
- Requires OAuth2 authentication.
- Ensure proper scopes are set for API access.
- Requires setup of OAuth2 credentials in Aviator.
- Uses OAuth2 with refresh token — requires setup in Aviator
- Parallel mode uses Draft PRs to define parallel pipelines. Your repository must
  have the capability to support Draft PRs.
- The Github Mergeability check does not work on Draft PRs in Parallel mode, so you
  should explicitly specify the required checks for Draft PRs on the Status Check
  page.
- At a minimum, we recommend setting the max bot builds in parallel configuration
  while enabling parallel mode.
- Requires setup of OAuth2 client in Aviator
- Some API responses may include pagination
- Requires OAuth2 authentication
- CI should run on mq-bot- branches, but not on mq-tmp- branches.
- For GitHub Actions, pull-request trigger should suffice for mq-bot- branches.
- Parallel mode uses Draft PRs to define parallel pipelines.
- GitHub Mergeability check does not work on Draft PRs in Parallel mode.
- Rate limiting applies to all endpoints
- Ensure proper authentication setup for API access.
- GitHub Actions can be configured to trigger based on the pull-request related events.
- CircleCI supports ignoring specific branch prefixes.
- Buildkite supports ignoring specific branch prefixes.
- API may experience rate limits during peak hours.
- Requires OAuth2 setup in the Aviator platform.
- OAuth2 flow requires setup in Aviator.
- Rate limits apply to API calls.
- Ensure to handle token expiration properly.
- Defaults to true for use_optimistic_validation
- Failure depth is capped to 3 to limit GitHub API calls
- Requires OAuth2 setup for integration.
- Requires OAuth2 setup in Aviator
- Check rate limits on API calls
- Requires configuration of OAuth2 for API access
- The API supports both REST and GraphQL endpoints.
- Requires setup of OAuth application.
- The maximum number of unique affectedTargets supported is 1,000,000 per account.
- Ensure proper permissions are set for API access
- Pausing a queue allows you to control whether devs can merge PRs.
- Deactivating a repository will halt most of the Aviator features on the repository.
- 'Two separate actions for this API: ''update'' and ''queue''.'
- Default skip_line label is mergequeue-priority.
- Instant merge requires elevated permissions for Aviator.
- OAuth2 authentication is required to access the API endpoints.
- Requires setup of OAuth2 for integration.
- Audit trail information can be found on the Merge Rules page under the Configuration
  History tab.
- Rate limits apply for API calls
- Default skip_line label is mergequeue-priority
- Instant merge requires elevated permissions for Aviator
- OAuth2 requires initial setup in the Aviator console.
- Rate limits may apply based on user tier
- OAuth2 with refresh token required
- Ensure all API keys are correctly configured
- To reduce queue resets, it's better to revalidate the PRs if they are really stale.
- This can now be achieved using the Ready hook in Aviator.
- Rate limits may apply
- Ensure proper permissions are granted to the application.
- Rate limiting is applied to avoid excessive requests.
- MergeQueue communicates with pull request using GitHub labels, GitHub comments and
  the Aviator CLI.
- To reduce queue resets, it’s better to revalidate the PRs if they are really stale.
- Every time a PR is labeled ready to queue, this JavaScript method will ensure that
  the PR is updated if it’s falling behind.
- OAuth2 authentication is required for API access.
- Ensure API keys are kept secure
- Rate limiting applies, ensure to handle retries.
- This label is used to identify that a pull request is ready to be processed by Aviator
  bot.
- When tagged with this label, Aviator bot will move the PR to the front of the queue.
- If the pull request fails to merge, Aviator bot will add this label.
- If delete_branch is enabled, Aviator bot will skip deleting a branch with this label
  after merging.
- Requires setup of OAuth2 in the application settings
- Rate limits apply to API usage
- Requires setup of OAuth2 for integration
- Ensure API key is valid and has appropriate permissions
- Requires setup of OAuth2 for accessing the API
- Ensure correct permissions are granted for tokens
- Aviator communicates with pull request using GitHub labels, GitHub comments and
  the Aviator CLI.
- OAuth2 requires setup of connected app in Aviator.
- This page guides you through configuration files and all the possible ways you can
  customize your MergeQueue experience.
- Ensure to check API limits to avoid request throttling.
- Uses OAuth2 with refresh token — requires setup of connected app in API
- Uses GitHub labels and comments for pull request processing.
- Ensure OAuth2 setup is complete for authentication
- The Stacked PRs CLI does not require creating an Aviator account.
- Authentication requires connected app setup.
- Aviator bot uses GitHub labels and comments for managing pull requests.
- Uses OAuth2 with refresh token.
- Ensure proper scopes are set in your app
- Some responses may include nested fields.
- OAuth2 authentication is required for all API requests.
- Rate limits are enforced on API calls.
- Set up the GitHub CLI for GitHub authentication
- Alternatively create a Personal Access Token
- Authentication requires OAuth2 setup.
- Default Branch Update Master to Main
- Requires OAuth2 setup with client credentials.
- Ensure token refresh workflow is handled.
- Does not require creating an Aviator account
- av CLI needs a GitHub credential for creating and updating PRs
- Uses OAuth2 for authentication
- Ensure OAuth2 setup is completed correctly.
- API may rate limit requests.
- Uses Aviator CLI for managing stacked PRs
- Requires setup of OAuth application in Aviator.
- Occasionally you might accidentally create a large pull request.
- By using Split a Commit feature, you can split a large commit into pieces.
- Ensure proper OAuth scopes are configured
- Ensure to configure OAuth settings in the Aviator application.
- Branches created using av branch should only be renamed with av branch as well.
- If you have already created a pull request via av pr, av will not rename the branch
  without the --force flag.
- av cannot update the remote branch, but you can still force update your local branch
  name.
- Force updating the branch name requires closing the corresponding pull request and
  opening a new one using av pr.
- Ensure proper permissions are granted for API access
- The API supports both public and private repositories.
- Convenient commands include `av commit` and `av commit --amend` that run `git commit`
  along with `av restack` afterwards.
- Ensure proper setup of OAuth2 for API access.
- Some API endpoints may have rate limits
- Some API endpoints may have rate limits.
- Make sure to handle token expiration.
- Aviator CLI allows you to split and fold pull requests.
- Requires OAuth2 configuration for access token generation.
- Ensure to handle token expiration correctly.
- The generated token should have the repo scope (all other scopes can be left un-checked)
- Add the created Personal Access Token to your Aviator configuration file `~/.av/config.yaml`
- Requires OAuth2 setup for authentication
- OAuth2 authentication requires prior setup.
- This depends on `bash-completion` package. You need to install this with your OS
  package managers.
- You will need to use bash from Homebrew (`brew install bash bash-completion`) as
  the pre-installed bash version is old.
- Aviator CLI needs to maintain the metadata for branches.
- Metadata is created upon branch creation with av branch.
- Ensure correct setup for the connected app.
- Requires OAuth2 setup — ensure correct scopes are granted
- Requires setup of OAuth app in Aviator
- The generated token should have the `repo` scope.
- Add the created Personal Access Token to `~/.av/config.yaml`.
- Ensure that the OAuth application is properly configured.
- Use av sync most of the time.
- Use av sync --rebase-to-trunk when you have a merge conflict with the trunk branch
  or you want to make sure that your topic branch is up-to-date with the latest trunk.
- Use av restack when you want to rebase the children branches without syncing with
  GitHub.
- Some responses may include nulls in nested fields
- The GitHub personal access token is required for authentication.
- Requires OAuth2 authentication for access
- Requires OAuth2 authentication with a connected app.
- Ensure proper OAuth2 application setup before using the API.
- Requires setup of OAuth 2.0 credentials.
- Some responses may contain pagination fields
- Aviator will refuse to merge a stack that has a failing PR within it.
- This can be changed if you use on-prem installation.
- MergeQueue requires a particular status check before merging a PR
- Pull requests in a stack do not explicitly target the default branch
- API usage is subject to rate limits.
- Ensure proper authentication setup to avoid access issues.
- Ensure OAuth app is properly configured in the Aviator dashboard.
- Aviator reports an pending status check with state 'unknown' usually indicates that
  MergeQueue is configured to require a particular status check before merging a PR.
- PRs in a stack (other than the first) do not explicitly target the default branch.
- If using GitHub actions, make sure your workflow configuration is set to run the
  check on all branches.
- Ensure OAuth2 tokens are refreshed appropriately
- Aviator MergeQueue along with the stacked PRs CLI can significantly improve the
  developer experience for merging and updating the PRs.
- Requires OAuth2 setup for integration
- In your repository .git directory has a file named .git/av/av.db. This file is a
  JSON document.
- If you are unsure, please take a backup.
- Only set to True during development
- Some API calls may have rate limits
- Requires a valid OAuth configuration.
- API requires OAuth2 authentication with a refresh token.
- Requires OAuth2 configuration for API access
- Ensure that OAuth2 credentials are properly set up.
- OAuth2 authentication is required for all API calls.
- Rate limiting applies to all endpoints.
- Some responses may contain nested data structures
- Requires setup of OAuth2 application in Aviator.
- API requires OAuth2 setup.
- Requires setup of OAuth credentials in Aviator.
- Ensure the API key has the necessary permissions.
- Ensure correct permissions are set for API usage
- Requires setup of OAuth2 in the Aviator platform
- Ensure API key is configured correctly
- Rate limits are enforced on API calls
- Ensure proper OAuth2 setup is completed.
- Ensure OAuth scopes are correctly configured
- Ensure OAuth setup is complete before making API calls
- API may experience rate limiting under heavy load
- Some API responses may vary based on permissions
- Requires setup of OAuth2 in Aviator
- Requires OAuth2 setup with refresh token.
- The command requires you to setup a Personal Access Token from GitHub.
- Token expiration may require re-authentication.
- OAuth2 is required for authentication.
- Ensure that API rate limits are not exceeded during integration.
- Some API limits may apply based on usage.
- Ensure proper OAuth scopes are set up.
- Uses OAuth2 with refresh token — requires setup of an application in Aviator
- API usage requires an OAuth2 token.
- Ensure OAuth2 setup is complete before attempting to authenticate.
- Requires OAuth2 setup including client ID and secret.
- Ensure API calls are within rate limits.
- Requires OAuth2 authentication with setup in Aviator.
- Ensure to handle pagination if applicable.
- The API rate limit is 100 requests per minute.
- Requires OAuth2 authentication with a connected app setup in Aviator.
- Rate limits may apply on API calls
- Some features may require additional permissions.
- Requires OAuth2 setup with a connected app.
- Requires OAuth2 setup.
- API has rate limits.
- Some responses may include pagination
- Ensure that the client ID and secret are correctly set up in the DLT secrets.
- Ensure the OAuth2 setup is correctly configured.
- Some integration may require specific permissions to access certain resources.
- Currently overwrites the remote with force — can overwrite changes on GitHub
- When a branch is merged, the child branches are restacked to the new parent
- Ensure the client ID and secret are configured properly in the environment.
- Requires authentication through OAuth2
- Requires OAuth2 authentication to access all endpoints.
- Currently, this overwrites the remote with force.
- To avoid overwriting changes on GitHub, pull or manually cherry-pick changes.
- Requires setup of a connected app in Aviator
- Requires setup of OAuth credentials in Aviator
- Ensure correct scopes are provided for access
- Using the Aviator Pilot framework, you can configure rules to trigger actions on
  a specific fixed schedule.
- Currently Pilot framework only support precision of 1 hour, so the events will only
  be triggered at most once an hour.
- Uses OAuth2 with refresh token — requires setup of connected app in Aviator.
- Some API calls may have rate limits.
- Some API calls may return nulls in deeply nested fields
- Each Javascript code execution has maximum time limit of 10 seconds
- Ensure to handle potential rate limits in API calls.
- You can specify your on-prem Aviator deployment URL.
- Ensure the OAuth tokens are properly configured before accessing the API.
- A scenario is a configurable, automated process that is invoked in response to a
  certain trigger and which in turn may run several actions.
- Currently Pilot framework only support precision of 1 hour
- Ensure correct scopes are set for OAuth tokens.
- API calls are rate limited, ensure to handle limits properly.
- Some endpoints may return paginated results.
- Requires a valid Slack App with appropriate permissions.
- Admin privileges required for setup and customization.
- Users can override default notification settings.
- Ensure AV_API_TOKEN is set to the value of the created user access token.
- Requires setting up an OAuth application in Slack
- Rate limits apply based on the type of token used
- Update YOUR_ORG/YOUR_REPO and YOUR API KEY HERE parts in the config.
- The API key can be obtained from https://app.aviator.co/integrations/api.
- Requires setup of Slack app and OAuth scopes.
- Admin privileges required.
- Uses OAuth2 authentication.
- Use a user access token for authentication.
- Set AV_API_TOKEN environment variable to the token value.
- This API is only available in Enterprise plan.
- API key can be obtained from https://app.aviator.co/integrations/api.
- You need to update the credentials part and the repository list part.
- Requires OAuth2 setup for access
- Endpoints may have rate limits
- Aviator does not use every single permission that it is granted.
- 'Test on your own account: Please only test vulnerabilities using your own account
  or with explicit permission from the account holder. This helps protect our users''
  privacy and data integrity.'
- 'Respect privacy and data: We ask that you make every privacy violations, unauthorized
  access to data, and any actions that could potentially damage or destroy data.'
- 'Maintain service integrity: Please make a good faith effort to avoid interruption
  or degradation of our services. interruption or degradation of our services.'
- 'Limited scope: If you manage to gain remote access to our systems, please do not
  attempt to expand or elevate your access to other servers.'
- 'Responsible disclosure: To prevent potential exploitation, we kindly request that
  you do not make the vulnerability public before reporting it to us, and give us
  adequate time to address the issue.'
- Metrics data may vary based on user permissions
- 'Expire user authorization tokens: YES'
- 'Request user authorization (OAuth) during installation: NO'
- 'Enable Device Flow: NO'
- GitHub OAuth connection is optional.
- You can find the Client ID in the General settings of the GitHub app.
- You can generate a client secret in the General settings for the GitHub app.
- Please reach out to howto@aviator.co for instructions on how to set up Kubernetes-based
  installation.
- This is managed using Helm.
- Ensure GitHub App is installed and permissions are granted.
- Check rate limits on API usage.
- Aviator only uses the subset of permissions it needs to do its job.
- The web application server won’t serve the metrics endpoint by default. Enable it
  by updating values.yaml with SERVE_PROMETHEUS_ENDPOINT set to true.
- The background worker server exposes the metrics endpoint on port 8491.
- Ensure correct OAuth scopes are set up
- Requires setup of Slack App for API access
- 'Set up redirect URL: https://<your_domain>/internal/api/slack/oauth/finish'
- 'Enable bot events: app_home_opened'
- Enable the Home Tab
- You would typically set up a new GitHub app when installing Aviator on-premise.
- Uses OAuth2 with refresh token — requires setup of GitHub OAuth app
- GitHub app connection is critical to configure when setting up FlexReview, MergeQueue,
  or Releases.
- GitHub app connection via request-approval workflow is not supported natively within
  GitHub.
- Requires OAuth setup for access to APIs
- Check your Dashboard to see whether the queue is active or paused.
- Verify that the app is still authorized to your repository.
- The trial period does not require any payment methods.
- You can cancel your plan any time by emailing support@aviator.co.
- You need to be able to SSH or have a console access to it.
- You need a root access on it.
- Docker engine needs to be installed.
- Metrics may include sensitive data
- By default, the web application server won’t serve the metrics endpoint unless enabled.
- Using OAuth2 with refresh token — requires setup of connected app in api
- 'Set up a redirect URL: https://<your_domain>/internal/api/slack/oauth/finish'
- 'Select bot token scopes: chat:write, chat:write.public, commands, im:write'
- Ensure proper permissions are set for the GitHub App to access required repositories.
- GitHub app connection is critical to configure when setting up FlexReview, MergeQueue
  or Releases.
- Pending approval workflow is not supported natively within GitHub.
- Integrates with GitHub for Pull Request management
- May require setup of GitHub App for authentication
- Check if all your CI statuses are completed.
- Check if there is no other PR ahead of your PR that is pending merge.
- Ensure OAuth2 setup is completed for authentication
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check the request payload and parameters.'
- '401 Unauthorized: Verify access token validity.'
- '401 Unauthorized: Ensure that the correct OAuth credentials are provided.'
- 'INVALID_CREDENTIALS: Check client ID and secret'
- 'RATE_LIMIT_EXCEEDED: Reduce request frequency'
- '403 Forbidden: Ensure proper permissions are set'
- '401 Unauthorized: Check the provided token or client credentials.'
- '401 Unauthorized: Check OAuth token'
- '404 Not Found: Verify endpoint path'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'INVALID_TOKEN: Check if the token is expired or revoked'
- 'NOT_FOUND: Verify the requested resource exists'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Ensure valid access token.'
- '429 Too Many Requests: Rate limit exceeded.'
- '429 Too Many Requests: Adjust your request rate.'
- '400 Bad Request: Check your request parameters.'
- 'RATE_LIMIT_EXCEEDED: Reduce API call frequency'
- 'INVALID_TOKEN: Refresh token may have expired'
- 'Parsing Errors: Ensure proper markdown formatting and section headers'
- 'Missing Steps: Verify all required phases and tasks are included'
- 'Invalid Categories: Check that categories match predefined values'
- 'Execution Failures: Review step dependencies and prerequisites'
- 'INVALID_TOKEN: Check if the token is expired or invalid.'
- 'ACCESS_DENIED: Verify user permissions.'
- 'NOT_FOUND: Ensure the endpoint path is correct.'
- 'PARSING_ERRORS: Ensure proper markdown formatting and section headers'
- 'MISSING_STEPS: Verify all required phases and tasks are included'
- 'INVALID_CATEGORIES: Check that categories match predefined values'
- 'EXECUTION_FAILURES: Review step dependencies and prerequisites'
- '401 Unauthorized: Check your credentials'
- '403 Forbidden: You do not have permission to access this resource'
- '403 Forbidden: Check your permissions.'
- '500 Internal Server Error: Try again later.'
- 'Error code example: REQUEST_LIMIT_EXCEEDED'
- 'Error code example: QUERY_TIMEOUT'
- 'Error code example: 401 Unauthorized'
- '403 Forbidden: Ensure user has the required permissions'
- '400 Bad Request: Check the request parameters and format.'
- '401 Unauthorized: Ensure your token is valid and not expired.'
- '404 Not Found: Verify the endpoint path.'
- '429 Too Many Requests: Rate limit exceeded, retry later.'
- '401 Unauthorized: Check OAuth token or scopes'
- '401 Unauthorized: Check your credentials.'
- '401 Unauthorized: Check OAuth credentials.'
- '404 Not Found: Verify endpoint URL.'
- '401 Unauthorized: Check your token and its permissions'
- '404 Not Found: Ensure the endpoint exists'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify OAuth token.'
- '404 Not Found: Check the endpoint URL.'
- '429 Too Many Requests: Implement exponential backoff.'
- '401 Unauthorized: Verify client credentials.'
- '403 Forbidden: Check your API key or token permissions'
- '404 Not Found: Ensure the endpoint is correct'
- '400 Bad Request: Check request parameters'
- '500 Internal Server Error: Retry the request'
- '401 Unauthorized: Check your OAuth token.'
- '403 Forbidden: Insufficient permissions for the requested resource.'
- '401 Unauthorized: Check OAuth credentials'
- '404 Not Found: Resource does not exist'
- '500 Internal Server Error: Try again later'
- '401 Unauthorized: Check OAuth token validity.'
- '404 Not Found: Verify endpoint path.'
- '401 Unauthorized: Validate OAuth token and permissions.'
- '404 Not Found: Check endpoint path and parameters.'
- '401 Unauthorized: Verify client credentials and token validity'
- '404 Not Found: Check endpoint paths for correctness'
- '401 Unauthorized: Check your credentials and scopes.'
- '429 Too Many Requests: Rate limit exceeded. Try again later.'
- '404 Not Found: Ensure the endpoint is correct.'
- '401 Unauthorized: Check your access token.'
- '500 Internal Server Error: Retry the request after a brief wait.'
- '429 Too Many Requests: Rate limit exceeded, try again later'
- '403 Forbidden: Check permissions on the requested resource'
- '401 Unauthorized: Ensure valid token is used'
- '429 Too Many Requests: Reduce the request frequency.'
- '400: Invalid release candidate version'
- '400: Invalid commit hash'
- '400: Release environment not found'
- '400: Release not found'
- '404: Release environment not found'
- '404: Release not found'
- 'RATE_LIMIT_EXCEEDED: Reduce request rate'
- 'INVALID_TOKEN: Check token validity or refresh token'
- '403 FORBIDDEN: Verify permissions for this endpoint'
- '404 Not Found: Verify the endpoint.'
- 'INVALID_GRANT: Check client credentials and redirect URI.'
- '401 Unauthorized: Verify OAuth token validity.'
- '401 Unauthorized: Check your token and permissions.'
- '401 Unauthorized: Verify the access token.'
- '404 Not Found: The requested resource does not exist.'
- '401 Unauthorized: Invalid client ID or secret'
- '429 Too Many Requests: Rate limit exceeded'
- '404 Not Found: Verify resource path'
- '401 Unauthorized: Recheck OAuth credentials'
- '401 Unauthorized: Token may be expired or invalid'
- '403 Forbidden: Insufficient permissions for the requested resource'
- 'INVALID_TOKEN: Check the token and try again.'
- 'ACCESS_DENIED: Ensure proper permissions are granted.'
- 'INVALID_REQUEST: Check request parameters'
- 'UNAUTHORIZED: Verify OAuth2 token'
- 'RATE_LIMIT_EXCEEDED: Slow down requests'
- '429 Too Many Requests: You have exceeded the rate limit'
- '401 Unauthorized: Check your OAuth token'
- '403 Forbidden: Check your permissions'
- '401 Unauthorized: Check client credentials or token validity.'
- '401 Unauthorized: Check your credentials and token validity.'
- '403 Forbidden: Check your API key and permissions.'
- '404 Not Found: Verify the endpoint and resource IDs.'
- '429 Too Many Requests: Reduce the frequency of API calls.'
- '500 Internal Server Error: Retry the request after a brief delay.'
- '403 Forbidden: Check user permissions'
- 'Invalid token: Ensure the OAuth token is valid'
- '401 Unauthorized: Verify your authentication credentials.'
- '401 Unauthorized: Check OAuth scopes or token expiration'
- '404 Not Found: Verify the endpoint and parameters.'
- '401 Unauthorized: Check your API key or token'
- '403 Forbidden: Ensure you have the right permissions.'
- '403 Forbidden: You do not have permission to access this resource.'
- '403 Forbidden: Check user permissions.'
- '500 Internal Server Error: Retry the request later.'
- '403 Forbidden: Insufficient permissions to access this resource'
- '403 Forbidden: Check permissions for the API key'
- '429 Too Many Requests: Slow down your requests'
- '500 Internal Server Error: Retry request'
- 'REQUEST_LIMIT_EXCEEDED: Reduce API call frequency'
- '401 Unauthorized: Check OAuth token and scopes'
- '403 Forbidden: Check your permissions for this endpoint.'
- '404 Not Found: Ensure the endpoint URL is correct.'
- '401 Unauthorized: Check your credentials or token expiration'
- '403 Forbidden: Check permissions for the requested resource.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '403 Forbidden: Permissions issue'
- 'INVALID_CREDENTIALS: Check your client ID and secret.'
- 'ACCESS_DENIED: Ensure you have the necessary permissions.'
- '404 Not Found: Verify the endpoint URL'
- 'INVALID_TOKEN: Check token validity and refresh if needed'
- 'ACCESS_DENIED: Verify user permissions for the requested resource'
- '401 Unauthorized: Check your OAuth token and permissions'
- '403 Forbidden: Ensure you have the necessary scopes'
- '401 Unauthorized: Check OAuth scopes or token expiration.'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Check your authentication token'
- '401 Unauthorized: Ensure your token is valid.'
- '401 Unauthorized: Check client credentials or token expiration'
- '400 Bad Request: Check the request body for errors.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '401 Unauthorized: Verify credentials'
- '403 Forbidden: Insufficient permissions'
- 'RATE_LIMIT_EXCEEDED: Reduce the number of API calls'
- 'INVALID_TOKEN: Check if the token has expired or is invalid'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of requests.'
- 'INVALID_TOKEN: Ensure that the token is valid and not expired.'
- '401 Unauthorized: Invalid token or insufficient scopes.'
- '401 Unauthorized: Check your credentials and access permissions.'
- '429 Too Many Requests: Rate limit exceeded, please try again later.'
- '429 Too Many Requests: Consider reducing request rate.'
- '403 Forbidden: Check API permissions.'
- '404 Not Found: Verify the requested resource path.'
- '401 Unauthorized: Recheck API key validity'
- 'Contact: support@aviator.co if you have any issues with the setup.'
- '401 Unauthorized: Check token validity.'
- '404 Not Found: Verify endpoint existence.'
- '403 Forbidden: Verify permissions.'
- 'INVALID_GRANT: Check client credentials or refresh token.'
- '401 Unauthorized: Check your OAuth token and scopes.'
- 'RATE_LIMIT_EXCEEDED: Too many requests, please slow down'
- '401 Unauthorized: Check your OAuth credentials'
- 'INVALID_TOKEN: Check if the token is expired or invalid'
- '403 Forbidden: Check permissions for the requested resource'
- '404 Not Found: Verify the endpoint path'
- '403 Forbidden: Check API permissions'
- '429 Too Many Requests: Reduce request frequency'
- '401 Unauthorized: Check the access token or scopes.'
- '429 Too Many Requests: Reduce request frequency.'
- '403 Forbidden: Check your permissions for the requested resource.'
- '401 Unauthorized: Invalid credentials or token expired.'
- '403 Forbidden: Insufficient permissions.'
- '401 Unauthorized: Verify client credentials'
- '404 Not Found: Verify the endpoint path is correct'
- '401 Unauthorized: Check your access token'
- '401 Unauthorized: Check your authentication credentials.'
- '403 Forbidden: Ensure you have proper permissions.'
- '403 Forbidden: Check API key and permissions'
- '401 Unauthorized: Check your credentials and permissions.'
- '404 Not Found: Verify the endpoint URL.'
- '429 Too Many Requests: You have exceeded your rate limit.'
- '401 Unauthorized: Invalid credentials.'
- '401 Unauthorized: Verify API key or token'
- '404 Not Found: Check endpoint URL'
- '403 Forbidden: Check API key permissions'
- '500 Internal Server Error: Retry after a short delay'
- 'REQUEST_FAILED: Verify your request parameters'
- '401 Unauthorized: Check your token validity'
- '401 Unauthorized: Check OAuth token validity'
- '400 Bad Request: Check the request format and required fields.'
- '401 Unauthorized: Verify the access token is valid.'
- '403 Forbidden: Check your permissions or authentication.'
- '429 Too Many Requests: You are being rate limited.'
- '404 Not Found: Confirm the requested resource exists.'
- 'INVALID_REQUEST: Check your parameters and try again'
- '403 Forbidden: Verify your permissions'
- 'INVALID_TOKEN: Ensure the token is generated correctly'
- '403 FORBIDDEN: Check user permissions'
- '404 NOT FOUND: Verify the endpoint path'
- '500 Internal Server Error: Retry the request or contact support'
- 'VALIDATION_ERROR: Check the request payload for errors.'
- 'UNAUTHORIZED: Verify authentication credentials.'
- '400 BAD REQUEST: Check the request format or parameters.'
- '401 UNAUTHORIZED: Ensure the access token is valid.'
- '404 NOT FOUND: Verify the endpoint path.'
- 'NOT_FOUND: Verify the endpoint path is correct'
- 'INVALID_TOKEN: Check the token and try again'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of requests'
- '403 FORBIDDEN: Verify permissions and access rights'
- 'INVALID_CREDENTIALS: Check the provided client ID and secret.'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of API requests.'
- '401 Unauthorized: Check if the token is valid.'
- '401 Unauthorized: Invalid credentials or token expired'
- 'INVALID_REQUEST: Check the request parameters.'
- 'UNAUTHORIZED: Token may be expired or invalid.'
- '400 Bad Request: Check request payload for errors.'
- '401 Unauthorized: Verify token and permissions.'
- '500 Internal Server Error: Retry after some time.'
- '401 Unauthorized: Check OAuth token and permissions'
- '400 Bad Request: Validate request parameters'
- '401 Unauthorized: Check if your token is valid.'
- '404 Not Found: The requested resource could not be found.'
- '401 Unauthorized: Check your OAuth tokens.'
- '401 Unauthorized: Check your credentials and token.'
- '403 Forbidden: You don''t have permission to access this resource.'
- 'INVALID_GRANT: Check the client credentials and authorization flow.'
- 'TOKEN_EXPIRED: Refresh the access token using the refresh token.'
- '403 FORBIDDEN: Verify user permissions for the requested resource.'
- '401 Unauthorized: Check client credentials and token expiration'
- '401 Unauthorized: Check client_id and client_secret'
- '429 Too Many Requests: Reduce API call frequency.'
- '400 Bad Request: Check your request structure'
- '401 Unauthorized: Verify your token'
- 'INVALID_CLIENT: Ensure client_id and client_secret are correct'
- 'INVALID_GRANT: Check if the refresh_token is valid'
- 'ACCESS_DENIED: Ensure your account has the necessary permissions.'
- '401 Unauthorized: Check your authentication credentials'
- '401 Unauthorized: Verify token validity.'
- 'INVALID_TOKEN: Check the access token and refresh token.'
- 'NOT_AUTHORIZED: Ensure that the user has the necessary permissions.'
- 'RATE_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'INVALID_TOKEN: Recheck OAuth token or refresh token'
- 'INVALID_TOKEN: Ensure the token is valid and not expired.'
- '401 Unauthorized: Check your OAuth credentials.'
- '404 Not Found: Verify the endpoint or resource path.'
- '403 Forbidden: Check permissions'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Check credentials and permissions'
- 'RATE_LIMIT_EXCEEDED: Reduce frequency of requests'
- '401 Unauthorized: Check client credentials'
- '403 Forbidden: Ensure you have permission for the requested action'
- '403 Forbidden: Ensure that you have the necessary permissions.'
- '401 Unauthorized: Check OAuth token.'
- '401 Unauthorized: Token may be expired.'
- 'INVALID_TOKEN: Check the validity of the token.'
- '403 Forbidden: Ensure sufficient permissions.'
- '403 Forbidden: Check for proper permissions.'
- '401 Unauthorized: Check your OAuth2 token and permissions'
- '404 Not Found: Ensure the endpoint exists and is correctly spelled'
- '401 Unauthorized: Check your OAuth2 token'
- 'INVALID_AUTH: Check your authentication credentials'
- 'NOT_FOUND: The requested resource could not be found'
- 'RATE_LIMIT_EXCEEDED: You have exceeded the rate limit'
- '401 Unauthorized: Verify your credentials.'
- '404 Not Found: Check the endpoint path.'
- '401 Unauthorized: Verify token and permissions'
- '403 Forbidden: Permission denied'
- 'INVALID_TOKEN: Reauthenticate to obtain a new token'
- '403 Forbidden: Check user permissions for the requested resource'
- '403 Forbidden: Check user permissions or access rights'
- '404 Not Found: Verify the endpoint or resource ID'
- '401 Unauthorized: Check API key or OAuth token'
- '403 Forbidden: Ensure proper permissions'
- '404 Not Found: Verify endpoint or resource exists'
- '403 Forbidden: Check permissions.'
- '400 Bad Request: Check request format and parameters.'
- '404 Not Found: Check the endpoint path'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls'
- '401 Unauthorized: Recheck OAuth scopes'
- '404 Not Found: Verify the endpoint'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of API calls'
- 'INVALID_TOKEN: Check the validity of the OAuth token'
- '403 Forbidden: Ensure the required permissions are granted'
- '403 Forbidden: Check your permissions or OAuth token validity.'
- '500 Internal Server Error: Try again later or contact support.'
- '500 Internal Server Error: Retry the request.'
- '401 Unauthorized: Check your authentication details.'
- 'INVALID_TOKEN: Refresh your OAuth token'
- '404 Not Found: Check the endpoint URL'
- '401 Unauthorized: Check your OAuth token and permissions.'
- '429 Too Many Requests: Reduce the frequency of requests'
- '401 Unauthorized: Check your API credentials'
- '401 Unauthorized: Verify your token.'
- 'INVALID_TOKEN: Check token validity'
- '403 FORBIDDEN: Ensure permission settings'
- '403 Forbidden: Check if the token has the required permissions.'
- '500 Internal Server Error: Contact support if this persists.'
- '401 Unauthorized: Check your client credentials.'
- '403 Forbidden: Ensure you have the necessary permissions.'
- '401 Unauthorized: Ensure valid authentication credentials'
- '404 Not Found: Verify the requested resource path'
- '404 Not Found: Verify the endpoint is correct.'
- '401 Unauthorized: Check client ID and secret.'
- 'ACCESS_DENIED: Check your permissions'
- 'INVALID_TOKEN: Ensure your token is valid'
- '401 Unauthorized: Verify token validity'
- '403 Forbidden: Check permissions for the requested action'
- '429 Too Many Requests: Reduce the frequency of requests.'
- '401 Unauthorized: Check if your token is valid and has not expired.'
- '404 Not Found: Verify endpoint URL'
- '401 Unauthorized: Check token validity'
- '403 Forbidden: Verify permissions for the requested action'
- '429 Too Many Requests: Rate limit exceeded, slow down your requests.'
- 'invalid_auth: Check the access token.'
- 'channel_not_found: Ensure the channel ID is correct.'
- 'rate_limited: Retry after waiting for the specified time.'
- '401 Unauthorized: Ensure admin privileges are granted.'
- 'invalid_auth: Check your authentication token'
- 'account_inactive: The workspace has been deactivated'
- 'ratelimited: You have exceeded the rate limit'
- 'invalid_auth: Recheck your token or scopes.'
- '400: Bad Request - Check the request body or parameters.'
- '200: OK - Indicates success.'
- '401 Unauthorized: Check credentials'
- '403 Forbidden: You do not have access to this resource'
- '403 Forbidden: Ensure proper permissions are set for the GitHub App.'
- '404 Not Found: Check the endpoint and parameters.'
- '401 Unauthorized: Check OAuth token or permissions'
- '403 Forbidden: Ensure you have access to the requested resource'
- '403 Forbidden: Access denied for the requested resource.'
- '401 Unauthorized: Check your credentials and scopes'
- '403 Forbidden: Rate limit exceeded or insufficient permissions'
- '401 Unauthorized: Verify client ID and secret'
- '429 Too Many Requests: Throttle API calls'
- '429 Too Many Requests: Throttle your requests to avoid hitting limits'
- '404 Not Found: Check the repository name or owner'
- '404 Not Found: Verify endpoint and resource paths'
- '429 Too Many Requests: Throttle your API calls'
- '401 Unauthorized: Check your credentials and token validity'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - OAuth2
  - NamedCredential
  - OAuthClient
  - AccessToken
  - TokenProvider
  - OAuth2Client
  - RefreshToken
  - OAuth2Token
  - ClientCredentials
  - Authorization Code Flow
  - AuthToken
  - Integration
  - OAuthToken
  - API Key
  - ClientCredential
  - AuthorizationCode
  - Personal Access Token
  - User Access Token
  - OAuthProvider
  - OAuth 2.0
  - Access Token
  - Refresh Token
  - OAuth
  - OAuthAccessToken
  - $GITHUB_APP_ID
  - $MERGEQUEUE_PEM_FILE
  - OAuthApp
client:
  base_url: https://api.aviator.co
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.aviator.co/oauth2/token
    client_id: '{{ dlt.secrets[''aviator_client_id''] }}'
    client_secret: '{{ dlt.secrets[''aviator_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''aviator_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
