resources:
- name: token_exchange
  endpoint:
    method: GET
- name: funding_sources
  endpoint:
    path: /accounts/{account_id}/funding-sources
    method: GET
    data_selector: _embedded.funding-sources
- name: funding_source_balance
  endpoint:
    path: /funding-sources/{funding_source_id}/balance
    method: GET
    data_selector: balance
- name: add_bank_account
  endpoint:
    path: /funding-sources
    method: POST
    data_selector: fundingSource
- name: verify_bank_account_microdeposits
  endpoint:
    path: /micro-deposits
    method: POST
    data_selector: verificationStatus
- name: verify_bank_account_open_banking
  endpoint:
    path: /open-banking
    method: POST
    data_selector: verificationStatus
- name: create_customer
  endpoint:
    path: /customers
    method: POST
    data_selector: customers
- name: customer_verification
  endpoint:
    path: /customers/{id}/verification
    method: POST
    data_selector: verification_status
- name: transfer_create
  endpoint:
    path: /transfers
    method: POST
- name: transfer_fees
  endpoint:
    path: /transfers/{id}/fees
    method: GET
- name: specific_transfer
  endpoint:
    path: /transfers/{id}
    method: GET
- name: funding_sources
  endpoint:
    path: /funding-sources/{id}
    method: GET
    data_selector: _links.initiate-micro-deposits.href
- name: exchange_session
  endpoint:
    path: /exchange-sessions
    method: POST
- name: funding_source
  endpoint:
    path: /funding-sources
    method: POST
- name: retrieve_exchange_session
  endpoint:
    path: /exchange-sessions/{session_id}
    method: GET
- name: list_available_connections
  endpoint:
    path: /connections
    method: GET
- name: funding_sources
  endpoint:
    path: /funding-sources
    method: POST
    data_selector: channels
- name: transfers
  endpoint:
    path: /transfers
    method: POST
    data_selector: rtpDetails
- name: transfer_retrieval
  endpoint:
    path: /transfers/{transfer_id}
    method: GET
    data_selector: rtpDetails
- name: transfers
  endpoint:
    path: /transfers
    method: POST
    data_selector: _links
    params:
      clearing: '{"source": "next-available", "destination": "next-available"}'
- name: transfer_retrieval
  endpoint:
    path: /transfers/{transfer_id}
    method: GET
    data_selector: _links
- name: exchange_partners
  endpoint:
    path: /exchange-partners
    method: GET
- name: one_time_transfer
  endpoint:
    path: /docs/balance/send-money
    method: POST
- name: mass_payment
  endpoint:
    path: /docs/batch/payments
    method: POST
- name: transfer_failure
  endpoint:
    path: /transfers/{id}/failure
    method: GET
    data_selector: _links
- name: transfers
  endpoint:
    path: /transfers
    method: POST
    data_selector: _embedded.transfers
    params:
      correlationId: example_correlationId
- name: customer_transfers
  endpoint:
    path: /customers/{id}/transfers
    method: GET
    data_selector: _embedded.transfers
    params:
      correlationId: example_correlationId
- name: transfer_money_me_to_me
  endpoint:
    method: POST
- name: transfer
  endpoint:
    path: /transfers
    method: POST
    data_selector: clearing
    params:
      source: standard
      destination: next-available
- name: transfer_status
  endpoint:
    path: /transfers/{id}
    method: GET
    data_selector: processingChannel
    params:
      destination: instant
- name: webhook_events
  endpoint:
    path: /webhooks/events
    method: POST
    data_selector: _links
    params:
      topic: customer_created
- name: event
  endpoint:
    path: /events/{eventId}
    method: GET
- name: dwolla_balance
  endpoint:
    data_selector: records
- name: exchange_partners
  endpoint:
    path: /exchange-partners
    method: GET
    data_selector: partners
- name: event
  endpoint:
    data_selector: events
- name: transfer_request
  endpoint:
    path: /transfer
    method: POST
- name: dwolla_customer_create
  endpoint:
    path: /dwolla-customer-create
    method: POST
- name: dwolla_customer_update
  endpoint:
    path: /dwolla-customer-update
    method: POST
- name: dwolla_personal_vcr
  endpoint:
    path: /dwolla-personal-vcr
    method: POST
- name: dwolla_business_vcr
  endpoint:
    path: /dwolla-business-vcr
    method: POST
- name: dwolla_beneficial_owners
  endpoint:
    path: /dwolla-beneficial-owners
    method: POST
- name: dwolla_document_upload
  endpoint:
    path: /dwolla-document-upload
    method: POST
- name: dwolla_funding_source_create
  endpoint:
    path: /dwolla-funding-source-create
    method: POST
- name: dwolla_micro_deposits_verify
  endpoint:
    path: /dwolla-micro-deposits-verify
    method: POST
- name: dwolla_balance_display
  endpoint:
    path: /dwolla-balance-display
    method: POST
- name: dwolla_payin
  endpoint:
    path: /dwolla-payin
    method: POST
notes:
- Dwolla's Token Exchange retrieves sensitive information like account and routing
  numbers from various partners
- Understand the rate limits in the Dwolla API, including concurrency-based and volume-based
  limits, and learn how to handle HTTP 429 Too Many Requests status codes.
- KYC requirements must be completed for accounts to use Dwolla Balance as a funding
  source.
- Transfers between Dwolla Balances are instant; from bank to Dwolla Balance takes
  3-4 business days; from Dwolla Balance to bank takes 1-2 business days.
- Supports multiple methods for adding and verifying bank accounts
- Integration with external providers like Plaid and Open Banking for account verification
- Tokenization used for secure data handling in front-end components
- Fees are separate transfers and don't affect the customer's limits
- Fees are not refundable through an API endpoint; they require a manual reverse transfer
- Funds transfer via a financial institution partner; funds held in Dwolla Balance
  by a financial institution partner.
- Dwolla integrates Open Banking to facilitate A2A payments
- Provides a unified API interface for connecting with various Open Banking providers
  (Visa, Plaid, MX)
- You are responsible for delivering notifications to end users.
- Operational Notifications are sent by default for certain events.
- Email customization options are limited to certain fields (e.g., Account Name, From
  Email Address).
- Requires API Key and Secret for obtaining an OAuth access token
- Transfers over $1 million will default to a different processing window
- Same Day ACH requires the transfer to be initiated before the last processing window
- Only supports connections with certain data aggregators for retrieving ACH account
  details
- All transfers require at least one party to hold a balance in a Dwolla Wallet
- Transfers are broken down into "hops" or "legs"
- Transfers can be tracked using a correlationId
- Requires Sandbox account for testing
- Utilizes webhooks for event notifications
- ACH transfer times are approximate and cannot be guaranteed
- Next Day and Same Day ACH may delay checks for common return codes
- Webhook payloads are designed to be lightweight with only minimum details regarding
  the triggered event.
- Webhooks are sent asynchronously via POST request containing a JSON-encoded payload.
- Each webhook notification includes specific HTTP headers useful for consuming the
  webhook.
- Requires basic understanding of HTTP, JSON, and security best practices
- Integration requires skills in front-end and back-end development
- REST API can be integrated with standard programming languages like Node.js, Python,
  PHP, C-Sharp, Java/Kotlin, and Ruby
- Access token used in Authorization header for API requests
- API Key is suffixed with `dwolla.connect`
- Sandbox environment available for testing before production
- Supports fine-grained permissions for data access based on integration partner
- Integrates with data aggregators for retrieving ACH account details
- Webhooks must be consumed asynchronously and validated using the X-Request-Signature-SHA-256
  header
- Integrates directly with financial institutions such as J.P. Morgan and Wells Fargo
  for payment processing
- Supports standard ACH, Same Day ACH, and wires; planning to add real-time payments
- Maintains existing banking relationships; no need to create new bank accounts
- The latest version of dwolla-web.js is 2.2.2
- Client tokens are used for authentication with limited permissions
- Components support various customizations including CSS styles
errors:
- HTTP 429 Too Many Requests: Handle by respecting concurrency-based and volume-based
    limits
- INVALID_CREDENTIALS: Check the bank credentials; ensure they are correct and retry.
- NOT_SUPPORTED_BY_PLAID: Use alternative verification like microdeposits for unsupported
    banks.
- 201: Trigger customer_funding_source_added and customer_funding_source_verified
    webhooks
- 650: Cannot parse the message
- 690: Signature mismatch or verification error
- BLKD: Payment has been blocked
- AC02: Debtor account is invalid
- AC03: Creditor account is invalid
- AC04: Account closed
- AC06: Account is blocked
- AC07: Creditor account closed
- AC10: Debtor account currency is invalid or missing
- AC11: Creditor account currency is invalid or missing
- AC13: Debtor account type missing or invalid
- AC14: Creditor account type missing or invalid
- AG01: Transaction is forbidden on this type of account
- AG03: Transaction type is not supported/authorized on this account
- AGNT: Incorrect Agent
- AM02: Specific transaction/message amount is greater than allowed maximum
- AM04: Amount of funds available to cover specified message amount is insufficient
- AM09: Amount received is not the amount agreed or expected
- AM11: Transaction currency is invalid or missing
- AM12: Amount is invalid or missing
- AM13: Transaction amount exceeds limits set by clearing system
- AM14: Transaction amount exceeds limits agreed between bank and client
- BE04: Specification of creditor's address, which is required for payment, is missing/not
    correct
- BE06: End customer specified is not known at associated Sort/National Bank Code
    or no longer exists in the books
- BE07: Specification of debtor's address, which is required for payment, is missing/not
    correct
- BE10: Debtor country code is missing or invalid
- BE11: Creditor country code is missing or invalid
- BE13: Country code of debtor's residence is missing or invalid
- BE14: Country code of creditor's residence is missing or invalid
- BE16: Debtor identification code missing or invalid
- BE17: Creditor identification code missing or invalid
- DS24: Waiting time expired due to incomplete order
- DT04: Future date is not supported
- DUPL: Payment is a duplicate of another payment
- DS0H: Signer is not allowed to sign for this account
- FF02: Syntax error reason is provided as narrative information in the additional
    reason information
- FF03: Invalid Payment Type Information
- FF08: End to End ID is missing or invalid
- MD07: End customer is deceased
- NARR: Reason is provided as narrative information in the additional reason information
- NARR: Cannot validate retail account number
- RC01: Bank identifier code specified in the message has an incorrect format
- RC02: Bank identified is invalid or missing
- RC03: Debtor FI identifier is invalid or missing
- RC04: Creditor FI identifier is invalid or missing
- TM01: Invalid Cut Off Time
- TK01: Invalid Token
- TK02: Sender Token Not Found
- TK03: Receiver Token Not Found
- TK04: Token Expired
- TK05: Token Found with Counterparty Mismatch
- TK06: Token Found with Value Limit Rule Violation
- TK07: Single Use Token Already Used
- TK08: Token Suspended
- NOAT: Receiving Customer Account does not support/accept this message type
- OK: Completed
- 1100: Any Other Reasons Reason is provided as narrative in the additional information
- 9909: Central Switch (RTP) system malfunction
- 9910: Instructed Agent signed-off
- 9912: Recipient connection is not available
- 9934: Instructing Agent signed-off
- 9946: Instructing Agent suspended
- 9947: Instructed Agent suspended
- 9948: Central Switch (RTP) service is suspended
- 201: Transfer created
- R01: Insufficient Funds
- R02: Bank Account Closed
- R03: No Account/Unable to Locate Account
- R04: Invalid Bank Account Number Structure
- R05: Unauthorized Debit to Consumer Account Using Corporate SEC Code
- R06: Returned per ODFI’s Request
- R07: Authorization Revoked by Customer
- R08: Payment Stopped
- R09: Uncollected Funds
- R10: Customer Advises Originator is Not Known to Receiver and/or Originator is Not
    Authorized by Receiver to Debit Receiver’s Account
- R11: Customer Advises Entry Not in Accordance with the Terms of the Authorization
- R12: Branch Sold to Another DFI
- R13: Invalid ACH Routing Number
- R14: Representative Payee Deceased or Unable to Continue in That Capacity
- R15: Beneficiary or Account Holder Deceased
- R16: Account Frozen/Entry Returned per OFAC Instruction
- R17: File Record Edit Criteria/Entry with Invalid Account Number Initiated Under
    Questionable Circumstances
- R20: Non-Transaction Account
- R22: Invalid Individual ID Number
- R23: Credit Entry Refused by Receiver
- R29: Corporate Customer Advises Not Authorized
- R31: Permissible Return (CCD and CTX only)
- R37: Source Document Presented for Payment
- R38: Stop Payment on Source Document
- R51: Item Related to RCK Entry is Ineligible or RCK Entry is Improper
- failed: Associated with an ACH network return
- 401 Unauthorized: Ensure valid authentication credentials are used
- X-Request-Signature-SHA-256: Validate HMAC SHA-256 hash based on the webhook payload
    and your webhook secret before processing.
- transfer:failed: Check failureReason in the transfer object for more details
- transfer:returned: Review the failureReason in the transfer details for specific
    return codes
- error: Error handling is built into the components
auth_info:
  mentioned_objects:
  - OAuth
  - OAuthToken
  - Token
  - Dwolla Master Account
  - Customer
  - Transfer
  - OAuth access token
  - Bearer Token
  - API Key
  - Secret
  - Sandbox account
  - clearing
  - processingChannel
  - API Key & Secret
  - Access (OAuth) Token
  - Event
  - Account
  - External Party
  - Webhook notifications
client:
  auth:
    type: oauth2
    flow: client_credentials
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    token_url: https://login.dwolla.com/oauth2/token
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
    Content-Type: application/vnd.dwolla.v1.hal+json
    X-Dwolla-Topic: customer_created
    X-Request-Signature-SHA-256: ed551cfb4acb48d31e14886bffa33aa417dfa4a3d3778f6141a7f7f92ee64861
  base_url: https://api.dwolla.com
  paginator:
    type: cursor
    cursor_param: nextUrl
source_metadata: null
