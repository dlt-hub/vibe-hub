resources:
- name: signmessage
  endpoint:
    path: /v1/signmessage
    method: POST
    data_selector: signature
    params: {}
- name: list_methods
  endpoint:
    path: /v1/list-methods
    method: GET
- name: lightning
  endpoint:
    path: /v1/lightning
    method: GET
    data_selector: records
- name: invoice
  endpoint:
    path: /invoice
    method: POST
    data_selector: invoice_details
- name: pay
  endpoint:
    path: /pay
    method: POST
    data_selector: payment_details
- name: HSM Secret Backup
  endpoint:
    path: /docs/hsm-secret
    method: GET
    data_selector: backup
    params: {}
- name: Static Channel Backup
  endpoint:
    path: /docs/static-channel-backup
    method: GET
    data_selector: backup
    params: {}
- name: Database Backup
  endpoint:
    path: /docs/advanced-db-backup
    method: GET
    data_selector: backup
    params: {}
- name: generate_hsm_secret
  endpoint:
    path: /generate_hsm_secret
    method: POST
    data_selector: hsm_secret
    params: {}
- name: encrypt_hsm_secret
  endpoint:
    path: /encrypt_hsm_secret
    method: POST
    data_selector: encrypted_hsm_secret
    params: {}
- name: decrypt_hsm_secret
  endpoint:
    path: /decrypt_hsm_secret
    method: POST
    data_selector: decrypted_hsm_secret
    params: {}
- name: emergency_recover
  endpoint:
    path: /lightning-cli/emergencyrecover
    method: POST
    data_selector: response
- name: recover
  endpoint:
    path: /lightningd/recover
    method: POST
    data_selector: response
- name: listfunds
  endpoint:
    path: /v1/listfunds
    method: GET
    data_selector: channels
    params: {}
- name: listpeers
  endpoint:
    path: /v1/listpeers
    method: GET
    data_selector: peers
    params: {}
- name: listfunds
  endpoint:
    path: /v1/listfunds
    method: GET
    data_selector: channels
    params: {}
- name: listpeers
  endpoint:
    path: /v1/listpeers
    method: GET
    data_selector: peers
    params: {}
- name: onionmessage_forward_fail
  endpoint:
    path: /onionmessage/forward/fail
    method: POST
    data_selector: onionmessage_forward_fail
- name: incoming
  endpoint:
    path: /path_key
    method: GET
    data_selector: source
- name: outgoing
  endpoint:
    path: /path_key
    method: GET
    data_selector: path_key
- name: sendpay_success
  endpoint:
    path: /sendpay_success
    method: GET
    data_selector: sendpay_success
    params: {}
- name: sendpay_failure
  endpoint:
    path: /sendpay_failure
    method: GET
    data_selector: sendpay_failure
    params: {}
- name: coin_movement
  endpoint:
    path: /coin_movement
    method: GET
    data_selector: coin_movement
    params: {}
- name: balance_snapshot
  endpoint:
    path: /balance_snapshot
    method: GET
    data_selector: balance_snapshot
    params: {}
- name: block_added
  endpoint:
    path: /block_added
    method: GET
    data_selector: block_added
    params: {}
- name: openchannel_peer_sigs
  endpoint:
    path: /openchannel_peer_sigs
    method: GET
    data_selector: openchannel_peer_sigs
    params: {}
- name: shutdown
  endpoint:
    path: /shutdown
    method: POST
    data_selector: shutdown
- name: plugin_started
  endpoint:
    path: /plugin_started
    method: POST
    data_selector: plugin_started
- name: plugin_stopped
  endpoint:
    path: /plugin_stopped
    method: POST
    data_selector: plugin_stopped
- name: pay_part_start
  endpoint:
    path: /pay_part_start
    method: POST
    data_selector: pay_part_start
- name: pay_part_end
  endpoint:
    path: /pay_part_end
    method: POST
    data_selector: pay_part_end
- name: channel_opened
  endpoint:
    path: /v24.02/channel_opened
    method: POST
    data_selector: channel_opened
- name: channel_open_failed
  endpoint:
    path: /v24.02/channel_open_failed
    method: POST
    data_selector: channel_open_failed
- name: channel_state_changed
  endpoint:
    path: /v24.02/channel_state_changed
    method: POST
    data_selector: channel_state_changed
- name: connect
  endpoint:
    path: /v24.02/connect
    method: POST
    data_selector: connect
- name: disconnect
  endpoint:
    path: /v24.02/disconnect
    method: POST
    data_selector: disconnect
- name: custommsg
  endpoint:
    path: /v24.02/custommsg
    method: POST
    data_selector: custommsg
- name: invoice_payment
  endpoint:
    path: /v24.02/invoice_payment
    method: POST
    data_selector: invoice_payment
- name: invoice_creation
  endpoint:
    path: /v24.02/invoice_creation
    method: POST
    data_selector: invoice_creation
- name: warning
  endpoint:
    path: /v24.02/warning
    method: POST
    data_selector: warning
- name: forward_event
  endpoint:
    path: /v24.02/forward_event
    method: POST
    data_selector: forward_event
- name: onion_message_recv
  endpoint:
    path: /onion_message_recv
    method: POST
    data_selector: onion_message
    params: {}
- name: onion_message_recv_secret
  endpoint:
    path: /onion_message_recv_secret
    method: POST
    data_selector: onion_message
    params: {}
- name: openchannel2
  endpoint:
    path: /openchannel2
    method: POST
    data_selector: openchannel2
    params: {}
- name: openchannel2_changed
  endpoint:
    path: /openchannel2_changed
    method: POST
    data_selector: openchannel2_changed
    params: {}
- name: openchannel2_sign
  endpoint:
    path: /openchannel2_sign
    method: POST
    data_selector: openchannel2_sign
    params: {}
- name: rbf_channel
  endpoint:
    path: /rbf_channel
    method: POST
    data_selector: rbf_channel
    params: {}
- name: htlc_accepted
  endpoint:
    path: /htlc_accepted
    method: POST
    data_selector: htlc_accepted
    params: {}
- name: rpc_command
  endpoint:
    path: /rpc_command
    method: POST
    data_selector: rpc_command
    params: {}
- name: custommsg
  endpoint:
    path: /custommsg
    method: POST
    data_selector: custommsg
    params: {}
- name: peer_connected
  endpoint:
    path: /hooks/peer_connected
    method: POST
    data_selector: peer
    params: {}
- name: recover
  endpoint:
    path: /hooks/recover
    method: POST
    data_selector: codex32
    params: {}
- name: commitment_revocation
  endpoint:
    path: /hooks/commitment_revocation
    method: POST
    data_selector: commitment_txid
    params: {}
- name: db_write
  endpoint:
    path: /hooks/db_write
    method: POST
    data_selector: data_version
    params: {}
- name: invoice_payment
  endpoint:
    path: /hooks/invoice_payment
    method: POST
    data_selector: payment
    params: {}
- name: openchannel
  endpoint:
    path: /hooks/openchannel
    method: POST
    data_selector: openchannel
    params: {}
- name: getchaininfo
  endpoint:
    path: /getchaininfo
    method: POST
    data_selector: result
- name: estimatefees
  endpoint:
    path: /estimatefees
    method: POST
    data_selector: result
- name: getrawblockbyheight
  endpoint:
    path: /getrawblockbyheight
    method: POST
    data_selector: result
- name: getutxout
  endpoint:
    path: /getutxout
    method: POST
    data_selector: result
- name: sendrawtransaction
  endpoint:
    path: /sendrawtransaction
    method: POST
    data_selector: result
- name: gossip_store_messages
  endpoint:
    path: /gossip_store
    method: GET
    data_selector: records
- name: list_methods
  endpoint:
    path: /v1/list-methods
    method: GET
- name: list_methods
  endpoint:
    path: /v1/list-methods
    method: GET
- name: list_methods
  endpoint:
    path: /v1/list-methods
    method: GET
    data_selector: methods
- name: rpc_method
  endpoint:
    path: /v1/{rpc_method}
    method: POST
- name: addgossip
  endpoint:
    path: /v1/addgossip
    method: POST
    data_selector: params
- name: addgossip
  endpoint:
    path: /v1/addgossip
    method: POST
    data_selector: result
    params: {}
- name: addpsbtoutput
  endpoint:
    path: /v1/addpsbtoutput
    method: POST
    data_selector: psbt
    params: {}
- name: addpsbtoutput
  endpoint:
    path: /v1/addpsbtoutput
    method: POST
    data_selector: psbt
    params: {}
- name: askrene-age
  endpoint:
    path: /askrene-age
    method: GET
    data_selector: layer
    params:
      layer: test_layers
      cutoff: 1738000000
- name: askrene-age
  endpoint:
    path: /reference/askrene-age
    method: POST
    data_selector: result
    params: {}
- name: askrene-bias-channel
  endpoint:
    path: /v1/askrene-bias-channel
    method: POST
    data_selector: biases
    params: {}
- name: askrene-bias-channel
  endpoint:
    path: /askrene-bias-channel
    method: POST
    data_selector: biases
    params: {}
- name: askrene-create-channel
  endpoint:
    path: /v1/askrene-create-channel
    method: POST
    data_selector: result
    params: {}
- name: askrene-create-channel
  endpoint:
    path: /askrene-create-channel
    method: POST
    data_selector: params
- name: create_layer
  endpoint:
    path: /v1/askrene-create-layer
    method: POST
    data_selector: layers
    params: {}
- name: askrene-create-layer
  endpoint:
    path: /askrene-create-layer
    method: POST
    data_selector: layers
    params: {}
- name: askrene-create-channel
  endpoint:
    path: /askrene-create-channel
    method: POST
    data_selector: ''
    params: {}
- name: askrene-disable-node
  endpoint:
    path: /askrene-disable-node
    method: POST
    data_selector: ''
    params: {}
- name: askrene-disable-node
  endpoint:
    path: /v1/askrene-disable-node
    method: POST
    data_selector: result
    params: {}
- name: askrene-disable-node
  endpoint:
    path: /v1/askrene-disable-node
    method: POST
    data_selector: ''
    params:
      layer: test_layers
      node: nodeid010101010101010101010101010101010101010101010101010101010101
- name: askrene-inform-channel
  endpoint:
    path: /v1/askrene-inform-channel
    method: POST
    data_selector: constraints
    params: {}
- name: askrene-inform-channel
  endpoint:
    path: /v1/askrene-inform-channel
    method: POST
    data_selector: constraints
    params: {}
- name: list_layers
  endpoint:
    path: /v1/askrene-listlayers
    method: GET
    data_selector: layers
- name: layers
  endpoint:
    path: /askrene-listlayers
    method: GET
    data_selector: layers
    params: {}
- name: reservations
  endpoint:
    path: /v1/askrene-listreservations
    method: GET
    data_selector: reservations
- name: reservations
  endpoint:
    path: /askrene-listreservations
    method: GET
    data_selector: reservations
    params: {}
- name: askrene-remove-layer
  endpoint:
    path: /v1/askrene-remove-layer
    method: POST
    data_selector: ''
    params: {}
- name: askrene-reserve
  endpoint:
    path: /askrene-reserve
    method: POST
    data_selector: path
    params: {}
- name: askrene-reserve
  endpoint:
    path: /askrene-reserve
    method: GET
    data_selector: params
- name: askrene-unreserve
  endpoint:
    path: /askrene-unreserve
    method: POST
    data_selector: params.path
- name: askrene-unreserve
  endpoint:
    path: /v1/askrene-unreserve
    method: POST
    data_selector: result
    params: {}
- name: askrene-update-channel
  endpoint:
    path: /askrene-update-channel
    method: POST
    data_selector: ''
    params: {}
- name: askrene-update-channel
  endpoint:
    path: /askrene-update-channel
    method: POST
    data_selector: result
    params: {}
- name: autoclean-once
  endpoint:
    path: /autoclean-once
    method: POST
    data_selector: autoclean
    params: {}
- name: autoclean-once
  endpoint:
    path: /reference/autoclean-once
    method: POST
- name: autoclean-status
  endpoint:
    path: /autoclean-status
    method: GET
    data_selector: autoclean
    params: {}
- name: autoclean-status
  endpoint:
    path: /autoclean-status
    method: GET
    data_selector: autoclean
    params: {}
- name: batching
  endpoint:
    path: /v1/batching
    method: POST
    data_selector: result
    params:
      enable: true
- name: channels_apy
  endpoint:
    path: /bkpr-channelsapy
    method: GET
    data_selector: channels_apy
- name: channels_apy
  endpoint:
    path: /method/bkpr-channelsapy
    method: GET
    data_selector: channels_apy
    params: {}
- name: bkpr-dumpincomecsv
  endpoint:
    path: /bkpr-dumpincomecsv
    method: GET
    data_selector: csv_file
    params: {}
- name: listincome
  endpoint:
    path: /v1/listincome
    method: GET
    data_selector: records
    params: {}
- name: bkpr-editdescriptionbyoutpoint
  endpoint:
    path: /v1/bkpr-editdescriptionbyoutpoint
    method: POST
    data_selector: updated
    params: {}
- name: bkpr-editdescriptionbyoutpoint
  endpoint:
    path: /v1/bkpr-editdescriptionbyoutpoint
    method: POST
    data_selector: updated
    params: {}
- name: bkpr-editdescriptionbypaymentid
  endpoint:
    path: /v1/bkpr-editdescriptionbypaymentid
    method: POST
    data_selector: updated
    params: {}
- name: bkpr-editdescriptionbypaymentid
  endpoint:
    path: /bkpr-editdescriptionbypaymentid
    method: POST
    data_selector: updated
    params: {}
- name: bkpr-inspect
  endpoint:
    path: /reference/bkpr-inspect
    method: POST
    data_selector: txs
    params: {}
- name: bkpr-inspect
  endpoint:
    path: /v1/bkpr-inspect
    method: GET
    data_selector: txs
    params: {}
- name: bkpr-listaccountevents
  endpoint:
    path: /bkpr-listaccountevents
    method: POST
    data_selector: events
    params: {}
- name: bkpr-listaccountevents
  endpoint:
    path: /v1/bkpr-listaccountevents
    method: GET
    data_selector: events
    params:
      account: account
      payment_id: payment_id
- name: listbalances
  endpoint:
    path: /v1/bkpr-listbalances
    method: GET
    data_selector: accounts
    params: {}
- name: listbalances
  endpoint:
    path: /bkpr-listbalances
    method: GET
    data_selector: accounts
    params: {}
- name: income_events
  endpoint:
    path: /bkpr-listincome
    method: GET
    data_selector: income_events
    params: {}
- name: list_income
  endpoint:
    path: /v1/bkpr-listincome
    method: GET
    data_selector: income_events
    params: {}
- name: blacklistrune
  endpoint:
    path: /v1/blacklistrune
    method: POST
    data_selector: blacklist
    params: {}
- name: blacklistrune
  endpoint:
    path: /reference/blacklistrune
    method: POST
    data_selector: blacklist
    params: {}
- name: check
  endpoint:
    path: /reference/check
    method: GET
- name: check
  endpoint:
    path: /v1/check
    method: POST
    data_selector: command_to_check
    params: {}
- name: checkmessage
  endpoint:
    path: /checkmessage
    method: POST
    data_selector: verified
    params: {}
- name: checkmessage
  endpoint:
    path: /checkmessage
    method: POST
    data_selector: verified
    params: {}
- name: checkrune
  endpoint:
    path: /v1/checkrune
    method: POST
    data_selector: valid
    params: {}
- name: checkrune
  endpoint:
    path: /v1/checkrune
    method: POST
    data_selector: valid
    params: {}
- name: close
  endpoint:
    path: /reference/close
    method: POST
    data_selector: type
    params: {}
- name: close_command
  endpoint:
    path: /v1/close
    method: POST
    data_selector: response
    params: {}
- name: commando
  endpoint:
    path: /v1/commando
    method: POST
    data_selector: result
    params: {}
- name: commando
  endpoint:
    path: /v1/commando
    method: POST
    data_selector: result
- name: connect
  endpoint:
    path: /connect
    method: POST
    data_selector: id
    params: {}
- name: connect
  endpoint:
    path: /v1/connect
    method: POST
    data_selector: id
    params: {}
- name: createinvoice
  endpoint:
    path: /createinvoice
    method: POST
    data_selector: invoice
    params: {}
- name: createinvoice
  endpoint:
    path: /createinvoice
    method: POST
    data_selector: label
    params: {}
- name: createonion
  endpoint:
    path: /v1/createonion
    method: POST
    data_selector: onion
    params: {}
- name: createonion
  endpoint:
    path: /v1/createonion
    method: POST
    data_selector: onion
    params: {}
- name: createrune
  endpoint:
    path: /createrune
    method: POST
- name: createrune
  endpoint:
    path: /createrune
    method: POST
    data_selector: rune
    params: {}
- name: datastore
  endpoint:
    path: /datastore
    method: POST
    data_selector: params
- name: datastore
  endpoint:
    path: /datastore
    method: POST
    data_selector: key
    params: {}
- name: datastoreusage
  endpoint:
    path: /datastoreusage
    method: GET
    data_selector: datastoreusage
- name: datastoreusage
  endpoint:
    path: /datastoreusage
    method: GET
    data_selector: datastoreusage
    params: {}
- name: decode
  endpoint:
    path: /v1/decode
    method: POST
    data_selector: result
    params: {}
- name: decode
  endpoint:
    path: /v1/decode
    method: POST
    data_selector: result
    params: {}
- name: decodepay
  endpoint:
    path: /v1/decodepay
    method: POST
    data_selector: result
- name: decodepay
  endpoint:
    path: /decodepay
    method: POST
    data_selector: params
    params: {}
- name: deldatastore
  endpoint:
    path: /deldatastore
    method: POST
- name: deldatastore
  endpoint:
    path: /deldatastore
    method: POST
    data_selector: result
    params: {}
- name: delforward
  endpoint:
    path: /delforward
    method: POST
    data_selector: ''
    params: {}
- name: delforward
  endpoint:
    path: /v1/delforward
    method: POST
    data_selector: result
- name: delinvoice
  endpoint:
    path: /v1/delinvoice
    method: POST
    data_selector: response
    params: {}
- name: delinvoice
  endpoint:
    path: /v1/delinvoice
    method: POST
    data_selector: result
    params: {}
- name: delpay
  endpoint:
    path: /v1/delpay
    method: POST
    data_selector: payments
- name: payments
  endpoint:
    path: /delpay
    method: POST
    data_selector: payments
- name: deprecations
  endpoint:
    path: /deprecations
    method: POST
    data_selector: result
    params:
      enable: boolean
- name: deprecations
  endpoint:
    path: /deprecations
    method: GET
    data_selector: params
- name: dev-forget-channel
  endpoint:
    path: /dev-forget-channel
    method: POST
    data_selector: params
- name: dev-forget-channel
  endpoint:
    path: /dev-forget-channel
    method: POST
    data_selector: result
    params:
      id: pubkey
      short_channel_id: short_channel_id
      channel_id: hash
      force: boolean
- name: dev-splice
  endpoint:
    path: /v1/dev-splice
    method: POST
    data_selector: result
    params: {}
- name: splice
  endpoint:
    path: /dev/splice
    method: POST
    data_selector: result
    params: {}
- name: disableinvoicerequest
  endpoint:
    path: /disableinvoicerequest
    method: POST
    data_selector: invreq_id
    params: {}
- name: disableinvoicerequest
  endpoint:
    path: /v1/disableinvoicerequest
    method: POST
    data_selector: invreq_id
    params:
      invreq_id: invreqid02020202020202020202020202020202020202020202020202020202
- name: disableoffer
  endpoint:
    path: /v1/disableoffer
    method: POST
    data_selector: offer_id
    params: {}
- name: disableoffer
  endpoint:
    path: /disableoffer
    method: POST
    data_selector: return_value
    params: {}
- name: disconnect
  endpoint:
    path: /v1/disconnect
    method: POST
    data_selector: result
    params:
      id: pubkey
      force: boolean
- name: disconnect
  endpoint:
    path: /disconnect
    method: POST
    data_selector: '{}'
    params: {}
- name: emergencyrecover
  endpoint:
    path: /emergencyrecover
    method: POST
    data_selector: stubs
    params: {}
- name: emergencyrecover
  endpoint:
    path: /emergencyrecover
    method: POST
    data_selector: stubs
- name: enableoffer
  endpoint:
    path: /enableoffer
    method: POST
    data_selector: params
    params:
      offer_id: offeridl23000002300000230000023000002300000230000023000002300000
- name: enableoffer
  endpoint:
    path: /reference/enableoffer
    method: POST
    data_selector: return_value
    params:
      offer_id: hash
- name: exposesecret
  endpoint:
    path: /exposesecret
    method: POST
    data_selector: result
    params: {}
- name: exposesecret
  endpoint:
    path: /exposesecret
    method: GET
    data_selector: identifier
    params: {}
- name: feerates
  endpoint:
    path: /feerates
    method: POST
    data_selector: perkw
    params: {}
- name: feerates
  endpoint:
    path: /v1/feerates
    method: GET
    data_selector: feerates
    params: {}
- name: fetchinvoice
  endpoint:
    path: /fetchinvoice
    method: POST
    data_selector: invoice
- name: fetchinvoice
  endpoint:
    path: /fetchinvoice
    method: POST
    data_selector: invoice
    params: {}
- name: fundchannel
  endpoint:
    path: /fundchannel
    method: POST
    data_selector: result
- name: fundchannel
  endpoint:
    path: /v1/fundchannel
    method: POST
    data_selector: ''
    params: {}
- name: fundchannel_cancel
  endpoint:
    path: /fundchannel_cancel
    method: POST
    data_selector: cancelled
    params: {}
- name: fundchannel_cancel
  endpoint:
    path: /fundchannel_cancel
    method: POST
    data_selector: cancelled
    params:
      id: pubkey
- name: fundchannel_complete
  endpoint:
    path: /fundchannel_complete
    method: POST
    data_selector: channel_id
    params: {}
- name: fundchannel_complete
  endpoint:
    path: /v1/fundchannel_complete
    method: POST
    data_selector: channel_id
    params: {}
- name: fundchannel_start
  endpoint:
    path: /fundchannel_start
    method: POST
    data_selector: funding_address
- name: fundchannel_start
  endpoint:
    path: /v1/fundchannel_start
    method: POST
    data_selector: result
    params: {}
- name: funderupdate
  endpoint:
    path: /funderupdate
    method: POST
    data_selector: summary
    params: {}
- name: funderupdate
  endpoint:
    path: /funderupdate
    method: POST
    data_selector: summary
    params: {}
- name: fundpsbt
  endpoint:
    path: /v1/fundpsbt
    method: POST
    data_selector: params
- name: fundpsbt
  endpoint:
    path: /v1/fundpsbt
    method: POST
    data_selector: psbt
    params: {}
- name: emergencyrecoverdata
  endpoint:
    path: /getemergencyrecoverdata
    method: GET
    data_selector: emergencyrecoverdata
    params: {}
- name: emergency_recover_data
  endpoint:
    path: /getemergencyrecoverdata
    method: GET
    data_selector: filedata
    params: {}
- name: getinfo
  endpoint:
    path: /getinfo
    method: GET
    data_selector: id
    params: {}
- name: getinfo
  endpoint:
    path: /getinfo
    method: GET
    data_selector: object
    params: {}
- name: log
  endpoint:
    path: /getlog
    method: GET
    data_selector: log
    params:
      level: unusual
- name: getlog
  endpoint:
    path: /reference/getlog
    method: GET
    data_selector: logs
    params: {}
- name: getroute
  endpoint:
    path: /getroute
    method: GET
    params: {}
- name: getroute
  endpoint:
    path: /reference/getroute
    method: GET
    data_selector: route
    params: {}
- name: getroutes
  endpoint:
    path: /getroutes
    method: GET
    data_selector: routes
    params: {}
- name: getroutes
  endpoint:
    path: /getroutes
    method: GET
    data_selector: routes
    params: {}
- name: help
  endpoint:
    path: /help
    method: GET
    data_selector: help
    params: {}
- name: help
  endpoint:
    path: /v1/help
    method: GET
    data_selector: help
    params: {}
- name: injectonionmessage
  endpoint:
    path: /v1/injectonionmessage
    method: POST
    data_selector: params
- name: injectonionmessage
  endpoint:
    path: /v1/injectonionmessage
    method: POST
    data_selector: result
- name: injectpaymentonion
  endpoint:
    path: /v1/injectpaymentonion
    method: POST
    data_selector: result
    params: {}
- name: injectpaymentonion
  endpoint:
    path: /injectpaymentonion
    method: POST
    data_selector: params
- name: invoice
  endpoint:
    path: /v1/invoice
    method: POST
    data_selector: payment_hash
    params: {}
- name: invoice
  endpoint:
    path: /v1/invoice
    method: POST
    data_selector: bolt11
- name: invoicerequest
  endpoint:
    path: /v1/invoicerequest
    method: POST
    data_selector: invreq_id
    params: {}
- name: invoicerequest
  endpoint:
    path: /v1/invoicerequest
    method: POST
    data_selector: invoice_request
    params: {}
- name: keysend
  endpoint:
    path: /v1/keysend
    method: POST
    data_selector: result
    params: {}
- name: keysend
  endpoint:
    path: /v1/keysend
    method: POST
    data_selector: params
    params: {}
- name: list-methods
  endpoint:
    path: /v1/list-methods
    method: GET
- name: post_rpc_method
  endpoint:
    path: /v1/{rpc_method}
    method: POST
- name: list-methods
  endpoint:
    path: /v1/list-methods
    method: GET
- name: post_rpc_method
  endpoint:
    path: /v1/{rpc_method}
    method: POST
- name: list-methods
  endpoint:
    path: /v1/list-methods
    method: GET
- name: call-rpc-method
  endpoint:
    path: /v1/{rpc_method}
    method: POST
- name: reckless
  endpoint:
    path: /v1/reckless
    method: POST
- name: list-methods
  endpoint:
    path: /v1/list-methods
    method: GET
- name: call-rpc-method
  endpoint:
    path: /v1/{rpc_method}
    method: POST
- name: list-methods
  endpoint:
    path: /v1/list-methods
    method: GET
    data_selector: methods
- name: rpc-method
  endpoint:
    path: /v1/{rpc_method}
    method: POST
    data_selector: result
- name: list-methods
  endpoint:
    path: /v1/list-methods
    method: GET
- name: rpc-method
  endpoint:
    path: /v1/{rpc_method}
    method: POST
- name: listmethods
  endpoint:
    path: /v1/list-methods
    method: GET
- name: callrpcmethod
  endpoint:
    path: /v1/{rpc_method}
    method: POST
- name: lightning-dir
  endpoint:
    path: lightning-dir
    method: SET
    data_selector: lightning-dir
    params: {}
- name: subdaemon
  endpoint:
    path: subdaemon
    method: SET
    data_selector: subdaemon
    params: {}
- name: pid-file
  endpoint:
    path: pid-file
    method: SET
    data_selector: pid-file
    params: {}
- name: log-level
  endpoint:
    path: log-level
    method: SET
    data_selector: log-level
    params: {}
- name: log-prefix
  endpoint:
    path: log-prefix
    method: SET
    data_selector: log-prefix
    params: {}
- name: log-file
  endpoint:
    path: log-file
    method: SET
    data_selector: log-file
    params: {}
- name: rpc-file
  endpoint:
    path: rpc-file
    method: SET
    data_selector: rpc-file
    params: {}
- name: wallet
  endpoint:
    path: wallet
    method: SET
    data_selector: wallet
    params: {}
- name: grpc-host
  endpoint:
    path: grpc-host
    method: SET
    data_selector: grpc-host
    params: {}
- name: grpc-port
  endpoint:
    path: grpc-port
    method: SET
    data_selector: grpc-port
    params: {}
- name: listtransactions
  endpoint:
    path: /v1/listtransactions
    method: GET
    data_selector: result.transactions
    params: {}
- name: list-methods
  endpoint:
    path: /v1/list-methods
    method: GET
- name: rpc-method
  endpoint:
    path: /v1/{rpc_method}
    method: POST
- name: listaddresses
  endpoint:
    path: /v1/listaddresses
    method: GET
    data_selector: addresses
    params: {}
- name: listaddresses
  endpoint:
    path: /reference/listaddresses
    method: GET
    data_selector: addresses
    params:
      start: 1
      limit: Total number of addresses issued
- name: listchannels
  endpoint:
    path: /v1/listchannels
    method: GET
    data_selector: channels
    params: {}
- name: channels
  endpoint:
    path: /v1/listchannels
    method: GET
    data_selector: channels
- name: listclosedchannels
  endpoint:
    path: /v1/listclosedchannels
    method: GET
    data_selector: closedchannels
- name: closedchannels
  endpoint:
    path: /v1/listclosedchannels
    method: GET
    data_selector: closedchannels
    params: {}
- name: listconfigs
  endpoint:
    path: /listconfigs
    method: GET
    data_selector: configs
    params: {}
- name: listconfigs
  endpoint:
    path: /listconfigs
    method: GET
    data_selector: configuration_options
- name: datastore
  endpoint:
    path: /v1/listdatastore
    method: GET
    data_selector: datastore
    params: {}
- name: datastore
  endpoint:
    path: /listdatastore
    method: GET
    data_selector: datastore
    params: {}
- name: forwards
  endpoint:
    path: /v1/listforwards
    method: GET
    data_selector: forwards
    params: {}
- name: listforwards
  endpoint:
    path: /v1/listforwards
    method: GET
    data_selector: forwards
    params: {}
- name: funds
  endpoint:
    path: /v1/listfunds
    method: GET
    data_selector: outputs
    params: {}
- name: listfunds
  endpoint:
    path: /v1/listfunds
    method: GET
    data_selector: outputs
    params:
      spent: boolean
- name: htlc
  endpoint:
    path: /v1/listhtlcs
    method: GET
    data_selector: htlcs
- name: htlc
  endpoint:
    path: /v1/listhtlcs
    method: GET
    data_selector: htlcs
    params: {}
- name: invoicerequests
  endpoint:
    path: /listinvoicerequests
    method: GET
    data_selector: invoicerequests
- name: invoicerequests
  endpoint:
    path: /v1/listinvoicerequests
    method: GET
    data_selector: invoicerequests
    params:
      invreq_id: optional
      active_only: boolean, optional
- name: listinvoices
  endpoint:
    path: /v1/listinvoices
    method: GET
    data_selector: invoices
    params: {}
- name: invoices
  endpoint:
    path: /v1/listinvoices
    method: GET
    data_selector: invoices
    params: {}
- name: listnodes
  endpoint:
    path: /listnodes
    method: GET
    data_selector: nodes
    params: {}
- name: listnodes
  endpoint:
    path: /v1/listnodes
    method: GET
    data_selector: nodes
    params: {}
- name: listoffers
  endpoint:
    path: /v1/listoffers
    method: GET
    data_selector: offers
    params:
      active_only: true
- name: offers
  endpoint:
    path: /v1/listoffers
    method: GET
    data_selector: offers
    params:
      offer_id: optional
      active_only: boolean
- name: listpays
  endpoint:
    path: /v1/listpays
    method: GET
    data_selector: pays
    params: {}
- name: listpays
  endpoint:
    path: /v1/listpays
    method: GET
    data_selector: pays
    params: {}
- name: listpeerchannels
  endpoint:
    path: /listpeerchannels
    method: GET
    data_selector: channels
    params: {}
- name: listpeerchannels
  endpoint:
    path: /v1/listpeerchannels
    method: GET
    data_selector: channels
    params: {}
- name: channels
  endpoint:
    path: /listpeerchannels
    method: GET
    data_selector: channels
- name: listpeers
  endpoint:
    path: /v1/listpeers
    method: GET
    data_selector: peers
    params: {}
- name: listpeers
  endpoint:
    path: /v1/listpeers
    method: GET
    data_selector: peers
- name: listsendpays
  endpoint:
    path: /listsendpays
    method: GET
    data_selector: payments
    params: {}
- name: listsendpays
  endpoint:
    path: /listsendpays
    method: POST
    data_selector: payments
    params: {}
- name: listsqlschemas
  endpoint:
    path: /listsqlschemas
    method: GET
    data_selector: schemas
    params: {}
- name: schemas
  endpoint:
    path: /listsqlschemas
    method: GET
    data_selector: schemas
- name: transactions
  endpoint:
    path: /v1/listtransactions
    method: GET
    data_selector: transactions
- name: transactions
  endpoint:
    path: /v1/listtransactions
    method: GET
    data_selector: transactions
    params: {}
- name: makesecret
  endpoint:
    path: /v1/makesecret
    method: POST
    data_selector: secret
    params: {}
- name: makesecret
  endpoint:
    path: /makesecret
    method: POST
    data_selector: secret
    params: {}
- name: multifundchannel
  endpoint:
    path: /multifundchannel
    method: POST
    data_selector: params
- name: multifundchannel
  endpoint:
    path: /v1/multifundchannel
    method: POST
    data_selector: result
    params: {}
- name: multiwithdraw
  endpoint:
    path: /multiwithdraw
    method: POST
- name: multiwithdraw
  endpoint:
    path: /v1/multiwithdraw
    method: POST
    data_selector: outputs
    params: {}
- name: newaddr
  endpoint:
    path: /reference/newaddr
    method: POST
    data_selector: result
    params:
      addresstype: string
- name: newaddr
  endpoint:
    path: /v1/newaddr
    method: POST
    data_selector: p2tr
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: POST
    data_selector: notifications
    params:
      enable: boolean
- name: notifications
  endpoint:
    path: /v1/notifications
    method: POST
    data_selector: params
    params: {}
- name: offer
  endpoint:
    path: /v1/offer
    method: POST
    data_selector: offer_id
- name: offer
  endpoint:
    path: /offer
    method: POST
    data_selector: offer_id
    params: {}
- name: openchannel_abort
  endpoint:
    path: /v1/openchannel_abort
    method: POST
    data_selector: result
    params: {}
- name: openchannel_abort
  endpoint:
    path: /v1/openchannel_abort
    method: POST
    data_selector: channel_id
    params:
      channel_id: channelid0111200111200111200111200111200111200111200111200111200
- name: openchannel_bump
  endpoint:
    path: /openchannel_bump
    method: POST
    data_selector: channel_id
    params: {}
- name: openchannel_bump
  endpoint:
    path: /v1/openchannel_bump
    method: POST
    data_selector: response
    params: {}
- name: openchannel_init
  endpoint:
    path: /openchannel_init
    method: POST
    data_selector: params
- name: openchannel_init
  endpoint:
    path: /openchannel_init
    method: POST
    data_selector: channel_id
    params: {}
- name: openchannel_signed
  endpoint:
    path: /openchannel_signed
    method: POST
    data_selector: tx
    params: {}
- name: openchannel_signed
  endpoint:
    path: /v1/openchannel_signed
    method: POST
    data_selector: result
    params: {}
- name: openchannel_update
  endpoint:
    path: /openchannel_update
    method: POST
    data_selector: channel_id
    params: {}
- name: openchannel_update
  endpoint:
    path: /v1/openchannel_update
    method: POST
    data_selector: result
    params: {}
- name: parsefeerate
  endpoint:
    path: /v1/parsefeerate
    method: POST
    data_selector: perkw
    params: {}
- name: parsefeerate
  endpoint:
    path: /parsefeerate
    method: POST
    data_selector: perkw
- name: pay
  endpoint:
    path: /v1/pay
    method: POST
    data_selector: result
- name: pay
  endpoint:
    path: /v1/pay
    method: POST
    data_selector: response
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: totlen
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: totlen
    params: {}
- name: plugin
  endpoint:
    path: /v1/plugin
    method: POST
    data_selector: command
    params: {}
- name: plugin
  endpoint:
    path: /v1/plugin
    method: POST
    data_selector: result
    params: {}
- name: preapproveinvoice
  endpoint:
    path: /v1/preapproveinvoice
    method: POST
    data_selector: result
- name: preapproveinvoice
  endpoint:
    path: /v1/preapproveinvoice
    method: POST
    data_selector: ''
    params: {}
- name: preapprovekeysend
  endpoint:
    path: /preapprovekeysend
    method: POST
    data_selector: ''
    params: {}
- name: preapprovekeysend
  endpoint:
    path: /preapprovekeysend
    method: POST
    data_selector: ''
    params: {}
- name: list_methods
  endpoint:
    path: /v1/list-methods
    method: GET
    data_selector: result
- name: execute_rpc_method
  endpoint:
    path: /v1/{rpc_method}
    method: POST
    data_selector: result
- name: command
  endpoint:
    path: /v1/list-methodsget
    method: GET
    data_selector: result
    params: {}
- name: recover
  endpoint:
    path: /v1/recover
    method: POST
    data_selector: result
    params: {}
- name: recover
  endpoint:
    path: /recover
    method: POST
    data_selector: result
    params:
      hsmsecret: string
- name: recoverchannel
  endpoint:
    path: /recoverchannel
    method: POST
    data_selector: stubs
    params: {}
- name: recoverchannel
  endpoint:
    path: /recoverchannel
    method: POST
    data_selector: stubs
    params: {}
- name: renepay
  endpoint:
    path: /v1/renepay
    method: POST
    data_selector: bolt11
    params: {}
- name: renepay
  endpoint:
    path: /v1/renepay
    method: POST
    data_selector: payment_preimage
    params: {}
- name: renepaystatus
  endpoint:
    path: /renepaystatus
    method: POST
    data_selector: paystatus
    params: {}
- name: renepaystatus
  endpoint:
    path: /renepaystatus
    method: POST
    data_selector: paystatus
    params: {}
- name: reserveinputs
  endpoint:
    path: /v1/reserveinputs
    method: POST
    data_selector: reservations
    params: {}
- name: reserveinputs
  endpoint:
    path: /v1/reserveinputs
    method: POST
    data_selector: reservations
    params: {}
- name: sendcustommsg
  endpoint:
    path: /v1/sendcustommsg
    method: POST
    data_selector: status
    params: {}
- name: sendcustommsg
  endpoint:
    path: /v1/sendcustommsg
    method: POST
    data_selector: status
    params: {}
- name: sendinvoice
  endpoint:
    path: /lightning-cli/sendinvoice
    method: POST
    data_selector: params
- name: sendinvoice
  endpoint:
    path: /v1/sendinvoice
    method: POST
    data_selector: result
    params: {}
- name: sendonion
  endpoint:
    path: /v1/sendonion
    method: POST
    data_selector: result
- name: sendonion
  endpoint:
    path: /v1/sendonion
    method: POST
    data_selector: message
    params: {}
- name: sendpay
  endpoint:
    path: /v1/sendpay
    method: POST
    data_selector: result
    params: {}
- name: sendpay
  endpoint:
    path: /v1/sendpay
    method: POST
    data_selector: message
    params: {}
- name: sendpsbt
  endpoint:
    path: /v1/sendpsbt
    method: POST
    data_selector: tx
    params:
      reserve: '72'
- name: sendpsbt
  endpoint:
    path: /v1/sendpsbt
    method: POST
    data_selector: tx
    params: {}
- name: setchannel
  endpoint:
    path: /setchannel
    method: POST
    data_selector: channels
- name: setchannel
  endpoint:
    path: /reference/setchannel
    method: POST
    data_selector: channels
    params: {}
- name: setconfig
  endpoint:
    path: /setconfig
    method: POST
    data_selector: config
- name: setpsbtversion
  endpoint:
    path: /reference/setpsbtversion
    method: POST
    data_selector: psbt
    params: {}
- name: setpsbtversion
  endpoint:
    path: /setpsbtversion
    method: POST
    data_selector: psbt
    params: {}
- name: showrunes
  endpoint:
    path: /reference/showrunes
    method: GET
    data_selector: runes
    params: {}
- name: showrunes
  endpoint:
    path: /showrunes
    method: GET
    data_selector: runes
    params: {}
- name: signinvoice
  endpoint:
    path: /v1/signinvoice
    method: POST
    data_selector: bolt11
    params: {}
- name: signinvoice
  endpoint:
    path: /v1/signinvoice
    method: POST
    data_selector: bolt11
- name: signpsbt
  endpoint:
    path: /v1/signpsbt
    method: POST
    data_selector: signed_psbt
    params: {}
- name: signpsbt
  endpoint:
    path: /v1/signpsbt
    method: POST
    data_selector: signed_psbt
    params: {}
- name: splice_init
  endpoint:
    path: /v1/splice_init
    method: POST
    data_selector: psbt
    params: {}
- name: splice_init
  endpoint:
    path: /v1/splice_init
    method: POST
    data_selector: psbt
    params: {}
- name: splice_signed
  endpoint:
    path: /v1/splice_signed
    method: POST
    data_selector: result
    params: {}
- name: splice_signed
  endpoint:
    path: /v1/splice_signed
    method: POST
    data_selector: result
- name: splice_update
  endpoint:
    path: /v1/splice_update
    method: POST
    data_selector: psbt
    params: {}
- name: splice_update
  endpoint:
    path: /v1/splice_update
    method: POST
    data_selector: result
- name: sql
  endpoint:
    path: /v1/sql
    method: POST
    data_selector: result
    params: {}
- name: peers
  endpoint:
    method: sql
    params:
      query: SELECT id FROM peers
- name: invoices
  endpoint:
    method: sql
    params:
      query: SELECT label, description, status FROM invoices WHERE label='label inv_l12'
- name: nodes
  endpoint:
    method: sql
    params:
      query: SELECT nodeid FROM nodes WHERE nodeid != x'nodeid030303030303030303030303030303030303030303030303030303030303'
- name: peerchannels
  endpoint:
    method: sql
    params:
      query: SELECT peer_id, to_us_msat, total_msat, peerchannels_status.status FROM
        peerchannels INNER JOIN peerchannels_status ON peerchannels_status.row = peerchannels.rowid
- name: forwards
  endpoint:
    method: sql
    params:
      query: SELECT COUNT(*) FROM forwards
- name: peerchannels_features
  endpoint:
    method: sql
    params:
      query: SELECT * from peerchannels_features
- name: staticbackup
  endpoint:
    path: /v1/staticbackup
    method: GET
    data_selector: scb
    params: {}
- name: staticbackup
  endpoint:
    path: /staticbackup
    method: GET
    data_selector: scb
    params: {}
- name: stop
  endpoint:
    path: /v1/stop
    method: POST
    data_selector: result
    params: {}
- name: txdiscard
  endpoint:
    path: /txdiscard
    method: POST
    data_selector: unsigned_tx
    params: {}
- name: txdiscard
  endpoint:
    method: POST
- name: txprepare
  endpoint:
    path: /txprepare
    method: POST
    data_selector: unsigned_tx
- name: txprepare
  endpoint:
    path: /txprepare
    method: POST
    data_selector: psbt
    params: {}
- name: txsend
  endpoint:
    path: /txsend
    method: POST
    data_selector: ''
    params: {}
- name: txsend
  endpoint:
    path: /txsend
    method: POST
    data_selector: tx
    params: {}
- name: unreserveinputs
  endpoint:
    path: /unreserveinputs
    method: POST
    data_selector: reservations
    params: {}
- name: unreserveinputs
  endpoint:
    path: /unreserveinputs
    method: POST
    data_selector: reservations
    params:
      psbt: string
      reserve: u32
- name: upgradewallet
  endpoint:
    path: /v1/upgradewallet
    method: POST
    data_selector: upgraded_outs
    params: {}
- name: upgradewallet
  endpoint:
    path: /upgradewallet
    method: POST
    data_selector: upgraded_outs
    params:
      feerate: optional
      reservedok: optional
- name: utxopsbt
  endpoint:
    path: /v1/utxopsbt
    method: POST
    data_selector: result
    params: {}
- name: utxopsbt
  endpoint:
    path: /v1/utxopsbt
    method: POST
    data_selector: psbt
    params: {}
- name: wait
  endpoint:
    path: /wait
    method: POST
    data_selector: params
- name: wait
  endpoint:
    path: /wait
    method: POST
    data_selector: subsystem
    params: {}
- name: waitanyinvoice
  endpoint:
    path: /waitanyinvoice
    method: POST
    data_selector: result
    params: {}
- name: waitanyinvoice
  endpoint:
    path: /v1/waitanyinvoice
    method: POST
    data_selector: params
    params: {}
- name: waitblockheight
  endpoint:
    path: /waitblockheight
    method: POST
    data_selector: blockheight
    params: {}
- name: waitblockheight
  endpoint:
    path: /waitblockheight
    method: POST
    data_selector: blockheight
    params:
      timeout: 60
- name: waitinvoice
  endpoint:
    path: /waitinvoice
    method: POST
    data_selector: params
- name: waitinvoice
  endpoint:
    path: /waitinvoice
    method: POST
    data_selector: result
    params: {}
- name: waitsendpay
  endpoint:
    path: /v1/waitsendpay
    method: POST
    data_selector: result
    params: {}
- name: waitsendpay
  endpoint:
    path: /waitsendpay
    method: POST
    data_selector: result
    params: {}
- name: withdraw
  endpoint:
    path: /withdraw
    method: POST
    data_selector: params
- name: withdraw
  endpoint:
    path: /withdraw
    method: POST
    data_selector: tx
    params: {}
- name: xpay
  endpoint:
    path: /v1/xpay
    method: POST
    data_selector: payment_preimage
    params: {}
- name: xpay
  endpoint:
    path: /v1/xpay
    method: POST
    data_selector: result
- name: list_methods
  endpoint:
    path: /v1/list-methods
    method: GET
- name: list-methods
  endpoint:
    path: /v1/list-methods
    method: GET
    data_selector: methods
- name: rpc_method
  endpoint:
    path: /v1/{rpc_method}
    method: POST
notes:
- Creates a digital signature of a message using the node's secret key.
- Core Lightning is Blockstream's open-source implementation of the Lightning Network
  optimised for performance.
- Core Lightning is available on Linux and macOS.
- Running on Windows is possible using docker.
- By default, MPP support is enabled, but it can be desirable to disable in situations
  in which each payment should result in a single HTLC being forwarded in the network.
- 'General configuration files are processed first, then network-specific ones, then
  command line options: later options override earlier ones except addr options and
  log-level with subsystems, which accumulate.'
- Requires Tor to be installed and running.
- Configuration is needed to prevent becoming a Tor exit node.
- Uses a socks5 proxy at 127.0.0.1:9050 for Tor connections
- To connect only via the Tor proxy, set always-use-proxy=true
- It is highly customizable through modular expandability.
- You can encrypt the hsm_secret content (which is used to derive the HD wallet's
  master key) by passing the --encrypted-hsm startup argument, or by using the hsmtool
  with the encrypt method.
- Recovery of the hsm_secret is sufficient to recover any onchain funds.
- Real-time database replication is the recommended approach to backing up node data.
- You can regenerate the same hsm_secret file using the same BIP39 words.
- Once your hsm_secret is encrypted, you will not be able to access your funds without
  your password.
- Files are not stored encrypted, so you should really not do this with rented space
  ('cloud storage').
- Backups/replication should not be on the same disk as the original SQLite DB.
- You need to enable WAL mode on your database.
- This backup method is undesirable, since it cannot recover channels with peers that
  do not support option_dataloss_protect.
- Even if you have one of the better options above, you might still want to do this
  as a worst-case fallback.
- Only recover from database if you are sure that it is latest.
- Snapshot-style backups of the lightningd database is discouraged, as any loss of
  state may result in permanent loss of funds.
- Never use any dev command unless you know exactly what you are doing.
- Requires setup of connected app in Core Lightning.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- The POST method requires `rune` header for authorization.
- Websocket server requires a `rune` with at least `readonly` access for authorization.
- The plugin only runs when lightningd is configured with the option --grpc-port.
- The client needs a valid mTLS identity in order to connect to the plugin.
- The wss-proxy plugin expects CLN to be listening on a websocket.
- If wss-bind-addr is not specified, the plugin will disable itself.
- Uses JSON-RPCv2 protocol for communication with lightningd
- Plugins must handle debug/logging statements carefully to avoid unexpected behavior
- Hooks are considered to be an advanced feature due to the fact that lightningd relies
  on the plugin to tell it what to do next.
- The returned result must contain a result member which is either the string disconnect
  or continue.
- Current version only supports python plugins.
- Tracing system in CLN is implemented using USDTs, emits events into the kernel.
- Always check the major version number! We will increment it if the format changes
  in a way that breaks readers.
- Ignore unknown flags in the header.
- Ignore message types you don't know.
- You don't need to check the messages, as they have been validated.
- It is possible to see a partially-written record at the end. Ignore it.
- Core Lightning is an open-source implementation of the Lightning Network optimized
  for performance.
- Ensure that the GitHub Actions for Publish Python distributions to PyPI and TestPyPI
  are functioning correctly.
- Docker image publishing is handled by the GitHub action Build and push multi-platform
  docker images.
- For most accuracy, you should remove your own reservations before calling this.
- Command to change the description for events with {payment_id} after they're made
- Events emitted may vary between calls due to non-stable event emissions.
- Command to prevent a rune from working
- 'Prior to 0.7.2, close took two parameters: force and timeout.'
- Command for closing channels with direct peers
- Command for decoding a bolt11 string (low-level)
- Command for extracting the hsm_secret file for backup
- Command for querying recommended onchain feerates
- The feerates will be based on the recommended feerates from the backend.
- There is currently no way to change these feerates from the RPC.
- Command for establishing a lightning channel
- Command for completing channel establishment
- The funding transaction MUST NOT be broadcast until after channel establishment
  has been successfully completed by running `fundchannel_complete`
- Fixed funding policy adjustments available.
- Command to populate PSBT inputs from the wallet
- Sends funds to a node without an invoice
- Reckless currently supports python, rust, and javascript plugins.
- Management of plugins will subsequently modify this file.
- Includes support for both REST and JSON-RPC methods
- Experimental options are subject to breakage between releases.
- Get data on our closed historical channels
- Low-level command for querying sendpay status
- Command for deriving pseudorandom key from HSM
- Reckless requires write access
- Monitor status with listpays or waitsendpay
- Command is experimental-splicing only
- Must be called repeatedly until commitments_secured is true
- Writing to the database is not permitted, and limits are placed on various other
  query parameters.
- Queries like "SELECT *" are fragile, as columns will change across releases.
- stop is a RPC command to shut off the Core Lightning node.
errors:
- '400 Bad Request: Check request parameters'
- '404 Not Found: Verify endpoint URL'
- '401 Unauthorized: Check OAuth token validity'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'UNUSUAL plugin-cln-plugin-startup: Killing plugin: JSON-RPC message does not contain
  ''jsonrpc'' field'
- onion message cannot be parsed
- next peer wasn't connected
- Invalid address will cause the node to exit with an error
- If any plugin returns anything else, lightningd will error without committing to
  the database.
- '-32602: Error in given parameters'
- '-32602: Parameter missed or malformed'
- '1301: pubkey not found in the graph'
- '1501 (RUNE_NOT_AUTHORIZED): rune is not for this node (or perhaps completely invalid)'
- '1502 (RUNE_NOT_PERMITTED): rune does not allow this usage (includes a detailed
  reason why)'
- '1503 (RUNE_BLACKLISTED): rune has been explicitly blacklisted'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '-32600: Usually means peer is not connected'
- '19535: the local commando plugin discovered an error.'
- '19536: the remote commando plugin discovered an error.'
- '19537: the remote commando plugin said we weren''t authorized.'
- '400: Unable to connect, no address known for peer'
- '401: If some addresses are known but connecting to all of them failed, the message
  will contain details about the failures'
- '402: If the peer disconnected while we were connecting'
- '-32602: If the given parameters are wrong'
- '-1: Catchall nonspecific error.'
- '900: An invoice with the given *label* already exists.'
- '1202: The key already exists (and mode said it must not)'
- '1203: The key does not exist (and mode said it must)'
- '1204: The generation was wrong (and generation was specified)'
- '1205: The key has children already.'
- '1206: One of the parents already exists with a value.'
- '-32602: invalid parameters'
- '1200: the key does not exist'
- '1201: the key does exist, but the generation is wrong'
- '1401: The forward specified does not exist.'
- 'REQUEST_FAILED: Ensure the label is correct and status is valid'
- '-1: Database error.'
- '905: An invoice with that label does not exist.'
- '906: The invoice status does not match the parameter.'
- '908: The invoice already has no description, and desconly was set.'
- '211: Payment status mismatch. Check the correct status via paystatus'
- '208: Payment with payment_hash not found'
- '-32602: If the given parameters are missing or wrong.'
- '-1: Catch all nonspecific errors, eg. `Multiple channels: please specify short_channel_id.`
  OR `No channels matching that peer_id and that short_channel_id.`, etc.'
- '-32602: If the given parameters are wrong.'
- '-32602: Error in given parameters.'
- '1006: offer already enabled.'
- Some fields may be missing in the result if feerate estimates for that kind of transaction
  are unavailable.
- '1002: Offer has expired.'
- '1003: Cannot find a route to the node making the offer.'
- '1004: The node making the offer returned an error message.'
- '1005: We timed out trying to fetch an invoice.'
- '300: The maximum allowed funding amount is exceeded.'
- '301: There are not enough funds in the internal wallet (including fees) to create
  the transaction.'
- '302: The output amount is too small, and would be considered dust.'
- '303: Broadcasting of the funding transaction failed, the internal call to bitcoin-cli
  returned with an error.'
- '313: The `min-emergency-msat` reserve not be preserved (and we have or are opening
  anchor channels).'
- '306: Unknown peer id.'
- '307: No channel currently being funded that can be cancelled.'
- '308: It is unsafe to cancel the channel: the funding transaction has been broadcast,
  or there are HTLCs already in the channel, or the peer was the initiator and not
  us.'
- '305: Peer is not connected.'
- '309: PSBT does not have a unique, correct output to fund the channel.'
- '300: The amount exceeded the maximum configured funding amount.'
- '301: The provided `push_msat` is greater than the provided `amount`.'
- '304: Still syncing with bitcoin network'
- '312: Peer negotiated `option_dual_fund`, must use `openchannel_init` not `fundchannel_start`.'
- '-32602: If the given parameters are invalid.'
- '301: Insufficient UTXOs to meet *satoshi* value.'
- '-32602: Error in given parameters or some error happened during the command process.'
- '218: injectpaymentonion failed'
- '219: injectpaymentonion already succeeded'
- '901: An invoice with the given *preimage* already exists.'
- '902: None of the specified *exposeprivatechannels* were usable.'
- '-1: Catchall nonspecific error'
- '203: Permanent failure at destination.'
- '205: Unable to find a route.'
- '206: Route too expensive.'
- '210: Payment timed out without a payment in progress.'
- '1: Generic lightning-cli error'
- '10: Error executing subdaemons'
- '11: Error locking pidfile (often another lightningd running)'
- '20: Generic error related to HSM secret'
- '21: HSM secret is encrypted'
- '22: Bad password used to decrypt the HSM secret'
- '23: Error caused from the I/O operation during a HSM decryption/encryption operation'
- '30: Wallet database does not match (network or hsm secret)'
- '-32602: Error in given parameters or field with *config* name doesn''t exist.'
- '401: All addresses failed: 127.0.0.1:19736: Cryptographic handshake: peer closed
  connection (wrong key?).'
- '402: disconnected during connection'
- '302: The dust limit is not met.'
- If an unrecognized address type is requested an error message will be returned.
- REQUEST_LIMIT_EXCEEDED
- QUERY_TIMEOUT
- 401 Unauthorized
- '1000: Offer with this offer_id already exists (but is not active).'
- '311: Unknown channel id.'
- '312: Channel in an invalid state'
- Abort requested
- '301: The provided PSBT cannot afford the funding amount.'
- '309: PSBT missing required fields'
- '300: The amount exceeded the maximum configured funding amount'
- '301: The provided PSBT cannot afford the funding amount'
- '305: Peer is not connected'
- '306: Unknown peer id'
- '310: v2 channel open protocol not supported by peer'
- '303: Funding transaction broadcast failed.'
- '309: PSBT missing required fields.'
- '201: Already paid with this *hash* using different amount or destination.'
- '207: Invoice expired.'
- '-32602: Error in given parameters or we''re already waiting for a ping response
  from peer.'
- '200: Other payment attempts are in progress.'
- '206: Payment routes are too expensive.'
- '212: Invoice is invalid.'
- '-32602: Invalid parameter, such as specifying a spent/reserved input in *psbt*.'
- 'ERROR: Unable to send invoice'
- '1005: We timed out waiting for the invoice to be paid'
- '202: an parseable onion'
- '202: Unparseable onion reply.'
- '204: Failure along route; retry a different route.'
- '212: *localinvreqid* refers to an invalid, or used, local invoice_request.'
- '-1: Channel is in incorrect state, i.e. Catchall nonspecific error.'
- '-32602: JSONRPC2_INVALID_PARAMS, i.e. Given id is not a channel ID or short channel
  ID.'
- '-32602: JSONRPC2_INVALID_PARAMS, i.e. the parameter is not dynamic, or the val
  was invalid.'
- '-32602: Parameter missed or malformed.'
- '-32602: Error in given parameters, or there aren''t wallet''s inputs to sign, or
  we couldn''t sign all of *signonly*, or inputs are not reserved.'
- commitments_secured must be true to finalize splice
- 'warning_db_failure: A message if the database encounters an error partway through.'
- '-1: An unknown txid'
- '-32602: Invalid parameter, i.e. an unparseable PSBT.'
- '904: The *timeout* was reached without an invoice being paid.'
- '2000: Timed out'
- '-1: If the invoice is deleted while unpaid, or the invoice does not exist.'
- '903: If the invoice expires before being paid, or is already expired.'
- '200: Timed out before the payment could complete.'
- '208: A payment for *payment_hash* was never made.'
- '209: The payment already failed.'
- '313: The min-emergency-msat reserve not be preserved (and we have anchor channels).'
- '203: Permanent failure from destination (e.g. it said it didn''t recognize invoice)'
- '205: Couldn''t find, or find a way to, the destination.'
- '207: Invoice has expired.'
- '219: Invoice has already been paid.'
- '209: Other payment error.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
client:
  base_url: https://docs.corelightning.org
  headers:
    Accept: application/json
source_metadata: null
