resources:
- name: MLPNet
  endpoint:
    path: /api/mlp
    method: GET
    data_selector: records
- name: TSDataset
  endpoint:
    path: /api/tsdataset
    method: GET
    data_selector: records
    params: {}
- name: backtest
  endpoint:
    path: /api/backtest
    method: POST
    data_selector: results
    params: {}
- name: metrics
  endpoint:
    path: /backtest/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: forecast
  endpoint:
    path: /backtest/forecast
    method: GET
    data_selector: forecast
    params: {}
- name: fold_info
  endpoint:
    path: /backtest/fold_info
    method: GET
    data_selector: fold_info
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics_df
    params: {}
- name: Outliers Detection
  endpoint:
    path: /outliers/detection
    method: GET
    data_selector: records
    params: {}
- name: Outliers Imputation
  endpoint:
    path: /outliers/imputation
    method: GET
    data_selector: records
    params: {}
- name: distances
  endpoint:
    path: /distances
    method: GET
    data_selector: records
- name: clustering
  endpoint:
    path: /clustering
    method: GET
    data_selector: records
- name: Custom Model and Transform
  endpoint:
    path: /api/custom_model_and_transform
    method: GET
    data_selector: records
- name: VotingEnsemble
  endpoint:
    path: /ensembles/voting
    method: POST
    data_selector: results
- name: stacking ensemble
  endpoint:
    path: /stacking_ensemble
    method: GET
    data_selector: results
    params: {}
- name: tsdataset
  endpoint:
    path: /api/tsdataset
    method: GET
    data_selector: data
- name: predictability_analyzer
  endpoint:
    path: /predictability_analyzer
    method: GET
    data_selector: results
- name: feature_extraction
  endpoint:
    path: /feature_extraction
    method: GET
    data_selector: results
- name: hierarchical_structure
  endpoint:
    path: /hierarchical_structure
    method: GET
    data_selector: level_structure
    params: {}
- name: hierarchical_dataset
  endpoint:
    path: /services/data/vXX.X/hierarchical_dataset
    method: POST
    data_selector: records
- name: hierarchical_df
  endpoint:
    path: /to_hierarchical_dataset
    method: POST
    data_selector: hierarchical_df
    params:
      level_columns:
      - reason_level
      - region_level
      - city_level
- name: TopDownReconciliator
  endpoint:
    path: /reconciliation/methods
    method: GET
- name: AutoARIMAModel
  endpoint:
    path: /api/etna.models.autoarima.AutoARIMAModel
    method: GET
- name: BATSModel
  endpoint:
    path: /api/etna.models.tbats.BATSModel
    method: GET
- name: BaseAdapter
  endpoint:
    path: /api/etna.models.base.BaseAdapter
    method: GET
- name: CatBoostModelMultiSegment
  endpoint:
    path: /api/etna.models.catboost.CatBoostModelMultiSegment
    method: GET
- name: CatBoostModelPerSegment
  endpoint:
    path: /api/etna.models.catboost.CatBoostModelPerSegment
    method: GET
- name: CatBoostMultiSegmentModel
  endpoint:
    path: /api/etna.models.catboost.CatBoostMultiSegmentModel
    method: GET
- name: CatBoostPerSegmentModel
  endpoint:
    path: /api/etna.models.catboost.CatBoostPerSegmentModel
    method: GET
- name: DeadlineMovingAverageModel
  endpoint:
    path: /api/etna.models.deadline_ma.DeadlineMovingAverageModel
    method: GET
- name: DeepARModel
  endpoint:
    path: /api/etna.models.nn.deepar.DeepARModel
    method: GET
- name: ElasticMultiSegmentModel
  endpoint:
    path: /api/etna.models.linear.ElasticMultiSegmentModel
    method: GET
- name: ElasticPerSegmentModel
  endpoint:
    path: /api/etna.models.linear.ElasticPerSegmentModel
    method: GET
- name: HoltModel
  endpoint:
    path: /api/etna.models.holt_winters.HoltModel
    method: GET
- name: HoltWintersModel
  endpoint:
    path: /api/etna.models.holt_winters.HoltWintersModel
    method: GET
- name: LinearMultiSegmentModel
  endpoint:
    path: /api/etna.models.linear.LinearMultiSegmentModel
    method: GET
- name: LinearPerSegmentModel
  endpoint:
    path: /api/etna.models.linear.LinearPerSegmentModel
    method: GET
- name: MLPModel
  endpoint:
    path: /api/etna.models.nn.mlp.MLPModel
    method: GET
- name: MovingAverageModel
  endpoint:
    path: /api/etna.models.moving_average.MovingAverageModel
    method: GET
- name: NaiveModel
  endpoint:
    path: /api/etna.models.naive.NaiveModel
    method: GET
- name: NonPredictionIntervalContextIgnorantAbstractModel
  endpoint:
    path: /api/etna.models.base.NonPredictionIntervalContextIgnorantAbstractModel
    method: GET
- name: NonPredictionIntervalContextRequiredAbstractModel
  endpoint:
    path: /api/etna.models.base.NonPredictionIntervalContextRequiredAbstractModel
    method: GET
- name: PredictionIntervalContextIgnorantAbstractModel
  endpoint:
    path: /api/etna.models.base.PredictionIntervalContextIgnorantAbstractModel
    method: GET
- name: PredictionIntervalContextRequiredAbstractModel
  endpoint:
    path: /api/etna.models.base.PredictionIntervalContextRequiredAbstractModel
    method: GET
- name: ProphetModel
  endpoint:
    path: /api/etna.models.prophet.ProphetModel
    method: GET
- name: RNNModel
  endpoint:
    path: /api/etna.models.nn.rnn.RNNModel
    method: GET
- name: SARIMAXModel
  endpoint:
    path: /api/etna.models.sarimax.SARIMAXModel
    method: GET
- name: SeasonalMovingAverageModel
  endpoint:
    path: /api/etna.models.seasonal_ma.SeasonalMovingAverageModel
    method: GET
- name: SimpleExpSmoothingModel
  endpoint:
    path: /api/etna.models.holt_winters.SimpleExpSmoothingModel
    method: GET
- name: SklearnMultiSegmentModel
  endpoint:
    path: /api/etna.models.sklearn.SklearnMultiSegmentModel
    method: GET
- name: SklearnPerSegmentModel
  endpoint:
    path: /api/etna.models.sklearn.SklearnPerSegmentModel
    method: GET
- name: TBATSModel
  endpoint:
    path: /api/etna.models.tbats.TBATSModel
    method: GET
- name: TFTModel
  endpoint:
    path: /api/etna.models.nn.tft.TFTModel
    method: GET
- name: HierarchicalStructure
  endpoint:
    path: /api/etna.datasets.hierarchical_structure.HierarchicalStructure
    method: GET
- name: TSDataset
  endpoint:
    path: /api/etna.datasets.tsdataset.TSDataset
    method: GET
- name: duplicate_data
  endpoint:
    path: /api/etna.datasets.utils.duplicate_data
    method: GET
- name: generate_ar_df
  endpoint:
    path: /api/etna.datasets.datasets_generation.generate_ar_df
    method: GET
- name: generate_const_df
  endpoint:
    path: /api/etna.datasets.datasets_generation.generate_const_df
    method: GET
- name: generate_from_patterns_df
  endpoint:
    path: /api/etna.datasets.datasets_generation.generate_from_patterns_df
    method: GET
- name: generate_hierarchical_df
  endpoint:
    path: /api/etna.datasets.datasets_generation.generate_hierarchical_df
    method: GET
- name: generate_periodic_df
  endpoint:
    path: /api/etna.datasets.datasets_generation.generate_periodic_df
    method: GET
- name: set_columns_wide
  endpoint:
    path: /api/etna.datasets.utils.set_columns_wide
    method: GET
- name: Coverage
  endpoint:
    path: /api/etna.metrics.intervals_metrics.Coverage
    method: GET
- name: MAE
  endpoint:
    path: /api/etna.metrics.metrics.MAE
    method: GET
- name: MAPE
  endpoint:
    path: /api/etna.metrics.metrics.MAPE
    method: GET
- name: MSE
  endpoint:
    path: /api/etna.metrics.metrics.MSE
    method: GET
- name: MSLE
  endpoint:
    path: /api/etna.metrics.metrics.MSLE
    method: GET
- name: MaxDeviation
  endpoint:
    path: /api/etna.metrics.metrics.MaxDeviation
    method: GET
- name: MedAE
  endpoint:
    path: /api/etna.metrics.metrics.MedAE
    method: GET
- name: R2
  endpoint:
    path: /api/etna.metrics.metrics.R2
    method: GET
- name: RMSE
  endpoint:
    path: /api/etna.metrics.metrics.RMSE
    method: GET
- name: SMAPE
  endpoint:
    path: /api/etna.metrics.metrics.SMAPE
    method: GET
- name: Sign
  endpoint:
    path: /api/etna.metrics.metrics.Sign
    method: GET
- name: WAPE
  endpoint:
    path: /api/etna.metrics.metrics.WAPE
    method: GET
- name: Width
  endpoint:
    path: /api/etna.metrics.intervals_metrics.Width
    method: GET
- name: AutoRegressivePipeline
  endpoint:
    path: /api/etna/pipeline/autoregressive_pipeline.AutoRegressivePipeline
    method: GET
- name: FoldMask
  endpoint:
    path: /api/etna/pipeline/base.FoldMask
    method: GET
- name: HierarchicalPipeline
  endpoint:
    path: /api/etna/pipeline/hierarchical_pipeline.HierarchicalPipeline
    method: GET
- name: Pipeline
  endpoint:
    path: /api/etna/pipeline/pipeline.Pipeline
    method: GET
- name: assemble_pipelines
  endpoint:
    path: /api/etna/pipeline/assembling_pipelines.assemble_pipelines
    method: GET
- name: BaseReconciliator
  endpoint:
    path: api/etna.reconciliation.base.BaseReconciliator
    method: GET
- name: BottomUpReconciliator
  endpoint:
    path: api/etna.reconciliation.bottom_up.BottomUpReconciliator
    method: GET
- name: TopDownReconciliator
  endpoint:
    path: api/etna.reconciliation.top_down.TopDownReconciliator
    method: GET
- name: ConsoleLogger
  endpoint:
    path: /api/etna.loggers.console_logger.ConsoleLogger
    method: GET
    data_selector: events and metrics
    params: {}
- name: LocalFileLogger
  endpoint:
    path: /api/etna.loggers.file_logger.LocalFileLogger
    method: GET
    data_selector: files
    params: {}
- name: S3FileLogger
  endpoint:
    path: /api/etna.loggers.file_logger.S3FileLogger
    method: GET
    data_selector: files
    params: {}
- name: WandbLogger
  endpoint:
    path: /api/etna.loggers.wandb_logger.WandbLogger
    method: GET
    data_selector: weights and biases
    params: {}
- name: forecast
  endpoint:
    path: /forecast
    method: POST
    data_selector: results
    params: {}
- name: backtest
  endpoint:
    path: /backtest
    method: POST
    data_selector: results
    params: {}
- name: models
  endpoint:
    path: api/etna.models.html#module-etna.models
    method: GET
- name: datasets
  endpoint:
    path: api/etna.datasets.html#module-etna.datasets
    method: GET
- name: metrics
  endpoint:
    path: api/etna.metrics.html#module-etna.metrics
    method: GET
- name: transforms
  endpoint:
    path: api/etna.transforms.html#module-etna.transforms
    method: GET
- name: ensembles
  endpoint:
    path: api/etna.ensembles.html#module-etna.ensembles
    method: GET
- name: pipeline
  endpoint:
    path: api/etna.pipeline.html#module-etna.pipeline
    method: GET
- name: reconciliation
  endpoint:
    path: api/etna.reconciliation.html#module-etna.reconciliation
    method: GET
- name: analysis
  endpoint:
    path: api/etna.analysis.html#module-etna.analysis
    method: GET
- name: auto
  endpoint:
    path: api/etna.auto.html#module-etna.auto
    method: GET
- name: clustering
  endpoint:
    path: api/etna.clustering.html#module-etna.clustering
    method: GET
- name: loggers
  endpoint:
    path: api/etna.loggers.html#module-etna.loggers
    method: GET
- name: commands
  endpoint:
    path: api/etna.commands.html#module-etna.commands
    method: GET
- name: settings
  endpoint:
    path: api/etna.settings.html#module-etna.settings
    method: GET
- name: CatBoostPerSegmentModel
  endpoint:
    path: /api/etna/models/catboost/CatBoostPerSegmentModel
    method: GET
    data_selector: records
    params: {}
- name: DeadlineMovingAverageModel
  endpoint:
    path: /api/etna/models/deadline_ma
    method: GET
    data_selector: model
- name: ElasticPerSegmentModel
  endpoint:
    path: /models/elastic_per_segment
    method: GET
    data_selector: records
- name: LinearMultiSegmentModel
  endpoint:
    path: /models/linear/LinearMultiSegmentModel
    method: GET
    data_selector: records
    params: {}
- name: LinearPerSegmentModel
  endpoint:
    path: /api/etna/models/linear/LinearPerSegmentModel
    method: GET
- name: MovingAverageModel
  endpoint:
    path: /models/moving_average
    method: GET
    data_selector: records
- name: NaiveModel
  endpoint:
    path: /models/naive
    method: GET
    data_selector: parameters
- name: NonPredictionIntervalContextIgnorantAbstractModel
  endpoint:
    path: /api/etna/models/base/NonPredictionIntervalContextIgnorantAbstractModel
    method: GET
    data_selector: records
    params: {}
- name: NonPredictionIntervalContextRequiredAbstractModel
  endpoint:
    path: /api/etna/models/base/NonPredictionIntervalContextRequiredAbstractModel
    method: GET
    data_selector: records
    params: {}
- name: PredictionIntervalContextIgnorantAbstractModel
  endpoint:
    path: /api/etna/models/base/PredictionIntervalContextIgnorantAbstractModel
    method: GET
    data_selector: records
- name: PredictionIntervalContextRequiredAbstractModel
  endpoint:
    path: /models/base/PredictionIntervalContextRequiredAbstractModel
    method: GET
    data_selector: records
- name: ProphetModel
  endpoint:
    path: /api/etna/models/prophet
    method: GET
    data_selector: records
    params: {}
- name: RNNModel
  endpoint:
    path: /api/etna/models/nn/rnn
    method: GET
    data_selector: records
- name: SeasonalMovingAverageModel
  endpoint:
    path: /api/seasonalmovingaveragemodel
    method: GET
    data_selector: model
    params: {}
- name: TFTModel
  endpoint:
    path: /api/etna/models/nn/tft
    method: GET
    data_selector: records
    params: {}
- name: HierarchicalStructure
  endpoint:
    path: /api/hierarchical_structure
    method: GET
    data_selector: records
- name: TSDataset
  endpoint:
    path: /datasets/tsdataset
    method: GET
    data_selector: records
- name: segments
  endpoint:
    path: /segments
    method: GET
    data_selector: segments
- name: duplicate_data
  endpoint:
    path: /api/duplicate_data
    method: POST
    data_selector: result
    params: {}
- name: generate_ar_df
  endpoint:
    path: /generate_ar_df
    method: GET
    data_selector: DataFrame
    params: {}
- name: generate_const_df
  endpoint:
    path: /api/generate_const_df
    method: GET
    data_selector: DataFrame
    params: {}
- name: generate_from_patterns_df
  endpoint:
    path: /generate_from_patterns_df
    method: GET
    data_selector: DataFrame
    params: {}
- name: generate_hierarchical_df
  endpoint:
    path: /api/generate_hierarchical_df
    method: GET
    data_selector: DataFrame
    params: {}
- name: generate_periodic_df
  endpoint:
    path: /generate_periodic_df
    method: GET
    data_selector: DataFrame
    params: {}
- name: set_columns_wide
  endpoint:
    path: /api/etna.datasets.utils.set_columns_wide
    method: GET
    data_selector: source
    params: {}
- name: Coverage
  endpoint:
    path: /api/etna/metrics/intervals_metrics/Coverage
    method: GET
    data_selector: metrics
    params: {}
- name: MAPE
  endpoint:
    path: /api.html
    method: GET
    data_selector: metrics
    params: {}
- name: MSE
  endpoint:
    path: /api/etna/metrics/metrics/MSE
    method: GET
    data_selector: metrics
    params: {}
- name: MSLE
  endpoint:
    path: /api/etna/metrics/metrics/MSLE
    method: GET
    data_selector: metric_data
    params: {}
- name: R2
  endpoint:
    path: /api.html
    method: GET
    data_selector: metrics
    params: {}
- name: AddConstTransform
  endpoint:
    path: /_modules/etna/transforms/math/add_constant.html#AddConstTransform
    method: GET
    data_selector: result
    params: {}
- name: BinsegTrendTransform
  endpoint:
    path: /api/etna/transforms/decomposition/binseg
    method: GET
    data_selector: parameters
    params: {}
- name: DateFlagsTransform
  endpoint:
    path: /transforms/timestamp/date_flags
    method: GET
    data_selector: features
    params: {}
- name: FilterFeaturesTransform
  endpoint:
    path: /api/etna/transforms/feature_selection/filter
    method: GET
    data_selector: records
- name: HolidayTransform
  endpoint:
    path: /api/holiday_transform
    method: POST
    data_selector: results
- name: LabelEncoderTransform
  endpoint:
    path: /api/etna.transforms.encoders.categorical.LabelEncoderTransform
    method: GET
    data_selector: parameters
    params: {}
- name: LagTransform
  endpoint:
    path: /api/etna.transforms.math.lags.LagTransform
    method: GET
    data_selector: records
    params: {}
- name: LambdaTransform
  endpoint:
    path: /api/etna/transforms/math/apply_lambda
    method: GET
    data_selector: transforms
    params: {}
- name: LogTransform
  endpoint:
    path: /api/etna.transforms.math/log
    method: GET
    data_selector: result
- name: MADTransform
  endpoint:
    path: /api/etna.transforms.math.statistics.MADTransform
    method: GET
    data_selector: parameters
    params: {}
- name: MaxTransform
  endpoint:
    path: /_modules/etna/transforms/math/statistics.html#MaxTransform
    method: GET
    data_selector: parameters
    params: {}
- name: MeanTransform
  endpoint:
    path: /api/etna.transforms.math.statistics.MeanTransform
    method: GET
    data_selector: parameters
- name: MedianTransform
  endpoint:
    path: /api/etna.transforms.math.statistics.MedianTransform
    method: GET
    data_selector: parameters
    params: {}
- name: MinMaxDifferenceTransform
  endpoint:
    path: /minmaxdifferencetransform
    method: GET
    data_selector: parameters
    params: {}
- name: MinTransform
  endpoint:
    path: /transforms/math/statistics/MinTransform
    method: GET
    data_selector: parameters
    params: {}
- name: OneHotEncoderTransform
  endpoint:
    path: /transforms/encoders/categorical/OneHotEncoderTransform
    method: GET
    data_selector: data
    params: {}
- name: PerSegmentWrapper
  endpoint:
    path: /api/etna/transforms/base/PerSegmentWrapper
    method: GET
    data_selector: records
- name: PredictionIntervalOutliersTransform
  endpoint:
    path: /api/PredictionIntervalOutliersTransform
    method: GET
    data_selector: records
- name: QuantileTransform
  endpoint:
    path: /api/etna/transforms/math/statistics/QuantileTransform
    method: GET
    data_selector: parameters
    params: {}
- name: STLTransform
  endpoint:
    path: /api/etna.transforms.decomposition/stl
    method: GET
    data_selector: data
    params: {}
- name: SegmentEncoderTransform
  endpoint:
    path: /transforms/SegmentEncoderTransform
    method: GET
    data_selector: records
- name: SpecialDaysTransform
  endpoint:
    path: /api/etna/transforms/timestamp/special_days
    method: GET
    data_selector: anomaly_weekdays, anomaly_monthdays
    params: {}
- name: StandardScalerTransform
  endpoint:
    path: /api/etna.transforms.math.scalers.StandardScalerTransform
    method: GET
    data_selector: records
    params: {}
- name: StdTransform
  endpoint:
    path: /api/etna/transforms/math/statistics/StdTransform
    method: GET
    data_selector: parameters
    params: {}
- name: SumTransform
  endpoint:
    path: /api/etna.transforms.math.statistics.SumTransform
    method: GET
    data_selector: parameters
    params: {}
- name: TimeFlagsTransform
  endpoint:
    path: /transforms/timestamp/time_flags
    method: GET
- name: TimeSeriesImputerTransform
  endpoint:
    path: /api/etna/transforms/missing_values/imputation/TimeSeriesImputerTransform
    method: GET
    data_selector: ''
    params: {}
- name: Transform
  endpoint:
    path: /api/transform
    method: GET
- name: TreeFeatureSelectionTransform
  endpoint:
    path: /api/tree_feature_selection
    method: POST
    data_selector: result
    params: {}
- name: DirectEnsemble
  endpoint:
    path: /api/directensemble
    method: GET
    data_selector: records
- name: stacking_ensemble
  endpoint:
    path: /api/stacking_ensemble
    method: GET
    data_selector: records
- name: HierarchicalPipeline
  endpoint:
    path: /pipeline/hierarchical_pipeline
    method: GET
    data_selector: records
- name: Pipeline
  endpoint:
    path: /api/pipeline
    method: GET
    data_selector: records
- name: BaseReconciliator
  endpoint:
    path: /api/etna/reconciliation/base
    method: GET
    data_selector: records
- name: BottomUpReconciliator
  endpoint:
    path: /api/bottomup
    method: GET
    data_selector: data
    params: {}
- name: AggregationMode
  endpoint:
    path: /api/aggregation_mode
    method: GET
- name: change_points_trend
  endpoint:
    path: /api/change_points_trend
    method: GET
- name: _cross_correlation
  endpoint:
    path: etna.analysis.eda_utils._cross_correlation
    method: GET
- name: _get_seasonal_cycle_name
  endpoint:
    path: etna.analysis.eda_utils._get_seasonal_cycle_name
    method: GET
- name: _get_seasonal_in_cycle_name
  endpoint:
    path: etna.analysis.eda_utils._get_seasonal_in_cycle_name
    method: GET
- name: _get_seasonal_in_cycle_num
  endpoint:
    path: etna.analysis.eda_utils._get_seasonal_in_cycle_num
    method: GET
- name: _prepare_seasonal_plot_df
  endpoint:
    path: etna.analysis.eda_utils._prepare_seasonal_plot_df
    method: GET
- name: _resample
  endpoint:
    path: etna.analysis.eda_utils._resample
    method: GET
- name: _seasonal_split
  endpoint:
    path: etna.analysis.eda_utils._seasonal_split
    method: GET
- name: acf_plot
  endpoint:
    path: etna.analysis.eda_utils.acf_plot
    method: GET
- name: cross_corr_plot
  endpoint:
    path: etna.analysis.eda_utils.cross_corr_plot
    method: GET
- name: distribution_plot
  endpoint:
    path: etna.analysis.eda_utils.distribution_plot
    method: GET
- name: prediction_actual_scatter_plot
  endpoint:
    path: etna.analysis.eda_utils.prediction_actual_scatter_plot
    method: GET
- name: qq_plot
  endpoint:
    path: etna.analysis.eda_utils.qq_plot
    method: GET
- name: sample_acf_plot
  endpoint:
    path: etna.analysis.eda_utils.sample_acf_plot
    method: GET
- name: sample_pacf_plot
  endpoint:
    path: etna.analysis.eda_utils.sample_pacf_plot
    method: GET
- name: seasonal_plot
  endpoint:
    path: etna.analysis.eda_utils.seasonal_plot
    method: GET
- name: stl_plot
  endpoint:
    path: etna.analysis.eda_utils.stl_plot
    method: GET
- name: feature_relevance
  endpoint:
    path: /api/analysis/feature_relevance
    method: GET
    data_selector: relevance
    params: {}
- name: feature_relevance_table
  endpoint:
    path: /api/analysis/feature_relevance/relevance_table
    method: GET
    data_selector: relevance_table
    params: {}
- name: outliers
  endpoint:
    path: /api/outliers
    method: GET
    data_selector: records
- name: _create_holidays_df
  endpoint:
    path: etna.analysis.plotters._create_holidays_df
    method: GET
- name: _create_holidays_df_dataframe
  endpoint:
    path: etna.analysis.plotters._create_holidays_df_dataframe
    method: GET
- name: _create_holidays_df_str
  endpoint:
    path: etna.analysis.plotters._create_holidays_df_str
    method: GET
- name: _get_borders_ts
  endpoint:
    path: etna.analysis.plotters._get_borders_ts
    method: GET
- name: _get_existing_quantiles
  endpoint:
    path: etna.analysis.plotters._get_existing_quantiles
    method: GET
- name: _get_fictitious_relevances
  endpoint:
    path: etna.analysis.plotters._get_fictitious_relevances
    method: GET
- name: _get_labels_names
  endpoint:
    path: etna.analysis.plotters._get_labels_names
    method: GET
- name: _prepare_forecast_results
  endpoint:
    path: etna.analysis.plotters._prepare_forecast_results
    method: GET
- name: _select_quantiles
  endpoint:
    path: etna.analysis.plotters._select_quantiles
    method: GET
- name: _validate_intersecting_segments
  endpoint:
    path: etna.analysis.plotters._validate_intersecting_segments
    method: GET
- name: get_correlation_matrix
  endpoint:
    path: etna.analysis.plotters.get_correlation_matrix
    method: GET
- name: get_residuals
  endpoint:
    path: etna.analysis.plotters.get_residuals
    method: GET
- name: metric_per_segment_distribution_plot
  endpoint:
    path: etna.analysis.plotters.metric_per_segment_distribution_plot
    method: GET
- name: plot_anomalies
  endpoint:
    path: etna.analysis.plotters.plot_anomalies
    method: GET
- name: plot_anomalies_interactive
  endpoint:
    path: etna.analysis.plotters.plot_anomalies_interactive
    method: GET
- name: plot_backtest
  endpoint:
    path: etna.analysis.plotters.plot_backtest
    method: GET
- name: plot_backtest_interactive
  endpoint:
    path: etna.analysis.plotters.plot_backtest_interactive
    method: GET
- name: plot_change_points_interactive
  endpoint:
    path: etna.analysis.plotters.plot_change_points_interactive
    method: GET
- name: plot_clusters
  endpoint:
    path: etna.analysis.plotters.plot_clusters
    method: GET
- name: plot_correlation_matrix
  endpoint:
    path: etna.analysis.plotters.plot_correlation_matrix
    method: GET
- name: plot_feature_relevance
  endpoint:
    path: etna.analysis.plotters.plot_feature_relevance
    method: GET
- name: plot_forecast
  endpoint:
    path: etna.analysis.plotters.plot_forecast
    method: GET
- name: plot_holidays
  endpoint:
    path: etna.analysis.plotters.plot_holidays
    method: GET
- name: plot_imputation
  endpoint:
    path: etna.analysis.plotters.plot_imputation
    method: GET
- name: plot_metric_per_segment
  endpoint:
    path: etna.analysis.plotters.plot_metric_per_segment
    method: GET
- name: plot_periodogram
  endpoint:
    path: etna.analysis.plotters.plot_periodogram
    method: GET
- name: plot_residuals
  endpoint:
    path: etna.analysis.plotters.plot_residuals
    method: GET
- name: plot_time_series_with_change_points
  endpoint:
    path: etna.analysis.plotters.plot_time_series_with_change_points
    method: GET
- name: plot_trend
  endpoint:
    path: etna.analysis.plotters.plot_trend
    method: GET
- name: ModelRelevanceTable
  endpoint:
    path: /api/modelrelevancetable
    method: GET
    data_selector: data
    params: {}
- name: ModelRelevanceTable
  endpoint:
    path: etna.analysis.feature_relevance.relevance.ModelRelevanceTable
    method: GET
    data_selector: records
- name: RelevanceTable
  endpoint:
    path: etna.analysis.feature_relevance.relevance.RelevanceTable
    method: GET
    data_selector: records
- name: StatisticsRelevanceTable
  endpoint:
    path: etna.analysis.feature_relevance.relevance.StatisticsRelevanceTable
    method: GET
    data_selector: records
- name: relevance_table
  endpoint:
    path: /api/relevance_table
    method: GET
    data_selector: relevance_table
    params: {}
- name: SeasonalPlotAggregation
  endpoint:
    path: /api/SeasonalPlotAggregation
    method: GET
    data_selector: aggregation_types
    params: {}
- name: SeasonalPlotAlignment
  endpoint:
    path: /api/seasonal_plot_alignment
    method: GET
    data_selector: enum
- name: _get_seasonal_cycle_name
  endpoint:
    path: /_get_seasonal_cycle_name
    method: GET
    data_selector: pandas.core.series.Series
    params: {}
- name: _get_seasonal_in_cycle_num
  endpoint:
    path: /_get_seasonal_in_cycle_num
    method: GET
    data_selector: results
- name: _resample
  endpoint:
    path: /_resample
    method: GET
    data_selector: DataFrame
    params: {}
- name: _seasonal_split
  endpoint:
    path: /_seasonal_split
    method: GET
    data_selector: result
    params: {}
- name: cross_corr_plot
  endpoint:
    path: /api/cross_corr_plot
    method: GET
    data_selector: parameters
    params:
      n_segments: 10
      maxlags: 21
      columns_num: 2
      figsize:
      - 10
      - 5
- name: distribution_plot
  endpoint:
    path: /api/distribution_plot
    method: GET
    data_selector: z-values
    params:
      n_segments: 10
      shift: 30
      window: 30
      freq: 1M
      n_rows: 10
      figsize: (10, 5)
- name: prediction_actual_scatter_plot
  endpoint:
    path: /prediction_actual_scatter_plot
    method: GET
    data_selector: forecast_df
    params:
      ts: TSDataset
      segments: Optional[List[str]]
      columns_num: 2
      figsize: (10, 5)
- name: qq_plot
  endpoint:
    path: /api/qq_plot
    method: GET
    data_selector: plots
    params: {}
- name: sample_pacf_plot
  endpoint:
    path: /sample_pacf_plot
    method: GET
    data_selector: ts
    params:
      n_segments: '10'
      lags: '21'
      segments: null
      figsize: (10, 5)
- name: seasonal_plot
  endpoint:
    path: /api/seasonal_plot
    method: GET
    data_selector: records
- name: stl_plot
  endpoint:
    path: /api/stl_plot
    method: GET
    data_selector: parameters
    params:
      ts: TSDataset
      period: int
      segments: Optional[List[str]]
      columns_num: int
      figsize: Tuple[int, int]
      plot_kwargs: Optional[Dict[str, Any]]
      stl_kwargs: Optional[Dict[str, Any]]
- name: StatisticsRelevanceTable
  endpoint:
    path: /api/StatisticsRelevanceTable
    method: GET
    data_selector: statistics
- name: absolute_difference_distance
  endpoint:
    path: /api/absolute_difference_distance
    method: GET
    data_selector: result
    params: {}
- name: find_change_points
  endpoint:
    path: /api/find_change_points
    method: GET
    data_selector: trends
    params: {}
- name: search
  endpoint:
    path: /api/analysis/change_points_trend/search
    method: GET
- name: get_anomalies_density
  endpoint:
    path: /get_anomalies_density
    method: GET
    data_selector: outliers
    params: {}
- name: get_anomalies_hist
  endpoint:
    path: /api/get_anomalies_hist
    method: GET
    data_selector: dict
    params:
      in_column: target
      bins_number: 10
- name: density_outliers
  endpoint:
    path: /api/analysis/outliers/density_outliers
    method: GET
    data_selector: functions
    params: {}
- name: hist_outliers
  endpoint:
    path: /api/outliers/hist
    method: GET
    data_selector: outliers
- name: get_anomalies_median
  endpoint:
    path: /api/get_anomalies_median
    method: GET
    data_selector: outliers
    params: {}
- name: get_anomalies_prediction_interval
  endpoint:
    path: /api/get_anomalies_prediction_interval
    method: GET
    data_selector: outliers
    params: {}
- name: get_correlation_matrix
  endpoint:
    path: /get_correlation_matrix
    method: GET
    data_selector: correlation_matrix
    params:
      method: pearson
- name: get_model_relevance_table
  endpoint:
    path: /get_model_relevance_table
    method: GET
    data_selector: dataframe with feature importance values
- name: get_residuals
  endpoint:
    path: /get_residuals
    method: GET
    data_selector: new_ts
- name: get_statistics_relevance_table
  endpoint:
    path: /get_statistics_relevance_table
    method: GET
    data_selector: dataframe
    params: {}
- name: metric_per_segment_distribution_plot
  endpoint:
    path: /api/metric_per_segment_distribution_plot
    method: GET
    data_selector: metrics_df
    params: {}
- name: plot_anomalies
  endpoint:
    path: /api/plot_anomalies
    method: GET
    data_selector: anomaly_dict
    params: {}
- name: _create_holidays_df_str
  endpoint:
    path: _create_holidays_df_str
    method: GET
- name: _get_borders_ts
  endpoint:
    path: _get_borders_ts
    method: GET
    data_selector: Tuple[str, str]
    params: {}
- name: _get_existing_quantiles
  endpoint:
    path: /api/analysis/plotters/_get_existing_quantiles
    method: GET
- name: _get_fictitious_relevances
  endpoint:
    path: _get_fictitious_relevances
    method: GET
    data_selector: returns
    params: {}
- name: _get_labels_names
  endpoint:
    path: /_get_labels_names
    method: GET
- name: _prepare_forecast_results
  endpoint:
    path: /_prepare_forecast_results
    method: POST
    data_selector: result
    params: {}
- name: _select_quantiles
  endpoint:
    path: /_select_quantiles
    method: GET
    data_selector: results
    params: {}
- name: _validate_intersecting_segments
  endpoint:
    path: /_validate_intersecting_segments
    method: GET
    data_selector: records
    params: {}
- name: plot_anomalies_interactive
  endpoint:
    path: /api/plot_anomalies_interactive
    method: GET
    data_selector: results
    params: {}
- name: plot_change_points_interactive
  endpoint:
    path: /api/plot_change_points_interactive
    method: GET
    data_selector: results
    params: {}
- name: plot_clusters
  endpoint:
    path: /plot_clusters
    method: POST
    data_selector: parameters
    params:
      ts: TSDataset
      segment2cluster: Dict[str, int]
      centroids_df: Optional[pandas.core.frame.DataFrame]
      columns_num: int
      figsize: Tuple[int, int]
- name: plot_correlation_matrix
  endpoint:
    path: /plot_correlation_matrix
    method: GET
    data_selector: data
    params:
      method: pearson
      mode: macro
      columns_num: 2
      figsize: (10, 10)
- name: plot_feature_relevance
  endpoint:
    path: /api/plot_feature_relevance
    method: POST
    data_selector: results
    params: {}
- name: plot_forecast
  endpoint:
    path: /api/plot_forecast
    method: POST
    data_selector: results
    params: {}
- name: plot_holidays
  endpoint:
    path: /api/plot_holidays
    method: POST
    data_selector: parameters
- name: plot_imputation
  endpoint:
    path: /api/plot_imputation
    method: POST
    data_selector: result
    params: {}
- name: plot_periodogram
  endpoint:
    path: /plot_periodogram
    method: GET
    data_selector: parameters
    params:
      period: float
      amplitude_aggregation_mode: str
      periodogram_params: Optional[Dict[str, Any]]
      segments: Optional[List[str]]
      xticks: Optional[List[Any]]
      columns_num: int
      figsize: Tuple[int, int]
- name: plot_residuals
  endpoint:
    path: /plot_residuals
    method: GET
    data_selector: forecast_df
    params: {}
- name: plot_time_series_with_change_points
  endpoint:
    path: /plot_time_series_with_change_points
    method: GET
    data_selector: parameters
    params:
      ts: TSDataset
      change_points: Dict[str, List[pandas._libs.tslibs.timestamps.Timestamp]]
      segments: Optional[List[str]]
      columns_num: int
      figsize: Tuple[int, int]
      start: Optional[str]
      end: Optional[str]
- name: plot_trend
  endpoint:
    path: /api/plot_trend
    method: POST
    data_selector: result
    params: {}
- name: PerFoldAggregation
  endpoint:
    path: /api/per_fold_aggregation
    method: GET
    data_selector: aggregation_types
    params: {}
- name: Clustering
  endpoint:
    path: /api/clustering
    method: GET
    data_selector: clusters
- name: DTWClustering
  endpoint:
    path: /api/dtwclustering
    method: GET
    data_selector: records
- name: DistanceMatrix
  endpoint:
    path: /api/DistanceMatrix
    method: GET
    data_selector: records
- name: build_distance_matrix
  endpoint:
    path: /build_distance_matrix
    method: GET
    data_selector: ts
    params: {}
- name: fit_predict
  endpoint:
    path: /fit_predict
    method: GET
    data_selector: clusters
    params: {}
- name: ConsoleLogger
  endpoint:
    path: /api/loggers/console
    method: POST
    data_selector: log
    params: {}
- name: LocalFileLogger
  endpoint:
    path: /loggers/file_logger/LocalFileLogger
    method: GET
    data_selector: records
    params: {}
- name: S3FileLogger
  endpoint:
    path: /logger/s3file
    method: POST
    data_selector: logs
    params:
      bucket: bucket
      experiments_folder: experiments_folder
      config: config
      gzip: gzip
- name: log_decorator
  endpoint:
    path: /api/models/decorators/log_decorator
    method: GET
    data_selector: functions
    params: {}
- name: HoltModel
  endpoint:
    path: /models/holt_winters/HoltModel
    method: GET
- name: HoltWintersModel
  endpoint:
    path: /models/holt_winters/HoltWintersModel
    method: GET
- name: SimpleExpSmoothingModel
  endpoint:
    path: /models/holt_winters/SimpleExpSmoothingModel
    method: GET
- name: _HoltWintersAdapter
  endpoint:
    path: /models/holt_winters/_HoltWintersAdapter
    method: GET
- name: moving_average
  endpoint:
    path: /api/moving_average
    method: GET
    data_selector: data
    params: {}
- name: naive
  endpoint:
    path: /api/models/naive
    method: GET
    data_selector: records
- name: SklearnMultiSegmentModel
  endpoint:
    path: /models/sklearn/multi_segment
    method: GET
    data_selector: records
- name: SklearnPerSegmentModel
  endpoint:
    path: /models/sklearn/per_segment
    method: GET
    data_selector: records
- name: _SklearnAdapter
  endpoint:
    path: /models/sklearn/adapter
    method: GET
    data_selector: records
notes:
- 'etna_ts is strict about data format: column we want to predict should be called
  `target`, column with datetime data should be called `timestamp`, column `segment`
  is also compulsory.'
- 'UserWarning: `tsfresh` is not available, to install it, run `pip install tsfresh==0.19.0
  && pip install protobuf==3.20.1`.'
- You probably set wrong freq. Discovered freq in your data is MS, you set 1M.
- 'etna_ts is strict about data format: column we want to predict should be called
  `target`, column with datetime data should be called `timestamp`, because etna is
  always ready to work with multiple time series, column `segment` is also compulsory'
- Some objects may return nulls in deeply nested fields
- Backtest allows you to simulate how the model would work in the past.
- Backtest allows you to simulate how the model would work in the past
- Analysis of the residuals can help establish a dependency in the data that our model
  was not able to find.
- Outliers imputation might make the forecast worse in case of complex timeseries
  behavior.
- etna.models.SklearnPerSegmentModel and etna.models.SklearnMultiSegmentModel have
  some limitations.
- Copyright 2021, etna-tech@tinkoff.ru.
- Uses PyTorch for deep learning models.
- Neural networks are a bit better in this particular case.
- The architecture and API of the objects from `etna.experimental` module might face
  changes in the future.
- Requires installation of dependencies for certain features.
- That’s all for this notebook. Remember, that this is an experimental feature, and
  it might change the interface in the future!
- Hierarchical time series reconciliation allows for the readjustment of predictions
  produced by separate models on a set of hierarchically linked time series.
- 'There are several reconciliation methods in the ETNA library: Bottom-up approach,
  Top-down approach, Middle-out reconciliation approach.'
- Transforms and model work with the dataset on the source level.
- Forecasts are automatically reconciliated to the target level, metrics reported
  for target level as well.
- Exogenous data will be merged only when both dataframes are at the same level.
- At the package init by default etna checks availability of all packages and warns
  you if some of them are not available.
- You also may want to make sure, that your etna project always has necessary dependencies
  installed. In order to do that, you need to create .etna file in the project directory.
  This way you will get error if any of the dependencies are not present.
- CatBoostModelMultiSegment is deprecated; will be deleted in etna==2.0.
- CatBoostModelPerSegment is deprecated; will be deleted in etna==2.0.
- The maximum number of trees that can be built when solving machine learning problems
  depends on the iterations parameter.
- Depth of the tree can vary based on the processing unit type and the selected loss
  function.
- We save pytorch_forecasting.data.timeseries.TimeSeriesDataSet in instance to use
  it in the model.
- It`s not right pattern of using Transforms and TSDataset.
- Class holding per segment sklearn.linear_model.ElasticNet.
- We use `statsmodels.tsa.holtwinters.ExponentialSmoothing` model from statsmodels
  package.
- We use statsmodels.tsa.holtwinters.ExponentialSmoothing model from statsmodels package.
- Interface for models that support prediction intervals and don’t need context for
  prediction.
- Interface for models that support prediction intervals and need context for prediction.
- Original Prophet can use features ‘cap’ and ‘floor’, they should be added to the
  known_future list on dataset initialization.
- We use `statsmodels.tsa.sarimax.SARIMAX`. Statsmodels package uses exog attribute
  for exogenous regressors which should be known in future, however we use exogenous
  for additional features what is not known in future, and regressors for features
  we do know in future.
- Uses statsmodels.tsa.holtwinters.ExponentialSmoothing model from statsmodels package.
- Class for holding Sklearn model for all segments.
- TSDataset supports custom indexing and slicing method.
- If at the start of the period dataset contains NaN those timestamps will be removed.
- During creation segment is casted to string type.
- Columns 'timestamp' and 'segment' are required.
- Mean squared error metric with multi-segment computation support.
- Mean squared logarithmic error metric with multi-segment computation support.
- Max Deviation metric with multi-segment computation support (maximum deviation value
  of cumulative sums).
- You can read more about logic of multi-segment metrics in Metric docs.
- Median absolute error metric with multi-segment computation support.
- This transform can suffer from look-ahead bias.
- This transform can suffer from look-ahead bias. For transforming data at some timestamp
  it uses information from the whole train part.
- DateFlagsTransform implements extraction of main date-based features from datetime
  column.
- This transform can work with NaNs at the beginning of the segment, but fails when
  meets NaN inside the segment.
- Filters features in each segment of the dataframe.
- Parameter `period` is responsible for the seasonality we want to capture.
- Parameters `order` and `mods` define which harmonics will be used.
- Parameter `order` is a more user-friendly version of `mods`.
- Transform works with any type of features, however most of the models works only
  with regressors.
- It is recommended to pass the regressors into the feature selection transforms.
- For not 'target' column only column data will be used for learning.
- This transform should be added at the very end of transforms parameter.
- Raises ValueError if all the modes are False.
- Setting parameter `n_subsamples` manually might cause the error. It should be at
  least the number of features (plus 1 if `fit_intercept=True`) and the number of
  samples in the shortest segment as a maximum.
- StackingEnsemble is a pipeline that forecast future using the metamodel to combine
  the forecasts of the base models.
- Fold masks are expected to be used for backtest strategy customization.
- Estimation of forecast intervals with forecast(prediction_interval=True) method
  and BottomUpReconciliator may be not reliable.
- Top-down reconciliation methods support only non-negative data.
- Global objects behavior could be different while parallel usage because platform
  dependent new process start.
- Be sure that new process is started with fork.
- If it’s not possible you should try define all globals before if __name__ == '__main__'
  scope.
- If `partial=False` function works with NaNs at any place of the time-series.
- if `partial=True` function works only with NaNs at the edges of the time-series
  and fails if there are NaNs inside it.
- Definition of autocorrelation
- The frequency of `ts` will be used if not set.
- Resampling will be made using `aggregation` parameter if frequency is set.
- If given frequency is too low, then the frequency of `ts` will be used.
- Enum for types of cycles in a seasonal plot.
- Calculate distance for `get_anomalies_density()` function by taking absolute value
  of difference.
- Transforms are taken as is from `ts`.
- Jupyter notebook might display the results incorrectly, in this case try to use
  `!jupyter nbextension enable --py widgetsnbextension`.
- This function doesn’t support intersecting folds.
- It is not possible to distinguish points plotted at one timestamp, but this case
  is considered rare.
- In non per-segment mode all segments are cut to be the same length, the last values
  are taken.
- Parameter `transforms` is necessary because some pipelines doesn’t save features
  in their forecasts.
- Be sure that new process is started with `fork` via `multiprocessing.set_start_method`.
- If it’s not possible you should try define all globals before `if __name__ == "__main__"`
  scope.
- Specifying manual `points_distance` might slow down the clustering algorithm.
- DistanceMatrix computes distance matrix from TSDataset.
- We use auto ARIMA model from pmdarima package.
errors:
- 'UserWarning: `tsfresh` is not available, to install it, run `pip install tsfresh==0.19.0
  && pip install protobuf==3.20.1`.'
- 'UserWarning: You probably set wrong freq. Discovered freq in your data is MS, you
  set 1M.'
- '400 Bad Request: Check input data format and parameters.'
- '500 Internal Server Error: Server encountered an unexpected condition.'
- 'DependencyError: Some dependencies are not installed.'
- 'ModelNotFound: The specified model does not exist.'
- 'ValueError: if segments list is empty'
- 'ValueError: if incorrect strategy is given'
- 'ValueError: if dataframe doesn’t contain ''timestamp'' column'
- 'ValueError: n_segments is empty'
- 'ValueError: n_segments contains not positive integers'
- 'ValueError: n_segments represents not non-decreasing sequence'
- 'ValueError: if period is not integer >= 1'
- 'ValueError: if order is not integer >= 1'
- 'ValueError: if period < 2'
- 'ValueError: if both or none of order, mods is set'
- 'ValueError: if order is < 1 or > ceil(period/2)'
- 'ValueError: if at least one mod is < 1 or >= period'
- 'ValueError: if incorrect mode given'
- 'ValueError: If the number of the pipelines is less than 2 or pipelines have different
  horizons.'
- 'ValueError: If partial=True and there is a NaN in the middle of the time series'
- 'ValueError: parameter `maxlags` doesn’t satisfy constraints'
- 'KeyError: if segments of `forecast_df` and `ts` aren’t the same'
- 'ValueError: if `history_len` is negative'
- 'ValueError: if folds are intersecting'
- 'ValueError: Holiday nor pd.DataFrame or String.'
- Holiday is an empty pd.DataFrame.
- as_is=True while holiday is String.
- If upper_window is negative.
- If lower_window is positive.
- 'ValueError: if periodogram can’t be calculated on segment because of the NaNs inside
  it'
- 'ValueError: if feature isn’t present in the dataset after applying transformations'
- 'ValueError: if environment variable `endpoint_url` isn’t set'
- 'ValueError: if environment variable `aws_access_key_id` isn’t set'
- 'ValueError: if environment variable `aws_secret_access_key` isn’t set'
- 'ValueError: if bucket doesn’t exist'
auth_info:
  mentioned_objects:
  - etna.settings.SETTINGS
  - TSDataset
client:
  base_url: https://docs.etna.ai
  headers:
    Accept: application/json
source_metadata: null
