resources:
- name: alerts
  endpoint:
    path: /api/alerts
    method: GET
    data_selector: alerts
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
- name: alerts
  endpoint:
    path: /api/alerts
    method: GET
- name: users
  endpoint:
    path: /api/users
    method: GET
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: records
- name: alerts
  endpoint:
    path: /api/alerts
    method: GET
    data_selector: records
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: alerts
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: contacts
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: alerts
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
- name: metrics
  endpoint:
    path: /api/v1/metrics
    method: GET
- name: user_contacts_emails
  endpoint:
    path: /api/users/{id}/contacts/emails
    method: GET
- name: user_contacts_phone_numbers
  endpoint:
    path: /api/users/{id}/contacts/phone-numbers
    method: GET
- name: user_notification_preferences_alerts
  endpoint:
    path: /api/users/{id}/notification-preferences/alerts
    method: GET
- name: user_notification_preferences_duties
  endpoint:
    path: /api/users/{id}/notification-preferences/duties
    method: GET
- name: user_notification_preferences_updates
  endpoint:
    path: /api/users/{id}/notification-preferences/updates
    method: GET
- name: user_subscription_notification_types
  endpoint:
    path: /api/users/{id}/notification-preferences/subscriptions
    method: GET
- name: ilert_user
  endpoint:
    path: /v3/users
    method: POST
    data_selector: users
    params: {}
- name: ilert_user_phone_number_contact
  endpoint:
    path: /v3/user_phone_number_contacts
    method: POST
    data_selector: contacts
    params: {}
- name: ilert_user_email_contact
  endpoint:
    path: /v3/user_email_contacts
    method: POST
    data_selector: contacts
    params: {}
- name: ilert_user_alert_preference
  endpoint:
    path: /v3/user_alert_preferences
    method: POST
    data_selector: preferences
    params: {}
- name: ilert_user_duty_preference
  endpoint:
    path: /v3/user_duty_preferences
    method: POST
    data_selector: preferences
    params: {}
- name: user_contacts
  endpoint:
    path: /api/users/{id}/contacts/emails
    method: GET
    data_selector: contacts
- name: user_notification_preferences
  endpoint:
    path: /api/users/{id}/notification-preferences/alerts
    method: GET
    data_selector: notificationPreferences
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: ''
    params: {}
- name: ilert_user
  endpoint:
    path: /users
    method: POST
    data_selector: user
    params: {}
- name: ilert_user_phone_number_contact
  endpoint:
    path: /user_phone_number_contact
    method: POST
    data_selector: contact
    params: {}
- name: ilert_user_email_contact
  endpoint:
    path: /user_email_contact
    method: POST
    data_selector: contact
    params: {}
- name: ilert_user_alert_preference
  endpoint:
    path: /user_alert_preference
    method: POST
    data_selector: preference
    params: {}
- name: ilert_user_duty_preference
  endpoint:
    path: /user_duty_preference
    method: POST
    data_selector: preference
    params: {}
- name: subscribers_bulk
  endpoint:
    path: /api/status-pages/{status-page-id}/subscribers_bulk
    method: POST
    params:
      import: 'true'
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
- name: alert_sources
  endpoint:
    path: /api/v1/alert-sources
    method: GET
    data_selector: AlertSources
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: null
    params: {}
- name: event
  endpoint:
    path: /events
    method: POST
- name: incident
  endpoint:
    path: /incidents/{id}/resolve
    method: POST
- name: heartbeat
  endpoint:
    path: /heartbeats/{id}/ping
    method: POST
- name: users
  endpoint:
    path: /users
    method: GET
- name: events
  endpoint:
    path: /events
    method: POST
- name: subscribers_bulk
  endpoint:
    path: /api/status-pages/{status-page-id}/subscribers_bulk
    method: POST
    data_selector: records
    params:
      import: 'true'
- name: alerts
  endpoint:
    path: /api/alerts
    method: GET
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
- name: alert_sources
  endpoint:
    path: /api/v1/alert_sources
    method: GET
    data_selector: AlertSources
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
- name: incidents
  endpoint:
    path: /api/incidents
    method: GET
    data_selector: data
- name: heartbeats
  endpoint:
    path: /api/heartbeats
    method: POST
    data_selector: data
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: result
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: result
- name: current_user
  endpoint:
    path: /api/users/current
    method: GET
- name: token_info
  endpoint:
    path: /api/developers/oauth2/token_info
    method: POST
- name: revoke_token
  endpoint:
    path: /api/developers/oauth2/revoke
    method: POST
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: data
    params: {}
- name: teams
  endpoint:
    path: /api/v1/teams
    method: GET
    data_selector: data
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
- name: current_user
  endpoint:
    path: /api/users/current
    method: GET
- name: token_info
  endpoint:
    path: /api/developers/oauth2/token_info
    method: POST
- name: revoke_token
  endpoint:
    path: /api/developers/oauth2/revoke
    method: POST
- name: current_user
  endpoint:
    path: /api/users/current
    method: GET
- name: refresh_token
  endpoint:
    path: /api/developers/oauth2/token
    method: POST
- name: token_info
  endpoint:
    path: /api/developers/oauth2/token_info
    method: POST
- name: revoke_token
  endpoint:
    path: /api/developers/oauth2/revoke
    method: POST
- name: users
  endpoint:
    path: /api/users
    method: GET
- name: alert_sources
  endpoint:
    path: /api/alert-sources
    method: GET
- name: webhook
  endpoint:
    path: /webhooks/ilert
    method: POST
- name: current_user
  endpoint:
    path: /api/users/current
    method: GET
- name: token_info
  endpoint:
    path: /api/developers/oauth2/token_info
    method: POST
- name: revoke_token
  endpoint:
    path: /api/developers/oauth2/revoke
    method: POST
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: event
    params: {}
- name: users
  endpoint:
    path: /api/users/current
    method: GET
- name: escalation_policies
  endpoint:
    path: /api/escalation-policies
    method: GET
- name: schedules
  endpoint:
    path: /api/schedules
    method: GET
- name: alert_sources
  endpoint:
    path: /api/alert-sources
    method: GET
- name: uptime_monitors
  endpoint:
    path: /api/uptime-monitors
    method: GET
- name: alert_actions
  endpoint:
    path: /api/alert-actions
    method: GET
- name: connectors
  endpoint:
    path: /api/connectors
    method: GET
- name: maintenance_windows
  endpoint:
    path: /api/maintenance-windows
    method: GET
- name: reports
  endpoint:
    path: /api/reports
    method: GET
- name: incident_templates
  endpoint:
    path: /api/incident-templates
    method: GET
- name: services
  endpoint:
    path: /api/services
    method: GET
- name: status_pages
  endpoint:
    path: /api/status-pages
    method: GET
- name: teams
  endpoint:
    path: /api/teams
    method: GET
- name: incidents
  endpoint:
    path: /api/incidents
    method: GET
- name: metrics
  endpoint:
    path: /api/metrics
    method: GET
- name: metric_data_sources
  endpoint:
    path: /api/metric-data-sources
    method: GET
- name: alerts
  endpoint:
    path: /api/alerts
    method: GET
    data_selector: data
- name: incidents
  endpoint:
    path: /api/incidents
    method: GET
    data_selector: data
- name: alerts
  endpoint:
    path: /services/data/v1/alerts
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
- name: alert_sources
  endpoint:
    path: /api/alert-sources
    method: GET
    data_selector: alert_sources
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: event
    params: {}
- name: heartbeat_monitor
  endpoint:
    path: /api/heartbeat
    method: POST
    data_selector: response
    params: {}
- name: heartbeat
  endpoint:
    path: /api/v1/heartbeats/${YOUR-APIKEY}
    method: POST
- name: heartbeat
  endpoint:
    path: /api/v1/heartbeats/${YOUR-APIKEY}
    method: GET
    data_selector: null
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: alerts
    params: {}
- name: incidents
  endpoint:
    path: /api/v1/incidents
    method: GET
    data_selector: incidents
    params: {}
- name: alert_sources
  endpoint:
    path: /alert_sources
    method: POST
    data_selector: data
- name: sms_phone_numbers
  endpoint:
    path: /sms_phone_numbers
    method: GET
    data_selector: numbers
    params: {}
- name: phone_call_numbers
  endpoint:
    path: /phone_call_numbers
    method: GET
    data_selector: numbers
    params: {}
- name: email_addresses
  endpoint:
    path: /email_addresses
    method: GET
    data_selector: emails
    params: {}
- name: domains
  endpoint:
    path: /domains
    method: GET
    data_selector: domains
    params: {}
- name: ip_addresses
  endpoint:
    path: /ip_addresses
    method: GET
    data_selector: ips
    params: {}
- name: heartbeat_monitor
  endpoint:
    path: /api/heartbeat
    method: POST
    data_selector: monitor
    params: {}
- name: escalation_policy
  endpoint:
    path: /escalation/policies
    method: POST
    data_selector: policies
- name: escalation_rule
  endpoint:
    path: /escalation/rules
    method: POST
    data_selector: rules
- name: heartbeat
  endpoint:
    path: /api/v1/heartbeats/${YOUR-APIKEY}
    method: POST
    data_selector: none
    params: {}
- name: recurring_schedule
  endpoint:
    path: /on-call/schedules/recurring
    method: POST
    data_selector: schedule
    params: {}
- name: heartbeat
  endpoint:
    path: /api/v1/heartbeats/${YOUR-APIKEY}
    method: GET
- name: sms_phone_numbers
  endpoint:
    path: /sms_phone_numbers
    method: GET
    data_selector: phone_numbers
- name: call_numbers
  endpoint:
    path: /call_numbers
    method: GET
    data_selector: call_numbers
- name: email_addresses
  endpoint:
    path: /email_addresses
    method: GET
    data_selector: email_addresses
- name: domains
  endpoint:
    path: /domains
    method: GET
    data_selector: domains
- name: ip_addresses
  endpoint:
    path: /ip_addresses
    method: GET
    data_selector: ip_addresses
- name: slack_alert
  endpoint:
    path: /chatops/slack
    method: POST
    data_selector: alerts
    params: {}
- name: schedules
  endpoint:
    path: /on-call/schedules
    method: GET
    data_selector: schedules
- name: overrides
  endpoint:
    path: /on-call/overrides
    method: POST
    data_selector: overrides
- name: on_call_lookup
  endpoint:
    path: /il-oncall
    method: POST
    data_selector: lookup
- name: recurring_schedule
  endpoint:
    path: /recurring-schedules
    method: POST
    data_selector: schedules
    params: {}
- name: Slack Workspace Integration
  endpoint:
    path: /ilert/slack_integration
    method: POST
- name: alert_creation
  endpoint:
    path: /chatops/microsoft-teams/create-alerts-in-microsoft-teams
    method: POST
    data_selector: alerts
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: alerts
- name: incidents
  endpoint:
    path: /api/v1/incidents
    method: GET
    data_selector: incidents
- name: alerts
  endpoint:
    path: /alerts
    method: POST
    data_selector: alert_data
- name: oncall_lookup
  endpoint:
    path: /oncall
    method: GET
    data_selector: oncall_details
- name: incidents
  endpoint:
    path: /api/v1/incidents
    method: POST
    data_selector: incident
    params: {}
- name: incident_templates
  endpoint:
    path: /api/v1/incident-templates
    method: GET
    data_selector: templates
    params: {}
- name: on_call_lookup
  endpoint:
    path: /il-oncall
    method: POST
- name: host
  endpoint:
    path: /api/v1/hosts
    method: GET
    data_selector: data
- name: item
  endpoint:
    path: /api/v1/items
    method: GET
    data_selector: data
- name: series
  endpoint:
    path: /api/series/{key}
    method: POST
    data_selector: value
    params: {}
- name: microsoft_teams_meeting
  endpoint:
    path: /chatops/microsoft-teams/meeting
    method: GET
    data_selector: records
    params: {}
- name: metrics
  endpoint:
    path: /api/v1/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: microsoft_teams_alert_source
  endpoint:
    path: /alert-sources
    method: POST
    data_selector: alert_sources
    params: {}
- name: microsoft_teams_oncall
  endpoint:
    path: /oncall
    method: GET
- name: incidents
  endpoint:
    path: /incidents
    method: POST
    data_selector: incident_data
- name: incident_templates
  endpoint:
    path: /incident_templates
    method: POST
    data_selector: template_data
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: data
    params: {}
- name: status_page
  endpoint:
    path: /status_pages
    method: GET
- name: call_routing
  endpoint:
    path: /call-routing/call-routing-legacy
    method: GET
    data_selector: routing_configuration
    params: {}
- name: metrics
  endpoint:
    path: /api/series/{key}
    method: POST
    data_selector: value
- name: metrics
  endpoint:
    path: /api/v1/metrics
    method: GET
    data_selector: data
- name: custom_audio_playback
  endpoint:
    path: /alert-sources/call-routing
    method: GET
- name: user_roles
  endpoint:
    path: /user-administration/user-roles-and-permissions
    method: GET
    data_selector: roles
    params: {}
- name: incidents
  endpoint:
    path: /api/incidents
    method: GET
    data_selector: data
- name: alerts
  endpoint:
    path: /api/alerts
    method: GET
    data_selector: data
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: alerts
- name: incidents
  endpoint:
    path: /api/v1/incidents
    method: GET
    data_selector: incidents
- name: postmortem
  endpoint:
    path: /postmortem/generate
    method: POST
    data_selector: data
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: data
    params: {}
- name: auto_provision_user_details
  endpoint:
    path: /auto_provision_user_details
    method: GET
    data_selector: user_attributes
    params: {}
- name: auto_provision_team_details
  endpoint:
    path: /auto_provision_team_details
    method: GET
    data_selector: team_attributes
    params: {}
- name: prevent_auto_provisioning
  endpoint:
    path: /prevent_auto_provisioning
    method: GET
    data_selector: provisioning_control
    params: {}
- name: alert_source
  endpoint:
    path: /services/alert_sources
    method: POST
    data_selector: alert_sources
    params: {}
- name: outbound_connection
  endpoint:
    path: /services/outbound_connections
    method: POST
    data_selector: outbound_connections
    params: {}
- name: custom_audio_upload
  endpoint:
    path: /alert-sources/call-routing
    method: POST
    data_selector: upload
    params: {}
- name: user_roles
  endpoint:
    path: /user-administration/user-roles-and-permissions
    method: GET
    data_selector: roles
    params: {}
- name: push_notification_settings
  endpoint:
    path: /mobile-app/push-notifications
    method: GET
    data_selector: notifications
    params: {}
- name: on_call_status
  endpoint:
    path: /on-call/status
    method: GET
    data_selector: status
- name: my_on_call_shifts
  endpoint:
    path: /my/on-call/shifts
    method: GET
    data_selector: shifts
- name: alerts
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: data
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: alerts
    params: {}
- name: incidents
  endpoint:
    path: /api/v1/incidents
    method: GET
    data_selector: incidents
    params: {}
- name: alert_source
  endpoint:
    path: /alert_sources
    method: POST
    data_selector: data
- name: services
  endpoint:
    path: /services
    method: GET
    data_selector: records
- name: incidents
  endpoint:
    path: /incidents
    method: GET
    data_selector: records
- name: status_pages
  endpoint:
    path: /status_pages
    method: GET
    data_selector: records
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: alerts
    params:
      incremental: updated_at
- name: Azure Activity Logs
  endpoint:
    path: /integrations/inbound-integrations/azure-alerts/activity-logs
    method: GET
    data_selector: records
- name: Azure Metric
  endpoint:
    path: /integrations/inbound-integrations/azure-alerts/metric
    method: GET
    data_selector: records
- name: Azure Logs
  endpoint:
    path: /integrations/inbound-integrations/azure-alerts/logs
    method: GET
    data_selector: records
- name: Azure Service Health
  endpoint:
    path: /integrations/inbound-integrations/azure-alerts/service-health
    method: GET
    data_selector: records
- name: Azure Sentinel
  endpoint:
    path: /integrations/inbound-integrations/azure-alerts/sentinel
    method: GET
    data_selector: records
- name: Budget Alert
  endpoint:
    path: /integrations/inbound-integrations/azure-alerts/budget
    method: GET
    data_selector: records
- name: auto_provision_user_details
  endpoint:
    path: /auto-provision-user
    method: POST
    data_selector: attributes
    params: {}
- name: auto_provision_team_details
  endpoint:
    path: /auto-provision-team
    method: POST
    data_selector: attributes
    params: {}
- name: alert
  endpoint:
    path: /api/v1/events
    method: POST
    data_selector: event
    params: {}
- name: Findings
  endpoint:
    path: /findings
    method: GET
    data_selector: findings
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: GET
    data_selector: data
- name: alert_source
  endpoint:
    path: /api/alert_sources
    method: POST
- name: extension_callout
  endpoint:
    path: /api/extension_callouts
    method: POST
- name: workflow_rule
  endpoint:
    path: /api/workflow_rules
    method: POST
- name: notification_contacts
  endpoint:
    path: /mobile-app/notification-contacts
    method: GET
    data_selector: contacts
- name: notification_rules
  endpoint:
    path: /mobile-app/notification-rules
    method: GET
    data_selector: rules
- name: alert_webhook
  endpoint:
    path: /api/alert_webhook
    method: POST
    data_selector: alert
    params: {}
- name: Android Push Notification DND Configuration
  endpoint:
    path: /mobile-app/critical-push-notifications-and-dnd-overrides/android-push-notification-dnd-configuration
    method: GET
    data_selector: records
- name: on_call_status
  endpoint:
    path: /on-call/status
    method: GET
    data_selector: status
- name: my_on_call_shifts
  endpoint:
    path: /on-call/shifts
    method: GET
    data_selector: shifts
- name: events
  endpoint:
    path: /api/v1/events
    method: POST
    data_selector: data
- name: alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: alerts
    params: {}
- name: alert
  endpoint:
    path: /alerts
    method: GET
    data_selector: records
    params: {}
- name: callbacks
  endpoint:
    path: /v4_6_release/apis/3.0/system/callbacks
    method: POST
    data_selector: description
    params: {}
- name: notification_template
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: template
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: alert
  endpoint:
    path: /alerts
    method: POST
    data_selector: data
    params: {}
- name: HTTP Request Template
  endpoint:
    path: /api/v1/events
    method: POST
- name: webhook
  endpoint:
    path: /alert-sources
    method: POST
    data_selector: webhook
    params: {}
- name: Webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: data
    params: {}
- name: alert_source
  endpoint:
    path: /alert-sources/aws-budgets
    method: POST
    data_selector: alert_source
    params: {}
- name: sns_topic
  endpoint:
    path: /sns/topics
    method: POST
    data_selector: sns_topic
    params: {}
- name: budget
  endpoint:
    path: /budgets
    method: POST
    data_selector: budget
    params: {}
- name: alert_source
  endpoint:
    path: /alert-sources
    method: POST
- name: http_request_template
  endpoint:
    path: /settings/integration/problem-notifications
    method: POST
- name: ilert
  endpoint:
    path: /api/v1/events/eswatcher/[YOUR API KEY]
    method: POST
    data_selector: actions.ilert.webhook
- name: findings
  endpoint:
    path: /guardduty/findings
    method: POST
    data_selector: findings
- name: alerts
  endpoint:
    path: /alerts
    method: POST
    data_selector: alert
    params: {}
- name: email_alert_source
  endpoint:
    path: /alerts/sources/email
    method: POST
    data_selector: alert_sources
    params: {}
- name: Alerts
  endpoint:
    path: /alerts
    method: POST
    data_selector: records
- name: tickets
  endpoint:
    path: /api/tickets
    method: POST
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: POST
    data_selector: alerts
- name: service_hooks
  endpoint:
    path: /service_hooks
    method: POST
- name: GitLab Integration
  endpoint:
    path: /api/v4/projects/:id/hooks
    method: POST
    data_selector: hook
    params: {}
- name: alert_source
  endpoint:
    path: /alert-sources
    method: POST
- name: alert_channel
  endpoint:
    path: /alerts/channels
    method: POST
- name: checkmk
  endpoint:
    path: /integrations/inbound-integrations/checkmk
    method: GET
    data_selector: records
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: data
- name: alert_source
  endpoint:
    path: /alert-sources
    method: POST
- name: notification
  endpoint:
    path: /notifications
    method: POST
- name: alert
  endpoint:
    path: /api/alerts
    method: GET
    data_selector: alerts
    params: {}
- name: incident
  endpoint:
    path: /api/incidents
    method: GET
    data_selector: incidents
    params: {}
- name: alert_source
  endpoint:
    path: /alert-sources
    method: POST
    data_selector: alert_sources
- name: notification
  endpoint:
    path: /notifications
    method: POST
    data_selector: notifications
- name: Custom Webhook integration
  endpoint:
    path: /
    method: POST
- name: alerts
  endpoint:
    path: /service/alerts
    method: GET
    data_selector: alerts
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: callbacks
  endpoint:
    path: /v4_6_release/apis/3.0/system/callbacks
    method: POST
    data_selector: callback
    params: {}
- name: send_ticket
  endpoint:
    path: /path/to/endpoint
    method: POST
    data_selector: ticket
    params: {}
- name: alert_source
  endpoint:
    path: /alert/sources
    method: POST
    data_selector: alert_source
    params: {}
- name: consul_alerts
  endpoint:
    path: /v1/kv/consul-alerts/config/notifiers/ilert/api-key
    method: PUT
    data_selector: data
    params: {}
- name: ilert_notifications
  endpoint:
    path: /v1/kv/consul-alerts/config/notifiers/ilert/enabled
    method: PUT
    data_selector: data
    params: {}
- name: alert_source
  endpoint:
    path: /alert-sources
    method: POST
    data_selector: alert_source
    params: {}
- name: webhook
  endpoint:
    path: /integrations/webhook
    method: POST
    data_selector: webhook
    params: {}
- name: alert_source
  endpoint:
    path: /alert-sources
    method: POST
    data_selector: data
    params: {}
- name: integration
  endpoint:
    path: /integrations
    method: POST
    data_selector: data
    params: {}
- name: alert_source
  endpoint:
    path: /alert-sources
    method: POST
    data_selector: alert_source
    params: {}
- name: Dead Man's Snitch alert source
  endpoint:
    path: /alert-sources
    method: POST
    data_selector: data
- name: Webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: data
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: data
    params: {}
- name: ilert-incidents
  endpoint:
    path: /ilert/incidents
    method: POST
    data_selector: results
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: alert
  endpoint:
    path: /alerts
    method: POST
    data_selector: alert
    params: {}
- name: ilert_alerts
  endpoint:
    path: /api/v1/events/eswatcher/[YOUR API KEY]
    method: POST
    data_selector: actions.ilert.webhook
- name: alerts
  endpoint:
    path: /v1/alerts
    method: GET
    data_selector: alerts
- name: incidents
  endpoint:
    path: /v1/incidents
    method: GET
    data_selector: incidents
- name: email
  endpoint:
    path: /integrations/inbound-integrations/email
    method: POST
    data_selector: records
    params: {}
- name: alert_source
  endpoint:
    path: /alert-sources
    method: POST
    data_selector: data
- name: notification_endpoint
  endpoint:
    path: /notification-endpoints
    method: POST
    data_selector: data
- name: check
  endpoint:
    path: /checks
    method: POST
    data_selector: data
- name: notification_rule
  endpoint:
    path: /notification-rules
    method: POST
    data_selector: data
- name: email_alert_source
  endpoint:
    path: /integrations/inbound-integrations/email
    method: POST
    data_selector: alert
    params: {}
- name: alert_source
  endpoint:
    path: /alert/sources
    method: POST
    data_selector: alert_source
    params: {}
- name: webhook_integration
  endpoint:
    path: /integration/webhook
    method: POST
    data_selector: webhook_integration
    params: {}
- name: alerts
  endpoint:
    path: /ilert/api/alerts
    method: POST
    data_selector: records
    params: {}
- name: alerts
  endpoint:
    path: /alerts
    method: POST
    data_selector: records
- name: events
  endpoint:
    path: /api/v1/events/sensu/API_KEY
    method: POST
    data_selector: event
    params: {}
- name: kafka_alert
  endpoint:
    path: /api/v1/kafka/{your-key-here}
    method: POST
    data_selector: payload
- name: alert_source
  endpoint:
    path: /alert-sources
    method: POST
- name: webhook_notification_channel
  endpoint:
    path: /notificationChannels
    method: POST
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload
- name: alert
  endpoint:
    path: /integrations/inbound-integrations/google-security-command-center
    method: POST
    data_selector: alerts
- name: Kibana Alert Source
  endpoint:
    path: /your/ilert/alert/source/path
    method: POST
    data_selector: alert
    params: {}
- name: Custom Webhook
  endpoint:
    path: /
    method: POST
- name: ilert-kube-agent
  endpoint:
    path: /kubernetes/ilert-kube-agent
    method: POST
    data_selector: alerts
    params:
      api_key: <YOUR KEY HERE>
- name: send_ticket
  endpoint:
    path: /send_ticket
    method: POST
    data_selector: ticket
- name: ilert_api_key
  endpoint:
    path: /v1/kv/consul-alerts/config/notifiers/ilert/api-key
    method: PUT
    data_selector: none
    params: {}
- name: ilert_enabled
  endpoint:
    path: /v1/kv/consul-alerts/config/notifiers/ilert/enabled
    method: PUT
    data_selector: none
    params: {}
- name: alert_source
  endpoint:
    path: /alert-sources
    method: POST
    data_selector: alert_source
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: alert_source
  endpoint:
    path: /alert_sources
    method: POST
    data_selector: ''
    params: {}
- name: alertmanager
  endpoint:
    path: /alertmanager
    method: POST
    data_selector: ''
    params: {}
- name: mimir_alert_rules
  endpoint:
    path: /mimir_alert_rules
    method: POST
    data_selector: ''
    params: {}
- name: mqtt_alert
  endpoint:
    path: /api/v1/mqtt/{your-key-here}
    method: POST
    data_selector: payload
    params: {}
- name: alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: data
    params: {}
- name: ilert_nagios
  endpoint:
    path: /ilert_nagios
    method: POST
    data_selector: event
    params:
      pager: <YOUR-API-KEY>
- name: events
  endpoint:
    path: /api/v1/events/sensu/API_KEY
    method: POST
    data_selector: event
    params: {}
- name: create_event
  endpoint:
    path: /path/to/create/event
    method: POST
    data_selector: event
    params: {}
- name: update_event
  endpoint:
    path: /path/to/update/event
    method: POST
    data_selector: event
    params: {}
- name: resolve_event
  endpoint:
    path: /path/to/resolve/event
    method: POST
    data_selector: event
    params: {}
- name: kafka_alert
  endpoint:
    path: /api/v1/kafka/{your-key-here}
    method: POST
- name: alert
  endpoint:
    path: /api/alerts
    method: GET
    data_selector: data
    params: {}
- name: incident
  endpoint:
    path: /api/incidents
    method: GET
    data_selector: data
    params: {}
- name: Kentix AlarmManager
  endpoint:
    path: /integrations/inbound-integrations/kentix-am
    method: GET
- name: alert
  endpoint:
    path: /alerts
    method: POST
    data_selector: alerts
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: data
- name: kibana
  endpoint:
    path: /integrations/inbound-integrations/kibana
    method: GET
- name: kibana_alert_source
  endpoint:
    path: /kibana/alert/source
    method: POST
    data_selector: alert
    params: {}
- name: webhook_connector
  endpoint:
    path: /kibana/connectors
    method: POST
    data_selector: connector
    params: {}
- name: create_rule
  endpoint:
    path: /kibana/rules
    method: POST
    data_selector: rule
    params: {}
- name: ilert-kube-agent
  endpoint:
    path: /ilert-kube-agent
    method: POST
    data_selector: alerts
    params: {}
- name: alert_source
  endpoint:
    path: /alert-sources
    method: POST
- name: integration
  endpoint:
    path: /integrations
    method: POST
- name: ilert_webhook
  endpoint:
    path: /api/v1/events/prometheus/e6bcfcbf-a38f-462a-af9d-1687809b7594
    method: POST
    data_selector: receivers
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: data
    params: {}
- name: incidents
  endpoint:
    path: /api/v1/incidents
    method: GET
    data_selector: data
    params: {}
- name: alert_source
  endpoint:
    path: /alert_sources
    method: POST
    data_selector: alert_sources
    params: {}
- name: Webhook Receiver
  endpoint:
    path: /api/v1/events/prometheus/e6bcfcbf-a38f-462a-af9d-1687809b7594
    method: POST
    data_selector: alerts
    params: {}
- name: alert-source-1
  endpoint:
    path: alert-source-1-URL
    method: POST
    data_selector: webhook_configs
- name: alert-source-2
  endpoint:
    path: alert-source-2-URL
    method: POST
    data_selector: webhook_configs
- name: alert_source
  endpoint:
    path: /alert_sources
    method: POST
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
- name: incident
  endpoint:
    path: /api/incidents
    method: GET
    data_selector: data
- name: alert
  endpoint:
    path: /api/alerts
    method: GET
    data_selector: data
- name: alert_source
  endpoint:
    path: /alert_sources
    method: POST
    data_selector: data
- name: notification_template
  endpoint:
    path: /notification_templates
    method: POST
    data_selector: data
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: POST
    data_selector: data
- name: Alert
  endpoint:
    path: /alert-sources
    method: POST
- name: Notification
  endpoint:
    path: /notifications
    method: POST
- name: mqtt_events
  endpoint:
    path: /api/v1/mqtt/{your-key-here}
    method: POST
    data_selector: payload
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Case
  endpoint:
    path: /services/data/vXX.X/sobjects/Case
    method: POST
    data_selector: records
- name: alertsource
  endpoint:
    path: /api/v1/events/netdata/{API-KEY}
    method: POST
    data_selector: events
- name: alert_source
  endpoint:
    path: /alert/sources
    method: POST
- name: watch
  endpoint:
    path: /signals/watches
    method: POST
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: alerts
    params: {}
- name: ilert Integration
  endpoint:
    method: POST
    data_selector: event
    params: {}
- name: ilert_webhook
  endpoint:
    path: /path/to/ilert_webhook
    method: POST
    data_selector: data
    params: {}
- name: Webhook
  endpoint:
    path: /integrations/webhook
    method: POST
- name: alert_source
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alerts
    params: {}
- name: webhook
  endpoint:
    path: /api/webhooks
    method: POST
    data_selector: webhooks
    params: {}
- name: webhook_receiver
  endpoint:
    path: /api/v1/events/prometheus/e6bcfcbf-a38f-462a-af9d-1687809b7594
    method: POST
    data_selector: event
    params: {}
- name: sms_alert_source
  endpoint:
    path: /alert_sources/sms
    method: POST
- name: alert_source
  endpoint:
    path: /api/v1/events/prometheus/e6bcfcbf-a38f-462a-af9d-1687809b7594
    method: POST
    data_selector: ''
    params: {}
- name: alert-source-1
  endpoint:
    path: alert-source-1-URL
    method: POST
- name: alert-source-2
  endpoint:
    path: alert-source-2-URL
    method: POST
- name: alert
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: alert
- name: alert_source
  endpoint:
    path: /alert_sources
    method: POST
- name: search
  endpoint:
    path: /search
    method: POST
- name: webhook_alert
  endpoint:
    path: /api/v1/alerts
    method: POST
    data_selector: alert
    params: {}
- name: Alert Sources
  endpoint:
    path: /alert-sources
    method: GET
    data_selector: alerts
    params: {}
- name: Contact Group
  endpoint:
    path: /ContactGroup.php
    method: POST
    data_selector: contactGroups
    params: {}
- name: alert_source
  endpoint:
    path: /alert_sources
    method: POST
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: data
    params: {}
- name: incidents
  endpoint:
    path: /api/v1/incidents
    method: GET
    data_selector: data
    params: {}
- name: create_alert_action
  endpoint:
    method: POST
- name: resolve_alert_action
  endpoint:
    method: POST
- name: Case
  endpoint:
    path: /services/data/vXX.X/sobjects/Case
    method: POST
    data_selector: records
    params: {}
- name: alert_source
  endpoint:
    path: /alert-sources
    method: POST
    data_selector: alert_source
    params: {}
- name: notification_setting
  endpoint:
    path: /workspaces/{workspace_id}/settings/notifications
    method: POST
    data_selector: notification_setting
    params: {}
- name: Search Guard Signals alerts
  endpoint:
    path: /search-guard/signals
    method: POST
    data_selector: alerts
    params: {}
- name: notification_hook
  endpoint:
    path: /alerts/notification_hooks
    method: POST
    data_selector: data
    params: {}
- name: alert_source
  endpoint:
    path: /alert_sources
    method: POST
    data_selector: data
- name: ticket_trigger
  endpoint:
    path: /triggers
    method: POST
    data_selector: data
- name: alert_source
  endpoint:
    path: /api/alert_sources
    method: POST
    data_selector: alert_sources
- name: ilert_alert
  endpoint:
    path: /api/v2/tickets.json
    method: POST
    data_selector: ticket
    params: {}
- name: alert_source
  endpoint:
    path: /api/alert_sources
    method: POST
    data_selector: alert_source
- name: alert_definition
  endpoint:
    path: /api/alert_definitions
    method: POST
    data_selector: alert_definition
- name: alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: data
    params: {}
- name: incidents
  endpoint:
    path: /incidents
    method: GET
    data_selector: data
    params: {}
- name: tickets
  endpoint:
    path: /api/v1/tickets
    method: POST
    data_selector: ticket
    params: {}
- name: alert_source
  endpoint:
    path: /alert-sources
    method: POST
    data_selector: data
- name: contact_group
  endpoint:
    path: /ContactGroup.php
    method: POST
    data_selector: data
- name: incident
  endpoint:
    path: /api/v1/incidents
    method: POST
    data_selector: incident
    params: {}
- name: alert_action
  endpoint:
    path: /alert/actions
    method: POST
    data_selector: action
    params:
      type: Discord
- name: alert_actions
  endpoint:
    path: /alert/actions
    method: POST
    data_selector: data
    params: {}
- name: alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: alerts
- name: jira
  endpoint:
    path: /rest/api/2/issue
    method: POST
    data_selector: fields
- name: create_alert
  endpoint:
    method: POST
- name: resolve_alert
  endpoint:
    method: POST
- name: inbound_issue
  endpoint:
    path: /integrations/inbound-integrations/github/inbound-issue
    method: GET
    data_selector: records
- name: ilert_alert
  endpoint:
    path: /alerts
    method: POST
    data_selector: alert
- name: alert_source
  endpoint:
    path: /alert-sources
    method: POST
    data_selector: alert_source
    params:
      enable: 'true'
      url: generated_alert_source_url
      events: BUILD_STARTED; BUILD_FINISHED; BUILD_INTERRUPTED
- name: alert_sources
  endpoint:
    path: /alert-sources
    method: POST
    data_selector: alert_source
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: POST
    data_selector: notification
    params: {}
- name: alert_source
  endpoint:
    path: /alert_sources
    method: POST
    data_selector: alert_source
    params: {}
- name: alarm
  endpoint:
    path: /alarms
    method: POST
    data_selector: alarm
    params: {}
- name: alert
  endpoint:
    path: /api/alerts
    method: POST
    data_selector: ticket
    params: {}
- name: Uptime Kuma alert source
  endpoint:
    path: /alert-sources
    method: POST
    data_selector: alert_source
    params: {}
- name: webhook
  endpoint:
    path: /integrations/add
    method: POST
- name: alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: alerts
- name: ilert
  endpoint:
    path: <your alert source url here>
    method: POST
    data_selector: ''
    params: {}
- name: high-priority
  endpoint:
    path: <your high priority alert source url here>
    method: POST
    data_selector: ''
    params: {}
- name: low-priority
  endpoint:
    path: <your low priority alert source url here>
    method: POST
    data_selector: ''
    params: {}
- name: deployment_events
  endpoint:
    path: /api/deployment-events
    method: POST
    data_selector: integrationKey
    params: {}
- name: create_alert
  endpoint:
    path: /alert/create
    method: POST
    data_selector: alert
    params: {}
- name: argo_cd_pipeline
  endpoint:
    path: /services/data/v1.0/argo_cd_pipeline
    method: POST
    data_selector: app
    params: {}
- name: deployment_events
  endpoint:
    path: /Alert sources/Deployment events
    method: POST
- name: Webhook
  endpoint:
    path: /api/v2/targets
    method: POST
    data_selector: target
    params: {}
- name: Trigger
  endpoint:
    path: /api/v2/triggers
    method: POST
    data_selector: trigger
    params: {}
- name: deployment_event
  endpoint:
    path: /services/deployment/events
    method: POST
    data_selector: event
    params: {}
- name: deployment_events
  endpoint:
    path: /deployment/events
    method: POST
    data_selector: events
- name: alerts
  endpoint:
    path: /api/alerts
    method: GET
- name: incidents
  endpoint:
    path: /api/incidents
    method: GET
- name: users
  endpoint:
    path: /api/users
    method: GET
- name: Discord Webhook
  endpoint:
    path: /integrations/discord/webhook
    method: POST
    data_selector: data
    params: {}
- name: alert_action
  endpoint:
    path: /alert/actions
    method: POST
    data_selector: action
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: data
    params: {}
- name: incidents
  endpoint:
    path: /api/v1/incidents
    method: GET
    data_selector: data
    params: {}
- name: alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: data
- name: incidents
  endpoint:
    path: /incidents
    method: GET
    data_selector: data
- name: GitHub Issue
  endpoint:
    path: /repos/{owner}/{repo}/issues
    method: GET
    data_selector: issues
- name: incoming_webhook
  endpoint:
    path: /api/v4/hooks/incoming
    method: POST
- name: connector
  endpoint:
    path: /api/v4/connectors
    method: POST
- name: alert_action
  endpoint:
    path: /api/now/table/alert_action
    method: POST
    data_selector: result
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
    data_selector: data
- name: incidents
  endpoint:
    path: /api/v1/incidents
    method: GET
    data_selector: data
- name: tickets
  endpoint:
    path: /api/tickets
    method: POST
    data_selector: ticket
- name: alert
  endpoint:
    path: /alerts
    method: GET
- name: tickets
  endpoint:
    path: /tickets.json
    method: GET
    data_selector: tickets
- name: users
  endpoint:
    path: /users.json
    method: GET
    data_selector: users
- name: deployment_events
  endpoint:
    path: /api/deployment-events
    method: POST
    data_selector: integrationKey
    params: {}
- name: argo_cd_deployment_pipeline
  endpoint:
    path: /alert_sources/deployment_events
    method: POST
    data_selector: deployment_events
    params: {}
- name: deployment_events
  endpoint:
    path: /Alert sources/Deployment events
    method: POST
    data_selector: events
    params: {}
- name: deployment_event
  endpoint:
    path: /webhook
    method: POST
    data_selector: deployment_events
    params: {}
- name: alerts
  endpoint:
    path: /api/v1/alerts
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
notes:
- Access tokens are in JWT format
- Tokens may expire after 1 hour
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects may return nulls in deeply nested fields
- Uses OAuth2 with refresh token — requires setup of connected app in ilert
- ICL is a flexible tool that appears in many places as events or calls flow through
  the ilert platform.
- We are still collecting data together with our customers to identify fair usage
  limits for everybody.
- If you can't find the answer you're looking for, please contact our support team
  at support@ilert.com.
- The ITL enables you to customize and design alerts tailored to your specific use
  cases.
- Clients may retry their requests on 429 responses with a backoff timeout, 10-30
  seconds are suggested.
- XML is not supported in new url version-less resources as of 2021.
- OAuth2 authentication is required for all API calls.
- Uses OAuth2 for authentication
- The migration status is tracked on a per user basis.
- Contact and preference resources were created automatically for every user based
  on the current user.* fields.
- Some objects like Contact may return nulls in deeply nested fields
- Uptime monitors will be discontinued after June 30, 2024.
- Contact methods and notification preferences have been moved to their own resources.
- If using the old user schema, users' preferences will reset to the state of the
  user fields.
- Do not forget the import=true query parameter, otherwise you will send out confirmation
  notifications to your subscribers!
- We suggest sending a maximum of 100-250 subscribers per HTTP call.
- Rate limits apply to API calls.
- Existing customers will be able to continue using uptime monitoring until Jun 5,
  2024.
- The integrationKey field does not refer to a Bearer authentication token for the
  ilert API itself but instead to the integration key of the desired alert source.
- Uses API key for authentication.
- ilert's developer platform allows every user with Admin permissions to create custom
  apps limited to their account or shared apps that can be used by all other ilert
  accounts.
- Uses Basic Authentication
- ilert Apps use OAuth2 for user authorization
- The ilert JS client also ships with Typescript definitions.
- Never expose your client_secret, keep it safe.
- Uses API token for authentication
- Do not forget the Bearer prefix in the authorization header before your access token.
- Access tokens are short-lived and must be refreshed regularly.
- Access tokens are short lived and need to be refreshed regularly.
- Do not rely on a users email address without being sure it is verified, or your
  application might be open to attacks where the email address is mimiced on the authorization
  server.
- ilert provides a remote MCP server that lets your AI assistant securely call ilert
  tools using your API key.
- Scope the API key to the minimum necessary and rotate it regularly.
- Do not hard-code tokens in shared configs; prefer environment variables.
- You can find the import description at the bottom of each resource in the ilert
  Terraform provider’s documentation
- PKCE clients do not receive refresh tokens by default unless offline access is requested.
- Webhook events are sent as HTTP POST to the specified URL.
- Special characters in the username or password must be URL encoded.
- Access tokens are short lived and must be refreshed regularly.
- Email integration can be used for testing alerts
- Requires setup of connected app in api
- Ensure proper OAuth2 setup for authentication
- ilert shows the most relevant sections for your environment to keep your attention
  focused.
- You can find the import description at the bottom of each resource in the ilert
  Terraform provider’s documentation.
- Users need to add notification contacts and activate support channels to receive
  notifications.
- Incoming calls originating from call routing numbers are not muted.
- Advised to implement schedule overrides to manage cases.
- Requires API key for access
- HTTP Basic Auth is supported. The username and password must be specified in the
  URL.
- For testing, use Email or Event API integration.
- Message field supports markdown
- Ensure to replace ${YOUR-APIKEY} with your actual API key
- Integration requires OAuth2 setup with ilert.
- Until 2020, notifications were not aggregated.
- From 2020 to December 2023, all notifications were automatically aggregated in a
  3-minute window, per target per alert source, that started with each first notification.
- Specific suppressions and deduplications as listed in this doc have been in use
  since December 11, 2023.
- Uses OAuth2
- Users must add notification contacts and activate channels before receiving notifications.
- Notification channels include Email, SMS, Phone calls, iOS and Android push notifications,
  WhatsApp, and Telegram.
- ilert's inbound architecture is highly distributed and spread across different data
  centers and regions.
- ilert uses flexible serverless infrastructures to provide webhooks in regions around
  the world.
- Uses OAuth2 with refresh token — requires setup of connected app in ilert.
- Define support hours to control when alerts are delivered.
- Holidays feature allows handling exceptions without adjusting on-call rotations.
- By default China voice calls are not enabled, please contact our support if you
  need to alert Chinese devices from your account
- SMS alerting for China is currently not possible
- Call delivery to China will be made on a best-effort basis
- If a high number of unique alerts are triggering voice alerts for your Chinese number
  in a single hour, there is a chance that calls will be skipped to prevent blocking
  (this is logged in the alerts timeline), we suggest to always add a secondary notification
  preference a long voice alerts for Chinese users
- Currently DTMF feedback (e.g. pressing 1 to accept) is not supported in calls
- We suggest installing the ilert mobile app as it keeps all of our outbound numbers
  in sync with your devices contacts
- Chinese call notifications do not support direct alert responses e.g. pressing a
  key to accept or resolve, we suggest using the mobile app for this
- An escalation policy must have at least one escalation rule.
- Maximum number of targets per escalation level is 5.
- Delayed escalation can be set up to 60 minutes.
- Only one user per schedule can be on-call at a time.
- Schedules are used in escalation policies. The members of a schedule will only be
  notified about incidents, if the schedule is part of an escalation policy.
- To preserve the history of a schedule, any changes to schedules apply to current
  and future dates only. Shifts that are in the past cannot be deleted or modified.
- Overrides can be added by users with Responder role privileges. A responder can
  only add themselves as an override.
- Ensure to replace ${YOUR-APIKEY} with your actual API key.
- Users will rotate in the order in which they are listed.
- Restricting your on-call coverage will result in gaps in your schedule.
- Static schedules do not support recurring shifts.
- Shifts cannot be created retroactively.
- You can create multiple integrationKey/integrationUrls of the same integration type
  for multiple event flows.
- Coverage requests are mobile-only, meaning requests can only be created, viewed,
  and managed in the ilert mobile app.
- Admins retain the ability to directly override or reassign shifts, which bypasses
  the request/accept workflow.
- Admin permission required to set up the integration in ilert
- You may need to re-authorize the bot for your Slack workspace in case new features
  of the bot require additional permissions e.g. alert actions or automatic user mapping
- It is possible to temporarily whitelist the IP blocks used, but it is not recommended
  to do so.
- Alert sources of private teams can only be added via ilert's web interface.
- As long as the channel is not detached the alert will receive real time updates
  in the alert thread.
- If your ilert bot for Microsoft Teams bot has no permission, please reauthorize
  your bot. You need to have admin permissions both in ilert and Slack.
- The maximum number of targets per escalation level is 5.
- You can delay escalation by a set period of time (up to 60 minutes).
- Users must have the Slack app installed to create alerts from Slack.
- If unauthorized users try to create alerts, ensure the channel is set in a Slack
  alert source.
- Shifts that are in the past cannot be deleted or modified.
- Requires setup of connected Slack app.
- Users can rotate in a specified order.
- On-call coverage can be restricted to specific hours.
- The use of these scopes ensures that our bot can interact effectively with Microsoft
  Teams and its users, providing functionalities that enhance productivity and collaboration
  within the platform. The scopes are managed carefully to balance functionality with
  security and privacy concerns.
- Admin permission required to install the ilert bot application.
- Requires setup of connected app in Microsoft Teams.
- Admin permission required to install the ilert bot application in Microsoft Teams
- Admin permission required to set up the integration with ilert
- Only one Slack Workspace can be linked to an ilert account
- The ilert bot has no permission to create a channel. If your ilert bot for Microsoft
  Teams bot has no permission. Please reauthorize your bot.
- Users can create alerts by mentioning the ilert bot with @iLert alert
- User permissions in ilert will determine visible alert sources and escalation policies
- Requires setup of connected app in ilert
- Some endpoints may have rate limits
- Requires the installation of the ilert bot application in Microsoft Teams.
- Requires setup of Slack app for authentication
- The ilert bot has no permission to create a channel. Please reauthorize your bot.
  You need to have admin permissions both in ilert and Slack.
- Any Slack user with an ilert account can create an alert from any channel by invoking
  the `/il-alert` slash command.
- If an unauthorized user tries to create a new alert from Slack, the ilert bot for
  Slack requires the channel to be set in a Slack alert source in ilert.
- User permissions in ilert are considered for on-call lookups.
- If you are using a private (including audience-specific) status page, your logotype,
  name of the page, and favicon will also be visible on the login page of your status
  page.
- Changes to your status page will not propagate automatically to your pages. You
  need to update the code snippet in your target for any changes to take effect.
- Only authenticated users can view ilert's private status pages.
- Stakeholder license is sufficient to view status pages.
- Uses OAuth2 with refresh token — requires setup of connected app in Zabbix
- Some objects may return additional nested fields
- Audience-specific status pages are private and accessible only to authenticated
  users.
- Doesn't support authentication via IP or email whitelists.
- The use of these scopes ensures that our bot can interact effectively with Microsoft
  Teams and its users, providing functionalities that enhance productivity and collaboration
  within the platform.
- A metric can store maximum 1 data point every 30 seconds.
- Each submitted data point is truncated to its nearest 30s interval.
- Admin permission required to install the ilert bot application
- Admin permission required to set up the integration
- Integration allows for Microsoft Teams Meeting functionality.
- Ensure correct OAuth scopes are set for data access
- Metrics in ilert are not dimensional. Therefore, only Datadog metrics without grouping
  can be imported.
- We recommend that you secure your Prometheus instance by using an authentication
  method.
- The ilert bot has no permission to create a channel.
- Users must mention the ilert bot with '@iLert alert' to create an alert.
- Permissions in ilert will determine visibility of alert sources and escalation policies.
- ilert AI for alert grouping does not share data with any third-parties in its AI
  processing.
- Users need an ilert account to use on-call lookup
- Service status changes on the service itself will not notify subscribers about the
  change.
- Knowledge enrichment is optional but helps the AI respond with real-time service
  data.
- AI voice agent supports English and German.
- Incidents are designed for communicating with non-technical users.
- Alerts are linked with incidents to show contributions.
- ilert Free plan includes only a limited version of the public status page.
- To isolate customers from each other, create a team for every customer and make
  the team private.
- API rate limits may apply.
- Requires OAuth2 authentication with refresh token.
- Recommended to configure alert grouping for alert sources
- To adjust access, navigate to Status Pages -> Authentication, and select one or
  several authentication methods.
- Phone number availability is subject to regulation
- Due to country-specific regulations, phone number provisioning may require identity
  documentation and location validation.
- Call Routing 2.0 introduces a new visual call flow builder that allows you to visually
  construct custom call flows.
- Legacy version of call routing feature is available to customers who purchased the
  add-on before May 2024.
- Escalation timeouts in escalation policies are skipped for routing options.
- Does not support authentication via IP or email whitelists.
- Submitting data points with a higher resolution will result in the last data point
  being the only one stored.
- Ensure API key is properly configured in the settings.
- You cannot simply use any audio file format, because there is a high chance the
  file that you are using is not meant to be transcoded for the telephone network,
  this might result in a poor audio quality or even static noises during playback.
- The best results are achieved if the uploaded file is already in a lossless audio
  format with a low bitrate e.g. 16 or better 8 bit.
- Stakeholders have view access to shared (team membership) or subscribed incidents,
  services and status pages.
- Requires API key for authentication
- ilert AI for alert grouping does not share data with any third-parties in its AI
  processing
- You need to have sent a few alerts to the alert source to see any grouping preview
  results
- Single sign-on (SSO) integration options available.
- Only a single domain is supported.
- ilert AI assists in generating incident communications swiftly and accurately.
- Ensure the correct scopes are set for OAuth2.
- Generated documents may require manual fine-tuning before sharing
- SSO with SAML requires your account to be on a Premium or Enterprise Plan.
- Auto-provisioning new users will require your account to have enough seats booked.
- Requires OAuth2 setup
- SSO with SAML requires your account to be on a Premium or Enterprise Plan
- To enable auto-provisioning, check the box for Provision new users on first SSO
  login
- You can disable the login for username and password combinations
- Auto provisioning users & teams feature available.
- Configure alert grouping for better monitoring
- ilert AI can help with alert grouping
- Auto provision will only execute if the user does not already exist.
- Call Routing 2.0 provides a more adaptable, feature-rich platform for call flow
  management.
- Legacy call routing feature is only available to customers who purchased the call
  routing add-on before May 2024.
- Automatic type must be chosen for webhook
- Webhook URL must be provided for the third party system
- You may upload audio files in MP3 or WAV format.
- The best results are achieved with lossless audio format with low bitrate (16 or
  8 bit).
- Uploaded files are transcoded for telephone networks.
- You must activate each channel (via a verification code) before you can use it in
  any rule.
- Users may not create or modify teams. But an Admin may grant a User, as a member
  of a team, the right to modify a certain team.
- Uses OAuth2 for authentication.
- Only high priority alerts will be delivered as critical alerts.
- Alerts with low priority will use low priority notification settings.
- ilert ensures critical alerts notifications always heard and disables DND mode.
- Only a single G Suite domain is supported.
- Most tools have dedicated integration pages with step-by-step setup instructions.
- Useful for tools that don't have webhook support.
- Requires setup of OAuth2 authentication in ilert
- Some API endpoints may have rate limits
- 'Make sure that webhooks for following events have been created: `problem.update`,
  `request.update`.'
- Ensure the correct OAuth scopes are set for access.
- Ansible Automation Platform notification template is not compatible with ilert's
  resolve event.
- ilert will alert the on-call person through their preferred channel, including SMS,
  phone calls, push notifications and Slack.
- ilert also lets you define alerting rules based on support hours and delay alerts
  until your support hours start.
- Auto-provisioning users on first SSO login requires enough seats booked
- Auto provisioning users & teams
- Yes, as soon as the Alert transitions to the status 'OK', corresponding alerts in
  ilert will be resolved automatically.
- An API key and/or webhook URL will be generated that you will need later in this
  guide.
- The subscription is automatically confirmed by ilert when it is created.
- No, but you can use the eventType custom attribute to resolve an incident in specified
  incidentKey.
- Alerts in ilert will not be resolved automatically, but you can use the eventType
  custom attribute to resolve an incident in specified incidentKey.
- Ensure Subscription ID is not in PendingConfirmation state.
- Will alerts in ilert be resolved automatically? Yes, as soon as the Personal Health
  Issue is solved in AWS, the alert in ilert will be closed.
- Can I link AWS Personal Health Dashboard to multiple alert sources in ilert? Yes,
  create an SNS topic subscription in AWS for each alert source.
- Ensure that the Integration Vendor is selected properly.
- Will alerts in ilert be resolved automatically?
- Can I connect Autotask with multiple alert sources from ilert?
- Can I customize the alert messages?
- If you wish to setup a bidirectional (two-way-sync) alert flow where Auvik alerts
  are resolved as soon as incidents in ilert are resolved, please check the bidirectional
  checkbox and fill in your Auvik API user credentials.
- Yes, as soon as Azure DevOps sends a notification with the type 'succeeded', corresponding
  alerts in ilert will be resolved automatically.
- Will alerts in ilert be resolved automatically when a test or alert in Catchpoint
  is resolved.
- Send alert notifications when a check recovers must be enabled in the alert channel
  settings in Checkly.
- Send alert notifications when an SSL certificate is due to expire in x days must
  be enabled in the alert channel settings in Checkly.
- Uses push notification configuration for Do Not Disturb mode.
- Android is limited in reverting sound/DND settings to previous states.
- Yes, as soon as Cisco ThousandEyes sends a notification with '1' status, corresponding
  alerts in ilert will be resolved automatically.
- Cloudflare is not sent resolution notifications.
- Alerts in ilert are automatically resolved when an event's status is set to ENDED
  in ClusterControl.
- Requires an API key for authentication
- Ensure proper permissions are granted to the API key
- Requires setup of OAuth token in 4me
- The API user must have permissions to create callbacks and access tickets.
- 'Make sure that webhooks for following events have been created: problem.update,
  request.update. As soon as the status of a problem or request is solved in 4me,
  the corresponding alert in ilert will be resolved.'
- 'Make sure that webhooks for following events have been created: problem.update,
  request.update. As soon as the status of a problem or request is accepted in 4me,
  the corresponding alert in ilert will be accepted.'
- The Ansible Automation Platform notification template is not compatible with ilert's
  resolve event.
- Yes, as soon as the condition of an alarm is OK again in CloudWatch, the alert in
  ilert will be fixed.
- Yes, create an SNS topic in CloudWatch for each alert source. You can then select
  for each alert in CloudWatch which topic you want to use for alerting.
- An API key and / or webhook URL will be generated that you will need later in this
  guide.
- An API key and/or webhook URL will be generated for use.
- Yes, as soon as a Cronitor sends an alert event with field type value set to recovery,
  corresponding alert in ilert will be resolved.
- One Request Per Event
- An API key and/or webhook URL will be generated.
- Yes, as soon as a Domotz sends an alert event with field data.value set to ONLINE
  or device.status to UP, corresponding alert in ilert will be resolved.
- You may click **Do not group alerts** for now and change it later.
- You can create arbitrary mappings between your applications in Dynatrace and alert
  sources in ilert.
- Will alerts in ilert be resolved automatically? No, but you can use the eventType
  custom attribute to resolve an incident in specified incidentKey.
- Ensure Subscription ID is not in PendingConfirmation state
- Automatically creates alerts in ilert from problems in AWS Personal Health Dashboard
- Subscription is automatically confirmed by ilert when it is created
- Uses email integration to create alerts based on incoming emails.
- Fleet is not compatible with ilert's resolve event.
- AWS Security Hub generates finding events that are relayed by AWS EventBridge.
- Will alerts in ilert be resolved automatically when status.itemValue is closed.
- Will alerts in ilert be acknowledged automatically when status.itemValue is investigating.
- Ensure that the API key and/or webhook URL generated is saved for future use.
- Will alerts in ilert be resolved automatically? Yes, as soon as an Autotask Ticket
  is completed, the alert in ilert will be resolved automatically.
- Can I connect Autotask with multiple alert sources from ilert? Yes, simply create
  more Extension Callouts in Autotask.
- Can I customize the alert messages? No.
- Will alerts in ilert be resolved automatically when Azure DevOps sends a notification
  with the type 'succeeded'.
- Will alerts in ilert be resolved automatically? Yes, as soon as the state of an
  alert in Google Cloud Monitoring is RESOLVED, the associated alert in ilert is resolved.
- Automatically resolves alerts in ilert when a check in Checkly recovers.
- Will alerts in ilert be resolved automatically? Yes, as soon as the state of an
  alert in Google Security Command Center is RESOLVED, the associated alert in ilert
  is resolved.
- Webhook URL generated in ilert is required for setup
- As soon as Cisco ThousandEyes sends a notification with '1' status, corresponding
  alerts in ilert will be resolved automatically.
- Ensure proper API permissions are set for integration
- API key is needed for authentication.
- Uses JSON payload for ticket integration
- Uses Cortex for alerting and requires integration with Prometheus Alertmanager
- API key is generated during the setup in ilert.
- Consul-Alerts only supports sending alerts to a single alert source.
- API key and/or webhook URL will be generated after creating an alert source
- Alerts in ilert will be resolved automatically when a Cronitor sends an alert event
  with field type value set to recovery.
- Yes, as soon as Dash0 sends a notification with the type "alert.resolved", corresponding
  alerts in ilert will be resolved automatically.
- The integration is now set up with an API key and/or webhook URL generated.
- Webhook URL must be generated from the Dead Man's Snitch alert source.
- IBM Cloud Functions is deprecated. Existing Functions entities such as actions,
  triggers, or sequences will continue to run.
- The plugin processes the notification types PROBLEM, ACKNOWLEDGEMENT and RECOVERY.
  The notification types FLAPPING* and DOWNTIME* are ignored.
- There are no events lost. Because the plugin stores the events locally in a temporary
  directory (by default in /tmp/ilert-icinga) and tries to send them to ilert every
  minute.
- Alerts in ilert will be resolved automatically when Ekara sends a notification with
  alertStatus 'End'.
- Ensure to set the correct API key in the Authorization header.
- Automatically resolve Alerts with Emails
- Uses email integration for alerts — requires setup of email alert sources in ilert
- Event filter allows ignoring emails based on content properties such as subject,
  body, cc, bcc, and from
- An API key and/or webhook URL will be generated after setting up the alert source.
- Will alerts in ilert be resolved automatically? No, unfortunately Fleet is not compatible
  with ilert's resolve event.
- API key and/or webhook URL will be generated.
- The configuration connector status will now be displayed.
- Yes, as soon as a FortiSOAR sends an alert event with field `status.itemValue` value
  set to `closed`, corresponding alert in ilert will be resolved.
- Yes, as soon as a FortiSOAR sends an alert event with field `status.itemValue` value
  set to `investigating`, corresponding alert in ilert will be accepted.
- You need admin permissions to manage Jira webhooks.
- Alerts are resolved with the resolution event of a Jira ticket.
- API key and/or webhook URL will be generated that you will need later in this guide.
- Make sure you have Devices added in JumpCloud dashboard
- Replace API_KEY and URL received from ilert in the command
- 'Messages need to be in the format of the ilert event API schema; at least: {apiKey,
  eventType, summary}'
- Your GitLab integration is set up.
- Your Kapacitor alerts will now create alerts in ilert.
- You can link Google Cloud Monitoring to multiple alert sources in ilert.
- Each ilert alert source is connected to a Kentix AlarmManager Webhook
- Important to choose Alarmstate change as alarm assignment
- Will alerts in ilert be resolved automatically when state is RESOLVED in Google
  Security Command Center.
- An API key and/or webhook URL will be generated on the final page.
- In ilert, API key and/or webhook URL will be generated that you will need later.
- Webhook requires setup of API key and/or webhook URL in ilert.
- Your Kubernetes alerts will now create alerts in ilert.
- Yes, as soon as LibreNMS sends an event with the eventType of 'RESOLVE', the corresponding
  alert in ilert will be resolved.
- Yes, as soon as LibreNMS sends an event with the eventType of 'ACCEPT', the corresponding
  alert in ilert will be resolved.
- Will automatically resolve ilert alerts once the ticket is closed or resolved.
- Integrating Livewatch with ilert via webhooks enables you to automatically escalate
  alerts to your on-call team, trigger incident workflows, and ensure faster resolution
  times.
- This integration centralizes alerts, reduces missed notifications, and improves
  overall service reliability.
- The next page shows additional settings, such as customer alert templates or notification
  priority.
- You can use an example prometheus setup to test the Loki integration
- No, unfortunately Mezmo is not compatible with ilert's resolve event.
- Requires setup of API key in ilert
- Mimir integration allows sending Prometheus-compatible alerts into ilert.
- Requires setup of alert sources in ilert.
- IBM Cloud Functions is deprecated. Existing Functions entities such as actions,
  triggers, or sequences will continue to run, but as of 28 December 2023, you can’t
  create new Functions entities.
- Webhook Settings in Integration must be configured
- Make sure that alerts send to the Webhook
- The plugin processes the notification types PROBLEM, ACKNOWLEDGEMENT and RECOVERY.
- There are no events lost. Because the plugin stores the events locally in a temporary
  directory and tries to send them to ilert every minute.
- Webhook URL must be saved and the payload matches the specified format.
- API key must be included in every request.
- Will alerts in ilert be resolved automatically if you created a threshold and a
  notification rule for the 'OK' status.
- Plugin processes notification types PROBLEM, ACKNOWLEDGEMENT, and RECOVERY. FLAPPING*
  and DOWNTIME* are ignored.
- Events won't be lost; they are cached locally and sent when the connection is available.
- Congratulations you have successfully connected N-central with ilert.
- Will alerts in ilert be resolved automatically? Yes, as soon as Netdata sends a
  notification with a severity value of clear or resolved, the alert in ilert will
  be resolved automatically.
- On the final page, an API key and / or webhook URL will be generated that you will
  need later in this guide.
- Webhooks must not exclude the request body.
- 'For more information about the webhook on Oh Dear please refer here: https://ohdear.app/docs/integrations/webhooks/introduction'
- API key and/or webhook URL will be generated during setup.
- 'Your messages need to be in the format of the ilert event API schema; at least:
  {apiKey, eventType, summary}'
- If you don't want to provide the apiKey in every message, you can overwrite with
  the --event_key 'il1api123...' argument.
- Can I connect Kapacitor with multiple alert sources from ilert?
- API requires authentication setup through the admin panel.
- ilert API Key must be kept secure
- It is important to choose Alarmstate change as alarm assignment otherwise the connection
  wont work properly.
- Panther is not compatible with ilert's resolve event.
- An API key and/or webhook URL will be generated after creating the alert source.
- Yes, as soon as a webhook integration is sending an RESOLVE event, the alert in
  ilert will be fixed.
- Will alerts in ilert be acknowledged automatically?
- Alerts in ilert will be resolved automatically when the Monitor in Postman is Healthy
  again.
- Uses Loki for log-based triggers.
- Uses a Webhook URL for alert notifications
- API key and/or webhook URL will be generated after the alert source is created.
- Uses OAuth2 authentication
- The next page show additional settings such as customer alert templates or notification
  prioritiy.
- Yes, as soon as the state of a Monitor in RapidSpike is on 'passing' again, corresponding
  alert in ilert will be resolved.
- Alerts are forwarded to on-call engineers via ilert.
- Your Raygun crash reports will now create alerts in ilert.
- Webhook URL must match the specified payload format.
- Yes, as soon as Rollbar is sending a notification with the event_name field set
  to resolved_item, corresponding alert in ilert will be resolved.
- If you don't want to provide the apiKey in every message, you can overwrite it with
  the --event_key argument.
- Python 2.x is EOL (end of life) we suggest to use Python >= 3.7
- The domain needs to be allowlisted in Salesforce.
- You may click Do not group alerts for now and change it later.
- Alerts in ilert are automatically resolved when resolved in Samsara.
- An API key will be generated after creating an alert source.
- Search Guard watch(es) will not fire resolve events for alerts.
- You can connect Search Guard with multiple alert sources from ilert by creating
  more watches.
- Yes, as soon as an alert has been completed in Sematext, the associated alert in
  ilert will be resolved automatically.
- Yes, simply add more notification hooks in Sematext.
- Yes, as soon as an alert has been resolved or ignored in Sentry, the associated
  alert in ilert will be resolved automatically.
- Can I connect Sentry with multiple alert sources from ilert?
- Yes, simply add more alert rules in Sentry.
- Yes, as soon as a module has been recovered, the alert in ilert will be resolved
  automatically.
- Will alerts in ilert be accepted automatically?
- No, unfortunately Panther is not compatible with ilert's resolve event.
- ilert's ServiceNow integration allows you to easily configure advanced settings
  such as dynamic escalation policy routing and priority mapping.
- In the bidirectional setup, ilert will try to map users automatically based on their
  email address.
- Yes, as soon as the state of a check in Pingdom is OK again, the alert in ilert
  will be fixed.
- Yes, create a webhook in Pingdom per alert source. You can then choose for each
  check in Pingdom which webhook you want to use for alerting.
- Will alerts in ilert be resolved automatically? Yes, as soon as an alert with 'ok'
  has been resolved in SignalFx, the associated alert in ilert will be resolved automatically.
- Can I connect SignalFx with multiple alert sources from ilert? Yes, simply add more
  recipients in SignalFx alert rule.
- Can I connect single alert source with multiple SignalFx detectors? Yes, simply
  use the alert source URL in the recipients setting for each SignalFx detector.
- Can I create a webhook template for the recipient setting so I don't have to copy
  the alert source URL every time for each detector? Yes, use the webhook integration
  template in the Data Setup -> Integrations -> Webhook page
- Manually Close Incidents When My Monitor Status Changes to Up must be set to Yes
  for alert resolution.
- Uses a Webhook for alerts from Prometheus to ilert
- Requires an active ilert account with access to the Scale plan or higher.
- The SMS alert source add-on must be purchased and active.
- ilert's Prometheus integration supports dynamic escalation policy routing with the
  help of routing keys.
- For custom labels to be accepted they must be part of the alert labels of an alert
  in status firing.
- Splunk alerts do not fire resolve events
- Webhook URL generated in ilert is needed for StatusCake configuration.
- An API key and/or webhook URL will be generated that you will need later.
- Sumo Logic's notification is not compatible with ilert's resolve event.
- Requires setup of OAuth2 for authentication
- Will alerts in ilert be resolved automatically? Yes, as soon as an alert has been
  completed in Raygun, the associated alert in ilert will be resolved automatically.
- Can I connect Raygun with multiple alert sources from ilert? No
- No, unfortunately TeamCity is not compatible with ilert's resolve event.
- Make sure to replace API_KEY and URL in the trigger.
- Alerts in ilert are resolved automatically once the alert is completed in Terraform
  Cloud
- Multiple alert sources can be connected from ilert
- Yes, as soon as an alert is resolved in Samsara, the corresponding Alert is automatically
  resolved in ilert.
- Twilio Alarms is not compatible with ilert's resolve event.
- Webhook URL will be generated during the setup process.
- An API key and/or webhook URL will be generated during setup.
- Yes, as soon as the monitor in Uptime Kuma sends an "OK" notification, the associated
  alert is automatically resolved in ilert.
- Will alerts in ilert be resolved automatically? Yes, as soon as an alert has been
  resolved or ignored in Sentry, the associated alert in ilert will be resolved automatically.
- Alerts are automatically resolved in ilert when marked 'ok' in UptimeRobot.
- Multiple webhooks can be created in UptimeRobot for linking to different alert sources
  in ilert.
- Will alerts in ilert be resolved automatically? Yes
- Will alerts in ilert be accepted automatically? No, unfortunately Server Density's
  notification is not compatible with ilert's accepted event.
- Alerts in ilert will be resolved automatically when Alertmanager sends a RESOLVE
  event.
- Will alerts in ilert be resolved automatically? Yes, as soon as the status of a
  ServerGuard24 check is 'OK' again, the corresponding alert in ilert will be resolved.
- When saving the ServiceNow alert source with the bidirectional setting enabled,
  it will automatically create an outbound connector.
- Remember to leave the Caller ID field in the alert action empty for automated user
  mapping to work properly.
- Can I create a webhook template for the recipient setting so I don't have to copy
  the alert source URL every time for each detector? Yes, use the webhook integration
  template in the Data Setup -> Integrations -> Webhook page.
- Manually Close Incidents When My Monitor Status Changes to Up option is set to Yes
  is mandatory for alert resolution coming from Site24x7.
- You need to create an API key in ilert to connect with Zapier.
- An active ilert account with access to the Scale plan or higher is required.
- Splunk alerts do not fire resolve events.
- Ensure to choose 'iLert' as Integration Vendor in Autotask when setting up your
  API user.
- Webhook URL is generated during alert source setup.
- 'Yes, the following updates to an alert are currently being released: Escalations,
  Manual Assignments, Actions.'
- Yes, you can choose which updates to an alert will be published in Webex.
- Admin permission required
- API key and/or webhook URL will be generated during setup
- You can link multiple Discord Accounts to an ilert account.
- Updates to an alert are published on the Discord Chat channel.
- Choose Email as connection type for alert action.
- Automatically triggered alert actions will send emails on alert events.
- Can I connect Sysdig with multiple alert sources from ilert?
- Ensure to generate an API key from the ilert dashboard.
- Can I connect TOPdesk with multiple alert sources from ilert?
- API token must be included in the header for all requests
- Ensure technical events are visible to developers and tracked within their existing
  workflows.
- You must have admin rights in ilert to set up this integration.
- Finished! Your Terraform Cloud run problems will now create alerts in ilert.
- Are updates to an alert published in the ServiceNow Alert? Yes, the status of the
  ilert Alert is shown in the title of the ServiceNow ticket, eg `RESOLVED` Host compute.infra
  is `DOWN`.
- Can I choose which updates to an alert are published in ServiceNow? Currently not.
  If you wish, we look forward to your feedback via chat or email.
- A valid phone number contact in the notification settings in ilert is required.
- Twilio Errors is not compatible with ilert's resolve event.
- Users must create a dedicated API user in TOPdesk for integration.
- Permissions for the API user need to be configured in TOPdesk.
- An API key and/or webhook URL will be generated after creating an alert source.
- An agent token has a group scope
- If you want to use a group that the current user is not a member of, you need to
  create a token with the admin scope for all groups.
- Webhook URL will be generated after creating the alert source
- Alerts are automatically resolved in ilert when the alert is resolved with 'ok'
  in UptimeRobot.
- You can link UptimeRobot to multiple alert sources in ilert by creating a webhook
  for each alert source.
- Alertmanager must be configured to inform ilert regarding alerts.
- You could also split alert to high and low priority by creating two alert sources
  accordingly.
- To set up the integration, the Zendesk user must have agent permissions
- Zammad comments will automatically be attached to ilert alerts.
- An API key will be generated that you will need for authentication.
- Requires setup of integrationKey for deployment events
- A pipeline is required, which will also generate a new integrationKey required to
  route deployment events when they occur.
- Creates alerts in ilert from Zendesk tickets.
- Webhook URL is generated after setting up the alert source in ilert.
- Release-based deployment events are recommended for easier setup and correlation.
- Ensure that you have correctly chosen 'iLert' as Integration Vendor in Autotask
  when setting up your API user.
- ilert's developer platform allows every user with Admin permissions to create custom
  apps limited to their account or shared apps.
- Admin permission required to set up the integration.
- You can link multiple DingTalk Accounts to an ilert account.
- Updates to an alert are published on the DingTalk group.
- Choose Email as connection type for alert actions
- You can set the connection to trigger automatically or manually
- Requires setup of OAuth2 authentication.
- Ensure to use the proper API token for authentication
- Rate limits apply to API calls
- Requires authentication via GitHub OAuth2
- Ensure that the API key has sufficient permissions to access the required resources.
- Currently not possible to choose which updates should be published to an alert in
  Github.
- You must have admin rights in ilert.
- Select Mattermost as Type when adding the connector.
- Currently not possible to choose which updates to an alert are published in ServiceNow.
- Some endpoints may require additional permissions for access.
- Ensure that permisson group is linked for API user.
- Every time you create a Zap with an ilert trigger, the Zapier connector in ilert
  is created automatically for the alert source you selected in the trigger.
- Ensure API token is enabled in Zendesk settings.
- Rate limiting applies - be mindful of request limits.
- You won't be able to see the API token again in Zendesk after saving
- Only the integrationKey and summary fields are required. All others are optional.
- Requires creation of an integrationKey in ilert for routing deployment events.
- Webhook URL needs to be configured in the notification controllers configmap.
- Recommended to use Release based deployment events for setup.
- Release-based deployment events are the easiest to set up and provide the most founded
  correlations.
- Push-based deployment events can become very spammy, especially when used with Github
  account-wide webhooks.
- ilert is a complete incident management platform that helps teams reduce response
  times to critical incidents by providing reliable alerting, automatic escalations,
  on-call schedules, and incident communication features.
- ilert's developer platform allows every user with Admin permissions to create custom
  apps.
errors:
- '401 Unauthorized: Check token expiration or user permissions'
- '401 Unauthorized: Check your API key and permissions'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Invalid credentials'
- '404 Not Found: Resource does not exist'
- '429 Too Many Requests: Rate limit exceeded'
- '429 Too many requests: Exceeding a limit will cause a client to be rejected with
  429 responses until a new window starts.'
- '401 Unauthorized: Check your token and permissions.'
- '403 Forbidden: You do not have access to this resource.'
- '404 Not Found: Endpoint does not exist'
- No action required unless using the API or Terraform to manage user notification
  preferences.
- '429 Too many requests: Exceeding a limit will cause a client to be rejected until
  a new window starts.'
- '401 Unauthorized: Check your authentication credentials.'
- Removing a confirmed subscriber will send an unsubscription notification to the
  target.
- '401 Unauthorized: Check credentials.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Invalid credentials provided'
- '401 Unauthorized: Recheck your integration key'
- '401 Unauthorized: Check API token.'
- 'invalid_grant: Provided code is unknown'
- '401 Unauthorized: Check API token validity'
- '401 Unauthorized: Check your API key or OAuth token.'
- '404 Not Found: The requested resource does not exist.'
- 'invalid_request: 400'
- 'invalid_scope: 400'
- 'access_denied: 400'
- 'server_error: 500'
- 'unsupported_grant_type: 400'
- 'invalid_grant: 401'
- '401/403 Unauthorized – verify the Authorization: Bearer <token> header and that
  the API key is active.'
- '401 HTTP status code: Indicates token expiration or invalid token.'
- '401 Unauthorized: Verify API key is correct and active'
- '403 Forbidden: Check API key permissions'
- '429 Too Many Requests: Implement exponential backoff'
- '401 Unauthorized: Check token validity'
- '404 Not Found: Verify endpoint URL'
- '401 Unauthorized: Check API key'
- '400 Bad Request: Verify your request payload.'
- '401 Unauthorized: Check your integration key.'
- Authentication errors
- '401 Unauthorized: Check your OAuth token.'
- 'Unauthorized: No Slack alert source configured for this channel.'
- 'GROUP_READ_WRITE_ALL: The ilert app needs the Group.ReadWrite.All scope to read
  all team groups including legacy Skype groups.'
- 'CHANNEL_READ_BASIC_ALL: The ilert app needs the Channel.ReadBasic.All scope to
  read team groups.'
- 'Unauthorized: No Microsoft Teams alert source configured for this channel'
- 'LIMIT_EXCEEDED: Reduce the number of requests'
- 'NOT_FOUND: Check the endpoint or resource'
- '401 Unauthorized: Verify token validity'
- Permission issues may arise for private channels.
- There is no Slack alert source configured for this channel in ilert, which is required
  to enable alert creation for Slack users without an ilert account.
- If your ilert bot for Slack has no permission. Please reauthorize your bot.
- '404 Not Found: Verify the endpoint URL'
- 'The ilert app does not see all team groups of my Microsoft Teams account: The ilert
  app needs the Group.ReadWrite.All and Team.ReadBasic.All scopes'
- 'The ilert app does not see all channels of my team: The ilert app needs the Channel.ReadBasic.All
  scope'
- '401 Unauthorized: Check OAuth token validity and scopes'
- '429 Too Many Requests: Consider implementing exponential backoff'
- The ilert bot has no permission to create a channel.
- 'Unauthorized: No Microsoft Teams alert source configured for the channel.'
- '400 Bad Request: Check for invalid parameters.'
- '401 Unauthorized: Verify your authentication credentials.'
- '429 Too Many Requests: You have exceeded your rate limit.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Ensure the API key is valid.'
- '401 Unauthorized: Check your credentials and token.'
- '401 Unauthorized: Check your credentials'
- '403 Forbidden: You do not have permission to access this resource'
- '401 Unauthorized: Check your access token and permissions'
- '429 Too Many Requests: Rate limit exceeded, try again later'
- '401 Unauthorized: Check your OAuth token and scopes.'
- '403 Forbidden: Ensure your account has the required permissions.'
- '401 Unauthorized: Verify API key and webhook URL.'
- '400: Bad request - occurs for invalid ticket statuses'
- '401 Unauthorized: Check your OAuth token'
- '404 Not Found: Verify the endpoint and resource'
- '401 Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Check API key validity'
- '400 (bad request): Error occurs if status is Complete, Denied, Waiting Customer,
  Waiting Materials, Scheduled, Escalate, Waiting Vendor, Waiting Approval, Waiting
  Dispatch, or Approved.'
- '401 Unauthorized: Check API key or authentication method'
- '404 Not Found: Ensure the endpoint exists'
- '401 Unauthorized: Verify API key.'
- '404 Not Found: Ensure the endpoint is correct.'
- Ensure the alert source URL is correctly configured in Alertmanager
- 'import urllib.request ImportError: No module named request. This error message
  indicates that you are using the Python 3 script with Python 2.'
- 'Invalid email format: Ensure the email address follows proper format'
- 'Invalid API key: Ensure the API key is correctly set in the configuration.'
- 'Connection error: Verify that the Consul server is running and accessible.'
- '401 Unauthorized: Check if the API key is valid'
- 'import urllib.request ImportError: No module named request.'
- '401 Unauthorized: Invalid API key provided.'
- 'import urllib.request ImportError: No module named request. Ensure correct Python
  version is used.'
- '403 Forbidden: Check API key permissions.'
- '404 Not Found: Verify endpoint path.'
- '500 Internal Server Error: Try again later.'
- '401 Unauthorized: Recheck API Key or permissions'
- '401 Unauthorized: Check your API key and permissions.'
- '400 (bad request): will not be created and a 400 (bad request) error occurs'
- Sysdig accepted event is not compatible with ilert accepted event.
- System.debug() can be used for debugging
- '400 (bad request): will not be created if status is In Progress or Complete or
  Closed'
- '401 Unauthorized: Ensure the API key is correct.'
- '400 (bad request): Will not be created if the status is solved or closed.'
- '400 Bad Request: Check for required fields in the request body.'
- '401 Unauthorized: Verify API key or authentication details.'
- 'API_USER_BLOCKED: Ensure credentials are correct and vendor is set.'
- '401 Unauthorized: Check API key or permissions.'
- '401 Unauthorized: Check username and password'
- '500 Internal Server Error: Contact TOPdesk support'
- '401 Unauthorized: Check if the API key is valid.'
- '400: Bad request - will not create alerts for ''Solved'' or ''Closed'' tickets.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify your credentials.'
- '404 Not Found: Check the endpoint URL.'
- '403 Forbidden: Check API token permissions'
- '500 Internal Server Error: Retry the request'
- '401 Unauthorized: Check if the API key is valid and has not expired.'
- '403 Forbidden: The API key does not have permission to access this resource.'
- '401 Unauthorized: Invalid credentials.'
- '403 Forbidden: Check API token permissions.'
- '404 Not Found: Verify endpoint and resource existence.'
- '429 Too Many Requests: Implement exponential backoff.'
auth_info:
  mentioned_objects:
  - client_id
  - scope
  - code_challenge
  - OauthToken
  - AuthProvider
  - invalid_grant
  - NamedCredential
  - Personal Access Tokens
  - OAuth2
client:
  base_url: https://app.ilert.com
  auth:
    type: oauth2
source_metadata: null
