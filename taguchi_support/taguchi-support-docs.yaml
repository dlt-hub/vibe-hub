resources:
- name: campaign
  endpoint:
    path: /admin/api/<organization-id>/campaign/
    method: GET
    data_selector: records
    params: {}
- name: activity
  endpoint:
    path: /admin/api/<organization-id>/activity/
    method: GET
    data_selector: records
    params: {}
- name: template
  endpoint:
    path: /admin/api/<organization-id>/template/<template-id>
    method: GET
    data_selector: records
- name: subscriber
  endpoint:
    path: /admin/api/<organization-id>/subscriber/<subscriber-id>
    method: GET
    data_selector: records
- name: import
  endpoint:
    path: /admin/api/<organization-id>/import/<import-id>
    method: GET
    data_selector: records
- name: campaign
  endpoint:
    path: /admin/api/<organization-id>/campaign/
    method: GET
- name: activity
  endpoint:
    path: /admin/api/<organization-id>/activity/
    method: GET
- name: event_feed
  endpoint:
    path: /admin/api/<organization-id>/event/<event-id>
    method: GET
    data_selector: logged-events
    params: {}
- name: event_query
  endpoint:
    path: /admin/api/<organization-id>/event/?query=<query>
    method: GET
    data_selector: scheduled-events
    params: {}
- name: audit_log
  endpoint:
    path: /admin/api/<organization-id>/template/<template-id>/object-feed
    method: GET
    data_selector: records
- name: subscriber
  endpoint:
    path: /admin/api/<organization-id>/subscriber/<subscriber-id>
    method: GET
    data_selector: records
- name: list
  endpoint:
    path: /admin/api/<organization-id>/list/<list-id>
    method: GET
    data_selector: records
- name: import
  endpoint:
    path: /admin/api/<organization-id>/import/<import-id>
    method: GET
    data_selector: records
- name: event_feed
  endpoint:
    path: /admin/api/<organization-id>/event/<event-id>
    method: GET
- name: template
  endpoint:
    path: /admin/api/<organization-id>/template/<template-id>
    method: GET
    data_selector: template
    params: {}
- name: template_query
  endpoint:
    path: /admin/api/<organization-id>/template/
    method: GET
    data_selector: templates
    params:
      query: <query>
- name: list_aggregate
  endpoint:
    path: /admin/api/1/stats/listaggregate
    method: GET
    data_selector: all
    params:
      start_date: <start_date>
      end_date: <end_date>
      period: <period>
- name: campaign_activity_totals
  endpoint:
    path: /admin/api/1/stats/campaign
    method: GET
    data_selector: '1'
    params:
      event:
      - s
      - o
      - c
      - v
      - b
      start_date: <start_date>
      end_date: <end_date>
      period: <period>
- name: template
  endpoint:
    path: /admin/api/<organization-id>/template/<template-id>
    method: GET
- name: template_query
  endpoint:
    path: /admin/api/<organization-id>/template/
    method: GET
- name: template_revisions
  endpoint:
    path: /admin/api/<organization-id>/template/<template-id>/object-feed
    method: GET
- name: partition
  endpoint:
    path: /partition
    method: GET
    data_selector: response
    params: {}
- name: partition_create_update
  endpoint:
    path: /partition
    method: POST
    data_selector: response
    params: {}
- name: subscriber_anonymization
  endpoint:
    path: /subscriber
    method: DELETE
    data_selector: response
    params: {}
- name: partition
  endpoint:
    path: /partition
    method: GET
    data_selector: records
    params: {}
- name: campaign
  endpoint:
    path: /campaigns
    method: POST
    data_selector: campaign
    params: {}
- name: activity
  endpoint:
    path: /activities
    method: POST
    data_selector: activity
    params: {}
- name: activity_reports
  endpoint:
    path: /activity/reports
    method: GET
    data_selector: reports
- name: activity_targeting
  endpoint:
    path: /activity/targeting
    method: GET
    data_selector: targeting
- name: activity_editor
  endpoint:
    path: /activity/editor
    method: GET
    data_selector: editor
- name: subscriber_list
  endpoint:
    path: /subscribers/lists
    method: GET
    data_selector: lists
- name: subscriber_profiles
  endpoint:
    path: /subscribers/profiles
    method: GET
    data_selector: profiles
- name: activity
  endpoint:
    path: /activities
    method: GET
    data_selector: activities
- name: activity_reports
  endpoint:
    path: /activity-reports
    method: GET
    data_selector: reports
- name: segments
  endpoint:
    path: /segments
    method: GET
    data_selector: segments
- name: subscriber
  endpoint:
    path: /subscribers
    method: GET
    data_selector: records
- name: Message Media account (legacy)
  endpoint:
    path: /integration/message-media-legacy
    method: POST
    data_selector: response.data
    params: {}
- name: Message Media API Token (Sinch)
  endpoint:
    path: /integration/message-media-sinch
    method: POST
    data_selector: response.data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Message Media account (legacy)
  endpoint:
    path: /services/message-media/legacy
    method: POST
    data_selector: data
    params: {}
- name: Message Media API Token (Sinch)
  endpoint:
    path: /services/message-media/sinch
    method: POST
    data_selector: data
    params: {}
notes:
- API primarily intended for administrative interface.
- The API is primarily intended for use by the administrative interface; it is not
  typically used by third-party systems.
- Template requests support revisions query-string parameter.
- Taguchi has an API that supports all of the functionality provided by the admin
  interface and more.
- All API requests must be made over HTTPS.
- Test requests will be processed in the same way as production requests, but will
  not modify data or send messages.
- All Taguchi V5 API endpoints accept data in JSON format.
- Authentication failures will be indicated by a 403 error code.
- Activity creation requires logged in access to Taguchi.
- Approval is needed before broadcasting an activity.
- WhatsApp needs to approve each message in a process called 'Template approval'.
- A WhatsApp user is restricted to receive a maximum of 2 messages per day from the
  same sender for marketing.
- Ensure that your SMS provider integration is properly set up and ready for use.
- The maximum number of characters in an SMS is 160 and this includes all letters,
  spaces, and characters in any link URLs and unsubscribe messages.
- Two-factor authentication (2FA) is required for logging in.
- A WhatsApp user is restricted to receive a maximum of 2 messages per day from the
  same sender for marketing, this can affect receiving proofs.
- Support documentation without specific API details.
- The activity editor allows for live updates and saves changes automatically.
- Ensure to manage participant interactions in the workflow section.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Partitions in a subscriber list are sub-divisions used to segment and organise subscribers
  based on specific criteria.
- Requires setup of connected app in Taguchi
- Audiences support the full set of target expression features, with the exception
  of targeting other audiences.
- The duration of the initial calculation process will depend on the complexity of
  the target expression.
errors:
- '400 - Bad Request: The request was not accepted, often due to missing a required
  parameter.'
- '403 - Forbidden: No valid authentication or token provided.'
- '404 - Not Found: The requested resource doesn''t exist.'
- '405 - Method Not Allowed: The resource type is not supported by the request.'
- '400 - Bad Request: The request was not accepted, often due to missing a required
  parameter, the JSON/XML is not correctly serialized or there is a resource conflict
  in the database.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check the query parameters for correctness.'
- '404 Not Found: Ensure the organization ID and template ID are valid.'
- '200 - OK: Everything working as expected.'
- '204 - No Content: No content found/returned.'
- '400 - Bad Request: The request was not accepted, often due to missing a required
  parameter, or invalid JSON serialization or structure.'
- '406 - Not Acceptable: The requested output format is not supported.'
- '400 - Bad Request: The request was not accepted, often due to missing a required
  parameter, or invalid JSON serialization or structure'
- '404 Not Found: No partition found'
- '400 Bad Request: Check for missing required parameters.'
- '404 Not Found: Verify the activity ID or resource path.'
- '500 Internal Server Error: Retry the request if the issue persists.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://taguchi.com.au
  headers:
    Accept: application/json
source_metadata: null
