resources:
- name: dataset
  endpoint:
    path: /docs/dataset-1
    method: POST
    data_selector: dataset
    params: {}
- name: source
  endpoint:
    path: /docs/source
    method: POST
    data_selector: source
    params: {}
- name: policy
  endpoint:
    path: /docs/policy
    method: POST
    data_selector: policy
    params: {}
- name: knowledge_context
  endpoint:
    path: /api/v1/knowledge_context
    method: POST
    data_selector: context
    params: {}
- name: langchain_pg_collection
  endpoint:
    path: /public/langchain_pg_collection
    method: CREATE
    data_selector: records
- name: langchain_pg_embedding
  endpoint:
    path: /public/langchain_pg_embedding
    method: CREATE
    data_selector: records
- name: ip_to_country
  endpoint:
    path: /{ip}
    method: GET
    data_selector: responses
    params:
      ip: '{ip}'
- name: agent
  endpoint:
    path: /v1/agents
    method: POST
    data_selector: data
    params: {}
- name: pgvector
  endpoint:
    path: /v1/applications/test-tool-connection
    method: POST
- name: knowledge
  endpoint:
    path: /knowledge
    method: POST
    data_selector: knowledge
    params: {}
- name: OpenAI
  endpoint:
    path: /openai
    method: POST
- name: GoogleAI
  endpoint:
    path: /googleai
    method: POST
- name: Anthropic
  endpoint:
    path: /anthropic
    method: POST
- name: OpenAI Compatible
  endpoint:
    path: /openai-compatible
    method: POST
- name: toxicity_detection
  endpoint:
    path: /toxicity/detection
    method: POST
    data_selector: results
    params:
      threshold: 0.5
      validation_method: sentence
- name: restricted_topics_guard
  endpoint:
    path: /api/restricted_topics
    method: POST
    data_selector: topics
    params: {}
- name: allowed_topics
  endpoint:
    path: /allowed-topics
    method: GET
    data_selector: topics
    params: {}
- name: log_record
  endpoint:
    path: /v1/datasets/INSERT_DATASET_ID_HERE/log
    method: POST
    data_selector: record
- name: failed_data_ingestion_events
  endpoint:
    path: /events/failed_data_delivery
    method: GET
    data_selector: events
- name: dashboard
  endpoint:
    path: /dashboard
    method: POST
    data_selector: dashboard_response
- name: dashboard_item
  endpoint:
    path: /dashboard_item
    method: POST
    data_selector: dashboard_item_response
- name: user_authentication
  endpoint:
    path: /identity/resources/auth/v1/user
    method: POST
- name: agents
  endpoint:
    path: /v1/agents
    method: GET
    data_selector: items
    params:
      page: 1
      size: 25
- name: agent
  endpoint:
    path: /v1/agents
    method: POST
- name: credential_schema
  endpoint:
    path: /v1/agents/credential-schema
    method: POST
- name: get_provider_config
  endpoint:
    path: /v1/agents/models
    method: GET
- name: test_model_connection
  endpoint:
    path: /agents/test-model-connection
    method: POST
- name: test_tool_connection
  endpoint:
    path: /v1/agents/test-tool-connection
    method: POST
- name: agent
  endpoint:
    path: /v1/agents/{agent_id}
    method: GET
    data_selector: object
    params: {}
- name: agents
  endpoint:
    path: /v1/agents/{agent_id}
    method: PATCH
- name: delete_agent
  endpoint:
    path: /v1/agents/{agent_id}
    method: DELETE
- name: create_dataset
  endpoint:
    path: /agents/{agent_id}/create-dataset
    method: POST
- name: regenerate_api_token
  endpoint:
    path: /v1/agents/{agent_id}/regenerate
    method: POST
- name: create_version
  endpoint:
    path: /v1/agents/{agent_id}/versions
    method: POST
- name: get_agent_versions
  endpoint:
    path: /v1/agents/{agent_id}/versions
    method: GET
- name: patch_version
  endpoint:
    path: /v1/agents/{agent_id}/versions/{version_id}
    method: PATCH
- name: get_agent_version
  endpoint:
    path: /v1/agents/{agent_id}/versions/{version_id}
    method: GET
- name: feedback
  endpoint:
    path: /v1/app-worker/{id}/v1/feedback
    method: POST
    data_selector: detail
    params: {}
- name: ask
  endpoint:
    path: /app-worker/{id}/v1/ask
    method: POST
- name: ask
  endpoint:
    path: /ask
    method: POST
- name: dashboard_items
  endpoint:
    path: /v1/dashboard-items
    method: GET
    data_selector: items
    params:
      size: 250
- name: dashboard_item
  endpoint:
    path: /v1/dashboard-items
    method: POST
- name: dashboard_item
  endpoint:
    path: /v1/dashboard-items/{dashboard_item_id}
    method: GET
- name: dashboard_item
  endpoint:
    path: /v1/dashboard-items/{dashboard_item_id}
    method: DELETE
- name: dashboard_item
  endpoint:
    path: /v1/dashboard-items/{dashboard_item_id}
    method: PATCH
- name: dashboards
  endpoint:
    path: /v1/dashboards
    method: GET
    data_selector: items
    params:
      page: 1
      size: 25
- name: dashboard
  endpoint:
    path: /v1/dashboards
    method: POST
- name: dashboard
  endpoint:
    path: /v1/dashboards/{dashboard_id}
    method: GET
- name: delete_dashboard
  endpoint:
    path: /v1/dashboards/{dashboard_id}
    method: DELETE
    data_selector: object
    params:
      dashboard_id: uuid
- name: dashboard
  endpoint:
    path: /v1/dashboards/{dashboard_id}
    method: PATCH
- name: dataset_models
  endpoint:
    path: /v1/dataset-models
    method: GET
    data_selector: items
    params:
      size: 25
      page: 1
- name: connect_dataset_model
  endpoint:
    path: /v1/dataset-models/{dataset_id}/{model_id}
    method: POST
- name: dataset_sources
  endpoint:
    path: /dataset-sources
    method: GET
    data_selector: items
- name: dataset_source
  endpoint:
    path: /v1/dataset-sources
    method: POST
- name: dataset_source
  endpoint:
    path: /v1/dataset-sources/{dataset_source_id}
    method: GET
- name: dataset_source
  endpoint:
    path: /v1/dataset-sources/{dataset_source_id}
    method: DELETE
- name: dataset_source
  endpoint:
    path: /v1/dataset-sources/{dataset_source_id}
    method: PATCH
- name: datasets
  endpoint:
    path: /v1/datasets
    method: GET
    data_selector: items
    params: {}
- name: datasets
  endpoint:
    path: /v1/datasets
    method: POST
- name: log_conversation
  endpoint:
    path: /v1/datasets/log-conversation
    method: POST
- name: log_feedback
  endpoint:
    path: /v1/datasets/log-feedback
    method: POST
    data_selector: json
    params: {}
- name: search_datasets
  endpoint:
    path: /v1/datasets/search/{prefix}
    method: GET
- name: dataset
  endpoint:
    path: /v1/datasets/{dataset_id}
    method: GET
- name: dataset
  endpoint:
    path: /v1/datasets/{dataset_id}
    method: DELETE
    data_selector: null
    params: {}
- name: update_dataset
  endpoint:
    path: /v1/datasets/{dataset_id}
    method: PATCH
- name: log
  endpoint:
    path: /v1/datasets/{dataset_id}/log
    method: POST
- name: models
  endpoint:
    path: /v1/datasets/{dataset_id}/models
    method: GET
    data_selector: items
    params:
      page: '1'
      size: '25'
- name: destinations
  endpoint:
    path: /v1/destinations
    method: GET
    data_selector: items
    params:
      size: 50
- name: destinations
  endpoint:
    path: /v1/destinations
    method: POST
- name: destination
  endpoint:
    path: /v1/destinations/{destination_id}
    method: GET
- name: Delete Destination By Id
  endpoint:
    path: /v1/destinations/{destination_id}
    method: DELETE
    data_selector: '204'
    params:
      destination_id: uuid
- name: update_destination
  endpoint:
    path: /v1/destinations/{destination_id}
    method: PATCH
- name: guard_multi
  endpoint:
    path: /guardrails
    method: POST
- name: guard_schema
  endpoint:
    path: /v1/guardrails/schema
    method: GET
- name: guard_multi
  endpoint:
    path: /guardrails
    method: POST
- name: integrations
  endpoint:
    path: /v1/integrations
    method: GET
    data_selector: items
    params: {}
- name: integration
  endpoint:
    path: /v1/integrations/{integration_id}
    method: GET
- name: guard_schema
  endpoint:
    path: /v1/guardrails/schema
    method: GET
- name: integrations
  endpoint:
    path: /v1/integrations
    method: GET
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integration_id}
    method: DELETE
- name: knowledge
  endpoint:
    path: /v1/knowledge
    method: POST
- name: integration
  endpoint:
    path: /v1/integrations/{integration_id}
    method: GET
    data_selector: object
    params:
      integration_id: uuid
- name: knowledge
  endpoint:
    path: /v1/knowledge
    method: GET
    data_selector: items
    params:
      page: 1
      size: 50
- name: delete_integration
  endpoint:
    path: /v1/integrations/{integration_id}
    method: DELETE
    params:
      delete_destinations: 'false'
- name: file_info
  endpoint:
    path: /knowledge/file_info/{ids_list}
    method: GET
- name: knowledge
  endpoint:
    path: /v1/knowledge
    method: POST
    data_selector: object
- name: upload_files
  endpoint:
    path: /v1/knowledge/upload
    method: POST
- name: knowledge
  endpoint:
    path: /v1/knowledge
    method: GET
    data_selector: items
- name: knowledge
  endpoint:
    path: /v1/knowledge/{knowledge_id}
    method: DELETE
- name: file_info
  endpoint:
    path: /v1/knowledge/file_info/{ids_list}
    method: GET
- name: knowledge
  endpoint:
    path: /v1/knowledge/{knowledge_id}
    method: GET
    data_selector: object
- name: upload_files
  endpoint:
    path: /v1/knowledge/upload
    method: POST
    data_selector: files
- name: knowledge
  endpoint:
    path: /v1/knowledge/{knowledge_id}
    method: PATCH
- name: knowledge
  endpoint:
    path: /knowledge/{knowledge_id}
    method: DELETE
    data_selector: null
    params: {}
- name: reindex_knowledge
  endpoint:
    path: /v1/knowledge/{knowledge_id}/reindex
    method: POST
- name: knowledge
  endpoint:
    path: /v1/knowledge/{knowledge_id}
    method: GET
- name: distribution
  endpoint:
    path: /v1/metrics/distribution
    method: POST
- name: knowledge
  endpoint:
    path: /v1/knowledge/{knowledge_id}
    method: PATCH
    data_selector: object
- name: distribution_multi
  endpoint:
    path: /v1/metrics/distribution-multi
    method: POST
- name: reindex_knowledge_documents
  endpoint:
    path: /v1/knowledge/{knowledge_id}/reindex
    method: POST
- name: performance
  endpoint:
    path: /v1/metrics/performance
    method: POST
- name: metrics_distribution
  endpoint:
    path: /v1/metrics/distribution
    method: POST
- name: performance_multi
  endpoint:
    path: /metrics/performance-multi
    method: POST
- name: models
  endpoint:
    path: /v1/models
    method: GET
    data_selector: items
- name: distribution_multi
  endpoint:
    path: /metrics/distribution-multi
    method: POST
- name: model
  endpoint:
    path: /v1/models
    method: POST
- name: performance
  endpoint:
    path: /v1/metrics/performance
    method: POST
- name: model
  endpoint:
    path: /v1/models/{model_id}
    method: GET
    data_selector: object
- name: performance_multi
  endpoint:
    path: /metrics/performance-multi
    method: POST
- name: model
  endpoint:
    path: /v1/models/{model_id}
    method: DELETE
- name: models
  endpoint:
    path: /v1/models
    method: GET
- name: model
  endpoint:
    path: /v1/models/{model_id}
    method: PATCH
- name: datasets_by_model_id
  endpoint:
    path: /v1/models/{model_id}/datasets
    method: GET
    data_selector: items
    params:
      page: 1
      size: 25
- name: models
  endpoint:
    path: /v1/models
    method: POST
- name: policies
  endpoint:
    path: /v1/policies
    method: GET
    data_selector: items
    params: {}
- name: model
  endpoint:
    path: /v1/models/{model_id}
    method: GET
    data_selector: object
- name: create_policy
  endpoint:
    path: /v1/policies
    method: POST
- name: model
  endpoint:
    path: /v1/models/{model_id}
    method: DELETE
- name: policy
  endpoint:
    path: /v1/policies/{policy_id}
    method: GET
- name: model
  endpoint:
    path: /v1/models/{model_id}
    method: PATCH
- name: delete_policy
  endpoint:
    path: /v1/policies/{policy_id}
    method: DELETE
    data_selector: 'null'
    params:
      policy_id: uuid
- name: datasets
  endpoint:
    path: /v1/models/{model_id}/datasets
    method: GET
    data_selector: items
    params:
      page: 1
      size: 25
- name: update_policy
  endpoint:
    path: /v1/policies/{policy_id}
    method: PATCH
- name: policies
  endpoint:
    path: /v1/policies
    method: GET
    data_selector: items
- name: trigger_policy
  endpoint:
    path: /v1/policies/{policy_id}/trigger
    method: POST
- name: policy
  endpoint:
    path: /v1/policies
    method: POST
- name: sources
  endpoint:
    path: /v1/sources
    method: GET
- name: policy
  endpoint:
    path: /v1/policies/{policy_id}
    method: GET
- name: sources
  endpoint:
    path: /v1/sources
    method: POST
- name: policy
  endpoint:
    path: /v1/policies/{policy_id}
    method: DELETE
    data_selector: null
    params:
      policy_id: uuid
- name: test_connection
  endpoint:
    path: /sources/test-connection
    method: POST
    data_selector: payload
    params: {}
- name: update_policy
  endpoint:
    path: /v1/policies/{policy_id}
    method: PATCH
- name: source
  endpoint:
    path: /v1/sources/{source_id}
    method: GET
    data_selector: object
    params: {}
- name: trigger_policy
  endpoint:
    path: /v1/policies/{policy_id}/trigger
    method: POST
- name: sources
  endpoint:
    path: /v1/sources/{source_id}
    method: DELETE
- name: sources
  endpoint:
    path: /v1/sources
    method: GET
- name: source
  endpoint:
    path: /v1/sources/{source_id}
    method: PATCH
- name: agents
  endpoint:
    path: /v1/agents
    method: GET
    data_selector: items
    params:
      page: 1
      size: 25
- name: test_connection
  endpoint:
    path: /sources/test-connection
    method: POST
- name: dashboard_items
  endpoint:
    path: /v1/dashboard-items
    method: GET
    data_selector: items
    params:
      size: '250'
- name: dashboards
  endpoint:
    path: /v1/dashboards
    method: GET
    data_selector: items
    params:
      page: 1
      size: 25
- name: source
  endpoint:
    path: /sources/{source_id}
    method: GET
- name: delete_source
  endpoint:
    path: /v1/sources/{source_id}
    method: DELETE
- name: dataset_models
  endpoint:
    path: /v1/dataset-models
    method: GET
    data_selector: items
    params:
      size: 25
      page: 1
- name: dataset_sources
  endpoint:
    path: /v1/dataset-sources
    method: GET
- name: Update Source
  endpoint:
    path: /v1/sources/{source_id}
    method: PATCH
- name: datasets
  endpoint:
    path: /v1/datasets
    method: GET
    data_selector: items
    params: {}
- name: agents
  endpoint:
    path: /v1/agents
    method: GET
    data_selector: items
    params:
      page: 1
      size: 25
- name: destinations
  endpoint:
    path: /v1/destinations
    method: GET
    data_selector: items
    params:
      page: 1
      size: 50
- name: dashboard_items
  endpoint:
    path: /v1/dashboard-items
    method: GET
    data_selector: items
    params:
      page: 1
      size: 250
- name: guard_multi
  endpoint:
    path: /guardrails
    method: POST
    data_selector: array of objects
- name: dashboards
  endpoint:
    path: /v1/dashboards
    method: GET
    data_selector: items
- name: integrations
  endpoint:
    path: /v1/integrations
    method: GET
    data_selector: items
    params: {}
- name: dataset_model
  endpoint:
    path: /v1/dataset-models
    method: GET
    data_selector: items
    params:
      size: 25
      page: 1
- name: knowledge
  endpoint:
    path: /v1/knowledge
    method: POST
- name: dataset_sources
  endpoint:
    path: /dataset-sources
    method: GET
    data_selector: items
- name: distribution
  endpoint:
    path: /v1/metrics/distribution
    method: POST
- name: datasets
  endpoint:
    path: /v1/datasets
    method: GET
    data_selector: items
- name: models
  endpoint:
    path: /v1/models
    method: GET
    data_selector: items
- name: policies
  endpoint:
    path: /v1/policies
    method: GET
    data_selector: items
    params: {}
- name: destinations
  endpoint:
    path: /v1/destinations
    method: GET
    data_selector: items
    params:
      destination_id: List[UUID]
      integration_id: List[UUID]
      name: List[str]
      created_by: List[str]
      page: integer
      size: integer
- name: sources
  endpoint:
    path: /v1/sources
    method: GET
- name: guard_multi
  endpoint:
    path: /v1/guardrails
    method: POST
- name: integrations
  endpoint:
    path: /v1/integrations
    method: GET
- name: knowledge
  endpoint:
    path: /v1/knowledge
    method: POST
- name: distribution
  endpoint:
    path: /v1/metrics/distribution
    method: POST
- name: models
  endpoint:
    path: /v1/models
    method: GET
- name: policies
  endpoint:
    path: /v1/policies
    method: GET
    data_selector: items
    params:
      page: 1
      size: 25
- name: sources
  endpoint:
    path: /sources
    method: GET
    data_selector: items
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- SUPERWISE® supports enterprise-grade account management.
- 'Users can have one of the following roles: Viewer or Admin'
- Admins can control security layers of the platform, such as two-factor authentication
  and generating API tokens
- Admin role required to configure SSO
- Supports only OpenAPI versions 3.0 and above.
- Schema format must be in JSON.
- Requires setup of connected app in SUPERWISE
- Re-indexing website knowledge will erase the existing data.
- SUPERWISE currently supports only language foundation models
- We recommend using a 7-billion-parameter model or larger (e.g., Llama 3.1 8B)
- Prompt engineering isn't a 'fail-fast' or 'plug-and-play' process.
- Flowise doesn’t expose your credential keys and values, and only provides placeholder
  strings instead.
- Before publishing, please use our playground tool to ensure your agent works as
  expected and avoid publishing redundant versions.
- The publish option is only available when you have a valid agent configuration.
- Ensure that your website and the iframe are running on trusted domains to maintain
  the security of the API token.
- Easily configure your deployed agent endpoint as a public endpoint accessible by
  anonymous clients, or require authentication to expose your agent's operations only
  to authenticated clients.
- Production interactions only recorded.
- Observability is on by default.
- Identifies and filters out user messages that contain restricted topics.
- Ensures that any model-generated response does not include prohibited topics.
- Files already present in your connected cloud storage bucket before you complete
  the integration steps won't automatically be pulled into your dataset.
- A well-defined schema ensures that the data aligns with the expected formats and
  types, facilitating accurate monitoring and troubleshooting.
- Each bucket requires a unique Source configuration.
- File names should only include letters and numbers (A-Za-z0-9).
- 1:1 Relationship between Bucket and Source
- The initial data insertion into the dataset requires an 'Insert' action.
- You can send only one data record at a time.
- SUPERWISE provides built-in monitoring that automatically detects and logs data
  ingestion failures.
- Widgets are queries and visualizations presented on a dashboard.
- A query can be built either on top of a dataset or on top of events.
- Monitoring frequency is determined by UTC time.
- A service account key is also required, stored as a Kubernetes secret.
- An S3 bucket is required for SUPERWISE® to store data.
- Enabling file versioning is recommended.
- The URL for this request expired after 30 days.
- URL for this request expired after 30 days.
- Uses OAuth2 with bearer token
- Requires setup of connected app in api
- 'URL Expired: The URL for this request expired after 30 days.'
- Log in to see full request history
- Defaults to dataset
- Uses OAuth2 for authentication
- Creating a bearer token is required for authentication.
- 'The payload that includes: name (str), description (str or None), id (str or None).'
- Get all Models with optional filters
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '400: Bad request (invalid IP address format)'
- '404: IP address not found'
- '500: Internal server error'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: Bad Request'
- '400'
- 422 Unprocessable Entity
- 500 Internal Server Error
- 401 Unauthorized
- '422: Unprocessable Entity'
- '500: Internal Server Error'
- '404: Not Found'
- 400 Bad Request
- 404 Not Found
- '204'
- '404'
- '422'
- '500'
- '422 Validation Error: Check request parameters for correctness'
- 422 Validation Error
- '422 Validation Error: Check request parameters'
- '422: Validation Error'
- '422 Validation Error: Check the request parameters'
- '202: Successful response'
- '422: Invalid request parameters'
- '422 Unprocessable Entity: Check required fields and their types'
- '422: detail'
- '401'
- '422 Validation Error: Ensure correct parameters are provided'
- '422 Validation Error: Check the details in the response body'
- '200 Successful Response: Data fetched successfully'
- '422 Validation Error: Check the required fields in the payload'
- '500: If there is a server error.'
- '404: If the requested resource is not found.'
- '422 Validation Error: Check required fields and types'
- '422 Validation Error: Check required fields in request'
- '200 Successful Response: Indicates data retrieval was successful'
- '500 Internal Server Error: Try again later'
- '422 Validation Error: Check request parameters for validity'
- '500 Internal Server Error: Check server status or logs'
- '422: Validation error'
- '422 Validation Error: Check your request parameters'
- '422 Validation Error: Check your input parameters'
- '500 Internal Server Error: Server issue'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
client:
  base_url: https://api.superwise.ai
  auth:
    type: oauth2
source_metadata: null
