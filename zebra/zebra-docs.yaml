resources:
- name: mining
  endpoint:
    path: /mining
    method: POST
    data_selector: result
    params: {}
- name: docker_image
  endpoint:
    path: /r/zfnd/zebra/tags
    method: GET
- name: network
  endpoint:
    path: /network
    method: GET
    data_selector: network_info
    params: {}
- name: block_template
  endpoint:
    path: /block_template
    method: GET
    data_selector: block_template_info
    params: {}
- name: testnet_parameters
  endpoint:
    path: /network/testnet_parameters
    method: GET
    data_selector: parameters
    params: {}
- name: TransactionIds
  endpoint:
    path: /api/transaction_ids
    method: GET
- name: TransactionsById
  endpoint:
    path: /api/transactions_by_id
    method: GET
- name: TransactionsByMinedId
  endpoint:
    path: /api/transactions_by_mined_id
    method: GET
- name: FullTransactions
  endpoint:
    path: /api/full_transactions
    method: GET
- name: RejectedTransactionIds
  endpoint:
    path: /api/rejected_transaction_ids
    method: GET
- name: TransactionWithDepsByMinedId
  endpoint:
    path: /api/transaction_with_deps_by_mined_id
    method: GET
- name: Queue
  endpoint:
    path: /api/queue
    method: POST
- name: CheckForVerifiedTransactions
  endpoint:
    path: /api/check_for_verified_transactions
    method: POST
- name: AwaitOutput
  endpoint:
    path: /api/await_output
    method: POST
- name: blocks
  endpoint:
    path: /blocks
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
    params: {}
- name: transparent
  endpoint:
    path: /transparent
    method: GET
    data_selector: records
    params: {}
- name: sprout
  endpoint:
    path: /sprout
    method: GET
    data_selector: records
    params: {}
- name: sapling
  endpoint:
    path: /sapling
    method: GET
    data_selector: records
    params: {}
- name: orchard
  endpoint:
    path: /orchard
    method: GET
    data_selector: records
    params: {}
- name: chain
  endpoint:
    path: /chain
    method: GET
    data_selector: records
    params: {}
- name: Continuous Delivery
  endpoint:
    path: /continuous-delivery
    method: GET
- name: checkpoints
  endpoint:
    path: /zebra-checkpoints
    method: GET
- name: Zebra Crates
  endpoint:
    path: /crates.io
    method: GET
    data_selector: crates
    params: {}
- name: NonFinalizedState
  endpoint:
    path: /non-finalized-state
    method: GET
    data_selector: chains
    params: {}
- name: QueuedBlocks
  endpoint:
    path: /queued-blocks
    method: GET
    data_selector: blocks
    params: {}
- name: commit_block
  endpoint:
    path: /request/commit_block
    method: POST
    data_selector: Response::Added(block::Hash)
    params: {}
- name: commit_finalized_block
  endpoint:
    path: /request/commit_finalized_block
    method: POST
    data_selector: Response::Added(block::Hash)
    params: {}
- name: depth
  endpoint:
    path: /request/depth
    method: GET
    data_selector: Response::Depth(Some(depth))
    params: {}
- name: tip
  endpoint:
    path: /request/tip
    method: GET
    data_selector: Response::Tip(block::Hash)
    params: {}
- name: block_locator
  endpoint:
    path: /request/block_locator
    method: GET
    data_selector: Response::BlockLocator(Vec<block::Hash>)
    params: {}
- name: transaction
  endpoint:
    path: /request/transaction
    method: GET
    data_selector: Response::Transaction(Some(Transaction))
    params: {}
- name: block
  endpoint:
    path: /request/block
    method: GET
    data_selector: Response::Block(Some(Arc<Block>))
    params: {}
- name: await_spendable_utxo
  endpoint:
    path: /request/await_spendable_utxo
    method: GET
    data_selector: Response::SpendableUtxo(transparent::Output)
    params: {}
- name: difficulty
  endpoint:
    path: /difficulty
    method: GET
- name: ShieldedData
  endpoint:
    path: /orchard/shielded_data
    method: GET
    data_selector: records
- name: AuthorizedAction
  endpoint:
    path: /orchard/authorized_action
    method: GET
    data_selector: records
- name: Flags
  endpoint:
    path: /orchard/flags
    method: GET
    data_selector: records
- name: input_value_balance
  endpoint:
    path: /zebra-chain/src/transparent.rs
    method: GET
    data_selector: value_balance
    params: {}
- name: output_value_balance
  endpoint:
    path: /zebra-chain/src/transparent.rs
    method: GET
    data_selector: value_balance
    params: {}
- name: joinsplit_data_value_balance
  endpoint:
    path: /zebra-chain/src/transaction/joinsplit.rs
    method: GET
    data_selector: value_balance
    params: {}
- name: sapling_shielded_data_value_balance
  endpoint:
    path: /zebra-chain/src/transaction/sapling/shielded_data.rs
    method: GET
    data_selector: value_balance
    params: {}
- name: orchard_shielded_data_value_balance
  endpoint:
    path: /zebra-chain/src/transaction/orchard/shielded_data.rs
    method: GET
    data_selector: value_balance
    params: {}
- name: transaction_value_balance
  endpoint:
    path: /zebra-chain/src/transaction.rs
    method: GET
    data_selector: value_balance
    params: {}
- name: block_value_balance
  endpoint:
    path: /zebra-chain/src/block.rs
    method: GET
    data_selector: value_balance
    params: {}
- name: prepared_block_value_balance
  endpoint:
    path: /zebra-state/src/request.rs
    method: GET
    data_selector: block_value_balance
    params: {}
- name: finalized_block_value_balance
  endpoint:
    path: /zebra-state/src/request.rs
    method: GET
    data_selector: block_value_balance
    params: {}
- name: chain_value_pool
  endpoint:
    path: /zebra-state/src/service/non_finalized_state/chain.rs
    method: GET
    data_selector: value_pool
    params: {}
- name: zebrad
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: mining
  endpoint:
    path: /mining
    method: POST
    data_selector: result
    params: {}
- name: rpc
  endpoint:
    path: /rpc
    method: GET
    data_selector: result
    params: {}
- name: sync_testnet
  endpoint:
    path: /sync_testnet
    method: POST
    data_selector: data
    params:
      debug_stop_at_height: '2599958'
      network: Testnet
- name: start_mining
  endpoint:
    path: /start_mining
    method: POST
    data_selector: data
    params:
      miner_address: t27eWDgjFYJGVXmzrXeVjnb5J3uXDM9xH9v
- name: activation_heights
  endpoint:
    path: /network/testnet_parameters/activation_heights
    method: GET
    data_selector: activation_heights
    params: {}
- name: rpc
  endpoint:
    path: /rpc
    method: POST
    data_selector: result
    params: {}
- name: zebrad
  endpoint:
    path: /generate
    method: POST
    data_selector: result
- name: lightwalletd
  endpoint:
    path: /lightwalletd
    method: GET
    data_selector: result
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: result.transactions
- name: blocks
  endpoint:
    path: /block
    method: GET
    data_selector: blocks
- name: activation_heights
  endpoint:
    params:
      BeforeOverwinter: 1
      Overwinter: 347500
      Sapling: 419200
      Blossom: 653600
      Heartwood: 903000
      Canopy: 1046400
      NU5: 1687104
- name: regtest_mining
  endpoint:
    params:
      miner_address: t27eWDgjFYJGVXmzrXeVjnb5J3uXDM9xH9v
- name: state
  endpoint:
    params:
      ephemeral: true
- name: transaction
  endpoint:
    path: /mempool/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: rejected_transactions
  endpoint:
    path: /mempool/rejected
    method: GET
    data_selector: rejected
    params: {}
- name: blocks
  endpoint:
    path: /blocks
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
- name: inventory_advertisement
  endpoint:
    path: /api/inventory/advertisement
    method: GET
    data_selector: advertisements
    params: {}
- name: utxo
  endpoint:
    path: /api/utxo
    method: GET
    data_selector: utxos
    params: {}
- name: state_service
  endpoint:
    path: /service/state
    method: POST
    data_selector: response
    params: {}
- name: NonFinalizedState
  endpoint:
    path: /non-finalized-state
    method: GET
    data_selector: chains
    params: {}
- name: QueuedBlocks
  endpoint:
    path: /queued-blocks
    method: GET
    data_selector: blocks
    params: {}
- name: commit_block
  endpoint:
    path: /request/commit_block
    method: POST
    data_selector: Response::Added(block::Hash)
    params: {}
- name: commit_finalized_block
  endpoint:
    path: /request/commit_finalized_block
    method: POST
    data_selector: Response::Added(block::Hash)
    params: {}
- name: depth
  endpoint:
    path: /request/depth
    method: GET
    data_selector: Response::Depth(Some(depth))
    params: {}
- name: tip
  endpoint:
    path: /request/tip
    method: GET
    data_selector: Response::Tip(block::Hash)
    params: {}
- name: block_locator
  endpoint:
    path: /request/block_locator
    method: GET
    data_selector: Response::BlockLocator(Vec<block::Hash>)
    params: {}
- name: transaction
  endpoint:
    path: /request/transaction
    method: GET
    data_selector: Response::Transaction(Some(Transaction))
    params: {}
- name: block
  endpoint:
    path: /request/block
    method: GET
    data_selector: Response::Block(Some(Arc<Block>))
    params: {}
- name: await_spendable_utxo
  endpoint:
    path: /request/await_spendable_utxo
    method: GET
    data_selector: Response::SpendableUtxo(transparent::Output)
    params: {}
- name: client_functionality
  endpoint:
    path: /client
    method: GET
    data_selector: results
    params: {}
- name: blockchain_scanning
  endpoint:
    path: /scan
    method: POST
    data_selector: results
    params: {}
- name: state_notifications
  endpoint:
    path: /state/notifications
    method: GET
    data_selector: new_blocks
- name: transaction
  endpoint:
    path: /transaction
    method: GET
    data_selector: transactions
    params: {}
- name: block
  endpoint:
    path: /block
    method: GET
    data_selector: blocks
    params: {}
notes:
- Zebra supports a variety of optional features which you can enable and configure
  manually.
- There is a known issue where progress bar estimates become extremely large.
- Zebra uses config-rs to layer configuration from defaults, an optional TOML file,
  and ZEBRA_-prefixed environment variables.
- By default, Zebra uses cookie-based authentication for RPC requests (enable_cookie_auth
  = true).
- Zebra supports dynamic tracing, configured using the config's TracingSection and
  an HTTP RPC endpoint.
- Zebra can send tracing spans and events to systemd-journald on Linux distributions
  that use systemd.
- Zebra can generate flamegraphs of tracing spans.
- lightwalletd currently does not support cookie authentication
- lightwalletd requires a cert.pem for production setups
- Starting with Zebra v2.0.0, a cookie authentication method is enabled by default.
- The cookie is stored in the default cache directory when the RPC endpoint starts
  and is deleted at shutdown.
- s-nomp has not been updated for NU5, so you'll need the fixes in the branches below.
- miner and pool payments are disabled, configure your address on your node to get
  paid.
- To connect to the RPC port, you will need the contents of the cookie file Zebra
  uses for authentication.
- By default, it is stored at /home/zebra/.cache/zebra/.cookie.
- This is an experimental feature tested only in the Zcash Testnet.
- The current network upgrade on the Zcash Testnet is Nu5.
- A modified Zebra version capable of syncing up to our chosen activation height is
  needed.
- Configuring any Testnet parameters except the network name with non-default values
  will result in an incompatible custom Testnet.
- The maximum total serialized byte size of all transactions in the mempool defaults
  to 80,000,000 bytes.
- The maximum time to remember evicted transaction IDs in the rejection list defaults
  to 60 minutes.
- 'Mempool Service: The central coordinator that handles requests and manages the
  mempool state.'
- 'Storage: In-memory storage for verified transactions and rejection lists.'
- 'Transaction Downloads: Handles downloading and verifying transactions from peers.'
- 'Crawler: Periodically polls peers for new transactions.'
- 'Queue Checker: Regularly polls for newly verified transactions.'
- Zebra is in a pre-release state (is unstable and might not satisfy the intended
  compatibility requirements as denoted by its associated normal version).
- Older Zebra versions that only support previous network upgrades will never be supported,
  because they are operating on an unsupported Zcash chain fork.
- MIGs are always replaced when PRs are merged to the main branch and when a release
  is published.
- If a new major version is released, a new MIG is also created, keeping the previous
  major version running until it's no longer needed.
- Zebra relies on numerous Electric Coin Company (ECC) dependencies, and updating
  them can be a complex task.
- Zebra's db path will end in "unknowntestnet" instead of "testnet".
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- The Bitcoin network protocol used by Zcash allows nodes to advertise data (inventory
  items) for download by other peers.
- Inventory advertisements live in the registry for twice the length of the timer,
  so it should be chosen to be half of the desired lifetime for inventory advertisements.
- One drawback of this design is that we may have to wait on a lock.
- The critical section basically amounts to a hash lookup and a channel send, so I
  don't think that we're likely to run into problems with long contended periods,
  and it's unlikely that we would get a deadlock.
- The Chain type's API is only designed to handle non-finalized data.
- The genesis block and all pre canopy blocks are always considered to be finalized
  blocks.
- Restarts can cause zebrad to redownload up to the last one hundred blocks it verified
  in the best chain.
- The service interface puts some extra responsibility on callers to ensure it is
  used correctly.
- Contextual validation starts after Canopy activation.
- 'Storage Requirements: Storing separate tree states (especially for Sprout) requires
  significant disk space.'
- 'Performance Impact: Computing and verifying tree states can be computationally
  expensive, potentially affecting sync performance.'
- 'Implementation Complexity: Managing multiple tree states across different protocols
  adds complexity to the codebase.'
- 'Fork Handling: Maintaining correct tree states during chain reorganizations requires
  careful handling.'
- Client functionality is defined as all functionality related to a particular user's
  private data.
- Sprout shielded transactions are not supported. Users should migrate to Sapling.
- A consensus rule was added stating that in a version 5 transaction, the reserved
  bits 2..7 of the flagsOrchard field MUST be zero.
- Implementing and reviewing these constraints creates extra work for developers.
- Concurrency bugs slow down every developer, and impact users.
- Zebra supports optional features which can be enabled during build time.
- Enable cookie authentication is set to false for lightwalletd compatibility.
- Uses Docker for mining with environment variables.
- Ensure to set your own miner address for rewards.
- Configured network upgrade activation heights must be above the genesis block height.
- Genesis block cannot be generated by Zebra.
- Uses Docker for deployment
- Progress bar estimates can become extremely large
- Zebra's RPC methods can support a lightwalletd service backed by zebrad.
- Starting with Zebra v2.0.0, cookie authentication is enabled by default for the
  RPC server.
- Miner payments are disabled, configure your address on your node to get paid.
- Uses Docker for mining operations
- Zebra always activates the Canopy network upgrade at block height 1.
- Zebra can mine blocks on the Regtest network when compiled with the experimental
  internal-miner compilation feature.
- Add internal_miner = true in the mining section of its configuration.
- The mempool manages the lifecycle of unmined transactions.
- It provides in-memory storage for valid transactions that haven't yet been included
  in a block.
- 'Zebra''s state has two verification modes: block hash checkpoints and full verification.'
- Upgrading a pre-existing database to the latest format requires careful handling.
- Zebra is in a pre-release state and may not satisfy compatibility requirements.
- Zebra has extensive continuous integration tests for node syncing and lightwalletd
  integration.
- Currently, each Zebra and lightwalletd full and update sync will update cached state
  images, which are shared by all tests.
- Zebra developers often dismiss ECC dependency upgrade suggestions from dependabot.
- Make a backup of your current Testnet state.
- Build zebra and make sure it compiles.
- Check the peers file if cache_dir is true.
- This design enables a significant amount of parallelism
- Verification can be slow without efficient design
- The API allows asynchronous processing of inventory advertisements.
- UTXOs are managed independently for efficiency.
- State service ensures linearized sequence of state requests.
- Writes to rocksdb must be done synchronously.
- Restarts can cause `zebrad` to redownload up to the last one hundred blocks it verified
  in the best chain.
- Client functionality is restricted to transparent and Sapling shielded transactions;
  Sprout shielded transactions are not supported.
- The fields have ZcashSerialize and ZcashDeserialize implementations, because they
  can be serialized into a single byte vector.
- Zebra's tasks avoid starvation and deadlocks by sharing progress between any ready
  futures.
- Diagnosing concurrency bugs can take a lot of developer effort.
- Zebra must sync up to tip computing all value balances and never breaking the value
  pool rules.
- 'The command below places the generated `zebrad.toml` config file in the default
  preferences directory of Linux: `zebrad generate -o ~/.config/zebrad.toml`.'
errors:
- 'ExactTipRejectionError: Failures in consensus validation.'
- 'SameEffectsTipRejectionError: Spending conflicts with other mempool transactions.'
- 'SameEffectsChainRejectionError: Expired transactions.'
- Breaking changes may happen during updates.
- Deprecated RPCs and features will be removed in the next major release.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '0: Application exited successfully'
- '1: Application exited unsuccessfully'
- '2: Application crashed'
- 'INVALID_PARAMETER: Check the provided parameters'
- 'NETWORK_ERROR: Verify network connectivity'
- 'UNAUTHORIZED: Ensure proper authentication if required'
- '401 Unauthorized: Recheck cookie authentication.'
- 'REQUEST_FAILED: Ensure network connectivity'
- 'INVALID_INV: Check the format of inventory request'
- 'DuplicateBlockHash: A block with the same hash already exists.'
- 'InvalidHeight: Block height is invalid.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://zebra.zfnd.org
  headers:
    Accept: application/json
source_metadata: null
