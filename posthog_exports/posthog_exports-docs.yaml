resources:
- name: exports
  endpoint:
    path: /api/projects/:project_id/exports/
    method: GET
    data_selector: results
    params:
      limit: null
      offset: null
- name: create_exports
  endpoint:
    path: /api/projects/:project_id/exports/
    method: POST
- name: retrieve_exports
  endpoint:
    path: /api/projects/:project_id/exports/:id/
    method: GET
- name: retrieve_exports_content
  endpoint:
    path: /api/projects/:project_id/exports/:id/content/
    method: GET
- name: session_replay
  endpoint:
    path: /api/session_replay
    method: GET
    data_selector: recordings
- name: session_replay
  endpoint:
    path: /api/session-replay
    method: GET
    data_selector: records
    params: {}
- name: feature_flags
  endpoint:
    path: /api/feature_flags
    method: GET
    data_selector: feature_flags
    params: {}
- name: feature_flags
  endpoint:
    path: /api/feature_flags
    method: GET
    data_selector: records
    params: {}
- name: experiments
  endpoint:
    path: /api/experiments/
    method: GET
    data_selector: results
    params: {}
- name: experiments
  endpoint:
    path: /api/experiments
    method: GET
    data_selector: data
    params: {}
- name: surveys
  endpoint:
    path: /api/surveys
    method: GET
    data_selector: records
    params: {}
- name: clearbit
  endpoint:
    path: /api/clearbit
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v2/contacts
    method: GET
- name: contacts
  endpoint:
    path: /contacts/v1/lists/all/contacts/all
    method: GET
    data_selector: contacts
- name: deals
  endpoint:
    path: /deals/v1/deal/paged
    method: GET
    data_selector: deals
- name: salary_calculator
  endpoint:
    path: /salary/calculator
    method: GET
    data_selector: salary_data
- name: values
  endpoint:
    path: /handbook/values
    method: GET
    data_selector: principles
    params: {}
- name: user
  endpoint:
    path: /api/user
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: event
    params: {}
- name: properties
  endpoint:
    path: /api/property
    method: GET
    data_selector: properties
    params: {}
- name: events
  endpoint:
    path: /api/events/
    method: POST
    data_selector: data
- name: persons
  endpoint:
    path: /api/persons/
    method: GET
    data_selector: data
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: events
    params: {}
- name: persons
  endpoint:
    path: /api/person
    method: GET
    data_selector: persons
    params: {}
- name: capture
  endpoint:
    path: /api/capture
    method: POST
    data_selector: data
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
- name: events
  endpoint:
    path: /data-management/events
    method: GET
- name: actions
  endpoint:
    path: /data-management/actions
    method: GET
- name: properties
  endpoint:
    path: /data-management/properties
    method: GET
- name: annotations
  endpoint:
    path: /data-management/annotations
    method: GET
- name: history
  endpoint:
    path: /data-management/history
    method: GET
- name: ingestion_warnings
  endpoint:
    path: /data-management/ingestion-warnings
    method: GET
- name: events
  endpoint:
    path: /api/projects/:project_id/query
    method: POST
    data_selector: results
- name: events
  endpoint:
    path: /i/v0/e
    method: POST
    data_selector: events
    params: {}
- name: flags
  endpoint:
    path: /flags
    method: POST
    data_selector: flags
    params: {}
- name: queries
  endpoint:
    path: /queries
    method: GET
    data_selector: queries
    params: {}
- name: cloud_storage
  endpoint:
    path: /data-pipeline
    method: POST
    data_selector: source
    params: {}
- name: batch_events
  endpoint:
    path: /batch/
    method: POST
    data_selector: batch
    params:
      historical_migration: true
- name: posts
  endpoint:
    path: /api/posts
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /api/event
    method: GET
    data_selector: results
- name: events
  endpoint:
    path: /api/event
    method: GET
    data_selector: records
    params:
      incremental: timestamp
- name: properties
  endpoint:
    path: /api/property
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /api/event
    method: GET
    data_selector: records
- name: feature_flags
  endpoint:
    path: /feature-flags
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/user
    method: GET
    data_selector: data.users
    params: {}
- name: people
  endpoint:
    path: /api/people
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /api/event/
    method: GET
    data_selector: results
    params:
      incremental: timestamp
- name: users
  endpoint:
    path: /api/user/
    method: GET
    data_selector: results
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: event
  endpoint:
    path: /api/event
    method: GET
    data_selector: results
- name: incident_updates
  endpoint:
    path: /incidents
    method: GET
    data_selector: incidents
    params: {}
- name: system_metrics
  endpoint:
    path: /system-metrics
    method: GET
    data_selector: metrics
    params: {}
- name: Company Personal Data
  endpoint:
    method: POST
- name: capture
  endpoint:
    path: /api/capture
    method: POST
    data_selector: data
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: data
- name: error_tracking
  endpoint:
    path: /error-tracking
    method: GET
    data_selector: records
    params: {}
- name: session_replay
  endpoint:
    path: /session-replay
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: data
    params: {}
- name: adwords_data
  endpoint:
    path: /data/adwords
    method: GET
    data_selector: results
- name: experiments
  endpoint:
    path: /api/experiments
    method: GET
    data_selector: results
    params: {}
- name: surveys
  endpoint:
    path: /api/surveys
    method: GET
    data_selector: results
    params: {}
- name: session_replay
  endpoint:
    path: /api/session-replay
    method: GET
    data_selector: data
    params: {}
- name: product_analytics
  endpoint:
    path: /api/product-analytics
    method: GET
    data_selector: data
    params: {}
- name: surveys
  endpoint:
    path: /api/surveys
    method: GET
    data_selector: surveys
    params: {}
- name: customer_data
  endpoint:
    path: /api/customer_data
    method: GET
    data_selector: records
- name: trends
  endpoint:
    path: /insights
    method: GET
    data_selector: results
- name: dashboards
  endpoint:
    path: /api/dashboards
    method: GET
    data_selector: dashboards
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: event
    params: {}
- name: feature_flags
  endpoint:
    path: /api/feature_flags
    method: GET
    data_selector: feature_flags
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: events
    params: {}
- name: users
  endpoint:
    path: /api/user
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /api/capture
    method: POST
    data_selector: records
- name: decide
  endpoint:
    path: /decide
    method: POST
    data_selector: config
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: events
    params: {}
- name: persons
  endpoint:
    path: /api/persons
    method: GET
    data_selector: persons
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
    params: {}
- name: persons
  endpoint:
    path: /api/persons
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: events
    params: {}
- name: capture
  endpoint:
    path: /api/capture
    method: POST
- name: events
  endpoint:
    path: /api/events
    method: GET
- name: persons
  endpoint:
    path: /api/persons
    method: GET
- name: projects
  endpoint:
    path: /api/projects
    method: GET
- name: event_capture
  endpoint:
    path: /capture
    method: POST
    data_selector: event
- name: user_identification
  endpoint:
    path: /identify
    method: POST
    data_selector: user
- name: event
  endpoint:
    path: /capture
    method: POST
    data_selector: events
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
    params: {}
- name: persons
  endpoint:
    path: /api/persons
    method: GET
    data_selector: data
    params: {}
- name: event_capture
  endpoint:
    path: /capture
    method: POST
    data_selector: event
    params: {}
- name: group_analytics
  endpoint:
    path: /group
    method: POST
    data_selector: group
    params: {}
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: data
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/user
    method: GET
    data_selector: data
    params: {}
- name: capture_event
  endpoint:
    path: /capture
    method: POST
    data_selector: events
    params: {}
- name: feature_flag
  endpoint:
    path: /feature_flags
    method: GET
    data_selector: flags
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
- name: persons
  endpoint:
    path: /api/persons
    method: GET
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: records
- name: event_capture
  endpoint:
    path: /capture
    method: POST
    data_selector: events
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
- name: event_capture
  endpoint:
    path: /capture
    method: POST
    data_selector: event
    params: {}
- name: feature_flags
  endpoint:
    path: /feature_flags
    method: GET
    data_selector: feature_flags
    params: {}
- name: capture
  endpoint:
    path: /api/capture
    method: POST
- name: events
  endpoint:
    path: /api/events
    method: GET
- name: users
  endpoint:
    path: /api/users
    method: GET
- name: projects
  endpoint:
    path: /api/projects
    method: GET
- name: feature_flags
  endpoint:
    path: /feature_flags
    method: GET
    data_selector: flags
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: events
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: data
- name: persons
  endpoint:
    path: /api/person
    method: GET
    data_selector: data
- name: events
  endpoint:
    path: /capture
    method: POST
    data_selector: event
    params: {}
- name: events
  endpoint:
    path: /capture
    method: POST
    data_selector: event
    params: {}
- name: capture_event
  endpoint:
    path: /capture
    method: POST
    data_selector: event
    params: {}
- name: alias_user
  endpoint:
    path: /alias
    method: POST
    data_selector: alias
    params: {}
- name: event_capture
  endpoint:
    path: /capture
    method: POST
    data_selector: event
- name: alias
  endpoint:
    path: /alias
    method: POST
    data_selector: alias
- name: identify
  endpoint:
    path: /identify
    method: POST
    data_selector: identify
- name: events
  endpoint:
    path: /capture
    method: POST
    data_selector: event
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
- name: persons
  endpoint:
    path: /api/persons
    method: GET
    data_selector: data
- name: event_capture
  endpoint:
    path: /capture
    method: POST
    data_selector: event
- name: person_profiles
  endpoint:
    path: /persons
    method: GET
    data_selector: profiles
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: events
- name: feature_flags
  endpoint:
    path: /api/feature_flags
    method: GET
    data_selector: feature_flags
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: event
    params: {}
- name: feature_flags
  endpoint:
    path: /api/feature_flags
    method: GET
    data_selector: feature_flags
    params: {}
- name: capture
  endpoint:
    path: /api/capture
    method: POST
    data_selector: event
    params: {}
- name: feature_flags
  endpoint:
    path: /api/feature_flags
    method: GET
    data_selector: flags
    params: {}
- name: get_feature_flag
  endpoint:
    path: /get_feature_flag
    method: GET
    data_selector: result
    params: {}
- name: get_feature_flag_payload
  endpoint:
    path: /get_feature_flag_payload
    method: GET
    data_selector: result
    params: {}
- name: get_feature_flags_and_payloads
  endpoint:
    path: /get_feature_flags_and_payloads
    method: GET
    data_selector: result
    params: {}
- name: get_feature_payloads
  endpoint:
    path: /get_feature_payloads
    method: GET
    data_selector: result
    params: {}
- name: get_feature_variants
  endpoint:
    path: /get_feature_variants
    method: GET
    data_selector: result
    params: {}
- name: get_flags_decision
  endpoint:
    path: /get_flags_decision
    method: GET
    data_selector: result
    params: {}
- name: load_feature_flags
  endpoint:
    path: /load_feature_flags
    method: GET
    data_selector: result
    params: {}
- name: get_feature_flag_result
  endpoint:
    path: /get_feature_flag_result
    method: GET
    data_selector: None
    params: {}
- name: get_remote_config_payload
  endpoint:
    path: /get_remote_config_payload
    method: GET
    data_selector: None
    params: {}
- name: alias
  endpoint:
    path: /alias
    method: POST
    data_selector: None
    params: {}
- name: group_identify
  endpoint:
    path: /group_identify
    method: POST
    data_selector: None
    params: {}
- name: identify_context
  endpoint:
    path: /identify_context
    method: POST
    data_selector: None
    params: {}
- name: set
  endpoint:
    path: /set
    method: POST
    data_selector: None
    params: {}
- name: set_once
  endpoint:
    path: /set_once
    method: POST
    data_selector: None
    params: {}
- name: capture
  endpoint:
    path: /api/capture
    method: POST
    data_selector: event
    params: {}
- name: feature_flags
  endpoint:
    path: /api/feature_flags
    method: GET
    data_selector: flags
    params: {}
- name: get_feature_flag
  endpoint:
    path: /api/feature_flag
    method: GET
    data_selector: flag
    params: {}
- name: get_feature_flag_payload
  endpoint:
    path: /api/feature_flag_payload
    method: GET
    data_selector: payload
    params: {}
- name: get_feature_flags_and_payloads
  endpoint:
    path: /api/feature_flags_and_payloads
    method: GET
    data_selector: flags_and_payloads
    params: {}
- name: get_feature_payloads
  endpoint:
    path: /api/feature_payloads
    method: GET
    data_selector: payloads
    params: {}
- name: get_feature_variants
  endpoint:
    path: /api/feature_variants
    method: GET
    data_selector: variants
    params: {}
- name: get_flags_decision
  endpoint:
    path: /api/flags_decision
    method: GET
    data_selector: flags_decision
    params: {}
- name: load_feature_flags
  endpoint:
    path: /api/load_feature_flags
    method: POST
    data_selector: load_flags
    params: {}
- name: alias
  endpoint:
    path: /alias
    method: POST
    data_selector: None
    params: {}
- name: group_identify
  endpoint:
    path: /group_identify
    method: POST
    data_selector: None
    params: {}
- name: identify_context
  endpoint:
    path: /identify_context
    method: POST
    data_selector: None
    params: {}
- name: set
  endpoint:
    path: /set
    method: POST
    data_selector: None
    params: {}
- name: set_once
  endpoint:
    path: /set_once
    method: POST
    data_selector: None
    params: {}
- name: get_feature_flag_result
  endpoint:
    path: /get_feature_flag_result
    method: GET
    data_selector: None
    params: {}
- name: get_remote_config_payload
  endpoint:
    path: /get_remote_config_payload
    method: GET
    data_selector: None
    params: {}
- name: flush
  endpoint:
    path: /flush
    method: GET
    data_selector: None
    params: {}
- name: join
  endpoint:
    path: /join
    method: GET
    data_selector: None
    params: {}
- name: shutdown
  endpoint:
    path: /shutdown
    method: GET
    data_selector: None
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
- name: feature_flags
  endpoint:
    path: /api/feature_flags
    method: GET
    data_selector: feature_flags
- name: autocapture
  endpoint:
    path: /autocapture
    method: POST
- name: events
  endpoint:
    path: /api/event/
    method: POST
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: data
- name: users
  endpoint:
    path: /api/user
    method: GET
    data_selector: data
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: events
    params: {}
- name: feature_flags
  endpoint:
    path: /api/feature_flag
    method: GET
    data_selector: feature_flags
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
- name: event_capture
  endpoint:
    path: /capture
    method: POST
    data_selector: data
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: data
    params: {}
- name: persons
  endpoint:
    path: /api/persons
    method: GET
    data_selector: data
    params: {}
- name: capture_events
  endpoint:
    path: /capture
    method: POST
    data_selector: event
    params: {}
- name: person_profiles
  endpoint:
    path: /persons
    method: GET
    data_selector: profiles
    params: {}
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: data
- name: persons
  endpoint:
    path: /api/person
    method: POST
    data_selector: data
- name: event_capture
  endpoint:
    path: /api/event
    method: POST
    data_selector: event
    params: {}
- name: feature_flag
  endpoint:
    path: /api/feature_flag
    method: GET
    data_selector: feature_flag
    params: {}
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: data
    params: {}
- name: feature_flags
  endpoint:
    path: /api/feature_flags
    method: GET
    data_selector: flags
    params: {}
- name: capture_events
  endpoint:
    path: /api/capture
    method: POST
    data_selector: event
- name: feature_flags
  endpoint:
    path: /api/feature_flags
    method: GET
    data_selector: flags
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: event
    params: {}
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: events
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: events
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: event
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
- name: events
  endpoint:
    path: /api/event/
    method: GET
    data_selector: data
    params: {}
- name: dashboard_api
  endpoint:
    path: /api/dashboard
    method: POST
    data_selector: event
    params: {}
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: data
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/capture
    method: POST
    data_selector: event
    params: {}
- name: error_tracking
  endpoint:
    path: /api/error
    method: POST
    data_selector: error
    params: {}
- name: events
  endpoint:
    path: /api/capture
    method: POST
    data_selector: event
    params: {}
- name: events
  endpoint:
    path: /api/events/
    method: POST
    data_selector: data
    params: {}
- name: persons
  endpoint:
    path: /api/persons/
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/capture
    method: POST
    data_selector: event
- name: persons
  endpoint:
    path: /api/persons
    method: GET
    data_selector: persons
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: event
- name: identify
  endpoint:
    path: /api/identify
    method: POST
    data_selector: person
- name: checkout_completed
  endpoint:
    path: /checkout/completed
    method: POST
    data_selector: event.data
    params: {}
- name: add_to_cart
  endpoint:
    path: /cart/add
    method: POST
    data_selector: event.data
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: event
    params: {}
- name: feature_flags
  endpoint:
    path: /api/feature_flags
    method: GET
    data_selector: feature_flags
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: events
    params: {}
- name: flags
  endpoint:
    path: /api/flags
    method: GET
    data_selector: flags
    params: {}
- name: posthog_event_capture
  endpoint:
    path: /api/capture
    method: POST
    data_selector: event
- name: conversion_tracking
  endpoint:
    path: /api/conversions
    method: POST
    data_selector: conversions
    params: {}
- name: event_capture
  endpoint:
    path: /i/v0/e
    method: POST
    data_selector: data
- name: feature_flags
  endpoint:
    path: /flags
    method: POST
    data_selector: data
- name: single_event
  endpoint:
    path: /i/v0/e
    method: POST
    data_selector: ''
    params: {}
- name: batch_events
  endpoint:
    path: /batch
    method: POST
    data_selector: ''
    params: {}
- name: alias
  endpoint:
    path: /i/v0/e
    method: POST
    data_selector: ''
    params: {}
- name: group_identify
  endpoint:
    path: /i/v0/e
    method: POST
    data_selector: ''
    params: {}
- name: capture_event
  endpoint:
    path: /i/v0/e/
    method: POST
    data_selector: payload
    params: {}
- name: flags
  endpoint:
    path: /api/flags
    method: GET
- name: flags
  endpoint:
    path: /flags?v=2
    method: POST
    data_selector: null
    params: {}
- name: event
  endpoint:
    path: /i/v0/e/
    method: POST
    data_selector: null
    params: {}
- name: flags
  endpoint:
    path: /flags?v=2
    method: POST
    data_selector: flags
    params: {}
- name: $feature_flag_called
  endpoint:
    path: /i/v0/e/
    method: POST
    data_selector: properties
    params: {}
- name: flags
  endpoint:
    path: /flags
    method: POST
    data_selector: properties
    params: {}
- name: queries
  endpoint:
    path: /api/projects/:project_id/query/
    method: POST
    data_selector: query
    params: {}
- name: actions
  endpoint:
    path: /api/projects/:project_id/actions/
    method: GET
    params:
      format: json
- name: actions
  endpoint:
    path: /api/projects/:project_id/actions/:id
    method: GET
    data_selector: response
    params: {}
- name: update_actions
  endpoint:
    path: /api/projects/:project_id/actions/:id
    method: PATCH
    data_selector: response
    params: {}
- name: delete_actions
  endpoint:
    path: /api/projects/:project_id/actions/:id
    method: DELETE
    data_selector: response
    params: {}
- name: activity_log
  endpoint:
    path: /api/projects/:project_id/activity_log/
    method: GET
- name: annotations
  endpoint:
    path: /api/projects/:project_id/annotations/
    method: GET
    data_selector: results
    params:
      limit: integer
      offset: integer
      search: string
- name: create_annotation
  endpoint:
    path: /api/projects/:project_id/annotations/
    method: POST
    data_selector: results
    params: {}
- name: retrieve_annotation
  endpoint:
    path: /api/projects/:project_id/annotations/:id/
    method: GET
    data_selector: results
    params: {}
- name: annotations
  endpoint:
    path: /api/projects/:project_id/annotations/:id
    method: PATCH
    data_selector: response
    params: {}
- name: delete_annotations
  endpoint:
    path: /api/projects/:project_id/annotations/:id
    method: DELETE
    data_selector: response
    params: {}
- name: batch_exports
  endpoint:
    path: /api/organizations/:organization_id/batch_exports/
    method: GET
    data_selector: results
    params:
      limit: 100
      offset: 0
- name: batch_exports
  endpoint:
    path: /api/organizations/:organization_id/batch_exports
    method: POST
    data_selector: results
    params: {}
- name: retrieve_batch_exports
  endpoint:
    path: /api/organizations/:organization_id/batch_exports/:id
    method: GET
    data_selector: results
    params: {}
- name: update_batch_exports
  endpoint:
    path: /api/organizations/:organization_id/batch_exports/:id
    method: PATCH
    data_selector: results
    params: {}
- name: delete_batch_exports
  endpoint:
    path: /api/organizations/:organization_id/batch_exports/:id
    method: DELETE
    data_selector: results
    params: {}
- name: list_all_batch_exports
  endpoint:
    path: /api/projects/:project_id/batch_exports
    method: GET
    data_selector: results
    params: {}
- name: batch_export
  endpoint:
    path: /api/projects/:project_id/batch_exports
    method: POST
    data_selector: results
- name: batch_export_backfills
  endpoint:
    path: /api/projects/:project_id/batch_exports/:batch_export_id/backfills
    method: GET
    data_selector: results
- name: batch_export_runs
  endpoint:
    path: /api/projects/:project_id/batch_exports/:batch_export_id/runs
    method: GET
    data_selector: results
- name: cohorts
  endpoint:
    path: /api/projects/:project_id/cohorts/
    method: GET
    data_selector: results
- name: retrieve_cohorts
  endpoint:
    path: /api/projects/:project_id/cohorts/:id
    method: GET
- name: update_cohorts
  endpoint:
    path: /api/projects/:project_id/cohorts/:id
    method: PATCH
- name: delete_cohorts
  endpoint:
    path: /api/projects/:project_id/cohorts/:id
    method: DELETE
- name: retrieve_cohorts_activity
  endpoint:
    path: /api/projects/:project_id/cohorts/:id/activity
    method: GET
- name: retrieve_cohorts_duplicate_as_static_cohort
  endpoint:
    path: /api/projects/:project_id/cohorts/:id/duplicate_as_static_cohort
    method: GET
- name: retrieve_cohorts_persons
  endpoint:
    path: /api/projects/:project_id/cohorts/:id/persons
    method: GET
- name: retrieve_cohorts_activity_log
  endpoint:
    path: /api/projects/:project_id/cohorts/activity
    method: GET
- name: dashboards
  endpoint:
    path: /api/projects/:project_id/dashboards/
    method: GET
    data_selector: results
    params:
      format: json
      limit: 100
      offset: 0
- name: dashboards_collaborators
  endpoint:
    path: /api/projects/:project_id/dashboards/:dashboard_id/collaborators
    method: GET
    data_selector: collaborators
- name: create_dashboard_collaborator
  endpoint:
    path: /api/projects/:project_id/dashboards/:dashboard_id/collaborators
    method: POST
    data_selector: collaborator
- name: delete_dashboard_collaborator
  endpoint:
    path: /api/projects/:project_id/dashboards/:dashboard_id/collaborators/:user__uuid
    method: DELETE
    data_selector: collaborator
- name: dashboards_sharing
  endpoint:
    path: /api/projects/:project_id/dashboards/:dashboard_id/sharing
    method: GET
    data_selector: sharing
- name: create_dashboard_sharing_refresh
  endpoint:
    path: /api/projects/:project_id/dashboards/:dashboard_id/sharing/refresh
    method: POST
    data_selector: sharing_refresh
- name: retrieve_dashboard
  endpoint:
    path: /api/projects/:project_id/dashboards/:id
    method: GET
    data_selector: dashboard
- name: update_dashboard
  endpoint:
    path: /api/projects/:project_id/dashboards/:id
    method: PATCH
    data_selector: dashboard
- name: delete_dashboard
  endpoint:
    path: /api/projects/:project_id/dashboards/:id
    method: DELETE
    data_selector: dashboard
- name: dashboard_templates
  endpoint:
    path: /api/projects/:project_id/dashboard_templates/
    method: GET
    data_selector: results
    params:
      incremental: project_id
- name: dashboard_template
  endpoint:
    path: /api/projects/:project_id/dashboard_templates/:id
    method: GET
    data_selector: ''
    params: {}
- name: update_dashboard_template
  endpoint:
    path: /api/projects/:project_id/dashboard_templates/:id
    method: PATCH
- name: delete_dashboard_template
  endpoint:
    path: /api/projects/:project_id/dashboard_templates/:id
    method: DELETE
- name: retrieve_dashboard_templates_json_schema
  endpoint:
    path: /api/projects/:project_id/dashboard_templates/json_schema
    method: GET
- name: early_access_feature
  endpoint:
    path: /api/projects/:project_id/early_access_feature/
    method: GET
    data_selector: results
- name: update_early_access_feature
  endpoint:
    path: /api/projects/:project_id/early_access_feature/:id
    method: PATCH
    data_selector: response
    params: {}
- name: delete_early_access_feature
  endpoint:
    path: /api/projects/:project_id/early_access_feature/:id
    method: DELETE
    data_selector: response
    params: {}
- name: app_metrics
  endpoint:
    path: /api/environments/:project_id/app_metrics/:id
    method: GET
    data_selector: null
    params: {}
- name: app_metrics_error_details
  endpoint:
    path: /api/environments/:project_id/app_metrics/:id/error_details
    method: GET
    data_selector: null
    params: {}
- name: historical_exports
  endpoint:
    path: /api/environments/:project_id/app_metrics/:plugin_config_id/historical_exports
    method: GET
    data_selector: null
    params: {}
- name: historical_exports_retrieve
  endpoint:
    path: /api/environments/:project_id/app_metrics/:plugin_config_id/historical_exports/:id
    method: GET
    data_selector: null
    params: {}
- name: app_metrics_historical_exports
  endpoint:
    path: /api/environments/:project_id/app_metrics/:plugin_config_id/historical_exports/:id
    method: GET
- name: batch_exports
  endpoint:
    path: /api/environments/:project_id/batch_exports
    method: GET
    params:
      limit: integer
      offset: integer
- name: batch_exports_create
  endpoint:
    path: /api/environments/:project_id/batch_exports
    method: POST
- name: batch_exports_backfills
  endpoint:
    path: /api/environments/:project_id/batch_exports/:batch_export_id/backfills
    method: GET
- name: batch_exports_backfills_create
  endpoint:
    path: /api/environments/:project_id/batch_exports/:batch_export_id/backfills
    method: POST
- name: create_batch_export_backfill
  endpoint:
    path: /api/environments/:project_id/batch_exports/:batch_export_id/backfills
    method: POST
    data_selector: response
    params: {}
- name: retrieve_batch_export_backfill
  endpoint:
    path: /api/environments/:project_id/batch_exports/:batch_export_id/backfills/:id
    method: GET
    data_selector: response
    params: {}
- name: cancel_batch_export_backfill
  endpoint:
    path: /api/environments/:project_id/batch_exports/:batch_export_id/backfills/:id/cancel
    method: POST
    data_selector: response
    params: {}
- name: event_definitions
  endpoint:
    path: /api/projects/:project_id/event_definitions/
    method: GET
- name: event_definition_metrics
  endpoint:
    path: /api/projects/:project_id/event_definitions/:id/metrics
    method: GET
- name: events
  endpoint:
    path: /api/projects/:project_id/events/
    method: GET
    data_selector: results
    params: {}
- name: retrieve_event
  endpoint:
    path: /api/projects/:project_id/events/:id/
    method: GET
    data_selector: ''
    params: {}
- name: retrieve_event_values
  endpoint:
    path: /api/projects/:project_id/events/values
    method: GET
    data_selector: ''
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
    params:
      distinct_id: buyer@test.com
      event: product_impression
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: records
- name: experiments
  endpoint:
    path: /api/projects/:project_id/experiments/
    method: GET
    data_selector: results
    params:
      limit: '100'
      offset: '0'
- name: create_experiment
  endpoint:
    path: /api/projects/:project_id/experiments
    method: POST
- name: retrieve_experiment
  endpoint:
    path: /api/projects/:project_id/experiments/:id
    method: GET
- name: update_experiment
  endpoint:
    path: /api/projects/:project_id/experiments/:id
    method: PATCH
- name: delete_experiment
  endpoint:
    path: /api/projects/:project_id/experiments/:id
    method: DELETE
- name: create_exposure_cohort_for_experiment
  endpoint:
    path: /api/projects/:project_id/experiments/:id/create_exposure_cohort_for_experiment
    method: POST
- name: duplicate_experiment
  endpoint:
    path: /api/projects/:project_id/experiments/:id/duplicate
    method: POST
- name: retrieve_experiments_requires_flag_implementation
  endpoint:
    path: /api/projects/:project_id/experiments/requires_flag_implementation
    method: GET
- name: feature_flags
  endpoint:
    path: /api/projects/:project_id/feature_flags/
    method: GET
    data_selector: results
    params:
      active: 'true'
      limit: 100
- name: create_feature_flags
  endpoint:
    path: /api/projects/:project_id/feature_flags
    method: POST
    data_selector: ''
    params: {}
- name: list_feature_flags_role_access
  endpoint:
    path: /api/projects/:project_id/feature_flags/:feature_flag_id/role_access
    method: GET
    data_selector: ''
    params: {}
- name: create_feature_flags_role_access
  endpoint:
    path: /api/projects/:project_id/feature_flags/:feature_flag_id/role_access
    method: POST
    data_selector: ''
    params: {}
- name: retrieve_feature_flags_role_access
  endpoint:
    path: /api/projects/:project_id/feature_flags/:feature_flag_id/role_access/:id
    method: GET
    data_selector: ''
    params: {}
- name: delete_feature_flags_role_access
  endpoint:
    path: /api/projects/:project_id/feature_flags/:feature_flag_id/role_access/:id
    method: DELETE
    data_selector: ''
    params: {}
- name: retrieve_feature_flags
  endpoint:
    path: /api/projects/:project_id/feature_flags/:id
    method: GET
    data_selector: ''
    params: {}
- name: feature_flag
  endpoint:
    path: /api/projects/:project_id/feature_flags/:id
    method: PATCH
- name: feature_flag_activity
  endpoint:
    path: /api/projects/:project_id/feature_flags/:id/activity
    method: GET
- name: feature_flag_remote_config
  endpoint:
    path: /api/projects/:project_id/feature_flags/:id/remote_config
    method: GET
- name: feature_flag_status
  endpoint:
    path: /api/projects/:project_id/feature_flags/:id/status
    method: GET
- name: feature_flag_bulk_keys
  endpoint:
    path: /api/projects/:project_id/feature_flags/bulk_keys
    method: POST
- name: feature_flag_local_evaluation
  endpoint:
    path: /api/projects/:project_id/feature_flags/local_evaluation
    method: GET
- name: groups
  endpoint:
    path: /api/projects/:project_id/groups/
    method: GET
    data_selector: results
    params:
      group_type_index: integer
- name: create_groups
  endpoint:
    path: /api/projects/:project_id/groups
    method: POST
    data_selector: ''
    params:
      group_type_index: integer
      group_key: string
- name: groups_activity
  endpoint:
    path: /api/projects/:project_id/groups/activity
    method: GET
    data_selector: ''
    params:
      group_type_index: integer
      id: string
- name: delete_property
  endpoint:
    path: /api/projects/:project_id/groups/delete_property
    method: POST
    data_selector: ''
    params:
      group_type_index: integer
      group_key: string
- name: find_groups
  endpoint:
    path: /api/projects/:project_id/groups/find
    method: GET
    data_selector: ''
    params:
      group_key: string
      group_type_index: integer
- name: groups_property_definitions
  endpoint:
    path: /api/projects/:project_id/groups/property_definitions
    method: GET
- name: groups_property_values
  endpoint:
    path: /api/projects/:project_id/groups/property_values
    method: GET
- name: groups_related
  endpoint:
    path: /api/projects/:project_id/groups/related
    method: GET
- name: groups_update_property
  endpoint:
    path: /api/projects/:project_id/groups/update_property
    method: POST
- name: groups_upsert_properties
  endpoint:
    path: /api/projects/:project_id/groups/upsert_properties
    method: POST
- name: groups_types
  endpoint:
    path: /api/projects/:project_id/groups_types
    method: GET
    data_selector: results
    params: {}
- name: groups_types_metrics
  endpoint:
    path: /api/projects/:project_id/groups_types/:group_type_index/metrics
    method: GET
    data_selector: results
    params: {}
- name: update_groups_types_metrics
  endpoint:
    path: /api/projects/:project_id/groups_types/:group_type_index/metrics/:id
    method: PATCH
- name: delete_groups_types_metrics
  endpoint:
    path: /api/projects/:project_id/groups_types/:group_type_index/metrics/:id
    method: DELETE
- name: update_groups_types_metadata
  endpoint:
    path: /api/projects/:project_id/groups_types/update_metadata
    method: PATCH
- name: hog_functions
  endpoint:
    path: /api/projects/:project_id/hog_functions/
    method: GET
    data_selector: results
    params:
      limit: integer
      offset: integer
      created_at: string
      created_by: integer
      enabled: boolean
      id: string
      search: string
      type: array
      updated_at: string
- name: create_hog_function
  endpoint:
    path: /api/projects/:project_id/hog_functions
    method: POST
    data_selector: null
    params: {}
- name: retrieve_hog_function
  endpoint:
    path: /api/projects/:project_id/hog_functions/:id
    method: GET
    data_selector: null
    params: {}
- name: update_hog_function
  endpoint:
    path: /api/projects/:project_id/hog_functions/:id
    method: PATCH
    data_selector: null
    params: {}
- name: delete_hog_function
  endpoint:
    path: /api/projects/:project_id/hog_functions/:id
    method: DELETE
    data_selector: null
    params: {}
- name: create_hog_function_broadcast
  endpoint:
    path: /api/projects/:project_id/hog_functions/:id/broadcast
    method: POST
    data_selector: null
    params: {}
- name: create_hog_function_invocations
  endpoint:
    path: /api/projects/:project_id/hog_functions/:id/invocations
    method: POST
    data_selector: null
    params: {}
- name: hog_function_logs
  endpoint:
    path: /api/projects/:project_id/hog_functions/:id/logs
    method: GET
- name: hog_function_metrics
  endpoint:
    path: /api/projects/:project_id/hog_functions/:id/metrics
    method: GET
- name: hog_function_metrics_totals
  endpoint:
    path: /api/projects/:project_id/hog_functions/:id/metrics/totals
    method: GET
- name: hog_function_icon
  endpoint:
    path: /api/projects/:project_id/hog_functions/icon
    method: GET
- name: hog_function_icons
  endpoint:
    path: /api/projects/:project_id/hog_functions/icons
    method: GET
- name: hog_functions_rearrange
  endpoint:
    path: /api/projects/:project_id/hog_functions/rearrange
    method: PATCH
- name: insights
  endpoint:
    path: /api/projects/:project_id/insights/
    method: GET
    data_selector: results
    params: {}
- name: create_insights
  endpoint:
    path: /api/projects/:project_id/insights
    method: POST
- name: list_insights_sharing
  endpoint:
    path: /api/projects/:project_id/insights/:insight_id/sharing
    method: GET
- name: create_insights_sharing_refresh
  endpoint:
    path: /api/projects/:project_id/insights/:insight_id/sharing/refresh
    method: POST
- name: retrieve_insights
  endpoint:
    path: /api/projects/:project_id/insights/:id
    method: GET
- name: update_insights
  endpoint:
    path: /api/projects/:project_id/insights/:id
    method: PATCH
- name: delete_insights
  endpoint:
    path: /api/projects/:project_id/insights/:id
    method: DELETE
- name: retrieve_insights_activity
  endpoint:
    path: /api/projects/:project_id/insights/:id/activity
    method: GET
- name: create_insights_viewed
  endpoint:
    path: /api/projects/:project_id/insights/:id/viewed
    method: POST
- name: retrieve_insights_activity_overall
  endpoint:
    path: /api/projects/:project_id/insights/activity
    method: GET
- name: create_insights_cancel
  endpoint:
    path: /api/projects/:project_id/insights/cancel
    method: POST
- name: retrieve_insights_my_last_viewed
  endpoint:
    path: /api/projects/:project_id/insights/my_last_viewed
    method: GET
- name: list_invites
  endpoint:
    path: /api/organizations/:organization_id/invites/
    method: GET
    data_selector: results
    params:
      limit: integer
      offset: integer
- name: create_invite
  endpoint:
    path: /api/organizations/:organization_id/invites
    method: POST
    data_selector: id
    params:
      target_email: string
      first_name: string
      level: integer
      message: string
      private_project_access: List of team IDs and access levels
      send_email: boolean
      combine_pending_invites: boolean
- name: delete_invite
  endpoint:
    path: /api/organizations/:organization_id/invites/:id
    method: DELETE
    data_selector: null
    params: {}
- name: create_invites_bulk
  endpoint:
    path: /api/organizations/:organization_id/invites/bulk
    method: POST
    data_selector: null
    params:
      target_email: string
      first_name: string
      level: integer
      message: string
      private_project_access: List of team IDs and access levels
      send_email: boolean
      combine_pending_invites: boolean
- name: members
  endpoint:
    path: /api/organizations/:organization_id/members/
    method: GET
    data_selector: results
    params:
      limit: integer
      offset: integer
- name: update_member
  endpoint:
    path: /api/organizations/:organization_id/members/:user__uuid
    method: PATCH
    data_selector: ''
    params: {}
- name: delete_member
  endpoint:
    path: /api/organizations/:organization_id/members/:user__uuid
    method: DELETE
    data_selector: ''
    params: {}
- name: scoped_api_keys
  endpoint:
    path: /api/organizations/:organization_id/members/:user__uuid/scoped_api_keys
    method: GET
    data_selector: ''
    params: {}
- name: organization
  endpoint:
    path: /api/organizations/@current
    method: GET
- name: members
  endpoint:
    path: /api/organizations/:parent_lookup_organization_id/members/
    method: GET
- name: list_notebooks
  endpoint:
    path: /api/projects/:project_id/notebooks/
    method: GET
    data_selector: results
    params: {}
- name: create_notebooks
  endpoint:
    path: /api/projects/:project_id/notebooks/
    method: POST
    data_selector: ''
    params: {}
- name: retrieve_notebooks
  endpoint:
    path: /api/projects/:project_id/notebooks/:short_id
    method: GET
- name: update_notebooks
  endpoint:
    path: /api/projects/:project_id/notebooks/:short_id
    method: PATCH
- name: delete_notebooks
  endpoint:
    path: /api/projects/:project_id/notebooks/:short_id
    method: DELETE
- name: retrieve_notebooks_activity
  endpoint:
    path: /api/projects/:project_id/notebooks/:short_id/activity
    method: GET
- name: retrieve_notebooks_recording_comments
  endpoint:
    path: /api/projects/:project_id/notebooks/recording_comments
    method: GET
- name: organizations
  endpoint:
    path: /api/organizations/
    method: GET
    data_selector: organizations
    params:
      incremental: updated_at
- name: organizations
  endpoint:
    path: /api/organizations
    method: POST
    data_selector: string
- name: organization_by_id
  endpoint:
    path: /api/organizations/:id
    method: GET
    data_selector: string
- name: organization_update
  endpoint:
    path: /api/organizations/:id
    method: PATCH
    data_selector: string
- name: organization_delete
  endpoint:
    path: /api/organizations/:id
    method: DELETE
    data_selector: string
- name: batch_exports
  endpoint:
    path: /api/organizations/:organization_id/batch_exports
    method: GET
    data_selector: results
- name: batch_exports
  endpoint:
    path: /api/organizations/:organization_id/batch_exports
    method: POST
    data_selector: id
    params: {}
- name: retrieve_batch_exports
  endpoint:
    path: /api/organizations/:organization_id/batch_exports/:id
    method: GET
    data_selector: id
    params: {}
- name: update_batch_exports
  endpoint:
    path: /api/organizations/:organization_id/batch_exports/:id
    method: PATCH
    data_selector: id
    params: {}
- name: delete_batch_exports
  endpoint:
    path: /api/organizations/:organization_id/batch_exports/:id
    method: DELETE
    data_selector: id
    params: {}
- name: persons
  endpoint:
    path: /api/projects/:project_id/persons/
    method: GET
    data_selector: results
    params: {}
- name: retrieve_person
  endpoint:
    path: /api/projects/:project_id/persons/:id
    method: GET
    data_selector: results
    params: {}
- name: update_person
  endpoint:
    path: /api/projects/:project_id/persons/:id
    method: PATCH
    data_selector: results
    params: {}
- name: delete_persons
  endpoint:
    path: /api/projects/:project_id/persons/:id
    method: DELETE
- name: retrieve_persons_activity
  endpoint:
    path: /api/projects/:project_id/persons/:id/activity
    method: GET
- name: create_persons_delete_events
  endpoint:
    path: /api/projects/:project_id/persons/:id/delete_events
    method: POST
- name: create_persons_delete_property
  endpoint:
    path: /api/projects/:project_id/persons/:id/delete_property
    method: POST
- name: retrieve_persons_properties_timeline
  endpoint:
    path: /api/projects/:project_id/persons/:id/properties_timeline
    method: GET
- name: create_persons_split
  endpoint:
    path: /api/projects/:project_id/persons/:id/split
    method: POST
- name: create_persons_update_property
  endpoint:
    path: /api/projects/:project_id/persons/:id/update_property
    method: POST
- name: retrieve_persons_activity
  endpoint:
    path: /api/projects/:project_id/persons/activity
    method: GET
- name: create_persons_bulk_delete
  endpoint:
    path: /api/projects/:project_id/persons/bulk_delete
    method: POST
- name: retrieve_persons_cohorts
  endpoint:
    path: /api/projects/:project_id/persons/cohorts
    method: GET
- name: retrieve_persons_funnel
  endpoint:
    path: /api/projects/:project_id/persons/funnel
    method: GET
- name: create_persons_funnel
  endpoint:
    path: /api/projects/:project_id/persons/funnel
    method: POST
- name: retrieve_persons_funnel_correlation
  endpoint:
    path: /api/projects/:project_id/persons/funnel/correlation
    method: GET
- name: create_persons_funnel_correlation
  endpoint:
    path: /api/projects/:project_id/persons/funnel/correlation
    method: POST
- name: retrieve_persons_lifecycle
  endpoint:
    path: /api/projects/:project_id/persons/lifecycle
    method: GET
- name: create_persons_reset_person_distinct_id
  endpoint:
    path: /api/projects/:project_id/persons/reset_person_distinct_id
    method: POST
- name: projects
  endpoint:
    path: /api/organizations/:organization_id/projects/
    method: GET
    data_selector: results
    params:
      limit: integer
      offset: integer
- name: create_project
  endpoint:
    path: /api/organizations/:organization_id/projects
    method: POST
    data_selector: ''
    params: {}
- name: retrieve_project
  endpoint:
    path: /api/organizations/:organization_id/projects/:id
    method: GET
    data_selector: ''
    params: {}
- name: update_project
  endpoint:
    path: /api/organizations/:organization_id/projects/:id
    method: PATCH
    data_selector: ''
    params: {}
- name: delete_project
  endpoint:
    path: /api/organizations/:organization_id/projects/:id
    method: DELETE
    data_selector: ''
    params: {}
- name: retrieve_activity
  endpoint:
    path: /api/organizations/:organization_id/projects/:id/activity
    method: GET
    data_selector: ''
    params: {}
- name: update_add_product_intent
  endpoint:
    path: /api/organizations/:organization_id/projects/:id/add_product_intent
    method: PATCH
- name: create_change_organization
  endpoint:
    path: /api/organizations/:organization_id/projects/:id/change_organization
    method: POST
- name: update_complete_product_onboarding
  endpoint:
    path: /api/organizations/:organization_id/projects/:id/complete_product_onboarding
    method: PATCH
- name: delete_secret_token_backup
  endpoint:
    path: /api/organizations/:organization_id/projects/:id/delete_secret_token_backup
    method: PATCH
    data_selector: response
    params: {}
- name: is_generating_demo_data
  endpoint:
    path: /api/organizations/:organization_id/projects/:id/is_generating_demo_data
    method: GET
    data_selector: response
    params: {}
- name: reset_token
  endpoint:
    path: /api/organizations/:organization_id/projects/:id/reset_token
    method: PATCH
    data_selector: response
    params: {}
- name: rotate_secret_token
  endpoint:
    path: /api/organizations/:organization_id/projects/:id/rotate_secret_token
    method: PATCH
    data_selector: response
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: property_definitions
  endpoint:
    path: /api/projects/:project_id/property_definitions/
    method: GET
    data_selector: results
    params:
      event_names: ''
      exclude_core_properties: false
      exclude_hidden: false
      excluded_properties: ''
      filter_by_event_names: false
      group_type_index: 0
      is_feature_flag: false
      is_numerical: false
      limit: 100
      offset: 0
      properties: ''
      search: ''
      type: event
- name: retrieve_property_definition
  endpoint:
    path: /api/projects/:project_id/property_definitions/:id/
    method: GET
    data_selector: ''
    params: {}
- name: update_property_definition
  endpoint:
    path: /api/projects/:project_id/property_definitions/:id/
    method: PATCH
    data_selector: ''
    params:
      name: ''
      is_numerical: false
      property_type: ''
      tags: []
- name: delete_property_definition
  endpoint:
    path: /api/projects/:project_id/property_definitions/:id/
    method: DELETE
    data_selector: ''
    params: {}
- name: property_definitions_seen_together
  endpoint:
    path: /api/projects/:project_id/property_definitions/seen_together
    method: GET
    data_selector: null
    params: {}
- name: create_query
  endpoint:
    path: /api/projects/:project_id/query/
    method: POST
    data_selector: ''
    params: {}
- name: retrieve_query
  endpoint:
    path: /api/projects/:project_id/query/:id/
    method: GET
    data_selector: ''
    params: {}
- name: delete_query
  endpoint:
    path: /api/projects/:project_id/query/:id/
    method: DELETE
    data_selector: ''
    params: {}
- name: check_auth_for_async
  endpoint:
    path: /api/projects/:project_id/query/check_auth_for_async/
    method: POST
    data_selector: ''
    params: {}
- name: retrieve_query_draft_sql
  endpoint:
    path: /api/projects/:project_id/query/draft_sql/
    method: GET
    data_selector: ''
    params: {}
- name: query_upgrade
  endpoint:
    path: /api/projects/:project_id/query/upgrade
    method: POST
    data_selector: query
- name: roles
  endpoint:
    path: /api/organizations/:organization_id/roles
    method: GET
    data_selector: results
    params:
      limit: integer
      offset: integer
- name: create_roles
  endpoint:
    path: /api/organizations/:organization_id/roles
    method: POST
    data_selector: results
    params:
      name: string
      feature_flags_access_level: integer
- name: retrieve_roles
  endpoint:
    path: /api/organizations/:organization_id/roles/:id
    method: GET
    data_selector: results
    params: {}
- name: update_roles
  endpoint:
    path: /api/organizations/:organization_id/roles/:id
    method: PATCH
    data_selector: response
    params: {}
- name: delete_roles
  endpoint:
    path: /api/organizations/:organization_id/roles/:id
    method: DELETE
    data_selector: response
    params: {}
- name: list_all_roles_role_memberships
  endpoint:
    path: /api/organizations/:organization_id/roles/:role_id/role_memberships
    method: GET
    data_selector: results
    params:
      limit: limit
      offset: offset
- name: create_roles_role_memberships
  endpoint:
    path: /api/organizations/:organization_id/roles/:role_id/role_memberships
    method: POST
    data_selector: response
    params:
      user_uuid: string
- name: delete_roles_role_memberships
  endpoint:
    path: /api/organizations/:organization_id/roles/:role_id/role_memberships/:id
    method: DELETE
    data_selector: response
    params: {}
- name: session_recordings
  endpoint:
    path: /api/projects/:project_id/session_recordings/
    method: GET
    data_selector: results
    params:
      limit: limit
      offset: offset
- name: session_recording_details
  endpoint:
    path: /api/projects/:project_id/session_recordings/:id/
    method: GET
    data_selector: ''
    params: {}
- name: update_session_recordings
  endpoint:
    path: /api/projects/:project_id/session_recordings/:id
    method: PATCH
- name: delete_session_recordings
  endpoint:
    path: /api/projects/:project_id/session_recordings/:id
    method: DELETE
- name: list_session_recordings_sharing
  endpoint:
    path: /api/projects/:project_id/session_recordings/:recording_id/sharing
    method: GET
- name: create_session_recordings_sharing_refresh
  endpoint:
    path: /api/projects/:project_id/session_recordings/:recording_id/sharing/refresh
    method: POST
- name: session_recording_playlists
  endpoint:
    path: /api/projects/:project_id/session_recording_playlists/
    method: GET
- name: create_session_recording_playlists
  endpoint:
    path: /api/projects/:project_id/session_recording_playlists/
    method: POST
- name: session_recording_playlists
  endpoint:
    path: /api/projects/:project_id/session_recording_playlists/:short_id
    method: GET
- name: update_session_recording_playlists
  endpoint:
    path: /api/projects/:project_id/session_recording_playlists/:short_id
    method: PATCH
- name: delete_session_recording_playlists
  endpoint:
    path: /api/projects/:project_id/session_recording_playlists/:short_id
    method: DELETE
- name: session_recording_playlists_recordings
  endpoint:
    path: /api/projects/:project_id/session_recording_playlists/:short_id/recordings
    method: GET
- name: create_session_recording_playlists_recordings
  endpoint:
    path: /api/projects/:project_id/session_recording_playlists/:short_id/recordings/:session_recording_id
    method: POST
- name: delete_session_recording_playlists_recordings
  endpoint:
    path: /api/projects/:project_id/session_recording_playlists/:short_id/recordings/:session_recording_id
    method: DELETE
- name: sessions_property_definitions
  endpoint:
    path: /api/projects/:project_id/sessions/property_definitions
    method: GET
    data_selector: null
    params: {}
- name: sessions_values
  endpoint:
    path: /api/projects/:project_id/sessions/values
    method: GET
    data_selector: null
    params: {}
- name: list_subscriptions
  endpoint:
    path: /api/projects/:project_id/subscriptions/
    method: GET
    data_selector: results
    params:
      limit: limit
      offset: offset
- name: create_subscription
  endpoint:
    path: /api/projects/:project_id/subscriptions/
    method: POST
    data_selector: results
    params: {}
- name: subscriptions
  endpoint:
    path: /api/projects/:project_id/subscriptions/:id
    method: GET
    data_selector: ''
- name: update_subscriptions
  endpoint:
    path: /api/projects/:project_id/subscriptions/:id
    method: PATCH
    data_selector: ''
- name: delete_subscriptions
  endpoint:
    path: /api/projects/:project_id/subscriptions/:id
    method: DELETE
    data_selector: ''
- name: surveys
  endpoint:
    path: /api/projects/:project_id/surveys/
    method: GET
    data_selector: results
    params:
      limit: number
      offset: number
      search: string
- name: create_survey
  endpoint:
    path: /api/projects/:project_id/surveys
    method: POST
- name: retrieve_survey
  endpoint:
    path: /api/projects/:project_id/surveys/:id
    method: GET
- name: update_survey
  endpoint:
    path: /api/projects/:project_id/surveys/:id
    method: PATCH
- name: surveys_activity
  endpoint:
    path: /api/projects/:project_id/surveys/activity
    method: GET
- name: surveys_responses_count
  endpoint:
    path: /api/projects/:project_id/surveys/responses_count
    method: GET
- name: surveys_stats
  endpoint:
    path: /api/projects/:project_id/surveys/stats
    method: GET
- name: surveys_stats_retrieve
  endpoint:
    path: /api/projects/:project_id/surveys/:id/stats
    method: GET
- name: surveys_summarize_responses
  endpoint:
    path: /api/projects/:project_id/surveys/:id/summarize_responses
    method: POST
- name: surveys_delete
  endpoint:
    path: /api/projects/:project_id/surveys/:id
    method: DELETE
- name: users
  endpoint:
    path: /api/users/
    method: GET
    data_selector: results
    params:
      limit: limit
      offset: offset
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: results
    params:
      limit: limit
      offset: offset
- name: user_by_uuid
  endpoint:
    path: /api/users/:uuid
    method: GET
    data_selector: results
    params: {}
- name: update_user
  endpoint:
    path: /api/users/:uuid
    method: PATCH
    data_selector: results
    params: {}
- name: users
  endpoint:
    path: /api/users/:uuid
    method: PATCH
    data_selector: response
    params:
      uuid: string
- name: users_hedgehog_config
  endpoint:
    path: /api/users/:uuid/hedgehog_config
    method: GET
    data_selector: response
    params:
      uuid: string
- name: users_scene_personalisation
  endpoint:
    path: /api/users/:uuid/scene_personalisation
    method: POST
    data_selector: response
    params:
      uuid: string
- name: users_two_factor_backup_codes
  endpoint:
    path: /api/users/:uuid/two_factor_backup_codes
    method: POST
    data_selector: response
    params:
      uuid: string
- name: web_analytics_breakdown
  endpoint:
    path: /api/projects/:project_id/web_analytics/breakdown/
    method: GET
    data_selector: results
    params:
      limit: 100
      offset: 0
      filter_test_accounts: true
- name: web_analytics_overview
  endpoint:
    path: /api/projects/:project_id/web_analytics/overview/
    method: GET
    data_selector: results
    params:
      filter_test_accounts: true
- name: events
  endpoint:
    path: /api/capture
    method: POST
    data_selector: events
- name: persons
  endpoint:
    path: /api/persons
    method: GET
    data_selector: persons
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: events
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
    params: {}
- name: capture
  endpoint:
    path: /api/capture
    method: POST
    data_selector: data
    params: {}
- name: flags
  endpoint:
    path: /api/flags
    method: GET
    data_selector: data
    params: {}
- name: queries
  endpoint:
    path: /api/queries
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: data
    params: {}
- name: persons
  endpoint:
    path: /api/persons
    method: GET
    data_selector: data
    params: {}
- name: posthog
  endpoint:
    path: /posthog/init
    method: POST
    data_selector: response
    params: {}
- name: batch_exports
  endpoint:
    path: /api/batch-exports
    method: GET
    data_selector: data
    params: {}
- name: queries
  endpoint:
    path: /api/queries
    method: GET
    data_selector: data
    params: {}
- name: real_time_destinations
  endpoint:
    path: /api/destinations
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
- name: users
  endpoint:
    path: /api/user
    method: GET
    data_selector: data
- name: revenue
  endpoint:
    path: /api/revenue
    method: POST
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
    params: {}
- name: properties
  endpoint:
    path: /api/properties
    method: GET
    data_selector: properties
    params: {}
- name: sessions
  endpoint:
    path: /api/sessions
    method: GET
    data_selector: sessions
    params: {}
- name: actions
  endpoint:
    path: /api/actions
    method: GET
    data_selector: actions
    params: {}
- name: persons
  endpoint:
    path: /api/persons
    method: GET
    data_selector: persons
    params: {}
- name: cohorts
  endpoint:
    path: /api/cohorts
    method: GET
    data_selector: cohorts
    params: {}
- name: groups
  endpoint:
    path: /api/groups
    method: GET
    data_selector: groups
    params: {}
- name: events
  endpoint:
    path: /api/event
    method: GET
    data_selector: events
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
- name: events
  endpoint:
    path: /data-management/events
    method: GET
    data_selector: events
    params: {}
- name: events
  endpoint:
    path: /api/event/
    method: POST
    data_selector: event
    params: {}
- name: actions
  endpoint:
    path: /api/actions
    method: GET
    data_selector: actions
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
    params: {}
- name: persons
  endpoint:
    path: /api/persons
    method: DELETE
    data_selector: records
    params: {}
- name: persons
  endpoint:
    path: /api/projects/:project_id/persons/
    method: GET
    data_selector: persons
- name: delete_person
  endpoint:
    path: /api/projects/:project_id/persons/:person_id/
    method: DELETE
- name: sessions
  endpoint:
    path: /api/sessions
    method: GET
- name: sessions
  endpoint:
    path: /api/sessions
    method: GET
    data_selector: sessions
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
- name: events
  endpoint:
    path: /api/event
    method: GET
    data_selector: results
- name: sessions
  endpoint:
    path: /api/session
    method: GET
    data_selector: results
- name: query_log
  endpoint:
    path: /api/query_log
    method: GET
    data_selector: records
    params: {}
- name: query_log
  endpoint:
    path: /query_log
    method: SELECT
    data_selector: records
    params: {}
- name: annotations
  endpoint:
    path: /api/projects/{project_id}/annotations
    method: GET
    data_selector: annotations
- name: annotations
  endpoint:
    path: /api/annotations
    method: GET
    data_selector: records
    params: {}
- name: comments
  endpoint:
    path: /data-management/comments
    method: GET
    data_selector: comments
    params: {}
- name: heatmaps
  endpoint:
    path: /api/heatmaps
    method: GET
    data_selector: data
    params: {}
- name: scrollmaps
  endpoint:
    path: /api/scrollmaps
    method: GET
    data_selector: data
    params: {}
- name: clickmaps
  endpoint:
    path: /api/clickmaps
    method: GET
    data_selector: data
    params: {}
- name: notebooks
  endpoint:
    path: /api/notebooks
    method: GET
    data_selector: notebooks
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
- name: persons
  endpoint:
    path: /api/persons
    method: GET
    data_selector: persons
- name: groups
  endpoint:
    path: /api/groups
    method: GET
    data_selector: groups
- name: cohorts
  endpoint:
    path: /api/cohorts
    method: GET
    data_selector: cohorts
- name: activity
  endpoint:
    path: /api/activity
    method: GET
    data_selector: events
    params: {}
- name: organizations
  endpoint:
    path: /api/organizations
    method: GET
    data_selector: organizations
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
- name: dashboards
  endpoint:
    path: /api/dashboard
    method: GET
    data_selector: dashboards
    params: {}
- name: experiments
  endpoint:
    path: /api/experiments
    method: GET
    data_selector: experiments
    params: {}
- name: feature_flags
  endpoint:
    path: /api/feature_flags
    method: GET
    data_selector: feature_flags
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
- name: users
  endpoint:
    path: /api/user
    method: GET
    data_selector: data
- name: events
  endpoint:
    path: /api/event
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
- name: object access controls
  endpoint:
    path: /api/projects/@current/dashboards/{dashboard_id}/access_controls
    method: GET
    data_selector: access_controls
    params: {}
- name: resource access controls
  endpoint:
    path: /api/projects/@current/resource_access_controls
    method: GET
    data_selector: resource_access_controls
    params: {}
- name: users with access
  endpoint:
    path: /api/projects/@current/dashboards/{dashboard_id}/users_with_access
    method: GET
    data_selector: users
    params: {}
- name: GitHub
  endpoint:
    path: /complete/github/
    method: GET
- name: saml_configuration
  endpoint:
    path: /complete/saml/
    method: POST
    data_selector: SAML assertion
- name: dashboards
  endpoint:
    path: /api/dashboards
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /settings/user
    method: GET
    data_selector: user
- name: notifications
  endpoint:
    path: /settings/user#notifications
    method: GET
    data_selector: notifications
- name: account_settings
  endpoint:
    path: /api/account/settings
    method: GET
    data_selector: settings
    params: {}
- name: delete_account
  endpoint:
    path: /api/account/delete
    method: DELETE
    data_selector: response
    params: {}
- name: Notification bar
  endpoint:
    path: /site-apps/notification-bar
    method: GET
    data_selector: records
- name: Pineapple mode
  endpoint:
    path: /site-apps/pineapple-mode
    method: GET
    data_selector: records
- name: managed_migrations
  endpoint:
    path: /managed_migrations
    method: GET
    data_selector: data
    params: {}
- name: migrate_metadata
  endpoint:
    path: /migrate/metadata
    method: POST
    data_selector: metadata
- name: migrate_events
  endpoint:
    path: /migrate/events
    method: POST
    data_selector: events
- name: export
  endpoint:
    path: /api/2/export
    method: GET
    data_selector: data
    params:
      start: <starttime>
      end: <endtime>
- name: event_capture
  endpoint:
    path: /capture
    method: POST
    data_selector: payload
    params: {}
- name: events
  endpoint:
    path: /api/capture
    method: POST
    data_selector: events
    params:
      historical_migration: 'true'
- name: alias
  endpoint:
    path: /alias
    method: POST
    data_selector: response
    params: {}
- name: google_analytics_events
  endpoint:
    path: /analytics_123456789/events_20240731
    method: GET
    data_selector: rows
    params: {}
- name: events
  endpoint:
    path: /analytics_123456789/events_20240731
    method: SELECT
    data_selector: rows
    params:
      event_name: NOT IN (session_start, first_visit)
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: data
    params:
      historical_migration: 'true'
- name: events
  endpoint:
    path: /api/capture
    method: POST
    data_selector: data
    params:
      historical_migration: 'true'
- name: events
  endpoint:
    path: /api/capture
    method: POST
    data_selector: events
- name: persons
  endpoint:
    path: /api/persons
    method: POST
    data_selector: persons
- name: experiments
  endpoint:
    path: /api/v2/projects/{project_key}/environments/{environment_key}/experiments
    method: GET
    data_selector: items
- name: flags
  endpoint:
    path: /api/v2/flags/{project_key}
    method: GET
    data_selector: items
- name: experiment
  endpoint:
    path: /api/projects/{project_id}/experiments/
    method: POST
    data_selector: response
    params: {}
- name: feature_flag
  endpoint:
    path: /api/projects/{project_id}/flags/
    method: POST
    data_selector: response
    params: {}
- name: experiments
  endpoint:
    path: /api/v2/projects/{project_key}/environments/{environment_key}/experiments
    method: GET
    data_selector: items
- name: flags
  endpoint:
    path: /api/v2/flags/{project_key}
    method: GET
    data_selector: items
- name: experiment
  endpoint:
    path: /api/projects/{project_id}/experiments/
    method: POST
- name: feature_flag
  endpoint:
    path: /api/projects/{ph_project_id}/feature_flags/
    method: POST
- name: last_visits_details
  endpoint:
    path: ?module=API&method=Live.getLastVisitsDetails
    method: POST
    data_selector: events
    params:
      idSite: '1'
      period: range
      date: 2024-01-01,2024-07-01
      filter_limit: '10000'
      token_auth: 11798cde5ksjadjslc3136dd09
- name: last_visits_details
  endpoint:
    path: ?module=API&method=Live.getLastVisitsDetails
    method: POST
    data_selector: events
    params:
      idSite: '1'
      period: range
      date: 2024-01-01,2024-07-01
      format: JSON
      token_auth: 11798cde5ksjadjslc3136dd09
      filter_limit: '10000'
- name: events
  endpoint:
    path: /api/event
    method: GET
    data_selector: events
    params: {}
- name: persons
  endpoint:
    path: /api/person
    method: GET
    data_selector: persons
    params: {}
- name: events
  endpoint:
    path: /api/capture
    method: POST
    data_selector: event
    params:
      historical_migration: 'true'
- name: events
  endpoint:
    path: /api/capture
    method: POST
    data_selector: event
    params:
      historical_migration: 'true'
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: events
- name: feature_flags
  endpoint:
    path: /api/projects/{ph_project_id}/feature_flags/
    method: POST
    data_selector: data
- name: dynamic_configs
  endpoint:
    path: /console/v1/dynamic_configs
    method: GET
    data_selector: data
- name: experiments
  endpoint:
    path: /console/v1/experiments
    method: GET
    data_selector: data
- name: feature_flags
  endpoint:
    path: /api/projects/{ph_project_id}/feature_flags/
    method: POST
    data_selector: data
- name: experiments
  endpoint:
    path: /console/v1/experiments
    method: GET
    data_selector: data
    params:
      limit: 10
      page: 1
- name: billing_settings
  endpoint:
    path: /organization/billing
    method: GET
    data_selector: billing_info
    params: {}
- name: pricing
  endpoint:
    path: /pricing
    method: GET
    data_selector: pricing_info
    params: {}
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/user
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/event
    method: POST
    data_selector: event
- name: properties
  endpoint:
    path: /api/property
    method: GET
    data_selector: properties
- name: persons
  endpoint:
    path: /api/projects/:project_id/persons
    method: GET
    data_selector: persons
- name: delete_persons
  endpoint:
    path: /api/projects/{YOUR_PROJECT_ID}/persons/{ID}
    method: DELETE
    params:
      delete_events: 'true'
- name: event_reporting
  endpoint:
    path: /i/v0/e
    method: POST
- name: flags
  endpoint:
    path: /flags
    method: GET
- name: static_assets
  endpoint:
    path: /static/
    method: GET
- name: events
  endpoint:
    path: /api/event
    method: GET
    data_selector: results
    params: {}
- name: pull_requests
  endpoint:
    path: /api/pull_requests
    method: GET
    data_selector: data
    params: {}
- name: apps
  endpoint:
    path: /api/apps
    method: GET
    data_selector: data
    params: {}
- name: non_pr_contributions
  endpoint:
    path: /api/non_pr_contributions
    method: GET
    data_selector: data
    params: {}
- name: badges
  endpoint:
    path: /docs/contribute/badge
    method: GET
    data_selector: badge
- name: events
  endpoint:
    path: /api/capture
    method: POST
    data_selector: event
    params: {}
- name: flags
  endpoint:
    path: /api/flags
    method: GET
    data_selector: flags
    params: {}
- name: events
  endpoint:
    path: /api/capture
    method: POST
    data_selector: event
    params: {}
- name: persons
  endpoint:
    path: /api/persons
    method: GET
    data_selector: persons
    params: {}
- name: Capture API
  endpoint:
    path: /api/capture
    method: POST
    data_selector: events
    params: {}
- name: kafka_events
  endpoint:
    path: /kafka_events
    method: GET
    data_selector: records
- name: events_mv
  endpoint:
    path: /events_mv
    method: GET
    data_selector: records
- name: writable_events
  endpoint:
    path: /writable_events
    method: GET
    data_selector: records
- name: sharded_events
  endpoint:
    path: /sharded_events
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
- name: persons
  endpoint:
    path: /persons
    method: GET
    data_selector: records
- name: persons
  endpoint:
    path: /api/persons
    method: GET
    data_selector: results
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: results
- name: session_replay_events
  endpoint:
    path: /api/session_replay_events
    method: GET
    data_selector: records
- name: analytics
  endpoint:
    path: /api/event
    method: POST
    data_selector: event
- name: feature_flags
  endpoint:
    path: /feature_flags
    method: GET
    data_selector: flags
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: experiments
  endpoint:
    path: /experiments
    method: GET
    data_selector: records
- name: surveys
  endpoint:
    path: /surveys
    method: GET
    data_selector: surveys
- name: events
  endpoint:
    path: /ingest
    method: POST
    data_selector: events
    params: {}
- name: revenue_analytics
  endpoint:
    path: /api/revenue_analytics
    method: GET
    data_selector: data
    params: {}
- name: page_reports
  endpoint:
    path: /api/page_reports
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
notes:
- Authentication is via a Personal API Key, which should be sent as a Bearer token
  in the 'Authorization' header.
- The base URL is represented as '<ph_app_host>' in the documentation and needs to
  be replaced with the actual host.
- All endpoints require a ':project_id' in the path.
- Add PostHog.js to your website or web app to track all event data and retroactively
  define events
- Integrate with existing monitoring tools and track latency, cost, and model performance
- Data is guaranteed to be retained for 7 years on any paid plan and 1 year on a free
  plan.
- After 1 year, data may be moved into cold storage so queries may run more slowly.
- Uses OAuth2 with refresh token — requires setup of connected app in PostHog
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Web analytics is currently bundled with product analytics.
- Uses OAuth2 for authentication.
- Emojis now supported in session replay comments
- Feature flags and Experiments are currently packaged together and share volume limits.
- Project-specific feature flag keys for local evaluation are available.
- Uses OAuth2 with refresh token.
- No-code surveys with customizable colors and removable branding
- Data is guaranteed to be retained for 7 years on any paid plan and 1 year on a free
  plan
- Some surveys may not appear due to conditions not being met.
- No credit card required for free tier
- Requires a HubSpot developer account for API key
- Some API endpoints may have rate limits
- Max is free during beta and doesn't cost anything extra.
- SOC 2 Type II certified, GDPR ready, HIPAA compliant
- We have a set system for compensation as part of being transparent.
- If we are missing your country, it simply means we've not hired there before so
  we'd need to put together some data in advance of hiring you.
- If you're considering applying to PostHog and the salary is the only blocker, then
  something is wrong with our model (as we aim to pay generously) for your circumstances
  in most cases.
- Maybe avoid using /ingest in reverse proxy URLs
- Requires setup of connected app in PostHog for OAuth2.
- Teams must be less than 2 years old and have less than $5 million in funding to
  qualify
- PostHog is designed to grow with you.
- The API supports event tracking and properties.
- Setting up a reverse proxy is recommended.
- Group products in one project for better tracking.
- Setup requires OAuth2 authentication
- Ensure correct scopes are set for API access
- PostHog automatically captures $pageview and other events like button clicks.
- It is recommended to set up a reverse proxy to avoid tracking blockers.
- PostHog automatically sets a cross-domain cookie, so if your website is `yourapp.com`
  and your app is on `app.yourapp.com` users will be followed when they go from one
  to the other.
- url_ignorelist config will be in posthog-js version 1.147.0 which will be available
  as soon as CI completes its various automations.
- Requires OAuth2 authentication for API access.
- PostHog runs into problems during ingestion due to incorrect or suboptimal usage.
- The SQL API is free to use while it's in the public beta and we work out the details.
- Toolbar authentication issue when using a reverse proxy requires proper ui_host
  config
- PostHog toolbar doesn't work for older Nuxt versions due to URL issues
- Requests are paginated if the results are higher than the limit, usually 100 (sometimes
  500 or 1000).
- Control cost by reducing volume
- Analyze power users
- Destinations require the data pipeline add-on in your billing settings.
- Set the `historical_migration` option to `true` when capturing events in the migration.
- Using GeoIP enricher, if an event isn't provided with custom property $ip, the event
  will be detected as sent from the location of the data center, instead of the related
  user.
- Rate limiting is in effect — be mindful of API call frequency.
- Some data may have rate limits depending on the endpoint.
- API usage is limited to certain rate limits. Be sure to handle errors gracefully.
- Check the documentation for best practices in making API calls.
- Onboarding process is critical for success.
- Getting yourself up and running quickly requires knowing how to ship things in the
  environment and with your equipment.
- This guide is intended only for development of PostHog itself.
- For development, external services run in Docker over `docker compose`
- Use macOS or current Ubuntu Linux LTS (24.04)
- Windows isn't supported natively, run a Linux virtual machine instead
- Ensure the database role 'posthog' exists for correct authentication.
- Check executable flags for initialization scripts in Docker.
- Revenue analytics enables capturing revenue from website events.
- Real-time transformations available for data before ingestion.
- Multiple environments beta available.
- Some endpoints may have rate limits.
- Ensure to set up OAuth2 correctly for authentication.
- Some endpoints may have rate limits
- Some objects like Contact may return nulls in deeply nested fields
- Requires setup of OAuth app in PostHog dashboard
- Uses hardware security keys for multi-factor authentication.
- Site is protected by reCAPTCHA.
- Ensure to comply with SOC 2 requirements.
- PostHog is certified as SOC 2 Type II compliant, following an external audit.
- PostHog.com doesn't use third party cookies - only a single in-house cookie.
- No data is sent to a third party.
- PostHog only offers Business Associate Agreements (BAAs) for PostHog Cloud to users
  with Boost, Scale or Enterprise add-ons.
- PostHog is an open-source project, so some of the information you voluntarily provide
  will be public facing for sharing ideas.
- PostHog is committed to data privacy and covers all the main data privacy regulations,
  especially GDPR.
- We can sign a DPA if you need one.
- PostHog is used by Y Combinator to improve many of the products and processes PostHog
  benefitted from.
- Max AI is in beta and is improving.
- Uses PostHog for product analytics and A/B testing
- Error tracking is available and has been released into general availability.
- PostHog adds new products rapidly, enhancing value through interconnected tools.
- PostHog is useful for tracking user engagement and feature performance.
- Three times a day Google Adwords automatically exports data in JSON format to a
  Google storage location.
- Uses OAuth2 with refresh token — requires setup of connected app in PostHog.
- Requires setup of connected app in PostHog
- Building in public is a great way to get validation from the community.
- Even a negative result is a useful result.
- PostHog can connect with Salesforce and unify multiple data sources.
- Error tracking and session replays are available for debugging.
- PostHog gives me all the same information Plausible used to give us, and a lot more.
  It’s way more powerful and insightful than Plausible.
- Autocapture only works on the frontend.
- Pageviews rely on page loads.
- Experiments and Feature Flags are currently packaged together and share volume limits.
- Uses usage-based pricing with a free tier for the first 5,000 recordings per month.
- Recordings are kept on Clickhouse-based installations for 1 month. For paid customers
  on PostHog Cloud, recordings are kept for 3 months.
- Trends is the default insight type in PostHog.
- Setting a very long time range can severely impact query performance, especially
  for high-volume events.
- PostHog doesn't use third party cookies - only a single in-house cookie.
- PostHog requires installation of JavaScript snippet for event tracking.
- Data visualization features are included in the platform.
- We recommend setting up a reverse proxy to prevent tracking blockers.
- First use of Max in your organization requires org admin approval.
- We don’t recommend using Max in HIPAA-compliant projects, as Max is not yet compliant.
- Managing individual keys would add complexity for customers.
- Use different names for frontend and backend events to avoid duplicate counting.
- Events will be usable in queries within a few minutes.
- Events captured after calling identify are identified events and this creates a
  person profile if one doesn't exist already.
- Uses PostHog's API for identifying users
- Whenever a user logs out, call posthog.reset() to ensure the identity is removed.
- Using a reverse proxy means that events are less likely to be intercepted by tracking
  blockers.
- We require that the proxy sets the Host header to the same host it's calling.
- Don't use a subdomain that includes posthog, analytics, tracking, or other similar
  words which might cause events to be blocked.
- Avoid using generic or common path names like /analytics, /tracking, /ingest, or
  /posthog for your reverse proxy.
- Uses OAuth2 with refresh token — requires setup of connected app in posthog
- All new instances are added to the main posthog object as sub properties
- Ensure to handle rate limiting appropriately.
- Some endpoints may require specific permissions.
- Uses an internal queue to make calls fast and non-blocking.
- It also batches requests and flushes asynchronously.
- The default value for flushAt is 20.
- The default flush interval is 30 seconds.
- Feature flags are not yet supported by this library, but can be used via the API.
- Group analytics is a paid feature and not available on the open-source or free cloud
  plan.
- This library was built by the community but it's being maintained by the PostHog
  core team since v1.0.0.
- For Session replay and Surveys you must setup the SDK manually by disabling the
  `com.posthog.posthog.AUTO_INIT` mode.
- Session replay is supported on the Flutter Web, Android and iOS environments.
- Surveys is supported in Flutter for Web, iOS and Android platforms.
- Ensure to follow the setup instructions for proper API integration.
- Ensure to check rate limits for the API.
- Use correct headers for data submissions.
- This library uses an internal queue to make calls fast and non-blocking.
- 'When local evaluation is configured, setting SendFeatureFlags: true will not make
  additional server requests.'
- By default, FeatureFlagRequestTimeout is set at 3 seconds.
- PostHog supports asynchronous request batching.
- Autocapture is supported only in UIKit.
- By default, PostHog will make a best effort to automatically exclude fields detected
  as sensitive.
- This is an optional library you can install if you're working with Java.
- Feature flags are not supported yet in our Java SDK.
- We do not recommend hardcoding API keys. Setting it as an environment variable is
  preferred.
- Setting sendFeatureFlags to true will include feature flag information with the
  event.
- Ensure to check API rate limits before making requests
- We do not recommend having API keys in plaintext. Setting it as an environment variable
  is best.
- Feature flag request timeout is set to 3000ms by default.
- As a rule of thumb, we do not recommend having API keys in plaintext. Setting it
  as an environment variable is best.
- We do not recommend having API keys in plaintext.
- Setting API key as an environment variable is best.
- As of posthog-python v3.0, the default is to disregard the server IP, not add the
  GeoIP properties.
- Use environments variables for API keys to avoid plaintext.
- As of posthog-python v3.0, the default now is to disregard the server IP, not add
  the GeoIP properties, and not use the values for feature flag evaluations.
- Use an environment variable for API key instead of plaintext.
- Debug mode can be toggled for troubleshooting.
- By default exceptions raised within a context are captured and available in the
  error tracking dashboard.
- You can override this behavior by passing `capture_exceptions=False` to new_context.
- Group analytics is a paid feature and is not available on the open-source or free
  cloud plan.
- Default feature flags request timeout is set at 3 seconds.
- Ensure proper OAuth2 setup for authentication
- API keys should be set as environment variables to avoid plaintext exposure.
- This library is largely based on the analytics-python package.
- Requires a project API key for authentication.
- Capture allows you to capture anything a user does within your system.
- Returns loaded feature flags, if any. Helpful for debugging what flag information
  you have loaded.
- Requires a project API key for authentication
- Uses API key for authentication
- Load feature flags before making decision calls
- Requires API key for authentication
- For React Native projects built with Expo, there are no mobile native dependencies
  outside of supported Expo packages.
- If you're using React Native Web or React Native macOS, do not use the expo-file-system
  package as it is not supported.
- Set up a reverse proxy for better tracking.
- Best to group multiple products in one project.
- Feature flags request timeout is set to 10000 ms by default.
- autocapture is only available when using the provider
- Some objects may return nulls in deeply nested fields
- Uses OAuth2 with refresh token
- 'Last updated: Aug 27, 2025'
- The log level by default is set to WARN. You can change it to DEBUG if you want
  to debug the client.
- 'With local evaluation: Setting send_feature_flags: true will not make additional
  server requests.'
- Handles feature flag operations asynchronously.
- Requires setup of OAuth2 credentials
- Feature flags are not supported yet in the community-maintained Rust SDK.
- OAuth2 requires setup of connected app in PostHog
- The default host is https://us.i.posthog.com if not specified.
- The `GetFeatureFlagAsync` method returns a nullable `FeatureFlag` object. If the
  flag is not found or evaluating it is inconclusive, it returns `null`. However,
  there is an implicit conversion to bool to make comparisons easier.
- By default, the library buffers events before sending them to the `/batch` endpoint
  for better performance. This can lead to lost events in serverless environments
  if the .NET process is terminated by the platform before the buffer is fully flushed.
- For Angular v17 and above, PostHog should be set up as a singleton service.
- Ensure to initialize PostHog only on the client side.
- Angular SSR does not allow Node.js code to be bundled into client-side components.
- Recommended to set up a reverse proxy.
- PostHog makes it easy to get data about traffic and usage of your Bubble app.
- Set up a reverse proxy to prevent tracking blockers from intercepting events.
- Set flushAt to 1 and flushInterval to 0 to send captured data without batching.
- Integrating PostHog enables analytics, custom events capture, feature flags, and
  more.
- Make sure to add your AppConfig to your settings.py under INSTALLED_APPS.
- The middleware automatically extracts session and user information from request
  headers.
- You can pass additional PostHog config options to the plugin.
- Requires connected app setup in PostHog
- Some events may have missing properties
- PostHog’s default exception autocapture won’t work in Flask, manual capture is required.
- We recommend setting up a reverse proxy, so that events are less likely to be intercepted
  by tracking blockers.
- Gatsby behaves like a single-page app which means to track $pageview events special
  care is needed.
- PostHog works the same via Google Tag Manager as it does via our snippet directly.
- Make sure to always call posthog.shutdown() after capturing events from the server-side.
- Ensure Composer is installed to use the PHP SDK.
- Project API key and instance address can be found in project settings.
- Set up a reverse proxy to avoid tracking blockers
- Group multiple products in one project for better tracking
- 'Init PostHog with api_host: https://us.i.posthog.com'
- Requires either PostHog Cloud or a self-hosted PostHog instance running version
  1.30.0 or later.
- Integrating PostHog into your site enables analytics about user behavior, custom
  events capture, session recordings, feature flags, and more.
- Setup a reverse proxy to avoid tracking blockers.
- API access is significantly slower, especially since we need to setup a way for
  Retool to handle pagination on our endpoints.
- Make sure you have a RudderStack account and a PostHog account, using PostHog Cloud
  or self-hosting.
- 'If it''s a website or web app: set ''Use device-mode to send events'' to true and
  ''Enable autocapture with PostHog'' to true.'
- If it's not a website or web app, manually install the PostHog SDK.
- Use Segment to send events to PostHog.
- Segment doesn't send pageleave data. When using analytics.page() only pageviews
  are tracked.
- Shopify's checkout flow doesn't allow arbitrary JavaScript to be run.
- CORS errors may occur when using pixels for events other than conversions.
- Ensure to capture events immediately in serverless environments.
- Requires a Basic site plan to add custom code.
- PostHog will now be capturing pageviews, button clicks, and more.
- For WordPress.com users, using plugins is the only option as they don't have access
  to the header.php or functions.php files.
- Using the Theme Editor is very convenient, but you have to consider the potential
  drawbacks of having template files writable.
- If your theme auto-updates, manually editing the header.php file may lose your settings.
- PostHog does not return an error when certain validation failures occur
- Make sure to send API requests to the correct domain.
- The flags endpoint is used to evaluate feature flags for a given distinct_id.
- Include feature flag information in events captured using server-side SDKs or API.
- Using API queries requires a PostHog project and its project ID.
- Requires a personal API key for your project with the Query Read permission.
- Queries are limited to 1200 requests per hour, 120 requests per minute, and 10 seconds
  max execution time.
- Hard delete of this model is not allowed. Use a patch API call to set 'deleted'
  to true.
- 'Required API key scopes: activity_log:read'
- Requires setup of API key with appropriate scopes.
- 'API key scopes required for reading dashboards: dashboard:read'
- 'API key scopes required for writing dashboards: dashboard:write'
- Requires setup of personal API key for authorization
- 'Required API key scopes: dashboard_template:read and dashboard_template:write'
- 'Required API key scopes: dashboard_template:write'
- 'Requires API key scopes: batch_export:write for creating and cancelling backfills,
  batch_export:read for retrieving backfills.'
- These endpoints are effectively deprecated and kept only for backwards compatibility.
- The /events endpoint has been deprecated in favor of the /query endpoint.
- 'Required API key scopes: feature_flag:read'
- 'Required API key scopes: group:write'
- 'Required API key scopes: insight:read'
- 'Required API key scopes: organization_member:read for listing invites and organization_member:write
  for creating invites.'
- 'Required API key scopes: organization:read'
- Authorization requires a personal API key.
- Requires API key with batch_export:write and batch_export:read scopes.
- 'Requires API key with scopes: person:write, activity_log:read, person:read, cohort:read'
- To get your organization ID, use the /api/organizations/@current endpoint.
- 'Required API key scopes: organization:write for write operations, organization:read
  for read operations.'
- Requires API key scopes session_recording:write and sharing_configuration:read/write.
- 'Required API key scopes: survey:read'
- Requires setup of personal API key for access
- This endpoint is in Concept state, please join the feature preview to try it out
  when it's ready.
- Events are only stored within ClickHouse, and once they have been written they can't
  be changed.
- This only applies to PostHog Cloud.
- Adding more specific domains is not recommended as we may change target subdomains
  over time.
- This will not work with the toolbar and generally means your initial bundled JavaScript
  will be much larger depending on the dependencies you are including.
- Using a reverse proxy means you are sending data via a domain under your control.
- Browser extensions should use localStorage, sessionStorage, or memory for persistence.
- PostHog requires a valid API key for initialization.
- PostHog allows bulk data exports to various destinations including Postgres and
  S3.
- Data can be exported to CSV and other formats.
- These warnings are sampled. The actual number of events affected may exceed the
  total displayed.
- PostHog's event storage is 'write only' for all practical purposes.
- Activation looks different for every product.
- 'Retention measurement is granular: you can choose a timeframe from hours to months.'
- Revenue analytics is in beta.
- Events consist of a name, distinct_id, timestamp, and properties.
- Uses JSON.stringify() for object and array properties before sending.
- No support for sms or email notifications
- Due to the reduced cost of processing them, anonymous events can be up to 4x cheaper
  than identified ones, so we recommended you only capture identified events when
  needed.
- Identified events can still be anonymous, meaning they don't need to contain personal
  information.
- Initial person properties for identified events are derived from the persistence
  store.
- Actions are retroactive, meaning they also apply to past events, not only events
  that happen after the action was created.
- You can delete persons data via the API.
- To delete a person, the ID must be a number, but the system uses strings.
- A session is a set of events that try to capture a single use of your product or
  visit to your website.
- Activity is defined as any event sent from the client including autocapture events
  and replay activity like mouse movement.
- Custom session IDs must meet specific requirements including being a valid UUIDv7
  and having appropriate timestamps
- PostHog does not automatically support cross-domain tracking when using localStorage
  for persistence.
- PostHog automatically computes timestamps for captured events, but you can also
  set them manually.
- To ensure maximum compatibility with PostHog, timestamp and sent_at fields should
  be in ISO 8601 format.
- OAuth2 authentication is required to access the API.
- PostHog automatically captures any UTM parameters that are present when a user visits
  your website.
- Query log provides access to query execution metadata and performance metrics.
- Filters for completed HogQL queries for your team.
- The query log can help you find failing queries and understand failure patterns.
- Annotations can be added after the fact or before an event.
- The heatmap shows where on the page users are clicking, dead clicking, rageclicking,
  or moving their mouse.
- The unique users count is based on the user's distinct ID, so if a user is using
  multiple devices or browsers, they are counted as multiple users.
- Heatmaps is a totally free feature.
- Every project has its own distinct write-only token, which you can use to initialize
  your integration of choice.
- Use the provided MCP Server preset in the personal API key creator.
- Ensure proper API rate limits are followed.
- Uses single quotes for object keys and values.
- Requires OAuth2 setup to access data
- API documentation is extensive and covers various aspects of integration.
- Access control system allows management of permissions at organization, project,
  and resource levels.
- 'Personal API keys require specific scopes: access_control:read for read operations
  and access_control:write for write operations.'
- Authentication domains need to be verified if you are on PostHog Cloud.
- The record must be kept at all times, as we do periodic DNS verification.
- You will not be able to use SSO with the first user of your instance. You will have
  to create a user with a regular password and you will later be able to log in with
  SSO.
- For self-hosted, ensure SITE_URL is set and instance is running over TLS.
- Users can create personal API keys.
- Email account is used both for authentication and notifications.
- Deleting account is irreversible.
- Requires OAuth2 setup for authentication.
- The Notification Bar requires either PostHog Cloud, or a self-hosted PostHog instance
  running version 1.41.0 or later.
- You'll also need to manually opt in to the site apps feature, as it's currently
  in beta.
- Pineapple Mode requires either PostHog Cloud, or a self-hosted PostHog instance
  running version 1.41.0 or later.
- You need to manually opt in to the site apps feature, as it's currently in beta.
- PostHog is open-source and freely available for anyone to host themselves.
- Self-hosting PostHog means you run or purchase your own infrastructure.
- Before upgrading, make sure you have created back-ups of all your data!
- Our recommendation is to keep your PostHog deployment up-to-date.
- 'Access via Localhost: Since you didn''t specify a domain name, PostHog should default
  to using localhost.'
- 'TLS Certificates: For local development, it is recommended to stick with HTTP unless
  you''re using a domain with valid TLS certificates.'
- Direct imports are currently less reliable than S3 imports for some datasets and
  customers.
- 'Test first: Run a small test migration with a subset of your data against a new
  project. This ensures events have the desired schema without polluting your main
  project.'
- Set the historical_migration option to true when capturing events in the migration.
- This script adds a $lib property of posthog-python, overriding any $lib property
  already set.
- Ideally you'd store a record of which users you'd already sent to PostHog.
- Uses Python SDK for historical migration
- Make sure to save API keys securely as they cannot be accessed later.
- Requires the highest Ultimate tier of pricing for exporting data via Pendo Data
  Sync.
- Requires highest Ultimate tier of pricing for Pendo Data Sync.
- The migration script generates data that is less accurate than the data captured
  by PostHog.
- Feature gates in Statsig turn into feature flags in PostHog.
- Accessing data via the Statsig API requires a console key.
- PostHog requires the control key to be 'control'.
- You can't add payloads to experiment flags via the API.
- Setting a billing limit means we will stop ingesting and processing your data so
  you are not charged over the set limit.
- You’ll need to do this for each of the products.
- Each of our products has a very generous free tier.
- If your project's volume is higher than you'd like, we offer ways to 'tune' your
  implementation to only capture or use what's valuable to you.
- Each product can be tuned to use only the resources you need.
- When you hit your billing limit, we'll stop ingesting your data and you won't be
  charged over the set amount.
- Annual plans are credit-based, meaning you get a discount on pre-paid PostHog credit.
- Spike detection system runs daily and analyzes usage patterns across all products
  except data warehouse.
- Project API key can be public, personal API key should not be.
- Autocapture can be disabled by setting 'autocapture' to false in the init call.
- Masking all inputs and text by default in session replay ensures that data is only
  captured when explicitly unmasked, putting you in control of what's captured.
- If you require GDPR compliance, we recommend using PostHog Cloud EU.
- Data deletion is asynchronous during non-peak usage times.
- You must acquire 'Unambiguous Consent'
- Data must be handled securely
- You should not transfer EU users' personal data outside the EU
- When using PostHog Cloud, manage security and access control at the organization
  level, project level, and resource level.
- When self-hosting, recommend using HTTPS to secure data in transmission.
- We recommend using PostHog Cloud US for CCPA compliance.
- Ad and tracking blockers should target specific endpoints to prevent data collection
  while ensuring site functionality.
- Digital contributor card provided for accepted contributors
- Community MVP awards appear as trophies on contributor cards
- User events are sent through the Capture API.
- In case there were any changes to persons during processing, we will update the
  persons' info in ClickHouse too.
- Data is pulled from Kafka for ingestion.
- If you signed up before June 2024, you can configure to use the faster queries mode
  instead of joining with the person table for current properties.
- PostHog provides a free basic level of support to everyone via the community, with
  additional support options available for paying customers depending on product.
- Autocapture captures various user interactions without specific tracking code.
- If enabled, GeoIP data is added also as properties at ingestion.
- Many of these are also captured as session properties.
- PostHog requires an API key for authentication.
- Integrates with Vue 3 for feature flags management.
- API key required for accessing PostHog
- Ensure to replace `<ph_project_api_key>` with your PostHog API key.
- Make sure the API key is included in the header for authentication.
- New security emails enabled
- Page reports provide access to site performance metrics.
- Frequentist analysis is a good fit when you're familiar with p-values and confidence
  intervals.
- This method is widely used in experimentation tooling across the industry and is
  well understood by data teams.
- Error tracking enables you to assign issues to specific PostHog roles or teammates.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '500 Internal Server Error: Check server status.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check API key or token validity.'
- '404 Not Found: Ensure the endpoint path is correct.'
- 'RATE_LIMIT_EXCEEDED: Reduce the number of requests'
- 'INVALID_CREDENTIALS: Check API key or OAuth token'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Ensure valid authentication'
- '400 Bad Request: Check request parameters and body format.'
- '401 Unauthorized: Verify authentication credentials.'
- '429 Too Many Requests: Implement rate limiting.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Verify token and scopes'
- '429 Too Many Requests: Rate limit exceeded'
- Ingestion warnings may occur if an event is captured with a generic ID like null.
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '400: Invalid Project ID.'
- '400: Malformed request data'
- '401: Project API key invalid.'
- '401: Invalid Personal API key.'
- '503: Unable to fetch team from database.'
- '503 Service Unavailable: Service is temporarily unavailable'
- '400 Bad Request: Check the event format and required fields'
- '401 Unauthorized: Verify API key'
- '429 Too Many Requests: Exceeded rate limit, try again later.'
- '401 Unauthorized: Check your access token.'
- '429 Too Many Requests: Rate limit exceeded. Please try again later.'
- '401 Unauthorized: Check your API key and permissions.'
- 'Permission denied (os error 13): Check file permissions for GeoIP database.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Check your API key or authentication.'
- '401 Unauthorized: Check your credentials.'
- 'RATE_LIMIT_EXCEEDED: Reduce request frequency'
- 'INVALID_CREDENTIALS: Check client ID and secret'
- '403 Forbidden: Verify user permissions'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Recheck OAuth credentials or token expiration'
- '404 Not Found: Check the provided link for accuracy.'
- No incidents reported.
- '400 Bad Request: Check the request format.'
- '401 Unauthorized: Verify your API key or OAuth token.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'Unauthorized: Check your OAuth token and permissions.'
- 'Too Many Requests: Throttle your API calls.'
- No additional costs or fees for stored recordings.
- Export too large? If you find that your export is slow or stalled, we recommend
  using our batch export feature instead.
- '403 Forbidden: Check your API key permissions.'
- '404 Not Found: Verify the endpoint path.'
- '500 Internal Server Error: Try again later.'
- '400 Bad Request: Check request payload for required fields.'
- '404 Not Found: Ensure the endpoint is correct.'
- '401 Unauthorized: Recheck API key or permissions'
- '400 Bad Request: Check your request format and parameters.'
- '401 Unauthorized: Ensure your API key is valid.'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: Endpoint does not exist.'
- '400 Bad Request: Check the request format and parameters'
- '401 Unauthorized: Verify API key or token'
- '429 Too Many Requests: Rate limit exceeded, reduce request frequency'
- '429 Too Many Requests: You have exceeded your rate limit.'
- '500 Internal Server Error: Check server status or API limits.'
- '401 Unauthorized: Ensure API key is valid.'
- '401 Unauthorized: Check your API key.'
- '403 Forbidden: Access denied.'
- '400 Bad Request: Check the event payload structure.'
- '401 Unauthorized: Invalid API key or authentication failure.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Ensure your API key is correct.'
- '429 Too Many Requests: Throttle your requests.'
- '401 Unauthorized: Recheck API key or token expiration'
- 'REQUEST_TIMEOUT: Increase the timeout or check the server status.'
- '400 Bad Request: Check request payload structure.'
- '401 Unauthorized: Verify API key.'
- '401 Unauthorized: Check for valid OAuth token'
- '401 Unauthorized: Check API key validity.'
- '400 Bad Request: Check request format and parameters.'
- 'Error fetching feature flag ''{flag_key}'': {str(e)}'
- '401 Unauthorized: Ensure the API key is valid.'
- '404 Not Found: The requested resource does not exist.'
- '401 Unauthorized: Invalid or missing API key'
- '401 Unauthorized: Verify your API key'
- '404 Not Found: Endpoint does not exist'
- 'PostHogFetchNetworkError: Network error while fetching PostHog'
- 'REQUEST_TIMEOUT: Configure feature_flag_request_timeout_seconds to prevent blocking.'
- 'Error fetching feature flag ''#{flag_key}'': #{e.message}'
- Feature flag check failed, using default behavior
- '400 Bad Request: Check the request payload for correctness.'
- '401 Unauthorized: Verify your API key.'
- '401 Unauthorized: Verify client credentials'
- '429 Too Many Requests: Throttle your requests'
- $feature_flag_called events won't affect your analytics.
- '400 Bad Request: Check the request format and required fields.'
- '401 Unauthorized: Verify API key and permissions.'
- '429 Too Many Requests: Reduce the frequency of requests.'
- 'API_CALL_LIMIT_EXCEEDED: Reduce the frequency of API calls.'
- 'INVALID_API_KEY: Check if the API key is correct.'
- Error tracking may log events less than expected if not handled properly.
- '400 Bad Request: Check the API key and request format.'
- '403 Forbidden: Check permissions for the API key'
- '500 Internal Server Error: Check if the error captured is handled correctly.'
- 'RangeError: Maximum call stack size exceeded'
- CORS error when sending requests from customer events.
- 'quotaLimited: Feature flag evaluations have been temporarily paused.'
- '401 Unauthorized: Recheck API key'
- 405 No response body
- 'annotation:read: Required API key scopes'
- 'annotation:write: Required API key scopes'
- '401 Unauthorized: Recheck API key scopes'
- '401 Unauthorized: Check API key or scopes.'
- '401 Unauthorized: Check your API key'
- 405, {"type":"invalid_request","code":"method_not_allowed","detail":"Method "DELETE"
  not allowed.","attr":null}
- 204 No response body
- 201 Created
- 200 OK
- This action does not support Personal API Key access
- 'Status 200: Successful operation'
- 'Status 204: No content for delete operations'
- 'Status 400: Bad request'
- 'Status 401: Unauthorized'
- 403 - This action does not support Personal API Key access
- '401 Unauthorized: Check API key and permissions'
- Refused to merge with an illegal distinct ID
- Refused to merge an already identified user
- Refused to process event with invalid UUID
- Ignored an invalid timestamp, event was still ingested
- An event was sent more than 23 hours in the future
- Discarded event exceeding 1MB limit
- Event ingestion has overflowed capacity
- Replay event timestamp is invalid
- Replay event timestamp was too far in the future
- $set or $set_once is ignored on exception events and should not be sent
- '400 Bad Request: Check request formatting and required fields.'
- '401 Unauthorized: Ensure API token is valid.'
- '404 Not Found: Verify endpoint path and request parameters.'
- '400 Bad Request: Check request parameters and payload'
- '401 Unauthorized: Ensure proper authentication credentials are provided'
- Authentication credentials were not provided.
- 'SESSION_ID_INVALID: Custom session IDs do not meet requirements'
- '403 Forbidden: Check API key and permissions.'
- '404 Not Found: Verify the endpoint and request parameters.'
- 'RATE_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'INVALID_REQUEST: Check the endpoint and parameters'
- '400 Bad Request: Check input data structure.'
- '401 Unauthorized: Confirm authentication credentials.'
- '401 Unauthorized: Check credentials'
- '401 Unauthorized: Check API key validity'
- If you notice the deployment step taking longer than 10 minutes, it's best to cancel
  it and check troubleshooting.
- '502 Bad Gateway: PostHog not starting properly after the server reboot.'
- '403 Forbidden: CSRF verification failed. Request aborted.'
- '401 Unauthorized: Authorization fails at the requests.'
- '401 Unauthorized: Check your personal API key and access rights.'
- '400 Bad Request: Ensure all required parameters are included.'
- '400 Bad Request: Check if the request format is valid.'
- '401 Unauthorized: Check API key or permissions'
- '404 Not Found: Verify the project and environment keys.'
- 'Request failed with status code: {response.status_code}'
- 'Error: {response.status_code}'
- 'Billing limit exceeded: Additional data is lost forever if you exceed the billing
  limit.'
- '404 Not Found: The requested resource does not exist'
- Duplicate data may occur; deduplication is not guaranteed.
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Verify the API key and permissions.'
- '401 Unauthorized: Check token validity.'
- '404 Not Found: Ensure correct endpoint path.'
- '403 Forbidden: Check permissions or access rights'
auth_info:
  mentioned_objects:
  - OAuth2
  - Token
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Posthog
  - identify_context
  - new_context
  - FeatureFlag
  - FeatureFlagResult
  - PostHogProvider
  - POSTHOG_PERSONAL_API_KEY
  - plugin:read
  - hog_function:read
  - notebook:read
  - notebook:write
  - project:read
  - session_recording:read
  - session_recording_playlist:read
  - session_recording_playlist:write
  - survey:write
  - survey:read
  - AccessToken
client:
  base_url: https://eu.posthog.com
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
