resources:
- name: ResourcePool
  endpoint:
    path: /v1beta2/resourcepool
    method: GET
    data_selector: items
    params: {}
- name: TenantResource
  endpoint:
    path: /v1beta2/tenantresource
    method: GET
    data_selector: items
    params: {}
- name: Tenant
  endpoint:
    path: /v1beta1/tenant
    method: GET
    data_selector: items
    params: {}
- name: CapsuleConfiguration
  endpoint:
    path: /capsule.clastix.io/v1beta2/capsuleconfigurations
    method: GET
    data_selector: items
- name: GlobalTenantResource
  endpoint:
    path: /capsule.clastix.io/v1beta2/globaltenantresources
    method: GET
    data_selector: items
- name: ResourcePoolClaim
  endpoint:
    path: /capsule.clastix.io/v1beta2/resourcepoolclaims
    method: GET
    data_selector: items
- name: ResourcePool
  endpoint:
    path: /capsule.clastix.io/v1beta2/resourcepools
    method: GET
    data_selector: items
- name: Tenant
  endpoint:
    path: /v1beta1/tenant
    method: GET
    data_selector: status
    params: {}
- name: allowedClasses
  endpoint:
    path: /allowedClasses
    method: GET
    data_selector: allowedClasses
    params: {}
- name: ingressOptions
  endpoint:
    path: /ingressOptions
    method: GET
    data_selector: ingressOptions
    params: {}
- name: limitRanges
  endpoint:
    path: /limitRanges
    method: GET
    data_selector: limitRanges
    params: {}
- name: namespaceOptions
  endpoint:
    path: /namespaceOptions
    method: GET
    data_selector: namespaceOptions
    params: {}
- name: networkPolicies
  endpoint:
    path: /networkPolicies
    method: GET
    data_selector: networkPolicies
    params: {}
- name: Tenant
  endpoint:
    path: /tenant
    method: GET
- name: ResourcePoolClaim
  endpoint:
    path: /api/v1/resourcepoolclaims
    method: GET
    data_selector: items
    params: {}
- name: ResourcePool
  endpoint:
    path: /api/v1/resourcepools
    method: GET
    data_selector: items
    params: {}
- name: ResourcePool
  endpoint:
    path: /resourcepools
    method: GET
    data_selector: items
    params: {}
- name: ResourcePoolClaim
  endpoint:
    path: /resourcepoolclaims
    method: GET
    data_selector: items
    params: {}
- name: GlobalTenantResource
  endpoint:
    path: /api/v1/globaltenantresource
    method: POST
    data_selector: items
    params:
      resyncPeriod: 60s
- name: TenantResource
  endpoint:
    path: /api/v1/tenantresource
    method: POST
    data_selector: items
    params:
      resyncPeriod: 60s
- name: tenant
  endpoint:
    path: /apiVersion/capsule.clastix.io/v1beta2/tenants
    method: POST
    data_selector: metadata
    params: {}
- name: podsecuritypolicy
  endpoint:
    path: /apiVersion/policy/v1beta1/podsecuritypolicies
    method: POST
    data_selector: metadata
    params: {}
- name: LimitRange
  endpoint:
    path: /api/v1/limitranges
    method: GET
    data_selector: items
- name: Tenant
  endpoint:
    path: /api/v1/tenants
    method: POST
    data_selector: tenants
- name: tenant
  endpoint:
    path: /api/v1/namespaces/{namespace}/tenants
    method: POST
    data_selector: items
    params: {}
- name: networkpolicy
  endpoint:
    path: /api/v1/namespaces/{namespace}/networkpolicies
    method: GET
    data_selector: items
    params: {}
- name: rolebinding
  endpoint:
    path: /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings
    method: GET
    data_selector: items
    params: {}
- name: podsecuritypolicy
  endpoint:
    path: /apis/policy/v1beta1/podsecuritypolicies
    method: GET
    data_selector: items
    params: {}
- name: tenant
  endpoint:
    path: /api/v1/namespaces
    method: POST
    data_selector: metadata.name
    params: {}
- name: podsecuritypolicy
  endpoint:
    path: /apis/policy/v1beta1/podsecuritypolicies
    method: POST
    data_selector: metadata.name
    params: {}
- name: clusterrole
  endpoint:
    path: /apis/rbac.authorization.k8s.io/v1/clusterroles
    method: POST
    data_selector: metadata.name
    params: {}
- name: service
  endpoint:
    path: /api/v1/services
    method: POST
    data_selector: metadata.name
    params: {}
- name: persistentvolumeclaim
  endpoint:
    path: /api/v1/persistentvolumeclaims
    method: POST
    data_selector: metadata.name
    params: {}
- name: tenant
  endpoint:
    path: /api/v1beta2/tenants
    method: POST
    data_selector: items
- name: networkpolicy
  endpoint:
    path: /api/v1/networkpolicies
    method: GET
    data_selector: items
- name: rolebinding
  endpoint:
    path: /apis/rbac.authorization.k8s.io/v1/rolebindings
    method: GET
    data_selector: items
- name: StorageClass
  endpoint:
    path: /api/v1/storageclasses
    method: POST
    data_selector: metadata.name
    params: {}
- name: Tenant
  endpoint:
    path: /api/v1beta2/tenants
    method: POST
    data_selector: metadata.name
    params: {}
- name: PodSecurityPolicy
  endpoint:
    path: /apis/policy/v1beta1/podsecuritypolicies
    method: POST
    data_selector: metadata.name
    params: {}
- name: ClusterRole
  endpoint:
    path: /apis/rbac.authorization.k8s.io/v1/clusterroles
    method: POST
    data_selector: metadata.name
    params: {}
- name: tenant
  endpoint:
    path: /api/v1beta2/tenant
    method: GET
    data_selector: tenants
    params: {}
- name: namespace
  endpoint:
    path: /api/v1/namespaces
    method: GET
    data_selector: namespaces
    params: {}
- name: tenant_namespace_count
  endpoint:
    path: /capsule_tenant_namespace_count
    method: GET
    data_selector: records
    params: {}
- name: tenant_namespace_relationship
  endpoint:
    path: /capsule_tenant_namespace_relationship
    method: GET
    data_selector: records
    params: {}
- name: tenant_status
  endpoint:
    path: /capsule_tenant_status
    method: GET
    data_selector: records
    params: {}
- name: tenant_resource_limit
  endpoint:
    path: /capsule_tenant_resource_limit
    method: GET
    data_selector: records
    params: {}
- name: tenant_resource_usage
  endpoint:
    path: /capsule_tenant_resource_usage
    method: GET
    data_selector: records
    params: {}
- name: tenant
  endpoint:
    path: /api/v1/tenants
    method: GET
    data_selector: items
- name: namespace
  endpoint:
    path: /api/v1/namespaces
    method: GET
    data_selector: items
- name: pods
  endpoint:
    path: /api/v1/pods
    method: GET
    data_selector: items
- name: namespaces
  endpoint:
    path: /api/v1/namespaces
    method: GET
    data_selector: items
- name: tenant
  endpoint:
    path: /api/v1beta2/tenant
    method: GET
    data_selector: items
    params: {}
- name: resourcequota
  endpoint:
    path: /api/v1/resourcequota
    method: GET
    data_selector: items
    params: {}
- name: tenant
  endpoint:
    path: /api/v1/tenants
    method: POST
    data_selector: tenants
    params: {}
- name: podsecuritypolicy
  endpoint:
    path: /apis/policy/v1beta1/podsecuritypolicies
    method: POST
    data_selector: podsecuritypolicies
    params: {}
- name: tenant
  endpoint:
    path: /api/v1beta2/tenants
    method: POST
    data_selector: items
    params: {}
- name: tenant
  endpoint:
    path: /api/v1/namespaces
    method: GET
    data_selector: items
- name: pod_security_policy
  endpoint:
    path: /apis/policy/v1beta1/podsecuritypolicies
    method: GET
    data_selector: items
- name: tenant
  endpoint:
    path: /apis/capsule.clastix.io/v1beta2/tenants
    method: GET
    data_selector: items
- name: tenant
  endpoint:
    path: /api/v1beta2/tenant
    method: POST
    data_selector: metadata
    params: {}
- name: tenant
  endpoint:
    path: /api/v1/tenants
    method: GET
    data_selector: items
    params: {}
- name: namespace
  endpoint:
    path: /api/v1/namespaces
    method: GET
    data_selector: items
    params: {}
- name: LimitRange
  endpoint:
    path: /api/v1/namespaces/{namespace}/limitranges
    method: GET
    data_selector: items
    params: {}
- name: Tenant
  endpoint:
    path: /apis/capsule.clastix.io/v1beta2/tenants
    method: GET
    data_selector: items
    params: {}
- name: Ingress
  endpoint:
    path: /apis/networking.k8s.io/v1/ingresses
    method: GET
    data_selector: items
    params: {}
- name: Gateway
  endpoint:
    path: /apis/gateway.networking.k8s.io/v1/gateways
    method: GET
    data_selector: items
    params: {}
- name: tenant
  endpoint:
    path: /api/v1beta2/tenants
    method: GET
    data_selector: items
    params: {}
- name: resourcepool
  endpoint:
    path: /api/v1beta2/resourcepools
    method: GET
    data_selector: items
    params: {}
- name: ResourcePool
  endpoint:
    path: /api/v1/resourcepool
    method: GET
    data_selector: items
    params: {}
- name: ResourcePoolClaim
  endpoint:
    path: /api/v1/resourcepoolclaim
    method: GET
    data_selector: items
    params: {}
- name: GlobalProxySettings
  endpoint:
    path: /globalproxysettings
    method: GET
    data_selector: rules
    params: {}
- name: ProxySettings
  endpoint:
    path: /proxysettings
    method: GET
    data_selector: subjects
    params: {}
- name: ResourcePool
  endpoint:
    path: /api/v1/resourcepools
    method: POST
    data_selector: items
    params: {}
- name: ResourcePoolClaim
  endpoint:
    path: /api/v1/resourcepoolclaims
    method: POST
    data_selector: items
    params: {}
- name: GlobalTenantResource
  endpoint:
    path: /api/v1/globaltenantresources
    method: POST
    data_selector: items
    params: {}
- name: TenantResource
  endpoint:
    path: /api/v1/tenantresources
    method: POST
    data_selector: items
    params: {}
- name: tenant
  endpoint:
    path: /api/v1/namespaces/{namespace}/tenants
    method: GET
    data_selector: items
    params: {}
- name: git_repository
  endpoint:
    path: /api/v1/namespaces/{namespace}/gitrepositories
    method: GET
    data_selector: items
    params: {}
- name: kustomization
  endpoint:
    path: /api/v1/namespaces/{namespace}/kustomizations
    method: GET
    data_selector: items
    params: {}
- name: Tenant
  endpoint:
    path: /v1beta2/Tenant
    method: GET
    data_selector: TenantSpec
    params: {}
- name: ResourcePoolClaim.status.condition
  endpoint:
    path: /ResourcePoolClaim/status/condition
    method: GET
    data_selector: records
- name: ResourcePoolClaim.status.pool
  endpoint:
    path: /ResourcePoolClaim/status/pool
    method: GET
    data_selector: records
- name: ResourcePool
  endpoint:
    path: /ResourcePool
    method: GET
    data_selector: records
- name: TenantResource
  endpoint:
    path: /TenantResource
    method: GET
    data_selector: records
- name: Tenant
  endpoint:
    path: /Tenant
    method: GET
    data_selector: records
- name: CapsuleConfiguration
  endpoint:
    path: /v1beta2/capsuleconfiguration
    method: GET
    data_selector: items
    params: {}
- name: GlobalTenantResource
  endpoint:
    path: /v1beta2/globaltenantresource
    method: GET
    data_selector: items
    params: {}
- name: ResourcePoolClaim
  endpoint:
    path: /v1beta2/resourcepoolclaim
    method: GET
    data_selector: items
    params: {}
- name: ResourcePool
  endpoint:
    path: /v1beta2/resourcepool
    method: GET
    data_selector: items
    params: {}
- name: TenantResource
  endpoint:
    path: /v1beta2/tenantresource
    method: GET
    data_selector: items
    params: {}
- name: Tenant
  endpoint:
    path: /v1beta2/tenant
    method: GET
    data_selector: items
    params: {}
- name: networkPolicies
  endpoint:
    path: /v1beta2/Tenant/spec/networkPolicies
    method: GET
    data_selector: items
    params: {}
- name: priorityClasses
  endpoint:
    path: /v1beta2/Tenant/spec/priorityClasses
    method: GET
    data_selector: allowed
    params: {}
- name: Tenant
  endpoint:
    path: /tenant
    method: GET
    data_selector: items
- name: Tenant.spec.namespaceOptions
  endpoint:
    path: /v1beta1/Tenant.spec.namespaceOptions
    method: GET
    data_selector: namespaceOptions
    params: {}
- name: Tenant.spec.networkPolicies
  endpoint:
    path: /v1beta1/Tenant.spec.networkPolicies
    method: GET
    data_selector: networkPolicies
    params: {}
- name: Tenant
  endpoint:
    path: /tenant
    method: GET
    data_selector: ''
    params: {}
notes:
- Refer to the Kubernetes API documentation for the fields of the metadata field.
- Last modified August 28, 2025
- Version v0.10.0 of the documentation is no longer actively maintained.
- The GlobalTenantResource is a cluster-scoped resource, designed for cluster administrators.
- The TenantResource allows Tenant owners to replicate resources across their Namespace.
- Capsule Proxy is an add-on for Capsule Operator addressing some RBAC issues when
  enabling multi-tenancy in Kubernetes.
- Capsule does not care about the authentication strategy used in the cluster and
  all the Kubernetes methods of authentication are supported.
- 'Ensure PodSecurityPolicy Admission Control is enabled on the APIs server: --enable-admission-plugins=PodSecurityPolicy'
- A tenant owner can not create a namespace/project in the OpenShift GUI. This must
  be done with kubectl.
- When copying the login token from the OpenShift GUI, there will always be the server
  address of the kubernetes api instead of the Capsule Proxy.
- Capsule implements a multi-tenant and policy-based environment in your Kubernetes
  cluster.
- Enable leader election for controller manager. Enabling this will ensure there is
  only one active controller manager.
- Development Mode defaults(encoder=consoleEncoder,logLevel=Debug,stackTraceLevel=Warn).
  Production Mode defaults(encoder=jsonEncoder,logLevel=Info,stackTraceLevel=Error).
- Requires setup of an OIDC identity provider
- Ensure that PodSecurityPolicy Admission Control is enabled on the API server.
- 'Make sure `PodSecurityPolicy` Admission Control is enabled on the APIs server:
  `--enable-admission-plugins=PodSecurityPolicy`.'
- A tenant owner can not create a namespace/project in the OpenShift GUI. This must
  be done with `kubectl`.
- When copying the `login token` from the OpenShift GUI, there will always be the
  server address of the kubernetes api instead of the Capsule Proxy.
- 'Always add the `pullPolicy: Always` on a multitenant cluster, to make sure you
  are working with the correct images you intended to.'
- User authentication for the platform should be handled via a central OIDC-compatible
  identity provider system.
- 'Make sure `PodSecurityPolicy` Admission Control is enabled on the API server: `--enable-admission-plugins=PodSecurityPolicy`.'
- Ensure to set up PodSecurityPolicy for tenant isolation.
- Ensure that the webhooks are properly configured during installation.
- PodSecurityPolicy Admission Control must be enabled on the API server.
- As the Pod Security Policies get deprecated and removed, the Pod Security Standards
  is used in place.
- Kubernetes provides a built-in Admission Controller to enforce the Pod Security
  Standards at either cluster level or namespace level.
- Capsule introduces a further segregation level (the Tenant abstraction) for Pod
  Security Standards.
- The cluster admin can impose limits on pod creation using Pod Security Policies.
- Capsule admission controller forbids the tenant owner to run privileged pods in
  specific namespaces.
- 'All Tenant Owners will be granted with two ClusterRole resources: admin and capsule-namespace-deleter.'
- 'make sure `PodSecurityPolicy` Admission Control is enabled on the APIs server:
  `--enable-admission-plugins=PodSecurityPolicy`'
- Capsule does not support multi-tenancy for Velero backups.
- The namespaces restored with Velero do not have the OwnerReference field used to
  bind the namespaces to the tenant.
- Use old and Rancher-standard paths with /auth subpath.
- Add custom paths, remove /auth subpath in return and issuer URLs.
- Velero requires an Object Storage backend where to store backups.
- Ensure to use the URL of the capsule-proxy if the API Server is reachable through
  it.
- Custom Resources feature is in an alpha stage and requires a high amount of computing
  resources.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Ensure PodSecurityPolicy Admission Control is enabled on the APIs server.
- Ensure to enable PodSecurityPolicy Admission Control on the API server.
- Velero requires an Object Storage backend where to store backups
- Uses OIDC for authentication via Keycloak
- Ensure proper configuration of Kubernetes API Server for OIDC
- A tenant owner having the admin scope on its namespaces only, does not have the
  permission to create Custom Resources Definitions (CRDs)
- This feature will be deprecated in a future release of Capsule.
- User impersonation supported for kubectl commands.
- Namespaces should ideally be prefixed with tenant name.
- Feature will be deprecated in a future release of Capsule. Instead use TenantReplications.
- In a multi-tenant environment, as more and more ingresses are defined, there is
  a chance of collision on the hostname.
- Tenant creation includes specific policies for image pull and storage classes.
- Namespace isolation is enforced through network policies.
- Each ResourcePool is representative for one ResourceQuota.
- Claims are queued whenever they are allocated to a pool.
- Uses TLS client-based authentication with a certificate and key.
- Supports both https and http, but http is not recommended.
- ResourcePools are scoped to the Tenant and used for all namespaces in the tenant.
- GlobalTenantResource is designed for cluster administrators and cannot be used by
  Tenant owners.
- Requires setup of connected app in Capsule for tenant management.
- The ServiceAccount must have the correct annotations to function.
- Specifies a list of ResourceQuota resources assigned to the Tenant.
- The assigned values are inherited by any namespace created in the Tenant.
errors:
- Error from server (NodePort service types are forbidden for the tenant)
- 'Error from server (ImagePullPolicy IfNotPresent for container nginx is forbidden,
  use one of the followings: Always)'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'NodePort service types are forbidden for the tenant: please, reach out to the system
  administrators'
- 'ImagePullPolicy IfNotPresent for container nginx is forbidden, use one of the followings:
  Always'
- 'Forbidden: User cannot access the resource'
- 'Not Found: Resource does not exist'
- Error from server (A valid Storage Class must be used, one of the following (delete-policy))
- 'Error from server (Forbidden): pods is forbidden: User "alice" cannot list resource
  "pods" in API group "" in the namespace "kube-system"'
- '404 Not Found: Ensure the resource exists or the path is correct.'
- '403 Forbidden: Check permissions or resource quota'
- '404 Not Found: Verify resource path or name'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '403 Forbidden: PodSecurityPolicy is not assigned to the tenant'
- '400 Bad Request: Invalid request format'
- 'Forbidden: User cannot modify resource due to permissions'
- 'NotFound: Resource not found in the specified namespace'
- 'Unauthorized: Invalid credentials provided'
- 'Forbidden: request denied due to policy restrictions'
- 'Unauthorized: invalid token or expired ID token'
- 'Cannot exceed Namespace quota: please, reach out to the system administrators'
- 'Forbidden: User cannot list resource in the namespace.'
- 'Unable to assign namespace to tenant: Please use capsule.clastix.io/tenant label
  when creating a namespace.'
- '400 Bad Request: Check the request body for required fields.'
- '403 Forbidden: User does not have permission for this action.'
- 'FORBIDDEN: User cannot list resource in API group at the cluster scope'
- '403 Forbidden: Ensure the ServiceAccount has the right permissions.'
- '404 Not Found: Check the resource path and identifiers.'
- '500 Internal Server Error: Check server logs for details.'
auth_info:
  mentioned_objects:
  - Tenant
  - NetworkPolicy
  - RoleBinding
  - capsule.clastix.io/v1beta2
  - ClusterRole
  - PodSecurityPolicy
  - User
  - OidcToken
  - Group
  - ServiceAccount
client:
  base_url: https://projectcapsule.dev
  headers:
    Accept: application/json
source_metadata: null
