resources:
- name: app
  endpoint:
    path: /platform/apps
    method: GET
    data_selector: apps
- name: users
  endpoint:
    path: /platform/users
    method: GET
    data_selector: users
- name: app_links
  endpoint:
    path: /app/links
    method: GET
    data_selector: app_links
- name: run_history
  endpoint:
    path: /services/data/vXX.X/sobjects/RunHistory
    method: GET
    data_selector: records
    params: {}
- name: run_history
  endpoint:
    path: /api/run_history
    method: GET
    data_selector: runs
- name: App Links
  endpoint:
    path: /widgets/app-links
    method: GET
- name: Apps
  endpoint:
    path: /widgets/apps
    method: GET
- name: Dashboards
  endpoint:
    path: /widgets/dashboards
    method: GET
- name: Iframe
  endpoint:
    path: /widgets/iframe
    method: GET
- name: Sticky Note (Simple Text)
  endpoint:
    path: /widgets/sticky-note-simple
    method: GET
- name: Sticky Note (Rich Text)
  endpoint:
    path: /widgets/sticky-note-rich
    method: GET
- name: Value Box
  endpoint:
    path: /widgets/value-box
    method: GET
- name: Bar & Line Chart
  endpoint:
    path: /widgets/bar-line-chart
    method: GET
- name: Horizontal Bar Chart
  endpoint:
    path: /widgets/horizontal-bar-chart
    method: GET
- name: Donut Chart
  endpoint:
    path: /widgets/donut-chart
    method: GET
- name: Table
  endpoint:
    path: /widgets/table
    method: GET
- name: grid_preferences
  endpoint:
    path: /api/grid/preferences
    method: POST
    data_selector: preferences
    params: {}
- name: dashboard
  endpoint:
    path: /platform/dashboards
    method: GET
- name: clusters
  endpoint:
    path: /clusters
    method: GET
    data_selector: data
    params: {}
- name: clusters
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: nodes
  endpoint:
    path: /nodes
    method: GET
    data_selector: nodes
    params: {}
- name: cluster_registration
  endpoint:
    path: /clusters/register
    method: POST
    data_selector: cluster
    params: {}
- name: cluster_events
  endpoint:
    path: /api/v1/cluster_events
    method: GET
    data_selector: events
    params: {}
- name: cluster_details
  endpoint:
    path: /infrastructure/clusters
    method: GET
- name: flows
  endpoint:
    path: /platform/flows
    method: GET
    data_selector: records
- name: Flow Editor
  endpoint:
    path: /flow/editor
    method: GET
- name: inject
  endpoint:
    path: /nodes/inject
    method: POST
    data_selector: message
- name: http
  endpoint:
    path: /nodes/http
    method: POST
    data_selector: message
- name: debug
  endpoint:
    path: /nodes/debug
    method: POST
    data_selector: message
- name: function
  endpoint:
    path: /nodes/function
    method: POST
    data_selector: message
- name: template
  endpoint:
    path: /nodes/template
    method: POST
    data_selector: message
- name: comment
  endpoint:
    path: /nodes/comment
    method: POST
    data_selector: message
- name: switch
  endpoint:
    path: /nodes/switch
    method: POST
    data_selector: message
- name: change
  endpoint:
    path: /nodes/change
    method: POST
    data_selector: message
- name: subflow
  endpoint:
    path: /Subflows
    method: GET
    data_selector: subflow_properties
    params: {}
- name: flows
  endpoint:
    path: /flows
    method: GET
    data_selector: flows
    params: {}
- name: http-api
  endpoint:
    path: /http-api/openapi.json
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: app_sizes
  endpoint:
    path: /app/sizes
    method: GET
    data_selector: sizes
    params: {}
- name: send_message
  endpoint:
    path: /send
    method: POST
    data_selector: data
    params: {}
- name: receive_message
  endpoint:
    path: /receive
    method: GET
    data_selector: data
    params:
      MaxNumberOfMessages: 10
      WaitTimeSeconds: 10
- name: publish_sns_notification
  endpoint:
    path: /sns/publish
    method: POST
    data_selector: data
    params: {}
- name: subscribe_sns_topic
  endpoint:
    path: /sns/subscribe
    method: POST
    data_selector: data
    params: {}
- name: upload_file
  endpoint:
    path: /upload/file
    method: POST
- name: file_upload
  endpoint:
    path: /upload
    method: POST
    data_selector: file
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Azure Cost Management
  endpoint:
    params:
      Api-Version: ''
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Webhook
  endpoint:
    path: /workflows/host****/triggers/manual/paths/invoke
    method: POST
    data_selector: message
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: model
  endpoint:
    path: /v1/models
    method: GET
    data_selector: models
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Inject
  endpoint:
    path: /inject
    method: GET
    data_selector: ''
    params: {}
- name: Change
  endpoint:
    path: /change
    method: GET
    data_selector: ''
    params: {}
- name: Switch
  endpoint:
    path: /switch
    method: GET
    data_selector: ''
    params: {}
- name: Delay
  endpoint:
    path: /delay
    method: GET
    data_selector: ''
    params: {}
- name: Counter Loop
  endpoint:
    path: /counter-loop
    method: GET
    data_selector: ''
    params: {}
- name: Array Loop
  endpoint:
    path: /array-loop
    method: GET
    data_selector: ''
    params: {}
- name: While Loop
  endpoint:
    path: /while-loop
    method: GET
    data_selector: ''
    params: {}
- name: Split
  endpoint:
    path: /split
    method: GET
    data_selector: ''
    params: {}
- name: Join
  endpoint:
    path: /join
    method: GET
    data_selector: ''
    params: {}
- name: Sort
  endpoint:
    path: /sort
    method: GET
    data_selector: ''
    params: {}
- name: Batch
  endpoint:
    path: /batch
    method: GET
    data_selector: ''
    params: {}
- name: Complete
  endpoint:
    path: /complete
    method: GET
    data_selector: ''
    params: {}
- name: Catch
  endpoint:
    path: /catch
    method: GET
    data_selector: ''
    params: {}
- name: Link in
  endpoint:
    path: /link-in
    method: GET
    data_selector: ''
    params: {}
- name: Link call
  endpoint:
    path: /link-call
    method: GET
    data_selector: ''
    params: {}
- name: Link out
  endpoint:
    path: /link-out
    method: GET
    data_selector: ''
    params: {}
- name: Debug
  endpoint:
    path: /debug
    method: GET
    data_selector: ''
    params: {}
- name: Comment
  endpoint:
    path: /comment
    method: GET
    data_selector: ''
    params: {}
- name: Function
  endpoint:
    path: /function
    method: GET
    data_selector: ''
    params: {}
- name: Template
  endpoint:
    path: /template
    method: GET
    data_selector: ''
    params: {}
- name: HTTP In
  endpoint:
    path: /http-in
    method: GET
    data_selector: ''
    params: {}
- name: HTTP Response
  endpoint:
    path: /http-response
    method: GET
    data_selector: ''
    params: {}
- name: HTTP Request
  endpoint:
    path: /http-request
    method: GET
    data_selector: ''
    params: {}
- name: Websocket In
  endpoint:
    path: /websocket-in
    method: GET
    data_selector: ''
    params: {}
- name: Websocket Out
  endpoint:
    path: /websocket-out
    method: GET
    data_selector: ''
    params: {}
- name: MQTT In
  endpoint:
    path: /mqtt-in
    method: GET
    data_selector: ''
    params: {}
- name: MQTT Out
  endpoint:
    path: /mqtt-out
    method: GET
    data_selector: ''
    params: {}
- name: CSV
  endpoint:
    path: /csv
    method: GET
    data_selector: ''
    params: {}
- name: HTML
  endpoint:
    path: /html
    method: GET
    data_selector: ''
    params: {}
- name: JSON
  endpoint:
    path: /json
    method: GET
    data_selector: ''
    params: {}
- name: XML
  endpoint:
    path: /xml
    method: GET
    data_selector: ''
    params: {}
- name: YAML
  endpoint:
    path: /yaml
    method: GET
    data_selector: ''
    params: {}
- name: Base64
  endpoint:
    path: /base64
    method: GET
    data_selector: ''
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /platform/users
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /users
    method: POST
    data_selector: records
    params: {}
- name: sessions
  endpoint:
    path: /platform/looking-up-sessions-of-a-user
    method: GET
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
- name: group
  endpoint:
    path: /platform/groups
    method: GET
- name: user
  endpoint:
    path: /platform/users
    method: GET
- name: user_role_mappings
  endpoint:
    path: /platform/browsing-user-role-mappings
    method: GET
- name: otp_policy
  endpoint:
    path: /api/v1/otp/policies
    method: POST
    data_selector: policy
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: account_profile
  endpoint:
    path: /account/profile
    method: GET
    data_selector: account_info
- name: session
  endpoint:
    path: /services/data/vXX.X/sobjects/Session
    method: GET
    data_selector: records
    params: {}
- name: apps
  endpoint:
    path: /platform/apps
    method: GET
    data_selector: records
- name: spaces
  endpoint:
    path: /platform/spaces
    method: GET
    data_selector: records
- name: nodes
  endpoint:
    path: /api/nodes
    method: GET
    data_selector: data
- name: flows
  endpoint:
    path: /api/flows
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Inject
  endpoint:
    path: /inject
    method: GET
    data_selector: records
- name: Debug
  endpoint:
    path: /debug
    method: GET
    data_selector: records
- name: Switch
  endpoint:
    path: /switch
    method: GET
    data_selector: records
- name: Change
  endpoint:
    path: /change
    method: GET
    data_selector: records
- name: Template
  endpoint:
    path: /template
    method: GET
    data_selector: records
- name: fruits
  endpoint:
    path: /fruits
    method: GET
    data_selector: payload
- name: hello
  endpoint:
    path: /hello
    method: GET
- name: hello_query
  endpoint:
    path: /hello-query
    method: GET
    params:
      firstName: John
      lastName: Doe
- name: hello_path
  endpoint:
    path: /hello-path/:name
    method: GET
- name: hello_headers
  endpoint:
    path: /hello-headers
    method: GET
- name: head_request
  endpoint:
    path: /path/to/resource
    method: HEAD
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: customer_by_id
  endpoint:
    path: /customers/:id
    method: GET
- name: create_customer
  endpoint:
    path: /customers
    method: POST
- name: update_customer
  endpoint:
    path: /customers/:id
    method: PATCH
- name: delete_customer
  endpoint:
    path: /customers/:id
    method: DELETE
- name: rap_gpt
  endpoint:
    path: /webhooks/rap-gpt
    method: POST
    data_selector: items
    params: {}
- name: Assignments
  endpoint:
    path: /platform/assignments
    method: GET
- name: inject_node
  endpoint:
    path: /inject
    method: POST
    data_selector: msg
    params: {}
- name: switch_node
  endpoint:
    path: /switch
    method: POST
    data_selector: msg
    params: {}
- name: change_node
  endpoint:
    path: /change
    method: POST
    data_selector: msg
    params: {}
- name: template_node
  endpoint:
    path: /template
    method: POST
    data_selector: msg
    params: {}
- name: function_node
  endpoint:
    path: /function
    method: POST
    data_selector: msg
    params: {}
- name: debug_node
  endpoint:
    path: /debug
    method: POST
    data_selector: msg
    params: {}
- name: cat
  endpoint:
    path: /cat
    method: GET
- name: tags
  endpoint:
    path: /api/tags
    method: GET
- name: cat_with_tag
  endpoint:
    path: /cat/{tag}/says/{text}
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: passengers
  endpoint:
    path: /api/titanic/passengers
    method: GET
    data_selector: data
    params: {}
- name: passenger_by_id
  endpoint:
    path: /api/titanic/passengers/:id
    method: GET
    data_selector: data
    params: {}
- name: passengers_with_queries
  endpoint:
    path: /api/v2/titanic/passengers
    method: GET
    data_selector: data
    params: {}
- name: passengers_with_pagination
  endpoint:
    path: /api/v3/titanic/passengers
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- When making outgoing HTTP requests from qibb flows, you have multiple options.
- The default HTTP request node is generally easier and faster to set up.
- Requires setup of connected app in qibb
- Uses OAuth2 with refresh token — requires setup of connected app in qibb
- Some objects may return nulls in deeply nested fields
- By adding a role to an app client, you can define specific access permissions for
  users and groups.
- Some fields may return nulls in deeply nested structures
- Polling interval can be set to refresh the Runs table automatically
- Manual refresh option available to update the Runs table
- Logging is an essential practice when developing a flow, as it provides insights
  into the flow's operation and helps identify issues early.
- Ensure you are in Config/Edit Mode to access grid preferences.
- Promoting a dashboard as a home screen is a feature available in qibb.
- Dashboards can be promoted as home screens to other users by having certain tags
  applied.
- Operators, who have access to the infrastructure of the platform, can configure
  the behavior of how home screens are promoted to users.
- Connect qibb with external Identity Providers
- This feature is currently in BETA and may not be fully functional or stable.
- The AI Copilot currently does not access any external web resources or offer web
  search functionality.
- To protect your privacy, chat history is not saved and will be discarded if you
  clear the conversation, refresh your browser or restart the Flow App.
- Requires setup of connected app in api
- 'Accidentally deleting a flow can be reversed by pressing `ctrl + z` or `cmd + z`.
  Remember: Changes are only registered if they are deployed. If you didn''t deploy
  your changes, you can always refresh the page and your flows will have the state
  of your last deployment.'
- The Flow is protected by the same login procedure as the main Portal.
- Role-based access control (RBAC) is set up to require either a View or Edit role.
- You can use projects to save your progress and access it again in the next session.
- The encryption setting can't be changed once the project is created.
- It is highly advisable to encrypt your credentials file if sharing on public platforms
  like GitHub.
- For HTTP URLs, do not include your username and/or password in the URL itself.
- The flows JSON file can't be accessed or changed through the Flow App.
- body parameters and response objects cannot be set up with nested objects
- body parameter and response object structures cannot be globally defined and reused
  across multiple operations
- Some objects like Contact may return nulls in deeply nested fields
- Add job management capabilities to your flow with checkpoints
- Jobs exceeding the timeout duration will be flagged as failed.
- qibb does not provide support, maintenance, or security assurance for community
  nodes.
- You are responsible for verifying the suitability, safety, and compliance of these
  nodes for your workflows.
- App sizes are subject to change.
- When your app tries to use more memory than the maximum limit, it will be automatically
  stopped and restarted.
- Subflows offer a simple but powerful way to wrap a flow as a node in the palette.
- Link nodes can be used to create a flow that spreads between tabs in the editor
  as they add a virtual wire from the end of one flow to the start of another.
- Variables are accessible by every node across any flow tab within the same flow
  app.
- Variables are only accessible by nodes on the same flow tab.
- Requires setup of AWS SDK with specified secrets
- Logging is an essential practice when developing a flow, as it provides you with
  insights into the flow's operation and helps identify issues early.
- Uses OAuth2 with refresh token — requires setup of connected app in api.
- Each space should have the same set of variables defined.
- Static files in the flow app can be referenced with a path relative to the created
  file.
- Protecting your API and hosted web content
- The second will add the necessity to add a Bearer Token to every other HTTP request
  with the Node-RED flow acting like an API.
- WebSocket Events can be triggered by interacting with the webpage.
- Running a Socket.IO server on the same port as Node-RED will crash the instance.
- Ensure that the File module is accessible within your qibb environment.
- You will need a Host URL and an API Key.
- You will need a Personal Access Token to use as Bearer token for authentication.
- Enter your Personal Access Token with the prefix 'Bearer' into the Advanced/Security
  field of the node.
- Client ID can be generated from the Aspera Faspex UI under Configurations > API
  clients.
- Private Key (RSA) should be entered into the user account under Account settings
  > Preferences > Public key.
- Uses JWT grant type for authentication.
- Requires setup of API client in Aspera on Cloud.
- To authenticate, you will need a URL, Client ID, Client Secret, Username, and Password.
- Obtain your Access key, Secret access key, and Region information for your AWS account.
- An X-Amz-Target should be entered as a parameter.
- You need your Access key, Secret access key, and Region information for authentication.
- Developers should avoid making frequent requests to the public endpoint.
- Don't make a request to the public endpoint each time that you make a request to
  MediaConvert.
- You will need your Access key, Secret access key, and Region information for authentication.
- Ensure you have an AWS account and the appropriate permissions to use Amazon Transcribe.
- You can either create an IAM user with the necessary permissions or use an existing
  IAM user with appropriate access keys.
- The latest version of the baseUrl is /vision/v3.2
- Ensure that you have the necessary permissions to perform the integration.
- Location should be in JSON format, for example, 'eastus' instead of 'East US'.
- Box uses a Service Account to perform actions via the API.
- Checkpoint Nodes require your app to be running on flow v4.0.0 or higher.
- Job management features in the Portal require the platform to be running on qibb
  v1.42.0 or higher.
- For some of the endpoints in Upload API, you need to generate a Signature and use
  it for request.
- Your API token acts as a password for Confluence, so keep it safe and don't share
  it with others.
- For the Content Preview API, the API token must be passed as an HTTP authorization
  header.
- In the Content Management API, adding a tag name directly as a query parameter is
  not supported.
- API Key is in the format username:password, with ':' separating the two parts
- Enter your DeepL Authentication key with the prefix “DeepL-Auth-Key” in the security
  section of the DeepL node.
- You would only need your API Key for authentication.
- DeepVA needs an API Key to authenticate and to grant access to our service.
- You will need an API Key to use it as a bearer token for authentication.
- Provide a name for your API key, set an expiration date if required, define the
  permissions for your API key based on your needs.
- You will need an API Key for authentication.
- Once you click on API key button, your API key will be generated.
- Save your API key to be able to use it later.
- For access to your own endpoints, you will need your host URL and an Access Token
  associated with your account.
- 'Compliance date should have the format: YYYYMMDD. E.g. 20230825'
- To authenticate, you will need your Account Name, Password, User Email, and Auth
  URL.
- Enter your credentials in the Account Name, Password, and User Email fields of the
  MediaKind Auth node.
- You need a Host URL and a API Key for authentication.
- Webhook URL is required for integration with Microsoft Teams.
- Enter your Mimir API key with the prefix 'Bearer ' in the security section of the
  Mimir node.
- You will need your host URL as well as the username and password associated with
  your account.
- Body parameters only support JSON formatting. Default and required objects will
  be pasted in as JSON, syntax highlighting is only JSON.
- YAML is only supported in OAS2, besides that only the previously mentioned content-types
  are supported.
- Only one security scheme is supported, the first one is chosen.
- Supported security schemes are apiKey, basic, bearer, AWS Signature V2.
- A Service/User Token is required for accessing these APIs.
- Set JSESSIONID cookie in all the HTTP requests.
- Set user message digest as a header (otmmauthtoken) in all the HTTP requests.
- You need your Account ID and API Key for authentication.
- The first API key needs to be generated through the application web interface, in
  the 'Organization' menu. Each API key is associated with an 'api_secret', then used
  to generate a token that is then passed as an authentication bearer to all subsequent
  API calls.
- For authentication, you will need the Username, Password, and Host URL associated
  with the file transfer service you are using.
- You will need a Base URL and an API Key.
- Get an API Key associated with your account in the IT Administration Console under
  Account/Developer menu.
- It is currently not possible to use Error Handling functionality by default, as
  the Slack API server always sends 200 status code responses. The server sends error
  messages in payload.
- Ensure to handle rate limits when making API requests.
- Enter your Account SID as username and your Authentication Token as password in
  the Advanced/Security field of the node.
- Uses a system user token for authentication — requires setup in Meta Business Suite
- Token expiration options are 60 days or never
- Defining required actions which shall be performed by a user during sign in
- Manually setting a password for a user requires user identification.
- A temporary password is valid only until the user logs in again, after which the
  user will be prompted to change the password.
- Make sure that the passwords in both fields match.
- Prompting the user to set or update their password via email
- Moving a group within the tree
- Managing user role mappings requires appropriate permissions.
- The user role mappings view offers a possibility to filter by search keyword and
  by the client.
- Search by keyword works like any other search functionality it only matches the
  exact keywords.
- Filter by client lists the first five clients as a dropdown and offers the option
  to search for additional clients by client name.
- It allows filtering based on a single client or multiple clients.
- The result contains only the roles of the matching clients.
- The clear all button can be used to clear the applied filters.
- The User Role Assignments table provides the ability to sort columns in ascending
  or descending order.
- The group role mappings view offers a possibility to filter by search keyword and
  by the client.
- The group role mappings table also provides a possibility to sort columns in ascending
  or descending order.
- Role Mappings table has an Assigned column that lists all assigned, not assigned,
  and effective roles of a group.
- The policy will be only applied if it is Enabled state.
- Managing OTP Policies
- TOTP (Time-based One Time Password) is one of the supported two-factor authentication
  methods.
- Configuring Brute Force Detection for the Identity Provider
- Locks the user permanently out when exceeding the maximum of login failures.
- How many failures until wait period is triggered.
- In case the maximum of login failures has been met, this value defines how much
  time the user shall be locked out.
- If a failure happens concurrently to quickly, lock out the user.
- How long the user needs to wait after a quick login failure.
- Maximum time the user shall be locked out.
- Defines when the failure count will reset.
- Configuring the Login Settings
- When enabled, a New User? Register option will be displayed on the Login Page, which
  unveils a registration form.
- When enabled, a Forgot password option will be displayed on the Login Page.
- When enabled, a Remember Me option will be displayed as a checkbox on the Login
  Page.
- When enabled, users can login with their email address as an alternative to the
  username.
- The setup process requires collaboration between our Support Team and the customer.
- Configuration adjustments are essential in both qibb's and the customer's Identity
  providers.
- Single Sign-On with Microsoft Entra ID (previously known as Azure Active Directory)
- Recommended to use OpenID Connect for integration
- You can restrict access to qibb for a specific set of users
- Multi-factor authentication is available for qibb users.
- Standard and Premium customers are required to contact our service desk to initiate
  the setup
- Ultimate customers can perform the setup themselves, provided they have suitable
  administrative rights on the qibb platform
- Manage access to Dashboards
- Users which are part of the dashboard-admin group are also automatically Owner of
  all dashboards across the platform.
- Access to the dashboard-admin group requires an Ultimate Subscription and a single-tenant
  environment.
- Users which are part of the space-admin group are also automatically Owner of all
  spaces across the platform.
- Access to this group requires an Ultimate Subscription and a single-tenant environment.
- Manage access to the Flow Editor
- App Roles are independent of Space membership, allowing users to perform specific
  actions on the app.
- Ensure that the OAuth2 credentials are properly configured within the qibb platform.
- Nodes in 'Upcoming' stage can not be installed via the node catalog of the Flow
  Editor.
- Nodes in 'Preview' stage are available for early access and may contain experimental
  features or limitations.
- 'For ULTIMATE (PAAS) Subscribers: With a qibb Ultimate subscription, you can choose
  to keep all network traffic internal within your hybrid cloud infrastructure, eliminating
  the need for routing through the public internet.'
- 'For ULTIMATE (PAAS) Subscribers: If you already connect your public cloud infrastructure
  with your on-premises infrastructure using dedicated options like AWS Direct Connect,
  Google Cloud Interconnect, or Azure ExpressRoute, qibb can leverage these as well.'
- The setup requires minimal outbound firewall configuration.
- Communication is bidirectional between the private gateway and your peered network
  agents.
- OpenID/OAuth 2.0 Token based security and Role-based Access Control on endpoint
  level
- The function node allows JavaScript code to be run against the msg object that is
  passed through it.
- The returned message object doesn't have to be identical to the one initially received;
  the function has the flexibility to create an entirely new object before returning
  it.
- The function node can also display status, but you can extend this functionality
  by defining the shape, fill, and text properties.
- The difference between node.send() and return msg; is that after node.send(), the
  rest of the code in the function node continues to be evaluated, while if using
  the return statement, the rest of the code is being ignored.
- GET /customers and GET /customers/:id endpoints do not require authentication.
- POST, PATCH, and DELETE calls require basic authentication.
- Mimir API Key should be added to Secrets tab as MIMIR_API_KEY.
- OpenAI API Key should be added to Secrets tab as OPEN_AI_API_KEY.
- Basic Nodes Assignment
- Uses a static API key for authentication.
- Data is retrieved from a CSV file and needs to be converted to JSON format.
- Some objects may have specific behaviors or limitations.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Always review generated flows and code before implementing them.
- 'Missing role: User must have View or Edit role to access the Editor.'
- '401 Unauthorized: Check your credentials and scopes.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Check the access token validity.'
- '403 Forbidden: Ensure the necessary permissions are granted.'
- '429: Rate limit exceeded'
- Oh no, something bad happened
- '401 Unauthorized: If the provided username and password don’t match.'
- '400 Bad Request: If the incoming request body lacks any mandatory properties or
  contains unsupported properties or types.'
- '404 Not Found: If the specified customer ID does not exist.'
- '401 Unauthorized: Invalid or missing API key.'
- '404 Not Found: Passenger ID not found.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - MONDAY_API_TOKEN
  - AWS_SQS_QUEUE_URL
  - AWS_SQS_API_KEY
  - AWS_SQS_API_SECRET
  - AWS_SQS_QUEUE_REGION
  - AWS_SNS_TOPIC_ARN
  - AWS_SNS_API_KEY
  - AWS_SNS_API_SECRET
  - AWS_SNS_TOPIC_REGION
  - Azure Active Directory
  - qibb IdP URL
  - Okta Tenant ID
  - Mimir API Key
  - API Key Group
client:
  base_url: https://qibb.com
  auth:
    type: oauth2
source_metadata: null
