resources:
- name: Account
  endpoint:
    path: /api-reference/get-account
    method: GET
- name: Deployments
  endpoint:
    path: /api-reference/list-deployments
    method: GET
- name: Models
  endpoint:
    path: /api-reference/list-models
    method: GET
- name: Datasets
  endpoint:
    path: /api-reference/list-datasets
    method: GET
- name: Users
  endpoint:
    path: /api-reference/list-users
    method: GET
- name: API Keys
  endpoint:
    path: /api-reference/list-api-keys
    method: GET
- name: example_resource
  endpoint:
    path: /api/v1/example
    method: GET
    data_selector: records
    params: {}
- name: chat_completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: completion
  endpoint:
    path: /inference/v1/completions
    method: POST
    data_selector: choices
- name: chat_completion
  endpoint:
    path: /inference/v1/chat/completions
    method: POST
    data_selector: choices
- name: chat_completions
  endpoint:
    path: /api-reference/post-completions
    method: POST
- name: completions
  endpoint:
    path: /api-reference/post-completions
    method: POST
- name: chat_completions
  endpoint:
    path: /api/chat/completions
    method: POST
    data_selector: choices
    params: {}
- name: completions
  endpoint:
    path: /api/completions
    method: POST
    data_selector: choices
    params: {}
- name: pre_recorded_transcription
  endpoint:
    path: /api-reference/audio-transcriptions
    method: POST
    data_selector: text
    params: {}
- name: pre_recorded_translation
  endpoint:
    path: /api-reference/audio-translations
    method: POST
    data_selector: text
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
    params: {}
- name: get_city_population
  endpoint:
    path: /tools/get_city_population
    method: POST
    data_selector: tool_calls
    params: {}
- name: get_financial_data
  endpoint:
    path: /tools/get_financial_data
    method: POST
    data_selector: tool_calls
    params: {}
- name: get_city_population
  endpoint:
    path: /api/get_city_population
    method: GET
    data_selector: tool_calls
    params: {}
- name: get_financial_data
  endpoint:
    path: /api/get_financial_data
    method: GET
    data_selector: tool_calls
    params: {}
- name: get_weather
  endpoint:
    path: /weather
    method: GET
    data_selector: weather
    params: {}
- name: model_inference
  endpoint:
    path: /api/v1/inference
    method: POST
    data_selector: response
    params: {}
- name: predicted_outputs
  endpoint:
    path: /predicted_outputs
    method: POST
    data_selector: response
    params: {}
- name: model_upload
  endpoint:
    path: /accounts/{ACCOUNT_ID}/models
    method: POST
    data_selector: model
    params: {}
- name: model
  endpoint:
    path: /models
    method: GET
    data_selector: models
    params: {}
- name: deployment
  endpoint:
    path: /deployments
    method: POST
    data_selector: deployments
    params: {}
- name: regions
  endpoint:
    path: /deployments/regions
    method: GET
    data_selector: regions
    params: {}
- name: fine_tuning
  endpoint:
    path: /fine-tuning/fine-tuning-models
    method: GET
    data_selector: models
- name: fine_tuning
  endpoint:
    path: /fine-tuning
    method: POST
    data_selector: results
- name: Qwen 2.5 VL 3B Instruct
  endpoint:
    path: /accounts/fireworks/models/qwen2p5-vl-3b-instruct
    method: GET
- name: Qwen 2.5 VL 7B Instruct
  endpoint:
    path: /accounts/fireworks/models/qwen2p5-vl-7b-instruct
    method: GET
- name: Qwen 2.5 VL 32B Instruct
  endpoint:
    path: /accounts/fireworks/models/qwen2p5-vl-32b-instruct
    method: GET
- name: Qwen 2.5 VL 72B Instruct
  endpoint:
    path: /accounts/fireworks/models/qwen2p5-vl-72b-instruct
    method: GET
- name: rft_job
  endpoint:
    path: /create_rftj
    method: POST
    data_selector: job
    params:
      epochs: 3
      learning-rate: 1e-4
      lora-rank: 16
      max-context-length: 16384
      inference-max-tokens: 1024
      inference-temperature: 0.8
      inference-top-p: 0.9
      inference-top-k: 40
      inference-n: 6
      inference-extra-body: '{"stop":["\n\n"]}'
- name: development_dataset
  endpoint:
    path: /path/to/development_dataset
    method: GET
    data_selector: messages
    params: {}
- name: training_dataset
  endpoint:
    path: /path/to/training_dataset
    method: GET
    data_selector: messages
    params: {}
- name: output_dataset
  endpoint:
    path: /path/to/output_dataset
    method: GET
    data_selector: messages
    params: {}
- name: Proxy Dataset
  endpoint:
    path: /create/dataset
    method: POST
    data_selector: dataset
    params: {}
- name: Fine-tuning Job
  endpoint:
    path: /create/sftj
    method: POST
    data_selector: fine_tuning_job
    params: {}
- name: users
  endpoint:
    path: /accounts/users
    method: POST
    data_selector: user
    params: {}
- name: audio_transcriptions
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
- name: audio_transcriptions
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
    data_selector: text
    params: {}
- name: generate_image
  endpoint:
    path: /inference/v1/workflows/accounts/fireworks/models/flux-1-schnell-fp8/text_to_image
    method: POST
    data_selector: id
- name: inference
  endpoint:
    path: /inference/v1/completions
    method: POST
    data_selector: data
    params: {}
- name: create_chat_completion
  endpoint:
    path: /inference/v1/chat/completions
    method: POST
    data_selector: null
    params: {}
- name: chat_completion
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: id
- name: create_completion
  endpoint:
    path: /inference/v1/completions
    method: POST
    data_selector: choices
    params: {}
- name: completions
  endpoint:
    path: /completions
    method: POST
    data_selector: choices
    params: {}
- name: model_response
  endpoint:
    path: /inference/v1/responses
    method: POST
    data_selector: id
- name: delete_model_response
  endpoint:
    path: /inference/v1/responses/{response_id}
    method: DELETE
- name: embeddings
  endpoint:
    path: /embeddings
    method: POST
    data_selector: data
- name: generate_or_edit_image
  endpoint:
    path: /inference/v1/workflows/accounts/fireworks/models/{model}
    method: POST
    data_selector: request_id
- name: get_generated_image
  endpoint:
    path: /api-reference/get-generated-image-from-flux-kontex
    method: GET
    data_selector: ''
- name: get_generated_image
  endpoint:
    path: /inference/v1/workflows/accounts/fireworks/models/{model}/get_result
    method: GET
    data_selector: result
- name: streaming_transcription
  endpoint:
    path: /api-reference/audio-streaming-transcriptions
    method: GET
- name: transcribe_audio
  endpoint:
    path: /api-reference/audio-transcriptions
    method: POST
- name: translate_audio
  endpoint:
    path: /api-reference/audio-translations
    method: POST
- name: streaming_transcription
  endpoint:
    path: /v1/audio/transcriptions/streaming
    method: GET
    data_selector: segments
- name: streaming_transcription
  endpoint:
    path: /v1/audio/transcriptions/streaming
    method: GET
- name: streaming_transcription
  endpoint:
    path: /v1/audio/transcriptions/streaming
    method: GET
    data_selector: segments
    params:
      response_format: verbose_json
      task: transcribe
      language: en
- name: streaming_transcription
  endpoint:
    path: /v1/audio/transcriptions/streaming
    method: GET
    data_selector: segments
    params:
      response_format: verbose_json
      language: en
      task: transcribe
- name: audio_translations
  endpoint:
    path: /v1/audio/translations
    method: POST
- name: transcription
  endpoint:
    path: /transcribe
    method: POST
    data_selector: text
- name: audio_transcriptions
  endpoint:
    path: v1/audio/transcriptions
    method: POST
    data_selector: submitted
    params:
      endpoint_id: audio-prod
- name: audio_translations
  endpoint:
    path: v1/audio/translations
    method: POST
    data_selector: submitted
    params:
      endpoint_id: audio-prod
- name: create_batch_request
  endpoint:
    path: /audio/transcriptions
    method: POST
    data_selector: response
    params:
      endpoint_id: audio-prod
- name: check_batch_status
  endpoint:
    path: /get-batch-status
    method: GET
    data_selector: status
    params: {}
- name: Check Batch Status
  endpoint:
    path: /v1/accounts/{account_id}/batch_job/{batch_id}
    method: GET
- name: batch_status
  endpoint:
    path: /api/v1/batch/status
    method: GET
    data_selector: status
    params:
      account_id: string
      batch_id: string
- name: account
  endpoint:
    path: /v1/accounts/{account_id}
    method: GET
    data_selector: records
- name: deployments
  endpoint:
    path: /accounts/{account_id}/deployments
    method: GET
    data_selector: deployments
    params:
      pageSize: 200
- name: deployment
  endpoint:
    path: /v1/accounts/{account_id}/deployments/{deployment_id}
    method: GET
    data_selector: response
    params: {}
- name: deployments
  endpoint:
    path: /v1/accounts/{account_id}/deployments
    method: POST
    data_selector: name
    params: {}
- name: deployments
  endpoint:
    path: /v1/accounts/{account_id}/deployments
    method: POST
    data_selector: deployment
    params: {}
- name: update_deployment
  endpoint:
    path: /v1/accounts/{account_id}/deployments/{deployment_id}
    method: PATCH
    data_selector: status
    params: {}
- name: update_deployment
  endpoint:
    path: /accounts/{account_id}/deployments/{deployment_id}
    method: PATCH
    data_selector: deployment
    params: {}
- name: delete_deployment
  endpoint:
    path: /v1/accounts/{account_id}/deployments/{deployment_id}
    method: DELETE
- name: undelete_deployment
  endpoint:
    path: /v1/accounts/{account_id}/deployments/{deployment_id}:undelete
    method: POST
    data_selector: status
    params: {}
- name: models
  endpoint:
    path: /v1/accounts/{account_id}/models
    method: GET
    data_selector: models
    params:
      pageSize: 200
- name: get_model
  endpoint:
    path: /accounts/{account_id}/models/{model_id}
    method: GET
- name: models
  endpoint:
    path: /v1/accounts/{account_id}/models
    method: POST
- name: Create Model
  endpoint:
    path: /v1/accounts/{account_id}/models
    method: POST
    data_selector: model
- name: Get Model
  endpoint:
    path: /api-reference/get-model
    method: GET
- name: List Models
  endpoint:
    path: /api-reference/list-models
    method: GET
- name: model
  endpoint:
    path: /v1/accounts/{account_id}/models/{model_id}
    method: PATCH
    data_selector: model
    params: {}
- name: update_model
  endpoint:
    path: /v1/accounts/{account_id}/models/{model_id}
    method: PATCH
    data_selector: status
    params: {}
- name: get_model
  endpoint:
    path: /v1/accounts/{account_id}/models/{model_id}
    method: GET
    data_selector: status
    params: {}
- name: prepare_model
  endpoint:
    path: /v1/accounts/{account_id}/models/{model_id}:prepare
    method: POST
    data_selector: response
    params: {}
- name: get_model_upload_endpoint
  endpoint:
    path: /v1/accounts/{account_id}/models/{model_id}:getUploadEndpoint
    method: POST
    data_selector: filenameToSignedUrls
    params: {}
- name: get_model_download_endpoint
  endpoint:
    path: /v1/accounts/{account_id}/models/{model_id}:getDownloadEndpoint
    method: GET
    data_selector: filenameToSignedUrls
- name: validate_model_upload
  endpoint:
    path: /v1/accounts/{account_id}/models/{model_id}:validateUpload
    method: GET
    data_selector: '{}'
    params: {}
- name: delete_model
  endpoint:
    path: /v1/accounts/{account_id}/models/{model_id}
    method: DEL
    data_selector: '{}'
    params: {}
- name: deployedModels
  endpoint:
    path: /accounts/{account_id}/deployedModels
    method: GET
    data_selector: deployedModels
    params:
      pageSize: 200
- name: Get LoRA
  endpoint:
    path: /v1/accounts/{account_id}/deployedModels/{deployed_model_id}
    method: GET
    data_selector: <string>
    params: {}
- name: load_lora
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: Update LoRA
  endpoint:
    path: /v1/accounts/{account_id}/deployedModels/{deployed_model_id}
    method: PATCH
    data_selector: response
    params: {}
- name: Unload LoRA
  endpoint:
    path: /v1/accounts/{account_id}/deployedModels/{deployed_model_id}
    method: DELETE
- name: supervised_fine_tuning_jobs
  endpoint:
    path: /accounts/{account_id}/supervisedFineTuningJobs
    method: GET
    data_selector: supervisedFineTuningJobs
    params:
      pageSize: 200
- name: supervised_fine_tuning_job
  endpoint:
    path: /v1/accounts/{account_id}/supervisedFineTuningJobs/{supervised_fine_tuning_job_id}
    method: GET
    data_selector: supervisedFineTuningJob
- name: supervised_fine_tuning_job
  endpoint:
    path: /v1/accounts/{account_id}/supervisedFineTuningJobs
    method: POST
    data_selector: response
    params: {}
- name: supervised_fine_tuning_jobs
  endpoint:
    path: /v1/accounts/{account_id}/supervisedFineTuningJobs
    method: POST
    data_selector: createTime
    params: {}
- name: Delete Supervised Fine-tuning Job
  endpoint:
    path: /v1/accounts/{account_id}/supervisedFineTuningJobs/{supervised_fine_tuning_job_id}
    method: DELETE
    data_selector: '{}'
- name: reinforcement_fine_tuning_jobs
  endpoint:
    path: /v1/accounts/{account_id}/reinforcementFineTuningJobs
    method: GET
    data_selector: reinforcementFineTuningJobs
    params:
      pageSize: 200
- name: Reinforcement Fine-tuning Job
  endpoint:
    path: /v1/accounts/{account_id}/reinforcementFineTuningJobs/{reinforcement_fine_tuning_job_id}
    method: GET
- name: reinforcement_fine_tuning_jobs
  endpoint:
    path: /v1/accounts/{account_id}/reinforcementFineTuningJobs
    method: POST
    data_selector: output
    params: {}
- name: delete_reinforcement_fine_tuning_job
  endpoint:
    path: /v1/accounts/{account_id}/reinforcementFineTuningJobs/{reinforcement_fine_tuning_job_id}
    method: DELETE
    data_selector: '{}'
- name: batch_inference_jobs
  endpoint:
    path: /batchInferenceJobs
    method: GET
    data_selector: batchInferenceJobs
    params:
      pageSize: 200
- name: batch_inference_job
  endpoint:
    path: /v1/accounts/{account_id}/batchInferenceJobs/{batch_inference_job_id}
    method: GET
    data_selector: records
- name: batch_inference_jobs
  endpoint:
    path: /v1/accounts/{account_id}/batchInferenceJobs
    method: POST
    data_selector: response
    params: {}
- name: batch_inference_job
  endpoint:
    path: /v1/accounts/{account_id}/batchInferenceJobs/{batch_inference_job_id}
    method: DELETE
    data_selector: object
    params: {}
- name: datasets
  endpoint:
    path: /accounts/{account_id}/datasets
    method: GET
    data_selector: datasets
    params:
      pageSize: 200
- name: dataset
  endpoint:
    path: /accounts/{account_id}/datasets/{dataset_id}
    method: GET
    data_selector: records
    params: {}
- name: datasets
  endpoint:
    path: /v1/accounts/{account_id}/datasets
    method: POST
    data_selector: dataset
    params: {}
- name: upload_dataset_files
  endpoint:
    path: /v1/accounts/{account_id}/datasets/{dataset_id}:upload
    method: POST
    data_selector: id
    params: {}
- name: get_dataset_upload_endpoint
  endpoint:
    path: /v1/accounts/{account_id}/datasets/{dataset_id}:getUploadEndpoint
    method: POST
    data_selector: filenameToSignedUrls
    params: {}
- name: validate_dataset_upload
  endpoint:
    path: /v1/accounts/{account_id}/datasets/{dataset_id}:validateUpload
    method: POST
    data_selector: '{}'
- name: datasets
  endpoint:
    path: /v1/accounts/{account_id}/datasets/{dataset_id}
    method: PATCH
    data_selector: status
    params: {}
- name: Delete Dataset
  endpoint:
    path: /v1/accounts/{account_id}/datasets/{dataset_id}
    method: DELETE
- name: users
  endpoint:
    path: /accounts/{account_id}/users
    method: GET
    data_selector: users
    params:
      page_size: 200
- name: user
  endpoint:
    path: /v1/accounts/{account_id}/users/{user_id}
    method: GET
    data_selector: '200'
    params: {}
- name: create_user
  endpoint:
    path: /accounts/{account_id}/users
    method: POST
    data_selector: users
    params: {}
- name: Update User
  endpoint:
    path: /v1/accounts/{account_id}/users/{user_id}
    method: PATCH
    data_selector: status
    params: {}
- name: api_keys
  endpoint:
    path: /accounts/{account_id}/apiKeys
    method: GET
    data_selector: apiKeys
    params: {}
- name: api_key
  endpoint:
    path: /v1/accounts/{account_id}/apiKeys
    method: POST
    data_selector: apiKey
    params: {}
- name: account
  endpoint:
    path: /v1/accounts/{account_id}
    method: GET
    data_selector: account
    params: {}
- name: delete_api_key
  endpoint:
    path: /v1/accounts/{account_id}/apiKeys:delete
    method: POST
    data_selector: '{}'
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Fireworks optimizes inference for your workload and your use case.
- Some objects may return nulls in deeply nested fields
- This is a known scenario that support can resolve once they verify your email ownership.
- Fireworks uses your LinkedIn primary email address for account identification
- You can switch between different Fireworks accounts by changing your LinkedIn primary
  email
- API Key is required to access Fireworks AI API.
- You can use the OpenAI Python client library to interact with Fireworks.
- Ensure that the model parameter refers to one of Fireworks models.
- API supports serverless and dedicated deployments for models.
- Models with a conversation config have the chat completions API enabled.
- It is recommended to use the chat completions API to avoid common prompt formatting
  errors.
- It is recommended to use the chat completions API to avoid prompt formatting errors.
- Supports files up to 1GB in formats like MP3, FLAC, and WAV.
- The total number of images included in a single API request cannot exceed 30.
- If images are provided in base64 encoding, they must be less than 10MB in total.
- If images are provided as URLs, then each image needs to be smaller than 5MB.
- The embedding model inputs text and outputs a vector of floating point numbers.
- Responses are stored by default and can be referenced by their ID.
- Datasets must adhere strictly to the JSONL format, where each line represents a
  complete JSON-formatted inference request.
- 'Total size limit: Under 500MB'
- The API supports function calling and dynamic agent creation.
- Function calling enables models to intelligently select and utilize tools based
  on user input.
- 'Argument accumulation: Tool call arguments arrive in multiple chunks and must be
  concatenated'
- 'Multiple tool calls: Use the index field to track different tool calls in the same
  response'
- 'JSON validation: Always validate the final accumulated arguments as valid JSON
  before execution'
- 'Error handling: Be prepared for incomplete or malformed JSON during streaming'
- JSON mode allows you to force the output of any Fireworks language model to conform
  to a provided JSON schema.
- When using JSON mode, you MUST instruct the model to produce JSON and describe the
  desired schema via a system or user message.
- Requires setup of connected app in Fireworks AI
- Using Predicted Outputs is free at this time
- We recommend setting `temperature=0` for best results for most intended use cases
  of Predicted Outputs.
- Fireworks’ default co-located endpoint is used unless instructed to use a personalized
  endpoint.
- Use your Fireworks API key for authentication.
- Quantized deployments can only be served using H100 GPUs.
- On-demand deployments are billed by GPU-second.
- Use reserved capacity for reliable capacity and higher GPU quotas.
- Ensure the IAM user has read access to the S3 bucket containing the model.
- Direct routing enables enterprise users reduce latency to their deployments.
- Fine-tuning adapts general-purpose models to domain-specific tasks, significantly
  improving performance in real-world applications.
- Fireworks supports both Supervised Fine-Tuning (SFT) and Reinforcement Fine Tuning
  (RFT).
- LoRA significantly reduces the computational and memory cost of fine-tuning large
  models.
- Some base models cannot be tuned on Fireworks.
- VLM fine-tuning is currently supported for Qwen 2.5 VL models only.
- Fine-tuning jobs typically take longer than text-only models due to additional image
  processing.
- We currently only support one-turn conversations for each example, where the preferred
  and non-preferred messages need to be the last assistant message.
- Your dataset should be in JSONL format, similar to supervised fine-tuning datasets.
- Include assistant messages in your development dataset to quickly validate your
  reward function logic before running expensive RFT training.
- Only some base models support LoRA addons.
- Your data never leaves your GCS bucket except during fine-tuning
- Access is limited to isolated fine-tuning clusters
- Keep the metering key secure; you will set it as an environment variable when deploying.
- Insufficient quota will cause endpoint deployment failures. Request quota increases
  in advance if needed.
- Rate limits exist to ensure fair usage and reasonable performance for all users.
- Usage that spikes quickly may be throttled if a serverless deployment is in the
  process of scaling.
- Prompt caching is enabled by default for all Fireworks models and deployments.
- Dedicated deployments on the Enterprise plan allow additional configuration options
  to further optimize cache performance.
- Fireworks has Zero Data Retention by default.
- Users can explicitly opt-in to log prompt and generation data for certain advanced
  features.
- Only admin users can manage other users within the account.
- Fireworks currently only supports service provider (SP) initiated login.
- Make sure to provide the correct API key in the Authorization header.
- Max audio file size is 1 GB, there is no limit for audio duration.
- Common file formats such as mp3, flac, and wav are supported.
- Accepts 'image/jpeg' and 'image/png' formats for response.
- Authorization requires Bearer with Fireworks API Key.
- Models can only be queried by the account that owns them unless made public.
- Authorization token is required in the header.
- Authorization requires Bearer token.
- Authorization header is required in the format 'Bearer <token>'
- 'Authorization: Bearer authentication header of the form `Bearer <token>`'
- This API is async and will return the request_id instead of the image.
- Replace {model} with flux-kontext-pro or flux-kontext-max in the API to get the
  result.
- Stream short audio chunks (50-400ms) in binary frames of PCM 16-bit little-endian
  at 16kHz sample rate and single channel (mono).
- Pre-converting the file before sending it to the API can improve runtime performance.
- Requires a valid API key for authorization
- Use POST method to create batch requests
- Maximum page_size is 200, values above will be coerced to 200.
- Requires setup of connected app in API
- Requires setup of connected app in api
- Bearer authentication header of the form `Bearer <token>`, where `<token>` is your
  auth token.
- Authorization requires Bearer token
- The maximum page_size is 200, values above 200 will be coerced to 200.
- Authorization header of the form Bearer <token>, where <token> is your auth token.
- Ensure to replace {account_id} and {model_id} with actual values in the endpoint.
- Authorization header of the form Bearer <token> required.
- If true, enable resumable upload instead of PUT.
- Authorization header of the form 'Bearer <token>', where '<token>' is your auth
  token.
- Authorization required in the form of Bearer <token>
- Authorization header of the form 'Bearer <token>' is required.
- Authorization header of the form Bearer <token> is required.
- Authorization requires a Bearer token.
- Requires authorization token in the header.
- Requires Bearer authentication with token.
- Authorization token is required in the header
- Authorization header of the form `Bearer <token>` is required.
- 'Authorization header required in the format: Bearer <token>'
- This path can handle file sizes up to 150Mb.
- Authorization is required in the form 'Bearer <token>'
- Maximum page size is 200, values above 200 will be coerced to 200.
- Authorization header must be of the form 'Bearer <token>'
- Authorization is required in the form `Bearer <token>`.
- Bearer authentication header of the form 'Bearer <token>', where '<token>' is your
  auth token.
- Requires the Account Id as a path parameter and the key ID in the request body.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: The request will be dropped if the time taken to download
  images is longer than 1.5 seconds.'
- Batch Job will expire if it runs for 24 hours, and any completed rows will be billed
  for and written to the output dataset.
- 'NotImplementedError: Handle unsupported function calls.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '400: Bad Request: Invalid input or malformed request. Review the request parameters
  and ensure they match the expected format.'
- '401: Unauthorized: Invalid API key or insufficient permissions. Verify your API
  key and ensure it has the correct permissions.'
- '402: Payment Required: User’s account is not on a paid plan or has exceeded usage
  limits. Check your billing status and ensure your payment method is up to date.
  Upgrade your plan if necessary.'
- '403: Forbidden: Authentication issues. Verify you have the correct API key.'
- '404: Not Found: The API endpoint path doesn’t exist, the model doesn’t exist, the
  model is not deployed, or the model does exist and is deployed but you don’t have
  permission to access it. Verify the URL path in your request and ensure you are
  using the correct API endpoint. Check if the model exists and is available on the
  Fireworks platform. Ensure you have the necessary permissions for the requested
  resource.'
- '405: Method Not Allowed: Using an unsupported HTTP method (e.g., using GET instead
  of POST). Check the API documentation for the correct HTTP method to use for the
  request.'
- '408: Request Timeout: The request took too long to complete, possibly due to server
  overload or network issues. Retry the request after a brief wait. Consider increasing
  the timeout value if applicable.'
- '412: Precondition Failed: Account is suspended or there’s an issue with account
  status. This error also occurs when attempting to invoke a LoRA model that failed
  to load. Check your account status and billing information. For LoRA models, ensure
  the model was uploaded correctly and is compatible. Contact support if the issue
  persists.'
- '413: Payload Too Large: Input data exceeds the allowed size limit. Reduce the size
  of the input payload (e.g., by trimming large text or image data).'
- '429: Over Quota: The user has reached the API rate limit. Wait for the quota to
  reset or upgrade your plan for a higher rate limit.'
- '500: Internal Server Error: This indicates a server-side code bug and is unlikely
  to resolve on its own. Contact Fireworks support immediately, as this error typically
  requires intervention from the engineering team.'
- '502: Bad Gateway: The server received an invalid response from an upstream server.
  Wait and retry the request. If the error persists, it may indicate a server outage.'
- '503: Service Unavailable: The service is down for maintenance or experiencing issues.
  Retry the request after some time. Check for any maintenance announcements.'
- '504: Gateway Timeout: The server did not receive a response in time from an upstream
  server. Wait briefly and retry the request. Consider using a shorter input prompt
  if applicable.'
- '520: Unknown Error: An unexpected error occurred with no clear explanation. Retry
  the request. If the issue persists, contact support for further assistance.'
- '404: Model does not exist.'
- 'HTTP Error creating model: {e}'
- 'HTTP Error getting upload URLs: {e}'
- 'HTTP Error validating upload: {e}'
- Endpoint creation fails with quota or capacity messages
- Model fails to download during container startup
- 'HTTP code 429: requests that fall outside of guaranteed limits may be processed
  with lower-latency or dropped.'
- Conversation data is deleted after 30 days.
- '400 Bad Request: Check the input audio file or parameters.'
- '401 Unauthorized: Invalid API key.'
- '413 Payload Too Large: Audio file exceeds the size limit.'
- '401 Unauthorized: Check your API key or token'
- '400 Bad Request: Ensure all required parameters are included'
- '200: Successful request'
- '401 Unauthorized: Bearer token is required.'
- '401: Unauthorized'
- 200 - A successful response.
- '200 - application/json: A successful response.'
- '400: Bad Request'
- '404: Not Found'
- '500: Internal Server Error'
- '200: A successful response.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Bearer authentication
client:
  base_url: https://api.fireworks.ai
  auth:
    type: apikey
    location: header
    header_name: Authorization
  headers:
    Content-Type: application/json
source_metadata: null
