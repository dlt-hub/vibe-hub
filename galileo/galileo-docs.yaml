resources:
- name: experiment
  endpoint:
    path: /experiments
    method: POST
    data_selector: experiment
    params: {}
- name: prompt
  endpoint:
    path: /prompts
    method: GET
    data_selector: prompts
    params: {}
- name: dataset
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params: {}
- name: project
  endpoint:
    path: /concepts/projects
    method: GET
- name: log_stream
  endpoint:
    path: /sdk-api/logging/logging-basics
    method: GET
- name: experiment
  endpoint:
    path: /experiments
    method: POST
    data_selector: experiment
    params: {}
- name: dataset
  endpoint:
    path: /datasets
    method: POST
    data_selector: dataset
    params: {}
- name: prompt
  endpoint:
    path: /prompts
    method: POST
    data_selector: prompt
    params: {}
- name: logger
  endpoint:
    path: /sdk-api/logging/galileo-logger
    method: GET
    data_selector: records
- name: logger
  endpoint:
    path: /sdk-api/logging/galileo-logger
    method: GET
    data_selector: records
    params: {}
- name: galileo_logger
  endpoint:
    path: /logger
    method: POST
    data_selector: data
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params: {}
- name: create_dataset
  endpoint:
    path: /datasets/create
    method: POST
    data_selector: dataset
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params: {}
- name: create_dataset
  endpoint:
    path: /datasets/create
    method: POST
    data_selector: dataset
    params: {}
- name: get_dataset
  endpoint:
    path: /datasets/{id}
    method: GET
    data_selector: dataset
    params: {}
- name: add_rows
  endpoint:
    path: /datasets/{id}/rows
    method: POST
    data_selector: result
    params: {}
- name: extend_dataset
  endpoint:
    path: /datasets/extend
    method: POST
    data_selector: dataset
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params: {}
- name: create_dataset
  endpoint:
    path: /datasets
    method: POST
    data_selector: dataset
    params: {}
- name: get_dataset
  endpoint:
    path: /datasets/{id}
    method: GET
    data_selector: dataset
    params: {}
- name: add_rows
  endpoint:
    path: /datasets/{id}/rows
    method: POST
    data_selector: rows
    params: {}
- name: extend_dataset
  endpoint:
    path: /datasets/{id}/extend
    method: POST
    data_selector: extended_rows
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params:
      limit: '50'
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params: {}
- name: create_dataset
  endpoint:
    path: /datasets/create
    method: POST
    data_selector: dataset
    params: {}
- name: get_dataset
  endpoint:
    path: /datasets/{id}
    method: GET
    data_selector: dataset
    params: {}
- name: add_rows
  endpoint:
    path: /datasets/{id}/rows
    method: POST
    data_selector: updated_dataset
    params: {}
- name: delete_dataset
  endpoint:
    path: /datasets/{id}
    method: DELETE
    data_selector: deleted_dataset
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params: {}
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: prompts
    params: {}
- name: experiments
  endpoint:
    path: /experiments
    method: POST
    data_selector: results
    params: {}
- name: countries_dataset
  endpoint:
    path: /sdk-api/experiments/datasets
    method: GET
    data_selector: countries
    params: {}
- name: Rule
  endpoint:
    path: /sdk-api/protect/rules
    method: POST
    data_selector: ''
    params: {}
- name: stages
  endpoint:
    path: /stages
    method: GET
    data_selector: stages
- name: stages
  endpoint:
    path: /stages
    method: GET
    data_selector: stages
- name: create_stage
  endpoint:
    path: /create_stage
    method: POST
    data_selector: stage
- name: update_stage
  endpoint:
    path: /update_stage
    method: POST
    data_selector: stage
- name: pause_stage
  endpoint:
    path: /pause_stage
    method: POST
    data_selector: stage
- name: resume_stage
  endpoint:
    path: /resume_stage
    method: POST
    data_selector: stage
- name: stage
  endpoint:
    path: /stages
    method: GET
- name: central_stage
  endpoint:
    path: /sdk-api/protect/stages
    method: POST
    data_selector: stage
    params: {}
- name: local_stage
  endpoint:
    path: /sdk-api/protect/stages
    method: POST
    data_selector: stage
    params: {}
- name: pause_stage
  endpoint:
    path: /sdk-api/protect/stages/pause
    method: POST
    data_selector: pause
    params: {}
- name: resume_stage
  endpoint:
    path: /sdk-api/protect/stages/resume
    method: POST
    data_selector: resume
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: otel_traces
  endpoint:
    path: /api/galileo/otel/traces
    method: POST
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: samples
  endpoint:
    path: /samples
    method: POST
    data_selector: ''
    params: {}
- name: logs
  endpoint:
    path: /v1/projects/PROJECT_ID/logstreams/LOG_STREAM_ID/logs
    method: GET
    data_selector: ''
    params: {}
- name: samples
  endpoint:
    path: /samples
    method: POST
    data_selector: null
    params: {}
- name: logs
  endpoint:
    path: /v1/projects/{PROJECT_ID}/logstreams/{LOG_STREAM_ID}/logs
    method: GET
    data_selector: null
    params: {}
- name: healthcheck
  endpoint:
    path: /v1/healthcheck
    method: GET
    data_selector: api_version
    params: {}
- name: healthcheck
  endpoint:
    path: /v1/healthcheck
    method: GET
    data_selector: api_version
- name: get_token
  endpoint:
    path: /v1/token
    method: GET
- name: get_token
  endpoint:
    path: /v1/token
    method: GET
    data_selector: access_token
    params: {}
- name: login_email
  endpoint:
    path: /v1/login
    method: POST
    data_selector: access_token
- name: login_email
  endpoint:
    path: /v1/login
    method: POST
    data_selector: access_token
    params: {}
- name: login_api_key
  endpoint:
    path: /v1/login/api_key
    method: POST
    data_selector: access_token
    params: {}
- name: login_api_key
  endpoint:
    path: /v1/login/api_key
    method: POST
    data_selector: access_token
    params: {}
- name: login_social
  endpoint:
    path: /v1/login/social
    method: POST
    data_selector: access_token
- name: login_social
  endpoint:
    path: /v1/login/social
    method: POST
    data_selector: access_token
    params: {}
- name: list_evaluate_alerts
  endpoint:
    path: /v1/projects/{project_id}/runs/{run_id}/prompts/alerts
    method: GET
    data_selector: alerts
    params: {}
- name: evaluate_alerts
  endpoint:
    path: /v1/projects/{project_id}/runs/{run_id}/prompts/alerts
    method: GET
    data_selector: alerts
    params: {}
- name: evaluate_run
  endpoint:
    path: /v1/evaluate/runs
    method: POST
    data_selector: message
- name: evaluate_run
  endpoint:
    path: /v1/evaluate/runs
    method: POST
    data_selector: message
    params: {}
- name: evaluate_run_results
  endpoint:
    path: /v1/evaluate/run-workflows
    method: POST
    data_selector: workflows
    params:
      starting_token: 0
      limit: 100
- name: evaluate_run_results
  endpoint:
    path: /v1/evaluate/run-workflows
    method: POST
    data_selector: workflows
    params:
      starting_token: 0
      limit: 100
- name: cancel_jobs_for_project_run
  endpoint:
    path: /v1/projects/{project_id}/runs/{run_id}/cancel-jobs
    method: PUT
    data_selector: any
    params: {}
- name: cancel_jobs_for_project_run
  endpoint:
    path: /v1/projects/{project_id}/runs/{run_id}/cancel-jobs
    method: PUT
    data_selector: any
    params: {}
- name: log_workflows
  endpoint:
    path: /observe/workflows
    method: POST
    data_selector: workflows
- name: log_workflows
  endpoint:
    path: /v1/observe/workflows
    method: POST
    data_selector: workflows
- name: workflows
  endpoint:
    path: /v1/observe/projects/{project_id}/workflows
    method: POST
    data_selector: workflows
    params:
      starting_token: 0
      limit: 100
- name: workflows
  endpoint:
    path: /v1/observe/projects/{project_id}/workflows
    method: POST
    data_selector: workflows
    params:
      starting_token: 0
      limit: 100
- name: invoke_protect
  endpoint:
    path: /v1/protect/invoke
    method: POST
    data_selector: status
    params: {}
- name: protect_notification
  endpoint:
    path: /api-reference/protect-notification
    method: HOOK
    data_selector: payload
    params: {}
- name: invoke_protect
  endpoint:
    path: /v1/protect/invoke
    method: POST
    data_selector: status
    params:
      timeout: 300
- name: protect_notification
  endpoint:
    path: /api-reference/protect-notification
    method: POST
    data_selector: payload
- name: healthcheck
  endpoint:
    path: /api-reference/health/healthcheck
    method: GET
- name: get_token
  endpoint:
    path: /api-reference/auth/get-token
    method: GET
- name: login_email
  endpoint:
    path: /api-reference/auth/login-email
    method: POST
- name: login_api_key
  endpoint:
    path: /api-reference/auth/login-api-key
    method: POST
- name: login_social
  endpoint:
    path: /api-reference/auth/login-social
    method: POST
- name: refresh_token
  endpoint:
    path: /api-reference/auth/refresh-token
    method: POST
- name: list_evaluate_alerts
  endpoint:
    path: /api-reference/evaluate-alerts/list-evaluate-alerts
    method: GET
- name: create_evaluate_run
  endpoint:
    path: /api-reference/evaluate/create-workflows-run
    method: POST
- name: get_evaluate_run_results
  endpoint:
    path: /api-reference/evaluate/get-evaluate-run-results
    method: POST
- name: cancel_jobs_for_project_run
  endpoint:
    path: /api-reference/evaluate/cancel-jobs-for-project-run
    method: PUT
- name: log_workflows
  endpoint:
    path: /api-reference/observe/log-workflows
    method: POST
- name: get_workflows
  endpoint:
    path: /api-reference/observe/get-workflows
    method: POST
- name: invoke_protect
  endpoint:
    path: /api-reference/protect/invoke
    method: POST
- name: protect_notification
  endpoint:
    path: /api-reference/protect-notification
    method: HOOK
notes:
- You need a Galileo API key set as an environment variable called GALILEO_API_KEY.
- If you are using the free version of Galileo, there is no need to set the GALILEO_CONSOLE_URL
  environment variable.
- 'I need a Galileo API key: Head to app.galileo.ai and sign up. Then head to the
  API keys page to get a new API key.'
- Uses OAuth2 for authentication
- Create a prompt containing a system prompt and user prompt
- Experiment results are available at the specified project URL
- Log streams can be created up front in the Galileo console, or automatically in
  code.
- API keys are required for accessing the API.
- Ensure to set your project name in environment variables.
- To log to Galileo, you need to configure a connection to Galileo using an API key
  and optionally a URL for a custom deployment.
- The `GalileoLogger` class provides granular control over logging.
- Requires more code than using wrappers or decorators.
- A session is created automatically if not specified.
- The `GalileoLogger` class allows granular control over logging.
- If a session is not created, one is created automatically.
- Use higher-level abstractions when possible
- Flush traces when appropriate
- Include relevant metadata
- Structure spans logically
- Handle errors gracefully
- This approach requires more code than using wrappers or decorators but gives you
  the most control over the logging process.
- By default, Galileo uses the GALILEO_PROJECT and GALILEO_LOG_STREAM environment
  variables to determine which project and Log stream to log to.
- 'Use higher-level abstractions when possible: The @log decorator and wrappers are
  easier to use and less error-prone.'
- 'Flush traces when appropriate: Call flush() at the end of a request or user interaction
  to ensure data is sent to Galileo.'
- 'Include relevant metadata: Add tags and metadata to make it easier to filter and
  analyze your traces.'
- 'Structure spans logically: Create a span hierarchy that reflects the logical structure
  of your application.'
- 'Handle errors gracefully: Include status codes and error information in your spans
  to help with debugging.'
- By default, Galileo uses the `GALILEO_PROJECT` and `GALILEO_LOG_STREAM` environment
  variables to determine which project and Log stream to log to.
- Uses environment variables GALILEO_PROJECT and GALILEO_LOG_STREAM by default for
  logging.
- To log experiments to Galileo, you need to configure the SDK to connect to Galileo
  using an API key and optionally a URL for a custom deployment.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- If you are using the free version of Galileo, there is no need to set the `GALILEO_CONSOLE_URL`
  environment variable.
- Datasets can be stored and versioned in Galileo.
- Datasets can be created and managed directly through the Galileo Console or programmatically
  using the Galileo SDK.
- Each dataset has unique names and is available to all projects across your organization.
- Uses API key for authentication — requires setup in the Galileo Console.
- Uses API key for authentication.
- Uses API key for authentication — requires setup in the Galileo Console
- Uses API key for authentication
- Some models require that you enter your corresponding API key.
- Uses API keys for model selection and integration.
- Requires setup of connected app in Galileo
- Luna-2 is required for certain metrics
- With the exception of custom code-based metrics, all runtime protection metrics
  require a Galileo enterprise tier with Luna-2.
- Stages can be paused and resumed without re-deploying your application.
- Runtime protection is invoked by calling the SDK, passing a payload and the stage.
- You can set the stage either by name or Id, and optionally provide a version.
- If you don’t provide a version, the latest version of the stage is used.
- To calculate out-of-the-box metrics, or LLM-as-a-judge metrics, you will need to
  configure an integration with an LLM
- You can improve the metric calculation based on your requirements using continuous
  learning via human feedback (CLHF)
- Central stages are managed by central AI governance or IT teams.
- Some objects like Contact may return nulls in deeply nested fields
- Galileo AI provides a set of built-in, preset metrics designed to evaluate various
  aspects of LLM, agent, and retrieval-based workflows.
- You can also create custom metrics using LLM-as-a-judge, or code.
- LLM-as-a-judge metrics require additional API calls, which can impact system performance
  and costs.
- Using multiple LLM judges provides several key benefits.
- Connect Galileo to your language model by adding your API key on the integrations
  page.
- OpenTelemetry’s OTLP exporter expects headers as a single comma-separated string,
  not as a dictionary.
- Some features are only available to customers on paid Galileo plans.
- OpenTelemetry requires headers in a specific comma-separated format.
- Galileo supports every stage of generative AI development.
- Include an Authorization header with a valid bearer token in every request
- Galileo supports every stage of generative AI development
- You must include an Authorization header with a valid bearer token in every request.
- Re-generate your API token from the Galileo Console
- Ensure environment variables are properly configured
- We recommend using JWT token for high-volume requests because it is more secure
  and scalable than using an API key.
- If project does not exist, it will be created.
- Run name is optional and will be auto-generated if not provided.
- Default values for starting_token is 0 and limit is 100.
- If both project_id and project_name are provided, project_id will take precedence.
- The API key is required in the header for authentication.
- Default limit is 100.
- Starting token defaults to 0.
- Optional timeout for the guardrail execution in seconds. Defaults to 300 seconds.
- Payload to be processed.
- When a Protect execution completes with the status specified in the configuration,
  the webhook specified is triggered with the payload.
- Alternatively, you can also use username/password.
- Integrate Galileo’s Observe module into your Python applications
- Integrate Galileo’s Evaluate module into your Python applications
- Integrate Galileo’s Protect module into Python workflows with this guide, including
  code examples, setup instructions, and ruleset invocation details.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '400 Bad Request: Check the request format and required fields.'
- '401 Unauthorized: Ensure proper authentication credentials are provided.'
- '400 Bad Request: Check the request format and parameters.'
- '404 Not Found: Ensure the dataset exists.'
- '401 Unauthorized: Recheck API key validity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Verify your API key'
- '404 Not Found: Ensure the endpoint exists'
- '401 Unauthorized: Recheck API key or permissions'
- 'ExecutionStatus.failed: The metric calculations failed. Please contact Galileo
  support for help.'
- 'ExecutionStatus.error: An error occurred with invoking runtime protection. Check
  the response for more details on the error.'
- '404 Not Found: Stage does not exist'
- '4XX: Check for client-side errors'
- '5XX: Check for server-side errors'
- '400: bad request: Missing required field: ''model_id'''
- '401: unauthorized: Authentication credentials were not provided.'
- '403: forbidden: You do not have permission to access this resource.'
- '404: not found: Project ID ''xyz'' not found.'
- '405: method not allowed: POST method not supported for this endpoint.'
- '422: unprocessable entity: Field ''logits'' must be an array of floats matching
  number of classes.'
- '501: not implemented: This endpoint is not available.'
- '4XX: Client error, check request parameters.'
- '5XX: Server error, retry after some time.'
- '401 Unauthorized: Recheck API keys or environment variables'
- 'API requests timing out: Check internet connectivity or payload size'
- 'Rate limit issues: Request higher rate limits or use different API keys'
- '200: Successful Response'
- '422: Error Response'
- '200'
- '422'
- '422: Invalid API key'
- '422: Invalid request'
- '422: Validation error'
- '422: Validation error in request'
- '200: Successful response'
- '422: Unprocessable Entity'
- '422: Validation error with request body.'
- '422: Error processing request'
auth_info:
  mentioned_objects:
  - Authorization
  - Galileo-API-Key
client:
  base_url: https://api.acme.rungalileo.io
  headers:
    Accept: application/json
source_metadata: null
