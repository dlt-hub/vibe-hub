resources:
- name: routes
  endpoint:
    path: /server/%s/routes
    method: POST
    data_selector: routes
- name: nodes
  endpoint:
    path: /api/nodes
    method: GET
    data_selector: data
- name: policies
  endpoint:
    path: /api/policies
    method: GET
    data_selector: data
- name: organizations
  endpoint:
    path: /api/organizations
    method: GET
    data_selector: data
- name: datacenters
  endpoint:
    path: /api/datacenters
    method: GET
    data_selector: data
- name: zones
  endpoint:
    path: /api/zones
    method: GET
    data_selector: data
- name: nodes
  endpoint:
    path: /api/v1/nodes
    method: GET
    data_selector: data
- name: organizations
  endpoint:
    path: /api/v1/organizations
    method: GET
    data_selector: data
- name: datacenters
  endpoint:
    path: /api/v1/datacenters
    method: GET
    data_selector: data
- name: general_contact
  endpoint:
    path: /contact
    method: GET
    data_selector: records
    params: {}
- name: operations
  endpoint:
    path: /operations
    method: GET
    data_selector: records
    params: {}
- name: priority
  endpoint:
    path: /priority
    method: GET
    data_selector: records
    params: {}
- name: outage
  endpoint:
    path: /outage
    method: GET
    data_selector: records
    params: {}
- name: instance
  endpoint:
    path: /instances
    method: POST
- name: pritunl_repository
  endpoint:
    path: /stable/yum/almalinux/9/
    method: GET
- name: pritunl_repository
  endpoint:
    path: /stable/yum/almalinux/8/
    method: GET
- name: pritunl_repository
  endpoint:
    path: /stable/yum/amazonlinux/2023/
    method: GET
- name: pritunl_repository
  endpoint:
    path: /stable/yum/amazonlinux/2/
    method: GET
- name: pritunl_repository
  endpoint:
    path: /stable/apt/bookworm/main
    method: GET
- name: pritunl_repository
  endpoint:
    path: /stable/yum/almalinux/9/
    method: GET
    data_selector: repository
    params: {}
- name: pritunl_repository
  endpoint:
    path: /stable/yum/almalinux/8/
    method: GET
    data_selector: repository
    params: {}
- name: pritunl_repository
  endpoint:
    path: /stable/yum/amazonlinux/2023/
    method: GET
    data_selector: repository
    params: {}
- name: pritunl_repository
  endpoint:
    path: /stable/yum/amazonlinux/2/
    method: GET
    data_selector: repository
    params: {}
- name: pritunl_repository
  endpoint:
    path: /stable/yum/debian/12/
    method: GET
    data_selector: repository
    params: {}
- name: pritunl_repository
  endpoint:
    path: /stable/yum/fedora/42/
    method: GET
    data_selector: repository
    params: {}
- name: pritunl_repository
  endpoint:
    path: /unstable/yum/almalinux/9/
    method: GET
    data_selector: repository
    params: {}
- name: pritunl_repository
  endpoint:
    path: /unstable/yum/almalinux/8/
    method: GET
    data_selector: repository
    params: {}
- name: pritunl_repository
  endpoint:
    path: /unstable/yum/amazonlinux/2023/
    method: GET
    data_selector: repository
    params: {}
- name: pritunl_repository
  endpoint:
    path: /unstable/yum/amazonlinux/2/
    method: GET
    data_selector: repository
    params: {}
- name: mongodb-org
  endpoint:
    path: /yum/amazon/2023/mongodb-org/8.0/x86_64/
    method: GET
    data_selector: records
    params: {}
- name: pritunl
  endpoint:
    path: /stable/yum/amazonlinux/2023/
    method: GET
    data_selector: records
    params: {}
- name: organization
  endpoint:
    path: /organizations
    method: POST
    data_selector: organization
    params: {}
- name: user
  endpoint:
    path: /users
    method: POST
    data_selector: user
    params: {}
- name: server
  endpoint:
    path: /servers
    method: POST
    data_selector: server
    params: {}
- name: cluster
  endpoint:
    path: /api/atlas/v1.0/groups
    method: GET
    data_selector: clusters
    params: {}
- name: WireGuard Authentication
  endpoint:
    path: /api/wireguard/authentication
    method: POST
    data_selector: authentication
    params: {}
- name: WireGuard Configuration
  endpoint:
    path: /api/wireguard/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: admin_user
  endpoint:
    path: /admin
    method: POST
    data_selector: user
    params: {}
- name: pritunl_user
  endpoint:
    path: /pritunl
    method: POST
    data_selector: user
    params: {}
- name: monitoring
  endpoint:
    path: /settings
    method: SET
    data_selector: settings
    params: {}
- name: Requests
  endpoint:
    path: pritunl_requests
    method: GET
- name: Response Time
  endpoint:
    path: pritunl_requests
    method: GET
- name: User Connections
  endpoint:
    path: pritunl_user_connections
    method: GET
- name: User Disconnections
  endpoint:
    path: pritunl_user_disconnections
    method: GET
- name: Server Bandwidth
  endpoint:
    path: pritunl_server_bandwidth
    method: GET
- name: Running Servers
  endpoint:
    path: pritunl_cluster
    method: GET
- name: Connected Devices
  endpoint:
    path: pritunl_cluster
    method: GET
- name: CPU Usage
  endpoint:
    path: pritunl_system
    method: GET
- name: backup_configuration
  endpoint:
    path: /pritunl/get-mongodb
    method: GET
    data_selector: mongodb
    params: {}
- name: host_id
  endpoint:
    path: /pritunl/get-host-id
    method: GET
    data_selector: host_id
    params: {}
- name: load_balancer
  endpoint:
    path: /load-balancing
    method: GET
    data_selector: config
    params: {}
- name: repair_database
  endpoint:
    path: /repair-database
    method: POST
    data_selector: result
- name: ntp_configuration_rhel7
  endpoint:
    path: /install/ntp/rhel7
    method: POST
    data_selector: result
    params: {}
- name: ntp_configuration_rhel8
  endpoint:
    path: /install/ntp/rhel8
    method: POST
    data_selector: result
    params: {}
- name: administrator_and_user_audit
  endpoint:
    path: /api/audit/administrator_and_user
    method: GET
    data_selector: audit_logs
- name: journal_audit
  endpoint:
    path: /api/audit/journal
    method: GET
    data_selector: journal_logs
- name: admin_user
  endpoint:
    path: /admin
    method: POST
    data_selector: users
    params: {}
- name: pritunl_user
  endpoint:
    path: /pritunl
    method: POST
    data_selector: users
    params: {}
- name: pritunl_openvpn
  endpoint:
    path: /openvpn
    method: GET
    data_selector: records
    params: {}
- name: device_authentication
  endpoint:
    path: /api/device-authentication
    method: POST
- name: client_authentication
  endpoint:
    path: /dynamic-firewall/client/auth
    method: POST
    data_selector: response
- name: IAM Policy
  endpoint:
    path: /docs/aws
    method: GET
    data_selector: Statement
    params: {}
- name: Security Group
  endpoint:
    path: /docs/aws
    method: GET
    data_selector: UDP ports
    params: {}
- name: Startup Script
  endpoint:
    path: /docs/aws
    method: GET
    data_selector: pritunl-link commands
    params: {}
- name: IPv6 Configuration
  endpoint:
    path: /docs/aws
    method: GET
    data_selector: sysctl commands
    params: {}
- name: Link Status
  endpoint:
    path: /docs/aws
    method: GET
    data_selector: status commands
    params: {}
- name: pritunl-link
  endpoint:
    path: /pritunl-link
    method: POST
- name: pritunl_link
  endpoint:
    path: /pritunl-link
    method: POST
    data_selector: response
    params: {}
- name: static_host
  endpoint:
    path: /api/static_host
    method: GET
    data_selector: static_hosts
    params: {}
- name: VyOS Configuration
  endpoint:
    path: /docs/vyos
    method: GET
    data_selector: configuration
    params: {}
- name: pritunl-link
  endpoint:
    path: /pritunl-link
    method: POST
    data_selector: status
    params: {}
- name: EdgeRouter
  endpoint:
    path: /docs/ubiquiti-edgerouter-static
    method: GET
    data_selector: configuration
- name: NetworkManager OpenVPN
  endpoint:
    path: /connection/import
    method: POST
    data_selector: imported_profile
    params: {}
- name: routes
  endpoint:
    path: /server/%s/routes
    method: POST
    data_selector: routes
    params: {}
- name: emailing_user_profile
  endpoint:
    path: /emailing/user/profile
    method: POST
- name: port_forwarding
  endpoint:
    path: /docs/port-forwarding
    method: GET
    data_selector: examples
    params: {}
- name: Yubico YubiKey
  endpoint:
    path: /two-step-authentication/yubico-yubikey
    method: GET
    data_selector: details
- name: Duo Hardware Token
  endpoint:
    path: /two-step-authentication/duo-hardware-token
    method: GET
    data_selector: details
- name: Duo OneLogin and Okta Push
  endpoint:
    path: /two-step-authentication/duo-onelogin-okta-push
    method: GET
    data_selector: details
- name: Google Authenticator
  endpoint:
    path: /two-step-authentication/google-authenticator
    method: GET
    data_selector: details
- name: organization
  endpoint:
    path: /api/organizations
    method: GET
    data_selector: data
    params: {}
- name: routes
  endpoint:
    path: /routing
    method: GET
    data_selector: routes
    params: {}
- name: single_sign_on
  endpoint:
    path: /sso/google
    method: POST
- name: Pritunl App
  endpoint:
    path: /v1/callback/saml
    method: POST
    data_selector: application
- name: Pritunl
  endpoint:
    path: /api/pritunl
    method: POST
- name: pritunl-endpoint
  endpoint:
    path: /stable/pacman
    method: GET
- name: alert
  endpoint:
    path: /alerts
    method: POST
    data_selector: alert
    params:
      role: alert
      alert_type: Memory Usage Threshold
      usage_threshold: 90
- name: verify_phone_number
  endpoint:
    path: /verify_phone_number
    method: POST
    data_selector: verification_status
    params:
      phone_number: 206-202-9712
- name: health_check
  endpoint:
    path: /health-check
    method: GET
- name: verify_phone_number
  endpoint:
    path: /verify-phone
    method: POST
- name: bastion
  endpoint:
    path: /api/bastion
    method: POST
    data_selector: bastion_instances
- name: host_certificates
  endpoint:
    path: /docs/getting-started-host
    method: GET
    data_selector: host_certificates
    params: {}
- name: coder
  endpoint:
    path: /logout
    method: GET
- name: endpoint_monitoring
  endpoint:
    path: /endpoint/monitoring
    method: GET
    data_selector: metrics
    params: {}
- name: ssh_host_client
  endpoint:
    path: /config
    method: POST
    data_selector: response
    params: {}
- name: host_certificates
  endpoint:
    path: /docs/install-ssh-host-client
    method: GET
    data_selector: commands
- name: bastion_host
  endpoint:
    path: /docs/bastion-ssh-host
    method: GET
    data_selector: commands
- name: Route53 Instance Role
  endpoint:
    path: /api/route53/instance-role
    method: POST
    data_selector: role
    params:
      role_name: pritunl-zero-client
      permissions: AmazonRoute53FullAccess
- name: Route53 Access Key
  endpoint:
    path: /api/route53/access-key
    method: POST
    data_selector: access_key
    params:
      role_name: pritunl-zero-client
      permissions: AmazonRoute53FullAccess
- name: Pritunl App
  endpoint:
    path: /v1/callback/saml
    method: POST
    data_selector: roles
    params:
      incremental: username
- name: user
  endpoint:
    path: /users
    method: POST
    data_selector: user
    params: {}
- name: policy
  endpoint:
    path: /policies
    method: POST
    data_selector: policy
    params: {}
- name: file_limits
  endpoint:
    path: /etc/security/limits.conf
    method: POST
    data_selector: commands
    params:
      commands:
      - sudo sh -c 'echo "* hard nofile 100000" >> /etc/security/limits.conf'
      - sudo sh -c 'echo "* soft nofile 100000" >> /etc/security/limits.conf'
      - sudo sh -c 'echo "root hard nofile 100000" >> /etc/security/limits.conf'
      - sudo sh -c 'echo "root soft nofile 100000" >> /etc/security/limits.conf'
- name: request_timeouts
  endpoint:
    path: /pritunl-zero/router
    method: POST
    data_selector: timeouts
    params:
      commands:
      - sudo pritunl-zero set router read_timeout 3600
      - sudo pritunl-zero set router write_timeout 3600
- name: user_authentication
  endpoint:
    path: /pritunl-zero/user/authentication
    method: POST
    data_selector: authentication
    params: {}
- name: private_network_access
  endpoint:
    path: /accessing-a-private-network
    method: GET
    data_selector: network_routes
    params: {}
- name: aws_routing
  endpoint:
    path: /aws-routing
    method: GET
    data_selector: routing_info
    params: {}
- name: MongoDB Cluster
  endpoint:
    path: /docs/mongodb-atlas
    method: GET
    data_selector: cluster_info
    params: {}
- name: Pritunl Configuration
  endpoint:
    path: /docs/multi-host-servers
    method: GET
    data_selector: server_configuration
    params: {}
- name: replicated_servers
  endpoint:
    path: /replicated-servers
    method: GET
    data_selector: data
    params: {}
- name: aws_link
  endpoint:
    path: /api/aws/link
    method: POST
    data_selector: link
    params: {}
- name: google_link
  endpoint:
    path: /api/google/link
    method: POST
    data_selector: link
    params: {}
- name: oracle_link
  endpoint:
    path: /api/oracle/link
    method: POST
    data_selector: link
    params: {}
- name: pritunl-link
  endpoint:
    path: /services/data/vXX.X/sobjects/PritunlLink
    method: POST
    data_selector: records
    params: {}
- name: vpn-server
  endpoint:
    path: /services/data/vXX.X/sobjects/VpnServer
    method: POST
    data_selector: records
    params: {}
- name: pritunl-zero-node
  endpoint:
    path: /pritunl-zero-node
    method: GET
    data_selector: records
    params: {}
- name: pritunl-zero-gitlab
  endpoint:
    path: /pritunl-zero-gitlab
    method: GET
    data_selector: records
    params: {}
- name: pritunl-zero-instance
  endpoint:
    path: /pritunl-zero-instance
    method: GET
    data_selector: records
    params: {}
- name: pritunl-zero-lb-web
  endpoint:
    path: /pritunl-zero-lb-web
    method: GET
    data_selector: records
    params: {}
- name: pritunl-zero-cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: clusters
    params:
      region: us-west-2
      number_of_nodes: 3
      cluster_name: pritunl-zero
- name: pritunl-zero-user
  endpoint:
    path: /users
    method: POST
    data_selector: users
    params:
      username: pritunl-zero
      role: readWrite
      database: pritunl-zero
- name: pritunl-zero-peering
  endpoint:
    path: /peering
    method: POST
    data_selector: peering
    params:
      vpc_id: VPC_ID
      vpc_cidr: 172.20.0.0/16
      application_vpc_region: us-west-2
- name: gitlab
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: route_settings
  endpoint:
    path: /vpc/route-settings
    method: GET
- name: port_forwarding
  endpoint:
    path: /docs/port-forwarding
    method: GET
- name: network_link
  endpoint:
    path: /docs/network-links-1
    method: GET
    data_selector: network_links
- name: ssh_certificates
  endpoint:
    path: /docs/ssh-certificates
    method: GET
    data_selector: content
    params: {}
- name: Oracle Cloud Bare Metal Hourly Pricing
  endpoint:
    path: /oracle-cloud-bare-metal/pricing
    method: GET
    data_selector: pricing
    params: {}
- name: Oracle Cloud Network Pricing
  endpoint:
    path: /oracle-cloud-network/pricing
    method: GET
    data_selector: network_pricing
    params: {}
- name: vcn
  endpoint:
    path: /vcn
    method: POST
    data_selector: vcn
    params:
      cidr_block: 172.22.0.0/16
- name: internet_gateway
  endpoint:
    path: /internet_gateways
    method: POST
    data_selector: internet_gateway
    params:
      name: gateway
- name: subnet_primary
  endpoint:
    path: /subnets
    method: POST
    data_selector: subnet
    params:
      name: primary
      cidr_block: 172.22.1.0/24
      route_table: Default
      security_lists: base, remote, primary
- name: subnet_database
  endpoint:
    path: /subnets
    method: POST
    data_selector: subnet
    params:
      name: database
      cidr_block: 172.22.2.0/24
      route_table: Default
      security_lists: base, remote, database
- name: subnet_cloud
  endpoint:
    path: /subnets
    method: POST
    data_selector: subnet
    params:
      name: cloud
      cidr_block: 172.22.3.0/24
      route_table: Default
      security_lists: base, remote, cloud
- name: create_instance
  endpoint:
    path: /create-instance
    method: POST
    data_selector: instance
    params:
      name: test
      organization: org
      datacenter: us-west-1
      zone: us-west-1a
      node: current node
      vpc: vpc
      subnet: primary
      oracle_cloud_subnet: subnet added earlier
      image: Oracle Linux 8
      network_roles: instance
- name: Pritunl Cloud
  endpoint:
    path: /pritunl-cloud
    method: GET
    data_selector: instances
    params: {}
- name: network_configuration
  endpoint:
    path: /etc/netplan/50-cloud-init.yaml
    method: GET
    data_selector: vlans
    params: {}
- name: mongodb_configuration
  endpoint:
    path: /etc/mongod.conf
    method: GET
    data_selector: storage
    params: {}
- name: kube-rancher0
  endpoint:
    path: /kube-rancher0
    method: POST
    data_selector: instances
    params:
      role: kubernetes
- name: kube-node
  endpoint:
    path: /kube-node
    method: POST
    data_selector: instances
    params:
      count: 6
      role: kubernetes
      name: kube-node%d
- name: gpu_pci_passthrough
  endpoint:
    path: /gpu/passthrough
    method: POST
    data_selector: data
    params: {}
- name: oracle_linux_workstation
  endpoint:
    path: /oracle/linux/workstation
    method: POST
    data_selector: data
    params: {}
- name: Pritunl Cloud Source
  endpoint:
    path: /pritunl-cloud-source
    method: GET
    data_selector: source
    params: {}
- name: HugePages Configuration
  endpoint:
    path: /docs/hugepages
    method: GET
    data_selector: configuration
    params: {}
- name: ZRAM Swap Configuration
  endpoint:
    path: /docs/zram-swap
    method: GET
    data_selector: configuration
    params: {}
- name: pritunl-kvm-repo
  endpoint:
    path: /etc/yum.repos.d/pritunl-kvm.repo
    method: POST
    data_selector: name
- name: windows_11_instance
  endpoint:
    path: /docs/windows-11-instance
    method: GET
    data_selector: instance
    params: {}
- name: linux_nginx_configuration
  endpoint:
    path: /docs/linux-nginx-configuration
    method: GET
    data_selector: configuration
    params: {}
- name: freebsd_nginx_configuration
  endpoint:
    path: /docs/freebsd-nginx-configuration
    method: GET
    data_selector: configuration
    params: {}
- name: linux_nginx_benchmark
  endpoint:
    path: /docs/linux-nginx-benchmark
    method: GET
    data_selector: benchmark
    params: {}
- name: freebsd_nginx_benchmark
  endpoint:
    path: /docs/freebsd-nginx-benchmark
    method: GET
    data_selector: benchmark
    params: {}
- name: Ubiquiti EdgeRouter
  endpoint:
    path: /edit/ubiquiti-edgerouter
    method: GET
- name: web_console
  endpoint:
    path: /edit/custom-ssl-certificate
    method: GET
- name: dns_server
  endpoint:
    path: /edit/internal-dns
    method: GET
- name: YubiKey Authentication
  endpoint:
    path: /yubikey/authentication
    method: POST
- name: health_check
  endpoint:
    path: /endpoint-health-check
    method: GET
- name: verify_phone_number
  endpoint:
    path: /endpoint/phone
    method: GET
    data_selector: alerts
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- The server must have an iPXE environment with an active internet connection.
- The interactive install initiates the operating system install then in the pre-install
  script the system disk and network layout is sent back to the Pritunl Boot service.
- This allows an interactive selection of install disks and network configuration
  without needing to have information about the system hardware before starting the
  install.
- This is the recommended and most versatile mode for most installations.
- The preconfigured install contains the full configuration before initiating the
  install.
- This mode is useful for simple configurations that need to be fully automated.
- Using this mode will limit disk and network configurations.
- Check for rate limits in API usage.
- Ensure proper permissions are set for API access.
- Uses OAuth2 with refresh token — requires setup of connected app in pritunl
- Some objects may return nulls in deeply nested fields
- SSH certificates are a replacement for managing individual keys stored in ~/.ssh/authorized_keys.
- The SSH server does not need to have any information about the individual users
  or the public keys used by the users to authenticate users.
- This step is optional and requires a Duo account.
- The user must have at least one matching role to connect to the server.
- Due to rate limits on the Google Workspace API the server must be updated to Pritunl
  v1.32.4349.59 to correct the disconnections from Google API errors.
- CentOS 8 was discontinued on December 31st, 2021 the operating system will no longer
  be updated.
- The Pritunl repositories for CentOS 8 were also discontinued.
- Currently server linking is not supported with the dynamic firewall.
- A new API secret should be created as it appears the new API enforces earlier expiration
  of API secrets.
- Existing permissions must remain in place until all users have completed a new sign-in.
- Pritunl includes full SELinux policies
- It is recommended to only use RHEL distributions for Pritunl servers
- Default username is pritunl, run `sudo pritunl default-password` to get the default
  password.
- Server routes control what traffic will be tunneled over the vpn server.
- The dns server will automatically be set to Google's public dns server.
- The M0, M2 and M5 plans use shared RAM and have low connection limits, these plans
  should not be used for production systems.
- Authentication is done with three keys providing multiple layers of encryption and
  authorization.
- Clients will have the same static address from the Virtual Network on the Virtual
  WG Network.
- All administrator users should have a YubiKey configured.
- Configuring administrators with YubiKeys does not require users to also have YubiKeys.
- Always use an external firewall
- Never route 0.0.0.0/0
- Never email or transfer keys
- Use single sign-on with secondary authentication
- Avoid push authentication
- Sign up for the mailing list
- Block all public access to your networks
- Always use a password on the MongoDB server
- MongoDB by default will only allow the localhost to connect.
- SSL configuration is not necessary on private networks.
- Both the Pritunl server and client will need to encrypt/decrypt all network traffic
  sent over the VPN connection.
- If either the server or the client have a slow CPU the bandwidth will be significantly
  lower.
- The AES encryption cipher is used by default and a CPU with the AES-NI hardware
  acceleration will perform significantly better.
- A fast Intel CPU with AES-NI on both the client and server will be needed to achieve
  connection speeds exceeding 100mbps.
- If high bandwidth is needed for a large number of VPN clients concurrently a much
  more powerful CPU with AES-NI will be needed on the server.
- Using smaller key sizes such as AES 128bit with SHA-1 in the server settings will
  significantly improve bandwidth but will make the encrypted traffic more vulnerable.
- Pritunl stores log information in the MongoDB database.
- In the event that an error occurs when there is no connection to the database the
  logs will write to `/var/log/pritunl.log`.
- All data for Pritunl is stored in the MongoDB database.
- The setup key is a temporary key used during the initial setup of a database.
- For normal operation the server should be started using the service system available
  in the Linux distro.
- For high demand clusters, setup a dedicated Pritunl host for web console access.
- Max Clients option should be set as low as possible for large deployments.
- Setting the max clients will prevent clients from flooding one node.
- An Enterprise subscription is required for plugins.
- It is best to check if any incompatible database upgrades have occurred by looking
  at the change log in the releases.
- Pritunl will set the HSTS header to force the web browser to use HTTPS.
- When changing certificates it is possible to be locked out of the web console with
  the error message 'You cannot visit example.domain right now because the website
  uses HSTS'.
- Auditing can only be disabled by running `sudo pritunl unset app.auditing` on a
  Pritunl host.
- Audit log never expires and is never removed from the database.
- Older OpenVPN builds will have connection issues with newer client releases.
- If a single sign-on service becomes unavailable it is possible to skip the connection
  check and allow existing Pritunl users to connect.
- Existing users will maintain the single sign-on association even with single sign-on
  temporarily disabled.
- Due to the expiration of the Lets Encrypt root certificate all v1.29 versions of
  Pritunl containing the expired certificate will no longer produce a valid certificate.
- Having an invalid certificate will not disrupt VPN service.
- The primary issue will occur when a user attempts to import a new profile to the
  Pritunl Client.
- Both the Pritunl Client and Pritunl Server need to be updating to the latest releases
  containing the new root certificates to fix this issue.
- The issue can easily be avoided by clicking Download Profiles on the profile page
  then importing the tar file into the Pritunl Client by click Import Profile, this
  is the same profile data that would be imported with a URI.
- The issue can also be avoided by replacing the domain name in the URI with the IP
  address of the server.
- The client will ignore certificate validation for URI's containing an IP address.
- If Nginx is running on a RHEL distributions such as Oracle Linux 8 by default SELinux
  will prevent proxied web requests from reaching internal servers.
- Nginx can also be configured to automatically renew SSL certificates with LetsEncrypt.
- An external firewall or security group will still need to be configured when using
  the dynamic firewall.
- The Pritunl server does not provide site-to-site connectivity in a Pritunl Link
  configuration.
- All hosts must be defined in the link configuration.
- Host checking uses an additional network check between all hosts in a link.
- These checks are used to detect network partitions and discover the best link to
  activate in a high availability configuration.
- All link clients must be updated to v1.2 to support host checking.
- This feature is optional but if the port is not opened the link page will show the
  link hosts as offline.
- Connectivity issues are often caused by incorrectly configured firewalls.
- Create a IAM Instance Role with full VPC access.
- Open UDP ports 500 and 4500 to allow IPsec traffic.
- Optionally TCP port 9790 can also be opened for host to host checking.
- The first pritunl-link command needs to be run if the Pritunl server does not have
  a signed HTTPS certificate.
- The security group or security rules of other instances will need to be modified
  to allow traffic from the peered networks.
- The outbound security rules may also need to be modified to allow traffic to the
  peered networks.
- Google Cloud networking limitations will prevent non-local traffic from routing
  between two instances.
- This will prevent running more then one active Pritunl Link client on different
  instances or running a non-NAT Pritunl VPN server that routes to a Pritunl Link
  client.
- The Pritunl link client automatically manages the routing table and port forwarding
  on the Unifi UDM.
- For dual WAN configurations, specific commands are required to set the forwarding
  interface.
- Static hosts are not able to automatically pull changes to the link configuration
  from the Pritunl server.
- The link configuration must be fully completed and all non-static hosts must be
  deployed first.
- Once the direct link is active SSH access to the cloud server will no longer be
  available, the SSH traffic will be forwarded to the local server.
- Using a static host will have some limitations such as not being able to automatically
  update changes to the link configuration.
- Currently only administrator users can be used with Pritunl Link.
- Firewall must be configured to allow port forwarding for the Pritunl link client.
- For high bandwidth links it is recommended to run pritunl-link on a server using
  the Ubiquiti EdgeRouter guide.
- Multiple hostnames can be provided in the link URI.
- The link client will simultaneously send update requests to all the hosts and use
  the first response from an online host.
- This update provides additional reliability to keep links online even during significant
  outages.
- LetsEncrypt is a free service that allows getting a valid signed certificate automatically.
- This is done using port 80 on the Pritunl server to verify the domain ownership.
- The certificate will then automatically renew every 80 days.
- Before setting the LetsEncrypt domain the dns settings for the domain must point
  to the public ip address of the Pritunl server.
- If a firewall is used port 80 must be publicly open.
- For the certificate to be able to automatically renew the firewall and dns settings
  will need to be properly configured.
- After setting the LetsEncrypt domain the Pritunl server will generate a signed certificate
  and automatically restart the web server.
- The certificate will be configured on all the hosts in an Enterprise cluster.
- Using a custom SSL certificate allows access the web console without a self-signed
  certificate warning.
- The certificate can be changed in the advanced Settings.
- If the SSL certificate is improperly configured and the web console becomes inaccessible
  it can be reset using the cli command.
- Some countries will block VPN connections.
- If the Block Outside DNS option has been enabled in the server settings the DNS
  server must be included in the routes.
- If the configuration becomes corrupted and the client will not start it can be reset
  by removing the directories below.
- 'For macOS: ~/Library/Application Support/pritunl'
- 'For Windows: C:\Users\USERNAME\AppData\Roaming\pritunl'
- 'For Linux: ~/.config/pritunl'
- Profile sync isn't supported and some authentication modes may not work as well.
- Currently NetworkManager will always forward all internet traffic over the VPN which
  may break the internet connection if not configured properly.
- Use gpg to verify macOS and Windows signature
- The pritunl-client package is available on Linux for installing the Pritunl Client
  on servers without the GUI interface.
- All profiles will start on startup and a configuration sync will be done before
  connecting.
- Add the DNS server to the server routes. The default DNS server used is 8.8.8.8
  add the route 8.8.8.8/32 to the server routes for this configuration.
- Remove the DNS server from the settings. This will instruct the client to use their
  current DNS configuration. This could cause problems with some clients if that DNS
  configuration becomes unroutable due to the VPN routes.
- Enable VPN Client DNS Mapping in the advanced server settings. This will start a
  DNS server on the Pritunl server that will proxy all DNS requests and will always
  be available to the client.
- Some ISPs will use Web-Proxy Auto Discovery to interfere with DNS settings. This
  can cause issues for some VPN connections. If issues are occurring this feature
  should be disabled.
- Currently the installer kills all processes named Pritunl.exe to close the GUI application
  before updating it. This has the effect of also causing the installer to fork to
  a new process if the installer has the same Pritunl.exe name. When doing automated
  installs the installer filename should be renamed to avoid this issue.
- Administrators are credentials that can be used to login to the web console or optionally
  use the api.
- Pritunl allows users to download a zip archive containing an onc configuration file
  and p12 cert file.
- Because of the limitations and bugs with OpenVPN on Chrome OS it is best to create
  a separate server for Chromebook users.
- Single sign-on should also be used which will allow users to authenticate with the
  Pritunl server using their Google account and then download their keys.
- The onc configuration file can only include one hostname so it is best to use only
  one host with the server.
- If multiple hosts are used all the hosts must be online which can be done by setting
  the Replication Count.
- Instruct users to use the Chromebook tutorial when connecting.
- Pritunl allows creating a temporary link that a user can open that will provide
  access to their two-factor authentication code if in use and their vpn configuration
  files.
- Port forwarding can be enabled for a user at any time including while the user is
  connected.
- Changes to port forwarding will happen immediately and don't require the user to
  reconnect or the server to be restarted.
- YubiKeys act as a USB keyboard, sending a 44 character OTP code.
- Duo tokens require a per user monthly subscription from Duo.
- The OpenVPN mode will cache secondary authentication on all OpenVPN clients including
  the Pritunl Client.
- The Pritunl Client mode is a two day authentication cache that only supports the
  Pritunl Client.
- When some clients have connection issues it is possible to trigger the authentication
  limiter that limits connection attempts to 20 per 10 minutes.
- No Pritunl hosts or servers need to be restarted when running the clear auth limit
  command.
- An organization is a group of users and represents a certificate authority that
  creates user certificates.
- Searching for users can be done by entering part of a users name in the search field
  to find users containing the search term.
- It is also possible to use search operators for advanced searches.
- Several OpenVPN settings are stored in the client configuration file.
- Users using a Pritunl client will sync all configuration changes before connecting.
- Servers can be replicated to several hosts to balance load and provide redundancy.
- By default the local address will be automatically set for each host, it can also
  be manually set in the host settings.
- For client-to-client traffic to work all replicas must have layer 3 connectivity.
- Firewalls should also allow communication between the replicas including UDP port
  4789.
- If replicated servers cannot communicate on a local network Inter-Client Communication
  must be disabled in the server settings.
- If non-NAT routes are using the servers must be replicated with the VXLan and route
  advertisement enabled.
- The VXLan UDP port 4789 must also be opened between Pritunl hosts.
- Using replication on EC2 requires the source/dest check to be disabled for the network
  interfaces attached to the Pritunl servers.
- This will allow the servers to route traffic from the VPN network.
- In addition to this the security group for the Pritunl servers must allow traffic
  from the VPN network.
- By default Pritunl will add iptables rules to provide additional routing protection
  by restricting which networks a VPN client can access.
- The restrictions can be disabled by unselecting *Restrict Routing* in the advanced
  server settings.
- Many Pritunl configurations will require the instances to route traffic to different
  networks.
- By default this will be blocked by the source/dest check (AWS) or forwarding option
  (Google) and should be disabled (AWS) or enabled (Google) to avoid issues.
- Some internal DNS servers such as the VPC DNS server used to access private hosted
  Route53 zones can only be accessed by servers on the VPC.
- If NAT is not used VPN clients will not be able to access the VPC DNS server as
  it will not respond to queries from other networks.
- It is recommended to add 8.8.8.8 as the second DNS server in the settings such as
  10.150.0.2, 8.8.8.8.
- This will give clients a fallback server and some OpenVPN clients will not reset
  the DNS servers when reconnecting.
- Pritunl offers three primary IPv6 configurations.
- Network mapping allows remapping a route on the server to a different subnet of
  the same size.
- This configuration will require NAT and doesn't support non-NAT configurations.
- Oauth is used to authenticate users, re-authentication is also done on each connection.
- When a Google user is removed or disabled they will no longer be able to connect
  to a Pritunl server.
- Users will authenticate through Okta when downloading VPN profiles.
- Pritunl will require an API token to validate if a user exists and is enabled before
  allowing a VPN connection.
- When using OneLogin from the EU the command `sudo pritunl set app.sso_onelogin_region
  '"eu"'` must be run on one Pritunl host.
- Although JumpCloud includes a pre-configured Pritunl application, this configuration
  was done incorrectly by JumpCloud and should not be used. Instead create a custom
  SAML application as shown below.
- It is very important that the Supported account types option is configured correctly.
- Assignment required option is recommended for more secure and controlled access.
- When a Slack user is removed or disabled they will no longer be able to connect
  to a Pritunl server.
- Sign in with Slack must be enabled in the Slack permission settings.
- By default users will be added to the organization set in the Single Sign-On Organization
  in the settings.
- If a Slack team group name matches an organization in Pritunl the user will be added
  to that organization.
- YubiKey must be used in combination with another single sign-on provider.
- VPN re-connections will not require a YubiKey authentication, this can be changed
  with the Two-Step Authentication Cache settings.
- Once the Radius server is configured enter the IP address of the Windows Radius
  server with port 1812 and the shared secret from earlier in the Pritunl settings.
- The phone call and SMS alerting functionality requires a Pritunl Zero subscription.
  Other endpoint features do not require a subscription.
- Before clicking Save verify that these domains have the correct IP address configured.
- After saving the management domain must be used to access the admin web console.
- Once the endpoint is configured private keys will be generated on the endpoint that
  will be used to handle authentication and encryption of endpoint traffic.
- Each phone number must be verified before Pritunl will send SMS or phone calls to
  the number.
- Currently only US numbers are supported.
- Pritunl Zero subscription is required for the service
- Currently only US numbers are supported
- Pritunl Zero is a zero trust system that provides secure authenticated access to
  internal services from untrusted networks without the use of a VPN.
- Docker will need to be installed and started on the bastion instances.
- Currently only /8, /16, /24 and /32 subnets are supported.
- To deploy the bastion host, the username must be set to 'bastion'.
- The Pritunl Zero server must have access to TCP port 9748 on the instance to validate
  the certificate.
- This script will create an authenticated Visual Studio code web server with Pritunl
  Zero allowing for secure access to a vscode editor running in the browser.
- 'Persistent paths: /var/lib/mongo /var/lib/coder'
- Currently only monitoring of basic system metrics on Linux is available.
- The system is ready for production and can be deployed now.
- A new domain will need to be created for the user web console.
- The DNS for the domain should point to a Pritunl Zero node or load balancer with
  port 443 open.
- Client certificates allow the internal web server to verify a web connection is
  coming from a Pritunl Zero server.
- Connections that do not have a valid certificate will be blocked by the internal
  web server.
- This prevents unauthenticated connections even if the remote user has network access
  to the internal web server.
- The Pritunl Zero server manages the certificate authority for the client certificates
  and uses regularly renewed certificates that are valid for 30 seconds.
- Client certificates offer similar functionality to JWT tokens without requiring
  significant changes to the internal web server.
- Most web servers and web frameworks have support for client certificate authentication
  without the need for any plugins or modifications to the internal application.
- Client certificates will not effect web technologies such as WebSockets or long
  polling connections.
- A separate key should be used for Pritunl Zero.
- Running the command `pritunl-ssh` will renew the certificate if it has expired.
- The HTTP challenge port 9748 must be open for the Pritunl Zero server.
- The host client can automatically update Route 53 records to the public IP address
  of the host.
- A bastion host allows SSH connections to servers in a VPC or local network without
  opening the SSH port on the internal servers.
- The Route53 entry will be updated if the server's IP address changes.
- It is recommended to use instance roles when deploying in the same AWS account as
  the Route53 zone.
- Auth0 roles will only be set to the Pritunl Zero user on the first login
- Uses SAML for authentication with Okta
- Requires configuration of Okta app and API token for secondary authentication
- The user domain must be configured in the node settings.
- A valid LetsEncrypt certificate should also be configured in the Certificates tab.
- By default an HTTP connection that is sending or receiving data will timeout after
  five minutes.
- A connection that is idle and not sending or receiving data will timeout after one
  minute.
- Requires setup of Pritunl Zero for SSH authentication
- Secondary systems such as Duo can be included for additional security
- Some services will expect a specific domain when internal web requests are received.
- Remove the '0.0.0.0/0' route from the server to tunnel only traffic for the private
  network.
- Once NAT is disabled, a static route must be created on the router for the virtual
  network.
- Replication involves sharing a single virtual VPN network across multiple hosts.
- Ensure to configure security groups to allow UDP ports 500 and 4500.
- Use the correct URI for each cloud provider when installing pritunl-link.
- It is recommended to use the new linking system for site-to-site links
- Requires setup of connected app in MongoDB Atlas
- Uses SSH certificate for authentication with GitLab.
- The certificate will expire in 10 hours by default.
- Although the route will be advertised to this VPC network route advertisement should
  not be enabled for this route as the 10.100.0.0/16 network will already exists in
  the VPC routing table.
- Generally only the Virtual Network route will be advertised unless the Pritunl server
  is providing access to other networks such as in site-to-site configurations.
- NAT Route should be unchecked for the route settings.
- Route advertisement should not be enabled for existing VPC network.
- Cloud Route Advertisement will add a route for the Pritunl host to the VPC routing
  table.
- The EdgeRouter has no hardware offloading support for OpenVPN and performance with
  OpenVPN will be significantly lower then using hardware offloaded IPsec.
- The expected performance will likely be less then 10 megabits/sec for most configurations.
- It is recommend to use AES 128bit with SHA-1 in the Pritunl server settings for
  best performance.
- User certificates allow users to connect to SSH servers with a temporary certificate
  removing the need to configure authorized_keys on every SSH server.
- Host certificates prevent man-in-the-middle attacks.
- VM.Standard2 instance types support nested virtualization
- Different network configuration used for virtual Oracle Cloud instances
- Requires configuration of VCN and subnets for proper networking setup
- Security lists must be configured for traffic management
- Pritunl Cloud uses a networking design with high isolation which places each instance
  in a separate network namespace.
- On Fedora SELinux will need to be disabled.
- The cluster will take 10-15 minutes to deploy and some errors may be shown in the
  web console as the cluster is being deployed.
- Currently secure boot is not supported and must be disabled for GPU passthrough.
- The GPU must first be removed from the host and configured as a VFIO device.
- The graphical desktop instances tend to have a long shutdown time. When stopping
  these instances the command `sudo poweroff` should be used instead of stopping the
  instance from the Pritunl Cloud web console which may timeout.
- Static hugepages should be used on production systems.
- Enabling HugePages while instances are running may crash the system.
- All nodes must be able to reach other nodes on the VNC WebSocket port range `20001-24999/TCP`.
- For a higher performance connection a Spice or VNC client can connect directly to
  the node.
- If an instance fails to start run the command `sudo journalctl -u pritunl_cloud_<INSTANCE_ID>.service`
  replace `<INSTANCE_ID>` with the instance ID shown on the web console.
- The Windows 11 firewall will block the Pritunl Cloud DHCPv6 server by default.
- To expand the disk, the recovery partition may need to be removed.
- The Pritunl server has a rate limit attached to each administrator user, if more
  then 20 login attempts are made on a user that user is locked for a timeout.
- When this occurs the response message on the login changes from `Authentication
  credentials are not valid` to `Too many authentication attempts`.
- If an invalid administrator username is entered the response will always be `Authentication
  credentials are not valid`.
- There is no intention to not disclose if an administrator username is valid or not.
- High security environment configuration required
- Improving VPN bandwidth performance
- Client configuration for PINs and two-step authentication
- Too many authentication attempts may occur
- Server replication
- Single sign-on with Yubico YubiKey
- Verify phone number for endpoint phone alerts
- Requires setup of connected app in Pritunl
- Configure Pritunl Zero single sign-on with Okta
- Increase timeouts for long requests
errors:
- '200: Successful request'
- '401: Unauthorized request'
- '403 Forbidden: Check your API key and permissions.'
- '404 Not Found: Verify the endpoint path.'
- '500 Internal Server Error: Try again later.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'OSError: Could not find a suitable TLS CA certificate bundle, invalid path: /usr/lib/pritunl/lib/python3.6/site-packages/certifi/cacert.pem'
- 'AUTHENTICATION_ERRORS: Newer OpenVPN clients may send the password in an encoded
  format'
- 'SECURITY_RISK: Using unverified images could compromise the security of the installation'
- '401 Unauthorized: Check username and password.'
- 'Connection refused: Ensure MongoDB service is running.'
- Host appears as new in cluster if ID is changed.
- Connectivity issues are often caused by incorrectly configured firewalls.
- Client must have access to TCP port 9790 on all other hosts.
- Limited bandwidth configurations should use a dedicated server running behind the
  EdgeRouter.
- Package needs to be fragmented but DF set.
- '401 Unauthorized: Recheck API Token or Secret'
- ChromeOS v66 corrupts routing table when Chromebook is suspended requiring manually
  reconnecting
- Password must be entered even if user has no password. If no password is configured
  the user should be instructed to enter any password. It is recommend to use an authentication
  configuration that has a pin or OTP code to avoid user confusion.
- IPv6 routing currently does not work on ChromeOS. Clients will still be able to
  connect to the Pritunl server over IPv6 but no IPv6 traffic will route through the
  VPN.
- Allow multiple devices should be disabled
- Configuration sync not available
- 'pritunl set app.sso_cache false: Command to disable all authentication cache.'
- 'pritunl set app.sso_client_cache false: Command to disable client authentication
  cache.'
- 'pritunl set app.sso_cache_timeout 28800: Command to set cache timeout for two-step
  authentication.'
- 'pritunl set app.sso_client_cache_timeout 172800: Command to set client cache timeout.'
- 'Too many authentication attempts: Limit connection attempts to 20 per 10 minutes.'
- '401 Unauthorized: Check if the API token is valid or has sufficient permissions.'
- admin approval required
- Event viewer is useful for determining why Radius authentication requests failed.
- 'Error: Unable to connect to bastion host.'
- 'Error: Invalid subnet format.'
- '400 Bad Request: Check the request parameters and try again.'
- '403 Forbidden: Ensure you have the necessary permissions.'
- '401 Unauthorized: Recheck SSH certificate validity'
- '401 Unauthorized: Check API key and permissions'
- '400 Bad Request: Validate parameters in the request'
- '404 Not Found: Verify endpoint paths'
- 'REQUEST_FAILED: Check configuration and try again'
- 'DEVICE_NOT_FOUND: Ensure the device is connected and recognized'
- 'Too many authentication attempts: If more than 20 login attempts are made on a
  user that user is locked for a timeout.'
- 'Authentication credentials are not valid: Response when an invalid administrator
  username is entered.'
auth_info:
  mentioned_objects:
  - SAML attributes
  - Okta Verify
  - API Token
  - API Key
  - IAM User
  - Security List
client:
  base_url: https://pritunl.com
  auth:
    type: oauth2
source_metadata: null
