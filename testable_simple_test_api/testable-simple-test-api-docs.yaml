resources:
- name: start_test_run
  endpoint:
    path: /start
    method: POST
- name: setup_test
  endpoint:
    path: /setup
    method: POST
- name: manual_start
  endpoint:
    path: /executions/:id/manual-start
    method: PUT
- name: stop_test_run
  endpoint:
    path: /executions/:id/stop
    method: PUT
- name: extend_test_run
  endpoint:
    path: /executions/:id/live-extension
    method: POST
- name: test_run
  endpoint:
    path: /start
    method: POST
- name: setup
  endpoint:
    path: /setup
    method: POST
- name: manual_start
  endpoint:
    path: /executions/:id/start
    method: PUT
- name: stop_execution
  endpoint:
    path: /executions/:id/stop
    method: PUT
- name: extend_execution
  endpoint:
    path: /executions/:executionId/live-extension
    method: POST
- name: stocks
  endpoint:
    path: /stocks/IBM
    method: GET
- name: test_case
  endpoint:
    path: /create/test
    method: POST
    data_selector: test_case
    params: {}
- name: test_case
  endpoint:
    path: /test_case
    method: POST
    data_selector: results
- name: load_test
  endpoint:
    path: /create_test
    method: POST
    data_selector: results
    params:
      total_virtual_users: 5
      iterations: 20
- name: ibm
  endpoint:
    path: /stocks/IBM
    method: GET
- name: msft
  endpoint:
    path: /stocks/AAPL
    method: GET
- name: stocks
  endpoint:
    path: /stocks/IBM
    method: GET
- name: OpenFin Test
  endpoint:
    path: /test/testable
    method: POST
    data_selector: results
    params:
      total_virtual_users: 5
      test_length: Iterations
      iterations: 3
      pause_between_iterations: 10
- name: webdriver_io_configuration
  endpoint:
    path: /wdio.conf.js
    method: GET
    data_selector: capabilities
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: test_case
  endpoint:
    path: /create/test
    method: POST
- name: test_case
  endpoint:
    path: /create/test
    method: POST
    data_selector: results
    params:
      test_type: Load
      total_virtual_users: '3'
      test_length: '2'
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: test_case
  endpoint:
    path: /create_test
    method: POST
    data_selector: test_case
    params: {}
- name: test_results
  endpoint:
    path: /test_results
    method: GET
    data_selector: results
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: test_case
  endpoint:
    path: /create-test
    method: POST
    data_selector: results
    params:
      total_virtual_users: 3
      test_length: 2 minutes
- name: root
  endpoint:
    path: /
    method: GET
- name: favicon
  endpoint:
    path: /favicon.ico
    method: GET
- name: stocks
  endpoint:
    path: /stocks/IBM
    method: GET
- name: selenium_test
  endpoint:
    path: /api/v1/tests
    method: POST
    data_selector: results
    params:
      total_virtual_users: 3
      test_length: '2'
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: DefaultTest
  endpoint:
    path: /selenium-test
    method: POST
    data_selector: results
- name: test_case
  endpoint:
    path: /create_test_case
    method: POST
    data_selector: results
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: test_case
  endpoint:
    path: /create_test_case
    method: POST
    data_selector: test_case
    params: {}
- name: test_reports
  endpoint:
    path: /api/test_reports
    method: GET
    data_selector: reports
- name: test_report
  endpoint:
    path: /recent-test-runs
    method: GET
    data_selector: session
    params: {}
- name: puppeteer_test
  endpoint:
    path: /puppeteer/test
    method: CONNECT
    data_selector: session
    params:
      browserName: chrome
      browserVersion: latest
      puppeteerVersion: 18.6.0
      screenResolution: 1920x1080
      region: aws-us-east-1
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: csv_data
  endpoint:
    path: /stocks
    method: GET
    data_selector: data
- name: java_scenario
  endpoint:
    path: /java/scenario
    method: POST
    data_selector: scenario_data
- name: system_properties
  endpoint:
    path: /system/properties
    method: GET
    data_selector: properties
    params: {}
- name: uploaded_files
  endpoint:
    path: /uploaded/files
    method: GET
    data_selector: files
    params: {}
- name: parameters
  endpoint:
    path: /parameters
    method: GET
    data_selector: params
    params: {}
- name: testable-selenium-java
  endpoint:
    path: https://github.com/testable/testable-selenium-java
    method: GET
- name: testable_options
  endpoint:
    path: /testable/options
    method: POST
    data_selector: options
- name: scenario
  endpoint:
    path: /scenarios
    method: POST
    data_selector: results
- name: Test Case
  endpoint:
    path: /guides/new-testcase.html
    method: GET
- name: Test Scenario
  endpoint:
    path: /guides/new-scenario.html
    method: GET
- name: AWS - Testable Account
  endpoint:
    path: /services/data/vXX.X/sobjects/AWSTestableAccount
    method: GET
    data_selector: records
    params: {}
- name: Azure - Testable Account
  endpoint:
    path: /services/data/vXX.X/sobjects/AzureTestableAccount
    method: GET
    data_selector: records
    params: {}
- name: GCP - Testable Account
  endpoint:
    path: /services/data/vXX.X/sobjects/GCPTestableAccount
    method: GET
    data_selector: records
    params: {}
- name: AWS Account
  endpoint:
    path: /OrgManagement/TestRunnerSources/AWS
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: download_public_key
  endpoint:
    path: /test-cases/[testCaseId]/key
    method: GET
- name: testrunners
  endpoint:
    path: /api/test-runners
    method: POST
    data_selector: results
    params:
      AGENT_KEY: '[api-key]'
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: saml_authentication
  endpoint:
    path: /api/login/ext/callback/saml
    method: POST
    data_selector: response
    params: {}
- name: trigger_execution
  endpoint:
    path: /public/hgrgjtojmu
    method: POST
- name: start-test
  endpoint:
    path: /start
    method: POST
    data_selector: execution_id
    params:
      key: ${{ secrets.TESTABLE_KEY }}
      testcase_name: PR Automation
      scenario_name: E2E Webdriver.io
      conf_name: Functional Test
      selenium_bindings: wdio
      conf_file: wdio.conf.js
      files[0]: '@package.zip'
      test_type: Functional
      conf_testrunners[0].regions: aws-us-west-2
- name: check-test-status
  endpoint:
    path: /executions/${{ steps.start-test.outputs.execution_id }}
    method: GET
    data_selector: completed
    params:
      key: ${{ secrets.TESTABLE_KEY }}
- name: create-public-token
  endpoint:
    path: /executions/${{ steps.start-test.outputs.execution_id }}/share
    method: POST
    data_selector: name
    params:
      key: ${{ secrets.TESTABLE_KEY }}
- name: enable_teams
  endpoint:
    path: /OrgManagement/Integrations/MicrosoftTeams
    method: POST
- name: disable_teams
  endpoint:
    path: /OrgManagement/Integrations/MicrosoftTeams
    method: DELETE
- name: executions
  endpoint:
    path: /executions/{execution_id}
    method: GET
    data_selector: completed
    params: {}
- name: results
  endpoint:
    path: /executions/{execution_id}/results.csv
    method: GET
    data_selector: results
    params: {}
- name: start_test
  endpoint:
    path: /start
    method: POST
    data_selector: id
    params:
      key: $TESTABLE_KEY
- name: trigger
  endpoint:
    path: /public/$TESTABLE_TRIGGER
    method: POST
    data_selector: id
    params: {}
- name: test
  endpoint:
    path: /start
    method: POST
    data_selector: results
    params:
      key: $TESTABLE_KEY
- name: executions
  endpoint:
    path: /executions/:id
    method: GET
    data_selector: results
- name: execution_summary
  endpoint:
    path: /executions/:id/summary
    method: GET
    data_selector: summary
- name: execution_metrics
  endpoint:
    path: /executions/:id/metric
    method: GET
    data_selector: metric
- name: execution_results
  endpoint:
    path: /executions/:id/results
    method: GET
    data_selector: results
- name: execution_intervals
  endpoint:
    path: /executions/:id/intervals
    method: GET
    data_selector: intervals
- name: execution_logs
  endpoint:
    path: /executions/:id/logs
    method: GET
    data_selector: logs
- name: executions
  endpoint:
    path: /test-confs/:confId/executions
    method: GET
    data_selector: '[]'
    params:
      down: 'true'
      up: 'false'
      includeScript: 'true'
      includeSummary: 'true'
      limit: 15
- name: execution_details
  endpoint:
    path: /executions/:id
    method: GET
    data_selector: '{}'
    params:
      down: 'true'
      up: 'true'
      includeScript: 'true'
      includeSummary: 'true'
- name: execution_summary
  endpoint:
    path: /executions/:id/summary
    method: GET
    data_selector: summary
- name: execution_metric
  endpoint:
    path: /executions/:id/metric
    method: GET
    data_selector: metric
- name: download_execution_results
  endpoint:
    path: /executions/:execution/results
    method: GET
    data_selector: results
- name: download_assertion_results
  endpoint:
    path: /executions/:execution/suite-results
    method: GET
    data_selector: assertions
- name: download_assertion_summary
  endpoint:
    path: /executions/:execution/suite-summaries
    method: GET
    data_selector: summary
- name: download_commands
  endpoint:
    path: /executions/:execution/command-streams
    method: GET
    data_selector: commands
- name: download_command_summary
  endpoint:
    path: /executions/:execution/command-stream-summaries
    method: GET
    data_selector: command_summary
- name: download_traces
  endpoint:
    path: /executions/:execution/traces.zip
    method: GET
    data_selector: traces
- name: get_output_file_metadata
  endpoint:
    path: /executions/:execution/output-files
    method: GET
    data_selector: output_file_metadata
- name: download_zip_file_output_files
  endpoint:
    path: /executions/:execution/output-files.zip
    method: GET
    data_selector: zip_output_files
- name: download_file_by_name
  endpoint:
    path: /executions/:id/output-files/:fileName/download
    method: GET
    data_selector: file_download
- name: export_to_pdf
  endpoint:
    path: /executions/:execution/results.pdf
    method: GET
    data_selector: pdf_export
- name: download_assertions
  endpoint:
    path: /executions/:execution/suite-results
    method: GET
    data_selector: raw_assertions
- name: execution_intervals
  endpoint:
    path: /executions/:execution/intervals
    method: GET
    data_selector: ''
- name: execution_results_by_resource
  endpoint:
    path: /executions/:execution/resources
    method: GET
    data_selector: ''
- name: execution_results_for_resource
  endpoint:
    path: /executions/:execution/resources/:resourceId
    method: GET
    data_selector: ''
- name: execution_logs
  endpoint:
    path: /executions/:execution/logs
    method: GET
    data_selector: ''
- name: execution_traces
  endpoint:
    path: /executions/:execution/traces
    method: GET
    data_selector: ''
- name: execution_trace
  endpoint:
    path: /execution-traces/:id
    method: GET
    params:
      up: true
      down: true
      includeResult: true
- name: start_execution
  endpoint:
    path: /test-confs/:confId/executions
    method: POST
- name: manual_start
  endpoint:
    path: /executions/:id/start
    method: PUT
- name: stop_execution
  endpoint:
    path: /executions/:id/stop
    method: PUT
- name: delete_execution
  endpoint:
    path: /executions/:id
    method: DELETE
- name: extend_execution
  endpoint:
    path: /executions/:executionId/live-extension
    method: POST
- name: add_users_engines
  endpoint:
    path: /executions/:executionId/add-users
    method: POST
- name: send_event
  endpoint:
    path: /executions/:executionId/send-event
    method: POST
- name: share_results
  endpoint:
    path: /executions/:executionId/share
    method: POST
- name: tag_results
  endpoint:
    path: /executions/:id/tags
    method: POST
    data_selector: null
    params: {}
- name: search_results
  endpoint:
    path: /search
    method: POST
    data_selector: null
    params: {}
- name: evaluate_test_result
  endpoint:
    path: /executions/:id/evaluate-kpis
    method: POST
    data_selector: null
    params: {}
- name: test_cases
  endpoint:
    path: /test-cases
    method: GET
- name: test_case_details
  endpoint:
    path: /test-cases/:testCaseId
    method: GET
- name: test_case_summaries
  endpoint:
    path: /new-summary
    method: GET
- name: create_test_case
  endpoint:
    path: /test-cases
    method: POST
- name: check_test_case_exists
  endpoint:
    path: /test-cases/:testCaseId
    method: HEAD
- name: update_test_case
  endpoint:
    path: /test-cases/:testCaseId
    method: PUT
- name: delete_test_case
  endpoint:
    path: /test-cases/:testCaseId
    method: DELETE
- name: copy_test_case
  endpoint:
    path: /test-cases/:testCaseId/copy
    method: POST
- name: test_cases
  endpoint:
    path: /test-cases
    method: GET
    data_selector: records
    params:
      down: 'false'
- name: test_case_details
  endpoint:
    path: /test-cases/:testCaseId
    method: GET
    data_selector: records
    params:
      down: 'true'
      deep: 'true'
      up: 'true'
      includeRunning: 'true'
- name: test_case_summaries
  endpoint:
    path: /new-summary
    method: GET
    data_selector: testCases
    params:
      includeLatestExecution: 'true'
- name: create_test_case
  endpoint:
    path: /test-cases
    method: POST
    data_selector: records
- name: check_test_case_exists
  endpoint:
    path: /test-cases/:testCaseId
    method: HEAD
- name: update_test_case
  endpoint:
    path: /test-cases/:testCaseId
    method: PUT
    data_selector: response
    params: {}
- name: delete_test_case
  endpoint:
    path: /test-cases/:testCaseId
    method: DELETE
    data_selector: response
    params: {}
- name: copy_test_case
  endpoint:
    path: /test-cases/:testCaseId/copy
    method: POST
    data_selector: response
    params: {}
- name: test_configuration
  endpoint:
    path: /test-confs/:confId
    method: GET
- name: test_case_configuration
  endpoint:
    path: /test-cases/:testCaseId/confs
    method: GET
- name: test_configurations
  endpoint:
    path: /test-cases/:testCaseId/confs
    method: GET
    data_selector: '[]'
    params: {}
- name: test_configuration_details
  endpoint:
    path: /test-confs/:confId
    method: GET
    data_selector: '{}'
    params:
      down: 'false'
      up: 'true'
      offset: '0'
      limit: '-1'
- name: pause_resume_schedule
  endpoint:
    path: /test-schedules/:scheduleId
    method: PUT
    data_selector: '{}'
    params: {}
- name: check_configuration_exists
  endpoint:
    path: /test-confs/:confId
    method: HEAD
    data_selector: '{}'
    params: {}
- name: update_test_configuration
  endpoint:
    path: /test-confs/:confId
    method: PUT
    data_selector: '{}'
    params: {}
- name: delete_test_configuration
  endpoint:
    path: /test-confs/:confId
    method: DELETE
    data_selector: '{}'
    params: {}
- name: get_summary_history
  endpoint:
    path: /test-confs/:confId/summary-history
    method: GET
    data_selector: '[]'
    params:
      down: 'false'
      region: ''
      maxExecutionId: ''
      period: recent
      start: ''
      end: ''
      limit: '15'
- name: export_test_run_history
  endpoint:
    path: /test-confs/:confId/report.csv
    method: GET
    data_selector: '{}'
    params:
      period: recent
      start: ''
      end: ''
      limit: '15'
      offset: '0'
- name: share_latest_results
  endpoint:
    path: /test-confs/:confId/share
    method: POST
    data_selector: '{}'
    params: {}
- name: get_scheduled_test_configurations
  endpoint:
    path: /orgs/:orgId/scheduled
    method: GET
    data_selector: '[]'
    params:
      orgId: ''
- name: scripts
  endpoint:
    path: /scripts/:id
    method: GET
- name: test_cases
  endpoint:
    path: /test-cases/:testCaseId/scripts
    method: POST
- name: data_stores
  endpoint:
    path: /data-stores/:id
    method: GET
- name: scripts
  endpoint:
    path: /test-cases/:testCaseId/scripts
    method: GET
    data_selector: scripts
    params: {}
- name: script_details
  endpoint:
    path: /scripts/:id
    method: GET
    data_selector: script
    params: {}
- name: run_script
  endpoint:
    path: /scripts/:id/run
    method: POST
    data_selector: results
    params: {}
- name: data_stores
  endpoint:
    path: /scripts/:id/data-stores
    method: GET
    data_selector: files
    params: {}
- name: data_store_details
  endpoint:
    path: /data-stores/:id
    method: GET
    data_selector: dataStore
    params: {}
- name: gateways
  endpoint:
    path: /gateways/:id
    method: GET
- name: test_cases_gateways
  endpoint:
    path: /test-cases/:testCaseId/gateways
    method: GET
- name: recordings
  endpoint:
    path: /gateways/:gatewayId/recordings
    method: GET
- name: recording_details
  endpoint:
    path: /recording/:id
    method: GET
- name: recording_traffic
  endpoint:
    path: /recording/:id/traffic
    method: GET
- name: recording_connection_traffic
  endpoint:
    path: /recording/:id/traffic/:connectionId
    method: GET
- name: recording_load
  endpoint:
    path: /recording/:id/load
    method: GET
- name: create_gateway
  endpoint:
    path: /test-cases/:testCaseId/gateways
    method: POST
- name: update_gateway
  endpoint:
    path: /gateways/:id
    method: PUT
- name: delete_gateway
  endpoint:
    path: /gateways/:id
    method: DELETE
- name: check_gateway_exists
  endpoint:
    path: /gateways/:id
    method: HEAD
- name: check_recording_exists
  endpoint:
    path: /recording/:id
    method: HEAD
- name: update_recording
  endpoint:
    path: /recording/:id
    method: PUT
- name: stop_recording
  endpoint:
    path: /recording/:id/stop
    method: PUT
- name: delete_recording
  endpoint:
    path: /recording/:id
    method: DELETE
- name: gateways
  endpoint:
    path: /test-cases/:testCaseId/gateways
    method: GET
    data_selector: gateways
- name: gateway_details
  endpoint:
    path: /gateways/:id
    method: GET
    data_selector: gateway
- name: create_gateway
  endpoint:
    path: /test-cases/:testCaseId/gateways
    method: POST
    data_selector: gateway
- name: update_gateway
  endpoint:
    path: /gateways/:id
    method: PUT
    data_selector: gateway
- name: delete_gateway
  endpoint:
    path: /gateways/:id
    method: DELETE
    data_selector: gateway
- name: recordings
  endpoint:
    path: /gateways/:gatewayId/recordings
    method: GET
    data_selector: recordings
- name: recording_details
  endpoint:
    path: /recordings/:id
    method: GET
    data_selector: recording
- name: recorded_traffic
  endpoint:
    path: /recordings/:id/traffic
    method: GET
    data_selector: traffic
- name: traffic
  endpoint:
    path: /recordings/:id/traffic/:connectionId
    method: GET
    data_selector: traffic
    params:
      includeData: 'false'
- name: load_url
  endpoint:
    path: /recordings/:id/load
    method: GET
    data_selector: DONE
    params:
      action: http-get
      endRecording: 'false'
- name: start_recording
  endpoint:
    path: /gateways/:gatewayId/recordings
    method: POST
    data_selector: id
    params:
      name: New Recording
- name: check_recording
  endpoint:
    path: /recordings/:id
    method: HEAD
- name: update_recording
  endpoint:
    path: /recordings/:id
    method: PUT
    data_selector: name
    params:
      name: New Name 123
- name: stop_recording
  endpoint:
    path: /recordings/:id/stop
    method: PUT
- name: delete_recording
  endpoint:
    path: /recordings/:id
    method: DELETE
- name: agents
  endpoint:
    path: /agents
    method: POST
- name: providers
  endpoint:
    path: /providers
    method: GET
- name: orgs_providers
  endpoint:
    path: /orgs/:orgId/providers
    method: GET
- name: providers_all_agents
  endpoint:
    path: /providers/all/agents
    method: GET
- name: orgs_providers_all_agents
  endpoint:
    path: /orgs/:orgId/providers/all/agents
    method: GET
- name: providers_agents
  endpoint:
    path: /providers/:id/agents
    method: GET
- name: providers_region_agents
  endpoint:
    path: /providers/:id/regions/:regionId/agents
    method: GET
- name: regions_agents
  endpoint:
    path: /regions/:regionId/agents
    method: GET
- name: orgs_regions
  endpoint:
    path: /orgs/:org/regions/:regionIdOrName
    method: GET
- name: orgs_regions_create
  endpoint:
    path: /orgs/:orgId/regions
    method: POST
- name: agents_search
  endpoint:
    path: /agents
    method: GET
- name: agents_register
  endpoint:
    path: /agents/:agentId
    method: PUT
- name: providers_details
  endpoint:
    path: /providers/:id
    method: GET
- name: providers_create
  endpoint:
    path: /providers
    method: POST
- name: providers_update
  endpoint:
    path: /providers/:id
    method: PUT
- name: providers_delete
  endpoint:
    path: /providers/:id
    method: DELETE
- name: regions_deactivate
  endpoint:
    path: /regions/:id
    method: PUT
- name: aws_amis
  endpoint:
    path: /aws/amis
    method: GET
- name: agents
  endpoint:
    path: /agents
    method: POST
    data_selector: ''
    params: {}
- name: providers
  endpoint:
    path: /providers
    method: GET
    data_selector: ''
    params: {}
- name: all_providers_agents
  endpoint:
    path: /providers/all/agents
    method: GET
    data_selector: ''
    params: {}
- name: running_agents
  endpoint:
    path: /providers/:id/agents
    method: GET
    data_selector: ''
    params: {}
- name: region_info
  endpoint:
    path: /orgs/:org/regions/:regionIdOrName
    method: GET
    data_selector: ''
    params: {}
- name: create_update_region
  endpoint:
    path: /orgs/:orgId/regions
    method: POST
    data_selector: ''
    params: {}
- name: search_agents
  endpoint:
    path: /agents?q=[search]
    method: GET
    data_selector: ''
    params: {}
- name: get_provider_details
  endpoint:
    path: /providers/:id
    method: GET
    data_selector: ''
    params: {}
- name: aws_amis
  endpoint:
    path: /aws/amis
    method: GET
    data_selector: records
    params:
      regions: ''
- name: limits
  endpoint:
    path: /limits
    method: GET
- name: usage
  endpoint:
    path: /usage
    method: GET
- name: limits
  endpoint:
    path: /limits
    method: GET
    data_selector: records
    params: {}
- name: usage
  endpoint:
    path: /usage
    method: GET
    data_selector: records
    params: {}
- name: vcs_roots
  endpoint:
    path: /vcs-roots
    method: GET
- name: vcs_root_refs
  endpoint:
    path: /vcs-root/:vcsRootId/refs
    method: GET
- name: test_connection_unsaved_repository
  endpoint:
    path: /vcs-root/refs
    method: POST
- name: test_connection_edited_unsaved_parameters
  endpoint:
    path: /vcs-root/:vcsRootId/refs
    method: POST
- name: create_repository
  endpoint:
    path: /orgs/:orgId/vcs-roots
    method: POST
- name: check_repository_exists
  endpoint:
    path: /vcs-roots/:vcsRootId
    method: HEAD
- name: update_repository
  endpoint:
    path: /vcs-roots/:vcsRootId
    method: PUT
- name: delete_repository
  endpoint:
    path: /vcs-roots/:vcsRootId
    method: DELETE
- name: repositories
  endpoint:
    path: /test-cases
    method: GET
    data_selector: records
- name: repository_details
  endpoint:
    path: /vcs-roots/:vcsRootId
    method: GET
    data_selector: records
- name: test_connection
  endpoint:
    path: /vcs-roots/:vcsRootId/refs
    method: GET
    data_selector: records
- name: create_repository
  endpoint:
    path: /orgs/:orgId/vcs-roots
    method: POST
    data_selector: records
- name: update_repository
  endpoint:
    path: /vcs-roots/:vcsRootId
    method: PUT
    data_selector: records
- name: delete_repository
  endpoint:
    path: /vcs-roots/:vcsRootId
    method: DELETE
    data_selector: records
- name: organization
  endpoint:
    path: /orgs/:orgId
    method: GET
- name: organization_users
  endpoint:
    path: /orgs/:orgId/users
    method: GET
- name: update_user
  endpoint:
    path: /users/:user
    method: PUT
- name: user_organizations
  endpoint:
    path: /users/:user/orgs
    method: GET
- name: delete_user
  endpoint:
    path: /users/:user
    method: DELETE
- name: remove_user_access
  endpoint:
    path: /orgs/:org/users/:user
    method: DELETE
- name: grant_user_access
  endpoint:
    path: /orgs/:org/users/:user
    method: POST
- name: tags
  endpoint:
    path: /orgs/:orgId/tags
    method: GET
- name: tag_info
  endpoint:
    path: /orgs/:orgId/tag-info
    method: GET
- name: delete_tags
  endpoint:
    path: /orgs/:orgId/tags
    method: DELETE
- name: organization_details
  endpoint:
    path: /orgs/:orgId
    method: GET
    data_selector: data
    params:
      orgId: ID of the organization
      down: 'true'
- name: organization_users
  endpoint:
    path: /orgs/:orgId/users
    method: GET
    data_selector: ''
    params:
      orgId: ID of the organization
- name: user_details
  endpoint:
    path: /users/:user
    method: PUT
    data_selector: ''
    params:
      user: The name, email, or ID of the user
- name: user_organizations
  endpoint:
    path: /users/:users/orgs
    method: GET
    data_selector: ''
    params:
      user: The name, email, or ID of the user
- name: delete_user
  endpoint:
    path: /users/:user
    method: DELETE
    data_selector: ''
    params:
      user: The name, email, or ID of the user
- name: remove_user_access
  endpoint:
    path: /users/:user/orgs/:org
    method: DELETE
    data_selector: ''
    params:
      user: The name, email, or ID of the user
      org: The ID of the organization
- name: grant_user_access
  endpoint:
    path: /users/:user/orgs/:org
    method: POST
    data_selector: ''
    params:
      user: The name, email, or ID of the user
      org: The ID of the organization
- name: tags
  endpoint:
    path: /orgs/:orgId/tags
    method: GET
    data_selector: ''
    params:
      orgId: ID of the organization
- name: tag_info
  endpoint:
    path: /orgs/:orgId/tag-info
    method: GET
    data_selector: ''
    params:
      orgId: ID of the organization
      offset: '0'
      limit: '100'
      includeCounts: 'false'
- name: delete_tags
  endpoint:
    path: /orgs/:orgId/tags/:tagId
    method: DELETE
    data_selector: ''
    params:
      orgId: ID of the organization
      tagId: The id of the tag to delete
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- API requires API key for access
- Testable was designed from the ground up using the same API that is provided to
  customers.
- Minimum test duration is 15 minutes.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Each virtual user will replay the HAR file with the exact delays between requests
  that were captured in the HAR file.
- Uses OAuth2 with refresh token — requires setup of connected app in Testable
- Requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Some objects may return nulls in deeply nested fields
- Each user will load the URL specified.
- Testable will distribute the work out to the selected test runners.
- Requires setup of connected app in API
- Each virtual user will keep executing the script with a 1 second pause between iterations
  until at least 2 minutes has passed.
- For Testable the key snippet from the wdio.conf.js file includes openfinConfigUrl.
- Each user will execute the PhantomJS script.
- Use 5 concurrent clients for 1 minute.
- Testable will automatically use the latest supported Playwright version and corresponding
  browser version.
- Test results include videos, screenshots, test outcomes, commands, traces, performance
  metrics, and more.
- Each virtual user will run the Postman Collection.
- Test runners execute 5 concurrent virtual users replaying our Postman Collection
  for 2 minute with a 10 seconds pause between iterations.
- Each user will execute the scenario.
- Test runners execute 3 concurrent Protractor tests for 2 minutes.
- Testable automatically captures any screenshots into the results
- Each user will execute the scenario
- The default configuration uses Mocha as the testing framework and runs the test
  in Chrome.
- API key for your account found after logging in under Org Management => API Keys.
- API key can be passed in capabilities under testable:options or as a Basic authentication
  header.
- API key (Org Management => API Keys) required for authentication.
- Each session will produce a test report that includes all assertions, commands,
  screenshots, video, browser performance metrics, and network metrics.
- Supports all Cloud providers, in your account or ours, as well as self-hosted test
  runners.
- Live Test allows manual testing in specific versions of browsers
- Users can interact with the browser and take screenshots during the test
- Each Testable account has a limit on logging per test and overall storage used.
- The execution info object provides a mechanism for passing state between each concurrent
  user’s iterations of a script.
- The context object is accessible in your script via info.context and by default
  is an empty object.
- The iterator will wrap back around to the first row once it reaches the last row
  during test execution by default.
- Users cannot write metrics to the `Testable` namespace.
- If using a CSV file for user authentication, upload it to your scenario.
- Ensure there are at least as many rows in your CSV files as there are test runners
  configured.
- Testable limits test results to 600 unique resources after which overall and regional
  results are still calculated but no new resource groupings are created.
- Tests can be created using the Create Test button or by modifying existing test
  cases.
- No special changes are required to run a Serenity test on Testable.
- Capabilities can include testable:options for configuration.
- API key can be passed in capabilities or as a basic Authentication header.
- For this to work you need to make sure you are using the version of Puppeteer which
  supports the Chromium version which your OpenFin application runs on.
- The Testable Cloud remote Puppeteer grid can be accessed at wss://cdp.testable.io
- When Testable runs your simulation it will pass a few extra system properties to
  give you the context from which you are executing.
- Testable supports Locust tests in a globally distributed fashion.
- Testable supports several Python and Java versions for executing Locust tests.
- Uses Testable’s proxies to record all traffic while performing a set of actions
  in a browser, API, or mobile application.
- Limit Breached status occurs if the number of steps or size of the recording exceeds
  account limits.
- Testable uses a spot fleet request for provisioning spot instances.
- The IAM role is only required if you are using spot instances.
- Make sure to use custom data to automatically register the VMs as test runners in
  one of your self-hosted regions.
- 'Windows Only: Use ''testable'' as the administrator account so that auto-logon
  is enabled.'
- 'Minimum required role for the service account: Compute Instance Admin (v1)'
- Outbound network access is required for the test runner to connect to the API.
- Create an API Key to run the agent.
- You will need to provide your cacerts file and mount it in each JVM version Testable
  supports or you plan to use.
- Python also expects a PEM formatted file consisting of one or more trusted certificates
  that is then set as the REQUESTS_CA_BUNDLE environment variable.
- Login can be initiated from Testable or from your Identity Provider (IDP) if they
  support that flow.
- Once you start authenticating via an external provider your password will be removed
  from Testable.
- Note the access key id and secret access key once the user is created. Both of these
  values are required on the Testable side of this setup.
- Integration configuration can be found at Org Management -> Integration
- To disable, go to Testable under Org Management => Integrations => Teams => Disable
  button
- Access token must include scope Ingest metrics in order for Testable to post metrics
  to the Dynatrace account
- Enable by adding the CloudWatch integration after logging in to Testable and navigating
  to Org Management => Integrations.
- Only difference is the permission needed here is `cloudwatch:PutMetricData`.
- In order to post Testable notifications to a private channel, you’ll need to add
  the Testable app to that channel explicitly.
- If you are using our fully hosted Testable Enterprise offering then you’ll need
  to create a Testable app in your Slack workspace before you can enable notifications
  from your Testable Enterprise installation to your Slack workspace.
- If you use SAML login you will need to manually change the URL in the browser from
  https://a.testable.io to https://[team].testable.io.
- Instances are able to connect out to agents.testable.io on port 443.
- Set success rate > 95% and median response time < 300ms as KPIs
- Defaults for request parameters are provided in the documentation.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Invalid API key: Check your API key in Org Management'
- 'Connection timeout: Ensure the WebSocket endpoint is reachable'
- '401 Unauthorized: Check your API Key'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://testable.io
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
