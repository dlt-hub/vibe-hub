resources:
- name: early_template_list
  endpoint:
    path: /v1/template/early
    method: GET
    data_selector: results
- name: Slack
  endpoint:
    path: /api/slack
    method: POST
    data_selector: event
    params: {}
- name: MS Teams
  endpoint:
    path: /api/teams
    method: POST
    data_selector: event
    params: {}
- name: Email
  endpoint:
    path: /api/email
    method: POST
    data_selector: event
    params: {}
- name: Webhook
  endpoint:
    path: /api/webhook
    method: POST
    data_selector: event
    params: {}
- name: Jira
  endpoint:
    path: /api/jira
    method: POST
    data_selector: ticket
    params: {}
- name: GitHub
  endpoint:
    path: /api/github
    method: POST
    data_selector: ticket
    params: {}
- name: GitLab
  endpoint:
    path: /api/gitlab
    method: POST
    data_selector: ticket
    params: {}
- name: Linear
  endpoint:
    path: /api/linear
    method: POST
    data_selector: ticket
    params: {}
- name: Slack
  endpoint:
    path: /api/slack
    method: POST
- name: MS Teams
  endpoint:
    path: /api/msteams
    method: POST
- name: Email
  endpoint:
    path: /api/email
    method: POST
- name: Webhook
  endpoint:
    path: /api/webhook
    method: POST
- name: Jira
  endpoint:
    path: /api/jira
    method: POST
- name: GitHub
  endpoint:
    path: /api/github
    method: POST
- name: GitLab
  endpoint:
    path: /api/gitlab
    method: POST
- name: Linear
  endpoint:
    path: /api/linear
    method: POST
- name: AWS Integration
  endpoint:
    path: /api/aws
    method: POST
- name: GCP Integration
  endpoint:
    path: /api/gcp
    method: POST
- name: tunnelx
  endpoint:
    path: /scans
    method: POST
    data_selector: results
- name: nuclei
  endpoint:
    path: /upload
    method: POST
    data_selector: results
- name: public_template
  endpoint:
    path: /v1/template/public
    method: GET
    data_selector: results
- name: search_templates
  endpoint:
    path: /template/search
    method: GET
    data_selector: results
    params:
      scope: public_private
      offset: 0
- name: public_template
  endpoint:
    path: /v1/template/public
    method: GET
    data_selector: results
- name: get_early_template
  endpoint:
    path: /v1/template/early/{id}
    method: GET
    data_selector: string
- name: public_template
  endpoint:
    path: /v1/template/public/{template_id}
    method: GET
    data_selector: data
- name: template
  endpoint:
    path: /v1/template
    method: GET
    data_selector: results
- name: create_template
  endpoint:
    path: /v1/template
    method: POST
    data_selector: template
    params: {}
- name: update_template
  endpoint:
    path: /v1/template
    method: PATCH
    data_selector: template
    params: {}
- name: template
  endpoint:
    path: /v1/template/{template_id}
    method: GET
    data_selector: template
- name: delete_template
  endpoint:
    path: /v1/template/{template_id}
    method: DELETE
- name: generate_ai_template
  endpoint:
    path: /v1/template/ai
    method: POST
    data_selector: template_id
- name: shared_template
  endpoint:
    path: /v1/template/share
    method: GET
    data_selector: results
- name: share_template
  endpoint:
    path: /v1/template/share
    method: POST
    data_selector: result
    params: {}
- name: shared_template
  endpoint:
    path: /v1/template/share/{template_id}
    method: GET
    data_selector: result
    params: {}
- name: scan_list
  endpoint:
    path: /scans
    method: GET
    data_selector: data
    params: {}
- name: scan_list
  endpoint:
    path: /v1/scans
    method: GET
    data_selector: data
    params:
      limit: null
      offset: null
      search: null
      status: null
      sort_asc: null
      sort_desc: null
- name: create_scan
  endpoint:
    path: /v1/scans
    method: POST
    data_selector: null
    params: {}
- name: delete_scan_in_bulk
  endpoint:
    path: /v1/scans
    method: DELETE
    data_selector: message
    params: {}
- name: scan
  endpoint:
    path: /v1/scans/{scan_id}
    method: GET
    data_selector: scan_id
- name: delete_scan
  endpoint:
    path: /v1/scans/{scan_id}
    method: DELETE
    data_selector: message
- name: update_scan
  endpoint:
    path: /v1/scans/{scan_id}
    method: PATCH
    data_selector: message
- name: import_oss_scan
  endpoint:
    path: /v1/scans/import
    method: POST
    data_selector: id
    params: {}
- name: stop_scan
  endpoint:
    path: /v1/scans/{scan_id}/stop
    method: POST
- name: rescan_scan
  endpoint:
    path: /v1/scans/{scan_id}/rescan
    method: POST
    data_selector: null
    params: {}
- name: retest_vulnerability
  endpoint:
    path: /v1/scans/{vuln_id}/retest
    method: POST
    data_selector: results
    params: {}
- name: scan_schedules
  endpoint:
    path: /v1/scans/schedule
    method: GET
    data_selector: schedules
    params: {}
- name: set_scan_schedule
  endpoint:
    path: /v1/scans/schedule
    method: POST
    data_selector: message
    params: {}
- name: delete_scan_schedule
  endpoint:
    path: /v1/scans/schedule
    method: DELETE
    data_selector: message
    params:
      scan_id: string
- name: scan_ips
  endpoint:
    path: /v1/scans/scan_ips
    method: GET
    data_selector: ips
- name: update_imported_scan
  endpoint:
    path: /v1/scans/{scan_id}/import
    method: PATCH
    data_selector: message
    params: {}
- name: export_scan
  endpoint:
    path: /v1/scans/{scan_id}/export
    method: GET
    data_selector: string
    params: {}
- name: export_filtered_scan
  endpoint:
    path: /v1/scans/{scan_id}/export
    method: POST
    data_selector: <string>
    params: {}
- name: export_scan_vulnerability
  endpoint:
    path: /v1/scans/vuln/{vuln_id}/export
    method: GET
    data_selector: <string>
    params: {}
- name: delete_scan_vulnerability
  endpoint:
    path: /v1/scans/vulns
    method: DELETE
    data_selector: message
- name: update_vulnerability_status
  endpoint:
    path: /v1/scans/vulns
    method: PATCH
    data_selector: message
    params: {}
- name: update_vulnerability_labels
  endpoint:
    path: /v1/scans/vulns/labels
    method: PATCH
    data_selector: message
- name: scan_config
  endpoint:
    path: /v1/scans/{scan_id}/config
    method: GET
- name: update_scan_config
  endpoint:
    path: /v1/scans/{scan_id}/config
    method: PATCH
    data_selector: ok
    params: {}
- name: scans_history
  endpoint:
    path: /v1/scans/history
    method: GET
    data_selector: data
    params: {}
- name: scan_history
  endpoint:
    path: /v1/scans/{scanId}/history
    method: GET
    data_selector: data
    params: {}
- name: export_unique_assets
  endpoint:
    path: /v1/scans/{scan_id}/asset/export
    method: GET
    data_selector: string
    params: {}
- name: scan_vulnerability
  endpoint:
    path: /v1/scans/vuln/{vuln_id}
    method: GET
    data_selector: application/json
    params: {}
- name: scan_vulnerability
  endpoint:
    path: /v1/scans/vuln/{vuln_id}
    method: GET
    data_selector: scan
    params: {}
- name: vulnerability_changelogs
  endpoint:
    path: /v1/scans/vuln/{vuln_id}/changelogs
    method: GET
    data_selector: data
    params: {}
- name: vulnerability_changelogs
  endpoint:
    path: /v1/scans/vuln/changelogs
    method: GET
    data_selector: data
- name: retest_vulnerability
  endpoint:
    path: /v1/retest/{vuln_id}
    method: GET
    data_selector: results
    params: {}
- name: vulnerability
  endpoint:
    path: /v2/vulnerability/{id}
    method: GET
    data_selector: data
    params: {}
- name: vulnerability_filters
  endpoint:
    path: /v2/vulnerability/filters
    method: GET
    data_selector: filters
- name: domain_leaks
  endpoint:
    path: /v1/leaks/domain
    method: GET
    data_selector: data
    params: {}
- name: domain_leaks
  endpoint:
    path: /v1/leaks/domain
    method: GET
    data_selector: data
    params: {}
- name: email_leaks
  endpoint:
    path: /v1/leaks/email
    method: GET
    data_selector: data
- name: customer_leaks
  endpoint:
    path: /v1/leaks/domain/customers
    method: GET
    data_selector: data
    params: {}
- name: get_api_key
  endpoint:
    path: /v1/user/apikey
    method: GET
    data_selector: api_key
- name: Get API Key
  endpoint:
    path: /v1/user/apikey
    method: GET
    data_selector: api_key
- name: create_api_key
  endpoint:
    path: /v1/user/apikey
    method: POST
    data_selector: message
    params: {}
- name: delete_api_key
  endpoint:
    path: /v1/user/apikey
    method: DELETE
    data_selector: message
- name: rotate_api_key
  endpoint:
    path: /v1/user/apikey/rotate
    method: POST
    data_selector: api_key
- name: tunnels
  endpoint:
    path: /v1/user/tunnels
    method: GET
    data_selector: tunnels
- name: team_members
  endpoint:
    path: /v1/user/team/member
    method: GET
    data_selector: members
- name: add_team_member
  endpoint:
    path: /v1/user/team/member
    method: POST
    data_selector: message
- name: delete_team_member
  endpoint:
    path: /v1/user/team/member
    method: DELETE
    data_selector: message
- name: update_team_member
  endpoint:
    path: /v1/user/team/member
    method: PATCH
    data_selector: message
    params: {}
- name: team
  endpoint:
    path: /v1/user/team
    method: GET
    data_selector: workspaces
- name: create_workspace
  endpoint:
    path: /v1/user/team
    method: POST
    data_selector: message
    params: {}
- name: delete_team
  endpoint:
    path: /v1/user/team
    method: DELETE
    data_selector: null
    params:
      team_id: <string>
- name: update_team
  endpoint:
    path: /v1/user/team
    method: PATCH
    data_selector: name
    params: {}
- name: enumeration_list
  endpoint:
    path: /v1/asset/enumerate
    method: GET
    data_selector: data
    params: {}
- name: enumeration_list
  endpoint:
    path: /v1/asset/enumerate
    method: GET
    data_selector: data
    params: {}
- name: create_enumeration
  endpoint:
    path: /v1/asset/enumerate
    method: POST
    data_selector: id
- name: delete_assets
  endpoint:
    path: /v1/asset/enumerate
    method: DELETE
    data_selector: message
    params: {}
- name: get_enumeration
  endpoint:
    path: /v1/asset/enumerate/{enumerate_id}
    method: GET
    data_selector: data
    params: {}
- name: delete_enumeration
  endpoint:
    path: /v1/asset/enumerate/{enumerate_id}
    method: DELETE
    data_selector: message
    params: {}
- name: Update Enumeration
  endpoint:
    path: /v1/asset/enumerate/{enumerate_id}
    method: PATCH
    data_selector: message
- name: rescan_enumeration
  endpoint:
    path: /v1/asset/enumerate/{enumerate_id}/rescan
    method: POST
    data_selector: id
    params: {}
- name: export_enumeration
  endpoint:
    path: /v1/asset/enumerate/{enum_id}/export
    method: GET
    data_selector: string
    params: {}
- name: create_asset_group
  endpoint:
    path: /v1/asset/enumerate/group
    method: POST
    data_selector: id
- name: enumeration_schedules
  endpoint:
    path: /v1/enumeration/schedule
    method: GET
    data_selector: schedules
- name: set_enumeration_schedule
  endpoint:
    path: /v1/enumeration/schedule
    method: POST
    data_selector: message
    params: {}
- name: delete_enumeration_schedule
  endpoint:
    path: /v1/enumeration/schedule
    method: DELETE
    data_selector: message
    params:
      enumeration_id: string
- name: enumeration_config
  endpoint:
    path: /v1/asset/enumerate/{enumerate_id}/config
    method: GET
    data_selector: root_domains
- name: export_enumeration_of_user
  endpoint:
    path: /v1/asset/enumerate/export
    method: GET
    data_selector: string
- name: delete_asset_group
  endpoint:
    path: /v1/asset/enumerate/group/{group_id}
    method: DELETE
    data_selector: message
    params: {}
- name: update_asset_group
  endpoint:
    path: /v1/asset/enumerate/group/{group_id}
    method: PATCH
    data_selector: message
    params: {}
- name: export_unique_domains
  endpoint:
    path: /v1/asset/enumerate/{enumerate_id}/domains/export
    method: GET
    data_selector: string
    params: {}
- name: asset_changelogs
  endpoint:
    path: /v1/asset/{asset_id}/changelogs
    method: GET
    data_selector: data
- name: asset_enumeration_history
  endpoint:
    path: /v1/asset/enumerate/{enumerate_id}/history
    method: GET
    data_selector: data
    params: {}
- name: configs
  endpoint:
    path: /v1/scans/config
    method: GET
    data_selector: '[]'
- name: configs
  endpoint:
    path: /v1/scans/config
    method: GET
    data_selector: '[]'
- name: add_config
  endpoint:
    path: /v1/scans/config
    method: POST
    data_selector: message
    params: {}
- name: scan_config
  endpoint:
    path: /v1/scans/config/{config_id}
    method: GET
    data_selector: id
    params: {}
- name: delete_config
  endpoint:
    path: /v1/scans/config/{config_id}
    method: DELETE
    data_selector: message
    params: {}
- name: update_config
  endpoint:
    path: /v1/scans/config/{config_id}
    method: PATCH
    data_selector: id
    params:
      config_json: 'true'
- name: excluded_templates
  endpoint:
    path: /v1/scans/config/exclude
    method: GET
    data_selector: data
    params: {}
- name: excluded_templates_and_targets
  endpoint:
    path: /v1/scans/config/exclude
    method: POST
    data_selector: message
- name: delete_excluded_templates_or_targets
  endpoint:
    path: /v1/scans/config/exclude
    method: DELETE
    data_selector: message
    params:
      ids: integer[]
- name: custom_severity_mappings
  endpoint:
    path: /v1/scans/config/severity
    method: GET
    data_selector: custom_severity_mappings
- name: custom_severity_mapping
  endpoint:
    path: /v1/scans/config/severity
    method: POST
    data_selector: id
    params: {}
- name: delete_custom_severity_mapping
  endpoint:
    path: /v1/scans/config/severity
    method: DELETE
    data_selector: message
    params: {}
- name: modify_custom_severity_mapping
  endpoint:
    path: /v1/scans/config/{config_id}/severity
    method: PATCH
- name: export_filtered_scan_results
  endpoint:
    path: /v1/scans/results/export
    method: POST
- name: export_filtered_scan_results
  endpoint:
    path: /v1/scans/results/export
    method: POST
    data_selector: string
    params: {}
- name: export_scan_log
  endpoint:
    path: /v1/scans/{scan_id}/scan_log/export
    method: GET
    data_selector: url
    params: {}
- name: scan_log_stats
  endpoint:
    path: /v1/scans/vulns/history
    method: GET
    data_selector: key
    params:
      history_limit: '5'
- name: audit_log
  endpoint:
    path: /v1/team/audit_log
    method: GET
    data_selector: data
- name: vulnerability_search
  endpoint:
    path: /v2/vulnerability/search
    method: GET
    data_selector: results
    params:
      limit: number of items to return
      offset: number of items to skip
      sort_asc: sort results in ascending order
      sort_desc: sort results in descending order
      fields: list of fields to return
      term_facets: list of term facets
      range_facets: list of range facets
      q: query
      highlight: whether to highlight search results
      facet_size: number of facets to return
- name: rename_tunnel
  endpoint:
    path: /v1/user/tunnels
    method: PATCH
    data_selector: message
- name: update_enumeration_config
  endpoint:
    path: /v1/asset/enumerate/{enumerate_id}/config
    method: PATCH
- name: update_shared_template
  endpoint:
    path: /v1/template/share/{template_id}
    method: PATCH
- name: unshare_delete_template
  endpoint:
    path: /v1/template/share/{template_id}
    method: DELETE
notes:
- Continuous monitoring of assets for new vulnerabilities
- Alerting via Email, Slack, Microsoft Teams or custom webhooks
- Organization ID can be found via multiple methods including the Google Cloud Console,
  gcloud CLI, and Organization Policies Page.
- Kubernetes integration only works with clusters that are publicly accessible or
  have external endpoints.
- ProjectDiscovery supports scan notifications through various integrations.
- ProjectDiscovery supports scan notifications through Slack.
- ProjectDiscovery supports notifications through Microsoft Teams.
- ProjectDiscovery supports notifications via Email.
- ProjectDiscovery supports custom webhook notifications.
- ProjectDiscovery provides integration support for Jira to create new tickets when
  vulnerabilities are found.
- ProjectDiscovery provides integration support for GitHub to create new tickets when
  vulnerabilities are found.
- ProjectDiscovery provides integration support for GitLab to create new tickets when
  vulnerabilities are found.
- ProjectDiscovery integrates with Linear for automated issue tracking.
- ProjectDiscovery supports integrations with all popular cloud providers to automatically
  sync externally facing hosts for vulnerability scanning.
- Cloud-managed internal scanning with TunnelX is an Enterprise-exclusive feature.
- Free users can still perform internal scans using the local scanning method.
- 'Retrieve the Team ID from: https://cloud.projectdiscovery.io/settings/team'
errors:
- 400 Bad Request
- 403 Forbidden
- 500 Internal Server Error
- '400 Bad Request: Check your API Key or request format.'
- '403 Forbidden: Ensure your account has access to the requested feature.'
- '400 Bad Request: Check parameters and request format'
- '500 Internal Server Error: Try again later'
- '400: Bad Request'
- '401: Unauthorized'
- '500: Internal Server Error'
- 404 Not Found
- '401 Unauthorized: Recheck API key'
- '404: Not Found'
- '400'
- '401'
- '500'
- '499: Client Closed Request'
- 401 Unauthorized
- '403'
- '401 Unauthorized: Recheck API key or permissions'
- '403 Forbidden: Check team ID or access rights'
- '403 Forbidden: Check if the resource is accessible with your account'
- '500 Internal Server Error: Retry the request or check service status'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Invalid API key'
- '400 Bad Request: Check the request format and parameters'
- '401 Unauthorized: Provide a valid API key'
- '499'
- 499 Client Closed Request
- '403: Forbidden'
- '404'
- '403 Forbidden: Check permissions'
- '500 Internal Server Error: Retry request'
- '400 Bad Request: Invalid input'
- '401 Unauthorized: Check API key'
- '400 Bad Request: Check request body format'
- '401 Unauthorized: Verify API key'
- '400 Bad Request: Invalid request format'
- '404 Not Found: Endpoint does not exist'
- '500 Internal Server Error: An error occurred on the server'
- '403 Forbidden: Check permissions for the requested resource'
- '400 Bad Request: Check query parameters'
- '403 Forbidden: Access denied'
- '500 Internal Server Error: Server encountered an error'
auth_info:
  mentioned_objects:
  - X-API-Key
  - X-Team-Id
client:
  base_url: https://api.projectdiscovery.io
  headers:
    X-API-Key: <api-key>
    X-Team-Id: <string>
  paginator:
    type: offset
    page_size_param: limit
source_metadata: null
