resources:
- name: eth_chainId
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: eth_call
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: eth_estimateGas
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: eth_gasPrice
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: eth_newFilter
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: eth_newBlockFilter
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: eth_uninstallFilter
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: eth_newPendingTransactionFilter
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: eth_getLogs
  endpoint:
    path: /zksync-protocol/api/ethereum-rpc#eth_getlogs
    method: POST
- name: eth_getFilterLogs
  endpoint:
    path: /zksync-protocol/api/ethereum-rpc#eth_getfilterlogs
    method: POST
- name: eth_getFilterChanges
  endpoint:
    path: /zksync-protocol/api/ethereum-rpc#eth_getfilterchanges
    method: POST
- name: eth_getBalance
  endpoint:
    path: /zksync-protocol/api/ethereum-rpc#eth_getbalance
    method: POST
- name: eth_getBlockByNumber
  endpoint:
    path: /zksync-protocol/api/ethereum-rpc#eth_getblockbynumber
    method: POST
- name: eth_getBlockByHash
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: eth_getBlockTransactionCountByNumber
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: eth_getBlockReceipts
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: eth_getBlockTransactionCountByHash
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: eth_getCode
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: eth_getStorageAt
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: eth_getTransactionCount
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: eth_getTransactionByHash
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: eth_getTransactionByBlockHashAndIndex
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: eth_getTransactionReceipt
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: eth_protocolVersion
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: eth_sendRawTransaction
  endpoint:
    path: /
    method: POST
- name: eth_accounts
  endpoint:
    path: /
    method: POST
- name: eth_feeHistory
  endpoint:
    path: /
    method: POST
- name: web3_clientVersion
  endpoint:
    path: /
    method: POST
- name: Abstract Mainnet
  endpoint:
    path: /chains/2741
    method: GET
- name: Cronos zkEVM Mainnet
  endpoint:
    path: /chains/388
    method: GET
- name: GRVT Mainnet
  endpoint:
    path: /chains/325
    method: GET
- name: Lens Chain
  endpoint:
    path: /chains/232
    method: GET
- name: Memento ZK Chain
  endpoint:
    path: /chains/51888
    method: GET
- name: OpenZK Mainnet
  endpoint:
    path: /chains/1345
    method: GET
- name: Sophon Mainnet
  endpoint:
    path: /chains/50104
    method: GET
- name: Zero Network
  endpoint:
    path: /chains/543210
    method: GET
- name: ZKcandy
  endpoint:
    path: /chains/320
    method: GET
- name: ZKsync Era Mainnet
  endpoint:
    path: /chains/324
    method: GET
- name: zkXPLA
  endpoint:
    path: /chains/375
    method: GET
- name: ZKsync Era Mainnet
  endpoint:
    path: /
    method: GET
    data_selector: network_details
    params: {}
- name: ZKsync Era Sepolia
  endpoint:
    path: /
    method: GET
    data_selector: network_details
    params: {}
- name: testnet_paymaster
  endpoint:
    path: /zksync-network/unique-features/paymaster#testnet-paymaster
    method: GET
    data_selector: key details
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: blocks
  endpoint:
    path: /blocks
    method: GET
- name: wallets
  endpoint:
    path: /wallets
    method: GET
- name: on_ramp
  endpoint:
    path: /on-ramp
    method: GET
- name: on_ramp
  endpoint:
    path: /on-ramp
    method: GET
    data_selector: query_params
    params:
      amount: amount
      fiat: fiat
      token: token
      redirect: redirect
- name: wallet
  endpoint:
    path: /zksync/wallet
    method: POST
    data_selector: wallets
    params: {}
- name: balance
  endpoint:
    path: /zksync/balance
    method: GET
    data_selector: balances
    params: {}
- name: deposit
  endpoint:
    path: /zksync/deposit
    method: POST
    data_selector: transactionHash
    params: {}
- name: transfer
  endpoint:
    path: /zksync/transfer
    method: POST
    data_selector: transactionHash
    params: {}
- name: withdraw
  endpoint:
    path: /zksync/withdraw
    method: POST
    data_selector: transactionHash
    params: {}
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: records
- name: Portal Bridge
  endpoint:
    path: /bridge.zksync.io/
    method: GET
- name: txSync Bridge
  endpoint:
    path: /app.txsync.io/bridge
    method: GET
- name: Layerswap
  endpoint:
    path: /layerswap.io/app
    method: GET
- name: DipDup
  endpoint:
    path: /dipdup
    method: GET
    data_selector: data
    params: {}
- name: Dune
  endpoint:
    path: /dune
    method: GET
    data_selector: data
    params: {}
- name: ZKsync Sepolia Testnet faucets
  endpoint:
    path: /zksync-network/ecosystem/network-faucets#zksync-sepolia-testnet-faucets
    method: GET
    data_selector: faucets
    params: {}
- name: Element
  endpoint:
    path: /zksync-network/ecosystem/nft-marketplaces#element
    method: GET
    data_selector: records
- name: Libera
  endpoint:
    path: /zksync-network/ecosystem/nft-marketplaces#libera
    method: GET
    data_selector: records
- name: OKX NFT
  endpoint:
    path: /zksync-network/ecosystem/nft-marketplaces#okx-nft
    method: GET
    data_selector: records
- name: Chainlink
  endpoint:
    path: /zksync-network/ecosystem/oracles#chainlink
    method: GET
- name: Chronicle
  endpoint:
    path: /zksync-network/ecosystem/oracles#chronicle
    method: GET
- name: public_rpc_mainnet
  endpoint:
    path: /
    method: GET
- name: public_rpc_testnet
  endpoint:
    path: /
    method: GET
- name: wallets
  endpoint:
    path: /zksync-network/ecosystem/wallets
    method: GET
    data_selector: wallets
    params: {}
- name: paymasters
  endpoint:
    path: /zksync-network/ecosystem/paymasters
    method: GET
    data_selector: paymasters
- name: Developer Preview Testnet
  endpoint:
    path: /zksync-network/zksync-os/developer-preview-testnet
    method: GET
    data_selector: data
- name: network_details
  endpoint:
    path: /
    method: GET
    data_selector: networkDetails
    params: {}
- name: Counter
  endpoint:
    path: /counter
    method: POST
    data_selector: data
    params: {}
- name: ZKsync Era
  endpoint:
    path: /zksync-era
    method: GET
    data_selector: repositories
    params: {}
- name: Smart Contracts
  endpoint:
    path: /era-contracts
    method: GET
    data_selector: repositories
    params: {}
- name: Circuit Implementation
  endpoint:
    path: /zksync-protocol
    method: GET
    data_selector: repositories
    params: {}
- name: Testing and debugging
  endpoint:
    path: /anvil-zksync
    method: GET
    data_selector: repositories
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: data
    params: {}
- name: high-level source code compilers
  endpoint:
    path: /zksync-protocol/compiler/toolchain#high-level-source-code-compilers
    method: GET
    data_selector: compilers
    params: {}
- name: IR compilers
  endpoint:
    path: /zksync-protocol/compiler/toolchain#ir-compilers
    method: GET
    data_selector: ir_compilers
    params: {}
- name: EVM Bytecode Interpreter
  endpoint:
    path: /zksync-protocol/compiler/toolchain#evm-bytecode-compatibility-with-the-interpreter
    method: GET
    data_selector: evm_interpreter
    params: {}
- name: block_explorer
  endpoint:
    path: /block-explorer
    method: GET
    data_selector: data
- name: ecosystem
  endpoint:
    path: /zk-stack/running/quickstart#setup-ecosystem
    method: GET
    data_selector: ecosystem
    params: {}
- name: chain
  endpoint:
    path: /zk-stack/running/quickstart#add-more-zksync-chains-optional
    method: GET
    data_selector: chain
    params: {}
- name: block_explorer
  endpoint:
    path: /zk-stack/components/block-explorer
    method: GET
    data_selector: transactions
- name: portal
  endpoint:
    path: /zk-stack/components/portal
    method: GET
    data_selector: balances
- name: contract_verifier
  endpoint:
    path: /zk-stack/components/contract-verifier
    method: GET
    data_selector: verification
- name: gateway_chain
  endpoint:
    path: /zkstack/chain/gateway
    method: POST
    data_selector: result
    params: {}
- name: custom_base_tokens
  endpoint:
    path: /zk-stack/customizations/custom-base-tokens
    method: GET
    data_selector: ''
- name: data_availability
  endpoint:
    path: /zk-stack/customizations/validium
    method: GET
    data_selector: records
    params: {}
- name: ecosystem_configurations
  endpoint:
    path: /zk-stack/customizations/configurations#ecosystem-configurations
    method: GET
- name: chain_configurations
  endpoint:
    path: /zk-stack/customizations/configurations#chain-configurations
    method: GET
- name: Proxy RPC
  endpoint:
    path: /proxy
    method: POST
- name: Explorer front-end
  endpoint:
    path: /explorer
    method: GET
- name: Sequencer
  endpoint:
    path: /sequencer
    method: GET
- name: Prover farm
  endpoint:
    path: /prover
    method: GET
- name: PostgreSQL
  endpoint:
    path: /postgresql
    method: GET
- name: testnet
  endpoint:
    path: /
    method: GET
- name: mainnet
  endpoint:
    path: /
    method: GET
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: blocks
  endpoint:
    path: /api/v1/blocks
    method: GET
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /zksync-protocol/rollup/transaction-lifecycle
    method: GET
    data_selector: transactions
    params: {}
- name: L2_blocks
  endpoint:
    path: /rollup/blocks
    method: GET
    data_selector: blocks
- name: L1_batches
  endpoint:
    path: /rollup/batches
    method: GET
    data_selector: batches
- name: deposits_and_withdrawals
  endpoint:
    path: /zksync-protocol/rollup/l1_l2_communication#deposits-and-withdrawals
    method: GET
    data_selector: records
- name: l2_to_l1_communication
  endpoint:
    path: /zksync-protocol/rollup/l1_l2_communication#l2l1-communication
    method: GET
    data_selector: records
- name: l1_to_l2_messaging
  endpoint:
    path: /zksync-protocol/rollup/l1_l2_communication#l1l2-messaging
    method: GET
    data_selector: records
- name: upgrade_transactions
  endpoint:
    path: /zksync-protocol/rollup/l1_l2_communication#upgrade-transactions
    method: GET
    data_selector: records
- name: default_bridge_addresses
  endpoint:
    path: /api/zks-rpc/zks_getBridgeContracts
    method: GET
- name: deposit
  endpoint:
    path: /api/zks-rpc/deposit
    method: POST
- name: withdraw
  endpoint:
    path: /api/zks-rpc/withdraw
    method: POST
- name: settlementLayer
  endpoint:
    path: /settlementLayer/{chainId}
    method: GET
    data_selector: aggregation_layer_chain_id
    params: {}
- name: debug_getRawTransaction
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: debug_getRawTransactions
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: debug_traceBlockByHash
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: debug_traceBlockByNumber
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: debug_traceCall
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: debug_traceTransaction
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: estimateGasL1ToL2
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: gasPerPubdata
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getBlockDetails
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getBridgeContracts
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getBridgehubContract
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getBytecodeByHash
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getFeeParams
  endpoint:
    path: /
    method: POST
    data_selector: result.V2
    params: {}
- name: getL1BatchBlockRange
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getL1BatchDetails
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getL1GasPrice
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getL2ToL1LogProof
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getProof
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getTransactionDetails
  endpoint:
    path: /zksync-protocol/api/zks-rpc#zks_getTransactionDetails
    method: POST
- name: L1BatchNumber
  endpoint:
    path: /zksync-protocol/api/zks-rpc#zks_L1BatchNumber
    method: POST
- name: sendRawTransactionWithDetailedOutput
  endpoint:
    path: /zksync-protocol/api/zks-rpc#unstable_sendRawTransactionWithDetailedOutput
    method: POST
- name: estimateFee
  endpoint:
    path: /zksync-protocol/api/zks-rpc#zks_estimateFee
    method: POST
- name: getConfirmedTokens
  endpoint:
    path: /zksync-protocol/api/zks-rpc#zks_getConfirmedTokens
    method: POST
- name: getAllAccountBalances
  endpoint:
    path: /zksync-protocol/api/zks-rpc#zks_getAllAccountBalances
    method: POST
- name: getBaseTokenL1Address
  endpoint:
    path: /zksync-protocol/api/zks-rpc#zks_getBaseTokenL1Address
    method: POST
- name: L1ChainId
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: getL2ToL1MsgProof
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: getMainContract
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: getProtocolVersion
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: getRawBlockTransactions
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: getTestnetPaymaster
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: eth_subscribe
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: eth_unsubscribe
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: bootloader
  endpoint:
    path: /zksync-protocol/zksyncos/bootloader
    method: GET
    data_selector: configuration
    params: {}
- name: block_header
  endpoint:
    path: /zksync-protocol/zksyncos/bootloader#block-header
    method: GET
    data_selector: block_header
    params: {}
- name: double_resource_accounting
  endpoint:
    path: /zksync-protocol/zksyncos/double-accounting
    method: GET
    data_selector: double_resource_accounting
    params: {}
- name: execution_environments
  endpoint:
    path: /zksync-protocol/zksyncos/execution-environment
    method: GET
    data_selector: execution_environments
    params: {}
- name: execution_environments
  endpoint:
    path: /zksyncos/execution-environment
    method: GET
    data_selector: resources
    params: {}
- name: L1 Messenger System Hook
  endpoint:
    path: /zksync-protocol/zksyncos/system-hooks#l1-messenger-system-hook
    method: GET
    data_selector: null
    params: {}
- name: L2 Base Token System Hook
  endpoint:
    path: /zksync-protocol/zksyncos/system-hooks#l2-base-token-system-hook
    method: GET
    data_selector: null
    params: {}
- name: Contract Deployer System Hook
  endpoint:
    path: /zksync-protocol/zksyncos/system-hooks#contract-deployer-system-hook
    method: GET
    data_selector: null
    params: {}
- name: diamond
  endpoint:
    path: /zksync-protocol/contracts/l1-contracts#diamond-also-mentioned-as-zksync-chain-contract
    method: GET
    data_selector: records
    params: {}
- name: diamondProxy
  endpoint:
    path: /zksync-protocol/contracts/l1-contracts#diamondproxy
    method: GET
    data_selector: records
    params: {}
- name: gettersFacet
  endpoint:
    path: /zksync-protocol/contracts/l1-contracts#gettersfacet
    method: GET
    data_selector: records
    params: {}
- name: adminFacet
  endpoint:
    path: /zksync-protocol/contracts/l1-contracts#adminfacet
    method: GET
    data_selector: records
    params: {}
- name: mailboxFacet
  endpoint:
    path: /zksync-protocol/contracts/l1-contracts#mailboxfacet
    method: GET
    data_selector: records
    params: {}
- name: executorFacet
  endpoint:
    path: /zksync-protocol/contracts/l1-contracts#executorfacet
    method: GET
    data_selector: records
    params: {}
- name: diamondInit
  endpoint:
    path: /zksync-protocol/contracts/l1-contracts#diamondinit
    method: GET
    data_selector: records
    params: {}
- name: bootloader
  endpoint:
    path: /zksync-protocol/contracts/bootloader
    method: GET
    data_selector: ''
- name: transactions_meta_descriptions
  endpoint:
    path: /zksync-protocol/contracts/bootloader#transactions-meta-descriptions
    method: GET
    data_selector: transactions
    params: {}
- name: reserved_slots_postOp
  endpoint:
    path: /zksync-protocol/contracts/bootloader#reserved-slots-for-the-calldata-for-the-paymasters-postop-operation
    method: GET
    data_selector: reserved_slots
    params: {}
- name: actual_transactions_descriptions
  endpoint:
    path: /zksync-protocol/contracts/bootloader#the-actual-transactions-descriptions
    method: GET
    data_selector: actual_transactions
    params: {}
- name: vm_hook_pointers
  endpoint:
    path: /zksync-protocol/contracts/bootloader#vm-hook-pointers
    method: GET
    data_selector: vm_hooks
    params: {}
- name: result_pointer
  endpoint:
    path: /zksync-protocol/contracts/bootloader#result-pointer
    method: GET
    data_selector: result_pointer
    params: {}
- name: SystemContext
  endpoint:
    path: /zksync-protocol/contracts/system-contracts#systemcontext
    method: GET
    data_selector: Address
    params: {}
- name: AccountCodeStorage
  endpoint:
    path: /zksync-protocol/contracts/system-contracts#accountcodestorage
    method: GET
    data_selector: Address
    params: {}
- name: BootloaderUtilities
  endpoint:
    path: /zksync-protocol/contracts/system-contracts#bootloaderutilities
    method: GET
    data_selector: Address
    params: {}
- name: DefaultAccount
  endpoint:
    path: /zksync-protocol/contracts/system-contracts#defaultaccount
    method: GET
    data_selector: Address
    params: {}
- name: Ecrecover
  endpoint:
    path: /zksync-protocol/contracts/system-contracts#ecrecover
    method: GET
    data_selector: Address
    params: {}
- name: Empty contracts
  endpoint:
    path: /zksync-protocol/contracts/system-contracts#empty-contracts
    method: GET
    data_selector: Address
    params: {}
- name: SHA256 & Keccak256
  endpoint:
    path: /zksync-protocol/contracts/system-contracts#sha256-keccak256
    method: GET
    data_selector: Address
    params: {}
- name: L2BaseToken & MsgValueSimulator
  endpoint:
    path: /zksync-protocol/contracts/system-contracts#l2basetoken-msgvaluesimulator
    method: GET
    data_selector: Address
    params: {}
- name: KnownCodeStorage
  endpoint:
    path: /zksync-protocol/contracts/system-contracts#knowncodestorage
    method: GET
    data_selector: Address
    params: {}
- name: ContractDeployer & ImmutableSimulator
  endpoint:
    path: /zksync-protocol/contracts/system-contracts#contractdeployer-immutablesimulator
    method: GET
    data_selector: Address
    params: {}
- name: L1Messenger
  endpoint:
    path: /zksync-protocol/contracts/system-contracts#l1messenger
    method: GET
    data_selector: address
    params: {}
- name: NonceHolder
  endpoint:
    path: /zksync-protocol/contracts/system-contracts#nonceholder
    method: GET
    data_selector: address
    params: {}
- name: EventWriter
  endpoint:
    path: /zksync-protocol/contracts/system-contracts#eventwriter
    method: GET
    data_selector: address
    params: {}
- name: Compressor
  endpoint:
    path: /zksync-protocol/contracts/system-contracts#compressor
    method: GET
    data_selector: address
    params: {}
- name: priority_operations
  endpoint:
    path: /zksync-protocol/contracts/handling-l1-l2-ops#priority-operations
    method: GET
    data_selector: transactions
    params: {}
- name: upgrade_transactions
  endpoint:
    path: /zksync-protocol/contracts/handling-l1-l2-ops#upgrade-transactions
    method: GET
    data_selector: transactions
    params: {}
- name: pubdata
  endpoint:
    path: /contracts/handling-pubdata
    method: GET
    data_selector: data
- name: L2 to L1 Logs
  endpoint:
    path: /zksync-protocol/handling-pubdata/l2-to-l1-logs
    method: GET
    data_selector: logs
- name: L2 to L1 Messages
  endpoint:
    path: /zksync-protocol/handling-pubdata/l2-to-l1-messages
    method: GET
    data_selector: messages
- name: Smart Contract Bytecodes
  endpoint:
    path: /zksync-protocol/handling-pubdata/smart-contract-bytecodes
    method: GET
    data_selector: bytecodes
- name: Storage Writes
  endpoint:
    path: /zksync-protocol/handling-pubdata/storage-writes
    method: GET
    data_selector: writes
- name: state_diffs
  endpoint:
    path: /contracts/handling-pubdata/state-diffs
    method: GET
    data_selector: stateDiffs
- name: pubdata_commitments
  endpoint:
    path: /pubdata/commitments
    method: POST
    data_selector: result
- name: EraVM
  endpoint:
    path: /zksync-protocol/vm
    method: GET
    data_selector: transactions
- name: MainVM
  endpoint:
    path: /zksync-protocol/circuits/circuits/main-vm
    method: GET
    data_selector: records
- name: SortDecommitments
  endpoint:
    path: /zksync-protocol/circuits/circuits/sorting/sort-decommitments
    method: GET
    data_selector: records
- name: CodeDecommitter
  endpoint:
    path: /zksync-protocol/circuits/circuits/code-decommitter
    method: GET
    data_selector: records
- name: DemuxLogQueue
  endpoint:
    path: /zksync-protocol/circuits/circuits/demux-log-queue
    method: GET
    data_selector: records
- name: KeccakRoundFunction
  endpoint:
    path: /zksync-protocol/circuits/circuits/keccak-round-function
    method: GET
    data_selector: records
- name: Sha256RoundFunction
  endpoint:
    path: /zksync-protocol/circuits/circuits/sha256-round-function
    method: GET
    data_selector: records
- name: ECRecover
  endpoint:
    path: /zksync-protocol/circuits/circuits/ecrecover
    method: GET
    data_selector: records
- name: RAMPermutation
  endpoint:
    path: /zksync-protocol/circuits/circuits/ram-permutation
    method: GET
    data_selector: records
- name: StorageSorter
  endpoint:
    path: /zksync-protocol/circuits/circuits/sorting/storage-sorter
    method: GET
    data_selector: records
- name: StorageApplication
  endpoint:
    path: /zksync-protocol/circuits/circuits/storage-application
    method: GET
    data_selector: records
- name: LogSorter
  endpoint:
    path: /zksync-protocol/circuits/circuits/sorting/log-sorter
    method: GET
    data_selector: records
- name: L1MessagesHasher
  endpoint:
    path: /zksync-protocol/circuits/circuits/l1-messages-hasher
    method: GET
    data_selector: records
- name: ContractDeployer
  endpoint:
    path: /zksync-protocol/contracts/system-contracts
    method: POST
    data_selector: contractDeployment
    params: {}
- name: EVM Bytecode Deployment
  endpoint:
    path: /zksync-protocol/evm-interpreter/deployment-execution
    method: GET
    data_selector: records
- name: EVM Contract Interactions
  endpoint:
    path: /zksync-protocol/evm-interpreter/era-evm-interactions
    method: GET
    data_selector: transactions
    params: {}
- name: pre_deployed_contracts
  endpoint:
    path: /zksync-protocol/evm-interpreter/pre-deployed-contracts
    method: GET
    data_selector: contracts
    params: {}
- name: paymaster
  endpoint:
    path: /zksync-protocol/account-abstraction/paymasters
    method: GET
    data_selector: paymaster_data
- name: transaction
  endpoint:
    path: /zksync-protocol/account-abstraction/building-smart-accounts/sending-transactions
    method: POST
    data_selector: transactions
    params: {}
notes:
- Uses ZKsync CLI to help you develop and interact with ZKsync from your local machine.
- Step-by-step guide to connect your wallet to ZKsync Era mainnet and testnet.
- Besides Account Abstraction, ZKsync Era natively supports paymasters.
- This setup allows developers to simulate ERC20-based fee payments in a testnet environment
  without needing a custom paymaster deployment.
- ZKsync SSO is under active development and not yet feature complete. Use caution
  and stay up to date with the latest updates and changes as they are released.
- Dockerized local setup simulates a Postgres database and a local Geth node functioning
  as Layer 1.
- anvil-zksync supports forking the state from various networks.
- ZKsync Era offers a robust set of official plugins tailored for Hardhat.
- The ZKsync CLI is a powerful tool designed to simplify the setup, development, testing,
  and deployment of contracts on ZKsync.
- Commands are invoked using `zksync-cli` in the terminal.
- Easy On-Ramp is a free, fully-hosted service that lets anyone purchase ETH or any
  ERC-20 on ZKsync Era with a credit card, Apple Pay, Google Pay, or bank transfer.
- ZKsync Era SDKs empower developers to seamlessly interact with the ZKsync Era network.
- ZKsync provides efficient, low-cost transactions while ensuring security and scalability.
- The zksync2-java library is a Java SDK designed to facilitate interactions with
  the ZKsync Era network.
- zksync2-swift SDK is designed for seamless integration with the ZKsync 2.0 network.
- Most of the existing SDKs should work out of the box
- Deploying smart contracts or using unique ZKsync features requires additional fields
- Uses OAuth2 with refresh token — requires setup of connected app in ZKsync
- Monitoring is a crucial aspect of the development and maintenance phases for any
  blockchain network.
- For an extended list of infrastructure options within the ZKsync ecosystem, feel
  free to explore the infrastructure category on Dappradar.
- Paymasters are specialized accounts designed to subsidize transaction fees for users,
  enhancing usability and flexibility within protocols.
- They also facilitate the payment of fees using ERC20 tokens, instead of the default
  ETH.
- The testnet allows builders to deploy contracts, profile system performance, and
  explore how the ZK Stack has evolved across execution, sequencing, and proving.
- Connect to ZKsync OS Developer Preview testnet
- You can bridge testnet ETH from Sepolia Testnet.
- Requires setup of TESTNET_PRIVATE_KEY in hardhat config.
- Uses OAuth2 with refresh token — requires setup of application in ZKsync
- Some endpoints may have rate limits
- Avoid using payable(addr).send(x)/payable(addr).transfer(x) because the 2300 gas
  stipend may not be enough for such calls.
- While .call offers more flexibility compared to .send or .transfer, developers should
  be aware that .call does not provide the same level of reentrancy protection.
- Use ZKsync Era's native account abstraction support for signature validation instead
  of ecrecover.
- The ZKsync OS Server can process over 10,000 transactions per second.
- Transaction costs drop to $0.0001 per transaction.
- For now, it is only possible to deploy a ZKsync chain as an L2, but soon it will
  also work as L3s.
- 'If you face an issue compiling rust code (example `<jemalloc>: Error allocating
  TSD`) try removing the `rust-toolchain` file from the repo.'
- Your server contains both HTTPS as well as WebSocket (WS) RPC services that are
  fully web3 compatible.
- Portal frontend starts on http://localhost:3030.
- Explorer frontend starts on http://localhost:3010.
- ZKsync Gateway is an optional settlement layer for ZKsync chains, including both
  rollups and validiums.
- Running a prover is not required for deploying a testnet. The requirements below
  are only necessary if you want to enable the prover.
- RaaS partners offer the infrastructure and tooling needed to deploy, operate, and
  customize your ZK Stack chain.
- Choosing a base token is a non-revertible action and token can not be changed.
- Validium chain is required to have the pubdata sending mode set to CUSTOM.
- 'DA dispatcher requires polling_interval_ms: 5000, max_rows_to_dispatch: 100, max_retries:
  5, use_dummy_inclusion_data: false.'
- Supports Okta and crypto-native Sign-in With Ethereum (SIWE) authentication.
- Users authenticate via Okta SSO or Sign-in With Ethereum (SIWE) in the User Dashboard.
- All external requests hit the Proxy RPC in the DMZ.
- Unauthorized requests are filtered before reaching internal systems.
- Sequencer and Prover run in a non-routable subnet.
- Make sure Docker is running on your machine.
- Uses a local reth node for your L1 and selected ETH as the base asset.
- Both corporate identity providers (e.g. Okta) and crypto-native login flows are
  supported.
- For unauthenticated access, you can use the selective disclosure feature.
- Users must sign in with their wallet to access the public-facing Prividium block
  explorer.
- ZKsync Gateway is not intended for general-purpose application deployment.
- Contract deployment on Gateway requires whitelisting and is restricted to authorized
  accounts.
- Withdrawals in ZKsync Chains are delayed for 3 hours.
- This setup allows us to achieve nearly 75% packing for values, and 50% gains overall
  in terms of the storage logs based on historical data.
- Chains using ZKsync Gateway reduce their operational costs by taking advantage of
  proof aggregation and avoiding the high and variable gas costs of submitting proofs
  directly to Ethereum.
- When migrating to ZKsync Gateway, chains must ensure that their data availability
  (DA) configurations are compatible with ZKsync Gateway.
- Rollups using ZKsync Gateway must relay pubdata to Ethereum through the L1Messenger
  system contract.
- Chains using custom data availability solutions must ensure their DA validation
  logic is compatible with ZKsync Gateway.
- Chains using ZKsync Gateway must pay aggregation fees in $ZK tokens.
- Migration to ZKsync Gateway as a shared proof aggregation layer is optional and
  can be reversed.
- ZKsync seamlessly integrates with the Ethereum ecosystem.
- To ensure a seamless experience, we impose rate limits on both HTTPS and WebSocket
  APIs.
- When encoding quantities, encode as hex, prefix with '0x'.
- When encoding unformatted data, encode as hex, prefix with '0x', two hex digits
  per byte.
- The bootloader is the entrypoint of the system.
- Configuration includes parameters like ONLY_SIMULATE, IS_PROVING_ENVIRONMENT, SPECIAL_ADDRESS_SPACE_BOUND,
  AA_ENABLED.
- This section explores the core Layer 1 smart contracts used by ZKsync Chains.
- ZKsync uses a separate nonce called 'deploymentNonce' to track the nonces for accounts.
- Nonces do not necessarily have to be monotonic to support various applications.
- Transactions on ZKsync can be initiated not only on L2, but also on L1.
- The Merkle tree will maintain a unified interface with the previous version of the
  protocol.
- The enumeration indexes are part of the state merkle tree, it is crucial that the
  initial writes are published in the correct order.
- Uses proto-danksharding for pubdata processing
- Supports 6 blobs per batch
- Uses specific encoding and decoding functions for pubdata processing.
- Uses multiple instances to handle execution of opcodes.
- ZKsync takes security seriously and as such, we have completed multiple audits in
  all critical parts of the protocol.
- ZKsync has a bug bounty program open to anyone interested in participating.
- Each L2 block committed to L1 will have a time lock before it is executed and finalized.
- The time lock across supported ZKsync chains has been reduced from 21 hours to a
  3 hour minimum.
- Changing the delay further requires a governance proposal approved by the community.
- The EVM Interpreter supports EVM Bytecode and extended support without the need
  to compile contracts with the ZKsync custom compilers.
- In EraVM, contract deployment is handled by the compiler front end and the system
  contract called ContractDeployer.
- Some EVM cryptographic precompiles (notably RSA / modExp) aren't currently available.
- Gas costs and behaviors of these precompiles when invoked via delegatecall may differ
  from those on Ethereum.
- Contract deployment requires EIP712 transactions with factory_deps field containing
  bytecode.
- EVM gas model is interpreted on top of EraVM.
- Higher transaction costs compared to native EraVM execution.
- Transactions with a null `to` address are supported. This allows EOAs to deploy
  EVM contracts.
- Failed deployment by a contract increases deployment nonce.
- EVM contracts can call EraVM contracts and vice versa.
- The current model does not allow custom wallets to send multiple transactions at
  the same time and maintain deterministic ordering.
- Paymasters can operate automatically or require user interaction.
- The paymaster supports only the approval based paymaster flow and requires that
  the token param is equal to the token being swapped and minAllowance to equal to
  least tx.maxFeePerGas * tx.gasLimit.
- Currently, the verification rules for custom accounts are not fully enforced, which
  might change in the future.
- Accounts must only interact with slots that belong to them.
- Context variables (e.g., `block.number`) are prohibited in account logic.
- Accounts must increment the nonce by 1 to maintain hash collision resistance.
- These limitations are not yet enforceable at the circuit/VM level and do not apply
  to L1->L2 transactions.
- Uses OpenZeppelin library for signature verification.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- No wallet client. Set TESTNET_PRIVATE_KEY in hardhat config.
- '400 Bad Request: Check the request format and parameters'
- '401 Unauthorized: Ensure valid token and permissions'
- '429 Too Many Requests: Rate limit exceeded, slow down requests'
- 'Unauthorized: Recheck user token or wallet access.'
- Chain must first be deployed with Ethereum as its initial point of settlement.
- '-32700: Parse error'
- '-32600: Invalid request'
- '-32601: Method not found'
- '-32602: Invalid params'
- '-32603: Internal error'
- 'CALLCODE: Not supported due to EraVM constraints.'
- 'SELFDESTRUCT: Not supported due to EraVM constraints.'
- Out-of-ergs errors can cause EVM contracts to revert all calls.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
client:
  base_url: https://mainnet.era.zksync.io
  headers:
    Content-Type: application/json
source_metadata: null
