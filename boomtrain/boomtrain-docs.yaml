resources:
- name: in_app_message
  endpoint:
    path: /in-app-message
    method: GET
- name: in_app_message
  endpoint:
    path: /in_app_message
    method: GET
    data_selector: messages
- name: ZetaClient
  endpoint:
    method: POST
    data_selector: records
- name: ZetaClient
  endpoint:
    path: /initialize
    method: POST
- name: in_app_message
  endpoint:
    path: /in-app/messages
    method: GET
    data_selector: messages
- name: In-App Message Callbacks
  endpoint:
    path: /in-app-message/callbacks
    method: GET
    data_selector: callbacks
    params: {}
- name: Create In-App Message
  endpoint:
    path: /in-app-message/create
    method: POST
    data_selector: message
    params: {}
- name: ZTConfig
  endpoint:
    path: /initialize
    method: POST
    data_selector: config
    params:
      clientSiteId: '{{ siteId }}'
      clientSecret: '{{ clientSecret }}'
      isLoggingEnabled: true
      optIn: true
      region: ZTRegion.US
- name: ZTPush
  endpoint:
    path: /push/init
    method: POST
    data_selector: notificationConfig
    params:
      smallIcon: '{{ applicationInfo.icon }}'
      color: Color.GREEN
      enableAppLaunch: true
      notificationChannel:
        id: ApplicationTestChannel
        name: Application Test Channel
        description: Test Channel Description
        showBadge: true
        autoCancel: true
- name: in_app_message_callbacks
  endpoint:
    path: /in-app-message/callbacks
    method: GET
    data_selector: callbacks
    params: {}
- name: create_in_app_message
  endpoint:
    path: /in-app-message/create
    method: POST
    data_selector: message
    params: {}
- name: push_notification
  endpoint:
    path: /updateDeviceToken
    method: POST
    data_selector: deviceToken
    params: {}
- name: push_notification
  endpoint:
    path: /push_notification
    method: POST
    data_selector: notification
    params: {}
- name: in_app_message
  endpoint:
    path: /in_app_message
    method: POST
    data_selector: message
    params: {}
- name: track_event
  endpoint:
    path: /track-an-event-rest
    method: POST
    data_selector: event
    params: {}
- name: clear_session
  endpoint:
    path: /reference/clear-session
    method: POST
    data_selector: settings
- name: track_event
  endpoint:
    path: /reference/track-an-event-rest
    method: POST
    data_selector: event
    params: {}
- name: clear
  endpoint:
    path: /reference/clear-session
    method: POST
    data_selector: settings
- name: update_user
  endpoint:
    path: /reference/update-user
    method: POST
    data_selector: properties
- name: user_segment_membership
  endpoint:
    path: /reference/get-a-users-segment-membership
    method: GET
    data_selector: segments
- name: check_segment_membership
  endpoint:
    path: /reference/check-segment-membership
    method: GET
    data_selector: status
    params: {}
- name: user_updates
  endpoint:
    path: /update-user
    method: POST
    data_selector: properties
    params: {}
- name: user_segment_membership
  endpoint:
    path: /reference/get-a-users-segment-membership
    method: GET
    data_selector: segments
- name: Authorization
  endpoint:
    path: /oauth/jwt
    method: POST
- name: Check Segment Membership
  endpoint:
    path: /reference/check-segment-membership
    method: GET
    data_selector: status
    params: {}
- name: delete_person
  endpoint:
    path: /{site_id}/person_operation_requests
    method: POST
    data_selector: null
    params: {}
- name: Authorization
  endpoint:
    path: /oauth/jwt
    method: POST
- name: status_of_delete_a_person
  endpoint:
    path: /ver2/{site_id}/person_operation_requests/{request_token}
    method: GET
    data_selector: response
    params: {}
- name: find_person
  endpoint:
    path: /ver2/{site_id}/subscribers
    method: GET
    data_selector: response
    params: {}
- name: delete_person_status
  endpoint:
    path: /ver2/{site_id}/person_operation_requests/{request_token}
    method: GET
- name: recent_events
  endpoint:
    path: /ver2/{site_id}/subscribers/{uid}/events
    method: GET
    data_selector: events
- name: subscribers
  endpoint:
    path: /ver2/{site_id}/subscribers
    method: GET
- name: identify_a_person
  endpoint:
    path: /ver2/{site_id}/subscribers/identify
    method: POST
- name: recent_events
  endpoint:
    path: /ver2/{site_id}/subscribers/{uid}/events
    method: GET
    data_selector: events
    params: {}
- name: look_up_person_by_contact
  endpoint:
    path: /ver2/{site_id}/subscribers
    method: GET
    data_selector: response
    params: {}
- name: identify_person
  endpoint:
    path: /ver2/{site_id}/subscribers/identify
    method: POST
    data_selector: response
    params: {}
- name: merge_people
  endpoint:
    path: /person_operation_requests
    method: POST
    data_selector: object
    params: {}
- name: look_up_person_by_contact
  endpoint:
    path: /ver2/{site_id}/subscribers
    method: GET
    data_selector: response
    params: {}
- name: delete_contact
  endpoint:
    path: /subscribers/{uid}/contacts/{contact_value}
    method: DELETE
- name: merge_people
  endpoint:
    path: /{site_id}/person_operation_requests
    method: POST
    data_selector: object
    params: {}
- name: resend_email
  endpoint:
    path: /ver2/{site_id}/communications/{message_uid}/resend
    method: POST
    data_selector: ''
- name: delete_contact
  endpoint:
    path: /subscribers/{uid}/contacts/{contact_value}
    method: DELETE
    data_selector: null
    params: {}
- name: resend_email
  endpoint:
    path: /ver2/{site_id}/communications/{message_uid}/resend
    method: POST
    data_selector: null
    params: {}
- name: track_event
  endpoint:
    path: /ver2/{site_id}/activities/
    method: POST
    data_selector: activity
- name: track_event_with_contacts
  endpoint:
    path: /{site_id}/activities
    method: POST
- name: unsubscribe_contact
  endpoint:
    path: /ver2/{site_id}/subscribers/{uid}/unsubscribe
    method: POST
    data_selector: null
    params: {}
- name: track_event
  endpoint:
    path: /ver2/{site_id}/activities/
    method: POST
    data_selector: activity
- name: unsubscribe_contact
  endpoint:
    path: /ver2/{site_id}/subscribers/{uid}/unsubscribe
    method: POST
- name: track_event_with_contacts
  endpoint:
    path: /{site_id}/activities
    method: POST
- name: unsubscribe_contact
  endpoint:
    path: /ver2/{site_id}/subscribers/{uid}/unsubscribe
    method: POST
    data_selector: null
    params: {}
- name: view_sent_email
  endpoint:
    path: /ver2/{site_id}/communications/:message_uid
    method: GET
    data_selector: response
    params: {}
- name: unsubscribe_contact
  endpoint:
    path: /ver2/{site_id}/subscribers/{uid}/unsubscribe
    method: POST
    data_selector: null
    params: {}
- name: add_or_remove_people_from_audience_lists
  endpoint:
    path: /{site_id}/segments/{id}/members
    method: POST
- name: view_previously_sent_email
  endpoint:
    path: /ver2/{site_id}/communications/:message_uid
    method: GET
    data_selector: response
    params: {}
- name: broadcast_campaign
  endpoint:
    path: /{site_id}/broadcasts/{campaign_id}
    method: PATCH
- name: Add or Remove People from Audience Lists
  endpoint:
    path: /ver2/{site_id}/segments/{id}/members
    method: POST
- name: broadcast_campaign
  endpoint:
    path: /{site_id}/broadcasts/{campaign_id}
    method: GET
- name: create_broadcast_campaign
  endpoint:
    path: /ver2/{site_id}/broadcasts/
    method: POST
- name: create_email_campaign
  endpoint:
    path: /{site_id}/campaigns
    method: POST
- name: update_broadcast_campaign
  endpoint:
    path: /{site_id}/broadcasts/{campaign_id}
    method: PATCH
    data_selector: object
    params: {}
- name: asset_upload
  endpoint:
    path: /ver2/{site_id}/assets/upload
    method: POST
- name: broadcast_campaign
  endpoint:
    path: /{site_id}/broadcasts/{campaign_id}
    method: GET
- name: campaign_content
  endpoint:
    path: /{site_id}/campaigns/{campaign_id}/content
    method: GET
    data_selector: object
- name: create_email_campaign
  endpoint:
    path: /{site_id}/campaigns
    method: POST
- name: campaign_content
  endpoint:
    path: /ver2/{site_id}/campaigns/name/{campaign_name}/content
    method: GET
- name: update_campaign_content
  endpoint:
    path: /ver2/{site_id}/campaigns/{campaign_id}/content
    method: PATCH
    data_selector: response
    params: {}
- name: upload_asset
  endpoint:
    path: /{site_id}/assets/upload
    method: POST
- name: Update Campaign Content
  endpoint:
    path: /ver2/{site_id}/campaigns/name/{campaign_name}/content
    method: PATCH
- name: campaign_content
  endpoint:
    path: /{site_id}/campaigns/{campaign_id}/content
    method: GET
    data_selector: object
    params: {}
- name: send_api_broadcast_campaign
  endpoint:
    path: /ver2/{site_id}/campaigns/<campaignID>/launch
    method: POST
- name: campaign_content
  endpoint:
    path: /ver2/{site_id}/campaigns/name/{campaign_name}/content
    method: GET
    data_selector: versions
- name: send_campaign_proof
  endpoint:
    path: /ver2/{site_id}/campaigns/{campaign_id}/proofs
    method: POST
- name: update_campaign_content
  endpoint:
    path: /ver2/{site_id}/campaigns/{campaign_id}/content
    method: PATCH
    data_selector: response
    params: {}
- name: snippet
  endpoint:
    path: /snippets
    method: POST
- name: update_campaign_content
  endpoint:
    path: /ver2/{site_id}/campaigns/name/{campaign_name}/content
    method: PATCH
    data_selector: null
    params: {}
- name: delete_snippet
  endpoint:
    path: /ver2/{site_id}/snippets/{snippet_id}
    method: DELETE
    data_selector: null
    params: {}
- name: campaign_launch
  endpoint:
    path: /ver2/{site_id}/campaigns/<campaignID>/launch
    method: POST
    data_selector: null
    params: {}
- name: delete_snippet
  endpoint:
    path: /snippets/name/{snippet_name}
    method: DELETE
    data_selector: null
    params: {}
- name: send_campaign_proof
  endpoint:
    path: /ver2/{site_id}/campaigns/{campaign_id}/proofs
    method: POST
- name: snippets
  endpoint:
    path: /snippets
    method: GET
    data_selector: snippets
- name: snippet
  endpoint:
    path: /{site_id}/snippets
    method: POST
    data_selector: response
- name: snippet
  endpoint:
    path: /snippets/name/{snippet_name}
    method: GET
    data_selector: response
    params: {}
- name: delete_snippet
  endpoint:
    path: /ver2/{site_id}/snippets/{snippet_id}
    method: DELETE
- name: delete_snippet
  endpoint:
    path: /ver2/{site_id}/snippets/name/{snippet_name}
    method: DELETE
- name: snippet
  endpoint:
    path: /snippets/{snippet_id}
    method: GET
    data_selector: html_content
- name: snippet
  endpoint:
    path: /ver2/{site_id}/snippets/{snippet_id}
    method: PATCH
    data_selector: ''
- name: snippets
  endpoint:
    path: /snippets
    method: GET
    data_selector: snippets
- name: update_snippet
  endpoint:
    path: /ver2/{site_id}/snippets/name/{snippet_name}
    method: PATCH
    data_selector: null
    params: {}
- name: snippet
  endpoint:
    path: /ver2/{site_id}/snippets/name/{snippet_name}
    method: GET
    data_selector: HTML content
- name: delete_template
  endpoint:
    path: /ver2/{site_id}/templates/{template_id}
    method: DELETE
- name: snippet
  endpoint:
    path: /snippets/{snippet_id}
    method: GET
    data_selector: html_content
- name: Delete a Template by name
  endpoint:
    path: /{site_id}/templates/name/{template_name}
    method: DELETE
- name: update_snippet
  endpoint:
    path: /ver2/{site_id}/snippets/{snippet_id}
    method: PATCH
    data_selector: response
- name: templates
  endpoint:
    path: /ver2/{site_id}/templates
    method: GET
    data_selector: array
    params: {}
- name: update_snippet
  endpoint:
    path: /ver2/{site_id}/snippets/name/{snippet_name}
    method: PATCH
    data_selector: null
    params: {}
- name: create_template
  endpoint:
    path: /{site_id}/templates
    method: POST
    data_selector: RESPONSE
    params: {}
- name: template
  endpoint:
    path: /ver2/{site_id}/templates/name/{template_name}
    method: GET
    data_selector: HTML content
- name: delete_template
  endpoint:
    path: /{site_id}/templates/{template_id}
    method: DELETE
- name: template
  endpoint:
    path: /ver2/{site_id}/templates/{template_id}
    method: GET
    data_selector: response
    params: {}
- name: delete_template_by_name
  endpoint:
    path: /{site_id}/templates/name/{template_name}
    method: DELETE
    data_selector: object
    params: {}
- name: update_template
  endpoint:
    path: /ver2/{site_id}/templates/{template_id}
    method: PATCH
- name: templates
  endpoint:
    path: /ver2/{site_id}/templates
    method: GET
    data_selector: templates
- name: Update Template
  endpoint:
    path: /{site_id}/templates/name/{template_name}
    method: PATCH
- name: template
  endpoint:
    path: /{site_id}/templates/name/{template_name}
    method: GET
    data_selector: content
    params: {}
- name: create_or_update_resource
  endpoint:
    path: /ver2/{site_id}/resources/{resource_id}
    method: PUT
- name: resource_fields
  endpoint:
    path: /{site_id}/resources/fields
    method: GET
- name: template
  endpoint:
    path: /{site_id}/templates/{template_id}
    method: GET
    data_selector: response
    params: {}
- name: resource_count
  endpoint:
    path: /{site_id}/resources/count
    method: GET
    data_selector: object
- name: update_template
  endpoint:
    path: /ver2/{site_id}/templates/{template_id}
    method: PATCH
- name: resource_types
  endpoint:
    path: /resources/types
    method: GET
- name: update_template
  endpoint:
    path: /{site_id}/templates/name/{template_name}
    method: PATCH
    data_selector: object
    params: {}
- name: specific_resource
  endpoint:
    path: /{site_id}/resources/{resource_id}
    method: GET
- name: create_or_update_resource
  endpoint:
    path: /ver2/{site_id}/resources/{resource_id}
    method: PUT
- name: update_resource
  endpoint:
    path: /{site_id}/resources/{resource_id}
    method: PATCH
- name: Get Resource Fields
  endpoint:
    path: /resources/fields
    method: GET
- name: delete_resource
  endpoint:
    path: /{site_id}/resources/{resource_id}
    method: DELETE
- name: resource_count
  endpoint:
    path: /{site_id}/resources/count
    method: GET
    data_selector: object
    params:
      site_id: string
      resource_type: string
- name: resources
  endpoint:
    path: /resource-list
    method: POST
- name: resource_types
  endpoint:
    path: /{site_id}/resources/types
    method: GET
    data_selector: object
    params: {}
- name: track_event_batch
  endpoint:
    path: /{site_id}/activities/batch
    method: POST
    data_selector: activities
    params: {}
- name: specific_resource
  endpoint:
    path: /{site_id}/resources/{resource_id}
    method: GET
- name: update_resource
  endpoint:
    path: /{site_id}/resources/{resource_id}
    method: PATCH
- name: delete_resource
  endpoint:
    path: /ver2/{site_id}/resources/{resource_id}
    method: DELETE
- name: resources
  endpoint:
    path: /resource-list
    method: POST
- name: identify_person
  endpoint:
    path: /reference/idgraph-identify-a-person
    method: post
- name: track_event
  endpoint:
    path: /reference/idgraph-track-an-event
    method: post
- name: delete_identifiers
  endpoint:
    path: /reference/idgraph-delete-identifiers
    method: post
- name: delete_contact
  endpoint:
    path: /reference/idgraph-delete-contact
    method: del
- name: track_event_batch
  endpoint:
    path: /{site_id}/activities/batch
    method: POST
    data_selector: activities
    params: {}
- name: identify_person
  endpoint:
    path: /subscribers/identify
    method: POST
    data_selector: ''
- name: identify_a_person_batch
  endpoint:
    path: /ver2/{site_id}/subscribers/batch
    method: POST
    data_selector: null
    params: {}
- name: track_event
  endpoint:
    path: /{site_id}/activities
    method: POST
    data_selector: response
- name: identify_a_person
  endpoint:
    path: /reference/idgraph-identify-a-person
    method: POST
    data_selector: subscriber
- name: track_an_event
  endpoint:
    path: /reference/idgraph-track-an-event
    method: POST
    data_selector: event
- name: delete_identifiers
  endpoint:
    path: /reference/idgraph-delete-identifiers
    method: POST
    data_selector: identifier
- name: delete_contact
  endpoint:
    path: /reference/idgraph-delete-contact
    method: DELETE
    data_selector: contact
- name: delete_identifiers
  endpoint:
    path: /{site_id}/person_operation_requests
    method: POST
    data_selector: request_type
    params:
      request_type: delete_identifier
- name: identify_a_person
  endpoint:
    path: /subscribers/identify
    method: POST
    data_selector: null
    params: {}
- name: Delete Contact from Profile
  endpoint:
    path: /ver2/{site_id}/subscribers/{unique_client_id}:{id}/contacts/{contact_value}
    method: DELETE
    data_selector: subscriber
    params: {}
- name: track_event
  endpoint:
    path: /{site_id}/activities
    method: POST
    data_selector: response
    params: {}
- name: Delete Identifiers
  endpoint:
    path: /{site_id}/person_operation_requests
    method: POST
    data_selector: object
    params:
      request_type: delete_identifier
- name: Delete Contact from Profile
  endpoint:
    path: /ver2/{site_id}/subscribers/{unique_client_id}:{id}/contacts/{contact_value}
    method: DELETE
    data_selector: subscriber
- name: recommendations
  endpoint:
    path: /v:version/{site_id}/{identifier_type}/{identifier}
    method: GET
    data_selector: recommendations
- name: recommendations_advanced
  endpoint:
    path: /v:version/{site_id}/{identifier_type}/{identifier}
    method: POST
- name: recommendations
  endpoint:
    path: /v1/{site_id}/{identifier_type}/{identifier}
    method: GET
    data_selector: results
    params: {}
- name: identify_person
  endpoint:
    path: /v1/identify/{site_id}
    method: POST
- name: Recommendations (Advanced)
  endpoint:
    path: /v:version/{site_id}/{identifier_type}/{identifier}
    method: POST
- name: alternative_item_recommendations
  endpoint:
    path: /alternative/{site_id}/{identifier_type}/{identifier}
    method: GET
    data_selector: null
    params:
      count: '3'
      test: 'false'
      medium: other
- name: identify_person
  endpoint:
    path: /identify/{site_id}
    method: POST
- name: Website In-Page Campaign
  endpoint:
    path: /osrs/{site_id}/{identifier_type}/{identifier}
    method: GET
    data_selector: object
    params:
      pname: your_placement_name
      test: 'false'
- name: alternative_item_recommendations
  endpoint:
    path: /v2/alternative/{site_id}/{identifier_type}/{identifier}
    method: GET
    data_selector: object
- name: website_in_page_campaign
  endpoint:
    path: /osrs/{site_id}/{identifier_type}/{identifier}
    method: GET
    data_selector: object
    params:
      pname: your_placement_name
      test: 'false'
- name: campaign_reporting
  endpoint:
    path: /report
    method: POST
    data_selector: items
    params: {}
- name: get_schema_for_dsp_campaign_reporting
  endpoint:
    path: /report/schema
    method: GET
    data_selector: ''
- name: get_dsp_campaign_reporting
  endpoint:
    path: /report
    method: POST
    data_selector: items
    params: {}
- name: schema
  endpoint:
    path: /report/schema
    method: GET
    data_selector: results
    params: {}
- name: conversions
  endpoint:
    path: /conversions
    method: POST
- name: conversions
  endpoint:
    path: /v1/conversions
    method: POST
    data_selector: json
    params: {}
notes:
- Refresh tokens will be valid unless explicitly revoked.
- Refresh tokens will be valid unless explicitly revoked, Zeta recommends that refresh
  tokens are generated sparingly and any unneeded tokens are immediately revoked.
- Initialization can be called on main thread as heavy work is scheduled in background
  thread.
- The opt-out status is maintained locally on the device. This status is not communicated
  to the backend.
- The opt-out status is maintained locally on the device. This status is not communicated
  to the backend. Since the backend remains unaware of the opt-out status, it may
  continue to attempt communication with the device through push notifications. The
  SDK will not process or act upon these messages while in the opted-out state.
- Initialization can be called on main thread as heavy work is scheduled in background
  thread
- The SDK uses a polling mechanism to fetch in-app messages.
- In-app messages are displayed within mobile app without requiring any additional
  permissions.
- In App message is enabled by default, but if the app needs to stop in app message
  the app can call ZetaClient.shared.inApp?.stop()
- Intialisation can be called on main thread as heavy work is scheduled in background
  thread
- The SDK supports region configuration; the correct region should be referenced from
  the ZTRegion struct.
- Intialisation can be called on main thread as heavy work is scheduled in background
  thread.
- For Android 13 and above, user permission is required to show notifications.
- In-app messages are enabled by default.
- The SDK does not persist the stop state for in-app messages.
- User permission is required to show notifications for Android 13 and above.
- The push notification service will not work without Google Play services.
- ZetaClient should initialize inside the application class onCreate
- The application needs to handle Firebase registration and must keep the google-services.json
  file inside the project/app folder.
- All date-time should be in ISO 8601 format in UTC
- In-app messaging is enabled by default.
- The SDK does not persist the stop state; the application must manage this state.
- Make sure to replace placeholders (YOUR_SITE_ID, YOUR_CLIENT_SECRET) with your actual
  credentials.
- 'In-app message is enabled by default, but if the app needs to stop in app message
  the app can call: await ZetaCore().stopInApp();'
- 'To restart In App message again, the app can call: await ZetaCore().startInApp();'
- Ensure your Android project has Google Play Services and Firebase Messaging set
  up if using push notifications.
- For processing push notifications, we shall need to add required dependencies with
  CocoaPods.
- To track notification clicked by user, call ZetaClient.shared.push?.userNotificationCenter.
- Zeta recommends that refresh tokens are generated sparingly and any unneeded tokens
  are immediately revoked.
- Events are non-blocking JavaScript calls.
- Event tracks are non-blocking JavaScript calls.
- User Updates are blocking JavaScript calls.
- This endpoint allows you to use a valid refresh token to generate a bearer token
  which can be utilized to authenticate the ZMP REST APIs
- There may be up to a 5 minute delay in the deletion and up to a 20-30 minute delay
  for the deletion to be reflected in the UI of the profile itself.
- Further propagation for deletion of events may take up to 72 hours.
- There may be up to a 5 minute delay in the deletion and up to a 20-30 minute delay
  for the deletion to be reflected in the UI of the profile itself. Further propagation
  for deletion of events may take up to 72 hours.
- Authorization requires Basic Authentication with base64 encoded credentials.
- Authorization requires Basic authentication with base64 encoding.
- Authorization requires Basic auth with base64 encoded credentials
- The default rate limiting for this endpoint is 10k/min with a 2min cooldown
- The default rate limiting for this endpoint is 10k/min with a 2min cooldown.
- Delete a contact from an existing profile, so long as contact_value and uid are
  not the same value
- There may be up to a 5 minute delay in the deletion and up to a 15-20 minute delay
  for the deletion to be reflected in the UI.
- Resend an email to the original email address or to a new email address as needed
- The default rate limiting for this endpoint is 50k/min with a 2min cooldown, note
  that this limit is shared across all accounts within the same parent/child structure.
- When the limit is exceeded, the API will return a `429` status code.
- identify_person should only be set to true when doing a profile update
- Authorization requires Basic authentication.
- Authorization requires Basic credentials encoded in base64.
- URL for this request expired after 30 days.
- Asset files are publicly accessible. No authentication is required to view or download
  an asset file.
- We strongly recommend not uploading any asset that includes personally identifiable
  information (PII), or sensitive information (e.g. account numbers, etc.)
- Updates the HTML content for an existing multi-version campaign by its name.
- Trigger an existing Multi-Version Campaign that is set to 'Broadcast when an API
  request is made'.
- Request supports pagination with default page size of 10 and sorted by last updated
  date
- Authorization header requires Basic authentication with base64 encoding.
- Updates HTML content for an existing snippet by name
- The name of the template must be unique.
- Authorization requires Basic authentication with base64 encoding of credentials.
- Updates HTML content for an existing template, not compatible with visual templates
- Updates HTML content for an existing template by name, not compatible with visual
  templates
- The URL for this request expired after 30 days.
- by default, only the count of processed and failed records will be returned in the
  response, if 'return_processed_records' is set to true the response will return
  the individual record data.
- Create a person in your account or update it if it already exists
- Bulk create/update people in your account, this API allows up to 100 profiles to
  be updated in one call
- IDs can only be used to associate an event to an existing profile
- If using an additional identifier, the given profile should already exist, else
  the call will fail
- Authorization is Basic
- The id_token returned will be valid for 10 hours after issue.
- When you're ready to deploy this endpoint, remove 'test=true' from the URL. Otherwise,
  user metrics will not be recorded.
- 'The id_token returned will be valid for 10 hours after issue, and should be passed
  as a header into the routes that need authorization, in the format `Authorization:
  Bearer <id_token>`.'
- At least one of primary.bsin, primary.email, or primary.user_id must be present
  in the request body.
- When you're ready to deploy this endpoint, remove 'test=true' from the URL.
- As of 02.15.25, the APIs have been migrated to new endpoints.
- Zeta DSP API calls are limited to 8,000 calls per day.
- As of September 20th, 2022, Zeta DSP API calls are limited to 8,000 calls per day.
- If you exceed a quota, you’ll generally receive a 402 or 403 error HTTP status code
  response.
- Optionally provide a company (advertiser id). Required for managed service clients.
- Optionally provide a campaign_id
- DSP cAPI uses a non-expiring, revokable token, which is available by request from
  your account team.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- Push Notification setup requires Native iOS and android SDK methods.
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check eventType or properties structure'
- '400 Bad Request: Check the properties format or required fields.'
- '401 Unauthorized: Verify OAuth token.'
- '429 Too Many Requests: Throttle API calls.'
- '400: Bad Request'
- '401 Unauthorized: Check your Authorization header.'
- '429: Rate limit exceeded'
- '400 Bad Request: Invalid request parameters'
- '400: Result'
- '400 Bad Request: Check required parameters'
- '401 Unauthorized: Check username and password.'
- '404: The requested URL was not found on the server.'
- '500: We had a reactor leak here now. Give us a few minutes to lock it down.'
- '402 or 403: If you exceed a quota, you’ll generally receive a 402 or 403 error
  HTTP status code response.'
- '400: message'
- '500: message'
- '402: Exceeded quota limit'
- '403: Access denied'
- '400'
- '500'
auth_info:
  mentioned_objects:
  - Authorization API
  - JSON Web Token
  - JWT
client:
  base_url: https://api.zetaglobal.net/ver2
  auth:
    type: basic
    location: header
    header_name: Authorization
  headers:
    Content-Type: application/json
    Accept: application/json
source_metadata: null
