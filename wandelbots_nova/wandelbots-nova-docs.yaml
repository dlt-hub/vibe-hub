resources:
- name: add_robot
  endpoint:
    path: /cells/{cell}/controllers
    method: POST
    data_selector: response
    params: {}
- name: list_motion_groups
  endpoint:
    path: /cells/{cell}/controllers
    method: GET
    data_selector: response
    params: {}
- name: read_tcp_information
  endpoint:
    path: /cells/{cell}/motion-groups/{motion-group}/tcps
    method: GET
    data_selector: response
    params: {}
- name: get_motion_group_state
  endpoint:
    path: /cells/{cell}/motion-groups/{motion-group}/state
    method: GET
    data_selector: response
    params:
      tcp: '{tcp}'
- name: plan_motion
  endpoint:
    path: /cells/{cell}/motions
    method: POST
    data_selector: response
    params: {}
- name: execute_motion
  endpoint:
    path: /cells/{cell}/motions/{motion}/executetotrajectory
    method: GET
    data_selector: response
    params:
      location_on_trajectory: '0'
- name: store_program
  endpoint:
    path: /cells/{cell}/runners
    method: POST
    data_selector: response
    params: {}
- name: execute_program
  endpoint:
    path: /cells/{cell}/execute
    method: POST
    data_selector: response
    params: {}
- name: store_programs
  endpoint:
    path: /store/programs
    method: POST
    data_selector: null
    params: {}
- name: list_program_metadata
  endpoint:
    path: /store/programs
    method: GET
    data_selector: programs
    params: {}
- name: get_program
  endpoint:
    path: /store/programs/{program}
    method: GET
    data_selector: null
    params: {}
- name: create_trigger
  endpoint:
    path: /operator/triggers
    method: POST
    data_selector: null
    params: {}
- name: run_program
  endpoint:
    path: /operator/programs/runs
    method: POST
    data_selector: null
    params: {}
- name: get_all_program_runs
  endpoint:
    path: /operator/programs/runs
    method: GET
    data_selector: null
    params: {}
- name: get_program_run
  endpoint:
    path: /operator/programs/runs/{run}
    method: GET
    data_selector: null
    params: {}
- name: update_trigger
  endpoint:
    path: /operator/triggers/{trigger}
    method: PUT
    data_selector: null
    params: {}
- name: delete_trigger
  endpoint:
    path: /operator/triggers/{trigger}
    method: DELETE
    data_selector: null
    params: {}
- name: add_robot
  endpoint:
    path: /cells/{cell}/controllers
    method: POST
- name: list_motion_groups
  endpoint:
    path: /cells/{cell}/controllers
    method: GET
- name: get_active_tcp
  endpoint:
    path: /cells/{cell}/motion-groups/{motion-group}/tcps
    method: GET
- name: get_motion_group_state
  endpoint:
    path: /cells/{cell}/motion-groups/{motion-group}/state
    method: GET
- name: plan_motion
  endpoint:
    path: /cells/{cell}/motions
    method: POST
- name: execute_motion
  endpoint:
    path: /cells/{cell}/motions/{motion}/executetotrajectory
    method: GET
- name: send_wandelscript
  endpoint:
    path: /cells/{cell}/runners
    method: POST
- name: execute_program
  endpoint:
    path: /cells/{cell}/execute
    method: POST
- name: store_programs
  endpoint:
    path: /cells/{cell}/store/programs
    method: POST
    data_selector: null
    params: {}
- name: list_program_metadata
  endpoint:
    path: /cells/{cell}/store/programs
    method: GET
    data_selector: programs
    params: {}
- name: get_program
  endpoint:
    path: /cells/{cell}/store/programs/{program}
    method: GET
    data_selector: null
    params: {}
- name: create_trigger
  endpoint:
    path: /cells/{cell}/operator/triggers
    method: POST
    data_selector: null
    params: {}
- name: run_program
  endpoint:
    path: /cells/{cell}/operator/programs/runs
    method: POST
    data_selector: null
    params: {}
- name: get_all_program_runs
  endpoint:
    path: /cells/{cell}/operator/programs/runs
    method: GET
    data_selector: null
    params: {}
- name: get_program_run
  endpoint:
    path: /cells/{cell}/operator/programs/runs/{run}
    method: GET
    data_selector: null
    params: {}
- name: update_trigger
  endpoint:
    path: /cells/{cell}/operator/triggers/{trigger}
    method: PUT
    data_selector: null
    params: {}
- name: delete_trigger
  endpoint:
    path: /cells/{cell}/operator/triggers/{trigger}
    method: DELETE
    data_selector: null
    params: {}
- name: installation_process
  endpoint:
    path: /25.5/nova-installation
    method: GET
    data_selector: records
- name: installation_process
  endpoint:
    path: /25.5/nova-installation
    method: GET
    data_selector: installation_steps
    params: {}
- name: add_robot
  endpoint:
    path: /nova-api/add-robot
    method: POST
    data_selector: robot
    params: {}
- name: add_robot
  endpoint:
    path: /nova-api/add-robot
    method: POST
- name: robots
  endpoint:
    path: /25.5/nova-api#add-a-robot-to-the-cell
    method: POST
    data_selector: robot
    params: {}
- name: robot
  endpoint:
    path: /services/data/vXX.X/sobjects/Robot
    method: POST
    data_selector: records
    params: {}
- name: motion_group
  endpoint:
    path: /cells/{cell}/motion-groups/all
    method: POST
- name: robot
  endpoint:
    path: /services/data/vXX.X/robots
    method: POST
    data_selector: robot
    params: {}
- name: robot
  endpoint:
    path: /add-robot
    method: POST
    data_selector: data
    params: {}
- name: robot
  endpoint:
    path: /25.5/nova-api#add-a-robot-to-the-cell
    method: POST
    data_selector: robot
    params: {}
- name: supported_models
  endpoint:
    path: /25.5/setup-robots/yaskawa#supported-models
    method: GET
    data_selector: models
    params: {}
- name: setup_instructions
  endpoint:
    path: /25.5/setup-robots/yaskawa#set-up-and-connect-yaskawa-controller
    method: GET
    data_selector: instructions
    params: {}
- name: cell_configuration
  endpoint:
    path: /cells/{cellId}
    method: GET
    data_selector: resources
    params: {}
- name: update_cell
  endpoint:
    path: /cells/{cell}
    method: POST
    data_selector: resources
    params: {}
- name: add_cell
  endpoint:
    path: /cells
    method: POST
    data_selector: resources
    params: {}
- name: cell_configuration_export
  endpoint:
    path: /cells/{cellId}
    method: GET
- name: cell_configuration_import
  endpoint:
    path: /cells
    method: POST
- name: update_cell_configuration
  endpoint:
    path: /cells/{cell}
    method: POST
- name: point_to_point
  endpoint:
    path: /p2p
    method: POST
    data_selector: pose
- name: linear
  endpoint:
    path: /line
    method: POST
    data_selector: pose
- name: circular
  endpoint:
    path: /arc
    method: POST
    data_selector: pose
- name: joint_point_to_point
  endpoint:
    path: /joint_p2p
    method: POST
    data_selector: joints
- name: relative_position
  endpoint:
    path: /relative
    method: POST
    data_selector: pose
- name: Point to point
  endpoint:
    path: /p2p
    method: POST
    data_selector: pose
- name: Linear
  endpoint:
    path: /line
    method: POST
    data_selector: pose
- name: Circular
  endpoint:
    path: /arc
    method: POST
    data_selector: pose
- name: Joint point to point
  endpoint:
    path: /joint_p2p
    method: POST
    data_selector: joints
- name: Relative to a position
  endpoint:
    path: /relative
    method: POST
    data_selector: pose
- name: list_devices
  endpoint:
    path: /api/v1/cells/{cell}/devices
    method: GET
    data_selector: devices
- name: create_collision_scene
  endpoint:
    path: /api/v1/cells/{cell}/devices
    method: POST
    data_selector: device
    params: {}
- name: verify_collision_scene
  endpoint:
    path: /api/v1/cells/{cell}/devices
    method: GET
    data_selector: devices
- name: list_all_devices
  endpoint:
    path: /cells/{cell}/devices
    method: LIST
    data_selector: devices
- name: create_collision_scene
  endpoint:
    path: /cells/{cell}/devices
    method: POST
    data_selector: scene
- name: verify_collision_scene
  endpoint:
    path: /cells/{cell}/devices
    method: GET
    data_selector: devices
- name: cells
  endpoint:
    path: /api/v1/cells/{cell}/devices
    method: POST
    data_selector: response
    params: {}
- name: cells
  endpoint:
    path: /api/v1/cells/{cell}/devices
    method: POST
    data_selector: data
    params: {}
- name: stacking_demo
  endpoint:
    path: /stacking/demo
    method: GET
    data_selector: records
- name: authenticate
  endpoint:
    path: /omniservice/authenticate
    method: POST
    data_selector: host
    params: {}
- name: create_robot
  endpoint:
    path: /robot/create_robot
    method: POST
    data_selector: identifier
    params: {}
- name: create_streams
  endpoint:
    path: /streams/create_streams
    method: POST
    data_selector: identifier
    params: {}
- name: play_simulation
  endpoint:
    path: /scene/play_simulation
    method: POST
    data_selector: identifier
    params: {}
- name: export_configuration
  endpoint:
    path: /configuration/export_configuration
    method: POST
    data_selector: configuration
    params: {}
- name: Virtual Robot Setup
  endpoint:
    path: /nova-api/virtual-robot-setup
    method: POST
    data_selector: tcp_configuration
- name: authenticate
  endpoint:
    path: /omniservice/authenticate
    method: POST
    data_selector: response
    params: {}
- name: create_robot
  endpoint:
    path: /robot/create_robot
    method: POST
    data_selector: response
    params: {}
- name: get_robot_data_from_scene
  endpoint:
    path: /robot/get_robot_data_from_scene
    method: GET
    data_selector: response
    params: {}
- name: get_all_robots
  endpoint:
    path: /robot/get_all_robots
    method: GET
    data_selector: response
    params: {}
- name: create_streams
  endpoint:
    path: /streams/create_streams
    method: POST
    data_selector: response
    params: {}
- name: start_stream
  endpoint:
    path: /streams/start_stream
    method: POST
    data_selector: response
    params: {}
- name: load_configuration
  endpoint:
    path: /configuration/load_configuration
    method: POST
    data_selector: response
    params: {}
- name: export_configuration
  endpoint:
    path: /configuration/export_configuration
    method: POST
    data_selector: response
    params: {}
- name: TCP Configuration
  endpoint:
    path: /nova-api/virtual-robot/setup/add-tcp
    method: POST
    data_selector: tcp_configuration
- name: camera
  endpoint:
    path: /omniservice/camera/
    method: GET
    data_selector: cameras
- name: active_camera
  endpoint:
    path: /omniservice/camera/active
    method: POST
    data_selector: response
- name: camera_configuration
  endpoint:
    path: /omniservice/camera/
    method: POST
    data_selector: configuration_response
- name: color_image
  endpoint:
    path: /omniservice/camera/{camera_name}/color
    method: GET
    data_selector: color_image_data
- name: image_normals
  endpoint:
    path: /omniservice/camera/{camera_name}/normals
    method: GET
    data_selector: normals_data
- name: depth
  endpoint:
    path: /camera/{camera_name}/depth
    method: GET
    data_selector: depth_data
- name: point_cloud
  endpoint:
    path: /omniservice/camera/{camera_name}/pointcloud
    method: GET
    data_selector: pointcloud_data
- name: bounding_box_2d
  endpoint:
    path: /omniservice/camera/{camera_name}/bounding-box-2d
    method: GET
    data_selector: bounding_box_2d_data
- name: bounding_box_3d
  endpoint:
    path: /omniservice/camera/{camera_name}/bounding-box-3d
    method: GET
    data_selector: bounding_box_3d_data
- name: instance_segmentation
  endpoint:
    path: /omniservice/camera/{camera_name}/instance-segmentation
    method: GET
    data_selector: instance_segmentation_data
- name: semantic_segmentation
  endpoint:
    path: /omniservice/camera/{camera_name}/semantic-segmentation
    method: GET
    data_selector: semantic_segmentation_data
- name: camera
  endpoint:
    path: /omniservice/camera/
    method: GET
    data_selector: cameras
- name: set_semantic_label
  endpoint:
    path: /object/set_semantic_label
    method: PUT
    data_selector: result
- name: get_all_semantic_labels
  endpoint:
    path: /object/get_all_semantic_labels
    method: GET
    data_selector: labels
- name: NOVA API
  endpoint:
    path: /services/data/vXX.X/sobjects/NOVA
    method: GET
- name: virtual_robot
  endpoint:
    path: /api/robots/virtual
    method: POST
    data_selector: robot
    params: {}
- name: Add Application
  endpoint:
    path: /api/v1/cells/{cell}/apps
    method: POST
- name: Add Application
  endpoint:
    path: /api/v1/cells/{cell}/apps
    method: POST
- name: rerun
  endpoint:
    path: /api/v1/cells/{cell}/apps
    method: POST
    data_selector: ''
    params: {}
- name: state_of_device_controller
  endpoint:
    path: /api/v1/cells/{cell}/controllers/{controller}/state
    method: GET
- name: state_of_device_motion_group
  endpoint:
    path: /api/v1/cells/{cell}/motion-groups/{motion-group}/state
    method: GET
- name: plan_collision_free_ptp
  endpoint:
    path: /v2/cells/{cell}/motion-planning/plan-collision-free-ptp
    method: POST
notes:
- To authenticate API requests, use the access token provided with your instance in
  the Developer Portal.
- Current upload limit for API requests is 100MB.
- Maximum 10 triggers are allowed per PLC OPC UA server session.
- 'API request limits: 100MB upload limit for API requests.'
- Installation process can take up to 10 minutes.
- Ensure that you're using a fast broadband connection.
- Ensure that you're using a personal computer that was designed after 2015 for communication
  and stability purposes.
- Installation process can take up to 10 minutes
- Required software download begins after entering the license key
- Wandelbots NOVA only supports ABB controllers with software version 6.x.x.x or higher.
- Wandelbots NOVA only supports FANUC controllers with software version 9.30P/24 or
  9.40P/28 or higher.
- Only qualified user groups designated by the operating company may set up the physical
  robot environment.
- If one of the packages is missing, contact the FANUC customer support and request
  a FANUC image. This process can take a couple of days.
- Wandelbots NOVA only supports connecting KUKA controllers with software version
  KSS8.3.18 or higher.
- Danger in case of insufficient qualification of users
- In order to prepare the KUKA for Wandelbots NOVA you need to be part of the Expert
  user group.
- Last updated on June 20, 2025
- Wandelbots NOVA only supports UR e-series controllers with Polyscope version 5.11
  or higher, and UR cb-series controllers with Polyscope version 3.15 or higher.
- Wandelbots NOVA can only communicate with UR if the controller root password is
  'easybot'.
- Wandelbots NOVA can only communicate with UR, if the controller root password is
  'easybot'.
- Wandelbots NOVA only supports Yaskawa controllers with at least software version
  4.20 or higher.
- The provided setup instructions do not replace a thorough understanding of the robot
  manufacturer's original operating instruction.
- Only one personal computer is allowed to connect to the instance's IP address.
- Wandelbots NOVA expects the initial default Yaskawa controller's MANAGEMENT MODE
  user credentials.
- In case multiple personal computers control a physical robot, the robot will not
  move.
- Indentation is crucial in Wandelscript.
- Wandelscript uses an indentation style similar to Python.
- Uses sync to ensure movements are recognized as one group.
- Uses explicit sync to ensure movement commands are recognized as one group.
- Mixing default_robot and robot context is not allowed.
- Wandelscript supports a range of common and more robot-specific data types.
- Collision handling is an experimental feature.
- Only sequential motions of multiple robots can be checked for collisions.
- Ensure that `start_left`, `end_left`, `start_right` and `end_right` can be reached
  collision-free by the robot.
- I/O has to be defined in your cell. Replace `tool_out[0]` with the I/O.
- Currently, namespaces for distinguishing plugins are not available. We're working
  on it.
- Uses username and password for authentication.
- Global variables can be set to make Wandelscript more concise and easier to read.
- Several predefined global variables with special meaning exist, starting with a
  double '_'
- Wandelbots NOVA allows you to connect your NVIDIA Isaac Sim™ instance via the Robot
  Pad.
- Wandelbots NOVA 25.5 requires the Wandelbots NOVA extension (Omniservice) version
  1.47.1.
- Toggling the `Autoload` setting is required to use the Wandelbots NOVA extension.
- Wandelscript supports username and password-based authentication.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses OAuth2 with access token — requires setup of connected app in Wandelbots NOVA
- Skip authentication setup for physical or virtual machine instances.
- Each TCP is unique and has to be configured to match the virtual robot's TCP.
- Skip authentication if using a physical instance or virtual machine.
- Make sure that the NVIDIA Isaac Sim™ extension is installed and connected to the
  RobotPad.
- The camera configuration will override previously set properties.
- The Wandelbots NOVA instance will provide the API required for your application.
- Cloud instances are accessible via the internet and therefore protected by authentication
  token.
- Connect the template app to the instance by providing the WANDELAPI_BASE_URL, CELL_ID
  and NOVA_ACCESS_TOKEN environment variables.
- To deploy an application you need a container registry that NOVA can pull your app
  from.
- If you are using docker hub and do not want make your image available to the public,
  switch your docker hub registry to 'Make private' in the repository settings.
- The main way to communicate with Wandelbots NOVA is a user-facing REST API.
- Wandelbots NOVA uses some robot-domain-specific terminology.
- The CLI tool requires authentication token for cloud instances.
- Connect the template app to the instance by providing the API_HOST and NOVA_ACCESS_TOKEN
  environment variables via the .env file.
- In case you created an instance which is using Bearer as authorization, you can
  provide the NOVA_ACCESS_TOKEN.
- You need a container registry that NOVA can pull your app from.
- When using the public docker registry, create an account on docker hub.
- Uses public docker registry for application deployment
- Configure the environment variables WANDELAPI_BASE_URL and NOVA_ACCESS_TOKEN to
  point to your instance and provide the access token of your instance.
- Nova Rerun Bridge automatically collects motion data from your NOVA instance. No
  additional configuration is required.
- The CLI helps you to build and deploy your application on the NOVA platform.
- You can also use it to download diagnostic logs and to manage your applications.
- Your app needs to be able to properly handle the service base path.
- The external URL of the your app root will be http://host/<cell-name>/<your-app-name>
- If you want to communicate with this app from within other apps on NOVA, use http://<your-app-name>:port/<cell-name>/<your-app-name>
- Yaskawa robots are temporarily only supported for development use as long term operations
  (less than 2 hours) cannot be ensured.
- The settings app is not only dressed in other colors but also has additional features.
- Created cells and robots will not be deleted when updating to Wandelbots NOVA 25.4.
- The default velocity for Wandelscript is now set to 50mm/s. This enables safe robotic
  movements in case of missing velocity values.
- The default velocity for Wandelscript is now set to 50mm/s.
- Instances are automatically deleted after 14 days since the last start.
- Instances automatically deleted after 14 days since the last start.
- Instances stop after 3 days since the last start and expire after 10 days since
  the last start.
- Check that the robot is in the correct operating state by referring to the robot
  setup instructions.
- Use Controller > State of Device `GET /api/v1/cells/{cell}/controllers/{controller}/state`
  is in the desired state.
- Use Motion Group Infos > State of Device `GET /api/v1/cells/{cell}/motion-groups/{motion-group}/state`
  to check if the robot is in the correct state.
- The solution to this is to restart the Kubernetes pod for the robot movement calculation
  & control service.
- To run Wandelbots NOVA with a Yaskawa, motoPlus jobs are running.
- Safety features and functionalities are not controlled by Wandelbots NOVA.
- The operating company must ensure that all personnel that will work with Wandelbots
  NOVA have read and understood this documentation.
- Danger from reasonably foreseeable misuse! Misuse of Wandelbots NOVA with physical
  robots can result in material damage and people being injured.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- If the button to add a robot is greyed out, your license might not support adding
  more robots.
- 'Wandelbots Api Exceptions: Failed to transfer file /usr/local/share/config/../install-resource/yaskawa/wandelbots-server-2.x.y.z.out
  to remote path MUSB0/wandelbots/wandelbots-server.out: Login denied'
- 'Login denied: Ensure the default user credentials in MANAGEMENT MODE'
- '401 Unauthorized: Recheck username and password.'
- '404: Camera not found - Ensure the camera exists in the scene.'
- '401 Unauthorized: Ensure correct token is provided'
- 'Configuration import failed: Try to import the configuration again.'
- Instances stop after 3 days since the last start and expire after 10 days since
  the last start.
- '<Status.FAILED_PRECONDITION>: Manual user interaction with the physical robot is
  required.'
- Tried to claim mode 'ROBOT_MODE_MONITOR' for '$(something here)$' but already in
  Use.
auth_info:
  mentioned_objects: []
client:
  base_url: https://portal.wandelbots.io
  auth:
    type: oauth2
source_metadata: null
