resources:
- name: create_widget_url
  endpoint:
    path: /api/v2/auth/session
    method: POST
- name: create_widget_url
  endpoint:
    path: /api/v2/auth/session
    method: POST
    data_selector: ''
- name: tokens
  endpoint:
    path: /api/v1/tokens
    method: GET
    data_selector: records
    params: {}
- name: off_ramp
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: nft_checkout
  endpoint:
    path: /nft/checkout
    method: POST
    data_selector: data
    params: {}
- name: nft_collection
  endpoint:
    path: /nft-collection
    method: GET
    data_selector: data
    params: {}
- name: nft_checkout
  endpoint:
    path: /nft/checkout
    method: POST
    data_selector: transactionDetails
    params: {}
- name: NFT Collections
  endpoint:
    path: /nft-collections
    method: GET
    data_selector: collections
- name: off_ramp_stream
  endpoint:
    path: /off-ramp
    method: GET
    data_selector: data
    params:
      apiKey: your_api_key
      environment: staging
      referrerDomain: yourdomain.com
      isTransakStreamOffRamp: 'true'
      cryptoCurrencyCode: USDT
      network: ethereum
- name: Transak Off-Ramp
  endpoint:
    path: /off-ramp
    method: GET
    params:
      apiKey: your_api_key
      environment: staging
      referrerDomain: yourdomain.com
      isTransakStreamOffRamp: 'true'
      cryptoCurrencyCode: USDT
      network: ethereum
- name: cryptocurrency_listing
  endpoint:
    path: /request-cryptocurrency-listing
    method: POST
    data_selector: listing_details
    params: {}
- name: fiat_currency
  endpoint:
    path: /fiat-currency-countries
    method: GET
    data_selector: currencies
    params: {}
- name: fiat_currencies
  endpoint:
    path: /fiat-currencies
    method: GET
    data_selector: currencies
- name: widget_url
  endpoint:
    path: /reference/create-widget-url
    method: POST
- name: widget_url
  endpoint:
    path: /create-widget-url
    method: POST
    data_selector: widgetUrl
- name: create_widget_url
  endpoint:
    path: /reference/create-widget-url
    method: POST
    data_selector: widgetUrl
- name: outer_iframe
  endpoint:
    path: /staging
    method: GET
- name: inner_iframe
  endpoint:
    path: /production
    method: GET
- name: Create Widget URL
  endpoint:
    path: /reference/create-widget-url
    method: POST
    data_selector: widgetUrl
- name: widget_url
  endpoint:
    path: /create-widget-url
    method: POST
    data_selector: widgetUrl
- name: widget_url
  endpoint:
    path: /create-widget-url
    method: POST
    data_selector: widgetUrl
- name: Create Widget URL
  endpoint:
    path: /update/reference/create-widget-url
    method: POST
    data_selector: widgetUrl
- name: widget_url
  endpoint:
    path: /create-widget-url
    method: POST
    data_selector: widgetUrl
- name: on_ramp_off_ramp
  endpoint:
    path: /api/on_ramp_off_ramp
    method: GET
    data_selector: data
- name: on_ramp
  endpoint:
    path: /on-ramp
    method: GET
    data_selector: data
- name: off_ramp
  endpoint:
    path: /off-ramp
    method: GET
    data_selector: data
- name: nft_checkout
  endpoint:
    path: /nft/checkout
    method: GET
    data_selector: records
    params:
      apiKey: required
      sessionId: required
- name: nft_collection
  endpoint:
    path: /nft/collections
    method: GET
    data_selector: records
    params:
      contractID: 63306038308c667bb8755b77
      isNFT: true
- name: nft_checkout
  endpoint:
    path: /nft/checkout
    method: POST
    data_selector: transaction
    params:
      apiKey: your_api_key
      sessionId: your_session_id
- name: widget
  endpoint:
    path: /create-widget-url
    method: GET
    data_selector: widgetData
    params:
      apiKey: ''
      widgetUrl: ''
- name: nft_collection
  endpoint:
    path: /nft/collection
    method: GET
    data_selector: records
    params:
      contractID: ''
      tokenData: ''
      isNFT: true
      walletAddress: ''
      environment: STAGING
      fiatCurrency: GBP
      defaultFiatCurrency: GBP
      countryCode: IN
      disablePaymentMethods: credit_debit_card
      email: user@mail.com
      userData: {}
      partnerOrderId: 5e2f559511a9de
      partnerCustomerId: '23487492'
      disableWalletAddressForm: true
      themeColor: '000000'
      widgetHeight: 100%
      widgetWidth: 100%
      hideMenu: true
      isFeeCalculationHidden: true
      exchangeScreenTitle: Buy NFT
- name: widget
  endpoint:
    path: /v1/widget
    method: GET
    data_selector: widgetData
- name: Session
  endpoint:
    path: /api/v2/auth/session
    method: POST
    data_selector: widgetParams
- name: User journey
  endpoint:
    path: /reference/end-points
    method: GET
    data_selector: parameters
- name: walletAddressesData
  endpoint:
    path: /api/walletAddresses
    method: GET
    data_selector: networks
    params: {}
- name: userData
  endpoint:
    path: /api/userData
    method: GET
    data_selector: user
    params: {}
- name: fiat_options
  endpoint:
    path: /fiat/options
    method: GET
    data_selector: fiatOptions
- name: crypto_options
  endpoint:
    path: /crypto/options
    method: GET
    data_selector: cryptoOptions
- name: user_data
  endpoint:
    params:
      email: user@email.com
      userData:
        firstName: Satoshi
        lastName: Nakamoto
        mobileNumber: '+19692154942'
        dob: '1990-11-26'
        address:
          addressLine1: 170 Pine St
          addressLine2: San Francisco
          city: San Francisco
          state: CA
          postCode: '94111'
          countryCode: US
- name: redirectURL
  endpoint:
    path: /redirect
    method: GET
    data_selector: url
    params: {}
- name: partnerOrderId
  endpoint:
    path: /order
    method: POST
    data_selector: orderId
    params: {}
- name: partnerCustomerId
  endpoint:
    path: /customer
    method: POST
    data_selector: customerId
    params: {}
- name: fiat_options
  endpoint:
    path: /fiat-options
    method: GET
    data_selector: fiatOptions
- name: crypto_options
  endpoint:
    path: /crypto-options
    method: GET
    data_selector: cryptoOptions
- name: KYC Share Token
  endpoint:
    path: /resources/accessTokens/shareToken
    method: POST
    data_selector: token
- name: Create Widget URL
  endpoint:
    path: /api/v2/auth/session
    method: POST
    data_selector: widgetParams
- name: widget
  endpoint:
    path: /api/v2/auth/session
    method: POST
    data_selector: widgetParams
- name: widgetUrl
  endpoint:
    path: /create-widget-url
    method: GET
    data_selector: ''
    params:
      apiKey: ''
      referrerDomain: ''
- name: KYC Share Token
  endpoint:
    path: /resources/accessTokens/shareToken
    method: POST
    data_selector: token
- name: Create Widget URL
  endpoint:
    path: /api/v2/auth/session
    method: POST
    data_selector: widgetParams
- name: widgetParams
  endpoint:
    path: /api/v2/auth/session
    method: POST
    data_selector: widgetParams
- name: widgetUrl
  endpoint:
    path: /create-widget-url
    method: GET
    params:
      apiKey: ''
      referrerDomain: ''
- name: create_widget_url
  endpoint:
    path: /reference/create-widget-url
    method: POST
    params:
      contractID: 63306038308c667bb8755b77
      isNFT: true
      walletAddress: '0x86349020e9394b2BE1b1262531B0C3335fc32F20'
      environment: STAGING
      fiatCurrency: GBP
      defaultFiatCurrency: GBP
      countryCode: IN
      disablePaymentMethods: credit_debit_card
      email: user@mail.com
      partnerOrderId: 5e2f559511a9de
      partnerCustomerId: '23487492'
      disableWalletAddressForm: true
      themeColor: '000000'
      widgetHeight: 100%
      widgetWidth: 100%
      hideMenu: true
      isFeeCalculationHidden: true
      exchangeScreenTitle: Buy NFT
- name: widgetUrl
  endpoint:
    path: /create-widget-url
    method: GET
    params:
      apiKey: mandatory
      referrerDomain: mandatory
- name: widget_url
  endpoint:
    path: /create/widget/url
    method: POST
    data_selector: data
    params:
      apiKey: your_api_key
      referrerDomain: your_referrer_domain
- name: create_widget_url
  endpoint:
    path: /reference/create-widget-url
    method: GET
    data_selector: widgetUrl
    params:
      apiKey: ''
      referrerDomain: ''
- name: widget_url
  endpoint:
    path: /reference/create-widget-url
    method: GET
    data_selector: query_parameters
    params:
      apiKey: ''
      referrerDomain: ''
- name: walletAddressesData
  endpoint:
    path: /walletAddressesData
    method: GET
    data_selector: networks
    params: {}
- name: userData
  endpoint:
    path: /userData
    method: GET
    data_selector: user
    params: {}
- name: redirectURL
  endpoint:
    path: /redirectURL
    method: GET
    data_selector: redirect
    params: {}
- name: walletRedirection
  endpoint:
    path: /walletRedirection
    method: GET
    data_selector: wallet
    params: {}
- name: calldata
  endpoint:
    path: /calldata
    method: GET
    data_selector: calldata
    params: {}
- name: nftData
  endpoint:
    path: /nftData
    method: GET
    data_selector: nfts
    params: {}
- name: cryptoCurrencyData
  endpoint:
    path: /cryptoCurrencyData
    method: GET
    data_selector: cryptocurrencies
    params: {}
- name: sourceTokenData
  endpoint:
    path: /sourceTokenData
    method: GET
    data_selector: sourceTokens
    params: {}
- name: tokenData
  endpoint:
    path: /tokenData
    method: GET
    data_selector: tokens
    params: {}
- name: order_updates_by_order_id
  endpoint:
    path: ${END_CUSTOMER_ORDER_ID}
    method: GET
- name: order_updates_by_api_key_and_partner_order_id
  endpoint:
    path: ${API_KEY}_${partnerOrderId}
    method: GET
- name: all_orders_updates
  endpoint:
    path: ${API_KEY}
    method: GET
- name: websocket_events
  endpoint:
    path: /websocket/events
    method: GET
- name: order
  endpoint:
    path: /websocket
    method: GET
    data_selector: events
- name: order
  endpoint:
    path: /
    method: GET
    data_selector: data
- name: partner_order
  endpoint:
    path: /
    method: GET
    data_selector: data
- name: all_orders
  endpoint:
    path: /
    method: GET
    data_selector: data
- name: order
  endpoint:
    path: /websocket/orders
    method: GET
    data_selector: data
- name: Create Widget URL
  endpoint:
    path: /api/v2/auth/session
    method: POST
    data_selector: data
    params: {}
- name: order_status
  endpoint:
    path: /reference/end-points
    method: GET
    data_selector: records
- name: Create Widget URL
  endpoint:
    path: /api/v2/auth/session
    method: POST
    data_selector: data
    params: {}
- name: order_status
  endpoint:
    path: /tracking/order/status
    method: GET
    data_selector: status
    params: {}
- name: Get Price
  endpoint:
    path: /api/v1/pricing/public/quotes
    method: GET
    data_selector: response
    params: {}
- name: Bundler
  endpoint:
    path: /api/v2/80001/nJPK7B3ru.dd7f7861-190d-41bd-af80-6877f74b8f44
    method: POST
    data_selector: data
- name: Get Price
  endpoint:
    path: /api/v1/pricing/public/quotes
    method: GET
    params:
      quoteCountryCode: FR
- name: webhook_update
  endpoint:
    path: /webhook/update
    method: POST
    data_selector: status
    params: {}
- name: refresh_access_token
  endpoint:
    path: /partners/api/v2/refresh-token
    method: POST
    data_selector: data
    params: {}
- name: get_orders
  endpoint:
    path: /orders
    method: GET
    data_selector: Buy Order
    params:
      limit: 100
      skip: 0
      filter[productsAvailed]: '["BUY"]'
      filter[status]: COMPLETED
      filter[sortOrder]: desc
      filter[walletAddress]: '0x5CCb2C2EAe7f1f4A49d66f0E2B42580028C555AF'
- name: Get Orders
  endpoint:
    path: /reference/get-orders
    method: GET
- name: Get Order By ID
  endpoint:
    path: /reference/get-order-by-order-id
    method: GET
- name: Get Webhooks
  endpoint:
    path: /reference/get-webhooks
    method: GET
- name: Refresh Access Token
  endpoint:
    path: /reference/refresh-access-token
    method: POST
- name: Create Widget URL
  endpoint:
    path: /reference/create-widget-url
    method: POST
- name: Get Countries
  endpoint:
    path: /reference/get-countries
    method: GET
- name: Get Crypto Currencies
  endpoint:
    path: /reference/get-crypto-currencies
    method: GET
- name: Get Fiat Currencies
  endpoint:
    path: /reference/get-fiat-currencies
    method: GET
- name: Get Price
  endpoint:
    path: /reference/get-price
    method: GET
- name: Verify Wallet Address
  endpoint:
    path: /reference/verify-wallet-address
    method: GET
- name: get_order_by_id
  endpoint:
    path: /partners/api/v2/order/{orderId}
    method: GET
    data_selector: object
    params: {}
- name: refresh_access_token
  endpoint:
    path: /partners/api/v2/refresh-token
    method: POST
    data_selector: data
    params: {}
- name: webhooks
  endpoint:
    path: /partners/api/v2/webhooks
    method: GET
    data_selector: data
    params:
      eventID: ORDER_COMPLETED
      orderID: YOUR_ORDER_ID
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: response
- name: orders
  endpoint:
    path: /partners/api/v2/orders
    method: GET
    params:
      limit: 100
      skip: 0
      filter[productsAvailed]: '["BUY"]'
      filter[status]: COMPLETED
      filter[sortOrder]: desc
      filter[walletAddress]: '0x5CCb2C2EAe7f1f4A49d66f0E2B42580028C555AF'
- name: crypto_currencies
  endpoint:
    path: /crypto-currencies
    method: GET
    data_selector: response
- name: order
  endpoint:
    path: /partners/api/v2/order/{orderId}
    method: GET
    data_selector: data
    params: {}
- name: fiat_currencies
  endpoint:
    path: /fiat/public/v1/currencies/fiat-currencies
    method: GET
    data_selector: response
    params:
      apiKey: your_api_key
- name: webhooks
  endpoint:
    path: /partners/api/v2/webhooks
    method: GET
    data_selector: data
    params:
      eventID: ORDER_COMPLETED
      orderID: YOUR_ORDER_ID
- name: price
  endpoint:
    path: /api/v1/pricing/public/quotes
    method: GET
    data_selector: response
    params:
      partnerApiKey: YOUR_API_KEY
      fiatCurrency: GBP
      cryptoCurrency: ETH
      isBuyOrSell: BUY
      network: ethereum
      paymentMethod: credit_debit_card
      fiatAmount: 100
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: response
- name: crypto_currencies
  endpoint:
    path: /crypto-currencies
    method: GET
    data_selector: response
- name: verify_wallet_address
  endpoint:
    path: /cryptocoverage/api/v1/public/verify-wallet-address
    method: GET
    data_selector: response
    params:
      cryptoCurrency: ETH
      network: mainnet
      walletAddress: YOUR_CUSTOMER_WALLET_ADDRESS
- name: fiat_currencies
  endpoint:
    path: /fiat/public/v1/currencies/fiat-currencies
    method: GET
    data_selector: response
- name: get_price
  endpoint:
    path: /api/v1/pricing/public/quotes
    method: GET
    data_selector: response
    params:
      partnerApiKey: YOUR_API_KEY
      fiatCurrency: GBP
      cryptoCurrency: ETH
      isBuyOrSell: BUY
      network: ethereum
      paymentMethod: credit_debit_card
      fiatAmount: 100
- name: verify_wallet_address
  endpoint:
    path: /cryptocoverage/api/v1/public/verify-wallet-address
    method: GET
    data_selector: response
    params:
      cryptoCurrency: ETH
      network: mainnet
      walletAddress: YOUR_CUSTOMER_WALLET_ADDRESS
notes:
- This API should be called exclusively from the partner’s backend server.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Transak is now officially registered with AUSTRAC as a Digital Currency Exchange
  (DCE)
- No action required—your integration with Transak remains unchanged
- Wire transfers for transactions over $2,000 are now enabled
- Users need to complete a one-time KYC process to use the off-ramp service.
- Users must complete a one-time KYC before off-ramping.
- For primary sales, we don't support flows if the tokenID of the NFT is not known
  before mint.
- Transak One enables onboarding users directly from fiat to any dApp/smart contract.
- First time users need to go through a simple one-time KYC.
- Marketplace contracts that enable trading of NFTs must be ERC-721, ERC-721A and
  ERC-1155 compliant.
- Transak only supports direct sales ('Buy Now'). Auction bids are not supported.
- The KYC experience on the staging environment closely mirrors the experience on
  the production environment.
- All checks performed on the staging environment are dummy checks, and the KYC result
  on staging is always approved.
- The accessToken you generate or refresh is only valid for 7 days and will expire
  after that period.
- Access Token generated is only valid for 7 days.
- At any given time, only one access token is valid.
- No partner fee will be charged to your users if you have not set these percentages!
- If you have not enabled SELL from the settings tab, then you will not get access
  to Transak Off-Ramp.
- Only Transak On-Ramp is available by default for partners if no products are enabled.
- Make sure, you have created a partner account with us before proceeding further.
- Integration Update – Mandatory Migration to API based Transak Widget URL
- Updated 4 months ago
- Integration can be done using Redirect Link, Embed/iframe, Double Embed iframe,
  Transak SDK (React/Vue/Angular/TS)
- 'If the browser permission is set to `Camera: Allow` then our widget works fine.'
- Make sure to add your API key and customise using query parameters.
- Requires setup of API key and session ID in the widget URL
- Requires setup of API key and session ID
- Transak supports deeplinking through the use of the redirectURL query parameter
  to enable seamless navigation after the purchase/sell process is completed.
- Transak supports deeplinking through the use of the redirectURL query parameter
  to enable seamless navigation after the purchase/sell process is completed
- Permission required for Camera Access.
- 'Camera Permission: Please ensure required camera permissions are configured in
  AndroidManifest.xml (Android) & Info.plist (iOS)'
- The partnerOrderId must be passed in the transakConfig to receive order events.
- You need to pass apiKey in order to integrate all other parameters.
- You need to pass the apiKey in order to integrate all other parameters.
- Both `apiKey` and `sessionId` query parameters are mandatory.
- Both apiKey and sessionId query parameters are mandatory.
- Both apiKey and widgetUrl query parameters are mandatory.
- All query parameters marked with an asterisk (*) must be included within the `sessionId`
  query parameter.
- Both `apiKey` and `widgetUrl` query parameters are mandatory.
- Make sure you use the right API key for the right environment!
- Your API key (apiKey) must be passed for parameters to work
- In case of currencies that use a secondary address identifier/tag/memo, it can be
  specified in the addressAdditionalData field.
- Your API key (apiKey) must be passed for parameters to work.
- Make sure you use the right API key for the right environment! If your customization
  options aren't working at all you may be passing the API key incorrectly.
- The KYC Share Token is valid only for 20 minutes.
- Users will not be able change the fiat amount if fiatAmount is passed.
- Users will be able change the fiat amount if defaultFiatAmount is passed.
- Users will be able to edit the wallet address if walletAddress is passed.
- Users will be prompted to enter a wallet address if a valid one is not passed.
- When true, then the user will not see the wallet address entry screen and will not
  be able to edit the address.
- These query parameters only work when colorMode is provided, and its value can be
  either DARK or LIGHT.
- Use the themeColor parameter to set the primary button colour with the HEX code.
- Both apiKey and referrerDomain query parameters are mandatory to create widgetUrl.
- Both `apiKey` and `referrerDomain` query parameters are mandatory to create `widgetUrl`.
- Both apiKey and referrerDomain query parameters are mandatory to create Widget URL.
- In the case of currencies that use a secondary address identifier/tag/memo, it can
  be specified in the addressAdditionalData field.
- Listen to this WebSocket using your backend app otherwise your Access Token will
  get compromised.
- Handles various payment states and order statuses.
- WebSocket events for order processing and payment status
- Uses WebSocket for real-time event subscriptions.
- The webhook payload is sent in an encrypted format. To access it, you must decrypt
  it using your ACCESS_TOKEN which you can generate one using our Refresh Token endpoint.
- Uses Pusher for WebSocket connection events.
- Webhook data payload is encrypted for security purposes.
- Webhook data payload is encrypted for security purposes
- Uses API key for authentication
- Ensure to use the correct environment
- Create Widget URL API must always be called from the partner’s backend server.
- The widgetUrl is valid only for 5 minutes from the time of creation.
- This URL must be used to load the Transak widget.
- KYC is not required in staging. You can use Test Credentials in staging.
- Users are only required to complete KYC once.
- We are allowing 40 requests per IP address in every 10 seconds.
- Only Alpha-2 Country Codes are supported for quoteCountryCode.
- No KYC required in staging environment.
- Users can pay transaction fees using any supported tokens.
- Webhook updates are not self-service and must be requested via the chatbot for security
  and compliance reasons.
- Webhook URLs can be updated only after KYB has been approved.
- 'Easy User Onboarding: Social login, account creation & recovery to seamlessly onboard
  web2 users.'
- 'Gasless transactions: Allowing users to pay transaction fees using any supported
  tokens.'
- Access token is valid for 7 days and will expire after that period.
- Only one access token is valid at a time, even if multiple are generated.
- AccessToken is valid for 7 days and expires after that period.
- At any given time, only one access token is valid, even if it has not expired.
- 'Although fiatAmount and cryptoAmount are both not required together, you need to
  pass at least one of them in all isBuyOrSell: ''BUY'' cases. Our recommendation
  would be to pass fiatAmount in such cases.'
- 'In case of isBuyOrSell: ''SELL'', cryptoAmount is a required param. If fiatAmount
  is passed in such cases, then it will be ignored.'
- quoteCountryCode is an optional param which should be passed in case you want to
  ensure consistency in pricing that user sees on your platform as well as ours.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Check for mandatory parameters.'
- '401 Unauthorized: Invalid API key.'
- '403 Forbidden: Access denied.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Ensure the token is valid.'
- 'PROCESSING: Order is currently being processed.'
- 'EXPIRED: Payment timeframe has expired.'
- 'FAILED: Payment was declined or failed for another reason.'
- 'CANCELLED: User canceled the order.'
- 'COMPLETED: Payment received and crypto sent successfully.'
- 'PENDING_DELIVERY_FROM_TRANSAK: Payment received and being exchanged.'
- 'PAYMENT_DONE_MARKED_BY_USER: User marked payment as done.'
- 'AWAITING_PAYMENT_FROM_USER: Order created but payment not received.'
- 'ON_HOLD_PENDING_DELIVERY_FROM_TRANSAK: Issue in sending fiat to user.'
- 'ORDER_FAILED: When the user failed to make the payment within the timeframe'
- 'ORDER_FAILED: When the order failed because of the card was declined'
- 'ORDER_FAILED: When the user cancels the order'
- 'ORDER_FAILED: When the user failed to make the payment within the timeframe.'
- 'ORDER_FAILED: When the order is failed because of the card decline.'
- 'ORDER_FAILED: When the user cancels the order.'
- '401 Unauthorized: Check API key and permissions'
- Do not use rel="noreferrer" as it prevents the Referer header from being sent and
  breaks runtime domain validation.
- Nesting the Transak iframe inside a third-party iframe is not permitted unless the
  parent site has received explicit approval from Transak.
- API key in parameters is required for certain features.
- '400: Inactive Access Token'
- '401: Unauthorized'
- '400: Required Argument'
- '401: Result'
- '400: Order Not Found'
- '400: Invalid wallet address'
auth_info:
  mentioned_objects:
  - Paymaster
  - Bundlers
  - Smart contracts
client:
  base_url: https://global.transak.com
source_metadata: null
