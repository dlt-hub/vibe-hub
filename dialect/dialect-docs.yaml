resources:
- name: send_alert
  endpoint:
    path: /v2/{appId}/send
    method: POST
    data_selector: '{}'
- name: send_alert
  endpoint:
    path: /v2/{appId}/send
    method: POST
    data_selector: response
    params: {}
- name: get_app_subscribers
  endpoint:
    path: /v2/{appId}/subscribers
    method: GET
    data_selector: subscribers
    params: {}
- name: get_app_topics
  endpoint:
    path: /v2/{appId}/topics
    method: GET
    data_selector: topics
    params: {}
- name: swap
  endpoint:
    path: /api/v0/swap/USDC-SOL
    method: POST
    data_selector: transaction
- name: swap
  endpoint:
    path: /api/v0/swap/USDC-SOL
    method: POST
    data_selector: transaction
- name: list_all_markets
  endpoint:
    path: /api-reference/markets/list-all-markets
    method: GET
- name: list_all_markets_grouped_by_type
  endpoint:
    path: /api-reference/markets/list-all-markets-grouped-by-type
    method: GET
- name: get_historical_position_snapshots
  endpoint:
    path: /api-reference/positions/get-historical-position-snapshots
    method: GET
- name: list_all_market_positions_by_wallet_address
  endpoint:
    path: /api-reference/positions/list-all-market-positions-by-wallet-address
    method: GET
- name: list_all_markets
  endpoint:
    path: /api-reference/markets/list-all-markets
    method: GET
- name: list_all_markets_grouped_by_type
  endpoint:
    path: /api-reference/markets/list-all-markets-grouped-by-type
    method: GET
- name: get_historical_position_snapshots
  endpoint:
    path: /api-reference/positions/get-historical-position-snapshots
    method: GET
- name: list_all_market_positions_by_wallet_address
  endpoint:
    path: /api-reference/positions/list-all-market-positions-by-wallet-address
    method: GET
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: POST
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: notification
    params: {}
- name: positions
  endpoint:
    path: /api/v0/positions/owners
    method: GET
    data_selector: positions
    params: {}
- name: positions
  endpoint:
    path: /api/v0/positions/owners
    method: GET
    data_selector: positions
- name: topics
  endpoint:
    path: /alerts/setup/topics-channels-subscribers
    method: GET
- name: channels
  endpoint:
    path: /alerts/setup/dashboard-introduction
    method: GET
- name: subscribers
  endpoint:
    path: /alerts/integrate-inbox/user-management
    method: GET
- name: subscriptions
  endpoint:
    path: /wallet/dappAddresses
    method: POST
    data_selector: subscription
    params: {}
- name: addresses
  endpoint:
    path: /wallet/addresses
    method: GET
    data_selector: addresses
    params: {}
- name: notificationTypes
  endpoint:
    path: /dapps/notificationTypes
    method: GET
    data_selector: notificationTypes
    params: {}
- name: subscribe_user
  endpoint:
    path: /alerts/integrate-inbox/user-management/subscribe-user
    method: POST
    data_selector: subscription
- name: update_subscription
  endpoint:
    path: /alerts/integrate-inbox/user-management/enabling-disabling-a-subscription
    method: POST
    data_selector: updatedSubscription
- name: get_subscriptions_by_id
  endpoint:
    path: /alerts/integrate-inbox/user-management/getting-subscriptions-by-id
    method: GET
    data_selector: specificSubscription
- name: get_subscriptions_by_wallet
  endpoint:
    path: /alerts/integrate-inbox/user-management/getting-subscriptions-by-wallet
    method: GET
    data_selector: allSubscriptions
- name: delete_subscription
  endpoint:
    path: /alerts/integrate-inbox/user-management/deleting-a-subscription
    method: DELETE
    data_selector: deletedSubscription
- name: add_user_email_address
  endpoint:
    path: /alerts/integrate-inbox/user-management/add-user-email-address
    method: POST
    data_selector: address
- name: verify_address
  endpoint:
    path: /alerts/integrate-inbox/user-management/verify-an-address
    method: POST
    data_selector: verifiedAddress
- name: get_addresses_owned_by_wallet
  endpoint:
    path: /alerts/integrate-inbox/user-management/get-addresses-owned-by-a-wallet
    method: GET
    data_selector: allAddresses
- name: update_address
  endpoint:
    path: /alerts/integrate-inbox/user-management/update-an-address
    method: PUT
    data_selector: updatedAddress
- name: remove_address
  endpoint:
    path: /alerts/integrate-inbox/user-management/remove-an-address
    method: DELETE
    data_selector: deletedAddress
- name: create_notification_type
  endpoint:
    path: /alerts/integrate-inbox/user-management/create-a-new-notification-type
    method: POST
    data_selector: notificationType
- name: update_notification_type
  endpoint:
    path: /alerts/integrate-inbox/user-management/update-an-existing-notification-type
    method: PATCH
    data_selector: patched
- name: get_all_topics
  endpoint:
    path: /alerts/integrate-inbox/user-management/get-all-topics
    method: GET
    data_selector: allNotificationTypes
- name: subscribe_to_topics
  endpoint:
    path: /alerts/integrate-inbox/user-management/subscribe-to-topics
    method: POST
    data_selector: subscribedTopics
- name: unsubscribe_from_topics
  endpoint:
    path: /alerts/integrate-inbox/user-management/unsubscribe-from-topics
    method: DELETE
    data_selector: unsubscribedTopics
- name: apps
  endpoint:
    path: /v2/apps
    method: GET
- name: subscribe
  endpoint:
    path: /v2/subscribe
    method: POST
- name: unsubscribe
  endpoint:
    path: /v2/unsubscribe
    method: POST
- name: history
  endpoint:
    path: /v2/history
    method: GET
- name: history_summary
  endpoint:
    path: /v2/history/summary
    method: GET
- name: mark_read
  endpoint:
    path: /v2/history/read
    method: POST
- name: events
  endpoint:
    path: /webhook/events
    method: POST
    data_selector: events
- name: webhook_events
  endpoint:
    path: /webhook/events
    method: POST
    data_selector: event
- name: events
  endpoint:
    path: /webhook
    method: POST
    data_selector: events
- name: market_based_price_changes
  endpoint:
    path: /webhook/price-events
    method: POST
    data_selector: events
- name: trade_based_price_changes
  endpoint:
    path: /webhook/last-trade-events
    method: POST
    data_selector: events
- name: webhook_events
  endpoint:
    path: /webhook/events
    method: POST
    data_selector: event
    params: {}
- name: trending_token
  endpoint:
    path: /events/trending
    method: GET
    data_selector: events
    params: {}
- name: data_source_monitor
  endpoint:
    path: /alerts/setup/event-detection
    method: GET
    data_selector: sourceData
    params: {}
- name: market_based_price_changes
  endpoint:
    path: /webhook/price-events
    method: POST
    data_selector: events
- name: trade_based_price_changes
  endpoint:
    path: /webhook/last-trade-events
    method: POST
    data_selector: events
- name: trending_token_events
  endpoint:
    path: /events/trending-token
    method: GET
    data_selector: events
    params: {}
- name: historical_snapshots
  endpoint:
    path: /positions/history
    method: GET
    data_selector: data.positions
    params:
      walletAddress: 6JpNV6DK88auwzKVizdeT4Bw3D44sam5GqjcPCJ7y176
      startTime: '2025-10-08T00:00:00Z'
      endTime: '2025-10-10T23:59:59Z'
- name: rewards
  endpoint:
    path: /markets/rewards
    method: GET
    data_selector: rewards
    params: {}
- name: positions_history
  endpoint:
    path: /positions/history
    method: GET
    data_selector: data.positions
    params:
      walletAddress: 6JpNV6DK88auwzKVizdeT4Bw3D44sam5GqjcPCJ7y176
      startTime: '2025-10-08T00:00:00Z'
      endTime: '2025-10-10T23:59:59Z'
- name: markets
  endpoint:
    path: /markets
    method: GET
    data_selector: markets
- name: markets
  endpoint:
    path: /api-reference/markets/list-all-markets
    method: GET
    data_selector: markets
    params: {}
- name: positions
  endpoint:
    path: /api-reference/positions/get-historical-position-snapshots
    method: GET
    data_selector: positions
    params: {}
- name: marketsByType
  endpoint:
    path: /marketsByType
    method: GET
    data_selector: lending, yield, loop, perpetual
- name: markets
  endpoint:
    path: /markets
    method: GET
    data_selector: markets
- name: historical_position_snapshots
  endpoint:
    path: /api/v0/positions/history
    method: GET
    data_selector: data.positions
    params:
      walletAddress: 6JpNV6DK88auwzKVizdeT4Bw3D44sam5GqjcPCJ7y176
      startTime: '2025-06-01T00:00:00Z'
      endTime: '2025-10-09T23:59:59Z'
- name: marketsByType
  endpoint:
    path: /marketsByType
    method: GET
    data_selector: lending
    params: {}
- name: market_positions
  endpoint:
    path: /positions/owners
    method: GET
    data_selector: positions
    params:
      walletAddresses: 6JpNV6DK88auwzKVizdeT4Bw3D44sam5GqjcPCJ7y176
- name: historical_position_snapshots
  endpoint:
    path: /positions/history
    method: GET
    data_selector: data.positions
    params:
      walletAddress: 6JpNV6DK88auwzKVizdeT4Bw3D44sam5GqjcPCJ7y176
      startTime: '2025-06-01T00:00:00Z'
      endTime: '2025-10-09T23:59:59Z'
- name: market_positions
  endpoint:
    path: /positions/owners
    method: GET
    data_selector: positions
    params:
      walletAddresses: 6JpNV6DK88auwzKVizdeT4Bw3D44sam5GqjcPCJ7y176
- name: donate_sol
  endpoint:
    path: /api/actions/donate-sol
    method: POST
    data_selector: transaction
    params: {}
- name: transfer_sol
  endpoint:
    path: /api/actions/transfer-sol
    method: GET
    data_selector: action
    params: {}
- name: donate_sol
  endpoint:
    path: /api/actions/donate-sol
    method: GET
    data_selector: response
    params: {}
- name: transfer_sol
  endpoint:
    path: /api/actions/transfer-sol
    method: POST
    data_selector: response
    params: {}
- name: supported_chains
  endpoint:
    path: /supported-chains
    method: GET
    data_selector: chains
    params: {}
- name: supported_chains
  endpoint:
    path: /supported-chains
    method: GET
    data_selector: chains
    params: {}
- name: send_batch_alerts
  endpoint:
    path: /v2/{appId}/send-batch
    method: POST
    data_selector: alerts
- name: send_batch_alerts
  endpoint:
    path: /v2/{appId}/send-batch
    method: POST
    data_selector: alerts
- name: subscribers
  endpoint:
    path: /v2/{appId}/subscribers
    method: GET
    data_selector: subscribers
    params:
      offset: '0'
      limit: '100'
- name: subscribers
  endpoint:
    path: /v2/{appId}/subscribers
    method: GET
    data_selector: subscribers
    params:
      offset: 0
      limit: 100
- name: app_topics
  endpoint:
    path: /v2/{appId}/topics
    method: GET
    data_selector: items
- name: app_topics
  endpoint:
    path: /v2/{appId}/topics
    method: GET
    data_selector: items
notes:
- Fast Integration - Get notifications working in under 15 minutes with our Dashboard,
  REST API, TypeScript SDK, or pre-built React components. No infrastructure needed.
- Built for Web3 - Wallet-based authentication, multi-chain support, and cross-app
  notifications that let users see alerts from all their apps in one place.
- Fast Integration - Get notifications working in under 15 minutes with our Dashboard,
  REST API, TypeScript SDK, or pre-built React components.
- Each endpoint handles protocol complexity, validation, and optimization
- Authentication token has a 1-year lifetime.
- Users must connect wallet and enable notifications first
- User must connect wallet and enable notifications first
- 'Ensure you imported the CSS: import "@dialectlabs/react-ui/index.css"'
- Uses API key for authentication.
- Users connect their Solana wallet to subscribe to notifications. No email collection
  or password management required.
- Uses wallet-based authentication — no email collection or password management required.
- Wallet-based authentication with JWT tokens
- Uses wallet-based authentication with JWT tokens
- Ensure app registration is complete before managing users
- Users can add channels like email and Telegram for notifications
- Universal Inbox requires manual activation for your project.
- 'No Scheduled Sending: All notifications send immediately'
- 'No Bulk Content: Each channel must be configured individually'
- 'No Templates: Content must be written fresh each time'
- 'No A/B Testing: Single message version per channel'
- Manage user subscriptions, notification preferences, channel configurations, and
  topic organization for your Dialect integration.
- Users can add additional notification channels like email and Telegram.
- Price Change Events are currently in beta.
- Wallets must be explicitly registered to receive last trade events.
- Uses Dialect's open-source monitor library to detect events and turn them into targeted
  notifications
- Client key authorization is required for API authentication
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Historical data is available from October 8, 2025 onwards.
- Rewards are additional incentives provided by DeFi protocols to encourage specific
  actions.
- Your Blink won't render if you don't add the OPTIONS HTTP method for CORS
- Users should still take precaution when executing actions, 'trusted' or otherwise.
- Enable CORS for cross-origin requests
- Your Blink won't render if you don't add the OPTIONS endpoint
errors:
- '202'
- '400'
- '401'
- '403'
- '202: Message sent successfully'
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'No subscribers found: Make sure the user clicked the bell and enabled notifications'
- '401 Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Check API key.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Ensure valid OAuth token'
- '404 Not Found: Resource does not exist'
- 'Internal server error: Log and return an error response'
- 'Internal server error: Check server logs for details'
- '202: Batch messages sent successfully'
- 400 Bad Request
- 401 Unauthorized
- 403 Forbidden
auth_info:
  mentioned_objects:
  - dappAddresses
  - notificationTypes
client:
  base_url: https://alerts-api.dial.to
  auth:
    type: apikey
    location: header
    header_name: x-dialect-api-key
source_metadata: null
