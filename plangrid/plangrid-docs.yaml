resources:
- name: history_events
  endpoint:
    path: /projects//rfis2//history_events
    method: GET
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: comments
  endpoint:
    path: /projects//rfis//comments
    method: GET
- name: user
  endpoint:
    path: /projects//users/
    method: GET
- endpoint:
    status_code: 200
    headers:
    - name: connection
      value: close
    - name: content-type
      value: application/json
    body: '{"uid": "43b198bb-d4f9-c302-9173-271050e424b7", "name": "1000 Issues"}'
- name: work_log
  endpoint:
    data_selector: work_logs
- name: Create Issue List
  endpoint:
    path: /issue_lists
    method: POST
- name: Retrieve Issue Lists
  endpoint:
    path: /issue_lists
    method: GET
- name: Retrieve Issue List
  endpoint:
    path: /issue_lists/{issue_list_uid}
    method: GET
- name: Update Issue List
  endpoint:
    path: /issue_lists/{issue_list_uid}
    method: PUT
- name: Delete Issue List
  endpoint:
    path: /issue_lists/{issue_list_uid}
    method: DELETE
- name: photo
  endpoint:
    path: /photos
    method: GET
    data_selector: records
    params: {}
- name: file_upload
  endpoint:
    path: /uploads
    method: POST
    data_selector: aws_post_form_arguments
    params: {}
- name: field_report_templates
  endpoint:
    path: /projects//field_report_templates
    method: GET
- name: rfi_statuses
  endpoint:
    path: /projects//rfis2/statuses
    method: GET
    data_selector: statuses
    params: {}
- name: snapshots
  endpoint:
    path: /projects//snapshots
    method: GET
- name: document
  endpoint:
    path: /projects/{project_uid}/attachments/{attachment_uid}
    method: GET
- name: photo
  endpoint:
    path: /projects/{project_uid}/photos/{photo_uid}
    method: GET
- name: document
  endpoint:
    path: /documents
    method: GET
    data_selector: records
    params: {}
- name: project
  endpoint:
    path: /projects/{project_uid}
    method: GET
    data_selector: ''
    params: {}
- name: photos
  endpoint:
    path: /projects//photos
    method: GET
- name: documents
  endpoint:
    path: /projects//attachments
    method: GET
- name: comment
  endpoint:
    path: /comments
    method: GET
    data_selector: records
- name: create_project
  endpoint:
    path: /projects
    method: POST
    data_selector: ''
    params:
      add_to_organization: 'true'
- name: upload_document
  endpoint:
    path: /documents
    method: POST
    data_selector: ''
    params:
      auto_version: 'true'
- name: create_sheet_packet
  endpoint:
    path: /sheet_packets
    method: POST
    data_selector: ''
    params:
      include_annotations: 'false'
- name: comments
  endpoint:
    path: /projects//comments
    method: GET
- name: attachments
  endpoint:
    path: /projects/{project_uid}/attachments/uploads
    method: POST
    data_selector: file_upload_info
    params:
      content_type: application/pdf
      name: 0001-060000-1.pdf
      folder: Submittals
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: data
- name: batch
  endpoint:
    path: /batch
    method: POST
- name: project
  endpoint:
    path: /projects/{uid}
    method: GET
- name: create_project
  endpoint:
    path: /projects
    method: POST
    headers:
    - name: Content-Type
      value: application/json
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: data
    params: {}
- name: shareable_object
  endpoint:
    path: /path/to/shareable/object
    method: GET
    data_selector: status
    params: {}
- name: annotations
  endpoint:
    path: /projects//annotations
    method: GET
    data_selector: annotations
    params: {}
- name: snapshots
  endpoint:
    path: /projects//rfis//snapshots
    method: GET
- name: rfi
  endpoint:
    path: /projects/{project_uid}/rfis/{rfi_uid}
    method: GET
    data_selector: ''
    params: {}
- name: photos
  endpoint:
    path: /projects//rfis//photos
    method: GET
- name: answers
  endpoint:
    path: /projects//rfis2/:rfi_uid/answers
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: field_report_type
  endpoint:
    path: /field_report_types
    method: GET
    data_selector: reports
- name: rfi
  endpoint:
    path: /rfis
    method: GET
    data_selector: rfi
- name: photos
  endpoint:
    path: /photos
    method: GET
    data_selector: photos
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: assigned_to
- name: field_reports
  endpoint:
    path: /projects//field_reports
    method: GET
- name: project
  endpoint:
    path: /projects
    method: POST
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: data
    params: {}
- name: rate_limits
  endpoint:
    path: /rate_limits
    method: GET
    data_selector: data
    params: {}
- name: rfi
  endpoint:
    path: /projects//rfis2
    method: POST
    data_selector: null
    params: {}
- name: title
  endpoint:
    path: /titles
    method: GET
    data_selector: records
    params: {}
- name: material
  endpoint:
    path: /materials
    method: GET
    data_selector: records
    params: {}
- name: annotated_sheet
  endpoint:
    path: /sheets/{sheet_uid}/annotations
    method: GET
    data_selector: annotations
    params: {}
- name: project
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: equipment
  endpoint:
    path: /api/equipment
    method: GET
    data_selector: records
    params: {}
- name: documents
  endpoint:
    path: /projects//rfis//attachments
    method: GET
- name: field_reports
  endpoint:
    path: /field_reports
    method: GET
    data_selector: field_reports
    params: {}
- name: group_permissions
  endpoint:
    path: /group_permissions
    method: GET
    data_selector: group_permissions
    params: {}
- name: user_permissions
  endpoint:
    path: /user_permissions
    method: GET
    data_selector: user_permissions
    params: {}
- name: rfis
  endpoint:
    path: /projects//rfis
    method: GET
- uid: 4898bfd4
  label: closed
  color: '#000000'
- name: RFI
  endpoint:
    path: /api/v1/rfis
    method: GET
    data_selector: records
    params: {}
- name: rfi_statuses
  endpoint:
    path: /projects//rfis/statuses
    method: GET
    data_selector: statuses
    params: {}
- name: sheet
  endpoint:
    path: /projects/{project_uid}/sheets/{sheet_uid}
    method: GET
- name: snapshot
  endpoint:
    path: /snapshots
    method: GET
    data_selector: records
    params: {}
- name: sheet_packet
  endpoint:
    path: /projects//sheets/packets/
    method: GET
- name: snapshot
  endpoint:
    path: /projects/{project_uid}/snapshots/{snapshot_uid}
    method: GET
- name: file_upload
  endpoint:
    path: /projects//sheets/uploads//files/
    method: POST
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
- name: sheets
  endpoint:
    path: /sheets
    method: GET
    data_selector: sheets
    params: {}
- name: roles
  endpoint:
    path: /projects//roles
    method: GET
- name: return_message
  endpoint:
    path: /projects//rfis2//return_messages
    method: GET
    data_selector: return_message_data
- name: return_message
  endpoint:
    path: /projects//rfis2//return_messages
    method: POST
- name: Power Collaborator
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: answer
  endpoint:
    path: /projects//rfis2//answers/
    method: PATCH
- name: annotations
  endpoint:
    path: /projects//rfis2//annotations
    method: GET
- name: rfi_answer
  endpoint:
    path: /projects//rfis2//answers
    method: POST
    data_selector: answer_data
    params: {}
- name: sheets
  endpoint:
    path: /projects//sheets
    method: GET
- name: submittal_package_history
  endpoint:
    path: /projects//submittals/packages//history
    method: GET
    data_selector: unknown
    params: {}
- name: photos
  endpoint:
    path: /projects//issues//photos
    method: GET
- name: submittal_package_file_groups
  endpoint:
    path: /projects//submittals/packages//file_groups
    method: GET
- name: version_upload
  endpoint:
    path: /version_upload
    method: POST
    data_selector: uid
    params: {}
- name: file_upload
  endpoint:
    path: /sheets/uploads
    method: POST
    data_selector: uid
    params: {}
- name: task_list
  endpoint:
    path: /task_lists
    method: GET
    data_selector: task_lists
    params: {}
- name: submittal_items
  endpoint:
    path: /projects//submittals/items
    method: GET
- name: submittal_packages
  endpoint:
    path: /projects/{project_uid}/submittals/packages
    method: GET
- name: submittal_package_review
  endpoint:
    path: /projects//submittals/packages//reviews
    method: GET
- name: rate_limits
  endpoint:
    path: /rate_limits
    method: GET
    data_selector: rate_limits
    params: {}
- name: task_lists
  endpoint:
    path: /{project_uid}/issue_lists
    method: GET
- name: task
  endpoint:
    path: /projects/{project_uid}/issues/{issue_uid}
    method: GET
    data_selector: ''
- name: comments
  endpoint:
    path: /projects//issues//comments
    method: GET
- name: users
  endpoint:
    path: /projects//users
    method: GET
- name: user_profile
  endpoint:
    path: /me
    method: GET
- name: issues
  endpoint:
    path: /projects//issues
    method: GET
    data_selector: ''
    params:
      include_annotationless: 'true'
- name: task_list
  endpoint:
    path: /projects/{project_uid}/issue_lists/{issue_list_uid}
    method: GET
    data_selector: ''
    params: {}
- name: user_invite
  endpoint:
    path: /projects//users/invites
    method: POST
- name: user_info
  endpoint:
    path: /users
    method: GET
    data_selector: records
notes:
- The unique identifier is assigned to the record associated with the file.
- Amazon S3 automatically redirects to the webhook URL once the upload is complete.
- The Retrieve Tasks in a Project endpoint will continue to provide a list of tasks
  associated with a sheet.
- To request a list that also includes sheetless tasks, use the include_annotationless
  query parameter with your requests.
- The implicit grant type does not support refresh tokens.
- A new version uploaded through the PlanGrid API must still be manually published
  by project team members that are administrators.
- The 'Uploaded By' column will show the user associated with the API key.
- In keeping up with industry standards, our infrastructure team will transition from
  AWS S3 SigV2 to SigV4 for all file uploads to PlanGrid.
- This transition will affect all file uploads to PlanGrid, including but not limited
  to sheets, documents, and photos.
- All API requests must be made over HTTPS.
- API key should be kept secure and not stored in publicly accessible code.
- Step 3 of the upload process is handled automatically by Amazon S3 if the HTTP client
  is configured to follow redirects.
- Every record stored in PlanGrid is assigned a universally unique identifier (uid)
  that will not change.
- You can safely use the PlanGrid uid when mapping PlanGrid records with another system’s
  records.
- The two exceptions are the RFI status record and permission role record. For RFI
  status records, the unique identifiers are strings with 8 alphanumeric characters.
- The unique identifiers for permission role records are strings with four dashes
  between thirty-two alphanumeric characters but are not universally unique.
- If `?limit` or `?skip` are not positive integers or 0, the PlanGrid API will return
  a 400 with an appropriate message.
- If you’re consistently rate limited, please contact support to see if your rate
  limits can be increased.
- API Key is required for authentication
- Batch requests are supported for multiple endpoints
- At least title and status_uid must be provided.
- Attachments have a total count of 4.
- Snapshots have a total count of 2.
- Comments have a total count of 2.
- Some records may have nulls for created_by and sheet attributes for records pre-2015.
- Polling counts against your per second rate limit but not your daily rate limit.
- A task is represented through the PlanGrid API as a task whose deleted value is
  false and whose current_annotation.deleted is true when archived.
- A 'drawing' is uniquely referenced by name and represents a blueprint across multiple
  versions.
- A 'sheet' is a specific version of a drawing and is what the PlanGrid API returns.
- The API provides a temporary record for tracking the status of uploads.
- The PlanGrid account of your API key must be an admin on the project to invite team
  members.
errors:
- '401 Unauthorized: API key is missing'
- '403 Forbidden: API key is wrong or deactivated'
- '403: Access denied due to insufficient privileges'
- Project does not exist.
- '400: Malformed array or too many requests or no requests'
- '400: Bad Request'
- '429: API rate limit exceeded for developer cffe0ebb-2017-44d6-98d0-ddb0d48a3da8.'
- 'invalid_request: The request is missing a required parameter, includes an invalid
  parameter, includes a parameter more than once, or is otherwise malformed.'
- 'unsupported_response_type: An unsupported response type was requested.'
- 'invalid_scope: An invalid scope was provided.'
- 'server_error: An uncaught exception occurred during authorization.'
auth_info:
  mentioned_objects:
  - access_token
  - refresh_token
  - token_type
  - expires_in
  - scope
client:
  base_url: https://io.plangrid.com
  headers:
    Accept: application/json
    Content-Type: application/json
  auth:
    type: apikey
    flow: authorization_code
    token_url: /oauth/token
    location: header
    header_name: Authorization
    client_id: MY_CLIENT_ID
    client_secret: unique_string_provided_by_PlanGrid
  paginator:
    type: page
    page_size_param: limit
    default_page_size: 50
  resources:
  - name: rfi
    endpoint:
      path: /projects/{project_uid}/rfis2/{rfi_uid}
      method: GET
  - name: role
    endpoint:
      path: /projects/{project_uid}/roles/{role_uid}
      method: GET
      data_selector: ''
      params: {}
source_metadata: null
