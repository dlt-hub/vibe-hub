resources:
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: null
    params: {}
- name: get_transaction
  endpoint:
    path: /v1/transactions/{transaction_id}
    method: GET
    data_selector: null
    params: {}
- name: get_transaction_history
  endpoint:
    path: /v1/transactions/history/{transaction_id}
    method: GET
    data_selector: null
    params: {}
- name: credit_transaction
  endpoint:
    path: /v1/transactions/credit
    method: POST
    data_selector: null
    params: {}
- name: cancel_transaction
  endpoint:
    path: /v1/transactions/cancellation
    method: POST
    data_selector: null
    params: {}
- name: backfill_transaction
  endpoint:
    path: /v1/transactions/backfill
    method: POST
    data_selector: null
    params: {}
- name: adjust_transaction
  endpoint:
    path: /v1/transactions/adjustment
    method: POST
    data_selector: null
    params: {}
- name: get_list_of_transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: null
    params: {}
- name: calculations
  endpoint:
    path: /Tax/v1/Calculations
    method: GET
    data_selector: results
- name: Calculations
  endpoint:
    path: /Tax/v1/Calculations
    method: GET
    data_selector: records
- name: webhook
  endpoint:
    path: /webhook-url
    method: POST
    data_selector: event_type
    params: {}
- name: webhook
  endpoint:
    path: /webhook-url
    method: POST
    data_selector: event_type
    params: {}
- name: single_validation
  endpoint:
    path: /lookup/v2/single-validations
    method: POST
- name: get_result_of_validation
  endpoint:
    path: /lookup/v2/single-validations/{id}
    method: GET
- name: delete_result_of_validation
  endpoint:
    path: /lookup/v2/single-validations/{id}
    method: DELETE
- name: batch_validation
  endpoint:
    path: /lookup/v2/batch-validations
    method: POST
- name: single_validation
  endpoint:
    path: /lookup/v2/single-validations/{id}
    method: GET
    data_selector: results
- name: batch_validation_result
  endpoint:
    path: /lookup/v2/batch-validations/{batch_id}
    method: GET
    data_selector: validation_results
- name: delete_result_of_validation
  endpoint:
    path: /lookup/v2/single-validations/{id}
    method: DELETE
- name: batch_validation
  endpoint:
    path: /lookup/v2/batch-validations
    method: POST
- name: delete_batch_validations
  endpoint:
    path: /lookup/v2/batch-validations/{batch_id}
    method: DELETE
- name: batch_validation
  endpoint:
    path: /lookup/v2/batch-validations/{batch_id}
    method: GET
    data_selector: validation_results
    params: {}
- name: cancel_batch_validation
  endpoint:
    path: /lookup/v2/batch-validations/{batch_id}/cancel
    method: POST
- name: delete_batch_validations
  endpoint:
    path: /lookup/v2/batch-validations/{batch_id}
    method: DELETE
- name: find_tax_identification_number
  endpoint:
    path: /instant-lookup/v1/find
    method: POST
    data_selector: null
    params: {}
- name: cancel_batch_validation
  endpoint:
    path: /lookup/v2/batch-validations/{batch_id}/cancel
    method: POST
- name: request_validation
  endpoint:
    path: /lookup/v1/validations
    method: POST
- name: tax_identification_number
  endpoint:
    path: /instant-lookup/v1/find
    method: POST
- name: get_result_of_validation
  endpoint:
    path: /lookup/v1/validations/{id}
    method: GET
- name: request_validation
  endpoint:
    path: /lookup/v1/validations
    method: POST
- name: batch_validation
  endpoint:
    path: /lookup/v1/validations/batches
    method: POST
- name: validation_result
  endpoint:
    path: /lookup/v1/validations/{id}
    method: GET
- name: batch_validation
  endpoint:
    path: /lookup/v1/validations/batches/{batch_id}
    method: GET
- name: batch_validation
  endpoint:
    path: /lookup/v1/validations/batches
    method: POST
- name: cancel_running_batch_validation
  endpoint:
    path: /lookup/v1/validations/batches/cancel
    method: POST
- name: get_result_of_batch_validation
  endpoint:
    path: /lookup/v1/validations/batches/{batch_id}
    method: GET
- name: cancel_running_batch_validation
  endpoint:
    path: /lookup/v1/validations/batches/cancel
    method: POST
- name: lookup_single_validation_completed
  endpoint:
    path: /reference/lookup-webhook-events
    method: GET
    data_selector: events
    params: {}
- name: lookup_batch_validation_completed
  endpoint:
    path: /reference/lookup-webhook-events
    method: GET
    data_selector: events
    params: {}
- name: lookup_webhook_events
  endpoint:
    path: /reference/lookup-webhook-events
    method: GET
    data_selector: events
    params: {}
- name: single_validation
  endpoint:
    path: /lookup/v2/single-validations
    method: POST
    data_selector: response
- name: batch_validation
  endpoint:
    path: /lookup/v2/batch-validations
    method: POST
    data_selector: response
- name: request_a_calculation
  endpoint:
    path: /tax/v2/calculations
    method: POST
- name: request_a_calculation
  endpoint:
    path: /tax/v2/calculations
    method: POST
- name: onboarding
  endpoint:
    path: /onboarding/v2/companies
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: null
    params: {}
- name: transactions
  endpoint:
    path: /v1/transctions/{operation_id}
    method: GET
    data_selector: attachments
    params: {}
- name: onboarding_companies
  endpoint:
    path: /onboarding/v2/companies
    method: POST
    data_selector: data
    params: {}
- name: onboarding_jobs
  endpoint:
    path: /onboarding/v2/jobs/{job_id}
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: operation_id
    params: {}
- name: transactions
  endpoint:
    path: /v1/transctions/{operation_id}
    method: GET
    data_selector: attachments
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: ''
    params: {}
- name: transaction_history
  endpoint:
    path: /v1/transactions/history/<transaction_id>
    method: GET
    data_selector: history
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: ''
    params:
      decimal_amounts: 'true'
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
- name: transaction_result
  endpoint:
    path: /v1/transactions/{operation_id}
    method: GET
- name: transaction_history
  endpoint:
    path: /v1/transactions/history/{transaction_id}
    method: GET
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
- name: transaction_history
  endpoint:
    path: /v1/transactions/history/<transaction_id>
    method: GET
- name: transaction_with_discount
  endpoint:
    path: /transactions
    method: POST
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: errors
- name: adjust_transaction
  endpoint:
    path: /v1/transactions/adjustment
    method: POST
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: credit_transaction
  endpoint:
    path: /v1/transactions/credit
    method: POST
- name: adjust_transaction
  endpoint:
    path: /v1/transactions/adjustment
    method: POST
- name: credit_transaction
  endpoint:
    path: /v1/transactions/credit
    method: POST
- name: credit_multiple_transactions
  endpoint:
    path: /v1/transactions/adjustment
    method: POST
- name: credit_multiple_transactions
  endpoint:
    path: /v1/transactions/adjustment
    method: POST
    data_selector: items
- name: backfill_transaction
  endpoint:
    path: /v1/transactions/backfill/reported
    method: POST
    data_selector: ''
- name: adjust_transaction
  endpoint:
    path: /v1/transactions/adjustment
    method: POST
    data_selector: ''
- name: backfill_transaction
  endpoint:
    path: /v1/transactions/backfill/reported
    method: POST
    data_selector: null
    params: {}
- name: adjustment_transaction
  endpoint:
    path: /v1/transactions/adjustment
    method: POST
    data_selector: null
    params: {}
- name: cancel_transaction
  endpoint:
    path: /v1/transactions/cancellation
    method: POST
    data_selector: ''
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: transaction_history
  endpoint:
    path: /v1/transactions/history
    method: GET
    data_selector: history
    params: {}
- name: submit_transaction
  endpoint:
    path: /v1/transactions
    method: POST
- name: get_transaction
  endpoint:
    path: /v1/transactions/{transaction_id}
    method: GET
- name: get_transaction_history
  endpoint:
    path: /v1/transactions/history/{transaction_id}
    method: GET
- name: credit_transaction
  endpoint:
    path: /v1/transactions/credit
    method: POST
- name: cancel_transaction
  endpoint:
    path: /v1/transactions/cancellation
    method: POST
- name: backfill_reported_transaction
  endpoint:
    path: /v1/transactions/backfill/reported
    method: POST
- name: adjust_transaction
  endpoint:
    path: /v1/transactions/adjustment
    method: POST
- name: get_list_of_transactions
  endpoint:
    path: /v1/transactions
    method: GET
- name: transactions
  endpoint:
    path: /transactions
    method: POST
- name: transaction
  endpoint:
    path: /v1/transactions
    method: POST
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
- name: submit_transaction
  endpoint:
    path: /v1/transactions
    method: POST
- name: transaction
  endpoint:
    path: /v1/transactions/{operation_id}
    method: GET
- name: transaction
  endpoint:
    path: /v1/transactions/{operation_id}
    method: GET
- name: transaction_history
  endpoint:
    path: /v1/transactions/history/{transaction_id}
    method: GET
- name: transaction_history
  endpoint:
    path: /v1/transactions/history/{transaction_id}
    method: GET
- name: credit_transaction
  endpoint:
    path: /v1/transactions/credit
    method: POST
- name: credit_transaction
  endpoint:
    path: /v1/transactions/credit
    method: POST
- name: cancel_transaction
  endpoint:
    path: /v1/transactions/cancellation
    method: POST
    data_selector: ''
    params: {}
- name: cancel_transaction
  endpoint:
    path: /v1/transactions/cancellation
    method: POST
- name: backfill_reported_transaction
  endpoint:
    path: /v1/transactions/backfill/reported
    method: POST
- name: backfill_reported_transaction
  endpoint:
    path: /v1/transactions/backfill/reported
    method: POST
- name: adjust_transaction
  endpoint:
    path: /v1/transactions/adjustment
    method: POST
    data_selector: ''
    params: {}
- name: adjust_transaction
  endpoint:
    path: /v1/transactions/adjustment
    method: POST
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
- name: onboard_company
  endpoint:
    path: /onboarding/v2/companies
    method: POST
- name: onboard_company
  endpoint:
    path: /onboarding/v2/companies
    method: POST
- name: get_onboarding_job_status
  endpoint:
    path: /onboarding/v2/jobs/{id}
    method: GET
- name: company_details
  endpoint:
    path: /onboarding/v2/companies/{id}
    method: GET
- name: onboarding_job_status
  endpoint:
    path: /onboarding/v2/jobs/{id}
    method: GET
- name: update_company_details
  endpoint:
    path: /onboarding/v2/companies/{id}
    method: PATCH
- name: company_details
  endpoint:
    path: /onboarding/v2/companies/{id}
    method: GET
- name: update_company
  endpoint:
    path: /onboarding/v2/companies/{id}
    method: PUT
- name: Update company details
  endpoint:
    path: /onboarding/v2/companies/{id}
    method: PATCH
- name: companies
  endpoint:
    path: /onboarding/v2/companies
    method: GET
- name: update_company
  endpoint:
    path: /onboarding/v2/companies/{id}
    method: PUT
- name: companies
  endpoint:
    path: /onboarding/v2/companies
    method: GET
- name: delete_company
  endpoint:
    path: /onboarding/v2/companies/{id}
    method: DELETE
- name: delete_company
  endpoint:
    path: /onboarding/v2/companies/{id}
    method: DELETE
- name: individual
  endpoint:
    path: /onboarding/v2/individuals
    method: POST
- name: onboard_individual
  endpoint:
    path: /onboarding/v2/individuals
    method: POST
- name: delete_individual
  endpoint:
    path: /onboarding/v2/individuals/{id}
    method: DELETE
- name: individual_details
  endpoint:
    path: /onboarding/v2/individuals/{id}
    method: GET
- name: individual_details
  endpoint:
    path: /onboarding/v2/individuals/{id}
    method: GET
- name: update_individual_details
  endpoint:
    path: /onboarding/v2/individuals/{id}
    method: PATCH
- name: individual
  endpoint:
    path: /onboarding/v2/individuals/{id}
    method: PATCH
- name: request_validation
  endpoint:
    path: /lookup/v2/single-validations
    method: POST
- name: single_validation
  endpoint:
    path: /lookup/v2/single-validations
    method: POST
- name: request_validation
  endpoint:
    path: /lookup/v1/validations
    method: POST
- name: validation
  endpoint:
    path: /lookup/v1/validations
    method: POST
- name: calculations
  endpoint:
    path: /tax/v2/calculations
    method: POST
- name: calculations
  endpoint:
    path: /tax/v2/calculations
    method: POST
- name: transactions
  endpoint:
    path: /transactions
    method: POST
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: errors
- name: onboarding
  endpoint:
    path: /v1/onboarding
    method: POST
    data_selector: errors
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
notes:
- Fonoa API is protected by Gateway Keeper that regularly keeps a check on incoming
  requests in order to protect the system from DDoS attacks.
- Spamming, i.e., rapid requests from the same IP address or same KEY will result
  in blockage.
- API Management gateway is in place to access the incoming request with a valid subscription
  key.
- Fonoa API is protected by Gateway Keeper that regularly keeps a check on incoming
  requests in order to protect the system from DDoS attacks. Spamming, i.e., rapid
  requests from the same IP address or same KEY will result in blockage.
- The API requires an Ocp-Apim-Subscription-Key for access.
- Fonoa does not normally make multiple requests for the same event on a resource,
  but does not guarantee only-once delivery of Webhooks.
- Webhook requests have a timeout of 30 seconds.
- It is recommended that an API client implements reconciliation functionality for
  those events by falling back to the polling approach for resources for which no
  webhook has been successfully received.
- Sandbox environment allows testing without triggering real tax authority lookups.
- Simulates a wide range of outcomes including successful validations and errors.
- Your account is set up with Fonoa and an API key was provided.
- Use webhook for notifications, polling is optional
- Fonoa uses high precision amounts supporting up to nine decimal places.
- Calculated rounding might differ from your totals if the amounts provided in your
  API request are not already rounded.
- Fonoa’s transaction api utilizes high precision numbers, supporting up to nine decimal
  places, across all invoice value fields.
- Submitting the same transaction repeatedly within a one-minute timeframe will yield
  an identical operation_id for each submission.
- Webhooks are recommended for receiving results instead of polling.
- Processing times may take up to 48 hours depending on the Tax Authority.
- Fonoa does not store the Transactions that fail with synchronous client errors.
- Clients should fix their transaction payload and resubmit the transaction with the
  correct payload.
- Clients may poll for the result in cases when webhooks are not an option.
- Processing times depend on the load of the tax authority system and may take 48
  hours or more.
- Discounts need to have a parameter 'type' put to 'Discount' in the line item details.
- Discount items should have negative signs next to unit_price, net_price, and tax_amount.
- The behaviour may be different per country.
- Adjustment amounts must be negative values.
- 5XX Internal server error. Its not you, its us! We are experiencing a rare and unexpected
  system disruption. Retry again later.
- Submitting an invalid payload will result in a 400 Bad Request with a list of errors
  explaining what exactly went wrong.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- Max of 30 requests per second in demo
- Max of 100 requests per second in production
- '401 Unauthorized: Recheck API key or subscription key'
- '400 - Bad Request: The request was invalid due to invalid model validation. Developers
  are advised to check the response body message field for validation error messages.'
- '401 - Unauthorized: The request was not processed because the authorization credentials
  were not valid or acceptable for this resource.'
- '402: Payment details must be set before this action can be taken.'
- '403: The request was not processed because the authorization credentials do not
  allow access to the requested resource.'
- '404 - Not Found: The resource you attempted to access is invalid.'
- '405: The request method is known by the server but has been disabled and cannot
  be used.'
- '406: The input is not acceptable for this resource or for the field it was supplied
  with.'
- '408: The request timed out internally. Re-attempt the request.'
- '409: The request was rejected because of conflicting data or because it exceeded
  an internal limit.'
- '414: The request URI or headers exceeded the maximum length supported by the server.'
- '420 / 429: The request may be valid but too many requests are being made. Slow
  down.'
- '423: The requested resource is locked temporarily. You should check the status
  of pending jobs.'
- '500 - Internal Server Error: The request has failed internally and may be partially
  completed. These should be generated very infrequently.'
- '500 / 502 / 503 / 504: There is an internal outage in our stack.'
- Connection error or receiving a HTTP response code in the HTTP Client Error (4xx)
  or HTTP Server Error (5xx) range will trigger retries with an exponential back-off.
- '400 Bad Request: Invalid transaction payload'
- '404 Not Found: transaction with ID MY_NONEXISTENT_TRANSCTION_ID not found.'
- '404 Not Found: transaction with ID not found.'
- '200 OK: when transaction ID exists in Fonoa system'
- Some tax authorities may return warnings even for successful transactions.
- 'internal_server_error: An internal error has occurred. Please contact Fonoa with
  the TransactionId for details.'
- '404 Not Found: when transaction ID does not exist in Fonoa system'
- 400 Bad customer request - some of the provided information is incorrect or mandatory
  data is missing. Check the message and errors section of the response for more details.
- 401 Authentication failed - missing or incorrect subscription key
- 429 Too many requests were sent for a short period of time. Try again a bit later.
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- field_not_valid
- Date must be in RFC3339 format.
- 400 Bad customer request - the required field 'id' was not provided.
- 401 Authentication failed - missing or incorrect subscription key.
- 5XX Internal server error. Its not you, its us! We are experiencing a rare and unexpected
  system disruption. Retry again later.
auth_info:
  mentioned_objects: []
client:
  base_url: https://api-demo.fonoa.com
  headers:
    Accept: application/json
source_metadata: null
