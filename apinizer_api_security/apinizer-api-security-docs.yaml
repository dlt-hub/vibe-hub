resources:
- name: api_proxy
  endpoint:
    path: /api/v1/proxies
    method: GET
    data_selector: data
    params: {}
- name: PoC / Test / Minimum Deployment
  endpoint:
    path: /installation/minimum-deployment
    method: GET
    data_selector: deployment
    params: {}
- name: Professional Deployment
  endpoint:
    path: /installation/professional-deployment
    method: GET
    data_selector: deployment
    params: {}
- name: High Available Deployment
  endpoint:
    path: /installation/high-available-deployment
    method: GET
    data_selector: deployment
    params: {}
- name: API Manager
  endpoint:
    path: /apinizer/management/health
    method: GET
- name: worker
  endpoint:
    path: /apinizer/management/health
    method: GET
    data_selector: records
- name: cache
  endpoint:
    path: /apinizer/management/health
    method: GET
    data_selector: records
- name: port_requirements_master_servers
  endpoint:
    path: /access-and-port-requirements-for-installation/port-requirements-of-kubernetes-master-servers
    method: GET
    data_selector: records
    params: {}
- name: port_requirements_worker_servers
  endpoint:
    path: /access-and-port-requirements-for-installation/port-requirements-of-kubernetes-worker-servers
    method: GET
    data_selector: records
    params: {}
- name: port_requirements_apinizer_components
  endpoint:
    path: /access-and-port-requirements-for-installation/port-requirements-of-apinizer-components
    method: GET
    data_selector: records
    params: {}
- name: manager
  endpoint:
    path: /apinizer/management/health
    method: GET
    data_selector: health
    params: {}
- name: worker
  endpoint:
    path: /apinizer/management/health
    method: GET
- name: cache
  endpoint:
    path: /apinizer/management/health
    method: GET
- name: worker
  endpoint:
    path: /apinizer/management/health
    method: GET
- name: cache
  endpoint:
    path: /apinizer/management/health
    method: GET
- name: worker_deployment
  endpoint:
    path: /set/image/deployment/<WORKER_DEPLOYMENT_NAME>
    method: POST
- name: cache_deployment
  endpoint:
    path: /set/image/deployment/<CACHE_DEPLOYMENT_NAME>
    method: POST
- name: portal_deployment
  endpoint:
    path: /set/image/deployment/<PORTAL_DEPLOYMENT_NAME>
    method: POST
- name: integration_deployment
  endpoint:
    path: /set/image/deployment/<INTEGRATION_DEPLOYMENT_NAME>
    method: POST
- name: kubeadm
  endpoint:
    path: /kubeadm/upgrade
    method: GET
    data_selector: records
- name: kubelet
  endpoint:
    path: /kubelet/upgrade
    method: GET
    data_selector: records
- name: kubectl
  endpoint:
    path: /kubectl/upgrade
    method: GET
    data_selector: records
- name: kubeadm
  endpoint:
    path: /kubeadm
    method: POST
    data_selector: upgrade
    params: {}
- name: kubelet
  endpoint:
    path: /kubelet
    method: POST
    data_selector: upgrade
    params: {}
- name: kubectl
  endpoint:
    path: /kubectl
    method: POST
    data_selector: upgrade
    params: {}
- name: Kubernetes Version Upgrade
  endpoint:
    path: /kubernetes/version/upgrade
    method: GET
    data_selector: version_upgrade_steps
    params: {}
- name: replica_set_status
  endpoint:
    path: /rs.status
    method: GET
    data_selector: status
- name: feature_compatibility
  endpoint:
    path: /admin/featureCompatibility
    method: GET
    data_selector: featureCompatibilityVersion
- name: replica_set
  endpoint:
    path: /status
    method: GET
    data_selector: rs.status()
    params: {}
- name: Backup
  endpoint:
    path: /mongodb-database-backup-and-restore-141668024.html
    method: GET
- name: Restore
  endpoint:
    path: /mongodb-database-backup-and-restore-141668024.html
    method: GET
- name: API Traffic By Interval
  endpoint:
    path: /api-traffic-by-interval-89686058.html
    method: GET
- name: API Proxy Creation By Time
  endpoint:
    path: /api-proxy-creation-by-time-39729612.html
    method: GET
- name: API Endpoint Creation By Time
  endpoint:
    path: /api-endpoint-creation-by-time-93356814.html
    method: GET
- name: Report Generator
  endpoint:
    path: /report-generator-16811907.html
    method: GET
- name: project
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: teams
  endpoint:
    path: /teams
    method: GET
- name: roles
  endpoint:
    path: /roles
    method: GET
- name: Token Requests
  endpoint:
    path: /token-requests-26352805.html
- name: Login Records
  endpoint:
    path: /logins-16812303.html
- name: Audit Records
  endpoint:
    path: /audit-records-16811968.html
- name: Test Console Audit Records
  endpoint:
    path: /test-console-audit-records-93356854.html
- name: token_requests
  endpoint:
    path: /token-requests-26352805.html
    method: GET
- name: login_records
  endpoint:
    path: /logins-16812303.html
    method: GET
- name: audit_records
  endpoint:
    path: /audit-records-16811968.html
    method: GET
- name: test_console_audit_records
  endpoint:
    path: /test-console-audit-records-93356854.html
    method: GET
- name: apinizer_log
  endpoint:
    path: /clearing-the-apinizer_log-collection-83755578.html
    method: GET
    data_selector: records
- name: audit_event
  endpoint:
    path: /clearing-the-audit_event-collection-83755581.html
    method: GET
    data_selector: records
- name: history_acl
  endpoint:
    path: /clearing-the-history_acl-collection-83755584.html
    method: GET
    data_selector: records
- name: alert_history
  endpoint:
    path: /clearing-the-alert_history-collection-83755586.html
    method: GET
    data_selector: records
- name: log_tokentraffic
  endpoint:
    path: /clearing-the-log_tokentraffic-collection-83755588.html
    method: GET
    data_selector: records
- name: anomaly_detector_result
  endpoint:
    path: /clearing-the-anomaly_detector_result-collection-83755590.html
    method: GET
    data_selector: records
- name: uptime_monitor_result
  endpoint:
    path: /clearing-the-uptime_monitor_result-collection-83755592.html
    method: GET
    data_selector: records
- name: taskflow_execution_log
  endpoint:
    path: /clearing-the-taskflow_execution_log-collection-83755594.html
    method: GET
    data_selector: records
- name: report_configuration_result
  endpoint:
    path: /clearing-the-report_configuration_result-collection-83755596.html
    method: GET
    data_selector: records
- name: user_token_blackList
  endpoint:
    path: /clearing-the-user_token_blacklist-collection-98108473.html
    method: GET
    data_selector: records
- name: notification_user
  endpoint:
    path: /clearing-the-notification_user-collection-98108479.html
    method: GET
    data_selector: records
- name: apinizer_log
  endpoint:
    path: /clearing-the-apinizer_log-collection-83755578.html
    method: GET
    data_selector: ''
    params: {}
- name: audit_event
  endpoint:
    path: /clearing-the-audit_event-collection-83755581.html
    method: GET
    data_selector: ''
    params: {}
- name: history_acl
  endpoint:
    path: /clearing-the-history_acl-collection-83755584.html
    method: GET
    data_selector: ''
    params: {}
- name: alert_history
  endpoint:
    path: /clearing-the-alert_history-collection-83755586.html
    method: GET
    data_selector: ''
    params: {}
- name: log_tokentraffic
  endpoint:
    path: /clearing-the-log_tokentraffic-collection-83755588.html
    method: GET
    data_selector: ''
    params: {}
- name: anomaly_detector_result
  endpoint:
    path: /clearing-the-anomaly_detector_result-collection-83755590.html
    method: GET
    data_selector: ''
    params: {}
- name: uptime_monitor_result
  endpoint:
    path: /clearing-the-uptime_monitor_result-collection-83755592.html
    method: GET
    data_selector: ''
    params: {}
- name: taskflow_execution_log
  endpoint:
    path: /clearing-the-taskflow_execution_log-collection-83755594.html
    method: GET
    data_selector: ''
    params: {}
- name: report_configuration_result
  endpoint:
    path: /clearing-the-report_configuration_result-collection-83755596.html
    method: GET
    data_selector: ''
    params: {}
- name: user_token_blackList
  endpoint:
    path: /clearing-the-user_token_blacklist-collection-98108473.html
    method: GET
    data_selector: ''
    params: {}
- name: notification_user
  endpoint:
    path: /clearing-the-notification_user-collection-98108479.html
    method: GET
    data_selector: ''
    params: {}
- name: manager
  endpoint:
    path: /apinizer/management/health
    method: GET
- name: worker
  endpoint:
    path: /apinizer/management/health
    method: GET
- name: cache
  endpoint:
    path: /apinizer/management/health
    method: GET
- name: integration
  endpoint:
    path: /apinizer/management/health
    method: GET
- name: portal
  endpoint:
    path: /apinizer/management/health
    method: GET
- name: manager
  endpoint:
    path: /apinizer/management/health
    method: GET
    data_selector: ''
    params: {}
- name: worker
  endpoint:
    path: /apinizer/management/health
    method: GET
    data_selector: ''
    params: {}
- name: cache
  endpoint:
    path: /apinizer/management/health
    method: GET
    data_selector: ''
    params: {}
- name: integration
  endpoint:
    path: /apinizer/management/health
    method: GET
    data_selector: ''
    params: {}
- name: portal
  endpoint:
    path: /apinizer/management/health
    method: GET
    data_selector: ''
    params: {}
- name: document_count
  endpoint:
    path: /<INDEX_KEY>/_doc/_count
    method: GET
- name: check_index_with_where_clause
  endpoint:
    path: /*/_search
    method: GET
- name: find_requests_different_cid
  endpoint:
    path: /_search
    method: GET
- name: find_request_on_specific_interval
  endpoint:
    path: /_search
    method: GET
- name: find_documents_by_correlation_id
  endpoint:
    path: /_search
    method: GET
- name: delete_by_index_name
  endpoint:
    path: /<INDEX_KEY>
    method: DELETE
- name: deleting_indexes_with_given_word
  endpoint:
    path: /*metric*
    method: DELETE
- name: switching_to_new_index_with_rollover
  endpoint:
    path: /apinizer-log-apiproxy-<INDEX_KEY>/_rollover
    method: POST
- name: search_documents_on_specific_index
  endpoint:
    path: /<INDEX_KEY>/_search
    method: GET
- name: search_documents_with_criteria
  endpoint:
    path: /*/_search
    method: GET
- name: document_count
  endpoint:
    path: /<INDEX_KEY>/_doc/_count
    method: GET
- name: search_documents
  endpoint:
    path: /<INDEX_KEY>/_search
    method: GET
- name: update_document
  endpoint:
    path: /<INDEX_KEY>/doc/1
    method: PUT
- name: delete_index
  endpoint:
    path: /<INDEX_KEY>
    method: DELETE
- name: change_read_only_status
  endpoint:
    path: /_all/_settings
    method: PUT
- name: set_replica_number
  endpoint:
    path: /_template/template_genel
    method: PUT
- name: shard_allocation
  endpoint:
    path: /_cluster/settings
    method: PUT
- name: Check Document Count
  endpoint:
    path: /<ELASTICSEARCH_IP>:9200/<INDEX_KEY>/_doc/_count
    method: GET
- name: Check Index with Where Clause
  endpoint:
    path: /<ELASTICSEARCH_IP>:9200/*/_search
    method: GET
- name: Find Requests That Have the Different CID From Response
  endpoint:
    path: /<ELASTICSEARCH_IP>:9200/_search
    method: GET
- name: Search Documents on Specific Index
  endpoint:
    path: /<ELASTICSEARCH_IP>:9200/<INDEX_KEY>/_search
    method: GET
- name: Search Documents by Interval
  endpoint:
    path: /<ELASTICSEARCH_IP>:9200/_search
    method: GET
- name: Updating Index Replication Settings
  endpoint:
    path: /<ELASTICSEARCH_IP>:9200/_settings
    method: PUT
- name: cluster_stats
  endpoint:
    path: /_cluster/stats
    method: GET
- name: cluster_state
  endpoint:
    path: /_cluster/state
    method: GET
- name: flush
  endpoint:
    path: /_flush/synced
    method: POST
- name: snapshot
  endpoint:
    path: /_snapshot
    method: GET
- name: snapshot_details
  endpoint:
    path: /_slm/policy/apinizer-slm-policy-<INDEX_KEY>
    method: GET
- name: detailed_snapshot
  endpoint:
    path: /_snapshot/apinizer-repository-<INDEX_KEY>/apinizer-snapshot-<INDEX_KEY>-2023.03.13-m33h8zcpq_if4swyzn0wrq
    method: GET
- name: delete_snapshot
  endpoint:
    path: /_snapshot/apinizer-repository-<INDEX_KEY>
    method: DELETE
- name: cluster_stats
  endpoint:
    path: /_cluster/stats
    method: GET
- name: cluster_state
  endpoint:
    path: /_cluster/state
    method: GET
- name: flush
  endpoint:
    path: /*log*/_flush/synced
    method: POST
- name: snapshot_info
  endpoint:
    path: /_snapshot
    method: GET
- name: repository_details
  endpoint:
    path: /_slm/policy/apinizer-slm-policy-<INDEX_KEY>
    method: GET
- name: repository_snapshot_status
  endpoint:
    path: /_snapshot/apinizer-repository-<INDEX_KEY>/apinizer-snapshot-<INDEX_KEY>-2023.03.13-m33h8zcpq_if4swyzn0wrq/_status
    method: GET
- name: delete_snapshot_settings
  endpoint:
    path: /_snapshot/apinizer-repository-<INDEX_KEY>
    method: DELETE
- name: Healthcheck
  endpoint:
    path: /apiops/test/healthcheck
    method: GET
    data_selector: null
    params: {}
- name: Secure Test
  endpoint:
    path: /apiops/test/hello/{name}
    method: GET
    data_selector: null
    params: {}
- name: Healthcheck API
  endpoint:
    path: /apiops/test/healthcheck
    method: GET
    data_selector: ''
    params: {}
- name: Secure Test API
  endpoint:
    path: /apiops/test/hello/{name}
    method: GET
    data_selector: ''
    params: {}
- name: Get All Environments
  endpoint:
    path: /apiops/environments/
    method: GET
- name: Get all environments reachable from Project
  endpoint:
    path: /apiops/environments/{projectName}
    method: GET
- name: Get All Environments
  endpoint:
    path: /environments/
    method: GET
    data_selector: resultList
- name: Get all environments reachable from Project
  endpoint:
    path: /environments/{projectName}
    method: GET
    data_selector: resultList
- name: projects
  endpoint:
    path: /apiops/projects/
    method: GET
    data_selector: resultList
- name: Get All Projects
  endpoint:
    path: /apiops/projects/
    method: GET
- name: Get All Certificates
  endpoint:
    path: /apiops/projects/{projectName}/certificates/
    method: GET
- name: Create Certificate
  endpoint:
    path: /apiops/projects/{projectName}/certificates/
    method: POST
- name: Update Certificate
  endpoint:
    path: /apiops/projects/{projectName}/certificates/{certificateName}/
    method: PUT
- name: Delete Certificate
  endpoint:
    path: /apiops/projects/{projectName}/certificates/{certificateName}/
    method: DELETE
- name: Get an existing Certificate
  endpoint:
    path: /apiops/projects/{projectName}/certificates/{certificateName}/
    method: GET
- name: Export an existing Certificate
  endpoint:
    path: /apiops/projects/{projectName}/certificates/{certificateName}/
    method: GET
- name: certificates
  endpoint:
    path: /apiops/projects/admin/certificates/truststore/{environmentName}/
    method: GET
- name: Get All Certificates
  endpoint:
    path: /apiops/projects/{projectName}/certificates/
    method: GET
- name: Create Certificate
  endpoint:
    path: /apiops/projects/{projectName}/certificates/
    method: POST
- name: Update Certificate
  endpoint:
    path: /apiops/projects/{projectName}/certificates/{certificateName}/
    method: PUT
- name: Delete Certificate
  endpoint:
    path: /apiops/projects/{projectName}/certificates/{certificateName}/
    method: DELETE
- name: Get an existing Certificate
  endpoint:
    path: /apiops/projects/{projectName}/certificates/{certificateName}/
    method: GET
- name: Export an existing Certificate
  endpoint:
    path: /apiops/projects/{projectName}/certificates/{certificateName}/
    method: GET
- name: api_proxies
  endpoint:
    path: /apiops/reports/api-proxies
    method: GET
    params:
      includeEndpoints: true or false
- name: certificates_truststore
  endpoint:
    path: /apiops/projects/admin/certificates/truststore/{environmentName}/
    method: GET
- name: api_proxies
  endpoint:
    path: /apiops/reports/api-proxies
    method: GET
    params:
      includeEndpoints: true or false
- name: JMeter Performance Testing
  endpoint:
    path: /APILoadTestingandPerformanceAnalysis/Grafanak6vsApacheJMeter/PerformanceTesting
    method: GET
- name: Increasing Request Count
  endpoint:
    path: /APILoadTestingandPerformanceAnalysis/Grafanak6vsApacheJMeter/IncreasingRequestCount
    method: GET
- name: Maximum Load Testing
  endpoint:
    path: /APILoadTestingandPerformanceAnalysis/Grafanak6vsApacheJMeter/MaximumLoadTesting
    method: GET
- name: Long-Term Load Testing
  endpoint:
    path: /APILoadTestingandPerformanceAnalysis/Grafanak6vsApacheJMeter/Long-TermLoadTesting
    method: GET
- name: Different Request Types Testing
  endpoint:
    path: /APILoadTestingandPerformanceAnalysis/Grafanak6vsApacheJMeter/DifferentRequestTypesTesting
    method: GET
- name: Average Response Time Testing
  endpoint:
    path: /APILoadTestingandPerformanceAnalysis/Grafanak6vsApacheJMeter/AverageResponseTimeTesting
    method: GET
- name: Error Handling Testing
  endpoint:
    path: /APILoadTestingandPerformanceAnalysis/Grafanak6vsApacheJMeter/ErrorHandlingTesting
    method: GET
- name: Scheduler Tests
  endpoint:
    path: /APILoadTestingandPerformanceAnalysis/Grafanak6vsApacheJMeter/SchedulerTests
    method: GET
notes:
- APIs are now everywhere in the digital world! Applications communicate, systems
  share data, devices are constantly connected to each other.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Apinizer is an API Management Platform.
- Apinizer supports WSDL, Swagger and OpenAPI 3.0 standards.
- Apinizer allows creating as many Environments as desired.
- Apinizer allows changing the level of software logs and querying log records via
  management interfaces.
- Apinizer keeps audit records and allows querying them via management interfaces.
- Apinizer offers the opportunity to store and manage logs in several different categories.
- Apinizer allows users to manage settings for how sensitive data is logged.
- Apinizer allows monitoring the access keys issued.
- API Proxy must be installed to be accessible.
- Requires OAuth2 setup.
- Monitor usage to avoid rate limits.
- Requires setup of connected app in Apinizer
- Access to the definition files on Apinizer was restricted to the GET HTTP method
  only. The restriction was removed for other HTTP methods, granting access to the
  backend.
- Access to the definition files on Apinizer was restricted to the GET HTTP method
  only. The restriction was removed for other HTTP methods.
- Client IP checking in browsers is mandatory
- Checking the value of client IP addresses in browsers in the Apinizer Management
  Console has become mandatory.
- When the SSE feature is enabled, the connection pool and retry mechanisms are disabled.
- In old configurations, WebSocket was used as a different port. But now HTTP and
  WebSocket protocols will work on the same port 8091.
- The test console does not yet support these two protocols.
- 'The following policies and settings are currently not supported: WS-Security STS
  Token, mTLS Authentication, Script, Backend API Authentication, API Call, API Proxy
  Group, CORS Settings, Cache Settings, XML/JSON Error Response Template, Load Balancing
  Type, Define Circuit Breaker, Define Client Flow Banner, Define Proxy Server, NTLM
  Settings, and Customize Error Messages.'
- The test console does not yet support gRPC and WebSocket protocols.
- For users updating from the 2024.05.4 patch version, with the security update, client
  IP address value checking has been made mandatory in the Apinizer Management Console.
- Uses Elasticsearch by default for log storage, but can be configured for other systems.
- By default, logs are stored using Elasticsearch, or this default setting can be
  disabled to transfer logs to another system (Syslog, Kafka).
- To make log management more flexible, this setting can be configured on an environment-by-environment
  basis, disabled when necessary, and used for simultaneous logging on multiple log
  connectors (Database, Elasticsearch, Kafka, RabbitMQ, ActiveMQ, Syslog, Webhook).
- Removed the ability to update the app through the app.
- Due to the discontinuation of the Opsgenie product by Jira, integration with this
  product has been removed.
- The API Developer Portal is a communication channel for APIs.
- API access control based on credentials can be implemented.
- It is recommended to decide on how Apinizer will be used before installation.
- Installing Kubernetes Cluster and MongoDB may be required.
- Apinizer does not recommend a single-server installation for a production environment.
- Do not use Test/PoC installations for load testing purposes!
- All default ports can be changed, but in this case operations and permissions must
  be done carefully.
- 'Default Username: admin'
- 'Default User Password: Ask for assistance from the Apinizer support team.'
- If the Gateway type is determined as HTTP+Websocket, it is recommended to enter
  the http2 Enabled parameter as false.
- The Environment name should be the same name as your Namespace in Kubernetes.
- It is recommended to securely backup the dump file to a safe server by your organization's
  system team employees in any case.
- It is strongly recommended to open the ports where Worker environments are opened
  and to perform DNS forwarding to the servers they run on during Apinizer installation.
- If Kubernetes management is done with Apinizer, create a suitable environment name
  and define connectors for logging.
- It is recommended to change your password after your initial login to the Apinizer
  API Manager.
- Apinizer requires a MongoDB database in order to operate.
- If you want to serve the Worker with HTTPS, the port and targetPort values should
  be given as 8443 in the yaml above.
- The Gateway and Cache Server applications will also connect to MongoDB.
- Apinizer operates on Kubernetes, it supports all operating systems that have Kubernetes
  installed.
- It is recommended to review the Release Notes to identify any changes that may conflict
  with the current system configuration and to take necessary precautions accordingly.
- Before updating other Apinizer components, Apinizer Manager must be updated.
- After the Manager updates the database, other Apinizer applications must be fed
  with the current database settings.
- Please contact us for the download link of latest version of Apinizer at support@apinizer.com
  mail address.
- It is recommended to review the Release Notes to identify any changes that may conflict
  with the current system configuration.
- Ensure that the Manager pods on Kubernetes are ready, and then update the other
  components.
- Updating is performed in different ways depending on whether the Kubernetes worker
  servers hosting Apinizer have internet access.
- Each minor version must be upgraded sequentially.
- Containerd version 1.6.x or higher is required for Kubernetes 1.24 and above.
- When upgrading your Kubernetes version, each minor version between the current and
  target versions must be upgraded sequentially.
- If Containerd is currently in use, skip the Containerd Transition Steps.
- Containerd version 1.6.x or higher is required.
- Containerd must be version 1.6 or higher when upgrading to Kubernetes version 1.24.
- Upgrading Kubernetes requires sequential upgrades between minor versions.
- Each MongoDB version upgrade requires a gradual transition through each major version.
- Feature compatibility settings must be updated after each major version upgrade.
- API Design is the job of determining the method/endpoints that an API will have.
- Some API methods may have limitations on usage
- All credentials defined within the project can only be accessed within the project
  for which they are defined.
- If it is desired to access the defined credential from all projects, the definition
  must be made under the administration menu.
- A credential defined under the Administration menu can only be used as read-only
  in the project.
- Auditing allows the authorized users of that project to see the changes in API Proxies
  in that project on each project screen.
- The Personal API Access Token is used for authentication instead of a password when
  accessing the Apinizer Management API.
- The Developer's Guide covers all non-administrative tasks that can be performed
  using the API Manager.
- The Default project cannot be edited or deleted.
- Users with Admin role can access this menu and screens.
- System Settings are only accessible by users with the Admin Role.
- Applies OAuth2 Authentication Policy to REST API via Security Manager Provider
- Some objects like Contact may return nulls in deeply nested fields
- The status of tools running in the system can be checked with the following commands.
- 'MongoDB: Periodically, backups of MongoDB can be taken through Apinizer and it
  is necessary to store this backup in a location outside the server.'
- 'Elasticsearch: At specified intervals, snapshots can be taken through Apinizer
  and stored in the desired location.'
- The Apinizer interface is located by default in the 'apinizer' namespace.
- It is expected that swap is disabled and the disk utilization does not exceed 85%.
- Character set information must be set in the Content-Type header when sending data
  by the client.
- Uses kubeadm for cluster management.
- Client certificates generated by kubeadm expire after 1 year.
- When the hostname of a worker node already running in Kubernetes cluster is changed,
  some configurations and credentials may conflict with the old hostname.
- The server is rebooted if the node has a disk or system error, some problems can
  be fixed after rebooting.
- Althought this is not a problem on it's own, it may be required to get some more
  disk space to prevent OS problems'. Especially if journaling is enabled or replicaset
  uses multi node structure.
- Pod overlay network'ü için kullanılan Flannel dosya ve ayarları sunucuda kalmakta
  ve manuel silinmesi gerekmektedir
- With the release of RHEL 8 and CentOS 8, the docker package was removed from the
  default package repositories, replaced by docker podman and buildah. RedHat has
  decided not to provide official support for Docker. For this reason, these packages
  prevent docker installation.
- In Linux operating systems, "swap" and "selinux", which are usually active, should
  be turned off.
- On Ubuntu servers, changes made to the dns server may not always be reflected in
  resolv.conf or may be skipped. Since Kubernetes by default looks at the cat /etc/resolv.conf
  file on the server after its own internal dns, you should make sure that this file
  is correct.
- The problem above is a problem that occurs when you do not have a trusted certificate
  when taking images from the Private registry.
- Kubernetes does not distribute pods in a balanced way because, by default, pods
  are placed on nodes that are deemed most suitable based on available resources,
  without any specific strategy or limitations.
- When a node in Kubernetes shuts down unexpectedly (Non-Graceful Shutdown), the Kubernetes
  Master detects this situation and takes necessary actions. However, this detection
  process may be delayed because it depends on the timeout parameters of the system.
- When a clone of a worker node already running in a Kubernetes cluster is included
  in the cluster, some configurations and credentials may conflict with the old node.
- This should be done knowing that this operation may cause interruptions in the current
  working environment.
- It needs to be on the correct database for all operations after connection establish
- Excessive disk usage may require more disk space to prevent OS problems.
- Some operations can only be done with interruptions in operations.
- Elasticsearch stopping log writing due to disk space full on Elasticsearch servers.
- 'Error in log searches in Kibana: "x of y shards failed: The data you are seeing
  might be incomplete or wrong. The length of [X] field of [Y] doc of [<INDEX_NAME>]
  index has exceeded [1000000] - maximum allowed to be analyzed for highlighting."'
- 'Warning of "Request cannot be executed; I/O reactor status: STOPPED" on Api Traffic
  pages with no logs'
- 'Elasticsearch exception [type=validation_exception, reason=Validation Failed: 1:
  this action would add [2] total shards, but this cluster currently has [1000]/[1000]
  maximum shards open;]'
- UnassignedShards-CLUSTER-RECOVERED
- Access error in mounting the disk connected with Nas
- To access SSL-protected addresses without verification -k
- for verbose logging -v
- For timeout -m 10
- To send username and make it asks for password -u <USERNAME>
- To getting output --output response.txt
- Apinizer asynchronously stores all request and response messages and metrics in
  the Elasticsearch log database.
- In all our tests, we used internal IPs to reduce network latency and see the real
  impact of Apinizer.
- Monitoring resources via Kubernetes Dashboard was relatively easy, giving instantaneous
  CPU and RAM status of the server.
- However, the drawback of this method was that it was not able to monitor the sources
  in the long term and did not show the details.
- 'API discovery time: 2 hours → 10 minutes'
- 'New developer onboarding: 2 weeks → 3 days'
- 'Repetitive support tickets: 60% reduction'
- 'Code quality: Fewer integration bugs'
- Apinizer provides easy-to-use and high-performance solutions to control the flow
  of incoming requests.
- Effective API traffic control is essential for building robust, fair and scalable
  API services.
- For this reason, the use of JConsole became more useful.
- Web service development is reduced to coding business logic.
- Configuration alone is done for all the remaining needs.
- Apinizer's metric system is built on Micrometer.
- Metrics provide comprehensive visibility into the performance and health of your
  API management infrastructure.
- k6 is an open-source load testing tool used to measure application performance.
- JMeter is an open-source load testing tool used to measure application performance.
- Integrating Apinizer with Prometheus and Grafana provides powerful monitoring capabilities
  for your API management infrastructure.
- Monitoring is necessary for APIs to ensure they return expected responses.
- API Monitoring involves checking whether APIs/Web Services return the expected responses
  in expected times.
- k6 is an open-source load testing tool used to measure application performance
- JMeter is an open-source load testing tool used to measure application performance
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '429 Too Many Requests: Reduce the frequency of API calls.'
- '500 Internal Server Error: Retry after a moment.'
- 'APNZ-2593: Identity information visibility issue.'
- 'APNZ-2599: Control record issue for some objects.'
- Matched = 1 indicates successful installation
- If there is no free access between Kubernetes Control Plane servers
- 'NotReady: Check node status and logs.'
- 'System outage: Ensure alternative nodes are available during upgrades.'
- 'x509 certificate signed by unknown authority: check SSL certificate.'
- 'Unable to update cni config: no networks found in /etc/cni/net.d.'
- kubelet isn’t running or healthy and connection refused.
- 'node.kubernetes.io/unschedulable:NoSchedule: Prevents that node from receiving
  pods due to disk error.'
- 'x509: certificate signed by unknown authority (possibly because of "crypto/rsa:
  verification error" while trying to verify candidate authority certificate "institutionCertificateName-CA")'
- 'Unable to update cni config: no networks found in /etc/cni/net.d'
- 'Client certificates generated by kubeadm expire after 1 year - "internal server
  error. Error Detail: operation: [list] for kind: [pod] with name: [null] in namespace:
  [prod] failed"'
- 'Validation Failed: 1: this action would add [2] total shards, but this cluster
  currently has [1000]/[1000] maximum shards open'
- 'no-key: GPG error: The following signatures couldn''t be verified because the public
  key is not available'
- '400: bad request'
- '401: not authorized for this operation'
- '500: internal error'
- '401 Unauthorized: Token can not be validated!'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://www.apinizer.com/
  auth:
    type: oauth2
source_metadata: null
