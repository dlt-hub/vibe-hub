resources:
- name: websocket
  endpoint:
    path: /haip/websocket
    method: GET
- name: sse
  endpoint:
    path: /haip/sse
    method: GET
- name: http_streaming
  endpoint:
    path: /haip/stream
    method: POST
- name: health_check
  endpoint:
    path: /health
    method: GET
- name: chat
  endpoint:
    path: /chat
    method: POST
- name: audio_chunk
  endpoint:
    path: /haip/websocket
    method: GET
    data_selector: payload
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: messages
  endpoint:
    path: /services/data/v1/messages
    method: POST
    data_selector: records
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: calculator
  endpoint:
    path: /calculator
    method: GET
    data_selector: result
- name: weather
  endpoint:
    path: /weather
    method: GET
    data_selector: location
- name: health
  endpoint:
    path: /health
    method: GET
- name: stats
  endpoint:
    path: /stats
    method: GET
- name: haip-server
  endpoint:
    path: /server
    method: GET
    data_selector: records
    params: {}
- name: haip-server
  endpoint:
    path: /haip-server
    method: GET
    data_selector: data
    params:
      environment: production
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: status
    params: {}
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: status
    params: {}
- name: stats
  endpoint:
    path: /stats
    method: GET
    data_selector: totalConnections
    params: {}
- name: server
  endpoint:
    path: /health
    method: GET
- name: statistics
  endpoint:
    path: /stats
    method: GET
- name: server
  endpoint:
    path: /health
    method: GET
    data_selector: status
- name: websocket
  endpoint:
    path: /haip/websocket
    method: GET
- name: sse
  endpoint:
    path: /haip/sse
    method: GET
- name: http_stream
  endpoint:
    path: /haip/stream
    method: POST
- name: echo
  endpoint:
    path: /echo
    method: POST
    data_selector: result
    params: {}
- name: add
  endpoint:
    path: /add
    method: POST
    data_selector: result
    params: {}
- name: weather
  endpoint:
    path: /weather
    method: POST
    data_selector: result
    params: {}
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: status
- name: detailed_statistics
  endpoint:
    path: /stats
    method: GET
    data_selector: totalConnections
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: status
    params: {}
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /stats
    method: GET
    data_selector: statistics
    params: {}
- name: haip-server
  endpoint:
    path: /haip/
    method: GET
    data_selector: records
- name: haip-server
  endpoint:
    path: /haip/
    method: GET
    data_selector: records
    params: {}
- name: haip-server
  endpoint:
    path: /haip/
    method: GET
    data_selector: records
- name: haip-server
  endpoint:
    path: /haip/
    method: GET
    data_selector: records
    params: {}
- name: haip_server
  endpoint:
    path: /haip/
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: haip-server
  endpoint:
    path: /haip/
    method: GET
    data_selector: records
    params: {}
- name: config_backup
  endpoint:
    path: /your-backup-bucket/
    method: PUT
    data_selector: backup_file
    params: {}
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: status
    params: {}
- name: statistics
  endpoint:
    path: /stats
    method: GET
    data_selector: totalConnections
    params: {}
- name: websocket_connection
  endpoint:
    path: /haip/websocket
    method: GET
    data_selector: token
    params:
      token: <jwt-token>
- name: sse_connection
  endpoint:
    path: /haip/sse
    method: GET
    data_selector: token
    params:
      token: <jwt-token>
- name: http_streaming
  endpoint:
    path: /haip/stream
    method: POST
    data_selector: body
    params:
      Authorization: Bearer <jwt-token>
      Content-Type: application/json
- name: HAIP CLI
  endpoint:
    path: /cli/overview
    method: GET
    data_selector: records
- name: default
  endpoint:
    path: /default
    method: GET
    data_selector: data
    params:
      timeout: 10000
- name: dev
  endpoint:
    path: /dev
    method: GET
    data_selector: data
    params: {}
- name: staging
  endpoint:
    path: /staging
    method: GET
    data_selector: data
    params: {}
- name: prod
  endpoint:
    path: /prod
    method: GET
    data_selector: data
    params: {}
- name: default
  endpoint:
    path: /
    method: GET
    data_selector: servers.default
- name: dev
  endpoint:
    path: /
    method: GET
    data_selector: servers.dev
- name: staging
  endpoint:
    path: /
    method: GET
    data_selector: servers.staging
- name: prod
  endpoint:
    path: /
    method: GET
    data_selector: servers.prod
- name: default
  endpoint:
    path: /
    method: GET
- name: default
  endpoint:
    path: /
    method: GET
- name: default
  endpoint:
    path: /
    method: GET
- name: default
  endpoint:
    path: /
    method: GET
- name: default
  endpoint:
    path: /
    method: GET
- name: default
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: default
  endpoint:
    path: /
    method: GET
- name: dev
  endpoint:
    path: /dev
    method: GET
- name: staging
  endpoint:
    path: /staging
    method: GET
- name: prod
  endpoint:
    path: /prod
    method: GET
notes:
- Secure your connections with JWT tokens and proper validation.
- HAIP allows the user to bring their own authentication.
- This example provides a foundation for building more complex chat applications with
  HAI Protocol.
- Real-time audio streaming with binary frames for efficient audio transmission
- Supports Opus codec for efficient audio compression
- Configurable credit limits for managing message flow and preventing system overload.
- Dynamic credit adjustment based on real-time performance metrics and system capacity.
- Automatic detection of back-pressure conditions with intelligent channel pausing.
- Intelligent message queuing when credits are insufficient to maintain system stability.
- Real-time latency and throughput tracking for optimal flow control decisions.
- Independent flow control for different message types and channels.
- Seamless recovery and credit restoration when back-pressure conditions subside.
- Built-in protection against overwhelming the system with excessive message rates.
- The SDK is available as a TypeScript package with comprehensive type definitions
  and extensive test coverage.
- Package published and available on npm.
- The server URL to connect to supports WebSocket, SSE, and HTTP streaming endpoints.
- Uses JWT for authentication
- Ensure secure storage for tokens
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Real-time messaging requires proper channel setup.
- Always handle connection errors
- Implement retry logic for transient errors
- Monitor error rates and patterns
- Provide user feedback for errors
- Implement graceful degradation
- The server is highly configurable through environment variables or configuration
  objects.
- Server can be configured using environment variables
- Use a strong, unique JWT secret key
- Set NODE_ENV to production for security
- JWT Secret must be set for token validation
- 'JWT Secret: Use a strong, unique secret key'
- 'Node environment: Set NODE_ENV=production'
- Server runs on port 8080
- WebSocket connection uses a JWT token
- New protocol version released
- The server is highly configurable through environment variables, configuration objects,
  and runtime options.
- JWT secret for token validation is required
- Enable CORS middleware by default
- Use environment variables for secrets
- JWT secret is required for token validation
- Supports WebSocket, SSE, and HTTP Streaming protocols.
- The HAIP Server uses JWT (JSON Web Tokens) for authentication, providing secure,
  stateless authentication for all client connections.
- 'Token expiration time (default: 24h)'
- Provides comprehensive monitoring capabilities to track performance, health, and
  usage metrics in real-time.
- Health check endpoint available at /health
- Container exposes port 8080
- The server uses Docker for deployment and requires specific environment variables.
- Health checks available at /health
- Flow control is enabled with specific thresholds
- Requires setup of connected app in api
- Some objects may return nulls in deeply nested fields
- Requires JWT token for authentication
- Ensure proper CORS settings
- JWT token is required for authentication on websocket and SSE endpoints
- The CLI can be configured using environment variables.
- Installation requires Node.js 20.0.0 or higher and npm 9.0.0 or higher.
- Set default server using environment variable HAIP_DEFAULT_URL
- Set default transport using environment variable HAIP_DEFAULT_TRANSPORT
- Set authentication token using environment variable HAIP_DEFAULT_TOKEN
- Check if server is running
- Try different transport
- Set authentication token as an environment variable
- Check server health using health command.
- Use WebSocket as default transport for connection.
- All commands support verbose output with the --verbose flag for debugging.
- Default server URL is ws://localhost:8080
- Default transport type is websocket
- Default authentication token is your-jwt-token
- Uses JWT for authentication â€” requires setup of token
- Uses JWT for authentication â€” requires setup of token.
- Uses JWT for authentication.
- Uses WebSocket transport
- Some settings may require environment-specific configurations
- Use secure connections in production
- Validate server certificates
- Use configuration files for complex settings
- Use environment variables for tokens.
- Create configuration files for complex settings.
- Secure your connections with JWT Bearer tokens.
errors:
- HAIPConnectionError
- HAIPAuthenticationError
- HAIPFlowControlError
- '1000: Normal closure'
- '1001: Going away'
- '1002: Protocol error'
- '1003: Unsupported data'
- '1006: Abnormal closure'
- '1007: Invalid frame payload'
- '1008: Policy violation'
- '1009: Message too big'
- '1011: Internal error'
- 'AUTHENTICATION_FAILED: Please check your authentication token'
- 'CONNECTION_FAILED: Connection failed, attempting to reconnect...'
- 'AUTHENTICATION_FAILED: Check your token'
- 'CONNECTION_FAILED: Will attempt to reconnect'
- 'FLOW_CONTROL: Message was dropped'
- 'TOKEN_EXPIRED: Refresh your token'
- 'INSUFFICIENT_PERMISSIONS: Check your permissions'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'CONNECTION_FAILED: Connection to server failed - Retry with exponential backoff'
- 'AUTHENTICATION_FAILED: JWT token invalid or expired - Refresh token and reconnect'
- 'FLOW_CONTROL: No credits available for sending - Wait for flow update or request
  credits'
- 'PROTOCOL_ERROR: Invalid message format or sequence - Reset connection'
- 'TIMEOUT: Operation timed out - Retry with longer timeout'
- 'RATE_LIMITED: Too many requests - Implement rate limiting'
- 'SERVER_ERROR: Server-side error - Retry with exponential backoff'
- Comprehensive error codes and recovery
- 'JWT expiration time (default: 24h)'
- 'Maximum connections (default: 1000)'
- 'Heartbeat interval in ms (default: 30000)'
- 'Heartbeat timeout in ms (default: 5000)'
- '401 Unauthorized: Check your JWT secret'
- '500 Internal Server Error: Check server logs for details'
- 'Permission Denied: Fix permissions with sudo chown'
- 'JWT Secret Not Set: Set the JWT secret before starting'
- 'Port Already in Use: Check what''s using the port'
- 'JWT Secret Not Set: Set the JWT secret'
- 'Permission Denied: Fix permissions'
- 'WebSocket error: Check connection issues'
- 'Configuration error: Check your configuration settings on startup'
- 'Configuration error: Invalid JWT secret'
- 'Connection error: Max connections exceeded'
- 'WebSocket error: Check connection settings.'
- 'SSE error: Ensure server is sending events.'
- 'INVALID_TOKEN: Invalid or expired JWT token'
- 'MISSING_TOKEN: JWT token is required'
- 'TOKEN_EXPIRED: JWT token has expired'
- '404 Not Found: Verify the requested resource path'
- '503 Service Unavailable: Check if the service is running and accessible.'
- '401 Unauthorized: Check JWT secret'
- '400 Bad Request: Check request format and parameters'
- '404 Not Found: Verify the endpoint path'
- '401 Unauthorized: Recheck JWT token or expiration'
- INVALID_TOKEN - JWT token is invalid or expired
- MISSING_TOKEN - JWT token is required but not provided
- INVALID_MESSAGE - Message format is invalid
- UNSUPPORTED_TYPE - Message type is not supported
- TOOL_NOT_FOUND - Requested tool does not exist
- TOOL_EXECUTION_ERROR - Tool execution failed
- INSUFFICIENT_CREDITS - Not enough credits for the channel
- CHANNEL_PAUSED - Channel is paused
- MISSING_RUN_ID - Run ID is required but not provided
- RUN_NOT_FOUND - Run does not exist
- MAX_RUNS_EXCEEDED - Maximum concurrent runs exceeded
- 'Permission Denied: If you get permission errors when linking globally.'
- Check token format
- Try without authentication first
- '401 Unauthorized: Check token format'
- '401 Unauthorized: Recheck JWT token'
- Connection timeout (milliseconds) is set to 10000
- Reconnect attempts are set to 3
- Reconnect delay is set to 1000
- Reconnect max delay is set to 30000
- 'TIMEOUT: Increase timeout settings'
- 'CONNECTION_REFUSED: Check server address and port'
- '401 Unauthorized: Check token validity'
- 'Connection timeout: Check server URL or network issues.'
- 'Invalid token: Recheck authentication token.'
- 'Connection timeout: Ensure server is running and accessible'
- 'Authentication error: Check token validity'
- '401 Unauthorized: Recheck token validity'
- 'Connection timeout: Check server URL or network'
- 'Connection timeout: Check server URL or network.'
- 'Unauthorized: Ensure valid token is provided.'
- CONNECTION_FAILED
- AUTHENTICATION_FAILED
- PROTOCOL_ERROR
- TIMEOUT
- INVALID_MESSAGE
- TOOL_NOT_FOUND
- RUN_NOT_FOUND
- FLOW_CONTROL_ERROR
- TRANSPORT_ERROR
auth_info:
  mentioned_objects:
  - JWT
  - HAIPUtils
  - OauthToken
  - AuthProvider
  - NamedCredential
  - JWT_SECRET
  - PORT
  - HOST
  - NODE_ENV
  - JwtSecret
  - HAIPToken
  - HAIP_DEFAULT_TOKEN
client:
  base_url: ws://localhost:8080
  auth:
    type: Bearer
    location: header
    header_name: Authorization
source_metadata: null
