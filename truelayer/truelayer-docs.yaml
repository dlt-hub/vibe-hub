resources:
- name: auth_link
  endpoint:
    path: /generatedirectbankauthlink
    method: POST
- name: payments
  endpoint:
    path: /reference/create-payment
    method: POST
- name: accounts
  endpoint:
    path: /reference/getaccounts
    method: GET
- name: payment
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
    params: {}
- name: payout
  endpoint:
    path: /payouts
    method: GET
    data_selector: payouts
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: data
- name: Generate Access Token
  endpoint:
    path: /generate-access-token
    method: POST
    data_selector: access_token
- name: List Merchant Accounts
  endpoint:
    path: /merchant-accounts
    method: GET
    data_selector: merchant_accounts
- name: Create Payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
- name: payouts
  endpoint:
    path: /v3/payouts
    method: POST
    data_selector: id
    params: {}
- name: get_payout
  endpoint:
    path: /v3/payouts/{id}
    method: GET
    data_selector: status
    params: {}
- name: payouts
  endpoint:
    path: /v3/payouts
    method: POST
    data_selector: id
- name: signup_plus_payments
  endpoint:
    path: /signup-plus/payments
    method: GET
    data_selector: data
    params: {}
- name: merchant_account
  endpoint:
    path: /merchant-accounts
    method: GET
- name: create_payment
  endpoint:
    path: /payments
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: data
    params: {}
- name: merchant_account
  endpoint:
    path: /v3/merchant-accounts
    method: GET
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
- name: merchant_account
  endpoint:
    path: /v3/merchant-accounts
    method: GET
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
- name: payment_creation
  endpoint:
    path: /payments
    method: POST
- name: payout
  endpoint:
    path: /v3/payout
    method: POST
- name: merchant_account
  endpoint:
    path: /v3/merchant-accounts
    method: GET
- name: mandate
  endpoint:
    path: /v3/mandates
    method: POST
    data_selector: mandate
    params: {}
- name: merchant_account
  endpoint:
    path: /v3/merchant-accounts
    method: GET
    data_selector: accounts
    params: {}
- name: mandate_creation
  endpoint:
    path: /v3/mandates
    method: POST
    data_selector: mandate
    params: {}
- name: payment_on_mandate
  endpoint:
    path: /v3/payments
    method: POST
    data_selector: payment
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: data
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: merchant_accounts
  endpoint:
    path: /merchant-accounts
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: merchant_account
  endpoint:
    path: /merchant/account
    method: GET
    data_selector: accountDetails
- name: payment_link
  endpoint:
    path: /payment/link
    method: POST
    data_selector: linkDetails
- name: payout
  endpoint:
    path: /payout
    method: POST
    data_selector: payoutDetails
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactionHistory
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: details
  endpoint:
    path: /details
    method: GET
    data_selector: details
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: transactions
- name: report
  endpoint:
    path: /generate/report
    method: GET
    data_selector: report_data
- name: refunds
  endpoint:
    path: /v3/payments/{id}/refunds
    method: POST
- name: Hosted Payments Page
  endpoint:
    path: /payments/v3/customisation
    method: GET
- name: merchant_account_balance_reports
  endpoint:
    path: /merchant_account_balance_reports
    method: GET
    data_selector: reports
    params: {}
- name: merchant_account_transactions_reports
  endpoint:
    path: /merchant_account_transactions_reports
    method: GET
    data_selector: reports
    params: {}
- name: payment_activities_reports
  endpoint:
    path: /payment_activities_reports
    method: GET
    data_selector: reports
    params: {}
- name: merchant_accounts
  endpoint:
    path: /merchant-accounts
    method: GET
    data_selector: data
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: data
    params: {}
- name: merchant_account_balance_reports
  endpoint:
    path: /merchant/account/balance/reports
    method: GET
    data_selector: reports
    params: {}
- name: merchant_account_transactions_reports
  endpoint:
    path: /merchant/account/transactions/reports
    method: GET
    data_selector: reports
    params: {}
- name: payment_activities_reports
  endpoint:
    path: /payment/activities/reports
    method: GET
    data_selector: reports
    params: {}
- name: payments_report
  endpoint:
    path: /payments/report
    method: GET
    data_selector: activities
    params:
      start_date: inclusive
      end_date: exclusive
      version: v1
      revision: rev00
- name: transactions_report
  endpoint:
    path: /transactions/report
    method: GET
    data_selector: transactions
    params:
      start_date: inclusive
      end_date: exclusive
      version: v1
      revision: rev00
- name: merchant_account
  endpoint:
    path: /merchant-accounts
    method: GET
    data_selector: merchant_accounts
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
    data_selector: ''
    params: {}
- name: mandates
  endpoint:
    path: /v3/mandates
    method: POST
    data_selector: ''
    params: {}
- name: merchant_account
  endpoint:
    path: /v3/merchant-account/{id}
    method: GET
    data_selector: ''
    params: {}
- name: list_operating_accounts
  endpoint:
    path: /v3/merchant-account
    method: GET
    data_selector: ''
    params: {}
- name: merchant_accounts
  endpoint:
    path: /merchant-accounts
    method: GET
- name: merchant_accounts
  endpoint:
    path: /v3/merchant-accounts
    method: GET
    data_selector: items
    params: {}
- name: single_merchant_account
  endpoint:
    path: /v3/merchant-accounts/{id}
    method: GET
    data_selector: items
    params: {}
- name: merchant_account_transactions
  endpoint:
    path: /v3/merchant-accounts/{id}/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: transactions
  endpoint:
    path: /v3/merchant-accounts/{id}/transactions
    method: GET
    data_selector: items
    params:
      from: timestamp
      to: timestamp
      cursor: string
      type: string
- name: payment_sources
  endpoint:
    path: /v3/merchant-accounts/{id}/payment-sources
    method: GET
    data_selector: items
    params:
      user_id: string
- name: set_up_account_sweeping
  endpoint:
    path: /v3/merchant-accounts/{merchant_account_id}/sweeping
    method: POST
- name: get_existing_sweeping_settings
  endpoint:
    path: /v3/merchant-accounts/{id}/sweeping
    method: GET
- name: disable_merchant_account_sweeping
  endpoint:
    path: /v3/merchant-accounts/{id}/sweeping
    method: DELETE
- name: balance_notification
  endpoint:
    path: /merchant-account-webhook-specifications
    method: POST
- name: balance_notification
  endpoint:
    path: /merchant-account/webhooks/balance_notification
    method: POST
    data_selector: balance_notification
    params: {}
- name: external_payment_received
  endpoint:
    path: /webhooks/external_payment_received
    method: POST
    data_selector: type
    params: {}
- name: merchant_account
  endpoint:
    path: /v3/merchant-accounts
    method: GET
    data_selector: accounts
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
    data_selector: payment
    params: {}
- name: merchant_accounts
  endpoint:
    path: /v3/merchant-accounts
    method: GET
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
- name: generate_access_token
  endpoint:
    path: /connect/token
    method: POST
    data_selector: access_token
    params:
      grant_type: client_credentials
      scope: payments
- name: payment
  endpoint:
    path: /v3/payments/{id}
    method: GET
    data_selector: id
    params: {}
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
    data_selector: id
- name: payment
  endpoint:
    path: /v3/payments/{id}
    method: POST
    data_selector: id
    params: {}
- name: user
  endpoint:
    path: /payments/user
    method: POST
    data_selector: user
    params: {}
- name: mandates
  endpoint:
    path: /v3/mandates
    method: POST
    data_selector: mandate
- name: payouts
  endpoint:
    path: /v3/payouts
    method: POST
    data_selector: beneficiary
- name: beneficiary
  endpoint:
    path: /beneficiary
    method: POST
    data_selector: beneficiary
    params: {}
- name: provider_selection
  endpoint:
    path: /provider-selection
    method: GET
    data_selector: providers
    params: {}
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
    data_selector: payment
    params: {}
- name: payment_schemes
  endpoint:
    path: /v1/payments/schemes
    method: GET
    data_selector: schemes
- name: payment_creation
  endpoint:
    path: /v3/payments
    method: POST
    data_selector: payment_method
- name: payment_providers
  endpoint:
    path: /v3/payment-providers/search
    method: GET
- name: payment_providers
  endpoint:
    path: /v3/payment-providers/search
    method: POST
    data_selector: items
- name: payment_providers_search
  endpoint:
    path: /v3/payment-providers/search
    method: GET
    data_selector: items
    params: {}
- name: targobank_germany
  endpoint:
    path: /xs2a/targobank-de
    method: GET
    data_selector: items
    params: {}
- name: volksbanken_raiffeisenbanken
  endpoint:
    path: /xs2a/volksbanken-de
    method: GET
    data_selector: items
    params: {}
- name: deutschekredit_germany
  endpoint:
    path: /xs2a/deutschekredit-de
    method: GET
    data_selector: items
    params: {}
- name: payment_provider
  endpoint:
    path: /v3/payment-providers/search
    method: POST
    data_selector: results
    params: {}
- name: single_payment_provider
  endpoint:
    path: /v3/payment-providers/{id}
    method: GET
    data_selector: results
    params: {}
- name: provider_availability
  endpoint:
    path: /provider-availability
    method: GET
    data_selector: data
    params: {}
- name: provider_status
  endpoint:
    path: /webhook/provider_availability
    method: POST
    data_selector: webhook_data
- name: cancel_payment
  endpoint:
    path: /cancel
    method: POST
    data_selector: ''
    params: {}
- name: payment
  endpoint:
    path: /v3/payments/{id}
    method: GET
    data_selector: payment_data
- name: payment
  endpoint:
    path: /v3/payments/{id}
    method: GET
    data_selector: records
    params: {}
- name: failed_payment
  endpoint:
    path: /payments/failed
    method: GET
    data_selector: payments
    params: {}
- name: payment_verification
  endpoint:
    path: /name-and-age-verification
    method: GET
    data_selector: verification_details
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
    data_selector: null
    params: {}
- name: payment_creditable
  endpoint:
    path: /payment_creditable
    method: POST
- name: payment_creditable
  endpoint:
    path: /v3/payments/{id}/actions/cancel
    method: GET
    data_selector: payment_creditable
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: event
    params: {}
- name: payment_authorized
  endpoint:
    path: /payment/authorized
    method: POST
    data_selector: payment_authorized
- name: payment_executed
  endpoint:
    path: /payment/executed
    method: POST
    data_selector: payment_executed
- name: payment_failed
  endpoint:
    path: /payment/failed
    method: POST
    data_selector: payment_failed
- name: payment_settled
  endpoint:
    path: /payment/settled
    method: POST
    data_selector: payment_settled
- name: payment_creditable
  endpoint:
    path: /payment/creditable
    method: POST
    data_selector: payment_creditable
- name: payment_settlement_stalled
  endpoint:
    path: /payment/settlement_stalled
    method: POST
    data_selector: payment_settlement_stalled
- name: external_payment_received
  endpoint:
    path: /payment/external_received
    method: POST
    data_selector: external_payment_received
- name: payment_reversed
  endpoint:
    path: /webhooks/payment_reversed
    method: POST
    data_selector: ''
    params: {}
- name: payment_funds_received
  endpoint:
    path: /webhooks/payment_funds_received
    method: POST
    data_selector: ''
    params: {}
- name: mock-payments-de-embedded
  endpoint:
    path: /mock-payments-de-embedded
    method: GET
    data_selector: records
- name: mock-payments-de-redirect
  endpoint:
    path: /mock-payments-de-redirect
    method: GET
    data_selector: records
- name: mock-payments-de-redirect-additional-input-text
  endpoint:
    path: /mock-payments-de-redirect-additional-input-text
    method: GET
    data_selector: records
- name: mock-payments-es-redirect
  endpoint:
    path: /mock-payments-es-redirect
    method: GET
    data_selector: records
- name: mock-payments-fi-redirect
  endpoint:
    path: /mock-payments-fi-redirect
    method: GET
    data_selector: records
- name: mock-payments-fr-redirect
  endpoint:
    path: /mock-payments-fr-redirect
    method: GET
    data_selector: records
- name: mock-payments-fr-redirect-additional-input
  endpoint:
    path: /mock-payments-fr-redirect-additional-input
    method: GET
    data_selector: records
- name: mock-payments-gb-redirect
  endpoint:
    path: /mock-payments-gb-redirect
    method: GET
    data_selector: records
- name: mock-payments-gb-redirect-unhealthy
  endpoint:
    path: /mock-payments-gb-redirect-unhealthy
    method: GET
    data_selector: records
- name: mock-payments-ie-redirect
  endpoint:
    path: /mock-payments-ie-redirect
    method: GET
    data_selector: records
- name: mock-payments-it-redirect
  endpoint:
    path: /mock-payments-it-redirect
    method: GET
    data_selector: records
- name: mock-payments-lt-redirect
  endpoint:
    path: /mock-payments-lt-redirect
    method: GET
    data_selector: records
- name: mock-payments-nl-redirect
  endpoint:
    path: /mock-payments-nl-redirect
    method: GET
    data_selector: records
- name: mock-payments-no-redirect
  endpoint:
    path: /mock-payments-no-redirect
    method: GET
    data_selector: records
- name: mock-payments-pl-redirect
  endpoint:
    path: /mock-payments-pl-redirect
    method: GET
    data_selector: records
- name: mock-payments-pt-redirect
  endpoint:
    path: /mock-payments-pt-redirect
    method: GET
    data_selector: records
- name: ob-natwest-vrp-sandbox
  endpoint:
    path: /ob-natwest-vrp-sandbox
    method: GET
    data_selector: records
- name: ob-uki-mock-bank-sbox
  endpoint:
    path: /ob-uki-mock-bank-sbox
    method: GET
    data_selector: records
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: data
- name: Web SDK
  endpoint:
    path: /v3/payments
    method: POST
- name: Hosted page
  endpoint:
    path: /v3/payments
    method: POST
- name: Mobile SDKs
  endpoint:
    path: /v3/payments
    method: POST
- name: Web SDK
  endpoint:
    path: /web-sdk
    method: GET
    data_selector: uiSettings
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: data
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: payments
    params: {}
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
- name: hosted_page
  endpoint:
    path: /payments
    method: POST
    data_selector: hosted_page
    params:
      return_uri: http://localhost:8080/redirect.php
      country_code: GB
      language_code: en
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
    data_selector: payment_data
    params: {}
- name: create_payment
  endpoint:
    path: /v3/payments
    method: POST
- name: cancel_payment
  endpoint:
    path: /cancel
    method: POST
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
    data_selector: data
    params: {}
- name: mandates
  endpoint:
    path: /v3/mandates
    method: POST
    data_selector: mandate
    params: {}
- name: mock_bank_app
  endpoint:
    path: /mock-bank-app
    method: GET
    data_selector: redirects
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: data
    params: {}
- name: merchant_accounts
  endpoint:
    path: /merchant-accounts
    method: GET
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params:
      identifier: payment_id
      token: resource_token
      redirectURL: redirect_uri
- name: mandate
  endpoint:
    path: /mandates
    method: POST
    data_selector: data
    params:
      identifier: mandate_id
      token: access_token
      redirectURL: redirect_uri
- name: mandate
  endpoint:
    path: /mandate
    method: POST
    data_selector: result
    params: {}
- name: merchant_account
  endpoint:
    path: /merchant-accounts
    method: GET
    data_selector: data
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: data
- name: mandate
  endpoint:
    path: /v3/mandates
    method: POST
    data_selector: mandates
- name: payment
  endpoint:
    path: /v3/payments
    method: POST
    data_selector: payments
- name: payment_result_screen
  endpoint:
    path: /payment/result/screen
    method: GET
- name: payment_results
  endpoint:
    path: /docs/payment-results
    method: GET
    data_selector: results
    params: {}
- name: mandate_results
  endpoint:
    path: /docs/mandate-results
    method: GET
    data_selector: results
    params: {}
- name: payouts
  endpoint:
    path: /v3/payouts
    method: POST
- name: refunds
  endpoint:
    path: /v3/payments/{id}/refunds
    method: POST
- name: closed_loop_payout
  endpoint:
    path: /v3/payouts
    method: POST
    data_selector: payouts
    params:
      merchant_account_id: ''
      value: ''
      currency: ''
      beneficiary:
        reference: ''
        payment_source_id: ''
        user_id: ''
- name: open_loop_payout
  endpoint:
    path: /v3/payouts
    method: POST
    data_selector: payouts
    params:
      merchant_account_id: ''
      value: ''
      currency: ''
      beneficiary:
        reference: ''
        account_holder_name: ''
        account_identifier: ''
- name: refund
  endpoint:
    path: /v3/payments/{id}/refunds
    method: POST
    data_selector: refunds
    params:
      id: ''
      value: ''
      reference: ''
- name: payout
  endpoint:
    path: /v3/payout
    method: POST
- name: merchant_account
  endpoint:
    path: /v3/merchant-accounts
    method: GET
- name: merchant_account_sweeping
  endpoint:
    path: /v3/merchant-accounts/{id}/sweeping
    method: POST
- name: token
  endpoint:
    path: /token
    method: POST
- name: payouts
  endpoint:
    path: /v3/payouts
    method: POST
    data_selector: data
    params:
      type: payment_source
- name: payouts
  endpoint:
    path: /v3/payouts
    method: POST
    data_selector: null
    params: {}
- name: merchant-accounts
  endpoint:
    path: /v3/merchant-accounts
    method: GET
    data_selector: null
    params: {}
- name: payment_settled
  endpoint:
    path: /payment_settled
    method: GET
    data_selector: null
    params: {}
- name: payouts
  endpoint:
    path: /v3/payouts
    method: POST
    data_selector: null
    params: {}
- name: merchant_accounts
  endpoint:
    path: /v3/merchant-accounts
    method: GET
    data_selector: null
    params: {}
- name: payout_status
  endpoint:
    path: /v3/payouts/{id}
    method: GET
    data_selector: null
    params: {}
- name: payouts
  endpoint:
    path: /v3/payouts
    method: POST
    data_selector: null
    params: {}
- name: get_payout
  endpoint:
    path: /v3/payouts/{id}
    method: POST
    data_selector: null
    params: {}
- name: payout
  endpoint:
    path: /payouts
    method: POST
    data_selector: payout
    params: {}
- name: get_payout
  endpoint:
    path: /payouts/{id}
    method: GET
    data_selector: payout
    params: {}
- name: payout
  endpoint:
    path: /v3/payouts
    method: POST
    data_selector: data
    params: {}
- name: payout
  endpoint:
    path: /make-a-payout
    method: POST
    data_selector: payout
    params: {}
- name: payout_retries
  endpoint:
    path: /payout-retries
    method: GET
- name: refund
  endpoint:
    path: /v3/payments/{payment_id}/refunds
    method: POST
    data_selector: id
    params: {}
- name: single_refund
  endpoint:
    path: /v3/payments/{payment_id}/refunds/{refund_id}
    method: GET
    data_selector: id
    params: {}
- name: multiple_refunds
  endpoint:
    path: /v3/payments/{payment_id}/refunds
    method: GET
    data_selector: items
    params: {}
- name: payout_statuses
  endpoint:
    path: /payout-statuses
    method: GET
    data_selector: statuses
    params: {}
- name: payouts
  endpoint:
    path: /v3/payouts/{id}
    method: GET
    data_selector: ''
    params: {}
- name: refunds
  endpoint:
    path: /v3/payments/{payment_id}/refunds/{refund_id}
    method: GET
    data_selector: ''
    params: {}
- name: transactions
  endpoint:
    path: /v3/merchant-accounts/{id}/transactions
    method: GET
    data_selector: ''
    params: {}
- name: payout_notifications
  endpoint:
    path: /payouts/webhooks
    method: POST
    data_selector: webhook_event
    params: {}
- name: payout_executed
  endpoint:
    path: /payout_executed
    method: POST
    data_selector: data
    params: {}
- name: payout_failed
  endpoint:
    path: /payout_failed
    method: POST
    data_selector: data
    params: {}
- name: payout_failed
  endpoint:
    path: /payout_failed
    method: POST
    data_selector: event
    params: {}
- name: refund_executed
  endpoint:
    path: /refund_executed
    method: POST
    data_selector: records
- name: refund_failed
  endpoint:
    path: /refund_failed
    method: POST
    data_selector: webhook_notification
    params: {}
- name: signup_plus
  endpoint:
    path: /signup-plus
    method: GET
    data_selector: user_data
    params: {}
- name: signup
  endpoint:
    path: /signup
    method: POST
    data_selector: data
    params: {}
- name: merchant_account_sweeping
  endpoint:
    path: /v3/merchant-accounts/{id}/sweeping
    method: POST
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
- name: payments
  endpoint:
    path: /signup-plus/payments
    method: POST
    data_selector: user_information
    params:
      payment_id: '{paymentId}'
- name: refunds
  endpoint:
    path: /payments/{payment_id}/refunds
    method: POST
    data_selector: refund_id
    params: {}
- name: authuri
  endpoint:
    path: /signup-plus/authuri
    method: POST
    data_selector: auth_uri
- name: payments
  endpoint:
    path: /signup-plus/payments
    method: GET
    data_selector: user_data
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: accounts
    params: {}
- name: mandates
  endpoint:
    path: /signup-plus/mandates
    method: GET
    params:
      mandate_id: '{example_mandate_id}'
- name: payment_links
  endpoint:
    path: /v3/payment-links
    method: POST
- name: payment_link
  endpoint:
    path: /v3/payment-links
    method: POST
- name: payment_link
  endpoint:
    path: /v3/payment-links
    method: POST
    data_selector: id
    params: {}
- name: payment_links
  endpoint:
    path: /v3/payment-links/{id}
    method: GET
    data_selector: status
    params: {}
- name: payment_link_payment_created
  endpoint:
    path: /payment_link_payment_created
    method: POST
    data_selector: payment_link_payment_created
    params: {}
- name: payment_link_disabled
  endpoint:
    path: /payment_link_disabled
    method: POST
    data_selector: payment_link_disabled
- name: Variable Recurring Payments
  endpoint:
    path: /vrp
    method: POST
    data_selector: mandate
    params: {}
- name: mandates
  endpoint:
    path: /v3/mandates
    method: POST
- name: payment
  endpoint:
    path: /create-a-payment-on-a-mandate
    method: POST
- name: mandate
  endpoint:
    path: /v3/mandates
    method: POST
    data_selector: mandate
    params: {}
- name: mandate
  endpoint:
    path: /create-mandate
    method: POST
    data_selector: resource_token
    params: {}
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
    data_selector: payment_method
    params: {}
- name: revoke_mandate
  endpoint:
    path: /v3/mandates/{mandate_id}/revoke
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: data
    params: {}
- name: mandate_statuses
  endpoint:
    path: /mandate_statuses
    method: GET
    data_selector: statuses
- name: mandate_failed
  endpoint:
    path: /mandate/failed
    method: POST
    data_selector: type
    params: {}
- name: mandate_revoked
  endpoint:
    path: /mandate/revoked
    method: POST
    data_selector: type
    params: {}
- name: mandate_remitter_changed
  endpoint:
    path: /mandate/remitter_changed
    method: POST
    data_selector: type
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: refunds
  endpoint:
    path: /refunds
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: paymentDetails
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: payoutDetails
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: track_orders
  endpoint:
    path: /track-orders
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: results
  endpoint:
    path: /results
    method: GET
    data_selector: results
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
- name: info
  endpoint:
    path: /data/v1/info
    method: GET
- name: accounts
  endpoint:
    path: /data/v1/accounts
    method: GET
- name: accounts_balance
  endpoint:
    path: /data/v1/accounts/${account_id}/balance
    method: GET
- name: accounts_transactions
  endpoint:
    path: /data/v1/accounts/${account_id}/transactions
    method: GET
- name: cards
  endpoint:
    path: /data/v1/cards
    method: GET
- name: cards_balance
  endpoint:
    path: /data/v1/cards/${account_id}/balance
    method: GET
- name: cards_transactions
  endpoint:
    path: /data/v1/cards/${account_id}/transactions
    method: GET
- name: offline_access
  endpoint:
    path: refresh_token
    method: GET
- name: direct_debits
  endpoint:
    path: /data/v1/accounts/${account_id}/direct_debits
    method: GET
- name: standing_orders
  endpoint:
    path: /data/v1/accounts/${account_id}/standing_orders
    method: GET
- name: verification
  endpoint:
    path: /docs/account-verification-overview
    method: GET
- name: signupplus
  endpoint:
    path: /docs/signup-overview
    method: GET
- name: direct_bank_auth_request
  endpoint:
    path: /v1/authuri
    method: POST
    data_selector: result
    params:
      response_type: code
      client_id: '{$client_id}'
      redirect_uri: https://console.truelayer.com/redirect-page
      scope: accounts offline_access
      provider_id: ob-monzo
      consent_id: '123'
- name: direct_bank_auth
  endpoint:
    path: /v1/authuri
    method: POST
    data_selector: result
    params:
      response_type: code
      client_id: foobarltd-123xyz
      redirect_uri: https://foobarltd.com/truelayer-redirect
      scope: info accounts balance
      state: foo-usr-id-6789hjkl
      consent_id: consent-1234tyui
      data_use_description: We will use your transaction data to determine your suitability
        for a credit card and calcuate your APR
      provider_id: ob-natwest
- name: extend_connection
  endpoint:
    path: /connections/extend
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
- name: extend_connection
  endpoint:
    path: /connections/extend
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: data
    params: {}
- name: action_needed
  endpoint:
    path: /connections/extend
    method: POST
    data_selector: action_needed
    params: {}
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: data
- name: cards
  endpoint:
    path: /cards
    method: GET
    data_selector: data
- name: accounts
  endpoint:
    path: /data/v1/accounts
    method: GET
    data_selector: ''
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: results
- name: account_info
  endpoint:
    path: /info
    method: GET
    data_selector: results
- name: account_details
  endpoint:
    path: /accounts/{account_id}
    method: GET
    data_selector: results
- name: account_balance
  endpoint:
    path: /accounts/{account_id}/balance
    method: GET
    data_selector: results
- name: account_transactions
  endpoint:
    path: /accounts/{account_id}/transactions
    method: GET
    data_selector: results
- name: cards
  endpoint:
    path: /data/v1/cards
    method: GET
    data_selector: results
    params: {}
- name: cards
  endpoint:
    path: /cards
    method: GET
    data_selector: results
- name: card
  endpoint:
    path: /cards/${account_id}
    method: GET
    data_selector: results
- name: card_balance
  endpoint:
    path: /cards/${account_id}/balance
    method: GET
    data_selector: results
- name: card_transactions
  endpoint:
    path: /cards/${account_id}/transactions
    method: GET
    data_selector: results
- name: account
  endpoint:
    path: /data/account
    method: GET
    data_selector: accounts
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: batch_transactions
  endpoint:
    path: /data/v1/batch/transactions
    method: POST
    data_selector: ''
    params: {}
- name: batch_results
  endpoint:
    path: /data/v1/batch/results
    method: GET
    data_selector: ''
    params: {}
- name: batch_results
  endpoint:
    path: /data/v1/batch/results/<your-task-id>
    method: GET
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: results
    params:
      async: 'true'
      webhook_uri: https://your-webhook-uri.com/
- name: results
  endpoint:
    path: /results/{task_id}
    method: GET
    data_selector: results
    params: {}
- name: transactions
  endpoint:
    path: /accounts/{account_id}/transactions
    method: GET
    data_selector: results
    params:
      async: 'true'
      webhook_uri: https://your-webhook-uri.com
- name: balance
  endpoint:
    path: /accounts/{account_id}/balance
    method: GET
    data_selector: results
    params:
      async: 'true'
      webhook_uri: https://your-webhook-uri.com
- name: cards
  endpoint:
    path: /cards
    method: GET
    data_selector: results
    params:
      async: 'true'
      webhook_uri: https://your-webhook-uri.com/
- name: mock_user
  endpoint:
    path: /mock/users
    method: GET
    data_selector: users
- name: merchant_accounts
  endpoint:
    path: /merchant-accounts
    method: GET
    data_selector: data
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: verify_account
  endpoint:
    path: /verification/v1/verify
    method: POST
    data_selector: report
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: user
    params: {}
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: beneficiary
    params: {}
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
    data_selector: payment
    params: {}
- name: payment_providers_search
  endpoint:
    path: /v3/payments-providers/search
    method: POST
    data_selector: providers
    params: {}
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: payouts
- name: refunds
  endpoint:
    path: /refunds
    method: POST
    data_selector: refunds
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: id
- name: refunds
  endpoint:
    path: /refunds
    method: POST
    data_selector: id
- name: merchant_accounts
  endpoint:
    path: /merchant-accounts
    method: GET
    data_selector: items
- name: transactions
  endpoint:
    path: /merchant-accounts/{id}/transactions
    method: GET
    data_selector: items
- name: sweeping
  endpoint:
    path: /merchant-accounts/<merchant_account_ID>/sweeping
    method: POST
- name: payment_token
  endpoint:
    path: /connect/token
    method: POST
    data_selector: access_token
    params:
      grant_type: client_credentials
      scope: payments
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: payment_status
  endpoint:
    path: /payments/{payment_id}/status
    method: GET
    data_selector: data
    params: {}
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
    data_selector: payment
    params: {}
- name: payment_providers
  endpoint:
    path: /v3/payment-providers/search
    method: POST
    data_selector: providers
    params: {}
- name: payment_authorization_flow
  endpoint:
    path: /payments/<payment_id>/authorization-flow
    method: POST
    data_selector: authorization_flow
    params: {}
- name: payment_status
  endpoint:
    path: /payments/{payment_id}
    method: GET
    data_selector: status
    params: {}
- name: providers
  endpoint:
    path: /v2/single-immediate-payments-providers
    method: GET
- name: initiate_payment
  endpoint:
    path: /v2/single-immediate-payments/{id}
    method: GET
- name: provider_selection
  endpoint:
    path: /build-a-provider-selection-screen
    method: GET
    data_selector: providers
    params: {}
- name: initiate_payment
  endpoint:
    path: /initiate-a-payment
    method: POST
    data_selector: payment_response
    params: {}
- name: handle_payment_response
  endpoint:
    path: /handle-the-payment-response
    method: POST
    data_selector: response_status
    params: {}
- name: webhook_notifications
  endpoint:
    path: /set-up-webhook-notifications
    method: POST
    data_selector: webhook_status
    params: {}
- name: check_payment_status
  endpoint:
    path: /check-payment-status
    method: GET
    data_selector: payment_status
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: merchant_accounts
  endpoint:
    path: /merchant-accounts
    method: GET
    data_selector: data
    params: {}
- name: single_immediate_payments_providers
  endpoint:
    path: /v2/single-immediate-payments-providers
    method: GET
    data_selector: providers
- name: providers
  endpoint:
    path: /providers
    method: GET
    data_selector: providers
- name: providers
  endpoint:
    path: /v2/single-immediate-payments-providers
    method: GET
    data_selector: results
    params:
      client_id: myclient-123456
      auth_flow_type: redirect,embedded
      account_type: sort_code_account_number,iban
      additional_input_type: text,select
      currency: GBP,EUR
- name: single_immediate_payments_providers
  endpoint:
    path: /v2/single-immediate-payments-providers
    method: GET
    data_selector: results
    params: {}
- name: single_immediate_payments_providers
  endpoint:
    path: /single-immediate-payments-providers
    method: GET
    data_selector: results
- name: single_immediate_payment
  endpoint:
    path: /v2/single-immediate-payment-initiation-requests
    method: POST
    data_selector: result.single_immediate_payment
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: payment_status
  endpoint:
    path: /payments/{payment_id}/status
    method: GET
    data_selector: data
    params: {}
- name: handle_payment_response
  endpoint:
    path: /handle-the-payment-response
    method: POST
    data_selector: auth_flow
    params: {}
- name: webhook_notifications
  endpoint:
    path: /webhook_notifications
    method: POST
    data_selector: event_body
    params: {}
- name: payment_status
  endpoint:
    path: /payments/status
    method: GET
    data_selector: status
    params: {}
- name: payment_status
  endpoint:
    path: /v2/single-immediate-payments/{payment_id}
    method: GET
    data_selector: result
    params: {}
- name: mock_uk_payments_redirect_flow
  endpoint:
    path: /v2/single-immediate-payments-providers
    method: GET
    data_selector: providers
- name: mock_payments_es_redirect
  endpoint:
    path: /providers/mock-payments-es-redirect
    method: GET
    data_selector: provider_id
    params: {}
- name: mock_payments_de_embedded
  endpoint:
    path: /providers/mock-payments-de-embedded
    method: GET
    data_selector: provider_id
    params: {}
- name: withdrawals
  endpoint:
    path: /v1/users/withdrawals
    method: POST
- name: sweep
  endpoint:
    path: /v1/sweep
    method: POST
- name: deposits
  endpoint:
    path: /v1/users/deposits/create_deposit
    method: POST
    data_selector: response
    params: {}
- name: withdrawals_closed_loop
  endpoint:
    path: /v1/users/withdrawals
    method: POST
    data_selector: response
    params: {}
- name: withdrawals_open_loop
  endpoint:
    path: /v1/withdrawals
    method: POST
    data_selector: response
    params: {}
- name: sweep
  endpoint:
    path: /v1/sweep
    method: POST
    data_selector: response
    params: {}
- name: providers
  endpoint:
    path: /deposits/providers
    method: GET
    data_selector: results
    params:
      auth_flow_type: redirect,embedded
      account_type: sort_code_account_number,iban
      additional_input_type: text,select
      currency: GBP,EUR
- name: create_deposit
  endpoint:
    path: /users/deposits
    method: POST
    data_selector: results
- name: deposits
  endpoint:
    path: /v1/users/deposits
    method: POST
    data_selector: result.deposit
    params: {}
- name: get_deposit
  endpoint:
    path: /v1/users/{userId}/deposits/{depositId}
    method: GET
    data_selector: result.deposit
    params: {}
- name: withdrawals
  endpoint:
    path: /v1/users/withdrawals
    method: POST
    data_selector: response
    params: {}
- name: closed_loop_withdrawal
  endpoint:
    path: /v1/users/{user_id}/accounts/{account_id}/withdrawals/{transaction_id}
    method: GET
    data_selector: result
- name: open_loop_withdrawal
  endpoint:
    path: /v1/withdrawals/{transaction_id}
    method: GET
    data_selector: result
- name: create_open_loop_withdrawal
  endpoint:
    path: /v1/withdrawals
    method: POST
- name: verification
  endpoint:
    path: /v1/verification
    method: POST
    data_selector: result
- name: withdrawals
  endpoint:
    path: /v1/withdrawals
    method: POST
    data_selector: result
- name: user_accounts
  endpoint:
    path: /v1/users/${userId}/accounts
    method: GET
    data_selector: results
- name: account_balance
  endpoint:
    path: /v1/balances
    method: GET
    data_selector: results
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: results
    params:
      from: timestamp
      to: timestamp
      type: string
      currency: ISO 4217 Currency Code String
- name: sweep
  endpoint:
    path: /v1/sweep
    method: POST
    data_selector: null
    params: {}
- name: automated_account_sweeping
  endpoint:
    path: /v1/sweep
    method: GET
    data_selector: results
- name: disable_automated_account_sweeping
  endpoint:
    path: /v1/sweep/remove
    method: POST
    data_selector: null
- name: test_signature
  endpoint:
    path: /v1/test-signature
    method: POST
- name: webhook_notifications
  endpoint:
    path: /webhook/notifications
    method: POST
    data_selector: webhook
    params: {}
- name: deposit_initiated
  endpoint:
    path: /webhooks/deposit_initiated
    method: POST
    data_selector: event_body
    params: {}
- name: deposit_settled
  endpoint:
    path: /webhooks/deposit_settled
    method: POST
    data_selector: event_body
    params: {}
- name: external_deposit_received
  endpoint:
    path: /webhooks/external_deposit_received
    method: POST
    data_selector: event_body
    params: {}
- name: withdrawal_authorised
  endpoint:
    path: /webhooks/withdrawal_authorised
    method: POST
    data_selector: event_body
    params: {}
- name: withdrawal_submitted
  endpoint:
    path: /webhooks/withdrawal_submitted
    method: POST
    data_selector: event_body
    params: {}
- name: withdrawal_settled
  endpoint:
    path: /webhooks/withdrawal_settled
    method: POST
    data_selector: event_body
    params: {}
- name: withdrawal_rejected
  endpoint:
    path: /webhooks/withdrawal_rejected
    method: POST
    data_selector: event_body
    params: {}
- name: withdrawal_failed
  endpoint:
    path: /webhooks/withdrawal_failed
    method: POST
    data_selector: event_body
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: payments
  endpoint:
    path: /v3/payments
    method: POST
    data_selector: data
    params: {}
- name: payment_creation
  endpoint:
    path: /create-payment
    method: POST
    data_selector: payment
    params: {}
- name: credential
  endpoint:
    path: /delete
    method: DELETE
- name: generate_debug_id
  endpoint:
    path: /api/debug
    method: POST
- name: delete_debug_id
  endpoint:
    path: /api/debug
    method: DELETE
- name: create_payment
  endpoint:
    path: /v3/payments
    method: POST
- name: start_authorization_flow
  endpoint:
    path: /v3/payments/{id}/authorization-flow
    method: POST
- name: provider_selection
  endpoint:
    path: /v3/payments/{id}/authorization-flow/actions/provider-selection
    method: POST
- name: submit_scheme_selection
  endpoint:
    path: /v3/payments/{id}/authorization-flow/actions/scheme-selection
    method: POST
- name: submit_scheme_selection
  endpoint:
    path: /{id}/authorization-flow/actions/scheme-selection
    method: POST
    data_selector: object
- name: submit_form
  endpoint:
    path: /v3/payments/{id}/authorization-flow/actions/form
    method: POST
    data_selector: response
    params: {}
- name: submit_consent
  endpoint:
    path: /v3/payments/{id}/authorization-flow/actions/consent
    method: POST
- name: cancel_payment
  endpoint:
    path: /v3/payments/{id}/actions/cancel
    method: POST
- name: payment
  endpoint:
    path: /v3/payments/{id}
    method: GET
    data_selector: Payment
- name: payment_refund
  endpoint:
    path: /v3/payments/{id}/refunds
    method: POST
    data_selector: object
    params: {}
- name: payment_refunds
  endpoint:
    path: /v3/payments/{id}/refunds
    method: GET
    data_selector: items
- name: get_payment_refund
  endpoint:
    path: /v3/payments/{payment_id}/refunds/{refund_id}
    method: GET
- name: webhook_payments
  endpoint:
    path: /reference/webhook-payments
    method: POST
    data_selector: payload
- name: webhook_refunds
  endpoint:
    path: /reference/webhook-refunds
    method: POST
    data_selector: payload
- name: webhook_merchant_accounts
  endpoint:
    path: /reference/webhook-merchant-accounts
    method: POST
    data_selector: payload
- name: webhook_mandates
  endpoint:
    path: /reference/webhook-mandates
    method: POST
    data_selector: payload
- name: webhook_identity_authorization_expired
  endpoint:
    path: /reference/webhook-identity-authorization-expired
    method: POST
    data_selector: payload
- name: refund_webhooks
  endpoint:
    path: /webhook/refunds
    method: POST
- name: payment_link
  endpoint:
    path: /v3/payment-links
    method: POST
    data_selector: object
- name: payment_link
  endpoint:
    path: /v3/payment-links/{id}
    method: GET
- name: payments
  endpoint:
    path: /v3/payment-links/{id}/payments
    method: GET
    data_selector: items
    params:
      limit: '25'
- name: payment_link_webhooks
  endpoint:
    path: /reference/webhook-payment-links
    method: POST
    data_selector: payload
- name: payments_providers
  endpoint:
    path: /v3/payments-providers/search
    method: POST
- name: payments_provider
  endpoint:
    path: /v3/payments-providers/{id}
    method: GET
    data_selector: object
    params: {}
- name: payout
  endpoint:
    path: /v3/payouts
    method: POST
    data_selector: object
    params:
      merchant_account_id: uuid
      amount_in_minor: integer
      currency: string
      beneficiary: required
      scheme_selection: string
      sub_merchants: object
      metadata: object
- name: payouts
  endpoint:
    path: /v3/payouts
    method: POST
- name: payout
  endpoint:
    path: /v3/payouts/{id}
    method: GET
- name: merchant_accounts
  endpoint:
    path: /v3/merchant-accounts
    method: GET
    data_selector: items
- name: merchant_account
  endpoint:
    path: /merchant-accounts/{id}
    method: GET
    data_selector: object
- name: transactions
  endpoint:
    path: /v3/merchant-accounts/{id}/transactions
    method: GET
    data_selector: items
    params:
      from: YYYY-MM-DDTHH:MM:SS±HHMM
      to: YYYY-MM-DDTHH:MM:SS±HHMM
- name: merchant_account_sweeping
  endpoint:
    path: /v3/merchant-accounts/{id}/sweeping
    method: POST
- name: merchant_accounts
  endpoint:
    path: /merchant-accounts/{id}/sweeping
    method: DELETE
- name: sweeping_settings
  endpoint:
    path: /merchant-accounts/{id}/sweeping
    method: GET
    data_selector: '200'
    params:
      id: uuid
- name: payment_sources
  endpoint:
    path: /v3/merchant-accounts/{id}/payment-sources
    method: GET
    data_selector: items
    params:
      user_id: string
- name: merchant_accounts
  endpoint:
    path: /reference/webhook-merchant-accounts
    method: POST
    data_selector: payload
- name: mandate
  endpoint:
    path: /v3/mandates
    method: POST
    data_selector: mandate
    params: {}
- name: mandates
  endpoint:
    path: /v3/mandates
    method: POST
- name: mandates
  endpoint:
    path: /mandates
    method: GET
    data_selector: items
    params:
      limit: '25'
- name: mandate
  endpoint:
    path: /v3/mandates/{id}
    method: GET
    data_selector: Mandate
    params: {}
- name: mandate_authorization_flow
  endpoint:
    path: /v3/mandates/{id}/authorization-flow
    method: POST
- name: submit_consent
  endpoint:
    path: /v3/mandates/{id}/authorization-flow/actions/consent
    method: POST
- name: provider_selection
  endpoint:
    path: /v3/mandates/{id}/authorization-flow/actions/provider-selection
    method: POST
- name: mandates
  endpoint:
    path: /v3/mandates/{id}/authorization-flow/actions/provider-selection
    method: POST
- name: revoke_mandate
  endpoint:
    path: /v3/mandates/{id}/revoke
    method: POST
- name: revoke_mandate
  endpoint:
    path: /v3/mandates/{id}/revoke
    method: POST
- name: confirm_funds
  endpoint:
    path: /v3/mandates/{id}/funds
    method: GET
    data_selector: confirmed
    params: {}
- name: mandate_constraints
  endpoint:
    path: /v3/mandates/{id}/constraints
    method: GET
    data_selector: constraints
- name: submit_payments_return_parameters
  endpoint:
    path: /v3/payments-provider-return
    method: POST
- name: accounts
  endpoint:
    path: /data/v1/accounts
    method: GET
    data_selector: results
    params:
      async: string
- name: accounts
  endpoint:
    path: /data/v1/accounts/{account_id}
    method: GET
    data_selector: results
    params:
      async: 'true'
      webhook_uri: uri
- name: accounts
  endpoint:
    path: /data/v1/accounts/{account_id}
    method: GET
    data_selector: account payload
- name: account_balance
  endpoint:
    path: /data/v1/accounts/{account_id}/balance
    method: GET
    data_selector: balance payload
- name: account_balance
  endpoint:
    path: /data/v1/accounts/{account_id}/balance
    method: GET
    params:
      async: 'true'
      webhook_uri: uri
- name: account_transactions
  endpoint:
    path: /data/v1/accounts/{account_id}/transactions
    method: GET
    data_selector: results
    params: {}
- name: account_pending_transactions
  endpoint:
    path: /data/v1/accounts/{account_id}/transactions/pending
    method: GET
    data_selector: results
    params: {}
- name: direct_debits
  endpoint:
    path: /data/v1/accounts/{account_id}/direct_debits
    method: GET
    data_selector: results
    params:
      async: 'true'
      webhook_uri: uri
- name: reauthentication_link
  endpoint:
    path: /v1/reauthuri
    method: POST
- name: cards
  endpoint:
    path: /data/v1/cards
    method: GET
    data_selector: results
    params:
      async: 'true'
      webhook_uri: uri
- name: cards
  endpoint:
    path: /data/v1/cards/{account_id}
    method: GET
    data_selector: results
- name: card_balance
  endpoint:
    path: /data/v1/cards/{account_id}/balance
    method: GET
    data_selector: results
    params: {}
- name: card_balance
  endpoint:
    path: /data/v1/cards/{account_id}/balance
    method: GET
    data_selector: object
- name: card_transactions
  endpoint:
    path: /data/v1/cards/{account_id}/transactions
    method: GET
    data_selector: results
- name: card_pending_transactions
  endpoint:
    path: /data/v1/cards/{account_id}/transactions/pending
    method: GET
    params: {}
- name: providers
  endpoint:
    path: /api/providers
    method: GET
    data_selector: providers
    params: {}
- name: extend_connection
  endpoint:
    path: /data/v1/connections/extend
    method: POST
- name: tracked_events
  endpoint:
    path: /v1/tracked-events
    method: GET
    data_selector: results
    params:
      tracking_id: string
- name: user_data_by_payment
  endpoint:
    path: /signup-plus/payments
    method: GET
    data_selector: User
    params:
      payment_id: string
- name: user_data_by_connected_account
  endpoint:
    path: /signup-plus/accounts
    method: GET
    data_selector: User
- name: user_data_by_mandate_id
  endpoint:
    path: /signup-plus/mandates
    method: GET
    data_selector: User
    params:
      mandate_id: string
- name: verify_account_holder_name
  endpoint:
    path: /verification/v1/verify
    method: POST
    data_selector: verified
    params: {}
- name: providers
  endpoint:
    path: /getproviders
    method: GET
    data_selector: results
- name: initiate_payment
  endpoint:
    path: /v2/single-immediate-payment-initiation-requests
    method: POST
- name: embedded_auth_flow_steps
  endpoint:
    path: /v2/single-immediate-payments/{sip_id}/embedded-auth-steps/{step_id}/submission
    method: POST
- name: payment
  endpoint:
    path: /v2/single-immediate-payments/{sip_id}
    method: GET
- name: create_open_loop_withdrawal
  endpoint:
    path: /v1/withdrawals
    method: POST
- name: create_closed_loop_withdrawal
  endpoint:
    path: /v1/users/withdrawals
    method: POST
- name: user_withdrawal
  endpoint:
    path: /users/{user_id}/accounts/{account_id}/withdrawals/{transaction_id}
    method: GET
- name: withdrawal
  endpoint:
    path: /withdrawals/{transaction_id}
    method: GET
- name: create_deposit
  endpoint:
    path: /v1/users/deposits
    method: POST
    data_selector: result
    params: {}
- name: get_deposit_for_user
  endpoint:
    path: /v1/users/{user_id}/deposits/{deposit_id}
    method: GET
- name: user
  endpoint:
    path: /v1/users/{id}
    method: GET
    data_selector: '204'
- name: user_accounts
  endpoint:
    path: /users/{id}/accounts
    method: GET
    data_selector: results
- name: account_balances
  endpoint:
    path: /balances
    method: GET
    data_selector: results
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: results
    params:
      from: ''
      to: ''
      type: ''
      currencies: ''
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some API features may require advanced setup or permissions.
- Requires setup of a Console account to generate client_id and client_secret
- By default, when you create a new Console account, you'll be in our sandbox environment.
  In sandbox, you can test your integration without live bank accounts. This means
  you don't move any real money.
- Ensure to generate public and private keys for authentication.
- You must have a Console account to access API credentials.
- The authorisation process is a bit different in sandbox compared to a live payment.
- This guide assumes that you have read the Make a test payment quickstart guide.
- Each payout requires its own access token.
- Uses OAuth2 with refresh token — requires setup of connected app in TrueLayer
- For live payouts, use webhooks to monitor payouts.
- Requires setup of sandbox merchant account in TrueLayer
- The user interface for this step varies in different versions of Insomnia.
- You must display the user information collected through Signup+ to the user as part
  of the payment flow.
- Signup+ API is available in the UK and Finland only.
- Change your scopes to include signupplus by selecting signupplus under Product Permissions.
- Choose your providers by selecting the ones you need under Open Banking and Challenger
  Banks.
- To connect with the Data API, generate an authentication link for users.
- After a closed-loop pay-in, you can can easily make multiple payouts to the same
  user, and also access other merchant account-related functionality.
- This API supports closed-loop payments.
- Requires setup of a merchant account.
- Use webhooks for real-time updates on payments.
- Ensure to include an Idempotency-Key header in payment requests.
- Ensure to validate the signature of each received webhook
- Payouts are executed over an instant payment scheme, usually settling within minutes
- A open-loop payment is a payout from your merchant account to an external account.
- Webhooks are the recommended way for you to receive updates about anything you do
  with the TrueLayer API.
- VRPs are only available in the UK.
- Mandates are only available in GBP currency.
- Payments on a mandate don't require user authorisation and immediately enter 'authorized'
  status.
- It is essential that you validate the signature of each received webhook to ensure
  if was sent from TrueLayer.
- The logic for this is similar to request signing, and we offer libraries to help
  you verify these signatures.
- APIs are developed under the Open Banking Standard.
- Requires consumer consent to access data.
- OAuth2 authentication is required for API access.
- Ensure correct scopes are set for the access token.
- Some objects like Contact may return nulls in deeply nested fields
- Refresh tokens expire until the user needs to reconfirm consent (usually after 90
  days). If not used, they expire after 30 days.
- This integration may break with API changes.
- Your sandbox client_id and client_secret are different to your live credentials,
  and you can see them on the Settings page.
- Users must use multi-factor authentication in order to issue refunds from the payments
  view.
- MFA is required to refund payments in Console
- Users need to authenticate through MFA to issue refunds for 5 minutes
- You need to sign back in to continue using Console.
- In sandbox, you deposit and withdraw as much as you want from a merchant account.
- The transactions table can only display transactions for a single date if legacy
  PayDirect API format is enabled.
- You must have multi-factor authentication (MFA) enabled to make an ad hoc payout.
- You must have merchant account sweeping enabled in Console to make ad hoc payouts.
- Payments view contains information about all incoming and outgoing payments.
- 31 days is the longest period you can display on the payments view at once.
- Click Export to generate a CSV report of your transaction history within a time
  frame that you choose.
- If you have all fields enabled, the order of the exported columns is predetermined.
- Additional columns can be appended as metadata in your payment, refund or payout
  request.
- You can only refund closed-loop payments.
- If authentication is needed, a modal opens in the payments view that enables you
  to do this.
- A 5-minute session starts during which you can refund payments. After 5 minutes,
  you need to re-authenticate.
- The customisations you make in the Hosted Payments Page section also apply to other
  Payments API v3 UIs, such as mobile SDKs, and payment links.
- Setup required for OAuth2 authentication
- Ensure to handle token refresh logic
- You need to build a user interface (UI) for the Data API.
- The interface must enable your users to select a bank to share data from, and also
  to understand the data they're sharing and to consent to it.
- You must have a Console account to access this
- Currently, you cannot simulate SFTP report delivery in sandbox.
- Payments are ordered based on the time they were created.
- The number of metadata columns is dynamic and can vary between different generated
  reports.
- You must have a merchant account to make payouts or refunds.
- You can only accept payments in and make payouts from a GBP account in GBP, and
  from an EUR account in EUR.
- Specify the beneficiary using your merchant account ID
- Pagination became the default behaviour for the `/v3/merchant-account/{id}/transactions`
  endpoint in December 2023.
- By default, automated sweeping isn't enabled, but you can make ad hoc payouts to
  the SCAN or IBAN details of your business account.
- If you choose to top up on a daily basis via SEPA Credit, be mindful of bank cut-off
  times and weekends/public holidays to ensure you have sufficient funds to cover
  those payments.
- If you choose to top up larger amounts at a lower frequency, you may want to use
  SEPA Instant for short-term one-off payments up to €100k (the default limit).
- Where practical, having a buffer in your merchant account balance reduces the risk
  of low balance scenarios.
- Set up webhook notifications to know when the balance of your merchant account is
  running low.
- The `balance_notification` webhook is optional, and you can contact us to enable
  it, also specifying the threshold that you want the webhook to inform you of.
- Payments that return the 'external_payment_received' webhook have a Type of 'External
  Deposit' in the Console payments view.
- Most Payments API features require a merchant account, and we recommend that you
  create one to use any Payments products.
- public and private keys, uploaded to Console.
- an access token with appropriate scopes.
- This checklist focuses on closed-loop payments.
- Validate the signature of each received webhook to ensure it was sent from TrueLayer.
- You need to ensure the payment includes the specified headers.
- All payments requests (pay-ins, payouts, mandates, and refunds) need to be authenticated
  before you initiate the request.
- You need public and private signing keys, which are uploaded to Console and included
  with your requests respectively.
- An access token is valid for an hour.
- Each access token grants you access to the Payments API for 60 minutes.
- The Payments API v3 uses a pair of ECDSA keys in addition to a bearer token.
- Ensure that you store your private key securely.
- Upload your public key in the Signing keys box to generate a KID for signing requests.
- Whichever library you use, ensure that the path that you sign is the same as the
  path used to send the request.
- All signed headers sent with a request must be exactly as they were signed, with
  none missing.
- Ensure that the body passed to the signing library matches the body sent with the
  request exactly, byte for byte.
- Ensure the request body has no trailing newlines if it was not signed that way.
- Ensure the public key and private key you are signing with match the KID in our
  Console.
- You must provide user information in the user parameter as part of your payment
  creation requests.
- Be aware that some banks have limits on the amount that you can transfer in one
  payment.
- EUR transfer limits tend to be higher than limits in GBP.
- After you create a payment, it has a status of 'authorization_required' before it's
  sent to the payment scheme for authorisation.
- Provide as much information as possible inside the user object to reduce chances
  of RFI.
- Different banks support and disallow different characters when you create a payment
  request.
- Typically, the character limit for payment references is 18 characters.
- Some banks support up to 35 or 40 characters for beneficiary names.
- For remitter names, we support up to 80 characters.
- We do not support the special characters `(`, `)` or `^` in any payment (UK or EU).
- We recommend that your payment references and beneficiary names don't include special
  characters at all.
- This feature is UK only
- Not all banks support this feature
- This section of the TrueLayer docs covers how to optimise user experience and payment
  reliability by selecting the right provider and scheme for each payment.
- Use preselected provider selection for returning users.
- Some European banks outside of the UK, France, and Ireland require that you provide
  the user's IBAN, otherwise they fail.
- Use `instant_preferred` for UK payments to ensure providers display on the provider
  selection screen.
- Ensure to follow the OAuth flow for authentication.
- You must enable downtime detection for that provider for webhooks to be sent.
- Enhance your Payments integration with additional features.
- These features go beyond basic payment flows, offering greater control, automation,
  and risk management.
- When you cancel a payment or a payment expires, the payment moves into the `failed`
  status.
- The reason for the failure is returned in the `failure_reason` field.
- This feature is only available for closed-loop payments (payments into a merchant
  account).
- Use this API endpoint, instead of webhooks, to poll for information about an individual
  payment.
- Payments in the authorized, executed, and failed states include a payment_source
  object.
- This endpoint retrieves data about failed payments.
- Age verification is part of Signup+
- You can only use automatic payment verification for name or date of birth for each
  payment, not both.
- Contact TrueLayer to enable verification for your merchant account.
- The payment_creditable webhook is enabled by default in all new integrations.
- You can't cancel payments after they reach this status
- By default, you receive the external_payment_received webhook when you receive a
  payment from an external source instead of through TrueLayer's APIs.
- You may want to contact us to enable automatic refunds.
- Webhooks are JSON-format notifications you receive when any event occurs within
  the Payments API v3.
- All incoming webhook requests must have their signatures verified.
- TrueLayer can't guarantee that you’ll only receive a single webhook notification
  for any one event.
- All incoming webhook requests must have verified signatures, or you risk accepting
  fraudulent payment status events.
- Payments can have a terminal status of either settled or failed.
- Payments into an external account can have a terminal status of either executed
  or failed.
- Payments can have a terminal status of either 'settled' or 'failed' for closed-loop
  payments.
- Payments can have a terminal status of either 'executed' or 'failed' for external
  account payments.
- Make sure to handle any undocumented values as a generic failure reason.
- Each app can only have one webhook URI at a given time.
- You must validate all incoming webhook requests through the Tl-Signature that accompanies
  the webhook.
- When you provide public keys to sign webhooks, ensure that they are correct byte
  for byte.
- If you use any libraries, you should ensure they handle serialisation consistently,
  or you might receive errors when validating your requests.
- You must validate all incoming webhook requests through the Tl-Signature.
- If you accept payments in the UK, the time difference between executed, settled
  and creditable webhooks may be very small. Be aware that you may receive these webhooks
  out of order, eg settled before executed.
- TrueLayer can't guarantee that you’ll only receive a single webhook notification
  for each payment status.
- These features are only available in the sandbox environment.
- Payments API errors
- You cannot make a payment with an amount_in_minor exceeding 5000000 to a merchant
  account in the sandbox environment.
- Requires setup of TrueLayer account and connected app.
- The newest UI is currently supported in the UK, France and Ireland only.
- Fallback to an earlier UI in other geographies.
- The Web SDK v1 is the newest version of the Web SDK.
- The web SDK is a quick way to integrate a TrueLayer authorisation flow into a webpage.
- Payments expire after 15 minutes if the user doesn't start the authorisation flow.
- By default, the Web SDK is set to sandbox mode.
- You can customise some parts of the UI to improve your user experience.
- The web SDK is available in the UK, France (FR) and Germany (DE).
- More countries are coming soon.
- Requires setup of connected app in TrueLayer
- Client must initialize the Web SDK without a payment.
- User must provide email address inside the user object.
- We recommend using this object if you are based in the EU.
- If you’re in the UK, you don’t need to include this object (because we will only
  display UK providers).
- You must ensure that you open the URL exactly as you receive it, without altering
  it.
- The hosted payment page UI includes a bank selection screen, a scheme selection
  screen for EUR payments, screens for collecting additional inputs needed from users,
  a consent screen, and a QR code for mobile authorization.
- Before you can create payments with the hosted payment page, you need to register
  for Console and add a redirect_uri to your app.
- You must register the return_uri in your settings in Console.
- The country code must be in ISO 3166-1 alpha-2 format.
- The language code must be in ISO 639-1 format.
- Ensure that your image is square, so that it renders properly when it is displayed
  in a circle
- Ensure that your image is hosted on an https domain
- Ensure that your image is a PNG, JPG, JPEG or SVG
- Compress your image so that it is 100x100–1500x1500 px
- Don't use an iframe, as most banks don't support these for security reasons.
- Don't override the webview client on Android unless you absolutely need to.
- You cannot customise the style of the payment result screen, and it doesn't inherit
  any style choices you made for the HPP.
- In a successful mandate creation request, it displays after the mandate enters the
  authorized status.
- In a failed mandate creation request, it displays after mandate creation fails.
- Currently the hosted page only supports payments in the UK, France and Ireland.
- It does not support mandate authorisation.
- The hosted page offers a better payment experience than the HPP, but it's still
  in development.
- If you created your Console account after 4 January 2024, the payment result screen
  feature is automatically enabled.
- You cannot customise the style of the payment result screen, and it doesn't inherit
  any style choices you've made for the HPP.
- Payments to external accounts always have a result screen of In progress.
- We recommend mobile SDKs for all mobile payments, particularly for accepting payments
  in the EU.
- The SDK is designed to work with Android 7.0 (API level 24) and above.
- It is currently optimised for the UK, Ireland, France, Germany, Spain, the Netherlands,
  and Lithuania.
- Ensure your application ID is set correctly in Android SDK.
- Use the latest version of the SDK for the best features and fixes.
- To disable the mandate result screen, provide a value of false for shouldPresentResultScreen
  within MandatePreferences when you process the payment.
- Starting from 21 February 2024, you will need to migrate to Android 3.0.1 to ensure
  that your UI looks consistent between your app and your payment authorisation flow.
- The SDK now uses Kotlin version 1.7.0, SDK version 26 at minimum. Previously the
  minimum SDK version was 24.
- For version 2.3.0 of the SDK, we've extended Android compatibility to Android 5.0+
  (API level 21+).
- Test app redirects in your Android payments integration with the TrueLayer mock
  bank app.
- The mock bank app imitates the payment flow a user would experience on mobile.
- The mock bank app is not available from any app stores. You can download the APK
  file for the mock bank app from our GitHub page.
- If your integration isn't set up correctly, or the APK isn't installed on your device
  correctly, your app redirects you to the mock bank website instead of the mock bank
  app.
- OAuth2 implementation requires setup in the TrueLayer console.
- Ensure that you handle token expiration properly.
- The SDK is currently optimised for the UK, Ireland, France, Germany, Spain, the
  Netherlands, and Lithuania.
- You must register a redirect URL in the Console.
- Ensure that you are using a minimum of iOS 13.0, Xcode 13, and Swift 5.6.
- Uses OAuth2 with refresh token
- The SDK offers a mandate result screen
- Visit our GitHub page to get the latest version of the TrueLayer iOS SDK.
- Requires setup of OAuth2 in the TrueLayer console
- You can also use the TrueLayer Test Redirect page in a webview in your sandbox iOS
  app.
- However, you cannot test the return redirect with the Test Redirect page, so we
  recommend you also use the mock bank app for testing.
- Register a return URI in Console > Settings > Allowed redirect URIs.
- The mandate result screen is enabled by default.
- You must relaunch the SDK using the same MandateContext used when processing the
  mandate.
- Colours are expected to be a hex code. They may start with the pound sign (#) but
  this isn't required. It supports hex codes of 3, 4 and 6 digits.
- The font (.ttf) should be added to the project and referenced in the .plist file.
  Then, only the family name should be passed to the SDK. If the SDK fails to fetch
  the font, it falls back to the native iOS font.
- The payment result screen means that you don't have to render a result screen based
  on the result of payment webhooks.
- The payment result screen displays possible outcomes for payment transactions.
- The mandate result screen displays possible outcomes for mandate authorizations.
- 'Prisma is TrueLayer''s design system: the single source of truth for building payments
  products that are scalable and on brand.'
- Most payment flows in Europe are redirect flows.
- Embedded flows are used in German payments.
- The mobile SDK flow looks similar to the German UI, with the relevant banks for
  the French market.
- Payouts are payments from a TrueLayer merchant account to a customer.
- Refund payments cannot exceed the total of the initial payment the user made.
- Request signing ensures that any payment requests made to your merchant account
  are verified against your public key hosted in Console.
- When making payouts, specify the type parameter as payment_source, external_account,
  or business_account.
- 'Closed-loop payouts are useful if your customers need to top up and withdraw from
  an account frequently: for example, in gaming or investment apps.'
- Must include an access_token with the payments scope for payouts.
- Use a unique Idempotency-Key for each request to prevent duplicates.
- You must include an access_token with the payments scope in order to make an open-loop
  payout.
- All requests must include Tl-Signature and Idempotency-Key headers.
- Beneficiary details must include account_holder_name, type, and reference.
- All requests should include a valid Tl-Signature header for security purposes.
- Include a valid Idempotency-Key header to avoid duplication.
- CashPlus and Santander do not support transactions in a pending state.
- Verified Payouts currently does not support Chase.
- PLN payouts cannot be made with EUR schemes.
- The exact timing for payout retries uses a jittered exponential backoff algorithm,
  which means there is not a set schedule.
- By default, payouts are retried for a duration of 1 hour.
- The final retry can be attempted after the duration you specify.
- To create a refund, you must have an access_token, which you provide as a Bearer
  header.
- You need a Tl-Signature header to sign your request.
- An Idempotency-Key header is required so you can retry your request if necessary.
- Refunds can take up to 24 hours to reach a terminal state.
- The total of all refunds for a single payment cannot exceed the value of the original
  payment.
- 'The payout has four possible statuses: pending, authorized, executed, and failed.'
- Ensure that you handle any values not listed here as a generic failure reason.
- As we learn more about provider behaviours, we update the list of possible payout
  failure reasons that can be returned.
- If you created your Console account after 15 April 2024, payout and refund returns
  are automatically enabled.
- If you created your account before 15 April 2024, you need to contact us to enable
  this behaviour, and may need to change how your integration handles payouts and
  refunds if you do so.
- Due to returns, payouts and refunds can transition from a status of `executed` to
  `failed`. This means that your systems should be able to update a payout or refund
  from `executed` to `failed` if you receive a webhook informing you of this status
  change.
- Returns are rare, accounting for a negligible amount of initiated payouts and refunds.
- Payout notifications sent to your webhook URI registered in Console, when a payout
  becomes executed or fails.
- Webhooks for a verified payout contain more information.
- Notifications sent to your webhook URI registered in Console, when a refund is executed
  or fails.
- Signup+ API is only available in the UK and Finland.
- The Signup+ API provides user data for current accounts only.
- Strongly recommend using pre-settlement verification for new Signup+ payments.
- The process for setting up Signup+ in Finland is different to the UK.
- You need to validate webhooks to ensure they were sent from TrueLayer.
- Enable the signupplus scope
- Generate an access token with payments and signupplus scopes
- Contact us to allowlist your redirect URI for Signup+ Finland
- Enable the Signup+ webhook_authorisation_expired webhook
- Enable the payment_creditable webhook and contact us to set the behaviour you want
- Uses OAuth2 with bearer token for authorization
- The payment_id parameter is required for generating an authorization link
- Ensure that you use the same environment for all of your requests to TrueLayer APIs.
- The `signupplus` scope is available by default in the sandbox environment.
- Use the access_token generated from the authentication flow as a bearer authorisation
  header for your request.
- To create a payment link, the access_token must have the payments scope.
- Payment link expires 24 hours after creation by default if not provided.
- By default, payment links expire after 24 hours. If your customer requires it, ensure
  you specify a later expiration with the expires_at parameter.
- Webhook notifications are available for payment link events.
- Webhooks are sent when a payment is created through a payment link or when a payment
  link is disabled.
- Currently, VRPs are only available in the UK.
- You need an access_token with the correct scopes, included as a bearer header.
- Sign your requests with a valid Tl-Signature header.
- Include an Idempotency-Key header to retry your requests.
- You must include a Tl-Signature and Idempotency-Key header with your request.
- The maximum value of a single payment is specified as a minor value ('pence' or
  'cent' value).
- The UK bank Monzo does not support the day, week, fortnight, and half_year periodic
  limit objects.
- Users must authorise any mandates before money can be sent.
- 'Two options for authorisation: TrueLayer UI or direct API integration.'
- Retry is an opt-in feature, contact support to enable.
- Once a mandate has been revoked, you cannot reinstate it.
- Some endpoints may have rate limits that need to be considered
- References must have a maximum length of 18 characters
- Reference format is companyname-uniqueid
- Mandates transition through multiple statuses.
- A variety of different reasons can cause a mandate to transition to the failed status.
- The failed_at object tells you the time that the mandate transitioned to failed
  at, in RFC-3339 format.
- Your implementation should be able to handle other values for failure reasons, as
  we may add more failure reasons in the future.
- Ensure to set up OAuth credentials in the TrueLayer console.
- You may find it easier to use admin tools within Console than tools within your
  plugin to monitor and refund payments.
- A person signed into your application in Console can only issue a refund if they
  have the Owner, Admin or Payments Operator role in the application.
- Set up multi-factor authentication (MFA) for their Console account.
- Change the way that the authorisation flow looks when your customer chooses to pay
  you.
- You must have a role of either Owner or Admin in Console.
- We need to verify your business bank account details for KYC purposes.
- Minimum requirements to use the TrueLayer WooCommerce plugin are WordPress 4.5 or
  greater, and WooCommerce 6 or later.
- Enable pretty permalinks in WordPress to ensure callbacks from TrueLayer back to
  your store will work.
- 'Banks can be in one of three release channels: General availability, Public beta,
  Private beta.'
- To ensure that your refund processes, you must click the Refund with TrueLayer button
  and not the Refund payment manually button.
- You need to enable multi-factor authentication to process refunds.
- Ensure OAuth scopes are correctly configured
- Test the WooCommerce plugin in sandbox and production, and get ready to go live.
- Monitor the status of your orders on the WooCommerce dashboard.
- You can track the status of your payments, and process refunds, in Console.
- Minimum requirements for using TrueLayer's Magento plugin are Magento version 2.4.6
  or later.
- All ecommerce plugins listen out for webhooks.
- The plugin receives a `payment_settled` webhook when a payment reaches the merchant
  account.
- These guides assume that you have already set up a TrueLayer account in Console,
  including a merchant account.
- All of our ecommerce plugins listen out for webhooks.
- Notifications are automatically sent when a payment reaches specific states in its
  lifecycle.
- To get support for the Data API, check the FAQs or ask for help.
- Consent has a limited length of validity, and will expire.
- Authentications may expire, depending on the open banking standard and the individual
  bank being accessed.
- We recommend using Data API asynchronously. Asynchronous access mitigates issues
  that are beyond the control of TrueLayer and removes the need for you to write your
  own error and retry logic as is it handled seamlessly.
- Webhook delivery is considered successful when a success status code (2xx) is received.
- We recommend logging X-TL-Correlation-Id and always sharing it with our Client Ops
  team when opening incident tickets.
- Requires setup of an account in TrueLayer Console
- Your access_token will expire after 1 hour.
- You'll only be able to renew access tokens that have the offline_access scope enabled.
- Uses OAuth2 with authorization code flow.
- To use direct bank authentication, you must be a licensed AISP.
- Direct bank authentication is possible under both the Outsourced Service Provider
  and Representative models without a specific license.
- Collecting explicit consent is a regulatory requirement for Account Information
  Service Providers (AISPs) to obtain under PSD2 in the UK and EU.
- In the UK and EU If you are not regulated to provide Account Information Services,
  then TrueLayer must obtain explicit consent from the user.
- If you don't have your own AIS license(s), then you must include the provided copy
  precisely.
- This copy is written in markdown. When using the mandatory copy, make sure to use
  the exact formatting included.
- If you are an appointed agent of TrueLayer then you must include a regulatory disclosure
  on your website
- TrueLayer are FCA-regulated, and won’t share or use your personal data for anything
  else
- Token management for access_token and refresh_token is crucial.
- Background jobs are recommended to keep tokens alive.
- Historical transactions API calls are paginated.
- Requires setup of OAuth for access
- 'Currently not supported: Reconfirmation of consent needed response.'
- If you're regulated to provide AIS in the UK or EU, you must collect consent from
  the user yourself.
- The consent screen must fulfil certain criteria reviewed by TrueLayer.
- The reconfirmation screen must fulfil certain criteria reviewed by TrueLayer.
- When you collect consent through SMS, the message should contain consent copy.
- We also recommend you some details about your application to build trust.
- If the user confirms consent, they should receive a success SMS that contains the
  date they will next need to provide consent.
- If the user revokes consent, you can choose to add friction via a follow-up confirmation
  message.
- Uses OAuth2 with refresh token — requires setup of connected app in TrueLayer.
- This call does not require a valid access_token, but you must include a refresh_token
  in the request body for the connection you want to extend.
- The /accounts endpoint is used to retrieve a list of user debit card accounts.
- The /cards endpoint is used to retrieve a list of user credit card accounts.
- You need to enable the accounts scope in Console to make this request.
- You need to enable the `info` scope in Console to access user identity information.
- You need to enable the `accounts` and `balance` scopes in Console to get account
  balance.
- You need to enable the `accounts` and `transactions` scopes in Console to get transaction
  data.
- You need to enable the cards scope in Console to make this request.
- You need to enable the cards scope in Console to make requests.
- 'Supports four types of accounts: TRANSACTION, SAVINGS, BUSINESS_TRANSACTION, BUSINESS_SAVINGS.'
- Ensure proper setup of OAuth2 credentials.
- API usage may be subject to rate limits.
- Using OAuth2 with refresh token — requires setup of a connected app in TrueLayer.
- This endpoint is deprecated, and will soon be decommissioned.
- Batch calls are asynchronous.
- Webhook notifications will be sent to the specified webhook_uri.
- Decommissioning batch endpoint API, transition to sequential API calls.
- User credentials for testing available via the mock bank.
- Data API errors
- Verification API is available in the UK, Germany, and Spain in public beta.
- Requires OAuth2 integration for authentication
- Previously, the Verification API was hosted on https://verification.truelayer.com/v1/verification.
  This is still supported for now but will be removed soon.
- 'Migrating to the Payments API v3: introduction'
- It is now mandatory to sign all POST API requests, including both pay-ins and payouts.
- Payment creation and authorisation are now two distinct concepts.
- The access_token you generate lasts for 1 hour.
- Signing requests is mandatory for all POST API requests.
- The deposit_id is no longer passed; it is generated automatically.
- Closed-loop payouts are sent to users who already made a deposit.
- Open-loop payouts are sent to unknown bank accounts.
- Refunds can be partial or full but cannot exceed the original pay-in amount.
- The maximum amount you can send for refunds is the amount of the pay-in being refunded.
- It is possible to issue multiple refunds for the same pay-in, as long as they don't
  exceed the original pay-in amount.
- It is required to include additional user information within payment creation requests.
- Pay-in creation and authorisation are now two distinct concepts and are handled
  in two separate steps.
- Use only the payments scope for pay-ins, payouts, and refunds.
- Access token lasts for 1 hour.
- This is a legacy product. The Payments API v3 is the latest version of the Payments
  API.
- A single immediate payment is executed in real time.
- Redirect the user to their bank to authorise the payment.
- Ensure to set up the OAuth2 connected app in TrueLayer.
- Do not store the information from the /providers endpoint locally as it may change
  frequently.
- The information returned by the /v2/single-immediate-payments-providers endpoint
  is still accurate and can be used with the Payments API v3.
- Most integrations use redirect as the value for the auth_flow_type object.
- Use client_credentials grant type to get access token
- If you are unregulated as a PISP, you need to add a disclaimer on the payment confirmation
  screen.
- Use the Payments V2 API for handling payment requests and responses.
- Redirect the user to the bank URI specified in the API response value `auth_flow.uri`.
- This feature is in private beta and is currently available to a limited number of
  clients.
- When TrueLayer sends a webhook to the specified webhook_uri, it will include a Tl-Signature
  header.
- Ensure to follow the OAuth2 flow to get access tokens.
- The 'expired' status is not available for Payments API v2.
- This mock provider requires the additional inputs psu-id and psu-password.
- Banks don't make these limits public as the information can be misused for fraud.
- The PayDirect API is currently in beta.
- Requests to the PayDirect API require a client credentials grant, which you can
  obtain by using a valid bearer access token.
- Change the endpoint domain from truelayer-sandbox.com to truelayer.com when going
  live.
- This feature is in private beta.
- Deposits have a limit of 1000 amount_in_minor (10 GBP/EUR) in the sandbox environment.
- We do not recommend that you store information from the /v2/single-immediate-payments-providers
  endpoint locally.
- The payment resource must be initiated before the user can authorize it.
- You need to sign POST requests to /v1/users/withdrawals.
- Access token is valid for one hour.
- You need to verify the account before making payouts.
- Automated sweeping is not enabled by default. Before setting it up, you must finish
  KYC onboarding.
- GBP sweeping must target a UK IBAN.
- The only supported signing algorithm for POST requests to Payouts API is ES512.
- Webhook delivery is confirmed with a success status code (2xx).
- TrueLayer cannot guarantee a single webhook notification for each payment status.
- Webhook requires validation of the signature using JWS.
- OAuth2 authentication is required for using the API
- TrueLayer’s API Client Libraries simplify the process of using TrueLayer’s REST
  APIs.
- To create a closed-loop pay-in or single payment request, send a POST request to
  the /v3/payments endpoint.
- Payment creation requires specific fields based on payment type.
- Sent to the webhook URI you registered in Console when a payment is authorised,
  executed, fails, settles, is creditable, settlement stalled, disputed, reversed,
  or a Direct Debit payment arrives in the merchant account.
- Webhook sent to the registered URI when a refund succeeds or fails.
- Sent to the webhook URI you registered in Console when a payment is created from
  a payment link and when a payment link expires.
- Sent to the webhook URI you registered in Console when a payout succeeds or fails.
- Sent to the webhook URI you registered in Console when a mandate becomes authorized,
  fails, or is revoked.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Invalid client_id or client_secret.'
- verification_declined
- invalid_remitter_account
- no_identity_data
- '401 Unauthorized: Check your authentication credentials.'
- '400 Bad Request: Verify the request parameters.'
- '401 Unauthorized: Check client_id and client_secret.'
- '400 Bad Request: Verify request parameters.'
- '400 Bad Request: Check the request parameters and body'
- '401 Unauthorized: Ensure the access token is valid'
- '404 Not Found: Verify the endpoint path and resource identifiers'
- '401 Unauthorized: Check your access token.'
- '403 Forbidden: Ensure your application has the required permissions.'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify token validity.'
- '404 Not Found: Ensure endpoint exists.'
- 'INVALID_CLIENT: Check client credentials'
- 'UNAUTHORIZED: Token may have expired or is invalid'
- '400 Bad Request: Check the request parameters and payload'
- '401 Unauthorized: Verify your OAuth token is valid'
- '404 Not Found: Ensure the endpoint is correct'
- '400: Invalid cursor'
- '500: Due to timeout for requests'
- '401: Invalid request signature. Include the Idempotency-Key header in the JOSE
  headers of the signature when making requests to endpoints where idempotency is
  mandatory.'
- '409: The Idempotency-Key value is being used for a concurrent request.'
- '422: The Idempotency-Key value has already been used for a different request.'
- 'authorization_required: Payment requires authorization.'
- 'INVALID_PROVIDER: Check if the provider ID is valid'
- '400 Invalid State: Status of the payment does not allow this action to be executed.'
- '`canceled`: You cancelled the payment by calling the `/cancel` endpoint.'
- '`user_canceled_at_provider` `not_authorized`: The user cancelled the payment during
  provider selection.'
- '`expired`: The payment token expired before the user authorised the payment.'
- '401 Unauthorized: Requires valid access token.'
- 'verification_declined: Payment failed verification.'
- '400: Cannot cancel payments after receiving the payment_creditable webhook'
- 'authorization_failed: The PSU failed to authorise the payment successfully.'
- 'blocked: The payment has been blocked due to a regulatory requirement.'
- 'canceled: The PSU cancelled the payment on the hosted payment page or the payment
  was cancelled using the ''/v3/payments/{id}/actions/cancel'' endpoint.'
- 'constraint_violation: The constraints set up for the mandate were breached by this
  recurring payment.'
- 'expired: The resource token for the payment expired because it took 15 minutes
  or longer for the user to authorise the payment.'
- 'insufficient_funds: The PSU did not have the required balance in their account
  to complete this payment.'
- 'internal_server_error: An error has occurred within TrueLayer when processing the
  payment.'
- 'invalid_account_details: The payment failed because either the payer''s or payee''s
  account details were invalid.'
- 'invalid_account_holder_name: The payment failed because the account holder''s name
  details were invalid.'
- 'invalid_beneficiary_account: The payment failed because an invalid beneficiary
  account reference was provided.'
- 'invalid_credentials: The banking credentials provided by the PSU to log into their
  bank were incorrect.'
- 'invalid_mandate_state: The mandate was not in a valid status to create a recurring
  payment.'
- 'invalid_otp: The PSU submitted an incorrect one-time password during the authorisation
  of the payment.'
- 'invalid_remitter_account: The account details of the remitter bank account provided
  during the payment flow were incorrect.'
- 'invalid_request: The payment failed due to invalid data in the request.'
- 'invalid_sort_code: The payment failed due to an invalid sort code being provided.'
- 'mandate_revoked: The mandate for a recurring payment is revoked.'
- 'not_authorized: The PSU cancelled the payment or wasn''t able to successfully authenticate
  on the provider''s UI.'
- 'payment_limit_exceeded: The PSU''s payment limit amount with their bank was breached.'
- 'provider_error: The provider has unexpectedly failed when creating the payment.'
- 'provider_expired: The payment failed because the token or exchange code used to
  communicate with the bank expired.'
- 'provider_rejected: The payment was rejected by the provider for an unspecified
  reason.'
- 'rejected: The payment was rejected for an unspecified reason.'
- 'scheme_unavailable: There is no scheme available given the provider selection configuration.'
- 'unknown_error: The payment failed for an unknown reason.'
- 'user_canceled_at_provider: The payment failed because the user cancelled the authorisation
  during the payment flow.'
- 'verification_declined: The payment didn''t pass an age- or name-based verification
  check.'
- '401: Check the authorisation requirements of the endpoint, and send an appropriate
  token and signature (if applicable) in the headers.'
- '403: If you''re using an access_token from our authentication endpoint, check if
  the token has scopes that the endpoint requires. If you''re using a resource_token,
  check if you''re trying to access a resource other than the one the token was issued
  for.'
- '400: Check the errors field included in the response for the JSON path of the request
  body fields or the header names that were invalid. The errors will also include
  at least one description of the error for each invalid field.'
- '400: Check if the next requested action is valid. For example, if you''ve tried
  to submit the provider selection, but the next authorised action is redirection.'
- '404: Check your payment ID value in the request path.'
- '409: This resource is already being used in another request. Try again later.'
- '409: Check if there''s another request using the same Idempotency-Key header value
  currently in progress.'
- '422: Use a unique Idempotency-Key value for each request. Idempotency keys remain
  valid for 30 days from creation.'
- '429: Try again later.'
- '502: Try again, or wait for the provider to be available again and retry.'
- '500: Try again, or contact Support if the problem continues.'
- '401 Unauthorized: Verify client credentials.'
- 'authorization_failed: We couldn’t link your bank. Please go back to {merchant name}
  and change bank or try again.'
- 'provider_error: We couldn’t link your bank. Please go back to {merchant name} and
  change bank or try again.'
- 'provider_rejected: We couldn’t link your bank. Please go back to {merchant name}
  and change bank or try again.'
- 'internal_server_error: We couldn’t link your bank. Please go back to {merchant
  name} and change bank or try again.'
- 'invalid_sort_code: We couldn’t link your bank. Please go back to {merchant name}
  and change bank or try again.'
- 'invalid_request: We couldn’t link your bank. Please go back to {merchant name}
  and change bank or try again.'
- 'expired: We couldn’t link your bank. Please go back to {merchant name} and change
  bank or try again.'
- 'unknown_error: We couldn’t link your bank. Please go back to {merchant name} and
  change bank or try again.'
- authorization_failed
- provider_error
- provider_rejected
- internal_server_error
- invalid_sort_code
- invalid_request
- expired
- unknown_error
- 'NoInternet: There was a problem connecting to the internet.'
- 'UserAborted: The user purposefully ended the payment process.'
- 'PaymentFailed: The mandate is in the failed state.'
- If you were processing payments with a Jetpack Compose integration, remove the following
  code from your activity hosting.
- '401 Unauthorized: Check your client ID and secret.'
- '403 Forbidden: Ensure you have the correct permissions.'
- '429 Too Many Requests: Rate limit exceeded. Try again later.'
- 'authorizationFailed: User could not authorize the payment.'
- 'invalidToken: The token used to make the payment is invalid.'
- 'paymentNotFound: The requested payment was not found.'
- '.authorizationFailed: The user could not authorise the mandate with their bank.'
- '.connectionIssues: There was an issue while connecting to the internet.'
- '.invalidToken: The token used to make the mandate doesn''t have the necessary scopes.'
- '.mandateExpired: The user took too long to authorise the authorise so it expired.'
- '.mandateNotFound: The requested mandate was not found.'
- '.mandateRejected: The mandate was rejected by the bank.'
- '.sdkNotConfigured: The SDK configure method has not been called before using it.'
- '.userCanceled: The user canceled the mandate.'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Invalid client credentials'
- '429 Too Many Requests: Rate limit exceeded'
- 'ProcessorContextNotAvailable: The context provided to the SDK is invalid.'
- 'NoInternet: There was an issue while connecting to the internet.'
- 'CommunicationIssue: There was an issue communicating with the server.'
- 'ConnectionSecurityIssue: The token used to make the payment or mandate is not authorized.'
- 'PaymentFailed: The payment or mandate is in a failed state.'
- 'WaitAbandoned: The user abandoned the payment on the wait screen.'
- 'Unknown: The SDK encountered an unexpected behaviour.'
- 'UserAborted: The user cancelled the payment or mandate.'
- 'ProviderOffline: The pre-selected provider was offline.'
- 'InvalidRedirectURI: The redirect URI passed to the SDK is invalid.'
- 'Blocked: The payment has been blocked due to a regulatory requirement.'
- 'InvalidAccountDetails: The payment failed because of invalid account details.'
- 'InvalidAccountHolderName: The payment failed because the account holder''s name
  details were invalid.'
- 'InvalidCredentials: The banking credentials provided were incorrect.'
- 'InvalidRemitterAccount: The account details of the remitter bank account were incorrect.'
- 'InvalidRequest: The payment failed due to invalid data in the request.'
- 'InvalidSortCode: The payment failed due to an invalid sort code.'
- 'InsufficientFunds: The PSU did not have the required balance.'
- 'PaymentLimitExceeded: The PSU''s payment limit amount with their bank was breached.'
- 'ProviderError: The provider unexpectedly failed when creating the payment.'
- 'ProviderExpired: The payment failed because the token or exchange code expired.'
- 'ProviderRejected: The provider rejected the payment.'
- 'UserCanceledAtProvider: The payment failed due to invalid account details.'
- 'Invalid payment ID: Ensure the payment ID is correct.'
- 'Insufficient funds: Verify the merchant account balance.'
- 'insufficient_funds: Ensure there are sufficient funds for the payout.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'insufficient_funds: The payout cannot be processed due to insufficient funds.'
- 'verification_name_mismatch: The account holder name does not match the one on file
  at the bank'
- 'verification_transaction_not_found: There is no transaction that matches the details
  of the transaction search criteria'
- 'account_not_valid: There are no, or more than one, current accounts associated
  with the AIS consent.'
- 'expired: The user took 10 minutes or more to authorise the payout.'
- '400 Bad Request: Check the request body for required fields.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'payment_failed: Refund fails if the corresponding payment fails.'
- 'insufficient_funds: The merchant account did not contain enough funds to make this
  payout.'
- 'blocked: The payout was blocked due to a regulatory requirement.'
- 'invalid_iban: The IBAN that your user provided at the creation of the pay-in this
  closed-loop payout is for was invalid.'
- 'invalid_scan: We could not convert the beneficiary’s sort code and account number
  to an IBAN.'
- 'returned: The payout was blocked or rejected by the beneficiary bank after it had
  entered the executed status.'
- 'scheme_error: There was an issue with the selected payment provider or payment
  scheme.'
- 'server_error: TrueLayer encountered an error while processing the payment.'
- 'unknown: The payout failed for an unknown reason that does not belong to any of
  the other reasons.'
- 'player_cancelled: The user cancelled the payment on one of TrueLayer''s authorisation
  screens.'
- 'expired: The payment has taken more than fifteen minutes to complete and has expired.'
- 'no_identity_data: No information about the user could be found'
- 'verification_declined: The user is not of age'
- 'provider_not_supported: The user has attempted to pay with a bank that doesn''t
  support Signup+'
- 'internal_server_error: The data provider is down'
- 'invalid_remitter_account: The user has attempted to pay with a joint account'
- '401 Unauthorized: Check access token validity'
- '400 Bad Request: Verify request parameters'
- '422 Invalid Mandate State: The mandate is not authorised.'
- '400: Invalid Parameters: Check the error object for details of which fields are
  invalid.'
- '400: Provider not supported: The provider doesn''t support this operation.'
- '401: Unauthorized: Create a new access token. The access token may be invalid or
  expired. You can check for more details in the error description.'
- '403: Forbidden: Ask the user to reconnect their account. This error is returned
  when the access to their account is no longer valid, either because it expired or
  because the user revoked it themselves.'
- '422: User Data Not Found: User data not found.'
- '422: Joint Accounts Not Supported: Joint accounts not supported.'
- '500: Internal server error: Retry later.'
- '404: Payment Not Found: The payment id supplied does not match the client_id that
  is being used to call Signup+. Either the payment has been made with a different
  client_id or has not been processed. Ensure that the payment is made with the right
  client_id and try again.'
- '422: Invalid Payment: Payment is not a closed-loop payment.'
- '422: Payment Processing: Payment is still in progress. Retry when payment is processed
  or reached a terminal state.'
- '422: Failed Payment: Cannot retrieve data from a failed or rejected payment.'
- '403: Missing Claims: Add the missing claims to the access token.'
- '422: No Valid Accounts: User has given permission to access an invalid account.
  This usually occurs because they don''t have a current account with that provider.'
- '504: Provider Timeout: The bank is experiencing issues. Retry later.'
- '404: Mandate Not Found: The mandate id supplied may not match the client_id that
  is being used to call Signup+. Either the mandate has been made with a different
  client_id or has not been processed. Ensure that the mandate is made with the right
  client_id and try again.'
- '422: Invalid Mandate State: The mandate must be authorised.'
- '422: Mandate Revoked: The mandate cannot have a status of revoked.'
- '404 Not Found: Check if the payment link ID is correct.'
- 'Invalid scope: Ensure you are using the correct scope for access_token generation.'
- 'Authorization failed: Recheck OAuth credentials.'
- 'Mandate creation failed: Review the mandate parameters for correctness.'
- 'Insufficient funds: Retry payment.'
- 'Constraint violation: Retry payment.'
- 'Provider error: Retry payment.'
- 'General connectivity issues: Retry payment.'
- 'HTTP 204: Successfully revoked the mandate.'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '401 Unauthorized: Check OAuth token and permissions'
- '400 Bad Request: Validate request parameters'
- internal_error
- '401 Unauthorized: Check your credentials'
- '400 Bad Request: Validate your request structure'
- 'invalid_grant: If you try to exchange a code that is not active.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Check your credentials and token validity.'
- '400 Bad Request: Check the request payload for required fields.'
- '403 Forbidden: You do not have permission to access this resource.'
- '429 Too Many Requests: You have exceeded the rate limit.'
- '5xx: API is temporarily unavailable'
- '408: Request timeout'
- 'not_found: Unable to find one or more whitelisted asset ids'
- 'account_permanently_locked: All calls to Data API will fail'
- 'account_temporarily_locked: All calls to Data API will fail'
- 'internal_error: All calls to Data API will fail'
- 'provider_error: All calls to Data API will fail'
- 'user_input_required: All calls to Data API will fail'
- 'wrong_credentials: All calls to Data API will fail'
- 'validation_error: There''s a problem with the request. Read the error message which
  explains what''s wrong with the request specifically.'
- 'invalid_date_range: Change the from and to parameters. Check the Supported Providers
  page in Console for bank-specific requirements.'
- 'deprecated_provider: The provider has been deprecated. It is no longer supported.'
- 'invalid_grant: Ask the user to reconnect their account. This most often occurs
  when a user''s 90 days of consent to access their account has expired.'
- 'invalid_client: Confirm that your credentials are correct, and that you are using
  the right credentials for the environment (live or sandbox).'
- 'invalid_authorization_code: Check that the code is correct when you try to exchange
  it with an access token.'
- 'unauthorized: Refresh your access token. The access token may be invalid or expired.'
- 'unauthorized_client: Check that your credentials are correct, that your auth link
  is valid for the environment that you''re using and that your redirect_uri is valid
  and allowlisted in Console.'
- 'invalid_token: Refresh your access token. The access token may be invalid or expired.'
- 'access_denied: Ask the user to reconnect their account.'
- 'invalid_credentials_key: '
- 'sca_exceeded: The access to that specific endpoint has expired.'
- 'account_not_found: Check the accountId parameter used within your request.'
- 'provider_too_many_requests: Include the X-PSU-IP header or retry later.'
- 'provider_request_limit_exceeded: Include the X-PSU-IP header or retry later.'
- 'internal_server_error: Retry later.'
- 'endpoint_not_supported: Check supported endpoints for each provider via our Help
  Desk FAQ.'
- 'provider_error: Retry later.'
- 'connector_overload: Retry later.'
- 'temporarily_unavailable: Retry later.'
- 'provider_timeout: Retry later.'
- 'connector_timeout: Retry later.'
- 4xx client usage errors
- 5xx server side processing errors
- 'validation_error: The supplied parameters are not valid.'
- 'deprecated_provider: The provider has been deprecated.'
- 'unauthorized: The credentials or token are no longer valid'
- 'invalid_token: The token is no longer valid'
- 'access_denied: Access to a specific resource has been denied.'
- 'invalid_credentials_key: The provided credentials encryption key is invalid.'
- 'sca_exceeded: SCA exemption has expired.'
- 'account_not_found: The requested account cannot be found.'
- 'provider_too_many_requests: Provider rate limit exceeded.'
- 'provider_request_limit_exceeded: Maximum number of requests per user allowed by
  provider exceeded.'
- 'internal_server_error: Internal server error.'
- 'endpoint_not_supported: Feature not supported by the provider.'
- 'provider_error: The provider service is unavailable.'
- 'connector_overload: The connector service is currently overloaded.'
- 'temporarily_unavailable: The provider service is unavailable.'
- 'provider_timeout: The provider service timed out.'
- 'connector_timeout: The connector service timed out.'
- 'authorization_required: Payment has been created successfully, awaiting authorization.'
- 'authorizing: User has started the authorization journey but not completed it.'
- 'payment_failed: Payment has failed, reason provided in the failure_reason field.'
- 'insufficient_funds: The payout failed due to insufficient funds.'
- '400 Bad Request: Check the request payload or parameters'
- '404 Not Found: Verify the payment ID or endpoint'
- payment_failed
- authorization_required
- authorized
- '401 Unauthorized: Check if the access token is valid.'
- '403 Forbidden: Ensure you have the right permissions.'
- '404 Not Found: Verify the payment ID exists'
- '400: The request is not valid and will not succeed without modification.'
- '403: Your client id is not allowed to access the resource.'
- '404: The requested resource is not found or not accessible to your client id.'
- '500: An issue occurred inside TrueLayer in handling the request.'
- '502: The provider associated with the request was unavailable at the time of the
  request.'
- Webhook delivery considered successful on 2xx status code.
- Retries start on any other status code.
- '400 Bad Request: Ensure all required parameters are included.'
- 'Auth failure: Enter correct username'
- 'Execution rejection: Invalid input value'
- '400 Bad Request: Check request parameters for validity.'
- '401 Unauthorized: Ensure valid authentication token is provided.'
- '404 Not Found: Verify the userId and depositId.'
- 'HTTP 202: Successful request'
- 'insufficient_funds: Your account does not have enough money in it to make the withdrawal.'
- 'server_error: We encountered a technical issue when authorising the payment. Try
  again later.'
- '404: If you haven''t enabled automated sweeping'
- 'Invalid signature: The signature does not match.'
- 'Webhook delivery failed: Ensure the endpoint is reachable.'
- '401 Unauthorized: Check client credentials'
- '400 Bad Request: Invalid request parameters'
- '400 Bad Request: Check payment request parameters.'
- '401 Unauthorized: Verify OAuth token.'
- '404 Not Found: Ensure the endpoint exists.'
- access_denied
- unauthorized
- invalid_grant
- unauthorized_client
- not_found
- 500 Internal server error
- 400 Invalid request
- 401 Unauthorized request
- '400 Invalid Parameters: Invalid Parameters'
- '401 Unauthenticated: Unauthenticated'
- '403 Forbidden: Forbidden'
- '409 Idempotency-Key Concurrency Conflict: Idempotency-Key Concurrency Conflict'
- '422 Idempotency-Key Reuse: Idempotency-Key Reuse'
- '429 Rate Limit Exceeded: Rate Limit Exceeded'
- '500: Unknown Error'
- '401 Unauthenticated: Recheck OAuth scopes or token expiration'
- '403 Forbidden: Check permissions for the requested resource'
- '404 Payment Not Found: Verify the payment ID'
- '409 Conflict: Resolve idempotency key conflicts'
- '422 Idempotency-Key Reuse: Ensure unique idempotency keys for each request'
- '401 Unauthenticated: A human readable explanation specific to this occurrence of
  the problem.'
- '403 Forbidden: A human readable explanation specific to this occurrence of the
  problem.'
- '404 Payment Not Found: A human readable explanation specific to this occurrence
  of the problem.'
- '409 Conflict: Concurrency Conflict'
- '422 Idempotency-Key Reuse: A human readable explanation specific to this occurrence
  of the problem.'
- '409 Conflict: Idempotency-Key Conflict'
- '401 Unauthenticated: Check OAuth token'
- '403 Forbidden: Verify permissions'
- '404 Payment Not Found: Validate payment ID'
- '409 Conflict: Check for idempotency key conflicts'
- '422 Idempotency-Key Reuse: Use unique idempotency keys'
- '500 Unknown Error: Investigate further'
- '502: Provider Error'
- 400 Invalid Request
- 401 Unauthenticated
- 403 Forbidden
- 404 Payment Not Found
- 409 Conflict
- 422 Idempotency-Key Reuse
- '400 Invalid Request: https://docs.truelayer.com/docs/payments-api-errors#invalid_state'
- '401 Unauthenticated: https://docs.truelayer.com/docs/payments-api-errors#unauthenticated'
- '403 Forbidden: https://docs.truelayer.com/docs/payments-api-errors#forbidden'
- '404 Payment Not Found: https://docs.truelayer.com/docs/payments-api-errors#not-found'
- '422 Idempotency-Key Reuse: https://docs.truelayer.com/docs/payments-api-errors#idempotency-key-reuse'
- '400'
- '401'
- '403'
- '404'
- '409'
- '422'
- '500'
- '500 Unknown Error: A human readable explanation specific to this occurrence of
  the problem.'
- '400 Invalid Parameters: A human readable explanation specific to this occurrence
  of the problem.'
- '404 Payment ID Not Found: A human readable explanation specific to this occurrence
  of the problem.'
- '409 Idempotency-Key Concurrency Conflict: A human readable explanation specific
  to this occurrence of the problem.'
- '422: Idempotency-Key Reuse'
- '403 Forbidden: Check permissions'
- '404 Refund Not Found: Verify payment_id and refund_id'
- '500 Unknown Error: Contact support'
- '200: Webhook Handled'
- '400 Bad Request: Invalid payload'
- '401 Unauthorized: Invalid credentials'
- '404 Not Found: Endpoint not found'
- 404 Payment Link Not Found
- 429 Rate Limit Exceeded
- 500 Unknown Error
- 400 Invalid Parameters
- '404: Not Found'
- '429 Rate Limit Exceeded: A human readable explanation specific to this occurrence
  of the problem.'
- '404 Payout Not Found: A human readable explanation specific to this occurrence
  of the problem.'
- Webhook Handled
- 404 Account Not Found
- '404 Not Found: A human readable explanation specific to this occurrence of the
  problem.'
- '403 Forbidden: Ensure the request is properly authorized'
- '404 Not Found: Verify the account ID or that sweeping is enabled'
- '500 Unknown Error: Contact support with trace ID'
- '400 Invalid Parameters: View Additional Properties'
- '400: Invalid Parameters'
- '401: Unauthenticated'
- '403: Forbidden'
- 404 Mandate Not Found
- '404 Mandate Not Found: Verify mandate ID'
- '422 Idempotency-Key Reuse: Ensure unique idempotency key'
- '400 BadRequest: Invalid State'
- '401 Unauthenticated: Unauthorized'
- '403 Forbidden: Access denied'
- '404 Mandate Not Found: The specified mandate does not exist'
- '409 Idempotency-Key Concurrency Conflict: Conflict with the provided idempotency
  key'
- '422 Idempotency-Key Reuse: Idempotency key has already been used'
- '400 Invalid Request: Invalid Parameters, Invalid State'
- '403 Forbidden: Check permissions for the API'
- '404 Mandate Not Found: Ensure the mandate ID is correct'
- '500 Unknown Error: Check the API documentation for more details'
- '404 Mandate Not Found: Not Found'
- '404 Resource Not Found: Not Found'
- '500 Unknown Error: Unknown Error'
- 401 Unauthorized
- 403 Access denied
- 404 Not found
- 429 Rate limit exceeded
- 501 Not implemented
- 503 Service unavailable
- 401 - Unauthorized
- 403 - Access denied (SCA exceeded)
- 404 - 404 payload
- 429 - Provider rate limit exceeded
- 500 - Internal server error
- 501 - Not implemented
- 503 - Provider planned downtime
- 503 - Connector overload
- 503 - Provider unplanned downtime
- 504 - Connector timeout
- 504 - Provider timeout
- '401 Unauthorized: error_description, error_details'
- '403 Access denied: error_description, error_details'
- '404 Not found: error_description, error_details'
- '429 Rate limit exceeded: error_description, error_details'
- '500 Internal server error: error_description, error_details'
- '501 Not implemented: error_description, error_details'
- '503 Service unavailable: error_description, error_details'
- '403 Access denied: Check permissions'
- '404 Not found: Verify the account_id'
- '429 Rate limit exceeded: Throttle requests'
- '500 Internal server error: Retry the request'
- '503 Service unavailable: Try again later'
- 400 - Invalid request
- 400 - Invalid date range
- 403 - Access denied
- 429 - Unattended calls rate limit exceeded
- '401 Unauthorized: Check your credentials or token'
- '403 Access denied: Check permissions for the account'
- '404 Not found: Verify the account ID'
- '429 Rate limit exceeded: Reduce the number of requests'
- '500 Internal server error: Try again later'
- '503 Service unavailable: Service may be down'
- 400 invalid_grant
- 403 access_denied
- '401 Unauthorized: error, error_description, error_details'
- '403 Access denied: error, error_description, error_details'
- '404 Not found: error, error_description, error_details'
- '429 Rate limit exceeded: error, error_description, error_details'
- '500 Internal server error: error, error_description, error_details'
- '501 Not implemented: error, error_description, error_details'
- '503 Service unavailable: error, error_description, error_details'
- 400 Validation error response
- 401 Unauthorised
- 422 Unprocessable Entity
- 400 Bad Request
- 404 Not Found
- 500 Internal Server Error
- 400 Invalid parameters
- 404 Payment not found, or does not belong to this client.
- 422 Payment is in an invalid state/Invalid data
- '400 Invalid parameters: A URI reference that identifies the problem type.'
- '401 Unauthorized: A URI reference that identifies the problem type.'
- '403 Forbidden: A URI reference that identifies the problem type.'
- '422 Unprocessable Entity: A URI reference that identifies the problem type.'
- '500 Internal Server Error: A URI reference that identifies the problem type.'
- 400 - Invalid parameters
- 400 - Provider not supported
- 403 - Forbidden
- 403 - Missing claims
- 422 - No valid accounts
- 422 - User data not found
- 422 - Joint accounts error
- 500 - Internal Server Error
- 404 Mandate not found
- 422 Mandate is in an invalid state/Invalid data
- 403 Access Denied
- 422 Invalid Payment
- 400 Bad request
- 429 Too Many Requests
- 503 Service Unavailable
- 504 Gateway Timeout
- '400 Invalid request: parameter_error'
- 403 Your are not authorised for the action
- 500 Internal error
- 502 Provider error
- '403: Your are not authorised for the action'
- '500: Internal error'
- '502: Provider error'
- '400 Invalid Request: error, error_description'
- '401 Unauthorized: error, error_description'
- '404 Not Found: error, error_description'
- '500 Internal Server Error: error, error_description'
- '400 Invalid Request: error_description'
- '401 Unauthorized: error_description'
- '404 Not Found: error_description'
- '409 Request Conflict: error_description'
- '500 Internal Server Error: error_description'
- '502 Provider Error: error_description'
- '400 Invalid Request: Check required parameters'
- '401 Unauthorized: Recheck authentication'
- '404 Not Found: Verify the resource existence'
- '500 Internal Server Error: Try again later'
- '500 Internal Server Error: Check server status and retry'
- '400 Invalid Request: required error and error_description'
- '401 Unauthorized: required error and error_description'
- '404 Not Found: required error and error_description'
- '500 Internal Server Error: required error and error_description'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - Client
  - NamedCredential
  - Tl-signature
  - AccessToken
  - RefreshToken
  - AuthorizationCode
  - psu-id
  - psu-password
client:
  base_url: https://api.truelayer.com
  auth:
    type: oauth2
source_metadata: null
